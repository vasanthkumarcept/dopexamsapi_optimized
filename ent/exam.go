// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"recruit/ent/exam"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Exam is the model entity for the Exam schema.
type Exam struct {
	config `json:"-"`
	// ID of the ent.
	ID int32 `json:"id,omitempty"`
	// ExamType holds the value of the "ExamType" field.
	ExamType string `json:"ExamType,omitempty"`
	// ExamName holds the value of the "ExamName" field.
	ExamName string `json:"ExamName,omitempty"`
	// ExamShortName holds the value of the "ExamShortName" field.
	ExamShortName string `json:"ExamShortName,omitempty"`
	// SmsExamShortName holds the value of the "SmsExamShortName" field.
	SmsExamShortName string `json:"SmsExamShortName,omitempty"`
	// ExamCode holds the value of the "ExamCode" field.
	ExamCode int32 `json:"ExamCode,omitempty"`
	// CalenderIssuedBy holds the value of the "CalenderIssuedBy" field.
	CalenderIssuedBy string `json:"CalenderIssuedBy,omitempty"`
	// NotificationBy holds the value of the "NotificationBy" field.
	NotificationBy string `json:"NotificationBy,omitempty"`
	// ConductedBy holds the value of the "ConductedBy" field.
	ConductedBy string `json:"ConductedBy,omitempty"`
	// NodalOfficerLevel holds the value of the "NodalOfficerLevel" field.
	NodalOfficerLevel string `json:"NodalOfficerLevel,omitempty"`
	// TentativeNotificationMandatoryDate holds the value of the "TentativeNotificationMandatoryDate" field.
	TentativeNotificationMandatoryDate bool `json:"TentativeNotificationMandatoryDate,omitempty"`
	// LocalLanguage holds the value of the "LocalLanguage" field.
	LocalLanguage bool `json:"LocalLanguage,omitempty"`
	// OptionForPost holds the value of the "OptionForPost" field.
	OptionForPost bool `json:"OptionForPost,omitempty"`
	// OptionToWriteExamOtherThanParent holds the value of the "OptionToWriteExamOtherThanParent" field.
	OptionToWriteExamOtherThanParent bool `json:"OptionToWriteExamOtherThanParent,omitempty"`
	// TableName holds the value of the "TableName" field.
	TableName string `json:"TableName,omitempty"`
	// OrderNumber holds the value of the "OrderNumber" field.
	OrderNumber string `json:"OrderNumber,omitempty"`
	// CreatedById holds the value of the "CreatedById" field.
	CreatedById int64 `json:"CreatedById,omitempty"`
	// CreatedByUserName holds the value of the "CreatedByUserName" field.
	CreatedByUserName string `json:"CreatedByUserName,omitempty"`
	// CreatedByEmpId holds the value of the "CreatedByEmpId" field.
	CreatedByEmpId int64 `json:"CreatedByEmpId,omitempty"`
	// CreatedByDesignation holds the value of the "CreatedByDesignation" field.
	CreatedByDesignation string `json:"CreatedByDesignation,omitempty"`
	// CreatedDate holds the value of the "CreatedDate" field.
	CreatedDate time.Time `json:"CreatedDate,omitempty"`
	// Verifiedbyid holds the value of the "verifiedbyid" field.
	Verifiedbyid int64 `json:"verifiedbyid,omitempty"`
	// Verifiedbyusername holds the value of the "verifiedbyusername" field.
	Verifiedbyusername string `json:"verifiedbyusername,omitempty"`
	// VerifiedbyEmployeeid holds the value of the "verifiedbyEmployeeid" field.
	VerifiedbyEmployeeid int64 `json:"verifiedbyEmployeeid,omitempty"`
	// VerifiedbyDesignation holds the value of the "verifiedbyDesignation" field.
	VerifiedbyDesignation string `json:"verifiedbyDesignation,omitempty"`
	// VerifiedDate holds the value of the "verifiedDate" field.
	VerifiedDate time.Time `json:"verifiedDate,omitempty"`
	// Statuss holds the value of the "Statuss" field.
	Statuss string `json:"Statuss,omitempty"`
	// Deletedbyid holds the value of the "deletedbyid" field.
	Deletedbyid int64 `json:"deletedbyid,omitempty"`
	// Deletedbyusername holds the value of the "deletedbyusername" field.
	Deletedbyusername string `json:"deletedbyusername,omitempty"`
	// DeletedbyEmployeeid holds the value of the "deletedbyEmployeeid" field.
	DeletedbyEmployeeid int64 `json:"deletedbyEmployeeid,omitempty"`
	// DeletedbyDesignation holds the value of the "deletedbyDesignation" field.
	DeletedbyDesignation string `json:"deletedbyDesignation,omitempty"`
	// DeletedDate holds the value of the "deletedDate" field.
	DeletedDate time.Time `json:"deletedDate,omitempty"`
	// NumOfPapers holds the value of the "NumOfPapers" field.
	NumOfPapers int32 `json:"NumOfPapers,omitempty"`
	// CalendarCode holds the value of the "CalendarCode" field.
	CalendarCode int32 `json:"CalendarCode,omitempty"`
	// PaperCode holds the value of the "PaperCode" field.
	PaperCode int32 `json:"PaperCode,omitempty"`
	// Status holds the value of the "Status" field.
	Status string `json:"Status,omitempty"`
	// ExamTypeCode holds the value of the "ExamTypeCode" field.
	ExamTypeCode int32 `json:"ExamTypeCode,omitempty"`
	// CreatedByEmployeeId holds the value of the "CreatedByEmployeeId" field.
	CreatedByEmployeeId string `json:"CreatedByEmployeeId,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ExamQuery when eager-loading is set.
	Edges              ExamEdges `json:"edges"`
	vacancy_year_exams *int32
	selectValues       sql.SelectValues
}

// ExamEdges holds the relations/edges for other nodes in the graph.
type ExamEdges struct {
	// Notifications holds the value of the notifications edge.
	Notifications []*Notification `json:"notifications,omitempty"`
	// ExamsRef holds the value of the exams_ref edge.
	ExamsRef []*ExamCalendar `json:"exams_ref,omitempty"`
	// Papers holds the value of the papers edge.
	Papers []*ExamPapers `json:"papers,omitempty"`
	// ExamEligibility holds the value of the ExamEligibility edge.
	ExamEligibility []*EligibilityMaster `json:"ExamEligibility,omitempty"`
	// ExamsType holds the value of the exams_type edge.
	ExamsType []*ExamType `json:"exams_type,omitempty"`
	// Examcentresip holds the value of the examcentresip edge.
	Examcentresip []*Center `json:"examcentresip,omitempty"`
	// ExamMasterRef holds the value of the ExamMasterRef edge.
	ExamMasterRef []*Exam_Applications_IP `json:"ExamMasterRef,omitempty"`
	// ExamMasterRefPS holds the value of the ExamMasterRefPS edge.
	ExamMasterRefPS []*Exam_Applications_PS `json:"ExamMasterRefPS,omitempty"`
	// ExamNotificationsRef holds the value of the Exam_Notifications_Ref edge.
	ExamNotificationsRef []*ExamNotifications `json:"Exam_Notifications_Ref,omitempty"`
	// ExamMasterRefGDSPA holds the value of the ExamMasterRefGDSPA edge.
	ExamMasterRefGDSPA []*Exam_Applications_GDSPA `json:"ExamMasterRefGDSPA,omitempty"`
	// ExamMasterRefGDSPM holds the value of the ExamMasterRefGDSPM edge.
	ExamMasterRefGDSPM []*Exam_Applications_GDSPM `json:"ExamMasterRefGDSPM,omitempty"`
	// ExamMasterRefPMPA holds the value of the ExamMasterRefPMPA edge.
	ExamMasterRefPMPA []*Exam_Applications_PMPA `json:"ExamMasterRefPMPA,omitempty"`
	// ExamMasterRefMTSPMMG holds the value of the ExamMasterRefMTSPMMG edge.
	ExamMasterRefMTSPMMG []*Exam_Application_MTSPMMG `json:"ExamMasterRefMTSPMMG,omitempty"`
	// LogData holds the value of the LogData edge.
	LogData []*Logs `json:"LogData,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [14]bool
}

// NotificationsOrErr returns the Notifications value or an error if the edge
// was not loaded in eager-loading.
func (e ExamEdges) NotificationsOrErr() ([]*Notification, error) {
	if e.loadedTypes[0] {
		return e.Notifications, nil
	}
	return nil, &NotLoadedError{edge: "notifications"}
}

// ExamsRefOrErr returns the ExamsRef value or an error if the edge
// was not loaded in eager-loading.
func (e ExamEdges) ExamsRefOrErr() ([]*ExamCalendar, error) {
	if e.loadedTypes[1] {
		return e.ExamsRef, nil
	}
	return nil, &NotLoadedError{edge: "exams_ref"}
}

// PapersOrErr returns the Papers value or an error if the edge
// was not loaded in eager-loading.
func (e ExamEdges) PapersOrErr() ([]*ExamPapers, error) {
	if e.loadedTypes[2] {
		return e.Papers, nil
	}
	return nil, &NotLoadedError{edge: "papers"}
}

// ExamEligibilityOrErr returns the ExamEligibility value or an error if the edge
// was not loaded in eager-loading.
func (e ExamEdges) ExamEligibilityOrErr() ([]*EligibilityMaster, error) {
	if e.loadedTypes[3] {
		return e.ExamEligibility, nil
	}
	return nil, &NotLoadedError{edge: "ExamEligibility"}
}

// ExamsTypeOrErr returns the ExamsType value or an error if the edge
// was not loaded in eager-loading.
func (e ExamEdges) ExamsTypeOrErr() ([]*ExamType, error) {
	if e.loadedTypes[4] {
		return e.ExamsType, nil
	}
	return nil, &NotLoadedError{edge: "exams_type"}
}

// ExamcentresipOrErr returns the Examcentresip value or an error if the edge
// was not loaded in eager-loading.
func (e ExamEdges) ExamcentresipOrErr() ([]*Center, error) {
	if e.loadedTypes[5] {
		return e.Examcentresip, nil
	}
	return nil, &NotLoadedError{edge: "examcentresip"}
}

// ExamMasterRefOrErr returns the ExamMasterRef value or an error if the edge
// was not loaded in eager-loading.
func (e ExamEdges) ExamMasterRefOrErr() ([]*Exam_Applications_IP, error) {
	if e.loadedTypes[6] {
		return e.ExamMasterRef, nil
	}
	return nil, &NotLoadedError{edge: "ExamMasterRef"}
}

// ExamMasterRefPSOrErr returns the ExamMasterRefPS value or an error if the edge
// was not loaded in eager-loading.
func (e ExamEdges) ExamMasterRefPSOrErr() ([]*Exam_Applications_PS, error) {
	if e.loadedTypes[7] {
		return e.ExamMasterRefPS, nil
	}
	return nil, &NotLoadedError{edge: "ExamMasterRefPS"}
}

// ExamNotificationsRefOrErr returns the ExamNotificationsRef value or an error if the edge
// was not loaded in eager-loading.
func (e ExamEdges) ExamNotificationsRefOrErr() ([]*ExamNotifications, error) {
	if e.loadedTypes[8] {
		return e.ExamNotificationsRef, nil
	}
	return nil, &NotLoadedError{edge: "Exam_Notifications_Ref"}
}

// ExamMasterRefGDSPAOrErr returns the ExamMasterRefGDSPA value or an error if the edge
// was not loaded in eager-loading.
func (e ExamEdges) ExamMasterRefGDSPAOrErr() ([]*Exam_Applications_GDSPA, error) {
	if e.loadedTypes[9] {
		return e.ExamMasterRefGDSPA, nil
	}
	return nil, &NotLoadedError{edge: "ExamMasterRefGDSPA"}
}

// ExamMasterRefGDSPMOrErr returns the ExamMasterRefGDSPM value or an error if the edge
// was not loaded in eager-loading.
func (e ExamEdges) ExamMasterRefGDSPMOrErr() ([]*Exam_Applications_GDSPM, error) {
	if e.loadedTypes[10] {
		return e.ExamMasterRefGDSPM, nil
	}
	return nil, &NotLoadedError{edge: "ExamMasterRefGDSPM"}
}

// ExamMasterRefPMPAOrErr returns the ExamMasterRefPMPA value or an error if the edge
// was not loaded in eager-loading.
func (e ExamEdges) ExamMasterRefPMPAOrErr() ([]*Exam_Applications_PMPA, error) {
	if e.loadedTypes[11] {
		return e.ExamMasterRefPMPA, nil
	}
	return nil, &NotLoadedError{edge: "ExamMasterRefPMPA"}
}

// ExamMasterRefMTSPMMGOrErr returns the ExamMasterRefMTSPMMG value or an error if the edge
// was not loaded in eager-loading.
func (e ExamEdges) ExamMasterRefMTSPMMGOrErr() ([]*Exam_Application_MTSPMMG, error) {
	if e.loadedTypes[12] {
		return e.ExamMasterRefMTSPMMG, nil
	}
	return nil, &NotLoadedError{edge: "ExamMasterRefMTSPMMG"}
}

// LogDataOrErr returns the LogData value or an error if the edge
// was not loaded in eager-loading.
func (e ExamEdges) LogDataOrErr() ([]*Logs, error) {
	if e.loadedTypes[13] {
		return e.LogData, nil
	}
	return nil, &NotLoadedError{edge: "LogData"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Exam) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case exam.FieldTentativeNotificationMandatoryDate, exam.FieldLocalLanguage, exam.FieldOptionForPost, exam.FieldOptionToWriteExamOtherThanParent:
			values[i] = new(sql.NullBool)
		case exam.FieldID, exam.FieldExamCode, exam.FieldCreatedById, exam.FieldCreatedByEmpId, exam.FieldVerifiedbyid, exam.FieldVerifiedbyEmployeeid, exam.FieldDeletedbyid, exam.FieldDeletedbyEmployeeid, exam.FieldNumOfPapers, exam.FieldCalendarCode, exam.FieldPaperCode, exam.FieldExamTypeCode:
			values[i] = new(sql.NullInt64)
		case exam.FieldExamType, exam.FieldExamName, exam.FieldExamShortName, exam.FieldSmsExamShortName, exam.FieldCalenderIssuedBy, exam.FieldNotificationBy, exam.FieldConductedBy, exam.FieldNodalOfficerLevel, exam.FieldTableName, exam.FieldOrderNumber, exam.FieldCreatedByUserName, exam.FieldCreatedByDesignation, exam.FieldVerifiedbyusername, exam.FieldVerifiedbyDesignation, exam.FieldStatuss, exam.FieldDeletedbyusername, exam.FieldDeletedbyDesignation, exam.FieldStatus, exam.FieldCreatedByEmployeeId:
			values[i] = new(sql.NullString)
		case exam.FieldCreatedDate, exam.FieldVerifiedDate, exam.FieldDeletedDate:
			values[i] = new(sql.NullTime)
		case exam.ForeignKeys[0]: // vacancy_year_exams
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Exam fields.
func (e *Exam) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case exam.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			e.ID = int32(value.Int64)
		case exam.FieldExamType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ExamType", values[i])
			} else if value.Valid {
				e.ExamType = value.String
			}
		case exam.FieldExamName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ExamName", values[i])
			} else if value.Valid {
				e.ExamName = value.String
			}
		case exam.FieldExamShortName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ExamShortName", values[i])
			} else if value.Valid {
				e.ExamShortName = value.String
			}
		case exam.FieldSmsExamShortName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field SmsExamShortName", values[i])
			} else if value.Valid {
				e.SmsExamShortName = value.String
			}
		case exam.FieldExamCode:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field ExamCode", values[i])
			} else if value.Valid {
				e.ExamCode = int32(value.Int64)
			}
		case exam.FieldCalenderIssuedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field CalenderIssuedBy", values[i])
			} else if value.Valid {
				e.CalenderIssuedBy = value.String
			}
		case exam.FieldNotificationBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field NotificationBy", values[i])
			} else if value.Valid {
				e.NotificationBy = value.String
			}
		case exam.FieldConductedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ConductedBy", values[i])
			} else if value.Valid {
				e.ConductedBy = value.String
			}
		case exam.FieldNodalOfficerLevel:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field NodalOfficerLevel", values[i])
			} else if value.Valid {
				e.NodalOfficerLevel = value.String
			}
		case exam.FieldTentativeNotificationMandatoryDate:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field TentativeNotificationMandatoryDate", values[i])
			} else if value.Valid {
				e.TentativeNotificationMandatoryDate = value.Bool
			}
		case exam.FieldLocalLanguage:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field LocalLanguage", values[i])
			} else if value.Valid {
				e.LocalLanguage = value.Bool
			}
		case exam.FieldOptionForPost:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field OptionForPost", values[i])
			} else if value.Valid {
				e.OptionForPost = value.Bool
			}
		case exam.FieldOptionToWriteExamOtherThanParent:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field OptionToWriteExamOtherThanParent", values[i])
			} else if value.Valid {
				e.OptionToWriteExamOtherThanParent = value.Bool
			}
		case exam.FieldTableName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field TableName", values[i])
			} else if value.Valid {
				e.TableName = value.String
			}
		case exam.FieldOrderNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field OrderNumber", values[i])
			} else if value.Valid {
				e.OrderNumber = value.String
			}
		case exam.FieldCreatedById:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field CreatedById", values[i])
			} else if value.Valid {
				e.CreatedById = value.Int64
			}
		case exam.FieldCreatedByUserName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field CreatedByUserName", values[i])
			} else if value.Valid {
				e.CreatedByUserName = value.String
			}
		case exam.FieldCreatedByEmpId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field CreatedByEmpId", values[i])
			} else if value.Valid {
				e.CreatedByEmpId = value.Int64
			}
		case exam.FieldCreatedByDesignation:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field CreatedByDesignation", values[i])
			} else if value.Valid {
				e.CreatedByDesignation = value.String
			}
		case exam.FieldCreatedDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field CreatedDate", values[i])
			} else if value.Valid {
				e.CreatedDate = value.Time
			}
		case exam.FieldVerifiedbyid:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field verifiedbyid", values[i])
			} else if value.Valid {
				e.Verifiedbyid = value.Int64
			}
		case exam.FieldVerifiedbyusername:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field verifiedbyusername", values[i])
			} else if value.Valid {
				e.Verifiedbyusername = value.String
			}
		case exam.FieldVerifiedbyEmployeeid:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field verifiedbyEmployeeid", values[i])
			} else if value.Valid {
				e.VerifiedbyEmployeeid = value.Int64
			}
		case exam.FieldVerifiedbyDesignation:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field verifiedbyDesignation", values[i])
			} else if value.Valid {
				e.VerifiedbyDesignation = value.String
			}
		case exam.FieldVerifiedDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field verifiedDate", values[i])
			} else if value.Valid {
				e.VerifiedDate = value.Time
			}
		case exam.FieldStatuss:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Statuss", values[i])
			} else if value.Valid {
				e.Statuss = value.String
			}
		case exam.FieldDeletedbyid:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deletedbyid", values[i])
			} else if value.Valid {
				e.Deletedbyid = value.Int64
			}
		case exam.FieldDeletedbyusername:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field deletedbyusername", values[i])
			} else if value.Valid {
				e.Deletedbyusername = value.String
			}
		case exam.FieldDeletedbyEmployeeid:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deletedbyEmployeeid", values[i])
			} else if value.Valid {
				e.DeletedbyEmployeeid = value.Int64
			}
		case exam.FieldDeletedbyDesignation:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field deletedbyDesignation", values[i])
			} else if value.Valid {
				e.DeletedbyDesignation = value.String
			}
		case exam.FieldDeletedDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deletedDate", values[i])
			} else if value.Valid {
				e.DeletedDate = value.Time
			}
		case exam.FieldNumOfPapers:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field NumOfPapers", values[i])
			} else if value.Valid {
				e.NumOfPapers = int32(value.Int64)
			}
		case exam.FieldCalendarCode:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field CalendarCode", values[i])
			} else if value.Valid {
				e.CalendarCode = int32(value.Int64)
			}
		case exam.FieldPaperCode:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field PaperCode", values[i])
			} else if value.Valid {
				e.PaperCode = int32(value.Int64)
			}
		case exam.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Status", values[i])
			} else if value.Valid {
				e.Status = value.String
			}
		case exam.FieldExamTypeCode:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field ExamTypeCode", values[i])
			} else if value.Valid {
				e.ExamTypeCode = int32(value.Int64)
			}
		case exam.FieldCreatedByEmployeeId:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field CreatedByEmployeeId", values[i])
			} else if value.Valid {
				e.CreatedByEmployeeId = value.String
			}
		case exam.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field vacancy_year_exams", value)
			} else if value.Valid {
				e.vacancy_year_exams = new(int32)
				*e.vacancy_year_exams = int32(value.Int64)
			}
		default:
			e.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Exam.
// This includes values selected through modifiers, order, etc.
func (e *Exam) Value(name string) (ent.Value, error) {
	return e.selectValues.Get(name)
}

// QueryNotifications queries the "notifications" edge of the Exam entity.
func (e *Exam) QueryNotifications() *NotificationQuery {
	return NewExamClient(e.config).QueryNotifications(e)
}

// QueryExamsRef queries the "exams_ref" edge of the Exam entity.
func (e *Exam) QueryExamsRef() *ExamCalendarQuery {
	return NewExamClient(e.config).QueryExamsRef(e)
}

// QueryPapers queries the "papers" edge of the Exam entity.
func (e *Exam) QueryPapers() *ExamPapersQuery {
	return NewExamClient(e.config).QueryPapers(e)
}

// QueryExamEligibility queries the "ExamEligibility" edge of the Exam entity.
func (e *Exam) QueryExamEligibility() *EligibilityMasterQuery {
	return NewExamClient(e.config).QueryExamEligibility(e)
}

// QueryExamsType queries the "exams_type" edge of the Exam entity.
func (e *Exam) QueryExamsType() *ExamTypeQuery {
	return NewExamClient(e.config).QueryExamsType(e)
}

// QueryExamcentresip queries the "examcentresip" edge of the Exam entity.
func (e *Exam) QueryExamcentresip() *CenterQuery {
	return NewExamClient(e.config).QueryExamcentresip(e)
}

// QueryExamMasterRef queries the "ExamMasterRef" edge of the Exam entity.
func (e *Exam) QueryExamMasterRef() *ExamApplicationsIPQuery {
	return NewExamClient(e.config).QueryExamMasterRef(e)
}

// QueryExamMasterRefPS queries the "ExamMasterRefPS" edge of the Exam entity.
func (e *Exam) QueryExamMasterRefPS() *ExamApplicationsPSQuery {
	return NewExamClient(e.config).QueryExamMasterRefPS(e)
}

// QueryExamNotificationsRef queries the "Exam_Notifications_Ref" edge of the Exam entity.
func (e *Exam) QueryExamNotificationsRef() *ExamNotificationsQuery {
	return NewExamClient(e.config).QueryExamNotificationsRef(e)
}

// QueryExamMasterRefGDSPA queries the "ExamMasterRefGDSPA" edge of the Exam entity.
func (e *Exam) QueryExamMasterRefGDSPA() *ExamApplicationsGDSPAQuery {
	return NewExamClient(e.config).QueryExamMasterRefGDSPA(e)
}

// QueryExamMasterRefGDSPM queries the "ExamMasterRefGDSPM" edge of the Exam entity.
func (e *Exam) QueryExamMasterRefGDSPM() *ExamApplicationsGDSPMQuery {
	return NewExamClient(e.config).QueryExamMasterRefGDSPM(e)
}

// QueryExamMasterRefPMPA queries the "ExamMasterRefPMPA" edge of the Exam entity.
func (e *Exam) QueryExamMasterRefPMPA() *ExamApplicationsPMPAQuery {
	return NewExamClient(e.config).QueryExamMasterRefPMPA(e)
}

// QueryExamMasterRefMTSPMMG queries the "ExamMasterRefMTSPMMG" edge of the Exam entity.
func (e *Exam) QueryExamMasterRefMTSPMMG() *ExamApplicationMTSPMMGQuery {
	return NewExamClient(e.config).QueryExamMasterRefMTSPMMG(e)
}

// QueryLogData queries the "LogData" edge of the Exam entity.
func (e *Exam) QueryLogData() *LogsQuery {
	return NewExamClient(e.config).QueryLogData(e)
}

// Update returns a builder for updating this Exam.
// Note that you need to call Exam.Unwrap() before calling this method if this Exam
// was returned from a transaction, and the transaction was committed or rolled back.
func (e *Exam) Update() *ExamUpdateOne {
	return NewExamClient(e.config).UpdateOne(e)
}

// Unwrap unwraps the Exam entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (e *Exam) Unwrap() *Exam {
	_tx, ok := e.config.driver.(*txDriver)
	if !ok {
		panic("ent: Exam is not a transactional entity")
	}
	e.config.driver = _tx.drv
	return e
}

// String implements the fmt.Stringer.
func (e *Exam) String() string {
	var builder strings.Builder
	builder.WriteString("Exam(")
	builder.WriteString(fmt.Sprintf("id=%v, ", e.ID))
	builder.WriteString("ExamType=")
	builder.WriteString(e.ExamType)
	builder.WriteString(", ")
	builder.WriteString("ExamName=")
	builder.WriteString(e.ExamName)
	builder.WriteString(", ")
	builder.WriteString("ExamShortName=")
	builder.WriteString(e.ExamShortName)
	builder.WriteString(", ")
	builder.WriteString("SmsExamShortName=")
	builder.WriteString(e.SmsExamShortName)
	builder.WriteString(", ")
	builder.WriteString("ExamCode=")
	builder.WriteString(fmt.Sprintf("%v", e.ExamCode))
	builder.WriteString(", ")
	builder.WriteString("CalenderIssuedBy=")
	builder.WriteString(e.CalenderIssuedBy)
	builder.WriteString(", ")
	builder.WriteString("NotificationBy=")
	builder.WriteString(e.NotificationBy)
	builder.WriteString(", ")
	builder.WriteString("ConductedBy=")
	builder.WriteString(e.ConductedBy)
	builder.WriteString(", ")
	builder.WriteString("NodalOfficerLevel=")
	builder.WriteString(e.NodalOfficerLevel)
	builder.WriteString(", ")
	builder.WriteString("TentativeNotificationMandatoryDate=")
	builder.WriteString(fmt.Sprintf("%v", e.TentativeNotificationMandatoryDate))
	builder.WriteString(", ")
	builder.WriteString("LocalLanguage=")
	builder.WriteString(fmt.Sprintf("%v", e.LocalLanguage))
	builder.WriteString(", ")
	builder.WriteString("OptionForPost=")
	builder.WriteString(fmt.Sprintf("%v", e.OptionForPost))
	builder.WriteString(", ")
	builder.WriteString("OptionToWriteExamOtherThanParent=")
	builder.WriteString(fmt.Sprintf("%v", e.OptionToWriteExamOtherThanParent))
	builder.WriteString(", ")
	builder.WriteString("TableName=")
	builder.WriteString(e.TableName)
	builder.WriteString(", ")
	builder.WriteString("OrderNumber=")
	builder.WriteString(e.OrderNumber)
	builder.WriteString(", ")
	builder.WriteString("CreatedById=")
	builder.WriteString(fmt.Sprintf("%v", e.CreatedById))
	builder.WriteString(", ")
	builder.WriteString("CreatedByUserName=")
	builder.WriteString(e.CreatedByUserName)
	builder.WriteString(", ")
	builder.WriteString("CreatedByEmpId=")
	builder.WriteString(fmt.Sprintf("%v", e.CreatedByEmpId))
	builder.WriteString(", ")
	builder.WriteString("CreatedByDesignation=")
	builder.WriteString(e.CreatedByDesignation)
	builder.WriteString(", ")
	builder.WriteString("CreatedDate=")
	builder.WriteString(e.CreatedDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("verifiedbyid=")
	builder.WriteString(fmt.Sprintf("%v", e.Verifiedbyid))
	builder.WriteString(", ")
	builder.WriteString("verifiedbyusername=")
	builder.WriteString(e.Verifiedbyusername)
	builder.WriteString(", ")
	builder.WriteString("verifiedbyEmployeeid=")
	builder.WriteString(fmt.Sprintf("%v", e.VerifiedbyEmployeeid))
	builder.WriteString(", ")
	builder.WriteString("verifiedbyDesignation=")
	builder.WriteString(e.VerifiedbyDesignation)
	builder.WriteString(", ")
	builder.WriteString("verifiedDate=")
	builder.WriteString(e.VerifiedDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("Statuss=")
	builder.WriteString(e.Statuss)
	builder.WriteString(", ")
	builder.WriteString("deletedbyid=")
	builder.WriteString(fmt.Sprintf("%v", e.Deletedbyid))
	builder.WriteString(", ")
	builder.WriteString("deletedbyusername=")
	builder.WriteString(e.Deletedbyusername)
	builder.WriteString(", ")
	builder.WriteString("deletedbyEmployeeid=")
	builder.WriteString(fmt.Sprintf("%v", e.DeletedbyEmployeeid))
	builder.WriteString(", ")
	builder.WriteString("deletedbyDesignation=")
	builder.WriteString(e.DeletedbyDesignation)
	builder.WriteString(", ")
	builder.WriteString("deletedDate=")
	builder.WriteString(e.DeletedDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("NumOfPapers=")
	builder.WriteString(fmt.Sprintf("%v", e.NumOfPapers))
	builder.WriteString(", ")
	builder.WriteString("CalendarCode=")
	builder.WriteString(fmt.Sprintf("%v", e.CalendarCode))
	builder.WriteString(", ")
	builder.WriteString("PaperCode=")
	builder.WriteString(fmt.Sprintf("%v", e.PaperCode))
	builder.WriteString(", ")
	builder.WriteString("Status=")
	builder.WriteString(e.Status)
	builder.WriteString(", ")
	builder.WriteString("ExamTypeCode=")
	builder.WriteString(fmt.Sprintf("%v", e.ExamTypeCode))
	builder.WriteString(", ")
	builder.WriteString("CreatedByEmployeeId=")
	builder.WriteString(e.CreatedByEmployeeId)
	builder.WriteByte(')')
	return builder.String()
}

// Exams is a parsable slice of Exam.
type Exams []*Exam
