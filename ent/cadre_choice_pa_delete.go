// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"recruit/ent/cadre_choice_pa"
	"recruit/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CadreChoicePADelete is the builder for deleting a Cadre_Choice_PA entity.
type CadreChoicePADelete struct {
	config
	hooks    []Hook
	mutation *CadreChoicePAMutation
}

// Where appends a list predicates to the CadreChoicePADelete builder.
func (ccpd *CadreChoicePADelete) Where(ps ...predicate.Cadre_Choice_PA) *CadreChoicePADelete {
	ccpd.mutation.Where(ps...)
	return ccpd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (ccpd *CadreChoicePADelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, ccpd.sqlExec, ccpd.mutation, ccpd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (ccpd *CadreChoicePADelete) ExecX(ctx context.Context) int {
	n, err := ccpd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (ccpd *CadreChoicePADelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(cadre_choice_pa.Table, sqlgraph.NewFieldSpec(cadre_choice_pa.FieldID, field.TypeInt32))
	if ps := ccpd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, ccpd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	ccpd.mutation.done = true
	return affected, err
}

// CadreChoicePADeleteOne is the builder for deleting a single Cadre_Choice_PA entity.
type CadreChoicePADeleteOne struct {
	ccpd *CadreChoicePADelete
}

// Where appends a list predicates to the CadreChoicePADelete builder.
func (ccpdo *CadreChoicePADeleteOne) Where(ps ...predicate.Cadre_Choice_PA) *CadreChoicePADeleteOne {
	ccpdo.ccpd.mutation.Where(ps...)
	return ccpdo
}

// Exec executes the deletion query.
func (ccpdo *CadreChoicePADeleteOne) Exec(ctx context.Context) error {
	n, err := ccpdo.ccpd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{cadre_choice_pa.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (ccpdo *CadreChoicePADeleteOne) ExecX(ctx context.Context) {
	if err := ccpdo.Exec(ctx); err != nil {
		panic(err)
	}
}
