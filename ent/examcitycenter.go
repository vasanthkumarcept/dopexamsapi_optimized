// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"recruit/ent/examcitycenter"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// ExamCityCenter is the model entity for the ExamCityCenter schema.
type ExamCityCenter struct {
	config `json:"-"`
	// ID of the ent.
	ID int32 `json:"id,omitempty"`
	// ExamCode holds the value of the "ExamCode" field.
	ExamCode int32 `json:"ExamCode,omitempty"`
	// ExamName holds the value of the "ExamName" field.
	ExamName string `json:"ExamName,omitempty"`
	// ExamShortName holds the value of the "ExamShortName" field.
	ExamShortName string `json:"ExamShortName,omitempty"`
	// ExamYear holds the value of the "ExamYear" field.
	ExamYear int32 `json:"ExamYear,omitempty"`
	// ConductedBy holds the value of the "ConductedBy" field.
	ConductedBy string `json:"ConductedBy,omitempty"`
	// NodalOfficeFacilityID holds the value of the "NodalOfficeFacilityID" field.
	NodalOfficeFacilityID string `json:"NodalOfficeFacilityID,omitempty"`
	// NodalOfficeName holds the value of the "NodalOfficeName" field.
	NodalOfficeName string `json:"NodalOfficeName,omitempty"`
	// NotificationCode holds the value of the "NotificationCode" field.
	NotificationCode int32 `json:"NotificationCode,omitempty"`
	// NotificationNumber holds the value of the "NotificationNumber" field.
	NotificationNumber string `json:"NotificationNumber,omitempty"`
	// CenterCityName holds the value of the "CenterCityName" field.
	CenterCityName string `json:"CenterCityName,omitempty"`
	// CreatedById holds the value of the "CreatedById" field.
	CreatedById int64 `json:"CreatedById,omitempty"`
	// CreatedByUserName holds the value of the "CreatedByUserName" field.
	CreatedByUserName string `json:"CreatedByUserName,omitempty"`
	// CreatedByEmpId holds the value of the "CreatedByEmpId" field.
	CreatedByEmpId int64 `json:"CreatedByEmpId,omitempty"`
	// CreatedByDesignation holds the value of the "CreatedByDesignation" field.
	CreatedByDesignation string `json:"CreatedByDesignation,omitempty"`
	// CreatedDate holds the value of the "CreatedDate" field.
	CreatedDate time.Time `json:"CreatedDate,omitempty"`
	// Status holds the value of the "Status" field.
	Status string `json:"Status,omitempty"`
	// Deletedbyid holds the value of the "deletedbyid" field.
	Deletedbyid int64 `json:"deletedbyid,omitempty"`
	// Deletedbyusername holds the value of the "deletedbyusername" field.
	Deletedbyusername string `json:"deletedbyusername,omitempty"`
	// DeletedbyEmployeeid holds the value of the "deletedbyEmployeeid" field.
	DeletedbyEmployeeid int64 `json:"deletedbyEmployeeid,omitempty"`
	// DeletedbyDesignation holds the value of the "deletedbyDesignation" field.
	DeletedbyDesignation string `json:"deletedbyDesignation,omitempty"`
	// DeletedDate holds the value of the "deletedDate" field.
	DeletedDate time.Time `json:"deletedDate,omitempty"`
	// CircleCityName holds the value of the "CircleCityName" field.
	CircleCityName string `json:"CircleCityName,omitempty"`
	// DivisionCode holds the value of the "DivisionCode" field.
	DivisionCode int32 `json:"DivisionCode,omitempty"`
	// RegionCode holds the value of the "RegionCode" field.
	RegionCode int32 `json:"RegionCode,omitempty"`
	// DivisionName holds the value of the "DivisionName" field.
	DivisionName string `json:"DivisionName,omitempty"`
	// RegionID holds the value of the "RegionID" field.
	RegionID int32 `json:"RegionID,omitempty"`
	// RegionName holds the value of the "RegionName" field.
	RegionName string `json:"RegionName,omitempty"`
	// RegionCityName holds the value of the "RegionCityName" field.
	RegionCityName string `json:"RegionCityName,omitempty"`
	// CentreCityName holds the value of the "CentreCityName" field.
	CentreCityName string `json:"CentreCityName,omitempty"`
	// Remarks holds the value of the "Remarks" field.
	Remarks string `json:"Remarks,omitempty"`
	// UpdatedAt holds the value of the "UpdatedAt" field.
	UpdatedAt time.Time `json:"UpdatedAt,omitempty"`
	// UpdatedBy holds the value of the "UpdatedBy" field.
	UpdatedBy string `json:"UpdatedBy,omitempty"`
	// CentreCode holds the value of the "CentreCode" field.
	CentreCode int32 `json:"CentreCode,omitempty"`
	// CircleID holds the value of the "CircleID" field.
	CircleID int32 `json:"CircleID,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ExamCityCenterQuery when eager-loading is set.
	Edges               ExamCityCenterEdges `json:"edges"`
	center_examscentres *int32
	selectValues        sql.SelectValues
}

// ExamCityCenterEdges holds the relations/edges for other nodes in the graph.
type ExamCityCenterEdges struct {
	// ExamCityCenterRef holds the value of the ExamCityCenterRef edge.
	ExamCityCenterRef []*Exam_Applications_IP `json:"ExamCityCenterRef,omitempty"`
	// ExamCityCenterMTSPMMGRef holds the value of the ExamCityCenterMTSPMMGRef edge.
	ExamCityCenterMTSPMMGRef []*Exam_Application_MTSPMMG `json:"ExamCityCenterMTSPMMGRef,omitempty"`
	// ExamCityCenterGDSPARef holds the value of the ExamCityCenterGDSPARef edge.
	ExamCityCenterGDSPARef []*Exam_Applications_GDSPA `json:"ExamCityCenterGDSPARef,omitempty"`
	// ExamCityCenterGDSPMRef holds the value of the ExamCityCenterGDSPMRef edge.
	ExamCityCenterGDSPMRef []*Exam_Applications_GDSPM `json:"ExamCityCenterGDSPMRef,omitempty"`
	// ExamCityCenterPMPARef holds the value of the ExamCityCenterPMPARef edge.
	ExamCityCenterPMPARef []*Exam_Applications_PMPA `json:"ExamCityCenterPMPARef,omitempty"`
	// ExamCityCenterPSRef holds the value of the ExamCityCenterPSRef edge.
	ExamCityCenterPSRef []*Exam_Applications_PS `json:"ExamCityCenterPSRef,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [6]bool
}

// ExamCityCenterRefOrErr returns the ExamCityCenterRef value or an error if the edge
// was not loaded in eager-loading.
func (e ExamCityCenterEdges) ExamCityCenterRefOrErr() ([]*Exam_Applications_IP, error) {
	if e.loadedTypes[0] {
		return e.ExamCityCenterRef, nil
	}
	return nil, &NotLoadedError{edge: "ExamCityCenterRef"}
}

// ExamCityCenterMTSPMMGRefOrErr returns the ExamCityCenterMTSPMMGRef value or an error if the edge
// was not loaded in eager-loading.
func (e ExamCityCenterEdges) ExamCityCenterMTSPMMGRefOrErr() ([]*Exam_Application_MTSPMMG, error) {
	if e.loadedTypes[1] {
		return e.ExamCityCenterMTSPMMGRef, nil
	}
	return nil, &NotLoadedError{edge: "ExamCityCenterMTSPMMGRef"}
}

// ExamCityCenterGDSPARefOrErr returns the ExamCityCenterGDSPARef value or an error if the edge
// was not loaded in eager-loading.
func (e ExamCityCenterEdges) ExamCityCenterGDSPARefOrErr() ([]*Exam_Applications_GDSPA, error) {
	if e.loadedTypes[2] {
		return e.ExamCityCenterGDSPARef, nil
	}
	return nil, &NotLoadedError{edge: "ExamCityCenterGDSPARef"}
}

// ExamCityCenterGDSPMRefOrErr returns the ExamCityCenterGDSPMRef value or an error if the edge
// was not loaded in eager-loading.
func (e ExamCityCenterEdges) ExamCityCenterGDSPMRefOrErr() ([]*Exam_Applications_GDSPM, error) {
	if e.loadedTypes[3] {
		return e.ExamCityCenterGDSPMRef, nil
	}
	return nil, &NotLoadedError{edge: "ExamCityCenterGDSPMRef"}
}

// ExamCityCenterPMPARefOrErr returns the ExamCityCenterPMPARef value or an error if the edge
// was not loaded in eager-loading.
func (e ExamCityCenterEdges) ExamCityCenterPMPARefOrErr() ([]*Exam_Applications_PMPA, error) {
	if e.loadedTypes[4] {
		return e.ExamCityCenterPMPARef, nil
	}
	return nil, &NotLoadedError{edge: "ExamCityCenterPMPARef"}
}

// ExamCityCenterPSRefOrErr returns the ExamCityCenterPSRef value or an error if the edge
// was not loaded in eager-loading.
func (e ExamCityCenterEdges) ExamCityCenterPSRefOrErr() ([]*Exam_Applications_PS, error) {
	if e.loadedTypes[5] {
		return e.ExamCityCenterPSRef, nil
	}
	return nil, &NotLoadedError{edge: "ExamCityCenterPSRef"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ExamCityCenter) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case examcitycenter.FieldID, examcitycenter.FieldExamCode, examcitycenter.FieldExamYear, examcitycenter.FieldNotificationCode, examcitycenter.FieldCreatedById, examcitycenter.FieldCreatedByEmpId, examcitycenter.FieldDeletedbyid, examcitycenter.FieldDeletedbyEmployeeid, examcitycenter.FieldDivisionCode, examcitycenter.FieldRegionCode, examcitycenter.FieldRegionID, examcitycenter.FieldCentreCode, examcitycenter.FieldCircleID:
			values[i] = new(sql.NullInt64)
		case examcitycenter.FieldExamName, examcitycenter.FieldExamShortName, examcitycenter.FieldConductedBy, examcitycenter.FieldNodalOfficeFacilityID, examcitycenter.FieldNodalOfficeName, examcitycenter.FieldNotificationNumber, examcitycenter.FieldCenterCityName, examcitycenter.FieldCreatedByUserName, examcitycenter.FieldCreatedByDesignation, examcitycenter.FieldStatus, examcitycenter.FieldDeletedbyusername, examcitycenter.FieldDeletedbyDesignation, examcitycenter.FieldCircleCityName, examcitycenter.FieldDivisionName, examcitycenter.FieldRegionName, examcitycenter.FieldRegionCityName, examcitycenter.FieldCentreCityName, examcitycenter.FieldRemarks, examcitycenter.FieldUpdatedBy:
			values[i] = new(sql.NullString)
		case examcitycenter.FieldCreatedDate, examcitycenter.FieldDeletedDate, examcitycenter.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case examcitycenter.ForeignKeys[0]: // center_examscentres
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ExamCityCenter fields.
func (ecc *ExamCityCenter) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case examcitycenter.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ecc.ID = int32(value.Int64)
		case examcitycenter.FieldExamCode:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field ExamCode", values[i])
			} else if value.Valid {
				ecc.ExamCode = int32(value.Int64)
			}
		case examcitycenter.FieldExamName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ExamName", values[i])
			} else if value.Valid {
				ecc.ExamName = value.String
			}
		case examcitycenter.FieldExamShortName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ExamShortName", values[i])
			} else if value.Valid {
				ecc.ExamShortName = value.String
			}
		case examcitycenter.FieldExamYear:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field ExamYear", values[i])
			} else if value.Valid {
				ecc.ExamYear = int32(value.Int64)
			}
		case examcitycenter.FieldConductedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ConductedBy", values[i])
			} else if value.Valid {
				ecc.ConductedBy = value.String
			}
		case examcitycenter.FieldNodalOfficeFacilityID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field NodalOfficeFacilityID", values[i])
			} else if value.Valid {
				ecc.NodalOfficeFacilityID = value.String
			}
		case examcitycenter.FieldNodalOfficeName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field NodalOfficeName", values[i])
			} else if value.Valid {
				ecc.NodalOfficeName = value.String
			}
		case examcitycenter.FieldNotificationCode:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field NotificationCode", values[i])
			} else if value.Valid {
				ecc.NotificationCode = int32(value.Int64)
			}
		case examcitycenter.FieldNotificationNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field NotificationNumber", values[i])
			} else if value.Valid {
				ecc.NotificationNumber = value.String
			}
		case examcitycenter.FieldCenterCityName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field CenterCityName", values[i])
			} else if value.Valid {
				ecc.CenterCityName = value.String
			}
		case examcitycenter.FieldCreatedById:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field CreatedById", values[i])
			} else if value.Valid {
				ecc.CreatedById = value.Int64
			}
		case examcitycenter.FieldCreatedByUserName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field CreatedByUserName", values[i])
			} else if value.Valid {
				ecc.CreatedByUserName = value.String
			}
		case examcitycenter.FieldCreatedByEmpId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field CreatedByEmpId", values[i])
			} else if value.Valid {
				ecc.CreatedByEmpId = value.Int64
			}
		case examcitycenter.FieldCreatedByDesignation:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field CreatedByDesignation", values[i])
			} else if value.Valid {
				ecc.CreatedByDesignation = value.String
			}
		case examcitycenter.FieldCreatedDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field CreatedDate", values[i])
			} else if value.Valid {
				ecc.CreatedDate = value.Time
			}
		case examcitycenter.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Status", values[i])
			} else if value.Valid {
				ecc.Status = value.String
			}
		case examcitycenter.FieldDeletedbyid:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deletedbyid", values[i])
			} else if value.Valid {
				ecc.Deletedbyid = value.Int64
			}
		case examcitycenter.FieldDeletedbyusername:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field deletedbyusername", values[i])
			} else if value.Valid {
				ecc.Deletedbyusername = value.String
			}
		case examcitycenter.FieldDeletedbyEmployeeid:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deletedbyEmployeeid", values[i])
			} else if value.Valid {
				ecc.DeletedbyEmployeeid = value.Int64
			}
		case examcitycenter.FieldDeletedbyDesignation:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field deletedbyDesignation", values[i])
			} else if value.Valid {
				ecc.DeletedbyDesignation = value.String
			}
		case examcitycenter.FieldDeletedDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deletedDate", values[i])
			} else if value.Valid {
				ecc.DeletedDate = value.Time
			}
		case examcitycenter.FieldCircleCityName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field CircleCityName", values[i])
			} else if value.Valid {
				ecc.CircleCityName = value.String
			}
		case examcitycenter.FieldDivisionCode:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field DivisionCode", values[i])
			} else if value.Valid {
				ecc.DivisionCode = int32(value.Int64)
			}
		case examcitycenter.FieldRegionCode:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field RegionCode", values[i])
			} else if value.Valid {
				ecc.RegionCode = int32(value.Int64)
			}
		case examcitycenter.FieldDivisionName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field DivisionName", values[i])
			} else if value.Valid {
				ecc.DivisionName = value.String
			}
		case examcitycenter.FieldRegionID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field RegionID", values[i])
			} else if value.Valid {
				ecc.RegionID = int32(value.Int64)
			}
		case examcitycenter.FieldRegionName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field RegionName", values[i])
			} else if value.Valid {
				ecc.RegionName = value.String
			}
		case examcitycenter.FieldRegionCityName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field RegionCityName", values[i])
			} else if value.Valid {
				ecc.RegionCityName = value.String
			}
		case examcitycenter.FieldCentreCityName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field CentreCityName", values[i])
			} else if value.Valid {
				ecc.CentreCityName = value.String
			}
		case examcitycenter.FieldRemarks:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Remarks", values[i])
			} else if value.Valid {
				ecc.Remarks = value.String
			}
		case examcitycenter.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field UpdatedAt", values[i])
			} else if value.Valid {
				ecc.UpdatedAt = value.Time
			}
		case examcitycenter.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field UpdatedBy", values[i])
			} else if value.Valid {
				ecc.UpdatedBy = value.String
			}
		case examcitycenter.FieldCentreCode:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field CentreCode", values[i])
			} else if value.Valid {
				ecc.CentreCode = int32(value.Int64)
			}
		case examcitycenter.FieldCircleID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field CircleID", values[i])
			} else if value.Valid {
				ecc.CircleID = int32(value.Int64)
			}
		case examcitycenter.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field center_examscentres", value)
			} else if value.Valid {
				ecc.center_examscentres = new(int32)
				*ecc.center_examscentres = int32(value.Int64)
			}
		default:
			ecc.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ExamCityCenter.
// This includes values selected through modifiers, order, etc.
func (ecc *ExamCityCenter) Value(name string) (ent.Value, error) {
	return ecc.selectValues.Get(name)
}

// QueryExamCityCenterRef queries the "ExamCityCenterRef" edge of the ExamCityCenter entity.
func (ecc *ExamCityCenter) QueryExamCityCenterRef() *ExamApplicationsIPQuery {
	return NewExamCityCenterClient(ecc.config).QueryExamCityCenterRef(ecc)
}

// QueryExamCityCenterMTSPMMGRef queries the "ExamCityCenterMTSPMMGRef" edge of the ExamCityCenter entity.
func (ecc *ExamCityCenter) QueryExamCityCenterMTSPMMGRef() *ExamApplicationMTSPMMGQuery {
	return NewExamCityCenterClient(ecc.config).QueryExamCityCenterMTSPMMGRef(ecc)
}

// QueryExamCityCenterGDSPARef queries the "ExamCityCenterGDSPARef" edge of the ExamCityCenter entity.
func (ecc *ExamCityCenter) QueryExamCityCenterGDSPARef() *ExamApplicationsGDSPAQuery {
	return NewExamCityCenterClient(ecc.config).QueryExamCityCenterGDSPARef(ecc)
}

// QueryExamCityCenterGDSPMRef queries the "ExamCityCenterGDSPMRef" edge of the ExamCityCenter entity.
func (ecc *ExamCityCenter) QueryExamCityCenterGDSPMRef() *ExamApplicationsGDSPMQuery {
	return NewExamCityCenterClient(ecc.config).QueryExamCityCenterGDSPMRef(ecc)
}

// QueryExamCityCenterPMPARef queries the "ExamCityCenterPMPARef" edge of the ExamCityCenter entity.
func (ecc *ExamCityCenter) QueryExamCityCenterPMPARef() *ExamApplicationsPMPAQuery {
	return NewExamCityCenterClient(ecc.config).QueryExamCityCenterPMPARef(ecc)
}

// QueryExamCityCenterPSRef queries the "ExamCityCenterPSRef" edge of the ExamCityCenter entity.
func (ecc *ExamCityCenter) QueryExamCityCenterPSRef() *ExamApplicationsPSQuery {
	return NewExamCityCenterClient(ecc.config).QueryExamCityCenterPSRef(ecc)
}

// Update returns a builder for updating this ExamCityCenter.
// Note that you need to call ExamCityCenter.Unwrap() before calling this method if this ExamCityCenter
// was returned from a transaction, and the transaction was committed or rolled back.
func (ecc *ExamCityCenter) Update() *ExamCityCenterUpdateOne {
	return NewExamCityCenterClient(ecc.config).UpdateOne(ecc)
}

// Unwrap unwraps the ExamCityCenter entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ecc *ExamCityCenter) Unwrap() *ExamCityCenter {
	_tx, ok := ecc.config.driver.(*txDriver)
	if !ok {
		panic("ent: ExamCityCenter is not a transactional entity")
	}
	ecc.config.driver = _tx.drv
	return ecc
}

// String implements the fmt.Stringer.
func (ecc *ExamCityCenter) String() string {
	var builder strings.Builder
	builder.WriteString("ExamCityCenter(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ecc.ID))
	builder.WriteString("ExamCode=")
	builder.WriteString(fmt.Sprintf("%v", ecc.ExamCode))
	builder.WriteString(", ")
	builder.WriteString("ExamName=")
	builder.WriteString(ecc.ExamName)
	builder.WriteString(", ")
	builder.WriteString("ExamShortName=")
	builder.WriteString(ecc.ExamShortName)
	builder.WriteString(", ")
	builder.WriteString("ExamYear=")
	builder.WriteString(fmt.Sprintf("%v", ecc.ExamYear))
	builder.WriteString(", ")
	builder.WriteString("ConductedBy=")
	builder.WriteString(ecc.ConductedBy)
	builder.WriteString(", ")
	builder.WriteString("NodalOfficeFacilityID=")
	builder.WriteString(ecc.NodalOfficeFacilityID)
	builder.WriteString(", ")
	builder.WriteString("NodalOfficeName=")
	builder.WriteString(ecc.NodalOfficeName)
	builder.WriteString(", ")
	builder.WriteString("NotificationCode=")
	builder.WriteString(fmt.Sprintf("%v", ecc.NotificationCode))
	builder.WriteString(", ")
	builder.WriteString("NotificationNumber=")
	builder.WriteString(ecc.NotificationNumber)
	builder.WriteString(", ")
	builder.WriteString("CenterCityName=")
	builder.WriteString(ecc.CenterCityName)
	builder.WriteString(", ")
	builder.WriteString("CreatedById=")
	builder.WriteString(fmt.Sprintf("%v", ecc.CreatedById))
	builder.WriteString(", ")
	builder.WriteString("CreatedByUserName=")
	builder.WriteString(ecc.CreatedByUserName)
	builder.WriteString(", ")
	builder.WriteString("CreatedByEmpId=")
	builder.WriteString(fmt.Sprintf("%v", ecc.CreatedByEmpId))
	builder.WriteString(", ")
	builder.WriteString("CreatedByDesignation=")
	builder.WriteString(ecc.CreatedByDesignation)
	builder.WriteString(", ")
	builder.WriteString("CreatedDate=")
	builder.WriteString(ecc.CreatedDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("Status=")
	builder.WriteString(ecc.Status)
	builder.WriteString(", ")
	builder.WriteString("deletedbyid=")
	builder.WriteString(fmt.Sprintf("%v", ecc.Deletedbyid))
	builder.WriteString(", ")
	builder.WriteString("deletedbyusername=")
	builder.WriteString(ecc.Deletedbyusername)
	builder.WriteString(", ")
	builder.WriteString("deletedbyEmployeeid=")
	builder.WriteString(fmt.Sprintf("%v", ecc.DeletedbyEmployeeid))
	builder.WriteString(", ")
	builder.WriteString("deletedbyDesignation=")
	builder.WriteString(ecc.DeletedbyDesignation)
	builder.WriteString(", ")
	builder.WriteString("deletedDate=")
	builder.WriteString(ecc.DeletedDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("CircleCityName=")
	builder.WriteString(ecc.CircleCityName)
	builder.WriteString(", ")
	builder.WriteString("DivisionCode=")
	builder.WriteString(fmt.Sprintf("%v", ecc.DivisionCode))
	builder.WriteString(", ")
	builder.WriteString("RegionCode=")
	builder.WriteString(fmt.Sprintf("%v", ecc.RegionCode))
	builder.WriteString(", ")
	builder.WriteString("DivisionName=")
	builder.WriteString(ecc.DivisionName)
	builder.WriteString(", ")
	builder.WriteString("RegionID=")
	builder.WriteString(fmt.Sprintf("%v", ecc.RegionID))
	builder.WriteString(", ")
	builder.WriteString("RegionName=")
	builder.WriteString(ecc.RegionName)
	builder.WriteString(", ")
	builder.WriteString("RegionCityName=")
	builder.WriteString(ecc.RegionCityName)
	builder.WriteString(", ")
	builder.WriteString("CentreCityName=")
	builder.WriteString(ecc.CentreCityName)
	builder.WriteString(", ")
	builder.WriteString("Remarks=")
	builder.WriteString(ecc.Remarks)
	builder.WriteString(", ")
	builder.WriteString("UpdatedAt=")
	builder.WriteString(ecc.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("UpdatedBy=")
	builder.WriteString(ecc.UpdatedBy)
	builder.WriteString(", ")
	builder.WriteString("CentreCode=")
	builder.WriteString(fmt.Sprintf("%v", ecc.CentreCode))
	builder.WriteString(", ")
	builder.WriteString("CircleID=")
	builder.WriteString(fmt.Sprintf("%v", ecc.CircleID))
	builder.WriteByte(')')
	return builder.String()
}

// ExamCityCenters is a parsable slice of ExamCityCenter.
type ExamCityCenters []*ExamCityCenter
