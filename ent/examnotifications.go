// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"recruit/ent/examnotifications"
	"recruit/ent/usermaster"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// ExamNotifications is the model entity for the ExamNotifications schema.
type ExamNotifications struct {
	config `json:"-"`
	// ID of the ent.
	ID int32 `json:"id,omitempty"`
	// UserName holds the value of the "UserName" field.
	UserName string `json:"UserName,omitempty"`
	// ExamYear holds the value of the "ExamYear" field.
	ExamYear int32 `json:"ExamYear,omitempty"`
	// EmployeeMasterRequestLastDate holds the value of the "EmployeeMasterRequestLastDate" field.
	EmployeeMasterRequestLastDate time.Time `json:"EmployeeMasterRequestLastDate,omitempty"`
	// EmployeeMasterRequestApprovalLastDate holds the value of the "EmployeeMasterRequestApprovalLastDate" field.
	EmployeeMasterRequestApprovalLastDate time.Time `json:"EmployeeMasterRequestApprovalLastDate,omitempty"`
	// ExamRegisterLastDate holds the value of the "ExamRegisterLastDate" field.
	ExamRegisterLastDate time.Time `json:"ExamRegisterLastDate,omitempty"`
	// ApplicationStartDate holds the value of the "ApplicationStartDate" field.
	ApplicationStartDate time.Time `json:"ApplicationStartDate,omitempty"`
	// ApplicationEndDate holds the value of the "ApplicationEndDate" field.
	ApplicationEndDate time.Time `json:"ApplicationEndDate,omitempty"`
	// ApplicationCorrectionStartDate holds the value of the "ApplicationCorrectionStartDate" field.
	ApplicationCorrectionStartDate time.Time `json:"ApplicationCorrectionStartDate,omitempty"`
	// ApplicationCorrectionLastDate holds the value of the "ApplicationCorrectionLastDate" field.
	ApplicationCorrectionLastDate time.Time `json:"ApplicationCorrectionLastDate,omitempty"`
	// ApplicationVerificationLastDate holds the value of the "ApplicationVerificationLastDate" field.
	ApplicationVerificationLastDate time.Time `json:"ApplicationVerificationLastDate,omitempty"`
	// CenterAllotmentEndDate holds the value of the "CenterAllotmentEndDate" field.
	CenterAllotmentEndDate time.Time `json:"CenterAllotmentEndDate,omitempty"`
	// NodalOfficerApprovalDate holds the value of the "NodalOfficerApprovalDate" field.
	NodalOfficerApprovalDate time.Time `json:"NodalOfficerApprovalDate,omitempty"`
	// AdmitCardDate holds the value of the "AdmitCardDate" field.
	AdmitCardDate time.Time `json:"AdmitCardDate,omitempty"`
	// UpdatedAt holds the value of the "UpdatedAt" field.
	UpdatedAt time.Time `json:"UpdatedAt,omitempty"`
	// UpdatedBy holds the value of the "UpdatedBy" field.
	UpdatedBy string `json:"UpdatedBy,omitempty"`
	// CrucialDate holds the value of the "CrucialDate" field.
	CrucialDate []interface{} `json:"CrucialDate,omitempty"`
	// Designation holds the value of the "Designation" field.
	Designation string `json:"Designation,omitempty"`
	// OfficerName holds the value of the "OfficerName" field.
	OfficerName string `json:"OfficerName,omitempty"`
	// NotificationOrderNumber holds the value of the "NotificationOrderNumber" field.
	NotificationOrderNumber string `json:"NotificationOrderNumber,omitempty"`
	// NotesheetScannedCopy holds the value of the "NotesheetScannedCopy" field.
	NotesheetScannedCopy string `json:"NotesheetScannedCopy,omitempty"`
	// NotificationNumber holds the value of the "NotificationNumber" field.
	NotificationNumber string `json:"NotificationNumber,omitempty"`
	// Flag holds the value of the "Flag" field.
	Flag bool `json:"Flag,omitempty"`
	// ExamShortName holds the value of the "ExamShortName" field.
	ExamShortName string `json:"ExamShortName,omitempty"`
	// CircleOfficeFacilityId holds the value of the "CircleOfficeFacilityId" field.
	CircleOfficeFacilityId string `json:"CircleOfficeFacilityId,omitempty"`
	// CircleOfficeName holds the value of the "CircleOfficeName" field.
	CircleOfficeName string `json:"CircleOfficeName,omitempty"`
	// IssuedBy holds the value of the "IssuedBy" field.
	IssuedBy string `json:"IssuedBy,omitempty"`
	// OrderDate holds the value of the "OrderDate" field.
	OrderDate time.Time `json:"OrderDate,omitempty"`
	// CreatedBy holds the value of the "CreatedBy" field.
	CreatedBy string `json:"CreatedBy,omitempty"`
	// CreatedById holds the value of the "CreatedById" field.
	CreatedById int64 `json:"CreatedById,omitempty"`
	// CreatedByName holds the value of the "CreatedByName" field.
	CreatedByName string `json:"CreatedByName,omitempty"`
	// CreatedByDesignation holds the value of the "CreatedByDesignation" field.
	CreatedByDesignation string `json:"CreatedByDesignation,omitempty"`
	// ApprovedBy holds the value of the "ApprovedBy" field.
	ApprovedBy string `json:"ApprovedBy,omitempty"`
	// ApprovedById holds the value of the "ApprovedById" field.
	ApprovedById int64 `json:"ApprovedById,omitempty"`
	// ApprovedByName holds the value of the "ApprovedByName" field.
	ApprovedByName string `json:"ApprovedByName,omitempty"`
	// ApprovedByDesignation holds the value of the "ApprovedByDesignation" field.
	ApprovedByDesignation string `json:"ApprovedByDesignation,omitempty"`
	// ResubmittedApplicationVerificationDate holds the value of the "ResubmittedApplicationVerificationDate" field.
	ResubmittedApplicationVerificationDate time.Time `json:"ResubmittedApplicationVerificationDate,omitempty"`
	// Papers holds the value of the "Papers" field.
	Papers []interface{} `json:"Papers,omitempty"`
	// NotificationStatus holds the value of the "NotificationStatus" field.
	NotificationStatus string `json:"NotificationStatus,omitempty"`
	// Status holds the value of the "Status" field.
	Status string `json:"Status,omitempty"`
	// NotificationReIssueStatus holds the value of the "NotificationReIssueStatus" field.
	NotificationReIssueStatus bool `json:"NotificationReIssueStatus,omitempty"`
	// EditFlagStatus holds the value of the "EditFlagStatus" field.
	EditFlagStatus bool `json:"EditFlagStatus,omitempty"`
	// ExamCode holds the value of the "ExamCode" field.
	ExamCode int32 `json:"ExamCode,omitempty"`
	// ExamName holds the value of the "ExamName" field.
	ExamName string `json:"ExamName,omitempty"`
	// UserID holds the value of the "UserID" field.
	UserID int64 `json:"UserID,omitempty"`
	// NotificationRemarks holds the value of the "NotificationRemarks" field.
	NotificationRemarks string `json:"NotificationRemarks,omitempty"`
	// SmsExamShortName holds the value of the "SmsExamShortName" field.
	SmsExamShortName string `json:"SmsExamShortName,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ExamNotificationsQuery when eager-loading is set.
	Edges                       ExamNotificationsEdges `json:"edges"`
	exam_exam_notifications_ref *int32
	selectValues                sql.SelectValues
}

// ExamNotificationsEdges holds the relations/edges for other nodes in the graph.
type ExamNotificationsEdges struct {
	// UserIDref holds the value of the UserIDref edge.
	UserIDref *UserMaster `json:"UserIDref,omitempty"`
	// LogData holds the value of the LogData edge.
	LogData []*Logs `json:"LogData,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// UserIDrefOrErr returns the UserIDref value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ExamNotificationsEdges) UserIDrefOrErr() (*UserMaster, error) {
	if e.loadedTypes[0] {
		if e.UserIDref == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: usermaster.Label}
		}
		return e.UserIDref, nil
	}
	return nil, &NotLoadedError{edge: "UserIDref"}
}

// LogDataOrErr returns the LogData value or an error if the edge
// was not loaded in eager-loading.
func (e ExamNotificationsEdges) LogDataOrErr() ([]*Logs, error) {
	if e.loadedTypes[1] {
		return e.LogData, nil
	}
	return nil, &NotLoadedError{edge: "LogData"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ExamNotifications) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case examnotifications.FieldCrucialDate, examnotifications.FieldPapers:
			values[i] = new([]byte)
		case examnotifications.FieldFlag, examnotifications.FieldNotificationReIssueStatus, examnotifications.FieldEditFlagStatus:
			values[i] = new(sql.NullBool)
		case examnotifications.FieldID, examnotifications.FieldExamYear, examnotifications.FieldCreatedById, examnotifications.FieldApprovedById, examnotifications.FieldExamCode, examnotifications.FieldUserID:
			values[i] = new(sql.NullInt64)
		case examnotifications.FieldUserName, examnotifications.FieldUpdatedBy, examnotifications.FieldDesignation, examnotifications.FieldOfficerName, examnotifications.FieldNotificationOrderNumber, examnotifications.FieldNotesheetScannedCopy, examnotifications.FieldNotificationNumber, examnotifications.FieldExamShortName, examnotifications.FieldCircleOfficeFacilityId, examnotifications.FieldCircleOfficeName, examnotifications.FieldIssuedBy, examnotifications.FieldCreatedBy, examnotifications.FieldCreatedByName, examnotifications.FieldCreatedByDesignation, examnotifications.FieldApprovedBy, examnotifications.FieldApprovedByName, examnotifications.FieldApprovedByDesignation, examnotifications.FieldNotificationStatus, examnotifications.FieldStatus, examnotifications.FieldExamName, examnotifications.FieldNotificationRemarks, examnotifications.FieldSmsExamShortName:
			values[i] = new(sql.NullString)
		case examnotifications.FieldEmployeeMasterRequestLastDate, examnotifications.FieldEmployeeMasterRequestApprovalLastDate, examnotifications.FieldExamRegisterLastDate, examnotifications.FieldApplicationStartDate, examnotifications.FieldApplicationEndDate, examnotifications.FieldApplicationCorrectionStartDate, examnotifications.FieldApplicationCorrectionLastDate, examnotifications.FieldApplicationVerificationLastDate, examnotifications.FieldCenterAllotmentEndDate, examnotifications.FieldNodalOfficerApprovalDate, examnotifications.FieldAdmitCardDate, examnotifications.FieldUpdatedAt, examnotifications.FieldOrderDate, examnotifications.FieldResubmittedApplicationVerificationDate:
			values[i] = new(sql.NullTime)
		case examnotifications.ForeignKeys[0]: // exam_exam_notifications_ref
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ExamNotifications fields.
func (en *ExamNotifications) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case examnotifications.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			en.ID = int32(value.Int64)
		case examnotifications.FieldUserName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field UserName", values[i])
			} else if value.Valid {
				en.UserName = value.String
			}
		case examnotifications.FieldExamYear:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field ExamYear", values[i])
			} else if value.Valid {
				en.ExamYear = int32(value.Int64)
			}
		case examnotifications.FieldEmployeeMasterRequestLastDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field EmployeeMasterRequestLastDate", values[i])
			} else if value.Valid {
				en.EmployeeMasterRequestLastDate = value.Time
			}
		case examnotifications.FieldEmployeeMasterRequestApprovalLastDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field EmployeeMasterRequestApprovalLastDate", values[i])
			} else if value.Valid {
				en.EmployeeMasterRequestApprovalLastDate = value.Time
			}
		case examnotifications.FieldExamRegisterLastDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field ExamRegisterLastDate", values[i])
			} else if value.Valid {
				en.ExamRegisterLastDate = value.Time
			}
		case examnotifications.FieldApplicationStartDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field ApplicationStartDate", values[i])
			} else if value.Valid {
				en.ApplicationStartDate = value.Time
			}
		case examnotifications.FieldApplicationEndDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field ApplicationEndDate", values[i])
			} else if value.Valid {
				en.ApplicationEndDate = value.Time
			}
		case examnotifications.FieldApplicationCorrectionStartDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field ApplicationCorrectionStartDate", values[i])
			} else if value.Valid {
				en.ApplicationCorrectionStartDate = value.Time
			}
		case examnotifications.FieldApplicationCorrectionLastDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field ApplicationCorrectionLastDate", values[i])
			} else if value.Valid {
				en.ApplicationCorrectionLastDate = value.Time
			}
		case examnotifications.FieldApplicationVerificationLastDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field ApplicationVerificationLastDate", values[i])
			} else if value.Valid {
				en.ApplicationVerificationLastDate = value.Time
			}
		case examnotifications.FieldCenterAllotmentEndDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field CenterAllotmentEndDate", values[i])
			} else if value.Valid {
				en.CenterAllotmentEndDate = value.Time
			}
		case examnotifications.FieldNodalOfficerApprovalDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field NodalOfficerApprovalDate", values[i])
			} else if value.Valid {
				en.NodalOfficerApprovalDate = value.Time
			}
		case examnotifications.FieldAdmitCardDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field AdmitCardDate", values[i])
			} else if value.Valid {
				en.AdmitCardDate = value.Time
			}
		case examnotifications.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field UpdatedAt", values[i])
			} else if value.Valid {
				en.UpdatedAt = value.Time
			}
		case examnotifications.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field UpdatedBy", values[i])
			} else if value.Valid {
				en.UpdatedBy = value.String
			}
		case examnotifications.FieldCrucialDate:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field CrucialDate", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &en.CrucialDate); err != nil {
					return fmt.Errorf("unmarshal field CrucialDate: %w", err)
				}
			}
		case examnotifications.FieldDesignation:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Designation", values[i])
			} else if value.Valid {
				en.Designation = value.String
			}
		case examnotifications.FieldOfficerName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field OfficerName", values[i])
			} else if value.Valid {
				en.OfficerName = value.String
			}
		case examnotifications.FieldNotificationOrderNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field NotificationOrderNumber", values[i])
			} else if value.Valid {
				en.NotificationOrderNumber = value.String
			}
		case examnotifications.FieldNotesheetScannedCopy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field NotesheetScannedCopy", values[i])
			} else if value.Valid {
				en.NotesheetScannedCopy = value.String
			}
		case examnotifications.FieldNotificationNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field NotificationNumber", values[i])
			} else if value.Valid {
				en.NotificationNumber = value.String
			}
		case examnotifications.FieldFlag:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field Flag", values[i])
			} else if value.Valid {
				en.Flag = value.Bool
			}
		case examnotifications.FieldExamShortName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ExamShortName", values[i])
			} else if value.Valid {
				en.ExamShortName = value.String
			}
		case examnotifications.FieldCircleOfficeFacilityId:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field CircleOfficeFacilityId", values[i])
			} else if value.Valid {
				en.CircleOfficeFacilityId = value.String
			}
		case examnotifications.FieldCircleOfficeName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field CircleOfficeName", values[i])
			} else if value.Valid {
				en.CircleOfficeName = value.String
			}
		case examnotifications.FieldIssuedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field IssuedBy", values[i])
			} else if value.Valid {
				en.IssuedBy = value.String
			}
		case examnotifications.FieldOrderDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field OrderDate", values[i])
			} else if value.Valid {
				en.OrderDate = value.Time
			}
		case examnotifications.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field CreatedBy", values[i])
			} else if value.Valid {
				en.CreatedBy = value.String
			}
		case examnotifications.FieldCreatedById:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field CreatedById", values[i])
			} else if value.Valid {
				en.CreatedById = value.Int64
			}
		case examnotifications.FieldCreatedByName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field CreatedByName", values[i])
			} else if value.Valid {
				en.CreatedByName = value.String
			}
		case examnotifications.FieldCreatedByDesignation:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field CreatedByDesignation", values[i])
			} else if value.Valid {
				en.CreatedByDesignation = value.String
			}
		case examnotifications.FieldApprovedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ApprovedBy", values[i])
			} else if value.Valid {
				en.ApprovedBy = value.String
			}
		case examnotifications.FieldApprovedById:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field ApprovedById", values[i])
			} else if value.Valid {
				en.ApprovedById = value.Int64
			}
		case examnotifications.FieldApprovedByName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ApprovedByName", values[i])
			} else if value.Valid {
				en.ApprovedByName = value.String
			}
		case examnotifications.FieldApprovedByDesignation:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ApprovedByDesignation", values[i])
			} else if value.Valid {
				en.ApprovedByDesignation = value.String
			}
		case examnotifications.FieldResubmittedApplicationVerificationDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field ResubmittedApplicationVerificationDate", values[i])
			} else if value.Valid {
				en.ResubmittedApplicationVerificationDate = value.Time
			}
		case examnotifications.FieldPapers:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field Papers", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &en.Papers); err != nil {
					return fmt.Errorf("unmarshal field Papers: %w", err)
				}
			}
		case examnotifications.FieldNotificationStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field NotificationStatus", values[i])
			} else if value.Valid {
				en.NotificationStatus = value.String
			}
		case examnotifications.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Status", values[i])
			} else if value.Valid {
				en.Status = value.String
			}
		case examnotifications.FieldNotificationReIssueStatus:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field NotificationReIssueStatus", values[i])
			} else if value.Valid {
				en.NotificationReIssueStatus = value.Bool
			}
		case examnotifications.FieldEditFlagStatus:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field EditFlagStatus", values[i])
			} else if value.Valid {
				en.EditFlagStatus = value.Bool
			}
		case examnotifications.FieldExamCode:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field ExamCode", values[i])
			} else if value.Valid {
				en.ExamCode = int32(value.Int64)
			}
		case examnotifications.FieldExamName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ExamName", values[i])
			} else if value.Valid {
				en.ExamName = value.String
			}
		case examnotifications.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field UserID", values[i])
			} else if value.Valid {
				en.UserID = value.Int64
			}
		case examnotifications.FieldNotificationRemarks:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field NotificationRemarks", values[i])
			} else if value.Valid {
				en.NotificationRemarks = value.String
			}
		case examnotifications.FieldSmsExamShortName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field SmsExamShortName", values[i])
			} else if value.Valid {
				en.SmsExamShortName = value.String
			}
		case examnotifications.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field exam_exam_notifications_ref", value)
			} else if value.Valid {
				en.exam_exam_notifications_ref = new(int32)
				*en.exam_exam_notifications_ref = int32(value.Int64)
			}
		default:
			en.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ExamNotifications.
// This includes values selected through modifiers, order, etc.
func (en *ExamNotifications) Value(name string) (ent.Value, error) {
	return en.selectValues.Get(name)
}

// QueryUserIDref queries the "UserIDref" edge of the ExamNotifications entity.
func (en *ExamNotifications) QueryUserIDref() *UserMasterQuery {
	return NewExamNotificationsClient(en.config).QueryUserIDref(en)
}

// QueryLogData queries the "LogData" edge of the ExamNotifications entity.
func (en *ExamNotifications) QueryLogData() *LogsQuery {
	return NewExamNotificationsClient(en.config).QueryLogData(en)
}

// Update returns a builder for updating this ExamNotifications.
// Note that you need to call ExamNotifications.Unwrap() before calling this method if this ExamNotifications
// was returned from a transaction, and the transaction was committed or rolled back.
func (en *ExamNotifications) Update() *ExamNotificationsUpdateOne {
	return NewExamNotificationsClient(en.config).UpdateOne(en)
}

// Unwrap unwraps the ExamNotifications entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (en *ExamNotifications) Unwrap() *ExamNotifications {
	_tx, ok := en.config.driver.(*txDriver)
	if !ok {
		panic("ent: ExamNotifications is not a transactional entity")
	}
	en.config.driver = _tx.drv
	return en
}

// String implements the fmt.Stringer.
func (en *ExamNotifications) String() string {
	var builder strings.Builder
	builder.WriteString("ExamNotifications(")
	builder.WriteString(fmt.Sprintf("id=%v, ", en.ID))
	builder.WriteString("UserName=")
	builder.WriteString(en.UserName)
	builder.WriteString(", ")
	builder.WriteString("ExamYear=")
	builder.WriteString(fmt.Sprintf("%v", en.ExamYear))
	builder.WriteString(", ")
	builder.WriteString("EmployeeMasterRequestLastDate=")
	builder.WriteString(en.EmployeeMasterRequestLastDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("EmployeeMasterRequestApprovalLastDate=")
	builder.WriteString(en.EmployeeMasterRequestApprovalLastDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("ExamRegisterLastDate=")
	builder.WriteString(en.ExamRegisterLastDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("ApplicationStartDate=")
	builder.WriteString(en.ApplicationStartDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("ApplicationEndDate=")
	builder.WriteString(en.ApplicationEndDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("ApplicationCorrectionStartDate=")
	builder.WriteString(en.ApplicationCorrectionStartDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("ApplicationCorrectionLastDate=")
	builder.WriteString(en.ApplicationCorrectionLastDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("ApplicationVerificationLastDate=")
	builder.WriteString(en.ApplicationVerificationLastDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("CenterAllotmentEndDate=")
	builder.WriteString(en.CenterAllotmentEndDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("NodalOfficerApprovalDate=")
	builder.WriteString(en.NodalOfficerApprovalDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("AdmitCardDate=")
	builder.WriteString(en.AdmitCardDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("UpdatedAt=")
	builder.WriteString(en.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("UpdatedBy=")
	builder.WriteString(en.UpdatedBy)
	builder.WriteString(", ")
	builder.WriteString("CrucialDate=")
	builder.WriteString(fmt.Sprintf("%v", en.CrucialDate))
	builder.WriteString(", ")
	builder.WriteString("Designation=")
	builder.WriteString(en.Designation)
	builder.WriteString(", ")
	builder.WriteString("OfficerName=")
	builder.WriteString(en.OfficerName)
	builder.WriteString(", ")
	builder.WriteString("NotificationOrderNumber=")
	builder.WriteString(en.NotificationOrderNumber)
	builder.WriteString(", ")
	builder.WriteString("NotesheetScannedCopy=")
	builder.WriteString(en.NotesheetScannedCopy)
	builder.WriteString(", ")
	builder.WriteString("NotificationNumber=")
	builder.WriteString(en.NotificationNumber)
	builder.WriteString(", ")
	builder.WriteString("Flag=")
	builder.WriteString(fmt.Sprintf("%v", en.Flag))
	builder.WriteString(", ")
	builder.WriteString("ExamShortName=")
	builder.WriteString(en.ExamShortName)
	builder.WriteString(", ")
	builder.WriteString("CircleOfficeFacilityId=")
	builder.WriteString(en.CircleOfficeFacilityId)
	builder.WriteString(", ")
	builder.WriteString("CircleOfficeName=")
	builder.WriteString(en.CircleOfficeName)
	builder.WriteString(", ")
	builder.WriteString("IssuedBy=")
	builder.WriteString(en.IssuedBy)
	builder.WriteString(", ")
	builder.WriteString("OrderDate=")
	builder.WriteString(en.OrderDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("CreatedBy=")
	builder.WriteString(en.CreatedBy)
	builder.WriteString(", ")
	builder.WriteString("CreatedById=")
	builder.WriteString(fmt.Sprintf("%v", en.CreatedById))
	builder.WriteString(", ")
	builder.WriteString("CreatedByName=")
	builder.WriteString(en.CreatedByName)
	builder.WriteString(", ")
	builder.WriteString("CreatedByDesignation=")
	builder.WriteString(en.CreatedByDesignation)
	builder.WriteString(", ")
	builder.WriteString("ApprovedBy=")
	builder.WriteString(en.ApprovedBy)
	builder.WriteString(", ")
	builder.WriteString("ApprovedById=")
	builder.WriteString(fmt.Sprintf("%v", en.ApprovedById))
	builder.WriteString(", ")
	builder.WriteString("ApprovedByName=")
	builder.WriteString(en.ApprovedByName)
	builder.WriteString(", ")
	builder.WriteString("ApprovedByDesignation=")
	builder.WriteString(en.ApprovedByDesignation)
	builder.WriteString(", ")
	builder.WriteString("ResubmittedApplicationVerificationDate=")
	builder.WriteString(en.ResubmittedApplicationVerificationDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("Papers=")
	builder.WriteString(fmt.Sprintf("%v", en.Papers))
	builder.WriteString(", ")
	builder.WriteString("NotificationStatus=")
	builder.WriteString(en.NotificationStatus)
	builder.WriteString(", ")
	builder.WriteString("Status=")
	builder.WriteString(en.Status)
	builder.WriteString(", ")
	builder.WriteString("NotificationReIssueStatus=")
	builder.WriteString(fmt.Sprintf("%v", en.NotificationReIssueStatus))
	builder.WriteString(", ")
	builder.WriteString("EditFlagStatus=")
	builder.WriteString(fmt.Sprintf("%v", en.EditFlagStatus))
	builder.WriteString(", ")
	builder.WriteString("ExamCode=")
	builder.WriteString(fmt.Sprintf("%v", en.ExamCode))
	builder.WriteString(", ")
	builder.WriteString("ExamName=")
	builder.WriteString(en.ExamName)
	builder.WriteString(", ")
	builder.WriteString("UserID=")
	builder.WriteString(fmt.Sprintf("%v", en.UserID))
	builder.WriteString(", ")
	builder.WriteString("NotificationRemarks=")
	builder.WriteString(en.NotificationRemarks)
	builder.WriteString(", ")
	builder.WriteString("SmsExamShortName=")
	builder.WriteString(en.SmsExamShortName)
	builder.WriteByte(')')
	return builder.String()
}

// ExamNotificationsSlice is a parsable slice of ExamNotifications.
type ExamNotificationsSlice []*ExamNotifications
