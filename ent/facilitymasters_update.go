// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"recruit/ent/facilitymasters"
	"recruit/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// FacilityMastersUpdate is the builder for updating FacilityMasters entities.
type FacilityMastersUpdate struct {
	config
	hooks    []Hook
	mutation *FacilityMastersMutation
}

// Where appends a list predicates to the FacilityMastersUpdate builder.
func (fmu *FacilityMastersUpdate) Where(ps ...predicate.FacilityMasters) *FacilityMastersUpdate {
	fmu.mutation.Where(ps...)
	return fmu
}

// SetFacilityID sets the "FacilityID" field.
func (fmu *FacilityMastersUpdate) SetFacilityID(s string) *FacilityMastersUpdate {
	fmu.mutation.SetFacilityID(s)
	return fmu
}

// SetNillableFacilityID sets the "FacilityID" field if the given value is not nil.
func (fmu *FacilityMastersUpdate) SetNillableFacilityID(s *string) *FacilityMastersUpdate {
	if s != nil {
		fmu.SetFacilityID(*s)
	}
	return fmu
}

// ClearFacilityID clears the value of the "FacilityID" field.
func (fmu *FacilityMastersUpdate) ClearFacilityID() *FacilityMastersUpdate {
	fmu.mutation.ClearFacilityID()
	return fmu
}

// SetUUID sets the "UUID" field.
func (fmu *FacilityMastersUpdate) SetUUID(i int64) *FacilityMastersUpdate {
	fmu.mutation.ResetUUID()
	fmu.mutation.SetUUID(i)
	return fmu
}

// SetNillableUUID sets the "UUID" field if the given value is not nil.
func (fmu *FacilityMastersUpdate) SetNillableUUID(i *int64) *FacilityMastersUpdate {
	if i != nil {
		fmu.SetUUID(*i)
	}
	return fmu
}

// AddUUID adds i to the "UUID" field.
func (fmu *FacilityMastersUpdate) AddUUID(i int64) *FacilityMastersUpdate {
	fmu.mutation.AddUUID(i)
	return fmu
}

// ClearUUID clears the value of the "UUID" field.
func (fmu *FacilityMastersUpdate) ClearUUID() *FacilityMastersUpdate {
	fmu.mutation.ClearUUID()
	return fmu
}

// SetFacilityType sets the "FacilityType" field.
func (fmu *FacilityMastersUpdate) SetFacilityType(s string) *FacilityMastersUpdate {
	fmu.mutation.SetFacilityType(s)
	return fmu
}

// SetNillableFacilityType sets the "FacilityType" field if the given value is not nil.
func (fmu *FacilityMastersUpdate) SetNillableFacilityType(s *string) *FacilityMastersUpdate {
	if s != nil {
		fmu.SetFacilityType(*s)
	}
	return fmu
}

// ClearFacilityType clears the value of the "FacilityType" field.
func (fmu *FacilityMastersUpdate) ClearFacilityType() *FacilityMastersUpdate {
	fmu.mutation.ClearFacilityType()
	return fmu
}

// SetFacilityIDDescription sets the "FacilityIDDescription" field.
func (fmu *FacilityMastersUpdate) SetFacilityIDDescription(s string) *FacilityMastersUpdate {
	fmu.mutation.SetFacilityIDDescription(s)
	return fmu
}

// SetNillableFacilityIDDescription sets the "FacilityIDDescription" field if the given value is not nil.
func (fmu *FacilityMastersUpdate) SetNillableFacilityIDDescription(s *string) *FacilityMastersUpdate {
	if s != nil {
		fmu.SetFacilityIDDescription(*s)
	}
	return fmu
}

// ClearFacilityIDDescription clears the value of the "FacilityIDDescription" field.
func (fmu *FacilityMastersUpdate) ClearFacilityIDDescription() *FacilityMastersUpdate {
	fmu.mutation.ClearFacilityIDDescription()
	return fmu
}

// SetReportingOfficeFacilityID sets the "ReportingOfficeFacilityID" field.
func (fmu *FacilityMastersUpdate) SetReportingOfficeFacilityID(s string) *FacilityMastersUpdate {
	fmu.mutation.SetReportingOfficeFacilityID(s)
	return fmu
}

// SetNillableReportingOfficeFacilityID sets the "ReportingOfficeFacilityID" field if the given value is not nil.
func (fmu *FacilityMastersUpdate) SetNillableReportingOfficeFacilityID(s *string) *FacilityMastersUpdate {
	if s != nil {
		fmu.SetReportingOfficeFacilityID(*s)
	}
	return fmu
}

// ClearReportingOfficeFacilityID clears the value of the "ReportingOfficeFacilityID" field.
func (fmu *FacilityMastersUpdate) ClearReportingOfficeFacilityID() *FacilityMastersUpdate {
	fmu.mutation.ClearReportingOfficeFacilityID()
	return fmu
}

// SetReportingOfficeFacilityName sets the "ReportingOfficeFacilityName" field.
func (fmu *FacilityMastersUpdate) SetReportingOfficeFacilityName(s string) *FacilityMastersUpdate {
	fmu.mutation.SetReportingOfficeFacilityName(s)
	return fmu
}

// SetNillableReportingOfficeFacilityName sets the "ReportingOfficeFacilityName" field if the given value is not nil.
func (fmu *FacilityMastersUpdate) SetNillableReportingOfficeFacilityName(s *string) *FacilityMastersUpdate {
	if s != nil {
		fmu.SetReportingOfficeFacilityName(*s)
	}
	return fmu
}

// ClearReportingOfficeFacilityName clears the value of the "ReportingOfficeFacilityName" field.
func (fmu *FacilityMastersUpdate) ClearReportingOfficeFacilityName() *FacilityMastersUpdate {
	fmu.mutation.ClearReportingOfficeFacilityName()
	return fmu
}

// SetHOFacilityID sets the "HOFacilityID" field.
func (fmu *FacilityMastersUpdate) SetHOFacilityID(s string) *FacilityMastersUpdate {
	fmu.mutation.SetHOFacilityID(s)
	return fmu
}

// SetNillableHOFacilityID sets the "HOFacilityID" field if the given value is not nil.
func (fmu *FacilityMastersUpdate) SetNillableHOFacilityID(s *string) *FacilityMastersUpdate {
	if s != nil {
		fmu.SetHOFacilityID(*s)
	}
	return fmu
}

// ClearHOFacilityID clears the value of the "HOFacilityID" field.
func (fmu *FacilityMastersUpdate) ClearHOFacilityID() *FacilityMastersUpdate {
	fmu.mutation.ClearHOFacilityID()
	return fmu
}

// SetHOFacilityName sets the "HOFacilityName" field.
func (fmu *FacilityMastersUpdate) SetHOFacilityName(s string) *FacilityMastersUpdate {
	fmu.mutation.SetHOFacilityName(s)
	return fmu
}

// SetNillableHOFacilityName sets the "HOFacilityName" field if the given value is not nil.
func (fmu *FacilityMastersUpdate) SetNillableHOFacilityName(s *string) *FacilityMastersUpdate {
	if s != nil {
		fmu.SetHOFacilityName(*s)
	}
	return fmu
}

// ClearHOFacilityName clears the value of the "HOFacilityName" field.
func (fmu *FacilityMastersUpdate) ClearHOFacilityName() *FacilityMastersUpdate {
	fmu.mutation.ClearHOFacilityName()
	return fmu
}

// SetSubDivisionFacilityID sets the "SubDivisionFacilityID" field.
func (fmu *FacilityMastersUpdate) SetSubDivisionFacilityID(s string) *FacilityMastersUpdate {
	fmu.mutation.SetSubDivisionFacilityID(s)
	return fmu
}

// SetNillableSubDivisionFacilityID sets the "SubDivisionFacilityID" field if the given value is not nil.
func (fmu *FacilityMastersUpdate) SetNillableSubDivisionFacilityID(s *string) *FacilityMastersUpdate {
	if s != nil {
		fmu.SetSubDivisionFacilityID(*s)
	}
	return fmu
}

// ClearSubDivisionFacilityID clears the value of the "SubDivisionFacilityID" field.
func (fmu *FacilityMastersUpdate) ClearSubDivisionFacilityID() *FacilityMastersUpdate {
	fmu.mutation.ClearSubDivisionFacilityID()
	return fmu
}

// SetSubDivisionFacilityName sets the "SubDivisionFacilityName" field.
func (fmu *FacilityMastersUpdate) SetSubDivisionFacilityName(s string) *FacilityMastersUpdate {
	fmu.mutation.SetSubDivisionFacilityName(s)
	return fmu
}

// SetNillableSubDivisionFacilityName sets the "SubDivisionFacilityName" field if the given value is not nil.
func (fmu *FacilityMastersUpdate) SetNillableSubDivisionFacilityName(s *string) *FacilityMastersUpdate {
	if s != nil {
		fmu.SetSubDivisionFacilityName(*s)
	}
	return fmu
}

// ClearSubDivisionFacilityName clears the value of the "SubDivisionFacilityName" field.
func (fmu *FacilityMastersUpdate) ClearSubDivisionFacilityName() *FacilityMastersUpdate {
	fmu.mutation.ClearSubDivisionFacilityName()
	return fmu
}

// SetDivisionFacilityID sets the "DivisionFacilityID" field.
func (fmu *FacilityMastersUpdate) SetDivisionFacilityID(s string) *FacilityMastersUpdate {
	fmu.mutation.SetDivisionFacilityID(s)
	return fmu
}

// SetNillableDivisionFacilityID sets the "DivisionFacilityID" field if the given value is not nil.
func (fmu *FacilityMastersUpdate) SetNillableDivisionFacilityID(s *string) *FacilityMastersUpdate {
	if s != nil {
		fmu.SetDivisionFacilityID(*s)
	}
	return fmu
}

// ClearDivisionFacilityID clears the value of the "DivisionFacilityID" field.
func (fmu *FacilityMastersUpdate) ClearDivisionFacilityID() *FacilityMastersUpdate {
	fmu.mutation.ClearDivisionFacilityID()
	return fmu
}

// SetDivisionFacilityName sets the "DivisionFacilityName" field.
func (fmu *FacilityMastersUpdate) SetDivisionFacilityName(s string) *FacilityMastersUpdate {
	fmu.mutation.SetDivisionFacilityName(s)
	return fmu
}

// SetNillableDivisionFacilityName sets the "DivisionFacilityName" field if the given value is not nil.
func (fmu *FacilityMastersUpdate) SetNillableDivisionFacilityName(s *string) *FacilityMastersUpdate {
	if s != nil {
		fmu.SetDivisionFacilityName(*s)
	}
	return fmu
}

// ClearDivisionFacilityName clears the value of the "DivisionFacilityName" field.
func (fmu *FacilityMastersUpdate) ClearDivisionFacilityName() *FacilityMastersUpdate {
	fmu.mutation.ClearDivisionFacilityName()
	return fmu
}

// SetRegionFacilityID sets the "RegionFacilityID" field.
func (fmu *FacilityMastersUpdate) SetRegionFacilityID(s string) *FacilityMastersUpdate {
	fmu.mutation.SetRegionFacilityID(s)
	return fmu
}

// SetNillableRegionFacilityID sets the "RegionFacilityID" field if the given value is not nil.
func (fmu *FacilityMastersUpdate) SetNillableRegionFacilityID(s *string) *FacilityMastersUpdate {
	if s != nil {
		fmu.SetRegionFacilityID(*s)
	}
	return fmu
}

// ClearRegionFacilityID clears the value of the "RegionFacilityID" field.
func (fmu *FacilityMastersUpdate) ClearRegionFacilityID() *FacilityMastersUpdate {
	fmu.mutation.ClearRegionFacilityID()
	return fmu
}

// SetRegionFacilityName sets the "RegionFacilityName" field.
func (fmu *FacilityMastersUpdate) SetRegionFacilityName(s string) *FacilityMastersUpdate {
	fmu.mutation.SetRegionFacilityName(s)
	return fmu
}

// SetNillableRegionFacilityName sets the "RegionFacilityName" field if the given value is not nil.
func (fmu *FacilityMastersUpdate) SetNillableRegionFacilityName(s *string) *FacilityMastersUpdate {
	if s != nil {
		fmu.SetRegionFacilityName(*s)
	}
	return fmu
}

// ClearRegionFacilityName clears the value of the "RegionFacilityName" field.
func (fmu *FacilityMastersUpdate) ClearRegionFacilityName() *FacilityMastersUpdate {
	fmu.mutation.ClearRegionFacilityName()
	return fmu
}

// SetCircleFacilityID sets the "CircleFacilityID" field.
func (fmu *FacilityMastersUpdate) SetCircleFacilityID(s string) *FacilityMastersUpdate {
	fmu.mutation.SetCircleFacilityID(s)
	return fmu
}

// SetNillableCircleFacilityID sets the "CircleFacilityID" field if the given value is not nil.
func (fmu *FacilityMastersUpdate) SetNillableCircleFacilityID(s *string) *FacilityMastersUpdate {
	if s != nil {
		fmu.SetCircleFacilityID(*s)
	}
	return fmu
}

// ClearCircleFacilityID clears the value of the "CircleFacilityID" field.
func (fmu *FacilityMastersUpdate) ClearCircleFacilityID() *FacilityMastersUpdate {
	fmu.mutation.ClearCircleFacilityID()
	return fmu
}

// SetCircleFacilityName sets the "CircleFacilityName" field.
func (fmu *FacilityMastersUpdate) SetCircleFacilityName(s string) *FacilityMastersUpdate {
	fmu.mutation.SetCircleFacilityName(s)
	return fmu
}

// SetNillableCircleFacilityName sets the "CircleFacilityName" field if the given value is not nil.
func (fmu *FacilityMastersUpdate) SetNillableCircleFacilityName(s *string) *FacilityMastersUpdate {
	if s != nil {
		fmu.SetCircleFacilityName(*s)
	}
	return fmu
}

// ClearCircleFacilityName clears the value of the "CircleFacilityName" field.
func (fmu *FacilityMastersUpdate) ClearCircleFacilityName() *FacilityMastersUpdate {
	fmu.mutation.ClearCircleFacilityName()
	return fmu
}

// SetPincode sets the "Pincode" field.
func (fmu *FacilityMastersUpdate) SetPincode(s string) *FacilityMastersUpdate {
	fmu.mutation.SetPincode(s)
	return fmu
}

// SetNillablePincode sets the "Pincode" field if the given value is not nil.
func (fmu *FacilityMastersUpdate) SetNillablePincode(s *string) *FacilityMastersUpdate {
	if s != nil {
		fmu.SetPincode(*s)
	}
	return fmu
}

// ClearPincode clears the value of the "Pincode" field.
func (fmu *FacilityMastersUpdate) ClearPincode() *FacilityMastersUpdate {
	fmu.mutation.ClearPincode()
	return fmu
}

// SetControllingAuthorityFacilityID sets the "ControllingAuthorityFacilityID" field.
func (fmu *FacilityMastersUpdate) SetControllingAuthorityFacilityID(s string) *FacilityMastersUpdate {
	fmu.mutation.SetControllingAuthorityFacilityID(s)
	return fmu
}

// SetNillableControllingAuthorityFacilityID sets the "ControllingAuthorityFacilityID" field if the given value is not nil.
func (fmu *FacilityMastersUpdate) SetNillableControllingAuthorityFacilityID(s *string) *FacilityMastersUpdate {
	if s != nil {
		fmu.SetControllingAuthorityFacilityID(*s)
	}
	return fmu
}

// ClearControllingAuthorityFacilityID clears the value of the "ControllingAuthorityFacilityID" field.
func (fmu *FacilityMastersUpdate) ClearControllingAuthorityFacilityID() *FacilityMastersUpdate {
	fmu.mutation.ClearControllingAuthorityFacilityID()
	return fmu
}

// SetControllingAuthorityFacilityName sets the "ControllingAuthorityFacilityName" field.
func (fmu *FacilityMastersUpdate) SetControllingAuthorityFacilityName(s string) *FacilityMastersUpdate {
	fmu.mutation.SetControllingAuthorityFacilityName(s)
	return fmu
}

// SetNillableControllingAuthorityFacilityName sets the "ControllingAuthorityFacilityName" field if the given value is not nil.
func (fmu *FacilityMastersUpdate) SetNillableControllingAuthorityFacilityName(s *string) *FacilityMastersUpdate {
	if s != nil {
		fmu.SetControllingAuthorityFacilityName(*s)
	}
	return fmu
}

// ClearControllingAuthorityFacilityName clears the value of the "ControllingAuthorityFacilityName" field.
func (fmu *FacilityMastersUpdate) ClearControllingAuthorityFacilityName() *FacilityMastersUpdate {
	fmu.mutation.ClearControllingAuthorityFacilityName()
	return fmu
}

// SetNodalOfficerFacilityID sets the "NodalOfficerFacilityID" field.
func (fmu *FacilityMastersUpdate) SetNodalOfficerFacilityID(s string) *FacilityMastersUpdate {
	fmu.mutation.SetNodalOfficerFacilityID(s)
	return fmu
}

// SetNillableNodalOfficerFacilityID sets the "NodalOfficerFacilityID" field if the given value is not nil.
func (fmu *FacilityMastersUpdate) SetNillableNodalOfficerFacilityID(s *string) *FacilityMastersUpdate {
	if s != nil {
		fmu.SetNodalOfficerFacilityID(*s)
	}
	return fmu
}

// ClearNodalOfficerFacilityID clears the value of the "NodalOfficerFacilityID" field.
func (fmu *FacilityMastersUpdate) ClearNodalOfficerFacilityID() *FacilityMastersUpdate {
	fmu.mutation.ClearNodalOfficerFacilityID()
	return fmu
}

// SetNodalOfficerFacilityName sets the "NodalOfficerFacilityName" field.
func (fmu *FacilityMastersUpdate) SetNodalOfficerFacilityName(s string) *FacilityMastersUpdate {
	fmu.mutation.SetNodalOfficerFacilityName(s)
	return fmu
}

// SetNillableNodalOfficerFacilityName sets the "NodalOfficerFacilityName" field if the given value is not nil.
func (fmu *FacilityMastersUpdate) SetNillableNodalOfficerFacilityName(s *string) *FacilityMastersUpdate {
	if s != nil {
		fmu.SetNodalOfficerFacilityName(*s)
	}
	return fmu
}

// ClearNodalOfficerFacilityName clears the value of the "NodalOfficerFacilityName" field.
func (fmu *FacilityMastersUpdate) ClearNodalOfficerFacilityName() *FacilityMastersUpdate {
	fmu.mutation.ClearNodalOfficerFacilityName()
	return fmu
}

// SetCityName sets the "CityName" field.
func (fmu *FacilityMastersUpdate) SetCityName(s string) *FacilityMastersUpdate {
	fmu.mutation.SetCityName(s)
	return fmu
}

// SetNillableCityName sets the "CityName" field if the given value is not nil.
func (fmu *FacilityMastersUpdate) SetNillableCityName(s *string) *FacilityMastersUpdate {
	if s != nil {
		fmu.SetCityName(*s)
	}
	return fmu
}

// ClearCityName clears the value of the "CityName" field.
func (fmu *FacilityMastersUpdate) ClearCityName() *FacilityMastersUpdate {
	fmu.mutation.ClearCityName()
	return fmu
}

// SetHallCircleCode sets the "HallCircleCode" field.
func (fmu *FacilityMastersUpdate) SetHallCircleCode(s string) *FacilityMastersUpdate {
	fmu.mutation.SetHallCircleCode(s)
	return fmu
}

// SetNillableHallCircleCode sets the "HallCircleCode" field if the given value is not nil.
func (fmu *FacilityMastersUpdate) SetNillableHallCircleCode(s *string) *FacilityMastersUpdate {
	if s != nil {
		fmu.SetHallCircleCode(*s)
	}
	return fmu
}

// ClearHallCircleCode clears the value of the "HallCircleCode" field.
func (fmu *FacilityMastersUpdate) ClearHallCircleCode() *FacilityMastersUpdate {
	fmu.mutation.ClearHallCircleCode()
	return fmu
}

// SetDeliveryNonDeliveryOffice sets the "DeliveryNonDeliveryOffice" field.
func (fmu *FacilityMastersUpdate) SetDeliveryNonDeliveryOffice(s string) *FacilityMastersUpdate {
	fmu.mutation.SetDeliveryNonDeliveryOffice(s)
	return fmu
}

// SetNillableDeliveryNonDeliveryOffice sets the "DeliveryNonDeliveryOffice" field if the given value is not nil.
func (fmu *FacilityMastersUpdate) SetNillableDeliveryNonDeliveryOffice(s *string) *FacilityMastersUpdate {
	if s != nil {
		fmu.SetDeliveryNonDeliveryOffice(*s)
	}
	return fmu
}

// ClearDeliveryNonDeliveryOffice clears the value of the "DeliveryNonDeliveryOffice" field.
func (fmu *FacilityMastersUpdate) ClearDeliveryNonDeliveryOffice() *FacilityMastersUpdate {
	fmu.mutation.ClearDeliveryNonDeliveryOffice()
	return fmu
}

// SetCreatedID sets the "CreatedID" field.
func (fmu *FacilityMastersUpdate) SetCreatedID(s string) *FacilityMastersUpdate {
	fmu.mutation.SetCreatedID(s)
	return fmu
}

// SetNillableCreatedID sets the "CreatedID" field if the given value is not nil.
func (fmu *FacilityMastersUpdate) SetNillableCreatedID(s *string) *FacilityMastersUpdate {
	if s != nil {
		fmu.SetCreatedID(*s)
	}
	return fmu
}

// ClearCreatedID clears the value of the "CreatedID" field.
func (fmu *FacilityMastersUpdate) ClearCreatedID() *FacilityMastersUpdate {
	fmu.mutation.ClearCreatedID()
	return fmu
}

// SetCreatedBy sets the "CreatedBy" field.
func (fmu *FacilityMastersUpdate) SetCreatedBy(s string) *FacilityMastersUpdate {
	fmu.mutation.SetCreatedBy(s)
	return fmu
}

// SetNillableCreatedBy sets the "CreatedBy" field if the given value is not nil.
func (fmu *FacilityMastersUpdate) SetNillableCreatedBy(s *string) *FacilityMastersUpdate {
	if s != nil {
		fmu.SetCreatedBy(*s)
	}
	return fmu
}

// ClearCreatedBy clears the value of the "CreatedBy" field.
func (fmu *FacilityMastersUpdate) ClearCreatedBy() *FacilityMastersUpdate {
	fmu.mutation.ClearCreatedBy()
	return fmu
}

// SetCreatedByName sets the "CreatedByName" field.
func (fmu *FacilityMastersUpdate) SetCreatedByName(s string) *FacilityMastersUpdate {
	fmu.mutation.SetCreatedByName(s)
	return fmu
}

// SetNillableCreatedByName sets the "CreatedByName" field if the given value is not nil.
func (fmu *FacilityMastersUpdate) SetNillableCreatedByName(s *string) *FacilityMastersUpdate {
	if s != nil {
		fmu.SetCreatedByName(*s)
	}
	return fmu
}

// ClearCreatedByName clears the value of the "CreatedByName" field.
func (fmu *FacilityMastersUpdate) ClearCreatedByName() *FacilityMastersUpdate {
	fmu.mutation.ClearCreatedByName()
	return fmu
}

// SetCreatedByEmpID sets the "CreatedByEmpID" field.
func (fmu *FacilityMastersUpdate) SetCreatedByEmpID(s string) *FacilityMastersUpdate {
	fmu.mutation.SetCreatedByEmpID(s)
	return fmu
}

// SetNillableCreatedByEmpID sets the "CreatedByEmpID" field if the given value is not nil.
func (fmu *FacilityMastersUpdate) SetNillableCreatedByEmpID(s *string) *FacilityMastersUpdate {
	if s != nil {
		fmu.SetCreatedByEmpID(*s)
	}
	return fmu
}

// ClearCreatedByEmpID clears the value of the "CreatedByEmpID" field.
func (fmu *FacilityMastersUpdate) ClearCreatedByEmpID() *FacilityMastersUpdate {
	fmu.mutation.ClearCreatedByEmpID()
	return fmu
}

// SetCircleCode sets the "CircleCode" field.
func (fmu *FacilityMastersUpdate) SetCircleCode(s string) *FacilityMastersUpdate {
	fmu.mutation.SetCircleCode(s)
	return fmu
}

// SetNillableCircleCode sets the "CircleCode" field if the given value is not nil.
func (fmu *FacilityMastersUpdate) SetNillableCircleCode(s *string) *FacilityMastersUpdate {
	if s != nil {
		fmu.SetCircleCode(*s)
	}
	return fmu
}

// ClearCircleCode clears the value of the "CircleCode" field.
func (fmu *FacilityMastersUpdate) ClearCircleCode() *FacilityMastersUpdate {
	fmu.mutation.ClearCircleCode()
	return fmu
}

// SetStatus sets the "Status" field.
func (fmu *FacilityMastersUpdate) SetStatus(s string) *FacilityMastersUpdate {
	fmu.mutation.SetStatus(s)
	return fmu
}

// SetNillableStatus sets the "Status" field if the given value is not nil.
func (fmu *FacilityMastersUpdate) SetNillableStatus(s *string) *FacilityMastersUpdate {
	if s != nil {
		fmu.SetStatus(*s)
	}
	return fmu
}

// SetEventTime sets the "EventTime" field.
func (fmu *FacilityMastersUpdate) SetEventTime(t time.Time) *FacilityMastersUpdate {
	fmu.mutation.SetEventTime(t)
	return fmu
}

// SetNillableEventTime sets the "EventTime" field if the given value is not nil.
func (fmu *FacilityMastersUpdate) SetNillableEventTime(t *time.Time) *FacilityMastersUpdate {
	if t != nil {
		fmu.SetEventTime(*t)
	}
	return fmu
}

// ClearEventTime clears the value of the "EventTime" field.
func (fmu *FacilityMastersUpdate) ClearEventTime() *FacilityMastersUpdate {
	fmu.mutation.ClearEventTime()
	return fmu
}

// Mutation returns the FacilityMastersMutation object of the builder.
func (fmu *FacilityMastersUpdate) Mutation() *FacilityMastersMutation {
	return fmu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (fmu *FacilityMastersUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, fmu.sqlSave, fmu.mutation, fmu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fmu *FacilityMastersUpdate) SaveX(ctx context.Context) int {
	affected, err := fmu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (fmu *FacilityMastersUpdate) Exec(ctx context.Context) error {
	_, err := fmu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fmu *FacilityMastersUpdate) ExecX(ctx context.Context) {
	if err := fmu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (fmu *FacilityMastersUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(facilitymasters.Table, facilitymasters.Columns, sqlgraph.NewFieldSpec(facilitymasters.FieldID, field.TypeInt32))
	if ps := fmu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fmu.mutation.FacilityID(); ok {
		_spec.SetField(facilitymasters.FieldFacilityID, field.TypeString, value)
	}
	if fmu.mutation.FacilityIDCleared() {
		_spec.ClearField(facilitymasters.FieldFacilityID, field.TypeString)
	}
	if value, ok := fmu.mutation.UUID(); ok {
		_spec.SetField(facilitymasters.FieldUUID, field.TypeInt64, value)
	}
	if value, ok := fmu.mutation.AddedUUID(); ok {
		_spec.AddField(facilitymasters.FieldUUID, field.TypeInt64, value)
	}
	if fmu.mutation.UUIDCleared() {
		_spec.ClearField(facilitymasters.FieldUUID, field.TypeInt64)
	}
	if value, ok := fmu.mutation.FacilityType(); ok {
		_spec.SetField(facilitymasters.FieldFacilityType, field.TypeString, value)
	}
	if fmu.mutation.FacilityTypeCleared() {
		_spec.ClearField(facilitymasters.FieldFacilityType, field.TypeString)
	}
	if value, ok := fmu.mutation.FacilityIDDescription(); ok {
		_spec.SetField(facilitymasters.FieldFacilityIDDescription, field.TypeString, value)
	}
	if fmu.mutation.FacilityIDDescriptionCleared() {
		_spec.ClearField(facilitymasters.FieldFacilityIDDescription, field.TypeString)
	}
	if value, ok := fmu.mutation.ReportingOfficeFacilityID(); ok {
		_spec.SetField(facilitymasters.FieldReportingOfficeFacilityID, field.TypeString, value)
	}
	if fmu.mutation.ReportingOfficeFacilityIDCleared() {
		_spec.ClearField(facilitymasters.FieldReportingOfficeFacilityID, field.TypeString)
	}
	if value, ok := fmu.mutation.ReportingOfficeFacilityName(); ok {
		_spec.SetField(facilitymasters.FieldReportingOfficeFacilityName, field.TypeString, value)
	}
	if fmu.mutation.ReportingOfficeFacilityNameCleared() {
		_spec.ClearField(facilitymasters.FieldReportingOfficeFacilityName, field.TypeString)
	}
	if value, ok := fmu.mutation.HOFacilityID(); ok {
		_spec.SetField(facilitymasters.FieldHOFacilityID, field.TypeString, value)
	}
	if fmu.mutation.HOFacilityIDCleared() {
		_spec.ClearField(facilitymasters.FieldHOFacilityID, field.TypeString)
	}
	if value, ok := fmu.mutation.HOFacilityName(); ok {
		_spec.SetField(facilitymasters.FieldHOFacilityName, field.TypeString, value)
	}
	if fmu.mutation.HOFacilityNameCleared() {
		_spec.ClearField(facilitymasters.FieldHOFacilityName, field.TypeString)
	}
	if value, ok := fmu.mutation.SubDivisionFacilityID(); ok {
		_spec.SetField(facilitymasters.FieldSubDivisionFacilityID, field.TypeString, value)
	}
	if fmu.mutation.SubDivisionFacilityIDCleared() {
		_spec.ClearField(facilitymasters.FieldSubDivisionFacilityID, field.TypeString)
	}
	if value, ok := fmu.mutation.SubDivisionFacilityName(); ok {
		_spec.SetField(facilitymasters.FieldSubDivisionFacilityName, field.TypeString, value)
	}
	if fmu.mutation.SubDivisionFacilityNameCleared() {
		_spec.ClearField(facilitymasters.FieldSubDivisionFacilityName, field.TypeString)
	}
	if value, ok := fmu.mutation.DivisionFacilityID(); ok {
		_spec.SetField(facilitymasters.FieldDivisionFacilityID, field.TypeString, value)
	}
	if fmu.mutation.DivisionFacilityIDCleared() {
		_spec.ClearField(facilitymasters.FieldDivisionFacilityID, field.TypeString)
	}
	if value, ok := fmu.mutation.DivisionFacilityName(); ok {
		_spec.SetField(facilitymasters.FieldDivisionFacilityName, field.TypeString, value)
	}
	if fmu.mutation.DivisionFacilityNameCleared() {
		_spec.ClearField(facilitymasters.FieldDivisionFacilityName, field.TypeString)
	}
	if value, ok := fmu.mutation.RegionFacilityID(); ok {
		_spec.SetField(facilitymasters.FieldRegionFacilityID, field.TypeString, value)
	}
	if fmu.mutation.RegionFacilityIDCleared() {
		_spec.ClearField(facilitymasters.FieldRegionFacilityID, field.TypeString)
	}
	if value, ok := fmu.mutation.RegionFacilityName(); ok {
		_spec.SetField(facilitymasters.FieldRegionFacilityName, field.TypeString, value)
	}
	if fmu.mutation.RegionFacilityNameCleared() {
		_spec.ClearField(facilitymasters.FieldRegionFacilityName, field.TypeString)
	}
	if value, ok := fmu.mutation.CircleFacilityID(); ok {
		_spec.SetField(facilitymasters.FieldCircleFacilityID, field.TypeString, value)
	}
	if fmu.mutation.CircleFacilityIDCleared() {
		_spec.ClearField(facilitymasters.FieldCircleFacilityID, field.TypeString)
	}
	if value, ok := fmu.mutation.CircleFacilityName(); ok {
		_spec.SetField(facilitymasters.FieldCircleFacilityName, field.TypeString, value)
	}
	if fmu.mutation.CircleFacilityNameCleared() {
		_spec.ClearField(facilitymasters.FieldCircleFacilityName, field.TypeString)
	}
	if value, ok := fmu.mutation.Pincode(); ok {
		_spec.SetField(facilitymasters.FieldPincode, field.TypeString, value)
	}
	if fmu.mutation.PincodeCleared() {
		_spec.ClearField(facilitymasters.FieldPincode, field.TypeString)
	}
	if value, ok := fmu.mutation.ControllingAuthorityFacilityID(); ok {
		_spec.SetField(facilitymasters.FieldControllingAuthorityFacilityID, field.TypeString, value)
	}
	if fmu.mutation.ControllingAuthorityFacilityIDCleared() {
		_spec.ClearField(facilitymasters.FieldControllingAuthorityFacilityID, field.TypeString)
	}
	if value, ok := fmu.mutation.ControllingAuthorityFacilityName(); ok {
		_spec.SetField(facilitymasters.FieldControllingAuthorityFacilityName, field.TypeString, value)
	}
	if fmu.mutation.ControllingAuthorityFacilityNameCleared() {
		_spec.ClearField(facilitymasters.FieldControllingAuthorityFacilityName, field.TypeString)
	}
	if value, ok := fmu.mutation.NodalOfficerFacilityID(); ok {
		_spec.SetField(facilitymasters.FieldNodalOfficerFacilityID, field.TypeString, value)
	}
	if fmu.mutation.NodalOfficerFacilityIDCleared() {
		_spec.ClearField(facilitymasters.FieldNodalOfficerFacilityID, field.TypeString)
	}
	if value, ok := fmu.mutation.NodalOfficerFacilityName(); ok {
		_spec.SetField(facilitymasters.FieldNodalOfficerFacilityName, field.TypeString, value)
	}
	if fmu.mutation.NodalOfficerFacilityNameCleared() {
		_spec.ClearField(facilitymasters.FieldNodalOfficerFacilityName, field.TypeString)
	}
	if value, ok := fmu.mutation.CityName(); ok {
		_spec.SetField(facilitymasters.FieldCityName, field.TypeString, value)
	}
	if fmu.mutation.CityNameCleared() {
		_spec.ClearField(facilitymasters.FieldCityName, field.TypeString)
	}
	if value, ok := fmu.mutation.HallCircleCode(); ok {
		_spec.SetField(facilitymasters.FieldHallCircleCode, field.TypeString, value)
	}
	if fmu.mutation.HallCircleCodeCleared() {
		_spec.ClearField(facilitymasters.FieldHallCircleCode, field.TypeString)
	}
	if value, ok := fmu.mutation.DeliveryNonDeliveryOffice(); ok {
		_spec.SetField(facilitymasters.FieldDeliveryNonDeliveryOffice, field.TypeString, value)
	}
	if fmu.mutation.DeliveryNonDeliveryOfficeCleared() {
		_spec.ClearField(facilitymasters.FieldDeliveryNonDeliveryOffice, field.TypeString)
	}
	if value, ok := fmu.mutation.CreatedID(); ok {
		_spec.SetField(facilitymasters.FieldCreatedID, field.TypeString, value)
	}
	if fmu.mutation.CreatedIDCleared() {
		_spec.ClearField(facilitymasters.FieldCreatedID, field.TypeString)
	}
	if value, ok := fmu.mutation.CreatedBy(); ok {
		_spec.SetField(facilitymasters.FieldCreatedBy, field.TypeString, value)
	}
	if fmu.mutation.CreatedByCleared() {
		_spec.ClearField(facilitymasters.FieldCreatedBy, field.TypeString)
	}
	if value, ok := fmu.mutation.CreatedByName(); ok {
		_spec.SetField(facilitymasters.FieldCreatedByName, field.TypeString, value)
	}
	if fmu.mutation.CreatedByNameCleared() {
		_spec.ClearField(facilitymasters.FieldCreatedByName, field.TypeString)
	}
	if value, ok := fmu.mutation.CreatedByEmpID(); ok {
		_spec.SetField(facilitymasters.FieldCreatedByEmpID, field.TypeString, value)
	}
	if fmu.mutation.CreatedByEmpIDCleared() {
		_spec.ClearField(facilitymasters.FieldCreatedByEmpID, field.TypeString)
	}
	if value, ok := fmu.mutation.CircleCode(); ok {
		_spec.SetField(facilitymasters.FieldCircleCode, field.TypeString, value)
	}
	if fmu.mutation.CircleCodeCleared() {
		_spec.ClearField(facilitymasters.FieldCircleCode, field.TypeString)
	}
	if value, ok := fmu.mutation.Status(); ok {
		_spec.SetField(facilitymasters.FieldStatus, field.TypeString, value)
	}
	if value, ok := fmu.mutation.EventTime(); ok {
		_spec.SetField(facilitymasters.FieldEventTime, field.TypeTime, value)
	}
	if fmu.mutation.EventTimeCleared() {
		_spec.ClearField(facilitymasters.FieldEventTime, field.TypeTime)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, fmu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{facilitymasters.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	fmu.mutation.done = true
	return n, nil
}

// FacilityMastersUpdateOne is the builder for updating a single FacilityMasters entity.
type FacilityMastersUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *FacilityMastersMutation
}

// SetFacilityID sets the "FacilityID" field.
func (fmuo *FacilityMastersUpdateOne) SetFacilityID(s string) *FacilityMastersUpdateOne {
	fmuo.mutation.SetFacilityID(s)
	return fmuo
}

// SetNillableFacilityID sets the "FacilityID" field if the given value is not nil.
func (fmuo *FacilityMastersUpdateOne) SetNillableFacilityID(s *string) *FacilityMastersUpdateOne {
	if s != nil {
		fmuo.SetFacilityID(*s)
	}
	return fmuo
}

// ClearFacilityID clears the value of the "FacilityID" field.
func (fmuo *FacilityMastersUpdateOne) ClearFacilityID() *FacilityMastersUpdateOne {
	fmuo.mutation.ClearFacilityID()
	return fmuo
}

// SetUUID sets the "UUID" field.
func (fmuo *FacilityMastersUpdateOne) SetUUID(i int64) *FacilityMastersUpdateOne {
	fmuo.mutation.ResetUUID()
	fmuo.mutation.SetUUID(i)
	return fmuo
}

// SetNillableUUID sets the "UUID" field if the given value is not nil.
func (fmuo *FacilityMastersUpdateOne) SetNillableUUID(i *int64) *FacilityMastersUpdateOne {
	if i != nil {
		fmuo.SetUUID(*i)
	}
	return fmuo
}

// AddUUID adds i to the "UUID" field.
func (fmuo *FacilityMastersUpdateOne) AddUUID(i int64) *FacilityMastersUpdateOne {
	fmuo.mutation.AddUUID(i)
	return fmuo
}

// ClearUUID clears the value of the "UUID" field.
func (fmuo *FacilityMastersUpdateOne) ClearUUID() *FacilityMastersUpdateOne {
	fmuo.mutation.ClearUUID()
	return fmuo
}

// SetFacilityType sets the "FacilityType" field.
func (fmuo *FacilityMastersUpdateOne) SetFacilityType(s string) *FacilityMastersUpdateOne {
	fmuo.mutation.SetFacilityType(s)
	return fmuo
}

// SetNillableFacilityType sets the "FacilityType" field if the given value is not nil.
func (fmuo *FacilityMastersUpdateOne) SetNillableFacilityType(s *string) *FacilityMastersUpdateOne {
	if s != nil {
		fmuo.SetFacilityType(*s)
	}
	return fmuo
}

// ClearFacilityType clears the value of the "FacilityType" field.
func (fmuo *FacilityMastersUpdateOne) ClearFacilityType() *FacilityMastersUpdateOne {
	fmuo.mutation.ClearFacilityType()
	return fmuo
}

// SetFacilityIDDescription sets the "FacilityIDDescription" field.
func (fmuo *FacilityMastersUpdateOne) SetFacilityIDDescription(s string) *FacilityMastersUpdateOne {
	fmuo.mutation.SetFacilityIDDescription(s)
	return fmuo
}

// SetNillableFacilityIDDescription sets the "FacilityIDDescription" field if the given value is not nil.
func (fmuo *FacilityMastersUpdateOne) SetNillableFacilityIDDescription(s *string) *FacilityMastersUpdateOne {
	if s != nil {
		fmuo.SetFacilityIDDescription(*s)
	}
	return fmuo
}

// ClearFacilityIDDescription clears the value of the "FacilityIDDescription" field.
func (fmuo *FacilityMastersUpdateOne) ClearFacilityIDDescription() *FacilityMastersUpdateOne {
	fmuo.mutation.ClearFacilityIDDescription()
	return fmuo
}

// SetReportingOfficeFacilityID sets the "ReportingOfficeFacilityID" field.
func (fmuo *FacilityMastersUpdateOne) SetReportingOfficeFacilityID(s string) *FacilityMastersUpdateOne {
	fmuo.mutation.SetReportingOfficeFacilityID(s)
	return fmuo
}

// SetNillableReportingOfficeFacilityID sets the "ReportingOfficeFacilityID" field if the given value is not nil.
func (fmuo *FacilityMastersUpdateOne) SetNillableReportingOfficeFacilityID(s *string) *FacilityMastersUpdateOne {
	if s != nil {
		fmuo.SetReportingOfficeFacilityID(*s)
	}
	return fmuo
}

// ClearReportingOfficeFacilityID clears the value of the "ReportingOfficeFacilityID" field.
func (fmuo *FacilityMastersUpdateOne) ClearReportingOfficeFacilityID() *FacilityMastersUpdateOne {
	fmuo.mutation.ClearReportingOfficeFacilityID()
	return fmuo
}

// SetReportingOfficeFacilityName sets the "ReportingOfficeFacilityName" field.
func (fmuo *FacilityMastersUpdateOne) SetReportingOfficeFacilityName(s string) *FacilityMastersUpdateOne {
	fmuo.mutation.SetReportingOfficeFacilityName(s)
	return fmuo
}

// SetNillableReportingOfficeFacilityName sets the "ReportingOfficeFacilityName" field if the given value is not nil.
func (fmuo *FacilityMastersUpdateOne) SetNillableReportingOfficeFacilityName(s *string) *FacilityMastersUpdateOne {
	if s != nil {
		fmuo.SetReportingOfficeFacilityName(*s)
	}
	return fmuo
}

// ClearReportingOfficeFacilityName clears the value of the "ReportingOfficeFacilityName" field.
func (fmuo *FacilityMastersUpdateOne) ClearReportingOfficeFacilityName() *FacilityMastersUpdateOne {
	fmuo.mutation.ClearReportingOfficeFacilityName()
	return fmuo
}

// SetHOFacilityID sets the "HOFacilityID" field.
func (fmuo *FacilityMastersUpdateOne) SetHOFacilityID(s string) *FacilityMastersUpdateOne {
	fmuo.mutation.SetHOFacilityID(s)
	return fmuo
}

// SetNillableHOFacilityID sets the "HOFacilityID" field if the given value is not nil.
func (fmuo *FacilityMastersUpdateOne) SetNillableHOFacilityID(s *string) *FacilityMastersUpdateOne {
	if s != nil {
		fmuo.SetHOFacilityID(*s)
	}
	return fmuo
}

// ClearHOFacilityID clears the value of the "HOFacilityID" field.
func (fmuo *FacilityMastersUpdateOne) ClearHOFacilityID() *FacilityMastersUpdateOne {
	fmuo.mutation.ClearHOFacilityID()
	return fmuo
}

// SetHOFacilityName sets the "HOFacilityName" field.
func (fmuo *FacilityMastersUpdateOne) SetHOFacilityName(s string) *FacilityMastersUpdateOne {
	fmuo.mutation.SetHOFacilityName(s)
	return fmuo
}

// SetNillableHOFacilityName sets the "HOFacilityName" field if the given value is not nil.
func (fmuo *FacilityMastersUpdateOne) SetNillableHOFacilityName(s *string) *FacilityMastersUpdateOne {
	if s != nil {
		fmuo.SetHOFacilityName(*s)
	}
	return fmuo
}

// ClearHOFacilityName clears the value of the "HOFacilityName" field.
func (fmuo *FacilityMastersUpdateOne) ClearHOFacilityName() *FacilityMastersUpdateOne {
	fmuo.mutation.ClearHOFacilityName()
	return fmuo
}

// SetSubDivisionFacilityID sets the "SubDivisionFacilityID" field.
func (fmuo *FacilityMastersUpdateOne) SetSubDivisionFacilityID(s string) *FacilityMastersUpdateOne {
	fmuo.mutation.SetSubDivisionFacilityID(s)
	return fmuo
}

// SetNillableSubDivisionFacilityID sets the "SubDivisionFacilityID" field if the given value is not nil.
func (fmuo *FacilityMastersUpdateOne) SetNillableSubDivisionFacilityID(s *string) *FacilityMastersUpdateOne {
	if s != nil {
		fmuo.SetSubDivisionFacilityID(*s)
	}
	return fmuo
}

// ClearSubDivisionFacilityID clears the value of the "SubDivisionFacilityID" field.
func (fmuo *FacilityMastersUpdateOne) ClearSubDivisionFacilityID() *FacilityMastersUpdateOne {
	fmuo.mutation.ClearSubDivisionFacilityID()
	return fmuo
}

// SetSubDivisionFacilityName sets the "SubDivisionFacilityName" field.
func (fmuo *FacilityMastersUpdateOne) SetSubDivisionFacilityName(s string) *FacilityMastersUpdateOne {
	fmuo.mutation.SetSubDivisionFacilityName(s)
	return fmuo
}

// SetNillableSubDivisionFacilityName sets the "SubDivisionFacilityName" field if the given value is not nil.
func (fmuo *FacilityMastersUpdateOne) SetNillableSubDivisionFacilityName(s *string) *FacilityMastersUpdateOne {
	if s != nil {
		fmuo.SetSubDivisionFacilityName(*s)
	}
	return fmuo
}

// ClearSubDivisionFacilityName clears the value of the "SubDivisionFacilityName" field.
func (fmuo *FacilityMastersUpdateOne) ClearSubDivisionFacilityName() *FacilityMastersUpdateOne {
	fmuo.mutation.ClearSubDivisionFacilityName()
	return fmuo
}

// SetDivisionFacilityID sets the "DivisionFacilityID" field.
func (fmuo *FacilityMastersUpdateOne) SetDivisionFacilityID(s string) *FacilityMastersUpdateOne {
	fmuo.mutation.SetDivisionFacilityID(s)
	return fmuo
}

// SetNillableDivisionFacilityID sets the "DivisionFacilityID" field if the given value is not nil.
func (fmuo *FacilityMastersUpdateOne) SetNillableDivisionFacilityID(s *string) *FacilityMastersUpdateOne {
	if s != nil {
		fmuo.SetDivisionFacilityID(*s)
	}
	return fmuo
}

// ClearDivisionFacilityID clears the value of the "DivisionFacilityID" field.
func (fmuo *FacilityMastersUpdateOne) ClearDivisionFacilityID() *FacilityMastersUpdateOne {
	fmuo.mutation.ClearDivisionFacilityID()
	return fmuo
}

// SetDivisionFacilityName sets the "DivisionFacilityName" field.
func (fmuo *FacilityMastersUpdateOne) SetDivisionFacilityName(s string) *FacilityMastersUpdateOne {
	fmuo.mutation.SetDivisionFacilityName(s)
	return fmuo
}

// SetNillableDivisionFacilityName sets the "DivisionFacilityName" field if the given value is not nil.
func (fmuo *FacilityMastersUpdateOne) SetNillableDivisionFacilityName(s *string) *FacilityMastersUpdateOne {
	if s != nil {
		fmuo.SetDivisionFacilityName(*s)
	}
	return fmuo
}

// ClearDivisionFacilityName clears the value of the "DivisionFacilityName" field.
func (fmuo *FacilityMastersUpdateOne) ClearDivisionFacilityName() *FacilityMastersUpdateOne {
	fmuo.mutation.ClearDivisionFacilityName()
	return fmuo
}

// SetRegionFacilityID sets the "RegionFacilityID" field.
func (fmuo *FacilityMastersUpdateOne) SetRegionFacilityID(s string) *FacilityMastersUpdateOne {
	fmuo.mutation.SetRegionFacilityID(s)
	return fmuo
}

// SetNillableRegionFacilityID sets the "RegionFacilityID" field if the given value is not nil.
func (fmuo *FacilityMastersUpdateOne) SetNillableRegionFacilityID(s *string) *FacilityMastersUpdateOne {
	if s != nil {
		fmuo.SetRegionFacilityID(*s)
	}
	return fmuo
}

// ClearRegionFacilityID clears the value of the "RegionFacilityID" field.
func (fmuo *FacilityMastersUpdateOne) ClearRegionFacilityID() *FacilityMastersUpdateOne {
	fmuo.mutation.ClearRegionFacilityID()
	return fmuo
}

// SetRegionFacilityName sets the "RegionFacilityName" field.
func (fmuo *FacilityMastersUpdateOne) SetRegionFacilityName(s string) *FacilityMastersUpdateOne {
	fmuo.mutation.SetRegionFacilityName(s)
	return fmuo
}

// SetNillableRegionFacilityName sets the "RegionFacilityName" field if the given value is not nil.
func (fmuo *FacilityMastersUpdateOne) SetNillableRegionFacilityName(s *string) *FacilityMastersUpdateOne {
	if s != nil {
		fmuo.SetRegionFacilityName(*s)
	}
	return fmuo
}

// ClearRegionFacilityName clears the value of the "RegionFacilityName" field.
func (fmuo *FacilityMastersUpdateOne) ClearRegionFacilityName() *FacilityMastersUpdateOne {
	fmuo.mutation.ClearRegionFacilityName()
	return fmuo
}

// SetCircleFacilityID sets the "CircleFacilityID" field.
func (fmuo *FacilityMastersUpdateOne) SetCircleFacilityID(s string) *FacilityMastersUpdateOne {
	fmuo.mutation.SetCircleFacilityID(s)
	return fmuo
}

// SetNillableCircleFacilityID sets the "CircleFacilityID" field if the given value is not nil.
func (fmuo *FacilityMastersUpdateOne) SetNillableCircleFacilityID(s *string) *FacilityMastersUpdateOne {
	if s != nil {
		fmuo.SetCircleFacilityID(*s)
	}
	return fmuo
}

// ClearCircleFacilityID clears the value of the "CircleFacilityID" field.
func (fmuo *FacilityMastersUpdateOne) ClearCircleFacilityID() *FacilityMastersUpdateOne {
	fmuo.mutation.ClearCircleFacilityID()
	return fmuo
}

// SetCircleFacilityName sets the "CircleFacilityName" field.
func (fmuo *FacilityMastersUpdateOne) SetCircleFacilityName(s string) *FacilityMastersUpdateOne {
	fmuo.mutation.SetCircleFacilityName(s)
	return fmuo
}

// SetNillableCircleFacilityName sets the "CircleFacilityName" field if the given value is not nil.
func (fmuo *FacilityMastersUpdateOne) SetNillableCircleFacilityName(s *string) *FacilityMastersUpdateOne {
	if s != nil {
		fmuo.SetCircleFacilityName(*s)
	}
	return fmuo
}

// ClearCircleFacilityName clears the value of the "CircleFacilityName" field.
func (fmuo *FacilityMastersUpdateOne) ClearCircleFacilityName() *FacilityMastersUpdateOne {
	fmuo.mutation.ClearCircleFacilityName()
	return fmuo
}

// SetPincode sets the "Pincode" field.
func (fmuo *FacilityMastersUpdateOne) SetPincode(s string) *FacilityMastersUpdateOne {
	fmuo.mutation.SetPincode(s)
	return fmuo
}

// SetNillablePincode sets the "Pincode" field if the given value is not nil.
func (fmuo *FacilityMastersUpdateOne) SetNillablePincode(s *string) *FacilityMastersUpdateOne {
	if s != nil {
		fmuo.SetPincode(*s)
	}
	return fmuo
}

// ClearPincode clears the value of the "Pincode" field.
func (fmuo *FacilityMastersUpdateOne) ClearPincode() *FacilityMastersUpdateOne {
	fmuo.mutation.ClearPincode()
	return fmuo
}

// SetControllingAuthorityFacilityID sets the "ControllingAuthorityFacilityID" field.
func (fmuo *FacilityMastersUpdateOne) SetControllingAuthorityFacilityID(s string) *FacilityMastersUpdateOne {
	fmuo.mutation.SetControllingAuthorityFacilityID(s)
	return fmuo
}

// SetNillableControllingAuthorityFacilityID sets the "ControllingAuthorityFacilityID" field if the given value is not nil.
func (fmuo *FacilityMastersUpdateOne) SetNillableControllingAuthorityFacilityID(s *string) *FacilityMastersUpdateOne {
	if s != nil {
		fmuo.SetControllingAuthorityFacilityID(*s)
	}
	return fmuo
}

// ClearControllingAuthorityFacilityID clears the value of the "ControllingAuthorityFacilityID" field.
func (fmuo *FacilityMastersUpdateOne) ClearControllingAuthorityFacilityID() *FacilityMastersUpdateOne {
	fmuo.mutation.ClearControllingAuthorityFacilityID()
	return fmuo
}

// SetControllingAuthorityFacilityName sets the "ControllingAuthorityFacilityName" field.
func (fmuo *FacilityMastersUpdateOne) SetControllingAuthorityFacilityName(s string) *FacilityMastersUpdateOne {
	fmuo.mutation.SetControllingAuthorityFacilityName(s)
	return fmuo
}

// SetNillableControllingAuthorityFacilityName sets the "ControllingAuthorityFacilityName" field if the given value is not nil.
func (fmuo *FacilityMastersUpdateOne) SetNillableControllingAuthorityFacilityName(s *string) *FacilityMastersUpdateOne {
	if s != nil {
		fmuo.SetControllingAuthorityFacilityName(*s)
	}
	return fmuo
}

// ClearControllingAuthorityFacilityName clears the value of the "ControllingAuthorityFacilityName" field.
func (fmuo *FacilityMastersUpdateOne) ClearControllingAuthorityFacilityName() *FacilityMastersUpdateOne {
	fmuo.mutation.ClearControllingAuthorityFacilityName()
	return fmuo
}

// SetNodalOfficerFacilityID sets the "NodalOfficerFacilityID" field.
func (fmuo *FacilityMastersUpdateOne) SetNodalOfficerFacilityID(s string) *FacilityMastersUpdateOne {
	fmuo.mutation.SetNodalOfficerFacilityID(s)
	return fmuo
}

// SetNillableNodalOfficerFacilityID sets the "NodalOfficerFacilityID" field if the given value is not nil.
func (fmuo *FacilityMastersUpdateOne) SetNillableNodalOfficerFacilityID(s *string) *FacilityMastersUpdateOne {
	if s != nil {
		fmuo.SetNodalOfficerFacilityID(*s)
	}
	return fmuo
}

// ClearNodalOfficerFacilityID clears the value of the "NodalOfficerFacilityID" field.
func (fmuo *FacilityMastersUpdateOne) ClearNodalOfficerFacilityID() *FacilityMastersUpdateOne {
	fmuo.mutation.ClearNodalOfficerFacilityID()
	return fmuo
}

// SetNodalOfficerFacilityName sets the "NodalOfficerFacilityName" field.
func (fmuo *FacilityMastersUpdateOne) SetNodalOfficerFacilityName(s string) *FacilityMastersUpdateOne {
	fmuo.mutation.SetNodalOfficerFacilityName(s)
	return fmuo
}

// SetNillableNodalOfficerFacilityName sets the "NodalOfficerFacilityName" field if the given value is not nil.
func (fmuo *FacilityMastersUpdateOne) SetNillableNodalOfficerFacilityName(s *string) *FacilityMastersUpdateOne {
	if s != nil {
		fmuo.SetNodalOfficerFacilityName(*s)
	}
	return fmuo
}

// ClearNodalOfficerFacilityName clears the value of the "NodalOfficerFacilityName" field.
func (fmuo *FacilityMastersUpdateOne) ClearNodalOfficerFacilityName() *FacilityMastersUpdateOne {
	fmuo.mutation.ClearNodalOfficerFacilityName()
	return fmuo
}

// SetCityName sets the "CityName" field.
func (fmuo *FacilityMastersUpdateOne) SetCityName(s string) *FacilityMastersUpdateOne {
	fmuo.mutation.SetCityName(s)
	return fmuo
}

// SetNillableCityName sets the "CityName" field if the given value is not nil.
func (fmuo *FacilityMastersUpdateOne) SetNillableCityName(s *string) *FacilityMastersUpdateOne {
	if s != nil {
		fmuo.SetCityName(*s)
	}
	return fmuo
}

// ClearCityName clears the value of the "CityName" field.
func (fmuo *FacilityMastersUpdateOne) ClearCityName() *FacilityMastersUpdateOne {
	fmuo.mutation.ClearCityName()
	return fmuo
}

// SetHallCircleCode sets the "HallCircleCode" field.
func (fmuo *FacilityMastersUpdateOne) SetHallCircleCode(s string) *FacilityMastersUpdateOne {
	fmuo.mutation.SetHallCircleCode(s)
	return fmuo
}

// SetNillableHallCircleCode sets the "HallCircleCode" field if the given value is not nil.
func (fmuo *FacilityMastersUpdateOne) SetNillableHallCircleCode(s *string) *FacilityMastersUpdateOne {
	if s != nil {
		fmuo.SetHallCircleCode(*s)
	}
	return fmuo
}

// ClearHallCircleCode clears the value of the "HallCircleCode" field.
func (fmuo *FacilityMastersUpdateOne) ClearHallCircleCode() *FacilityMastersUpdateOne {
	fmuo.mutation.ClearHallCircleCode()
	return fmuo
}

// SetDeliveryNonDeliveryOffice sets the "DeliveryNonDeliveryOffice" field.
func (fmuo *FacilityMastersUpdateOne) SetDeliveryNonDeliveryOffice(s string) *FacilityMastersUpdateOne {
	fmuo.mutation.SetDeliveryNonDeliveryOffice(s)
	return fmuo
}

// SetNillableDeliveryNonDeliveryOffice sets the "DeliveryNonDeliveryOffice" field if the given value is not nil.
func (fmuo *FacilityMastersUpdateOne) SetNillableDeliveryNonDeliveryOffice(s *string) *FacilityMastersUpdateOne {
	if s != nil {
		fmuo.SetDeliveryNonDeliveryOffice(*s)
	}
	return fmuo
}

// ClearDeliveryNonDeliveryOffice clears the value of the "DeliveryNonDeliveryOffice" field.
func (fmuo *FacilityMastersUpdateOne) ClearDeliveryNonDeliveryOffice() *FacilityMastersUpdateOne {
	fmuo.mutation.ClearDeliveryNonDeliveryOffice()
	return fmuo
}

// SetCreatedID sets the "CreatedID" field.
func (fmuo *FacilityMastersUpdateOne) SetCreatedID(s string) *FacilityMastersUpdateOne {
	fmuo.mutation.SetCreatedID(s)
	return fmuo
}

// SetNillableCreatedID sets the "CreatedID" field if the given value is not nil.
func (fmuo *FacilityMastersUpdateOne) SetNillableCreatedID(s *string) *FacilityMastersUpdateOne {
	if s != nil {
		fmuo.SetCreatedID(*s)
	}
	return fmuo
}

// ClearCreatedID clears the value of the "CreatedID" field.
func (fmuo *FacilityMastersUpdateOne) ClearCreatedID() *FacilityMastersUpdateOne {
	fmuo.mutation.ClearCreatedID()
	return fmuo
}

// SetCreatedBy sets the "CreatedBy" field.
func (fmuo *FacilityMastersUpdateOne) SetCreatedBy(s string) *FacilityMastersUpdateOne {
	fmuo.mutation.SetCreatedBy(s)
	return fmuo
}

// SetNillableCreatedBy sets the "CreatedBy" field if the given value is not nil.
func (fmuo *FacilityMastersUpdateOne) SetNillableCreatedBy(s *string) *FacilityMastersUpdateOne {
	if s != nil {
		fmuo.SetCreatedBy(*s)
	}
	return fmuo
}

// ClearCreatedBy clears the value of the "CreatedBy" field.
func (fmuo *FacilityMastersUpdateOne) ClearCreatedBy() *FacilityMastersUpdateOne {
	fmuo.mutation.ClearCreatedBy()
	return fmuo
}

// SetCreatedByName sets the "CreatedByName" field.
func (fmuo *FacilityMastersUpdateOne) SetCreatedByName(s string) *FacilityMastersUpdateOne {
	fmuo.mutation.SetCreatedByName(s)
	return fmuo
}

// SetNillableCreatedByName sets the "CreatedByName" field if the given value is not nil.
func (fmuo *FacilityMastersUpdateOne) SetNillableCreatedByName(s *string) *FacilityMastersUpdateOne {
	if s != nil {
		fmuo.SetCreatedByName(*s)
	}
	return fmuo
}

// ClearCreatedByName clears the value of the "CreatedByName" field.
func (fmuo *FacilityMastersUpdateOne) ClearCreatedByName() *FacilityMastersUpdateOne {
	fmuo.mutation.ClearCreatedByName()
	return fmuo
}

// SetCreatedByEmpID sets the "CreatedByEmpID" field.
func (fmuo *FacilityMastersUpdateOne) SetCreatedByEmpID(s string) *FacilityMastersUpdateOne {
	fmuo.mutation.SetCreatedByEmpID(s)
	return fmuo
}

// SetNillableCreatedByEmpID sets the "CreatedByEmpID" field if the given value is not nil.
func (fmuo *FacilityMastersUpdateOne) SetNillableCreatedByEmpID(s *string) *FacilityMastersUpdateOne {
	if s != nil {
		fmuo.SetCreatedByEmpID(*s)
	}
	return fmuo
}

// ClearCreatedByEmpID clears the value of the "CreatedByEmpID" field.
func (fmuo *FacilityMastersUpdateOne) ClearCreatedByEmpID() *FacilityMastersUpdateOne {
	fmuo.mutation.ClearCreatedByEmpID()
	return fmuo
}

// SetCircleCode sets the "CircleCode" field.
func (fmuo *FacilityMastersUpdateOne) SetCircleCode(s string) *FacilityMastersUpdateOne {
	fmuo.mutation.SetCircleCode(s)
	return fmuo
}

// SetNillableCircleCode sets the "CircleCode" field if the given value is not nil.
func (fmuo *FacilityMastersUpdateOne) SetNillableCircleCode(s *string) *FacilityMastersUpdateOne {
	if s != nil {
		fmuo.SetCircleCode(*s)
	}
	return fmuo
}

// ClearCircleCode clears the value of the "CircleCode" field.
func (fmuo *FacilityMastersUpdateOne) ClearCircleCode() *FacilityMastersUpdateOne {
	fmuo.mutation.ClearCircleCode()
	return fmuo
}

// SetStatus sets the "Status" field.
func (fmuo *FacilityMastersUpdateOne) SetStatus(s string) *FacilityMastersUpdateOne {
	fmuo.mutation.SetStatus(s)
	return fmuo
}

// SetNillableStatus sets the "Status" field if the given value is not nil.
func (fmuo *FacilityMastersUpdateOne) SetNillableStatus(s *string) *FacilityMastersUpdateOne {
	if s != nil {
		fmuo.SetStatus(*s)
	}
	return fmuo
}

// SetEventTime sets the "EventTime" field.
func (fmuo *FacilityMastersUpdateOne) SetEventTime(t time.Time) *FacilityMastersUpdateOne {
	fmuo.mutation.SetEventTime(t)
	return fmuo
}

// SetNillableEventTime sets the "EventTime" field if the given value is not nil.
func (fmuo *FacilityMastersUpdateOne) SetNillableEventTime(t *time.Time) *FacilityMastersUpdateOne {
	if t != nil {
		fmuo.SetEventTime(*t)
	}
	return fmuo
}

// ClearEventTime clears the value of the "EventTime" field.
func (fmuo *FacilityMastersUpdateOne) ClearEventTime() *FacilityMastersUpdateOne {
	fmuo.mutation.ClearEventTime()
	return fmuo
}

// Mutation returns the FacilityMastersMutation object of the builder.
func (fmuo *FacilityMastersUpdateOne) Mutation() *FacilityMastersMutation {
	return fmuo.mutation
}

// Where appends a list predicates to the FacilityMastersUpdate builder.
func (fmuo *FacilityMastersUpdateOne) Where(ps ...predicate.FacilityMasters) *FacilityMastersUpdateOne {
	fmuo.mutation.Where(ps...)
	return fmuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (fmuo *FacilityMastersUpdateOne) Select(field string, fields ...string) *FacilityMastersUpdateOne {
	fmuo.fields = append([]string{field}, fields...)
	return fmuo
}

// Save executes the query and returns the updated FacilityMasters entity.
func (fmuo *FacilityMastersUpdateOne) Save(ctx context.Context) (*FacilityMasters, error) {
	return withHooks(ctx, fmuo.sqlSave, fmuo.mutation, fmuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fmuo *FacilityMastersUpdateOne) SaveX(ctx context.Context) *FacilityMasters {
	node, err := fmuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (fmuo *FacilityMastersUpdateOne) Exec(ctx context.Context) error {
	_, err := fmuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fmuo *FacilityMastersUpdateOne) ExecX(ctx context.Context) {
	if err := fmuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (fmuo *FacilityMastersUpdateOne) sqlSave(ctx context.Context) (_node *FacilityMasters, err error) {
	_spec := sqlgraph.NewUpdateSpec(facilitymasters.Table, facilitymasters.Columns, sqlgraph.NewFieldSpec(facilitymasters.FieldID, field.TypeInt32))
	id, ok := fmuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "FacilityMasters.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := fmuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, facilitymasters.FieldID)
		for _, f := range fields {
			if !facilitymasters.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != facilitymasters.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := fmuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fmuo.mutation.FacilityID(); ok {
		_spec.SetField(facilitymasters.FieldFacilityID, field.TypeString, value)
	}
	if fmuo.mutation.FacilityIDCleared() {
		_spec.ClearField(facilitymasters.FieldFacilityID, field.TypeString)
	}
	if value, ok := fmuo.mutation.UUID(); ok {
		_spec.SetField(facilitymasters.FieldUUID, field.TypeInt64, value)
	}
	if value, ok := fmuo.mutation.AddedUUID(); ok {
		_spec.AddField(facilitymasters.FieldUUID, field.TypeInt64, value)
	}
	if fmuo.mutation.UUIDCleared() {
		_spec.ClearField(facilitymasters.FieldUUID, field.TypeInt64)
	}
	if value, ok := fmuo.mutation.FacilityType(); ok {
		_spec.SetField(facilitymasters.FieldFacilityType, field.TypeString, value)
	}
	if fmuo.mutation.FacilityTypeCleared() {
		_spec.ClearField(facilitymasters.FieldFacilityType, field.TypeString)
	}
	if value, ok := fmuo.mutation.FacilityIDDescription(); ok {
		_spec.SetField(facilitymasters.FieldFacilityIDDescription, field.TypeString, value)
	}
	if fmuo.mutation.FacilityIDDescriptionCleared() {
		_spec.ClearField(facilitymasters.FieldFacilityIDDescription, field.TypeString)
	}
	if value, ok := fmuo.mutation.ReportingOfficeFacilityID(); ok {
		_spec.SetField(facilitymasters.FieldReportingOfficeFacilityID, field.TypeString, value)
	}
	if fmuo.mutation.ReportingOfficeFacilityIDCleared() {
		_spec.ClearField(facilitymasters.FieldReportingOfficeFacilityID, field.TypeString)
	}
	if value, ok := fmuo.mutation.ReportingOfficeFacilityName(); ok {
		_spec.SetField(facilitymasters.FieldReportingOfficeFacilityName, field.TypeString, value)
	}
	if fmuo.mutation.ReportingOfficeFacilityNameCleared() {
		_spec.ClearField(facilitymasters.FieldReportingOfficeFacilityName, field.TypeString)
	}
	if value, ok := fmuo.mutation.HOFacilityID(); ok {
		_spec.SetField(facilitymasters.FieldHOFacilityID, field.TypeString, value)
	}
	if fmuo.mutation.HOFacilityIDCleared() {
		_spec.ClearField(facilitymasters.FieldHOFacilityID, field.TypeString)
	}
	if value, ok := fmuo.mutation.HOFacilityName(); ok {
		_spec.SetField(facilitymasters.FieldHOFacilityName, field.TypeString, value)
	}
	if fmuo.mutation.HOFacilityNameCleared() {
		_spec.ClearField(facilitymasters.FieldHOFacilityName, field.TypeString)
	}
	if value, ok := fmuo.mutation.SubDivisionFacilityID(); ok {
		_spec.SetField(facilitymasters.FieldSubDivisionFacilityID, field.TypeString, value)
	}
	if fmuo.mutation.SubDivisionFacilityIDCleared() {
		_spec.ClearField(facilitymasters.FieldSubDivisionFacilityID, field.TypeString)
	}
	if value, ok := fmuo.mutation.SubDivisionFacilityName(); ok {
		_spec.SetField(facilitymasters.FieldSubDivisionFacilityName, field.TypeString, value)
	}
	if fmuo.mutation.SubDivisionFacilityNameCleared() {
		_spec.ClearField(facilitymasters.FieldSubDivisionFacilityName, field.TypeString)
	}
	if value, ok := fmuo.mutation.DivisionFacilityID(); ok {
		_spec.SetField(facilitymasters.FieldDivisionFacilityID, field.TypeString, value)
	}
	if fmuo.mutation.DivisionFacilityIDCleared() {
		_spec.ClearField(facilitymasters.FieldDivisionFacilityID, field.TypeString)
	}
	if value, ok := fmuo.mutation.DivisionFacilityName(); ok {
		_spec.SetField(facilitymasters.FieldDivisionFacilityName, field.TypeString, value)
	}
	if fmuo.mutation.DivisionFacilityNameCleared() {
		_spec.ClearField(facilitymasters.FieldDivisionFacilityName, field.TypeString)
	}
	if value, ok := fmuo.mutation.RegionFacilityID(); ok {
		_spec.SetField(facilitymasters.FieldRegionFacilityID, field.TypeString, value)
	}
	if fmuo.mutation.RegionFacilityIDCleared() {
		_spec.ClearField(facilitymasters.FieldRegionFacilityID, field.TypeString)
	}
	if value, ok := fmuo.mutation.RegionFacilityName(); ok {
		_spec.SetField(facilitymasters.FieldRegionFacilityName, field.TypeString, value)
	}
	if fmuo.mutation.RegionFacilityNameCleared() {
		_spec.ClearField(facilitymasters.FieldRegionFacilityName, field.TypeString)
	}
	if value, ok := fmuo.mutation.CircleFacilityID(); ok {
		_spec.SetField(facilitymasters.FieldCircleFacilityID, field.TypeString, value)
	}
	if fmuo.mutation.CircleFacilityIDCleared() {
		_spec.ClearField(facilitymasters.FieldCircleFacilityID, field.TypeString)
	}
	if value, ok := fmuo.mutation.CircleFacilityName(); ok {
		_spec.SetField(facilitymasters.FieldCircleFacilityName, field.TypeString, value)
	}
	if fmuo.mutation.CircleFacilityNameCleared() {
		_spec.ClearField(facilitymasters.FieldCircleFacilityName, field.TypeString)
	}
	if value, ok := fmuo.mutation.Pincode(); ok {
		_spec.SetField(facilitymasters.FieldPincode, field.TypeString, value)
	}
	if fmuo.mutation.PincodeCleared() {
		_spec.ClearField(facilitymasters.FieldPincode, field.TypeString)
	}
	if value, ok := fmuo.mutation.ControllingAuthorityFacilityID(); ok {
		_spec.SetField(facilitymasters.FieldControllingAuthorityFacilityID, field.TypeString, value)
	}
	if fmuo.mutation.ControllingAuthorityFacilityIDCleared() {
		_spec.ClearField(facilitymasters.FieldControllingAuthorityFacilityID, field.TypeString)
	}
	if value, ok := fmuo.mutation.ControllingAuthorityFacilityName(); ok {
		_spec.SetField(facilitymasters.FieldControllingAuthorityFacilityName, field.TypeString, value)
	}
	if fmuo.mutation.ControllingAuthorityFacilityNameCleared() {
		_spec.ClearField(facilitymasters.FieldControllingAuthorityFacilityName, field.TypeString)
	}
	if value, ok := fmuo.mutation.NodalOfficerFacilityID(); ok {
		_spec.SetField(facilitymasters.FieldNodalOfficerFacilityID, field.TypeString, value)
	}
	if fmuo.mutation.NodalOfficerFacilityIDCleared() {
		_spec.ClearField(facilitymasters.FieldNodalOfficerFacilityID, field.TypeString)
	}
	if value, ok := fmuo.mutation.NodalOfficerFacilityName(); ok {
		_spec.SetField(facilitymasters.FieldNodalOfficerFacilityName, field.TypeString, value)
	}
	if fmuo.mutation.NodalOfficerFacilityNameCleared() {
		_spec.ClearField(facilitymasters.FieldNodalOfficerFacilityName, field.TypeString)
	}
	if value, ok := fmuo.mutation.CityName(); ok {
		_spec.SetField(facilitymasters.FieldCityName, field.TypeString, value)
	}
	if fmuo.mutation.CityNameCleared() {
		_spec.ClearField(facilitymasters.FieldCityName, field.TypeString)
	}
	if value, ok := fmuo.mutation.HallCircleCode(); ok {
		_spec.SetField(facilitymasters.FieldHallCircleCode, field.TypeString, value)
	}
	if fmuo.mutation.HallCircleCodeCleared() {
		_spec.ClearField(facilitymasters.FieldHallCircleCode, field.TypeString)
	}
	if value, ok := fmuo.mutation.DeliveryNonDeliveryOffice(); ok {
		_spec.SetField(facilitymasters.FieldDeliveryNonDeliveryOffice, field.TypeString, value)
	}
	if fmuo.mutation.DeliveryNonDeliveryOfficeCleared() {
		_spec.ClearField(facilitymasters.FieldDeliveryNonDeliveryOffice, field.TypeString)
	}
	if value, ok := fmuo.mutation.CreatedID(); ok {
		_spec.SetField(facilitymasters.FieldCreatedID, field.TypeString, value)
	}
	if fmuo.mutation.CreatedIDCleared() {
		_spec.ClearField(facilitymasters.FieldCreatedID, field.TypeString)
	}
	if value, ok := fmuo.mutation.CreatedBy(); ok {
		_spec.SetField(facilitymasters.FieldCreatedBy, field.TypeString, value)
	}
	if fmuo.mutation.CreatedByCleared() {
		_spec.ClearField(facilitymasters.FieldCreatedBy, field.TypeString)
	}
	if value, ok := fmuo.mutation.CreatedByName(); ok {
		_spec.SetField(facilitymasters.FieldCreatedByName, field.TypeString, value)
	}
	if fmuo.mutation.CreatedByNameCleared() {
		_spec.ClearField(facilitymasters.FieldCreatedByName, field.TypeString)
	}
	if value, ok := fmuo.mutation.CreatedByEmpID(); ok {
		_spec.SetField(facilitymasters.FieldCreatedByEmpID, field.TypeString, value)
	}
	if fmuo.mutation.CreatedByEmpIDCleared() {
		_spec.ClearField(facilitymasters.FieldCreatedByEmpID, field.TypeString)
	}
	if value, ok := fmuo.mutation.CircleCode(); ok {
		_spec.SetField(facilitymasters.FieldCircleCode, field.TypeString, value)
	}
	if fmuo.mutation.CircleCodeCleared() {
		_spec.ClearField(facilitymasters.FieldCircleCode, field.TypeString)
	}
	if value, ok := fmuo.mutation.Status(); ok {
		_spec.SetField(facilitymasters.FieldStatus, field.TypeString, value)
	}
	if value, ok := fmuo.mutation.EventTime(); ok {
		_spec.SetField(facilitymasters.FieldEventTime, field.TypeTime, value)
	}
	if fmuo.mutation.EventTimeCleared() {
		_spec.ClearField(facilitymasters.FieldEventTime, field.TypeTime)
	}
	_node = &FacilityMasters{config: fmuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, fmuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{facilitymasters.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	fmuo.mutation.done = true
	return _node, nil
}
