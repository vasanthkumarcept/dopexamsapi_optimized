// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"
	"recruit/ent/directorateusers"
	"recruit/ent/employees"
	"recruit/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// DirectorateUsersQuery is the builder for querying DirectorateUsers entities.
type DirectorateUsersQuery struct {
	config
	ctx              *QueryContext
	order            []directorateusers.OrderOption
	inters           []Interceptor
	predicates       []predicate.DirectorateUsers
	withEmployeeUser *EmployeesQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the DirectorateUsersQuery builder.
func (duq *DirectorateUsersQuery) Where(ps ...predicate.DirectorateUsers) *DirectorateUsersQuery {
	duq.predicates = append(duq.predicates, ps...)
	return duq
}

// Limit the number of records to be returned by this query.
func (duq *DirectorateUsersQuery) Limit(limit int) *DirectorateUsersQuery {
	duq.ctx.Limit = &limit
	return duq
}

// Offset to start from.
func (duq *DirectorateUsersQuery) Offset(offset int) *DirectorateUsersQuery {
	duq.ctx.Offset = &offset
	return duq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (duq *DirectorateUsersQuery) Unique(unique bool) *DirectorateUsersQuery {
	duq.ctx.Unique = &unique
	return duq
}

// Order specifies how the records should be ordered.
func (duq *DirectorateUsersQuery) Order(o ...directorateusers.OrderOption) *DirectorateUsersQuery {
	duq.order = append(duq.order, o...)
	return duq
}

// QueryEmployeeUser chains the current query on the "employee_user" edge.
func (duq *DirectorateUsersQuery) QueryEmployeeUser() *EmployeesQuery {
	query := (&EmployeesClient{config: duq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := duq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := duq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(directorateusers.Table, directorateusers.FieldID, selector),
			sqlgraph.To(employees.Table, employees.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, directorateusers.EmployeeUserTable, directorateusers.EmployeeUserColumn),
		)
		fromU = sqlgraph.SetNeighbors(duq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first DirectorateUsers entity from the query.
// Returns a *NotFoundError when no DirectorateUsers was found.
func (duq *DirectorateUsersQuery) First(ctx context.Context) (*DirectorateUsers, error) {
	nodes, err := duq.Limit(1).All(setContextOp(ctx, duq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{directorateusers.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (duq *DirectorateUsersQuery) FirstX(ctx context.Context) *DirectorateUsers {
	node, err := duq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first DirectorateUsers ID from the query.
// Returns a *NotFoundError when no DirectorateUsers ID was found.
func (duq *DirectorateUsersQuery) FirstID(ctx context.Context) (id int32, err error) {
	var ids []int32
	if ids, err = duq.Limit(1).IDs(setContextOp(ctx, duq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{directorateusers.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (duq *DirectorateUsersQuery) FirstIDX(ctx context.Context) int32 {
	id, err := duq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single DirectorateUsers entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one DirectorateUsers entity is found.
// Returns a *NotFoundError when no DirectorateUsers entities are found.
func (duq *DirectorateUsersQuery) Only(ctx context.Context) (*DirectorateUsers, error) {
	nodes, err := duq.Limit(2).All(setContextOp(ctx, duq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{directorateusers.Label}
	default:
		return nil, &NotSingularError{directorateusers.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (duq *DirectorateUsersQuery) OnlyX(ctx context.Context) *DirectorateUsers {
	node, err := duq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only DirectorateUsers ID in the query.
// Returns a *NotSingularError when more than one DirectorateUsers ID is found.
// Returns a *NotFoundError when no entities are found.
func (duq *DirectorateUsersQuery) OnlyID(ctx context.Context) (id int32, err error) {
	var ids []int32
	if ids, err = duq.Limit(2).IDs(setContextOp(ctx, duq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{directorateusers.Label}
	default:
		err = &NotSingularError{directorateusers.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (duq *DirectorateUsersQuery) OnlyIDX(ctx context.Context) int32 {
	id, err := duq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of DirectorateUsersSlice.
func (duq *DirectorateUsersQuery) All(ctx context.Context) ([]*DirectorateUsers, error) {
	ctx = setContextOp(ctx, duq.ctx, "All")
	if err := duq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*DirectorateUsers, *DirectorateUsersQuery]()
	return withInterceptors[[]*DirectorateUsers](ctx, duq, qr, duq.inters)
}

// AllX is like All, but panics if an error occurs.
func (duq *DirectorateUsersQuery) AllX(ctx context.Context) []*DirectorateUsers {
	nodes, err := duq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of DirectorateUsers IDs.
func (duq *DirectorateUsersQuery) IDs(ctx context.Context) (ids []int32, err error) {
	if duq.ctx.Unique == nil && duq.path != nil {
		duq.Unique(true)
	}
	ctx = setContextOp(ctx, duq.ctx, "IDs")
	if err = duq.Select(directorateusers.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (duq *DirectorateUsersQuery) IDsX(ctx context.Context) []int32 {
	ids, err := duq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (duq *DirectorateUsersQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, duq.ctx, "Count")
	if err := duq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, duq, querierCount[*DirectorateUsersQuery](), duq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (duq *DirectorateUsersQuery) CountX(ctx context.Context) int {
	count, err := duq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (duq *DirectorateUsersQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, duq.ctx, "Exist")
	switch _, err := duq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (duq *DirectorateUsersQuery) ExistX(ctx context.Context) bool {
	exist, err := duq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the DirectorateUsersQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (duq *DirectorateUsersQuery) Clone() *DirectorateUsersQuery {
	if duq == nil {
		return nil
	}
	return &DirectorateUsersQuery{
		config:           duq.config,
		ctx:              duq.ctx.Clone(),
		order:            append([]directorateusers.OrderOption{}, duq.order...),
		inters:           append([]Interceptor{}, duq.inters...),
		predicates:       append([]predicate.DirectorateUsers{}, duq.predicates...),
		withEmployeeUser: duq.withEmployeeUser.Clone(),
		// clone intermediate query.
		sql:  duq.sql.Clone(),
		path: duq.path,
	}
}

// WithEmployeeUser tells the query-builder to eager-load the nodes that are connected to
// the "employee_user" edge. The optional arguments are used to configure the query builder of the edge.
func (duq *DirectorateUsersQuery) WithEmployeeUser(opts ...func(*EmployeesQuery)) *DirectorateUsersQuery {
	query := (&EmployeesClient{config: duq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	duq.withEmployeeUser = query
	return duq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Role string `json:"Role,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.DirectorateUsers.Query().
//		GroupBy(directorateusers.FieldRole).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (duq *DirectorateUsersQuery) GroupBy(field string, fields ...string) *DirectorateUsersGroupBy {
	duq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &DirectorateUsersGroupBy{build: duq}
	grbuild.flds = &duq.ctx.Fields
	grbuild.label = directorateusers.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Role string `json:"Role,omitempty"`
//	}
//
//	client.DirectorateUsers.Query().
//		Select(directorateusers.FieldRole).
//		Scan(ctx, &v)
func (duq *DirectorateUsersQuery) Select(fields ...string) *DirectorateUsersSelect {
	duq.ctx.Fields = append(duq.ctx.Fields, fields...)
	sbuild := &DirectorateUsersSelect{DirectorateUsersQuery: duq}
	sbuild.label = directorateusers.Label
	sbuild.flds, sbuild.scan = &duq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a DirectorateUsersSelect configured with the given aggregations.
func (duq *DirectorateUsersQuery) Aggregate(fns ...AggregateFunc) *DirectorateUsersSelect {
	return duq.Select().Aggregate(fns...)
}

func (duq *DirectorateUsersQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range duq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, duq); err != nil {
				return err
			}
		}
	}
	for _, f := range duq.ctx.Fields {
		if !directorateusers.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if duq.path != nil {
		prev, err := duq.path(ctx)
		if err != nil {
			return err
		}
		duq.sql = prev
	}
	return nil
}

func (duq *DirectorateUsersQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*DirectorateUsers, error) {
	var (
		nodes       = []*DirectorateUsers{}
		_spec       = duq.querySpec()
		loadedTypes = [1]bool{
			duq.withEmployeeUser != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*DirectorateUsers).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &DirectorateUsers{config: duq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, duq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := duq.withEmployeeUser; query != nil {
		if err := duq.loadEmployeeUser(ctx, query, nodes,
			func(n *DirectorateUsers) { n.Edges.EmployeeUser = []*Employees{} },
			func(n *DirectorateUsers, e *Employees) { n.Edges.EmployeeUser = append(n.Edges.EmployeeUser, e) }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (duq *DirectorateUsersQuery) loadEmployeeUser(ctx context.Context, query *EmployeesQuery, nodes []*DirectorateUsers, init func(*DirectorateUsers), assign func(*DirectorateUsers, *Employees)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int32]*DirectorateUsers)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Employees(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(directorateusers.EmployeeUserColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.directorate_users_employee_user
		if fk == nil {
			return fmt.Errorf(`foreign-key "directorate_users_employee_user" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "directorate_users_employee_user" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (duq *DirectorateUsersQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := duq.querySpec()
	_spec.Node.Columns = duq.ctx.Fields
	if len(duq.ctx.Fields) > 0 {
		_spec.Unique = duq.ctx.Unique != nil && *duq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, duq.driver, _spec)
}

func (duq *DirectorateUsersQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(directorateusers.Table, directorateusers.Columns, sqlgraph.NewFieldSpec(directorateusers.FieldID, field.TypeInt32))
	_spec.From = duq.sql
	if unique := duq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if duq.path != nil {
		_spec.Unique = true
	}
	if fields := duq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, directorateusers.FieldID)
		for i := range fields {
			if fields[i] != directorateusers.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := duq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := duq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := duq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := duq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (duq *DirectorateUsersQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(duq.driver.Dialect())
	t1 := builder.Table(directorateusers.Table)
	columns := duq.ctx.Fields
	if len(columns) == 0 {
		columns = directorateusers.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if duq.sql != nil {
		selector = duq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if duq.ctx.Unique != nil && *duq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range duq.predicates {
		p(selector)
	}
	for _, p := range duq.order {
		p(selector)
	}
	if offset := duq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := duq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// DirectorateUsersGroupBy is the group-by builder for DirectorateUsers entities.
type DirectorateUsersGroupBy struct {
	selector
	build *DirectorateUsersQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (dugb *DirectorateUsersGroupBy) Aggregate(fns ...AggregateFunc) *DirectorateUsersGroupBy {
	dugb.fns = append(dugb.fns, fns...)
	return dugb
}

// Scan applies the selector query and scans the result into the given value.
func (dugb *DirectorateUsersGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, dugb.build.ctx, "GroupBy")
	if err := dugb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*DirectorateUsersQuery, *DirectorateUsersGroupBy](ctx, dugb.build, dugb, dugb.build.inters, v)
}

func (dugb *DirectorateUsersGroupBy) sqlScan(ctx context.Context, root *DirectorateUsersQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(dugb.fns))
	for _, fn := range dugb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*dugb.flds)+len(dugb.fns))
		for _, f := range *dugb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*dugb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := dugb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// DirectorateUsersSelect is the builder for selecting fields of DirectorateUsers entities.
type DirectorateUsersSelect struct {
	*DirectorateUsersQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (dus *DirectorateUsersSelect) Aggregate(fns ...AggregateFunc) *DirectorateUsersSelect {
	dus.fns = append(dus.fns, fns...)
	return dus
}

// Scan applies the selector query and scans the result into the given value.
func (dus *DirectorateUsersSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, dus.ctx, "Select")
	if err := dus.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*DirectorateUsersQuery, *DirectorateUsersSelect](ctx, dus.DirectorateUsersQuery, dus, dus.inters, v)
}

func (dus *DirectorateUsersSelect) sqlScan(ctx context.Context, root *DirectorateUsersQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(dus.fns))
	for _, fn := range dus.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*dus.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := dus.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
