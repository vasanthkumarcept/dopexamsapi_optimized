// Code generated by ent, DO NOT EDIT.

package employeemaster

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the employeemaster type in the database.
	Label = "employee_master"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "EmpID"
	// FieldEmployeeID holds the string denoting the employeeid field in the database.
	FieldEmployeeID = "employee_id"
	// FieldEmployeeName holds the string denoting the employeename field in the database.
	FieldEmployeeName = "employee_name"
	// FieldDOB holds the string denoting the dob field in the database.
	FieldDOB = "dob"
	// FieldGender holds the string denoting the gender field in the database.
	FieldGender = "gender"
	// FieldMobileNumber holds the string denoting the mobilenumber field in the database.
	FieldMobileNumber = "mobile_number"
	// FieldEmailID holds the string denoting the emailid field in the database.
	FieldEmailID = "email_id"
	// FieldEmployeeCategoryCode holds the string denoting the employeecategorycode field in the database.
	FieldEmployeeCategoryCode = "employee_category_code"
	// FieldEmployeeCategory holds the string denoting the employeecategory field in the database.
	FieldEmployeeCategory = "employee_category"
	// FieldPostCode holds the string denoting the postcode field in the database.
	FieldPostCode = "post_code"
	// FieldEmployeePost holds the string denoting the employeepost field in the database.
	FieldEmployeePost = "employee_post"
	// FieldFacilityID holds the string denoting the facilityid field in the database.
	FieldFacilityID = "facility_id"
	// FieldOfficeName holds the string denoting the officename field in the database.
	FieldOfficeName = "office_name"
	// FieldControllingAuthorityFacilityId holds the string denoting the controllingauthorityfacilityid field in the database.
	FieldControllingAuthorityFacilityId = "controlling_authority_facility_id"
	// FieldControllingAuthorityName holds the string denoting the controllingauthorityname field in the database.
	FieldControllingAuthorityName = "controlling_authority_name"
	// FieldNodalAuthorityFaciliyId holds the string denoting the nodalauthorityfaciliyid field in the database.
	FieldNodalAuthorityFaciliyId = "nodal_authority_faciliy_id"
	// FieldNodalAuthorityName holds the string denoting the nodalauthorityname field in the database.
	FieldNodalAuthorityName = "nodal_authority_name"
	// FieldPincode holds the string denoting the pincode field in the database.
	FieldPincode = "pincode"
	// FieldCircleFacilityID holds the string denoting the circlefacilityid field in the database.
	FieldCircleFacilityID = "circle_facility_id"
	// FieldStatuss holds the string denoting the statuss field in the database.
	FieldStatuss = "statuss"
	// FieldVerifyStatus holds the string denoting the verifystatus field in the database.
	FieldVerifyStatus = "verify_status"
	// FieldUidToken holds the string denoting the uidtoken field in the database.
	FieldUidToken = "uid_token"
	// FieldCreatedby holds the string denoting the createdby field in the database.
	FieldCreatedby = "createdby"
	// FieldDCCS holds the string denoting the dccs field in the database.
	FieldDCCS = "dccs"
	// FieldCreatedById holds the string denoting the createdbyid field in the database.
	FieldCreatedById = "created_by_id"
	// FieldCreatedByUserName holds the string denoting the createdbyusername field in the database.
	FieldCreatedByUserName = "created_by_user_name"
	// FieldCreatedByEmpId holds the string denoting the createdbyempid field in the database.
	FieldCreatedByEmpId = "created_by_emp_id"
	// FieldCreatedByDesignation holds the string denoting the createdbydesignation field in the database.
	FieldCreatedByDesignation = "created_by_designation"
	// FieldCreatedDate holds the string denoting the createddate field in the database.
	FieldCreatedDate = "created_date"
	// FieldModifiedById holds the string denoting the modifiedbyid field in the database.
	FieldModifiedById = "modified_by_id"
	// FieldModifiedByUserName holds the string denoting the modifiedbyusername field in the database.
	FieldModifiedByUserName = "modified_by_user_name"
	// FieldModifiedByEmpId holds the string denoting the modifiedbyempid field in the database.
	FieldModifiedByEmpId = "modified_by_emp_id"
	// FieldModifiedByDesignantion holds the string denoting the modifiedbydesignantion field in the database.
	FieldModifiedByDesignantion = "modified_by_designantion"
	// FieldModifiedDate holds the string denoting the modifieddate field in the database.
	FieldModifiedDate = "modified_date"
	// FieldDeletedById holds the string denoting the deletedbyid field in the database.
	FieldDeletedById = "deleted_by_id"
	// FieldDeletedByUserName holds the string denoting the deletedbyusername field in the database.
	FieldDeletedByUserName = "deleted_by_user_name"
	// FieldDeletedByEmpId holds the string denoting the deletedbyempid field in the database.
	FieldDeletedByEmpId = "deleted_by_emp_id"
	// FieldDeletedByDesignation holds the string denoting the deletedbydesignation field in the database.
	FieldDeletedByDesignation = "deleted_by_designation"
	// FieldDeletedDate holds the string denoting the deleteddate field in the database.
	FieldDeletedDate = "deleted_date"
	// FieldUpdatedAt holds the string denoting the updatedat field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldUpdatedBy holds the string denoting the updatedby field in the database.
	FieldUpdatedBy = "updated_by"
	// FieldSmsOtp holds the string denoting the smsotp field in the database.
	FieldSmsOtp = "sms_otp"
	// FieldSmsTriggeredTime holds the string denoting the smstriggeredtime field in the database.
	FieldSmsTriggeredTime = "sms_triggered_time"
	// FieldSmsVerifyStatus holds the string denoting the smsverifystatus field in the database.
	FieldSmsVerifyStatus = "sms_verify_status"
	// FieldEmailOtp holds the string denoting the emailotp field in the database.
	FieldEmailOtp = "email_otp"
	// FieldEmailTriggeredTime holds the string denoting the emailtriggeredtime field in the database.
	FieldEmailTriggeredTime = "email_triggered_time"
	// FieldEmailVerifyStatus holds the string denoting the emailverifystatus field in the database.
	FieldEmailVerifyStatus = "email_verify_status"
	// FieldFinalSubmitStatus holds the string denoting the finalsubmitstatus field in the database.
	FieldFinalSubmitStatus = "final_submit_status"
	// FieldDCInPresentCadre holds the string denoting the dcinpresentcadre field in the database.
	FieldDCInPresentCadre = "dc_in_present_cadre"
	// FieldCadre holds the string denoting the cadre field in the database.
	FieldCadre = "cadre"
	// EdgeUsermasterRef holds the string denoting the usermasterref edge name in mutations.
	EdgeUsermasterRef = "UsermasterRef"
	// EdgeEmpRef holds the string denoting the emp_ref edge name in mutations.
	EdgeEmpRef = "Emp_Ref"
	// EdgeLogData holds the string denoting the logdata edge name in mutations.
	EdgeLogData = "LogData"
	// UserMasterFieldID holds the string denoting the ID field of the UserMaster.
	UserMasterFieldID = "UserID"
	// Exam_Applications_PSFieldID holds the string denoting the ID field of the Exam_Applications_PS.
	Exam_Applications_PSFieldID = "ApplicationID"
	// LogsFieldID holds the string denoting the ID field of the Logs.
	LogsFieldID = "ID"
	// Table holds the table name of the employeemaster in the database.
	Table = "EmployeeMaster"
	// UsermasterRefTable is the table that holds the UsermasterRef relation/edge.
	UsermasterRefTable = "UserMaster"
	// UsermasterRefInverseTable is the table name for the UserMaster entity.
	// It exists in this package in order to avoid circular dependency with the "usermaster" package.
	UsermasterRefInverseTable = "UserMaster"
	// UsermasterRefColumn is the table column denoting the UsermasterRef relation/edge.
	UsermasterRefColumn = "employee_master_usermaster_ref"
	// EmpRefTable is the table that holds the Emp_Ref relation/edge.
	EmpRefTable = "Exam_Applications_PS"
	// EmpRefInverseTable is the table name for the Exam_Applications_PS entity.
	// It exists in this package in order to avoid circular dependency with the "exam_applications_ps" package.
	EmpRefInverseTable = "Exam_Applications_PS"
	// EmpRefColumn is the table column denoting the Emp_Ref relation/edge.
	EmpRefColumn = "employee_master_emp_ref"
	// LogDataTable is the table that holds the LogData relation/edge.
	LogDataTable = "LogsTable"
	// LogDataInverseTable is the table name for the Logs entity.
	// It exists in this package in order to avoid circular dependency with the "logs" package.
	LogDataInverseTable = "LogsTable"
	// LogDataColumn is the table column denoting the LogData relation/edge.
	LogDataColumn = "employee_master_log_data"
)

// Columns holds all SQL columns for employeemaster fields.
var Columns = []string{
	FieldID,
	FieldEmployeeID,
	FieldEmployeeName,
	FieldDOB,
	FieldGender,
	FieldMobileNumber,
	FieldEmailID,
	FieldEmployeeCategoryCode,
	FieldEmployeeCategory,
	FieldPostCode,
	FieldEmployeePost,
	FieldFacilityID,
	FieldOfficeName,
	FieldControllingAuthorityFacilityId,
	FieldControllingAuthorityName,
	FieldNodalAuthorityFaciliyId,
	FieldNodalAuthorityName,
	FieldPincode,
	FieldCircleFacilityID,
	FieldStatuss,
	FieldVerifyStatus,
	FieldUidToken,
	FieldCreatedby,
	FieldDCCS,
	FieldCreatedById,
	FieldCreatedByUserName,
	FieldCreatedByEmpId,
	FieldCreatedByDesignation,
	FieldCreatedDate,
	FieldModifiedById,
	FieldModifiedByUserName,
	FieldModifiedByEmpId,
	FieldModifiedByDesignantion,
	FieldModifiedDate,
	FieldDeletedById,
	FieldDeletedByUserName,
	FieldDeletedByEmpId,
	FieldDeletedByDesignation,
	FieldDeletedDate,
	FieldUpdatedAt,
	FieldUpdatedBy,
	FieldSmsOtp,
	FieldSmsTriggeredTime,
	FieldSmsVerifyStatus,
	FieldEmailOtp,
	FieldEmailTriggeredTime,
	FieldEmailVerifyStatus,
	FieldFinalSubmitStatus,
	FieldDCInPresentCadre,
	FieldCadre,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "EmployeeMaster"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"user_master_usermaster_ref",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultEmployeeID holds the default value on creation for the "EmployeeID" field.
	DefaultEmployeeID int64
	// DefaultStatuss holds the default value on creation for the "Statuss" field.
	DefaultStatuss string
	// DefaultVerifyStatus holds the default value on creation for the "VerifyStatus" field.
	DefaultVerifyStatus bool
	// DefaultCreatedById holds the default value on creation for the "CreatedById" field.
	DefaultCreatedById int64
	// DefaultCreatedByEmpId holds the default value on creation for the "CreatedByEmpId" field.
	DefaultCreatedByEmpId int64
	// DefaultModifiedById holds the default value on creation for the "ModifiedById" field.
	DefaultModifiedById int64
	// DefaultModifiedByEmpId holds the default value on creation for the "ModifiedByEmpId" field.
	DefaultModifiedByEmpId int64
	// DefaultDeletedById holds the default value on creation for the "DeletedById" field.
	DefaultDeletedById int64
	// DefaultDeletedByEmpId holds the default value on creation for the "DeletedByEmpId" field.
	DefaultDeletedByEmpId int64
	// DefaultUpdatedBy holds the default value on creation for the "UpdatedBy" field.
	DefaultUpdatedBy string
	// DefaultSmsOtp holds the default value on creation for the "SmsOtp" field.
	DefaultSmsOtp int64
	// DefaultSmsVerifyStatus holds the default value on creation for the "SmsVerifyStatus" field.
	DefaultSmsVerifyStatus bool
	// DefaultEmailOtp holds the default value on creation for the "EmailOtp" field.
	DefaultEmailOtp int64
	// DefaultEmailVerifyStatus holds the default value on creation for the "EmailVerifyStatus" field.
	DefaultEmailVerifyStatus bool
	// DefaultFinalSubmitStatus holds the default value on creation for the "FinalSubmitStatus" field.
	DefaultFinalSubmitStatus bool
)

// OrderOption defines the ordering options for the EmployeeMaster queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByEmployeeID orders the results by the EmployeeID field.
func ByEmployeeID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmployeeID, opts...).ToFunc()
}

// ByEmployeeName orders the results by the EmployeeName field.
func ByEmployeeName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmployeeName, opts...).ToFunc()
}

// ByDOB orders the results by the DOB field.
func ByDOB(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDOB, opts...).ToFunc()
}

// ByGender orders the results by the Gender field.
func ByGender(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGender, opts...).ToFunc()
}

// ByMobileNumber orders the results by the MobileNumber field.
func ByMobileNumber(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMobileNumber, opts...).ToFunc()
}

// ByEmailID orders the results by the EmailID field.
func ByEmailID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmailID, opts...).ToFunc()
}

// ByEmployeeCategoryCode orders the results by the EmployeeCategoryCode field.
func ByEmployeeCategoryCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmployeeCategoryCode, opts...).ToFunc()
}

// ByEmployeeCategory orders the results by the EmployeeCategory field.
func ByEmployeeCategory(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmployeeCategory, opts...).ToFunc()
}

// ByPostCode orders the results by the PostCode field.
func ByPostCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPostCode, opts...).ToFunc()
}

// ByEmployeePost orders the results by the EmployeePost field.
func ByEmployeePost(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmployeePost, opts...).ToFunc()
}

// ByFacilityID orders the results by the FacilityID field.
func ByFacilityID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFacilityID, opts...).ToFunc()
}

// ByOfficeName orders the results by the OfficeName field.
func ByOfficeName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOfficeName, opts...).ToFunc()
}

// ByControllingAuthorityFacilityId orders the results by the ControllingAuthorityFacilityId field.
func ByControllingAuthorityFacilityId(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldControllingAuthorityFacilityId, opts...).ToFunc()
}

// ByControllingAuthorityName orders the results by the ControllingAuthorityName field.
func ByControllingAuthorityName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldControllingAuthorityName, opts...).ToFunc()
}

// ByNodalAuthorityFaciliyId orders the results by the NodalAuthorityFaciliyId field.
func ByNodalAuthorityFaciliyId(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNodalAuthorityFaciliyId, opts...).ToFunc()
}

// ByNodalAuthorityName orders the results by the NodalAuthorityName field.
func ByNodalAuthorityName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNodalAuthorityName, opts...).ToFunc()
}

// ByPincode orders the results by the Pincode field.
func ByPincode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPincode, opts...).ToFunc()
}

// ByCircleFacilityID orders the results by the CircleFacilityID field.
func ByCircleFacilityID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCircleFacilityID, opts...).ToFunc()
}

// ByStatuss orders the results by the Statuss field.
func ByStatuss(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatuss, opts...).ToFunc()
}

// ByVerifyStatus orders the results by the VerifyStatus field.
func ByVerifyStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVerifyStatus, opts...).ToFunc()
}

// ByUidToken orders the results by the UidToken field.
func ByUidToken(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUidToken, opts...).ToFunc()
}

// ByCreatedby orders the results by the Createdby field.
func ByCreatedby(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedby, opts...).ToFunc()
}

// ByDCCS orders the results by the DCCS field.
func ByDCCS(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDCCS, opts...).ToFunc()
}

// ByCreatedById orders the results by the CreatedById field.
func ByCreatedById(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedById, opts...).ToFunc()
}

// ByCreatedByUserName orders the results by the CreatedByUserName field.
func ByCreatedByUserName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedByUserName, opts...).ToFunc()
}

// ByCreatedByEmpId orders the results by the CreatedByEmpId field.
func ByCreatedByEmpId(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedByEmpId, opts...).ToFunc()
}

// ByCreatedByDesignation orders the results by the CreatedByDesignation field.
func ByCreatedByDesignation(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedByDesignation, opts...).ToFunc()
}

// ByCreatedDate orders the results by the CreatedDate field.
func ByCreatedDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedDate, opts...).ToFunc()
}

// ByModifiedById orders the results by the ModifiedById field.
func ByModifiedById(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldModifiedById, opts...).ToFunc()
}

// ByModifiedByUserName orders the results by the ModifiedByUserName field.
func ByModifiedByUserName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldModifiedByUserName, opts...).ToFunc()
}

// ByModifiedByEmpId orders the results by the ModifiedByEmpId field.
func ByModifiedByEmpId(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldModifiedByEmpId, opts...).ToFunc()
}

// ByModifiedByDesignantion orders the results by the ModifiedByDesignantion field.
func ByModifiedByDesignantion(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldModifiedByDesignantion, opts...).ToFunc()
}

// ByModifiedDate orders the results by the ModifiedDate field.
func ByModifiedDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldModifiedDate, opts...).ToFunc()
}

// ByDeletedById orders the results by the DeletedById field.
func ByDeletedById(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedById, opts...).ToFunc()
}

// ByDeletedByUserName orders the results by the DeletedByUserName field.
func ByDeletedByUserName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedByUserName, opts...).ToFunc()
}

// ByDeletedByEmpId orders the results by the DeletedByEmpId field.
func ByDeletedByEmpId(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedByEmpId, opts...).ToFunc()
}

// ByDeletedByDesignation orders the results by the DeletedByDesignation field.
func ByDeletedByDesignation(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedByDesignation, opts...).ToFunc()
}

// ByDeletedDate orders the results by the DeletedDate field.
func ByDeletedDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedDate, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the UpdatedAt field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByUpdatedBy orders the results by the UpdatedBy field.
func ByUpdatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedBy, opts...).ToFunc()
}

// BySmsOtp orders the results by the SmsOtp field.
func BySmsOtp(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSmsOtp, opts...).ToFunc()
}

// BySmsTriggeredTime orders the results by the SmsTriggeredTime field.
func BySmsTriggeredTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSmsTriggeredTime, opts...).ToFunc()
}

// BySmsVerifyStatus orders the results by the SmsVerifyStatus field.
func BySmsVerifyStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSmsVerifyStatus, opts...).ToFunc()
}

// ByEmailOtp orders the results by the EmailOtp field.
func ByEmailOtp(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmailOtp, opts...).ToFunc()
}

// ByEmailTriggeredTime orders the results by the EmailTriggeredTime field.
func ByEmailTriggeredTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmailTriggeredTime, opts...).ToFunc()
}

// ByEmailVerifyStatus orders the results by the EmailVerifyStatus field.
func ByEmailVerifyStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmailVerifyStatus, opts...).ToFunc()
}

// ByFinalSubmitStatus orders the results by the FinalSubmitStatus field.
func ByFinalSubmitStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFinalSubmitStatus, opts...).ToFunc()
}

// ByDCInPresentCadre orders the results by the DCInPresentCadre field.
func ByDCInPresentCadre(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDCInPresentCadre, opts...).ToFunc()
}

// ByCadre orders the results by the Cadre field.
func ByCadre(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCadre, opts...).ToFunc()
}

// ByUsermasterRefCount orders the results by UsermasterRef count.
func ByUsermasterRefCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newUsermasterRefStep(), opts...)
	}
}

// ByUsermasterRef orders the results by UsermasterRef terms.
func ByUsermasterRef(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUsermasterRefStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByEmpRefCount orders the results by Emp_Ref count.
func ByEmpRefCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newEmpRefStep(), opts...)
	}
}

// ByEmpRef orders the results by Emp_Ref terms.
func ByEmpRef(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newEmpRefStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByLogDataCount orders the results by LogData count.
func ByLogDataCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newLogDataStep(), opts...)
	}
}

// ByLogData orders the results by LogData terms.
func ByLogData(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newLogDataStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newUsermasterRefStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UsermasterRefInverseTable, UserMasterFieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, UsermasterRefTable, UsermasterRefColumn),
	)
}
func newEmpRefStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(EmpRefInverseTable, Exam_Applications_PSFieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, EmpRefTable, EmpRefColumn),
	)
}
func newLogDataStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(LogDataInverseTable, LogsFieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, LogDataTable, LogDataColumn),
	)
}
