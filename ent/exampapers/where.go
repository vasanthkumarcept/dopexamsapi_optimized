// Code generated by ent, DO NOT EDIT.

package exampapers

import (
	"recruit/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int32) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int32) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int32) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int32) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int32) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int32) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int32) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int32) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int32) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldLTE(FieldID, id))
}

// PaperDescription applies equality check predicate on the "PaperDescription" field. It's identical to PaperDescriptionEQ.
func PaperDescription(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldEQ(FieldPaperDescription, v))
}

// ExamCode applies equality check predicate on the "ExamCode" field. It's identical to ExamCodeEQ.
func ExamCode(v int32) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldEQ(FieldExamCode, v))
}

// ExamName applies equality check predicate on the "ExamName" field. It's identical to ExamNameEQ.
func ExamName(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldEQ(FieldExamName, v))
}

// ExamShortName applies equality check predicate on the "ExamShortName" field. It's identical to ExamShortNameEQ.
func ExamShortName(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldEQ(FieldExamShortName, v))
}

// PaperTypeCode applies equality check predicate on the "PaperTypeCode" field. It's identical to PaperTypeCodeEQ.
func PaperTypeCode(v int32) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldEQ(FieldPaperTypeCode, v))
}

// PaperTypeName applies equality check predicate on the "PaperTypeName" field. It's identical to PaperTypeNameEQ.
func PaperTypeName(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldEQ(FieldPaperTypeName, v))
}

// CompetitiveQualifying applies equality check predicate on the "CompetitiveQualifying" field. It's identical to CompetitiveQualifyingEQ.
func CompetitiveQualifying(v bool) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldEQ(FieldCompetitiveQualifying, v))
}

// ExceptionForDisability applies equality check predicate on the "ExceptionForDisability" field. It's identical to ExceptionForDisabilityEQ.
func ExceptionForDisability(v bool) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldEQ(FieldExceptionForDisability, v))
}

// MaximumMarks applies equality check predicate on the "MaximumMarks" field. It's identical to MaximumMarksEQ.
func MaximumMarks(v int) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldEQ(FieldMaximumMarks, v))
}

// Duration applies equality check predicate on the "Duration" field. It's identical to DurationEQ.
func Duration(v int) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldEQ(FieldDuration, v))
}

// LocalLanguageAllowedQuestionPaper applies equality check predicate on the "localLanguageAllowedQuestionPaper" field. It's identical to LocalLanguageAllowedQuestionPaperEQ.
func LocalLanguageAllowedQuestionPaper(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldEQ(FieldLocalLanguageAllowedQuestionPaper, v))
}

// LocalLanguageAllowedAnswerPaper applies equality check predicate on the "localLanguageAllowedAnswerPaper" field. It's identical to LocalLanguageAllowedAnswerPaperEQ.
func LocalLanguageAllowedAnswerPaper(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldEQ(FieldLocalLanguageAllowedAnswerPaper, v))
}

// DisabilityTypeID applies equality check predicate on the "DisabilityTypeID" field. It's identical to DisabilityTypeIDEQ.
func DisabilityTypeID(v int32) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldEQ(FieldDisabilityTypeID, v))
}

// FromTime applies equality check predicate on the "fromTime" field. It's identical to FromTimeEQ.
func FromTime(v time.Time) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldEQ(FieldFromTime, v))
}

// ToTime applies equality check predicate on the "toTime" field. It's identical to ToTimeEQ.
func ToTime(v time.Time) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldEQ(FieldToTime, v))
}

// OrderNumber applies equality check predicate on the "OrderNumber" field. It's identical to OrderNumberEQ.
func OrderNumber(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldEQ(FieldOrderNumber, v))
}

// CreatedById applies equality check predicate on the "CreatedById" field. It's identical to CreatedByIdEQ.
func CreatedById(v int64) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldEQ(FieldCreatedById, v))
}

// CreatedByUserName applies equality check predicate on the "CreatedByUserName" field. It's identical to CreatedByUserNameEQ.
func CreatedByUserName(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldEQ(FieldCreatedByUserName, v))
}

// CreatedByEmpId applies equality check predicate on the "CreatedByEmpId" field. It's identical to CreatedByEmpIdEQ.
func CreatedByEmpId(v int64) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldEQ(FieldCreatedByEmpId, v))
}

// CreatedByDesignation applies equality check predicate on the "CreatedByDesignation" field. It's identical to CreatedByDesignationEQ.
func CreatedByDesignation(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldEQ(FieldCreatedByDesignation, v))
}

// CreatedDate applies equality check predicate on the "CreatedDate" field. It's identical to CreatedDateEQ.
func CreatedDate(v time.Time) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldEQ(FieldCreatedDate, v))
}

// Verifiedbyid applies equality check predicate on the "verifiedbyid" field. It's identical to VerifiedbyidEQ.
func Verifiedbyid(v int64) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldEQ(FieldVerifiedbyid, v))
}

// Verifiedbyusername applies equality check predicate on the "verifiedbyusername" field. It's identical to VerifiedbyusernameEQ.
func Verifiedbyusername(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldEQ(FieldVerifiedbyusername, v))
}

// VerifiedbyEmployeeid applies equality check predicate on the "verifiedbyEmployeeid" field. It's identical to VerifiedbyEmployeeidEQ.
func VerifiedbyEmployeeid(v int64) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldEQ(FieldVerifiedbyEmployeeid, v))
}

// VerifiedbyDesignation applies equality check predicate on the "verifiedbyDesignation" field. It's identical to VerifiedbyDesignationEQ.
func VerifiedbyDesignation(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldEQ(FieldVerifiedbyDesignation, v))
}

// VerifiedDate applies equality check predicate on the "verifiedDate" field. It's identical to VerifiedDateEQ.
func VerifiedDate(v time.Time) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldEQ(FieldVerifiedDate, v))
}

// Statuss applies equality check predicate on the "Statuss" field. It's identical to StatussEQ.
func Statuss(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldEQ(FieldStatuss, v))
}

// Deletedbyid applies equality check predicate on the "deletedbyid" field. It's identical to DeletedbyidEQ.
func Deletedbyid(v int64) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldEQ(FieldDeletedbyid, v))
}

// Deletedbyusername applies equality check predicate on the "deletedbyusername" field. It's identical to DeletedbyusernameEQ.
func Deletedbyusername(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldEQ(FieldDeletedbyusername, v))
}

// DeletedbyEmployeeid applies equality check predicate on the "deletedbyEmployeeid" field. It's identical to DeletedbyEmployeeidEQ.
func DeletedbyEmployeeid(v int64) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldEQ(FieldDeletedbyEmployeeid, v))
}

// DeletedbyDesignation applies equality check predicate on the "deletedbyDesignation" field. It's identical to DeletedbyDesignationEQ.
func DeletedbyDesignation(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldEQ(FieldDeletedbyDesignation, v))
}

// DeletedDate applies equality check predicate on the "deletedDate" field. It's identical to DeletedDateEQ.
func DeletedDate(v time.Time) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldEQ(FieldDeletedDate, v))
}

// PaperStatus applies equality check predicate on the "PaperStatus" field. It's identical to PaperStatusEQ.
func PaperStatus(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldEQ(FieldPaperStatus, v))
}

// CalendarCode applies equality check predicate on the "CalendarCode" field. It's identical to CalendarCodeEQ.
func CalendarCode(v int32) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldEQ(FieldCalendarCode, v))
}

// ExamCodePS applies equality check predicate on the "ExamCodePS" field. It's identical to ExamCodePSEQ.
func ExamCodePS(v int32) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldEQ(FieldExamCodePS, v))
}

// CreatedByEmployeeId applies equality check predicate on the "CreatedByEmployeeId" field. It's identical to CreatedByEmployeeIdEQ.
func CreatedByEmployeeId(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldEQ(FieldCreatedByEmployeeId, v))
}

// PaperDescriptionEQ applies the EQ predicate on the "PaperDescription" field.
func PaperDescriptionEQ(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldEQ(FieldPaperDescription, v))
}

// PaperDescriptionNEQ applies the NEQ predicate on the "PaperDescription" field.
func PaperDescriptionNEQ(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldNEQ(FieldPaperDescription, v))
}

// PaperDescriptionIn applies the In predicate on the "PaperDescription" field.
func PaperDescriptionIn(vs ...string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldIn(FieldPaperDescription, vs...))
}

// PaperDescriptionNotIn applies the NotIn predicate on the "PaperDescription" field.
func PaperDescriptionNotIn(vs ...string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldNotIn(FieldPaperDescription, vs...))
}

// PaperDescriptionGT applies the GT predicate on the "PaperDescription" field.
func PaperDescriptionGT(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldGT(FieldPaperDescription, v))
}

// PaperDescriptionGTE applies the GTE predicate on the "PaperDescription" field.
func PaperDescriptionGTE(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldGTE(FieldPaperDescription, v))
}

// PaperDescriptionLT applies the LT predicate on the "PaperDescription" field.
func PaperDescriptionLT(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldLT(FieldPaperDescription, v))
}

// PaperDescriptionLTE applies the LTE predicate on the "PaperDescription" field.
func PaperDescriptionLTE(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldLTE(FieldPaperDescription, v))
}

// PaperDescriptionContains applies the Contains predicate on the "PaperDescription" field.
func PaperDescriptionContains(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldContains(FieldPaperDescription, v))
}

// PaperDescriptionHasPrefix applies the HasPrefix predicate on the "PaperDescription" field.
func PaperDescriptionHasPrefix(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldHasPrefix(FieldPaperDescription, v))
}

// PaperDescriptionHasSuffix applies the HasSuffix predicate on the "PaperDescription" field.
func PaperDescriptionHasSuffix(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldHasSuffix(FieldPaperDescription, v))
}

// PaperDescriptionEqualFold applies the EqualFold predicate on the "PaperDescription" field.
func PaperDescriptionEqualFold(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldEqualFold(FieldPaperDescription, v))
}

// PaperDescriptionContainsFold applies the ContainsFold predicate on the "PaperDescription" field.
func PaperDescriptionContainsFold(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldContainsFold(FieldPaperDescription, v))
}

// ExamCodeEQ applies the EQ predicate on the "ExamCode" field.
func ExamCodeEQ(v int32) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldEQ(FieldExamCode, v))
}

// ExamCodeNEQ applies the NEQ predicate on the "ExamCode" field.
func ExamCodeNEQ(v int32) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldNEQ(FieldExamCode, v))
}

// ExamCodeIn applies the In predicate on the "ExamCode" field.
func ExamCodeIn(vs ...int32) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldIn(FieldExamCode, vs...))
}

// ExamCodeNotIn applies the NotIn predicate on the "ExamCode" field.
func ExamCodeNotIn(vs ...int32) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldNotIn(FieldExamCode, vs...))
}

// ExamCodeGT applies the GT predicate on the "ExamCode" field.
func ExamCodeGT(v int32) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldGT(FieldExamCode, v))
}

// ExamCodeGTE applies the GTE predicate on the "ExamCode" field.
func ExamCodeGTE(v int32) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldGTE(FieldExamCode, v))
}

// ExamCodeLT applies the LT predicate on the "ExamCode" field.
func ExamCodeLT(v int32) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldLT(FieldExamCode, v))
}

// ExamCodeLTE applies the LTE predicate on the "ExamCode" field.
func ExamCodeLTE(v int32) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldLTE(FieldExamCode, v))
}

// ExamCodeIsNil applies the IsNil predicate on the "ExamCode" field.
func ExamCodeIsNil() predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldIsNull(FieldExamCode))
}

// ExamCodeNotNil applies the NotNil predicate on the "ExamCode" field.
func ExamCodeNotNil() predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldNotNull(FieldExamCode))
}

// ExamNameEQ applies the EQ predicate on the "ExamName" field.
func ExamNameEQ(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldEQ(FieldExamName, v))
}

// ExamNameNEQ applies the NEQ predicate on the "ExamName" field.
func ExamNameNEQ(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldNEQ(FieldExamName, v))
}

// ExamNameIn applies the In predicate on the "ExamName" field.
func ExamNameIn(vs ...string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldIn(FieldExamName, vs...))
}

// ExamNameNotIn applies the NotIn predicate on the "ExamName" field.
func ExamNameNotIn(vs ...string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldNotIn(FieldExamName, vs...))
}

// ExamNameGT applies the GT predicate on the "ExamName" field.
func ExamNameGT(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldGT(FieldExamName, v))
}

// ExamNameGTE applies the GTE predicate on the "ExamName" field.
func ExamNameGTE(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldGTE(FieldExamName, v))
}

// ExamNameLT applies the LT predicate on the "ExamName" field.
func ExamNameLT(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldLT(FieldExamName, v))
}

// ExamNameLTE applies the LTE predicate on the "ExamName" field.
func ExamNameLTE(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldLTE(FieldExamName, v))
}

// ExamNameContains applies the Contains predicate on the "ExamName" field.
func ExamNameContains(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldContains(FieldExamName, v))
}

// ExamNameHasPrefix applies the HasPrefix predicate on the "ExamName" field.
func ExamNameHasPrefix(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldHasPrefix(FieldExamName, v))
}

// ExamNameHasSuffix applies the HasSuffix predicate on the "ExamName" field.
func ExamNameHasSuffix(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldHasSuffix(FieldExamName, v))
}

// ExamNameIsNil applies the IsNil predicate on the "ExamName" field.
func ExamNameIsNil() predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldIsNull(FieldExamName))
}

// ExamNameNotNil applies the NotNil predicate on the "ExamName" field.
func ExamNameNotNil() predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldNotNull(FieldExamName))
}

// ExamNameEqualFold applies the EqualFold predicate on the "ExamName" field.
func ExamNameEqualFold(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldEqualFold(FieldExamName, v))
}

// ExamNameContainsFold applies the ContainsFold predicate on the "ExamName" field.
func ExamNameContainsFold(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldContainsFold(FieldExamName, v))
}

// ExamShortNameEQ applies the EQ predicate on the "ExamShortName" field.
func ExamShortNameEQ(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldEQ(FieldExamShortName, v))
}

// ExamShortNameNEQ applies the NEQ predicate on the "ExamShortName" field.
func ExamShortNameNEQ(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldNEQ(FieldExamShortName, v))
}

// ExamShortNameIn applies the In predicate on the "ExamShortName" field.
func ExamShortNameIn(vs ...string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldIn(FieldExamShortName, vs...))
}

// ExamShortNameNotIn applies the NotIn predicate on the "ExamShortName" field.
func ExamShortNameNotIn(vs ...string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldNotIn(FieldExamShortName, vs...))
}

// ExamShortNameGT applies the GT predicate on the "ExamShortName" field.
func ExamShortNameGT(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldGT(FieldExamShortName, v))
}

// ExamShortNameGTE applies the GTE predicate on the "ExamShortName" field.
func ExamShortNameGTE(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldGTE(FieldExamShortName, v))
}

// ExamShortNameLT applies the LT predicate on the "ExamShortName" field.
func ExamShortNameLT(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldLT(FieldExamShortName, v))
}

// ExamShortNameLTE applies the LTE predicate on the "ExamShortName" field.
func ExamShortNameLTE(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldLTE(FieldExamShortName, v))
}

// ExamShortNameContains applies the Contains predicate on the "ExamShortName" field.
func ExamShortNameContains(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldContains(FieldExamShortName, v))
}

// ExamShortNameHasPrefix applies the HasPrefix predicate on the "ExamShortName" field.
func ExamShortNameHasPrefix(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldHasPrefix(FieldExamShortName, v))
}

// ExamShortNameHasSuffix applies the HasSuffix predicate on the "ExamShortName" field.
func ExamShortNameHasSuffix(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldHasSuffix(FieldExamShortName, v))
}

// ExamShortNameIsNil applies the IsNil predicate on the "ExamShortName" field.
func ExamShortNameIsNil() predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldIsNull(FieldExamShortName))
}

// ExamShortNameNotNil applies the NotNil predicate on the "ExamShortName" field.
func ExamShortNameNotNil() predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldNotNull(FieldExamShortName))
}

// ExamShortNameEqualFold applies the EqualFold predicate on the "ExamShortName" field.
func ExamShortNameEqualFold(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldEqualFold(FieldExamShortName, v))
}

// ExamShortNameContainsFold applies the ContainsFold predicate on the "ExamShortName" field.
func ExamShortNameContainsFold(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldContainsFold(FieldExamShortName, v))
}

// PaperTypeCodeEQ applies the EQ predicate on the "PaperTypeCode" field.
func PaperTypeCodeEQ(v int32) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldEQ(FieldPaperTypeCode, v))
}

// PaperTypeCodeNEQ applies the NEQ predicate on the "PaperTypeCode" field.
func PaperTypeCodeNEQ(v int32) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldNEQ(FieldPaperTypeCode, v))
}

// PaperTypeCodeIn applies the In predicate on the "PaperTypeCode" field.
func PaperTypeCodeIn(vs ...int32) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldIn(FieldPaperTypeCode, vs...))
}

// PaperTypeCodeNotIn applies the NotIn predicate on the "PaperTypeCode" field.
func PaperTypeCodeNotIn(vs ...int32) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldNotIn(FieldPaperTypeCode, vs...))
}

// PaperTypeCodeGT applies the GT predicate on the "PaperTypeCode" field.
func PaperTypeCodeGT(v int32) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldGT(FieldPaperTypeCode, v))
}

// PaperTypeCodeGTE applies the GTE predicate on the "PaperTypeCode" field.
func PaperTypeCodeGTE(v int32) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldGTE(FieldPaperTypeCode, v))
}

// PaperTypeCodeLT applies the LT predicate on the "PaperTypeCode" field.
func PaperTypeCodeLT(v int32) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldLT(FieldPaperTypeCode, v))
}

// PaperTypeCodeLTE applies the LTE predicate on the "PaperTypeCode" field.
func PaperTypeCodeLTE(v int32) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldLTE(FieldPaperTypeCode, v))
}

// PaperTypeCodeIsNil applies the IsNil predicate on the "PaperTypeCode" field.
func PaperTypeCodeIsNil() predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldIsNull(FieldPaperTypeCode))
}

// PaperTypeCodeNotNil applies the NotNil predicate on the "PaperTypeCode" field.
func PaperTypeCodeNotNil() predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldNotNull(FieldPaperTypeCode))
}

// PaperTypeNameEQ applies the EQ predicate on the "PaperTypeName" field.
func PaperTypeNameEQ(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldEQ(FieldPaperTypeName, v))
}

// PaperTypeNameNEQ applies the NEQ predicate on the "PaperTypeName" field.
func PaperTypeNameNEQ(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldNEQ(FieldPaperTypeName, v))
}

// PaperTypeNameIn applies the In predicate on the "PaperTypeName" field.
func PaperTypeNameIn(vs ...string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldIn(FieldPaperTypeName, vs...))
}

// PaperTypeNameNotIn applies the NotIn predicate on the "PaperTypeName" field.
func PaperTypeNameNotIn(vs ...string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldNotIn(FieldPaperTypeName, vs...))
}

// PaperTypeNameGT applies the GT predicate on the "PaperTypeName" field.
func PaperTypeNameGT(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldGT(FieldPaperTypeName, v))
}

// PaperTypeNameGTE applies the GTE predicate on the "PaperTypeName" field.
func PaperTypeNameGTE(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldGTE(FieldPaperTypeName, v))
}

// PaperTypeNameLT applies the LT predicate on the "PaperTypeName" field.
func PaperTypeNameLT(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldLT(FieldPaperTypeName, v))
}

// PaperTypeNameLTE applies the LTE predicate on the "PaperTypeName" field.
func PaperTypeNameLTE(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldLTE(FieldPaperTypeName, v))
}

// PaperTypeNameContains applies the Contains predicate on the "PaperTypeName" field.
func PaperTypeNameContains(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldContains(FieldPaperTypeName, v))
}

// PaperTypeNameHasPrefix applies the HasPrefix predicate on the "PaperTypeName" field.
func PaperTypeNameHasPrefix(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldHasPrefix(FieldPaperTypeName, v))
}

// PaperTypeNameHasSuffix applies the HasSuffix predicate on the "PaperTypeName" field.
func PaperTypeNameHasSuffix(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldHasSuffix(FieldPaperTypeName, v))
}

// PaperTypeNameIsNil applies the IsNil predicate on the "PaperTypeName" field.
func PaperTypeNameIsNil() predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldIsNull(FieldPaperTypeName))
}

// PaperTypeNameNotNil applies the NotNil predicate on the "PaperTypeName" field.
func PaperTypeNameNotNil() predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldNotNull(FieldPaperTypeName))
}

// PaperTypeNameEqualFold applies the EqualFold predicate on the "PaperTypeName" field.
func PaperTypeNameEqualFold(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldEqualFold(FieldPaperTypeName, v))
}

// PaperTypeNameContainsFold applies the ContainsFold predicate on the "PaperTypeName" field.
func PaperTypeNameContainsFold(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldContainsFold(FieldPaperTypeName, v))
}

// CompetitiveQualifyingEQ applies the EQ predicate on the "CompetitiveQualifying" field.
func CompetitiveQualifyingEQ(v bool) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldEQ(FieldCompetitiveQualifying, v))
}

// CompetitiveQualifyingNEQ applies the NEQ predicate on the "CompetitiveQualifying" field.
func CompetitiveQualifyingNEQ(v bool) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldNEQ(FieldCompetitiveQualifying, v))
}

// ExceptionForDisabilityEQ applies the EQ predicate on the "ExceptionForDisability" field.
func ExceptionForDisabilityEQ(v bool) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldEQ(FieldExceptionForDisability, v))
}

// ExceptionForDisabilityNEQ applies the NEQ predicate on the "ExceptionForDisability" field.
func ExceptionForDisabilityNEQ(v bool) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldNEQ(FieldExceptionForDisability, v))
}

// MaximumMarksEQ applies the EQ predicate on the "MaximumMarks" field.
func MaximumMarksEQ(v int) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldEQ(FieldMaximumMarks, v))
}

// MaximumMarksNEQ applies the NEQ predicate on the "MaximumMarks" field.
func MaximumMarksNEQ(v int) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldNEQ(FieldMaximumMarks, v))
}

// MaximumMarksIn applies the In predicate on the "MaximumMarks" field.
func MaximumMarksIn(vs ...int) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldIn(FieldMaximumMarks, vs...))
}

// MaximumMarksNotIn applies the NotIn predicate on the "MaximumMarks" field.
func MaximumMarksNotIn(vs ...int) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldNotIn(FieldMaximumMarks, vs...))
}

// MaximumMarksGT applies the GT predicate on the "MaximumMarks" field.
func MaximumMarksGT(v int) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldGT(FieldMaximumMarks, v))
}

// MaximumMarksGTE applies the GTE predicate on the "MaximumMarks" field.
func MaximumMarksGTE(v int) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldGTE(FieldMaximumMarks, v))
}

// MaximumMarksLT applies the LT predicate on the "MaximumMarks" field.
func MaximumMarksLT(v int) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldLT(FieldMaximumMarks, v))
}

// MaximumMarksLTE applies the LTE predicate on the "MaximumMarks" field.
func MaximumMarksLTE(v int) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldLTE(FieldMaximumMarks, v))
}

// DurationEQ applies the EQ predicate on the "Duration" field.
func DurationEQ(v int) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldEQ(FieldDuration, v))
}

// DurationNEQ applies the NEQ predicate on the "Duration" field.
func DurationNEQ(v int) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldNEQ(FieldDuration, v))
}

// DurationIn applies the In predicate on the "Duration" field.
func DurationIn(vs ...int) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldIn(FieldDuration, vs...))
}

// DurationNotIn applies the NotIn predicate on the "Duration" field.
func DurationNotIn(vs ...int) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldNotIn(FieldDuration, vs...))
}

// DurationGT applies the GT predicate on the "Duration" field.
func DurationGT(v int) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldGT(FieldDuration, v))
}

// DurationGTE applies the GTE predicate on the "Duration" field.
func DurationGTE(v int) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldGTE(FieldDuration, v))
}

// DurationLT applies the LT predicate on the "Duration" field.
func DurationLT(v int) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldLT(FieldDuration, v))
}

// DurationLTE applies the LTE predicate on the "Duration" field.
func DurationLTE(v int) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldLTE(FieldDuration, v))
}

// LocalLanguageAllowedQuestionPaperEQ applies the EQ predicate on the "localLanguageAllowedQuestionPaper" field.
func LocalLanguageAllowedQuestionPaperEQ(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldEQ(FieldLocalLanguageAllowedQuestionPaper, v))
}

// LocalLanguageAllowedQuestionPaperNEQ applies the NEQ predicate on the "localLanguageAllowedQuestionPaper" field.
func LocalLanguageAllowedQuestionPaperNEQ(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldNEQ(FieldLocalLanguageAllowedQuestionPaper, v))
}

// LocalLanguageAllowedQuestionPaperIn applies the In predicate on the "localLanguageAllowedQuestionPaper" field.
func LocalLanguageAllowedQuestionPaperIn(vs ...string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldIn(FieldLocalLanguageAllowedQuestionPaper, vs...))
}

// LocalLanguageAllowedQuestionPaperNotIn applies the NotIn predicate on the "localLanguageAllowedQuestionPaper" field.
func LocalLanguageAllowedQuestionPaperNotIn(vs ...string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldNotIn(FieldLocalLanguageAllowedQuestionPaper, vs...))
}

// LocalLanguageAllowedQuestionPaperGT applies the GT predicate on the "localLanguageAllowedQuestionPaper" field.
func LocalLanguageAllowedQuestionPaperGT(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldGT(FieldLocalLanguageAllowedQuestionPaper, v))
}

// LocalLanguageAllowedQuestionPaperGTE applies the GTE predicate on the "localLanguageAllowedQuestionPaper" field.
func LocalLanguageAllowedQuestionPaperGTE(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldGTE(FieldLocalLanguageAllowedQuestionPaper, v))
}

// LocalLanguageAllowedQuestionPaperLT applies the LT predicate on the "localLanguageAllowedQuestionPaper" field.
func LocalLanguageAllowedQuestionPaperLT(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldLT(FieldLocalLanguageAllowedQuestionPaper, v))
}

// LocalLanguageAllowedQuestionPaperLTE applies the LTE predicate on the "localLanguageAllowedQuestionPaper" field.
func LocalLanguageAllowedQuestionPaperLTE(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldLTE(FieldLocalLanguageAllowedQuestionPaper, v))
}

// LocalLanguageAllowedQuestionPaperContains applies the Contains predicate on the "localLanguageAllowedQuestionPaper" field.
func LocalLanguageAllowedQuestionPaperContains(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldContains(FieldLocalLanguageAllowedQuestionPaper, v))
}

// LocalLanguageAllowedQuestionPaperHasPrefix applies the HasPrefix predicate on the "localLanguageAllowedQuestionPaper" field.
func LocalLanguageAllowedQuestionPaperHasPrefix(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldHasPrefix(FieldLocalLanguageAllowedQuestionPaper, v))
}

// LocalLanguageAllowedQuestionPaperHasSuffix applies the HasSuffix predicate on the "localLanguageAllowedQuestionPaper" field.
func LocalLanguageAllowedQuestionPaperHasSuffix(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldHasSuffix(FieldLocalLanguageAllowedQuestionPaper, v))
}

// LocalLanguageAllowedQuestionPaperEqualFold applies the EqualFold predicate on the "localLanguageAllowedQuestionPaper" field.
func LocalLanguageAllowedQuestionPaperEqualFold(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldEqualFold(FieldLocalLanguageAllowedQuestionPaper, v))
}

// LocalLanguageAllowedQuestionPaperContainsFold applies the ContainsFold predicate on the "localLanguageAllowedQuestionPaper" field.
func LocalLanguageAllowedQuestionPaperContainsFold(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldContainsFold(FieldLocalLanguageAllowedQuestionPaper, v))
}

// LocalLanguageAllowedAnswerPaperEQ applies the EQ predicate on the "localLanguageAllowedAnswerPaper" field.
func LocalLanguageAllowedAnswerPaperEQ(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldEQ(FieldLocalLanguageAllowedAnswerPaper, v))
}

// LocalLanguageAllowedAnswerPaperNEQ applies the NEQ predicate on the "localLanguageAllowedAnswerPaper" field.
func LocalLanguageAllowedAnswerPaperNEQ(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldNEQ(FieldLocalLanguageAllowedAnswerPaper, v))
}

// LocalLanguageAllowedAnswerPaperIn applies the In predicate on the "localLanguageAllowedAnswerPaper" field.
func LocalLanguageAllowedAnswerPaperIn(vs ...string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldIn(FieldLocalLanguageAllowedAnswerPaper, vs...))
}

// LocalLanguageAllowedAnswerPaperNotIn applies the NotIn predicate on the "localLanguageAllowedAnswerPaper" field.
func LocalLanguageAllowedAnswerPaperNotIn(vs ...string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldNotIn(FieldLocalLanguageAllowedAnswerPaper, vs...))
}

// LocalLanguageAllowedAnswerPaperGT applies the GT predicate on the "localLanguageAllowedAnswerPaper" field.
func LocalLanguageAllowedAnswerPaperGT(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldGT(FieldLocalLanguageAllowedAnswerPaper, v))
}

// LocalLanguageAllowedAnswerPaperGTE applies the GTE predicate on the "localLanguageAllowedAnswerPaper" field.
func LocalLanguageAllowedAnswerPaperGTE(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldGTE(FieldLocalLanguageAllowedAnswerPaper, v))
}

// LocalLanguageAllowedAnswerPaperLT applies the LT predicate on the "localLanguageAllowedAnswerPaper" field.
func LocalLanguageAllowedAnswerPaperLT(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldLT(FieldLocalLanguageAllowedAnswerPaper, v))
}

// LocalLanguageAllowedAnswerPaperLTE applies the LTE predicate on the "localLanguageAllowedAnswerPaper" field.
func LocalLanguageAllowedAnswerPaperLTE(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldLTE(FieldLocalLanguageAllowedAnswerPaper, v))
}

// LocalLanguageAllowedAnswerPaperContains applies the Contains predicate on the "localLanguageAllowedAnswerPaper" field.
func LocalLanguageAllowedAnswerPaperContains(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldContains(FieldLocalLanguageAllowedAnswerPaper, v))
}

// LocalLanguageAllowedAnswerPaperHasPrefix applies the HasPrefix predicate on the "localLanguageAllowedAnswerPaper" field.
func LocalLanguageAllowedAnswerPaperHasPrefix(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldHasPrefix(FieldLocalLanguageAllowedAnswerPaper, v))
}

// LocalLanguageAllowedAnswerPaperHasSuffix applies the HasSuffix predicate on the "localLanguageAllowedAnswerPaper" field.
func LocalLanguageAllowedAnswerPaperHasSuffix(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldHasSuffix(FieldLocalLanguageAllowedAnswerPaper, v))
}

// LocalLanguageAllowedAnswerPaperEqualFold applies the EqualFold predicate on the "localLanguageAllowedAnswerPaper" field.
func LocalLanguageAllowedAnswerPaperEqualFold(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldEqualFold(FieldLocalLanguageAllowedAnswerPaper, v))
}

// LocalLanguageAllowedAnswerPaperContainsFold applies the ContainsFold predicate on the "localLanguageAllowedAnswerPaper" field.
func LocalLanguageAllowedAnswerPaperContainsFold(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldContainsFold(FieldLocalLanguageAllowedAnswerPaper, v))
}

// DisabilityTypeIDEQ applies the EQ predicate on the "DisabilityTypeID" field.
func DisabilityTypeIDEQ(v int32) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldEQ(FieldDisabilityTypeID, v))
}

// DisabilityTypeIDNEQ applies the NEQ predicate on the "DisabilityTypeID" field.
func DisabilityTypeIDNEQ(v int32) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldNEQ(FieldDisabilityTypeID, v))
}

// DisabilityTypeIDIn applies the In predicate on the "DisabilityTypeID" field.
func DisabilityTypeIDIn(vs ...int32) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldIn(FieldDisabilityTypeID, vs...))
}

// DisabilityTypeIDNotIn applies the NotIn predicate on the "DisabilityTypeID" field.
func DisabilityTypeIDNotIn(vs ...int32) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldNotIn(FieldDisabilityTypeID, vs...))
}

// DisabilityTypeIDGT applies the GT predicate on the "DisabilityTypeID" field.
func DisabilityTypeIDGT(v int32) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldGT(FieldDisabilityTypeID, v))
}

// DisabilityTypeIDGTE applies the GTE predicate on the "DisabilityTypeID" field.
func DisabilityTypeIDGTE(v int32) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldGTE(FieldDisabilityTypeID, v))
}

// DisabilityTypeIDLT applies the LT predicate on the "DisabilityTypeID" field.
func DisabilityTypeIDLT(v int32) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldLT(FieldDisabilityTypeID, v))
}

// DisabilityTypeIDLTE applies the LTE predicate on the "DisabilityTypeID" field.
func DisabilityTypeIDLTE(v int32) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldLTE(FieldDisabilityTypeID, v))
}

// DisabilityTypeIDIsNil applies the IsNil predicate on the "DisabilityTypeID" field.
func DisabilityTypeIDIsNil() predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldIsNull(FieldDisabilityTypeID))
}

// DisabilityTypeIDNotNil applies the NotNil predicate on the "DisabilityTypeID" field.
func DisabilityTypeIDNotNil() predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldNotNull(FieldDisabilityTypeID))
}

// FromTimeEQ applies the EQ predicate on the "fromTime" field.
func FromTimeEQ(v time.Time) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldEQ(FieldFromTime, v))
}

// FromTimeNEQ applies the NEQ predicate on the "fromTime" field.
func FromTimeNEQ(v time.Time) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldNEQ(FieldFromTime, v))
}

// FromTimeIn applies the In predicate on the "fromTime" field.
func FromTimeIn(vs ...time.Time) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldIn(FieldFromTime, vs...))
}

// FromTimeNotIn applies the NotIn predicate on the "fromTime" field.
func FromTimeNotIn(vs ...time.Time) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldNotIn(FieldFromTime, vs...))
}

// FromTimeGT applies the GT predicate on the "fromTime" field.
func FromTimeGT(v time.Time) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldGT(FieldFromTime, v))
}

// FromTimeGTE applies the GTE predicate on the "fromTime" field.
func FromTimeGTE(v time.Time) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldGTE(FieldFromTime, v))
}

// FromTimeLT applies the LT predicate on the "fromTime" field.
func FromTimeLT(v time.Time) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldLT(FieldFromTime, v))
}

// FromTimeLTE applies the LTE predicate on the "fromTime" field.
func FromTimeLTE(v time.Time) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldLTE(FieldFromTime, v))
}

// FromTimeIsNil applies the IsNil predicate on the "fromTime" field.
func FromTimeIsNil() predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldIsNull(FieldFromTime))
}

// FromTimeNotNil applies the NotNil predicate on the "fromTime" field.
func FromTimeNotNil() predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldNotNull(FieldFromTime))
}

// ToTimeEQ applies the EQ predicate on the "toTime" field.
func ToTimeEQ(v time.Time) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldEQ(FieldToTime, v))
}

// ToTimeNEQ applies the NEQ predicate on the "toTime" field.
func ToTimeNEQ(v time.Time) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldNEQ(FieldToTime, v))
}

// ToTimeIn applies the In predicate on the "toTime" field.
func ToTimeIn(vs ...time.Time) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldIn(FieldToTime, vs...))
}

// ToTimeNotIn applies the NotIn predicate on the "toTime" field.
func ToTimeNotIn(vs ...time.Time) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldNotIn(FieldToTime, vs...))
}

// ToTimeGT applies the GT predicate on the "toTime" field.
func ToTimeGT(v time.Time) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldGT(FieldToTime, v))
}

// ToTimeGTE applies the GTE predicate on the "toTime" field.
func ToTimeGTE(v time.Time) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldGTE(FieldToTime, v))
}

// ToTimeLT applies the LT predicate on the "toTime" field.
func ToTimeLT(v time.Time) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldLT(FieldToTime, v))
}

// ToTimeLTE applies the LTE predicate on the "toTime" field.
func ToTimeLTE(v time.Time) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldLTE(FieldToTime, v))
}

// ToTimeIsNil applies the IsNil predicate on the "toTime" field.
func ToTimeIsNil() predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldIsNull(FieldToTime))
}

// ToTimeNotNil applies the NotNil predicate on the "toTime" field.
func ToTimeNotNil() predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldNotNull(FieldToTime))
}

// OrderNumberEQ applies the EQ predicate on the "OrderNumber" field.
func OrderNumberEQ(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldEQ(FieldOrderNumber, v))
}

// OrderNumberNEQ applies the NEQ predicate on the "OrderNumber" field.
func OrderNumberNEQ(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldNEQ(FieldOrderNumber, v))
}

// OrderNumberIn applies the In predicate on the "OrderNumber" field.
func OrderNumberIn(vs ...string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldIn(FieldOrderNumber, vs...))
}

// OrderNumberNotIn applies the NotIn predicate on the "OrderNumber" field.
func OrderNumberNotIn(vs ...string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldNotIn(FieldOrderNumber, vs...))
}

// OrderNumberGT applies the GT predicate on the "OrderNumber" field.
func OrderNumberGT(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldGT(FieldOrderNumber, v))
}

// OrderNumberGTE applies the GTE predicate on the "OrderNumber" field.
func OrderNumberGTE(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldGTE(FieldOrderNumber, v))
}

// OrderNumberLT applies the LT predicate on the "OrderNumber" field.
func OrderNumberLT(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldLT(FieldOrderNumber, v))
}

// OrderNumberLTE applies the LTE predicate on the "OrderNumber" field.
func OrderNumberLTE(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldLTE(FieldOrderNumber, v))
}

// OrderNumberContains applies the Contains predicate on the "OrderNumber" field.
func OrderNumberContains(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldContains(FieldOrderNumber, v))
}

// OrderNumberHasPrefix applies the HasPrefix predicate on the "OrderNumber" field.
func OrderNumberHasPrefix(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldHasPrefix(FieldOrderNumber, v))
}

// OrderNumberHasSuffix applies the HasSuffix predicate on the "OrderNumber" field.
func OrderNumberHasSuffix(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldHasSuffix(FieldOrderNumber, v))
}

// OrderNumberIsNil applies the IsNil predicate on the "OrderNumber" field.
func OrderNumberIsNil() predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldIsNull(FieldOrderNumber))
}

// OrderNumberNotNil applies the NotNil predicate on the "OrderNumber" field.
func OrderNumberNotNil() predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldNotNull(FieldOrderNumber))
}

// OrderNumberEqualFold applies the EqualFold predicate on the "OrderNumber" field.
func OrderNumberEqualFold(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldEqualFold(FieldOrderNumber, v))
}

// OrderNumberContainsFold applies the ContainsFold predicate on the "OrderNumber" field.
func OrderNumberContainsFold(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldContainsFold(FieldOrderNumber, v))
}

// CreatedByIdEQ applies the EQ predicate on the "CreatedById" field.
func CreatedByIdEQ(v int64) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldEQ(FieldCreatedById, v))
}

// CreatedByIdNEQ applies the NEQ predicate on the "CreatedById" field.
func CreatedByIdNEQ(v int64) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldNEQ(FieldCreatedById, v))
}

// CreatedByIdIn applies the In predicate on the "CreatedById" field.
func CreatedByIdIn(vs ...int64) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldIn(FieldCreatedById, vs...))
}

// CreatedByIdNotIn applies the NotIn predicate on the "CreatedById" field.
func CreatedByIdNotIn(vs ...int64) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldNotIn(FieldCreatedById, vs...))
}

// CreatedByIdGT applies the GT predicate on the "CreatedById" field.
func CreatedByIdGT(v int64) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldGT(FieldCreatedById, v))
}

// CreatedByIdGTE applies the GTE predicate on the "CreatedById" field.
func CreatedByIdGTE(v int64) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldGTE(FieldCreatedById, v))
}

// CreatedByIdLT applies the LT predicate on the "CreatedById" field.
func CreatedByIdLT(v int64) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldLT(FieldCreatedById, v))
}

// CreatedByIdLTE applies the LTE predicate on the "CreatedById" field.
func CreatedByIdLTE(v int64) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldLTE(FieldCreatedById, v))
}

// CreatedByIdIsNil applies the IsNil predicate on the "CreatedById" field.
func CreatedByIdIsNil() predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldIsNull(FieldCreatedById))
}

// CreatedByIdNotNil applies the NotNil predicate on the "CreatedById" field.
func CreatedByIdNotNil() predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldNotNull(FieldCreatedById))
}

// CreatedByUserNameEQ applies the EQ predicate on the "CreatedByUserName" field.
func CreatedByUserNameEQ(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldEQ(FieldCreatedByUserName, v))
}

// CreatedByUserNameNEQ applies the NEQ predicate on the "CreatedByUserName" field.
func CreatedByUserNameNEQ(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldNEQ(FieldCreatedByUserName, v))
}

// CreatedByUserNameIn applies the In predicate on the "CreatedByUserName" field.
func CreatedByUserNameIn(vs ...string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldIn(FieldCreatedByUserName, vs...))
}

// CreatedByUserNameNotIn applies the NotIn predicate on the "CreatedByUserName" field.
func CreatedByUserNameNotIn(vs ...string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldNotIn(FieldCreatedByUserName, vs...))
}

// CreatedByUserNameGT applies the GT predicate on the "CreatedByUserName" field.
func CreatedByUserNameGT(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldGT(FieldCreatedByUserName, v))
}

// CreatedByUserNameGTE applies the GTE predicate on the "CreatedByUserName" field.
func CreatedByUserNameGTE(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldGTE(FieldCreatedByUserName, v))
}

// CreatedByUserNameLT applies the LT predicate on the "CreatedByUserName" field.
func CreatedByUserNameLT(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldLT(FieldCreatedByUserName, v))
}

// CreatedByUserNameLTE applies the LTE predicate on the "CreatedByUserName" field.
func CreatedByUserNameLTE(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldLTE(FieldCreatedByUserName, v))
}

// CreatedByUserNameContains applies the Contains predicate on the "CreatedByUserName" field.
func CreatedByUserNameContains(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldContains(FieldCreatedByUserName, v))
}

// CreatedByUserNameHasPrefix applies the HasPrefix predicate on the "CreatedByUserName" field.
func CreatedByUserNameHasPrefix(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldHasPrefix(FieldCreatedByUserName, v))
}

// CreatedByUserNameHasSuffix applies the HasSuffix predicate on the "CreatedByUserName" field.
func CreatedByUserNameHasSuffix(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldHasSuffix(FieldCreatedByUserName, v))
}

// CreatedByUserNameIsNil applies the IsNil predicate on the "CreatedByUserName" field.
func CreatedByUserNameIsNil() predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldIsNull(FieldCreatedByUserName))
}

// CreatedByUserNameNotNil applies the NotNil predicate on the "CreatedByUserName" field.
func CreatedByUserNameNotNil() predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldNotNull(FieldCreatedByUserName))
}

// CreatedByUserNameEqualFold applies the EqualFold predicate on the "CreatedByUserName" field.
func CreatedByUserNameEqualFold(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldEqualFold(FieldCreatedByUserName, v))
}

// CreatedByUserNameContainsFold applies the ContainsFold predicate on the "CreatedByUserName" field.
func CreatedByUserNameContainsFold(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldContainsFold(FieldCreatedByUserName, v))
}

// CreatedByEmpIdEQ applies the EQ predicate on the "CreatedByEmpId" field.
func CreatedByEmpIdEQ(v int64) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldEQ(FieldCreatedByEmpId, v))
}

// CreatedByEmpIdNEQ applies the NEQ predicate on the "CreatedByEmpId" field.
func CreatedByEmpIdNEQ(v int64) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldNEQ(FieldCreatedByEmpId, v))
}

// CreatedByEmpIdIn applies the In predicate on the "CreatedByEmpId" field.
func CreatedByEmpIdIn(vs ...int64) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldIn(FieldCreatedByEmpId, vs...))
}

// CreatedByEmpIdNotIn applies the NotIn predicate on the "CreatedByEmpId" field.
func CreatedByEmpIdNotIn(vs ...int64) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldNotIn(FieldCreatedByEmpId, vs...))
}

// CreatedByEmpIdGT applies the GT predicate on the "CreatedByEmpId" field.
func CreatedByEmpIdGT(v int64) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldGT(FieldCreatedByEmpId, v))
}

// CreatedByEmpIdGTE applies the GTE predicate on the "CreatedByEmpId" field.
func CreatedByEmpIdGTE(v int64) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldGTE(FieldCreatedByEmpId, v))
}

// CreatedByEmpIdLT applies the LT predicate on the "CreatedByEmpId" field.
func CreatedByEmpIdLT(v int64) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldLT(FieldCreatedByEmpId, v))
}

// CreatedByEmpIdLTE applies the LTE predicate on the "CreatedByEmpId" field.
func CreatedByEmpIdLTE(v int64) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldLTE(FieldCreatedByEmpId, v))
}

// CreatedByEmpIdIsNil applies the IsNil predicate on the "CreatedByEmpId" field.
func CreatedByEmpIdIsNil() predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldIsNull(FieldCreatedByEmpId))
}

// CreatedByEmpIdNotNil applies the NotNil predicate on the "CreatedByEmpId" field.
func CreatedByEmpIdNotNil() predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldNotNull(FieldCreatedByEmpId))
}

// CreatedByDesignationEQ applies the EQ predicate on the "CreatedByDesignation" field.
func CreatedByDesignationEQ(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldEQ(FieldCreatedByDesignation, v))
}

// CreatedByDesignationNEQ applies the NEQ predicate on the "CreatedByDesignation" field.
func CreatedByDesignationNEQ(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldNEQ(FieldCreatedByDesignation, v))
}

// CreatedByDesignationIn applies the In predicate on the "CreatedByDesignation" field.
func CreatedByDesignationIn(vs ...string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldIn(FieldCreatedByDesignation, vs...))
}

// CreatedByDesignationNotIn applies the NotIn predicate on the "CreatedByDesignation" field.
func CreatedByDesignationNotIn(vs ...string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldNotIn(FieldCreatedByDesignation, vs...))
}

// CreatedByDesignationGT applies the GT predicate on the "CreatedByDesignation" field.
func CreatedByDesignationGT(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldGT(FieldCreatedByDesignation, v))
}

// CreatedByDesignationGTE applies the GTE predicate on the "CreatedByDesignation" field.
func CreatedByDesignationGTE(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldGTE(FieldCreatedByDesignation, v))
}

// CreatedByDesignationLT applies the LT predicate on the "CreatedByDesignation" field.
func CreatedByDesignationLT(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldLT(FieldCreatedByDesignation, v))
}

// CreatedByDesignationLTE applies the LTE predicate on the "CreatedByDesignation" field.
func CreatedByDesignationLTE(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldLTE(FieldCreatedByDesignation, v))
}

// CreatedByDesignationContains applies the Contains predicate on the "CreatedByDesignation" field.
func CreatedByDesignationContains(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldContains(FieldCreatedByDesignation, v))
}

// CreatedByDesignationHasPrefix applies the HasPrefix predicate on the "CreatedByDesignation" field.
func CreatedByDesignationHasPrefix(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldHasPrefix(FieldCreatedByDesignation, v))
}

// CreatedByDesignationHasSuffix applies the HasSuffix predicate on the "CreatedByDesignation" field.
func CreatedByDesignationHasSuffix(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldHasSuffix(FieldCreatedByDesignation, v))
}

// CreatedByDesignationIsNil applies the IsNil predicate on the "CreatedByDesignation" field.
func CreatedByDesignationIsNil() predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldIsNull(FieldCreatedByDesignation))
}

// CreatedByDesignationNotNil applies the NotNil predicate on the "CreatedByDesignation" field.
func CreatedByDesignationNotNil() predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldNotNull(FieldCreatedByDesignation))
}

// CreatedByDesignationEqualFold applies the EqualFold predicate on the "CreatedByDesignation" field.
func CreatedByDesignationEqualFold(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldEqualFold(FieldCreatedByDesignation, v))
}

// CreatedByDesignationContainsFold applies the ContainsFold predicate on the "CreatedByDesignation" field.
func CreatedByDesignationContainsFold(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldContainsFold(FieldCreatedByDesignation, v))
}

// CreatedDateEQ applies the EQ predicate on the "CreatedDate" field.
func CreatedDateEQ(v time.Time) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldEQ(FieldCreatedDate, v))
}

// CreatedDateNEQ applies the NEQ predicate on the "CreatedDate" field.
func CreatedDateNEQ(v time.Time) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldNEQ(FieldCreatedDate, v))
}

// CreatedDateIn applies the In predicate on the "CreatedDate" field.
func CreatedDateIn(vs ...time.Time) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldIn(FieldCreatedDate, vs...))
}

// CreatedDateNotIn applies the NotIn predicate on the "CreatedDate" field.
func CreatedDateNotIn(vs ...time.Time) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldNotIn(FieldCreatedDate, vs...))
}

// CreatedDateGT applies the GT predicate on the "CreatedDate" field.
func CreatedDateGT(v time.Time) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldGT(FieldCreatedDate, v))
}

// CreatedDateGTE applies the GTE predicate on the "CreatedDate" field.
func CreatedDateGTE(v time.Time) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldGTE(FieldCreatedDate, v))
}

// CreatedDateLT applies the LT predicate on the "CreatedDate" field.
func CreatedDateLT(v time.Time) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldLT(FieldCreatedDate, v))
}

// CreatedDateLTE applies the LTE predicate on the "CreatedDate" field.
func CreatedDateLTE(v time.Time) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldLTE(FieldCreatedDate, v))
}

// CreatedDateIsNil applies the IsNil predicate on the "CreatedDate" field.
func CreatedDateIsNil() predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldIsNull(FieldCreatedDate))
}

// CreatedDateNotNil applies the NotNil predicate on the "CreatedDate" field.
func CreatedDateNotNil() predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldNotNull(FieldCreatedDate))
}

// VerifiedbyidEQ applies the EQ predicate on the "verifiedbyid" field.
func VerifiedbyidEQ(v int64) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldEQ(FieldVerifiedbyid, v))
}

// VerifiedbyidNEQ applies the NEQ predicate on the "verifiedbyid" field.
func VerifiedbyidNEQ(v int64) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldNEQ(FieldVerifiedbyid, v))
}

// VerifiedbyidIn applies the In predicate on the "verifiedbyid" field.
func VerifiedbyidIn(vs ...int64) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldIn(FieldVerifiedbyid, vs...))
}

// VerifiedbyidNotIn applies the NotIn predicate on the "verifiedbyid" field.
func VerifiedbyidNotIn(vs ...int64) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldNotIn(FieldVerifiedbyid, vs...))
}

// VerifiedbyidGT applies the GT predicate on the "verifiedbyid" field.
func VerifiedbyidGT(v int64) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldGT(FieldVerifiedbyid, v))
}

// VerifiedbyidGTE applies the GTE predicate on the "verifiedbyid" field.
func VerifiedbyidGTE(v int64) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldGTE(FieldVerifiedbyid, v))
}

// VerifiedbyidLT applies the LT predicate on the "verifiedbyid" field.
func VerifiedbyidLT(v int64) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldLT(FieldVerifiedbyid, v))
}

// VerifiedbyidLTE applies the LTE predicate on the "verifiedbyid" field.
func VerifiedbyidLTE(v int64) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldLTE(FieldVerifiedbyid, v))
}

// VerifiedbyidIsNil applies the IsNil predicate on the "verifiedbyid" field.
func VerifiedbyidIsNil() predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldIsNull(FieldVerifiedbyid))
}

// VerifiedbyidNotNil applies the NotNil predicate on the "verifiedbyid" field.
func VerifiedbyidNotNil() predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldNotNull(FieldVerifiedbyid))
}

// VerifiedbyusernameEQ applies the EQ predicate on the "verifiedbyusername" field.
func VerifiedbyusernameEQ(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldEQ(FieldVerifiedbyusername, v))
}

// VerifiedbyusernameNEQ applies the NEQ predicate on the "verifiedbyusername" field.
func VerifiedbyusernameNEQ(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldNEQ(FieldVerifiedbyusername, v))
}

// VerifiedbyusernameIn applies the In predicate on the "verifiedbyusername" field.
func VerifiedbyusernameIn(vs ...string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldIn(FieldVerifiedbyusername, vs...))
}

// VerifiedbyusernameNotIn applies the NotIn predicate on the "verifiedbyusername" field.
func VerifiedbyusernameNotIn(vs ...string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldNotIn(FieldVerifiedbyusername, vs...))
}

// VerifiedbyusernameGT applies the GT predicate on the "verifiedbyusername" field.
func VerifiedbyusernameGT(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldGT(FieldVerifiedbyusername, v))
}

// VerifiedbyusernameGTE applies the GTE predicate on the "verifiedbyusername" field.
func VerifiedbyusernameGTE(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldGTE(FieldVerifiedbyusername, v))
}

// VerifiedbyusernameLT applies the LT predicate on the "verifiedbyusername" field.
func VerifiedbyusernameLT(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldLT(FieldVerifiedbyusername, v))
}

// VerifiedbyusernameLTE applies the LTE predicate on the "verifiedbyusername" field.
func VerifiedbyusernameLTE(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldLTE(FieldVerifiedbyusername, v))
}

// VerifiedbyusernameContains applies the Contains predicate on the "verifiedbyusername" field.
func VerifiedbyusernameContains(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldContains(FieldVerifiedbyusername, v))
}

// VerifiedbyusernameHasPrefix applies the HasPrefix predicate on the "verifiedbyusername" field.
func VerifiedbyusernameHasPrefix(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldHasPrefix(FieldVerifiedbyusername, v))
}

// VerifiedbyusernameHasSuffix applies the HasSuffix predicate on the "verifiedbyusername" field.
func VerifiedbyusernameHasSuffix(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldHasSuffix(FieldVerifiedbyusername, v))
}

// VerifiedbyusernameIsNil applies the IsNil predicate on the "verifiedbyusername" field.
func VerifiedbyusernameIsNil() predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldIsNull(FieldVerifiedbyusername))
}

// VerifiedbyusernameNotNil applies the NotNil predicate on the "verifiedbyusername" field.
func VerifiedbyusernameNotNil() predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldNotNull(FieldVerifiedbyusername))
}

// VerifiedbyusernameEqualFold applies the EqualFold predicate on the "verifiedbyusername" field.
func VerifiedbyusernameEqualFold(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldEqualFold(FieldVerifiedbyusername, v))
}

// VerifiedbyusernameContainsFold applies the ContainsFold predicate on the "verifiedbyusername" field.
func VerifiedbyusernameContainsFold(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldContainsFold(FieldVerifiedbyusername, v))
}

// VerifiedbyEmployeeidEQ applies the EQ predicate on the "verifiedbyEmployeeid" field.
func VerifiedbyEmployeeidEQ(v int64) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldEQ(FieldVerifiedbyEmployeeid, v))
}

// VerifiedbyEmployeeidNEQ applies the NEQ predicate on the "verifiedbyEmployeeid" field.
func VerifiedbyEmployeeidNEQ(v int64) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldNEQ(FieldVerifiedbyEmployeeid, v))
}

// VerifiedbyEmployeeidIn applies the In predicate on the "verifiedbyEmployeeid" field.
func VerifiedbyEmployeeidIn(vs ...int64) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldIn(FieldVerifiedbyEmployeeid, vs...))
}

// VerifiedbyEmployeeidNotIn applies the NotIn predicate on the "verifiedbyEmployeeid" field.
func VerifiedbyEmployeeidNotIn(vs ...int64) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldNotIn(FieldVerifiedbyEmployeeid, vs...))
}

// VerifiedbyEmployeeidGT applies the GT predicate on the "verifiedbyEmployeeid" field.
func VerifiedbyEmployeeidGT(v int64) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldGT(FieldVerifiedbyEmployeeid, v))
}

// VerifiedbyEmployeeidGTE applies the GTE predicate on the "verifiedbyEmployeeid" field.
func VerifiedbyEmployeeidGTE(v int64) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldGTE(FieldVerifiedbyEmployeeid, v))
}

// VerifiedbyEmployeeidLT applies the LT predicate on the "verifiedbyEmployeeid" field.
func VerifiedbyEmployeeidLT(v int64) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldLT(FieldVerifiedbyEmployeeid, v))
}

// VerifiedbyEmployeeidLTE applies the LTE predicate on the "verifiedbyEmployeeid" field.
func VerifiedbyEmployeeidLTE(v int64) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldLTE(FieldVerifiedbyEmployeeid, v))
}

// VerifiedbyEmployeeidIsNil applies the IsNil predicate on the "verifiedbyEmployeeid" field.
func VerifiedbyEmployeeidIsNil() predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldIsNull(FieldVerifiedbyEmployeeid))
}

// VerifiedbyEmployeeidNotNil applies the NotNil predicate on the "verifiedbyEmployeeid" field.
func VerifiedbyEmployeeidNotNil() predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldNotNull(FieldVerifiedbyEmployeeid))
}

// VerifiedbyDesignationEQ applies the EQ predicate on the "verifiedbyDesignation" field.
func VerifiedbyDesignationEQ(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldEQ(FieldVerifiedbyDesignation, v))
}

// VerifiedbyDesignationNEQ applies the NEQ predicate on the "verifiedbyDesignation" field.
func VerifiedbyDesignationNEQ(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldNEQ(FieldVerifiedbyDesignation, v))
}

// VerifiedbyDesignationIn applies the In predicate on the "verifiedbyDesignation" field.
func VerifiedbyDesignationIn(vs ...string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldIn(FieldVerifiedbyDesignation, vs...))
}

// VerifiedbyDesignationNotIn applies the NotIn predicate on the "verifiedbyDesignation" field.
func VerifiedbyDesignationNotIn(vs ...string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldNotIn(FieldVerifiedbyDesignation, vs...))
}

// VerifiedbyDesignationGT applies the GT predicate on the "verifiedbyDesignation" field.
func VerifiedbyDesignationGT(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldGT(FieldVerifiedbyDesignation, v))
}

// VerifiedbyDesignationGTE applies the GTE predicate on the "verifiedbyDesignation" field.
func VerifiedbyDesignationGTE(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldGTE(FieldVerifiedbyDesignation, v))
}

// VerifiedbyDesignationLT applies the LT predicate on the "verifiedbyDesignation" field.
func VerifiedbyDesignationLT(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldLT(FieldVerifiedbyDesignation, v))
}

// VerifiedbyDesignationLTE applies the LTE predicate on the "verifiedbyDesignation" field.
func VerifiedbyDesignationLTE(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldLTE(FieldVerifiedbyDesignation, v))
}

// VerifiedbyDesignationContains applies the Contains predicate on the "verifiedbyDesignation" field.
func VerifiedbyDesignationContains(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldContains(FieldVerifiedbyDesignation, v))
}

// VerifiedbyDesignationHasPrefix applies the HasPrefix predicate on the "verifiedbyDesignation" field.
func VerifiedbyDesignationHasPrefix(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldHasPrefix(FieldVerifiedbyDesignation, v))
}

// VerifiedbyDesignationHasSuffix applies the HasSuffix predicate on the "verifiedbyDesignation" field.
func VerifiedbyDesignationHasSuffix(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldHasSuffix(FieldVerifiedbyDesignation, v))
}

// VerifiedbyDesignationIsNil applies the IsNil predicate on the "verifiedbyDesignation" field.
func VerifiedbyDesignationIsNil() predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldIsNull(FieldVerifiedbyDesignation))
}

// VerifiedbyDesignationNotNil applies the NotNil predicate on the "verifiedbyDesignation" field.
func VerifiedbyDesignationNotNil() predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldNotNull(FieldVerifiedbyDesignation))
}

// VerifiedbyDesignationEqualFold applies the EqualFold predicate on the "verifiedbyDesignation" field.
func VerifiedbyDesignationEqualFold(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldEqualFold(FieldVerifiedbyDesignation, v))
}

// VerifiedbyDesignationContainsFold applies the ContainsFold predicate on the "verifiedbyDesignation" field.
func VerifiedbyDesignationContainsFold(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldContainsFold(FieldVerifiedbyDesignation, v))
}

// VerifiedDateEQ applies the EQ predicate on the "verifiedDate" field.
func VerifiedDateEQ(v time.Time) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldEQ(FieldVerifiedDate, v))
}

// VerifiedDateNEQ applies the NEQ predicate on the "verifiedDate" field.
func VerifiedDateNEQ(v time.Time) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldNEQ(FieldVerifiedDate, v))
}

// VerifiedDateIn applies the In predicate on the "verifiedDate" field.
func VerifiedDateIn(vs ...time.Time) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldIn(FieldVerifiedDate, vs...))
}

// VerifiedDateNotIn applies the NotIn predicate on the "verifiedDate" field.
func VerifiedDateNotIn(vs ...time.Time) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldNotIn(FieldVerifiedDate, vs...))
}

// VerifiedDateGT applies the GT predicate on the "verifiedDate" field.
func VerifiedDateGT(v time.Time) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldGT(FieldVerifiedDate, v))
}

// VerifiedDateGTE applies the GTE predicate on the "verifiedDate" field.
func VerifiedDateGTE(v time.Time) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldGTE(FieldVerifiedDate, v))
}

// VerifiedDateLT applies the LT predicate on the "verifiedDate" field.
func VerifiedDateLT(v time.Time) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldLT(FieldVerifiedDate, v))
}

// VerifiedDateLTE applies the LTE predicate on the "verifiedDate" field.
func VerifiedDateLTE(v time.Time) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldLTE(FieldVerifiedDate, v))
}

// VerifiedDateIsNil applies the IsNil predicate on the "verifiedDate" field.
func VerifiedDateIsNil() predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldIsNull(FieldVerifiedDate))
}

// VerifiedDateNotNil applies the NotNil predicate on the "verifiedDate" field.
func VerifiedDateNotNil() predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldNotNull(FieldVerifiedDate))
}

// StatussEQ applies the EQ predicate on the "Statuss" field.
func StatussEQ(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldEQ(FieldStatuss, v))
}

// StatussNEQ applies the NEQ predicate on the "Statuss" field.
func StatussNEQ(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldNEQ(FieldStatuss, v))
}

// StatussIn applies the In predicate on the "Statuss" field.
func StatussIn(vs ...string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldIn(FieldStatuss, vs...))
}

// StatussNotIn applies the NotIn predicate on the "Statuss" field.
func StatussNotIn(vs ...string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldNotIn(FieldStatuss, vs...))
}

// StatussGT applies the GT predicate on the "Statuss" field.
func StatussGT(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldGT(FieldStatuss, v))
}

// StatussGTE applies the GTE predicate on the "Statuss" field.
func StatussGTE(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldGTE(FieldStatuss, v))
}

// StatussLT applies the LT predicate on the "Statuss" field.
func StatussLT(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldLT(FieldStatuss, v))
}

// StatussLTE applies the LTE predicate on the "Statuss" field.
func StatussLTE(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldLTE(FieldStatuss, v))
}

// StatussContains applies the Contains predicate on the "Statuss" field.
func StatussContains(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldContains(FieldStatuss, v))
}

// StatussHasPrefix applies the HasPrefix predicate on the "Statuss" field.
func StatussHasPrefix(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldHasPrefix(FieldStatuss, v))
}

// StatussHasSuffix applies the HasSuffix predicate on the "Statuss" field.
func StatussHasSuffix(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldHasSuffix(FieldStatuss, v))
}

// StatussIsNil applies the IsNil predicate on the "Statuss" field.
func StatussIsNil() predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldIsNull(FieldStatuss))
}

// StatussNotNil applies the NotNil predicate on the "Statuss" field.
func StatussNotNil() predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldNotNull(FieldStatuss))
}

// StatussEqualFold applies the EqualFold predicate on the "Statuss" field.
func StatussEqualFold(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldEqualFold(FieldStatuss, v))
}

// StatussContainsFold applies the ContainsFold predicate on the "Statuss" field.
func StatussContainsFold(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldContainsFold(FieldStatuss, v))
}

// DeletedbyidEQ applies the EQ predicate on the "deletedbyid" field.
func DeletedbyidEQ(v int64) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldEQ(FieldDeletedbyid, v))
}

// DeletedbyidNEQ applies the NEQ predicate on the "deletedbyid" field.
func DeletedbyidNEQ(v int64) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldNEQ(FieldDeletedbyid, v))
}

// DeletedbyidIn applies the In predicate on the "deletedbyid" field.
func DeletedbyidIn(vs ...int64) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldIn(FieldDeletedbyid, vs...))
}

// DeletedbyidNotIn applies the NotIn predicate on the "deletedbyid" field.
func DeletedbyidNotIn(vs ...int64) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldNotIn(FieldDeletedbyid, vs...))
}

// DeletedbyidGT applies the GT predicate on the "deletedbyid" field.
func DeletedbyidGT(v int64) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldGT(FieldDeletedbyid, v))
}

// DeletedbyidGTE applies the GTE predicate on the "deletedbyid" field.
func DeletedbyidGTE(v int64) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldGTE(FieldDeletedbyid, v))
}

// DeletedbyidLT applies the LT predicate on the "deletedbyid" field.
func DeletedbyidLT(v int64) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldLT(FieldDeletedbyid, v))
}

// DeletedbyidLTE applies the LTE predicate on the "deletedbyid" field.
func DeletedbyidLTE(v int64) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldLTE(FieldDeletedbyid, v))
}

// DeletedbyidIsNil applies the IsNil predicate on the "deletedbyid" field.
func DeletedbyidIsNil() predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldIsNull(FieldDeletedbyid))
}

// DeletedbyidNotNil applies the NotNil predicate on the "deletedbyid" field.
func DeletedbyidNotNil() predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldNotNull(FieldDeletedbyid))
}

// DeletedbyusernameEQ applies the EQ predicate on the "deletedbyusername" field.
func DeletedbyusernameEQ(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldEQ(FieldDeletedbyusername, v))
}

// DeletedbyusernameNEQ applies the NEQ predicate on the "deletedbyusername" field.
func DeletedbyusernameNEQ(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldNEQ(FieldDeletedbyusername, v))
}

// DeletedbyusernameIn applies the In predicate on the "deletedbyusername" field.
func DeletedbyusernameIn(vs ...string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldIn(FieldDeletedbyusername, vs...))
}

// DeletedbyusernameNotIn applies the NotIn predicate on the "deletedbyusername" field.
func DeletedbyusernameNotIn(vs ...string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldNotIn(FieldDeletedbyusername, vs...))
}

// DeletedbyusernameGT applies the GT predicate on the "deletedbyusername" field.
func DeletedbyusernameGT(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldGT(FieldDeletedbyusername, v))
}

// DeletedbyusernameGTE applies the GTE predicate on the "deletedbyusername" field.
func DeletedbyusernameGTE(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldGTE(FieldDeletedbyusername, v))
}

// DeletedbyusernameLT applies the LT predicate on the "deletedbyusername" field.
func DeletedbyusernameLT(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldLT(FieldDeletedbyusername, v))
}

// DeletedbyusernameLTE applies the LTE predicate on the "deletedbyusername" field.
func DeletedbyusernameLTE(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldLTE(FieldDeletedbyusername, v))
}

// DeletedbyusernameContains applies the Contains predicate on the "deletedbyusername" field.
func DeletedbyusernameContains(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldContains(FieldDeletedbyusername, v))
}

// DeletedbyusernameHasPrefix applies the HasPrefix predicate on the "deletedbyusername" field.
func DeletedbyusernameHasPrefix(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldHasPrefix(FieldDeletedbyusername, v))
}

// DeletedbyusernameHasSuffix applies the HasSuffix predicate on the "deletedbyusername" field.
func DeletedbyusernameHasSuffix(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldHasSuffix(FieldDeletedbyusername, v))
}

// DeletedbyusernameIsNil applies the IsNil predicate on the "deletedbyusername" field.
func DeletedbyusernameIsNil() predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldIsNull(FieldDeletedbyusername))
}

// DeletedbyusernameNotNil applies the NotNil predicate on the "deletedbyusername" field.
func DeletedbyusernameNotNil() predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldNotNull(FieldDeletedbyusername))
}

// DeletedbyusernameEqualFold applies the EqualFold predicate on the "deletedbyusername" field.
func DeletedbyusernameEqualFold(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldEqualFold(FieldDeletedbyusername, v))
}

// DeletedbyusernameContainsFold applies the ContainsFold predicate on the "deletedbyusername" field.
func DeletedbyusernameContainsFold(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldContainsFold(FieldDeletedbyusername, v))
}

// DeletedbyEmployeeidEQ applies the EQ predicate on the "deletedbyEmployeeid" field.
func DeletedbyEmployeeidEQ(v int64) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldEQ(FieldDeletedbyEmployeeid, v))
}

// DeletedbyEmployeeidNEQ applies the NEQ predicate on the "deletedbyEmployeeid" field.
func DeletedbyEmployeeidNEQ(v int64) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldNEQ(FieldDeletedbyEmployeeid, v))
}

// DeletedbyEmployeeidIn applies the In predicate on the "deletedbyEmployeeid" field.
func DeletedbyEmployeeidIn(vs ...int64) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldIn(FieldDeletedbyEmployeeid, vs...))
}

// DeletedbyEmployeeidNotIn applies the NotIn predicate on the "deletedbyEmployeeid" field.
func DeletedbyEmployeeidNotIn(vs ...int64) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldNotIn(FieldDeletedbyEmployeeid, vs...))
}

// DeletedbyEmployeeidGT applies the GT predicate on the "deletedbyEmployeeid" field.
func DeletedbyEmployeeidGT(v int64) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldGT(FieldDeletedbyEmployeeid, v))
}

// DeletedbyEmployeeidGTE applies the GTE predicate on the "deletedbyEmployeeid" field.
func DeletedbyEmployeeidGTE(v int64) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldGTE(FieldDeletedbyEmployeeid, v))
}

// DeletedbyEmployeeidLT applies the LT predicate on the "deletedbyEmployeeid" field.
func DeletedbyEmployeeidLT(v int64) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldLT(FieldDeletedbyEmployeeid, v))
}

// DeletedbyEmployeeidLTE applies the LTE predicate on the "deletedbyEmployeeid" field.
func DeletedbyEmployeeidLTE(v int64) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldLTE(FieldDeletedbyEmployeeid, v))
}

// DeletedbyEmployeeidIsNil applies the IsNil predicate on the "deletedbyEmployeeid" field.
func DeletedbyEmployeeidIsNil() predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldIsNull(FieldDeletedbyEmployeeid))
}

// DeletedbyEmployeeidNotNil applies the NotNil predicate on the "deletedbyEmployeeid" field.
func DeletedbyEmployeeidNotNil() predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldNotNull(FieldDeletedbyEmployeeid))
}

// DeletedbyDesignationEQ applies the EQ predicate on the "deletedbyDesignation" field.
func DeletedbyDesignationEQ(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldEQ(FieldDeletedbyDesignation, v))
}

// DeletedbyDesignationNEQ applies the NEQ predicate on the "deletedbyDesignation" field.
func DeletedbyDesignationNEQ(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldNEQ(FieldDeletedbyDesignation, v))
}

// DeletedbyDesignationIn applies the In predicate on the "deletedbyDesignation" field.
func DeletedbyDesignationIn(vs ...string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldIn(FieldDeletedbyDesignation, vs...))
}

// DeletedbyDesignationNotIn applies the NotIn predicate on the "deletedbyDesignation" field.
func DeletedbyDesignationNotIn(vs ...string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldNotIn(FieldDeletedbyDesignation, vs...))
}

// DeletedbyDesignationGT applies the GT predicate on the "deletedbyDesignation" field.
func DeletedbyDesignationGT(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldGT(FieldDeletedbyDesignation, v))
}

// DeletedbyDesignationGTE applies the GTE predicate on the "deletedbyDesignation" field.
func DeletedbyDesignationGTE(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldGTE(FieldDeletedbyDesignation, v))
}

// DeletedbyDesignationLT applies the LT predicate on the "deletedbyDesignation" field.
func DeletedbyDesignationLT(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldLT(FieldDeletedbyDesignation, v))
}

// DeletedbyDesignationLTE applies the LTE predicate on the "deletedbyDesignation" field.
func DeletedbyDesignationLTE(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldLTE(FieldDeletedbyDesignation, v))
}

// DeletedbyDesignationContains applies the Contains predicate on the "deletedbyDesignation" field.
func DeletedbyDesignationContains(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldContains(FieldDeletedbyDesignation, v))
}

// DeletedbyDesignationHasPrefix applies the HasPrefix predicate on the "deletedbyDesignation" field.
func DeletedbyDesignationHasPrefix(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldHasPrefix(FieldDeletedbyDesignation, v))
}

// DeletedbyDesignationHasSuffix applies the HasSuffix predicate on the "deletedbyDesignation" field.
func DeletedbyDesignationHasSuffix(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldHasSuffix(FieldDeletedbyDesignation, v))
}

// DeletedbyDesignationIsNil applies the IsNil predicate on the "deletedbyDesignation" field.
func DeletedbyDesignationIsNil() predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldIsNull(FieldDeletedbyDesignation))
}

// DeletedbyDesignationNotNil applies the NotNil predicate on the "deletedbyDesignation" field.
func DeletedbyDesignationNotNil() predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldNotNull(FieldDeletedbyDesignation))
}

// DeletedbyDesignationEqualFold applies the EqualFold predicate on the "deletedbyDesignation" field.
func DeletedbyDesignationEqualFold(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldEqualFold(FieldDeletedbyDesignation, v))
}

// DeletedbyDesignationContainsFold applies the ContainsFold predicate on the "deletedbyDesignation" field.
func DeletedbyDesignationContainsFold(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldContainsFold(FieldDeletedbyDesignation, v))
}

// DeletedDateEQ applies the EQ predicate on the "deletedDate" field.
func DeletedDateEQ(v time.Time) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldEQ(FieldDeletedDate, v))
}

// DeletedDateNEQ applies the NEQ predicate on the "deletedDate" field.
func DeletedDateNEQ(v time.Time) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldNEQ(FieldDeletedDate, v))
}

// DeletedDateIn applies the In predicate on the "deletedDate" field.
func DeletedDateIn(vs ...time.Time) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldIn(FieldDeletedDate, vs...))
}

// DeletedDateNotIn applies the NotIn predicate on the "deletedDate" field.
func DeletedDateNotIn(vs ...time.Time) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldNotIn(FieldDeletedDate, vs...))
}

// DeletedDateGT applies the GT predicate on the "deletedDate" field.
func DeletedDateGT(v time.Time) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldGT(FieldDeletedDate, v))
}

// DeletedDateGTE applies the GTE predicate on the "deletedDate" field.
func DeletedDateGTE(v time.Time) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldGTE(FieldDeletedDate, v))
}

// DeletedDateLT applies the LT predicate on the "deletedDate" field.
func DeletedDateLT(v time.Time) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldLT(FieldDeletedDate, v))
}

// DeletedDateLTE applies the LTE predicate on the "deletedDate" field.
func DeletedDateLTE(v time.Time) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldLTE(FieldDeletedDate, v))
}

// DeletedDateIsNil applies the IsNil predicate on the "deletedDate" field.
func DeletedDateIsNil() predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldIsNull(FieldDeletedDate))
}

// DeletedDateNotNil applies the NotNil predicate on the "deletedDate" field.
func DeletedDateNotNil() predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldNotNull(FieldDeletedDate))
}

// PaperStatusEQ applies the EQ predicate on the "PaperStatus" field.
func PaperStatusEQ(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldEQ(FieldPaperStatus, v))
}

// PaperStatusNEQ applies the NEQ predicate on the "PaperStatus" field.
func PaperStatusNEQ(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldNEQ(FieldPaperStatus, v))
}

// PaperStatusIn applies the In predicate on the "PaperStatus" field.
func PaperStatusIn(vs ...string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldIn(FieldPaperStatus, vs...))
}

// PaperStatusNotIn applies the NotIn predicate on the "PaperStatus" field.
func PaperStatusNotIn(vs ...string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldNotIn(FieldPaperStatus, vs...))
}

// PaperStatusGT applies the GT predicate on the "PaperStatus" field.
func PaperStatusGT(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldGT(FieldPaperStatus, v))
}

// PaperStatusGTE applies the GTE predicate on the "PaperStatus" field.
func PaperStatusGTE(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldGTE(FieldPaperStatus, v))
}

// PaperStatusLT applies the LT predicate on the "PaperStatus" field.
func PaperStatusLT(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldLT(FieldPaperStatus, v))
}

// PaperStatusLTE applies the LTE predicate on the "PaperStatus" field.
func PaperStatusLTE(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldLTE(FieldPaperStatus, v))
}

// PaperStatusContains applies the Contains predicate on the "PaperStatus" field.
func PaperStatusContains(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldContains(FieldPaperStatus, v))
}

// PaperStatusHasPrefix applies the HasPrefix predicate on the "PaperStatus" field.
func PaperStatusHasPrefix(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldHasPrefix(FieldPaperStatus, v))
}

// PaperStatusHasSuffix applies the HasSuffix predicate on the "PaperStatus" field.
func PaperStatusHasSuffix(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldHasSuffix(FieldPaperStatus, v))
}

// PaperStatusEqualFold applies the EqualFold predicate on the "PaperStatus" field.
func PaperStatusEqualFold(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldEqualFold(FieldPaperStatus, v))
}

// PaperStatusContainsFold applies the ContainsFold predicate on the "PaperStatus" field.
func PaperStatusContainsFold(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldContainsFold(FieldPaperStatus, v))
}

// CalendarCodeEQ applies the EQ predicate on the "CalendarCode" field.
func CalendarCodeEQ(v int32) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldEQ(FieldCalendarCode, v))
}

// CalendarCodeNEQ applies the NEQ predicate on the "CalendarCode" field.
func CalendarCodeNEQ(v int32) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldNEQ(FieldCalendarCode, v))
}

// CalendarCodeIn applies the In predicate on the "CalendarCode" field.
func CalendarCodeIn(vs ...int32) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldIn(FieldCalendarCode, vs...))
}

// CalendarCodeNotIn applies the NotIn predicate on the "CalendarCode" field.
func CalendarCodeNotIn(vs ...int32) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldNotIn(FieldCalendarCode, vs...))
}

// CalendarCodeGT applies the GT predicate on the "CalendarCode" field.
func CalendarCodeGT(v int32) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldGT(FieldCalendarCode, v))
}

// CalendarCodeGTE applies the GTE predicate on the "CalendarCode" field.
func CalendarCodeGTE(v int32) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldGTE(FieldCalendarCode, v))
}

// CalendarCodeLT applies the LT predicate on the "CalendarCode" field.
func CalendarCodeLT(v int32) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldLT(FieldCalendarCode, v))
}

// CalendarCodeLTE applies the LTE predicate on the "CalendarCode" field.
func CalendarCodeLTE(v int32) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldLTE(FieldCalendarCode, v))
}

// CalendarCodeIsNil applies the IsNil predicate on the "CalendarCode" field.
func CalendarCodeIsNil() predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldIsNull(FieldCalendarCode))
}

// CalendarCodeNotNil applies the NotNil predicate on the "CalendarCode" field.
func CalendarCodeNotNil() predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldNotNull(FieldCalendarCode))
}

// ExamCodePSEQ applies the EQ predicate on the "ExamCodePS" field.
func ExamCodePSEQ(v int32) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldEQ(FieldExamCodePS, v))
}

// ExamCodePSNEQ applies the NEQ predicate on the "ExamCodePS" field.
func ExamCodePSNEQ(v int32) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldNEQ(FieldExamCodePS, v))
}

// ExamCodePSIn applies the In predicate on the "ExamCodePS" field.
func ExamCodePSIn(vs ...int32) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldIn(FieldExamCodePS, vs...))
}

// ExamCodePSNotIn applies the NotIn predicate on the "ExamCodePS" field.
func ExamCodePSNotIn(vs ...int32) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldNotIn(FieldExamCodePS, vs...))
}

// ExamCodePSGT applies the GT predicate on the "ExamCodePS" field.
func ExamCodePSGT(v int32) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldGT(FieldExamCodePS, v))
}

// ExamCodePSGTE applies the GTE predicate on the "ExamCodePS" field.
func ExamCodePSGTE(v int32) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldGTE(FieldExamCodePS, v))
}

// ExamCodePSLT applies the LT predicate on the "ExamCodePS" field.
func ExamCodePSLT(v int32) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldLT(FieldExamCodePS, v))
}

// ExamCodePSLTE applies the LTE predicate on the "ExamCodePS" field.
func ExamCodePSLTE(v int32) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldLTE(FieldExamCodePS, v))
}

// ExamCodePSIsNil applies the IsNil predicate on the "ExamCodePS" field.
func ExamCodePSIsNil() predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldIsNull(FieldExamCodePS))
}

// ExamCodePSNotNil applies the NotNil predicate on the "ExamCodePS" field.
func ExamCodePSNotNil() predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldNotNull(FieldExamCodePS))
}

// CreatedByEmployeeIdEQ applies the EQ predicate on the "CreatedByEmployeeId" field.
func CreatedByEmployeeIdEQ(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldEQ(FieldCreatedByEmployeeId, v))
}

// CreatedByEmployeeIdNEQ applies the NEQ predicate on the "CreatedByEmployeeId" field.
func CreatedByEmployeeIdNEQ(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldNEQ(FieldCreatedByEmployeeId, v))
}

// CreatedByEmployeeIdIn applies the In predicate on the "CreatedByEmployeeId" field.
func CreatedByEmployeeIdIn(vs ...string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldIn(FieldCreatedByEmployeeId, vs...))
}

// CreatedByEmployeeIdNotIn applies the NotIn predicate on the "CreatedByEmployeeId" field.
func CreatedByEmployeeIdNotIn(vs ...string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldNotIn(FieldCreatedByEmployeeId, vs...))
}

// CreatedByEmployeeIdGT applies the GT predicate on the "CreatedByEmployeeId" field.
func CreatedByEmployeeIdGT(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldGT(FieldCreatedByEmployeeId, v))
}

// CreatedByEmployeeIdGTE applies the GTE predicate on the "CreatedByEmployeeId" field.
func CreatedByEmployeeIdGTE(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldGTE(FieldCreatedByEmployeeId, v))
}

// CreatedByEmployeeIdLT applies the LT predicate on the "CreatedByEmployeeId" field.
func CreatedByEmployeeIdLT(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldLT(FieldCreatedByEmployeeId, v))
}

// CreatedByEmployeeIdLTE applies the LTE predicate on the "CreatedByEmployeeId" field.
func CreatedByEmployeeIdLTE(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldLTE(FieldCreatedByEmployeeId, v))
}

// CreatedByEmployeeIdContains applies the Contains predicate on the "CreatedByEmployeeId" field.
func CreatedByEmployeeIdContains(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldContains(FieldCreatedByEmployeeId, v))
}

// CreatedByEmployeeIdHasPrefix applies the HasPrefix predicate on the "CreatedByEmployeeId" field.
func CreatedByEmployeeIdHasPrefix(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldHasPrefix(FieldCreatedByEmployeeId, v))
}

// CreatedByEmployeeIdHasSuffix applies the HasSuffix predicate on the "CreatedByEmployeeId" field.
func CreatedByEmployeeIdHasSuffix(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldHasSuffix(FieldCreatedByEmployeeId, v))
}

// CreatedByEmployeeIdIsNil applies the IsNil predicate on the "CreatedByEmployeeId" field.
func CreatedByEmployeeIdIsNil() predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldIsNull(FieldCreatedByEmployeeId))
}

// CreatedByEmployeeIdNotNil applies the NotNil predicate on the "CreatedByEmployeeId" field.
func CreatedByEmployeeIdNotNil() predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldNotNull(FieldCreatedByEmployeeId))
}

// CreatedByEmployeeIdEqualFold applies the EqualFold predicate on the "CreatedByEmployeeId" field.
func CreatedByEmployeeIdEqualFold(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldEqualFold(FieldCreatedByEmployeeId, v))
}

// CreatedByEmployeeIdContainsFold applies the ContainsFold predicate on the "CreatedByEmployeeId" field.
func CreatedByEmployeeIdContainsFold(v string) predicate.ExamPapers {
	return predicate.ExamPapers(sql.FieldContainsFold(FieldCreatedByEmployeeId, v))
}

// HasCenters applies the HasEdge predicate on the "centers" edge.
func HasCenters() predicate.ExamPapers {
	return predicate.ExamPapers(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, CentersTable, CentersColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCentersWith applies the HasEdge predicate on the "centers" edge with a given conditions (other predicates).
func HasCentersWith(preds ...predicate.Center) predicate.ExamPapers {
	return predicate.ExamPapers(func(s *sql.Selector) {
		step := newCentersStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasExampapersTypes applies the HasEdge predicate on the "exampapers_types" edge.
func HasExampapersTypes() predicate.ExamPapers {
	return predicate.ExamPapers(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ExampapersTypesTable, ExampapersTypesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasExampapersTypesWith applies the HasEdge predicate on the "exampapers_types" edge with a given conditions (other predicates).
func HasExampapersTypesWith(preds ...predicate.PaperTypes) predicate.ExamPapers {
	return predicate.ExamPapers(func(s *sql.Selector) {
		step := newExampapersTypesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPapersRef applies the HasEdge predicate on the "papers_ref" edge.
func HasPapersRef() predicate.ExamPapers {
	return predicate.ExamPapers(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, PapersRefTable, PapersRefColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPapersRefWith applies the HasEdge predicate on the "papers_ref" edge with a given conditions (other predicates).
func HasPapersRefWith(preds ...predicate.ExamCalendar) predicate.ExamPapers {
	return predicate.ExamPapers(func(s *sql.Selector) {
		step := newPapersRefStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasExamPaperEligibility applies the HasEdge predicate on the "ExamPaperEligibility" edge.
func HasExamPaperEligibility() predicate.ExamPapers {
	return predicate.ExamPapers(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ExamPaperEligibilityTable, ExamPaperEligibilityColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasExamPaperEligibilityWith applies the HasEdge predicate on the "ExamPaperEligibility" edge with a given conditions (other predicates).
func HasExamPaperEligibilityWith(preds ...predicate.EligibilityMaster) predicate.ExamPapers {
	return predicate.ExamPapers(func(s *sql.Selector) {
		step := newExamPaperEligibilityStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasDisRef applies the HasEdge predicate on the "dis_ref" edge.
func HasDisRef() predicate.ExamPapers {
	return predicate.ExamPapers(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, DisRefTable, DisRefColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDisRefWith applies the HasEdge predicate on the "dis_ref" edge with a given conditions (other predicates).
func HasDisRefWith(preds ...predicate.Disability) predicate.ExamPapers {
	return predicate.ExamPapers(func(s *sql.Selector) {
		step := newDisRefStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ExamPapers) predicate.ExamPapers {
	return predicate.ExamPapers(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ExamPapers) predicate.ExamPapers {
	return predicate.ExamPapers(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ExamPapers) predicate.ExamPapers {
	return predicate.ExamPapers(func(s *sql.Selector) {
		p(s.Not())
	})
}
