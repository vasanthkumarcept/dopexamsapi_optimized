// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"recruit/ent/examcategorydisabilitymapping"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ExamCategoryDisabilityMappingCreate is the builder for creating a ExamCategoryDisabilityMapping entity.
type ExamCategoryDisabilityMappingCreate struct {
	config
	mutation *ExamCategoryDisabilityMappingMutation
	hooks    []Hook
}

// SetExamCode sets the "ExamCode" field.
func (ecdmc *ExamCategoryDisabilityMappingCreate) SetExamCode(i int64) *ExamCategoryDisabilityMappingCreate {
	ecdmc.mutation.SetExamCode(i)
	return ecdmc
}

// SetNillableExamCode sets the "ExamCode" field if the given value is not nil.
func (ecdmc *ExamCategoryDisabilityMappingCreate) SetNillableExamCode(i *int64) *ExamCategoryDisabilityMappingCreate {
	if i != nil {
		ecdmc.SetExamCode(*i)
	}
	return ecdmc
}

// SetExamShortName sets the "ExamShortName" field.
func (ecdmc *ExamCategoryDisabilityMappingCreate) SetExamShortName(s string) *ExamCategoryDisabilityMappingCreate {
	ecdmc.mutation.SetExamShortName(s)
	return ecdmc
}

// SetNillableExamShortName sets the "ExamShortName" field if the given value is not nil.
func (ecdmc *ExamCategoryDisabilityMappingCreate) SetNillableExamShortName(s *string) *ExamCategoryDisabilityMappingCreate {
	if s != nil {
		ecdmc.SetExamShortName(*s)
	}
	return ecdmc
}

// SetCategoryDisability sets the "CategoryDisability" field.
func (ecdmc *ExamCategoryDisabilityMappingCreate) SetCategoryDisability(s string) *ExamCategoryDisabilityMappingCreate {
	ecdmc.mutation.SetCategoryDisability(s)
	return ecdmc
}

// SetNillableCategoryDisability sets the "CategoryDisability" field if the given value is not nil.
func (ecdmc *ExamCategoryDisabilityMappingCreate) SetNillableCategoryDisability(s *string) *ExamCategoryDisabilityMappingCreate {
	if s != nil {
		ecdmc.SetCategoryDisability(*s)
	}
	return ecdmc
}

// SetCategoryDisabilityCode sets the "CategoryDisabilityCode" field.
func (ecdmc *ExamCategoryDisabilityMappingCreate) SetCategoryDisabilityCode(s string) *ExamCategoryDisabilityMappingCreate {
	ecdmc.mutation.SetCategoryDisabilityCode(s)
	return ecdmc
}

// SetNillableCategoryDisabilityCode sets the "CategoryDisabilityCode" field if the given value is not nil.
func (ecdmc *ExamCategoryDisabilityMappingCreate) SetNillableCategoryDisabilityCode(s *string) *ExamCategoryDisabilityMappingCreate {
	if s != nil {
		ecdmc.SetCategoryDisabilityCode(*s)
	}
	return ecdmc
}

// SetCategoryDisabilityDescription sets the "CategoryDisabilityDescription" field.
func (ecdmc *ExamCategoryDisabilityMappingCreate) SetCategoryDisabilityDescription(s string) *ExamCategoryDisabilityMappingCreate {
	ecdmc.mutation.SetCategoryDisabilityDescription(s)
	return ecdmc
}

// SetNillableCategoryDisabilityDescription sets the "CategoryDisabilityDescription" field if the given value is not nil.
func (ecdmc *ExamCategoryDisabilityMappingCreate) SetNillableCategoryDisabilityDescription(s *string) *ExamCategoryDisabilityMappingCreate {
	if s != nil {
		ecdmc.SetCategoryDisabilityDescription(*s)
	}
	return ecdmc
}

// SetAgeException sets the "AgeException" field.
func (ecdmc *ExamCategoryDisabilityMappingCreate) SetAgeException(i int32) *ExamCategoryDisabilityMappingCreate {
	ecdmc.mutation.SetAgeException(i)
	return ecdmc
}

// SetNillableAgeException sets the "AgeException" field if the given value is not nil.
func (ecdmc *ExamCategoryDisabilityMappingCreate) SetNillableAgeException(i *int32) *ExamCategoryDisabilityMappingCreate {
	if i != nil {
		ecdmc.SetAgeException(*i)
	}
	return ecdmc
}

// SetServiceException sets the "ServiceException" field.
func (ecdmc *ExamCategoryDisabilityMappingCreate) SetServiceException(i int32) *ExamCategoryDisabilityMappingCreate {
	ecdmc.mutation.SetServiceException(i)
	return ecdmc
}

// SetNillableServiceException sets the "ServiceException" field if the given value is not nil.
func (ecdmc *ExamCategoryDisabilityMappingCreate) SetNillableServiceException(i *int32) *ExamCategoryDisabilityMappingCreate {
	if i != nil {
		ecdmc.SetServiceException(*i)
	}
	return ecdmc
}

// SetDrivingLicense sets the "DrivingLicense" field.
func (ecdmc *ExamCategoryDisabilityMappingCreate) SetDrivingLicense(b bool) *ExamCategoryDisabilityMappingCreate {
	ecdmc.mutation.SetDrivingLicense(b)
	return ecdmc
}

// SetNillableDrivingLicense sets the "DrivingLicense" field if the given value is not nil.
func (ecdmc *ExamCategoryDisabilityMappingCreate) SetNillableDrivingLicense(b *bool) *ExamCategoryDisabilityMappingCreate {
	if b != nil {
		ecdmc.SetDrivingLicense(*b)
	}
	return ecdmc
}

// SetOrderNumber sets the "OrderNumber" field.
func (ecdmc *ExamCategoryDisabilityMappingCreate) SetOrderNumber(s string) *ExamCategoryDisabilityMappingCreate {
	ecdmc.mutation.SetOrderNumber(s)
	return ecdmc
}

// SetNillableOrderNumber sets the "OrderNumber" field if the given value is not nil.
func (ecdmc *ExamCategoryDisabilityMappingCreate) SetNillableOrderNumber(s *string) *ExamCategoryDisabilityMappingCreate {
	if s != nil {
		ecdmc.SetOrderNumber(*s)
	}
	return ecdmc
}

// SetStatus sets the "Status" field.
func (ecdmc *ExamCategoryDisabilityMappingCreate) SetStatus(s string) *ExamCategoryDisabilityMappingCreate {
	ecdmc.mutation.SetStatus(s)
	return ecdmc
}

// SetNillableStatus sets the "Status" field if the given value is not nil.
func (ecdmc *ExamCategoryDisabilityMappingCreate) SetNillableStatus(s *string) *ExamCategoryDisabilityMappingCreate {
	if s != nil {
		ecdmc.SetStatus(*s)
	}
	return ecdmc
}

// SetCreatedById sets the "CreatedById" field.
func (ecdmc *ExamCategoryDisabilityMappingCreate) SetCreatedById(i int32) *ExamCategoryDisabilityMappingCreate {
	ecdmc.mutation.SetCreatedById(i)
	return ecdmc
}

// SetNillableCreatedById sets the "CreatedById" field if the given value is not nil.
func (ecdmc *ExamCategoryDisabilityMappingCreate) SetNillableCreatedById(i *int32) *ExamCategoryDisabilityMappingCreate {
	if i != nil {
		ecdmc.SetCreatedById(*i)
	}
	return ecdmc
}

// SetCreatedByUserName sets the "CreatedByUserName" field.
func (ecdmc *ExamCategoryDisabilityMappingCreate) SetCreatedByUserName(s string) *ExamCategoryDisabilityMappingCreate {
	ecdmc.mutation.SetCreatedByUserName(s)
	return ecdmc
}

// SetNillableCreatedByUserName sets the "CreatedByUserName" field if the given value is not nil.
func (ecdmc *ExamCategoryDisabilityMappingCreate) SetNillableCreatedByUserName(s *string) *ExamCategoryDisabilityMappingCreate {
	if s != nil {
		ecdmc.SetCreatedByUserName(*s)
	}
	return ecdmc
}

// SetCreatedByEmployeeId sets the "CreatedByEmployeeId" field.
func (ecdmc *ExamCategoryDisabilityMappingCreate) SetCreatedByEmployeeId(s string) *ExamCategoryDisabilityMappingCreate {
	ecdmc.mutation.SetCreatedByEmployeeId(s)
	return ecdmc
}

// SetNillableCreatedByEmployeeId sets the "CreatedByEmployeeId" field if the given value is not nil.
func (ecdmc *ExamCategoryDisabilityMappingCreate) SetNillableCreatedByEmployeeId(s *string) *ExamCategoryDisabilityMappingCreate {
	if s != nil {
		ecdmc.SetCreatedByEmployeeId(*s)
	}
	return ecdmc
}

// SetCreatedByDesignation sets the "CreatedByDesignation" field.
func (ecdmc *ExamCategoryDisabilityMappingCreate) SetCreatedByDesignation(s string) *ExamCategoryDisabilityMappingCreate {
	ecdmc.mutation.SetCreatedByDesignation(s)
	return ecdmc
}

// SetNillableCreatedByDesignation sets the "CreatedByDesignation" field if the given value is not nil.
func (ecdmc *ExamCategoryDisabilityMappingCreate) SetNillableCreatedByDesignation(s *string) *ExamCategoryDisabilityMappingCreate {
	if s != nil {
		ecdmc.SetCreatedByDesignation(*s)
	}
	return ecdmc
}

// SetCreatedDate sets the "CreatedDate" field.
func (ecdmc *ExamCategoryDisabilityMappingCreate) SetCreatedDate(t time.Time) *ExamCategoryDisabilityMappingCreate {
	ecdmc.mutation.SetCreatedDate(t)
	return ecdmc
}

// SetNillableCreatedDate sets the "CreatedDate" field if the given value is not nil.
func (ecdmc *ExamCategoryDisabilityMappingCreate) SetNillableCreatedDate(t *time.Time) *ExamCategoryDisabilityMappingCreate {
	if t != nil {
		ecdmc.SetCreatedDate(*t)
	}
	return ecdmc
}

// SetVerifiedById sets the "VerifiedById" field.
func (ecdmc *ExamCategoryDisabilityMappingCreate) SetVerifiedById(i int64) *ExamCategoryDisabilityMappingCreate {
	ecdmc.mutation.SetVerifiedById(i)
	return ecdmc
}

// SetNillableVerifiedById sets the "VerifiedById" field if the given value is not nil.
func (ecdmc *ExamCategoryDisabilityMappingCreate) SetNillableVerifiedById(i *int64) *ExamCategoryDisabilityMappingCreate {
	if i != nil {
		ecdmc.SetVerifiedById(*i)
	}
	return ecdmc
}

// SetVerifiedByUserName sets the "VerifiedByUserName" field.
func (ecdmc *ExamCategoryDisabilityMappingCreate) SetVerifiedByUserName(s string) *ExamCategoryDisabilityMappingCreate {
	ecdmc.mutation.SetVerifiedByUserName(s)
	return ecdmc
}

// SetNillableVerifiedByUserName sets the "VerifiedByUserName" field if the given value is not nil.
func (ecdmc *ExamCategoryDisabilityMappingCreate) SetNillableVerifiedByUserName(s *string) *ExamCategoryDisabilityMappingCreate {
	if s != nil {
		ecdmc.SetVerifiedByUserName(*s)
	}
	return ecdmc
}

// SetVerifiedByEmployeeId sets the "VerifiedByEmployeeId" field.
func (ecdmc *ExamCategoryDisabilityMappingCreate) SetVerifiedByEmployeeId(s string) *ExamCategoryDisabilityMappingCreate {
	ecdmc.mutation.SetVerifiedByEmployeeId(s)
	return ecdmc
}

// SetNillableVerifiedByEmployeeId sets the "VerifiedByEmployeeId" field if the given value is not nil.
func (ecdmc *ExamCategoryDisabilityMappingCreate) SetNillableVerifiedByEmployeeId(s *string) *ExamCategoryDisabilityMappingCreate {
	if s != nil {
		ecdmc.SetVerifiedByEmployeeId(*s)
	}
	return ecdmc
}

// SetVerifiedByDesignation sets the "VerifiedByDesignation" field.
func (ecdmc *ExamCategoryDisabilityMappingCreate) SetVerifiedByDesignation(s string) *ExamCategoryDisabilityMappingCreate {
	ecdmc.mutation.SetVerifiedByDesignation(s)
	return ecdmc
}

// SetNillableVerifiedByDesignation sets the "VerifiedByDesignation" field if the given value is not nil.
func (ecdmc *ExamCategoryDisabilityMappingCreate) SetNillableVerifiedByDesignation(s *string) *ExamCategoryDisabilityMappingCreate {
	if s != nil {
		ecdmc.SetVerifiedByDesignation(*s)
	}
	return ecdmc
}

// SetVerifiedDate sets the "VerifiedDate" field.
func (ecdmc *ExamCategoryDisabilityMappingCreate) SetVerifiedDate(t time.Time) *ExamCategoryDisabilityMappingCreate {
	ecdmc.mutation.SetVerifiedDate(t)
	return ecdmc
}

// SetNillableVerifiedDate sets the "VerifiedDate" field if the given value is not nil.
func (ecdmc *ExamCategoryDisabilityMappingCreate) SetNillableVerifiedDate(t *time.Time) *ExamCategoryDisabilityMappingCreate {
	if t != nil {
		ecdmc.SetVerifiedDate(*t)
	}
	return ecdmc
}

// SetDeletedById sets the "DeletedById" field.
func (ecdmc *ExamCategoryDisabilityMappingCreate) SetDeletedById(i int64) *ExamCategoryDisabilityMappingCreate {
	ecdmc.mutation.SetDeletedById(i)
	return ecdmc
}

// SetNillableDeletedById sets the "DeletedById" field if the given value is not nil.
func (ecdmc *ExamCategoryDisabilityMappingCreate) SetNillableDeletedById(i *int64) *ExamCategoryDisabilityMappingCreate {
	if i != nil {
		ecdmc.SetDeletedById(*i)
	}
	return ecdmc
}

// SetDeletedByUserName sets the "DeletedByUserName" field.
func (ecdmc *ExamCategoryDisabilityMappingCreate) SetDeletedByUserName(s string) *ExamCategoryDisabilityMappingCreate {
	ecdmc.mutation.SetDeletedByUserName(s)
	return ecdmc
}

// SetNillableDeletedByUserName sets the "DeletedByUserName" field if the given value is not nil.
func (ecdmc *ExamCategoryDisabilityMappingCreate) SetNillableDeletedByUserName(s *string) *ExamCategoryDisabilityMappingCreate {
	if s != nil {
		ecdmc.SetDeletedByUserName(*s)
	}
	return ecdmc
}

// SetDeletedByEmployeeId sets the "DeletedByEmployeeId" field.
func (ecdmc *ExamCategoryDisabilityMappingCreate) SetDeletedByEmployeeId(s string) *ExamCategoryDisabilityMappingCreate {
	ecdmc.mutation.SetDeletedByEmployeeId(s)
	return ecdmc
}

// SetNillableDeletedByEmployeeId sets the "DeletedByEmployeeId" field if the given value is not nil.
func (ecdmc *ExamCategoryDisabilityMappingCreate) SetNillableDeletedByEmployeeId(s *string) *ExamCategoryDisabilityMappingCreate {
	if s != nil {
		ecdmc.SetDeletedByEmployeeId(*s)
	}
	return ecdmc
}

// SetDeletedByDesignation sets the "DeletedByDesignation" field.
func (ecdmc *ExamCategoryDisabilityMappingCreate) SetDeletedByDesignation(s string) *ExamCategoryDisabilityMappingCreate {
	ecdmc.mutation.SetDeletedByDesignation(s)
	return ecdmc
}

// SetNillableDeletedByDesignation sets the "DeletedByDesignation" field if the given value is not nil.
func (ecdmc *ExamCategoryDisabilityMappingCreate) SetNillableDeletedByDesignation(s *string) *ExamCategoryDisabilityMappingCreate {
	if s != nil {
		ecdmc.SetDeletedByDesignation(*s)
	}
	return ecdmc
}

// SetDeletedDate sets the "DeletedDate" field.
func (ecdmc *ExamCategoryDisabilityMappingCreate) SetDeletedDate(t time.Time) *ExamCategoryDisabilityMappingCreate {
	ecdmc.mutation.SetDeletedDate(t)
	return ecdmc
}

// SetNillableDeletedDate sets the "DeletedDate" field if the given value is not nil.
func (ecdmc *ExamCategoryDisabilityMappingCreate) SetNillableDeletedDate(t *time.Time) *ExamCategoryDisabilityMappingCreate {
	if t != nil {
		ecdmc.SetDeletedDate(*t)
	}
	return ecdmc
}

// SetID sets the "id" field.
func (ecdmc *ExamCategoryDisabilityMappingCreate) SetID(i int32) *ExamCategoryDisabilityMappingCreate {
	ecdmc.mutation.SetID(i)
	return ecdmc
}

// Mutation returns the ExamCategoryDisabilityMappingMutation object of the builder.
func (ecdmc *ExamCategoryDisabilityMappingCreate) Mutation() *ExamCategoryDisabilityMappingMutation {
	return ecdmc.mutation
}

// Save creates the ExamCategoryDisabilityMapping in the database.
func (ecdmc *ExamCategoryDisabilityMappingCreate) Save(ctx context.Context) (*ExamCategoryDisabilityMapping, error) {
	ecdmc.defaults()
	return withHooks(ctx, ecdmc.sqlSave, ecdmc.mutation, ecdmc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ecdmc *ExamCategoryDisabilityMappingCreate) SaveX(ctx context.Context) *ExamCategoryDisabilityMapping {
	v, err := ecdmc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ecdmc *ExamCategoryDisabilityMappingCreate) Exec(ctx context.Context) error {
	_, err := ecdmc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ecdmc *ExamCategoryDisabilityMappingCreate) ExecX(ctx context.Context) {
	if err := ecdmc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ecdmc *ExamCategoryDisabilityMappingCreate) defaults() {
	if _, ok := ecdmc.mutation.ExamCode(); !ok {
		v := examcategorydisabilitymapping.DefaultExamCode
		ecdmc.mutation.SetExamCode(v)
	}
	if _, ok := ecdmc.mutation.AgeException(); !ok {
		v := examcategorydisabilitymapping.DefaultAgeException
		ecdmc.mutation.SetAgeException(v)
	}
	if _, ok := ecdmc.mutation.ServiceException(); !ok {
		v := examcategorydisabilitymapping.DefaultServiceException
		ecdmc.mutation.SetServiceException(v)
	}
	if _, ok := ecdmc.mutation.CreatedById(); !ok {
		v := examcategorydisabilitymapping.DefaultCreatedById
		ecdmc.mutation.SetCreatedById(v)
	}
	if _, ok := ecdmc.mutation.VerifiedById(); !ok {
		v := examcategorydisabilitymapping.DefaultVerifiedById
		ecdmc.mutation.SetVerifiedById(v)
	}
	if _, ok := ecdmc.mutation.DeletedById(); !ok {
		v := examcategorydisabilitymapping.DefaultDeletedById
		ecdmc.mutation.SetDeletedById(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ecdmc *ExamCategoryDisabilityMappingCreate) check() error {
	return nil
}

func (ecdmc *ExamCategoryDisabilityMappingCreate) sqlSave(ctx context.Context) (*ExamCategoryDisabilityMapping, error) {
	if err := ecdmc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ecdmc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ecdmc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int32(id)
	}
	ecdmc.mutation.id = &_node.ID
	ecdmc.mutation.done = true
	return _node, nil
}

func (ecdmc *ExamCategoryDisabilityMappingCreate) createSpec() (*ExamCategoryDisabilityMapping, *sqlgraph.CreateSpec) {
	var (
		_node = &ExamCategoryDisabilityMapping{config: ecdmc.config}
		_spec = sqlgraph.NewCreateSpec(examcategorydisabilitymapping.Table, sqlgraph.NewFieldSpec(examcategorydisabilitymapping.FieldID, field.TypeInt32))
	)
	if id, ok := ecdmc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ecdmc.mutation.ExamCode(); ok {
		_spec.SetField(examcategorydisabilitymapping.FieldExamCode, field.TypeInt64, value)
		_node.ExamCode = value
	}
	if value, ok := ecdmc.mutation.ExamShortName(); ok {
		_spec.SetField(examcategorydisabilitymapping.FieldExamShortName, field.TypeString, value)
		_node.ExamShortName = value
	}
	if value, ok := ecdmc.mutation.CategoryDisability(); ok {
		_spec.SetField(examcategorydisabilitymapping.FieldCategoryDisability, field.TypeString, value)
		_node.CategoryDisability = value
	}
	if value, ok := ecdmc.mutation.CategoryDisabilityCode(); ok {
		_spec.SetField(examcategorydisabilitymapping.FieldCategoryDisabilityCode, field.TypeString, value)
		_node.CategoryDisabilityCode = value
	}
	if value, ok := ecdmc.mutation.CategoryDisabilityDescription(); ok {
		_spec.SetField(examcategorydisabilitymapping.FieldCategoryDisabilityDescription, field.TypeString, value)
		_node.CategoryDisabilityDescription = value
	}
	if value, ok := ecdmc.mutation.AgeException(); ok {
		_spec.SetField(examcategorydisabilitymapping.FieldAgeException, field.TypeInt32, value)
		_node.AgeException = value
	}
	if value, ok := ecdmc.mutation.ServiceException(); ok {
		_spec.SetField(examcategorydisabilitymapping.FieldServiceException, field.TypeInt32, value)
		_node.ServiceException = value
	}
	if value, ok := ecdmc.mutation.DrivingLicense(); ok {
		_spec.SetField(examcategorydisabilitymapping.FieldDrivingLicense, field.TypeBool, value)
		_node.DrivingLicense = value
	}
	if value, ok := ecdmc.mutation.OrderNumber(); ok {
		_spec.SetField(examcategorydisabilitymapping.FieldOrderNumber, field.TypeString, value)
		_node.OrderNumber = value
	}
	if value, ok := ecdmc.mutation.Status(); ok {
		_spec.SetField(examcategorydisabilitymapping.FieldStatus, field.TypeString, value)
		_node.Status = value
	}
	if value, ok := ecdmc.mutation.CreatedById(); ok {
		_spec.SetField(examcategorydisabilitymapping.FieldCreatedById, field.TypeInt32, value)
		_node.CreatedById = value
	}
	if value, ok := ecdmc.mutation.CreatedByUserName(); ok {
		_spec.SetField(examcategorydisabilitymapping.FieldCreatedByUserName, field.TypeString, value)
		_node.CreatedByUserName = value
	}
	if value, ok := ecdmc.mutation.CreatedByEmployeeId(); ok {
		_spec.SetField(examcategorydisabilitymapping.FieldCreatedByEmployeeId, field.TypeString, value)
		_node.CreatedByEmployeeId = value
	}
	if value, ok := ecdmc.mutation.CreatedByDesignation(); ok {
		_spec.SetField(examcategorydisabilitymapping.FieldCreatedByDesignation, field.TypeString, value)
		_node.CreatedByDesignation = value
	}
	if value, ok := ecdmc.mutation.CreatedDate(); ok {
		_spec.SetField(examcategorydisabilitymapping.FieldCreatedDate, field.TypeTime, value)
		_node.CreatedDate = value
	}
	if value, ok := ecdmc.mutation.VerifiedById(); ok {
		_spec.SetField(examcategorydisabilitymapping.FieldVerifiedById, field.TypeInt64, value)
		_node.VerifiedById = value
	}
	if value, ok := ecdmc.mutation.VerifiedByUserName(); ok {
		_spec.SetField(examcategorydisabilitymapping.FieldVerifiedByUserName, field.TypeString, value)
		_node.VerifiedByUserName = value
	}
	if value, ok := ecdmc.mutation.VerifiedByEmployeeId(); ok {
		_spec.SetField(examcategorydisabilitymapping.FieldVerifiedByEmployeeId, field.TypeString, value)
		_node.VerifiedByEmployeeId = value
	}
	if value, ok := ecdmc.mutation.VerifiedByDesignation(); ok {
		_spec.SetField(examcategorydisabilitymapping.FieldVerifiedByDesignation, field.TypeString, value)
		_node.VerifiedByDesignation = value
	}
	if value, ok := ecdmc.mutation.VerifiedDate(); ok {
		_spec.SetField(examcategorydisabilitymapping.FieldVerifiedDate, field.TypeTime, value)
		_node.VerifiedDate = value
	}
	if value, ok := ecdmc.mutation.DeletedById(); ok {
		_spec.SetField(examcategorydisabilitymapping.FieldDeletedById, field.TypeInt64, value)
		_node.DeletedById = value
	}
	if value, ok := ecdmc.mutation.DeletedByUserName(); ok {
		_spec.SetField(examcategorydisabilitymapping.FieldDeletedByUserName, field.TypeString, value)
		_node.DeletedByUserName = value
	}
	if value, ok := ecdmc.mutation.DeletedByEmployeeId(); ok {
		_spec.SetField(examcategorydisabilitymapping.FieldDeletedByEmployeeId, field.TypeString, value)
		_node.DeletedByEmployeeId = value
	}
	if value, ok := ecdmc.mutation.DeletedByDesignation(); ok {
		_spec.SetField(examcategorydisabilitymapping.FieldDeletedByDesignation, field.TypeString, value)
		_node.DeletedByDesignation = value
	}
	if value, ok := ecdmc.mutation.DeletedDate(); ok {
		_spec.SetField(examcategorydisabilitymapping.FieldDeletedDate, field.TypeTime, value)
		_node.DeletedDate = value
	}
	return _node, _spec
}

// ExamCategoryDisabilityMappingCreateBulk is the builder for creating many ExamCategoryDisabilityMapping entities in bulk.
type ExamCategoryDisabilityMappingCreateBulk struct {
	config
	builders []*ExamCategoryDisabilityMappingCreate
}

// Save creates the ExamCategoryDisabilityMapping entities in the database.
func (ecdmcb *ExamCategoryDisabilityMappingCreateBulk) Save(ctx context.Context) ([]*ExamCategoryDisabilityMapping, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ecdmcb.builders))
	nodes := make([]*ExamCategoryDisabilityMapping, len(ecdmcb.builders))
	mutators := make([]Mutator, len(ecdmcb.builders))
	for i := range ecdmcb.builders {
		func(i int, root context.Context) {
			builder := ecdmcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ExamCategoryDisabilityMappingMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ecdmcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ecdmcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ecdmcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ecdmcb *ExamCategoryDisabilityMappingCreateBulk) SaveX(ctx context.Context) []*ExamCategoryDisabilityMapping {
	v, err := ecdmcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ecdmcb *ExamCategoryDisabilityMappingCreateBulk) Exec(ctx context.Context) error {
	_, err := ecdmcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ecdmcb *ExamCategoryDisabilityMappingCreateBulk) ExecX(ctx context.Context) {
	if err := ecdmcb.Exec(ctx); err != nil {
		panic(err)
	}
}
