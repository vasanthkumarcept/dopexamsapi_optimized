// Code generated by entimport, DO NOT EDIT.

package schema

import (
	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/entsql"
	"entgo.io/ent/schema"
	"entgo.io/ent/schema/edge"
	"entgo.io/ent/schema/field"
	"time"
)

type ExamCenterHall struct {
	ent.Schema
}

func (ExamCenterHall) Fields() []ent.Field {
	return []ent.Field{field.Int32("id").StorageKey("ExamCenterHall"),
	field.Int32("CenterCode").Optional().Default(0), 
	field.Int32("CityID").Optional().Default(0), 
	field.String("ExamCenterName").Optional(), 
	field.String("ExamYear").Optional(),
	field.Int32("ExamCode").Optional().Default(0),
	field.String("ExamName").Optional(),
	field.String("CenterCityName").Optional(),
	field.String("ConductedByFacilityID").Optional(),
	field.String("ConductedBy").Optional(),
	field.String("HallName").Optional(),
	field.String("AdminCircleOfficeID").Optional(),
	//field.JSON("MappingIdentificationNumber", []interface{}{}).	Optional(),
	field.JSON("MappingIdentificationNumber", []StrucMappingIdentificationNumber{}).Optional(),
	//field.String("NodalOfficeFacilityId").Optional(), 
	//field.Int32("StartNo").Optional().Default(0),
	//field.Int32("EndNo").Optional().Default(0),
	field.String("Status").Default("active").Optional(),
	field.Int64("CreatedById").Optional().Default(0),
	field.String("CreatedByUserName").Optional(),
	field.Int64("CreatedByEmpId").Optional().Default(0),
	field.String("CreatedByDesignation").Optional(),
	field.Time("CreatedDate").SchemaType(map[string]string{
		dialect.Postgres: "timestamp",
	}).Default(time.Now).Optional(),

	field.Int64("ModifiedById").Optional().Default(0),
	field.String("ModifiedByUserName").Optional(),
	field.Int64("ModifiedByEmpId").Optional().Default(0),
	field.String("ModifiedByDesignantion").Optional(),
	field.Time("ModifiedDate").SchemaType(map[string]string{
		dialect.Postgres: "timestamp",
	}).Default(time.Now).Optional(),

	field.Int64("DeletedById").Optional().Default(0),
	field.String("DeletedByUserName").Optional(),
	field.Int64("DeletedByEmpId").Optional().Default(0),
	field.String("DeletedByDesignation").Optional(),
	field.Time("DeletedDate").SchemaType(map[string]string{
		dialect.Postgres: "timestamp",
	}).Default(time.Now).Optional(),
	field.Time("UpdatedAt").SchemaType(map[string]string{
		dialect.Postgres: "timestamp",
	}).Optional(),
	field.Int32("NoSeats").Optional().Default(0), 

	
}
}
func (ExamCenterHall) Edges() []ent.Edge {
	return []ent.Edge{
		//edge.To("ExamCenterHallIPRef", Exam_Applications_IP.Type),		
		//edge.To("ExamCenterHallPSRef", Exam_Applications_PS.Type),		
		//edge.To("ExamCenterHallGDSPARef", Exam_Applications_GDSPA.Type),		
		//edge.To("ExamCenterHallGDSPMRef", Exam_Applications_GDSPM.Type),		
		//edge.To("ExamCenterHallMTSPMMGRef", Exam_Application_MTSPMMG.Type),		
		//edge.To("ExamCenterHallPMPARef", Exam_Applications_PMPA.Type),		
		edge.From("ExaCenterHall", Center.Type). Ref("ExaCenterHallRef").Unique().Field("CenterCode"),
	
		
	
}
}

type StrucMappingIdentificationNumber struct {
	NodalOfficeFacilityId string `json:"nodal_office_facility_id"`
	StartNo               int32  `json:"start_no"`
	EndNo                 int32  `json:"end_no"`
}
func (ExamCenterHall) Annotations() []schema.Annotation {
	return []schema.Annotation{entsql.Annotation{Table: "ExamCenterHall"}}
}
