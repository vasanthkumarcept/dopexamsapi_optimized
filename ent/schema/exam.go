// Code generated by entimport, DO NOT EDIT.

package schema

import (
	//"crypto/internal/edwards25519/field"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/entsql"
	"entgo.io/ent/schema"
	"entgo.io/ent/schema/edge"
	"entgo.io/ent/schema/field"
)

// Exam holds the schema definition for the Exam entity.
type Exam struct {
	ent.Schema
}

/// Fields of the Exam.
func (Exam) Fields() []ent.Field {
	return []ent.Field{field.Int32("id").StorageKey("UniqueID"), 
	field.String("ExamType"),
	field.String("ExamName"),
	field.String("ExamShortName").Optional(), 
	field.String("SmsExamShortName").Optional(), 
	field.Int32("ExamCode").Optional().Default(0), 
	field.String("CalenderIssuedBy").Optional(),
	field.String("NotificationBy"),
	field.String("ConductedBy"),
	field.String("NodalOfficerLevel").Optional(),
	field.Bool("TentativeNotificationMandatoryDate").Default(false),
	field.Bool("LocalLanguage").Default(false),
	field.Bool("OptionForPost").Default(false),
	field.Bool("OptionToWriteExamOtherThanParent").Default(false),
	field.String("TableName").Optional(),
	field.String("OrderNumber").Optional(),
		field.Int64("CreatedById").Optional().Default(0),
		field.String("CreatedByUserName").Optional(),
		field.Int64("CreatedByEmpId").Optional().Default(0),
		field.String("CreatedByDesignation").Optional(),
		field.Time("CreatedDate").SchemaType(map[string]string{
			dialect.Postgres: "date",
		}).Optional(),
		field.Int64("verifiedbyid").Optional().Default(0),
		field.String("verifiedbyusername").Optional(),
		field.Int64("verifiedbyEmployeeid").Optional().Default(0),
		field.String("verifiedbyDesignation").Optional(),
		field.Time("verifiedDate").SchemaType(map[string]string{
			dialect.Postgres: "date",
		}).Optional(),
		field.String("Statuss").Default("active").Optional(),
		field.Int64("deletedbyid").Optional().Default(0),
		field.String("deletedbyusername").Optional(),
		field.Int64("deletedbyEmployeeid").Optional().Default(0),
		field.String("deletedbyDesignation").Optional(),
		field.Time("deletedDate").SchemaType(map[string]string{
			dialect.Postgres: "date",
		}).Optional(),

	field.Int32("NumOfPapers"),
		field.Int32("CalendarCode").Optional().Default(0),
		field.Int32("PaperCode").Optional().Default(0),
	
		
		
		
		
		
		
		field.String("Status"),
		field.Int32("ExamTypeCode").Optional().Default(0),
		
		field.String("CreatedByEmployeeId").Optional(),
// 	

		}	


}

// Edges of the Exam.
func (Exam) Edges() []ent.Edge {
	return []ent.Edge{//edge.From(
		//"employee_cadre", EmployeeCadre.Type).Ref("exams").Unique().Field("NodalOfficerLevel"),
	//edge.To("nodal_officers", NodalOfficer.Type),
	edge.To("notifications", Notification.Type),
	//edge.To("exam", Exam.Type).Ref("papers").Unique().Field("ExamCode"),
	edge.To("exams_ref", ExamCalendar.Type),
	edge.To("papers", ExamPapers.Type),
	edge.To("ExamEligibility", EligibilityMaster.Type),
	edge.To("exams_type", ExamType.Type),
	edge.To("examcentresip" , Center.Type),
	edge.To("ExamMasterRef" , Exam_Applications_IP.Type),
	edge.To("ExamMasterRefPS" , Exam_Applications_PS.Type),
	edge.To("Exam_Notifications_Ref", ExamNotifications.Type),
	edge.To("ExamMasterRefGDSPA" , Exam_Applications_GDSPA.Type),
	edge.To("ExamMasterRefGDSPM" , Exam_Applications_GDSPM.Type),
	edge.To("ExamMasterRefPMPA" , Exam_Applications_PMPA.Type),
	edge.To("ExamMasterRefMTSPMMG", Exam_Application_MTSPMMG.Type),
	//edge.To("exams", ExamCityCenter.Type),
	edge.To("LogData", Logs.Type),
	} 

}
func (Exam) Annotations() []schema.Annotation {
	return []schema.Annotation{entsql.Annotation{Table: "Exam"}}
}
