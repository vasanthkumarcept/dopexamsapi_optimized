// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"recruit/ent/predicate"
	"recruit/ent/recommendationsipapplications"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// RecommendationsIPApplicationsDelete is the builder for deleting a RecommendationsIPApplications entity.
type RecommendationsIPApplicationsDelete struct {
	config
	hooks    []Hook
	mutation *RecommendationsIPApplicationsMutation
}

// Where appends a list predicates to the RecommendationsIPApplicationsDelete builder.
func (riad *RecommendationsIPApplicationsDelete) Where(ps ...predicate.RecommendationsIPApplications) *RecommendationsIPApplicationsDelete {
	riad.mutation.Where(ps...)
	return riad
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (riad *RecommendationsIPApplicationsDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, riad.sqlExec, riad.mutation, riad.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (riad *RecommendationsIPApplicationsDelete) ExecX(ctx context.Context) int {
	n, err := riad.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (riad *RecommendationsIPApplicationsDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(recommendationsipapplications.Table, sqlgraph.NewFieldSpec(recommendationsipapplications.FieldID, field.TypeInt64))
	if ps := riad.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, riad.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	riad.mutation.done = true
	return affected, err
}

// RecommendationsIPApplicationsDeleteOne is the builder for deleting a single RecommendationsIPApplications entity.
type RecommendationsIPApplicationsDeleteOne struct {
	riad *RecommendationsIPApplicationsDelete
}

// Where appends a list predicates to the RecommendationsIPApplicationsDelete builder.
func (riado *RecommendationsIPApplicationsDeleteOne) Where(ps ...predicate.RecommendationsIPApplications) *RecommendationsIPApplicationsDeleteOne {
	riado.riad.mutation.Where(ps...)
	return riado
}

// Exec executes the deletion query.
func (riado *RecommendationsIPApplicationsDeleteOne) Exec(ctx context.Context) error {
	n, err := riado.riad.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{recommendationsipapplications.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (riado *RecommendationsIPApplicationsDeleteOne) ExecX(ctx context.Context) {
	if err := riado.Exec(ctx); err != nil {
		panic(err)
	}
}
