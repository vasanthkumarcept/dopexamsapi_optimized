// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"recruit/ent/user"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserCreate is the builder for creating a User entity.
type UserCreate struct {
	config
	mutation *UserMutation
	hooks    []Hook
}

// SetEmployeedID sets the "EmployeedID" field.
func (uc *UserCreate) SetEmployeedID(s string) *UserCreate {
	uc.mutation.SetEmployeedID(s)
	return uc
}

// SetIDVerified sets the "IDVerified" field.
func (uc *UserCreate) SetIDVerified(b bool) *UserCreate {
	uc.mutation.SetIDVerified(b)
	return uc
}

// SetNillableIDVerified sets the "IDVerified" field if the given value is not nil.
func (uc *UserCreate) SetNillableIDVerified(b *bool) *UserCreate {
	if b != nil {
		uc.SetIDVerified(*b)
	}
	return uc
}

// SetIDRemStatus sets the "IDRemStatus" field.
func (uc *UserCreate) SetIDRemStatus(b bool) *UserCreate {
	uc.mutation.SetIDRemStatus(b)
	return uc
}

// SetNillableIDRemStatus sets the "IDRemStatus" field if the given value is not nil.
func (uc *UserCreate) SetNillableIDRemStatus(b *bool) *UserCreate {
	if b != nil {
		uc.SetIDRemStatus(*b)
	}
	return uc
}

// SetIDRemarks sets the "IDRemarks" field.
func (uc *UserCreate) SetIDRemarks(s string) *UserCreate {
	uc.mutation.SetIDRemarks(s)
	return uc
}

// SetEmployeedName sets the "EmployeedName" field.
func (uc *UserCreate) SetEmployeedName(s string) *UserCreate {
	uc.mutation.SetEmployeedName(s)
	return uc
}

// SetNameVerified sets the "nameVerified" field.
func (uc *UserCreate) SetNameVerified(b bool) *UserCreate {
	uc.mutation.SetNameVerified(b)
	return uc
}

// SetNillableNameVerified sets the "nameVerified" field if the given value is not nil.
func (uc *UserCreate) SetNillableNameVerified(b *bool) *UserCreate {
	if b != nil {
		uc.SetNameVerified(*b)
	}
	return uc
}

// SetNameRemStatus sets the "nameRemStatus" field.
func (uc *UserCreate) SetNameRemStatus(b bool) *UserCreate {
	uc.mutation.SetNameRemStatus(b)
	return uc
}

// SetNillableNameRemStatus sets the "nameRemStatus" field if the given value is not nil.
func (uc *UserCreate) SetNillableNameRemStatus(b *bool) *UserCreate {
	if b != nil {
		uc.SetNameRemStatus(*b)
	}
	return uc
}

// SetNameRemarks sets the "nameRemarks" field.
func (uc *UserCreate) SetNameRemarks(s string) *UserCreate {
	uc.mutation.SetNameRemarks(s)
	return uc
}

// SetDOB sets the "DOB" field.
func (uc *UserCreate) SetDOB(t time.Time) *UserCreate {
	uc.mutation.SetDOB(t)
	return uc
}

// SetDOBVerified sets the "DOBVerified" field.
func (uc *UserCreate) SetDOBVerified(b bool) *UserCreate {
	uc.mutation.SetDOBVerified(b)
	return uc
}

// SetNillableDOBVerified sets the "DOBVerified" field if the given value is not nil.
func (uc *UserCreate) SetNillableDOBVerified(b *bool) *UserCreate {
	if b != nil {
		uc.SetDOBVerified(*b)
	}
	return uc
}

// SetDOBRemStatus sets the "DOBRemStatus" field.
func (uc *UserCreate) SetDOBRemStatus(b bool) *UserCreate {
	uc.mutation.SetDOBRemStatus(b)
	return uc
}

// SetNillableDOBRemStatus sets the "DOBRemStatus" field if the given value is not nil.
func (uc *UserCreate) SetNillableDOBRemStatus(b *bool) *UserCreate {
	if b != nil {
		uc.SetDOBRemStatus(*b)
	}
	return uc
}

// SetDOBRemarks sets the "DOBRemarks" field.
func (uc *UserCreate) SetDOBRemarks(s string) *UserCreate {
	uc.mutation.SetDOBRemarks(s)
	return uc
}

// SetGender sets the "Gender" field.
func (uc *UserCreate) SetGender(u user.Gender) *UserCreate {
	uc.mutation.SetGender(u)
	return uc
}

// SetGenderVerified sets the "genderVerified" field.
func (uc *UserCreate) SetGenderVerified(b bool) *UserCreate {
	uc.mutation.SetGenderVerified(b)
	return uc
}

// SetNillableGenderVerified sets the "genderVerified" field if the given value is not nil.
func (uc *UserCreate) SetNillableGenderVerified(b *bool) *UserCreate {
	if b != nil {
		uc.SetGenderVerified(*b)
	}
	return uc
}

// SetGenderRemStatus sets the "genderRemStatus" field.
func (uc *UserCreate) SetGenderRemStatus(b bool) *UserCreate {
	uc.mutation.SetGenderRemStatus(b)
	return uc
}

// SetNillableGenderRemStatus sets the "genderRemStatus" field if the given value is not nil.
func (uc *UserCreate) SetNillableGenderRemStatus(b *bool) *UserCreate {
	if b != nil {
		uc.SetGenderRemStatus(*b)
	}
	return uc
}

// SetGenderRemarks sets the "genderRemarks" field.
func (uc *UserCreate) SetGenderRemarks(s string) *UserCreate {
	uc.mutation.SetGenderRemarks(s)
	return uc
}

// SetCadreid sets the "Cadreid" field.
func (uc *UserCreate) SetCadreid(i int32) *UserCreate {
	uc.mutation.SetCadreid(i)
	return uc
}

// SetCadreidVerified sets the "cadreidVerified" field.
func (uc *UserCreate) SetCadreidVerified(b bool) *UserCreate {
	uc.mutation.SetCadreidVerified(b)
	return uc
}

// SetNillableCadreidVerified sets the "cadreidVerified" field if the given value is not nil.
func (uc *UserCreate) SetNillableCadreidVerified(b *bool) *UserCreate {
	if b != nil {
		uc.SetCadreidVerified(*b)
	}
	return uc
}

// SetCadreidRemStatus sets the "cadreidRemStatus" field.
func (uc *UserCreate) SetCadreidRemStatus(b bool) *UserCreate {
	uc.mutation.SetCadreidRemStatus(b)
	return uc
}

// SetNillableCadreidRemStatus sets the "cadreidRemStatus" field if the given value is not nil.
func (uc *UserCreate) SetNillableCadreidRemStatus(b *bool) *UserCreate {
	if b != nil {
		uc.SetCadreidRemStatus(*b)
	}
	return uc
}

// SetCadreidRemarks sets the "cadreidRemarks" field.
func (uc *UserCreate) SetCadreidRemarks(s string) *UserCreate {
	uc.mutation.SetCadreidRemarks(s)
	return uc
}

// SetOfficeID sets the "OfficeID" field.
func (uc *UserCreate) SetOfficeID(i int32) *UserCreate {
	uc.mutation.SetOfficeID(i)
	return uc
}

// SetOfficeIDVerified sets the "officeIDVerified" field.
func (uc *UserCreate) SetOfficeIDVerified(b bool) *UserCreate {
	uc.mutation.SetOfficeIDVerified(b)
	return uc
}

// SetNillableOfficeIDVerified sets the "officeIDVerified" field if the given value is not nil.
func (uc *UserCreate) SetNillableOfficeIDVerified(b *bool) *UserCreate {
	if b != nil {
		uc.SetOfficeIDVerified(*b)
	}
	return uc
}

// SetOfficeIDRemStatus sets the "officeIDRemStatus" field.
func (uc *UserCreate) SetOfficeIDRemStatus(b bool) *UserCreate {
	uc.mutation.SetOfficeIDRemStatus(b)
	return uc
}

// SetNillableOfficeIDRemStatus sets the "officeIDRemStatus" field if the given value is not nil.
func (uc *UserCreate) SetNillableOfficeIDRemStatus(b *bool) *UserCreate {
	if b != nil {
		uc.SetOfficeIDRemStatus(*b)
	}
	return uc
}

// SetOfficeIDRemarks sets the "officeIDRemarks" field.
func (uc *UserCreate) SetOfficeIDRemarks(s string) *UserCreate {
	uc.mutation.SetOfficeIDRemarks(s)
	return uc
}

// SetPH sets the "PH" field.
func (uc *UserCreate) SetPH(b bool) *UserCreate {
	uc.mutation.SetPH(b)
	return uc
}

// SetPHVerified sets the "PHVerified" field.
func (uc *UserCreate) SetPHVerified(b bool) *UserCreate {
	uc.mutation.SetPHVerified(b)
	return uc
}

// SetNillablePHVerified sets the "PHVerified" field if the given value is not nil.
func (uc *UserCreate) SetNillablePHVerified(b *bool) *UserCreate {
	if b != nil {
		uc.SetPHVerified(*b)
	}
	return uc
}

// SetPHRemStatus sets the "PHRemStatus" field.
func (uc *UserCreate) SetPHRemStatus(b bool) *UserCreate {
	uc.mutation.SetPHRemStatus(b)
	return uc
}

// SetNillablePHRemStatus sets the "PHRemStatus" field if the given value is not nil.
func (uc *UserCreate) SetNillablePHRemStatus(b *bool) *UserCreate {
	if b != nil {
		uc.SetPHRemStatus(*b)
	}
	return uc
}

// SetPHRemarks sets the "PHRemarks" field.
func (uc *UserCreate) SetPHRemarks(s string) *UserCreate {
	uc.mutation.SetPHRemarks(s)
	return uc
}

// SetPHDetails sets the "PHDetails" field.
func (uc *UserCreate) SetPHDetails(s string) *UserCreate {
	uc.mutation.SetPHDetails(s)
	return uc
}

// SetNillablePHDetails sets the "PHDetails" field if the given value is not nil.
func (uc *UserCreate) SetNillablePHDetails(s *string) *UserCreate {
	if s != nil {
		uc.SetPHDetails(*s)
	}
	return uc
}

// SetPHDetailsVerified sets the "PHDetailsVerified" field.
func (uc *UserCreate) SetPHDetailsVerified(b bool) *UserCreate {
	uc.mutation.SetPHDetailsVerified(b)
	return uc
}

// SetNillablePHDetailsVerified sets the "PHDetailsVerified" field if the given value is not nil.
func (uc *UserCreate) SetNillablePHDetailsVerified(b *bool) *UserCreate {
	if b != nil {
		uc.SetPHDetailsVerified(*b)
	}
	return uc
}

// SetPHDetailsRemStatus sets the "PHDetailsRemStatus" field.
func (uc *UserCreate) SetPHDetailsRemStatus(b bool) *UserCreate {
	uc.mutation.SetPHDetailsRemStatus(b)
	return uc
}

// SetNillablePHDetailsRemStatus sets the "PHDetailsRemStatus" field if the given value is not nil.
func (uc *UserCreate) SetNillablePHDetailsRemStatus(b *bool) *UserCreate {
	if b != nil {
		uc.SetPHDetailsRemStatus(*b)
	}
	return uc
}

// SetPHDetailsRemarks sets the "PHDetailsRemarks" field.
func (uc *UserCreate) SetPHDetailsRemarks(s string) *UserCreate {
	uc.mutation.SetPHDetailsRemarks(s)
	return uc
}

// SetAPSWorking sets the "APSWorking" field.
func (uc *UserCreate) SetAPSWorking(b bool) *UserCreate {
	uc.mutation.SetAPSWorking(b)
	return uc
}

// SetAPSWorkingVerified sets the "APSWorkingVerified" field.
func (uc *UserCreate) SetAPSWorkingVerified(b bool) *UserCreate {
	uc.mutation.SetAPSWorkingVerified(b)
	return uc
}

// SetNillableAPSWorkingVerified sets the "APSWorkingVerified" field if the given value is not nil.
func (uc *UserCreate) SetNillableAPSWorkingVerified(b *bool) *UserCreate {
	if b != nil {
		uc.SetAPSWorkingVerified(*b)
	}
	return uc
}

// SetAPSWorkingRemStatus sets the "APSWorkingRemStatus" field.
func (uc *UserCreate) SetAPSWorkingRemStatus(b bool) *UserCreate {
	uc.mutation.SetAPSWorkingRemStatus(b)
	return uc
}

// SetNillableAPSWorkingRemStatus sets the "APSWorkingRemStatus" field if the given value is not nil.
func (uc *UserCreate) SetNillableAPSWorkingRemStatus(b *bool) *UserCreate {
	if b != nil {
		uc.SetAPSWorkingRemStatus(*b)
	}
	return uc
}

// SetAPSWorkingRemarks sets the "APSWorkingRemarks" field.
func (uc *UserCreate) SetAPSWorkingRemarks(s string) *UserCreate {
	uc.mutation.SetAPSWorkingRemarks(s)
	return uc
}

// SetProfilestatus sets the "profilestatus" field.
func (uc *UserCreate) SetProfilestatus(b bool) *UserCreate {
	uc.mutation.SetProfilestatus(b)
	return uc
}

// SetNillableProfilestatus sets the "profilestatus" field if the given value is not nil.
func (uc *UserCreate) SetNillableProfilestatus(b *bool) *UserCreate {
	if b != nil {
		uc.SetProfilestatus(*b)
	}
	return uc
}

// Mutation returns the UserMutation object of the builder.
func (uc *UserCreate) Mutation() *UserMutation {
	return uc.mutation
}

// Save creates the User in the database.
func (uc *UserCreate) Save(ctx context.Context) (*User, error) {
	uc.defaults()
	return withHooks(ctx, uc.sqlSave, uc.mutation, uc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (uc *UserCreate) SaveX(ctx context.Context) *User {
	v, err := uc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (uc *UserCreate) Exec(ctx context.Context) error {
	_, err := uc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uc *UserCreate) ExecX(ctx context.Context) {
	if err := uc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uc *UserCreate) defaults() {
	if _, ok := uc.mutation.IDVerified(); !ok {
		v := user.DefaultIDVerified
		uc.mutation.SetIDVerified(v)
	}
	if _, ok := uc.mutation.IDRemStatus(); !ok {
		v := user.DefaultIDRemStatus
		uc.mutation.SetIDRemStatus(v)
	}
	if _, ok := uc.mutation.NameVerified(); !ok {
		v := user.DefaultNameVerified
		uc.mutation.SetNameVerified(v)
	}
	if _, ok := uc.mutation.NameRemStatus(); !ok {
		v := user.DefaultNameRemStatus
		uc.mutation.SetNameRemStatus(v)
	}
	if _, ok := uc.mutation.DOBVerified(); !ok {
		v := user.DefaultDOBVerified
		uc.mutation.SetDOBVerified(v)
	}
	if _, ok := uc.mutation.DOBRemStatus(); !ok {
		v := user.DefaultDOBRemStatus
		uc.mutation.SetDOBRemStatus(v)
	}
	if _, ok := uc.mutation.GenderVerified(); !ok {
		v := user.DefaultGenderVerified
		uc.mutation.SetGenderVerified(v)
	}
	if _, ok := uc.mutation.GenderRemStatus(); !ok {
		v := user.DefaultGenderRemStatus
		uc.mutation.SetGenderRemStatus(v)
	}
	if _, ok := uc.mutation.CadreidVerified(); !ok {
		v := user.DefaultCadreidVerified
		uc.mutation.SetCadreidVerified(v)
	}
	if _, ok := uc.mutation.CadreidRemStatus(); !ok {
		v := user.DefaultCadreidRemStatus
		uc.mutation.SetCadreidRemStatus(v)
	}
	if _, ok := uc.mutation.OfficeIDVerified(); !ok {
		v := user.DefaultOfficeIDVerified
		uc.mutation.SetOfficeIDVerified(v)
	}
	if _, ok := uc.mutation.OfficeIDRemStatus(); !ok {
		v := user.DefaultOfficeIDRemStatus
		uc.mutation.SetOfficeIDRemStatus(v)
	}
	if _, ok := uc.mutation.PHVerified(); !ok {
		v := user.DefaultPHVerified
		uc.mutation.SetPHVerified(v)
	}
	if _, ok := uc.mutation.PHRemStatus(); !ok {
		v := user.DefaultPHRemStatus
		uc.mutation.SetPHRemStatus(v)
	}
	if _, ok := uc.mutation.PHDetailsVerified(); !ok {
		v := user.DefaultPHDetailsVerified
		uc.mutation.SetPHDetailsVerified(v)
	}
	if _, ok := uc.mutation.PHDetailsRemStatus(); !ok {
		v := user.DefaultPHDetailsRemStatus
		uc.mutation.SetPHDetailsRemStatus(v)
	}
	if _, ok := uc.mutation.APSWorkingVerified(); !ok {
		v := user.DefaultAPSWorkingVerified
		uc.mutation.SetAPSWorkingVerified(v)
	}
	if _, ok := uc.mutation.APSWorkingRemStatus(); !ok {
		v := user.DefaultAPSWorkingRemStatus
		uc.mutation.SetAPSWorkingRemStatus(v)
	}
	if _, ok := uc.mutation.Profilestatus(); !ok {
		v := user.DefaultProfilestatus
		uc.mutation.SetProfilestatus(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uc *UserCreate) check() error {
	if _, ok := uc.mutation.EmployeedID(); !ok {
		return &ValidationError{Name: "EmployeedID", err: errors.New(`ent: missing required field "User.EmployeedID"`)}
	}
	if _, ok := uc.mutation.IDVerified(); !ok {
		return &ValidationError{Name: "IDVerified", err: errors.New(`ent: missing required field "User.IDVerified"`)}
	}
	if _, ok := uc.mutation.IDRemStatus(); !ok {
		return &ValidationError{Name: "IDRemStatus", err: errors.New(`ent: missing required field "User.IDRemStatus"`)}
	}
	if _, ok := uc.mutation.IDRemarks(); !ok {
		return &ValidationError{Name: "IDRemarks", err: errors.New(`ent: missing required field "User.IDRemarks"`)}
	}
	if _, ok := uc.mutation.EmployeedName(); !ok {
		return &ValidationError{Name: "EmployeedName", err: errors.New(`ent: missing required field "User.EmployeedName"`)}
	}
	if _, ok := uc.mutation.NameVerified(); !ok {
		return &ValidationError{Name: "nameVerified", err: errors.New(`ent: missing required field "User.nameVerified"`)}
	}
	if _, ok := uc.mutation.NameRemStatus(); !ok {
		return &ValidationError{Name: "nameRemStatus", err: errors.New(`ent: missing required field "User.nameRemStatus"`)}
	}
	if _, ok := uc.mutation.NameRemarks(); !ok {
		return &ValidationError{Name: "nameRemarks", err: errors.New(`ent: missing required field "User.nameRemarks"`)}
	}
	if _, ok := uc.mutation.DOB(); !ok {
		return &ValidationError{Name: "DOB", err: errors.New(`ent: missing required field "User.DOB"`)}
	}
	if _, ok := uc.mutation.DOBVerified(); !ok {
		return &ValidationError{Name: "DOBVerified", err: errors.New(`ent: missing required field "User.DOBVerified"`)}
	}
	if _, ok := uc.mutation.DOBRemStatus(); !ok {
		return &ValidationError{Name: "DOBRemStatus", err: errors.New(`ent: missing required field "User.DOBRemStatus"`)}
	}
	if _, ok := uc.mutation.DOBRemarks(); !ok {
		return &ValidationError{Name: "DOBRemarks", err: errors.New(`ent: missing required field "User.DOBRemarks"`)}
	}
	if _, ok := uc.mutation.Gender(); !ok {
		return &ValidationError{Name: "Gender", err: errors.New(`ent: missing required field "User.Gender"`)}
	}
	if v, ok := uc.mutation.Gender(); ok {
		if err := user.GenderValidator(v); err != nil {
			return &ValidationError{Name: "Gender", err: fmt.Errorf(`ent: validator failed for field "User.Gender": %w`, err)}
		}
	}
	if _, ok := uc.mutation.GenderVerified(); !ok {
		return &ValidationError{Name: "genderVerified", err: errors.New(`ent: missing required field "User.genderVerified"`)}
	}
	if _, ok := uc.mutation.GenderRemStatus(); !ok {
		return &ValidationError{Name: "genderRemStatus", err: errors.New(`ent: missing required field "User.genderRemStatus"`)}
	}
	if _, ok := uc.mutation.GenderRemarks(); !ok {
		return &ValidationError{Name: "genderRemarks", err: errors.New(`ent: missing required field "User.genderRemarks"`)}
	}
	if _, ok := uc.mutation.Cadreid(); !ok {
		return &ValidationError{Name: "Cadreid", err: errors.New(`ent: missing required field "User.Cadreid"`)}
	}
	if _, ok := uc.mutation.CadreidVerified(); !ok {
		return &ValidationError{Name: "cadreidVerified", err: errors.New(`ent: missing required field "User.cadreidVerified"`)}
	}
	if _, ok := uc.mutation.CadreidRemStatus(); !ok {
		return &ValidationError{Name: "cadreidRemStatus", err: errors.New(`ent: missing required field "User.cadreidRemStatus"`)}
	}
	if _, ok := uc.mutation.CadreidRemarks(); !ok {
		return &ValidationError{Name: "cadreidRemarks", err: errors.New(`ent: missing required field "User.cadreidRemarks"`)}
	}
	if _, ok := uc.mutation.OfficeID(); !ok {
		return &ValidationError{Name: "OfficeID", err: errors.New(`ent: missing required field "User.OfficeID"`)}
	}
	if _, ok := uc.mutation.OfficeIDVerified(); !ok {
		return &ValidationError{Name: "officeIDVerified", err: errors.New(`ent: missing required field "User.officeIDVerified"`)}
	}
	if _, ok := uc.mutation.OfficeIDRemStatus(); !ok {
		return &ValidationError{Name: "officeIDRemStatus", err: errors.New(`ent: missing required field "User.officeIDRemStatus"`)}
	}
	if _, ok := uc.mutation.OfficeIDRemarks(); !ok {
		return &ValidationError{Name: "officeIDRemarks", err: errors.New(`ent: missing required field "User.officeIDRemarks"`)}
	}
	if _, ok := uc.mutation.PH(); !ok {
		return &ValidationError{Name: "PH", err: errors.New(`ent: missing required field "User.PH"`)}
	}
	if _, ok := uc.mutation.PHVerified(); !ok {
		return &ValidationError{Name: "PHVerified", err: errors.New(`ent: missing required field "User.PHVerified"`)}
	}
	if _, ok := uc.mutation.PHRemStatus(); !ok {
		return &ValidationError{Name: "PHRemStatus", err: errors.New(`ent: missing required field "User.PHRemStatus"`)}
	}
	if _, ok := uc.mutation.PHRemarks(); !ok {
		return &ValidationError{Name: "PHRemarks", err: errors.New(`ent: missing required field "User.PHRemarks"`)}
	}
	if _, ok := uc.mutation.PHDetailsVerified(); !ok {
		return &ValidationError{Name: "PHDetailsVerified", err: errors.New(`ent: missing required field "User.PHDetailsVerified"`)}
	}
	if _, ok := uc.mutation.PHDetailsRemStatus(); !ok {
		return &ValidationError{Name: "PHDetailsRemStatus", err: errors.New(`ent: missing required field "User.PHDetailsRemStatus"`)}
	}
	if _, ok := uc.mutation.PHDetailsRemarks(); !ok {
		return &ValidationError{Name: "PHDetailsRemarks", err: errors.New(`ent: missing required field "User.PHDetailsRemarks"`)}
	}
	if _, ok := uc.mutation.APSWorking(); !ok {
		return &ValidationError{Name: "APSWorking", err: errors.New(`ent: missing required field "User.APSWorking"`)}
	}
	if _, ok := uc.mutation.APSWorkingVerified(); !ok {
		return &ValidationError{Name: "APSWorkingVerified", err: errors.New(`ent: missing required field "User.APSWorkingVerified"`)}
	}
	if _, ok := uc.mutation.APSWorkingRemStatus(); !ok {
		return &ValidationError{Name: "APSWorkingRemStatus", err: errors.New(`ent: missing required field "User.APSWorkingRemStatus"`)}
	}
	if _, ok := uc.mutation.APSWorkingRemarks(); !ok {
		return &ValidationError{Name: "APSWorkingRemarks", err: errors.New(`ent: missing required field "User.APSWorkingRemarks"`)}
	}
	if _, ok := uc.mutation.Profilestatus(); !ok {
		return &ValidationError{Name: "profilestatus", err: errors.New(`ent: missing required field "User.profilestatus"`)}
	}
	return nil
}

func (uc *UserCreate) sqlSave(ctx context.Context) (*User, error) {
	if err := uc.check(); err != nil {
		return nil, err
	}
	_node, _spec := uc.createSpec()
	if err := sqlgraph.CreateNode(ctx, uc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	uc.mutation.id = &_node.ID
	uc.mutation.done = true
	return _node, nil
}

func (uc *UserCreate) createSpec() (*User, *sqlgraph.CreateSpec) {
	var (
		_node = &User{config: uc.config}
		_spec = sqlgraph.NewCreateSpec(user.Table, sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt))
	)
	if value, ok := uc.mutation.EmployeedID(); ok {
		_spec.SetField(user.FieldEmployeedID, field.TypeString, value)
		_node.EmployeedID = value
	}
	if value, ok := uc.mutation.IDVerified(); ok {
		_spec.SetField(user.FieldIDVerified, field.TypeBool, value)
		_node.IDVerified = value
	}
	if value, ok := uc.mutation.IDRemStatus(); ok {
		_spec.SetField(user.FieldIDRemStatus, field.TypeBool, value)
		_node.IDRemStatus = value
	}
	if value, ok := uc.mutation.IDRemarks(); ok {
		_spec.SetField(user.FieldIDRemarks, field.TypeString, value)
		_node.IDRemarks = value
	}
	if value, ok := uc.mutation.EmployeedName(); ok {
		_spec.SetField(user.FieldEmployeedName, field.TypeString, value)
		_node.EmployeedName = value
	}
	if value, ok := uc.mutation.NameVerified(); ok {
		_spec.SetField(user.FieldNameVerified, field.TypeBool, value)
		_node.NameVerified = value
	}
	if value, ok := uc.mutation.NameRemStatus(); ok {
		_spec.SetField(user.FieldNameRemStatus, field.TypeBool, value)
		_node.NameRemStatus = value
	}
	if value, ok := uc.mutation.NameRemarks(); ok {
		_spec.SetField(user.FieldNameRemarks, field.TypeString, value)
		_node.NameRemarks = value
	}
	if value, ok := uc.mutation.DOB(); ok {
		_spec.SetField(user.FieldDOB, field.TypeTime, value)
		_node.DOB = value
	}
	if value, ok := uc.mutation.DOBVerified(); ok {
		_spec.SetField(user.FieldDOBVerified, field.TypeBool, value)
		_node.DOBVerified = value
	}
	if value, ok := uc.mutation.DOBRemStatus(); ok {
		_spec.SetField(user.FieldDOBRemStatus, field.TypeBool, value)
		_node.DOBRemStatus = value
	}
	if value, ok := uc.mutation.DOBRemarks(); ok {
		_spec.SetField(user.FieldDOBRemarks, field.TypeString, value)
		_node.DOBRemarks = value
	}
	if value, ok := uc.mutation.Gender(); ok {
		_spec.SetField(user.FieldGender, field.TypeEnum, value)
		_node.Gender = value
	}
	if value, ok := uc.mutation.GenderVerified(); ok {
		_spec.SetField(user.FieldGenderVerified, field.TypeBool, value)
		_node.GenderVerified = value
	}
	if value, ok := uc.mutation.GenderRemStatus(); ok {
		_spec.SetField(user.FieldGenderRemStatus, field.TypeBool, value)
		_node.GenderRemStatus = value
	}
	if value, ok := uc.mutation.GenderRemarks(); ok {
		_spec.SetField(user.FieldGenderRemarks, field.TypeString, value)
		_node.GenderRemarks = value
	}
	if value, ok := uc.mutation.Cadreid(); ok {
		_spec.SetField(user.FieldCadreid, field.TypeInt32, value)
		_node.Cadreid = value
	}
	if value, ok := uc.mutation.CadreidVerified(); ok {
		_spec.SetField(user.FieldCadreidVerified, field.TypeBool, value)
		_node.CadreidVerified = value
	}
	if value, ok := uc.mutation.CadreidRemStatus(); ok {
		_spec.SetField(user.FieldCadreidRemStatus, field.TypeBool, value)
		_node.CadreidRemStatus = value
	}
	if value, ok := uc.mutation.CadreidRemarks(); ok {
		_spec.SetField(user.FieldCadreidRemarks, field.TypeString, value)
		_node.CadreidRemarks = value
	}
	if value, ok := uc.mutation.OfficeID(); ok {
		_spec.SetField(user.FieldOfficeID, field.TypeInt32, value)
		_node.OfficeID = value
	}
	if value, ok := uc.mutation.OfficeIDVerified(); ok {
		_spec.SetField(user.FieldOfficeIDVerified, field.TypeBool, value)
		_node.OfficeIDVerified = value
	}
	if value, ok := uc.mutation.OfficeIDRemStatus(); ok {
		_spec.SetField(user.FieldOfficeIDRemStatus, field.TypeBool, value)
		_node.OfficeIDRemStatus = value
	}
	if value, ok := uc.mutation.OfficeIDRemarks(); ok {
		_spec.SetField(user.FieldOfficeIDRemarks, field.TypeString, value)
		_node.OfficeIDRemarks = value
	}
	if value, ok := uc.mutation.PH(); ok {
		_spec.SetField(user.FieldPH, field.TypeBool, value)
		_node.PH = value
	}
	if value, ok := uc.mutation.PHVerified(); ok {
		_spec.SetField(user.FieldPHVerified, field.TypeBool, value)
		_node.PHVerified = value
	}
	if value, ok := uc.mutation.PHRemStatus(); ok {
		_spec.SetField(user.FieldPHRemStatus, field.TypeBool, value)
		_node.PHRemStatus = value
	}
	if value, ok := uc.mutation.PHRemarks(); ok {
		_spec.SetField(user.FieldPHRemarks, field.TypeString, value)
		_node.PHRemarks = value
	}
	if value, ok := uc.mutation.PHDetails(); ok {
		_spec.SetField(user.FieldPHDetails, field.TypeString, value)
		_node.PHDetails = value
	}
	if value, ok := uc.mutation.PHDetailsVerified(); ok {
		_spec.SetField(user.FieldPHDetailsVerified, field.TypeBool, value)
		_node.PHDetailsVerified = value
	}
	if value, ok := uc.mutation.PHDetailsRemStatus(); ok {
		_spec.SetField(user.FieldPHDetailsRemStatus, field.TypeBool, value)
		_node.PHDetailsRemStatus = value
	}
	if value, ok := uc.mutation.PHDetailsRemarks(); ok {
		_spec.SetField(user.FieldPHDetailsRemarks, field.TypeString, value)
		_node.PHDetailsRemarks = value
	}
	if value, ok := uc.mutation.APSWorking(); ok {
		_spec.SetField(user.FieldAPSWorking, field.TypeBool, value)
		_node.APSWorking = value
	}
	if value, ok := uc.mutation.APSWorkingVerified(); ok {
		_spec.SetField(user.FieldAPSWorkingVerified, field.TypeBool, value)
		_node.APSWorkingVerified = value
	}
	if value, ok := uc.mutation.APSWorkingRemStatus(); ok {
		_spec.SetField(user.FieldAPSWorkingRemStatus, field.TypeBool, value)
		_node.APSWorkingRemStatus = value
	}
	if value, ok := uc.mutation.APSWorkingRemarks(); ok {
		_spec.SetField(user.FieldAPSWorkingRemarks, field.TypeString, value)
		_node.APSWorkingRemarks = value
	}
	if value, ok := uc.mutation.Profilestatus(); ok {
		_spec.SetField(user.FieldProfilestatus, field.TypeBool, value)
		_node.Profilestatus = value
	}
	return _node, _spec
}

// UserCreateBulk is the builder for creating many User entities in bulk.
type UserCreateBulk struct {
	config
	builders []*UserCreate
}

// Save creates the User entities in the database.
func (ucb *UserCreateBulk) Save(ctx context.Context) ([]*User, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ucb.builders))
	nodes := make([]*User, len(ucb.builders))
	mutators := make([]Mutator, len(ucb.builders))
	for i := range ucb.builders {
		func(i int, root context.Context) {
			builder := ucb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ucb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ucb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ucb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ucb *UserCreateBulk) SaveX(ctx context.Context) []*User {
	v, err := ucb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ucb *UserCreateBulk) Exec(ctx context.Context) error {
	_, err := ucb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ucb *UserCreateBulk) ExecX(ctx context.Context) {
	if err := ucb.Exec(ctx); err != nil {
		panic(err)
	}
}
