// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"recruit/ent/predicate"
	"recruit/ent/user"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserUpdate is the builder for updating User entities.
type UserUpdate struct {
	config
	hooks    []Hook
	mutation *UserMutation
}

// Where appends a list predicates to the UserUpdate builder.
func (uu *UserUpdate) Where(ps ...predicate.User) *UserUpdate {
	uu.mutation.Where(ps...)
	return uu
}

// SetEmployeedID sets the "EmployeedID" field.
func (uu *UserUpdate) SetEmployeedID(s string) *UserUpdate {
	uu.mutation.SetEmployeedID(s)
	return uu
}

// SetIDVerified sets the "IDVerified" field.
func (uu *UserUpdate) SetIDVerified(b bool) *UserUpdate {
	uu.mutation.SetIDVerified(b)
	return uu
}

// SetNillableIDVerified sets the "IDVerified" field if the given value is not nil.
func (uu *UserUpdate) SetNillableIDVerified(b *bool) *UserUpdate {
	if b != nil {
		uu.SetIDVerified(*b)
	}
	return uu
}

// SetIDRemStatus sets the "IDRemStatus" field.
func (uu *UserUpdate) SetIDRemStatus(b bool) *UserUpdate {
	uu.mutation.SetIDRemStatus(b)
	return uu
}

// SetNillableIDRemStatus sets the "IDRemStatus" field if the given value is not nil.
func (uu *UserUpdate) SetNillableIDRemStatus(b *bool) *UserUpdate {
	if b != nil {
		uu.SetIDRemStatus(*b)
	}
	return uu
}

// SetIDRemarks sets the "IDRemarks" field.
func (uu *UserUpdate) SetIDRemarks(s string) *UserUpdate {
	uu.mutation.SetIDRemarks(s)
	return uu
}

// SetEmployeedName sets the "EmployeedName" field.
func (uu *UserUpdate) SetEmployeedName(s string) *UserUpdate {
	uu.mutation.SetEmployeedName(s)
	return uu
}

// SetNameVerified sets the "nameVerified" field.
func (uu *UserUpdate) SetNameVerified(b bool) *UserUpdate {
	uu.mutation.SetNameVerified(b)
	return uu
}

// SetNillableNameVerified sets the "nameVerified" field if the given value is not nil.
func (uu *UserUpdate) SetNillableNameVerified(b *bool) *UserUpdate {
	if b != nil {
		uu.SetNameVerified(*b)
	}
	return uu
}

// SetNameRemStatus sets the "nameRemStatus" field.
func (uu *UserUpdate) SetNameRemStatus(b bool) *UserUpdate {
	uu.mutation.SetNameRemStatus(b)
	return uu
}

// SetNillableNameRemStatus sets the "nameRemStatus" field if the given value is not nil.
func (uu *UserUpdate) SetNillableNameRemStatus(b *bool) *UserUpdate {
	if b != nil {
		uu.SetNameRemStatus(*b)
	}
	return uu
}

// SetNameRemarks sets the "nameRemarks" field.
func (uu *UserUpdate) SetNameRemarks(s string) *UserUpdate {
	uu.mutation.SetNameRemarks(s)
	return uu
}

// SetDOB sets the "DOB" field.
func (uu *UserUpdate) SetDOB(t time.Time) *UserUpdate {
	uu.mutation.SetDOB(t)
	return uu
}

// SetDOBVerified sets the "DOBVerified" field.
func (uu *UserUpdate) SetDOBVerified(b bool) *UserUpdate {
	uu.mutation.SetDOBVerified(b)
	return uu
}

// SetNillableDOBVerified sets the "DOBVerified" field if the given value is not nil.
func (uu *UserUpdate) SetNillableDOBVerified(b *bool) *UserUpdate {
	if b != nil {
		uu.SetDOBVerified(*b)
	}
	return uu
}

// SetDOBRemStatus sets the "DOBRemStatus" field.
func (uu *UserUpdate) SetDOBRemStatus(b bool) *UserUpdate {
	uu.mutation.SetDOBRemStatus(b)
	return uu
}

// SetNillableDOBRemStatus sets the "DOBRemStatus" field if the given value is not nil.
func (uu *UserUpdate) SetNillableDOBRemStatus(b *bool) *UserUpdate {
	if b != nil {
		uu.SetDOBRemStatus(*b)
	}
	return uu
}

// SetDOBRemarks sets the "DOBRemarks" field.
func (uu *UserUpdate) SetDOBRemarks(s string) *UserUpdate {
	uu.mutation.SetDOBRemarks(s)
	return uu
}

// SetGender sets the "Gender" field.
func (uu *UserUpdate) SetGender(u user.Gender) *UserUpdate {
	uu.mutation.SetGender(u)
	return uu
}

// SetGenderVerified sets the "genderVerified" field.
func (uu *UserUpdate) SetGenderVerified(b bool) *UserUpdate {
	uu.mutation.SetGenderVerified(b)
	return uu
}

// SetNillableGenderVerified sets the "genderVerified" field if the given value is not nil.
func (uu *UserUpdate) SetNillableGenderVerified(b *bool) *UserUpdate {
	if b != nil {
		uu.SetGenderVerified(*b)
	}
	return uu
}

// SetGenderRemStatus sets the "genderRemStatus" field.
func (uu *UserUpdate) SetGenderRemStatus(b bool) *UserUpdate {
	uu.mutation.SetGenderRemStatus(b)
	return uu
}

// SetNillableGenderRemStatus sets the "genderRemStatus" field if the given value is not nil.
func (uu *UserUpdate) SetNillableGenderRemStatus(b *bool) *UserUpdate {
	if b != nil {
		uu.SetGenderRemStatus(*b)
	}
	return uu
}

// SetGenderRemarks sets the "genderRemarks" field.
func (uu *UserUpdate) SetGenderRemarks(s string) *UserUpdate {
	uu.mutation.SetGenderRemarks(s)
	return uu
}

// SetCadreid sets the "Cadreid" field.
func (uu *UserUpdate) SetCadreid(i int32) *UserUpdate {
	uu.mutation.ResetCadreid()
	uu.mutation.SetCadreid(i)
	return uu
}

// AddCadreid adds i to the "Cadreid" field.
func (uu *UserUpdate) AddCadreid(i int32) *UserUpdate {
	uu.mutation.AddCadreid(i)
	return uu
}

// SetCadreidVerified sets the "cadreidVerified" field.
func (uu *UserUpdate) SetCadreidVerified(b bool) *UserUpdate {
	uu.mutation.SetCadreidVerified(b)
	return uu
}

// SetNillableCadreidVerified sets the "cadreidVerified" field if the given value is not nil.
func (uu *UserUpdate) SetNillableCadreidVerified(b *bool) *UserUpdate {
	if b != nil {
		uu.SetCadreidVerified(*b)
	}
	return uu
}

// SetCadreidRemStatus sets the "cadreidRemStatus" field.
func (uu *UserUpdate) SetCadreidRemStatus(b bool) *UserUpdate {
	uu.mutation.SetCadreidRemStatus(b)
	return uu
}

// SetNillableCadreidRemStatus sets the "cadreidRemStatus" field if the given value is not nil.
func (uu *UserUpdate) SetNillableCadreidRemStatus(b *bool) *UserUpdate {
	if b != nil {
		uu.SetCadreidRemStatus(*b)
	}
	return uu
}

// SetCadreidRemarks sets the "cadreidRemarks" field.
func (uu *UserUpdate) SetCadreidRemarks(s string) *UserUpdate {
	uu.mutation.SetCadreidRemarks(s)
	return uu
}

// SetOfficeID sets the "OfficeID" field.
func (uu *UserUpdate) SetOfficeID(i int32) *UserUpdate {
	uu.mutation.ResetOfficeID()
	uu.mutation.SetOfficeID(i)
	return uu
}

// AddOfficeID adds i to the "OfficeID" field.
func (uu *UserUpdate) AddOfficeID(i int32) *UserUpdate {
	uu.mutation.AddOfficeID(i)
	return uu
}

// SetOfficeIDVerified sets the "officeIDVerified" field.
func (uu *UserUpdate) SetOfficeIDVerified(b bool) *UserUpdate {
	uu.mutation.SetOfficeIDVerified(b)
	return uu
}

// SetNillableOfficeIDVerified sets the "officeIDVerified" field if the given value is not nil.
func (uu *UserUpdate) SetNillableOfficeIDVerified(b *bool) *UserUpdate {
	if b != nil {
		uu.SetOfficeIDVerified(*b)
	}
	return uu
}

// SetOfficeIDRemStatus sets the "officeIDRemStatus" field.
func (uu *UserUpdate) SetOfficeIDRemStatus(b bool) *UserUpdate {
	uu.mutation.SetOfficeIDRemStatus(b)
	return uu
}

// SetNillableOfficeIDRemStatus sets the "officeIDRemStatus" field if the given value is not nil.
func (uu *UserUpdate) SetNillableOfficeIDRemStatus(b *bool) *UserUpdate {
	if b != nil {
		uu.SetOfficeIDRemStatus(*b)
	}
	return uu
}

// SetOfficeIDRemarks sets the "officeIDRemarks" field.
func (uu *UserUpdate) SetOfficeIDRemarks(s string) *UserUpdate {
	uu.mutation.SetOfficeIDRemarks(s)
	return uu
}

// SetPH sets the "PH" field.
func (uu *UserUpdate) SetPH(b bool) *UserUpdate {
	uu.mutation.SetPH(b)
	return uu
}

// SetPHVerified sets the "PHVerified" field.
func (uu *UserUpdate) SetPHVerified(b bool) *UserUpdate {
	uu.mutation.SetPHVerified(b)
	return uu
}

// SetNillablePHVerified sets the "PHVerified" field if the given value is not nil.
func (uu *UserUpdate) SetNillablePHVerified(b *bool) *UserUpdate {
	if b != nil {
		uu.SetPHVerified(*b)
	}
	return uu
}

// SetPHRemStatus sets the "PHRemStatus" field.
func (uu *UserUpdate) SetPHRemStatus(b bool) *UserUpdate {
	uu.mutation.SetPHRemStatus(b)
	return uu
}

// SetNillablePHRemStatus sets the "PHRemStatus" field if the given value is not nil.
func (uu *UserUpdate) SetNillablePHRemStatus(b *bool) *UserUpdate {
	if b != nil {
		uu.SetPHRemStatus(*b)
	}
	return uu
}

// SetPHRemarks sets the "PHRemarks" field.
func (uu *UserUpdate) SetPHRemarks(s string) *UserUpdate {
	uu.mutation.SetPHRemarks(s)
	return uu
}

// SetPHDetails sets the "PHDetails" field.
func (uu *UserUpdate) SetPHDetails(s string) *UserUpdate {
	uu.mutation.SetPHDetails(s)
	return uu
}

// SetNillablePHDetails sets the "PHDetails" field if the given value is not nil.
func (uu *UserUpdate) SetNillablePHDetails(s *string) *UserUpdate {
	if s != nil {
		uu.SetPHDetails(*s)
	}
	return uu
}

// ClearPHDetails clears the value of the "PHDetails" field.
func (uu *UserUpdate) ClearPHDetails() *UserUpdate {
	uu.mutation.ClearPHDetails()
	return uu
}

// SetPHDetailsVerified sets the "PHDetailsVerified" field.
func (uu *UserUpdate) SetPHDetailsVerified(b bool) *UserUpdate {
	uu.mutation.SetPHDetailsVerified(b)
	return uu
}

// SetNillablePHDetailsVerified sets the "PHDetailsVerified" field if the given value is not nil.
func (uu *UserUpdate) SetNillablePHDetailsVerified(b *bool) *UserUpdate {
	if b != nil {
		uu.SetPHDetailsVerified(*b)
	}
	return uu
}

// SetPHDetailsRemStatus sets the "PHDetailsRemStatus" field.
func (uu *UserUpdate) SetPHDetailsRemStatus(b bool) *UserUpdate {
	uu.mutation.SetPHDetailsRemStatus(b)
	return uu
}

// SetNillablePHDetailsRemStatus sets the "PHDetailsRemStatus" field if the given value is not nil.
func (uu *UserUpdate) SetNillablePHDetailsRemStatus(b *bool) *UserUpdate {
	if b != nil {
		uu.SetPHDetailsRemStatus(*b)
	}
	return uu
}

// SetPHDetailsRemarks sets the "PHDetailsRemarks" field.
func (uu *UserUpdate) SetPHDetailsRemarks(s string) *UserUpdate {
	uu.mutation.SetPHDetailsRemarks(s)
	return uu
}

// SetAPSWorking sets the "APSWorking" field.
func (uu *UserUpdate) SetAPSWorking(b bool) *UserUpdate {
	uu.mutation.SetAPSWorking(b)
	return uu
}

// SetAPSWorkingVerified sets the "APSWorkingVerified" field.
func (uu *UserUpdate) SetAPSWorkingVerified(b bool) *UserUpdate {
	uu.mutation.SetAPSWorkingVerified(b)
	return uu
}

// SetNillableAPSWorkingVerified sets the "APSWorkingVerified" field if the given value is not nil.
func (uu *UserUpdate) SetNillableAPSWorkingVerified(b *bool) *UserUpdate {
	if b != nil {
		uu.SetAPSWorkingVerified(*b)
	}
	return uu
}

// SetAPSWorkingRemStatus sets the "APSWorkingRemStatus" field.
func (uu *UserUpdate) SetAPSWorkingRemStatus(b bool) *UserUpdate {
	uu.mutation.SetAPSWorkingRemStatus(b)
	return uu
}

// SetNillableAPSWorkingRemStatus sets the "APSWorkingRemStatus" field if the given value is not nil.
func (uu *UserUpdate) SetNillableAPSWorkingRemStatus(b *bool) *UserUpdate {
	if b != nil {
		uu.SetAPSWorkingRemStatus(*b)
	}
	return uu
}

// SetAPSWorkingRemarks sets the "APSWorkingRemarks" field.
func (uu *UserUpdate) SetAPSWorkingRemarks(s string) *UserUpdate {
	uu.mutation.SetAPSWorkingRemarks(s)
	return uu
}

// SetProfilestatus sets the "profilestatus" field.
func (uu *UserUpdate) SetProfilestatus(b bool) *UserUpdate {
	uu.mutation.SetProfilestatus(b)
	return uu
}

// SetNillableProfilestatus sets the "profilestatus" field if the given value is not nil.
func (uu *UserUpdate) SetNillableProfilestatus(b *bool) *UserUpdate {
	if b != nil {
		uu.SetProfilestatus(*b)
	}
	return uu
}

// Mutation returns the UserMutation object of the builder.
func (uu *UserUpdate) Mutation() *UserMutation {
	return uu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (uu *UserUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, uu.sqlSave, uu.mutation, uu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uu *UserUpdate) SaveX(ctx context.Context) int {
	affected, err := uu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uu *UserUpdate) Exec(ctx context.Context) error {
	_, err := uu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uu *UserUpdate) ExecX(ctx context.Context) {
	if err := uu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uu *UserUpdate) check() error {
	if v, ok := uu.mutation.Gender(); ok {
		if err := user.GenderValidator(v); err != nil {
			return &ValidationError{Name: "Gender", err: fmt.Errorf(`ent: validator failed for field "User.Gender": %w`, err)}
		}
	}
	return nil
}

func (uu *UserUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := uu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt))
	if ps := uu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uu.mutation.EmployeedID(); ok {
		_spec.SetField(user.FieldEmployeedID, field.TypeString, value)
	}
	if value, ok := uu.mutation.IDVerified(); ok {
		_spec.SetField(user.FieldIDVerified, field.TypeBool, value)
	}
	if value, ok := uu.mutation.IDRemStatus(); ok {
		_spec.SetField(user.FieldIDRemStatus, field.TypeBool, value)
	}
	if value, ok := uu.mutation.IDRemarks(); ok {
		_spec.SetField(user.FieldIDRemarks, field.TypeString, value)
	}
	if value, ok := uu.mutation.EmployeedName(); ok {
		_spec.SetField(user.FieldEmployeedName, field.TypeString, value)
	}
	if value, ok := uu.mutation.NameVerified(); ok {
		_spec.SetField(user.FieldNameVerified, field.TypeBool, value)
	}
	if value, ok := uu.mutation.NameRemStatus(); ok {
		_spec.SetField(user.FieldNameRemStatus, field.TypeBool, value)
	}
	if value, ok := uu.mutation.NameRemarks(); ok {
		_spec.SetField(user.FieldNameRemarks, field.TypeString, value)
	}
	if value, ok := uu.mutation.DOB(); ok {
		_spec.SetField(user.FieldDOB, field.TypeTime, value)
	}
	if value, ok := uu.mutation.DOBVerified(); ok {
		_spec.SetField(user.FieldDOBVerified, field.TypeBool, value)
	}
	if value, ok := uu.mutation.DOBRemStatus(); ok {
		_spec.SetField(user.FieldDOBRemStatus, field.TypeBool, value)
	}
	if value, ok := uu.mutation.DOBRemarks(); ok {
		_spec.SetField(user.FieldDOBRemarks, field.TypeString, value)
	}
	if value, ok := uu.mutation.Gender(); ok {
		_spec.SetField(user.FieldGender, field.TypeEnum, value)
	}
	if value, ok := uu.mutation.GenderVerified(); ok {
		_spec.SetField(user.FieldGenderVerified, field.TypeBool, value)
	}
	if value, ok := uu.mutation.GenderRemStatus(); ok {
		_spec.SetField(user.FieldGenderRemStatus, field.TypeBool, value)
	}
	if value, ok := uu.mutation.GenderRemarks(); ok {
		_spec.SetField(user.FieldGenderRemarks, field.TypeString, value)
	}
	if value, ok := uu.mutation.Cadreid(); ok {
		_spec.SetField(user.FieldCadreid, field.TypeInt32, value)
	}
	if value, ok := uu.mutation.AddedCadreid(); ok {
		_spec.AddField(user.FieldCadreid, field.TypeInt32, value)
	}
	if value, ok := uu.mutation.CadreidVerified(); ok {
		_spec.SetField(user.FieldCadreidVerified, field.TypeBool, value)
	}
	if value, ok := uu.mutation.CadreidRemStatus(); ok {
		_spec.SetField(user.FieldCadreidRemStatus, field.TypeBool, value)
	}
	if value, ok := uu.mutation.CadreidRemarks(); ok {
		_spec.SetField(user.FieldCadreidRemarks, field.TypeString, value)
	}
	if value, ok := uu.mutation.OfficeID(); ok {
		_spec.SetField(user.FieldOfficeID, field.TypeInt32, value)
	}
	if value, ok := uu.mutation.AddedOfficeID(); ok {
		_spec.AddField(user.FieldOfficeID, field.TypeInt32, value)
	}
	if value, ok := uu.mutation.OfficeIDVerified(); ok {
		_spec.SetField(user.FieldOfficeIDVerified, field.TypeBool, value)
	}
	if value, ok := uu.mutation.OfficeIDRemStatus(); ok {
		_spec.SetField(user.FieldOfficeIDRemStatus, field.TypeBool, value)
	}
	if value, ok := uu.mutation.OfficeIDRemarks(); ok {
		_spec.SetField(user.FieldOfficeIDRemarks, field.TypeString, value)
	}
	if value, ok := uu.mutation.PH(); ok {
		_spec.SetField(user.FieldPH, field.TypeBool, value)
	}
	if value, ok := uu.mutation.PHVerified(); ok {
		_spec.SetField(user.FieldPHVerified, field.TypeBool, value)
	}
	if value, ok := uu.mutation.PHRemStatus(); ok {
		_spec.SetField(user.FieldPHRemStatus, field.TypeBool, value)
	}
	if value, ok := uu.mutation.PHRemarks(); ok {
		_spec.SetField(user.FieldPHRemarks, field.TypeString, value)
	}
	if value, ok := uu.mutation.PHDetails(); ok {
		_spec.SetField(user.FieldPHDetails, field.TypeString, value)
	}
	if uu.mutation.PHDetailsCleared() {
		_spec.ClearField(user.FieldPHDetails, field.TypeString)
	}
	if value, ok := uu.mutation.PHDetailsVerified(); ok {
		_spec.SetField(user.FieldPHDetailsVerified, field.TypeBool, value)
	}
	if value, ok := uu.mutation.PHDetailsRemStatus(); ok {
		_spec.SetField(user.FieldPHDetailsRemStatus, field.TypeBool, value)
	}
	if value, ok := uu.mutation.PHDetailsRemarks(); ok {
		_spec.SetField(user.FieldPHDetailsRemarks, field.TypeString, value)
	}
	if value, ok := uu.mutation.APSWorking(); ok {
		_spec.SetField(user.FieldAPSWorking, field.TypeBool, value)
	}
	if value, ok := uu.mutation.APSWorkingVerified(); ok {
		_spec.SetField(user.FieldAPSWorkingVerified, field.TypeBool, value)
	}
	if value, ok := uu.mutation.APSWorkingRemStatus(); ok {
		_spec.SetField(user.FieldAPSWorkingRemStatus, field.TypeBool, value)
	}
	if value, ok := uu.mutation.APSWorkingRemarks(); ok {
		_spec.SetField(user.FieldAPSWorkingRemarks, field.TypeString, value)
	}
	if value, ok := uu.mutation.Profilestatus(); ok {
		_spec.SetField(user.FieldProfilestatus, field.TypeBool, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, uu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	uu.mutation.done = true
	return n, nil
}

// UserUpdateOne is the builder for updating a single User entity.
type UserUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserMutation
}

// SetEmployeedID sets the "EmployeedID" field.
func (uuo *UserUpdateOne) SetEmployeedID(s string) *UserUpdateOne {
	uuo.mutation.SetEmployeedID(s)
	return uuo
}

// SetIDVerified sets the "IDVerified" field.
func (uuo *UserUpdateOne) SetIDVerified(b bool) *UserUpdateOne {
	uuo.mutation.SetIDVerified(b)
	return uuo
}

// SetNillableIDVerified sets the "IDVerified" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableIDVerified(b *bool) *UserUpdateOne {
	if b != nil {
		uuo.SetIDVerified(*b)
	}
	return uuo
}

// SetIDRemStatus sets the "IDRemStatus" field.
func (uuo *UserUpdateOne) SetIDRemStatus(b bool) *UserUpdateOne {
	uuo.mutation.SetIDRemStatus(b)
	return uuo
}

// SetNillableIDRemStatus sets the "IDRemStatus" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableIDRemStatus(b *bool) *UserUpdateOne {
	if b != nil {
		uuo.SetIDRemStatus(*b)
	}
	return uuo
}

// SetIDRemarks sets the "IDRemarks" field.
func (uuo *UserUpdateOne) SetIDRemarks(s string) *UserUpdateOne {
	uuo.mutation.SetIDRemarks(s)
	return uuo
}

// SetEmployeedName sets the "EmployeedName" field.
func (uuo *UserUpdateOne) SetEmployeedName(s string) *UserUpdateOne {
	uuo.mutation.SetEmployeedName(s)
	return uuo
}

// SetNameVerified sets the "nameVerified" field.
func (uuo *UserUpdateOne) SetNameVerified(b bool) *UserUpdateOne {
	uuo.mutation.SetNameVerified(b)
	return uuo
}

// SetNillableNameVerified sets the "nameVerified" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableNameVerified(b *bool) *UserUpdateOne {
	if b != nil {
		uuo.SetNameVerified(*b)
	}
	return uuo
}

// SetNameRemStatus sets the "nameRemStatus" field.
func (uuo *UserUpdateOne) SetNameRemStatus(b bool) *UserUpdateOne {
	uuo.mutation.SetNameRemStatus(b)
	return uuo
}

// SetNillableNameRemStatus sets the "nameRemStatus" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableNameRemStatus(b *bool) *UserUpdateOne {
	if b != nil {
		uuo.SetNameRemStatus(*b)
	}
	return uuo
}

// SetNameRemarks sets the "nameRemarks" field.
func (uuo *UserUpdateOne) SetNameRemarks(s string) *UserUpdateOne {
	uuo.mutation.SetNameRemarks(s)
	return uuo
}

// SetDOB sets the "DOB" field.
func (uuo *UserUpdateOne) SetDOB(t time.Time) *UserUpdateOne {
	uuo.mutation.SetDOB(t)
	return uuo
}

// SetDOBVerified sets the "DOBVerified" field.
func (uuo *UserUpdateOne) SetDOBVerified(b bool) *UserUpdateOne {
	uuo.mutation.SetDOBVerified(b)
	return uuo
}

// SetNillableDOBVerified sets the "DOBVerified" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableDOBVerified(b *bool) *UserUpdateOne {
	if b != nil {
		uuo.SetDOBVerified(*b)
	}
	return uuo
}

// SetDOBRemStatus sets the "DOBRemStatus" field.
func (uuo *UserUpdateOne) SetDOBRemStatus(b bool) *UserUpdateOne {
	uuo.mutation.SetDOBRemStatus(b)
	return uuo
}

// SetNillableDOBRemStatus sets the "DOBRemStatus" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableDOBRemStatus(b *bool) *UserUpdateOne {
	if b != nil {
		uuo.SetDOBRemStatus(*b)
	}
	return uuo
}

// SetDOBRemarks sets the "DOBRemarks" field.
func (uuo *UserUpdateOne) SetDOBRemarks(s string) *UserUpdateOne {
	uuo.mutation.SetDOBRemarks(s)
	return uuo
}

// SetGender sets the "Gender" field.
func (uuo *UserUpdateOne) SetGender(u user.Gender) *UserUpdateOne {
	uuo.mutation.SetGender(u)
	return uuo
}

// SetGenderVerified sets the "genderVerified" field.
func (uuo *UserUpdateOne) SetGenderVerified(b bool) *UserUpdateOne {
	uuo.mutation.SetGenderVerified(b)
	return uuo
}

// SetNillableGenderVerified sets the "genderVerified" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableGenderVerified(b *bool) *UserUpdateOne {
	if b != nil {
		uuo.SetGenderVerified(*b)
	}
	return uuo
}

// SetGenderRemStatus sets the "genderRemStatus" field.
func (uuo *UserUpdateOne) SetGenderRemStatus(b bool) *UserUpdateOne {
	uuo.mutation.SetGenderRemStatus(b)
	return uuo
}

// SetNillableGenderRemStatus sets the "genderRemStatus" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableGenderRemStatus(b *bool) *UserUpdateOne {
	if b != nil {
		uuo.SetGenderRemStatus(*b)
	}
	return uuo
}

// SetGenderRemarks sets the "genderRemarks" field.
func (uuo *UserUpdateOne) SetGenderRemarks(s string) *UserUpdateOne {
	uuo.mutation.SetGenderRemarks(s)
	return uuo
}

// SetCadreid sets the "Cadreid" field.
func (uuo *UserUpdateOne) SetCadreid(i int32) *UserUpdateOne {
	uuo.mutation.ResetCadreid()
	uuo.mutation.SetCadreid(i)
	return uuo
}

// AddCadreid adds i to the "Cadreid" field.
func (uuo *UserUpdateOne) AddCadreid(i int32) *UserUpdateOne {
	uuo.mutation.AddCadreid(i)
	return uuo
}

// SetCadreidVerified sets the "cadreidVerified" field.
func (uuo *UserUpdateOne) SetCadreidVerified(b bool) *UserUpdateOne {
	uuo.mutation.SetCadreidVerified(b)
	return uuo
}

// SetNillableCadreidVerified sets the "cadreidVerified" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableCadreidVerified(b *bool) *UserUpdateOne {
	if b != nil {
		uuo.SetCadreidVerified(*b)
	}
	return uuo
}

// SetCadreidRemStatus sets the "cadreidRemStatus" field.
func (uuo *UserUpdateOne) SetCadreidRemStatus(b bool) *UserUpdateOne {
	uuo.mutation.SetCadreidRemStatus(b)
	return uuo
}

// SetNillableCadreidRemStatus sets the "cadreidRemStatus" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableCadreidRemStatus(b *bool) *UserUpdateOne {
	if b != nil {
		uuo.SetCadreidRemStatus(*b)
	}
	return uuo
}

// SetCadreidRemarks sets the "cadreidRemarks" field.
func (uuo *UserUpdateOne) SetCadreidRemarks(s string) *UserUpdateOne {
	uuo.mutation.SetCadreidRemarks(s)
	return uuo
}

// SetOfficeID sets the "OfficeID" field.
func (uuo *UserUpdateOne) SetOfficeID(i int32) *UserUpdateOne {
	uuo.mutation.ResetOfficeID()
	uuo.mutation.SetOfficeID(i)
	return uuo
}

// AddOfficeID adds i to the "OfficeID" field.
func (uuo *UserUpdateOne) AddOfficeID(i int32) *UserUpdateOne {
	uuo.mutation.AddOfficeID(i)
	return uuo
}

// SetOfficeIDVerified sets the "officeIDVerified" field.
func (uuo *UserUpdateOne) SetOfficeIDVerified(b bool) *UserUpdateOne {
	uuo.mutation.SetOfficeIDVerified(b)
	return uuo
}

// SetNillableOfficeIDVerified sets the "officeIDVerified" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableOfficeIDVerified(b *bool) *UserUpdateOne {
	if b != nil {
		uuo.SetOfficeIDVerified(*b)
	}
	return uuo
}

// SetOfficeIDRemStatus sets the "officeIDRemStatus" field.
func (uuo *UserUpdateOne) SetOfficeIDRemStatus(b bool) *UserUpdateOne {
	uuo.mutation.SetOfficeIDRemStatus(b)
	return uuo
}

// SetNillableOfficeIDRemStatus sets the "officeIDRemStatus" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableOfficeIDRemStatus(b *bool) *UserUpdateOne {
	if b != nil {
		uuo.SetOfficeIDRemStatus(*b)
	}
	return uuo
}

// SetOfficeIDRemarks sets the "officeIDRemarks" field.
func (uuo *UserUpdateOne) SetOfficeIDRemarks(s string) *UserUpdateOne {
	uuo.mutation.SetOfficeIDRemarks(s)
	return uuo
}

// SetPH sets the "PH" field.
func (uuo *UserUpdateOne) SetPH(b bool) *UserUpdateOne {
	uuo.mutation.SetPH(b)
	return uuo
}

// SetPHVerified sets the "PHVerified" field.
func (uuo *UserUpdateOne) SetPHVerified(b bool) *UserUpdateOne {
	uuo.mutation.SetPHVerified(b)
	return uuo
}

// SetNillablePHVerified sets the "PHVerified" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillablePHVerified(b *bool) *UserUpdateOne {
	if b != nil {
		uuo.SetPHVerified(*b)
	}
	return uuo
}

// SetPHRemStatus sets the "PHRemStatus" field.
func (uuo *UserUpdateOne) SetPHRemStatus(b bool) *UserUpdateOne {
	uuo.mutation.SetPHRemStatus(b)
	return uuo
}

// SetNillablePHRemStatus sets the "PHRemStatus" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillablePHRemStatus(b *bool) *UserUpdateOne {
	if b != nil {
		uuo.SetPHRemStatus(*b)
	}
	return uuo
}

// SetPHRemarks sets the "PHRemarks" field.
func (uuo *UserUpdateOne) SetPHRemarks(s string) *UserUpdateOne {
	uuo.mutation.SetPHRemarks(s)
	return uuo
}

// SetPHDetails sets the "PHDetails" field.
func (uuo *UserUpdateOne) SetPHDetails(s string) *UserUpdateOne {
	uuo.mutation.SetPHDetails(s)
	return uuo
}

// SetNillablePHDetails sets the "PHDetails" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillablePHDetails(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetPHDetails(*s)
	}
	return uuo
}

// ClearPHDetails clears the value of the "PHDetails" field.
func (uuo *UserUpdateOne) ClearPHDetails() *UserUpdateOne {
	uuo.mutation.ClearPHDetails()
	return uuo
}

// SetPHDetailsVerified sets the "PHDetailsVerified" field.
func (uuo *UserUpdateOne) SetPHDetailsVerified(b bool) *UserUpdateOne {
	uuo.mutation.SetPHDetailsVerified(b)
	return uuo
}

// SetNillablePHDetailsVerified sets the "PHDetailsVerified" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillablePHDetailsVerified(b *bool) *UserUpdateOne {
	if b != nil {
		uuo.SetPHDetailsVerified(*b)
	}
	return uuo
}

// SetPHDetailsRemStatus sets the "PHDetailsRemStatus" field.
func (uuo *UserUpdateOne) SetPHDetailsRemStatus(b bool) *UserUpdateOne {
	uuo.mutation.SetPHDetailsRemStatus(b)
	return uuo
}

// SetNillablePHDetailsRemStatus sets the "PHDetailsRemStatus" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillablePHDetailsRemStatus(b *bool) *UserUpdateOne {
	if b != nil {
		uuo.SetPHDetailsRemStatus(*b)
	}
	return uuo
}

// SetPHDetailsRemarks sets the "PHDetailsRemarks" field.
func (uuo *UserUpdateOne) SetPHDetailsRemarks(s string) *UserUpdateOne {
	uuo.mutation.SetPHDetailsRemarks(s)
	return uuo
}

// SetAPSWorking sets the "APSWorking" field.
func (uuo *UserUpdateOne) SetAPSWorking(b bool) *UserUpdateOne {
	uuo.mutation.SetAPSWorking(b)
	return uuo
}

// SetAPSWorkingVerified sets the "APSWorkingVerified" field.
func (uuo *UserUpdateOne) SetAPSWorkingVerified(b bool) *UserUpdateOne {
	uuo.mutation.SetAPSWorkingVerified(b)
	return uuo
}

// SetNillableAPSWorkingVerified sets the "APSWorkingVerified" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableAPSWorkingVerified(b *bool) *UserUpdateOne {
	if b != nil {
		uuo.SetAPSWorkingVerified(*b)
	}
	return uuo
}

// SetAPSWorkingRemStatus sets the "APSWorkingRemStatus" field.
func (uuo *UserUpdateOne) SetAPSWorkingRemStatus(b bool) *UserUpdateOne {
	uuo.mutation.SetAPSWorkingRemStatus(b)
	return uuo
}

// SetNillableAPSWorkingRemStatus sets the "APSWorkingRemStatus" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableAPSWorkingRemStatus(b *bool) *UserUpdateOne {
	if b != nil {
		uuo.SetAPSWorkingRemStatus(*b)
	}
	return uuo
}

// SetAPSWorkingRemarks sets the "APSWorkingRemarks" field.
func (uuo *UserUpdateOne) SetAPSWorkingRemarks(s string) *UserUpdateOne {
	uuo.mutation.SetAPSWorkingRemarks(s)
	return uuo
}

// SetProfilestatus sets the "profilestatus" field.
func (uuo *UserUpdateOne) SetProfilestatus(b bool) *UserUpdateOne {
	uuo.mutation.SetProfilestatus(b)
	return uuo
}

// SetNillableProfilestatus sets the "profilestatus" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableProfilestatus(b *bool) *UserUpdateOne {
	if b != nil {
		uuo.SetProfilestatus(*b)
	}
	return uuo
}

// Mutation returns the UserMutation object of the builder.
func (uuo *UserUpdateOne) Mutation() *UserMutation {
	return uuo.mutation
}

// Where appends a list predicates to the UserUpdate builder.
func (uuo *UserUpdateOne) Where(ps ...predicate.User) *UserUpdateOne {
	uuo.mutation.Where(ps...)
	return uuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uuo *UserUpdateOne) Select(field string, fields ...string) *UserUpdateOne {
	uuo.fields = append([]string{field}, fields...)
	return uuo
}

// Save executes the query and returns the updated User entity.
func (uuo *UserUpdateOne) Save(ctx context.Context) (*User, error) {
	return withHooks(ctx, uuo.sqlSave, uuo.mutation, uuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uuo *UserUpdateOne) SaveX(ctx context.Context) *User {
	node, err := uuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uuo *UserUpdateOne) Exec(ctx context.Context) error {
	_, err := uuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uuo *UserUpdateOne) ExecX(ctx context.Context) {
	if err := uuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uuo *UserUpdateOne) check() error {
	if v, ok := uuo.mutation.Gender(); ok {
		if err := user.GenderValidator(v); err != nil {
			return &ValidationError{Name: "Gender", err: fmt.Errorf(`ent: validator failed for field "User.Gender": %w`, err)}
		}
	}
	return nil
}

func (uuo *UserUpdateOne) sqlSave(ctx context.Context) (_node *User, err error) {
	if err := uuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt))
	id, ok := uuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "User.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := uuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, user.FieldID)
		for _, f := range fields {
			if !user.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != user.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uuo.mutation.EmployeedID(); ok {
		_spec.SetField(user.FieldEmployeedID, field.TypeString, value)
	}
	if value, ok := uuo.mutation.IDVerified(); ok {
		_spec.SetField(user.FieldIDVerified, field.TypeBool, value)
	}
	if value, ok := uuo.mutation.IDRemStatus(); ok {
		_spec.SetField(user.FieldIDRemStatus, field.TypeBool, value)
	}
	if value, ok := uuo.mutation.IDRemarks(); ok {
		_spec.SetField(user.FieldIDRemarks, field.TypeString, value)
	}
	if value, ok := uuo.mutation.EmployeedName(); ok {
		_spec.SetField(user.FieldEmployeedName, field.TypeString, value)
	}
	if value, ok := uuo.mutation.NameVerified(); ok {
		_spec.SetField(user.FieldNameVerified, field.TypeBool, value)
	}
	if value, ok := uuo.mutation.NameRemStatus(); ok {
		_spec.SetField(user.FieldNameRemStatus, field.TypeBool, value)
	}
	if value, ok := uuo.mutation.NameRemarks(); ok {
		_spec.SetField(user.FieldNameRemarks, field.TypeString, value)
	}
	if value, ok := uuo.mutation.DOB(); ok {
		_spec.SetField(user.FieldDOB, field.TypeTime, value)
	}
	if value, ok := uuo.mutation.DOBVerified(); ok {
		_spec.SetField(user.FieldDOBVerified, field.TypeBool, value)
	}
	if value, ok := uuo.mutation.DOBRemStatus(); ok {
		_spec.SetField(user.FieldDOBRemStatus, field.TypeBool, value)
	}
	if value, ok := uuo.mutation.DOBRemarks(); ok {
		_spec.SetField(user.FieldDOBRemarks, field.TypeString, value)
	}
	if value, ok := uuo.mutation.Gender(); ok {
		_spec.SetField(user.FieldGender, field.TypeEnum, value)
	}
	if value, ok := uuo.mutation.GenderVerified(); ok {
		_spec.SetField(user.FieldGenderVerified, field.TypeBool, value)
	}
	if value, ok := uuo.mutation.GenderRemStatus(); ok {
		_spec.SetField(user.FieldGenderRemStatus, field.TypeBool, value)
	}
	if value, ok := uuo.mutation.GenderRemarks(); ok {
		_spec.SetField(user.FieldGenderRemarks, field.TypeString, value)
	}
	if value, ok := uuo.mutation.Cadreid(); ok {
		_spec.SetField(user.FieldCadreid, field.TypeInt32, value)
	}
	if value, ok := uuo.mutation.AddedCadreid(); ok {
		_spec.AddField(user.FieldCadreid, field.TypeInt32, value)
	}
	if value, ok := uuo.mutation.CadreidVerified(); ok {
		_spec.SetField(user.FieldCadreidVerified, field.TypeBool, value)
	}
	if value, ok := uuo.mutation.CadreidRemStatus(); ok {
		_spec.SetField(user.FieldCadreidRemStatus, field.TypeBool, value)
	}
	if value, ok := uuo.mutation.CadreidRemarks(); ok {
		_spec.SetField(user.FieldCadreidRemarks, field.TypeString, value)
	}
	if value, ok := uuo.mutation.OfficeID(); ok {
		_spec.SetField(user.FieldOfficeID, field.TypeInt32, value)
	}
	if value, ok := uuo.mutation.AddedOfficeID(); ok {
		_spec.AddField(user.FieldOfficeID, field.TypeInt32, value)
	}
	if value, ok := uuo.mutation.OfficeIDVerified(); ok {
		_spec.SetField(user.FieldOfficeIDVerified, field.TypeBool, value)
	}
	if value, ok := uuo.mutation.OfficeIDRemStatus(); ok {
		_spec.SetField(user.FieldOfficeIDRemStatus, field.TypeBool, value)
	}
	if value, ok := uuo.mutation.OfficeIDRemarks(); ok {
		_spec.SetField(user.FieldOfficeIDRemarks, field.TypeString, value)
	}
	if value, ok := uuo.mutation.PH(); ok {
		_spec.SetField(user.FieldPH, field.TypeBool, value)
	}
	if value, ok := uuo.mutation.PHVerified(); ok {
		_spec.SetField(user.FieldPHVerified, field.TypeBool, value)
	}
	if value, ok := uuo.mutation.PHRemStatus(); ok {
		_spec.SetField(user.FieldPHRemStatus, field.TypeBool, value)
	}
	if value, ok := uuo.mutation.PHRemarks(); ok {
		_spec.SetField(user.FieldPHRemarks, field.TypeString, value)
	}
	if value, ok := uuo.mutation.PHDetails(); ok {
		_spec.SetField(user.FieldPHDetails, field.TypeString, value)
	}
	if uuo.mutation.PHDetailsCleared() {
		_spec.ClearField(user.FieldPHDetails, field.TypeString)
	}
	if value, ok := uuo.mutation.PHDetailsVerified(); ok {
		_spec.SetField(user.FieldPHDetailsVerified, field.TypeBool, value)
	}
	if value, ok := uuo.mutation.PHDetailsRemStatus(); ok {
		_spec.SetField(user.FieldPHDetailsRemStatus, field.TypeBool, value)
	}
	if value, ok := uuo.mutation.PHDetailsRemarks(); ok {
		_spec.SetField(user.FieldPHDetailsRemarks, field.TypeString, value)
	}
	if value, ok := uuo.mutation.APSWorking(); ok {
		_spec.SetField(user.FieldAPSWorking, field.TypeBool, value)
	}
	if value, ok := uuo.mutation.APSWorkingVerified(); ok {
		_spec.SetField(user.FieldAPSWorkingVerified, field.TypeBool, value)
	}
	if value, ok := uuo.mutation.APSWorkingRemStatus(); ok {
		_spec.SetField(user.FieldAPSWorkingRemStatus, field.TypeBool, value)
	}
	if value, ok := uuo.mutation.APSWorkingRemarks(); ok {
		_spec.SetField(user.FieldAPSWorkingRemarks, field.TypeString, value)
	}
	if value, ok := uuo.mutation.Profilestatus(); ok {
		_spec.SetField(user.FieldProfilestatus, field.TypeBool, value)
	}
	_node = &User{config: uuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	uuo.mutation.done = true
	return _node, nil
}
