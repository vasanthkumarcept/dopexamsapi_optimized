// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"recruit/ent/predicate"
	"recruit/ent/recommendationsgdspmapplications"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// RecommendationsGDSPMApplicationsDelete is the builder for deleting a RecommendationsGDSPMApplications entity.
type RecommendationsGDSPMApplicationsDelete struct {
	config
	hooks    []Hook
	mutation *RecommendationsGDSPMApplicationsMutation
}

// Where appends a list predicates to the RecommendationsGDSPMApplicationsDelete builder.
func (rgad *RecommendationsGDSPMApplicationsDelete) Where(ps ...predicate.RecommendationsGDSPMApplications) *RecommendationsGDSPMApplicationsDelete {
	rgad.mutation.Where(ps...)
	return rgad
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (rgad *RecommendationsGDSPMApplicationsDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, rgad.sqlExec, rgad.mutation, rgad.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (rgad *RecommendationsGDSPMApplicationsDelete) ExecX(ctx context.Context) int {
	n, err := rgad.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (rgad *RecommendationsGDSPMApplicationsDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(recommendationsgdspmapplications.Table, sqlgraph.NewFieldSpec(recommendationsgdspmapplications.FieldID, field.TypeInt64))
	if ps := rgad.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, rgad.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	rgad.mutation.done = true
	return affected, err
}

// RecommendationsGDSPMApplicationsDeleteOne is the builder for deleting a single RecommendationsGDSPMApplications entity.
type RecommendationsGDSPMApplicationsDeleteOne struct {
	rgad *RecommendationsGDSPMApplicationsDelete
}

// Where appends a list predicates to the RecommendationsGDSPMApplicationsDelete builder.
func (rgado *RecommendationsGDSPMApplicationsDeleteOne) Where(ps ...predicate.RecommendationsGDSPMApplications) *RecommendationsGDSPMApplicationsDeleteOne {
	rgado.rgad.mutation.Where(ps...)
	return rgado
}

// Exec executes the deletion query.
func (rgado *RecommendationsGDSPMApplicationsDeleteOne) Exec(ctx context.Context) error {
	n, err := rgado.rgad.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{recommendationsgdspmapplications.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (rgado *RecommendationsGDSPMApplicationsDeleteOne) ExecX(ctx context.Context) {
	if err := rgado.Exec(ctx); err != nil {
		panic(err)
	}
}
