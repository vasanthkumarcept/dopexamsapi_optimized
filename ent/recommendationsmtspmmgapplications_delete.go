// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"recruit/ent/predicate"
	"recruit/ent/recommendationsmtspmmgapplications"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// RecommendationsMTSPMMGApplicationsDelete is the builder for deleting a RecommendationsMTSPMMGApplications entity.
type RecommendationsMTSPMMGApplicationsDelete struct {
	config
	hooks    []Hook
	mutation *RecommendationsMTSPMMGApplicationsMutation
}

// Where appends a list predicates to the RecommendationsMTSPMMGApplicationsDelete builder.
func (rmad *RecommendationsMTSPMMGApplicationsDelete) Where(ps ...predicate.RecommendationsMTSPMMGApplications) *RecommendationsMTSPMMGApplicationsDelete {
	rmad.mutation.Where(ps...)
	return rmad
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (rmad *RecommendationsMTSPMMGApplicationsDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, rmad.sqlExec, rmad.mutation, rmad.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (rmad *RecommendationsMTSPMMGApplicationsDelete) ExecX(ctx context.Context) int {
	n, err := rmad.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (rmad *RecommendationsMTSPMMGApplicationsDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(recommendationsmtspmmgapplications.Table, sqlgraph.NewFieldSpec(recommendationsmtspmmgapplications.FieldID, field.TypeInt64))
	if ps := rmad.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, rmad.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	rmad.mutation.done = true
	return affected, err
}

// RecommendationsMTSPMMGApplicationsDeleteOne is the builder for deleting a single RecommendationsMTSPMMGApplications entity.
type RecommendationsMTSPMMGApplicationsDeleteOne struct {
	rmad *RecommendationsMTSPMMGApplicationsDelete
}

// Where appends a list predicates to the RecommendationsMTSPMMGApplicationsDelete builder.
func (rmado *RecommendationsMTSPMMGApplicationsDeleteOne) Where(ps ...predicate.RecommendationsMTSPMMGApplications) *RecommendationsMTSPMMGApplicationsDeleteOne {
	rmado.rmad.mutation.Where(ps...)
	return rmado
}

// Exec executes the deletion query.
func (rmado *RecommendationsMTSPMMGApplicationsDeleteOne) Exec(ctx context.Context) error {
	n, err := rmado.rmad.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{recommendationsmtspmmgapplications.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (rmado *RecommendationsMTSPMMGApplicationsDeleteOne) ExecX(ctx context.Context) {
	if err := rmado.Exec(ctx); err != nil {
		panic(err)
	}
}
