// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"recruit/ent/division_choice_mtspmmg"
	"recruit/ent/exam_application_mtspmmg"
	"recruit/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// DivisionChoiceMTSPMMGUpdate is the builder for updating Division_Choice_MTSPMMG entities.
type DivisionChoiceMTSPMMGUpdate struct {
	config
	hooks    []Hook
	mutation *DivisionChoiceMTSPMMGMutation
}

// Where appends a list predicates to the DivisionChoiceMTSPMMGUpdate builder.
func (dcmu *DivisionChoiceMTSPMMGUpdate) Where(ps ...predicate.Division_Choice_MTSPMMG) *DivisionChoiceMTSPMMGUpdate {
	dcmu.mutation.Where(ps...)
	return dcmu
}

// SetApplicationID sets the "ApplicationID" field.
func (dcmu *DivisionChoiceMTSPMMGUpdate) SetApplicationID(i int64) *DivisionChoiceMTSPMMGUpdate {
	dcmu.mutation.SetApplicationID(i)
	return dcmu
}

// SetNillableApplicationID sets the "ApplicationID" field if the given value is not nil.
func (dcmu *DivisionChoiceMTSPMMGUpdate) SetNillableApplicationID(i *int64) *DivisionChoiceMTSPMMGUpdate {
	if i != nil {
		dcmu.SetApplicationID(*i)
	}
	return dcmu
}

// ClearApplicationID clears the value of the "ApplicationID" field.
func (dcmu *DivisionChoiceMTSPMMGUpdate) ClearApplicationID() *DivisionChoiceMTSPMMGUpdate {
	dcmu.mutation.ClearApplicationID()
	return dcmu
}

// SetGroup sets the "Group" field.
func (dcmu *DivisionChoiceMTSPMMGUpdate) SetGroup(s string) *DivisionChoiceMTSPMMGUpdate {
	dcmu.mutation.SetGroup(s)
	return dcmu
}

// SetNillableGroup sets the "Group" field if the given value is not nil.
func (dcmu *DivisionChoiceMTSPMMGUpdate) SetNillableGroup(s *string) *DivisionChoiceMTSPMMGUpdate {
	if s != nil {
		dcmu.SetGroup(*s)
	}
	return dcmu
}

// ClearGroup clears the value of the "Group" field.
func (dcmu *DivisionChoiceMTSPMMGUpdate) ClearGroup() *DivisionChoiceMTSPMMGUpdate {
	dcmu.mutation.ClearGroup()
	return dcmu
}

// SetCadrePrefNo sets the "CadrePrefNo" field.
func (dcmu *DivisionChoiceMTSPMMGUpdate) SetCadrePrefNo(i int64) *DivisionChoiceMTSPMMGUpdate {
	dcmu.mutation.ResetCadrePrefNo()
	dcmu.mutation.SetCadrePrefNo(i)
	return dcmu
}

// SetNillableCadrePrefNo sets the "CadrePrefNo" field if the given value is not nil.
func (dcmu *DivisionChoiceMTSPMMGUpdate) SetNillableCadrePrefNo(i *int64) *DivisionChoiceMTSPMMGUpdate {
	if i != nil {
		dcmu.SetCadrePrefNo(*i)
	}
	return dcmu
}

// AddCadrePrefNo adds i to the "CadrePrefNo" field.
func (dcmu *DivisionChoiceMTSPMMGUpdate) AddCadrePrefNo(i int64) *DivisionChoiceMTSPMMGUpdate {
	dcmu.mutation.AddCadrePrefNo(i)
	return dcmu
}

// ClearCadrePrefNo clears the value of the "CadrePrefNo" field.
func (dcmu *DivisionChoiceMTSPMMGUpdate) ClearCadrePrefNo() *DivisionChoiceMTSPMMGUpdate {
	dcmu.mutation.ClearCadrePrefNo()
	return dcmu
}

// SetCadre sets the "Cadre" field.
func (dcmu *DivisionChoiceMTSPMMGUpdate) SetCadre(s string) *DivisionChoiceMTSPMMGUpdate {
	dcmu.mutation.SetCadre(s)
	return dcmu
}

// SetNillableCadre sets the "Cadre" field if the given value is not nil.
func (dcmu *DivisionChoiceMTSPMMGUpdate) SetNillableCadre(s *string) *DivisionChoiceMTSPMMGUpdate {
	if s != nil {
		dcmu.SetCadre(*s)
	}
	return dcmu
}

// ClearCadre clears the value of the "Cadre" field.
func (dcmu *DivisionChoiceMTSPMMGUpdate) ClearCadre() *DivisionChoiceMTSPMMGUpdate {
	dcmu.mutation.ClearCadre()
	return dcmu
}

// SetPlacePrefNo sets the "PlacePrefNo" field.
func (dcmu *DivisionChoiceMTSPMMGUpdate) SetPlacePrefNo(i int64) *DivisionChoiceMTSPMMGUpdate {
	dcmu.mutation.ResetPlacePrefNo()
	dcmu.mutation.SetPlacePrefNo(i)
	return dcmu
}

// SetNillablePlacePrefNo sets the "PlacePrefNo" field if the given value is not nil.
func (dcmu *DivisionChoiceMTSPMMGUpdate) SetNillablePlacePrefNo(i *int64) *DivisionChoiceMTSPMMGUpdate {
	if i != nil {
		dcmu.SetPlacePrefNo(*i)
	}
	return dcmu
}

// AddPlacePrefNo adds i to the "PlacePrefNo" field.
func (dcmu *DivisionChoiceMTSPMMGUpdate) AddPlacePrefNo(i int64) *DivisionChoiceMTSPMMGUpdate {
	dcmu.mutation.AddPlacePrefNo(i)
	return dcmu
}

// ClearPlacePrefNo clears the value of the "PlacePrefNo" field.
func (dcmu *DivisionChoiceMTSPMMGUpdate) ClearPlacePrefNo() *DivisionChoiceMTSPMMGUpdate {
	dcmu.mutation.ClearPlacePrefNo()
	return dcmu
}

// SetPlacePrefValue sets the "PlacePrefValue" field.
func (dcmu *DivisionChoiceMTSPMMGUpdate) SetPlacePrefValue(s string) *DivisionChoiceMTSPMMGUpdate {
	dcmu.mutation.SetPlacePrefValue(s)
	return dcmu
}

// SetNillablePlacePrefValue sets the "PlacePrefValue" field if the given value is not nil.
func (dcmu *DivisionChoiceMTSPMMGUpdate) SetNillablePlacePrefValue(s *string) *DivisionChoiceMTSPMMGUpdate {
	if s != nil {
		dcmu.SetPlacePrefValue(*s)
	}
	return dcmu
}

// ClearPlacePrefValue clears the value of the "PlacePrefValue" field.
func (dcmu *DivisionChoiceMTSPMMGUpdate) ClearPlacePrefValue() *DivisionChoiceMTSPMMGUpdate {
	dcmu.mutation.ClearPlacePrefValue()
	return dcmu
}

// SetPostPrefNo sets the "PostPrefNo" field.
func (dcmu *DivisionChoiceMTSPMMGUpdate) SetPostPrefNo(i int64) *DivisionChoiceMTSPMMGUpdate {
	dcmu.mutation.ResetPostPrefNo()
	dcmu.mutation.SetPostPrefNo(i)
	return dcmu
}

// SetNillablePostPrefNo sets the "PostPrefNo" field if the given value is not nil.
func (dcmu *DivisionChoiceMTSPMMGUpdate) SetNillablePostPrefNo(i *int64) *DivisionChoiceMTSPMMGUpdate {
	if i != nil {
		dcmu.SetPostPrefNo(*i)
	}
	return dcmu
}

// AddPostPrefNo adds i to the "PostPrefNo" field.
func (dcmu *DivisionChoiceMTSPMMGUpdate) AddPostPrefNo(i int64) *DivisionChoiceMTSPMMGUpdate {
	dcmu.mutation.AddPostPrefNo(i)
	return dcmu
}

// ClearPostPrefNo clears the value of the "PostPrefNo" field.
func (dcmu *DivisionChoiceMTSPMMGUpdate) ClearPostPrefNo() *DivisionChoiceMTSPMMGUpdate {
	dcmu.mutation.ClearPostPrefNo()
	return dcmu
}

// SetPostingPrefValue sets the "PostingPrefValue" field.
func (dcmu *DivisionChoiceMTSPMMGUpdate) SetPostingPrefValue(s string) *DivisionChoiceMTSPMMGUpdate {
	dcmu.mutation.SetPostingPrefValue(s)
	return dcmu
}

// SetNillablePostingPrefValue sets the "PostingPrefValue" field if the given value is not nil.
func (dcmu *DivisionChoiceMTSPMMGUpdate) SetNillablePostingPrefValue(s *string) *DivisionChoiceMTSPMMGUpdate {
	if s != nil {
		dcmu.SetPostingPrefValue(*s)
	}
	return dcmu
}

// ClearPostingPrefValue clears the value of the "PostingPrefValue" field.
func (dcmu *DivisionChoiceMTSPMMGUpdate) ClearPostingPrefValue() *DivisionChoiceMTSPMMGUpdate {
	dcmu.mutation.ClearPostingPrefValue()
	return dcmu
}

// SetEmployeeID sets the "EmployeeID" field.
func (dcmu *DivisionChoiceMTSPMMGUpdate) SetEmployeeID(i int64) *DivisionChoiceMTSPMMGUpdate {
	dcmu.mutation.ResetEmployeeID()
	dcmu.mutation.SetEmployeeID(i)
	return dcmu
}

// SetNillableEmployeeID sets the "EmployeeID" field if the given value is not nil.
func (dcmu *DivisionChoiceMTSPMMGUpdate) SetNillableEmployeeID(i *int64) *DivisionChoiceMTSPMMGUpdate {
	if i != nil {
		dcmu.SetEmployeeID(*i)
	}
	return dcmu
}

// AddEmployeeID adds i to the "EmployeeID" field.
func (dcmu *DivisionChoiceMTSPMMGUpdate) AddEmployeeID(i int64) *DivisionChoiceMTSPMMGUpdate {
	dcmu.mutation.AddEmployeeID(i)
	return dcmu
}

// ClearEmployeeID clears the value of the "EmployeeID" field.
func (dcmu *DivisionChoiceMTSPMMGUpdate) ClearEmployeeID() *DivisionChoiceMTSPMMGUpdate {
	dcmu.mutation.ClearEmployeeID()
	return dcmu
}

// SetUpdatedAt sets the "UpdatedAt" field.
func (dcmu *DivisionChoiceMTSPMMGUpdate) SetUpdatedAt(t time.Time) *DivisionChoiceMTSPMMGUpdate {
	dcmu.mutation.SetUpdatedAt(t)
	return dcmu
}

// SetNillableUpdatedAt sets the "UpdatedAt" field if the given value is not nil.
func (dcmu *DivisionChoiceMTSPMMGUpdate) SetNillableUpdatedAt(t *time.Time) *DivisionChoiceMTSPMMGUpdate {
	if t != nil {
		dcmu.SetUpdatedAt(*t)
	}
	return dcmu
}

// ClearUpdatedAt clears the value of the "UpdatedAt" field.
func (dcmu *DivisionChoiceMTSPMMGUpdate) ClearUpdatedAt() *DivisionChoiceMTSPMMGUpdate {
	dcmu.mutation.ClearUpdatedAt()
	return dcmu
}

// SetUpdatedBy sets the "UpdatedBy" field.
func (dcmu *DivisionChoiceMTSPMMGUpdate) SetUpdatedBy(s string) *DivisionChoiceMTSPMMGUpdate {
	dcmu.mutation.SetUpdatedBy(s)
	return dcmu
}

// SetNillableUpdatedBy sets the "UpdatedBy" field if the given value is not nil.
func (dcmu *DivisionChoiceMTSPMMGUpdate) SetNillableUpdatedBy(s *string) *DivisionChoiceMTSPMMGUpdate {
	if s != nil {
		dcmu.SetUpdatedBy(*s)
	}
	return dcmu
}

// ClearUpdatedBy clears the value of the "UpdatedBy" field.
func (dcmu *DivisionChoiceMTSPMMGUpdate) ClearUpdatedBy() *DivisionChoiceMTSPMMGUpdate {
	dcmu.mutation.ClearUpdatedBy()
	return dcmu
}

// SetApplnMTSPMMGRefID sets the "ApplnMTSPMMG_Ref" edge to the Exam_Application_MTSPMMG entity by ID.
func (dcmu *DivisionChoiceMTSPMMGUpdate) SetApplnMTSPMMGRefID(id int64) *DivisionChoiceMTSPMMGUpdate {
	dcmu.mutation.SetApplnMTSPMMGRefID(id)
	return dcmu
}

// SetNillableApplnMTSPMMGRefID sets the "ApplnMTSPMMG_Ref" edge to the Exam_Application_MTSPMMG entity by ID if the given value is not nil.
func (dcmu *DivisionChoiceMTSPMMGUpdate) SetNillableApplnMTSPMMGRefID(id *int64) *DivisionChoiceMTSPMMGUpdate {
	if id != nil {
		dcmu = dcmu.SetApplnMTSPMMGRefID(*id)
	}
	return dcmu
}

// SetApplnMTSPMMGRef sets the "ApplnMTSPMMG_Ref" edge to the Exam_Application_MTSPMMG entity.
func (dcmu *DivisionChoiceMTSPMMGUpdate) SetApplnMTSPMMGRef(e *Exam_Application_MTSPMMG) *DivisionChoiceMTSPMMGUpdate {
	return dcmu.SetApplnMTSPMMGRefID(e.ID)
}

// Mutation returns the DivisionChoiceMTSPMMGMutation object of the builder.
func (dcmu *DivisionChoiceMTSPMMGUpdate) Mutation() *DivisionChoiceMTSPMMGMutation {
	return dcmu.mutation
}

// ClearApplnMTSPMMGRef clears the "ApplnMTSPMMG_Ref" edge to the Exam_Application_MTSPMMG entity.
func (dcmu *DivisionChoiceMTSPMMGUpdate) ClearApplnMTSPMMGRef() *DivisionChoiceMTSPMMGUpdate {
	dcmu.mutation.ClearApplnMTSPMMGRef()
	return dcmu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (dcmu *DivisionChoiceMTSPMMGUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, dcmu.sqlSave, dcmu.mutation, dcmu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (dcmu *DivisionChoiceMTSPMMGUpdate) SaveX(ctx context.Context) int {
	affected, err := dcmu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (dcmu *DivisionChoiceMTSPMMGUpdate) Exec(ctx context.Context) error {
	_, err := dcmu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dcmu *DivisionChoiceMTSPMMGUpdate) ExecX(ctx context.Context) {
	if err := dcmu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (dcmu *DivisionChoiceMTSPMMGUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(division_choice_mtspmmg.Table, division_choice_mtspmmg.Columns, sqlgraph.NewFieldSpec(division_choice_mtspmmg.FieldID, field.TypeInt32))
	if ps := dcmu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := dcmu.mutation.Group(); ok {
		_spec.SetField(division_choice_mtspmmg.FieldGroup, field.TypeString, value)
	}
	if dcmu.mutation.GroupCleared() {
		_spec.ClearField(division_choice_mtspmmg.FieldGroup, field.TypeString)
	}
	if value, ok := dcmu.mutation.CadrePrefNo(); ok {
		_spec.SetField(division_choice_mtspmmg.FieldCadrePrefNo, field.TypeInt64, value)
	}
	if value, ok := dcmu.mutation.AddedCadrePrefNo(); ok {
		_spec.AddField(division_choice_mtspmmg.FieldCadrePrefNo, field.TypeInt64, value)
	}
	if dcmu.mutation.CadrePrefNoCleared() {
		_spec.ClearField(division_choice_mtspmmg.FieldCadrePrefNo, field.TypeInt64)
	}
	if value, ok := dcmu.mutation.Cadre(); ok {
		_spec.SetField(division_choice_mtspmmg.FieldCadre, field.TypeString, value)
	}
	if dcmu.mutation.CadreCleared() {
		_spec.ClearField(division_choice_mtspmmg.FieldCadre, field.TypeString)
	}
	if value, ok := dcmu.mutation.PlacePrefNo(); ok {
		_spec.SetField(division_choice_mtspmmg.FieldPlacePrefNo, field.TypeInt64, value)
	}
	if value, ok := dcmu.mutation.AddedPlacePrefNo(); ok {
		_spec.AddField(division_choice_mtspmmg.FieldPlacePrefNo, field.TypeInt64, value)
	}
	if dcmu.mutation.PlacePrefNoCleared() {
		_spec.ClearField(division_choice_mtspmmg.FieldPlacePrefNo, field.TypeInt64)
	}
	if value, ok := dcmu.mutation.PlacePrefValue(); ok {
		_spec.SetField(division_choice_mtspmmg.FieldPlacePrefValue, field.TypeString, value)
	}
	if dcmu.mutation.PlacePrefValueCleared() {
		_spec.ClearField(division_choice_mtspmmg.FieldPlacePrefValue, field.TypeString)
	}
	if value, ok := dcmu.mutation.PostPrefNo(); ok {
		_spec.SetField(division_choice_mtspmmg.FieldPostPrefNo, field.TypeInt64, value)
	}
	if value, ok := dcmu.mutation.AddedPostPrefNo(); ok {
		_spec.AddField(division_choice_mtspmmg.FieldPostPrefNo, field.TypeInt64, value)
	}
	if dcmu.mutation.PostPrefNoCleared() {
		_spec.ClearField(division_choice_mtspmmg.FieldPostPrefNo, field.TypeInt64)
	}
	if value, ok := dcmu.mutation.PostingPrefValue(); ok {
		_spec.SetField(division_choice_mtspmmg.FieldPostingPrefValue, field.TypeString, value)
	}
	if dcmu.mutation.PostingPrefValueCleared() {
		_spec.ClearField(division_choice_mtspmmg.FieldPostingPrefValue, field.TypeString)
	}
	if value, ok := dcmu.mutation.EmployeeID(); ok {
		_spec.SetField(division_choice_mtspmmg.FieldEmployeeID, field.TypeInt64, value)
	}
	if value, ok := dcmu.mutation.AddedEmployeeID(); ok {
		_spec.AddField(division_choice_mtspmmg.FieldEmployeeID, field.TypeInt64, value)
	}
	if dcmu.mutation.EmployeeIDCleared() {
		_spec.ClearField(division_choice_mtspmmg.FieldEmployeeID, field.TypeInt64)
	}
	if value, ok := dcmu.mutation.UpdatedAt(); ok {
		_spec.SetField(division_choice_mtspmmg.FieldUpdatedAt, field.TypeTime, value)
	}
	if dcmu.mutation.UpdatedAtCleared() {
		_spec.ClearField(division_choice_mtspmmg.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := dcmu.mutation.UpdatedBy(); ok {
		_spec.SetField(division_choice_mtspmmg.FieldUpdatedBy, field.TypeString, value)
	}
	if dcmu.mutation.UpdatedByCleared() {
		_spec.ClearField(division_choice_mtspmmg.FieldUpdatedBy, field.TypeString)
	}
	if dcmu.mutation.ApplnMTSPMMGRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   division_choice_mtspmmg.ApplnMTSPMMGRefTable,
			Columns: []string{division_choice_mtspmmg.ApplnMTSPMMGRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_application_mtspmmg.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dcmu.mutation.ApplnMTSPMMGRefIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   division_choice_mtspmmg.ApplnMTSPMMGRefTable,
			Columns: []string{division_choice_mtspmmg.ApplnMTSPMMGRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_application_mtspmmg.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, dcmu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{division_choice_mtspmmg.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	dcmu.mutation.done = true
	return n, nil
}

// DivisionChoiceMTSPMMGUpdateOne is the builder for updating a single Division_Choice_MTSPMMG entity.
type DivisionChoiceMTSPMMGUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DivisionChoiceMTSPMMGMutation
}

// SetApplicationID sets the "ApplicationID" field.
func (dcmuo *DivisionChoiceMTSPMMGUpdateOne) SetApplicationID(i int64) *DivisionChoiceMTSPMMGUpdateOne {
	dcmuo.mutation.SetApplicationID(i)
	return dcmuo
}

// SetNillableApplicationID sets the "ApplicationID" field if the given value is not nil.
func (dcmuo *DivisionChoiceMTSPMMGUpdateOne) SetNillableApplicationID(i *int64) *DivisionChoiceMTSPMMGUpdateOne {
	if i != nil {
		dcmuo.SetApplicationID(*i)
	}
	return dcmuo
}

// ClearApplicationID clears the value of the "ApplicationID" field.
func (dcmuo *DivisionChoiceMTSPMMGUpdateOne) ClearApplicationID() *DivisionChoiceMTSPMMGUpdateOne {
	dcmuo.mutation.ClearApplicationID()
	return dcmuo
}

// SetGroup sets the "Group" field.
func (dcmuo *DivisionChoiceMTSPMMGUpdateOne) SetGroup(s string) *DivisionChoiceMTSPMMGUpdateOne {
	dcmuo.mutation.SetGroup(s)
	return dcmuo
}

// SetNillableGroup sets the "Group" field if the given value is not nil.
func (dcmuo *DivisionChoiceMTSPMMGUpdateOne) SetNillableGroup(s *string) *DivisionChoiceMTSPMMGUpdateOne {
	if s != nil {
		dcmuo.SetGroup(*s)
	}
	return dcmuo
}

// ClearGroup clears the value of the "Group" field.
func (dcmuo *DivisionChoiceMTSPMMGUpdateOne) ClearGroup() *DivisionChoiceMTSPMMGUpdateOne {
	dcmuo.mutation.ClearGroup()
	return dcmuo
}

// SetCadrePrefNo sets the "CadrePrefNo" field.
func (dcmuo *DivisionChoiceMTSPMMGUpdateOne) SetCadrePrefNo(i int64) *DivisionChoiceMTSPMMGUpdateOne {
	dcmuo.mutation.ResetCadrePrefNo()
	dcmuo.mutation.SetCadrePrefNo(i)
	return dcmuo
}

// SetNillableCadrePrefNo sets the "CadrePrefNo" field if the given value is not nil.
func (dcmuo *DivisionChoiceMTSPMMGUpdateOne) SetNillableCadrePrefNo(i *int64) *DivisionChoiceMTSPMMGUpdateOne {
	if i != nil {
		dcmuo.SetCadrePrefNo(*i)
	}
	return dcmuo
}

// AddCadrePrefNo adds i to the "CadrePrefNo" field.
func (dcmuo *DivisionChoiceMTSPMMGUpdateOne) AddCadrePrefNo(i int64) *DivisionChoiceMTSPMMGUpdateOne {
	dcmuo.mutation.AddCadrePrefNo(i)
	return dcmuo
}

// ClearCadrePrefNo clears the value of the "CadrePrefNo" field.
func (dcmuo *DivisionChoiceMTSPMMGUpdateOne) ClearCadrePrefNo() *DivisionChoiceMTSPMMGUpdateOne {
	dcmuo.mutation.ClearCadrePrefNo()
	return dcmuo
}

// SetCadre sets the "Cadre" field.
func (dcmuo *DivisionChoiceMTSPMMGUpdateOne) SetCadre(s string) *DivisionChoiceMTSPMMGUpdateOne {
	dcmuo.mutation.SetCadre(s)
	return dcmuo
}

// SetNillableCadre sets the "Cadre" field if the given value is not nil.
func (dcmuo *DivisionChoiceMTSPMMGUpdateOne) SetNillableCadre(s *string) *DivisionChoiceMTSPMMGUpdateOne {
	if s != nil {
		dcmuo.SetCadre(*s)
	}
	return dcmuo
}

// ClearCadre clears the value of the "Cadre" field.
func (dcmuo *DivisionChoiceMTSPMMGUpdateOne) ClearCadre() *DivisionChoiceMTSPMMGUpdateOne {
	dcmuo.mutation.ClearCadre()
	return dcmuo
}

// SetPlacePrefNo sets the "PlacePrefNo" field.
func (dcmuo *DivisionChoiceMTSPMMGUpdateOne) SetPlacePrefNo(i int64) *DivisionChoiceMTSPMMGUpdateOne {
	dcmuo.mutation.ResetPlacePrefNo()
	dcmuo.mutation.SetPlacePrefNo(i)
	return dcmuo
}

// SetNillablePlacePrefNo sets the "PlacePrefNo" field if the given value is not nil.
func (dcmuo *DivisionChoiceMTSPMMGUpdateOne) SetNillablePlacePrefNo(i *int64) *DivisionChoiceMTSPMMGUpdateOne {
	if i != nil {
		dcmuo.SetPlacePrefNo(*i)
	}
	return dcmuo
}

// AddPlacePrefNo adds i to the "PlacePrefNo" field.
func (dcmuo *DivisionChoiceMTSPMMGUpdateOne) AddPlacePrefNo(i int64) *DivisionChoiceMTSPMMGUpdateOne {
	dcmuo.mutation.AddPlacePrefNo(i)
	return dcmuo
}

// ClearPlacePrefNo clears the value of the "PlacePrefNo" field.
func (dcmuo *DivisionChoiceMTSPMMGUpdateOne) ClearPlacePrefNo() *DivisionChoiceMTSPMMGUpdateOne {
	dcmuo.mutation.ClearPlacePrefNo()
	return dcmuo
}

// SetPlacePrefValue sets the "PlacePrefValue" field.
func (dcmuo *DivisionChoiceMTSPMMGUpdateOne) SetPlacePrefValue(s string) *DivisionChoiceMTSPMMGUpdateOne {
	dcmuo.mutation.SetPlacePrefValue(s)
	return dcmuo
}

// SetNillablePlacePrefValue sets the "PlacePrefValue" field if the given value is not nil.
func (dcmuo *DivisionChoiceMTSPMMGUpdateOne) SetNillablePlacePrefValue(s *string) *DivisionChoiceMTSPMMGUpdateOne {
	if s != nil {
		dcmuo.SetPlacePrefValue(*s)
	}
	return dcmuo
}

// ClearPlacePrefValue clears the value of the "PlacePrefValue" field.
func (dcmuo *DivisionChoiceMTSPMMGUpdateOne) ClearPlacePrefValue() *DivisionChoiceMTSPMMGUpdateOne {
	dcmuo.mutation.ClearPlacePrefValue()
	return dcmuo
}

// SetPostPrefNo sets the "PostPrefNo" field.
func (dcmuo *DivisionChoiceMTSPMMGUpdateOne) SetPostPrefNo(i int64) *DivisionChoiceMTSPMMGUpdateOne {
	dcmuo.mutation.ResetPostPrefNo()
	dcmuo.mutation.SetPostPrefNo(i)
	return dcmuo
}

// SetNillablePostPrefNo sets the "PostPrefNo" field if the given value is not nil.
func (dcmuo *DivisionChoiceMTSPMMGUpdateOne) SetNillablePostPrefNo(i *int64) *DivisionChoiceMTSPMMGUpdateOne {
	if i != nil {
		dcmuo.SetPostPrefNo(*i)
	}
	return dcmuo
}

// AddPostPrefNo adds i to the "PostPrefNo" field.
func (dcmuo *DivisionChoiceMTSPMMGUpdateOne) AddPostPrefNo(i int64) *DivisionChoiceMTSPMMGUpdateOne {
	dcmuo.mutation.AddPostPrefNo(i)
	return dcmuo
}

// ClearPostPrefNo clears the value of the "PostPrefNo" field.
func (dcmuo *DivisionChoiceMTSPMMGUpdateOne) ClearPostPrefNo() *DivisionChoiceMTSPMMGUpdateOne {
	dcmuo.mutation.ClearPostPrefNo()
	return dcmuo
}

// SetPostingPrefValue sets the "PostingPrefValue" field.
func (dcmuo *DivisionChoiceMTSPMMGUpdateOne) SetPostingPrefValue(s string) *DivisionChoiceMTSPMMGUpdateOne {
	dcmuo.mutation.SetPostingPrefValue(s)
	return dcmuo
}

// SetNillablePostingPrefValue sets the "PostingPrefValue" field if the given value is not nil.
func (dcmuo *DivisionChoiceMTSPMMGUpdateOne) SetNillablePostingPrefValue(s *string) *DivisionChoiceMTSPMMGUpdateOne {
	if s != nil {
		dcmuo.SetPostingPrefValue(*s)
	}
	return dcmuo
}

// ClearPostingPrefValue clears the value of the "PostingPrefValue" field.
func (dcmuo *DivisionChoiceMTSPMMGUpdateOne) ClearPostingPrefValue() *DivisionChoiceMTSPMMGUpdateOne {
	dcmuo.mutation.ClearPostingPrefValue()
	return dcmuo
}

// SetEmployeeID sets the "EmployeeID" field.
func (dcmuo *DivisionChoiceMTSPMMGUpdateOne) SetEmployeeID(i int64) *DivisionChoiceMTSPMMGUpdateOne {
	dcmuo.mutation.ResetEmployeeID()
	dcmuo.mutation.SetEmployeeID(i)
	return dcmuo
}

// SetNillableEmployeeID sets the "EmployeeID" field if the given value is not nil.
func (dcmuo *DivisionChoiceMTSPMMGUpdateOne) SetNillableEmployeeID(i *int64) *DivisionChoiceMTSPMMGUpdateOne {
	if i != nil {
		dcmuo.SetEmployeeID(*i)
	}
	return dcmuo
}

// AddEmployeeID adds i to the "EmployeeID" field.
func (dcmuo *DivisionChoiceMTSPMMGUpdateOne) AddEmployeeID(i int64) *DivisionChoiceMTSPMMGUpdateOne {
	dcmuo.mutation.AddEmployeeID(i)
	return dcmuo
}

// ClearEmployeeID clears the value of the "EmployeeID" field.
func (dcmuo *DivisionChoiceMTSPMMGUpdateOne) ClearEmployeeID() *DivisionChoiceMTSPMMGUpdateOne {
	dcmuo.mutation.ClearEmployeeID()
	return dcmuo
}

// SetUpdatedAt sets the "UpdatedAt" field.
func (dcmuo *DivisionChoiceMTSPMMGUpdateOne) SetUpdatedAt(t time.Time) *DivisionChoiceMTSPMMGUpdateOne {
	dcmuo.mutation.SetUpdatedAt(t)
	return dcmuo
}

// SetNillableUpdatedAt sets the "UpdatedAt" field if the given value is not nil.
func (dcmuo *DivisionChoiceMTSPMMGUpdateOne) SetNillableUpdatedAt(t *time.Time) *DivisionChoiceMTSPMMGUpdateOne {
	if t != nil {
		dcmuo.SetUpdatedAt(*t)
	}
	return dcmuo
}

// ClearUpdatedAt clears the value of the "UpdatedAt" field.
func (dcmuo *DivisionChoiceMTSPMMGUpdateOne) ClearUpdatedAt() *DivisionChoiceMTSPMMGUpdateOne {
	dcmuo.mutation.ClearUpdatedAt()
	return dcmuo
}

// SetUpdatedBy sets the "UpdatedBy" field.
func (dcmuo *DivisionChoiceMTSPMMGUpdateOne) SetUpdatedBy(s string) *DivisionChoiceMTSPMMGUpdateOne {
	dcmuo.mutation.SetUpdatedBy(s)
	return dcmuo
}

// SetNillableUpdatedBy sets the "UpdatedBy" field if the given value is not nil.
func (dcmuo *DivisionChoiceMTSPMMGUpdateOne) SetNillableUpdatedBy(s *string) *DivisionChoiceMTSPMMGUpdateOne {
	if s != nil {
		dcmuo.SetUpdatedBy(*s)
	}
	return dcmuo
}

// ClearUpdatedBy clears the value of the "UpdatedBy" field.
func (dcmuo *DivisionChoiceMTSPMMGUpdateOne) ClearUpdatedBy() *DivisionChoiceMTSPMMGUpdateOne {
	dcmuo.mutation.ClearUpdatedBy()
	return dcmuo
}

// SetApplnMTSPMMGRefID sets the "ApplnMTSPMMG_Ref" edge to the Exam_Application_MTSPMMG entity by ID.
func (dcmuo *DivisionChoiceMTSPMMGUpdateOne) SetApplnMTSPMMGRefID(id int64) *DivisionChoiceMTSPMMGUpdateOne {
	dcmuo.mutation.SetApplnMTSPMMGRefID(id)
	return dcmuo
}

// SetNillableApplnMTSPMMGRefID sets the "ApplnMTSPMMG_Ref" edge to the Exam_Application_MTSPMMG entity by ID if the given value is not nil.
func (dcmuo *DivisionChoiceMTSPMMGUpdateOne) SetNillableApplnMTSPMMGRefID(id *int64) *DivisionChoiceMTSPMMGUpdateOne {
	if id != nil {
		dcmuo = dcmuo.SetApplnMTSPMMGRefID(*id)
	}
	return dcmuo
}

// SetApplnMTSPMMGRef sets the "ApplnMTSPMMG_Ref" edge to the Exam_Application_MTSPMMG entity.
func (dcmuo *DivisionChoiceMTSPMMGUpdateOne) SetApplnMTSPMMGRef(e *Exam_Application_MTSPMMG) *DivisionChoiceMTSPMMGUpdateOne {
	return dcmuo.SetApplnMTSPMMGRefID(e.ID)
}

// Mutation returns the DivisionChoiceMTSPMMGMutation object of the builder.
func (dcmuo *DivisionChoiceMTSPMMGUpdateOne) Mutation() *DivisionChoiceMTSPMMGMutation {
	return dcmuo.mutation
}

// ClearApplnMTSPMMGRef clears the "ApplnMTSPMMG_Ref" edge to the Exam_Application_MTSPMMG entity.
func (dcmuo *DivisionChoiceMTSPMMGUpdateOne) ClearApplnMTSPMMGRef() *DivisionChoiceMTSPMMGUpdateOne {
	dcmuo.mutation.ClearApplnMTSPMMGRef()
	return dcmuo
}

// Where appends a list predicates to the DivisionChoiceMTSPMMGUpdate builder.
func (dcmuo *DivisionChoiceMTSPMMGUpdateOne) Where(ps ...predicate.Division_Choice_MTSPMMG) *DivisionChoiceMTSPMMGUpdateOne {
	dcmuo.mutation.Where(ps...)
	return dcmuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (dcmuo *DivisionChoiceMTSPMMGUpdateOne) Select(field string, fields ...string) *DivisionChoiceMTSPMMGUpdateOne {
	dcmuo.fields = append([]string{field}, fields...)
	return dcmuo
}

// Save executes the query and returns the updated Division_Choice_MTSPMMG entity.
func (dcmuo *DivisionChoiceMTSPMMGUpdateOne) Save(ctx context.Context) (*Division_Choice_MTSPMMG, error) {
	return withHooks(ctx, dcmuo.sqlSave, dcmuo.mutation, dcmuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (dcmuo *DivisionChoiceMTSPMMGUpdateOne) SaveX(ctx context.Context) *Division_Choice_MTSPMMG {
	node, err := dcmuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (dcmuo *DivisionChoiceMTSPMMGUpdateOne) Exec(ctx context.Context) error {
	_, err := dcmuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dcmuo *DivisionChoiceMTSPMMGUpdateOne) ExecX(ctx context.Context) {
	if err := dcmuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (dcmuo *DivisionChoiceMTSPMMGUpdateOne) sqlSave(ctx context.Context) (_node *Division_Choice_MTSPMMG, err error) {
	_spec := sqlgraph.NewUpdateSpec(division_choice_mtspmmg.Table, division_choice_mtspmmg.Columns, sqlgraph.NewFieldSpec(division_choice_mtspmmg.FieldID, field.TypeInt32))
	id, ok := dcmuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Division_Choice_MTSPMMG.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := dcmuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, division_choice_mtspmmg.FieldID)
		for _, f := range fields {
			if !division_choice_mtspmmg.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != division_choice_mtspmmg.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := dcmuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := dcmuo.mutation.Group(); ok {
		_spec.SetField(division_choice_mtspmmg.FieldGroup, field.TypeString, value)
	}
	if dcmuo.mutation.GroupCleared() {
		_spec.ClearField(division_choice_mtspmmg.FieldGroup, field.TypeString)
	}
	if value, ok := dcmuo.mutation.CadrePrefNo(); ok {
		_spec.SetField(division_choice_mtspmmg.FieldCadrePrefNo, field.TypeInt64, value)
	}
	if value, ok := dcmuo.mutation.AddedCadrePrefNo(); ok {
		_spec.AddField(division_choice_mtspmmg.FieldCadrePrefNo, field.TypeInt64, value)
	}
	if dcmuo.mutation.CadrePrefNoCleared() {
		_spec.ClearField(division_choice_mtspmmg.FieldCadrePrefNo, field.TypeInt64)
	}
	if value, ok := dcmuo.mutation.Cadre(); ok {
		_spec.SetField(division_choice_mtspmmg.FieldCadre, field.TypeString, value)
	}
	if dcmuo.mutation.CadreCleared() {
		_spec.ClearField(division_choice_mtspmmg.FieldCadre, field.TypeString)
	}
	if value, ok := dcmuo.mutation.PlacePrefNo(); ok {
		_spec.SetField(division_choice_mtspmmg.FieldPlacePrefNo, field.TypeInt64, value)
	}
	if value, ok := dcmuo.mutation.AddedPlacePrefNo(); ok {
		_spec.AddField(division_choice_mtspmmg.FieldPlacePrefNo, field.TypeInt64, value)
	}
	if dcmuo.mutation.PlacePrefNoCleared() {
		_spec.ClearField(division_choice_mtspmmg.FieldPlacePrefNo, field.TypeInt64)
	}
	if value, ok := dcmuo.mutation.PlacePrefValue(); ok {
		_spec.SetField(division_choice_mtspmmg.FieldPlacePrefValue, field.TypeString, value)
	}
	if dcmuo.mutation.PlacePrefValueCleared() {
		_spec.ClearField(division_choice_mtspmmg.FieldPlacePrefValue, field.TypeString)
	}
	if value, ok := dcmuo.mutation.PostPrefNo(); ok {
		_spec.SetField(division_choice_mtspmmg.FieldPostPrefNo, field.TypeInt64, value)
	}
	if value, ok := dcmuo.mutation.AddedPostPrefNo(); ok {
		_spec.AddField(division_choice_mtspmmg.FieldPostPrefNo, field.TypeInt64, value)
	}
	if dcmuo.mutation.PostPrefNoCleared() {
		_spec.ClearField(division_choice_mtspmmg.FieldPostPrefNo, field.TypeInt64)
	}
	if value, ok := dcmuo.mutation.PostingPrefValue(); ok {
		_spec.SetField(division_choice_mtspmmg.FieldPostingPrefValue, field.TypeString, value)
	}
	if dcmuo.mutation.PostingPrefValueCleared() {
		_spec.ClearField(division_choice_mtspmmg.FieldPostingPrefValue, field.TypeString)
	}
	if value, ok := dcmuo.mutation.EmployeeID(); ok {
		_spec.SetField(division_choice_mtspmmg.FieldEmployeeID, field.TypeInt64, value)
	}
	if value, ok := dcmuo.mutation.AddedEmployeeID(); ok {
		_spec.AddField(division_choice_mtspmmg.FieldEmployeeID, field.TypeInt64, value)
	}
	if dcmuo.mutation.EmployeeIDCleared() {
		_spec.ClearField(division_choice_mtspmmg.FieldEmployeeID, field.TypeInt64)
	}
	if value, ok := dcmuo.mutation.UpdatedAt(); ok {
		_spec.SetField(division_choice_mtspmmg.FieldUpdatedAt, field.TypeTime, value)
	}
	if dcmuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(division_choice_mtspmmg.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := dcmuo.mutation.UpdatedBy(); ok {
		_spec.SetField(division_choice_mtspmmg.FieldUpdatedBy, field.TypeString, value)
	}
	if dcmuo.mutation.UpdatedByCleared() {
		_spec.ClearField(division_choice_mtspmmg.FieldUpdatedBy, field.TypeString)
	}
	if dcmuo.mutation.ApplnMTSPMMGRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   division_choice_mtspmmg.ApplnMTSPMMGRefTable,
			Columns: []string{division_choice_mtspmmg.ApplnMTSPMMGRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_application_mtspmmg.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dcmuo.mutation.ApplnMTSPMMGRefIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   division_choice_mtspmmg.ApplnMTSPMMGRefTable,
			Columns: []string{division_choice_mtspmmg.ApplnMTSPMMGRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_application_mtspmmg.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Division_Choice_MTSPMMG{config: dcmuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, dcmuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{division_choice_mtspmmg.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	dcmuo.mutation.done = true
	return _node, nil
}
