// Code generated by ent, DO NOT EDIT.

package application

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the application type in the database.
	Label = "application"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "ApplicationCode"
	// FieldEmployeeID holds the string denoting the employeeid field in the database.
	FieldEmployeeID = "employee_id"
	// FieldNotifyCode holds the string denoting the notifycode field in the database.
	FieldNotifyCode = "notify_code"
	// FieldHallTicketNumber holds the string denoting the hallticketnumber field in the database.
	FieldHallTicketNumber = "hall_ticket_number"
	// FieldCenterCode holds the string denoting the centercode field in the database.
	FieldCenterCode = "center_code"
	// FieldAppliedStamp holds the string denoting the appliedstamp field in the database.
	FieldAppliedStamp = "applied_stamp"
	// EdgeCenter holds the string denoting the center edge name in mutations.
	EdgeCenter = "center"
	// EdgeNotification holds the string denoting the notification edge name in mutations.
	EdgeNotification = "notification"
	// CenterFieldID holds the string denoting the ID field of the Center.
	CenterFieldID = "CenterCode"
	// NotificationFieldID holds the string denoting the ID field of the Notification.
	NotificationFieldID = "NotifyCode"
	// Table holds the table name of the application in the database.
	Table = "Application"
	// CenterTable is the table that holds the center relation/edge.
	CenterTable = "Application"
	// CenterInverseTable is the table name for the Center entity.
	// It exists in this package in order to avoid circular dependency with the "center" package.
	CenterInverseTable = "Center"
	// CenterColumn is the table column denoting the center relation/edge.
	CenterColumn = "center_code"
	// NotificationTable is the table that holds the notification relation/edge.
	NotificationTable = "Application"
	// NotificationInverseTable is the table name for the Notification entity.
	// It exists in this package in order to avoid circular dependency with the "notification" package.
	NotificationInverseTable = "Notification"
	// NotificationColumn is the table column denoting the notification relation/edge.
	NotificationColumn = "notify_code"
)

// Columns holds all SQL columns for application fields.
var Columns = []string{
	FieldID,
	FieldEmployeeID,
	FieldNotifyCode,
	FieldHallTicketNumber,
	FieldCenterCode,
	FieldAppliedStamp,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the Application queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByEmployeeID orders the results by the EmployeeID field.
func ByEmployeeID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmployeeID, opts...).ToFunc()
}

// ByNotifyCode orders the results by the NotifyCode field.
func ByNotifyCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNotifyCode, opts...).ToFunc()
}

// ByHallTicketNumber orders the results by the HallTicketNumber field.
func ByHallTicketNumber(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHallTicketNumber, opts...).ToFunc()
}

// ByCenterCode orders the results by the CenterCode field.
func ByCenterCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCenterCode, opts...).ToFunc()
}

// ByAppliedStamp orders the results by the AppliedStamp field.
func ByAppliedStamp(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAppliedStamp, opts...).ToFunc()
}

// ByCenterField orders the results by center field.
func ByCenterField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCenterStep(), sql.OrderByField(field, opts...))
	}
}

// ByNotificationField orders the results by notification field.
func ByNotificationField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newNotificationStep(), sql.OrderByField(field, opts...))
	}
}
func newCenterStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CenterInverseTable, CenterFieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, CenterTable, CenterColumn),
	)
}
func newNotificationStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(NotificationInverseTable, NotificationFieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, NotificationTable, NotificationColumn),
	)
}
