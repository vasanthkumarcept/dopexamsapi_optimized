// Code generated by ent, DO NOT EDIT.

package errorlogs

import (
	"time"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the errorlogs type in the database.
	Label = "error_logs"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "ID"
	// FieldUserid holds the string denoting the userid field in the database.
	FieldUserid = "userid"
	// FieldUniqueid holds the string denoting the uniqueid field in the database.
	FieldUniqueid = "uniqueid"
	// FieldUsertype holds the string denoting the usertype field in the database.
	FieldUsertype = "usertype"
	// FieldUserdetails holds the string denoting the userdetails field in the database.
	FieldUserdetails = "userdetails"
	// FieldRemarks holds the string denoting the remarks field in the database.
	FieldRemarks = "remarks"
	// FieldAction holds the string denoting the action field in the database.
	FieldAction = "action"
	// FieldIpaddress holds the string denoting the ipaddress field in the database.
	FieldIpaddress = "ipaddress"
	// FieldDevicetype holds the string denoting the devicetype field in the database.
	FieldDevicetype = "devicetype"
	// FieldOs holds the string denoting the os field in the database.
	FieldOs = "os"
	// FieldBrowser holds the string denoting the browser field in the database.
	FieldBrowser = "browser"
	// FieldLatitude holds the string denoting the latitude field in the database.
	FieldLatitude = "latitude"
	// FieldLongitude holds the string denoting the longitude field in the database.
	FieldLongitude = "longitude"
	// FieldEventtime holds the string denoting the eventtime field in the database.
	FieldEventtime = "eventtime"
	// FieldUpdatedBy holds the string denoting the updatedby field in the database.
	FieldUpdatedBy = "updated_by"
	// FieldUpdatedTime holds the string denoting the updatedtime field in the database.
	FieldUpdatedTime = "updated_time"
	// FieldAssignedTo holds the string denoting the assignedto field in the database.
	FieldAssignedTo = "assigned_to"
	// FieldRemarksNew holds the string denoting the remarksnew field in the database.
	FieldRemarksNew = "remarks_new"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldClosedOn holds the string denoting the closedon field in the database.
	FieldClosedOn = "closed_on"
	// Table holds the table name of the errorlogs in the database.
	Table = "ErrorLogsTable"
)

// Columns holds all SQL columns for errorlogs fields.
var Columns = []string{
	FieldID,
	FieldUserid,
	FieldUniqueid,
	FieldUsertype,
	FieldUserdetails,
	FieldRemarks,
	FieldAction,
	FieldIpaddress,
	FieldDevicetype,
	FieldOs,
	FieldBrowser,
	FieldLatitude,
	FieldLongitude,
	FieldEventtime,
	FieldUpdatedBy,
	FieldUpdatedTime,
	FieldAssignedTo,
	FieldRemarksNew,
	FieldStatus,
	FieldClosedOn,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultUniqueid holds the default value on creation for the "uniqueid" field.
	DefaultUniqueid int64
	// DefaultLatitude holds the default value on creation for the "latitude" field.
	DefaultLatitude float64
	// DefaultLongitude holds the default value on creation for the "longitude" field.
	DefaultLongitude float64
	// DefaultEventtime holds the default value on creation for the "eventtime" field.
	DefaultEventtime func() time.Time
)

// OrderOption defines the ordering options for the ErrorLogs queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByUserid orders the results by the userid field.
func ByUserid(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserid, opts...).ToFunc()
}

// ByUniqueid orders the results by the uniqueid field.
func ByUniqueid(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUniqueid, opts...).ToFunc()
}

// ByUsertype orders the results by the usertype field.
func ByUsertype(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUsertype, opts...).ToFunc()
}

// ByUserdetails orders the results by the userdetails field.
func ByUserdetails(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserdetails, opts...).ToFunc()
}

// ByRemarks orders the results by the remarks field.
func ByRemarks(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRemarks, opts...).ToFunc()
}

// ByAction orders the results by the action field.
func ByAction(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAction, opts...).ToFunc()
}

// ByIpaddress orders the results by the ipaddress field.
func ByIpaddress(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIpaddress, opts...).ToFunc()
}

// ByDevicetype orders the results by the devicetype field.
func ByDevicetype(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDevicetype, opts...).ToFunc()
}

// ByOs orders the results by the os field.
func ByOs(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOs, opts...).ToFunc()
}

// ByBrowser orders the results by the browser field.
func ByBrowser(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBrowser, opts...).ToFunc()
}

// ByLatitude orders the results by the latitude field.
func ByLatitude(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLatitude, opts...).ToFunc()
}

// ByLongitude orders the results by the longitude field.
func ByLongitude(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLongitude, opts...).ToFunc()
}

// ByEventtime orders the results by the eventtime field.
func ByEventtime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEventtime, opts...).ToFunc()
}

// ByUpdatedBy orders the results by the UpdatedBy field.
func ByUpdatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedBy, opts...).ToFunc()
}

// ByUpdatedTime orders the results by the UpdatedTime field.
func ByUpdatedTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedTime, opts...).ToFunc()
}

// ByAssignedTo orders the results by the AssignedTo field.
func ByAssignedTo(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAssignedTo, opts...).ToFunc()
}

// ByRemarksNew orders the results by the RemarksNew field.
func ByRemarksNew(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRemarksNew, opts...).ToFunc()
}

// ByStatus orders the results by the Status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByClosedOn orders the results by the ClosedOn field.
func ByClosedOn(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldClosedOn, opts...).ToFunc()
}
