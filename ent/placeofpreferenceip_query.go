// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"
	"recruit/ent/exam_applications_ip"
	"recruit/ent/placeofpreferenceip"
	"recruit/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PlaceOfPreferenceIPQuery is the builder for querying PlaceOfPreferenceIP entities.
type PlaceOfPreferenceIPQuery struct {
	config
	ctx            *QueryContext
	order          []placeofpreferenceip.OrderOption
	inters         []Interceptor
	predicates     []predicate.PlaceOfPreferenceIP
	withApplnIPRef *ExamApplicationsIPQuery
	withFKs        bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the PlaceOfPreferenceIPQuery builder.
func (popiq *PlaceOfPreferenceIPQuery) Where(ps ...predicate.PlaceOfPreferenceIP) *PlaceOfPreferenceIPQuery {
	popiq.predicates = append(popiq.predicates, ps...)
	return popiq
}

// Limit the number of records to be returned by this query.
func (popiq *PlaceOfPreferenceIPQuery) Limit(limit int) *PlaceOfPreferenceIPQuery {
	popiq.ctx.Limit = &limit
	return popiq
}

// Offset to start from.
func (popiq *PlaceOfPreferenceIPQuery) Offset(offset int) *PlaceOfPreferenceIPQuery {
	popiq.ctx.Offset = &offset
	return popiq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (popiq *PlaceOfPreferenceIPQuery) Unique(unique bool) *PlaceOfPreferenceIPQuery {
	popiq.ctx.Unique = &unique
	return popiq
}

// Order specifies how the records should be ordered.
func (popiq *PlaceOfPreferenceIPQuery) Order(o ...placeofpreferenceip.OrderOption) *PlaceOfPreferenceIPQuery {
	popiq.order = append(popiq.order, o...)
	return popiq
}

// QueryApplnIPRef chains the current query on the "ApplnIP_Ref" edge.
func (popiq *PlaceOfPreferenceIPQuery) QueryApplnIPRef() *ExamApplicationsIPQuery {
	query := (&ExamApplicationsIPClient{config: popiq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := popiq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := popiq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(placeofpreferenceip.Table, placeofpreferenceip.FieldID, selector),
			sqlgraph.To(exam_applications_ip.Table, exam_applications_ip.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, placeofpreferenceip.ApplnIPRefTable, placeofpreferenceip.ApplnIPRefColumn),
		)
		fromU = sqlgraph.SetNeighbors(popiq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first PlaceOfPreferenceIP entity from the query.
// Returns a *NotFoundError when no PlaceOfPreferenceIP was found.
func (popiq *PlaceOfPreferenceIPQuery) First(ctx context.Context) (*PlaceOfPreferenceIP, error) {
	nodes, err := popiq.Limit(1).All(setContextOp(ctx, popiq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{placeofpreferenceip.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (popiq *PlaceOfPreferenceIPQuery) FirstX(ctx context.Context) *PlaceOfPreferenceIP {
	node, err := popiq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first PlaceOfPreferenceIP ID from the query.
// Returns a *NotFoundError when no PlaceOfPreferenceIP ID was found.
func (popiq *PlaceOfPreferenceIPQuery) FirstID(ctx context.Context) (id int32, err error) {
	var ids []int32
	if ids, err = popiq.Limit(1).IDs(setContextOp(ctx, popiq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{placeofpreferenceip.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (popiq *PlaceOfPreferenceIPQuery) FirstIDX(ctx context.Context) int32 {
	id, err := popiq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single PlaceOfPreferenceIP entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one PlaceOfPreferenceIP entity is found.
// Returns a *NotFoundError when no PlaceOfPreferenceIP entities are found.
func (popiq *PlaceOfPreferenceIPQuery) Only(ctx context.Context) (*PlaceOfPreferenceIP, error) {
	nodes, err := popiq.Limit(2).All(setContextOp(ctx, popiq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{placeofpreferenceip.Label}
	default:
		return nil, &NotSingularError{placeofpreferenceip.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (popiq *PlaceOfPreferenceIPQuery) OnlyX(ctx context.Context) *PlaceOfPreferenceIP {
	node, err := popiq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only PlaceOfPreferenceIP ID in the query.
// Returns a *NotSingularError when more than one PlaceOfPreferenceIP ID is found.
// Returns a *NotFoundError when no entities are found.
func (popiq *PlaceOfPreferenceIPQuery) OnlyID(ctx context.Context) (id int32, err error) {
	var ids []int32
	if ids, err = popiq.Limit(2).IDs(setContextOp(ctx, popiq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{placeofpreferenceip.Label}
	default:
		err = &NotSingularError{placeofpreferenceip.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (popiq *PlaceOfPreferenceIPQuery) OnlyIDX(ctx context.Context) int32 {
	id, err := popiq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of PlaceOfPreferenceIPs.
func (popiq *PlaceOfPreferenceIPQuery) All(ctx context.Context) ([]*PlaceOfPreferenceIP, error) {
	ctx = setContextOp(ctx, popiq.ctx, "All")
	if err := popiq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*PlaceOfPreferenceIP, *PlaceOfPreferenceIPQuery]()
	return withInterceptors[[]*PlaceOfPreferenceIP](ctx, popiq, qr, popiq.inters)
}

// AllX is like All, but panics if an error occurs.
func (popiq *PlaceOfPreferenceIPQuery) AllX(ctx context.Context) []*PlaceOfPreferenceIP {
	nodes, err := popiq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of PlaceOfPreferenceIP IDs.
func (popiq *PlaceOfPreferenceIPQuery) IDs(ctx context.Context) (ids []int32, err error) {
	if popiq.ctx.Unique == nil && popiq.path != nil {
		popiq.Unique(true)
	}
	ctx = setContextOp(ctx, popiq.ctx, "IDs")
	if err = popiq.Select(placeofpreferenceip.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (popiq *PlaceOfPreferenceIPQuery) IDsX(ctx context.Context) []int32 {
	ids, err := popiq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (popiq *PlaceOfPreferenceIPQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, popiq.ctx, "Count")
	if err := popiq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, popiq, querierCount[*PlaceOfPreferenceIPQuery](), popiq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (popiq *PlaceOfPreferenceIPQuery) CountX(ctx context.Context) int {
	count, err := popiq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (popiq *PlaceOfPreferenceIPQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, popiq.ctx, "Exist")
	switch _, err := popiq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (popiq *PlaceOfPreferenceIPQuery) ExistX(ctx context.Context) bool {
	exist, err := popiq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the PlaceOfPreferenceIPQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (popiq *PlaceOfPreferenceIPQuery) Clone() *PlaceOfPreferenceIPQuery {
	if popiq == nil {
		return nil
	}
	return &PlaceOfPreferenceIPQuery{
		config:         popiq.config,
		ctx:            popiq.ctx.Clone(),
		order:          append([]placeofpreferenceip.OrderOption{}, popiq.order...),
		inters:         append([]Interceptor{}, popiq.inters...),
		predicates:     append([]predicate.PlaceOfPreferenceIP{}, popiq.predicates...),
		withApplnIPRef: popiq.withApplnIPRef.Clone(),
		// clone intermediate query.
		sql:  popiq.sql.Clone(),
		path: popiq.path,
	}
}

// WithApplnIPRef tells the query-builder to eager-load the nodes that are connected to
// the "ApplnIP_Ref" edge. The optional arguments are used to configure the query builder of the edge.
func (popiq *PlaceOfPreferenceIPQuery) WithApplnIPRef(opts ...func(*ExamApplicationsIPQuery)) *PlaceOfPreferenceIPQuery {
	query := (&ExamApplicationsIPClient{config: popiq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	popiq.withApplnIPRef = query
	return popiq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		ApplicationID int64 `json:"ApplicationID,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.PlaceOfPreferenceIP.Query().
//		GroupBy(placeofpreferenceip.FieldApplicationID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (popiq *PlaceOfPreferenceIPQuery) GroupBy(field string, fields ...string) *PlaceOfPreferenceIPGroupBy {
	popiq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &PlaceOfPreferenceIPGroupBy{build: popiq}
	grbuild.flds = &popiq.ctx.Fields
	grbuild.label = placeofpreferenceip.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		ApplicationID int64 `json:"ApplicationID,omitempty"`
//	}
//
//	client.PlaceOfPreferenceIP.Query().
//		Select(placeofpreferenceip.FieldApplicationID).
//		Scan(ctx, &v)
func (popiq *PlaceOfPreferenceIPQuery) Select(fields ...string) *PlaceOfPreferenceIPSelect {
	popiq.ctx.Fields = append(popiq.ctx.Fields, fields...)
	sbuild := &PlaceOfPreferenceIPSelect{PlaceOfPreferenceIPQuery: popiq}
	sbuild.label = placeofpreferenceip.Label
	sbuild.flds, sbuild.scan = &popiq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a PlaceOfPreferenceIPSelect configured with the given aggregations.
func (popiq *PlaceOfPreferenceIPQuery) Aggregate(fns ...AggregateFunc) *PlaceOfPreferenceIPSelect {
	return popiq.Select().Aggregate(fns...)
}

func (popiq *PlaceOfPreferenceIPQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range popiq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, popiq); err != nil {
				return err
			}
		}
	}
	for _, f := range popiq.ctx.Fields {
		if !placeofpreferenceip.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if popiq.path != nil {
		prev, err := popiq.path(ctx)
		if err != nil {
			return err
		}
		popiq.sql = prev
	}
	return nil
}

func (popiq *PlaceOfPreferenceIPQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*PlaceOfPreferenceIP, error) {
	var (
		nodes       = []*PlaceOfPreferenceIP{}
		withFKs     = popiq.withFKs
		_spec       = popiq.querySpec()
		loadedTypes = [1]bool{
			popiq.withApplnIPRef != nil,
		}
	)
	if popiq.withApplnIPRef != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, placeofpreferenceip.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*PlaceOfPreferenceIP).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &PlaceOfPreferenceIP{config: popiq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, popiq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := popiq.withApplnIPRef; query != nil {
		if err := popiq.loadApplnIPRef(ctx, query, nodes, nil,
			func(n *PlaceOfPreferenceIP, e *Exam_Applications_IP) { n.Edges.ApplnIPRef = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (popiq *PlaceOfPreferenceIPQuery) loadApplnIPRef(ctx context.Context, query *ExamApplicationsIPQuery, nodes []*PlaceOfPreferenceIP, init func(*PlaceOfPreferenceIP), assign func(*PlaceOfPreferenceIP, *Exam_Applications_IP)) error {
	ids := make([]int64, 0, len(nodes))
	nodeids := make(map[int64][]*PlaceOfPreferenceIP)
	for i := range nodes {
		if nodes[i].exam_applications_ip_circle_pref_ref == nil {
			continue
		}
		fk := *nodes[i].exam_applications_ip_circle_pref_ref
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(exam_applications_ip.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "exam_applications_ip_circle_pref_ref" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (popiq *PlaceOfPreferenceIPQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := popiq.querySpec()
	_spec.Node.Columns = popiq.ctx.Fields
	if len(popiq.ctx.Fields) > 0 {
		_spec.Unique = popiq.ctx.Unique != nil && *popiq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, popiq.driver, _spec)
}

func (popiq *PlaceOfPreferenceIPQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(placeofpreferenceip.Table, placeofpreferenceip.Columns, sqlgraph.NewFieldSpec(placeofpreferenceip.FieldID, field.TypeInt32))
	_spec.From = popiq.sql
	if unique := popiq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if popiq.path != nil {
		_spec.Unique = true
	}
	if fields := popiq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, placeofpreferenceip.FieldID)
		for i := range fields {
			if fields[i] != placeofpreferenceip.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := popiq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := popiq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := popiq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := popiq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (popiq *PlaceOfPreferenceIPQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(popiq.driver.Dialect())
	t1 := builder.Table(placeofpreferenceip.Table)
	columns := popiq.ctx.Fields
	if len(columns) == 0 {
		columns = placeofpreferenceip.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if popiq.sql != nil {
		selector = popiq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if popiq.ctx.Unique != nil && *popiq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range popiq.predicates {
		p(selector)
	}
	for _, p := range popiq.order {
		p(selector)
	}
	if offset := popiq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := popiq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// PlaceOfPreferenceIPGroupBy is the group-by builder for PlaceOfPreferenceIP entities.
type PlaceOfPreferenceIPGroupBy struct {
	selector
	build *PlaceOfPreferenceIPQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (popigb *PlaceOfPreferenceIPGroupBy) Aggregate(fns ...AggregateFunc) *PlaceOfPreferenceIPGroupBy {
	popigb.fns = append(popigb.fns, fns...)
	return popigb
}

// Scan applies the selector query and scans the result into the given value.
func (popigb *PlaceOfPreferenceIPGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, popigb.build.ctx, "GroupBy")
	if err := popigb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*PlaceOfPreferenceIPQuery, *PlaceOfPreferenceIPGroupBy](ctx, popigb.build, popigb, popigb.build.inters, v)
}

func (popigb *PlaceOfPreferenceIPGroupBy) sqlScan(ctx context.Context, root *PlaceOfPreferenceIPQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(popigb.fns))
	for _, fn := range popigb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*popigb.flds)+len(popigb.fns))
		for _, f := range *popigb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*popigb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := popigb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// PlaceOfPreferenceIPSelect is the builder for selecting fields of PlaceOfPreferenceIP entities.
type PlaceOfPreferenceIPSelect struct {
	*PlaceOfPreferenceIPQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (popis *PlaceOfPreferenceIPSelect) Aggregate(fns ...AggregateFunc) *PlaceOfPreferenceIPSelect {
	popis.fns = append(popis.fns, fns...)
	return popis
}

// Scan applies the selector query and scans the result into the given value.
func (popis *PlaceOfPreferenceIPSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, popis.ctx, "Select")
	if err := popis.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*PlaceOfPreferenceIPQuery, *PlaceOfPreferenceIPSelect](ctx, popis.PlaceOfPreferenceIPQuery, popis, popis.inters, v)
}

func (popis *PlaceOfPreferenceIPSelect) sqlScan(ctx context.Context, root *PlaceOfPreferenceIPQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(popis.fns))
	for _, fn := range popis.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*popis.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := popis.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
