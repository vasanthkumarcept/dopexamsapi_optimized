// Code generated by ent, DO NOT EDIT.

package login

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the login type in the database.
	Label = "login"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldLoginID holds the string denoting the loginid field in the database.
	FieldLoginID = "login_id"
	// FieldUsername holds the string denoting the username field in the database.
	FieldUsername = "username"
	// FieldPassword holds the string denoting the password field in the database.
	FieldPassword = "password"
	// FieldEmployeedID holds the string denoting the employeedid field in the database.
	FieldEmployeedID = "employeed_id"
	// FieldExpireminsToken holds the string denoting the expiremins_token field in the database.
	FieldExpireminsToken = "expiremins_token"
	// FieldExpireminsRefreshToken holds the string denoting the expiremins_refresh_token field in the database.
	FieldExpireminsRefreshToken = "expiremins_refresh_token"
	// FieldRole holds the string denoting the role field in the database.
	FieldRole = "role"
	// FieldToken holds the string denoting the token field in the database.
	FieldToken = "token"
	// FieldVerifyRemarks holds the string denoting the verifyremarks field in the database.
	FieldVerifyRemarks = "verify_remarks"
	// EdgeLogData holds the string denoting the logdata edge name in mutations.
	EdgeLogData = "LogData"
	// LogsFieldID holds the string denoting the ID field of the Logs.
	LogsFieldID = "ID"
	// Table holds the table name of the login in the database.
	Table = "Login"
	// LogDataTable is the table that holds the LogData relation/edge.
	LogDataTable = "LogsTable"
	// LogDataInverseTable is the table name for the Logs entity.
	// It exists in this package in order to avoid circular dependency with the "logs" package.
	LogDataInverseTable = "LogsTable"
	// LogDataColumn is the table column denoting the LogData relation/edge.
	LogDataColumn = "login_log_data"
)

// Columns holds all SQL columns for login fields.
var Columns = []string{
	FieldID,
	FieldLoginID,
	FieldUsername,
	FieldPassword,
	FieldEmployeedID,
	FieldExpireminsToken,
	FieldExpireminsRefreshToken,
	FieldRole,
	FieldToken,
	FieldVerifyRemarks,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultLoginID holds the default value on creation for the "loginID" field.
	DefaultLoginID func() uuid.UUID
	// UsernameValidator is a validator for the "username" field. It is called by the builders before save.
	UsernameValidator func(string) error
)

// OrderOption defines the ordering options for the Login queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByLoginID orders the results by the loginID field.
func ByLoginID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLoginID, opts...).ToFunc()
}

// ByUsername orders the results by the username field.
func ByUsername(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUsername, opts...).ToFunc()
}

// ByPassword orders the results by the password field.
func ByPassword(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPassword, opts...).ToFunc()
}

// ByEmployeedID orders the results by the EmployeedID field.
func ByEmployeedID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmployeedID, opts...).ToFunc()
}

// ByExpireminsToken orders the results by the expiremins_token field.
func ByExpireminsToken(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExpireminsToken, opts...).ToFunc()
}

// ByExpireminsRefreshToken orders the results by the expiremins_refresh_token field.
func ByExpireminsRefreshToken(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExpireminsRefreshToken, opts...).ToFunc()
}

// ByRole orders the results by the role field.
func ByRole(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRole, opts...).ToFunc()
}

// ByToken orders the results by the token field.
func ByToken(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldToken, opts...).ToFunc()
}

// ByVerifyRemarks orders the results by the VerifyRemarks field.
func ByVerifyRemarks(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVerifyRemarks, opts...).ToFunc()
}

// ByLogDataCount orders the results by LogData count.
func ByLogDataCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newLogDataStep(), opts...)
	}
}

// ByLogData orders the results by LogData terms.
func ByLogData(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newLogDataStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newLogDataStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(LogDataInverseTable, LogsFieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, LogDataTable, LogDataColumn),
	)
}
