// Code generated by ent, DO NOT EDIT.

package postexampaper

import (
	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the postexampaper type in the database.
	Label = "post_exam_paper"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "Id"
	// FieldExamConfigurationExamCode holds the string denoting the examconfigurationexamcode field in the database.
	FieldExamConfigurationExamCode = "exam_configuration_exam_code"
	// FieldExamShortDescription holds the string denoting the examshortdescription field in the database.
	FieldExamShortDescription = "exam_short_description"
	// FieldExamLongDescription holds the string denoting the examlongdescription field in the database.
	FieldExamLongDescription = "exam_long_description"
	// FieldExamPaperCode holds the string denoting the exampapercode field in the database.
	FieldExamPaperCode = "exam_paper_code"
	// FieldPaperDescription holds the string denoting the paperdescription field in the database.
	FieldPaperDescription = "paper_description"
	// FieldEmployeePostPostId holds the string denoting the employeepost_postid field in the database.
	FieldEmployeePostPostId = "employee_post_post_id"
	// FieldEmployeeGroupGroupId holds the string denoting the employeegroup_groupid field in the database.
	FieldEmployeeGroupGroupId = "employee_group_group_id"
	// FieldGroupDescription holds the string denoting the groupdescription field in the database.
	FieldGroupDescription = "group_description"
	// FieldPostCode holds the string denoting the postcode field in the database.
	FieldPostCode = "post_code"
	// FieldPostDescription holds the string denoting the postdescription field in the database.
	FieldPostDescription = "post_description"
	// FieldBaseCadre holds the string denoting the basecadre field in the database.
	FieldBaseCadre = "base_cadre"
	// FieldPayLevel holds the string denoting the paylevel field in the database.
	FieldPayLevel = "pay_level"
	// FieldScale holds the string denoting the scale field in the database.
	FieldScale = "scale"
	// FieldOrderNumber holds the string denoting the ordernumber field in the database.
	FieldOrderNumber = "order_number"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldCreatedById holds the string denoting the createdbyid field in the database.
	FieldCreatedById = "created_by_id"
	// FieldCreatedByUserName holds the string denoting the createdbyusername field in the database.
	FieldCreatedByUserName = "created_by_user_name"
	// FieldCreatedByEmployeeId holds the string denoting the createdbyemployeeid field in the database.
	FieldCreatedByEmployeeId = "created_by_employee_id"
	// FieldCreatedByDesignation holds the string denoting the createdbydesignation field in the database.
	FieldCreatedByDesignation = "created_by_designation"
	// FieldCreatedDate holds the string denoting the createddate field in the database.
	FieldCreatedDate = "created_date"
	// FieldVerifiedById holds the string denoting the verifiedbyid field in the database.
	FieldVerifiedById = "verified_by_id"
	// FieldVerifiedByUserName holds the string denoting the verifiedbyusername field in the database.
	FieldVerifiedByUserName = "verified_by_user_name"
	// FieldVerifiedByEmployeeId holds the string denoting the verifiedbyemployeeid field in the database.
	FieldVerifiedByEmployeeId = "verified_by_employee_id"
	// FieldVerifiedByDesignation holds the string denoting the verifiedbydesignation field in the database.
	FieldVerifiedByDesignation = "verified_by_designation"
	// FieldVerifiedDate holds the string denoting the verifieddate field in the database.
	FieldVerifiedDate = "verified_date"
	// FieldDeletedById holds the string denoting the deletedbyid field in the database.
	FieldDeletedById = "deleted_by_id"
	// FieldDeletedByUserName holds the string denoting the deletedbyusername field in the database.
	FieldDeletedByUserName = "deleted_by_user_name"
	// FieldDeletedByEmployeeId holds the string denoting the deletedbyemployeeid field in the database.
	FieldDeletedByEmployeeId = "deleted_by_employee_id"
	// FieldDeletedByDesignation holds the string denoting the deletedbydesignation field in the database.
	FieldDeletedByDesignation = "deleted_by_designation"
	// FieldDeletedDate holds the string denoting the deleteddate field in the database.
	FieldDeletedDate = "deleted_date"
	// Table holds the table name of the postexampaper in the database.
	Table = "post_exam_papers"
)

// Columns holds all SQL columns for postexampaper fields.
var Columns = []string{
	FieldID,
	FieldExamConfigurationExamCode,
	FieldExamShortDescription,
	FieldExamLongDescription,
	FieldExamPaperCode,
	FieldPaperDescription,
	FieldEmployeePostPostId,
	FieldEmployeeGroupGroupId,
	FieldGroupDescription,
	FieldPostCode,
	FieldPostDescription,
	FieldBaseCadre,
	FieldPayLevel,
	FieldScale,
	FieldOrderNumber,
	FieldStatus,
	FieldCreatedById,
	FieldCreatedByUserName,
	FieldCreatedByEmployeeId,
	FieldCreatedByDesignation,
	FieldCreatedDate,
	FieldVerifiedById,
	FieldVerifiedByUserName,
	FieldVerifiedByEmployeeId,
	FieldVerifiedByDesignation,
	FieldVerifiedDate,
	FieldDeletedById,
	FieldDeletedByUserName,
	FieldDeletedByEmployeeId,
	FieldDeletedByDesignation,
	FieldDeletedDate,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the PostExamPaper queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByExamConfigurationExamCode orders the results by the ExamConfigurationExamCode field.
func ByExamConfigurationExamCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExamConfigurationExamCode, opts...).ToFunc()
}

// ByExamShortDescription orders the results by the ExamShortDescription field.
func ByExamShortDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExamShortDescription, opts...).ToFunc()
}

// ByExamLongDescription orders the results by the ExamLongDescription field.
func ByExamLongDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExamLongDescription, opts...).ToFunc()
}

// ByExamPaperCode orders the results by the ExamPaperCode field.
func ByExamPaperCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExamPaperCode, opts...).ToFunc()
}

// ByPaperDescription orders the results by the PaperDescription field.
func ByPaperDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPaperDescription, opts...).ToFunc()
}

// ByEmployeePostPostId orders the results by the EmployeePost_postId field.
func ByEmployeePostPostId(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmployeePostPostId, opts...).ToFunc()
}

// ByEmployeeGroupGroupId orders the results by the EmployeeGroup_GroupId field.
func ByEmployeeGroupGroupId(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmployeeGroupGroupId, opts...).ToFunc()
}

// ByGroupDescription orders the results by the GroupDescription field.
func ByGroupDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGroupDescription, opts...).ToFunc()
}

// ByPostCode orders the results by the PostCode field.
func ByPostCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPostCode, opts...).ToFunc()
}

// ByPostDescription orders the results by the PostDescription field.
func ByPostDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPostDescription, opts...).ToFunc()
}

// ByBaseCadre orders the results by the BaseCadre field.
func ByBaseCadre(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBaseCadre, opts...).ToFunc()
}

// ByPayLevel orders the results by the PayLevel field.
func ByPayLevel(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPayLevel, opts...).ToFunc()
}

// ByScale orders the results by the Scale field.
func ByScale(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldScale, opts...).ToFunc()
}

// ByOrderNumber orders the results by the OrderNumber field.
func ByOrderNumber(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOrderNumber, opts...).ToFunc()
}

// ByStatus orders the results by the Status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByCreatedById orders the results by the CreatedById field.
func ByCreatedById(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedById, opts...).ToFunc()
}

// ByCreatedByUserName orders the results by the CreatedByUserName field.
func ByCreatedByUserName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedByUserName, opts...).ToFunc()
}

// ByCreatedByEmployeeId orders the results by the CreatedByEmployeeId field.
func ByCreatedByEmployeeId(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedByEmployeeId, opts...).ToFunc()
}

// ByCreatedByDesignation orders the results by the CreatedByDesignation field.
func ByCreatedByDesignation(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedByDesignation, opts...).ToFunc()
}

// ByCreatedDate orders the results by the CreatedDate field.
func ByCreatedDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedDate, opts...).ToFunc()
}

// ByVerifiedById orders the results by the VerifiedById field.
func ByVerifiedById(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVerifiedById, opts...).ToFunc()
}

// ByVerifiedByUserName orders the results by the VerifiedByUserName field.
func ByVerifiedByUserName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVerifiedByUserName, opts...).ToFunc()
}

// ByVerifiedByEmployeeId orders the results by the VerifiedByEmployeeId field.
func ByVerifiedByEmployeeId(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVerifiedByEmployeeId, opts...).ToFunc()
}

// ByVerifiedByDesignation orders the results by the VerifiedByDesignation field.
func ByVerifiedByDesignation(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVerifiedByDesignation, opts...).ToFunc()
}

// ByVerifiedDate orders the results by the VerifiedDate field.
func ByVerifiedDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVerifiedDate, opts...).ToFunc()
}

// ByDeletedById orders the results by the DeletedById field.
func ByDeletedById(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedById, opts...).ToFunc()
}

// ByDeletedByUserName orders the results by the DeletedByUserName field.
func ByDeletedByUserName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedByUserName, opts...).ToFunc()
}

// ByDeletedByEmployeeId orders the results by the DeletedByEmployeeId field.
func ByDeletedByEmployeeId(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedByEmployeeId, opts...).ToFunc()
}

// ByDeletedByDesignation orders the results by the DeletedByDesignation field.
func ByDeletedByDesignation(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedByDesignation, opts...).ToFunc()
}

// ByDeletedDate orders the results by the DeletedDate field.
func ByDeletedDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedDate, opts...).ToFunc()
}
