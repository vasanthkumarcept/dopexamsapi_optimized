// Code generated by ent, DO NOT EDIT.

package placeofpreferenceps

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the placeofpreferenceps type in the database.
	Label = "place_of_preference_ps"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "PlacePrefId"
	// FieldApplicationID holds the string denoting the applicationid field in the database.
	FieldApplicationID = "application_id"
	// FieldPlacePrefNo holds the string denoting the placeprefno field in the database.
	FieldPlacePrefNo = "place_pref_no"
	// FieldPlacePrefValue holds the string denoting the placeprefvalue field in the database.
	FieldPlacePrefValue = "place_pref_value"
	// FieldEmployeeID holds the string denoting the employeeid field in the database.
	FieldEmployeeID = "employee_id"
	// FieldUpdatedAt holds the string denoting the updatedat field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldUpdatedBy holds the string denoting the updatedby field in the database.
	FieldUpdatedBy = "updated_by"
	// EdgePlaceApplnPSRef holds the string denoting the placeapplnps_ref edge name in mutations.
	EdgePlaceApplnPSRef = "PlaceApplnPS_Ref"
	// Exam_Applications_PSFieldID holds the string denoting the ID field of the Exam_Applications_PS.
	Exam_Applications_PSFieldID = "ApplicationID"
	// Table holds the table name of the placeofpreferenceps in the database.
	Table = "PlaceOfPreferencePS"
	// PlaceApplnPSRefTable is the table that holds the PlaceApplnPS_Ref relation/edge.
	PlaceApplnPSRefTable = "PlaceOfPreferencePS"
	// PlaceApplnPSRefInverseTable is the table name for the Exam_Applications_PS entity.
	// It exists in this package in order to avoid circular dependency with the "exam_applications_ps" package.
	PlaceApplnPSRefInverseTable = "Exam_Applications_PS"
	// PlaceApplnPSRefColumn is the table column denoting the PlaceApplnPS_Ref relation/edge.
	PlaceApplnPSRefColumn = "application_id"
)

// Columns holds all SQL columns for placeofpreferenceps fields.
var Columns = []string{
	FieldID,
	FieldApplicationID,
	FieldPlacePrefNo,
	FieldPlacePrefValue,
	FieldEmployeeID,
	FieldUpdatedAt,
	FieldUpdatedBy,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultUpdatedBy holds the default value on creation for the "UpdatedBy" field.
	DefaultUpdatedBy string
)

// OrderOption defines the ordering options for the PlaceOfPreferencePS queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByApplicationID orders the results by the ApplicationID field.
func ByApplicationID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldApplicationID, opts...).ToFunc()
}

// ByPlacePrefNo orders the results by the PlacePrefNo field.
func ByPlacePrefNo(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPlacePrefNo, opts...).ToFunc()
}

// ByPlacePrefValue orders the results by the PlacePrefValue field.
func ByPlacePrefValue(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPlacePrefValue, opts...).ToFunc()
}

// ByEmployeeID orders the results by the EmployeeID field.
func ByEmployeeID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmployeeID, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the UpdatedAt field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByUpdatedBy orders the results by the UpdatedBy field.
func ByUpdatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedBy, opts...).ToFunc()
}

// ByPlaceApplnPSRefField orders the results by PlaceApplnPS_Ref field.
func ByPlaceApplnPSRefField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPlaceApplnPSRefStep(), sql.OrderByField(field, opts...))
	}
}
func newPlaceApplnPSRefStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PlaceApplnPSRefInverseTable, Exam_Applications_PSFieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, PlaceApplnPSRefTable, PlaceApplnPSRefColumn),
	)
}
