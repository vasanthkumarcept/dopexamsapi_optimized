// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"recruit/ent/eligibilitycadrepaymatrix"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// EligibilityCadrePayMatrix is the model entity for the EligibilityCadrePayMatrix schema.
type EligibilityCadrePayMatrix struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// CadreEligibleConfigurationCadreEligibleCode holds the value of the "cadreEligibleConfiguration_cadreEligibleCode" field.
	CadreEligibleConfigurationCadreEligibleCode int64 `json:"cadreEligibleConfiguration_cadreEligibleCode,omitempty"`
	// PostId holds the value of the "PostId" field.
	PostId int64 `json:"PostId,omitempty"`
	// PostCode holds the value of the "PostCode" field.
	PostCode string `json:"PostCode,omitempty"`
	// PostDescription holds the value of the "PostDescription" field.
	PostDescription string `json:"PostDescription,omitempty"`
	// OrderNumber holds the value of the "OrderNumber" field.
	OrderNumber string `json:"OrderNumber,omitempty"`
	// CreatedById holds the value of the "CreatedById" field.
	CreatedById int64 `json:"CreatedById,omitempty"`
	// CreatedByUserName holds the value of the "CreatedByUserName" field.
	CreatedByUserName string `json:"CreatedByUserName,omitempty"`
	// CreatedByEmpId holds the value of the "CreatedByEmpId" field.
	CreatedByEmpId int64 `json:"CreatedByEmpId,omitempty"`
	// CreatedByDesignation holds the value of the "CreatedByDesignation" field.
	CreatedByDesignation string `json:"CreatedByDesignation,omitempty"`
	// CreatedDate holds the value of the "CreatedDate" field.
	CreatedDate time.Time `json:"CreatedDate,omitempty"`
	// Verifiedbyid holds the value of the "verifiedbyid" field.
	Verifiedbyid int64 `json:"verifiedbyid,omitempty"`
	// Verifiedbyusername holds the value of the "verifiedbyusername" field.
	Verifiedbyusername string `json:"verifiedbyusername,omitempty"`
	// VerifiedbyEmployeeid holds the value of the "verifiedbyEmployeeid" field.
	VerifiedbyEmployeeid int64 `json:"verifiedbyEmployeeid,omitempty"`
	// VerifiedbyDesignation holds the value of the "verifiedbyDesignation" field.
	VerifiedbyDesignation string `json:"verifiedbyDesignation,omitempty"`
	// VerifiedDate holds the value of the "verifiedDate" field.
	VerifiedDate time.Time `json:"verifiedDate,omitempty"`
	// Statuss holds the value of the "Statuss" field.
	Statuss string `json:"Statuss,omitempty"`
	// Deletedbyid holds the value of the "deletedbyid" field.
	Deletedbyid int64 `json:"deletedbyid,omitempty"`
	// Deletedbyusername holds the value of the "deletedbyusername" field.
	Deletedbyusername string `json:"deletedbyusername,omitempty"`
	// DeletedbyEmployeeid holds the value of the "deletedbyEmployeeid" field.
	DeletedbyEmployeeid int64 `json:"deletedbyEmployeeid,omitempty"`
	// DeletedbyDesignation holds the value of the "deletedbyDesignation" field.
	DeletedbyDesignation string `json:"deletedbyDesignation,omitempty"`
	// DeletedDate holds the value of the "deletedDate" field.
	DeletedDate time.Time `json:"deletedDate,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the EligibilityCadrePayMatrixQuery when eager-loading is set.
	Edges        EligibilityCadrePayMatrixEdges `json:"edges"`
	selectValues sql.SelectValues
}

// EligibilityCadrePayMatrixEdges holds the relations/edges for other nodes in the graph.
type EligibilityCadrePayMatrixEdges struct {
	// LogData holds the value of the LogData edge.
	LogData []*Logs `json:"LogData,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// LogDataOrErr returns the LogData value or an error if the edge
// was not loaded in eager-loading.
func (e EligibilityCadrePayMatrixEdges) LogDataOrErr() ([]*Logs, error) {
	if e.loadedTypes[0] {
		return e.LogData, nil
	}
	return nil, &NotLoadedError{edge: "LogData"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*EligibilityCadrePayMatrix) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case eligibilitycadrepaymatrix.FieldID, eligibilitycadrepaymatrix.FieldCadreEligibleConfigurationCadreEligibleCode, eligibilitycadrepaymatrix.FieldPostId, eligibilitycadrepaymatrix.FieldCreatedById, eligibilitycadrepaymatrix.FieldCreatedByEmpId, eligibilitycadrepaymatrix.FieldVerifiedbyid, eligibilitycadrepaymatrix.FieldVerifiedbyEmployeeid, eligibilitycadrepaymatrix.FieldDeletedbyid, eligibilitycadrepaymatrix.FieldDeletedbyEmployeeid:
			values[i] = new(sql.NullInt64)
		case eligibilitycadrepaymatrix.FieldPostCode, eligibilitycadrepaymatrix.FieldPostDescription, eligibilitycadrepaymatrix.FieldOrderNumber, eligibilitycadrepaymatrix.FieldCreatedByUserName, eligibilitycadrepaymatrix.FieldCreatedByDesignation, eligibilitycadrepaymatrix.FieldVerifiedbyusername, eligibilitycadrepaymatrix.FieldVerifiedbyDesignation, eligibilitycadrepaymatrix.FieldStatuss, eligibilitycadrepaymatrix.FieldDeletedbyusername, eligibilitycadrepaymatrix.FieldDeletedbyDesignation:
			values[i] = new(sql.NullString)
		case eligibilitycadrepaymatrix.FieldCreatedDate, eligibilitycadrepaymatrix.FieldVerifiedDate, eligibilitycadrepaymatrix.FieldDeletedDate:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the EligibilityCadrePayMatrix fields.
func (ecpm *EligibilityCadrePayMatrix) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case eligibilitycadrepaymatrix.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ecpm.ID = int64(value.Int64)
		case eligibilitycadrepaymatrix.FieldCadreEligibleConfigurationCadreEligibleCode:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field cadreEligibleConfiguration_cadreEligibleCode", values[i])
			} else if value.Valid {
				ecpm.CadreEligibleConfigurationCadreEligibleCode = value.Int64
			}
		case eligibilitycadrepaymatrix.FieldPostId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field PostId", values[i])
			} else if value.Valid {
				ecpm.PostId = value.Int64
			}
		case eligibilitycadrepaymatrix.FieldPostCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field PostCode", values[i])
			} else if value.Valid {
				ecpm.PostCode = value.String
			}
		case eligibilitycadrepaymatrix.FieldPostDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field PostDescription", values[i])
			} else if value.Valid {
				ecpm.PostDescription = value.String
			}
		case eligibilitycadrepaymatrix.FieldOrderNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field OrderNumber", values[i])
			} else if value.Valid {
				ecpm.OrderNumber = value.String
			}
		case eligibilitycadrepaymatrix.FieldCreatedById:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field CreatedById", values[i])
			} else if value.Valid {
				ecpm.CreatedById = value.Int64
			}
		case eligibilitycadrepaymatrix.FieldCreatedByUserName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field CreatedByUserName", values[i])
			} else if value.Valid {
				ecpm.CreatedByUserName = value.String
			}
		case eligibilitycadrepaymatrix.FieldCreatedByEmpId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field CreatedByEmpId", values[i])
			} else if value.Valid {
				ecpm.CreatedByEmpId = value.Int64
			}
		case eligibilitycadrepaymatrix.FieldCreatedByDesignation:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field CreatedByDesignation", values[i])
			} else if value.Valid {
				ecpm.CreatedByDesignation = value.String
			}
		case eligibilitycadrepaymatrix.FieldCreatedDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field CreatedDate", values[i])
			} else if value.Valid {
				ecpm.CreatedDate = value.Time
			}
		case eligibilitycadrepaymatrix.FieldVerifiedbyid:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field verifiedbyid", values[i])
			} else if value.Valid {
				ecpm.Verifiedbyid = value.Int64
			}
		case eligibilitycadrepaymatrix.FieldVerifiedbyusername:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field verifiedbyusername", values[i])
			} else if value.Valid {
				ecpm.Verifiedbyusername = value.String
			}
		case eligibilitycadrepaymatrix.FieldVerifiedbyEmployeeid:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field verifiedbyEmployeeid", values[i])
			} else if value.Valid {
				ecpm.VerifiedbyEmployeeid = value.Int64
			}
		case eligibilitycadrepaymatrix.FieldVerifiedbyDesignation:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field verifiedbyDesignation", values[i])
			} else if value.Valid {
				ecpm.VerifiedbyDesignation = value.String
			}
		case eligibilitycadrepaymatrix.FieldVerifiedDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field verifiedDate", values[i])
			} else if value.Valid {
				ecpm.VerifiedDate = value.Time
			}
		case eligibilitycadrepaymatrix.FieldStatuss:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Statuss", values[i])
			} else if value.Valid {
				ecpm.Statuss = value.String
			}
		case eligibilitycadrepaymatrix.FieldDeletedbyid:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deletedbyid", values[i])
			} else if value.Valid {
				ecpm.Deletedbyid = value.Int64
			}
		case eligibilitycadrepaymatrix.FieldDeletedbyusername:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field deletedbyusername", values[i])
			} else if value.Valid {
				ecpm.Deletedbyusername = value.String
			}
		case eligibilitycadrepaymatrix.FieldDeletedbyEmployeeid:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deletedbyEmployeeid", values[i])
			} else if value.Valid {
				ecpm.DeletedbyEmployeeid = value.Int64
			}
		case eligibilitycadrepaymatrix.FieldDeletedbyDesignation:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field deletedbyDesignation", values[i])
			} else if value.Valid {
				ecpm.DeletedbyDesignation = value.String
			}
		case eligibilitycadrepaymatrix.FieldDeletedDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deletedDate", values[i])
			} else if value.Valid {
				ecpm.DeletedDate = value.Time
			}
		default:
			ecpm.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the EligibilityCadrePayMatrix.
// This includes values selected through modifiers, order, etc.
func (ecpm *EligibilityCadrePayMatrix) Value(name string) (ent.Value, error) {
	return ecpm.selectValues.Get(name)
}

// QueryLogData queries the "LogData" edge of the EligibilityCadrePayMatrix entity.
func (ecpm *EligibilityCadrePayMatrix) QueryLogData() *LogsQuery {
	return NewEligibilityCadrePayMatrixClient(ecpm.config).QueryLogData(ecpm)
}

// Update returns a builder for updating this EligibilityCadrePayMatrix.
// Note that you need to call EligibilityCadrePayMatrix.Unwrap() before calling this method if this EligibilityCadrePayMatrix
// was returned from a transaction, and the transaction was committed or rolled back.
func (ecpm *EligibilityCadrePayMatrix) Update() *EligibilityCadrePayMatrixUpdateOne {
	return NewEligibilityCadrePayMatrixClient(ecpm.config).UpdateOne(ecpm)
}

// Unwrap unwraps the EligibilityCadrePayMatrix entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ecpm *EligibilityCadrePayMatrix) Unwrap() *EligibilityCadrePayMatrix {
	_tx, ok := ecpm.config.driver.(*txDriver)
	if !ok {
		panic("ent: EligibilityCadrePayMatrix is not a transactional entity")
	}
	ecpm.config.driver = _tx.drv
	return ecpm
}

// String implements the fmt.Stringer.
func (ecpm *EligibilityCadrePayMatrix) String() string {
	var builder strings.Builder
	builder.WriteString("EligibilityCadrePayMatrix(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ecpm.ID))
	builder.WriteString("cadreEligibleConfiguration_cadreEligibleCode=")
	builder.WriteString(fmt.Sprintf("%v", ecpm.CadreEligibleConfigurationCadreEligibleCode))
	builder.WriteString(", ")
	builder.WriteString("PostId=")
	builder.WriteString(fmt.Sprintf("%v", ecpm.PostId))
	builder.WriteString(", ")
	builder.WriteString("PostCode=")
	builder.WriteString(ecpm.PostCode)
	builder.WriteString(", ")
	builder.WriteString("PostDescription=")
	builder.WriteString(ecpm.PostDescription)
	builder.WriteString(", ")
	builder.WriteString("OrderNumber=")
	builder.WriteString(ecpm.OrderNumber)
	builder.WriteString(", ")
	builder.WriteString("CreatedById=")
	builder.WriteString(fmt.Sprintf("%v", ecpm.CreatedById))
	builder.WriteString(", ")
	builder.WriteString("CreatedByUserName=")
	builder.WriteString(ecpm.CreatedByUserName)
	builder.WriteString(", ")
	builder.WriteString("CreatedByEmpId=")
	builder.WriteString(fmt.Sprintf("%v", ecpm.CreatedByEmpId))
	builder.WriteString(", ")
	builder.WriteString("CreatedByDesignation=")
	builder.WriteString(ecpm.CreatedByDesignation)
	builder.WriteString(", ")
	builder.WriteString("CreatedDate=")
	builder.WriteString(ecpm.CreatedDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("verifiedbyid=")
	builder.WriteString(fmt.Sprintf("%v", ecpm.Verifiedbyid))
	builder.WriteString(", ")
	builder.WriteString("verifiedbyusername=")
	builder.WriteString(ecpm.Verifiedbyusername)
	builder.WriteString(", ")
	builder.WriteString("verifiedbyEmployeeid=")
	builder.WriteString(fmt.Sprintf("%v", ecpm.VerifiedbyEmployeeid))
	builder.WriteString(", ")
	builder.WriteString("verifiedbyDesignation=")
	builder.WriteString(ecpm.VerifiedbyDesignation)
	builder.WriteString(", ")
	builder.WriteString("verifiedDate=")
	builder.WriteString(ecpm.VerifiedDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("Statuss=")
	builder.WriteString(ecpm.Statuss)
	builder.WriteString(", ")
	builder.WriteString("deletedbyid=")
	builder.WriteString(fmt.Sprintf("%v", ecpm.Deletedbyid))
	builder.WriteString(", ")
	builder.WriteString("deletedbyusername=")
	builder.WriteString(ecpm.Deletedbyusername)
	builder.WriteString(", ")
	builder.WriteString("deletedbyEmployeeid=")
	builder.WriteString(fmt.Sprintf("%v", ecpm.DeletedbyEmployeeid))
	builder.WriteString(", ")
	builder.WriteString("deletedbyDesignation=")
	builder.WriteString(ecpm.DeletedbyDesignation)
	builder.WriteString(", ")
	builder.WriteString("deletedDate=")
	builder.WriteString(ecpm.DeletedDate.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// EligibilityCadrePayMatrixes is a parsable slice of EligibilityCadrePayMatrix.
type EligibilityCadrePayMatrixes []*EligibilityCadrePayMatrix
