// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"recruit/ent/cadreeligibleconfiguration"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// CadreEligibleConfiguration is the model entity for the CadreEligibleConfiguration schema.
type CadreEligibleConfiguration struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// ExamCode holds the value of the "ExamCode" field.
	ExamCode int64 `json:"ExamCode,omitempty"`
	// ExamName holds the value of the "ExamName" field.
	ExamName string `json:"ExamName,omitempty"`
	// ExamShortName holds the value of the "ExamShortName" field.
	ExamShortName string `json:"ExamShortName,omitempty"`
	// PostID holds the value of the "PostID" field.
	PostID int64 `json:"PostID,omitempty"`
	// PostCode holds the value of the "PostCode" field.
	PostCode string `json:"PostCode,omitempty"`
	// PostDescription holds the value of the "PostDescription" field.
	PostDescription string `json:"PostDescription,omitempty"`
	// GdsService holds the value of the "gdsService" field.
	GdsService int64 `json:"gdsService,omitempty"`
	// CategoryCode holds the value of the "CategoryCode" field.
	CategoryCode string `json:"CategoryCode,omitempty"`
	// AgeCriteria holds the value of the "ageCriteria" field.
	AgeCriteria int64 `json:"ageCriteria,omitempty"`
	// ServiceCriteria holds the value of the "serviceCriteria" field.
	ServiceCriteria int64 `json:"serviceCriteria,omitempty"`
	// DrivingLicenceCriteria holds the value of the "drivingLicenceCriteria" field.
	DrivingLicenceCriteria int64 `json:"drivingLicenceCriteria,omitempty"`
	// ComputerKnowledge holds the value of the "computerKnowledge" field.
	ComputerKnowledge int64 `json:"computerKnowledge,omitempty"`
	// EligibilityBasedOnLevelOfPayMatrix holds the value of the "eligibilityBasedOnLevelOfPayMatrix" field.
	EligibilityBasedOnLevelOfPayMatrix int64 `json:"eligibilityBasedOnLevelOfPayMatrix,omitempty"`
	// EducationCode holds the value of the "educationCode" field.
	EducationCode int64 `json:"educationCode,omitempty"`
	// EducationDescription holds the value of the "educationDescription" field.
	EducationDescription string `json:"educationDescription,omitempty"`
	// OrderNumber holds the value of the "OrderNumber" field.
	OrderNumber string `json:"OrderNumber,omitempty"`
	// CreatedById holds the value of the "CreatedById" field.
	CreatedById int64 `json:"CreatedById,omitempty"`
	// CreatedByUserName holds the value of the "CreatedByUserName" field.
	CreatedByUserName string `json:"CreatedByUserName,omitempty"`
	// CreatedByEmpId holds the value of the "CreatedByEmpId" field.
	CreatedByEmpId int64 `json:"CreatedByEmpId,omitempty"`
	// CreatedByDesignation holds the value of the "CreatedByDesignation" field.
	CreatedByDesignation string `json:"CreatedByDesignation,omitempty"`
	// CreatedDate holds the value of the "CreatedDate" field.
	CreatedDate time.Time `json:"CreatedDate,omitempty"`
	// Verifiedbyid holds the value of the "verifiedbyid" field.
	Verifiedbyid int64 `json:"verifiedbyid,omitempty"`
	// Verifiedbyusername holds the value of the "verifiedbyusername" field.
	Verifiedbyusername string `json:"verifiedbyusername,omitempty"`
	// VerifiedbyEmployeeid holds the value of the "verifiedbyEmployeeid" field.
	VerifiedbyEmployeeid int64 `json:"verifiedbyEmployeeid,omitempty"`
	// VerifiedbyDesignation holds the value of the "verifiedbyDesignation" field.
	VerifiedbyDesignation string `json:"verifiedbyDesignation,omitempty"`
	// VerifiedDate holds the value of the "verifiedDate" field.
	VerifiedDate time.Time `json:"verifiedDate,omitempty"`
	// Statuss holds the value of the "Statuss" field.
	Statuss string `json:"Statuss,omitempty"`
	// Deletedbyid holds the value of the "deletedbyid" field.
	Deletedbyid int64 `json:"deletedbyid,omitempty"`
	// Deletedbyusername holds the value of the "deletedbyusername" field.
	Deletedbyusername string `json:"deletedbyusername,omitempty"`
	// DeletedbyEmployeeid holds the value of the "deletedbyEmployeeid" field.
	DeletedbyEmployeeid int64 `json:"deletedbyEmployeeid,omitempty"`
	// DeletedbyDesignation holds the value of the "deletedbyDesignation" field.
	DeletedbyDesignation string `json:"deletedbyDesignation,omitempty"`
	// DeletedDate holds the value of the "deletedDate" field.
	DeletedDate time.Time `json:"deletedDate,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CadreEligibleConfigurationQuery when eager-loading is set.
	Edges        CadreEligibleConfigurationEdges `json:"edges"`
	selectValues sql.SelectValues
}

// CadreEligibleConfigurationEdges holds the relations/edges for other nodes in the graph.
type CadreEligibleConfigurationEdges struct {
	// LogData holds the value of the LogData edge.
	LogData []*Logs `json:"LogData,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// LogDataOrErr returns the LogData value or an error if the edge
// was not loaded in eager-loading.
func (e CadreEligibleConfigurationEdges) LogDataOrErr() ([]*Logs, error) {
	if e.loadedTypes[0] {
		return e.LogData, nil
	}
	return nil, &NotLoadedError{edge: "LogData"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CadreEligibleConfiguration) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case cadreeligibleconfiguration.FieldID, cadreeligibleconfiguration.FieldExamCode, cadreeligibleconfiguration.FieldPostID, cadreeligibleconfiguration.FieldGdsService, cadreeligibleconfiguration.FieldAgeCriteria, cadreeligibleconfiguration.FieldServiceCriteria, cadreeligibleconfiguration.FieldDrivingLicenceCriteria, cadreeligibleconfiguration.FieldComputerKnowledge, cadreeligibleconfiguration.FieldEligibilityBasedOnLevelOfPayMatrix, cadreeligibleconfiguration.FieldEducationCode, cadreeligibleconfiguration.FieldCreatedById, cadreeligibleconfiguration.FieldCreatedByEmpId, cadreeligibleconfiguration.FieldVerifiedbyid, cadreeligibleconfiguration.FieldVerifiedbyEmployeeid, cadreeligibleconfiguration.FieldDeletedbyid, cadreeligibleconfiguration.FieldDeletedbyEmployeeid:
			values[i] = new(sql.NullInt64)
		case cadreeligibleconfiguration.FieldExamName, cadreeligibleconfiguration.FieldExamShortName, cadreeligibleconfiguration.FieldPostCode, cadreeligibleconfiguration.FieldPostDescription, cadreeligibleconfiguration.FieldCategoryCode, cadreeligibleconfiguration.FieldEducationDescription, cadreeligibleconfiguration.FieldOrderNumber, cadreeligibleconfiguration.FieldCreatedByUserName, cadreeligibleconfiguration.FieldCreatedByDesignation, cadreeligibleconfiguration.FieldVerifiedbyusername, cadreeligibleconfiguration.FieldVerifiedbyDesignation, cadreeligibleconfiguration.FieldStatuss, cadreeligibleconfiguration.FieldDeletedbyusername, cadreeligibleconfiguration.FieldDeletedbyDesignation:
			values[i] = new(sql.NullString)
		case cadreeligibleconfiguration.FieldCreatedDate, cadreeligibleconfiguration.FieldVerifiedDate, cadreeligibleconfiguration.FieldDeletedDate:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CadreEligibleConfiguration fields.
func (cec *CadreEligibleConfiguration) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case cadreeligibleconfiguration.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			cec.ID = int64(value.Int64)
		case cadreeligibleconfiguration.FieldExamCode:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field ExamCode", values[i])
			} else if value.Valid {
				cec.ExamCode = value.Int64
			}
		case cadreeligibleconfiguration.FieldExamName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ExamName", values[i])
			} else if value.Valid {
				cec.ExamName = value.String
			}
		case cadreeligibleconfiguration.FieldExamShortName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ExamShortName", values[i])
			} else if value.Valid {
				cec.ExamShortName = value.String
			}
		case cadreeligibleconfiguration.FieldPostID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field PostID", values[i])
			} else if value.Valid {
				cec.PostID = value.Int64
			}
		case cadreeligibleconfiguration.FieldPostCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field PostCode", values[i])
			} else if value.Valid {
				cec.PostCode = value.String
			}
		case cadreeligibleconfiguration.FieldPostDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field PostDescription", values[i])
			} else if value.Valid {
				cec.PostDescription = value.String
			}
		case cadreeligibleconfiguration.FieldGdsService:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field gdsService", values[i])
			} else if value.Valid {
				cec.GdsService = value.Int64
			}
		case cadreeligibleconfiguration.FieldCategoryCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field CategoryCode", values[i])
			} else if value.Valid {
				cec.CategoryCode = value.String
			}
		case cadreeligibleconfiguration.FieldAgeCriteria:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field ageCriteria", values[i])
			} else if value.Valid {
				cec.AgeCriteria = value.Int64
			}
		case cadreeligibleconfiguration.FieldServiceCriteria:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field serviceCriteria", values[i])
			} else if value.Valid {
				cec.ServiceCriteria = value.Int64
			}
		case cadreeligibleconfiguration.FieldDrivingLicenceCriteria:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field drivingLicenceCriteria", values[i])
			} else if value.Valid {
				cec.DrivingLicenceCriteria = value.Int64
			}
		case cadreeligibleconfiguration.FieldComputerKnowledge:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field computerKnowledge", values[i])
			} else if value.Valid {
				cec.ComputerKnowledge = value.Int64
			}
		case cadreeligibleconfiguration.FieldEligibilityBasedOnLevelOfPayMatrix:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field eligibilityBasedOnLevelOfPayMatrix", values[i])
			} else if value.Valid {
				cec.EligibilityBasedOnLevelOfPayMatrix = value.Int64
			}
		case cadreeligibleconfiguration.FieldEducationCode:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field educationCode", values[i])
			} else if value.Valid {
				cec.EducationCode = value.Int64
			}
		case cadreeligibleconfiguration.FieldEducationDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field educationDescription", values[i])
			} else if value.Valid {
				cec.EducationDescription = value.String
			}
		case cadreeligibleconfiguration.FieldOrderNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field OrderNumber", values[i])
			} else if value.Valid {
				cec.OrderNumber = value.String
			}
		case cadreeligibleconfiguration.FieldCreatedById:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field CreatedById", values[i])
			} else if value.Valid {
				cec.CreatedById = value.Int64
			}
		case cadreeligibleconfiguration.FieldCreatedByUserName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field CreatedByUserName", values[i])
			} else if value.Valid {
				cec.CreatedByUserName = value.String
			}
		case cadreeligibleconfiguration.FieldCreatedByEmpId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field CreatedByEmpId", values[i])
			} else if value.Valid {
				cec.CreatedByEmpId = value.Int64
			}
		case cadreeligibleconfiguration.FieldCreatedByDesignation:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field CreatedByDesignation", values[i])
			} else if value.Valid {
				cec.CreatedByDesignation = value.String
			}
		case cadreeligibleconfiguration.FieldCreatedDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field CreatedDate", values[i])
			} else if value.Valid {
				cec.CreatedDate = value.Time
			}
		case cadreeligibleconfiguration.FieldVerifiedbyid:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field verifiedbyid", values[i])
			} else if value.Valid {
				cec.Verifiedbyid = value.Int64
			}
		case cadreeligibleconfiguration.FieldVerifiedbyusername:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field verifiedbyusername", values[i])
			} else if value.Valid {
				cec.Verifiedbyusername = value.String
			}
		case cadreeligibleconfiguration.FieldVerifiedbyEmployeeid:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field verifiedbyEmployeeid", values[i])
			} else if value.Valid {
				cec.VerifiedbyEmployeeid = value.Int64
			}
		case cadreeligibleconfiguration.FieldVerifiedbyDesignation:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field verifiedbyDesignation", values[i])
			} else if value.Valid {
				cec.VerifiedbyDesignation = value.String
			}
		case cadreeligibleconfiguration.FieldVerifiedDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field verifiedDate", values[i])
			} else if value.Valid {
				cec.VerifiedDate = value.Time
			}
		case cadreeligibleconfiguration.FieldStatuss:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Statuss", values[i])
			} else if value.Valid {
				cec.Statuss = value.String
			}
		case cadreeligibleconfiguration.FieldDeletedbyid:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deletedbyid", values[i])
			} else if value.Valid {
				cec.Deletedbyid = value.Int64
			}
		case cadreeligibleconfiguration.FieldDeletedbyusername:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field deletedbyusername", values[i])
			} else if value.Valid {
				cec.Deletedbyusername = value.String
			}
		case cadreeligibleconfiguration.FieldDeletedbyEmployeeid:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deletedbyEmployeeid", values[i])
			} else if value.Valid {
				cec.DeletedbyEmployeeid = value.Int64
			}
		case cadreeligibleconfiguration.FieldDeletedbyDesignation:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field deletedbyDesignation", values[i])
			} else if value.Valid {
				cec.DeletedbyDesignation = value.String
			}
		case cadreeligibleconfiguration.FieldDeletedDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deletedDate", values[i])
			} else if value.Valid {
				cec.DeletedDate = value.Time
			}
		default:
			cec.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the CadreEligibleConfiguration.
// This includes values selected through modifiers, order, etc.
func (cec *CadreEligibleConfiguration) Value(name string) (ent.Value, error) {
	return cec.selectValues.Get(name)
}

// QueryLogData queries the "LogData" edge of the CadreEligibleConfiguration entity.
func (cec *CadreEligibleConfiguration) QueryLogData() *LogsQuery {
	return NewCadreEligibleConfigurationClient(cec.config).QueryLogData(cec)
}

// Update returns a builder for updating this CadreEligibleConfiguration.
// Note that you need to call CadreEligibleConfiguration.Unwrap() before calling this method if this CadreEligibleConfiguration
// was returned from a transaction, and the transaction was committed or rolled back.
func (cec *CadreEligibleConfiguration) Update() *CadreEligibleConfigurationUpdateOne {
	return NewCadreEligibleConfigurationClient(cec.config).UpdateOne(cec)
}

// Unwrap unwraps the CadreEligibleConfiguration entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (cec *CadreEligibleConfiguration) Unwrap() *CadreEligibleConfiguration {
	_tx, ok := cec.config.driver.(*txDriver)
	if !ok {
		panic("ent: CadreEligibleConfiguration is not a transactional entity")
	}
	cec.config.driver = _tx.drv
	return cec
}

// String implements the fmt.Stringer.
func (cec *CadreEligibleConfiguration) String() string {
	var builder strings.Builder
	builder.WriteString("CadreEligibleConfiguration(")
	builder.WriteString(fmt.Sprintf("id=%v, ", cec.ID))
	builder.WriteString("ExamCode=")
	builder.WriteString(fmt.Sprintf("%v", cec.ExamCode))
	builder.WriteString(", ")
	builder.WriteString("ExamName=")
	builder.WriteString(cec.ExamName)
	builder.WriteString(", ")
	builder.WriteString("ExamShortName=")
	builder.WriteString(cec.ExamShortName)
	builder.WriteString(", ")
	builder.WriteString("PostID=")
	builder.WriteString(fmt.Sprintf("%v", cec.PostID))
	builder.WriteString(", ")
	builder.WriteString("PostCode=")
	builder.WriteString(cec.PostCode)
	builder.WriteString(", ")
	builder.WriteString("PostDescription=")
	builder.WriteString(cec.PostDescription)
	builder.WriteString(", ")
	builder.WriteString("gdsService=")
	builder.WriteString(fmt.Sprintf("%v", cec.GdsService))
	builder.WriteString(", ")
	builder.WriteString("CategoryCode=")
	builder.WriteString(cec.CategoryCode)
	builder.WriteString(", ")
	builder.WriteString("ageCriteria=")
	builder.WriteString(fmt.Sprintf("%v", cec.AgeCriteria))
	builder.WriteString(", ")
	builder.WriteString("serviceCriteria=")
	builder.WriteString(fmt.Sprintf("%v", cec.ServiceCriteria))
	builder.WriteString(", ")
	builder.WriteString("drivingLicenceCriteria=")
	builder.WriteString(fmt.Sprintf("%v", cec.DrivingLicenceCriteria))
	builder.WriteString(", ")
	builder.WriteString("computerKnowledge=")
	builder.WriteString(fmt.Sprintf("%v", cec.ComputerKnowledge))
	builder.WriteString(", ")
	builder.WriteString("eligibilityBasedOnLevelOfPayMatrix=")
	builder.WriteString(fmt.Sprintf("%v", cec.EligibilityBasedOnLevelOfPayMatrix))
	builder.WriteString(", ")
	builder.WriteString("educationCode=")
	builder.WriteString(fmt.Sprintf("%v", cec.EducationCode))
	builder.WriteString(", ")
	builder.WriteString("educationDescription=")
	builder.WriteString(cec.EducationDescription)
	builder.WriteString(", ")
	builder.WriteString("OrderNumber=")
	builder.WriteString(cec.OrderNumber)
	builder.WriteString(", ")
	builder.WriteString("CreatedById=")
	builder.WriteString(fmt.Sprintf("%v", cec.CreatedById))
	builder.WriteString(", ")
	builder.WriteString("CreatedByUserName=")
	builder.WriteString(cec.CreatedByUserName)
	builder.WriteString(", ")
	builder.WriteString("CreatedByEmpId=")
	builder.WriteString(fmt.Sprintf("%v", cec.CreatedByEmpId))
	builder.WriteString(", ")
	builder.WriteString("CreatedByDesignation=")
	builder.WriteString(cec.CreatedByDesignation)
	builder.WriteString(", ")
	builder.WriteString("CreatedDate=")
	builder.WriteString(cec.CreatedDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("verifiedbyid=")
	builder.WriteString(fmt.Sprintf("%v", cec.Verifiedbyid))
	builder.WriteString(", ")
	builder.WriteString("verifiedbyusername=")
	builder.WriteString(cec.Verifiedbyusername)
	builder.WriteString(", ")
	builder.WriteString("verifiedbyEmployeeid=")
	builder.WriteString(fmt.Sprintf("%v", cec.VerifiedbyEmployeeid))
	builder.WriteString(", ")
	builder.WriteString("verifiedbyDesignation=")
	builder.WriteString(cec.VerifiedbyDesignation)
	builder.WriteString(", ")
	builder.WriteString("verifiedDate=")
	builder.WriteString(cec.VerifiedDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("Statuss=")
	builder.WriteString(cec.Statuss)
	builder.WriteString(", ")
	builder.WriteString("deletedbyid=")
	builder.WriteString(fmt.Sprintf("%v", cec.Deletedbyid))
	builder.WriteString(", ")
	builder.WriteString("deletedbyusername=")
	builder.WriteString(cec.Deletedbyusername)
	builder.WriteString(", ")
	builder.WriteString("deletedbyEmployeeid=")
	builder.WriteString(fmt.Sprintf("%v", cec.DeletedbyEmployeeid))
	builder.WriteString(", ")
	builder.WriteString("deletedbyDesignation=")
	builder.WriteString(cec.DeletedbyDesignation)
	builder.WriteString(", ")
	builder.WriteString("deletedDate=")
	builder.WriteString(cec.DeletedDate.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// CadreEligibleConfigurations is a parsable slice of CadreEligibleConfiguration.
type CadreEligibleConfigurations []*CadreEligibleConfiguration
