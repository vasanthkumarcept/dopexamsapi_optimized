// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"recruit/ent/exampostmapping"
	"recruit/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ExamPostMappingUpdate is the builder for updating ExamPostMapping entities.
type ExamPostMappingUpdate struct {
	config
	hooks    []Hook
	mutation *ExamPostMappingMutation
}

// Where appends a list predicates to the ExamPostMappingUpdate builder.
func (epmu *ExamPostMappingUpdate) Where(ps ...predicate.ExamPostMapping) *ExamPostMappingUpdate {
	epmu.mutation.Where(ps...)
	return epmu
}

// SetExamCode sets the "ExamCode" field.
func (epmu *ExamPostMappingUpdate) SetExamCode(i int64) *ExamPostMappingUpdate {
	epmu.mutation.ResetExamCode()
	epmu.mutation.SetExamCode(i)
	return epmu
}

// SetNillableExamCode sets the "ExamCode" field if the given value is not nil.
func (epmu *ExamPostMappingUpdate) SetNillableExamCode(i *int64) *ExamPostMappingUpdate {
	if i != nil {
		epmu.SetExamCode(*i)
	}
	return epmu
}

// AddExamCode adds i to the "ExamCode" field.
func (epmu *ExamPostMappingUpdate) AddExamCode(i int64) *ExamPostMappingUpdate {
	epmu.mutation.AddExamCode(i)
	return epmu
}

// ClearExamCode clears the value of the "ExamCode" field.
func (epmu *ExamPostMappingUpdate) ClearExamCode() *ExamPostMappingUpdate {
	epmu.mutation.ClearExamCode()
	return epmu
}

// SetExamShortDescription sets the "ExamShortDescription" field.
func (epmu *ExamPostMappingUpdate) SetExamShortDescription(s string) *ExamPostMappingUpdate {
	epmu.mutation.SetExamShortDescription(s)
	return epmu
}

// SetNillableExamShortDescription sets the "ExamShortDescription" field if the given value is not nil.
func (epmu *ExamPostMappingUpdate) SetNillableExamShortDescription(s *string) *ExamPostMappingUpdate {
	if s != nil {
		epmu.SetExamShortDescription(*s)
	}
	return epmu
}

// ClearExamShortDescription clears the value of the "ExamShortDescription" field.
func (epmu *ExamPostMappingUpdate) ClearExamShortDescription() *ExamPostMappingUpdate {
	epmu.mutation.ClearExamShortDescription()
	return epmu
}

// SetPostType sets the "PostType" field.
func (epmu *ExamPostMappingUpdate) SetPostType(i int) *ExamPostMappingUpdate {
	epmu.mutation.ResetPostType()
	epmu.mutation.SetPostType(i)
	return epmu
}

// SetNillablePostType sets the "PostType" field if the given value is not nil.
func (epmu *ExamPostMappingUpdate) SetNillablePostType(i *int) *ExamPostMappingUpdate {
	if i != nil {
		epmu.SetPostType(*i)
	}
	return epmu
}

// AddPostType adds i to the "PostType" field.
func (epmu *ExamPostMappingUpdate) AddPostType(i int) *ExamPostMappingUpdate {
	epmu.mutation.AddPostType(i)
	return epmu
}

// ClearPostType clears the value of the "PostType" field.
func (epmu *ExamPostMappingUpdate) ClearPostType() *ExamPostMappingUpdate {
	epmu.mutation.ClearPostType()
	return epmu
}

// SetPostTypeDescription sets the "PostTypeDescription" field.
func (epmu *ExamPostMappingUpdate) SetPostTypeDescription(s string) *ExamPostMappingUpdate {
	epmu.mutation.SetPostTypeDescription(s)
	return epmu
}

// SetNillablePostTypeDescription sets the "PostTypeDescription" field if the given value is not nil.
func (epmu *ExamPostMappingUpdate) SetNillablePostTypeDescription(s *string) *ExamPostMappingUpdate {
	if s != nil {
		epmu.SetPostTypeDescription(*s)
	}
	return epmu
}

// ClearPostTypeDescription clears the value of the "PostTypeDescription" field.
func (epmu *ExamPostMappingUpdate) ClearPostTypeDescription() *ExamPostMappingUpdate {
	epmu.mutation.ClearPostTypeDescription()
	return epmu
}

// SetFromPostCode sets the "FromPostCode" field.
func (epmu *ExamPostMappingUpdate) SetFromPostCode(s string) *ExamPostMappingUpdate {
	epmu.mutation.SetFromPostCode(s)
	return epmu
}

// SetNillableFromPostCode sets the "FromPostCode" field if the given value is not nil.
func (epmu *ExamPostMappingUpdate) SetNillableFromPostCode(s *string) *ExamPostMappingUpdate {
	if s != nil {
		epmu.SetFromPostCode(*s)
	}
	return epmu
}

// ClearFromPostCode clears the value of the "FromPostCode" field.
func (epmu *ExamPostMappingUpdate) ClearFromPostCode() *ExamPostMappingUpdate {
	epmu.mutation.ClearFromPostCode()
	return epmu
}

// SetFromPostDescription sets the "FromPostDescription" field.
func (epmu *ExamPostMappingUpdate) SetFromPostDescription(s string) *ExamPostMappingUpdate {
	epmu.mutation.SetFromPostDescription(s)
	return epmu
}

// SetNillableFromPostDescription sets the "FromPostDescription" field if the given value is not nil.
func (epmu *ExamPostMappingUpdate) SetNillableFromPostDescription(s *string) *ExamPostMappingUpdate {
	if s != nil {
		epmu.SetFromPostDescription(*s)
	}
	return epmu
}

// ClearFromPostDescription clears the value of the "FromPostDescription" field.
func (epmu *ExamPostMappingUpdate) ClearFromPostDescription() *ExamPostMappingUpdate {
	epmu.mutation.ClearFromPostDescription()
	return epmu
}

// SetToPostCode sets the "ToPostCode" field.
func (epmu *ExamPostMappingUpdate) SetToPostCode(s string) *ExamPostMappingUpdate {
	epmu.mutation.SetToPostCode(s)
	return epmu
}

// SetNillableToPostCode sets the "ToPostCode" field if the given value is not nil.
func (epmu *ExamPostMappingUpdate) SetNillableToPostCode(s *string) *ExamPostMappingUpdate {
	if s != nil {
		epmu.SetToPostCode(*s)
	}
	return epmu
}

// ClearToPostCode clears the value of the "ToPostCode" field.
func (epmu *ExamPostMappingUpdate) ClearToPostCode() *ExamPostMappingUpdate {
	epmu.mutation.ClearToPostCode()
	return epmu
}

// SetToPostDescription sets the "ToPostDescription" field.
func (epmu *ExamPostMappingUpdate) SetToPostDescription(s string) *ExamPostMappingUpdate {
	epmu.mutation.SetToPostDescription(s)
	return epmu
}

// SetNillableToPostDescription sets the "ToPostDescription" field if the given value is not nil.
func (epmu *ExamPostMappingUpdate) SetNillableToPostDescription(s *string) *ExamPostMappingUpdate {
	if s != nil {
		epmu.SetToPostDescription(*s)
	}
	return epmu
}

// ClearToPostDescription clears the value of the "ToPostDescription" field.
func (epmu *ExamPostMappingUpdate) ClearToPostDescription() *ExamPostMappingUpdate {
	epmu.mutation.ClearToPostDescription()
	return epmu
}

// SetAgeCriteria sets the "AgeCriteria" field.
func (epmu *ExamPostMappingUpdate) SetAgeCriteria(i int) *ExamPostMappingUpdate {
	epmu.mutation.ResetAgeCriteria()
	epmu.mutation.SetAgeCriteria(i)
	return epmu
}

// SetNillableAgeCriteria sets the "AgeCriteria" field if the given value is not nil.
func (epmu *ExamPostMappingUpdate) SetNillableAgeCriteria(i *int) *ExamPostMappingUpdate {
	if i != nil {
		epmu.SetAgeCriteria(*i)
	}
	return epmu
}

// AddAgeCriteria adds i to the "AgeCriteria" field.
func (epmu *ExamPostMappingUpdate) AddAgeCriteria(i int) *ExamPostMappingUpdate {
	epmu.mutation.AddAgeCriteria(i)
	return epmu
}

// ClearAgeCriteria clears the value of the "AgeCriteria" field.
func (epmu *ExamPostMappingUpdate) ClearAgeCriteria() *ExamPostMappingUpdate {
	epmu.mutation.ClearAgeCriteria()
	return epmu
}

// SetServiceCriteria sets the "ServiceCriteria" field.
func (epmu *ExamPostMappingUpdate) SetServiceCriteria(i int) *ExamPostMappingUpdate {
	epmu.mutation.ResetServiceCriteria()
	epmu.mutation.SetServiceCriteria(i)
	return epmu
}

// SetNillableServiceCriteria sets the "ServiceCriteria" field if the given value is not nil.
func (epmu *ExamPostMappingUpdate) SetNillableServiceCriteria(i *int) *ExamPostMappingUpdate {
	if i != nil {
		epmu.SetServiceCriteria(*i)
	}
	return epmu
}

// AddServiceCriteria adds i to the "ServiceCriteria" field.
func (epmu *ExamPostMappingUpdate) AddServiceCriteria(i int) *ExamPostMappingUpdate {
	epmu.mutation.AddServiceCriteria(i)
	return epmu
}

// ClearServiceCriteria clears the value of the "ServiceCriteria" field.
func (epmu *ExamPostMappingUpdate) ClearServiceCriteria() *ExamPostMappingUpdate {
	epmu.mutation.ClearServiceCriteria()
	return epmu
}

// SetEducationCode sets the "EducationCode" field.
func (epmu *ExamPostMappingUpdate) SetEducationCode(i int32) *ExamPostMappingUpdate {
	epmu.mutation.ResetEducationCode()
	epmu.mutation.SetEducationCode(i)
	return epmu
}

// SetNillableEducationCode sets the "EducationCode" field if the given value is not nil.
func (epmu *ExamPostMappingUpdate) SetNillableEducationCode(i *int32) *ExamPostMappingUpdate {
	if i != nil {
		epmu.SetEducationCode(*i)
	}
	return epmu
}

// AddEducationCode adds i to the "EducationCode" field.
func (epmu *ExamPostMappingUpdate) AddEducationCode(i int32) *ExamPostMappingUpdate {
	epmu.mutation.AddEducationCode(i)
	return epmu
}

// ClearEducationCode clears the value of the "EducationCode" field.
func (epmu *ExamPostMappingUpdate) ClearEducationCode() *ExamPostMappingUpdate {
	epmu.mutation.ClearEducationCode()
	return epmu
}

// SetEducationDescription sets the "EducationDescription" field.
func (epmu *ExamPostMappingUpdate) SetEducationDescription(s string) *ExamPostMappingUpdate {
	epmu.mutation.SetEducationDescription(s)
	return epmu
}

// SetNillableEducationDescription sets the "EducationDescription" field if the given value is not nil.
func (epmu *ExamPostMappingUpdate) SetNillableEducationDescription(s *string) *ExamPostMappingUpdate {
	if s != nil {
		epmu.SetEducationDescription(*s)
	}
	return epmu
}

// ClearEducationDescription clears the value of the "EducationDescription" field.
func (epmu *ExamPostMappingUpdate) ClearEducationDescription() *ExamPostMappingUpdate {
	epmu.mutation.ClearEducationDescription()
	return epmu
}

// SetOrderNumber sets the "OrderNumber" field.
func (epmu *ExamPostMappingUpdate) SetOrderNumber(s string) *ExamPostMappingUpdate {
	epmu.mutation.SetOrderNumber(s)
	return epmu
}

// SetNillableOrderNumber sets the "OrderNumber" field if the given value is not nil.
func (epmu *ExamPostMappingUpdate) SetNillableOrderNumber(s *string) *ExamPostMappingUpdate {
	if s != nil {
		epmu.SetOrderNumber(*s)
	}
	return epmu
}

// ClearOrderNumber clears the value of the "OrderNumber" field.
func (epmu *ExamPostMappingUpdate) ClearOrderNumber() *ExamPostMappingUpdate {
	epmu.mutation.ClearOrderNumber()
	return epmu
}

// SetCreatedById sets the "CreatedById" field.
func (epmu *ExamPostMappingUpdate) SetCreatedById(i int64) *ExamPostMappingUpdate {
	epmu.mutation.ResetCreatedById()
	epmu.mutation.SetCreatedById(i)
	return epmu
}

// SetNillableCreatedById sets the "CreatedById" field if the given value is not nil.
func (epmu *ExamPostMappingUpdate) SetNillableCreatedById(i *int64) *ExamPostMappingUpdate {
	if i != nil {
		epmu.SetCreatedById(*i)
	}
	return epmu
}

// AddCreatedById adds i to the "CreatedById" field.
func (epmu *ExamPostMappingUpdate) AddCreatedById(i int64) *ExamPostMappingUpdate {
	epmu.mutation.AddCreatedById(i)
	return epmu
}

// ClearCreatedById clears the value of the "CreatedById" field.
func (epmu *ExamPostMappingUpdate) ClearCreatedById() *ExamPostMappingUpdate {
	epmu.mutation.ClearCreatedById()
	return epmu
}

// SetCreatedByUserName sets the "CreatedByUserName" field.
func (epmu *ExamPostMappingUpdate) SetCreatedByUserName(s string) *ExamPostMappingUpdate {
	epmu.mutation.SetCreatedByUserName(s)
	return epmu
}

// SetNillableCreatedByUserName sets the "CreatedByUserName" field if the given value is not nil.
func (epmu *ExamPostMappingUpdate) SetNillableCreatedByUserName(s *string) *ExamPostMappingUpdate {
	if s != nil {
		epmu.SetCreatedByUserName(*s)
	}
	return epmu
}

// ClearCreatedByUserName clears the value of the "CreatedByUserName" field.
func (epmu *ExamPostMappingUpdate) ClearCreatedByUserName() *ExamPostMappingUpdate {
	epmu.mutation.ClearCreatedByUserName()
	return epmu
}

// SetCreatedByEmployeeId sets the "CreatedByEmployeeId" field.
func (epmu *ExamPostMappingUpdate) SetCreatedByEmployeeId(s string) *ExamPostMappingUpdate {
	epmu.mutation.SetCreatedByEmployeeId(s)
	return epmu
}

// SetNillableCreatedByEmployeeId sets the "CreatedByEmployeeId" field if the given value is not nil.
func (epmu *ExamPostMappingUpdate) SetNillableCreatedByEmployeeId(s *string) *ExamPostMappingUpdate {
	if s != nil {
		epmu.SetCreatedByEmployeeId(*s)
	}
	return epmu
}

// ClearCreatedByEmployeeId clears the value of the "CreatedByEmployeeId" field.
func (epmu *ExamPostMappingUpdate) ClearCreatedByEmployeeId() *ExamPostMappingUpdate {
	epmu.mutation.ClearCreatedByEmployeeId()
	return epmu
}

// SetCreatedByDesignation sets the "CreatedByDesignation" field.
func (epmu *ExamPostMappingUpdate) SetCreatedByDesignation(s string) *ExamPostMappingUpdate {
	epmu.mutation.SetCreatedByDesignation(s)
	return epmu
}

// SetNillableCreatedByDesignation sets the "CreatedByDesignation" field if the given value is not nil.
func (epmu *ExamPostMappingUpdate) SetNillableCreatedByDesignation(s *string) *ExamPostMappingUpdate {
	if s != nil {
		epmu.SetCreatedByDesignation(*s)
	}
	return epmu
}

// ClearCreatedByDesignation clears the value of the "CreatedByDesignation" field.
func (epmu *ExamPostMappingUpdate) ClearCreatedByDesignation() *ExamPostMappingUpdate {
	epmu.mutation.ClearCreatedByDesignation()
	return epmu
}

// SetCreatedDate sets the "CreatedDate" field.
func (epmu *ExamPostMappingUpdate) SetCreatedDate(s string) *ExamPostMappingUpdate {
	epmu.mutation.SetCreatedDate(s)
	return epmu
}

// SetNillableCreatedDate sets the "CreatedDate" field if the given value is not nil.
func (epmu *ExamPostMappingUpdate) SetNillableCreatedDate(s *string) *ExamPostMappingUpdate {
	if s != nil {
		epmu.SetCreatedDate(*s)
	}
	return epmu
}

// ClearCreatedDate clears the value of the "CreatedDate" field.
func (epmu *ExamPostMappingUpdate) ClearCreatedDate() *ExamPostMappingUpdate {
	epmu.mutation.ClearCreatedDate()
	return epmu
}

// SetVerifiedById sets the "VerifiedById" field.
func (epmu *ExamPostMappingUpdate) SetVerifiedById(i int64) *ExamPostMappingUpdate {
	epmu.mutation.ResetVerifiedById()
	epmu.mutation.SetVerifiedById(i)
	return epmu
}

// SetNillableVerifiedById sets the "VerifiedById" field if the given value is not nil.
func (epmu *ExamPostMappingUpdate) SetNillableVerifiedById(i *int64) *ExamPostMappingUpdate {
	if i != nil {
		epmu.SetVerifiedById(*i)
	}
	return epmu
}

// AddVerifiedById adds i to the "VerifiedById" field.
func (epmu *ExamPostMappingUpdate) AddVerifiedById(i int64) *ExamPostMappingUpdate {
	epmu.mutation.AddVerifiedById(i)
	return epmu
}

// ClearVerifiedById clears the value of the "VerifiedById" field.
func (epmu *ExamPostMappingUpdate) ClearVerifiedById() *ExamPostMappingUpdate {
	epmu.mutation.ClearVerifiedById()
	return epmu
}

// SetVerifiedByUserName sets the "VerifiedByUserName" field.
func (epmu *ExamPostMappingUpdate) SetVerifiedByUserName(s string) *ExamPostMappingUpdate {
	epmu.mutation.SetVerifiedByUserName(s)
	return epmu
}

// SetNillableVerifiedByUserName sets the "VerifiedByUserName" field if the given value is not nil.
func (epmu *ExamPostMappingUpdate) SetNillableVerifiedByUserName(s *string) *ExamPostMappingUpdate {
	if s != nil {
		epmu.SetVerifiedByUserName(*s)
	}
	return epmu
}

// ClearVerifiedByUserName clears the value of the "VerifiedByUserName" field.
func (epmu *ExamPostMappingUpdate) ClearVerifiedByUserName() *ExamPostMappingUpdate {
	epmu.mutation.ClearVerifiedByUserName()
	return epmu
}

// SetVerifiedByEmployeeId sets the "VerifiedByEmployeeId" field.
func (epmu *ExamPostMappingUpdate) SetVerifiedByEmployeeId(s string) *ExamPostMappingUpdate {
	epmu.mutation.SetVerifiedByEmployeeId(s)
	return epmu
}

// SetNillableVerifiedByEmployeeId sets the "VerifiedByEmployeeId" field if the given value is not nil.
func (epmu *ExamPostMappingUpdate) SetNillableVerifiedByEmployeeId(s *string) *ExamPostMappingUpdate {
	if s != nil {
		epmu.SetVerifiedByEmployeeId(*s)
	}
	return epmu
}

// ClearVerifiedByEmployeeId clears the value of the "VerifiedByEmployeeId" field.
func (epmu *ExamPostMappingUpdate) ClearVerifiedByEmployeeId() *ExamPostMappingUpdate {
	epmu.mutation.ClearVerifiedByEmployeeId()
	return epmu
}

// SetVerifiedByDesignation sets the "VerifiedByDesignation" field.
func (epmu *ExamPostMappingUpdate) SetVerifiedByDesignation(s string) *ExamPostMappingUpdate {
	epmu.mutation.SetVerifiedByDesignation(s)
	return epmu
}

// SetNillableVerifiedByDesignation sets the "VerifiedByDesignation" field if the given value is not nil.
func (epmu *ExamPostMappingUpdate) SetNillableVerifiedByDesignation(s *string) *ExamPostMappingUpdate {
	if s != nil {
		epmu.SetVerifiedByDesignation(*s)
	}
	return epmu
}

// ClearVerifiedByDesignation clears the value of the "VerifiedByDesignation" field.
func (epmu *ExamPostMappingUpdate) ClearVerifiedByDesignation() *ExamPostMappingUpdate {
	epmu.mutation.ClearVerifiedByDesignation()
	return epmu
}

// SetVerifiedDate sets the "VerifiedDate" field.
func (epmu *ExamPostMappingUpdate) SetVerifiedDate(s string) *ExamPostMappingUpdate {
	epmu.mutation.SetVerifiedDate(s)
	return epmu
}

// SetNillableVerifiedDate sets the "VerifiedDate" field if the given value is not nil.
func (epmu *ExamPostMappingUpdate) SetNillableVerifiedDate(s *string) *ExamPostMappingUpdate {
	if s != nil {
		epmu.SetVerifiedDate(*s)
	}
	return epmu
}

// ClearVerifiedDate clears the value of the "VerifiedDate" field.
func (epmu *ExamPostMappingUpdate) ClearVerifiedDate() *ExamPostMappingUpdate {
	epmu.mutation.ClearVerifiedDate()
	return epmu
}

// SetStatus sets the "Status" field.
func (epmu *ExamPostMappingUpdate) SetStatus(s string) *ExamPostMappingUpdate {
	epmu.mutation.SetStatus(s)
	return epmu
}

// SetNillableStatus sets the "Status" field if the given value is not nil.
func (epmu *ExamPostMappingUpdate) SetNillableStatus(s *string) *ExamPostMappingUpdate {
	if s != nil {
		epmu.SetStatus(*s)
	}
	return epmu
}

// ClearStatus clears the value of the "Status" field.
func (epmu *ExamPostMappingUpdate) ClearStatus() *ExamPostMappingUpdate {
	epmu.mutation.ClearStatus()
	return epmu
}

// SetDeletedById sets the "DeletedById" field.
func (epmu *ExamPostMappingUpdate) SetDeletedById(i int64) *ExamPostMappingUpdate {
	epmu.mutation.ResetDeletedById()
	epmu.mutation.SetDeletedById(i)
	return epmu
}

// SetNillableDeletedById sets the "DeletedById" field if the given value is not nil.
func (epmu *ExamPostMappingUpdate) SetNillableDeletedById(i *int64) *ExamPostMappingUpdate {
	if i != nil {
		epmu.SetDeletedById(*i)
	}
	return epmu
}

// AddDeletedById adds i to the "DeletedById" field.
func (epmu *ExamPostMappingUpdate) AddDeletedById(i int64) *ExamPostMappingUpdate {
	epmu.mutation.AddDeletedById(i)
	return epmu
}

// ClearDeletedById clears the value of the "DeletedById" field.
func (epmu *ExamPostMappingUpdate) ClearDeletedById() *ExamPostMappingUpdate {
	epmu.mutation.ClearDeletedById()
	return epmu
}

// SetDeletedByUserName sets the "DeletedByUserName" field.
func (epmu *ExamPostMappingUpdate) SetDeletedByUserName(s string) *ExamPostMappingUpdate {
	epmu.mutation.SetDeletedByUserName(s)
	return epmu
}

// SetNillableDeletedByUserName sets the "DeletedByUserName" field if the given value is not nil.
func (epmu *ExamPostMappingUpdate) SetNillableDeletedByUserName(s *string) *ExamPostMappingUpdate {
	if s != nil {
		epmu.SetDeletedByUserName(*s)
	}
	return epmu
}

// ClearDeletedByUserName clears the value of the "DeletedByUserName" field.
func (epmu *ExamPostMappingUpdate) ClearDeletedByUserName() *ExamPostMappingUpdate {
	epmu.mutation.ClearDeletedByUserName()
	return epmu
}

// SetDeletedByEmployeeId sets the "DeletedByEmployeeId" field.
func (epmu *ExamPostMappingUpdate) SetDeletedByEmployeeId(s string) *ExamPostMappingUpdate {
	epmu.mutation.SetDeletedByEmployeeId(s)
	return epmu
}

// SetNillableDeletedByEmployeeId sets the "DeletedByEmployeeId" field if the given value is not nil.
func (epmu *ExamPostMappingUpdate) SetNillableDeletedByEmployeeId(s *string) *ExamPostMappingUpdate {
	if s != nil {
		epmu.SetDeletedByEmployeeId(*s)
	}
	return epmu
}

// ClearDeletedByEmployeeId clears the value of the "DeletedByEmployeeId" field.
func (epmu *ExamPostMappingUpdate) ClearDeletedByEmployeeId() *ExamPostMappingUpdate {
	epmu.mutation.ClearDeletedByEmployeeId()
	return epmu
}

// SetDeletedByDesignation sets the "DeletedByDesignation" field.
func (epmu *ExamPostMappingUpdate) SetDeletedByDesignation(s string) *ExamPostMappingUpdate {
	epmu.mutation.SetDeletedByDesignation(s)
	return epmu
}

// SetNillableDeletedByDesignation sets the "DeletedByDesignation" field if the given value is not nil.
func (epmu *ExamPostMappingUpdate) SetNillableDeletedByDesignation(s *string) *ExamPostMappingUpdate {
	if s != nil {
		epmu.SetDeletedByDesignation(*s)
	}
	return epmu
}

// ClearDeletedByDesignation clears the value of the "DeletedByDesignation" field.
func (epmu *ExamPostMappingUpdate) ClearDeletedByDesignation() *ExamPostMappingUpdate {
	epmu.mutation.ClearDeletedByDesignation()
	return epmu
}

// SetDeletedDate sets the "DeletedDate" field.
func (epmu *ExamPostMappingUpdate) SetDeletedDate(s string) *ExamPostMappingUpdate {
	epmu.mutation.SetDeletedDate(s)
	return epmu
}

// SetNillableDeletedDate sets the "DeletedDate" field if the given value is not nil.
func (epmu *ExamPostMappingUpdate) SetNillableDeletedDate(s *string) *ExamPostMappingUpdate {
	if s != nil {
		epmu.SetDeletedDate(*s)
	}
	return epmu
}

// ClearDeletedDate clears the value of the "DeletedDate" field.
func (epmu *ExamPostMappingUpdate) ClearDeletedDate() *ExamPostMappingUpdate {
	epmu.mutation.ClearDeletedDate()
	return epmu
}

// Mutation returns the ExamPostMappingMutation object of the builder.
func (epmu *ExamPostMappingUpdate) Mutation() *ExamPostMappingMutation {
	return epmu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (epmu *ExamPostMappingUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, epmu.sqlSave, epmu.mutation, epmu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (epmu *ExamPostMappingUpdate) SaveX(ctx context.Context) int {
	affected, err := epmu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (epmu *ExamPostMappingUpdate) Exec(ctx context.Context) error {
	_, err := epmu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (epmu *ExamPostMappingUpdate) ExecX(ctx context.Context) {
	if err := epmu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (epmu *ExamPostMappingUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(exampostmapping.Table, exampostmapping.Columns, sqlgraph.NewFieldSpec(exampostmapping.FieldID, field.TypeInt))
	if ps := epmu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := epmu.mutation.ExamCode(); ok {
		_spec.SetField(exampostmapping.FieldExamCode, field.TypeInt64, value)
	}
	if value, ok := epmu.mutation.AddedExamCode(); ok {
		_spec.AddField(exampostmapping.FieldExamCode, field.TypeInt64, value)
	}
	if epmu.mutation.ExamCodeCleared() {
		_spec.ClearField(exampostmapping.FieldExamCode, field.TypeInt64)
	}
	if value, ok := epmu.mutation.ExamShortDescription(); ok {
		_spec.SetField(exampostmapping.FieldExamShortDescription, field.TypeString, value)
	}
	if epmu.mutation.ExamShortDescriptionCleared() {
		_spec.ClearField(exampostmapping.FieldExamShortDescription, field.TypeString)
	}
	if value, ok := epmu.mutation.PostType(); ok {
		_spec.SetField(exampostmapping.FieldPostType, field.TypeInt, value)
	}
	if value, ok := epmu.mutation.AddedPostType(); ok {
		_spec.AddField(exampostmapping.FieldPostType, field.TypeInt, value)
	}
	if epmu.mutation.PostTypeCleared() {
		_spec.ClearField(exampostmapping.FieldPostType, field.TypeInt)
	}
	if value, ok := epmu.mutation.PostTypeDescription(); ok {
		_spec.SetField(exampostmapping.FieldPostTypeDescription, field.TypeString, value)
	}
	if epmu.mutation.PostTypeDescriptionCleared() {
		_spec.ClearField(exampostmapping.FieldPostTypeDescription, field.TypeString)
	}
	if value, ok := epmu.mutation.FromPostCode(); ok {
		_spec.SetField(exampostmapping.FieldFromPostCode, field.TypeString, value)
	}
	if epmu.mutation.FromPostCodeCleared() {
		_spec.ClearField(exampostmapping.FieldFromPostCode, field.TypeString)
	}
	if value, ok := epmu.mutation.FromPostDescription(); ok {
		_spec.SetField(exampostmapping.FieldFromPostDescription, field.TypeString, value)
	}
	if epmu.mutation.FromPostDescriptionCleared() {
		_spec.ClearField(exampostmapping.FieldFromPostDescription, field.TypeString)
	}
	if value, ok := epmu.mutation.ToPostCode(); ok {
		_spec.SetField(exampostmapping.FieldToPostCode, field.TypeString, value)
	}
	if epmu.mutation.ToPostCodeCleared() {
		_spec.ClearField(exampostmapping.FieldToPostCode, field.TypeString)
	}
	if value, ok := epmu.mutation.ToPostDescription(); ok {
		_spec.SetField(exampostmapping.FieldToPostDescription, field.TypeString, value)
	}
	if epmu.mutation.ToPostDescriptionCleared() {
		_spec.ClearField(exampostmapping.FieldToPostDescription, field.TypeString)
	}
	if value, ok := epmu.mutation.AgeCriteria(); ok {
		_spec.SetField(exampostmapping.FieldAgeCriteria, field.TypeInt, value)
	}
	if value, ok := epmu.mutation.AddedAgeCriteria(); ok {
		_spec.AddField(exampostmapping.FieldAgeCriteria, field.TypeInt, value)
	}
	if epmu.mutation.AgeCriteriaCleared() {
		_spec.ClearField(exampostmapping.FieldAgeCriteria, field.TypeInt)
	}
	if value, ok := epmu.mutation.ServiceCriteria(); ok {
		_spec.SetField(exampostmapping.FieldServiceCriteria, field.TypeInt, value)
	}
	if value, ok := epmu.mutation.AddedServiceCriteria(); ok {
		_spec.AddField(exampostmapping.FieldServiceCriteria, field.TypeInt, value)
	}
	if epmu.mutation.ServiceCriteriaCleared() {
		_spec.ClearField(exampostmapping.FieldServiceCriteria, field.TypeInt)
	}
	if value, ok := epmu.mutation.EducationCode(); ok {
		_spec.SetField(exampostmapping.FieldEducationCode, field.TypeInt32, value)
	}
	if value, ok := epmu.mutation.AddedEducationCode(); ok {
		_spec.AddField(exampostmapping.FieldEducationCode, field.TypeInt32, value)
	}
	if epmu.mutation.EducationCodeCleared() {
		_spec.ClearField(exampostmapping.FieldEducationCode, field.TypeInt32)
	}
	if value, ok := epmu.mutation.EducationDescription(); ok {
		_spec.SetField(exampostmapping.FieldEducationDescription, field.TypeString, value)
	}
	if epmu.mutation.EducationDescriptionCleared() {
		_spec.ClearField(exampostmapping.FieldEducationDescription, field.TypeString)
	}
	if value, ok := epmu.mutation.OrderNumber(); ok {
		_spec.SetField(exampostmapping.FieldOrderNumber, field.TypeString, value)
	}
	if epmu.mutation.OrderNumberCleared() {
		_spec.ClearField(exampostmapping.FieldOrderNumber, field.TypeString)
	}
	if value, ok := epmu.mutation.CreatedById(); ok {
		_spec.SetField(exampostmapping.FieldCreatedById, field.TypeInt64, value)
	}
	if value, ok := epmu.mutation.AddedCreatedById(); ok {
		_spec.AddField(exampostmapping.FieldCreatedById, field.TypeInt64, value)
	}
	if epmu.mutation.CreatedByIdCleared() {
		_spec.ClearField(exampostmapping.FieldCreatedById, field.TypeInt64)
	}
	if value, ok := epmu.mutation.CreatedByUserName(); ok {
		_spec.SetField(exampostmapping.FieldCreatedByUserName, field.TypeString, value)
	}
	if epmu.mutation.CreatedByUserNameCleared() {
		_spec.ClearField(exampostmapping.FieldCreatedByUserName, field.TypeString)
	}
	if value, ok := epmu.mutation.CreatedByEmployeeId(); ok {
		_spec.SetField(exampostmapping.FieldCreatedByEmployeeId, field.TypeString, value)
	}
	if epmu.mutation.CreatedByEmployeeIdCleared() {
		_spec.ClearField(exampostmapping.FieldCreatedByEmployeeId, field.TypeString)
	}
	if value, ok := epmu.mutation.CreatedByDesignation(); ok {
		_spec.SetField(exampostmapping.FieldCreatedByDesignation, field.TypeString, value)
	}
	if epmu.mutation.CreatedByDesignationCleared() {
		_spec.ClearField(exampostmapping.FieldCreatedByDesignation, field.TypeString)
	}
	if value, ok := epmu.mutation.CreatedDate(); ok {
		_spec.SetField(exampostmapping.FieldCreatedDate, field.TypeString, value)
	}
	if epmu.mutation.CreatedDateCleared() {
		_spec.ClearField(exampostmapping.FieldCreatedDate, field.TypeString)
	}
	if value, ok := epmu.mutation.VerifiedById(); ok {
		_spec.SetField(exampostmapping.FieldVerifiedById, field.TypeInt64, value)
	}
	if value, ok := epmu.mutation.AddedVerifiedById(); ok {
		_spec.AddField(exampostmapping.FieldVerifiedById, field.TypeInt64, value)
	}
	if epmu.mutation.VerifiedByIdCleared() {
		_spec.ClearField(exampostmapping.FieldVerifiedById, field.TypeInt64)
	}
	if value, ok := epmu.mutation.VerifiedByUserName(); ok {
		_spec.SetField(exampostmapping.FieldVerifiedByUserName, field.TypeString, value)
	}
	if epmu.mutation.VerifiedByUserNameCleared() {
		_spec.ClearField(exampostmapping.FieldVerifiedByUserName, field.TypeString)
	}
	if value, ok := epmu.mutation.VerifiedByEmployeeId(); ok {
		_spec.SetField(exampostmapping.FieldVerifiedByEmployeeId, field.TypeString, value)
	}
	if epmu.mutation.VerifiedByEmployeeIdCleared() {
		_spec.ClearField(exampostmapping.FieldVerifiedByEmployeeId, field.TypeString)
	}
	if value, ok := epmu.mutation.VerifiedByDesignation(); ok {
		_spec.SetField(exampostmapping.FieldVerifiedByDesignation, field.TypeString, value)
	}
	if epmu.mutation.VerifiedByDesignationCleared() {
		_spec.ClearField(exampostmapping.FieldVerifiedByDesignation, field.TypeString)
	}
	if value, ok := epmu.mutation.VerifiedDate(); ok {
		_spec.SetField(exampostmapping.FieldVerifiedDate, field.TypeString, value)
	}
	if epmu.mutation.VerifiedDateCleared() {
		_spec.ClearField(exampostmapping.FieldVerifiedDate, field.TypeString)
	}
	if value, ok := epmu.mutation.Status(); ok {
		_spec.SetField(exampostmapping.FieldStatus, field.TypeString, value)
	}
	if epmu.mutation.StatusCleared() {
		_spec.ClearField(exampostmapping.FieldStatus, field.TypeString)
	}
	if value, ok := epmu.mutation.DeletedById(); ok {
		_spec.SetField(exampostmapping.FieldDeletedById, field.TypeInt64, value)
	}
	if value, ok := epmu.mutation.AddedDeletedById(); ok {
		_spec.AddField(exampostmapping.FieldDeletedById, field.TypeInt64, value)
	}
	if epmu.mutation.DeletedByIdCleared() {
		_spec.ClearField(exampostmapping.FieldDeletedById, field.TypeInt64)
	}
	if value, ok := epmu.mutation.DeletedByUserName(); ok {
		_spec.SetField(exampostmapping.FieldDeletedByUserName, field.TypeString, value)
	}
	if epmu.mutation.DeletedByUserNameCleared() {
		_spec.ClearField(exampostmapping.FieldDeletedByUserName, field.TypeString)
	}
	if value, ok := epmu.mutation.DeletedByEmployeeId(); ok {
		_spec.SetField(exampostmapping.FieldDeletedByEmployeeId, field.TypeString, value)
	}
	if epmu.mutation.DeletedByEmployeeIdCleared() {
		_spec.ClearField(exampostmapping.FieldDeletedByEmployeeId, field.TypeString)
	}
	if value, ok := epmu.mutation.DeletedByDesignation(); ok {
		_spec.SetField(exampostmapping.FieldDeletedByDesignation, field.TypeString, value)
	}
	if epmu.mutation.DeletedByDesignationCleared() {
		_spec.ClearField(exampostmapping.FieldDeletedByDesignation, field.TypeString)
	}
	if value, ok := epmu.mutation.DeletedDate(); ok {
		_spec.SetField(exampostmapping.FieldDeletedDate, field.TypeString, value)
	}
	if epmu.mutation.DeletedDateCleared() {
		_spec.ClearField(exampostmapping.FieldDeletedDate, field.TypeString)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, epmu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{exampostmapping.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	epmu.mutation.done = true
	return n, nil
}

// ExamPostMappingUpdateOne is the builder for updating a single ExamPostMapping entity.
type ExamPostMappingUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ExamPostMappingMutation
}

// SetExamCode sets the "ExamCode" field.
func (epmuo *ExamPostMappingUpdateOne) SetExamCode(i int64) *ExamPostMappingUpdateOne {
	epmuo.mutation.ResetExamCode()
	epmuo.mutation.SetExamCode(i)
	return epmuo
}

// SetNillableExamCode sets the "ExamCode" field if the given value is not nil.
func (epmuo *ExamPostMappingUpdateOne) SetNillableExamCode(i *int64) *ExamPostMappingUpdateOne {
	if i != nil {
		epmuo.SetExamCode(*i)
	}
	return epmuo
}

// AddExamCode adds i to the "ExamCode" field.
func (epmuo *ExamPostMappingUpdateOne) AddExamCode(i int64) *ExamPostMappingUpdateOne {
	epmuo.mutation.AddExamCode(i)
	return epmuo
}

// ClearExamCode clears the value of the "ExamCode" field.
func (epmuo *ExamPostMappingUpdateOne) ClearExamCode() *ExamPostMappingUpdateOne {
	epmuo.mutation.ClearExamCode()
	return epmuo
}

// SetExamShortDescription sets the "ExamShortDescription" field.
func (epmuo *ExamPostMappingUpdateOne) SetExamShortDescription(s string) *ExamPostMappingUpdateOne {
	epmuo.mutation.SetExamShortDescription(s)
	return epmuo
}

// SetNillableExamShortDescription sets the "ExamShortDescription" field if the given value is not nil.
func (epmuo *ExamPostMappingUpdateOne) SetNillableExamShortDescription(s *string) *ExamPostMappingUpdateOne {
	if s != nil {
		epmuo.SetExamShortDescription(*s)
	}
	return epmuo
}

// ClearExamShortDescription clears the value of the "ExamShortDescription" field.
func (epmuo *ExamPostMappingUpdateOne) ClearExamShortDescription() *ExamPostMappingUpdateOne {
	epmuo.mutation.ClearExamShortDescription()
	return epmuo
}

// SetPostType sets the "PostType" field.
func (epmuo *ExamPostMappingUpdateOne) SetPostType(i int) *ExamPostMappingUpdateOne {
	epmuo.mutation.ResetPostType()
	epmuo.mutation.SetPostType(i)
	return epmuo
}

// SetNillablePostType sets the "PostType" field if the given value is not nil.
func (epmuo *ExamPostMappingUpdateOne) SetNillablePostType(i *int) *ExamPostMappingUpdateOne {
	if i != nil {
		epmuo.SetPostType(*i)
	}
	return epmuo
}

// AddPostType adds i to the "PostType" field.
func (epmuo *ExamPostMappingUpdateOne) AddPostType(i int) *ExamPostMappingUpdateOne {
	epmuo.mutation.AddPostType(i)
	return epmuo
}

// ClearPostType clears the value of the "PostType" field.
func (epmuo *ExamPostMappingUpdateOne) ClearPostType() *ExamPostMappingUpdateOne {
	epmuo.mutation.ClearPostType()
	return epmuo
}

// SetPostTypeDescription sets the "PostTypeDescription" field.
func (epmuo *ExamPostMappingUpdateOne) SetPostTypeDescription(s string) *ExamPostMappingUpdateOne {
	epmuo.mutation.SetPostTypeDescription(s)
	return epmuo
}

// SetNillablePostTypeDescription sets the "PostTypeDescription" field if the given value is not nil.
func (epmuo *ExamPostMappingUpdateOne) SetNillablePostTypeDescription(s *string) *ExamPostMappingUpdateOne {
	if s != nil {
		epmuo.SetPostTypeDescription(*s)
	}
	return epmuo
}

// ClearPostTypeDescription clears the value of the "PostTypeDescription" field.
func (epmuo *ExamPostMappingUpdateOne) ClearPostTypeDescription() *ExamPostMappingUpdateOne {
	epmuo.mutation.ClearPostTypeDescription()
	return epmuo
}

// SetFromPostCode sets the "FromPostCode" field.
func (epmuo *ExamPostMappingUpdateOne) SetFromPostCode(s string) *ExamPostMappingUpdateOne {
	epmuo.mutation.SetFromPostCode(s)
	return epmuo
}

// SetNillableFromPostCode sets the "FromPostCode" field if the given value is not nil.
func (epmuo *ExamPostMappingUpdateOne) SetNillableFromPostCode(s *string) *ExamPostMappingUpdateOne {
	if s != nil {
		epmuo.SetFromPostCode(*s)
	}
	return epmuo
}

// ClearFromPostCode clears the value of the "FromPostCode" field.
func (epmuo *ExamPostMappingUpdateOne) ClearFromPostCode() *ExamPostMappingUpdateOne {
	epmuo.mutation.ClearFromPostCode()
	return epmuo
}

// SetFromPostDescription sets the "FromPostDescription" field.
func (epmuo *ExamPostMappingUpdateOne) SetFromPostDescription(s string) *ExamPostMappingUpdateOne {
	epmuo.mutation.SetFromPostDescription(s)
	return epmuo
}

// SetNillableFromPostDescription sets the "FromPostDescription" field if the given value is not nil.
func (epmuo *ExamPostMappingUpdateOne) SetNillableFromPostDescription(s *string) *ExamPostMappingUpdateOne {
	if s != nil {
		epmuo.SetFromPostDescription(*s)
	}
	return epmuo
}

// ClearFromPostDescription clears the value of the "FromPostDescription" field.
func (epmuo *ExamPostMappingUpdateOne) ClearFromPostDescription() *ExamPostMappingUpdateOne {
	epmuo.mutation.ClearFromPostDescription()
	return epmuo
}

// SetToPostCode sets the "ToPostCode" field.
func (epmuo *ExamPostMappingUpdateOne) SetToPostCode(s string) *ExamPostMappingUpdateOne {
	epmuo.mutation.SetToPostCode(s)
	return epmuo
}

// SetNillableToPostCode sets the "ToPostCode" field if the given value is not nil.
func (epmuo *ExamPostMappingUpdateOne) SetNillableToPostCode(s *string) *ExamPostMappingUpdateOne {
	if s != nil {
		epmuo.SetToPostCode(*s)
	}
	return epmuo
}

// ClearToPostCode clears the value of the "ToPostCode" field.
func (epmuo *ExamPostMappingUpdateOne) ClearToPostCode() *ExamPostMappingUpdateOne {
	epmuo.mutation.ClearToPostCode()
	return epmuo
}

// SetToPostDescription sets the "ToPostDescription" field.
func (epmuo *ExamPostMappingUpdateOne) SetToPostDescription(s string) *ExamPostMappingUpdateOne {
	epmuo.mutation.SetToPostDescription(s)
	return epmuo
}

// SetNillableToPostDescription sets the "ToPostDescription" field if the given value is not nil.
func (epmuo *ExamPostMappingUpdateOne) SetNillableToPostDescription(s *string) *ExamPostMappingUpdateOne {
	if s != nil {
		epmuo.SetToPostDescription(*s)
	}
	return epmuo
}

// ClearToPostDescription clears the value of the "ToPostDescription" field.
func (epmuo *ExamPostMappingUpdateOne) ClearToPostDescription() *ExamPostMappingUpdateOne {
	epmuo.mutation.ClearToPostDescription()
	return epmuo
}

// SetAgeCriteria sets the "AgeCriteria" field.
func (epmuo *ExamPostMappingUpdateOne) SetAgeCriteria(i int) *ExamPostMappingUpdateOne {
	epmuo.mutation.ResetAgeCriteria()
	epmuo.mutation.SetAgeCriteria(i)
	return epmuo
}

// SetNillableAgeCriteria sets the "AgeCriteria" field if the given value is not nil.
func (epmuo *ExamPostMappingUpdateOne) SetNillableAgeCriteria(i *int) *ExamPostMappingUpdateOne {
	if i != nil {
		epmuo.SetAgeCriteria(*i)
	}
	return epmuo
}

// AddAgeCriteria adds i to the "AgeCriteria" field.
func (epmuo *ExamPostMappingUpdateOne) AddAgeCriteria(i int) *ExamPostMappingUpdateOne {
	epmuo.mutation.AddAgeCriteria(i)
	return epmuo
}

// ClearAgeCriteria clears the value of the "AgeCriteria" field.
func (epmuo *ExamPostMappingUpdateOne) ClearAgeCriteria() *ExamPostMappingUpdateOne {
	epmuo.mutation.ClearAgeCriteria()
	return epmuo
}

// SetServiceCriteria sets the "ServiceCriteria" field.
func (epmuo *ExamPostMappingUpdateOne) SetServiceCriteria(i int) *ExamPostMappingUpdateOne {
	epmuo.mutation.ResetServiceCriteria()
	epmuo.mutation.SetServiceCriteria(i)
	return epmuo
}

// SetNillableServiceCriteria sets the "ServiceCriteria" field if the given value is not nil.
func (epmuo *ExamPostMappingUpdateOne) SetNillableServiceCriteria(i *int) *ExamPostMappingUpdateOne {
	if i != nil {
		epmuo.SetServiceCriteria(*i)
	}
	return epmuo
}

// AddServiceCriteria adds i to the "ServiceCriteria" field.
func (epmuo *ExamPostMappingUpdateOne) AddServiceCriteria(i int) *ExamPostMappingUpdateOne {
	epmuo.mutation.AddServiceCriteria(i)
	return epmuo
}

// ClearServiceCriteria clears the value of the "ServiceCriteria" field.
func (epmuo *ExamPostMappingUpdateOne) ClearServiceCriteria() *ExamPostMappingUpdateOne {
	epmuo.mutation.ClearServiceCriteria()
	return epmuo
}

// SetEducationCode sets the "EducationCode" field.
func (epmuo *ExamPostMappingUpdateOne) SetEducationCode(i int32) *ExamPostMappingUpdateOne {
	epmuo.mutation.ResetEducationCode()
	epmuo.mutation.SetEducationCode(i)
	return epmuo
}

// SetNillableEducationCode sets the "EducationCode" field if the given value is not nil.
func (epmuo *ExamPostMappingUpdateOne) SetNillableEducationCode(i *int32) *ExamPostMappingUpdateOne {
	if i != nil {
		epmuo.SetEducationCode(*i)
	}
	return epmuo
}

// AddEducationCode adds i to the "EducationCode" field.
func (epmuo *ExamPostMappingUpdateOne) AddEducationCode(i int32) *ExamPostMappingUpdateOne {
	epmuo.mutation.AddEducationCode(i)
	return epmuo
}

// ClearEducationCode clears the value of the "EducationCode" field.
func (epmuo *ExamPostMappingUpdateOne) ClearEducationCode() *ExamPostMappingUpdateOne {
	epmuo.mutation.ClearEducationCode()
	return epmuo
}

// SetEducationDescription sets the "EducationDescription" field.
func (epmuo *ExamPostMappingUpdateOne) SetEducationDescription(s string) *ExamPostMappingUpdateOne {
	epmuo.mutation.SetEducationDescription(s)
	return epmuo
}

// SetNillableEducationDescription sets the "EducationDescription" field if the given value is not nil.
func (epmuo *ExamPostMappingUpdateOne) SetNillableEducationDescription(s *string) *ExamPostMappingUpdateOne {
	if s != nil {
		epmuo.SetEducationDescription(*s)
	}
	return epmuo
}

// ClearEducationDescription clears the value of the "EducationDescription" field.
func (epmuo *ExamPostMappingUpdateOne) ClearEducationDescription() *ExamPostMappingUpdateOne {
	epmuo.mutation.ClearEducationDescription()
	return epmuo
}

// SetOrderNumber sets the "OrderNumber" field.
func (epmuo *ExamPostMappingUpdateOne) SetOrderNumber(s string) *ExamPostMappingUpdateOne {
	epmuo.mutation.SetOrderNumber(s)
	return epmuo
}

// SetNillableOrderNumber sets the "OrderNumber" field if the given value is not nil.
func (epmuo *ExamPostMappingUpdateOne) SetNillableOrderNumber(s *string) *ExamPostMappingUpdateOne {
	if s != nil {
		epmuo.SetOrderNumber(*s)
	}
	return epmuo
}

// ClearOrderNumber clears the value of the "OrderNumber" field.
func (epmuo *ExamPostMappingUpdateOne) ClearOrderNumber() *ExamPostMappingUpdateOne {
	epmuo.mutation.ClearOrderNumber()
	return epmuo
}

// SetCreatedById sets the "CreatedById" field.
func (epmuo *ExamPostMappingUpdateOne) SetCreatedById(i int64) *ExamPostMappingUpdateOne {
	epmuo.mutation.ResetCreatedById()
	epmuo.mutation.SetCreatedById(i)
	return epmuo
}

// SetNillableCreatedById sets the "CreatedById" field if the given value is not nil.
func (epmuo *ExamPostMappingUpdateOne) SetNillableCreatedById(i *int64) *ExamPostMappingUpdateOne {
	if i != nil {
		epmuo.SetCreatedById(*i)
	}
	return epmuo
}

// AddCreatedById adds i to the "CreatedById" field.
func (epmuo *ExamPostMappingUpdateOne) AddCreatedById(i int64) *ExamPostMappingUpdateOne {
	epmuo.mutation.AddCreatedById(i)
	return epmuo
}

// ClearCreatedById clears the value of the "CreatedById" field.
func (epmuo *ExamPostMappingUpdateOne) ClearCreatedById() *ExamPostMappingUpdateOne {
	epmuo.mutation.ClearCreatedById()
	return epmuo
}

// SetCreatedByUserName sets the "CreatedByUserName" field.
func (epmuo *ExamPostMappingUpdateOne) SetCreatedByUserName(s string) *ExamPostMappingUpdateOne {
	epmuo.mutation.SetCreatedByUserName(s)
	return epmuo
}

// SetNillableCreatedByUserName sets the "CreatedByUserName" field if the given value is not nil.
func (epmuo *ExamPostMappingUpdateOne) SetNillableCreatedByUserName(s *string) *ExamPostMappingUpdateOne {
	if s != nil {
		epmuo.SetCreatedByUserName(*s)
	}
	return epmuo
}

// ClearCreatedByUserName clears the value of the "CreatedByUserName" field.
func (epmuo *ExamPostMappingUpdateOne) ClearCreatedByUserName() *ExamPostMappingUpdateOne {
	epmuo.mutation.ClearCreatedByUserName()
	return epmuo
}

// SetCreatedByEmployeeId sets the "CreatedByEmployeeId" field.
func (epmuo *ExamPostMappingUpdateOne) SetCreatedByEmployeeId(s string) *ExamPostMappingUpdateOne {
	epmuo.mutation.SetCreatedByEmployeeId(s)
	return epmuo
}

// SetNillableCreatedByEmployeeId sets the "CreatedByEmployeeId" field if the given value is not nil.
func (epmuo *ExamPostMappingUpdateOne) SetNillableCreatedByEmployeeId(s *string) *ExamPostMappingUpdateOne {
	if s != nil {
		epmuo.SetCreatedByEmployeeId(*s)
	}
	return epmuo
}

// ClearCreatedByEmployeeId clears the value of the "CreatedByEmployeeId" field.
func (epmuo *ExamPostMappingUpdateOne) ClearCreatedByEmployeeId() *ExamPostMappingUpdateOne {
	epmuo.mutation.ClearCreatedByEmployeeId()
	return epmuo
}

// SetCreatedByDesignation sets the "CreatedByDesignation" field.
func (epmuo *ExamPostMappingUpdateOne) SetCreatedByDesignation(s string) *ExamPostMappingUpdateOne {
	epmuo.mutation.SetCreatedByDesignation(s)
	return epmuo
}

// SetNillableCreatedByDesignation sets the "CreatedByDesignation" field if the given value is not nil.
func (epmuo *ExamPostMappingUpdateOne) SetNillableCreatedByDesignation(s *string) *ExamPostMappingUpdateOne {
	if s != nil {
		epmuo.SetCreatedByDesignation(*s)
	}
	return epmuo
}

// ClearCreatedByDesignation clears the value of the "CreatedByDesignation" field.
func (epmuo *ExamPostMappingUpdateOne) ClearCreatedByDesignation() *ExamPostMappingUpdateOne {
	epmuo.mutation.ClearCreatedByDesignation()
	return epmuo
}

// SetCreatedDate sets the "CreatedDate" field.
func (epmuo *ExamPostMappingUpdateOne) SetCreatedDate(s string) *ExamPostMappingUpdateOne {
	epmuo.mutation.SetCreatedDate(s)
	return epmuo
}

// SetNillableCreatedDate sets the "CreatedDate" field if the given value is not nil.
func (epmuo *ExamPostMappingUpdateOne) SetNillableCreatedDate(s *string) *ExamPostMappingUpdateOne {
	if s != nil {
		epmuo.SetCreatedDate(*s)
	}
	return epmuo
}

// ClearCreatedDate clears the value of the "CreatedDate" field.
func (epmuo *ExamPostMappingUpdateOne) ClearCreatedDate() *ExamPostMappingUpdateOne {
	epmuo.mutation.ClearCreatedDate()
	return epmuo
}

// SetVerifiedById sets the "VerifiedById" field.
func (epmuo *ExamPostMappingUpdateOne) SetVerifiedById(i int64) *ExamPostMappingUpdateOne {
	epmuo.mutation.ResetVerifiedById()
	epmuo.mutation.SetVerifiedById(i)
	return epmuo
}

// SetNillableVerifiedById sets the "VerifiedById" field if the given value is not nil.
func (epmuo *ExamPostMappingUpdateOne) SetNillableVerifiedById(i *int64) *ExamPostMappingUpdateOne {
	if i != nil {
		epmuo.SetVerifiedById(*i)
	}
	return epmuo
}

// AddVerifiedById adds i to the "VerifiedById" field.
func (epmuo *ExamPostMappingUpdateOne) AddVerifiedById(i int64) *ExamPostMappingUpdateOne {
	epmuo.mutation.AddVerifiedById(i)
	return epmuo
}

// ClearVerifiedById clears the value of the "VerifiedById" field.
func (epmuo *ExamPostMappingUpdateOne) ClearVerifiedById() *ExamPostMappingUpdateOne {
	epmuo.mutation.ClearVerifiedById()
	return epmuo
}

// SetVerifiedByUserName sets the "VerifiedByUserName" field.
func (epmuo *ExamPostMappingUpdateOne) SetVerifiedByUserName(s string) *ExamPostMappingUpdateOne {
	epmuo.mutation.SetVerifiedByUserName(s)
	return epmuo
}

// SetNillableVerifiedByUserName sets the "VerifiedByUserName" field if the given value is not nil.
func (epmuo *ExamPostMappingUpdateOne) SetNillableVerifiedByUserName(s *string) *ExamPostMappingUpdateOne {
	if s != nil {
		epmuo.SetVerifiedByUserName(*s)
	}
	return epmuo
}

// ClearVerifiedByUserName clears the value of the "VerifiedByUserName" field.
func (epmuo *ExamPostMappingUpdateOne) ClearVerifiedByUserName() *ExamPostMappingUpdateOne {
	epmuo.mutation.ClearVerifiedByUserName()
	return epmuo
}

// SetVerifiedByEmployeeId sets the "VerifiedByEmployeeId" field.
func (epmuo *ExamPostMappingUpdateOne) SetVerifiedByEmployeeId(s string) *ExamPostMappingUpdateOne {
	epmuo.mutation.SetVerifiedByEmployeeId(s)
	return epmuo
}

// SetNillableVerifiedByEmployeeId sets the "VerifiedByEmployeeId" field if the given value is not nil.
func (epmuo *ExamPostMappingUpdateOne) SetNillableVerifiedByEmployeeId(s *string) *ExamPostMappingUpdateOne {
	if s != nil {
		epmuo.SetVerifiedByEmployeeId(*s)
	}
	return epmuo
}

// ClearVerifiedByEmployeeId clears the value of the "VerifiedByEmployeeId" field.
func (epmuo *ExamPostMappingUpdateOne) ClearVerifiedByEmployeeId() *ExamPostMappingUpdateOne {
	epmuo.mutation.ClearVerifiedByEmployeeId()
	return epmuo
}

// SetVerifiedByDesignation sets the "VerifiedByDesignation" field.
func (epmuo *ExamPostMappingUpdateOne) SetVerifiedByDesignation(s string) *ExamPostMappingUpdateOne {
	epmuo.mutation.SetVerifiedByDesignation(s)
	return epmuo
}

// SetNillableVerifiedByDesignation sets the "VerifiedByDesignation" field if the given value is not nil.
func (epmuo *ExamPostMappingUpdateOne) SetNillableVerifiedByDesignation(s *string) *ExamPostMappingUpdateOne {
	if s != nil {
		epmuo.SetVerifiedByDesignation(*s)
	}
	return epmuo
}

// ClearVerifiedByDesignation clears the value of the "VerifiedByDesignation" field.
func (epmuo *ExamPostMappingUpdateOne) ClearVerifiedByDesignation() *ExamPostMappingUpdateOne {
	epmuo.mutation.ClearVerifiedByDesignation()
	return epmuo
}

// SetVerifiedDate sets the "VerifiedDate" field.
func (epmuo *ExamPostMappingUpdateOne) SetVerifiedDate(s string) *ExamPostMappingUpdateOne {
	epmuo.mutation.SetVerifiedDate(s)
	return epmuo
}

// SetNillableVerifiedDate sets the "VerifiedDate" field if the given value is not nil.
func (epmuo *ExamPostMappingUpdateOne) SetNillableVerifiedDate(s *string) *ExamPostMappingUpdateOne {
	if s != nil {
		epmuo.SetVerifiedDate(*s)
	}
	return epmuo
}

// ClearVerifiedDate clears the value of the "VerifiedDate" field.
func (epmuo *ExamPostMappingUpdateOne) ClearVerifiedDate() *ExamPostMappingUpdateOne {
	epmuo.mutation.ClearVerifiedDate()
	return epmuo
}

// SetStatus sets the "Status" field.
func (epmuo *ExamPostMappingUpdateOne) SetStatus(s string) *ExamPostMappingUpdateOne {
	epmuo.mutation.SetStatus(s)
	return epmuo
}

// SetNillableStatus sets the "Status" field if the given value is not nil.
func (epmuo *ExamPostMappingUpdateOne) SetNillableStatus(s *string) *ExamPostMappingUpdateOne {
	if s != nil {
		epmuo.SetStatus(*s)
	}
	return epmuo
}

// ClearStatus clears the value of the "Status" field.
func (epmuo *ExamPostMappingUpdateOne) ClearStatus() *ExamPostMappingUpdateOne {
	epmuo.mutation.ClearStatus()
	return epmuo
}

// SetDeletedById sets the "DeletedById" field.
func (epmuo *ExamPostMappingUpdateOne) SetDeletedById(i int64) *ExamPostMappingUpdateOne {
	epmuo.mutation.ResetDeletedById()
	epmuo.mutation.SetDeletedById(i)
	return epmuo
}

// SetNillableDeletedById sets the "DeletedById" field if the given value is not nil.
func (epmuo *ExamPostMappingUpdateOne) SetNillableDeletedById(i *int64) *ExamPostMappingUpdateOne {
	if i != nil {
		epmuo.SetDeletedById(*i)
	}
	return epmuo
}

// AddDeletedById adds i to the "DeletedById" field.
func (epmuo *ExamPostMappingUpdateOne) AddDeletedById(i int64) *ExamPostMappingUpdateOne {
	epmuo.mutation.AddDeletedById(i)
	return epmuo
}

// ClearDeletedById clears the value of the "DeletedById" field.
func (epmuo *ExamPostMappingUpdateOne) ClearDeletedById() *ExamPostMappingUpdateOne {
	epmuo.mutation.ClearDeletedById()
	return epmuo
}

// SetDeletedByUserName sets the "DeletedByUserName" field.
func (epmuo *ExamPostMappingUpdateOne) SetDeletedByUserName(s string) *ExamPostMappingUpdateOne {
	epmuo.mutation.SetDeletedByUserName(s)
	return epmuo
}

// SetNillableDeletedByUserName sets the "DeletedByUserName" field if the given value is not nil.
func (epmuo *ExamPostMappingUpdateOne) SetNillableDeletedByUserName(s *string) *ExamPostMappingUpdateOne {
	if s != nil {
		epmuo.SetDeletedByUserName(*s)
	}
	return epmuo
}

// ClearDeletedByUserName clears the value of the "DeletedByUserName" field.
func (epmuo *ExamPostMappingUpdateOne) ClearDeletedByUserName() *ExamPostMappingUpdateOne {
	epmuo.mutation.ClearDeletedByUserName()
	return epmuo
}

// SetDeletedByEmployeeId sets the "DeletedByEmployeeId" field.
func (epmuo *ExamPostMappingUpdateOne) SetDeletedByEmployeeId(s string) *ExamPostMappingUpdateOne {
	epmuo.mutation.SetDeletedByEmployeeId(s)
	return epmuo
}

// SetNillableDeletedByEmployeeId sets the "DeletedByEmployeeId" field if the given value is not nil.
func (epmuo *ExamPostMappingUpdateOne) SetNillableDeletedByEmployeeId(s *string) *ExamPostMappingUpdateOne {
	if s != nil {
		epmuo.SetDeletedByEmployeeId(*s)
	}
	return epmuo
}

// ClearDeletedByEmployeeId clears the value of the "DeletedByEmployeeId" field.
func (epmuo *ExamPostMappingUpdateOne) ClearDeletedByEmployeeId() *ExamPostMappingUpdateOne {
	epmuo.mutation.ClearDeletedByEmployeeId()
	return epmuo
}

// SetDeletedByDesignation sets the "DeletedByDesignation" field.
func (epmuo *ExamPostMappingUpdateOne) SetDeletedByDesignation(s string) *ExamPostMappingUpdateOne {
	epmuo.mutation.SetDeletedByDesignation(s)
	return epmuo
}

// SetNillableDeletedByDesignation sets the "DeletedByDesignation" field if the given value is not nil.
func (epmuo *ExamPostMappingUpdateOne) SetNillableDeletedByDesignation(s *string) *ExamPostMappingUpdateOne {
	if s != nil {
		epmuo.SetDeletedByDesignation(*s)
	}
	return epmuo
}

// ClearDeletedByDesignation clears the value of the "DeletedByDesignation" field.
func (epmuo *ExamPostMappingUpdateOne) ClearDeletedByDesignation() *ExamPostMappingUpdateOne {
	epmuo.mutation.ClearDeletedByDesignation()
	return epmuo
}

// SetDeletedDate sets the "DeletedDate" field.
func (epmuo *ExamPostMappingUpdateOne) SetDeletedDate(s string) *ExamPostMappingUpdateOne {
	epmuo.mutation.SetDeletedDate(s)
	return epmuo
}

// SetNillableDeletedDate sets the "DeletedDate" field if the given value is not nil.
func (epmuo *ExamPostMappingUpdateOne) SetNillableDeletedDate(s *string) *ExamPostMappingUpdateOne {
	if s != nil {
		epmuo.SetDeletedDate(*s)
	}
	return epmuo
}

// ClearDeletedDate clears the value of the "DeletedDate" field.
func (epmuo *ExamPostMappingUpdateOne) ClearDeletedDate() *ExamPostMappingUpdateOne {
	epmuo.mutation.ClearDeletedDate()
	return epmuo
}

// Mutation returns the ExamPostMappingMutation object of the builder.
func (epmuo *ExamPostMappingUpdateOne) Mutation() *ExamPostMappingMutation {
	return epmuo.mutation
}

// Where appends a list predicates to the ExamPostMappingUpdate builder.
func (epmuo *ExamPostMappingUpdateOne) Where(ps ...predicate.ExamPostMapping) *ExamPostMappingUpdateOne {
	epmuo.mutation.Where(ps...)
	return epmuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (epmuo *ExamPostMappingUpdateOne) Select(field string, fields ...string) *ExamPostMappingUpdateOne {
	epmuo.fields = append([]string{field}, fields...)
	return epmuo
}

// Save executes the query and returns the updated ExamPostMapping entity.
func (epmuo *ExamPostMappingUpdateOne) Save(ctx context.Context) (*ExamPostMapping, error) {
	return withHooks(ctx, epmuo.sqlSave, epmuo.mutation, epmuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (epmuo *ExamPostMappingUpdateOne) SaveX(ctx context.Context) *ExamPostMapping {
	node, err := epmuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (epmuo *ExamPostMappingUpdateOne) Exec(ctx context.Context) error {
	_, err := epmuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (epmuo *ExamPostMappingUpdateOne) ExecX(ctx context.Context) {
	if err := epmuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (epmuo *ExamPostMappingUpdateOne) sqlSave(ctx context.Context) (_node *ExamPostMapping, err error) {
	_spec := sqlgraph.NewUpdateSpec(exampostmapping.Table, exampostmapping.Columns, sqlgraph.NewFieldSpec(exampostmapping.FieldID, field.TypeInt))
	id, ok := epmuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ExamPostMapping.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := epmuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, exampostmapping.FieldID)
		for _, f := range fields {
			if !exampostmapping.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != exampostmapping.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := epmuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := epmuo.mutation.ExamCode(); ok {
		_spec.SetField(exampostmapping.FieldExamCode, field.TypeInt64, value)
	}
	if value, ok := epmuo.mutation.AddedExamCode(); ok {
		_spec.AddField(exampostmapping.FieldExamCode, field.TypeInt64, value)
	}
	if epmuo.mutation.ExamCodeCleared() {
		_spec.ClearField(exampostmapping.FieldExamCode, field.TypeInt64)
	}
	if value, ok := epmuo.mutation.ExamShortDescription(); ok {
		_spec.SetField(exampostmapping.FieldExamShortDescription, field.TypeString, value)
	}
	if epmuo.mutation.ExamShortDescriptionCleared() {
		_spec.ClearField(exampostmapping.FieldExamShortDescription, field.TypeString)
	}
	if value, ok := epmuo.mutation.PostType(); ok {
		_spec.SetField(exampostmapping.FieldPostType, field.TypeInt, value)
	}
	if value, ok := epmuo.mutation.AddedPostType(); ok {
		_spec.AddField(exampostmapping.FieldPostType, field.TypeInt, value)
	}
	if epmuo.mutation.PostTypeCleared() {
		_spec.ClearField(exampostmapping.FieldPostType, field.TypeInt)
	}
	if value, ok := epmuo.mutation.PostTypeDescription(); ok {
		_spec.SetField(exampostmapping.FieldPostTypeDescription, field.TypeString, value)
	}
	if epmuo.mutation.PostTypeDescriptionCleared() {
		_spec.ClearField(exampostmapping.FieldPostTypeDescription, field.TypeString)
	}
	if value, ok := epmuo.mutation.FromPostCode(); ok {
		_spec.SetField(exampostmapping.FieldFromPostCode, field.TypeString, value)
	}
	if epmuo.mutation.FromPostCodeCleared() {
		_spec.ClearField(exampostmapping.FieldFromPostCode, field.TypeString)
	}
	if value, ok := epmuo.mutation.FromPostDescription(); ok {
		_spec.SetField(exampostmapping.FieldFromPostDescription, field.TypeString, value)
	}
	if epmuo.mutation.FromPostDescriptionCleared() {
		_spec.ClearField(exampostmapping.FieldFromPostDescription, field.TypeString)
	}
	if value, ok := epmuo.mutation.ToPostCode(); ok {
		_spec.SetField(exampostmapping.FieldToPostCode, field.TypeString, value)
	}
	if epmuo.mutation.ToPostCodeCleared() {
		_spec.ClearField(exampostmapping.FieldToPostCode, field.TypeString)
	}
	if value, ok := epmuo.mutation.ToPostDescription(); ok {
		_spec.SetField(exampostmapping.FieldToPostDescription, field.TypeString, value)
	}
	if epmuo.mutation.ToPostDescriptionCleared() {
		_spec.ClearField(exampostmapping.FieldToPostDescription, field.TypeString)
	}
	if value, ok := epmuo.mutation.AgeCriteria(); ok {
		_spec.SetField(exampostmapping.FieldAgeCriteria, field.TypeInt, value)
	}
	if value, ok := epmuo.mutation.AddedAgeCriteria(); ok {
		_spec.AddField(exampostmapping.FieldAgeCriteria, field.TypeInt, value)
	}
	if epmuo.mutation.AgeCriteriaCleared() {
		_spec.ClearField(exampostmapping.FieldAgeCriteria, field.TypeInt)
	}
	if value, ok := epmuo.mutation.ServiceCriteria(); ok {
		_spec.SetField(exampostmapping.FieldServiceCriteria, field.TypeInt, value)
	}
	if value, ok := epmuo.mutation.AddedServiceCriteria(); ok {
		_spec.AddField(exampostmapping.FieldServiceCriteria, field.TypeInt, value)
	}
	if epmuo.mutation.ServiceCriteriaCleared() {
		_spec.ClearField(exampostmapping.FieldServiceCriteria, field.TypeInt)
	}
	if value, ok := epmuo.mutation.EducationCode(); ok {
		_spec.SetField(exampostmapping.FieldEducationCode, field.TypeInt32, value)
	}
	if value, ok := epmuo.mutation.AddedEducationCode(); ok {
		_spec.AddField(exampostmapping.FieldEducationCode, field.TypeInt32, value)
	}
	if epmuo.mutation.EducationCodeCleared() {
		_spec.ClearField(exampostmapping.FieldEducationCode, field.TypeInt32)
	}
	if value, ok := epmuo.mutation.EducationDescription(); ok {
		_spec.SetField(exampostmapping.FieldEducationDescription, field.TypeString, value)
	}
	if epmuo.mutation.EducationDescriptionCleared() {
		_spec.ClearField(exampostmapping.FieldEducationDescription, field.TypeString)
	}
	if value, ok := epmuo.mutation.OrderNumber(); ok {
		_spec.SetField(exampostmapping.FieldOrderNumber, field.TypeString, value)
	}
	if epmuo.mutation.OrderNumberCleared() {
		_spec.ClearField(exampostmapping.FieldOrderNumber, field.TypeString)
	}
	if value, ok := epmuo.mutation.CreatedById(); ok {
		_spec.SetField(exampostmapping.FieldCreatedById, field.TypeInt64, value)
	}
	if value, ok := epmuo.mutation.AddedCreatedById(); ok {
		_spec.AddField(exampostmapping.FieldCreatedById, field.TypeInt64, value)
	}
	if epmuo.mutation.CreatedByIdCleared() {
		_spec.ClearField(exampostmapping.FieldCreatedById, field.TypeInt64)
	}
	if value, ok := epmuo.mutation.CreatedByUserName(); ok {
		_spec.SetField(exampostmapping.FieldCreatedByUserName, field.TypeString, value)
	}
	if epmuo.mutation.CreatedByUserNameCleared() {
		_spec.ClearField(exampostmapping.FieldCreatedByUserName, field.TypeString)
	}
	if value, ok := epmuo.mutation.CreatedByEmployeeId(); ok {
		_spec.SetField(exampostmapping.FieldCreatedByEmployeeId, field.TypeString, value)
	}
	if epmuo.mutation.CreatedByEmployeeIdCleared() {
		_spec.ClearField(exampostmapping.FieldCreatedByEmployeeId, field.TypeString)
	}
	if value, ok := epmuo.mutation.CreatedByDesignation(); ok {
		_spec.SetField(exampostmapping.FieldCreatedByDesignation, field.TypeString, value)
	}
	if epmuo.mutation.CreatedByDesignationCleared() {
		_spec.ClearField(exampostmapping.FieldCreatedByDesignation, field.TypeString)
	}
	if value, ok := epmuo.mutation.CreatedDate(); ok {
		_spec.SetField(exampostmapping.FieldCreatedDate, field.TypeString, value)
	}
	if epmuo.mutation.CreatedDateCleared() {
		_spec.ClearField(exampostmapping.FieldCreatedDate, field.TypeString)
	}
	if value, ok := epmuo.mutation.VerifiedById(); ok {
		_spec.SetField(exampostmapping.FieldVerifiedById, field.TypeInt64, value)
	}
	if value, ok := epmuo.mutation.AddedVerifiedById(); ok {
		_spec.AddField(exampostmapping.FieldVerifiedById, field.TypeInt64, value)
	}
	if epmuo.mutation.VerifiedByIdCleared() {
		_spec.ClearField(exampostmapping.FieldVerifiedById, field.TypeInt64)
	}
	if value, ok := epmuo.mutation.VerifiedByUserName(); ok {
		_spec.SetField(exampostmapping.FieldVerifiedByUserName, field.TypeString, value)
	}
	if epmuo.mutation.VerifiedByUserNameCleared() {
		_spec.ClearField(exampostmapping.FieldVerifiedByUserName, field.TypeString)
	}
	if value, ok := epmuo.mutation.VerifiedByEmployeeId(); ok {
		_spec.SetField(exampostmapping.FieldVerifiedByEmployeeId, field.TypeString, value)
	}
	if epmuo.mutation.VerifiedByEmployeeIdCleared() {
		_spec.ClearField(exampostmapping.FieldVerifiedByEmployeeId, field.TypeString)
	}
	if value, ok := epmuo.mutation.VerifiedByDesignation(); ok {
		_spec.SetField(exampostmapping.FieldVerifiedByDesignation, field.TypeString, value)
	}
	if epmuo.mutation.VerifiedByDesignationCleared() {
		_spec.ClearField(exampostmapping.FieldVerifiedByDesignation, field.TypeString)
	}
	if value, ok := epmuo.mutation.VerifiedDate(); ok {
		_spec.SetField(exampostmapping.FieldVerifiedDate, field.TypeString, value)
	}
	if epmuo.mutation.VerifiedDateCleared() {
		_spec.ClearField(exampostmapping.FieldVerifiedDate, field.TypeString)
	}
	if value, ok := epmuo.mutation.Status(); ok {
		_spec.SetField(exampostmapping.FieldStatus, field.TypeString, value)
	}
	if epmuo.mutation.StatusCleared() {
		_spec.ClearField(exampostmapping.FieldStatus, field.TypeString)
	}
	if value, ok := epmuo.mutation.DeletedById(); ok {
		_spec.SetField(exampostmapping.FieldDeletedById, field.TypeInt64, value)
	}
	if value, ok := epmuo.mutation.AddedDeletedById(); ok {
		_spec.AddField(exampostmapping.FieldDeletedById, field.TypeInt64, value)
	}
	if epmuo.mutation.DeletedByIdCleared() {
		_spec.ClearField(exampostmapping.FieldDeletedById, field.TypeInt64)
	}
	if value, ok := epmuo.mutation.DeletedByUserName(); ok {
		_spec.SetField(exampostmapping.FieldDeletedByUserName, field.TypeString, value)
	}
	if epmuo.mutation.DeletedByUserNameCleared() {
		_spec.ClearField(exampostmapping.FieldDeletedByUserName, field.TypeString)
	}
	if value, ok := epmuo.mutation.DeletedByEmployeeId(); ok {
		_spec.SetField(exampostmapping.FieldDeletedByEmployeeId, field.TypeString, value)
	}
	if epmuo.mutation.DeletedByEmployeeIdCleared() {
		_spec.ClearField(exampostmapping.FieldDeletedByEmployeeId, field.TypeString)
	}
	if value, ok := epmuo.mutation.DeletedByDesignation(); ok {
		_spec.SetField(exampostmapping.FieldDeletedByDesignation, field.TypeString, value)
	}
	if epmuo.mutation.DeletedByDesignationCleared() {
		_spec.ClearField(exampostmapping.FieldDeletedByDesignation, field.TypeString)
	}
	if value, ok := epmuo.mutation.DeletedDate(); ok {
		_spec.SetField(exampostmapping.FieldDeletedDate, field.TypeString, value)
	}
	if epmuo.mutation.DeletedDateCleared() {
		_spec.ClearField(exampostmapping.FieldDeletedDate, field.TypeString)
	}
	_node = &ExamPostMapping{config: epmuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, epmuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{exampostmapping.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	epmuo.mutation.done = true
	return _node, nil
}
