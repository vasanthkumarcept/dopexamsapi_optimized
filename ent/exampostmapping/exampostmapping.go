// Code generated by ent, DO NOT EDIT.

package exampostmapping

import (
	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the exampostmapping type in the database.
	Label = "exam_post_mapping"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "UniqueID"
	// FieldExamCode holds the string denoting the examcode field in the database.
	FieldExamCode = "exam_code"
	// FieldExamShortDescription holds the string denoting the examshortdescription field in the database.
	FieldExamShortDescription = "exam_short_description"
	// FieldPostType holds the string denoting the posttype field in the database.
	FieldPostType = "post_type"
	// FieldPostTypeDescription holds the string denoting the posttypedescription field in the database.
	FieldPostTypeDescription = "post_type_description"
	// FieldFromPostCode holds the string denoting the frompostcode field in the database.
	FieldFromPostCode = "from_post_code"
	// FieldFromPostDescription holds the string denoting the frompostdescription field in the database.
	FieldFromPostDescription = "from_post_description"
	// FieldToPostCode holds the string denoting the topostcode field in the database.
	FieldToPostCode = "to_post_code"
	// FieldToPostDescription holds the string denoting the topostdescription field in the database.
	FieldToPostDescription = "to_post_description"
	// FieldAgeCriteria holds the string denoting the agecriteria field in the database.
	FieldAgeCriteria = "age_criteria"
	// FieldServiceCriteria holds the string denoting the servicecriteria field in the database.
	FieldServiceCriteria = "service_criteria"
	// FieldEducationCode holds the string denoting the educationcode field in the database.
	FieldEducationCode = "education_code"
	// FieldEducationDescription holds the string denoting the educationdescription field in the database.
	FieldEducationDescription = "education_description"
	// FieldOrderNumber holds the string denoting the ordernumber field in the database.
	FieldOrderNumber = "order_number"
	// FieldCreatedById holds the string denoting the createdbyid field in the database.
	FieldCreatedById = "created_by_id"
	// FieldCreatedByUserName holds the string denoting the createdbyusername field in the database.
	FieldCreatedByUserName = "created_by_user_name"
	// FieldCreatedByEmployeeId holds the string denoting the createdbyemployeeid field in the database.
	FieldCreatedByEmployeeId = "created_by_employee_id"
	// FieldCreatedByDesignation holds the string denoting the createdbydesignation field in the database.
	FieldCreatedByDesignation = "created_by_designation"
	// FieldCreatedDate holds the string denoting the createddate field in the database.
	FieldCreatedDate = "created_date"
	// FieldVerifiedById holds the string denoting the verifiedbyid field in the database.
	FieldVerifiedById = "verified_by_id"
	// FieldVerifiedByUserName holds the string denoting the verifiedbyusername field in the database.
	FieldVerifiedByUserName = "verified_by_user_name"
	// FieldVerifiedByEmployeeId holds the string denoting the verifiedbyemployeeid field in the database.
	FieldVerifiedByEmployeeId = "verified_by_employee_id"
	// FieldVerifiedByDesignation holds the string denoting the verifiedbydesignation field in the database.
	FieldVerifiedByDesignation = "verified_by_designation"
	// FieldVerifiedDate holds the string denoting the verifieddate field in the database.
	FieldVerifiedDate = "verified_date"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldDeletedById holds the string denoting the deletedbyid field in the database.
	FieldDeletedById = "deleted_by_id"
	// FieldDeletedByUserName holds the string denoting the deletedbyusername field in the database.
	FieldDeletedByUserName = "deleted_by_user_name"
	// FieldDeletedByEmployeeId holds the string denoting the deletedbyemployeeid field in the database.
	FieldDeletedByEmployeeId = "deleted_by_employee_id"
	// FieldDeletedByDesignation holds the string denoting the deletedbydesignation field in the database.
	FieldDeletedByDesignation = "deleted_by_designation"
	// FieldDeletedDate holds the string denoting the deleteddate field in the database.
	FieldDeletedDate = "deleted_date"
	// Table holds the table name of the exampostmapping in the database.
	Table = "ExamPostMapping"
)

// Columns holds all SQL columns for exampostmapping fields.
var Columns = []string{
	FieldID,
	FieldExamCode,
	FieldExamShortDescription,
	FieldPostType,
	FieldPostTypeDescription,
	FieldFromPostCode,
	FieldFromPostDescription,
	FieldToPostCode,
	FieldToPostDescription,
	FieldAgeCriteria,
	FieldServiceCriteria,
	FieldEducationCode,
	FieldEducationDescription,
	FieldOrderNumber,
	FieldCreatedById,
	FieldCreatedByUserName,
	FieldCreatedByEmployeeId,
	FieldCreatedByDesignation,
	FieldCreatedDate,
	FieldVerifiedById,
	FieldVerifiedByUserName,
	FieldVerifiedByEmployeeId,
	FieldVerifiedByDesignation,
	FieldVerifiedDate,
	FieldStatus,
	FieldDeletedById,
	FieldDeletedByUserName,
	FieldDeletedByEmployeeId,
	FieldDeletedByDesignation,
	FieldDeletedDate,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the ExamPostMapping queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByExamCode orders the results by the ExamCode field.
func ByExamCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExamCode, opts...).ToFunc()
}

// ByExamShortDescription orders the results by the ExamShortDescription field.
func ByExamShortDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExamShortDescription, opts...).ToFunc()
}

// ByPostType orders the results by the PostType field.
func ByPostType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPostType, opts...).ToFunc()
}

// ByPostTypeDescription orders the results by the PostTypeDescription field.
func ByPostTypeDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPostTypeDescription, opts...).ToFunc()
}

// ByFromPostCode orders the results by the FromPostCode field.
func ByFromPostCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFromPostCode, opts...).ToFunc()
}

// ByFromPostDescription orders the results by the FromPostDescription field.
func ByFromPostDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFromPostDescription, opts...).ToFunc()
}

// ByToPostCode orders the results by the ToPostCode field.
func ByToPostCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldToPostCode, opts...).ToFunc()
}

// ByToPostDescription orders the results by the ToPostDescription field.
func ByToPostDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldToPostDescription, opts...).ToFunc()
}

// ByAgeCriteria orders the results by the AgeCriteria field.
func ByAgeCriteria(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAgeCriteria, opts...).ToFunc()
}

// ByServiceCriteria orders the results by the ServiceCriteria field.
func ByServiceCriteria(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldServiceCriteria, opts...).ToFunc()
}

// ByEducationCode orders the results by the EducationCode field.
func ByEducationCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEducationCode, opts...).ToFunc()
}

// ByEducationDescription orders the results by the EducationDescription field.
func ByEducationDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEducationDescription, opts...).ToFunc()
}

// ByOrderNumber orders the results by the OrderNumber field.
func ByOrderNumber(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOrderNumber, opts...).ToFunc()
}

// ByCreatedById orders the results by the CreatedById field.
func ByCreatedById(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedById, opts...).ToFunc()
}

// ByCreatedByUserName orders the results by the CreatedByUserName field.
func ByCreatedByUserName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedByUserName, opts...).ToFunc()
}

// ByCreatedByEmployeeId orders the results by the CreatedByEmployeeId field.
func ByCreatedByEmployeeId(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedByEmployeeId, opts...).ToFunc()
}

// ByCreatedByDesignation orders the results by the CreatedByDesignation field.
func ByCreatedByDesignation(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedByDesignation, opts...).ToFunc()
}

// ByCreatedDate orders the results by the CreatedDate field.
func ByCreatedDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedDate, opts...).ToFunc()
}

// ByVerifiedById orders the results by the VerifiedById field.
func ByVerifiedById(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVerifiedById, opts...).ToFunc()
}

// ByVerifiedByUserName orders the results by the VerifiedByUserName field.
func ByVerifiedByUserName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVerifiedByUserName, opts...).ToFunc()
}

// ByVerifiedByEmployeeId orders the results by the VerifiedByEmployeeId field.
func ByVerifiedByEmployeeId(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVerifiedByEmployeeId, opts...).ToFunc()
}

// ByVerifiedByDesignation orders the results by the VerifiedByDesignation field.
func ByVerifiedByDesignation(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVerifiedByDesignation, opts...).ToFunc()
}

// ByVerifiedDate orders the results by the VerifiedDate field.
func ByVerifiedDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVerifiedDate, opts...).ToFunc()
}

// ByStatus orders the results by the Status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByDeletedById orders the results by the DeletedById field.
func ByDeletedById(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedById, opts...).ToFunc()
}

// ByDeletedByUserName orders the results by the DeletedByUserName field.
func ByDeletedByUserName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedByUserName, opts...).ToFunc()
}

// ByDeletedByEmployeeId orders the results by the DeletedByEmployeeId field.
func ByDeletedByEmployeeId(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedByEmployeeId, opts...).ToFunc()
}

// ByDeletedByDesignation orders the results by the DeletedByDesignation field.
func ByDeletedByDesignation(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedByDesignation, opts...).ToFunc()
}

// ByDeletedDate orders the results by the DeletedDate field.
func ByDeletedDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedDate, opts...).ToFunc()
}
