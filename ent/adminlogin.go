// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"recruit/ent/adminlogin"
	"recruit/ent/rolemaster"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// AdminLogin is the model entity for the AdminLogin schema.
type AdminLogin struct {
	config `json:"-"`
	// ID of the ent.
	ID int32 `json:"id,omitempty"`
	// RoleUserCode holds the value of the "RoleUserCode" field.
	RoleUserCode int32 `json:"RoleUserCode,omitempty"`
	// RoleName holds the value of the "RoleName" field.
	RoleName string `json:"RoleName,omitempty"`
	// CreatedDate holds the value of the "CreatedDate" field.
	CreatedDate time.Time `json:"CreatedDate,omitempty"`
	// Status holds the value of the "Status" field.
	Status string `json:"Status,omitempty"`
	// EmployeedID holds the value of the "EmployeedID" field.
	EmployeedID int32 `json:"EmployeedID,omitempty"`
	// EmployeeName holds the value of the "EmployeeName" field.
	EmployeeName string `json:"EmployeeName,omitempty"`
	// Emailid holds the value of the "Emailid" field.
	Emailid string `json:"Emailid,omitempty"`
	// MobileNumber holds the value of the "MobileNumber" field.
	MobileNumber int64 `json:"MobileNumber,omitempty"`
	// Username holds the value of the "Username" field.
	Username string `json:"Username,omitempty"`
	// OTP holds the value of the "OTP" field.
	OTP int32 `json:"OTP,omitempty"`
	// Password holds the value of the "Password" field.
	Password string `json:"Password,omitempty"`
	// VerifyRemarks holds the value of the "VerifyRemarks" field.
	VerifyRemarks *string `json:"VerifyRemarks,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AdminLoginQuery when eager-loading is set.
	Edges        AdminLoginEdges `json:"edges"`
	selectValues sql.SelectValues
}

// AdminLoginEdges holds the relations/edges for other nodes in the graph.
type AdminLoginEdges struct {
	// RoleMaster holds the value of the role_master edge.
	RoleMaster *RoleMaster `json:"role_master,omitempty"`
	// LogData holds the value of the LogData edge.
	LogData []*Logs `json:"LogData,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// RoleMasterOrErr returns the RoleMaster value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AdminLoginEdges) RoleMasterOrErr() (*RoleMaster, error) {
	if e.loadedTypes[0] {
		if e.RoleMaster == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: rolemaster.Label}
		}
		return e.RoleMaster, nil
	}
	return nil, &NotLoadedError{edge: "role_master"}
}

// LogDataOrErr returns the LogData value or an error if the edge
// was not loaded in eager-loading.
func (e AdminLoginEdges) LogDataOrErr() ([]*Logs, error) {
	if e.loadedTypes[1] {
		return e.LogData, nil
	}
	return nil, &NotLoadedError{edge: "LogData"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AdminLogin) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case adminlogin.FieldID, adminlogin.FieldRoleUserCode, adminlogin.FieldEmployeedID, adminlogin.FieldMobileNumber, adminlogin.FieldOTP:
			values[i] = new(sql.NullInt64)
		case adminlogin.FieldRoleName, adminlogin.FieldStatus, adminlogin.FieldEmployeeName, adminlogin.FieldEmailid, adminlogin.FieldUsername, adminlogin.FieldPassword, adminlogin.FieldVerifyRemarks:
			values[i] = new(sql.NullString)
		case adminlogin.FieldCreatedDate:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AdminLogin fields.
func (al *AdminLogin) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case adminlogin.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			al.ID = int32(value.Int64)
		case adminlogin.FieldRoleUserCode:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field RoleUserCode", values[i])
			} else if value.Valid {
				al.RoleUserCode = int32(value.Int64)
			}
		case adminlogin.FieldRoleName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field RoleName", values[i])
			} else if value.Valid {
				al.RoleName = value.String
			}
		case adminlogin.FieldCreatedDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field CreatedDate", values[i])
			} else if value.Valid {
				al.CreatedDate = value.Time
			}
		case adminlogin.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Status", values[i])
			} else if value.Valid {
				al.Status = value.String
			}
		case adminlogin.FieldEmployeedID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field EmployeedID", values[i])
			} else if value.Valid {
				al.EmployeedID = int32(value.Int64)
			}
		case adminlogin.FieldEmployeeName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field EmployeeName", values[i])
			} else if value.Valid {
				al.EmployeeName = value.String
			}
		case adminlogin.FieldEmailid:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Emailid", values[i])
			} else if value.Valid {
				al.Emailid = value.String
			}
		case adminlogin.FieldMobileNumber:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field MobileNumber", values[i])
			} else if value.Valid {
				al.MobileNumber = value.Int64
			}
		case adminlogin.FieldUsername:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Username", values[i])
			} else if value.Valid {
				al.Username = value.String
			}
		case adminlogin.FieldOTP:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field OTP", values[i])
			} else if value.Valid {
				al.OTP = int32(value.Int64)
			}
		case adminlogin.FieldPassword:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Password", values[i])
			} else if value.Valid {
				al.Password = value.String
			}
		case adminlogin.FieldVerifyRemarks:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field VerifyRemarks", values[i])
			} else if value.Valid {
				al.VerifyRemarks = new(string)
				*al.VerifyRemarks = value.String
			}
		default:
			al.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the AdminLogin.
// This includes values selected through modifiers, order, etc.
func (al *AdminLogin) Value(name string) (ent.Value, error) {
	return al.selectValues.Get(name)
}

// QueryRoleMaster queries the "role_master" edge of the AdminLogin entity.
func (al *AdminLogin) QueryRoleMaster() *RoleMasterQuery {
	return NewAdminLoginClient(al.config).QueryRoleMaster(al)
}

// QueryLogData queries the "LogData" edge of the AdminLogin entity.
func (al *AdminLogin) QueryLogData() *LogsQuery {
	return NewAdminLoginClient(al.config).QueryLogData(al)
}

// Update returns a builder for updating this AdminLogin.
// Note that you need to call AdminLogin.Unwrap() before calling this method if this AdminLogin
// was returned from a transaction, and the transaction was committed or rolled back.
func (al *AdminLogin) Update() *AdminLoginUpdateOne {
	return NewAdminLoginClient(al.config).UpdateOne(al)
}

// Unwrap unwraps the AdminLogin entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (al *AdminLogin) Unwrap() *AdminLogin {
	_tx, ok := al.config.driver.(*txDriver)
	if !ok {
		panic("ent: AdminLogin is not a transactional entity")
	}
	al.config.driver = _tx.drv
	return al
}

// String implements the fmt.Stringer.
func (al *AdminLogin) String() string {
	var builder strings.Builder
	builder.WriteString("AdminLogin(")
	builder.WriteString(fmt.Sprintf("id=%v, ", al.ID))
	builder.WriteString("RoleUserCode=")
	builder.WriteString(fmt.Sprintf("%v", al.RoleUserCode))
	builder.WriteString(", ")
	builder.WriteString("RoleName=")
	builder.WriteString(al.RoleName)
	builder.WriteString(", ")
	builder.WriteString("CreatedDate=")
	builder.WriteString(al.CreatedDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("Status=")
	builder.WriteString(al.Status)
	builder.WriteString(", ")
	builder.WriteString("EmployeedID=")
	builder.WriteString(fmt.Sprintf("%v", al.EmployeedID))
	builder.WriteString(", ")
	builder.WriteString("EmployeeName=")
	builder.WriteString(al.EmployeeName)
	builder.WriteString(", ")
	builder.WriteString("Emailid=")
	builder.WriteString(al.Emailid)
	builder.WriteString(", ")
	builder.WriteString("MobileNumber=")
	builder.WriteString(fmt.Sprintf("%v", al.MobileNumber))
	builder.WriteString(", ")
	builder.WriteString("Username=")
	builder.WriteString(al.Username)
	builder.WriteString(", ")
	builder.WriteString("OTP=")
	builder.WriteString(fmt.Sprintf("%v", al.OTP))
	builder.WriteString(", ")
	builder.WriteString("Password=")
	builder.WriteString(al.Password)
	builder.WriteString(", ")
	if v := al.VerifyRemarks; v != nil {
		builder.WriteString("VerifyRemarks=")
		builder.WriteString(*v)
	}
	builder.WriteByte(')')
	return builder.String()
}

// AdminLogins is a parsable slice of AdminLogin.
type AdminLogins []*AdminLogin
