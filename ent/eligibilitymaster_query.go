// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"
	"recruit/ent/eligibilitymaster"
	"recruit/ent/employeecategory"
	"recruit/ent/employeeposts"
	"recruit/ent/exam"
	"recruit/ent/exampapers"
	"recruit/ent/notification"
	"recruit/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// EligibilityMasterQuery is the builder for querying EligibilityMaster entities.
type EligibilityMasterQuery struct {
	config
	ctx                      *QueryContext
	order                    []eligibilitymaster.OrderOption
	inters                   []Interceptor
	predicates               []predicate.EligibilityMaster
	withNotifications        *NotificationQuery
	withCategoryEligibility  *EmployeeCategoryQuery
	withPostEligibility      *EmployeePostsQuery
	withExamPaperEligibility *ExamPapersQuery
	withExamEligibility      *ExamQuery
	withFKs                  bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the EligibilityMasterQuery builder.
func (emq *EligibilityMasterQuery) Where(ps ...predicate.EligibilityMaster) *EligibilityMasterQuery {
	emq.predicates = append(emq.predicates, ps...)
	return emq
}

// Limit the number of records to be returned by this query.
func (emq *EligibilityMasterQuery) Limit(limit int) *EligibilityMasterQuery {
	emq.ctx.Limit = &limit
	return emq
}

// Offset to start from.
func (emq *EligibilityMasterQuery) Offset(offset int) *EligibilityMasterQuery {
	emq.ctx.Offset = &offset
	return emq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (emq *EligibilityMasterQuery) Unique(unique bool) *EligibilityMasterQuery {
	emq.ctx.Unique = &unique
	return emq
}

// Order specifies how the records should be ordered.
func (emq *EligibilityMasterQuery) Order(o ...eligibilitymaster.OrderOption) *EligibilityMasterQuery {
	emq.order = append(emq.order, o...)
	return emq
}

// QueryNotifications chains the current query on the "Notifications" edge.
func (emq *EligibilityMasterQuery) QueryNotifications() *NotificationQuery {
	query := (&NotificationClient{config: emq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := emq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := emq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(eligibilitymaster.Table, eligibilitymaster.FieldID, selector),
			sqlgraph.To(notification.Table, notification.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, eligibilitymaster.NotificationsTable, eligibilitymaster.NotificationsColumn),
		)
		fromU = sqlgraph.SetNeighbors(emq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCategoryEligibility chains the current query on the "CategoryEligibility" edge.
func (emq *EligibilityMasterQuery) QueryCategoryEligibility() *EmployeeCategoryQuery {
	query := (&EmployeeCategoryClient{config: emq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := emq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := emq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(eligibilitymaster.Table, eligibilitymaster.FieldID, selector),
			sqlgraph.To(employeecategory.Table, employeecategory.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, eligibilitymaster.CategoryEligibilityTable, eligibilitymaster.CategoryEligibilityColumn),
		)
		fromU = sqlgraph.SetNeighbors(emq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryPostEligibility chains the current query on the "PostEligibility" edge.
func (emq *EligibilityMasterQuery) QueryPostEligibility() *EmployeePostsQuery {
	query := (&EmployeePostsClient{config: emq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := emq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := emq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(eligibilitymaster.Table, eligibilitymaster.FieldID, selector),
			sqlgraph.To(employeeposts.Table, employeeposts.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, eligibilitymaster.PostEligibilityTable, eligibilitymaster.PostEligibilityColumn),
		)
		fromU = sqlgraph.SetNeighbors(emq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryExamPaperEligibility chains the current query on the "ExamPaper_Eligibility" edge.
func (emq *EligibilityMasterQuery) QueryExamPaperEligibility() *ExamPapersQuery {
	query := (&ExamPapersClient{config: emq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := emq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := emq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(eligibilitymaster.Table, eligibilitymaster.FieldID, selector),
			sqlgraph.To(exampapers.Table, exampapers.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, eligibilitymaster.ExamPaperEligibilityTable, eligibilitymaster.ExamPaperEligibilityColumn),
		)
		fromU = sqlgraph.SetNeighbors(emq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryExamEligibility chains the current query on the "Exam_Eligibility" edge.
func (emq *EligibilityMasterQuery) QueryExamEligibility() *ExamQuery {
	query := (&ExamClient{config: emq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := emq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := emq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(eligibilitymaster.Table, eligibilitymaster.FieldID, selector),
			sqlgraph.To(exam.Table, exam.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, eligibilitymaster.ExamEligibilityTable, eligibilitymaster.ExamEligibilityColumn),
		)
		fromU = sqlgraph.SetNeighbors(emq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first EligibilityMaster entity from the query.
// Returns a *NotFoundError when no EligibilityMaster was found.
func (emq *EligibilityMasterQuery) First(ctx context.Context) (*EligibilityMaster, error) {
	nodes, err := emq.Limit(1).All(setContextOp(ctx, emq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{eligibilitymaster.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (emq *EligibilityMasterQuery) FirstX(ctx context.Context) *EligibilityMaster {
	node, err := emq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first EligibilityMaster ID from the query.
// Returns a *NotFoundError when no EligibilityMaster ID was found.
func (emq *EligibilityMasterQuery) FirstID(ctx context.Context) (id int32, err error) {
	var ids []int32
	if ids, err = emq.Limit(1).IDs(setContextOp(ctx, emq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{eligibilitymaster.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (emq *EligibilityMasterQuery) FirstIDX(ctx context.Context) int32 {
	id, err := emq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single EligibilityMaster entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one EligibilityMaster entity is found.
// Returns a *NotFoundError when no EligibilityMaster entities are found.
func (emq *EligibilityMasterQuery) Only(ctx context.Context) (*EligibilityMaster, error) {
	nodes, err := emq.Limit(2).All(setContextOp(ctx, emq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{eligibilitymaster.Label}
	default:
		return nil, &NotSingularError{eligibilitymaster.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (emq *EligibilityMasterQuery) OnlyX(ctx context.Context) *EligibilityMaster {
	node, err := emq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only EligibilityMaster ID in the query.
// Returns a *NotSingularError when more than one EligibilityMaster ID is found.
// Returns a *NotFoundError when no entities are found.
func (emq *EligibilityMasterQuery) OnlyID(ctx context.Context) (id int32, err error) {
	var ids []int32
	if ids, err = emq.Limit(2).IDs(setContextOp(ctx, emq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{eligibilitymaster.Label}
	default:
		err = &NotSingularError{eligibilitymaster.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (emq *EligibilityMasterQuery) OnlyIDX(ctx context.Context) int32 {
	id, err := emq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of EligibilityMasters.
func (emq *EligibilityMasterQuery) All(ctx context.Context) ([]*EligibilityMaster, error) {
	ctx = setContextOp(ctx, emq.ctx, "All")
	if err := emq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*EligibilityMaster, *EligibilityMasterQuery]()
	return withInterceptors[[]*EligibilityMaster](ctx, emq, qr, emq.inters)
}

// AllX is like All, but panics if an error occurs.
func (emq *EligibilityMasterQuery) AllX(ctx context.Context) []*EligibilityMaster {
	nodes, err := emq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of EligibilityMaster IDs.
func (emq *EligibilityMasterQuery) IDs(ctx context.Context) (ids []int32, err error) {
	if emq.ctx.Unique == nil && emq.path != nil {
		emq.Unique(true)
	}
	ctx = setContextOp(ctx, emq.ctx, "IDs")
	if err = emq.Select(eligibilitymaster.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (emq *EligibilityMasterQuery) IDsX(ctx context.Context) []int32 {
	ids, err := emq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (emq *EligibilityMasterQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, emq.ctx, "Count")
	if err := emq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, emq, querierCount[*EligibilityMasterQuery](), emq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (emq *EligibilityMasterQuery) CountX(ctx context.Context) int {
	count, err := emq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (emq *EligibilityMasterQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, emq.ctx, "Exist")
	switch _, err := emq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (emq *EligibilityMasterQuery) ExistX(ctx context.Context) bool {
	exist, err := emq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the EligibilityMasterQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (emq *EligibilityMasterQuery) Clone() *EligibilityMasterQuery {
	if emq == nil {
		return nil
	}
	return &EligibilityMasterQuery{
		config:                   emq.config,
		ctx:                      emq.ctx.Clone(),
		order:                    append([]eligibilitymaster.OrderOption{}, emq.order...),
		inters:                   append([]Interceptor{}, emq.inters...),
		predicates:               append([]predicate.EligibilityMaster{}, emq.predicates...),
		withNotifications:        emq.withNotifications.Clone(),
		withCategoryEligibility:  emq.withCategoryEligibility.Clone(),
		withPostEligibility:      emq.withPostEligibility.Clone(),
		withExamPaperEligibility: emq.withExamPaperEligibility.Clone(),
		withExamEligibility:      emq.withExamEligibility.Clone(),
		// clone intermediate query.
		sql:  emq.sql.Clone(),
		path: emq.path,
	}
}

// WithNotifications tells the query-builder to eager-load the nodes that are connected to
// the "Notifications" edge. The optional arguments are used to configure the query builder of the edge.
func (emq *EligibilityMasterQuery) WithNotifications(opts ...func(*NotificationQuery)) *EligibilityMasterQuery {
	query := (&NotificationClient{config: emq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	emq.withNotifications = query
	return emq
}

// WithCategoryEligibility tells the query-builder to eager-load the nodes that are connected to
// the "CategoryEligibility" edge. The optional arguments are used to configure the query builder of the edge.
func (emq *EligibilityMasterQuery) WithCategoryEligibility(opts ...func(*EmployeeCategoryQuery)) *EligibilityMasterQuery {
	query := (&EmployeeCategoryClient{config: emq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	emq.withCategoryEligibility = query
	return emq
}

// WithPostEligibility tells the query-builder to eager-load the nodes that are connected to
// the "PostEligibility" edge. The optional arguments are used to configure the query builder of the edge.
func (emq *EligibilityMasterQuery) WithPostEligibility(opts ...func(*EmployeePostsQuery)) *EligibilityMasterQuery {
	query := (&EmployeePostsClient{config: emq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	emq.withPostEligibility = query
	return emq
}

// WithExamPaperEligibility tells the query-builder to eager-load the nodes that are connected to
// the "ExamPaper_Eligibility" edge. The optional arguments are used to configure the query builder of the edge.
func (emq *EligibilityMasterQuery) WithExamPaperEligibility(opts ...func(*ExamPapersQuery)) *EligibilityMasterQuery {
	query := (&ExamPapersClient{config: emq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	emq.withExamPaperEligibility = query
	return emq
}

// WithExamEligibility tells the query-builder to eager-load the nodes that are connected to
// the "Exam_Eligibility" edge. The optional arguments are used to configure the query builder of the edge.
func (emq *EligibilityMasterQuery) WithExamEligibility(opts ...func(*ExamQuery)) *EligibilityMasterQuery {
	query := (&ExamClient{config: emq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	emq.withExamEligibility = query
	return emq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		ExamCode int32 `json:"ExamCode,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.EligibilityMaster.Query().
//		GroupBy(eligibilitymaster.FieldExamCode).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (emq *EligibilityMasterQuery) GroupBy(field string, fields ...string) *EligibilityMasterGroupBy {
	emq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &EligibilityMasterGroupBy{build: emq}
	grbuild.flds = &emq.ctx.Fields
	grbuild.label = eligibilitymaster.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		ExamCode int32 `json:"ExamCode,omitempty"`
//	}
//
//	client.EligibilityMaster.Query().
//		Select(eligibilitymaster.FieldExamCode).
//		Scan(ctx, &v)
func (emq *EligibilityMasterQuery) Select(fields ...string) *EligibilityMasterSelect {
	emq.ctx.Fields = append(emq.ctx.Fields, fields...)
	sbuild := &EligibilityMasterSelect{EligibilityMasterQuery: emq}
	sbuild.label = eligibilitymaster.Label
	sbuild.flds, sbuild.scan = &emq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a EligibilityMasterSelect configured with the given aggregations.
func (emq *EligibilityMasterQuery) Aggregate(fns ...AggregateFunc) *EligibilityMasterSelect {
	return emq.Select().Aggregate(fns...)
}

func (emq *EligibilityMasterQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range emq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, emq); err != nil {
				return err
			}
		}
	}
	for _, f := range emq.ctx.Fields {
		if !eligibilitymaster.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if emq.path != nil {
		prev, err := emq.path(ctx)
		if err != nil {
			return err
		}
		emq.sql = prev
	}
	return nil
}

func (emq *EligibilityMasterQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*EligibilityMaster, error) {
	var (
		nodes       = []*EligibilityMaster{}
		withFKs     = emq.withFKs
		_spec       = emq.querySpec()
		loadedTypes = [5]bool{
			emq.withNotifications != nil,
			emq.withCategoryEligibility != nil,
			emq.withPostEligibility != nil,
			emq.withExamPaperEligibility != nil,
			emq.withExamEligibility != nil,
		}
	)
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, eligibilitymaster.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*EligibilityMaster).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &EligibilityMaster{config: emq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, emq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := emq.withNotifications; query != nil {
		if err := emq.loadNotifications(ctx, query, nodes,
			func(n *EligibilityMaster) { n.Edges.Notifications = []*Notification{} },
			func(n *EligibilityMaster, e *Notification) { n.Edges.Notifications = append(n.Edges.Notifications, e) }); err != nil {
			return nil, err
		}
	}
	if query := emq.withCategoryEligibility; query != nil {
		if err := emq.loadCategoryEligibility(ctx, query, nodes,
			func(n *EligibilityMaster) { n.Edges.CategoryEligibility = []*EmployeeCategory{} },
			func(n *EligibilityMaster, e *EmployeeCategory) {
				n.Edges.CategoryEligibility = append(n.Edges.CategoryEligibility, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := emq.withPostEligibility; query != nil {
		if err := emq.loadPostEligibility(ctx, query, nodes,
			func(n *EligibilityMaster) { n.Edges.PostEligibility = []*EmployeePosts{} },
			func(n *EligibilityMaster, e *EmployeePosts) {
				n.Edges.PostEligibility = append(n.Edges.PostEligibility, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := emq.withExamPaperEligibility; query != nil {
		if err := emq.loadExamPaperEligibility(ctx, query, nodes, nil,
			func(n *EligibilityMaster, e *ExamPapers) { n.Edges.ExamPaperEligibility = e }); err != nil {
			return nil, err
		}
	}
	if query := emq.withExamEligibility; query != nil {
		if err := emq.loadExamEligibility(ctx, query, nodes, nil,
			func(n *EligibilityMaster, e *Exam) { n.Edges.ExamEligibility = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (emq *EligibilityMasterQuery) loadNotifications(ctx context.Context, query *NotificationQuery, nodes []*EligibilityMaster, init func(*EligibilityMaster), assign func(*EligibilityMaster, *Notification)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int32]*EligibilityMaster)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Notification(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(eligibilitymaster.NotificationsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.eligibility_master_notifications
		if fk == nil {
			return fmt.Errorf(`foreign-key "eligibility_master_notifications" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "eligibility_master_notifications" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (emq *EligibilityMasterQuery) loadCategoryEligibility(ctx context.Context, query *EmployeeCategoryQuery, nodes []*EligibilityMaster, init func(*EligibilityMaster), assign func(*EligibilityMaster, *EmployeeCategory)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int32]*EligibilityMaster)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.EmployeeCategory(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(eligibilitymaster.CategoryEligibilityColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.eligibility_master_category_eligibility
		if fk == nil {
			return fmt.Errorf(`foreign-key "eligibility_master_category_eligibility" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "eligibility_master_category_eligibility" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (emq *EligibilityMasterQuery) loadPostEligibility(ctx context.Context, query *EmployeePostsQuery, nodes []*EligibilityMaster, init func(*EligibilityMaster), assign func(*EligibilityMaster, *EmployeePosts)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int32]*EligibilityMaster)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.EmployeePosts(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(eligibilitymaster.PostEligibilityColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.eligibility_master_post_eligibility
		if fk == nil {
			return fmt.Errorf(`foreign-key "eligibility_master_post_eligibility" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "eligibility_master_post_eligibility" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (emq *EligibilityMasterQuery) loadExamPaperEligibility(ctx context.Context, query *ExamPapersQuery, nodes []*EligibilityMaster, init func(*EligibilityMaster), assign func(*EligibilityMaster, *ExamPapers)) error {
	ids := make([]int32, 0, len(nodes))
	nodeids := make(map[int32][]*EligibilityMaster)
	for i := range nodes {
		fk := nodes[i].PaperCode
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(exampapers.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "PaperCode" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (emq *EligibilityMasterQuery) loadExamEligibility(ctx context.Context, query *ExamQuery, nodes []*EligibilityMaster, init func(*EligibilityMaster), assign func(*EligibilityMaster, *Exam)) error {
	ids := make([]int32, 0, len(nodes))
	nodeids := make(map[int32][]*EligibilityMaster)
	for i := range nodes {
		fk := nodes[i].ExamCode
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(exam.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "ExamCode" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (emq *EligibilityMasterQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := emq.querySpec()
	_spec.Node.Columns = emq.ctx.Fields
	if len(emq.ctx.Fields) > 0 {
		_spec.Unique = emq.ctx.Unique != nil && *emq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, emq.driver, _spec)
}

func (emq *EligibilityMasterQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(eligibilitymaster.Table, eligibilitymaster.Columns, sqlgraph.NewFieldSpec(eligibilitymaster.FieldID, field.TypeInt32))
	_spec.From = emq.sql
	if unique := emq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if emq.path != nil {
		_spec.Unique = true
	}
	if fields := emq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, eligibilitymaster.FieldID)
		for i := range fields {
			if fields[i] != eligibilitymaster.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if emq.withExamPaperEligibility != nil {
			_spec.Node.AddColumnOnce(eligibilitymaster.FieldPaperCode)
		}
		if emq.withExamEligibility != nil {
			_spec.Node.AddColumnOnce(eligibilitymaster.FieldExamCode)
		}
	}
	if ps := emq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := emq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := emq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := emq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (emq *EligibilityMasterQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(emq.driver.Dialect())
	t1 := builder.Table(eligibilitymaster.Table)
	columns := emq.ctx.Fields
	if len(columns) == 0 {
		columns = eligibilitymaster.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if emq.sql != nil {
		selector = emq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if emq.ctx.Unique != nil && *emq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range emq.predicates {
		p(selector)
	}
	for _, p := range emq.order {
		p(selector)
	}
	if offset := emq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := emq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// EligibilityMasterGroupBy is the group-by builder for EligibilityMaster entities.
type EligibilityMasterGroupBy struct {
	selector
	build *EligibilityMasterQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (emgb *EligibilityMasterGroupBy) Aggregate(fns ...AggregateFunc) *EligibilityMasterGroupBy {
	emgb.fns = append(emgb.fns, fns...)
	return emgb
}

// Scan applies the selector query and scans the result into the given value.
func (emgb *EligibilityMasterGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, emgb.build.ctx, "GroupBy")
	if err := emgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*EligibilityMasterQuery, *EligibilityMasterGroupBy](ctx, emgb.build, emgb, emgb.build.inters, v)
}

func (emgb *EligibilityMasterGroupBy) sqlScan(ctx context.Context, root *EligibilityMasterQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(emgb.fns))
	for _, fn := range emgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*emgb.flds)+len(emgb.fns))
		for _, f := range *emgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*emgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := emgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// EligibilityMasterSelect is the builder for selecting fields of EligibilityMaster entities.
type EligibilityMasterSelect struct {
	*EligibilityMasterQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (ems *EligibilityMasterSelect) Aggregate(fns ...AggregateFunc) *EligibilityMasterSelect {
	ems.fns = append(ems.fns, fns...)
	return ems
}

// Scan applies the selector query and scans the result into the given value.
func (ems *EligibilityMasterSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ems.ctx, "Select")
	if err := ems.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*EligibilityMasterQuery, *EligibilityMasterSelect](ctx, ems.EligibilityMasterQuery, ems, ems.inters, v)
}

func (ems *EligibilityMasterSelect) sqlScan(ctx context.Context, root *EligibilityMasterQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(ems.fns))
	for _, fn := range ems.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*ems.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ems.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
