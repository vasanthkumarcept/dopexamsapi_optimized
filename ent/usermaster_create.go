// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"recruit/ent/employeemaster"
	"recruit/ent/exam_applications_gdspa"
	"recruit/ent/exam_applications_gdspm"
	"recruit/ent/exam_applications_ip"
	"recruit/ent/exam_applications_pmpa"
	"recruit/ent/exam_applications_ps"
	"recruit/ent/examnotifications"
	"recruit/ent/logs"
	"recruit/ent/rolemaster"
	"recruit/ent/usermaster"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserMasterCreate is the builder for creating a UserMaster entity.
type UserMasterCreate struct {
	config
	mutation *UserMasterMutation
	hooks    []Hook
}

// SetEmployeeID sets the "EmployeeID" field.
func (umc *UserMasterCreate) SetEmployeeID(i int64) *UserMasterCreate {
	umc.mutation.SetEmployeeID(i)
	return umc
}

// SetNillableEmployeeID sets the "EmployeeID" field if the given value is not nil.
func (umc *UserMasterCreate) SetNillableEmployeeID(i *int64) *UserMasterCreate {
	if i != nil {
		umc.SetEmployeeID(*i)
	}
	return umc
}

// SetEmployeeName sets the "EmployeeName" field.
func (umc *UserMasterCreate) SetEmployeeName(s string) *UserMasterCreate {
	umc.mutation.SetEmployeeName(s)
	return umc
}

// SetNillableEmployeeName sets the "EmployeeName" field if the given value is not nil.
func (umc *UserMasterCreate) SetNillableEmployeeName(s *string) *UserMasterCreate {
	if s != nil {
		umc.SetEmployeeName(*s)
	}
	return umc
}

// SetMobile sets the "Mobile" field.
func (umc *UserMasterCreate) SetMobile(s string) *UserMasterCreate {
	umc.mutation.SetMobile(s)
	return umc
}

// SetNillableMobile sets the "Mobile" field if the given value is not nil.
func (umc *UserMasterCreate) SetNillableMobile(s *string) *UserMasterCreate {
	if s != nil {
		umc.SetMobile(*s)
	}
	return umc
}

// SetEmailID sets the "EmailID" field.
func (umc *UserMasterCreate) SetEmailID(s string) *UserMasterCreate {
	umc.mutation.SetEmailID(s)
	return umc
}

// SetNillableEmailID sets the "EmailID" field if the given value is not nil.
func (umc *UserMasterCreate) SetNillableEmailID(s *string) *UserMasterCreate {
	if s != nil {
		umc.SetEmailID(*s)
	}
	return umc
}

// SetUserName sets the "UserName" field.
func (umc *UserMasterCreate) SetUserName(s string) *UserMasterCreate {
	umc.mutation.SetUserName(s)
	return umc
}

// SetNillableUserName sets the "UserName" field if the given value is not nil.
func (umc *UserMasterCreate) SetNillableUserName(s *string) *UserMasterCreate {
	if s != nil {
		umc.SetUserName(*s)
	}
	return umc
}

// SetPassword sets the "Password" field.
func (umc *UserMasterCreate) SetPassword(s string) *UserMasterCreate {
	umc.mutation.SetPassword(s)
	return umc
}

// SetNillablePassword sets the "Password" field if the given value is not nil.
func (umc *UserMasterCreate) SetNillablePassword(s *string) *UserMasterCreate {
	if s != nil {
		umc.SetPassword(*s)
	}
	return umc
}

// SetStatus sets the "Status" field.
func (umc *UserMasterCreate) SetStatus(b bool) *UserMasterCreate {
	umc.mutation.SetStatus(b)
	return umc
}

// SetNillableStatus sets the "Status" field if the given value is not nil.
func (umc *UserMasterCreate) SetNillableStatus(b *bool) *UserMasterCreate {
	if b != nil {
		umc.SetStatus(*b)
	}
	return umc
}

// SetStatuss sets the "Statuss" field.
func (umc *UserMasterCreate) SetStatuss(s string) *UserMasterCreate {
	umc.mutation.SetStatuss(s)
	return umc
}

// SetNillableStatuss sets the "Statuss" field if the given value is not nil.
func (umc *UserMasterCreate) SetNillableStatuss(s *string) *UserMasterCreate {
	if s != nil {
		umc.SetStatuss(*s)
	}
	return umc
}

// SetOTP sets the "OTP" field.
func (umc *UserMasterCreate) SetOTP(i int32) *UserMasterCreate {
	umc.mutation.SetOTP(i)
	return umc
}

// SetNillableOTP sets the "OTP" field if the given value is not nil.
func (umc *UserMasterCreate) SetNillableOTP(i *int32) *UserMasterCreate {
	if i != nil {
		umc.SetOTP(*i)
	}
	return umc
}

// SetOTPNew sets the "OTPNew" field.
func (umc *UserMasterCreate) SetOTPNew(i int32) *UserMasterCreate {
	umc.mutation.SetOTPNew(i)
	return umc
}

// SetNillableOTPNew sets the "OTPNew" field if the given value is not nil.
func (umc *UserMasterCreate) SetNillableOTPNew(i *int32) *UserMasterCreate {
	if i != nil {
		umc.SetOTPNew(*i)
	}
	return umc
}

// SetEmailOTPNew sets the "EmailOTPNew" field.
func (umc *UserMasterCreate) SetEmailOTPNew(i int32) *UserMasterCreate {
	umc.mutation.SetEmailOTPNew(i)
	return umc
}

// SetNillableEmailOTPNew sets the "EmailOTPNew" field if the given value is not nil.
func (umc *UserMasterCreate) SetNillableEmailOTPNew(i *int32) *UserMasterCreate {
	if i != nil {
		umc.SetEmailOTPNew(*i)
	}
	return umc
}

// SetOTPRemarks sets the "OTPRemarks" field.
func (umc *UserMasterCreate) SetOTPRemarks(s string) *UserMasterCreate {
	umc.mutation.SetOTPRemarks(s)
	return umc
}

// SetNillableOTPRemarks sets the "OTPRemarks" field if the given value is not nil.
func (umc *UserMasterCreate) SetNillableOTPRemarks(s *string) *UserMasterCreate {
	if s != nil {
		umc.SetOTPRemarks(*s)
	}
	return umc
}

// SetCreatedAt sets the "CreatedAt" field.
func (umc *UserMasterCreate) SetCreatedAt(t time.Time) *UserMasterCreate {
	umc.mutation.SetCreatedAt(t)
	return umc
}

// SetNillableCreatedAt sets the "CreatedAt" field if the given value is not nil.
func (umc *UserMasterCreate) SetNillableCreatedAt(t *time.Time) *UserMasterCreate {
	if t != nil {
		umc.SetCreatedAt(*t)
	}
	return umc
}

// SetOTPTriggeredTime sets the "OTPTriggeredTime" field.
func (umc *UserMasterCreate) SetOTPTriggeredTime(t time.Time) *UserMasterCreate {
	umc.mutation.SetOTPTriggeredTime(t)
	return umc
}

// SetNillableOTPTriggeredTime sets the "OTPTriggeredTime" field if the given value is not nil.
func (umc *UserMasterCreate) SetNillableOTPTriggeredTime(t *time.Time) *UserMasterCreate {
	if t != nil {
		umc.SetOTPTriggeredTime(*t)
	}
	return umc
}

// SetOTPSavedTime sets the "OTPSavedTime" field.
func (umc *UserMasterCreate) SetOTPSavedTime(t time.Time) *UserMasterCreate {
	umc.mutation.SetOTPSavedTime(t)
	return umc
}

// SetNillableOTPSavedTime sets the "OTPSavedTime" field if the given value is not nil.
func (umc *UserMasterCreate) SetNillableOTPSavedTime(t *time.Time) *UserMasterCreate {
	if t != nil {
		umc.SetOTPSavedTime(*t)
	}
	return umc
}

// SetOTPExpiryTime sets the "OTPExpiryTime" field.
func (umc *UserMasterCreate) SetOTPExpiryTime(t time.Time) *UserMasterCreate {
	umc.mutation.SetOTPExpiryTime(t)
	return umc
}

// SetNillableOTPExpiryTime sets the "OTPExpiryTime" field if the given value is not nil.
func (umc *UserMasterCreate) SetNillableOTPExpiryTime(t *time.Time) *UserMasterCreate {
	if t != nil {
		umc.SetOTPExpiryTime(*t)
	}
	return umc
}

// SetNewPasswordRequest sets the "NewPasswordRequest" field.
func (umc *UserMasterCreate) SetNewPasswordRequest(b bool) *UserMasterCreate {
	umc.mutation.SetNewPasswordRequest(b)
	return umc
}

// SetNillableNewPasswordRequest sets the "NewPasswordRequest" field if the given value is not nil.
func (umc *UserMasterCreate) SetNillableNewPasswordRequest(b *bool) *UserMasterCreate {
	if b != nil {
		umc.SetNewPasswordRequest(*b)
	}
	return umc
}

// SetEmailOTP sets the "EmailOTP" field.
func (umc *UserMasterCreate) SetEmailOTP(i int32) *UserMasterCreate {
	umc.mutation.SetEmailOTP(i)
	return umc
}

// SetNillableEmailOTP sets the "EmailOTP" field if the given value is not nil.
func (umc *UserMasterCreate) SetNillableEmailOTP(i *int32) *UserMasterCreate {
	if i != nil {
		umc.SetEmailOTP(*i)
	}
	return umc
}

// SetEmailOTPRemarks sets the "EmailOTPRemarks" field.
func (umc *UserMasterCreate) SetEmailOTPRemarks(s string) *UserMasterCreate {
	umc.mutation.SetEmailOTPRemarks(s)
	return umc
}

// SetNillableEmailOTPRemarks sets the "EmailOTPRemarks" field if the given value is not nil.
func (umc *UserMasterCreate) SetNillableEmailOTPRemarks(s *string) *UserMasterCreate {
	if s != nil {
		umc.SetEmailOTPRemarks(*s)
	}
	return umc
}

// SetEmailCreatedAt sets the "EmailCreatedAt" field.
func (umc *UserMasterCreate) SetEmailCreatedAt(t time.Time) *UserMasterCreate {
	umc.mutation.SetEmailCreatedAt(t)
	return umc
}

// SetNillableEmailCreatedAt sets the "EmailCreatedAt" field if the given value is not nil.
func (umc *UserMasterCreate) SetNillableEmailCreatedAt(t *time.Time) *UserMasterCreate {
	if t != nil {
		umc.SetEmailCreatedAt(*t)
	}
	return umc
}

// SetEmailOTPTriggeredTime sets the "EmailOTPTriggeredTime" field.
func (umc *UserMasterCreate) SetEmailOTPTriggeredTime(t time.Time) *UserMasterCreate {
	umc.mutation.SetEmailOTPTriggeredTime(t)
	return umc
}

// SetNillableEmailOTPTriggeredTime sets the "EmailOTPTriggeredTime" field if the given value is not nil.
func (umc *UserMasterCreate) SetNillableEmailOTPTriggeredTime(t *time.Time) *UserMasterCreate {
	if t != nil {
		umc.SetEmailOTPTriggeredTime(*t)
	}
	return umc
}

// SetEmailOTPSavedTime sets the "EmailOTPSavedTime" field.
func (umc *UserMasterCreate) SetEmailOTPSavedTime(t time.Time) *UserMasterCreate {
	umc.mutation.SetEmailOTPSavedTime(t)
	return umc
}

// SetNillableEmailOTPSavedTime sets the "EmailOTPSavedTime" field if the given value is not nil.
func (umc *UserMasterCreate) SetNillableEmailOTPSavedTime(t *time.Time) *UserMasterCreate {
	if t != nil {
		umc.SetEmailOTPSavedTime(*t)
	}
	return umc
}

// SetEmailOTPExpiryTime sets the "EmailOTPExpiryTime" field.
func (umc *UserMasterCreate) SetEmailOTPExpiryTime(t time.Time) *UserMasterCreate {
	umc.mutation.SetEmailOTPExpiryTime(t)
	return umc
}

// SetNillableEmailOTPExpiryTime sets the "EmailOTPExpiryTime" field if the given value is not nil.
func (umc *UserMasterCreate) SetNillableEmailOTPExpiryTime(t *time.Time) *UserMasterCreate {
	if t != nil {
		umc.SetEmailOTPExpiryTime(*t)
	}
	return umc
}

// SetEmailNewPasswordRequest sets the "EmailNewPasswordRequest" field.
func (umc *UserMasterCreate) SetEmailNewPasswordRequest(b bool) *UserMasterCreate {
	umc.mutation.SetEmailNewPasswordRequest(b)
	return umc
}

// SetNillableEmailNewPasswordRequest sets the "EmailNewPasswordRequest" field if the given value is not nil.
func (umc *UserMasterCreate) SetNillableEmailNewPasswordRequest(b *bool) *UserMasterCreate {
	if b != nil {
		umc.SetEmailNewPasswordRequest(*b)
	}
	return umc
}

// SetUidToken sets the "UidToken" field.
func (umc *UserMasterCreate) SetUidToken(s string) *UserMasterCreate {
	umc.mutation.SetUidToken(s)
	return umc
}

// SetNillableUidToken sets the "UidToken" field if the given value is not nil.
func (umc *UserMasterCreate) SetNillableUidToken(s *string) *UserMasterCreate {
	if s != nil {
		umc.SetUidToken(*s)
	}
	return umc
}

// SetCreatedById sets the "CreatedById" field.
func (umc *UserMasterCreate) SetCreatedById(i int64) *UserMasterCreate {
	umc.mutation.SetCreatedById(i)
	return umc
}

// SetNillableCreatedById sets the "CreatedById" field if the given value is not nil.
func (umc *UserMasterCreate) SetNillableCreatedById(i *int64) *UserMasterCreate {
	if i != nil {
		umc.SetCreatedById(*i)
	}
	return umc
}

// SetCreatedByEmployeeId sets the "CreatedByEmployeeId" field.
func (umc *UserMasterCreate) SetCreatedByEmployeeId(s string) *UserMasterCreate {
	umc.mutation.SetCreatedByEmployeeId(s)
	return umc
}

// SetNillableCreatedByEmployeeId sets the "CreatedByEmployeeId" field if the given value is not nil.
func (umc *UserMasterCreate) SetNillableCreatedByEmployeeId(s *string) *UserMasterCreate {
	if s != nil {
		umc.SetCreatedByEmployeeId(*s)
	}
	return umc
}

// SetCreatedByUserName sets the "CreatedByUserName" field.
func (umc *UserMasterCreate) SetCreatedByUserName(s string) *UserMasterCreate {
	umc.mutation.SetCreatedByUserName(s)
	return umc
}

// SetNillableCreatedByUserName sets the "CreatedByUserName" field if the given value is not nil.
func (umc *UserMasterCreate) SetNillableCreatedByUserName(s *string) *UserMasterCreate {
	if s != nil {
		umc.SetCreatedByUserName(*s)
	}
	return umc
}

// SetCreatedByDesignation sets the "CreatedByDesignation" field.
func (umc *UserMasterCreate) SetCreatedByDesignation(s string) *UserMasterCreate {
	umc.mutation.SetCreatedByDesignation(s)
	return umc
}

// SetNillableCreatedByDesignation sets the "CreatedByDesignation" field if the given value is not nil.
func (umc *UserMasterCreate) SetNillableCreatedByDesignation(s *string) *UserMasterCreate {
	if s != nil {
		umc.SetCreatedByDesignation(*s)
	}
	return umc
}

// SetCreatedDate sets the "CreatedDate" field.
func (umc *UserMasterCreate) SetCreatedDate(t time.Time) *UserMasterCreate {
	umc.mutation.SetCreatedDate(t)
	return umc
}

// SetNillableCreatedDate sets the "CreatedDate" field if the given value is not nil.
func (umc *UserMasterCreate) SetNillableCreatedDate(t *time.Time) *UserMasterCreate {
	if t != nil {
		umc.SetCreatedDate(*t)
	}
	return umc
}

// SetDeletedById sets the "DeletedById" field.
func (umc *UserMasterCreate) SetDeletedById(i int64) *UserMasterCreate {
	umc.mutation.SetDeletedById(i)
	return umc
}

// SetNillableDeletedById sets the "DeletedById" field if the given value is not nil.
func (umc *UserMasterCreate) SetNillableDeletedById(i *int64) *UserMasterCreate {
	if i != nil {
		umc.SetDeletedById(*i)
	}
	return umc
}

// SetDeletedByEmployeeId sets the "DeletedByEmployeeId" field.
func (umc *UserMasterCreate) SetDeletedByEmployeeId(s string) *UserMasterCreate {
	umc.mutation.SetDeletedByEmployeeId(s)
	return umc
}

// SetNillableDeletedByEmployeeId sets the "DeletedByEmployeeId" field if the given value is not nil.
func (umc *UserMasterCreate) SetNillableDeletedByEmployeeId(s *string) *UserMasterCreate {
	if s != nil {
		umc.SetDeletedByEmployeeId(*s)
	}
	return umc
}

// SetDeletedByUserName sets the "DeletedByUserName" field.
func (umc *UserMasterCreate) SetDeletedByUserName(s string) *UserMasterCreate {
	umc.mutation.SetDeletedByUserName(s)
	return umc
}

// SetNillableDeletedByUserName sets the "DeletedByUserName" field if the given value is not nil.
func (umc *UserMasterCreate) SetNillableDeletedByUserName(s *string) *UserMasterCreate {
	if s != nil {
		umc.SetDeletedByUserName(*s)
	}
	return umc
}

// SetDeletedByDesignation sets the "DeletedByDesignation" field.
func (umc *UserMasterCreate) SetDeletedByDesignation(s string) *UserMasterCreate {
	umc.mutation.SetDeletedByDesignation(s)
	return umc
}

// SetNillableDeletedByDesignation sets the "DeletedByDesignation" field if the given value is not nil.
func (umc *UserMasterCreate) SetNillableDeletedByDesignation(s *string) *UserMasterCreate {
	if s != nil {
		umc.SetDeletedByDesignation(*s)
	}
	return umc
}

// SetDeletedDate sets the "DeletedDate" field.
func (umc *UserMasterCreate) SetDeletedDate(t time.Time) *UserMasterCreate {
	umc.mutation.SetDeletedDate(t)
	return umc
}

// SetNillableDeletedDate sets the "DeletedDate" field if the given value is not nil.
func (umc *UserMasterCreate) SetNillableDeletedDate(t *time.Time) *UserMasterCreate {
	if t != nil {
		umc.SetDeletedDate(*t)
	}
	return umc
}

// SetFacilityID sets the "FacilityID" field.
func (umc *UserMasterCreate) SetFacilityID(s string) *UserMasterCreate {
	umc.mutation.SetFacilityID(s)
	return umc
}

// SetNillableFacilityID sets the "FacilityID" field if the given value is not nil.
func (umc *UserMasterCreate) SetNillableFacilityID(s *string) *UserMasterCreate {
	if s != nil {
		umc.SetFacilityID(*s)
	}
	return umc
}

// SetCircleFacilityId sets the "CircleFacilityId" field.
func (umc *UserMasterCreate) SetCircleFacilityId(s string) *UserMasterCreate {
	umc.mutation.SetCircleFacilityId(s)
	return umc
}

// SetNillableCircleFacilityId sets the "CircleFacilityId" field if the given value is not nil.
func (umc *UserMasterCreate) SetNillableCircleFacilityId(s *string) *UserMasterCreate {
	if s != nil {
		umc.SetCircleFacilityId(*s)
	}
	return umc
}

// SetCircleFacilityName sets the "CircleFacilityName" field.
func (umc *UserMasterCreate) SetCircleFacilityName(s string) *UserMasterCreate {
	umc.mutation.SetCircleFacilityName(s)
	return umc
}

// SetNillableCircleFacilityName sets the "CircleFacilityName" field if the given value is not nil.
func (umc *UserMasterCreate) SetNillableCircleFacilityName(s *string) *UserMasterCreate {
	if s != nil {
		umc.SetCircleFacilityName(*s)
	}
	return umc
}

// SetDesignation sets the "Designation" field.
func (umc *UserMasterCreate) SetDesignation(s string) *UserMasterCreate {
	umc.mutation.SetDesignation(s)
	return umc
}

// SetNillableDesignation sets the "Designation" field if the given value is not nil.
func (umc *UserMasterCreate) SetNillableDesignation(s *string) *UserMasterCreate {
	if s != nil {
		umc.SetDesignation(*s)
	}
	return umc
}

// SetRoleUserCode sets the "RoleUserCode" field.
func (umc *UserMasterCreate) SetRoleUserCode(i int32) *UserMasterCreate {
	umc.mutation.SetRoleUserCode(i)
	return umc
}

// SetNillableRoleUserCode sets the "RoleUserCode" field if the given value is not nil.
func (umc *UserMasterCreate) SetNillableRoleUserCode(i *int32) *UserMasterCreate {
	if i != nil {
		umc.SetRoleUserCode(*i)
	}
	return umc
}

// SetUpdatedby sets the "Updatedby" field.
func (umc *UserMasterCreate) SetUpdatedby(s string) *UserMasterCreate {
	umc.mutation.SetUpdatedby(s)
	return umc
}

// SetNillableUpdatedby sets the "Updatedby" field if the given value is not nil.
func (umc *UserMasterCreate) SetNillableUpdatedby(s *string) *UserMasterCreate {
	if s != nil {
		umc.SetUpdatedby(*s)
	}
	return umc
}

// SetUpdatedDate sets the "updatedDate" field.
func (umc *UserMasterCreate) SetUpdatedDate(t time.Time) *UserMasterCreate {
	umc.mutation.SetUpdatedDate(t)
	return umc
}

// SetNillableUpdatedDate sets the "updatedDate" field if the given value is not nil.
func (umc *UserMasterCreate) SetNillableUpdatedDate(t *time.Time) *UserMasterCreate {
	if t != nil {
		umc.SetUpdatedDate(*t)
	}
	return umc
}

// SetModifiedby sets the "Modifiedby" field.
func (umc *UserMasterCreate) SetModifiedby(s string) *UserMasterCreate {
	umc.mutation.SetModifiedby(s)
	return umc
}

// SetNillableModifiedby sets the "Modifiedby" field if the given value is not nil.
func (umc *UserMasterCreate) SetNillableModifiedby(s *string) *UserMasterCreate {
	if s != nil {
		umc.SetModifiedby(*s)
	}
	return umc
}

// SetModifiedDate sets the "ModifiedDate" field.
func (umc *UserMasterCreate) SetModifiedDate(t time.Time) *UserMasterCreate {
	umc.mutation.SetModifiedDate(t)
	return umc
}

// SetNillableModifiedDate sets the "ModifiedDate" field if the given value is not nil.
func (umc *UserMasterCreate) SetNillableModifiedDate(t *time.Time) *UserMasterCreate {
	if t != nil {
		umc.SetModifiedDate(*t)
	}
	return umc
}

// SetOperationstatus sets the "Operationstatus" field.
func (umc *UserMasterCreate) SetOperationstatus(s string) *UserMasterCreate {
	umc.mutation.SetOperationstatus(s)
	return umc
}

// SetNillableOperationstatus sets the "Operationstatus" field if the given value is not nil.
func (umc *UserMasterCreate) SetNillableOperationstatus(s *string) *UserMasterCreate {
	if s != nil {
		umc.SetOperationstatus(*s)
	}
	return umc
}

// SetExamCode sets the "ExamCode" field.
func (umc *UserMasterCreate) SetExamCode(i int32) *UserMasterCreate {
	umc.mutation.SetExamCode(i)
	return umc
}

// SetNillableExamCode sets the "ExamCode" field if the given value is not nil.
func (umc *UserMasterCreate) SetNillableExamCode(i *int32) *UserMasterCreate {
	if i != nil {
		umc.SetExamCode(*i)
	}
	return umc
}

// SetExamCodePS sets the "ExamCodePS" field.
func (umc *UserMasterCreate) SetExamCodePS(i int32) *UserMasterCreate {
	umc.mutation.SetExamCodePS(i)
	return umc
}

// SetNillableExamCodePS sets the "ExamCodePS" field if the given value is not nil.
func (umc *UserMasterCreate) SetNillableExamCodePS(i *int32) *UserMasterCreate {
	if i != nil {
		umc.SetExamCodePS(*i)
	}
	return umc
}

// SetGender sets the "Gender" field.
func (umc *UserMasterCreate) SetGender(u usermaster.Gender) *UserMasterCreate {
	umc.mutation.SetGender(u)
	return umc
}

// SetNillableGender sets the "Gender" field if the given value is not nil.
func (umc *UserMasterCreate) SetNillableGender(u *usermaster.Gender) *UserMasterCreate {
	if u != nil {
		umc.SetGender(*u)
	}
	return umc
}

// SetDOB sets the "DOB" field.
func (umc *UserMasterCreate) SetDOB(s string) *UserMasterCreate {
	umc.mutation.SetDOB(s)
	return umc
}

// SetNillableDOB sets the "DOB" field if the given value is not nil.
func (umc *UserMasterCreate) SetNillableDOB(s *string) *UserMasterCreate {
	if s != nil {
		umc.SetDOB(*s)
	}
	return umc
}

// SetCreatedBy sets the "CreatedBy" field.
func (umc *UserMasterCreate) SetCreatedBy(s string) *UserMasterCreate {
	umc.mutation.SetCreatedBy(s)
	return umc
}

// SetNillableCreatedBy sets the "CreatedBy" field if the given value is not nil.
func (umc *UserMasterCreate) SetNillableCreatedBy(s *string) *UserMasterCreate {
	if s != nil {
		umc.SetCreatedBy(*s)
	}
	return umc
}

// SetID sets the "id" field.
func (umc *UserMasterCreate) SetID(i int64) *UserMasterCreate {
	umc.mutation.SetID(i)
	return umc
}

// SetRolesID sets the "roles" edge to the RoleMaster entity by ID.
func (umc *UserMasterCreate) SetRolesID(id int32) *UserMasterCreate {
	umc.mutation.SetRolesID(id)
	return umc
}

// SetNillableRolesID sets the "roles" edge to the RoleMaster entity by ID if the given value is not nil.
func (umc *UserMasterCreate) SetNillableRolesID(id *int32) *UserMasterCreate {
	if id != nil {
		umc = umc.SetRolesID(*id)
	}
	return umc
}

// SetRoles sets the "roles" edge to the RoleMaster entity.
func (umc *UserMasterCreate) SetRoles(r *RoleMaster) *UserMasterCreate {
	return umc.SetRolesID(r.ID)
}

// AddUsermasterRefIDs adds the "UsermasterRef" edge to the EmployeeMaster entity by IDs.
func (umc *UserMasterCreate) AddUsermasterRefIDs(ids ...int64) *UserMasterCreate {
	umc.mutation.AddUsermasterRefIDs(ids...)
	return umc
}

// AddUsermasterRef adds the "UsermasterRef" edges to the EmployeeMaster entity.
func (umc *UserMasterCreate) AddUsermasterRef(e ...*EmployeeMaster) *UserMasterCreate {
	ids := make([]int64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return umc.AddUsermasterRefIDs(ids...)
}

// AddUsersPSRefIDs adds the "UsersPSRef" edge to the Exam_Applications_PS entity by IDs.
func (umc *UserMasterCreate) AddUsersPSRefIDs(ids ...int64) *UserMasterCreate {
	umc.mutation.AddUsersPSRefIDs(ids...)
	return umc
}

// AddUsersPSRef adds the "UsersPSRef" edges to the Exam_Applications_PS entity.
func (umc *UserMasterCreate) AddUsersPSRef(e ...*Exam_Applications_PS) *UserMasterCreate {
	ids := make([]int64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return umc.AddUsersPSRefIDs(ids...)
}

// AddUsersIPRefIDs adds the "UsersIPRef" edge to the Exam_Applications_IP entity by IDs.
func (umc *UserMasterCreate) AddUsersIPRefIDs(ids ...int64) *UserMasterCreate {
	umc.mutation.AddUsersIPRefIDs(ids...)
	return umc
}

// AddUsersIPRef adds the "UsersIPRef" edges to the Exam_Applications_IP entity.
func (umc *UserMasterCreate) AddUsersIPRef(e ...*Exam_Applications_IP) *UserMasterCreate {
	ids := make([]int64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return umc.AddUsersIPRefIDs(ids...)
}

// AddUserIDRefIDs adds the "User_ID_Ref" edge to the ExamNotifications entity by IDs.
func (umc *UserMasterCreate) AddUserIDRefIDs(ids ...int32) *UserMasterCreate {
	umc.mutation.AddUserIDRefIDs(ids...)
	return umc
}

// AddUserIDRef adds the "User_ID_Ref" edges to the ExamNotifications entity.
func (umc *UserMasterCreate) AddUserIDRef(e ...*ExamNotifications) *UserMasterCreate {
	ids := make([]int32, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return umc.AddUserIDRefIDs(ids...)
}

// AddUsersGDSPARefIDs adds the "UsersGDSPARef" edge to the Exam_Applications_GDSPA entity by IDs.
func (umc *UserMasterCreate) AddUsersGDSPARefIDs(ids ...int64) *UserMasterCreate {
	umc.mutation.AddUsersGDSPARefIDs(ids...)
	return umc
}

// AddUsersGDSPARef adds the "UsersGDSPARef" edges to the Exam_Applications_GDSPA entity.
func (umc *UserMasterCreate) AddUsersGDSPARef(e ...*Exam_Applications_GDSPA) *UserMasterCreate {
	ids := make([]int64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return umc.AddUsersGDSPARefIDs(ids...)
}

// AddUsersPMPARefIDs adds the "UsersPMPARef" edge to the Exam_Applications_PMPA entity by IDs.
func (umc *UserMasterCreate) AddUsersPMPARefIDs(ids ...int64) *UserMasterCreate {
	umc.mutation.AddUsersPMPARefIDs(ids...)
	return umc
}

// AddUsersPMPARef adds the "UsersPMPARef" edges to the Exam_Applications_PMPA entity.
func (umc *UserMasterCreate) AddUsersPMPARef(e ...*Exam_Applications_PMPA) *UserMasterCreate {
	ids := make([]int64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return umc.AddUsersPMPARefIDs(ids...)
}

// AddUsersGDSPMRefIDs adds the "UsersGDSPMRef" edge to the Exam_Applications_GDSPM entity by IDs.
func (umc *UserMasterCreate) AddUsersGDSPMRefIDs(ids ...int64) *UserMasterCreate {
	umc.mutation.AddUsersGDSPMRefIDs(ids...)
	return umc
}

// AddUsersGDSPMRef adds the "UsersGDSPMRef" edges to the Exam_Applications_GDSPM entity.
func (umc *UserMasterCreate) AddUsersGDSPMRef(e ...*Exam_Applications_GDSPM) *UserMasterCreate {
	ids := make([]int64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return umc.AddUsersGDSPMRefIDs(ids...)
}

// AddLogDatumIDs adds the "LogData" edge to the Logs entity by IDs.
func (umc *UserMasterCreate) AddLogDatumIDs(ids ...int64) *UserMasterCreate {
	umc.mutation.AddLogDatumIDs(ids...)
	return umc
}

// AddLogData adds the "LogData" edges to the Logs entity.
func (umc *UserMasterCreate) AddLogData(l ...*Logs) *UserMasterCreate {
	ids := make([]int64, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return umc.AddLogDatumIDs(ids...)
}

// Mutation returns the UserMasterMutation object of the builder.
func (umc *UserMasterCreate) Mutation() *UserMasterMutation {
	return umc.mutation
}

// Save creates the UserMaster in the database.
func (umc *UserMasterCreate) Save(ctx context.Context) (*UserMaster, error) {
	umc.defaults()
	return withHooks(ctx, umc.sqlSave, umc.mutation, umc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (umc *UserMasterCreate) SaveX(ctx context.Context) *UserMaster {
	v, err := umc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (umc *UserMasterCreate) Exec(ctx context.Context) error {
	_, err := umc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (umc *UserMasterCreate) ExecX(ctx context.Context) {
	if err := umc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (umc *UserMasterCreate) defaults() {
	if _, ok := umc.mutation.Status(); !ok {
		v := usermaster.DefaultStatus
		umc.mutation.SetStatus(v)
	}
	if _, ok := umc.mutation.Statuss(); !ok {
		v := usermaster.DefaultStatuss
		umc.mutation.SetStatuss(v)
	}
	if _, ok := umc.mutation.OTPTriggeredTime(); !ok {
		v := usermaster.DefaultOTPTriggeredTime()
		umc.mutation.SetOTPTriggeredTime(v)
	}
	if _, ok := umc.mutation.OTPSavedTime(); !ok {
		v := usermaster.DefaultOTPSavedTime()
		umc.mutation.SetOTPSavedTime(v)
	}
	if _, ok := umc.mutation.EmailOTPTriggeredTime(); !ok {
		v := usermaster.DefaultEmailOTPTriggeredTime()
		umc.mutation.SetEmailOTPTriggeredTime(v)
	}
	if _, ok := umc.mutation.EmailOTPSavedTime(); !ok {
		v := usermaster.DefaultEmailOTPSavedTime()
		umc.mutation.SetEmailOTPSavedTime(v)
	}
	if _, ok := umc.mutation.UpdatedDate(); !ok {
		v := usermaster.DefaultUpdatedDate()
		umc.mutation.SetUpdatedDate(v)
	}
	if _, ok := umc.mutation.ModifiedDate(); !ok {
		v := usermaster.DefaultModifiedDate()
		umc.mutation.SetModifiedDate(v)
	}
	if _, ok := umc.mutation.CreatedBy(); !ok {
		v := usermaster.DefaultCreatedBy
		umc.mutation.SetCreatedBy(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (umc *UserMasterCreate) check() error {
	if v, ok := umc.mutation.Gender(); ok {
		if err := usermaster.GenderValidator(v); err != nil {
			return &ValidationError{Name: "Gender", err: fmt.Errorf(`ent: validator failed for field "UserMaster.Gender": %w`, err)}
		}
	}
	return nil
}

func (umc *UserMasterCreate) sqlSave(ctx context.Context) (*UserMaster, error) {
	if err := umc.check(); err != nil {
		return nil, err
	}
	_node, _spec := umc.createSpec()
	if err := sqlgraph.CreateNode(ctx, umc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	umc.mutation.id = &_node.ID
	umc.mutation.done = true
	return _node, nil
}

func (umc *UserMasterCreate) createSpec() (*UserMaster, *sqlgraph.CreateSpec) {
	var (
		_node = &UserMaster{config: umc.config}
		_spec = sqlgraph.NewCreateSpec(usermaster.Table, sqlgraph.NewFieldSpec(usermaster.FieldID, field.TypeInt64))
	)
	if id, ok := umc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := umc.mutation.EmployeeID(); ok {
		_spec.SetField(usermaster.FieldEmployeeID, field.TypeInt64, value)
		_node.EmployeeID = value
	}
	if value, ok := umc.mutation.EmployeeName(); ok {
		_spec.SetField(usermaster.FieldEmployeeName, field.TypeString, value)
		_node.EmployeeName = value
	}
	if value, ok := umc.mutation.Mobile(); ok {
		_spec.SetField(usermaster.FieldMobile, field.TypeString, value)
		_node.Mobile = value
	}
	if value, ok := umc.mutation.EmailID(); ok {
		_spec.SetField(usermaster.FieldEmailID, field.TypeString, value)
		_node.EmailID = value
	}
	if value, ok := umc.mutation.UserName(); ok {
		_spec.SetField(usermaster.FieldUserName, field.TypeString, value)
		_node.UserName = value
	}
	if value, ok := umc.mutation.Password(); ok {
		_spec.SetField(usermaster.FieldPassword, field.TypeString, value)
		_node.Password = value
	}
	if value, ok := umc.mutation.Status(); ok {
		_spec.SetField(usermaster.FieldStatus, field.TypeBool, value)
		_node.Status = value
	}
	if value, ok := umc.mutation.Statuss(); ok {
		_spec.SetField(usermaster.FieldStatuss, field.TypeString, value)
		_node.Statuss = value
	}
	if value, ok := umc.mutation.OTP(); ok {
		_spec.SetField(usermaster.FieldOTP, field.TypeInt32, value)
		_node.OTP = value
	}
	if value, ok := umc.mutation.OTPNew(); ok {
		_spec.SetField(usermaster.FieldOTPNew, field.TypeInt32, value)
		_node.OTPNew = value
	}
	if value, ok := umc.mutation.EmailOTPNew(); ok {
		_spec.SetField(usermaster.FieldEmailOTPNew, field.TypeInt32, value)
		_node.EmailOTPNew = value
	}
	if value, ok := umc.mutation.OTPRemarks(); ok {
		_spec.SetField(usermaster.FieldOTPRemarks, field.TypeString, value)
		_node.OTPRemarks = value
	}
	if value, ok := umc.mutation.CreatedAt(); ok {
		_spec.SetField(usermaster.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := umc.mutation.OTPTriggeredTime(); ok {
		_spec.SetField(usermaster.FieldOTPTriggeredTime, field.TypeTime, value)
		_node.OTPTriggeredTime = value
	}
	if value, ok := umc.mutation.OTPSavedTime(); ok {
		_spec.SetField(usermaster.FieldOTPSavedTime, field.TypeTime, value)
		_node.OTPSavedTime = value
	}
	if value, ok := umc.mutation.OTPExpiryTime(); ok {
		_spec.SetField(usermaster.FieldOTPExpiryTime, field.TypeTime, value)
		_node.OTPExpiryTime = value
	}
	if value, ok := umc.mutation.NewPasswordRequest(); ok {
		_spec.SetField(usermaster.FieldNewPasswordRequest, field.TypeBool, value)
		_node.NewPasswordRequest = value
	}
	if value, ok := umc.mutation.EmailOTP(); ok {
		_spec.SetField(usermaster.FieldEmailOTP, field.TypeInt32, value)
		_node.EmailOTP = value
	}
	if value, ok := umc.mutation.EmailOTPRemarks(); ok {
		_spec.SetField(usermaster.FieldEmailOTPRemarks, field.TypeString, value)
		_node.EmailOTPRemarks = value
	}
	if value, ok := umc.mutation.EmailCreatedAt(); ok {
		_spec.SetField(usermaster.FieldEmailCreatedAt, field.TypeTime, value)
		_node.EmailCreatedAt = value
	}
	if value, ok := umc.mutation.EmailOTPTriggeredTime(); ok {
		_spec.SetField(usermaster.FieldEmailOTPTriggeredTime, field.TypeTime, value)
		_node.EmailOTPTriggeredTime = value
	}
	if value, ok := umc.mutation.EmailOTPSavedTime(); ok {
		_spec.SetField(usermaster.FieldEmailOTPSavedTime, field.TypeTime, value)
		_node.EmailOTPSavedTime = value
	}
	if value, ok := umc.mutation.EmailOTPExpiryTime(); ok {
		_spec.SetField(usermaster.FieldEmailOTPExpiryTime, field.TypeTime, value)
		_node.EmailOTPExpiryTime = value
	}
	if value, ok := umc.mutation.EmailNewPasswordRequest(); ok {
		_spec.SetField(usermaster.FieldEmailNewPasswordRequest, field.TypeBool, value)
		_node.EmailNewPasswordRequest = value
	}
	if value, ok := umc.mutation.UidToken(); ok {
		_spec.SetField(usermaster.FieldUidToken, field.TypeString, value)
		_node.UidToken = value
	}
	if value, ok := umc.mutation.CreatedById(); ok {
		_spec.SetField(usermaster.FieldCreatedById, field.TypeInt64, value)
		_node.CreatedById = value
	}
	if value, ok := umc.mutation.CreatedByEmployeeId(); ok {
		_spec.SetField(usermaster.FieldCreatedByEmployeeId, field.TypeString, value)
		_node.CreatedByEmployeeId = value
	}
	if value, ok := umc.mutation.CreatedByUserName(); ok {
		_spec.SetField(usermaster.FieldCreatedByUserName, field.TypeString, value)
		_node.CreatedByUserName = value
	}
	if value, ok := umc.mutation.CreatedByDesignation(); ok {
		_spec.SetField(usermaster.FieldCreatedByDesignation, field.TypeString, value)
		_node.CreatedByDesignation = value
	}
	if value, ok := umc.mutation.CreatedDate(); ok {
		_spec.SetField(usermaster.FieldCreatedDate, field.TypeTime, value)
		_node.CreatedDate = value
	}
	if value, ok := umc.mutation.DeletedById(); ok {
		_spec.SetField(usermaster.FieldDeletedById, field.TypeInt64, value)
		_node.DeletedById = value
	}
	if value, ok := umc.mutation.DeletedByEmployeeId(); ok {
		_spec.SetField(usermaster.FieldDeletedByEmployeeId, field.TypeString, value)
		_node.DeletedByEmployeeId = value
	}
	if value, ok := umc.mutation.DeletedByUserName(); ok {
		_spec.SetField(usermaster.FieldDeletedByUserName, field.TypeString, value)
		_node.DeletedByUserName = value
	}
	if value, ok := umc.mutation.DeletedByDesignation(); ok {
		_spec.SetField(usermaster.FieldDeletedByDesignation, field.TypeString, value)
		_node.DeletedByDesignation = value
	}
	if value, ok := umc.mutation.DeletedDate(); ok {
		_spec.SetField(usermaster.FieldDeletedDate, field.TypeTime, value)
		_node.DeletedDate = value
	}
	if value, ok := umc.mutation.FacilityID(); ok {
		_spec.SetField(usermaster.FieldFacilityID, field.TypeString, value)
		_node.FacilityID = value
	}
	if value, ok := umc.mutation.CircleFacilityId(); ok {
		_spec.SetField(usermaster.FieldCircleFacilityId, field.TypeString, value)
		_node.CircleFacilityId = value
	}
	if value, ok := umc.mutation.CircleFacilityName(); ok {
		_spec.SetField(usermaster.FieldCircleFacilityName, field.TypeString, value)
		_node.CircleFacilityName = value
	}
	if value, ok := umc.mutation.Designation(); ok {
		_spec.SetField(usermaster.FieldDesignation, field.TypeString, value)
		_node.Designation = value
	}
	if value, ok := umc.mutation.Updatedby(); ok {
		_spec.SetField(usermaster.FieldUpdatedby, field.TypeString, value)
		_node.Updatedby = value
	}
	if value, ok := umc.mutation.UpdatedDate(); ok {
		_spec.SetField(usermaster.FieldUpdatedDate, field.TypeTime, value)
		_node.UpdatedDate = value
	}
	if value, ok := umc.mutation.Modifiedby(); ok {
		_spec.SetField(usermaster.FieldModifiedby, field.TypeString, value)
		_node.Modifiedby = value
	}
	if value, ok := umc.mutation.ModifiedDate(); ok {
		_spec.SetField(usermaster.FieldModifiedDate, field.TypeTime, value)
		_node.ModifiedDate = value
	}
	if value, ok := umc.mutation.Operationstatus(); ok {
		_spec.SetField(usermaster.FieldOperationstatus, field.TypeString, value)
		_node.Operationstatus = value
	}
	if value, ok := umc.mutation.ExamCode(); ok {
		_spec.SetField(usermaster.FieldExamCode, field.TypeInt32, value)
		_node.ExamCode = value
	}
	if value, ok := umc.mutation.ExamCodePS(); ok {
		_spec.SetField(usermaster.FieldExamCodePS, field.TypeInt32, value)
		_node.ExamCodePS = value
	}
	if value, ok := umc.mutation.Gender(); ok {
		_spec.SetField(usermaster.FieldGender, field.TypeEnum, value)
		_node.Gender = value
	}
	if value, ok := umc.mutation.DOB(); ok {
		_spec.SetField(usermaster.FieldDOB, field.TypeString, value)
		_node.DOB = value
	}
	if value, ok := umc.mutation.CreatedBy(); ok {
		_spec.SetField(usermaster.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if nodes := umc.mutation.RolesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   usermaster.RolesTable,
			Columns: []string{usermaster.RolesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rolemaster.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.RoleUserCode = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := umc.mutation.UsermasterRefIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   usermaster.UsermasterRefTable,
			Columns: []string{usermaster.UsermasterRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employeemaster.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := umc.mutation.UsersPSRefIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   usermaster.UsersPSRefTable,
			Columns: []string{usermaster.UsersPSRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_ps.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := umc.mutation.UsersIPRefIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   usermaster.UsersIPRefTable,
			Columns: []string{usermaster.UsersIPRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_ip.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := umc.mutation.UserIDRefIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   usermaster.UserIDRefTable,
			Columns: []string{usermaster.UserIDRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(examnotifications.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := umc.mutation.UsersGDSPARefIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   usermaster.UsersGDSPARefTable,
			Columns: []string{usermaster.UsersGDSPARefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_gdspa.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := umc.mutation.UsersPMPARefIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   usermaster.UsersPMPARefTable,
			Columns: []string{usermaster.UsersPMPARefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_pmpa.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := umc.mutation.UsersGDSPMRefIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   usermaster.UsersGDSPMRefTable,
			Columns: []string{usermaster.UsersGDSPMRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_gdspm.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := umc.mutation.LogDataIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   usermaster.LogDataTable,
			Columns: []string{usermaster.LogDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(logs.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// UserMasterCreateBulk is the builder for creating many UserMaster entities in bulk.
type UserMasterCreateBulk struct {
	config
	builders []*UserMasterCreate
}

// Save creates the UserMaster entities in the database.
func (umcb *UserMasterCreateBulk) Save(ctx context.Context) ([]*UserMaster, error) {
	specs := make([]*sqlgraph.CreateSpec, len(umcb.builders))
	nodes := make([]*UserMaster, len(umcb.builders))
	mutators := make([]Mutator, len(umcb.builders))
	for i := range umcb.builders {
		func(i int, root context.Context) {
			builder := umcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserMasterMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, umcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, umcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, umcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (umcb *UserMasterCreateBulk) SaveX(ctx context.Context) []*UserMaster {
	v, err := umcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (umcb *UserMasterCreateBulk) Exec(ctx context.Context) error {
	_, err := umcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (umcb *UserMasterCreateBulk) ExecX(ctx context.Context) {
	if err := umcb.Exec(ctx); err != nil {
		panic(err)
	}
}
