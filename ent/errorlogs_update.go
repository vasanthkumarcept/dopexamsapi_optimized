// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"recruit/ent/errorlogs"
	"recruit/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ErrorLogsUpdate is the builder for updating ErrorLogs entities.
type ErrorLogsUpdate struct {
	config
	hooks    []Hook
	mutation *ErrorLogsMutation
}

// Where appends a list predicates to the ErrorLogsUpdate builder.
func (elu *ErrorLogsUpdate) Where(ps ...predicate.ErrorLogs) *ErrorLogsUpdate {
	elu.mutation.Where(ps...)
	return elu
}

// SetUserid sets the "userid" field.
func (elu *ErrorLogsUpdate) SetUserid(s string) *ErrorLogsUpdate {
	elu.mutation.SetUserid(s)
	return elu
}

// SetNillableUserid sets the "userid" field if the given value is not nil.
func (elu *ErrorLogsUpdate) SetNillableUserid(s *string) *ErrorLogsUpdate {
	if s != nil {
		elu.SetUserid(*s)
	}
	return elu
}

// ClearUserid clears the value of the "userid" field.
func (elu *ErrorLogsUpdate) ClearUserid() *ErrorLogsUpdate {
	elu.mutation.ClearUserid()
	return elu
}

// SetUniqueid sets the "uniqueid" field.
func (elu *ErrorLogsUpdate) SetUniqueid(i int64) *ErrorLogsUpdate {
	elu.mutation.ResetUniqueid()
	elu.mutation.SetUniqueid(i)
	return elu
}

// SetNillableUniqueid sets the "uniqueid" field if the given value is not nil.
func (elu *ErrorLogsUpdate) SetNillableUniqueid(i *int64) *ErrorLogsUpdate {
	if i != nil {
		elu.SetUniqueid(*i)
	}
	return elu
}

// AddUniqueid adds i to the "uniqueid" field.
func (elu *ErrorLogsUpdate) AddUniqueid(i int64) *ErrorLogsUpdate {
	elu.mutation.AddUniqueid(i)
	return elu
}

// ClearUniqueid clears the value of the "uniqueid" field.
func (elu *ErrorLogsUpdate) ClearUniqueid() *ErrorLogsUpdate {
	elu.mutation.ClearUniqueid()
	return elu
}

// SetUsertype sets the "usertype" field.
func (elu *ErrorLogsUpdate) SetUsertype(s string) *ErrorLogsUpdate {
	elu.mutation.SetUsertype(s)
	return elu
}

// SetNillableUsertype sets the "usertype" field if the given value is not nil.
func (elu *ErrorLogsUpdate) SetNillableUsertype(s *string) *ErrorLogsUpdate {
	if s != nil {
		elu.SetUsertype(*s)
	}
	return elu
}

// ClearUsertype clears the value of the "usertype" field.
func (elu *ErrorLogsUpdate) ClearUsertype() *ErrorLogsUpdate {
	elu.mutation.ClearUsertype()
	return elu
}

// SetUserdetails sets the "userdetails" field.
func (elu *ErrorLogsUpdate) SetUserdetails(s string) *ErrorLogsUpdate {
	elu.mutation.SetUserdetails(s)
	return elu
}

// SetNillableUserdetails sets the "userdetails" field if the given value is not nil.
func (elu *ErrorLogsUpdate) SetNillableUserdetails(s *string) *ErrorLogsUpdate {
	if s != nil {
		elu.SetUserdetails(*s)
	}
	return elu
}

// ClearUserdetails clears the value of the "userdetails" field.
func (elu *ErrorLogsUpdate) ClearUserdetails() *ErrorLogsUpdate {
	elu.mutation.ClearUserdetails()
	return elu
}

// SetRemarks sets the "remarks" field.
func (elu *ErrorLogsUpdate) SetRemarks(s string) *ErrorLogsUpdate {
	elu.mutation.SetRemarks(s)
	return elu
}

// SetNillableRemarks sets the "remarks" field if the given value is not nil.
func (elu *ErrorLogsUpdate) SetNillableRemarks(s *string) *ErrorLogsUpdate {
	if s != nil {
		elu.SetRemarks(*s)
	}
	return elu
}

// ClearRemarks clears the value of the "remarks" field.
func (elu *ErrorLogsUpdate) ClearRemarks() *ErrorLogsUpdate {
	elu.mutation.ClearRemarks()
	return elu
}

// SetAction sets the "action" field.
func (elu *ErrorLogsUpdate) SetAction(s string) *ErrorLogsUpdate {
	elu.mutation.SetAction(s)
	return elu
}

// SetNillableAction sets the "action" field if the given value is not nil.
func (elu *ErrorLogsUpdate) SetNillableAction(s *string) *ErrorLogsUpdate {
	if s != nil {
		elu.SetAction(*s)
	}
	return elu
}

// ClearAction clears the value of the "action" field.
func (elu *ErrorLogsUpdate) ClearAction() *ErrorLogsUpdate {
	elu.mutation.ClearAction()
	return elu
}

// SetIpaddress sets the "ipaddress" field.
func (elu *ErrorLogsUpdate) SetIpaddress(s string) *ErrorLogsUpdate {
	elu.mutation.SetIpaddress(s)
	return elu
}

// SetNillableIpaddress sets the "ipaddress" field if the given value is not nil.
func (elu *ErrorLogsUpdate) SetNillableIpaddress(s *string) *ErrorLogsUpdate {
	if s != nil {
		elu.SetIpaddress(*s)
	}
	return elu
}

// ClearIpaddress clears the value of the "ipaddress" field.
func (elu *ErrorLogsUpdate) ClearIpaddress() *ErrorLogsUpdate {
	elu.mutation.ClearIpaddress()
	return elu
}

// SetDevicetype sets the "devicetype" field.
func (elu *ErrorLogsUpdate) SetDevicetype(s string) *ErrorLogsUpdate {
	elu.mutation.SetDevicetype(s)
	return elu
}

// SetNillableDevicetype sets the "devicetype" field if the given value is not nil.
func (elu *ErrorLogsUpdate) SetNillableDevicetype(s *string) *ErrorLogsUpdate {
	if s != nil {
		elu.SetDevicetype(*s)
	}
	return elu
}

// ClearDevicetype clears the value of the "devicetype" field.
func (elu *ErrorLogsUpdate) ClearDevicetype() *ErrorLogsUpdate {
	elu.mutation.ClearDevicetype()
	return elu
}

// SetOs sets the "os" field.
func (elu *ErrorLogsUpdate) SetOs(s string) *ErrorLogsUpdate {
	elu.mutation.SetOs(s)
	return elu
}

// SetNillableOs sets the "os" field if the given value is not nil.
func (elu *ErrorLogsUpdate) SetNillableOs(s *string) *ErrorLogsUpdate {
	if s != nil {
		elu.SetOs(*s)
	}
	return elu
}

// ClearOs clears the value of the "os" field.
func (elu *ErrorLogsUpdate) ClearOs() *ErrorLogsUpdate {
	elu.mutation.ClearOs()
	return elu
}

// SetBrowser sets the "browser" field.
func (elu *ErrorLogsUpdate) SetBrowser(s string) *ErrorLogsUpdate {
	elu.mutation.SetBrowser(s)
	return elu
}

// SetNillableBrowser sets the "browser" field if the given value is not nil.
func (elu *ErrorLogsUpdate) SetNillableBrowser(s *string) *ErrorLogsUpdate {
	if s != nil {
		elu.SetBrowser(*s)
	}
	return elu
}

// ClearBrowser clears the value of the "browser" field.
func (elu *ErrorLogsUpdate) ClearBrowser() *ErrorLogsUpdate {
	elu.mutation.ClearBrowser()
	return elu
}

// SetLatitude sets the "latitude" field.
func (elu *ErrorLogsUpdate) SetLatitude(f float64) *ErrorLogsUpdate {
	elu.mutation.ResetLatitude()
	elu.mutation.SetLatitude(f)
	return elu
}

// SetNillableLatitude sets the "latitude" field if the given value is not nil.
func (elu *ErrorLogsUpdate) SetNillableLatitude(f *float64) *ErrorLogsUpdate {
	if f != nil {
		elu.SetLatitude(*f)
	}
	return elu
}

// AddLatitude adds f to the "latitude" field.
func (elu *ErrorLogsUpdate) AddLatitude(f float64) *ErrorLogsUpdate {
	elu.mutation.AddLatitude(f)
	return elu
}

// ClearLatitude clears the value of the "latitude" field.
func (elu *ErrorLogsUpdate) ClearLatitude() *ErrorLogsUpdate {
	elu.mutation.ClearLatitude()
	return elu
}

// SetLongitude sets the "longitude" field.
func (elu *ErrorLogsUpdate) SetLongitude(f float64) *ErrorLogsUpdate {
	elu.mutation.ResetLongitude()
	elu.mutation.SetLongitude(f)
	return elu
}

// SetNillableLongitude sets the "longitude" field if the given value is not nil.
func (elu *ErrorLogsUpdate) SetNillableLongitude(f *float64) *ErrorLogsUpdate {
	if f != nil {
		elu.SetLongitude(*f)
	}
	return elu
}

// AddLongitude adds f to the "longitude" field.
func (elu *ErrorLogsUpdate) AddLongitude(f float64) *ErrorLogsUpdate {
	elu.mutation.AddLongitude(f)
	return elu
}

// ClearLongitude clears the value of the "longitude" field.
func (elu *ErrorLogsUpdate) ClearLongitude() *ErrorLogsUpdate {
	elu.mutation.ClearLongitude()
	return elu
}

// SetEventtime sets the "eventtime" field.
func (elu *ErrorLogsUpdate) SetEventtime(t time.Time) *ErrorLogsUpdate {
	elu.mutation.SetEventtime(t)
	return elu
}

// SetNillableEventtime sets the "eventtime" field if the given value is not nil.
func (elu *ErrorLogsUpdate) SetNillableEventtime(t *time.Time) *ErrorLogsUpdate {
	if t != nil {
		elu.SetEventtime(*t)
	}
	return elu
}

// SetUpdatedBy sets the "UpdatedBy" field.
func (elu *ErrorLogsUpdate) SetUpdatedBy(s string) *ErrorLogsUpdate {
	elu.mutation.SetUpdatedBy(s)
	return elu
}

// SetNillableUpdatedBy sets the "UpdatedBy" field if the given value is not nil.
func (elu *ErrorLogsUpdate) SetNillableUpdatedBy(s *string) *ErrorLogsUpdate {
	if s != nil {
		elu.SetUpdatedBy(*s)
	}
	return elu
}

// ClearUpdatedBy clears the value of the "UpdatedBy" field.
func (elu *ErrorLogsUpdate) ClearUpdatedBy() *ErrorLogsUpdate {
	elu.mutation.ClearUpdatedBy()
	return elu
}

// SetUpdatedTime sets the "UpdatedTime" field.
func (elu *ErrorLogsUpdate) SetUpdatedTime(t time.Time) *ErrorLogsUpdate {
	elu.mutation.SetUpdatedTime(t)
	return elu
}

// SetNillableUpdatedTime sets the "UpdatedTime" field if the given value is not nil.
func (elu *ErrorLogsUpdate) SetNillableUpdatedTime(t *time.Time) *ErrorLogsUpdate {
	if t != nil {
		elu.SetUpdatedTime(*t)
	}
	return elu
}

// ClearUpdatedTime clears the value of the "UpdatedTime" field.
func (elu *ErrorLogsUpdate) ClearUpdatedTime() *ErrorLogsUpdate {
	elu.mutation.ClearUpdatedTime()
	return elu
}

// SetAssignedTo sets the "AssignedTo" field.
func (elu *ErrorLogsUpdate) SetAssignedTo(s string) *ErrorLogsUpdate {
	elu.mutation.SetAssignedTo(s)
	return elu
}

// SetNillableAssignedTo sets the "AssignedTo" field if the given value is not nil.
func (elu *ErrorLogsUpdate) SetNillableAssignedTo(s *string) *ErrorLogsUpdate {
	if s != nil {
		elu.SetAssignedTo(*s)
	}
	return elu
}

// ClearAssignedTo clears the value of the "AssignedTo" field.
func (elu *ErrorLogsUpdate) ClearAssignedTo() *ErrorLogsUpdate {
	elu.mutation.ClearAssignedTo()
	return elu
}

// SetRemarksNew sets the "RemarksNew" field.
func (elu *ErrorLogsUpdate) SetRemarksNew(s string) *ErrorLogsUpdate {
	elu.mutation.SetRemarksNew(s)
	return elu
}

// SetNillableRemarksNew sets the "RemarksNew" field if the given value is not nil.
func (elu *ErrorLogsUpdate) SetNillableRemarksNew(s *string) *ErrorLogsUpdate {
	if s != nil {
		elu.SetRemarksNew(*s)
	}
	return elu
}

// ClearRemarksNew clears the value of the "RemarksNew" field.
func (elu *ErrorLogsUpdate) ClearRemarksNew() *ErrorLogsUpdate {
	elu.mutation.ClearRemarksNew()
	return elu
}

// SetStatus sets the "Status" field.
func (elu *ErrorLogsUpdate) SetStatus(s string) *ErrorLogsUpdate {
	elu.mutation.SetStatus(s)
	return elu
}

// SetNillableStatus sets the "Status" field if the given value is not nil.
func (elu *ErrorLogsUpdate) SetNillableStatus(s *string) *ErrorLogsUpdate {
	if s != nil {
		elu.SetStatus(*s)
	}
	return elu
}

// ClearStatus clears the value of the "Status" field.
func (elu *ErrorLogsUpdate) ClearStatus() *ErrorLogsUpdate {
	elu.mutation.ClearStatus()
	return elu
}

// SetClosedOn sets the "ClosedOn" field.
func (elu *ErrorLogsUpdate) SetClosedOn(t time.Time) *ErrorLogsUpdate {
	elu.mutation.SetClosedOn(t)
	return elu
}

// SetNillableClosedOn sets the "ClosedOn" field if the given value is not nil.
func (elu *ErrorLogsUpdate) SetNillableClosedOn(t *time.Time) *ErrorLogsUpdate {
	if t != nil {
		elu.SetClosedOn(*t)
	}
	return elu
}

// ClearClosedOn clears the value of the "ClosedOn" field.
func (elu *ErrorLogsUpdate) ClearClosedOn() *ErrorLogsUpdate {
	elu.mutation.ClearClosedOn()
	return elu
}

// Mutation returns the ErrorLogsMutation object of the builder.
func (elu *ErrorLogsUpdate) Mutation() *ErrorLogsMutation {
	return elu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (elu *ErrorLogsUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, elu.sqlSave, elu.mutation, elu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (elu *ErrorLogsUpdate) SaveX(ctx context.Context) int {
	affected, err := elu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (elu *ErrorLogsUpdate) Exec(ctx context.Context) error {
	_, err := elu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (elu *ErrorLogsUpdate) ExecX(ctx context.Context) {
	if err := elu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (elu *ErrorLogsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(errorlogs.Table, errorlogs.Columns, sqlgraph.NewFieldSpec(errorlogs.FieldID, field.TypeInt64))
	if ps := elu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := elu.mutation.Userid(); ok {
		_spec.SetField(errorlogs.FieldUserid, field.TypeString, value)
	}
	if elu.mutation.UseridCleared() {
		_spec.ClearField(errorlogs.FieldUserid, field.TypeString)
	}
	if value, ok := elu.mutation.Uniqueid(); ok {
		_spec.SetField(errorlogs.FieldUniqueid, field.TypeInt64, value)
	}
	if value, ok := elu.mutation.AddedUniqueid(); ok {
		_spec.AddField(errorlogs.FieldUniqueid, field.TypeInt64, value)
	}
	if elu.mutation.UniqueidCleared() {
		_spec.ClearField(errorlogs.FieldUniqueid, field.TypeInt64)
	}
	if value, ok := elu.mutation.Usertype(); ok {
		_spec.SetField(errorlogs.FieldUsertype, field.TypeString, value)
	}
	if elu.mutation.UsertypeCleared() {
		_spec.ClearField(errorlogs.FieldUsertype, field.TypeString)
	}
	if value, ok := elu.mutation.Userdetails(); ok {
		_spec.SetField(errorlogs.FieldUserdetails, field.TypeString, value)
	}
	if elu.mutation.UserdetailsCleared() {
		_spec.ClearField(errorlogs.FieldUserdetails, field.TypeString)
	}
	if value, ok := elu.mutation.Remarks(); ok {
		_spec.SetField(errorlogs.FieldRemarks, field.TypeString, value)
	}
	if elu.mutation.RemarksCleared() {
		_spec.ClearField(errorlogs.FieldRemarks, field.TypeString)
	}
	if value, ok := elu.mutation.Action(); ok {
		_spec.SetField(errorlogs.FieldAction, field.TypeString, value)
	}
	if elu.mutation.ActionCleared() {
		_spec.ClearField(errorlogs.FieldAction, field.TypeString)
	}
	if value, ok := elu.mutation.Ipaddress(); ok {
		_spec.SetField(errorlogs.FieldIpaddress, field.TypeString, value)
	}
	if elu.mutation.IpaddressCleared() {
		_spec.ClearField(errorlogs.FieldIpaddress, field.TypeString)
	}
	if value, ok := elu.mutation.Devicetype(); ok {
		_spec.SetField(errorlogs.FieldDevicetype, field.TypeString, value)
	}
	if elu.mutation.DevicetypeCleared() {
		_spec.ClearField(errorlogs.FieldDevicetype, field.TypeString)
	}
	if value, ok := elu.mutation.Os(); ok {
		_spec.SetField(errorlogs.FieldOs, field.TypeString, value)
	}
	if elu.mutation.OsCleared() {
		_spec.ClearField(errorlogs.FieldOs, field.TypeString)
	}
	if value, ok := elu.mutation.Browser(); ok {
		_spec.SetField(errorlogs.FieldBrowser, field.TypeString, value)
	}
	if elu.mutation.BrowserCleared() {
		_spec.ClearField(errorlogs.FieldBrowser, field.TypeString)
	}
	if value, ok := elu.mutation.Latitude(); ok {
		_spec.SetField(errorlogs.FieldLatitude, field.TypeFloat64, value)
	}
	if value, ok := elu.mutation.AddedLatitude(); ok {
		_spec.AddField(errorlogs.FieldLatitude, field.TypeFloat64, value)
	}
	if elu.mutation.LatitudeCleared() {
		_spec.ClearField(errorlogs.FieldLatitude, field.TypeFloat64)
	}
	if value, ok := elu.mutation.Longitude(); ok {
		_spec.SetField(errorlogs.FieldLongitude, field.TypeFloat64, value)
	}
	if value, ok := elu.mutation.AddedLongitude(); ok {
		_spec.AddField(errorlogs.FieldLongitude, field.TypeFloat64, value)
	}
	if elu.mutation.LongitudeCleared() {
		_spec.ClearField(errorlogs.FieldLongitude, field.TypeFloat64)
	}
	if value, ok := elu.mutation.Eventtime(); ok {
		_spec.SetField(errorlogs.FieldEventtime, field.TypeTime, value)
	}
	if value, ok := elu.mutation.UpdatedBy(); ok {
		_spec.SetField(errorlogs.FieldUpdatedBy, field.TypeString, value)
	}
	if elu.mutation.UpdatedByCleared() {
		_spec.ClearField(errorlogs.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := elu.mutation.UpdatedTime(); ok {
		_spec.SetField(errorlogs.FieldUpdatedTime, field.TypeTime, value)
	}
	if elu.mutation.UpdatedTimeCleared() {
		_spec.ClearField(errorlogs.FieldUpdatedTime, field.TypeTime)
	}
	if value, ok := elu.mutation.AssignedTo(); ok {
		_spec.SetField(errorlogs.FieldAssignedTo, field.TypeString, value)
	}
	if elu.mutation.AssignedToCleared() {
		_spec.ClearField(errorlogs.FieldAssignedTo, field.TypeString)
	}
	if value, ok := elu.mutation.RemarksNew(); ok {
		_spec.SetField(errorlogs.FieldRemarksNew, field.TypeString, value)
	}
	if elu.mutation.RemarksNewCleared() {
		_spec.ClearField(errorlogs.FieldRemarksNew, field.TypeString)
	}
	if value, ok := elu.mutation.Status(); ok {
		_spec.SetField(errorlogs.FieldStatus, field.TypeString, value)
	}
	if elu.mutation.StatusCleared() {
		_spec.ClearField(errorlogs.FieldStatus, field.TypeString)
	}
	if value, ok := elu.mutation.ClosedOn(); ok {
		_spec.SetField(errorlogs.FieldClosedOn, field.TypeTime, value)
	}
	if elu.mutation.ClosedOnCleared() {
		_spec.ClearField(errorlogs.FieldClosedOn, field.TypeTime)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, elu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{errorlogs.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	elu.mutation.done = true
	return n, nil
}

// ErrorLogsUpdateOne is the builder for updating a single ErrorLogs entity.
type ErrorLogsUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ErrorLogsMutation
}

// SetUserid sets the "userid" field.
func (eluo *ErrorLogsUpdateOne) SetUserid(s string) *ErrorLogsUpdateOne {
	eluo.mutation.SetUserid(s)
	return eluo
}

// SetNillableUserid sets the "userid" field if the given value is not nil.
func (eluo *ErrorLogsUpdateOne) SetNillableUserid(s *string) *ErrorLogsUpdateOne {
	if s != nil {
		eluo.SetUserid(*s)
	}
	return eluo
}

// ClearUserid clears the value of the "userid" field.
func (eluo *ErrorLogsUpdateOne) ClearUserid() *ErrorLogsUpdateOne {
	eluo.mutation.ClearUserid()
	return eluo
}

// SetUniqueid sets the "uniqueid" field.
func (eluo *ErrorLogsUpdateOne) SetUniqueid(i int64) *ErrorLogsUpdateOne {
	eluo.mutation.ResetUniqueid()
	eluo.mutation.SetUniqueid(i)
	return eluo
}

// SetNillableUniqueid sets the "uniqueid" field if the given value is not nil.
func (eluo *ErrorLogsUpdateOne) SetNillableUniqueid(i *int64) *ErrorLogsUpdateOne {
	if i != nil {
		eluo.SetUniqueid(*i)
	}
	return eluo
}

// AddUniqueid adds i to the "uniqueid" field.
func (eluo *ErrorLogsUpdateOne) AddUniqueid(i int64) *ErrorLogsUpdateOne {
	eluo.mutation.AddUniqueid(i)
	return eluo
}

// ClearUniqueid clears the value of the "uniqueid" field.
func (eluo *ErrorLogsUpdateOne) ClearUniqueid() *ErrorLogsUpdateOne {
	eluo.mutation.ClearUniqueid()
	return eluo
}

// SetUsertype sets the "usertype" field.
func (eluo *ErrorLogsUpdateOne) SetUsertype(s string) *ErrorLogsUpdateOne {
	eluo.mutation.SetUsertype(s)
	return eluo
}

// SetNillableUsertype sets the "usertype" field if the given value is not nil.
func (eluo *ErrorLogsUpdateOne) SetNillableUsertype(s *string) *ErrorLogsUpdateOne {
	if s != nil {
		eluo.SetUsertype(*s)
	}
	return eluo
}

// ClearUsertype clears the value of the "usertype" field.
func (eluo *ErrorLogsUpdateOne) ClearUsertype() *ErrorLogsUpdateOne {
	eluo.mutation.ClearUsertype()
	return eluo
}

// SetUserdetails sets the "userdetails" field.
func (eluo *ErrorLogsUpdateOne) SetUserdetails(s string) *ErrorLogsUpdateOne {
	eluo.mutation.SetUserdetails(s)
	return eluo
}

// SetNillableUserdetails sets the "userdetails" field if the given value is not nil.
func (eluo *ErrorLogsUpdateOne) SetNillableUserdetails(s *string) *ErrorLogsUpdateOne {
	if s != nil {
		eluo.SetUserdetails(*s)
	}
	return eluo
}

// ClearUserdetails clears the value of the "userdetails" field.
func (eluo *ErrorLogsUpdateOne) ClearUserdetails() *ErrorLogsUpdateOne {
	eluo.mutation.ClearUserdetails()
	return eluo
}

// SetRemarks sets the "remarks" field.
func (eluo *ErrorLogsUpdateOne) SetRemarks(s string) *ErrorLogsUpdateOne {
	eluo.mutation.SetRemarks(s)
	return eluo
}

// SetNillableRemarks sets the "remarks" field if the given value is not nil.
func (eluo *ErrorLogsUpdateOne) SetNillableRemarks(s *string) *ErrorLogsUpdateOne {
	if s != nil {
		eluo.SetRemarks(*s)
	}
	return eluo
}

// ClearRemarks clears the value of the "remarks" field.
func (eluo *ErrorLogsUpdateOne) ClearRemarks() *ErrorLogsUpdateOne {
	eluo.mutation.ClearRemarks()
	return eluo
}

// SetAction sets the "action" field.
func (eluo *ErrorLogsUpdateOne) SetAction(s string) *ErrorLogsUpdateOne {
	eluo.mutation.SetAction(s)
	return eluo
}

// SetNillableAction sets the "action" field if the given value is not nil.
func (eluo *ErrorLogsUpdateOne) SetNillableAction(s *string) *ErrorLogsUpdateOne {
	if s != nil {
		eluo.SetAction(*s)
	}
	return eluo
}

// ClearAction clears the value of the "action" field.
func (eluo *ErrorLogsUpdateOne) ClearAction() *ErrorLogsUpdateOne {
	eluo.mutation.ClearAction()
	return eluo
}

// SetIpaddress sets the "ipaddress" field.
func (eluo *ErrorLogsUpdateOne) SetIpaddress(s string) *ErrorLogsUpdateOne {
	eluo.mutation.SetIpaddress(s)
	return eluo
}

// SetNillableIpaddress sets the "ipaddress" field if the given value is not nil.
func (eluo *ErrorLogsUpdateOne) SetNillableIpaddress(s *string) *ErrorLogsUpdateOne {
	if s != nil {
		eluo.SetIpaddress(*s)
	}
	return eluo
}

// ClearIpaddress clears the value of the "ipaddress" field.
func (eluo *ErrorLogsUpdateOne) ClearIpaddress() *ErrorLogsUpdateOne {
	eluo.mutation.ClearIpaddress()
	return eluo
}

// SetDevicetype sets the "devicetype" field.
func (eluo *ErrorLogsUpdateOne) SetDevicetype(s string) *ErrorLogsUpdateOne {
	eluo.mutation.SetDevicetype(s)
	return eluo
}

// SetNillableDevicetype sets the "devicetype" field if the given value is not nil.
func (eluo *ErrorLogsUpdateOne) SetNillableDevicetype(s *string) *ErrorLogsUpdateOne {
	if s != nil {
		eluo.SetDevicetype(*s)
	}
	return eluo
}

// ClearDevicetype clears the value of the "devicetype" field.
func (eluo *ErrorLogsUpdateOne) ClearDevicetype() *ErrorLogsUpdateOne {
	eluo.mutation.ClearDevicetype()
	return eluo
}

// SetOs sets the "os" field.
func (eluo *ErrorLogsUpdateOne) SetOs(s string) *ErrorLogsUpdateOne {
	eluo.mutation.SetOs(s)
	return eluo
}

// SetNillableOs sets the "os" field if the given value is not nil.
func (eluo *ErrorLogsUpdateOne) SetNillableOs(s *string) *ErrorLogsUpdateOne {
	if s != nil {
		eluo.SetOs(*s)
	}
	return eluo
}

// ClearOs clears the value of the "os" field.
func (eluo *ErrorLogsUpdateOne) ClearOs() *ErrorLogsUpdateOne {
	eluo.mutation.ClearOs()
	return eluo
}

// SetBrowser sets the "browser" field.
func (eluo *ErrorLogsUpdateOne) SetBrowser(s string) *ErrorLogsUpdateOne {
	eluo.mutation.SetBrowser(s)
	return eluo
}

// SetNillableBrowser sets the "browser" field if the given value is not nil.
func (eluo *ErrorLogsUpdateOne) SetNillableBrowser(s *string) *ErrorLogsUpdateOne {
	if s != nil {
		eluo.SetBrowser(*s)
	}
	return eluo
}

// ClearBrowser clears the value of the "browser" field.
func (eluo *ErrorLogsUpdateOne) ClearBrowser() *ErrorLogsUpdateOne {
	eluo.mutation.ClearBrowser()
	return eluo
}

// SetLatitude sets the "latitude" field.
func (eluo *ErrorLogsUpdateOne) SetLatitude(f float64) *ErrorLogsUpdateOne {
	eluo.mutation.ResetLatitude()
	eluo.mutation.SetLatitude(f)
	return eluo
}

// SetNillableLatitude sets the "latitude" field if the given value is not nil.
func (eluo *ErrorLogsUpdateOne) SetNillableLatitude(f *float64) *ErrorLogsUpdateOne {
	if f != nil {
		eluo.SetLatitude(*f)
	}
	return eluo
}

// AddLatitude adds f to the "latitude" field.
func (eluo *ErrorLogsUpdateOne) AddLatitude(f float64) *ErrorLogsUpdateOne {
	eluo.mutation.AddLatitude(f)
	return eluo
}

// ClearLatitude clears the value of the "latitude" field.
func (eluo *ErrorLogsUpdateOne) ClearLatitude() *ErrorLogsUpdateOne {
	eluo.mutation.ClearLatitude()
	return eluo
}

// SetLongitude sets the "longitude" field.
func (eluo *ErrorLogsUpdateOne) SetLongitude(f float64) *ErrorLogsUpdateOne {
	eluo.mutation.ResetLongitude()
	eluo.mutation.SetLongitude(f)
	return eluo
}

// SetNillableLongitude sets the "longitude" field if the given value is not nil.
func (eluo *ErrorLogsUpdateOne) SetNillableLongitude(f *float64) *ErrorLogsUpdateOne {
	if f != nil {
		eluo.SetLongitude(*f)
	}
	return eluo
}

// AddLongitude adds f to the "longitude" field.
func (eluo *ErrorLogsUpdateOne) AddLongitude(f float64) *ErrorLogsUpdateOne {
	eluo.mutation.AddLongitude(f)
	return eluo
}

// ClearLongitude clears the value of the "longitude" field.
func (eluo *ErrorLogsUpdateOne) ClearLongitude() *ErrorLogsUpdateOne {
	eluo.mutation.ClearLongitude()
	return eluo
}

// SetEventtime sets the "eventtime" field.
func (eluo *ErrorLogsUpdateOne) SetEventtime(t time.Time) *ErrorLogsUpdateOne {
	eluo.mutation.SetEventtime(t)
	return eluo
}

// SetNillableEventtime sets the "eventtime" field if the given value is not nil.
func (eluo *ErrorLogsUpdateOne) SetNillableEventtime(t *time.Time) *ErrorLogsUpdateOne {
	if t != nil {
		eluo.SetEventtime(*t)
	}
	return eluo
}

// SetUpdatedBy sets the "UpdatedBy" field.
func (eluo *ErrorLogsUpdateOne) SetUpdatedBy(s string) *ErrorLogsUpdateOne {
	eluo.mutation.SetUpdatedBy(s)
	return eluo
}

// SetNillableUpdatedBy sets the "UpdatedBy" field if the given value is not nil.
func (eluo *ErrorLogsUpdateOne) SetNillableUpdatedBy(s *string) *ErrorLogsUpdateOne {
	if s != nil {
		eluo.SetUpdatedBy(*s)
	}
	return eluo
}

// ClearUpdatedBy clears the value of the "UpdatedBy" field.
func (eluo *ErrorLogsUpdateOne) ClearUpdatedBy() *ErrorLogsUpdateOne {
	eluo.mutation.ClearUpdatedBy()
	return eluo
}

// SetUpdatedTime sets the "UpdatedTime" field.
func (eluo *ErrorLogsUpdateOne) SetUpdatedTime(t time.Time) *ErrorLogsUpdateOne {
	eluo.mutation.SetUpdatedTime(t)
	return eluo
}

// SetNillableUpdatedTime sets the "UpdatedTime" field if the given value is not nil.
func (eluo *ErrorLogsUpdateOne) SetNillableUpdatedTime(t *time.Time) *ErrorLogsUpdateOne {
	if t != nil {
		eluo.SetUpdatedTime(*t)
	}
	return eluo
}

// ClearUpdatedTime clears the value of the "UpdatedTime" field.
func (eluo *ErrorLogsUpdateOne) ClearUpdatedTime() *ErrorLogsUpdateOne {
	eluo.mutation.ClearUpdatedTime()
	return eluo
}

// SetAssignedTo sets the "AssignedTo" field.
func (eluo *ErrorLogsUpdateOne) SetAssignedTo(s string) *ErrorLogsUpdateOne {
	eluo.mutation.SetAssignedTo(s)
	return eluo
}

// SetNillableAssignedTo sets the "AssignedTo" field if the given value is not nil.
func (eluo *ErrorLogsUpdateOne) SetNillableAssignedTo(s *string) *ErrorLogsUpdateOne {
	if s != nil {
		eluo.SetAssignedTo(*s)
	}
	return eluo
}

// ClearAssignedTo clears the value of the "AssignedTo" field.
func (eluo *ErrorLogsUpdateOne) ClearAssignedTo() *ErrorLogsUpdateOne {
	eluo.mutation.ClearAssignedTo()
	return eluo
}

// SetRemarksNew sets the "RemarksNew" field.
func (eluo *ErrorLogsUpdateOne) SetRemarksNew(s string) *ErrorLogsUpdateOne {
	eluo.mutation.SetRemarksNew(s)
	return eluo
}

// SetNillableRemarksNew sets the "RemarksNew" field if the given value is not nil.
func (eluo *ErrorLogsUpdateOne) SetNillableRemarksNew(s *string) *ErrorLogsUpdateOne {
	if s != nil {
		eluo.SetRemarksNew(*s)
	}
	return eluo
}

// ClearRemarksNew clears the value of the "RemarksNew" field.
func (eluo *ErrorLogsUpdateOne) ClearRemarksNew() *ErrorLogsUpdateOne {
	eluo.mutation.ClearRemarksNew()
	return eluo
}

// SetStatus sets the "Status" field.
func (eluo *ErrorLogsUpdateOne) SetStatus(s string) *ErrorLogsUpdateOne {
	eluo.mutation.SetStatus(s)
	return eluo
}

// SetNillableStatus sets the "Status" field if the given value is not nil.
func (eluo *ErrorLogsUpdateOne) SetNillableStatus(s *string) *ErrorLogsUpdateOne {
	if s != nil {
		eluo.SetStatus(*s)
	}
	return eluo
}

// ClearStatus clears the value of the "Status" field.
func (eluo *ErrorLogsUpdateOne) ClearStatus() *ErrorLogsUpdateOne {
	eluo.mutation.ClearStatus()
	return eluo
}

// SetClosedOn sets the "ClosedOn" field.
func (eluo *ErrorLogsUpdateOne) SetClosedOn(t time.Time) *ErrorLogsUpdateOne {
	eluo.mutation.SetClosedOn(t)
	return eluo
}

// SetNillableClosedOn sets the "ClosedOn" field if the given value is not nil.
func (eluo *ErrorLogsUpdateOne) SetNillableClosedOn(t *time.Time) *ErrorLogsUpdateOne {
	if t != nil {
		eluo.SetClosedOn(*t)
	}
	return eluo
}

// ClearClosedOn clears the value of the "ClosedOn" field.
func (eluo *ErrorLogsUpdateOne) ClearClosedOn() *ErrorLogsUpdateOne {
	eluo.mutation.ClearClosedOn()
	return eluo
}

// Mutation returns the ErrorLogsMutation object of the builder.
func (eluo *ErrorLogsUpdateOne) Mutation() *ErrorLogsMutation {
	return eluo.mutation
}

// Where appends a list predicates to the ErrorLogsUpdate builder.
func (eluo *ErrorLogsUpdateOne) Where(ps ...predicate.ErrorLogs) *ErrorLogsUpdateOne {
	eluo.mutation.Where(ps...)
	return eluo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (eluo *ErrorLogsUpdateOne) Select(field string, fields ...string) *ErrorLogsUpdateOne {
	eluo.fields = append([]string{field}, fields...)
	return eluo
}

// Save executes the query and returns the updated ErrorLogs entity.
func (eluo *ErrorLogsUpdateOne) Save(ctx context.Context) (*ErrorLogs, error) {
	return withHooks(ctx, eluo.sqlSave, eluo.mutation, eluo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (eluo *ErrorLogsUpdateOne) SaveX(ctx context.Context) *ErrorLogs {
	node, err := eluo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (eluo *ErrorLogsUpdateOne) Exec(ctx context.Context) error {
	_, err := eluo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eluo *ErrorLogsUpdateOne) ExecX(ctx context.Context) {
	if err := eluo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (eluo *ErrorLogsUpdateOne) sqlSave(ctx context.Context) (_node *ErrorLogs, err error) {
	_spec := sqlgraph.NewUpdateSpec(errorlogs.Table, errorlogs.Columns, sqlgraph.NewFieldSpec(errorlogs.FieldID, field.TypeInt64))
	id, ok := eluo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ErrorLogs.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := eluo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, errorlogs.FieldID)
		for _, f := range fields {
			if !errorlogs.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != errorlogs.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := eluo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eluo.mutation.Userid(); ok {
		_spec.SetField(errorlogs.FieldUserid, field.TypeString, value)
	}
	if eluo.mutation.UseridCleared() {
		_spec.ClearField(errorlogs.FieldUserid, field.TypeString)
	}
	if value, ok := eluo.mutation.Uniqueid(); ok {
		_spec.SetField(errorlogs.FieldUniqueid, field.TypeInt64, value)
	}
	if value, ok := eluo.mutation.AddedUniqueid(); ok {
		_spec.AddField(errorlogs.FieldUniqueid, field.TypeInt64, value)
	}
	if eluo.mutation.UniqueidCleared() {
		_spec.ClearField(errorlogs.FieldUniqueid, field.TypeInt64)
	}
	if value, ok := eluo.mutation.Usertype(); ok {
		_spec.SetField(errorlogs.FieldUsertype, field.TypeString, value)
	}
	if eluo.mutation.UsertypeCleared() {
		_spec.ClearField(errorlogs.FieldUsertype, field.TypeString)
	}
	if value, ok := eluo.mutation.Userdetails(); ok {
		_spec.SetField(errorlogs.FieldUserdetails, field.TypeString, value)
	}
	if eluo.mutation.UserdetailsCleared() {
		_spec.ClearField(errorlogs.FieldUserdetails, field.TypeString)
	}
	if value, ok := eluo.mutation.Remarks(); ok {
		_spec.SetField(errorlogs.FieldRemarks, field.TypeString, value)
	}
	if eluo.mutation.RemarksCleared() {
		_spec.ClearField(errorlogs.FieldRemarks, field.TypeString)
	}
	if value, ok := eluo.mutation.Action(); ok {
		_spec.SetField(errorlogs.FieldAction, field.TypeString, value)
	}
	if eluo.mutation.ActionCleared() {
		_spec.ClearField(errorlogs.FieldAction, field.TypeString)
	}
	if value, ok := eluo.mutation.Ipaddress(); ok {
		_spec.SetField(errorlogs.FieldIpaddress, field.TypeString, value)
	}
	if eluo.mutation.IpaddressCleared() {
		_spec.ClearField(errorlogs.FieldIpaddress, field.TypeString)
	}
	if value, ok := eluo.mutation.Devicetype(); ok {
		_spec.SetField(errorlogs.FieldDevicetype, field.TypeString, value)
	}
	if eluo.mutation.DevicetypeCleared() {
		_spec.ClearField(errorlogs.FieldDevicetype, field.TypeString)
	}
	if value, ok := eluo.mutation.Os(); ok {
		_spec.SetField(errorlogs.FieldOs, field.TypeString, value)
	}
	if eluo.mutation.OsCleared() {
		_spec.ClearField(errorlogs.FieldOs, field.TypeString)
	}
	if value, ok := eluo.mutation.Browser(); ok {
		_spec.SetField(errorlogs.FieldBrowser, field.TypeString, value)
	}
	if eluo.mutation.BrowserCleared() {
		_spec.ClearField(errorlogs.FieldBrowser, field.TypeString)
	}
	if value, ok := eluo.mutation.Latitude(); ok {
		_spec.SetField(errorlogs.FieldLatitude, field.TypeFloat64, value)
	}
	if value, ok := eluo.mutation.AddedLatitude(); ok {
		_spec.AddField(errorlogs.FieldLatitude, field.TypeFloat64, value)
	}
	if eluo.mutation.LatitudeCleared() {
		_spec.ClearField(errorlogs.FieldLatitude, field.TypeFloat64)
	}
	if value, ok := eluo.mutation.Longitude(); ok {
		_spec.SetField(errorlogs.FieldLongitude, field.TypeFloat64, value)
	}
	if value, ok := eluo.mutation.AddedLongitude(); ok {
		_spec.AddField(errorlogs.FieldLongitude, field.TypeFloat64, value)
	}
	if eluo.mutation.LongitudeCleared() {
		_spec.ClearField(errorlogs.FieldLongitude, field.TypeFloat64)
	}
	if value, ok := eluo.mutation.Eventtime(); ok {
		_spec.SetField(errorlogs.FieldEventtime, field.TypeTime, value)
	}
	if value, ok := eluo.mutation.UpdatedBy(); ok {
		_spec.SetField(errorlogs.FieldUpdatedBy, field.TypeString, value)
	}
	if eluo.mutation.UpdatedByCleared() {
		_spec.ClearField(errorlogs.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := eluo.mutation.UpdatedTime(); ok {
		_spec.SetField(errorlogs.FieldUpdatedTime, field.TypeTime, value)
	}
	if eluo.mutation.UpdatedTimeCleared() {
		_spec.ClearField(errorlogs.FieldUpdatedTime, field.TypeTime)
	}
	if value, ok := eluo.mutation.AssignedTo(); ok {
		_spec.SetField(errorlogs.FieldAssignedTo, field.TypeString, value)
	}
	if eluo.mutation.AssignedToCleared() {
		_spec.ClearField(errorlogs.FieldAssignedTo, field.TypeString)
	}
	if value, ok := eluo.mutation.RemarksNew(); ok {
		_spec.SetField(errorlogs.FieldRemarksNew, field.TypeString, value)
	}
	if eluo.mutation.RemarksNewCleared() {
		_spec.ClearField(errorlogs.FieldRemarksNew, field.TypeString)
	}
	if value, ok := eluo.mutation.Status(); ok {
		_spec.SetField(errorlogs.FieldStatus, field.TypeString, value)
	}
	if eluo.mutation.StatusCleared() {
		_spec.ClearField(errorlogs.FieldStatus, field.TypeString)
	}
	if value, ok := eluo.mutation.ClosedOn(); ok {
		_spec.SetField(errorlogs.FieldClosedOn, field.TypeTime, value)
	}
	if eluo.mutation.ClosedOnCleared() {
		_spec.ClearField(errorlogs.FieldClosedOn, field.TypeTime)
	}
	_node = &ErrorLogs{config: eluo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, eluo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{errorlogs.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	eluo.mutation.done = true
	return _node, nil
}
