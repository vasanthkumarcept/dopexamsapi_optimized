// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"recruit/ent/exam"
	"recruit/ent/examcalendar"
	"recruit/ent/predicate"
	"recruit/ent/vacancyyear"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// VacancyYearUpdate is the builder for updating VacancyYear entities.
type VacancyYearUpdate struct {
	config
	hooks    []Hook
	mutation *VacancyYearMutation
}

// Where appends a list predicates to the VacancyYearUpdate builder.
func (vyu *VacancyYearUpdate) Where(ps ...predicate.VacancyYear) *VacancyYearUpdate {
	vyu.mutation.Where(ps...)
	return vyu
}

// SetFromDate sets the "FromDate" field.
func (vyu *VacancyYearUpdate) SetFromDate(t time.Time) *VacancyYearUpdate {
	vyu.mutation.SetFromDate(t)
	return vyu
}

// SetToDate sets the "ToDate" field.
func (vyu *VacancyYearUpdate) SetToDate(t time.Time) *VacancyYearUpdate {
	vyu.mutation.SetToDate(t)
	return vyu
}

// SetNotifyCode sets the "NotifyCode" field.
func (vyu *VacancyYearUpdate) SetNotifyCode(i int32) *VacancyYearUpdate {
	vyu.mutation.ResetNotifyCode()
	vyu.mutation.SetNotifyCode(i)
	return vyu
}

// SetNillableNotifyCode sets the "NotifyCode" field if the given value is not nil.
func (vyu *VacancyYearUpdate) SetNillableNotifyCode(i *int32) *VacancyYearUpdate {
	if i != nil {
		vyu.SetNotifyCode(*i)
	}
	return vyu
}

// AddNotifyCode adds i to the "NotifyCode" field.
func (vyu *VacancyYearUpdate) AddNotifyCode(i int32) *VacancyYearUpdate {
	vyu.mutation.AddNotifyCode(i)
	return vyu
}

// ClearNotifyCode clears the value of the "NotifyCode" field.
func (vyu *VacancyYearUpdate) ClearNotifyCode() *VacancyYearUpdate {
	vyu.mutation.ClearNotifyCode()
	return vyu
}

// SetVacancyYear sets the "VacancyYear" field.
func (vyu *VacancyYearUpdate) SetVacancyYear(s string) *VacancyYearUpdate {
	vyu.mutation.SetVacancyYear(s)
	return vyu
}

// SetCalendarCode sets the "CalendarCode" field.
func (vyu *VacancyYearUpdate) SetCalendarCode(i int32) *VacancyYearUpdate {
	vyu.mutation.ResetCalendarCode()
	vyu.mutation.SetCalendarCode(i)
	return vyu
}

// SetNillableCalendarCode sets the "CalendarCode" field if the given value is not nil.
func (vyu *VacancyYearUpdate) SetNillableCalendarCode(i *int32) *VacancyYearUpdate {
	if i != nil {
		vyu.SetCalendarCode(*i)
	}
	return vyu
}

// AddCalendarCode adds i to the "CalendarCode" field.
func (vyu *VacancyYearUpdate) AddCalendarCode(i int32) *VacancyYearUpdate {
	vyu.mutation.AddCalendarCode(i)
	return vyu
}

// ClearCalendarCode clears the value of the "CalendarCode" field.
func (vyu *VacancyYearUpdate) ClearCalendarCode() *VacancyYearUpdate {
	vyu.mutation.ClearCalendarCode()
	return vyu
}

// AddVacancyRefIDs adds the "vacancy_ref" edge to the ExamCalendar entity by IDs.
func (vyu *VacancyYearUpdate) AddVacancyRefIDs(ids ...int32) *VacancyYearUpdate {
	vyu.mutation.AddVacancyRefIDs(ids...)
	return vyu
}

// AddVacancyRef adds the "vacancy_ref" edges to the ExamCalendar entity.
func (vyu *VacancyYearUpdate) AddVacancyRef(e ...*ExamCalendar) *VacancyYearUpdate {
	ids := make([]int32, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return vyu.AddVacancyRefIDs(ids...)
}

// AddExamIDs adds the "exams" edge to the Exam entity by IDs.
func (vyu *VacancyYearUpdate) AddExamIDs(ids ...int32) *VacancyYearUpdate {
	vyu.mutation.AddExamIDs(ids...)
	return vyu
}

// AddExams adds the "exams" edges to the Exam entity.
func (vyu *VacancyYearUpdate) AddExams(e ...*Exam) *VacancyYearUpdate {
	ids := make([]int32, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return vyu.AddExamIDs(ids...)
}

// Mutation returns the VacancyYearMutation object of the builder.
func (vyu *VacancyYearUpdate) Mutation() *VacancyYearMutation {
	return vyu.mutation
}

// ClearVacancyRef clears all "vacancy_ref" edges to the ExamCalendar entity.
func (vyu *VacancyYearUpdate) ClearVacancyRef() *VacancyYearUpdate {
	vyu.mutation.ClearVacancyRef()
	return vyu
}

// RemoveVacancyRefIDs removes the "vacancy_ref" edge to ExamCalendar entities by IDs.
func (vyu *VacancyYearUpdate) RemoveVacancyRefIDs(ids ...int32) *VacancyYearUpdate {
	vyu.mutation.RemoveVacancyRefIDs(ids...)
	return vyu
}

// RemoveVacancyRef removes "vacancy_ref" edges to ExamCalendar entities.
func (vyu *VacancyYearUpdate) RemoveVacancyRef(e ...*ExamCalendar) *VacancyYearUpdate {
	ids := make([]int32, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return vyu.RemoveVacancyRefIDs(ids...)
}

// ClearExams clears all "exams" edges to the Exam entity.
func (vyu *VacancyYearUpdate) ClearExams() *VacancyYearUpdate {
	vyu.mutation.ClearExams()
	return vyu
}

// RemoveExamIDs removes the "exams" edge to Exam entities by IDs.
func (vyu *VacancyYearUpdate) RemoveExamIDs(ids ...int32) *VacancyYearUpdate {
	vyu.mutation.RemoveExamIDs(ids...)
	return vyu
}

// RemoveExams removes "exams" edges to Exam entities.
func (vyu *VacancyYearUpdate) RemoveExams(e ...*Exam) *VacancyYearUpdate {
	ids := make([]int32, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return vyu.RemoveExamIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (vyu *VacancyYearUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, vyu.sqlSave, vyu.mutation, vyu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (vyu *VacancyYearUpdate) SaveX(ctx context.Context) int {
	affected, err := vyu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (vyu *VacancyYearUpdate) Exec(ctx context.Context) error {
	_, err := vyu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vyu *VacancyYearUpdate) ExecX(ctx context.Context) {
	if err := vyu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (vyu *VacancyYearUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(vacancyyear.Table, vacancyyear.Columns, sqlgraph.NewFieldSpec(vacancyyear.FieldID, field.TypeInt32))
	if ps := vyu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vyu.mutation.FromDate(); ok {
		_spec.SetField(vacancyyear.FieldFromDate, field.TypeTime, value)
	}
	if value, ok := vyu.mutation.ToDate(); ok {
		_spec.SetField(vacancyyear.FieldToDate, field.TypeTime, value)
	}
	if value, ok := vyu.mutation.NotifyCode(); ok {
		_spec.SetField(vacancyyear.FieldNotifyCode, field.TypeInt32, value)
	}
	if value, ok := vyu.mutation.AddedNotifyCode(); ok {
		_spec.AddField(vacancyyear.FieldNotifyCode, field.TypeInt32, value)
	}
	if vyu.mutation.NotifyCodeCleared() {
		_spec.ClearField(vacancyyear.FieldNotifyCode, field.TypeInt32)
	}
	if value, ok := vyu.mutation.VacancyYear(); ok {
		_spec.SetField(vacancyyear.FieldVacancyYear, field.TypeString, value)
	}
	if value, ok := vyu.mutation.CalendarCode(); ok {
		_spec.SetField(vacancyyear.FieldCalendarCode, field.TypeInt32, value)
	}
	if value, ok := vyu.mutation.AddedCalendarCode(); ok {
		_spec.AddField(vacancyyear.FieldCalendarCode, field.TypeInt32, value)
	}
	if vyu.mutation.CalendarCodeCleared() {
		_spec.ClearField(vacancyyear.FieldCalendarCode, field.TypeInt32)
	}
	if vyu.mutation.VacancyRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   vacancyyear.VacancyRefTable,
			Columns: []string{vacancyyear.VacancyRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(examcalendar.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vyu.mutation.RemovedVacancyRefIDs(); len(nodes) > 0 && !vyu.mutation.VacancyRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   vacancyyear.VacancyRefTable,
			Columns: []string{vacancyyear.VacancyRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(examcalendar.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vyu.mutation.VacancyRefIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   vacancyyear.VacancyRefTable,
			Columns: []string{vacancyyear.VacancyRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(examcalendar.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if vyu.mutation.ExamsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   vacancyyear.ExamsTable,
			Columns: []string{vacancyyear.ExamsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vyu.mutation.RemovedExamsIDs(); len(nodes) > 0 && !vyu.mutation.ExamsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   vacancyyear.ExamsTable,
			Columns: []string{vacancyyear.ExamsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vyu.mutation.ExamsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   vacancyyear.ExamsTable,
			Columns: []string{vacancyyear.ExamsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, vyu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{vacancyyear.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	vyu.mutation.done = true
	return n, nil
}

// VacancyYearUpdateOne is the builder for updating a single VacancyYear entity.
type VacancyYearUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *VacancyYearMutation
}

// SetFromDate sets the "FromDate" field.
func (vyuo *VacancyYearUpdateOne) SetFromDate(t time.Time) *VacancyYearUpdateOne {
	vyuo.mutation.SetFromDate(t)
	return vyuo
}

// SetToDate sets the "ToDate" field.
func (vyuo *VacancyYearUpdateOne) SetToDate(t time.Time) *VacancyYearUpdateOne {
	vyuo.mutation.SetToDate(t)
	return vyuo
}

// SetNotifyCode sets the "NotifyCode" field.
func (vyuo *VacancyYearUpdateOne) SetNotifyCode(i int32) *VacancyYearUpdateOne {
	vyuo.mutation.ResetNotifyCode()
	vyuo.mutation.SetNotifyCode(i)
	return vyuo
}

// SetNillableNotifyCode sets the "NotifyCode" field if the given value is not nil.
func (vyuo *VacancyYearUpdateOne) SetNillableNotifyCode(i *int32) *VacancyYearUpdateOne {
	if i != nil {
		vyuo.SetNotifyCode(*i)
	}
	return vyuo
}

// AddNotifyCode adds i to the "NotifyCode" field.
func (vyuo *VacancyYearUpdateOne) AddNotifyCode(i int32) *VacancyYearUpdateOne {
	vyuo.mutation.AddNotifyCode(i)
	return vyuo
}

// ClearNotifyCode clears the value of the "NotifyCode" field.
func (vyuo *VacancyYearUpdateOne) ClearNotifyCode() *VacancyYearUpdateOne {
	vyuo.mutation.ClearNotifyCode()
	return vyuo
}

// SetVacancyYear sets the "VacancyYear" field.
func (vyuo *VacancyYearUpdateOne) SetVacancyYear(s string) *VacancyYearUpdateOne {
	vyuo.mutation.SetVacancyYear(s)
	return vyuo
}

// SetCalendarCode sets the "CalendarCode" field.
func (vyuo *VacancyYearUpdateOne) SetCalendarCode(i int32) *VacancyYearUpdateOne {
	vyuo.mutation.ResetCalendarCode()
	vyuo.mutation.SetCalendarCode(i)
	return vyuo
}

// SetNillableCalendarCode sets the "CalendarCode" field if the given value is not nil.
func (vyuo *VacancyYearUpdateOne) SetNillableCalendarCode(i *int32) *VacancyYearUpdateOne {
	if i != nil {
		vyuo.SetCalendarCode(*i)
	}
	return vyuo
}

// AddCalendarCode adds i to the "CalendarCode" field.
func (vyuo *VacancyYearUpdateOne) AddCalendarCode(i int32) *VacancyYearUpdateOne {
	vyuo.mutation.AddCalendarCode(i)
	return vyuo
}

// ClearCalendarCode clears the value of the "CalendarCode" field.
func (vyuo *VacancyYearUpdateOne) ClearCalendarCode() *VacancyYearUpdateOne {
	vyuo.mutation.ClearCalendarCode()
	return vyuo
}

// AddVacancyRefIDs adds the "vacancy_ref" edge to the ExamCalendar entity by IDs.
func (vyuo *VacancyYearUpdateOne) AddVacancyRefIDs(ids ...int32) *VacancyYearUpdateOne {
	vyuo.mutation.AddVacancyRefIDs(ids...)
	return vyuo
}

// AddVacancyRef adds the "vacancy_ref" edges to the ExamCalendar entity.
func (vyuo *VacancyYearUpdateOne) AddVacancyRef(e ...*ExamCalendar) *VacancyYearUpdateOne {
	ids := make([]int32, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return vyuo.AddVacancyRefIDs(ids...)
}

// AddExamIDs adds the "exams" edge to the Exam entity by IDs.
func (vyuo *VacancyYearUpdateOne) AddExamIDs(ids ...int32) *VacancyYearUpdateOne {
	vyuo.mutation.AddExamIDs(ids...)
	return vyuo
}

// AddExams adds the "exams" edges to the Exam entity.
func (vyuo *VacancyYearUpdateOne) AddExams(e ...*Exam) *VacancyYearUpdateOne {
	ids := make([]int32, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return vyuo.AddExamIDs(ids...)
}

// Mutation returns the VacancyYearMutation object of the builder.
func (vyuo *VacancyYearUpdateOne) Mutation() *VacancyYearMutation {
	return vyuo.mutation
}

// ClearVacancyRef clears all "vacancy_ref" edges to the ExamCalendar entity.
func (vyuo *VacancyYearUpdateOne) ClearVacancyRef() *VacancyYearUpdateOne {
	vyuo.mutation.ClearVacancyRef()
	return vyuo
}

// RemoveVacancyRefIDs removes the "vacancy_ref" edge to ExamCalendar entities by IDs.
func (vyuo *VacancyYearUpdateOne) RemoveVacancyRefIDs(ids ...int32) *VacancyYearUpdateOne {
	vyuo.mutation.RemoveVacancyRefIDs(ids...)
	return vyuo
}

// RemoveVacancyRef removes "vacancy_ref" edges to ExamCalendar entities.
func (vyuo *VacancyYearUpdateOne) RemoveVacancyRef(e ...*ExamCalendar) *VacancyYearUpdateOne {
	ids := make([]int32, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return vyuo.RemoveVacancyRefIDs(ids...)
}

// ClearExams clears all "exams" edges to the Exam entity.
func (vyuo *VacancyYearUpdateOne) ClearExams() *VacancyYearUpdateOne {
	vyuo.mutation.ClearExams()
	return vyuo
}

// RemoveExamIDs removes the "exams" edge to Exam entities by IDs.
func (vyuo *VacancyYearUpdateOne) RemoveExamIDs(ids ...int32) *VacancyYearUpdateOne {
	vyuo.mutation.RemoveExamIDs(ids...)
	return vyuo
}

// RemoveExams removes "exams" edges to Exam entities.
func (vyuo *VacancyYearUpdateOne) RemoveExams(e ...*Exam) *VacancyYearUpdateOne {
	ids := make([]int32, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return vyuo.RemoveExamIDs(ids...)
}

// Where appends a list predicates to the VacancyYearUpdate builder.
func (vyuo *VacancyYearUpdateOne) Where(ps ...predicate.VacancyYear) *VacancyYearUpdateOne {
	vyuo.mutation.Where(ps...)
	return vyuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (vyuo *VacancyYearUpdateOne) Select(field string, fields ...string) *VacancyYearUpdateOne {
	vyuo.fields = append([]string{field}, fields...)
	return vyuo
}

// Save executes the query and returns the updated VacancyYear entity.
func (vyuo *VacancyYearUpdateOne) Save(ctx context.Context) (*VacancyYear, error) {
	return withHooks(ctx, vyuo.sqlSave, vyuo.mutation, vyuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (vyuo *VacancyYearUpdateOne) SaveX(ctx context.Context) *VacancyYear {
	node, err := vyuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (vyuo *VacancyYearUpdateOne) Exec(ctx context.Context) error {
	_, err := vyuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vyuo *VacancyYearUpdateOne) ExecX(ctx context.Context) {
	if err := vyuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (vyuo *VacancyYearUpdateOne) sqlSave(ctx context.Context) (_node *VacancyYear, err error) {
	_spec := sqlgraph.NewUpdateSpec(vacancyyear.Table, vacancyyear.Columns, sqlgraph.NewFieldSpec(vacancyyear.FieldID, field.TypeInt32))
	id, ok := vyuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "VacancyYear.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := vyuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, vacancyyear.FieldID)
		for _, f := range fields {
			if !vacancyyear.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != vacancyyear.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := vyuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vyuo.mutation.FromDate(); ok {
		_spec.SetField(vacancyyear.FieldFromDate, field.TypeTime, value)
	}
	if value, ok := vyuo.mutation.ToDate(); ok {
		_spec.SetField(vacancyyear.FieldToDate, field.TypeTime, value)
	}
	if value, ok := vyuo.mutation.NotifyCode(); ok {
		_spec.SetField(vacancyyear.FieldNotifyCode, field.TypeInt32, value)
	}
	if value, ok := vyuo.mutation.AddedNotifyCode(); ok {
		_spec.AddField(vacancyyear.FieldNotifyCode, field.TypeInt32, value)
	}
	if vyuo.mutation.NotifyCodeCleared() {
		_spec.ClearField(vacancyyear.FieldNotifyCode, field.TypeInt32)
	}
	if value, ok := vyuo.mutation.VacancyYear(); ok {
		_spec.SetField(vacancyyear.FieldVacancyYear, field.TypeString, value)
	}
	if value, ok := vyuo.mutation.CalendarCode(); ok {
		_spec.SetField(vacancyyear.FieldCalendarCode, field.TypeInt32, value)
	}
	if value, ok := vyuo.mutation.AddedCalendarCode(); ok {
		_spec.AddField(vacancyyear.FieldCalendarCode, field.TypeInt32, value)
	}
	if vyuo.mutation.CalendarCodeCleared() {
		_spec.ClearField(vacancyyear.FieldCalendarCode, field.TypeInt32)
	}
	if vyuo.mutation.VacancyRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   vacancyyear.VacancyRefTable,
			Columns: []string{vacancyyear.VacancyRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(examcalendar.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vyuo.mutation.RemovedVacancyRefIDs(); len(nodes) > 0 && !vyuo.mutation.VacancyRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   vacancyyear.VacancyRefTable,
			Columns: []string{vacancyyear.VacancyRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(examcalendar.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vyuo.mutation.VacancyRefIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   vacancyyear.VacancyRefTable,
			Columns: []string{vacancyyear.VacancyRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(examcalendar.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if vyuo.mutation.ExamsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   vacancyyear.ExamsTable,
			Columns: []string{vacancyyear.ExamsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vyuo.mutation.RemovedExamsIDs(); len(nodes) > 0 && !vyuo.mutation.ExamsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   vacancyyear.ExamsTable,
			Columns: []string{vacancyyear.ExamsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vyuo.mutation.ExamsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   vacancyyear.ExamsTable,
			Columns: []string{vacancyyear.ExamsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &VacancyYear{config: vyuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, vyuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{vacancyyear.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	vyuo.mutation.done = true
	return _node, nil
}
