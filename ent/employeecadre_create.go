// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"recruit/ent/employeecadre"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// EmployeeCadreCreate is the builder for creating a EmployeeCadre entity.
type EmployeeCadreCreate struct {
	config
	mutation *EmployeeCadreMutation
	hooks    []Hook
}

// SetCadrecode sets the "cadrecode" field.
func (ecc *EmployeeCadreCreate) SetCadrecode(s string) *EmployeeCadreCreate {
	ecc.mutation.SetCadrecode(s)
	return ecc
}

// SetCadredescription sets the "cadredescription" field.
func (ecc *EmployeeCadreCreate) SetCadredescription(s string) *EmployeeCadreCreate {
	ecc.mutation.SetCadredescription(s)
	return ecc
}

// SetPayLevel sets the "PayLevel" field.
func (ecc *EmployeeCadreCreate) SetPayLevel(s string) *EmployeeCadreCreate {
	ecc.mutation.SetPayLevel(s)
	return ecc
}

// SetScale sets the "Scale" field.
func (ecc *EmployeeCadreCreate) SetScale(s string) *EmployeeCadreCreate {
	ecc.mutation.SetScale(s)
	return ecc
}

// SetExamconfigurationExamcode sets the "ExamconfigurationExamcode" field.
func (ecc *EmployeeCadreCreate) SetExamconfigurationExamcode(i int32) *EmployeeCadreCreate {
	ecc.mutation.SetExamconfigurationExamcode(i)
	return ecc
}

// SetNillableExamconfigurationExamcode sets the "ExamconfigurationExamcode" field if the given value is not nil.
func (ecc *EmployeeCadreCreate) SetNillableExamconfigurationExamcode(i *int32) *EmployeeCadreCreate {
	if i != nil {
		ecc.SetExamconfigurationExamcode(*i)
	}
	return ecc
}

// SetExamShortDescription sets the "ExamShortDescription" field.
func (ecc *EmployeeCadreCreate) SetExamShortDescription(s string) *EmployeeCadreCreate {
	ecc.mutation.SetExamShortDescription(s)
	return ecc
}

// SetNillableExamShortDescription sets the "ExamShortDescription" field if the given value is not nil.
func (ecc *EmployeeCadreCreate) SetNillableExamShortDescription(s *string) *EmployeeCadreCreate {
	if s != nil {
		ecc.SetExamShortDescription(*s)
	}
	return ecc
}

// SetExamLongDescription sets the "ExamLongDescription" field.
func (ecc *EmployeeCadreCreate) SetExamLongDescription(s string) *EmployeeCadreCreate {
	ecc.mutation.SetExamLongDescription(s)
	return ecc
}

// SetNillableExamLongDescription sets the "ExamLongDescription" field if the given value is not nil.
func (ecc *EmployeeCadreCreate) SetNillableExamLongDescription(s *string) *EmployeeCadreCreate {
	if s != nil {
		ecc.SetExamLongDescription(*s)
	}
	return ecc
}

// SetEmployeePostPostId sets the "EmployeePost_postId" field.
func (ecc *EmployeeCadreCreate) SetEmployeePostPostId(i int32) *EmployeeCadreCreate {
	ecc.mutation.SetEmployeePostPostId(i)
	return ecc
}

// SetNillableEmployeePostPostId sets the "EmployeePost_postId" field if the given value is not nil.
func (ecc *EmployeeCadreCreate) SetNillableEmployeePostPostId(i *int32) *EmployeeCadreCreate {
	if i != nil {
		ecc.SetEmployeePostPostId(*i)
	}
	return ecc
}

// SetEmployeeGroupGroupId sets the "EmployeeGroup_groupId" field.
func (ecc *EmployeeCadreCreate) SetEmployeeGroupGroupId(i int32) *EmployeeCadreCreate {
	ecc.mutation.SetEmployeeGroupGroupId(i)
	return ecc
}

// SetNillableEmployeeGroupGroupId sets the "EmployeeGroup_groupId" field if the given value is not nil.
func (ecc *EmployeeCadreCreate) SetNillableEmployeeGroupGroupId(i *int32) *EmployeeCadreCreate {
	if i != nil {
		ecc.SetEmployeeGroupGroupId(*i)
	}
	return ecc
}

// SetGroupDescription sets the "GroupDescription" field.
func (ecc *EmployeeCadreCreate) SetGroupDescription(s string) *EmployeeCadreCreate {
	ecc.mutation.SetGroupDescription(s)
	return ecc
}

// SetNillableGroupDescription sets the "GroupDescription" field if the given value is not nil.
func (ecc *EmployeeCadreCreate) SetNillableGroupDescription(s *string) *EmployeeCadreCreate {
	if s != nil {
		ecc.SetGroupDescription(*s)
	}
	return ecc
}

// SetPostCode sets the "PostCode" field.
func (ecc *EmployeeCadreCreate) SetPostCode(s string) *EmployeeCadreCreate {
	ecc.mutation.SetPostCode(s)
	return ecc
}

// SetNillablePostCode sets the "PostCode" field if the given value is not nil.
func (ecc *EmployeeCadreCreate) SetNillablePostCode(s *string) *EmployeeCadreCreate {
	if s != nil {
		ecc.SetPostCode(*s)
	}
	return ecc
}

// SetPostDescription sets the "PostDescription" field.
func (ecc *EmployeeCadreCreate) SetPostDescription(s string) *EmployeeCadreCreate {
	ecc.mutation.SetPostDescription(s)
	return ecc
}

// SetNillablePostDescription sets the "PostDescription" field if the given value is not nil.
func (ecc *EmployeeCadreCreate) SetNillablePostDescription(s *string) *EmployeeCadreCreate {
	if s != nil {
		ecc.SetPostDescription(*s)
	}
	return ecc
}

// SetBaseCadre sets the "BaseCadre" field.
func (ecc *EmployeeCadreCreate) SetBaseCadre(i int32) *EmployeeCadreCreate {
	ecc.mutation.SetBaseCadre(i)
	return ecc
}

// SetNillableBaseCadre sets the "BaseCadre" field if the given value is not nil.
func (ecc *EmployeeCadreCreate) SetNillableBaseCadre(i *int32) *EmployeeCadreCreate {
	if i != nil {
		ecc.SetBaseCadre(*i)
	}
	return ecc
}

// SetGdsService sets the "GdsService" field.
func (ecc *EmployeeCadreCreate) SetGdsService(i int32) *EmployeeCadreCreate {
	ecc.mutation.SetGdsService(i)
	return ecc
}

// SetNillableGdsService sets the "GdsService" field if the given value is not nil.
func (ecc *EmployeeCadreCreate) SetNillableGdsService(i *int32) *EmployeeCadreCreate {
	if i != nil {
		ecc.SetGdsService(*i)
	}
	return ecc
}

// SetAgeCriteria sets the "ageCriteria" field.
func (ecc *EmployeeCadreCreate) SetAgeCriteria(i int32) *EmployeeCadreCreate {
	ecc.mutation.SetAgeCriteria(i)
	return ecc
}

// SetNillableAgeCriteria sets the "ageCriteria" field if the given value is not nil.
func (ecc *EmployeeCadreCreate) SetNillableAgeCriteria(i *int32) *EmployeeCadreCreate {
	if i != nil {
		ecc.SetAgeCriteria(*i)
	}
	return ecc
}

// SetServiceCriteria sets the "ServiceCriteria" field.
func (ecc *EmployeeCadreCreate) SetServiceCriteria(i int32) *EmployeeCadreCreate {
	ecc.mutation.SetServiceCriteria(i)
	return ecc
}

// SetNillableServiceCriteria sets the "ServiceCriteria" field if the given value is not nil.
func (ecc *EmployeeCadreCreate) SetNillableServiceCriteria(i *int32) *EmployeeCadreCreate {
	if i != nil {
		ecc.SetServiceCriteria(*i)
	}
	return ecc
}

// SetDrivingLicenceCriteria sets the "DrivingLicenceCriteria" field.
func (ecc *EmployeeCadreCreate) SetDrivingLicenceCriteria(i int32) *EmployeeCadreCreate {
	ecc.mutation.SetDrivingLicenceCriteria(i)
	return ecc
}

// SetNillableDrivingLicenceCriteria sets the "DrivingLicenceCriteria" field if the given value is not nil.
func (ecc *EmployeeCadreCreate) SetNillableDrivingLicenceCriteria(i *int32) *EmployeeCadreCreate {
	if i != nil {
		ecc.SetDrivingLicenceCriteria(*i)
	}
	return ecc
}

// SetComputerKnowledge sets the "ComputerKnowledge" field.
func (ecc *EmployeeCadreCreate) SetComputerKnowledge(i int32) *EmployeeCadreCreate {
	ecc.mutation.SetComputerKnowledge(i)
	return ecc
}

// SetNillableComputerKnowledge sets the "ComputerKnowledge" field if the given value is not nil.
func (ecc *EmployeeCadreCreate) SetNillableComputerKnowledge(i *int32) *EmployeeCadreCreate {
	if i != nil {
		ecc.SetComputerKnowledge(*i)
	}
	return ecc
}

// SetEligibiltyBasedOnLevelOfPaymatrix sets the "EligibiltyBasedOnLevelOfPaymatrix" field.
func (ecc *EmployeeCadreCreate) SetEligibiltyBasedOnLevelOfPaymatrix(i int32) *EmployeeCadreCreate {
	ecc.mutation.SetEligibiltyBasedOnLevelOfPaymatrix(i)
	return ecc
}

// SetNillableEligibiltyBasedOnLevelOfPaymatrix sets the "EligibiltyBasedOnLevelOfPaymatrix" field if the given value is not nil.
func (ecc *EmployeeCadreCreate) SetNillableEligibiltyBasedOnLevelOfPaymatrix(i *int32) *EmployeeCadreCreate {
	if i != nil {
		ecc.SetEligibiltyBasedOnLevelOfPaymatrix(*i)
	}
	return ecc
}

// SetEducationDetailsEducationCode sets the "EducationDetails_educationCode" field.
func (ecc *EmployeeCadreCreate) SetEducationDetailsEducationCode(i int32) *EmployeeCadreCreate {
	ecc.mutation.SetEducationDetailsEducationCode(i)
	return ecc
}

// SetNillableEducationDetailsEducationCode sets the "EducationDetails_educationCode" field if the given value is not nil.
func (ecc *EmployeeCadreCreate) SetNillableEducationDetailsEducationCode(i *int32) *EmployeeCadreCreate {
	if i != nil {
		ecc.SetEducationDetailsEducationCode(*i)
	}
	return ecc
}

// SetEducationDescription sets the "EducationDescription" field.
func (ecc *EmployeeCadreCreate) SetEducationDescription(s string) *EmployeeCadreCreate {
	ecc.mutation.SetEducationDescription(s)
	return ecc
}

// SetNillableEducationDescription sets the "EducationDescription" field if the given value is not nil.
func (ecc *EmployeeCadreCreate) SetNillableEducationDescription(s *string) *EmployeeCadreCreate {
	if s != nil {
		ecc.SetEducationDescription(*s)
	}
	return ecc
}

// SetOrderNumber sets the "OrderNumber" field.
func (ecc *EmployeeCadreCreate) SetOrderNumber(s string) *EmployeeCadreCreate {
	ecc.mutation.SetOrderNumber(s)
	return ecc
}

// SetNillableOrderNumber sets the "OrderNumber" field if the given value is not nil.
func (ecc *EmployeeCadreCreate) SetNillableOrderNumber(s *string) *EmployeeCadreCreate {
	if s != nil {
		ecc.SetOrderNumber(*s)
	}
	return ecc
}

// SetStatus sets the "Status" field.
func (ecc *EmployeeCadreCreate) SetStatus(s string) *EmployeeCadreCreate {
	ecc.mutation.SetStatus(s)
	return ecc
}

// SetNillableStatus sets the "Status" field if the given value is not nil.
func (ecc *EmployeeCadreCreate) SetNillableStatus(s *string) *EmployeeCadreCreate {
	if s != nil {
		ecc.SetStatus(*s)
	}
	return ecc
}

// SetCreatedById sets the "CreatedById" field.
func (ecc *EmployeeCadreCreate) SetCreatedById(i int32) *EmployeeCadreCreate {
	ecc.mutation.SetCreatedById(i)
	return ecc
}

// SetNillableCreatedById sets the "CreatedById" field if the given value is not nil.
func (ecc *EmployeeCadreCreate) SetNillableCreatedById(i *int32) *EmployeeCadreCreate {
	if i != nil {
		ecc.SetCreatedById(*i)
	}
	return ecc
}

// SetCreatedByUserName sets the "CreatedByUserName" field.
func (ecc *EmployeeCadreCreate) SetCreatedByUserName(s string) *EmployeeCadreCreate {
	ecc.mutation.SetCreatedByUserName(s)
	return ecc
}

// SetNillableCreatedByUserName sets the "CreatedByUserName" field if the given value is not nil.
func (ecc *EmployeeCadreCreate) SetNillableCreatedByUserName(s *string) *EmployeeCadreCreate {
	if s != nil {
		ecc.SetCreatedByUserName(*s)
	}
	return ecc
}

// SetCreatedByEmployeeId sets the "CreatedByEmployeeId" field.
func (ecc *EmployeeCadreCreate) SetCreatedByEmployeeId(s string) *EmployeeCadreCreate {
	ecc.mutation.SetCreatedByEmployeeId(s)
	return ecc
}

// SetNillableCreatedByEmployeeId sets the "CreatedByEmployeeId" field if the given value is not nil.
func (ecc *EmployeeCadreCreate) SetNillableCreatedByEmployeeId(s *string) *EmployeeCadreCreate {
	if s != nil {
		ecc.SetCreatedByEmployeeId(*s)
	}
	return ecc
}

// SetCreatedByDesignation sets the "CreatedByDesignation" field.
func (ecc *EmployeeCadreCreate) SetCreatedByDesignation(s string) *EmployeeCadreCreate {
	ecc.mutation.SetCreatedByDesignation(s)
	return ecc
}

// SetNillableCreatedByDesignation sets the "CreatedByDesignation" field if the given value is not nil.
func (ecc *EmployeeCadreCreate) SetNillableCreatedByDesignation(s *string) *EmployeeCadreCreate {
	if s != nil {
		ecc.SetCreatedByDesignation(*s)
	}
	return ecc
}

// SetCreatedDate sets the "CreatedDate" field.
func (ecc *EmployeeCadreCreate) SetCreatedDate(t time.Time) *EmployeeCadreCreate {
	ecc.mutation.SetCreatedDate(t)
	return ecc
}

// SetNillableCreatedDate sets the "CreatedDate" field if the given value is not nil.
func (ecc *EmployeeCadreCreate) SetNillableCreatedDate(t *time.Time) *EmployeeCadreCreate {
	if t != nil {
		ecc.SetCreatedDate(*t)
	}
	return ecc
}

// SetVerifiedById sets the "VerifiedById" field.
func (ecc *EmployeeCadreCreate) SetVerifiedById(i int64) *EmployeeCadreCreate {
	ecc.mutation.SetVerifiedById(i)
	return ecc
}

// SetNillableVerifiedById sets the "VerifiedById" field if the given value is not nil.
func (ecc *EmployeeCadreCreate) SetNillableVerifiedById(i *int64) *EmployeeCadreCreate {
	if i != nil {
		ecc.SetVerifiedById(*i)
	}
	return ecc
}

// SetVerifiedByUserName sets the "VerifiedByUserName" field.
func (ecc *EmployeeCadreCreate) SetVerifiedByUserName(s string) *EmployeeCadreCreate {
	ecc.mutation.SetVerifiedByUserName(s)
	return ecc
}

// SetNillableVerifiedByUserName sets the "VerifiedByUserName" field if the given value is not nil.
func (ecc *EmployeeCadreCreate) SetNillableVerifiedByUserName(s *string) *EmployeeCadreCreate {
	if s != nil {
		ecc.SetVerifiedByUserName(*s)
	}
	return ecc
}

// SetVerifiedByEmployeeId sets the "VerifiedByEmployeeId" field.
func (ecc *EmployeeCadreCreate) SetVerifiedByEmployeeId(s string) *EmployeeCadreCreate {
	ecc.mutation.SetVerifiedByEmployeeId(s)
	return ecc
}

// SetNillableVerifiedByEmployeeId sets the "VerifiedByEmployeeId" field if the given value is not nil.
func (ecc *EmployeeCadreCreate) SetNillableVerifiedByEmployeeId(s *string) *EmployeeCadreCreate {
	if s != nil {
		ecc.SetVerifiedByEmployeeId(*s)
	}
	return ecc
}

// SetVerifiedByDesignation sets the "VerifiedByDesignation" field.
func (ecc *EmployeeCadreCreate) SetVerifiedByDesignation(s string) *EmployeeCadreCreate {
	ecc.mutation.SetVerifiedByDesignation(s)
	return ecc
}

// SetNillableVerifiedByDesignation sets the "VerifiedByDesignation" field if the given value is not nil.
func (ecc *EmployeeCadreCreate) SetNillableVerifiedByDesignation(s *string) *EmployeeCadreCreate {
	if s != nil {
		ecc.SetVerifiedByDesignation(*s)
	}
	return ecc
}

// SetVerifiedDate sets the "VerifiedDate" field.
func (ecc *EmployeeCadreCreate) SetVerifiedDate(t time.Time) *EmployeeCadreCreate {
	ecc.mutation.SetVerifiedDate(t)
	return ecc
}

// SetNillableVerifiedDate sets the "VerifiedDate" field if the given value is not nil.
func (ecc *EmployeeCadreCreate) SetNillableVerifiedDate(t *time.Time) *EmployeeCadreCreate {
	if t != nil {
		ecc.SetVerifiedDate(*t)
	}
	return ecc
}

// SetDeletedById sets the "DeletedById" field.
func (ecc *EmployeeCadreCreate) SetDeletedById(i int64) *EmployeeCadreCreate {
	ecc.mutation.SetDeletedById(i)
	return ecc
}

// SetNillableDeletedById sets the "DeletedById" field if the given value is not nil.
func (ecc *EmployeeCadreCreate) SetNillableDeletedById(i *int64) *EmployeeCadreCreate {
	if i != nil {
		ecc.SetDeletedById(*i)
	}
	return ecc
}

// SetDeletedByUserName sets the "DeletedByUserName" field.
func (ecc *EmployeeCadreCreate) SetDeletedByUserName(s string) *EmployeeCadreCreate {
	ecc.mutation.SetDeletedByUserName(s)
	return ecc
}

// SetNillableDeletedByUserName sets the "DeletedByUserName" field if the given value is not nil.
func (ecc *EmployeeCadreCreate) SetNillableDeletedByUserName(s *string) *EmployeeCadreCreate {
	if s != nil {
		ecc.SetDeletedByUserName(*s)
	}
	return ecc
}

// SetDeletedByEmployeeId sets the "DeletedByEmployeeId" field.
func (ecc *EmployeeCadreCreate) SetDeletedByEmployeeId(s string) *EmployeeCadreCreate {
	ecc.mutation.SetDeletedByEmployeeId(s)
	return ecc
}

// SetNillableDeletedByEmployeeId sets the "DeletedByEmployeeId" field if the given value is not nil.
func (ecc *EmployeeCadreCreate) SetNillableDeletedByEmployeeId(s *string) *EmployeeCadreCreate {
	if s != nil {
		ecc.SetDeletedByEmployeeId(*s)
	}
	return ecc
}

// SetDeletedByDesignation sets the "DeletedByDesignation" field.
func (ecc *EmployeeCadreCreate) SetDeletedByDesignation(s string) *EmployeeCadreCreate {
	ecc.mutation.SetDeletedByDesignation(s)
	return ecc
}

// SetNillableDeletedByDesignation sets the "DeletedByDesignation" field if the given value is not nil.
func (ecc *EmployeeCadreCreate) SetNillableDeletedByDesignation(s *string) *EmployeeCadreCreate {
	if s != nil {
		ecc.SetDeletedByDesignation(*s)
	}
	return ecc
}

// SetDeletedDate sets the "DeletedDate" field.
func (ecc *EmployeeCadreCreate) SetDeletedDate(t time.Time) *EmployeeCadreCreate {
	ecc.mutation.SetDeletedDate(t)
	return ecc
}

// SetNillableDeletedDate sets the "DeletedDate" field if the given value is not nil.
func (ecc *EmployeeCadreCreate) SetNillableDeletedDate(t *time.Time) *EmployeeCadreCreate {
	if t != nil {
		ecc.SetDeletedDate(*t)
	}
	return ecc
}

// SetID sets the "id" field.
func (ecc *EmployeeCadreCreate) SetID(i int32) *EmployeeCadreCreate {
	ecc.mutation.SetID(i)
	return ecc
}

// Mutation returns the EmployeeCadreMutation object of the builder.
func (ecc *EmployeeCadreCreate) Mutation() *EmployeeCadreMutation {
	return ecc.mutation
}

// Save creates the EmployeeCadre in the database.
func (ecc *EmployeeCadreCreate) Save(ctx context.Context) (*EmployeeCadre, error) {
	return withHooks(ctx, ecc.sqlSave, ecc.mutation, ecc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ecc *EmployeeCadreCreate) SaveX(ctx context.Context) *EmployeeCadre {
	v, err := ecc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ecc *EmployeeCadreCreate) Exec(ctx context.Context) error {
	_, err := ecc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ecc *EmployeeCadreCreate) ExecX(ctx context.Context) {
	if err := ecc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ecc *EmployeeCadreCreate) check() error {
	if _, ok := ecc.mutation.Cadrecode(); !ok {
		return &ValidationError{Name: "cadrecode", err: errors.New(`ent: missing required field "EmployeeCadre.cadrecode"`)}
	}
	if _, ok := ecc.mutation.Cadredescription(); !ok {
		return &ValidationError{Name: "cadredescription", err: errors.New(`ent: missing required field "EmployeeCadre.cadredescription"`)}
	}
	if _, ok := ecc.mutation.PayLevel(); !ok {
		return &ValidationError{Name: "PayLevel", err: errors.New(`ent: missing required field "EmployeeCadre.PayLevel"`)}
	}
	if _, ok := ecc.mutation.Scale(); !ok {
		return &ValidationError{Name: "Scale", err: errors.New(`ent: missing required field "EmployeeCadre.Scale"`)}
	}
	return nil
}

func (ecc *EmployeeCadreCreate) sqlSave(ctx context.Context) (*EmployeeCadre, error) {
	if err := ecc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ecc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ecc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int32(id)
	}
	ecc.mutation.id = &_node.ID
	ecc.mutation.done = true
	return _node, nil
}

func (ecc *EmployeeCadreCreate) createSpec() (*EmployeeCadre, *sqlgraph.CreateSpec) {
	var (
		_node = &EmployeeCadre{config: ecc.config}
		_spec = sqlgraph.NewCreateSpec(employeecadre.Table, sqlgraph.NewFieldSpec(employeecadre.FieldID, field.TypeInt32))
	)
	if id, ok := ecc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ecc.mutation.Cadrecode(); ok {
		_spec.SetField(employeecadre.FieldCadrecode, field.TypeString, value)
		_node.Cadrecode = value
	}
	if value, ok := ecc.mutation.Cadredescription(); ok {
		_spec.SetField(employeecadre.FieldCadredescription, field.TypeString, value)
		_node.Cadredescription = value
	}
	if value, ok := ecc.mutation.PayLevel(); ok {
		_spec.SetField(employeecadre.FieldPayLevel, field.TypeString, value)
		_node.PayLevel = value
	}
	if value, ok := ecc.mutation.Scale(); ok {
		_spec.SetField(employeecadre.FieldScale, field.TypeString, value)
		_node.Scale = value
	}
	if value, ok := ecc.mutation.ExamconfigurationExamcode(); ok {
		_spec.SetField(employeecadre.FieldExamconfigurationExamcode, field.TypeInt32, value)
		_node.ExamconfigurationExamcode = value
	}
	if value, ok := ecc.mutation.ExamShortDescription(); ok {
		_spec.SetField(employeecadre.FieldExamShortDescription, field.TypeString, value)
		_node.ExamShortDescription = value
	}
	if value, ok := ecc.mutation.ExamLongDescription(); ok {
		_spec.SetField(employeecadre.FieldExamLongDescription, field.TypeString, value)
		_node.ExamLongDescription = value
	}
	if value, ok := ecc.mutation.EmployeePostPostId(); ok {
		_spec.SetField(employeecadre.FieldEmployeePostPostId, field.TypeInt32, value)
		_node.EmployeePostPostId = value
	}
	if value, ok := ecc.mutation.EmployeeGroupGroupId(); ok {
		_spec.SetField(employeecadre.FieldEmployeeGroupGroupId, field.TypeInt32, value)
		_node.EmployeeGroupGroupId = value
	}
	if value, ok := ecc.mutation.GroupDescription(); ok {
		_spec.SetField(employeecadre.FieldGroupDescription, field.TypeString, value)
		_node.GroupDescription = value
	}
	if value, ok := ecc.mutation.PostCode(); ok {
		_spec.SetField(employeecadre.FieldPostCode, field.TypeString, value)
		_node.PostCode = value
	}
	if value, ok := ecc.mutation.PostDescription(); ok {
		_spec.SetField(employeecadre.FieldPostDescription, field.TypeString, value)
		_node.PostDescription = value
	}
	if value, ok := ecc.mutation.BaseCadre(); ok {
		_spec.SetField(employeecadre.FieldBaseCadre, field.TypeInt32, value)
		_node.BaseCadre = value
	}
	if value, ok := ecc.mutation.GdsService(); ok {
		_spec.SetField(employeecadre.FieldGdsService, field.TypeInt32, value)
		_node.GdsService = value
	}
	if value, ok := ecc.mutation.AgeCriteria(); ok {
		_spec.SetField(employeecadre.FieldAgeCriteria, field.TypeInt32, value)
		_node.AgeCriteria = value
	}
	if value, ok := ecc.mutation.ServiceCriteria(); ok {
		_spec.SetField(employeecadre.FieldServiceCriteria, field.TypeInt32, value)
		_node.ServiceCriteria = value
	}
	if value, ok := ecc.mutation.DrivingLicenceCriteria(); ok {
		_spec.SetField(employeecadre.FieldDrivingLicenceCriteria, field.TypeInt32, value)
		_node.DrivingLicenceCriteria = value
	}
	if value, ok := ecc.mutation.ComputerKnowledge(); ok {
		_spec.SetField(employeecadre.FieldComputerKnowledge, field.TypeInt32, value)
		_node.ComputerKnowledge = value
	}
	if value, ok := ecc.mutation.EligibiltyBasedOnLevelOfPaymatrix(); ok {
		_spec.SetField(employeecadre.FieldEligibiltyBasedOnLevelOfPaymatrix, field.TypeInt32, value)
		_node.EligibiltyBasedOnLevelOfPaymatrix = value
	}
	if value, ok := ecc.mutation.EducationDetailsEducationCode(); ok {
		_spec.SetField(employeecadre.FieldEducationDetailsEducationCode, field.TypeInt32, value)
		_node.EducationDetailsEducationCode = value
	}
	if value, ok := ecc.mutation.EducationDescription(); ok {
		_spec.SetField(employeecadre.FieldEducationDescription, field.TypeString, value)
		_node.EducationDescription = value
	}
	if value, ok := ecc.mutation.OrderNumber(); ok {
		_spec.SetField(employeecadre.FieldOrderNumber, field.TypeString, value)
		_node.OrderNumber = value
	}
	if value, ok := ecc.mutation.Status(); ok {
		_spec.SetField(employeecadre.FieldStatus, field.TypeString, value)
		_node.Status = value
	}
	if value, ok := ecc.mutation.CreatedById(); ok {
		_spec.SetField(employeecadre.FieldCreatedById, field.TypeInt32, value)
		_node.CreatedById = value
	}
	if value, ok := ecc.mutation.CreatedByUserName(); ok {
		_spec.SetField(employeecadre.FieldCreatedByUserName, field.TypeString, value)
		_node.CreatedByUserName = value
	}
	if value, ok := ecc.mutation.CreatedByEmployeeId(); ok {
		_spec.SetField(employeecadre.FieldCreatedByEmployeeId, field.TypeString, value)
		_node.CreatedByEmployeeId = value
	}
	if value, ok := ecc.mutation.CreatedByDesignation(); ok {
		_spec.SetField(employeecadre.FieldCreatedByDesignation, field.TypeString, value)
		_node.CreatedByDesignation = value
	}
	if value, ok := ecc.mutation.CreatedDate(); ok {
		_spec.SetField(employeecadre.FieldCreatedDate, field.TypeTime, value)
		_node.CreatedDate = value
	}
	if value, ok := ecc.mutation.VerifiedById(); ok {
		_spec.SetField(employeecadre.FieldVerifiedById, field.TypeInt64, value)
		_node.VerifiedById = value
	}
	if value, ok := ecc.mutation.VerifiedByUserName(); ok {
		_spec.SetField(employeecadre.FieldVerifiedByUserName, field.TypeString, value)
		_node.VerifiedByUserName = value
	}
	if value, ok := ecc.mutation.VerifiedByEmployeeId(); ok {
		_spec.SetField(employeecadre.FieldVerifiedByEmployeeId, field.TypeString, value)
		_node.VerifiedByEmployeeId = value
	}
	if value, ok := ecc.mutation.VerifiedByDesignation(); ok {
		_spec.SetField(employeecadre.FieldVerifiedByDesignation, field.TypeString, value)
		_node.VerifiedByDesignation = value
	}
	if value, ok := ecc.mutation.VerifiedDate(); ok {
		_spec.SetField(employeecadre.FieldVerifiedDate, field.TypeTime, value)
		_node.VerifiedDate = value
	}
	if value, ok := ecc.mutation.DeletedById(); ok {
		_spec.SetField(employeecadre.FieldDeletedById, field.TypeInt64, value)
		_node.DeletedById = value
	}
	if value, ok := ecc.mutation.DeletedByUserName(); ok {
		_spec.SetField(employeecadre.FieldDeletedByUserName, field.TypeString, value)
		_node.DeletedByUserName = value
	}
	if value, ok := ecc.mutation.DeletedByEmployeeId(); ok {
		_spec.SetField(employeecadre.FieldDeletedByEmployeeId, field.TypeString, value)
		_node.DeletedByEmployeeId = value
	}
	if value, ok := ecc.mutation.DeletedByDesignation(); ok {
		_spec.SetField(employeecadre.FieldDeletedByDesignation, field.TypeString, value)
		_node.DeletedByDesignation = value
	}
	if value, ok := ecc.mutation.DeletedDate(); ok {
		_spec.SetField(employeecadre.FieldDeletedDate, field.TypeTime, value)
		_node.DeletedDate = value
	}
	return _node, _spec
}

// EmployeeCadreCreateBulk is the builder for creating many EmployeeCadre entities in bulk.
type EmployeeCadreCreateBulk struct {
	config
	builders []*EmployeeCadreCreate
}

// Save creates the EmployeeCadre entities in the database.
func (eccb *EmployeeCadreCreateBulk) Save(ctx context.Context) ([]*EmployeeCadre, error) {
	specs := make([]*sqlgraph.CreateSpec, len(eccb.builders))
	nodes := make([]*EmployeeCadre, len(eccb.builders))
	mutators := make([]Mutator, len(eccb.builders))
	for i := range eccb.builders {
		func(i int, root context.Context) {
			builder := eccb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*EmployeeCadreMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, eccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, eccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, eccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (eccb *EmployeeCadreCreateBulk) SaveX(ctx context.Context) []*EmployeeCadre {
	v, err := eccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (eccb *EmployeeCadreCreateBulk) Exec(ctx context.Context) error {
	_, err := eccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eccb *EmployeeCadreCreateBulk) ExecX(ctx context.Context) {
	if err := eccb.Exec(ctx); err != nil {
		panic(err)
	}
}
