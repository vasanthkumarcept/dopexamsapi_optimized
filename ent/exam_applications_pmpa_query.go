// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"
	"recruit/ent/cadre_choice_pmpa"
	"recruit/ent/center"
	"recruit/ent/circlesummaryforno"
	"recruit/ent/division_choice_pmpa"
	"recruit/ent/exam"
	"recruit/ent/exam_applications_pmpa"
	"recruit/ent/examcitycenter"
	"recruit/ent/logs"
	"recruit/ent/predicate"
	"recruit/ent/recommendationspmpaapplications"
	"recruit/ent/rolemaster"
	"recruit/ent/usermaster"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ExamApplicationsPMPAQuery is the builder for querying Exam_Applications_PMPA entities.
type ExamApplicationsPMPAQuery struct {
	config
	ctx                     *QueryContext
	order                   []exam_applications_pmpa.OrderOption
	inters                  []Interceptor
	predicates              []predicate.Exam_Applications_PMPA
	withUsersPMPARef        *UserMasterQuery
	withRoleusers           *RoleMasterQuery
	withExamcitycenter      *ExamCityCenterQuery
	withCadrePrefRef        *CadreChoicePMPAQuery
	withCirclePrefRefPMPA   *DivisionChoicePMPAQuery
	withPMPAApplicationsRef *RecommendationsPMPAApplicationsQuery
	withExams               *ExamQuery
	withPMPAExamCentres     *CenterQuery
	withCircleRefsPMPA      *CircleSummaryForNOQuery
	withLogData             *LogsQuery
	withFKs                 bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the ExamApplicationsPMPAQuery builder.
func (eapq *ExamApplicationsPMPAQuery) Where(ps ...predicate.Exam_Applications_PMPA) *ExamApplicationsPMPAQuery {
	eapq.predicates = append(eapq.predicates, ps...)
	return eapq
}

// Limit the number of records to be returned by this query.
func (eapq *ExamApplicationsPMPAQuery) Limit(limit int) *ExamApplicationsPMPAQuery {
	eapq.ctx.Limit = &limit
	return eapq
}

// Offset to start from.
func (eapq *ExamApplicationsPMPAQuery) Offset(offset int) *ExamApplicationsPMPAQuery {
	eapq.ctx.Offset = &offset
	return eapq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (eapq *ExamApplicationsPMPAQuery) Unique(unique bool) *ExamApplicationsPMPAQuery {
	eapq.ctx.Unique = &unique
	return eapq
}

// Order specifies how the records should be ordered.
func (eapq *ExamApplicationsPMPAQuery) Order(o ...exam_applications_pmpa.OrderOption) *ExamApplicationsPMPAQuery {
	eapq.order = append(eapq.order, o...)
	return eapq
}

// QueryUsersPMPARef chains the current query on the "UsersPMPARef" edge.
func (eapq *ExamApplicationsPMPAQuery) QueryUsersPMPARef() *UserMasterQuery {
	query := (&UserMasterClient{config: eapq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eapq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eapq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(exam_applications_pmpa.Table, exam_applications_pmpa.FieldID, selector),
			sqlgraph.To(usermaster.Table, usermaster.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, exam_applications_pmpa.UsersPMPARefTable, exam_applications_pmpa.UsersPMPARefColumn),
		)
		fromU = sqlgraph.SetNeighbors(eapq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryRoleusers chains the current query on the "roleusers" edge.
func (eapq *ExamApplicationsPMPAQuery) QueryRoleusers() *RoleMasterQuery {
	query := (&RoleMasterClient{config: eapq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eapq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eapq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(exam_applications_pmpa.Table, exam_applications_pmpa.FieldID, selector),
			sqlgraph.To(rolemaster.Table, rolemaster.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, exam_applications_pmpa.RoleusersTable, exam_applications_pmpa.RoleusersColumn),
		)
		fromU = sqlgraph.SetNeighbors(eapq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryExamcitycenter chains the current query on the "examcitycenter" edge.
func (eapq *ExamApplicationsPMPAQuery) QueryExamcitycenter() *ExamCityCenterQuery {
	query := (&ExamCityCenterClient{config: eapq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eapq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eapq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(exam_applications_pmpa.Table, exam_applications_pmpa.FieldID, selector),
			sqlgraph.To(examcitycenter.Table, examcitycenter.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, exam_applications_pmpa.ExamcitycenterTable, exam_applications_pmpa.ExamcitycenterColumn),
		)
		fromU = sqlgraph.SetNeighbors(eapq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCadrePrefRef chains the current query on the "CadrePref_Ref" edge.
func (eapq *ExamApplicationsPMPAQuery) QueryCadrePrefRef() *CadreChoicePMPAQuery {
	query := (&CadreChoicePMPAClient{config: eapq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eapq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eapq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(exam_applications_pmpa.Table, exam_applications_pmpa.FieldID, selector),
			sqlgraph.To(cadre_choice_pmpa.Table, cadre_choice_pmpa.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, exam_applications_pmpa.CadrePrefRefTable, exam_applications_pmpa.CadrePrefRefColumn),
		)
		fromU = sqlgraph.SetNeighbors(eapq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCirclePrefRefPMPA chains the current query on the "CirclePrefRefPMPA" edge.
func (eapq *ExamApplicationsPMPAQuery) QueryCirclePrefRefPMPA() *DivisionChoicePMPAQuery {
	query := (&DivisionChoicePMPAClient{config: eapq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eapq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eapq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(exam_applications_pmpa.Table, exam_applications_pmpa.FieldID, selector),
			sqlgraph.To(division_choice_pmpa.Table, division_choice_pmpa.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, exam_applications_pmpa.CirclePrefRefPMPATable, exam_applications_pmpa.CirclePrefRefPMPAColumn),
		)
		fromU = sqlgraph.SetNeighbors(eapq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryPMPAApplicationsRef chains the current query on the "PMPAApplicationsRef" edge.
func (eapq *ExamApplicationsPMPAQuery) QueryPMPAApplicationsRef() *RecommendationsPMPAApplicationsQuery {
	query := (&RecommendationsPMPAApplicationsClient{config: eapq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eapq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eapq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(exam_applications_pmpa.Table, exam_applications_pmpa.FieldID, selector),
			sqlgraph.To(recommendationspmpaapplications.Table, recommendationspmpaapplications.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, exam_applications_pmpa.PMPAApplicationsRefTable, exam_applications_pmpa.PMPAApplicationsRefColumn),
		)
		fromU = sqlgraph.SetNeighbors(eapq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryExams chains the current query on the "Exams" edge.
func (eapq *ExamApplicationsPMPAQuery) QueryExams() *ExamQuery {
	query := (&ExamClient{config: eapq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eapq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eapq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(exam_applications_pmpa.Table, exam_applications_pmpa.FieldID, selector),
			sqlgraph.To(exam.Table, exam.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, exam_applications_pmpa.ExamsTable, exam_applications_pmpa.ExamsColumn),
		)
		fromU = sqlgraph.SetNeighbors(eapq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryPMPAExamCentres chains the current query on the "PMPAExamCentres" edge.
func (eapq *ExamApplicationsPMPAQuery) QueryPMPAExamCentres() *CenterQuery {
	query := (&CenterClient{config: eapq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eapq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eapq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(exam_applications_pmpa.Table, exam_applications_pmpa.FieldID, selector),
			sqlgraph.To(center.Table, center.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, exam_applications_pmpa.PMPAExamCentresTable, exam_applications_pmpa.PMPAExamCentresColumn),
		)
		fromU = sqlgraph.SetNeighbors(eapq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCircleRefsPMPA chains the current query on the "CircleRefsPMPA" edge.
func (eapq *ExamApplicationsPMPAQuery) QueryCircleRefsPMPA() *CircleSummaryForNOQuery {
	query := (&CircleSummaryForNOClient{config: eapq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eapq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eapq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(exam_applications_pmpa.Table, exam_applications_pmpa.FieldID, selector),
			sqlgraph.To(circlesummaryforno.Table, circlesummaryforno.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, exam_applications_pmpa.CircleRefsPMPATable, exam_applications_pmpa.CircleRefsPMPAColumn),
		)
		fromU = sqlgraph.SetNeighbors(eapq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryLogData chains the current query on the "LogData" edge.
func (eapq *ExamApplicationsPMPAQuery) QueryLogData() *LogsQuery {
	query := (&LogsClient{config: eapq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eapq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eapq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(exam_applications_pmpa.Table, exam_applications_pmpa.FieldID, selector),
			sqlgraph.To(logs.Table, logs.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, exam_applications_pmpa.LogDataTable, exam_applications_pmpa.LogDataColumn),
		)
		fromU = sqlgraph.SetNeighbors(eapq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first Exam_Applications_PMPA entity from the query.
// Returns a *NotFoundError when no Exam_Applications_PMPA was found.
func (eapq *ExamApplicationsPMPAQuery) First(ctx context.Context) (*Exam_Applications_PMPA, error) {
	nodes, err := eapq.Limit(1).All(setContextOp(ctx, eapq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{exam_applications_pmpa.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (eapq *ExamApplicationsPMPAQuery) FirstX(ctx context.Context) *Exam_Applications_PMPA {
	node, err := eapq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first Exam_Applications_PMPA ID from the query.
// Returns a *NotFoundError when no Exam_Applications_PMPA ID was found.
func (eapq *ExamApplicationsPMPAQuery) FirstID(ctx context.Context) (id int64, err error) {
	var ids []int64
	if ids, err = eapq.Limit(1).IDs(setContextOp(ctx, eapq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{exam_applications_pmpa.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (eapq *ExamApplicationsPMPAQuery) FirstIDX(ctx context.Context) int64 {
	id, err := eapq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single Exam_Applications_PMPA entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one Exam_Applications_PMPA entity is found.
// Returns a *NotFoundError when no Exam_Applications_PMPA entities are found.
func (eapq *ExamApplicationsPMPAQuery) Only(ctx context.Context) (*Exam_Applications_PMPA, error) {
	nodes, err := eapq.Limit(2).All(setContextOp(ctx, eapq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{exam_applications_pmpa.Label}
	default:
		return nil, &NotSingularError{exam_applications_pmpa.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (eapq *ExamApplicationsPMPAQuery) OnlyX(ctx context.Context) *Exam_Applications_PMPA {
	node, err := eapq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only Exam_Applications_PMPA ID in the query.
// Returns a *NotSingularError when more than one Exam_Applications_PMPA ID is found.
// Returns a *NotFoundError when no entities are found.
func (eapq *ExamApplicationsPMPAQuery) OnlyID(ctx context.Context) (id int64, err error) {
	var ids []int64
	if ids, err = eapq.Limit(2).IDs(setContextOp(ctx, eapq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{exam_applications_pmpa.Label}
	default:
		err = &NotSingularError{exam_applications_pmpa.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (eapq *ExamApplicationsPMPAQuery) OnlyIDX(ctx context.Context) int64 {
	id, err := eapq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Exam_Applications_PMPAs.
func (eapq *ExamApplicationsPMPAQuery) All(ctx context.Context) ([]*Exam_Applications_PMPA, error) {
	ctx = setContextOp(ctx, eapq.ctx, "All")
	if err := eapq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*Exam_Applications_PMPA, *ExamApplicationsPMPAQuery]()
	return withInterceptors[[]*Exam_Applications_PMPA](ctx, eapq, qr, eapq.inters)
}

// AllX is like All, but panics if an error occurs.
func (eapq *ExamApplicationsPMPAQuery) AllX(ctx context.Context) []*Exam_Applications_PMPA {
	nodes, err := eapq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of Exam_Applications_PMPA IDs.
func (eapq *ExamApplicationsPMPAQuery) IDs(ctx context.Context) (ids []int64, err error) {
	if eapq.ctx.Unique == nil && eapq.path != nil {
		eapq.Unique(true)
	}
	ctx = setContextOp(ctx, eapq.ctx, "IDs")
	if err = eapq.Select(exam_applications_pmpa.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (eapq *ExamApplicationsPMPAQuery) IDsX(ctx context.Context) []int64 {
	ids, err := eapq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (eapq *ExamApplicationsPMPAQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, eapq.ctx, "Count")
	if err := eapq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, eapq, querierCount[*ExamApplicationsPMPAQuery](), eapq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (eapq *ExamApplicationsPMPAQuery) CountX(ctx context.Context) int {
	count, err := eapq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (eapq *ExamApplicationsPMPAQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, eapq.ctx, "Exist")
	switch _, err := eapq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (eapq *ExamApplicationsPMPAQuery) ExistX(ctx context.Context) bool {
	exist, err := eapq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the ExamApplicationsPMPAQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (eapq *ExamApplicationsPMPAQuery) Clone() *ExamApplicationsPMPAQuery {
	if eapq == nil {
		return nil
	}
	return &ExamApplicationsPMPAQuery{
		config:                  eapq.config,
		ctx:                     eapq.ctx.Clone(),
		order:                   append([]exam_applications_pmpa.OrderOption{}, eapq.order...),
		inters:                  append([]Interceptor{}, eapq.inters...),
		predicates:              append([]predicate.Exam_Applications_PMPA{}, eapq.predicates...),
		withUsersPMPARef:        eapq.withUsersPMPARef.Clone(),
		withRoleusers:           eapq.withRoleusers.Clone(),
		withExamcitycenter:      eapq.withExamcitycenter.Clone(),
		withCadrePrefRef:        eapq.withCadrePrefRef.Clone(),
		withCirclePrefRefPMPA:   eapq.withCirclePrefRefPMPA.Clone(),
		withPMPAApplicationsRef: eapq.withPMPAApplicationsRef.Clone(),
		withExams:               eapq.withExams.Clone(),
		withPMPAExamCentres:     eapq.withPMPAExamCentres.Clone(),
		withCircleRefsPMPA:      eapq.withCircleRefsPMPA.Clone(),
		withLogData:             eapq.withLogData.Clone(),
		// clone intermediate query.
		sql:  eapq.sql.Clone(),
		path: eapq.path,
	}
}

// WithUsersPMPARef tells the query-builder to eager-load the nodes that are connected to
// the "UsersPMPARef" edge. The optional arguments are used to configure the query builder of the edge.
func (eapq *ExamApplicationsPMPAQuery) WithUsersPMPARef(opts ...func(*UserMasterQuery)) *ExamApplicationsPMPAQuery {
	query := (&UserMasterClient{config: eapq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	eapq.withUsersPMPARef = query
	return eapq
}

// WithRoleusers tells the query-builder to eager-load the nodes that are connected to
// the "roleusers" edge. The optional arguments are used to configure the query builder of the edge.
func (eapq *ExamApplicationsPMPAQuery) WithRoleusers(opts ...func(*RoleMasterQuery)) *ExamApplicationsPMPAQuery {
	query := (&RoleMasterClient{config: eapq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	eapq.withRoleusers = query
	return eapq
}

// WithExamcitycenter tells the query-builder to eager-load the nodes that are connected to
// the "examcitycenter" edge. The optional arguments are used to configure the query builder of the edge.
func (eapq *ExamApplicationsPMPAQuery) WithExamcitycenter(opts ...func(*ExamCityCenterQuery)) *ExamApplicationsPMPAQuery {
	query := (&ExamCityCenterClient{config: eapq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	eapq.withExamcitycenter = query
	return eapq
}

// WithCadrePrefRef tells the query-builder to eager-load the nodes that are connected to
// the "CadrePref_Ref" edge. The optional arguments are used to configure the query builder of the edge.
func (eapq *ExamApplicationsPMPAQuery) WithCadrePrefRef(opts ...func(*CadreChoicePMPAQuery)) *ExamApplicationsPMPAQuery {
	query := (&CadreChoicePMPAClient{config: eapq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	eapq.withCadrePrefRef = query
	return eapq
}

// WithCirclePrefRefPMPA tells the query-builder to eager-load the nodes that are connected to
// the "CirclePrefRefPMPA" edge. The optional arguments are used to configure the query builder of the edge.
func (eapq *ExamApplicationsPMPAQuery) WithCirclePrefRefPMPA(opts ...func(*DivisionChoicePMPAQuery)) *ExamApplicationsPMPAQuery {
	query := (&DivisionChoicePMPAClient{config: eapq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	eapq.withCirclePrefRefPMPA = query
	return eapq
}

// WithPMPAApplicationsRef tells the query-builder to eager-load the nodes that are connected to
// the "PMPAApplicationsRef" edge. The optional arguments are used to configure the query builder of the edge.
func (eapq *ExamApplicationsPMPAQuery) WithPMPAApplicationsRef(opts ...func(*RecommendationsPMPAApplicationsQuery)) *ExamApplicationsPMPAQuery {
	query := (&RecommendationsPMPAApplicationsClient{config: eapq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	eapq.withPMPAApplicationsRef = query
	return eapq
}

// WithExams tells the query-builder to eager-load the nodes that are connected to
// the "Exams" edge. The optional arguments are used to configure the query builder of the edge.
func (eapq *ExamApplicationsPMPAQuery) WithExams(opts ...func(*ExamQuery)) *ExamApplicationsPMPAQuery {
	query := (&ExamClient{config: eapq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	eapq.withExams = query
	return eapq
}

// WithPMPAExamCentres tells the query-builder to eager-load the nodes that are connected to
// the "PMPAExamCentres" edge. The optional arguments are used to configure the query builder of the edge.
func (eapq *ExamApplicationsPMPAQuery) WithPMPAExamCentres(opts ...func(*CenterQuery)) *ExamApplicationsPMPAQuery {
	query := (&CenterClient{config: eapq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	eapq.withPMPAExamCentres = query
	return eapq
}

// WithCircleRefsPMPA tells the query-builder to eager-load the nodes that are connected to
// the "CircleRefsPMPA" edge. The optional arguments are used to configure the query builder of the edge.
func (eapq *ExamApplicationsPMPAQuery) WithCircleRefsPMPA(opts ...func(*CircleSummaryForNOQuery)) *ExamApplicationsPMPAQuery {
	query := (&CircleSummaryForNOClient{config: eapq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	eapq.withCircleRefsPMPA = query
	return eapq
}

// WithLogData tells the query-builder to eager-load the nodes that are connected to
// the "LogData" edge. The optional arguments are used to configure the query builder of the edge.
func (eapq *ExamApplicationsPMPAQuery) WithLogData(opts ...func(*LogsQuery)) *ExamApplicationsPMPAQuery {
	query := (&LogsClient{config: eapq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	eapq.withLogData = query
	return eapq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		ApplicationNumber string `json:"ApplicationNumber,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.ExamApplicationsPMPA.Query().
//		GroupBy(exam_applications_pmpa.FieldApplicationNumber).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (eapq *ExamApplicationsPMPAQuery) GroupBy(field string, fields ...string) *ExamApplicationsPMPAGroupBy {
	eapq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &ExamApplicationsPMPAGroupBy{build: eapq}
	grbuild.flds = &eapq.ctx.Fields
	grbuild.label = exam_applications_pmpa.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		ApplicationNumber string `json:"ApplicationNumber,omitempty"`
//	}
//
//	client.ExamApplicationsPMPA.Query().
//		Select(exam_applications_pmpa.FieldApplicationNumber).
//		Scan(ctx, &v)
func (eapq *ExamApplicationsPMPAQuery) Select(fields ...string) *ExamApplicationsPMPASelect {
	eapq.ctx.Fields = append(eapq.ctx.Fields, fields...)
	sbuild := &ExamApplicationsPMPASelect{ExamApplicationsPMPAQuery: eapq}
	sbuild.label = exam_applications_pmpa.Label
	sbuild.flds, sbuild.scan = &eapq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a ExamApplicationsPMPASelect configured with the given aggregations.
func (eapq *ExamApplicationsPMPAQuery) Aggregate(fns ...AggregateFunc) *ExamApplicationsPMPASelect {
	return eapq.Select().Aggregate(fns...)
}

func (eapq *ExamApplicationsPMPAQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range eapq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, eapq); err != nil {
				return err
			}
		}
	}
	for _, f := range eapq.ctx.Fields {
		if !exam_applications_pmpa.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if eapq.path != nil {
		prev, err := eapq.path(ctx)
		if err != nil {
			return err
		}
		eapq.sql = prev
	}
	return nil
}

func (eapq *ExamApplicationsPMPAQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*Exam_Applications_PMPA, error) {
	var (
		nodes       = []*Exam_Applications_PMPA{}
		withFKs     = eapq.withFKs
		_spec       = eapq.querySpec()
		loadedTypes = [10]bool{
			eapq.withUsersPMPARef != nil,
			eapq.withRoleusers != nil,
			eapq.withExamcitycenter != nil,
			eapq.withCadrePrefRef != nil,
			eapq.withCirclePrefRefPMPA != nil,
			eapq.withPMPAApplicationsRef != nil,
			eapq.withExams != nil,
			eapq.withPMPAExamCentres != nil,
			eapq.withCircleRefsPMPA != nil,
			eapq.withLogData != nil,
		}
	)
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, exam_applications_pmpa.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*Exam_Applications_PMPA).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &Exam_Applications_PMPA{config: eapq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, eapq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := eapq.withUsersPMPARef; query != nil {
		if err := eapq.loadUsersPMPARef(ctx, query, nodes,
			func(n *Exam_Applications_PMPA) { n.Edges.UsersPMPARef = []*UserMaster{} },
			func(n *Exam_Applications_PMPA, e *UserMaster) { n.Edges.UsersPMPARef = append(n.Edges.UsersPMPARef, e) }); err != nil {
			return nil, err
		}
	}
	if query := eapq.withRoleusers; query != nil {
		if err := eapq.loadRoleusers(ctx, query, nodes, nil,
			func(n *Exam_Applications_PMPA, e *RoleMaster) { n.Edges.Roleusers = e }); err != nil {
			return nil, err
		}
	}
	if query := eapq.withExamcitycenter; query != nil {
		if err := eapq.loadExamcitycenter(ctx, query, nodes, nil,
			func(n *Exam_Applications_PMPA, e *ExamCityCenter) { n.Edges.Examcitycenter = e }); err != nil {
			return nil, err
		}
	}
	if query := eapq.withCadrePrefRef; query != nil {
		if err := eapq.loadCadrePrefRef(ctx, query, nodes,
			func(n *Exam_Applications_PMPA) { n.Edges.CadrePrefRef = []*Cadre_Choice_PMPA{} },
			func(n *Exam_Applications_PMPA, e *Cadre_Choice_PMPA) {
				n.Edges.CadrePrefRef = append(n.Edges.CadrePrefRef, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := eapq.withCirclePrefRefPMPA; query != nil {
		if err := eapq.loadCirclePrefRefPMPA(ctx, query, nodes,
			func(n *Exam_Applications_PMPA) { n.Edges.CirclePrefRefPMPA = []*Division_Choice_PMPA{} },
			func(n *Exam_Applications_PMPA, e *Division_Choice_PMPA) {
				n.Edges.CirclePrefRefPMPA = append(n.Edges.CirclePrefRefPMPA, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := eapq.withPMPAApplicationsRef; query != nil {
		if err := eapq.loadPMPAApplicationsRef(ctx, query, nodes,
			func(n *Exam_Applications_PMPA) { n.Edges.PMPAApplicationsRef = []*RecommendationsPMPAApplications{} },
			func(n *Exam_Applications_PMPA, e *RecommendationsPMPAApplications) {
				n.Edges.PMPAApplicationsRef = append(n.Edges.PMPAApplicationsRef, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := eapq.withExams; query != nil {
		if err := eapq.loadExams(ctx, query, nodes, nil,
			func(n *Exam_Applications_PMPA, e *Exam) { n.Edges.Exams = e }); err != nil {
			return nil, err
		}
	}
	if query := eapq.withPMPAExamCentres; query != nil {
		if err := eapq.loadPMPAExamCentres(ctx, query, nodes, nil,
			func(n *Exam_Applications_PMPA, e *Center) { n.Edges.PMPAExamCentres = e }); err != nil {
			return nil, err
		}
	}
	if query := eapq.withCircleRefsPMPA; query != nil {
		if err := eapq.loadCircleRefsPMPA(ctx, query, nodes, nil,
			func(n *Exam_Applications_PMPA, e *CircleSummaryForNO) { n.Edges.CircleRefsPMPA = e }); err != nil {
			return nil, err
		}
	}
	if query := eapq.withLogData; query != nil {
		if err := eapq.loadLogData(ctx, query, nodes,
			func(n *Exam_Applications_PMPA) { n.Edges.LogData = []*Logs{} },
			func(n *Exam_Applications_PMPA, e *Logs) { n.Edges.LogData = append(n.Edges.LogData, e) }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (eapq *ExamApplicationsPMPAQuery) loadUsersPMPARef(ctx context.Context, query *UserMasterQuery, nodes []*Exam_Applications_PMPA, init func(*Exam_Applications_PMPA), assign func(*Exam_Applications_PMPA, *UserMaster)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int64]*Exam_Applications_PMPA)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.UserMaster(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(exam_applications_pmpa.UsersPMPARefColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.exam_applications_pmpa_users_pmpa_ref
		if fk == nil {
			return fmt.Errorf(`foreign-key "exam_applications_pmpa_users_pmpa_ref" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "exam_applications_pmpa_users_pmpa_ref" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (eapq *ExamApplicationsPMPAQuery) loadRoleusers(ctx context.Context, query *RoleMasterQuery, nodes []*Exam_Applications_PMPA, init func(*Exam_Applications_PMPA), assign func(*Exam_Applications_PMPA, *RoleMaster)) error {
	ids := make([]int32, 0, len(nodes))
	nodeids := make(map[int32][]*Exam_Applications_PMPA)
	for i := range nodes {
		fk := nodes[i].RoleUserCode
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(rolemaster.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "RoleUserCode" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (eapq *ExamApplicationsPMPAQuery) loadExamcitycenter(ctx context.Context, query *ExamCityCenterQuery, nodes []*Exam_Applications_PMPA, init func(*Exam_Applications_PMPA), assign func(*Exam_Applications_PMPA, *ExamCityCenter)) error {
	ids := make([]int32, 0, len(nodes))
	nodeids := make(map[int32][]*Exam_Applications_PMPA)
	for i := range nodes {
		fk := nodes[i].ExamCityCenterCode
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(examcitycenter.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "ExamCityCenterCode" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (eapq *ExamApplicationsPMPAQuery) loadCadrePrefRef(ctx context.Context, query *CadreChoicePMPAQuery, nodes []*Exam_Applications_PMPA, init func(*Exam_Applications_PMPA), assign func(*Exam_Applications_PMPA, *Cadre_Choice_PMPA)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int64]*Exam_Applications_PMPA)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(cadre_choice_pmpa.FieldApplicationID)
	}
	query.Where(predicate.Cadre_Choice_PMPA(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(exam_applications_pmpa.CadrePrefRefColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.ApplicationID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "ApplicationID" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (eapq *ExamApplicationsPMPAQuery) loadCirclePrefRefPMPA(ctx context.Context, query *DivisionChoicePMPAQuery, nodes []*Exam_Applications_PMPA, init func(*Exam_Applications_PMPA), assign func(*Exam_Applications_PMPA, *Division_Choice_PMPA)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int64]*Exam_Applications_PMPA)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Division_Choice_PMPA(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(exam_applications_pmpa.CirclePrefRefPMPAColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.exam_applications_pmpa_circle_pref_ref_pmpa
		if fk == nil {
			return fmt.Errorf(`foreign-key "exam_applications_pmpa_circle_pref_ref_pmpa" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "exam_applications_pmpa_circle_pref_ref_pmpa" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (eapq *ExamApplicationsPMPAQuery) loadPMPAApplicationsRef(ctx context.Context, query *RecommendationsPMPAApplicationsQuery, nodes []*Exam_Applications_PMPA, init func(*Exam_Applications_PMPA), assign func(*Exam_Applications_PMPA, *RecommendationsPMPAApplications)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int64]*Exam_Applications_PMPA)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.RecommendationsPMPAApplications(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(exam_applications_pmpa.PMPAApplicationsRefColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.exam_applications_pmpa_pmpa_applications_ref
		if fk == nil {
			return fmt.Errorf(`foreign-key "exam_applications_pmpa_pmpa_applications_ref" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "exam_applications_pmpa_pmpa_applications_ref" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (eapq *ExamApplicationsPMPAQuery) loadExams(ctx context.Context, query *ExamQuery, nodes []*Exam_Applications_PMPA, init func(*Exam_Applications_PMPA), assign func(*Exam_Applications_PMPA, *Exam)) error {
	ids := make([]int32, 0, len(nodes))
	nodeids := make(map[int32][]*Exam_Applications_PMPA)
	for i := range nodes {
		fk := nodes[i].ExamCode
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(exam.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "ExamCode" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (eapq *ExamApplicationsPMPAQuery) loadPMPAExamCentres(ctx context.Context, query *CenterQuery, nodes []*Exam_Applications_PMPA, init func(*Exam_Applications_PMPA), assign func(*Exam_Applications_PMPA, *Center)) error {
	ids := make([]int32, 0, len(nodes))
	nodeids := make(map[int32][]*Exam_Applications_PMPA)
	for i := range nodes {
		fk := nodes[i].CenterCode
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(center.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "CenterCode" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (eapq *ExamApplicationsPMPAQuery) loadCircleRefsPMPA(ctx context.Context, query *CircleSummaryForNOQuery, nodes []*Exam_Applications_PMPA, init func(*Exam_Applications_PMPA), assign func(*Exam_Applications_PMPA, *CircleSummaryForNO)) error {
	ids := make([]int32, 0, len(nodes))
	nodeids := make(map[int32][]*Exam_Applications_PMPA)
	for i := range nodes {
		if nodes[i].CircleSID == nil {
			continue
		}
		fk := *nodes[i].CircleSID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(circlesummaryforno.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "CircleSID" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (eapq *ExamApplicationsPMPAQuery) loadLogData(ctx context.Context, query *LogsQuery, nodes []*Exam_Applications_PMPA, init func(*Exam_Applications_PMPA), assign func(*Exam_Applications_PMPA, *Logs)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int64]*Exam_Applications_PMPA)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Logs(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(exam_applications_pmpa.LogDataColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.exam_applications_pmpa_log_data
		if fk == nil {
			return fmt.Errorf(`foreign-key "exam_applications_pmpa_log_data" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "exam_applications_pmpa_log_data" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (eapq *ExamApplicationsPMPAQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := eapq.querySpec()
	_spec.Node.Columns = eapq.ctx.Fields
	if len(eapq.ctx.Fields) > 0 {
		_spec.Unique = eapq.ctx.Unique != nil && *eapq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, eapq.driver, _spec)
}

func (eapq *ExamApplicationsPMPAQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(exam_applications_pmpa.Table, exam_applications_pmpa.Columns, sqlgraph.NewFieldSpec(exam_applications_pmpa.FieldID, field.TypeInt64))
	_spec.From = eapq.sql
	if unique := eapq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if eapq.path != nil {
		_spec.Unique = true
	}
	if fields := eapq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, exam_applications_pmpa.FieldID)
		for i := range fields {
			if fields[i] != exam_applications_pmpa.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if eapq.withRoleusers != nil {
			_spec.Node.AddColumnOnce(exam_applications_pmpa.FieldRoleUserCode)
		}
		if eapq.withExamcitycenter != nil {
			_spec.Node.AddColumnOnce(exam_applications_pmpa.FieldExamCityCenterCode)
		}
		if eapq.withExams != nil {
			_spec.Node.AddColumnOnce(exam_applications_pmpa.FieldExamCode)
		}
		if eapq.withPMPAExamCentres != nil {
			_spec.Node.AddColumnOnce(exam_applications_pmpa.FieldCenterCode)
		}
		if eapq.withCircleRefsPMPA != nil {
			_spec.Node.AddColumnOnce(exam_applications_pmpa.FieldCircleSID)
		}
	}
	if ps := eapq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := eapq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := eapq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := eapq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (eapq *ExamApplicationsPMPAQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(eapq.driver.Dialect())
	t1 := builder.Table(exam_applications_pmpa.Table)
	columns := eapq.ctx.Fields
	if len(columns) == 0 {
		columns = exam_applications_pmpa.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if eapq.sql != nil {
		selector = eapq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if eapq.ctx.Unique != nil && *eapq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range eapq.predicates {
		p(selector)
	}
	for _, p := range eapq.order {
		p(selector)
	}
	if offset := eapq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := eapq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// ExamApplicationsPMPAGroupBy is the group-by builder for Exam_Applications_PMPA entities.
type ExamApplicationsPMPAGroupBy struct {
	selector
	build *ExamApplicationsPMPAQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (eapgb *ExamApplicationsPMPAGroupBy) Aggregate(fns ...AggregateFunc) *ExamApplicationsPMPAGroupBy {
	eapgb.fns = append(eapgb.fns, fns...)
	return eapgb
}

// Scan applies the selector query and scans the result into the given value.
func (eapgb *ExamApplicationsPMPAGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, eapgb.build.ctx, "GroupBy")
	if err := eapgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ExamApplicationsPMPAQuery, *ExamApplicationsPMPAGroupBy](ctx, eapgb.build, eapgb, eapgb.build.inters, v)
}

func (eapgb *ExamApplicationsPMPAGroupBy) sqlScan(ctx context.Context, root *ExamApplicationsPMPAQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(eapgb.fns))
	for _, fn := range eapgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*eapgb.flds)+len(eapgb.fns))
		for _, f := range *eapgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*eapgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := eapgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// ExamApplicationsPMPASelect is the builder for selecting fields of ExamApplicationsPMPA entities.
type ExamApplicationsPMPASelect struct {
	*ExamApplicationsPMPAQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (eaps *ExamApplicationsPMPASelect) Aggregate(fns ...AggregateFunc) *ExamApplicationsPMPASelect {
	eaps.fns = append(eaps.fns, fns...)
	return eaps
}

// Scan applies the selector query and scans the result into the given value.
func (eaps *ExamApplicationsPMPASelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, eaps.ctx, "Select")
	if err := eaps.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ExamApplicationsPMPAQuery, *ExamApplicationsPMPASelect](ctx, eaps.ExamApplicationsPMPAQuery, eaps, eaps.inters, v)
}

func (eaps *ExamApplicationsPMPASelect) sqlScan(ctx context.Context, root *ExamApplicationsPMPAQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(eaps.fns))
	for _, fn := range eaps.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*eaps.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := eaps.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
