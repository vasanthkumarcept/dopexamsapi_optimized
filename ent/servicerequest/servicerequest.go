// Code generated by ent, DO NOT EDIT.

package servicerequest

import (
	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the servicerequest type in the database.
	Label = "service_request"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "ID"
	// FieldRemarks holds the string denoting the remarks field in the database.
	FieldRemarks = "remarks"
	// FieldAction holds the string denoting the action field in the database.
	FieldAction = "action"
	// FieldPushedTime holds the string denoting the pushedtime field in the database.
	FieldPushedTime = "pushed_time"
	// FieldUpdatedBy holds the string denoting the updatedby field in the database.
	FieldUpdatedBy = "updated_by"
	// FieldUpdatedTime holds the string denoting the updatedtime field in the database.
	FieldUpdatedTime = "updated_time"
	// FieldAssignedTo holds the string denoting the assignedto field in the database.
	FieldAssignedTo = "assigned_to"
	// FieldRemarksNew holds the string denoting the remarksnew field in the database.
	FieldRemarksNew = "remarks_new"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldClosedOn holds the string denoting the closedon field in the database.
	FieldClosedOn = "closed_on"
	// Table holds the table name of the servicerequest in the database.
	Table = "ServiceRequest"
)

// Columns holds all SQL columns for servicerequest fields.
var Columns = []string{
	FieldID,
	FieldRemarks,
	FieldAction,
	FieldPushedTime,
	FieldUpdatedBy,
	FieldUpdatedTime,
	FieldAssignedTo,
	FieldRemarksNew,
	FieldStatus,
	FieldClosedOn,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the ServiceRequest queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByRemarks orders the results by the remarks field.
func ByRemarks(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRemarks, opts...).ToFunc()
}

// ByAction orders the results by the action field.
func ByAction(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAction, opts...).ToFunc()
}

// ByPushedTime orders the results by the PushedTime field.
func ByPushedTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPushedTime, opts...).ToFunc()
}

// ByUpdatedBy orders the results by the UpdatedBy field.
func ByUpdatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedBy, opts...).ToFunc()
}

// ByUpdatedTime orders the results by the UpdatedTime field.
func ByUpdatedTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedTime, opts...).ToFunc()
}

// ByAssignedTo orders the results by the AssignedTo field.
func ByAssignedTo(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAssignedTo, opts...).ToFunc()
}

// ByRemarksNew orders the results by the RemarksNew field.
func ByRemarksNew(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRemarksNew, opts...).ToFunc()
}

// ByStatus orders the results by the Status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByClosedOn orders the results by the ClosedOn field.
func ByClosedOn(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldClosedOn, opts...).ToFunc()
}
