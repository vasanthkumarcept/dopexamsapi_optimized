// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"recruit/ent/exam"
	"recruit/ent/examcalendar"
	"recruit/ent/exampapers"
	"recruit/ent/vacancyyear"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// ExamCalendar is the model entity for the ExamCalendar schema.
type ExamCalendar struct {
	config `json:"-"`
	// ID of the ent.
	ID int32 `json:"id,omitempty"`
	// ExamYear holds the value of the "ExamYear" field.
	ExamYear int32 `json:"ExamYear,omitempty"`
	// ExamName holds the value of the "ExamName" field.
	ExamName string `json:"ExamName,omitempty"`
	// ExamCode holds the value of the "ExamCode" field.
	ExamCode int32 `json:"ExamCode,omitempty"`
	// NotificationDate holds the value of the "NotificationDate" field.
	NotificationDate time.Time `json:"NotificationDate,omitempty"`
	// ModelNotificationDate holds the value of the "ModelNotificationDate" field.
	ModelNotificationDate time.Time `json:"ModelNotificationDate,omitempty"`
	// ApplicationEndDate holds the value of the "ApplicationEndDate" field.
	ApplicationEndDate time.Time `json:"ApplicationEndDate,omitempty"`
	// ApprovedOrderDate holds the value of the "ApprovedOrderDate" field.
	ApprovedOrderDate time.Time `json:"ApprovedOrderDate,omitempty"`
	// TentativeResultDate holds the value of the "TentativeResultDate" field.
	TentativeResultDate time.Time `json:"TentativeResultDate,omitempty"`
	// CreatedDate holds the value of the "CreatedDate" field.
	CreatedDate time.Time `json:"CreatedDate,omitempty"`
	// ApprovedOrderNumber holds the value of the "ApprovedOrderNumber" field.
	ApprovedOrderNumber string `json:"ApprovedOrderNumber,omitempty"`
	// VacancyYears holds the value of the "VacancyYears" field.
	VacancyYears []interface{} `json:"VacancyYears,omitempty"`
	// ExamPapers holds the value of the "ExamPapers" field.
	ExamPapers []interface{} `json:"ExamPapers,omitempty"`
	// VacancyYearCode holds the value of the "VacancyYearCode" field.
	VacancyYearCode int32 `json:"VacancyYearCode,omitempty"`
	// PaperCode holds the value of the "PaperCode" field.
	PaperCode int32 `json:"PaperCode,omitempty"`
	// ExamCodePS holds the value of the "ExamCodePS" field.
	ExamCodePS int32 `json:"ExamCodePS,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ExamCalendarQuery when eager-loading is set.
	Edges        ExamCalendarEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ExamCalendarEdges holds the relations/edges for other nodes in the graph.
type ExamCalendarEdges struct {
	// VcyYears holds the value of the vcy_years edge.
	VcyYears *VacancyYear `json:"vcy_years,omitempty"`
	// Exams holds the value of the exams edge.
	Exams *Exam `json:"exams,omitempty"`
	// Papers holds the value of the papers edge.
	Papers *ExamPapers `json:"papers,omitempty"`
	// NotifyRef holds the value of the Notify_ref edge.
	NotifyRef []*Notification `json:"Notify_ref,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// VcyYearsOrErr returns the VcyYears value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ExamCalendarEdges) VcyYearsOrErr() (*VacancyYear, error) {
	if e.loadedTypes[0] {
		if e.VcyYears == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: vacancyyear.Label}
		}
		return e.VcyYears, nil
	}
	return nil, &NotLoadedError{edge: "vcy_years"}
}

// ExamsOrErr returns the Exams value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ExamCalendarEdges) ExamsOrErr() (*Exam, error) {
	if e.loadedTypes[1] {
		if e.Exams == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: exam.Label}
		}
		return e.Exams, nil
	}
	return nil, &NotLoadedError{edge: "exams"}
}

// PapersOrErr returns the Papers value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ExamCalendarEdges) PapersOrErr() (*ExamPapers, error) {
	if e.loadedTypes[2] {
		if e.Papers == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: exampapers.Label}
		}
		return e.Papers, nil
	}
	return nil, &NotLoadedError{edge: "papers"}
}

// NotifyRefOrErr returns the NotifyRef value or an error if the edge
// was not loaded in eager-loading.
func (e ExamCalendarEdges) NotifyRefOrErr() ([]*Notification, error) {
	if e.loadedTypes[3] {
		return e.NotifyRef, nil
	}
	return nil, &NotLoadedError{edge: "Notify_ref"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ExamCalendar) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case examcalendar.FieldVacancyYears, examcalendar.FieldExamPapers:
			values[i] = new([]byte)
		case examcalendar.FieldID, examcalendar.FieldExamYear, examcalendar.FieldExamCode, examcalendar.FieldVacancyYearCode, examcalendar.FieldPaperCode, examcalendar.FieldExamCodePS:
			values[i] = new(sql.NullInt64)
		case examcalendar.FieldExamName, examcalendar.FieldApprovedOrderNumber:
			values[i] = new(sql.NullString)
		case examcalendar.FieldNotificationDate, examcalendar.FieldModelNotificationDate, examcalendar.FieldApplicationEndDate, examcalendar.FieldApprovedOrderDate, examcalendar.FieldTentativeResultDate, examcalendar.FieldCreatedDate:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ExamCalendar fields.
func (ec *ExamCalendar) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case examcalendar.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ec.ID = int32(value.Int64)
		case examcalendar.FieldExamYear:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field ExamYear", values[i])
			} else if value.Valid {
				ec.ExamYear = int32(value.Int64)
			}
		case examcalendar.FieldExamName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ExamName", values[i])
			} else if value.Valid {
				ec.ExamName = value.String
			}
		case examcalendar.FieldExamCode:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field ExamCode", values[i])
			} else if value.Valid {
				ec.ExamCode = int32(value.Int64)
			}
		case examcalendar.FieldNotificationDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field NotificationDate", values[i])
			} else if value.Valid {
				ec.NotificationDate = value.Time
			}
		case examcalendar.FieldModelNotificationDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field ModelNotificationDate", values[i])
			} else if value.Valid {
				ec.ModelNotificationDate = value.Time
			}
		case examcalendar.FieldApplicationEndDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field ApplicationEndDate", values[i])
			} else if value.Valid {
				ec.ApplicationEndDate = value.Time
			}
		case examcalendar.FieldApprovedOrderDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field ApprovedOrderDate", values[i])
			} else if value.Valid {
				ec.ApprovedOrderDate = value.Time
			}
		case examcalendar.FieldTentativeResultDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field TentativeResultDate", values[i])
			} else if value.Valid {
				ec.TentativeResultDate = value.Time
			}
		case examcalendar.FieldCreatedDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field CreatedDate", values[i])
			} else if value.Valid {
				ec.CreatedDate = value.Time
			}
		case examcalendar.FieldApprovedOrderNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ApprovedOrderNumber", values[i])
			} else if value.Valid {
				ec.ApprovedOrderNumber = value.String
			}
		case examcalendar.FieldVacancyYears:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field VacancyYears", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &ec.VacancyYears); err != nil {
					return fmt.Errorf("unmarshal field VacancyYears: %w", err)
				}
			}
		case examcalendar.FieldExamPapers:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field ExamPapers", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &ec.ExamPapers); err != nil {
					return fmt.Errorf("unmarshal field ExamPapers: %w", err)
				}
			}
		case examcalendar.FieldVacancyYearCode:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field VacancyYearCode", values[i])
			} else if value.Valid {
				ec.VacancyYearCode = int32(value.Int64)
			}
		case examcalendar.FieldPaperCode:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field PaperCode", values[i])
			} else if value.Valid {
				ec.PaperCode = int32(value.Int64)
			}
		case examcalendar.FieldExamCodePS:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field ExamCodePS", values[i])
			} else if value.Valid {
				ec.ExamCodePS = int32(value.Int64)
			}
		default:
			ec.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ExamCalendar.
// This includes values selected through modifiers, order, etc.
func (ec *ExamCalendar) Value(name string) (ent.Value, error) {
	return ec.selectValues.Get(name)
}

// QueryVcyYears queries the "vcy_years" edge of the ExamCalendar entity.
func (ec *ExamCalendar) QueryVcyYears() *VacancyYearQuery {
	return NewExamCalendarClient(ec.config).QueryVcyYears(ec)
}

// QueryExams queries the "exams" edge of the ExamCalendar entity.
func (ec *ExamCalendar) QueryExams() *ExamQuery {
	return NewExamCalendarClient(ec.config).QueryExams(ec)
}

// QueryPapers queries the "papers" edge of the ExamCalendar entity.
func (ec *ExamCalendar) QueryPapers() *ExamPapersQuery {
	return NewExamCalendarClient(ec.config).QueryPapers(ec)
}

// QueryNotifyRef queries the "Notify_ref" edge of the ExamCalendar entity.
func (ec *ExamCalendar) QueryNotifyRef() *NotificationQuery {
	return NewExamCalendarClient(ec.config).QueryNotifyRef(ec)
}

// Update returns a builder for updating this ExamCalendar.
// Note that you need to call ExamCalendar.Unwrap() before calling this method if this ExamCalendar
// was returned from a transaction, and the transaction was committed or rolled back.
func (ec *ExamCalendar) Update() *ExamCalendarUpdateOne {
	return NewExamCalendarClient(ec.config).UpdateOne(ec)
}

// Unwrap unwraps the ExamCalendar entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ec *ExamCalendar) Unwrap() *ExamCalendar {
	_tx, ok := ec.config.driver.(*txDriver)
	if !ok {
		panic("ent: ExamCalendar is not a transactional entity")
	}
	ec.config.driver = _tx.drv
	return ec
}

// String implements the fmt.Stringer.
func (ec *ExamCalendar) String() string {
	var builder strings.Builder
	builder.WriteString("ExamCalendar(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ec.ID))
	builder.WriteString("ExamYear=")
	builder.WriteString(fmt.Sprintf("%v", ec.ExamYear))
	builder.WriteString(", ")
	builder.WriteString("ExamName=")
	builder.WriteString(ec.ExamName)
	builder.WriteString(", ")
	builder.WriteString("ExamCode=")
	builder.WriteString(fmt.Sprintf("%v", ec.ExamCode))
	builder.WriteString(", ")
	builder.WriteString("NotificationDate=")
	builder.WriteString(ec.NotificationDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("ModelNotificationDate=")
	builder.WriteString(ec.ModelNotificationDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("ApplicationEndDate=")
	builder.WriteString(ec.ApplicationEndDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("ApprovedOrderDate=")
	builder.WriteString(ec.ApprovedOrderDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("TentativeResultDate=")
	builder.WriteString(ec.TentativeResultDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("CreatedDate=")
	builder.WriteString(ec.CreatedDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("ApprovedOrderNumber=")
	builder.WriteString(ec.ApprovedOrderNumber)
	builder.WriteString(", ")
	builder.WriteString("VacancyYears=")
	builder.WriteString(fmt.Sprintf("%v", ec.VacancyYears))
	builder.WriteString(", ")
	builder.WriteString("ExamPapers=")
	builder.WriteString(fmt.Sprintf("%v", ec.ExamPapers))
	builder.WriteString(", ")
	builder.WriteString("VacancyYearCode=")
	builder.WriteString(fmt.Sprintf("%v", ec.VacancyYearCode))
	builder.WriteString(", ")
	builder.WriteString("PaperCode=")
	builder.WriteString(fmt.Sprintf("%v", ec.PaperCode))
	builder.WriteString(", ")
	builder.WriteString("ExamCodePS=")
	builder.WriteString(fmt.Sprintf("%v", ec.ExamCodePS))
	builder.WriteByte(')')
	return builder.String()
}

// ExamCalendars is a parsable slice of ExamCalendar.
type ExamCalendars []*ExamCalendar
