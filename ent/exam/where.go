// Code generated by ent, DO NOT EDIT.

package exam

import (
	"recruit/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int32) predicate.Exam {
	return predicate.Exam(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int32) predicate.Exam {
	return predicate.Exam(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int32) predicate.Exam {
	return predicate.Exam(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int32) predicate.Exam {
	return predicate.Exam(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int32) predicate.Exam {
	return predicate.Exam(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int32) predicate.Exam {
	return predicate.Exam(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int32) predicate.Exam {
	return predicate.Exam(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int32) predicate.Exam {
	return predicate.Exam(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int32) predicate.Exam {
	return predicate.Exam(sql.FieldLTE(FieldID, id))
}

// ExamType applies equality check predicate on the "ExamType" field. It's identical to ExamTypeEQ.
func ExamType(v string) predicate.Exam {
	return predicate.Exam(sql.FieldEQ(FieldExamType, v))
}

// ExamName applies equality check predicate on the "ExamName" field. It's identical to ExamNameEQ.
func ExamName(v string) predicate.Exam {
	return predicate.Exam(sql.FieldEQ(FieldExamName, v))
}

// ExamShortName applies equality check predicate on the "ExamShortName" field. It's identical to ExamShortNameEQ.
func ExamShortName(v string) predicate.Exam {
	return predicate.Exam(sql.FieldEQ(FieldExamShortName, v))
}

// SmsExamShortName applies equality check predicate on the "SmsExamShortName" field. It's identical to SmsExamShortNameEQ.
func SmsExamShortName(v string) predicate.Exam {
	return predicate.Exam(sql.FieldEQ(FieldSmsExamShortName, v))
}

// ExamCode applies equality check predicate on the "ExamCode" field. It's identical to ExamCodeEQ.
func ExamCode(v int32) predicate.Exam {
	return predicate.Exam(sql.FieldEQ(FieldExamCode, v))
}

// CalenderIssuedBy applies equality check predicate on the "CalenderIssuedBy" field. It's identical to CalenderIssuedByEQ.
func CalenderIssuedBy(v string) predicate.Exam {
	return predicate.Exam(sql.FieldEQ(FieldCalenderIssuedBy, v))
}

// NotificationBy applies equality check predicate on the "NotificationBy" field. It's identical to NotificationByEQ.
func NotificationBy(v string) predicate.Exam {
	return predicate.Exam(sql.FieldEQ(FieldNotificationBy, v))
}

// ConductedBy applies equality check predicate on the "ConductedBy" field. It's identical to ConductedByEQ.
func ConductedBy(v string) predicate.Exam {
	return predicate.Exam(sql.FieldEQ(FieldConductedBy, v))
}

// NodalOfficerLevel applies equality check predicate on the "NodalOfficerLevel" field. It's identical to NodalOfficerLevelEQ.
func NodalOfficerLevel(v string) predicate.Exam {
	return predicate.Exam(sql.FieldEQ(FieldNodalOfficerLevel, v))
}

// TentativeNotificationMandatoryDate applies equality check predicate on the "TentativeNotificationMandatoryDate" field. It's identical to TentativeNotificationMandatoryDateEQ.
func TentativeNotificationMandatoryDate(v bool) predicate.Exam {
	return predicate.Exam(sql.FieldEQ(FieldTentativeNotificationMandatoryDate, v))
}

// LocalLanguage applies equality check predicate on the "LocalLanguage" field. It's identical to LocalLanguageEQ.
func LocalLanguage(v bool) predicate.Exam {
	return predicate.Exam(sql.FieldEQ(FieldLocalLanguage, v))
}

// OptionForPost applies equality check predicate on the "OptionForPost" field. It's identical to OptionForPostEQ.
func OptionForPost(v bool) predicate.Exam {
	return predicate.Exam(sql.FieldEQ(FieldOptionForPost, v))
}

// OptionToWriteExamOtherThanParent applies equality check predicate on the "OptionToWriteExamOtherThanParent" field. It's identical to OptionToWriteExamOtherThanParentEQ.
func OptionToWriteExamOtherThanParent(v bool) predicate.Exam {
	return predicate.Exam(sql.FieldEQ(FieldOptionToWriteExamOtherThanParent, v))
}

// TableName applies equality check predicate on the "TableName" field. It's identical to TableNameEQ.
func TableName(v string) predicate.Exam {
	return predicate.Exam(sql.FieldEQ(FieldTableName, v))
}

// OrderNumber applies equality check predicate on the "OrderNumber" field. It's identical to OrderNumberEQ.
func OrderNumber(v string) predicate.Exam {
	return predicate.Exam(sql.FieldEQ(FieldOrderNumber, v))
}

// CreatedById applies equality check predicate on the "CreatedById" field. It's identical to CreatedByIdEQ.
func CreatedById(v int64) predicate.Exam {
	return predicate.Exam(sql.FieldEQ(FieldCreatedById, v))
}

// CreatedByUserName applies equality check predicate on the "CreatedByUserName" field. It's identical to CreatedByUserNameEQ.
func CreatedByUserName(v string) predicate.Exam {
	return predicate.Exam(sql.FieldEQ(FieldCreatedByUserName, v))
}

// CreatedByEmpId applies equality check predicate on the "CreatedByEmpId" field. It's identical to CreatedByEmpIdEQ.
func CreatedByEmpId(v int64) predicate.Exam {
	return predicate.Exam(sql.FieldEQ(FieldCreatedByEmpId, v))
}

// CreatedByDesignation applies equality check predicate on the "CreatedByDesignation" field. It's identical to CreatedByDesignationEQ.
func CreatedByDesignation(v string) predicate.Exam {
	return predicate.Exam(sql.FieldEQ(FieldCreatedByDesignation, v))
}

// CreatedDate applies equality check predicate on the "CreatedDate" field. It's identical to CreatedDateEQ.
func CreatedDate(v time.Time) predicate.Exam {
	return predicate.Exam(sql.FieldEQ(FieldCreatedDate, v))
}

// Verifiedbyid applies equality check predicate on the "verifiedbyid" field. It's identical to VerifiedbyidEQ.
func Verifiedbyid(v int64) predicate.Exam {
	return predicate.Exam(sql.FieldEQ(FieldVerifiedbyid, v))
}

// Verifiedbyusername applies equality check predicate on the "verifiedbyusername" field. It's identical to VerifiedbyusernameEQ.
func Verifiedbyusername(v string) predicate.Exam {
	return predicate.Exam(sql.FieldEQ(FieldVerifiedbyusername, v))
}

// VerifiedbyEmployeeid applies equality check predicate on the "verifiedbyEmployeeid" field. It's identical to VerifiedbyEmployeeidEQ.
func VerifiedbyEmployeeid(v int64) predicate.Exam {
	return predicate.Exam(sql.FieldEQ(FieldVerifiedbyEmployeeid, v))
}

// VerifiedbyDesignation applies equality check predicate on the "verifiedbyDesignation" field. It's identical to VerifiedbyDesignationEQ.
func VerifiedbyDesignation(v string) predicate.Exam {
	return predicate.Exam(sql.FieldEQ(FieldVerifiedbyDesignation, v))
}

// VerifiedDate applies equality check predicate on the "verifiedDate" field. It's identical to VerifiedDateEQ.
func VerifiedDate(v time.Time) predicate.Exam {
	return predicate.Exam(sql.FieldEQ(FieldVerifiedDate, v))
}

// Statuss applies equality check predicate on the "Statuss" field. It's identical to StatussEQ.
func Statuss(v string) predicate.Exam {
	return predicate.Exam(sql.FieldEQ(FieldStatuss, v))
}

// Deletedbyid applies equality check predicate on the "deletedbyid" field. It's identical to DeletedbyidEQ.
func Deletedbyid(v int64) predicate.Exam {
	return predicate.Exam(sql.FieldEQ(FieldDeletedbyid, v))
}

// Deletedbyusername applies equality check predicate on the "deletedbyusername" field. It's identical to DeletedbyusernameEQ.
func Deletedbyusername(v string) predicate.Exam {
	return predicate.Exam(sql.FieldEQ(FieldDeletedbyusername, v))
}

// DeletedbyEmployeeid applies equality check predicate on the "deletedbyEmployeeid" field. It's identical to DeletedbyEmployeeidEQ.
func DeletedbyEmployeeid(v int64) predicate.Exam {
	return predicate.Exam(sql.FieldEQ(FieldDeletedbyEmployeeid, v))
}

// DeletedbyDesignation applies equality check predicate on the "deletedbyDesignation" field. It's identical to DeletedbyDesignationEQ.
func DeletedbyDesignation(v string) predicate.Exam {
	return predicate.Exam(sql.FieldEQ(FieldDeletedbyDesignation, v))
}

// DeletedDate applies equality check predicate on the "deletedDate" field. It's identical to DeletedDateEQ.
func DeletedDate(v time.Time) predicate.Exam {
	return predicate.Exam(sql.FieldEQ(FieldDeletedDate, v))
}

// NumOfPapers applies equality check predicate on the "NumOfPapers" field. It's identical to NumOfPapersEQ.
func NumOfPapers(v int32) predicate.Exam {
	return predicate.Exam(sql.FieldEQ(FieldNumOfPapers, v))
}

// CalendarCode applies equality check predicate on the "CalendarCode" field. It's identical to CalendarCodeEQ.
func CalendarCode(v int32) predicate.Exam {
	return predicate.Exam(sql.FieldEQ(FieldCalendarCode, v))
}

// PaperCode applies equality check predicate on the "PaperCode" field. It's identical to PaperCodeEQ.
func PaperCode(v int32) predicate.Exam {
	return predicate.Exam(sql.FieldEQ(FieldPaperCode, v))
}

// Status applies equality check predicate on the "Status" field. It's identical to StatusEQ.
func Status(v string) predicate.Exam {
	return predicate.Exam(sql.FieldEQ(FieldStatus, v))
}

// ExamTypeCode applies equality check predicate on the "ExamTypeCode" field. It's identical to ExamTypeCodeEQ.
func ExamTypeCode(v int32) predicate.Exam {
	return predicate.Exam(sql.FieldEQ(FieldExamTypeCode, v))
}

// CreatedByEmployeeId applies equality check predicate on the "CreatedByEmployeeId" field. It's identical to CreatedByEmployeeIdEQ.
func CreatedByEmployeeId(v string) predicate.Exam {
	return predicate.Exam(sql.FieldEQ(FieldCreatedByEmployeeId, v))
}

// ExamTypeEQ applies the EQ predicate on the "ExamType" field.
func ExamTypeEQ(v string) predicate.Exam {
	return predicate.Exam(sql.FieldEQ(FieldExamType, v))
}

// ExamTypeNEQ applies the NEQ predicate on the "ExamType" field.
func ExamTypeNEQ(v string) predicate.Exam {
	return predicate.Exam(sql.FieldNEQ(FieldExamType, v))
}

// ExamTypeIn applies the In predicate on the "ExamType" field.
func ExamTypeIn(vs ...string) predicate.Exam {
	return predicate.Exam(sql.FieldIn(FieldExamType, vs...))
}

// ExamTypeNotIn applies the NotIn predicate on the "ExamType" field.
func ExamTypeNotIn(vs ...string) predicate.Exam {
	return predicate.Exam(sql.FieldNotIn(FieldExamType, vs...))
}

// ExamTypeGT applies the GT predicate on the "ExamType" field.
func ExamTypeGT(v string) predicate.Exam {
	return predicate.Exam(sql.FieldGT(FieldExamType, v))
}

// ExamTypeGTE applies the GTE predicate on the "ExamType" field.
func ExamTypeGTE(v string) predicate.Exam {
	return predicate.Exam(sql.FieldGTE(FieldExamType, v))
}

// ExamTypeLT applies the LT predicate on the "ExamType" field.
func ExamTypeLT(v string) predicate.Exam {
	return predicate.Exam(sql.FieldLT(FieldExamType, v))
}

// ExamTypeLTE applies the LTE predicate on the "ExamType" field.
func ExamTypeLTE(v string) predicate.Exam {
	return predicate.Exam(sql.FieldLTE(FieldExamType, v))
}

// ExamTypeContains applies the Contains predicate on the "ExamType" field.
func ExamTypeContains(v string) predicate.Exam {
	return predicate.Exam(sql.FieldContains(FieldExamType, v))
}

// ExamTypeHasPrefix applies the HasPrefix predicate on the "ExamType" field.
func ExamTypeHasPrefix(v string) predicate.Exam {
	return predicate.Exam(sql.FieldHasPrefix(FieldExamType, v))
}

// ExamTypeHasSuffix applies the HasSuffix predicate on the "ExamType" field.
func ExamTypeHasSuffix(v string) predicate.Exam {
	return predicate.Exam(sql.FieldHasSuffix(FieldExamType, v))
}

// ExamTypeEqualFold applies the EqualFold predicate on the "ExamType" field.
func ExamTypeEqualFold(v string) predicate.Exam {
	return predicate.Exam(sql.FieldEqualFold(FieldExamType, v))
}

// ExamTypeContainsFold applies the ContainsFold predicate on the "ExamType" field.
func ExamTypeContainsFold(v string) predicate.Exam {
	return predicate.Exam(sql.FieldContainsFold(FieldExamType, v))
}

// ExamNameEQ applies the EQ predicate on the "ExamName" field.
func ExamNameEQ(v string) predicate.Exam {
	return predicate.Exam(sql.FieldEQ(FieldExamName, v))
}

// ExamNameNEQ applies the NEQ predicate on the "ExamName" field.
func ExamNameNEQ(v string) predicate.Exam {
	return predicate.Exam(sql.FieldNEQ(FieldExamName, v))
}

// ExamNameIn applies the In predicate on the "ExamName" field.
func ExamNameIn(vs ...string) predicate.Exam {
	return predicate.Exam(sql.FieldIn(FieldExamName, vs...))
}

// ExamNameNotIn applies the NotIn predicate on the "ExamName" field.
func ExamNameNotIn(vs ...string) predicate.Exam {
	return predicate.Exam(sql.FieldNotIn(FieldExamName, vs...))
}

// ExamNameGT applies the GT predicate on the "ExamName" field.
func ExamNameGT(v string) predicate.Exam {
	return predicate.Exam(sql.FieldGT(FieldExamName, v))
}

// ExamNameGTE applies the GTE predicate on the "ExamName" field.
func ExamNameGTE(v string) predicate.Exam {
	return predicate.Exam(sql.FieldGTE(FieldExamName, v))
}

// ExamNameLT applies the LT predicate on the "ExamName" field.
func ExamNameLT(v string) predicate.Exam {
	return predicate.Exam(sql.FieldLT(FieldExamName, v))
}

// ExamNameLTE applies the LTE predicate on the "ExamName" field.
func ExamNameLTE(v string) predicate.Exam {
	return predicate.Exam(sql.FieldLTE(FieldExamName, v))
}

// ExamNameContains applies the Contains predicate on the "ExamName" field.
func ExamNameContains(v string) predicate.Exam {
	return predicate.Exam(sql.FieldContains(FieldExamName, v))
}

// ExamNameHasPrefix applies the HasPrefix predicate on the "ExamName" field.
func ExamNameHasPrefix(v string) predicate.Exam {
	return predicate.Exam(sql.FieldHasPrefix(FieldExamName, v))
}

// ExamNameHasSuffix applies the HasSuffix predicate on the "ExamName" field.
func ExamNameHasSuffix(v string) predicate.Exam {
	return predicate.Exam(sql.FieldHasSuffix(FieldExamName, v))
}

// ExamNameEqualFold applies the EqualFold predicate on the "ExamName" field.
func ExamNameEqualFold(v string) predicate.Exam {
	return predicate.Exam(sql.FieldEqualFold(FieldExamName, v))
}

// ExamNameContainsFold applies the ContainsFold predicate on the "ExamName" field.
func ExamNameContainsFold(v string) predicate.Exam {
	return predicate.Exam(sql.FieldContainsFold(FieldExamName, v))
}

// ExamShortNameEQ applies the EQ predicate on the "ExamShortName" field.
func ExamShortNameEQ(v string) predicate.Exam {
	return predicate.Exam(sql.FieldEQ(FieldExamShortName, v))
}

// ExamShortNameNEQ applies the NEQ predicate on the "ExamShortName" field.
func ExamShortNameNEQ(v string) predicate.Exam {
	return predicate.Exam(sql.FieldNEQ(FieldExamShortName, v))
}

// ExamShortNameIn applies the In predicate on the "ExamShortName" field.
func ExamShortNameIn(vs ...string) predicate.Exam {
	return predicate.Exam(sql.FieldIn(FieldExamShortName, vs...))
}

// ExamShortNameNotIn applies the NotIn predicate on the "ExamShortName" field.
func ExamShortNameNotIn(vs ...string) predicate.Exam {
	return predicate.Exam(sql.FieldNotIn(FieldExamShortName, vs...))
}

// ExamShortNameGT applies the GT predicate on the "ExamShortName" field.
func ExamShortNameGT(v string) predicate.Exam {
	return predicate.Exam(sql.FieldGT(FieldExamShortName, v))
}

// ExamShortNameGTE applies the GTE predicate on the "ExamShortName" field.
func ExamShortNameGTE(v string) predicate.Exam {
	return predicate.Exam(sql.FieldGTE(FieldExamShortName, v))
}

// ExamShortNameLT applies the LT predicate on the "ExamShortName" field.
func ExamShortNameLT(v string) predicate.Exam {
	return predicate.Exam(sql.FieldLT(FieldExamShortName, v))
}

// ExamShortNameLTE applies the LTE predicate on the "ExamShortName" field.
func ExamShortNameLTE(v string) predicate.Exam {
	return predicate.Exam(sql.FieldLTE(FieldExamShortName, v))
}

// ExamShortNameContains applies the Contains predicate on the "ExamShortName" field.
func ExamShortNameContains(v string) predicate.Exam {
	return predicate.Exam(sql.FieldContains(FieldExamShortName, v))
}

// ExamShortNameHasPrefix applies the HasPrefix predicate on the "ExamShortName" field.
func ExamShortNameHasPrefix(v string) predicate.Exam {
	return predicate.Exam(sql.FieldHasPrefix(FieldExamShortName, v))
}

// ExamShortNameHasSuffix applies the HasSuffix predicate on the "ExamShortName" field.
func ExamShortNameHasSuffix(v string) predicate.Exam {
	return predicate.Exam(sql.FieldHasSuffix(FieldExamShortName, v))
}

// ExamShortNameIsNil applies the IsNil predicate on the "ExamShortName" field.
func ExamShortNameIsNil() predicate.Exam {
	return predicate.Exam(sql.FieldIsNull(FieldExamShortName))
}

// ExamShortNameNotNil applies the NotNil predicate on the "ExamShortName" field.
func ExamShortNameNotNil() predicate.Exam {
	return predicate.Exam(sql.FieldNotNull(FieldExamShortName))
}

// ExamShortNameEqualFold applies the EqualFold predicate on the "ExamShortName" field.
func ExamShortNameEqualFold(v string) predicate.Exam {
	return predicate.Exam(sql.FieldEqualFold(FieldExamShortName, v))
}

// ExamShortNameContainsFold applies the ContainsFold predicate on the "ExamShortName" field.
func ExamShortNameContainsFold(v string) predicate.Exam {
	return predicate.Exam(sql.FieldContainsFold(FieldExamShortName, v))
}

// SmsExamShortNameEQ applies the EQ predicate on the "SmsExamShortName" field.
func SmsExamShortNameEQ(v string) predicate.Exam {
	return predicate.Exam(sql.FieldEQ(FieldSmsExamShortName, v))
}

// SmsExamShortNameNEQ applies the NEQ predicate on the "SmsExamShortName" field.
func SmsExamShortNameNEQ(v string) predicate.Exam {
	return predicate.Exam(sql.FieldNEQ(FieldSmsExamShortName, v))
}

// SmsExamShortNameIn applies the In predicate on the "SmsExamShortName" field.
func SmsExamShortNameIn(vs ...string) predicate.Exam {
	return predicate.Exam(sql.FieldIn(FieldSmsExamShortName, vs...))
}

// SmsExamShortNameNotIn applies the NotIn predicate on the "SmsExamShortName" field.
func SmsExamShortNameNotIn(vs ...string) predicate.Exam {
	return predicate.Exam(sql.FieldNotIn(FieldSmsExamShortName, vs...))
}

// SmsExamShortNameGT applies the GT predicate on the "SmsExamShortName" field.
func SmsExamShortNameGT(v string) predicate.Exam {
	return predicate.Exam(sql.FieldGT(FieldSmsExamShortName, v))
}

// SmsExamShortNameGTE applies the GTE predicate on the "SmsExamShortName" field.
func SmsExamShortNameGTE(v string) predicate.Exam {
	return predicate.Exam(sql.FieldGTE(FieldSmsExamShortName, v))
}

// SmsExamShortNameLT applies the LT predicate on the "SmsExamShortName" field.
func SmsExamShortNameLT(v string) predicate.Exam {
	return predicate.Exam(sql.FieldLT(FieldSmsExamShortName, v))
}

// SmsExamShortNameLTE applies the LTE predicate on the "SmsExamShortName" field.
func SmsExamShortNameLTE(v string) predicate.Exam {
	return predicate.Exam(sql.FieldLTE(FieldSmsExamShortName, v))
}

// SmsExamShortNameContains applies the Contains predicate on the "SmsExamShortName" field.
func SmsExamShortNameContains(v string) predicate.Exam {
	return predicate.Exam(sql.FieldContains(FieldSmsExamShortName, v))
}

// SmsExamShortNameHasPrefix applies the HasPrefix predicate on the "SmsExamShortName" field.
func SmsExamShortNameHasPrefix(v string) predicate.Exam {
	return predicate.Exam(sql.FieldHasPrefix(FieldSmsExamShortName, v))
}

// SmsExamShortNameHasSuffix applies the HasSuffix predicate on the "SmsExamShortName" field.
func SmsExamShortNameHasSuffix(v string) predicate.Exam {
	return predicate.Exam(sql.FieldHasSuffix(FieldSmsExamShortName, v))
}

// SmsExamShortNameIsNil applies the IsNil predicate on the "SmsExamShortName" field.
func SmsExamShortNameIsNil() predicate.Exam {
	return predicate.Exam(sql.FieldIsNull(FieldSmsExamShortName))
}

// SmsExamShortNameNotNil applies the NotNil predicate on the "SmsExamShortName" field.
func SmsExamShortNameNotNil() predicate.Exam {
	return predicate.Exam(sql.FieldNotNull(FieldSmsExamShortName))
}

// SmsExamShortNameEqualFold applies the EqualFold predicate on the "SmsExamShortName" field.
func SmsExamShortNameEqualFold(v string) predicate.Exam {
	return predicate.Exam(sql.FieldEqualFold(FieldSmsExamShortName, v))
}

// SmsExamShortNameContainsFold applies the ContainsFold predicate on the "SmsExamShortName" field.
func SmsExamShortNameContainsFold(v string) predicate.Exam {
	return predicate.Exam(sql.FieldContainsFold(FieldSmsExamShortName, v))
}

// ExamCodeEQ applies the EQ predicate on the "ExamCode" field.
func ExamCodeEQ(v int32) predicate.Exam {
	return predicate.Exam(sql.FieldEQ(FieldExamCode, v))
}

// ExamCodeNEQ applies the NEQ predicate on the "ExamCode" field.
func ExamCodeNEQ(v int32) predicate.Exam {
	return predicate.Exam(sql.FieldNEQ(FieldExamCode, v))
}

// ExamCodeIn applies the In predicate on the "ExamCode" field.
func ExamCodeIn(vs ...int32) predicate.Exam {
	return predicate.Exam(sql.FieldIn(FieldExamCode, vs...))
}

// ExamCodeNotIn applies the NotIn predicate on the "ExamCode" field.
func ExamCodeNotIn(vs ...int32) predicate.Exam {
	return predicate.Exam(sql.FieldNotIn(FieldExamCode, vs...))
}

// ExamCodeGT applies the GT predicate on the "ExamCode" field.
func ExamCodeGT(v int32) predicate.Exam {
	return predicate.Exam(sql.FieldGT(FieldExamCode, v))
}

// ExamCodeGTE applies the GTE predicate on the "ExamCode" field.
func ExamCodeGTE(v int32) predicate.Exam {
	return predicate.Exam(sql.FieldGTE(FieldExamCode, v))
}

// ExamCodeLT applies the LT predicate on the "ExamCode" field.
func ExamCodeLT(v int32) predicate.Exam {
	return predicate.Exam(sql.FieldLT(FieldExamCode, v))
}

// ExamCodeLTE applies the LTE predicate on the "ExamCode" field.
func ExamCodeLTE(v int32) predicate.Exam {
	return predicate.Exam(sql.FieldLTE(FieldExamCode, v))
}

// ExamCodeIsNil applies the IsNil predicate on the "ExamCode" field.
func ExamCodeIsNil() predicate.Exam {
	return predicate.Exam(sql.FieldIsNull(FieldExamCode))
}

// ExamCodeNotNil applies the NotNil predicate on the "ExamCode" field.
func ExamCodeNotNil() predicate.Exam {
	return predicate.Exam(sql.FieldNotNull(FieldExamCode))
}

// CalenderIssuedByEQ applies the EQ predicate on the "CalenderIssuedBy" field.
func CalenderIssuedByEQ(v string) predicate.Exam {
	return predicate.Exam(sql.FieldEQ(FieldCalenderIssuedBy, v))
}

// CalenderIssuedByNEQ applies the NEQ predicate on the "CalenderIssuedBy" field.
func CalenderIssuedByNEQ(v string) predicate.Exam {
	return predicate.Exam(sql.FieldNEQ(FieldCalenderIssuedBy, v))
}

// CalenderIssuedByIn applies the In predicate on the "CalenderIssuedBy" field.
func CalenderIssuedByIn(vs ...string) predicate.Exam {
	return predicate.Exam(sql.FieldIn(FieldCalenderIssuedBy, vs...))
}

// CalenderIssuedByNotIn applies the NotIn predicate on the "CalenderIssuedBy" field.
func CalenderIssuedByNotIn(vs ...string) predicate.Exam {
	return predicate.Exam(sql.FieldNotIn(FieldCalenderIssuedBy, vs...))
}

// CalenderIssuedByGT applies the GT predicate on the "CalenderIssuedBy" field.
func CalenderIssuedByGT(v string) predicate.Exam {
	return predicate.Exam(sql.FieldGT(FieldCalenderIssuedBy, v))
}

// CalenderIssuedByGTE applies the GTE predicate on the "CalenderIssuedBy" field.
func CalenderIssuedByGTE(v string) predicate.Exam {
	return predicate.Exam(sql.FieldGTE(FieldCalenderIssuedBy, v))
}

// CalenderIssuedByLT applies the LT predicate on the "CalenderIssuedBy" field.
func CalenderIssuedByLT(v string) predicate.Exam {
	return predicate.Exam(sql.FieldLT(FieldCalenderIssuedBy, v))
}

// CalenderIssuedByLTE applies the LTE predicate on the "CalenderIssuedBy" field.
func CalenderIssuedByLTE(v string) predicate.Exam {
	return predicate.Exam(sql.FieldLTE(FieldCalenderIssuedBy, v))
}

// CalenderIssuedByContains applies the Contains predicate on the "CalenderIssuedBy" field.
func CalenderIssuedByContains(v string) predicate.Exam {
	return predicate.Exam(sql.FieldContains(FieldCalenderIssuedBy, v))
}

// CalenderIssuedByHasPrefix applies the HasPrefix predicate on the "CalenderIssuedBy" field.
func CalenderIssuedByHasPrefix(v string) predicate.Exam {
	return predicate.Exam(sql.FieldHasPrefix(FieldCalenderIssuedBy, v))
}

// CalenderIssuedByHasSuffix applies the HasSuffix predicate on the "CalenderIssuedBy" field.
func CalenderIssuedByHasSuffix(v string) predicate.Exam {
	return predicate.Exam(sql.FieldHasSuffix(FieldCalenderIssuedBy, v))
}

// CalenderIssuedByIsNil applies the IsNil predicate on the "CalenderIssuedBy" field.
func CalenderIssuedByIsNil() predicate.Exam {
	return predicate.Exam(sql.FieldIsNull(FieldCalenderIssuedBy))
}

// CalenderIssuedByNotNil applies the NotNil predicate on the "CalenderIssuedBy" field.
func CalenderIssuedByNotNil() predicate.Exam {
	return predicate.Exam(sql.FieldNotNull(FieldCalenderIssuedBy))
}

// CalenderIssuedByEqualFold applies the EqualFold predicate on the "CalenderIssuedBy" field.
func CalenderIssuedByEqualFold(v string) predicate.Exam {
	return predicate.Exam(sql.FieldEqualFold(FieldCalenderIssuedBy, v))
}

// CalenderIssuedByContainsFold applies the ContainsFold predicate on the "CalenderIssuedBy" field.
func CalenderIssuedByContainsFold(v string) predicate.Exam {
	return predicate.Exam(sql.FieldContainsFold(FieldCalenderIssuedBy, v))
}

// NotificationByEQ applies the EQ predicate on the "NotificationBy" field.
func NotificationByEQ(v string) predicate.Exam {
	return predicate.Exam(sql.FieldEQ(FieldNotificationBy, v))
}

// NotificationByNEQ applies the NEQ predicate on the "NotificationBy" field.
func NotificationByNEQ(v string) predicate.Exam {
	return predicate.Exam(sql.FieldNEQ(FieldNotificationBy, v))
}

// NotificationByIn applies the In predicate on the "NotificationBy" field.
func NotificationByIn(vs ...string) predicate.Exam {
	return predicate.Exam(sql.FieldIn(FieldNotificationBy, vs...))
}

// NotificationByNotIn applies the NotIn predicate on the "NotificationBy" field.
func NotificationByNotIn(vs ...string) predicate.Exam {
	return predicate.Exam(sql.FieldNotIn(FieldNotificationBy, vs...))
}

// NotificationByGT applies the GT predicate on the "NotificationBy" field.
func NotificationByGT(v string) predicate.Exam {
	return predicate.Exam(sql.FieldGT(FieldNotificationBy, v))
}

// NotificationByGTE applies the GTE predicate on the "NotificationBy" field.
func NotificationByGTE(v string) predicate.Exam {
	return predicate.Exam(sql.FieldGTE(FieldNotificationBy, v))
}

// NotificationByLT applies the LT predicate on the "NotificationBy" field.
func NotificationByLT(v string) predicate.Exam {
	return predicate.Exam(sql.FieldLT(FieldNotificationBy, v))
}

// NotificationByLTE applies the LTE predicate on the "NotificationBy" field.
func NotificationByLTE(v string) predicate.Exam {
	return predicate.Exam(sql.FieldLTE(FieldNotificationBy, v))
}

// NotificationByContains applies the Contains predicate on the "NotificationBy" field.
func NotificationByContains(v string) predicate.Exam {
	return predicate.Exam(sql.FieldContains(FieldNotificationBy, v))
}

// NotificationByHasPrefix applies the HasPrefix predicate on the "NotificationBy" field.
func NotificationByHasPrefix(v string) predicate.Exam {
	return predicate.Exam(sql.FieldHasPrefix(FieldNotificationBy, v))
}

// NotificationByHasSuffix applies the HasSuffix predicate on the "NotificationBy" field.
func NotificationByHasSuffix(v string) predicate.Exam {
	return predicate.Exam(sql.FieldHasSuffix(FieldNotificationBy, v))
}

// NotificationByEqualFold applies the EqualFold predicate on the "NotificationBy" field.
func NotificationByEqualFold(v string) predicate.Exam {
	return predicate.Exam(sql.FieldEqualFold(FieldNotificationBy, v))
}

// NotificationByContainsFold applies the ContainsFold predicate on the "NotificationBy" field.
func NotificationByContainsFold(v string) predicate.Exam {
	return predicate.Exam(sql.FieldContainsFold(FieldNotificationBy, v))
}

// ConductedByEQ applies the EQ predicate on the "ConductedBy" field.
func ConductedByEQ(v string) predicate.Exam {
	return predicate.Exam(sql.FieldEQ(FieldConductedBy, v))
}

// ConductedByNEQ applies the NEQ predicate on the "ConductedBy" field.
func ConductedByNEQ(v string) predicate.Exam {
	return predicate.Exam(sql.FieldNEQ(FieldConductedBy, v))
}

// ConductedByIn applies the In predicate on the "ConductedBy" field.
func ConductedByIn(vs ...string) predicate.Exam {
	return predicate.Exam(sql.FieldIn(FieldConductedBy, vs...))
}

// ConductedByNotIn applies the NotIn predicate on the "ConductedBy" field.
func ConductedByNotIn(vs ...string) predicate.Exam {
	return predicate.Exam(sql.FieldNotIn(FieldConductedBy, vs...))
}

// ConductedByGT applies the GT predicate on the "ConductedBy" field.
func ConductedByGT(v string) predicate.Exam {
	return predicate.Exam(sql.FieldGT(FieldConductedBy, v))
}

// ConductedByGTE applies the GTE predicate on the "ConductedBy" field.
func ConductedByGTE(v string) predicate.Exam {
	return predicate.Exam(sql.FieldGTE(FieldConductedBy, v))
}

// ConductedByLT applies the LT predicate on the "ConductedBy" field.
func ConductedByLT(v string) predicate.Exam {
	return predicate.Exam(sql.FieldLT(FieldConductedBy, v))
}

// ConductedByLTE applies the LTE predicate on the "ConductedBy" field.
func ConductedByLTE(v string) predicate.Exam {
	return predicate.Exam(sql.FieldLTE(FieldConductedBy, v))
}

// ConductedByContains applies the Contains predicate on the "ConductedBy" field.
func ConductedByContains(v string) predicate.Exam {
	return predicate.Exam(sql.FieldContains(FieldConductedBy, v))
}

// ConductedByHasPrefix applies the HasPrefix predicate on the "ConductedBy" field.
func ConductedByHasPrefix(v string) predicate.Exam {
	return predicate.Exam(sql.FieldHasPrefix(FieldConductedBy, v))
}

// ConductedByHasSuffix applies the HasSuffix predicate on the "ConductedBy" field.
func ConductedByHasSuffix(v string) predicate.Exam {
	return predicate.Exam(sql.FieldHasSuffix(FieldConductedBy, v))
}

// ConductedByEqualFold applies the EqualFold predicate on the "ConductedBy" field.
func ConductedByEqualFold(v string) predicate.Exam {
	return predicate.Exam(sql.FieldEqualFold(FieldConductedBy, v))
}

// ConductedByContainsFold applies the ContainsFold predicate on the "ConductedBy" field.
func ConductedByContainsFold(v string) predicate.Exam {
	return predicate.Exam(sql.FieldContainsFold(FieldConductedBy, v))
}

// NodalOfficerLevelEQ applies the EQ predicate on the "NodalOfficerLevel" field.
func NodalOfficerLevelEQ(v string) predicate.Exam {
	return predicate.Exam(sql.FieldEQ(FieldNodalOfficerLevel, v))
}

// NodalOfficerLevelNEQ applies the NEQ predicate on the "NodalOfficerLevel" field.
func NodalOfficerLevelNEQ(v string) predicate.Exam {
	return predicate.Exam(sql.FieldNEQ(FieldNodalOfficerLevel, v))
}

// NodalOfficerLevelIn applies the In predicate on the "NodalOfficerLevel" field.
func NodalOfficerLevelIn(vs ...string) predicate.Exam {
	return predicate.Exam(sql.FieldIn(FieldNodalOfficerLevel, vs...))
}

// NodalOfficerLevelNotIn applies the NotIn predicate on the "NodalOfficerLevel" field.
func NodalOfficerLevelNotIn(vs ...string) predicate.Exam {
	return predicate.Exam(sql.FieldNotIn(FieldNodalOfficerLevel, vs...))
}

// NodalOfficerLevelGT applies the GT predicate on the "NodalOfficerLevel" field.
func NodalOfficerLevelGT(v string) predicate.Exam {
	return predicate.Exam(sql.FieldGT(FieldNodalOfficerLevel, v))
}

// NodalOfficerLevelGTE applies the GTE predicate on the "NodalOfficerLevel" field.
func NodalOfficerLevelGTE(v string) predicate.Exam {
	return predicate.Exam(sql.FieldGTE(FieldNodalOfficerLevel, v))
}

// NodalOfficerLevelLT applies the LT predicate on the "NodalOfficerLevel" field.
func NodalOfficerLevelLT(v string) predicate.Exam {
	return predicate.Exam(sql.FieldLT(FieldNodalOfficerLevel, v))
}

// NodalOfficerLevelLTE applies the LTE predicate on the "NodalOfficerLevel" field.
func NodalOfficerLevelLTE(v string) predicate.Exam {
	return predicate.Exam(sql.FieldLTE(FieldNodalOfficerLevel, v))
}

// NodalOfficerLevelContains applies the Contains predicate on the "NodalOfficerLevel" field.
func NodalOfficerLevelContains(v string) predicate.Exam {
	return predicate.Exam(sql.FieldContains(FieldNodalOfficerLevel, v))
}

// NodalOfficerLevelHasPrefix applies the HasPrefix predicate on the "NodalOfficerLevel" field.
func NodalOfficerLevelHasPrefix(v string) predicate.Exam {
	return predicate.Exam(sql.FieldHasPrefix(FieldNodalOfficerLevel, v))
}

// NodalOfficerLevelHasSuffix applies the HasSuffix predicate on the "NodalOfficerLevel" field.
func NodalOfficerLevelHasSuffix(v string) predicate.Exam {
	return predicate.Exam(sql.FieldHasSuffix(FieldNodalOfficerLevel, v))
}

// NodalOfficerLevelIsNil applies the IsNil predicate on the "NodalOfficerLevel" field.
func NodalOfficerLevelIsNil() predicate.Exam {
	return predicate.Exam(sql.FieldIsNull(FieldNodalOfficerLevel))
}

// NodalOfficerLevelNotNil applies the NotNil predicate on the "NodalOfficerLevel" field.
func NodalOfficerLevelNotNil() predicate.Exam {
	return predicate.Exam(sql.FieldNotNull(FieldNodalOfficerLevel))
}

// NodalOfficerLevelEqualFold applies the EqualFold predicate on the "NodalOfficerLevel" field.
func NodalOfficerLevelEqualFold(v string) predicate.Exam {
	return predicate.Exam(sql.FieldEqualFold(FieldNodalOfficerLevel, v))
}

// NodalOfficerLevelContainsFold applies the ContainsFold predicate on the "NodalOfficerLevel" field.
func NodalOfficerLevelContainsFold(v string) predicate.Exam {
	return predicate.Exam(sql.FieldContainsFold(FieldNodalOfficerLevel, v))
}

// TentativeNotificationMandatoryDateEQ applies the EQ predicate on the "TentativeNotificationMandatoryDate" field.
func TentativeNotificationMandatoryDateEQ(v bool) predicate.Exam {
	return predicate.Exam(sql.FieldEQ(FieldTentativeNotificationMandatoryDate, v))
}

// TentativeNotificationMandatoryDateNEQ applies the NEQ predicate on the "TentativeNotificationMandatoryDate" field.
func TentativeNotificationMandatoryDateNEQ(v bool) predicate.Exam {
	return predicate.Exam(sql.FieldNEQ(FieldTentativeNotificationMandatoryDate, v))
}

// LocalLanguageEQ applies the EQ predicate on the "LocalLanguage" field.
func LocalLanguageEQ(v bool) predicate.Exam {
	return predicate.Exam(sql.FieldEQ(FieldLocalLanguage, v))
}

// LocalLanguageNEQ applies the NEQ predicate on the "LocalLanguage" field.
func LocalLanguageNEQ(v bool) predicate.Exam {
	return predicate.Exam(sql.FieldNEQ(FieldLocalLanguage, v))
}

// OptionForPostEQ applies the EQ predicate on the "OptionForPost" field.
func OptionForPostEQ(v bool) predicate.Exam {
	return predicate.Exam(sql.FieldEQ(FieldOptionForPost, v))
}

// OptionForPostNEQ applies the NEQ predicate on the "OptionForPost" field.
func OptionForPostNEQ(v bool) predicate.Exam {
	return predicate.Exam(sql.FieldNEQ(FieldOptionForPost, v))
}

// OptionToWriteExamOtherThanParentEQ applies the EQ predicate on the "OptionToWriteExamOtherThanParent" field.
func OptionToWriteExamOtherThanParentEQ(v bool) predicate.Exam {
	return predicate.Exam(sql.FieldEQ(FieldOptionToWriteExamOtherThanParent, v))
}

// OptionToWriteExamOtherThanParentNEQ applies the NEQ predicate on the "OptionToWriteExamOtherThanParent" field.
func OptionToWriteExamOtherThanParentNEQ(v bool) predicate.Exam {
	return predicate.Exam(sql.FieldNEQ(FieldOptionToWriteExamOtherThanParent, v))
}

// TableNameEQ applies the EQ predicate on the "TableName" field.
func TableNameEQ(v string) predicate.Exam {
	return predicate.Exam(sql.FieldEQ(FieldTableName, v))
}

// TableNameNEQ applies the NEQ predicate on the "TableName" field.
func TableNameNEQ(v string) predicate.Exam {
	return predicate.Exam(sql.FieldNEQ(FieldTableName, v))
}

// TableNameIn applies the In predicate on the "TableName" field.
func TableNameIn(vs ...string) predicate.Exam {
	return predicate.Exam(sql.FieldIn(FieldTableName, vs...))
}

// TableNameNotIn applies the NotIn predicate on the "TableName" field.
func TableNameNotIn(vs ...string) predicate.Exam {
	return predicate.Exam(sql.FieldNotIn(FieldTableName, vs...))
}

// TableNameGT applies the GT predicate on the "TableName" field.
func TableNameGT(v string) predicate.Exam {
	return predicate.Exam(sql.FieldGT(FieldTableName, v))
}

// TableNameGTE applies the GTE predicate on the "TableName" field.
func TableNameGTE(v string) predicate.Exam {
	return predicate.Exam(sql.FieldGTE(FieldTableName, v))
}

// TableNameLT applies the LT predicate on the "TableName" field.
func TableNameLT(v string) predicate.Exam {
	return predicate.Exam(sql.FieldLT(FieldTableName, v))
}

// TableNameLTE applies the LTE predicate on the "TableName" field.
func TableNameLTE(v string) predicate.Exam {
	return predicate.Exam(sql.FieldLTE(FieldTableName, v))
}

// TableNameContains applies the Contains predicate on the "TableName" field.
func TableNameContains(v string) predicate.Exam {
	return predicate.Exam(sql.FieldContains(FieldTableName, v))
}

// TableNameHasPrefix applies the HasPrefix predicate on the "TableName" field.
func TableNameHasPrefix(v string) predicate.Exam {
	return predicate.Exam(sql.FieldHasPrefix(FieldTableName, v))
}

// TableNameHasSuffix applies the HasSuffix predicate on the "TableName" field.
func TableNameHasSuffix(v string) predicate.Exam {
	return predicate.Exam(sql.FieldHasSuffix(FieldTableName, v))
}

// TableNameIsNil applies the IsNil predicate on the "TableName" field.
func TableNameIsNil() predicate.Exam {
	return predicate.Exam(sql.FieldIsNull(FieldTableName))
}

// TableNameNotNil applies the NotNil predicate on the "TableName" field.
func TableNameNotNil() predicate.Exam {
	return predicate.Exam(sql.FieldNotNull(FieldTableName))
}

// TableNameEqualFold applies the EqualFold predicate on the "TableName" field.
func TableNameEqualFold(v string) predicate.Exam {
	return predicate.Exam(sql.FieldEqualFold(FieldTableName, v))
}

// TableNameContainsFold applies the ContainsFold predicate on the "TableName" field.
func TableNameContainsFold(v string) predicate.Exam {
	return predicate.Exam(sql.FieldContainsFold(FieldTableName, v))
}

// OrderNumberEQ applies the EQ predicate on the "OrderNumber" field.
func OrderNumberEQ(v string) predicate.Exam {
	return predicate.Exam(sql.FieldEQ(FieldOrderNumber, v))
}

// OrderNumberNEQ applies the NEQ predicate on the "OrderNumber" field.
func OrderNumberNEQ(v string) predicate.Exam {
	return predicate.Exam(sql.FieldNEQ(FieldOrderNumber, v))
}

// OrderNumberIn applies the In predicate on the "OrderNumber" field.
func OrderNumberIn(vs ...string) predicate.Exam {
	return predicate.Exam(sql.FieldIn(FieldOrderNumber, vs...))
}

// OrderNumberNotIn applies the NotIn predicate on the "OrderNumber" field.
func OrderNumberNotIn(vs ...string) predicate.Exam {
	return predicate.Exam(sql.FieldNotIn(FieldOrderNumber, vs...))
}

// OrderNumberGT applies the GT predicate on the "OrderNumber" field.
func OrderNumberGT(v string) predicate.Exam {
	return predicate.Exam(sql.FieldGT(FieldOrderNumber, v))
}

// OrderNumberGTE applies the GTE predicate on the "OrderNumber" field.
func OrderNumberGTE(v string) predicate.Exam {
	return predicate.Exam(sql.FieldGTE(FieldOrderNumber, v))
}

// OrderNumberLT applies the LT predicate on the "OrderNumber" field.
func OrderNumberLT(v string) predicate.Exam {
	return predicate.Exam(sql.FieldLT(FieldOrderNumber, v))
}

// OrderNumberLTE applies the LTE predicate on the "OrderNumber" field.
func OrderNumberLTE(v string) predicate.Exam {
	return predicate.Exam(sql.FieldLTE(FieldOrderNumber, v))
}

// OrderNumberContains applies the Contains predicate on the "OrderNumber" field.
func OrderNumberContains(v string) predicate.Exam {
	return predicate.Exam(sql.FieldContains(FieldOrderNumber, v))
}

// OrderNumberHasPrefix applies the HasPrefix predicate on the "OrderNumber" field.
func OrderNumberHasPrefix(v string) predicate.Exam {
	return predicate.Exam(sql.FieldHasPrefix(FieldOrderNumber, v))
}

// OrderNumberHasSuffix applies the HasSuffix predicate on the "OrderNumber" field.
func OrderNumberHasSuffix(v string) predicate.Exam {
	return predicate.Exam(sql.FieldHasSuffix(FieldOrderNumber, v))
}

// OrderNumberIsNil applies the IsNil predicate on the "OrderNumber" field.
func OrderNumberIsNil() predicate.Exam {
	return predicate.Exam(sql.FieldIsNull(FieldOrderNumber))
}

// OrderNumberNotNil applies the NotNil predicate on the "OrderNumber" field.
func OrderNumberNotNil() predicate.Exam {
	return predicate.Exam(sql.FieldNotNull(FieldOrderNumber))
}

// OrderNumberEqualFold applies the EqualFold predicate on the "OrderNumber" field.
func OrderNumberEqualFold(v string) predicate.Exam {
	return predicate.Exam(sql.FieldEqualFold(FieldOrderNumber, v))
}

// OrderNumberContainsFold applies the ContainsFold predicate on the "OrderNumber" field.
func OrderNumberContainsFold(v string) predicate.Exam {
	return predicate.Exam(sql.FieldContainsFold(FieldOrderNumber, v))
}

// CreatedByIdEQ applies the EQ predicate on the "CreatedById" field.
func CreatedByIdEQ(v int64) predicate.Exam {
	return predicate.Exam(sql.FieldEQ(FieldCreatedById, v))
}

// CreatedByIdNEQ applies the NEQ predicate on the "CreatedById" field.
func CreatedByIdNEQ(v int64) predicate.Exam {
	return predicate.Exam(sql.FieldNEQ(FieldCreatedById, v))
}

// CreatedByIdIn applies the In predicate on the "CreatedById" field.
func CreatedByIdIn(vs ...int64) predicate.Exam {
	return predicate.Exam(sql.FieldIn(FieldCreatedById, vs...))
}

// CreatedByIdNotIn applies the NotIn predicate on the "CreatedById" field.
func CreatedByIdNotIn(vs ...int64) predicate.Exam {
	return predicate.Exam(sql.FieldNotIn(FieldCreatedById, vs...))
}

// CreatedByIdGT applies the GT predicate on the "CreatedById" field.
func CreatedByIdGT(v int64) predicate.Exam {
	return predicate.Exam(sql.FieldGT(FieldCreatedById, v))
}

// CreatedByIdGTE applies the GTE predicate on the "CreatedById" field.
func CreatedByIdGTE(v int64) predicate.Exam {
	return predicate.Exam(sql.FieldGTE(FieldCreatedById, v))
}

// CreatedByIdLT applies the LT predicate on the "CreatedById" field.
func CreatedByIdLT(v int64) predicate.Exam {
	return predicate.Exam(sql.FieldLT(FieldCreatedById, v))
}

// CreatedByIdLTE applies the LTE predicate on the "CreatedById" field.
func CreatedByIdLTE(v int64) predicate.Exam {
	return predicate.Exam(sql.FieldLTE(FieldCreatedById, v))
}

// CreatedByIdIsNil applies the IsNil predicate on the "CreatedById" field.
func CreatedByIdIsNil() predicate.Exam {
	return predicate.Exam(sql.FieldIsNull(FieldCreatedById))
}

// CreatedByIdNotNil applies the NotNil predicate on the "CreatedById" field.
func CreatedByIdNotNil() predicate.Exam {
	return predicate.Exam(sql.FieldNotNull(FieldCreatedById))
}

// CreatedByUserNameEQ applies the EQ predicate on the "CreatedByUserName" field.
func CreatedByUserNameEQ(v string) predicate.Exam {
	return predicate.Exam(sql.FieldEQ(FieldCreatedByUserName, v))
}

// CreatedByUserNameNEQ applies the NEQ predicate on the "CreatedByUserName" field.
func CreatedByUserNameNEQ(v string) predicate.Exam {
	return predicate.Exam(sql.FieldNEQ(FieldCreatedByUserName, v))
}

// CreatedByUserNameIn applies the In predicate on the "CreatedByUserName" field.
func CreatedByUserNameIn(vs ...string) predicate.Exam {
	return predicate.Exam(sql.FieldIn(FieldCreatedByUserName, vs...))
}

// CreatedByUserNameNotIn applies the NotIn predicate on the "CreatedByUserName" field.
func CreatedByUserNameNotIn(vs ...string) predicate.Exam {
	return predicate.Exam(sql.FieldNotIn(FieldCreatedByUserName, vs...))
}

// CreatedByUserNameGT applies the GT predicate on the "CreatedByUserName" field.
func CreatedByUserNameGT(v string) predicate.Exam {
	return predicate.Exam(sql.FieldGT(FieldCreatedByUserName, v))
}

// CreatedByUserNameGTE applies the GTE predicate on the "CreatedByUserName" field.
func CreatedByUserNameGTE(v string) predicate.Exam {
	return predicate.Exam(sql.FieldGTE(FieldCreatedByUserName, v))
}

// CreatedByUserNameLT applies the LT predicate on the "CreatedByUserName" field.
func CreatedByUserNameLT(v string) predicate.Exam {
	return predicate.Exam(sql.FieldLT(FieldCreatedByUserName, v))
}

// CreatedByUserNameLTE applies the LTE predicate on the "CreatedByUserName" field.
func CreatedByUserNameLTE(v string) predicate.Exam {
	return predicate.Exam(sql.FieldLTE(FieldCreatedByUserName, v))
}

// CreatedByUserNameContains applies the Contains predicate on the "CreatedByUserName" field.
func CreatedByUserNameContains(v string) predicate.Exam {
	return predicate.Exam(sql.FieldContains(FieldCreatedByUserName, v))
}

// CreatedByUserNameHasPrefix applies the HasPrefix predicate on the "CreatedByUserName" field.
func CreatedByUserNameHasPrefix(v string) predicate.Exam {
	return predicate.Exam(sql.FieldHasPrefix(FieldCreatedByUserName, v))
}

// CreatedByUserNameHasSuffix applies the HasSuffix predicate on the "CreatedByUserName" field.
func CreatedByUserNameHasSuffix(v string) predicate.Exam {
	return predicate.Exam(sql.FieldHasSuffix(FieldCreatedByUserName, v))
}

// CreatedByUserNameIsNil applies the IsNil predicate on the "CreatedByUserName" field.
func CreatedByUserNameIsNil() predicate.Exam {
	return predicate.Exam(sql.FieldIsNull(FieldCreatedByUserName))
}

// CreatedByUserNameNotNil applies the NotNil predicate on the "CreatedByUserName" field.
func CreatedByUserNameNotNil() predicate.Exam {
	return predicate.Exam(sql.FieldNotNull(FieldCreatedByUserName))
}

// CreatedByUserNameEqualFold applies the EqualFold predicate on the "CreatedByUserName" field.
func CreatedByUserNameEqualFold(v string) predicate.Exam {
	return predicate.Exam(sql.FieldEqualFold(FieldCreatedByUserName, v))
}

// CreatedByUserNameContainsFold applies the ContainsFold predicate on the "CreatedByUserName" field.
func CreatedByUserNameContainsFold(v string) predicate.Exam {
	return predicate.Exam(sql.FieldContainsFold(FieldCreatedByUserName, v))
}

// CreatedByEmpIdEQ applies the EQ predicate on the "CreatedByEmpId" field.
func CreatedByEmpIdEQ(v int64) predicate.Exam {
	return predicate.Exam(sql.FieldEQ(FieldCreatedByEmpId, v))
}

// CreatedByEmpIdNEQ applies the NEQ predicate on the "CreatedByEmpId" field.
func CreatedByEmpIdNEQ(v int64) predicate.Exam {
	return predicate.Exam(sql.FieldNEQ(FieldCreatedByEmpId, v))
}

// CreatedByEmpIdIn applies the In predicate on the "CreatedByEmpId" field.
func CreatedByEmpIdIn(vs ...int64) predicate.Exam {
	return predicate.Exam(sql.FieldIn(FieldCreatedByEmpId, vs...))
}

// CreatedByEmpIdNotIn applies the NotIn predicate on the "CreatedByEmpId" field.
func CreatedByEmpIdNotIn(vs ...int64) predicate.Exam {
	return predicate.Exam(sql.FieldNotIn(FieldCreatedByEmpId, vs...))
}

// CreatedByEmpIdGT applies the GT predicate on the "CreatedByEmpId" field.
func CreatedByEmpIdGT(v int64) predicate.Exam {
	return predicate.Exam(sql.FieldGT(FieldCreatedByEmpId, v))
}

// CreatedByEmpIdGTE applies the GTE predicate on the "CreatedByEmpId" field.
func CreatedByEmpIdGTE(v int64) predicate.Exam {
	return predicate.Exam(sql.FieldGTE(FieldCreatedByEmpId, v))
}

// CreatedByEmpIdLT applies the LT predicate on the "CreatedByEmpId" field.
func CreatedByEmpIdLT(v int64) predicate.Exam {
	return predicate.Exam(sql.FieldLT(FieldCreatedByEmpId, v))
}

// CreatedByEmpIdLTE applies the LTE predicate on the "CreatedByEmpId" field.
func CreatedByEmpIdLTE(v int64) predicate.Exam {
	return predicate.Exam(sql.FieldLTE(FieldCreatedByEmpId, v))
}

// CreatedByEmpIdIsNil applies the IsNil predicate on the "CreatedByEmpId" field.
func CreatedByEmpIdIsNil() predicate.Exam {
	return predicate.Exam(sql.FieldIsNull(FieldCreatedByEmpId))
}

// CreatedByEmpIdNotNil applies the NotNil predicate on the "CreatedByEmpId" field.
func CreatedByEmpIdNotNil() predicate.Exam {
	return predicate.Exam(sql.FieldNotNull(FieldCreatedByEmpId))
}

// CreatedByDesignationEQ applies the EQ predicate on the "CreatedByDesignation" field.
func CreatedByDesignationEQ(v string) predicate.Exam {
	return predicate.Exam(sql.FieldEQ(FieldCreatedByDesignation, v))
}

// CreatedByDesignationNEQ applies the NEQ predicate on the "CreatedByDesignation" field.
func CreatedByDesignationNEQ(v string) predicate.Exam {
	return predicate.Exam(sql.FieldNEQ(FieldCreatedByDesignation, v))
}

// CreatedByDesignationIn applies the In predicate on the "CreatedByDesignation" field.
func CreatedByDesignationIn(vs ...string) predicate.Exam {
	return predicate.Exam(sql.FieldIn(FieldCreatedByDesignation, vs...))
}

// CreatedByDesignationNotIn applies the NotIn predicate on the "CreatedByDesignation" field.
func CreatedByDesignationNotIn(vs ...string) predicate.Exam {
	return predicate.Exam(sql.FieldNotIn(FieldCreatedByDesignation, vs...))
}

// CreatedByDesignationGT applies the GT predicate on the "CreatedByDesignation" field.
func CreatedByDesignationGT(v string) predicate.Exam {
	return predicate.Exam(sql.FieldGT(FieldCreatedByDesignation, v))
}

// CreatedByDesignationGTE applies the GTE predicate on the "CreatedByDesignation" field.
func CreatedByDesignationGTE(v string) predicate.Exam {
	return predicate.Exam(sql.FieldGTE(FieldCreatedByDesignation, v))
}

// CreatedByDesignationLT applies the LT predicate on the "CreatedByDesignation" field.
func CreatedByDesignationLT(v string) predicate.Exam {
	return predicate.Exam(sql.FieldLT(FieldCreatedByDesignation, v))
}

// CreatedByDesignationLTE applies the LTE predicate on the "CreatedByDesignation" field.
func CreatedByDesignationLTE(v string) predicate.Exam {
	return predicate.Exam(sql.FieldLTE(FieldCreatedByDesignation, v))
}

// CreatedByDesignationContains applies the Contains predicate on the "CreatedByDesignation" field.
func CreatedByDesignationContains(v string) predicate.Exam {
	return predicate.Exam(sql.FieldContains(FieldCreatedByDesignation, v))
}

// CreatedByDesignationHasPrefix applies the HasPrefix predicate on the "CreatedByDesignation" field.
func CreatedByDesignationHasPrefix(v string) predicate.Exam {
	return predicate.Exam(sql.FieldHasPrefix(FieldCreatedByDesignation, v))
}

// CreatedByDesignationHasSuffix applies the HasSuffix predicate on the "CreatedByDesignation" field.
func CreatedByDesignationHasSuffix(v string) predicate.Exam {
	return predicate.Exam(sql.FieldHasSuffix(FieldCreatedByDesignation, v))
}

// CreatedByDesignationIsNil applies the IsNil predicate on the "CreatedByDesignation" field.
func CreatedByDesignationIsNil() predicate.Exam {
	return predicate.Exam(sql.FieldIsNull(FieldCreatedByDesignation))
}

// CreatedByDesignationNotNil applies the NotNil predicate on the "CreatedByDesignation" field.
func CreatedByDesignationNotNil() predicate.Exam {
	return predicate.Exam(sql.FieldNotNull(FieldCreatedByDesignation))
}

// CreatedByDesignationEqualFold applies the EqualFold predicate on the "CreatedByDesignation" field.
func CreatedByDesignationEqualFold(v string) predicate.Exam {
	return predicate.Exam(sql.FieldEqualFold(FieldCreatedByDesignation, v))
}

// CreatedByDesignationContainsFold applies the ContainsFold predicate on the "CreatedByDesignation" field.
func CreatedByDesignationContainsFold(v string) predicate.Exam {
	return predicate.Exam(sql.FieldContainsFold(FieldCreatedByDesignation, v))
}

// CreatedDateEQ applies the EQ predicate on the "CreatedDate" field.
func CreatedDateEQ(v time.Time) predicate.Exam {
	return predicate.Exam(sql.FieldEQ(FieldCreatedDate, v))
}

// CreatedDateNEQ applies the NEQ predicate on the "CreatedDate" field.
func CreatedDateNEQ(v time.Time) predicate.Exam {
	return predicate.Exam(sql.FieldNEQ(FieldCreatedDate, v))
}

// CreatedDateIn applies the In predicate on the "CreatedDate" field.
func CreatedDateIn(vs ...time.Time) predicate.Exam {
	return predicate.Exam(sql.FieldIn(FieldCreatedDate, vs...))
}

// CreatedDateNotIn applies the NotIn predicate on the "CreatedDate" field.
func CreatedDateNotIn(vs ...time.Time) predicate.Exam {
	return predicate.Exam(sql.FieldNotIn(FieldCreatedDate, vs...))
}

// CreatedDateGT applies the GT predicate on the "CreatedDate" field.
func CreatedDateGT(v time.Time) predicate.Exam {
	return predicate.Exam(sql.FieldGT(FieldCreatedDate, v))
}

// CreatedDateGTE applies the GTE predicate on the "CreatedDate" field.
func CreatedDateGTE(v time.Time) predicate.Exam {
	return predicate.Exam(sql.FieldGTE(FieldCreatedDate, v))
}

// CreatedDateLT applies the LT predicate on the "CreatedDate" field.
func CreatedDateLT(v time.Time) predicate.Exam {
	return predicate.Exam(sql.FieldLT(FieldCreatedDate, v))
}

// CreatedDateLTE applies the LTE predicate on the "CreatedDate" field.
func CreatedDateLTE(v time.Time) predicate.Exam {
	return predicate.Exam(sql.FieldLTE(FieldCreatedDate, v))
}

// CreatedDateIsNil applies the IsNil predicate on the "CreatedDate" field.
func CreatedDateIsNil() predicate.Exam {
	return predicate.Exam(sql.FieldIsNull(FieldCreatedDate))
}

// CreatedDateNotNil applies the NotNil predicate on the "CreatedDate" field.
func CreatedDateNotNil() predicate.Exam {
	return predicate.Exam(sql.FieldNotNull(FieldCreatedDate))
}

// VerifiedbyidEQ applies the EQ predicate on the "verifiedbyid" field.
func VerifiedbyidEQ(v int64) predicate.Exam {
	return predicate.Exam(sql.FieldEQ(FieldVerifiedbyid, v))
}

// VerifiedbyidNEQ applies the NEQ predicate on the "verifiedbyid" field.
func VerifiedbyidNEQ(v int64) predicate.Exam {
	return predicate.Exam(sql.FieldNEQ(FieldVerifiedbyid, v))
}

// VerifiedbyidIn applies the In predicate on the "verifiedbyid" field.
func VerifiedbyidIn(vs ...int64) predicate.Exam {
	return predicate.Exam(sql.FieldIn(FieldVerifiedbyid, vs...))
}

// VerifiedbyidNotIn applies the NotIn predicate on the "verifiedbyid" field.
func VerifiedbyidNotIn(vs ...int64) predicate.Exam {
	return predicate.Exam(sql.FieldNotIn(FieldVerifiedbyid, vs...))
}

// VerifiedbyidGT applies the GT predicate on the "verifiedbyid" field.
func VerifiedbyidGT(v int64) predicate.Exam {
	return predicate.Exam(sql.FieldGT(FieldVerifiedbyid, v))
}

// VerifiedbyidGTE applies the GTE predicate on the "verifiedbyid" field.
func VerifiedbyidGTE(v int64) predicate.Exam {
	return predicate.Exam(sql.FieldGTE(FieldVerifiedbyid, v))
}

// VerifiedbyidLT applies the LT predicate on the "verifiedbyid" field.
func VerifiedbyidLT(v int64) predicate.Exam {
	return predicate.Exam(sql.FieldLT(FieldVerifiedbyid, v))
}

// VerifiedbyidLTE applies the LTE predicate on the "verifiedbyid" field.
func VerifiedbyidLTE(v int64) predicate.Exam {
	return predicate.Exam(sql.FieldLTE(FieldVerifiedbyid, v))
}

// VerifiedbyidIsNil applies the IsNil predicate on the "verifiedbyid" field.
func VerifiedbyidIsNil() predicate.Exam {
	return predicate.Exam(sql.FieldIsNull(FieldVerifiedbyid))
}

// VerifiedbyidNotNil applies the NotNil predicate on the "verifiedbyid" field.
func VerifiedbyidNotNil() predicate.Exam {
	return predicate.Exam(sql.FieldNotNull(FieldVerifiedbyid))
}

// VerifiedbyusernameEQ applies the EQ predicate on the "verifiedbyusername" field.
func VerifiedbyusernameEQ(v string) predicate.Exam {
	return predicate.Exam(sql.FieldEQ(FieldVerifiedbyusername, v))
}

// VerifiedbyusernameNEQ applies the NEQ predicate on the "verifiedbyusername" field.
func VerifiedbyusernameNEQ(v string) predicate.Exam {
	return predicate.Exam(sql.FieldNEQ(FieldVerifiedbyusername, v))
}

// VerifiedbyusernameIn applies the In predicate on the "verifiedbyusername" field.
func VerifiedbyusernameIn(vs ...string) predicate.Exam {
	return predicate.Exam(sql.FieldIn(FieldVerifiedbyusername, vs...))
}

// VerifiedbyusernameNotIn applies the NotIn predicate on the "verifiedbyusername" field.
func VerifiedbyusernameNotIn(vs ...string) predicate.Exam {
	return predicate.Exam(sql.FieldNotIn(FieldVerifiedbyusername, vs...))
}

// VerifiedbyusernameGT applies the GT predicate on the "verifiedbyusername" field.
func VerifiedbyusernameGT(v string) predicate.Exam {
	return predicate.Exam(sql.FieldGT(FieldVerifiedbyusername, v))
}

// VerifiedbyusernameGTE applies the GTE predicate on the "verifiedbyusername" field.
func VerifiedbyusernameGTE(v string) predicate.Exam {
	return predicate.Exam(sql.FieldGTE(FieldVerifiedbyusername, v))
}

// VerifiedbyusernameLT applies the LT predicate on the "verifiedbyusername" field.
func VerifiedbyusernameLT(v string) predicate.Exam {
	return predicate.Exam(sql.FieldLT(FieldVerifiedbyusername, v))
}

// VerifiedbyusernameLTE applies the LTE predicate on the "verifiedbyusername" field.
func VerifiedbyusernameLTE(v string) predicate.Exam {
	return predicate.Exam(sql.FieldLTE(FieldVerifiedbyusername, v))
}

// VerifiedbyusernameContains applies the Contains predicate on the "verifiedbyusername" field.
func VerifiedbyusernameContains(v string) predicate.Exam {
	return predicate.Exam(sql.FieldContains(FieldVerifiedbyusername, v))
}

// VerifiedbyusernameHasPrefix applies the HasPrefix predicate on the "verifiedbyusername" field.
func VerifiedbyusernameHasPrefix(v string) predicate.Exam {
	return predicate.Exam(sql.FieldHasPrefix(FieldVerifiedbyusername, v))
}

// VerifiedbyusernameHasSuffix applies the HasSuffix predicate on the "verifiedbyusername" field.
func VerifiedbyusernameHasSuffix(v string) predicate.Exam {
	return predicate.Exam(sql.FieldHasSuffix(FieldVerifiedbyusername, v))
}

// VerifiedbyusernameIsNil applies the IsNil predicate on the "verifiedbyusername" field.
func VerifiedbyusernameIsNil() predicate.Exam {
	return predicate.Exam(sql.FieldIsNull(FieldVerifiedbyusername))
}

// VerifiedbyusernameNotNil applies the NotNil predicate on the "verifiedbyusername" field.
func VerifiedbyusernameNotNil() predicate.Exam {
	return predicate.Exam(sql.FieldNotNull(FieldVerifiedbyusername))
}

// VerifiedbyusernameEqualFold applies the EqualFold predicate on the "verifiedbyusername" field.
func VerifiedbyusernameEqualFold(v string) predicate.Exam {
	return predicate.Exam(sql.FieldEqualFold(FieldVerifiedbyusername, v))
}

// VerifiedbyusernameContainsFold applies the ContainsFold predicate on the "verifiedbyusername" field.
func VerifiedbyusernameContainsFold(v string) predicate.Exam {
	return predicate.Exam(sql.FieldContainsFold(FieldVerifiedbyusername, v))
}

// VerifiedbyEmployeeidEQ applies the EQ predicate on the "verifiedbyEmployeeid" field.
func VerifiedbyEmployeeidEQ(v int64) predicate.Exam {
	return predicate.Exam(sql.FieldEQ(FieldVerifiedbyEmployeeid, v))
}

// VerifiedbyEmployeeidNEQ applies the NEQ predicate on the "verifiedbyEmployeeid" field.
func VerifiedbyEmployeeidNEQ(v int64) predicate.Exam {
	return predicate.Exam(sql.FieldNEQ(FieldVerifiedbyEmployeeid, v))
}

// VerifiedbyEmployeeidIn applies the In predicate on the "verifiedbyEmployeeid" field.
func VerifiedbyEmployeeidIn(vs ...int64) predicate.Exam {
	return predicate.Exam(sql.FieldIn(FieldVerifiedbyEmployeeid, vs...))
}

// VerifiedbyEmployeeidNotIn applies the NotIn predicate on the "verifiedbyEmployeeid" field.
func VerifiedbyEmployeeidNotIn(vs ...int64) predicate.Exam {
	return predicate.Exam(sql.FieldNotIn(FieldVerifiedbyEmployeeid, vs...))
}

// VerifiedbyEmployeeidGT applies the GT predicate on the "verifiedbyEmployeeid" field.
func VerifiedbyEmployeeidGT(v int64) predicate.Exam {
	return predicate.Exam(sql.FieldGT(FieldVerifiedbyEmployeeid, v))
}

// VerifiedbyEmployeeidGTE applies the GTE predicate on the "verifiedbyEmployeeid" field.
func VerifiedbyEmployeeidGTE(v int64) predicate.Exam {
	return predicate.Exam(sql.FieldGTE(FieldVerifiedbyEmployeeid, v))
}

// VerifiedbyEmployeeidLT applies the LT predicate on the "verifiedbyEmployeeid" field.
func VerifiedbyEmployeeidLT(v int64) predicate.Exam {
	return predicate.Exam(sql.FieldLT(FieldVerifiedbyEmployeeid, v))
}

// VerifiedbyEmployeeidLTE applies the LTE predicate on the "verifiedbyEmployeeid" field.
func VerifiedbyEmployeeidLTE(v int64) predicate.Exam {
	return predicate.Exam(sql.FieldLTE(FieldVerifiedbyEmployeeid, v))
}

// VerifiedbyEmployeeidIsNil applies the IsNil predicate on the "verifiedbyEmployeeid" field.
func VerifiedbyEmployeeidIsNil() predicate.Exam {
	return predicate.Exam(sql.FieldIsNull(FieldVerifiedbyEmployeeid))
}

// VerifiedbyEmployeeidNotNil applies the NotNil predicate on the "verifiedbyEmployeeid" field.
func VerifiedbyEmployeeidNotNil() predicate.Exam {
	return predicate.Exam(sql.FieldNotNull(FieldVerifiedbyEmployeeid))
}

// VerifiedbyDesignationEQ applies the EQ predicate on the "verifiedbyDesignation" field.
func VerifiedbyDesignationEQ(v string) predicate.Exam {
	return predicate.Exam(sql.FieldEQ(FieldVerifiedbyDesignation, v))
}

// VerifiedbyDesignationNEQ applies the NEQ predicate on the "verifiedbyDesignation" field.
func VerifiedbyDesignationNEQ(v string) predicate.Exam {
	return predicate.Exam(sql.FieldNEQ(FieldVerifiedbyDesignation, v))
}

// VerifiedbyDesignationIn applies the In predicate on the "verifiedbyDesignation" field.
func VerifiedbyDesignationIn(vs ...string) predicate.Exam {
	return predicate.Exam(sql.FieldIn(FieldVerifiedbyDesignation, vs...))
}

// VerifiedbyDesignationNotIn applies the NotIn predicate on the "verifiedbyDesignation" field.
func VerifiedbyDesignationNotIn(vs ...string) predicate.Exam {
	return predicate.Exam(sql.FieldNotIn(FieldVerifiedbyDesignation, vs...))
}

// VerifiedbyDesignationGT applies the GT predicate on the "verifiedbyDesignation" field.
func VerifiedbyDesignationGT(v string) predicate.Exam {
	return predicate.Exam(sql.FieldGT(FieldVerifiedbyDesignation, v))
}

// VerifiedbyDesignationGTE applies the GTE predicate on the "verifiedbyDesignation" field.
func VerifiedbyDesignationGTE(v string) predicate.Exam {
	return predicate.Exam(sql.FieldGTE(FieldVerifiedbyDesignation, v))
}

// VerifiedbyDesignationLT applies the LT predicate on the "verifiedbyDesignation" field.
func VerifiedbyDesignationLT(v string) predicate.Exam {
	return predicate.Exam(sql.FieldLT(FieldVerifiedbyDesignation, v))
}

// VerifiedbyDesignationLTE applies the LTE predicate on the "verifiedbyDesignation" field.
func VerifiedbyDesignationLTE(v string) predicate.Exam {
	return predicate.Exam(sql.FieldLTE(FieldVerifiedbyDesignation, v))
}

// VerifiedbyDesignationContains applies the Contains predicate on the "verifiedbyDesignation" field.
func VerifiedbyDesignationContains(v string) predicate.Exam {
	return predicate.Exam(sql.FieldContains(FieldVerifiedbyDesignation, v))
}

// VerifiedbyDesignationHasPrefix applies the HasPrefix predicate on the "verifiedbyDesignation" field.
func VerifiedbyDesignationHasPrefix(v string) predicate.Exam {
	return predicate.Exam(sql.FieldHasPrefix(FieldVerifiedbyDesignation, v))
}

// VerifiedbyDesignationHasSuffix applies the HasSuffix predicate on the "verifiedbyDesignation" field.
func VerifiedbyDesignationHasSuffix(v string) predicate.Exam {
	return predicate.Exam(sql.FieldHasSuffix(FieldVerifiedbyDesignation, v))
}

// VerifiedbyDesignationIsNil applies the IsNil predicate on the "verifiedbyDesignation" field.
func VerifiedbyDesignationIsNil() predicate.Exam {
	return predicate.Exam(sql.FieldIsNull(FieldVerifiedbyDesignation))
}

// VerifiedbyDesignationNotNil applies the NotNil predicate on the "verifiedbyDesignation" field.
func VerifiedbyDesignationNotNil() predicate.Exam {
	return predicate.Exam(sql.FieldNotNull(FieldVerifiedbyDesignation))
}

// VerifiedbyDesignationEqualFold applies the EqualFold predicate on the "verifiedbyDesignation" field.
func VerifiedbyDesignationEqualFold(v string) predicate.Exam {
	return predicate.Exam(sql.FieldEqualFold(FieldVerifiedbyDesignation, v))
}

// VerifiedbyDesignationContainsFold applies the ContainsFold predicate on the "verifiedbyDesignation" field.
func VerifiedbyDesignationContainsFold(v string) predicate.Exam {
	return predicate.Exam(sql.FieldContainsFold(FieldVerifiedbyDesignation, v))
}

// VerifiedDateEQ applies the EQ predicate on the "verifiedDate" field.
func VerifiedDateEQ(v time.Time) predicate.Exam {
	return predicate.Exam(sql.FieldEQ(FieldVerifiedDate, v))
}

// VerifiedDateNEQ applies the NEQ predicate on the "verifiedDate" field.
func VerifiedDateNEQ(v time.Time) predicate.Exam {
	return predicate.Exam(sql.FieldNEQ(FieldVerifiedDate, v))
}

// VerifiedDateIn applies the In predicate on the "verifiedDate" field.
func VerifiedDateIn(vs ...time.Time) predicate.Exam {
	return predicate.Exam(sql.FieldIn(FieldVerifiedDate, vs...))
}

// VerifiedDateNotIn applies the NotIn predicate on the "verifiedDate" field.
func VerifiedDateNotIn(vs ...time.Time) predicate.Exam {
	return predicate.Exam(sql.FieldNotIn(FieldVerifiedDate, vs...))
}

// VerifiedDateGT applies the GT predicate on the "verifiedDate" field.
func VerifiedDateGT(v time.Time) predicate.Exam {
	return predicate.Exam(sql.FieldGT(FieldVerifiedDate, v))
}

// VerifiedDateGTE applies the GTE predicate on the "verifiedDate" field.
func VerifiedDateGTE(v time.Time) predicate.Exam {
	return predicate.Exam(sql.FieldGTE(FieldVerifiedDate, v))
}

// VerifiedDateLT applies the LT predicate on the "verifiedDate" field.
func VerifiedDateLT(v time.Time) predicate.Exam {
	return predicate.Exam(sql.FieldLT(FieldVerifiedDate, v))
}

// VerifiedDateLTE applies the LTE predicate on the "verifiedDate" field.
func VerifiedDateLTE(v time.Time) predicate.Exam {
	return predicate.Exam(sql.FieldLTE(FieldVerifiedDate, v))
}

// VerifiedDateIsNil applies the IsNil predicate on the "verifiedDate" field.
func VerifiedDateIsNil() predicate.Exam {
	return predicate.Exam(sql.FieldIsNull(FieldVerifiedDate))
}

// VerifiedDateNotNil applies the NotNil predicate on the "verifiedDate" field.
func VerifiedDateNotNil() predicate.Exam {
	return predicate.Exam(sql.FieldNotNull(FieldVerifiedDate))
}

// StatussEQ applies the EQ predicate on the "Statuss" field.
func StatussEQ(v string) predicate.Exam {
	return predicate.Exam(sql.FieldEQ(FieldStatuss, v))
}

// StatussNEQ applies the NEQ predicate on the "Statuss" field.
func StatussNEQ(v string) predicate.Exam {
	return predicate.Exam(sql.FieldNEQ(FieldStatuss, v))
}

// StatussIn applies the In predicate on the "Statuss" field.
func StatussIn(vs ...string) predicate.Exam {
	return predicate.Exam(sql.FieldIn(FieldStatuss, vs...))
}

// StatussNotIn applies the NotIn predicate on the "Statuss" field.
func StatussNotIn(vs ...string) predicate.Exam {
	return predicate.Exam(sql.FieldNotIn(FieldStatuss, vs...))
}

// StatussGT applies the GT predicate on the "Statuss" field.
func StatussGT(v string) predicate.Exam {
	return predicate.Exam(sql.FieldGT(FieldStatuss, v))
}

// StatussGTE applies the GTE predicate on the "Statuss" field.
func StatussGTE(v string) predicate.Exam {
	return predicate.Exam(sql.FieldGTE(FieldStatuss, v))
}

// StatussLT applies the LT predicate on the "Statuss" field.
func StatussLT(v string) predicate.Exam {
	return predicate.Exam(sql.FieldLT(FieldStatuss, v))
}

// StatussLTE applies the LTE predicate on the "Statuss" field.
func StatussLTE(v string) predicate.Exam {
	return predicate.Exam(sql.FieldLTE(FieldStatuss, v))
}

// StatussContains applies the Contains predicate on the "Statuss" field.
func StatussContains(v string) predicate.Exam {
	return predicate.Exam(sql.FieldContains(FieldStatuss, v))
}

// StatussHasPrefix applies the HasPrefix predicate on the "Statuss" field.
func StatussHasPrefix(v string) predicate.Exam {
	return predicate.Exam(sql.FieldHasPrefix(FieldStatuss, v))
}

// StatussHasSuffix applies the HasSuffix predicate on the "Statuss" field.
func StatussHasSuffix(v string) predicate.Exam {
	return predicate.Exam(sql.FieldHasSuffix(FieldStatuss, v))
}

// StatussIsNil applies the IsNil predicate on the "Statuss" field.
func StatussIsNil() predicate.Exam {
	return predicate.Exam(sql.FieldIsNull(FieldStatuss))
}

// StatussNotNil applies the NotNil predicate on the "Statuss" field.
func StatussNotNil() predicate.Exam {
	return predicate.Exam(sql.FieldNotNull(FieldStatuss))
}

// StatussEqualFold applies the EqualFold predicate on the "Statuss" field.
func StatussEqualFold(v string) predicate.Exam {
	return predicate.Exam(sql.FieldEqualFold(FieldStatuss, v))
}

// StatussContainsFold applies the ContainsFold predicate on the "Statuss" field.
func StatussContainsFold(v string) predicate.Exam {
	return predicate.Exam(sql.FieldContainsFold(FieldStatuss, v))
}

// DeletedbyidEQ applies the EQ predicate on the "deletedbyid" field.
func DeletedbyidEQ(v int64) predicate.Exam {
	return predicate.Exam(sql.FieldEQ(FieldDeletedbyid, v))
}

// DeletedbyidNEQ applies the NEQ predicate on the "deletedbyid" field.
func DeletedbyidNEQ(v int64) predicate.Exam {
	return predicate.Exam(sql.FieldNEQ(FieldDeletedbyid, v))
}

// DeletedbyidIn applies the In predicate on the "deletedbyid" field.
func DeletedbyidIn(vs ...int64) predicate.Exam {
	return predicate.Exam(sql.FieldIn(FieldDeletedbyid, vs...))
}

// DeletedbyidNotIn applies the NotIn predicate on the "deletedbyid" field.
func DeletedbyidNotIn(vs ...int64) predicate.Exam {
	return predicate.Exam(sql.FieldNotIn(FieldDeletedbyid, vs...))
}

// DeletedbyidGT applies the GT predicate on the "deletedbyid" field.
func DeletedbyidGT(v int64) predicate.Exam {
	return predicate.Exam(sql.FieldGT(FieldDeletedbyid, v))
}

// DeletedbyidGTE applies the GTE predicate on the "deletedbyid" field.
func DeletedbyidGTE(v int64) predicate.Exam {
	return predicate.Exam(sql.FieldGTE(FieldDeletedbyid, v))
}

// DeletedbyidLT applies the LT predicate on the "deletedbyid" field.
func DeletedbyidLT(v int64) predicate.Exam {
	return predicate.Exam(sql.FieldLT(FieldDeletedbyid, v))
}

// DeletedbyidLTE applies the LTE predicate on the "deletedbyid" field.
func DeletedbyidLTE(v int64) predicate.Exam {
	return predicate.Exam(sql.FieldLTE(FieldDeletedbyid, v))
}

// DeletedbyidIsNil applies the IsNil predicate on the "deletedbyid" field.
func DeletedbyidIsNil() predicate.Exam {
	return predicate.Exam(sql.FieldIsNull(FieldDeletedbyid))
}

// DeletedbyidNotNil applies the NotNil predicate on the "deletedbyid" field.
func DeletedbyidNotNil() predicate.Exam {
	return predicate.Exam(sql.FieldNotNull(FieldDeletedbyid))
}

// DeletedbyusernameEQ applies the EQ predicate on the "deletedbyusername" field.
func DeletedbyusernameEQ(v string) predicate.Exam {
	return predicate.Exam(sql.FieldEQ(FieldDeletedbyusername, v))
}

// DeletedbyusernameNEQ applies the NEQ predicate on the "deletedbyusername" field.
func DeletedbyusernameNEQ(v string) predicate.Exam {
	return predicate.Exam(sql.FieldNEQ(FieldDeletedbyusername, v))
}

// DeletedbyusernameIn applies the In predicate on the "deletedbyusername" field.
func DeletedbyusernameIn(vs ...string) predicate.Exam {
	return predicate.Exam(sql.FieldIn(FieldDeletedbyusername, vs...))
}

// DeletedbyusernameNotIn applies the NotIn predicate on the "deletedbyusername" field.
func DeletedbyusernameNotIn(vs ...string) predicate.Exam {
	return predicate.Exam(sql.FieldNotIn(FieldDeletedbyusername, vs...))
}

// DeletedbyusernameGT applies the GT predicate on the "deletedbyusername" field.
func DeletedbyusernameGT(v string) predicate.Exam {
	return predicate.Exam(sql.FieldGT(FieldDeletedbyusername, v))
}

// DeletedbyusernameGTE applies the GTE predicate on the "deletedbyusername" field.
func DeletedbyusernameGTE(v string) predicate.Exam {
	return predicate.Exam(sql.FieldGTE(FieldDeletedbyusername, v))
}

// DeletedbyusernameLT applies the LT predicate on the "deletedbyusername" field.
func DeletedbyusernameLT(v string) predicate.Exam {
	return predicate.Exam(sql.FieldLT(FieldDeletedbyusername, v))
}

// DeletedbyusernameLTE applies the LTE predicate on the "deletedbyusername" field.
func DeletedbyusernameLTE(v string) predicate.Exam {
	return predicate.Exam(sql.FieldLTE(FieldDeletedbyusername, v))
}

// DeletedbyusernameContains applies the Contains predicate on the "deletedbyusername" field.
func DeletedbyusernameContains(v string) predicate.Exam {
	return predicate.Exam(sql.FieldContains(FieldDeletedbyusername, v))
}

// DeletedbyusernameHasPrefix applies the HasPrefix predicate on the "deletedbyusername" field.
func DeletedbyusernameHasPrefix(v string) predicate.Exam {
	return predicate.Exam(sql.FieldHasPrefix(FieldDeletedbyusername, v))
}

// DeletedbyusernameHasSuffix applies the HasSuffix predicate on the "deletedbyusername" field.
func DeletedbyusernameHasSuffix(v string) predicate.Exam {
	return predicate.Exam(sql.FieldHasSuffix(FieldDeletedbyusername, v))
}

// DeletedbyusernameIsNil applies the IsNil predicate on the "deletedbyusername" field.
func DeletedbyusernameIsNil() predicate.Exam {
	return predicate.Exam(sql.FieldIsNull(FieldDeletedbyusername))
}

// DeletedbyusernameNotNil applies the NotNil predicate on the "deletedbyusername" field.
func DeletedbyusernameNotNil() predicate.Exam {
	return predicate.Exam(sql.FieldNotNull(FieldDeletedbyusername))
}

// DeletedbyusernameEqualFold applies the EqualFold predicate on the "deletedbyusername" field.
func DeletedbyusernameEqualFold(v string) predicate.Exam {
	return predicate.Exam(sql.FieldEqualFold(FieldDeletedbyusername, v))
}

// DeletedbyusernameContainsFold applies the ContainsFold predicate on the "deletedbyusername" field.
func DeletedbyusernameContainsFold(v string) predicate.Exam {
	return predicate.Exam(sql.FieldContainsFold(FieldDeletedbyusername, v))
}

// DeletedbyEmployeeidEQ applies the EQ predicate on the "deletedbyEmployeeid" field.
func DeletedbyEmployeeidEQ(v int64) predicate.Exam {
	return predicate.Exam(sql.FieldEQ(FieldDeletedbyEmployeeid, v))
}

// DeletedbyEmployeeidNEQ applies the NEQ predicate on the "deletedbyEmployeeid" field.
func DeletedbyEmployeeidNEQ(v int64) predicate.Exam {
	return predicate.Exam(sql.FieldNEQ(FieldDeletedbyEmployeeid, v))
}

// DeletedbyEmployeeidIn applies the In predicate on the "deletedbyEmployeeid" field.
func DeletedbyEmployeeidIn(vs ...int64) predicate.Exam {
	return predicate.Exam(sql.FieldIn(FieldDeletedbyEmployeeid, vs...))
}

// DeletedbyEmployeeidNotIn applies the NotIn predicate on the "deletedbyEmployeeid" field.
func DeletedbyEmployeeidNotIn(vs ...int64) predicate.Exam {
	return predicate.Exam(sql.FieldNotIn(FieldDeletedbyEmployeeid, vs...))
}

// DeletedbyEmployeeidGT applies the GT predicate on the "deletedbyEmployeeid" field.
func DeletedbyEmployeeidGT(v int64) predicate.Exam {
	return predicate.Exam(sql.FieldGT(FieldDeletedbyEmployeeid, v))
}

// DeletedbyEmployeeidGTE applies the GTE predicate on the "deletedbyEmployeeid" field.
func DeletedbyEmployeeidGTE(v int64) predicate.Exam {
	return predicate.Exam(sql.FieldGTE(FieldDeletedbyEmployeeid, v))
}

// DeletedbyEmployeeidLT applies the LT predicate on the "deletedbyEmployeeid" field.
func DeletedbyEmployeeidLT(v int64) predicate.Exam {
	return predicate.Exam(sql.FieldLT(FieldDeletedbyEmployeeid, v))
}

// DeletedbyEmployeeidLTE applies the LTE predicate on the "deletedbyEmployeeid" field.
func DeletedbyEmployeeidLTE(v int64) predicate.Exam {
	return predicate.Exam(sql.FieldLTE(FieldDeletedbyEmployeeid, v))
}

// DeletedbyEmployeeidIsNil applies the IsNil predicate on the "deletedbyEmployeeid" field.
func DeletedbyEmployeeidIsNil() predicate.Exam {
	return predicate.Exam(sql.FieldIsNull(FieldDeletedbyEmployeeid))
}

// DeletedbyEmployeeidNotNil applies the NotNil predicate on the "deletedbyEmployeeid" field.
func DeletedbyEmployeeidNotNil() predicate.Exam {
	return predicate.Exam(sql.FieldNotNull(FieldDeletedbyEmployeeid))
}

// DeletedbyDesignationEQ applies the EQ predicate on the "deletedbyDesignation" field.
func DeletedbyDesignationEQ(v string) predicate.Exam {
	return predicate.Exam(sql.FieldEQ(FieldDeletedbyDesignation, v))
}

// DeletedbyDesignationNEQ applies the NEQ predicate on the "deletedbyDesignation" field.
func DeletedbyDesignationNEQ(v string) predicate.Exam {
	return predicate.Exam(sql.FieldNEQ(FieldDeletedbyDesignation, v))
}

// DeletedbyDesignationIn applies the In predicate on the "deletedbyDesignation" field.
func DeletedbyDesignationIn(vs ...string) predicate.Exam {
	return predicate.Exam(sql.FieldIn(FieldDeletedbyDesignation, vs...))
}

// DeletedbyDesignationNotIn applies the NotIn predicate on the "deletedbyDesignation" field.
func DeletedbyDesignationNotIn(vs ...string) predicate.Exam {
	return predicate.Exam(sql.FieldNotIn(FieldDeletedbyDesignation, vs...))
}

// DeletedbyDesignationGT applies the GT predicate on the "deletedbyDesignation" field.
func DeletedbyDesignationGT(v string) predicate.Exam {
	return predicate.Exam(sql.FieldGT(FieldDeletedbyDesignation, v))
}

// DeletedbyDesignationGTE applies the GTE predicate on the "deletedbyDesignation" field.
func DeletedbyDesignationGTE(v string) predicate.Exam {
	return predicate.Exam(sql.FieldGTE(FieldDeletedbyDesignation, v))
}

// DeletedbyDesignationLT applies the LT predicate on the "deletedbyDesignation" field.
func DeletedbyDesignationLT(v string) predicate.Exam {
	return predicate.Exam(sql.FieldLT(FieldDeletedbyDesignation, v))
}

// DeletedbyDesignationLTE applies the LTE predicate on the "deletedbyDesignation" field.
func DeletedbyDesignationLTE(v string) predicate.Exam {
	return predicate.Exam(sql.FieldLTE(FieldDeletedbyDesignation, v))
}

// DeletedbyDesignationContains applies the Contains predicate on the "deletedbyDesignation" field.
func DeletedbyDesignationContains(v string) predicate.Exam {
	return predicate.Exam(sql.FieldContains(FieldDeletedbyDesignation, v))
}

// DeletedbyDesignationHasPrefix applies the HasPrefix predicate on the "deletedbyDesignation" field.
func DeletedbyDesignationHasPrefix(v string) predicate.Exam {
	return predicate.Exam(sql.FieldHasPrefix(FieldDeletedbyDesignation, v))
}

// DeletedbyDesignationHasSuffix applies the HasSuffix predicate on the "deletedbyDesignation" field.
func DeletedbyDesignationHasSuffix(v string) predicate.Exam {
	return predicate.Exam(sql.FieldHasSuffix(FieldDeletedbyDesignation, v))
}

// DeletedbyDesignationIsNil applies the IsNil predicate on the "deletedbyDesignation" field.
func DeletedbyDesignationIsNil() predicate.Exam {
	return predicate.Exam(sql.FieldIsNull(FieldDeletedbyDesignation))
}

// DeletedbyDesignationNotNil applies the NotNil predicate on the "deletedbyDesignation" field.
func DeletedbyDesignationNotNil() predicate.Exam {
	return predicate.Exam(sql.FieldNotNull(FieldDeletedbyDesignation))
}

// DeletedbyDesignationEqualFold applies the EqualFold predicate on the "deletedbyDesignation" field.
func DeletedbyDesignationEqualFold(v string) predicate.Exam {
	return predicate.Exam(sql.FieldEqualFold(FieldDeletedbyDesignation, v))
}

// DeletedbyDesignationContainsFold applies the ContainsFold predicate on the "deletedbyDesignation" field.
func DeletedbyDesignationContainsFold(v string) predicate.Exam {
	return predicate.Exam(sql.FieldContainsFold(FieldDeletedbyDesignation, v))
}

// DeletedDateEQ applies the EQ predicate on the "deletedDate" field.
func DeletedDateEQ(v time.Time) predicate.Exam {
	return predicate.Exam(sql.FieldEQ(FieldDeletedDate, v))
}

// DeletedDateNEQ applies the NEQ predicate on the "deletedDate" field.
func DeletedDateNEQ(v time.Time) predicate.Exam {
	return predicate.Exam(sql.FieldNEQ(FieldDeletedDate, v))
}

// DeletedDateIn applies the In predicate on the "deletedDate" field.
func DeletedDateIn(vs ...time.Time) predicate.Exam {
	return predicate.Exam(sql.FieldIn(FieldDeletedDate, vs...))
}

// DeletedDateNotIn applies the NotIn predicate on the "deletedDate" field.
func DeletedDateNotIn(vs ...time.Time) predicate.Exam {
	return predicate.Exam(sql.FieldNotIn(FieldDeletedDate, vs...))
}

// DeletedDateGT applies the GT predicate on the "deletedDate" field.
func DeletedDateGT(v time.Time) predicate.Exam {
	return predicate.Exam(sql.FieldGT(FieldDeletedDate, v))
}

// DeletedDateGTE applies the GTE predicate on the "deletedDate" field.
func DeletedDateGTE(v time.Time) predicate.Exam {
	return predicate.Exam(sql.FieldGTE(FieldDeletedDate, v))
}

// DeletedDateLT applies the LT predicate on the "deletedDate" field.
func DeletedDateLT(v time.Time) predicate.Exam {
	return predicate.Exam(sql.FieldLT(FieldDeletedDate, v))
}

// DeletedDateLTE applies the LTE predicate on the "deletedDate" field.
func DeletedDateLTE(v time.Time) predicate.Exam {
	return predicate.Exam(sql.FieldLTE(FieldDeletedDate, v))
}

// DeletedDateIsNil applies the IsNil predicate on the "deletedDate" field.
func DeletedDateIsNil() predicate.Exam {
	return predicate.Exam(sql.FieldIsNull(FieldDeletedDate))
}

// DeletedDateNotNil applies the NotNil predicate on the "deletedDate" field.
func DeletedDateNotNil() predicate.Exam {
	return predicate.Exam(sql.FieldNotNull(FieldDeletedDate))
}

// NumOfPapersEQ applies the EQ predicate on the "NumOfPapers" field.
func NumOfPapersEQ(v int32) predicate.Exam {
	return predicate.Exam(sql.FieldEQ(FieldNumOfPapers, v))
}

// NumOfPapersNEQ applies the NEQ predicate on the "NumOfPapers" field.
func NumOfPapersNEQ(v int32) predicate.Exam {
	return predicate.Exam(sql.FieldNEQ(FieldNumOfPapers, v))
}

// NumOfPapersIn applies the In predicate on the "NumOfPapers" field.
func NumOfPapersIn(vs ...int32) predicate.Exam {
	return predicate.Exam(sql.FieldIn(FieldNumOfPapers, vs...))
}

// NumOfPapersNotIn applies the NotIn predicate on the "NumOfPapers" field.
func NumOfPapersNotIn(vs ...int32) predicate.Exam {
	return predicate.Exam(sql.FieldNotIn(FieldNumOfPapers, vs...))
}

// NumOfPapersGT applies the GT predicate on the "NumOfPapers" field.
func NumOfPapersGT(v int32) predicate.Exam {
	return predicate.Exam(sql.FieldGT(FieldNumOfPapers, v))
}

// NumOfPapersGTE applies the GTE predicate on the "NumOfPapers" field.
func NumOfPapersGTE(v int32) predicate.Exam {
	return predicate.Exam(sql.FieldGTE(FieldNumOfPapers, v))
}

// NumOfPapersLT applies the LT predicate on the "NumOfPapers" field.
func NumOfPapersLT(v int32) predicate.Exam {
	return predicate.Exam(sql.FieldLT(FieldNumOfPapers, v))
}

// NumOfPapersLTE applies the LTE predicate on the "NumOfPapers" field.
func NumOfPapersLTE(v int32) predicate.Exam {
	return predicate.Exam(sql.FieldLTE(FieldNumOfPapers, v))
}

// CalendarCodeEQ applies the EQ predicate on the "CalendarCode" field.
func CalendarCodeEQ(v int32) predicate.Exam {
	return predicate.Exam(sql.FieldEQ(FieldCalendarCode, v))
}

// CalendarCodeNEQ applies the NEQ predicate on the "CalendarCode" field.
func CalendarCodeNEQ(v int32) predicate.Exam {
	return predicate.Exam(sql.FieldNEQ(FieldCalendarCode, v))
}

// CalendarCodeIn applies the In predicate on the "CalendarCode" field.
func CalendarCodeIn(vs ...int32) predicate.Exam {
	return predicate.Exam(sql.FieldIn(FieldCalendarCode, vs...))
}

// CalendarCodeNotIn applies the NotIn predicate on the "CalendarCode" field.
func CalendarCodeNotIn(vs ...int32) predicate.Exam {
	return predicate.Exam(sql.FieldNotIn(FieldCalendarCode, vs...))
}

// CalendarCodeGT applies the GT predicate on the "CalendarCode" field.
func CalendarCodeGT(v int32) predicate.Exam {
	return predicate.Exam(sql.FieldGT(FieldCalendarCode, v))
}

// CalendarCodeGTE applies the GTE predicate on the "CalendarCode" field.
func CalendarCodeGTE(v int32) predicate.Exam {
	return predicate.Exam(sql.FieldGTE(FieldCalendarCode, v))
}

// CalendarCodeLT applies the LT predicate on the "CalendarCode" field.
func CalendarCodeLT(v int32) predicate.Exam {
	return predicate.Exam(sql.FieldLT(FieldCalendarCode, v))
}

// CalendarCodeLTE applies the LTE predicate on the "CalendarCode" field.
func CalendarCodeLTE(v int32) predicate.Exam {
	return predicate.Exam(sql.FieldLTE(FieldCalendarCode, v))
}

// CalendarCodeIsNil applies the IsNil predicate on the "CalendarCode" field.
func CalendarCodeIsNil() predicate.Exam {
	return predicate.Exam(sql.FieldIsNull(FieldCalendarCode))
}

// CalendarCodeNotNil applies the NotNil predicate on the "CalendarCode" field.
func CalendarCodeNotNil() predicate.Exam {
	return predicate.Exam(sql.FieldNotNull(FieldCalendarCode))
}

// PaperCodeEQ applies the EQ predicate on the "PaperCode" field.
func PaperCodeEQ(v int32) predicate.Exam {
	return predicate.Exam(sql.FieldEQ(FieldPaperCode, v))
}

// PaperCodeNEQ applies the NEQ predicate on the "PaperCode" field.
func PaperCodeNEQ(v int32) predicate.Exam {
	return predicate.Exam(sql.FieldNEQ(FieldPaperCode, v))
}

// PaperCodeIn applies the In predicate on the "PaperCode" field.
func PaperCodeIn(vs ...int32) predicate.Exam {
	return predicate.Exam(sql.FieldIn(FieldPaperCode, vs...))
}

// PaperCodeNotIn applies the NotIn predicate on the "PaperCode" field.
func PaperCodeNotIn(vs ...int32) predicate.Exam {
	return predicate.Exam(sql.FieldNotIn(FieldPaperCode, vs...))
}

// PaperCodeGT applies the GT predicate on the "PaperCode" field.
func PaperCodeGT(v int32) predicate.Exam {
	return predicate.Exam(sql.FieldGT(FieldPaperCode, v))
}

// PaperCodeGTE applies the GTE predicate on the "PaperCode" field.
func PaperCodeGTE(v int32) predicate.Exam {
	return predicate.Exam(sql.FieldGTE(FieldPaperCode, v))
}

// PaperCodeLT applies the LT predicate on the "PaperCode" field.
func PaperCodeLT(v int32) predicate.Exam {
	return predicate.Exam(sql.FieldLT(FieldPaperCode, v))
}

// PaperCodeLTE applies the LTE predicate on the "PaperCode" field.
func PaperCodeLTE(v int32) predicate.Exam {
	return predicate.Exam(sql.FieldLTE(FieldPaperCode, v))
}

// PaperCodeIsNil applies the IsNil predicate on the "PaperCode" field.
func PaperCodeIsNil() predicate.Exam {
	return predicate.Exam(sql.FieldIsNull(FieldPaperCode))
}

// PaperCodeNotNil applies the NotNil predicate on the "PaperCode" field.
func PaperCodeNotNil() predicate.Exam {
	return predicate.Exam(sql.FieldNotNull(FieldPaperCode))
}

// StatusEQ applies the EQ predicate on the "Status" field.
func StatusEQ(v string) predicate.Exam {
	return predicate.Exam(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "Status" field.
func StatusNEQ(v string) predicate.Exam {
	return predicate.Exam(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "Status" field.
func StatusIn(vs ...string) predicate.Exam {
	return predicate.Exam(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "Status" field.
func StatusNotIn(vs ...string) predicate.Exam {
	return predicate.Exam(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "Status" field.
func StatusGT(v string) predicate.Exam {
	return predicate.Exam(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "Status" field.
func StatusGTE(v string) predicate.Exam {
	return predicate.Exam(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "Status" field.
func StatusLT(v string) predicate.Exam {
	return predicate.Exam(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "Status" field.
func StatusLTE(v string) predicate.Exam {
	return predicate.Exam(sql.FieldLTE(FieldStatus, v))
}

// StatusContains applies the Contains predicate on the "Status" field.
func StatusContains(v string) predicate.Exam {
	return predicate.Exam(sql.FieldContains(FieldStatus, v))
}

// StatusHasPrefix applies the HasPrefix predicate on the "Status" field.
func StatusHasPrefix(v string) predicate.Exam {
	return predicate.Exam(sql.FieldHasPrefix(FieldStatus, v))
}

// StatusHasSuffix applies the HasSuffix predicate on the "Status" field.
func StatusHasSuffix(v string) predicate.Exam {
	return predicate.Exam(sql.FieldHasSuffix(FieldStatus, v))
}

// StatusEqualFold applies the EqualFold predicate on the "Status" field.
func StatusEqualFold(v string) predicate.Exam {
	return predicate.Exam(sql.FieldEqualFold(FieldStatus, v))
}

// StatusContainsFold applies the ContainsFold predicate on the "Status" field.
func StatusContainsFold(v string) predicate.Exam {
	return predicate.Exam(sql.FieldContainsFold(FieldStatus, v))
}

// ExamTypeCodeEQ applies the EQ predicate on the "ExamTypeCode" field.
func ExamTypeCodeEQ(v int32) predicate.Exam {
	return predicate.Exam(sql.FieldEQ(FieldExamTypeCode, v))
}

// ExamTypeCodeNEQ applies the NEQ predicate on the "ExamTypeCode" field.
func ExamTypeCodeNEQ(v int32) predicate.Exam {
	return predicate.Exam(sql.FieldNEQ(FieldExamTypeCode, v))
}

// ExamTypeCodeIn applies the In predicate on the "ExamTypeCode" field.
func ExamTypeCodeIn(vs ...int32) predicate.Exam {
	return predicate.Exam(sql.FieldIn(FieldExamTypeCode, vs...))
}

// ExamTypeCodeNotIn applies the NotIn predicate on the "ExamTypeCode" field.
func ExamTypeCodeNotIn(vs ...int32) predicate.Exam {
	return predicate.Exam(sql.FieldNotIn(FieldExamTypeCode, vs...))
}

// ExamTypeCodeGT applies the GT predicate on the "ExamTypeCode" field.
func ExamTypeCodeGT(v int32) predicate.Exam {
	return predicate.Exam(sql.FieldGT(FieldExamTypeCode, v))
}

// ExamTypeCodeGTE applies the GTE predicate on the "ExamTypeCode" field.
func ExamTypeCodeGTE(v int32) predicate.Exam {
	return predicate.Exam(sql.FieldGTE(FieldExamTypeCode, v))
}

// ExamTypeCodeLT applies the LT predicate on the "ExamTypeCode" field.
func ExamTypeCodeLT(v int32) predicate.Exam {
	return predicate.Exam(sql.FieldLT(FieldExamTypeCode, v))
}

// ExamTypeCodeLTE applies the LTE predicate on the "ExamTypeCode" field.
func ExamTypeCodeLTE(v int32) predicate.Exam {
	return predicate.Exam(sql.FieldLTE(FieldExamTypeCode, v))
}

// ExamTypeCodeIsNil applies the IsNil predicate on the "ExamTypeCode" field.
func ExamTypeCodeIsNil() predicate.Exam {
	return predicate.Exam(sql.FieldIsNull(FieldExamTypeCode))
}

// ExamTypeCodeNotNil applies the NotNil predicate on the "ExamTypeCode" field.
func ExamTypeCodeNotNil() predicate.Exam {
	return predicate.Exam(sql.FieldNotNull(FieldExamTypeCode))
}

// CreatedByEmployeeIdEQ applies the EQ predicate on the "CreatedByEmployeeId" field.
func CreatedByEmployeeIdEQ(v string) predicate.Exam {
	return predicate.Exam(sql.FieldEQ(FieldCreatedByEmployeeId, v))
}

// CreatedByEmployeeIdNEQ applies the NEQ predicate on the "CreatedByEmployeeId" field.
func CreatedByEmployeeIdNEQ(v string) predicate.Exam {
	return predicate.Exam(sql.FieldNEQ(FieldCreatedByEmployeeId, v))
}

// CreatedByEmployeeIdIn applies the In predicate on the "CreatedByEmployeeId" field.
func CreatedByEmployeeIdIn(vs ...string) predicate.Exam {
	return predicate.Exam(sql.FieldIn(FieldCreatedByEmployeeId, vs...))
}

// CreatedByEmployeeIdNotIn applies the NotIn predicate on the "CreatedByEmployeeId" field.
func CreatedByEmployeeIdNotIn(vs ...string) predicate.Exam {
	return predicate.Exam(sql.FieldNotIn(FieldCreatedByEmployeeId, vs...))
}

// CreatedByEmployeeIdGT applies the GT predicate on the "CreatedByEmployeeId" field.
func CreatedByEmployeeIdGT(v string) predicate.Exam {
	return predicate.Exam(sql.FieldGT(FieldCreatedByEmployeeId, v))
}

// CreatedByEmployeeIdGTE applies the GTE predicate on the "CreatedByEmployeeId" field.
func CreatedByEmployeeIdGTE(v string) predicate.Exam {
	return predicate.Exam(sql.FieldGTE(FieldCreatedByEmployeeId, v))
}

// CreatedByEmployeeIdLT applies the LT predicate on the "CreatedByEmployeeId" field.
func CreatedByEmployeeIdLT(v string) predicate.Exam {
	return predicate.Exam(sql.FieldLT(FieldCreatedByEmployeeId, v))
}

// CreatedByEmployeeIdLTE applies the LTE predicate on the "CreatedByEmployeeId" field.
func CreatedByEmployeeIdLTE(v string) predicate.Exam {
	return predicate.Exam(sql.FieldLTE(FieldCreatedByEmployeeId, v))
}

// CreatedByEmployeeIdContains applies the Contains predicate on the "CreatedByEmployeeId" field.
func CreatedByEmployeeIdContains(v string) predicate.Exam {
	return predicate.Exam(sql.FieldContains(FieldCreatedByEmployeeId, v))
}

// CreatedByEmployeeIdHasPrefix applies the HasPrefix predicate on the "CreatedByEmployeeId" field.
func CreatedByEmployeeIdHasPrefix(v string) predicate.Exam {
	return predicate.Exam(sql.FieldHasPrefix(FieldCreatedByEmployeeId, v))
}

// CreatedByEmployeeIdHasSuffix applies the HasSuffix predicate on the "CreatedByEmployeeId" field.
func CreatedByEmployeeIdHasSuffix(v string) predicate.Exam {
	return predicate.Exam(sql.FieldHasSuffix(FieldCreatedByEmployeeId, v))
}

// CreatedByEmployeeIdIsNil applies the IsNil predicate on the "CreatedByEmployeeId" field.
func CreatedByEmployeeIdIsNil() predicate.Exam {
	return predicate.Exam(sql.FieldIsNull(FieldCreatedByEmployeeId))
}

// CreatedByEmployeeIdNotNil applies the NotNil predicate on the "CreatedByEmployeeId" field.
func CreatedByEmployeeIdNotNil() predicate.Exam {
	return predicate.Exam(sql.FieldNotNull(FieldCreatedByEmployeeId))
}

// CreatedByEmployeeIdEqualFold applies the EqualFold predicate on the "CreatedByEmployeeId" field.
func CreatedByEmployeeIdEqualFold(v string) predicate.Exam {
	return predicate.Exam(sql.FieldEqualFold(FieldCreatedByEmployeeId, v))
}

// CreatedByEmployeeIdContainsFold applies the ContainsFold predicate on the "CreatedByEmployeeId" field.
func CreatedByEmployeeIdContainsFold(v string) predicate.Exam {
	return predicate.Exam(sql.FieldContainsFold(FieldCreatedByEmployeeId, v))
}

// HasNotifications applies the HasEdge predicate on the "notifications" edge.
func HasNotifications() predicate.Exam {
	return predicate.Exam(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, NotificationsTable, NotificationsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasNotificationsWith applies the HasEdge predicate on the "notifications" edge with a given conditions (other predicates).
func HasNotificationsWith(preds ...predicate.Notification) predicate.Exam {
	return predicate.Exam(func(s *sql.Selector) {
		step := newNotificationsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasExamsRef applies the HasEdge predicate on the "exams_ref" edge.
func HasExamsRef() predicate.Exam {
	return predicate.Exam(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ExamsRefTable, ExamsRefColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasExamsRefWith applies the HasEdge predicate on the "exams_ref" edge with a given conditions (other predicates).
func HasExamsRefWith(preds ...predicate.ExamCalendar) predicate.Exam {
	return predicate.Exam(func(s *sql.Selector) {
		step := newExamsRefStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPapers applies the HasEdge predicate on the "papers" edge.
func HasPapers() predicate.Exam {
	return predicate.Exam(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, PapersTable, PapersColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPapersWith applies the HasEdge predicate on the "papers" edge with a given conditions (other predicates).
func HasPapersWith(preds ...predicate.ExamPapers) predicate.Exam {
	return predicate.Exam(func(s *sql.Selector) {
		step := newPapersStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasExamEligibility applies the HasEdge predicate on the "ExamEligibility" edge.
func HasExamEligibility() predicate.Exam {
	return predicate.Exam(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ExamEligibilityTable, ExamEligibilityColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasExamEligibilityWith applies the HasEdge predicate on the "ExamEligibility" edge with a given conditions (other predicates).
func HasExamEligibilityWith(preds ...predicate.EligibilityMaster) predicate.Exam {
	return predicate.Exam(func(s *sql.Selector) {
		step := newExamEligibilityStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasExamsType applies the HasEdge predicate on the "exams_type" edge.
func HasExamsType() predicate.Exam {
	return predicate.Exam(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ExamsTypeTable, ExamsTypeColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasExamsTypeWith applies the HasEdge predicate on the "exams_type" edge with a given conditions (other predicates).
func HasExamsTypeWith(preds ...predicate.ExamType) predicate.Exam {
	return predicate.Exam(func(s *sql.Selector) {
		step := newExamsTypeStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasExamcentresip applies the HasEdge predicate on the "examcentresip" edge.
func HasExamcentresip() predicate.Exam {
	return predicate.Exam(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ExamcentresipTable, ExamcentresipColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasExamcentresipWith applies the HasEdge predicate on the "examcentresip" edge with a given conditions (other predicates).
func HasExamcentresipWith(preds ...predicate.Center) predicate.Exam {
	return predicate.Exam(func(s *sql.Selector) {
		step := newExamcentresipStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasExamMasterRef applies the HasEdge predicate on the "ExamMasterRef" edge.
func HasExamMasterRef() predicate.Exam {
	return predicate.Exam(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ExamMasterRefTable, ExamMasterRefColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasExamMasterRefWith applies the HasEdge predicate on the "ExamMasterRef" edge with a given conditions (other predicates).
func HasExamMasterRefWith(preds ...predicate.Exam_Applications_IP) predicate.Exam {
	return predicate.Exam(func(s *sql.Selector) {
		step := newExamMasterRefStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasExamMasterRefPS applies the HasEdge predicate on the "ExamMasterRefPS" edge.
func HasExamMasterRefPS() predicate.Exam {
	return predicate.Exam(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ExamMasterRefPSTable, ExamMasterRefPSColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasExamMasterRefPSWith applies the HasEdge predicate on the "ExamMasterRefPS" edge with a given conditions (other predicates).
func HasExamMasterRefPSWith(preds ...predicate.Exam_Applications_PS) predicate.Exam {
	return predicate.Exam(func(s *sql.Selector) {
		step := newExamMasterRefPSStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasExamNotificationsRef applies the HasEdge predicate on the "Exam_Notifications_Ref" edge.
func HasExamNotificationsRef() predicate.Exam {
	return predicate.Exam(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ExamNotificationsRefTable, ExamNotificationsRefColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasExamNotificationsRefWith applies the HasEdge predicate on the "Exam_Notifications_Ref" edge with a given conditions (other predicates).
func HasExamNotificationsRefWith(preds ...predicate.ExamNotifications) predicate.Exam {
	return predicate.Exam(func(s *sql.Selector) {
		step := newExamNotificationsRefStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasExamMasterRefGDSPA applies the HasEdge predicate on the "ExamMasterRefGDSPA" edge.
func HasExamMasterRefGDSPA() predicate.Exam {
	return predicate.Exam(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ExamMasterRefGDSPATable, ExamMasterRefGDSPAColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasExamMasterRefGDSPAWith applies the HasEdge predicate on the "ExamMasterRefGDSPA" edge with a given conditions (other predicates).
func HasExamMasterRefGDSPAWith(preds ...predicate.Exam_Applications_GDSPA) predicate.Exam {
	return predicate.Exam(func(s *sql.Selector) {
		step := newExamMasterRefGDSPAStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasExamMasterRefGDSPM applies the HasEdge predicate on the "ExamMasterRefGDSPM" edge.
func HasExamMasterRefGDSPM() predicate.Exam {
	return predicate.Exam(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ExamMasterRefGDSPMTable, ExamMasterRefGDSPMColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasExamMasterRefGDSPMWith applies the HasEdge predicate on the "ExamMasterRefGDSPM" edge with a given conditions (other predicates).
func HasExamMasterRefGDSPMWith(preds ...predicate.Exam_Applications_GDSPM) predicate.Exam {
	return predicate.Exam(func(s *sql.Selector) {
		step := newExamMasterRefGDSPMStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasExamMasterRefPMPA applies the HasEdge predicate on the "ExamMasterRefPMPA" edge.
func HasExamMasterRefPMPA() predicate.Exam {
	return predicate.Exam(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ExamMasterRefPMPATable, ExamMasterRefPMPAColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasExamMasterRefPMPAWith applies the HasEdge predicate on the "ExamMasterRefPMPA" edge with a given conditions (other predicates).
func HasExamMasterRefPMPAWith(preds ...predicate.Exam_Applications_PMPA) predicate.Exam {
	return predicate.Exam(func(s *sql.Selector) {
		step := newExamMasterRefPMPAStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasExamMasterRefMTSPMMG applies the HasEdge predicate on the "ExamMasterRefMTSPMMG" edge.
func HasExamMasterRefMTSPMMG() predicate.Exam {
	return predicate.Exam(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ExamMasterRefMTSPMMGTable, ExamMasterRefMTSPMMGColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasExamMasterRefMTSPMMGWith applies the HasEdge predicate on the "ExamMasterRefMTSPMMG" edge with a given conditions (other predicates).
func HasExamMasterRefMTSPMMGWith(preds ...predicate.Exam_Application_MTSPMMG) predicate.Exam {
	return predicate.Exam(func(s *sql.Selector) {
		step := newExamMasterRefMTSPMMGStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasLogData applies the HasEdge predicate on the "LogData" edge.
func HasLogData() predicate.Exam {
	return predicate.Exam(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, LogDataTable, LogDataColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasLogDataWith applies the HasEdge predicate on the "LogData" edge with a given conditions (other predicates).
func HasLogDataWith(preds ...predicate.Logs) predicate.Exam {
	return predicate.Exam(func(s *sql.Selector) {
		step := newLogDataStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Exam) predicate.Exam {
	return predicate.Exam(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Exam) predicate.Exam {
	return predicate.Exam(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Exam) predicate.Exam {
	return predicate.Exam(func(s *sql.Selector) {
		p(s.Not())
	})
}
