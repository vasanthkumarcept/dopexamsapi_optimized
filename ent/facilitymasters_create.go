// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"recruit/ent/facilitymasters"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// FacilityMastersCreate is the builder for creating a FacilityMasters entity.
type FacilityMastersCreate struct {
	config
	mutation *FacilityMastersMutation
	hooks    []Hook
}

// SetFacilityID sets the "FacilityID" field.
func (fmc *FacilityMastersCreate) SetFacilityID(s string) *FacilityMastersCreate {
	fmc.mutation.SetFacilityID(s)
	return fmc
}

// SetNillableFacilityID sets the "FacilityID" field if the given value is not nil.
func (fmc *FacilityMastersCreate) SetNillableFacilityID(s *string) *FacilityMastersCreate {
	if s != nil {
		fmc.SetFacilityID(*s)
	}
	return fmc
}

// SetUUID sets the "UUID" field.
func (fmc *FacilityMastersCreate) SetUUID(i int64) *FacilityMastersCreate {
	fmc.mutation.SetUUID(i)
	return fmc
}

// SetNillableUUID sets the "UUID" field if the given value is not nil.
func (fmc *FacilityMastersCreate) SetNillableUUID(i *int64) *FacilityMastersCreate {
	if i != nil {
		fmc.SetUUID(*i)
	}
	return fmc
}

// SetFacilityType sets the "FacilityType" field.
func (fmc *FacilityMastersCreate) SetFacilityType(s string) *FacilityMastersCreate {
	fmc.mutation.SetFacilityType(s)
	return fmc
}

// SetNillableFacilityType sets the "FacilityType" field if the given value is not nil.
func (fmc *FacilityMastersCreate) SetNillableFacilityType(s *string) *FacilityMastersCreate {
	if s != nil {
		fmc.SetFacilityType(*s)
	}
	return fmc
}

// SetFacilityIDDescription sets the "FacilityIDDescription" field.
func (fmc *FacilityMastersCreate) SetFacilityIDDescription(s string) *FacilityMastersCreate {
	fmc.mutation.SetFacilityIDDescription(s)
	return fmc
}

// SetNillableFacilityIDDescription sets the "FacilityIDDescription" field if the given value is not nil.
func (fmc *FacilityMastersCreate) SetNillableFacilityIDDescription(s *string) *FacilityMastersCreate {
	if s != nil {
		fmc.SetFacilityIDDescription(*s)
	}
	return fmc
}

// SetReportingOfficeFacilityID sets the "ReportingOfficeFacilityID" field.
func (fmc *FacilityMastersCreate) SetReportingOfficeFacilityID(s string) *FacilityMastersCreate {
	fmc.mutation.SetReportingOfficeFacilityID(s)
	return fmc
}

// SetNillableReportingOfficeFacilityID sets the "ReportingOfficeFacilityID" field if the given value is not nil.
func (fmc *FacilityMastersCreate) SetNillableReportingOfficeFacilityID(s *string) *FacilityMastersCreate {
	if s != nil {
		fmc.SetReportingOfficeFacilityID(*s)
	}
	return fmc
}

// SetReportingOfficeFacilityName sets the "ReportingOfficeFacilityName" field.
func (fmc *FacilityMastersCreate) SetReportingOfficeFacilityName(s string) *FacilityMastersCreate {
	fmc.mutation.SetReportingOfficeFacilityName(s)
	return fmc
}

// SetNillableReportingOfficeFacilityName sets the "ReportingOfficeFacilityName" field if the given value is not nil.
func (fmc *FacilityMastersCreate) SetNillableReportingOfficeFacilityName(s *string) *FacilityMastersCreate {
	if s != nil {
		fmc.SetReportingOfficeFacilityName(*s)
	}
	return fmc
}

// SetHOFacilityID sets the "HOFacilityID" field.
func (fmc *FacilityMastersCreate) SetHOFacilityID(s string) *FacilityMastersCreate {
	fmc.mutation.SetHOFacilityID(s)
	return fmc
}

// SetNillableHOFacilityID sets the "HOFacilityID" field if the given value is not nil.
func (fmc *FacilityMastersCreate) SetNillableHOFacilityID(s *string) *FacilityMastersCreate {
	if s != nil {
		fmc.SetHOFacilityID(*s)
	}
	return fmc
}

// SetHOFacilityName sets the "HOFacilityName" field.
func (fmc *FacilityMastersCreate) SetHOFacilityName(s string) *FacilityMastersCreate {
	fmc.mutation.SetHOFacilityName(s)
	return fmc
}

// SetNillableHOFacilityName sets the "HOFacilityName" field if the given value is not nil.
func (fmc *FacilityMastersCreate) SetNillableHOFacilityName(s *string) *FacilityMastersCreate {
	if s != nil {
		fmc.SetHOFacilityName(*s)
	}
	return fmc
}

// SetSubDivisionFacilityID sets the "SubDivisionFacilityID" field.
func (fmc *FacilityMastersCreate) SetSubDivisionFacilityID(s string) *FacilityMastersCreate {
	fmc.mutation.SetSubDivisionFacilityID(s)
	return fmc
}

// SetNillableSubDivisionFacilityID sets the "SubDivisionFacilityID" field if the given value is not nil.
func (fmc *FacilityMastersCreate) SetNillableSubDivisionFacilityID(s *string) *FacilityMastersCreate {
	if s != nil {
		fmc.SetSubDivisionFacilityID(*s)
	}
	return fmc
}

// SetSubDivisionFacilityName sets the "SubDivisionFacilityName" field.
func (fmc *FacilityMastersCreate) SetSubDivisionFacilityName(s string) *FacilityMastersCreate {
	fmc.mutation.SetSubDivisionFacilityName(s)
	return fmc
}

// SetNillableSubDivisionFacilityName sets the "SubDivisionFacilityName" field if the given value is not nil.
func (fmc *FacilityMastersCreate) SetNillableSubDivisionFacilityName(s *string) *FacilityMastersCreate {
	if s != nil {
		fmc.SetSubDivisionFacilityName(*s)
	}
	return fmc
}

// SetDivisionFacilityID sets the "DivisionFacilityID" field.
func (fmc *FacilityMastersCreate) SetDivisionFacilityID(s string) *FacilityMastersCreate {
	fmc.mutation.SetDivisionFacilityID(s)
	return fmc
}

// SetNillableDivisionFacilityID sets the "DivisionFacilityID" field if the given value is not nil.
func (fmc *FacilityMastersCreate) SetNillableDivisionFacilityID(s *string) *FacilityMastersCreate {
	if s != nil {
		fmc.SetDivisionFacilityID(*s)
	}
	return fmc
}

// SetDivisionFacilityName sets the "DivisionFacilityName" field.
func (fmc *FacilityMastersCreate) SetDivisionFacilityName(s string) *FacilityMastersCreate {
	fmc.mutation.SetDivisionFacilityName(s)
	return fmc
}

// SetNillableDivisionFacilityName sets the "DivisionFacilityName" field if the given value is not nil.
func (fmc *FacilityMastersCreate) SetNillableDivisionFacilityName(s *string) *FacilityMastersCreate {
	if s != nil {
		fmc.SetDivisionFacilityName(*s)
	}
	return fmc
}

// SetRegionFacilityID sets the "RegionFacilityID" field.
func (fmc *FacilityMastersCreate) SetRegionFacilityID(s string) *FacilityMastersCreate {
	fmc.mutation.SetRegionFacilityID(s)
	return fmc
}

// SetNillableRegionFacilityID sets the "RegionFacilityID" field if the given value is not nil.
func (fmc *FacilityMastersCreate) SetNillableRegionFacilityID(s *string) *FacilityMastersCreate {
	if s != nil {
		fmc.SetRegionFacilityID(*s)
	}
	return fmc
}

// SetRegionFacilityName sets the "RegionFacilityName" field.
func (fmc *FacilityMastersCreate) SetRegionFacilityName(s string) *FacilityMastersCreate {
	fmc.mutation.SetRegionFacilityName(s)
	return fmc
}

// SetNillableRegionFacilityName sets the "RegionFacilityName" field if the given value is not nil.
func (fmc *FacilityMastersCreate) SetNillableRegionFacilityName(s *string) *FacilityMastersCreate {
	if s != nil {
		fmc.SetRegionFacilityName(*s)
	}
	return fmc
}

// SetCircleFacilityID sets the "CircleFacilityID" field.
func (fmc *FacilityMastersCreate) SetCircleFacilityID(s string) *FacilityMastersCreate {
	fmc.mutation.SetCircleFacilityID(s)
	return fmc
}

// SetNillableCircleFacilityID sets the "CircleFacilityID" field if the given value is not nil.
func (fmc *FacilityMastersCreate) SetNillableCircleFacilityID(s *string) *FacilityMastersCreate {
	if s != nil {
		fmc.SetCircleFacilityID(*s)
	}
	return fmc
}

// SetCircleFacilityName sets the "CircleFacilityName" field.
func (fmc *FacilityMastersCreate) SetCircleFacilityName(s string) *FacilityMastersCreate {
	fmc.mutation.SetCircleFacilityName(s)
	return fmc
}

// SetNillableCircleFacilityName sets the "CircleFacilityName" field if the given value is not nil.
func (fmc *FacilityMastersCreate) SetNillableCircleFacilityName(s *string) *FacilityMastersCreate {
	if s != nil {
		fmc.SetCircleFacilityName(*s)
	}
	return fmc
}

// SetPincode sets the "Pincode" field.
func (fmc *FacilityMastersCreate) SetPincode(s string) *FacilityMastersCreate {
	fmc.mutation.SetPincode(s)
	return fmc
}

// SetNillablePincode sets the "Pincode" field if the given value is not nil.
func (fmc *FacilityMastersCreate) SetNillablePincode(s *string) *FacilityMastersCreate {
	if s != nil {
		fmc.SetPincode(*s)
	}
	return fmc
}

// SetControllingAuthorityFacilityID sets the "ControllingAuthorityFacilityID" field.
func (fmc *FacilityMastersCreate) SetControllingAuthorityFacilityID(s string) *FacilityMastersCreate {
	fmc.mutation.SetControllingAuthorityFacilityID(s)
	return fmc
}

// SetNillableControllingAuthorityFacilityID sets the "ControllingAuthorityFacilityID" field if the given value is not nil.
func (fmc *FacilityMastersCreate) SetNillableControllingAuthorityFacilityID(s *string) *FacilityMastersCreate {
	if s != nil {
		fmc.SetControllingAuthorityFacilityID(*s)
	}
	return fmc
}

// SetControllingAuthorityFacilityName sets the "ControllingAuthorityFacilityName" field.
func (fmc *FacilityMastersCreate) SetControllingAuthorityFacilityName(s string) *FacilityMastersCreate {
	fmc.mutation.SetControllingAuthorityFacilityName(s)
	return fmc
}

// SetNillableControllingAuthorityFacilityName sets the "ControllingAuthorityFacilityName" field if the given value is not nil.
func (fmc *FacilityMastersCreate) SetNillableControllingAuthorityFacilityName(s *string) *FacilityMastersCreate {
	if s != nil {
		fmc.SetControllingAuthorityFacilityName(*s)
	}
	return fmc
}

// SetNodalOfficerFacilityID sets the "NodalOfficerFacilityID" field.
func (fmc *FacilityMastersCreate) SetNodalOfficerFacilityID(s string) *FacilityMastersCreate {
	fmc.mutation.SetNodalOfficerFacilityID(s)
	return fmc
}

// SetNillableNodalOfficerFacilityID sets the "NodalOfficerFacilityID" field if the given value is not nil.
func (fmc *FacilityMastersCreate) SetNillableNodalOfficerFacilityID(s *string) *FacilityMastersCreate {
	if s != nil {
		fmc.SetNodalOfficerFacilityID(*s)
	}
	return fmc
}

// SetNodalOfficerFacilityName sets the "NodalOfficerFacilityName" field.
func (fmc *FacilityMastersCreate) SetNodalOfficerFacilityName(s string) *FacilityMastersCreate {
	fmc.mutation.SetNodalOfficerFacilityName(s)
	return fmc
}

// SetNillableNodalOfficerFacilityName sets the "NodalOfficerFacilityName" field if the given value is not nil.
func (fmc *FacilityMastersCreate) SetNillableNodalOfficerFacilityName(s *string) *FacilityMastersCreate {
	if s != nil {
		fmc.SetNodalOfficerFacilityName(*s)
	}
	return fmc
}

// SetCityName sets the "CityName" field.
func (fmc *FacilityMastersCreate) SetCityName(s string) *FacilityMastersCreate {
	fmc.mutation.SetCityName(s)
	return fmc
}

// SetNillableCityName sets the "CityName" field if the given value is not nil.
func (fmc *FacilityMastersCreate) SetNillableCityName(s *string) *FacilityMastersCreate {
	if s != nil {
		fmc.SetCityName(*s)
	}
	return fmc
}

// SetHallCircleCode sets the "HallCircleCode" field.
func (fmc *FacilityMastersCreate) SetHallCircleCode(s string) *FacilityMastersCreate {
	fmc.mutation.SetHallCircleCode(s)
	return fmc
}

// SetNillableHallCircleCode sets the "HallCircleCode" field if the given value is not nil.
func (fmc *FacilityMastersCreate) SetNillableHallCircleCode(s *string) *FacilityMastersCreate {
	if s != nil {
		fmc.SetHallCircleCode(*s)
	}
	return fmc
}

// SetDeliveryNonDeliveryOffice sets the "DeliveryNonDeliveryOffice" field.
func (fmc *FacilityMastersCreate) SetDeliveryNonDeliveryOffice(s string) *FacilityMastersCreate {
	fmc.mutation.SetDeliveryNonDeliveryOffice(s)
	return fmc
}

// SetNillableDeliveryNonDeliveryOffice sets the "DeliveryNonDeliveryOffice" field if the given value is not nil.
func (fmc *FacilityMastersCreate) SetNillableDeliveryNonDeliveryOffice(s *string) *FacilityMastersCreate {
	if s != nil {
		fmc.SetDeliveryNonDeliveryOffice(*s)
	}
	return fmc
}

// SetCreatedID sets the "CreatedID" field.
func (fmc *FacilityMastersCreate) SetCreatedID(s string) *FacilityMastersCreate {
	fmc.mutation.SetCreatedID(s)
	return fmc
}

// SetNillableCreatedID sets the "CreatedID" field if the given value is not nil.
func (fmc *FacilityMastersCreate) SetNillableCreatedID(s *string) *FacilityMastersCreate {
	if s != nil {
		fmc.SetCreatedID(*s)
	}
	return fmc
}

// SetCreatedBy sets the "CreatedBy" field.
func (fmc *FacilityMastersCreate) SetCreatedBy(s string) *FacilityMastersCreate {
	fmc.mutation.SetCreatedBy(s)
	return fmc
}

// SetNillableCreatedBy sets the "CreatedBy" field if the given value is not nil.
func (fmc *FacilityMastersCreate) SetNillableCreatedBy(s *string) *FacilityMastersCreate {
	if s != nil {
		fmc.SetCreatedBy(*s)
	}
	return fmc
}

// SetCreatedByName sets the "CreatedByName" field.
func (fmc *FacilityMastersCreate) SetCreatedByName(s string) *FacilityMastersCreate {
	fmc.mutation.SetCreatedByName(s)
	return fmc
}

// SetNillableCreatedByName sets the "CreatedByName" field if the given value is not nil.
func (fmc *FacilityMastersCreate) SetNillableCreatedByName(s *string) *FacilityMastersCreate {
	if s != nil {
		fmc.SetCreatedByName(*s)
	}
	return fmc
}

// SetCreatedByEmpID sets the "CreatedByEmpID" field.
func (fmc *FacilityMastersCreate) SetCreatedByEmpID(s string) *FacilityMastersCreate {
	fmc.mutation.SetCreatedByEmpID(s)
	return fmc
}

// SetNillableCreatedByEmpID sets the "CreatedByEmpID" field if the given value is not nil.
func (fmc *FacilityMastersCreate) SetNillableCreatedByEmpID(s *string) *FacilityMastersCreate {
	if s != nil {
		fmc.SetCreatedByEmpID(*s)
	}
	return fmc
}

// SetCircleCode sets the "CircleCode" field.
func (fmc *FacilityMastersCreate) SetCircleCode(s string) *FacilityMastersCreate {
	fmc.mutation.SetCircleCode(s)
	return fmc
}

// SetNillableCircleCode sets the "CircleCode" field if the given value is not nil.
func (fmc *FacilityMastersCreate) SetNillableCircleCode(s *string) *FacilityMastersCreate {
	if s != nil {
		fmc.SetCircleCode(*s)
	}
	return fmc
}

// SetStatus sets the "Status" field.
func (fmc *FacilityMastersCreate) SetStatus(s string) *FacilityMastersCreate {
	fmc.mutation.SetStatus(s)
	return fmc
}

// SetNillableStatus sets the "Status" field if the given value is not nil.
func (fmc *FacilityMastersCreate) SetNillableStatus(s *string) *FacilityMastersCreate {
	if s != nil {
		fmc.SetStatus(*s)
	}
	return fmc
}

// SetEventTime sets the "EventTime" field.
func (fmc *FacilityMastersCreate) SetEventTime(t time.Time) *FacilityMastersCreate {
	fmc.mutation.SetEventTime(t)
	return fmc
}

// SetNillableEventTime sets the "EventTime" field if the given value is not nil.
func (fmc *FacilityMastersCreate) SetNillableEventTime(t *time.Time) *FacilityMastersCreate {
	if t != nil {
		fmc.SetEventTime(*t)
	}
	return fmc
}

// SetID sets the "id" field.
func (fmc *FacilityMastersCreate) SetID(i int32) *FacilityMastersCreate {
	fmc.mutation.SetID(i)
	return fmc
}

// Mutation returns the FacilityMastersMutation object of the builder.
func (fmc *FacilityMastersCreate) Mutation() *FacilityMastersMutation {
	return fmc.mutation
}

// Save creates the FacilityMasters in the database.
func (fmc *FacilityMastersCreate) Save(ctx context.Context) (*FacilityMasters, error) {
	fmc.defaults()
	return withHooks(ctx, fmc.sqlSave, fmc.mutation, fmc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (fmc *FacilityMastersCreate) SaveX(ctx context.Context) *FacilityMasters {
	v, err := fmc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fmc *FacilityMastersCreate) Exec(ctx context.Context) error {
	_, err := fmc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fmc *FacilityMastersCreate) ExecX(ctx context.Context) {
	if err := fmc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fmc *FacilityMastersCreate) defaults() {
	if _, ok := fmc.mutation.Status(); !ok {
		v := facilitymasters.DefaultStatus
		fmc.mutation.SetStatus(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fmc *FacilityMastersCreate) check() error {
	if _, ok := fmc.mutation.Status(); !ok {
		return &ValidationError{Name: "Status", err: errors.New(`ent: missing required field "FacilityMasters.Status"`)}
	}
	if v, ok := fmc.mutation.ID(); ok {
		if err := facilitymasters.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "FacilityMasters.id": %w`, err)}
		}
	}
	return nil
}

func (fmc *FacilityMastersCreate) sqlSave(ctx context.Context) (*FacilityMasters, error) {
	if err := fmc.check(); err != nil {
		return nil, err
	}
	_node, _spec := fmc.createSpec()
	if err := sqlgraph.CreateNode(ctx, fmc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int32(id)
	}
	fmc.mutation.id = &_node.ID
	fmc.mutation.done = true
	return _node, nil
}

func (fmc *FacilityMastersCreate) createSpec() (*FacilityMasters, *sqlgraph.CreateSpec) {
	var (
		_node = &FacilityMasters{config: fmc.config}
		_spec = sqlgraph.NewCreateSpec(facilitymasters.Table, sqlgraph.NewFieldSpec(facilitymasters.FieldID, field.TypeInt32))
	)
	if id, ok := fmc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := fmc.mutation.FacilityID(); ok {
		_spec.SetField(facilitymasters.FieldFacilityID, field.TypeString, value)
		_node.FacilityID = value
	}
	if value, ok := fmc.mutation.UUID(); ok {
		_spec.SetField(facilitymasters.FieldUUID, field.TypeInt64, value)
		_node.UUID = value
	}
	if value, ok := fmc.mutation.FacilityType(); ok {
		_spec.SetField(facilitymasters.FieldFacilityType, field.TypeString, value)
		_node.FacilityType = value
	}
	if value, ok := fmc.mutation.FacilityIDDescription(); ok {
		_spec.SetField(facilitymasters.FieldFacilityIDDescription, field.TypeString, value)
		_node.FacilityIDDescription = value
	}
	if value, ok := fmc.mutation.ReportingOfficeFacilityID(); ok {
		_spec.SetField(facilitymasters.FieldReportingOfficeFacilityID, field.TypeString, value)
		_node.ReportingOfficeFacilityID = value
	}
	if value, ok := fmc.mutation.ReportingOfficeFacilityName(); ok {
		_spec.SetField(facilitymasters.FieldReportingOfficeFacilityName, field.TypeString, value)
		_node.ReportingOfficeFacilityName = value
	}
	if value, ok := fmc.mutation.HOFacilityID(); ok {
		_spec.SetField(facilitymasters.FieldHOFacilityID, field.TypeString, value)
		_node.HOFacilityID = value
	}
	if value, ok := fmc.mutation.HOFacilityName(); ok {
		_spec.SetField(facilitymasters.FieldHOFacilityName, field.TypeString, value)
		_node.HOFacilityName = value
	}
	if value, ok := fmc.mutation.SubDivisionFacilityID(); ok {
		_spec.SetField(facilitymasters.FieldSubDivisionFacilityID, field.TypeString, value)
		_node.SubDivisionFacilityID = value
	}
	if value, ok := fmc.mutation.SubDivisionFacilityName(); ok {
		_spec.SetField(facilitymasters.FieldSubDivisionFacilityName, field.TypeString, value)
		_node.SubDivisionFacilityName = value
	}
	if value, ok := fmc.mutation.DivisionFacilityID(); ok {
		_spec.SetField(facilitymasters.FieldDivisionFacilityID, field.TypeString, value)
		_node.DivisionFacilityID = value
	}
	if value, ok := fmc.mutation.DivisionFacilityName(); ok {
		_spec.SetField(facilitymasters.FieldDivisionFacilityName, field.TypeString, value)
		_node.DivisionFacilityName = value
	}
	if value, ok := fmc.mutation.RegionFacilityID(); ok {
		_spec.SetField(facilitymasters.FieldRegionFacilityID, field.TypeString, value)
		_node.RegionFacilityID = value
	}
	if value, ok := fmc.mutation.RegionFacilityName(); ok {
		_spec.SetField(facilitymasters.FieldRegionFacilityName, field.TypeString, value)
		_node.RegionFacilityName = value
	}
	if value, ok := fmc.mutation.CircleFacilityID(); ok {
		_spec.SetField(facilitymasters.FieldCircleFacilityID, field.TypeString, value)
		_node.CircleFacilityID = value
	}
	if value, ok := fmc.mutation.CircleFacilityName(); ok {
		_spec.SetField(facilitymasters.FieldCircleFacilityName, field.TypeString, value)
		_node.CircleFacilityName = value
	}
	if value, ok := fmc.mutation.Pincode(); ok {
		_spec.SetField(facilitymasters.FieldPincode, field.TypeString, value)
		_node.Pincode = value
	}
	if value, ok := fmc.mutation.ControllingAuthorityFacilityID(); ok {
		_spec.SetField(facilitymasters.FieldControllingAuthorityFacilityID, field.TypeString, value)
		_node.ControllingAuthorityFacilityID = value
	}
	if value, ok := fmc.mutation.ControllingAuthorityFacilityName(); ok {
		_spec.SetField(facilitymasters.FieldControllingAuthorityFacilityName, field.TypeString, value)
		_node.ControllingAuthorityFacilityName = value
	}
	if value, ok := fmc.mutation.NodalOfficerFacilityID(); ok {
		_spec.SetField(facilitymasters.FieldNodalOfficerFacilityID, field.TypeString, value)
		_node.NodalOfficerFacilityID = value
	}
	if value, ok := fmc.mutation.NodalOfficerFacilityName(); ok {
		_spec.SetField(facilitymasters.FieldNodalOfficerFacilityName, field.TypeString, value)
		_node.NodalOfficerFacilityName = value
	}
	if value, ok := fmc.mutation.CityName(); ok {
		_spec.SetField(facilitymasters.FieldCityName, field.TypeString, value)
		_node.CityName = value
	}
	if value, ok := fmc.mutation.HallCircleCode(); ok {
		_spec.SetField(facilitymasters.FieldHallCircleCode, field.TypeString, value)
		_node.HallCircleCode = value
	}
	if value, ok := fmc.mutation.DeliveryNonDeliveryOffice(); ok {
		_spec.SetField(facilitymasters.FieldDeliveryNonDeliveryOffice, field.TypeString, value)
		_node.DeliveryNonDeliveryOffice = value
	}
	if value, ok := fmc.mutation.CreatedID(); ok {
		_spec.SetField(facilitymasters.FieldCreatedID, field.TypeString, value)
		_node.CreatedID = value
	}
	if value, ok := fmc.mutation.CreatedBy(); ok {
		_spec.SetField(facilitymasters.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := fmc.mutation.CreatedByName(); ok {
		_spec.SetField(facilitymasters.FieldCreatedByName, field.TypeString, value)
		_node.CreatedByName = value
	}
	if value, ok := fmc.mutation.CreatedByEmpID(); ok {
		_spec.SetField(facilitymasters.FieldCreatedByEmpID, field.TypeString, value)
		_node.CreatedByEmpID = value
	}
	if value, ok := fmc.mutation.CircleCode(); ok {
		_spec.SetField(facilitymasters.FieldCircleCode, field.TypeString, value)
		_node.CircleCode = value
	}
	if value, ok := fmc.mutation.Status(); ok {
		_spec.SetField(facilitymasters.FieldStatus, field.TypeString, value)
		_node.Status = value
	}
	if value, ok := fmc.mutation.EventTime(); ok {
		_spec.SetField(facilitymasters.FieldEventTime, field.TypeTime, value)
		_node.EventTime = value
	}
	return _node, _spec
}

// FacilityMastersCreateBulk is the builder for creating many FacilityMasters entities in bulk.
type FacilityMastersCreateBulk struct {
	config
	builders []*FacilityMastersCreate
}

// Save creates the FacilityMasters entities in the database.
func (fmcb *FacilityMastersCreateBulk) Save(ctx context.Context) ([]*FacilityMasters, error) {
	specs := make([]*sqlgraph.CreateSpec, len(fmcb.builders))
	nodes := make([]*FacilityMasters, len(fmcb.builders))
	mutators := make([]Mutator, len(fmcb.builders))
	for i := range fmcb.builders {
		func(i int, root context.Context) {
			builder := fmcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*FacilityMastersMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, fmcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, fmcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, fmcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (fmcb *FacilityMastersCreateBulk) SaveX(ctx context.Context) []*FacilityMasters {
	v, err := fmcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fmcb *FacilityMastersCreateBulk) Exec(ctx context.Context) error {
	_, err := fmcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fmcb *FacilityMastersCreateBulk) ExecX(ctx context.Context) {
	if err := fmcb.Exec(ctx); err != nil {
		panic(err)
	}
}
