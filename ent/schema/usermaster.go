// Code generated by entimport, DO NOT EDIT.

package schema

import (
	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/entsql"
	"entgo.io/ent/schema"
	"entgo.io/ent/schema/edge"
	"entgo.io/ent/schema/field"
	"entgo.io/ent/schema/index"
	"time"
)

type UserMaster struct {
	ent.Schema
}


func (UserMaster) Fields() []ent.Field {
	return []ent.Field{
		field.Int64("id").StorageKey("UserID"), 
		field.Int64("EmployeeID").Optional(),
		field.String("EmployeeName").Optional(),
		field.String("Mobile").Optional(),
		field.String("EmailID").Optional(),
		field.String("UserName").Optional(),
		field.String("Password").Optional(),
		field.Bool("Status").Default(false).Optional(),
		field.String("Statuss").Optional().Default("active"),
		field.Int32("OTP").Optional(),
		field.Int32("OTPNew").Optional(),
		field.Int32("EmailOTPNew").Optional(),

		field.String("OTPRemarks").Optional(),
		field.Time("CreatedAt").SchemaType(map[string]string{
			dialect.Postgres: "timestamp",
		}).Optional(),
		field.Time("OTPTriggeredTime").SchemaType(map[string]string{
			dialect.Postgres: "timestamp",
		}).Default(time.Now).Optional(),		
		field.Time("OTPSavedTime").SchemaType(map[string]string{
			dialect.Postgres: "timestamp",
		}).SchemaType(map[string]string{
			dialect.Postgres: "timestamp",
		}).Default(time.Now).Optional(),
		field.Time("OTPExpiryTime").SchemaType(map[string]string{
			dialect.Postgres: "timestamp",
		}).Optional(),
		field.Bool("NewPasswordRequest").Optional(),
		field.Int32("EmailOTP").Optional(),
		field.String("EmailOTPRemarks").Optional(),
		field.Time("EmailCreatedAt").SchemaType(map[string]string{
			dialect.Postgres: "timestamp",
		}).Optional(),
		field.Time("EmailOTPTriggeredTime").SchemaType(map[string]string{
			dialect.Postgres: "timestamp",
		}).Default(time.Now).Optional(),		
		field.Time("EmailOTPSavedTime").SchemaType(map[string]string{
			dialect.Postgres: "timestamp",
		}).SchemaType(map[string]string{
			dialect.Postgres: "timestamp",
		}).Default(time.Now).Optional(),
		field.Time("EmailOTPExpiryTime").SchemaType(map[string]string{
			dialect.Postgres: "timestamp",
		}).Optional(),
		field.Bool("EmailNewPasswordRequest").Optional(),
		field.String("UidToken").Optional(),
		field.Int64("CreatedById").Optional(),
		field.String("CreatedByEmployeeId").Optional(),
		field.String("CreatedByUserName").Optional(),
		field.String("CreatedByDesignation").Optional(),
		field.Time("CreatedDate").SchemaType(map[string]string{
			dialect.Postgres: "timestamp",
		}).Optional(),
		field.Int64("DeletedById").Optional(),
		field.String("DeletedByEmployeeId").Optional(),
		field.String("DeletedByUserName").Optional(),
		field.String("DeletedByDesignation").Optional(),
		field.Time("DeletedDate").SchemaType(map[string]string{
			dialect.Postgres: "timestamp",
		}).Optional(),
		field.String("FacilityID").Optional(),
		field.String("CircleFacilityId").Optional(),
		field.String("CircleFacilityName").Optional(),
		field.String("Designation").Optional(),
		field.Int32("RoleUserCode").Optional(),
		field.String("Updatedby").Optional(),
		field.Time("updatedDate").SchemaType(map[string]string{
			dialect.Postgres: "timestamp",
		}).Default(time.Now).Optional(),
		field.String("Modifiedby").Optional(),
		field.Time("ModifiedDate").SchemaType(map[string]string{
			dialect.Postgres: "timestamp",
		}).Default(time.Now).Optional(),
		field.String("Operationstatus").Optional(),
		field.Int32("ExamCode").Optional(),
		field.Int32("ExamCodePS").Optional(),
		field.Enum("Gender").Values("Male", "Female").Optional(),
		field.String("DOB").Optional(),
		field.String("CreatedBy").Default("API").Optional(),
	}
}

func (UserMaster) Indexes() []ent.Index {
	return []ent.Index{
				index.Fields("EmployeeID","UserName","Statuss").Unique(),
	}
}




func (UserMaster) Edges() []ent.Edge {
	return []ent.Edge{
		//edge.From("users", EmployeeMaster.Type).Ref("UsermasterRef").Unique().Field("EmployeeID"),
		edge.From("roles", RoleMaster.Type).Ref("Roles_Ref").Unique().Field("RoleUserCode"),	
		edge.To("UsermasterRef", EmployeeMaster.Type),
		edge.To("UsersPSRef" , Exam_Applications_PS.Type),
		edge.To("UsersIPRef" , Exam_Applications_IP.Type),
		//edge.To("users_ps_type" , Exam_PS.Type),
		//edge.To("users_ip_type" , Exam_IP.Type),
		//edge.To("circleusers", CircleMaster.Type),
		//edge.To("divisionusers", DivisionMaster.Type),
		edge.To("User_ID_Ref",ExamNotifications.Type),
		//edge.From("CircleUsersRef", CircleMaster.Type).Ref("circleusers").Unique().Field("DivisionID"),
		//edge.From("usermasters", Exam_PS.Type).Ref("users_ps_type").Unique().Field("ExamCodePS"),
		edge.To("UsersGDSPARef" , Exam_Applications_GDSPA.Type),
		edge.To("UsersPMPARef" , Exam_Applications_PMPA.Type),
		edge.To("UsersGDSPMRef" , Exam_Applications_GDSPM.Type),
		edge.To("LogData", Logs.Type),
	}
}


func (UserMaster) Annotations() []schema.Annotation {
	return []schema.Annotation{entsql.Annotation{Table: "UserMaster"}}
}


