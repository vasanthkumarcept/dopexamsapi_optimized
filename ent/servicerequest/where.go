// Code generated by ent, DO NOT EDIT.

package servicerequest

import (
	"recruit/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.ServiceRequest {
	return predicate.ServiceRequest(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.ServiceRequest {
	return predicate.ServiceRequest(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.ServiceRequest {
	return predicate.ServiceRequest(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.ServiceRequest {
	return predicate.ServiceRequest(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.ServiceRequest {
	return predicate.ServiceRequest(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.ServiceRequest {
	return predicate.ServiceRequest(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.ServiceRequest {
	return predicate.ServiceRequest(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.ServiceRequest {
	return predicate.ServiceRequest(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.ServiceRequest {
	return predicate.ServiceRequest(sql.FieldLTE(FieldID, id))
}

// Remarks applies equality check predicate on the "remarks" field. It's identical to RemarksEQ.
func Remarks(v string) predicate.ServiceRequest {
	return predicate.ServiceRequest(sql.FieldEQ(FieldRemarks, v))
}

// Action applies equality check predicate on the "action" field. It's identical to ActionEQ.
func Action(v string) predicate.ServiceRequest {
	return predicate.ServiceRequest(sql.FieldEQ(FieldAction, v))
}

// PushedTime applies equality check predicate on the "PushedTime" field. It's identical to PushedTimeEQ.
func PushedTime(v time.Time) predicate.ServiceRequest {
	return predicate.ServiceRequest(sql.FieldEQ(FieldPushedTime, v))
}

// UpdatedBy applies equality check predicate on the "UpdatedBy" field. It's identical to UpdatedByEQ.
func UpdatedBy(v string) predicate.ServiceRequest {
	return predicate.ServiceRequest(sql.FieldEQ(FieldUpdatedBy, v))
}

// UpdatedTime applies equality check predicate on the "UpdatedTime" field. It's identical to UpdatedTimeEQ.
func UpdatedTime(v time.Time) predicate.ServiceRequest {
	return predicate.ServiceRequest(sql.FieldEQ(FieldUpdatedTime, v))
}

// AssignedTo applies equality check predicate on the "AssignedTo" field. It's identical to AssignedToEQ.
func AssignedTo(v string) predicate.ServiceRequest {
	return predicate.ServiceRequest(sql.FieldEQ(FieldAssignedTo, v))
}

// RemarksNew applies equality check predicate on the "RemarksNew" field. It's identical to RemarksNewEQ.
func RemarksNew(v string) predicate.ServiceRequest {
	return predicate.ServiceRequest(sql.FieldEQ(FieldRemarksNew, v))
}

// Status applies equality check predicate on the "Status" field. It's identical to StatusEQ.
func Status(v string) predicate.ServiceRequest {
	return predicate.ServiceRequest(sql.FieldEQ(FieldStatus, v))
}

// ClosedOn applies equality check predicate on the "ClosedOn" field. It's identical to ClosedOnEQ.
func ClosedOn(v time.Time) predicate.ServiceRequest {
	return predicate.ServiceRequest(sql.FieldEQ(FieldClosedOn, v))
}

// RemarksEQ applies the EQ predicate on the "remarks" field.
func RemarksEQ(v string) predicate.ServiceRequest {
	return predicate.ServiceRequest(sql.FieldEQ(FieldRemarks, v))
}

// RemarksNEQ applies the NEQ predicate on the "remarks" field.
func RemarksNEQ(v string) predicate.ServiceRequest {
	return predicate.ServiceRequest(sql.FieldNEQ(FieldRemarks, v))
}

// RemarksIn applies the In predicate on the "remarks" field.
func RemarksIn(vs ...string) predicate.ServiceRequest {
	return predicate.ServiceRequest(sql.FieldIn(FieldRemarks, vs...))
}

// RemarksNotIn applies the NotIn predicate on the "remarks" field.
func RemarksNotIn(vs ...string) predicate.ServiceRequest {
	return predicate.ServiceRequest(sql.FieldNotIn(FieldRemarks, vs...))
}

// RemarksGT applies the GT predicate on the "remarks" field.
func RemarksGT(v string) predicate.ServiceRequest {
	return predicate.ServiceRequest(sql.FieldGT(FieldRemarks, v))
}

// RemarksGTE applies the GTE predicate on the "remarks" field.
func RemarksGTE(v string) predicate.ServiceRequest {
	return predicate.ServiceRequest(sql.FieldGTE(FieldRemarks, v))
}

// RemarksLT applies the LT predicate on the "remarks" field.
func RemarksLT(v string) predicate.ServiceRequest {
	return predicate.ServiceRequest(sql.FieldLT(FieldRemarks, v))
}

// RemarksLTE applies the LTE predicate on the "remarks" field.
func RemarksLTE(v string) predicate.ServiceRequest {
	return predicate.ServiceRequest(sql.FieldLTE(FieldRemarks, v))
}

// RemarksContains applies the Contains predicate on the "remarks" field.
func RemarksContains(v string) predicate.ServiceRequest {
	return predicate.ServiceRequest(sql.FieldContains(FieldRemarks, v))
}

// RemarksHasPrefix applies the HasPrefix predicate on the "remarks" field.
func RemarksHasPrefix(v string) predicate.ServiceRequest {
	return predicate.ServiceRequest(sql.FieldHasPrefix(FieldRemarks, v))
}

// RemarksHasSuffix applies the HasSuffix predicate on the "remarks" field.
func RemarksHasSuffix(v string) predicate.ServiceRequest {
	return predicate.ServiceRequest(sql.FieldHasSuffix(FieldRemarks, v))
}

// RemarksIsNil applies the IsNil predicate on the "remarks" field.
func RemarksIsNil() predicate.ServiceRequest {
	return predicate.ServiceRequest(sql.FieldIsNull(FieldRemarks))
}

// RemarksNotNil applies the NotNil predicate on the "remarks" field.
func RemarksNotNil() predicate.ServiceRequest {
	return predicate.ServiceRequest(sql.FieldNotNull(FieldRemarks))
}

// RemarksEqualFold applies the EqualFold predicate on the "remarks" field.
func RemarksEqualFold(v string) predicate.ServiceRequest {
	return predicate.ServiceRequest(sql.FieldEqualFold(FieldRemarks, v))
}

// RemarksContainsFold applies the ContainsFold predicate on the "remarks" field.
func RemarksContainsFold(v string) predicate.ServiceRequest {
	return predicate.ServiceRequest(sql.FieldContainsFold(FieldRemarks, v))
}

// ActionEQ applies the EQ predicate on the "action" field.
func ActionEQ(v string) predicate.ServiceRequest {
	return predicate.ServiceRequest(sql.FieldEQ(FieldAction, v))
}

// ActionNEQ applies the NEQ predicate on the "action" field.
func ActionNEQ(v string) predicate.ServiceRequest {
	return predicate.ServiceRequest(sql.FieldNEQ(FieldAction, v))
}

// ActionIn applies the In predicate on the "action" field.
func ActionIn(vs ...string) predicate.ServiceRequest {
	return predicate.ServiceRequest(sql.FieldIn(FieldAction, vs...))
}

// ActionNotIn applies the NotIn predicate on the "action" field.
func ActionNotIn(vs ...string) predicate.ServiceRequest {
	return predicate.ServiceRequest(sql.FieldNotIn(FieldAction, vs...))
}

// ActionGT applies the GT predicate on the "action" field.
func ActionGT(v string) predicate.ServiceRequest {
	return predicate.ServiceRequest(sql.FieldGT(FieldAction, v))
}

// ActionGTE applies the GTE predicate on the "action" field.
func ActionGTE(v string) predicate.ServiceRequest {
	return predicate.ServiceRequest(sql.FieldGTE(FieldAction, v))
}

// ActionLT applies the LT predicate on the "action" field.
func ActionLT(v string) predicate.ServiceRequest {
	return predicate.ServiceRequest(sql.FieldLT(FieldAction, v))
}

// ActionLTE applies the LTE predicate on the "action" field.
func ActionLTE(v string) predicate.ServiceRequest {
	return predicate.ServiceRequest(sql.FieldLTE(FieldAction, v))
}

// ActionContains applies the Contains predicate on the "action" field.
func ActionContains(v string) predicate.ServiceRequest {
	return predicate.ServiceRequest(sql.FieldContains(FieldAction, v))
}

// ActionHasPrefix applies the HasPrefix predicate on the "action" field.
func ActionHasPrefix(v string) predicate.ServiceRequest {
	return predicate.ServiceRequest(sql.FieldHasPrefix(FieldAction, v))
}

// ActionHasSuffix applies the HasSuffix predicate on the "action" field.
func ActionHasSuffix(v string) predicate.ServiceRequest {
	return predicate.ServiceRequest(sql.FieldHasSuffix(FieldAction, v))
}

// ActionIsNil applies the IsNil predicate on the "action" field.
func ActionIsNil() predicate.ServiceRequest {
	return predicate.ServiceRequest(sql.FieldIsNull(FieldAction))
}

// ActionNotNil applies the NotNil predicate on the "action" field.
func ActionNotNil() predicate.ServiceRequest {
	return predicate.ServiceRequest(sql.FieldNotNull(FieldAction))
}

// ActionEqualFold applies the EqualFold predicate on the "action" field.
func ActionEqualFold(v string) predicate.ServiceRequest {
	return predicate.ServiceRequest(sql.FieldEqualFold(FieldAction, v))
}

// ActionContainsFold applies the ContainsFold predicate on the "action" field.
func ActionContainsFold(v string) predicate.ServiceRequest {
	return predicate.ServiceRequest(sql.FieldContainsFold(FieldAction, v))
}

// PushedTimeEQ applies the EQ predicate on the "PushedTime" field.
func PushedTimeEQ(v time.Time) predicate.ServiceRequest {
	return predicate.ServiceRequest(sql.FieldEQ(FieldPushedTime, v))
}

// PushedTimeNEQ applies the NEQ predicate on the "PushedTime" field.
func PushedTimeNEQ(v time.Time) predicate.ServiceRequest {
	return predicate.ServiceRequest(sql.FieldNEQ(FieldPushedTime, v))
}

// PushedTimeIn applies the In predicate on the "PushedTime" field.
func PushedTimeIn(vs ...time.Time) predicate.ServiceRequest {
	return predicate.ServiceRequest(sql.FieldIn(FieldPushedTime, vs...))
}

// PushedTimeNotIn applies the NotIn predicate on the "PushedTime" field.
func PushedTimeNotIn(vs ...time.Time) predicate.ServiceRequest {
	return predicate.ServiceRequest(sql.FieldNotIn(FieldPushedTime, vs...))
}

// PushedTimeGT applies the GT predicate on the "PushedTime" field.
func PushedTimeGT(v time.Time) predicate.ServiceRequest {
	return predicate.ServiceRequest(sql.FieldGT(FieldPushedTime, v))
}

// PushedTimeGTE applies the GTE predicate on the "PushedTime" field.
func PushedTimeGTE(v time.Time) predicate.ServiceRequest {
	return predicate.ServiceRequest(sql.FieldGTE(FieldPushedTime, v))
}

// PushedTimeLT applies the LT predicate on the "PushedTime" field.
func PushedTimeLT(v time.Time) predicate.ServiceRequest {
	return predicate.ServiceRequest(sql.FieldLT(FieldPushedTime, v))
}

// PushedTimeLTE applies the LTE predicate on the "PushedTime" field.
func PushedTimeLTE(v time.Time) predicate.ServiceRequest {
	return predicate.ServiceRequest(sql.FieldLTE(FieldPushedTime, v))
}

// PushedTimeIsNil applies the IsNil predicate on the "PushedTime" field.
func PushedTimeIsNil() predicate.ServiceRequest {
	return predicate.ServiceRequest(sql.FieldIsNull(FieldPushedTime))
}

// PushedTimeNotNil applies the NotNil predicate on the "PushedTime" field.
func PushedTimeNotNil() predicate.ServiceRequest {
	return predicate.ServiceRequest(sql.FieldNotNull(FieldPushedTime))
}

// UpdatedByEQ applies the EQ predicate on the "UpdatedBy" field.
func UpdatedByEQ(v string) predicate.ServiceRequest {
	return predicate.ServiceRequest(sql.FieldEQ(FieldUpdatedBy, v))
}

// UpdatedByNEQ applies the NEQ predicate on the "UpdatedBy" field.
func UpdatedByNEQ(v string) predicate.ServiceRequest {
	return predicate.ServiceRequest(sql.FieldNEQ(FieldUpdatedBy, v))
}

// UpdatedByIn applies the In predicate on the "UpdatedBy" field.
func UpdatedByIn(vs ...string) predicate.ServiceRequest {
	return predicate.ServiceRequest(sql.FieldIn(FieldUpdatedBy, vs...))
}

// UpdatedByNotIn applies the NotIn predicate on the "UpdatedBy" field.
func UpdatedByNotIn(vs ...string) predicate.ServiceRequest {
	return predicate.ServiceRequest(sql.FieldNotIn(FieldUpdatedBy, vs...))
}

// UpdatedByGT applies the GT predicate on the "UpdatedBy" field.
func UpdatedByGT(v string) predicate.ServiceRequest {
	return predicate.ServiceRequest(sql.FieldGT(FieldUpdatedBy, v))
}

// UpdatedByGTE applies the GTE predicate on the "UpdatedBy" field.
func UpdatedByGTE(v string) predicate.ServiceRequest {
	return predicate.ServiceRequest(sql.FieldGTE(FieldUpdatedBy, v))
}

// UpdatedByLT applies the LT predicate on the "UpdatedBy" field.
func UpdatedByLT(v string) predicate.ServiceRequest {
	return predicate.ServiceRequest(sql.FieldLT(FieldUpdatedBy, v))
}

// UpdatedByLTE applies the LTE predicate on the "UpdatedBy" field.
func UpdatedByLTE(v string) predicate.ServiceRequest {
	return predicate.ServiceRequest(sql.FieldLTE(FieldUpdatedBy, v))
}

// UpdatedByContains applies the Contains predicate on the "UpdatedBy" field.
func UpdatedByContains(v string) predicate.ServiceRequest {
	return predicate.ServiceRequest(sql.FieldContains(FieldUpdatedBy, v))
}

// UpdatedByHasPrefix applies the HasPrefix predicate on the "UpdatedBy" field.
func UpdatedByHasPrefix(v string) predicate.ServiceRequest {
	return predicate.ServiceRequest(sql.FieldHasPrefix(FieldUpdatedBy, v))
}

// UpdatedByHasSuffix applies the HasSuffix predicate on the "UpdatedBy" field.
func UpdatedByHasSuffix(v string) predicate.ServiceRequest {
	return predicate.ServiceRequest(sql.FieldHasSuffix(FieldUpdatedBy, v))
}

// UpdatedByIsNil applies the IsNil predicate on the "UpdatedBy" field.
func UpdatedByIsNil() predicate.ServiceRequest {
	return predicate.ServiceRequest(sql.FieldIsNull(FieldUpdatedBy))
}

// UpdatedByNotNil applies the NotNil predicate on the "UpdatedBy" field.
func UpdatedByNotNil() predicate.ServiceRequest {
	return predicate.ServiceRequest(sql.FieldNotNull(FieldUpdatedBy))
}

// UpdatedByEqualFold applies the EqualFold predicate on the "UpdatedBy" field.
func UpdatedByEqualFold(v string) predicate.ServiceRequest {
	return predicate.ServiceRequest(sql.FieldEqualFold(FieldUpdatedBy, v))
}

// UpdatedByContainsFold applies the ContainsFold predicate on the "UpdatedBy" field.
func UpdatedByContainsFold(v string) predicate.ServiceRequest {
	return predicate.ServiceRequest(sql.FieldContainsFold(FieldUpdatedBy, v))
}

// UpdatedTimeEQ applies the EQ predicate on the "UpdatedTime" field.
func UpdatedTimeEQ(v time.Time) predicate.ServiceRequest {
	return predicate.ServiceRequest(sql.FieldEQ(FieldUpdatedTime, v))
}

// UpdatedTimeNEQ applies the NEQ predicate on the "UpdatedTime" field.
func UpdatedTimeNEQ(v time.Time) predicate.ServiceRequest {
	return predicate.ServiceRequest(sql.FieldNEQ(FieldUpdatedTime, v))
}

// UpdatedTimeIn applies the In predicate on the "UpdatedTime" field.
func UpdatedTimeIn(vs ...time.Time) predicate.ServiceRequest {
	return predicate.ServiceRequest(sql.FieldIn(FieldUpdatedTime, vs...))
}

// UpdatedTimeNotIn applies the NotIn predicate on the "UpdatedTime" field.
func UpdatedTimeNotIn(vs ...time.Time) predicate.ServiceRequest {
	return predicate.ServiceRequest(sql.FieldNotIn(FieldUpdatedTime, vs...))
}

// UpdatedTimeGT applies the GT predicate on the "UpdatedTime" field.
func UpdatedTimeGT(v time.Time) predicate.ServiceRequest {
	return predicate.ServiceRequest(sql.FieldGT(FieldUpdatedTime, v))
}

// UpdatedTimeGTE applies the GTE predicate on the "UpdatedTime" field.
func UpdatedTimeGTE(v time.Time) predicate.ServiceRequest {
	return predicate.ServiceRequest(sql.FieldGTE(FieldUpdatedTime, v))
}

// UpdatedTimeLT applies the LT predicate on the "UpdatedTime" field.
func UpdatedTimeLT(v time.Time) predicate.ServiceRequest {
	return predicate.ServiceRequest(sql.FieldLT(FieldUpdatedTime, v))
}

// UpdatedTimeLTE applies the LTE predicate on the "UpdatedTime" field.
func UpdatedTimeLTE(v time.Time) predicate.ServiceRequest {
	return predicate.ServiceRequest(sql.FieldLTE(FieldUpdatedTime, v))
}

// UpdatedTimeIsNil applies the IsNil predicate on the "UpdatedTime" field.
func UpdatedTimeIsNil() predicate.ServiceRequest {
	return predicate.ServiceRequest(sql.FieldIsNull(FieldUpdatedTime))
}

// UpdatedTimeNotNil applies the NotNil predicate on the "UpdatedTime" field.
func UpdatedTimeNotNil() predicate.ServiceRequest {
	return predicate.ServiceRequest(sql.FieldNotNull(FieldUpdatedTime))
}

// AssignedToEQ applies the EQ predicate on the "AssignedTo" field.
func AssignedToEQ(v string) predicate.ServiceRequest {
	return predicate.ServiceRequest(sql.FieldEQ(FieldAssignedTo, v))
}

// AssignedToNEQ applies the NEQ predicate on the "AssignedTo" field.
func AssignedToNEQ(v string) predicate.ServiceRequest {
	return predicate.ServiceRequest(sql.FieldNEQ(FieldAssignedTo, v))
}

// AssignedToIn applies the In predicate on the "AssignedTo" field.
func AssignedToIn(vs ...string) predicate.ServiceRequest {
	return predicate.ServiceRequest(sql.FieldIn(FieldAssignedTo, vs...))
}

// AssignedToNotIn applies the NotIn predicate on the "AssignedTo" field.
func AssignedToNotIn(vs ...string) predicate.ServiceRequest {
	return predicate.ServiceRequest(sql.FieldNotIn(FieldAssignedTo, vs...))
}

// AssignedToGT applies the GT predicate on the "AssignedTo" field.
func AssignedToGT(v string) predicate.ServiceRequest {
	return predicate.ServiceRequest(sql.FieldGT(FieldAssignedTo, v))
}

// AssignedToGTE applies the GTE predicate on the "AssignedTo" field.
func AssignedToGTE(v string) predicate.ServiceRequest {
	return predicate.ServiceRequest(sql.FieldGTE(FieldAssignedTo, v))
}

// AssignedToLT applies the LT predicate on the "AssignedTo" field.
func AssignedToLT(v string) predicate.ServiceRequest {
	return predicate.ServiceRequest(sql.FieldLT(FieldAssignedTo, v))
}

// AssignedToLTE applies the LTE predicate on the "AssignedTo" field.
func AssignedToLTE(v string) predicate.ServiceRequest {
	return predicate.ServiceRequest(sql.FieldLTE(FieldAssignedTo, v))
}

// AssignedToContains applies the Contains predicate on the "AssignedTo" field.
func AssignedToContains(v string) predicate.ServiceRequest {
	return predicate.ServiceRequest(sql.FieldContains(FieldAssignedTo, v))
}

// AssignedToHasPrefix applies the HasPrefix predicate on the "AssignedTo" field.
func AssignedToHasPrefix(v string) predicate.ServiceRequest {
	return predicate.ServiceRequest(sql.FieldHasPrefix(FieldAssignedTo, v))
}

// AssignedToHasSuffix applies the HasSuffix predicate on the "AssignedTo" field.
func AssignedToHasSuffix(v string) predicate.ServiceRequest {
	return predicate.ServiceRequest(sql.FieldHasSuffix(FieldAssignedTo, v))
}

// AssignedToIsNil applies the IsNil predicate on the "AssignedTo" field.
func AssignedToIsNil() predicate.ServiceRequest {
	return predicate.ServiceRequest(sql.FieldIsNull(FieldAssignedTo))
}

// AssignedToNotNil applies the NotNil predicate on the "AssignedTo" field.
func AssignedToNotNil() predicate.ServiceRequest {
	return predicate.ServiceRequest(sql.FieldNotNull(FieldAssignedTo))
}

// AssignedToEqualFold applies the EqualFold predicate on the "AssignedTo" field.
func AssignedToEqualFold(v string) predicate.ServiceRequest {
	return predicate.ServiceRequest(sql.FieldEqualFold(FieldAssignedTo, v))
}

// AssignedToContainsFold applies the ContainsFold predicate on the "AssignedTo" field.
func AssignedToContainsFold(v string) predicate.ServiceRequest {
	return predicate.ServiceRequest(sql.FieldContainsFold(FieldAssignedTo, v))
}

// RemarksNewEQ applies the EQ predicate on the "RemarksNew" field.
func RemarksNewEQ(v string) predicate.ServiceRequest {
	return predicate.ServiceRequest(sql.FieldEQ(FieldRemarksNew, v))
}

// RemarksNewNEQ applies the NEQ predicate on the "RemarksNew" field.
func RemarksNewNEQ(v string) predicate.ServiceRequest {
	return predicate.ServiceRequest(sql.FieldNEQ(FieldRemarksNew, v))
}

// RemarksNewIn applies the In predicate on the "RemarksNew" field.
func RemarksNewIn(vs ...string) predicate.ServiceRequest {
	return predicate.ServiceRequest(sql.FieldIn(FieldRemarksNew, vs...))
}

// RemarksNewNotIn applies the NotIn predicate on the "RemarksNew" field.
func RemarksNewNotIn(vs ...string) predicate.ServiceRequest {
	return predicate.ServiceRequest(sql.FieldNotIn(FieldRemarksNew, vs...))
}

// RemarksNewGT applies the GT predicate on the "RemarksNew" field.
func RemarksNewGT(v string) predicate.ServiceRequest {
	return predicate.ServiceRequest(sql.FieldGT(FieldRemarksNew, v))
}

// RemarksNewGTE applies the GTE predicate on the "RemarksNew" field.
func RemarksNewGTE(v string) predicate.ServiceRequest {
	return predicate.ServiceRequest(sql.FieldGTE(FieldRemarksNew, v))
}

// RemarksNewLT applies the LT predicate on the "RemarksNew" field.
func RemarksNewLT(v string) predicate.ServiceRequest {
	return predicate.ServiceRequest(sql.FieldLT(FieldRemarksNew, v))
}

// RemarksNewLTE applies the LTE predicate on the "RemarksNew" field.
func RemarksNewLTE(v string) predicate.ServiceRequest {
	return predicate.ServiceRequest(sql.FieldLTE(FieldRemarksNew, v))
}

// RemarksNewContains applies the Contains predicate on the "RemarksNew" field.
func RemarksNewContains(v string) predicate.ServiceRequest {
	return predicate.ServiceRequest(sql.FieldContains(FieldRemarksNew, v))
}

// RemarksNewHasPrefix applies the HasPrefix predicate on the "RemarksNew" field.
func RemarksNewHasPrefix(v string) predicate.ServiceRequest {
	return predicate.ServiceRequest(sql.FieldHasPrefix(FieldRemarksNew, v))
}

// RemarksNewHasSuffix applies the HasSuffix predicate on the "RemarksNew" field.
func RemarksNewHasSuffix(v string) predicate.ServiceRequest {
	return predicate.ServiceRequest(sql.FieldHasSuffix(FieldRemarksNew, v))
}

// RemarksNewIsNil applies the IsNil predicate on the "RemarksNew" field.
func RemarksNewIsNil() predicate.ServiceRequest {
	return predicate.ServiceRequest(sql.FieldIsNull(FieldRemarksNew))
}

// RemarksNewNotNil applies the NotNil predicate on the "RemarksNew" field.
func RemarksNewNotNil() predicate.ServiceRequest {
	return predicate.ServiceRequest(sql.FieldNotNull(FieldRemarksNew))
}

// RemarksNewEqualFold applies the EqualFold predicate on the "RemarksNew" field.
func RemarksNewEqualFold(v string) predicate.ServiceRequest {
	return predicate.ServiceRequest(sql.FieldEqualFold(FieldRemarksNew, v))
}

// RemarksNewContainsFold applies the ContainsFold predicate on the "RemarksNew" field.
func RemarksNewContainsFold(v string) predicate.ServiceRequest {
	return predicate.ServiceRequest(sql.FieldContainsFold(FieldRemarksNew, v))
}

// StatusEQ applies the EQ predicate on the "Status" field.
func StatusEQ(v string) predicate.ServiceRequest {
	return predicate.ServiceRequest(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "Status" field.
func StatusNEQ(v string) predicate.ServiceRequest {
	return predicate.ServiceRequest(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "Status" field.
func StatusIn(vs ...string) predicate.ServiceRequest {
	return predicate.ServiceRequest(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "Status" field.
func StatusNotIn(vs ...string) predicate.ServiceRequest {
	return predicate.ServiceRequest(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "Status" field.
func StatusGT(v string) predicate.ServiceRequest {
	return predicate.ServiceRequest(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "Status" field.
func StatusGTE(v string) predicate.ServiceRequest {
	return predicate.ServiceRequest(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "Status" field.
func StatusLT(v string) predicate.ServiceRequest {
	return predicate.ServiceRequest(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "Status" field.
func StatusLTE(v string) predicate.ServiceRequest {
	return predicate.ServiceRequest(sql.FieldLTE(FieldStatus, v))
}

// StatusContains applies the Contains predicate on the "Status" field.
func StatusContains(v string) predicate.ServiceRequest {
	return predicate.ServiceRequest(sql.FieldContains(FieldStatus, v))
}

// StatusHasPrefix applies the HasPrefix predicate on the "Status" field.
func StatusHasPrefix(v string) predicate.ServiceRequest {
	return predicate.ServiceRequest(sql.FieldHasPrefix(FieldStatus, v))
}

// StatusHasSuffix applies the HasSuffix predicate on the "Status" field.
func StatusHasSuffix(v string) predicate.ServiceRequest {
	return predicate.ServiceRequest(sql.FieldHasSuffix(FieldStatus, v))
}

// StatusIsNil applies the IsNil predicate on the "Status" field.
func StatusIsNil() predicate.ServiceRequest {
	return predicate.ServiceRequest(sql.FieldIsNull(FieldStatus))
}

// StatusNotNil applies the NotNil predicate on the "Status" field.
func StatusNotNil() predicate.ServiceRequest {
	return predicate.ServiceRequest(sql.FieldNotNull(FieldStatus))
}

// StatusEqualFold applies the EqualFold predicate on the "Status" field.
func StatusEqualFold(v string) predicate.ServiceRequest {
	return predicate.ServiceRequest(sql.FieldEqualFold(FieldStatus, v))
}

// StatusContainsFold applies the ContainsFold predicate on the "Status" field.
func StatusContainsFold(v string) predicate.ServiceRequest {
	return predicate.ServiceRequest(sql.FieldContainsFold(FieldStatus, v))
}

// ClosedOnEQ applies the EQ predicate on the "ClosedOn" field.
func ClosedOnEQ(v time.Time) predicate.ServiceRequest {
	return predicate.ServiceRequest(sql.FieldEQ(FieldClosedOn, v))
}

// ClosedOnNEQ applies the NEQ predicate on the "ClosedOn" field.
func ClosedOnNEQ(v time.Time) predicate.ServiceRequest {
	return predicate.ServiceRequest(sql.FieldNEQ(FieldClosedOn, v))
}

// ClosedOnIn applies the In predicate on the "ClosedOn" field.
func ClosedOnIn(vs ...time.Time) predicate.ServiceRequest {
	return predicate.ServiceRequest(sql.FieldIn(FieldClosedOn, vs...))
}

// ClosedOnNotIn applies the NotIn predicate on the "ClosedOn" field.
func ClosedOnNotIn(vs ...time.Time) predicate.ServiceRequest {
	return predicate.ServiceRequest(sql.FieldNotIn(FieldClosedOn, vs...))
}

// ClosedOnGT applies the GT predicate on the "ClosedOn" field.
func ClosedOnGT(v time.Time) predicate.ServiceRequest {
	return predicate.ServiceRequest(sql.FieldGT(FieldClosedOn, v))
}

// ClosedOnGTE applies the GTE predicate on the "ClosedOn" field.
func ClosedOnGTE(v time.Time) predicate.ServiceRequest {
	return predicate.ServiceRequest(sql.FieldGTE(FieldClosedOn, v))
}

// ClosedOnLT applies the LT predicate on the "ClosedOn" field.
func ClosedOnLT(v time.Time) predicate.ServiceRequest {
	return predicate.ServiceRequest(sql.FieldLT(FieldClosedOn, v))
}

// ClosedOnLTE applies the LTE predicate on the "ClosedOn" field.
func ClosedOnLTE(v time.Time) predicate.ServiceRequest {
	return predicate.ServiceRequest(sql.FieldLTE(FieldClosedOn, v))
}

// ClosedOnIsNil applies the IsNil predicate on the "ClosedOn" field.
func ClosedOnIsNil() predicate.ServiceRequest {
	return predicate.ServiceRequest(sql.FieldIsNull(FieldClosedOn))
}

// ClosedOnNotNil applies the NotNil predicate on the "ClosedOn" field.
func ClosedOnNotNil() predicate.ServiceRequest {
	return predicate.ServiceRequest(sql.FieldNotNull(FieldClosedOn))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ServiceRequest) predicate.ServiceRequest {
	return predicate.ServiceRequest(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ServiceRequest) predicate.ServiceRequest {
	return predicate.ServiceRequest(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ServiceRequest) predicate.ServiceRequest {
	return predicate.ServiceRequest(func(s *sql.Selector) {
		p(s.Not())
	})
}
