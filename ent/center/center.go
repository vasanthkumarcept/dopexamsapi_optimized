// Code generated by ent, DO NOT EDIT.

package center

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the center type in the database.
	Label = "center"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "CenterCode"
	// FieldCityID holds the string denoting the cityid field in the database.
	FieldCityID = "city_id"
	// FieldNodalOfficerCode holds the string denoting the nodalofficercode field in the database.
	FieldNodalOfficerCode = "nodal_officer_code"
	// FieldExamCenterName holds the string denoting the examcentername field in the database.
	FieldExamCenterName = "exam_center_name"
	// FieldExamCode holds the string denoting the examcode field in the database.
	FieldExamCode = "exam_code"
	// FieldRegionID holds the string denoting the regionid field in the database.
	FieldRegionID = "region_id"
	// FieldCircleID holds the string denoting the circleid field in the database.
	FieldCircleID = "circle_id"
	// FieldDivisionID holds the string denoting the divisionid field in the database.
	FieldDivisionID = "division_id"
	// FieldFacilityID holds the string denoting the facilityid field in the database.
	FieldFacilityID = "facility_id"
	// FieldExamNameCode holds the string denoting the examnamecode field in the database.
	FieldExamNameCode = "exam_name_code"
	// FieldExamName holds the string denoting the examname field in the database.
	FieldExamName = "exam_name"
	// FieldNAUserName holds the string denoting the nausername field in the database.
	FieldNAUserName = "na_user_name"
	// FieldNodalOfficeFacilityId holds the string denoting the nodalofficefacilityid field in the database.
	FieldNodalOfficeFacilityId = "nodal_office_facility_id"
	// FieldAdminCircleOfficeID holds the string denoting the admincircleofficeid field in the database.
	FieldAdminCircleOfficeID = "admin_circle_office_id"
	// FieldAddress holds the string denoting the address field in the database.
	FieldAddress = "address"
	// FieldLandmark holds the string denoting the landmark field in the database.
	FieldLandmark = "landmark"
	// FieldCenterCityName holds the string denoting the centercityname field in the database.
	FieldCenterCityName = "center_city_name"
	// FieldPincode holds the string denoting the pincode field in the database.
	FieldPincode = "pincode"
	// FieldMaxSeats holds the string denoting the maxseats field in the database.
	FieldMaxSeats = "max_seats"
	// FieldNoAlloted holds the string denoting the noalloted field in the database.
	FieldNoAlloted = "no_alloted"
	// FieldPendingSeats holds the string denoting the pendingseats field in the database.
	FieldPendingSeats = "pending_seats"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldExamYear holds the string denoting the examyear field in the database.
	FieldExamYear = "exam_year"
	// FieldConductedBy holds the string denoting the conductedby field in the database.
	FieldConductedBy = "conducted_by"
	// FieldConductedByFacilityID holds the string denoting the conductedbyfacilityid field in the database.
	FieldConductedByFacilityID = "conducted_by_facility_id"
	// FieldUpdatedAt holds the string denoting the updatedat field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldUpdatedBy holds the string denoting the updatedby field in the database.
	FieldUpdatedBy = "updated_by"
	// FieldPapers holds the string denoting the papers field in the database.
	FieldPapers = "papers"
	// EdgeApplications holds the string denoting the applications edge name in mutations.
	EdgeApplications = "applications"
	// EdgeExamCentresRef holds the string denoting the examcentresref edge name in mutations.
	EdgeExamCentresRef = "ExamCentresRef"
	// EdgeExamCentresRefPS holds the string denoting the examcentresrefps edge name in mutations.
	EdgeExamCentresRefPS = "ExamCentresRefPS"
	// EdgeExamCentresRefGDSPA holds the string denoting the examcentresrefgdspa edge name in mutations.
	EdgeExamCentresRefGDSPA = "ExamCentresRefGDSPA"
	// EdgeExamCentresRefPMPA holds the string denoting the examcentresrefpmpa edge name in mutations.
	EdgeExamCentresRefPMPA = "ExamCentresRefPMPA"
	// EdgeExamCentresRefGDSPM holds the string denoting the examcentresrefgdspm edge name in mutations.
	EdgeExamCentresRefGDSPM = "ExamCentresRefGDSPM"
	// EdgeExamscentres holds the string denoting the examscentres edge name in mutations.
	EdgeExamscentres = "Examscentres"
	// EdgeExamCentresRefMTSPMMG holds the string denoting the examcentresrefmtspmmg edge name in mutations.
	EdgeExamCentresRefMTSPMMG = "ExamCentresRefMTSPMMG"
	// EdgeExaCenterHallRef holds the string denoting the exacenterhallref edge name in mutations.
	EdgeExaCenterHallRef = "ExaCenterHallRef"
	// EdgeCentresip holds the string denoting the centresip edge name in mutations.
	EdgeCentresip = "centresip"
	// EdgeLogData holds the string denoting the logdata edge name in mutations.
	EdgeLogData = "LogData"
	// ApplicationFieldID holds the string denoting the ID field of the Application.
	ApplicationFieldID = "ApplicationCode"
	// Exam_Applications_IPFieldID holds the string denoting the ID field of the Exam_Applications_IP.
	Exam_Applications_IPFieldID = "ApplicationID"
	// Exam_Applications_PSFieldID holds the string denoting the ID field of the Exam_Applications_PS.
	Exam_Applications_PSFieldID = "ApplicationID"
	// Exam_Applications_GDSPAFieldID holds the string denoting the ID field of the Exam_Applications_GDSPA.
	Exam_Applications_GDSPAFieldID = "ApplicationID"
	// Exam_Applications_PMPAFieldID holds the string denoting the ID field of the Exam_Applications_PMPA.
	Exam_Applications_PMPAFieldID = "ApplicationID"
	// Exam_Applications_GDSPMFieldID holds the string denoting the ID field of the Exam_Applications_GDSPM.
	Exam_Applications_GDSPMFieldID = "ApplicationID"
	// ExamCityCenterFieldID holds the string denoting the ID field of the ExamCityCenter.
	ExamCityCenterFieldID = "ExamCityCentreCode"
	// Exam_Application_MTSPMMGFieldID holds the string denoting the ID field of the Exam_Application_MTSPMMG.
	Exam_Application_MTSPMMGFieldID = "ApplicationID"
	// ExamCenterHallFieldID holds the string denoting the ID field of the ExamCenterHall.
	ExamCenterHallFieldID = "ExamCenterHall"
	// ExamFieldID holds the string denoting the ID field of the Exam.
	ExamFieldID = "UniqueID"
	// LogsFieldID holds the string denoting the ID field of the Logs.
	LogsFieldID = "ID"
	// Table holds the table name of the center in the database.
	Table = "Center"
	// ApplicationsTable is the table that holds the applications relation/edge.
	ApplicationsTable = "Application"
	// ApplicationsInverseTable is the table name for the Application entity.
	// It exists in this package in order to avoid circular dependency with the "application" package.
	ApplicationsInverseTable = "Application"
	// ApplicationsColumn is the table column denoting the applications relation/edge.
	ApplicationsColumn = "center_code"
	// ExamCentresRefTable is the table that holds the ExamCentresRef relation/edge.
	ExamCentresRefTable = "Exam_Applications_IP"
	// ExamCentresRefInverseTable is the table name for the Exam_Applications_IP entity.
	// It exists in this package in order to avoid circular dependency with the "exam_applications_ip" package.
	ExamCentresRefInverseTable = "Exam_Applications_IP"
	// ExamCentresRefColumn is the table column denoting the ExamCentresRef relation/edge.
	ExamCentresRefColumn = "center_code"
	// ExamCentresRefPSTable is the table that holds the ExamCentresRefPS relation/edge.
	ExamCentresRefPSTable = "Exam_Applications_PS"
	// ExamCentresRefPSInverseTable is the table name for the Exam_Applications_PS entity.
	// It exists in this package in order to avoid circular dependency with the "exam_applications_ps" package.
	ExamCentresRefPSInverseTable = "Exam_Applications_PS"
	// ExamCentresRefPSColumn is the table column denoting the ExamCentresRefPS relation/edge.
	ExamCentresRefPSColumn = "center_code"
	// ExamCentresRefGDSPATable is the table that holds the ExamCentresRefGDSPA relation/edge.
	ExamCentresRefGDSPATable = "Exam_Applications_GDSPA"
	// ExamCentresRefGDSPAInverseTable is the table name for the Exam_Applications_GDSPA entity.
	// It exists in this package in order to avoid circular dependency with the "exam_applications_gdspa" package.
	ExamCentresRefGDSPAInverseTable = "Exam_Applications_GDSPA"
	// ExamCentresRefGDSPAColumn is the table column denoting the ExamCentresRefGDSPA relation/edge.
	ExamCentresRefGDSPAColumn = "center_code"
	// ExamCentresRefPMPATable is the table that holds the ExamCentresRefPMPA relation/edge.
	ExamCentresRefPMPATable = "Exam_Applications_PMPA"
	// ExamCentresRefPMPAInverseTable is the table name for the Exam_Applications_PMPA entity.
	// It exists in this package in order to avoid circular dependency with the "exam_applications_pmpa" package.
	ExamCentresRefPMPAInverseTable = "Exam_Applications_PMPA"
	// ExamCentresRefPMPAColumn is the table column denoting the ExamCentresRefPMPA relation/edge.
	ExamCentresRefPMPAColumn = "center_code"
	// ExamCentresRefGDSPMTable is the table that holds the ExamCentresRefGDSPM relation/edge.
	ExamCentresRefGDSPMTable = "Exam_Applications_GDSPM"
	// ExamCentresRefGDSPMInverseTable is the table name for the Exam_Applications_GDSPM entity.
	// It exists in this package in order to avoid circular dependency with the "exam_applications_gdspm" package.
	ExamCentresRefGDSPMInverseTable = "Exam_Applications_GDSPM"
	// ExamCentresRefGDSPMColumn is the table column denoting the ExamCentresRefGDSPM relation/edge.
	ExamCentresRefGDSPMColumn = "center_code"
	// ExamscentresTable is the table that holds the Examscentres relation/edge.
	ExamscentresTable = "ExamCityCenter"
	// ExamscentresInverseTable is the table name for the ExamCityCenter entity.
	// It exists in this package in order to avoid circular dependency with the "examcitycenter" package.
	ExamscentresInverseTable = "ExamCityCenter"
	// ExamscentresColumn is the table column denoting the Examscentres relation/edge.
	ExamscentresColumn = "center_examscentres"
	// ExamCentresRefMTSPMMGTable is the table that holds the ExamCentresRefMTSPMMG relation/edge.
	ExamCentresRefMTSPMMGTable = "Exam_Application_MTSPMMG"
	// ExamCentresRefMTSPMMGInverseTable is the table name for the Exam_Application_MTSPMMG entity.
	// It exists in this package in order to avoid circular dependency with the "exam_application_mtspmmg" package.
	ExamCentresRefMTSPMMGInverseTable = "Exam_Application_MTSPMMG"
	// ExamCentresRefMTSPMMGColumn is the table column denoting the ExamCentresRefMTSPMMG relation/edge.
	ExamCentresRefMTSPMMGColumn = "center_code"
	// ExaCenterHallRefTable is the table that holds the ExaCenterHallRef relation/edge.
	ExaCenterHallRefTable = "ExamCenterHall"
	// ExaCenterHallRefInverseTable is the table name for the ExamCenterHall entity.
	// It exists in this package in order to avoid circular dependency with the "examcenterhall" package.
	ExaCenterHallRefInverseTable = "ExamCenterHall"
	// ExaCenterHallRefColumn is the table column denoting the ExaCenterHallRef relation/edge.
	ExaCenterHallRefColumn = "center_code"
	// CentresipTable is the table that holds the centresip relation/edge.
	CentresipTable = "Center"
	// CentresipInverseTable is the table name for the Exam entity.
	// It exists in this package in order to avoid circular dependency with the "exam" package.
	CentresipInverseTable = "Exam"
	// CentresipColumn is the table column denoting the centresip relation/edge.
	CentresipColumn = "exam_code"
	// LogDataTable is the table that holds the LogData relation/edge.
	LogDataTable = "LogsTable"
	// LogDataInverseTable is the table name for the Logs entity.
	// It exists in this package in order to avoid circular dependency with the "logs" package.
	LogDataInverseTable = "LogsTable"
	// LogDataColumn is the table column denoting the LogData relation/edge.
	LogDataColumn = "center_log_data"
)

// Columns holds all SQL columns for center fields.
var Columns = []string{
	FieldID,
	FieldCityID,
	FieldNodalOfficerCode,
	FieldExamCenterName,
	FieldExamCode,
	FieldRegionID,
	FieldCircleID,
	FieldDivisionID,
	FieldFacilityID,
	FieldExamNameCode,
	FieldExamName,
	FieldNAUserName,
	FieldNodalOfficeFacilityId,
	FieldAdminCircleOfficeID,
	FieldAddress,
	FieldLandmark,
	FieldCenterCityName,
	FieldPincode,
	FieldMaxSeats,
	FieldNoAlloted,
	FieldPendingSeats,
	FieldStatus,
	FieldExamYear,
	FieldConductedBy,
	FieldConductedByFacilityID,
	FieldUpdatedAt,
	FieldUpdatedBy,
	FieldPapers,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "Center"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"exam_papers_centers",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCityID holds the default value on creation for the "CityID" field.
	DefaultCityID int32
	// DefaultNodalOfficerCode holds the default value on creation for the "NodalOfficerCode" field.
	DefaultNodalOfficerCode int32
	// DefaultExamCode holds the default value on creation for the "ExamCode" field.
	DefaultExamCode int32
	// DefaultRegionID holds the default value on creation for the "RegionID" field.
	DefaultRegionID int32
	// DefaultCircleID holds the default value on creation for the "CircleID" field.
	DefaultCircleID int32
	// DefaultDivisionID holds the default value on creation for the "DivisionID" field.
	DefaultDivisionID int32
	// DefaultFacilityID holds the default value on creation for the "FacilityID" field.
	DefaultFacilityID int32
	// DefaultPincode holds the default value on creation for the "Pincode" field.
	DefaultPincode int32
	// DefaultMaxSeats holds the default value on creation for the "MaxSeats" field.
	DefaultMaxSeats int32
	// DefaultNoAlloted holds the default value on creation for the "NoAlloted" field.
	DefaultNoAlloted int32
	// DefaultPendingSeats holds the default value on creation for the "PendingSeats" field.
	DefaultPendingSeats int32
)

// OrderOption defines the ordering options for the Center queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCityID orders the results by the CityID field.
func ByCityID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCityID, opts...).ToFunc()
}

// ByNodalOfficerCode orders the results by the NodalOfficerCode field.
func ByNodalOfficerCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNodalOfficerCode, opts...).ToFunc()
}

// ByExamCenterName orders the results by the ExamCenterName field.
func ByExamCenterName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExamCenterName, opts...).ToFunc()
}

// ByExamCode orders the results by the ExamCode field.
func ByExamCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExamCode, opts...).ToFunc()
}

// ByRegionID orders the results by the RegionID field.
func ByRegionID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRegionID, opts...).ToFunc()
}

// ByCircleID orders the results by the CircleID field.
func ByCircleID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCircleID, opts...).ToFunc()
}

// ByDivisionID orders the results by the DivisionID field.
func ByDivisionID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDivisionID, opts...).ToFunc()
}

// ByFacilityID orders the results by the FacilityID field.
func ByFacilityID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFacilityID, opts...).ToFunc()
}

// ByExamNameCode orders the results by the ExamNameCode field.
func ByExamNameCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExamNameCode, opts...).ToFunc()
}

// ByExamName orders the results by the ExamName field.
func ByExamName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExamName, opts...).ToFunc()
}

// ByNAUserName orders the results by the NAUserName field.
func ByNAUserName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNAUserName, opts...).ToFunc()
}

// ByNodalOfficeFacilityId orders the results by the NodalOfficeFacilityId field.
func ByNodalOfficeFacilityId(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNodalOfficeFacilityId, opts...).ToFunc()
}

// ByAdminCircleOfficeID orders the results by the AdminCircleOfficeID field.
func ByAdminCircleOfficeID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAdminCircleOfficeID, opts...).ToFunc()
}

// ByAddress orders the results by the Address field.
func ByAddress(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAddress, opts...).ToFunc()
}

// ByLandmark orders the results by the Landmark field.
func ByLandmark(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLandmark, opts...).ToFunc()
}

// ByCenterCityName orders the results by the CenterCityName field.
func ByCenterCityName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCenterCityName, opts...).ToFunc()
}

// ByPincode orders the results by the Pincode field.
func ByPincode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPincode, opts...).ToFunc()
}

// ByMaxSeats orders the results by the MaxSeats field.
func ByMaxSeats(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMaxSeats, opts...).ToFunc()
}

// ByNoAlloted orders the results by the NoAlloted field.
func ByNoAlloted(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNoAlloted, opts...).ToFunc()
}

// ByPendingSeats orders the results by the PendingSeats field.
func ByPendingSeats(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPendingSeats, opts...).ToFunc()
}

// ByStatus orders the results by the Status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByExamYear orders the results by the ExamYear field.
func ByExamYear(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExamYear, opts...).ToFunc()
}

// ByConductedBy orders the results by the ConductedBy field.
func ByConductedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldConductedBy, opts...).ToFunc()
}

// ByConductedByFacilityID orders the results by the ConductedByFacilityID field.
func ByConductedByFacilityID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldConductedByFacilityID, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the UpdatedAt field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByUpdatedBy orders the results by the UpdatedBy field.
func ByUpdatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedBy, opts...).ToFunc()
}

// ByApplicationsCount orders the results by applications count.
func ByApplicationsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newApplicationsStep(), opts...)
	}
}

// ByApplications orders the results by applications terms.
func ByApplications(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newApplicationsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByExamCentresRefCount orders the results by ExamCentresRef count.
func ByExamCentresRefCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newExamCentresRefStep(), opts...)
	}
}

// ByExamCentresRef orders the results by ExamCentresRef terms.
func ByExamCentresRef(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newExamCentresRefStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByExamCentresRefPSCount orders the results by ExamCentresRefPS count.
func ByExamCentresRefPSCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newExamCentresRefPSStep(), opts...)
	}
}

// ByExamCentresRefPS orders the results by ExamCentresRefPS terms.
func ByExamCentresRefPS(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newExamCentresRefPSStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByExamCentresRefGDSPACount orders the results by ExamCentresRefGDSPA count.
func ByExamCentresRefGDSPACount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newExamCentresRefGDSPAStep(), opts...)
	}
}

// ByExamCentresRefGDSPA orders the results by ExamCentresRefGDSPA terms.
func ByExamCentresRefGDSPA(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newExamCentresRefGDSPAStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByExamCentresRefPMPACount orders the results by ExamCentresRefPMPA count.
func ByExamCentresRefPMPACount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newExamCentresRefPMPAStep(), opts...)
	}
}

// ByExamCentresRefPMPA orders the results by ExamCentresRefPMPA terms.
func ByExamCentresRefPMPA(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newExamCentresRefPMPAStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByExamCentresRefGDSPMCount orders the results by ExamCentresRefGDSPM count.
func ByExamCentresRefGDSPMCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newExamCentresRefGDSPMStep(), opts...)
	}
}

// ByExamCentresRefGDSPM orders the results by ExamCentresRefGDSPM terms.
func ByExamCentresRefGDSPM(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newExamCentresRefGDSPMStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByExamscentresCount orders the results by Examscentres count.
func ByExamscentresCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newExamscentresStep(), opts...)
	}
}

// ByExamscentres orders the results by Examscentres terms.
func ByExamscentres(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newExamscentresStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByExamCentresRefMTSPMMGCount orders the results by ExamCentresRefMTSPMMG count.
func ByExamCentresRefMTSPMMGCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newExamCentresRefMTSPMMGStep(), opts...)
	}
}

// ByExamCentresRefMTSPMMG orders the results by ExamCentresRefMTSPMMG terms.
func ByExamCentresRefMTSPMMG(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newExamCentresRefMTSPMMGStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByExaCenterHallRefCount orders the results by ExaCenterHallRef count.
func ByExaCenterHallRefCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newExaCenterHallRefStep(), opts...)
	}
}

// ByExaCenterHallRef orders the results by ExaCenterHallRef terms.
func ByExaCenterHallRef(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newExaCenterHallRefStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByCentresipField orders the results by centresip field.
func ByCentresipField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCentresipStep(), sql.OrderByField(field, opts...))
	}
}

// ByLogDataCount orders the results by LogData count.
func ByLogDataCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newLogDataStep(), opts...)
	}
}

// ByLogData orders the results by LogData terms.
func ByLogData(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newLogDataStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newApplicationsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ApplicationsInverseTable, ApplicationFieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ApplicationsTable, ApplicationsColumn),
	)
}
func newExamCentresRefStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ExamCentresRefInverseTable, Exam_Applications_IPFieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ExamCentresRefTable, ExamCentresRefColumn),
	)
}
func newExamCentresRefPSStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ExamCentresRefPSInverseTable, Exam_Applications_PSFieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ExamCentresRefPSTable, ExamCentresRefPSColumn),
	)
}
func newExamCentresRefGDSPAStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ExamCentresRefGDSPAInverseTable, Exam_Applications_GDSPAFieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ExamCentresRefGDSPATable, ExamCentresRefGDSPAColumn),
	)
}
func newExamCentresRefPMPAStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ExamCentresRefPMPAInverseTable, Exam_Applications_PMPAFieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ExamCentresRefPMPATable, ExamCentresRefPMPAColumn),
	)
}
func newExamCentresRefGDSPMStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ExamCentresRefGDSPMInverseTable, Exam_Applications_GDSPMFieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ExamCentresRefGDSPMTable, ExamCentresRefGDSPMColumn),
	)
}
func newExamscentresStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ExamscentresInverseTable, ExamCityCenterFieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ExamscentresTable, ExamscentresColumn),
	)
}
func newExamCentresRefMTSPMMGStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ExamCentresRefMTSPMMGInverseTable, Exam_Application_MTSPMMGFieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ExamCentresRefMTSPMMGTable, ExamCentresRefMTSPMMGColumn),
	)
}
func newExaCenterHallRefStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ExaCenterHallRefInverseTable, ExamCenterHallFieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ExaCenterHallRefTable, ExaCenterHallRefColumn),
	)
}
func newCentresipStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CentresipInverseTable, ExamFieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, CentresipTable, CentresipColumn),
	)
}
func newLogDataStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(LogDataInverseTable, LogsFieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, LogDataTable, LogDataColumn),
	)
}
