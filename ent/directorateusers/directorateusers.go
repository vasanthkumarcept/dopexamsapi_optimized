// Code generated by ent, DO NOT EDIT.

package directorateusers

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the directorateusers type in the database.
	Label = "directorate_users"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "RoleUserCode"
	// FieldRole holds the string denoting the role field in the database.
	FieldRole = "role"
	// FieldEmployeedID holds the string denoting the employeedid field in the database.
	FieldEmployeedID = "employeed_id"
	// FieldEmployeeName holds the string denoting the employeename field in the database.
	FieldEmployeeName = "employee_name"
	// FieldEmailId holds the string denoting the emailid field in the database.
	FieldEmailId = "email_id"
	// FieldMobileNumber holds the string denoting the mobilenumber field in the database.
	FieldMobileNumber = "mobile_number"
	// FieldSequenceNumber holds the string denoting the sequencenumber field in the database.
	FieldSequenceNumber = "sequence_number"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// EdgeEmployeeUser holds the string denoting the employee_user edge name in mutations.
	EdgeEmployeeUser = "employee_user"
	// EmployeesFieldID holds the string denoting the ID field of the Employees.
	EmployeesFieldID = "RegistrationID"
	// Table holds the table name of the directorateusers in the database.
	Table = "DirectorateUsers"
	// EmployeeUserTable is the table that holds the employee_user relation/edge.
	EmployeeUserTable = "Employees"
	// EmployeeUserInverseTable is the table name for the Employees entity.
	// It exists in this package in order to avoid circular dependency with the "employees" package.
	EmployeeUserInverseTable = "Employees"
	// EmployeeUserColumn is the table column denoting the employee_user relation/edge.
	EmployeeUserColumn = "directorate_users_employee_user"
)

// Columns holds all SQL columns for directorateusers fields.
var Columns = []string{
	FieldID,
	FieldRole,
	FieldEmployeedID,
	FieldEmployeeName,
	FieldEmailId,
	FieldMobileNumber,
	FieldSequenceNumber,
	FieldStatus,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultStatus holds the default value on creation for the "Status" field.
	DefaultStatus string
)

// OrderOption defines the ordering options for the DirectorateUsers queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByRole orders the results by the Role field.
func ByRole(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRole, opts...).ToFunc()
}

// ByEmployeedID orders the results by the EmployeedID field.
func ByEmployeedID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmployeedID, opts...).ToFunc()
}

// ByEmployeeName orders the results by the EmployeeName field.
func ByEmployeeName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmployeeName, opts...).ToFunc()
}

// ByEmailId orders the results by the EmailId field.
func ByEmailId(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmailId, opts...).ToFunc()
}

// ByMobileNumber orders the results by the MobileNumber field.
func ByMobileNumber(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMobileNumber, opts...).ToFunc()
}

// BySequenceNumber orders the results by the SequenceNumber field.
func BySequenceNumber(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSequenceNumber, opts...).ToFunc()
}

// ByStatus orders the results by the Status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByEmployeeUserCount orders the results by employee_user count.
func ByEmployeeUserCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newEmployeeUserStep(), opts...)
	}
}

// ByEmployeeUser orders the results by employee_user terms.
func ByEmployeeUser(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newEmployeeUserStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newEmployeeUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(EmployeeUserInverseTable, EmployeesFieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, EmployeeUserTable, EmployeeUserColumn),
	)
}
