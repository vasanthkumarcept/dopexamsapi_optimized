// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"recruit/ent/directorateusers"
	"recruit/ent/employees"
	"recruit/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// DirectorateUsersUpdate is the builder for updating DirectorateUsers entities.
type DirectorateUsersUpdate struct {
	config
	hooks    []Hook
	mutation *DirectorateUsersMutation
}

// Where appends a list predicates to the DirectorateUsersUpdate builder.
func (duu *DirectorateUsersUpdate) Where(ps ...predicate.DirectorateUsers) *DirectorateUsersUpdate {
	duu.mutation.Where(ps...)
	return duu
}

// SetRole sets the "Role" field.
func (duu *DirectorateUsersUpdate) SetRole(s string) *DirectorateUsersUpdate {
	duu.mutation.SetRole(s)
	return duu
}

// SetEmployeedID sets the "EmployeedID" field.
func (duu *DirectorateUsersUpdate) SetEmployeedID(i int32) *DirectorateUsersUpdate {
	duu.mutation.ResetEmployeedID()
	duu.mutation.SetEmployeedID(i)
	return duu
}

// AddEmployeedID adds i to the "EmployeedID" field.
func (duu *DirectorateUsersUpdate) AddEmployeedID(i int32) *DirectorateUsersUpdate {
	duu.mutation.AddEmployeedID(i)
	return duu
}

// SetEmployeeName sets the "EmployeeName" field.
func (duu *DirectorateUsersUpdate) SetEmployeeName(s string) *DirectorateUsersUpdate {
	duu.mutation.SetEmployeeName(s)
	return duu
}

// SetEmailId sets the "EmailId" field.
func (duu *DirectorateUsersUpdate) SetEmailId(s string) *DirectorateUsersUpdate {
	duu.mutation.SetEmailId(s)
	return duu
}

// SetMobileNumber sets the "MobileNumber" field.
func (duu *DirectorateUsersUpdate) SetMobileNumber(i int64) *DirectorateUsersUpdate {
	duu.mutation.ResetMobileNumber()
	duu.mutation.SetMobileNumber(i)
	return duu
}

// AddMobileNumber adds i to the "MobileNumber" field.
func (duu *DirectorateUsersUpdate) AddMobileNumber(i int64) *DirectorateUsersUpdate {
	duu.mutation.AddMobileNumber(i)
	return duu
}

// SetSequenceNumber sets the "SequenceNumber" field.
func (duu *DirectorateUsersUpdate) SetSequenceNumber(i int32) *DirectorateUsersUpdate {
	duu.mutation.ResetSequenceNumber()
	duu.mutation.SetSequenceNumber(i)
	return duu
}

// SetNillableSequenceNumber sets the "SequenceNumber" field if the given value is not nil.
func (duu *DirectorateUsersUpdate) SetNillableSequenceNumber(i *int32) *DirectorateUsersUpdate {
	if i != nil {
		duu.SetSequenceNumber(*i)
	}
	return duu
}

// AddSequenceNumber adds i to the "SequenceNumber" field.
func (duu *DirectorateUsersUpdate) AddSequenceNumber(i int32) *DirectorateUsersUpdate {
	duu.mutation.AddSequenceNumber(i)
	return duu
}

// ClearSequenceNumber clears the value of the "SequenceNumber" field.
func (duu *DirectorateUsersUpdate) ClearSequenceNumber() *DirectorateUsersUpdate {
	duu.mutation.ClearSequenceNumber()
	return duu
}

// SetStatus sets the "Status" field.
func (duu *DirectorateUsersUpdate) SetStatus(s string) *DirectorateUsersUpdate {
	duu.mutation.SetStatus(s)
	return duu
}

// SetNillableStatus sets the "Status" field if the given value is not nil.
func (duu *DirectorateUsersUpdate) SetNillableStatus(s *string) *DirectorateUsersUpdate {
	if s != nil {
		duu.SetStatus(*s)
	}
	return duu
}

// ClearStatus clears the value of the "Status" field.
func (duu *DirectorateUsersUpdate) ClearStatus() *DirectorateUsersUpdate {
	duu.mutation.ClearStatus()
	return duu
}

// AddEmployeeUserIDs adds the "employee_user" edge to the Employees entity by IDs.
func (duu *DirectorateUsersUpdate) AddEmployeeUserIDs(ids ...int32) *DirectorateUsersUpdate {
	duu.mutation.AddEmployeeUserIDs(ids...)
	return duu
}

// AddEmployeeUser adds the "employee_user" edges to the Employees entity.
func (duu *DirectorateUsersUpdate) AddEmployeeUser(e ...*Employees) *DirectorateUsersUpdate {
	ids := make([]int32, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return duu.AddEmployeeUserIDs(ids...)
}

// Mutation returns the DirectorateUsersMutation object of the builder.
func (duu *DirectorateUsersUpdate) Mutation() *DirectorateUsersMutation {
	return duu.mutation
}

// ClearEmployeeUser clears all "employee_user" edges to the Employees entity.
func (duu *DirectorateUsersUpdate) ClearEmployeeUser() *DirectorateUsersUpdate {
	duu.mutation.ClearEmployeeUser()
	return duu
}

// RemoveEmployeeUserIDs removes the "employee_user" edge to Employees entities by IDs.
func (duu *DirectorateUsersUpdate) RemoveEmployeeUserIDs(ids ...int32) *DirectorateUsersUpdate {
	duu.mutation.RemoveEmployeeUserIDs(ids...)
	return duu
}

// RemoveEmployeeUser removes "employee_user" edges to Employees entities.
func (duu *DirectorateUsersUpdate) RemoveEmployeeUser(e ...*Employees) *DirectorateUsersUpdate {
	ids := make([]int32, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return duu.RemoveEmployeeUserIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (duu *DirectorateUsersUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, duu.sqlSave, duu.mutation, duu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (duu *DirectorateUsersUpdate) SaveX(ctx context.Context) int {
	affected, err := duu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (duu *DirectorateUsersUpdate) Exec(ctx context.Context) error {
	_, err := duu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (duu *DirectorateUsersUpdate) ExecX(ctx context.Context) {
	if err := duu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (duu *DirectorateUsersUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(directorateusers.Table, directorateusers.Columns, sqlgraph.NewFieldSpec(directorateusers.FieldID, field.TypeInt32))
	if ps := duu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := duu.mutation.Role(); ok {
		_spec.SetField(directorateusers.FieldRole, field.TypeString, value)
	}
	if value, ok := duu.mutation.EmployeedID(); ok {
		_spec.SetField(directorateusers.FieldEmployeedID, field.TypeInt32, value)
	}
	if value, ok := duu.mutation.AddedEmployeedID(); ok {
		_spec.AddField(directorateusers.FieldEmployeedID, field.TypeInt32, value)
	}
	if value, ok := duu.mutation.EmployeeName(); ok {
		_spec.SetField(directorateusers.FieldEmployeeName, field.TypeString, value)
	}
	if value, ok := duu.mutation.EmailId(); ok {
		_spec.SetField(directorateusers.FieldEmailId, field.TypeString, value)
	}
	if value, ok := duu.mutation.MobileNumber(); ok {
		_spec.SetField(directorateusers.FieldMobileNumber, field.TypeInt64, value)
	}
	if value, ok := duu.mutation.AddedMobileNumber(); ok {
		_spec.AddField(directorateusers.FieldMobileNumber, field.TypeInt64, value)
	}
	if value, ok := duu.mutation.SequenceNumber(); ok {
		_spec.SetField(directorateusers.FieldSequenceNumber, field.TypeInt32, value)
	}
	if value, ok := duu.mutation.AddedSequenceNumber(); ok {
		_spec.AddField(directorateusers.FieldSequenceNumber, field.TypeInt32, value)
	}
	if duu.mutation.SequenceNumberCleared() {
		_spec.ClearField(directorateusers.FieldSequenceNumber, field.TypeInt32)
	}
	if value, ok := duu.mutation.Status(); ok {
		_spec.SetField(directorateusers.FieldStatus, field.TypeString, value)
	}
	if duu.mutation.StatusCleared() {
		_spec.ClearField(directorateusers.FieldStatus, field.TypeString)
	}
	if duu.mutation.EmployeeUserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   directorateusers.EmployeeUserTable,
			Columns: []string{directorateusers.EmployeeUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employees.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duu.mutation.RemovedEmployeeUserIDs(); len(nodes) > 0 && !duu.mutation.EmployeeUserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   directorateusers.EmployeeUserTable,
			Columns: []string{directorateusers.EmployeeUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employees.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duu.mutation.EmployeeUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   directorateusers.EmployeeUserTable,
			Columns: []string{directorateusers.EmployeeUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employees.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, duu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{directorateusers.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	duu.mutation.done = true
	return n, nil
}

// DirectorateUsersUpdateOne is the builder for updating a single DirectorateUsers entity.
type DirectorateUsersUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DirectorateUsersMutation
}

// SetRole sets the "Role" field.
func (duuo *DirectorateUsersUpdateOne) SetRole(s string) *DirectorateUsersUpdateOne {
	duuo.mutation.SetRole(s)
	return duuo
}

// SetEmployeedID sets the "EmployeedID" field.
func (duuo *DirectorateUsersUpdateOne) SetEmployeedID(i int32) *DirectorateUsersUpdateOne {
	duuo.mutation.ResetEmployeedID()
	duuo.mutation.SetEmployeedID(i)
	return duuo
}

// AddEmployeedID adds i to the "EmployeedID" field.
func (duuo *DirectorateUsersUpdateOne) AddEmployeedID(i int32) *DirectorateUsersUpdateOne {
	duuo.mutation.AddEmployeedID(i)
	return duuo
}

// SetEmployeeName sets the "EmployeeName" field.
func (duuo *DirectorateUsersUpdateOne) SetEmployeeName(s string) *DirectorateUsersUpdateOne {
	duuo.mutation.SetEmployeeName(s)
	return duuo
}

// SetEmailId sets the "EmailId" field.
func (duuo *DirectorateUsersUpdateOne) SetEmailId(s string) *DirectorateUsersUpdateOne {
	duuo.mutation.SetEmailId(s)
	return duuo
}

// SetMobileNumber sets the "MobileNumber" field.
func (duuo *DirectorateUsersUpdateOne) SetMobileNumber(i int64) *DirectorateUsersUpdateOne {
	duuo.mutation.ResetMobileNumber()
	duuo.mutation.SetMobileNumber(i)
	return duuo
}

// AddMobileNumber adds i to the "MobileNumber" field.
func (duuo *DirectorateUsersUpdateOne) AddMobileNumber(i int64) *DirectorateUsersUpdateOne {
	duuo.mutation.AddMobileNumber(i)
	return duuo
}

// SetSequenceNumber sets the "SequenceNumber" field.
func (duuo *DirectorateUsersUpdateOne) SetSequenceNumber(i int32) *DirectorateUsersUpdateOne {
	duuo.mutation.ResetSequenceNumber()
	duuo.mutation.SetSequenceNumber(i)
	return duuo
}

// SetNillableSequenceNumber sets the "SequenceNumber" field if the given value is not nil.
func (duuo *DirectorateUsersUpdateOne) SetNillableSequenceNumber(i *int32) *DirectorateUsersUpdateOne {
	if i != nil {
		duuo.SetSequenceNumber(*i)
	}
	return duuo
}

// AddSequenceNumber adds i to the "SequenceNumber" field.
func (duuo *DirectorateUsersUpdateOne) AddSequenceNumber(i int32) *DirectorateUsersUpdateOne {
	duuo.mutation.AddSequenceNumber(i)
	return duuo
}

// ClearSequenceNumber clears the value of the "SequenceNumber" field.
func (duuo *DirectorateUsersUpdateOne) ClearSequenceNumber() *DirectorateUsersUpdateOne {
	duuo.mutation.ClearSequenceNumber()
	return duuo
}

// SetStatus sets the "Status" field.
func (duuo *DirectorateUsersUpdateOne) SetStatus(s string) *DirectorateUsersUpdateOne {
	duuo.mutation.SetStatus(s)
	return duuo
}

// SetNillableStatus sets the "Status" field if the given value is not nil.
func (duuo *DirectorateUsersUpdateOne) SetNillableStatus(s *string) *DirectorateUsersUpdateOne {
	if s != nil {
		duuo.SetStatus(*s)
	}
	return duuo
}

// ClearStatus clears the value of the "Status" field.
func (duuo *DirectorateUsersUpdateOne) ClearStatus() *DirectorateUsersUpdateOne {
	duuo.mutation.ClearStatus()
	return duuo
}

// AddEmployeeUserIDs adds the "employee_user" edge to the Employees entity by IDs.
func (duuo *DirectorateUsersUpdateOne) AddEmployeeUserIDs(ids ...int32) *DirectorateUsersUpdateOne {
	duuo.mutation.AddEmployeeUserIDs(ids...)
	return duuo
}

// AddEmployeeUser adds the "employee_user" edges to the Employees entity.
func (duuo *DirectorateUsersUpdateOne) AddEmployeeUser(e ...*Employees) *DirectorateUsersUpdateOne {
	ids := make([]int32, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return duuo.AddEmployeeUserIDs(ids...)
}

// Mutation returns the DirectorateUsersMutation object of the builder.
func (duuo *DirectorateUsersUpdateOne) Mutation() *DirectorateUsersMutation {
	return duuo.mutation
}

// ClearEmployeeUser clears all "employee_user" edges to the Employees entity.
func (duuo *DirectorateUsersUpdateOne) ClearEmployeeUser() *DirectorateUsersUpdateOne {
	duuo.mutation.ClearEmployeeUser()
	return duuo
}

// RemoveEmployeeUserIDs removes the "employee_user" edge to Employees entities by IDs.
func (duuo *DirectorateUsersUpdateOne) RemoveEmployeeUserIDs(ids ...int32) *DirectorateUsersUpdateOne {
	duuo.mutation.RemoveEmployeeUserIDs(ids...)
	return duuo
}

// RemoveEmployeeUser removes "employee_user" edges to Employees entities.
func (duuo *DirectorateUsersUpdateOne) RemoveEmployeeUser(e ...*Employees) *DirectorateUsersUpdateOne {
	ids := make([]int32, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return duuo.RemoveEmployeeUserIDs(ids...)
}

// Where appends a list predicates to the DirectorateUsersUpdate builder.
func (duuo *DirectorateUsersUpdateOne) Where(ps ...predicate.DirectorateUsers) *DirectorateUsersUpdateOne {
	duuo.mutation.Where(ps...)
	return duuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (duuo *DirectorateUsersUpdateOne) Select(field string, fields ...string) *DirectorateUsersUpdateOne {
	duuo.fields = append([]string{field}, fields...)
	return duuo
}

// Save executes the query and returns the updated DirectorateUsers entity.
func (duuo *DirectorateUsersUpdateOne) Save(ctx context.Context) (*DirectorateUsers, error) {
	return withHooks(ctx, duuo.sqlSave, duuo.mutation, duuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (duuo *DirectorateUsersUpdateOne) SaveX(ctx context.Context) *DirectorateUsers {
	node, err := duuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (duuo *DirectorateUsersUpdateOne) Exec(ctx context.Context) error {
	_, err := duuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (duuo *DirectorateUsersUpdateOne) ExecX(ctx context.Context) {
	if err := duuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (duuo *DirectorateUsersUpdateOne) sqlSave(ctx context.Context) (_node *DirectorateUsers, err error) {
	_spec := sqlgraph.NewUpdateSpec(directorateusers.Table, directorateusers.Columns, sqlgraph.NewFieldSpec(directorateusers.FieldID, field.TypeInt32))
	id, ok := duuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "DirectorateUsers.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := duuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, directorateusers.FieldID)
		for _, f := range fields {
			if !directorateusers.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != directorateusers.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := duuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := duuo.mutation.Role(); ok {
		_spec.SetField(directorateusers.FieldRole, field.TypeString, value)
	}
	if value, ok := duuo.mutation.EmployeedID(); ok {
		_spec.SetField(directorateusers.FieldEmployeedID, field.TypeInt32, value)
	}
	if value, ok := duuo.mutation.AddedEmployeedID(); ok {
		_spec.AddField(directorateusers.FieldEmployeedID, field.TypeInt32, value)
	}
	if value, ok := duuo.mutation.EmployeeName(); ok {
		_spec.SetField(directorateusers.FieldEmployeeName, field.TypeString, value)
	}
	if value, ok := duuo.mutation.EmailId(); ok {
		_spec.SetField(directorateusers.FieldEmailId, field.TypeString, value)
	}
	if value, ok := duuo.mutation.MobileNumber(); ok {
		_spec.SetField(directorateusers.FieldMobileNumber, field.TypeInt64, value)
	}
	if value, ok := duuo.mutation.AddedMobileNumber(); ok {
		_spec.AddField(directorateusers.FieldMobileNumber, field.TypeInt64, value)
	}
	if value, ok := duuo.mutation.SequenceNumber(); ok {
		_spec.SetField(directorateusers.FieldSequenceNumber, field.TypeInt32, value)
	}
	if value, ok := duuo.mutation.AddedSequenceNumber(); ok {
		_spec.AddField(directorateusers.FieldSequenceNumber, field.TypeInt32, value)
	}
	if duuo.mutation.SequenceNumberCleared() {
		_spec.ClearField(directorateusers.FieldSequenceNumber, field.TypeInt32)
	}
	if value, ok := duuo.mutation.Status(); ok {
		_spec.SetField(directorateusers.FieldStatus, field.TypeString, value)
	}
	if duuo.mutation.StatusCleared() {
		_spec.ClearField(directorateusers.FieldStatus, field.TypeString)
	}
	if duuo.mutation.EmployeeUserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   directorateusers.EmployeeUserTable,
			Columns: []string{directorateusers.EmployeeUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employees.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duuo.mutation.RemovedEmployeeUserIDs(); len(nodes) > 0 && !duuo.mutation.EmployeeUserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   directorateusers.EmployeeUserTable,
			Columns: []string{directorateusers.EmployeeUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employees.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duuo.mutation.EmployeeUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   directorateusers.EmployeeUserTable,
			Columns: []string{directorateusers.EmployeeUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employees.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &DirectorateUsers{config: duuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, duuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{directorateusers.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	duuo.mutation.done = true
	return _node, nil
}
