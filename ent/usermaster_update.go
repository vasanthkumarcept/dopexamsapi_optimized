// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"recruit/ent/employeemaster"
	"recruit/ent/exam_applications_gdspa"
	"recruit/ent/exam_applications_gdspm"
	"recruit/ent/exam_applications_ip"
	"recruit/ent/exam_applications_pmpa"
	"recruit/ent/exam_applications_ps"
	"recruit/ent/examnotifications"
	"recruit/ent/logs"
	"recruit/ent/predicate"
	"recruit/ent/rolemaster"
	"recruit/ent/usermaster"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserMasterUpdate is the builder for updating UserMaster entities.
type UserMasterUpdate struct {
	config
	hooks    []Hook
	mutation *UserMasterMutation
}

// Where appends a list predicates to the UserMasterUpdate builder.
func (umu *UserMasterUpdate) Where(ps ...predicate.UserMaster) *UserMasterUpdate {
	umu.mutation.Where(ps...)
	return umu
}

// SetEmployeeID sets the "EmployeeID" field.
func (umu *UserMasterUpdate) SetEmployeeID(i int64) *UserMasterUpdate {
	umu.mutation.ResetEmployeeID()
	umu.mutation.SetEmployeeID(i)
	return umu
}

// SetNillableEmployeeID sets the "EmployeeID" field if the given value is not nil.
func (umu *UserMasterUpdate) SetNillableEmployeeID(i *int64) *UserMasterUpdate {
	if i != nil {
		umu.SetEmployeeID(*i)
	}
	return umu
}

// AddEmployeeID adds i to the "EmployeeID" field.
func (umu *UserMasterUpdate) AddEmployeeID(i int64) *UserMasterUpdate {
	umu.mutation.AddEmployeeID(i)
	return umu
}

// ClearEmployeeID clears the value of the "EmployeeID" field.
func (umu *UserMasterUpdate) ClearEmployeeID() *UserMasterUpdate {
	umu.mutation.ClearEmployeeID()
	return umu
}

// SetEmployeeName sets the "EmployeeName" field.
func (umu *UserMasterUpdate) SetEmployeeName(s string) *UserMasterUpdate {
	umu.mutation.SetEmployeeName(s)
	return umu
}

// SetNillableEmployeeName sets the "EmployeeName" field if the given value is not nil.
func (umu *UserMasterUpdate) SetNillableEmployeeName(s *string) *UserMasterUpdate {
	if s != nil {
		umu.SetEmployeeName(*s)
	}
	return umu
}

// ClearEmployeeName clears the value of the "EmployeeName" field.
func (umu *UserMasterUpdate) ClearEmployeeName() *UserMasterUpdate {
	umu.mutation.ClearEmployeeName()
	return umu
}

// SetMobile sets the "Mobile" field.
func (umu *UserMasterUpdate) SetMobile(s string) *UserMasterUpdate {
	umu.mutation.SetMobile(s)
	return umu
}

// SetNillableMobile sets the "Mobile" field if the given value is not nil.
func (umu *UserMasterUpdate) SetNillableMobile(s *string) *UserMasterUpdate {
	if s != nil {
		umu.SetMobile(*s)
	}
	return umu
}

// ClearMobile clears the value of the "Mobile" field.
func (umu *UserMasterUpdate) ClearMobile() *UserMasterUpdate {
	umu.mutation.ClearMobile()
	return umu
}

// SetEmailID sets the "EmailID" field.
func (umu *UserMasterUpdate) SetEmailID(s string) *UserMasterUpdate {
	umu.mutation.SetEmailID(s)
	return umu
}

// SetNillableEmailID sets the "EmailID" field if the given value is not nil.
func (umu *UserMasterUpdate) SetNillableEmailID(s *string) *UserMasterUpdate {
	if s != nil {
		umu.SetEmailID(*s)
	}
	return umu
}

// ClearEmailID clears the value of the "EmailID" field.
func (umu *UserMasterUpdate) ClearEmailID() *UserMasterUpdate {
	umu.mutation.ClearEmailID()
	return umu
}

// SetUserName sets the "UserName" field.
func (umu *UserMasterUpdate) SetUserName(s string) *UserMasterUpdate {
	umu.mutation.SetUserName(s)
	return umu
}

// SetNillableUserName sets the "UserName" field if the given value is not nil.
func (umu *UserMasterUpdate) SetNillableUserName(s *string) *UserMasterUpdate {
	if s != nil {
		umu.SetUserName(*s)
	}
	return umu
}

// ClearUserName clears the value of the "UserName" field.
func (umu *UserMasterUpdate) ClearUserName() *UserMasterUpdate {
	umu.mutation.ClearUserName()
	return umu
}

// SetPassword sets the "Password" field.
func (umu *UserMasterUpdate) SetPassword(s string) *UserMasterUpdate {
	umu.mutation.SetPassword(s)
	return umu
}

// SetNillablePassword sets the "Password" field if the given value is not nil.
func (umu *UserMasterUpdate) SetNillablePassword(s *string) *UserMasterUpdate {
	if s != nil {
		umu.SetPassword(*s)
	}
	return umu
}

// ClearPassword clears the value of the "Password" field.
func (umu *UserMasterUpdate) ClearPassword() *UserMasterUpdate {
	umu.mutation.ClearPassword()
	return umu
}

// SetStatus sets the "Status" field.
func (umu *UserMasterUpdate) SetStatus(b bool) *UserMasterUpdate {
	umu.mutation.SetStatus(b)
	return umu
}

// SetNillableStatus sets the "Status" field if the given value is not nil.
func (umu *UserMasterUpdate) SetNillableStatus(b *bool) *UserMasterUpdate {
	if b != nil {
		umu.SetStatus(*b)
	}
	return umu
}

// ClearStatus clears the value of the "Status" field.
func (umu *UserMasterUpdate) ClearStatus() *UserMasterUpdate {
	umu.mutation.ClearStatus()
	return umu
}

// SetStatuss sets the "Statuss" field.
func (umu *UserMasterUpdate) SetStatuss(s string) *UserMasterUpdate {
	umu.mutation.SetStatuss(s)
	return umu
}

// SetNillableStatuss sets the "Statuss" field if the given value is not nil.
func (umu *UserMasterUpdate) SetNillableStatuss(s *string) *UserMasterUpdate {
	if s != nil {
		umu.SetStatuss(*s)
	}
	return umu
}

// ClearStatuss clears the value of the "Statuss" field.
func (umu *UserMasterUpdate) ClearStatuss() *UserMasterUpdate {
	umu.mutation.ClearStatuss()
	return umu
}

// SetOTP sets the "OTP" field.
func (umu *UserMasterUpdate) SetOTP(i int32) *UserMasterUpdate {
	umu.mutation.ResetOTP()
	umu.mutation.SetOTP(i)
	return umu
}

// SetNillableOTP sets the "OTP" field if the given value is not nil.
func (umu *UserMasterUpdate) SetNillableOTP(i *int32) *UserMasterUpdate {
	if i != nil {
		umu.SetOTP(*i)
	}
	return umu
}

// AddOTP adds i to the "OTP" field.
func (umu *UserMasterUpdate) AddOTP(i int32) *UserMasterUpdate {
	umu.mutation.AddOTP(i)
	return umu
}

// ClearOTP clears the value of the "OTP" field.
func (umu *UserMasterUpdate) ClearOTP() *UserMasterUpdate {
	umu.mutation.ClearOTP()
	return umu
}

// SetOTPNew sets the "OTPNew" field.
func (umu *UserMasterUpdate) SetOTPNew(i int32) *UserMasterUpdate {
	umu.mutation.ResetOTPNew()
	umu.mutation.SetOTPNew(i)
	return umu
}

// SetNillableOTPNew sets the "OTPNew" field if the given value is not nil.
func (umu *UserMasterUpdate) SetNillableOTPNew(i *int32) *UserMasterUpdate {
	if i != nil {
		umu.SetOTPNew(*i)
	}
	return umu
}

// AddOTPNew adds i to the "OTPNew" field.
func (umu *UserMasterUpdate) AddOTPNew(i int32) *UserMasterUpdate {
	umu.mutation.AddOTPNew(i)
	return umu
}

// ClearOTPNew clears the value of the "OTPNew" field.
func (umu *UserMasterUpdate) ClearOTPNew() *UserMasterUpdate {
	umu.mutation.ClearOTPNew()
	return umu
}

// SetEmailOTPNew sets the "EmailOTPNew" field.
func (umu *UserMasterUpdate) SetEmailOTPNew(i int32) *UserMasterUpdate {
	umu.mutation.ResetEmailOTPNew()
	umu.mutation.SetEmailOTPNew(i)
	return umu
}

// SetNillableEmailOTPNew sets the "EmailOTPNew" field if the given value is not nil.
func (umu *UserMasterUpdate) SetNillableEmailOTPNew(i *int32) *UserMasterUpdate {
	if i != nil {
		umu.SetEmailOTPNew(*i)
	}
	return umu
}

// AddEmailOTPNew adds i to the "EmailOTPNew" field.
func (umu *UserMasterUpdate) AddEmailOTPNew(i int32) *UserMasterUpdate {
	umu.mutation.AddEmailOTPNew(i)
	return umu
}

// ClearEmailOTPNew clears the value of the "EmailOTPNew" field.
func (umu *UserMasterUpdate) ClearEmailOTPNew() *UserMasterUpdate {
	umu.mutation.ClearEmailOTPNew()
	return umu
}

// SetOTPRemarks sets the "OTPRemarks" field.
func (umu *UserMasterUpdate) SetOTPRemarks(s string) *UserMasterUpdate {
	umu.mutation.SetOTPRemarks(s)
	return umu
}

// SetNillableOTPRemarks sets the "OTPRemarks" field if the given value is not nil.
func (umu *UserMasterUpdate) SetNillableOTPRemarks(s *string) *UserMasterUpdate {
	if s != nil {
		umu.SetOTPRemarks(*s)
	}
	return umu
}

// ClearOTPRemarks clears the value of the "OTPRemarks" field.
func (umu *UserMasterUpdate) ClearOTPRemarks() *UserMasterUpdate {
	umu.mutation.ClearOTPRemarks()
	return umu
}

// SetCreatedAt sets the "CreatedAt" field.
func (umu *UserMasterUpdate) SetCreatedAt(t time.Time) *UserMasterUpdate {
	umu.mutation.SetCreatedAt(t)
	return umu
}

// SetNillableCreatedAt sets the "CreatedAt" field if the given value is not nil.
func (umu *UserMasterUpdate) SetNillableCreatedAt(t *time.Time) *UserMasterUpdate {
	if t != nil {
		umu.SetCreatedAt(*t)
	}
	return umu
}

// ClearCreatedAt clears the value of the "CreatedAt" field.
func (umu *UserMasterUpdate) ClearCreatedAt() *UserMasterUpdate {
	umu.mutation.ClearCreatedAt()
	return umu
}

// SetOTPTriggeredTime sets the "OTPTriggeredTime" field.
func (umu *UserMasterUpdate) SetOTPTriggeredTime(t time.Time) *UserMasterUpdate {
	umu.mutation.SetOTPTriggeredTime(t)
	return umu
}

// SetNillableOTPTriggeredTime sets the "OTPTriggeredTime" field if the given value is not nil.
func (umu *UserMasterUpdate) SetNillableOTPTriggeredTime(t *time.Time) *UserMasterUpdate {
	if t != nil {
		umu.SetOTPTriggeredTime(*t)
	}
	return umu
}

// ClearOTPTriggeredTime clears the value of the "OTPTriggeredTime" field.
func (umu *UserMasterUpdate) ClearOTPTriggeredTime() *UserMasterUpdate {
	umu.mutation.ClearOTPTriggeredTime()
	return umu
}

// SetOTPSavedTime sets the "OTPSavedTime" field.
func (umu *UserMasterUpdate) SetOTPSavedTime(t time.Time) *UserMasterUpdate {
	umu.mutation.SetOTPSavedTime(t)
	return umu
}

// SetNillableOTPSavedTime sets the "OTPSavedTime" field if the given value is not nil.
func (umu *UserMasterUpdate) SetNillableOTPSavedTime(t *time.Time) *UserMasterUpdate {
	if t != nil {
		umu.SetOTPSavedTime(*t)
	}
	return umu
}

// ClearOTPSavedTime clears the value of the "OTPSavedTime" field.
func (umu *UserMasterUpdate) ClearOTPSavedTime() *UserMasterUpdate {
	umu.mutation.ClearOTPSavedTime()
	return umu
}

// SetOTPExpiryTime sets the "OTPExpiryTime" field.
func (umu *UserMasterUpdate) SetOTPExpiryTime(t time.Time) *UserMasterUpdate {
	umu.mutation.SetOTPExpiryTime(t)
	return umu
}

// SetNillableOTPExpiryTime sets the "OTPExpiryTime" field if the given value is not nil.
func (umu *UserMasterUpdate) SetNillableOTPExpiryTime(t *time.Time) *UserMasterUpdate {
	if t != nil {
		umu.SetOTPExpiryTime(*t)
	}
	return umu
}

// ClearOTPExpiryTime clears the value of the "OTPExpiryTime" field.
func (umu *UserMasterUpdate) ClearOTPExpiryTime() *UserMasterUpdate {
	umu.mutation.ClearOTPExpiryTime()
	return umu
}

// SetNewPasswordRequest sets the "NewPasswordRequest" field.
func (umu *UserMasterUpdate) SetNewPasswordRequest(b bool) *UserMasterUpdate {
	umu.mutation.SetNewPasswordRequest(b)
	return umu
}

// SetNillableNewPasswordRequest sets the "NewPasswordRequest" field if the given value is not nil.
func (umu *UserMasterUpdate) SetNillableNewPasswordRequest(b *bool) *UserMasterUpdate {
	if b != nil {
		umu.SetNewPasswordRequest(*b)
	}
	return umu
}

// ClearNewPasswordRequest clears the value of the "NewPasswordRequest" field.
func (umu *UserMasterUpdate) ClearNewPasswordRequest() *UserMasterUpdate {
	umu.mutation.ClearNewPasswordRequest()
	return umu
}

// SetEmailOTP sets the "EmailOTP" field.
func (umu *UserMasterUpdate) SetEmailOTP(i int32) *UserMasterUpdate {
	umu.mutation.ResetEmailOTP()
	umu.mutation.SetEmailOTP(i)
	return umu
}

// SetNillableEmailOTP sets the "EmailOTP" field if the given value is not nil.
func (umu *UserMasterUpdate) SetNillableEmailOTP(i *int32) *UserMasterUpdate {
	if i != nil {
		umu.SetEmailOTP(*i)
	}
	return umu
}

// AddEmailOTP adds i to the "EmailOTP" field.
func (umu *UserMasterUpdate) AddEmailOTP(i int32) *UserMasterUpdate {
	umu.mutation.AddEmailOTP(i)
	return umu
}

// ClearEmailOTP clears the value of the "EmailOTP" field.
func (umu *UserMasterUpdate) ClearEmailOTP() *UserMasterUpdate {
	umu.mutation.ClearEmailOTP()
	return umu
}

// SetEmailOTPRemarks sets the "EmailOTPRemarks" field.
func (umu *UserMasterUpdate) SetEmailOTPRemarks(s string) *UserMasterUpdate {
	umu.mutation.SetEmailOTPRemarks(s)
	return umu
}

// SetNillableEmailOTPRemarks sets the "EmailOTPRemarks" field if the given value is not nil.
func (umu *UserMasterUpdate) SetNillableEmailOTPRemarks(s *string) *UserMasterUpdate {
	if s != nil {
		umu.SetEmailOTPRemarks(*s)
	}
	return umu
}

// ClearEmailOTPRemarks clears the value of the "EmailOTPRemarks" field.
func (umu *UserMasterUpdate) ClearEmailOTPRemarks() *UserMasterUpdate {
	umu.mutation.ClearEmailOTPRemarks()
	return umu
}

// SetEmailCreatedAt sets the "EmailCreatedAt" field.
func (umu *UserMasterUpdate) SetEmailCreatedAt(t time.Time) *UserMasterUpdate {
	umu.mutation.SetEmailCreatedAt(t)
	return umu
}

// SetNillableEmailCreatedAt sets the "EmailCreatedAt" field if the given value is not nil.
func (umu *UserMasterUpdate) SetNillableEmailCreatedAt(t *time.Time) *UserMasterUpdate {
	if t != nil {
		umu.SetEmailCreatedAt(*t)
	}
	return umu
}

// ClearEmailCreatedAt clears the value of the "EmailCreatedAt" field.
func (umu *UserMasterUpdate) ClearEmailCreatedAt() *UserMasterUpdate {
	umu.mutation.ClearEmailCreatedAt()
	return umu
}

// SetEmailOTPTriggeredTime sets the "EmailOTPTriggeredTime" field.
func (umu *UserMasterUpdate) SetEmailOTPTriggeredTime(t time.Time) *UserMasterUpdate {
	umu.mutation.SetEmailOTPTriggeredTime(t)
	return umu
}

// SetNillableEmailOTPTriggeredTime sets the "EmailOTPTriggeredTime" field if the given value is not nil.
func (umu *UserMasterUpdate) SetNillableEmailOTPTriggeredTime(t *time.Time) *UserMasterUpdate {
	if t != nil {
		umu.SetEmailOTPTriggeredTime(*t)
	}
	return umu
}

// ClearEmailOTPTriggeredTime clears the value of the "EmailOTPTriggeredTime" field.
func (umu *UserMasterUpdate) ClearEmailOTPTriggeredTime() *UserMasterUpdate {
	umu.mutation.ClearEmailOTPTriggeredTime()
	return umu
}

// SetEmailOTPSavedTime sets the "EmailOTPSavedTime" field.
func (umu *UserMasterUpdate) SetEmailOTPSavedTime(t time.Time) *UserMasterUpdate {
	umu.mutation.SetEmailOTPSavedTime(t)
	return umu
}

// SetNillableEmailOTPSavedTime sets the "EmailOTPSavedTime" field if the given value is not nil.
func (umu *UserMasterUpdate) SetNillableEmailOTPSavedTime(t *time.Time) *UserMasterUpdate {
	if t != nil {
		umu.SetEmailOTPSavedTime(*t)
	}
	return umu
}

// ClearEmailOTPSavedTime clears the value of the "EmailOTPSavedTime" field.
func (umu *UserMasterUpdate) ClearEmailOTPSavedTime() *UserMasterUpdate {
	umu.mutation.ClearEmailOTPSavedTime()
	return umu
}

// SetEmailOTPExpiryTime sets the "EmailOTPExpiryTime" field.
func (umu *UserMasterUpdate) SetEmailOTPExpiryTime(t time.Time) *UserMasterUpdate {
	umu.mutation.SetEmailOTPExpiryTime(t)
	return umu
}

// SetNillableEmailOTPExpiryTime sets the "EmailOTPExpiryTime" field if the given value is not nil.
func (umu *UserMasterUpdate) SetNillableEmailOTPExpiryTime(t *time.Time) *UserMasterUpdate {
	if t != nil {
		umu.SetEmailOTPExpiryTime(*t)
	}
	return umu
}

// ClearEmailOTPExpiryTime clears the value of the "EmailOTPExpiryTime" field.
func (umu *UserMasterUpdate) ClearEmailOTPExpiryTime() *UserMasterUpdate {
	umu.mutation.ClearEmailOTPExpiryTime()
	return umu
}

// SetEmailNewPasswordRequest sets the "EmailNewPasswordRequest" field.
func (umu *UserMasterUpdate) SetEmailNewPasswordRequest(b bool) *UserMasterUpdate {
	umu.mutation.SetEmailNewPasswordRequest(b)
	return umu
}

// SetNillableEmailNewPasswordRequest sets the "EmailNewPasswordRequest" field if the given value is not nil.
func (umu *UserMasterUpdate) SetNillableEmailNewPasswordRequest(b *bool) *UserMasterUpdate {
	if b != nil {
		umu.SetEmailNewPasswordRequest(*b)
	}
	return umu
}

// ClearEmailNewPasswordRequest clears the value of the "EmailNewPasswordRequest" field.
func (umu *UserMasterUpdate) ClearEmailNewPasswordRequest() *UserMasterUpdate {
	umu.mutation.ClearEmailNewPasswordRequest()
	return umu
}

// SetUidToken sets the "UidToken" field.
func (umu *UserMasterUpdate) SetUidToken(s string) *UserMasterUpdate {
	umu.mutation.SetUidToken(s)
	return umu
}

// SetNillableUidToken sets the "UidToken" field if the given value is not nil.
func (umu *UserMasterUpdate) SetNillableUidToken(s *string) *UserMasterUpdate {
	if s != nil {
		umu.SetUidToken(*s)
	}
	return umu
}

// ClearUidToken clears the value of the "UidToken" field.
func (umu *UserMasterUpdate) ClearUidToken() *UserMasterUpdate {
	umu.mutation.ClearUidToken()
	return umu
}

// SetCreatedById sets the "CreatedById" field.
func (umu *UserMasterUpdate) SetCreatedById(i int64) *UserMasterUpdate {
	umu.mutation.ResetCreatedById()
	umu.mutation.SetCreatedById(i)
	return umu
}

// SetNillableCreatedById sets the "CreatedById" field if the given value is not nil.
func (umu *UserMasterUpdate) SetNillableCreatedById(i *int64) *UserMasterUpdate {
	if i != nil {
		umu.SetCreatedById(*i)
	}
	return umu
}

// AddCreatedById adds i to the "CreatedById" field.
func (umu *UserMasterUpdate) AddCreatedById(i int64) *UserMasterUpdate {
	umu.mutation.AddCreatedById(i)
	return umu
}

// ClearCreatedById clears the value of the "CreatedById" field.
func (umu *UserMasterUpdate) ClearCreatedById() *UserMasterUpdate {
	umu.mutation.ClearCreatedById()
	return umu
}

// SetCreatedByEmployeeId sets the "CreatedByEmployeeId" field.
func (umu *UserMasterUpdate) SetCreatedByEmployeeId(s string) *UserMasterUpdate {
	umu.mutation.SetCreatedByEmployeeId(s)
	return umu
}

// SetNillableCreatedByEmployeeId sets the "CreatedByEmployeeId" field if the given value is not nil.
func (umu *UserMasterUpdate) SetNillableCreatedByEmployeeId(s *string) *UserMasterUpdate {
	if s != nil {
		umu.SetCreatedByEmployeeId(*s)
	}
	return umu
}

// ClearCreatedByEmployeeId clears the value of the "CreatedByEmployeeId" field.
func (umu *UserMasterUpdate) ClearCreatedByEmployeeId() *UserMasterUpdate {
	umu.mutation.ClearCreatedByEmployeeId()
	return umu
}

// SetCreatedByUserName sets the "CreatedByUserName" field.
func (umu *UserMasterUpdate) SetCreatedByUserName(s string) *UserMasterUpdate {
	umu.mutation.SetCreatedByUserName(s)
	return umu
}

// SetNillableCreatedByUserName sets the "CreatedByUserName" field if the given value is not nil.
func (umu *UserMasterUpdate) SetNillableCreatedByUserName(s *string) *UserMasterUpdate {
	if s != nil {
		umu.SetCreatedByUserName(*s)
	}
	return umu
}

// ClearCreatedByUserName clears the value of the "CreatedByUserName" field.
func (umu *UserMasterUpdate) ClearCreatedByUserName() *UserMasterUpdate {
	umu.mutation.ClearCreatedByUserName()
	return umu
}

// SetCreatedByDesignation sets the "CreatedByDesignation" field.
func (umu *UserMasterUpdate) SetCreatedByDesignation(s string) *UserMasterUpdate {
	umu.mutation.SetCreatedByDesignation(s)
	return umu
}

// SetNillableCreatedByDesignation sets the "CreatedByDesignation" field if the given value is not nil.
func (umu *UserMasterUpdate) SetNillableCreatedByDesignation(s *string) *UserMasterUpdate {
	if s != nil {
		umu.SetCreatedByDesignation(*s)
	}
	return umu
}

// ClearCreatedByDesignation clears the value of the "CreatedByDesignation" field.
func (umu *UserMasterUpdate) ClearCreatedByDesignation() *UserMasterUpdate {
	umu.mutation.ClearCreatedByDesignation()
	return umu
}

// SetCreatedDate sets the "CreatedDate" field.
func (umu *UserMasterUpdate) SetCreatedDate(t time.Time) *UserMasterUpdate {
	umu.mutation.SetCreatedDate(t)
	return umu
}

// SetNillableCreatedDate sets the "CreatedDate" field if the given value is not nil.
func (umu *UserMasterUpdate) SetNillableCreatedDate(t *time.Time) *UserMasterUpdate {
	if t != nil {
		umu.SetCreatedDate(*t)
	}
	return umu
}

// ClearCreatedDate clears the value of the "CreatedDate" field.
func (umu *UserMasterUpdate) ClearCreatedDate() *UserMasterUpdate {
	umu.mutation.ClearCreatedDate()
	return umu
}

// SetDeletedById sets the "DeletedById" field.
func (umu *UserMasterUpdate) SetDeletedById(i int64) *UserMasterUpdate {
	umu.mutation.ResetDeletedById()
	umu.mutation.SetDeletedById(i)
	return umu
}

// SetNillableDeletedById sets the "DeletedById" field if the given value is not nil.
func (umu *UserMasterUpdate) SetNillableDeletedById(i *int64) *UserMasterUpdate {
	if i != nil {
		umu.SetDeletedById(*i)
	}
	return umu
}

// AddDeletedById adds i to the "DeletedById" field.
func (umu *UserMasterUpdate) AddDeletedById(i int64) *UserMasterUpdate {
	umu.mutation.AddDeletedById(i)
	return umu
}

// ClearDeletedById clears the value of the "DeletedById" field.
func (umu *UserMasterUpdate) ClearDeletedById() *UserMasterUpdate {
	umu.mutation.ClearDeletedById()
	return umu
}

// SetDeletedByEmployeeId sets the "DeletedByEmployeeId" field.
func (umu *UserMasterUpdate) SetDeletedByEmployeeId(s string) *UserMasterUpdate {
	umu.mutation.SetDeletedByEmployeeId(s)
	return umu
}

// SetNillableDeletedByEmployeeId sets the "DeletedByEmployeeId" field if the given value is not nil.
func (umu *UserMasterUpdate) SetNillableDeletedByEmployeeId(s *string) *UserMasterUpdate {
	if s != nil {
		umu.SetDeletedByEmployeeId(*s)
	}
	return umu
}

// ClearDeletedByEmployeeId clears the value of the "DeletedByEmployeeId" field.
func (umu *UserMasterUpdate) ClearDeletedByEmployeeId() *UserMasterUpdate {
	umu.mutation.ClearDeletedByEmployeeId()
	return umu
}

// SetDeletedByUserName sets the "DeletedByUserName" field.
func (umu *UserMasterUpdate) SetDeletedByUserName(s string) *UserMasterUpdate {
	umu.mutation.SetDeletedByUserName(s)
	return umu
}

// SetNillableDeletedByUserName sets the "DeletedByUserName" field if the given value is not nil.
func (umu *UserMasterUpdate) SetNillableDeletedByUserName(s *string) *UserMasterUpdate {
	if s != nil {
		umu.SetDeletedByUserName(*s)
	}
	return umu
}

// ClearDeletedByUserName clears the value of the "DeletedByUserName" field.
func (umu *UserMasterUpdate) ClearDeletedByUserName() *UserMasterUpdate {
	umu.mutation.ClearDeletedByUserName()
	return umu
}

// SetDeletedByDesignation sets the "DeletedByDesignation" field.
func (umu *UserMasterUpdate) SetDeletedByDesignation(s string) *UserMasterUpdate {
	umu.mutation.SetDeletedByDesignation(s)
	return umu
}

// SetNillableDeletedByDesignation sets the "DeletedByDesignation" field if the given value is not nil.
func (umu *UserMasterUpdate) SetNillableDeletedByDesignation(s *string) *UserMasterUpdate {
	if s != nil {
		umu.SetDeletedByDesignation(*s)
	}
	return umu
}

// ClearDeletedByDesignation clears the value of the "DeletedByDesignation" field.
func (umu *UserMasterUpdate) ClearDeletedByDesignation() *UserMasterUpdate {
	umu.mutation.ClearDeletedByDesignation()
	return umu
}

// SetDeletedDate sets the "DeletedDate" field.
func (umu *UserMasterUpdate) SetDeletedDate(t time.Time) *UserMasterUpdate {
	umu.mutation.SetDeletedDate(t)
	return umu
}

// SetNillableDeletedDate sets the "DeletedDate" field if the given value is not nil.
func (umu *UserMasterUpdate) SetNillableDeletedDate(t *time.Time) *UserMasterUpdate {
	if t != nil {
		umu.SetDeletedDate(*t)
	}
	return umu
}

// ClearDeletedDate clears the value of the "DeletedDate" field.
func (umu *UserMasterUpdate) ClearDeletedDate() *UserMasterUpdate {
	umu.mutation.ClearDeletedDate()
	return umu
}

// SetFacilityID sets the "FacilityID" field.
func (umu *UserMasterUpdate) SetFacilityID(s string) *UserMasterUpdate {
	umu.mutation.SetFacilityID(s)
	return umu
}

// SetNillableFacilityID sets the "FacilityID" field if the given value is not nil.
func (umu *UserMasterUpdate) SetNillableFacilityID(s *string) *UserMasterUpdate {
	if s != nil {
		umu.SetFacilityID(*s)
	}
	return umu
}

// ClearFacilityID clears the value of the "FacilityID" field.
func (umu *UserMasterUpdate) ClearFacilityID() *UserMasterUpdate {
	umu.mutation.ClearFacilityID()
	return umu
}

// SetCircleFacilityId sets the "CircleFacilityId" field.
func (umu *UserMasterUpdate) SetCircleFacilityId(s string) *UserMasterUpdate {
	umu.mutation.SetCircleFacilityId(s)
	return umu
}

// SetNillableCircleFacilityId sets the "CircleFacilityId" field if the given value is not nil.
func (umu *UserMasterUpdate) SetNillableCircleFacilityId(s *string) *UserMasterUpdate {
	if s != nil {
		umu.SetCircleFacilityId(*s)
	}
	return umu
}

// ClearCircleFacilityId clears the value of the "CircleFacilityId" field.
func (umu *UserMasterUpdate) ClearCircleFacilityId() *UserMasterUpdate {
	umu.mutation.ClearCircleFacilityId()
	return umu
}

// SetCircleFacilityName sets the "CircleFacilityName" field.
func (umu *UserMasterUpdate) SetCircleFacilityName(s string) *UserMasterUpdate {
	umu.mutation.SetCircleFacilityName(s)
	return umu
}

// SetNillableCircleFacilityName sets the "CircleFacilityName" field if the given value is not nil.
func (umu *UserMasterUpdate) SetNillableCircleFacilityName(s *string) *UserMasterUpdate {
	if s != nil {
		umu.SetCircleFacilityName(*s)
	}
	return umu
}

// ClearCircleFacilityName clears the value of the "CircleFacilityName" field.
func (umu *UserMasterUpdate) ClearCircleFacilityName() *UserMasterUpdate {
	umu.mutation.ClearCircleFacilityName()
	return umu
}

// SetDesignation sets the "Designation" field.
func (umu *UserMasterUpdate) SetDesignation(s string) *UserMasterUpdate {
	umu.mutation.SetDesignation(s)
	return umu
}

// SetNillableDesignation sets the "Designation" field if the given value is not nil.
func (umu *UserMasterUpdate) SetNillableDesignation(s *string) *UserMasterUpdate {
	if s != nil {
		umu.SetDesignation(*s)
	}
	return umu
}

// ClearDesignation clears the value of the "Designation" field.
func (umu *UserMasterUpdate) ClearDesignation() *UserMasterUpdate {
	umu.mutation.ClearDesignation()
	return umu
}

// SetRoleUserCode sets the "RoleUserCode" field.
func (umu *UserMasterUpdate) SetRoleUserCode(i int32) *UserMasterUpdate {
	umu.mutation.SetRoleUserCode(i)
	return umu
}

// SetNillableRoleUserCode sets the "RoleUserCode" field if the given value is not nil.
func (umu *UserMasterUpdate) SetNillableRoleUserCode(i *int32) *UserMasterUpdate {
	if i != nil {
		umu.SetRoleUserCode(*i)
	}
	return umu
}

// ClearRoleUserCode clears the value of the "RoleUserCode" field.
func (umu *UserMasterUpdate) ClearRoleUserCode() *UserMasterUpdate {
	umu.mutation.ClearRoleUserCode()
	return umu
}

// SetUpdatedby sets the "Updatedby" field.
func (umu *UserMasterUpdate) SetUpdatedby(s string) *UserMasterUpdate {
	umu.mutation.SetUpdatedby(s)
	return umu
}

// SetNillableUpdatedby sets the "Updatedby" field if the given value is not nil.
func (umu *UserMasterUpdate) SetNillableUpdatedby(s *string) *UserMasterUpdate {
	if s != nil {
		umu.SetUpdatedby(*s)
	}
	return umu
}

// ClearUpdatedby clears the value of the "Updatedby" field.
func (umu *UserMasterUpdate) ClearUpdatedby() *UserMasterUpdate {
	umu.mutation.ClearUpdatedby()
	return umu
}

// SetUpdatedDate sets the "updatedDate" field.
func (umu *UserMasterUpdate) SetUpdatedDate(t time.Time) *UserMasterUpdate {
	umu.mutation.SetUpdatedDate(t)
	return umu
}

// SetNillableUpdatedDate sets the "updatedDate" field if the given value is not nil.
func (umu *UserMasterUpdate) SetNillableUpdatedDate(t *time.Time) *UserMasterUpdate {
	if t != nil {
		umu.SetUpdatedDate(*t)
	}
	return umu
}

// ClearUpdatedDate clears the value of the "updatedDate" field.
func (umu *UserMasterUpdate) ClearUpdatedDate() *UserMasterUpdate {
	umu.mutation.ClearUpdatedDate()
	return umu
}

// SetModifiedby sets the "Modifiedby" field.
func (umu *UserMasterUpdate) SetModifiedby(s string) *UserMasterUpdate {
	umu.mutation.SetModifiedby(s)
	return umu
}

// SetNillableModifiedby sets the "Modifiedby" field if the given value is not nil.
func (umu *UserMasterUpdate) SetNillableModifiedby(s *string) *UserMasterUpdate {
	if s != nil {
		umu.SetModifiedby(*s)
	}
	return umu
}

// ClearModifiedby clears the value of the "Modifiedby" field.
func (umu *UserMasterUpdate) ClearModifiedby() *UserMasterUpdate {
	umu.mutation.ClearModifiedby()
	return umu
}

// SetModifiedDate sets the "ModifiedDate" field.
func (umu *UserMasterUpdate) SetModifiedDate(t time.Time) *UserMasterUpdate {
	umu.mutation.SetModifiedDate(t)
	return umu
}

// SetNillableModifiedDate sets the "ModifiedDate" field if the given value is not nil.
func (umu *UserMasterUpdate) SetNillableModifiedDate(t *time.Time) *UserMasterUpdate {
	if t != nil {
		umu.SetModifiedDate(*t)
	}
	return umu
}

// ClearModifiedDate clears the value of the "ModifiedDate" field.
func (umu *UserMasterUpdate) ClearModifiedDate() *UserMasterUpdate {
	umu.mutation.ClearModifiedDate()
	return umu
}

// SetOperationstatus sets the "Operationstatus" field.
func (umu *UserMasterUpdate) SetOperationstatus(s string) *UserMasterUpdate {
	umu.mutation.SetOperationstatus(s)
	return umu
}

// SetNillableOperationstatus sets the "Operationstatus" field if the given value is not nil.
func (umu *UserMasterUpdate) SetNillableOperationstatus(s *string) *UserMasterUpdate {
	if s != nil {
		umu.SetOperationstatus(*s)
	}
	return umu
}

// ClearOperationstatus clears the value of the "Operationstatus" field.
func (umu *UserMasterUpdate) ClearOperationstatus() *UserMasterUpdate {
	umu.mutation.ClearOperationstatus()
	return umu
}

// SetExamCode sets the "ExamCode" field.
func (umu *UserMasterUpdate) SetExamCode(i int32) *UserMasterUpdate {
	umu.mutation.ResetExamCode()
	umu.mutation.SetExamCode(i)
	return umu
}

// SetNillableExamCode sets the "ExamCode" field if the given value is not nil.
func (umu *UserMasterUpdate) SetNillableExamCode(i *int32) *UserMasterUpdate {
	if i != nil {
		umu.SetExamCode(*i)
	}
	return umu
}

// AddExamCode adds i to the "ExamCode" field.
func (umu *UserMasterUpdate) AddExamCode(i int32) *UserMasterUpdate {
	umu.mutation.AddExamCode(i)
	return umu
}

// ClearExamCode clears the value of the "ExamCode" field.
func (umu *UserMasterUpdate) ClearExamCode() *UserMasterUpdate {
	umu.mutation.ClearExamCode()
	return umu
}

// SetExamCodePS sets the "ExamCodePS" field.
func (umu *UserMasterUpdate) SetExamCodePS(i int32) *UserMasterUpdate {
	umu.mutation.ResetExamCodePS()
	umu.mutation.SetExamCodePS(i)
	return umu
}

// SetNillableExamCodePS sets the "ExamCodePS" field if the given value is not nil.
func (umu *UserMasterUpdate) SetNillableExamCodePS(i *int32) *UserMasterUpdate {
	if i != nil {
		umu.SetExamCodePS(*i)
	}
	return umu
}

// AddExamCodePS adds i to the "ExamCodePS" field.
func (umu *UserMasterUpdate) AddExamCodePS(i int32) *UserMasterUpdate {
	umu.mutation.AddExamCodePS(i)
	return umu
}

// ClearExamCodePS clears the value of the "ExamCodePS" field.
func (umu *UserMasterUpdate) ClearExamCodePS() *UserMasterUpdate {
	umu.mutation.ClearExamCodePS()
	return umu
}

// SetGender sets the "Gender" field.
func (umu *UserMasterUpdate) SetGender(u usermaster.Gender) *UserMasterUpdate {
	umu.mutation.SetGender(u)
	return umu
}

// SetNillableGender sets the "Gender" field if the given value is not nil.
func (umu *UserMasterUpdate) SetNillableGender(u *usermaster.Gender) *UserMasterUpdate {
	if u != nil {
		umu.SetGender(*u)
	}
	return umu
}

// ClearGender clears the value of the "Gender" field.
func (umu *UserMasterUpdate) ClearGender() *UserMasterUpdate {
	umu.mutation.ClearGender()
	return umu
}

// SetDOB sets the "DOB" field.
func (umu *UserMasterUpdate) SetDOB(s string) *UserMasterUpdate {
	umu.mutation.SetDOB(s)
	return umu
}

// SetNillableDOB sets the "DOB" field if the given value is not nil.
func (umu *UserMasterUpdate) SetNillableDOB(s *string) *UserMasterUpdate {
	if s != nil {
		umu.SetDOB(*s)
	}
	return umu
}

// ClearDOB clears the value of the "DOB" field.
func (umu *UserMasterUpdate) ClearDOB() *UserMasterUpdate {
	umu.mutation.ClearDOB()
	return umu
}

// SetCreatedBy sets the "CreatedBy" field.
func (umu *UserMasterUpdate) SetCreatedBy(s string) *UserMasterUpdate {
	umu.mutation.SetCreatedBy(s)
	return umu
}

// SetNillableCreatedBy sets the "CreatedBy" field if the given value is not nil.
func (umu *UserMasterUpdate) SetNillableCreatedBy(s *string) *UserMasterUpdate {
	if s != nil {
		umu.SetCreatedBy(*s)
	}
	return umu
}

// ClearCreatedBy clears the value of the "CreatedBy" field.
func (umu *UserMasterUpdate) ClearCreatedBy() *UserMasterUpdate {
	umu.mutation.ClearCreatedBy()
	return umu
}

// SetRolesID sets the "roles" edge to the RoleMaster entity by ID.
func (umu *UserMasterUpdate) SetRolesID(id int32) *UserMasterUpdate {
	umu.mutation.SetRolesID(id)
	return umu
}

// SetNillableRolesID sets the "roles" edge to the RoleMaster entity by ID if the given value is not nil.
func (umu *UserMasterUpdate) SetNillableRolesID(id *int32) *UserMasterUpdate {
	if id != nil {
		umu = umu.SetRolesID(*id)
	}
	return umu
}

// SetRoles sets the "roles" edge to the RoleMaster entity.
func (umu *UserMasterUpdate) SetRoles(r *RoleMaster) *UserMasterUpdate {
	return umu.SetRolesID(r.ID)
}

// AddUsermasterRefIDs adds the "UsermasterRef" edge to the EmployeeMaster entity by IDs.
func (umu *UserMasterUpdate) AddUsermasterRefIDs(ids ...int64) *UserMasterUpdate {
	umu.mutation.AddUsermasterRefIDs(ids...)
	return umu
}

// AddUsermasterRef adds the "UsermasterRef" edges to the EmployeeMaster entity.
func (umu *UserMasterUpdate) AddUsermasterRef(e ...*EmployeeMaster) *UserMasterUpdate {
	ids := make([]int64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return umu.AddUsermasterRefIDs(ids...)
}

// AddUsersPSRefIDs adds the "UsersPSRef" edge to the Exam_Applications_PS entity by IDs.
func (umu *UserMasterUpdate) AddUsersPSRefIDs(ids ...int64) *UserMasterUpdate {
	umu.mutation.AddUsersPSRefIDs(ids...)
	return umu
}

// AddUsersPSRef adds the "UsersPSRef" edges to the Exam_Applications_PS entity.
func (umu *UserMasterUpdate) AddUsersPSRef(e ...*Exam_Applications_PS) *UserMasterUpdate {
	ids := make([]int64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return umu.AddUsersPSRefIDs(ids...)
}

// AddUsersIPRefIDs adds the "UsersIPRef" edge to the Exam_Applications_IP entity by IDs.
func (umu *UserMasterUpdate) AddUsersIPRefIDs(ids ...int64) *UserMasterUpdate {
	umu.mutation.AddUsersIPRefIDs(ids...)
	return umu
}

// AddUsersIPRef adds the "UsersIPRef" edges to the Exam_Applications_IP entity.
func (umu *UserMasterUpdate) AddUsersIPRef(e ...*Exam_Applications_IP) *UserMasterUpdate {
	ids := make([]int64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return umu.AddUsersIPRefIDs(ids...)
}

// AddUserIDRefIDs adds the "User_ID_Ref" edge to the ExamNotifications entity by IDs.
func (umu *UserMasterUpdate) AddUserIDRefIDs(ids ...int32) *UserMasterUpdate {
	umu.mutation.AddUserIDRefIDs(ids...)
	return umu
}

// AddUserIDRef adds the "User_ID_Ref" edges to the ExamNotifications entity.
func (umu *UserMasterUpdate) AddUserIDRef(e ...*ExamNotifications) *UserMasterUpdate {
	ids := make([]int32, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return umu.AddUserIDRefIDs(ids...)
}

// AddUsersGDSPARefIDs adds the "UsersGDSPARef" edge to the Exam_Applications_GDSPA entity by IDs.
func (umu *UserMasterUpdate) AddUsersGDSPARefIDs(ids ...int64) *UserMasterUpdate {
	umu.mutation.AddUsersGDSPARefIDs(ids...)
	return umu
}

// AddUsersGDSPARef adds the "UsersGDSPARef" edges to the Exam_Applications_GDSPA entity.
func (umu *UserMasterUpdate) AddUsersGDSPARef(e ...*Exam_Applications_GDSPA) *UserMasterUpdate {
	ids := make([]int64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return umu.AddUsersGDSPARefIDs(ids...)
}

// AddUsersPMPARefIDs adds the "UsersPMPARef" edge to the Exam_Applications_PMPA entity by IDs.
func (umu *UserMasterUpdate) AddUsersPMPARefIDs(ids ...int64) *UserMasterUpdate {
	umu.mutation.AddUsersPMPARefIDs(ids...)
	return umu
}

// AddUsersPMPARef adds the "UsersPMPARef" edges to the Exam_Applications_PMPA entity.
func (umu *UserMasterUpdate) AddUsersPMPARef(e ...*Exam_Applications_PMPA) *UserMasterUpdate {
	ids := make([]int64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return umu.AddUsersPMPARefIDs(ids...)
}

// AddUsersGDSPMRefIDs adds the "UsersGDSPMRef" edge to the Exam_Applications_GDSPM entity by IDs.
func (umu *UserMasterUpdate) AddUsersGDSPMRefIDs(ids ...int64) *UserMasterUpdate {
	umu.mutation.AddUsersGDSPMRefIDs(ids...)
	return umu
}

// AddUsersGDSPMRef adds the "UsersGDSPMRef" edges to the Exam_Applications_GDSPM entity.
func (umu *UserMasterUpdate) AddUsersGDSPMRef(e ...*Exam_Applications_GDSPM) *UserMasterUpdate {
	ids := make([]int64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return umu.AddUsersGDSPMRefIDs(ids...)
}

// AddLogDatumIDs adds the "LogData" edge to the Logs entity by IDs.
func (umu *UserMasterUpdate) AddLogDatumIDs(ids ...int64) *UserMasterUpdate {
	umu.mutation.AddLogDatumIDs(ids...)
	return umu
}

// AddLogData adds the "LogData" edges to the Logs entity.
func (umu *UserMasterUpdate) AddLogData(l ...*Logs) *UserMasterUpdate {
	ids := make([]int64, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return umu.AddLogDatumIDs(ids...)
}

// Mutation returns the UserMasterMutation object of the builder.
func (umu *UserMasterUpdate) Mutation() *UserMasterMutation {
	return umu.mutation
}

// ClearRoles clears the "roles" edge to the RoleMaster entity.
func (umu *UserMasterUpdate) ClearRoles() *UserMasterUpdate {
	umu.mutation.ClearRoles()
	return umu
}

// ClearUsermasterRef clears all "UsermasterRef" edges to the EmployeeMaster entity.
func (umu *UserMasterUpdate) ClearUsermasterRef() *UserMasterUpdate {
	umu.mutation.ClearUsermasterRef()
	return umu
}

// RemoveUsermasterRefIDs removes the "UsermasterRef" edge to EmployeeMaster entities by IDs.
func (umu *UserMasterUpdate) RemoveUsermasterRefIDs(ids ...int64) *UserMasterUpdate {
	umu.mutation.RemoveUsermasterRefIDs(ids...)
	return umu
}

// RemoveUsermasterRef removes "UsermasterRef" edges to EmployeeMaster entities.
func (umu *UserMasterUpdate) RemoveUsermasterRef(e ...*EmployeeMaster) *UserMasterUpdate {
	ids := make([]int64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return umu.RemoveUsermasterRefIDs(ids...)
}

// ClearUsersPSRef clears all "UsersPSRef" edges to the Exam_Applications_PS entity.
func (umu *UserMasterUpdate) ClearUsersPSRef() *UserMasterUpdate {
	umu.mutation.ClearUsersPSRef()
	return umu
}

// RemoveUsersPSRefIDs removes the "UsersPSRef" edge to Exam_Applications_PS entities by IDs.
func (umu *UserMasterUpdate) RemoveUsersPSRefIDs(ids ...int64) *UserMasterUpdate {
	umu.mutation.RemoveUsersPSRefIDs(ids...)
	return umu
}

// RemoveUsersPSRef removes "UsersPSRef" edges to Exam_Applications_PS entities.
func (umu *UserMasterUpdate) RemoveUsersPSRef(e ...*Exam_Applications_PS) *UserMasterUpdate {
	ids := make([]int64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return umu.RemoveUsersPSRefIDs(ids...)
}

// ClearUsersIPRef clears all "UsersIPRef" edges to the Exam_Applications_IP entity.
func (umu *UserMasterUpdate) ClearUsersIPRef() *UserMasterUpdate {
	umu.mutation.ClearUsersIPRef()
	return umu
}

// RemoveUsersIPRefIDs removes the "UsersIPRef" edge to Exam_Applications_IP entities by IDs.
func (umu *UserMasterUpdate) RemoveUsersIPRefIDs(ids ...int64) *UserMasterUpdate {
	umu.mutation.RemoveUsersIPRefIDs(ids...)
	return umu
}

// RemoveUsersIPRef removes "UsersIPRef" edges to Exam_Applications_IP entities.
func (umu *UserMasterUpdate) RemoveUsersIPRef(e ...*Exam_Applications_IP) *UserMasterUpdate {
	ids := make([]int64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return umu.RemoveUsersIPRefIDs(ids...)
}

// ClearUserIDRef clears all "User_ID_Ref" edges to the ExamNotifications entity.
func (umu *UserMasterUpdate) ClearUserIDRef() *UserMasterUpdate {
	umu.mutation.ClearUserIDRef()
	return umu
}

// RemoveUserIDRefIDs removes the "User_ID_Ref" edge to ExamNotifications entities by IDs.
func (umu *UserMasterUpdate) RemoveUserIDRefIDs(ids ...int32) *UserMasterUpdate {
	umu.mutation.RemoveUserIDRefIDs(ids...)
	return umu
}

// RemoveUserIDRef removes "User_ID_Ref" edges to ExamNotifications entities.
func (umu *UserMasterUpdate) RemoveUserIDRef(e ...*ExamNotifications) *UserMasterUpdate {
	ids := make([]int32, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return umu.RemoveUserIDRefIDs(ids...)
}

// ClearUsersGDSPARef clears all "UsersGDSPARef" edges to the Exam_Applications_GDSPA entity.
func (umu *UserMasterUpdate) ClearUsersGDSPARef() *UserMasterUpdate {
	umu.mutation.ClearUsersGDSPARef()
	return umu
}

// RemoveUsersGDSPARefIDs removes the "UsersGDSPARef" edge to Exam_Applications_GDSPA entities by IDs.
func (umu *UserMasterUpdate) RemoveUsersGDSPARefIDs(ids ...int64) *UserMasterUpdate {
	umu.mutation.RemoveUsersGDSPARefIDs(ids...)
	return umu
}

// RemoveUsersGDSPARef removes "UsersGDSPARef" edges to Exam_Applications_GDSPA entities.
func (umu *UserMasterUpdate) RemoveUsersGDSPARef(e ...*Exam_Applications_GDSPA) *UserMasterUpdate {
	ids := make([]int64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return umu.RemoveUsersGDSPARefIDs(ids...)
}

// ClearUsersPMPARef clears all "UsersPMPARef" edges to the Exam_Applications_PMPA entity.
func (umu *UserMasterUpdate) ClearUsersPMPARef() *UserMasterUpdate {
	umu.mutation.ClearUsersPMPARef()
	return umu
}

// RemoveUsersPMPARefIDs removes the "UsersPMPARef" edge to Exam_Applications_PMPA entities by IDs.
func (umu *UserMasterUpdate) RemoveUsersPMPARefIDs(ids ...int64) *UserMasterUpdate {
	umu.mutation.RemoveUsersPMPARefIDs(ids...)
	return umu
}

// RemoveUsersPMPARef removes "UsersPMPARef" edges to Exam_Applications_PMPA entities.
func (umu *UserMasterUpdate) RemoveUsersPMPARef(e ...*Exam_Applications_PMPA) *UserMasterUpdate {
	ids := make([]int64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return umu.RemoveUsersPMPARefIDs(ids...)
}

// ClearUsersGDSPMRef clears all "UsersGDSPMRef" edges to the Exam_Applications_GDSPM entity.
func (umu *UserMasterUpdate) ClearUsersGDSPMRef() *UserMasterUpdate {
	umu.mutation.ClearUsersGDSPMRef()
	return umu
}

// RemoveUsersGDSPMRefIDs removes the "UsersGDSPMRef" edge to Exam_Applications_GDSPM entities by IDs.
func (umu *UserMasterUpdate) RemoveUsersGDSPMRefIDs(ids ...int64) *UserMasterUpdate {
	umu.mutation.RemoveUsersGDSPMRefIDs(ids...)
	return umu
}

// RemoveUsersGDSPMRef removes "UsersGDSPMRef" edges to Exam_Applications_GDSPM entities.
func (umu *UserMasterUpdate) RemoveUsersGDSPMRef(e ...*Exam_Applications_GDSPM) *UserMasterUpdate {
	ids := make([]int64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return umu.RemoveUsersGDSPMRefIDs(ids...)
}

// ClearLogData clears all "LogData" edges to the Logs entity.
func (umu *UserMasterUpdate) ClearLogData() *UserMasterUpdate {
	umu.mutation.ClearLogData()
	return umu
}

// RemoveLogDatumIDs removes the "LogData" edge to Logs entities by IDs.
func (umu *UserMasterUpdate) RemoveLogDatumIDs(ids ...int64) *UserMasterUpdate {
	umu.mutation.RemoveLogDatumIDs(ids...)
	return umu
}

// RemoveLogData removes "LogData" edges to Logs entities.
func (umu *UserMasterUpdate) RemoveLogData(l ...*Logs) *UserMasterUpdate {
	ids := make([]int64, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return umu.RemoveLogDatumIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (umu *UserMasterUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, umu.sqlSave, umu.mutation, umu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (umu *UserMasterUpdate) SaveX(ctx context.Context) int {
	affected, err := umu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (umu *UserMasterUpdate) Exec(ctx context.Context) error {
	_, err := umu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (umu *UserMasterUpdate) ExecX(ctx context.Context) {
	if err := umu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (umu *UserMasterUpdate) check() error {
	if v, ok := umu.mutation.Gender(); ok {
		if err := usermaster.GenderValidator(v); err != nil {
			return &ValidationError{Name: "Gender", err: fmt.Errorf(`ent: validator failed for field "UserMaster.Gender": %w`, err)}
		}
	}
	return nil
}

func (umu *UserMasterUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := umu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(usermaster.Table, usermaster.Columns, sqlgraph.NewFieldSpec(usermaster.FieldID, field.TypeInt64))
	if ps := umu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := umu.mutation.EmployeeID(); ok {
		_spec.SetField(usermaster.FieldEmployeeID, field.TypeInt64, value)
	}
	if value, ok := umu.mutation.AddedEmployeeID(); ok {
		_spec.AddField(usermaster.FieldEmployeeID, field.TypeInt64, value)
	}
	if umu.mutation.EmployeeIDCleared() {
		_spec.ClearField(usermaster.FieldEmployeeID, field.TypeInt64)
	}
	if value, ok := umu.mutation.EmployeeName(); ok {
		_spec.SetField(usermaster.FieldEmployeeName, field.TypeString, value)
	}
	if umu.mutation.EmployeeNameCleared() {
		_spec.ClearField(usermaster.FieldEmployeeName, field.TypeString)
	}
	if value, ok := umu.mutation.Mobile(); ok {
		_spec.SetField(usermaster.FieldMobile, field.TypeString, value)
	}
	if umu.mutation.MobileCleared() {
		_spec.ClearField(usermaster.FieldMobile, field.TypeString)
	}
	if value, ok := umu.mutation.EmailID(); ok {
		_spec.SetField(usermaster.FieldEmailID, field.TypeString, value)
	}
	if umu.mutation.EmailIDCleared() {
		_spec.ClearField(usermaster.FieldEmailID, field.TypeString)
	}
	if value, ok := umu.mutation.UserName(); ok {
		_spec.SetField(usermaster.FieldUserName, field.TypeString, value)
	}
	if umu.mutation.UserNameCleared() {
		_spec.ClearField(usermaster.FieldUserName, field.TypeString)
	}
	if value, ok := umu.mutation.Password(); ok {
		_spec.SetField(usermaster.FieldPassword, field.TypeString, value)
	}
	if umu.mutation.PasswordCleared() {
		_spec.ClearField(usermaster.FieldPassword, field.TypeString)
	}
	if value, ok := umu.mutation.Status(); ok {
		_spec.SetField(usermaster.FieldStatus, field.TypeBool, value)
	}
	if umu.mutation.StatusCleared() {
		_spec.ClearField(usermaster.FieldStatus, field.TypeBool)
	}
	if value, ok := umu.mutation.Statuss(); ok {
		_spec.SetField(usermaster.FieldStatuss, field.TypeString, value)
	}
	if umu.mutation.StatussCleared() {
		_spec.ClearField(usermaster.FieldStatuss, field.TypeString)
	}
	if value, ok := umu.mutation.OTP(); ok {
		_spec.SetField(usermaster.FieldOTP, field.TypeInt32, value)
	}
	if value, ok := umu.mutation.AddedOTP(); ok {
		_spec.AddField(usermaster.FieldOTP, field.TypeInt32, value)
	}
	if umu.mutation.OTPCleared() {
		_spec.ClearField(usermaster.FieldOTP, field.TypeInt32)
	}
	if value, ok := umu.mutation.OTPNew(); ok {
		_spec.SetField(usermaster.FieldOTPNew, field.TypeInt32, value)
	}
	if value, ok := umu.mutation.AddedOTPNew(); ok {
		_spec.AddField(usermaster.FieldOTPNew, field.TypeInt32, value)
	}
	if umu.mutation.OTPNewCleared() {
		_spec.ClearField(usermaster.FieldOTPNew, field.TypeInt32)
	}
	if value, ok := umu.mutation.EmailOTPNew(); ok {
		_spec.SetField(usermaster.FieldEmailOTPNew, field.TypeInt32, value)
	}
	if value, ok := umu.mutation.AddedEmailOTPNew(); ok {
		_spec.AddField(usermaster.FieldEmailOTPNew, field.TypeInt32, value)
	}
	if umu.mutation.EmailOTPNewCleared() {
		_spec.ClearField(usermaster.FieldEmailOTPNew, field.TypeInt32)
	}
	if value, ok := umu.mutation.OTPRemarks(); ok {
		_spec.SetField(usermaster.FieldOTPRemarks, field.TypeString, value)
	}
	if umu.mutation.OTPRemarksCleared() {
		_spec.ClearField(usermaster.FieldOTPRemarks, field.TypeString)
	}
	if value, ok := umu.mutation.CreatedAt(); ok {
		_spec.SetField(usermaster.FieldCreatedAt, field.TypeTime, value)
	}
	if umu.mutation.CreatedAtCleared() {
		_spec.ClearField(usermaster.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := umu.mutation.OTPTriggeredTime(); ok {
		_spec.SetField(usermaster.FieldOTPTriggeredTime, field.TypeTime, value)
	}
	if umu.mutation.OTPTriggeredTimeCleared() {
		_spec.ClearField(usermaster.FieldOTPTriggeredTime, field.TypeTime)
	}
	if value, ok := umu.mutation.OTPSavedTime(); ok {
		_spec.SetField(usermaster.FieldOTPSavedTime, field.TypeTime, value)
	}
	if umu.mutation.OTPSavedTimeCleared() {
		_spec.ClearField(usermaster.FieldOTPSavedTime, field.TypeTime)
	}
	if value, ok := umu.mutation.OTPExpiryTime(); ok {
		_spec.SetField(usermaster.FieldOTPExpiryTime, field.TypeTime, value)
	}
	if umu.mutation.OTPExpiryTimeCleared() {
		_spec.ClearField(usermaster.FieldOTPExpiryTime, field.TypeTime)
	}
	if value, ok := umu.mutation.NewPasswordRequest(); ok {
		_spec.SetField(usermaster.FieldNewPasswordRequest, field.TypeBool, value)
	}
	if umu.mutation.NewPasswordRequestCleared() {
		_spec.ClearField(usermaster.FieldNewPasswordRequest, field.TypeBool)
	}
	if value, ok := umu.mutation.EmailOTP(); ok {
		_spec.SetField(usermaster.FieldEmailOTP, field.TypeInt32, value)
	}
	if value, ok := umu.mutation.AddedEmailOTP(); ok {
		_spec.AddField(usermaster.FieldEmailOTP, field.TypeInt32, value)
	}
	if umu.mutation.EmailOTPCleared() {
		_spec.ClearField(usermaster.FieldEmailOTP, field.TypeInt32)
	}
	if value, ok := umu.mutation.EmailOTPRemarks(); ok {
		_spec.SetField(usermaster.FieldEmailOTPRemarks, field.TypeString, value)
	}
	if umu.mutation.EmailOTPRemarksCleared() {
		_spec.ClearField(usermaster.FieldEmailOTPRemarks, field.TypeString)
	}
	if value, ok := umu.mutation.EmailCreatedAt(); ok {
		_spec.SetField(usermaster.FieldEmailCreatedAt, field.TypeTime, value)
	}
	if umu.mutation.EmailCreatedAtCleared() {
		_spec.ClearField(usermaster.FieldEmailCreatedAt, field.TypeTime)
	}
	if value, ok := umu.mutation.EmailOTPTriggeredTime(); ok {
		_spec.SetField(usermaster.FieldEmailOTPTriggeredTime, field.TypeTime, value)
	}
	if umu.mutation.EmailOTPTriggeredTimeCleared() {
		_spec.ClearField(usermaster.FieldEmailOTPTriggeredTime, field.TypeTime)
	}
	if value, ok := umu.mutation.EmailOTPSavedTime(); ok {
		_spec.SetField(usermaster.FieldEmailOTPSavedTime, field.TypeTime, value)
	}
	if umu.mutation.EmailOTPSavedTimeCleared() {
		_spec.ClearField(usermaster.FieldEmailOTPSavedTime, field.TypeTime)
	}
	if value, ok := umu.mutation.EmailOTPExpiryTime(); ok {
		_spec.SetField(usermaster.FieldEmailOTPExpiryTime, field.TypeTime, value)
	}
	if umu.mutation.EmailOTPExpiryTimeCleared() {
		_spec.ClearField(usermaster.FieldEmailOTPExpiryTime, field.TypeTime)
	}
	if value, ok := umu.mutation.EmailNewPasswordRequest(); ok {
		_spec.SetField(usermaster.FieldEmailNewPasswordRequest, field.TypeBool, value)
	}
	if umu.mutation.EmailNewPasswordRequestCleared() {
		_spec.ClearField(usermaster.FieldEmailNewPasswordRequest, field.TypeBool)
	}
	if value, ok := umu.mutation.UidToken(); ok {
		_spec.SetField(usermaster.FieldUidToken, field.TypeString, value)
	}
	if umu.mutation.UidTokenCleared() {
		_spec.ClearField(usermaster.FieldUidToken, field.TypeString)
	}
	if value, ok := umu.mutation.CreatedById(); ok {
		_spec.SetField(usermaster.FieldCreatedById, field.TypeInt64, value)
	}
	if value, ok := umu.mutation.AddedCreatedById(); ok {
		_spec.AddField(usermaster.FieldCreatedById, field.TypeInt64, value)
	}
	if umu.mutation.CreatedByIdCleared() {
		_spec.ClearField(usermaster.FieldCreatedById, field.TypeInt64)
	}
	if value, ok := umu.mutation.CreatedByEmployeeId(); ok {
		_spec.SetField(usermaster.FieldCreatedByEmployeeId, field.TypeString, value)
	}
	if umu.mutation.CreatedByEmployeeIdCleared() {
		_spec.ClearField(usermaster.FieldCreatedByEmployeeId, field.TypeString)
	}
	if value, ok := umu.mutation.CreatedByUserName(); ok {
		_spec.SetField(usermaster.FieldCreatedByUserName, field.TypeString, value)
	}
	if umu.mutation.CreatedByUserNameCleared() {
		_spec.ClearField(usermaster.FieldCreatedByUserName, field.TypeString)
	}
	if value, ok := umu.mutation.CreatedByDesignation(); ok {
		_spec.SetField(usermaster.FieldCreatedByDesignation, field.TypeString, value)
	}
	if umu.mutation.CreatedByDesignationCleared() {
		_spec.ClearField(usermaster.FieldCreatedByDesignation, field.TypeString)
	}
	if value, ok := umu.mutation.CreatedDate(); ok {
		_spec.SetField(usermaster.FieldCreatedDate, field.TypeTime, value)
	}
	if umu.mutation.CreatedDateCleared() {
		_spec.ClearField(usermaster.FieldCreatedDate, field.TypeTime)
	}
	if value, ok := umu.mutation.DeletedById(); ok {
		_spec.SetField(usermaster.FieldDeletedById, field.TypeInt64, value)
	}
	if value, ok := umu.mutation.AddedDeletedById(); ok {
		_spec.AddField(usermaster.FieldDeletedById, field.TypeInt64, value)
	}
	if umu.mutation.DeletedByIdCleared() {
		_spec.ClearField(usermaster.FieldDeletedById, field.TypeInt64)
	}
	if value, ok := umu.mutation.DeletedByEmployeeId(); ok {
		_spec.SetField(usermaster.FieldDeletedByEmployeeId, field.TypeString, value)
	}
	if umu.mutation.DeletedByEmployeeIdCleared() {
		_spec.ClearField(usermaster.FieldDeletedByEmployeeId, field.TypeString)
	}
	if value, ok := umu.mutation.DeletedByUserName(); ok {
		_spec.SetField(usermaster.FieldDeletedByUserName, field.TypeString, value)
	}
	if umu.mutation.DeletedByUserNameCleared() {
		_spec.ClearField(usermaster.FieldDeletedByUserName, field.TypeString)
	}
	if value, ok := umu.mutation.DeletedByDesignation(); ok {
		_spec.SetField(usermaster.FieldDeletedByDesignation, field.TypeString, value)
	}
	if umu.mutation.DeletedByDesignationCleared() {
		_spec.ClearField(usermaster.FieldDeletedByDesignation, field.TypeString)
	}
	if value, ok := umu.mutation.DeletedDate(); ok {
		_spec.SetField(usermaster.FieldDeletedDate, field.TypeTime, value)
	}
	if umu.mutation.DeletedDateCleared() {
		_spec.ClearField(usermaster.FieldDeletedDate, field.TypeTime)
	}
	if value, ok := umu.mutation.FacilityID(); ok {
		_spec.SetField(usermaster.FieldFacilityID, field.TypeString, value)
	}
	if umu.mutation.FacilityIDCleared() {
		_spec.ClearField(usermaster.FieldFacilityID, field.TypeString)
	}
	if value, ok := umu.mutation.CircleFacilityId(); ok {
		_spec.SetField(usermaster.FieldCircleFacilityId, field.TypeString, value)
	}
	if umu.mutation.CircleFacilityIdCleared() {
		_spec.ClearField(usermaster.FieldCircleFacilityId, field.TypeString)
	}
	if value, ok := umu.mutation.CircleFacilityName(); ok {
		_spec.SetField(usermaster.FieldCircleFacilityName, field.TypeString, value)
	}
	if umu.mutation.CircleFacilityNameCleared() {
		_spec.ClearField(usermaster.FieldCircleFacilityName, field.TypeString)
	}
	if value, ok := umu.mutation.Designation(); ok {
		_spec.SetField(usermaster.FieldDesignation, field.TypeString, value)
	}
	if umu.mutation.DesignationCleared() {
		_spec.ClearField(usermaster.FieldDesignation, field.TypeString)
	}
	if value, ok := umu.mutation.Updatedby(); ok {
		_spec.SetField(usermaster.FieldUpdatedby, field.TypeString, value)
	}
	if umu.mutation.UpdatedbyCleared() {
		_spec.ClearField(usermaster.FieldUpdatedby, field.TypeString)
	}
	if value, ok := umu.mutation.UpdatedDate(); ok {
		_spec.SetField(usermaster.FieldUpdatedDate, field.TypeTime, value)
	}
	if umu.mutation.UpdatedDateCleared() {
		_spec.ClearField(usermaster.FieldUpdatedDate, field.TypeTime)
	}
	if value, ok := umu.mutation.Modifiedby(); ok {
		_spec.SetField(usermaster.FieldModifiedby, field.TypeString, value)
	}
	if umu.mutation.ModifiedbyCleared() {
		_spec.ClearField(usermaster.FieldModifiedby, field.TypeString)
	}
	if value, ok := umu.mutation.ModifiedDate(); ok {
		_spec.SetField(usermaster.FieldModifiedDate, field.TypeTime, value)
	}
	if umu.mutation.ModifiedDateCleared() {
		_spec.ClearField(usermaster.FieldModifiedDate, field.TypeTime)
	}
	if value, ok := umu.mutation.Operationstatus(); ok {
		_spec.SetField(usermaster.FieldOperationstatus, field.TypeString, value)
	}
	if umu.mutation.OperationstatusCleared() {
		_spec.ClearField(usermaster.FieldOperationstatus, field.TypeString)
	}
	if value, ok := umu.mutation.ExamCode(); ok {
		_spec.SetField(usermaster.FieldExamCode, field.TypeInt32, value)
	}
	if value, ok := umu.mutation.AddedExamCode(); ok {
		_spec.AddField(usermaster.FieldExamCode, field.TypeInt32, value)
	}
	if umu.mutation.ExamCodeCleared() {
		_spec.ClearField(usermaster.FieldExamCode, field.TypeInt32)
	}
	if value, ok := umu.mutation.ExamCodePS(); ok {
		_spec.SetField(usermaster.FieldExamCodePS, field.TypeInt32, value)
	}
	if value, ok := umu.mutation.AddedExamCodePS(); ok {
		_spec.AddField(usermaster.FieldExamCodePS, field.TypeInt32, value)
	}
	if umu.mutation.ExamCodePSCleared() {
		_spec.ClearField(usermaster.FieldExamCodePS, field.TypeInt32)
	}
	if value, ok := umu.mutation.Gender(); ok {
		_spec.SetField(usermaster.FieldGender, field.TypeEnum, value)
	}
	if umu.mutation.GenderCleared() {
		_spec.ClearField(usermaster.FieldGender, field.TypeEnum)
	}
	if value, ok := umu.mutation.DOB(); ok {
		_spec.SetField(usermaster.FieldDOB, field.TypeString, value)
	}
	if umu.mutation.DOBCleared() {
		_spec.ClearField(usermaster.FieldDOB, field.TypeString)
	}
	if value, ok := umu.mutation.CreatedBy(); ok {
		_spec.SetField(usermaster.FieldCreatedBy, field.TypeString, value)
	}
	if umu.mutation.CreatedByCleared() {
		_spec.ClearField(usermaster.FieldCreatedBy, field.TypeString)
	}
	if umu.mutation.RolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   usermaster.RolesTable,
			Columns: []string{usermaster.RolesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rolemaster.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := umu.mutation.RolesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   usermaster.RolesTable,
			Columns: []string{usermaster.RolesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rolemaster.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if umu.mutation.UsermasterRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   usermaster.UsermasterRefTable,
			Columns: []string{usermaster.UsermasterRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employeemaster.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := umu.mutation.RemovedUsermasterRefIDs(); len(nodes) > 0 && !umu.mutation.UsermasterRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   usermaster.UsermasterRefTable,
			Columns: []string{usermaster.UsermasterRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employeemaster.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := umu.mutation.UsermasterRefIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   usermaster.UsermasterRefTable,
			Columns: []string{usermaster.UsermasterRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employeemaster.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if umu.mutation.UsersPSRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   usermaster.UsersPSRefTable,
			Columns: []string{usermaster.UsersPSRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_ps.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := umu.mutation.RemovedUsersPSRefIDs(); len(nodes) > 0 && !umu.mutation.UsersPSRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   usermaster.UsersPSRefTable,
			Columns: []string{usermaster.UsersPSRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_ps.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := umu.mutation.UsersPSRefIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   usermaster.UsersPSRefTable,
			Columns: []string{usermaster.UsersPSRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_ps.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if umu.mutation.UsersIPRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   usermaster.UsersIPRefTable,
			Columns: []string{usermaster.UsersIPRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_ip.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := umu.mutation.RemovedUsersIPRefIDs(); len(nodes) > 0 && !umu.mutation.UsersIPRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   usermaster.UsersIPRefTable,
			Columns: []string{usermaster.UsersIPRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_ip.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := umu.mutation.UsersIPRefIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   usermaster.UsersIPRefTable,
			Columns: []string{usermaster.UsersIPRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_ip.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if umu.mutation.UserIDRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   usermaster.UserIDRefTable,
			Columns: []string{usermaster.UserIDRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(examnotifications.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := umu.mutation.RemovedUserIDRefIDs(); len(nodes) > 0 && !umu.mutation.UserIDRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   usermaster.UserIDRefTable,
			Columns: []string{usermaster.UserIDRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(examnotifications.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := umu.mutation.UserIDRefIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   usermaster.UserIDRefTable,
			Columns: []string{usermaster.UserIDRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(examnotifications.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if umu.mutation.UsersGDSPARefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   usermaster.UsersGDSPARefTable,
			Columns: []string{usermaster.UsersGDSPARefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_gdspa.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := umu.mutation.RemovedUsersGDSPARefIDs(); len(nodes) > 0 && !umu.mutation.UsersGDSPARefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   usermaster.UsersGDSPARefTable,
			Columns: []string{usermaster.UsersGDSPARefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_gdspa.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := umu.mutation.UsersGDSPARefIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   usermaster.UsersGDSPARefTable,
			Columns: []string{usermaster.UsersGDSPARefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_gdspa.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if umu.mutation.UsersPMPARefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   usermaster.UsersPMPARefTable,
			Columns: []string{usermaster.UsersPMPARefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_pmpa.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := umu.mutation.RemovedUsersPMPARefIDs(); len(nodes) > 0 && !umu.mutation.UsersPMPARefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   usermaster.UsersPMPARefTable,
			Columns: []string{usermaster.UsersPMPARefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_pmpa.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := umu.mutation.UsersPMPARefIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   usermaster.UsersPMPARefTable,
			Columns: []string{usermaster.UsersPMPARefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_pmpa.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if umu.mutation.UsersGDSPMRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   usermaster.UsersGDSPMRefTable,
			Columns: []string{usermaster.UsersGDSPMRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_gdspm.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := umu.mutation.RemovedUsersGDSPMRefIDs(); len(nodes) > 0 && !umu.mutation.UsersGDSPMRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   usermaster.UsersGDSPMRefTable,
			Columns: []string{usermaster.UsersGDSPMRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_gdspm.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := umu.mutation.UsersGDSPMRefIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   usermaster.UsersGDSPMRefTable,
			Columns: []string{usermaster.UsersGDSPMRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_gdspm.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if umu.mutation.LogDataCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   usermaster.LogDataTable,
			Columns: []string{usermaster.LogDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(logs.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := umu.mutation.RemovedLogDataIDs(); len(nodes) > 0 && !umu.mutation.LogDataCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   usermaster.LogDataTable,
			Columns: []string{usermaster.LogDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(logs.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := umu.mutation.LogDataIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   usermaster.LogDataTable,
			Columns: []string{usermaster.LogDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(logs.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, umu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{usermaster.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	umu.mutation.done = true
	return n, nil
}

// UserMasterUpdateOne is the builder for updating a single UserMaster entity.
type UserMasterUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserMasterMutation
}

// SetEmployeeID sets the "EmployeeID" field.
func (umuo *UserMasterUpdateOne) SetEmployeeID(i int64) *UserMasterUpdateOne {
	umuo.mutation.ResetEmployeeID()
	umuo.mutation.SetEmployeeID(i)
	return umuo
}

// SetNillableEmployeeID sets the "EmployeeID" field if the given value is not nil.
func (umuo *UserMasterUpdateOne) SetNillableEmployeeID(i *int64) *UserMasterUpdateOne {
	if i != nil {
		umuo.SetEmployeeID(*i)
	}
	return umuo
}

// AddEmployeeID adds i to the "EmployeeID" field.
func (umuo *UserMasterUpdateOne) AddEmployeeID(i int64) *UserMasterUpdateOne {
	umuo.mutation.AddEmployeeID(i)
	return umuo
}

// ClearEmployeeID clears the value of the "EmployeeID" field.
func (umuo *UserMasterUpdateOne) ClearEmployeeID() *UserMasterUpdateOne {
	umuo.mutation.ClearEmployeeID()
	return umuo
}

// SetEmployeeName sets the "EmployeeName" field.
func (umuo *UserMasterUpdateOne) SetEmployeeName(s string) *UserMasterUpdateOne {
	umuo.mutation.SetEmployeeName(s)
	return umuo
}

// SetNillableEmployeeName sets the "EmployeeName" field if the given value is not nil.
func (umuo *UserMasterUpdateOne) SetNillableEmployeeName(s *string) *UserMasterUpdateOne {
	if s != nil {
		umuo.SetEmployeeName(*s)
	}
	return umuo
}

// ClearEmployeeName clears the value of the "EmployeeName" field.
func (umuo *UserMasterUpdateOne) ClearEmployeeName() *UserMasterUpdateOne {
	umuo.mutation.ClearEmployeeName()
	return umuo
}

// SetMobile sets the "Mobile" field.
func (umuo *UserMasterUpdateOne) SetMobile(s string) *UserMasterUpdateOne {
	umuo.mutation.SetMobile(s)
	return umuo
}

// SetNillableMobile sets the "Mobile" field if the given value is not nil.
func (umuo *UserMasterUpdateOne) SetNillableMobile(s *string) *UserMasterUpdateOne {
	if s != nil {
		umuo.SetMobile(*s)
	}
	return umuo
}

// ClearMobile clears the value of the "Mobile" field.
func (umuo *UserMasterUpdateOne) ClearMobile() *UserMasterUpdateOne {
	umuo.mutation.ClearMobile()
	return umuo
}

// SetEmailID sets the "EmailID" field.
func (umuo *UserMasterUpdateOne) SetEmailID(s string) *UserMasterUpdateOne {
	umuo.mutation.SetEmailID(s)
	return umuo
}

// SetNillableEmailID sets the "EmailID" field if the given value is not nil.
func (umuo *UserMasterUpdateOne) SetNillableEmailID(s *string) *UserMasterUpdateOne {
	if s != nil {
		umuo.SetEmailID(*s)
	}
	return umuo
}

// ClearEmailID clears the value of the "EmailID" field.
func (umuo *UserMasterUpdateOne) ClearEmailID() *UserMasterUpdateOne {
	umuo.mutation.ClearEmailID()
	return umuo
}

// SetUserName sets the "UserName" field.
func (umuo *UserMasterUpdateOne) SetUserName(s string) *UserMasterUpdateOne {
	umuo.mutation.SetUserName(s)
	return umuo
}

// SetNillableUserName sets the "UserName" field if the given value is not nil.
func (umuo *UserMasterUpdateOne) SetNillableUserName(s *string) *UserMasterUpdateOne {
	if s != nil {
		umuo.SetUserName(*s)
	}
	return umuo
}

// ClearUserName clears the value of the "UserName" field.
func (umuo *UserMasterUpdateOne) ClearUserName() *UserMasterUpdateOne {
	umuo.mutation.ClearUserName()
	return umuo
}

// SetPassword sets the "Password" field.
func (umuo *UserMasterUpdateOne) SetPassword(s string) *UserMasterUpdateOne {
	umuo.mutation.SetPassword(s)
	return umuo
}

// SetNillablePassword sets the "Password" field if the given value is not nil.
func (umuo *UserMasterUpdateOne) SetNillablePassword(s *string) *UserMasterUpdateOne {
	if s != nil {
		umuo.SetPassword(*s)
	}
	return umuo
}

// ClearPassword clears the value of the "Password" field.
func (umuo *UserMasterUpdateOne) ClearPassword() *UserMasterUpdateOne {
	umuo.mutation.ClearPassword()
	return umuo
}

// SetStatus sets the "Status" field.
func (umuo *UserMasterUpdateOne) SetStatus(b bool) *UserMasterUpdateOne {
	umuo.mutation.SetStatus(b)
	return umuo
}

// SetNillableStatus sets the "Status" field if the given value is not nil.
func (umuo *UserMasterUpdateOne) SetNillableStatus(b *bool) *UserMasterUpdateOne {
	if b != nil {
		umuo.SetStatus(*b)
	}
	return umuo
}

// ClearStatus clears the value of the "Status" field.
func (umuo *UserMasterUpdateOne) ClearStatus() *UserMasterUpdateOne {
	umuo.mutation.ClearStatus()
	return umuo
}

// SetStatuss sets the "Statuss" field.
func (umuo *UserMasterUpdateOne) SetStatuss(s string) *UserMasterUpdateOne {
	umuo.mutation.SetStatuss(s)
	return umuo
}

// SetNillableStatuss sets the "Statuss" field if the given value is not nil.
func (umuo *UserMasterUpdateOne) SetNillableStatuss(s *string) *UserMasterUpdateOne {
	if s != nil {
		umuo.SetStatuss(*s)
	}
	return umuo
}

// ClearStatuss clears the value of the "Statuss" field.
func (umuo *UserMasterUpdateOne) ClearStatuss() *UserMasterUpdateOne {
	umuo.mutation.ClearStatuss()
	return umuo
}

// SetOTP sets the "OTP" field.
func (umuo *UserMasterUpdateOne) SetOTP(i int32) *UserMasterUpdateOne {
	umuo.mutation.ResetOTP()
	umuo.mutation.SetOTP(i)
	return umuo
}

// SetNillableOTP sets the "OTP" field if the given value is not nil.
func (umuo *UserMasterUpdateOne) SetNillableOTP(i *int32) *UserMasterUpdateOne {
	if i != nil {
		umuo.SetOTP(*i)
	}
	return umuo
}

// AddOTP adds i to the "OTP" field.
func (umuo *UserMasterUpdateOne) AddOTP(i int32) *UserMasterUpdateOne {
	umuo.mutation.AddOTP(i)
	return umuo
}

// ClearOTP clears the value of the "OTP" field.
func (umuo *UserMasterUpdateOne) ClearOTP() *UserMasterUpdateOne {
	umuo.mutation.ClearOTP()
	return umuo
}

// SetOTPNew sets the "OTPNew" field.
func (umuo *UserMasterUpdateOne) SetOTPNew(i int32) *UserMasterUpdateOne {
	umuo.mutation.ResetOTPNew()
	umuo.mutation.SetOTPNew(i)
	return umuo
}

// SetNillableOTPNew sets the "OTPNew" field if the given value is not nil.
func (umuo *UserMasterUpdateOne) SetNillableOTPNew(i *int32) *UserMasterUpdateOne {
	if i != nil {
		umuo.SetOTPNew(*i)
	}
	return umuo
}

// AddOTPNew adds i to the "OTPNew" field.
func (umuo *UserMasterUpdateOne) AddOTPNew(i int32) *UserMasterUpdateOne {
	umuo.mutation.AddOTPNew(i)
	return umuo
}

// ClearOTPNew clears the value of the "OTPNew" field.
func (umuo *UserMasterUpdateOne) ClearOTPNew() *UserMasterUpdateOne {
	umuo.mutation.ClearOTPNew()
	return umuo
}

// SetEmailOTPNew sets the "EmailOTPNew" field.
func (umuo *UserMasterUpdateOne) SetEmailOTPNew(i int32) *UserMasterUpdateOne {
	umuo.mutation.ResetEmailOTPNew()
	umuo.mutation.SetEmailOTPNew(i)
	return umuo
}

// SetNillableEmailOTPNew sets the "EmailOTPNew" field if the given value is not nil.
func (umuo *UserMasterUpdateOne) SetNillableEmailOTPNew(i *int32) *UserMasterUpdateOne {
	if i != nil {
		umuo.SetEmailOTPNew(*i)
	}
	return umuo
}

// AddEmailOTPNew adds i to the "EmailOTPNew" field.
func (umuo *UserMasterUpdateOne) AddEmailOTPNew(i int32) *UserMasterUpdateOne {
	umuo.mutation.AddEmailOTPNew(i)
	return umuo
}

// ClearEmailOTPNew clears the value of the "EmailOTPNew" field.
func (umuo *UserMasterUpdateOne) ClearEmailOTPNew() *UserMasterUpdateOne {
	umuo.mutation.ClearEmailOTPNew()
	return umuo
}

// SetOTPRemarks sets the "OTPRemarks" field.
func (umuo *UserMasterUpdateOne) SetOTPRemarks(s string) *UserMasterUpdateOne {
	umuo.mutation.SetOTPRemarks(s)
	return umuo
}

// SetNillableOTPRemarks sets the "OTPRemarks" field if the given value is not nil.
func (umuo *UserMasterUpdateOne) SetNillableOTPRemarks(s *string) *UserMasterUpdateOne {
	if s != nil {
		umuo.SetOTPRemarks(*s)
	}
	return umuo
}

// ClearOTPRemarks clears the value of the "OTPRemarks" field.
func (umuo *UserMasterUpdateOne) ClearOTPRemarks() *UserMasterUpdateOne {
	umuo.mutation.ClearOTPRemarks()
	return umuo
}

// SetCreatedAt sets the "CreatedAt" field.
func (umuo *UserMasterUpdateOne) SetCreatedAt(t time.Time) *UserMasterUpdateOne {
	umuo.mutation.SetCreatedAt(t)
	return umuo
}

// SetNillableCreatedAt sets the "CreatedAt" field if the given value is not nil.
func (umuo *UserMasterUpdateOne) SetNillableCreatedAt(t *time.Time) *UserMasterUpdateOne {
	if t != nil {
		umuo.SetCreatedAt(*t)
	}
	return umuo
}

// ClearCreatedAt clears the value of the "CreatedAt" field.
func (umuo *UserMasterUpdateOne) ClearCreatedAt() *UserMasterUpdateOne {
	umuo.mutation.ClearCreatedAt()
	return umuo
}

// SetOTPTriggeredTime sets the "OTPTriggeredTime" field.
func (umuo *UserMasterUpdateOne) SetOTPTriggeredTime(t time.Time) *UserMasterUpdateOne {
	umuo.mutation.SetOTPTriggeredTime(t)
	return umuo
}

// SetNillableOTPTriggeredTime sets the "OTPTriggeredTime" field if the given value is not nil.
func (umuo *UserMasterUpdateOne) SetNillableOTPTriggeredTime(t *time.Time) *UserMasterUpdateOne {
	if t != nil {
		umuo.SetOTPTriggeredTime(*t)
	}
	return umuo
}

// ClearOTPTriggeredTime clears the value of the "OTPTriggeredTime" field.
func (umuo *UserMasterUpdateOne) ClearOTPTriggeredTime() *UserMasterUpdateOne {
	umuo.mutation.ClearOTPTriggeredTime()
	return umuo
}

// SetOTPSavedTime sets the "OTPSavedTime" field.
func (umuo *UserMasterUpdateOne) SetOTPSavedTime(t time.Time) *UserMasterUpdateOne {
	umuo.mutation.SetOTPSavedTime(t)
	return umuo
}

// SetNillableOTPSavedTime sets the "OTPSavedTime" field if the given value is not nil.
func (umuo *UserMasterUpdateOne) SetNillableOTPSavedTime(t *time.Time) *UserMasterUpdateOne {
	if t != nil {
		umuo.SetOTPSavedTime(*t)
	}
	return umuo
}

// ClearOTPSavedTime clears the value of the "OTPSavedTime" field.
func (umuo *UserMasterUpdateOne) ClearOTPSavedTime() *UserMasterUpdateOne {
	umuo.mutation.ClearOTPSavedTime()
	return umuo
}

// SetOTPExpiryTime sets the "OTPExpiryTime" field.
func (umuo *UserMasterUpdateOne) SetOTPExpiryTime(t time.Time) *UserMasterUpdateOne {
	umuo.mutation.SetOTPExpiryTime(t)
	return umuo
}

// SetNillableOTPExpiryTime sets the "OTPExpiryTime" field if the given value is not nil.
func (umuo *UserMasterUpdateOne) SetNillableOTPExpiryTime(t *time.Time) *UserMasterUpdateOne {
	if t != nil {
		umuo.SetOTPExpiryTime(*t)
	}
	return umuo
}

// ClearOTPExpiryTime clears the value of the "OTPExpiryTime" field.
func (umuo *UserMasterUpdateOne) ClearOTPExpiryTime() *UserMasterUpdateOne {
	umuo.mutation.ClearOTPExpiryTime()
	return umuo
}

// SetNewPasswordRequest sets the "NewPasswordRequest" field.
func (umuo *UserMasterUpdateOne) SetNewPasswordRequest(b bool) *UserMasterUpdateOne {
	umuo.mutation.SetNewPasswordRequest(b)
	return umuo
}

// SetNillableNewPasswordRequest sets the "NewPasswordRequest" field if the given value is not nil.
func (umuo *UserMasterUpdateOne) SetNillableNewPasswordRequest(b *bool) *UserMasterUpdateOne {
	if b != nil {
		umuo.SetNewPasswordRequest(*b)
	}
	return umuo
}

// ClearNewPasswordRequest clears the value of the "NewPasswordRequest" field.
func (umuo *UserMasterUpdateOne) ClearNewPasswordRequest() *UserMasterUpdateOne {
	umuo.mutation.ClearNewPasswordRequest()
	return umuo
}

// SetEmailOTP sets the "EmailOTP" field.
func (umuo *UserMasterUpdateOne) SetEmailOTP(i int32) *UserMasterUpdateOne {
	umuo.mutation.ResetEmailOTP()
	umuo.mutation.SetEmailOTP(i)
	return umuo
}

// SetNillableEmailOTP sets the "EmailOTP" field if the given value is not nil.
func (umuo *UserMasterUpdateOne) SetNillableEmailOTP(i *int32) *UserMasterUpdateOne {
	if i != nil {
		umuo.SetEmailOTP(*i)
	}
	return umuo
}

// AddEmailOTP adds i to the "EmailOTP" field.
func (umuo *UserMasterUpdateOne) AddEmailOTP(i int32) *UserMasterUpdateOne {
	umuo.mutation.AddEmailOTP(i)
	return umuo
}

// ClearEmailOTP clears the value of the "EmailOTP" field.
func (umuo *UserMasterUpdateOne) ClearEmailOTP() *UserMasterUpdateOne {
	umuo.mutation.ClearEmailOTP()
	return umuo
}

// SetEmailOTPRemarks sets the "EmailOTPRemarks" field.
func (umuo *UserMasterUpdateOne) SetEmailOTPRemarks(s string) *UserMasterUpdateOne {
	umuo.mutation.SetEmailOTPRemarks(s)
	return umuo
}

// SetNillableEmailOTPRemarks sets the "EmailOTPRemarks" field if the given value is not nil.
func (umuo *UserMasterUpdateOne) SetNillableEmailOTPRemarks(s *string) *UserMasterUpdateOne {
	if s != nil {
		umuo.SetEmailOTPRemarks(*s)
	}
	return umuo
}

// ClearEmailOTPRemarks clears the value of the "EmailOTPRemarks" field.
func (umuo *UserMasterUpdateOne) ClearEmailOTPRemarks() *UserMasterUpdateOne {
	umuo.mutation.ClearEmailOTPRemarks()
	return umuo
}

// SetEmailCreatedAt sets the "EmailCreatedAt" field.
func (umuo *UserMasterUpdateOne) SetEmailCreatedAt(t time.Time) *UserMasterUpdateOne {
	umuo.mutation.SetEmailCreatedAt(t)
	return umuo
}

// SetNillableEmailCreatedAt sets the "EmailCreatedAt" field if the given value is not nil.
func (umuo *UserMasterUpdateOne) SetNillableEmailCreatedAt(t *time.Time) *UserMasterUpdateOne {
	if t != nil {
		umuo.SetEmailCreatedAt(*t)
	}
	return umuo
}

// ClearEmailCreatedAt clears the value of the "EmailCreatedAt" field.
func (umuo *UserMasterUpdateOne) ClearEmailCreatedAt() *UserMasterUpdateOne {
	umuo.mutation.ClearEmailCreatedAt()
	return umuo
}

// SetEmailOTPTriggeredTime sets the "EmailOTPTriggeredTime" field.
func (umuo *UserMasterUpdateOne) SetEmailOTPTriggeredTime(t time.Time) *UserMasterUpdateOne {
	umuo.mutation.SetEmailOTPTriggeredTime(t)
	return umuo
}

// SetNillableEmailOTPTriggeredTime sets the "EmailOTPTriggeredTime" field if the given value is not nil.
func (umuo *UserMasterUpdateOne) SetNillableEmailOTPTriggeredTime(t *time.Time) *UserMasterUpdateOne {
	if t != nil {
		umuo.SetEmailOTPTriggeredTime(*t)
	}
	return umuo
}

// ClearEmailOTPTriggeredTime clears the value of the "EmailOTPTriggeredTime" field.
func (umuo *UserMasterUpdateOne) ClearEmailOTPTriggeredTime() *UserMasterUpdateOne {
	umuo.mutation.ClearEmailOTPTriggeredTime()
	return umuo
}

// SetEmailOTPSavedTime sets the "EmailOTPSavedTime" field.
func (umuo *UserMasterUpdateOne) SetEmailOTPSavedTime(t time.Time) *UserMasterUpdateOne {
	umuo.mutation.SetEmailOTPSavedTime(t)
	return umuo
}

// SetNillableEmailOTPSavedTime sets the "EmailOTPSavedTime" field if the given value is not nil.
func (umuo *UserMasterUpdateOne) SetNillableEmailOTPSavedTime(t *time.Time) *UserMasterUpdateOne {
	if t != nil {
		umuo.SetEmailOTPSavedTime(*t)
	}
	return umuo
}

// ClearEmailOTPSavedTime clears the value of the "EmailOTPSavedTime" field.
func (umuo *UserMasterUpdateOne) ClearEmailOTPSavedTime() *UserMasterUpdateOne {
	umuo.mutation.ClearEmailOTPSavedTime()
	return umuo
}

// SetEmailOTPExpiryTime sets the "EmailOTPExpiryTime" field.
func (umuo *UserMasterUpdateOne) SetEmailOTPExpiryTime(t time.Time) *UserMasterUpdateOne {
	umuo.mutation.SetEmailOTPExpiryTime(t)
	return umuo
}

// SetNillableEmailOTPExpiryTime sets the "EmailOTPExpiryTime" field if the given value is not nil.
func (umuo *UserMasterUpdateOne) SetNillableEmailOTPExpiryTime(t *time.Time) *UserMasterUpdateOne {
	if t != nil {
		umuo.SetEmailOTPExpiryTime(*t)
	}
	return umuo
}

// ClearEmailOTPExpiryTime clears the value of the "EmailOTPExpiryTime" field.
func (umuo *UserMasterUpdateOne) ClearEmailOTPExpiryTime() *UserMasterUpdateOne {
	umuo.mutation.ClearEmailOTPExpiryTime()
	return umuo
}

// SetEmailNewPasswordRequest sets the "EmailNewPasswordRequest" field.
func (umuo *UserMasterUpdateOne) SetEmailNewPasswordRequest(b bool) *UserMasterUpdateOne {
	umuo.mutation.SetEmailNewPasswordRequest(b)
	return umuo
}

// SetNillableEmailNewPasswordRequest sets the "EmailNewPasswordRequest" field if the given value is not nil.
func (umuo *UserMasterUpdateOne) SetNillableEmailNewPasswordRequest(b *bool) *UserMasterUpdateOne {
	if b != nil {
		umuo.SetEmailNewPasswordRequest(*b)
	}
	return umuo
}

// ClearEmailNewPasswordRequest clears the value of the "EmailNewPasswordRequest" field.
func (umuo *UserMasterUpdateOne) ClearEmailNewPasswordRequest() *UserMasterUpdateOne {
	umuo.mutation.ClearEmailNewPasswordRequest()
	return umuo
}

// SetUidToken sets the "UidToken" field.
func (umuo *UserMasterUpdateOne) SetUidToken(s string) *UserMasterUpdateOne {
	umuo.mutation.SetUidToken(s)
	return umuo
}

// SetNillableUidToken sets the "UidToken" field if the given value is not nil.
func (umuo *UserMasterUpdateOne) SetNillableUidToken(s *string) *UserMasterUpdateOne {
	if s != nil {
		umuo.SetUidToken(*s)
	}
	return umuo
}

// ClearUidToken clears the value of the "UidToken" field.
func (umuo *UserMasterUpdateOne) ClearUidToken() *UserMasterUpdateOne {
	umuo.mutation.ClearUidToken()
	return umuo
}

// SetCreatedById sets the "CreatedById" field.
func (umuo *UserMasterUpdateOne) SetCreatedById(i int64) *UserMasterUpdateOne {
	umuo.mutation.ResetCreatedById()
	umuo.mutation.SetCreatedById(i)
	return umuo
}

// SetNillableCreatedById sets the "CreatedById" field if the given value is not nil.
func (umuo *UserMasterUpdateOne) SetNillableCreatedById(i *int64) *UserMasterUpdateOne {
	if i != nil {
		umuo.SetCreatedById(*i)
	}
	return umuo
}

// AddCreatedById adds i to the "CreatedById" field.
func (umuo *UserMasterUpdateOne) AddCreatedById(i int64) *UserMasterUpdateOne {
	umuo.mutation.AddCreatedById(i)
	return umuo
}

// ClearCreatedById clears the value of the "CreatedById" field.
func (umuo *UserMasterUpdateOne) ClearCreatedById() *UserMasterUpdateOne {
	umuo.mutation.ClearCreatedById()
	return umuo
}

// SetCreatedByEmployeeId sets the "CreatedByEmployeeId" field.
func (umuo *UserMasterUpdateOne) SetCreatedByEmployeeId(s string) *UserMasterUpdateOne {
	umuo.mutation.SetCreatedByEmployeeId(s)
	return umuo
}

// SetNillableCreatedByEmployeeId sets the "CreatedByEmployeeId" field if the given value is not nil.
func (umuo *UserMasterUpdateOne) SetNillableCreatedByEmployeeId(s *string) *UserMasterUpdateOne {
	if s != nil {
		umuo.SetCreatedByEmployeeId(*s)
	}
	return umuo
}

// ClearCreatedByEmployeeId clears the value of the "CreatedByEmployeeId" field.
func (umuo *UserMasterUpdateOne) ClearCreatedByEmployeeId() *UserMasterUpdateOne {
	umuo.mutation.ClearCreatedByEmployeeId()
	return umuo
}

// SetCreatedByUserName sets the "CreatedByUserName" field.
func (umuo *UserMasterUpdateOne) SetCreatedByUserName(s string) *UserMasterUpdateOne {
	umuo.mutation.SetCreatedByUserName(s)
	return umuo
}

// SetNillableCreatedByUserName sets the "CreatedByUserName" field if the given value is not nil.
func (umuo *UserMasterUpdateOne) SetNillableCreatedByUserName(s *string) *UserMasterUpdateOne {
	if s != nil {
		umuo.SetCreatedByUserName(*s)
	}
	return umuo
}

// ClearCreatedByUserName clears the value of the "CreatedByUserName" field.
func (umuo *UserMasterUpdateOne) ClearCreatedByUserName() *UserMasterUpdateOne {
	umuo.mutation.ClearCreatedByUserName()
	return umuo
}

// SetCreatedByDesignation sets the "CreatedByDesignation" field.
func (umuo *UserMasterUpdateOne) SetCreatedByDesignation(s string) *UserMasterUpdateOne {
	umuo.mutation.SetCreatedByDesignation(s)
	return umuo
}

// SetNillableCreatedByDesignation sets the "CreatedByDesignation" field if the given value is not nil.
func (umuo *UserMasterUpdateOne) SetNillableCreatedByDesignation(s *string) *UserMasterUpdateOne {
	if s != nil {
		umuo.SetCreatedByDesignation(*s)
	}
	return umuo
}

// ClearCreatedByDesignation clears the value of the "CreatedByDesignation" field.
func (umuo *UserMasterUpdateOne) ClearCreatedByDesignation() *UserMasterUpdateOne {
	umuo.mutation.ClearCreatedByDesignation()
	return umuo
}

// SetCreatedDate sets the "CreatedDate" field.
func (umuo *UserMasterUpdateOne) SetCreatedDate(t time.Time) *UserMasterUpdateOne {
	umuo.mutation.SetCreatedDate(t)
	return umuo
}

// SetNillableCreatedDate sets the "CreatedDate" field if the given value is not nil.
func (umuo *UserMasterUpdateOne) SetNillableCreatedDate(t *time.Time) *UserMasterUpdateOne {
	if t != nil {
		umuo.SetCreatedDate(*t)
	}
	return umuo
}

// ClearCreatedDate clears the value of the "CreatedDate" field.
func (umuo *UserMasterUpdateOne) ClearCreatedDate() *UserMasterUpdateOne {
	umuo.mutation.ClearCreatedDate()
	return umuo
}

// SetDeletedById sets the "DeletedById" field.
func (umuo *UserMasterUpdateOne) SetDeletedById(i int64) *UserMasterUpdateOne {
	umuo.mutation.ResetDeletedById()
	umuo.mutation.SetDeletedById(i)
	return umuo
}

// SetNillableDeletedById sets the "DeletedById" field if the given value is not nil.
func (umuo *UserMasterUpdateOne) SetNillableDeletedById(i *int64) *UserMasterUpdateOne {
	if i != nil {
		umuo.SetDeletedById(*i)
	}
	return umuo
}

// AddDeletedById adds i to the "DeletedById" field.
func (umuo *UserMasterUpdateOne) AddDeletedById(i int64) *UserMasterUpdateOne {
	umuo.mutation.AddDeletedById(i)
	return umuo
}

// ClearDeletedById clears the value of the "DeletedById" field.
func (umuo *UserMasterUpdateOne) ClearDeletedById() *UserMasterUpdateOne {
	umuo.mutation.ClearDeletedById()
	return umuo
}

// SetDeletedByEmployeeId sets the "DeletedByEmployeeId" field.
func (umuo *UserMasterUpdateOne) SetDeletedByEmployeeId(s string) *UserMasterUpdateOne {
	umuo.mutation.SetDeletedByEmployeeId(s)
	return umuo
}

// SetNillableDeletedByEmployeeId sets the "DeletedByEmployeeId" field if the given value is not nil.
func (umuo *UserMasterUpdateOne) SetNillableDeletedByEmployeeId(s *string) *UserMasterUpdateOne {
	if s != nil {
		umuo.SetDeletedByEmployeeId(*s)
	}
	return umuo
}

// ClearDeletedByEmployeeId clears the value of the "DeletedByEmployeeId" field.
func (umuo *UserMasterUpdateOne) ClearDeletedByEmployeeId() *UserMasterUpdateOne {
	umuo.mutation.ClearDeletedByEmployeeId()
	return umuo
}

// SetDeletedByUserName sets the "DeletedByUserName" field.
func (umuo *UserMasterUpdateOne) SetDeletedByUserName(s string) *UserMasterUpdateOne {
	umuo.mutation.SetDeletedByUserName(s)
	return umuo
}

// SetNillableDeletedByUserName sets the "DeletedByUserName" field if the given value is not nil.
func (umuo *UserMasterUpdateOne) SetNillableDeletedByUserName(s *string) *UserMasterUpdateOne {
	if s != nil {
		umuo.SetDeletedByUserName(*s)
	}
	return umuo
}

// ClearDeletedByUserName clears the value of the "DeletedByUserName" field.
func (umuo *UserMasterUpdateOne) ClearDeletedByUserName() *UserMasterUpdateOne {
	umuo.mutation.ClearDeletedByUserName()
	return umuo
}

// SetDeletedByDesignation sets the "DeletedByDesignation" field.
func (umuo *UserMasterUpdateOne) SetDeletedByDesignation(s string) *UserMasterUpdateOne {
	umuo.mutation.SetDeletedByDesignation(s)
	return umuo
}

// SetNillableDeletedByDesignation sets the "DeletedByDesignation" field if the given value is not nil.
func (umuo *UserMasterUpdateOne) SetNillableDeletedByDesignation(s *string) *UserMasterUpdateOne {
	if s != nil {
		umuo.SetDeletedByDesignation(*s)
	}
	return umuo
}

// ClearDeletedByDesignation clears the value of the "DeletedByDesignation" field.
func (umuo *UserMasterUpdateOne) ClearDeletedByDesignation() *UserMasterUpdateOne {
	umuo.mutation.ClearDeletedByDesignation()
	return umuo
}

// SetDeletedDate sets the "DeletedDate" field.
func (umuo *UserMasterUpdateOne) SetDeletedDate(t time.Time) *UserMasterUpdateOne {
	umuo.mutation.SetDeletedDate(t)
	return umuo
}

// SetNillableDeletedDate sets the "DeletedDate" field if the given value is not nil.
func (umuo *UserMasterUpdateOne) SetNillableDeletedDate(t *time.Time) *UserMasterUpdateOne {
	if t != nil {
		umuo.SetDeletedDate(*t)
	}
	return umuo
}

// ClearDeletedDate clears the value of the "DeletedDate" field.
func (umuo *UserMasterUpdateOne) ClearDeletedDate() *UserMasterUpdateOne {
	umuo.mutation.ClearDeletedDate()
	return umuo
}

// SetFacilityID sets the "FacilityID" field.
func (umuo *UserMasterUpdateOne) SetFacilityID(s string) *UserMasterUpdateOne {
	umuo.mutation.SetFacilityID(s)
	return umuo
}

// SetNillableFacilityID sets the "FacilityID" field if the given value is not nil.
func (umuo *UserMasterUpdateOne) SetNillableFacilityID(s *string) *UserMasterUpdateOne {
	if s != nil {
		umuo.SetFacilityID(*s)
	}
	return umuo
}

// ClearFacilityID clears the value of the "FacilityID" field.
func (umuo *UserMasterUpdateOne) ClearFacilityID() *UserMasterUpdateOne {
	umuo.mutation.ClearFacilityID()
	return umuo
}

// SetCircleFacilityId sets the "CircleFacilityId" field.
func (umuo *UserMasterUpdateOne) SetCircleFacilityId(s string) *UserMasterUpdateOne {
	umuo.mutation.SetCircleFacilityId(s)
	return umuo
}

// SetNillableCircleFacilityId sets the "CircleFacilityId" field if the given value is not nil.
func (umuo *UserMasterUpdateOne) SetNillableCircleFacilityId(s *string) *UserMasterUpdateOne {
	if s != nil {
		umuo.SetCircleFacilityId(*s)
	}
	return umuo
}

// ClearCircleFacilityId clears the value of the "CircleFacilityId" field.
func (umuo *UserMasterUpdateOne) ClearCircleFacilityId() *UserMasterUpdateOne {
	umuo.mutation.ClearCircleFacilityId()
	return umuo
}

// SetCircleFacilityName sets the "CircleFacilityName" field.
func (umuo *UserMasterUpdateOne) SetCircleFacilityName(s string) *UserMasterUpdateOne {
	umuo.mutation.SetCircleFacilityName(s)
	return umuo
}

// SetNillableCircleFacilityName sets the "CircleFacilityName" field if the given value is not nil.
func (umuo *UserMasterUpdateOne) SetNillableCircleFacilityName(s *string) *UserMasterUpdateOne {
	if s != nil {
		umuo.SetCircleFacilityName(*s)
	}
	return umuo
}

// ClearCircleFacilityName clears the value of the "CircleFacilityName" field.
func (umuo *UserMasterUpdateOne) ClearCircleFacilityName() *UserMasterUpdateOne {
	umuo.mutation.ClearCircleFacilityName()
	return umuo
}

// SetDesignation sets the "Designation" field.
func (umuo *UserMasterUpdateOne) SetDesignation(s string) *UserMasterUpdateOne {
	umuo.mutation.SetDesignation(s)
	return umuo
}

// SetNillableDesignation sets the "Designation" field if the given value is not nil.
func (umuo *UserMasterUpdateOne) SetNillableDesignation(s *string) *UserMasterUpdateOne {
	if s != nil {
		umuo.SetDesignation(*s)
	}
	return umuo
}

// ClearDesignation clears the value of the "Designation" field.
func (umuo *UserMasterUpdateOne) ClearDesignation() *UserMasterUpdateOne {
	umuo.mutation.ClearDesignation()
	return umuo
}

// SetRoleUserCode sets the "RoleUserCode" field.
func (umuo *UserMasterUpdateOne) SetRoleUserCode(i int32) *UserMasterUpdateOne {
	umuo.mutation.SetRoleUserCode(i)
	return umuo
}

// SetNillableRoleUserCode sets the "RoleUserCode" field if the given value is not nil.
func (umuo *UserMasterUpdateOne) SetNillableRoleUserCode(i *int32) *UserMasterUpdateOne {
	if i != nil {
		umuo.SetRoleUserCode(*i)
	}
	return umuo
}

// ClearRoleUserCode clears the value of the "RoleUserCode" field.
func (umuo *UserMasterUpdateOne) ClearRoleUserCode() *UserMasterUpdateOne {
	umuo.mutation.ClearRoleUserCode()
	return umuo
}

// SetUpdatedby sets the "Updatedby" field.
func (umuo *UserMasterUpdateOne) SetUpdatedby(s string) *UserMasterUpdateOne {
	umuo.mutation.SetUpdatedby(s)
	return umuo
}

// SetNillableUpdatedby sets the "Updatedby" field if the given value is not nil.
func (umuo *UserMasterUpdateOne) SetNillableUpdatedby(s *string) *UserMasterUpdateOne {
	if s != nil {
		umuo.SetUpdatedby(*s)
	}
	return umuo
}

// ClearUpdatedby clears the value of the "Updatedby" field.
func (umuo *UserMasterUpdateOne) ClearUpdatedby() *UserMasterUpdateOne {
	umuo.mutation.ClearUpdatedby()
	return umuo
}

// SetUpdatedDate sets the "updatedDate" field.
func (umuo *UserMasterUpdateOne) SetUpdatedDate(t time.Time) *UserMasterUpdateOne {
	umuo.mutation.SetUpdatedDate(t)
	return umuo
}

// SetNillableUpdatedDate sets the "updatedDate" field if the given value is not nil.
func (umuo *UserMasterUpdateOne) SetNillableUpdatedDate(t *time.Time) *UserMasterUpdateOne {
	if t != nil {
		umuo.SetUpdatedDate(*t)
	}
	return umuo
}

// ClearUpdatedDate clears the value of the "updatedDate" field.
func (umuo *UserMasterUpdateOne) ClearUpdatedDate() *UserMasterUpdateOne {
	umuo.mutation.ClearUpdatedDate()
	return umuo
}

// SetModifiedby sets the "Modifiedby" field.
func (umuo *UserMasterUpdateOne) SetModifiedby(s string) *UserMasterUpdateOne {
	umuo.mutation.SetModifiedby(s)
	return umuo
}

// SetNillableModifiedby sets the "Modifiedby" field if the given value is not nil.
func (umuo *UserMasterUpdateOne) SetNillableModifiedby(s *string) *UserMasterUpdateOne {
	if s != nil {
		umuo.SetModifiedby(*s)
	}
	return umuo
}

// ClearModifiedby clears the value of the "Modifiedby" field.
func (umuo *UserMasterUpdateOne) ClearModifiedby() *UserMasterUpdateOne {
	umuo.mutation.ClearModifiedby()
	return umuo
}

// SetModifiedDate sets the "ModifiedDate" field.
func (umuo *UserMasterUpdateOne) SetModifiedDate(t time.Time) *UserMasterUpdateOne {
	umuo.mutation.SetModifiedDate(t)
	return umuo
}

// SetNillableModifiedDate sets the "ModifiedDate" field if the given value is not nil.
func (umuo *UserMasterUpdateOne) SetNillableModifiedDate(t *time.Time) *UserMasterUpdateOne {
	if t != nil {
		umuo.SetModifiedDate(*t)
	}
	return umuo
}

// ClearModifiedDate clears the value of the "ModifiedDate" field.
func (umuo *UserMasterUpdateOne) ClearModifiedDate() *UserMasterUpdateOne {
	umuo.mutation.ClearModifiedDate()
	return umuo
}

// SetOperationstatus sets the "Operationstatus" field.
func (umuo *UserMasterUpdateOne) SetOperationstatus(s string) *UserMasterUpdateOne {
	umuo.mutation.SetOperationstatus(s)
	return umuo
}

// SetNillableOperationstatus sets the "Operationstatus" field if the given value is not nil.
func (umuo *UserMasterUpdateOne) SetNillableOperationstatus(s *string) *UserMasterUpdateOne {
	if s != nil {
		umuo.SetOperationstatus(*s)
	}
	return umuo
}

// ClearOperationstatus clears the value of the "Operationstatus" field.
func (umuo *UserMasterUpdateOne) ClearOperationstatus() *UserMasterUpdateOne {
	umuo.mutation.ClearOperationstatus()
	return umuo
}

// SetExamCode sets the "ExamCode" field.
func (umuo *UserMasterUpdateOne) SetExamCode(i int32) *UserMasterUpdateOne {
	umuo.mutation.ResetExamCode()
	umuo.mutation.SetExamCode(i)
	return umuo
}

// SetNillableExamCode sets the "ExamCode" field if the given value is not nil.
func (umuo *UserMasterUpdateOne) SetNillableExamCode(i *int32) *UserMasterUpdateOne {
	if i != nil {
		umuo.SetExamCode(*i)
	}
	return umuo
}

// AddExamCode adds i to the "ExamCode" field.
func (umuo *UserMasterUpdateOne) AddExamCode(i int32) *UserMasterUpdateOne {
	umuo.mutation.AddExamCode(i)
	return umuo
}

// ClearExamCode clears the value of the "ExamCode" field.
func (umuo *UserMasterUpdateOne) ClearExamCode() *UserMasterUpdateOne {
	umuo.mutation.ClearExamCode()
	return umuo
}

// SetExamCodePS sets the "ExamCodePS" field.
func (umuo *UserMasterUpdateOne) SetExamCodePS(i int32) *UserMasterUpdateOne {
	umuo.mutation.ResetExamCodePS()
	umuo.mutation.SetExamCodePS(i)
	return umuo
}

// SetNillableExamCodePS sets the "ExamCodePS" field if the given value is not nil.
func (umuo *UserMasterUpdateOne) SetNillableExamCodePS(i *int32) *UserMasterUpdateOne {
	if i != nil {
		umuo.SetExamCodePS(*i)
	}
	return umuo
}

// AddExamCodePS adds i to the "ExamCodePS" field.
func (umuo *UserMasterUpdateOne) AddExamCodePS(i int32) *UserMasterUpdateOne {
	umuo.mutation.AddExamCodePS(i)
	return umuo
}

// ClearExamCodePS clears the value of the "ExamCodePS" field.
func (umuo *UserMasterUpdateOne) ClearExamCodePS() *UserMasterUpdateOne {
	umuo.mutation.ClearExamCodePS()
	return umuo
}

// SetGender sets the "Gender" field.
func (umuo *UserMasterUpdateOne) SetGender(u usermaster.Gender) *UserMasterUpdateOne {
	umuo.mutation.SetGender(u)
	return umuo
}

// SetNillableGender sets the "Gender" field if the given value is not nil.
func (umuo *UserMasterUpdateOne) SetNillableGender(u *usermaster.Gender) *UserMasterUpdateOne {
	if u != nil {
		umuo.SetGender(*u)
	}
	return umuo
}

// ClearGender clears the value of the "Gender" field.
func (umuo *UserMasterUpdateOne) ClearGender() *UserMasterUpdateOne {
	umuo.mutation.ClearGender()
	return umuo
}

// SetDOB sets the "DOB" field.
func (umuo *UserMasterUpdateOne) SetDOB(s string) *UserMasterUpdateOne {
	umuo.mutation.SetDOB(s)
	return umuo
}

// SetNillableDOB sets the "DOB" field if the given value is not nil.
func (umuo *UserMasterUpdateOne) SetNillableDOB(s *string) *UserMasterUpdateOne {
	if s != nil {
		umuo.SetDOB(*s)
	}
	return umuo
}

// ClearDOB clears the value of the "DOB" field.
func (umuo *UserMasterUpdateOne) ClearDOB() *UserMasterUpdateOne {
	umuo.mutation.ClearDOB()
	return umuo
}

// SetCreatedBy sets the "CreatedBy" field.
func (umuo *UserMasterUpdateOne) SetCreatedBy(s string) *UserMasterUpdateOne {
	umuo.mutation.SetCreatedBy(s)
	return umuo
}

// SetNillableCreatedBy sets the "CreatedBy" field if the given value is not nil.
func (umuo *UserMasterUpdateOne) SetNillableCreatedBy(s *string) *UserMasterUpdateOne {
	if s != nil {
		umuo.SetCreatedBy(*s)
	}
	return umuo
}

// ClearCreatedBy clears the value of the "CreatedBy" field.
func (umuo *UserMasterUpdateOne) ClearCreatedBy() *UserMasterUpdateOne {
	umuo.mutation.ClearCreatedBy()
	return umuo
}

// SetRolesID sets the "roles" edge to the RoleMaster entity by ID.
func (umuo *UserMasterUpdateOne) SetRolesID(id int32) *UserMasterUpdateOne {
	umuo.mutation.SetRolesID(id)
	return umuo
}

// SetNillableRolesID sets the "roles" edge to the RoleMaster entity by ID if the given value is not nil.
func (umuo *UserMasterUpdateOne) SetNillableRolesID(id *int32) *UserMasterUpdateOne {
	if id != nil {
		umuo = umuo.SetRolesID(*id)
	}
	return umuo
}

// SetRoles sets the "roles" edge to the RoleMaster entity.
func (umuo *UserMasterUpdateOne) SetRoles(r *RoleMaster) *UserMasterUpdateOne {
	return umuo.SetRolesID(r.ID)
}

// AddUsermasterRefIDs adds the "UsermasterRef" edge to the EmployeeMaster entity by IDs.
func (umuo *UserMasterUpdateOne) AddUsermasterRefIDs(ids ...int64) *UserMasterUpdateOne {
	umuo.mutation.AddUsermasterRefIDs(ids...)
	return umuo
}

// AddUsermasterRef adds the "UsermasterRef" edges to the EmployeeMaster entity.
func (umuo *UserMasterUpdateOne) AddUsermasterRef(e ...*EmployeeMaster) *UserMasterUpdateOne {
	ids := make([]int64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return umuo.AddUsermasterRefIDs(ids...)
}

// AddUsersPSRefIDs adds the "UsersPSRef" edge to the Exam_Applications_PS entity by IDs.
func (umuo *UserMasterUpdateOne) AddUsersPSRefIDs(ids ...int64) *UserMasterUpdateOne {
	umuo.mutation.AddUsersPSRefIDs(ids...)
	return umuo
}

// AddUsersPSRef adds the "UsersPSRef" edges to the Exam_Applications_PS entity.
func (umuo *UserMasterUpdateOne) AddUsersPSRef(e ...*Exam_Applications_PS) *UserMasterUpdateOne {
	ids := make([]int64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return umuo.AddUsersPSRefIDs(ids...)
}

// AddUsersIPRefIDs adds the "UsersIPRef" edge to the Exam_Applications_IP entity by IDs.
func (umuo *UserMasterUpdateOne) AddUsersIPRefIDs(ids ...int64) *UserMasterUpdateOne {
	umuo.mutation.AddUsersIPRefIDs(ids...)
	return umuo
}

// AddUsersIPRef adds the "UsersIPRef" edges to the Exam_Applications_IP entity.
func (umuo *UserMasterUpdateOne) AddUsersIPRef(e ...*Exam_Applications_IP) *UserMasterUpdateOne {
	ids := make([]int64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return umuo.AddUsersIPRefIDs(ids...)
}

// AddUserIDRefIDs adds the "User_ID_Ref" edge to the ExamNotifications entity by IDs.
func (umuo *UserMasterUpdateOne) AddUserIDRefIDs(ids ...int32) *UserMasterUpdateOne {
	umuo.mutation.AddUserIDRefIDs(ids...)
	return umuo
}

// AddUserIDRef adds the "User_ID_Ref" edges to the ExamNotifications entity.
func (umuo *UserMasterUpdateOne) AddUserIDRef(e ...*ExamNotifications) *UserMasterUpdateOne {
	ids := make([]int32, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return umuo.AddUserIDRefIDs(ids...)
}

// AddUsersGDSPARefIDs adds the "UsersGDSPARef" edge to the Exam_Applications_GDSPA entity by IDs.
func (umuo *UserMasterUpdateOne) AddUsersGDSPARefIDs(ids ...int64) *UserMasterUpdateOne {
	umuo.mutation.AddUsersGDSPARefIDs(ids...)
	return umuo
}

// AddUsersGDSPARef adds the "UsersGDSPARef" edges to the Exam_Applications_GDSPA entity.
func (umuo *UserMasterUpdateOne) AddUsersGDSPARef(e ...*Exam_Applications_GDSPA) *UserMasterUpdateOne {
	ids := make([]int64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return umuo.AddUsersGDSPARefIDs(ids...)
}

// AddUsersPMPARefIDs adds the "UsersPMPARef" edge to the Exam_Applications_PMPA entity by IDs.
func (umuo *UserMasterUpdateOne) AddUsersPMPARefIDs(ids ...int64) *UserMasterUpdateOne {
	umuo.mutation.AddUsersPMPARefIDs(ids...)
	return umuo
}

// AddUsersPMPARef adds the "UsersPMPARef" edges to the Exam_Applications_PMPA entity.
func (umuo *UserMasterUpdateOne) AddUsersPMPARef(e ...*Exam_Applications_PMPA) *UserMasterUpdateOne {
	ids := make([]int64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return umuo.AddUsersPMPARefIDs(ids...)
}

// AddUsersGDSPMRefIDs adds the "UsersGDSPMRef" edge to the Exam_Applications_GDSPM entity by IDs.
func (umuo *UserMasterUpdateOne) AddUsersGDSPMRefIDs(ids ...int64) *UserMasterUpdateOne {
	umuo.mutation.AddUsersGDSPMRefIDs(ids...)
	return umuo
}

// AddUsersGDSPMRef adds the "UsersGDSPMRef" edges to the Exam_Applications_GDSPM entity.
func (umuo *UserMasterUpdateOne) AddUsersGDSPMRef(e ...*Exam_Applications_GDSPM) *UserMasterUpdateOne {
	ids := make([]int64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return umuo.AddUsersGDSPMRefIDs(ids...)
}

// AddLogDatumIDs adds the "LogData" edge to the Logs entity by IDs.
func (umuo *UserMasterUpdateOne) AddLogDatumIDs(ids ...int64) *UserMasterUpdateOne {
	umuo.mutation.AddLogDatumIDs(ids...)
	return umuo
}

// AddLogData adds the "LogData" edges to the Logs entity.
func (umuo *UserMasterUpdateOne) AddLogData(l ...*Logs) *UserMasterUpdateOne {
	ids := make([]int64, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return umuo.AddLogDatumIDs(ids...)
}

// Mutation returns the UserMasterMutation object of the builder.
func (umuo *UserMasterUpdateOne) Mutation() *UserMasterMutation {
	return umuo.mutation
}

// ClearRoles clears the "roles" edge to the RoleMaster entity.
func (umuo *UserMasterUpdateOne) ClearRoles() *UserMasterUpdateOne {
	umuo.mutation.ClearRoles()
	return umuo
}

// ClearUsermasterRef clears all "UsermasterRef" edges to the EmployeeMaster entity.
func (umuo *UserMasterUpdateOne) ClearUsermasterRef() *UserMasterUpdateOne {
	umuo.mutation.ClearUsermasterRef()
	return umuo
}

// RemoveUsermasterRefIDs removes the "UsermasterRef" edge to EmployeeMaster entities by IDs.
func (umuo *UserMasterUpdateOne) RemoveUsermasterRefIDs(ids ...int64) *UserMasterUpdateOne {
	umuo.mutation.RemoveUsermasterRefIDs(ids...)
	return umuo
}

// RemoveUsermasterRef removes "UsermasterRef" edges to EmployeeMaster entities.
func (umuo *UserMasterUpdateOne) RemoveUsermasterRef(e ...*EmployeeMaster) *UserMasterUpdateOne {
	ids := make([]int64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return umuo.RemoveUsermasterRefIDs(ids...)
}

// ClearUsersPSRef clears all "UsersPSRef" edges to the Exam_Applications_PS entity.
func (umuo *UserMasterUpdateOne) ClearUsersPSRef() *UserMasterUpdateOne {
	umuo.mutation.ClearUsersPSRef()
	return umuo
}

// RemoveUsersPSRefIDs removes the "UsersPSRef" edge to Exam_Applications_PS entities by IDs.
func (umuo *UserMasterUpdateOne) RemoveUsersPSRefIDs(ids ...int64) *UserMasterUpdateOne {
	umuo.mutation.RemoveUsersPSRefIDs(ids...)
	return umuo
}

// RemoveUsersPSRef removes "UsersPSRef" edges to Exam_Applications_PS entities.
func (umuo *UserMasterUpdateOne) RemoveUsersPSRef(e ...*Exam_Applications_PS) *UserMasterUpdateOne {
	ids := make([]int64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return umuo.RemoveUsersPSRefIDs(ids...)
}

// ClearUsersIPRef clears all "UsersIPRef" edges to the Exam_Applications_IP entity.
func (umuo *UserMasterUpdateOne) ClearUsersIPRef() *UserMasterUpdateOne {
	umuo.mutation.ClearUsersIPRef()
	return umuo
}

// RemoveUsersIPRefIDs removes the "UsersIPRef" edge to Exam_Applications_IP entities by IDs.
func (umuo *UserMasterUpdateOne) RemoveUsersIPRefIDs(ids ...int64) *UserMasterUpdateOne {
	umuo.mutation.RemoveUsersIPRefIDs(ids...)
	return umuo
}

// RemoveUsersIPRef removes "UsersIPRef" edges to Exam_Applications_IP entities.
func (umuo *UserMasterUpdateOne) RemoveUsersIPRef(e ...*Exam_Applications_IP) *UserMasterUpdateOne {
	ids := make([]int64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return umuo.RemoveUsersIPRefIDs(ids...)
}

// ClearUserIDRef clears all "User_ID_Ref" edges to the ExamNotifications entity.
func (umuo *UserMasterUpdateOne) ClearUserIDRef() *UserMasterUpdateOne {
	umuo.mutation.ClearUserIDRef()
	return umuo
}

// RemoveUserIDRefIDs removes the "User_ID_Ref" edge to ExamNotifications entities by IDs.
func (umuo *UserMasterUpdateOne) RemoveUserIDRefIDs(ids ...int32) *UserMasterUpdateOne {
	umuo.mutation.RemoveUserIDRefIDs(ids...)
	return umuo
}

// RemoveUserIDRef removes "User_ID_Ref" edges to ExamNotifications entities.
func (umuo *UserMasterUpdateOne) RemoveUserIDRef(e ...*ExamNotifications) *UserMasterUpdateOne {
	ids := make([]int32, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return umuo.RemoveUserIDRefIDs(ids...)
}

// ClearUsersGDSPARef clears all "UsersGDSPARef" edges to the Exam_Applications_GDSPA entity.
func (umuo *UserMasterUpdateOne) ClearUsersGDSPARef() *UserMasterUpdateOne {
	umuo.mutation.ClearUsersGDSPARef()
	return umuo
}

// RemoveUsersGDSPARefIDs removes the "UsersGDSPARef" edge to Exam_Applications_GDSPA entities by IDs.
func (umuo *UserMasterUpdateOne) RemoveUsersGDSPARefIDs(ids ...int64) *UserMasterUpdateOne {
	umuo.mutation.RemoveUsersGDSPARefIDs(ids...)
	return umuo
}

// RemoveUsersGDSPARef removes "UsersGDSPARef" edges to Exam_Applications_GDSPA entities.
func (umuo *UserMasterUpdateOne) RemoveUsersGDSPARef(e ...*Exam_Applications_GDSPA) *UserMasterUpdateOne {
	ids := make([]int64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return umuo.RemoveUsersGDSPARefIDs(ids...)
}

// ClearUsersPMPARef clears all "UsersPMPARef" edges to the Exam_Applications_PMPA entity.
func (umuo *UserMasterUpdateOne) ClearUsersPMPARef() *UserMasterUpdateOne {
	umuo.mutation.ClearUsersPMPARef()
	return umuo
}

// RemoveUsersPMPARefIDs removes the "UsersPMPARef" edge to Exam_Applications_PMPA entities by IDs.
func (umuo *UserMasterUpdateOne) RemoveUsersPMPARefIDs(ids ...int64) *UserMasterUpdateOne {
	umuo.mutation.RemoveUsersPMPARefIDs(ids...)
	return umuo
}

// RemoveUsersPMPARef removes "UsersPMPARef" edges to Exam_Applications_PMPA entities.
func (umuo *UserMasterUpdateOne) RemoveUsersPMPARef(e ...*Exam_Applications_PMPA) *UserMasterUpdateOne {
	ids := make([]int64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return umuo.RemoveUsersPMPARefIDs(ids...)
}

// ClearUsersGDSPMRef clears all "UsersGDSPMRef" edges to the Exam_Applications_GDSPM entity.
func (umuo *UserMasterUpdateOne) ClearUsersGDSPMRef() *UserMasterUpdateOne {
	umuo.mutation.ClearUsersGDSPMRef()
	return umuo
}

// RemoveUsersGDSPMRefIDs removes the "UsersGDSPMRef" edge to Exam_Applications_GDSPM entities by IDs.
func (umuo *UserMasterUpdateOne) RemoveUsersGDSPMRefIDs(ids ...int64) *UserMasterUpdateOne {
	umuo.mutation.RemoveUsersGDSPMRefIDs(ids...)
	return umuo
}

// RemoveUsersGDSPMRef removes "UsersGDSPMRef" edges to Exam_Applications_GDSPM entities.
func (umuo *UserMasterUpdateOne) RemoveUsersGDSPMRef(e ...*Exam_Applications_GDSPM) *UserMasterUpdateOne {
	ids := make([]int64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return umuo.RemoveUsersGDSPMRefIDs(ids...)
}

// ClearLogData clears all "LogData" edges to the Logs entity.
func (umuo *UserMasterUpdateOne) ClearLogData() *UserMasterUpdateOne {
	umuo.mutation.ClearLogData()
	return umuo
}

// RemoveLogDatumIDs removes the "LogData" edge to Logs entities by IDs.
func (umuo *UserMasterUpdateOne) RemoveLogDatumIDs(ids ...int64) *UserMasterUpdateOne {
	umuo.mutation.RemoveLogDatumIDs(ids...)
	return umuo
}

// RemoveLogData removes "LogData" edges to Logs entities.
func (umuo *UserMasterUpdateOne) RemoveLogData(l ...*Logs) *UserMasterUpdateOne {
	ids := make([]int64, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return umuo.RemoveLogDatumIDs(ids...)
}

// Where appends a list predicates to the UserMasterUpdate builder.
func (umuo *UserMasterUpdateOne) Where(ps ...predicate.UserMaster) *UserMasterUpdateOne {
	umuo.mutation.Where(ps...)
	return umuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (umuo *UserMasterUpdateOne) Select(field string, fields ...string) *UserMasterUpdateOne {
	umuo.fields = append([]string{field}, fields...)
	return umuo
}

// Save executes the query and returns the updated UserMaster entity.
func (umuo *UserMasterUpdateOne) Save(ctx context.Context) (*UserMaster, error) {
	return withHooks(ctx, umuo.sqlSave, umuo.mutation, umuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (umuo *UserMasterUpdateOne) SaveX(ctx context.Context) *UserMaster {
	node, err := umuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (umuo *UserMasterUpdateOne) Exec(ctx context.Context) error {
	_, err := umuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (umuo *UserMasterUpdateOne) ExecX(ctx context.Context) {
	if err := umuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (umuo *UserMasterUpdateOne) check() error {
	if v, ok := umuo.mutation.Gender(); ok {
		if err := usermaster.GenderValidator(v); err != nil {
			return &ValidationError{Name: "Gender", err: fmt.Errorf(`ent: validator failed for field "UserMaster.Gender": %w`, err)}
		}
	}
	return nil
}

func (umuo *UserMasterUpdateOne) sqlSave(ctx context.Context) (_node *UserMaster, err error) {
	if err := umuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(usermaster.Table, usermaster.Columns, sqlgraph.NewFieldSpec(usermaster.FieldID, field.TypeInt64))
	id, ok := umuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "UserMaster.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := umuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, usermaster.FieldID)
		for _, f := range fields {
			if !usermaster.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != usermaster.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := umuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := umuo.mutation.EmployeeID(); ok {
		_spec.SetField(usermaster.FieldEmployeeID, field.TypeInt64, value)
	}
	if value, ok := umuo.mutation.AddedEmployeeID(); ok {
		_spec.AddField(usermaster.FieldEmployeeID, field.TypeInt64, value)
	}
	if umuo.mutation.EmployeeIDCleared() {
		_spec.ClearField(usermaster.FieldEmployeeID, field.TypeInt64)
	}
	if value, ok := umuo.mutation.EmployeeName(); ok {
		_spec.SetField(usermaster.FieldEmployeeName, field.TypeString, value)
	}
	if umuo.mutation.EmployeeNameCleared() {
		_spec.ClearField(usermaster.FieldEmployeeName, field.TypeString)
	}
	if value, ok := umuo.mutation.Mobile(); ok {
		_spec.SetField(usermaster.FieldMobile, field.TypeString, value)
	}
	if umuo.mutation.MobileCleared() {
		_spec.ClearField(usermaster.FieldMobile, field.TypeString)
	}
	if value, ok := umuo.mutation.EmailID(); ok {
		_spec.SetField(usermaster.FieldEmailID, field.TypeString, value)
	}
	if umuo.mutation.EmailIDCleared() {
		_spec.ClearField(usermaster.FieldEmailID, field.TypeString)
	}
	if value, ok := umuo.mutation.UserName(); ok {
		_spec.SetField(usermaster.FieldUserName, field.TypeString, value)
	}
	if umuo.mutation.UserNameCleared() {
		_spec.ClearField(usermaster.FieldUserName, field.TypeString)
	}
	if value, ok := umuo.mutation.Password(); ok {
		_spec.SetField(usermaster.FieldPassword, field.TypeString, value)
	}
	if umuo.mutation.PasswordCleared() {
		_spec.ClearField(usermaster.FieldPassword, field.TypeString)
	}
	if value, ok := umuo.mutation.Status(); ok {
		_spec.SetField(usermaster.FieldStatus, field.TypeBool, value)
	}
	if umuo.mutation.StatusCleared() {
		_spec.ClearField(usermaster.FieldStatus, field.TypeBool)
	}
	if value, ok := umuo.mutation.Statuss(); ok {
		_spec.SetField(usermaster.FieldStatuss, field.TypeString, value)
	}
	if umuo.mutation.StatussCleared() {
		_spec.ClearField(usermaster.FieldStatuss, field.TypeString)
	}
	if value, ok := umuo.mutation.OTP(); ok {
		_spec.SetField(usermaster.FieldOTP, field.TypeInt32, value)
	}
	if value, ok := umuo.mutation.AddedOTP(); ok {
		_spec.AddField(usermaster.FieldOTP, field.TypeInt32, value)
	}
	if umuo.mutation.OTPCleared() {
		_spec.ClearField(usermaster.FieldOTP, field.TypeInt32)
	}
	if value, ok := umuo.mutation.OTPNew(); ok {
		_spec.SetField(usermaster.FieldOTPNew, field.TypeInt32, value)
	}
	if value, ok := umuo.mutation.AddedOTPNew(); ok {
		_spec.AddField(usermaster.FieldOTPNew, field.TypeInt32, value)
	}
	if umuo.mutation.OTPNewCleared() {
		_spec.ClearField(usermaster.FieldOTPNew, field.TypeInt32)
	}
	if value, ok := umuo.mutation.EmailOTPNew(); ok {
		_spec.SetField(usermaster.FieldEmailOTPNew, field.TypeInt32, value)
	}
	if value, ok := umuo.mutation.AddedEmailOTPNew(); ok {
		_spec.AddField(usermaster.FieldEmailOTPNew, field.TypeInt32, value)
	}
	if umuo.mutation.EmailOTPNewCleared() {
		_spec.ClearField(usermaster.FieldEmailOTPNew, field.TypeInt32)
	}
	if value, ok := umuo.mutation.OTPRemarks(); ok {
		_spec.SetField(usermaster.FieldOTPRemarks, field.TypeString, value)
	}
	if umuo.mutation.OTPRemarksCleared() {
		_spec.ClearField(usermaster.FieldOTPRemarks, field.TypeString)
	}
	if value, ok := umuo.mutation.CreatedAt(); ok {
		_spec.SetField(usermaster.FieldCreatedAt, field.TypeTime, value)
	}
	if umuo.mutation.CreatedAtCleared() {
		_spec.ClearField(usermaster.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := umuo.mutation.OTPTriggeredTime(); ok {
		_spec.SetField(usermaster.FieldOTPTriggeredTime, field.TypeTime, value)
	}
	if umuo.mutation.OTPTriggeredTimeCleared() {
		_spec.ClearField(usermaster.FieldOTPTriggeredTime, field.TypeTime)
	}
	if value, ok := umuo.mutation.OTPSavedTime(); ok {
		_spec.SetField(usermaster.FieldOTPSavedTime, field.TypeTime, value)
	}
	if umuo.mutation.OTPSavedTimeCleared() {
		_spec.ClearField(usermaster.FieldOTPSavedTime, field.TypeTime)
	}
	if value, ok := umuo.mutation.OTPExpiryTime(); ok {
		_spec.SetField(usermaster.FieldOTPExpiryTime, field.TypeTime, value)
	}
	if umuo.mutation.OTPExpiryTimeCleared() {
		_spec.ClearField(usermaster.FieldOTPExpiryTime, field.TypeTime)
	}
	if value, ok := umuo.mutation.NewPasswordRequest(); ok {
		_spec.SetField(usermaster.FieldNewPasswordRequest, field.TypeBool, value)
	}
	if umuo.mutation.NewPasswordRequestCleared() {
		_spec.ClearField(usermaster.FieldNewPasswordRequest, field.TypeBool)
	}
	if value, ok := umuo.mutation.EmailOTP(); ok {
		_spec.SetField(usermaster.FieldEmailOTP, field.TypeInt32, value)
	}
	if value, ok := umuo.mutation.AddedEmailOTP(); ok {
		_spec.AddField(usermaster.FieldEmailOTP, field.TypeInt32, value)
	}
	if umuo.mutation.EmailOTPCleared() {
		_spec.ClearField(usermaster.FieldEmailOTP, field.TypeInt32)
	}
	if value, ok := umuo.mutation.EmailOTPRemarks(); ok {
		_spec.SetField(usermaster.FieldEmailOTPRemarks, field.TypeString, value)
	}
	if umuo.mutation.EmailOTPRemarksCleared() {
		_spec.ClearField(usermaster.FieldEmailOTPRemarks, field.TypeString)
	}
	if value, ok := umuo.mutation.EmailCreatedAt(); ok {
		_spec.SetField(usermaster.FieldEmailCreatedAt, field.TypeTime, value)
	}
	if umuo.mutation.EmailCreatedAtCleared() {
		_spec.ClearField(usermaster.FieldEmailCreatedAt, field.TypeTime)
	}
	if value, ok := umuo.mutation.EmailOTPTriggeredTime(); ok {
		_spec.SetField(usermaster.FieldEmailOTPTriggeredTime, field.TypeTime, value)
	}
	if umuo.mutation.EmailOTPTriggeredTimeCleared() {
		_spec.ClearField(usermaster.FieldEmailOTPTriggeredTime, field.TypeTime)
	}
	if value, ok := umuo.mutation.EmailOTPSavedTime(); ok {
		_spec.SetField(usermaster.FieldEmailOTPSavedTime, field.TypeTime, value)
	}
	if umuo.mutation.EmailOTPSavedTimeCleared() {
		_spec.ClearField(usermaster.FieldEmailOTPSavedTime, field.TypeTime)
	}
	if value, ok := umuo.mutation.EmailOTPExpiryTime(); ok {
		_spec.SetField(usermaster.FieldEmailOTPExpiryTime, field.TypeTime, value)
	}
	if umuo.mutation.EmailOTPExpiryTimeCleared() {
		_spec.ClearField(usermaster.FieldEmailOTPExpiryTime, field.TypeTime)
	}
	if value, ok := umuo.mutation.EmailNewPasswordRequest(); ok {
		_spec.SetField(usermaster.FieldEmailNewPasswordRequest, field.TypeBool, value)
	}
	if umuo.mutation.EmailNewPasswordRequestCleared() {
		_spec.ClearField(usermaster.FieldEmailNewPasswordRequest, field.TypeBool)
	}
	if value, ok := umuo.mutation.UidToken(); ok {
		_spec.SetField(usermaster.FieldUidToken, field.TypeString, value)
	}
	if umuo.mutation.UidTokenCleared() {
		_spec.ClearField(usermaster.FieldUidToken, field.TypeString)
	}
	if value, ok := umuo.mutation.CreatedById(); ok {
		_spec.SetField(usermaster.FieldCreatedById, field.TypeInt64, value)
	}
	if value, ok := umuo.mutation.AddedCreatedById(); ok {
		_spec.AddField(usermaster.FieldCreatedById, field.TypeInt64, value)
	}
	if umuo.mutation.CreatedByIdCleared() {
		_spec.ClearField(usermaster.FieldCreatedById, field.TypeInt64)
	}
	if value, ok := umuo.mutation.CreatedByEmployeeId(); ok {
		_spec.SetField(usermaster.FieldCreatedByEmployeeId, field.TypeString, value)
	}
	if umuo.mutation.CreatedByEmployeeIdCleared() {
		_spec.ClearField(usermaster.FieldCreatedByEmployeeId, field.TypeString)
	}
	if value, ok := umuo.mutation.CreatedByUserName(); ok {
		_spec.SetField(usermaster.FieldCreatedByUserName, field.TypeString, value)
	}
	if umuo.mutation.CreatedByUserNameCleared() {
		_spec.ClearField(usermaster.FieldCreatedByUserName, field.TypeString)
	}
	if value, ok := umuo.mutation.CreatedByDesignation(); ok {
		_spec.SetField(usermaster.FieldCreatedByDesignation, field.TypeString, value)
	}
	if umuo.mutation.CreatedByDesignationCleared() {
		_spec.ClearField(usermaster.FieldCreatedByDesignation, field.TypeString)
	}
	if value, ok := umuo.mutation.CreatedDate(); ok {
		_spec.SetField(usermaster.FieldCreatedDate, field.TypeTime, value)
	}
	if umuo.mutation.CreatedDateCleared() {
		_spec.ClearField(usermaster.FieldCreatedDate, field.TypeTime)
	}
	if value, ok := umuo.mutation.DeletedById(); ok {
		_spec.SetField(usermaster.FieldDeletedById, field.TypeInt64, value)
	}
	if value, ok := umuo.mutation.AddedDeletedById(); ok {
		_spec.AddField(usermaster.FieldDeletedById, field.TypeInt64, value)
	}
	if umuo.mutation.DeletedByIdCleared() {
		_spec.ClearField(usermaster.FieldDeletedById, field.TypeInt64)
	}
	if value, ok := umuo.mutation.DeletedByEmployeeId(); ok {
		_spec.SetField(usermaster.FieldDeletedByEmployeeId, field.TypeString, value)
	}
	if umuo.mutation.DeletedByEmployeeIdCleared() {
		_spec.ClearField(usermaster.FieldDeletedByEmployeeId, field.TypeString)
	}
	if value, ok := umuo.mutation.DeletedByUserName(); ok {
		_spec.SetField(usermaster.FieldDeletedByUserName, field.TypeString, value)
	}
	if umuo.mutation.DeletedByUserNameCleared() {
		_spec.ClearField(usermaster.FieldDeletedByUserName, field.TypeString)
	}
	if value, ok := umuo.mutation.DeletedByDesignation(); ok {
		_spec.SetField(usermaster.FieldDeletedByDesignation, field.TypeString, value)
	}
	if umuo.mutation.DeletedByDesignationCleared() {
		_spec.ClearField(usermaster.FieldDeletedByDesignation, field.TypeString)
	}
	if value, ok := umuo.mutation.DeletedDate(); ok {
		_spec.SetField(usermaster.FieldDeletedDate, field.TypeTime, value)
	}
	if umuo.mutation.DeletedDateCleared() {
		_spec.ClearField(usermaster.FieldDeletedDate, field.TypeTime)
	}
	if value, ok := umuo.mutation.FacilityID(); ok {
		_spec.SetField(usermaster.FieldFacilityID, field.TypeString, value)
	}
	if umuo.mutation.FacilityIDCleared() {
		_spec.ClearField(usermaster.FieldFacilityID, field.TypeString)
	}
	if value, ok := umuo.mutation.CircleFacilityId(); ok {
		_spec.SetField(usermaster.FieldCircleFacilityId, field.TypeString, value)
	}
	if umuo.mutation.CircleFacilityIdCleared() {
		_spec.ClearField(usermaster.FieldCircleFacilityId, field.TypeString)
	}
	if value, ok := umuo.mutation.CircleFacilityName(); ok {
		_spec.SetField(usermaster.FieldCircleFacilityName, field.TypeString, value)
	}
	if umuo.mutation.CircleFacilityNameCleared() {
		_spec.ClearField(usermaster.FieldCircleFacilityName, field.TypeString)
	}
	if value, ok := umuo.mutation.Designation(); ok {
		_spec.SetField(usermaster.FieldDesignation, field.TypeString, value)
	}
	if umuo.mutation.DesignationCleared() {
		_spec.ClearField(usermaster.FieldDesignation, field.TypeString)
	}
	if value, ok := umuo.mutation.Updatedby(); ok {
		_spec.SetField(usermaster.FieldUpdatedby, field.TypeString, value)
	}
	if umuo.mutation.UpdatedbyCleared() {
		_spec.ClearField(usermaster.FieldUpdatedby, field.TypeString)
	}
	if value, ok := umuo.mutation.UpdatedDate(); ok {
		_spec.SetField(usermaster.FieldUpdatedDate, field.TypeTime, value)
	}
	if umuo.mutation.UpdatedDateCleared() {
		_spec.ClearField(usermaster.FieldUpdatedDate, field.TypeTime)
	}
	if value, ok := umuo.mutation.Modifiedby(); ok {
		_spec.SetField(usermaster.FieldModifiedby, field.TypeString, value)
	}
	if umuo.mutation.ModifiedbyCleared() {
		_spec.ClearField(usermaster.FieldModifiedby, field.TypeString)
	}
	if value, ok := umuo.mutation.ModifiedDate(); ok {
		_spec.SetField(usermaster.FieldModifiedDate, field.TypeTime, value)
	}
	if umuo.mutation.ModifiedDateCleared() {
		_spec.ClearField(usermaster.FieldModifiedDate, field.TypeTime)
	}
	if value, ok := umuo.mutation.Operationstatus(); ok {
		_spec.SetField(usermaster.FieldOperationstatus, field.TypeString, value)
	}
	if umuo.mutation.OperationstatusCleared() {
		_spec.ClearField(usermaster.FieldOperationstatus, field.TypeString)
	}
	if value, ok := umuo.mutation.ExamCode(); ok {
		_spec.SetField(usermaster.FieldExamCode, field.TypeInt32, value)
	}
	if value, ok := umuo.mutation.AddedExamCode(); ok {
		_spec.AddField(usermaster.FieldExamCode, field.TypeInt32, value)
	}
	if umuo.mutation.ExamCodeCleared() {
		_spec.ClearField(usermaster.FieldExamCode, field.TypeInt32)
	}
	if value, ok := umuo.mutation.ExamCodePS(); ok {
		_spec.SetField(usermaster.FieldExamCodePS, field.TypeInt32, value)
	}
	if value, ok := umuo.mutation.AddedExamCodePS(); ok {
		_spec.AddField(usermaster.FieldExamCodePS, field.TypeInt32, value)
	}
	if umuo.mutation.ExamCodePSCleared() {
		_spec.ClearField(usermaster.FieldExamCodePS, field.TypeInt32)
	}
	if value, ok := umuo.mutation.Gender(); ok {
		_spec.SetField(usermaster.FieldGender, field.TypeEnum, value)
	}
	if umuo.mutation.GenderCleared() {
		_spec.ClearField(usermaster.FieldGender, field.TypeEnum)
	}
	if value, ok := umuo.mutation.DOB(); ok {
		_spec.SetField(usermaster.FieldDOB, field.TypeString, value)
	}
	if umuo.mutation.DOBCleared() {
		_spec.ClearField(usermaster.FieldDOB, field.TypeString)
	}
	if value, ok := umuo.mutation.CreatedBy(); ok {
		_spec.SetField(usermaster.FieldCreatedBy, field.TypeString, value)
	}
	if umuo.mutation.CreatedByCleared() {
		_spec.ClearField(usermaster.FieldCreatedBy, field.TypeString)
	}
	if umuo.mutation.RolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   usermaster.RolesTable,
			Columns: []string{usermaster.RolesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rolemaster.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := umuo.mutation.RolesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   usermaster.RolesTable,
			Columns: []string{usermaster.RolesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rolemaster.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if umuo.mutation.UsermasterRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   usermaster.UsermasterRefTable,
			Columns: []string{usermaster.UsermasterRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employeemaster.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := umuo.mutation.RemovedUsermasterRefIDs(); len(nodes) > 0 && !umuo.mutation.UsermasterRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   usermaster.UsermasterRefTable,
			Columns: []string{usermaster.UsermasterRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employeemaster.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := umuo.mutation.UsermasterRefIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   usermaster.UsermasterRefTable,
			Columns: []string{usermaster.UsermasterRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employeemaster.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if umuo.mutation.UsersPSRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   usermaster.UsersPSRefTable,
			Columns: []string{usermaster.UsersPSRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_ps.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := umuo.mutation.RemovedUsersPSRefIDs(); len(nodes) > 0 && !umuo.mutation.UsersPSRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   usermaster.UsersPSRefTable,
			Columns: []string{usermaster.UsersPSRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_ps.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := umuo.mutation.UsersPSRefIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   usermaster.UsersPSRefTable,
			Columns: []string{usermaster.UsersPSRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_ps.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if umuo.mutation.UsersIPRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   usermaster.UsersIPRefTable,
			Columns: []string{usermaster.UsersIPRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_ip.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := umuo.mutation.RemovedUsersIPRefIDs(); len(nodes) > 0 && !umuo.mutation.UsersIPRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   usermaster.UsersIPRefTable,
			Columns: []string{usermaster.UsersIPRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_ip.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := umuo.mutation.UsersIPRefIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   usermaster.UsersIPRefTable,
			Columns: []string{usermaster.UsersIPRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_ip.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if umuo.mutation.UserIDRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   usermaster.UserIDRefTable,
			Columns: []string{usermaster.UserIDRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(examnotifications.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := umuo.mutation.RemovedUserIDRefIDs(); len(nodes) > 0 && !umuo.mutation.UserIDRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   usermaster.UserIDRefTable,
			Columns: []string{usermaster.UserIDRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(examnotifications.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := umuo.mutation.UserIDRefIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   usermaster.UserIDRefTable,
			Columns: []string{usermaster.UserIDRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(examnotifications.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if umuo.mutation.UsersGDSPARefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   usermaster.UsersGDSPARefTable,
			Columns: []string{usermaster.UsersGDSPARefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_gdspa.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := umuo.mutation.RemovedUsersGDSPARefIDs(); len(nodes) > 0 && !umuo.mutation.UsersGDSPARefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   usermaster.UsersGDSPARefTable,
			Columns: []string{usermaster.UsersGDSPARefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_gdspa.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := umuo.mutation.UsersGDSPARefIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   usermaster.UsersGDSPARefTable,
			Columns: []string{usermaster.UsersGDSPARefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_gdspa.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if umuo.mutation.UsersPMPARefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   usermaster.UsersPMPARefTable,
			Columns: []string{usermaster.UsersPMPARefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_pmpa.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := umuo.mutation.RemovedUsersPMPARefIDs(); len(nodes) > 0 && !umuo.mutation.UsersPMPARefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   usermaster.UsersPMPARefTable,
			Columns: []string{usermaster.UsersPMPARefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_pmpa.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := umuo.mutation.UsersPMPARefIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   usermaster.UsersPMPARefTable,
			Columns: []string{usermaster.UsersPMPARefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_pmpa.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if umuo.mutation.UsersGDSPMRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   usermaster.UsersGDSPMRefTable,
			Columns: []string{usermaster.UsersGDSPMRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_gdspm.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := umuo.mutation.RemovedUsersGDSPMRefIDs(); len(nodes) > 0 && !umuo.mutation.UsersGDSPMRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   usermaster.UsersGDSPMRefTable,
			Columns: []string{usermaster.UsersGDSPMRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_gdspm.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := umuo.mutation.UsersGDSPMRefIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   usermaster.UsersGDSPMRefTable,
			Columns: []string{usermaster.UsersGDSPMRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_gdspm.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if umuo.mutation.LogDataCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   usermaster.LogDataTable,
			Columns: []string{usermaster.LogDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(logs.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := umuo.mutation.RemovedLogDataIDs(); len(nodes) > 0 && !umuo.mutation.LogDataCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   usermaster.LogDataTable,
			Columns: []string{usermaster.LogDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(logs.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := umuo.mutation.LogDataIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   usermaster.LogDataTable,
			Columns: []string{usermaster.LogDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(logs.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &UserMaster{config: umuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, umuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{usermaster.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	umuo.mutation.done = true
	return _node, nil
}
