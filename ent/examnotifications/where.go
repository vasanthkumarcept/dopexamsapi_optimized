// Code generated by ent, DO NOT EDIT.

package examnotifications

import (
	"recruit/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int32) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int32) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int32) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int32) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int32) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int32) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int32) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int32) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int32) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldLTE(FieldID, id))
}

// UserName applies equality check predicate on the "UserName" field. It's identical to UserNameEQ.
func UserName(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldEQ(FieldUserName, v))
}

// ExamYear applies equality check predicate on the "ExamYear" field. It's identical to ExamYearEQ.
func ExamYear(v int32) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldEQ(FieldExamYear, v))
}

// EmployeeMasterRequestLastDate applies equality check predicate on the "EmployeeMasterRequestLastDate" field. It's identical to EmployeeMasterRequestLastDateEQ.
func EmployeeMasterRequestLastDate(v time.Time) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldEQ(FieldEmployeeMasterRequestLastDate, v))
}

// EmployeeMasterRequestApprovalLastDate applies equality check predicate on the "EmployeeMasterRequestApprovalLastDate" field. It's identical to EmployeeMasterRequestApprovalLastDateEQ.
func EmployeeMasterRequestApprovalLastDate(v time.Time) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldEQ(FieldEmployeeMasterRequestApprovalLastDate, v))
}

// ExamRegisterLastDate applies equality check predicate on the "ExamRegisterLastDate" field. It's identical to ExamRegisterLastDateEQ.
func ExamRegisterLastDate(v time.Time) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldEQ(FieldExamRegisterLastDate, v))
}

// ApplicationStartDate applies equality check predicate on the "ApplicationStartDate" field. It's identical to ApplicationStartDateEQ.
func ApplicationStartDate(v time.Time) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldEQ(FieldApplicationStartDate, v))
}

// ApplicationEndDate applies equality check predicate on the "ApplicationEndDate" field. It's identical to ApplicationEndDateEQ.
func ApplicationEndDate(v time.Time) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldEQ(FieldApplicationEndDate, v))
}

// ApplicationCorrectionStartDate applies equality check predicate on the "ApplicationCorrectionStartDate" field. It's identical to ApplicationCorrectionStartDateEQ.
func ApplicationCorrectionStartDate(v time.Time) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldEQ(FieldApplicationCorrectionStartDate, v))
}

// ApplicationCorrectionLastDate applies equality check predicate on the "ApplicationCorrectionLastDate" field. It's identical to ApplicationCorrectionLastDateEQ.
func ApplicationCorrectionLastDate(v time.Time) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldEQ(FieldApplicationCorrectionLastDate, v))
}

// ApplicationVerificationLastDate applies equality check predicate on the "ApplicationVerificationLastDate" field. It's identical to ApplicationVerificationLastDateEQ.
func ApplicationVerificationLastDate(v time.Time) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldEQ(FieldApplicationVerificationLastDate, v))
}

// CenterAllotmentEndDate applies equality check predicate on the "CenterAllotmentEndDate" field. It's identical to CenterAllotmentEndDateEQ.
func CenterAllotmentEndDate(v time.Time) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldEQ(FieldCenterAllotmentEndDate, v))
}

// NodalOfficerApprovalDate applies equality check predicate on the "NodalOfficerApprovalDate" field. It's identical to NodalOfficerApprovalDateEQ.
func NodalOfficerApprovalDate(v time.Time) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldEQ(FieldNodalOfficerApprovalDate, v))
}

// AdmitCardDate applies equality check predicate on the "AdmitCardDate" field. It's identical to AdmitCardDateEQ.
func AdmitCardDate(v time.Time) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldEQ(FieldAdmitCardDate, v))
}

// UpdatedAt applies equality check predicate on the "UpdatedAt" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedBy applies equality check predicate on the "UpdatedBy" field. It's identical to UpdatedByEQ.
func UpdatedBy(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldEQ(FieldUpdatedBy, v))
}

// Designation applies equality check predicate on the "Designation" field. It's identical to DesignationEQ.
func Designation(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldEQ(FieldDesignation, v))
}

// OfficerName applies equality check predicate on the "OfficerName" field. It's identical to OfficerNameEQ.
func OfficerName(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldEQ(FieldOfficerName, v))
}

// NotificationOrderNumber applies equality check predicate on the "NotificationOrderNumber" field. It's identical to NotificationOrderNumberEQ.
func NotificationOrderNumber(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldEQ(FieldNotificationOrderNumber, v))
}

// NotesheetScannedCopy applies equality check predicate on the "NotesheetScannedCopy" field. It's identical to NotesheetScannedCopyEQ.
func NotesheetScannedCopy(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldEQ(FieldNotesheetScannedCopy, v))
}

// NotificationNumber applies equality check predicate on the "NotificationNumber" field. It's identical to NotificationNumberEQ.
func NotificationNumber(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldEQ(FieldNotificationNumber, v))
}

// Flag applies equality check predicate on the "Flag" field. It's identical to FlagEQ.
func Flag(v bool) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldEQ(FieldFlag, v))
}

// ExamShortName applies equality check predicate on the "ExamShortName" field. It's identical to ExamShortNameEQ.
func ExamShortName(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldEQ(FieldExamShortName, v))
}

// CircleOfficeFacilityId applies equality check predicate on the "CircleOfficeFacilityId" field. It's identical to CircleOfficeFacilityIdEQ.
func CircleOfficeFacilityId(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldEQ(FieldCircleOfficeFacilityId, v))
}

// CircleOfficeName applies equality check predicate on the "CircleOfficeName" field. It's identical to CircleOfficeNameEQ.
func CircleOfficeName(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldEQ(FieldCircleOfficeName, v))
}

// IssuedBy applies equality check predicate on the "IssuedBy" field. It's identical to IssuedByEQ.
func IssuedBy(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldEQ(FieldIssuedBy, v))
}

// OrderDate applies equality check predicate on the "OrderDate" field. It's identical to OrderDateEQ.
func OrderDate(v time.Time) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldEQ(FieldOrderDate, v))
}

// CreatedBy applies equality check predicate on the "CreatedBy" field. It's identical to CreatedByEQ.
func CreatedBy(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldEQ(FieldCreatedBy, v))
}

// CreatedById applies equality check predicate on the "CreatedById" field. It's identical to CreatedByIdEQ.
func CreatedById(v int64) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldEQ(FieldCreatedById, v))
}

// CreatedByName applies equality check predicate on the "CreatedByName" field. It's identical to CreatedByNameEQ.
func CreatedByName(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldEQ(FieldCreatedByName, v))
}

// CreatedByDesignation applies equality check predicate on the "CreatedByDesignation" field. It's identical to CreatedByDesignationEQ.
func CreatedByDesignation(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldEQ(FieldCreatedByDesignation, v))
}

// ApprovedBy applies equality check predicate on the "ApprovedBy" field. It's identical to ApprovedByEQ.
func ApprovedBy(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldEQ(FieldApprovedBy, v))
}

// ApprovedById applies equality check predicate on the "ApprovedById" field. It's identical to ApprovedByIdEQ.
func ApprovedById(v int64) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldEQ(FieldApprovedById, v))
}

// ApprovedByName applies equality check predicate on the "ApprovedByName" field. It's identical to ApprovedByNameEQ.
func ApprovedByName(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldEQ(FieldApprovedByName, v))
}

// ApprovedByDesignation applies equality check predicate on the "ApprovedByDesignation" field. It's identical to ApprovedByDesignationEQ.
func ApprovedByDesignation(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldEQ(FieldApprovedByDesignation, v))
}

// ResubmittedApplicationVerificationDate applies equality check predicate on the "ResubmittedApplicationVerificationDate" field. It's identical to ResubmittedApplicationVerificationDateEQ.
func ResubmittedApplicationVerificationDate(v time.Time) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldEQ(FieldResubmittedApplicationVerificationDate, v))
}

// NotificationStatus applies equality check predicate on the "NotificationStatus" field. It's identical to NotificationStatusEQ.
func NotificationStatus(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldEQ(FieldNotificationStatus, v))
}

// Status applies equality check predicate on the "Status" field. It's identical to StatusEQ.
func Status(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldEQ(FieldStatus, v))
}

// NotificationReIssueStatus applies equality check predicate on the "NotificationReIssueStatus" field. It's identical to NotificationReIssueStatusEQ.
func NotificationReIssueStatus(v bool) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldEQ(FieldNotificationReIssueStatus, v))
}

// EditFlagStatus applies equality check predicate on the "EditFlagStatus" field. It's identical to EditFlagStatusEQ.
func EditFlagStatus(v bool) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldEQ(FieldEditFlagStatus, v))
}

// ExamCode applies equality check predicate on the "ExamCode" field. It's identical to ExamCodeEQ.
func ExamCode(v int32) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldEQ(FieldExamCode, v))
}

// ExamName applies equality check predicate on the "ExamName" field. It's identical to ExamNameEQ.
func ExamName(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldEQ(FieldExamName, v))
}

// UserID applies equality check predicate on the "UserID" field. It's identical to UserIDEQ.
func UserID(v int64) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldEQ(FieldUserID, v))
}

// NotificationRemarks applies equality check predicate on the "NotificationRemarks" field. It's identical to NotificationRemarksEQ.
func NotificationRemarks(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldEQ(FieldNotificationRemarks, v))
}

// SmsExamShortName applies equality check predicate on the "SmsExamShortName" field. It's identical to SmsExamShortNameEQ.
func SmsExamShortName(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldEQ(FieldSmsExamShortName, v))
}

// UserNameEQ applies the EQ predicate on the "UserName" field.
func UserNameEQ(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldEQ(FieldUserName, v))
}

// UserNameNEQ applies the NEQ predicate on the "UserName" field.
func UserNameNEQ(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldNEQ(FieldUserName, v))
}

// UserNameIn applies the In predicate on the "UserName" field.
func UserNameIn(vs ...string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldIn(FieldUserName, vs...))
}

// UserNameNotIn applies the NotIn predicate on the "UserName" field.
func UserNameNotIn(vs ...string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldNotIn(FieldUserName, vs...))
}

// UserNameGT applies the GT predicate on the "UserName" field.
func UserNameGT(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldGT(FieldUserName, v))
}

// UserNameGTE applies the GTE predicate on the "UserName" field.
func UserNameGTE(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldGTE(FieldUserName, v))
}

// UserNameLT applies the LT predicate on the "UserName" field.
func UserNameLT(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldLT(FieldUserName, v))
}

// UserNameLTE applies the LTE predicate on the "UserName" field.
func UserNameLTE(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldLTE(FieldUserName, v))
}

// UserNameContains applies the Contains predicate on the "UserName" field.
func UserNameContains(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldContains(FieldUserName, v))
}

// UserNameHasPrefix applies the HasPrefix predicate on the "UserName" field.
func UserNameHasPrefix(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldHasPrefix(FieldUserName, v))
}

// UserNameHasSuffix applies the HasSuffix predicate on the "UserName" field.
func UserNameHasSuffix(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldHasSuffix(FieldUserName, v))
}

// UserNameIsNil applies the IsNil predicate on the "UserName" field.
func UserNameIsNil() predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldIsNull(FieldUserName))
}

// UserNameNotNil applies the NotNil predicate on the "UserName" field.
func UserNameNotNil() predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldNotNull(FieldUserName))
}

// UserNameEqualFold applies the EqualFold predicate on the "UserName" field.
func UserNameEqualFold(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldEqualFold(FieldUserName, v))
}

// UserNameContainsFold applies the ContainsFold predicate on the "UserName" field.
func UserNameContainsFold(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldContainsFold(FieldUserName, v))
}

// ExamYearEQ applies the EQ predicate on the "ExamYear" field.
func ExamYearEQ(v int32) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldEQ(FieldExamYear, v))
}

// ExamYearNEQ applies the NEQ predicate on the "ExamYear" field.
func ExamYearNEQ(v int32) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldNEQ(FieldExamYear, v))
}

// ExamYearIn applies the In predicate on the "ExamYear" field.
func ExamYearIn(vs ...int32) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldIn(FieldExamYear, vs...))
}

// ExamYearNotIn applies the NotIn predicate on the "ExamYear" field.
func ExamYearNotIn(vs ...int32) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldNotIn(FieldExamYear, vs...))
}

// ExamYearGT applies the GT predicate on the "ExamYear" field.
func ExamYearGT(v int32) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldGT(FieldExamYear, v))
}

// ExamYearGTE applies the GTE predicate on the "ExamYear" field.
func ExamYearGTE(v int32) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldGTE(FieldExamYear, v))
}

// ExamYearLT applies the LT predicate on the "ExamYear" field.
func ExamYearLT(v int32) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldLT(FieldExamYear, v))
}

// ExamYearLTE applies the LTE predicate on the "ExamYear" field.
func ExamYearLTE(v int32) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldLTE(FieldExamYear, v))
}

// ExamYearIsNil applies the IsNil predicate on the "ExamYear" field.
func ExamYearIsNil() predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldIsNull(FieldExamYear))
}

// ExamYearNotNil applies the NotNil predicate on the "ExamYear" field.
func ExamYearNotNil() predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldNotNull(FieldExamYear))
}

// EmployeeMasterRequestLastDateEQ applies the EQ predicate on the "EmployeeMasterRequestLastDate" field.
func EmployeeMasterRequestLastDateEQ(v time.Time) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldEQ(FieldEmployeeMasterRequestLastDate, v))
}

// EmployeeMasterRequestLastDateNEQ applies the NEQ predicate on the "EmployeeMasterRequestLastDate" field.
func EmployeeMasterRequestLastDateNEQ(v time.Time) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldNEQ(FieldEmployeeMasterRequestLastDate, v))
}

// EmployeeMasterRequestLastDateIn applies the In predicate on the "EmployeeMasterRequestLastDate" field.
func EmployeeMasterRequestLastDateIn(vs ...time.Time) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldIn(FieldEmployeeMasterRequestLastDate, vs...))
}

// EmployeeMasterRequestLastDateNotIn applies the NotIn predicate on the "EmployeeMasterRequestLastDate" field.
func EmployeeMasterRequestLastDateNotIn(vs ...time.Time) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldNotIn(FieldEmployeeMasterRequestLastDate, vs...))
}

// EmployeeMasterRequestLastDateGT applies the GT predicate on the "EmployeeMasterRequestLastDate" field.
func EmployeeMasterRequestLastDateGT(v time.Time) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldGT(FieldEmployeeMasterRequestLastDate, v))
}

// EmployeeMasterRequestLastDateGTE applies the GTE predicate on the "EmployeeMasterRequestLastDate" field.
func EmployeeMasterRequestLastDateGTE(v time.Time) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldGTE(FieldEmployeeMasterRequestLastDate, v))
}

// EmployeeMasterRequestLastDateLT applies the LT predicate on the "EmployeeMasterRequestLastDate" field.
func EmployeeMasterRequestLastDateLT(v time.Time) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldLT(FieldEmployeeMasterRequestLastDate, v))
}

// EmployeeMasterRequestLastDateLTE applies the LTE predicate on the "EmployeeMasterRequestLastDate" field.
func EmployeeMasterRequestLastDateLTE(v time.Time) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldLTE(FieldEmployeeMasterRequestLastDate, v))
}

// EmployeeMasterRequestLastDateIsNil applies the IsNil predicate on the "EmployeeMasterRequestLastDate" field.
func EmployeeMasterRequestLastDateIsNil() predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldIsNull(FieldEmployeeMasterRequestLastDate))
}

// EmployeeMasterRequestLastDateNotNil applies the NotNil predicate on the "EmployeeMasterRequestLastDate" field.
func EmployeeMasterRequestLastDateNotNil() predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldNotNull(FieldEmployeeMasterRequestLastDate))
}

// EmployeeMasterRequestApprovalLastDateEQ applies the EQ predicate on the "EmployeeMasterRequestApprovalLastDate" field.
func EmployeeMasterRequestApprovalLastDateEQ(v time.Time) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldEQ(FieldEmployeeMasterRequestApprovalLastDate, v))
}

// EmployeeMasterRequestApprovalLastDateNEQ applies the NEQ predicate on the "EmployeeMasterRequestApprovalLastDate" field.
func EmployeeMasterRequestApprovalLastDateNEQ(v time.Time) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldNEQ(FieldEmployeeMasterRequestApprovalLastDate, v))
}

// EmployeeMasterRequestApprovalLastDateIn applies the In predicate on the "EmployeeMasterRequestApprovalLastDate" field.
func EmployeeMasterRequestApprovalLastDateIn(vs ...time.Time) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldIn(FieldEmployeeMasterRequestApprovalLastDate, vs...))
}

// EmployeeMasterRequestApprovalLastDateNotIn applies the NotIn predicate on the "EmployeeMasterRequestApprovalLastDate" field.
func EmployeeMasterRequestApprovalLastDateNotIn(vs ...time.Time) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldNotIn(FieldEmployeeMasterRequestApprovalLastDate, vs...))
}

// EmployeeMasterRequestApprovalLastDateGT applies the GT predicate on the "EmployeeMasterRequestApprovalLastDate" field.
func EmployeeMasterRequestApprovalLastDateGT(v time.Time) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldGT(FieldEmployeeMasterRequestApprovalLastDate, v))
}

// EmployeeMasterRequestApprovalLastDateGTE applies the GTE predicate on the "EmployeeMasterRequestApprovalLastDate" field.
func EmployeeMasterRequestApprovalLastDateGTE(v time.Time) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldGTE(FieldEmployeeMasterRequestApprovalLastDate, v))
}

// EmployeeMasterRequestApprovalLastDateLT applies the LT predicate on the "EmployeeMasterRequestApprovalLastDate" field.
func EmployeeMasterRequestApprovalLastDateLT(v time.Time) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldLT(FieldEmployeeMasterRequestApprovalLastDate, v))
}

// EmployeeMasterRequestApprovalLastDateLTE applies the LTE predicate on the "EmployeeMasterRequestApprovalLastDate" field.
func EmployeeMasterRequestApprovalLastDateLTE(v time.Time) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldLTE(FieldEmployeeMasterRequestApprovalLastDate, v))
}

// EmployeeMasterRequestApprovalLastDateIsNil applies the IsNil predicate on the "EmployeeMasterRequestApprovalLastDate" field.
func EmployeeMasterRequestApprovalLastDateIsNil() predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldIsNull(FieldEmployeeMasterRequestApprovalLastDate))
}

// EmployeeMasterRequestApprovalLastDateNotNil applies the NotNil predicate on the "EmployeeMasterRequestApprovalLastDate" field.
func EmployeeMasterRequestApprovalLastDateNotNil() predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldNotNull(FieldEmployeeMasterRequestApprovalLastDate))
}

// ExamRegisterLastDateEQ applies the EQ predicate on the "ExamRegisterLastDate" field.
func ExamRegisterLastDateEQ(v time.Time) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldEQ(FieldExamRegisterLastDate, v))
}

// ExamRegisterLastDateNEQ applies the NEQ predicate on the "ExamRegisterLastDate" field.
func ExamRegisterLastDateNEQ(v time.Time) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldNEQ(FieldExamRegisterLastDate, v))
}

// ExamRegisterLastDateIn applies the In predicate on the "ExamRegisterLastDate" field.
func ExamRegisterLastDateIn(vs ...time.Time) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldIn(FieldExamRegisterLastDate, vs...))
}

// ExamRegisterLastDateNotIn applies the NotIn predicate on the "ExamRegisterLastDate" field.
func ExamRegisterLastDateNotIn(vs ...time.Time) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldNotIn(FieldExamRegisterLastDate, vs...))
}

// ExamRegisterLastDateGT applies the GT predicate on the "ExamRegisterLastDate" field.
func ExamRegisterLastDateGT(v time.Time) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldGT(FieldExamRegisterLastDate, v))
}

// ExamRegisterLastDateGTE applies the GTE predicate on the "ExamRegisterLastDate" field.
func ExamRegisterLastDateGTE(v time.Time) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldGTE(FieldExamRegisterLastDate, v))
}

// ExamRegisterLastDateLT applies the LT predicate on the "ExamRegisterLastDate" field.
func ExamRegisterLastDateLT(v time.Time) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldLT(FieldExamRegisterLastDate, v))
}

// ExamRegisterLastDateLTE applies the LTE predicate on the "ExamRegisterLastDate" field.
func ExamRegisterLastDateLTE(v time.Time) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldLTE(FieldExamRegisterLastDate, v))
}

// ExamRegisterLastDateIsNil applies the IsNil predicate on the "ExamRegisterLastDate" field.
func ExamRegisterLastDateIsNil() predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldIsNull(FieldExamRegisterLastDate))
}

// ExamRegisterLastDateNotNil applies the NotNil predicate on the "ExamRegisterLastDate" field.
func ExamRegisterLastDateNotNil() predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldNotNull(FieldExamRegisterLastDate))
}

// ApplicationStartDateEQ applies the EQ predicate on the "ApplicationStartDate" field.
func ApplicationStartDateEQ(v time.Time) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldEQ(FieldApplicationStartDate, v))
}

// ApplicationStartDateNEQ applies the NEQ predicate on the "ApplicationStartDate" field.
func ApplicationStartDateNEQ(v time.Time) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldNEQ(FieldApplicationStartDate, v))
}

// ApplicationStartDateIn applies the In predicate on the "ApplicationStartDate" field.
func ApplicationStartDateIn(vs ...time.Time) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldIn(FieldApplicationStartDate, vs...))
}

// ApplicationStartDateNotIn applies the NotIn predicate on the "ApplicationStartDate" field.
func ApplicationStartDateNotIn(vs ...time.Time) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldNotIn(FieldApplicationStartDate, vs...))
}

// ApplicationStartDateGT applies the GT predicate on the "ApplicationStartDate" field.
func ApplicationStartDateGT(v time.Time) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldGT(FieldApplicationStartDate, v))
}

// ApplicationStartDateGTE applies the GTE predicate on the "ApplicationStartDate" field.
func ApplicationStartDateGTE(v time.Time) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldGTE(FieldApplicationStartDate, v))
}

// ApplicationStartDateLT applies the LT predicate on the "ApplicationStartDate" field.
func ApplicationStartDateLT(v time.Time) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldLT(FieldApplicationStartDate, v))
}

// ApplicationStartDateLTE applies the LTE predicate on the "ApplicationStartDate" field.
func ApplicationStartDateLTE(v time.Time) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldLTE(FieldApplicationStartDate, v))
}

// ApplicationStartDateIsNil applies the IsNil predicate on the "ApplicationStartDate" field.
func ApplicationStartDateIsNil() predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldIsNull(FieldApplicationStartDate))
}

// ApplicationStartDateNotNil applies the NotNil predicate on the "ApplicationStartDate" field.
func ApplicationStartDateNotNil() predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldNotNull(FieldApplicationStartDate))
}

// ApplicationEndDateEQ applies the EQ predicate on the "ApplicationEndDate" field.
func ApplicationEndDateEQ(v time.Time) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldEQ(FieldApplicationEndDate, v))
}

// ApplicationEndDateNEQ applies the NEQ predicate on the "ApplicationEndDate" field.
func ApplicationEndDateNEQ(v time.Time) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldNEQ(FieldApplicationEndDate, v))
}

// ApplicationEndDateIn applies the In predicate on the "ApplicationEndDate" field.
func ApplicationEndDateIn(vs ...time.Time) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldIn(FieldApplicationEndDate, vs...))
}

// ApplicationEndDateNotIn applies the NotIn predicate on the "ApplicationEndDate" field.
func ApplicationEndDateNotIn(vs ...time.Time) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldNotIn(FieldApplicationEndDate, vs...))
}

// ApplicationEndDateGT applies the GT predicate on the "ApplicationEndDate" field.
func ApplicationEndDateGT(v time.Time) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldGT(FieldApplicationEndDate, v))
}

// ApplicationEndDateGTE applies the GTE predicate on the "ApplicationEndDate" field.
func ApplicationEndDateGTE(v time.Time) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldGTE(FieldApplicationEndDate, v))
}

// ApplicationEndDateLT applies the LT predicate on the "ApplicationEndDate" field.
func ApplicationEndDateLT(v time.Time) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldLT(FieldApplicationEndDate, v))
}

// ApplicationEndDateLTE applies the LTE predicate on the "ApplicationEndDate" field.
func ApplicationEndDateLTE(v time.Time) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldLTE(FieldApplicationEndDate, v))
}

// ApplicationEndDateIsNil applies the IsNil predicate on the "ApplicationEndDate" field.
func ApplicationEndDateIsNil() predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldIsNull(FieldApplicationEndDate))
}

// ApplicationEndDateNotNil applies the NotNil predicate on the "ApplicationEndDate" field.
func ApplicationEndDateNotNil() predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldNotNull(FieldApplicationEndDate))
}

// ApplicationCorrectionStartDateEQ applies the EQ predicate on the "ApplicationCorrectionStartDate" field.
func ApplicationCorrectionStartDateEQ(v time.Time) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldEQ(FieldApplicationCorrectionStartDate, v))
}

// ApplicationCorrectionStartDateNEQ applies the NEQ predicate on the "ApplicationCorrectionStartDate" field.
func ApplicationCorrectionStartDateNEQ(v time.Time) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldNEQ(FieldApplicationCorrectionStartDate, v))
}

// ApplicationCorrectionStartDateIn applies the In predicate on the "ApplicationCorrectionStartDate" field.
func ApplicationCorrectionStartDateIn(vs ...time.Time) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldIn(FieldApplicationCorrectionStartDate, vs...))
}

// ApplicationCorrectionStartDateNotIn applies the NotIn predicate on the "ApplicationCorrectionStartDate" field.
func ApplicationCorrectionStartDateNotIn(vs ...time.Time) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldNotIn(FieldApplicationCorrectionStartDate, vs...))
}

// ApplicationCorrectionStartDateGT applies the GT predicate on the "ApplicationCorrectionStartDate" field.
func ApplicationCorrectionStartDateGT(v time.Time) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldGT(FieldApplicationCorrectionStartDate, v))
}

// ApplicationCorrectionStartDateGTE applies the GTE predicate on the "ApplicationCorrectionStartDate" field.
func ApplicationCorrectionStartDateGTE(v time.Time) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldGTE(FieldApplicationCorrectionStartDate, v))
}

// ApplicationCorrectionStartDateLT applies the LT predicate on the "ApplicationCorrectionStartDate" field.
func ApplicationCorrectionStartDateLT(v time.Time) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldLT(FieldApplicationCorrectionStartDate, v))
}

// ApplicationCorrectionStartDateLTE applies the LTE predicate on the "ApplicationCorrectionStartDate" field.
func ApplicationCorrectionStartDateLTE(v time.Time) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldLTE(FieldApplicationCorrectionStartDate, v))
}

// ApplicationCorrectionStartDateIsNil applies the IsNil predicate on the "ApplicationCorrectionStartDate" field.
func ApplicationCorrectionStartDateIsNil() predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldIsNull(FieldApplicationCorrectionStartDate))
}

// ApplicationCorrectionStartDateNotNil applies the NotNil predicate on the "ApplicationCorrectionStartDate" field.
func ApplicationCorrectionStartDateNotNil() predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldNotNull(FieldApplicationCorrectionStartDate))
}

// ApplicationCorrectionLastDateEQ applies the EQ predicate on the "ApplicationCorrectionLastDate" field.
func ApplicationCorrectionLastDateEQ(v time.Time) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldEQ(FieldApplicationCorrectionLastDate, v))
}

// ApplicationCorrectionLastDateNEQ applies the NEQ predicate on the "ApplicationCorrectionLastDate" field.
func ApplicationCorrectionLastDateNEQ(v time.Time) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldNEQ(FieldApplicationCorrectionLastDate, v))
}

// ApplicationCorrectionLastDateIn applies the In predicate on the "ApplicationCorrectionLastDate" field.
func ApplicationCorrectionLastDateIn(vs ...time.Time) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldIn(FieldApplicationCorrectionLastDate, vs...))
}

// ApplicationCorrectionLastDateNotIn applies the NotIn predicate on the "ApplicationCorrectionLastDate" field.
func ApplicationCorrectionLastDateNotIn(vs ...time.Time) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldNotIn(FieldApplicationCorrectionLastDate, vs...))
}

// ApplicationCorrectionLastDateGT applies the GT predicate on the "ApplicationCorrectionLastDate" field.
func ApplicationCorrectionLastDateGT(v time.Time) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldGT(FieldApplicationCorrectionLastDate, v))
}

// ApplicationCorrectionLastDateGTE applies the GTE predicate on the "ApplicationCorrectionLastDate" field.
func ApplicationCorrectionLastDateGTE(v time.Time) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldGTE(FieldApplicationCorrectionLastDate, v))
}

// ApplicationCorrectionLastDateLT applies the LT predicate on the "ApplicationCorrectionLastDate" field.
func ApplicationCorrectionLastDateLT(v time.Time) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldLT(FieldApplicationCorrectionLastDate, v))
}

// ApplicationCorrectionLastDateLTE applies the LTE predicate on the "ApplicationCorrectionLastDate" field.
func ApplicationCorrectionLastDateLTE(v time.Time) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldLTE(FieldApplicationCorrectionLastDate, v))
}

// ApplicationCorrectionLastDateIsNil applies the IsNil predicate on the "ApplicationCorrectionLastDate" field.
func ApplicationCorrectionLastDateIsNil() predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldIsNull(FieldApplicationCorrectionLastDate))
}

// ApplicationCorrectionLastDateNotNil applies the NotNil predicate on the "ApplicationCorrectionLastDate" field.
func ApplicationCorrectionLastDateNotNil() predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldNotNull(FieldApplicationCorrectionLastDate))
}

// ApplicationVerificationLastDateEQ applies the EQ predicate on the "ApplicationVerificationLastDate" field.
func ApplicationVerificationLastDateEQ(v time.Time) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldEQ(FieldApplicationVerificationLastDate, v))
}

// ApplicationVerificationLastDateNEQ applies the NEQ predicate on the "ApplicationVerificationLastDate" field.
func ApplicationVerificationLastDateNEQ(v time.Time) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldNEQ(FieldApplicationVerificationLastDate, v))
}

// ApplicationVerificationLastDateIn applies the In predicate on the "ApplicationVerificationLastDate" field.
func ApplicationVerificationLastDateIn(vs ...time.Time) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldIn(FieldApplicationVerificationLastDate, vs...))
}

// ApplicationVerificationLastDateNotIn applies the NotIn predicate on the "ApplicationVerificationLastDate" field.
func ApplicationVerificationLastDateNotIn(vs ...time.Time) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldNotIn(FieldApplicationVerificationLastDate, vs...))
}

// ApplicationVerificationLastDateGT applies the GT predicate on the "ApplicationVerificationLastDate" field.
func ApplicationVerificationLastDateGT(v time.Time) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldGT(FieldApplicationVerificationLastDate, v))
}

// ApplicationVerificationLastDateGTE applies the GTE predicate on the "ApplicationVerificationLastDate" field.
func ApplicationVerificationLastDateGTE(v time.Time) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldGTE(FieldApplicationVerificationLastDate, v))
}

// ApplicationVerificationLastDateLT applies the LT predicate on the "ApplicationVerificationLastDate" field.
func ApplicationVerificationLastDateLT(v time.Time) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldLT(FieldApplicationVerificationLastDate, v))
}

// ApplicationVerificationLastDateLTE applies the LTE predicate on the "ApplicationVerificationLastDate" field.
func ApplicationVerificationLastDateLTE(v time.Time) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldLTE(FieldApplicationVerificationLastDate, v))
}

// ApplicationVerificationLastDateIsNil applies the IsNil predicate on the "ApplicationVerificationLastDate" field.
func ApplicationVerificationLastDateIsNil() predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldIsNull(FieldApplicationVerificationLastDate))
}

// ApplicationVerificationLastDateNotNil applies the NotNil predicate on the "ApplicationVerificationLastDate" field.
func ApplicationVerificationLastDateNotNil() predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldNotNull(FieldApplicationVerificationLastDate))
}

// CenterAllotmentEndDateEQ applies the EQ predicate on the "CenterAllotmentEndDate" field.
func CenterAllotmentEndDateEQ(v time.Time) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldEQ(FieldCenterAllotmentEndDate, v))
}

// CenterAllotmentEndDateNEQ applies the NEQ predicate on the "CenterAllotmentEndDate" field.
func CenterAllotmentEndDateNEQ(v time.Time) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldNEQ(FieldCenterAllotmentEndDate, v))
}

// CenterAllotmentEndDateIn applies the In predicate on the "CenterAllotmentEndDate" field.
func CenterAllotmentEndDateIn(vs ...time.Time) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldIn(FieldCenterAllotmentEndDate, vs...))
}

// CenterAllotmentEndDateNotIn applies the NotIn predicate on the "CenterAllotmentEndDate" field.
func CenterAllotmentEndDateNotIn(vs ...time.Time) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldNotIn(FieldCenterAllotmentEndDate, vs...))
}

// CenterAllotmentEndDateGT applies the GT predicate on the "CenterAllotmentEndDate" field.
func CenterAllotmentEndDateGT(v time.Time) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldGT(FieldCenterAllotmentEndDate, v))
}

// CenterAllotmentEndDateGTE applies the GTE predicate on the "CenterAllotmentEndDate" field.
func CenterAllotmentEndDateGTE(v time.Time) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldGTE(FieldCenterAllotmentEndDate, v))
}

// CenterAllotmentEndDateLT applies the LT predicate on the "CenterAllotmentEndDate" field.
func CenterAllotmentEndDateLT(v time.Time) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldLT(FieldCenterAllotmentEndDate, v))
}

// CenterAllotmentEndDateLTE applies the LTE predicate on the "CenterAllotmentEndDate" field.
func CenterAllotmentEndDateLTE(v time.Time) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldLTE(FieldCenterAllotmentEndDate, v))
}

// CenterAllotmentEndDateIsNil applies the IsNil predicate on the "CenterAllotmentEndDate" field.
func CenterAllotmentEndDateIsNil() predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldIsNull(FieldCenterAllotmentEndDate))
}

// CenterAllotmentEndDateNotNil applies the NotNil predicate on the "CenterAllotmentEndDate" field.
func CenterAllotmentEndDateNotNil() predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldNotNull(FieldCenterAllotmentEndDate))
}

// NodalOfficerApprovalDateEQ applies the EQ predicate on the "NodalOfficerApprovalDate" field.
func NodalOfficerApprovalDateEQ(v time.Time) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldEQ(FieldNodalOfficerApprovalDate, v))
}

// NodalOfficerApprovalDateNEQ applies the NEQ predicate on the "NodalOfficerApprovalDate" field.
func NodalOfficerApprovalDateNEQ(v time.Time) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldNEQ(FieldNodalOfficerApprovalDate, v))
}

// NodalOfficerApprovalDateIn applies the In predicate on the "NodalOfficerApprovalDate" field.
func NodalOfficerApprovalDateIn(vs ...time.Time) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldIn(FieldNodalOfficerApprovalDate, vs...))
}

// NodalOfficerApprovalDateNotIn applies the NotIn predicate on the "NodalOfficerApprovalDate" field.
func NodalOfficerApprovalDateNotIn(vs ...time.Time) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldNotIn(FieldNodalOfficerApprovalDate, vs...))
}

// NodalOfficerApprovalDateGT applies the GT predicate on the "NodalOfficerApprovalDate" field.
func NodalOfficerApprovalDateGT(v time.Time) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldGT(FieldNodalOfficerApprovalDate, v))
}

// NodalOfficerApprovalDateGTE applies the GTE predicate on the "NodalOfficerApprovalDate" field.
func NodalOfficerApprovalDateGTE(v time.Time) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldGTE(FieldNodalOfficerApprovalDate, v))
}

// NodalOfficerApprovalDateLT applies the LT predicate on the "NodalOfficerApprovalDate" field.
func NodalOfficerApprovalDateLT(v time.Time) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldLT(FieldNodalOfficerApprovalDate, v))
}

// NodalOfficerApprovalDateLTE applies the LTE predicate on the "NodalOfficerApprovalDate" field.
func NodalOfficerApprovalDateLTE(v time.Time) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldLTE(FieldNodalOfficerApprovalDate, v))
}

// NodalOfficerApprovalDateIsNil applies the IsNil predicate on the "NodalOfficerApprovalDate" field.
func NodalOfficerApprovalDateIsNil() predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldIsNull(FieldNodalOfficerApprovalDate))
}

// NodalOfficerApprovalDateNotNil applies the NotNil predicate on the "NodalOfficerApprovalDate" field.
func NodalOfficerApprovalDateNotNil() predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldNotNull(FieldNodalOfficerApprovalDate))
}

// AdmitCardDateEQ applies the EQ predicate on the "AdmitCardDate" field.
func AdmitCardDateEQ(v time.Time) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldEQ(FieldAdmitCardDate, v))
}

// AdmitCardDateNEQ applies the NEQ predicate on the "AdmitCardDate" field.
func AdmitCardDateNEQ(v time.Time) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldNEQ(FieldAdmitCardDate, v))
}

// AdmitCardDateIn applies the In predicate on the "AdmitCardDate" field.
func AdmitCardDateIn(vs ...time.Time) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldIn(FieldAdmitCardDate, vs...))
}

// AdmitCardDateNotIn applies the NotIn predicate on the "AdmitCardDate" field.
func AdmitCardDateNotIn(vs ...time.Time) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldNotIn(FieldAdmitCardDate, vs...))
}

// AdmitCardDateGT applies the GT predicate on the "AdmitCardDate" field.
func AdmitCardDateGT(v time.Time) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldGT(FieldAdmitCardDate, v))
}

// AdmitCardDateGTE applies the GTE predicate on the "AdmitCardDate" field.
func AdmitCardDateGTE(v time.Time) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldGTE(FieldAdmitCardDate, v))
}

// AdmitCardDateLT applies the LT predicate on the "AdmitCardDate" field.
func AdmitCardDateLT(v time.Time) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldLT(FieldAdmitCardDate, v))
}

// AdmitCardDateLTE applies the LTE predicate on the "AdmitCardDate" field.
func AdmitCardDateLTE(v time.Time) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldLTE(FieldAdmitCardDate, v))
}

// AdmitCardDateIsNil applies the IsNil predicate on the "AdmitCardDate" field.
func AdmitCardDateIsNil() predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldIsNull(FieldAdmitCardDate))
}

// AdmitCardDateNotNil applies the NotNil predicate on the "AdmitCardDate" field.
func AdmitCardDateNotNil() predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldNotNull(FieldAdmitCardDate))
}

// UpdatedAtEQ applies the EQ predicate on the "UpdatedAt" field.
func UpdatedAtEQ(v time.Time) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "UpdatedAt" field.
func UpdatedAtNEQ(v time.Time) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "UpdatedAt" field.
func UpdatedAtIn(vs ...time.Time) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "UpdatedAt" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "UpdatedAt" field.
func UpdatedAtGT(v time.Time) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "UpdatedAt" field.
func UpdatedAtGTE(v time.Time) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "UpdatedAt" field.
func UpdatedAtLT(v time.Time) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "UpdatedAt" field.
func UpdatedAtLTE(v time.Time) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldLTE(FieldUpdatedAt, v))
}

// UpdatedAtIsNil applies the IsNil predicate on the "UpdatedAt" field.
func UpdatedAtIsNil() predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldIsNull(FieldUpdatedAt))
}

// UpdatedAtNotNil applies the NotNil predicate on the "UpdatedAt" field.
func UpdatedAtNotNil() predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldNotNull(FieldUpdatedAt))
}

// UpdatedByEQ applies the EQ predicate on the "UpdatedBy" field.
func UpdatedByEQ(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldEQ(FieldUpdatedBy, v))
}

// UpdatedByNEQ applies the NEQ predicate on the "UpdatedBy" field.
func UpdatedByNEQ(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldNEQ(FieldUpdatedBy, v))
}

// UpdatedByIn applies the In predicate on the "UpdatedBy" field.
func UpdatedByIn(vs ...string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldIn(FieldUpdatedBy, vs...))
}

// UpdatedByNotIn applies the NotIn predicate on the "UpdatedBy" field.
func UpdatedByNotIn(vs ...string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldNotIn(FieldUpdatedBy, vs...))
}

// UpdatedByGT applies the GT predicate on the "UpdatedBy" field.
func UpdatedByGT(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldGT(FieldUpdatedBy, v))
}

// UpdatedByGTE applies the GTE predicate on the "UpdatedBy" field.
func UpdatedByGTE(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldGTE(FieldUpdatedBy, v))
}

// UpdatedByLT applies the LT predicate on the "UpdatedBy" field.
func UpdatedByLT(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldLT(FieldUpdatedBy, v))
}

// UpdatedByLTE applies the LTE predicate on the "UpdatedBy" field.
func UpdatedByLTE(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldLTE(FieldUpdatedBy, v))
}

// UpdatedByContains applies the Contains predicate on the "UpdatedBy" field.
func UpdatedByContains(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldContains(FieldUpdatedBy, v))
}

// UpdatedByHasPrefix applies the HasPrefix predicate on the "UpdatedBy" field.
func UpdatedByHasPrefix(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldHasPrefix(FieldUpdatedBy, v))
}

// UpdatedByHasSuffix applies the HasSuffix predicate on the "UpdatedBy" field.
func UpdatedByHasSuffix(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldHasSuffix(FieldUpdatedBy, v))
}

// UpdatedByIsNil applies the IsNil predicate on the "UpdatedBy" field.
func UpdatedByIsNil() predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldIsNull(FieldUpdatedBy))
}

// UpdatedByNotNil applies the NotNil predicate on the "UpdatedBy" field.
func UpdatedByNotNil() predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldNotNull(FieldUpdatedBy))
}

// UpdatedByEqualFold applies the EqualFold predicate on the "UpdatedBy" field.
func UpdatedByEqualFold(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldEqualFold(FieldUpdatedBy, v))
}

// UpdatedByContainsFold applies the ContainsFold predicate on the "UpdatedBy" field.
func UpdatedByContainsFold(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldContainsFold(FieldUpdatedBy, v))
}

// CrucialDateIsNil applies the IsNil predicate on the "CrucialDate" field.
func CrucialDateIsNil() predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldIsNull(FieldCrucialDate))
}

// CrucialDateNotNil applies the NotNil predicate on the "CrucialDate" field.
func CrucialDateNotNil() predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldNotNull(FieldCrucialDate))
}

// DesignationEQ applies the EQ predicate on the "Designation" field.
func DesignationEQ(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldEQ(FieldDesignation, v))
}

// DesignationNEQ applies the NEQ predicate on the "Designation" field.
func DesignationNEQ(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldNEQ(FieldDesignation, v))
}

// DesignationIn applies the In predicate on the "Designation" field.
func DesignationIn(vs ...string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldIn(FieldDesignation, vs...))
}

// DesignationNotIn applies the NotIn predicate on the "Designation" field.
func DesignationNotIn(vs ...string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldNotIn(FieldDesignation, vs...))
}

// DesignationGT applies the GT predicate on the "Designation" field.
func DesignationGT(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldGT(FieldDesignation, v))
}

// DesignationGTE applies the GTE predicate on the "Designation" field.
func DesignationGTE(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldGTE(FieldDesignation, v))
}

// DesignationLT applies the LT predicate on the "Designation" field.
func DesignationLT(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldLT(FieldDesignation, v))
}

// DesignationLTE applies the LTE predicate on the "Designation" field.
func DesignationLTE(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldLTE(FieldDesignation, v))
}

// DesignationContains applies the Contains predicate on the "Designation" field.
func DesignationContains(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldContains(FieldDesignation, v))
}

// DesignationHasPrefix applies the HasPrefix predicate on the "Designation" field.
func DesignationHasPrefix(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldHasPrefix(FieldDesignation, v))
}

// DesignationHasSuffix applies the HasSuffix predicate on the "Designation" field.
func DesignationHasSuffix(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldHasSuffix(FieldDesignation, v))
}

// DesignationIsNil applies the IsNil predicate on the "Designation" field.
func DesignationIsNil() predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldIsNull(FieldDesignation))
}

// DesignationNotNil applies the NotNil predicate on the "Designation" field.
func DesignationNotNil() predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldNotNull(FieldDesignation))
}

// DesignationEqualFold applies the EqualFold predicate on the "Designation" field.
func DesignationEqualFold(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldEqualFold(FieldDesignation, v))
}

// DesignationContainsFold applies the ContainsFold predicate on the "Designation" field.
func DesignationContainsFold(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldContainsFold(FieldDesignation, v))
}

// OfficerNameEQ applies the EQ predicate on the "OfficerName" field.
func OfficerNameEQ(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldEQ(FieldOfficerName, v))
}

// OfficerNameNEQ applies the NEQ predicate on the "OfficerName" field.
func OfficerNameNEQ(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldNEQ(FieldOfficerName, v))
}

// OfficerNameIn applies the In predicate on the "OfficerName" field.
func OfficerNameIn(vs ...string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldIn(FieldOfficerName, vs...))
}

// OfficerNameNotIn applies the NotIn predicate on the "OfficerName" field.
func OfficerNameNotIn(vs ...string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldNotIn(FieldOfficerName, vs...))
}

// OfficerNameGT applies the GT predicate on the "OfficerName" field.
func OfficerNameGT(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldGT(FieldOfficerName, v))
}

// OfficerNameGTE applies the GTE predicate on the "OfficerName" field.
func OfficerNameGTE(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldGTE(FieldOfficerName, v))
}

// OfficerNameLT applies the LT predicate on the "OfficerName" field.
func OfficerNameLT(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldLT(FieldOfficerName, v))
}

// OfficerNameLTE applies the LTE predicate on the "OfficerName" field.
func OfficerNameLTE(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldLTE(FieldOfficerName, v))
}

// OfficerNameContains applies the Contains predicate on the "OfficerName" field.
func OfficerNameContains(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldContains(FieldOfficerName, v))
}

// OfficerNameHasPrefix applies the HasPrefix predicate on the "OfficerName" field.
func OfficerNameHasPrefix(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldHasPrefix(FieldOfficerName, v))
}

// OfficerNameHasSuffix applies the HasSuffix predicate on the "OfficerName" field.
func OfficerNameHasSuffix(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldHasSuffix(FieldOfficerName, v))
}

// OfficerNameIsNil applies the IsNil predicate on the "OfficerName" field.
func OfficerNameIsNil() predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldIsNull(FieldOfficerName))
}

// OfficerNameNotNil applies the NotNil predicate on the "OfficerName" field.
func OfficerNameNotNil() predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldNotNull(FieldOfficerName))
}

// OfficerNameEqualFold applies the EqualFold predicate on the "OfficerName" field.
func OfficerNameEqualFold(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldEqualFold(FieldOfficerName, v))
}

// OfficerNameContainsFold applies the ContainsFold predicate on the "OfficerName" field.
func OfficerNameContainsFold(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldContainsFold(FieldOfficerName, v))
}

// NotificationOrderNumberEQ applies the EQ predicate on the "NotificationOrderNumber" field.
func NotificationOrderNumberEQ(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldEQ(FieldNotificationOrderNumber, v))
}

// NotificationOrderNumberNEQ applies the NEQ predicate on the "NotificationOrderNumber" field.
func NotificationOrderNumberNEQ(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldNEQ(FieldNotificationOrderNumber, v))
}

// NotificationOrderNumberIn applies the In predicate on the "NotificationOrderNumber" field.
func NotificationOrderNumberIn(vs ...string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldIn(FieldNotificationOrderNumber, vs...))
}

// NotificationOrderNumberNotIn applies the NotIn predicate on the "NotificationOrderNumber" field.
func NotificationOrderNumberNotIn(vs ...string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldNotIn(FieldNotificationOrderNumber, vs...))
}

// NotificationOrderNumberGT applies the GT predicate on the "NotificationOrderNumber" field.
func NotificationOrderNumberGT(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldGT(FieldNotificationOrderNumber, v))
}

// NotificationOrderNumberGTE applies the GTE predicate on the "NotificationOrderNumber" field.
func NotificationOrderNumberGTE(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldGTE(FieldNotificationOrderNumber, v))
}

// NotificationOrderNumberLT applies the LT predicate on the "NotificationOrderNumber" field.
func NotificationOrderNumberLT(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldLT(FieldNotificationOrderNumber, v))
}

// NotificationOrderNumberLTE applies the LTE predicate on the "NotificationOrderNumber" field.
func NotificationOrderNumberLTE(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldLTE(FieldNotificationOrderNumber, v))
}

// NotificationOrderNumberContains applies the Contains predicate on the "NotificationOrderNumber" field.
func NotificationOrderNumberContains(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldContains(FieldNotificationOrderNumber, v))
}

// NotificationOrderNumberHasPrefix applies the HasPrefix predicate on the "NotificationOrderNumber" field.
func NotificationOrderNumberHasPrefix(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldHasPrefix(FieldNotificationOrderNumber, v))
}

// NotificationOrderNumberHasSuffix applies the HasSuffix predicate on the "NotificationOrderNumber" field.
func NotificationOrderNumberHasSuffix(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldHasSuffix(FieldNotificationOrderNumber, v))
}

// NotificationOrderNumberIsNil applies the IsNil predicate on the "NotificationOrderNumber" field.
func NotificationOrderNumberIsNil() predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldIsNull(FieldNotificationOrderNumber))
}

// NotificationOrderNumberNotNil applies the NotNil predicate on the "NotificationOrderNumber" field.
func NotificationOrderNumberNotNil() predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldNotNull(FieldNotificationOrderNumber))
}

// NotificationOrderNumberEqualFold applies the EqualFold predicate on the "NotificationOrderNumber" field.
func NotificationOrderNumberEqualFold(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldEqualFold(FieldNotificationOrderNumber, v))
}

// NotificationOrderNumberContainsFold applies the ContainsFold predicate on the "NotificationOrderNumber" field.
func NotificationOrderNumberContainsFold(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldContainsFold(FieldNotificationOrderNumber, v))
}

// NotesheetScannedCopyEQ applies the EQ predicate on the "NotesheetScannedCopy" field.
func NotesheetScannedCopyEQ(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldEQ(FieldNotesheetScannedCopy, v))
}

// NotesheetScannedCopyNEQ applies the NEQ predicate on the "NotesheetScannedCopy" field.
func NotesheetScannedCopyNEQ(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldNEQ(FieldNotesheetScannedCopy, v))
}

// NotesheetScannedCopyIn applies the In predicate on the "NotesheetScannedCopy" field.
func NotesheetScannedCopyIn(vs ...string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldIn(FieldNotesheetScannedCopy, vs...))
}

// NotesheetScannedCopyNotIn applies the NotIn predicate on the "NotesheetScannedCopy" field.
func NotesheetScannedCopyNotIn(vs ...string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldNotIn(FieldNotesheetScannedCopy, vs...))
}

// NotesheetScannedCopyGT applies the GT predicate on the "NotesheetScannedCopy" field.
func NotesheetScannedCopyGT(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldGT(FieldNotesheetScannedCopy, v))
}

// NotesheetScannedCopyGTE applies the GTE predicate on the "NotesheetScannedCopy" field.
func NotesheetScannedCopyGTE(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldGTE(FieldNotesheetScannedCopy, v))
}

// NotesheetScannedCopyLT applies the LT predicate on the "NotesheetScannedCopy" field.
func NotesheetScannedCopyLT(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldLT(FieldNotesheetScannedCopy, v))
}

// NotesheetScannedCopyLTE applies the LTE predicate on the "NotesheetScannedCopy" field.
func NotesheetScannedCopyLTE(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldLTE(FieldNotesheetScannedCopy, v))
}

// NotesheetScannedCopyContains applies the Contains predicate on the "NotesheetScannedCopy" field.
func NotesheetScannedCopyContains(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldContains(FieldNotesheetScannedCopy, v))
}

// NotesheetScannedCopyHasPrefix applies the HasPrefix predicate on the "NotesheetScannedCopy" field.
func NotesheetScannedCopyHasPrefix(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldHasPrefix(FieldNotesheetScannedCopy, v))
}

// NotesheetScannedCopyHasSuffix applies the HasSuffix predicate on the "NotesheetScannedCopy" field.
func NotesheetScannedCopyHasSuffix(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldHasSuffix(FieldNotesheetScannedCopy, v))
}

// NotesheetScannedCopyIsNil applies the IsNil predicate on the "NotesheetScannedCopy" field.
func NotesheetScannedCopyIsNil() predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldIsNull(FieldNotesheetScannedCopy))
}

// NotesheetScannedCopyNotNil applies the NotNil predicate on the "NotesheetScannedCopy" field.
func NotesheetScannedCopyNotNil() predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldNotNull(FieldNotesheetScannedCopy))
}

// NotesheetScannedCopyEqualFold applies the EqualFold predicate on the "NotesheetScannedCopy" field.
func NotesheetScannedCopyEqualFold(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldEqualFold(FieldNotesheetScannedCopy, v))
}

// NotesheetScannedCopyContainsFold applies the ContainsFold predicate on the "NotesheetScannedCopy" field.
func NotesheetScannedCopyContainsFold(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldContainsFold(FieldNotesheetScannedCopy, v))
}

// NotificationNumberEQ applies the EQ predicate on the "NotificationNumber" field.
func NotificationNumberEQ(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldEQ(FieldNotificationNumber, v))
}

// NotificationNumberNEQ applies the NEQ predicate on the "NotificationNumber" field.
func NotificationNumberNEQ(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldNEQ(FieldNotificationNumber, v))
}

// NotificationNumberIn applies the In predicate on the "NotificationNumber" field.
func NotificationNumberIn(vs ...string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldIn(FieldNotificationNumber, vs...))
}

// NotificationNumberNotIn applies the NotIn predicate on the "NotificationNumber" field.
func NotificationNumberNotIn(vs ...string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldNotIn(FieldNotificationNumber, vs...))
}

// NotificationNumberGT applies the GT predicate on the "NotificationNumber" field.
func NotificationNumberGT(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldGT(FieldNotificationNumber, v))
}

// NotificationNumberGTE applies the GTE predicate on the "NotificationNumber" field.
func NotificationNumberGTE(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldGTE(FieldNotificationNumber, v))
}

// NotificationNumberLT applies the LT predicate on the "NotificationNumber" field.
func NotificationNumberLT(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldLT(FieldNotificationNumber, v))
}

// NotificationNumberLTE applies the LTE predicate on the "NotificationNumber" field.
func NotificationNumberLTE(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldLTE(FieldNotificationNumber, v))
}

// NotificationNumberContains applies the Contains predicate on the "NotificationNumber" field.
func NotificationNumberContains(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldContains(FieldNotificationNumber, v))
}

// NotificationNumberHasPrefix applies the HasPrefix predicate on the "NotificationNumber" field.
func NotificationNumberHasPrefix(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldHasPrefix(FieldNotificationNumber, v))
}

// NotificationNumberHasSuffix applies the HasSuffix predicate on the "NotificationNumber" field.
func NotificationNumberHasSuffix(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldHasSuffix(FieldNotificationNumber, v))
}

// NotificationNumberIsNil applies the IsNil predicate on the "NotificationNumber" field.
func NotificationNumberIsNil() predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldIsNull(FieldNotificationNumber))
}

// NotificationNumberNotNil applies the NotNil predicate on the "NotificationNumber" field.
func NotificationNumberNotNil() predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldNotNull(FieldNotificationNumber))
}

// NotificationNumberEqualFold applies the EqualFold predicate on the "NotificationNumber" field.
func NotificationNumberEqualFold(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldEqualFold(FieldNotificationNumber, v))
}

// NotificationNumberContainsFold applies the ContainsFold predicate on the "NotificationNumber" field.
func NotificationNumberContainsFold(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldContainsFold(FieldNotificationNumber, v))
}

// FlagEQ applies the EQ predicate on the "Flag" field.
func FlagEQ(v bool) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldEQ(FieldFlag, v))
}

// FlagNEQ applies the NEQ predicate on the "Flag" field.
func FlagNEQ(v bool) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldNEQ(FieldFlag, v))
}

// FlagIsNil applies the IsNil predicate on the "Flag" field.
func FlagIsNil() predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldIsNull(FieldFlag))
}

// FlagNotNil applies the NotNil predicate on the "Flag" field.
func FlagNotNil() predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldNotNull(FieldFlag))
}

// ExamShortNameEQ applies the EQ predicate on the "ExamShortName" field.
func ExamShortNameEQ(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldEQ(FieldExamShortName, v))
}

// ExamShortNameNEQ applies the NEQ predicate on the "ExamShortName" field.
func ExamShortNameNEQ(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldNEQ(FieldExamShortName, v))
}

// ExamShortNameIn applies the In predicate on the "ExamShortName" field.
func ExamShortNameIn(vs ...string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldIn(FieldExamShortName, vs...))
}

// ExamShortNameNotIn applies the NotIn predicate on the "ExamShortName" field.
func ExamShortNameNotIn(vs ...string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldNotIn(FieldExamShortName, vs...))
}

// ExamShortNameGT applies the GT predicate on the "ExamShortName" field.
func ExamShortNameGT(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldGT(FieldExamShortName, v))
}

// ExamShortNameGTE applies the GTE predicate on the "ExamShortName" field.
func ExamShortNameGTE(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldGTE(FieldExamShortName, v))
}

// ExamShortNameLT applies the LT predicate on the "ExamShortName" field.
func ExamShortNameLT(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldLT(FieldExamShortName, v))
}

// ExamShortNameLTE applies the LTE predicate on the "ExamShortName" field.
func ExamShortNameLTE(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldLTE(FieldExamShortName, v))
}

// ExamShortNameContains applies the Contains predicate on the "ExamShortName" field.
func ExamShortNameContains(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldContains(FieldExamShortName, v))
}

// ExamShortNameHasPrefix applies the HasPrefix predicate on the "ExamShortName" field.
func ExamShortNameHasPrefix(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldHasPrefix(FieldExamShortName, v))
}

// ExamShortNameHasSuffix applies the HasSuffix predicate on the "ExamShortName" field.
func ExamShortNameHasSuffix(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldHasSuffix(FieldExamShortName, v))
}

// ExamShortNameIsNil applies the IsNil predicate on the "ExamShortName" field.
func ExamShortNameIsNil() predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldIsNull(FieldExamShortName))
}

// ExamShortNameNotNil applies the NotNil predicate on the "ExamShortName" field.
func ExamShortNameNotNil() predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldNotNull(FieldExamShortName))
}

// ExamShortNameEqualFold applies the EqualFold predicate on the "ExamShortName" field.
func ExamShortNameEqualFold(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldEqualFold(FieldExamShortName, v))
}

// ExamShortNameContainsFold applies the ContainsFold predicate on the "ExamShortName" field.
func ExamShortNameContainsFold(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldContainsFold(FieldExamShortName, v))
}

// CircleOfficeFacilityIdEQ applies the EQ predicate on the "CircleOfficeFacilityId" field.
func CircleOfficeFacilityIdEQ(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldEQ(FieldCircleOfficeFacilityId, v))
}

// CircleOfficeFacilityIdNEQ applies the NEQ predicate on the "CircleOfficeFacilityId" field.
func CircleOfficeFacilityIdNEQ(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldNEQ(FieldCircleOfficeFacilityId, v))
}

// CircleOfficeFacilityIdIn applies the In predicate on the "CircleOfficeFacilityId" field.
func CircleOfficeFacilityIdIn(vs ...string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldIn(FieldCircleOfficeFacilityId, vs...))
}

// CircleOfficeFacilityIdNotIn applies the NotIn predicate on the "CircleOfficeFacilityId" field.
func CircleOfficeFacilityIdNotIn(vs ...string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldNotIn(FieldCircleOfficeFacilityId, vs...))
}

// CircleOfficeFacilityIdGT applies the GT predicate on the "CircleOfficeFacilityId" field.
func CircleOfficeFacilityIdGT(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldGT(FieldCircleOfficeFacilityId, v))
}

// CircleOfficeFacilityIdGTE applies the GTE predicate on the "CircleOfficeFacilityId" field.
func CircleOfficeFacilityIdGTE(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldGTE(FieldCircleOfficeFacilityId, v))
}

// CircleOfficeFacilityIdLT applies the LT predicate on the "CircleOfficeFacilityId" field.
func CircleOfficeFacilityIdLT(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldLT(FieldCircleOfficeFacilityId, v))
}

// CircleOfficeFacilityIdLTE applies the LTE predicate on the "CircleOfficeFacilityId" field.
func CircleOfficeFacilityIdLTE(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldLTE(FieldCircleOfficeFacilityId, v))
}

// CircleOfficeFacilityIdContains applies the Contains predicate on the "CircleOfficeFacilityId" field.
func CircleOfficeFacilityIdContains(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldContains(FieldCircleOfficeFacilityId, v))
}

// CircleOfficeFacilityIdHasPrefix applies the HasPrefix predicate on the "CircleOfficeFacilityId" field.
func CircleOfficeFacilityIdHasPrefix(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldHasPrefix(FieldCircleOfficeFacilityId, v))
}

// CircleOfficeFacilityIdHasSuffix applies the HasSuffix predicate on the "CircleOfficeFacilityId" field.
func CircleOfficeFacilityIdHasSuffix(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldHasSuffix(FieldCircleOfficeFacilityId, v))
}

// CircleOfficeFacilityIdIsNil applies the IsNil predicate on the "CircleOfficeFacilityId" field.
func CircleOfficeFacilityIdIsNil() predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldIsNull(FieldCircleOfficeFacilityId))
}

// CircleOfficeFacilityIdNotNil applies the NotNil predicate on the "CircleOfficeFacilityId" field.
func CircleOfficeFacilityIdNotNil() predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldNotNull(FieldCircleOfficeFacilityId))
}

// CircleOfficeFacilityIdEqualFold applies the EqualFold predicate on the "CircleOfficeFacilityId" field.
func CircleOfficeFacilityIdEqualFold(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldEqualFold(FieldCircleOfficeFacilityId, v))
}

// CircleOfficeFacilityIdContainsFold applies the ContainsFold predicate on the "CircleOfficeFacilityId" field.
func CircleOfficeFacilityIdContainsFold(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldContainsFold(FieldCircleOfficeFacilityId, v))
}

// CircleOfficeNameEQ applies the EQ predicate on the "CircleOfficeName" field.
func CircleOfficeNameEQ(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldEQ(FieldCircleOfficeName, v))
}

// CircleOfficeNameNEQ applies the NEQ predicate on the "CircleOfficeName" field.
func CircleOfficeNameNEQ(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldNEQ(FieldCircleOfficeName, v))
}

// CircleOfficeNameIn applies the In predicate on the "CircleOfficeName" field.
func CircleOfficeNameIn(vs ...string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldIn(FieldCircleOfficeName, vs...))
}

// CircleOfficeNameNotIn applies the NotIn predicate on the "CircleOfficeName" field.
func CircleOfficeNameNotIn(vs ...string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldNotIn(FieldCircleOfficeName, vs...))
}

// CircleOfficeNameGT applies the GT predicate on the "CircleOfficeName" field.
func CircleOfficeNameGT(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldGT(FieldCircleOfficeName, v))
}

// CircleOfficeNameGTE applies the GTE predicate on the "CircleOfficeName" field.
func CircleOfficeNameGTE(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldGTE(FieldCircleOfficeName, v))
}

// CircleOfficeNameLT applies the LT predicate on the "CircleOfficeName" field.
func CircleOfficeNameLT(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldLT(FieldCircleOfficeName, v))
}

// CircleOfficeNameLTE applies the LTE predicate on the "CircleOfficeName" field.
func CircleOfficeNameLTE(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldLTE(FieldCircleOfficeName, v))
}

// CircleOfficeNameContains applies the Contains predicate on the "CircleOfficeName" field.
func CircleOfficeNameContains(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldContains(FieldCircleOfficeName, v))
}

// CircleOfficeNameHasPrefix applies the HasPrefix predicate on the "CircleOfficeName" field.
func CircleOfficeNameHasPrefix(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldHasPrefix(FieldCircleOfficeName, v))
}

// CircleOfficeNameHasSuffix applies the HasSuffix predicate on the "CircleOfficeName" field.
func CircleOfficeNameHasSuffix(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldHasSuffix(FieldCircleOfficeName, v))
}

// CircleOfficeNameIsNil applies the IsNil predicate on the "CircleOfficeName" field.
func CircleOfficeNameIsNil() predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldIsNull(FieldCircleOfficeName))
}

// CircleOfficeNameNotNil applies the NotNil predicate on the "CircleOfficeName" field.
func CircleOfficeNameNotNil() predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldNotNull(FieldCircleOfficeName))
}

// CircleOfficeNameEqualFold applies the EqualFold predicate on the "CircleOfficeName" field.
func CircleOfficeNameEqualFold(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldEqualFold(FieldCircleOfficeName, v))
}

// CircleOfficeNameContainsFold applies the ContainsFold predicate on the "CircleOfficeName" field.
func CircleOfficeNameContainsFold(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldContainsFold(FieldCircleOfficeName, v))
}

// IssuedByEQ applies the EQ predicate on the "IssuedBy" field.
func IssuedByEQ(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldEQ(FieldIssuedBy, v))
}

// IssuedByNEQ applies the NEQ predicate on the "IssuedBy" field.
func IssuedByNEQ(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldNEQ(FieldIssuedBy, v))
}

// IssuedByIn applies the In predicate on the "IssuedBy" field.
func IssuedByIn(vs ...string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldIn(FieldIssuedBy, vs...))
}

// IssuedByNotIn applies the NotIn predicate on the "IssuedBy" field.
func IssuedByNotIn(vs ...string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldNotIn(FieldIssuedBy, vs...))
}

// IssuedByGT applies the GT predicate on the "IssuedBy" field.
func IssuedByGT(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldGT(FieldIssuedBy, v))
}

// IssuedByGTE applies the GTE predicate on the "IssuedBy" field.
func IssuedByGTE(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldGTE(FieldIssuedBy, v))
}

// IssuedByLT applies the LT predicate on the "IssuedBy" field.
func IssuedByLT(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldLT(FieldIssuedBy, v))
}

// IssuedByLTE applies the LTE predicate on the "IssuedBy" field.
func IssuedByLTE(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldLTE(FieldIssuedBy, v))
}

// IssuedByContains applies the Contains predicate on the "IssuedBy" field.
func IssuedByContains(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldContains(FieldIssuedBy, v))
}

// IssuedByHasPrefix applies the HasPrefix predicate on the "IssuedBy" field.
func IssuedByHasPrefix(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldHasPrefix(FieldIssuedBy, v))
}

// IssuedByHasSuffix applies the HasSuffix predicate on the "IssuedBy" field.
func IssuedByHasSuffix(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldHasSuffix(FieldIssuedBy, v))
}

// IssuedByIsNil applies the IsNil predicate on the "IssuedBy" field.
func IssuedByIsNil() predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldIsNull(FieldIssuedBy))
}

// IssuedByNotNil applies the NotNil predicate on the "IssuedBy" field.
func IssuedByNotNil() predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldNotNull(FieldIssuedBy))
}

// IssuedByEqualFold applies the EqualFold predicate on the "IssuedBy" field.
func IssuedByEqualFold(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldEqualFold(FieldIssuedBy, v))
}

// IssuedByContainsFold applies the ContainsFold predicate on the "IssuedBy" field.
func IssuedByContainsFold(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldContainsFold(FieldIssuedBy, v))
}

// OrderDateEQ applies the EQ predicate on the "OrderDate" field.
func OrderDateEQ(v time.Time) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldEQ(FieldOrderDate, v))
}

// OrderDateNEQ applies the NEQ predicate on the "OrderDate" field.
func OrderDateNEQ(v time.Time) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldNEQ(FieldOrderDate, v))
}

// OrderDateIn applies the In predicate on the "OrderDate" field.
func OrderDateIn(vs ...time.Time) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldIn(FieldOrderDate, vs...))
}

// OrderDateNotIn applies the NotIn predicate on the "OrderDate" field.
func OrderDateNotIn(vs ...time.Time) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldNotIn(FieldOrderDate, vs...))
}

// OrderDateGT applies the GT predicate on the "OrderDate" field.
func OrderDateGT(v time.Time) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldGT(FieldOrderDate, v))
}

// OrderDateGTE applies the GTE predicate on the "OrderDate" field.
func OrderDateGTE(v time.Time) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldGTE(FieldOrderDate, v))
}

// OrderDateLT applies the LT predicate on the "OrderDate" field.
func OrderDateLT(v time.Time) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldLT(FieldOrderDate, v))
}

// OrderDateLTE applies the LTE predicate on the "OrderDate" field.
func OrderDateLTE(v time.Time) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldLTE(FieldOrderDate, v))
}

// OrderDateIsNil applies the IsNil predicate on the "OrderDate" field.
func OrderDateIsNil() predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldIsNull(FieldOrderDate))
}

// OrderDateNotNil applies the NotNil predicate on the "OrderDate" field.
func OrderDateNotNil() predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldNotNull(FieldOrderDate))
}

// CreatedByEQ applies the EQ predicate on the "CreatedBy" field.
func CreatedByEQ(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldEQ(FieldCreatedBy, v))
}

// CreatedByNEQ applies the NEQ predicate on the "CreatedBy" field.
func CreatedByNEQ(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldNEQ(FieldCreatedBy, v))
}

// CreatedByIn applies the In predicate on the "CreatedBy" field.
func CreatedByIn(vs ...string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldIn(FieldCreatedBy, vs...))
}

// CreatedByNotIn applies the NotIn predicate on the "CreatedBy" field.
func CreatedByNotIn(vs ...string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldNotIn(FieldCreatedBy, vs...))
}

// CreatedByGT applies the GT predicate on the "CreatedBy" field.
func CreatedByGT(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldGT(FieldCreatedBy, v))
}

// CreatedByGTE applies the GTE predicate on the "CreatedBy" field.
func CreatedByGTE(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldGTE(FieldCreatedBy, v))
}

// CreatedByLT applies the LT predicate on the "CreatedBy" field.
func CreatedByLT(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldLT(FieldCreatedBy, v))
}

// CreatedByLTE applies the LTE predicate on the "CreatedBy" field.
func CreatedByLTE(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldLTE(FieldCreatedBy, v))
}

// CreatedByContains applies the Contains predicate on the "CreatedBy" field.
func CreatedByContains(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldContains(FieldCreatedBy, v))
}

// CreatedByHasPrefix applies the HasPrefix predicate on the "CreatedBy" field.
func CreatedByHasPrefix(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldHasPrefix(FieldCreatedBy, v))
}

// CreatedByHasSuffix applies the HasSuffix predicate on the "CreatedBy" field.
func CreatedByHasSuffix(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldHasSuffix(FieldCreatedBy, v))
}

// CreatedByIsNil applies the IsNil predicate on the "CreatedBy" field.
func CreatedByIsNil() predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldIsNull(FieldCreatedBy))
}

// CreatedByNotNil applies the NotNil predicate on the "CreatedBy" field.
func CreatedByNotNil() predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldNotNull(FieldCreatedBy))
}

// CreatedByEqualFold applies the EqualFold predicate on the "CreatedBy" field.
func CreatedByEqualFold(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldEqualFold(FieldCreatedBy, v))
}

// CreatedByContainsFold applies the ContainsFold predicate on the "CreatedBy" field.
func CreatedByContainsFold(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldContainsFold(FieldCreatedBy, v))
}

// CreatedByIdEQ applies the EQ predicate on the "CreatedById" field.
func CreatedByIdEQ(v int64) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldEQ(FieldCreatedById, v))
}

// CreatedByIdNEQ applies the NEQ predicate on the "CreatedById" field.
func CreatedByIdNEQ(v int64) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldNEQ(FieldCreatedById, v))
}

// CreatedByIdIn applies the In predicate on the "CreatedById" field.
func CreatedByIdIn(vs ...int64) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldIn(FieldCreatedById, vs...))
}

// CreatedByIdNotIn applies the NotIn predicate on the "CreatedById" field.
func CreatedByIdNotIn(vs ...int64) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldNotIn(FieldCreatedById, vs...))
}

// CreatedByIdGT applies the GT predicate on the "CreatedById" field.
func CreatedByIdGT(v int64) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldGT(FieldCreatedById, v))
}

// CreatedByIdGTE applies the GTE predicate on the "CreatedById" field.
func CreatedByIdGTE(v int64) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldGTE(FieldCreatedById, v))
}

// CreatedByIdLT applies the LT predicate on the "CreatedById" field.
func CreatedByIdLT(v int64) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldLT(FieldCreatedById, v))
}

// CreatedByIdLTE applies the LTE predicate on the "CreatedById" field.
func CreatedByIdLTE(v int64) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldLTE(FieldCreatedById, v))
}

// CreatedByIdIsNil applies the IsNil predicate on the "CreatedById" field.
func CreatedByIdIsNil() predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldIsNull(FieldCreatedById))
}

// CreatedByIdNotNil applies the NotNil predicate on the "CreatedById" field.
func CreatedByIdNotNil() predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldNotNull(FieldCreatedById))
}

// CreatedByNameEQ applies the EQ predicate on the "CreatedByName" field.
func CreatedByNameEQ(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldEQ(FieldCreatedByName, v))
}

// CreatedByNameNEQ applies the NEQ predicate on the "CreatedByName" field.
func CreatedByNameNEQ(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldNEQ(FieldCreatedByName, v))
}

// CreatedByNameIn applies the In predicate on the "CreatedByName" field.
func CreatedByNameIn(vs ...string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldIn(FieldCreatedByName, vs...))
}

// CreatedByNameNotIn applies the NotIn predicate on the "CreatedByName" field.
func CreatedByNameNotIn(vs ...string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldNotIn(FieldCreatedByName, vs...))
}

// CreatedByNameGT applies the GT predicate on the "CreatedByName" field.
func CreatedByNameGT(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldGT(FieldCreatedByName, v))
}

// CreatedByNameGTE applies the GTE predicate on the "CreatedByName" field.
func CreatedByNameGTE(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldGTE(FieldCreatedByName, v))
}

// CreatedByNameLT applies the LT predicate on the "CreatedByName" field.
func CreatedByNameLT(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldLT(FieldCreatedByName, v))
}

// CreatedByNameLTE applies the LTE predicate on the "CreatedByName" field.
func CreatedByNameLTE(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldLTE(FieldCreatedByName, v))
}

// CreatedByNameContains applies the Contains predicate on the "CreatedByName" field.
func CreatedByNameContains(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldContains(FieldCreatedByName, v))
}

// CreatedByNameHasPrefix applies the HasPrefix predicate on the "CreatedByName" field.
func CreatedByNameHasPrefix(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldHasPrefix(FieldCreatedByName, v))
}

// CreatedByNameHasSuffix applies the HasSuffix predicate on the "CreatedByName" field.
func CreatedByNameHasSuffix(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldHasSuffix(FieldCreatedByName, v))
}

// CreatedByNameIsNil applies the IsNil predicate on the "CreatedByName" field.
func CreatedByNameIsNil() predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldIsNull(FieldCreatedByName))
}

// CreatedByNameNotNil applies the NotNil predicate on the "CreatedByName" field.
func CreatedByNameNotNil() predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldNotNull(FieldCreatedByName))
}

// CreatedByNameEqualFold applies the EqualFold predicate on the "CreatedByName" field.
func CreatedByNameEqualFold(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldEqualFold(FieldCreatedByName, v))
}

// CreatedByNameContainsFold applies the ContainsFold predicate on the "CreatedByName" field.
func CreatedByNameContainsFold(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldContainsFold(FieldCreatedByName, v))
}

// CreatedByDesignationEQ applies the EQ predicate on the "CreatedByDesignation" field.
func CreatedByDesignationEQ(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldEQ(FieldCreatedByDesignation, v))
}

// CreatedByDesignationNEQ applies the NEQ predicate on the "CreatedByDesignation" field.
func CreatedByDesignationNEQ(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldNEQ(FieldCreatedByDesignation, v))
}

// CreatedByDesignationIn applies the In predicate on the "CreatedByDesignation" field.
func CreatedByDesignationIn(vs ...string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldIn(FieldCreatedByDesignation, vs...))
}

// CreatedByDesignationNotIn applies the NotIn predicate on the "CreatedByDesignation" field.
func CreatedByDesignationNotIn(vs ...string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldNotIn(FieldCreatedByDesignation, vs...))
}

// CreatedByDesignationGT applies the GT predicate on the "CreatedByDesignation" field.
func CreatedByDesignationGT(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldGT(FieldCreatedByDesignation, v))
}

// CreatedByDesignationGTE applies the GTE predicate on the "CreatedByDesignation" field.
func CreatedByDesignationGTE(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldGTE(FieldCreatedByDesignation, v))
}

// CreatedByDesignationLT applies the LT predicate on the "CreatedByDesignation" field.
func CreatedByDesignationLT(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldLT(FieldCreatedByDesignation, v))
}

// CreatedByDesignationLTE applies the LTE predicate on the "CreatedByDesignation" field.
func CreatedByDesignationLTE(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldLTE(FieldCreatedByDesignation, v))
}

// CreatedByDesignationContains applies the Contains predicate on the "CreatedByDesignation" field.
func CreatedByDesignationContains(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldContains(FieldCreatedByDesignation, v))
}

// CreatedByDesignationHasPrefix applies the HasPrefix predicate on the "CreatedByDesignation" field.
func CreatedByDesignationHasPrefix(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldHasPrefix(FieldCreatedByDesignation, v))
}

// CreatedByDesignationHasSuffix applies the HasSuffix predicate on the "CreatedByDesignation" field.
func CreatedByDesignationHasSuffix(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldHasSuffix(FieldCreatedByDesignation, v))
}

// CreatedByDesignationIsNil applies the IsNil predicate on the "CreatedByDesignation" field.
func CreatedByDesignationIsNil() predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldIsNull(FieldCreatedByDesignation))
}

// CreatedByDesignationNotNil applies the NotNil predicate on the "CreatedByDesignation" field.
func CreatedByDesignationNotNil() predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldNotNull(FieldCreatedByDesignation))
}

// CreatedByDesignationEqualFold applies the EqualFold predicate on the "CreatedByDesignation" field.
func CreatedByDesignationEqualFold(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldEqualFold(FieldCreatedByDesignation, v))
}

// CreatedByDesignationContainsFold applies the ContainsFold predicate on the "CreatedByDesignation" field.
func CreatedByDesignationContainsFold(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldContainsFold(FieldCreatedByDesignation, v))
}

// ApprovedByEQ applies the EQ predicate on the "ApprovedBy" field.
func ApprovedByEQ(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldEQ(FieldApprovedBy, v))
}

// ApprovedByNEQ applies the NEQ predicate on the "ApprovedBy" field.
func ApprovedByNEQ(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldNEQ(FieldApprovedBy, v))
}

// ApprovedByIn applies the In predicate on the "ApprovedBy" field.
func ApprovedByIn(vs ...string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldIn(FieldApprovedBy, vs...))
}

// ApprovedByNotIn applies the NotIn predicate on the "ApprovedBy" field.
func ApprovedByNotIn(vs ...string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldNotIn(FieldApprovedBy, vs...))
}

// ApprovedByGT applies the GT predicate on the "ApprovedBy" field.
func ApprovedByGT(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldGT(FieldApprovedBy, v))
}

// ApprovedByGTE applies the GTE predicate on the "ApprovedBy" field.
func ApprovedByGTE(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldGTE(FieldApprovedBy, v))
}

// ApprovedByLT applies the LT predicate on the "ApprovedBy" field.
func ApprovedByLT(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldLT(FieldApprovedBy, v))
}

// ApprovedByLTE applies the LTE predicate on the "ApprovedBy" field.
func ApprovedByLTE(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldLTE(FieldApprovedBy, v))
}

// ApprovedByContains applies the Contains predicate on the "ApprovedBy" field.
func ApprovedByContains(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldContains(FieldApprovedBy, v))
}

// ApprovedByHasPrefix applies the HasPrefix predicate on the "ApprovedBy" field.
func ApprovedByHasPrefix(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldHasPrefix(FieldApprovedBy, v))
}

// ApprovedByHasSuffix applies the HasSuffix predicate on the "ApprovedBy" field.
func ApprovedByHasSuffix(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldHasSuffix(FieldApprovedBy, v))
}

// ApprovedByIsNil applies the IsNil predicate on the "ApprovedBy" field.
func ApprovedByIsNil() predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldIsNull(FieldApprovedBy))
}

// ApprovedByNotNil applies the NotNil predicate on the "ApprovedBy" field.
func ApprovedByNotNil() predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldNotNull(FieldApprovedBy))
}

// ApprovedByEqualFold applies the EqualFold predicate on the "ApprovedBy" field.
func ApprovedByEqualFold(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldEqualFold(FieldApprovedBy, v))
}

// ApprovedByContainsFold applies the ContainsFold predicate on the "ApprovedBy" field.
func ApprovedByContainsFold(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldContainsFold(FieldApprovedBy, v))
}

// ApprovedByIdEQ applies the EQ predicate on the "ApprovedById" field.
func ApprovedByIdEQ(v int64) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldEQ(FieldApprovedById, v))
}

// ApprovedByIdNEQ applies the NEQ predicate on the "ApprovedById" field.
func ApprovedByIdNEQ(v int64) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldNEQ(FieldApprovedById, v))
}

// ApprovedByIdIn applies the In predicate on the "ApprovedById" field.
func ApprovedByIdIn(vs ...int64) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldIn(FieldApprovedById, vs...))
}

// ApprovedByIdNotIn applies the NotIn predicate on the "ApprovedById" field.
func ApprovedByIdNotIn(vs ...int64) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldNotIn(FieldApprovedById, vs...))
}

// ApprovedByIdGT applies the GT predicate on the "ApprovedById" field.
func ApprovedByIdGT(v int64) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldGT(FieldApprovedById, v))
}

// ApprovedByIdGTE applies the GTE predicate on the "ApprovedById" field.
func ApprovedByIdGTE(v int64) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldGTE(FieldApprovedById, v))
}

// ApprovedByIdLT applies the LT predicate on the "ApprovedById" field.
func ApprovedByIdLT(v int64) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldLT(FieldApprovedById, v))
}

// ApprovedByIdLTE applies the LTE predicate on the "ApprovedById" field.
func ApprovedByIdLTE(v int64) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldLTE(FieldApprovedById, v))
}

// ApprovedByIdIsNil applies the IsNil predicate on the "ApprovedById" field.
func ApprovedByIdIsNil() predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldIsNull(FieldApprovedById))
}

// ApprovedByIdNotNil applies the NotNil predicate on the "ApprovedById" field.
func ApprovedByIdNotNil() predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldNotNull(FieldApprovedById))
}

// ApprovedByNameEQ applies the EQ predicate on the "ApprovedByName" field.
func ApprovedByNameEQ(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldEQ(FieldApprovedByName, v))
}

// ApprovedByNameNEQ applies the NEQ predicate on the "ApprovedByName" field.
func ApprovedByNameNEQ(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldNEQ(FieldApprovedByName, v))
}

// ApprovedByNameIn applies the In predicate on the "ApprovedByName" field.
func ApprovedByNameIn(vs ...string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldIn(FieldApprovedByName, vs...))
}

// ApprovedByNameNotIn applies the NotIn predicate on the "ApprovedByName" field.
func ApprovedByNameNotIn(vs ...string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldNotIn(FieldApprovedByName, vs...))
}

// ApprovedByNameGT applies the GT predicate on the "ApprovedByName" field.
func ApprovedByNameGT(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldGT(FieldApprovedByName, v))
}

// ApprovedByNameGTE applies the GTE predicate on the "ApprovedByName" field.
func ApprovedByNameGTE(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldGTE(FieldApprovedByName, v))
}

// ApprovedByNameLT applies the LT predicate on the "ApprovedByName" field.
func ApprovedByNameLT(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldLT(FieldApprovedByName, v))
}

// ApprovedByNameLTE applies the LTE predicate on the "ApprovedByName" field.
func ApprovedByNameLTE(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldLTE(FieldApprovedByName, v))
}

// ApprovedByNameContains applies the Contains predicate on the "ApprovedByName" field.
func ApprovedByNameContains(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldContains(FieldApprovedByName, v))
}

// ApprovedByNameHasPrefix applies the HasPrefix predicate on the "ApprovedByName" field.
func ApprovedByNameHasPrefix(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldHasPrefix(FieldApprovedByName, v))
}

// ApprovedByNameHasSuffix applies the HasSuffix predicate on the "ApprovedByName" field.
func ApprovedByNameHasSuffix(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldHasSuffix(FieldApprovedByName, v))
}

// ApprovedByNameIsNil applies the IsNil predicate on the "ApprovedByName" field.
func ApprovedByNameIsNil() predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldIsNull(FieldApprovedByName))
}

// ApprovedByNameNotNil applies the NotNil predicate on the "ApprovedByName" field.
func ApprovedByNameNotNil() predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldNotNull(FieldApprovedByName))
}

// ApprovedByNameEqualFold applies the EqualFold predicate on the "ApprovedByName" field.
func ApprovedByNameEqualFold(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldEqualFold(FieldApprovedByName, v))
}

// ApprovedByNameContainsFold applies the ContainsFold predicate on the "ApprovedByName" field.
func ApprovedByNameContainsFold(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldContainsFold(FieldApprovedByName, v))
}

// ApprovedByDesignationEQ applies the EQ predicate on the "ApprovedByDesignation" field.
func ApprovedByDesignationEQ(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldEQ(FieldApprovedByDesignation, v))
}

// ApprovedByDesignationNEQ applies the NEQ predicate on the "ApprovedByDesignation" field.
func ApprovedByDesignationNEQ(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldNEQ(FieldApprovedByDesignation, v))
}

// ApprovedByDesignationIn applies the In predicate on the "ApprovedByDesignation" field.
func ApprovedByDesignationIn(vs ...string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldIn(FieldApprovedByDesignation, vs...))
}

// ApprovedByDesignationNotIn applies the NotIn predicate on the "ApprovedByDesignation" field.
func ApprovedByDesignationNotIn(vs ...string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldNotIn(FieldApprovedByDesignation, vs...))
}

// ApprovedByDesignationGT applies the GT predicate on the "ApprovedByDesignation" field.
func ApprovedByDesignationGT(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldGT(FieldApprovedByDesignation, v))
}

// ApprovedByDesignationGTE applies the GTE predicate on the "ApprovedByDesignation" field.
func ApprovedByDesignationGTE(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldGTE(FieldApprovedByDesignation, v))
}

// ApprovedByDesignationLT applies the LT predicate on the "ApprovedByDesignation" field.
func ApprovedByDesignationLT(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldLT(FieldApprovedByDesignation, v))
}

// ApprovedByDesignationLTE applies the LTE predicate on the "ApprovedByDesignation" field.
func ApprovedByDesignationLTE(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldLTE(FieldApprovedByDesignation, v))
}

// ApprovedByDesignationContains applies the Contains predicate on the "ApprovedByDesignation" field.
func ApprovedByDesignationContains(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldContains(FieldApprovedByDesignation, v))
}

// ApprovedByDesignationHasPrefix applies the HasPrefix predicate on the "ApprovedByDesignation" field.
func ApprovedByDesignationHasPrefix(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldHasPrefix(FieldApprovedByDesignation, v))
}

// ApprovedByDesignationHasSuffix applies the HasSuffix predicate on the "ApprovedByDesignation" field.
func ApprovedByDesignationHasSuffix(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldHasSuffix(FieldApprovedByDesignation, v))
}

// ApprovedByDesignationIsNil applies the IsNil predicate on the "ApprovedByDesignation" field.
func ApprovedByDesignationIsNil() predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldIsNull(FieldApprovedByDesignation))
}

// ApprovedByDesignationNotNil applies the NotNil predicate on the "ApprovedByDesignation" field.
func ApprovedByDesignationNotNil() predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldNotNull(FieldApprovedByDesignation))
}

// ApprovedByDesignationEqualFold applies the EqualFold predicate on the "ApprovedByDesignation" field.
func ApprovedByDesignationEqualFold(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldEqualFold(FieldApprovedByDesignation, v))
}

// ApprovedByDesignationContainsFold applies the ContainsFold predicate on the "ApprovedByDesignation" field.
func ApprovedByDesignationContainsFold(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldContainsFold(FieldApprovedByDesignation, v))
}

// ResubmittedApplicationVerificationDateEQ applies the EQ predicate on the "ResubmittedApplicationVerificationDate" field.
func ResubmittedApplicationVerificationDateEQ(v time.Time) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldEQ(FieldResubmittedApplicationVerificationDate, v))
}

// ResubmittedApplicationVerificationDateNEQ applies the NEQ predicate on the "ResubmittedApplicationVerificationDate" field.
func ResubmittedApplicationVerificationDateNEQ(v time.Time) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldNEQ(FieldResubmittedApplicationVerificationDate, v))
}

// ResubmittedApplicationVerificationDateIn applies the In predicate on the "ResubmittedApplicationVerificationDate" field.
func ResubmittedApplicationVerificationDateIn(vs ...time.Time) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldIn(FieldResubmittedApplicationVerificationDate, vs...))
}

// ResubmittedApplicationVerificationDateNotIn applies the NotIn predicate on the "ResubmittedApplicationVerificationDate" field.
func ResubmittedApplicationVerificationDateNotIn(vs ...time.Time) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldNotIn(FieldResubmittedApplicationVerificationDate, vs...))
}

// ResubmittedApplicationVerificationDateGT applies the GT predicate on the "ResubmittedApplicationVerificationDate" field.
func ResubmittedApplicationVerificationDateGT(v time.Time) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldGT(FieldResubmittedApplicationVerificationDate, v))
}

// ResubmittedApplicationVerificationDateGTE applies the GTE predicate on the "ResubmittedApplicationVerificationDate" field.
func ResubmittedApplicationVerificationDateGTE(v time.Time) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldGTE(FieldResubmittedApplicationVerificationDate, v))
}

// ResubmittedApplicationVerificationDateLT applies the LT predicate on the "ResubmittedApplicationVerificationDate" field.
func ResubmittedApplicationVerificationDateLT(v time.Time) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldLT(FieldResubmittedApplicationVerificationDate, v))
}

// ResubmittedApplicationVerificationDateLTE applies the LTE predicate on the "ResubmittedApplicationVerificationDate" field.
func ResubmittedApplicationVerificationDateLTE(v time.Time) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldLTE(FieldResubmittedApplicationVerificationDate, v))
}

// ResubmittedApplicationVerificationDateIsNil applies the IsNil predicate on the "ResubmittedApplicationVerificationDate" field.
func ResubmittedApplicationVerificationDateIsNil() predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldIsNull(FieldResubmittedApplicationVerificationDate))
}

// ResubmittedApplicationVerificationDateNotNil applies the NotNil predicate on the "ResubmittedApplicationVerificationDate" field.
func ResubmittedApplicationVerificationDateNotNil() predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldNotNull(FieldResubmittedApplicationVerificationDate))
}

// PapersIsNil applies the IsNil predicate on the "Papers" field.
func PapersIsNil() predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldIsNull(FieldPapers))
}

// PapersNotNil applies the NotNil predicate on the "Papers" field.
func PapersNotNil() predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldNotNull(FieldPapers))
}

// NotificationStatusEQ applies the EQ predicate on the "NotificationStatus" field.
func NotificationStatusEQ(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldEQ(FieldNotificationStatus, v))
}

// NotificationStatusNEQ applies the NEQ predicate on the "NotificationStatus" field.
func NotificationStatusNEQ(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldNEQ(FieldNotificationStatus, v))
}

// NotificationStatusIn applies the In predicate on the "NotificationStatus" field.
func NotificationStatusIn(vs ...string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldIn(FieldNotificationStatus, vs...))
}

// NotificationStatusNotIn applies the NotIn predicate on the "NotificationStatus" field.
func NotificationStatusNotIn(vs ...string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldNotIn(FieldNotificationStatus, vs...))
}

// NotificationStatusGT applies the GT predicate on the "NotificationStatus" field.
func NotificationStatusGT(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldGT(FieldNotificationStatus, v))
}

// NotificationStatusGTE applies the GTE predicate on the "NotificationStatus" field.
func NotificationStatusGTE(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldGTE(FieldNotificationStatus, v))
}

// NotificationStatusLT applies the LT predicate on the "NotificationStatus" field.
func NotificationStatusLT(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldLT(FieldNotificationStatus, v))
}

// NotificationStatusLTE applies the LTE predicate on the "NotificationStatus" field.
func NotificationStatusLTE(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldLTE(FieldNotificationStatus, v))
}

// NotificationStatusContains applies the Contains predicate on the "NotificationStatus" field.
func NotificationStatusContains(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldContains(FieldNotificationStatus, v))
}

// NotificationStatusHasPrefix applies the HasPrefix predicate on the "NotificationStatus" field.
func NotificationStatusHasPrefix(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldHasPrefix(FieldNotificationStatus, v))
}

// NotificationStatusHasSuffix applies the HasSuffix predicate on the "NotificationStatus" field.
func NotificationStatusHasSuffix(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldHasSuffix(FieldNotificationStatus, v))
}

// NotificationStatusIsNil applies the IsNil predicate on the "NotificationStatus" field.
func NotificationStatusIsNil() predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldIsNull(FieldNotificationStatus))
}

// NotificationStatusNotNil applies the NotNil predicate on the "NotificationStatus" field.
func NotificationStatusNotNil() predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldNotNull(FieldNotificationStatus))
}

// NotificationStatusEqualFold applies the EqualFold predicate on the "NotificationStatus" field.
func NotificationStatusEqualFold(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldEqualFold(FieldNotificationStatus, v))
}

// NotificationStatusContainsFold applies the ContainsFold predicate on the "NotificationStatus" field.
func NotificationStatusContainsFold(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldContainsFold(FieldNotificationStatus, v))
}

// StatusEQ applies the EQ predicate on the "Status" field.
func StatusEQ(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "Status" field.
func StatusNEQ(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "Status" field.
func StatusIn(vs ...string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "Status" field.
func StatusNotIn(vs ...string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "Status" field.
func StatusGT(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "Status" field.
func StatusGTE(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "Status" field.
func StatusLT(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "Status" field.
func StatusLTE(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldLTE(FieldStatus, v))
}

// StatusContains applies the Contains predicate on the "Status" field.
func StatusContains(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldContains(FieldStatus, v))
}

// StatusHasPrefix applies the HasPrefix predicate on the "Status" field.
func StatusHasPrefix(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldHasPrefix(FieldStatus, v))
}

// StatusHasSuffix applies the HasSuffix predicate on the "Status" field.
func StatusHasSuffix(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldHasSuffix(FieldStatus, v))
}

// StatusIsNil applies the IsNil predicate on the "Status" field.
func StatusIsNil() predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldIsNull(FieldStatus))
}

// StatusNotNil applies the NotNil predicate on the "Status" field.
func StatusNotNil() predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldNotNull(FieldStatus))
}

// StatusEqualFold applies the EqualFold predicate on the "Status" field.
func StatusEqualFold(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldEqualFold(FieldStatus, v))
}

// StatusContainsFold applies the ContainsFold predicate on the "Status" field.
func StatusContainsFold(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldContainsFold(FieldStatus, v))
}

// NotificationReIssueStatusEQ applies the EQ predicate on the "NotificationReIssueStatus" field.
func NotificationReIssueStatusEQ(v bool) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldEQ(FieldNotificationReIssueStatus, v))
}

// NotificationReIssueStatusNEQ applies the NEQ predicate on the "NotificationReIssueStatus" field.
func NotificationReIssueStatusNEQ(v bool) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldNEQ(FieldNotificationReIssueStatus, v))
}

// NotificationReIssueStatusIsNil applies the IsNil predicate on the "NotificationReIssueStatus" field.
func NotificationReIssueStatusIsNil() predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldIsNull(FieldNotificationReIssueStatus))
}

// NotificationReIssueStatusNotNil applies the NotNil predicate on the "NotificationReIssueStatus" field.
func NotificationReIssueStatusNotNil() predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldNotNull(FieldNotificationReIssueStatus))
}

// EditFlagStatusEQ applies the EQ predicate on the "EditFlagStatus" field.
func EditFlagStatusEQ(v bool) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldEQ(FieldEditFlagStatus, v))
}

// EditFlagStatusNEQ applies the NEQ predicate on the "EditFlagStatus" field.
func EditFlagStatusNEQ(v bool) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldNEQ(FieldEditFlagStatus, v))
}

// EditFlagStatusIsNil applies the IsNil predicate on the "EditFlagStatus" field.
func EditFlagStatusIsNil() predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldIsNull(FieldEditFlagStatus))
}

// EditFlagStatusNotNil applies the NotNil predicate on the "EditFlagStatus" field.
func EditFlagStatusNotNil() predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldNotNull(FieldEditFlagStatus))
}

// ExamCodeEQ applies the EQ predicate on the "ExamCode" field.
func ExamCodeEQ(v int32) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldEQ(FieldExamCode, v))
}

// ExamCodeNEQ applies the NEQ predicate on the "ExamCode" field.
func ExamCodeNEQ(v int32) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldNEQ(FieldExamCode, v))
}

// ExamCodeIn applies the In predicate on the "ExamCode" field.
func ExamCodeIn(vs ...int32) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldIn(FieldExamCode, vs...))
}

// ExamCodeNotIn applies the NotIn predicate on the "ExamCode" field.
func ExamCodeNotIn(vs ...int32) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldNotIn(FieldExamCode, vs...))
}

// ExamCodeGT applies the GT predicate on the "ExamCode" field.
func ExamCodeGT(v int32) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldGT(FieldExamCode, v))
}

// ExamCodeGTE applies the GTE predicate on the "ExamCode" field.
func ExamCodeGTE(v int32) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldGTE(FieldExamCode, v))
}

// ExamCodeLT applies the LT predicate on the "ExamCode" field.
func ExamCodeLT(v int32) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldLT(FieldExamCode, v))
}

// ExamCodeLTE applies the LTE predicate on the "ExamCode" field.
func ExamCodeLTE(v int32) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldLTE(FieldExamCode, v))
}

// ExamCodeIsNil applies the IsNil predicate on the "ExamCode" field.
func ExamCodeIsNil() predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldIsNull(FieldExamCode))
}

// ExamCodeNotNil applies the NotNil predicate on the "ExamCode" field.
func ExamCodeNotNil() predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldNotNull(FieldExamCode))
}

// ExamNameEQ applies the EQ predicate on the "ExamName" field.
func ExamNameEQ(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldEQ(FieldExamName, v))
}

// ExamNameNEQ applies the NEQ predicate on the "ExamName" field.
func ExamNameNEQ(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldNEQ(FieldExamName, v))
}

// ExamNameIn applies the In predicate on the "ExamName" field.
func ExamNameIn(vs ...string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldIn(FieldExamName, vs...))
}

// ExamNameNotIn applies the NotIn predicate on the "ExamName" field.
func ExamNameNotIn(vs ...string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldNotIn(FieldExamName, vs...))
}

// ExamNameGT applies the GT predicate on the "ExamName" field.
func ExamNameGT(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldGT(FieldExamName, v))
}

// ExamNameGTE applies the GTE predicate on the "ExamName" field.
func ExamNameGTE(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldGTE(FieldExamName, v))
}

// ExamNameLT applies the LT predicate on the "ExamName" field.
func ExamNameLT(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldLT(FieldExamName, v))
}

// ExamNameLTE applies the LTE predicate on the "ExamName" field.
func ExamNameLTE(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldLTE(FieldExamName, v))
}

// ExamNameContains applies the Contains predicate on the "ExamName" field.
func ExamNameContains(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldContains(FieldExamName, v))
}

// ExamNameHasPrefix applies the HasPrefix predicate on the "ExamName" field.
func ExamNameHasPrefix(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldHasPrefix(FieldExamName, v))
}

// ExamNameHasSuffix applies the HasSuffix predicate on the "ExamName" field.
func ExamNameHasSuffix(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldHasSuffix(FieldExamName, v))
}

// ExamNameIsNil applies the IsNil predicate on the "ExamName" field.
func ExamNameIsNil() predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldIsNull(FieldExamName))
}

// ExamNameNotNil applies the NotNil predicate on the "ExamName" field.
func ExamNameNotNil() predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldNotNull(FieldExamName))
}

// ExamNameEqualFold applies the EqualFold predicate on the "ExamName" field.
func ExamNameEqualFold(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldEqualFold(FieldExamName, v))
}

// ExamNameContainsFold applies the ContainsFold predicate on the "ExamName" field.
func ExamNameContainsFold(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldContainsFold(FieldExamName, v))
}

// UserIDEQ applies the EQ predicate on the "UserID" field.
func UserIDEQ(v int64) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "UserID" field.
func UserIDNEQ(v int64) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "UserID" field.
func UserIDIn(vs ...int64) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "UserID" field.
func UserIDNotIn(vs ...int64) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldNotIn(FieldUserID, vs...))
}

// UserIDIsNil applies the IsNil predicate on the "UserID" field.
func UserIDIsNil() predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldIsNull(FieldUserID))
}

// UserIDNotNil applies the NotNil predicate on the "UserID" field.
func UserIDNotNil() predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldNotNull(FieldUserID))
}

// NotificationRemarksEQ applies the EQ predicate on the "NotificationRemarks" field.
func NotificationRemarksEQ(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldEQ(FieldNotificationRemarks, v))
}

// NotificationRemarksNEQ applies the NEQ predicate on the "NotificationRemarks" field.
func NotificationRemarksNEQ(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldNEQ(FieldNotificationRemarks, v))
}

// NotificationRemarksIn applies the In predicate on the "NotificationRemarks" field.
func NotificationRemarksIn(vs ...string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldIn(FieldNotificationRemarks, vs...))
}

// NotificationRemarksNotIn applies the NotIn predicate on the "NotificationRemarks" field.
func NotificationRemarksNotIn(vs ...string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldNotIn(FieldNotificationRemarks, vs...))
}

// NotificationRemarksGT applies the GT predicate on the "NotificationRemarks" field.
func NotificationRemarksGT(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldGT(FieldNotificationRemarks, v))
}

// NotificationRemarksGTE applies the GTE predicate on the "NotificationRemarks" field.
func NotificationRemarksGTE(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldGTE(FieldNotificationRemarks, v))
}

// NotificationRemarksLT applies the LT predicate on the "NotificationRemarks" field.
func NotificationRemarksLT(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldLT(FieldNotificationRemarks, v))
}

// NotificationRemarksLTE applies the LTE predicate on the "NotificationRemarks" field.
func NotificationRemarksLTE(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldLTE(FieldNotificationRemarks, v))
}

// NotificationRemarksContains applies the Contains predicate on the "NotificationRemarks" field.
func NotificationRemarksContains(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldContains(FieldNotificationRemarks, v))
}

// NotificationRemarksHasPrefix applies the HasPrefix predicate on the "NotificationRemarks" field.
func NotificationRemarksHasPrefix(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldHasPrefix(FieldNotificationRemarks, v))
}

// NotificationRemarksHasSuffix applies the HasSuffix predicate on the "NotificationRemarks" field.
func NotificationRemarksHasSuffix(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldHasSuffix(FieldNotificationRemarks, v))
}

// NotificationRemarksIsNil applies the IsNil predicate on the "NotificationRemarks" field.
func NotificationRemarksIsNil() predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldIsNull(FieldNotificationRemarks))
}

// NotificationRemarksNotNil applies the NotNil predicate on the "NotificationRemarks" field.
func NotificationRemarksNotNil() predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldNotNull(FieldNotificationRemarks))
}

// NotificationRemarksEqualFold applies the EqualFold predicate on the "NotificationRemarks" field.
func NotificationRemarksEqualFold(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldEqualFold(FieldNotificationRemarks, v))
}

// NotificationRemarksContainsFold applies the ContainsFold predicate on the "NotificationRemarks" field.
func NotificationRemarksContainsFold(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldContainsFold(FieldNotificationRemarks, v))
}

// SmsExamShortNameEQ applies the EQ predicate on the "SmsExamShortName" field.
func SmsExamShortNameEQ(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldEQ(FieldSmsExamShortName, v))
}

// SmsExamShortNameNEQ applies the NEQ predicate on the "SmsExamShortName" field.
func SmsExamShortNameNEQ(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldNEQ(FieldSmsExamShortName, v))
}

// SmsExamShortNameIn applies the In predicate on the "SmsExamShortName" field.
func SmsExamShortNameIn(vs ...string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldIn(FieldSmsExamShortName, vs...))
}

// SmsExamShortNameNotIn applies the NotIn predicate on the "SmsExamShortName" field.
func SmsExamShortNameNotIn(vs ...string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldNotIn(FieldSmsExamShortName, vs...))
}

// SmsExamShortNameGT applies the GT predicate on the "SmsExamShortName" field.
func SmsExamShortNameGT(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldGT(FieldSmsExamShortName, v))
}

// SmsExamShortNameGTE applies the GTE predicate on the "SmsExamShortName" field.
func SmsExamShortNameGTE(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldGTE(FieldSmsExamShortName, v))
}

// SmsExamShortNameLT applies the LT predicate on the "SmsExamShortName" field.
func SmsExamShortNameLT(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldLT(FieldSmsExamShortName, v))
}

// SmsExamShortNameLTE applies the LTE predicate on the "SmsExamShortName" field.
func SmsExamShortNameLTE(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldLTE(FieldSmsExamShortName, v))
}

// SmsExamShortNameContains applies the Contains predicate on the "SmsExamShortName" field.
func SmsExamShortNameContains(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldContains(FieldSmsExamShortName, v))
}

// SmsExamShortNameHasPrefix applies the HasPrefix predicate on the "SmsExamShortName" field.
func SmsExamShortNameHasPrefix(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldHasPrefix(FieldSmsExamShortName, v))
}

// SmsExamShortNameHasSuffix applies the HasSuffix predicate on the "SmsExamShortName" field.
func SmsExamShortNameHasSuffix(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldHasSuffix(FieldSmsExamShortName, v))
}

// SmsExamShortNameIsNil applies the IsNil predicate on the "SmsExamShortName" field.
func SmsExamShortNameIsNil() predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldIsNull(FieldSmsExamShortName))
}

// SmsExamShortNameNotNil applies the NotNil predicate on the "SmsExamShortName" field.
func SmsExamShortNameNotNil() predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldNotNull(FieldSmsExamShortName))
}

// SmsExamShortNameEqualFold applies the EqualFold predicate on the "SmsExamShortName" field.
func SmsExamShortNameEqualFold(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldEqualFold(FieldSmsExamShortName, v))
}

// SmsExamShortNameContainsFold applies the ContainsFold predicate on the "SmsExamShortName" field.
func SmsExamShortNameContainsFold(v string) predicate.ExamNotifications {
	return predicate.ExamNotifications(sql.FieldContainsFold(FieldSmsExamShortName, v))
}

// HasUserIDref applies the HasEdge predicate on the "UserIDref" edge.
func HasUserIDref() predicate.ExamNotifications {
	return predicate.ExamNotifications(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserIDrefTable, UserIDrefColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserIDrefWith applies the HasEdge predicate on the "UserIDref" edge with a given conditions (other predicates).
func HasUserIDrefWith(preds ...predicate.UserMaster) predicate.ExamNotifications {
	return predicate.ExamNotifications(func(s *sql.Selector) {
		step := newUserIDrefStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasLogData applies the HasEdge predicate on the "LogData" edge.
func HasLogData() predicate.ExamNotifications {
	return predicate.ExamNotifications(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, LogDataTable, LogDataColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasLogDataWith applies the HasEdge predicate on the "LogData" edge with a given conditions (other predicates).
func HasLogDataWith(preds ...predicate.Logs) predicate.ExamNotifications {
	return predicate.ExamNotifications(func(s *sql.Selector) {
		step := newLogDataStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ExamNotifications) predicate.ExamNotifications {
	return predicate.ExamNotifications(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ExamNotifications) predicate.ExamNotifications {
	return predicate.ExamNotifications(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ExamNotifications) predicate.ExamNotifications {
	return predicate.ExamNotifications(func(s *sql.Selector) {
		p(s.Not())
	})
}
