// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"
	"recruit/ent/cadre_choice_mtspmmg"
	"recruit/ent/center"
	"recruit/ent/circlesummaryforno"
	"recruit/ent/division_choice_mtspmmg"
	"recruit/ent/exam"
	"recruit/ent/exam_application_mtspmmg"
	"recruit/ent/examcitycenter"
	"recruit/ent/logs"
	"recruit/ent/predicate"
	"recruit/ent/recommendationsmtspmmgapplications"
	"recruit/ent/rolemaster"
	"recruit/ent/usermaster"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ExamApplicationMTSPMMGQuery is the builder for querying Exam_Application_MTSPMMG entities.
type ExamApplicationMTSPMMGQuery struct {
	config
	ctx                        *QueryContext
	order                      []exam_application_mtspmmg.OrderOption
	inters                     []Interceptor
	predicates                 []predicate.Exam_Application_MTSPMMG
	withUsersMTSPMMGRef        *UserMasterQuery
	withRoleusers              *RoleMasterQuery
	withCadrePrefRef           *CadreChoiceMTSPMMGQuery
	withCirclePrefRefMTSPMMG   *DivisionChoiceMTSPMMGQuery
	withMTSPMMGApplicationsRef *RecommendationsMTSPMMGApplicationsQuery
	withMTSPMMGExamCentres     *CenterQuery
	withExamcitycenter         *ExamCityCenterQuery
	withExams                  *ExamQuery
	withCircleRefsMTSPMMG      *CircleSummaryForNOQuery
	withLogData                *LogsQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the ExamApplicationMTSPMMGQuery builder.
func (eamq *ExamApplicationMTSPMMGQuery) Where(ps ...predicate.Exam_Application_MTSPMMG) *ExamApplicationMTSPMMGQuery {
	eamq.predicates = append(eamq.predicates, ps...)
	return eamq
}

// Limit the number of records to be returned by this query.
func (eamq *ExamApplicationMTSPMMGQuery) Limit(limit int) *ExamApplicationMTSPMMGQuery {
	eamq.ctx.Limit = &limit
	return eamq
}

// Offset to start from.
func (eamq *ExamApplicationMTSPMMGQuery) Offset(offset int) *ExamApplicationMTSPMMGQuery {
	eamq.ctx.Offset = &offset
	return eamq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (eamq *ExamApplicationMTSPMMGQuery) Unique(unique bool) *ExamApplicationMTSPMMGQuery {
	eamq.ctx.Unique = &unique
	return eamq
}

// Order specifies how the records should be ordered.
func (eamq *ExamApplicationMTSPMMGQuery) Order(o ...exam_application_mtspmmg.OrderOption) *ExamApplicationMTSPMMGQuery {
	eamq.order = append(eamq.order, o...)
	return eamq
}

// QueryUsersMTSPMMGRef chains the current query on the "UsersMTSPMMGRef" edge.
func (eamq *ExamApplicationMTSPMMGQuery) QueryUsersMTSPMMGRef() *UserMasterQuery {
	query := (&UserMasterClient{config: eamq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eamq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eamq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(exam_application_mtspmmg.Table, exam_application_mtspmmg.FieldID, selector),
			sqlgraph.To(usermaster.Table, usermaster.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, exam_application_mtspmmg.UsersMTSPMMGRefTable, exam_application_mtspmmg.UsersMTSPMMGRefColumn),
		)
		fromU = sqlgraph.SetNeighbors(eamq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryRoleusers chains the current query on the "roleusers" edge.
func (eamq *ExamApplicationMTSPMMGQuery) QueryRoleusers() *RoleMasterQuery {
	query := (&RoleMasterClient{config: eamq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eamq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eamq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(exam_application_mtspmmg.Table, exam_application_mtspmmg.FieldID, selector),
			sqlgraph.To(rolemaster.Table, rolemaster.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, exam_application_mtspmmg.RoleusersTable, exam_application_mtspmmg.RoleusersColumn),
		)
		fromU = sqlgraph.SetNeighbors(eamq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCadrePrefRef chains the current query on the "CadrePref_Ref" edge.
func (eamq *ExamApplicationMTSPMMGQuery) QueryCadrePrefRef() *CadreChoiceMTSPMMGQuery {
	query := (&CadreChoiceMTSPMMGClient{config: eamq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eamq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eamq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(exam_application_mtspmmg.Table, exam_application_mtspmmg.FieldID, selector),
			sqlgraph.To(cadre_choice_mtspmmg.Table, cadre_choice_mtspmmg.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, exam_application_mtspmmg.CadrePrefRefTable, exam_application_mtspmmg.CadrePrefRefColumn),
		)
		fromU = sqlgraph.SetNeighbors(eamq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCirclePrefRefMTSPMMG chains the current query on the "CirclePrefRefMTSPMMG" edge.
func (eamq *ExamApplicationMTSPMMGQuery) QueryCirclePrefRefMTSPMMG() *DivisionChoiceMTSPMMGQuery {
	query := (&DivisionChoiceMTSPMMGClient{config: eamq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eamq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eamq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(exam_application_mtspmmg.Table, exam_application_mtspmmg.FieldID, selector),
			sqlgraph.To(division_choice_mtspmmg.Table, division_choice_mtspmmg.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, exam_application_mtspmmg.CirclePrefRefMTSPMMGTable, exam_application_mtspmmg.CirclePrefRefMTSPMMGColumn),
		)
		fromU = sqlgraph.SetNeighbors(eamq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryMTSPMMGApplicationsRef chains the current query on the "MTSPMMGApplicationsRef" edge.
func (eamq *ExamApplicationMTSPMMGQuery) QueryMTSPMMGApplicationsRef() *RecommendationsMTSPMMGApplicationsQuery {
	query := (&RecommendationsMTSPMMGApplicationsClient{config: eamq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eamq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eamq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(exam_application_mtspmmg.Table, exam_application_mtspmmg.FieldID, selector),
			sqlgraph.To(recommendationsmtspmmgapplications.Table, recommendationsmtspmmgapplications.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, exam_application_mtspmmg.MTSPMMGApplicationsRefTable, exam_application_mtspmmg.MTSPMMGApplicationsRefColumn),
		)
		fromU = sqlgraph.SetNeighbors(eamq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryMTSPMMGExamCentres chains the current query on the "MTSPMMGExamCentres" edge.
func (eamq *ExamApplicationMTSPMMGQuery) QueryMTSPMMGExamCentres() *CenterQuery {
	query := (&CenterClient{config: eamq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eamq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eamq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(exam_application_mtspmmg.Table, exam_application_mtspmmg.FieldID, selector),
			sqlgraph.To(center.Table, center.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, exam_application_mtspmmg.MTSPMMGExamCentresTable, exam_application_mtspmmg.MTSPMMGExamCentresColumn),
		)
		fromU = sqlgraph.SetNeighbors(eamq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryExamcitycenter chains the current query on the "examcitycenter" edge.
func (eamq *ExamApplicationMTSPMMGQuery) QueryExamcitycenter() *ExamCityCenterQuery {
	query := (&ExamCityCenterClient{config: eamq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eamq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eamq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(exam_application_mtspmmg.Table, exam_application_mtspmmg.FieldID, selector),
			sqlgraph.To(examcitycenter.Table, examcitycenter.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, exam_application_mtspmmg.ExamcitycenterTable, exam_application_mtspmmg.ExamcitycenterColumn),
		)
		fromU = sqlgraph.SetNeighbors(eamq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryExams chains the current query on the "Exams" edge.
func (eamq *ExamApplicationMTSPMMGQuery) QueryExams() *ExamQuery {
	query := (&ExamClient{config: eamq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eamq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eamq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(exam_application_mtspmmg.Table, exam_application_mtspmmg.FieldID, selector),
			sqlgraph.To(exam.Table, exam.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, exam_application_mtspmmg.ExamsTable, exam_application_mtspmmg.ExamsColumn),
		)
		fromU = sqlgraph.SetNeighbors(eamq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCircleRefsMTSPMMG chains the current query on the "CircleRefsMTSPMMG" edge.
func (eamq *ExamApplicationMTSPMMGQuery) QueryCircleRefsMTSPMMG() *CircleSummaryForNOQuery {
	query := (&CircleSummaryForNOClient{config: eamq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eamq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eamq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(exam_application_mtspmmg.Table, exam_application_mtspmmg.FieldID, selector),
			sqlgraph.To(circlesummaryforno.Table, circlesummaryforno.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, exam_application_mtspmmg.CircleRefsMTSPMMGTable, exam_application_mtspmmg.CircleRefsMTSPMMGColumn),
		)
		fromU = sqlgraph.SetNeighbors(eamq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryLogData chains the current query on the "LogData" edge.
func (eamq *ExamApplicationMTSPMMGQuery) QueryLogData() *LogsQuery {
	query := (&LogsClient{config: eamq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eamq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eamq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(exam_application_mtspmmg.Table, exam_application_mtspmmg.FieldID, selector),
			sqlgraph.To(logs.Table, logs.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, exam_application_mtspmmg.LogDataTable, exam_application_mtspmmg.LogDataColumn),
		)
		fromU = sqlgraph.SetNeighbors(eamq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first Exam_Application_MTSPMMG entity from the query.
// Returns a *NotFoundError when no Exam_Application_MTSPMMG was found.
func (eamq *ExamApplicationMTSPMMGQuery) First(ctx context.Context) (*Exam_Application_MTSPMMG, error) {
	nodes, err := eamq.Limit(1).All(setContextOp(ctx, eamq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{exam_application_mtspmmg.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (eamq *ExamApplicationMTSPMMGQuery) FirstX(ctx context.Context) *Exam_Application_MTSPMMG {
	node, err := eamq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first Exam_Application_MTSPMMG ID from the query.
// Returns a *NotFoundError when no Exam_Application_MTSPMMG ID was found.
func (eamq *ExamApplicationMTSPMMGQuery) FirstID(ctx context.Context) (id int64, err error) {
	var ids []int64
	if ids, err = eamq.Limit(1).IDs(setContextOp(ctx, eamq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{exam_application_mtspmmg.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (eamq *ExamApplicationMTSPMMGQuery) FirstIDX(ctx context.Context) int64 {
	id, err := eamq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single Exam_Application_MTSPMMG entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one Exam_Application_MTSPMMG entity is found.
// Returns a *NotFoundError when no Exam_Application_MTSPMMG entities are found.
func (eamq *ExamApplicationMTSPMMGQuery) Only(ctx context.Context) (*Exam_Application_MTSPMMG, error) {
	nodes, err := eamq.Limit(2).All(setContextOp(ctx, eamq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{exam_application_mtspmmg.Label}
	default:
		return nil, &NotSingularError{exam_application_mtspmmg.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (eamq *ExamApplicationMTSPMMGQuery) OnlyX(ctx context.Context) *Exam_Application_MTSPMMG {
	node, err := eamq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only Exam_Application_MTSPMMG ID in the query.
// Returns a *NotSingularError when more than one Exam_Application_MTSPMMG ID is found.
// Returns a *NotFoundError when no entities are found.
func (eamq *ExamApplicationMTSPMMGQuery) OnlyID(ctx context.Context) (id int64, err error) {
	var ids []int64
	if ids, err = eamq.Limit(2).IDs(setContextOp(ctx, eamq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{exam_application_mtspmmg.Label}
	default:
		err = &NotSingularError{exam_application_mtspmmg.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (eamq *ExamApplicationMTSPMMGQuery) OnlyIDX(ctx context.Context) int64 {
	id, err := eamq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Exam_Application_MTSPMMGs.
func (eamq *ExamApplicationMTSPMMGQuery) All(ctx context.Context) ([]*Exam_Application_MTSPMMG, error) {
	ctx = setContextOp(ctx, eamq.ctx, "All")
	if err := eamq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*Exam_Application_MTSPMMG, *ExamApplicationMTSPMMGQuery]()
	return withInterceptors[[]*Exam_Application_MTSPMMG](ctx, eamq, qr, eamq.inters)
}

// AllX is like All, but panics if an error occurs.
func (eamq *ExamApplicationMTSPMMGQuery) AllX(ctx context.Context) []*Exam_Application_MTSPMMG {
	nodes, err := eamq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of Exam_Application_MTSPMMG IDs.
func (eamq *ExamApplicationMTSPMMGQuery) IDs(ctx context.Context) (ids []int64, err error) {
	if eamq.ctx.Unique == nil && eamq.path != nil {
		eamq.Unique(true)
	}
	ctx = setContextOp(ctx, eamq.ctx, "IDs")
	if err = eamq.Select(exam_application_mtspmmg.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (eamq *ExamApplicationMTSPMMGQuery) IDsX(ctx context.Context) []int64 {
	ids, err := eamq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (eamq *ExamApplicationMTSPMMGQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, eamq.ctx, "Count")
	if err := eamq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, eamq, querierCount[*ExamApplicationMTSPMMGQuery](), eamq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (eamq *ExamApplicationMTSPMMGQuery) CountX(ctx context.Context) int {
	count, err := eamq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (eamq *ExamApplicationMTSPMMGQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, eamq.ctx, "Exist")
	switch _, err := eamq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (eamq *ExamApplicationMTSPMMGQuery) ExistX(ctx context.Context) bool {
	exist, err := eamq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the ExamApplicationMTSPMMGQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (eamq *ExamApplicationMTSPMMGQuery) Clone() *ExamApplicationMTSPMMGQuery {
	if eamq == nil {
		return nil
	}
	return &ExamApplicationMTSPMMGQuery{
		config:                     eamq.config,
		ctx:                        eamq.ctx.Clone(),
		order:                      append([]exam_application_mtspmmg.OrderOption{}, eamq.order...),
		inters:                     append([]Interceptor{}, eamq.inters...),
		predicates:                 append([]predicate.Exam_Application_MTSPMMG{}, eamq.predicates...),
		withUsersMTSPMMGRef:        eamq.withUsersMTSPMMGRef.Clone(),
		withRoleusers:              eamq.withRoleusers.Clone(),
		withCadrePrefRef:           eamq.withCadrePrefRef.Clone(),
		withCirclePrefRefMTSPMMG:   eamq.withCirclePrefRefMTSPMMG.Clone(),
		withMTSPMMGApplicationsRef: eamq.withMTSPMMGApplicationsRef.Clone(),
		withMTSPMMGExamCentres:     eamq.withMTSPMMGExamCentres.Clone(),
		withExamcitycenter:         eamq.withExamcitycenter.Clone(),
		withExams:                  eamq.withExams.Clone(),
		withCircleRefsMTSPMMG:      eamq.withCircleRefsMTSPMMG.Clone(),
		withLogData:                eamq.withLogData.Clone(),
		// clone intermediate query.
		sql:  eamq.sql.Clone(),
		path: eamq.path,
	}
}

// WithUsersMTSPMMGRef tells the query-builder to eager-load the nodes that are connected to
// the "UsersMTSPMMGRef" edge. The optional arguments are used to configure the query builder of the edge.
func (eamq *ExamApplicationMTSPMMGQuery) WithUsersMTSPMMGRef(opts ...func(*UserMasterQuery)) *ExamApplicationMTSPMMGQuery {
	query := (&UserMasterClient{config: eamq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	eamq.withUsersMTSPMMGRef = query
	return eamq
}

// WithRoleusers tells the query-builder to eager-load the nodes that are connected to
// the "roleusers" edge. The optional arguments are used to configure the query builder of the edge.
func (eamq *ExamApplicationMTSPMMGQuery) WithRoleusers(opts ...func(*RoleMasterQuery)) *ExamApplicationMTSPMMGQuery {
	query := (&RoleMasterClient{config: eamq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	eamq.withRoleusers = query
	return eamq
}

// WithCadrePrefRef tells the query-builder to eager-load the nodes that are connected to
// the "CadrePref_Ref" edge. The optional arguments are used to configure the query builder of the edge.
func (eamq *ExamApplicationMTSPMMGQuery) WithCadrePrefRef(opts ...func(*CadreChoiceMTSPMMGQuery)) *ExamApplicationMTSPMMGQuery {
	query := (&CadreChoiceMTSPMMGClient{config: eamq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	eamq.withCadrePrefRef = query
	return eamq
}

// WithCirclePrefRefMTSPMMG tells the query-builder to eager-load the nodes that are connected to
// the "CirclePrefRefMTSPMMG" edge. The optional arguments are used to configure the query builder of the edge.
func (eamq *ExamApplicationMTSPMMGQuery) WithCirclePrefRefMTSPMMG(opts ...func(*DivisionChoiceMTSPMMGQuery)) *ExamApplicationMTSPMMGQuery {
	query := (&DivisionChoiceMTSPMMGClient{config: eamq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	eamq.withCirclePrefRefMTSPMMG = query
	return eamq
}

// WithMTSPMMGApplicationsRef tells the query-builder to eager-load the nodes that are connected to
// the "MTSPMMGApplicationsRef" edge. The optional arguments are used to configure the query builder of the edge.
func (eamq *ExamApplicationMTSPMMGQuery) WithMTSPMMGApplicationsRef(opts ...func(*RecommendationsMTSPMMGApplicationsQuery)) *ExamApplicationMTSPMMGQuery {
	query := (&RecommendationsMTSPMMGApplicationsClient{config: eamq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	eamq.withMTSPMMGApplicationsRef = query
	return eamq
}

// WithMTSPMMGExamCentres tells the query-builder to eager-load the nodes that are connected to
// the "MTSPMMGExamCentres" edge. The optional arguments are used to configure the query builder of the edge.
func (eamq *ExamApplicationMTSPMMGQuery) WithMTSPMMGExamCentres(opts ...func(*CenterQuery)) *ExamApplicationMTSPMMGQuery {
	query := (&CenterClient{config: eamq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	eamq.withMTSPMMGExamCentres = query
	return eamq
}

// WithExamcitycenter tells the query-builder to eager-load the nodes that are connected to
// the "examcitycenter" edge. The optional arguments are used to configure the query builder of the edge.
func (eamq *ExamApplicationMTSPMMGQuery) WithExamcitycenter(opts ...func(*ExamCityCenterQuery)) *ExamApplicationMTSPMMGQuery {
	query := (&ExamCityCenterClient{config: eamq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	eamq.withExamcitycenter = query
	return eamq
}

// WithExams tells the query-builder to eager-load the nodes that are connected to
// the "Exams" edge. The optional arguments are used to configure the query builder of the edge.
func (eamq *ExamApplicationMTSPMMGQuery) WithExams(opts ...func(*ExamQuery)) *ExamApplicationMTSPMMGQuery {
	query := (&ExamClient{config: eamq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	eamq.withExams = query
	return eamq
}

// WithCircleRefsMTSPMMG tells the query-builder to eager-load the nodes that are connected to
// the "CircleRefsMTSPMMG" edge. The optional arguments are used to configure the query builder of the edge.
func (eamq *ExamApplicationMTSPMMGQuery) WithCircleRefsMTSPMMG(opts ...func(*CircleSummaryForNOQuery)) *ExamApplicationMTSPMMGQuery {
	query := (&CircleSummaryForNOClient{config: eamq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	eamq.withCircleRefsMTSPMMG = query
	return eamq
}

// WithLogData tells the query-builder to eager-load the nodes that are connected to
// the "LogData" edge. The optional arguments are used to configure the query builder of the edge.
func (eamq *ExamApplicationMTSPMMGQuery) WithLogData(opts ...func(*LogsQuery)) *ExamApplicationMTSPMMGQuery {
	query := (&LogsClient{config: eamq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	eamq.withLogData = query
	return eamq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		ApplicationNumber string `json:"ApplicationNumber,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.ExamApplicationMTSPMMG.Query().
//		GroupBy(exam_application_mtspmmg.FieldApplicationNumber).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (eamq *ExamApplicationMTSPMMGQuery) GroupBy(field string, fields ...string) *ExamApplicationMTSPMMGGroupBy {
	eamq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &ExamApplicationMTSPMMGGroupBy{build: eamq}
	grbuild.flds = &eamq.ctx.Fields
	grbuild.label = exam_application_mtspmmg.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		ApplicationNumber string `json:"ApplicationNumber,omitempty"`
//	}
//
//	client.ExamApplicationMTSPMMG.Query().
//		Select(exam_application_mtspmmg.FieldApplicationNumber).
//		Scan(ctx, &v)
func (eamq *ExamApplicationMTSPMMGQuery) Select(fields ...string) *ExamApplicationMTSPMMGSelect {
	eamq.ctx.Fields = append(eamq.ctx.Fields, fields...)
	sbuild := &ExamApplicationMTSPMMGSelect{ExamApplicationMTSPMMGQuery: eamq}
	sbuild.label = exam_application_mtspmmg.Label
	sbuild.flds, sbuild.scan = &eamq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a ExamApplicationMTSPMMGSelect configured with the given aggregations.
func (eamq *ExamApplicationMTSPMMGQuery) Aggregate(fns ...AggregateFunc) *ExamApplicationMTSPMMGSelect {
	return eamq.Select().Aggregate(fns...)
}

func (eamq *ExamApplicationMTSPMMGQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range eamq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, eamq); err != nil {
				return err
			}
		}
	}
	for _, f := range eamq.ctx.Fields {
		if !exam_application_mtspmmg.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if eamq.path != nil {
		prev, err := eamq.path(ctx)
		if err != nil {
			return err
		}
		eamq.sql = prev
	}
	return nil
}

func (eamq *ExamApplicationMTSPMMGQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*Exam_Application_MTSPMMG, error) {
	var (
		nodes       = []*Exam_Application_MTSPMMG{}
		_spec       = eamq.querySpec()
		loadedTypes = [10]bool{
			eamq.withUsersMTSPMMGRef != nil,
			eamq.withRoleusers != nil,
			eamq.withCadrePrefRef != nil,
			eamq.withCirclePrefRefMTSPMMG != nil,
			eamq.withMTSPMMGApplicationsRef != nil,
			eamq.withMTSPMMGExamCentres != nil,
			eamq.withExamcitycenter != nil,
			eamq.withExams != nil,
			eamq.withCircleRefsMTSPMMG != nil,
			eamq.withLogData != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*Exam_Application_MTSPMMG).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &Exam_Application_MTSPMMG{config: eamq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, eamq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := eamq.withUsersMTSPMMGRef; query != nil {
		if err := eamq.loadUsersMTSPMMGRef(ctx, query, nodes,
			func(n *Exam_Application_MTSPMMG) { n.Edges.UsersMTSPMMGRef = []*UserMaster{} },
			func(n *Exam_Application_MTSPMMG, e *UserMaster) {
				n.Edges.UsersMTSPMMGRef = append(n.Edges.UsersMTSPMMGRef, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := eamq.withRoleusers; query != nil {
		if err := eamq.loadRoleusers(ctx, query, nodes, nil,
			func(n *Exam_Application_MTSPMMG, e *RoleMaster) { n.Edges.Roleusers = e }); err != nil {
			return nil, err
		}
	}
	if query := eamq.withCadrePrefRef; query != nil {
		if err := eamq.loadCadrePrefRef(ctx, query, nodes,
			func(n *Exam_Application_MTSPMMG) { n.Edges.CadrePrefRef = []*Cadre_Choice_MTSPMMG{} },
			func(n *Exam_Application_MTSPMMG, e *Cadre_Choice_MTSPMMG) {
				n.Edges.CadrePrefRef = append(n.Edges.CadrePrefRef, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := eamq.withCirclePrefRefMTSPMMG; query != nil {
		if err := eamq.loadCirclePrefRefMTSPMMG(ctx, query, nodes,
			func(n *Exam_Application_MTSPMMG) { n.Edges.CirclePrefRefMTSPMMG = []*Division_Choice_MTSPMMG{} },
			func(n *Exam_Application_MTSPMMG, e *Division_Choice_MTSPMMG) {
				n.Edges.CirclePrefRefMTSPMMG = append(n.Edges.CirclePrefRefMTSPMMG, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := eamq.withMTSPMMGApplicationsRef; query != nil {
		if err := eamq.loadMTSPMMGApplicationsRef(ctx, query, nodes,
			func(n *Exam_Application_MTSPMMG) {
				n.Edges.MTSPMMGApplicationsRef = []*RecommendationsMTSPMMGApplications{}
			},
			func(n *Exam_Application_MTSPMMG, e *RecommendationsMTSPMMGApplications) {
				n.Edges.MTSPMMGApplicationsRef = append(n.Edges.MTSPMMGApplicationsRef, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := eamq.withMTSPMMGExamCentres; query != nil {
		if err := eamq.loadMTSPMMGExamCentres(ctx, query, nodes, nil,
			func(n *Exam_Application_MTSPMMG, e *Center) { n.Edges.MTSPMMGExamCentres = e }); err != nil {
			return nil, err
		}
	}
	if query := eamq.withExamcitycenter; query != nil {
		if err := eamq.loadExamcitycenter(ctx, query, nodes, nil,
			func(n *Exam_Application_MTSPMMG, e *ExamCityCenter) { n.Edges.Examcitycenter = e }); err != nil {
			return nil, err
		}
	}
	if query := eamq.withExams; query != nil {
		if err := eamq.loadExams(ctx, query, nodes, nil,
			func(n *Exam_Application_MTSPMMG, e *Exam) { n.Edges.Exams = e }); err != nil {
			return nil, err
		}
	}
	if query := eamq.withCircleRefsMTSPMMG; query != nil {
		if err := eamq.loadCircleRefsMTSPMMG(ctx, query, nodes, nil,
			func(n *Exam_Application_MTSPMMG, e *CircleSummaryForNO) { n.Edges.CircleRefsMTSPMMG = e }); err != nil {
			return nil, err
		}
	}
	if query := eamq.withLogData; query != nil {
		if err := eamq.loadLogData(ctx, query, nodes,
			func(n *Exam_Application_MTSPMMG) { n.Edges.LogData = []*Logs{} },
			func(n *Exam_Application_MTSPMMG, e *Logs) { n.Edges.LogData = append(n.Edges.LogData, e) }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (eamq *ExamApplicationMTSPMMGQuery) loadUsersMTSPMMGRef(ctx context.Context, query *UserMasterQuery, nodes []*Exam_Application_MTSPMMG, init func(*Exam_Application_MTSPMMG), assign func(*Exam_Application_MTSPMMG, *UserMaster)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int64]*Exam_Application_MTSPMMG)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.UserMaster(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(exam_application_mtspmmg.UsersMTSPMMGRefColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.exam_application_mtspmmg_users_mtspmmg_ref
		if fk == nil {
			return fmt.Errorf(`foreign-key "exam_application_mtspmmg_users_mtspmmg_ref" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "exam_application_mtspmmg_users_mtspmmg_ref" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (eamq *ExamApplicationMTSPMMGQuery) loadRoleusers(ctx context.Context, query *RoleMasterQuery, nodes []*Exam_Application_MTSPMMG, init func(*Exam_Application_MTSPMMG), assign func(*Exam_Application_MTSPMMG, *RoleMaster)) error {
	ids := make([]int32, 0, len(nodes))
	nodeids := make(map[int32][]*Exam_Application_MTSPMMG)
	for i := range nodes {
		fk := nodes[i].RoleUserCode
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(rolemaster.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "RoleUserCode" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (eamq *ExamApplicationMTSPMMGQuery) loadCadrePrefRef(ctx context.Context, query *CadreChoiceMTSPMMGQuery, nodes []*Exam_Application_MTSPMMG, init func(*Exam_Application_MTSPMMG), assign func(*Exam_Application_MTSPMMG, *Cadre_Choice_MTSPMMG)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int64]*Exam_Application_MTSPMMG)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(cadre_choice_mtspmmg.FieldApplicationID)
	}
	query.Where(predicate.Cadre_Choice_MTSPMMG(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(exam_application_mtspmmg.CadrePrefRefColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.ApplicationID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "ApplicationID" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (eamq *ExamApplicationMTSPMMGQuery) loadCirclePrefRefMTSPMMG(ctx context.Context, query *DivisionChoiceMTSPMMGQuery, nodes []*Exam_Application_MTSPMMG, init func(*Exam_Application_MTSPMMG), assign func(*Exam_Application_MTSPMMG, *Division_Choice_MTSPMMG)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int64]*Exam_Application_MTSPMMG)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(division_choice_mtspmmg.FieldApplicationID)
	}
	query.Where(predicate.Division_Choice_MTSPMMG(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(exam_application_mtspmmg.CirclePrefRefMTSPMMGColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.ApplicationID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "ApplicationID" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (eamq *ExamApplicationMTSPMMGQuery) loadMTSPMMGApplicationsRef(ctx context.Context, query *RecommendationsMTSPMMGApplicationsQuery, nodes []*Exam_Application_MTSPMMG, init func(*Exam_Application_MTSPMMG), assign func(*Exam_Application_MTSPMMG, *RecommendationsMTSPMMGApplications)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int64]*Exam_Application_MTSPMMG)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(recommendationsmtspmmgapplications.FieldApplicationID)
	}
	query.Where(predicate.RecommendationsMTSPMMGApplications(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(exam_application_mtspmmg.MTSPMMGApplicationsRefColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.ApplicationID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "ApplicationID" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (eamq *ExamApplicationMTSPMMGQuery) loadMTSPMMGExamCentres(ctx context.Context, query *CenterQuery, nodes []*Exam_Application_MTSPMMG, init func(*Exam_Application_MTSPMMG), assign func(*Exam_Application_MTSPMMG, *Center)) error {
	ids := make([]int32, 0, len(nodes))
	nodeids := make(map[int32][]*Exam_Application_MTSPMMG)
	for i := range nodes {
		fk := nodes[i].CenterCode
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(center.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "CenterCode" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (eamq *ExamApplicationMTSPMMGQuery) loadExamcitycenter(ctx context.Context, query *ExamCityCenterQuery, nodes []*Exam_Application_MTSPMMG, init func(*Exam_Application_MTSPMMG), assign func(*Exam_Application_MTSPMMG, *ExamCityCenter)) error {
	ids := make([]int32, 0, len(nodes))
	nodeids := make(map[int32][]*Exam_Application_MTSPMMG)
	for i := range nodes {
		fk := nodes[i].ExamCityCenterCode
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(examcitycenter.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "ExamCityCenterCode" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (eamq *ExamApplicationMTSPMMGQuery) loadExams(ctx context.Context, query *ExamQuery, nodes []*Exam_Application_MTSPMMG, init func(*Exam_Application_MTSPMMG), assign func(*Exam_Application_MTSPMMG, *Exam)) error {
	ids := make([]int32, 0, len(nodes))
	nodeids := make(map[int32][]*Exam_Application_MTSPMMG)
	for i := range nodes {
		fk := nodes[i].ExamCode
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(exam.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "ExamCode" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (eamq *ExamApplicationMTSPMMGQuery) loadCircleRefsMTSPMMG(ctx context.Context, query *CircleSummaryForNOQuery, nodes []*Exam_Application_MTSPMMG, init func(*Exam_Application_MTSPMMG), assign func(*Exam_Application_MTSPMMG, *CircleSummaryForNO)) error {
	ids := make([]int32, 0, len(nodes))
	nodeids := make(map[int32][]*Exam_Application_MTSPMMG)
	for i := range nodes {
		if nodes[i].CircleSID == nil {
			continue
		}
		fk := *nodes[i].CircleSID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(circlesummaryforno.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "CircleSID" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (eamq *ExamApplicationMTSPMMGQuery) loadLogData(ctx context.Context, query *LogsQuery, nodes []*Exam_Application_MTSPMMG, init func(*Exam_Application_MTSPMMG), assign func(*Exam_Application_MTSPMMG, *Logs)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int64]*Exam_Application_MTSPMMG)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Logs(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(exam_application_mtspmmg.LogDataColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.exam_application_mtspmmg_log_data
		if fk == nil {
			return fmt.Errorf(`foreign-key "exam_application_mtspmmg_log_data" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "exam_application_mtspmmg_log_data" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (eamq *ExamApplicationMTSPMMGQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := eamq.querySpec()
	_spec.Node.Columns = eamq.ctx.Fields
	if len(eamq.ctx.Fields) > 0 {
		_spec.Unique = eamq.ctx.Unique != nil && *eamq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, eamq.driver, _spec)
}

func (eamq *ExamApplicationMTSPMMGQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(exam_application_mtspmmg.Table, exam_application_mtspmmg.Columns, sqlgraph.NewFieldSpec(exam_application_mtspmmg.FieldID, field.TypeInt64))
	_spec.From = eamq.sql
	if unique := eamq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if eamq.path != nil {
		_spec.Unique = true
	}
	if fields := eamq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, exam_application_mtspmmg.FieldID)
		for i := range fields {
			if fields[i] != exam_application_mtspmmg.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if eamq.withRoleusers != nil {
			_spec.Node.AddColumnOnce(exam_application_mtspmmg.FieldRoleUserCode)
		}
		if eamq.withMTSPMMGExamCentres != nil {
			_spec.Node.AddColumnOnce(exam_application_mtspmmg.FieldCenterCode)
		}
		if eamq.withExamcitycenter != nil {
			_spec.Node.AddColumnOnce(exam_application_mtspmmg.FieldExamCityCenterCode)
		}
		if eamq.withExams != nil {
			_spec.Node.AddColumnOnce(exam_application_mtspmmg.FieldExamCode)
		}
		if eamq.withCircleRefsMTSPMMG != nil {
			_spec.Node.AddColumnOnce(exam_application_mtspmmg.FieldCircleSID)
		}
	}
	if ps := eamq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := eamq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := eamq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := eamq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (eamq *ExamApplicationMTSPMMGQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(eamq.driver.Dialect())
	t1 := builder.Table(exam_application_mtspmmg.Table)
	columns := eamq.ctx.Fields
	if len(columns) == 0 {
		columns = exam_application_mtspmmg.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if eamq.sql != nil {
		selector = eamq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if eamq.ctx.Unique != nil && *eamq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range eamq.predicates {
		p(selector)
	}
	for _, p := range eamq.order {
		p(selector)
	}
	if offset := eamq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := eamq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// ExamApplicationMTSPMMGGroupBy is the group-by builder for Exam_Application_MTSPMMG entities.
type ExamApplicationMTSPMMGGroupBy struct {
	selector
	build *ExamApplicationMTSPMMGQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (eamgb *ExamApplicationMTSPMMGGroupBy) Aggregate(fns ...AggregateFunc) *ExamApplicationMTSPMMGGroupBy {
	eamgb.fns = append(eamgb.fns, fns...)
	return eamgb
}

// Scan applies the selector query and scans the result into the given value.
func (eamgb *ExamApplicationMTSPMMGGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, eamgb.build.ctx, "GroupBy")
	if err := eamgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ExamApplicationMTSPMMGQuery, *ExamApplicationMTSPMMGGroupBy](ctx, eamgb.build, eamgb, eamgb.build.inters, v)
}

func (eamgb *ExamApplicationMTSPMMGGroupBy) sqlScan(ctx context.Context, root *ExamApplicationMTSPMMGQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(eamgb.fns))
	for _, fn := range eamgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*eamgb.flds)+len(eamgb.fns))
		for _, f := range *eamgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*eamgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := eamgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// ExamApplicationMTSPMMGSelect is the builder for selecting fields of ExamApplicationMTSPMMG entities.
type ExamApplicationMTSPMMGSelect struct {
	*ExamApplicationMTSPMMGQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (eams *ExamApplicationMTSPMMGSelect) Aggregate(fns ...AggregateFunc) *ExamApplicationMTSPMMGSelect {
	eams.fns = append(eams.fns, fns...)
	return eams
}

// Scan applies the selector query and scans the result into the given value.
func (eams *ExamApplicationMTSPMMGSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, eams.ctx, "Select")
	if err := eams.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ExamApplicationMTSPMMGQuery, *ExamApplicationMTSPMMGSelect](ctx, eams.ExamApplicationMTSPMMGQuery, eams, eams.inters, v)
}

func (eams *ExamApplicationMTSPMMGSelect) sqlScan(ctx context.Context, root *ExamApplicationMTSPMMGQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(eams.fns))
	for _, fn := range eams.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*eams.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := eams.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
