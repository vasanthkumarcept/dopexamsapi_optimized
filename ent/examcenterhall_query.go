// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"
	"recruit/ent/center"
	"recruit/ent/examcenterhall"
	"recruit/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ExamCenterHallQuery is the builder for querying ExamCenterHall entities.
type ExamCenterHallQuery struct {
	config
	ctx               *QueryContext
	order             []examcenterhall.OrderOption
	inters            []Interceptor
	predicates        []predicate.ExamCenterHall
	withExaCenterHall *CenterQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the ExamCenterHallQuery builder.
func (echq *ExamCenterHallQuery) Where(ps ...predicate.ExamCenterHall) *ExamCenterHallQuery {
	echq.predicates = append(echq.predicates, ps...)
	return echq
}

// Limit the number of records to be returned by this query.
func (echq *ExamCenterHallQuery) Limit(limit int) *ExamCenterHallQuery {
	echq.ctx.Limit = &limit
	return echq
}

// Offset to start from.
func (echq *ExamCenterHallQuery) Offset(offset int) *ExamCenterHallQuery {
	echq.ctx.Offset = &offset
	return echq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (echq *ExamCenterHallQuery) Unique(unique bool) *ExamCenterHallQuery {
	echq.ctx.Unique = &unique
	return echq
}

// Order specifies how the records should be ordered.
func (echq *ExamCenterHallQuery) Order(o ...examcenterhall.OrderOption) *ExamCenterHallQuery {
	echq.order = append(echq.order, o...)
	return echq
}

// QueryExaCenterHall chains the current query on the "ExaCenterHall" edge.
func (echq *ExamCenterHallQuery) QueryExaCenterHall() *CenterQuery {
	query := (&CenterClient{config: echq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := echq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := echq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(examcenterhall.Table, examcenterhall.FieldID, selector),
			sqlgraph.To(center.Table, center.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, examcenterhall.ExaCenterHallTable, examcenterhall.ExaCenterHallColumn),
		)
		fromU = sqlgraph.SetNeighbors(echq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first ExamCenterHall entity from the query.
// Returns a *NotFoundError when no ExamCenterHall was found.
func (echq *ExamCenterHallQuery) First(ctx context.Context) (*ExamCenterHall, error) {
	nodes, err := echq.Limit(1).All(setContextOp(ctx, echq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{examcenterhall.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (echq *ExamCenterHallQuery) FirstX(ctx context.Context) *ExamCenterHall {
	node, err := echq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first ExamCenterHall ID from the query.
// Returns a *NotFoundError when no ExamCenterHall ID was found.
func (echq *ExamCenterHallQuery) FirstID(ctx context.Context) (id int32, err error) {
	var ids []int32
	if ids, err = echq.Limit(1).IDs(setContextOp(ctx, echq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{examcenterhall.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (echq *ExamCenterHallQuery) FirstIDX(ctx context.Context) int32 {
	id, err := echq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single ExamCenterHall entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one ExamCenterHall entity is found.
// Returns a *NotFoundError when no ExamCenterHall entities are found.
func (echq *ExamCenterHallQuery) Only(ctx context.Context) (*ExamCenterHall, error) {
	nodes, err := echq.Limit(2).All(setContextOp(ctx, echq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{examcenterhall.Label}
	default:
		return nil, &NotSingularError{examcenterhall.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (echq *ExamCenterHallQuery) OnlyX(ctx context.Context) *ExamCenterHall {
	node, err := echq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only ExamCenterHall ID in the query.
// Returns a *NotSingularError when more than one ExamCenterHall ID is found.
// Returns a *NotFoundError when no entities are found.
func (echq *ExamCenterHallQuery) OnlyID(ctx context.Context) (id int32, err error) {
	var ids []int32
	if ids, err = echq.Limit(2).IDs(setContextOp(ctx, echq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{examcenterhall.Label}
	default:
		err = &NotSingularError{examcenterhall.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (echq *ExamCenterHallQuery) OnlyIDX(ctx context.Context) int32 {
	id, err := echq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of ExamCenterHalls.
func (echq *ExamCenterHallQuery) All(ctx context.Context) ([]*ExamCenterHall, error) {
	ctx = setContextOp(ctx, echq.ctx, "All")
	if err := echq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*ExamCenterHall, *ExamCenterHallQuery]()
	return withInterceptors[[]*ExamCenterHall](ctx, echq, qr, echq.inters)
}

// AllX is like All, but panics if an error occurs.
func (echq *ExamCenterHallQuery) AllX(ctx context.Context) []*ExamCenterHall {
	nodes, err := echq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of ExamCenterHall IDs.
func (echq *ExamCenterHallQuery) IDs(ctx context.Context) (ids []int32, err error) {
	if echq.ctx.Unique == nil && echq.path != nil {
		echq.Unique(true)
	}
	ctx = setContextOp(ctx, echq.ctx, "IDs")
	if err = echq.Select(examcenterhall.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (echq *ExamCenterHallQuery) IDsX(ctx context.Context) []int32 {
	ids, err := echq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (echq *ExamCenterHallQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, echq.ctx, "Count")
	if err := echq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, echq, querierCount[*ExamCenterHallQuery](), echq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (echq *ExamCenterHallQuery) CountX(ctx context.Context) int {
	count, err := echq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (echq *ExamCenterHallQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, echq.ctx, "Exist")
	switch _, err := echq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (echq *ExamCenterHallQuery) ExistX(ctx context.Context) bool {
	exist, err := echq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the ExamCenterHallQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (echq *ExamCenterHallQuery) Clone() *ExamCenterHallQuery {
	if echq == nil {
		return nil
	}
	return &ExamCenterHallQuery{
		config:            echq.config,
		ctx:               echq.ctx.Clone(),
		order:             append([]examcenterhall.OrderOption{}, echq.order...),
		inters:            append([]Interceptor{}, echq.inters...),
		predicates:        append([]predicate.ExamCenterHall{}, echq.predicates...),
		withExaCenterHall: echq.withExaCenterHall.Clone(),
		// clone intermediate query.
		sql:  echq.sql.Clone(),
		path: echq.path,
	}
}

// WithExaCenterHall tells the query-builder to eager-load the nodes that are connected to
// the "ExaCenterHall" edge. The optional arguments are used to configure the query builder of the edge.
func (echq *ExamCenterHallQuery) WithExaCenterHall(opts ...func(*CenterQuery)) *ExamCenterHallQuery {
	query := (&CenterClient{config: echq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	echq.withExaCenterHall = query
	return echq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CenterCode int32 `json:"CenterCode,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.ExamCenterHall.Query().
//		GroupBy(examcenterhall.FieldCenterCode).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (echq *ExamCenterHallQuery) GroupBy(field string, fields ...string) *ExamCenterHallGroupBy {
	echq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &ExamCenterHallGroupBy{build: echq}
	grbuild.flds = &echq.ctx.Fields
	grbuild.label = examcenterhall.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CenterCode int32 `json:"CenterCode,omitempty"`
//	}
//
//	client.ExamCenterHall.Query().
//		Select(examcenterhall.FieldCenterCode).
//		Scan(ctx, &v)
func (echq *ExamCenterHallQuery) Select(fields ...string) *ExamCenterHallSelect {
	echq.ctx.Fields = append(echq.ctx.Fields, fields...)
	sbuild := &ExamCenterHallSelect{ExamCenterHallQuery: echq}
	sbuild.label = examcenterhall.Label
	sbuild.flds, sbuild.scan = &echq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a ExamCenterHallSelect configured with the given aggregations.
func (echq *ExamCenterHallQuery) Aggregate(fns ...AggregateFunc) *ExamCenterHallSelect {
	return echq.Select().Aggregate(fns...)
}

func (echq *ExamCenterHallQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range echq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, echq); err != nil {
				return err
			}
		}
	}
	for _, f := range echq.ctx.Fields {
		if !examcenterhall.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if echq.path != nil {
		prev, err := echq.path(ctx)
		if err != nil {
			return err
		}
		echq.sql = prev
	}
	return nil
}

func (echq *ExamCenterHallQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*ExamCenterHall, error) {
	var (
		nodes       = []*ExamCenterHall{}
		_spec       = echq.querySpec()
		loadedTypes = [1]bool{
			echq.withExaCenterHall != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*ExamCenterHall).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &ExamCenterHall{config: echq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, echq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := echq.withExaCenterHall; query != nil {
		if err := echq.loadExaCenterHall(ctx, query, nodes, nil,
			func(n *ExamCenterHall, e *Center) { n.Edges.ExaCenterHall = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (echq *ExamCenterHallQuery) loadExaCenterHall(ctx context.Context, query *CenterQuery, nodes []*ExamCenterHall, init func(*ExamCenterHall), assign func(*ExamCenterHall, *Center)) error {
	ids := make([]int32, 0, len(nodes))
	nodeids := make(map[int32][]*ExamCenterHall)
	for i := range nodes {
		fk := nodes[i].CenterCode
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(center.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "CenterCode" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (echq *ExamCenterHallQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := echq.querySpec()
	_spec.Node.Columns = echq.ctx.Fields
	if len(echq.ctx.Fields) > 0 {
		_spec.Unique = echq.ctx.Unique != nil && *echq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, echq.driver, _spec)
}

func (echq *ExamCenterHallQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(examcenterhall.Table, examcenterhall.Columns, sqlgraph.NewFieldSpec(examcenterhall.FieldID, field.TypeInt32))
	_spec.From = echq.sql
	if unique := echq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if echq.path != nil {
		_spec.Unique = true
	}
	if fields := echq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, examcenterhall.FieldID)
		for i := range fields {
			if fields[i] != examcenterhall.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if echq.withExaCenterHall != nil {
			_spec.Node.AddColumnOnce(examcenterhall.FieldCenterCode)
		}
	}
	if ps := echq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := echq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := echq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := echq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (echq *ExamCenterHallQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(echq.driver.Dialect())
	t1 := builder.Table(examcenterhall.Table)
	columns := echq.ctx.Fields
	if len(columns) == 0 {
		columns = examcenterhall.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if echq.sql != nil {
		selector = echq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if echq.ctx.Unique != nil && *echq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range echq.predicates {
		p(selector)
	}
	for _, p := range echq.order {
		p(selector)
	}
	if offset := echq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := echq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// ExamCenterHallGroupBy is the group-by builder for ExamCenterHall entities.
type ExamCenterHallGroupBy struct {
	selector
	build *ExamCenterHallQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (echgb *ExamCenterHallGroupBy) Aggregate(fns ...AggregateFunc) *ExamCenterHallGroupBy {
	echgb.fns = append(echgb.fns, fns...)
	return echgb
}

// Scan applies the selector query and scans the result into the given value.
func (echgb *ExamCenterHallGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, echgb.build.ctx, "GroupBy")
	if err := echgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ExamCenterHallQuery, *ExamCenterHallGroupBy](ctx, echgb.build, echgb, echgb.build.inters, v)
}

func (echgb *ExamCenterHallGroupBy) sqlScan(ctx context.Context, root *ExamCenterHallQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(echgb.fns))
	for _, fn := range echgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*echgb.flds)+len(echgb.fns))
		for _, f := range *echgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*echgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := echgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// ExamCenterHallSelect is the builder for selecting fields of ExamCenterHall entities.
type ExamCenterHallSelect struct {
	*ExamCenterHallQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (echs *ExamCenterHallSelect) Aggregate(fns ...AggregateFunc) *ExamCenterHallSelect {
	echs.fns = append(echs.fns, fns...)
	return echs
}

// Scan applies the selector query and scans the result into the given value.
func (echs *ExamCenterHallSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, echs.ctx, "Select")
	if err := echs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ExamCenterHallQuery, *ExamCenterHallSelect](ctx, echs.ExamCenterHallQuery, echs, echs.inters, v)
}

func (echs *ExamCenterHallSelect) sqlScan(ctx context.Context, root *ExamCenterHallQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(echs.fns))
	for _, fn := range echs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*echs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := echs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
