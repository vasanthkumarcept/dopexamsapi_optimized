// Code generated by ent, DO NOT EDIT.

package center

import (
	"recruit/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int32) predicate.Center {
	return predicate.Center(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int32) predicate.Center {
	return predicate.Center(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int32) predicate.Center {
	return predicate.Center(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int32) predicate.Center {
	return predicate.Center(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int32) predicate.Center {
	return predicate.Center(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int32) predicate.Center {
	return predicate.Center(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int32) predicate.Center {
	return predicate.Center(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int32) predicate.Center {
	return predicate.Center(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int32) predicate.Center {
	return predicate.Center(sql.FieldLTE(FieldID, id))
}

// CityID applies equality check predicate on the "CityID" field. It's identical to CityIDEQ.
func CityID(v int32) predicate.Center {
	return predicate.Center(sql.FieldEQ(FieldCityID, v))
}

// NodalOfficerCode applies equality check predicate on the "NodalOfficerCode" field. It's identical to NodalOfficerCodeEQ.
func NodalOfficerCode(v int32) predicate.Center {
	return predicate.Center(sql.FieldEQ(FieldNodalOfficerCode, v))
}

// ExamCenterName applies equality check predicate on the "ExamCenterName" field. It's identical to ExamCenterNameEQ.
func ExamCenterName(v string) predicate.Center {
	return predicate.Center(sql.FieldEQ(FieldExamCenterName, v))
}

// ExamCode applies equality check predicate on the "ExamCode" field. It's identical to ExamCodeEQ.
func ExamCode(v int32) predicate.Center {
	return predicate.Center(sql.FieldEQ(FieldExamCode, v))
}

// RegionID applies equality check predicate on the "RegionID" field. It's identical to RegionIDEQ.
func RegionID(v int32) predicate.Center {
	return predicate.Center(sql.FieldEQ(FieldRegionID, v))
}

// CircleID applies equality check predicate on the "CircleID" field. It's identical to CircleIDEQ.
func CircleID(v int32) predicate.Center {
	return predicate.Center(sql.FieldEQ(FieldCircleID, v))
}

// DivisionID applies equality check predicate on the "DivisionID" field. It's identical to DivisionIDEQ.
func DivisionID(v int32) predicate.Center {
	return predicate.Center(sql.FieldEQ(FieldDivisionID, v))
}

// FacilityID applies equality check predicate on the "FacilityID" field. It's identical to FacilityIDEQ.
func FacilityID(v int32) predicate.Center {
	return predicate.Center(sql.FieldEQ(FieldFacilityID, v))
}

// ExamNameCode applies equality check predicate on the "ExamNameCode" field. It's identical to ExamNameCodeEQ.
func ExamNameCode(v string) predicate.Center {
	return predicate.Center(sql.FieldEQ(FieldExamNameCode, v))
}

// ExamName applies equality check predicate on the "ExamName" field. It's identical to ExamNameEQ.
func ExamName(v string) predicate.Center {
	return predicate.Center(sql.FieldEQ(FieldExamName, v))
}

// NAUserName applies equality check predicate on the "NAUserName" field. It's identical to NAUserNameEQ.
func NAUserName(v string) predicate.Center {
	return predicate.Center(sql.FieldEQ(FieldNAUserName, v))
}

// NodalOfficeFacilityId applies equality check predicate on the "NodalOfficeFacilityId" field. It's identical to NodalOfficeFacilityIdEQ.
func NodalOfficeFacilityId(v string) predicate.Center {
	return predicate.Center(sql.FieldEQ(FieldNodalOfficeFacilityId, v))
}

// AdminCircleOfficeID applies equality check predicate on the "AdminCircleOfficeID" field. It's identical to AdminCircleOfficeIDEQ.
func AdminCircleOfficeID(v string) predicate.Center {
	return predicate.Center(sql.FieldEQ(FieldAdminCircleOfficeID, v))
}

// Address applies equality check predicate on the "Address" field. It's identical to AddressEQ.
func Address(v string) predicate.Center {
	return predicate.Center(sql.FieldEQ(FieldAddress, v))
}

// Landmark applies equality check predicate on the "Landmark" field. It's identical to LandmarkEQ.
func Landmark(v string) predicate.Center {
	return predicate.Center(sql.FieldEQ(FieldLandmark, v))
}

// CenterCityName applies equality check predicate on the "CenterCityName" field. It's identical to CenterCityNameEQ.
func CenterCityName(v string) predicate.Center {
	return predicate.Center(sql.FieldEQ(FieldCenterCityName, v))
}

// Pincode applies equality check predicate on the "Pincode" field. It's identical to PincodeEQ.
func Pincode(v int32) predicate.Center {
	return predicate.Center(sql.FieldEQ(FieldPincode, v))
}

// MaxSeats applies equality check predicate on the "MaxSeats" field. It's identical to MaxSeatsEQ.
func MaxSeats(v int32) predicate.Center {
	return predicate.Center(sql.FieldEQ(FieldMaxSeats, v))
}

// NoAlloted applies equality check predicate on the "NoAlloted" field. It's identical to NoAllotedEQ.
func NoAlloted(v int32) predicate.Center {
	return predicate.Center(sql.FieldEQ(FieldNoAlloted, v))
}

// PendingSeats applies equality check predicate on the "PendingSeats" field. It's identical to PendingSeatsEQ.
func PendingSeats(v int32) predicate.Center {
	return predicate.Center(sql.FieldEQ(FieldPendingSeats, v))
}

// Status applies equality check predicate on the "Status" field. It's identical to StatusEQ.
func Status(v bool) predicate.Center {
	return predicate.Center(sql.FieldEQ(FieldStatus, v))
}

// ExamYear applies equality check predicate on the "ExamYear" field. It's identical to ExamYearEQ.
func ExamYear(v string) predicate.Center {
	return predicate.Center(sql.FieldEQ(FieldExamYear, v))
}

// ConductedBy applies equality check predicate on the "ConductedBy" field. It's identical to ConductedByEQ.
func ConductedBy(v string) predicate.Center {
	return predicate.Center(sql.FieldEQ(FieldConductedBy, v))
}

// ConductedByFacilityID applies equality check predicate on the "ConductedByFacilityID" field. It's identical to ConductedByFacilityIDEQ.
func ConductedByFacilityID(v string) predicate.Center {
	return predicate.Center(sql.FieldEQ(FieldConductedByFacilityID, v))
}

// UpdatedAt applies equality check predicate on the "UpdatedAt" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Center {
	return predicate.Center(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedBy applies equality check predicate on the "UpdatedBy" field. It's identical to UpdatedByEQ.
func UpdatedBy(v string) predicate.Center {
	return predicate.Center(sql.FieldEQ(FieldUpdatedBy, v))
}

// CityIDEQ applies the EQ predicate on the "CityID" field.
func CityIDEQ(v int32) predicate.Center {
	return predicate.Center(sql.FieldEQ(FieldCityID, v))
}

// CityIDNEQ applies the NEQ predicate on the "CityID" field.
func CityIDNEQ(v int32) predicate.Center {
	return predicate.Center(sql.FieldNEQ(FieldCityID, v))
}

// CityIDIn applies the In predicate on the "CityID" field.
func CityIDIn(vs ...int32) predicate.Center {
	return predicate.Center(sql.FieldIn(FieldCityID, vs...))
}

// CityIDNotIn applies the NotIn predicate on the "CityID" field.
func CityIDNotIn(vs ...int32) predicate.Center {
	return predicate.Center(sql.FieldNotIn(FieldCityID, vs...))
}

// CityIDGT applies the GT predicate on the "CityID" field.
func CityIDGT(v int32) predicate.Center {
	return predicate.Center(sql.FieldGT(FieldCityID, v))
}

// CityIDGTE applies the GTE predicate on the "CityID" field.
func CityIDGTE(v int32) predicate.Center {
	return predicate.Center(sql.FieldGTE(FieldCityID, v))
}

// CityIDLT applies the LT predicate on the "CityID" field.
func CityIDLT(v int32) predicate.Center {
	return predicate.Center(sql.FieldLT(FieldCityID, v))
}

// CityIDLTE applies the LTE predicate on the "CityID" field.
func CityIDLTE(v int32) predicate.Center {
	return predicate.Center(sql.FieldLTE(FieldCityID, v))
}

// CityIDIsNil applies the IsNil predicate on the "CityID" field.
func CityIDIsNil() predicate.Center {
	return predicate.Center(sql.FieldIsNull(FieldCityID))
}

// CityIDNotNil applies the NotNil predicate on the "CityID" field.
func CityIDNotNil() predicate.Center {
	return predicate.Center(sql.FieldNotNull(FieldCityID))
}

// NodalOfficerCodeEQ applies the EQ predicate on the "NodalOfficerCode" field.
func NodalOfficerCodeEQ(v int32) predicate.Center {
	return predicate.Center(sql.FieldEQ(FieldNodalOfficerCode, v))
}

// NodalOfficerCodeNEQ applies the NEQ predicate on the "NodalOfficerCode" field.
func NodalOfficerCodeNEQ(v int32) predicate.Center {
	return predicate.Center(sql.FieldNEQ(FieldNodalOfficerCode, v))
}

// NodalOfficerCodeIn applies the In predicate on the "NodalOfficerCode" field.
func NodalOfficerCodeIn(vs ...int32) predicate.Center {
	return predicate.Center(sql.FieldIn(FieldNodalOfficerCode, vs...))
}

// NodalOfficerCodeNotIn applies the NotIn predicate on the "NodalOfficerCode" field.
func NodalOfficerCodeNotIn(vs ...int32) predicate.Center {
	return predicate.Center(sql.FieldNotIn(FieldNodalOfficerCode, vs...))
}

// NodalOfficerCodeGT applies the GT predicate on the "NodalOfficerCode" field.
func NodalOfficerCodeGT(v int32) predicate.Center {
	return predicate.Center(sql.FieldGT(FieldNodalOfficerCode, v))
}

// NodalOfficerCodeGTE applies the GTE predicate on the "NodalOfficerCode" field.
func NodalOfficerCodeGTE(v int32) predicate.Center {
	return predicate.Center(sql.FieldGTE(FieldNodalOfficerCode, v))
}

// NodalOfficerCodeLT applies the LT predicate on the "NodalOfficerCode" field.
func NodalOfficerCodeLT(v int32) predicate.Center {
	return predicate.Center(sql.FieldLT(FieldNodalOfficerCode, v))
}

// NodalOfficerCodeLTE applies the LTE predicate on the "NodalOfficerCode" field.
func NodalOfficerCodeLTE(v int32) predicate.Center {
	return predicate.Center(sql.FieldLTE(FieldNodalOfficerCode, v))
}

// NodalOfficerCodeIsNil applies the IsNil predicate on the "NodalOfficerCode" field.
func NodalOfficerCodeIsNil() predicate.Center {
	return predicate.Center(sql.FieldIsNull(FieldNodalOfficerCode))
}

// NodalOfficerCodeNotNil applies the NotNil predicate on the "NodalOfficerCode" field.
func NodalOfficerCodeNotNil() predicate.Center {
	return predicate.Center(sql.FieldNotNull(FieldNodalOfficerCode))
}

// ExamCenterNameEQ applies the EQ predicate on the "ExamCenterName" field.
func ExamCenterNameEQ(v string) predicate.Center {
	return predicate.Center(sql.FieldEQ(FieldExamCenterName, v))
}

// ExamCenterNameNEQ applies the NEQ predicate on the "ExamCenterName" field.
func ExamCenterNameNEQ(v string) predicate.Center {
	return predicate.Center(sql.FieldNEQ(FieldExamCenterName, v))
}

// ExamCenterNameIn applies the In predicate on the "ExamCenterName" field.
func ExamCenterNameIn(vs ...string) predicate.Center {
	return predicate.Center(sql.FieldIn(FieldExamCenterName, vs...))
}

// ExamCenterNameNotIn applies the NotIn predicate on the "ExamCenterName" field.
func ExamCenterNameNotIn(vs ...string) predicate.Center {
	return predicate.Center(sql.FieldNotIn(FieldExamCenterName, vs...))
}

// ExamCenterNameGT applies the GT predicate on the "ExamCenterName" field.
func ExamCenterNameGT(v string) predicate.Center {
	return predicate.Center(sql.FieldGT(FieldExamCenterName, v))
}

// ExamCenterNameGTE applies the GTE predicate on the "ExamCenterName" field.
func ExamCenterNameGTE(v string) predicate.Center {
	return predicate.Center(sql.FieldGTE(FieldExamCenterName, v))
}

// ExamCenterNameLT applies the LT predicate on the "ExamCenterName" field.
func ExamCenterNameLT(v string) predicate.Center {
	return predicate.Center(sql.FieldLT(FieldExamCenterName, v))
}

// ExamCenterNameLTE applies the LTE predicate on the "ExamCenterName" field.
func ExamCenterNameLTE(v string) predicate.Center {
	return predicate.Center(sql.FieldLTE(FieldExamCenterName, v))
}

// ExamCenterNameContains applies the Contains predicate on the "ExamCenterName" field.
func ExamCenterNameContains(v string) predicate.Center {
	return predicate.Center(sql.FieldContains(FieldExamCenterName, v))
}

// ExamCenterNameHasPrefix applies the HasPrefix predicate on the "ExamCenterName" field.
func ExamCenterNameHasPrefix(v string) predicate.Center {
	return predicate.Center(sql.FieldHasPrefix(FieldExamCenterName, v))
}

// ExamCenterNameHasSuffix applies the HasSuffix predicate on the "ExamCenterName" field.
func ExamCenterNameHasSuffix(v string) predicate.Center {
	return predicate.Center(sql.FieldHasSuffix(FieldExamCenterName, v))
}

// ExamCenterNameIsNil applies the IsNil predicate on the "ExamCenterName" field.
func ExamCenterNameIsNil() predicate.Center {
	return predicate.Center(sql.FieldIsNull(FieldExamCenterName))
}

// ExamCenterNameNotNil applies the NotNil predicate on the "ExamCenterName" field.
func ExamCenterNameNotNil() predicate.Center {
	return predicate.Center(sql.FieldNotNull(FieldExamCenterName))
}

// ExamCenterNameEqualFold applies the EqualFold predicate on the "ExamCenterName" field.
func ExamCenterNameEqualFold(v string) predicate.Center {
	return predicate.Center(sql.FieldEqualFold(FieldExamCenterName, v))
}

// ExamCenterNameContainsFold applies the ContainsFold predicate on the "ExamCenterName" field.
func ExamCenterNameContainsFold(v string) predicate.Center {
	return predicate.Center(sql.FieldContainsFold(FieldExamCenterName, v))
}

// ExamCodeEQ applies the EQ predicate on the "ExamCode" field.
func ExamCodeEQ(v int32) predicate.Center {
	return predicate.Center(sql.FieldEQ(FieldExamCode, v))
}

// ExamCodeNEQ applies the NEQ predicate on the "ExamCode" field.
func ExamCodeNEQ(v int32) predicate.Center {
	return predicate.Center(sql.FieldNEQ(FieldExamCode, v))
}

// ExamCodeIn applies the In predicate on the "ExamCode" field.
func ExamCodeIn(vs ...int32) predicate.Center {
	return predicate.Center(sql.FieldIn(FieldExamCode, vs...))
}

// ExamCodeNotIn applies the NotIn predicate on the "ExamCode" field.
func ExamCodeNotIn(vs ...int32) predicate.Center {
	return predicate.Center(sql.FieldNotIn(FieldExamCode, vs...))
}

// ExamCodeIsNil applies the IsNil predicate on the "ExamCode" field.
func ExamCodeIsNil() predicate.Center {
	return predicate.Center(sql.FieldIsNull(FieldExamCode))
}

// ExamCodeNotNil applies the NotNil predicate on the "ExamCode" field.
func ExamCodeNotNil() predicate.Center {
	return predicate.Center(sql.FieldNotNull(FieldExamCode))
}

// RegionIDEQ applies the EQ predicate on the "RegionID" field.
func RegionIDEQ(v int32) predicate.Center {
	return predicate.Center(sql.FieldEQ(FieldRegionID, v))
}

// RegionIDNEQ applies the NEQ predicate on the "RegionID" field.
func RegionIDNEQ(v int32) predicate.Center {
	return predicate.Center(sql.FieldNEQ(FieldRegionID, v))
}

// RegionIDIn applies the In predicate on the "RegionID" field.
func RegionIDIn(vs ...int32) predicate.Center {
	return predicate.Center(sql.FieldIn(FieldRegionID, vs...))
}

// RegionIDNotIn applies the NotIn predicate on the "RegionID" field.
func RegionIDNotIn(vs ...int32) predicate.Center {
	return predicate.Center(sql.FieldNotIn(FieldRegionID, vs...))
}

// RegionIDGT applies the GT predicate on the "RegionID" field.
func RegionIDGT(v int32) predicate.Center {
	return predicate.Center(sql.FieldGT(FieldRegionID, v))
}

// RegionIDGTE applies the GTE predicate on the "RegionID" field.
func RegionIDGTE(v int32) predicate.Center {
	return predicate.Center(sql.FieldGTE(FieldRegionID, v))
}

// RegionIDLT applies the LT predicate on the "RegionID" field.
func RegionIDLT(v int32) predicate.Center {
	return predicate.Center(sql.FieldLT(FieldRegionID, v))
}

// RegionIDLTE applies the LTE predicate on the "RegionID" field.
func RegionIDLTE(v int32) predicate.Center {
	return predicate.Center(sql.FieldLTE(FieldRegionID, v))
}

// RegionIDIsNil applies the IsNil predicate on the "RegionID" field.
func RegionIDIsNil() predicate.Center {
	return predicate.Center(sql.FieldIsNull(FieldRegionID))
}

// RegionIDNotNil applies the NotNil predicate on the "RegionID" field.
func RegionIDNotNil() predicate.Center {
	return predicate.Center(sql.FieldNotNull(FieldRegionID))
}

// CircleIDEQ applies the EQ predicate on the "CircleID" field.
func CircleIDEQ(v int32) predicate.Center {
	return predicate.Center(sql.FieldEQ(FieldCircleID, v))
}

// CircleIDNEQ applies the NEQ predicate on the "CircleID" field.
func CircleIDNEQ(v int32) predicate.Center {
	return predicate.Center(sql.FieldNEQ(FieldCircleID, v))
}

// CircleIDIn applies the In predicate on the "CircleID" field.
func CircleIDIn(vs ...int32) predicate.Center {
	return predicate.Center(sql.FieldIn(FieldCircleID, vs...))
}

// CircleIDNotIn applies the NotIn predicate on the "CircleID" field.
func CircleIDNotIn(vs ...int32) predicate.Center {
	return predicate.Center(sql.FieldNotIn(FieldCircleID, vs...))
}

// CircleIDGT applies the GT predicate on the "CircleID" field.
func CircleIDGT(v int32) predicate.Center {
	return predicate.Center(sql.FieldGT(FieldCircleID, v))
}

// CircleIDGTE applies the GTE predicate on the "CircleID" field.
func CircleIDGTE(v int32) predicate.Center {
	return predicate.Center(sql.FieldGTE(FieldCircleID, v))
}

// CircleIDLT applies the LT predicate on the "CircleID" field.
func CircleIDLT(v int32) predicate.Center {
	return predicate.Center(sql.FieldLT(FieldCircleID, v))
}

// CircleIDLTE applies the LTE predicate on the "CircleID" field.
func CircleIDLTE(v int32) predicate.Center {
	return predicate.Center(sql.FieldLTE(FieldCircleID, v))
}

// CircleIDIsNil applies the IsNil predicate on the "CircleID" field.
func CircleIDIsNil() predicate.Center {
	return predicate.Center(sql.FieldIsNull(FieldCircleID))
}

// CircleIDNotNil applies the NotNil predicate on the "CircleID" field.
func CircleIDNotNil() predicate.Center {
	return predicate.Center(sql.FieldNotNull(FieldCircleID))
}

// DivisionIDEQ applies the EQ predicate on the "DivisionID" field.
func DivisionIDEQ(v int32) predicate.Center {
	return predicate.Center(sql.FieldEQ(FieldDivisionID, v))
}

// DivisionIDNEQ applies the NEQ predicate on the "DivisionID" field.
func DivisionIDNEQ(v int32) predicate.Center {
	return predicate.Center(sql.FieldNEQ(FieldDivisionID, v))
}

// DivisionIDIn applies the In predicate on the "DivisionID" field.
func DivisionIDIn(vs ...int32) predicate.Center {
	return predicate.Center(sql.FieldIn(FieldDivisionID, vs...))
}

// DivisionIDNotIn applies the NotIn predicate on the "DivisionID" field.
func DivisionIDNotIn(vs ...int32) predicate.Center {
	return predicate.Center(sql.FieldNotIn(FieldDivisionID, vs...))
}

// DivisionIDGT applies the GT predicate on the "DivisionID" field.
func DivisionIDGT(v int32) predicate.Center {
	return predicate.Center(sql.FieldGT(FieldDivisionID, v))
}

// DivisionIDGTE applies the GTE predicate on the "DivisionID" field.
func DivisionIDGTE(v int32) predicate.Center {
	return predicate.Center(sql.FieldGTE(FieldDivisionID, v))
}

// DivisionIDLT applies the LT predicate on the "DivisionID" field.
func DivisionIDLT(v int32) predicate.Center {
	return predicate.Center(sql.FieldLT(FieldDivisionID, v))
}

// DivisionIDLTE applies the LTE predicate on the "DivisionID" field.
func DivisionIDLTE(v int32) predicate.Center {
	return predicate.Center(sql.FieldLTE(FieldDivisionID, v))
}

// DivisionIDIsNil applies the IsNil predicate on the "DivisionID" field.
func DivisionIDIsNil() predicate.Center {
	return predicate.Center(sql.FieldIsNull(FieldDivisionID))
}

// DivisionIDNotNil applies the NotNil predicate on the "DivisionID" field.
func DivisionIDNotNil() predicate.Center {
	return predicate.Center(sql.FieldNotNull(FieldDivisionID))
}

// FacilityIDEQ applies the EQ predicate on the "FacilityID" field.
func FacilityIDEQ(v int32) predicate.Center {
	return predicate.Center(sql.FieldEQ(FieldFacilityID, v))
}

// FacilityIDNEQ applies the NEQ predicate on the "FacilityID" field.
func FacilityIDNEQ(v int32) predicate.Center {
	return predicate.Center(sql.FieldNEQ(FieldFacilityID, v))
}

// FacilityIDIn applies the In predicate on the "FacilityID" field.
func FacilityIDIn(vs ...int32) predicate.Center {
	return predicate.Center(sql.FieldIn(FieldFacilityID, vs...))
}

// FacilityIDNotIn applies the NotIn predicate on the "FacilityID" field.
func FacilityIDNotIn(vs ...int32) predicate.Center {
	return predicate.Center(sql.FieldNotIn(FieldFacilityID, vs...))
}

// FacilityIDGT applies the GT predicate on the "FacilityID" field.
func FacilityIDGT(v int32) predicate.Center {
	return predicate.Center(sql.FieldGT(FieldFacilityID, v))
}

// FacilityIDGTE applies the GTE predicate on the "FacilityID" field.
func FacilityIDGTE(v int32) predicate.Center {
	return predicate.Center(sql.FieldGTE(FieldFacilityID, v))
}

// FacilityIDLT applies the LT predicate on the "FacilityID" field.
func FacilityIDLT(v int32) predicate.Center {
	return predicate.Center(sql.FieldLT(FieldFacilityID, v))
}

// FacilityIDLTE applies the LTE predicate on the "FacilityID" field.
func FacilityIDLTE(v int32) predicate.Center {
	return predicate.Center(sql.FieldLTE(FieldFacilityID, v))
}

// FacilityIDIsNil applies the IsNil predicate on the "FacilityID" field.
func FacilityIDIsNil() predicate.Center {
	return predicate.Center(sql.FieldIsNull(FieldFacilityID))
}

// FacilityIDNotNil applies the NotNil predicate on the "FacilityID" field.
func FacilityIDNotNil() predicate.Center {
	return predicate.Center(sql.FieldNotNull(FieldFacilityID))
}

// ExamNameCodeEQ applies the EQ predicate on the "ExamNameCode" field.
func ExamNameCodeEQ(v string) predicate.Center {
	return predicate.Center(sql.FieldEQ(FieldExamNameCode, v))
}

// ExamNameCodeNEQ applies the NEQ predicate on the "ExamNameCode" field.
func ExamNameCodeNEQ(v string) predicate.Center {
	return predicate.Center(sql.FieldNEQ(FieldExamNameCode, v))
}

// ExamNameCodeIn applies the In predicate on the "ExamNameCode" field.
func ExamNameCodeIn(vs ...string) predicate.Center {
	return predicate.Center(sql.FieldIn(FieldExamNameCode, vs...))
}

// ExamNameCodeNotIn applies the NotIn predicate on the "ExamNameCode" field.
func ExamNameCodeNotIn(vs ...string) predicate.Center {
	return predicate.Center(sql.FieldNotIn(FieldExamNameCode, vs...))
}

// ExamNameCodeGT applies the GT predicate on the "ExamNameCode" field.
func ExamNameCodeGT(v string) predicate.Center {
	return predicate.Center(sql.FieldGT(FieldExamNameCode, v))
}

// ExamNameCodeGTE applies the GTE predicate on the "ExamNameCode" field.
func ExamNameCodeGTE(v string) predicate.Center {
	return predicate.Center(sql.FieldGTE(FieldExamNameCode, v))
}

// ExamNameCodeLT applies the LT predicate on the "ExamNameCode" field.
func ExamNameCodeLT(v string) predicate.Center {
	return predicate.Center(sql.FieldLT(FieldExamNameCode, v))
}

// ExamNameCodeLTE applies the LTE predicate on the "ExamNameCode" field.
func ExamNameCodeLTE(v string) predicate.Center {
	return predicate.Center(sql.FieldLTE(FieldExamNameCode, v))
}

// ExamNameCodeContains applies the Contains predicate on the "ExamNameCode" field.
func ExamNameCodeContains(v string) predicate.Center {
	return predicate.Center(sql.FieldContains(FieldExamNameCode, v))
}

// ExamNameCodeHasPrefix applies the HasPrefix predicate on the "ExamNameCode" field.
func ExamNameCodeHasPrefix(v string) predicate.Center {
	return predicate.Center(sql.FieldHasPrefix(FieldExamNameCode, v))
}

// ExamNameCodeHasSuffix applies the HasSuffix predicate on the "ExamNameCode" field.
func ExamNameCodeHasSuffix(v string) predicate.Center {
	return predicate.Center(sql.FieldHasSuffix(FieldExamNameCode, v))
}

// ExamNameCodeIsNil applies the IsNil predicate on the "ExamNameCode" field.
func ExamNameCodeIsNil() predicate.Center {
	return predicate.Center(sql.FieldIsNull(FieldExamNameCode))
}

// ExamNameCodeNotNil applies the NotNil predicate on the "ExamNameCode" field.
func ExamNameCodeNotNil() predicate.Center {
	return predicate.Center(sql.FieldNotNull(FieldExamNameCode))
}

// ExamNameCodeEqualFold applies the EqualFold predicate on the "ExamNameCode" field.
func ExamNameCodeEqualFold(v string) predicate.Center {
	return predicate.Center(sql.FieldEqualFold(FieldExamNameCode, v))
}

// ExamNameCodeContainsFold applies the ContainsFold predicate on the "ExamNameCode" field.
func ExamNameCodeContainsFold(v string) predicate.Center {
	return predicate.Center(sql.FieldContainsFold(FieldExamNameCode, v))
}

// ExamNameEQ applies the EQ predicate on the "ExamName" field.
func ExamNameEQ(v string) predicate.Center {
	return predicate.Center(sql.FieldEQ(FieldExamName, v))
}

// ExamNameNEQ applies the NEQ predicate on the "ExamName" field.
func ExamNameNEQ(v string) predicate.Center {
	return predicate.Center(sql.FieldNEQ(FieldExamName, v))
}

// ExamNameIn applies the In predicate on the "ExamName" field.
func ExamNameIn(vs ...string) predicate.Center {
	return predicate.Center(sql.FieldIn(FieldExamName, vs...))
}

// ExamNameNotIn applies the NotIn predicate on the "ExamName" field.
func ExamNameNotIn(vs ...string) predicate.Center {
	return predicate.Center(sql.FieldNotIn(FieldExamName, vs...))
}

// ExamNameGT applies the GT predicate on the "ExamName" field.
func ExamNameGT(v string) predicate.Center {
	return predicate.Center(sql.FieldGT(FieldExamName, v))
}

// ExamNameGTE applies the GTE predicate on the "ExamName" field.
func ExamNameGTE(v string) predicate.Center {
	return predicate.Center(sql.FieldGTE(FieldExamName, v))
}

// ExamNameLT applies the LT predicate on the "ExamName" field.
func ExamNameLT(v string) predicate.Center {
	return predicate.Center(sql.FieldLT(FieldExamName, v))
}

// ExamNameLTE applies the LTE predicate on the "ExamName" field.
func ExamNameLTE(v string) predicate.Center {
	return predicate.Center(sql.FieldLTE(FieldExamName, v))
}

// ExamNameContains applies the Contains predicate on the "ExamName" field.
func ExamNameContains(v string) predicate.Center {
	return predicate.Center(sql.FieldContains(FieldExamName, v))
}

// ExamNameHasPrefix applies the HasPrefix predicate on the "ExamName" field.
func ExamNameHasPrefix(v string) predicate.Center {
	return predicate.Center(sql.FieldHasPrefix(FieldExamName, v))
}

// ExamNameHasSuffix applies the HasSuffix predicate on the "ExamName" field.
func ExamNameHasSuffix(v string) predicate.Center {
	return predicate.Center(sql.FieldHasSuffix(FieldExamName, v))
}

// ExamNameIsNil applies the IsNil predicate on the "ExamName" field.
func ExamNameIsNil() predicate.Center {
	return predicate.Center(sql.FieldIsNull(FieldExamName))
}

// ExamNameNotNil applies the NotNil predicate on the "ExamName" field.
func ExamNameNotNil() predicate.Center {
	return predicate.Center(sql.FieldNotNull(FieldExamName))
}

// ExamNameEqualFold applies the EqualFold predicate on the "ExamName" field.
func ExamNameEqualFold(v string) predicate.Center {
	return predicate.Center(sql.FieldEqualFold(FieldExamName, v))
}

// ExamNameContainsFold applies the ContainsFold predicate on the "ExamName" field.
func ExamNameContainsFold(v string) predicate.Center {
	return predicate.Center(sql.FieldContainsFold(FieldExamName, v))
}

// NAUserNameEQ applies the EQ predicate on the "NAUserName" field.
func NAUserNameEQ(v string) predicate.Center {
	return predicate.Center(sql.FieldEQ(FieldNAUserName, v))
}

// NAUserNameNEQ applies the NEQ predicate on the "NAUserName" field.
func NAUserNameNEQ(v string) predicate.Center {
	return predicate.Center(sql.FieldNEQ(FieldNAUserName, v))
}

// NAUserNameIn applies the In predicate on the "NAUserName" field.
func NAUserNameIn(vs ...string) predicate.Center {
	return predicate.Center(sql.FieldIn(FieldNAUserName, vs...))
}

// NAUserNameNotIn applies the NotIn predicate on the "NAUserName" field.
func NAUserNameNotIn(vs ...string) predicate.Center {
	return predicate.Center(sql.FieldNotIn(FieldNAUserName, vs...))
}

// NAUserNameGT applies the GT predicate on the "NAUserName" field.
func NAUserNameGT(v string) predicate.Center {
	return predicate.Center(sql.FieldGT(FieldNAUserName, v))
}

// NAUserNameGTE applies the GTE predicate on the "NAUserName" field.
func NAUserNameGTE(v string) predicate.Center {
	return predicate.Center(sql.FieldGTE(FieldNAUserName, v))
}

// NAUserNameLT applies the LT predicate on the "NAUserName" field.
func NAUserNameLT(v string) predicate.Center {
	return predicate.Center(sql.FieldLT(FieldNAUserName, v))
}

// NAUserNameLTE applies the LTE predicate on the "NAUserName" field.
func NAUserNameLTE(v string) predicate.Center {
	return predicate.Center(sql.FieldLTE(FieldNAUserName, v))
}

// NAUserNameContains applies the Contains predicate on the "NAUserName" field.
func NAUserNameContains(v string) predicate.Center {
	return predicate.Center(sql.FieldContains(FieldNAUserName, v))
}

// NAUserNameHasPrefix applies the HasPrefix predicate on the "NAUserName" field.
func NAUserNameHasPrefix(v string) predicate.Center {
	return predicate.Center(sql.FieldHasPrefix(FieldNAUserName, v))
}

// NAUserNameHasSuffix applies the HasSuffix predicate on the "NAUserName" field.
func NAUserNameHasSuffix(v string) predicate.Center {
	return predicate.Center(sql.FieldHasSuffix(FieldNAUserName, v))
}

// NAUserNameIsNil applies the IsNil predicate on the "NAUserName" field.
func NAUserNameIsNil() predicate.Center {
	return predicate.Center(sql.FieldIsNull(FieldNAUserName))
}

// NAUserNameNotNil applies the NotNil predicate on the "NAUserName" field.
func NAUserNameNotNil() predicate.Center {
	return predicate.Center(sql.FieldNotNull(FieldNAUserName))
}

// NAUserNameEqualFold applies the EqualFold predicate on the "NAUserName" field.
func NAUserNameEqualFold(v string) predicate.Center {
	return predicate.Center(sql.FieldEqualFold(FieldNAUserName, v))
}

// NAUserNameContainsFold applies the ContainsFold predicate on the "NAUserName" field.
func NAUserNameContainsFold(v string) predicate.Center {
	return predicate.Center(sql.FieldContainsFold(FieldNAUserName, v))
}

// NodalOfficeFacilityIdEQ applies the EQ predicate on the "NodalOfficeFacilityId" field.
func NodalOfficeFacilityIdEQ(v string) predicate.Center {
	return predicate.Center(sql.FieldEQ(FieldNodalOfficeFacilityId, v))
}

// NodalOfficeFacilityIdNEQ applies the NEQ predicate on the "NodalOfficeFacilityId" field.
func NodalOfficeFacilityIdNEQ(v string) predicate.Center {
	return predicate.Center(sql.FieldNEQ(FieldNodalOfficeFacilityId, v))
}

// NodalOfficeFacilityIdIn applies the In predicate on the "NodalOfficeFacilityId" field.
func NodalOfficeFacilityIdIn(vs ...string) predicate.Center {
	return predicate.Center(sql.FieldIn(FieldNodalOfficeFacilityId, vs...))
}

// NodalOfficeFacilityIdNotIn applies the NotIn predicate on the "NodalOfficeFacilityId" field.
func NodalOfficeFacilityIdNotIn(vs ...string) predicate.Center {
	return predicate.Center(sql.FieldNotIn(FieldNodalOfficeFacilityId, vs...))
}

// NodalOfficeFacilityIdGT applies the GT predicate on the "NodalOfficeFacilityId" field.
func NodalOfficeFacilityIdGT(v string) predicate.Center {
	return predicate.Center(sql.FieldGT(FieldNodalOfficeFacilityId, v))
}

// NodalOfficeFacilityIdGTE applies the GTE predicate on the "NodalOfficeFacilityId" field.
func NodalOfficeFacilityIdGTE(v string) predicate.Center {
	return predicate.Center(sql.FieldGTE(FieldNodalOfficeFacilityId, v))
}

// NodalOfficeFacilityIdLT applies the LT predicate on the "NodalOfficeFacilityId" field.
func NodalOfficeFacilityIdLT(v string) predicate.Center {
	return predicate.Center(sql.FieldLT(FieldNodalOfficeFacilityId, v))
}

// NodalOfficeFacilityIdLTE applies the LTE predicate on the "NodalOfficeFacilityId" field.
func NodalOfficeFacilityIdLTE(v string) predicate.Center {
	return predicate.Center(sql.FieldLTE(FieldNodalOfficeFacilityId, v))
}

// NodalOfficeFacilityIdContains applies the Contains predicate on the "NodalOfficeFacilityId" field.
func NodalOfficeFacilityIdContains(v string) predicate.Center {
	return predicate.Center(sql.FieldContains(FieldNodalOfficeFacilityId, v))
}

// NodalOfficeFacilityIdHasPrefix applies the HasPrefix predicate on the "NodalOfficeFacilityId" field.
func NodalOfficeFacilityIdHasPrefix(v string) predicate.Center {
	return predicate.Center(sql.FieldHasPrefix(FieldNodalOfficeFacilityId, v))
}

// NodalOfficeFacilityIdHasSuffix applies the HasSuffix predicate on the "NodalOfficeFacilityId" field.
func NodalOfficeFacilityIdHasSuffix(v string) predicate.Center {
	return predicate.Center(sql.FieldHasSuffix(FieldNodalOfficeFacilityId, v))
}

// NodalOfficeFacilityIdIsNil applies the IsNil predicate on the "NodalOfficeFacilityId" field.
func NodalOfficeFacilityIdIsNil() predicate.Center {
	return predicate.Center(sql.FieldIsNull(FieldNodalOfficeFacilityId))
}

// NodalOfficeFacilityIdNotNil applies the NotNil predicate on the "NodalOfficeFacilityId" field.
func NodalOfficeFacilityIdNotNil() predicate.Center {
	return predicate.Center(sql.FieldNotNull(FieldNodalOfficeFacilityId))
}

// NodalOfficeFacilityIdEqualFold applies the EqualFold predicate on the "NodalOfficeFacilityId" field.
func NodalOfficeFacilityIdEqualFold(v string) predicate.Center {
	return predicate.Center(sql.FieldEqualFold(FieldNodalOfficeFacilityId, v))
}

// NodalOfficeFacilityIdContainsFold applies the ContainsFold predicate on the "NodalOfficeFacilityId" field.
func NodalOfficeFacilityIdContainsFold(v string) predicate.Center {
	return predicate.Center(sql.FieldContainsFold(FieldNodalOfficeFacilityId, v))
}

// AdminCircleOfficeIDEQ applies the EQ predicate on the "AdminCircleOfficeID" field.
func AdminCircleOfficeIDEQ(v string) predicate.Center {
	return predicate.Center(sql.FieldEQ(FieldAdminCircleOfficeID, v))
}

// AdminCircleOfficeIDNEQ applies the NEQ predicate on the "AdminCircleOfficeID" field.
func AdminCircleOfficeIDNEQ(v string) predicate.Center {
	return predicate.Center(sql.FieldNEQ(FieldAdminCircleOfficeID, v))
}

// AdminCircleOfficeIDIn applies the In predicate on the "AdminCircleOfficeID" field.
func AdminCircleOfficeIDIn(vs ...string) predicate.Center {
	return predicate.Center(sql.FieldIn(FieldAdminCircleOfficeID, vs...))
}

// AdminCircleOfficeIDNotIn applies the NotIn predicate on the "AdminCircleOfficeID" field.
func AdminCircleOfficeIDNotIn(vs ...string) predicate.Center {
	return predicate.Center(sql.FieldNotIn(FieldAdminCircleOfficeID, vs...))
}

// AdminCircleOfficeIDGT applies the GT predicate on the "AdminCircleOfficeID" field.
func AdminCircleOfficeIDGT(v string) predicate.Center {
	return predicate.Center(sql.FieldGT(FieldAdminCircleOfficeID, v))
}

// AdminCircleOfficeIDGTE applies the GTE predicate on the "AdminCircleOfficeID" field.
func AdminCircleOfficeIDGTE(v string) predicate.Center {
	return predicate.Center(sql.FieldGTE(FieldAdminCircleOfficeID, v))
}

// AdminCircleOfficeIDLT applies the LT predicate on the "AdminCircleOfficeID" field.
func AdminCircleOfficeIDLT(v string) predicate.Center {
	return predicate.Center(sql.FieldLT(FieldAdminCircleOfficeID, v))
}

// AdminCircleOfficeIDLTE applies the LTE predicate on the "AdminCircleOfficeID" field.
func AdminCircleOfficeIDLTE(v string) predicate.Center {
	return predicate.Center(sql.FieldLTE(FieldAdminCircleOfficeID, v))
}

// AdminCircleOfficeIDContains applies the Contains predicate on the "AdminCircleOfficeID" field.
func AdminCircleOfficeIDContains(v string) predicate.Center {
	return predicate.Center(sql.FieldContains(FieldAdminCircleOfficeID, v))
}

// AdminCircleOfficeIDHasPrefix applies the HasPrefix predicate on the "AdminCircleOfficeID" field.
func AdminCircleOfficeIDHasPrefix(v string) predicate.Center {
	return predicate.Center(sql.FieldHasPrefix(FieldAdminCircleOfficeID, v))
}

// AdminCircleOfficeIDHasSuffix applies the HasSuffix predicate on the "AdminCircleOfficeID" field.
func AdminCircleOfficeIDHasSuffix(v string) predicate.Center {
	return predicate.Center(sql.FieldHasSuffix(FieldAdminCircleOfficeID, v))
}

// AdminCircleOfficeIDIsNil applies the IsNil predicate on the "AdminCircleOfficeID" field.
func AdminCircleOfficeIDIsNil() predicate.Center {
	return predicate.Center(sql.FieldIsNull(FieldAdminCircleOfficeID))
}

// AdminCircleOfficeIDNotNil applies the NotNil predicate on the "AdminCircleOfficeID" field.
func AdminCircleOfficeIDNotNil() predicate.Center {
	return predicate.Center(sql.FieldNotNull(FieldAdminCircleOfficeID))
}

// AdminCircleOfficeIDEqualFold applies the EqualFold predicate on the "AdminCircleOfficeID" field.
func AdminCircleOfficeIDEqualFold(v string) predicate.Center {
	return predicate.Center(sql.FieldEqualFold(FieldAdminCircleOfficeID, v))
}

// AdminCircleOfficeIDContainsFold applies the ContainsFold predicate on the "AdminCircleOfficeID" field.
func AdminCircleOfficeIDContainsFold(v string) predicate.Center {
	return predicate.Center(sql.FieldContainsFold(FieldAdminCircleOfficeID, v))
}

// AddressEQ applies the EQ predicate on the "Address" field.
func AddressEQ(v string) predicate.Center {
	return predicate.Center(sql.FieldEQ(FieldAddress, v))
}

// AddressNEQ applies the NEQ predicate on the "Address" field.
func AddressNEQ(v string) predicate.Center {
	return predicate.Center(sql.FieldNEQ(FieldAddress, v))
}

// AddressIn applies the In predicate on the "Address" field.
func AddressIn(vs ...string) predicate.Center {
	return predicate.Center(sql.FieldIn(FieldAddress, vs...))
}

// AddressNotIn applies the NotIn predicate on the "Address" field.
func AddressNotIn(vs ...string) predicate.Center {
	return predicate.Center(sql.FieldNotIn(FieldAddress, vs...))
}

// AddressGT applies the GT predicate on the "Address" field.
func AddressGT(v string) predicate.Center {
	return predicate.Center(sql.FieldGT(FieldAddress, v))
}

// AddressGTE applies the GTE predicate on the "Address" field.
func AddressGTE(v string) predicate.Center {
	return predicate.Center(sql.FieldGTE(FieldAddress, v))
}

// AddressLT applies the LT predicate on the "Address" field.
func AddressLT(v string) predicate.Center {
	return predicate.Center(sql.FieldLT(FieldAddress, v))
}

// AddressLTE applies the LTE predicate on the "Address" field.
func AddressLTE(v string) predicate.Center {
	return predicate.Center(sql.FieldLTE(FieldAddress, v))
}

// AddressContains applies the Contains predicate on the "Address" field.
func AddressContains(v string) predicate.Center {
	return predicate.Center(sql.FieldContains(FieldAddress, v))
}

// AddressHasPrefix applies the HasPrefix predicate on the "Address" field.
func AddressHasPrefix(v string) predicate.Center {
	return predicate.Center(sql.FieldHasPrefix(FieldAddress, v))
}

// AddressHasSuffix applies the HasSuffix predicate on the "Address" field.
func AddressHasSuffix(v string) predicate.Center {
	return predicate.Center(sql.FieldHasSuffix(FieldAddress, v))
}

// AddressIsNil applies the IsNil predicate on the "Address" field.
func AddressIsNil() predicate.Center {
	return predicate.Center(sql.FieldIsNull(FieldAddress))
}

// AddressNotNil applies the NotNil predicate on the "Address" field.
func AddressNotNil() predicate.Center {
	return predicate.Center(sql.FieldNotNull(FieldAddress))
}

// AddressEqualFold applies the EqualFold predicate on the "Address" field.
func AddressEqualFold(v string) predicate.Center {
	return predicate.Center(sql.FieldEqualFold(FieldAddress, v))
}

// AddressContainsFold applies the ContainsFold predicate on the "Address" field.
func AddressContainsFold(v string) predicate.Center {
	return predicate.Center(sql.FieldContainsFold(FieldAddress, v))
}

// LandmarkEQ applies the EQ predicate on the "Landmark" field.
func LandmarkEQ(v string) predicate.Center {
	return predicate.Center(sql.FieldEQ(FieldLandmark, v))
}

// LandmarkNEQ applies the NEQ predicate on the "Landmark" field.
func LandmarkNEQ(v string) predicate.Center {
	return predicate.Center(sql.FieldNEQ(FieldLandmark, v))
}

// LandmarkIn applies the In predicate on the "Landmark" field.
func LandmarkIn(vs ...string) predicate.Center {
	return predicate.Center(sql.FieldIn(FieldLandmark, vs...))
}

// LandmarkNotIn applies the NotIn predicate on the "Landmark" field.
func LandmarkNotIn(vs ...string) predicate.Center {
	return predicate.Center(sql.FieldNotIn(FieldLandmark, vs...))
}

// LandmarkGT applies the GT predicate on the "Landmark" field.
func LandmarkGT(v string) predicate.Center {
	return predicate.Center(sql.FieldGT(FieldLandmark, v))
}

// LandmarkGTE applies the GTE predicate on the "Landmark" field.
func LandmarkGTE(v string) predicate.Center {
	return predicate.Center(sql.FieldGTE(FieldLandmark, v))
}

// LandmarkLT applies the LT predicate on the "Landmark" field.
func LandmarkLT(v string) predicate.Center {
	return predicate.Center(sql.FieldLT(FieldLandmark, v))
}

// LandmarkLTE applies the LTE predicate on the "Landmark" field.
func LandmarkLTE(v string) predicate.Center {
	return predicate.Center(sql.FieldLTE(FieldLandmark, v))
}

// LandmarkContains applies the Contains predicate on the "Landmark" field.
func LandmarkContains(v string) predicate.Center {
	return predicate.Center(sql.FieldContains(FieldLandmark, v))
}

// LandmarkHasPrefix applies the HasPrefix predicate on the "Landmark" field.
func LandmarkHasPrefix(v string) predicate.Center {
	return predicate.Center(sql.FieldHasPrefix(FieldLandmark, v))
}

// LandmarkHasSuffix applies the HasSuffix predicate on the "Landmark" field.
func LandmarkHasSuffix(v string) predicate.Center {
	return predicate.Center(sql.FieldHasSuffix(FieldLandmark, v))
}

// LandmarkIsNil applies the IsNil predicate on the "Landmark" field.
func LandmarkIsNil() predicate.Center {
	return predicate.Center(sql.FieldIsNull(FieldLandmark))
}

// LandmarkNotNil applies the NotNil predicate on the "Landmark" field.
func LandmarkNotNil() predicate.Center {
	return predicate.Center(sql.FieldNotNull(FieldLandmark))
}

// LandmarkEqualFold applies the EqualFold predicate on the "Landmark" field.
func LandmarkEqualFold(v string) predicate.Center {
	return predicate.Center(sql.FieldEqualFold(FieldLandmark, v))
}

// LandmarkContainsFold applies the ContainsFold predicate on the "Landmark" field.
func LandmarkContainsFold(v string) predicate.Center {
	return predicate.Center(sql.FieldContainsFold(FieldLandmark, v))
}

// CenterCityNameEQ applies the EQ predicate on the "CenterCityName" field.
func CenterCityNameEQ(v string) predicate.Center {
	return predicate.Center(sql.FieldEQ(FieldCenterCityName, v))
}

// CenterCityNameNEQ applies the NEQ predicate on the "CenterCityName" field.
func CenterCityNameNEQ(v string) predicate.Center {
	return predicate.Center(sql.FieldNEQ(FieldCenterCityName, v))
}

// CenterCityNameIn applies the In predicate on the "CenterCityName" field.
func CenterCityNameIn(vs ...string) predicate.Center {
	return predicate.Center(sql.FieldIn(FieldCenterCityName, vs...))
}

// CenterCityNameNotIn applies the NotIn predicate on the "CenterCityName" field.
func CenterCityNameNotIn(vs ...string) predicate.Center {
	return predicate.Center(sql.FieldNotIn(FieldCenterCityName, vs...))
}

// CenterCityNameGT applies the GT predicate on the "CenterCityName" field.
func CenterCityNameGT(v string) predicate.Center {
	return predicate.Center(sql.FieldGT(FieldCenterCityName, v))
}

// CenterCityNameGTE applies the GTE predicate on the "CenterCityName" field.
func CenterCityNameGTE(v string) predicate.Center {
	return predicate.Center(sql.FieldGTE(FieldCenterCityName, v))
}

// CenterCityNameLT applies the LT predicate on the "CenterCityName" field.
func CenterCityNameLT(v string) predicate.Center {
	return predicate.Center(sql.FieldLT(FieldCenterCityName, v))
}

// CenterCityNameLTE applies the LTE predicate on the "CenterCityName" field.
func CenterCityNameLTE(v string) predicate.Center {
	return predicate.Center(sql.FieldLTE(FieldCenterCityName, v))
}

// CenterCityNameContains applies the Contains predicate on the "CenterCityName" field.
func CenterCityNameContains(v string) predicate.Center {
	return predicate.Center(sql.FieldContains(FieldCenterCityName, v))
}

// CenterCityNameHasPrefix applies the HasPrefix predicate on the "CenterCityName" field.
func CenterCityNameHasPrefix(v string) predicate.Center {
	return predicate.Center(sql.FieldHasPrefix(FieldCenterCityName, v))
}

// CenterCityNameHasSuffix applies the HasSuffix predicate on the "CenterCityName" field.
func CenterCityNameHasSuffix(v string) predicate.Center {
	return predicate.Center(sql.FieldHasSuffix(FieldCenterCityName, v))
}

// CenterCityNameIsNil applies the IsNil predicate on the "CenterCityName" field.
func CenterCityNameIsNil() predicate.Center {
	return predicate.Center(sql.FieldIsNull(FieldCenterCityName))
}

// CenterCityNameNotNil applies the NotNil predicate on the "CenterCityName" field.
func CenterCityNameNotNil() predicate.Center {
	return predicate.Center(sql.FieldNotNull(FieldCenterCityName))
}

// CenterCityNameEqualFold applies the EqualFold predicate on the "CenterCityName" field.
func CenterCityNameEqualFold(v string) predicate.Center {
	return predicate.Center(sql.FieldEqualFold(FieldCenterCityName, v))
}

// CenterCityNameContainsFold applies the ContainsFold predicate on the "CenterCityName" field.
func CenterCityNameContainsFold(v string) predicate.Center {
	return predicate.Center(sql.FieldContainsFold(FieldCenterCityName, v))
}

// PincodeEQ applies the EQ predicate on the "Pincode" field.
func PincodeEQ(v int32) predicate.Center {
	return predicate.Center(sql.FieldEQ(FieldPincode, v))
}

// PincodeNEQ applies the NEQ predicate on the "Pincode" field.
func PincodeNEQ(v int32) predicate.Center {
	return predicate.Center(sql.FieldNEQ(FieldPincode, v))
}

// PincodeIn applies the In predicate on the "Pincode" field.
func PincodeIn(vs ...int32) predicate.Center {
	return predicate.Center(sql.FieldIn(FieldPincode, vs...))
}

// PincodeNotIn applies the NotIn predicate on the "Pincode" field.
func PincodeNotIn(vs ...int32) predicate.Center {
	return predicate.Center(sql.FieldNotIn(FieldPincode, vs...))
}

// PincodeGT applies the GT predicate on the "Pincode" field.
func PincodeGT(v int32) predicate.Center {
	return predicate.Center(sql.FieldGT(FieldPincode, v))
}

// PincodeGTE applies the GTE predicate on the "Pincode" field.
func PincodeGTE(v int32) predicate.Center {
	return predicate.Center(sql.FieldGTE(FieldPincode, v))
}

// PincodeLT applies the LT predicate on the "Pincode" field.
func PincodeLT(v int32) predicate.Center {
	return predicate.Center(sql.FieldLT(FieldPincode, v))
}

// PincodeLTE applies the LTE predicate on the "Pincode" field.
func PincodeLTE(v int32) predicate.Center {
	return predicate.Center(sql.FieldLTE(FieldPincode, v))
}

// PincodeIsNil applies the IsNil predicate on the "Pincode" field.
func PincodeIsNil() predicate.Center {
	return predicate.Center(sql.FieldIsNull(FieldPincode))
}

// PincodeNotNil applies the NotNil predicate on the "Pincode" field.
func PincodeNotNil() predicate.Center {
	return predicate.Center(sql.FieldNotNull(FieldPincode))
}

// MaxSeatsEQ applies the EQ predicate on the "MaxSeats" field.
func MaxSeatsEQ(v int32) predicate.Center {
	return predicate.Center(sql.FieldEQ(FieldMaxSeats, v))
}

// MaxSeatsNEQ applies the NEQ predicate on the "MaxSeats" field.
func MaxSeatsNEQ(v int32) predicate.Center {
	return predicate.Center(sql.FieldNEQ(FieldMaxSeats, v))
}

// MaxSeatsIn applies the In predicate on the "MaxSeats" field.
func MaxSeatsIn(vs ...int32) predicate.Center {
	return predicate.Center(sql.FieldIn(FieldMaxSeats, vs...))
}

// MaxSeatsNotIn applies the NotIn predicate on the "MaxSeats" field.
func MaxSeatsNotIn(vs ...int32) predicate.Center {
	return predicate.Center(sql.FieldNotIn(FieldMaxSeats, vs...))
}

// MaxSeatsGT applies the GT predicate on the "MaxSeats" field.
func MaxSeatsGT(v int32) predicate.Center {
	return predicate.Center(sql.FieldGT(FieldMaxSeats, v))
}

// MaxSeatsGTE applies the GTE predicate on the "MaxSeats" field.
func MaxSeatsGTE(v int32) predicate.Center {
	return predicate.Center(sql.FieldGTE(FieldMaxSeats, v))
}

// MaxSeatsLT applies the LT predicate on the "MaxSeats" field.
func MaxSeatsLT(v int32) predicate.Center {
	return predicate.Center(sql.FieldLT(FieldMaxSeats, v))
}

// MaxSeatsLTE applies the LTE predicate on the "MaxSeats" field.
func MaxSeatsLTE(v int32) predicate.Center {
	return predicate.Center(sql.FieldLTE(FieldMaxSeats, v))
}

// MaxSeatsIsNil applies the IsNil predicate on the "MaxSeats" field.
func MaxSeatsIsNil() predicate.Center {
	return predicate.Center(sql.FieldIsNull(FieldMaxSeats))
}

// MaxSeatsNotNil applies the NotNil predicate on the "MaxSeats" field.
func MaxSeatsNotNil() predicate.Center {
	return predicate.Center(sql.FieldNotNull(FieldMaxSeats))
}

// NoAllotedEQ applies the EQ predicate on the "NoAlloted" field.
func NoAllotedEQ(v int32) predicate.Center {
	return predicate.Center(sql.FieldEQ(FieldNoAlloted, v))
}

// NoAllotedNEQ applies the NEQ predicate on the "NoAlloted" field.
func NoAllotedNEQ(v int32) predicate.Center {
	return predicate.Center(sql.FieldNEQ(FieldNoAlloted, v))
}

// NoAllotedIn applies the In predicate on the "NoAlloted" field.
func NoAllotedIn(vs ...int32) predicate.Center {
	return predicate.Center(sql.FieldIn(FieldNoAlloted, vs...))
}

// NoAllotedNotIn applies the NotIn predicate on the "NoAlloted" field.
func NoAllotedNotIn(vs ...int32) predicate.Center {
	return predicate.Center(sql.FieldNotIn(FieldNoAlloted, vs...))
}

// NoAllotedGT applies the GT predicate on the "NoAlloted" field.
func NoAllotedGT(v int32) predicate.Center {
	return predicate.Center(sql.FieldGT(FieldNoAlloted, v))
}

// NoAllotedGTE applies the GTE predicate on the "NoAlloted" field.
func NoAllotedGTE(v int32) predicate.Center {
	return predicate.Center(sql.FieldGTE(FieldNoAlloted, v))
}

// NoAllotedLT applies the LT predicate on the "NoAlloted" field.
func NoAllotedLT(v int32) predicate.Center {
	return predicate.Center(sql.FieldLT(FieldNoAlloted, v))
}

// NoAllotedLTE applies the LTE predicate on the "NoAlloted" field.
func NoAllotedLTE(v int32) predicate.Center {
	return predicate.Center(sql.FieldLTE(FieldNoAlloted, v))
}

// NoAllotedIsNil applies the IsNil predicate on the "NoAlloted" field.
func NoAllotedIsNil() predicate.Center {
	return predicate.Center(sql.FieldIsNull(FieldNoAlloted))
}

// NoAllotedNotNil applies the NotNil predicate on the "NoAlloted" field.
func NoAllotedNotNil() predicate.Center {
	return predicate.Center(sql.FieldNotNull(FieldNoAlloted))
}

// PendingSeatsEQ applies the EQ predicate on the "PendingSeats" field.
func PendingSeatsEQ(v int32) predicate.Center {
	return predicate.Center(sql.FieldEQ(FieldPendingSeats, v))
}

// PendingSeatsNEQ applies the NEQ predicate on the "PendingSeats" field.
func PendingSeatsNEQ(v int32) predicate.Center {
	return predicate.Center(sql.FieldNEQ(FieldPendingSeats, v))
}

// PendingSeatsIn applies the In predicate on the "PendingSeats" field.
func PendingSeatsIn(vs ...int32) predicate.Center {
	return predicate.Center(sql.FieldIn(FieldPendingSeats, vs...))
}

// PendingSeatsNotIn applies the NotIn predicate on the "PendingSeats" field.
func PendingSeatsNotIn(vs ...int32) predicate.Center {
	return predicate.Center(sql.FieldNotIn(FieldPendingSeats, vs...))
}

// PendingSeatsGT applies the GT predicate on the "PendingSeats" field.
func PendingSeatsGT(v int32) predicate.Center {
	return predicate.Center(sql.FieldGT(FieldPendingSeats, v))
}

// PendingSeatsGTE applies the GTE predicate on the "PendingSeats" field.
func PendingSeatsGTE(v int32) predicate.Center {
	return predicate.Center(sql.FieldGTE(FieldPendingSeats, v))
}

// PendingSeatsLT applies the LT predicate on the "PendingSeats" field.
func PendingSeatsLT(v int32) predicate.Center {
	return predicate.Center(sql.FieldLT(FieldPendingSeats, v))
}

// PendingSeatsLTE applies the LTE predicate on the "PendingSeats" field.
func PendingSeatsLTE(v int32) predicate.Center {
	return predicate.Center(sql.FieldLTE(FieldPendingSeats, v))
}

// PendingSeatsIsNil applies the IsNil predicate on the "PendingSeats" field.
func PendingSeatsIsNil() predicate.Center {
	return predicate.Center(sql.FieldIsNull(FieldPendingSeats))
}

// PendingSeatsNotNil applies the NotNil predicate on the "PendingSeats" field.
func PendingSeatsNotNil() predicate.Center {
	return predicate.Center(sql.FieldNotNull(FieldPendingSeats))
}

// StatusEQ applies the EQ predicate on the "Status" field.
func StatusEQ(v bool) predicate.Center {
	return predicate.Center(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "Status" field.
func StatusNEQ(v bool) predicate.Center {
	return predicate.Center(sql.FieldNEQ(FieldStatus, v))
}

// StatusIsNil applies the IsNil predicate on the "Status" field.
func StatusIsNil() predicate.Center {
	return predicate.Center(sql.FieldIsNull(FieldStatus))
}

// StatusNotNil applies the NotNil predicate on the "Status" field.
func StatusNotNil() predicate.Center {
	return predicate.Center(sql.FieldNotNull(FieldStatus))
}

// ExamYearEQ applies the EQ predicate on the "ExamYear" field.
func ExamYearEQ(v string) predicate.Center {
	return predicate.Center(sql.FieldEQ(FieldExamYear, v))
}

// ExamYearNEQ applies the NEQ predicate on the "ExamYear" field.
func ExamYearNEQ(v string) predicate.Center {
	return predicate.Center(sql.FieldNEQ(FieldExamYear, v))
}

// ExamYearIn applies the In predicate on the "ExamYear" field.
func ExamYearIn(vs ...string) predicate.Center {
	return predicate.Center(sql.FieldIn(FieldExamYear, vs...))
}

// ExamYearNotIn applies the NotIn predicate on the "ExamYear" field.
func ExamYearNotIn(vs ...string) predicate.Center {
	return predicate.Center(sql.FieldNotIn(FieldExamYear, vs...))
}

// ExamYearGT applies the GT predicate on the "ExamYear" field.
func ExamYearGT(v string) predicate.Center {
	return predicate.Center(sql.FieldGT(FieldExamYear, v))
}

// ExamYearGTE applies the GTE predicate on the "ExamYear" field.
func ExamYearGTE(v string) predicate.Center {
	return predicate.Center(sql.FieldGTE(FieldExamYear, v))
}

// ExamYearLT applies the LT predicate on the "ExamYear" field.
func ExamYearLT(v string) predicate.Center {
	return predicate.Center(sql.FieldLT(FieldExamYear, v))
}

// ExamYearLTE applies the LTE predicate on the "ExamYear" field.
func ExamYearLTE(v string) predicate.Center {
	return predicate.Center(sql.FieldLTE(FieldExamYear, v))
}

// ExamYearContains applies the Contains predicate on the "ExamYear" field.
func ExamYearContains(v string) predicate.Center {
	return predicate.Center(sql.FieldContains(FieldExamYear, v))
}

// ExamYearHasPrefix applies the HasPrefix predicate on the "ExamYear" field.
func ExamYearHasPrefix(v string) predicate.Center {
	return predicate.Center(sql.FieldHasPrefix(FieldExamYear, v))
}

// ExamYearHasSuffix applies the HasSuffix predicate on the "ExamYear" field.
func ExamYearHasSuffix(v string) predicate.Center {
	return predicate.Center(sql.FieldHasSuffix(FieldExamYear, v))
}

// ExamYearIsNil applies the IsNil predicate on the "ExamYear" field.
func ExamYearIsNil() predicate.Center {
	return predicate.Center(sql.FieldIsNull(FieldExamYear))
}

// ExamYearNotNil applies the NotNil predicate on the "ExamYear" field.
func ExamYearNotNil() predicate.Center {
	return predicate.Center(sql.FieldNotNull(FieldExamYear))
}

// ExamYearEqualFold applies the EqualFold predicate on the "ExamYear" field.
func ExamYearEqualFold(v string) predicate.Center {
	return predicate.Center(sql.FieldEqualFold(FieldExamYear, v))
}

// ExamYearContainsFold applies the ContainsFold predicate on the "ExamYear" field.
func ExamYearContainsFold(v string) predicate.Center {
	return predicate.Center(sql.FieldContainsFold(FieldExamYear, v))
}

// ConductedByEQ applies the EQ predicate on the "ConductedBy" field.
func ConductedByEQ(v string) predicate.Center {
	return predicate.Center(sql.FieldEQ(FieldConductedBy, v))
}

// ConductedByNEQ applies the NEQ predicate on the "ConductedBy" field.
func ConductedByNEQ(v string) predicate.Center {
	return predicate.Center(sql.FieldNEQ(FieldConductedBy, v))
}

// ConductedByIn applies the In predicate on the "ConductedBy" field.
func ConductedByIn(vs ...string) predicate.Center {
	return predicate.Center(sql.FieldIn(FieldConductedBy, vs...))
}

// ConductedByNotIn applies the NotIn predicate on the "ConductedBy" field.
func ConductedByNotIn(vs ...string) predicate.Center {
	return predicate.Center(sql.FieldNotIn(FieldConductedBy, vs...))
}

// ConductedByGT applies the GT predicate on the "ConductedBy" field.
func ConductedByGT(v string) predicate.Center {
	return predicate.Center(sql.FieldGT(FieldConductedBy, v))
}

// ConductedByGTE applies the GTE predicate on the "ConductedBy" field.
func ConductedByGTE(v string) predicate.Center {
	return predicate.Center(sql.FieldGTE(FieldConductedBy, v))
}

// ConductedByLT applies the LT predicate on the "ConductedBy" field.
func ConductedByLT(v string) predicate.Center {
	return predicate.Center(sql.FieldLT(FieldConductedBy, v))
}

// ConductedByLTE applies the LTE predicate on the "ConductedBy" field.
func ConductedByLTE(v string) predicate.Center {
	return predicate.Center(sql.FieldLTE(FieldConductedBy, v))
}

// ConductedByContains applies the Contains predicate on the "ConductedBy" field.
func ConductedByContains(v string) predicate.Center {
	return predicate.Center(sql.FieldContains(FieldConductedBy, v))
}

// ConductedByHasPrefix applies the HasPrefix predicate on the "ConductedBy" field.
func ConductedByHasPrefix(v string) predicate.Center {
	return predicate.Center(sql.FieldHasPrefix(FieldConductedBy, v))
}

// ConductedByHasSuffix applies the HasSuffix predicate on the "ConductedBy" field.
func ConductedByHasSuffix(v string) predicate.Center {
	return predicate.Center(sql.FieldHasSuffix(FieldConductedBy, v))
}

// ConductedByIsNil applies the IsNil predicate on the "ConductedBy" field.
func ConductedByIsNil() predicate.Center {
	return predicate.Center(sql.FieldIsNull(FieldConductedBy))
}

// ConductedByNotNil applies the NotNil predicate on the "ConductedBy" field.
func ConductedByNotNil() predicate.Center {
	return predicate.Center(sql.FieldNotNull(FieldConductedBy))
}

// ConductedByEqualFold applies the EqualFold predicate on the "ConductedBy" field.
func ConductedByEqualFold(v string) predicate.Center {
	return predicate.Center(sql.FieldEqualFold(FieldConductedBy, v))
}

// ConductedByContainsFold applies the ContainsFold predicate on the "ConductedBy" field.
func ConductedByContainsFold(v string) predicate.Center {
	return predicate.Center(sql.FieldContainsFold(FieldConductedBy, v))
}

// ConductedByFacilityIDEQ applies the EQ predicate on the "ConductedByFacilityID" field.
func ConductedByFacilityIDEQ(v string) predicate.Center {
	return predicate.Center(sql.FieldEQ(FieldConductedByFacilityID, v))
}

// ConductedByFacilityIDNEQ applies the NEQ predicate on the "ConductedByFacilityID" field.
func ConductedByFacilityIDNEQ(v string) predicate.Center {
	return predicate.Center(sql.FieldNEQ(FieldConductedByFacilityID, v))
}

// ConductedByFacilityIDIn applies the In predicate on the "ConductedByFacilityID" field.
func ConductedByFacilityIDIn(vs ...string) predicate.Center {
	return predicate.Center(sql.FieldIn(FieldConductedByFacilityID, vs...))
}

// ConductedByFacilityIDNotIn applies the NotIn predicate on the "ConductedByFacilityID" field.
func ConductedByFacilityIDNotIn(vs ...string) predicate.Center {
	return predicate.Center(sql.FieldNotIn(FieldConductedByFacilityID, vs...))
}

// ConductedByFacilityIDGT applies the GT predicate on the "ConductedByFacilityID" field.
func ConductedByFacilityIDGT(v string) predicate.Center {
	return predicate.Center(sql.FieldGT(FieldConductedByFacilityID, v))
}

// ConductedByFacilityIDGTE applies the GTE predicate on the "ConductedByFacilityID" field.
func ConductedByFacilityIDGTE(v string) predicate.Center {
	return predicate.Center(sql.FieldGTE(FieldConductedByFacilityID, v))
}

// ConductedByFacilityIDLT applies the LT predicate on the "ConductedByFacilityID" field.
func ConductedByFacilityIDLT(v string) predicate.Center {
	return predicate.Center(sql.FieldLT(FieldConductedByFacilityID, v))
}

// ConductedByFacilityIDLTE applies the LTE predicate on the "ConductedByFacilityID" field.
func ConductedByFacilityIDLTE(v string) predicate.Center {
	return predicate.Center(sql.FieldLTE(FieldConductedByFacilityID, v))
}

// ConductedByFacilityIDContains applies the Contains predicate on the "ConductedByFacilityID" field.
func ConductedByFacilityIDContains(v string) predicate.Center {
	return predicate.Center(sql.FieldContains(FieldConductedByFacilityID, v))
}

// ConductedByFacilityIDHasPrefix applies the HasPrefix predicate on the "ConductedByFacilityID" field.
func ConductedByFacilityIDHasPrefix(v string) predicate.Center {
	return predicate.Center(sql.FieldHasPrefix(FieldConductedByFacilityID, v))
}

// ConductedByFacilityIDHasSuffix applies the HasSuffix predicate on the "ConductedByFacilityID" field.
func ConductedByFacilityIDHasSuffix(v string) predicate.Center {
	return predicate.Center(sql.FieldHasSuffix(FieldConductedByFacilityID, v))
}

// ConductedByFacilityIDIsNil applies the IsNil predicate on the "ConductedByFacilityID" field.
func ConductedByFacilityIDIsNil() predicate.Center {
	return predicate.Center(sql.FieldIsNull(FieldConductedByFacilityID))
}

// ConductedByFacilityIDNotNil applies the NotNil predicate on the "ConductedByFacilityID" field.
func ConductedByFacilityIDNotNil() predicate.Center {
	return predicate.Center(sql.FieldNotNull(FieldConductedByFacilityID))
}

// ConductedByFacilityIDEqualFold applies the EqualFold predicate on the "ConductedByFacilityID" field.
func ConductedByFacilityIDEqualFold(v string) predicate.Center {
	return predicate.Center(sql.FieldEqualFold(FieldConductedByFacilityID, v))
}

// ConductedByFacilityIDContainsFold applies the ContainsFold predicate on the "ConductedByFacilityID" field.
func ConductedByFacilityIDContainsFold(v string) predicate.Center {
	return predicate.Center(sql.FieldContainsFold(FieldConductedByFacilityID, v))
}

// UpdatedAtEQ applies the EQ predicate on the "UpdatedAt" field.
func UpdatedAtEQ(v time.Time) predicate.Center {
	return predicate.Center(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "UpdatedAt" field.
func UpdatedAtNEQ(v time.Time) predicate.Center {
	return predicate.Center(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "UpdatedAt" field.
func UpdatedAtIn(vs ...time.Time) predicate.Center {
	return predicate.Center(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "UpdatedAt" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Center {
	return predicate.Center(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "UpdatedAt" field.
func UpdatedAtGT(v time.Time) predicate.Center {
	return predicate.Center(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "UpdatedAt" field.
func UpdatedAtGTE(v time.Time) predicate.Center {
	return predicate.Center(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "UpdatedAt" field.
func UpdatedAtLT(v time.Time) predicate.Center {
	return predicate.Center(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "UpdatedAt" field.
func UpdatedAtLTE(v time.Time) predicate.Center {
	return predicate.Center(sql.FieldLTE(FieldUpdatedAt, v))
}

// UpdatedAtIsNil applies the IsNil predicate on the "UpdatedAt" field.
func UpdatedAtIsNil() predicate.Center {
	return predicate.Center(sql.FieldIsNull(FieldUpdatedAt))
}

// UpdatedAtNotNil applies the NotNil predicate on the "UpdatedAt" field.
func UpdatedAtNotNil() predicate.Center {
	return predicate.Center(sql.FieldNotNull(FieldUpdatedAt))
}

// UpdatedByEQ applies the EQ predicate on the "UpdatedBy" field.
func UpdatedByEQ(v string) predicate.Center {
	return predicate.Center(sql.FieldEQ(FieldUpdatedBy, v))
}

// UpdatedByNEQ applies the NEQ predicate on the "UpdatedBy" field.
func UpdatedByNEQ(v string) predicate.Center {
	return predicate.Center(sql.FieldNEQ(FieldUpdatedBy, v))
}

// UpdatedByIn applies the In predicate on the "UpdatedBy" field.
func UpdatedByIn(vs ...string) predicate.Center {
	return predicate.Center(sql.FieldIn(FieldUpdatedBy, vs...))
}

// UpdatedByNotIn applies the NotIn predicate on the "UpdatedBy" field.
func UpdatedByNotIn(vs ...string) predicate.Center {
	return predicate.Center(sql.FieldNotIn(FieldUpdatedBy, vs...))
}

// UpdatedByGT applies the GT predicate on the "UpdatedBy" field.
func UpdatedByGT(v string) predicate.Center {
	return predicate.Center(sql.FieldGT(FieldUpdatedBy, v))
}

// UpdatedByGTE applies the GTE predicate on the "UpdatedBy" field.
func UpdatedByGTE(v string) predicate.Center {
	return predicate.Center(sql.FieldGTE(FieldUpdatedBy, v))
}

// UpdatedByLT applies the LT predicate on the "UpdatedBy" field.
func UpdatedByLT(v string) predicate.Center {
	return predicate.Center(sql.FieldLT(FieldUpdatedBy, v))
}

// UpdatedByLTE applies the LTE predicate on the "UpdatedBy" field.
func UpdatedByLTE(v string) predicate.Center {
	return predicate.Center(sql.FieldLTE(FieldUpdatedBy, v))
}

// UpdatedByContains applies the Contains predicate on the "UpdatedBy" field.
func UpdatedByContains(v string) predicate.Center {
	return predicate.Center(sql.FieldContains(FieldUpdatedBy, v))
}

// UpdatedByHasPrefix applies the HasPrefix predicate on the "UpdatedBy" field.
func UpdatedByHasPrefix(v string) predicate.Center {
	return predicate.Center(sql.FieldHasPrefix(FieldUpdatedBy, v))
}

// UpdatedByHasSuffix applies the HasSuffix predicate on the "UpdatedBy" field.
func UpdatedByHasSuffix(v string) predicate.Center {
	return predicate.Center(sql.FieldHasSuffix(FieldUpdatedBy, v))
}

// UpdatedByIsNil applies the IsNil predicate on the "UpdatedBy" field.
func UpdatedByIsNil() predicate.Center {
	return predicate.Center(sql.FieldIsNull(FieldUpdatedBy))
}

// UpdatedByNotNil applies the NotNil predicate on the "UpdatedBy" field.
func UpdatedByNotNil() predicate.Center {
	return predicate.Center(sql.FieldNotNull(FieldUpdatedBy))
}

// UpdatedByEqualFold applies the EqualFold predicate on the "UpdatedBy" field.
func UpdatedByEqualFold(v string) predicate.Center {
	return predicate.Center(sql.FieldEqualFold(FieldUpdatedBy, v))
}

// UpdatedByContainsFold applies the ContainsFold predicate on the "UpdatedBy" field.
func UpdatedByContainsFold(v string) predicate.Center {
	return predicate.Center(sql.FieldContainsFold(FieldUpdatedBy, v))
}

// PapersIsNil applies the IsNil predicate on the "Papers" field.
func PapersIsNil() predicate.Center {
	return predicate.Center(sql.FieldIsNull(FieldPapers))
}

// PapersNotNil applies the NotNil predicate on the "Papers" field.
func PapersNotNil() predicate.Center {
	return predicate.Center(sql.FieldNotNull(FieldPapers))
}

// HasApplications applies the HasEdge predicate on the "applications" edge.
func HasApplications() predicate.Center {
	return predicate.Center(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ApplicationsTable, ApplicationsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasApplicationsWith applies the HasEdge predicate on the "applications" edge with a given conditions (other predicates).
func HasApplicationsWith(preds ...predicate.Application) predicate.Center {
	return predicate.Center(func(s *sql.Selector) {
		step := newApplicationsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasExamCentresRef applies the HasEdge predicate on the "ExamCentresRef" edge.
func HasExamCentresRef() predicate.Center {
	return predicate.Center(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ExamCentresRefTable, ExamCentresRefColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasExamCentresRefWith applies the HasEdge predicate on the "ExamCentresRef" edge with a given conditions (other predicates).
func HasExamCentresRefWith(preds ...predicate.Exam_Applications_IP) predicate.Center {
	return predicate.Center(func(s *sql.Selector) {
		step := newExamCentresRefStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasExamCentresRefPS applies the HasEdge predicate on the "ExamCentresRefPS" edge.
func HasExamCentresRefPS() predicate.Center {
	return predicate.Center(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ExamCentresRefPSTable, ExamCentresRefPSColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasExamCentresRefPSWith applies the HasEdge predicate on the "ExamCentresRefPS" edge with a given conditions (other predicates).
func HasExamCentresRefPSWith(preds ...predicate.Exam_Applications_PS) predicate.Center {
	return predicate.Center(func(s *sql.Selector) {
		step := newExamCentresRefPSStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasExamCentresRefGDSPA applies the HasEdge predicate on the "ExamCentresRefGDSPA" edge.
func HasExamCentresRefGDSPA() predicate.Center {
	return predicate.Center(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ExamCentresRefGDSPATable, ExamCentresRefGDSPAColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasExamCentresRefGDSPAWith applies the HasEdge predicate on the "ExamCentresRefGDSPA" edge with a given conditions (other predicates).
func HasExamCentresRefGDSPAWith(preds ...predicate.Exam_Applications_GDSPA) predicate.Center {
	return predicate.Center(func(s *sql.Selector) {
		step := newExamCentresRefGDSPAStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasExamCentresRefPMPA applies the HasEdge predicate on the "ExamCentresRefPMPA" edge.
func HasExamCentresRefPMPA() predicate.Center {
	return predicate.Center(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ExamCentresRefPMPATable, ExamCentresRefPMPAColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasExamCentresRefPMPAWith applies the HasEdge predicate on the "ExamCentresRefPMPA" edge with a given conditions (other predicates).
func HasExamCentresRefPMPAWith(preds ...predicate.Exam_Applications_PMPA) predicate.Center {
	return predicate.Center(func(s *sql.Selector) {
		step := newExamCentresRefPMPAStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasExamCentresRefGDSPM applies the HasEdge predicate on the "ExamCentresRefGDSPM" edge.
func HasExamCentresRefGDSPM() predicate.Center {
	return predicate.Center(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ExamCentresRefGDSPMTable, ExamCentresRefGDSPMColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasExamCentresRefGDSPMWith applies the HasEdge predicate on the "ExamCentresRefGDSPM" edge with a given conditions (other predicates).
func HasExamCentresRefGDSPMWith(preds ...predicate.Exam_Applications_GDSPM) predicate.Center {
	return predicate.Center(func(s *sql.Selector) {
		step := newExamCentresRefGDSPMStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasExamscentres applies the HasEdge predicate on the "Examscentres" edge.
func HasExamscentres() predicate.Center {
	return predicate.Center(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ExamscentresTable, ExamscentresColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasExamscentresWith applies the HasEdge predicate on the "Examscentres" edge with a given conditions (other predicates).
func HasExamscentresWith(preds ...predicate.ExamCityCenter) predicate.Center {
	return predicate.Center(func(s *sql.Selector) {
		step := newExamscentresStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasExamCentresRefMTSPMMG applies the HasEdge predicate on the "ExamCentresRefMTSPMMG" edge.
func HasExamCentresRefMTSPMMG() predicate.Center {
	return predicate.Center(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ExamCentresRefMTSPMMGTable, ExamCentresRefMTSPMMGColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasExamCentresRefMTSPMMGWith applies the HasEdge predicate on the "ExamCentresRefMTSPMMG" edge with a given conditions (other predicates).
func HasExamCentresRefMTSPMMGWith(preds ...predicate.Exam_Application_MTSPMMG) predicate.Center {
	return predicate.Center(func(s *sql.Selector) {
		step := newExamCentresRefMTSPMMGStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasExaCenterHallRef applies the HasEdge predicate on the "ExaCenterHallRef" edge.
func HasExaCenterHallRef() predicate.Center {
	return predicate.Center(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ExaCenterHallRefTable, ExaCenterHallRefColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasExaCenterHallRefWith applies the HasEdge predicate on the "ExaCenterHallRef" edge with a given conditions (other predicates).
func HasExaCenterHallRefWith(preds ...predicate.ExamCenterHall) predicate.Center {
	return predicate.Center(func(s *sql.Selector) {
		step := newExaCenterHallRefStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCentresip applies the HasEdge predicate on the "centresip" edge.
func HasCentresip() predicate.Center {
	return predicate.Center(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CentresipTable, CentresipColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCentresipWith applies the HasEdge predicate on the "centresip" edge with a given conditions (other predicates).
func HasCentresipWith(preds ...predicate.Exam) predicate.Center {
	return predicate.Center(func(s *sql.Selector) {
		step := newCentresipStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasLogData applies the HasEdge predicate on the "LogData" edge.
func HasLogData() predicate.Center {
	return predicate.Center(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, LogDataTable, LogDataColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasLogDataWith applies the HasEdge predicate on the "LogData" edge with a given conditions (other predicates).
func HasLogDataWith(preds ...predicate.Logs) predicate.Center {
	return predicate.Center(func(s *sql.Selector) {
		step := newLogDataStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Center) predicate.Center {
	return predicate.Center(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Center) predicate.Center {
	return predicate.Center(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Center) predicate.Center {
	return predicate.Center(func(s *sql.Selector) {
		p(s.Not())
	})
}
