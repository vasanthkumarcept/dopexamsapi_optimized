// Code generated by ent, DO NOT EDIT.

package exam

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the exam type in the database.
	Label = "exam"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "UniqueID"
	// FieldExamType holds the string denoting the examtype field in the database.
	FieldExamType = "exam_type"
	// FieldExamName holds the string denoting the examname field in the database.
	FieldExamName = "exam_name"
	// FieldExamShortName holds the string denoting the examshortname field in the database.
	FieldExamShortName = "exam_short_name"
	// FieldSmsExamShortName holds the string denoting the smsexamshortname field in the database.
	FieldSmsExamShortName = "sms_exam_short_name"
	// FieldExamCode holds the string denoting the examcode field in the database.
	FieldExamCode = "exam_code"
	// FieldCalenderIssuedBy holds the string denoting the calenderissuedby field in the database.
	FieldCalenderIssuedBy = "calender_issued_by"
	// FieldNotificationBy holds the string denoting the notificationby field in the database.
	FieldNotificationBy = "notification_by"
	// FieldConductedBy holds the string denoting the conductedby field in the database.
	FieldConductedBy = "conducted_by"
	// FieldNodalOfficerLevel holds the string denoting the nodalofficerlevel field in the database.
	FieldNodalOfficerLevel = "nodal_officer_level"
	// FieldTentativeNotificationMandatoryDate holds the string denoting the tentativenotificationmandatorydate field in the database.
	FieldTentativeNotificationMandatoryDate = "tentative_notification_mandatory_date"
	// FieldLocalLanguage holds the string denoting the locallanguage field in the database.
	FieldLocalLanguage = "local_language"
	// FieldOptionForPost holds the string denoting the optionforpost field in the database.
	FieldOptionForPost = "option_for_post"
	// FieldOptionToWriteExamOtherThanParent holds the string denoting the optiontowriteexamotherthanparent field in the database.
	FieldOptionToWriteExamOtherThanParent = "option_to_write_exam_other_than_parent"
	// FieldTableName holds the string denoting the tablename field in the database.
	FieldTableName = "table_name"
	// FieldOrderNumber holds the string denoting the ordernumber field in the database.
	FieldOrderNumber = "order_number"
	// FieldCreatedById holds the string denoting the createdbyid field in the database.
	FieldCreatedById = "created_by_id"
	// FieldCreatedByUserName holds the string denoting the createdbyusername field in the database.
	FieldCreatedByUserName = "created_by_user_name"
	// FieldCreatedByEmpId holds the string denoting the createdbyempid field in the database.
	FieldCreatedByEmpId = "created_by_emp_id"
	// FieldCreatedByDesignation holds the string denoting the createdbydesignation field in the database.
	FieldCreatedByDesignation = "created_by_designation"
	// FieldCreatedDate holds the string denoting the createddate field in the database.
	FieldCreatedDate = "created_date"
	// FieldVerifiedbyid holds the string denoting the verifiedbyid field in the database.
	FieldVerifiedbyid = "verifiedbyid"
	// FieldVerifiedbyusername holds the string denoting the verifiedbyusername field in the database.
	FieldVerifiedbyusername = "verifiedbyusername"
	// FieldVerifiedbyEmployeeid holds the string denoting the verifiedbyemployeeid field in the database.
	FieldVerifiedbyEmployeeid = "verifiedby_employeeid"
	// FieldVerifiedbyDesignation holds the string denoting the verifiedbydesignation field in the database.
	FieldVerifiedbyDesignation = "verifiedby_designation"
	// FieldVerifiedDate holds the string denoting the verifieddate field in the database.
	FieldVerifiedDate = "verified_date"
	// FieldStatuss holds the string denoting the statuss field in the database.
	FieldStatuss = "statuss"
	// FieldDeletedbyid holds the string denoting the deletedbyid field in the database.
	FieldDeletedbyid = "deletedbyid"
	// FieldDeletedbyusername holds the string denoting the deletedbyusername field in the database.
	FieldDeletedbyusername = "deletedbyusername"
	// FieldDeletedbyEmployeeid holds the string denoting the deletedbyemployeeid field in the database.
	FieldDeletedbyEmployeeid = "deletedby_employeeid"
	// FieldDeletedbyDesignation holds the string denoting the deletedbydesignation field in the database.
	FieldDeletedbyDesignation = "deletedby_designation"
	// FieldDeletedDate holds the string denoting the deleteddate field in the database.
	FieldDeletedDate = "deleted_date"
	// FieldNumOfPapers holds the string denoting the numofpapers field in the database.
	FieldNumOfPapers = "num_of_papers"
	// FieldCalendarCode holds the string denoting the calendarcode field in the database.
	FieldCalendarCode = "calendar_code"
	// FieldPaperCode holds the string denoting the papercode field in the database.
	FieldPaperCode = "paper_code"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldExamTypeCode holds the string denoting the examtypecode field in the database.
	FieldExamTypeCode = "exam_type_code"
	// FieldCreatedByEmployeeId holds the string denoting the createdbyemployeeid field in the database.
	FieldCreatedByEmployeeId = "created_by_employee_id"
	// EdgeNotifications holds the string denoting the notifications edge name in mutations.
	EdgeNotifications = "notifications"
	// EdgeExamsRef holds the string denoting the exams_ref edge name in mutations.
	EdgeExamsRef = "exams_ref"
	// EdgePapers holds the string denoting the papers edge name in mutations.
	EdgePapers = "papers"
	// EdgeExamEligibility holds the string denoting the exameligibility edge name in mutations.
	EdgeExamEligibility = "ExamEligibility"
	// EdgeExamsType holds the string denoting the exams_type edge name in mutations.
	EdgeExamsType = "exams_type"
	// EdgeExamcentresip holds the string denoting the examcentresip edge name in mutations.
	EdgeExamcentresip = "examcentresip"
	// EdgeExamMasterRef holds the string denoting the exammasterref edge name in mutations.
	EdgeExamMasterRef = "ExamMasterRef"
	// EdgeExamMasterRefPS holds the string denoting the exammasterrefps edge name in mutations.
	EdgeExamMasterRefPS = "ExamMasterRefPS"
	// EdgeExamNotificationsRef holds the string denoting the exam_notifications_ref edge name in mutations.
	EdgeExamNotificationsRef = "Exam_Notifications_Ref"
	// EdgeExamMasterRefGDSPA holds the string denoting the exammasterrefgdspa edge name in mutations.
	EdgeExamMasterRefGDSPA = "ExamMasterRefGDSPA"
	// EdgeExamMasterRefGDSPM holds the string denoting the exammasterrefgdspm edge name in mutations.
	EdgeExamMasterRefGDSPM = "ExamMasterRefGDSPM"
	// EdgeExamMasterRefPMPA holds the string denoting the exammasterrefpmpa edge name in mutations.
	EdgeExamMasterRefPMPA = "ExamMasterRefPMPA"
	// EdgeExamMasterRefMTSPMMG holds the string denoting the exammasterrefmtspmmg edge name in mutations.
	EdgeExamMasterRefMTSPMMG = "ExamMasterRefMTSPMMG"
	// EdgeLogData holds the string denoting the logdata edge name in mutations.
	EdgeLogData = "LogData"
	// NotificationFieldID holds the string denoting the ID field of the Notification.
	NotificationFieldID = "NotifyCode"
	// ExamCalendarFieldID holds the string denoting the ID field of the ExamCalendar.
	ExamCalendarFieldID = "CalendarCode"
	// ExamPapersFieldID holds the string denoting the ID field of the ExamPapers.
	ExamPapersFieldID = "PaperCode"
	// EligibilityMasterFieldID holds the string denoting the ID field of the EligibilityMaster.
	EligibilityMasterFieldID = "EligibilityCode"
	// ExamTypeFieldID holds the string denoting the ID field of the ExamType.
	ExamTypeFieldID = "ExamTypeCode"
	// CenterFieldID holds the string denoting the ID field of the Center.
	CenterFieldID = "CenterCode"
	// Exam_Applications_IPFieldID holds the string denoting the ID field of the Exam_Applications_IP.
	Exam_Applications_IPFieldID = "ApplicationID"
	// Exam_Applications_PSFieldID holds the string denoting the ID field of the Exam_Applications_PS.
	Exam_Applications_PSFieldID = "ApplicationID"
	// ExamNotificationsFieldID holds the string denoting the ID field of the ExamNotifications.
	ExamNotificationsFieldID = "NotificationCode"
	// Exam_Applications_GDSPAFieldID holds the string denoting the ID field of the Exam_Applications_GDSPA.
	Exam_Applications_GDSPAFieldID = "ApplicationID"
	// Exam_Applications_GDSPMFieldID holds the string denoting the ID field of the Exam_Applications_GDSPM.
	Exam_Applications_GDSPMFieldID = "ApplicationID"
	// Exam_Applications_PMPAFieldID holds the string denoting the ID field of the Exam_Applications_PMPA.
	Exam_Applications_PMPAFieldID = "ApplicationID"
	// Exam_Application_MTSPMMGFieldID holds the string denoting the ID field of the Exam_Application_MTSPMMG.
	Exam_Application_MTSPMMGFieldID = "ApplicationID"
	// LogsFieldID holds the string denoting the ID field of the Logs.
	LogsFieldID = "ID"
	// Table holds the table name of the exam in the database.
	Table = "Exam"
	// NotificationsTable is the table that holds the notifications relation/edge.
	NotificationsTable = "Notification"
	// NotificationsInverseTable is the table name for the Notification entity.
	// It exists in this package in order to avoid circular dependency with the "notification" package.
	NotificationsInverseTable = "Notification"
	// NotificationsColumn is the table column denoting the notifications relation/edge.
	NotificationsColumn = "exam_code"
	// ExamsRefTable is the table that holds the exams_ref relation/edge.
	ExamsRefTable = "ExamCalendar"
	// ExamsRefInverseTable is the table name for the ExamCalendar entity.
	// It exists in this package in order to avoid circular dependency with the "examcalendar" package.
	ExamsRefInverseTable = "ExamCalendar"
	// ExamsRefColumn is the table column denoting the exams_ref relation/edge.
	ExamsRefColumn = "exam_code"
	// PapersTable is the table that holds the papers relation/edge.
	PapersTable = "exam_papers"
	// PapersInverseTable is the table name for the ExamPapers entity.
	// It exists in this package in order to avoid circular dependency with the "exampapers" package.
	PapersInverseTable = "exam_papers"
	// PapersColumn is the table column denoting the papers relation/edge.
	PapersColumn = "exam_papers"
	// ExamEligibilityTable is the table that holds the ExamEligibility relation/edge.
	ExamEligibilityTable = "EligibilityMaster"
	// ExamEligibilityInverseTable is the table name for the EligibilityMaster entity.
	// It exists in this package in order to avoid circular dependency with the "eligibilitymaster" package.
	ExamEligibilityInverseTable = "EligibilityMaster"
	// ExamEligibilityColumn is the table column denoting the ExamEligibility relation/edge.
	ExamEligibilityColumn = "exam_code"
	// ExamsTypeTable is the table that holds the exams_type relation/edge.
	ExamsTypeTable = "ExamType"
	// ExamsTypeInverseTable is the table name for the ExamType entity.
	// It exists in this package in order to avoid circular dependency with the "examtype" package.
	ExamsTypeInverseTable = "ExamType"
	// ExamsTypeColumn is the table column denoting the exams_type relation/edge.
	ExamsTypeColumn = "exam_code"
	// ExamcentresipTable is the table that holds the examcentresip relation/edge.
	ExamcentresipTable = "Center"
	// ExamcentresipInverseTable is the table name for the Center entity.
	// It exists in this package in order to avoid circular dependency with the "center" package.
	ExamcentresipInverseTable = "Center"
	// ExamcentresipColumn is the table column denoting the examcentresip relation/edge.
	ExamcentresipColumn = "exam_code"
	// ExamMasterRefTable is the table that holds the ExamMasterRef relation/edge.
	ExamMasterRefTable = "Exam_Applications_IP"
	// ExamMasterRefInverseTable is the table name for the Exam_Applications_IP entity.
	// It exists in this package in order to avoid circular dependency with the "exam_applications_ip" package.
	ExamMasterRefInverseTable = "Exam_Applications_IP"
	// ExamMasterRefColumn is the table column denoting the ExamMasterRef relation/edge.
	ExamMasterRefColumn = "exam_exam_master_ref"
	// ExamMasterRefPSTable is the table that holds the ExamMasterRefPS relation/edge.
	ExamMasterRefPSTable = "Exam_Applications_PS"
	// ExamMasterRefPSInverseTable is the table name for the Exam_Applications_PS entity.
	// It exists in this package in order to avoid circular dependency with the "exam_applications_ps" package.
	ExamMasterRefPSInverseTable = "Exam_Applications_PS"
	// ExamMasterRefPSColumn is the table column denoting the ExamMasterRefPS relation/edge.
	ExamMasterRefPSColumn = "exam_code"
	// ExamNotificationsRefTable is the table that holds the Exam_Notifications_Ref relation/edge.
	ExamNotificationsRefTable = "ExamNotifications"
	// ExamNotificationsRefInverseTable is the table name for the ExamNotifications entity.
	// It exists in this package in order to avoid circular dependency with the "examnotifications" package.
	ExamNotificationsRefInverseTable = "ExamNotifications"
	// ExamNotificationsRefColumn is the table column denoting the Exam_Notifications_Ref relation/edge.
	ExamNotificationsRefColumn = "exam_exam_notifications_ref"
	// ExamMasterRefGDSPATable is the table that holds the ExamMasterRefGDSPA relation/edge.
	ExamMasterRefGDSPATable = "Exam_Applications_GDSPA"
	// ExamMasterRefGDSPAInverseTable is the table name for the Exam_Applications_GDSPA entity.
	// It exists in this package in order to avoid circular dependency with the "exam_applications_gdspa" package.
	ExamMasterRefGDSPAInverseTable = "Exam_Applications_GDSPA"
	// ExamMasterRefGDSPAColumn is the table column denoting the ExamMasterRefGDSPA relation/edge.
	ExamMasterRefGDSPAColumn = "exam_code"
	// ExamMasterRefGDSPMTable is the table that holds the ExamMasterRefGDSPM relation/edge.
	ExamMasterRefGDSPMTable = "Exam_Applications_GDSPM"
	// ExamMasterRefGDSPMInverseTable is the table name for the Exam_Applications_GDSPM entity.
	// It exists in this package in order to avoid circular dependency with the "exam_applications_gdspm" package.
	ExamMasterRefGDSPMInverseTable = "Exam_Applications_GDSPM"
	// ExamMasterRefGDSPMColumn is the table column denoting the ExamMasterRefGDSPM relation/edge.
	ExamMasterRefGDSPMColumn = "exam_code"
	// ExamMasterRefPMPATable is the table that holds the ExamMasterRefPMPA relation/edge.
	ExamMasterRefPMPATable = "Exam_Applications_PMPA"
	// ExamMasterRefPMPAInverseTable is the table name for the Exam_Applications_PMPA entity.
	// It exists in this package in order to avoid circular dependency with the "exam_applications_pmpa" package.
	ExamMasterRefPMPAInverseTable = "Exam_Applications_PMPA"
	// ExamMasterRefPMPAColumn is the table column denoting the ExamMasterRefPMPA relation/edge.
	ExamMasterRefPMPAColumn = "exam_code"
	// ExamMasterRefMTSPMMGTable is the table that holds the ExamMasterRefMTSPMMG relation/edge.
	ExamMasterRefMTSPMMGTable = "Exam_Application_MTSPMMG"
	// ExamMasterRefMTSPMMGInverseTable is the table name for the Exam_Application_MTSPMMG entity.
	// It exists in this package in order to avoid circular dependency with the "exam_application_mtspmmg" package.
	ExamMasterRefMTSPMMGInverseTable = "Exam_Application_MTSPMMG"
	// ExamMasterRefMTSPMMGColumn is the table column denoting the ExamMasterRefMTSPMMG relation/edge.
	ExamMasterRefMTSPMMGColumn = "exam_code"
	// LogDataTable is the table that holds the LogData relation/edge.
	LogDataTable = "LogsTable"
	// LogDataInverseTable is the table name for the Logs entity.
	// It exists in this package in order to avoid circular dependency with the "logs" package.
	LogDataInverseTable = "LogsTable"
	// LogDataColumn is the table column denoting the LogData relation/edge.
	LogDataColumn = "exam_log_data"
)

// Columns holds all SQL columns for exam fields.
var Columns = []string{
	FieldID,
	FieldExamType,
	FieldExamName,
	FieldExamShortName,
	FieldSmsExamShortName,
	FieldExamCode,
	FieldCalenderIssuedBy,
	FieldNotificationBy,
	FieldConductedBy,
	FieldNodalOfficerLevel,
	FieldTentativeNotificationMandatoryDate,
	FieldLocalLanguage,
	FieldOptionForPost,
	FieldOptionToWriteExamOtherThanParent,
	FieldTableName,
	FieldOrderNumber,
	FieldCreatedById,
	FieldCreatedByUserName,
	FieldCreatedByEmpId,
	FieldCreatedByDesignation,
	FieldCreatedDate,
	FieldVerifiedbyid,
	FieldVerifiedbyusername,
	FieldVerifiedbyEmployeeid,
	FieldVerifiedbyDesignation,
	FieldVerifiedDate,
	FieldStatuss,
	FieldDeletedbyid,
	FieldDeletedbyusername,
	FieldDeletedbyEmployeeid,
	FieldDeletedbyDesignation,
	FieldDeletedDate,
	FieldNumOfPapers,
	FieldCalendarCode,
	FieldPaperCode,
	FieldStatus,
	FieldExamTypeCode,
	FieldCreatedByEmployeeId,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "Exam"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"vacancy_year_exams",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultExamCode holds the default value on creation for the "ExamCode" field.
	DefaultExamCode int32
	// DefaultTentativeNotificationMandatoryDate holds the default value on creation for the "TentativeNotificationMandatoryDate" field.
	DefaultTentativeNotificationMandatoryDate bool
	// DefaultLocalLanguage holds the default value on creation for the "LocalLanguage" field.
	DefaultLocalLanguage bool
	// DefaultOptionForPost holds the default value on creation for the "OptionForPost" field.
	DefaultOptionForPost bool
	// DefaultOptionToWriteExamOtherThanParent holds the default value on creation for the "OptionToWriteExamOtherThanParent" field.
	DefaultOptionToWriteExamOtherThanParent bool
	// DefaultCreatedById holds the default value on creation for the "CreatedById" field.
	DefaultCreatedById int64
	// DefaultCreatedByEmpId holds the default value on creation for the "CreatedByEmpId" field.
	DefaultCreatedByEmpId int64
	// DefaultVerifiedbyid holds the default value on creation for the "verifiedbyid" field.
	DefaultVerifiedbyid int64
	// DefaultVerifiedbyEmployeeid holds the default value on creation for the "verifiedbyEmployeeid" field.
	DefaultVerifiedbyEmployeeid int64
	// DefaultStatuss holds the default value on creation for the "Statuss" field.
	DefaultStatuss string
	// DefaultDeletedbyid holds the default value on creation for the "deletedbyid" field.
	DefaultDeletedbyid int64
	// DefaultDeletedbyEmployeeid holds the default value on creation for the "deletedbyEmployeeid" field.
	DefaultDeletedbyEmployeeid int64
	// DefaultCalendarCode holds the default value on creation for the "CalendarCode" field.
	DefaultCalendarCode int32
	// DefaultPaperCode holds the default value on creation for the "PaperCode" field.
	DefaultPaperCode int32
	// DefaultExamTypeCode holds the default value on creation for the "ExamTypeCode" field.
	DefaultExamTypeCode int32
)

// OrderOption defines the ordering options for the Exam queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByExamType orders the results by the ExamType field.
func ByExamType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExamType, opts...).ToFunc()
}

// ByExamName orders the results by the ExamName field.
func ByExamName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExamName, opts...).ToFunc()
}

// ByExamShortName orders the results by the ExamShortName field.
func ByExamShortName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExamShortName, opts...).ToFunc()
}

// BySmsExamShortName orders the results by the SmsExamShortName field.
func BySmsExamShortName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSmsExamShortName, opts...).ToFunc()
}

// ByExamCode orders the results by the ExamCode field.
func ByExamCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExamCode, opts...).ToFunc()
}

// ByCalenderIssuedBy orders the results by the CalenderIssuedBy field.
func ByCalenderIssuedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCalenderIssuedBy, opts...).ToFunc()
}

// ByNotificationBy orders the results by the NotificationBy field.
func ByNotificationBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNotificationBy, opts...).ToFunc()
}

// ByConductedBy orders the results by the ConductedBy field.
func ByConductedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldConductedBy, opts...).ToFunc()
}

// ByNodalOfficerLevel orders the results by the NodalOfficerLevel field.
func ByNodalOfficerLevel(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNodalOfficerLevel, opts...).ToFunc()
}

// ByTentativeNotificationMandatoryDate orders the results by the TentativeNotificationMandatoryDate field.
func ByTentativeNotificationMandatoryDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTentativeNotificationMandatoryDate, opts...).ToFunc()
}

// ByLocalLanguage orders the results by the LocalLanguage field.
func ByLocalLanguage(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLocalLanguage, opts...).ToFunc()
}

// ByOptionForPost orders the results by the OptionForPost field.
func ByOptionForPost(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOptionForPost, opts...).ToFunc()
}

// ByOptionToWriteExamOtherThanParent orders the results by the OptionToWriteExamOtherThanParent field.
func ByOptionToWriteExamOtherThanParent(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOptionToWriteExamOtherThanParent, opts...).ToFunc()
}

// ByTableName orders the results by the TableName field.
func ByTableName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTableName, opts...).ToFunc()
}

// ByOrderNumber orders the results by the OrderNumber field.
func ByOrderNumber(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOrderNumber, opts...).ToFunc()
}

// ByCreatedById orders the results by the CreatedById field.
func ByCreatedById(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedById, opts...).ToFunc()
}

// ByCreatedByUserName orders the results by the CreatedByUserName field.
func ByCreatedByUserName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedByUserName, opts...).ToFunc()
}

// ByCreatedByEmpId orders the results by the CreatedByEmpId field.
func ByCreatedByEmpId(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedByEmpId, opts...).ToFunc()
}

// ByCreatedByDesignation orders the results by the CreatedByDesignation field.
func ByCreatedByDesignation(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedByDesignation, opts...).ToFunc()
}

// ByCreatedDate orders the results by the CreatedDate field.
func ByCreatedDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedDate, opts...).ToFunc()
}

// ByVerifiedbyid orders the results by the verifiedbyid field.
func ByVerifiedbyid(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVerifiedbyid, opts...).ToFunc()
}

// ByVerifiedbyusername orders the results by the verifiedbyusername field.
func ByVerifiedbyusername(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVerifiedbyusername, opts...).ToFunc()
}

// ByVerifiedbyEmployeeid orders the results by the verifiedbyEmployeeid field.
func ByVerifiedbyEmployeeid(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVerifiedbyEmployeeid, opts...).ToFunc()
}

// ByVerifiedbyDesignation orders the results by the verifiedbyDesignation field.
func ByVerifiedbyDesignation(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVerifiedbyDesignation, opts...).ToFunc()
}

// ByVerifiedDate orders the results by the verifiedDate field.
func ByVerifiedDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVerifiedDate, opts...).ToFunc()
}

// ByStatuss orders the results by the Statuss field.
func ByStatuss(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatuss, opts...).ToFunc()
}

// ByDeletedbyid orders the results by the deletedbyid field.
func ByDeletedbyid(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedbyid, opts...).ToFunc()
}

// ByDeletedbyusername orders the results by the deletedbyusername field.
func ByDeletedbyusername(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedbyusername, opts...).ToFunc()
}

// ByDeletedbyEmployeeid orders the results by the deletedbyEmployeeid field.
func ByDeletedbyEmployeeid(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedbyEmployeeid, opts...).ToFunc()
}

// ByDeletedbyDesignation orders the results by the deletedbyDesignation field.
func ByDeletedbyDesignation(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedbyDesignation, opts...).ToFunc()
}

// ByDeletedDate orders the results by the deletedDate field.
func ByDeletedDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedDate, opts...).ToFunc()
}

// ByNumOfPapers orders the results by the NumOfPapers field.
func ByNumOfPapers(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNumOfPapers, opts...).ToFunc()
}

// ByCalendarCode orders the results by the CalendarCode field.
func ByCalendarCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCalendarCode, opts...).ToFunc()
}

// ByPaperCode orders the results by the PaperCode field.
func ByPaperCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPaperCode, opts...).ToFunc()
}

// ByStatus orders the results by the Status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByExamTypeCode orders the results by the ExamTypeCode field.
func ByExamTypeCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExamTypeCode, opts...).ToFunc()
}

// ByCreatedByEmployeeId orders the results by the CreatedByEmployeeId field.
func ByCreatedByEmployeeId(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedByEmployeeId, opts...).ToFunc()
}

// ByNotificationsCount orders the results by notifications count.
func ByNotificationsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newNotificationsStep(), opts...)
	}
}

// ByNotifications orders the results by notifications terms.
func ByNotifications(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newNotificationsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByExamsRefCount orders the results by exams_ref count.
func ByExamsRefCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newExamsRefStep(), opts...)
	}
}

// ByExamsRef orders the results by exams_ref terms.
func ByExamsRef(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newExamsRefStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByPapersCount orders the results by papers count.
func ByPapersCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newPapersStep(), opts...)
	}
}

// ByPapers orders the results by papers terms.
func ByPapers(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPapersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByExamEligibilityCount orders the results by ExamEligibility count.
func ByExamEligibilityCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newExamEligibilityStep(), opts...)
	}
}

// ByExamEligibility orders the results by ExamEligibility terms.
func ByExamEligibility(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newExamEligibilityStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByExamsTypeCount orders the results by exams_type count.
func ByExamsTypeCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newExamsTypeStep(), opts...)
	}
}

// ByExamsType orders the results by exams_type terms.
func ByExamsType(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newExamsTypeStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByExamcentresipCount orders the results by examcentresip count.
func ByExamcentresipCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newExamcentresipStep(), opts...)
	}
}

// ByExamcentresip orders the results by examcentresip terms.
func ByExamcentresip(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newExamcentresipStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByExamMasterRefCount orders the results by ExamMasterRef count.
func ByExamMasterRefCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newExamMasterRefStep(), opts...)
	}
}

// ByExamMasterRef orders the results by ExamMasterRef terms.
func ByExamMasterRef(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newExamMasterRefStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByExamMasterRefPSCount orders the results by ExamMasterRefPS count.
func ByExamMasterRefPSCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newExamMasterRefPSStep(), opts...)
	}
}

// ByExamMasterRefPS orders the results by ExamMasterRefPS terms.
func ByExamMasterRefPS(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newExamMasterRefPSStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByExamNotificationsRefCount orders the results by Exam_Notifications_Ref count.
func ByExamNotificationsRefCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newExamNotificationsRefStep(), opts...)
	}
}

// ByExamNotificationsRef orders the results by Exam_Notifications_Ref terms.
func ByExamNotificationsRef(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newExamNotificationsRefStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByExamMasterRefGDSPACount orders the results by ExamMasterRefGDSPA count.
func ByExamMasterRefGDSPACount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newExamMasterRefGDSPAStep(), opts...)
	}
}

// ByExamMasterRefGDSPA orders the results by ExamMasterRefGDSPA terms.
func ByExamMasterRefGDSPA(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newExamMasterRefGDSPAStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByExamMasterRefGDSPMCount orders the results by ExamMasterRefGDSPM count.
func ByExamMasterRefGDSPMCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newExamMasterRefGDSPMStep(), opts...)
	}
}

// ByExamMasterRefGDSPM orders the results by ExamMasterRefGDSPM terms.
func ByExamMasterRefGDSPM(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newExamMasterRefGDSPMStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByExamMasterRefPMPACount orders the results by ExamMasterRefPMPA count.
func ByExamMasterRefPMPACount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newExamMasterRefPMPAStep(), opts...)
	}
}

// ByExamMasterRefPMPA orders the results by ExamMasterRefPMPA terms.
func ByExamMasterRefPMPA(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newExamMasterRefPMPAStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByExamMasterRefMTSPMMGCount orders the results by ExamMasterRefMTSPMMG count.
func ByExamMasterRefMTSPMMGCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newExamMasterRefMTSPMMGStep(), opts...)
	}
}

// ByExamMasterRefMTSPMMG orders the results by ExamMasterRefMTSPMMG terms.
func ByExamMasterRefMTSPMMG(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newExamMasterRefMTSPMMGStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByLogDataCount orders the results by LogData count.
func ByLogDataCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newLogDataStep(), opts...)
	}
}

// ByLogData orders the results by LogData terms.
func ByLogData(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newLogDataStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newNotificationsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(NotificationsInverseTable, NotificationFieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, NotificationsTable, NotificationsColumn),
	)
}
func newExamsRefStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ExamsRefInverseTable, ExamCalendarFieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ExamsRefTable, ExamsRefColumn),
	)
}
func newPapersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PapersInverseTable, ExamPapersFieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, PapersTable, PapersColumn),
	)
}
func newExamEligibilityStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ExamEligibilityInverseTable, EligibilityMasterFieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ExamEligibilityTable, ExamEligibilityColumn),
	)
}
func newExamsTypeStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ExamsTypeInverseTable, ExamTypeFieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ExamsTypeTable, ExamsTypeColumn),
	)
}
func newExamcentresipStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ExamcentresipInverseTable, CenterFieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ExamcentresipTable, ExamcentresipColumn),
	)
}
func newExamMasterRefStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ExamMasterRefInverseTable, Exam_Applications_IPFieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ExamMasterRefTable, ExamMasterRefColumn),
	)
}
func newExamMasterRefPSStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ExamMasterRefPSInverseTable, Exam_Applications_PSFieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ExamMasterRefPSTable, ExamMasterRefPSColumn),
	)
}
func newExamNotificationsRefStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ExamNotificationsRefInverseTable, ExamNotificationsFieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ExamNotificationsRefTable, ExamNotificationsRefColumn),
	)
}
func newExamMasterRefGDSPAStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ExamMasterRefGDSPAInverseTable, Exam_Applications_GDSPAFieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ExamMasterRefGDSPATable, ExamMasterRefGDSPAColumn),
	)
}
func newExamMasterRefGDSPMStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ExamMasterRefGDSPMInverseTable, Exam_Applications_GDSPMFieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ExamMasterRefGDSPMTable, ExamMasterRefGDSPMColumn),
	)
}
func newExamMasterRefPMPAStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ExamMasterRefPMPAInverseTable, Exam_Applications_PMPAFieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ExamMasterRefPMPATable, ExamMasterRefPMPAColumn),
	)
}
func newExamMasterRefMTSPMMGStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ExamMasterRefMTSPMMGInverseTable, Exam_Application_MTSPMMGFieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ExamMasterRefMTSPMMGTable, ExamMasterRefMTSPMMGColumn),
	)
}
func newLogDataStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(LogDataInverseTable, LogsFieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, LogDataTable, LogDataColumn),
	)
}
