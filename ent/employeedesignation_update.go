// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"recruit/ent/employeedesignation"
	"recruit/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// EmployeeDesignationUpdate is the builder for updating EmployeeDesignation entities.
type EmployeeDesignationUpdate struct {
	config
	hooks    []Hook
	mutation *EmployeeDesignationMutation
}

// Where appends a list predicates to the EmployeeDesignationUpdate builder.
func (edu *EmployeeDesignationUpdate) Where(ps ...predicate.EmployeeDesignation) *EmployeeDesignationUpdate {
	edu.mutation.Where(ps...)
	return edu
}

// SetPostID sets the "PostID" field.
func (edu *EmployeeDesignationUpdate) SetPostID(i int32) *EmployeeDesignationUpdate {
	edu.mutation.ResetPostID()
	edu.mutation.SetPostID(i)
	return edu
}

// SetNillablePostID sets the "PostID" field if the given value is not nil.
func (edu *EmployeeDesignationUpdate) SetNillablePostID(i *int32) *EmployeeDesignationUpdate {
	if i != nil {
		edu.SetPostID(*i)
	}
	return edu
}

// AddPostID adds i to the "PostID" field.
func (edu *EmployeeDesignationUpdate) AddPostID(i int32) *EmployeeDesignationUpdate {
	edu.mutation.AddPostID(i)
	return edu
}

// ClearPostID clears the value of the "PostID" field.
func (edu *EmployeeDesignationUpdate) ClearPostID() *EmployeeDesignationUpdate {
	edu.mutation.ClearPostID()
	return edu
}

// SetPostCode sets the "PostCode" field.
func (edu *EmployeeDesignationUpdate) SetPostCode(s string) *EmployeeDesignationUpdate {
	edu.mutation.SetPostCode(s)
	return edu
}

// SetNillablePostCode sets the "PostCode" field if the given value is not nil.
func (edu *EmployeeDesignationUpdate) SetNillablePostCode(s *string) *EmployeeDesignationUpdate {
	if s != nil {
		edu.SetPostCode(*s)
	}
	return edu
}

// ClearPostCode clears the value of the "PostCode" field.
func (edu *EmployeeDesignationUpdate) ClearPostCode() *EmployeeDesignationUpdate {
	edu.mutation.ClearPostCode()
	return edu
}

// SetPostDescription sets the "PostDescription" field.
func (edu *EmployeeDesignationUpdate) SetPostDescription(s string) *EmployeeDesignationUpdate {
	edu.mutation.SetPostDescription(s)
	return edu
}

// SetNillablePostDescription sets the "PostDescription" field if the given value is not nil.
func (edu *EmployeeDesignationUpdate) SetNillablePostDescription(s *string) *EmployeeDesignationUpdate {
	if s != nil {
		edu.SetPostDescription(*s)
	}
	return edu
}

// ClearPostDescription clears the value of the "PostDescription" field.
func (edu *EmployeeDesignationUpdate) ClearPostDescription() *EmployeeDesignationUpdate {
	edu.mutation.ClearPostDescription()
	return edu
}

// SetDesignationCode sets the "DesignationCode" field.
func (edu *EmployeeDesignationUpdate) SetDesignationCode(s string) *EmployeeDesignationUpdate {
	edu.mutation.SetDesignationCode(s)
	return edu
}

// SetNillableDesignationCode sets the "DesignationCode" field if the given value is not nil.
func (edu *EmployeeDesignationUpdate) SetNillableDesignationCode(s *string) *EmployeeDesignationUpdate {
	if s != nil {
		edu.SetDesignationCode(*s)
	}
	return edu
}

// ClearDesignationCode clears the value of the "DesignationCode" field.
func (edu *EmployeeDesignationUpdate) ClearDesignationCode() *EmployeeDesignationUpdate {
	edu.mutation.ClearDesignationCode()
	return edu
}

// SetDesignationDescription sets the "DesignationDescription" field.
func (edu *EmployeeDesignationUpdate) SetDesignationDescription(s string) *EmployeeDesignationUpdate {
	edu.mutation.SetDesignationDescription(s)
	return edu
}

// SetOrderNumber sets the "OrderNumber" field.
func (edu *EmployeeDesignationUpdate) SetOrderNumber(s string) *EmployeeDesignationUpdate {
	edu.mutation.SetOrderNumber(s)
	return edu
}

// SetNillableOrderNumber sets the "OrderNumber" field if the given value is not nil.
func (edu *EmployeeDesignationUpdate) SetNillableOrderNumber(s *string) *EmployeeDesignationUpdate {
	if s != nil {
		edu.SetOrderNumber(*s)
	}
	return edu
}

// ClearOrderNumber clears the value of the "OrderNumber" field.
func (edu *EmployeeDesignationUpdate) ClearOrderNumber() *EmployeeDesignationUpdate {
	edu.mutation.ClearOrderNumber()
	return edu
}

// SetCreatedById sets the "CreatedById" field.
func (edu *EmployeeDesignationUpdate) SetCreatedById(i int64) *EmployeeDesignationUpdate {
	edu.mutation.ResetCreatedById()
	edu.mutation.SetCreatedById(i)
	return edu
}

// SetNillableCreatedById sets the "CreatedById" field if the given value is not nil.
func (edu *EmployeeDesignationUpdate) SetNillableCreatedById(i *int64) *EmployeeDesignationUpdate {
	if i != nil {
		edu.SetCreatedById(*i)
	}
	return edu
}

// AddCreatedById adds i to the "CreatedById" field.
func (edu *EmployeeDesignationUpdate) AddCreatedById(i int64) *EmployeeDesignationUpdate {
	edu.mutation.AddCreatedById(i)
	return edu
}

// ClearCreatedById clears the value of the "CreatedById" field.
func (edu *EmployeeDesignationUpdate) ClearCreatedById() *EmployeeDesignationUpdate {
	edu.mutation.ClearCreatedById()
	return edu
}

// SetCreatedByUserName sets the "CreatedByUserName" field.
func (edu *EmployeeDesignationUpdate) SetCreatedByUserName(s string) *EmployeeDesignationUpdate {
	edu.mutation.SetCreatedByUserName(s)
	return edu
}

// SetNillableCreatedByUserName sets the "CreatedByUserName" field if the given value is not nil.
func (edu *EmployeeDesignationUpdate) SetNillableCreatedByUserName(s *string) *EmployeeDesignationUpdate {
	if s != nil {
		edu.SetCreatedByUserName(*s)
	}
	return edu
}

// ClearCreatedByUserName clears the value of the "CreatedByUserName" field.
func (edu *EmployeeDesignationUpdate) ClearCreatedByUserName() *EmployeeDesignationUpdate {
	edu.mutation.ClearCreatedByUserName()
	return edu
}

// SetCreatedByEmpId sets the "CreatedByEmpId" field.
func (edu *EmployeeDesignationUpdate) SetCreatedByEmpId(i int64) *EmployeeDesignationUpdate {
	edu.mutation.ResetCreatedByEmpId()
	edu.mutation.SetCreatedByEmpId(i)
	return edu
}

// SetNillableCreatedByEmpId sets the "CreatedByEmpId" field if the given value is not nil.
func (edu *EmployeeDesignationUpdate) SetNillableCreatedByEmpId(i *int64) *EmployeeDesignationUpdate {
	if i != nil {
		edu.SetCreatedByEmpId(*i)
	}
	return edu
}

// AddCreatedByEmpId adds i to the "CreatedByEmpId" field.
func (edu *EmployeeDesignationUpdate) AddCreatedByEmpId(i int64) *EmployeeDesignationUpdate {
	edu.mutation.AddCreatedByEmpId(i)
	return edu
}

// ClearCreatedByEmpId clears the value of the "CreatedByEmpId" field.
func (edu *EmployeeDesignationUpdate) ClearCreatedByEmpId() *EmployeeDesignationUpdate {
	edu.mutation.ClearCreatedByEmpId()
	return edu
}

// SetCreatedByDesignation sets the "CreatedByDesignation" field.
func (edu *EmployeeDesignationUpdate) SetCreatedByDesignation(s string) *EmployeeDesignationUpdate {
	edu.mutation.SetCreatedByDesignation(s)
	return edu
}

// SetNillableCreatedByDesignation sets the "CreatedByDesignation" field if the given value is not nil.
func (edu *EmployeeDesignationUpdate) SetNillableCreatedByDesignation(s *string) *EmployeeDesignationUpdate {
	if s != nil {
		edu.SetCreatedByDesignation(*s)
	}
	return edu
}

// ClearCreatedByDesignation clears the value of the "CreatedByDesignation" field.
func (edu *EmployeeDesignationUpdate) ClearCreatedByDesignation() *EmployeeDesignationUpdate {
	edu.mutation.ClearCreatedByDesignation()
	return edu
}

// SetCreatedDate sets the "CreatedDate" field.
func (edu *EmployeeDesignationUpdate) SetCreatedDate(t time.Time) *EmployeeDesignationUpdate {
	edu.mutation.SetCreatedDate(t)
	return edu
}

// SetNillableCreatedDate sets the "CreatedDate" field if the given value is not nil.
func (edu *EmployeeDesignationUpdate) SetNillableCreatedDate(t *time.Time) *EmployeeDesignationUpdate {
	if t != nil {
		edu.SetCreatedDate(*t)
	}
	return edu
}

// ClearCreatedDate clears the value of the "CreatedDate" field.
func (edu *EmployeeDesignationUpdate) ClearCreatedDate() *EmployeeDesignationUpdate {
	edu.mutation.ClearCreatedDate()
	return edu
}

// SetVerifiedbyid sets the "verifiedbyid" field.
func (edu *EmployeeDesignationUpdate) SetVerifiedbyid(i int64) *EmployeeDesignationUpdate {
	edu.mutation.ResetVerifiedbyid()
	edu.mutation.SetVerifiedbyid(i)
	return edu
}

// SetNillableVerifiedbyid sets the "verifiedbyid" field if the given value is not nil.
func (edu *EmployeeDesignationUpdate) SetNillableVerifiedbyid(i *int64) *EmployeeDesignationUpdate {
	if i != nil {
		edu.SetVerifiedbyid(*i)
	}
	return edu
}

// AddVerifiedbyid adds i to the "verifiedbyid" field.
func (edu *EmployeeDesignationUpdate) AddVerifiedbyid(i int64) *EmployeeDesignationUpdate {
	edu.mutation.AddVerifiedbyid(i)
	return edu
}

// ClearVerifiedbyid clears the value of the "verifiedbyid" field.
func (edu *EmployeeDesignationUpdate) ClearVerifiedbyid() *EmployeeDesignationUpdate {
	edu.mutation.ClearVerifiedbyid()
	return edu
}

// SetVerifiedbyusername sets the "verifiedbyusername" field.
func (edu *EmployeeDesignationUpdate) SetVerifiedbyusername(s string) *EmployeeDesignationUpdate {
	edu.mutation.SetVerifiedbyusername(s)
	return edu
}

// SetNillableVerifiedbyusername sets the "verifiedbyusername" field if the given value is not nil.
func (edu *EmployeeDesignationUpdate) SetNillableVerifiedbyusername(s *string) *EmployeeDesignationUpdate {
	if s != nil {
		edu.SetVerifiedbyusername(*s)
	}
	return edu
}

// ClearVerifiedbyusername clears the value of the "verifiedbyusername" field.
func (edu *EmployeeDesignationUpdate) ClearVerifiedbyusername() *EmployeeDesignationUpdate {
	edu.mutation.ClearVerifiedbyusername()
	return edu
}

// SetVerifiedbyEmployeeid sets the "verifiedbyEmployeeid" field.
func (edu *EmployeeDesignationUpdate) SetVerifiedbyEmployeeid(i int64) *EmployeeDesignationUpdate {
	edu.mutation.ResetVerifiedbyEmployeeid()
	edu.mutation.SetVerifiedbyEmployeeid(i)
	return edu
}

// SetNillableVerifiedbyEmployeeid sets the "verifiedbyEmployeeid" field if the given value is not nil.
func (edu *EmployeeDesignationUpdate) SetNillableVerifiedbyEmployeeid(i *int64) *EmployeeDesignationUpdate {
	if i != nil {
		edu.SetVerifiedbyEmployeeid(*i)
	}
	return edu
}

// AddVerifiedbyEmployeeid adds i to the "verifiedbyEmployeeid" field.
func (edu *EmployeeDesignationUpdate) AddVerifiedbyEmployeeid(i int64) *EmployeeDesignationUpdate {
	edu.mutation.AddVerifiedbyEmployeeid(i)
	return edu
}

// ClearVerifiedbyEmployeeid clears the value of the "verifiedbyEmployeeid" field.
func (edu *EmployeeDesignationUpdate) ClearVerifiedbyEmployeeid() *EmployeeDesignationUpdate {
	edu.mutation.ClearVerifiedbyEmployeeid()
	return edu
}

// SetVerifiedbyDesignation sets the "verifiedbyDesignation" field.
func (edu *EmployeeDesignationUpdate) SetVerifiedbyDesignation(s string) *EmployeeDesignationUpdate {
	edu.mutation.SetVerifiedbyDesignation(s)
	return edu
}

// SetNillableVerifiedbyDesignation sets the "verifiedbyDesignation" field if the given value is not nil.
func (edu *EmployeeDesignationUpdate) SetNillableVerifiedbyDesignation(s *string) *EmployeeDesignationUpdate {
	if s != nil {
		edu.SetVerifiedbyDesignation(*s)
	}
	return edu
}

// ClearVerifiedbyDesignation clears the value of the "verifiedbyDesignation" field.
func (edu *EmployeeDesignationUpdate) ClearVerifiedbyDesignation() *EmployeeDesignationUpdate {
	edu.mutation.ClearVerifiedbyDesignation()
	return edu
}

// SetVerifiedDate sets the "verifiedDate" field.
func (edu *EmployeeDesignationUpdate) SetVerifiedDate(t time.Time) *EmployeeDesignationUpdate {
	edu.mutation.SetVerifiedDate(t)
	return edu
}

// SetNillableVerifiedDate sets the "verifiedDate" field if the given value is not nil.
func (edu *EmployeeDesignationUpdate) SetNillableVerifiedDate(t *time.Time) *EmployeeDesignationUpdate {
	if t != nil {
		edu.SetVerifiedDate(*t)
	}
	return edu
}

// ClearVerifiedDate clears the value of the "verifiedDate" field.
func (edu *EmployeeDesignationUpdate) ClearVerifiedDate() *EmployeeDesignationUpdate {
	edu.mutation.ClearVerifiedDate()
	return edu
}

// SetStatuss sets the "Statuss" field.
func (edu *EmployeeDesignationUpdate) SetStatuss(s string) *EmployeeDesignationUpdate {
	edu.mutation.SetStatuss(s)
	return edu
}

// SetNillableStatuss sets the "Statuss" field if the given value is not nil.
func (edu *EmployeeDesignationUpdate) SetNillableStatuss(s *string) *EmployeeDesignationUpdate {
	if s != nil {
		edu.SetStatuss(*s)
	}
	return edu
}

// ClearStatuss clears the value of the "Statuss" field.
func (edu *EmployeeDesignationUpdate) ClearStatuss() *EmployeeDesignationUpdate {
	edu.mutation.ClearStatuss()
	return edu
}

// SetDeletedbyid sets the "deletedbyid" field.
func (edu *EmployeeDesignationUpdate) SetDeletedbyid(i int64) *EmployeeDesignationUpdate {
	edu.mutation.ResetDeletedbyid()
	edu.mutation.SetDeletedbyid(i)
	return edu
}

// SetNillableDeletedbyid sets the "deletedbyid" field if the given value is not nil.
func (edu *EmployeeDesignationUpdate) SetNillableDeletedbyid(i *int64) *EmployeeDesignationUpdate {
	if i != nil {
		edu.SetDeletedbyid(*i)
	}
	return edu
}

// AddDeletedbyid adds i to the "deletedbyid" field.
func (edu *EmployeeDesignationUpdate) AddDeletedbyid(i int64) *EmployeeDesignationUpdate {
	edu.mutation.AddDeletedbyid(i)
	return edu
}

// ClearDeletedbyid clears the value of the "deletedbyid" field.
func (edu *EmployeeDesignationUpdate) ClearDeletedbyid() *EmployeeDesignationUpdate {
	edu.mutation.ClearDeletedbyid()
	return edu
}

// SetDeletedbyusername sets the "deletedbyusername" field.
func (edu *EmployeeDesignationUpdate) SetDeletedbyusername(s string) *EmployeeDesignationUpdate {
	edu.mutation.SetDeletedbyusername(s)
	return edu
}

// SetNillableDeletedbyusername sets the "deletedbyusername" field if the given value is not nil.
func (edu *EmployeeDesignationUpdate) SetNillableDeletedbyusername(s *string) *EmployeeDesignationUpdate {
	if s != nil {
		edu.SetDeletedbyusername(*s)
	}
	return edu
}

// ClearDeletedbyusername clears the value of the "deletedbyusername" field.
func (edu *EmployeeDesignationUpdate) ClearDeletedbyusername() *EmployeeDesignationUpdate {
	edu.mutation.ClearDeletedbyusername()
	return edu
}

// SetDeletedbyEmployeeid sets the "deletedbyEmployeeid" field.
func (edu *EmployeeDesignationUpdate) SetDeletedbyEmployeeid(i int64) *EmployeeDesignationUpdate {
	edu.mutation.ResetDeletedbyEmployeeid()
	edu.mutation.SetDeletedbyEmployeeid(i)
	return edu
}

// SetNillableDeletedbyEmployeeid sets the "deletedbyEmployeeid" field if the given value is not nil.
func (edu *EmployeeDesignationUpdate) SetNillableDeletedbyEmployeeid(i *int64) *EmployeeDesignationUpdate {
	if i != nil {
		edu.SetDeletedbyEmployeeid(*i)
	}
	return edu
}

// AddDeletedbyEmployeeid adds i to the "deletedbyEmployeeid" field.
func (edu *EmployeeDesignationUpdate) AddDeletedbyEmployeeid(i int64) *EmployeeDesignationUpdate {
	edu.mutation.AddDeletedbyEmployeeid(i)
	return edu
}

// ClearDeletedbyEmployeeid clears the value of the "deletedbyEmployeeid" field.
func (edu *EmployeeDesignationUpdate) ClearDeletedbyEmployeeid() *EmployeeDesignationUpdate {
	edu.mutation.ClearDeletedbyEmployeeid()
	return edu
}

// SetDeletedbyDesignation sets the "deletedbyDesignation" field.
func (edu *EmployeeDesignationUpdate) SetDeletedbyDesignation(s string) *EmployeeDesignationUpdate {
	edu.mutation.SetDeletedbyDesignation(s)
	return edu
}

// SetNillableDeletedbyDesignation sets the "deletedbyDesignation" field if the given value is not nil.
func (edu *EmployeeDesignationUpdate) SetNillableDeletedbyDesignation(s *string) *EmployeeDesignationUpdate {
	if s != nil {
		edu.SetDeletedbyDesignation(*s)
	}
	return edu
}

// ClearDeletedbyDesignation clears the value of the "deletedbyDesignation" field.
func (edu *EmployeeDesignationUpdate) ClearDeletedbyDesignation() *EmployeeDesignationUpdate {
	edu.mutation.ClearDeletedbyDesignation()
	return edu
}

// SetDeletedDate sets the "deletedDate" field.
func (edu *EmployeeDesignationUpdate) SetDeletedDate(t time.Time) *EmployeeDesignationUpdate {
	edu.mutation.SetDeletedDate(t)
	return edu
}

// SetNillableDeletedDate sets the "deletedDate" field if the given value is not nil.
func (edu *EmployeeDesignationUpdate) SetNillableDeletedDate(t *time.Time) *EmployeeDesignationUpdate {
	if t != nil {
		edu.SetDeletedDate(*t)
	}
	return edu
}

// ClearDeletedDate clears the value of the "deletedDate" field.
func (edu *EmployeeDesignationUpdate) ClearDeletedDate() *EmployeeDesignationUpdate {
	edu.mutation.ClearDeletedDate()
	return edu
}

// SetPaperStatus sets the "PaperStatus" field.
func (edu *EmployeeDesignationUpdate) SetPaperStatus(s string) *EmployeeDesignationUpdate {
	edu.mutation.SetPaperStatus(s)
	return edu
}

// SetCalendarCode sets the "CalendarCode" field.
func (edu *EmployeeDesignationUpdate) SetCalendarCode(i int32) *EmployeeDesignationUpdate {
	edu.mutation.ResetCalendarCode()
	edu.mutation.SetCalendarCode(i)
	return edu
}

// SetNillableCalendarCode sets the "CalendarCode" field if the given value is not nil.
func (edu *EmployeeDesignationUpdate) SetNillableCalendarCode(i *int32) *EmployeeDesignationUpdate {
	if i != nil {
		edu.SetCalendarCode(*i)
	}
	return edu
}

// AddCalendarCode adds i to the "CalendarCode" field.
func (edu *EmployeeDesignationUpdate) AddCalendarCode(i int32) *EmployeeDesignationUpdate {
	edu.mutation.AddCalendarCode(i)
	return edu
}

// ClearCalendarCode clears the value of the "CalendarCode" field.
func (edu *EmployeeDesignationUpdate) ClearCalendarCode() *EmployeeDesignationUpdate {
	edu.mutation.ClearCalendarCode()
	return edu
}

// SetExamCodePS sets the "ExamCodePS" field.
func (edu *EmployeeDesignationUpdate) SetExamCodePS(i int32) *EmployeeDesignationUpdate {
	edu.mutation.ResetExamCodePS()
	edu.mutation.SetExamCodePS(i)
	return edu
}

// SetNillableExamCodePS sets the "ExamCodePS" field if the given value is not nil.
func (edu *EmployeeDesignationUpdate) SetNillableExamCodePS(i *int32) *EmployeeDesignationUpdate {
	if i != nil {
		edu.SetExamCodePS(*i)
	}
	return edu
}

// AddExamCodePS adds i to the "ExamCodePS" field.
func (edu *EmployeeDesignationUpdate) AddExamCodePS(i int32) *EmployeeDesignationUpdate {
	edu.mutation.AddExamCodePS(i)
	return edu
}

// ClearExamCodePS clears the value of the "ExamCodePS" field.
func (edu *EmployeeDesignationUpdate) ClearExamCodePS() *EmployeeDesignationUpdate {
	edu.mutation.ClearExamCodePS()
	return edu
}

// SetCreatedByEmployeeId sets the "CreatedByEmployeeId" field.
func (edu *EmployeeDesignationUpdate) SetCreatedByEmployeeId(s string) *EmployeeDesignationUpdate {
	edu.mutation.SetCreatedByEmployeeId(s)
	return edu
}

// SetNillableCreatedByEmployeeId sets the "CreatedByEmployeeId" field if the given value is not nil.
func (edu *EmployeeDesignationUpdate) SetNillableCreatedByEmployeeId(s *string) *EmployeeDesignationUpdate {
	if s != nil {
		edu.SetCreatedByEmployeeId(*s)
	}
	return edu
}

// ClearCreatedByEmployeeId clears the value of the "CreatedByEmployeeId" field.
func (edu *EmployeeDesignationUpdate) ClearCreatedByEmployeeId() *EmployeeDesignationUpdate {
	edu.mutation.ClearCreatedByEmployeeId()
	return edu
}

// Mutation returns the EmployeeDesignationMutation object of the builder.
func (edu *EmployeeDesignationUpdate) Mutation() *EmployeeDesignationMutation {
	return edu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (edu *EmployeeDesignationUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, edu.sqlSave, edu.mutation, edu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (edu *EmployeeDesignationUpdate) SaveX(ctx context.Context) int {
	affected, err := edu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (edu *EmployeeDesignationUpdate) Exec(ctx context.Context) error {
	_, err := edu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (edu *EmployeeDesignationUpdate) ExecX(ctx context.Context) {
	if err := edu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (edu *EmployeeDesignationUpdate) check() error {
	if v, ok := edu.mutation.PaperStatus(); ok {
		if err := employeedesignation.PaperStatusValidator(v); err != nil {
			return &ValidationError{Name: "PaperStatus", err: fmt.Errorf(`ent: validator failed for field "EmployeeDesignation.PaperStatus": %w`, err)}
		}
	}
	return nil
}

func (edu *EmployeeDesignationUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := edu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(employeedesignation.Table, employeedesignation.Columns, sqlgraph.NewFieldSpec(employeedesignation.FieldID, field.TypeInt32))
	if ps := edu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := edu.mutation.PostID(); ok {
		_spec.SetField(employeedesignation.FieldPostID, field.TypeInt32, value)
	}
	if value, ok := edu.mutation.AddedPostID(); ok {
		_spec.AddField(employeedesignation.FieldPostID, field.TypeInt32, value)
	}
	if edu.mutation.PostIDCleared() {
		_spec.ClearField(employeedesignation.FieldPostID, field.TypeInt32)
	}
	if value, ok := edu.mutation.PostCode(); ok {
		_spec.SetField(employeedesignation.FieldPostCode, field.TypeString, value)
	}
	if edu.mutation.PostCodeCleared() {
		_spec.ClearField(employeedesignation.FieldPostCode, field.TypeString)
	}
	if value, ok := edu.mutation.PostDescription(); ok {
		_spec.SetField(employeedesignation.FieldPostDescription, field.TypeString, value)
	}
	if edu.mutation.PostDescriptionCleared() {
		_spec.ClearField(employeedesignation.FieldPostDescription, field.TypeString)
	}
	if value, ok := edu.mutation.DesignationCode(); ok {
		_spec.SetField(employeedesignation.FieldDesignationCode, field.TypeString, value)
	}
	if edu.mutation.DesignationCodeCleared() {
		_spec.ClearField(employeedesignation.FieldDesignationCode, field.TypeString)
	}
	if value, ok := edu.mutation.DesignationDescription(); ok {
		_spec.SetField(employeedesignation.FieldDesignationDescription, field.TypeString, value)
	}
	if value, ok := edu.mutation.OrderNumber(); ok {
		_spec.SetField(employeedesignation.FieldOrderNumber, field.TypeString, value)
	}
	if edu.mutation.OrderNumberCleared() {
		_spec.ClearField(employeedesignation.FieldOrderNumber, field.TypeString)
	}
	if value, ok := edu.mutation.CreatedById(); ok {
		_spec.SetField(employeedesignation.FieldCreatedById, field.TypeInt64, value)
	}
	if value, ok := edu.mutation.AddedCreatedById(); ok {
		_spec.AddField(employeedesignation.FieldCreatedById, field.TypeInt64, value)
	}
	if edu.mutation.CreatedByIdCleared() {
		_spec.ClearField(employeedesignation.FieldCreatedById, field.TypeInt64)
	}
	if value, ok := edu.mutation.CreatedByUserName(); ok {
		_spec.SetField(employeedesignation.FieldCreatedByUserName, field.TypeString, value)
	}
	if edu.mutation.CreatedByUserNameCleared() {
		_spec.ClearField(employeedesignation.FieldCreatedByUserName, field.TypeString)
	}
	if value, ok := edu.mutation.CreatedByEmpId(); ok {
		_spec.SetField(employeedesignation.FieldCreatedByEmpId, field.TypeInt64, value)
	}
	if value, ok := edu.mutation.AddedCreatedByEmpId(); ok {
		_spec.AddField(employeedesignation.FieldCreatedByEmpId, field.TypeInt64, value)
	}
	if edu.mutation.CreatedByEmpIdCleared() {
		_spec.ClearField(employeedesignation.FieldCreatedByEmpId, field.TypeInt64)
	}
	if value, ok := edu.mutation.CreatedByDesignation(); ok {
		_spec.SetField(employeedesignation.FieldCreatedByDesignation, field.TypeString, value)
	}
	if edu.mutation.CreatedByDesignationCleared() {
		_spec.ClearField(employeedesignation.FieldCreatedByDesignation, field.TypeString)
	}
	if value, ok := edu.mutation.CreatedDate(); ok {
		_spec.SetField(employeedesignation.FieldCreatedDate, field.TypeTime, value)
	}
	if edu.mutation.CreatedDateCleared() {
		_spec.ClearField(employeedesignation.FieldCreatedDate, field.TypeTime)
	}
	if value, ok := edu.mutation.Verifiedbyid(); ok {
		_spec.SetField(employeedesignation.FieldVerifiedbyid, field.TypeInt64, value)
	}
	if value, ok := edu.mutation.AddedVerifiedbyid(); ok {
		_spec.AddField(employeedesignation.FieldVerifiedbyid, field.TypeInt64, value)
	}
	if edu.mutation.VerifiedbyidCleared() {
		_spec.ClearField(employeedesignation.FieldVerifiedbyid, field.TypeInt64)
	}
	if value, ok := edu.mutation.Verifiedbyusername(); ok {
		_spec.SetField(employeedesignation.FieldVerifiedbyusername, field.TypeString, value)
	}
	if edu.mutation.VerifiedbyusernameCleared() {
		_spec.ClearField(employeedesignation.FieldVerifiedbyusername, field.TypeString)
	}
	if value, ok := edu.mutation.VerifiedbyEmployeeid(); ok {
		_spec.SetField(employeedesignation.FieldVerifiedbyEmployeeid, field.TypeInt64, value)
	}
	if value, ok := edu.mutation.AddedVerifiedbyEmployeeid(); ok {
		_spec.AddField(employeedesignation.FieldVerifiedbyEmployeeid, field.TypeInt64, value)
	}
	if edu.mutation.VerifiedbyEmployeeidCleared() {
		_spec.ClearField(employeedesignation.FieldVerifiedbyEmployeeid, field.TypeInt64)
	}
	if value, ok := edu.mutation.VerifiedbyDesignation(); ok {
		_spec.SetField(employeedesignation.FieldVerifiedbyDesignation, field.TypeString, value)
	}
	if edu.mutation.VerifiedbyDesignationCleared() {
		_spec.ClearField(employeedesignation.FieldVerifiedbyDesignation, field.TypeString)
	}
	if value, ok := edu.mutation.VerifiedDate(); ok {
		_spec.SetField(employeedesignation.FieldVerifiedDate, field.TypeTime, value)
	}
	if edu.mutation.VerifiedDateCleared() {
		_spec.ClearField(employeedesignation.FieldVerifiedDate, field.TypeTime)
	}
	if value, ok := edu.mutation.Statuss(); ok {
		_spec.SetField(employeedesignation.FieldStatuss, field.TypeString, value)
	}
	if edu.mutation.StatussCleared() {
		_spec.ClearField(employeedesignation.FieldStatuss, field.TypeString)
	}
	if value, ok := edu.mutation.Deletedbyid(); ok {
		_spec.SetField(employeedesignation.FieldDeletedbyid, field.TypeInt64, value)
	}
	if value, ok := edu.mutation.AddedDeletedbyid(); ok {
		_spec.AddField(employeedesignation.FieldDeletedbyid, field.TypeInt64, value)
	}
	if edu.mutation.DeletedbyidCleared() {
		_spec.ClearField(employeedesignation.FieldDeletedbyid, field.TypeInt64)
	}
	if value, ok := edu.mutation.Deletedbyusername(); ok {
		_spec.SetField(employeedesignation.FieldDeletedbyusername, field.TypeString, value)
	}
	if edu.mutation.DeletedbyusernameCleared() {
		_spec.ClearField(employeedesignation.FieldDeletedbyusername, field.TypeString)
	}
	if value, ok := edu.mutation.DeletedbyEmployeeid(); ok {
		_spec.SetField(employeedesignation.FieldDeletedbyEmployeeid, field.TypeInt64, value)
	}
	if value, ok := edu.mutation.AddedDeletedbyEmployeeid(); ok {
		_spec.AddField(employeedesignation.FieldDeletedbyEmployeeid, field.TypeInt64, value)
	}
	if edu.mutation.DeletedbyEmployeeidCleared() {
		_spec.ClearField(employeedesignation.FieldDeletedbyEmployeeid, field.TypeInt64)
	}
	if value, ok := edu.mutation.DeletedbyDesignation(); ok {
		_spec.SetField(employeedesignation.FieldDeletedbyDesignation, field.TypeString, value)
	}
	if edu.mutation.DeletedbyDesignationCleared() {
		_spec.ClearField(employeedesignation.FieldDeletedbyDesignation, field.TypeString)
	}
	if value, ok := edu.mutation.DeletedDate(); ok {
		_spec.SetField(employeedesignation.FieldDeletedDate, field.TypeTime, value)
	}
	if edu.mutation.DeletedDateCleared() {
		_spec.ClearField(employeedesignation.FieldDeletedDate, field.TypeTime)
	}
	if value, ok := edu.mutation.PaperStatus(); ok {
		_spec.SetField(employeedesignation.FieldPaperStatus, field.TypeString, value)
	}
	if value, ok := edu.mutation.CalendarCode(); ok {
		_spec.SetField(employeedesignation.FieldCalendarCode, field.TypeInt32, value)
	}
	if value, ok := edu.mutation.AddedCalendarCode(); ok {
		_spec.AddField(employeedesignation.FieldCalendarCode, field.TypeInt32, value)
	}
	if edu.mutation.CalendarCodeCleared() {
		_spec.ClearField(employeedesignation.FieldCalendarCode, field.TypeInt32)
	}
	if value, ok := edu.mutation.ExamCodePS(); ok {
		_spec.SetField(employeedesignation.FieldExamCodePS, field.TypeInt32, value)
	}
	if value, ok := edu.mutation.AddedExamCodePS(); ok {
		_spec.AddField(employeedesignation.FieldExamCodePS, field.TypeInt32, value)
	}
	if edu.mutation.ExamCodePSCleared() {
		_spec.ClearField(employeedesignation.FieldExamCodePS, field.TypeInt32)
	}
	if value, ok := edu.mutation.CreatedByEmployeeId(); ok {
		_spec.SetField(employeedesignation.FieldCreatedByEmployeeId, field.TypeString, value)
	}
	if edu.mutation.CreatedByEmployeeIdCleared() {
		_spec.ClearField(employeedesignation.FieldCreatedByEmployeeId, field.TypeString)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, edu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{employeedesignation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	edu.mutation.done = true
	return n, nil
}

// EmployeeDesignationUpdateOne is the builder for updating a single EmployeeDesignation entity.
type EmployeeDesignationUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *EmployeeDesignationMutation
}

// SetPostID sets the "PostID" field.
func (eduo *EmployeeDesignationUpdateOne) SetPostID(i int32) *EmployeeDesignationUpdateOne {
	eduo.mutation.ResetPostID()
	eduo.mutation.SetPostID(i)
	return eduo
}

// SetNillablePostID sets the "PostID" field if the given value is not nil.
func (eduo *EmployeeDesignationUpdateOne) SetNillablePostID(i *int32) *EmployeeDesignationUpdateOne {
	if i != nil {
		eduo.SetPostID(*i)
	}
	return eduo
}

// AddPostID adds i to the "PostID" field.
func (eduo *EmployeeDesignationUpdateOne) AddPostID(i int32) *EmployeeDesignationUpdateOne {
	eduo.mutation.AddPostID(i)
	return eduo
}

// ClearPostID clears the value of the "PostID" field.
func (eduo *EmployeeDesignationUpdateOne) ClearPostID() *EmployeeDesignationUpdateOne {
	eduo.mutation.ClearPostID()
	return eduo
}

// SetPostCode sets the "PostCode" field.
func (eduo *EmployeeDesignationUpdateOne) SetPostCode(s string) *EmployeeDesignationUpdateOne {
	eduo.mutation.SetPostCode(s)
	return eduo
}

// SetNillablePostCode sets the "PostCode" field if the given value is not nil.
func (eduo *EmployeeDesignationUpdateOne) SetNillablePostCode(s *string) *EmployeeDesignationUpdateOne {
	if s != nil {
		eduo.SetPostCode(*s)
	}
	return eduo
}

// ClearPostCode clears the value of the "PostCode" field.
func (eduo *EmployeeDesignationUpdateOne) ClearPostCode() *EmployeeDesignationUpdateOne {
	eduo.mutation.ClearPostCode()
	return eduo
}

// SetPostDescription sets the "PostDescription" field.
func (eduo *EmployeeDesignationUpdateOne) SetPostDescription(s string) *EmployeeDesignationUpdateOne {
	eduo.mutation.SetPostDescription(s)
	return eduo
}

// SetNillablePostDescription sets the "PostDescription" field if the given value is not nil.
func (eduo *EmployeeDesignationUpdateOne) SetNillablePostDescription(s *string) *EmployeeDesignationUpdateOne {
	if s != nil {
		eduo.SetPostDescription(*s)
	}
	return eduo
}

// ClearPostDescription clears the value of the "PostDescription" field.
func (eduo *EmployeeDesignationUpdateOne) ClearPostDescription() *EmployeeDesignationUpdateOne {
	eduo.mutation.ClearPostDescription()
	return eduo
}

// SetDesignationCode sets the "DesignationCode" field.
func (eduo *EmployeeDesignationUpdateOne) SetDesignationCode(s string) *EmployeeDesignationUpdateOne {
	eduo.mutation.SetDesignationCode(s)
	return eduo
}

// SetNillableDesignationCode sets the "DesignationCode" field if the given value is not nil.
func (eduo *EmployeeDesignationUpdateOne) SetNillableDesignationCode(s *string) *EmployeeDesignationUpdateOne {
	if s != nil {
		eduo.SetDesignationCode(*s)
	}
	return eduo
}

// ClearDesignationCode clears the value of the "DesignationCode" field.
func (eduo *EmployeeDesignationUpdateOne) ClearDesignationCode() *EmployeeDesignationUpdateOne {
	eduo.mutation.ClearDesignationCode()
	return eduo
}

// SetDesignationDescription sets the "DesignationDescription" field.
func (eduo *EmployeeDesignationUpdateOne) SetDesignationDescription(s string) *EmployeeDesignationUpdateOne {
	eduo.mutation.SetDesignationDescription(s)
	return eduo
}

// SetOrderNumber sets the "OrderNumber" field.
func (eduo *EmployeeDesignationUpdateOne) SetOrderNumber(s string) *EmployeeDesignationUpdateOne {
	eduo.mutation.SetOrderNumber(s)
	return eduo
}

// SetNillableOrderNumber sets the "OrderNumber" field if the given value is not nil.
func (eduo *EmployeeDesignationUpdateOne) SetNillableOrderNumber(s *string) *EmployeeDesignationUpdateOne {
	if s != nil {
		eduo.SetOrderNumber(*s)
	}
	return eduo
}

// ClearOrderNumber clears the value of the "OrderNumber" field.
func (eduo *EmployeeDesignationUpdateOne) ClearOrderNumber() *EmployeeDesignationUpdateOne {
	eduo.mutation.ClearOrderNumber()
	return eduo
}

// SetCreatedById sets the "CreatedById" field.
func (eduo *EmployeeDesignationUpdateOne) SetCreatedById(i int64) *EmployeeDesignationUpdateOne {
	eduo.mutation.ResetCreatedById()
	eduo.mutation.SetCreatedById(i)
	return eduo
}

// SetNillableCreatedById sets the "CreatedById" field if the given value is not nil.
func (eduo *EmployeeDesignationUpdateOne) SetNillableCreatedById(i *int64) *EmployeeDesignationUpdateOne {
	if i != nil {
		eduo.SetCreatedById(*i)
	}
	return eduo
}

// AddCreatedById adds i to the "CreatedById" field.
func (eduo *EmployeeDesignationUpdateOne) AddCreatedById(i int64) *EmployeeDesignationUpdateOne {
	eduo.mutation.AddCreatedById(i)
	return eduo
}

// ClearCreatedById clears the value of the "CreatedById" field.
func (eduo *EmployeeDesignationUpdateOne) ClearCreatedById() *EmployeeDesignationUpdateOne {
	eduo.mutation.ClearCreatedById()
	return eduo
}

// SetCreatedByUserName sets the "CreatedByUserName" field.
func (eduo *EmployeeDesignationUpdateOne) SetCreatedByUserName(s string) *EmployeeDesignationUpdateOne {
	eduo.mutation.SetCreatedByUserName(s)
	return eduo
}

// SetNillableCreatedByUserName sets the "CreatedByUserName" field if the given value is not nil.
func (eduo *EmployeeDesignationUpdateOne) SetNillableCreatedByUserName(s *string) *EmployeeDesignationUpdateOne {
	if s != nil {
		eduo.SetCreatedByUserName(*s)
	}
	return eduo
}

// ClearCreatedByUserName clears the value of the "CreatedByUserName" field.
func (eduo *EmployeeDesignationUpdateOne) ClearCreatedByUserName() *EmployeeDesignationUpdateOne {
	eduo.mutation.ClearCreatedByUserName()
	return eduo
}

// SetCreatedByEmpId sets the "CreatedByEmpId" field.
func (eduo *EmployeeDesignationUpdateOne) SetCreatedByEmpId(i int64) *EmployeeDesignationUpdateOne {
	eduo.mutation.ResetCreatedByEmpId()
	eduo.mutation.SetCreatedByEmpId(i)
	return eduo
}

// SetNillableCreatedByEmpId sets the "CreatedByEmpId" field if the given value is not nil.
func (eduo *EmployeeDesignationUpdateOne) SetNillableCreatedByEmpId(i *int64) *EmployeeDesignationUpdateOne {
	if i != nil {
		eduo.SetCreatedByEmpId(*i)
	}
	return eduo
}

// AddCreatedByEmpId adds i to the "CreatedByEmpId" field.
func (eduo *EmployeeDesignationUpdateOne) AddCreatedByEmpId(i int64) *EmployeeDesignationUpdateOne {
	eduo.mutation.AddCreatedByEmpId(i)
	return eduo
}

// ClearCreatedByEmpId clears the value of the "CreatedByEmpId" field.
func (eduo *EmployeeDesignationUpdateOne) ClearCreatedByEmpId() *EmployeeDesignationUpdateOne {
	eduo.mutation.ClearCreatedByEmpId()
	return eduo
}

// SetCreatedByDesignation sets the "CreatedByDesignation" field.
func (eduo *EmployeeDesignationUpdateOne) SetCreatedByDesignation(s string) *EmployeeDesignationUpdateOne {
	eduo.mutation.SetCreatedByDesignation(s)
	return eduo
}

// SetNillableCreatedByDesignation sets the "CreatedByDesignation" field if the given value is not nil.
func (eduo *EmployeeDesignationUpdateOne) SetNillableCreatedByDesignation(s *string) *EmployeeDesignationUpdateOne {
	if s != nil {
		eduo.SetCreatedByDesignation(*s)
	}
	return eduo
}

// ClearCreatedByDesignation clears the value of the "CreatedByDesignation" field.
func (eduo *EmployeeDesignationUpdateOne) ClearCreatedByDesignation() *EmployeeDesignationUpdateOne {
	eduo.mutation.ClearCreatedByDesignation()
	return eduo
}

// SetCreatedDate sets the "CreatedDate" field.
func (eduo *EmployeeDesignationUpdateOne) SetCreatedDate(t time.Time) *EmployeeDesignationUpdateOne {
	eduo.mutation.SetCreatedDate(t)
	return eduo
}

// SetNillableCreatedDate sets the "CreatedDate" field if the given value is not nil.
func (eduo *EmployeeDesignationUpdateOne) SetNillableCreatedDate(t *time.Time) *EmployeeDesignationUpdateOne {
	if t != nil {
		eduo.SetCreatedDate(*t)
	}
	return eduo
}

// ClearCreatedDate clears the value of the "CreatedDate" field.
func (eduo *EmployeeDesignationUpdateOne) ClearCreatedDate() *EmployeeDesignationUpdateOne {
	eduo.mutation.ClearCreatedDate()
	return eduo
}

// SetVerifiedbyid sets the "verifiedbyid" field.
func (eduo *EmployeeDesignationUpdateOne) SetVerifiedbyid(i int64) *EmployeeDesignationUpdateOne {
	eduo.mutation.ResetVerifiedbyid()
	eduo.mutation.SetVerifiedbyid(i)
	return eduo
}

// SetNillableVerifiedbyid sets the "verifiedbyid" field if the given value is not nil.
func (eduo *EmployeeDesignationUpdateOne) SetNillableVerifiedbyid(i *int64) *EmployeeDesignationUpdateOne {
	if i != nil {
		eduo.SetVerifiedbyid(*i)
	}
	return eduo
}

// AddVerifiedbyid adds i to the "verifiedbyid" field.
func (eduo *EmployeeDesignationUpdateOne) AddVerifiedbyid(i int64) *EmployeeDesignationUpdateOne {
	eduo.mutation.AddVerifiedbyid(i)
	return eduo
}

// ClearVerifiedbyid clears the value of the "verifiedbyid" field.
func (eduo *EmployeeDesignationUpdateOne) ClearVerifiedbyid() *EmployeeDesignationUpdateOne {
	eduo.mutation.ClearVerifiedbyid()
	return eduo
}

// SetVerifiedbyusername sets the "verifiedbyusername" field.
func (eduo *EmployeeDesignationUpdateOne) SetVerifiedbyusername(s string) *EmployeeDesignationUpdateOne {
	eduo.mutation.SetVerifiedbyusername(s)
	return eduo
}

// SetNillableVerifiedbyusername sets the "verifiedbyusername" field if the given value is not nil.
func (eduo *EmployeeDesignationUpdateOne) SetNillableVerifiedbyusername(s *string) *EmployeeDesignationUpdateOne {
	if s != nil {
		eduo.SetVerifiedbyusername(*s)
	}
	return eduo
}

// ClearVerifiedbyusername clears the value of the "verifiedbyusername" field.
func (eduo *EmployeeDesignationUpdateOne) ClearVerifiedbyusername() *EmployeeDesignationUpdateOne {
	eduo.mutation.ClearVerifiedbyusername()
	return eduo
}

// SetVerifiedbyEmployeeid sets the "verifiedbyEmployeeid" field.
func (eduo *EmployeeDesignationUpdateOne) SetVerifiedbyEmployeeid(i int64) *EmployeeDesignationUpdateOne {
	eduo.mutation.ResetVerifiedbyEmployeeid()
	eduo.mutation.SetVerifiedbyEmployeeid(i)
	return eduo
}

// SetNillableVerifiedbyEmployeeid sets the "verifiedbyEmployeeid" field if the given value is not nil.
func (eduo *EmployeeDesignationUpdateOne) SetNillableVerifiedbyEmployeeid(i *int64) *EmployeeDesignationUpdateOne {
	if i != nil {
		eduo.SetVerifiedbyEmployeeid(*i)
	}
	return eduo
}

// AddVerifiedbyEmployeeid adds i to the "verifiedbyEmployeeid" field.
func (eduo *EmployeeDesignationUpdateOne) AddVerifiedbyEmployeeid(i int64) *EmployeeDesignationUpdateOne {
	eduo.mutation.AddVerifiedbyEmployeeid(i)
	return eduo
}

// ClearVerifiedbyEmployeeid clears the value of the "verifiedbyEmployeeid" field.
func (eduo *EmployeeDesignationUpdateOne) ClearVerifiedbyEmployeeid() *EmployeeDesignationUpdateOne {
	eduo.mutation.ClearVerifiedbyEmployeeid()
	return eduo
}

// SetVerifiedbyDesignation sets the "verifiedbyDesignation" field.
func (eduo *EmployeeDesignationUpdateOne) SetVerifiedbyDesignation(s string) *EmployeeDesignationUpdateOne {
	eduo.mutation.SetVerifiedbyDesignation(s)
	return eduo
}

// SetNillableVerifiedbyDesignation sets the "verifiedbyDesignation" field if the given value is not nil.
func (eduo *EmployeeDesignationUpdateOne) SetNillableVerifiedbyDesignation(s *string) *EmployeeDesignationUpdateOne {
	if s != nil {
		eduo.SetVerifiedbyDesignation(*s)
	}
	return eduo
}

// ClearVerifiedbyDesignation clears the value of the "verifiedbyDesignation" field.
func (eduo *EmployeeDesignationUpdateOne) ClearVerifiedbyDesignation() *EmployeeDesignationUpdateOne {
	eduo.mutation.ClearVerifiedbyDesignation()
	return eduo
}

// SetVerifiedDate sets the "verifiedDate" field.
func (eduo *EmployeeDesignationUpdateOne) SetVerifiedDate(t time.Time) *EmployeeDesignationUpdateOne {
	eduo.mutation.SetVerifiedDate(t)
	return eduo
}

// SetNillableVerifiedDate sets the "verifiedDate" field if the given value is not nil.
func (eduo *EmployeeDesignationUpdateOne) SetNillableVerifiedDate(t *time.Time) *EmployeeDesignationUpdateOne {
	if t != nil {
		eduo.SetVerifiedDate(*t)
	}
	return eduo
}

// ClearVerifiedDate clears the value of the "verifiedDate" field.
func (eduo *EmployeeDesignationUpdateOne) ClearVerifiedDate() *EmployeeDesignationUpdateOne {
	eduo.mutation.ClearVerifiedDate()
	return eduo
}

// SetStatuss sets the "Statuss" field.
func (eduo *EmployeeDesignationUpdateOne) SetStatuss(s string) *EmployeeDesignationUpdateOne {
	eduo.mutation.SetStatuss(s)
	return eduo
}

// SetNillableStatuss sets the "Statuss" field if the given value is not nil.
func (eduo *EmployeeDesignationUpdateOne) SetNillableStatuss(s *string) *EmployeeDesignationUpdateOne {
	if s != nil {
		eduo.SetStatuss(*s)
	}
	return eduo
}

// ClearStatuss clears the value of the "Statuss" field.
func (eduo *EmployeeDesignationUpdateOne) ClearStatuss() *EmployeeDesignationUpdateOne {
	eduo.mutation.ClearStatuss()
	return eduo
}

// SetDeletedbyid sets the "deletedbyid" field.
func (eduo *EmployeeDesignationUpdateOne) SetDeletedbyid(i int64) *EmployeeDesignationUpdateOne {
	eduo.mutation.ResetDeletedbyid()
	eduo.mutation.SetDeletedbyid(i)
	return eduo
}

// SetNillableDeletedbyid sets the "deletedbyid" field if the given value is not nil.
func (eduo *EmployeeDesignationUpdateOne) SetNillableDeletedbyid(i *int64) *EmployeeDesignationUpdateOne {
	if i != nil {
		eduo.SetDeletedbyid(*i)
	}
	return eduo
}

// AddDeletedbyid adds i to the "deletedbyid" field.
func (eduo *EmployeeDesignationUpdateOne) AddDeletedbyid(i int64) *EmployeeDesignationUpdateOne {
	eduo.mutation.AddDeletedbyid(i)
	return eduo
}

// ClearDeletedbyid clears the value of the "deletedbyid" field.
func (eduo *EmployeeDesignationUpdateOne) ClearDeletedbyid() *EmployeeDesignationUpdateOne {
	eduo.mutation.ClearDeletedbyid()
	return eduo
}

// SetDeletedbyusername sets the "deletedbyusername" field.
func (eduo *EmployeeDesignationUpdateOne) SetDeletedbyusername(s string) *EmployeeDesignationUpdateOne {
	eduo.mutation.SetDeletedbyusername(s)
	return eduo
}

// SetNillableDeletedbyusername sets the "deletedbyusername" field if the given value is not nil.
func (eduo *EmployeeDesignationUpdateOne) SetNillableDeletedbyusername(s *string) *EmployeeDesignationUpdateOne {
	if s != nil {
		eduo.SetDeletedbyusername(*s)
	}
	return eduo
}

// ClearDeletedbyusername clears the value of the "deletedbyusername" field.
func (eduo *EmployeeDesignationUpdateOne) ClearDeletedbyusername() *EmployeeDesignationUpdateOne {
	eduo.mutation.ClearDeletedbyusername()
	return eduo
}

// SetDeletedbyEmployeeid sets the "deletedbyEmployeeid" field.
func (eduo *EmployeeDesignationUpdateOne) SetDeletedbyEmployeeid(i int64) *EmployeeDesignationUpdateOne {
	eduo.mutation.ResetDeletedbyEmployeeid()
	eduo.mutation.SetDeletedbyEmployeeid(i)
	return eduo
}

// SetNillableDeletedbyEmployeeid sets the "deletedbyEmployeeid" field if the given value is not nil.
func (eduo *EmployeeDesignationUpdateOne) SetNillableDeletedbyEmployeeid(i *int64) *EmployeeDesignationUpdateOne {
	if i != nil {
		eduo.SetDeletedbyEmployeeid(*i)
	}
	return eduo
}

// AddDeletedbyEmployeeid adds i to the "deletedbyEmployeeid" field.
func (eduo *EmployeeDesignationUpdateOne) AddDeletedbyEmployeeid(i int64) *EmployeeDesignationUpdateOne {
	eduo.mutation.AddDeletedbyEmployeeid(i)
	return eduo
}

// ClearDeletedbyEmployeeid clears the value of the "deletedbyEmployeeid" field.
func (eduo *EmployeeDesignationUpdateOne) ClearDeletedbyEmployeeid() *EmployeeDesignationUpdateOne {
	eduo.mutation.ClearDeletedbyEmployeeid()
	return eduo
}

// SetDeletedbyDesignation sets the "deletedbyDesignation" field.
func (eduo *EmployeeDesignationUpdateOne) SetDeletedbyDesignation(s string) *EmployeeDesignationUpdateOne {
	eduo.mutation.SetDeletedbyDesignation(s)
	return eduo
}

// SetNillableDeletedbyDesignation sets the "deletedbyDesignation" field if the given value is not nil.
func (eduo *EmployeeDesignationUpdateOne) SetNillableDeletedbyDesignation(s *string) *EmployeeDesignationUpdateOne {
	if s != nil {
		eduo.SetDeletedbyDesignation(*s)
	}
	return eduo
}

// ClearDeletedbyDesignation clears the value of the "deletedbyDesignation" field.
func (eduo *EmployeeDesignationUpdateOne) ClearDeletedbyDesignation() *EmployeeDesignationUpdateOne {
	eduo.mutation.ClearDeletedbyDesignation()
	return eduo
}

// SetDeletedDate sets the "deletedDate" field.
func (eduo *EmployeeDesignationUpdateOne) SetDeletedDate(t time.Time) *EmployeeDesignationUpdateOne {
	eduo.mutation.SetDeletedDate(t)
	return eduo
}

// SetNillableDeletedDate sets the "deletedDate" field if the given value is not nil.
func (eduo *EmployeeDesignationUpdateOne) SetNillableDeletedDate(t *time.Time) *EmployeeDesignationUpdateOne {
	if t != nil {
		eduo.SetDeletedDate(*t)
	}
	return eduo
}

// ClearDeletedDate clears the value of the "deletedDate" field.
func (eduo *EmployeeDesignationUpdateOne) ClearDeletedDate() *EmployeeDesignationUpdateOne {
	eduo.mutation.ClearDeletedDate()
	return eduo
}

// SetPaperStatus sets the "PaperStatus" field.
func (eduo *EmployeeDesignationUpdateOne) SetPaperStatus(s string) *EmployeeDesignationUpdateOne {
	eduo.mutation.SetPaperStatus(s)
	return eduo
}

// SetCalendarCode sets the "CalendarCode" field.
func (eduo *EmployeeDesignationUpdateOne) SetCalendarCode(i int32) *EmployeeDesignationUpdateOne {
	eduo.mutation.ResetCalendarCode()
	eduo.mutation.SetCalendarCode(i)
	return eduo
}

// SetNillableCalendarCode sets the "CalendarCode" field if the given value is not nil.
func (eduo *EmployeeDesignationUpdateOne) SetNillableCalendarCode(i *int32) *EmployeeDesignationUpdateOne {
	if i != nil {
		eduo.SetCalendarCode(*i)
	}
	return eduo
}

// AddCalendarCode adds i to the "CalendarCode" field.
func (eduo *EmployeeDesignationUpdateOne) AddCalendarCode(i int32) *EmployeeDesignationUpdateOne {
	eduo.mutation.AddCalendarCode(i)
	return eduo
}

// ClearCalendarCode clears the value of the "CalendarCode" field.
func (eduo *EmployeeDesignationUpdateOne) ClearCalendarCode() *EmployeeDesignationUpdateOne {
	eduo.mutation.ClearCalendarCode()
	return eduo
}

// SetExamCodePS sets the "ExamCodePS" field.
func (eduo *EmployeeDesignationUpdateOne) SetExamCodePS(i int32) *EmployeeDesignationUpdateOne {
	eduo.mutation.ResetExamCodePS()
	eduo.mutation.SetExamCodePS(i)
	return eduo
}

// SetNillableExamCodePS sets the "ExamCodePS" field if the given value is not nil.
func (eduo *EmployeeDesignationUpdateOne) SetNillableExamCodePS(i *int32) *EmployeeDesignationUpdateOne {
	if i != nil {
		eduo.SetExamCodePS(*i)
	}
	return eduo
}

// AddExamCodePS adds i to the "ExamCodePS" field.
func (eduo *EmployeeDesignationUpdateOne) AddExamCodePS(i int32) *EmployeeDesignationUpdateOne {
	eduo.mutation.AddExamCodePS(i)
	return eduo
}

// ClearExamCodePS clears the value of the "ExamCodePS" field.
func (eduo *EmployeeDesignationUpdateOne) ClearExamCodePS() *EmployeeDesignationUpdateOne {
	eduo.mutation.ClearExamCodePS()
	return eduo
}

// SetCreatedByEmployeeId sets the "CreatedByEmployeeId" field.
func (eduo *EmployeeDesignationUpdateOne) SetCreatedByEmployeeId(s string) *EmployeeDesignationUpdateOne {
	eduo.mutation.SetCreatedByEmployeeId(s)
	return eduo
}

// SetNillableCreatedByEmployeeId sets the "CreatedByEmployeeId" field if the given value is not nil.
func (eduo *EmployeeDesignationUpdateOne) SetNillableCreatedByEmployeeId(s *string) *EmployeeDesignationUpdateOne {
	if s != nil {
		eduo.SetCreatedByEmployeeId(*s)
	}
	return eduo
}

// ClearCreatedByEmployeeId clears the value of the "CreatedByEmployeeId" field.
func (eduo *EmployeeDesignationUpdateOne) ClearCreatedByEmployeeId() *EmployeeDesignationUpdateOne {
	eduo.mutation.ClearCreatedByEmployeeId()
	return eduo
}

// Mutation returns the EmployeeDesignationMutation object of the builder.
func (eduo *EmployeeDesignationUpdateOne) Mutation() *EmployeeDesignationMutation {
	return eduo.mutation
}

// Where appends a list predicates to the EmployeeDesignationUpdate builder.
func (eduo *EmployeeDesignationUpdateOne) Where(ps ...predicate.EmployeeDesignation) *EmployeeDesignationUpdateOne {
	eduo.mutation.Where(ps...)
	return eduo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (eduo *EmployeeDesignationUpdateOne) Select(field string, fields ...string) *EmployeeDesignationUpdateOne {
	eduo.fields = append([]string{field}, fields...)
	return eduo
}

// Save executes the query and returns the updated EmployeeDesignation entity.
func (eduo *EmployeeDesignationUpdateOne) Save(ctx context.Context) (*EmployeeDesignation, error) {
	return withHooks(ctx, eduo.sqlSave, eduo.mutation, eduo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (eduo *EmployeeDesignationUpdateOne) SaveX(ctx context.Context) *EmployeeDesignation {
	node, err := eduo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (eduo *EmployeeDesignationUpdateOne) Exec(ctx context.Context) error {
	_, err := eduo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eduo *EmployeeDesignationUpdateOne) ExecX(ctx context.Context) {
	if err := eduo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (eduo *EmployeeDesignationUpdateOne) check() error {
	if v, ok := eduo.mutation.PaperStatus(); ok {
		if err := employeedesignation.PaperStatusValidator(v); err != nil {
			return &ValidationError{Name: "PaperStatus", err: fmt.Errorf(`ent: validator failed for field "EmployeeDesignation.PaperStatus": %w`, err)}
		}
	}
	return nil
}

func (eduo *EmployeeDesignationUpdateOne) sqlSave(ctx context.Context) (_node *EmployeeDesignation, err error) {
	if err := eduo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(employeedesignation.Table, employeedesignation.Columns, sqlgraph.NewFieldSpec(employeedesignation.FieldID, field.TypeInt32))
	id, ok := eduo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "EmployeeDesignation.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := eduo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, employeedesignation.FieldID)
		for _, f := range fields {
			if !employeedesignation.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != employeedesignation.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := eduo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eduo.mutation.PostID(); ok {
		_spec.SetField(employeedesignation.FieldPostID, field.TypeInt32, value)
	}
	if value, ok := eduo.mutation.AddedPostID(); ok {
		_spec.AddField(employeedesignation.FieldPostID, field.TypeInt32, value)
	}
	if eduo.mutation.PostIDCleared() {
		_spec.ClearField(employeedesignation.FieldPostID, field.TypeInt32)
	}
	if value, ok := eduo.mutation.PostCode(); ok {
		_spec.SetField(employeedesignation.FieldPostCode, field.TypeString, value)
	}
	if eduo.mutation.PostCodeCleared() {
		_spec.ClearField(employeedesignation.FieldPostCode, field.TypeString)
	}
	if value, ok := eduo.mutation.PostDescription(); ok {
		_spec.SetField(employeedesignation.FieldPostDescription, field.TypeString, value)
	}
	if eduo.mutation.PostDescriptionCleared() {
		_spec.ClearField(employeedesignation.FieldPostDescription, field.TypeString)
	}
	if value, ok := eduo.mutation.DesignationCode(); ok {
		_spec.SetField(employeedesignation.FieldDesignationCode, field.TypeString, value)
	}
	if eduo.mutation.DesignationCodeCleared() {
		_spec.ClearField(employeedesignation.FieldDesignationCode, field.TypeString)
	}
	if value, ok := eduo.mutation.DesignationDescription(); ok {
		_spec.SetField(employeedesignation.FieldDesignationDescription, field.TypeString, value)
	}
	if value, ok := eduo.mutation.OrderNumber(); ok {
		_spec.SetField(employeedesignation.FieldOrderNumber, field.TypeString, value)
	}
	if eduo.mutation.OrderNumberCleared() {
		_spec.ClearField(employeedesignation.FieldOrderNumber, field.TypeString)
	}
	if value, ok := eduo.mutation.CreatedById(); ok {
		_spec.SetField(employeedesignation.FieldCreatedById, field.TypeInt64, value)
	}
	if value, ok := eduo.mutation.AddedCreatedById(); ok {
		_spec.AddField(employeedesignation.FieldCreatedById, field.TypeInt64, value)
	}
	if eduo.mutation.CreatedByIdCleared() {
		_spec.ClearField(employeedesignation.FieldCreatedById, field.TypeInt64)
	}
	if value, ok := eduo.mutation.CreatedByUserName(); ok {
		_spec.SetField(employeedesignation.FieldCreatedByUserName, field.TypeString, value)
	}
	if eduo.mutation.CreatedByUserNameCleared() {
		_spec.ClearField(employeedesignation.FieldCreatedByUserName, field.TypeString)
	}
	if value, ok := eduo.mutation.CreatedByEmpId(); ok {
		_spec.SetField(employeedesignation.FieldCreatedByEmpId, field.TypeInt64, value)
	}
	if value, ok := eduo.mutation.AddedCreatedByEmpId(); ok {
		_spec.AddField(employeedesignation.FieldCreatedByEmpId, field.TypeInt64, value)
	}
	if eduo.mutation.CreatedByEmpIdCleared() {
		_spec.ClearField(employeedesignation.FieldCreatedByEmpId, field.TypeInt64)
	}
	if value, ok := eduo.mutation.CreatedByDesignation(); ok {
		_spec.SetField(employeedesignation.FieldCreatedByDesignation, field.TypeString, value)
	}
	if eduo.mutation.CreatedByDesignationCleared() {
		_spec.ClearField(employeedesignation.FieldCreatedByDesignation, field.TypeString)
	}
	if value, ok := eduo.mutation.CreatedDate(); ok {
		_spec.SetField(employeedesignation.FieldCreatedDate, field.TypeTime, value)
	}
	if eduo.mutation.CreatedDateCleared() {
		_spec.ClearField(employeedesignation.FieldCreatedDate, field.TypeTime)
	}
	if value, ok := eduo.mutation.Verifiedbyid(); ok {
		_spec.SetField(employeedesignation.FieldVerifiedbyid, field.TypeInt64, value)
	}
	if value, ok := eduo.mutation.AddedVerifiedbyid(); ok {
		_spec.AddField(employeedesignation.FieldVerifiedbyid, field.TypeInt64, value)
	}
	if eduo.mutation.VerifiedbyidCleared() {
		_spec.ClearField(employeedesignation.FieldVerifiedbyid, field.TypeInt64)
	}
	if value, ok := eduo.mutation.Verifiedbyusername(); ok {
		_spec.SetField(employeedesignation.FieldVerifiedbyusername, field.TypeString, value)
	}
	if eduo.mutation.VerifiedbyusernameCleared() {
		_spec.ClearField(employeedesignation.FieldVerifiedbyusername, field.TypeString)
	}
	if value, ok := eduo.mutation.VerifiedbyEmployeeid(); ok {
		_spec.SetField(employeedesignation.FieldVerifiedbyEmployeeid, field.TypeInt64, value)
	}
	if value, ok := eduo.mutation.AddedVerifiedbyEmployeeid(); ok {
		_spec.AddField(employeedesignation.FieldVerifiedbyEmployeeid, field.TypeInt64, value)
	}
	if eduo.mutation.VerifiedbyEmployeeidCleared() {
		_spec.ClearField(employeedesignation.FieldVerifiedbyEmployeeid, field.TypeInt64)
	}
	if value, ok := eduo.mutation.VerifiedbyDesignation(); ok {
		_spec.SetField(employeedesignation.FieldVerifiedbyDesignation, field.TypeString, value)
	}
	if eduo.mutation.VerifiedbyDesignationCleared() {
		_spec.ClearField(employeedesignation.FieldVerifiedbyDesignation, field.TypeString)
	}
	if value, ok := eduo.mutation.VerifiedDate(); ok {
		_spec.SetField(employeedesignation.FieldVerifiedDate, field.TypeTime, value)
	}
	if eduo.mutation.VerifiedDateCleared() {
		_spec.ClearField(employeedesignation.FieldVerifiedDate, field.TypeTime)
	}
	if value, ok := eduo.mutation.Statuss(); ok {
		_spec.SetField(employeedesignation.FieldStatuss, field.TypeString, value)
	}
	if eduo.mutation.StatussCleared() {
		_spec.ClearField(employeedesignation.FieldStatuss, field.TypeString)
	}
	if value, ok := eduo.mutation.Deletedbyid(); ok {
		_spec.SetField(employeedesignation.FieldDeletedbyid, field.TypeInt64, value)
	}
	if value, ok := eduo.mutation.AddedDeletedbyid(); ok {
		_spec.AddField(employeedesignation.FieldDeletedbyid, field.TypeInt64, value)
	}
	if eduo.mutation.DeletedbyidCleared() {
		_spec.ClearField(employeedesignation.FieldDeletedbyid, field.TypeInt64)
	}
	if value, ok := eduo.mutation.Deletedbyusername(); ok {
		_spec.SetField(employeedesignation.FieldDeletedbyusername, field.TypeString, value)
	}
	if eduo.mutation.DeletedbyusernameCleared() {
		_spec.ClearField(employeedesignation.FieldDeletedbyusername, field.TypeString)
	}
	if value, ok := eduo.mutation.DeletedbyEmployeeid(); ok {
		_spec.SetField(employeedesignation.FieldDeletedbyEmployeeid, field.TypeInt64, value)
	}
	if value, ok := eduo.mutation.AddedDeletedbyEmployeeid(); ok {
		_spec.AddField(employeedesignation.FieldDeletedbyEmployeeid, field.TypeInt64, value)
	}
	if eduo.mutation.DeletedbyEmployeeidCleared() {
		_spec.ClearField(employeedesignation.FieldDeletedbyEmployeeid, field.TypeInt64)
	}
	if value, ok := eduo.mutation.DeletedbyDesignation(); ok {
		_spec.SetField(employeedesignation.FieldDeletedbyDesignation, field.TypeString, value)
	}
	if eduo.mutation.DeletedbyDesignationCleared() {
		_spec.ClearField(employeedesignation.FieldDeletedbyDesignation, field.TypeString)
	}
	if value, ok := eduo.mutation.DeletedDate(); ok {
		_spec.SetField(employeedesignation.FieldDeletedDate, field.TypeTime, value)
	}
	if eduo.mutation.DeletedDateCleared() {
		_spec.ClearField(employeedesignation.FieldDeletedDate, field.TypeTime)
	}
	if value, ok := eduo.mutation.PaperStatus(); ok {
		_spec.SetField(employeedesignation.FieldPaperStatus, field.TypeString, value)
	}
	if value, ok := eduo.mutation.CalendarCode(); ok {
		_spec.SetField(employeedesignation.FieldCalendarCode, field.TypeInt32, value)
	}
	if value, ok := eduo.mutation.AddedCalendarCode(); ok {
		_spec.AddField(employeedesignation.FieldCalendarCode, field.TypeInt32, value)
	}
	if eduo.mutation.CalendarCodeCleared() {
		_spec.ClearField(employeedesignation.FieldCalendarCode, field.TypeInt32)
	}
	if value, ok := eduo.mutation.ExamCodePS(); ok {
		_spec.SetField(employeedesignation.FieldExamCodePS, field.TypeInt32, value)
	}
	if value, ok := eduo.mutation.AddedExamCodePS(); ok {
		_spec.AddField(employeedesignation.FieldExamCodePS, field.TypeInt32, value)
	}
	if eduo.mutation.ExamCodePSCleared() {
		_spec.ClearField(employeedesignation.FieldExamCodePS, field.TypeInt32)
	}
	if value, ok := eduo.mutation.CreatedByEmployeeId(); ok {
		_spec.SetField(employeedesignation.FieldCreatedByEmployeeId, field.TypeString, value)
	}
	if eduo.mutation.CreatedByEmployeeIdCleared() {
		_spec.ClearField(employeedesignation.FieldCreatedByEmployeeId, field.TypeString)
	}
	_node = &EmployeeDesignation{config: eduo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, eduo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{employeedesignation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	eduo.mutation.done = true
	return _node, nil
}
