// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"recruit/ent/cadre_choice_pmpa"
	"recruit/ent/center"
	"recruit/ent/circlesummaryforno"
	"recruit/ent/division_choice_pmpa"
	"recruit/ent/exam"
	"recruit/ent/exam_applications_pmpa"
	"recruit/ent/examcitycenter"
	"recruit/ent/logs"
	"recruit/ent/predicate"
	"recruit/ent/recommendationspmpaapplications"
	"recruit/ent/rolemaster"
	"recruit/ent/usermaster"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
)

// ExamApplicationsPMPAUpdate is the builder for updating Exam_Applications_PMPA entities.
type ExamApplicationsPMPAUpdate struct {
	config
	hooks    []Hook
	mutation *ExamApplicationsPMPAMutation
}

// Where appends a list predicates to the ExamApplicationsPMPAUpdate builder.
func (eapu *ExamApplicationsPMPAUpdate) Where(ps ...predicate.Exam_Applications_PMPA) *ExamApplicationsPMPAUpdate {
	eapu.mutation.Where(ps...)
	return eapu
}

// SetApplicationNumber sets the "ApplicationNumber" field.
func (eapu *ExamApplicationsPMPAUpdate) SetApplicationNumber(s string) *ExamApplicationsPMPAUpdate {
	eapu.mutation.SetApplicationNumber(s)
	return eapu
}

// SetNillableApplicationNumber sets the "ApplicationNumber" field if the given value is not nil.
func (eapu *ExamApplicationsPMPAUpdate) SetNillableApplicationNumber(s *string) *ExamApplicationsPMPAUpdate {
	if s != nil {
		eapu.SetApplicationNumber(*s)
	}
	return eapu
}

// ClearApplicationNumber clears the value of the "ApplicationNumber" field.
func (eapu *ExamApplicationsPMPAUpdate) ClearApplicationNumber() *ExamApplicationsPMPAUpdate {
	eapu.mutation.ClearApplicationNumber()
	return eapu
}

// SetApplnSubmittedDate sets the "ApplnSubmittedDate" field.
func (eapu *ExamApplicationsPMPAUpdate) SetApplnSubmittedDate(t time.Time) *ExamApplicationsPMPAUpdate {
	eapu.mutation.SetApplnSubmittedDate(t)
	return eapu
}

// SetNillableApplnSubmittedDate sets the "ApplnSubmittedDate" field if the given value is not nil.
func (eapu *ExamApplicationsPMPAUpdate) SetNillableApplnSubmittedDate(t *time.Time) *ExamApplicationsPMPAUpdate {
	if t != nil {
		eapu.SetApplnSubmittedDate(*t)
	}
	return eapu
}

// ClearApplnSubmittedDate clears the value of the "ApplnSubmittedDate" field.
func (eapu *ExamApplicationsPMPAUpdate) ClearApplnSubmittedDate() *ExamApplicationsPMPAUpdate {
	eapu.mutation.ClearApplnSubmittedDate()
	return eapu
}

// SetExamCode sets the "ExamCode" field.
func (eapu *ExamApplicationsPMPAUpdate) SetExamCode(i int32) *ExamApplicationsPMPAUpdate {
	eapu.mutation.SetExamCode(i)
	return eapu
}

// SetNillableExamCode sets the "ExamCode" field if the given value is not nil.
func (eapu *ExamApplicationsPMPAUpdate) SetNillableExamCode(i *int32) *ExamApplicationsPMPAUpdate {
	if i != nil {
		eapu.SetExamCode(*i)
	}
	return eapu
}

// ClearExamCode clears the value of the "ExamCode" field.
func (eapu *ExamApplicationsPMPAUpdate) ClearExamCode() *ExamApplicationsPMPAUpdate {
	eapu.mutation.ClearExamCode()
	return eapu
}

// SetExamShortName sets the "ExamShortName" field.
func (eapu *ExamApplicationsPMPAUpdate) SetExamShortName(s string) *ExamApplicationsPMPAUpdate {
	eapu.mutation.SetExamShortName(s)
	return eapu
}

// SetNillableExamShortName sets the "ExamShortName" field if the given value is not nil.
func (eapu *ExamApplicationsPMPAUpdate) SetNillableExamShortName(s *string) *ExamApplicationsPMPAUpdate {
	if s != nil {
		eapu.SetExamShortName(*s)
	}
	return eapu
}

// ClearExamShortName clears the value of the "ExamShortName" field.
func (eapu *ExamApplicationsPMPAUpdate) ClearExamShortName() *ExamApplicationsPMPAUpdate {
	eapu.mutation.ClearExamShortName()
	return eapu
}

// SetExamName sets the "ExamName" field.
func (eapu *ExamApplicationsPMPAUpdate) SetExamName(s string) *ExamApplicationsPMPAUpdate {
	eapu.mutation.SetExamName(s)
	return eapu
}

// SetNillableExamName sets the "ExamName" field if the given value is not nil.
func (eapu *ExamApplicationsPMPAUpdate) SetNillableExamName(s *string) *ExamApplicationsPMPAUpdate {
	if s != nil {
		eapu.SetExamName(*s)
	}
	return eapu
}

// ClearExamName clears the value of the "ExamName" field.
func (eapu *ExamApplicationsPMPAUpdate) ClearExamName() *ExamApplicationsPMPAUpdate {
	eapu.mutation.ClearExamName()
	return eapu
}

// SetSmsExamShortName sets the "SmsExamShortName" field.
func (eapu *ExamApplicationsPMPAUpdate) SetSmsExamShortName(s string) *ExamApplicationsPMPAUpdate {
	eapu.mutation.SetSmsExamShortName(s)
	return eapu
}

// SetNillableSmsExamShortName sets the "SmsExamShortName" field if the given value is not nil.
func (eapu *ExamApplicationsPMPAUpdate) SetNillableSmsExamShortName(s *string) *ExamApplicationsPMPAUpdate {
	if s != nil {
		eapu.SetSmsExamShortName(*s)
	}
	return eapu
}

// ClearSmsExamShortName clears the value of the "SmsExamShortName" field.
func (eapu *ExamApplicationsPMPAUpdate) ClearSmsExamShortName() *ExamApplicationsPMPAUpdate {
	eapu.mutation.ClearSmsExamShortName()
	return eapu
}

// SetExamYear sets the "ExamYear" field.
func (eapu *ExamApplicationsPMPAUpdate) SetExamYear(s string) *ExamApplicationsPMPAUpdate {
	eapu.mutation.SetExamYear(s)
	return eapu
}

// SetNillableExamYear sets the "ExamYear" field if the given value is not nil.
func (eapu *ExamApplicationsPMPAUpdate) SetNillableExamYear(s *string) *ExamApplicationsPMPAUpdate {
	if s != nil {
		eapu.SetExamYear(*s)
	}
	return eapu
}

// ClearExamYear clears the value of the "ExamYear" field.
func (eapu *ExamApplicationsPMPAUpdate) ClearExamYear() *ExamApplicationsPMPAUpdate {
	eapu.mutation.ClearExamYear()
	return eapu
}

// SetUserID sets the "UserID" field.
func (eapu *ExamApplicationsPMPAUpdate) SetUserID(i int32) *ExamApplicationsPMPAUpdate {
	eapu.mutation.ResetUserID()
	eapu.mutation.SetUserID(i)
	return eapu
}

// SetNillableUserID sets the "UserID" field if the given value is not nil.
func (eapu *ExamApplicationsPMPAUpdate) SetNillableUserID(i *int32) *ExamApplicationsPMPAUpdate {
	if i != nil {
		eapu.SetUserID(*i)
	}
	return eapu
}

// AddUserID adds i to the "UserID" field.
func (eapu *ExamApplicationsPMPAUpdate) AddUserID(i int32) *ExamApplicationsPMPAUpdate {
	eapu.mutation.AddUserID(i)
	return eapu
}

// ClearUserID clears the value of the "UserID" field.
func (eapu *ExamApplicationsPMPAUpdate) ClearUserID() *ExamApplicationsPMPAUpdate {
	eapu.mutation.ClearUserID()
	return eapu
}

// SetEmployeeID sets the "EmployeeID" field.
func (eapu *ExamApplicationsPMPAUpdate) SetEmployeeID(i int64) *ExamApplicationsPMPAUpdate {
	eapu.mutation.ResetEmployeeID()
	eapu.mutation.SetEmployeeID(i)
	return eapu
}

// SetNillableEmployeeID sets the "EmployeeID" field if the given value is not nil.
func (eapu *ExamApplicationsPMPAUpdate) SetNillableEmployeeID(i *int64) *ExamApplicationsPMPAUpdate {
	if i != nil {
		eapu.SetEmployeeID(*i)
	}
	return eapu
}

// AddEmployeeID adds i to the "EmployeeID" field.
func (eapu *ExamApplicationsPMPAUpdate) AddEmployeeID(i int64) *ExamApplicationsPMPAUpdate {
	eapu.mutation.AddEmployeeID(i)
	return eapu
}

// ClearEmployeeID clears the value of the "EmployeeID" field.
func (eapu *ExamApplicationsPMPAUpdate) ClearEmployeeID() *ExamApplicationsPMPAUpdate {
	eapu.mutation.ClearEmployeeID()
	return eapu
}

// SetEmployeeName sets the "EmployeeName" field.
func (eapu *ExamApplicationsPMPAUpdate) SetEmployeeName(s string) *ExamApplicationsPMPAUpdate {
	eapu.mutation.SetEmployeeName(s)
	return eapu
}

// SetNillableEmployeeName sets the "EmployeeName" field if the given value is not nil.
func (eapu *ExamApplicationsPMPAUpdate) SetNillableEmployeeName(s *string) *ExamApplicationsPMPAUpdate {
	if s != nil {
		eapu.SetEmployeeName(*s)
	}
	return eapu
}

// ClearEmployeeName clears the value of the "EmployeeName" field.
func (eapu *ExamApplicationsPMPAUpdate) ClearEmployeeName() *ExamApplicationsPMPAUpdate {
	eapu.mutation.ClearEmployeeName()
	return eapu
}

// SetDOB sets the "DOB" field.
func (eapu *ExamApplicationsPMPAUpdate) SetDOB(s string) *ExamApplicationsPMPAUpdate {
	eapu.mutation.SetDOB(s)
	return eapu
}

// SetNillableDOB sets the "DOB" field if the given value is not nil.
func (eapu *ExamApplicationsPMPAUpdate) SetNillableDOB(s *string) *ExamApplicationsPMPAUpdate {
	if s != nil {
		eapu.SetDOB(*s)
	}
	return eapu
}

// ClearDOB clears the value of the "DOB" field.
func (eapu *ExamApplicationsPMPAUpdate) ClearDOB() *ExamApplicationsPMPAUpdate {
	eapu.mutation.ClearDOB()
	return eapu
}

// SetGender sets the "Gender" field.
func (eapu *ExamApplicationsPMPAUpdate) SetGender(s string) *ExamApplicationsPMPAUpdate {
	eapu.mutation.SetGender(s)
	return eapu
}

// SetNillableGender sets the "Gender" field if the given value is not nil.
func (eapu *ExamApplicationsPMPAUpdate) SetNillableGender(s *string) *ExamApplicationsPMPAUpdate {
	if s != nil {
		eapu.SetGender(*s)
	}
	return eapu
}

// ClearGender clears the value of the "Gender" field.
func (eapu *ExamApplicationsPMPAUpdate) ClearGender() *ExamApplicationsPMPAUpdate {
	eapu.mutation.ClearGender()
	return eapu
}

// SetMobileNumber sets the "MobileNumber" field.
func (eapu *ExamApplicationsPMPAUpdate) SetMobileNumber(s string) *ExamApplicationsPMPAUpdate {
	eapu.mutation.SetMobileNumber(s)
	return eapu
}

// SetNillableMobileNumber sets the "MobileNumber" field if the given value is not nil.
func (eapu *ExamApplicationsPMPAUpdate) SetNillableMobileNumber(s *string) *ExamApplicationsPMPAUpdate {
	if s != nil {
		eapu.SetMobileNumber(*s)
	}
	return eapu
}

// ClearMobileNumber clears the value of the "MobileNumber" field.
func (eapu *ExamApplicationsPMPAUpdate) ClearMobileNumber() *ExamApplicationsPMPAUpdate {
	eapu.mutation.ClearMobileNumber()
	return eapu
}

// SetEmailID sets the "EmailID" field.
func (eapu *ExamApplicationsPMPAUpdate) SetEmailID(s string) *ExamApplicationsPMPAUpdate {
	eapu.mutation.SetEmailID(s)
	return eapu
}

// SetNillableEmailID sets the "EmailID" field if the given value is not nil.
func (eapu *ExamApplicationsPMPAUpdate) SetNillableEmailID(s *string) *ExamApplicationsPMPAUpdate {
	if s != nil {
		eapu.SetEmailID(*s)
	}
	return eapu
}

// ClearEmailID clears the value of the "EmailID" field.
func (eapu *ExamApplicationsPMPAUpdate) ClearEmailID() *ExamApplicationsPMPAUpdate {
	eapu.mutation.ClearEmailID()
	return eapu
}

// SetCategoryCode sets the "CategoryCode" field.
func (eapu *ExamApplicationsPMPAUpdate) SetCategoryCode(s string) *ExamApplicationsPMPAUpdate {
	eapu.mutation.SetCategoryCode(s)
	return eapu
}

// SetNillableCategoryCode sets the "CategoryCode" field if the given value is not nil.
func (eapu *ExamApplicationsPMPAUpdate) SetNillableCategoryCode(s *string) *ExamApplicationsPMPAUpdate {
	if s != nil {
		eapu.SetCategoryCode(*s)
	}
	return eapu
}

// ClearCategoryCode clears the value of the "CategoryCode" field.
func (eapu *ExamApplicationsPMPAUpdate) ClearCategoryCode() *ExamApplicationsPMPAUpdate {
	eapu.mutation.ClearCategoryCode()
	return eapu
}

// SetCategoryDescription sets the "CategoryDescription" field.
func (eapu *ExamApplicationsPMPAUpdate) SetCategoryDescription(s string) *ExamApplicationsPMPAUpdate {
	eapu.mutation.SetCategoryDescription(s)
	return eapu
}

// SetNillableCategoryDescription sets the "CategoryDescription" field if the given value is not nil.
func (eapu *ExamApplicationsPMPAUpdate) SetNillableCategoryDescription(s *string) *ExamApplicationsPMPAUpdate {
	if s != nil {
		eapu.SetCategoryDescription(*s)
	}
	return eapu
}

// ClearCategoryDescription clears the value of the "CategoryDescription" field.
func (eapu *ExamApplicationsPMPAUpdate) ClearCategoryDescription() *ExamApplicationsPMPAUpdate {
	eapu.mutation.ClearCategoryDescription()
	return eapu
}

// SetDisabilityTypeID sets the "DisabilityTypeID" field.
func (eapu *ExamApplicationsPMPAUpdate) SetDisabilityTypeID(s string) *ExamApplicationsPMPAUpdate {
	eapu.mutation.SetDisabilityTypeID(s)
	return eapu
}

// SetNillableDisabilityTypeID sets the "DisabilityTypeID" field if the given value is not nil.
func (eapu *ExamApplicationsPMPAUpdate) SetNillableDisabilityTypeID(s *string) *ExamApplicationsPMPAUpdate {
	if s != nil {
		eapu.SetDisabilityTypeID(*s)
	}
	return eapu
}

// ClearDisabilityTypeID clears the value of the "DisabilityTypeID" field.
func (eapu *ExamApplicationsPMPAUpdate) ClearDisabilityTypeID() *ExamApplicationsPMPAUpdate {
	eapu.mutation.ClearDisabilityTypeID()
	return eapu
}

// SetDisabilityTypeCode sets the "DisabilityTypeCode" field.
func (eapu *ExamApplicationsPMPAUpdate) SetDisabilityTypeCode(s string) *ExamApplicationsPMPAUpdate {
	eapu.mutation.SetDisabilityTypeCode(s)
	return eapu
}

// SetNillableDisabilityTypeCode sets the "DisabilityTypeCode" field if the given value is not nil.
func (eapu *ExamApplicationsPMPAUpdate) SetNillableDisabilityTypeCode(s *string) *ExamApplicationsPMPAUpdate {
	if s != nil {
		eapu.SetDisabilityTypeCode(*s)
	}
	return eapu
}

// ClearDisabilityTypeCode clears the value of the "DisabilityTypeCode" field.
func (eapu *ExamApplicationsPMPAUpdate) ClearDisabilityTypeCode() *ExamApplicationsPMPAUpdate {
	eapu.mutation.ClearDisabilityTypeCode()
	return eapu
}

// SetDisabilityTypeDescription sets the "DisabilityTypeDescription" field.
func (eapu *ExamApplicationsPMPAUpdate) SetDisabilityTypeDescription(s string) *ExamApplicationsPMPAUpdate {
	eapu.mutation.SetDisabilityTypeDescription(s)
	return eapu
}

// SetNillableDisabilityTypeDescription sets the "DisabilityTypeDescription" field if the given value is not nil.
func (eapu *ExamApplicationsPMPAUpdate) SetNillableDisabilityTypeDescription(s *string) *ExamApplicationsPMPAUpdate {
	if s != nil {
		eapu.SetDisabilityTypeDescription(*s)
	}
	return eapu
}

// ClearDisabilityTypeDescription clears the value of the "DisabilityTypeDescription" field.
func (eapu *ExamApplicationsPMPAUpdate) ClearDisabilityTypeDescription() *ExamApplicationsPMPAUpdate {
	eapu.mutation.ClearDisabilityTypeDescription()
	return eapu
}

// SetDisabilityPercentage sets the "DisabilityPercentage" field.
func (eapu *ExamApplicationsPMPAUpdate) SetDisabilityPercentage(i int32) *ExamApplicationsPMPAUpdate {
	eapu.mutation.ResetDisabilityPercentage()
	eapu.mutation.SetDisabilityPercentage(i)
	return eapu
}

// SetNillableDisabilityPercentage sets the "DisabilityPercentage" field if the given value is not nil.
func (eapu *ExamApplicationsPMPAUpdate) SetNillableDisabilityPercentage(i *int32) *ExamApplicationsPMPAUpdate {
	if i != nil {
		eapu.SetDisabilityPercentage(*i)
	}
	return eapu
}

// AddDisabilityPercentage adds i to the "DisabilityPercentage" field.
func (eapu *ExamApplicationsPMPAUpdate) AddDisabilityPercentage(i int32) *ExamApplicationsPMPAUpdate {
	eapu.mutation.AddDisabilityPercentage(i)
	return eapu
}

// ClearDisabilityPercentage clears the value of the "DisabilityPercentage" field.
func (eapu *ExamApplicationsPMPAUpdate) ClearDisabilityPercentage() *ExamApplicationsPMPAUpdate {
	eapu.mutation.ClearDisabilityPercentage()
	return eapu
}

// SetDCCS sets the "DCCS" field.
func (eapu *ExamApplicationsPMPAUpdate) SetDCCS(s string) *ExamApplicationsPMPAUpdate {
	eapu.mutation.SetDCCS(s)
	return eapu
}

// SetNillableDCCS sets the "DCCS" field if the given value is not nil.
func (eapu *ExamApplicationsPMPAUpdate) SetNillableDCCS(s *string) *ExamApplicationsPMPAUpdate {
	if s != nil {
		eapu.SetDCCS(*s)
	}
	return eapu
}

// ClearDCCS clears the value of the "DCCS" field.
func (eapu *ExamApplicationsPMPAUpdate) ClearDCCS() *ExamApplicationsPMPAUpdate {
	eapu.mutation.ClearDCCS()
	return eapu
}

// SetEntryPostCode sets the "EntryPostCode" field.
func (eapu *ExamApplicationsPMPAUpdate) SetEntryPostCode(s string) *ExamApplicationsPMPAUpdate {
	eapu.mutation.SetEntryPostCode(s)
	return eapu
}

// SetNillableEntryPostCode sets the "EntryPostCode" field if the given value is not nil.
func (eapu *ExamApplicationsPMPAUpdate) SetNillableEntryPostCode(s *string) *ExamApplicationsPMPAUpdate {
	if s != nil {
		eapu.SetEntryPostCode(*s)
	}
	return eapu
}

// ClearEntryPostCode clears the value of the "EntryPostCode" field.
func (eapu *ExamApplicationsPMPAUpdate) ClearEntryPostCode() *ExamApplicationsPMPAUpdate {
	eapu.mutation.ClearEntryPostCode()
	return eapu
}

// SetEntryPostDescription sets the "EntryPostDescription" field.
func (eapu *ExamApplicationsPMPAUpdate) SetEntryPostDescription(s string) *ExamApplicationsPMPAUpdate {
	eapu.mutation.SetEntryPostDescription(s)
	return eapu
}

// SetNillableEntryPostDescription sets the "EntryPostDescription" field if the given value is not nil.
func (eapu *ExamApplicationsPMPAUpdate) SetNillableEntryPostDescription(s *string) *ExamApplicationsPMPAUpdate {
	if s != nil {
		eapu.SetEntryPostDescription(*s)
	}
	return eapu
}

// ClearEntryPostDescription clears the value of the "EntryPostDescription" field.
func (eapu *ExamApplicationsPMPAUpdate) ClearEntryPostDescription() *ExamApplicationsPMPAUpdate {
	eapu.mutation.ClearEntryPostDescription()
	return eapu
}

// SetPresentPostCode sets the "PresentPostCode" field.
func (eapu *ExamApplicationsPMPAUpdate) SetPresentPostCode(s string) *ExamApplicationsPMPAUpdate {
	eapu.mutation.SetPresentPostCode(s)
	return eapu
}

// SetNillablePresentPostCode sets the "PresentPostCode" field if the given value is not nil.
func (eapu *ExamApplicationsPMPAUpdate) SetNillablePresentPostCode(s *string) *ExamApplicationsPMPAUpdate {
	if s != nil {
		eapu.SetPresentPostCode(*s)
	}
	return eapu
}

// ClearPresentPostCode clears the value of the "PresentPostCode" field.
func (eapu *ExamApplicationsPMPAUpdate) ClearPresentPostCode() *ExamApplicationsPMPAUpdate {
	eapu.mutation.ClearPresentPostCode()
	return eapu
}

// SetPresentPostDescription sets the "PresentPostDescription" field.
func (eapu *ExamApplicationsPMPAUpdate) SetPresentPostDescription(s string) *ExamApplicationsPMPAUpdate {
	eapu.mutation.SetPresentPostDescription(s)
	return eapu
}

// SetNillablePresentPostDescription sets the "PresentPostDescription" field if the given value is not nil.
func (eapu *ExamApplicationsPMPAUpdate) SetNillablePresentPostDescription(s *string) *ExamApplicationsPMPAUpdate {
	if s != nil {
		eapu.SetPresentPostDescription(*s)
	}
	return eapu
}

// ClearPresentPostDescription clears the value of the "PresentPostDescription" field.
func (eapu *ExamApplicationsPMPAUpdate) ClearPresentPostDescription() *ExamApplicationsPMPAUpdate {
	eapu.mutation.ClearPresentPostDescription()
	return eapu
}

// SetFeederPostCode sets the "FeederPostCode" field.
func (eapu *ExamApplicationsPMPAUpdate) SetFeederPostCode(s string) *ExamApplicationsPMPAUpdate {
	eapu.mutation.SetFeederPostCode(s)
	return eapu
}

// SetNillableFeederPostCode sets the "FeederPostCode" field if the given value is not nil.
func (eapu *ExamApplicationsPMPAUpdate) SetNillableFeederPostCode(s *string) *ExamApplicationsPMPAUpdate {
	if s != nil {
		eapu.SetFeederPostCode(*s)
	}
	return eapu
}

// ClearFeederPostCode clears the value of the "FeederPostCode" field.
func (eapu *ExamApplicationsPMPAUpdate) ClearFeederPostCode() *ExamApplicationsPMPAUpdate {
	eapu.mutation.ClearFeederPostCode()
	return eapu
}

// SetFeederPostDescription sets the "FeederPostDescription" field.
func (eapu *ExamApplicationsPMPAUpdate) SetFeederPostDescription(s string) *ExamApplicationsPMPAUpdate {
	eapu.mutation.SetFeederPostDescription(s)
	return eapu
}

// SetNillableFeederPostDescription sets the "FeederPostDescription" field if the given value is not nil.
func (eapu *ExamApplicationsPMPAUpdate) SetNillableFeederPostDescription(s *string) *ExamApplicationsPMPAUpdate {
	if s != nil {
		eapu.SetFeederPostDescription(*s)
	}
	return eapu
}

// ClearFeederPostDescription clears the value of the "FeederPostDescription" field.
func (eapu *ExamApplicationsPMPAUpdate) ClearFeederPostDescription() *ExamApplicationsPMPAUpdate {
	eapu.mutation.ClearFeederPostDescription()
	return eapu
}

// SetFeederPostJoiningDate sets the "FeederPostJoiningDate" field.
func (eapu *ExamApplicationsPMPAUpdate) SetFeederPostJoiningDate(s string) *ExamApplicationsPMPAUpdate {
	eapu.mutation.SetFeederPostJoiningDate(s)
	return eapu
}

// SetNillableFeederPostJoiningDate sets the "FeederPostJoiningDate" field if the given value is not nil.
func (eapu *ExamApplicationsPMPAUpdate) SetNillableFeederPostJoiningDate(s *string) *ExamApplicationsPMPAUpdate {
	if s != nil {
		eapu.SetFeederPostJoiningDate(*s)
	}
	return eapu
}

// ClearFeederPostJoiningDate clears the value of the "FeederPostJoiningDate" field.
func (eapu *ExamApplicationsPMPAUpdate) ClearFeederPostJoiningDate() *ExamApplicationsPMPAUpdate {
	eapu.mutation.ClearFeederPostJoiningDate()
	return eapu
}

// SetDesignationID sets the "DesignationID" field.
func (eapu *ExamApplicationsPMPAUpdate) SetDesignationID(s string) *ExamApplicationsPMPAUpdate {
	eapu.mutation.SetDesignationID(s)
	return eapu
}

// SetNillableDesignationID sets the "DesignationID" field if the given value is not nil.
func (eapu *ExamApplicationsPMPAUpdate) SetNillableDesignationID(s *string) *ExamApplicationsPMPAUpdate {
	if s != nil {
		eapu.SetDesignationID(*s)
	}
	return eapu
}

// ClearDesignationID clears the value of the "DesignationID" field.
func (eapu *ExamApplicationsPMPAUpdate) ClearDesignationID() *ExamApplicationsPMPAUpdate {
	eapu.mutation.ClearDesignationID()
	return eapu
}

// SetPresentDesignation sets the "PresentDesignation" field.
func (eapu *ExamApplicationsPMPAUpdate) SetPresentDesignation(s string) *ExamApplicationsPMPAUpdate {
	eapu.mutation.SetPresentDesignation(s)
	return eapu
}

// SetNillablePresentDesignation sets the "PresentDesignation" field if the given value is not nil.
func (eapu *ExamApplicationsPMPAUpdate) SetNillablePresentDesignation(s *string) *ExamApplicationsPMPAUpdate {
	if s != nil {
		eapu.SetPresentDesignation(*s)
	}
	return eapu
}

// ClearPresentDesignation clears the value of the "PresentDesignation" field.
func (eapu *ExamApplicationsPMPAUpdate) ClearPresentDesignation() *ExamApplicationsPMPAUpdate {
	eapu.mutation.ClearPresentDesignation()
	return eapu
}

// SetEducationCode sets the "EducationCode" field.
func (eapu *ExamApplicationsPMPAUpdate) SetEducationCode(s string) *ExamApplicationsPMPAUpdate {
	eapu.mutation.SetEducationCode(s)
	return eapu
}

// SetNillableEducationCode sets the "EducationCode" field if the given value is not nil.
func (eapu *ExamApplicationsPMPAUpdate) SetNillableEducationCode(s *string) *ExamApplicationsPMPAUpdate {
	if s != nil {
		eapu.SetEducationCode(*s)
	}
	return eapu
}

// ClearEducationCode clears the value of the "EducationCode" field.
func (eapu *ExamApplicationsPMPAUpdate) ClearEducationCode() *ExamApplicationsPMPAUpdate {
	eapu.mutation.ClearEducationCode()
	return eapu
}

// SetEducationDescription sets the "EducationDescription" field.
func (eapu *ExamApplicationsPMPAUpdate) SetEducationDescription(s string) *ExamApplicationsPMPAUpdate {
	eapu.mutation.SetEducationDescription(s)
	return eapu
}

// SetNillableEducationDescription sets the "EducationDescription" field if the given value is not nil.
func (eapu *ExamApplicationsPMPAUpdate) SetNillableEducationDescription(s *string) *ExamApplicationsPMPAUpdate {
	if s != nil {
		eapu.SetEducationDescription(*s)
	}
	return eapu
}

// ClearEducationDescription clears the value of the "EducationDescription" field.
func (eapu *ExamApplicationsPMPAUpdate) ClearEducationDescription() *ExamApplicationsPMPAUpdate {
	eapu.mutation.ClearEducationDescription()
	return eapu
}

// SetFacilityUniqueID sets the "FacilityUniqueID" field.
func (eapu *ExamApplicationsPMPAUpdate) SetFacilityUniqueID(s string) *ExamApplicationsPMPAUpdate {
	eapu.mutation.SetFacilityUniqueID(s)
	return eapu
}

// SetNillableFacilityUniqueID sets the "FacilityUniqueID" field if the given value is not nil.
func (eapu *ExamApplicationsPMPAUpdate) SetNillableFacilityUniqueID(s *string) *ExamApplicationsPMPAUpdate {
	if s != nil {
		eapu.SetFacilityUniqueID(*s)
	}
	return eapu
}

// ClearFacilityUniqueID clears the value of the "FacilityUniqueID" field.
func (eapu *ExamApplicationsPMPAUpdate) ClearFacilityUniqueID() *ExamApplicationsPMPAUpdate {
	eapu.mutation.ClearFacilityUniqueID()
	return eapu
}

// SetWorkingOfficePincode sets the "WorkingOfficePincode" field.
func (eapu *ExamApplicationsPMPAUpdate) SetWorkingOfficePincode(i int32) *ExamApplicationsPMPAUpdate {
	eapu.mutation.ResetWorkingOfficePincode()
	eapu.mutation.SetWorkingOfficePincode(i)
	return eapu
}

// SetNillableWorkingOfficePincode sets the "WorkingOfficePincode" field if the given value is not nil.
func (eapu *ExamApplicationsPMPAUpdate) SetNillableWorkingOfficePincode(i *int32) *ExamApplicationsPMPAUpdate {
	if i != nil {
		eapu.SetWorkingOfficePincode(*i)
	}
	return eapu
}

// AddWorkingOfficePincode adds i to the "WorkingOfficePincode" field.
func (eapu *ExamApplicationsPMPAUpdate) AddWorkingOfficePincode(i int32) *ExamApplicationsPMPAUpdate {
	eapu.mutation.AddWorkingOfficePincode(i)
	return eapu
}

// ClearWorkingOfficePincode clears the value of the "WorkingOfficePincode" field.
func (eapu *ExamApplicationsPMPAUpdate) ClearWorkingOfficePincode() *ExamApplicationsPMPAUpdate {
	eapu.mutation.ClearWorkingOfficePincode()
	return eapu
}

// SetWorkingOfficeFacilityID sets the "WorkingOfficeFacilityID" field.
func (eapu *ExamApplicationsPMPAUpdate) SetWorkingOfficeFacilityID(s string) *ExamApplicationsPMPAUpdate {
	eapu.mutation.SetWorkingOfficeFacilityID(s)
	return eapu
}

// SetNillableWorkingOfficeFacilityID sets the "WorkingOfficeFacilityID" field if the given value is not nil.
func (eapu *ExamApplicationsPMPAUpdate) SetNillableWorkingOfficeFacilityID(s *string) *ExamApplicationsPMPAUpdate {
	if s != nil {
		eapu.SetWorkingOfficeFacilityID(*s)
	}
	return eapu
}

// ClearWorkingOfficeFacilityID clears the value of the "WorkingOfficeFacilityID" field.
func (eapu *ExamApplicationsPMPAUpdate) ClearWorkingOfficeFacilityID() *ExamApplicationsPMPAUpdate {
	eapu.mutation.ClearWorkingOfficeFacilityID()
	return eapu
}

// SetWorkingOfficeName sets the "WorkingOfficeName" field.
func (eapu *ExamApplicationsPMPAUpdate) SetWorkingOfficeName(s string) *ExamApplicationsPMPAUpdate {
	eapu.mutation.SetWorkingOfficeName(s)
	return eapu
}

// SetNillableWorkingOfficeName sets the "WorkingOfficeName" field if the given value is not nil.
func (eapu *ExamApplicationsPMPAUpdate) SetNillableWorkingOfficeName(s *string) *ExamApplicationsPMPAUpdate {
	if s != nil {
		eapu.SetWorkingOfficeName(*s)
	}
	return eapu
}

// ClearWorkingOfficeName clears the value of the "WorkingOfficeName" field.
func (eapu *ExamApplicationsPMPAUpdate) ClearWorkingOfficeName() *ExamApplicationsPMPAUpdate {
	eapu.mutation.ClearWorkingOfficeName()
	return eapu
}

// SetWorkingOfficeCircleFacilityID sets the "WorkingOfficeCircleFacilityID" field.
func (eapu *ExamApplicationsPMPAUpdate) SetWorkingOfficeCircleFacilityID(s string) *ExamApplicationsPMPAUpdate {
	eapu.mutation.SetWorkingOfficeCircleFacilityID(s)
	return eapu
}

// SetNillableWorkingOfficeCircleFacilityID sets the "WorkingOfficeCircleFacilityID" field if the given value is not nil.
func (eapu *ExamApplicationsPMPAUpdate) SetNillableWorkingOfficeCircleFacilityID(s *string) *ExamApplicationsPMPAUpdate {
	if s != nil {
		eapu.SetWorkingOfficeCircleFacilityID(*s)
	}
	return eapu
}

// ClearWorkingOfficeCircleFacilityID clears the value of the "WorkingOfficeCircleFacilityID" field.
func (eapu *ExamApplicationsPMPAUpdate) ClearWorkingOfficeCircleFacilityID() *ExamApplicationsPMPAUpdate {
	eapu.mutation.ClearWorkingOfficeCircleFacilityID()
	return eapu
}

// SetWorkingOfficeCircleName sets the "WorkingOfficeCircleName" field.
func (eapu *ExamApplicationsPMPAUpdate) SetWorkingOfficeCircleName(s string) *ExamApplicationsPMPAUpdate {
	eapu.mutation.SetWorkingOfficeCircleName(s)
	return eapu
}

// SetNillableWorkingOfficeCircleName sets the "WorkingOfficeCircleName" field if the given value is not nil.
func (eapu *ExamApplicationsPMPAUpdate) SetNillableWorkingOfficeCircleName(s *string) *ExamApplicationsPMPAUpdate {
	if s != nil {
		eapu.SetWorkingOfficeCircleName(*s)
	}
	return eapu
}

// ClearWorkingOfficeCircleName clears the value of the "WorkingOfficeCircleName" field.
func (eapu *ExamApplicationsPMPAUpdate) ClearWorkingOfficeCircleName() *ExamApplicationsPMPAUpdate {
	eapu.mutation.ClearWorkingOfficeCircleName()
	return eapu
}

// SetWorkingOfficeRegionFacilityID sets the "WorkingOfficeRegionFacilityID" field.
func (eapu *ExamApplicationsPMPAUpdate) SetWorkingOfficeRegionFacilityID(s string) *ExamApplicationsPMPAUpdate {
	eapu.mutation.SetWorkingOfficeRegionFacilityID(s)
	return eapu
}

// SetNillableWorkingOfficeRegionFacilityID sets the "WorkingOfficeRegionFacilityID" field if the given value is not nil.
func (eapu *ExamApplicationsPMPAUpdate) SetNillableWorkingOfficeRegionFacilityID(s *string) *ExamApplicationsPMPAUpdate {
	if s != nil {
		eapu.SetWorkingOfficeRegionFacilityID(*s)
	}
	return eapu
}

// ClearWorkingOfficeRegionFacilityID clears the value of the "WorkingOfficeRegionFacilityID" field.
func (eapu *ExamApplicationsPMPAUpdate) ClearWorkingOfficeRegionFacilityID() *ExamApplicationsPMPAUpdate {
	eapu.mutation.ClearWorkingOfficeRegionFacilityID()
	return eapu
}

// SetWorkingOfficeRegionName sets the "WorkingOfficeRegionName" field.
func (eapu *ExamApplicationsPMPAUpdate) SetWorkingOfficeRegionName(s string) *ExamApplicationsPMPAUpdate {
	eapu.mutation.SetWorkingOfficeRegionName(s)
	return eapu
}

// SetNillableWorkingOfficeRegionName sets the "WorkingOfficeRegionName" field if the given value is not nil.
func (eapu *ExamApplicationsPMPAUpdate) SetNillableWorkingOfficeRegionName(s *string) *ExamApplicationsPMPAUpdate {
	if s != nil {
		eapu.SetWorkingOfficeRegionName(*s)
	}
	return eapu
}

// ClearWorkingOfficeRegionName clears the value of the "WorkingOfficeRegionName" field.
func (eapu *ExamApplicationsPMPAUpdate) ClearWorkingOfficeRegionName() *ExamApplicationsPMPAUpdate {
	eapu.mutation.ClearWorkingOfficeRegionName()
	return eapu
}

// SetWorkingOfficeDivisionFacilityID sets the "WorkingOfficeDivisionFacilityID" field.
func (eapu *ExamApplicationsPMPAUpdate) SetWorkingOfficeDivisionFacilityID(s string) *ExamApplicationsPMPAUpdate {
	eapu.mutation.SetWorkingOfficeDivisionFacilityID(s)
	return eapu
}

// SetNillableWorkingOfficeDivisionFacilityID sets the "WorkingOfficeDivisionFacilityID" field if the given value is not nil.
func (eapu *ExamApplicationsPMPAUpdate) SetNillableWorkingOfficeDivisionFacilityID(s *string) *ExamApplicationsPMPAUpdate {
	if s != nil {
		eapu.SetWorkingOfficeDivisionFacilityID(*s)
	}
	return eapu
}

// ClearWorkingOfficeDivisionFacilityID clears the value of the "WorkingOfficeDivisionFacilityID" field.
func (eapu *ExamApplicationsPMPAUpdate) ClearWorkingOfficeDivisionFacilityID() *ExamApplicationsPMPAUpdate {
	eapu.mutation.ClearWorkingOfficeDivisionFacilityID()
	return eapu
}

// SetWorkingOfficeDivisionName sets the "WorkingOfficeDivisionName" field.
func (eapu *ExamApplicationsPMPAUpdate) SetWorkingOfficeDivisionName(s string) *ExamApplicationsPMPAUpdate {
	eapu.mutation.SetWorkingOfficeDivisionName(s)
	return eapu
}

// SetNillableWorkingOfficeDivisionName sets the "WorkingOfficeDivisionName" field if the given value is not nil.
func (eapu *ExamApplicationsPMPAUpdate) SetNillableWorkingOfficeDivisionName(s *string) *ExamApplicationsPMPAUpdate {
	if s != nil {
		eapu.SetWorkingOfficeDivisionName(*s)
	}
	return eapu
}

// ClearWorkingOfficeDivisionName clears the value of the "WorkingOfficeDivisionName" field.
func (eapu *ExamApplicationsPMPAUpdate) ClearWorkingOfficeDivisionName() *ExamApplicationsPMPAUpdate {
	eapu.mutation.ClearWorkingOfficeDivisionName()
	return eapu
}

// SetReportingOfficeFacilityID sets the "ReportingOfficeFacilityID" field.
func (eapu *ExamApplicationsPMPAUpdate) SetReportingOfficeFacilityID(s string) *ExamApplicationsPMPAUpdate {
	eapu.mutation.SetReportingOfficeFacilityID(s)
	return eapu
}

// SetNillableReportingOfficeFacilityID sets the "ReportingOfficeFacilityID" field if the given value is not nil.
func (eapu *ExamApplicationsPMPAUpdate) SetNillableReportingOfficeFacilityID(s *string) *ExamApplicationsPMPAUpdate {
	if s != nil {
		eapu.SetReportingOfficeFacilityID(*s)
	}
	return eapu
}

// ClearReportingOfficeFacilityID clears the value of the "ReportingOfficeFacilityID" field.
func (eapu *ExamApplicationsPMPAUpdate) ClearReportingOfficeFacilityID() *ExamApplicationsPMPAUpdate {
	eapu.mutation.ClearReportingOfficeFacilityID()
	return eapu
}

// SetReportingOfficeName sets the "ReportingOfficeName" field.
func (eapu *ExamApplicationsPMPAUpdate) SetReportingOfficeName(s string) *ExamApplicationsPMPAUpdate {
	eapu.mutation.SetReportingOfficeName(s)
	return eapu
}

// SetNillableReportingOfficeName sets the "ReportingOfficeName" field if the given value is not nil.
func (eapu *ExamApplicationsPMPAUpdate) SetNillableReportingOfficeName(s *string) *ExamApplicationsPMPAUpdate {
	if s != nil {
		eapu.SetReportingOfficeName(*s)
	}
	return eapu
}

// ClearReportingOfficeName clears the value of the "ReportingOfficeName" field.
func (eapu *ExamApplicationsPMPAUpdate) ClearReportingOfficeName() *ExamApplicationsPMPAUpdate {
	eapu.mutation.ClearReportingOfficeName()
	return eapu
}

// SetLienControllingOfficeID sets the "LienControllingOfficeID" field.
func (eapu *ExamApplicationsPMPAUpdate) SetLienControllingOfficeID(s string) *ExamApplicationsPMPAUpdate {
	eapu.mutation.SetLienControllingOfficeID(s)
	return eapu
}

// SetNillableLienControllingOfficeID sets the "LienControllingOfficeID" field if the given value is not nil.
func (eapu *ExamApplicationsPMPAUpdate) SetNillableLienControllingOfficeID(s *string) *ExamApplicationsPMPAUpdate {
	if s != nil {
		eapu.SetLienControllingOfficeID(*s)
	}
	return eapu
}

// ClearLienControllingOfficeID clears the value of the "LienControllingOfficeID" field.
func (eapu *ExamApplicationsPMPAUpdate) ClearLienControllingOfficeID() *ExamApplicationsPMPAUpdate {
	eapu.mutation.ClearLienControllingOfficeID()
	return eapu
}

// SetLienControllingOfficeName sets the "LienControllingOfficeName" field.
func (eapu *ExamApplicationsPMPAUpdate) SetLienControllingOfficeName(s string) *ExamApplicationsPMPAUpdate {
	eapu.mutation.SetLienControllingOfficeName(s)
	return eapu
}

// SetNillableLienControllingOfficeName sets the "LienControllingOfficeName" field if the given value is not nil.
func (eapu *ExamApplicationsPMPAUpdate) SetNillableLienControllingOfficeName(s *string) *ExamApplicationsPMPAUpdate {
	if s != nil {
		eapu.SetLienControllingOfficeName(*s)
	}
	return eapu
}

// ClearLienControllingOfficeName clears the value of the "LienControllingOfficeName" field.
func (eapu *ExamApplicationsPMPAUpdate) ClearLienControllingOfficeName() *ExamApplicationsPMPAUpdate {
	eapu.mutation.ClearLienControllingOfficeName()
	return eapu
}

// SetInDeputation sets the "InDeputation" field.
func (eapu *ExamApplicationsPMPAUpdate) SetInDeputation(s string) *ExamApplicationsPMPAUpdate {
	eapu.mutation.SetInDeputation(s)
	return eapu
}

// SetNillableInDeputation sets the "InDeputation" field if the given value is not nil.
func (eapu *ExamApplicationsPMPAUpdate) SetNillableInDeputation(s *string) *ExamApplicationsPMPAUpdate {
	if s != nil {
		eapu.SetInDeputation(*s)
	}
	return eapu
}

// ClearInDeputation clears the value of the "InDeputation" field.
func (eapu *ExamApplicationsPMPAUpdate) ClearInDeputation() *ExamApplicationsPMPAUpdate {
	eapu.mutation.ClearInDeputation()
	return eapu
}

// SetDeputationType sets the "DeputationType" field.
func (eapu *ExamApplicationsPMPAUpdate) SetDeputationType(s string) *ExamApplicationsPMPAUpdate {
	eapu.mutation.SetDeputationType(s)
	return eapu
}

// SetNillableDeputationType sets the "DeputationType" field if the given value is not nil.
func (eapu *ExamApplicationsPMPAUpdate) SetNillableDeputationType(s *string) *ExamApplicationsPMPAUpdate {
	if s != nil {
		eapu.SetDeputationType(*s)
	}
	return eapu
}

// ClearDeputationType clears the value of the "DeputationType" field.
func (eapu *ExamApplicationsPMPAUpdate) ClearDeputationType() *ExamApplicationsPMPAUpdate {
	eapu.mutation.ClearDeputationType()
	return eapu
}

// SetDeputationOfficeUniqueId sets the "DeputationOfficeUniqueId" field.
func (eapu *ExamApplicationsPMPAUpdate) SetDeputationOfficeUniqueId(s string) *ExamApplicationsPMPAUpdate {
	eapu.mutation.SetDeputationOfficeUniqueId(s)
	return eapu
}

// SetNillableDeputationOfficeUniqueId sets the "DeputationOfficeUniqueId" field if the given value is not nil.
func (eapu *ExamApplicationsPMPAUpdate) SetNillableDeputationOfficeUniqueId(s *string) *ExamApplicationsPMPAUpdate {
	if s != nil {
		eapu.SetDeputationOfficeUniqueId(*s)
	}
	return eapu
}

// ClearDeputationOfficeUniqueId clears the value of the "DeputationOfficeUniqueId" field.
func (eapu *ExamApplicationsPMPAUpdate) ClearDeputationOfficeUniqueId() *ExamApplicationsPMPAUpdate {
	eapu.mutation.ClearDeputationOfficeUniqueId()
	return eapu
}

// SetDeputationOfficeFacilityID sets the "DeputationOfficeFacilityID" field.
func (eapu *ExamApplicationsPMPAUpdate) SetDeputationOfficeFacilityID(s string) *ExamApplicationsPMPAUpdate {
	eapu.mutation.SetDeputationOfficeFacilityID(s)
	return eapu
}

// SetNillableDeputationOfficeFacilityID sets the "DeputationOfficeFacilityID" field if the given value is not nil.
func (eapu *ExamApplicationsPMPAUpdate) SetNillableDeputationOfficeFacilityID(s *string) *ExamApplicationsPMPAUpdate {
	if s != nil {
		eapu.SetDeputationOfficeFacilityID(*s)
	}
	return eapu
}

// ClearDeputationOfficeFacilityID clears the value of the "DeputationOfficeFacilityID" field.
func (eapu *ExamApplicationsPMPAUpdate) ClearDeputationOfficeFacilityID() *ExamApplicationsPMPAUpdate {
	eapu.mutation.ClearDeputationOfficeFacilityID()
	return eapu
}

// SetDeputationOfficeName sets the "DeputationOfficeName" field.
func (eapu *ExamApplicationsPMPAUpdate) SetDeputationOfficeName(s string) *ExamApplicationsPMPAUpdate {
	eapu.mutation.SetDeputationOfficeName(s)
	return eapu
}

// SetNillableDeputationOfficeName sets the "DeputationOfficeName" field if the given value is not nil.
func (eapu *ExamApplicationsPMPAUpdate) SetNillableDeputationOfficeName(s *string) *ExamApplicationsPMPAUpdate {
	if s != nil {
		eapu.SetDeputationOfficeName(*s)
	}
	return eapu
}

// ClearDeputationOfficeName clears the value of the "DeputationOfficeName" field.
func (eapu *ExamApplicationsPMPAUpdate) ClearDeputationOfficeName() *ExamApplicationsPMPAUpdate {
	eapu.mutation.ClearDeputationOfficeName()
	return eapu
}

// SetDeputationControllingOfficeID sets the "DeputationControllingOfficeID" field.
func (eapu *ExamApplicationsPMPAUpdate) SetDeputationControllingOfficeID(s string) *ExamApplicationsPMPAUpdate {
	eapu.mutation.SetDeputationControllingOfficeID(s)
	return eapu
}

// SetNillableDeputationControllingOfficeID sets the "DeputationControllingOfficeID" field if the given value is not nil.
func (eapu *ExamApplicationsPMPAUpdate) SetNillableDeputationControllingOfficeID(s *string) *ExamApplicationsPMPAUpdate {
	if s != nil {
		eapu.SetDeputationControllingOfficeID(*s)
	}
	return eapu
}

// ClearDeputationControllingOfficeID clears the value of the "DeputationControllingOfficeID" field.
func (eapu *ExamApplicationsPMPAUpdate) ClearDeputationControllingOfficeID() *ExamApplicationsPMPAUpdate {
	eapu.mutation.ClearDeputationControllingOfficeID()
	return eapu
}

// SetDeputationControllingOfficeName sets the "DeputationControllingOfficeName" field.
func (eapu *ExamApplicationsPMPAUpdate) SetDeputationControllingOfficeName(s string) *ExamApplicationsPMPAUpdate {
	eapu.mutation.SetDeputationControllingOfficeName(s)
	return eapu
}

// SetNillableDeputationControllingOfficeName sets the "DeputationControllingOfficeName" field if the given value is not nil.
func (eapu *ExamApplicationsPMPAUpdate) SetNillableDeputationControllingOfficeName(s *string) *ExamApplicationsPMPAUpdate {
	if s != nil {
		eapu.SetDeputationControllingOfficeName(*s)
	}
	return eapu
}

// ClearDeputationControllingOfficeName clears the value of the "DeputationControllingOfficeName" field.
func (eapu *ExamApplicationsPMPAUpdate) ClearDeputationControllingOfficeName() *ExamApplicationsPMPAUpdate {
	eapu.mutation.ClearDeputationControllingOfficeName()
	return eapu
}

// SetControllingOfficeFacilityID sets the "ControllingOfficeFacilityID" field.
func (eapu *ExamApplicationsPMPAUpdate) SetControllingOfficeFacilityID(s string) *ExamApplicationsPMPAUpdate {
	eapu.mutation.SetControllingOfficeFacilityID(s)
	return eapu
}

// SetNillableControllingOfficeFacilityID sets the "ControllingOfficeFacilityID" field if the given value is not nil.
func (eapu *ExamApplicationsPMPAUpdate) SetNillableControllingOfficeFacilityID(s *string) *ExamApplicationsPMPAUpdate {
	if s != nil {
		eapu.SetControllingOfficeFacilityID(*s)
	}
	return eapu
}

// ClearControllingOfficeFacilityID clears the value of the "ControllingOfficeFacilityID" field.
func (eapu *ExamApplicationsPMPAUpdate) ClearControllingOfficeFacilityID() *ExamApplicationsPMPAUpdate {
	eapu.mutation.ClearControllingOfficeFacilityID()
	return eapu
}

// SetControllingOfficeName sets the "ControllingOfficeName" field.
func (eapu *ExamApplicationsPMPAUpdate) SetControllingOfficeName(s string) *ExamApplicationsPMPAUpdate {
	eapu.mutation.SetControllingOfficeName(s)
	return eapu
}

// SetNillableControllingOfficeName sets the "ControllingOfficeName" field if the given value is not nil.
func (eapu *ExamApplicationsPMPAUpdate) SetNillableControllingOfficeName(s *string) *ExamApplicationsPMPAUpdate {
	if s != nil {
		eapu.SetControllingOfficeName(*s)
	}
	return eapu
}

// ClearControllingOfficeName clears the value of the "ControllingOfficeName" field.
func (eapu *ExamApplicationsPMPAUpdate) ClearControllingOfficeName() *ExamApplicationsPMPAUpdate {
	eapu.mutation.ClearControllingOfficeName()
	return eapu
}

// SetNodalOfficeFacilityID sets the "NodalOfficeFacilityID" field.
func (eapu *ExamApplicationsPMPAUpdate) SetNodalOfficeFacilityID(s string) *ExamApplicationsPMPAUpdate {
	eapu.mutation.SetNodalOfficeFacilityID(s)
	return eapu
}

// SetNillableNodalOfficeFacilityID sets the "NodalOfficeFacilityID" field if the given value is not nil.
func (eapu *ExamApplicationsPMPAUpdate) SetNillableNodalOfficeFacilityID(s *string) *ExamApplicationsPMPAUpdate {
	if s != nil {
		eapu.SetNodalOfficeFacilityID(*s)
	}
	return eapu
}

// ClearNodalOfficeFacilityID clears the value of the "NodalOfficeFacilityID" field.
func (eapu *ExamApplicationsPMPAUpdate) ClearNodalOfficeFacilityID() *ExamApplicationsPMPAUpdate {
	eapu.mutation.ClearNodalOfficeFacilityID()
	return eapu
}

// SetNodalOfficeName sets the "NodalOfficeName" field.
func (eapu *ExamApplicationsPMPAUpdate) SetNodalOfficeName(s string) *ExamApplicationsPMPAUpdate {
	eapu.mutation.SetNodalOfficeName(s)
	return eapu
}

// SetNillableNodalOfficeName sets the "NodalOfficeName" field if the given value is not nil.
func (eapu *ExamApplicationsPMPAUpdate) SetNillableNodalOfficeName(s *string) *ExamApplicationsPMPAUpdate {
	if s != nil {
		eapu.SetNodalOfficeName(*s)
	}
	return eapu
}

// ClearNodalOfficeName clears the value of the "NodalOfficeName" field.
func (eapu *ExamApplicationsPMPAUpdate) ClearNodalOfficeName() *ExamApplicationsPMPAUpdate {
	eapu.mutation.ClearNodalOfficeName()
	return eapu
}

// SetExamCityCenterCode sets the "ExamCityCenterCode" field.
func (eapu *ExamApplicationsPMPAUpdate) SetExamCityCenterCode(i int32) *ExamApplicationsPMPAUpdate {
	eapu.mutation.SetExamCityCenterCode(i)
	return eapu
}

// SetNillableExamCityCenterCode sets the "ExamCityCenterCode" field if the given value is not nil.
func (eapu *ExamApplicationsPMPAUpdate) SetNillableExamCityCenterCode(i *int32) *ExamApplicationsPMPAUpdate {
	if i != nil {
		eapu.SetExamCityCenterCode(*i)
	}
	return eapu
}

// ClearExamCityCenterCode clears the value of the "ExamCityCenterCode" field.
func (eapu *ExamApplicationsPMPAUpdate) ClearExamCityCenterCode() *ExamApplicationsPMPAUpdate {
	eapu.mutation.ClearExamCityCenterCode()
	return eapu
}

// SetCenterFacilityId sets the "CenterFacilityId" field.
func (eapu *ExamApplicationsPMPAUpdate) SetCenterFacilityId(s string) *ExamApplicationsPMPAUpdate {
	eapu.mutation.SetCenterFacilityId(s)
	return eapu
}

// SetNillableCenterFacilityId sets the "CenterFacilityId" field if the given value is not nil.
func (eapu *ExamApplicationsPMPAUpdate) SetNillableCenterFacilityId(s *string) *ExamApplicationsPMPAUpdate {
	if s != nil {
		eapu.SetCenterFacilityId(*s)
	}
	return eapu
}

// ClearCenterFacilityId clears the value of the "CenterFacilityId" field.
func (eapu *ExamApplicationsPMPAUpdate) ClearCenterFacilityId() *ExamApplicationsPMPAUpdate {
	eapu.mutation.ClearCenterFacilityId()
	return eapu
}

// SetCentrePreference sets the "CentrePreference" field.
func (eapu *ExamApplicationsPMPAUpdate) SetCentrePreference(s string) *ExamApplicationsPMPAUpdate {
	eapu.mutation.SetCentrePreference(s)
	return eapu
}

// SetNillableCentrePreference sets the "CentrePreference" field if the given value is not nil.
func (eapu *ExamApplicationsPMPAUpdate) SetNillableCentrePreference(s *string) *ExamApplicationsPMPAUpdate {
	if s != nil {
		eapu.SetCentrePreference(*s)
	}
	return eapu
}

// ClearCentrePreference clears the value of the "CentrePreference" field.
func (eapu *ExamApplicationsPMPAUpdate) ClearCentrePreference() *ExamApplicationsPMPAUpdate {
	eapu.mutation.ClearCentrePreference()
	return eapu
}

// SetSignature sets the "Signature" field.
func (eapu *ExamApplicationsPMPAUpdate) SetSignature(s string) *ExamApplicationsPMPAUpdate {
	eapu.mutation.SetSignature(s)
	return eapu
}

// SetNillableSignature sets the "Signature" field if the given value is not nil.
func (eapu *ExamApplicationsPMPAUpdate) SetNillableSignature(s *string) *ExamApplicationsPMPAUpdate {
	if s != nil {
		eapu.SetSignature(*s)
	}
	return eapu
}

// ClearSignature clears the value of the "Signature" field.
func (eapu *ExamApplicationsPMPAUpdate) ClearSignature() *ExamApplicationsPMPAUpdate {
	eapu.mutation.ClearSignature()
	return eapu
}

// SetPhoto sets the "Photo" field.
func (eapu *ExamApplicationsPMPAUpdate) SetPhoto(s string) *ExamApplicationsPMPAUpdate {
	eapu.mutation.SetPhoto(s)
	return eapu
}

// SetNillablePhoto sets the "Photo" field if the given value is not nil.
func (eapu *ExamApplicationsPMPAUpdate) SetNillablePhoto(s *string) *ExamApplicationsPMPAUpdate {
	if s != nil {
		eapu.SetPhoto(*s)
	}
	return eapu
}

// ClearPhoto clears the value of the "Photo" field.
func (eapu *ExamApplicationsPMPAUpdate) ClearPhoto() *ExamApplicationsPMPAUpdate {
	eapu.mutation.ClearPhoto()
	return eapu
}

// SetCandidatePhoto sets the "CandidatePhoto" field.
func (eapu *ExamApplicationsPMPAUpdate) SetCandidatePhoto(b []byte) *ExamApplicationsPMPAUpdate {
	eapu.mutation.SetCandidatePhoto(b)
	return eapu
}

// ClearCandidatePhoto clears the value of the "CandidatePhoto" field.
func (eapu *ExamApplicationsPMPAUpdate) ClearCandidatePhoto() *ExamApplicationsPMPAUpdate {
	eapu.mutation.ClearCandidatePhoto()
	return eapu
}

// SetCandidateSignature sets the "CandidateSignature" field.
func (eapu *ExamApplicationsPMPAUpdate) SetCandidateSignature(b []byte) *ExamApplicationsPMPAUpdate {
	eapu.mutation.SetCandidateSignature(b)
	return eapu
}

// ClearCandidateSignature clears the value of the "CandidateSignature" field.
func (eapu *ExamApplicationsPMPAUpdate) ClearCandidateSignature() *ExamApplicationsPMPAUpdate {
	eapu.mutation.ClearCandidateSignature()
	return eapu
}

// SetSignaturePath sets the "SignaturePath" field.
func (eapu *ExamApplicationsPMPAUpdate) SetSignaturePath(s string) *ExamApplicationsPMPAUpdate {
	eapu.mutation.SetSignaturePath(s)
	return eapu
}

// SetNillableSignaturePath sets the "SignaturePath" field if the given value is not nil.
func (eapu *ExamApplicationsPMPAUpdate) SetNillableSignaturePath(s *string) *ExamApplicationsPMPAUpdate {
	if s != nil {
		eapu.SetSignaturePath(*s)
	}
	return eapu
}

// ClearSignaturePath clears the value of the "SignaturePath" field.
func (eapu *ExamApplicationsPMPAUpdate) ClearSignaturePath() *ExamApplicationsPMPAUpdate {
	eapu.mutation.ClearSignaturePath()
	return eapu
}

// SetPhotoPath sets the "PhotoPath" field.
func (eapu *ExamApplicationsPMPAUpdate) SetPhotoPath(s string) *ExamApplicationsPMPAUpdate {
	eapu.mutation.SetPhotoPath(s)
	return eapu
}

// SetNillablePhotoPath sets the "PhotoPath" field if the given value is not nil.
func (eapu *ExamApplicationsPMPAUpdate) SetNillablePhotoPath(s *string) *ExamApplicationsPMPAUpdate {
	if s != nil {
		eapu.SetPhotoPath(*s)
	}
	return eapu
}

// ClearPhotoPath clears the value of the "PhotoPath" field.
func (eapu *ExamApplicationsPMPAUpdate) ClearPhotoPath() *ExamApplicationsPMPAUpdate {
	eapu.mutation.ClearPhotoPath()
	return eapu
}

// SetTempHallTicket sets the "TempHallTicket" field.
func (eapu *ExamApplicationsPMPAUpdate) SetTempHallTicket(s string) *ExamApplicationsPMPAUpdate {
	eapu.mutation.SetTempHallTicket(s)
	return eapu
}

// SetNillableTempHallTicket sets the "TempHallTicket" field if the given value is not nil.
func (eapu *ExamApplicationsPMPAUpdate) SetNillableTempHallTicket(s *string) *ExamApplicationsPMPAUpdate {
	if s != nil {
		eapu.SetTempHallTicket(*s)
	}
	return eapu
}

// ClearTempHallTicket clears the value of the "TempHallTicket" field.
func (eapu *ExamApplicationsPMPAUpdate) ClearTempHallTicket() *ExamApplicationsPMPAUpdate {
	eapu.mutation.ClearTempHallTicket()
	return eapu
}

// SetCandidateRemarks sets the "CandidateRemarks" field.
func (eapu *ExamApplicationsPMPAUpdate) SetCandidateRemarks(s string) *ExamApplicationsPMPAUpdate {
	eapu.mutation.SetCandidateRemarks(s)
	return eapu
}

// SetNillableCandidateRemarks sets the "CandidateRemarks" field if the given value is not nil.
func (eapu *ExamApplicationsPMPAUpdate) SetNillableCandidateRemarks(s *string) *ExamApplicationsPMPAUpdate {
	if s != nil {
		eapu.SetCandidateRemarks(*s)
	}
	return eapu
}

// ClearCandidateRemarks clears the value of the "CandidateRemarks" field.
func (eapu *ExamApplicationsPMPAUpdate) ClearCandidateRemarks() *ExamApplicationsPMPAUpdate {
	eapu.mutation.ClearCandidateRemarks()
	return eapu
}

// SetVAGeneralRemarks sets the "VAGeneralRemarks" field.
func (eapu *ExamApplicationsPMPAUpdate) SetVAGeneralRemarks(s string) *ExamApplicationsPMPAUpdate {
	eapu.mutation.SetVAGeneralRemarks(s)
	return eapu
}

// SetNillableVAGeneralRemarks sets the "VAGeneralRemarks" field if the given value is not nil.
func (eapu *ExamApplicationsPMPAUpdate) SetNillableVAGeneralRemarks(s *string) *ExamApplicationsPMPAUpdate {
	if s != nil {
		eapu.SetVAGeneralRemarks(*s)
	}
	return eapu
}

// ClearVAGeneralRemarks clears the value of the "VAGeneralRemarks" field.
func (eapu *ExamApplicationsPMPAUpdate) ClearVAGeneralRemarks() *ExamApplicationsPMPAUpdate {
	eapu.mutation.ClearVAGeneralRemarks()
	return eapu
}

// SetCAGeneralRemarks sets the "CAGeneralRemarks" field.
func (eapu *ExamApplicationsPMPAUpdate) SetCAGeneralRemarks(s string) *ExamApplicationsPMPAUpdate {
	eapu.mutation.SetCAGeneralRemarks(s)
	return eapu
}

// SetNillableCAGeneralRemarks sets the "CAGeneralRemarks" field if the given value is not nil.
func (eapu *ExamApplicationsPMPAUpdate) SetNillableCAGeneralRemarks(s *string) *ExamApplicationsPMPAUpdate {
	if s != nil {
		eapu.SetCAGeneralRemarks(*s)
	}
	return eapu
}

// ClearCAGeneralRemarks clears the value of the "CAGeneralRemarks" field.
func (eapu *ExamApplicationsPMPAUpdate) ClearCAGeneralRemarks() *ExamApplicationsPMPAUpdate {
	eapu.mutation.ClearCAGeneralRemarks()
	return eapu
}

// SetNAGeneralRemarks sets the "NAGeneralRemarks" field.
func (eapu *ExamApplicationsPMPAUpdate) SetNAGeneralRemarks(s string) *ExamApplicationsPMPAUpdate {
	eapu.mutation.SetNAGeneralRemarks(s)
	return eapu
}

// SetNillableNAGeneralRemarks sets the "NAGeneralRemarks" field if the given value is not nil.
func (eapu *ExamApplicationsPMPAUpdate) SetNillableNAGeneralRemarks(s *string) *ExamApplicationsPMPAUpdate {
	if s != nil {
		eapu.SetNAGeneralRemarks(*s)
	}
	return eapu
}

// ClearNAGeneralRemarks clears the value of the "NAGeneralRemarks" field.
func (eapu *ExamApplicationsPMPAUpdate) ClearNAGeneralRemarks() *ExamApplicationsPMPAUpdate {
	eapu.mutation.ClearNAGeneralRemarks()
	return eapu
}

// SetApplicationStatus sets the "ApplicationStatus" field.
func (eapu *ExamApplicationsPMPAUpdate) SetApplicationStatus(s string) *ExamApplicationsPMPAUpdate {
	eapu.mutation.SetApplicationStatus(s)
	return eapu
}

// SetNillableApplicationStatus sets the "ApplicationStatus" field if the given value is not nil.
func (eapu *ExamApplicationsPMPAUpdate) SetNillableApplicationStatus(s *string) *ExamApplicationsPMPAUpdate {
	if s != nil {
		eapu.SetApplicationStatus(*s)
	}
	return eapu
}

// ClearApplicationStatus clears the value of the "ApplicationStatus" field.
func (eapu *ExamApplicationsPMPAUpdate) ClearApplicationStatus() *ExamApplicationsPMPAUpdate {
	eapu.mutation.ClearApplicationStatus()
	return eapu
}

// SetStatus sets the "Status" field.
func (eapu *ExamApplicationsPMPAUpdate) SetStatus(s string) *ExamApplicationsPMPAUpdate {
	eapu.mutation.SetStatus(s)
	return eapu
}

// SetNillableStatus sets the "Status" field if the given value is not nil.
func (eapu *ExamApplicationsPMPAUpdate) SetNillableStatus(s *string) *ExamApplicationsPMPAUpdate {
	if s != nil {
		eapu.SetStatus(*s)
	}
	return eapu
}

// ClearStatus clears the value of the "Status" field.
func (eapu *ExamApplicationsPMPAUpdate) ClearStatus() *ExamApplicationsPMPAUpdate {
	eapu.mutation.ClearStatus()
	return eapu
}

// SetVAUserId sets the "VA_UserId" field.
func (eapu *ExamApplicationsPMPAUpdate) SetVAUserId(i int32) *ExamApplicationsPMPAUpdate {
	eapu.mutation.ResetVAUserId()
	eapu.mutation.SetVAUserId(i)
	return eapu
}

// SetNillableVAUserId sets the "VA_UserId" field if the given value is not nil.
func (eapu *ExamApplicationsPMPAUpdate) SetNillableVAUserId(i *int32) *ExamApplicationsPMPAUpdate {
	if i != nil {
		eapu.SetVAUserId(*i)
	}
	return eapu
}

// AddVAUserId adds i to the "VA_UserId" field.
func (eapu *ExamApplicationsPMPAUpdate) AddVAUserId(i int32) *ExamApplicationsPMPAUpdate {
	eapu.mutation.AddVAUserId(i)
	return eapu
}

// ClearVAUserId clears the value of the "VA_UserId" field.
func (eapu *ExamApplicationsPMPAUpdate) ClearVAUserId() *ExamApplicationsPMPAUpdate {
	eapu.mutation.ClearVAUserId()
	return eapu
}

// SetVAUserName sets the "VA_UserName" field.
func (eapu *ExamApplicationsPMPAUpdate) SetVAUserName(s string) *ExamApplicationsPMPAUpdate {
	eapu.mutation.SetVAUserName(s)
	return eapu
}

// SetNillableVAUserName sets the "VA_UserName" field if the given value is not nil.
func (eapu *ExamApplicationsPMPAUpdate) SetNillableVAUserName(s *string) *ExamApplicationsPMPAUpdate {
	if s != nil {
		eapu.SetVAUserName(*s)
	}
	return eapu
}

// ClearVAUserName clears the value of the "VA_UserName" field.
func (eapu *ExamApplicationsPMPAUpdate) ClearVAUserName() *ExamApplicationsPMPAUpdate {
	eapu.mutation.ClearVAUserName()
	return eapu
}

// SetVAEmployeeID sets the "VA_EmployeeID" field.
func (eapu *ExamApplicationsPMPAUpdate) SetVAEmployeeID(s string) *ExamApplicationsPMPAUpdate {
	eapu.mutation.SetVAEmployeeID(s)
	return eapu
}

// SetNillableVAEmployeeID sets the "VA_EmployeeID" field if the given value is not nil.
func (eapu *ExamApplicationsPMPAUpdate) SetNillableVAEmployeeID(s *string) *ExamApplicationsPMPAUpdate {
	if s != nil {
		eapu.SetVAEmployeeID(*s)
	}
	return eapu
}

// ClearVAEmployeeID clears the value of the "VA_EmployeeID" field.
func (eapu *ExamApplicationsPMPAUpdate) ClearVAEmployeeID() *ExamApplicationsPMPAUpdate {
	eapu.mutation.ClearVAEmployeeID()
	return eapu
}

// SetVAEmployeeDesignation sets the "VA_EmployeeDesignation" field.
func (eapu *ExamApplicationsPMPAUpdate) SetVAEmployeeDesignation(s string) *ExamApplicationsPMPAUpdate {
	eapu.mutation.SetVAEmployeeDesignation(s)
	return eapu
}

// SetNillableVAEmployeeDesignation sets the "VA_EmployeeDesignation" field if the given value is not nil.
func (eapu *ExamApplicationsPMPAUpdate) SetNillableVAEmployeeDesignation(s *string) *ExamApplicationsPMPAUpdate {
	if s != nil {
		eapu.SetVAEmployeeDesignation(*s)
	}
	return eapu
}

// ClearVAEmployeeDesignation clears the value of the "VA_EmployeeDesignation" field.
func (eapu *ExamApplicationsPMPAUpdate) ClearVAEmployeeDesignation() *ExamApplicationsPMPAUpdate {
	eapu.mutation.ClearVAEmployeeDesignation()
	return eapu
}

// SetVARemarks sets the "VA_Remarks" field.
func (eapu *ExamApplicationsPMPAUpdate) SetVARemarks(s string) *ExamApplicationsPMPAUpdate {
	eapu.mutation.SetVARemarks(s)
	return eapu
}

// SetNillableVARemarks sets the "VA_Remarks" field if the given value is not nil.
func (eapu *ExamApplicationsPMPAUpdate) SetNillableVARemarks(s *string) *ExamApplicationsPMPAUpdate {
	if s != nil {
		eapu.SetVARemarks(*s)
	}
	return eapu
}

// ClearVARemarks clears the value of the "VA_Remarks" field.
func (eapu *ExamApplicationsPMPAUpdate) ClearVARemarks() *ExamApplicationsPMPAUpdate {
	eapu.mutation.ClearVARemarks()
	return eapu
}

// SetVADate sets the "VA_Date" field.
func (eapu *ExamApplicationsPMPAUpdate) SetVADate(t time.Time) *ExamApplicationsPMPAUpdate {
	eapu.mutation.SetVADate(t)
	return eapu
}

// SetNillableVADate sets the "VA_Date" field if the given value is not nil.
func (eapu *ExamApplicationsPMPAUpdate) SetNillableVADate(t *time.Time) *ExamApplicationsPMPAUpdate {
	if t != nil {
		eapu.SetVADate(*t)
	}
	return eapu
}

// ClearVADate clears the value of the "VA_Date" field.
func (eapu *ExamApplicationsPMPAUpdate) ClearVADate() *ExamApplicationsPMPAUpdate {
	eapu.mutation.ClearVADate()
	return eapu
}

// SetCAUserId sets the "CA_UserId" field.
func (eapu *ExamApplicationsPMPAUpdate) SetCAUserId(i int32) *ExamApplicationsPMPAUpdate {
	eapu.mutation.ResetCAUserId()
	eapu.mutation.SetCAUserId(i)
	return eapu
}

// SetNillableCAUserId sets the "CA_UserId" field if the given value is not nil.
func (eapu *ExamApplicationsPMPAUpdate) SetNillableCAUserId(i *int32) *ExamApplicationsPMPAUpdate {
	if i != nil {
		eapu.SetCAUserId(*i)
	}
	return eapu
}

// AddCAUserId adds i to the "CA_UserId" field.
func (eapu *ExamApplicationsPMPAUpdate) AddCAUserId(i int32) *ExamApplicationsPMPAUpdate {
	eapu.mutation.AddCAUserId(i)
	return eapu
}

// ClearCAUserId clears the value of the "CA_UserId" field.
func (eapu *ExamApplicationsPMPAUpdate) ClearCAUserId() *ExamApplicationsPMPAUpdate {
	eapu.mutation.ClearCAUserId()
	return eapu
}

// SetCAUserName sets the "CA_UserName" field.
func (eapu *ExamApplicationsPMPAUpdate) SetCAUserName(s string) *ExamApplicationsPMPAUpdate {
	eapu.mutation.SetCAUserName(s)
	return eapu
}

// SetNillableCAUserName sets the "CA_UserName" field if the given value is not nil.
func (eapu *ExamApplicationsPMPAUpdate) SetNillableCAUserName(s *string) *ExamApplicationsPMPAUpdate {
	if s != nil {
		eapu.SetCAUserName(*s)
	}
	return eapu
}

// ClearCAUserName clears the value of the "CA_UserName" field.
func (eapu *ExamApplicationsPMPAUpdate) ClearCAUserName() *ExamApplicationsPMPAUpdate {
	eapu.mutation.ClearCAUserName()
	return eapu
}

// SetCAEmployeeID sets the "CA_EmployeeID" field.
func (eapu *ExamApplicationsPMPAUpdate) SetCAEmployeeID(s string) *ExamApplicationsPMPAUpdate {
	eapu.mutation.SetCAEmployeeID(s)
	return eapu
}

// SetNillableCAEmployeeID sets the "CA_EmployeeID" field if the given value is not nil.
func (eapu *ExamApplicationsPMPAUpdate) SetNillableCAEmployeeID(s *string) *ExamApplicationsPMPAUpdate {
	if s != nil {
		eapu.SetCAEmployeeID(*s)
	}
	return eapu
}

// ClearCAEmployeeID clears the value of the "CA_EmployeeID" field.
func (eapu *ExamApplicationsPMPAUpdate) ClearCAEmployeeID() *ExamApplicationsPMPAUpdate {
	eapu.mutation.ClearCAEmployeeID()
	return eapu
}

// SetCAEmployeeDesignation sets the "CA_EmployeeDesignation" field.
func (eapu *ExamApplicationsPMPAUpdate) SetCAEmployeeDesignation(s string) *ExamApplicationsPMPAUpdate {
	eapu.mutation.SetCAEmployeeDesignation(s)
	return eapu
}

// SetNillableCAEmployeeDesignation sets the "CA_EmployeeDesignation" field if the given value is not nil.
func (eapu *ExamApplicationsPMPAUpdate) SetNillableCAEmployeeDesignation(s *string) *ExamApplicationsPMPAUpdate {
	if s != nil {
		eapu.SetCAEmployeeDesignation(*s)
	}
	return eapu
}

// ClearCAEmployeeDesignation clears the value of the "CA_EmployeeDesignation" field.
func (eapu *ExamApplicationsPMPAUpdate) ClearCAEmployeeDesignation() *ExamApplicationsPMPAUpdate {
	eapu.mutation.ClearCAEmployeeDesignation()
	return eapu
}

// SetCARemarks sets the "CA_Remarks" field.
func (eapu *ExamApplicationsPMPAUpdate) SetCARemarks(s string) *ExamApplicationsPMPAUpdate {
	eapu.mutation.SetCARemarks(s)
	return eapu
}

// SetNillableCARemarks sets the "CA_Remarks" field if the given value is not nil.
func (eapu *ExamApplicationsPMPAUpdate) SetNillableCARemarks(s *string) *ExamApplicationsPMPAUpdate {
	if s != nil {
		eapu.SetCARemarks(*s)
	}
	return eapu
}

// ClearCARemarks clears the value of the "CA_Remarks" field.
func (eapu *ExamApplicationsPMPAUpdate) ClearCARemarks() *ExamApplicationsPMPAUpdate {
	eapu.mutation.ClearCARemarks()
	return eapu
}

// SetCADate sets the "CA_Date" field.
func (eapu *ExamApplicationsPMPAUpdate) SetCADate(t time.Time) *ExamApplicationsPMPAUpdate {
	eapu.mutation.SetCADate(t)
	return eapu
}

// SetNillableCADate sets the "CA_Date" field if the given value is not nil.
func (eapu *ExamApplicationsPMPAUpdate) SetNillableCADate(t *time.Time) *ExamApplicationsPMPAUpdate {
	if t != nil {
		eapu.SetCADate(*t)
	}
	return eapu
}

// ClearCADate clears the value of the "CA_Date" field.
func (eapu *ExamApplicationsPMPAUpdate) ClearCADate() *ExamApplicationsPMPAUpdate {
	eapu.mutation.ClearCADate()
	return eapu
}

// SetNAUserId sets the "NA_UserId" field.
func (eapu *ExamApplicationsPMPAUpdate) SetNAUserId(i int32) *ExamApplicationsPMPAUpdate {
	eapu.mutation.ResetNAUserId()
	eapu.mutation.SetNAUserId(i)
	return eapu
}

// SetNillableNAUserId sets the "NA_UserId" field if the given value is not nil.
func (eapu *ExamApplicationsPMPAUpdate) SetNillableNAUserId(i *int32) *ExamApplicationsPMPAUpdate {
	if i != nil {
		eapu.SetNAUserId(*i)
	}
	return eapu
}

// AddNAUserId adds i to the "NA_UserId" field.
func (eapu *ExamApplicationsPMPAUpdate) AddNAUserId(i int32) *ExamApplicationsPMPAUpdate {
	eapu.mutation.AddNAUserId(i)
	return eapu
}

// ClearNAUserId clears the value of the "NA_UserId" field.
func (eapu *ExamApplicationsPMPAUpdate) ClearNAUserId() *ExamApplicationsPMPAUpdate {
	eapu.mutation.ClearNAUserId()
	return eapu
}

// SetNAUserName sets the "NA_UserName" field.
func (eapu *ExamApplicationsPMPAUpdate) SetNAUserName(s string) *ExamApplicationsPMPAUpdate {
	eapu.mutation.SetNAUserName(s)
	return eapu
}

// SetNillableNAUserName sets the "NA_UserName" field if the given value is not nil.
func (eapu *ExamApplicationsPMPAUpdate) SetNillableNAUserName(s *string) *ExamApplicationsPMPAUpdate {
	if s != nil {
		eapu.SetNAUserName(*s)
	}
	return eapu
}

// ClearNAUserName clears the value of the "NA_UserName" field.
func (eapu *ExamApplicationsPMPAUpdate) ClearNAUserName() *ExamApplicationsPMPAUpdate {
	eapu.mutation.ClearNAUserName()
	return eapu
}

// SetNAEmployeeID sets the "NA_EmployeeID" field.
func (eapu *ExamApplicationsPMPAUpdate) SetNAEmployeeID(s string) *ExamApplicationsPMPAUpdate {
	eapu.mutation.SetNAEmployeeID(s)
	return eapu
}

// SetNillableNAEmployeeID sets the "NA_EmployeeID" field if the given value is not nil.
func (eapu *ExamApplicationsPMPAUpdate) SetNillableNAEmployeeID(s *string) *ExamApplicationsPMPAUpdate {
	if s != nil {
		eapu.SetNAEmployeeID(*s)
	}
	return eapu
}

// ClearNAEmployeeID clears the value of the "NA_EmployeeID" field.
func (eapu *ExamApplicationsPMPAUpdate) ClearNAEmployeeID() *ExamApplicationsPMPAUpdate {
	eapu.mutation.ClearNAEmployeeID()
	return eapu
}

// SetNAEmployeeDesignation sets the "NA_EmployeeDesignation" field.
func (eapu *ExamApplicationsPMPAUpdate) SetNAEmployeeDesignation(s string) *ExamApplicationsPMPAUpdate {
	eapu.mutation.SetNAEmployeeDesignation(s)
	return eapu
}

// SetNillableNAEmployeeDesignation sets the "NA_EmployeeDesignation" field if the given value is not nil.
func (eapu *ExamApplicationsPMPAUpdate) SetNillableNAEmployeeDesignation(s *string) *ExamApplicationsPMPAUpdate {
	if s != nil {
		eapu.SetNAEmployeeDesignation(*s)
	}
	return eapu
}

// ClearNAEmployeeDesignation clears the value of the "NA_EmployeeDesignation" field.
func (eapu *ExamApplicationsPMPAUpdate) ClearNAEmployeeDesignation() *ExamApplicationsPMPAUpdate {
	eapu.mutation.ClearNAEmployeeDesignation()
	return eapu
}

// SetNARemarks sets the "NA_Remarks" field.
func (eapu *ExamApplicationsPMPAUpdate) SetNARemarks(s string) *ExamApplicationsPMPAUpdate {
	eapu.mutation.SetNARemarks(s)
	return eapu
}

// SetNillableNARemarks sets the "NA_Remarks" field if the given value is not nil.
func (eapu *ExamApplicationsPMPAUpdate) SetNillableNARemarks(s *string) *ExamApplicationsPMPAUpdate {
	if s != nil {
		eapu.SetNARemarks(*s)
	}
	return eapu
}

// ClearNARemarks clears the value of the "NA_Remarks" field.
func (eapu *ExamApplicationsPMPAUpdate) ClearNARemarks() *ExamApplicationsPMPAUpdate {
	eapu.mutation.ClearNARemarks()
	return eapu
}

// SetNADate sets the "NA_Date" field.
func (eapu *ExamApplicationsPMPAUpdate) SetNADate(t time.Time) *ExamApplicationsPMPAUpdate {
	eapu.mutation.SetNADate(t)
	return eapu
}

// SetNillableNADate sets the "NA_Date" field if the given value is not nil.
func (eapu *ExamApplicationsPMPAUpdate) SetNillableNADate(t *time.Time) *ExamApplicationsPMPAUpdate {
	if t != nil {
		eapu.SetNADate(*t)
	}
	return eapu
}

// ClearNADate clears the value of the "NA_Date" field.
func (eapu *ExamApplicationsPMPAUpdate) ClearNADate() *ExamApplicationsPMPAUpdate {
	eapu.mutation.ClearNADate()
	return eapu
}

// SetAppliactionRemarks sets the "AppliactionRemarks" field.
func (eapu *ExamApplicationsPMPAUpdate) SetAppliactionRemarks(s string) *ExamApplicationsPMPAUpdate {
	eapu.mutation.SetAppliactionRemarks(s)
	return eapu
}

// SetNillableAppliactionRemarks sets the "AppliactionRemarks" field if the given value is not nil.
func (eapu *ExamApplicationsPMPAUpdate) SetNillableAppliactionRemarks(s *string) *ExamApplicationsPMPAUpdate {
	if s != nil {
		eapu.SetAppliactionRemarks(*s)
	}
	return eapu
}

// ClearAppliactionRemarks clears the value of the "AppliactionRemarks" field.
func (eapu *ExamApplicationsPMPAUpdate) ClearAppliactionRemarks() *ExamApplicationsPMPAUpdate {
	eapu.mutation.ClearAppliactionRemarks()
	return eapu
}

// SetCadrePreferences sets the "CadrePreferences" field.
func (eapu *ExamApplicationsPMPAUpdate) SetCadrePreferences(i []interface{}) *ExamApplicationsPMPAUpdate {
	eapu.mutation.SetCadrePreferences(i)
	return eapu
}

// AppendCadrePreferences appends i to the "CadrePreferences" field.
func (eapu *ExamApplicationsPMPAUpdate) AppendCadrePreferences(i []interface{}) *ExamApplicationsPMPAUpdate {
	eapu.mutation.AppendCadrePreferences(i)
	return eapu
}

// ClearCadrePreferences clears the value of the "CadrePreferences" field.
func (eapu *ExamApplicationsPMPAUpdate) ClearCadrePreferences() *ExamApplicationsPMPAUpdate {
	eapu.mutation.ClearCadrePreferences()
	return eapu
}

// SetCAPreviousRemarks sets the "CAPreviousRemarks" field.
func (eapu *ExamApplicationsPMPAUpdate) SetCAPreviousRemarks(s string) *ExamApplicationsPMPAUpdate {
	eapu.mutation.SetCAPreviousRemarks(s)
	return eapu
}

// SetNillableCAPreviousRemarks sets the "CAPreviousRemarks" field if the given value is not nil.
func (eapu *ExamApplicationsPMPAUpdate) SetNillableCAPreviousRemarks(s *string) *ExamApplicationsPMPAUpdate {
	if s != nil {
		eapu.SetCAPreviousRemarks(*s)
	}
	return eapu
}

// ClearCAPreviousRemarks clears the value of the "CAPreviousRemarks" field.
func (eapu *ExamApplicationsPMPAUpdate) ClearCAPreviousRemarks() *ExamApplicationsPMPAUpdate {
	eapu.mutation.ClearCAPreviousRemarks()
	return eapu
}

// SetPunishmentStatus sets the "PunishmentStatus" field.
func (eapu *ExamApplicationsPMPAUpdate) SetPunishmentStatus(b bool) *ExamApplicationsPMPAUpdate {
	eapu.mutation.SetPunishmentStatus(b)
	return eapu
}

// SetNillablePunishmentStatus sets the "PunishmentStatus" field if the given value is not nil.
func (eapu *ExamApplicationsPMPAUpdate) SetNillablePunishmentStatus(b *bool) *ExamApplicationsPMPAUpdate {
	if b != nil {
		eapu.SetPunishmentStatus(*b)
	}
	return eapu
}

// ClearPunishmentStatus clears the value of the "PunishmentStatus" field.
func (eapu *ExamApplicationsPMPAUpdate) ClearPunishmentStatus() *ExamApplicationsPMPAUpdate {
	eapu.mutation.ClearPunishmentStatus()
	return eapu
}

// SetDisciplinaryCaseStatus sets the "DisciplinaryCaseStatus" field.
func (eapu *ExamApplicationsPMPAUpdate) SetDisciplinaryCaseStatus(b bool) *ExamApplicationsPMPAUpdate {
	eapu.mutation.SetDisciplinaryCaseStatus(b)
	return eapu
}

// SetNillableDisciplinaryCaseStatus sets the "DisciplinaryCaseStatus" field if the given value is not nil.
func (eapu *ExamApplicationsPMPAUpdate) SetNillableDisciplinaryCaseStatus(b *bool) *ExamApplicationsPMPAUpdate {
	if b != nil {
		eapu.SetDisciplinaryCaseStatus(*b)
	}
	return eapu
}

// ClearDisciplinaryCaseStatus clears the value of the "DisciplinaryCaseStatus" field.
func (eapu *ExamApplicationsPMPAUpdate) ClearDisciplinaryCaseStatus() *ExamApplicationsPMPAUpdate {
	eapu.mutation.ClearDisciplinaryCaseStatus()
	return eapu
}

// SetGenerateHallTicketFlag sets the "GenerateHallTicketFlag" field.
func (eapu *ExamApplicationsPMPAUpdate) SetGenerateHallTicketFlag(b bool) *ExamApplicationsPMPAUpdate {
	eapu.mutation.SetGenerateHallTicketFlag(b)
	return eapu
}

// SetNillableGenerateHallTicketFlag sets the "GenerateHallTicketFlag" field if the given value is not nil.
func (eapu *ExamApplicationsPMPAUpdate) SetNillableGenerateHallTicketFlag(b *bool) *ExamApplicationsPMPAUpdate {
	if b != nil {
		eapu.SetGenerateHallTicketFlag(*b)
	}
	return eapu
}

// ClearGenerateHallTicketFlag clears the value of the "GenerateHallTicketFlag" field.
func (eapu *ExamApplicationsPMPAUpdate) ClearGenerateHallTicketFlag() *ExamApplicationsPMPAUpdate {
	eapu.mutation.ClearGenerateHallTicketFlag()
	return eapu
}

// SetHallTicketNumber sets the "HallTicketNumber" field.
func (eapu *ExamApplicationsPMPAUpdate) SetHallTicketNumber(s string) *ExamApplicationsPMPAUpdate {
	eapu.mutation.SetHallTicketNumber(s)
	return eapu
}

// SetNillableHallTicketNumber sets the "HallTicketNumber" field if the given value is not nil.
func (eapu *ExamApplicationsPMPAUpdate) SetNillableHallTicketNumber(s *string) *ExamApplicationsPMPAUpdate {
	if s != nil {
		eapu.SetHallTicketNumber(*s)
	}
	return eapu
}

// ClearHallTicketNumber clears the value of the "HallTicketNumber" field.
func (eapu *ExamApplicationsPMPAUpdate) ClearHallTicketNumber() *ExamApplicationsPMPAUpdate {
	eapu.mutation.ClearHallTicketNumber()
	return eapu
}

// SetHallTicketGeneratedFlag sets the "HallTicketGeneratedFlag" field.
func (eapu *ExamApplicationsPMPAUpdate) SetHallTicketGeneratedFlag(b bool) *ExamApplicationsPMPAUpdate {
	eapu.mutation.SetHallTicketGeneratedFlag(b)
	return eapu
}

// SetNillableHallTicketGeneratedFlag sets the "HallTicketGeneratedFlag" field if the given value is not nil.
func (eapu *ExamApplicationsPMPAUpdate) SetNillableHallTicketGeneratedFlag(b *bool) *ExamApplicationsPMPAUpdate {
	if b != nil {
		eapu.SetHallTicketGeneratedFlag(*b)
	}
	return eapu
}

// ClearHallTicketGeneratedFlag clears the value of the "HallTicketGeneratedFlag" field.
func (eapu *ExamApplicationsPMPAUpdate) ClearHallTicketGeneratedFlag() *ExamApplicationsPMPAUpdate {
	eapu.mutation.ClearHallTicketGeneratedFlag()
	return eapu
}

// SetGenerateHallTicketFlagByNO sets the "GenerateHallTicketFlagByNO" field.
func (eapu *ExamApplicationsPMPAUpdate) SetGenerateHallTicketFlagByNO(b bool) *ExamApplicationsPMPAUpdate {
	eapu.mutation.SetGenerateHallTicketFlagByNO(b)
	return eapu
}

// SetNillableGenerateHallTicketFlagByNO sets the "GenerateHallTicketFlagByNO" field if the given value is not nil.
func (eapu *ExamApplicationsPMPAUpdate) SetNillableGenerateHallTicketFlagByNO(b *bool) *ExamApplicationsPMPAUpdate {
	if b != nil {
		eapu.SetGenerateHallTicketFlagByNO(*b)
	}
	return eapu
}

// ClearGenerateHallTicketFlagByNO clears the value of the "GenerateHallTicketFlagByNO" field.
func (eapu *ExamApplicationsPMPAUpdate) ClearGenerateHallTicketFlagByNO() *ExamApplicationsPMPAUpdate {
	eapu.mutation.ClearGenerateHallTicketFlagByNO()
	return eapu
}

// SetHallTicketGeneratedDate sets the "HallTicketGeneratedDate" field.
func (eapu *ExamApplicationsPMPAUpdate) SetHallTicketGeneratedDate(t time.Time) *ExamApplicationsPMPAUpdate {
	eapu.mutation.SetHallTicketGeneratedDate(t)
	return eapu
}

// SetNillableHallTicketGeneratedDate sets the "HallTicketGeneratedDate" field if the given value is not nil.
func (eapu *ExamApplicationsPMPAUpdate) SetNillableHallTicketGeneratedDate(t *time.Time) *ExamApplicationsPMPAUpdate {
	if t != nil {
		eapu.SetHallTicketGeneratedDate(*t)
	}
	return eapu
}

// ClearHallTicketGeneratedDate clears the value of the "HallTicketGeneratedDate" field.
func (eapu *ExamApplicationsPMPAUpdate) ClearHallTicketGeneratedDate() *ExamApplicationsPMPAUpdate {
	eapu.mutation.ClearHallTicketGeneratedDate()
	return eapu
}

// SetTemporaryHallTicket sets the "TemporaryHallTicket" field.
func (eapu *ExamApplicationsPMPAUpdate) SetTemporaryHallTicket(s string) *ExamApplicationsPMPAUpdate {
	eapu.mutation.SetTemporaryHallTicket(s)
	return eapu
}

// SetNillableTemporaryHallTicket sets the "TemporaryHallTicket" field if the given value is not nil.
func (eapu *ExamApplicationsPMPAUpdate) SetNillableTemporaryHallTicket(s *string) *ExamApplicationsPMPAUpdate {
	if s != nil {
		eapu.SetTemporaryHallTicket(*s)
	}
	return eapu
}

// ClearTemporaryHallTicket clears the value of the "TemporaryHallTicket" field.
func (eapu *ExamApplicationsPMPAUpdate) ClearTemporaryHallTicket() *ExamApplicationsPMPAUpdate {
	eapu.mutation.ClearTemporaryHallTicket()
	return eapu
}

// SetOptionUsed sets the "OptionUsed" field.
func (eapu *ExamApplicationsPMPAUpdate) SetOptionUsed(s string) *ExamApplicationsPMPAUpdate {
	eapu.mutation.SetOptionUsed(s)
	return eapu
}

// SetNillableOptionUsed sets the "OptionUsed" field if the given value is not nil.
func (eapu *ExamApplicationsPMPAUpdate) SetNillableOptionUsed(s *string) *ExamApplicationsPMPAUpdate {
	if s != nil {
		eapu.SetOptionUsed(*s)
	}
	return eapu
}

// ClearOptionUsed clears the value of the "OptionUsed" field.
func (eapu *ExamApplicationsPMPAUpdate) ClearOptionUsed() *ExamApplicationsPMPAUpdate {
	eapu.mutation.ClearOptionUsed()
	return eapu
}

// SetRemarks sets the "Remarks" field.
func (eapu *ExamApplicationsPMPAUpdate) SetRemarks(s string) *ExamApplicationsPMPAUpdate {
	eapu.mutation.SetRemarks(s)
	return eapu
}

// SetNillableRemarks sets the "Remarks" field if the given value is not nil.
func (eapu *ExamApplicationsPMPAUpdate) SetNillableRemarks(s *string) *ExamApplicationsPMPAUpdate {
	if s != nil {
		eapu.SetRemarks(*s)
	}
	return eapu
}

// ClearRemarks clears the value of the "Remarks" field.
func (eapu *ExamApplicationsPMPAUpdate) ClearRemarks() *ExamApplicationsPMPAUpdate {
	eapu.mutation.ClearRemarks()
	return eapu
}

// SetCadre sets the "Cadre" field.
func (eapu *ExamApplicationsPMPAUpdate) SetCadre(s string) *ExamApplicationsPMPAUpdate {
	eapu.mutation.SetCadre(s)
	return eapu
}

// SetNillableCadre sets the "Cadre" field if the given value is not nil.
func (eapu *ExamApplicationsPMPAUpdate) SetNillableCadre(s *string) *ExamApplicationsPMPAUpdate {
	if s != nil {
		eapu.SetCadre(*s)
	}
	return eapu
}

// ClearCadre clears the value of the "Cadre" field.
func (eapu *ExamApplicationsPMPAUpdate) ClearCadre() *ExamApplicationsPMPAUpdate {
	eapu.mutation.ClearCadre()
	return eapu
}

// SetEmployeePost sets the "EmployeePost" field.
func (eapu *ExamApplicationsPMPAUpdate) SetEmployeePost(s string) *ExamApplicationsPMPAUpdate {
	eapu.mutation.SetEmployeePost(s)
	return eapu
}

// SetNillableEmployeePost sets the "EmployeePost" field if the given value is not nil.
func (eapu *ExamApplicationsPMPAUpdate) SetNillableEmployeePost(s *string) *ExamApplicationsPMPAUpdate {
	if s != nil {
		eapu.SetEmployeePost(*s)
	}
	return eapu
}

// ClearEmployeePost clears the value of the "EmployeePost" field.
func (eapu *ExamApplicationsPMPAUpdate) ClearEmployeePost() *ExamApplicationsPMPAUpdate {
	eapu.mutation.ClearEmployeePost()
	return eapu
}

// SetDOJInEligiblePost sets the "DOJInEligiblePost" field.
func (eapu *ExamApplicationsPMPAUpdate) SetDOJInEligiblePost(s string) *ExamApplicationsPMPAUpdate {
	eapu.mutation.SetDOJInEligiblePost(s)
	return eapu
}

// SetNillableDOJInEligiblePost sets the "DOJInEligiblePost" field if the given value is not nil.
func (eapu *ExamApplicationsPMPAUpdate) SetNillableDOJInEligiblePost(s *string) *ExamApplicationsPMPAUpdate {
	if s != nil {
		eapu.SetDOJInEligiblePost(*s)
	}
	return eapu
}

// ClearDOJInEligiblePost clears the value of the "DOJInEligiblePost" field.
func (eapu *ExamApplicationsPMPAUpdate) ClearDOJInEligiblePost() *ExamApplicationsPMPAUpdate {
	eapu.mutation.ClearDOJInEligiblePost()
	return eapu
}

// SetDivisionPreferences sets the "DivisionPreferences" field.
func (eapu *ExamApplicationsPMPAUpdate) SetDivisionPreferences(i []interface{}) *ExamApplicationsPMPAUpdate {
	eapu.mutation.SetDivisionPreferences(i)
	return eapu
}

// AppendDivisionPreferences appends i to the "DivisionPreferences" field.
func (eapu *ExamApplicationsPMPAUpdate) AppendDivisionPreferences(i []interface{}) *ExamApplicationsPMPAUpdate {
	eapu.mutation.AppendDivisionPreferences(i)
	return eapu
}

// ClearDivisionPreferences clears the value of the "DivisionPreferences" field.
func (eapu *ExamApplicationsPMPAUpdate) ClearDivisionPreferences() *ExamApplicationsPMPAUpdate {
	eapu.mutation.ClearDivisionPreferences()
	return eapu
}

// SetRoleUserCode sets the "RoleUserCode" field.
func (eapu *ExamApplicationsPMPAUpdate) SetRoleUserCode(i int32) *ExamApplicationsPMPAUpdate {
	eapu.mutation.SetRoleUserCode(i)
	return eapu
}

// SetNillableRoleUserCode sets the "RoleUserCode" field if the given value is not nil.
func (eapu *ExamApplicationsPMPAUpdate) SetNillableRoleUserCode(i *int32) *ExamApplicationsPMPAUpdate {
	if i != nil {
		eapu.SetRoleUserCode(*i)
	}
	return eapu
}

// ClearRoleUserCode clears the value of the "RoleUserCode" field.
func (eapu *ExamApplicationsPMPAUpdate) ClearRoleUserCode() *ExamApplicationsPMPAUpdate {
	eapu.mutation.ClearRoleUserCode()
	return eapu
}

// SetIpAddress sets the "IpAddress" field.
func (eapu *ExamApplicationsPMPAUpdate) SetIpAddress(s string) *ExamApplicationsPMPAUpdate {
	eapu.mutation.SetIpAddress(s)
	return eapu
}

// SetNillableIpAddress sets the "IpAddress" field if the given value is not nil.
func (eapu *ExamApplicationsPMPAUpdate) SetNillableIpAddress(s *string) *ExamApplicationsPMPAUpdate {
	if s != nil {
		eapu.SetIpAddress(*s)
	}
	return eapu
}

// ClearIpAddress clears the value of the "IpAddress" field.
func (eapu *ExamApplicationsPMPAUpdate) ClearIpAddress() *ExamApplicationsPMPAUpdate {
	eapu.mutation.ClearIpAddress()
	return eapu
}

// SetLatitudeLongitude sets the "LatitudeLongitude" field.
func (eapu *ExamApplicationsPMPAUpdate) SetLatitudeLongitude(s string) *ExamApplicationsPMPAUpdate {
	eapu.mutation.SetLatitudeLongitude(s)
	return eapu
}

// SetNillableLatitudeLongitude sets the "LatitudeLongitude" field if the given value is not nil.
func (eapu *ExamApplicationsPMPAUpdate) SetNillableLatitudeLongitude(s *string) *ExamApplicationsPMPAUpdate {
	if s != nil {
		eapu.SetLatitudeLongitude(*s)
	}
	return eapu
}

// ClearLatitudeLongitude clears the value of the "LatitudeLongitude" field.
func (eapu *ExamApplicationsPMPAUpdate) ClearLatitudeLongitude() *ExamApplicationsPMPAUpdate {
	eapu.mutation.ClearLatitudeLongitude()
	return eapu
}

// SetCircleSID sets the "CircleSID" field.
func (eapu *ExamApplicationsPMPAUpdate) SetCircleSID(i int32) *ExamApplicationsPMPAUpdate {
	eapu.mutation.SetCircleSID(i)
	return eapu
}

// SetNillableCircleSID sets the "CircleSID" field if the given value is not nil.
func (eapu *ExamApplicationsPMPAUpdate) SetNillableCircleSID(i *int32) *ExamApplicationsPMPAUpdate {
	if i != nil {
		eapu.SetCircleSID(*i)
	}
	return eapu
}

// ClearCircleSID clears the value of the "CircleSID" field.
func (eapu *ExamApplicationsPMPAUpdate) ClearCircleSID() *ExamApplicationsPMPAUpdate {
	eapu.mutation.ClearCircleSID()
	return eapu
}

// SetFacilityName sets the "FacilityName" field.
func (eapu *ExamApplicationsPMPAUpdate) SetFacilityName(s string) *ExamApplicationsPMPAUpdate {
	eapu.mutation.SetFacilityName(s)
	return eapu
}

// SetNillableFacilityName sets the "FacilityName" field if the given value is not nil.
func (eapu *ExamApplicationsPMPAUpdate) SetNillableFacilityName(s *string) *ExamApplicationsPMPAUpdate {
	if s != nil {
		eapu.SetFacilityName(*s)
	}
	return eapu
}

// ClearFacilityName clears the value of the "FacilityName" field.
func (eapu *ExamApplicationsPMPAUpdate) ClearFacilityName() *ExamApplicationsPMPAUpdate {
	eapu.mutation.ClearFacilityName()
	return eapu
}

// SetServiceLength sets the "ServiceLength" field.
func (eapu *ExamApplicationsPMPAUpdate) SetServiceLength(i []interface{}) *ExamApplicationsPMPAUpdate {
	eapu.mutation.SetServiceLength(i)
	return eapu
}

// AppendServiceLength appends i to the "ServiceLength" field.
func (eapu *ExamApplicationsPMPAUpdate) AppendServiceLength(i []interface{}) *ExamApplicationsPMPAUpdate {
	eapu.mutation.AppendServiceLength(i)
	return eapu
}

// ClearServiceLength clears the value of the "ServiceLength" field.
func (eapu *ExamApplicationsPMPAUpdate) ClearServiceLength() *ExamApplicationsPMPAUpdate {
	eapu.mutation.ClearServiceLength()
	return eapu
}

// SetNonQualifyingService sets the "NonQualifyingService" field.
func (eapu *ExamApplicationsPMPAUpdate) SetNonQualifyingService(i []interface{}) *ExamApplicationsPMPAUpdate {
	eapu.mutation.SetNonQualifyingService(i)
	return eapu
}

// AppendNonQualifyingService appends i to the "NonQualifyingService" field.
func (eapu *ExamApplicationsPMPAUpdate) AppendNonQualifyingService(i []interface{}) *ExamApplicationsPMPAUpdate {
	eapu.mutation.AppendNonQualifyingService(i)
	return eapu
}

// ClearNonQualifyingService clears the value of the "NonQualifyingService" field.
func (eapu *ExamApplicationsPMPAUpdate) ClearNonQualifyingService() *ExamApplicationsPMPAUpdate {
	eapu.mutation.ClearNonQualifyingService()
	return eapu
}

// SetDCInPresentCadre sets the "DCInPresentCadre" field.
func (eapu *ExamApplicationsPMPAUpdate) SetDCInPresentCadre(s string) *ExamApplicationsPMPAUpdate {
	eapu.mutation.SetDCInPresentCadre(s)
	return eapu
}

// SetNillableDCInPresentCadre sets the "DCInPresentCadre" field if the given value is not nil.
func (eapu *ExamApplicationsPMPAUpdate) SetNillableDCInPresentCadre(s *string) *ExamApplicationsPMPAUpdate {
	if s != nil {
		eapu.SetDCInPresentCadre(*s)
	}
	return eapu
}

// ClearDCInPresentCadre clears the value of the "DCInPresentCadre" field.
func (eapu *ExamApplicationsPMPAUpdate) ClearDCInPresentCadre() *ExamApplicationsPMPAUpdate {
	eapu.mutation.ClearDCInPresentCadre()
	return eapu
}

// SetReportingOfficeID sets the "ReportingOfficeID" field.
func (eapu *ExamApplicationsPMPAUpdate) SetReportingOfficeID(s string) *ExamApplicationsPMPAUpdate {
	eapu.mutation.SetReportingOfficeID(s)
	return eapu
}

// SetNillableReportingOfficeID sets the "ReportingOfficeID" field if the given value is not nil.
func (eapu *ExamApplicationsPMPAUpdate) SetNillableReportingOfficeID(s *string) *ExamApplicationsPMPAUpdate {
	if s != nil {
		eapu.SetReportingOfficeID(*s)
	}
	return eapu
}

// ClearReportingOfficeID clears the value of the "ReportingOfficeID" field.
func (eapu *ExamApplicationsPMPAUpdate) ClearReportingOfficeID() *ExamApplicationsPMPAUpdate {
	eapu.mutation.ClearReportingOfficeID()
	return eapu
}

// SetCircleID sets the "CircleID" field.
func (eapu *ExamApplicationsPMPAUpdate) SetCircleID(i int32) *ExamApplicationsPMPAUpdate {
	eapu.mutation.ResetCircleID()
	eapu.mutation.SetCircleID(i)
	return eapu
}

// SetNillableCircleID sets the "CircleID" field if the given value is not nil.
func (eapu *ExamApplicationsPMPAUpdate) SetNillableCircleID(i *int32) *ExamApplicationsPMPAUpdate {
	if i != nil {
		eapu.SetCircleID(*i)
	}
	return eapu
}

// AddCircleID adds i to the "CircleID" field.
func (eapu *ExamApplicationsPMPAUpdate) AddCircleID(i int32) *ExamApplicationsPMPAUpdate {
	eapu.mutation.AddCircleID(i)
	return eapu
}

// ClearCircleID clears the value of the "CircleID" field.
func (eapu *ExamApplicationsPMPAUpdate) ClearCircleID() *ExamApplicationsPMPAUpdate {
	eapu.mutation.ClearCircleID()
	return eapu
}

// SetRegionID sets the "RegionID" field.
func (eapu *ExamApplicationsPMPAUpdate) SetRegionID(i int32) *ExamApplicationsPMPAUpdate {
	eapu.mutation.ResetRegionID()
	eapu.mutation.SetRegionID(i)
	return eapu
}

// SetNillableRegionID sets the "RegionID" field if the given value is not nil.
func (eapu *ExamApplicationsPMPAUpdate) SetNillableRegionID(i *int32) *ExamApplicationsPMPAUpdate {
	if i != nil {
		eapu.SetRegionID(*i)
	}
	return eapu
}

// AddRegionID adds i to the "RegionID" field.
func (eapu *ExamApplicationsPMPAUpdate) AddRegionID(i int32) *ExamApplicationsPMPAUpdate {
	eapu.mutation.AddRegionID(i)
	return eapu
}

// ClearRegionID clears the value of the "RegionID" field.
func (eapu *ExamApplicationsPMPAUpdate) ClearRegionID() *ExamApplicationsPMPAUpdate {
	eapu.mutation.ClearRegionID()
	return eapu
}

// SetDivisionID sets the "DivisionID" field.
func (eapu *ExamApplicationsPMPAUpdate) SetDivisionID(i int32) *ExamApplicationsPMPAUpdate {
	eapu.mutation.ResetDivisionID()
	eapu.mutation.SetDivisionID(i)
	return eapu
}

// SetNillableDivisionID sets the "DivisionID" field if the given value is not nil.
func (eapu *ExamApplicationsPMPAUpdate) SetNillableDivisionID(i *int32) *ExamApplicationsPMPAUpdate {
	if i != nil {
		eapu.SetDivisionID(*i)
	}
	return eapu
}

// AddDivisionID adds i to the "DivisionID" field.
func (eapu *ExamApplicationsPMPAUpdate) AddDivisionID(i int32) *ExamApplicationsPMPAUpdate {
	eapu.mutation.AddDivisionID(i)
	return eapu
}

// ClearDivisionID clears the value of the "DivisionID" field.
func (eapu *ExamApplicationsPMPAUpdate) ClearDivisionID() *ExamApplicationsPMPAUpdate {
	eapu.mutation.ClearDivisionID()
	return eapu
}

// SetPostPreferences sets the "PostPreferences" field.
func (eapu *ExamApplicationsPMPAUpdate) SetPostPreferences(i []interface{}) *ExamApplicationsPMPAUpdate {
	eapu.mutation.SetPostPreferences(i)
	return eapu
}

// AppendPostPreferences appends i to the "PostPreferences" field.
func (eapu *ExamApplicationsPMPAUpdate) AppendPostPreferences(i []interface{}) *ExamApplicationsPMPAUpdate {
	eapu.mutation.AppendPostPreferences(i)
	return eapu
}

// ClearPostPreferences clears the value of the "PostPreferences" field.
func (eapu *ExamApplicationsPMPAUpdate) ClearPostPreferences() *ExamApplicationsPMPAUpdate {
	eapu.mutation.ClearPostPreferences()
	return eapu
}

// SetUnitPreferences sets the "UnitPreferences" field.
func (eapu *ExamApplicationsPMPAUpdate) SetUnitPreferences(i []interface{}) *ExamApplicationsPMPAUpdate {
	eapu.mutation.SetUnitPreferences(i)
	return eapu
}

// AppendUnitPreferences appends i to the "UnitPreferences" field.
func (eapu *ExamApplicationsPMPAUpdate) AppendUnitPreferences(i []interface{}) *ExamApplicationsPMPAUpdate {
	eapu.mutation.AppendUnitPreferences(i)
	return eapu
}

// ClearUnitPreferences clears the value of the "UnitPreferences" field.
func (eapu *ExamApplicationsPMPAUpdate) ClearUnitPreferences() *ExamApplicationsPMPAUpdate {
	eapu.mutation.ClearUnitPreferences()
	return eapu
}

// SetPMMailGuardMTSEngagement sets the "PMMailGuardMTSEngagement" field.
func (eapu *ExamApplicationsPMPAUpdate) SetPMMailGuardMTSEngagement(i []interface{}) *ExamApplicationsPMPAUpdate {
	eapu.mutation.SetPMMailGuardMTSEngagement(i)
	return eapu
}

// AppendPMMailGuardMTSEngagement appends i to the "PMMailGuardMTSEngagement" field.
func (eapu *ExamApplicationsPMPAUpdate) AppendPMMailGuardMTSEngagement(i []interface{}) *ExamApplicationsPMPAUpdate {
	eapu.mutation.AppendPMMailGuardMTSEngagement(i)
	return eapu
}

// ClearPMMailGuardMTSEngagement clears the value of the "PMMailGuardMTSEngagement" field.
func (eapu *ExamApplicationsPMPAUpdate) ClearPMMailGuardMTSEngagement() *ExamApplicationsPMPAUpdate {
	eapu.mutation.ClearPMMailGuardMTSEngagement()
	return eapu
}

// SetCenterId sets the "CenterId" field.
func (eapu *ExamApplicationsPMPAUpdate) SetCenterId(i int32) *ExamApplicationsPMPAUpdate {
	eapu.mutation.ResetCenterId()
	eapu.mutation.SetCenterId(i)
	return eapu
}

// SetNillableCenterId sets the "CenterId" field if the given value is not nil.
func (eapu *ExamApplicationsPMPAUpdate) SetNillableCenterId(i *int32) *ExamApplicationsPMPAUpdate {
	if i != nil {
		eapu.SetCenterId(*i)
	}
	return eapu
}

// AddCenterId adds i to the "CenterId" field.
func (eapu *ExamApplicationsPMPAUpdate) AddCenterId(i int32) *ExamApplicationsPMPAUpdate {
	eapu.mutation.AddCenterId(i)
	return eapu
}

// ClearCenterId clears the value of the "CenterId" field.
func (eapu *ExamApplicationsPMPAUpdate) ClearCenterId() *ExamApplicationsPMPAUpdate {
	eapu.mutation.ClearCenterId()
	return eapu
}

// SetCenterCode sets the "CenterCode" field.
func (eapu *ExamApplicationsPMPAUpdate) SetCenterCode(i int32) *ExamApplicationsPMPAUpdate {
	eapu.mutation.SetCenterCode(i)
	return eapu
}

// SetNillableCenterCode sets the "CenterCode" field if the given value is not nil.
func (eapu *ExamApplicationsPMPAUpdate) SetNillableCenterCode(i *int32) *ExamApplicationsPMPAUpdate {
	if i != nil {
		eapu.SetCenterCode(*i)
	}
	return eapu
}

// ClearCenterCode clears the value of the "CenterCode" field.
func (eapu *ExamApplicationsPMPAUpdate) ClearCenterCode() *ExamApplicationsPMPAUpdate {
	eapu.mutation.ClearCenterCode()
	return eapu
}

// SetClaimingQualifyingService sets the "ClaimingQualifyingService" field.
func (eapu *ExamApplicationsPMPAUpdate) SetClaimingQualifyingService(s string) *ExamApplicationsPMPAUpdate {
	eapu.mutation.SetClaimingQualifyingService(s)
	return eapu
}

// SetNillableClaimingQualifyingService sets the "ClaimingQualifyingService" field if the given value is not nil.
func (eapu *ExamApplicationsPMPAUpdate) SetNillableClaimingQualifyingService(s *string) *ExamApplicationsPMPAUpdate {
	if s != nil {
		eapu.SetClaimingQualifyingService(*s)
	}
	return eapu
}

// ClearClaimingQualifyingService clears the value of the "ClaimingQualifyingService" field.
func (eapu *ExamApplicationsPMPAUpdate) ClearClaimingQualifyingService() *ExamApplicationsPMPAUpdate {
	eapu.mutation.ClearClaimingQualifyingService()
	return eapu
}

// SetDeputationOfficePincode sets the "DeputationOfficePincode" field.
func (eapu *ExamApplicationsPMPAUpdate) SetDeputationOfficePincode(s string) *ExamApplicationsPMPAUpdate {
	eapu.mutation.SetDeputationOfficePincode(s)
	return eapu
}

// SetNillableDeputationOfficePincode sets the "DeputationOfficePincode" field if the given value is not nil.
func (eapu *ExamApplicationsPMPAUpdate) SetNillableDeputationOfficePincode(s *string) *ExamApplicationsPMPAUpdate {
	if s != nil {
		eapu.SetDeputationOfficePincode(*s)
	}
	return eapu
}

// ClearDeputationOfficePincode clears the value of the "DeputationOfficePincode" field.
func (eapu *ExamApplicationsPMPAUpdate) ClearDeputationOfficePincode() *ExamApplicationsPMPAUpdate {
	eapu.mutation.ClearDeputationOfficePincode()
	return eapu
}

// SetRecommendedStatus sets the "RecommendedStatus" field.
func (eapu *ExamApplicationsPMPAUpdate) SetRecommendedStatus(s string) *ExamApplicationsPMPAUpdate {
	eapu.mutation.SetRecommendedStatus(s)
	return eapu
}

// SetNillableRecommendedStatus sets the "RecommendedStatus" field if the given value is not nil.
func (eapu *ExamApplicationsPMPAUpdate) SetNillableRecommendedStatus(s *string) *ExamApplicationsPMPAUpdate {
	if s != nil {
		eapu.SetRecommendedStatus(*s)
	}
	return eapu
}

// ClearRecommendedStatus clears the value of the "RecommendedStatus" field.
func (eapu *ExamApplicationsPMPAUpdate) ClearRecommendedStatus() *ExamApplicationsPMPAUpdate {
	eapu.mutation.ClearRecommendedStatus()
	return eapu
}

// SetApplicationWdlDate sets the "ApplicationWdlDate" field.
func (eapu *ExamApplicationsPMPAUpdate) SetApplicationWdlDate(t time.Time) *ExamApplicationsPMPAUpdate {
	eapu.mutation.SetApplicationWdlDate(t)
	return eapu
}

// SetNillableApplicationWdlDate sets the "ApplicationWdlDate" field if the given value is not nil.
func (eapu *ExamApplicationsPMPAUpdate) SetNillableApplicationWdlDate(t *time.Time) *ExamApplicationsPMPAUpdate {
	if t != nil {
		eapu.SetApplicationWdlDate(*t)
	}
	return eapu
}

// ClearApplicationWdlDate clears the value of the "ApplicationWdlDate" field.
func (eapu *ExamApplicationsPMPAUpdate) ClearApplicationWdlDate() *ExamApplicationsPMPAUpdate {
	eapu.mutation.ClearApplicationWdlDate()
	return eapu
}

// SetUpdatedAt sets the "UpdatedAt" field.
func (eapu *ExamApplicationsPMPAUpdate) SetUpdatedAt(t time.Time) *ExamApplicationsPMPAUpdate {
	eapu.mutation.SetUpdatedAt(t)
	return eapu
}

// SetNillableUpdatedAt sets the "UpdatedAt" field if the given value is not nil.
func (eapu *ExamApplicationsPMPAUpdate) SetNillableUpdatedAt(t *time.Time) *ExamApplicationsPMPAUpdate {
	if t != nil {
		eapu.SetUpdatedAt(*t)
	}
	return eapu
}

// ClearUpdatedAt clears the value of the "UpdatedAt" field.
func (eapu *ExamApplicationsPMPAUpdate) ClearUpdatedAt() *ExamApplicationsPMPAUpdate {
	eapu.mutation.ClearUpdatedAt()
	return eapu
}

// SetUpdatedBy sets the "UpdatedBy" field.
func (eapu *ExamApplicationsPMPAUpdate) SetUpdatedBy(s string) *ExamApplicationsPMPAUpdate {
	eapu.mutation.SetUpdatedBy(s)
	return eapu
}

// SetNillableUpdatedBy sets the "UpdatedBy" field if the given value is not nil.
func (eapu *ExamApplicationsPMPAUpdate) SetNillableUpdatedBy(s *string) *ExamApplicationsPMPAUpdate {
	if s != nil {
		eapu.SetUpdatedBy(*s)
	}
	return eapu
}

// ClearUpdatedBy clears the value of the "UpdatedBy" field.
func (eapu *ExamApplicationsPMPAUpdate) ClearUpdatedBy() *ExamApplicationsPMPAUpdate {
	eapu.mutation.ClearUpdatedBy()
	return eapu
}

// SetExamCenterHall sets the "ExamCenterHall" field.
func (eapu *ExamApplicationsPMPAUpdate) SetExamCenterHall(i int32) *ExamApplicationsPMPAUpdate {
	eapu.mutation.ResetExamCenterHall()
	eapu.mutation.SetExamCenterHall(i)
	return eapu
}

// SetNillableExamCenterHall sets the "ExamCenterHall" field if the given value is not nil.
func (eapu *ExamApplicationsPMPAUpdate) SetNillableExamCenterHall(i *int32) *ExamApplicationsPMPAUpdate {
	if i != nil {
		eapu.SetExamCenterHall(*i)
	}
	return eapu
}

// AddExamCenterHall adds i to the "ExamCenterHall" field.
func (eapu *ExamApplicationsPMPAUpdate) AddExamCenterHall(i int32) *ExamApplicationsPMPAUpdate {
	eapu.mutation.AddExamCenterHall(i)
	return eapu
}

// ClearExamCenterHall clears the value of the "ExamCenterHall" field.
func (eapu *ExamApplicationsPMPAUpdate) ClearExamCenterHall() *ExamApplicationsPMPAUpdate {
	eapu.mutation.ClearExamCenterHall()
	return eapu
}

// SetHallName sets the "HallName" field.
func (eapu *ExamApplicationsPMPAUpdate) SetHallName(s string) *ExamApplicationsPMPAUpdate {
	eapu.mutation.SetHallName(s)
	return eapu
}

// SetNillableHallName sets the "HallName" field if the given value is not nil.
func (eapu *ExamApplicationsPMPAUpdate) SetNillableHallName(s *string) *ExamApplicationsPMPAUpdate {
	if s != nil {
		eapu.SetHallName(*s)
	}
	return eapu
}

// ClearHallName clears the value of the "HallName" field.
func (eapu *ExamApplicationsPMPAUpdate) ClearHallName() *ExamApplicationsPMPAUpdate {
	eapu.mutation.ClearHallName()
	return eapu
}

// AddUsersPMPARefIDs adds the "UsersPMPARef" edge to the UserMaster entity by IDs.
func (eapu *ExamApplicationsPMPAUpdate) AddUsersPMPARefIDs(ids ...int64) *ExamApplicationsPMPAUpdate {
	eapu.mutation.AddUsersPMPARefIDs(ids...)
	return eapu
}

// AddUsersPMPARef adds the "UsersPMPARef" edges to the UserMaster entity.
func (eapu *ExamApplicationsPMPAUpdate) AddUsersPMPARef(u ...*UserMaster) *ExamApplicationsPMPAUpdate {
	ids := make([]int64, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return eapu.AddUsersPMPARefIDs(ids...)
}

// SetRoleusersID sets the "roleusers" edge to the RoleMaster entity by ID.
func (eapu *ExamApplicationsPMPAUpdate) SetRoleusersID(id int32) *ExamApplicationsPMPAUpdate {
	eapu.mutation.SetRoleusersID(id)
	return eapu
}

// SetNillableRoleusersID sets the "roleusers" edge to the RoleMaster entity by ID if the given value is not nil.
func (eapu *ExamApplicationsPMPAUpdate) SetNillableRoleusersID(id *int32) *ExamApplicationsPMPAUpdate {
	if id != nil {
		eapu = eapu.SetRoleusersID(*id)
	}
	return eapu
}

// SetRoleusers sets the "roleusers" edge to the RoleMaster entity.
func (eapu *ExamApplicationsPMPAUpdate) SetRoleusers(r *RoleMaster) *ExamApplicationsPMPAUpdate {
	return eapu.SetRoleusersID(r.ID)
}

// SetExamcitycenterID sets the "examcitycenter" edge to the ExamCityCenter entity by ID.
func (eapu *ExamApplicationsPMPAUpdate) SetExamcitycenterID(id int32) *ExamApplicationsPMPAUpdate {
	eapu.mutation.SetExamcitycenterID(id)
	return eapu
}

// SetNillableExamcitycenterID sets the "examcitycenter" edge to the ExamCityCenter entity by ID if the given value is not nil.
func (eapu *ExamApplicationsPMPAUpdate) SetNillableExamcitycenterID(id *int32) *ExamApplicationsPMPAUpdate {
	if id != nil {
		eapu = eapu.SetExamcitycenterID(*id)
	}
	return eapu
}

// SetExamcitycenter sets the "examcitycenter" edge to the ExamCityCenter entity.
func (eapu *ExamApplicationsPMPAUpdate) SetExamcitycenter(e *ExamCityCenter) *ExamApplicationsPMPAUpdate {
	return eapu.SetExamcitycenterID(e.ID)
}

// AddCadrePrefRefIDs adds the "CadrePref_Ref" edge to the Cadre_Choice_PMPA entity by IDs.
func (eapu *ExamApplicationsPMPAUpdate) AddCadrePrefRefIDs(ids ...int32) *ExamApplicationsPMPAUpdate {
	eapu.mutation.AddCadrePrefRefIDs(ids...)
	return eapu
}

// AddCadrePrefRef adds the "CadrePref_Ref" edges to the Cadre_Choice_PMPA entity.
func (eapu *ExamApplicationsPMPAUpdate) AddCadrePrefRef(c ...*Cadre_Choice_PMPA) *ExamApplicationsPMPAUpdate {
	ids := make([]int32, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return eapu.AddCadrePrefRefIDs(ids...)
}

// AddCirclePrefRefPMPAIDs adds the "CirclePrefRefPMPA" edge to the Division_Choice_PMPA entity by IDs.
func (eapu *ExamApplicationsPMPAUpdate) AddCirclePrefRefPMPAIDs(ids ...int32) *ExamApplicationsPMPAUpdate {
	eapu.mutation.AddCirclePrefRefPMPAIDs(ids...)
	return eapu
}

// AddCirclePrefRefPMPA adds the "CirclePrefRefPMPA" edges to the Division_Choice_PMPA entity.
func (eapu *ExamApplicationsPMPAUpdate) AddCirclePrefRefPMPA(d ...*Division_Choice_PMPA) *ExamApplicationsPMPAUpdate {
	ids := make([]int32, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return eapu.AddCirclePrefRefPMPAIDs(ids...)
}

// AddPMPAApplicationsRefIDs adds the "PMPAApplicationsRef" edge to the RecommendationsPMPAApplications entity by IDs.
func (eapu *ExamApplicationsPMPAUpdate) AddPMPAApplicationsRefIDs(ids ...int64) *ExamApplicationsPMPAUpdate {
	eapu.mutation.AddPMPAApplicationsRefIDs(ids...)
	return eapu
}

// AddPMPAApplicationsRef adds the "PMPAApplicationsRef" edges to the RecommendationsPMPAApplications entity.
func (eapu *ExamApplicationsPMPAUpdate) AddPMPAApplicationsRef(r ...*RecommendationsPMPAApplications) *ExamApplicationsPMPAUpdate {
	ids := make([]int64, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return eapu.AddPMPAApplicationsRefIDs(ids...)
}

// SetExamsID sets the "Exams" edge to the Exam entity by ID.
func (eapu *ExamApplicationsPMPAUpdate) SetExamsID(id int32) *ExamApplicationsPMPAUpdate {
	eapu.mutation.SetExamsID(id)
	return eapu
}

// SetNillableExamsID sets the "Exams" edge to the Exam entity by ID if the given value is not nil.
func (eapu *ExamApplicationsPMPAUpdate) SetNillableExamsID(id *int32) *ExamApplicationsPMPAUpdate {
	if id != nil {
		eapu = eapu.SetExamsID(*id)
	}
	return eapu
}

// SetExams sets the "Exams" edge to the Exam entity.
func (eapu *ExamApplicationsPMPAUpdate) SetExams(e *Exam) *ExamApplicationsPMPAUpdate {
	return eapu.SetExamsID(e.ID)
}

// SetPMPAExamCentresID sets the "PMPAExamCentres" edge to the Center entity by ID.
func (eapu *ExamApplicationsPMPAUpdate) SetPMPAExamCentresID(id int32) *ExamApplicationsPMPAUpdate {
	eapu.mutation.SetPMPAExamCentresID(id)
	return eapu
}

// SetNillablePMPAExamCentresID sets the "PMPAExamCentres" edge to the Center entity by ID if the given value is not nil.
func (eapu *ExamApplicationsPMPAUpdate) SetNillablePMPAExamCentresID(id *int32) *ExamApplicationsPMPAUpdate {
	if id != nil {
		eapu = eapu.SetPMPAExamCentresID(*id)
	}
	return eapu
}

// SetPMPAExamCentres sets the "PMPAExamCentres" edge to the Center entity.
func (eapu *ExamApplicationsPMPAUpdate) SetPMPAExamCentres(c *Center) *ExamApplicationsPMPAUpdate {
	return eapu.SetPMPAExamCentresID(c.ID)
}

// SetCircleRefsPMPAID sets the "CircleRefsPMPA" edge to the CircleSummaryForNO entity by ID.
func (eapu *ExamApplicationsPMPAUpdate) SetCircleRefsPMPAID(id int32) *ExamApplicationsPMPAUpdate {
	eapu.mutation.SetCircleRefsPMPAID(id)
	return eapu
}

// SetNillableCircleRefsPMPAID sets the "CircleRefsPMPA" edge to the CircleSummaryForNO entity by ID if the given value is not nil.
func (eapu *ExamApplicationsPMPAUpdate) SetNillableCircleRefsPMPAID(id *int32) *ExamApplicationsPMPAUpdate {
	if id != nil {
		eapu = eapu.SetCircleRefsPMPAID(*id)
	}
	return eapu
}

// SetCircleRefsPMPA sets the "CircleRefsPMPA" edge to the CircleSummaryForNO entity.
func (eapu *ExamApplicationsPMPAUpdate) SetCircleRefsPMPA(c *CircleSummaryForNO) *ExamApplicationsPMPAUpdate {
	return eapu.SetCircleRefsPMPAID(c.ID)
}

// AddLogDatumIDs adds the "LogData" edge to the Logs entity by IDs.
func (eapu *ExamApplicationsPMPAUpdate) AddLogDatumIDs(ids ...int64) *ExamApplicationsPMPAUpdate {
	eapu.mutation.AddLogDatumIDs(ids...)
	return eapu
}

// AddLogData adds the "LogData" edges to the Logs entity.
func (eapu *ExamApplicationsPMPAUpdate) AddLogData(l ...*Logs) *ExamApplicationsPMPAUpdate {
	ids := make([]int64, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return eapu.AddLogDatumIDs(ids...)
}

// Mutation returns the ExamApplicationsPMPAMutation object of the builder.
func (eapu *ExamApplicationsPMPAUpdate) Mutation() *ExamApplicationsPMPAMutation {
	return eapu.mutation
}

// ClearUsersPMPARef clears all "UsersPMPARef" edges to the UserMaster entity.
func (eapu *ExamApplicationsPMPAUpdate) ClearUsersPMPARef() *ExamApplicationsPMPAUpdate {
	eapu.mutation.ClearUsersPMPARef()
	return eapu
}

// RemoveUsersPMPARefIDs removes the "UsersPMPARef" edge to UserMaster entities by IDs.
func (eapu *ExamApplicationsPMPAUpdate) RemoveUsersPMPARefIDs(ids ...int64) *ExamApplicationsPMPAUpdate {
	eapu.mutation.RemoveUsersPMPARefIDs(ids...)
	return eapu
}

// RemoveUsersPMPARef removes "UsersPMPARef" edges to UserMaster entities.
func (eapu *ExamApplicationsPMPAUpdate) RemoveUsersPMPARef(u ...*UserMaster) *ExamApplicationsPMPAUpdate {
	ids := make([]int64, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return eapu.RemoveUsersPMPARefIDs(ids...)
}

// ClearRoleusers clears the "roleusers" edge to the RoleMaster entity.
func (eapu *ExamApplicationsPMPAUpdate) ClearRoleusers() *ExamApplicationsPMPAUpdate {
	eapu.mutation.ClearRoleusers()
	return eapu
}

// ClearExamcitycenter clears the "examcitycenter" edge to the ExamCityCenter entity.
func (eapu *ExamApplicationsPMPAUpdate) ClearExamcitycenter() *ExamApplicationsPMPAUpdate {
	eapu.mutation.ClearExamcitycenter()
	return eapu
}

// ClearCadrePrefRef clears all "CadrePref_Ref" edges to the Cadre_Choice_PMPA entity.
func (eapu *ExamApplicationsPMPAUpdate) ClearCadrePrefRef() *ExamApplicationsPMPAUpdate {
	eapu.mutation.ClearCadrePrefRef()
	return eapu
}

// RemoveCadrePrefRefIDs removes the "CadrePref_Ref" edge to Cadre_Choice_PMPA entities by IDs.
func (eapu *ExamApplicationsPMPAUpdate) RemoveCadrePrefRefIDs(ids ...int32) *ExamApplicationsPMPAUpdate {
	eapu.mutation.RemoveCadrePrefRefIDs(ids...)
	return eapu
}

// RemoveCadrePrefRef removes "CadrePref_Ref" edges to Cadre_Choice_PMPA entities.
func (eapu *ExamApplicationsPMPAUpdate) RemoveCadrePrefRef(c ...*Cadre_Choice_PMPA) *ExamApplicationsPMPAUpdate {
	ids := make([]int32, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return eapu.RemoveCadrePrefRefIDs(ids...)
}

// ClearCirclePrefRefPMPA clears all "CirclePrefRefPMPA" edges to the Division_Choice_PMPA entity.
func (eapu *ExamApplicationsPMPAUpdate) ClearCirclePrefRefPMPA() *ExamApplicationsPMPAUpdate {
	eapu.mutation.ClearCirclePrefRefPMPA()
	return eapu
}

// RemoveCirclePrefRefPMPAIDs removes the "CirclePrefRefPMPA" edge to Division_Choice_PMPA entities by IDs.
func (eapu *ExamApplicationsPMPAUpdate) RemoveCirclePrefRefPMPAIDs(ids ...int32) *ExamApplicationsPMPAUpdate {
	eapu.mutation.RemoveCirclePrefRefPMPAIDs(ids...)
	return eapu
}

// RemoveCirclePrefRefPMPA removes "CirclePrefRefPMPA" edges to Division_Choice_PMPA entities.
func (eapu *ExamApplicationsPMPAUpdate) RemoveCirclePrefRefPMPA(d ...*Division_Choice_PMPA) *ExamApplicationsPMPAUpdate {
	ids := make([]int32, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return eapu.RemoveCirclePrefRefPMPAIDs(ids...)
}

// ClearPMPAApplicationsRef clears all "PMPAApplicationsRef" edges to the RecommendationsPMPAApplications entity.
func (eapu *ExamApplicationsPMPAUpdate) ClearPMPAApplicationsRef() *ExamApplicationsPMPAUpdate {
	eapu.mutation.ClearPMPAApplicationsRef()
	return eapu
}

// RemovePMPAApplicationsRefIDs removes the "PMPAApplicationsRef" edge to RecommendationsPMPAApplications entities by IDs.
func (eapu *ExamApplicationsPMPAUpdate) RemovePMPAApplicationsRefIDs(ids ...int64) *ExamApplicationsPMPAUpdate {
	eapu.mutation.RemovePMPAApplicationsRefIDs(ids...)
	return eapu
}

// RemovePMPAApplicationsRef removes "PMPAApplicationsRef" edges to RecommendationsPMPAApplications entities.
func (eapu *ExamApplicationsPMPAUpdate) RemovePMPAApplicationsRef(r ...*RecommendationsPMPAApplications) *ExamApplicationsPMPAUpdate {
	ids := make([]int64, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return eapu.RemovePMPAApplicationsRefIDs(ids...)
}

// ClearExams clears the "Exams" edge to the Exam entity.
func (eapu *ExamApplicationsPMPAUpdate) ClearExams() *ExamApplicationsPMPAUpdate {
	eapu.mutation.ClearExams()
	return eapu
}

// ClearPMPAExamCentres clears the "PMPAExamCentres" edge to the Center entity.
func (eapu *ExamApplicationsPMPAUpdate) ClearPMPAExamCentres() *ExamApplicationsPMPAUpdate {
	eapu.mutation.ClearPMPAExamCentres()
	return eapu
}

// ClearCircleRefsPMPA clears the "CircleRefsPMPA" edge to the CircleSummaryForNO entity.
func (eapu *ExamApplicationsPMPAUpdate) ClearCircleRefsPMPA() *ExamApplicationsPMPAUpdate {
	eapu.mutation.ClearCircleRefsPMPA()
	return eapu
}

// ClearLogData clears all "LogData" edges to the Logs entity.
func (eapu *ExamApplicationsPMPAUpdate) ClearLogData() *ExamApplicationsPMPAUpdate {
	eapu.mutation.ClearLogData()
	return eapu
}

// RemoveLogDatumIDs removes the "LogData" edge to Logs entities by IDs.
func (eapu *ExamApplicationsPMPAUpdate) RemoveLogDatumIDs(ids ...int64) *ExamApplicationsPMPAUpdate {
	eapu.mutation.RemoveLogDatumIDs(ids...)
	return eapu
}

// RemoveLogData removes "LogData" edges to Logs entities.
func (eapu *ExamApplicationsPMPAUpdate) RemoveLogData(l ...*Logs) *ExamApplicationsPMPAUpdate {
	ids := make([]int64, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return eapu.RemoveLogDatumIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (eapu *ExamApplicationsPMPAUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, eapu.sqlSave, eapu.mutation, eapu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (eapu *ExamApplicationsPMPAUpdate) SaveX(ctx context.Context) int {
	affected, err := eapu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (eapu *ExamApplicationsPMPAUpdate) Exec(ctx context.Context) error {
	_, err := eapu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eapu *ExamApplicationsPMPAUpdate) ExecX(ctx context.Context) {
	if err := eapu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (eapu *ExamApplicationsPMPAUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(exam_applications_pmpa.Table, exam_applications_pmpa.Columns, sqlgraph.NewFieldSpec(exam_applications_pmpa.FieldID, field.TypeInt64))
	if ps := eapu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eapu.mutation.ApplicationNumber(); ok {
		_spec.SetField(exam_applications_pmpa.FieldApplicationNumber, field.TypeString, value)
	}
	if eapu.mutation.ApplicationNumberCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldApplicationNumber, field.TypeString)
	}
	if value, ok := eapu.mutation.ApplnSubmittedDate(); ok {
		_spec.SetField(exam_applications_pmpa.FieldApplnSubmittedDate, field.TypeTime, value)
	}
	if eapu.mutation.ApplnSubmittedDateCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldApplnSubmittedDate, field.TypeTime)
	}
	if value, ok := eapu.mutation.ExamShortName(); ok {
		_spec.SetField(exam_applications_pmpa.FieldExamShortName, field.TypeString, value)
	}
	if eapu.mutation.ExamShortNameCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldExamShortName, field.TypeString)
	}
	if value, ok := eapu.mutation.ExamName(); ok {
		_spec.SetField(exam_applications_pmpa.FieldExamName, field.TypeString, value)
	}
	if eapu.mutation.ExamNameCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldExamName, field.TypeString)
	}
	if value, ok := eapu.mutation.SmsExamShortName(); ok {
		_spec.SetField(exam_applications_pmpa.FieldSmsExamShortName, field.TypeString, value)
	}
	if eapu.mutation.SmsExamShortNameCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldSmsExamShortName, field.TypeString)
	}
	if value, ok := eapu.mutation.ExamYear(); ok {
		_spec.SetField(exam_applications_pmpa.FieldExamYear, field.TypeString, value)
	}
	if eapu.mutation.ExamYearCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldExamYear, field.TypeString)
	}
	if value, ok := eapu.mutation.UserID(); ok {
		_spec.SetField(exam_applications_pmpa.FieldUserID, field.TypeInt32, value)
	}
	if value, ok := eapu.mutation.AddedUserID(); ok {
		_spec.AddField(exam_applications_pmpa.FieldUserID, field.TypeInt32, value)
	}
	if eapu.mutation.UserIDCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldUserID, field.TypeInt32)
	}
	if value, ok := eapu.mutation.EmployeeID(); ok {
		_spec.SetField(exam_applications_pmpa.FieldEmployeeID, field.TypeInt64, value)
	}
	if value, ok := eapu.mutation.AddedEmployeeID(); ok {
		_spec.AddField(exam_applications_pmpa.FieldEmployeeID, field.TypeInt64, value)
	}
	if eapu.mutation.EmployeeIDCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldEmployeeID, field.TypeInt64)
	}
	if value, ok := eapu.mutation.EmployeeName(); ok {
		_spec.SetField(exam_applications_pmpa.FieldEmployeeName, field.TypeString, value)
	}
	if eapu.mutation.EmployeeNameCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldEmployeeName, field.TypeString)
	}
	if value, ok := eapu.mutation.DOB(); ok {
		_spec.SetField(exam_applications_pmpa.FieldDOB, field.TypeString, value)
	}
	if eapu.mutation.DOBCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldDOB, field.TypeString)
	}
	if value, ok := eapu.mutation.Gender(); ok {
		_spec.SetField(exam_applications_pmpa.FieldGender, field.TypeString, value)
	}
	if eapu.mutation.GenderCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldGender, field.TypeString)
	}
	if value, ok := eapu.mutation.MobileNumber(); ok {
		_spec.SetField(exam_applications_pmpa.FieldMobileNumber, field.TypeString, value)
	}
	if eapu.mutation.MobileNumberCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldMobileNumber, field.TypeString)
	}
	if value, ok := eapu.mutation.EmailID(); ok {
		_spec.SetField(exam_applications_pmpa.FieldEmailID, field.TypeString, value)
	}
	if eapu.mutation.EmailIDCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldEmailID, field.TypeString)
	}
	if value, ok := eapu.mutation.CategoryCode(); ok {
		_spec.SetField(exam_applications_pmpa.FieldCategoryCode, field.TypeString, value)
	}
	if eapu.mutation.CategoryCodeCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldCategoryCode, field.TypeString)
	}
	if value, ok := eapu.mutation.CategoryDescription(); ok {
		_spec.SetField(exam_applications_pmpa.FieldCategoryDescription, field.TypeString, value)
	}
	if eapu.mutation.CategoryDescriptionCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldCategoryDescription, field.TypeString)
	}
	if value, ok := eapu.mutation.DisabilityTypeID(); ok {
		_spec.SetField(exam_applications_pmpa.FieldDisabilityTypeID, field.TypeString, value)
	}
	if eapu.mutation.DisabilityTypeIDCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldDisabilityTypeID, field.TypeString)
	}
	if value, ok := eapu.mutation.DisabilityTypeCode(); ok {
		_spec.SetField(exam_applications_pmpa.FieldDisabilityTypeCode, field.TypeString, value)
	}
	if eapu.mutation.DisabilityTypeCodeCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldDisabilityTypeCode, field.TypeString)
	}
	if value, ok := eapu.mutation.DisabilityTypeDescription(); ok {
		_spec.SetField(exam_applications_pmpa.FieldDisabilityTypeDescription, field.TypeString, value)
	}
	if eapu.mutation.DisabilityTypeDescriptionCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldDisabilityTypeDescription, field.TypeString)
	}
	if value, ok := eapu.mutation.DisabilityPercentage(); ok {
		_spec.SetField(exam_applications_pmpa.FieldDisabilityPercentage, field.TypeInt32, value)
	}
	if value, ok := eapu.mutation.AddedDisabilityPercentage(); ok {
		_spec.AddField(exam_applications_pmpa.FieldDisabilityPercentage, field.TypeInt32, value)
	}
	if eapu.mutation.DisabilityPercentageCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldDisabilityPercentage, field.TypeInt32)
	}
	if value, ok := eapu.mutation.DCCS(); ok {
		_spec.SetField(exam_applications_pmpa.FieldDCCS, field.TypeString, value)
	}
	if eapu.mutation.DCCSCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldDCCS, field.TypeString)
	}
	if value, ok := eapu.mutation.EntryPostCode(); ok {
		_spec.SetField(exam_applications_pmpa.FieldEntryPostCode, field.TypeString, value)
	}
	if eapu.mutation.EntryPostCodeCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldEntryPostCode, field.TypeString)
	}
	if value, ok := eapu.mutation.EntryPostDescription(); ok {
		_spec.SetField(exam_applications_pmpa.FieldEntryPostDescription, field.TypeString, value)
	}
	if eapu.mutation.EntryPostDescriptionCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldEntryPostDescription, field.TypeString)
	}
	if value, ok := eapu.mutation.PresentPostCode(); ok {
		_spec.SetField(exam_applications_pmpa.FieldPresentPostCode, field.TypeString, value)
	}
	if eapu.mutation.PresentPostCodeCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldPresentPostCode, field.TypeString)
	}
	if value, ok := eapu.mutation.PresentPostDescription(); ok {
		_spec.SetField(exam_applications_pmpa.FieldPresentPostDescription, field.TypeString, value)
	}
	if eapu.mutation.PresentPostDescriptionCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldPresentPostDescription, field.TypeString)
	}
	if value, ok := eapu.mutation.FeederPostCode(); ok {
		_spec.SetField(exam_applications_pmpa.FieldFeederPostCode, field.TypeString, value)
	}
	if eapu.mutation.FeederPostCodeCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldFeederPostCode, field.TypeString)
	}
	if value, ok := eapu.mutation.FeederPostDescription(); ok {
		_spec.SetField(exam_applications_pmpa.FieldFeederPostDescription, field.TypeString, value)
	}
	if eapu.mutation.FeederPostDescriptionCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldFeederPostDescription, field.TypeString)
	}
	if value, ok := eapu.mutation.FeederPostJoiningDate(); ok {
		_spec.SetField(exam_applications_pmpa.FieldFeederPostJoiningDate, field.TypeString, value)
	}
	if eapu.mutation.FeederPostJoiningDateCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldFeederPostJoiningDate, field.TypeString)
	}
	if value, ok := eapu.mutation.DesignationID(); ok {
		_spec.SetField(exam_applications_pmpa.FieldDesignationID, field.TypeString, value)
	}
	if eapu.mutation.DesignationIDCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldDesignationID, field.TypeString)
	}
	if value, ok := eapu.mutation.PresentDesignation(); ok {
		_spec.SetField(exam_applications_pmpa.FieldPresentDesignation, field.TypeString, value)
	}
	if eapu.mutation.PresentDesignationCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldPresentDesignation, field.TypeString)
	}
	if value, ok := eapu.mutation.EducationCode(); ok {
		_spec.SetField(exam_applications_pmpa.FieldEducationCode, field.TypeString, value)
	}
	if eapu.mutation.EducationCodeCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldEducationCode, field.TypeString)
	}
	if value, ok := eapu.mutation.EducationDescription(); ok {
		_spec.SetField(exam_applications_pmpa.FieldEducationDescription, field.TypeString, value)
	}
	if eapu.mutation.EducationDescriptionCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldEducationDescription, field.TypeString)
	}
	if value, ok := eapu.mutation.FacilityUniqueID(); ok {
		_spec.SetField(exam_applications_pmpa.FieldFacilityUniqueID, field.TypeString, value)
	}
	if eapu.mutation.FacilityUniqueIDCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldFacilityUniqueID, field.TypeString)
	}
	if value, ok := eapu.mutation.WorkingOfficePincode(); ok {
		_spec.SetField(exam_applications_pmpa.FieldWorkingOfficePincode, field.TypeInt32, value)
	}
	if value, ok := eapu.mutation.AddedWorkingOfficePincode(); ok {
		_spec.AddField(exam_applications_pmpa.FieldWorkingOfficePincode, field.TypeInt32, value)
	}
	if eapu.mutation.WorkingOfficePincodeCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldWorkingOfficePincode, field.TypeInt32)
	}
	if value, ok := eapu.mutation.WorkingOfficeFacilityID(); ok {
		_spec.SetField(exam_applications_pmpa.FieldWorkingOfficeFacilityID, field.TypeString, value)
	}
	if eapu.mutation.WorkingOfficeFacilityIDCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldWorkingOfficeFacilityID, field.TypeString)
	}
	if value, ok := eapu.mutation.WorkingOfficeName(); ok {
		_spec.SetField(exam_applications_pmpa.FieldWorkingOfficeName, field.TypeString, value)
	}
	if eapu.mutation.WorkingOfficeNameCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldWorkingOfficeName, field.TypeString)
	}
	if value, ok := eapu.mutation.WorkingOfficeCircleFacilityID(); ok {
		_spec.SetField(exam_applications_pmpa.FieldWorkingOfficeCircleFacilityID, field.TypeString, value)
	}
	if eapu.mutation.WorkingOfficeCircleFacilityIDCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldWorkingOfficeCircleFacilityID, field.TypeString)
	}
	if value, ok := eapu.mutation.WorkingOfficeCircleName(); ok {
		_spec.SetField(exam_applications_pmpa.FieldWorkingOfficeCircleName, field.TypeString, value)
	}
	if eapu.mutation.WorkingOfficeCircleNameCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldWorkingOfficeCircleName, field.TypeString)
	}
	if value, ok := eapu.mutation.WorkingOfficeRegionFacilityID(); ok {
		_spec.SetField(exam_applications_pmpa.FieldWorkingOfficeRegionFacilityID, field.TypeString, value)
	}
	if eapu.mutation.WorkingOfficeRegionFacilityIDCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldWorkingOfficeRegionFacilityID, field.TypeString)
	}
	if value, ok := eapu.mutation.WorkingOfficeRegionName(); ok {
		_spec.SetField(exam_applications_pmpa.FieldWorkingOfficeRegionName, field.TypeString, value)
	}
	if eapu.mutation.WorkingOfficeRegionNameCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldWorkingOfficeRegionName, field.TypeString)
	}
	if value, ok := eapu.mutation.WorkingOfficeDivisionFacilityID(); ok {
		_spec.SetField(exam_applications_pmpa.FieldWorkingOfficeDivisionFacilityID, field.TypeString, value)
	}
	if eapu.mutation.WorkingOfficeDivisionFacilityIDCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldWorkingOfficeDivisionFacilityID, field.TypeString)
	}
	if value, ok := eapu.mutation.WorkingOfficeDivisionName(); ok {
		_spec.SetField(exam_applications_pmpa.FieldWorkingOfficeDivisionName, field.TypeString, value)
	}
	if eapu.mutation.WorkingOfficeDivisionNameCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldWorkingOfficeDivisionName, field.TypeString)
	}
	if value, ok := eapu.mutation.ReportingOfficeFacilityID(); ok {
		_spec.SetField(exam_applications_pmpa.FieldReportingOfficeFacilityID, field.TypeString, value)
	}
	if eapu.mutation.ReportingOfficeFacilityIDCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldReportingOfficeFacilityID, field.TypeString)
	}
	if value, ok := eapu.mutation.ReportingOfficeName(); ok {
		_spec.SetField(exam_applications_pmpa.FieldReportingOfficeName, field.TypeString, value)
	}
	if eapu.mutation.ReportingOfficeNameCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldReportingOfficeName, field.TypeString)
	}
	if value, ok := eapu.mutation.LienControllingOfficeID(); ok {
		_spec.SetField(exam_applications_pmpa.FieldLienControllingOfficeID, field.TypeString, value)
	}
	if eapu.mutation.LienControllingOfficeIDCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldLienControllingOfficeID, field.TypeString)
	}
	if value, ok := eapu.mutation.LienControllingOfficeName(); ok {
		_spec.SetField(exam_applications_pmpa.FieldLienControllingOfficeName, field.TypeString, value)
	}
	if eapu.mutation.LienControllingOfficeNameCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldLienControllingOfficeName, field.TypeString)
	}
	if value, ok := eapu.mutation.InDeputation(); ok {
		_spec.SetField(exam_applications_pmpa.FieldInDeputation, field.TypeString, value)
	}
	if eapu.mutation.InDeputationCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldInDeputation, field.TypeString)
	}
	if value, ok := eapu.mutation.DeputationType(); ok {
		_spec.SetField(exam_applications_pmpa.FieldDeputationType, field.TypeString, value)
	}
	if eapu.mutation.DeputationTypeCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldDeputationType, field.TypeString)
	}
	if value, ok := eapu.mutation.DeputationOfficeUniqueId(); ok {
		_spec.SetField(exam_applications_pmpa.FieldDeputationOfficeUniqueId, field.TypeString, value)
	}
	if eapu.mutation.DeputationOfficeUniqueIdCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldDeputationOfficeUniqueId, field.TypeString)
	}
	if value, ok := eapu.mutation.DeputationOfficeFacilityID(); ok {
		_spec.SetField(exam_applications_pmpa.FieldDeputationOfficeFacilityID, field.TypeString, value)
	}
	if eapu.mutation.DeputationOfficeFacilityIDCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldDeputationOfficeFacilityID, field.TypeString)
	}
	if value, ok := eapu.mutation.DeputationOfficeName(); ok {
		_spec.SetField(exam_applications_pmpa.FieldDeputationOfficeName, field.TypeString, value)
	}
	if eapu.mutation.DeputationOfficeNameCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldDeputationOfficeName, field.TypeString)
	}
	if value, ok := eapu.mutation.DeputationControllingOfficeID(); ok {
		_spec.SetField(exam_applications_pmpa.FieldDeputationControllingOfficeID, field.TypeString, value)
	}
	if eapu.mutation.DeputationControllingOfficeIDCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldDeputationControllingOfficeID, field.TypeString)
	}
	if value, ok := eapu.mutation.DeputationControllingOfficeName(); ok {
		_spec.SetField(exam_applications_pmpa.FieldDeputationControllingOfficeName, field.TypeString, value)
	}
	if eapu.mutation.DeputationControllingOfficeNameCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldDeputationControllingOfficeName, field.TypeString)
	}
	if value, ok := eapu.mutation.ControllingOfficeFacilityID(); ok {
		_spec.SetField(exam_applications_pmpa.FieldControllingOfficeFacilityID, field.TypeString, value)
	}
	if eapu.mutation.ControllingOfficeFacilityIDCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldControllingOfficeFacilityID, field.TypeString)
	}
	if value, ok := eapu.mutation.ControllingOfficeName(); ok {
		_spec.SetField(exam_applications_pmpa.FieldControllingOfficeName, field.TypeString, value)
	}
	if eapu.mutation.ControllingOfficeNameCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldControllingOfficeName, field.TypeString)
	}
	if value, ok := eapu.mutation.NodalOfficeFacilityID(); ok {
		_spec.SetField(exam_applications_pmpa.FieldNodalOfficeFacilityID, field.TypeString, value)
	}
	if eapu.mutation.NodalOfficeFacilityIDCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldNodalOfficeFacilityID, field.TypeString)
	}
	if value, ok := eapu.mutation.NodalOfficeName(); ok {
		_spec.SetField(exam_applications_pmpa.FieldNodalOfficeName, field.TypeString, value)
	}
	if eapu.mutation.NodalOfficeNameCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldNodalOfficeName, field.TypeString)
	}
	if value, ok := eapu.mutation.CenterFacilityId(); ok {
		_spec.SetField(exam_applications_pmpa.FieldCenterFacilityId, field.TypeString, value)
	}
	if eapu.mutation.CenterFacilityIdCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldCenterFacilityId, field.TypeString)
	}
	if value, ok := eapu.mutation.CentrePreference(); ok {
		_spec.SetField(exam_applications_pmpa.FieldCentrePreference, field.TypeString, value)
	}
	if eapu.mutation.CentrePreferenceCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldCentrePreference, field.TypeString)
	}
	if value, ok := eapu.mutation.Signature(); ok {
		_spec.SetField(exam_applications_pmpa.FieldSignature, field.TypeString, value)
	}
	if eapu.mutation.SignatureCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldSignature, field.TypeString)
	}
	if value, ok := eapu.mutation.Photo(); ok {
		_spec.SetField(exam_applications_pmpa.FieldPhoto, field.TypeString, value)
	}
	if eapu.mutation.PhotoCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldPhoto, field.TypeString)
	}
	if value, ok := eapu.mutation.CandidatePhoto(); ok {
		_spec.SetField(exam_applications_pmpa.FieldCandidatePhoto, field.TypeBytes, value)
	}
	if eapu.mutation.CandidatePhotoCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldCandidatePhoto, field.TypeBytes)
	}
	if value, ok := eapu.mutation.CandidateSignature(); ok {
		_spec.SetField(exam_applications_pmpa.FieldCandidateSignature, field.TypeBytes, value)
	}
	if eapu.mutation.CandidateSignatureCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldCandidateSignature, field.TypeBytes)
	}
	if value, ok := eapu.mutation.SignaturePath(); ok {
		_spec.SetField(exam_applications_pmpa.FieldSignaturePath, field.TypeString, value)
	}
	if eapu.mutation.SignaturePathCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldSignaturePath, field.TypeString)
	}
	if value, ok := eapu.mutation.PhotoPath(); ok {
		_spec.SetField(exam_applications_pmpa.FieldPhotoPath, field.TypeString, value)
	}
	if eapu.mutation.PhotoPathCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldPhotoPath, field.TypeString)
	}
	if value, ok := eapu.mutation.TempHallTicket(); ok {
		_spec.SetField(exam_applications_pmpa.FieldTempHallTicket, field.TypeString, value)
	}
	if eapu.mutation.TempHallTicketCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldTempHallTicket, field.TypeString)
	}
	if value, ok := eapu.mutation.CandidateRemarks(); ok {
		_spec.SetField(exam_applications_pmpa.FieldCandidateRemarks, field.TypeString, value)
	}
	if eapu.mutation.CandidateRemarksCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldCandidateRemarks, field.TypeString)
	}
	if value, ok := eapu.mutation.VAGeneralRemarks(); ok {
		_spec.SetField(exam_applications_pmpa.FieldVAGeneralRemarks, field.TypeString, value)
	}
	if eapu.mutation.VAGeneralRemarksCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldVAGeneralRemarks, field.TypeString)
	}
	if value, ok := eapu.mutation.CAGeneralRemarks(); ok {
		_spec.SetField(exam_applications_pmpa.FieldCAGeneralRemarks, field.TypeString, value)
	}
	if eapu.mutation.CAGeneralRemarksCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldCAGeneralRemarks, field.TypeString)
	}
	if value, ok := eapu.mutation.NAGeneralRemarks(); ok {
		_spec.SetField(exam_applications_pmpa.FieldNAGeneralRemarks, field.TypeString, value)
	}
	if eapu.mutation.NAGeneralRemarksCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldNAGeneralRemarks, field.TypeString)
	}
	if value, ok := eapu.mutation.ApplicationStatus(); ok {
		_spec.SetField(exam_applications_pmpa.FieldApplicationStatus, field.TypeString, value)
	}
	if eapu.mutation.ApplicationStatusCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldApplicationStatus, field.TypeString)
	}
	if value, ok := eapu.mutation.Status(); ok {
		_spec.SetField(exam_applications_pmpa.FieldStatus, field.TypeString, value)
	}
	if eapu.mutation.StatusCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldStatus, field.TypeString)
	}
	if value, ok := eapu.mutation.VAUserId(); ok {
		_spec.SetField(exam_applications_pmpa.FieldVAUserId, field.TypeInt32, value)
	}
	if value, ok := eapu.mutation.AddedVAUserId(); ok {
		_spec.AddField(exam_applications_pmpa.FieldVAUserId, field.TypeInt32, value)
	}
	if eapu.mutation.VAUserIdCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldVAUserId, field.TypeInt32)
	}
	if value, ok := eapu.mutation.VAUserName(); ok {
		_spec.SetField(exam_applications_pmpa.FieldVAUserName, field.TypeString, value)
	}
	if eapu.mutation.VAUserNameCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldVAUserName, field.TypeString)
	}
	if value, ok := eapu.mutation.VAEmployeeID(); ok {
		_spec.SetField(exam_applications_pmpa.FieldVAEmployeeID, field.TypeString, value)
	}
	if eapu.mutation.VAEmployeeIDCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldVAEmployeeID, field.TypeString)
	}
	if value, ok := eapu.mutation.VAEmployeeDesignation(); ok {
		_spec.SetField(exam_applications_pmpa.FieldVAEmployeeDesignation, field.TypeString, value)
	}
	if eapu.mutation.VAEmployeeDesignationCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldVAEmployeeDesignation, field.TypeString)
	}
	if value, ok := eapu.mutation.VARemarks(); ok {
		_spec.SetField(exam_applications_pmpa.FieldVARemarks, field.TypeString, value)
	}
	if eapu.mutation.VARemarksCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldVARemarks, field.TypeString)
	}
	if value, ok := eapu.mutation.VADate(); ok {
		_spec.SetField(exam_applications_pmpa.FieldVADate, field.TypeTime, value)
	}
	if eapu.mutation.VADateCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldVADate, field.TypeTime)
	}
	if value, ok := eapu.mutation.CAUserId(); ok {
		_spec.SetField(exam_applications_pmpa.FieldCAUserId, field.TypeInt32, value)
	}
	if value, ok := eapu.mutation.AddedCAUserId(); ok {
		_spec.AddField(exam_applications_pmpa.FieldCAUserId, field.TypeInt32, value)
	}
	if eapu.mutation.CAUserIdCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldCAUserId, field.TypeInt32)
	}
	if value, ok := eapu.mutation.CAUserName(); ok {
		_spec.SetField(exam_applications_pmpa.FieldCAUserName, field.TypeString, value)
	}
	if eapu.mutation.CAUserNameCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldCAUserName, field.TypeString)
	}
	if value, ok := eapu.mutation.CAEmployeeID(); ok {
		_spec.SetField(exam_applications_pmpa.FieldCAEmployeeID, field.TypeString, value)
	}
	if eapu.mutation.CAEmployeeIDCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldCAEmployeeID, field.TypeString)
	}
	if value, ok := eapu.mutation.CAEmployeeDesignation(); ok {
		_spec.SetField(exam_applications_pmpa.FieldCAEmployeeDesignation, field.TypeString, value)
	}
	if eapu.mutation.CAEmployeeDesignationCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldCAEmployeeDesignation, field.TypeString)
	}
	if value, ok := eapu.mutation.CARemarks(); ok {
		_spec.SetField(exam_applications_pmpa.FieldCARemarks, field.TypeString, value)
	}
	if eapu.mutation.CARemarksCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldCARemarks, field.TypeString)
	}
	if value, ok := eapu.mutation.CADate(); ok {
		_spec.SetField(exam_applications_pmpa.FieldCADate, field.TypeTime, value)
	}
	if eapu.mutation.CADateCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldCADate, field.TypeTime)
	}
	if value, ok := eapu.mutation.NAUserId(); ok {
		_spec.SetField(exam_applications_pmpa.FieldNAUserId, field.TypeInt32, value)
	}
	if value, ok := eapu.mutation.AddedNAUserId(); ok {
		_spec.AddField(exam_applications_pmpa.FieldNAUserId, field.TypeInt32, value)
	}
	if eapu.mutation.NAUserIdCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldNAUserId, field.TypeInt32)
	}
	if value, ok := eapu.mutation.NAUserName(); ok {
		_spec.SetField(exam_applications_pmpa.FieldNAUserName, field.TypeString, value)
	}
	if eapu.mutation.NAUserNameCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldNAUserName, field.TypeString)
	}
	if value, ok := eapu.mutation.NAEmployeeID(); ok {
		_spec.SetField(exam_applications_pmpa.FieldNAEmployeeID, field.TypeString, value)
	}
	if eapu.mutation.NAEmployeeIDCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldNAEmployeeID, field.TypeString)
	}
	if value, ok := eapu.mutation.NAEmployeeDesignation(); ok {
		_spec.SetField(exam_applications_pmpa.FieldNAEmployeeDesignation, field.TypeString, value)
	}
	if eapu.mutation.NAEmployeeDesignationCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldNAEmployeeDesignation, field.TypeString)
	}
	if value, ok := eapu.mutation.NARemarks(); ok {
		_spec.SetField(exam_applications_pmpa.FieldNARemarks, field.TypeString, value)
	}
	if eapu.mutation.NARemarksCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldNARemarks, field.TypeString)
	}
	if value, ok := eapu.mutation.NADate(); ok {
		_spec.SetField(exam_applications_pmpa.FieldNADate, field.TypeTime, value)
	}
	if eapu.mutation.NADateCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldNADate, field.TypeTime)
	}
	if value, ok := eapu.mutation.AppliactionRemarks(); ok {
		_spec.SetField(exam_applications_pmpa.FieldAppliactionRemarks, field.TypeString, value)
	}
	if eapu.mutation.AppliactionRemarksCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldAppliactionRemarks, field.TypeString)
	}
	if value, ok := eapu.mutation.CadrePreferences(); ok {
		_spec.SetField(exam_applications_pmpa.FieldCadrePreferences, field.TypeJSON, value)
	}
	if value, ok := eapu.mutation.AppendedCadrePreferences(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, exam_applications_pmpa.FieldCadrePreferences, value)
		})
	}
	if eapu.mutation.CadrePreferencesCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldCadrePreferences, field.TypeJSON)
	}
	if value, ok := eapu.mutation.CAPreviousRemarks(); ok {
		_spec.SetField(exam_applications_pmpa.FieldCAPreviousRemarks, field.TypeString, value)
	}
	if eapu.mutation.CAPreviousRemarksCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldCAPreviousRemarks, field.TypeString)
	}
	if value, ok := eapu.mutation.PunishmentStatus(); ok {
		_spec.SetField(exam_applications_pmpa.FieldPunishmentStatus, field.TypeBool, value)
	}
	if eapu.mutation.PunishmentStatusCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldPunishmentStatus, field.TypeBool)
	}
	if value, ok := eapu.mutation.DisciplinaryCaseStatus(); ok {
		_spec.SetField(exam_applications_pmpa.FieldDisciplinaryCaseStatus, field.TypeBool, value)
	}
	if eapu.mutation.DisciplinaryCaseStatusCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldDisciplinaryCaseStatus, field.TypeBool)
	}
	if value, ok := eapu.mutation.GenerateHallTicketFlag(); ok {
		_spec.SetField(exam_applications_pmpa.FieldGenerateHallTicketFlag, field.TypeBool, value)
	}
	if eapu.mutation.GenerateHallTicketFlagCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldGenerateHallTicketFlag, field.TypeBool)
	}
	if value, ok := eapu.mutation.HallTicketNumber(); ok {
		_spec.SetField(exam_applications_pmpa.FieldHallTicketNumber, field.TypeString, value)
	}
	if eapu.mutation.HallTicketNumberCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldHallTicketNumber, field.TypeString)
	}
	if value, ok := eapu.mutation.HallTicketGeneratedFlag(); ok {
		_spec.SetField(exam_applications_pmpa.FieldHallTicketGeneratedFlag, field.TypeBool, value)
	}
	if eapu.mutation.HallTicketGeneratedFlagCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldHallTicketGeneratedFlag, field.TypeBool)
	}
	if value, ok := eapu.mutation.GenerateHallTicketFlagByNO(); ok {
		_spec.SetField(exam_applications_pmpa.FieldGenerateHallTicketFlagByNO, field.TypeBool, value)
	}
	if eapu.mutation.GenerateHallTicketFlagByNOCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldGenerateHallTicketFlagByNO, field.TypeBool)
	}
	if value, ok := eapu.mutation.HallTicketGeneratedDate(); ok {
		_spec.SetField(exam_applications_pmpa.FieldHallTicketGeneratedDate, field.TypeTime, value)
	}
	if eapu.mutation.HallTicketGeneratedDateCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldHallTicketGeneratedDate, field.TypeTime)
	}
	if value, ok := eapu.mutation.TemporaryHallTicket(); ok {
		_spec.SetField(exam_applications_pmpa.FieldTemporaryHallTicket, field.TypeString, value)
	}
	if eapu.mutation.TemporaryHallTicketCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldTemporaryHallTicket, field.TypeString)
	}
	if value, ok := eapu.mutation.OptionUsed(); ok {
		_spec.SetField(exam_applications_pmpa.FieldOptionUsed, field.TypeString, value)
	}
	if eapu.mutation.OptionUsedCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldOptionUsed, field.TypeString)
	}
	if value, ok := eapu.mutation.Remarks(); ok {
		_spec.SetField(exam_applications_pmpa.FieldRemarks, field.TypeString, value)
	}
	if eapu.mutation.RemarksCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldRemarks, field.TypeString)
	}
	if value, ok := eapu.mutation.Cadre(); ok {
		_spec.SetField(exam_applications_pmpa.FieldCadre, field.TypeString, value)
	}
	if eapu.mutation.CadreCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldCadre, field.TypeString)
	}
	if value, ok := eapu.mutation.EmployeePost(); ok {
		_spec.SetField(exam_applications_pmpa.FieldEmployeePost, field.TypeString, value)
	}
	if eapu.mutation.EmployeePostCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldEmployeePost, field.TypeString)
	}
	if value, ok := eapu.mutation.DOJInEligiblePost(); ok {
		_spec.SetField(exam_applications_pmpa.FieldDOJInEligiblePost, field.TypeString, value)
	}
	if eapu.mutation.DOJInEligiblePostCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldDOJInEligiblePost, field.TypeString)
	}
	if value, ok := eapu.mutation.DivisionPreferences(); ok {
		_spec.SetField(exam_applications_pmpa.FieldDivisionPreferences, field.TypeJSON, value)
	}
	if value, ok := eapu.mutation.AppendedDivisionPreferences(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, exam_applications_pmpa.FieldDivisionPreferences, value)
		})
	}
	if eapu.mutation.DivisionPreferencesCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldDivisionPreferences, field.TypeJSON)
	}
	if value, ok := eapu.mutation.IpAddress(); ok {
		_spec.SetField(exam_applications_pmpa.FieldIpAddress, field.TypeString, value)
	}
	if eapu.mutation.IpAddressCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldIpAddress, field.TypeString)
	}
	if value, ok := eapu.mutation.LatitudeLongitude(); ok {
		_spec.SetField(exam_applications_pmpa.FieldLatitudeLongitude, field.TypeString, value)
	}
	if eapu.mutation.LatitudeLongitudeCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldLatitudeLongitude, field.TypeString)
	}
	if value, ok := eapu.mutation.FacilityName(); ok {
		_spec.SetField(exam_applications_pmpa.FieldFacilityName, field.TypeString, value)
	}
	if eapu.mutation.FacilityNameCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldFacilityName, field.TypeString)
	}
	if value, ok := eapu.mutation.ServiceLength(); ok {
		_spec.SetField(exam_applications_pmpa.FieldServiceLength, field.TypeJSON, value)
	}
	if value, ok := eapu.mutation.AppendedServiceLength(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, exam_applications_pmpa.FieldServiceLength, value)
		})
	}
	if eapu.mutation.ServiceLengthCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldServiceLength, field.TypeJSON)
	}
	if value, ok := eapu.mutation.NonQualifyingService(); ok {
		_spec.SetField(exam_applications_pmpa.FieldNonQualifyingService, field.TypeJSON, value)
	}
	if value, ok := eapu.mutation.AppendedNonQualifyingService(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, exam_applications_pmpa.FieldNonQualifyingService, value)
		})
	}
	if eapu.mutation.NonQualifyingServiceCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldNonQualifyingService, field.TypeJSON)
	}
	if value, ok := eapu.mutation.DCInPresentCadre(); ok {
		_spec.SetField(exam_applications_pmpa.FieldDCInPresentCadre, field.TypeString, value)
	}
	if eapu.mutation.DCInPresentCadreCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldDCInPresentCadre, field.TypeString)
	}
	if value, ok := eapu.mutation.ReportingOfficeID(); ok {
		_spec.SetField(exam_applications_pmpa.FieldReportingOfficeID, field.TypeString, value)
	}
	if eapu.mutation.ReportingOfficeIDCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldReportingOfficeID, field.TypeString)
	}
	if value, ok := eapu.mutation.CircleID(); ok {
		_spec.SetField(exam_applications_pmpa.FieldCircleID, field.TypeInt32, value)
	}
	if value, ok := eapu.mutation.AddedCircleID(); ok {
		_spec.AddField(exam_applications_pmpa.FieldCircleID, field.TypeInt32, value)
	}
	if eapu.mutation.CircleIDCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldCircleID, field.TypeInt32)
	}
	if value, ok := eapu.mutation.RegionID(); ok {
		_spec.SetField(exam_applications_pmpa.FieldRegionID, field.TypeInt32, value)
	}
	if value, ok := eapu.mutation.AddedRegionID(); ok {
		_spec.AddField(exam_applications_pmpa.FieldRegionID, field.TypeInt32, value)
	}
	if eapu.mutation.RegionIDCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldRegionID, field.TypeInt32)
	}
	if value, ok := eapu.mutation.DivisionID(); ok {
		_spec.SetField(exam_applications_pmpa.FieldDivisionID, field.TypeInt32, value)
	}
	if value, ok := eapu.mutation.AddedDivisionID(); ok {
		_spec.AddField(exam_applications_pmpa.FieldDivisionID, field.TypeInt32, value)
	}
	if eapu.mutation.DivisionIDCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldDivisionID, field.TypeInt32)
	}
	if value, ok := eapu.mutation.PostPreferences(); ok {
		_spec.SetField(exam_applications_pmpa.FieldPostPreferences, field.TypeJSON, value)
	}
	if value, ok := eapu.mutation.AppendedPostPreferences(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, exam_applications_pmpa.FieldPostPreferences, value)
		})
	}
	if eapu.mutation.PostPreferencesCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldPostPreferences, field.TypeJSON)
	}
	if value, ok := eapu.mutation.UnitPreferences(); ok {
		_spec.SetField(exam_applications_pmpa.FieldUnitPreferences, field.TypeJSON, value)
	}
	if value, ok := eapu.mutation.AppendedUnitPreferences(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, exam_applications_pmpa.FieldUnitPreferences, value)
		})
	}
	if eapu.mutation.UnitPreferencesCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldUnitPreferences, field.TypeJSON)
	}
	if value, ok := eapu.mutation.PMMailGuardMTSEngagement(); ok {
		_spec.SetField(exam_applications_pmpa.FieldPMMailGuardMTSEngagement, field.TypeJSON, value)
	}
	if value, ok := eapu.mutation.AppendedPMMailGuardMTSEngagement(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, exam_applications_pmpa.FieldPMMailGuardMTSEngagement, value)
		})
	}
	if eapu.mutation.PMMailGuardMTSEngagementCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldPMMailGuardMTSEngagement, field.TypeJSON)
	}
	if value, ok := eapu.mutation.CenterId(); ok {
		_spec.SetField(exam_applications_pmpa.FieldCenterId, field.TypeInt32, value)
	}
	if value, ok := eapu.mutation.AddedCenterId(); ok {
		_spec.AddField(exam_applications_pmpa.FieldCenterId, field.TypeInt32, value)
	}
	if eapu.mutation.CenterIdCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldCenterId, field.TypeInt32)
	}
	if value, ok := eapu.mutation.ClaimingQualifyingService(); ok {
		_spec.SetField(exam_applications_pmpa.FieldClaimingQualifyingService, field.TypeString, value)
	}
	if eapu.mutation.ClaimingQualifyingServiceCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldClaimingQualifyingService, field.TypeString)
	}
	if value, ok := eapu.mutation.DeputationOfficePincode(); ok {
		_spec.SetField(exam_applications_pmpa.FieldDeputationOfficePincode, field.TypeString, value)
	}
	if eapu.mutation.DeputationOfficePincodeCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldDeputationOfficePincode, field.TypeString)
	}
	if value, ok := eapu.mutation.RecommendedStatus(); ok {
		_spec.SetField(exam_applications_pmpa.FieldRecommendedStatus, field.TypeString, value)
	}
	if eapu.mutation.RecommendedStatusCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldRecommendedStatus, field.TypeString)
	}
	if value, ok := eapu.mutation.ApplicationWdlDate(); ok {
		_spec.SetField(exam_applications_pmpa.FieldApplicationWdlDate, field.TypeTime, value)
	}
	if eapu.mutation.ApplicationWdlDateCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldApplicationWdlDate, field.TypeTime)
	}
	if value, ok := eapu.mutation.UpdatedAt(); ok {
		_spec.SetField(exam_applications_pmpa.FieldUpdatedAt, field.TypeTime, value)
	}
	if eapu.mutation.UpdatedAtCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := eapu.mutation.UpdatedBy(); ok {
		_spec.SetField(exam_applications_pmpa.FieldUpdatedBy, field.TypeString, value)
	}
	if eapu.mutation.UpdatedByCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := eapu.mutation.ExamCenterHall(); ok {
		_spec.SetField(exam_applications_pmpa.FieldExamCenterHall, field.TypeInt32, value)
	}
	if value, ok := eapu.mutation.AddedExamCenterHall(); ok {
		_spec.AddField(exam_applications_pmpa.FieldExamCenterHall, field.TypeInt32, value)
	}
	if eapu.mutation.ExamCenterHallCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldExamCenterHall, field.TypeInt32)
	}
	if value, ok := eapu.mutation.HallName(); ok {
		_spec.SetField(exam_applications_pmpa.FieldHallName, field.TypeString, value)
	}
	if eapu.mutation.HallNameCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldHallName, field.TypeString)
	}
	if eapu.mutation.UsersPMPARefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_applications_pmpa.UsersPMPARefTable,
			Columns: []string{exam_applications_pmpa.UsersPMPARefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usermaster.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eapu.mutation.RemovedUsersPMPARefIDs(); len(nodes) > 0 && !eapu.mutation.UsersPMPARefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_applications_pmpa.UsersPMPARefTable,
			Columns: []string{exam_applications_pmpa.UsersPMPARefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usermaster.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eapu.mutation.UsersPMPARefIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_applications_pmpa.UsersPMPARefTable,
			Columns: []string{exam_applications_pmpa.UsersPMPARefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usermaster.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eapu.mutation.RoleusersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   exam_applications_pmpa.RoleusersTable,
			Columns: []string{exam_applications_pmpa.RoleusersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rolemaster.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eapu.mutation.RoleusersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   exam_applications_pmpa.RoleusersTable,
			Columns: []string{exam_applications_pmpa.RoleusersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rolemaster.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eapu.mutation.ExamcitycenterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   exam_applications_pmpa.ExamcitycenterTable,
			Columns: []string{exam_applications_pmpa.ExamcitycenterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(examcitycenter.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eapu.mutation.ExamcitycenterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   exam_applications_pmpa.ExamcitycenterTable,
			Columns: []string{exam_applications_pmpa.ExamcitycenterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(examcitycenter.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eapu.mutation.CadrePrefRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_applications_pmpa.CadrePrefRefTable,
			Columns: []string{exam_applications_pmpa.CadrePrefRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cadre_choice_pmpa.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eapu.mutation.RemovedCadrePrefRefIDs(); len(nodes) > 0 && !eapu.mutation.CadrePrefRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_applications_pmpa.CadrePrefRefTable,
			Columns: []string{exam_applications_pmpa.CadrePrefRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cadre_choice_pmpa.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eapu.mutation.CadrePrefRefIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_applications_pmpa.CadrePrefRefTable,
			Columns: []string{exam_applications_pmpa.CadrePrefRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cadre_choice_pmpa.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eapu.mutation.CirclePrefRefPMPACleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_applications_pmpa.CirclePrefRefPMPATable,
			Columns: []string{exam_applications_pmpa.CirclePrefRefPMPAColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(division_choice_pmpa.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eapu.mutation.RemovedCirclePrefRefPMPAIDs(); len(nodes) > 0 && !eapu.mutation.CirclePrefRefPMPACleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_applications_pmpa.CirclePrefRefPMPATable,
			Columns: []string{exam_applications_pmpa.CirclePrefRefPMPAColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(division_choice_pmpa.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eapu.mutation.CirclePrefRefPMPAIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_applications_pmpa.CirclePrefRefPMPATable,
			Columns: []string{exam_applications_pmpa.CirclePrefRefPMPAColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(division_choice_pmpa.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eapu.mutation.PMPAApplicationsRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_applications_pmpa.PMPAApplicationsRefTable,
			Columns: []string{exam_applications_pmpa.PMPAApplicationsRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(recommendationspmpaapplications.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eapu.mutation.RemovedPMPAApplicationsRefIDs(); len(nodes) > 0 && !eapu.mutation.PMPAApplicationsRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_applications_pmpa.PMPAApplicationsRefTable,
			Columns: []string{exam_applications_pmpa.PMPAApplicationsRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(recommendationspmpaapplications.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eapu.mutation.PMPAApplicationsRefIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_applications_pmpa.PMPAApplicationsRefTable,
			Columns: []string{exam_applications_pmpa.PMPAApplicationsRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(recommendationspmpaapplications.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eapu.mutation.ExamsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   exam_applications_pmpa.ExamsTable,
			Columns: []string{exam_applications_pmpa.ExamsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eapu.mutation.ExamsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   exam_applications_pmpa.ExamsTable,
			Columns: []string{exam_applications_pmpa.ExamsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eapu.mutation.PMPAExamCentresCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   exam_applications_pmpa.PMPAExamCentresTable,
			Columns: []string{exam_applications_pmpa.PMPAExamCentresColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(center.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eapu.mutation.PMPAExamCentresIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   exam_applications_pmpa.PMPAExamCentresTable,
			Columns: []string{exam_applications_pmpa.PMPAExamCentresColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(center.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eapu.mutation.CircleRefsPMPACleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   exam_applications_pmpa.CircleRefsPMPATable,
			Columns: []string{exam_applications_pmpa.CircleRefsPMPAColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(circlesummaryforno.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eapu.mutation.CircleRefsPMPAIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   exam_applications_pmpa.CircleRefsPMPATable,
			Columns: []string{exam_applications_pmpa.CircleRefsPMPAColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(circlesummaryforno.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eapu.mutation.LogDataCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_applications_pmpa.LogDataTable,
			Columns: []string{exam_applications_pmpa.LogDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(logs.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eapu.mutation.RemovedLogDataIDs(); len(nodes) > 0 && !eapu.mutation.LogDataCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_applications_pmpa.LogDataTable,
			Columns: []string{exam_applications_pmpa.LogDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(logs.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eapu.mutation.LogDataIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_applications_pmpa.LogDataTable,
			Columns: []string{exam_applications_pmpa.LogDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(logs.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, eapu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{exam_applications_pmpa.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	eapu.mutation.done = true
	return n, nil
}

// ExamApplicationsPMPAUpdateOne is the builder for updating a single Exam_Applications_PMPA entity.
type ExamApplicationsPMPAUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ExamApplicationsPMPAMutation
}

// SetApplicationNumber sets the "ApplicationNumber" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetApplicationNumber(s string) *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.SetApplicationNumber(s)
	return eapuo
}

// SetNillableApplicationNumber sets the "ApplicationNumber" field if the given value is not nil.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetNillableApplicationNumber(s *string) *ExamApplicationsPMPAUpdateOne {
	if s != nil {
		eapuo.SetApplicationNumber(*s)
	}
	return eapuo
}

// ClearApplicationNumber clears the value of the "ApplicationNumber" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) ClearApplicationNumber() *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.ClearApplicationNumber()
	return eapuo
}

// SetApplnSubmittedDate sets the "ApplnSubmittedDate" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetApplnSubmittedDate(t time.Time) *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.SetApplnSubmittedDate(t)
	return eapuo
}

// SetNillableApplnSubmittedDate sets the "ApplnSubmittedDate" field if the given value is not nil.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetNillableApplnSubmittedDate(t *time.Time) *ExamApplicationsPMPAUpdateOne {
	if t != nil {
		eapuo.SetApplnSubmittedDate(*t)
	}
	return eapuo
}

// ClearApplnSubmittedDate clears the value of the "ApplnSubmittedDate" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) ClearApplnSubmittedDate() *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.ClearApplnSubmittedDate()
	return eapuo
}

// SetExamCode sets the "ExamCode" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetExamCode(i int32) *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.SetExamCode(i)
	return eapuo
}

// SetNillableExamCode sets the "ExamCode" field if the given value is not nil.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetNillableExamCode(i *int32) *ExamApplicationsPMPAUpdateOne {
	if i != nil {
		eapuo.SetExamCode(*i)
	}
	return eapuo
}

// ClearExamCode clears the value of the "ExamCode" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) ClearExamCode() *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.ClearExamCode()
	return eapuo
}

// SetExamShortName sets the "ExamShortName" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetExamShortName(s string) *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.SetExamShortName(s)
	return eapuo
}

// SetNillableExamShortName sets the "ExamShortName" field if the given value is not nil.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetNillableExamShortName(s *string) *ExamApplicationsPMPAUpdateOne {
	if s != nil {
		eapuo.SetExamShortName(*s)
	}
	return eapuo
}

// ClearExamShortName clears the value of the "ExamShortName" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) ClearExamShortName() *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.ClearExamShortName()
	return eapuo
}

// SetExamName sets the "ExamName" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetExamName(s string) *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.SetExamName(s)
	return eapuo
}

// SetNillableExamName sets the "ExamName" field if the given value is not nil.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetNillableExamName(s *string) *ExamApplicationsPMPAUpdateOne {
	if s != nil {
		eapuo.SetExamName(*s)
	}
	return eapuo
}

// ClearExamName clears the value of the "ExamName" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) ClearExamName() *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.ClearExamName()
	return eapuo
}

// SetSmsExamShortName sets the "SmsExamShortName" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetSmsExamShortName(s string) *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.SetSmsExamShortName(s)
	return eapuo
}

// SetNillableSmsExamShortName sets the "SmsExamShortName" field if the given value is not nil.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetNillableSmsExamShortName(s *string) *ExamApplicationsPMPAUpdateOne {
	if s != nil {
		eapuo.SetSmsExamShortName(*s)
	}
	return eapuo
}

// ClearSmsExamShortName clears the value of the "SmsExamShortName" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) ClearSmsExamShortName() *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.ClearSmsExamShortName()
	return eapuo
}

// SetExamYear sets the "ExamYear" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetExamYear(s string) *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.SetExamYear(s)
	return eapuo
}

// SetNillableExamYear sets the "ExamYear" field if the given value is not nil.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetNillableExamYear(s *string) *ExamApplicationsPMPAUpdateOne {
	if s != nil {
		eapuo.SetExamYear(*s)
	}
	return eapuo
}

// ClearExamYear clears the value of the "ExamYear" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) ClearExamYear() *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.ClearExamYear()
	return eapuo
}

// SetUserID sets the "UserID" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetUserID(i int32) *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.ResetUserID()
	eapuo.mutation.SetUserID(i)
	return eapuo
}

// SetNillableUserID sets the "UserID" field if the given value is not nil.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetNillableUserID(i *int32) *ExamApplicationsPMPAUpdateOne {
	if i != nil {
		eapuo.SetUserID(*i)
	}
	return eapuo
}

// AddUserID adds i to the "UserID" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) AddUserID(i int32) *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.AddUserID(i)
	return eapuo
}

// ClearUserID clears the value of the "UserID" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) ClearUserID() *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.ClearUserID()
	return eapuo
}

// SetEmployeeID sets the "EmployeeID" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetEmployeeID(i int64) *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.ResetEmployeeID()
	eapuo.mutation.SetEmployeeID(i)
	return eapuo
}

// SetNillableEmployeeID sets the "EmployeeID" field if the given value is not nil.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetNillableEmployeeID(i *int64) *ExamApplicationsPMPAUpdateOne {
	if i != nil {
		eapuo.SetEmployeeID(*i)
	}
	return eapuo
}

// AddEmployeeID adds i to the "EmployeeID" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) AddEmployeeID(i int64) *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.AddEmployeeID(i)
	return eapuo
}

// ClearEmployeeID clears the value of the "EmployeeID" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) ClearEmployeeID() *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.ClearEmployeeID()
	return eapuo
}

// SetEmployeeName sets the "EmployeeName" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetEmployeeName(s string) *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.SetEmployeeName(s)
	return eapuo
}

// SetNillableEmployeeName sets the "EmployeeName" field if the given value is not nil.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetNillableEmployeeName(s *string) *ExamApplicationsPMPAUpdateOne {
	if s != nil {
		eapuo.SetEmployeeName(*s)
	}
	return eapuo
}

// ClearEmployeeName clears the value of the "EmployeeName" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) ClearEmployeeName() *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.ClearEmployeeName()
	return eapuo
}

// SetDOB sets the "DOB" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetDOB(s string) *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.SetDOB(s)
	return eapuo
}

// SetNillableDOB sets the "DOB" field if the given value is not nil.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetNillableDOB(s *string) *ExamApplicationsPMPAUpdateOne {
	if s != nil {
		eapuo.SetDOB(*s)
	}
	return eapuo
}

// ClearDOB clears the value of the "DOB" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) ClearDOB() *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.ClearDOB()
	return eapuo
}

// SetGender sets the "Gender" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetGender(s string) *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.SetGender(s)
	return eapuo
}

// SetNillableGender sets the "Gender" field if the given value is not nil.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetNillableGender(s *string) *ExamApplicationsPMPAUpdateOne {
	if s != nil {
		eapuo.SetGender(*s)
	}
	return eapuo
}

// ClearGender clears the value of the "Gender" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) ClearGender() *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.ClearGender()
	return eapuo
}

// SetMobileNumber sets the "MobileNumber" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetMobileNumber(s string) *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.SetMobileNumber(s)
	return eapuo
}

// SetNillableMobileNumber sets the "MobileNumber" field if the given value is not nil.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetNillableMobileNumber(s *string) *ExamApplicationsPMPAUpdateOne {
	if s != nil {
		eapuo.SetMobileNumber(*s)
	}
	return eapuo
}

// ClearMobileNumber clears the value of the "MobileNumber" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) ClearMobileNumber() *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.ClearMobileNumber()
	return eapuo
}

// SetEmailID sets the "EmailID" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetEmailID(s string) *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.SetEmailID(s)
	return eapuo
}

// SetNillableEmailID sets the "EmailID" field if the given value is not nil.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetNillableEmailID(s *string) *ExamApplicationsPMPAUpdateOne {
	if s != nil {
		eapuo.SetEmailID(*s)
	}
	return eapuo
}

// ClearEmailID clears the value of the "EmailID" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) ClearEmailID() *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.ClearEmailID()
	return eapuo
}

// SetCategoryCode sets the "CategoryCode" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetCategoryCode(s string) *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.SetCategoryCode(s)
	return eapuo
}

// SetNillableCategoryCode sets the "CategoryCode" field if the given value is not nil.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetNillableCategoryCode(s *string) *ExamApplicationsPMPAUpdateOne {
	if s != nil {
		eapuo.SetCategoryCode(*s)
	}
	return eapuo
}

// ClearCategoryCode clears the value of the "CategoryCode" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) ClearCategoryCode() *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.ClearCategoryCode()
	return eapuo
}

// SetCategoryDescription sets the "CategoryDescription" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetCategoryDescription(s string) *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.SetCategoryDescription(s)
	return eapuo
}

// SetNillableCategoryDescription sets the "CategoryDescription" field if the given value is not nil.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetNillableCategoryDescription(s *string) *ExamApplicationsPMPAUpdateOne {
	if s != nil {
		eapuo.SetCategoryDescription(*s)
	}
	return eapuo
}

// ClearCategoryDescription clears the value of the "CategoryDescription" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) ClearCategoryDescription() *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.ClearCategoryDescription()
	return eapuo
}

// SetDisabilityTypeID sets the "DisabilityTypeID" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetDisabilityTypeID(s string) *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.SetDisabilityTypeID(s)
	return eapuo
}

// SetNillableDisabilityTypeID sets the "DisabilityTypeID" field if the given value is not nil.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetNillableDisabilityTypeID(s *string) *ExamApplicationsPMPAUpdateOne {
	if s != nil {
		eapuo.SetDisabilityTypeID(*s)
	}
	return eapuo
}

// ClearDisabilityTypeID clears the value of the "DisabilityTypeID" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) ClearDisabilityTypeID() *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.ClearDisabilityTypeID()
	return eapuo
}

// SetDisabilityTypeCode sets the "DisabilityTypeCode" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetDisabilityTypeCode(s string) *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.SetDisabilityTypeCode(s)
	return eapuo
}

// SetNillableDisabilityTypeCode sets the "DisabilityTypeCode" field if the given value is not nil.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetNillableDisabilityTypeCode(s *string) *ExamApplicationsPMPAUpdateOne {
	if s != nil {
		eapuo.SetDisabilityTypeCode(*s)
	}
	return eapuo
}

// ClearDisabilityTypeCode clears the value of the "DisabilityTypeCode" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) ClearDisabilityTypeCode() *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.ClearDisabilityTypeCode()
	return eapuo
}

// SetDisabilityTypeDescription sets the "DisabilityTypeDescription" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetDisabilityTypeDescription(s string) *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.SetDisabilityTypeDescription(s)
	return eapuo
}

// SetNillableDisabilityTypeDescription sets the "DisabilityTypeDescription" field if the given value is not nil.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetNillableDisabilityTypeDescription(s *string) *ExamApplicationsPMPAUpdateOne {
	if s != nil {
		eapuo.SetDisabilityTypeDescription(*s)
	}
	return eapuo
}

// ClearDisabilityTypeDescription clears the value of the "DisabilityTypeDescription" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) ClearDisabilityTypeDescription() *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.ClearDisabilityTypeDescription()
	return eapuo
}

// SetDisabilityPercentage sets the "DisabilityPercentage" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetDisabilityPercentage(i int32) *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.ResetDisabilityPercentage()
	eapuo.mutation.SetDisabilityPercentage(i)
	return eapuo
}

// SetNillableDisabilityPercentage sets the "DisabilityPercentage" field if the given value is not nil.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetNillableDisabilityPercentage(i *int32) *ExamApplicationsPMPAUpdateOne {
	if i != nil {
		eapuo.SetDisabilityPercentage(*i)
	}
	return eapuo
}

// AddDisabilityPercentage adds i to the "DisabilityPercentage" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) AddDisabilityPercentage(i int32) *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.AddDisabilityPercentage(i)
	return eapuo
}

// ClearDisabilityPercentage clears the value of the "DisabilityPercentage" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) ClearDisabilityPercentage() *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.ClearDisabilityPercentage()
	return eapuo
}

// SetDCCS sets the "DCCS" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetDCCS(s string) *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.SetDCCS(s)
	return eapuo
}

// SetNillableDCCS sets the "DCCS" field if the given value is not nil.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetNillableDCCS(s *string) *ExamApplicationsPMPAUpdateOne {
	if s != nil {
		eapuo.SetDCCS(*s)
	}
	return eapuo
}

// ClearDCCS clears the value of the "DCCS" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) ClearDCCS() *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.ClearDCCS()
	return eapuo
}

// SetEntryPostCode sets the "EntryPostCode" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetEntryPostCode(s string) *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.SetEntryPostCode(s)
	return eapuo
}

// SetNillableEntryPostCode sets the "EntryPostCode" field if the given value is not nil.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetNillableEntryPostCode(s *string) *ExamApplicationsPMPAUpdateOne {
	if s != nil {
		eapuo.SetEntryPostCode(*s)
	}
	return eapuo
}

// ClearEntryPostCode clears the value of the "EntryPostCode" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) ClearEntryPostCode() *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.ClearEntryPostCode()
	return eapuo
}

// SetEntryPostDescription sets the "EntryPostDescription" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetEntryPostDescription(s string) *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.SetEntryPostDescription(s)
	return eapuo
}

// SetNillableEntryPostDescription sets the "EntryPostDescription" field if the given value is not nil.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetNillableEntryPostDescription(s *string) *ExamApplicationsPMPAUpdateOne {
	if s != nil {
		eapuo.SetEntryPostDescription(*s)
	}
	return eapuo
}

// ClearEntryPostDescription clears the value of the "EntryPostDescription" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) ClearEntryPostDescription() *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.ClearEntryPostDescription()
	return eapuo
}

// SetPresentPostCode sets the "PresentPostCode" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetPresentPostCode(s string) *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.SetPresentPostCode(s)
	return eapuo
}

// SetNillablePresentPostCode sets the "PresentPostCode" field if the given value is not nil.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetNillablePresentPostCode(s *string) *ExamApplicationsPMPAUpdateOne {
	if s != nil {
		eapuo.SetPresentPostCode(*s)
	}
	return eapuo
}

// ClearPresentPostCode clears the value of the "PresentPostCode" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) ClearPresentPostCode() *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.ClearPresentPostCode()
	return eapuo
}

// SetPresentPostDescription sets the "PresentPostDescription" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetPresentPostDescription(s string) *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.SetPresentPostDescription(s)
	return eapuo
}

// SetNillablePresentPostDescription sets the "PresentPostDescription" field if the given value is not nil.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetNillablePresentPostDescription(s *string) *ExamApplicationsPMPAUpdateOne {
	if s != nil {
		eapuo.SetPresentPostDescription(*s)
	}
	return eapuo
}

// ClearPresentPostDescription clears the value of the "PresentPostDescription" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) ClearPresentPostDescription() *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.ClearPresentPostDescription()
	return eapuo
}

// SetFeederPostCode sets the "FeederPostCode" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetFeederPostCode(s string) *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.SetFeederPostCode(s)
	return eapuo
}

// SetNillableFeederPostCode sets the "FeederPostCode" field if the given value is not nil.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetNillableFeederPostCode(s *string) *ExamApplicationsPMPAUpdateOne {
	if s != nil {
		eapuo.SetFeederPostCode(*s)
	}
	return eapuo
}

// ClearFeederPostCode clears the value of the "FeederPostCode" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) ClearFeederPostCode() *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.ClearFeederPostCode()
	return eapuo
}

// SetFeederPostDescription sets the "FeederPostDescription" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetFeederPostDescription(s string) *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.SetFeederPostDescription(s)
	return eapuo
}

// SetNillableFeederPostDescription sets the "FeederPostDescription" field if the given value is not nil.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetNillableFeederPostDescription(s *string) *ExamApplicationsPMPAUpdateOne {
	if s != nil {
		eapuo.SetFeederPostDescription(*s)
	}
	return eapuo
}

// ClearFeederPostDescription clears the value of the "FeederPostDescription" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) ClearFeederPostDescription() *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.ClearFeederPostDescription()
	return eapuo
}

// SetFeederPostJoiningDate sets the "FeederPostJoiningDate" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetFeederPostJoiningDate(s string) *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.SetFeederPostJoiningDate(s)
	return eapuo
}

// SetNillableFeederPostJoiningDate sets the "FeederPostJoiningDate" field if the given value is not nil.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetNillableFeederPostJoiningDate(s *string) *ExamApplicationsPMPAUpdateOne {
	if s != nil {
		eapuo.SetFeederPostJoiningDate(*s)
	}
	return eapuo
}

// ClearFeederPostJoiningDate clears the value of the "FeederPostJoiningDate" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) ClearFeederPostJoiningDate() *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.ClearFeederPostJoiningDate()
	return eapuo
}

// SetDesignationID sets the "DesignationID" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetDesignationID(s string) *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.SetDesignationID(s)
	return eapuo
}

// SetNillableDesignationID sets the "DesignationID" field if the given value is not nil.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetNillableDesignationID(s *string) *ExamApplicationsPMPAUpdateOne {
	if s != nil {
		eapuo.SetDesignationID(*s)
	}
	return eapuo
}

// ClearDesignationID clears the value of the "DesignationID" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) ClearDesignationID() *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.ClearDesignationID()
	return eapuo
}

// SetPresentDesignation sets the "PresentDesignation" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetPresentDesignation(s string) *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.SetPresentDesignation(s)
	return eapuo
}

// SetNillablePresentDesignation sets the "PresentDesignation" field if the given value is not nil.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetNillablePresentDesignation(s *string) *ExamApplicationsPMPAUpdateOne {
	if s != nil {
		eapuo.SetPresentDesignation(*s)
	}
	return eapuo
}

// ClearPresentDesignation clears the value of the "PresentDesignation" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) ClearPresentDesignation() *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.ClearPresentDesignation()
	return eapuo
}

// SetEducationCode sets the "EducationCode" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetEducationCode(s string) *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.SetEducationCode(s)
	return eapuo
}

// SetNillableEducationCode sets the "EducationCode" field if the given value is not nil.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetNillableEducationCode(s *string) *ExamApplicationsPMPAUpdateOne {
	if s != nil {
		eapuo.SetEducationCode(*s)
	}
	return eapuo
}

// ClearEducationCode clears the value of the "EducationCode" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) ClearEducationCode() *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.ClearEducationCode()
	return eapuo
}

// SetEducationDescription sets the "EducationDescription" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetEducationDescription(s string) *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.SetEducationDescription(s)
	return eapuo
}

// SetNillableEducationDescription sets the "EducationDescription" field if the given value is not nil.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetNillableEducationDescription(s *string) *ExamApplicationsPMPAUpdateOne {
	if s != nil {
		eapuo.SetEducationDescription(*s)
	}
	return eapuo
}

// ClearEducationDescription clears the value of the "EducationDescription" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) ClearEducationDescription() *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.ClearEducationDescription()
	return eapuo
}

// SetFacilityUniqueID sets the "FacilityUniqueID" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetFacilityUniqueID(s string) *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.SetFacilityUniqueID(s)
	return eapuo
}

// SetNillableFacilityUniqueID sets the "FacilityUniqueID" field if the given value is not nil.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetNillableFacilityUniqueID(s *string) *ExamApplicationsPMPAUpdateOne {
	if s != nil {
		eapuo.SetFacilityUniqueID(*s)
	}
	return eapuo
}

// ClearFacilityUniqueID clears the value of the "FacilityUniqueID" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) ClearFacilityUniqueID() *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.ClearFacilityUniqueID()
	return eapuo
}

// SetWorkingOfficePincode sets the "WorkingOfficePincode" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetWorkingOfficePincode(i int32) *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.ResetWorkingOfficePincode()
	eapuo.mutation.SetWorkingOfficePincode(i)
	return eapuo
}

// SetNillableWorkingOfficePincode sets the "WorkingOfficePincode" field if the given value is not nil.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetNillableWorkingOfficePincode(i *int32) *ExamApplicationsPMPAUpdateOne {
	if i != nil {
		eapuo.SetWorkingOfficePincode(*i)
	}
	return eapuo
}

// AddWorkingOfficePincode adds i to the "WorkingOfficePincode" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) AddWorkingOfficePincode(i int32) *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.AddWorkingOfficePincode(i)
	return eapuo
}

// ClearWorkingOfficePincode clears the value of the "WorkingOfficePincode" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) ClearWorkingOfficePincode() *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.ClearWorkingOfficePincode()
	return eapuo
}

// SetWorkingOfficeFacilityID sets the "WorkingOfficeFacilityID" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetWorkingOfficeFacilityID(s string) *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.SetWorkingOfficeFacilityID(s)
	return eapuo
}

// SetNillableWorkingOfficeFacilityID sets the "WorkingOfficeFacilityID" field if the given value is not nil.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetNillableWorkingOfficeFacilityID(s *string) *ExamApplicationsPMPAUpdateOne {
	if s != nil {
		eapuo.SetWorkingOfficeFacilityID(*s)
	}
	return eapuo
}

// ClearWorkingOfficeFacilityID clears the value of the "WorkingOfficeFacilityID" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) ClearWorkingOfficeFacilityID() *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.ClearWorkingOfficeFacilityID()
	return eapuo
}

// SetWorkingOfficeName sets the "WorkingOfficeName" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetWorkingOfficeName(s string) *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.SetWorkingOfficeName(s)
	return eapuo
}

// SetNillableWorkingOfficeName sets the "WorkingOfficeName" field if the given value is not nil.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetNillableWorkingOfficeName(s *string) *ExamApplicationsPMPAUpdateOne {
	if s != nil {
		eapuo.SetWorkingOfficeName(*s)
	}
	return eapuo
}

// ClearWorkingOfficeName clears the value of the "WorkingOfficeName" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) ClearWorkingOfficeName() *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.ClearWorkingOfficeName()
	return eapuo
}

// SetWorkingOfficeCircleFacilityID sets the "WorkingOfficeCircleFacilityID" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetWorkingOfficeCircleFacilityID(s string) *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.SetWorkingOfficeCircleFacilityID(s)
	return eapuo
}

// SetNillableWorkingOfficeCircleFacilityID sets the "WorkingOfficeCircleFacilityID" field if the given value is not nil.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetNillableWorkingOfficeCircleFacilityID(s *string) *ExamApplicationsPMPAUpdateOne {
	if s != nil {
		eapuo.SetWorkingOfficeCircleFacilityID(*s)
	}
	return eapuo
}

// ClearWorkingOfficeCircleFacilityID clears the value of the "WorkingOfficeCircleFacilityID" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) ClearWorkingOfficeCircleFacilityID() *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.ClearWorkingOfficeCircleFacilityID()
	return eapuo
}

// SetWorkingOfficeCircleName sets the "WorkingOfficeCircleName" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetWorkingOfficeCircleName(s string) *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.SetWorkingOfficeCircleName(s)
	return eapuo
}

// SetNillableWorkingOfficeCircleName sets the "WorkingOfficeCircleName" field if the given value is not nil.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetNillableWorkingOfficeCircleName(s *string) *ExamApplicationsPMPAUpdateOne {
	if s != nil {
		eapuo.SetWorkingOfficeCircleName(*s)
	}
	return eapuo
}

// ClearWorkingOfficeCircleName clears the value of the "WorkingOfficeCircleName" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) ClearWorkingOfficeCircleName() *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.ClearWorkingOfficeCircleName()
	return eapuo
}

// SetWorkingOfficeRegionFacilityID sets the "WorkingOfficeRegionFacilityID" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetWorkingOfficeRegionFacilityID(s string) *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.SetWorkingOfficeRegionFacilityID(s)
	return eapuo
}

// SetNillableWorkingOfficeRegionFacilityID sets the "WorkingOfficeRegionFacilityID" field if the given value is not nil.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetNillableWorkingOfficeRegionFacilityID(s *string) *ExamApplicationsPMPAUpdateOne {
	if s != nil {
		eapuo.SetWorkingOfficeRegionFacilityID(*s)
	}
	return eapuo
}

// ClearWorkingOfficeRegionFacilityID clears the value of the "WorkingOfficeRegionFacilityID" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) ClearWorkingOfficeRegionFacilityID() *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.ClearWorkingOfficeRegionFacilityID()
	return eapuo
}

// SetWorkingOfficeRegionName sets the "WorkingOfficeRegionName" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetWorkingOfficeRegionName(s string) *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.SetWorkingOfficeRegionName(s)
	return eapuo
}

// SetNillableWorkingOfficeRegionName sets the "WorkingOfficeRegionName" field if the given value is not nil.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetNillableWorkingOfficeRegionName(s *string) *ExamApplicationsPMPAUpdateOne {
	if s != nil {
		eapuo.SetWorkingOfficeRegionName(*s)
	}
	return eapuo
}

// ClearWorkingOfficeRegionName clears the value of the "WorkingOfficeRegionName" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) ClearWorkingOfficeRegionName() *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.ClearWorkingOfficeRegionName()
	return eapuo
}

// SetWorkingOfficeDivisionFacilityID sets the "WorkingOfficeDivisionFacilityID" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetWorkingOfficeDivisionFacilityID(s string) *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.SetWorkingOfficeDivisionFacilityID(s)
	return eapuo
}

// SetNillableWorkingOfficeDivisionFacilityID sets the "WorkingOfficeDivisionFacilityID" field if the given value is not nil.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetNillableWorkingOfficeDivisionFacilityID(s *string) *ExamApplicationsPMPAUpdateOne {
	if s != nil {
		eapuo.SetWorkingOfficeDivisionFacilityID(*s)
	}
	return eapuo
}

// ClearWorkingOfficeDivisionFacilityID clears the value of the "WorkingOfficeDivisionFacilityID" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) ClearWorkingOfficeDivisionFacilityID() *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.ClearWorkingOfficeDivisionFacilityID()
	return eapuo
}

// SetWorkingOfficeDivisionName sets the "WorkingOfficeDivisionName" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetWorkingOfficeDivisionName(s string) *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.SetWorkingOfficeDivisionName(s)
	return eapuo
}

// SetNillableWorkingOfficeDivisionName sets the "WorkingOfficeDivisionName" field if the given value is not nil.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetNillableWorkingOfficeDivisionName(s *string) *ExamApplicationsPMPAUpdateOne {
	if s != nil {
		eapuo.SetWorkingOfficeDivisionName(*s)
	}
	return eapuo
}

// ClearWorkingOfficeDivisionName clears the value of the "WorkingOfficeDivisionName" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) ClearWorkingOfficeDivisionName() *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.ClearWorkingOfficeDivisionName()
	return eapuo
}

// SetReportingOfficeFacilityID sets the "ReportingOfficeFacilityID" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetReportingOfficeFacilityID(s string) *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.SetReportingOfficeFacilityID(s)
	return eapuo
}

// SetNillableReportingOfficeFacilityID sets the "ReportingOfficeFacilityID" field if the given value is not nil.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetNillableReportingOfficeFacilityID(s *string) *ExamApplicationsPMPAUpdateOne {
	if s != nil {
		eapuo.SetReportingOfficeFacilityID(*s)
	}
	return eapuo
}

// ClearReportingOfficeFacilityID clears the value of the "ReportingOfficeFacilityID" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) ClearReportingOfficeFacilityID() *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.ClearReportingOfficeFacilityID()
	return eapuo
}

// SetReportingOfficeName sets the "ReportingOfficeName" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetReportingOfficeName(s string) *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.SetReportingOfficeName(s)
	return eapuo
}

// SetNillableReportingOfficeName sets the "ReportingOfficeName" field if the given value is not nil.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetNillableReportingOfficeName(s *string) *ExamApplicationsPMPAUpdateOne {
	if s != nil {
		eapuo.SetReportingOfficeName(*s)
	}
	return eapuo
}

// ClearReportingOfficeName clears the value of the "ReportingOfficeName" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) ClearReportingOfficeName() *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.ClearReportingOfficeName()
	return eapuo
}

// SetLienControllingOfficeID sets the "LienControllingOfficeID" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetLienControllingOfficeID(s string) *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.SetLienControllingOfficeID(s)
	return eapuo
}

// SetNillableLienControllingOfficeID sets the "LienControllingOfficeID" field if the given value is not nil.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetNillableLienControllingOfficeID(s *string) *ExamApplicationsPMPAUpdateOne {
	if s != nil {
		eapuo.SetLienControllingOfficeID(*s)
	}
	return eapuo
}

// ClearLienControllingOfficeID clears the value of the "LienControllingOfficeID" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) ClearLienControllingOfficeID() *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.ClearLienControllingOfficeID()
	return eapuo
}

// SetLienControllingOfficeName sets the "LienControllingOfficeName" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetLienControllingOfficeName(s string) *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.SetLienControllingOfficeName(s)
	return eapuo
}

// SetNillableLienControllingOfficeName sets the "LienControllingOfficeName" field if the given value is not nil.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetNillableLienControllingOfficeName(s *string) *ExamApplicationsPMPAUpdateOne {
	if s != nil {
		eapuo.SetLienControllingOfficeName(*s)
	}
	return eapuo
}

// ClearLienControllingOfficeName clears the value of the "LienControllingOfficeName" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) ClearLienControllingOfficeName() *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.ClearLienControllingOfficeName()
	return eapuo
}

// SetInDeputation sets the "InDeputation" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetInDeputation(s string) *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.SetInDeputation(s)
	return eapuo
}

// SetNillableInDeputation sets the "InDeputation" field if the given value is not nil.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetNillableInDeputation(s *string) *ExamApplicationsPMPAUpdateOne {
	if s != nil {
		eapuo.SetInDeputation(*s)
	}
	return eapuo
}

// ClearInDeputation clears the value of the "InDeputation" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) ClearInDeputation() *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.ClearInDeputation()
	return eapuo
}

// SetDeputationType sets the "DeputationType" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetDeputationType(s string) *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.SetDeputationType(s)
	return eapuo
}

// SetNillableDeputationType sets the "DeputationType" field if the given value is not nil.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetNillableDeputationType(s *string) *ExamApplicationsPMPAUpdateOne {
	if s != nil {
		eapuo.SetDeputationType(*s)
	}
	return eapuo
}

// ClearDeputationType clears the value of the "DeputationType" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) ClearDeputationType() *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.ClearDeputationType()
	return eapuo
}

// SetDeputationOfficeUniqueId sets the "DeputationOfficeUniqueId" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetDeputationOfficeUniqueId(s string) *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.SetDeputationOfficeUniqueId(s)
	return eapuo
}

// SetNillableDeputationOfficeUniqueId sets the "DeputationOfficeUniqueId" field if the given value is not nil.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetNillableDeputationOfficeUniqueId(s *string) *ExamApplicationsPMPAUpdateOne {
	if s != nil {
		eapuo.SetDeputationOfficeUniqueId(*s)
	}
	return eapuo
}

// ClearDeputationOfficeUniqueId clears the value of the "DeputationOfficeUniqueId" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) ClearDeputationOfficeUniqueId() *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.ClearDeputationOfficeUniqueId()
	return eapuo
}

// SetDeputationOfficeFacilityID sets the "DeputationOfficeFacilityID" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetDeputationOfficeFacilityID(s string) *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.SetDeputationOfficeFacilityID(s)
	return eapuo
}

// SetNillableDeputationOfficeFacilityID sets the "DeputationOfficeFacilityID" field if the given value is not nil.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetNillableDeputationOfficeFacilityID(s *string) *ExamApplicationsPMPAUpdateOne {
	if s != nil {
		eapuo.SetDeputationOfficeFacilityID(*s)
	}
	return eapuo
}

// ClearDeputationOfficeFacilityID clears the value of the "DeputationOfficeFacilityID" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) ClearDeputationOfficeFacilityID() *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.ClearDeputationOfficeFacilityID()
	return eapuo
}

// SetDeputationOfficeName sets the "DeputationOfficeName" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetDeputationOfficeName(s string) *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.SetDeputationOfficeName(s)
	return eapuo
}

// SetNillableDeputationOfficeName sets the "DeputationOfficeName" field if the given value is not nil.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetNillableDeputationOfficeName(s *string) *ExamApplicationsPMPAUpdateOne {
	if s != nil {
		eapuo.SetDeputationOfficeName(*s)
	}
	return eapuo
}

// ClearDeputationOfficeName clears the value of the "DeputationOfficeName" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) ClearDeputationOfficeName() *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.ClearDeputationOfficeName()
	return eapuo
}

// SetDeputationControllingOfficeID sets the "DeputationControllingOfficeID" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetDeputationControllingOfficeID(s string) *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.SetDeputationControllingOfficeID(s)
	return eapuo
}

// SetNillableDeputationControllingOfficeID sets the "DeputationControllingOfficeID" field if the given value is not nil.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetNillableDeputationControllingOfficeID(s *string) *ExamApplicationsPMPAUpdateOne {
	if s != nil {
		eapuo.SetDeputationControllingOfficeID(*s)
	}
	return eapuo
}

// ClearDeputationControllingOfficeID clears the value of the "DeputationControllingOfficeID" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) ClearDeputationControllingOfficeID() *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.ClearDeputationControllingOfficeID()
	return eapuo
}

// SetDeputationControllingOfficeName sets the "DeputationControllingOfficeName" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetDeputationControllingOfficeName(s string) *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.SetDeputationControllingOfficeName(s)
	return eapuo
}

// SetNillableDeputationControllingOfficeName sets the "DeputationControllingOfficeName" field if the given value is not nil.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetNillableDeputationControllingOfficeName(s *string) *ExamApplicationsPMPAUpdateOne {
	if s != nil {
		eapuo.SetDeputationControllingOfficeName(*s)
	}
	return eapuo
}

// ClearDeputationControllingOfficeName clears the value of the "DeputationControllingOfficeName" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) ClearDeputationControllingOfficeName() *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.ClearDeputationControllingOfficeName()
	return eapuo
}

// SetControllingOfficeFacilityID sets the "ControllingOfficeFacilityID" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetControllingOfficeFacilityID(s string) *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.SetControllingOfficeFacilityID(s)
	return eapuo
}

// SetNillableControllingOfficeFacilityID sets the "ControllingOfficeFacilityID" field if the given value is not nil.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetNillableControllingOfficeFacilityID(s *string) *ExamApplicationsPMPAUpdateOne {
	if s != nil {
		eapuo.SetControllingOfficeFacilityID(*s)
	}
	return eapuo
}

// ClearControllingOfficeFacilityID clears the value of the "ControllingOfficeFacilityID" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) ClearControllingOfficeFacilityID() *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.ClearControllingOfficeFacilityID()
	return eapuo
}

// SetControllingOfficeName sets the "ControllingOfficeName" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetControllingOfficeName(s string) *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.SetControllingOfficeName(s)
	return eapuo
}

// SetNillableControllingOfficeName sets the "ControllingOfficeName" field if the given value is not nil.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetNillableControllingOfficeName(s *string) *ExamApplicationsPMPAUpdateOne {
	if s != nil {
		eapuo.SetControllingOfficeName(*s)
	}
	return eapuo
}

// ClearControllingOfficeName clears the value of the "ControllingOfficeName" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) ClearControllingOfficeName() *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.ClearControllingOfficeName()
	return eapuo
}

// SetNodalOfficeFacilityID sets the "NodalOfficeFacilityID" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetNodalOfficeFacilityID(s string) *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.SetNodalOfficeFacilityID(s)
	return eapuo
}

// SetNillableNodalOfficeFacilityID sets the "NodalOfficeFacilityID" field if the given value is not nil.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetNillableNodalOfficeFacilityID(s *string) *ExamApplicationsPMPAUpdateOne {
	if s != nil {
		eapuo.SetNodalOfficeFacilityID(*s)
	}
	return eapuo
}

// ClearNodalOfficeFacilityID clears the value of the "NodalOfficeFacilityID" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) ClearNodalOfficeFacilityID() *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.ClearNodalOfficeFacilityID()
	return eapuo
}

// SetNodalOfficeName sets the "NodalOfficeName" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetNodalOfficeName(s string) *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.SetNodalOfficeName(s)
	return eapuo
}

// SetNillableNodalOfficeName sets the "NodalOfficeName" field if the given value is not nil.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetNillableNodalOfficeName(s *string) *ExamApplicationsPMPAUpdateOne {
	if s != nil {
		eapuo.SetNodalOfficeName(*s)
	}
	return eapuo
}

// ClearNodalOfficeName clears the value of the "NodalOfficeName" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) ClearNodalOfficeName() *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.ClearNodalOfficeName()
	return eapuo
}

// SetExamCityCenterCode sets the "ExamCityCenterCode" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetExamCityCenterCode(i int32) *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.SetExamCityCenterCode(i)
	return eapuo
}

// SetNillableExamCityCenterCode sets the "ExamCityCenterCode" field if the given value is not nil.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetNillableExamCityCenterCode(i *int32) *ExamApplicationsPMPAUpdateOne {
	if i != nil {
		eapuo.SetExamCityCenterCode(*i)
	}
	return eapuo
}

// ClearExamCityCenterCode clears the value of the "ExamCityCenterCode" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) ClearExamCityCenterCode() *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.ClearExamCityCenterCode()
	return eapuo
}

// SetCenterFacilityId sets the "CenterFacilityId" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetCenterFacilityId(s string) *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.SetCenterFacilityId(s)
	return eapuo
}

// SetNillableCenterFacilityId sets the "CenterFacilityId" field if the given value is not nil.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetNillableCenterFacilityId(s *string) *ExamApplicationsPMPAUpdateOne {
	if s != nil {
		eapuo.SetCenterFacilityId(*s)
	}
	return eapuo
}

// ClearCenterFacilityId clears the value of the "CenterFacilityId" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) ClearCenterFacilityId() *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.ClearCenterFacilityId()
	return eapuo
}

// SetCentrePreference sets the "CentrePreference" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetCentrePreference(s string) *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.SetCentrePreference(s)
	return eapuo
}

// SetNillableCentrePreference sets the "CentrePreference" field if the given value is not nil.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetNillableCentrePreference(s *string) *ExamApplicationsPMPAUpdateOne {
	if s != nil {
		eapuo.SetCentrePreference(*s)
	}
	return eapuo
}

// ClearCentrePreference clears the value of the "CentrePreference" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) ClearCentrePreference() *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.ClearCentrePreference()
	return eapuo
}

// SetSignature sets the "Signature" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetSignature(s string) *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.SetSignature(s)
	return eapuo
}

// SetNillableSignature sets the "Signature" field if the given value is not nil.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetNillableSignature(s *string) *ExamApplicationsPMPAUpdateOne {
	if s != nil {
		eapuo.SetSignature(*s)
	}
	return eapuo
}

// ClearSignature clears the value of the "Signature" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) ClearSignature() *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.ClearSignature()
	return eapuo
}

// SetPhoto sets the "Photo" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetPhoto(s string) *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.SetPhoto(s)
	return eapuo
}

// SetNillablePhoto sets the "Photo" field if the given value is not nil.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetNillablePhoto(s *string) *ExamApplicationsPMPAUpdateOne {
	if s != nil {
		eapuo.SetPhoto(*s)
	}
	return eapuo
}

// ClearPhoto clears the value of the "Photo" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) ClearPhoto() *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.ClearPhoto()
	return eapuo
}

// SetCandidatePhoto sets the "CandidatePhoto" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetCandidatePhoto(b []byte) *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.SetCandidatePhoto(b)
	return eapuo
}

// ClearCandidatePhoto clears the value of the "CandidatePhoto" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) ClearCandidatePhoto() *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.ClearCandidatePhoto()
	return eapuo
}

// SetCandidateSignature sets the "CandidateSignature" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetCandidateSignature(b []byte) *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.SetCandidateSignature(b)
	return eapuo
}

// ClearCandidateSignature clears the value of the "CandidateSignature" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) ClearCandidateSignature() *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.ClearCandidateSignature()
	return eapuo
}

// SetSignaturePath sets the "SignaturePath" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetSignaturePath(s string) *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.SetSignaturePath(s)
	return eapuo
}

// SetNillableSignaturePath sets the "SignaturePath" field if the given value is not nil.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetNillableSignaturePath(s *string) *ExamApplicationsPMPAUpdateOne {
	if s != nil {
		eapuo.SetSignaturePath(*s)
	}
	return eapuo
}

// ClearSignaturePath clears the value of the "SignaturePath" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) ClearSignaturePath() *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.ClearSignaturePath()
	return eapuo
}

// SetPhotoPath sets the "PhotoPath" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetPhotoPath(s string) *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.SetPhotoPath(s)
	return eapuo
}

// SetNillablePhotoPath sets the "PhotoPath" field if the given value is not nil.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetNillablePhotoPath(s *string) *ExamApplicationsPMPAUpdateOne {
	if s != nil {
		eapuo.SetPhotoPath(*s)
	}
	return eapuo
}

// ClearPhotoPath clears the value of the "PhotoPath" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) ClearPhotoPath() *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.ClearPhotoPath()
	return eapuo
}

// SetTempHallTicket sets the "TempHallTicket" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetTempHallTicket(s string) *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.SetTempHallTicket(s)
	return eapuo
}

// SetNillableTempHallTicket sets the "TempHallTicket" field if the given value is not nil.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetNillableTempHallTicket(s *string) *ExamApplicationsPMPAUpdateOne {
	if s != nil {
		eapuo.SetTempHallTicket(*s)
	}
	return eapuo
}

// ClearTempHallTicket clears the value of the "TempHallTicket" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) ClearTempHallTicket() *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.ClearTempHallTicket()
	return eapuo
}

// SetCandidateRemarks sets the "CandidateRemarks" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetCandidateRemarks(s string) *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.SetCandidateRemarks(s)
	return eapuo
}

// SetNillableCandidateRemarks sets the "CandidateRemarks" field if the given value is not nil.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetNillableCandidateRemarks(s *string) *ExamApplicationsPMPAUpdateOne {
	if s != nil {
		eapuo.SetCandidateRemarks(*s)
	}
	return eapuo
}

// ClearCandidateRemarks clears the value of the "CandidateRemarks" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) ClearCandidateRemarks() *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.ClearCandidateRemarks()
	return eapuo
}

// SetVAGeneralRemarks sets the "VAGeneralRemarks" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetVAGeneralRemarks(s string) *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.SetVAGeneralRemarks(s)
	return eapuo
}

// SetNillableVAGeneralRemarks sets the "VAGeneralRemarks" field if the given value is not nil.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetNillableVAGeneralRemarks(s *string) *ExamApplicationsPMPAUpdateOne {
	if s != nil {
		eapuo.SetVAGeneralRemarks(*s)
	}
	return eapuo
}

// ClearVAGeneralRemarks clears the value of the "VAGeneralRemarks" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) ClearVAGeneralRemarks() *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.ClearVAGeneralRemarks()
	return eapuo
}

// SetCAGeneralRemarks sets the "CAGeneralRemarks" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetCAGeneralRemarks(s string) *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.SetCAGeneralRemarks(s)
	return eapuo
}

// SetNillableCAGeneralRemarks sets the "CAGeneralRemarks" field if the given value is not nil.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetNillableCAGeneralRemarks(s *string) *ExamApplicationsPMPAUpdateOne {
	if s != nil {
		eapuo.SetCAGeneralRemarks(*s)
	}
	return eapuo
}

// ClearCAGeneralRemarks clears the value of the "CAGeneralRemarks" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) ClearCAGeneralRemarks() *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.ClearCAGeneralRemarks()
	return eapuo
}

// SetNAGeneralRemarks sets the "NAGeneralRemarks" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetNAGeneralRemarks(s string) *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.SetNAGeneralRemarks(s)
	return eapuo
}

// SetNillableNAGeneralRemarks sets the "NAGeneralRemarks" field if the given value is not nil.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetNillableNAGeneralRemarks(s *string) *ExamApplicationsPMPAUpdateOne {
	if s != nil {
		eapuo.SetNAGeneralRemarks(*s)
	}
	return eapuo
}

// ClearNAGeneralRemarks clears the value of the "NAGeneralRemarks" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) ClearNAGeneralRemarks() *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.ClearNAGeneralRemarks()
	return eapuo
}

// SetApplicationStatus sets the "ApplicationStatus" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetApplicationStatus(s string) *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.SetApplicationStatus(s)
	return eapuo
}

// SetNillableApplicationStatus sets the "ApplicationStatus" field if the given value is not nil.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetNillableApplicationStatus(s *string) *ExamApplicationsPMPAUpdateOne {
	if s != nil {
		eapuo.SetApplicationStatus(*s)
	}
	return eapuo
}

// ClearApplicationStatus clears the value of the "ApplicationStatus" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) ClearApplicationStatus() *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.ClearApplicationStatus()
	return eapuo
}

// SetStatus sets the "Status" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetStatus(s string) *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.SetStatus(s)
	return eapuo
}

// SetNillableStatus sets the "Status" field if the given value is not nil.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetNillableStatus(s *string) *ExamApplicationsPMPAUpdateOne {
	if s != nil {
		eapuo.SetStatus(*s)
	}
	return eapuo
}

// ClearStatus clears the value of the "Status" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) ClearStatus() *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.ClearStatus()
	return eapuo
}

// SetVAUserId sets the "VA_UserId" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetVAUserId(i int32) *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.ResetVAUserId()
	eapuo.mutation.SetVAUserId(i)
	return eapuo
}

// SetNillableVAUserId sets the "VA_UserId" field if the given value is not nil.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetNillableVAUserId(i *int32) *ExamApplicationsPMPAUpdateOne {
	if i != nil {
		eapuo.SetVAUserId(*i)
	}
	return eapuo
}

// AddVAUserId adds i to the "VA_UserId" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) AddVAUserId(i int32) *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.AddVAUserId(i)
	return eapuo
}

// ClearVAUserId clears the value of the "VA_UserId" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) ClearVAUserId() *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.ClearVAUserId()
	return eapuo
}

// SetVAUserName sets the "VA_UserName" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetVAUserName(s string) *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.SetVAUserName(s)
	return eapuo
}

// SetNillableVAUserName sets the "VA_UserName" field if the given value is not nil.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetNillableVAUserName(s *string) *ExamApplicationsPMPAUpdateOne {
	if s != nil {
		eapuo.SetVAUserName(*s)
	}
	return eapuo
}

// ClearVAUserName clears the value of the "VA_UserName" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) ClearVAUserName() *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.ClearVAUserName()
	return eapuo
}

// SetVAEmployeeID sets the "VA_EmployeeID" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetVAEmployeeID(s string) *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.SetVAEmployeeID(s)
	return eapuo
}

// SetNillableVAEmployeeID sets the "VA_EmployeeID" field if the given value is not nil.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetNillableVAEmployeeID(s *string) *ExamApplicationsPMPAUpdateOne {
	if s != nil {
		eapuo.SetVAEmployeeID(*s)
	}
	return eapuo
}

// ClearVAEmployeeID clears the value of the "VA_EmployeeID" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) ClearVAEmployeeID() *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.ClearVAEmployeeID()
	return eapuo
}

// SetVAEmployeeDesignation sets the "VA_EmployeeDesignation" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetVAEmployeeDesignation(s string) *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.SetVAEmployeeDesignation(s)
	return eapuo
}

// SetNillableVAEmployeeDesignation sets the "VA_EmployeeDesignation" field if the given value is not nil.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetNillableVAEmployeeDesignation(s *string) *ExamApplicationsPMPAUpdateOne {
	if s != nil {
		eapuo.SetVAEmployeeDesignation(*s)
	}
	return eapuo
}

// ClearVAEmployeeDesignation clears the value of the "VA_EmployeeDesignation" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) ClearVAEmployeeDesignation() *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.ClearVAEmployeeDesignation()
	return eapuo
}

// SetVARemarks sets the "VA_Remarks" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetVARemarks(s string) *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.SetVARemarks(s)
	return eapuo
}

// SetNillableVARemarks sets the "VA_Remarks" field if the given value is not nil.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetNillableVARemarks(s *string) *ExamApplicationsPMPAUpdateOne {
	if s != nil {
		eapuo.SetVARemarks(*s)
	}
	return eapuo
}

// ClearVARemarks clears the value of the "VA_Remarks" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) ClearVARemarks() *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.ClearVARemarks()
	return eapuo
}

// SetVADate sets the "VA_Date" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetVADate(t time.Time) *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.SetVADate(t)
	return eapuo
}

// SetNillableVADate sets the "VA_Date" field if the given value is not nil.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetNillableVADate(t *time.Time) *ExamApplicationsPMPAUpdateOne {
	if t != nil {
		eapuo.SetVADate(*t)
	}
	return eapuo
}

// ClearVADate clears the value of the "VA_Date" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) ClearVADate() *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.ClearVADate()
	return eapuo
}

// SetCAUserId sets the "CA_UserId" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetCAUserId(i int32) *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.ResetCAUserId()
	eapuo.mutation.SetCAUserId(i)
	return eapuo
}

// SetNillableCAUserId sets the "CA_UserId" field if the given value is not nil.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetNillableCAUserId(i *int32) *ExamApplicationsPMPAUpdateOne {
	if i != nil {
		eapuo.SetCAUserId(*i)
	}
	return eapuo
}

// AddCAUserId adds i to the "CA_UserId" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) AddCAUserId(i int32) *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.AddCAUserId(i)
	return eapuo
}

// ClearCAUserId clears the value of the "CA_UserId" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) ClearCAUserId() *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.ClearCAUserId()
	return eapuo
}

// SetCAUserName sets the "CA_UserName" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetCAUserName(s string) *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.SetCAUserName(s)
	return eapuo
}

// SetNillableCAUserName sets the "CA_UserName" field if the given value is not nil.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetNillableCAUserName(s *string) *ExamApplicationsPMPAUpdateOne {
	if s != nil {
		eapuo.SetCAUserName(*s)
	}
	return eapuo
}

// ClearCAUserName clears the value of the "CA_UserName" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) ClearCAUserName() *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.ClearCAUserName()
	return eapuo
}

// SetCAEmployeeID sets the "CA_EmployeeID" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetCAEmployeeID(s string) *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.SetCAEmployeeID(s)
	return eapuo
}

// SetNillableCAEmployeeID sets the "CA_EmployeeID" field if the given value is not nil.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetNillableCAEmployeeID(s *string) *ExamApplicationsPMPAUpdateOne {
	if s != nil {
		eapuo.SetCAEmployeeID(*s)
	}
	return eapuo
}

// ClearCAEmployeeID clears the value of the "CA_EmployeeID" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) ClearCAEmployeeID() *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.ClearCAEmployeeID()
	return eapuo
}

// SetCAEmployeeDesignation sets the "CA_EmployeeDesignation" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetCAEmployeeDesignation(s string) *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.SetCAEmployeeDesignation(s)
	return eapuo
}

// SetNillableCAEmployeeDesignation sets the "CA_EmployeeDesignation" field if the given value is not nil.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetNillableCAEmployeeDesignation(s *string) *ExamApplicationsPMPAUpdateOne {
	if s != nil {
		eapuo.SetCAEmployeeDesignation(*s)
	}
	return eapuo
}

// ClearCAEmployeeDesignation clears the value of the "CA_EmployeeDesignation" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) ClearCAEmployeeDesignation() *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.ClearCAEmployeeDesignation()
	return eapuo
}

// SetCARemarks sets the "CA_Remarks" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetCARemarks(s string) *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.SetCARemarks(s)
	return eapuo
}

// SetNillableCARemarks sets the "CA_Remarks" field if the given value is not nil.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetNillableCARemarks(s *string) *ExamApplicationsPMPAUpdateOne {
	if s != nil {
		eapuo.SetCARemarks(*s)
	}
	return eapuo
}

// ClearCARemarks clears the value of the "CA_Remarks" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) ClearCARemarks() *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.ClearCARemarks()
	return eapuo
}

// SetCADate sets the "CA_Date" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetCADate(t time.Time) *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.SetCADate(t)
	return eapuo
}

// SetNillableCADate sets the "CA_Date" field if the given value is not nil.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetNillableCADate(t *time.Time) *ExamApplicationsPMPAUpdateOne {
	if t != nil {
		eapuo.SetCADate(*t)
	}
	return eapuo
}

// ClearCADate clears the value of the "CA_Date" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) ClearCADate() *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.ClearCADate()
	return eapuo
}

// SetNAUserId sets the "NA_UserId" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetNAUserId(i int32) *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.ResetNAUserId()
	eapuo.mutation.SetNAUserId(i)
	return eapuo
}

// SetNillableNAUserId sets the "NA_UserId" field if the given value is not nil.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetNillableNAUserId(i *int32) *ExamApplicationsPMPAUpdateOne {
	if i != nil {
		eapuo.SetNAUserId(*i)
	}
	return eapuo
}

// AddNAUserId adds i to the "NA_UserId" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) AddNAUserId(i int32) *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.AddNAUserId(i)
	return eapuo
}

// ClearNAUserId clears the value of the "NA_UserId" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) ClearNAUserId() *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.ClearNAUserId()
	return eapuo
}

// SetNAUserName sets the "NA_UserName" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetNAUserName(s string) *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.SetNAUserName(s)
	return eapuo
}

// SetNillableNAUserName sets the "NA_UserName" field if the given value is not nil.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetNillableNAUserName(s *string) *ExamApplicationsPMPAUpdateOne {
	if s != nil {
		eapuo.SetNAUserName(*s)
	}
	return eapuo
}

// ClearNAUserName clears the value of the "NA_UserName" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) ClearNAUserName() *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.ClearNAUserName()
	return eapuo
}

// SetNAEmployeeID sets the "NA_EmployeeID" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetNAEmployeeID(s string) *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.SetNAEmployeeID(s)
	return eapuo
}

// SetNillableNAEmployeeID sets the "NA_EmployeeID" field if the given value is not nil.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetNillableNAEmployeeID(s *string) *ExamApplicationsPMPAUpdateOne {
	if s != nil {
		eapuo.SetNAEmployeeID(*s)
	}
	return eapuo
}

// ClearNAEmployeeID clears the value of the "NA_EmployeeID" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) ClearNAEmployeeID() *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.ClearNAEmployeeID()
	return eapuo
}

// SetNAEmployeeDesignation sets the "NA_EmployeeDesignation" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetNAEmployeeDesignation(s string) *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.SetNAEmployeeDesignation(s)
	return eapuo
}

// SetNillableNAEmployeeDesignation sets the "NA_EmployeeDesignation" field if the given value is not nil.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetNillableNAEmployeeDesignation(s *string) *ExamApplicationsPMPAUpdateOne {
	if s != nil {
		eapuo.SetNAEmployeeDesignation(*s)
	}
	return eapuo
}

// ClearNAEmployeeDesignation clears the value of the "NA_EmployeeDesignation" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) ClearNAEmployeeDesignation() *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.ClearNAEmployeeDesignation()
	return eapuo
}

// SetNARemarks sets the "NA_Remarks" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetNARemarks(s string) *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.SetNARemarks(s)
	return eapuo
}

// SetNillableNARemarks sets the "NA_Remarks" field if the given value is not nil.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetNillableNARemarks(s *string) *ExamApplicationsPMPAUpdateOne {
	if s != nil {
		eapuo.SetNARemarks(*s)
	}
	return eapuo
}

// ClearNARemarks clears the value of the "NA_Remarks" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) ClearNARemarks() *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.ClearNARemarks()
	return eapuo
}

// SetNADate sets the "NA_Date" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetNADate(t time.Time) *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.SetNADate(t)
	return eapuo
}

// SetNillableNADate sets the "NA_Date" field if the given value is not nil.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetNillableNADate(t *time.Time) *ExamApplicationsPMPAUpdateOne {
	if t != nil {
		eapuo.SetNADate(*t)
	}
	return eapuo
}

// ClearNADate clears the value of the "NA_Date" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) ClearNADate() *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.ClearNADate()
	return eapuo
}

// SetAppliactionRemarks sets the "AppliactionRemarks" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetAppliactionRemarks(s string) *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.SetAppliactionRemarks(s)
	return eapuo
}

// SetNillableAppliactionRemarks sets the "AppliactionRemarks" field if the given value is not nil.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetNillableAppliactionRemarks(s *string) *ExamApplicationsPMPAUpdateOne {
	if s != nil {
		eapuo.SetAppliactionRemarks(*s)
	}
	return eapuo
}

// ClearAppliactionRemarks clears the value of the "AppliactionRemarks" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) ClearAppliactionRemarks() *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.ClearAppliactionRemarks()
	return eapuo
}

// SetCadrePreferences sets the "CadrePreferences" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetCadrePreferences(i []interface{}) *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.SetCadrePreferences(i)
	return eapuo
}

// AppendCadrePreferences appends i to the "CadrePreferences" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) AppendCadrePreferences(i []interface{}) *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.AppendCadrePreferences(i)
	return eapuo
}

// ClearCadrePreferences clears the value of the "CadrePreferences" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) ClearCadrePreferences() *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.ClearCadrePreferences()
	return eapuo
}

// SetCAPreviousRemarks sets the "CAPreviousRemarks" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetCAPreviousRemarks(s string) *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.SetCAPreviousRemarks(s)
	return eapuo
}

// SetNillableCAPreviousRemarks sets the "CAPreviousRemarks" field if the given value is not nil.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetNillableCAPreviousRemarks(s *string) *ExamApplicationsPMPAUpdateOne {
	if s != nil {
		eapuo.SetCAPreviousRemarks(*s)
	}
	return eapuo
}

// ClearCAPreviousRemarks clears the value of the "CAPreviousRemarks" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) ClearCAPreviousRemarks() *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.ClearCAPreviousRemarks()
	return eapuo
}

// SetPunishmentStatus sets the "PunishmentStatus" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetPunishmentStatus(b bool) *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.SetPunishmentStatus(b)
	return eapuo
}

// SetNillablePunishmentStatus sets the "PunishmentStatus" field if the given value is not nil.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetNillablePunishmentStatus(b *bool) *ExamApplicationsPMPAUpdateOne {
	if b != nil {
		eapuo.SetPunishmentStatus(*b)
	}
	return eapuo
}

// ClearPunishmentStatus clears the value of the "PunishmentStatus" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) ClearPunishmentStatus() *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.ClearPunishmentStatus()
	return eapuo
}

// SetDisciplinaryCaseStatus sets the "DisciplinaryCaseStatus" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetDisciplinaryCaseStatus(b bool) *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.SetDisciplinaryCaseStatus(b)
	return eapuo
}

// SetNillableDisciplinaryCaseStatus sets the "DisciplinaryCaseStatus" field if the given value is not nil.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetNillableDisciplinaryCaseStatus(b *bool) *ExamApplicationsPMPAUpdateOne {
	if b != nil {
		eapuo.SetDisciplinaryCaseStatus(*b)
	}
	return eapuo
}

// ClearDisciplinaryCaseStatus clears the value of the "DisciplinaryCaseStatus" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) ClearDisciplinaryCaseStatus() *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.ClearDisciplinaryCaseStatus()
	return eapuo
}

// SetGenerateHallTicketFlag sets the "GenerateHallTicketFlag" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetGenerateHallTicketFlag(b bool) *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.SetGenerateHallTicketFlag(b)
	return eapuo
}

// SetNillableGenerateHallTicketFlag sets the "GenerateHallTicketFlag" field if the given value is not nil.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetNillableGenerateHallTicketFlag(b *bool) *ExamApplicationsPMPAUpdateOne {
	if b != nil {
		eapuo.SetGenerateHallTicketFlag(*b)
	}
	return eapuo
}

// ClearGenerateHallTicketFlag clears the value of the "GenerateHallTicketFlag" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) ClearGenerateHallTicketFlag() *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.ClearGenerateHallTicketFlag()
	return eapuo
}

// SetHallTicketNumber sets the "HallTicketNumber" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetHallTicketNumber(s string) *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.SetHallTicketNumber(s)
	return eapuo
}

// SetNillableHallTicketNumber sets the "HallTicketNumber" field if the given value is not nil.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetNillableHallTicketNumber(s *string) *ExamApplicationsPMPAUpdateOne {
	if s != nil {
		eapuo.SetHallTicketNumber(*s)
	}
	return eapuo
}

// ClearHallTicketNumber clears the value of the "HallTicketNumber" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) ClearHallTicketNumber() *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.ClearHallTicketNumber()
	return eapuo
}

// SetHallTicketGeneratedFlag sets the "HallTicketGeneratedFlag" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetHallTicketGeneratedFlag(b bool) *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.SetHallTicketGeneratedFlag(b)
	return eapuo
}

// SetNillableHallTicketGeneratedFlag sets the "HallTicketGeneratedFlag" field if the given value is not nil.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetNillableHallTicketGeneratedFlag(b *bool) *ExamApplicationsPMPAUpdateOne {
	if b != nil {
		eapuo.SetHallTicketGeneratedFlag(*b)
	}
	return eapuo
}

// ClearHallTicketGeneratedFlag clears the value of the "HallTicketGeneratedFlag" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) ClearHallTicketGeneratedFlag() *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.ClearHallTicketGeneratedFlag()
	return eapuo
}

// SetGenerateHallTicketFlagByNO sets the "GenerateHallTicketFlagByNO" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetGenerateHallTicketFlagByNO(b bool) *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.SetGenerateHallTicketFlagByNO(b)
	return eapuo
}

// SetNillableGenerateHallTicketFlagByNO sets the "GenerateHallTicketFlagByNO" field if the given value is not nil.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetNillableGenerateHallTicketFlagByNO(b *bool) *ExamApplicationsPMPAUpdateOne {
	if b != nil {
		eapuo.SetGenerateHallTicketFlagByNO(*b)
	}
	return eapuo
}

// ClearGenerateHallTicketFlagByNO clears the value of the "GenerateHallTicketFlagByNO" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) ClearGenerateHallTicketFlagByNO() *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.ClearGenerateHallTicketFlagByNO()
	return eapuo
}

// SetHallTicketGeneratedDate sets the "HallTicketGeneratedDate" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetHallTicketGeneratedDate(t time.Time) *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.SetHallTicketGeneratedDate(t)
	return eapuo
}

// SetNillableHallTicketGeneratedDate sets the "HallTicketGeneratedDate" field if the given value is not nil.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetNillableHallTicketGeneratedDate(t *time.Time) *ExamApplicationsPMPAUpdateOne {
	if t != nil {
		eapuo.SetHallTicketGeneratedDate(*t)
	}
	return eapuo
}

// ClearHallTicketGeneratedDate clears the value of the "HallTicketGeneratedDate" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) ClearHallTicketGeneratedDate() *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.ClearHallTicketGeneratedDate()
	return eapuo
}

// SetTemporaryHallTicket sets the "TemporaryHallTicket" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetTemporaryHallTicket(s string) *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.SetTemporaryHallTicket(s)
	return eapuo
}

// SetNillableTemporaryHallTicket sets the "TemporaryHallTicket" field if the given value is not nil.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetNillableTemporaryHallTicket(s *string) *ExamApplicationsPMPAUpdateOne {
	if s != nil {
		eapuo.SetTemporaryHallTicket(*s)
	}
	return eapuo
}

// ClearTemporaryHallTicket clears the value of the "TemporaryHallTicket" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) ClearTemporaryHallTicket() *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.ClearTemporaryHallTicket()
	return eapuo
}

// SetOptionUsed sets the "OptionUsed" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetOptionUsed(s string) *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.SetOptionUsed(s)
	return eapuo
}

// SetNillableOptionUsed sets the "OptionUsed" field if the given value is not nil.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetNillableOptionUsed(s *string) *ExamApplicationsPMPAUpdateOne {
	if s != nil {
		eapuo.SetOptionUsed(*s)
	}
	return eapuo
}

// ClearOptionUsed clears the value of the "OptionUsed" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) ClearOptionUsed() *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.ClearOptionUsed()
	return eapuo
}

// SetRemarks sets the "Remarks" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetRemarks(s string) *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.SetRemarks(s)
	return eapuo
}

// SetNillableRemarks sets the "Remarks" field if the given value is not nil.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetNillableRemarks(s *string) *ExamApplicationsPMPAUpdateOne {
	if s != nil {
		eapuo.SetRemarks(*s)
	}
	return eapuo
}

// ClearRemarks clears the value of the "Remarks" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) ClearRemarks() *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.ClearRemarks()
	return eapuo
}

// SetCadre sets the "Cadre" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetCadre(s string) *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.SetCadre(s)
	return eapuo
}

// SetNillableCadre sets the "Cadre" field if the given value is not nil.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetNillableCadre(s *string) *ExamApplicationsPMPAUpdateOne {
	if s != nil {
		eapuo.SetCadre(*s)
	}
	return eapuo
}

// ClearCadre clears the value of the "Cadre" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) ClearCadre() *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.ClearCadre()
	return eapuo
}

// SetEmployeePost sets the "EmployeePost" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetEmployeePost(s string) *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.SetEmployeePost(s)
	return eapuo
}

// SetNillableEmployeePost sets the "EmployeePost" field if the given value is not nil.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetNillableEmployeePost(s *string) *ExamApplicationsPMPAUpdateOne {
	if s != nil {
		eapuo.SetEmployeePost(*s)
	}
	return eapuo
}

// ClearEmployeePost clears the value of the "EmployeePost" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) ClearEmployeePost() *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.ClearEmployeePost()
	return eapuo
}

// SetDOJInEligiblePost sets the "DOJInEligiblePost" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetDOJInEligiblePost(s string) *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.SetDOJInEligiblePost(s)
	return eapuo
}

// SetNillableDOJInEligiblePost sets the "DOJInEligiblePost" field if the given value is not nil.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetNillableDOJInEligiblePost(s *string) *ExamApplicationsPMPAUpdateOne {
	if s != nil {
		eapuo.SetDOJInEligiblePost(*s)
	}
	return eapuo
}

// ClearDOJInEligiblePost clears the value of the "DOJInEligiblePost" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) ClearDOJInEligiblePost() *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.ClearDOJInEligiblePost()
	return eapuo
}

// SetDivisionPreferences sets the "DivisionPreferences" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetDivisionPreferences(i []interface{}) *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.SetDivisionPreferences(i)
	return eapuo
}

// AppendDivisionPreferences appends i to the "DivisionPreferences" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) AppendDivisionPreferences(i []interface{}) *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.AppendDivisionPreferences(i)
	return eapuo
}

// ClearDivisionPreferences clears the value of the "DivisionPreferences" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) ClearDivisionPreferences() *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.ClearDivisionPreferences()
	return eapuo
}

// SetRoleUserCode sets the "RoleUserCode" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetRoleUserCode(i int32) *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.SetRoleUserCode(i)
	return eapuo
}

// SetNillableRoleUserCode sets the "RoleUserCode" field if the given value is not nil.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetNillableRoleUserCode(i *int32) *ExamApplicationsPMPAUpdateOne {
	if i != nil {
		eapuo.SetRoleUserCode(*i)
	}
	return eapuo
}

// ClearRoleUserCode clears the value of the "RoleUserCode" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) ClearRoleUserCode() *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.ClearRoleUserCode()
	return eapuo
}

// SetIpAddress sets the "IpAddress" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetIpAddress(s string) *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.SetIpAddress(s)
	return eapuo
}

// SetNillableIpAddress sets the "IpAddress" field if the given value is not nil.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetNillableIpAddress(s *string) *ExamApplicationsPMPAUpdateOne {
	if s != nil {
		eapuo.SetIpAddress(*s)
	}
	return eapuo
}

// ClearIpAddress clears the value of the "IpAddress" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) ClearIpAddress() *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.ClearIpAddress()
	return eapuo
}

// SetLatitudeLongitude sets the "LatitudeLongitude" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetLatitudeLongitude(s string) *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.SetLatitudeLongitude(s)
	return eapuo
}

// SetNillableLatitudeLongitude sets the "LatitudeLongitude" field if the given value is not nil.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetNillableLatitudeLongitude(s *string) *ExamApplicationsPMPAUpdateOne {
	if s != nil {
		eapuo.SetLatitudeLongitude(*s)
	}
	return eapuo
}

// ClearLatitudeLongitude clears the value of the "LatitudeLongitude" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) ClearLatitudeLongitude() *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.ClearLatitudeLongitude()
	return eapuo
}

// SetCircleSID sets the "CircleSID" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetCircleSID(i int32) *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.SetCircleSID(i)
	return eapuo
}

// SetNillableCircleSID sets the "CircleSID" field if the given value is not nil.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetNillableCircleSID(i *int32) *ExamApplicationsPMPAUpdateOne {
	if i != nil {
		eapuo.SetCircleSID(*i)
	}
	return eapuo
}

// ClearCircleSID clears the value of the "CircleSID" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) ClearCircleSID() *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.ClearCircleSID()
	return eapuo
}

// SetFacilityName sets the "FacilityName" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetFacilityName(s string) *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.SetFacilityName(s)
	return eapuo
}

// SetNillableFacilityName sets the "FacilityName" field if the given value is not nil.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetNillableFacilityName(s *string) *ExamApplicationsPMPAUpdateOne {
	if s != nil {
		eapuo.SetFacilityName(*s)
	}
	return eapuo
}

// ClearFacilityName clears the value of the "FacilityName" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) ClearFacilityName() *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.ClearFacilityName()
	return eapuo
}

// SetServiceLength sets the "ServiceLength" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetServiceLength(i []interface{}) *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.SetServiceLength(i)
	return eapuo
}

// AppendServiceLength appends i to the "ServiceLength" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) AppendServiceLength(i []interface{}) *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.AppendServiceLength(i)
	return eapuo
}

// ClearServiceLength clears the value of the "ServiceLength" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) ClearServiceLength() *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.ClearServiceLength()
	return eapuo
}

// SetNonQualifyingService sets the "NonQualifyingService" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetNonQualifyingService(i []interface{}) *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.SetNonQualifyingService(i)
	return eapuo
}

// AppendNonQualifyingService appends i to the "NonQualifyingService" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) AppendNonQualifyingService(i []interface{}) *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.AppendNonQualifyingService(i)
	return eapuo
}

// ClearNonQualifyingService clears the value of the "NonQualifyingService" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) ClearNonQualifyingService() *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.ClearNonQualifyingService()
	return eapuo
}

// SetDCInPresentCadre sets the "DCInPresentCadre" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetDCInPresentCadre(s string) *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.SetDCInPresentCadre(s)
	return eapuo
}

// SetNillableDCInPresentCadre sets the "DCInPresentCadre" field if the given value is not nil.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetNillableDCInPresentCadre(s *string) *ExamApplicationsPMPAUpdateOne {
	if s != nil {
		eapuo.SetDCInPresentCadre(*s)
	}
	return eapuo
}

// ClearDCInPresentCadre clears the value of the "DCInPresentCadre" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) ClearDCInPresentCadre() *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.ClearDCInPresentCadre()
	return eapuo
}

// SetReportingOfficeID sets the "ReportingOfficeID" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetReportingOfficeID(s string) *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.SetReportingOfficeID(s)
	return eapuo
}

// SetNillableReportingOfficeID sets the "ReportingOfficeID" field if the given value is not nil.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetNillableReportingOfficeID(s *string) *ExamApplicationsPMPAUpdateOne {
	if s != nil {
		eapuo.SetReportingOfficeID(*s)
	}
	return eapuo
}

// ClearReportingOfficeID clears the value of the "ReportingOfficeID" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) ClearReportingOfficeID() *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.ClearReportingOfficeID()
	return eapuo
}

// SetCircleID sets the "CircleID" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetCircleID(i int32) *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.ResetCircleID()
	eapuo.mutation.SetCircleID(i)
	return eapuo
}

// SetNillableCircleID sets the "CircleID" field if the given value is not nil.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetNillableCircleID(i *int32) *ExamApplicationsPMPAUpdateOne {
	if i != nil {
		eapuo.SetCircleID(*i)
	}
	return eapuo
}

// AddCircleID adds i to the "CircleID" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) AddCircleID(i int32) *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.AddCircleID(i)
	return eapuo
}

// ClearCircleID clears the value of the "CircleID" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) ClearCircleID() *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.ClearCircleID()
	return eapuo
}

// SetRegionID sets the "RegionID" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetRegionID(i int32) *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.ResetRegionID()
	eapuo.mutation.SetRegionID(i)
	return eapuo
}

// SetNillableRegionID sets the "RegionID" field if the given value is not nil.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetNillableRegionID(i *int32) *ExamApplicationsPMPAUpdateOne {
	if i != nil {
		eapuo.SetRegionID(*i)
	}
	return eapuo
}

// AddRegionID adds i to the "RegionID" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) AddRegionID(i int32) *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.AddRegionID(i)
	return eapuo
}

// ClearRegionID clears the value of the "RegionID" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) ClearRegionID() *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.ClearRegionID()
	return eapuo
}

// SetDivisionID sets the "DivisionID" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetDivisionID(i int32) *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.ResetDivisionID()
	eapuo.mutation.SetDivisionID(i)
	return eapuo
}

// SetNillableDivisionID sets the "DivisionID" field if the given value is not nil.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetNillableDivisionID(i *int32) *ExamApplicationsPMPAUpdateOne {
	if i != nil {
		eapuo.SetDivisionID(*i)
	}
	return eapuo
}

// AddDivisionID adds i to the "DivisionID" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) AddDivisionID(i int32) *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.AddDivisionID(i)
	return eapuo
}

// ClearDivisionID clears the value of the "DivisionID" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) ClearDivisionID() *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.ClearDivisionID()
	return eapuo
}

// SetPostPreferences sets the "PostPreferences" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetPostPreferences(i []interface{}) *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.SetPostPreferences(i)
	return eapuo
}

// AppendPostPreferences appends i to the "PostPreferences" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) AppendPostPreferences(i []interface{}) *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.AppendPostPreferences(i)
	return eapuo
}

// ClearPostPreferences clears the value of the "PostPreferences" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) ClearPostPreferences() *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.ClearPostPreferences()
	return eapuo
}

// SetUnitPreferences sets the "UnitPreferences" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetUnitPreferences(i []interface{}) *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.SetUnitPreferences(i)
	return eapuo
}

// AppendUnitPreferences appends i to the "UnitPreferences" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) AppendUnitPreferences(i []interface{}) *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.AppendUnitPreferences(i)
	return eapuo
}

// ClearUnitPreferences clears the value of the "UnitPreferences" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) ClearUnitPreferences() *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.ClearUnitPreferences()
	return eapuo
}

// SetPMMailGuardMTSEngagement sets the "PMMailGuardMTSEngagement" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetPMMailGuardMTSEngagement(i []interface{}) *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.SetPMMailGuardMTSEngagement(i)
	return eapuo
}

// AppendPMMailGuardMTSEngagement appends i to the "PMMailGuardMTSEngagement" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) AppendPMMailGuardMTSEngagement(i []interface{}) *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.AppendPMMailGuardMTSEngagement(i)
	return eapuo
}

// ClearPMMailGuardMTSEngagement clears the value of the "PMMailGuardMTSEngagement" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) ClearPMMailGuardMTSEngagement() *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.ClearPMMailGuardMTSEngagement()
	return eapuo
}

// SetCenterId sets the "CenterId" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetCenterId(i int32) *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.ResetCenterId()
	eapuo.mutation.SetCenterId(i)
	return eapuo
}

// SetNillableCenterId sets the "CenterId" field if the given value is not nil.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetNillableCenterId(i *int32) *ExamApplicationsPMPAUpdateOne {
	if i != nil {
		eapuo.SetCenterId(*i)
	}
	return eapuo
}

// AddCenterId adds i to the "CenterId" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) AddCenterId(i int32) *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.AddCenterId(i)
	return eapuo
}

// ClearCenterId clears the value of the "CenterId" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) ClearCenterId() *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.ClearCenterId()
	return eapuo
}

// SetCenterCode sets the "CenterCode" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetCenterCode(i int32) *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.SetCenterCode(i)
	return eapuo
}

// SetNillableCenterCode sets the "CenterCode" field if the given value is not nil.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetNillableCenterCode(i *int32) *ExamApplicationsPMPAUpdateOne {
	if i != nil {
		eapuo.SetCenterCode(*i)
	}
	return eapuo
}

// ClearCenterCode clears the value of the "CenterCode" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) ClearCenterCode() *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.ClearCenterCode()
	return eapuo
}

// SetClaimingQualifyingService sets the "ClaimingQualifyingService" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetClaimingQualifyingService(s string) *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.SetClaimingQualifyingService(s)
	return eapuo
}

// SetNillableClaimingQualifyingService sets the "ClaimingQualifyingService" field if the given value is not nil.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetNillableClaimingQualifyingService(s *string) *ExamApplicationsPMPAUpdateOne {
	if s != nil {
		eapuo.SetClaimingQualifyingService(*s)
	}
	return eapuo
}

// ClearClaimingQualifyingService clears the value of the "ClaimingQualifyingService" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) ClearClaimingQualifyingService() *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.ClearClaimingQualifyingService()
	return eapuo
}

// SetDeputationOfficePincode sets the "DeputationOfficePincode" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetDeputationOfficePincode(s string) *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.SetDeputationOfficePincode(s)
	return eapuo
}

// SetNillableDeputationOfficePincode sets the "DeputationOfficePincode" field if the given value is not nil.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetNillableDeputationOfficePincode(s *string) *ExamApplicationsPMPAUpdateOne {
	if s != nil {
		eapuo.SetDeputationOfficePincode(*s)
	}
	return eapuo
}

// ClearDeputationOfficePincode clears the value of the "DeputationOfficePincode" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) ClearDeputationOfficePincode() *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.ClearDeputationOfficePincode()
	return eapuo
}

// SetRecommendedStatus sets the "RecommendedStatus" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetRecommendedStatus(s string) *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.SetRecommendedStatus(s)
	return eapuo
}

// SetNillableRecommendedStatus sets the "RecommendedStatus" field if the given value is not nil.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetNillableRecommendedStatus(s *string) *ExamApplicationsPMPAUpdateOne {
	if s != nil {
		eapuo.SetRecommendedStatus(*s)
	}
	return eapuo
}

// ClearRecommendedStatus clears the value of the "RecommendedStatus" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) ClearRecommendedStatus() *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.ClearRecommendedStatus()
	return eapuo
}

// SetApplicationWdlDate sets the "ApplicationWdlDate" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetApplicationWdlDate(t time.Time) *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.SetApplicationWdlDate(t)
	return eapuo
}

// SetNillableApplicationWdlDate sets the "ApplicationWdlDate" field if the given value is not nil.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetNillableApplicationWdlDate(t *time.Time) *ExamApplicationsPMPAUpdateOne {
	if t != nil {
		eapuo.SetApplicationWdlDate(*t)
	}
	return eapuo
}

// ClearApplicationWdlDate clears the value of the "ApplicationWdlDate" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) ClearApplicationWdlDate() *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.ClearApplicationWdlDate()
	return eapuo
}

// SetUpdatedAt sets the "UpdatedAt" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetUpdatedAt(t time.Time) *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.SetUpdatedAt(t)
	return eapuo
}

// SetNillableUpdatedAt sets the "UpdatedAt" field if the given value is not nil.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetNillableUpdatedAt(t *time.Time) *ExamApplicationsPMPAUpdateOne {
	if t != nil {
		eapuo.SetUpdatedAt(*t)
	}
	return eapuo
}

// ClearUpdatedAt clears the value of the "UpdatedAt" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) ClearUpdatedAt() *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.ClearUpdatedAt()
	return eapuo
}

// SetUpdatedBy sets the "UpdatedBy" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetUpdatedBy(s string) *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.SetUpdatedBy(s)
	return eapuo
}

// SetNillableUpdatedBy sets the "UpdatedBy" field if the given value is not nil.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetNillableUpdatedBy(s *string) *ExamApplicationsPMPAUpdateOne {
	if s != nil {
		eapuo.SetUpdatedBy(*s)
	}
	return eapuo
}

// ClearUpdatedBy clears the value of the "UpdatedBy" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) ClearUpdatedBy() *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.ClearUpdatedBy()
	return eapuo
}

// SetExamCenterHall sets the "ExamCenterHall" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetExamCenterHall(i int32) *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.ResetExamCenterHall()
	eapuo.mutation.SetExamCenterHall(i)
	return eapuo
}

// SetNillableExamCenterHall sets the "ExamCenterHall" field if the given value is not nil.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetNillableExamCenterHall(i *int32) *ExamApplicationsPMPAUpdateOne {
	if i != nil {
		eapuo.SetExamCenterHall(*i)
	}
	return eapuo
}

// AddExamCenterHall adds i to the "ExamCenterHall" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) AddExamCenterHall(i int32) *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.AddExamCenterHall(i)
	return eapuo
}

// ClearExamCenterHall clears the value of the "ExamCenterHall" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) ClearExamCenterHall() *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.ClearExamCenterHall()
	return eapuo
}

// SetHallName sets the "HallName" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetHallName(s string) *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.SetHallName(s)
	return eapuo
}

// SetNillableHallName sets the "HallName" field if the given value is not nil.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetNillableHallName(s *string) *ExamApplicationsPMPAUpdateOne {
	if s != nil {
		eapuo.SetHallName(*s)
	}
	return eapuo
}

// ClearHallName clears the value of the "HallName" field.
func (eapuo *ExamApplicationsPMPAUpdateOne) ClearHallName() *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.ClearHallName()
	return eapuo
}

// AddUsersPMPARefIDs adds the "UsersPMPARef" edge to the UserMaster entity by IDs.
func (eapuo *ExamApplicationsPMPAUpdateOne) AddUsersPMPARefIDs(ids ...int64) *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.AddUsersPMPARefIDs(ids...)
	return eapuo
}

// AddUsersPMPARef adds the "UsersPMPARef" edges to the UserMaster entity.
func (eapuo *ExamApplicationsPMPAUpdateOne) AddUsersPMPARef(u ...*UserMaster) *ExamApplicationsPMPAUpdateOne {
	ids := make([]int64, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return eapuo.AddUsersPMPARefIDs(ids...)
}

// SetRoleusersID sets the "roleusers" edge to the RoleMaster entity by ID.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetRoleusersID(id int32) *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.SetRoleusersID(id)
	return eapuo
}

// SetNillableRoleusersID sets the "roleusers" edge to the RoleMaster entity by ID if the given value is not nil.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetNillableRoleusersID(id *int32) *ExamApplicationsPMPAUpdateOne {
	if id != nil {
		eapuo = eapuo.SetRoleusersID(*id)
	}
	return eapuo
}

// SetRoleusers sets the "roleusers" edge to the RoleMaster entity.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetRoleusers(r *RoleMaster) *ExamApplicationsPMPAUpdateOne {
	return eapuo.SetRoleusersID(r.ID)
}

// SetExamcitycenterID sets the "examcitycenter" edge to the ExamCityCenter entity by ID.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetExamcitycenterID(id int32) *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.SetExamcitycenterID(id)
	return eapuo
}

// SetNillableExamcitycenterID sets the "examcitycenter" edge to the ExamCityCenter entity by ID if the given value is not nil.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetNillableExamcitycenterID(id *int32) *ExamApplicationsPMPAUpdateOne {
	if id != nil {
		eapuo = eapuo.SetExamcitycenterID(*id)
	}
	return eapuo
}

// SetExamcitycenter sets the "examcitycenter" edge to the ExamCityCenter entity.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetExamcitycenter(e *ExamCityCenter) *ExamApplicationsPMPAUpdateOne {
	return eapuo.SetExamcitycenterID(e.ID)
}

// AddCadrePrefRefIDs adds the "CadrePref_Ref" edge to the Cadre_Choice_PMPA entity by IDs.
func (eapuo *ExamApplicationsPMPAUpdateOne) AddCadrePrefRefIDs(ids ...int32) *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.AddCadrePrefRefIDs(ids...)
	return eapuo
}

// AddCadrePrefRef adds the "CadrePref_Ref" edges to the Cadre_Choice_PMPA entity.
func (eapuo *ExamApplicationsPMPAUpdateOne) AddCadrePrefRef(c ...*Cadre_Choice_PMPA) *ExamApplicationsPMPAUpdateOne {
	ids := make([]int32, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return eapuo.AddCadrePrefRefIDs(ids...)
}

// AddCirclePrefRefPMPAIDs adds the "CirclePrefRefPMPA" edge to the Division_Choice_PMPA entity by IDs.
func (eapuo *ExamApplicationsPMPAUpdateOne) AddCirclePrefRefPMPAIDs(ids ...int32) *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.AddCirclePrefRefPMPAIDs(ids...)
	return eapuo
}

// AddCirclePrefRefPMPA adds the "CirclePrefRefPMPA" edges to the Division_Choice_PMPA entity.
func (eapuo *ExamApplicationsPMPAUpdateOne) AddCirclePrefRefPMPA(d ...*Division_Choice_PMPA) *ExamApplicationsPMPAUpdateOne {
	ids := make([]int32, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return eapuo.AddCirclePrefRefPMPAIDs(ids...)
}

// AddPMPAApplicationsRefIDs adds the "PMPAApplicationsRef" edge to the RecommendationsPMPAApplications entity by IDs.
func (eapuo *ExamApplicationsPMPAUpdateOne) AddPMPAApplicationsRefIDs(ids ...int64) *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.AddPMPAApplicationsRefIDs(ids...)
	return eapuo
}

// AddPMPAApplicationsRef adds the "PMPAApplicationsRef" edges to the RecommendationsPMPAApplications entity.
func (eapuo *ExamApplicationsPMPAUpdateOne) AddPMPAApplicationsRef(r ...*RecommendationsPMPAApplications) *ExamApplicationsPMPAUpdateOne {
	ids := make([]int64, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return eapuo.AddPMPAApplicationsRefIDs(ids...)
}

// SetExamsID sets the "Exams" edge to the Exam entity by ID.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetExamsID(id int32) *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.SetExamsID(id)
	return eapuo
}

// SetNillableExamsID sets the "Exams" edge to the Exam entity by ID if the given value is not nil.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetNillableExamsID(id *int32) *ExamApplicationsPMPAUpdateOne {
	if id != nil {
		eapuo = eapuo.SetExamsID(*id)
	}
	return eapuo
}

// SetExams sets the "Exams" edge to the Exam entity.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetExams(e *Exam) *ExamApplicationsPMPAUpdateOne {
	return eapuo.SetExamsID(e.ID)
}

// SetPMPAExamCentresID sets the "PMPAExamCentres" edge to the Center entity by ID.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetPMPAExamCentresID(id int32) *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.SetPMPAExamCentresID(id)
	return eapuo
}

// SetNillablePMPAExamCentresID sets the "PMPAExamCentres" edge to the Center entity by ID if the given value is not nil.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetNillablePMPAExamCentresID(id *int32) *ExamApplicationsPMPAUpdateOne {
	if id != nil {
		eapuo = eapuo.SetPMPAExamCentresID(*id)
	}
	return eapuo
}

// SetPMPAExamCentres sets the "PMPAExamCentres" edge to the Center entity.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetPMPAExamCentres(c *Center) *ExamApplicationsPMPAUpdateOne {
	return eapuo.SetPMPAExamCentresID(c.ID)
}

// SetCircleRefsPMPAID sets the "CircleRefsPMPA" edge to the CircleSummaryForNO entity by ID.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetCircleRefsPMPAID(id int32) *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.SetCircleRefsPMPAID(id)
	return eapuo
}

// SetNillableCircleRefsPMPAID sets the "CircleRefsPMPA" edge to the CircleSummaryForNO entity by ID if the given value is not nil.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetNillableCircleRefsPMPAID(id *int32) *ExamApplicationsPMPAUpdateOne {
	if id != nil {
		eapuo = eapuo.SetCircleRefsPMPAID(*id)
	}
	return eapuo
}

// SetCircleRefsPMPA sets the "CircleRefsPMPA" edge to the CircleSummaryForNO entity.
func (eapuo *ExamApplicationsPMPAUpdateOne) SetCircleRefsPMPA(c *CircleSummaryForNO) *ExamApplicationsPMPAUpdateOne {
	return eapuo.SetCircleRefsPMPAID(c.ID)
}

// AddLogDatumIDs adds the "LogData" edge to the Logs entity by IDs.
func (eapuo *ExamApplicationsPMPAUpdateOne) AddLogDatumIDs(ids ...int64) *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.AddLogDatumIDs(ids...)
	return eapuo
}

// AddLogData adds the "LogData" edges to the Logs entity.
func (eapuo *ExamApplicationsPMPAUpdateOne) AddLogData(l ...*Logs) *ExamApplicationsPMPAUpdateOne {
	ids := make([]int64, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return eapuo.AddLogDatumIDs(ids...)
}

// Mutation returns the ExamApplicationsPMPAMutation object of the builder.
func (eapuo *ExamApplicationsPMPAUpdateOne) Mutation() *ExamApplicationsPMPAMutation {
	return eapuo.mutation
}

// ClearUsersPMPARef clears all "UsersPMPARef" edges to the UserMaster entity.
func (eapuo *ExamApplicationsPMPAUpdateOne) ClearUsersPMPARef() *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.ClearUsersPMPARef()
	return eapuo
}

// RemoveUsersPMPARefIDs removes the "UsersPMPARef" edge to UserMaster entities by IDs.
func (eapuo *ExamApplicationsPMPAUpdateOne) RemoveUsersPMPARefIDs(ids ...int64) *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.RemoveUsersPMPARefIDs(ids...)
	return eapuo
}

// RemoveUsersPMPARef removes "UsersPMPARef" edges to UserMaster entities.
func (eapuo *ExamApplicationsPMPAUpdateOne) RemoveUsersPMPARef(u ...*UserMaster) *ExamApplicationsPMPAUpdateOne {
	ids := make([]int64, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return eapuo.RemoveUsersPMPARefIDs(ids...)
}

// ClearRoleusers clears the "roleusers" edge to the RoleMaster entity.
func (eapuo *ExamApplicationsPMPAUpdateOne) ClearRoleusers() *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.ClearRoleusers()
	return eapuo
}

// ClearExamcitycenter clears the "examcitycenter" edge to the ExamCityCenter entity.
func (eapuo *ExamApplicationsPMPAUpdateOne) ClearExamcitycenter() *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.ClearExamcitycenter()
	return eapuo
}

// ClearCadrePrefRef clears all "CadrePref_Ref" edges to the Cadre_Choice_PMPA entity.
func (eapuo *ExamApplicationsPMPAUpdateOne) ClearCadrePrefRef() *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.ClearCadrePrefRef()
	return eapuo
}

// RemoveCadrePrefRefIDs removes the "CadrePref_Ref" edge to Cadre_Choice_PMPA entities by IDs.
func (eapuo *ExamApplicationsPMPAUpdateOne) RemoveCadrePrefRefIDs(ids ...int32) *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.RemoveCadrePrefRefIDs(ids...)
	return eapuo
}

// RemoveCadrePrefRef removes "CadrePref_Ref" edges to Cadre_Choice_PMPA entities.
func (eapuo *ExamApplicationsPMPAUpdateOne) RemoveCadrePrefRef(c ...*Cadre_Choice_PMPA) *ExamApplicationsPMPAUpdateOne {
	ids := make([]int32, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return eapuo.RemoveCadrePrefRefIDs(ids...)
}

// ClearCirclePrefRefPMPA clears all "CirclePrefRefPMPA" edges to the Division_Choice_PMPA entity.
func (eapuo *ExamApplicationsPMPAUpdateOne) ClearCirclePrefRefPMPA() *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.ClearCirclePrefRefPMPA()
	return eapuo
}

// RemoveCirclePrefRefPMPAIDs removes the "CirclePrefRefPMPA" edge to Division_Choice_PMPA entities by IDs.
func (eapuo *ExamApplicationsPMPAUpdateOne) RemoveCirclePrefRefPMPAIDs(ids ...int32) *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.RemoveCirclePrefRefPMPAIDs(ids...)
	return eapuo
}

// RemoveCirclePrefRefPMPA removes "CirclePrefRefPMPA" edges to Division_Choice_PMPA entities.
func (eapuo *ExamApplicationsPMPAUpdateOne) RemoveCirclePrefRefPMPA(d ...*Division_Choice_PMPA) *ExamApplicationsPMPAUpdateOne {
	ids := make([]int32, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return eapuo.RemoveCirclePrefRefPMPAIDs(ids...)
}

// ClearPMPAApplicationsRef clears all "PMPAApplicationsRef" edges to the RecommendationsPMPAApplications entity.
func (eapuo *ExamApplicationsPMPAUpdateOne) ClearPMPAApplicationsRef() *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.ClearPMPAApplicationsRef()
	return eapuo
}

// RemovePMPAApplicationsRefIDs removes the "PMPAApplicationsRef" edge to RecommendationsPMPAApplications entities by IDs.
func (eapuo *ExamApplicationsPMPAUpdateOne) RemovePMPAApplicationsRefIDs(ids ...int64) *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.RemovePMPAApplicationsRefIDs(ids...)
	return eapuo
}

// RemovePMPAApplicationsRef removes "PMPAApplicationsRef" edges to RecommendationsPMPAApplications entities.
func (eapuo *ExamApplicationsPMPAUpdateOne) RemovePMPAApplicationsRef(r ...*RecommendationsPMPAApplications) *ExamApplicationsPMPAUpdateOne {
	ids := make([]int64, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return eapuo.RemovePMPAApplicationsRefIDs(ids...)
}

// ClearExams clears the "Exams" edge to the Exam entity.
func (eapuo *ExamApplicationsPMPAUpdateOne) ClearExams() *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.ClearExams()
	return eapuo
}

// ClearPMPAExamCentres clears the "PMPAExamCentres" edge to the Center entity.
func (eapuo *ExamApplicationsPMPAUpdateOne) ClearPMPAExamCentres() *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.ClearPMPAExamCentres()
	return eapuo
}

// ClearCircleRefsPMPA clears the "CircleRefsPMPA" edge to the CircleSummaryForNO entity.
func (eapuo *ExamApplicationsPMPAUpdateOne) ClearCircleRefsPMPA() *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.ClearCircleRefsPMPA()
	return eapuo
}

// ClearLogData clears all "LogData" edges to the Logs entity.
func (eapuo *ExamApplicationsPMPAUpdateOne) ClearLogData() *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.ClearLogData()
	return eapuo
}

// RemoveLogDatumIDs removes the "LogData" edge to Logs entities by IDs.
func (eapuo *ExamApplicationsPMPAUpdateOne) RemoveLogDatumIDs(ids ...int64) *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.RemoveLogDatumIDs(ids...)
	return eapuo
}

// RemoveLogData removes "LogData" edges to Logs entities.
func (eapuo *ExamApplicationsPMPAUpdateOne) RemoveLogData(l ...*Logs) *ExamApplicationsPMPAUpdateOne {
	ids := make([]int64, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return eapuo.RemoveLogDatumIDs(ids...)
}

// Where appends a list predicates to the ExamApplicationsPMPAUpdate builder.
func (eapuo *ExamApplicationsPMPAUpdateOne) Where(ps ...predicate.Exam_Applications_PMPA) *ExamApplicationsPMPAUpdateOne {
	eapuo.mutation.Where(ps...)
	return eapuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (eapuo *ExamApplicationsPMPAUpdateOne) Select(field string, fields ...string) *ExamApplicationsPMPAUpdateOne {
	eapuo.fields = append([]string{field}, fields...)
	return eapuo
}

// Save executes the query and returns the updated Exam_Applications_PMPA entity.
func (eapuo *ExamApplicationsPMPAUpdateOne) Save(ctx context.Context) (*Exam_Applications_PMPA, error) {
	return withHooks(ctx, eapuo.sqlSave, eapuo.mutation, eapuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (eapuo *ExamApplicationsPMPAUpdateOne) SaveX(ctx context.Context) *Exam_Applications_PMPA {
	node, err := eapuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (eapuo *ExamApplicationsPMPAUpdateOne) Exec(ctx context.Context) error {
	_, err := eapuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eapuo *ExamApplicationsPMPAUpdateOne) ExecX(ctx context.Context) {
	if err := eapuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (eapuo *ExamApplicationsPMPAUpdateOne) sqlSave(ctx context.Context) (_node *Exam_Applications_PMPA, err error) {
	_spec := sqlgraph.NewUpdateSpec(exam_applications_pmpa.Table, exam_applications_pmpa.Columns, sqlgraph.NewFieldSpec(exam_applications_pmpa.FieldID, field.TypeInt64))
	id, ok := eapuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Exam_Applications_PMPA.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := eapuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, exam_applications_pmpa.FieldID)
		for _, f := range fields {
			if !exam_applications_pmpa.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != exam_applications_pmpa.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := eapuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eapuo.mutation.ApplicationNumber(); ok {
		_spec.SetField(exam_applications_pmpa.FieldApplicationNumber, field.TypeString, value)
	}
	if eapuo.mutation.ApplicationNumberCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldApplicationNumber, field.TypeString)
	}
	if value, ok := eapuo.mutation.ApplnSubmittedDate(); ok {
		_spec.SetField(exam_applications_pmpa.FieldApplnSubmittedDate, field.TypeTime, value)
	}
	if eapuo.mutation.ApplnSubmittedDateCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldApplnSubmittedDate, field.TypeTime)
	}
	if value, ok := eapuo.mutation.ExamShortName(); ok {
		_spec.SetField(exam_applications_pmpa.FieldExamShortName, field.TypeString, value)
	}
	if eapuo.mutation.ExamShortNameCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldExamShortName, field.TypeString)
	}
	if value, ok := eapuo.mutation.ExamName(); ok {
		_spec.SetField(exam_applications_pmpa.FieldExamName, field.TypeString, value)
	}
	if eapuo.mutation.ExamNameCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldExamName, field.TypeString)
	}
	if value, ok := eapuo.mutation.SmsExamShortName(); ok {
		_spec.SetField(exam_applications_pmpa.FieldSmsExamShortName, field.TypeString, value)
	}
	if eapuo.mutation.SmsExamShortNameCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldSmsExamShortName, field.TypeString)
	}
	if value, ok := eapuo.mutation.ExamYear(); ok {
		_spec.SetField(exam_applications_pmpa.FieldExamYear, field.TypeString, value)
	}
	if eapuo.mutation.ExamYearCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldExamYear, field.TypeString)
	}
	if value, ok := eapuo.mutation.UserID(); ok {
		_spec.SetField(exam_applications_pmpa.FieldUserID, field.TypeInt32, value)
	}
	if value, ok := eapuo.mutation.AddedUserID(); ok {
		_spec.AddField(exam_applications_pmpa.FieldUserID, field.TypeInt32, value)
	}
	if eapuo.mutation.UserIDCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldUserID, field.TypeInt32)
	}
	if value, ok := eapuo.mutation.EmployeeID(); ok {
		_spec.SetField(exam_applications_pmpa.FieldEmployeeID, field.TypeInt64, value)
	}
	if value, ok := eapuo.mutation.AddedEmployeeID(); ok {
		_spec.AddField(exam_applications_pmpa.FieldEmployeeID, field.TypeInt64, value)
	}
	if eapuo.mutation.EmployeeIDCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldEmployeeID, field.TypeInt64)
	}
	if value, ok := eapuo.mutation.EmployeeName(); ok {
		_spec.SetField(exam_applications_pmpa.FieldEmployeeName, field.TypeString, value)
	}
	if eapuo.mutation.EmployeeNameCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldEmployeeName, field.TypeString)
	}
	if value, ok := eapuo.mutation.DOB(); ok {
		_spec.SetField(exam_applications_pmpa.FieldDOB, field.TypeString, value)
	}
	if eapuo.mutation.DOBCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldDOB, field.TypeString)
	}
	if value, ok := eapuo.mutation.Gender(); ok {
		_spec.SetField(exam_applications_pmpa.FieldGender, field.TypeString, value)
	}
	if eapuo.mutation.GenderCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldGender, field.TypeString)
	}
	if value, ok := eapuo.mutation.MobileNumber(); ok {
		_spec.SetField(exam_applications_pmpa.FieldMobileNumber, field.TypeString, value)
	}
	if eapuo.mutation.MobileNumberCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldMobileNumber, field.TypeString)
	}
	if value, ok := eapuo.mutation.EmailID(); ok {
		_spec.SetField(exam_applications_pmpa.FieldEmailID, field.TypeString, value)
	}
	if eapuo.mutation.EmailIDCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldEmailID, field.TypeString)
	}
	if value, ok := eapuo.mutation.CategoryCode(); ok {
		_spec.SetField(exam_applications_pmpa.FieldCategoryCode, field.TypeString, value)
	}
	if eapuo.mutation.CategoryCodeCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldCategoryCode, field.TypeString)
	}
	if value, ok := eapuo.mutation.CategoryDescription(); ok {
		_spec.SetField(exam_applications_pmpa.FieldCategoryDescription, field.TypeString, value)
	}
	if eapuo.mutation.CategoryDescriptionCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldCategoryDescription, field.TypeString)
	}
	if value, ok := eapuo.mutation.DisabilityTypeID(); ok {
		_spec.SetField(exam_applications_pmpa.FieldDisabilityTypeID, field.TypeString, value)
	}
	if eapuo.mutation.DisabilityTypeIDCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldDisabilityTypeID, field.TypeString)
	}
	if value, ok := eapuo.mutation.DisabilityTypeCode(); ok {
		_spec.SetField(exam_applications_pmpa.FieldDisabilityTypeCode, field.TypeString, value)
	}
	if eapuo.mutation.DisabilityTypeCodeCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldDisabilityTypeCode, field.TypeString)
	}
	if value, ok := eapuo.mutation.DisabilityTypeDescription(); ok {
		_spec.SetField(exam_applications_pmpa.FieldDisabilityTypeDescription, field.TypeString, value)
	}
	if eapuo.mutation.DisabilityTypeDescriptionCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldDisabilityTypeDescription, field.TypeString)
	}
	if value, ok := eapuo.mutation.DisabilityPercentage(); ok {
		_spec.SetField(exam_applications_pmpa.FieldDisabilityPercentage, field.TypeInt32, value)
	}
	if value, ok := eapuo.mutation.AddedDisabilityPercentage(); ok {
		_spec.AddField(exam_applications_pmpa.FieldDisabilityPercentage, field.TypeInt32, value)
	}
	if eapuo.mutation.DisabilityPercentageCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldDisabilityPercentage, field.TypeInt32)
	}
	if value, ok := eapuo.mutation.DCCS(); ok {
		_spec.SetField(exam_applications_pmpa.FieldDCCS, field.TypeString, value)
	}
	if eapuo.mutation.DCCSCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldDCCS, field.TypeString)
	}
	if value, ok := eapuo.mutation.EntryPostCode(); ok {
		_spec.SetField(exam_applications_pmpa.FieldEntryPostCode, field.TypeString, value)
	}
	if eapuo.mutation.EntryPostCodeCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldEntryPostCode, field.TypeString)
	}
	if value, ok := eapuo.mutation.EntryPostDescription(); ok {
		_spec.SetField(exam_applications_pmpa.FieldEntryPostDescription, field.TypeString, value)
	}
	if eapuo.mutation.EntryPostDescriptionCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldEntryPostDescription, field.TypeString)
	}
	if value, ok := eapuo.mutation.PresentPostCode(); ok {
		_spec.SetField(exam_applications_pmpa.FieldPresentPostCode, field.TypeString, value)
	}
	if eapuo.mutation.PresentPostCodeCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldPresentPostCode, field.TypeString)
	}
	if value, ok := eapuo.mutation.PresentPostDescription(); ok {
		_spec.SetField(exam_applications_pmpa.FieldPresentPostDescription, field.TypeString, value)
	}
	if eapuo.mutation.PresentPostDescriptionCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldPresentPostDescription, field.TypeString)
	}
	if value, ok := eapuo.mutation.FeederPostCode(); ok {
		_spec.SetField(exam_applications_pmpa.FieldFeederPostCode, field.TypeString, value)
	}
	if eapuo.mutation.FeederPostCodeCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldFeederPostCode, field.TypeString)
	}
	if value, ok := eapuo.mutation.FeederPostDescription(); ok {
		_spec.SetField(exam_applications_pmpa.FieldFeederPostDescription, field.TypeString, value)
	}
	if eapuo.mutation.FeederPostDescriptionCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldFeederPostDescription, field.TypeString)
	}
	if value, ok := eapuo.mutation.FeederPostJoiningDate(); ok {
		_spec.SetField(exam_applications_pmpa.FieldFeederPostJoiningDate, field.TypeString, value)
	}
	if eapuo.mutation.FeederPostJoiningDateCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldFeederPostJoiningDate, field.TypeString)
	}
	if value, ok := eapuo.mutation.DesignationID(); ok {
		_spec.SetField(exam_applications_pmpa.FieldDesignationID, field.TypeString, value)
	}
	if eapuo.mutation.DesignationIDCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldDesignationID, field.TypeString)
	}
	if value, ok := eapuo.mutation.PresentDesignation(); ok {
		_spec.SetField(exam_applications_pmpa.FieldPresentDesignation, field.TypeString, value)
	}
	if eapuo.mutation.PresentDesignationCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldPresentDesignation, field.TypeString)
	}
	if value, ok := eapuo.mutation.EducationCode(); ok {
		_spec.SetField(exam_applications_pmpa.FieldEducationCode, field.TypeString, value)
	}
	if eapuo.mutation.EducationCodeCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldEducationCode, field.TypeString)
	}
	if value, ok := eapuo.mutation.EducationDescription(); ok {
		_spec.SetField(exam_applications_pmpa.FieldEducationDescription, field.TypeString, value)
	}
	if eapuo.mutation.EducationDescriptionCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldEducationDescription, field.TypeString)
	}
	if value, ok := eapuo.mutation.FacilityUniqueID(); ok {
		_spec.SetField(exam_applications_pmpa.FieldFacilityUniqueID, field.TypeString, value)
	}
	if eapuo.mutation.FacilityUniqueIDCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldFacilityUniqueID, field.TypeString)
	}
	if value, ok := eapuo.mutation.WorkingOfficePincode(); ok {
		_spec.SetField(exam_applications_pmpa.FieldWorkingOfficePincode, field.TypeInt32, value)
	}
	if value, ok := eapuo.mutation.AddedWorkingOfficePincode(); ok {
		_spec.AddField(exam_applications_pmpa.FieldWorkingOfficePincode, field.TypeInt32, value)
	}
	if eapuo.mutation.WorkingOfficePincodeCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldWorkingOfficePincode, field.TypeInt32)
	}
	if value, ok := eapuo.mutation.WorkingOfficeFacilityID(); ok {
		_spec.SetField(exam_applications_pmpa.FieldWorkingOfficeFacilityID, field.TypeString, value)
	}
	if eapuo.mutation.WorkingOfficeFacilityIDCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldWorkingOfficeFacilityID, field.TypeString)
	}
	if value, ok := eapuo.mutation.WorkingOfficeName(); ok {
		_spec.SetField(exam_applications_pmpa.FieldWorkingOfficeName, field.TypeString, value)
	}
	if eapuo.mutation.WorkingOfficeNameCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldWorkingOfficeName, field.TypeString)
	}
	if value, ok := eapuo.mutation.WorkingOfficeCircleFacilityID(); ok {
		_spec.SetField(exam_applications_pmpa.FieldWorkingOfficeCircleFacilityID, field.TypeString, value)
	}
	if eapuo.mutation.WorkingOfficeCircleFacilityIDCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldWorkingOfficeCircleFacilityID, field.TypeString)
	}
	if value, ok := eapuo.mutation.WorkingOfficeCircleName(); ok {
		_spec.SetField(exam_applications_pmpa.FieldWorkingOfficeCircleName, field.TypeString, value)
	}
	if eapuo.mutation.WorkingOfficeCircleNameCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldWorkingOfficeCircleName, field.TypeString)
	}
	if value, ok := eapuo.mutation.WorkingOfficeRegionFacilityID(); ok {
		_spec.SetField(exam_applications_pmpa.FieldWorkingOfficeRegionFacilityID, field.TypeString, value)
	}
	if eapuo.mutation.WorkingOfficeRegionFacilityIDCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldWorkingOfficeRegionFacilityID, field.TypeString)
	}
	if value, ok := eapuo.mutation.WorkingOfficeRegionName(); ok {
		_spec.SetField(exam_applications_pmpa.FieldWorkingOfficeRegionName, field.TypeString, value)
	}
	if eapuo.mutation.WorkingOfficeRegionNameCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldWorkingOfficeRegionName, field.TypeString)
	}
	if value, ok := eapuo.mutation.WorkingOfficeDivisionFacilityID(); ok {
		_spec.SetField(exam_applications_pmpa.FieldWorkingOfficeDivisionFacilityID, field.TypeString, value)
	}
	if eapuo.mutation.WorkingOfficeDivisionFacilityIDCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldWorkingOfficeDivisionFacilityID, field.TypeString)
	}
	if value, ok := eapuo.mutation.WorkingOfficeDivisionName(); ok {
		_spec.SetField(exam_applications_pmpa.FieldWorkingOfficeDivisionName, field.TypeString, value)
	}
	if eapuo.mutation.WorkingOfficeDivisionNameCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldWorkingOfficeDivisionName, field.TypeString)
	}
	if value, ok := eapuo.mutation.ReportingOfficeFacilityID(); ok {
		_spec.SetField(exam_applications_pmpa.FieldReportingOfficeFacilityID, field.TypeString, value)
	}
	if eapuo.mutation.ReportingOfficeFacilityIDCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldReportingOfficeFacilityID, field.TypeString)
	}
	if value, ok := eapuo.mutation.ReportingOfficeName(); ok {
		_spec.SetField(exam_applications_pmpa.FieldReportingOfficeName, field.TypeString, value)
	}
	if eapuo.mutation.ReportingOfficeNameCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldReportingOfficeName, field.TypeString)
	}
	if value, ok := eapuo.mutation.LienControllingOfficeID(); ok {
		_spec.SetField(exam_applications_pmpa.FieldLienControllingOfficeID, field.TypeString, value)
	}
	if eapuo.mutation.LienControllingOfficeIDCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldLienControllingOfficeID, field.TypeString)
	}
	if value, ok := eapuo.mutation.LienControllingOfficeName(); ok {
		_spec.SetField(exam_applications_pmpa.FieldLienControllingOfficeName, field.TypeString, value)
	}
	if eapuo.mutation.LienControllingOfficeNameCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldLienControllingOfficeName, field.TypeString)
	}
	if value, ok := eapuo.mutation.InDeputation(); ok {
		_spec.SetField(exam_applications_pmpa.FieldInDeputation, field.TypeString, value)
	}
	if eapuo.mutation.InDeputationCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldInDeputation, field.TypeString)
	}
	if value, ok := eapuo.mutation.DeputationType(); ok {
		_spec.SetField(exam_applications_pmpa.FieldDeputationType, field.TypeString, value)
	}
	if eapuo.mutation.DeputationTypeCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldDeputationType, field.TypeString)
	}
	if value, ok := eapuo.mutation.DeputationOfficeUniqueId(); ok {
		_spec.SetField(exam_applications_pmpa.FieldDeputationOfficeUniqueId, field.TypeString, value)
	}
	if eapuo.mutation.DeputationOfficeUniqueIdCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldDeputationOfficeUniqueId, field.TypeString)
	}
	if value, ok := eapuo.mutation.DeputationOfficeFacilityID(); ok {
		_spec.SetField(exam_applications_pmpa.FieldDeputationOfficeFacilityID, field.TypeString, value)
	}
	if eapuo.mutation.DeputationOfficeFacilityIDCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldDeputationOfficeFacilityID, field.TypeString)
	}
	if value, ok := eapuo.mutation.DeputationOfficeName(); ok {
		_spec.SetField(exam_applications_pmpa.FieldDeputationOfficeName, field.TypeString, value)
	}
	if eapuo.mutation.DeputationOfficeNameCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldDeputationOfficeName, field.TypeString)
	}
	if value, ok := eapuo.mutation.DeputationControllingOfficeID(); ok {
		_spec.SetField(exam_applications_pmpa.FieldDeputationControllingOfficeID, field.TypeString, value)
	}
	if eapuo.mutation.DeputationControllingOfficeIDCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldDeputationControllingOfficeID, field.TypeString)
	}
	if value, ok := eapuo.mutation.DeputationControllingOfficeName(); ok {
		_spec.SetField(exam_applications_pmpa.FieldDeputationControllingOfficeName, field.TypeString, value)
	}
	if eapuo.mutation.DeputationControllingOfficeNameCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldDeputationControllingOfficeName, field.TypeString)
	}
	if value, ok := eapuo.mutation.ControllingOfficeFacilityID(); ok {
		_spec.SetField(exam_applications_pmpa.FieldControllingOfficeFacilityID, field.TypeString, value)
	}
	if eapuo.mutation.ControllingOfficeFacilityIDCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldControllingOfficeFacilityID, field.TypeString)
	}
	if value, ok := eapuo.mutation.ControllingOfficeName(); ok {
		_spec.SetField(exam_applications_pmpa.FieldControllingOfficeName, field.TypeString, value)
	}
	if eapuo.mutation.ControllingOfficeNameCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldControllingOfficeName, field.TypeString)
	}
	if value, ok := eapuo.mutation.NodalOfficeFacilityID(); ok {
		_spec.SetField(exam_applications_pmpa.FieldNodalOfficeFacilityID, field.TypeString, value)
	}
	if eapuo.mutation.NodalOfficeFacilityIDCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldNodalOfficeFacilityID, field.TypeString)
	}
	if value, ok := eapuo.mutation.NodalOfficeName(); ok {
		_spec.SetField(exam_applications_pmpa.FieldNodalOfficeName, field.TypeString, value)
	}
	if eapuo.mutation.NodalOfficeNameCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldNodalOfficeName, field.TypeString)
	}
	if value, ok := eapuo.mutation.CenterFacilityId(); ok {
		_spec.SetField(exam_applications_pmpa.FieldCenterFacilityId, field.TypeString, value)
	}
	if eapuo.mutation.CenterFacilityIdCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldCenterFacilityId, field.TypeString)
	}
	if value, ok := eapuo.mutation.CentrePreference(); ok {
		_spec.SetField(exam_applications_pmpa.FieldCentrePreference, field.TypeString, value)
	}
	if eapuo.mutation.CentrePreferenceCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldCentrePreference, field.TypeString)
	}
	if value, ok := eapuo.mutation.Signature(); ok {
		_spec.SetField(exam_applications_pmpa.FieldSignature, field.TypeString, value)
	}
	if eapuo.mutation.SignatureCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldSignature, field.TypeString)
	}
	if value, ok := eapuo.mutation.Photo(); ok {
		_spec.SetField(exam_applications_pmpa.FieldPhoto, field.TypeString, value)
	}
	if eapuo.mutation.PhotoCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldPhoto, field.TypeString)
	}
	if value, ok := eapuo.mutation.CandidatePhoto(); ok {
		_spec.SetField(exam_applications_pmpa.FieldCandidatePhoto, field.TypeBytes, value)
	}
	if eapuo.mutation.CandidatePhotoCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldCandidatePhoto, field.TypeBytes)
	}
	if value, ok := eapuo.mutation.CandidateSignature(); ok {
		_spec.SetField(exam_applications_pmpa.FieldCandidateSignature, field.TypeBytes, value)
	}
	if eapuo.mutation.CandidateSignatureCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldCandidateSignature, field.TypeBytes)
	}
	if value, ok := eapuo.mutation.SignaturePath(); ok {
		_spec.SetField(exam_applications_pmpa.FieldSignaturePath, field.TypeString, value)
	}
	if eapuo.mutation.SignaturePathCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldSignaturePath, field.TypeString)
	}
	if value, ok := eapuo.mutation.PhotoPath(); ok {
		_spec.SetField(exam_applications_pmpa.FieldPhotoPath, field.TypeString, value)
	}
	if eapuo.mutation.PhotoPathCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldPhotoPath, field.TypeString)
	}
	if value, ok := eapuo.mutation.TempHallTicket(); ok {
		_spec.SetField(exam_applications_pmpa.FieldTempHallTicket, field.TypeString, value)
	}
	if eapuo.mutation.TempHallTicketCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldTempHallTicket, field.TypeString)
	}
	if value, ok := eapuo.mutation.CandidateRemarks(); ok {
		_spec.SetField(exam_applications_pmpa.FieldCandidateRemarks, field.TypeString, value)
	}
	if eapuo.mutation.CandidateRemarksCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldCandidateRemarks, field.TypeString)
	}
	if value, ok := eapuo.mutation.VAGeneralRemarks(); ok {
		_spec.SetField(exam_applications_pmpa.FieldVAGeneralRemarks, field.TypeString, value)
	}
	if eapuo.mutation.VAGeneralRemarksCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldVAGeneralRemarks, field.TypeString)
	}
	if value, ok := eapuo.mutation.CAGeneralRemarks(); ok {
		_spec.SetField(exam_applications_pmpa.FieldCAGeneralRemarks, field.TypeString, value)
	}
	if eapuo.mutation.CAGeneralRemarksCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldCAGeneralRemarks, field.TypeString)
	}
	if value, ok := eapuo.mutation.NAGeneralRemarks(); ok {
		_spec.SetField(exam_applications_pmpa.FieldNAGeneralRemarks, field.TypeString, value)
	}
	if eapuo.mutation.NAGeneralRemarksCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldNAGeneralRemarks, field.TypeString)
	}
	if value, ok := eapuo.mutation.ApplicationStatus(); ok {
		_spec.SetField(exam_applications_pmpa.FieldApplicationStatus, field.TypeString, value)
	}
	if eapuo.mutation.ApplicationStatusCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldApplicationStatus, field.TypeString)
	}
	if value, ok := eapuo.mutation.Status(); ok {
		_spec.SetField(exam_applications_pmpa.FieldStatus, field.TypeString, value)
	}
	if eapuo.mutation.StatusCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldStatus, field.TypeString)
	}
	if value, ok := eapuo.mutation.VAUserId(); ok {
		_spec.SetField(exam_applications_pmpa.FieldVAUserId, field.TypeInt32, value)
	}
	if value, ok := eapuo.mutation.AddedVAUserId(); ok {
		_spec.AddField(exam_applications_pmpa.FieldVAUserId, field.TypeInt32, value)
	}
	if eapuo.mutation.VAUserIdCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldVAUserId, field.TypeInt32)
	}
	if value, ok := eapuo.mutation.VAUserName(); ok {
		_spec.SetField(exam_applications_pmpa.FieldVAUserName, field.TypeString, value)
	}
	if eapuo.mutation.VAUserNameCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldVAUserName, field.TypeString)
	}
	if value, ok := eapuo.mutation.VAEmployeeID(); ok {
		_spec.SetField(exam_applications_pmpa.FieldVAEmployeeID, field.TypeString, value)
	}
	if eapuo.mutation.VAEmployeeIDCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldVAEmployeeID, field.TypeString)
	}
	if value, ok := eapuo.mutation.VAEmployeeDesignation(); ok {
		_spec.SetField(exam_applications_pmpa.FieldVAEmployeeDesignation, field.TypeString, value)
	}
	if eapuo.mutation.VAEmployeeDesignationCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldVAEmployeeDesignation, field.TypeString)
	}
	if value, ok := eapuo.mutation.VARemarks(); ok {
		_spec.SetField(exam_applications_pmpa.FieldVARemarks, field.TypeString, value)
	}
	if eapuo.mutation.VARemarksCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldVARemarks, field.TypeString)
	}
	if value, ok := eapuo.mutation.VADate(); ok {
		_spec.SetField(exam_applications_pmpa.FieldVADate, field.TypeTime, value)
	}
	if eapuo.mutation.VADateCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldVADate, field.TypeTime)
	}
	if value, ok := eapuo.mutation.CAUserId(); ok {
		_spec.SetField(exam_applications_pmpa.FieldCAUserId, field.TypeInt32, value)
	}
	if value, ok := eapuo.mutation.AddedCAUserId(); ok {
		_spec.AddField(exam_applications_pmpa.FieldCAUserId, field.TypeInt32, value)
	}
	if eapuo.mutation.CAUserIdCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldCAUserId, field.TypeInt32)
	}
	if value, ok := eapuo.mutation.CAUserName(); ok {
		_spec.SetField(exam_applications_pmpa.FieldCAUserName, field.TypeString, value)
	}
	if eapuo.mutation.CAUserNameCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldCAUserName, field.TypeString)
	}
	if value, ok := eapuo.mutation.CAEmployeeID(); ok {
		_spec.SetField(exam_applications_pmpa.FieldCAEmployeeID, field.TypeString, value)
	}
	if eapuo.mutation.CAEmployeeIDCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldCAEmployeeID, field.TypeString)
	}
	if value, ok := eapuo.mutation.CAEmployeeDesignation(); ok {
		_spec.SetField(exam_applications_pmpa.FieldCAEmployeeDesignation, field.TypeString, value)
	}
	if eapuo.mutation.CAEmployeeDesignationCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldCAEmployeeDesignation, field.TypeString)
	}
	if value, ok := eapuo.mutation.CARemarks(); ok {
		_spec.SetField(exam_applications_pmpa.FieldCARemarks, field.TypeString, value)
	}
	if eapuo.mutation.CARemarksCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldCARemarks, field.TypeString)
	}
	if value, ok := eapuo.mutation.CADate(); ok {
		_spec.SetField(exam_applications_pmpa.FieldCADate, field.TypeTime, value)
	}
	if eapuo.mutation.CADateCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldCADate, field.TypeTime)
	}
	if value, ok := eapuo.mutation.NAUserId(); ok {
		_spec.SetField(exam_applications_pmpa.FieldNAUserId, field.TypeInt32, value)
	}
	if value, ok := eapuo.mutation.AddedNAUserId(); ok {
		_spec.AddField(exam_applications_pmpa.FieldNAUserId, field.TypeInt32, value)
	}
	if eapuo.mutation.NAUserIdCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldNAUserId, field.TypeInt32)
	}
	if value, ok := eapuo.mutation.NAUserName(); ok {
		_spec.SetField(exam_applications_pmpa.FieldNAUserName, field.TypeString, value)
	}
	if eapuo.mutation.NAUserNameCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldNAUserName, field.TypeString)
	}
	if value, ok := eapuo.mutation.NAEmployeeID(); ok {
		_spec.SetField(exam_applications_pmpa.FieldNAEmployeeID, field.TypeString, value)
	}
	if eapuo.mutation.NAEmployeeIDCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldNAEmployeeID, field.TypeString)
	}
	if value, ok := eapuo.mutation.NAEmployeeDesignation(); ok {
		_spec.SetField(exam_applications_pmpa.FieldNAEmployeeDesignation, field.TypeString, value)
	}
	if eapuo.mutation.NAEmployeeDesignationCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldNAEmployeeDesignation, field.TypeString)
	}
	if value, ok := eapuo.mutation.NARemarks(); ok {
		_spec.SetField(exam_applications_pmpa.FieldNARemarks, field.TypeString, value)
	}
	if eapuo.mutation.NARemarksCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldNARemarks, field.TypeString)
	}
	if value, ok := eapuo.mutation.NADate(); ok {
		_spec.SetField(exam_applications_pmpa.FieldNADate, field.TypeTime, value)
	}
	if eapuo.mutation.NADateCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldNADate, field.TypeTime)
	}
	if value, ok := eapuo.mutation.AppliactionRemarks(); ok {
		_spec.SetField(exam_applications_pmpa.FieldAppliactionRemarks, field.TypeString, value)
	}
	if eapuo.mutation.AppliactionRemarksCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldAppliactionRemarks, field.TypeString)
	}
	if value, ok := eapuo.mutation.CadrePreferences(); ok {
		_spec.SetField(exam_applications_pmpa.FieldCadrePreferences, field.TypeJSON, value)
	}
	if value, ok := eapuo.mutation.AppendedCadrePreferences(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, exam_applications_pmpa.FieldCadrePreferences, value)
		})
	}
	if eapuo.mutation.CadrePreferencesCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldCadrePreferences, field.TypeJSON)
	}
	if value, ok := eapuo.mutation.CAPreviousRemarks(); ok {
		_spec.SetField(exam_applications_pmpa.FieldCAPreviousRemarks, field.TypeString, value)
	}
	if eapuo.mutation.CAPreviousRemarksCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldCAPreviousRemarks, field.TypeString)
	}
	if value, ok := eapuo.mutation.PunishmentStatus(); ok {
		_spec.SetField(exam_applications_pmpa.FieldPunishmentStatus, field.TypeBool, value)
	}
	if eapuo.mutation.PunishmentStatusCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldPunishmentStatus, field.TypeBool)
	}
	if value, ok := eapuo.mutation.DisciplinaryCaseStatus(); ok {
		_spec.SetField(exam_applications_pmpa.FieldDisciplinaryCaseStatus, field.TypeBool, value)
	}
	if eapuo.mutation.DisciplinaryCaseStatusCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldDisciplinaryCaseStatus, field.TypeBool)
	}
	if value, ok := eapuo.mutation.GenerateHallTicketFlag(); ok {
		_spec.SetField(exam_applications_pmpa.FieldGenerateHallTicketFlag, field.TypeBool, value)
	}
	if eapuo.mutation.GenerateHallTicketFlagCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldGenerateHallTicketFlag, field.TypeBool)
	}
	if value, ok := eapuo.mutation.HallTicketNumber(); ok {
		_spec.SetField(exam_applications_pmpa.FieldHallTicketNumber, field.TypeString, value)
	}
	if eapuo.mutation.HallTicketNumberCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldHallTicketNumber, field.TypeString)
	}
	if value, ok := eapuo.mutation.HallTicketGeneratedFlag(); ok {
		_spec.SetField(exam_applications_pmpa.FieldHallTicketGeneratedFlag, field.TypeBool, value)
	}
	if eapuo.mutation.HallTicketGeneratedFlagCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldHallTicketGeneratedFlag, field.TypeBool)
	}
	if value, ok := eapuo.mutation.GenerateHallTicketFlagByNO(); ok {
		_spec.SetField(exam_applications_pmpa.FieldGenerateHallTicketFlagByNO, field.TypeBool, value)
	}
	if eapuo.mutation.GenerateHallTicketFlagByNOCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldGenerateHallTicketFlagByNO, field.TypeBool)
	}
	if value, ok := eapuo.mutation.HallTicketGeneratedDate(); ok {
		_spec.SetField(exam_applications_pmpa.FieldHallTicketGeneratedDate, field.TypeTime, value)
	}
	if eapuo.mutation.HallTicketGeneratedDateCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldHallTicketGeneratedDate, field.TypeTime)
	}
	if value, ok := eapuo.mutation.TemporaryHallTicket(); ok {
		_spec.SetField(exam_applications_pmpa.FieldTemporaryHallTicket, field.TypeString, value)
	}
	if eapuo.mutation.TemporaryHallTicketCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldTemporaryHallTicket, field.TypeString)
	}
	if value, ok := eapuo.mutation.OptionUsed(); ok {
		_spec.SetField(exam_applications_pmpa.FieldOptionUsed, field.TypeString, value)
	}
	if eapuo.mutation.OptionUsedCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldOptionUsed, field.TypeString)
	}
	if value, ok := eapuo.mutation.Remarks(); ok {
		_spec.SetField(exam_applications_pmpa.FieldRemarks, field.TypeString, value)
	}
	if eapuo.mutation.RemarksCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldRemarks, field.TypeString)
	}
	if value, ok := eapuo.mutation.Cadre(); ok {
		_spec.SetField(exam_applications_pmpa.FieldCadre, field.TypeString, value)
	}
	if eapuo.mutation.CadreCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldCadre, field.TypeString)
	}
	if value, ok := eapuo.mutation.EmployeePost(); ok {
		_spec.SetField(exam_applications_pmpa.FieldEmployeePost, field.TypeString, value)
	}
	if eapuo.mutation.EmployeePostCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldEmployeePost, field.TypeString)
	}
	if value, ok := eapuo.mutation.DOJInEligiblePost(); ok {
		_spec.SetField(exam_applications_pmpa.FieldDOJInEligiblePost, field.TypeString, value)
	}
	if eapuo.mutation.DOJInEligiblePostCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldDOJInEligiblePost, field.TypeString)
	}
	if value, ok := eapuo.mutation.DivisionPreferences(); ok {
		_spec.SetField(exam_applications_pmpa.FieldDivisionPreferences, field.TypeJSON, value)
	}
	if value, ok := eapuo.mutation.AppendedDivisionPreferences(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, exam_applications_pmpa.FieldDivisionPreferences, value)
		})
	}
	if eapuo.mutation.DivisionPreferencesCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldDivisionPreferences, field.TypeJSON)
	}
	if value, ok := eapuo.mutation.IpAddress(); ok {
		_spec.SetField(exam_applications_pmpa.FieldIpAddress, field.TypeString, value)
	}
	if eapuo.mutation.IpAddressCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldIpAddress, field.TypeString)
	}
	if value, ok := eapuo.mutation.LatitudeLongitude(); ok {
		_spec.SetField(exam_applications_pmpa.FieldLatitudeLongitude, field.TypeString, value)
	}
	if eapuo.mutation.LatitudeLongitudeCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldLatitudeLongitude, field.TypeString)
	}
	if value, ok := eapuo.mutation.FacilityName(); ok {
		_spec.SetField(exam_applications_pmpa.FieldFacilityName, field.TypeString, value)
	}
	if eapuo.mutation.FacilityNameCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldFacilityName, field.TypeString)
	}
	if value, ok := eapuo.mutation.ServiceLength(); ok {
		_spec.SetField(exam_applications_pmpa.FieldServiceLength, field.TypeJSON, value)
	}
	if value, ok := eapuo.mutation.AppendedServiceLength(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, exam_applications_pmpa.FieldServiceLength, value)
		})
	}
	if eapuo.mutation.ServiceLengthCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldServiceLength, field.TypeJSON)
	}
	if value, ok := eapuo.mutation.NonQualifyingService(); ok {
		_spec.SetField(exam_applications_pmpa.FieldNonQualifyingService, field.TypeJSON, value)
	}
	if value, ok := eapuo.mutation.AppendedNonQualifyingService(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, exam_applications_pmpa.FieldNonQualifyingService, value)
		})
	}
	if eapuo.mutation.NonQualifyingServiceCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldNonQualifyingService, field.TypeJSON)
	}
	if value, ok := eapuo.mutation.DCInPresentCadre(); ok {
		_spec.SetField(exam_applications_pmpa.FieldDCInPresentCadre, field.TypeString, value)
	}
	if eapuo.mutation.DCInPresentCadreCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldDCInPresentCadre, field.TypeString)
	}
	if value, ok := eapuo.mutation.ReportingOfficeID(); ok {
		_spec.SetField(exam_applications_pmpa.FieldReportingOfficeID, field.TypeString, value)
	}
	if eapuo.mutation.ReportingOfficeIDCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldReportingOfficeID, field.TypeString)
	}
	if value, ok := eapuo.mutation.CircleID(); ok {
		_spec.SetField(exam_applications_pmpa.FieldCircleID, field.TypeInt32, value)
	}
	if value, ok := eapuo.mutation.AddedCircleID(); ok {
		_spec.AddField(exam_applications_pmpa.FieldCircleID, field.TypeInt32, value)
	}
	if eapuo.mutation.CircleIDCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldCircleID, field.TypeInt32)
	}
	if value, ok := eapuo.mutation.RegionID(); ok {
		_spec.SetField(exam_applications_pmpa.FieldRegionID, field.TypeInt32, value)
	}
	if value, ok := eapuo.mutation.AddedRegionID(); ok {
		_spec.AddField(exam_applications_pmpa.FieldRegionID, field.TypeInt32, value)
	}
	if eapuo.mutation.RegionIDCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldRegionID, field.TypeInt32)
	}
	if value, ok := eapuo.mutation.DivisionID(); ok {
		_spec.SetField(exam_applications_pmpa.FieldDivisionID, field.TypeInt32, value)
	}
	if value, ok := eapuo.mutation.AddedDivisionID(); ok {
		_spec.AddField(exam_applications_pmpa.FieldDivisionID, field.TypeInt32, value)
	}
	if eapuo.mutation.DivisionIDCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldDivisionID, field.TypeInt32)
	}
	if value, ok := eapuo.mutation.PostPreferences(); ok {
		_spec.SetField(exam_applications_pmpa.FieldPostPreferences, field.TypeJSON, value)
	}
	if value, ok := eapuo.mutation.AppendedPostPreferences(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, exam_applications_pmpa.FieldPostPreferences, value)
		})
	}
	if eapuo.mutation.PostPreferencesCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldPostPreferences, field.TypeJSON)
	}
	if value, ok := eapuo.mutation.UnitPreferences(); ok {
		_spec.SetField(exam_applications_pmpa.FieldUnitPreferences, field.TypeJSON, value)
	}
	if value, ok := eapuo.mutation.AppendedUnitPreferences(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, exam_applications_pmpa.FieldUnitPreferences, value)
		})
	}
	if eapuo.mutation.UnitPreferencesCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldUnitPreferences, field.TypeJSON)
	}
	if value, ok := eapuo.mutation.PMMailGuardMTSEngagement(); ok {
		_spec.SetField(exam_applications_pmpa.FieldPMMailGuardMTSEngagement, field.TypeJSON, value)
	}
	if value, ok := eapuo.mutation.AppendedPMMailGuardMTSEngagement(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, exam_applications_pmpa.FieldPMMailGuardMTSEngagement, value)
		})
	}
	if eapuo.mutation.PMMailGuardMTSEngagementCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldPMMailGuardMTSEngagement, field.TypeJSON)
	}
	if value, ok := eapuo.mutation.CenterId(); ok {
		_spec.SetField(exam_applications_pmpa.FieldCenterId, field.TypeInt32, value)
	}
	if value, ok := eapuo.mutation.AddedCenterId(); ok {
		_spec.AddField(exam_applications_pmpa.FieldCenterId, field.TypeInt32, value)
	}
	if eapuo.mutation.CenterIdCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldCenterId, field.TypeInt32)
	}
	if value, ok := eapuo.mutation.ClaimingQualifyingService(); ok {
		_spec.SetField(exam_applications_pmpa.FieldClaimingQualifyingService, field.TypeString, value)
	}
	if eapuo.mutation.ClaimingQualifyingServiceCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldClaimingQualifyingService, field.TypeString)
	}
	if value, ok := eapuo.mutation.DeputationOfficePincode(); ok {
		_spec.SetField(exam_applications_pmpa.FieldDeputationOfficePincode, field.TypeString, value)
	}
	if eapuo.mutation.DeputationOfficePincodeCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldDeputationOfficePincode, field.TypeString)
	}
	if value, ok := eapuo.mutation.RecommendedStatus(); ok {
		_spec.SetField(exam_applications_pmpa.FieldRecommendedStatus, field.TypeString, value)
	}
	if eapuo.mutation.RecommendedStatusCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldRecommendedStatus, field.TypeString)
	}
	if value, ok := eapuo.mutation.ApplicationWdlDate(); ok {
		_spec.SetField(exam_applications_pmpa.FieldApplicationWdlDate, field.TypeTime, value)
	}
	if eapuo.mutation.ApplicationWdlDateCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldApplicationWdlDate, field.TypeTime)
	}
	if value, ok := eapuo.mutation.UpdatedAt(); ok {
		_spec.SetField(exam_applications_pmpa.FieldUpdatedAt, field.TypeTime, value)
	}
	if eapuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := eapuo.mutation.UpdatedBy(); ok {
		_spec.SetField(exam_applications_pmpa.FieldUpdatedBy, field.TypeString, value)
	}
	if eapuo.mutation.UpdatedByCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := eapuo.mutation.ExamCenterHall(); ok {
		_spec.SetField(exam_applications_pmpa.FieldExamCenterHall, field.TypeInt32, value)
	}
	if value, ok := eapuo.mutation.AddedExamCenterHall(); ok {
		_spec.AddField(exam_applications_pmpa.FieldExamCenterHall, field.TypeInt32, value)
	}
	if eapuo.mutation.ExamCenterHallCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldExamCenterHall, field.TypeInt32)
	}
	if value, ok := eapuo.mutation.HallName(); ok {
		_spec.SetField(exam_applications_pmpa.FieldHallName, field.TypeString, value)
	}
	if eapuo.mutation.HallNameCleared() {
		_spec.ClearField(exam_applications_pmpa.FieldHallName, field.TypeString)
	}
	if eapuo.mutation.UsersPMPARefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_applications_pmpa.UsersPMPARefTable,
			Columns: []string{exam_applications_pmpa.UsersPMPARefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usermaster.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eapuo.mutation.RemovedUsersPMPARefIDs(); len(nodes) > 0 && !eapuo.mutation.UsersPMPARefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_applications_pmpa.UsersPMPARefTable,
			Columns: []string{exam_applications_pmpa.UsersPMPARefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usermaster.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eapuo.mutation.UsersPMPARefIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_applications_pmpa.UsersPMPARefTable,
			Columns: []string{exam_applications_pmpa.UsersPMPARefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usermaster.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eapuo.mutation.RoleusersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   exam_applications_pmpa.RoleusersTable,
			Columns: []string{exam_applications_pmpa.RoleusersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rolemaster.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eapuo.mutation.RoleusersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   exam_applications_pmpa.RoleusersTable,
			Columns: []string{exam_applications_pmpa.RoleusersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rolemaster.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eapuo.mutation.ExamcitycenterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   exam_applications_pmpa.ExamcitycenterTable,
			Columns: []string{exam_applications_pmpa.ExamcitycenterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(examcitycenter.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eapuo.mutation.ExamcitycenterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   exam_applications_pmpa.ExamcitycenterTable,
			Columns: []string{exam_applications_pmpa.ExamcitycenterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(examcitycenter.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eapuo.mutation.CadrePrefRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_applications_pmpa.CadrePrefRefTable,
			Columns: []string{exam_applications_pmpa.CadrePrefRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cadre_choice_pmpa.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eapuo.mutation.RemovedCadrePrefRefIDs(); len(nodes) > 0 && !eapuo.mutation.CadrePrefRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_applications_pmpa.CadrePrefRefTable,
			Columns: []string{exam_applications_pmpa.CadrePrefRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cadre_choice_pmpa.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eapuo.mutation.CadrePrefRefIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_applications_pmpa.CadrePrefRefTable,
			Columns: []string{exam_applications_pmpa.CadrePrefRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cadre_choice_pmpa.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eapuo.mutation.CirclePrefRefPMPACleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_applications_pmpa.CirclePrefRefPMPATable,
			Columns: []string{exam_applications_pmpa.CirclePrefRefPMPAColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(division_choice_pmpa.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eapuo.mutation.RemovedCirclePrefRefPMPAIDs(); len(nodes) > 0 && !eapuo.mutation.CirclePrefRefPMPACleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_applications_pmpa.CirclePrefRefPMPATable,
			Columns: []string{exam_applications_pmpa.CirclePrefRefPMPAColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(division_choice_pmpa.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eapuo.mutation.CirclePrefRefPMPAIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_applications_pmpa.CirclePrefRefPMPATable,
			Columns: []string{exam_applications_pmpa.CirclePrefRefPMPAColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(division_choice_pmpa.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eapuo.mutation.PMPAApplicationsRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_applications_pmpa.PMPAApplicationsRefTable,
			Columns: []string{exam_applications_pmpa.PMPAApplicationsRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(recommendationspmpaapplications.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eapuo.mutation.RemovedPMPAApplicationsRefIDs(); len(nodes) > 0 && !eapuo.mutation.PMPAApplicationsRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_applications_pmpa.PMPAApplicationsRefTable,
			Columns: []string{exam_applications_pmpa.PMPAApplicationsRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(recommendationspmpaapplications.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eapuo.mutation.PMPAApplicationsRefIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_applications_pmpa.PMPAApplicationsRefTable,
			Columns: []string{exam_applications_pmpa.PMPAApplicationsRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(recommendationspmpaapplications.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eapuo.mutation.ExamsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   exam_applications_pmpa.ExamsTable,
			Columns: []string{exam_applications_pmpa.ExamsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eapuo.mutation.ExamsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   exam_applications_pmpa.ExamsTable,
			Columns: []string{exam_applications_pmpa.ExamsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eapuo.mutation.PMPAExamCentresCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   exam_applications_pmpa.PMPAExamCentresTable,
			Columns: []string{exam_applications_pmpa.PMPAExamCentresColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(center.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eapuo.mutation.PMPAExamCentresIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   exam_applications_pmpa.PMPAExamCentresTable,
			Columns: []string{exam_applications_pmpa.PMPAExamCentresColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(center.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eapuo.mutation.CircleRefsPMPACleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   exam_applications_pmpa.CircleRefsPMPATable,
			Columns: []string{exam_applications_pmpa.CircleRefsPMPAColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(circlesummaryforno.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eapuo.mutation.CircleRefsPMPAIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   exam_applications_pmpa.CircleRefsPMPATable,
			Columns: []string{exam_applications_pmpa.CircleRefsPMPAColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(circlesummaryforno.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eapuo.mutation.LogDataCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_applications_pmpa.LogDataTable,
			Columns: []string{exam_applications_pmpa.LogDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(logs.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eapuo.mutation.RemovedLogDataIDs(); len(nodes) > 0 && !eapuo.mutation.LogDataCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_applications_pmpa.LogDataTable,
			Columns: []string{exam_applications_pmpa.LogDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(logs.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eapuo.mutation.LogDataIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_applications_pmpa.LogDataTable,
			Columns: []string{exam_applications_pmpa.LogDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(logs.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Exam_Applications_PMPA{config: eapuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, eapuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{exam_applications_pmpa.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	eapuo.mutation.done = true
	return _node, nil
}
