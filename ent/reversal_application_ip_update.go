// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"recruit/ent/predicate"
	"recruit/ent/reversal_application_ip"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ReversalApplicationIPUpdate is the builder for updating Reversal_Application_IP entities.
type ReversalApplicationIPUpdate struct {
	config
	hooks    []Hook
	mutation *ReversalApplicationIPMutation
}

// Where appends a list predicates to the ReversalApplicationIPUpdate builder.
func (raiu *ReversalApplicationIPUpdate) Where(ps ...predicate.Reversal_Application_IP) *ReversalApplicationIPUpdate {
	raiu.mutation.Where(ps...)
	return raiu
}

// SetEmployeeID sets the "EmployeeID" field.
func (raiu *ReversalApplicationIPUpdate) SetEmployeeID(i int64) *ReversalApplicationIPUpdate {
	raiu.mutation.ResetEmployeeID()
	raiu.mutation.SetEmployeeID(i)
	return raiu
}

// SetNillableEmployeeID sets the "EmployeeID" field if the given value is not nil.
func (raiu *ReversalApplicationIPUpdate) SetNillableEmployeeID(i *int64) *ReversalApplicationIPUpdate {
	if i != nil {
		raiu.SetEmployeeID(*i)
	}
	return raiu
}

// AddEmployeeID adds i to the "EmployeeID" field.
func (raiu *ReversalApplicationIPUpdate) AddEmployeeID(i int64) *ReversalApplicationIPUpdate {
	raiu.mutation.AddEmployeeID(i)
	return raiu
}

// ClearEmployeeID clears the value of the "EmployeeID" field.
func (raiu *ReversalApplicationIPUpdate) ClearEmployeeID() *ReversalApplicationIPUpdate {
	raiu.mutation.ClearEmployeeID()
	return raiu
}

// SetEmployeeName sets the "EmployeeName" field.
func (raiu *ReversalApplicationIPUpdate) SetEmployeeName(s string) *ReversalApplicationIPUpdate {
	raiu.mutation.SetEmployeeName(s)
	return raiu
}

// SetNillableEmployeeName sets the "EmployeeName" field if the given value is not nil.
func (raiu *ReversalApplicationIPUpdate) SetNillableEmployeeName(s *string) *ReversalApplicationIPUpdate {
	if s != nil {
		raiu.SetEmployeeName(*s)
	}
	return raiu
}

// ClearEmployeeName clears the value of the "EmployeeName" field.
func (raiu *ReversalApplicationIPUpdate) ClearEmployeeName() *ReversalApplicationIPUpdate {
	raiu.mutation.ClearEmployeeName()
	return raiu
}

// SetDOB sets the "DOB" field.
func (raiu *ReversalApplicationIPUpdate) SetDOB(s string) *ReversalApplicationIPUpdate {
	raiu.mutation.SetDOB(s)
	return raiu
}

// SetNillableDOB sets the "DOB" field if the given value is not nil.
func (raiu *ReversalApplicationIPUpdate) SetNillableDOB(s *string) *ReversalApplicationIPUpdate {
	if s != nil {
		raiu.SetDOB(*s)
	}
	return raiu
}

// ClearDOB clears the value of the "DOB" field.
func (raiu *ReversalApplicationIPUpdate) ClearDOB() *ReversalApplicationIPUpdate {
	raiu.mutation.ClearDOB()
	return raiu
}

// SetGender sets the "Gender" field.
func (raiu *ReversalApplicationIPUpdate) SetGender(rai reversal_application_ip.Gender) *ReversalApplicationIPUpdate {
	raiu.mutation.SetGender(rai)
	return raiu
}

// SetMobileNumber sets the "MobileNumber" field.
func (raiu *ReversalApplicationIPUpdate) SetMobileNumber(s string) *ReversalApplicationIPUpdate {
	raiu.mutation.SetMobileNumber(s)
	return raiu
}

// SetNillableMobileNumber sets the "MobileNumber" field if the given value is not nil.
func (raiu *ReversalApplicationIPUpdate) SetNillableMobileNumber(s *string) *ReversalApplicationIPUpdate {
	if s != nil {
		raiu.SetMobileNumber(*s)
	}
	return raiu
}

// ClearMobileNumber clears the value of the "MobileNumber" field.
func (raiu *ReversalApplicationIPUpdate) ClearMobileNumber() *ReversalApplicationIPUpdate {
	raiu.mutation.ClearMobileNumber()
	return raiu
}

// SetEmailID sets the "EmailID" field.
func (raiu *ReversalApplicationIPUpdate) SetEmailID(s string) *ReversalApplicationIPUpdate {
	raiu.mutation.SetEmailID(s)
	return raiu
}

// SetNillableEmailID sets the "EmailID" field if the given value is not nil.
func (raiu *ReversalApplicationIPUpdate) SetNillableEmailID(s *string) *ReversalApplicationIPUpdate {
	if s != nil {
		raiu.SetEmailID(*s)
	}
	return raiu
}

// ClearEmailID clears the value of the "EmailID" field.
func (raiu *ReversalApplicationIPUpdate) ClearEmailID() *ReversalApplicationIPUpdate {
	raiu.mutation.ClearEmailID()
	return raiu
}

// SetEmployeeCategory sets the "EmployeeCategory" field.
func (raiu *ReversalApplicationIPUpdate) SetEmployeeCategory(s string) *ReversalApplicationIPUpdate {
	raiu.mutation.SetEmployeeCategory(s)
	return raiu
}

// SetNillableEmployeeCategory sets the "EmployeeCategory" field if the given value is not nil.
func (raiu *ReversalApplicationIPUpdate) SetNillableEmployeeCategory(s *string) *ReversalApplicationIPUpdate {
	if s != nil {
		raiu.SetEmployeeCategory(*s)
	}
	return raiu
}

// ClearEmployeeCategory clears the value of the "EmployeeCategory" field.
func (raiu *ReversalApplicationIPUpdate) ClearEmployeeCategory() *ReversalApplicationIPUpdate {
	raiu.mutation.ClearEmployeeCategory()
	return raiu
}

// SetCadre sets the "Cadre" field.
func (raiu *ReversalApplicationIPUpdate) SetCadre(s string) *ReversalApplicationIPUpdate {
	raiu.mutation.SetCadre(s)
	return raiu
}

// SetNillableCadre sets the "Cadre" field if the given value is not nil.
func (raiu *ReversalApplicationIPUpdate) SetNillableCadre(s *string) *ReversalApplicationIPUpdate {
	if s != nil {
		raiu.SetCadre(*s)
	}
	return raiu
}

// ClearCadre clears the value of the "Cadre" field.
func (raiu *ReversalApplicationIPUpdate) ClearCadre() *ReversalApplicationIPUpdate {
	raiu.mutation.ClearCadre()
	return raiu
}

// SetEmployeePost sets the "EmployeePost" field.
func (raiu *ReversalApplicationIPUpdate) SetEmployeePost(s string) *ReversalApplicationIPUpdate {
	raiu.mutation.SetEmployeePost(s)
	return raiu
}

// SetNillableEmployeePost sets the "EmployeePost" field if the given value is not nil.
func (raiu *ReversalApplicationIPUpdate) SetNillableEmployeePost(s *string) *ReversalApplicationIPUpdate {
	if s != nil {
		raiu.SetEmployeePost(*s)
	}
	return raiu
}

// ClearEmployeePost clears the value of the "EmployeePost" field.
func (raiu *ReversalApplicationIPUpdate) ClearEmployeePost() *ReversalApplicationIPUpdate {
	raiu.mutation.ClearEmployeePost()
	return raiu
}

// SetFacilityID sets the "FacilityID" field.
func (raiu *ReversalApplicationIPUpdate) SetFacilityID(s string) *ReversalApplicationIPUpdate {
	raiu.mutation.SetFacilityID(s)
	return raiu
}

// SetNillableFacilityID sets the "FacilityID" field if the given value is not nil.
func (raiu *ReversalApplicationIPUpdate) SetNillableFacilityID(s *string) *ReversalApplicationIPUpdate {
	if s != nil {
		raiu.SetFacilityID(*s)
	}
	return raiu
}

// ClearFacilityID clears the value of the "FacilityID" field.
func (raiu *ReversalApplicationIPUpdate) ClearFacilityID() *ReversalApplicationIPUpdate {
	raiu.mutation.ClearFacilityID()
	return raiu
}

// SetDCCS sets the "DCCS" field.
func (raiu *ReversalApplicationIPUpdate) SetDCCS(s string) *ReversalApplicationIPUpdate {
	raiu.mutation.SetDCCS(s)
	return raiu
}

// SetNillableDCCS sets the "DCCS" field if the given value is not nil.
func (raiu *ReversalApplicationIPUpdate) SetNillableDCCS(s *string) *ReversalApplicationIPUpdate {
	if s != nil {
		raiu.SetDCCS(*s)
	}
	return raiu
}

// ClearDCCS clears the value of the "DCCS" field.
func (raiu *ReversalApplicationIPUpdate) ClearDCCS() *ReversalApplicationIPUpdate {
	raiu.mutation.ClearDCCS()
	return raiu
}

// SetDCInPresentCadre sets the "DCInPresentCadre" field.
func (raiu *ReversalApplicationIPUpdate) SetDCInPresentCadre(s string) *ReversalApplicationIPUpdate {
	raiu.mutation.SetDCInPresentCadre(s)
	return raiu
}

// SetNillableDCInPresentCadre sets the "DCInPresentCadre" field if the given value is not nil.
func (raiu *ReversalApplicationIPUpdate) SetNillableDCInPresentCadre(s *string) *ReversalApplicationIPUpdate {
	if s != nil {
		raiu.SetDCInPresentCadre(*s)
	}
	return raiu
}

// ClearDCInPresentCadre clears the value of the "DCInPresentCadre" field.
func (raiu *ReversalApplicationIPUpdate) ClearDCInPresentCadre() *ReversalApplicationIPUpdate {
	raiu.mutation.ClearDCInPresentCadre()
	return raiu
}

// SetDeputationOfficeId sets the "DeputationOfficeId" field.
func (raiu *ReversalApplicationIPUpdate) SetDeputationOfficeId(s string) *ReversalApplicationIPUpdate {
	raiu.mutation.SetDeputationOfficeId(s)
	return raiu
}

// SetNillableDeputationOfficeId sets the "DeputationOfficeId" field if the given value is not nil.
func (raiu *ReversalApplicationIPUpdate) SetNillableDeputationOfficeId(s *string) *ReversalApplicationIPUpdate {
	if s != nil {
		raiu.SetDeputationOfficeId(*s)
	}
	return raiu
}

// ClearDeputationOfficeId clears the value of the "DeputationOfficeId" field.
func (raiu *ReversalApplicationIPUpdate) ClearDeputationOfficeId() *ReversalApplicationIPUpdate {
	raiu.mutation.ClearDeputationOfficeId()
	return raiu
}

// SetDisabilityType sets the "DisabilityType" field.
func (raiu *ReversalApplicationIPUpdate) SetDisabilityType(s string) *ReversalApplicationIPUpdate {
	raiu.mutation.SetDisabilityType(s)
	return raiu
}

// SetNillableDisabilityType sets the "DisabilityType" field if the given value is not nil.
func (raiu *ReversalApplicationIPUpdate) SetNillableDisabilityType(s *string) *ReversalApplicationIPUpdate {
	if s != nil {
		raiu.SetDisabilityType(*s)
	}
	return raiu
}

// ClearDisabilityType clears the value of the "DisabilityType" field.
func (raiu *ReversalApplicationIPUpdate) ClearDisabilityType() *ReversalApplicationIPUpdate {
	raiu.mutation.ClearDisabilityType()
	return raiu
}

// SetDisabilityPercentage sets the "DisabilityPercentage" field.
func (raiu *ReversalApplicationIPUpdate) SetDisabilityPercentage(s string) *ReversalApplicationIPUpdate {
	raiu.mutation.SetDisabilityPercentage(s)
	return raiu
}

// SetNillableDisabilityPercentage sets the "DisabilityPercentage" field if the given value is not nil.
func (raiu *ReversalApplicationIPUpdate) SetNillableDisabilityPercentage(s *string) *ReversalApplicationIPUpdate {
	if s != nil {
		raiu.SetDisabilityPercentage(*s)
	}
	return raiu
}

// ClearDisabilityPercentage clears the value of the "DisabilityPercentage" field.
func (raiu *ReversalApplicationIPUpdate) ClearDisabilityPercentage() *ReversalApplicationIPUpdate {
	raiu.mutation.ClearDisabilityPercentage()
	return raiu
}

// SetEducation sets the "Education" field.
func (raiu *ReversalApplicationIPUpdate) SetEducation(s string) *ReversalApplicationIPUpdate {
	raiu.mutation.SetEducation(s)
	return raiu
}

// SetNillableEducation sets the "Education" field if the given value is not nil.
func (raiu *ReversalApplicationIPUpdate) SetNillableEducation(s *string) *ReversalApplicationIPUpdate {
	if s != nil {
		raiu.SetEducation(*s)
	}
	return raiu
}

// ClearEducation clears the value of the "Education" field.
func (raiu *ReversalApplicationIPUpdate) ClearEducation() *ReversalApplicationIPUpdate {
	raiu.mutation.ClearEducation()
	return raiu
}

// SetExamCodeIP sets the "ExamCodeIP" field.
func (raiu *ReversalApplicationIPUpdate) SetExamCodeIP(i int32) *ReversalApplicationIPUpdate {
	raiu.mutation.ResetExamCodeIP()
	raiu.mutation.SetExamCodeIP(i)
	return raiu
}

// SetNillableExamCodeIP sets the "ExamCodeIP" field if the given value is not nil.
func (raiu *ReversalApplicationIPUpdate) SetNillableExamCodeIP(i *int32) *ReversalApplicationIPUpdate {
	if i != nil {
		raiu.SetExamCodeIP(*i)
	}
	return raiu
}

// AddExamCodeIP adds i to the "ExamCodeIP" field.
func (raiu *ReversalApplicationIPUpdate) AddExamCodeIP(i int32) *ReversalApplicationIPUpdate {
	raiu.mutation.AddExamCodeIP(i)
	return raiu
}

// ClearExamCodeIP clears the value of the "ExamCodeIP" field.
func (raiu *ReversalApplicationIPUpdate) ClearExamCodeIP() *ReversalApplicationIPUpdate {
	raiu.mutation.ClearExamCodeIP()
	return raiu
}

// SetExamYear sets the "ExamYear" field.
func (raiu *ReversalApplicationIPUpdate) SetExamYear(s string) *ReversalApplicationIPUpdate {
	raiu.mutation.SetExamYear(s)
	return raiu
}

// SetNillableExamYear sets the "ExamYear" field if the given value is not nil.
func (raiu *ReversalApplicationIPUpdate) SetNillableExamYear(s *string) *ReversalApplicationIPUpdate {
	if s != nil {
		raiu.SetExamYear(*s)
	}
	return raiu
}

// ClearExamYear clears the value of the "ExamYear" field.
func (raiu *ReversalApplicationIPUpdate) ClearExamYear() *ReversalApplicationIPUpdate {
	raiu.mutation.ClearExamYear()
	return raiu
}

// SetCentrePreference sets the "CentrePreference" field.
func (raiu *ReversalApplicationIPUpdate) SetCentrePreference(s string) *ReversalApplicationIPUpdate {
	raiu.mutation.SetCentrePreference(s)
	return raiu
}

// SetNillableCentrePreference sets the "CentrePreference" field if the given value is not nil.
func (raiu *ReversalApplicationIPUpdate) SetNillableCentrePreference(s *string) *ReversalApplicationIPUpdate {
	if s != nil {
		raiu.SetCentrePreference(*s)
	}
	return raiu
}

// ClearCentrePreference clears the value of the "CentrePreference" field.
func (raiu *ReversalApplicationIPUpdate) ClearCentrePreference() *ReversalApplicationIPUpdate {
	raiu.mutation.ClearCentrePreference()
	return raiu
}

// SetSignature sets the "Signature" field.
func (raiu *ReversalApplicationIPUpdate) SetSignature(s string) *ReversalApplicationIPUpdate {
	raiu.mutation.SetSignature(s)
	return raiu
}

// SetNillableSignature sets the "Signature" field if the given value is not nil.
func (raiu *ReversalApplicationIPUpdate) SetNillableSignature(s *string) *ReversalApplicationIPUpdate {
	if s != nil {
		raiu.SetSignature(*s)
	}
	return raiu
}

// ClearSignature clears the value of the "Signature" field.
func (raiu *ReversalApplicationIPUpdate) ClearSignature() *ReversalApplicationIPUpdate {
	raiu.mutation.ClearSignature()
	return raiu
}

// SetPhoto sets the "Photo" field.
func (raiu *ReversalApplicationIPUpdate) SetPhoto(s string) *ReversalApplicationIPUpdate {
	raiu.mutation.SetPhoto(s)
	return raiu
}

// SetNillablePhoto sets the "Photo" field if the given value is not nil.
func (raiu *ReversalApplicationIPUpdate) SetNillablePhoto(s *string) *ReversalApplicationIPUpdate {
	if s != nil {
		raiu.SetPhoto(*s)
	}
	return raiu
}

// ClearPhoto clears the value of the "Photo" field.
func (raiu *ReversalApplicationIPUpdate) ClearPhoto() *ReversalApplicationIPUpdate {
	raiu.mutation.ClearPhoto()
	return raiu
}

// SetApplicationStatus sets the "ApplicationStatus" field.
func (raiu *ReversalApplicationIPUpdate) SetApplicationStatus(s string) *ReversalApplicationIPUpdate {
	raiu.mutation.SetApplicationStatus(s)
	return raiu
}

// SetNillableApplicationStatus sets the "ApplicationStatus" field if the given value is not nil.
func (raiu *ReversalApplicationIPUpdate) SetNillableApplicationStatus(s *string) *ReversalApplicationIPUpdate {
	if s != nil {
		raiu.SetApplicationStatus(*s)
	}
	return raiu
}

// ClearApplicationStatus clears the value of the "ApplicationStatus" field.
func (raiu *ReversalApplicationIPUpdate) ClearApplicationStatus() *ReversalApplicationIPUpdate {
	raiu.mutation.ClearApplicationStatus()
	return raiu
}

// SetReversalApplnSubmittedDate sets the "ReversalApplnSubmittedDate" field.
func (raiu *ReversalApplicationIPUpdate) SetReversalApplnSubmittedDate(t time.Time) *ReversalApplicationIPUpdate {
	raiu.mutation.SetReversalApplnSubmittedDate(t)
	return raiu
}

// SetNillableReversalApplnSubmittedDate sets the "ReversalApplnSubmittedDate" field if the given value is not nil.
func (raiu *ReversalApplicationIPUpdate) SetNillableReversalApplnSubmittedDate(t *time.Time) *ReversalApplicationIPUpdate {
	if t != nil {
		raiu.SetReversalApplnSubmittedDate(*t)
	}
	return raiu
}

// ClearReversalApplnSubmittedDate clears the value of the "ReversalApplnSubmittedDate" field.
func (raiu *ReversalApplicationIPUpdate) ClearReversalApplnSubmittedDate() *ReversalApplicationIPUpdate {
	raiu.mutation.ClearReversalApplnSubmittedDate()
	return raiu
}

// SetVARemarks sets the "VA_Remarks" field.
func (raiu *ReversalApplicationIPUpdate) SetVARemarks(s string) *ReversalApplicationIPUpdate {
	raiu.mutation.SetVARemarks(s)
	return raiu
}

// SetNillableVARemarks sets the "VA_Remarks" field if the given value is not nil.
func (raiu *ReversalApplicationIPUpdate) SetNillableVARemarks(s *string) *ReversalApplicationIPUpdate {
	if s != nil {
		raiu.SetVARemarks(*s)
	}
	return raiu
}

// ClearVARemarks clears the value of the "VA_Remarks" field.
func (raiu *ReversalApplicationIPUpdate) ClearVARemarks() *ReversalApplicationIPUpdate {
	raiu.mutation.ClearVARemarks()
	return raiu
}

// SetVAUserName sets the "VA_UserName" field.
func (raiu *ReversalApplicationIPUpdate) SetVAUserName(s string) *ReversalApplicationIPUpdate {
	raiu.mutation.SetVAUserName(s)
	return raiu
}

// SetNillableVAUserName sets the "VA_UserName" field if the given value is not nil.
func (raiu *ReversalApplicationIPUpdate) SetNillableVAUserName(s *string) *ReversalApplicationIPUpdate {
	if s != nil {
		raiu.SetVAUserName(*s)
	}
	return raiu
}

// ClearVAUserName clears the value of the "VA_UserName" field.
func (raiu *ReversalApplicationIPUpdate) ClearVAUserName() *ReversalApplicationIPUpdate {
	raiu.mutation.ClearVAUserName()
	return raiu
}

// SetVADate sets the "VA_Date" field.
func (raiu *ReversalApplicationIPUpdate) SetVADate(t time.Time) *ReversalApplicationIPUpdate {
	raiu.mutation.SetVADate(t)
	return raiu
}

// SetNillableVADate sets the "VA_Date" field if the given value is not nil.
func (raiu *ReversalApplicationIPUpdate) SetNillableVADate(t *time.Time) *ReversalApplicationIPUpdate {
	if t != nil {
		raiu.SetVADate(*t)
	}
	return raiu
}

// ClearVADate clears the value of the "VA_Date" field.
func (raiu *ReversalApplicationIPUpdate) ClearVADate() *ReversalApplicationIPUpdate {
	raiu.mutation.ClearVADate()
	return raiu
}

// SetCARemarks sets the "CA_Remarks" field.
func (raiu *ReversalApplicationIPUpdate) SetCARemarks(s string) *ReversalApplicationIPUpdate {
	raiu.mutation.SetCARemarks(s)
	return raiu
}

// SetNillableCARemarks sets the "CA_Remarks" field if the given value is not nil.
func (raiu *ReversalApplicationIPUpdate) SetNillableCARemarks(s *string) *ReversalApplicationIPUpdate {
	if s != nil {
		raiu.SetCARemarks(*s)
	}
	return raiu
}

// ClearCARemarks clears the value of the "CA_Remarks" field.
func (raiu *ReversalApplicationIPUpdate) ClearCARemarks() *ReversalApplicationIPUpdate {
	raiu.mutation.ClearCARemarks()
	return raiu
}

// SetCAUserName sets the "CA_UserName" field.
func (raiu *ReversalApplicationIPUpdate) SetCAUserName(s string) *ReversalApplicationIPUpdate {
	raiu.mutation.SetCAUserName(s)
	return raiu
}

// SetNillableCAUserName sets the "CA_UserName" field if the given value is not nil.
func (raiu *ReversalApplicationIPUpdate) SetNillableCAUserName(s *string) *ReversalApplicationIPUpdate {
	if s != nil {
		raiu.SetCAUserName(*s)
	}
	return raiu
}

// ClearCAUserName clears the value of the "CA_UserName" field.
func (raiu *ReversalApplicationIPUpdate) ClearCAUserName() *ReversalApplicationIPUpdate {
	raiu.mutation.ClearCAUserName()
	return raiu
}

// SetCADate sets the "CA_Date" field.
func (raiu *ReversalApplicationIPUpdate) SetCADate(t time.Time) *ReversalApplicationIPUpdate {
	raiu.mutation.SetCADate(t)
	return raiu
}

// SetNillableCADate sets the "CA_Date" field if the given value is not nil.
func (raiu *ReversalApplicationIPUpdate) SetNillableCADate(t *time.Time) *ReversalApplicationIPUpdate {
	if t != nil {
		raiu.SetCADate(*t)
	}
	return raiu
}

// ClearCADate clears the value of the "CA_Date" field.
func (raiu *ReversalApplicationIPUpdate) ClearCADate() *ReversalApplicationIPUpdate {
	raiu.mutation.ClearCADate()
	return raiu
}

// SetAppliactionRemarks sets the "AppliactionRemarks" field.
func (raiu *ReversalApplicationIPUpdate) SetAppliactionRemarks(s string) *ReversalApplicationIPUpdate {
	raiu.mutation.SetAppliactionRemarks(s)
	return raiu
}

// SetNillableAppliactionRemarks sets the "AppliactionRemarks" field if the given value is not nil.
func (raiu *ReversalApplicationIPUpdate) SetNillableAppliactionRemarks(s *string) *ReversalApplicationIPUpdate {
	if s != nil {
		raiu.SetAppliactionRemarks(*s)
	}
	return raiu
}

// ClearAppliactionRemarks clears the value of the "AppliactionRemarks" field.
func (raiu *ReversalApplicationIPUpdate) ClearAppliactionRemarks() *ReversalApplicationIPUpdate {
	raiu.mutation.ClearAppliactionRemarks()
	return raiu
}

// SetUpdatedAt sets the "UpdatedAt" field.
func (raiu *ReversalApplicationIPUpdate) SetUpdatedAt(t time.Time) *ReversalApplicationIPUpdate {
	raiu.mutation.SetUpdatedAt(t)
	return raiu
}

// SetNillableUpdatedAt sets the "UpdatedAt" field if the given value is not nil.
func (raiu *ReversalApplicationIPUpdate) SetNillableUpdatedAt(t *time.Time) *ReversalApplicationIPUpdate {
	if t != nil {
		raiu.SetUpdatedAt(*t)
	}
	return raiu
}

// ClearUpdatedAt clears the value of the "UpdatedAt" field.
func (raiu *ReversalApplicationIPUpdate) ClearUpdatedAt() *ReversalApplicationIPUpdate {
	raiu.mutation.ClearUpdatedAt()
	return raiu
}

// SetUpdatedBy sets the "UpdatedBy" field.
func (raiu *ReversalApplicationIPUpdate) SetUpdatedBy(s string) *ReversalApplicationIPUpdate {
	raiu.mutation.SetUpdatedBy(s)
	return raiu
}

// SetNillableUpdatedBy sets the "UpdatedBy" field if the given value is not nil.
func (raiu *ReversalApplicationIPUpdate) SetNillableUpdatedBy(s *string) *ReversalApplicationIPUpdate {
	if s != nil {
		raiu.SetUpdatedBy(*s)
	}
	return raiu
}

// ClearUpdatedBy clears the value of the "UpdatedBy" field.
func (raiu *ReversalApplicationIPUpdate) ClearUpdatedBy() *ReversalApplicationIPUpdate {
	raiu.mutation.ClearUpdatedBy()
	return raiu
}

// SetRoleUserCode sets the "RoleUserCode" field.
func (raiu *ReversalApplicationIPUpdate) SetRoleUserCode(i int32) *ReversalApplicationIPUpdate {
	raiu.mutation.ResetRoleUserCode()
	raiu.mutation.SetRoleUserCode(i)
	return raiu
}

// SetNillableRoleUserCode sets the "RoleUserCode" field if the given value is not nil.
func (raiu *ReversalApplicationIPUpdate) SetNillableRoleUserCode(i *int32) *ReversalApplicationIPUpdate {
	if i != nil {
		raiu.SetRoleUserCode(*i)
	}
	return raiu
}

// AddRoleUserCode adds i to the "RoleUserCode" field.
func (raiu *ReversalApplicationIPUpdate) AddRoleUserCode(i int32) *ReversalApplicationIPUpdate {
	raiu.mutation.AddRoleUserCode(i)
	return raiu
}

// ClearRoleUserCode clears the value of the "RoleUserCode" field.
func (raiu *ReversalApplicationIPUpdate) ClearRoleUserCode() *ReversalApplicationIPUpdate {
	raiu.mutation.ClearRoleUserCode()
	return raiu
}

// Mutation returns the ReversalApplicationIPMutation object of the builder.
func (raiu *ReversalApplicationIPUpdate) Mutation() *ReversalApplicationIPMutation {
	return raiu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (raiu *ReversalApplicationIPUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, raiu.sqlSave, raiu.mutation, raiu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (raiu *ReversalApplicationIPUpdate) SaveX(ctx context.Context) int {
	affected, err := raiu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (raiu *ReversalApplicationIPUpdate) Exec(ctx context.Context) error {
	_, err := raiu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (raiu *ReversalApplicationIPUpdate) ExecX(ctx context.Context) {
	if err := raiu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (raiu *ReversalApplicationIPUpdate) check() error {
	if v, ok := raiu.mutation.Gender(); ok {
		if err := reversal_application_ip.GenderValidator(v); err != nil {
			return &ValidationError{Name: "Gender", err: fmt.Errorf(`ent: validator failed for field "Reversal_Application_IP.Gender": %w`, err)}
		}
	}
	return nil
}

func (raiu *ReversalApplicationIPUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := raiu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(reversal_application_ip.Table, reversal_application_ip.Columns, sqlgraph.NewFieldSpec(reversal_application_ip.FieldID, field.TypeInt64))
	if ps := raiu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := raiu.mutation.EmployeeID(); ok {
		_spec.SetField(reversal_application_ip.FieldEmployeeID, field.TypeInt64, value)
	}
	if value, ok := raiu.mutation.AddedEmployeeID(); ok {
		_spec.AddField(reversal_application_ip.FieldEmployeeID, field.TypeInt64, value)
	}
	if raiu.mutation.EmployeeIDCleared() {
		_spec.ClearField(reversal_application_ip.FieldEmployeeID, field.TypeInt64)
	}
	if value, ok := raiu.mutation.EmployeeName(); ok {
		_spec.SetField(reversal_application_ip.FieldEmployeeName, field.TypeString, value)
	}
	if raiu.mutation.EmployeeNameCleared() {
		_spec.ClearField(reversal_application_ip.FieldEmployeeName, field.TypeString)
	}
	if value, ok := raiu.mutation.DOB(); ok {
		_spec.SetField(reversal_application_ip.FieldDOB, field.TypeString, value)
	}
	if raiu.mutation.DOBCleared() {
		_spec.ClearField(reversal_application_ip.FieldDOB, field.TypeString)
	}
	if value, ok := raiu.mutation.Gender(); ok {
		_spec.SetField(reversal_application_ip.FieldGender, field.TypeEnum, value)
	}
	if value, ok := raiu.mutation.MobileNumber(); ok {
		_spec.SetField(reversal_application_ip.FieldMobileNumber, field.TypeString, value)
	}
	if raiu.mutation.MobileNumberCleared() {
		_spec.ClearField(reversal_application_ip.FieldMobileNumber, field.TypeString)
	}
	if value, ok := raiu.mutation.EmailID(); ok {
		_spec.SetField(reversal_application_ip.FieldEmailID, field.TypeString, value)
	}
	if raiu.mutation.EmailIDCleared() {
		_spec.ClearField(reversal_application_ip.FieldEmailID, field.TypeString)
	}
	if value, ok := raiu.mutation.EmployeeCategory(); ok {
		_spec.SetField(reversal_application_ip.FieldEmployeeCategory, field.TypeString, value)
	}
	if raiu.mutation.EmployeeCategoryCleared() {
		_spec.ClearField(reversal_application_ip.FieldEmployeeCategory, field.TypeString)
	}
	if value, ok := raiu.mutation.Cadre(); ok {
		_spec.SetField(reversal_application_ip.FieldCadre, field.TypeString, value)
	}
	if raiu.mutation.CadreCleared() {
		_spec.ClearField(reversal_application_ip.FieldCadre, field.TypeString)
	}
	if value, ok := raiu.mutation.EmployeePost(); ok {
		_spec.SetField(reversal_application_ip.FieldEmployeePost, field.TypeString, value)
	}
	if raiu.mutation.EmployeePostCleared() {
		_spec.ClearField(reversal_application_ip.FieldEmployeePost, field.TypeString)
	}
	if value, ok := raiu.mutation.FacilityID(); ok {
		_spec.SetField(reversal_application_ip.FieldFacilityID, field.TypeString, value)
	}
	if raiu.mutation.FacilityIDCleared() {
		_spec.ClearField(reversal_application_ip.FieldFacilityID, field.TypeString)
	}
	if value, ok := raiu.mutation.DCCS(); ok {
		_spec.SetField(reversal_application_ip.FieldDCCS, field.TypeString, value)
	}
	if raiu.mutation.DCCSCleared() {
		_spec.ClearField(reversal_application_ip.FieldDCCS, field.TypeString)
	}
	if value, ok := raiu.mutation.DCInPresentCadre(); ok {
		_spec.SetField(reversal_application_ip.FieldDCInPresentCadre, field.TypeString, value)
	}
	if raiu.mutation.DCInPresentCadreCleared() {
		_spec.ClearField(reversal_application_ip.FieldDCInPresentCadre, field.TypeString)
	}
	if value, ok := raiu.mutation.DeputationOfficeId(); ok {
		_spec.SetField(reversal_application_ip.FieldDeputationOfficeId, field.TypeString, value)
	}
	if raiu.mutation.DeputationOfficeIdCleared() {
		_spec.ClearField(reversal_application_ip.FieldDeputationOfficeId, field.TypeString)
	}
	if value, ok := raiu.mutation.DisabilityType(); ok {
		_spec.SetField(reversal_application_ip.FieldDisabilityType, field.TypeString, value)
	}
	if raiu.mutation.DisabilityTypeCleared() {
		_spec.ClearField(reversal_application_ip.FieldDisabilityType, field.TypeString)
	}
	if value, ok := raiu.mutation.DisabilityPercentage(); ok {
		_spec.SetField(reversal_application_ip.FieldDisabilityPercentage, field.TypeString, value)
	}
	if raiu.mutation.DisabilityPercentageCleared() {
		_spec.ClearField(reversal_application_ip.FieldDisabilityPercentage, field.TypeString)
	}
	if value, ok := raiu.mutation.Education(); ok {
		_spec.SetField(reversal_application_ip.FieldEducation, field.TypeString, value)
	}
	if raiu.mutation.EducationCleared() {
		_spec.ClearField(reversal_application_ip.FieldEducation, field.TypeString)
	}
	if value, ok := raiu.mutation.ExamCodeIP(); ok {
		_spec.SetField(reversal_application_ip.FieldExamCodeIP, field.TypeInt32, value)
	}
	if value, ok := raiu.mutation.AddedExamCodeIP(); ok {
		_spec.AddField(reversal_application_ip.FieldExamCodeIP, field.TypeInt32, value)
	}
	if raiu.mutation.ExamCodeIPCleared() {
		_spec.ClearField(reversal_application_ip.FieldExamCodeIP, field.TypeInt32)
	}
	if value, ok := raiu.mutation.ExamYear(); ok {
		_spec.SetField(reversal_application_ip.FieldExamYear, field.TypeString, value)
	}
	if raiu.mutation.ExamYearCleared() {
		_spec.ClearField(reversal_application_ip.FieldExamYear, field.TypeString)
	}
	if value, ok := raiu.mutation.CentrePreference(); ok {
		_spec.SetField(reversal_application_ip.FieldCentrePreference, field.TypeString, value)
	}
	if raiu.mutation.CentrePreferenceCleared() {
		_spec.ClearField(reversal_application_ip.FieldCentrePreference, field.TypeString)
	}
	if value, ok := raiu.mutation.Signature(); ok {
		_spec.SetField(reversal_application_ip.FieldSignature, field.TypeString, value)
	}
	if raiu.mutation.SignatureCleared() {
		_spec.ClearField(reversal_application_ip.FieldSignature, field.TypeString)
	}
	if value, ok := raiu.mutation.Photo(); ok {
		_spec.SetField(reversal_application_ip.FieldPhoto, field.TypeString, value)
	}
	if raiu.mutation.PhotoCleared() {
		_spec.ClearField(reversal_application_ip.FieldPhoto, field.TypeString)
	}
	if value, ok := raiu.mutation.ApplicationStatus(); ok {
		_spec.SetField(reversal_application_ip.FieldApplicationStatus, field.TypeString, value)
	}
	if raiu.mutation.ApplicationStatusCleared() {
		_spec.ClearField(reversal_application_ip.FieldApplicationStatus, field.TypeString)
	}
	if value, ok := raiu.mutation.ReversalApplnSubmittedDate(); ok {
		_spec.SetField(reversal_application_ip.FieldReversalApplnSubmittedDate, field.TypeTime, value)
	}
	if raiu.mutation.ReversalApplnSubmittedDateCleared() {
		_spec.ClearField(reversal_application_ip.FieldReversalApplnSubmittedDate, field.TypeTime)
	}
	if value, ok := raiu.mutation.VARemarks(); ok {
		_spec.SetField(reversal_application_ip.FieldVARemarks, field.TypeString, value)
	}
	if raiu.mutation.VARemarksCleared() {
		_spec.ClearField(reversal_application_ip.FieldVARemarks, field.TypeString)
	}
	if value, ok := raiu.mutation.VAUserName(); ok {
		_spec.SetField(reversal_application_ip.FieldVAUserName, field.TypeString, value)
	}
	if raiu.mutation.VAUserNameCleared() {
		_spec.ClearField(reversal_application_ip.FieldVAUserName, field.TypeString)
	}
	if value, ok := raiu.mutation.VADate(); ok {
		_spec.SetField(reversal_application_ip.FieldVADate, field.TypeTime, value)
	}
	if raiu.mutation.VADateCleared() {
		_spec.ClearField(reversal_application_ip.FieldVADate, field.TypeTime)
	}
	if value, ok := raiu.mutation.CARemarks(); ok {
		_spec.SetField(reversal_application_ip.FieldCARemarks, field.TypeString, value)
	}
	if raiu.mutation.CARemarksCleared() {
		_spec.ClearField(reversal_application_ip.FieldCARemarks, field.TypeString)
	}
	if value, ok := raiu.mutation.CAUserName(); ok {
		_spec.SetField(reversal_application_ip.FieldCAUserName, field.TypeString, value)
	}
	if raiu.mutation.CAUserNameCleared() {
		_spec.ClearField(reversal_application_ip.FieldCAUserName, field.TypeString)
	}
	if value, ok := raiu.mutation.CADate(); ok {
		_spec.SetField(reversal_application_ip.FieldCADate, field.TypeTime, value)
	}
	if raiu.mutation.CADateCleared() {
		_spec.ClearField(reversal_application_ip.FieldCADate, field.TypeTime)
	}
	if value, ok := raiu.mutation.AppliactionRemarks(); ok {
		_spec.SetField(reversal_application_ip.FieldAppliactionRemarks, field.TypeString, value)
	}
	if raiu.mutation.AppliactionRemarksCleared() {
		_spec.ClearField(reversal_application_ip.FieldAppliactionRemarks, field.TypeString)
	}
	if value, ok := raiu.mutation.UpdatedAt(); ok {
		_spec.SetField(reversal_application_ip.FieldUpdatedAt, field.TypeTime, value)
	}
	if raiu.mutation.UpdatedAtCleared() {
		_spec.ClearField(reversal_application_ip.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := raiu.mutation.UpdatedBy(); ok {
		_spec.SetField(reversal_application_ip.FieldUpdatedBy, field.TypeString, value)
	}
	if raiu.mutation.UpdatedByCleared() {
		_spec.ClearField(reversal_application_ip.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := raiu.mutation.RoleUserCode(); ok {
		_spec.SetField(reversal_application_ip.FieldRoleUserCode, field.TypeInt32, value)
	}
	if value, ok := raiu.mutation.AddedRoleUserCode(); ok {
		_spec.AddField(reversal_application_ip.FieldRoleUserCode, field.TypeInt32, value)
	}
	if raiu.mutation.RoleUserCodeCleared() {
		_spec.ClearField(reversal_application_ip.FieldRoleUserCode, field.TypeInt32)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, raiu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{reversal_application_ip.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	raiu.mutation.done = true
	return n, nil
}

// ReversalApplicationIPUpdateOne is the builder for updating a single Reversal_Application_IP entity.
type ReversalApplicationIPUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ReversalApplicationIPMutation
}

// SetEmployeeID sets the "EmployeeID" field.
func (raiuo *ReversalApplicationIPUpdateOne) SetEmployeeID(i int64) *ReversalApplicationIPUpdateOne {
	raiuo.mutation.ResetEmployeeID()
	raiuo.mutation.SetEmployeeID(i)
	return raiuo
}

// SetNillableEmployeeID sets the "EmployeeID" field if the given value is not nil.
func (raiuo *ReversalApplicationIPUpdateOne) SetNillableEmployeeID(i *int64) *ReversalApplicationIPUpdateOne {
	if i != nil {
		raiuo.SetEmployeeID(*i)
	}
	return raiuo
}

// AddEmployeeID adds i to the "EmployeeID" field.
func (raiuo *ReversalApplicationIPUpdateOne) AddEmployeeID(i int64) *ReversalApplicationIPUpdateOne {
	raiuo.mutation.AddEmployeeID(i)
	return raiuo
}

// ClearEmployeeID clears the value of the "EmployeeID" field.
func (raiuo *ReversalApplicationIPUpdateOne) ClearEmployeeID() *ReversalApplicationIPUpdateOne {
	raiuo.mutation.ClearEmployeeID()
	return raiuo
}

// SetEmployeeName sets the "EmployeeName" field.
func (raiuo *ReversalApplicationIPUpdateOne) SetEmployeeName(s string) *ReversalApplicationIPUpdateOne {
	raiuo.mutation.SetEmployeeName(s)
	return raiuo
}

// SetNillableEmployeeName sets the "EmployeeName" field if the given value is not nil.
func (raiuo *ReversalApplicationIPUpdateOne) SetNillableEmployeeName(s *string) *ReversalApplicationIPUpdateOne {
	if s != nil {
		raiuo.SetEmployeeName(*s)
	}
	return raiuo
}

// ClearEmployeeName clears the value of the "EmployeeName" field.
func (raiuo *ReversalApplicationIPUpdateOne) ClearEmployeeName() *ReversalApplicationIPUpdateOne {
	raiuo.mutation.ClearEmployeeName()
	return raiuo
}

// SetDOB sets the "DOB" field.
func (raiuo *ReversalApplicationIPUpdateOne) SetDOB(s string) *ReversalApplicationIPUpdateOne {
	raiuo.mutation.SetDOB(s)
	return raiuo
}

// SetNillableDOB sets the "DOB" field if the given value is not nil.
func (raiuo *ReversalApplicationIPUpdateOne) SetNillableDOB(s *string) *ReversalApplicationIPUpdateOne {
	if s != nil {
		raiuo.SetDOB(*s)
	}
	return raiuo
}

// ClearDOB clears the value of the "DOB" field.
func (raiuo *ReversalApplicationIPUpdateOne) ClearDOB() *ReversalApplicationIPUpdateOne {
	raiuo.mutation.ClearDOB()
	return raiuo
}

// SetGender sets the "Gender" field.
func (raiuo *ReversalApplicationIPUpdateOne) SetGender(rai reversal_application_ip.Gender) *ReversalApplicationIPUpdateOne {
	raiuo.mutation.SetGender(rai)
	return raiuo
}

// SetMobileNumber sets the "MobileNumber" field.
func (raiuo *ReversalApplicationIPUpdateOne) SetMobileNumber(s string) *ReversalApplicationIPUpdateOne {
	raiuo.mutation.SetMobileNumber(s)
	return raiuo
}

// SetNillableMobileNumber sets the "MobileNumber" field if the given value is not nil.
func (raiuo *ReversalApplicationIPUpdateOne) SetNillableMobileNumber(s *string) *ReversalApplicationIPUpdateOne {
	if s != nil {
		raiuo.SetMobileNumber(*s)
	}
	return raiuo
}

// ClearMobileNumber clears the value of the "MobileNumber" field.
func (raiuo *ReversalApplicationIPUpdateOne) ClearMobileNumber() *ReversalApplicationIPUpdateOne {
	raiuo.mutation.ClearMobileNumber()
	return raiuo
}

// SetEmailID sets the "EmailID" field.
func (raiuo *ReversalApplicationIPUpdateOne) SetEmailID(s string) *ReversalApplicationIPUpdateOne {
	raiuo.mutation.SetEmailID(s)
	return raiuo
}

// SetNillableEmailID sets the "EmailID" field if the given value is not nil.
func (raiuo *ReversalApplicationIPUpdateOne) SetNillableEmailID(s *string) *ReversalApplicationIPUpdateOne {
	if s != nil {
		raiuo.SetEmailID(*s)
	}
	return raiuo
}

// ClearEmailID clears the value of the "EmailID" field.
func (raiuo *ReversalApplicationIPUpdateOne) ClearEmailID() *ReversalApplicationIPUpdateOne {
	raiuo.mutation.ClearEmailID()
	return raiuo
}

// SetEmployeeCategory sets the "EmployeeCategory" field.
func (raiuo *ReversalApplicationIPUpdateOne) SetEmployeeCategory(s string) *ReversalApplicationIPUpdateOne {
	raiuo.mutation.SetEmployeeCategory(s)
	return raiuo
}

// SetNillableEmployeeCategory sets the "EmployeeCategory" field if the given value is not nil.
func (raiuo *ReversalApplicationIPUpdateOne) SetNillableEmployeeCategory(s *string) *ReversalApplicationIPUpdateOne {
	if s != nil {
		raiuo.SetEmployeeCategory(*s)
	}
	return raiuo
}

// ClearEmployeeCategory clears the value of the "EmployeeCategory" field.
func (raiuo *ReversalApplicationIPUpdateOne) ClearEmployeeCategory() *ReversalApplicationIPUpdateOne {
	raiuo.mutation.ClearEmployeeCategory()
	return raiuo
}

// SetCadre sets the "Cadre" field.
func (raiuo *ReversalApplicationIPUpdateOne) SetCadre(s string) *ReversalApplicationIPUpdateOne {
	raiuo.mutation.SetCadre(s)
	return raiuo
}

// SetNillableCadre sets the "Cadre" field if the given value is not nil.
func (raiuo *ReversalApplicationIPUpdateOne) SetNillableCadre(s *string) *ReversalApplicationIPUpdateOne {
	if s != nil {
		raiuo.SetCadre(*s)
	}
	return raiuo
}

// ClearCadre clears the value of the "Cadre" field.
func (raiuo *ReversalApplicationIPUpdateOne) ClearCadre() *ReversalApplicationIPUpdateOne {
	raiuo.mutation.ClearCadre()
	return raiuo
}

// SetEmployeePost sets the "EmployeePost" field.
func (raiuo *ReversalApplicationIPUpdateOne) SetEmployeePost(s string) *ReversalApplicationIPUpdateOne {
	raiuo.mutation.SetEmployeePost(s)
	return raiuo
}

// SetNillableEmployeePost sets the "EmployeePost" field if the given value is not nil.
func (raiuo *ReversalApplicationIPUpdateOne) SetNillableEmployeePost(s *string) *ReversalApplicationIPUpdateOne {
	if s != nil {
		raiuo.SetEmployeePost(*s)
	}
	return raiuo
}

// ClearEmployeePost clears the value of the "EmployeePost" field.
func (raiuo *ReversalApplicationIPUpdateOne) ClearEmployeePost() *ReversalApplicationIPUpdateOne {
	raiuo.mutation.ClearEmployeePost()
	return raiuo
}

// SetFacilityID sets the "FacilityID" field.
func (raiuo *ReversalApplicationIPUpdateOne) SetFacilityID(s string) *ReversalApplicationIPUpdateOne {
	raiuo.mutation.SetFacilityID(s)
	return raiuo
}

// SetNillableFacilityID sets the "FacilityID" field if the given value is not nil.
func (raiuo *ReversalApplicationIPUpdateOne) SetNillableFacilityID(s *string) *ReversalApplicationIPUpdateOne {
	if s != nil {
		raiuo.SetFacilityID(*s)
	}
	return raiuo
}

// ClearFacilityID clears the value of the "FacilityID" field.
func (raiuo *ReversalApplicationIPUpdateOne) ClearFacilityID() *ReversalApplicationIPUpdateOne {
	raiuo.mutation.ClearFacilityID()
	return raiuo
}

// SetDCCS sets the "DCCS" field.
func (raiuo *ReversalApplicationIPUpdateOne) SetDCCS(s string) *ReversalApplicationIPUpdateOne {
	raiuo.mutation.SetDCCS(s)
	return raiuo
}

// SetNillableDCCS sets the "DCCS" field if the given value is not nil.
func (raiuo *ReversalApplicationIPUpdateOne) SetNillableDCCS(s *string) *ReversalApplicationIPUpdateOne {
	if s != nil {
		raiuo.SetDCCS(*s)
	}
	return raiuo
}

// ClearDCCS clears the value of the "DCCS" field.
func (raiuo *ReversalApplicationIPUpdateOne) ClearDCCS() *ReversalApplicationIPUpdateOne {
	raiuo.mutation.ClearDCCS()
	return raiuo
}

// SetDCInPresentCadre sets the "DCInPresentCadre" field.
func (raiuo *ReversalApplicationIPUpdateOne) SetDCInPresentCadre(s string) *ReversalApplicationIPUpdateOne {
	raiuo.mutation.SetDCInPresentCadre(s)
	return raiuo
}

// SetNillableDCInPresentCadre sets the "DCInPresentCadre" field if the given value is not nil.
func (raiuo *ReversalApplicationIPUpdateOne) SetNillableDCInPresentCadre(s *string) *ReversalApplicationIPUpdateOne {
	if s != nil {
		raiuo.SetDCInPresentCadre(*s)
	}
	return raiuo
}

// ClearDCInPresentCadre clears the value of the "DCInPresentCadre" field.
func (raiuo *ReversalApplicationIPUpdateOne) ClearDCInPresentCadre() *ReversalApplicationIPUpdateOne {
	raiuo.mutation.ClearDCInPresentCadre()
	return raiuo
}

// SetDeputationOfficeId sets the "DeputationOfficeId" field.
func (raiuo *ReversalApplicationIPUpdateOne) SetDeputationOfficeId(s string) *ReversalApplicationIPUpdateOne {
	raiuo.mutation.SetDeputationOfficeId(s)
	return raiuo
}

// SetNillableDeputationOfficeId sets the "DeputationOfficeId" field if the given value is not nil.
func (raiuo *ReversalApplicationIPUpdateOne) SetNillableDeputationOfficeId(s *string) *ReversalApplicationIPUpdateOne {
	if s != nil {
		raiuo.SetDeputationOfficeId(*s)
	}
	return raiuo
}

// ClearDeputationOfficeId clears the value of the "DeputationOfficeId" field.
func (raiuo *ReversalApplicationIPUpdateOne) ClearDeputationOfficeId() *ReversalApplicationIPUpdateOne {
	raiuo.mutation.ClearDeputationOfficeId()
	return raiuo
}

// SetDisabilityType sets the "DisabilityType" field.
func (raiuo *ReversalApplicationIPUpdateOne) SetDisabilityType(s string) *ReversalApplicationIPUpdateOne {
	raiuo.mutation.SetDisabilityType(s)
	return raiuo
}

// SetNillableDisabilityType sets the "DisabilityType" field if the given value is not nil.
func (raiuo *ReversalApplicationIPUpdateOne) SetNillableDisabilityType(s *string) *ReversalApplicationIPUpdateOne {
	if s != nil {
		raiuo.SetDisabilityType(*s)
	}
	return raiuo
}

// ClearDisabilityType clears the value of the "DisabilityType" field.
func (raiuo *ReversalApplicationIPUpdateOne) ClearDisabilityType() *ReversalApplicationIPUpdateOne {
	raiuo.mutation.ClearDisabilityType()
	return raiuo
}

// SetDisabilityPercentage sets the "DisabilityPercentage" field.
func (raiuo *ReversalApplicationIPUpdateOne) SetDisabilityPercentage(s string) *ReversalApplicationIPUpdateOne {
	raiuo.mutation.SetDisabilityPercentage(s)
	return raiuo
}

// SetNillableDisabilityPercentage sets the "DisabilityPercentage" field if the given value is not nil.
func (raiuo *ReversalApplicationIPUpdateOne) SetNillableDisabilityPercentage(s *string) *ReversalApplicationIPUpdateOne {
	if s != nil {
		raiuo.SetDisabilityPercentage(*s)
	}
	return raiuo
}

// ClearDisabilityPercentage clears the value of the "DisabilityPercentage" field.
func (raiuo *ReversalApplicationIPUpdateOne) ClearDisabilityPercentage() *ReversalApplicationIPUpdateOne {
	raiuo.mutation.ClearDisabilityPercentage()
	return raiuo
}

// SetEducation sets the "Education" field.
func (raiuo *ReversalApplicationIPUpdateOne) SetEducation(s string) *ReversalApplicationIPUpdateOne {
	raiuo.mutation.SetEducation(s)
	return raiuo
}

// SetNillableEducation sets the "Education" field if the given value is not nil.
func (raiuo *ReversalApplicationIPUpdateOne) SetNillableEducation(s *string) *ReversalApplicationIPUpdateOne {
	if s != nil {
		raiuo.SetEducation(*s)
	}
	return raiuo
}

// ClearEducation clears the value of the "Education" field.
func (raiuo *ReversalApplicationIPUpdateOne) ClearEducation() *ReversalApplicationIPUpdateOne {
	raiuo.mutation.ClearEducation()
	return raiuo
}

// SetExamCodeIP sets the "ExamCodeIP" field.
func (raiuo *ReversalApplicationIPUpdateOne) SetExamCodeIP(i int32) *ReversalApplicationIPUpdateOne {
	raiuo.mutation.ResetExamCodeIP()
	raiuo.mutation.SetExamCodeIP(i)
	return raiuo
}

// SetNillableExamCodeIP sets the "ExamCodeIP" field if the given value is not nil.
func (raiuo *ReversalApplicationIPUpdateOne) SetNillableExamCodeIP(i *int32) *ReversalApplicationIPUpdateOne {
	if i != nil {
		raiuo.SetExamCodeIP(*i)
	}
	return raiuo
}

// AddExamCodeIP adds i to the "ExamCodeIP" field.
func (raiuo *ReversalApplicationIPUpdateOne) AddExamCodeIP(i int32) *ReversalApplicationIPUpdateOne {
	raiuo.mutation.AddExamCodeIP(i)
	return raiuo
}

// ClearExamCodeIP clears the value of the "ExamCodeIP" field.
func (raiuo *ReversalApplicationIPUpdateOne) ClearExamCodeIP() *ReversalApplicationIPUpdateOne {
	raiuo.mutation.ClearExamCodeIP()
	return raiuo
}

// SetExamYear sets the "ExamYear" field.
func (raiuo *ReversalApplicationIPUpdateOne) SetExamYear(s string) *ReversalApplicationIPUpdateOne {
	raiuo.mutation.SetExamYear(s)
	return raiuo
}

// SetNillableExamYear sets the "ExamYear" field if the given value is not nil.
func (raiuo *ReversalApplicationIPUpdateOne) SetNillableExamYear(s *string) *ReversalApplicationIPUpdateOne {
	if s != nil {
		raiuo.SetExamYear(*s)
	}
	return raiuo
}

// ClearExamYear clears the value of the "ExamYear" field.
func (raiuo *ReversalApplicationIPUpdateOne) ClearExamYear() *ReversalApplicationIPUpdateOne {
	raiuo.mutation.ClearExamYear()
	return raiuo
}

// SetCentrePreference sets the "CentrePreference" field.
func (raiuo *ReversalApplicationIPUpdateOne) SetCentrePreference(s string) *ReversalApplicationIPUpdateOne {
	raiuo.mutation.SetCentrePreference(s)
	return raiuo
}

// SetNillableCentrePreference sets the "CentrePreference" field if the given value is not nil.
func (raiuo *ReversalApplicationIPUpdateOne) SetNillableCentrePreference(s *string) *ReversalApplicationIPUpdateOne {
	if s != nil {
		raiuo.SetCentrePreference(*s)
	}
	return raiuo
}

// ClearCentrePreference clears the value of the "CentrePreference" field.
func (raiuo *ReversalApplicationIPUpdateOne) ClearCentrePreference() *ReversalApplicationIPUpdateOne {
	raiuo.mutation.ClearCentrePreference()
	return raiuo
}

// SetSignature sets the "Signature" field.
func (raiuo *ReversalApplicationIPUpdateOne) SetSignature(s string) *ReversalApplicationIPUpdateOne {
	raiuo.mutation.SetSignature(s)
	return raiuo
}

// SetNillableSignature sets the "Signature" field if the given value is not nil.
func (raiuo *ReversalApplicationIPUpdateOne) SetNillableSignature(s *string) *ReversalApplicationIPUpdateOne {
	if s != nil {
		raiuo.SetSignature(*s)
	}
	return raiuo
}

// ClearSignature clears the value of the "Signature" field.
func (raiuo *ReversalApplicationIPUpdateOne) ClearSignature() *ReversalApplicationIPUpdateOne {
	raiuo.mutation.ClearSignature()
	return raiuo
}

// SetPhoto sets the "Photo" field.
func (raiuo *ReversalApplicationIPUpdateOne) SetPhoto(s string) *ReversalApplicationIPUpdateOne {
	raiuo.mutation.SetPhoto(s)
	return raiuo
}

// SetNillablePhoto sets the "Photo" field if the given value is not nil.
func (raiuo *ReversalApplicationIPUpdateOne) SetNillablePhoto(s *string) *ReversalApplicationIPUpdateOne {
	if s != nil {
		raiuo.SetPhoto(*s)
	}
	return raiuo
}

// ClearPhoto clears the value of the "Photo" field.
func (raiuo *ReversalApplicationIPUpdateOne) ClearPhoto() *ReversalApplicationIPUpdateOne {
	raiuo.mutation.ClearPhoto()
	return raiuo
}

// SetApplicationStatus sets the "ApplicationStatus" field.
func (raiuo *ReversalApplicationIPUpdateOne) SetApplicationStatus(s string) *ReversalApplicationIPUpdateOne {
	raiuo.mutation.SetApplicationStatus(s)
	return raiuo
}

// SetNillableApplicationStatus sets the "ApplicationStatus" field if the given value is not nil.
func (raiuo *ReversalApplicationIPUpdateOne) SetNillableApplicationStatus(s *string) *ReversalApplicationIPUpdateOne {
	if s != nil {
		raiuo.SetApplicationStatus(*s)
	}
	return raiuo
}

// ClearApplicationStatus clears the value of the "ApplicationStatus" field.
func (raiuo *ReversalApplicationIPUpdateOne) ClearApplicationStatus() *ReversalApplicationIPUpdateOne {
	raiuo.mutation.ClearApplicationStatus()
	return raiuo
}

// SetReversalApplnSubmittedDate sets the "ReversalApplnSubmittedDate" field.
func (raiuo *ReversalApplicationIPUpdateOne) SetReversalApplnSubmittedDate(t time.Time) *ReversalApplicationIPUpdateOne {
	raiuo.mutation.SetReversalApplnSubmittedDate(t)
	return raiuo
}

// SetNillableReversalApplnSubmittedDate sets the "ReversalApplnSubmittedDate" field if the given value is not nil.
func (raiuo *ReversalApplicationIPUpdateOne) SetNillableReversalApplnSubmittedDate(t *time.Time) *ReversalApplicationIPUpdateOne {
	if t != nil {
		raiuo.SetReversalApplnSubmittedDate(*t)
	}
	return raiuo
}

// ClearReversalApplnSubmittedDate clears the value of the "ReversalApplnSubmittedDate" field.
func (raiuo *ReversalApplicationIPUpdateOne) ClearReversalApplnSubmittedDate() *ReversalApplicationIPUpdateOne {
	raiuo.mutation.ClearReversalApplnSubmittedDate()
	return raiuo
}

// SetVARemarks sets the "VA_Remarks" field.
func (raiuo *ReversalApplicationIPUpdateOne) SetVARemarks(s string) *ReversalApplicationIPUpdateOne {
	raiuo.mutation.SetVARemarks(s)
	return raiuo
}

// SetNillableVARemarks sets the "VA_Remarks" field if the given value is not nil.
func (raiuo *ReversalApplicationIPUpdateOne) SetNillableVARemarks(s *string) *ReversalApplicationIPUpdateOne {
	if s != nil {
		raiuo.SetVARemarks(*s)
	}
	return raiuo
}

// ClearVARemarks clears the value of the "VA_Remarks" field.
func (raiuo *ReversalApplicationIPUpdateOne) ClearVARemarks() *ReversalApplicationIPUpdateOne {
	raiuo.mutation.ClearVARemarks()
	return raiuo
}

// SetVAUserName sets the "VA_UserName" field.
func (raiuo *ReversalApplicationIPUpdateOne) SetVAUserName(s string) *ReversalApplicationIPUpdateOne {
	raiuo.mutation.SetVAUserName(s)
	return raiuo
}

// SetNillableVAUserName sets the "VA_UserName" field if the given value is not nil.
func (raiuo *ReversalApplicationIPUpdateOne) SetNillableVAUserName(s *string) *ReversalApplicationIPUpdateOne {
	if s != nil {
		raiuo.SetVAUserName(*s)
	}
	return raiuo
}

// ClearVAUserName clears the value of the "VA_UserName" field.
func (raiuo *ReversalApplicationIPUpdateOne) ClearVAUserName() *ReversalApplicationIPUpdateOne {
	raiuo.mutation.ClearVAUserName()
	return raiuo
}

// SetVADate sets the "VA_Date" field.
func (raiuo *ReversalApplicationIPUpdateOne) SetVADate(t time.Time) *ReversalApplicationIPUpdateOne {
	raiuo.mutation.SetVADate(t)
	return raiuo
}

// SetNillableVADate sets the "VA_Date" field if the given value is not nil.
func (raiuo *ReversalApplicationIPUpdateOne) SetNillableVADate(t *time.Time) *ReversalApplicationIPUpdateOne {
	if t != nil {
		raiuo.SetVADate(*t)
	}
	return raiuo
}

// ClearVADate clears the value of the "VA_Date" field.
func (raiuo *ReversalApplicationIPUpdateOne) ClearVADate() *ReversalApplicationIPUpdateOne {
	raiuo.mutation.ClearVADate()
	return raiuo
}

// SetCARemarks sets the "CA_Remarks" field.
func (raiuo *ReversalApplicationIPUpdateOne) SetCARemarks(s string) *ReversalApplicationIPUpdateOne {
	raiuo.mutation.SetCARemarks(s)
	return raiuo
}

// SetNillableCARemarks sets the "CA_Remarks" field if the given value is not nil.
func (raiuo *ReversalApplicationIPUpdateOne) SetNillableCARemarks(s *string) *ReversalApplicationIPUpdateOne {
	if s != nil {
		raiuo.SetCARemarks(*s)
	}
	return raiuo
}

// ClearCARemarks clears the value of the "CA_Remarks" field.
func (raiuo *ReversalApplicationIPUpdateOne) ClearCARemarks() *ReversalApplicationIPUpdateOne {
	raiuo.mutation.ClearCARemarks()
	return raiuo
}

// SetCAUserName sets the "CA_UserName" field.
func (raiuo *ReversalApplicationIPUpdateOne) SetCAUserName(s string) *ReversalApplicationIPUpdateOne {
	raiuo.mutation.SetCAUserName(s)
	return raiuo
}

// SetNillableCAUserName sets the "CA_UserName" field if the given value is not nil.
func (raiuo *ReversalApplicationIPUpdateOne) SetNillableCAUserName(s *string) *ReversalApplicationIPUpdateOne {
	if s != nil {
		raiuo.SetCAUserName(*s)
	}
	return raiuo
}

// ClearCAUserName clears the value of the "CA_UserName" field.
func (raiuo *ReversalApplicationIPUpdateOne) ClearCAUserName() *ReversalApplicationIPUpdateOne {
	raiuo.mutation.ClearCAUserName()
	return raiuo
}

// SetCADate sets the "CA_Date" field.
func (raiuo *ReversalApplicationIPUpdateOne) SetCADate(t time.Time) *ReversalApplicationIPUpdateOne {
	raiuo.mutation.SetCADate(t)
	return raiuo
}

// SetNillableCADate sets the "CA_Date" field if the given value is not nil.
func (raiuo *ReversalApplicationIPUpdateOne) SetNillableCADate(t *time.Time) *ReversalApplicationIPUpdateOne {
	if t != nil {
		raiuo.SetCADate(*t)
	}
	return raiuo
}

// ClearCADate clears the value of the "CA_Date" field.
func (raiuo *ReversalApplicationIPUpdateOne) ClearCADate() *ReversalApplicationIPUpdateOne {
	raiuo.mutation.ClearCADate()
	return raiuo
}

// SetAppliactionRemarks sets the "AppliactionRemarks" field.
func (raiuo *ReversalApplicationIPUpdateOne) SetAppliactionRemarks(s string) *ReversalApplicationIPUpdateOne {
	raiuo.mutation.SetAppliactionRemarks(s)
	return raiuo
}

// SetNillableAppliactionRemarks sets the "AppliactionRemarks" field if the given value is not nil.
func (raiuo *ReversalApplicationIPUpdateOne) SetNillableAppliactionRemarks(s *string) *ReversalApplicationIPUpdateOne {
	if s != nil {
		raiuo.SetAppliactionRemarks(*s)
	}
	return raiuo
}

// ClearAppliactionRemarks clears the value of the "AppliactionRemarks" field.
func (raiuo *ReversalApplicationIPUpdateOne) ClearAppliactionRemarks() *ReversalApplicationIPUpdateOne {
	raiuo.mutation.ClearAppliactionRemarks()
	return raiuo
}

// SetUpdatedAt sets the "UpdatedAt" field.
func (raiuo *ReversalApplicationIPUpdateOne) SetUpdatedAt(t time.Time) *ReversalApplicationIPUpdateOne {
	raiuo.mutation.SetUpdatedAt(t)
	return raiuo
}

// SetNillableUpdatedAt sets the "UpdatedAt" field if the given value is not nil.
func (raiuo *ReversalApplicationIPUpdateOne) SetNillableUpdatedAt(t *time.Time) *ReversalApplicationIPUpdateOne {
	if t != nil {
		raiuo.SetUpdatedAt(*t)
	}
	return raiuo
}

// ClearUpdatedAt clears the value of the "UpdatedAt" field.
func (raiuo *ReversalApplicationIPUpdateOne) ClearUpdatedAt() *ReversalApplicationIPUpdateOne {
	raiuo.mutation.ClearUpdatedAt()
	return raiuo
}

// SetUpdatedBy sets the "UpdatedBy" field.
func (raiuo *ReversalApplicationIPUpdateOne) SetUpdatedBy(s string) *ReversalApplicationIPUpdateOne {
	raiuo.mutation.SetUpdatedBy(s)
	return raiuo
}

// SetNillableUpdatedBy sets the "UpdatedBy" field if the given value is not nil.
func (raiuo *ReversalApplicationIPUpdateOne) SetNillableUpdatedBy(s *string) *ReversalApplicationIPUpdateOne {
	if s != nil {
		raiuo.SetUpdatedBy(*s)
	}
	return raiuo
}

// ClearUpdatedBy clears the value of the "UpdatedBy" field.
func (raiuo *ReversalApplicationIPUpdateOne) ClearUpdatedBy() *ReversalApplicationIPUpdateOne {
	raiuo.mutation.ClearUpdatedBy()
	return raiuo
}

// SetRoleUserCode sets the "RoleUserCode" field.
func (raiuo *ReversalApplicationIPUpdateOne) SetRoleUserCode(i int32) *ReversalApplicationIPUpdateOne {
	raiuo.mutation.ResetRoleUserCode()
	raiuo.mutation.SetRoleUserCode(i)
	return raiuo
}

// SetNillableRoleUserCode sets the "RoleUserCode" field if the given value is not nil.
func (raiuo *ReversalApplicationIPUpdateOne) SetNillableRoleUserCode(i *int32) *ReversalApplicationIPUpdateOne {
	if i != nil {
		raiuo.SetRoleUserCode(*i)
	}
	return raiuo
}

// AddRoleUserCode adds i to the "RoleUserCode" field.
func (raiuo *ReversalApplicationIPUpdateOne) AddRoleUserCode(i int32) *ReversalApplicationIPUpdateOne {
	raiuo.mutation.AddRoleUserCode(i)
	return raiuo
}

// ClearRoleUserCode clears the value of the "RoleUserCode" field.
func (raiuo *ReversalApplicationIPUpdateOne) ClearRoleUserCode() *ReversalApplicationIPUpdateOne {
	raiuo.mutation.ClearRoleUserCode()
	return raiuo
}

// Mutation returns the ReversalApplicationIPMutation object of the builder.
func (raiuo *ReversalApplicationIPUpdateOne) Mutation() *ReversalApplicationIPMutation {
	return raiuo.mutation
}

// Where appends a list predicates to the ReversalApplicationIPUpdate builder.
func (raiuo *ReversalApplicationIPUpdateOne) Where(ps ...predicate.Reversal_Application_IP) *ReversalApplicationIPUpdateOne {
	raiuo.mutation.Where(ps...)
	return raiuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (raiuo *ReversalApplicationIPUpdateOne) Select(field string, fields ...string) *ReversalApplicationIPUpdateOne {
	raiuo.fields = append([]string{field}, fields...)
	return raiuo
}

// Save executes the query and returns the updated Reversal_Application_IP entity.
func (raiuo *ReversalApplicationIPUpdateOne) Save(ctx context.Context) (*Reversal_Application_IP, error) {
	return withHooks(ctx, raiuo.sqlSave, raiuo.mutation, raiuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (raiuo *ReversalApplicationIPUpdateOne) SaveX(ctx context.Context) *Reversal_Application_IP {
	node, err := raiuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (raiuo *ReversalApplicationIPUpdateOne) Exec(ctx context.Context) error {
	_, err := raiuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (raiuo *ReversalApplicationIPUpdateOne) ExecX(ctx context.Context) {
	if err := raiuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (raiuo *ReversalApplicationIPUpdateOne) check() error {
	if v, ok := raiuo.mutation.Gender(); ok {
		if err := reversal_application_ip.GenderValidator(v); err != nil {
			return &ValidationError{Name: "Gender", err: fmt.Errorf(`ent: validator failed for field "Reversal_Application_IP.Gender": %w`, err)}
		}
	}
	return nil
}

func (raiuo *ReversalApplicationIPUpdateOne) sqlSave(ctx context.Context) (_node *Reversal_Application_IP, err error) {
	if err := raiuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(reversal_application_ip.Table, reversal_application_ip.Columns, sqlgraph.NewFieldSpec(reversal_application_ip.FieldID, field.TypeInt64))
	id, ok := raiuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Reversal_Application_IP.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := raiuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, reversal_application_ip.FieldID)
		for _, f := range fields {
			if !reversal_application_ip.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != reversal_application_ip.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := raiuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := raiuo.mutation.EmployeeID(); ok {
		_spec.SetField(reversal_application_ip.FieldEmployeeID, field.TypeInt64, value)
	}
	if value, ok := raiuo.mutation.AddedEmployeeID(); ok {
		_spec.AddField(reversal_application_ip.FieldEmployeeID, field.TypeInt64, value)
	}
	if raiuo.mutation.EmployeeIDCleared() {
		_spec.ClearField(reversal_application_ip.FieldEmployeeID, field.TypeInt64)
	}
	if value, ok := raiuo.mutation.EmployeeName(); ok {
		_spec.SetField(reversal_application_ip.FieldEmployeeName, field.TypeString, value)
	}
	if raiuo.mutation.EmployeeNameCleared() {
		_spec.ClearField(reversal_application_ip.FieldEmployeeName, field.TypeString)
	}
	if value, ok := raiuo.mutation.DOB(); ok {
		_spec.SetField(reversal_application_ip.FieldDOB, field.TypeString, value)
	}
	if raiuo.mutation.DOBCleared() {
		_spec.ClearField(reversal_application_ip.FieldDOB, field.TypeString)
	}
	if value, ok := raiuo.mutation.Gender(); ok {
		_spec.SetField(reversal_application_ip.FieldGender, field.TypeEnum, value)
	}
	if value, ok := raiuo.mutation.MobileNumber(); ok {
		_spec.SetField(reversal_application_ip.FieldMobileNumber, field.TypeString, value)
	}
	if raiuo.mutation.MobileNumberCleared() {
		_spec.ClearField(reversal_application_ip.FieldMobileNumber, field.TypeString)
	}
	if value, ok := raiuo.mutation.EmailID(); ok {
		_spec.SetField(reversal_application_ip.FieldEmailID, field.TypeString, value)
	}
	if raiuo.mutation.EmailIDCleared() {
		_spec.ClearField(reversal_application_ip.FieldEmailID, field.TypeString)
	}
	if value, ok := raiuo.mutation.EmployeeCategory(); ok {
		_spec.SetField(reversal_application_ip.FieldEmployeeCategory, field.TypeString, value)
	}
	if raiuo.mutation.EmployeeCategoryCleared() {
		_spec.ClearField(reversal_application_ip.FieldEmployeeCategory, field.TypeString)
	}
	if value, ok := raiuo.mutation.Cadre(); ok {
		_spec.SetField(reversal_application_ip.FieldCadre, field.TypeString, value)
	}
	if raiuo.mutation.CadreCleared() {
		_spec.ClearField(reversal_application_ip.FieldCadre, field.TypeString)
	}
	if value, ok := raiuo.mutation.EmployeePost(); ok {
		_spec.SetField(reversal_application_ip.FieldEmployeePost, field.TypeString, value)
	}
	if raiuo.mutation.EmployeePostCleared() {
		_spec.ClearField(reversal_application_ip.FieldEmployeePost, field.TypeString)
	}
	if value, ok := raiuo.mutation.FacilityID(); ok {
		_spec.SetField(reversal_application_ip.FieldFacilityID, field.TypeString, value)
	}
	if raiuo.mutation.FacilityIDCleared() {
		_spec.ClearField(reversal_application_ip.FieldFacilityID, field.TypeString)
	}
	if value, ok := raiuo.mutation.DCCS(); ok {
		_spec.SetField(reversal_application_ip.FieldDCCS, field.TypeString, value)
	}
	if raiuo.mutation.DCCSCleared() {
		_spec.ClearField(reversal_application_ip.FieldDCCS, field.TypeString)
	}
	if value, ok := raiuo.mutation.DCInPresentCadre(); ok {
		_spec.SetField(reversal_application_ip.FieldDCInPresentCadre, field.TypeString, value)
	}
	if raiuo.mutation.DCInPresentCadreCleared() {
		_spec.ClearField(reversal_application_ip.FieldDCInPresentCadre, field.TypeString)
	}
	if value, ok := raiuo.mutation.DeputationOfficeId(); ok {
		_spec.SetField(reversal_application_ip.FieldDeputationOfficeId, field.TypeString, value)
	}
	if raiuo.mutation.DeputationOfficeIdCleared() {
		_spec.ClearField(reversal_application_ip.FieldDeputationOfficeId, field.TypeString)
	}
	if value, ok := raiuo.mutation.DisabilityType(); ok {
		_spec.SetField(reversal_application_ip.FieldDisabilityType, field.TypeString, value)
	}
	if raiuo.mutation.DisabilityTypeCleared() {
		_spec.ClearField(reversal_application_ip.FieldDisabilityType, field.TypeString)
	}
	if value, ok := raiuo.mutation.DisabilityPercentage(); ok {
		_spec.SetField(reversal_application_ip.FieldDisabilityPercentage, field.TypeString, value)
	}
	if raiuo.mutation.DisabilityPercentageCleared() {
		_spec.ClearField(reversal_application_ip.FieldDisabilityPercentage, field.TypeString)
	}
	if value, ok := raiuo.mutation.Education(); ok {
		_spec.SetField(reversal_application_ip.FieldEducation, field.TypeString, value)
	}
	if raiuo.mutation.EducationCleared() {
		_spec.ClearField(reversal_application_ip.FieldEducation, field.TypeString)
	}
	if value, ok := raiuo.mutation.ExamCodeIP(); ok {
		_spec.SetField(reversal_application_ip.FieldExamCodeIP, field.TypeInt32, value)
	}
	if value, ok := raiuo.mutation.AddedExamCodeIP(); ok {
		_spec.AddField(reversal_application_ip.FieldExamCodeIP, field.TypeInt32, value)
	}
	if raiuo.mutation.ExamCodeIPCleared() {
		_spec.ClearField(reversal_application_ip.FieldExamCodeIP, field.TypeInt32)
	}
	if value, ok := raiuo.mutation.ExamYear(); ok {
		_spec.SetField(reversal_application_ip.FieldExamYear, field.TypeString, value)
	}
	if raiuo.mutation.ExamYearCleared() {
		_spec.ClearField(reversal_application_ip.FieldExamYear, field.TypeString)
	}
	if value, ok := raiuo.mutation.CentrePreference(); ok {
		_spec.SetField(reversal_application_ip.FieldCentrePreference, field.TypeString, value)
	}
	if raiuo.mutation.CentrePreferenceCleared() {
		_spec.ClearField(reversal_application_ip.FieldCentrePreference, field.TypeString)
	}
	if value, ok := raiuo.mutation.Signature(); ok {
		_spec.SetField(reversal_application_ip.FieldSignature, field.TypeString, value)
	}
	if raiuo.mutation.SignatureCleared() {
		_spec.ClearField(reversal_application_ip.FieldSignature, field.TypeString)
	}
	if value, ok := raiuo.mutation.Photo(); ok {
		_spec.SetField(reversal_application_ip.FieldPhoto, field.TypeString, value)
	}
	if raiuo.mutation.PhotoCleared() {
		_spec.ClearField(reversal_application_ip.FieldPhoto, field.TypeString)
	}
	if value, ok := raiuo.mutation.ApplicationStatus(); ok {
		_spec.SetField(reversal_application_ip.FieldApplicationStatus, field.TypeString, value)
	}
	if raiuo.mutation.ApplicationStatusCleared() {
		_spec.ClearField(reversal_application_ip.FieldApplicationStatus, field.TypeString)
	}
	if value, ok := raiuo.mutation.ReversalApplnSubmittedDate(); ok {
		_spec.SetField(reversal_application_ip.FieldReversalApplnSubmittedDate, field.TypeTime, value)
	}
	if raiuo.mutation.ReversalApplnSubmittedDateCleared() {
		_spec.ClearField(reversal_application_ip.FieldReversalApplnSubmittedDate, field.TypeTime)
	}
	if value, ok := raiuo.mutation.VARemarks(); ok {
		_spec.SetField(reversal_application_ip.FieldVARemarks, field.TypeString, value)
	}
	if raiuo.mutation.VARemarksCleared() {
		_spec.ClearField(reversal_application_ip.FieldVARemarks, field.TypeString)
	}
	if value, ok := raiuo.mutation.VAUserName(); ok {
		_spec.SetField(reversal_application_ip.FieldVAUserName, field.TypeString, value)
	}
	if raiuo.mutation.VAUserNameCleared() {
		_spec.ClearField(reversal_application_ip.FieldVAUserName, field.TypeString)
	}
	if value, ok := raiuo.mutation.VADate(); ok {
		_spec.SetField(reversal_application_ip.FieldVADate, field.TypeTime, value)
	}
	if raiuo.mutation.VADateCleared() {
		_spec.ClearField(reversal_application_ip.FieldVADate, field.TypeTime)
	}
	if value, ok := raiuo.mutation.CARemarks(); ok {
		_spec.SetField(reversal_application_ip.FieldCARemarks, field.TypeString, value)
	}
	if raiuo.mutation.CARemarksCleared() {
		_spec.ClearField(reversal_application_ip.FieldCARemarks, field.TypeString)
	}
	if value, ok := raiuo.mutation.CAUserName(); ok {
		_spec.SetField(reversal_application_ip.FieldCAUserName, field.TypeString, value)
	}
	if raiuo.mutation.CAUserNameCleared() {
		_spec.ClearField(reversal_application_ip.FieldCAUserName, field.TypeString)
	}
	if value, ok := raiuo.mutation.CADate(); ok {
		_spec.SetField(reversal_application_ip.FieldCADate, field.TypeTime, value)
	}
	if raiuo.mutation.CADateCleared() {
		_spec.ClearField(reversal_application_ip.FieldCADate, field.TypeTime)
	}
	if value, ok := raiuo.mutation.AppliactionRemarks(); ok {
		_spec.SetField(reversal_application_ip.FieldAppliactionRemarks, field.TypeString, value)
	}
	if raiuo.mutation.AppliactionRemarksCleared() {
		_spec.ClearField(reversal_application_ip.FieldAppliactionRemarks, field.TypeString)
	}
	if value, ok := raiuo.mutation.UpdatedAt(); ok {
		_spec.SetField(reversal_application_ip.FieldUpdatedAt, field.TypeTime, value)
	}
	if raiuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(reversal_application_ip.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := raiuo.mutation.UpdatedBy(); ok {
		_spec.SetField(reversal_application_ip.FieldUpdatedBy, field.TypeString, value)
	}
	if raiuo.mutation.UpdatedByCleared() {
		_spec.ClearField(reversal_application_ip.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := raiuo.mutation.RoleUserCode(); ok {
		_spec.SetField(reversal_application_ip.FieldRoleUserCode, field.TypeInt32, value)
	}
	if value, ok := raiuo.mutation.AddedRoleUserCode(); ok {
		_spec.AddField(reversal_application_ip.FieldRoleUserCode, field.TypeInt32, value)
	}
	if raiuo.mutation.RoleUserCodeCleared() {
		_spec.ClearField(reversal_application_ip.FieldRoleUserCode, field.TypeInt32)
	}
	_node = &Reversal_Application_IP{config: raiuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, raiuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{reversal_application_ip.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	raiuo.mutation.done = true
	return _node, nil
}
