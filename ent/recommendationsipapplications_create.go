// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"recruit/ent/exam_applications_ip"
	"recruit/ent/recommendationsipapplications"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// RecommendationsIPApplicationsCreate is the builder for creating a RecommendationsIPApplications entity.
type RecommendationsIPApplicationsCreate struct {
	config
	mutation *RecommendationsIPApplicationsMutation
	hooks    []Hook
}

// SetApplicationID sets the "ApplicationID" field.
func (riac *RecommendationsIPApplicationsCreate) SetApplicationID(i int64) *RecommendationsIPApplicationsCreate {
	riac.mutation.SetApplicationID(i)
	return riac
}

// SetNillableApplicationID sets the "ApplicationID" field if the given value is not nil.
func (riac *RecommendationsIPApplicationsCreate) SetNillableApplicationID(i *int64) *RecommendationsIPApplicationsCreate {
	if i != nil {
		riac.SetApplicationID(*i)
	}
	return riac
}

// SetEmployeeID sets the "EmployeeID" field.
func (riac *RecommendationsIPApplicationsCreate) SetEmployeeID(i int64) *RecommendationsIPApplicationsCreate {
	riac.mutation.SetEmployeeID(i)
	return riac
}

// SetNillableEmployeeID sets the "EmployeeID" field if the given value is not nil.
func (riac *RecommendationsIPApplicationsCreate) SetNillableEmployeeID(i *int64) *RecommendationsIPApplicationsCreate {
	if i != nil {
		riac.SetEmployeeID(*i)
	}
	return riac
}

// SetExamNameCode sets the "ExamNameCode" field.
func (riac *RecommendationsIPApplicationsCreate) SetExamNameCode(s string) *RecommendationsIPApplicationsCreate {
	riac.mutation.SetExamNameCode(s)
	return riac
}

// SetNillableExamNameCode sets the "ExamNameCode" field if the given value is not nil.
func (riac *RecommendationsIPApplicationsCreate) SetNillableExamNameCode(s *string) *RecommendationsIPApplicationsCreate {
	if s != nil {
		riac.SetExamNameCode(*s)
	}
	return riac
}

// SetExamYear sets the "ExamYear" field.
func (riac *RecommendationsIPApplicationsCreate) SetExamYear(s string) *RecommendationsIPApplicationsCreate {
	riac.mutation.SetExamYear(s)
	return riac
}

// SetNillableExamYear sets the "ExamYear" field if the given value is not nil.
func (riac *RecommendationsIPApplicationsCreate) SetNillableExamYear(s *string) *RecommendationsIPApplicationsCreate {
	if s != nil {
		riac.SetExamYear(*s)
	}
	return riac
}

// SetVacancyYear sets the "VacancyYear" field.
func (riac *RecommendationsIPApplicationsCreate) SetVacancyYear(i int32) *RecommendationsIPApplicationsCreate {
	riac.mutation.SetVacancyYear(i)
	return riac
}

// SetNillableVacancyYear sets the "VacancyYear" field if the given value is not nil.
func (riac *RecommendationsIPApplicationsCreate) SetNillableVacancyYear(i *int32) *RecommendationsIPApplicationsCreate {
	if i != nil {
		riac.SetVacancyYear(*i)
	}
	return riac
}

// SetCARecommendations sets the "CA_Recommendations" field.
func (riac *RecommendationsIPApplicationsCreate) SetCARecommendations(s string) *RecommendationsIPApplicationsCreate {
	riac.mutation.SetCARecommendations(s)
	return riac
}

// SetNillableCARecommendations sets the "CA_Recommendations" field if the given value is not nil.
func (riac *RecommendationsIPApplicationsCreate) SetNillableCARecommendations(s *string) *RecommendationsIPApplicationsCreate {
	if s != nil {
		riac.SetCARecommendations(*s)
	}
	return riac
}

// SetCAUpdatedAt sets the "CA_UpdatedAt" field.
func (riac *RecommendationsIPApplicationsCreate) SetCAUpdatedAt(t time.Time) *RecommendationsIPApplicationsCreate {
	riac.mutation.SetCAUpdatedAt(t)
	return riac
}

// SetNillableCAUpdatedAt sets the "CA_UpdatedAt" field if the given value is not nil.
func (riac *RecommendationsIPApplicationsCreate) SetNillableCAUpdatedAt(t *time.Time) *RecommendationsIPApplicationsCreate {
	if t != nil {
		riac.SetCAUpdatedAt(*t)
	}
	return riac
}

// SetCAUserName sets the "CA_UserName" field.
func (riac *RecommendationsIPApplicationsCreate) SetCAUserName(s string) *RecommendationsIPApplicationsCreate {
	riac.mutation.SetCAUserName(s)
	return riac
}

// SetNillableCAUserName sets the "CA_UserName" field if the given value is not nil.
func (riac *RecommendationsIPApplicationsCreate) SetNillableCAUserName(s *string) *RecommendationsIPApplicationsCreate {
	if s != nil {
		riac.SetCAUserName(*s)
	}
	return riac
}

// SetCARemarks sets the "CA_Remarks" field.
func (riac *RecommendationsIPApplicationsCreate) SetCARemarks(s string) *RecommendationsIPApplicationsCreate {
	riac.mutation.SetCARemarks(s)
	return riac
}

// SetNillableCARemarks sets the "CA_Remarks" field if the given value is not nil.
func (riac *RecommendationsIPApplicationsCreate) SetNillableCARemarks(s *string) *RecommendationsIPApplicationsCreate {
	if s != nil {
		riac.SetCARemarks(*s)
	}
	return riac
}

// SetNORecommendations sets the "NO_Recommendations" field.
func (riac *RecommendationsIPApplicationsCreate) SetNORecommendations(s string) *RecommendationsIPApplicationsCreate {
	riac.mutation.SetNORecommendations(s)
	return riac
}

// SetNillableNORecommendations sets the "NO_Recommendations" field if the given value is not nil.
func (riac *RecommendationsIPApplicationsCreate) SetNillableNORecommendations(s *string) *RecommendationsIPApplicationsCreate {
	if s != nil {
		riac.SetNORecommendations(*s)
	}
	return riac
}

// SetNOUpdatedAt sets the "NO_UpdatedAt" field.
func (riac *RecommendationsIPApplicationsCreate) SetNOUpdatedAt(t time.Time) *RecommendationsIPApplicationsCreate {
	riac.mutation.SetNOUpdatedAt(t)
	return riac
}

// SetNillableNOUpdatedAt sets the "NO_UpdatedAt" field if the given value is not nil.
func (riac *RecommendationsIPApplicationsCreate) SetNillableNOUpdatedAt(t *time.Time) *RecommendationsIPApplicationsCreate {
	if t != nil {
		riac.SetNOUpdatedAt(*t)
	}
	return riac
}

// SetNOUserName sets the "NO_UserName" field.
func (riac *RecommendationsIPApplicationsCreate) SetNOUserName(s string) *RecommendationsIPApplicationsCreate {
	riac.mutation.SetNOUserName(s)
	return riac
}

// SetNillableNOUserName sets the "NO_UserName" field if the given value is not nil.
func (riac *RecommendationsIPApplicationsCreate) SetNillableNOUserName(s *string) *RecommendationsIPApplicationsCreate {
	if s != nil {
		riac.SetNOUserName(*s)
	}
	return riac
}

// SetNORemarks sets the "NO_Remarks" field.
func (riac *RecommendationsIPApplicationsCreate) SetNORemarks(s string) *RecommendationsIPApplicationsCreate {
	riac.mutation.SetNORemarks(s)
	return riac
}

// SetNillableNORemarks sets the "NO_Remarks" field if the given value is not nil.
func (riac *RecommendationsIPApplicationsCreate) SetNillableNORemarks(s *string) *RecommendationsIPApplicationsCreate {
	if s != nil {
		riac.SetNORemarks(*s)
	}
	return riac
}

// SetApplicationStatus sets the "ApplicationStatus" field.
func (riac *RecommendationsIPApplicationsCreate) SetApplicationStatus(s string) *RecommendationsIPApplicationsCreate {
	riac.mutation.SetApplicationStatus(s)
	return riac
}

// SetNillableApplicationStatus sets the "ApplicationStatus" field if the given value is not nil.
func (riac *RecommendationsIPApplicationsCreate) SetNillableApplicationStatus(s *string) *RecommendationsIPApplicationsCreate {
	if s != nil {
		riac.SetApplicationStatus(*s)
	}
	return riac
}

// SetUpdatedAt sets the "UpdatedAt" field.
func (riac *RecommendationsIPApplicationsCreate) SetUpdatedAt(t time.Time) *RecommendationsIPApplicationsCreate {
	riac.mutation.SetUpdatedAt(t)
	return riac
}

// SetNillableUpdatedAt sets the "UpdatedAt" field if the given value is not nil.
func (riac *RecommendationsIPApplicationsCreate) SetNillableUpdatedAt(t *time.Time) *RecommendationsIPApplicationsCreate {
	if t != nil {
		riac.SetUpdatedAt(*t)
	}
	return riac
}

// SetUpdatedBy sets the "UpdatedBy" field.
func (riac *RecommendationsIPApplicationsCreate) SetUpdatedBy(s string) *RecommendationsIPApplicationsCreate {
	riac.mutation.SetUpdatedBy(s)
	return riac
}

// SetNillableUpdatedBy sets the "UpdatedBy" field if the given value is not nil.
func (riac *RecommendationsIPApplicationsCreate) SetNillableUpdatedBy(s *string) *RecommendationsIPApplicationsCreate {
	if s != nil {
		riac.SetUpdatedBy(*s)
	}
	return riac
}

// SetGenerateHallTicketFlag sets the "GenerateHallTicketFlag" field.
func (riac *RecommendationsIPApplicationsCreate) SetGenerateHallTicketFlag(b bool) *RecommendationsIPApplicationsCreate {
	riac.mutation.SetGenerateHallTicketFlag(b)
	return riac
}

// SetNillableGenerateHallTicketFlag sets the "GenerateHallTicketFlag" field if the given value is not nil.
func (riac *RecommendationsIPApplicationsCreate) SetNillableGenerateHallTicketFlag(b *bool) *RecommendationsIPApplicationsCreate {
	if b != nil {
		riac.SetGenerateHallTicketFlag(*b)
	}
	return riac
}

// SetID sets the "id" field.
func (riac *RecommendationsIPApplicationsCreate) SetID(i int64) *RecommendationsIPApplicationsCreate {
	riac.mutation.SetID(i)
	return riac
}

// SetApplnRefID sets the "ApplnRef" edge to the Exam_Applications_IP entity by ID.
func (riac *RecommendationsIPApplicationsCreate) SetApplnRefID(id int64) *RecommendationsIPApplicationsCreate {
	riac.mutation.SetApplnRefID(id)
	return riac
}

// SetNillableApplnRefID sets the "ApplnRef" edge to the Exam_Applications_IP entity by ID if the given value is not nil.
func (riac *RecommendationsIPApplicationsCreate) SetNillableApplnRefID(id *int64) *RecommendationsIPApplicationsCreate {
	if id != nil {
		riac = riac.SetApplnRefID(*id)
	}
	return riac
}

// SetApplnRef sets the "ApplnRef" edge to the Exam_Applications_IP entity.
func (riac *RecommendationsIPApplicationsCreate) SetApplnRef(e *Exam_Applications_IP) *RecommendationsIPApplicationsCreate {
	return riac.SetApplnRefID(e.ID)
}

// Mutation returns the RecommendationsIPApplicationsMutation object of the builder.
func (riac *RecommendationsIPApplicationsCreate) Mutation() *RecommendationsIPApplicationsMutation {
	return riac.mutation
}

// Save creates the RecommendationsIPApplications in the database.
func (riac *RecommendationsIPApplicationsCreate) Save(ctx context.Context) (*RecommendationsIPApplications, error) {
	riac.defaults()
	return withHooks(ctx, riac.sqlSave, riac.mutation, riac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (riac *RecommendationsIPApplicationsCreate) SaveX(ctx context.Context) *RecommendationsIPApplications {
	v, err := riac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (riac *RecommendationsIPApplicationsCreate) Exec(ctx context.Context) error {
	_, err := riac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (riac *RecommendationsIPApplicationsCreate) ExecX(ctx context.Context) {
	if err := riac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (riac *RecommendationsIPApplicationsCreate) defaults() {
	if _, ok := riac.mutation.UpdatedAt(); !ok {
		v := recommendationsipapplications.DefaultUpdatedAt()
		riac.mutation.SetUpdatedAt(v)
	}
	if _, ok := riac.mutation.UpdatedBy(); !ok {
		v := recommendationsipapplications.DefaultUpdatedBy
		riac.mutation.SetUpdatedBy(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (riac *RecommendationsIPApplicationsCreate) check() error {
	return nil
}

func (riac *RecommendationsIPApplicationsCreate) sqlSave(ctx context.Context) (*RecommendationsIPApplications, error) {
	if err := riac.check(); err != nil {
		return nil, err
	}
	_node, _spec := riac.createSpec()
	if err := sqlgraph.CreateNode(ctx, riac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	riac.mutation.id = &_node.ID
	riac.mutation.done = true
	return _node, nil
}

func (riac *RecommendationsIPApplicationsCreate) createSpec() (*RecommendationsIPApplications, *sqlgraph.CreateSpec) {
	var (
		_node = &RecommendationsIPApplications{config: riac.config}
		_spec = sqlgraph.NewCreateSpec(recommendationsipapplications.Table, sqlgraph.NewFieldSpec(recommendationsipapplications.FieldID, field.TypeInt64))
	)
	if id, ok := riac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := riac.mutation.ApplicationID(); ok {
		_spec.SetField(recommendationsipapplications.FieldApplicationID, field.TypeInt64, value)
		_node.ApplicationID = value
	}
	if value, ok := riac.mutation.EmployeeID(); ok {
		_spec.SetField(recommendationsipapplications.FieldEmployeeID, field.TypeInt64, value)
		_node.EmployeeID = value
	}
	if value, ok := riac.mutation.ExamNameCode(); ok {
		_spec.SetField(recommendationsipapplications.FieldExamNameCode, field.TypeString, value)
		_node.ExamNameCode = value
	}
	if value, ok := riac.mutation.ExamYear(); ok {
		_spec.SetField(recommendationsipapplications.FieldExamYear, field.TypeString, value)
		_node.ExamYear = value
	}
	if value, ok := riac.mutation.VacancyYear(); ok {
		_spec.SetField(recommendationsipapplications.FieldVacancyYear, field.TypeInt32, value)
		_node.VacancyYear = value
	}
	if value, ok := riac.mutation.CARecommendations(); ok {
		_spec.SetField(recommendationsipapplications.FieldCARecommendations, field.TypeString, value)
		_node.CARecommendations = value
	}
	if value, ok := riac.mutation.CAUpdatedAt(); ok {
		_spec.SetField(recommendationsipapplications.FieldCAUpdatedAt, field.TypeTime, value)
		_node.CAUpdatedAt = value
	}
	if value, ok := riac.mutation.CAUserName(); ok {
		_spec.SetField(recommendationsipapplications.FieldCAUserName, field.TypeString, value)
		_node.CAUserName = value
	}
	if value, ok := riac.mutation.CARemarks(); ok {
		_spec.SetField(recommendationsipapplications.FieldCARemarks, field.TypeString, value)
		_node.CARemarks = value
	}
	if value, ok := riac.mutation.NORecommendations(); ok {
		_spec.SetField(recommendationsipapplications.FieldNORecommendations, field.TypeString, value)
		_node.NORecommendations = value
	}
	if value, ok := riac.mutation.NOUpdatedAt(); ok {
		_spec.SetField(recommendationsipapplications.FieldNOUpdatedAt, field.TypeTime, value)
		_node.NOUpdatedAt = value
	}
	if value, ok := riac.mutation.NOUserName(); ok {
		_spec.SetField(recommendationsipapplications.FieldNOUserName, field.TypeString, value)
		_node.NOUserName = value
	}
	if value, ok := riac.mutation.NORemarks(); ok {
		_spec.SetField(recommendationsipapplications.FieldNORemarks, field.TypeString, value)
		_node.NORemarks = value
	}
	if value, ok := riac.mutation.ApplicationStatus(); ok {
		_spec.SetField(recommendationsipapplications.FieldApplicationStatus, field.TypeString, value)
		_node.ApplicationStatus = value
	}
	if value, ok := riac.mutation.UpdatedAt(); ok {
		_spec.SetField(recommendationsipapplications.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := riac.mutation.UpdatedBy(); ok {
		_spec.SetField(recommendationsipapplications.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if value, ok := riac.mutation.GenerateHallTicketFlag(); ok {
		_spec.SetField(recommendationsipapplications.FieldGenerateHallTicketFlag, field.TypeBool, value)
		_node.GenerateHallTicketFlag = value
	}
	if nodes := riac.mutation.ApplnRefIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   recommendationsipapplications.ApplnRefTable,
			Columns: []string{recommendationsipapplications.ApplnRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_ip.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.exam_applications_ip_ip_applications_ref = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// RecommendationsIPApplicationsCreateBulk is the builder for creating many RecommendationsIPApplications entities in bulk.
type RecommendationsIPApplicationsCreateBulk struct {
	config
	builders []*RecommendationsIPApplicationsCreate
}

// Save creates the RecommendationsIPApplications entities in the database.
func (riacb *RecommendationsIPApplicationsCreateBulk) Save(ctx context.Context) ([]*RecommendationsIPApplications, error) {
	specs := make([]*sqlgraph.CreateSpec, len(riacb.builders))
	nodes := make([]*RecommendationsIPApplications, len(riacb.builders))
	mutators := make([]Mutator, len(riacb.builders))
	for i := range riacb.builders {
		func(i int, root context.Context) {
			builder := riacb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*RecommendationsIPApplicationsMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, riacb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, riacb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, riacb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (riacb *RecommendationsIPApplicationsCreateBulk) SaveX(ctx context.Context) []*RecommendationsIPApplications {
	v, err := riacb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (riacb *RecommendationsIPApplicationsCreateBulk) Exec(ctx context.Context) error {
	_, err := riacb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (riacb *RecommendationsIPApplicationsCreateBulk) ExecX(ctx context.Context) {
	if err := riacb.Exec(ctx); err != nil {
		panic(err)
	}
}
