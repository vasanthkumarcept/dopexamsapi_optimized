// Code generated by ent, DO NOT EDIT.

package employeecategory

import (
	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the employeecategory type in the database.
	Label = "employee_category"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "UniqueID"
	// FieldCategoryCode holds the string denoting the categorycode field in the database.
	FieldCategoryCode = "category_code"
	// FieldCategoryDescription holds the string denoting the categorydescription field in the database.
	FieldCategoryDescription = "category_description"
	// FieldMinimumMarks holds the string denoting the minimummarks field in the database.
	FieldMinimumMarks = "minimum_marks"
	// FieldHallCategoryCode holds the string denoting the hallcategorycode field in the database.
	FieldHallCategoryCode = "hall_category_code"
	// FieldOrderNumber holds the string denoting the ordernumber field in the database.
	FieldOrderNumber = "order_number"
	// FieldCreatedById holds the string denoting the createdbyid field in the database.
	FieldCreatedById = "created_by_id"
	// FieldCreatedByUserName holds the string denoting the createdbyusername field in the database.
	FieldCreatedByUserName = "created_by_user_name"
	// FieldCreatedByEmployeeId holds the string denoting the createdbyemployeeid field in the database.
	FieldCreatedByEmployeeId = "created_by_employee_id"
	// FieldCreatedByDesignation holds the string denoting the createdbydesignation field in the database.
	FieldCreatedByDesignation = "created_by_designation"
	// FieldCreatedDate holds the string denoting the createddate field in the database.
	FieldCreatedDate = "created_date"
	// FieldVerifiedById holds the string denoting the verifiedbyid field in the database.
	FieldVerifiedById = "verified_by_id"
	// FieldVerifiedByUserName holds the string denoting the verifiedbyusername field in the database.
	FieldVerifiedByUserName = "verified_by_user_name"
	// FieldVerifiedByEmployeeId holds the string denoting the verifiedbyemployeeid field in the database.
	FieldVerifiedByEmployeeId = "verified_by_employee_id"
	// FieldVerifiedByDesignation holds the string denoting the verifiedbydesignation field in the database.
	FieldVerifiedByDesignation = "verified_by_designation"
	// FieldVerifiedDate holds the string denoting the verifieddate field in the database.
	FieldVerifiedDate = "verified_date"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldDeletedById holds the string denoting the deletedbyid field in the database.
	FieldDeletedById = "deleted_by_id"
	// FieldDeletedByUserName holds the string denoting the deletedbyusername field in the database.
	FieldDeletedByUserName = "deleted_by_user_name"
	// FieldDeletedByEmployeeId holds the string denoting the deletedbyemployeeid field in the database.
	FieldDeletedByEmployeeId = "deleted_by_employee_id"
	// FieldDeletedByDesignation holds the string denoting the deletedbydesignation field in the database.
	FieldDeletedByDesignation = "deleted_by_designation"
	// FieldDeletedDate holds the string denoting the deleteddate field in the database.
	FieldDeletedDate = "deleted_date"
	// FieldExamconfigurationExamcode holds the string denoting the examconfigurationexamcode field in the database.
	FieldExamconfigurationExamcode = "examconfiguration_examcode"
	// FieldExamShortDescription holds the string denoting the examshortdescription field in the database.
	FieldExamShortDescription = "exam_short_description"
	// FieldExamLongDescription holds the string denoting the examlongdescription field in the database.
	FieldExamLongDescription = "exam_long_description"
	// FieldExamPaperCodePaperCode holds the string denoting the exampapercode_papercode field in the database.
	FieldExamPaperCodePaperCode = "exam_paper_code_paper_code"
	// FieldEmployeeCategoryCategoryID holds the string denoting the employeecategory_categoryid field in the database.
	FieldEmployeeCategoryCategoryID = "employee_category_category_id"
	// Table holds the table name of the employeecategory in the database.
	Table = "EmployeeCategory"
)

// Columns holds all SQL columns for employeecategory fields.
var Columns = []string{
	FieldID,
	FieldCategoryCode,
	FieldCategoryDescription,
	FieldMinimumMarks,
	FieldHallCategoryCode,
	FieldOrderNumber,
	FieldCreatedById,
	FieldCreatedByUserName,
	FieldCreatedByEmployeeId,
	FieldCreatedByDesignation,
	FieldCreatedDate,
	FieldVerifiedById,
	FieldVerifiedByUserName,
	FieldVerifiedByEmployeeId,
	FieldVerifiedByDesignation,
	FieldVerifiedDate,
	FieldStatus,
	FieldDeletedById,
	FieldDeletedByUserName,
	FieldDeletedByEmployeeId,
	FieldDeletedByDesignation,
	FieldDeletedDate,
	FieldExamconfigurationExamcode,
	FieldExamShortDescription,
	FieldExamLongDescription,
	FieldExamPaperCodePaperCode,
	FieldEmployeeCategoryCategoryID,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "EmployeeCategory"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"eligibility_master_category_eligibility",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the EmployeeCategory queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCategoryCode orders the results by the CategoryCode field.
func ByCategoryCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCategoryCode, opts...).ToFunc()
}

// ByCategoryDescription orders the results by the CategoryDescription field.
func ByCategoryDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCategoryDescription, opts...).ToFunc()
}

// ByMinimumMarks orders the results by the MinimumMarks field.
func ByMinimumMarks(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMinimumMarks, opts...).ToFunc()
}

// ByHallCategoryCode orders the results by the HallCategoryCode field.
func ByHallCategoryCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHallCategoryCode, opts...).ToFunc()
}

// ByOrderNumber orders the results by the OrderNumber field.
func ByOrderNumber(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOrderNumber, opts...).ToFunc()
}

// ByCreatedById orders the results by the CreatedById field.
func ByCreatedById(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedById, opts...).ToFunc()
}

// ByCreatedByUserName orders the results by the CreatedByUserName field.
func ByCreatedByUserName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedByUserName, opts...).ToFunc()
}

// ByCreatedByEmployeeId orders the results by the CreatedByEmployeeId field.
func ByCreatedByEmployeeId(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedByEmployeeId, opts...).ToFunc()
}

// ByCreatedByDesignation orders the results by the CreatedByDesignation field.
func ByCreatedByDesignation(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedByDesignation, opts...).ToFunc()
}

// ByCreatedDate orders the results by the CreatedDate field.
func ByCreatedDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedDate, opts...).ToFunc()
}

// ByVerifiedById orders the results by the VerifiedById field.
func ByVerifiedById(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVerifiedById, opts...).ToFunc()
}

// ByVerifiedByUserName orders the results by the VerifiedByUserName field.
func ByVerifiedByUserName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVerifiedByUserName, opts...).ToFunc()
}

// ByVerifiedByEmployeeId orders the results by the VerifiedByEmployeeId field.
func ByVerifiedByEmployeeId(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVerifiedByEmployeeId, opts...).ToFunc()
}

// ByVerifiedByDesignation orders the results by the VerifiedByDesignation field.
func ByVerifiedByDesignation(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVerifiedByDesignation, opts...).ToFunc()
}

// ByVerifiedDate orders the results by the VerifiedDate field.
func ByVerifiedDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVerifiedDate, opts...).ToFunc()
}

// ByStatus orders the results by the Status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByDeletedById orders the results by the DeletedById field.
func ByDeletedById(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedById, opts...).ToFunc()
}

// ByDeletedByUserName orders the results by the DeletedByUserName field.
func ByDeletedByUserName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedByUserName, opts...).ToFunc()
}

// ByDeletedByEmployeeId orders the results by the DeletedByEmployeeId field.
func ByDeletedByEmployeeId(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedByEmployeeId, opts...).ToFunc()
}

// ByDeletedByDesignation orders the results by the DeletedByDesignation field.
func ByDeletedByDesignation(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedByDesignation, opts...).ToFunc()
}

// ByDeletedDate orders the results by the DeletedDate field.
func ByDeletedDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedDate, opts...).ToFunc()
}

// ByExamconfigurationExamcode orders the results by the ExamconfigurationExamcode field.
func ByExamconfigurationExamcode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExamconfigurationExamcode, opts...).ToFunc()
}

// ByExamShortDescription orders the results by the ExamShortDescription field.
func ByExamShortDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExamShortDescription, opts...).ToFunc()
}

// ByExamLongDescription orders the results by the ExamLongDescription field.
func ByExamLongDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExamLongDescription, opts...).ToFunc()
}

// ByExamPaperCodePaperCode orders the results by the ExamPaperCode_paperCode field.
func ByExamPaperCodePaperCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExamPaperCodePaperCode, opts...).ToFunc()
}

// ByEmployeeCategoryCategoryID orders the results by the EmployeeCategory_categoryID field.
func ByEmployeeCategoryCategoryID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmployeeCategoryCategoryID, opts...).ToFunc()
}
