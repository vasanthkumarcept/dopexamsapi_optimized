// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"recruit/ent/cadre_choice_pm"
	"recruit/ent/center"
	"recruit/ent/circlesummaryforno"
	"recruit/ent/division_choice_pm"
	"recruit/ent/exam"
	"recruit/ent/exam_applications_gdspm"
	"recruit/ent/examcitycenter"
	"recruit/ent/logs"
	"recruit/ent/recommendationsgdspmapplications"
	"recruit/ent/rolemaster"
	"recruit/ent/usermaster"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ExamApplicationsGDSPMCreate is the builder for creating a Exam_Applications_GDSPM entity.
type ExamApplicationsGDSPMCreate struct {
	config
	mutation *ExamApplicationsGDSPMMutation
	hooks    []Hook
}

// SetApplicationNumber sets the "ApplicationNumber" field.
func (eagc *ExamApplicationsGDSPMCreate) SetApplicationNumber(s string) *ExamApplicationsGDSPMCreate {
	eagc.mutation.SetApplicationNumber(s)
	return eagc
}

// SetNillableApplicationNumber sets the "ApplicationNumber" field if the given value is not nil.
func (eagc *ExamApplicationsGDSPMCreate) SetNillableApplicationNumber(s *string) *ExamApplicationsGDSPMCreate {
	if s != nil {
		eagc.SetApplicationNumber(*s)
	}
	return eagc
}

// SetApplnSubmittedDate sets the "ApplnSubmittedDate" field.
func (eagc *ExamApplicationsGDSPMCreate) SetApplnSubmittedDate(t time.Time) *ExamApplicationsGDSPMCreate {
	eagc.mutation.SetApplnSubmittedDate(t)
	return eagc
}

// SetNillableApplnSubmittedDate sets the "ApplnSubmittedDate" field if the given value is not nil.
func (eagc *ExamApplicationsGDSPMCreate) SetNillableApplnSubmittedDate(t *time.Time) *ExamApplicationsGDSPMCreate {
	if t != nil {
		eagc.SetApplnSubmittedDate(*t)
	}
	return eagc
}

// SetExamCode sets the "ExamCode" field.
func (eagc *ExamApplicationsGDSPMCreate) SetExamCode(i int32) *ExamApplicationsGDSPMCreate {
	eagc.mutation.SetExamCode(i)
	return eagc
}

// SetNillableExamCode sets the "ExamCode" field if the given value is not nil.
func (eagc *ExamApplicationsGDSPMCreate) SetNillableExamCode(i *int32) *ExamApplicationsGDSPMCreate {
	if i != nil {
		eagc.SetExamCode(*i)
	}
	return eagc
}

// SetExamShortName sets the "ExamShortName" field.
func (eagc *ExamApplicationsGDSPMCreate) SetExamShortName(s string) *ExamApplicationsGDSPMCreate {
	eagc.mutation.SetExamShortName(s)
	return eagc
}

// SetNillableExamShortName sets the "ExamShortName" field if the given value is not nil.
func (eagc *ExamApplicationsGDSPMCreate) SetNillableExamShortName(s *string) *ExamApplicationsGDSPMCreate {
	if s != nil {
		eagc.SetExamShortName(*s)
	}
	return eagc
}

// SetExamName sets the "ExamName" field.
func (eagc *ExamApplicationsGDSPMCreate) SetExamName(s string) *ExamApplicationsGDSPMCreate {
	eagc.mutation.SetExamName(s)
	return eagc
}

// SetNillableExamName sets the "ExamName" field if the given value is not nil.
func (eagc *ExamApplicationsGDSPMCreate) SetNillableExamName(s *string) *ExamApplicationsGDSPMCreate {
	if s != nil {
		eagc.SetExamName(*s)
	}
	return eagc
}

// SetSmsExamShortName sets the "SmsExamShortName" field.
func (eagc *ExamApplicationsGDSPMCreate) SetSmsExamShortName(s string) *ExamApplicationsGDSPMCreate {
	eagc.mutation.SetSmsExamShortName(s)
	return eagc
}

// SetNillableSmsExamShortName sets the "SmsExamShortName" field if the given value is not nil.
func (eagc *ExamApplicationsGDSPMCreate) SetNillableSmsExamShortName(s *string) *ExamApplicationsGDSPMCreate {
	if s != nil {
		eagc.SetSmsExamShortName(*s)
	}
	return eagc
}

// SetExamYear sets the "ExamYear" field.
func (eagc *ExamApplicationsGDSPMCreate) SetExamYear(s string) *ExamApplicationsGDSPMCreate {
	eagc.mutation.SetExamYear(s)
	return eagc
}

// SetNillableExamYear sets the "ExamYear" field if the given value is not nil.
func (eagc *ExamApplicationsGDSPMCreate) SetNillableExamYear(s *string) *ExamApplicationsGDSPMCreate {
	if s != nil {
		eagc.SetExamYear(*s)
	}
	return eagc
}

// SetUserID sets the "UserID" field.
func (eagc *ExamApplicationsGDSPMCreate) SetUserID(i int32) *ExamApplicationsGDSPMCreate {
	eagc.mutation.SetUserID(i)
	return eagc
}

// SetNillableUserID sets the "UserID" field if the given value is not nil.
func (eagc *ExamApplicationsGDSPMCreate) SetNillableUserID(i *int32) *ExamApplicationsGDSPMCreate {
	if i != nil {
		eagc.SetUserID(*i)
	}
	return eagc
}

// SetEmployeeID sets the "EmployeeID" field.
func (eagc *ExamApplicationsGDSPMCreate) SetEmployeeID(i int64) *ExamApplicationsGDSPMCreate {
	eagc.mutation.SetEmployeeID(i)
	return eagc
}

// SetNillableEmployeeID sets the "EmployeeID" field if the given value is not nil.
func (eagc *ExamApplicationsGDSPMCreate) SetNillableEmployeeID(i *int64) *ExamApplicationsGDSPMCreate {
	if i != nil {
		eagc.SetEmployeeID(*i)
	}
	return eagc
}

// SetEmployeeName sets the "EmployeeName" field.
func (eagc *ExamApplicationsGDSPMCreate) SetEmployeeName(s string) *ExamApplicationsGDSPMCreate {
	eagc.mutation.SetEmployeeName(s)
	return eagc
}

// SetNillableEmployeeName sets the "EmployeeName" field if the given value is not nil.
func (eagc *ExamApplicationsGDSPMCreate) SetNillableEmployeeName(s *string) *ExamApplicationsGDSPMCreate {
	if s != nil {
		eagc.SetEmployeeName(*s)
	}
	return eagc
}

// SetDOB sets the "DOB" field.
func (eagc *ExamApplicationsGDSPMCreate) SetDOB(s string) *ExamApplicationsGDSPMCreate {
	eagc.mutation.SetDOB(s)
	return eagc
}

// SetNillableDOB sets the "DOB" field if the given value is not nil.
func (eagc *ExamApplicationsGDSPMCreate) SetNillableDOB(s *string) *ExamApplicationsGDSPMCreate {
	if s != nil {
		eagc.SetDOB(*s)
	}
	return eagc
}

// SetGender sets the "Gender" field.
func (eagc *ExamApplicationsGDSPMCreate) SetGender(s string) *ExamApplicationsGDSPMCreate {
	eagc.mutation.SetGender(s)
	return eagc
}

// SetNillableGender sets the "Gender" field if the given value is not nil.
func (eagc *ExamApplicationsGDSPMCreate) SetNillableGender(s *string) *ExamApplicationsGDSPMCreate {
	if s != nil {
		eagc.SetGender(*s)
	}
	return eagc
}

// SetMobileNumber sets the "MobileNumber" field.
func (eagc *ExamApplicationsGDSPMCreate) SetMobileNumber(s string) *ExamApplicationsGDSPMCreate {
	eagc.mutation.SetMobileNumber(s)
	return eagc
}

// SetNillableMobileNumber sets the "MobileNumber" field if the given value is not nil.
func (eagc *ExamApplicationsGDSPMCreate) SetNillableMobileNumber(s *string) *ExamApplicationsGDSPMCreate {
	if s != nil {
		eagc.SetMobileNumber(*s)
	}
	return eagc
}

// SetEmailID sets the "EmailID" field.
func (eagc *ExamApplicationsGDSPMCreate) SetEmailID(s string) *ExamApplicationsGDSPMCreate {
	eagc.mutation.SetEmailID(s)
	return eagc
}

// SetNillableEmailID sets the "EmailID" field if the given value is not nil.
func (eagc *ExamApplicationsGDSPMCreate) SetNillableEmailID(s *string) *ExamApplicationsGDSPMCreate {
	if s != nil {
		eagc.SetEmailID(*s)
	}
	return eagc
}

// SetCategoryCode sets the "CategoryCode" field.
func (eagc *ExamApplicationsGDSPMCreate) SetCategoryCode(s string) *ExamApplicationsGDSPMCreate {
	eagc.mutation.SetCategoryCode(s)
	return eagc
}

// SetNillableCategoryCode sets the "CategoryCode" field if the given value is not nil.
func (eagc *ExamApplicationsGDSPMCreate) SetNillableCategoryCode(s *string) *ExamApplicationsGDSPMCreate {
	if s != nil {
		eagc.SetCategoryCode(*s)
	}
	return eagc
}

// SetCategoryDescription sets the "CategoryDescription" field.
func (eagc *ExamApplicationsGDSPMCreate) SetCategoryDescription(s string) *ExamApplicationsGDSPMCreate {
	eagc.mutation.SetCategoryDescription(s)
	return eagc
}

// SetNillableCategoryDescription sets the "CategoryDescription" field if the given value is not nil.
func (eagc *ExamApplicationsGDSPMCreate) SetNillableCategoryDescription(s *string) *ExamApplicationsGDSPMCreate {
	if s != nil {
		eagc.SetCategoryDescription(*s)
	}
	return eagc
}

// SetDisabilityTypeID sets the "DisabilityTypeID" field.
func (eagc *ExamApplicationsGDSPMCreate) SetDisabilityTypeID(s string) *ExamApplicationsGDSPMCreate {
	eagc.mutation.SetDisabilityTypeID(s)
	return eagc
}

// SetNillableDisabilityTypeID sets the "DisabilityTypeID" field if the given value is not nil.
func (eagc *ExamApplicationsGDSPMCreate) SetNillableDisabilityTypeID(s *string) *ExamApplicationsGDSPMCreate {
	if s != nil {
		eagc.SetDisabilityTypeID(*s)
	}
	return eagc
}

// SetDisabilityTypeCode sets the "DisabilityTypeCode" field.
func (eagc *ExamApplicationsGDSPMCreate) SetDisabilityTypeCode(s string) *ExamApplicationsGDSPMCreate {
	eagc.mutation.SetDisabilityTypeCode(s)
	return eagc
}

// SetNillableDisabilityTypeCode sets the "DisabilityTypeCode" field if the given value is not nil.
func (eagc *ExamApplicationsGDSPMCreate) SetNillableDisabilityTypeCode(s *string) *ExamApplicationsGDSPMCreate {
	if s != nil {
		eagc.SetDisabilityTypeCode(*s)
	}
	return eagc
}

// SetDisabilityTypeDescription sets the "DisabilityTypeDescription" field.
func (eagc *ExamApplicationsGDSPMCreate) SetDisabilityTypeDescription(s string) *ExamApplicationsGDSPMCreate {
	eagc.mutation.SetDisabilityTypeDescription(s)
	return eagc
}

// SetNillableDisabilityTypeDescription sets the "DisabilityTypeDescription" field if the given value is not nil.
func (eagc *ExamApplicationsGDSPMCreate) SetNillableDisabilityTypeDescription(s *string) *ExamApplicationsGDSPMCreate {
	if s != nil {
		eagc.SetDisabilityTypeDescription(*s)
	}
	return eagc
}

// SetDisabilityPercentage sets the "DisabilityPercentage" field.
func (eagc *ExamApplicationsGDSPMCreate) SetDisabilityPercentage(i int32) *ExamApplicationsGDSPMCreate {
	eagc.mutation.SetDisabilityPercentage(i)
	return eagc
}

// SetNillableDisabilityPercentage sets the "DisabilityPercentage" field if the given value is not nil.
func (eagc *ExamApplicationsGDSPMCreate) SetNillableDisabilityPercentage(i *int32) *ExamApplicationsGDSPMCreate {
	if i != nil {
		eagc.SetDisabilityPercentage(*i)
	}
	return eagc
}

// SetDCCS sets the "DCCS" field.
func (eagc *ExamApplicationsGDSPMCreate) SetDCCS(s string) *ExamApplicationsGDSPMCreate {
	eagc.mutation.SetDCCS(s)
	return eagc
}

// SetNillableDCCS sets the "DCCS" field if the given value is not nil.
func (eagc *ExamApplicationsGDSPMCreate) SetNillableDCCS(s *string) *ExamApplicationsGDSPMCreate {
	if s != nil {
		eagc.SetDCCS(*s)
	}
	return eagc
}

// SetEntryPostCode sets the "EntryPostCode" field.
func (eagc *ExamApplicationsGDSPMCreate) SetEntryPostCode(s string) *ExamApplicationsGDSPMCreate {
	eagc.mutation.SetEntryPostCode(s)
	return eagc
}

// SetNillableEntryPostCode sets the "EntryPostCode" field if the given value is not nil.
func (eagc *ExamApplicationsGDSPMCreate) SetNillableEntryPostCode(s *string) *ExamApplicationsGDSPMCreate {
	if s != nil {
		eagc.SetEntryPostCode(*s)
	}
	return eagc
}

// SetEntryPostDescription sets the "EntryPostDescription" field.
func (eagc *ExamApplicationsGDSPMCreate) SetEntryPostDescription(s string) *ExamApplicationsGDSPMCreate {
	eagc.mutation.SetEntryPostDescription(s)
	return eagc
}

// SetNillableEntryPostDescription sets the "EntryPostDescription" field if the given value is not nil.
func (eagc *ExamApplicationsGDSPMCreate) SetNillableEntryPostDescription(s *string) *ExamApplicationsGDSPMCreate {
	if s != nil {
		eagc.SetEntryPostDescription(*s)
	}
	return eagc
}

// SetPresentPostCode sets the "PresentPostCode" field.
func (eagc *ExamApplicationsGDSPMCreate) SetPresentPostCode(s string) *ExamApplicationsGDSPMCreate {
	eagc.mutation.SetPresentPostCode(s)
	return eagc
}

// SetNillablePresentPostCode sets the "PresentPostCode" field if the given value is not nil.
func (eagc *ExamApplicationsGDSPMCreate) SetNillablePresentPostCode(s *string) *ExamApplicationsGDSPMCreate {
	if s != nil {
		eagc.SetPresentPostCode(*s)
	}
	return eagc
}

// SetPresentPostDescription sets the "PresentPostDescription" field.
func (eagc *ExamApplicationsGDSPMCreate) SetPresentPostDescription(s string) *ExamApplicationsGDSPMCreate {
	eagc.mutation.SetPresentPostDescription(s)
	return eagc
}

// SetNillablePresentPostDescription sets the "PresentPostDescription" field if the given value is not nil.
func (eagc *ExamApplicationsGDSPMCreate) SetNillablePresentPostDescription(s *string) *ExamApplicationsGDSPMCreate {
	if s != nil {
		eagc.SetPresentPostDescription(*s)
	}
	return eagc
}

// SetFeederPostCode sets the "FeederPostCode" field.
func (eagc *ExamApplicationsGDSPMCreate) SetFeederPostCode(s string) *ExamApplicationsGDSPMCreate {
	eagc.mutation.SetFeederPostCode(s)
	return eagc
}

// SetNillableFeederPostCode sets the "FeederPostCode" field if the given value is not nil.
func (eagc *ExamApplicationsGDSPMCreate) SetNillableFeederPostCode(s *string) *ExamApplicationsGDSPMCreate {
	if s != nil {
		eagc.SetFeederPostCode(*s)
	}
	return eagc
}

// SetFeederPostDescription sets the "FeederPostDescription" field.
func (eagc *ExamApplicationsGDSPMCreate) SetFeederPostDescription(s string) *ExamApplicationsGDSPMCreate {
	eagc.mutation.SetFeederPostDescription(s)
	return eagc
}

// SetNillableFeederPostDescription sets the "FeederPostDescription" field if the given value is not nil.
func (eagc *ExamApplicationsGDSPMCreate) SetNillableFeederPostDescription(s *string) *ExamApplicationsGDSPMCreate {
	if s != nil {
		eagc.SetFeederPostDescription(*s)
	}
	return eagc
}

// SetFeederPostJoiningDate sets the "FeederPostJoiningDate" field.
func (eagc *ExamApplicationsGDSPMCreate) SetFeederPostJoiningDate(s string) *ExamApplicationsGDSPMCreate {
	eagc.mutation.SetFeederPostJoiningDate(s)
	return eagc
}

// SetNillableFeederPostJoiningDate sets the "FeederPostJoiningDate" field if the given value is not nil.
func (eagc *ExamApplicationsGDSPMCreate) SetNillableFeederPostJoiningDate(s *string) *ExamApplicationsGDSPMCreate {
	if s != nil {
		eagc.SetFeederPostJoiningDate(*s)
	}
	return eagc
}

// SetDesignationID sets the "DesignationID" field.
func (eagc *ExamApplicationsGDSPMCreate) SetDesignationID(s string) *ExamApplicationsGDSPMCreate {
	eagc.mutation.SetDesignationID(s)
	return eagc
}

// SetNillableDesignationID sets the "DesignationID" field if the given value is not nil.
func (eagc *ExamApplicationsGDSPMCreate) SetNillableDesignationID(s *string) *ExamApplicationsGDSPMCreate {
	if s != nil {
		eagc.SetDesignationID(*s)
	}
	return eagc
}

// SetPresentDesignation sets the "PresentDesignation" field.
func (eagc *ExamApplicationsGDSPMCreate) SetPresentDesignation(s string) *ExamApplicationsGDSPMCreate {
	eagc.mutation.SetPresentDesignation(s)
	return eagc
}

// SetNillablePresentDesignation sets the "PresentDesignation" field if the given value is not nil.
func (eagc *ExamApplicationsGDSPMCreate) SetNillablePresentDesignation(s *string) *ExamApplicationsGDSPMCreate {
	if s != nil {
		eagc.SetPresentDesignation(*s)
	}
	return eagc
}

// SetEducationCode sets the "EducationCode" field.
func (eagc *ExamApplicationsGDSPMCreate) SetEducationCode(s string) *ExamApplicationsGDSPMCreate {
	eagc.mutation.SetEducationCode(s)
	return eagc
}

// SetNillableEducationCode sets the "EducationCode" field if the given value is not nil.
func (eagc *ExamApplicationsGDSPMCreate) SetNillableEducationCode(s *string) *ExamApplicationsGDSPMCreate {
	if s != nil {
		eagc.SetEducationCode(*s)
	}
	return eagc
}

// SetEducationDescription sets the "EducationDescription" field.
func (eagc *ExamApplicationsGDSPMCreate) SetEducationDescription(s string) *ExamApplicationsGDSPMCreate {
	eagc.mutation.SetEducationDescription(s)
	return eagc
}

// SetNillableEducationDescription sets the "EducationDescription" field if the given value is not nil.
func (eagc *ExamApplicationsGDSPMCreate) SetNillableEducationDescription(s *string) *ExamApplicationsGDSPMCreate {
	if s != nil {
		eagc.SetEducationDescription(*s)
	}
	return eagc
}

// SetFacilityUniqueID sets the "FacilityUniqueID" field.
func (eagc *ExamApplicationsGDSPMCreate) SetFacilityUniqueID(s string) *ExamApplicationsGDSPMCreate {
	eagc.mutation.SetFacilityUniqueID(s)
	return eagc
}

// SetNillableFacilityUniqueID sets the "FacilityUniqueID" field if the given value is not nil.
func (eagc *ExamApplicationsGDSPMCreate) SetNillableFacilityUniqueID(s *string) *ExamApplicationsGDSPMCreate {
	if s != nil {
		eagc.SetFacilityUniqueID(*s)
	}
	return eagc
}

// SetWorkingOfficePincode sets the "WorkingOfficePincode" field.
func (eagc *ExamApplicationsGDSPMCreate) SetWorkingOfficePincode(i int32) *ExamApplicationsGDSPMCreate {
	eagc.mutation.SetWorkingOfficePincode(i)
	return eagc
}

// SetNillableWorkingOfficePincode sets the "WorkingOfficePincode" field if the given value is not nil.
func (eagc *ExamApplicationsGDSPMCreate) SetNillableWorkingOfficePincode(i *int32) *ExamApplicationsGDSPMCreate {
	if i != nil {
		eagc.SetWorkingOfficePincode(*i)
	}
	return eagc
}

// SetWorkingOfficeFacilityID sets the "WorkingOfficeFacilityID" field.
func (eagc *ExamApplicationsGDSPMCreate) SetWorkingOfficeFacilityID(s string) *ExamApplicationsGDSPMCreate {
	eagc.mutation.SetWorkingOfficeFacilityID(s)
	return eagc
}

// SetNillableWorkingOfficeFacilityID sets the "WorkingOfficeFacilityID" field if the given value is not nil.
func (eagc *ExamApplicationsGDSPMCreate) SetNillableWorkingOfficeFacilityID(s *string) *ExamApplicationsGDSPMCreate {
	if s != nil {
		eagc.SetWorkingOfficeFacilityID(*s)
	}
	return eagc
}

// SetWorkingOfficeName sets the "WorkingOfficeName" field.
func (eagc *ExamApplicationsGDSPMCreate) SetWorkingOfficeName(s string) *ExamApplicationsGDSPMCreate {
	eagc.mutation.SetWorkingOfficeName(s)
	return eagc
}

// SetNillableWorkingOfficeName sets the "WorkingOfficeName" field if the given value is not nil.
func (eagc *ExamApplicationsGDSPMCreate) SetNillableWorkingOfficeName(s *string) *ExamApplicationsGDSPMCreate {
	if s != nil {
		eagc.SetWorkingOfficeName(*s)
	}
	return eagc
}

// SetWorkingOfficeCircleFacilityID sets the "WorkingOfficeCircleFacilityID" field.
func (eagc *ExamApplicationsGDSPMCreate) SetWorkingOfficeCircleFacilityID(s string) *ExamApplicationsGDSPMCreate {
	eagc.mutation.SetWorkingOfficeCircleFacilityID(s)
	return eagc
}

// SetNillableWorkingOfficeCircleFacilityID sets the "WorkingOfficeCircleFacilityID" field if the given value is not nil.
func (eagc *ExamApplicationsGDSPMCreate) SetNillableWorkingOfficeCircleFacilityID(s *string) *ExamApplicationsGDSPMCreate {
	if s != nil {
		eagc.SetWorkingOfficeCircleFacilityID(*s)
	}
	return eagc
}

// SetWorkingOfficeCircleName sets the "WorkingOfficeCircleName" field.
func (eagc *ExamApplicationsGDSPMCreate) SetWorkingOfficeCircleName(s string) *ExamApplicationsGDSPMCreate {
	eagc.mutation.SetWorkingOfficeCircleName(s)
	return eagc
}

// SetNillableWorkingOfficeCircleName sets the "WorkingOfficeCircleName" field if the given value is not nil.
func (eagc *ExamApplicationsGDSPMCreate) SetNillableWorkingOfficeCircleName(s *string) *ExamApplicationsGDSPMCreate {
	if s != nil {
		eagc.SetWorkingOfficeCircleName(*s)
	}
	return eagc
}

// SetWorkingOfficeRegionFacilityID sets the "WorkingOfficeRegionFacilityID" field.
func (eagc *ExamApplicationsGDSPMCreate) SetWorkingOfficeRegionFacilityID(s string) *ExamApplicationsGDSPMCreate {
	eagc.mutation.SetWorkingOfficeRegionFacilityID(s)
	return eagc
}

// SetNillableWorkingOfficeRegionFacilityID sets the "WorkingOfficeRegionFacilityID" field if the given value is not nil.
func (eagc *ExamApplicationsGDSPMCreate) SetNillableWorkingOfficeRegionFacilityID(s *string) *ExamApplicationsGDSPMCreate {
	if s != nil {
		eagc.SetWorkingOfficeRegionFacilityID(*s)
	}
	return eagc
}

// SetWorkingOfficeRegionName sets the "WorkingOfficeRegionName" field.
func (eagc *ExamApplicationsGDSPMCreate) SetWorkingOfficeRegionName(s string) *ExamApplicationsGDSPMCreate {
	eagc.mutation.SetWorkingOfficeRegionName(s)
	return eagc
}

// SetNillableWorkingOfficeRegionName sets the "WorkingOfficeRegionName" field if the given value is not nil.
func (eagc *ExamApplicationsGDSPMCreate) SetNillableWorkingOfficeRegionName(s *string) *ExamApplicationsGDSPMCreate {
	if s != nil {
		eagc.SetWorkingOfficeRegionName(*s)
	}
	return eagc
}

// SetWorkingOfficeDivisionFacilityID sets the "WorkingOfficeDivisionFacilityID" field.
func (eagc *ExamApplicationsGDSPMCreate) SetWorkingOfficeDivisionFacilityID(s string) *ExamApplicationsGDSPMCreate {
	eagc.mutation.SetWorkingOfficeDivisionFacilityID(s)
	return eagc
}

// SetNillableWorkingOfficeDivisionFacilityID sets the "WorkingOfficeDivisionFacilityID" field if the given value is not nil.
func (eagc *ExamApplicationsGDSPMCreate) SetNillableWorkingOfficeDivisionFacilityID(s *string) *ExamApplicationsGDSPMCreate {
	if s != nil {
		eagc.SetWorkingOfficeDivisionFacilityID(*s)
	}
	return eagc
}

// SetWorkingOfficeDivisionName sets the "WorkingOfficeDivisionName" field.
func (eagc *ExamApplicationsGDSPMCreate) SetWorkingOfficeDivisionName(s string) *ExamApplicationsGDSPMCreate {
	eagc.mutation.SetWorkingOfficeDivisionName(s)
	return eagc
}

// SetNillableWorkingOfficeDivisionName sets the "WorkingOfficeDivisionName" field if the given value is not nil.
func (eagc *ExamApplicationsGDSPMCreate) SetNillableWorkingOfficeDivisionName(s *string) *ExamApplicationsGDSPMCreate {
	if s != nil {
		eagc.SetWorkingOfficeDivisionName(*s)
	}
	return eagc
}

// SetReportingOfficeFacilityID sets the "ReportingOfficeFacilityID" field.
func (eagc *ExamApplicationsGDSPMCreate) SetReportingOfficeFacilityID(s string) *ExamApplicationsGDSPMCreate {
	eagc.mutation.SetReportingOfficeFacilityID(s)
	return eagc
}

// SetNillableReportingOfficeFacilityID sets the "ReportingOfficeFacilityID" field if the given value is not nil.
func (eagc *ExamApplicationsGDSPMCreate) SetNillableReportingOfficeFacilityID(s *string) *ExamApplicationsGDSPMCreate {
	if s != nil {
		eagc.SetReportingOfficeFacilityID(*s)
	}
	return eagc
}

// SetReportingOfficeName sets the "ReportingOfficeName" field.
func (eagc *ExamApplicationsGDSPMCreate) SetReportingOfficeName(s string) *ExamApplicationsGDSPMCreate {
	eagc.mutation.SetReportingOfficeName(s)
	return eagc
}

// SetNillableReportingOfficeName sets the "ReportingOfficeName" field if the given value is not nil.
func (eagc *ExamApplicationsGDSPMCreate) SetNillableReportingOfficeName(s *string) *ExamApplicationsGDSPMCreate {
	if s != nil {
		eagc.SetReportingOfficeName(*s)
	}
	return eagc
}

// SetLienControllingOfficeID sets the "LienControllingOfficeID" field.
func (eagc *ExamApplicationsGDSPMCreate) SetLienControllingOfficeID(s string) *ExamApplicationsGDSPMCreate {
	eagc.mutation.SetLienControllingOfficeID(s)
	return eagc
}

// SetNillableLienControllingOfficeID sets the "LienControllingOfficeID" field if the given value is not nil.
func (eagc *ExamApplicationsGDSPMCreate) SetNillableLienControllingOfficeID(s *string) *ExamApplicationsGDSPMCreate {
	if s != nil {
		eagc.SetLienControllingOfficeID(*s)
	}
	return eagc
}

// SetLienControllingOfficeName sets the "LienControllingOfficeName" field.
func (eagc *ExamApplicationsGDSPMCreate) SetLienControllingOfficeName(s string) *ExamApplicationsGDSPMCreate {
	eagc.mutation.SetLienControllingOfficeName(s)
	return eagc
}

// SetNillableLienControllingOfficeName sets the "LienControllingOfficeName" field if the given value is not nil.
func (eagc *ExamApplicationsGDSPMCreate) SetNillableLienControllingOfficeName(s *string) *ExamApplicationsGDSPMCreate {
	if s != nil {
		eagc.SetLienControllingOfficeName(*s)
	}
	return eagc
}

// SetInDeputation sets the "InDeputation" field.
func (eagc *ExamApplicationsGDSPMCreate) SetInDeputation(s string) *ExamApplicationsGDSPMCreate {
	eagc.mutation.SetInDeputation(s)
	return eagc
}

// SetNillableInDeputation sets the "InDeputation" field if the given value is not nil.
func (eagc *ExamApplicationsGDSPMCreate) SetNillableInDeputation(s *string) *ExamApplicationsGDSPMCreate {
	if s != nil {
		eagc.SetInDeputation(*s)
	}
	return eagc
}

// SetDeputationType sets the "DeputationType" field.
func (eagc *ExamApplicationsGDSPMCreate) SetDeputationType(s string) *ExamApplicationsGDSPMCreate {
	eagc.mutation.SetDeputationType(s)
	return eagc
}

// SetNillableDeputationType sets the "DeputationType" field if the given value is not nil.
func (eagc *ExamApplicationsGDSPMCreate) SetNillableDeputationType(s *string) *ExamApplicationsGDSPMCreate {
	if s != nil {
		eagc.SetDeputationType(*s)
	}
	return eagc
}

// SetDeputationOfficeUniqueId sets the "DeputationOfficeUniqueId" field.
func (eagc *ExamApplicationsGDSPMCreate) SetDeputationOfficeUniqueId(s string) *ExamApplicationsGDSPMCreate {
	eagc.mutation.SetDeputationOfficeUniqueId(s)
	return eagc
}

// SetNillableDeputationOfficeUniqueId sets the "DeputationOfficeUniqueId" field if the given value is not nil.
func (eagc *ExamApplicationsGDSPMCreate) SetNillableDeputationOfficeUniqueId(s *string) *ExamApplicationsGDSPMCreate {
	if s != nil {
		eagc.SetDeputationOfficeUniqueId(*s)
	}
	return eagc
}

// SetDeputationOfficeFacilityID sets the "DeputationOfficeFacilityID" field.
func (eagc *ExamApplicationsGDSPMCreate) SetDeputationOfficeFacilityID(s string) *ExamApplicationsGDSPMCreate {
	eagc.mutation.SetDeputationOfficeFacilityID(s)
	return eagc
}

// SetNillableDeputationOfficeFacilityID sets the "DeputationOfficeFacilityID" field if the given value is not nil.
func (eagc *ExamApplicationsGDSPMCreate) SetNillableDeputationOfficeFacilityID(s *string) *ExamApplicationsGDSPMCreate {
	if s != nil {
		eagc.SetDeputationOfficeFacilityID(*s)
	}
	return eagc
}

// SetDeputationOfficeName sets the "DeputationOfficeName" field.
func (eagc *ExamApplicationsGDSPMCreate) SetDeputationOfficeName(s string) *ExamApplicationsGDSPMCreate {
	eagc.mutation.SetDeputationOfficeName(s)
	return eagc
}

// SetNillableDeputationOfficeName sets the "DeputationOfficeName" field if the given value is not nil.
func (eagc *ExamApplicationsGDSPMCreate) SetNillableDeputationOfficeName(s *string) *ExamApplicationsGDSPMCreate {
	if s != nil {
		eagc.SetDeputationOfficeName(*s)
	}
	return eagc
}

// SetDeputationControllingOfficeID sets the "DeputationControllingOfficeID" field.
func (eagc *ExamApplicationsGDSPMCreate) SetDeputationControllingOfficeID(s string) *ExamApplicationsGDSPMCreate {
	eagc.mutation.SetDeputationControllingOfficeID(s)
	return eagc
}

// SetNillableDeputationControllingOfficeID sets the "DeputationControllingOfficeID" field if the given value is not nil.
func (eagc *ExamApplicationsGDSPMCreate) SetNillableDeputationControllingOfficeID(s *string) *ExamApplicationsGDSPMCreate {
	if s != nil {
		eagc.SetDeputationControllingOfficeID(*s)
	}
	return eagc
}

// SetDeputationControllingOfficeName sets the "DeputationControllingOfficeName" field.
func (eagc *ExamApplicationsGDSPMCreate) SetDeputationControllingOfficeName(s string) *ExamApplicationsGDSPMCreate {
	eagc.mutation.SetDeputationControllingOfficeName(s)
	return eagc
}

// SetNillableDeputationControllingOfficeName sets the "DeputationControllingOfficeName" field if the given value is not nil.
func (eagc *ExamApplicationsGDSPMCreate) SetNillableDeputationControllingOfficeName(s *string) *ExamApplicationsGDSPMCreate {
	if s != nil {
		eagc.SetDeputationControllingOfficeName(*s)
	}
	return eagc
}

// SetControllingOfficeFacilityID sets the "ControllingOfficeFacilityID" field.
func (eagc *ExamApplicationsGDSPMCreate) SetControllingOfficeFacilityID(s string) *ExamApplicationsGDSPMCreate {
	eagc.mutation.SetControllingOfficeFacilityID(s)
	return eagc
}

// SetNillableControllingOfficeFacilityID sets the "ControllingOfficeFacilityID" field if the given value is not nil.
func (eagc *ExamApplicationsGDSPMCreate) SetNillableControllingOfficeFacilityID(s *string) *ExamApplicationsGDSPMCreate {
	if s != nil {
		eagc.SetControllingOfficeFacilityID(*s)
	}
	return eagc
}

// SetControllingOfficeName sets the "ControllingOfficeName" field.
func (eagc *ExamApplicationsGDSPMCreate) SetControllingOfficeName(s string) *ExamApplicationsGDSPMCreate {
	eagc.mutation.SetControllingOfficeName(s)
	return eagc
}

// SetNillableControllingOfficeName sets the "ControllingOfficeName" field if the given value is not nil.
func (eagc *ExamApplicationsGDSPMCreate) SetNillableControllingOfficeName(s *string) *ExamApplicationsGDSPMCreate {
	if s != nil {
		eagc.SetControllingOfficeName(*s)
	}
	return eagc
}

// SetNodalOfficeFacilityID sets the "NodalOfficeFacilityID" field.
func (eagc *ExamApplicationsGDSPMCreate) SetNodalOfficeFacilityID(s string) *ExamApplicationsGDSPMCreate {
	eagc.mutation.SetNodalOfficeFacilityID(s)
	return eagc
}

// SetNillableNodalOfficeFacilityID sets the "NodalOfficeFacilityID" field if the given value is not nil.
func (eagc *ExamApplicationsGDSPMCreate) SetNillableNodalOfficeFacilityID(s *string) *ExamApplicationsGDSPMCreate {
	if s != nil {
		eagc.SetNodalOfficeFacilityID(*s)
	}
	return eagc
}

// SetNodalOfficeName sets the "NodalOfficeName" field.
func (eagc *ExamApplicationsGDSPMCreate) SetNodalOfficeName(s string) *ExamApplicationsGDSPMCreate {
	eagc.mutation.SetNodalOfficeName(s)
	return eagc
}

// SetNillableNodalOfficeName sets the "NodalOfficeName" field if the given value is not nil.
func (eagc *ExamApplicationsGDSPMCreate) SetNillableNodalOfficeName(s *string) *ExamApplicationsGDSPMCreate {
	if s != nil {
		eagc.SetNodalOfficeName(*s)
	}
	return eagc
}

// SetSubdivisionOfficeFacilityID sets the "SubdivisionOfficeFacilityID" field.
func (eagc *ExamApplicationsGDSPMCreate) SetSubdivisionOfficeFacilityID(s string) *ExamApplicationsGDSPMCreate {
	eagc.mutation.SetSubdivisionOfficeFacilityID(s)
	return eagc
}

// SetNillableSubdivisionOfficeFacilityID sets the "SubdivisionOfficeFacilityID" field if the given value is not nil.
func (eagc *ExamApplicationsGDSPMCreate) SetNillableSubdivisionOfficeFacilityID(s *string) *ExamApplicationsGDSPMCreate {
	if s != nil {
		eagc.SetSubdivisionOfficeFacilityID(*s)
	}
	return eagc
}

// SetSubdivisionOfficeName sets the "SubdivisionOfficeName" field.
func (eagc *ExamApplicationsGDSPMCreate) SetSubdivisionOfficeName(s string) *ExamApplicationsGDSPMCreate {
	eagc.mutation.SetSubdivisionOfficeName(s)
	return eagc
}

// SetNillableSubdivisionOfficeName sets the "SubdivisionOfficeName" field if the given value is not nil.
func (eagc *ExamApplicationsGDSPMCreate) SetNillableSubdivisionOfficeName(s *string) *ExamApplicationsGDSPMCreate {
	if s != nil {
		eagc.SetSubdivisionOfficeName(*s)
	}
	return eagc
}

// SetExamCityCenterCode sets the "ExamCityCenterCode" field.
func (eagc *ExamApplicationsGDSPMCreate) SetExamCityCenterCode(i int32) *ExamApplicationsGDSPMCreate {
	eagc.mutation.SetExamCityCenterCode(i)
	return eagc
}

// SetNillableExamCityCenterCode sets the "ExamCityCenterCode" field if the given value is not nil.
func (eagc *ExamApplicationsGDSPMCreate) SetNillableExamCityCenterCode(i *int32) *ExamApplicationsGDSPMCreate {
	if i != nil {
		eagc.SetExamCityCenterCode(*i)
	}
	return eagc
}

// SetCenterFacilityId sets the "CenterFacilityId" field.
func (eagc *ExamApplicationsGDSPMCreate) SetCenterFacilityId(s string) *ExamApplicationsGDSPMCreate {
	eagc.mutation.SetCenterFacilityId(s)
	return eagc
}

// SetNillableCenterFacilityId sets the "CenterFacilityId" field if the given value is not nil.
func (eagc *ExamApplicationsGDSPMCreate) SetNillableCenterFacilityId(s *string) *ExamApplicationsGDSPMCreate {
	if s != nil {
		eagc.SetCenterFacilityId(*s)
	}
	return eagc
}

// SetCentrePreference sets the "CentrePreference" field.
func (eagc *ExamApplicationsGDSPMCreate) SetCentrePreference(s string) *ExamApplicationsGDSPMCreate {
	eagc.mutation.SetCentrePreference(s)
	return eagc
}

// SetNillableCentrePreference sets the "CentrePreference" field if the given value is not nil.
func (eagc *ExamApplicationsGDSPMCreate) SetNillableCentrePreference(s *string) *ExamApplicationsGDSPMCreate {
	if s != nil {
		eagc.SetCentrePreference(*s)
	}
	return eagc
}

// SetSignature sets the "Signature" field.
func (eagc *ExamApplicationsGDSPMCreate) SetSignature(s string) *ExamApplicationsGDSPMCreate {
	eagc.mutation.SetSignature(s)
	return eagc
}

// SetNillableSignature sets the "Signature" field if the given value is not nil.
func (eagc *ExamApplicationsGDSPMCreate) SetNillableSignature(s *string) *ExamApplicationsGDSPMCreate {
	if s != nil {
		eagc.SetSignature(*s)
	}
	return eagc
}

// SetPhoto sets the "Photo" field.
func (eagc *ExamApplicationsGDSPMCreate) SetPhoto(s string) *ExamApplicationsGDSPMCreate {
	eagc.mutation.SetPhoto(s)
	return eagc
}

// SetNillablePhoto sets the "Photo" field if the given value is not nil.
func (eagc *ExamApplicationsGDSPMCreate) SetNillablePhoto(s *string) *ExamApplicationsGDSPMCreate {
	if s != nil {
		eagc.SetPhoto(*s)
	}
	return eagc
}

// SetSignaturePath sets the "SignaturePath" field.
func (eagc *ExamApplicationsGDSPMCreate) SetSignaturePath(s string) *ExamApplicationsGDSPMCreate {
	eagc.mutation.SetSignaturePath(s)
	return eagc
}

// SetNillableSignaturePath sets the "SignaturePath" field if the given value is not nil.
func (eagc *ExamApplicationsGDSPMCreate) SetNillableSignaturePath(s *string) *ExamApplicationsGDSPMCreate {
	if s != nil {
		eagc.SetSignaturePath(*s)
	}
	return eagc
}

// SetPhotoPath sets the "PhotoPath" field.
func (eagc *ExamApplicationsGDSPMCreate) SetPhotoPath(s string) *ExamApplicationsGDSPMCreate {
	eagc.mutation.SetPhotoPath(s)
	return eagc
}

// SetNillablePhotoPath sets the "PhotoPath" field if the given value is not nil.
func (eagc *ExamApplicationsGDSPMCreate) SetNillablePhotoPath(s *string) *ExamApplicationsGDSPMCreate {
	if s != nil {
		eagc.SetPhotoPath(*s)
	}
	return eagc
}

// SetTempHallTicket sets the "TempHallTicket" field.
func (eagc *ExamApplicationsGDSPMCreate) SetTempHallTicket(s string) *ExamApplicationsGDSPMCreate {
	eagc.mutation.SetTempHallTicket(s)
	return eagc
}

// SetNillableTempHallTicket sets the "TempHallTicket" field if the given value is not nil.
func (eagc *ExamApplicationsGDSPMCreate) SetNillableTempHallTicket(s *string) *ExamApplicationsGDSPMCreate {
	if s != nil {
		eagc.SetTempHallTicket(*s)
	}
	return eagc
}

// SetCandidateRemarks sets the "CandidateRemarks" field.
func (eagc *ExamApplicationsGDSPMCreate) SetCandidateRemarks(s string) *ExamApplicationsGDSPMCreate {
	eagc.mutation.SetCandidateRemarks(s)
	return eagc
}

// SetNillableCandidateRemarks sets the "CandidateRemarks" field if the given value is not nil.
func (eagc *ExamApplicationsGDSPMCreate) SetNillableCandidateRemarks(s *string) *ExamApplicationsGDSPMCreate {
	if s != nil {
		eagc.SetCandidateRemarks(*s)
	}
	return eagc
}

// SetVAGeneralRemarks sets the "VAGeneralRemarks" field.
func (eagc *ExamApplicationsGDSPMCreate) SetVAGeneralRemarks(s string) *ExamApplicationsGDSPMCreate {
	eagc.mutation.SetVAGeneralRemarks(s)
	return eagc
}

// SetNillableVAGeneralRemarks sets the "VAGeneralRemarks" field if the given value is not nil.
func (eagc *ExamApplicationsGDSPMCreate) SetNillableVAGeneralRemarks(s *string) *ExamApplicationsGDSPMCreate {
	if s != nil {
		eagc.SetVAGeneralRemarks(*s)
	}
	return eagc
}

// SetCAGeneralRemarks sets the "CAGeneralRemarks" field.
func (eagc *ExamApplicationsGDSPMCreate) SetCAGeneralRemarks(s string) *ExamApplicationsGDSPMCreate {
	eagc.mutation.SetCAGeneralRemarks(s)
	return eagc
}

// SetNillableCAGeneralRemarks sets the "CAGeneralRemarks" field if the given value is not nil.
func (eagc *ExamApplicationsGDSPMCreate) SetNillableCAGeneralRemarks(s *string) *ExamApplicationsGDSPMCreate {
	if s != nil {
		eagc.SetCAGeneralRemarks(*s)
	}
	return eagc
}

// SetNAGeneralRemarks sets the "NAGeneralRemarks" field.
func (eagc *ExamApplicationsGDSPMCreate) SetNAGeneralRemarks(s string) *ExamApplicationsGDSPMCreate {
	eagc.mutation.SetNAGeneralRemarks(s)
	return eagc
}

// SetNillableNAGeneralRemarks sets the "NAGeneralRemarks" field if the given value is not nil.
func (eagc *ExamApplicationsGDSPMCreate) SetNillableNAGeneralRemarks(s *string) *ExamApplicationsGDSPMCreate {
	if s != nil {
		eagc.SetNAGeneralRemarks(*s)
	}
	return eagc
}

// SetApplicationStatus sets the "ApplicationStatus" field.
func (eagc *ExamApplicationsGDSPMCreate) SetApplicationStatus(s string) *ExamApplicationsGDSPMCreate {
	eagc.mutation.SetApplicationStatus(s)
	return eagc
}

// SetNillableApplicationStatus sets the "ApplicationStatus" field if the given value is not nil.
func (eagc *ExamApplicationsGDSPMCreate) SetNillableApplicationStatus(s *string) *ExamApplicationsGDSPMCreate {
	if s != nil {
		eagc.SetApplicationStatus(*s)
	}
	return eagc
}

// SetStatus sets the "Status" field.
func (eagc *ExamApplicationsGDSPMCreate) SetStatus(s string) *ExamApplicationsGDSPMCreate {
	eagc.mutation.SetStatus(s)
	return eagc
}

// SetNillableStatus sets the "Status" field if the given value is not nil.
func (eagc *ExamApplicationsGDSPMCreate) SetNillableStatus(s *string) *ExamApplicationsGDSPMCreate {
	if s != nil {
		eagc.SetStatus(*s)
	}
	return eagc
}

// SetRecommendedStatus sets the "RecommendedStatus" field.
func (eagc *ExamApplicationsGDSPMCreate) SetRecommendedStatus(s string) *ExamApplicationsGDSPMCreate {
	eagc.mutation.SetRecommendedStatus(s)
	return eagc
}

// SetNillableRecommendedStatus sets the "RecommendedStatus" field if the given value is not nil.
func (eagc *ExamApplicationsGDSPMCreate) SetNillableRecommendedStatus(s *string) *ExamApplicationsGDSPMCreate {
	if s != nil {
		eagc.SetRecommendedStatus(*s)
	}
	return eagc
}

// SetApplicationWdlDate sets the "ApplicationWdlDate" field.
func (eagc *ExamApplicationsGDSPMCreate) SetApplicationWdlDate(t time.Time) *ExamApplicationsGDSPMCreate {
	eagc.mutation.SetApplicationWdlDate(t)
	return eagc
}

// SetNillableApplicationWdlDate sets the "ApplicationWdlDate" field if the given value is not nil.
func (eagc *ExamApplicationsGDSPMCreate) SetNillableApplicationWdlDate(t *time.Time) *ExamApplicationsGDSPMCreate {
	if t != nil {
		eagc.SetApplicationWdlDate(*t)
	}
	return eagc
}

// SetVAUserId sets the "VA_UserId" field.
func (eagc *ExamApplicationsGDSPMCreate) SetVAUserId(i int32) *ExamApplicationsGDSPMCreate {
	eagc.mutation.SetVAUserId(i)
	return eagc
}

// SetNillableVAUserId sets the "VA_UserId" field if the given value is not nil.
func (eagc *ExamApplicationsGDSPMCreate) SetNillableVAUserId(i *int32) *ExamApplicationsGDSPMCreate {
	if i != nil {
		eagc.SetVAUserId(*i)
	}
	return eagc
}

// SetVAUserName sets the "VA_UserName" field.
func (eagc *ExamApplicationsGDSPMCreate) SetVAUserName(s string) *ExamApplicationsGDSPMCreate {
	eagc.mutation.SetVAUserName(s)
	return eagc
}

// SetNillableVAUserName sets the "VA_UserName" field if the given value is not nil.
func (eagc *ExamApplicationsGDSPMCreate) SetNillableVAUserName(s *string) *ExamApplicationsGDSPMCreate {
	if s != nil {
		eagc.SetVAUserName(*s)
	}
	return eagc
}

// SetVAEmployeeID sets the "VA_EmployeeID" field.
func (eagc *ExamApplicationsGDSPMCreate) SetVAEmployeeID(s string) *ExamApplicationsGDSPMCreate {
	eagc.mutation.SetVAEmployeeID(s)
	return eagc
}

// SetNillableVAEmployeeID sets the "VA_EmployeeID" field if the given value is not nil.
func (eagc *ExamApplicationsGDSPMCreate) SetNillableVAEmployeeID(s *string) *ExamApplicationsGDSPMCreate {
	if s != nil {
		eagc.SetVAEmployeeID(*s)
	}
	return eagc
}

// SetVAEmployeeDesignation sets the "VA_EmployeeDesignation" field.
func (eagc *ExamApplicationsGDSPMCreate) SetVAEmployeeDesignation(s string) *ExamApplicationsGDSPMCreate {
	eagc.mutation.SetVAEmployeeDesignation(s)
	return eagc
}

// SetNillableVAEmployeeDesignation sets the "VA_EmployeeDesignation" field if the given value is not nil.
func (eagc *ExamApplicationsGDSPMCreate) SetNillableVAEmployeeDesignation(s *string) *ExamApplicationsGDSPMCreate {
	if s != nil {
		eagc.SetVAEmployeeDesignation(*s)
	}
	return eagc
}

// SetVARemarks sets the "VA_Remarks" field.
func (eagc *ExamApplicationsGDSPMCreate) SetVARemarks(s string) *ExamApplicationsGDSPMCreate {
	eagc.mutation.SetVARemarks(s)
	return eagc
}

// SetNillableVARemarks sets the "VA_Remarks" field if the given value is not nil.
func (eagc *ExamApplicationsGDSPMCreate) SetNillableVARemarks(s *string) *ExamApplicationsGDSPMCreate {
	if s != nil {
		eagc.SetVARemarks(*s)
	}
	return eagc
}

// SetVADate sets the "VA_Date" field.
func (eagc *ExamApplicationsGDSPMCreate) SetVADate(t time.Time) *ExamApplicationsGDSPMCreate {
	eagc.mutation.SetVADate(t)
	return eagc
}

// SetNillableVADate sets the "VA_Date" field if the given value is not nil.
func (eagc *ExamApplicationsGDSPMCreate) SetNillableVADate(t *time.Time) *ExamApplicationsGDSPMCreate {
	if t != nil {
		eagc.SetVADate(*t)
	}
	return eagc
}

// SetCAUserId sets the "CA_UserId" field.
func (eagc *ExamApplicationsGDSPMCreate) SetCAUserId(i int32) *ExamApplicationsGDSPMCreate {
	eagc.mutation.SetCAUserId(i)
	return eagc
}

// SetNillableCAUserId sets the "CA_UserId" field if the given value is not nil.
func (eagc *ExamApplicationsGDSPMCreate) SetNillableCAUserId(i *int32) *ExamApplicationsGDSPMCreate {
	if i != nil {
		eagc.SetCAUserId(*i)
	}
	return eagc
}

// SetCAUserName sets the "CA_UserName" field.
func (eagc *ExamApplicationsGDSPMCreate) SetCAUserName(s string) *ExamApplicationsGDSPMCreate {
	eagc.mutation.SetCAUserName(s)
	return eagc
}

// SetNillableCAUserName sets the "CA_UserName" field if the given value is not nil.
func (eagc *ExamApplicationsGDSPMCreate) SetNillableCAUserName(s *string) *ExamApplicationsGDSPMCreate {
	if s != nil {
		eagc.SetCAUserName(*s)
	}
	return eagc
}

// SetCAEmployeeID sets the "CA_EmployeeID" field.
func (eagc *ExamApplicationsGDSPMCreate) SetCAEmployeeID(s string) *ExamApplicationsGDSPMCreate {
	eagc.mutation.SetCAEmployeeID(s)
	return eagc
}

// SetNillableCAEmployeeID sets the "CA_EmployeeID" field if the given value is not nil.
func (eagc *ExamApplicationsGDSPMCreate) SetNillableCAEmployeeID(s *string) *ExamApplicationsGDSPMCreate {
	if s != nil {
		eagc.SetCAEmployeeID(*s)
	}
	return eagc
}

// SetCAEmployeeDesignation sets the "CA_EmployeeDesignation" field.
func (eagc *ExamApplicationsGDSPMCreate) SetCAEmployeeDesignation(s string) *ExamApplicationsGDSPMCreate {
	eagc.mutation.SetCAEmployeeDesignation(s)
	return eagc
}

// SetNillableCAEmployeeDesignation sets the "CA_EmployeeDesignation" field if the given value is not nil.
func (eagc *ExamApplicationsGDSPMCreate) SetNillableCAEmployeeDesignation(s *string) *ExamApplicationsGDSPMCreate {
	if s != nil {
		eagc.SetCAEmployeeDesignation(*s)
	}
	return eagc
}

// SetCARemarks sets the "CA_Remarks" field.
func (eagc *ExamApplicationsGDSPMCreate) SetCARemarks(s string) *ExamApplicationsGDSPMCreate {
	eagc.mutation.SetCARemarks(s)
	return eagc
}

// SetNillableCARemarks sets the "CA_Remarks" field if the given value is not nil.
func (eagc *ExamApplicationsGDSPMCreate) SetNillableCARemarks(s *string) *ExamApplicationsGDSPMCreate {
	if s != nil {
		eagc.SetCARemarks(*s)
	}
	return eagc
}

// SetCADate sets the "CA_Date" field.
func (eagc *ExamApplicationsGDSPMCreate) SetCADate(t time.Time) *ExamApplicationsGDSPMCreate {
	eagc.mutation.SetCADate(t)
	return eagc
}

// SetNillableCADate sets the "CA_Date" field if the given value is not nil.
func (eagc *ExamApplicationsGDSPMCreate) SetNillableCADate(t *time.Time) *ExamApplicationsGDSPMCreate {
	if t != nil {
		eagc.SetCADate(*t)
	}
	return eagc
}

// SetNAUserId sets the "NA_UserId" field.
func (eagc *ExamApplicationsGDSPMCreate) SetNAUserId(i int32) *ExamApplicationsGDSPMCreate {
	eagc.mutation.SetNAUserId(i)
	return eagc
}

// SetNillableNAUserId sets the "NA_UserId" field if the given value is not nil.
func (eagc *ExamApplicationsGDSPMCreate) SetNillableNAUserId(i *int32) *ExamApplicationsGDSPMCreate {
	if i != nil {
		eagc.SetNAUserId(*i)
	}
	return eagc
}

// SetNAUserName sets the "NA_UserName" field.
func (eagc *ExamApplicationsGDSPMCreate) SetNAUserName(s string) *ExamApplicationsGDSPMCreate {
	eagc.mutation.SetNAUserName(s)
	return eagc
}

// SetNillableNAUserName sets the "NA_UserName" field if the given value is not nil.
func (eagc *ExamApplicationsGDSPMCreate) SetNillableNAUserName(s *string) *ExamApplicationsGDSPMCreate {
	if s != nil {
		eagc.SetNAUserName(*s)
	}
	return eagc
}

// SetNAEmployeeID sets the "NA_EmployeeID" field.
func (eagc *ExamApplicationsGDSPMCreate) SetNAEmployeeID(s string) *ExamApplicationsGDSPMCreate {
	eagc.mutation.SetNAEmployeeID(s)
	return eagc
}

// SetNillableNAEmployeeID sets the "NA_EmployeeID" field if the given value is not nil.
func (eagc *ExamApplicationsGDSPMCreate) SetNillableNAEmployeeID(s *string) *ExamApplicationsGDSPMCreate {
	if s != nil {
		eagc.SetNAEmployeeID(*s)
	}
	return eagc
}

// SetNAEmployeeDesignation sets the "NA_EmployeeDesignation" field.
func (eagc *ExamApplicationsGDSPMCreate) SetNAEmployeeDesignation(s string) *ExamApplicationsGDSPMCreate {
	eagc.mutation.SetNAEmployeeDesignation(s)
	return eagc
}

// SetNillableNAEmployeeDesignation sets the "NA_EmployeeDesignation" field if the given value is not nil.
func (eagc *ExamApplicationsGDSPMCreate) SetNillableNAEmployeeDesignation(s *string) *ExamApplicationsGDSPMCreate {
	if s != nil {
		eagc.SetNAEmployeeDesignation(*s)
	}
	return eagc
}

// SetNARemarks sets the "NA_Remarks" field.
func (eagc *ExamApplicationsGDSPMCreate) SetNARemarks(s string) *ExamApplicationsGDSPMCreate {
	eagc.mutation.SetNARemarks(s)
	return eagc
}

// SetNillableNARemarks sets the "NA_Remarks" field if the given value is not nil.
func (eagc *ExamApplicationsGDSPMCreate) SetNillableNARemarks(s *string) *ExamApplicationsGDSPMCreate {
	if s != nil {
		eagc.SetNARemarks(*s)
	}
	return eagc
}

// SetNADate sets the "NA_Date" field.
func (eagc *ExamApplicationsGDSPMCreate) SetNADate(t time.Time) *ExamApplicationsGDSPMCreate {
	eagc.mutation.SetNADate(t)
	return eagc
}

// SetNillableNADate sets the "NA_Date" field if the given value is not nil.
func (eagc *ExamApplicationsGDSPMCreate) SetNillableNADate(t *time.Time) *ExamApplicationsGDSPMCreate {
	if t != nil {
		eagc.SetNADate(*t)
	}
	return eagc
}

// SetAppliactionRemarks sets the "AppliactionRemarks" field.
func (eagc *ExamApplicationsGDSPMCreate) SetAppliactionRemarks(s string) *ExamApplicationsGDSPMCreate {
	eagc.mutation.SetAppliactionRemarks(s)
	return eagc
}

// SetNillableAppliactionRemarks sets the "AppliactionRemarks" field if the given value is not nil.
func (eagc *ExamApplicationsGDSPMCreate) SetNillableAppliactionRemarks(s *string) *ExamApplicationsGDSPMCreate {
	if s != nil {
		eagc.SetAppliactionRemarks(*s)
	}
	return eagc
}

// SetCadrePreferences sets the "CadrePreferences" field.
func (eagc *ExamApplicationsGDSPMCreate) SetCadrePreferences(i []interface{}) *ExamApplicationsGDSPMCreate {
	eagc.mutation.SetCadrePreferences(i)
	return eagc
}

// SetCAPreviousRemarks sets the "CAPreviousRemarks" field.
func (eagc *ExamApplicationsGDSPMCreate) SetCAPreviousRemarks(s string) *ExamApplicationsGDSPMCreate {
	eagc.mutation.SetCAPreviousRemarks(s)
	return eagc
}

// SetNillableCAPreviousRemarks sets the "CAPreviousRemarks" field if the given value is not nil.
func (eagc *ExamApplicationsGDSPMCreate) SetNillableCAPreviousRemarks(s *string) *ExamApplicationsGDSPMCreate {
	if s != nil {
		eagc.SetCAPreviousRemarks(*s)
	}
	return eagc
}

// SetPunishmentStatus sets the "PunishmentStatus" field.
func (eagc *ExamApplicationsGDSPMCreate) SetPunishmentStatus(b bool) *ExamApplicationsGDSPMCreate {
	eagc.mutation.SetPunishmentStatus(b)
	return eagc
}

// SetNillablePunishmentStatus sets the "PunishmentStatus" field if the given value is not nil.
func (eagc *ExamApplicationsGDSPMCreate) SetNillablePunishmentStatus(b *bool) *ExamApplicationsGDSPMCreate {
	if b != nil {
		eagc.SetPunishmentStatus(*b)
	}
	return eagc
}

// SetDisciplinaryCaseStatus sets the "DisciplinaryCaseStatus" field.
func (eagc *ExamApplicationsGDSPMCreate) SetDisciplinaryCaseStatus(b bool) *ExamApplicationsGDSPMCreate {
	eagc.mutation.SetDisciplinaryCaseStatus(b)
	return eagc
}

// SetNillableDisciplinaryCaseStatus sets the "DisciplinaryCaseStatus" field if the given value is not nil.
func (eagc *ExamApplicationsGDSPMCreate) SetNillableDisciplinaryCaseStatus(b *bool) *ExamApplicationsGDSPMCreate {
	if b != nil {
		eagc.SetDisciplinaryCaseStatus(*b)
	}
	return eagc
}

// SetGenerateHallTicketFlag sets the "GenerateHallTicketFlag" field.
func (eagc *ExamApplicationsGDSPMCreate) SetGenerateHallTicketFlag(b bool) *ExamApplicationsGDSPMCreate {
	eagc.mutation.SetGenerateHallTicketFlag(b)
	return eagc
}

// SetNillableGenerateHallTicketFlag sets the "GenerateHallTicketFlag" field if the given value is not nil.
func (eagc *ExamApplicationsGDSPMCreate) SetNillableGenerateHallTicketFlag(b *bool) *ExamApplicationsGDSPMCreate {
	if b != nil {
		eagc.SetGenerateHallTicketFlag(*b)
	}
	return eagc
}

// SetHallTicketNumber sets the "HallTicketNumber" field.
func (eagc *ExamApplicationsGDSPMCreate) SetHallTicketNumber(s string) *ExamApplicationsGDSPMCreate {
	eagc.mutation.SetHallTicketNumber(s)
	return eagc
}

// SetNillableHallTicketNumber sets the "HallTicketNumber" field if the given value is not nil.
func (eagc *ExamApplicationsGDSPMCreate) SetNillableHallTicketNumber(s *string) *ExamApplicationsGDSPMCreate {
	if s != nil {
		eagc.SetHallTicketNumber(*s)
	}
	return eagc
}

// SetHallTicketGeneratedFlag sets the "HallTicketGeneratedFlag" field.
func (eagc *ExamApplicationsGDSPMCreate) SetHallTicketGeneratedFlag(b bool) *ExamApplicationsGDSPMCreate {
	eagc.mutation.SetHallTicketGeneratedFlag(b)
	return eagc
}

// SetNillableHallTicketGeneratedFlag sets the "HallTicketGeneratedFlag" field if the given value is not nil.
func (eagc *ExamApplicationsGDSPMCreate) SetNillableHallTicketGeneratedFlag(b *bool) *ExamApplicationsGDSPMCreate {
	if b != nil {
		eagc.SetHallTicketGeneratedFlag(*b)
	}
	return eagc
}

// SetGenerateHallTicketFlagByNO sets the "GenerateHallTicketFlagByNO" field.
func (eagc *ExamApplicationsGDSPMCreate) SetGenerateHallTicketFlagByNO(b bool) *ExamApplicationsGDSPMCreate {
	eagc.mutation.SetGenerateHallTicketFlagByNO(b)
	return eagc
}

// SetNillableGenerateHallTicketFlagByNO sets the "GenerateHallTicketFlagByNO" field if the given value is not nil.
func (eagc *ExamApplicationsGDSPMCreate) SetNillableGenerateHallTicketFlagByNO(b *bool) *ExamApplicationsGDSPMCreate {
	if b != nil {
		eagc.SetGenerateHallTicketFlagByNO(*b)
	}
	return eagc
}

// SetHallTicketGeneratedDate sets the "HallTicketGeneratedDate" field.
func (eagc *ExamApplicationsGDSPMCreate) SetHallTicketGeneratedDate(t time.Time) *ExamApplicationsGDSPMCreate {
	eagc.mutation.SetHallTicketGeneratedDate(t)
	return eagc
}

// SetNillableHallTicketGeneratedDate sets the "HallTicketGeneratedDate" field if the given value is not nil.
func (eagc *ExamApplicationsGDSPMCreate) SetNillableHallTicketGeneratedDate(t *time.Time) *ExamApplicationsGDSPMCreate {
	if t != nil {
		eagc.SetHallTicketGeneratedDate(*t)
	}
	return eagc
}

// SetTemporaryHallTicket sets the "TemporaryHallTicket" field.
func (eagc *ExamApplicationsGDSPMCreate) SetTemporaryHallTicket(s string) *ExamApplicationsGDSPMCreate {
	eagc.mutation.SetTemporaryHallTicket(s)
	return eagc
}

// SetNillableTemporaryHallTicket sets the "TemporaryHallTicket" field if the given value is not nil.
func (eagc *ExamApplicationsGDSPMCreate) SetNillableTemporaryHallTicket(s *string) *ExamApplicationsGDSPMCreate {
	if s != nil {
		eagc.SetTemporaryHallTicket(*s)
	}
	return eagc
}

// SetOptionUsed sets the "OptionUsed" field.
func (eagc *ExamApplicationsGDSPMCreate) SetOptionUsed(s string) *ExamApplicationsGDSPMCreate {
	eagc.mutation.SetOptionUsed(s)
	return eagc
}

// SetNillableOptionUsed sets the "OptionUsed" field if the given value is not nil.
func (eagc *ExamApplicationsGDSPMCreate) SetNillableOptionUsed(s *string) *ExamApplicationsGDSPMCreate {
	if s != nil {
		eagc.SetOptionUsed(*s)
	}
	return eagc
}

// SetRemarks sets the "Remarks" field.
func (eagc *ExamApplicationsGDSPMCreate) SetRemarks(s string) *ExamApplicationsGDSPMCreate {
	eagc.mutation.SetRemarks(s)
	return eagc
}

// SetNillableRemarks sets the "Remarks" field if the given value is not nil.
func (eagc *ExamApplicationsGDSPMCreate) SetNillableRemarks(s *string) *ExamApplicationsGDSPMCreate {
	if s != nil {
		eagc.SetRemarks(*s)
	}
	return eagc
}

// SetCadre sets the "Cadre" field.
func (eagc *ExamApplicationsGDSPMCreate) SetCadre(s string) *ExamApplicationsGDSPMCreate {
	eagc.mutation.SetCadre(s)
	return eagc
}

// SetNillableCadre sets the "Cadre" field if the given value is not nil.
func (eagc *ExamApplicationsGDSPMCreate) SetNillableCadre(s *string) *ExamApplicationsGDSPMCreate {
	if s != nil {
		eagc.SetCadre(*s)
	}
	return eagc
}

// SetEmployeePost sets the "EmployeePost" field.
func (eagc *ExamApplicationsGDSPMCreate) SetEmployeePost(s string) *ExamApplicationsGDSPMCreate {
	eagc.mutation.SetEmployeePost(s)
	return eagc
}

// SetNillableEmployeePost sets the "EmployeePost" field if the given value is not nil.
func (eagc *ExamApplicationsGDSPMCreate) SetNillableEmployeePost(s *string) *ExamApplicationsGDSPMCreate {
	if s != nil {
		eagc.SetEmployeePost(*s)
	}
	return eagc
}

// SetDOJInEligiblePost sets the "DOJInEligiblePost" field.
func (eagc *ExamApplicationsGDSPMCreate) SetDOJInEligiblePost(s string) *ExamApplicationsGDSPMCreate {
	eagc.mutation.SetDOJInEligiblePost(s)
	return eagc
}

// SetNillableDOJInEligiblePost sets the "DOJInEligiblePost" field if the given value is not nil.
func (eagc *ExamApplicationsGDSPMCreate) SetNillableDOJInEligiblePost(s *string) *ExamApplicationsGDSPMCreate {
	if s != nil {
		eagc.SetDOJInEligiblePost(*s)
	}
	return eagc
}

// SetDivisionPreferences sets the "DivisionPreferences" field.
func (eagc *ExamApplicationsGDSPMCreate) SetDivisionPreferences(i []interface{}) *ExamApplicationsGDSPMCreate {
	eagc.mutation.SetDivisionPreferences(i)
	return eagc
}

// SetRoleUserCode sets the "RoleUserCode" field.
func (eagc *ExamApplicationsGDSPMCreate) SetRoleUserCode(i int32) *ExamApplicationsGDSPMCreate {
	eagc.mutation.SetRoleUserCode(i)
	return eagc
}

// SetNillableRoleUserCode sets the "RoleUserCode" field if the given value is not nil.
func (eagc *ExamApplicationsGDSPMCreate) SetNillableRoleUserCode(i *int32) *ExamApplicationsGDSPMCreate {
	if i != nil {
		eagc.SetRoleUserCode(*i)
	}
	return eagc
}

// SetServiceLength sets the "ServiceLength" field.
func (eagc *ExamApplicationsGDSPMCreate) SetServiceLength(i []interface{}) *ExamApplicationsGDSPMCreate {
	eagc.mutation.SetServiceLength(i)
	return eagc
}

// SetNonQualifyingService sets the "NonQualifyingService" field.
func (eagc *ExamApplicationsGDSPMCreate) SetNonQualifyingService(i []interface{}) *ExamApplicationsGDSPMCreate {
	eagc.mutation.SetNonQualifyingService(i)
	return eagc
}

// SetDCInPresentCadre sets the "DCInPresentCadre" field.
func (eagc *ExamApplicationsGDSPMCreate) SetDCInPresentCadre(s string) *ExamApplicationsGDSPMCreate {
	eagc.mutation.SetDCInPresentCadre(s)
	return eagc
}

// SetNillableDCInPresentCadre sets the "DCInPresentCadre" field if the given value is not nil.
func (eagc *ExamApplicationsGDSPMCreate) SetNillableDCInPresentCadre(s *string) *ExamApplicationsGDSPMCreate {
	if s != nil {
		eagc.SetDCInPresentCadre(*s)
	}
	return eagc
}

// SetReportingOfficeID sets the "ReportingOfficeID" field.
func (eagc *ExamApplicationsGDSPMCreate) SetReportingOfficeID(s string) *ExamApplicationsGDSPMCreate {
	eagc.mutation.SetReportingOfficeID(s)
	return eagc
}

// SetNillableReportingOfficeID sets the "ReportingOfficeID" field if the given value is not nil.
func (eagc *ExamApplicationsGDSPMCreate) SetNillableReportingOfficeID(s *string) *ExamApplicationsGDSPMCreate {
	if s != nil {
		eagc.SetReportingOfficeID(*s)
	}
	return eagc
}

// SetPostPreferences sets the "PostPreferences" field.
func (eagc *ExamApplicationsGDSPMCreate) SetPostPreferences(i []interface{}) *ExamApplicationsGDSPMCreate {
	eagc.mutation.SetPostPreferences(i)
	return eagc
}

// SetUnitPreferences sets the "UnitPreferences" field.
func (eagc *ExamApplicationsGDSPMCreate) SetUnitPreferences(i []interface{}) *ExamApplicationsGDSPMCreate {
	eagc.mutation.SetUnitPreferences(i)
	return eagc
}

// SetCenterId sets the "CenterId" field.
func (eagc *ExamApplicationsGDSPMCreate) SetCenterId(i int32) *ExamApplicationsGDSPMCreate {
	eagc.mutation.SetCenterId(i)
	return eagc
}

// SetNillableCenterId sets the "CenterId" field if the given value is not nil.
func (eagc *ExamApplicationsGDSPMCreate) SetNillableCenterId(i *int32) *ExamApplicationsGDSPMCreate {
	if i != nil {
		eagc.SetCenterId(*i)
	}
	return eagc
}

// SetCenterCode sets the "CenterCode" field.
func (eagc *ExamApplicationsGDSPMCreate) SetCenterCode(i int32) *ExamApplicationsGDSPMCreate {
	eagc.mutation.SetCenterCode(i)
	return eagc
}

// SetNillableCenterCode sets the "CenterCode" field if the given value is not nil.
func (eagc *ExamApplicationsGDSPMCreate) SetNillableCenterCode(i *int32) *ExamApplicationsGDSPMCreate {
	if i != nil {
		eagc.SetCenterCode(*i)
	}
	return eagc
}

// SetClaimingQualifyingService sets the "ClaimingQualifyingService" field.
func (eagc *ExamApplicationsGDSPMCreate) SetClaimingQualifyingService(s string) *ExamApplicationsGDSPMCreate {
	eagc.mutation.SetClaimingQualifyingService(s)
	return eagc
}

// SetNillableClaimingQualifyingService sets the "ClaimingQualifyingService" field if the given value is not nil.
func (eagc *ExamApplicationsGDSPMCreate) SetNillableClaimingQualifyingService(s *string) *ExamApplicationsGDSPMCreate {
	if s != nil {
		eagc.SetClaimingQualifyingService(*s)
	}
	return eagc
}

// SetDeputationOfficePincode sets the "DeputationOfficePincode" field.
func (eagc *ExamApplicationsGDSPMCreate) SetDeputationOfficePincode(s string) *ExamApplicationsGDSPMCreate {
	eagc.mutation.SetDeputationOfficePincode(s)
	return eagc
}

// SetNillableDeputationOfficePincode sets the "DeputationOfficePincode" field if the given value is not nil.
func (eagc *ExamApplicationsGDSPMCreate) SetNillableDeputationOfficePincode(s *string) *ExamApplicationsGDSPMCreate {
	if s != nil {
		eagc.SetDeputationOfficePincode(*s)
	}
	return eagc
}

// SetCircleSID sets the "CircleSID" field.
func (eagc *ExamApplicationsGDSPMCreate) SetCircleSID(i int32) *ExamApplicationsGDSPMCreate {
	eagc.mutation.SetCircleSID(i)
	return eagc
}

// SetNillableCircleSID sets the "CircleSID" field if the given value is not nil.
func (eagc *ExamApplicationsGDSPMCreate) SetNillableCircleSID(i *int32) *ExamApplicationsGDSPMCreate {
	if i != nil {
		eagc.SetCircleSID(*i)
	}
	return eagc
}

// SetFacilityName sets the "FacilityName" field.
func (eagc *ExamApplicationsGDSPMCreate) SetFacilityName(s string) *ExamApplicationsGDSPMCreate {
	eagc.mutation.SetFacilityName(s)
	return eagc
}

// SetNillableFacilityName sets the "FacilityName" field if the given value is not nil.
func (eagc *ExamApplicationsGDSPMCreate) SetNillableFacilityName(s *string) *ExamApplicationsGDSPMCreate {
	if s != nil {
		eagc.SetFacilityName(*s)
	}
	return eagc
}

// SetUpdatedAt sets the "UpdatedAt" field.
func (eagc *ExamApplicationsGDSPMCreate) SetUpdatedAt(t time.Time) *ExamApplicationsGDSPMCreate {
	eagc.mutation.SetUpdatedAt(t)
	return eagc
}

// SetNillableUpdatedAt sets the "UpdatedAt" field if the given value is not nil.
func (eagc *ExamApplicationsGDSPMCreate) SetNillableUpdatedAt(t *time.Time) *ExamApplicationsGDSPMCreate {
	if t != nil {
		eagc.SetUpdatedAt(*t)
	}
	return eagc
}

// SetUpdatedBy sets the "UpdatedBy" field.
func (eagc *ExamApplicationsGDSPMCreate) SetUpdatedBy(s string) *ExamApplicationsGDSPMCreate {
	eagc.mutation.SetUpdatedBy(s)
	return eagc
}

// SetNillableUpdatedBy sets the "UpdatedBy" field if the given value is not nil.
func (eagc *ExamApplicationsGDSPMCreate) SetNillableUpdatedBy(s *string) *ExamApplicationsGDSPMCreate {
	if s != nil {
		eagc.SetUpdatedBy(*s)
	}
	return eagc
}

// SetExamCenterHall sets the "ExamCenterHall" field.
func (eagc *ExamApplicationsGDSPMCreate) SetExamCenterHall(i int32) *ExamApplicationsGDSPMCreate {
	eagc.mutation.SetExamCenterHall(i)
	return eagc
}

// SetNillableExamCenterHall sets the "ExamCenterHall" field if the given value is not nil.
func (eagc *ExamApplicationsGDSPMCreate) SetNillableExamCenterHall(i *int32) *ExamApplicationsGDSPMCreate {
	if i != nil {
		eagc.SetExamCenterHall(*i)
	}
	return eagc
}

// SetHallName sets the "HallName" field.
func (eagc *ExamApplicationsGDSPMCreate) SetHallName(s string) *ExamApplicationsGDSPMCreate {
	eagc.mutation.SetHallName(s)
	return eagc
}

// SetNillableHallName sets the "HallName" field if the given value is not nil.
func (eagc *ExamApplicationsGDSPMCreate) SetNillableHallName(s *string) *ExamApplicationsGDSPMCreate {
	if s != nil {
		eagc.SetHallName(*s)
	}
	return eagc
}

// SetGDSEngagement sets the "GDSEngagement" field.
func (eagc *ExamApplicationsGDSPMCreate) SetGDSEngagement(i []interface{}) *ExamApplicationsGDSPMCreate {
	eagc.mutation.SetGDSEngagement(i)
	return eagc
}

// SetPMMailGuardMTSEngagement sets the "PMMailGuardMTSEngagement" field.
func (eagc *ExamApplicationsGDSPMCreate) SetPMMailGuardMTSEngagement(i []interface{}) *ExamApplicationsGDSPMCreate {
	eagc.mutation.SetPMMailGuardMTSEngagement(i)
	return eagc
}

// SetID sets the "id" field.
func (eagc *ExamApplicationsGDSPMCreate) SetID(i int64) *ExamApplicationsGDSPMCreate {
	eagc.mutation.SetID(i)
	return eagc
}

// AddUsersGDSPMRefIDs adds the "UsersGDSPMRef" edge to the UserMaster entity by IDs.
func (eagc *ExamApplicationsGDSPMCreate) AddUsersGDSPMRefIDs(ids ...int64) *ExamApplicationsGDSPMCreate {
	eagc.mutation.AddUsersGDSPMRefIDs(ids...)
	return eagc
}

// AddUsersGDSPMRef adds the "UsersGDSPMRef" edges to the UserMaster entity.
func (eagc *ExamApplicationsGDSPMCreate) AddUsersGDSPMRef(u ...*UserMaster) *ExamApplicationsGDSPMCreate {
	ids := make([]int64, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return eagc.AddUsersGDSPMRefIDs(ids...)
}

// AddCadrePrefRefGDSPMIDs adds the "CadrePrefRefGDSPM" edge to the Cadre_Choice_PM entity by IDs.
func (eagc *ExamApplicationsGDSPMCreate) AddCadrePrefRefGDSPMIDs(ids ...int32) *ExamApplicationsGDSPMCreate {
	eagc.mutation.AddCadrePrefRefGDSPMIDs(ids...)
	return eagc
}

// AddCadrePrefRefGDSPM adds the "CadrePrefRefGDSPM" edges to the Cadre_Choice_PM entity.
func (eagc *ExamApplicationsGDSPMCreate) AddCadrePrefRefGDSPM(c ...*Cadre_Choice_PM) *ExamApplicationsGDSPMCreate {
	ids := make([]int32, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return eagc.AddCadrePrefRefGDSPMIDs(ids...)
}

// AddCirclePrefRefGDSPMIDs adds the "CirclePrefRefGDSPM" edge to the Division_Choice_PM entity by IDs.
func (eagc *ExamApplicationsGDSPMCreate) AddCirclePrefRefGDSPMIDs(ids ...int32) *ExamApplicationsGDSPMCreate {
	eagc.mutation.AddCirclePrefRefGDSPMIDs(ids...)
	return eagc
}

// AddCirclePrefRefGDSPM adds the "CirclePrefRefGDSPM" edges to the Division_Choice_PM entity.
func (eagc *ExamApplicationsGDSPMCreate) AddCirclePrefRefGDSPM(d ...*Division_Choice_PM) *ExamApplicationsGDSPMCreate {
	ids := make([]int32, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return eagc.AddCirclePrefRefGDSPMIDs(ids...)
}

// AddGDSPMApplicationsRefIDs adds the "GDSPMApplicationsRef" edge to the RecommendationsGDSPMApplications entity by IDs.
func (eagc *ExamApplicationsGDSPMCreate) AddGDSPMApplicationsRefIDs(ids ...int64) *ExamApplicationsGDSPMCreate {
	eagc.mutation.AddGDSPMApplicationsRefIDs(ids...)
	return eagc
}

// AddGDSPMApplicationsRef adds the "GDSPMApplicationsRef" edges to the RecommendationsGDSPMApplications entity.
func (eagc *ExamApplicationsGDSPMCreate) AddGDSPMApplicationsRef(r ...*RecommendationsGDSPMApplications) *ExamApplicationsGDSPMCreate {
	ids := make([]int64, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return eagc.AddGDSPMApplicationsRefIDs(ids...)
}

// AddLogDatumIDs adds the "LogData" edge to the Logs entity by IDs.
func (eagc *ExamApplicationsGDSPMCreate) AddLogDatumIDs(ids ...int64) *ExamApplicationsGDSPMCreate {
	eagc.mutation.AddLogDatumIDs(ids...)
	return eagc
}

// AddLogData adds the "LogData" edges to the Logs entity.
func (eagc *ExamApplicationsGDSPMCreate) AddLogData(l ...*Logs) *ExamApplicationsGDSPMCreate {
	ids := make([]int64, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return eagc.AddLogDatumIDs(ids...)
}

// SetExamsID sets the "Exams" edge to the Exam entity by ID.
func (eagc *ExamApplicationsGDSPMCreate) SetExamsID(id int32) *ExamApplicationsGDSPMCreate {
	eagc.mutation.SetExamsID(id)
	return eagc
}

// SetNillableExamsID sets the "Exams" edge to the Exam entity by ID if the given value is not nil.
func (eagc *ExamApplicationsGDSPMCreate) SetNillableExamsID(id *int32) *ExamApplicationsGDSPMCreate {
	if id != nil {
		eagc = eagc.SetExamsID(*id)
	}
	return eagc
}

// SetExams sets the "Exams" edge to the Exam entity.
func (eagc *ExamApplicationsGDSPMCreate) SetExams(e *Exam) *ExamApplicationsGDSPMCreate {
	return eagc.SetExamsID(e.ID)
}

// SetGDSPMExamCentresID sets the "GDSPMExamCentres" edge to the Center entity by ID.
func (eagc *ExamApplicationsGDSPMCreate) SetGDSPMExamCentresID(id int32) *ExamApplicationsGDSPMCreate {
	eagc.mutation.SetGDSPMExamCentresID(id)
	return eagc
}

// SetNillableGDSPMExamCentresID sets the "GDSPMExamCentres" edge to the Center entity by ID if the given value is not nil.
func (eagc *ExamApplicationsGDSPMCreate) SetNillableGDSPMExamCentresID(id *int32) *ExamApplicationsGDSPMCreate {
	if id != nil {
		eagc = eagc.SetGDSPMExamCentresID(*id)
	}
	return eagc
}

// SetGDSPMExamCentres sets the "GDSPMExamCentres" edge to the Center entity.
func (eagc *ExamApplicationsGDSPMCreate) SetGDSPMExamCentres(c *Center) *ExamApplicationsGDSPMCreate {
	return eagc.SetGDSPMExamCentresID(c.ID)
}

// SetCircleRefsGDSPMID sets the "CircleRefsGDSPM" edge to the CircleSummaryForNO entity by ID.
func (eagc *ExamApplicationsGDSPMCreate) SetCircleRefsGDSPMID(id int32) *ExamApplicationsGDSPMCreate {
	eagc.mutation.SetCircleRefsGDSPMID(id)
	return eagc
}

// SetNillableCircleRefsGDSPMID sets the "CircleRefsGDSPM" edge to the CircleSummaryForNO entity by ID if the given value is not nil.
func (eagc *ExamApplicationsGDSPMCreate) SetNillableCircleRefsGDSPMID(id *int32) *ExamApplicationsGDSPMCreate {
	if id != nil {
		eagc = eagc.SetCircleRefsGDSPMID(*id)
	}
	return eagc
}

// SetCircleRefsGDSPM sets the "CircleRefsGDSPM" edge to the CircleSummaryForNO entity.
func (eagc *ExamApplicationsGDSPMCreate) SetCircleRefsGDSPM(c *CircleSummaryForNO) *ExamApplicationsGDSPMCreate {
	return eagc.SetCircleRefsGDSPMID(c.ID)
}

// SetRoleusersID sets the "roleusers" edge to the RoleMaster entity by ID.
func (eagc *ExamApplicationsGDSPMCreate) SetRoleusersID(id int32) *ExamApplicationsGDSPMCreate {
	eagc.mutation.SetRoleusersID(id)
	return eagc
}

// SetNillableRoleusersID sets the "roleusers" edge to the RoleMaster entity by ID if the given value is not nil.
func (eagc *ExamApplicationsGDSPMCreate) SetNillableRoleusersID(id *int32) *ExamApplicationsGDSPMCreate {
	if id != nil {
		eagc = eagc.SetRoleusersID(*id)
	}
	return eagc
}

// SetRoleusers sets the "roleusers" edge to the RoleMaster entity.
func (eagc *ExamApplicationsGDSPMCreate) SetRoleusers(r *RoleMaster) *ExamApplicationsGDSPMCreate {
	return eagc.SetRoleusersID(r.ID)
}

// SetExamcitycenterID sets the "examcitycenter" edge to the ExamCityCenter entity by ID.
func (eagc *ExamApplicationsGDSPMCreate) SetExamcitycenterID(id int32) *ExamApplicationsGDSPMCreate {
	eagc.mutation.SetExamcitycenterID(id)
	return eagc
}

// SetNillableExamcitycenterID sets the "examcitycenter" edge to the ExamCityCenter entity by ID if the given value is not nil.
func (eagc *ExamApplicationsGDSPMCreate) SetNillableExamcitycenterID(id *int32) *ExamApplicationsGDSPMCreate {
	if id != nil {
		eagc = eagc.SetExamcitycenterID(*id)
	}
	return eagc
}

// SetExamcitycenter sets the "examcitycenter" edge to the ExamCityCenter entity.
func (eagc *ExamApplicationsGDSPMCreate) SetExamcitycenter(e *ExamCityCenter) *ExamApplicationsGDSPMCreate {
	return eagc.SetExamcitycenterID(e.ID)
}

// Mutation returns the ExamApplicationsGDSPMMutation object of the builder.
func (eagc *ExamApplicationsGDSPMCreate) Mutation() *ExamApplicationsGDSPMMutation {
	return eagc.mutation
}

// Save creates the Exam_Applications_GDSPM in the database.
func (eagc *ExamApplicationsGDSPMCreate) Save(ctx context.Context) (*Exam_Applications_GDSPM, error) {
	eagc.defaults()
	return withHooks(ctx, eagc.sqlSave, eagc.mutation, eagc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (eagc *ExamApplicationsGDSPMCreate) SaveX(ctx context.Context) *Exam_Applications_GDSPM {
	v, err := eagc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (eagc *ExamApplicationsGDSPMCreate) Exec(ctx context.Context) error {
	_, err := eagc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eagc *ExamApplicationsGDSPMCreate) ExecX(ctx context.Context) {
	if err := eagc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (eagc *ExamApplicationsGDSPMCreate) defaults() {
	if _, ok := eagc.mutation.ApplnSubmittedDate(); !ok {
		v := exam_applications_gdspm.DefaultApplnSubmittedDate()
		eagc.mutation.SetApplnSubmittedDate(v)
	}
	if _, ok := eagc.mutation.ExamCityCenterCode(); !ok {
		v := exam_applications_gdspm.DefaultExamCityCenterCode
		eagc.mutation.SetExamCityCenterCode(v)
	}
	if _, ok := eagc.mutation.Status(); !ok {
		v := exam_applications_gdspm.DefaultStatus
		eagc.mutation.SetStatus(v)
	}
	if _, ok := eagc.mutation.PunishmentStatus(); !ok {
		v := exam_applications_gdspm.DefaultPunishmentStatus
		eagc.mutation.SetPunishmentStatus(v)
	}
	if _, ok := eagc.mutation.DisciplinaryCaseStatus(); !ok {
		v := exam_applications_gdspm.DefaultDisciplinaryCaseStatus
		eagc.mutation.SetDisciplinaryCaseStatus(v)
	}
	if _, ok := eagc.mutation.HallTicketNumber(); !ok {
		v := exam_applications_gdspm.DefaultHallTicketNumber
		eagc.mutation.SetHallTicketNumber(v)
	}
	if _, ok := eagc.mutation.HallTicketGeneratedFlag(); !ok {
		v := exam_applications_gdspm.DefaultHallTicketGeneratedFlag
		eagc.mutation.SetHallTicketGeneratedFlag(v)
	}
	if _, ok := eagc.mutation.UpdatedAt(); !ok {
		v := exam_applications_gdspm.DefaultUpdatedAt()
		eagc.mutation.SetUpdatedAt(v)
	}
	if _, ok := eagc.mutation.UpdatedBy(); !ok {
		v := exam_applications_gdspm.DefaultUpdatedBy
		eagc.mutation.SetUpdatedBy(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (eagc *ExamApplicationsGDSPMCreate) check() error {
	return nil
}

func (eagc *ExamApplicationsGDSPMCreate) sqlSave(ctx context.Context) (*Exam_Applications_GDSPM, error) {
	if err := eagc.check(); err != nil {
		return nil, err
	}
	_node, _spec := eagc.createSpec()
	if err := sqlgraph.CreateNode(ctx, eagc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	eagc.mutation.id = &_node.ID
	eagc.mutation.done = true
	return _node, nil
}

func (eagc *ExamApplicationsGDSPMCreate) createSpec() (*Exam_Applications_GDSPM, *sqlgraph.CreateSpec) {
	var (
		_node = &Exam_Applications_GDSPM{config: eagc.config}
		_spec = sqlgraph.NewCreateSpec(exam_applications_gdspm.Table, sqlgraph.NewFieldSpec(exam_applications_gdspm.FieldID, field.TypeInt64))
	)
	if id, ok := eagc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := eagc.mutation.ApplicationNumber(); ok {
		_spec.SetField(exam_applications_gdspm.FieldApplicationNumber, field.TypeString, value)
		_node.ApplicationNumber = value
	}
	if value, ok := eagc.mutation.ApplnSubmittedDate(); ok {
		_spec.SetField(exam_applications_gdspm.FieldApplnSubmittedDate, field.TypeTime, value)
		_node.ApplnSubmittedDate = value
	}
	if value, ok := eagc.mutation.ExamShortName(); ok {
		_spec.SetField(exam_applications_gdspm.FieldExamShortName, field.TypeString, value)
		_node.ExamShortName = value
	}
	if value, ok := eagc.mutation.ExamName(); ok {
		_spec.SetField(exam_applications_gdspm.FieldExamName, field.TypeString, value)
		_node.ExamName = value
	}
	if value, ok := eagc.mutation.SmsExamShortName(); ok {
		_spec.SetField(exam_applications_gdspm.FieldSmsExamShortName, field.TypeString, value)
		_node.SmsExamShortName = value
	}
	if value, ok := eagc.mutation.ExamYear(); ok {
		_spec.SetField(exam_applications_gdspm.FieldExamYear, field.TypeString, value)
		_node.ExamYear = value
	}
	if value, ok := eagc.mutation.UserID(); ok {
		_spec.SetField(exam_applications_gdspm.FieldUserID, field.TypeInt32, value)
		_node.UserID = value
	}
	if value, ok := eagc.mutation.EmployeeID(); ok {
		_spec.SetField(exam_applications_gdspm.FieldEmployeeID, field.TypeInt64, value)
		_node.EmployeeID = value
	}
	if value, ok := eagc.mutation.EmployeeName(); ok {
		_spec.SetField(exam_applications_gdspm.FieldEmployeeName, field.TypeString, value)
		_node.EmployeeName = value
	}
	if value, ok := eagc.mutation.DOB(); ok {
		_spec.SetField(exam_applications_gdspm.FieldDOB, field.TypeString, value)
		_node.DOB = value
	}
	if value, ok := eagc.mutation.Gender(); ok {
		_spec.SetField(exam_applications_gdspm.FieldGender, field.TypeString, value)
		_node.Gender = value
	}
	if value, ok := eagc.mutation.MobileNumber(); ok {
		_spec.SetField(exam_applications_gdspm.FieldMobileNumber, field.TypeString, value)
		_node.MobileNumber = value
	}
	if value, ok := eagc.mutation.EmailID(); ok {
		_spec.SetField(exam_applications_gdspm.FieldEmailID, field.TypeString, value)
		_node.EmailID = value
	}
	if value, ok := eagc.mutation.CategoryCode(); ok {
		_spec.SetField(exam_applications_gdspm.FieldCategoryCode, field.TypeString, value)
		_node.CategoryCode = value
	}
	if value, ok := eagc.mutation.CategoryDescription(); ok {
		_spec.SetField(exam_applications_gdspm.FieldCategoryDescription, field.TypeString, value)
		_node.CategoryDescription = value
	}
	if value, ok := eagc.mutation.DisabilityTypeID(); ok {
		_spec.SetField(exam_applications_gdspm.FieldDisabilityTypeID, field.TypeString, value)
		_node.DisabilityTypeID = value
	}
	if value, ok := eagc.mutation.DisabilityTypeCode(); ok {
		_spec.SetField(exam_applications_gdspm.FieldDisabilityTypeCode, field.TypeString, value)
		_node.DisabilityTypeCode = value
	}
	if value, ok := eagc.mutation.DisabilityTypeDescription(); ok {
		_spec.SetField(exam_applications_gdspm.FieldDisabilityTypeDescription, field.TypeString, value)
		_node.DisabilityTypeDescription = value
	}
	if value, ok := eagc.mutation.DisabilityPercentage(); ok {
		_spec.SetField(exam_applications_gdspm.FieldDisabilityPercentage, field.TypeInt32, value)
		_node.DisabilityPercentage = value
	}
	if value, ok := eagc.mutation.DCCS(); ok {
		_spec.SetField(exam_applications_gdspm.FieldDCCS, field.TypeString, value)
		_node.DCCS = value
	}
	if value, ok := eagc.mutation.EntryPostCode(); ok {
		_spec.SetField(exam_applications_gdspm.FieldEntryPostCode, field.TypeString, value)
		_node.EntryPostCode = value
	}
	if value, ok := eagc.mutation.EntryPostDescription(); ok {
		_spec.SetField(exam_applications_gdspm.FieldEntryPostDescription, field.TypeString, value)
		_node.EntryPostDescription = value
	}
	if value, ok := eagc.mutation.PresentPostCode(); ok {
		_spec.SetField(exam_applications_gdspm.FieldPresentPostCode, field.TypeString, value)
		_node.PresentPostCode = value
	}
	if value, ok := eagc.mutation.PresentPostDescription(); ok {
		_spec.SetField(exam_applications_gdspm.FieldPresentPostDescription, field.TypeString, value)
		_node.PresentPostDescription = value
	}
	if value, ok := eagc.mutation.FeederPostCode(); ok {
		_spec.SetField(exam_applications_gdspm.FieldFeederPostCode, field.TypeString, value)
		_node.FeederPostCode = value
	}
	if value, ok := eagc.mutation.FeederPostDescription(); ok {
		_spec.SetField(exam_applications_gdspm.FieldFeederPostDescription, field.TypeString, value)
		_node.FeederPostDescription = value
	}
	if value, ok := eagc.mutation.FeederPostJoiningDate(); ok {
		_spec.SetField(exam_applications_gdspm.FieldFeederPostJoiningDate, field.TypeString, value)
		_node.FeederPostJoiningDate = value
	}
	if value, ok := eagc.mutation.DesignationID(); ok {
		_spec.SetField(exam_applications_gdspm.FieldDesignationID, field.TypeString, value)
		_node.DesignationID = value
	}
	if value, ok := eagc.mutation.PresentDesignation(); ok {
		_spec.SetField(exam_applications_gdspm.FieldPresentDesignation, field.TypeString, value)
		_node.PresentDesignation = value
	}
	if value, ok := eagc.mutation.EducationCode(); ok {
		_spec.SetField(exam_applications_gdspm.FieldEducationCode, field.TypeString, value)
		_node.EducationCode = value
	}
	if value, ok := eagc.mutation.EducationDescription(); ok {
		_spec.SetField(exam_applications_gdspm.FieldEducationDescription, field.TypeString, value)
		_node.EducationDescription = value
	}
	if value, ok := eagc.mutation.FacilityUniqueID(); ok {
		_spec.SetField(exam_applications_gdspm.FieldFacilityUniqueID, field.TypeString, value)
		_node.FacilityUniqueID = value
	}
	if value, ok := eagc.mutation.WorkingOfficePincode(); ok {
		_spec.SetField(exam_applications_gdspm.FieldWorkingOfficePincode, field.TypeInt32, value)
		_node.WorkingOfficePincode = value
	}
	if value, ok := eagc.mutation.WorkingOfficeFacilityID(); ok {
		_spec.SetField(exam_applications_gdspm.FieldWorkingOfficeFacilityID, field.TypeString, value)
		_node.WorkingOfficeFacilityID = value
	}
	if value, ok := eagc.mutation.WorkingOfficeName(); ok {
		_spec.SetField(exam_applications_gdspm.FieldWorkingOfficeName, field.TypeString, value)
		_node.WorkingOfficeName = value
	}
	if value, ok := eagc.mutation.WorkingOfficeCircleFacilityID(); ok {
		_spec.SetField(exam_applications_gdspm.FieldWorkingOfficeCircleFacilityID, field.TypeString, value)
		_node.WorkingOfficeCircleFacilityID = value
	}
	if value, ok := eagc.mutation.WorkingOfficeCircleName(); ok {
		_spec.SetField(exam_applications_gdspm.FieldWorkingOfficeCircleName, field.TypeString, value)
		_node.WorkingOfficeCircleName = value
	}
	if value, ok := eagc.mutation.WorkingOfficeRegionFacilityID(); ok {
		_spec.SetField(exam_applications_gdspm.FieldWorkingOfficeRegionFacilityID, field.TypeString, value)
		_node.WorkingOfficeRegionFacilityID = value
	}
	if value, ok := eagc.mutation.WorkingOfficeRegionName(); ok {
		_spec.SetField(exam_applications_gdspm.FieldWorkingOfficeRegionName, field.TypeString, value)
		_node.WorkingOfficeRegionName = value
	}
	if value, ok := eagc.mutation.WorkingOfficeDivisionFacilityID(); ok {
		_spec.SetField(exam_applications_gdspm.FieldWorkingOfficeDivisionFacilityID, field.TypeString, value)
		_node.WorkingOfficeDivisionFacilityID = value
	}
	if value, ok := eagc.mutation.WorkingOfficeDivisionName(); ok {
		_spec.SetField(exam_applications_gdspm.FieldWorkingOfficeDivisionName, field.TypeString, value)
		_node.WorkingOfficeDivisionName = value
	}
	if value, ok := eagc.mutation.ReportingOfficeFacilityID(); ok {
		_spec.SetField(exam_applications_gdspm.FieldReportingOfficeFacilityID, field.TypeString, value)
		_node.ReportingOfficeFacilityID = value
	}
	if value, ok := eagc.mutation.ReportingOfficeName(); ok {
		_spec.SetField(exam_applications_gdspm.FieldReportingOfficeName, field.TypeString, value)
		_node.ReportingOfficeName = value
	}
	if value, ok := eagc.mutation.LienControllingOfficeID(); ok {
		_spec.SetField(exam_applications_gdspm.FieldLienControllingOfficeID, field.TypeString, value)
		_node.LienControllingOfficeID = value
	}
	if value, ok := eagc.mutation.LienControllingOfficeName(); ok {
		_spec.SetField(exam_applications_gdspm.FieldLienControllingOfficeName, field.TypeString, value)
		_node.LienControllingOfficeName = value
	}
	if value, ok := eagc.mutation.InDeputation(); ok {
		_spec.SetField(exam_applications_gdspm.FieldInDeputation, field.TypeString, value)
		_node.InDeputation = value
	}
	if value, ok := eagc.mutation.DeputationType(); ok {
		_spec.SetField(exam_applications_gdspm.FieldDeputationType, field.TypeString, value)
		_node.DeputationType = value
	}
	if value, ok := eagc.mutation.DeputationOfficeUniqueId(); ok {
		_spec.SetField(exam_applications_gdspm.FieldDeputationOfficeUniqueId, field.TypeString, value)
		_node.DeputationOfficeUniqueId = value
	}
	if value, ok := eagc.mutation.DeputationOfficeFacilityID(); ok {
		_spec.SetField(exam_applications_gdspm.FieldDeputationOfficeFacilityID, field.TypeString, value)
		_node.DeputationOfficeFacilityID = value
	}
	if value, ok := eagc.mutation.DeputationOfficeName(); ok {
		_spec.SetField(exam_applications_gdspm.FieldDeputationOfficeName, field.TypeString, value)
		_node.DeputationOfficeName = value
	}
	if value, ok := eagc.mutation.DeputationControllingOfficeID(); ok {
		_spec.SetField(exam_applications_gdspm.FieldDeputationControllingOfficeID, field.TypeString, value)
		_node.DeputationControllingOfficeID = value
	}
	if value, ok := eagc.mutation.DeputationControllingOfficeName(); ok {
		_spec.SetField(exam_applications_gdspm.FieldDeputationControllingOfficeName, field.TypeString, value)
		_node.DeputationControllingOfficeName = value
	}
	if value, ok := eagc.mutation.ControllingOfficeFacilityID(); ok {
		_spec.SetField(exam_applications_gdspm.FieldControllingOfficeFacilityID, field.TypeString, value)
		_node.ControllingOfficeFacilityID = value
	}
	if value, ok := eagc.mutation.ControllingOfficeName(); ok {
		_spec.SetField(exam_applications_gdspm.FieldControllingOfficeName, field.TypeString, value)
		_node.ControllingOfficeName = value
	}
	if value, ok := eagc.mutation.NodalOfficeFacilityID(); ok {
		_spec.SetField(exam_applications_gdspm.FieldNodalOfficeFacilityID, field.TypeString, value)
		_node.NodalOfficeFacilityID = value
	}
	if value, ok := eagc.mutation.NodalOfficeName(); ok {
		_spec.SetField(exam_applications_gdspm.FieldNodalOfficeName, field.TypeString, value)
		_node.NodalOfficeName = value
	}
	if value, ok := eagc.mutation.SubdivisionOfficeFacilityID(); ok {
		_spec.SetField(exam_applications_gdspm.FieldSubdivisionOfficeFacilityID, field.TypeString, value)
		_node.SubdivisionOfficeFacilityID = value
	}
	if value, ok := eagc.mutation.SubdivisionOfficeName(); ok {
		_spec.SetField(exam_applications_gdspm.FieldSubdivisionOfficeName, field.TypeString, value)
		_node.SubdivisionOfficeName = value
	}
	if value, ok := eagc.mutation.CenterFacilityId(); ok {
		_spec.SetField(exam_applications_gdspm.FieldCenterFacilityId, field.TypeString, value)
		_node.CenterFacilityId = value
	}
	if value, ok := eagc.mutation.CentrePreference(); ok {
		_spec.SetField(exam_applications_gdspm.FieldCentrePreference, field.TypeString, value)
		_node.CentrePreference = value
	}
	if value, ok := eagc.mutation.Signature(); ok {
		_spec.SetField(exam_applications_gdspm.FieldSignature, field.TypeString, value)
		_node.Signature = value
	}
	if value, ok := eagc.mutation.Photo(); ok {
		_spec.SetField(exam_applications_gdspm.FieldPhoto, field.TypeString, value)
		_node.Photo = value
	}
	if value, ok := eagc.mutation.SignaturePath(); ok {
		_spec.SetField(exam_applications_gdspm.FieldSignaturePath, field.TypeString, value)
		_node.SignaturePath = value
	}
	if value, ok := eagc.mutation.PhotoPath(); ok {
		_spec.SetField(exam_applications_gdspm.FieldPhotoPath, field.TypeString, value)
		_node.PhotoPath = value
	}
	if value, ok := eagc.mutation.TempHallTicket(); ok {
		_spec.SetField(exam_applications_gdspm.FieldTempHallTicket, field.TypeString, value)
		_node.TempHallTicket = value
	}
	if value, ok := eagc.mutation.CandidateRemarks(); ok {
		_spec.SetField(exam_applications_gdspm.FieldCandidateRemarks, field.TypeString, value)
		_node.CandidateRemarks = value
	}
	if value, ok := eagc.mutation.VAGeneralRemarks(); ok {
		_spec.SetField(exam_applications_gdspm.FieldVAGeneralRemarks, field.TypeString, value)
		_node.VAGeneralRemarks = value
	}
	if value, ok := eagc.mutation.CAGeneralRemarks(); ok {
		_spec.SetField(exam_applications_gdspm.FieldCAGeneralRemarks, field.TypeString, value)
		_node.CAGeneralRemarks = value
	}
	if value, ok := eagc.mutation.NAGeneralRemarks(); ok {
		_spec.SetField(exam_applications_gdspm.FieldNAGeneralRemarks, field.TypeString, value)
		_node.NAGeneralRemarks = value
	}
	if value, ok := eagc.mutation.ApplicationStatus(); ok {
		_spec.SetField(exam_applications_gdspm.FieldApplicationStatus, field.TypeString, value)
		_node.ApplicationStatus = value
	}
	if value, ok := eagc.mutation.Status(); ok {
		_spec.SetField(exam_applications_gdspm.FieldStatus, field.TypeString, value)
		_node.Status = value
	}
	if value, ok := eagc.mutation.RecommendedStatus(); ok {
		_spec.SetField(exam_applications_gdspm.FieldRecommendedStatus, field.TypeString, value)
		_node.RecommendedStatus = value
	}
	if value, ok := eagc.mutation.ApplicationWdlDate(); ok {
		_spec.SetField(exam_applications_gdspm.FieldApplicationWdlDate, field.TypeTime, value)
		_node.ApplicationWdlDate = value
	}
	if value, ok := eagc.mutation.VAUserId(); ok {
		_spec.SetField(exam_applications_gdspm.FieldVAUserId, field.TypeInt32, value)
		_node.VAUserId = value
	}
	if value, ok := eagc.mutation.VAUserName(); ok {
		_spec.SetField(exam_applications_gdspm.FieldVAUserName, field.TypeString, value)
		_node.VAUserName = value
	}
	if value, ok := eagc.mutation.VAEmployeeID(); ok {
		_spec.SetField(exam_applications_gdspm.FieldVAEmployeeID, field.TypeString, value)
		_node.VAEmployeeID = value
	}
	if value, ok := eagc.mutation.VAEmployeeDesignation(); ok {
		_spec.SetField(exam_applications_gdspm.FieldVAEmployeeDesignation, field.TypeString, value)
		_node.VAEmployeeDesignation = value
	}
	if value, ok := eagc.mutation.VARemarks(); ok {
		_spec.SetField(exam_applications_gdspm.FieldVARemarks, field.TypeString, value)
		_node.VARemarks = value
	}
	if value, ok := eagc.mutation.VADate(); ok {
		_spec.SetField(exam_applications_gdspm.FieldVADate, field.TypeTime, value)
		_node.VADate = value
	}
	if value, ok := eagc.mutation.CAUserId(); ok {
		_spec.SetField(exam_applications_gdspm.FieldCAUserId, field.TypeInt32, value)
		_node.CAUserId = value
	}
	if value, ok := eagc.mutation.CAUserName(); ok {
		_spec.SetField(exam_applications_gdspm.FieldCAUserName, field.TypeString, value)
		_node.CAUserName = value
	}
	if value, ok := eagc.mutation.CAEmployeeID(); ok {
		_spec.SetField(exam_applications_gdspm.FieldCAEmployeeID, field.TypeString, value)
		_node.CAEmployeeID = value
	}
	if value, ok := eagc.mutation.CAEmployeeDesignation(); ok {
		_spec.SetField(exam_applications_gdspm.FieldCAEmployeeDesignation, field.TypeString, value)
		_node.CAEmployeeDesignation = value
	}
	if value, ok := eagc.mutation.CARemarks(); ok {
		_spec.SetField(exam_applications_gdspm.FieldCARemarks, field.TypeString, value)
		_node.CARemarks = value
	}
	if value, ok := eagc.mutation.CADate(); ok {
		_spec.SetField(exam_applications_gdspm.FieldCADate, field.TypeTime, value)
		_node.CADate = value
	}
	if value, ok := eagc.mutation.NAUserId(); ok {
		_spec.SetField(exam_applications_gdspm.FieldNAUserId, field.TypeInt32, value)
		_node.NAUserId = value
	}
	if value, ok := eagc.mutation.NAUserName(); ok {
		_spec.SetField(exam_applications_gdspm.FieldNAUserName, field.TypeString, value)
		_node.NAUserName = value
	}
	if value, ok := eagc.mutation.NAEmployeeID(); ok {
		_spec.SetField(exam_applications_gdspm.FieldNAEmployeeID, field.TypeString, value)
		_node.NAEmployeeID = value
	}
	if value, ok := eagc.mutation.NAEmployeeDesignation(); ok {
		_spec.SetField(exam_applications_gdspm.FieldNAEmployeeDesignation, field.TypeString, value)
		_node.NAEmployeeDesignation = value
	}
	if value, ok := eagc.mutation.NARemarks(); ok {
		_spec.SetField(exam_applications_gdspm.FieldNARemarks, field.TypeString, value)
		_node.NARemarks = value
	}
	if value, ok := eagc.mutation.NADate(); ok {
		_spec.SetField(exam_applications_gdspm.FieldNADate, field.TypeTime, value)
		_node.NADate = value
	}
	if value, ok := eagc.mutation.AppliactionRemarks(); ok {
		_spec.SetField(exam_applications_gdspm.FieldAppliactionRemarks, field.TypeString, value)
		_node.AppliactionRemarks = value
	}
	if value, ok := eagc.mutation.CadrePreferences(); ok {
		_spec.SetField(exam_applications_gdspm.FieldCadrePreferences, field.TypeJSON, value)
		_node.CadrePreferences = value
	}
	if value, ok := eagc.mutation.CAPreviousRemarks(); ok {
		_spec.SetField(exam_applications_gdspm.FieldCAPreviousRemarks, field.TypeString, value)
		_node.CAPreviousRemarks = value
	}
	if value, ok := eagc.mutation.PunishmentStatus(); ok {
		_spec.SetField(exam_applications_gdspm.FieldPunishmentStatus, field.TypeBool, value)
		_node.PunishmentStatus = value
	}
	if value, ok := eagc.mutation.DisciplinaryCaseStatus(); ok {
		_spec.SetField(exam_applications_gdspm.FieldDisciplinaryCaseStatus, field.TypeBool, value)
		_node.DisciplinaryCaseStatus = value
	}
	if value, ok := eagc.mutation.GenerateHallTicketFlag(); ok {
		_spec.SetField(exam_applications_gdspm.FieldGenerateHallTicketFlag, field.TypeBool, value)
		_node.GenerateHallTicketFlag = &value
	}
	if value, ok := eagc.mutation.HallTicketNumber(); ok {
		_spec.SetField(exam_applications_gdspm.FieldHallTicketNumber, field.TypeString, value)
		_node.HallTicketNumber = value
	}
	if value, ok := eagc.mutation.HallTicketGeneratedFlag(); ok {
		_spec.SetField(exam_applications_gdspm.FieldHallTicketGeneratedFlag, field.TypeBool, value)
		_node.HallTicketGeneratedFlag = value
	}
	if value, ok := eagc.mutation.GenerateHallTicketFlagByNO(); ok {
		_spec.SetField(exam_applications_gdspm.FieldGenerateHallTicketFlagByNO, field.TypeBool, value)
		_node.GenerateHallTicketFlagByNO = &value
	}
	if value, ok := eagc.mutation.HallTicketGeneratedDate(); ok {
		_spec.SetField(exam_applications_gdspm.FieldHallTicketGeneratedDate, field.TypeTime, value)
		_node.HallTicketGeneratedDate = value
	}
	if value, ok := eagc.mutation.TemporaryHallTicket(); ok {
		_spec.SetField(exam_applications_gdspm.FieldTemporaryHallTicket, field.TypeString, value)
		_node.TemporaryHallTicket = value
	}
	if value, ok := eagc.mutation.OptionUsed(); ok {
		_spec.SetField(exam_applications_gdspm.FieldOptionUsed, field.TypeString, value)
		_node.OptionUsed = value
	}
	if value, ok := eagc.mutation.Remarks(); ok {
		_spec.SetField(exam_applications_gdspm.FieldRemarks, field.TypeString, value)
		_node.Remarks = value
	}
	if value, ok := eagc.mutation.Cadre(); ok {
		_spec.SetField(exam_applications_gdspm.FieldCadre, field.TypeString, value)
		_node.Cadre = value
	}
	if value, ok := eagc.mutation.EmployeePost(); ok {
		_spec.SetField(exam_applications_gdspm.FieldEmployeePost, field.TypeString, value)
		_node.EmployeePost = value
	}
	if value, ok := eagc.mutation.DOJInEligiblePost(); ok {
		_spec.SetField(exam_applications_gdspm.FieldDOJInEligiblePost, field.TypeString, value)
		_node.DOJInEligiblePost = value
	}
	if value, ok := eagc.mutation.DivisionPreferences(); ok {
		_spec.SetField(exam_applications_gdspm.FieldDivisionPreferences, field.TypeJSON, value)
		_node.DivisionPreferences = value
	}
	if value, ok := eagc.mutation.ServiceLength(); ok {
		_spec.SetField(exam_applications_gdspm.FieldServiceLength, field.TypeJSON, value)
		_node.ServiceLength = value
	}
	if value, ok := eagc.mutation.NonQualifyingService(); ok {
		_spec.SetField(exam_applications_gdspm.FieldNonQualifyingService, field.TypeJSON, value)
		_node.NonQualifyingService = value
	}
	if value, ok := eagc.mutation.DCInPresentCadre(); ok {
		_spec.SetField(exam_applications_gdspm.FieldDCInPresentCadre, field.TypeString, value)
		_node.DCInPresentCadre = value
	}
	if value, ok := eagc.mutation.ReportingOfficeID(); ok {
		_spec.SetField(exam_applications_gdspm.FieldReportingOfficeID, field.TypeString, value)
		_node.ReportingOfficeID = value
	}
	if value, ok := eagc.mutation.PostPreferences(); ok {
		_spec.SetField(exam_applications_gdspm.FieldPostPreferences, field.TypeJSON, value)
		_node.PostPreferences = value
	}
	if value, ok := eagc.mutation.UnitPreferences(); ok {
		_spec.SetField(exam_applications_gdspm.FieldUnitPreferences, field.TypeJSON, value)
		_node.UnitPreferences = value
	}
	if value, ok := eagc.mutation.CenterId(); ok {
		_spec.SetField(exam_applications_gdspm.FieldCenterId, field.TypeInt32, value)
		_node.CenterId = value
	}
	if value, ok := eagc.mutation.ClaimingQualifyingService(); ok {
		_spec.SetField(exam_applications_gdspm.FieldClaimingQualifyingService, field.TypeString, value)
		_node.ClaimingQualifyingService = value
	}
	if value, ok := eagc.mutation.DeputationOfficePincode(); ok {
		_spec.SetField(exam_applications_gdspm.FieldDeputationOfficePincode, field.TypeString, value)
		_node.DeputationOfficePincode = value
	}
	if value, ok := eagc.mutation.FacilityName(); ok {
		_spec.SetField(exam_applications_gdspm.FieldFacilityName, field.TypeString, value)
		_node.FacilityName = value
	}
	if value, ok := eagc.mutation.UpdatedAt(); ok {
		_spec.SetField(exam_applications_gdspm.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := eagc.mutation.UpdatedBy(); ok {
		_spec.SetField(exam_applications_gdspm.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if value, ok := eagc.mutation.ExamCenterHall(); ok {
		_spec.SetField(exam_applications_gdspm.FieldExamCenterHall, field.TypeInt32, value)
		_node.ExamCenterHall = value
	}
	if value, ok := eagc.mutation.HallName(); ok {
		_spec.SetField(exam_applications_gdspm.FieldHallName, field.TypeString, value)
		_node.HallName = value
	}
	if value, ok := eagc.mutation.GDSEngagement(); ok {
		_spec.SetField(exam_applications_gdspm.FieldGDSEngagement, field.TypeJSON, value)
		_node.GDSEngagement = value
	}
	if value, ok := eagc.mutation.PMMailGuardMTSEngagement(); ok {
		_spec.SetField(exam_applications_gdspm.FieldPMMailGuardMTSEngagement, field.TypeJSON, value)
		_node.PMMailGuardMTSEngagement = value
	}
	if nodes := eagc.mutation.UsersGDSPMRefIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_applications_gdspm.UsersGDSPMRefTable,
			Columns: []string{exam_applications_gdspm.UsersGDSPMRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usermaster.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := eagc.mutation.CadrePrefRefGDSPMIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_applications_gdspm.CadrePrefRefGDSPMTable,
			Columns: []string{exam_applications_gdspm.CadrePrefRefGDSPMColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cadre_choice_pm.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := eagc.mutation.CirclePrefRefGDSPMIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_applications_gdspm.CirclePrefRefGDSPMTable,
			Columns: []string{exam_applications_gdspm.CirclePrefRefGDSPMColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(division_choice_pm.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := eagc.mutation.GDSPMApplicationsRefIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_applications_gdspm.GDSPMApplicationsRefTable,
			Columns: []string{exam_applications_gdspm.GDSPMApplicationsRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(recommendationsgdspmapplications.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := eagc.mutation.LogDataIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_applications_gdspm.LogDataTable,
			Columns: []string{exam_applications_gdspm.LogDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(logs.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := eagc.mutation.ExamsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   exam_applications_gdspm.ExamsTable,
			Columns: []string{exam_applications_gdspm.ExamsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ExamCode = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := eagc.mutation.GDSPMExamCentresIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   exam_applications_gdspm.GDSPMExamCentresTable,
			Columns: []string{exam_applications_gdspm.GDSPMExamCentresColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(center.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CenterCode = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := eagc.mutation.CircleRefsGDSPMIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   exam_applications_gdspm.CircleRefsGDSPMTable,
			Columns: []string{exam_applications_gdspm.CircleRefsGDSPMColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(circlesummaryforno.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CircleSID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := eagc.mutation.RoleusersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   exam_applications_gdspm.RoleusersTable,
			Columns: []string{exam_applications_gdspm.RoleusersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rolemaster.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.RoleUserCode = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := eagc.mutation.ExamcitycenterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   exam_applications_gdspm.ExamcitycenterTable,
			Columns: []string{exam_applications_gdspm.ExamcitycenterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(examcitycenter.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ExamCityCenterCode = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ExamApplicationsGDSPMCreateBulk is the builder for creating many Exam_Applications_GDSPM entities in bulk.
type ExamApplicationsGDSPMCreateBulk struct {
	config
	builders []*ExamApplicationsGDSPMCreate
}

// Save creates the Exam_Applications_GDSPM entities in the database.
func (eagcb *ExamApplicationsGDSPMCreateBulk) Save(ctx context.Context) ([]*Exam_Applications_GDSPM, error) {
	specs := make([]*sqlgraph.CreateSpec, len(eagcb.builders))
	nodes := make([]*Exam_Applications_GDSPM, len(eagcb.builders))
	mutators := make([]Mutator, len(eagcb.builders))
	for i := range eagcb.builders {
		func(i int, root context.Context) {
			builder := eagcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ExamApplicationsGDSPMMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, eagcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, eagcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, eagcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (eagcb *ExamApplicationsGDSPMCreateBulk) SaveX(ctx context.Context) []*Exam_Applications_GDSPM {
	v, err := eagcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (eagcb *ExamApplicationsGDSPMCreateBulk) Exec(ctx context.Context) error {
	_, err := eagcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eagcb *ExamApplicationsGDSPMCreateBulk) ExecX(ctx context.Context) {
	if err := eagcb.Exec(ctx); err != nil {
		panic(err)
	}
}
