// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"
	"recruit/ent/exam_applications_ps"
	"recruit/ent/placeofpreferenceps"
	"recruit/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PlaceOfPreferencePSQuery is the builder for querying PlaceOfPreferencePS entities.
type PlaceOfPreferencePSQuery struct {
	config
	ctx                 *QueryContext
	order               []placeofpreferenceps.OrderOption
	inters              []Interceptor
	predicates          []predicate.PlaceOfPreferencePS
	withPlaceApplnPSRef *ExamApplicationsPSQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the PlaceOfPreferencePSQuery builder.
func (poppq *PlaceOfPreferencePSQuery) Where(ps ...predicate.PlaceOfPreferencePS) *PlaceOfPreferencePSQuery {
	poppq.predicates = append(poppq.predicates, ps...)
	return poppq
}

// Limit the number of records to be returned by this query.
func (poppq *PlaceOfPreferencePSQuery) Limit(limit int) *PlaceOfPreferencePSQuery {
	poppq.ctx.Limit = &limit
	return poppq
}

// Offset to start from.
func (poppq *PlaceOfPreferencePSQuery) Offset(offset int) *PlaceOfPreferencePSQuery {
	poppq.ctx.Offset = &offset
	return poppq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (poppq *PlaceOfPreferencePSQuery) Unique(unique bool) *PlaceOfPreferencePSQuery {
	poppq.ctx.Unique = &unique
	return poppq
}

// Order specifies how the records should be ordered.
func (poppq *PlaceOfPreferencePSQuery) Order(o ...placeofpreferenceps.OrderOption) *PlaceOfPreferencePSQuery {
	poppq.order = append(poppq.order, o...)
	return poppq
}

// QueryPlaceApplnPSRef chains the current query on the "PlaceApplnPS_Ref" edge.
func (poppq *PlaceOfPreferencePSQuery) QueryPlaceApplnPSRef() *ExamApplicationsPSQuery {
	query := (&ExamApplicationsPSClient{config: poppq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := poppq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := poppq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(placeofpreferenceps.Table, placeofpreferenceps.FieldID, selector),
			sqlgraph.To(exam_applications_ps.Table, exam_applications_ps.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, placeofpreferenceps.PlaceApplnPSRefTable, placeofpreferenceps.PlaceApplnPSRefColumn),
		)
		fromU = sqlgraph.SetNeighbors(poppq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first PlaceOfPreferencePS entity from the query.
// Returns a *NotFoundError when no PlaceOfPreferencePS was found.
func (poppq *PlaceOfPreferencePSQuery) First(ctx context.Context) (*PlaceOfPreferencePS, error) {
	nodes, err := poppq.Limit(1).All(setContextOp(ctx, poppq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{placeofpreferenceps.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (poppq *PlaceOfPreferencePSQuery) FirstX(ctx context.Context) *PlaceOfPreferencePS {
	node, err := poppq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first PlaceOfPreferencePS ID from the query.
// Returns a *NotFoundError when no PlaceOfPreferencePS ID was found.
func (poppq *PlaceOfPreferencePSQuery) FirstID(ctx context.Context) (id int32, err error) {
	var ids []int32
	if ids, err = poppq.Limit(1).IDs(setContextOp(ctx, poppq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{placeofpreferenceps.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (poppq *PlaceOfPreferencePSQuery) FirstIDX(ctx context.Context) int32 {
	id, err := poppq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single PlaceOfPreferencePS entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one PlaceOfPreferencePS entity is found.
// Returns a *NotFoundError when no PlaceOfPreferencePS entities are found.
func (poppq *PlaceOfPreferencePSQuery) Only(ctx context.Context) (*PlaceOfPreferencePS, error) {
	nodes, err := poppq.Limit(2).All(setContextOp(ctx, poppq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{placeofpreferenceps.Label}
	default:
		return nil, &NotSingularError{placeofpreferenceps.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (poppq *PlaceOfPreferencePSQuery) OnlyX(ctx context.Context) *PlaceOfPreferencePS {
	node, err := poppq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only PlaceOfPreferencePS ID in the query.
// Returns a *NotSingularError when more than one PlaceOfPreferencePS ID is found.
// Returns a *NotFoundError when no entities are found.
func (poppq *PlaceOfPreferencePSQuery) OnlyID(ctx context.Context) (id int32, err error) {
	var ids []int32
	if ids, err = poppq.Limit(2).IDs(setContextOp(ctx, poppq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{placeofpreferenceps.Label}
	default:
		err = &NotSingularError{placeofpreferenceps.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (poppq *PlaceOfPreferencePSQuery) OnlyIDX(ctx context.Context) int32 {
	id, err := poppq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of PlaceOfPreferencePSs.
func (poppq *PlaceOfPreferencePSQuery) All(ctx context.Context) ([]*PlaceOfPreferencePS, error) {
	ctx = setContextOp(ctx, poppq.ctx, "All")
	if err := poppq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*PlaceOfPreferencePS, *PlaceOfPreferencePSQuery]()
	return withInterceptors[[]*PlaceOfPreferencePS](ctx, poppq, qr, poppq.inters)
}

// AllX is like All, but panics if an error occurs.
func (poppq *PlaceOfPreferencePSQuery) AllX(ctx context.Context) []*PlaceOfPreferencePS {
	nodes, err := poppq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of PlaceOfPreferencePS IDs.
func (poppq *PlaceOfPreferencePSQuery) IDs(ctx context.Context) (ids []int32, err error) {
	if poppq.ctx.Unique == nil && poppq.path != nil {
		poppq.Unique(true)
	}
	ctx = setContextOp(ctx, poppq.ctx, "IDs")
	if err = poppq.Select(placeofpreferenceps.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (poppq *PlaceOfPreferencePSQuery) IDsX(ctx context.Context) []int32 {
	ids, err := poppq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (poppq *PlaceOfPreferencePSQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, poppq.ctx, "Count")
	if err := poppq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, poppq, querierCount[*PlaceOfPreferencePSQuery](), poppq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (poppq *PlaceOfPreferencePSQuery) CountX(ctx context.Context) int {
	count, err := poppq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (poppq *PlaceOfPreferencePSQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, poppq.ctx, "Exist")
	switch _, err := poppq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (poppq *PlaceOfPreferencePSQuery) ExistX(ctx context.Context) bool {
	exist, err := poppq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the PlaceOfPreferencePSQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (poppq *PlaceOfPreferencePSQuery) Clone() *PlaceOfPreferencePSQuery {
	if poppq == nil {
		return nil
	}
	return &PlaceOfPreferencePSQuery{
		config:              poppq.config,
		ctx:                 poppq.ctx.Clone(),
		order:               append([]placeofpreferenceps.OrderOption{}, poppq.order...),
		inters:              append([]Interceptor{}, poppq.inters...),
		predicates:          append([]predicate.PlaceOfPreferencePS{}, poppq.predicates...),
		withPlaceApplnPSRef: poppq.withPlaceApplnPSRef.Clone(),
		// clone intermediate query.
		sql:  poppq.sql.Clone(),
		path: poppq.path,
	}
}

// WithPlaceApplnPSRef tells the query-builder to eager-load the nodes that are connected to
// the "PlaceApplnPS_Ref" edge. The optional arguments are used to configure the query builder of the edge.
func (poppq *PlaceOfPreferencePSQuery) WithPlaceApplnPSRef(opts ...func(*ExamApplicationsPSQuery)) *PlaceOfPreferencePSQuery {
	query := (&ExamApplicationsPSClient{config: poppq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	poppq.withPlaceApplnPSRef = query
	return poppq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		ApplicationID int64 `json:"ApplicationID,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.PlaceOfPreferencePS.Query().
//		GroupBy(placeofpreferenceps.FieldApplicationID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (poppq *PlaceOfPreferencePSQuery) GroupBy(field string, fields ...string) *PlaceOfPreferencePSGroupBy {
	poppq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &PlaceOfPreferencePSGroupBy{build: poppq}
	grbuild.flds = &poppq.ctx.Fields
	grbuild.label = placeofpreferenceps.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		ApplicationID int64 `json:"ApplicationID,omitempty"`
//	}
//
//	client.PlaceOfPreferencePS.Query().
//		Select(placeofpreferenceps.FieldApplicationID).
//		Scan(ctx, &v)
func (poppq *PlaceOfPreferencePSQuery) Select(fields ...string) *PlaceOfPreferencePSSelect {
	poppq.ctx.Fields = append(poppq.ctx.Fields, fields...)
	sbuild := &PlaceOfPreferencePSSelect{PlaceOfPreferencePSQuery: poppq}
	sbuild.label = placeofpreferenceps.Label
	sbuild.flds, sbuild.scan = &poppq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a PlaceOfPreferencePSSelect configured with the given aggregations.
func (poppq *PlaceOfPreferencePSQuery) Aggregate(fns ...AggregateFunc) *PlaceOfPreferencePSSelect {
	return poppq.Select().Aggregate(fns...)
}

func (poppq *PlaceOfPreferencePSQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range poppq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, poppq); err != nil {
				return err
			}
		}
	}
	for _, f := range poppq.ctx.Fields {
		if !placeofpreferenceps.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if poppq.path != nil {
		prev, err := poppq.path(ctx)
		if err != nil {
			return err
		}
		poppq.sql = prev
	}
	return nil
}

func (poppq *PlaceOfPreferencePSQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*PlaceOfPreferencePS, error) {
	var (
		nodes       = []*PlaceOfPreferencePS{}
		_spec       = poppq.querySpec()
		loadedTypes = [1]bool{
			poppq.withPlaceApplnPSRef != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*PlaceOfPreferencePS).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &PlaceOfPreferencePS{config: poppq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, poppq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := poppq.withPlaceApplnPSRef; query != nil {
		if err := poppq.loadPlaceApplnPSRef(ctx, query, nodes, nil,
			func(n *PlaceOfPreferencePS, e *Exam_Applications_PS) { n.Edges.PlaceApplnPSRef = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (poppq *PlaceOfPreferencePSQuery) loadPlaceApplnPSRef(ctx context.Context, query *ExamApplicationsPSQuery, nodes []*PlaceOfPreferencePS, init func(*PlaceOfPreferencePS), assign func(*PlaceOfPreferencePS, *Exam_Applications_PS)) error {
	ids := make([]int64, 0, len(nodes))
	nodeids := make(map[int64][]*PlaceOfPreferencePS)
	for i := range nodes {
		fk := nodes[i].ApplicationID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(exam_applications_ps.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "ApplicationID" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (poppq *PlaceOfPreferencePSQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := poppq.querySpec()
	_spec.Node.Columns = poppq.ctx.Fields
	if len(poppq.ctx.Fields) > 0 {
		_spec.Unique = poppq.ctx.Unique != nil && *poppq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, poppq.driver, _spec)
}

func (poppq *PlaceOfPreferencePSQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(placeofpreferenceps.Table, placeofpreferenceps.Columns, sqlgraph.NewFieldSpec(placeofpreferenceps.FieldID, field.TypeInt32))
	_spec.From = poppq.sql
	if unique := poppq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if poppq.path != nil {
		_spec.Unique = true
	}
	if fields := poppq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, placeofpreferenceps.FieldID)
		for i := range fields {
			if fields[i] != placeofpreferenceps.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if poppq.withPlaceApplnPSRef != nil {
			_spec.Node.AddColumnOnce(placeofpreferenceps.FieldApplicationID)
		}
	}
	if ps := poppq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := poppq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := poppq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := poppq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (poppq *PlaceOfPreferencePSQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(poppq.driver.Dialect())
	t1 := builder.Table(placeofpreferenceps.Table)
	columns := poppq.ctx.Fields
	if len(columns) == 0 {
		columns = placeofpreferenceps.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if poppq.sql != nil {
		selector = poppq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if poppq.ctx.Unique != nil && *poppq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range poppq.predicates {
		p(selector)
	}
	for _, p := range poppq.order {
		p(selector)
	}
	if offset := poppq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := poppq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// PlaceOfPreferencePSGroupBy is the group-by builder for PlaceOfPreferencePS entities.
type PlaceOfPreferencePSGroupBy struct {
	selector
	build *PlaceOfPreferencePSQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (poppgb *PlaceOfPreferencePSGroupBy) Aggregate(fns ...AggregateFunc) *PlaceOfPreferencePSGroupBy {
	poppgb.fns = append(poppgb.fns, fns...)
	return poppgb
}

// Scan applies the selector query and scans the result into the given value.
func (poppgb *PlaceOfPreferencePSGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, poppgb.build.ctx, "GroupBy")
	if err := poppgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*PlaceOfPreferencePSQuery, *PlaceOfPreferencePSGroupBy](ctx, poppgb.build, poppgb, poppgb.build.inters, v)
}

func (poppgb *PlaceOfPreferencePSGroupBy) sqlScan(ctx context.Context, root *PlaceOfPreferencePSQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(poppgb.fns))
	for _, fn := range poppgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*poppgb.flds)+len(poppgb.fns))
		for _, f := range *poppgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*poppgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := poppgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// PlaceOfPreferencePSSelect is the builder for selecting fields of PlaceOfPreferencePS entities.
type PlaceOfPreferencePSSelect struct {
	*PlaceOfPreferencePSQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (popps *PlaceOfPreferencePSSelect) Aggregate(fns ...AggregateFunc) *PlaceOfPreferencePSSelect {
	popps.fns = append(popps.fns, fns...)
	return popps
}

// Scan applies the selector query and scans the result into the given value.
func (popps *PlaceOfPreferencePSSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, popps.ctx, "Select")
	if err := popps.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*PlaceOfPreferencePSQuery, *PlaceOfPreferencePSSelect](ctx, popps.PlaceOfPreferencePSQuery, popps, popps.inters, v)
}

func (popps *PlaceOfPreferencePSSelect) sqlScan(ctx context.Context, root *PlaceOfPreferencePSQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(popps.fns))
	for _, fn := range popps.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*popps.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := popps.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
