// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"recruit/ent/servicerequest"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// ServiceRequest is the model entity for the ServiceRequest schema.
type ServiceRequest struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// Remarks holds the value of the "remarks" field.
	Remarks string `json:"remarks,omitempty"`
	// Action holds the value of the "action" field.
	Action string `json:"action,omitempty"`
	// PushedTime holds the value of the "PushedTime" field.
	PushedTime time.Time `json:"PushedTime,omitempty"`
	// UpdatedBy holds the value of the "UpdatedBy" field.
	UpdatedBy string `json:"UpdatedBy,omitempty"`
	// UpdatedTime holds the value of the "UpdatedTime" field.
	UpdatedTime time.Time `json:"UpdatedTime,omitempty"`
	// AssignedTo holds the value of the "AssignedTo" field.
	AssignedTo string `json:"AssignedTo,omitempty"`
	// RemarksNew holds the value of the "RemarksNew" field.
	RemarksNew string `json:"RemarksNew,omitempty"`
	// Status holds the value of the "Status" field.
	Status string `json:"Status,omitempty"`
	// ClosedOn holds the value of the "ClosedOn" field.
	ClosedOn     time.Time `json:"ClosedOn,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ServiceRequest) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case servicerequest.FieldID:
			values[i] = new(sql.NullInt64)
		case servicerequest.FieldRemarks, servicerequest.FieldAction, servicerequest.FieldUpdatedBy, servicerequest.FieldAssignedTo, servicerequest.FieldRemarksNew, servicerequest.FieldStatus:
			values[i] = new(sql.NullString)
		case servicerequest.FieldPushedTime, servicerequest.FieldUpdatedTime, servicerequest.FieldClosedOn:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ServiceRequest fields.
func (sr *ServiceRequest) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case servicerequest.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			sr.ID = int64(value.Int64)
		case servicerequest.FieldRemarks:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field remarks", values[i])
			} else if value.Valid {
				sr.Remarks = value.String
			}
		case servicerequest.FieldAction:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field action", values[i])
			} else if value.Valid {
				sr.Action = value.String
			}
		case servicerequest.FieldPushedTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field PushedTime", values[i])
			} else if value.Valid {
				sr.PushedTime = value.Time
			}
		case servicerequest.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field UpdatedBy", values[i])
			} else if value.Valid {
				sr.UpdatedBy = value.String
			}
		case servicerequest.FieldUpdatedTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field UpdatedTime", values[i])
			} else if value.Valid {
				sr.UpdatedTime = value.Time
			}
		case servicerequest.FieldAssignedTo:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field AssignedTo", values[i])
			} else if value.Valid {
				sr.AssignedTo = value.String
			}
		case servicerequest.FieldRemarksNew:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field RemarksNew", values[i])
			} else if value.Valid {
				sr.RemarksNew = value.String
			}
		case servicerequest.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Status", values[i])
			} else if value.Valid {
				sr.Status = value.String
			}
		case servicerequest.FieldClosedOn:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field ClosedOn", values[i])
			} else if value.Valid {
				sr.ClosedOn = value.Time
			}
		default:
			sr.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ServiceRequest.
// This includes values selected through modifiers, order, etc.
func (sr *ServiceRequest) Value(name string) (ent.Value, error) {
	return sr.selectValues.Get(name)
}

// Update returns a builder for updating this ServiceRequest.
// Note that you need to call ServiceRequest.Unwrap() before calling this method if this ServiceRequest
// was returned from a transaction, and the transaction was committed or rolled back.
func (sr *ServiceRequest) Update() *ServiceRequestUpdateOne {
	return NewServiceRequestClient(sr.config).UpdateOne(sr)
}

// Unwrap unwraps the ServiceRequest entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sr *ServiceRequest) Unwrap() *ServiceRequest {
	_tx, ok := sr.config.driver.(*txDriver)
	if !ok {
		panic("ent: ServiceRequest is not a transactional entity")
	}
	sr.config.driver = _tx.drv
	return sr
}

// String implements the fmt.Stringer.
func (sr *ServiceRequest) String() string {
	var builder strings.Builder
	builder.WriteString("ServiceRequest(")
	builder.WriteString(fmt.Sprintf("id=%v, ", sr.ID))
	builder.WriteString("remarks=")
	builder.WriteString(sr.Remarks)
	builder.WriteString(", ")
	builder.WriteString("action=")
	builder.WriteString(sr.Action)
	builder.WriteString(", ")
	builder.WriteString("PushedTime=")
	builder.WriteString(sr.PushedTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("UpdatedBy=")
	builder.WriteString(sr.UpdatedBy)
	builder.WriteString(", ")
	builder.WriteString("UpdatedTime=")
	builder.WriteString(sr.UpdatedTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("AssignedTo=")
	builder.WriteString(sr.AssignedTo)
	builder.WriteString(", ")
	builder.WriteString("RemarksNew=")
	builder.WriteString(sr.RemarksNew)
	builder.WriteString(", ")
	builder.WriteString("Status=")
	builder.WriteString(sr.Status)
	builder.WriteString(", ")
	builder.WriteString("ClosedOn=")
	builder.WriteString(sr.ClosedOn.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// ServiceRequests is a parsable slice of ServiceRequest.
type ServiceRequests []*ServiceRequest
