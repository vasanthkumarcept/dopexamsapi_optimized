// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"recruit/ent/eligibilitycadrepaymatrix"
	"recruit/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// EligibilityCadrePayMatrixDelete is the builder for deleting a EligibilityCadrePayMatrix entity.
type EligibilityCadrePayMatrixDelete struct {
	config
	hooks    []Hook
	mutation *EligibilityCadrePayMatrixMutation
}

// Where appends a list predicates to the EligibilityCadrePayMatrixDelete builder.
func (ecpmd *EligibilityCadrePayMatrixDelete) Where(ps ...predicate.EligibilityCadrePayMatrix) *EligibilityCadrePayMatrixDelete {
	ecpmd.mutation.Where(ps...)
	return ecpmd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (ecpmd *EligibilityCadrePayMatrixDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, ecpmd.sqlExec, ecpmd.mutation, ecpmd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (ecpmd *EligibilityCadrePayMatrixDelete) ExecX(ctx context.Context) int {
	n, err := ecpmd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (ecpmd *EligibilityCadrePayMatrixDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(eligibilitycadrepaymatrix.Table, sqlgraph.NewFieldSpec(eligibilitycadrepaymatrix.FieldID, field.TypeInt64))
	if ps := ecpmd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, ecpmd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	ecpmd.mutation.done = true
	return affected, err
}

// EligibilityCadrePayMatrixDeleteOne is the builder for deleting a single EligibilityCadrePayMatrix entity.
type EligibilityCadrePayMatrixDeleteOne struct {
	ecpmd *EligibilityCadrePayMatrixDelete
}

// Where appends a list predicates to the EligibilityCadrePayMatrixDelete builder.
func (ecpmdo *EligibilityCadrePayMatrixDeleteOne) Where(ps ...predicate.EligibilityCadrePayMatrix) *EligibilityCadrePayMatrixDeleteOne {
	ecpmdo.ecpmd.mutation.Where(ps...)
	return ecpmdo
}

// Exec executes the deletion query.
func (ecpmdo *EligibilityCadrePayMatrixDeleteOne) Exec(ctx context.Context) error {
	n, err := ecpmdo.ecpmd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{eligibilitycadrepaymatrix.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (ecpmdo *EligibilityCadrePayMatrixDeleteOne) ExecX(ctx context.Context) {
	if err := ecpmdo.Exec(ctx); err != nil {
		panic(err)
	}
}
