// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"recruit/ent/exam_applications_pmpa"
	"recruit/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ExamApplicationsPMPADelete is the builder for deleting a Exam_Applications_PMPA entity.
type ExamApplicationsPMPADelete struct {
	config
	hooks    []Hook
	mutation *ExamApplicationsPMPAMutation
}

// Where appends a list predicates to the ExamApplicationsPMPADelete builder.
func (eapd *ExamApplicationsPMPADelete) Where(ps ...predicate.Exam_Applications_PMPA) *ExamApplicationsPMPADelete {
	eapd.mutation.Where(ps...)
	return eapd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (eapd *ExamApplicationsPMPADelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, eapd.sqlExec, eapd.mutation, eapd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (eapd *ExamApplicationsPMPADelete) ExecX(ctx context.Context) int {
	n, err := eapd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (eapd *ExamApplicationsPMPADelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(exam_applications_pmpa.Table, sqlgraph.NewFieldSpec(exam_applications_pmpa.FieldID, field.TypeInt64))
	if ps := eapd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, eapd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	eapd.mutation.done = true
	return affected, err
}

// ExamApplicationsPMPADeleteOne is the builder for deleting a single Exam_Applications_PMPA entity.
type ExamApplicationsPMPADeleteOne struct {
	eapd *ExamApplicationsPMPADelete
}

// Where appends a list predicates to the ExamApplicationsPMPADelete builder.
func (eapdo *ExamApplicationsPMPADeleteOne) Where(ps ...predicate.Exam_Applications_PMPA) *ExamApplicationsPMPADeleteOne {
	eapdo.eapd.mutation.Where(ps...)
	return eapdo
}

// Exec executes the deletion query.
func (eapdo *ExamApplicationsPMPADeleteOne) Exec(ctx context.Context) error {
	n, err := eapdo.eapd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{exam_applications_pmpa.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (eapdo *ExamApplicationsPMPADeleteOne) ExecX(ctx context.Context) {
	if err := eapdo.Exec(ctx); err != nil {
		panic(err)
	}
}
