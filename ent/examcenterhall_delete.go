// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"recruit/ent/examcenterhall"
	"recruit/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ExamCenterHallDelete is the builder for deleting a ExamCenterHall entity.
type ExamCenterHallDelete struct {
	config
	hooks    []Hook
	mutation *ExamCenterHallMutation
}

// Where appends a list predicates to the ExamCenterHallDelete builder.
func (echd *ExamCenterHallDelete) Where(ps ...predicate.ExamCenterHall) *ExamCenterHallDelete {
	echd.mutation.Where(ps...)
	return echd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (echd *ExamCenterHallDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, echd.sqlExec, echd.mutation, echd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (echd *ExamCenterHallDelete) ExecX(ctx context.Context) int {
	n, err := echd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (echd *ExamCenterHallDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(examcenterhall.Table, sqlgraph.NewFieldSpec(examcenterhall.FieldID, field.TypeInt32))
	if ps := echd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, echd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	echd.mutation.done = true
	return affected, err
}

// ExamCenterHallDeleteOne is the builder for deleting a single ExamCenterHall entity.
type ExamCenterHallDeleteOne struct {
	echd *ExamCenterHallDelete
}

// Where appends a list predicates to the ExamCenterHallDelete builder.
func (echdo *ExamCenterHallDeleteOne) Where(ps ...predicate.ExamCenterHall) *ExamCenterHallDeleteOne {
	echdo.echd.mutation.Where(ps...)
	return echdo
}

// Exec executes the deletion query.
func (echdo *ExamCenterHallDeleteOne) Exec(ctx context.Context) error {
	n, err := echdo.echd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{examcenterhall.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (echdo *ExamCenterHallDeleteOne) ExecX(ctx context.Context) {
	if err := echdo.Exec(ctx); err != nil {
		panic(err)
	}
}
