// Code generated by ent, DO NOT EDIT.

package usermaster

import (
	"recruit/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldLTE(FieldID, id))
}

// EmployeeID applies equality check predicate on the "EmployeeID" field. It's identical to EmployeeIDEQ.
func EmployeeID(v int64) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldEQ(FieldEmployeeID, v))
}

// EmployeeName applies equality check predicate on the "EmployeeName" field. It's identical to EmployeeNameEQ.
func EmployeeName(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldEQ(FieldEmployeeName, v))
}

// Mobile applies equality check predicate on the "Mobile" field. It's identical to MobileEQ.
func Mobile(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldEQ(FieldMobile, v))
}

// EmailID applies equality check predicate on the "EmailID" field. It's identical to EmailIDEQ.
func EmailID(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldEQ(FieldEmailID, v))
}

// UserName applies equality check predicate on the "UserName" field. It's identical to UserNameEQ.
func UserName(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldEQ(FieldUserName, v))
}

// Password applies equality check predicate on the "Password" field. It's identical to PasswordEQ.
func Password(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldEQ(FieldPassword, v))
}

// Status applies equality check predicate on the "Status" field. It's identical to StatusEQ.
func Status(v bool) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldEQ(FieldStatus, v))
}

// Statuss applies equality check predicate on the "Statuss" field. It's identical to StatussEQ.
func Statuss(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldEQ(FieldStatuss, v))
}

// OTP applies equality check predicate on the "OTP" field. It's identical to OTPEQ.
func OTP(v int32) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldEQ(FieldOTP, v))
}

// OTPNew applies equality check predicate on the "OTPNew" field. It's identical to OTPNewEQ.
func OTPNew(v int32) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldEQ(FieldOTPNew, v))
}

// EmailOTPNew applies equality check predicate on the "EmailOTPNew" field. It's identical to EmailOTPNewEQ.
func EmailOTPNew(v int32) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldEQ(FieldEmailOTPNew, v))
}

// OTPRemarks applies equality check predicate on the "OTPRemarks" field. It's identical to OTPRemarksEQ.
func OTPRemarks(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldEQ(FieldOTPRemarks, v))
}

// CreatedAt applies equality check predicate on the "CreatedAt" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldEQ(FieldCreatedAt, v))
}

// OTPTriggeredTime applies equality check predicate on the "OTPTriggeredTime" field. It's identical to OTPTriggeredTimeEQ.
func OTPTriggeredTime(v time.Time) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldEQ(FieldOTPTriggeredTime, v))
}

// OTPSavedTime applies equality check predicate on the "OTPSavedTime" field. It's identical to OTPSavedTimeEQ.
func OTPSavedTime(v time.Time) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldEQ(FieldOTPSavedTime, v))
}

// OTPExpiryTime applies equality check predicate on the "OTPExpiryTime" field. It's identical to OTPExpiryTimeEQ.
func OTPExpiryTime(v time.Time) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldEQ(FieldOTPExpiryTime, v))
}

// NewPasswordRequest applies equality check predicate on the "NewPasswordRequest" field. It's identical to NewPasswordRequestEQ.
func NewPasswordRequest(v bool) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldEQ(FieldNewPasswordRequest, v))
}

// EmailOTP applies equality check predicate on the "EmailOTP" field. It's identical to EmailOTPEQ.
func EmailOTP(v int32) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldEQ(FieldEmailOTP, v))
}

// EmailOTPRemarks applies equality check predicate on the "EmailOTPRemarks" field. It's identical to EmailOTPRemarksEQ.
func EmailOTPRemarks(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldEQ(FieldEmailOTPRemarks, v))
}

// EmailCreatedAt applies equality check predicate on the "EmailCreatedAt" field. It's identical to EmailCreatedAtEQ.
func EmailCreatedAt(v time.Time) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldEQ(FieldEmailCreatedAt, v))
}

// EmailOTPTriggeredTime applies equality check predicate on the "EmailOTPTriggeredTime" field. It's identical to EmailOTPTriggeredTimeEQ.
func EmailOTPTriggeredTime(v time.Time) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldEQ(FieldEmailOTPTriggeredTime, v))
}

// EmailOTPSavedTime applies equality check predicate on the "EmailOTPSavedTime" field. It's identical to EmailOTPSavedTimeEQ.
func EmailOTPSavedTime(v time.Time) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldEQ(FieldEmailOTPSavedTime, v))
}

// EmailOTPExpiryTime applies equality check predicate on the "EmailOTPExpiryTime" field. It's identical to EmailOTPExpiryTimeEQ.
func EmailOTPExpiryTime(v time.Time) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldEQ(FieldEmailOTPExpiryTime, v))
}

// EmailNewPasswordRequest applies equality check predicate on the "EmailNewPasswordRequest" field. It's identical to EmailNewPasswordRequestEQ.
func EmailNewPasswordRequest(v bool) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldEQ(FieldEmailNewPasswordRequest, v))
}

// UidToken applies equality check predicate on the "UidToken" field. It's identical to UidTokenEQ.
func UidToken(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldEQ(FieldUidToken, v))
}

// CreatedById applies equality check predicate on the "CreatedById" field. It's identical to CreatedByIdEQ.
func CreatedById(v int64) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldEQ(FieldCreatedById, v))
}

// CreatedByEmployeeId applies equality check predicate on the "CreatedByEmployeeId" field. It's identical to CreatedByEmployeeIdEQ.
func CreatedByEmployeeId(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldEQ(FieldCreatedByEmployeeId, v))
}

// CreatedByUserName applies equality check predicate on the "CreatedByUserName" field. It's identical to CreatedByUserNameEQ.
func CreatedByUserName(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldEQ(FieldCreatedByUserName, v))
}

// CreatedByDesignation applies equality check predicate on the "CreatedByDesignation" field. It's identical to CreatedByDesignationEQ.
func CreatedByDesignation(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldEQ(FieldCreatedByDesignation, v))
}

// CreatedDate applies equality check predicate on the "CreatedDate" field. It's identical to CreatedDateEQ.
func CreatedDate(v time.Time) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldEQ(FieldCreatedDate, v))
}

// DeletedById applies equality check predicate on the "DeletedById" field. It's identical to DeletedByIdEQ.
func DeletedById(v int64) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldEQ(FieldDeletedById, v))
}

// DeletedByEmployeeId applies equality check predicate on the "DeletedByEmployeeId" field. It's identical to DeletedByEmployeeIdEQ.
func DeletedByEmployeeId(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldEQ(FieldDeletedByEmployeeId, v))
}

// DeletedByUserName applies equality check predicate on the "DeletedByUserName" field. It's identical to DeletedByUserNameEQ.
func DeletedByUserName(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldEQ(FieldDeletedByUserName, v))
}

// DeletedByDesignation applies equality check predicate on the "DeletedByDesignation" field. It's identical to DeletedByDesignationEQ.
func DeletedByDesignation(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldEQ(FieldDeletedByDesignation, v))
}

// DeletedDate applies equality check predicate on the "DeletedDate" field. It's identical to DeletedDateEQ.
func DeletedDate(v time.Time) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldEQ(FieldDeletedDate, v))
}

// FacilityID applies equality check predicate on the "FacilityID" field. It's identical to FacilityIDEQ.
func FacilityID(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldEQ(FieldFacilityID, v))
}

// CircleFacilityId applies equality check predicate on the "CircleFacilityId" field. It's identical to CircleFacilityIdEQ.
func CircleFacilityId(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldEQ(FieldCircleFacilityId, v))
}

// CircleFacilityName applies equality check predicate on the "CircleFacilityName" field. It's identical to CircleFacilityNameEQ.
func CircleFacilityName(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldEQ(FieldCircleFacilityName, v))
}

// Designation applies equality check predicate on the "Designation" field. It's identical to DesignationEQ.
func Designation(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldEQ(FieldDesignation, v))
}

// RoleUserCode applies equality check predicate on the "RoleUserCode" field. It's identical to RoleUserCodeEQ.
func RoleUserCode(v int32) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldEQ(FieldRoleUserCode, v))
}

// Updatedby applies equality check predicate on the "Updatedby" field. It's identical to UpdatedbyEQ.
func Updatedby(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldEQ(FieldUpdatedby, v))
}

// UpdatedDate applies equality check predicate on the "updatedDate" field. It's identical to UpdatedDateEQ.
func UpdatedDate(v time.Time) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldEQ(FieldUpdatedDate, v))
}

// Modifiedby applies equality check predicate on the "Modifiedby" field. It's identical to ModifiedbyEQ.
func Modifiedby(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldEQ(FieldModifiedby, v))
}

// ModifiedDate applies equality check predicate on the "ModifiedDate" field. It's identical to ModifiedDateEQ.
func ModifiedDate(v time.Time) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldEQ(FieldModifiedDate, v))
}

// Operationstatus applies equality check predicate on the "Operationstatus" field. It's identical to OperationstatusEQ.
func Operationstatus(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldEQ(FieldOperationstatus, v))
}

// ExamCode applies equality check predicate on the "ExamCode" field. It's identical to ExamCodeEQ.
func ExamCode(v int32) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldEQ(FieldExamCode, v))
}

// ExamCodePS applies equality check predicate on the "ExamCodePS" field. It's identical to ExamCodePSEQ.
func ExamCodePS(v int32) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldEQ(FieldExamCodePS, v))
}

// DOB applies equality check predicate on the "DOB" field. It's identical to DOBEQ.
func DOB(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldEQ(FieldDOB, v))
}

// CreatedBy applies equality check predicate on the "CreatedBy" field. It's identical to CreatedByEQ.
func CreatedBy(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldEQ(FieldCreatedBy, v))
}

// EmployeeIDEQ applies the EQ predicate on the "EmployeeID" field.
func EmployeeIDEQ(v int64) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldEQ(FieldEmployeeID, v))
}

// EmployeeIDNEQ applies the NEQ predicate on the "EmployeeID" field.
func EmployeeIDNEQ(v int64) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldNEQ(FieldEmployeeID, v))
}

// EmployeeIDIn applies the In predicate on the "EmployeeID" field.
func EmployeeIDIn(vs ...int64) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldIn(FieldEmployeeID, vs...))
}

// EmployeeIDNotIn applies the NotIn predicate on the "EmployeeID" field.
func EmployeeIDNotIn(vs ...int64) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldNotIn(FieldEmployeeID, vs...))
}

// EmployeeIDGT applies the GT predicate on the "EmployeeID" field.
func EmployeeIDGT(v int64) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldGT(FieldEmployeeID, v))
}

// EmployeeIDGTE applies the GTE predicate on the "EmployeeID" field.
func EmployeeIDGTE(v int64) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldGTE(FieldEmployeeID, v))
}

// EmployeeIDLT applies the LT predicate on the "EmployeeID" field.
func EmployeeIDLT(v int64) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldLT(FieldEmployeeID, v))
}

// EmployeeIDLTE applies the LTE predicate on the "EmployeeID" field.
func EmployeeIDLTE(v int64) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldLTE(FieldEmployeeID, v))
}

// EmployeeIDIsNil applies the IsNil predicate on the "EmployeeID" field.
func EmployeeIDIsNil() predicate.UserMaster {
	return predicate.UserMaster(sql.FieldIsNull(FieldEmployeeID))
}

// EmployeeIDNotNil applies the NotNil predicate on the "EmployeeID" field.
func EmployeeIDNotNil() predicate.UserMaster {
	return predicate.UserMaster(sql.FieldNotNull(FieldEmployeeID))
}

// EmployeeNameEQ applies the EQ predicate on the "EmployeeName" field.
func EmployeeNameEQ(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldEQ(FieldEmployeeName, v))
}

// EmployeeNameNEQ applies the NEQ predicate on the "EmployeeName" field.
func EmployeeNameNEQ(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldNEQ(FieldEmployeeName, v))
}

// EmployeeNameIn applies the In predicate on the "EmployeeName" field.
func EmployeeNameIn(vs ...string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldIn(FieldEmployeeName, vs...))
}

// EmployeeNameNotIn applies the NotIn predicate on the "EmployeeName" field.
func EmployeeNameNotIn(vs ...string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldNotIn(FieldEmployeeName, vs...))
}

// EmployeeNameGT applies the GT predicate on the "EmployeeName" field.
func EmployeeNameGT(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldGT(FieldEmployeeName, v))
}

// EmployeeNameGTE applies the GTE predicate on the "EmployeeName" field.
func EmployeeNameGTE(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldGTE(FieldEmployeeName, v))
}

// EmployeeNameLT applies the LT predicate on the "EmployeeName" field.
func EmployeeNameLT(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldLT(FieldEmployeeName, v))
}

// EmployeeNameLTE applies the LTE predicate on the "EmployeeName" field.
func EmployeeNameLTE(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldLTE(FieldEmployeeName, v))
}

// EmployeeNameContains applies the Contains predicate on the "EmployeeName" field.
func EmployeeNameContains(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldContains(FieldEmployeeName, v))
}

// EmployeeNameHasPrefix applies the HasPrefix predicate on the "EmployeeName" field.
func EmployeeNameHasPrefix(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldHasPrefix(FieldEmployeeName, v))
}

// EmployeeNameHasSuffix applies the HasSuffix predicate on the "EmployeeName" field.
func EmployeeNameHasSuffix(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldHasSuffix(FieldEmployeeName, v))
}

// EmployeeNameIsNil applies the IsNil predicate on the "EmployeeName" field.
func EmployeeNameIsNil() predicate.UserMaster {
	return predicate.UserMaster(sql.FieldIsNull(FieldEmployeeName))
}

// EmployeeNameNotNil applies the NotNil predicate on the "EmployeeName" field.
func EmployeeNameNotNil() predicate.UserMaster {
	return predicate.UserMaster(sql.FieldNotNull(FieldEmployeeName))
}

// EmployeeNameEqualFold applies the EqualFold predicate on the "EmployeeName" field.
func EmployeeNameEqualFold(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldEqualFold(FieldEmployeeName, v))
}

// EmployeeNameContainsFold applies the ContainsFold predicate on the "EmployeeName" field.
func EmployeeNameContainsFold(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldContainsFold(FieldEmployeeName, v))
}

// MobileEQ applies the EQ predicate on the "Mobile" field.
func MobileEQ(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldEQ(FieldMobile, v))
}

// MobileNEQ applies the NEQ predicate on the "Mobile" field.
func MobileNEQ(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldNEQ(FieldMobile, v))
}

// MobileIn applies the In predicate on the "Mobile" field.
func MobileIn(vs ...string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldIn(FieldMobile, vs...))
}

// MobileNotIn applies the NotIn predicate on the "Mobile" field.
func MobileNotIn(vs ...string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldNotIn(FieldMobile, vs...))
}

// MobileGT applies the GT predicate on the "Mobile" field.
func MobileGT(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldGT(FieldMobile, v))
}

// MobileGTE applies the GTE predicate on the "Mobile" field.
func MobileGTE(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldGTE(FieldMobile, v))
}

// MobileLT applies the LT predicate on the "Mobile" field.
func MobileLT(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldLT(FieldMobile, v))
}

// MobileLTE applies the LTE predicate on the "Mobile" field.
func MobileLTE(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldLTE(FieldMobile, v))
}

// MobileContains applies the Contains predicate on the "Mobile" field.
func MobileContains(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldContains(FieldMobile, v))
}

// MobileHasPrefix applies the HasPrefix predicate on the "Mobile" field.
func MobileHasPrefix(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldHasPrefix(FieldMobile, v))
}

// MobileHasSuffix applies the HasSuffix predicate on the "Mobile" field.
func MobileHasSuffix(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldHasSuffix(FieldMobile, v))
}

// MobileIsNil applies the IsNil predicate on the "Mobile" field.
func MobileIsNil() predicate.UserMaster {
	return predicate.UserMaster(sql.FieldIsNull(FieldMobile))
}

// MobileNotNil applies the NotNil predicate on the "Mobile" field.
func MobileNotNil() predicate.UserMaster {
	return predicate.UserMaster(sql.FieldNotNull(FieldMobile))
}

// MobileEqualFold applies the EqualFold predicate on the "Mobile" field.
func MobileEqualFold(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldEqualFold(FieldMobile, v))
}

// MobileContainsFold applies the ContainsFold predicate on the "Mobile" field.
func MobileContainsFold(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldContainsFold(FieldMobile, v))
}

// EmailIDEQ applies the EQ predicate on the "EmailID" field.
func EmailIDEQ(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldEQ(FieldEmailID, v))
}

// EmailIDNEQ applies the NEQ predicate on the "EmailID" field.
func EmailIDNEQ(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldNEQ(FieldEmailID, v))
}

// EmailIDIn applies the In predicate on the "EmailID" field.
func EmailIDIn(vs ...string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldIn(FieldEmailID, vs...))
}

// EmailIDNotIn applies the NotIn predicate on the "EmailID" field.
func EmailIDNotIn(vs ...string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldNotIn(FieldEmailID, vs...))
}

// EmailIDGT applies the GT predicate on the "EmailID" field.
func EmailIDGT(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldGT(FieldEmailID, v))
}

// EmailIDGTE applies the GTE predicate on the "EmailID" field.
func EmailIDGTE(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldGTE(FieldEmailID, v))
}

// EmailIDLT applies the LT predicate on the "EmailID" field.
func EmailIDLT(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldLT(FieldEmailID, v))
}

// EmailIDLTE applies the LTE predicate on the "EmailID" field.
func EmailIDLTE(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldLTE(FieldEmailID, v))
}

// EmailIDContains applies the Contains predicate on the "EmailID" field.
func EmailIDContains(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldContains(FieldEmailID, v))
}

// EmailIDHasPrefix applies the HasPrefix predicate on the "EmailID" field.
func EmailIDHasPrefix(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldHasPrefix(FieldEmailID, v))
}

// EmailIDHasSuffix applies the HasSuffix predicate on the "EmailID" field.
func EmailIDHasSuffix(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldHasSuffix(FieldEmailID, v))
}

// EmailIDIsNil applies the IsNil predicate on the "EmailID" field.
func EmailIDIsNil() predicate.UserMaster {
	return predicate.UserMaster(sql.FieldIsNull(FieldEmailID))
}

// EmailIDNotNil applies the NotNil predicate on the "EmailID" field.
func EmailIDNotNil() predicate.UserMaster {
	return predicate.UserMaster(sql.FieldNotNull(FieldEmailID))
}

// EmailIDEqualFold applies the EqualFold predicate on the "EmailID" field.
func EmailIDEqualFold(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldEqualFold(FieldEmailID, v))
}

// EmailIDContainsFold applies the ContainsFold predicate on the "EmailID" field.
func EmailIDContainsFold(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldContainsFold(FieldEmailID, v))
}

// UserNameEQ applies the EQ predicate on the "UserName" field.
func UserNameEQ(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldEQ(FieldUserName, v))
}

// UserNameNEQ applies the NEQ predicate on the "UserName" field.
func UserNameNEQ(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldNEQ(FieldUserName, v))
}

// UserNameIn applies the In predicate on the "UserName" field.
func UserNameIn(vs ...string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldIn(FieldUserName, vs...))
}

// UserNameNotIn applies the NotIn predicate on the "UserName" field.
func UserNameNotIn(vs ...string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldNotIn(FieldUserName, vs...))
}

// UserNameGT applies the GT predicate on the "UserName" field.
func UserNameGT(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldGT(FieldUserName, v))
}

// UserNameGTE applies the GTE predicate on the "UserName" field.
func UserNameGTE(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldGTE(FieldUserName, v))
}

// UserNameLT applies the LT predicate on the "UserName" field.
func UserNameLT(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldLT(FieldUserName, v))
}

// UserNameLTE applies the LTE predicate on the "UserName" field.
func UserNameLTE(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldLTE(FieldUserName, v))
}

// UserNameContains applies the Contains predicate on the "UserName" field.
func UserNameContains(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldContains(FieldUserName, v))
}

// UserNameHasPrefix applies the HasPrefix predicate on the "UserName" field.
func UserNameHasPrefix(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldHasPrefix(FieldUserName, v))
}

// UserNameHasSuffix applies the HasSuffix predicate on the "UserName" field.
func UserNameHasSuffix(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldHasSuffix(FieldUserName, v))
}

// UserNameIsNil applies the IsNil predicate on the "UserName" field.
func UserNameIsNil() predicate.UserMaster {
	return predicate.UserMaster(sql.FieldIsNull(FieldUserName))
}

// UserNameNotNil applies the NotNil predicate on the "UserName" field.
func UserNameNotNil() predicate.UserMaster {
	return predicate.UserMaster(sql.FieldNotNull(FieldUserName))
}

// UserNameEqualFold applies the EqualFold predicate on the "UserName" field.
func UserNameEqualFold(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldEqualFold(FieldUserName, v))
}

// UserNameContainsFold applies the ContainsFold predicate on the "UserName" field.
func UserNameContainsFold(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldContainsFold(FieldUserName, v))
}

// PasswordEQ applies the EQ predicate on the "Password" field.
func PasswordEQ(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldEQ(FieldPassword, v))
}

// PasswordNEQ applies the NEQ predicate on the "Password" field.
func PasswordNEQ(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldNEQ(FieldPassword, v))
}

// PasswordIn applies the In predicate on the "Password" field.
func PasswordIn(vs ...string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldIn(FieldPassword, vs...))
}

// PasswordNotIn applies the NotIn predicate on the "Password" field.
func PasswordNotIn(vs ...string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldNotIn(FieldPassword, vs...))
}

// PasswordGT applies the GT predicate on the "Password" field.
func PasswordGT(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldGT(FieldPassword, v))
}

// PasswordGTE applies the GTE predicate on the "Password" field.
func PasswordGTE(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldGTE(FieldPassword, v))
}

// PasswordLT applies the LT predicate on the "Password" field.
func PasswordLT(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldLT(FieldPassword, v))
}

// PasswordLTE applies the LTE predicate on the "Password" field.
func PasswordLTE(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldLTE(FieldPassword, v))
}

// PasswordContains applies the Contains predicate on the "Password" field.
func PasswordContains(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldContains(FieldPassword, v))
}

// PasswordHasPrefix applies the HasPrefix predicate on the "Password" field.
func PasswordHasPrefix(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldHasPrefix(FieldPassword, v))
}

// PasswordHasSuffix applies the HasSuffix predicate on the "Password" field.
func PasswordHasSuffix(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldHasSuffix(FieldPassword, v))
}

// PasswordIsNil applies the IsNil predicate on the "Password" field.
func PasswordIsNil() predicate.UserMaster {
	return predicate.UserMaster(sql.FieldIsNull(FieldPassword))
}

// PasswordNotNil applies the NotNil predicate on the "Password" field.
func PasswordNotNil() predicate.UserMaster {
	return predicate.UserMaster(sql.FieldNotNull(FieldPassword))
}

// PasswordEqualFold applies the EqualFold predicate on the "Password" field.
func PasswordEqualFold(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldEqualFold(FieldPassword, v))
}

// PasswordContainsFold applies the ContainsFold predicate on the "Password" field.
func PasswordContainsFold(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldContainsFold(FieldPassword, v))
}

// StatusEQ applies the EQ predicate on the "Status" field.
func StatusEQ(v bool) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "Status" field.
func StatusNEQ(v bool) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldNEQ(FieldStatus, v))
}

// StatusIsNil applies the IsNil predicate on the "Status" field.
func StatusIsNil() predicate.UserMaster {
	return predicate.UserMaster(sql.FieldIsNull(FieldStatus))
}

// StatusNotNil applies the NotNil predicate on the "Status" field.
func StatusNotNil() predicate.UserMaster {
	return predicate.UserMaster(sql.FieldNotNull(FieldStatus))
}

// StatussEQ applies the EQ predicate on the "Statuss" field.
func StatussEQ(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldEQ(FieldStatuss, v))
}

// StatussNEQ applies the NEQ predicate on the "Statuss" field.
func StatussNEQ(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldNEQ(FieldStatuss, v))
}

// StatussIn applies the In predicate on the "Statuss" field.
func StatussIn(vs ...string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldIn(FieldStatuss, vs...))
}

// StatussNotIn applies the NotIn predicate on the "Statuss" field.
func StatussNotIn(vs ...string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldNotIn(FieldStatuss, vs...))
}

// StatussGT applies the GT predicate on the "Statuss" field.
func StatussGT(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldGT(FieldStatuss, v))
}

// StatussGTE applies the GTE predicate on the "Statuss" field.
func StatussGTE(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldGTE(FieldStatuss, v))
}

// StatussLT applies the LT predicate on the "Statuss" field.
func StatussLT(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldLT(FieldStatuss, v))
}

// StatussLTE applies the LTE predicate on the "Statuss" field.
func StatussLTE(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldLTE(FieldStatuss, v))
}

// StatussContains applies the Contains predicate on the "Statuss" field.
func StatussContains(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldContains(FieldStatuss, v))
}

// StatussHasPrefix applies the HasPrefix predicate on the "Statuss" field.
func StatussHasPrefix(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldHasPrefix(FieldStatuss, v))
}

// StatussHasSuffix applies the HasSuffix predicate on the "Statuss" field.
func StatussHasSuffix(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldHasSuffix(FieldStatuss, v))
}

// StatussIsNil applies the IsNil predicate on the "Statuss" field.
func StatussIsNil() predicate.UserMaster {
	return predicate.UserMaster(sql.FieldIsNull(FieldStatuss))
}

// StatussNotNil applies the NotNil predicate on the "Statuss" field.
func StatussNotNil() predicate.UserMaster {
	return predicate.UserMaster(sql.FieldNotNull(FieldStatuss))
}

// StatussEqualFold applies the EqualFold predicate on the "Statuss" field.
func StatussEqualFold(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldEqualFold(FieldStatuss, v))
}

// StatussContainsFold applies the ContainsFold predicate on the "Statuss" field.
func StatussContainsFold(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldContainsFold(FieldStatuss, v))
}

// OTPEQ applies the EQ predicate on the "OTP" field.
func OTPEQ(v int32) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldEQ(FieldOTP, v))
}

// OTPNEQ applies the NEQ predicate on the "OTP" field.
func OTPNEQ(v int32) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldNEQ(FieldOTP, v))
}

// OTPIn applies the In predicate on the "OTP" field.
func OTPIn(vs ...int32) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldIn(FieldOTP, vs...))
}

// OTPNotIn applies the NotIn predicate on the "OTP" field.
func OTPNotIn(vs ...int32) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldNotIn(FieldOTP, vs...))
}

// OTPGT applies the GT predicate on the "OTP" field.
func OTPGT(v int32) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldGT(FieldOTP, v))
}

// OTPGTE applies the GTE predicate on the "OTP" field.
func OTPGTE(v int32) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldGTE(FieldOTP, v))
}

// OTPLT applies the LT predicate on the "OTP" field.
func OTPLT(v int32) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldLT(FieldOTP, v))
}

// OTPLTE applies the LTE predicate on the "OTP" field.
func OTPLTE(v int32) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldLTE(FieldOTP, v))
}

// OTPIsNil applies the IsNil predicate on the "OTP" field.
func OTPIsNil() predicate.UserMaster {
	return predicate.UserMaster(sql.FieldIsNull(FieldOTP))
}

// OTPNotNil applies the NotNil predicate on the "OTP" field.
func OTPNotNil() predicate.UserMaster {
	return predicate.UserMaster(sql.FieldNotNull(FieldOTP))
}

// OTPNewEQ applies the EQ predicate on the "OTPNew" field.
func OTPNewEQ(v int32) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldEQ(FieldOTPNew, v))
}

// OTPNewNEQ applies the NEQ predicate on the "OTPNew" field.
func OTPNewNEQ(v int32) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldNEQ(FieldOTPNew, v))
}

// OTPNewIn applies the In predicate on the "OTPNew" field.
func OTPNewIn(vs ...int32) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldIn(FieldOTPNew, vs...))
}

// OTPNewNotIn applies the NotIn predicate on the "OTPNew" field.
func OTPNewNotIn(vs ...int32) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldNotIn(FieldOTPNew, vs...))
}

// OTPNewGT applies the GT predicate on the "OTPNew" field.
func OTPNewGT(v int32) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldGT(FieldOTPNew, v))
}

// OTPNewGTE applies the GTE predicate on the "OTPNew" field.
func OTPNewGTE(v int32) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldGTE(FieldOTPNew, v))
}

// OTPNewLT applies the LT predicate on the "OTPNew" field.
func OTPNewLT(v int32) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldLT(FieldOTPNew, v))
}

// OTPNewLTE applies the LTE predicate on the "OTPNew" field.
func OTPNewLTE(v int32) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldLTE(FieldOTPNew, v))
}

// OTPNewIsNil applies the IsNil predicate on the "OTPNew" field.
func OTPNewIsNil() predicate.UserMaster {
	return predicate.UserMaster(sql.FieldIsNull(FieldOTPNew))
}

// OTPNewNotNil applies the NotNil predicate on the "OTPNew" field.
func OTPNewNotNil() predicate.UserMaster {
	return predicate.UserMaster(sql.FieldNotNull(FieldOTPNew))
}

// EmailOTPNewEQ applies the EQ predicate on the "EmailOTPNew" field.
func EmailOTPNewEQ(v int32) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldEQ(FieldEmailOTPNew, v))
}

// EmailOTPNewNEQ applies the NEQ predicate on the "EmailOTPNew" field.
func EmailOTPNewNEQ(v int32) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldNEQ(FieldEmailOTPNew, v))
}

// EmailOTPNewIn applies the In predicate on the "EmailOTPNew" field.
func EmailOTPNewIn(vs ...int32) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldIn(FieldEmailOTPNew, vs...))
}

// EmailOTPNewNotIn applies the NotIn predicate on the "EmailOTPNew" field.
func EmailOTPNewNotIn(vs ...int32) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldNotIn(FieldEmailOTPNew, vs...))
}

// EmailOTPNewGT applies the GT predicate on the "EmailOTPNew" field.
func EmailOTPNewGT(v int32) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldGT(FieldEmailOTPNew, v))
}

// EmailOTPNewGTE applies the GTE predicate on the "EmailOTPNew" field.
func EmailOTPNewGTE(v int32) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldGTE(FieldEmailOTPNew, v))
}

// EmailOTPNewLT applies the LT predicate on the "EmailOTPNew" field.
func EmailOTPNewLT(v int32) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldLT(FieldEmailOTPNew, v))
}

// EmailOTPNewLTE applies the LTE predicate on the "EmailOTPNew" field.
func EmailOTPNewLTE(v int32) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldLTE(FieldEmailOTPNew, v))
}

// EmailOTPNewIsNil applies the IsNil predicate on the "EmailOTPNew" field.
func EmailOTPNewIsNil() predicate.UserMaster {
	return predicate.UserMaster(sql.FieldIsNull(FieldEmailOTPNew))
}

// EmailOTPNewNotNil applies the NotNil predicate on the "EmailOTPNew" field.
func EmailOTPNewNotNil() predicate.UserMaster {
	return predicate.UserMaster(sql.FieldNotNull(FieldEmailOTPNew))
}

// OTPRemarksEQ applies the EQ predicate on the "OTPRemarks" field.
func OTPRemarksEQ(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldEQ(FieldOTPRemarks, v))
}

// OTPRemarksNEQ applies the NEQ predicate on the "OTPRemarks" field.
func OTPRemarksNEQ(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldNEQ(FieldOTPRemarks, v))
}

// OTPRemarksIn applies the In predicate on the "OTPRemarks" field.
func OTPRemarksIn(vs ...string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldIn(FieldOTPRemarks, vs...))
}

// OTPRemarksNotIn applies the NotIn predicate on the "OTPRemarks" field.
func OTPRemarksNotIn(vs ...string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldNotIn(FieldOTPRemarks, vs...))
}

// OTPRemarksGT applies the GT predicate on the "OTPRemarks" field.
func OTPRemarksGT(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldGT(FieldOTPRemarks, v))
}

// OTPRemarksGTE applies the GTE predicate on the "OTPRemarks" field.
func OTPRemarksGTE(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldGTE(FieldOTPRemarks, v))
}

// OTPRemarksLT applies the LT predicate on the "OTPRemarks" field.
func OTPRemarksLT(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldLT(FieldOTPRemarks, v))
}

// OTPRemarksLTE applies the LTE predicate on the "OTPRemarks" field.
func OTPRemarksLTE(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldLTE(FieldOTPRemarks, v))
}

// OTPRemarksContains applies the Contains predicate on the "OTPRemarks" field.
func OTPRemarksContains(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldContains(FieldOTPRemarks, v))
}

// OTPRemarksHasPrefix applies the HasPrefix predicate on the "OTPRemarks" field.
func OTPRemarksHasPrefix(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldHasPrefix(FieldOTPRemarks, v))
}

// OTPRemarksHasSuffix applies the HasSuffix predicate on the "OTPRemarks" field.
func OTPRemarksHasSuffix(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldHasSuffix(FieldOTPRemarks, v))
}

// OTPRemarksIsNil applies the IsNil predicate on the "OTPRemarks" field.
func OTPRemarksIsNil() predicate.UserMaster {
	return predicate.UserMaster(sql.FieldIsNull(FieldOTPRemarks))
}

// OTPRemarksNotNil applies the NotNil predicate on the "OTPRemarks" field.
func OTPRemarksNotNil() predicate.UserMaster {
	return predicate.UserMaster(sql.FieldNotNull(FieldOTPRemarks))
}

// OTPRemarksEqualFold applies the EqualFold predicate on the "OTPRemarks" field.
func OTPRemarksEqualFold(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldEqualFold(FieldOTPRemarks, v))
}

// OTPRemarksContainsFold applies the ContainsFold predicate on the "OTPRemarks" field.
func OTPRemarksContainsFold(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldContainsFold(FieldOTPRemarks, v))
}

// CreatedAtEQ applies the EQ predicate on the "CreatedAt" field.
func CreatedAtEQ(v time.Time) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "CreatedAt" field.
func CreatedAtNEQ(v time.Time) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "CreatedAt" field.
func CreatedAtIn(vs ...time.Time) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "CreatedAt" field.
func CreatedAtNotIn(vs ...time.Time) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "CreatedAt" field.
func CreatedAtGT(v time.Time) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "CreatedAt" field.
func CreatedAtGTE(v time.Time) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "CreatedAt" field.
func CreatedAtLT(v time.Time) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "CreatedAt" field.
func CreatedAtLTE(v time.Time) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldLTE(FieldCreatedAt, v))
}

// CreatedAtIsNil applies the IsNil predicate on the "CreatedAt" field.
func CreatedAtIsNil() predicate.UserMaster {
	return predicate.UserMaster(sql.FieldIsNull(FieldCreatedAt))
}

// CreatedAtNotNil applies the NotNil predicate on the "CreatedAt" field.
func CreatedAtNotNil() predicate.UserMaster {
	return predicate.UserMaster(sql.FieldNotNull(FieldCreatedAt))
}

// OTPTriggeredTimeEQ applies the EQ predicate on the "OTPTriggeredTime" field.
func OTPTriggeredTimeEQ(v time.Time) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldEQ(FieldOTPTriggeredTime, v))
}

// OTPTriggeredTimeNEQ applies the NEQ predicate on the "OTPTriggeredTime" field.
func OTPTriggeredTimeNEQ(v time.Time) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldNEQ(FieldOTPTriggeredTime, v))
}

// OTPTriggeredTimeIn applies the In predicate on the "OTPTriggeredTime" field.
func OTPTriggeredTimeIn(vs ...time.Time) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldIn(FieldOTPTriggeredTime, vs...))
}

// OTPTriggeredTimeNotIn applies the NotIn predicate on the "OTPTriggeredTime" field.
func OTPTriggeredTimeNotIn(vs ...time.Time) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldNotIn(FieldOTPTriggeredTime, vs...))
}

// OTPTriggeredTimeGT applies the GT predicate on the "OTPTriggeredTime" field.
func OTPTriggeredTimeGT(v time.Time) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldGT(FieldOTPTriggeredTime, v))
}

// OTPTriggeredTimeGTE applies the GTE predicate on the "OTPTriggeredTime" field.
func OTPTriggeredTimeGTE(v time.Time) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldGTE(FieldOTPTriggeredTime, v))
}

// OTPTriggeredTimeLT applies the LT predicate on the "OTPTriggeredTime" field.
func OTPTriggeredTimeLT(v time.Time) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldLT(FieldOTPTriggeredTime, v))
}

// OTPTriggeredTimeLTE applies the LTE predicate on the "OTPTriggeredTime" field.
func OTPTriggeredTimeLTE(v time.Time) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldLTE(FieldOTPTriggeredTime, v))
}

// OTPTriggeredTimeIsNil applies the IsNil predicate on the "OTPTriggeredTime" field.
func OTPTriggeredTimeIsNil() predicate.UserMaster {
	return predicate.UserMaster(sql.FieldIsNull(FieldOTPTriggeredTime))
}

// OTPTriggeredTimeNotNil applies the NotNil predicate on the "OTPTriggeredTime" field.
func OTPTriggeredTimeNotNil() predicate.UserMaster {
	return predicate.UserMaster(sql.FieldNotNull(FieldOTPTriggeredTime))
}

// OTPSavedTimeEQ applies the EQ predicate on the "OTPSavedTime" field.
func OTPSavedTimeEQ(v time.Time) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldEQ(FieldOTPSavedTime, v))
}

// OTPSavedTimeNEQ applies the NEQ predicate on the "OTPSavedTime" field.
func OTPSavedTimeNEQ(v time.Time) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldNEQ(FieldOTPSavedTime, v))
}

// OTPSavedTimeIn applies the In predicate on the "OTPSavedTime" field.
func OTPSavedTimeIn(vs ...time.Time) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldIn(FieldOTPSavedTime, vs...))
}

// OTPSavedTimeNotIn applies the NotIn predicate on the "OTPSavedTime" field.
func OTPSavedTimeNotIn(vs ...time.Time) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldNotIn(FieldOTPSavedTime, vs...))
}

// OTPSavedTimeGT applies the GT predicate on the "OTPSavedTime" field.
func OTPSavedTimeGT(v time.Time) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldGT(FieldOTPSavedTime, v))
}

// OTPSavedTimeGTE applies the GTE predicate on the "OTPSavedTime" field.
func OTPSavedTimeGTE(v time.Time) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldGTE(FieldOTPSavedTime, v))
}

// OTPSavedTimeLT applies the LT predicate on the "OTPSavedTime" field.
func OTPSavedTimeLT(v time.Time) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldLT(FieldOTPSavedTime, v))
}

// OTPSavedTimeLTE applies the LTE predicate on the "OTPSavedTime" field.
func OTPSavedTimeLTE(v time.Time) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldLTE(FieldOTPSavedTime, v))
}

// OTPSavedTimeIsNil applies the IsNil predicate on the "OTPSavedTime" field.
func OTPSavedTimeIsNil() predicate.UserMaster {
	return predicate.UserMaster(sql.FieldIsNull(FieldOTPSavedTime))
}

// OTPSavedTimeNotNil applies the NotNil predicate on the "OTPSavedTime" field.
func OTPSavedTimeNotNil() predicate.UserMaster {
	return predicate.UserMaster(sql.FieldNotNull(FieldOTPSavedTime))
}

// OTPExpiryTimeEQ applies the EQ predicate on the "OTPExpiryTime" field.
func OTPExpiryTimeEQ(v time.Time) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldEQ(FieldOTPExpiryTime, v))
}

// OTPExpiryTimeNEQ applies the NEQ predicate on the "OTPExpiryTime" field.
func OTPExpiryTimeNEQ(v time.Time) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldNEQ(FieldOTPExpiryTime, v))
}

// OTPExpiryTimeIn applies the In predicate on the "OTPExpiryTime" field.
func OTPExpiryTimeIn(vs ...time.Time) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldIn(FieldOTPExpiryTime, vs...))
}

// OTPExpiryTimeNotIn applies the NotIn predicate on the "OTPExpiryTime" field.
func OTPExpiryTimeNotIn(vs ...time.Time) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldNotIn(FieldOTPExpiryTime, vs...))
}

// OTPExpiryTimeGT applies the GT predicate on the "OTPExpiryTime" field.
func OTPExpiryTimeGT(v time.Time) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldGT(FieldOTPExpiryTime, v))
}

// OTPExpiryTimeGTE applies the GTE predicate on the "OTPExpiryTime" field.
func OTPExpiryTimeGTE(v time.Time) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldGTE(FieldOTPExpiryTime, v))
}

// OTPExpiryTimeLT applies the LT predicate on the "OTPExpiryTime" field.
func OTPExpiryTimeLT(v time.Time) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldLT(FieldOTPExpiryTime, v))
}

// OTPExpiryTimeLTE applies the LTE predicate on the "OTPExpiryTime" field.
func OTPExpiryTimeLTE(v time.Time) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldLTE(FieldOTPExpiryTime, v))
}

// OTPExpiryTimeIsNil applies the IsNil predicate on the "OTPExpiryTime" field.
func OTPExpiryTimeIsNil() predicate.UserMaster {
	return predicate.UserMaster(sql.FieldIsNull(FieldOTPExpiryTime))
}

// OTPExpiryTimeNotNil applies the NotNil predicate on the "OTPExpiryTime" field.
func OTPExpiryTimeNotNil() predicate.UserMaster {
	return predicate.UserMaster(sql.FieldNotNull(FieldOTPExpiryTime))
}

// NewPasswordRequestEQ applies the EQ predicate on the "NewPasswordRequest" field.
func NewPasswordRequestEQ(v bool) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldEQ(FieldNewPasswordRequest, v))
}

// NewPasswordRequestNEQ applies the NEQ predicate on the "NewPasswordRequest" field.
func NewPasswordRequestNEQ(v bool) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldNEQ(FieldNewPasswordRequest, v))
}

// NewPasswordRequestIsNil applies the IsNil predicate on the "NewPasswordRequest" field.
func NewPasswordRequestIsNil() predicate.UserMaster {
	return predicate.UserMaster(sql.FieldIsNull(FieldNewPasswordRequest))
}

// NewPasswordRequestNotNil applies the NotNil predicate on the "NewPasswordRequest" field.
func NewPasswordRequestNotNil() predicate.UserMaster {
	return predicate.UserMaster(sql.FieldNotNull(FieldNewPasswordRequest))
}

// EmailOTPEQ applies the EQ predicate on the "EmailOTP" field.
func EmailOTPEQ(v int32) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldEQ(FieldEmailOTP, v))
}

// EmailOTPNEQ applies the NEQ predicate on the "EmailOTP" field.
func EmailOTPNEQ(v int32) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldNEQ(FieldEmailOTP, v))
}

// EmailOTPIn applies the In predicate on the "EmailOTP" field.
func EmailOTPIn(vs ...int32) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldIn(FieldEmailOTP, vs...))
}

// EmailOTPNotIn applies the NotIn predicate on the "EmailOTP" field.
func EmailOTPNotIn(vs ...int32) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldNotIn(FieldEmailOTP, vs...))
}

// EmailOTPGT applies the GT predicate on the "EmailOTP" field.
func EmailOTPGT(v int32) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldGT(FieldEmailOTP, v))
}

// EmailOTPGTE applies the GTE predicate on the "EmailOTP" field.
func EmailOTPGTE(v int32) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldGTE(FieldEmailOTP, v))
}

// EmailOTPLT applies the LT predicate on the "EmailOTP" field.
func EmailOTPLT(v int32) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldLT(FieldEmailOTP, v))
}

// EmailOTPLTE applies the LTE predicate on the "EmailOTP" field.
func EmailOTPLTE(v int32) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldLTE(FieldEmailOTP, v))
}

// EmailOTPIsNil applies the IsNil predicate on the "EmailOTP" field.
func EmailOTPIsNil() predicate.UserMaster {
	return predicate.UserMaster(sql.FieldIsNull(FieldEmailOTP))
}

// EmailOTPNotNil applies the NotNil predicate on the "EmailOTP" field.
func EmailOTPNotNil() predicate.UserMaster {
	return predicate.UserMaster(sql.FieldNotNull(FieldEmailOTP))
}

// EmailOTPRemarksEQ applies the EQ predicate on the "EmailOTPRemarks" field.
func EmailOTPRemarksEQ(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldEQ(FieldEmailOTPRemarks, v))
}

// EmailOTPRemarksNEQ applies the NEQ predicate on the "EmailOTPRemarks" field.
func EmailOTPRemarksNEQ(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldNEQ(FieldEmailOTPRemarks, v))
}

// EmailOTPRemarksIn applies the In predicate on the "EmailOTPRemarks" field.
func EmailOTPRemarksIn(vs ...string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldIn(FieldEmailOTPRemarks, vs...))
}

// EmailOTPRemarksNotIn applies the NotIn predicate on the "EmailOTPRemarks" field.
func EmailOTPRemarksNotIn(vs ...string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldNotIn(FieldEmailOTPRemarks, vs...))
}

// EmailOTPRemarksGT applies the GT predicate on the "EmailOTPRemarks" field.
func EmailOTPRemarksGT(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldGT(FieldEmailOTPRemarks, v))
}

// EmailOTPRemarksGTE applies the GTE predicate on the "EmailOTPRemarks" field.
func EmailOTPRemarksGTE(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldGTE(FieldEmailOTPRemarks, v))
}

// EmailOTPRemarksLT applies the LT predicate on the "EmailOTPRemarks" field.
func EmailOTPRemarksLT(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldLT(FieldEmailOTPRemarks, v))
}

// EmailOTPRemarksLTE applies the LTE predicate on the "EmailOTPRemarks" field.
func EmailOTPRemarksLTE(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldLTE(FieldEmailOTPRemarks, v))
}

// EmailOTPRemarksContains applies the Contains predicate on the "EmailOTPRemarks" field.
func EmailOTPRemarksContains(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldContains(FieldEmailOTPRemarks, v))
}

// EmailOTPRemarksHasPrefix applies the HasPrefix predicate on the "EmailOTPRemarks" field.
func EmailOTPRemarksHasPrefix(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldHasPrefix(FieldEmailOTPRemarks, v))
}

// EmailOTPRemarksHasSuffix applies the HasSuffix predicate on the "EmailOTPRemarks" field.
func EmailOTPRemarksHasSuffix(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldHasSuffix(FieldEmailOTPRemarks, v))
}

// EmailOTPRemarksIsNil applies the IsNil predicate on the "EmailOTPRemarks" field.
func EmailOTPRemarksIsNil() predicate.UserMaster {
	return predicate.UserMaster(sql.FieldIsNull(FieldEmailOTPRemarks))
}

// EmailOTPRemarksNotNil applies the NotNil predicate on the "EmailOTPRemarks" field.
func EmailOTPRemarksNotNil() predicate.UserMaster {
	return predicate.UserMaster(sql.FieldNotNull(FieldEmailOTPRemarks))
}

// EmailOTPRemarksEqualFold applies the EqualFold predicate on the "EmailOTPRemarks" field.
func EmailOTPRemarksEqualFold(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldEqualFold(FieldEmailOTPRemarks, v))
}

// EmailOTPRemarksContainsFold applies the ContainsFold predicate on the "EmailOTPRemarks" field.
func EmailOTPRemarksContainsFold(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldContainsFold(FieldEmailOTPRemarks, v))
}

// EmailCreatedAtEQ applies the EQ predicate on the "EmailCreatedAt" field.
func EmailCreatedAtEQ(v time.Time) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldEQ(FieldEmailCreatedAt, v))
}

// EmailCreatedAtNEQ applies the NEQ predicate on the "EmailCreatedAt" field.
func EmailCreatedAtNEQ(v time.Time) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldNEQ(FieldEmailCreatedAt, v))
}

// EmailCreatedAtIn applies the In predicate on the "EmailCreatedAt" field.
func EmailCreatedAtIn(vs ...time.Time) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldIn(FieldEmailCreatedAt, vs...))
}

// EmailCreatedAtNotIn applies the NotIn predicate on the "EmailCreatedAt" field.
func EmailCreatedAtNotIn(vs ...time.Time) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldNotIn(FieldEmailCreatedAt, vs...))
}

// EmailCreatedAtGT applies the GT predicate on the "EmailCreatedAt" field.
func EmailCreatedAtGT(v time.Time) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldGT(FieldEmailCreatedAt, v))
}

// EmailCreatedAtGTE applies the GTE predicate on the "EmailCreatedAt" field.
func EmailCreatedAtGTE(v time.Time) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldGTE(FieldEmailCreatedAt, v))
}

// EmailCreatedAtLT applies the LT predicate on the "EmailCreatedAt" field.
func EmailCreatedAtLT(v time.Time) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldLT(FieldEmailCreatedAt, v))
}

// EmailCreatedAtLTE applies the LTE predicate on the "EmailCreatedAt" field.
func EmailCreatedAtLTE(v time.Time) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldLTE(FieldEmailCreatedAt, v))
}

// EmailCreatedAtIsNil applies the IsNil predicate on the "EmailCreatedAt" field.
func EmailCreatedAtIsNil() predicate.UserMaster {
	return predicate.UserMaster(sql.FieldIsNull(FieldEmailCreatedAt))
}

// EmailCreatedAtNotNil applies the NotNil predicate on the "EmailCreatedAt" field.
func EmailCreatedAtNotNil() predicate.UserMaster {
	return predicate.UserMaster(sql.FieldNotNull(FieldEmailCreatedAt))
}

// EmailOTPTriggeredTimeEQ applies the EQ predicate on the "EmailOTPTriggeredTime" field.
func EmailOTPTriggeredTimeEQ(v time.Time) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldEQ(FieldEmailOTPTriggeredTime, v))
}

// EmailOTPTriggeredTimeNEQ applies the NEQ predicate on the "EmailOTPTriggeredTime" field.
func EmailOTPTriggeredTimeNEQ(v time.Time) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldNEQ(FieldEmailOTPTriggeredTime, v))
}

// EmailOTPTriggeredTimeIn applies the In predicate on the "EmailOTPTriggeredTime" field.
func EmailOTPTriggeredTimeIn(vs ...time.Time) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldIn(FieldEmailOTPTriggeredTime, vs...))
}

// EmailOTPTriggeredTimeNotIn applies the NotIn predicate on the "EmailOTPTriggeredTime" field.
func EmailOTPTriggeredTimeNotIn(vs ...time.Time) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldNotIn(FieldEmailOTPTriggeredTime, vs...))
}

// EmailOTPTriggeredTimeGT applies the GT predicate on the "EmailOTPTriggeredTime" field.
func EmailOTPTriggeredTimeGT(v time.Time) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldGT(FieldEmailOTPTriggeredTime, v))
}

// EmailOTPTriggeredTimeGTE applies the GTE predicate on the "EmailOTPTriggeredTime" field.
func EmailOTPTriggeredTimeGTE(v time.Time) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldGTE(FieldEmailOTPTriggeredTime, v))
}

// EmailOTPTriggeredTimeLT applies the LT predicate on the "EmailOTPTriggeredTime" field.
func EmailOTPTriggeredTimeLT(v time.Time) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldLT(FieldEmailOTPTriggeredTime, v))
}

// EmailOTPTriggeredTimeLTE applies the LTE predicate on the "EmailOTPTriggeredTime" field.
func EmailOTPTriggeredTimeLTE(v time.Time) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldLTE(FieldEmailOTPTriggeredTime, v))
}

// EmailOTPTriggeredTimeIsNil applies the IsNil predicate on the "EmailOTPTriggeredTime" field.
func EmailOTPTriggeredTimeIsNil() predicate.UserMaster {
	return predicate.UserMaster(sql.FieldIsNull(FieldEmailOTPTriggeredTime))
}

// EmailOTPTriggeredTimeNotNil applies the NotNil predicate on the "EmailOTPTriggeredTime" field.
func EmailOTPTriggeredTimeNotNil() predicate.UserMaster {
	return predicate.UserMaster(sql.FieldNotNull(FieldEmailOTPTriggeredTime))
}

// EmailOTPSavedTimeEQ applies the EQ predicate on the "EmailOTPSavedTime" field.
func EmailOTPSavedTimeEQ(v time.Time) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldEQ(FieldEmailOTPSavedTime, v))
}

// EmailOTPSavedTimeNEQ applies the NEQ predicate on the "EmailOTPSavedTime" field.
func EmailOTPSavedTimeNEQ(v time.Time) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldNEQ(FieldEmailOTPSavedTime, v))
}

// EmailOTPSavedTimeIn applies the In predicate on the "EmailOTPSavedTime" field.
func EmailOTPSavedTimeIn(vs ...time.Time) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldIn(FieldEmailOTPSavedTime, vs...))
}

// EmailOTPSavedTimeNotIn applies the NotIn predicate on the "EmailOTPSavedTime" field.
func EmailOTPSavedTimeNotIn(vs ...time.Time) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldNotIn(FieldEmailOTPSavedTime, vs...))
}

// EmailOTPSavedTimeGT applies the GT predicate on the "EmailOTPSavedTime" field.
func EmailOTPSavedTimeGT(v time.Time) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldGT(FieldEmailOTPSavedTime, v))
}

// EmailOTPSavedTimeGTE applies the GTE predicate on the "EmailOTPSavedTime" field.
func EmailOTPSavedTimeGTE(v time.Time) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldGTE(FieldEmailOTPSavedTime, v))
}

// EmailOTPSavedTimeLT applies the LT predicate on the "EmailOTPSavedTime" field.
func EmailOTPSavedTimeLT(v time.Time) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldLT(FieldEmailOTPSavedTime, v))
}

// EmailOTPSavedTimeLTE applies the LTE predicate on the "EmailOTPSavedTime" field.
func EmailOTPSavedTimeLTE(v time.Time) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldLTE(FieldEmailOTPSavedTime, v))
}

// EmailOTPSavedTimeIsNil applies the IsNil predicate on the "EmailOTPSavedTime" field.
func EmailOTPSavedTimeIsNil() predicate.UserMaster {
	return predicate.UserMaster(sql.FieldIsNull(FieldEmailOTPSavedTime))
}

// EmailOTPSavedTimeNotNil applies the NotNil predicate on the "EmailOTPSavedTime" field.
func EmailOTPSavedTimeNotNil() predicate.UserMaster {
	return predicate.UserMaster(sql.FieldNotNull(FieldEmailOTPSavedTime))
}

// EmailOTPExpiryTimeEQ applies the EQ predicate on the "EmailOTPExpiryTime" field.
func EmailOTPExpiryTimeEQ(v time.Time) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldEQ(FieldEmailOTPExpiryTime, v))
}

// EmailOTPExpiryTimeNEQ applies the NEQ predicate on the "EmailOTPExpiryTime" field.
func EmailOTPExpiryTimeNEQ(v time.Time) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldNEQ(FieldEmailOTPExpiryTime, v))
}

// EmailOTPExpiryTimeIn applies the In predicate on the "EmailOTPExpiryTime" field.
func EmailOTPExpiryTimeIn(vs ...time.Time) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldIn(FieldEmailOTPExpiryTime, vs...))
}

// EmailOTPExpiryTimeNotIn applies the NotIn predicate on the "EmailOTPExpiryTime" field.
func EmailOTPExpiryTimeNotIn(vs ...time.Time) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldNotIn(FieldEmailOTPExpiryTime, vs...))
}

// EmailOTPExpiryTimeGT applies the GT predicate on the "EmailOTPExpiryTime" field.
func EmailOTPExpiryTimeGT(v time.Time) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldGT(FieldEmailOTPExpiryTime, v))
}

// EmailOTPExpiryTimeGTE applies the GTE predicate on the "EmailOTPExpiryTime" field.
func EmailOTPExpiryTimeGTE(v time.Time) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldGTE(FieldEmailOTPExpiryTime, v))
}

// EmailOTPExpiryTimeLT applies the LT predicate on the "EmailOTPExpiryTime" field.
func EmailOTPExpiryTimeLT(v time.Time) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldLT(FieldEmailOTPExpiryTime, v))
}

// EmailOTPExpiryTimeLTE applies the LTE predicate on the "EmailOTPExpiryTime" field.
func EmailOTPExpiryTimeLTE(v time.Time) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldLTE(FieldEmailOTPExpiryTime, v))
}

// EmailOTPExpiryTimeIsNil applies the IsNil predicate on the "EmailOTPExpiryTime" field.
func EmailOTPExpiryTimeIsNil() predicate.UserMaster {
	return predicate.UserMaster(sql.FieldIsNull(FieldEmailOTPExpiryTime))
}

// EmailOTPExpiryTimeNotNil applies the NotNil predicate on the "EmailOTPExpiryTime" field.
func EmailOTPExpiryTimeNotNil() predicate.UserMaster {
	return predicate.UserMaster(sql.FieldNotNull(FieldEmailOTPExpiryTime))
}

// EmailNewPasswordRequestEQ applies the EQ predicate on the "EmailNewPasswordRequest" field.
func EmailNewPasswordRequestEQ(v bool) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldEQ(FieldEmailNewPasswordRequest, v))
}

// EmailNewPasswordRequestNEQ applies the NEQ predicate on the "EmailNewPasswordRequest" field.
func EmailNewPasswordRequestNEQ(v bool) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldNEQ(FieldEmailNewPasswordRequest, v))
}

// EmailNewPasswordRequestIsNil applies the IsNil predicate on the "EmailNewPasswordRequest" field.
func EmailNewPasswordRequestIsNil() predicate.UserMaster {
	return predicate.UserMaster(sql.FieldIsNull(FieldEmailNewPasswordRequest))
}

// EmailNewPasswordRequestNotNil applies the NotNil predicate on the "EmailNewPasswordRequest" field.
func EmailNewPasswordRequestNotNil() predicate.UserMaster {
	return predicate.UserMaster(sql.FieldNotNull(FieldEmailNewPasswordRequest))
}

// UidTokenEQ applies the EQ predicate on the "UidToken" field.
func UidTokenEQ(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldEQ(FieldUidToken, v))
}

// UidTokenNEQ applies the NEQ predicate on the "UidToken" field.
func UidTokenNEQ(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldNEQ(FieldUidToken, v))
}

// UidTokenIn applies the In predicate on the "UidToken" field.
func UidTokenIn(vs ...string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldIn(FieldUidToken, vs...))
}

// UidTokenNotIn applies the NotIn predicate on the "UidToken" field.
func UidTokenNotIn(vs ...string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldNotIn(FieldUidToken, vs...))
}

// UidTokenGT applies the GT predicate on the "UidToken" field.
func UidTokenGT(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldGT(FieldUidToken, v))
}

// UidTokenGTE applies the GTE predicate on the "UidToken" field.
func UidTokenGTE(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldGTE(FieldUidToken, v))
}

// UidTokenLT applies the LT predicate on the "UidToken" field.
func UidTokenLT(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldLT(FieldUidToken, v))
}

// UidTokenLTE applies the LTE predicate on the "UidToken" field.
func UidTokenLTE(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldLTE(FieldUidToken, v))
}

// UidTokenContains applies the Contains predicate on the "UidToken" field.
func UidTokenContains(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldContains(FieldUidToken, v))
}

// UidTokenHasPrefix applies the HasPrefix predicate on the "UidToken" field.
func UidTokenHasPrefix(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldHasPrefix(FieldUidToken, v))
}

// UidTokenHasSuffix applies the HasSuffix predicate on the "UidToken" field.
func UidTokenHasSuffix(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldHasSuffix(FieldUidToken, v))
}

// UidTokenIsNil applies the IsNil predicate on the "UidToken" field.
func UidTokenIsNil() predicate.UserMaster {
	return predicate.UserMaster(sql.FieldIsNull(FieldUidToken))
}

// UidTokenNotNil applies the NotNil predicate on the "UidToken" field.
func UidTokenNotNil() predicate.UserMaster {
	return predicate.UserMaster(sql.FieldNotNull(FieldUidToken))
}

// UidTokenEqualFold applies the EqualFold predicate on the "UidToken" field.
func UidTokenEqualFold(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldEqualFold(FieldUidToken, v))
}

// UidTokenContainsFold applies the ContainsFold predicate on the "UidToken" field.
func UidTokenContainsFold(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldContainsFold(FieldUidToken, v))
}

// CreatedByIdEQ applies the EQ predicate on the "CreatedById" field.
func CreatedByIdEQ(v int64) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldEQ(FieldCreatedById, v))
}

// CreatedByIdNEQ applies the NEQ predicate on the "CreatedById" field.
func CreatedByIdNEQ(v int64) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldNEQ(FieldCreatedById, v))
}

// CreatedByIdIn applies the In predicate on the "CreatedById" field.
func CreatedByIdIn(vs ...int64) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldIn(FieldCreatedById, vs...))
}

// CreatedByIdNotIn applies the NotIn predicate on the "CreatedById" field.
func CreatedByIdNotIn(vs ...int64) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldNotIn(FieldCreatedById, vs...))
}

// CreatedByIdGT applies the GT predicate on the "CreatedById" field.
func CreatedByIdGT(v int64) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldGT(FieldCreatedById, v))
}

// CreatedByIdGTE applies the GTE predicate on the "CreatedById" field.
func CreatedByIdGTE(v int64) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldGTE(FieldCreatedById, v))
}

// CreatedByIdLT applies the LT predicate on the "CreatedById" field.
func CreatedByIdLT(v int64) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldLT(FieldCreatedById, v))
}

// CreatedByIdLTE applies the LTE predicate on the "CreatedById" field.
func CreatedByIdLTE(v int64) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldLTE(FieldCreatedById, v))
}

// CreatedByIdIsNil applies the IsNil predicate on the "CreatedById" field.
func CreatedByIdIsNil() predicate.UserMaster {
	return predicate.UserMaster(sql.FieldIsNull(FieldCreatedById))
}

// CreatedByIdNotNil applies the NotNil predicate on the "CreatedById" field.
func CreatedByIdNotNil() predicate.UserMaster {
	return predicate.UserMaster(sql.FieldNotNull(FieldCreatedById))
}

// CreatedByEmployeeIdEQ applies the EQ predicate on the "CreatedByEmployeeId" field.
func CreatedByEmployeeIdEQ(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldEQ(FieldCreatedByEmployeeId, v))
}

// CreatedByEmployeeIdNEQ applies the NEQ predicate on the "CreatedByEmployeeId" field.
func CreatedByEmployeeIdNEQ(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldNEQ(FieldCreatedByEmployeeId, v))
}

// CreatedByEmployeeIdIn applies the In predicate on the "CreatedByEmployeeId" field.
func CreatedByEmployeeIdIn(vs ...string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldIn(FieldCreatedByEmployeeId, vs...))
}

// CreatedByEmployeeIdNotIn applies the NotIn predicate on the "CreatedByEmployeeId" field.
func CreatedByEmployeeIdNotIn(vs ...string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldNotIn(FieldCreatedByEmployeeId, vs...))
}

// CreatedByEmployeeIdGT applies the GT predicate on the "CreatedByEmployeeId" field.
func CreatedByEmployeeIdGT(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldGT(FieldCreatedByEmployeeId, v))
}

// CreatedByEmployeeIdGTE applies the GTE predicate on the "CreatedByEmployeeId" field.
func CreatedByEmployeeIdGTE(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldGTE(FieldCreatedByEmployeeId, v))
}

// CreatedByEmployeeIdLT applies the LT predicate on the "CreatedByEmployeeId" field.
func CreatedByEmployeeIdLT(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldLT(FieldCreatedByEmployeeId, v))
}

// CreatedByEmployeeIdLTE applies the LTE predicate on the "CreatedByEmployeeId" field.
func CreatedByEmployeeIdLTE(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldLTE(FieldCreatedByEmployeeId, v))
}

// CreatedByEmployeeIdContains applies the Contains predicate on the "CreatedByEmployeeId" field.
func CreatedByEmployeeIdContains(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldContains(FieldCreatedByEmployeeId, v))
}

// CreatedByEmployeeIdHasPrefix applies the HasPrefix predicate on the "CreatedByEmployeeId" field.
func CreatedByEmployeeIdHasPrefix(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldHasPrefix(FieldCreatedByEmployeeId, v))
}

// CreatedByEmployeeIdHasSuffix applies the HasSuffix predicate on the "CreatedByEmployeeId" field.
func CreatedByEmployeeIdHasSuffix(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldHasSuffix(FieldCreatedByEmployeeId, v))
}

// CreatedByEmployeeIdIsNil applies the IsNil predicate on the "CreatedByEmployeeId" field.
func CreatedByEmployeeIdIsNil() predicate.UserMaster {
	return predicate.UserMaster(sql.FieldIsNull(FieldCreatedByEmployeeId))
}

// CreatedByEmployeeIdNotNil applies the NotNil predicate on the "CreatedByEmployeeId" field.
func CreatedByEmployeeIdNotNil() predicate.UserMaster {
	return predicate.UserMaster(sql.FieldNotNull(FieldCreatedByEmployeeId))
}

// CreatedByEmployeeIdEqualFold applies the EqualFold predicate on the "CreatedByEmployeeId" field.
func CreatedByEmployeeIdEqualFold(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldEqualFold(FieldCreatedByEmployeeId, v))
}

// CreatedByEmployeeIdContainsFold applies the ContainsFold predicate on the "CreatedByEmployeeId" field.
func CreatedByEmployeeIdContainsFold(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldContainsFold(FieldCreatedByEmployeeId, v))
}

// CreatedByUserNameEQ applies the EQ predicate on the "CreatedByUserName" field.
func CreatedByUserNameEQ(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldEQ(FieldCreatedByUserName, v))
}

// CreatedByUserNameNEQ applies the NEQ predicate on the "CreatedByUserName" field.
func CreatedByUserNameNEQ(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldNEQ(FieldCreatedByUserName, v))
}

// CreatedByUserNameIn applies the In predicate on the "CreatedByUserName" field.
func CreatedByUserNameIn(vs ...string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldIn(FieldCreatedByUserName, vs...))
}

// CreatedByUserNameNotIn applies the NotIn predicate on the "CreatedByUserName" field.
func CreatedByUserNameNotIn(vs ...string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldNotIn(FieldCreatedByUserName, vs...))
}

// CreatedByUserNameGT applies the GT predicate on the "CreatedByUserName" field.
func CreatedByUserNameGT(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldGT(FieldCreatedByUserName, v))
}

// CreatedByUserNameGTE applies the GTE predicate on the "CreatedByUserName" field.
func CreatedByUserNameGTE(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldGTE(FieldCreatedByUserName, v))
}

// CreatedByUserNameLT applies the LT predicate on the "CreatedByUserName" field.
func CreatedByUserNameLT(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldLT(FieldCreatedByUserName, v))
}

// CreatedByUserNameLTE applies the LTE predicate on the "CreatedByUserName" field.
func CreatedByUserNameLTE(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldLTE(FieldCreatedByUserName, v))
}

// CreatedByUserNameContains applies the Contains predicate on the "CreatedByUserName" field.
func CreatedByUserNameContains(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldContains(FieldCreatedByUserName, v))
}

// CreatedByUserNameHasPrefix applies the HasPrefix predicate on the "CreatedByUserName" field.
func CreatedByUserNameHasPrefix(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldHasPrefix(FieldCreatedByUserName, v))
}

// CreatedByUserNameHasSuffix applies the HasSuffix predicate on the "CreatedByUserName" field.
func CreatedByUserNameHasSuffix(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldHasSuffix(FieldCreatedByUserName, v))
}

// CreatedByUserNameIsNil applies the IsNil predicate on the "CreatedByUserName" field.
func CreatedByUserNameIsNil() predicate.UserMaster {
	return predicate.UserMaster(sql.FieldIsNull(FieldCreatedByUserName))
}

// CreatedByUserNameNotNil applies the NotNil predicate on the "CreatedByUserName" field.
func CreatedByUserNameNotNil() predicate.UserMaster {
	return predicate.UserMaster(sql.FieldNotNull(FieldCreatedByUserName))
}

// CreatedByUserNameEqualFold applies the EqualFold predicate on the "CreatedByUserName" field.
func CreatedByUserNameEqualFold(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldEqualFold(FieldCreatedByUserName, v))
}

// CreatedByUserNameContainsFold applies the ContainsFold predicate on the "CreatedByUserName" field.
func CreatedByUserNameContainsFold(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldContainsFold(FieldCreatedByUserName, v))
}

// CreatedByDesignationEQ applies the EQ predicate on the "CreatedByDesignation" field.
func CreatedByDesignationEQ(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldEQ(FieldCreatedByDesignation, v))
}

// CreatedByDesignationNEQ applies the NEQ predicate on the "CreatedByDesignation" field.
func CreatedByDesignationNEQ(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldNEQ(FieldCreatedByDesignation, v))
}

// CreatedByDesignationIn applies the In predicate on the "CreatedByDesignation" field.
func CreatedByDesignationIn(vs ...string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldIn(FieldCreatedByDesignation, vs...))
}

// CreatedByDesignationNotIn applies the NotIn predicate on the "CreatedByDesignation" field.
func CreatedByDesignationNotIn(vs ...string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldNotIn(FieldCreatedByDesignation, vs...))
}

// CreatedByDesignationGT applies the GT predicate on the "CreatedByDesignation" field.
func CreatedByDesignationGT(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldGT(FieldCreatedByDesignation, v))
}

// CreatedByDesignationGTE applies the GTE predicate on the "CreatedByDesignation" field.
func CreatedByDesignationGTE(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldGTE(FieldCreatedByDesignation, v))
}

// CreatedByDesignationLT applies the LT predicate on the "CreatedByDesignation" field.
func CreatedByDesignationLT(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldLT(FieldCreatedByDesignation, v))
}

// CreatedByDesignationLTE applies the LTE predicate on the "CreatedByDesignation" field.
func CreatedByDesignationLTE(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldLTE(FieldCreatedByDesignation, v))
}

// CreatedByDesignationContains applies the Contains predicate on the "CreatedByDesignation" field.
func CreatedByDesignationContains(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldContains(FieldCreatedByDesignation, v))
}

// CreatedByDesignationHasPrefix applies the HasPrefix predicate on the "CreatedByDesignation" field.
func CreatedByDesignationHasPrefix(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldHasPrefix(FieldCreatedByDesignation, v))
}

// CreatedByDesignationHasSuffix applies the HasSuffix predicate on the "CreatedByDesignation" field.
func CreatedByDesignationHasSuffix(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldHasSuffix(FieldCreatedByDesignation, v))
}

// CreatedByDesignationIsNil applies the IsNil predicate on the "CreatedByDesignation" field.
func CreatedByDesignationIsNil() predicate.UserMaster {
	return predicate.UserMaster(sql.FieldIsNull(FieldCreatedByDesignation))
}

// CreatedByDesignationNotNil applies the NotNil predicate on the "CreatedByDesignation" field.
func CreatedByDesignationNotNil() predicate.UserMaster {
	return predicate.UserMaster(sql.FieldNotNull(FieldCreatedByDesignation))
}

// CreatedByDesignationEqualFold applies the EqualFold predicate on the "CreatedByDesignation" field.
func CreatedByDesignationEqualFold(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldEqualFold(FieldCreatedByDesignation, v))
}

// CreatedByDesignationContainsFold applies the ContainsFold predicate on the "CreatedByDesignation" field.
func CreatedByDesignationContainsFold(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldContainsFold(FieldCreatedByDesignation, v))
}

// CreatedDateEQ applies the EQ predicate on the "CreatedDate" field.
func CreatedDateEQ(v time.Time) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldEQ(FieldCreatedDate, v))
}

// CreatedDateNEQ applies the NEQ predicate on the "CreatedDate" field.
func CreatedDateNEQ(v time.Time) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldNEQ(FieldCreatedDate, v))
}

// CreatedDateIn applies the In predicate on the "CreatedDate" field.
func CreatedDateIn(vs ...time.Time) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldIn(FieldCreatedDate, vs...))
}

// CreatedDateNotIn applies the NotIn predicate on the "CreatedDate" field.
func CreatedDateNotIn(vs ...time.Time) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldNotIn(FieldCreatedDate, vs...))
}

// CreatedDateGT applies the GT predicate on the "CreatedDate" field.
func CreatedDateGT(v time.Time) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldGT(FieldCreatedDate, v))
}

// CreatedDateGTE applies the GTE predicate on the "CreatedDate" field.
func CreatedDateGTE(v time.Time) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldGTE(FieldCreatedDate, v))
}

// CreatedDateLT applies the LT predicate on the "CreatedDate" field.
func CreatedDateLT(v time.Time) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldLT(FieldCreatedDate, v))
}

// CreatedDateLTE applies the LTE predicate on the "CreatedDate" field.
func CreatedDateLTE(v time.Time) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldLTE(FieldCreatedDate, v))
}

// CreatedDateIsNil applies the IsNil predicate on the "CreatedDate" field.
func CreatedDateIsNil() predicate.UserMaster {
	return predicate.UserMaster(sql.FieldIsNull(FieldCreatedDate))
}

// CreatedDateNotNil applies the NotNil predicate on the "CreatedDate" field.
func CreatedDateNotNil() predicate.UserMaster {
	return predicate.UserMaster(sql.FieldNotNull(FieldCreatedDate))
}

// DeletedByIdEQ applies the EQ predicate on the "DeletedById" field.
func DeletedByIdEQ(v int64) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldEQ(FieldDeletedById, v))
}

// DeletedByIdNEQ applies the NEQ predicate on the "DeletedById" field.
func DeletedByIdNEQ(v int64) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldNEQ(FieldDeletedById, v))
}

// DeletedByIdIn applies the In predicate on the "DeletedById" field.
func DeletedByIdIn(vs ...int64) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldIn(FieldDeletedById, vs...))
}

// DeletedByIdNotIn applies the NotIn predicate on the "DeletedById" field.
func DeletedByIdNotIn(vs ...int64) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldNotIn(FieldDeletedById, vs...))
}

// DeletedByIdGT applies the GT predicate on the "DeletedById" field.
func DeletedByIdGT(v int64) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldGT(FieldDeletedById, v))
}

// DeletedByIdGTE applies the GTE predicate on the "DeletedById" field.
func DeletedByIdGTE(v int64) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldGTE(FieldDeletedById, v))
}

// DeletedByIdLT applies the LT predicate on the "DeletedById" field.
func DeletedByIdLT(v int64) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldLT(FieldDeletedById, v))
}

// DeletedByIdLTE applies the LTE predicate on the "DeletedById" field.
func DeletedByIdLTE(v int64) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldLTE(FieldDeletedById, v))
}

// DeletedByIdIsNil applies the IsNil predicate on the "DeletedById" field.
func DeletedByIdIsNil() predicate.UserMaster {
	return predicate.UserMaster(sql.FieldIsNull(FieldDeletedById))
}

// DeletedByIdNotNil applies the NotNil predicate on the "DeletedById" field.
func DeletedByIdNotNil() predicate.UserMaster {
	return predicate.UserMaster(sql.FieldNotNull(FieldDeletedById))
}

// DeletedByEmployeeIdEQ applies the EQ predicate on the "DeletedByEmployeeId" field.
func DeletedByEmployeeIdEQ(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldEQ(FieldDeletedByEmployeeId, v))
}

// DeletedByEmployeeIdNEQ applies the NEQ predicate on the "DeletedByEmployeeId" field.
func DeletedByEmployeeIdNEQ(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldNEQ(FieldDeletedByEmployeeId, v))
}

// DeletedByEmployeeIdIn applies the In predicate on the "DeletedByEmployeeId" field.
func DeletedByEmployeeIdIn(vs ...string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldIn(FieldDeletedByEmployeeId, vs...))
}

// DeletedByEmployeeIdNotIn applies the NotIn predicate on the "DeletedByEmployeeId" field.
func DeletedByEmployeeIdNotIn(vs ...string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldNotIn(FieldDeletedByEmployeeId, vs...))
}

// DeletedByEmployeeIdGT applies the GT predicate on the "DeletedByEmployeeId" field.
func DeletedByEmployeeIdGT(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldGT(FieldDeletedByEmployeeId, v))
}

// DeletedByEmployeeIdGTE applies the GTE predicate on the "DeletedByEmployeeId" field.
func DeletedByEmployeeIdGTE(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldGTE(FieldDeletedByEmployeeId, v))
}

// DeletedByEmployeeIdLT applies the LT predicate on the "DeletedByEmployeeId" field.
func DeletedByEmployeeIdLT(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldLT(FieldDeletedByEmployeeId, v))
}

// DeletedByEmployeeIdLTE applies the LTE predicate on the "DeletedByEmployeeId" field.
func DeletedByEmployeeIdLTE(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldLTE(FieldDeletedByEmployeeId, v))
}

// DeletedByEmployeeIdContains applies the Contains predicate on the "DeletedByEmployeeId" field.
func DeletedByEmployeeIdContains(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldContains(FieldDeletedByEmployeeId, v))
}

// DeletedByEmployeeIdHasPrefix applies the HasPrefix predicate on the "DeletedByEmployeeId" field.
func DeletedByEmployeeIdHasPrefix(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldHasPrefix(FieldDeletedByEmployeeId, v))
}

// DeletedByEmployeeIdHasSuffix applies the HasSuffix predicate on the "DeletedByEmployeeId" field.
func DeletedByEmployeeIdHasSuffix(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldHasSuffix(FieldDeletedByEmployeeId, v))
}

// DeletedByEmployeeIdIsNil applies the IsNil predicate on the "DeletedByEmployeeId" field.
func DeletedByEmployeeIdIsNil() predicate.UserMaster {
	return predicate.UserMaster(sql.FieldIsNull(FieldDeletedByEmployeeId))
}

// DeletedByEmployeeIdNotNil applies the NotNil predicate on the "DeletedByEmployeeId" field.
func DeletedByEmployeeIdNotNil() predicate.UserMaster {
	return predicate.UserMaster(sql.FieldNotNull(FieldDeletedByEmployeeId))
}

// DeletedByEmployeeIdEqualFold applies the EqualFold predicate on the "DeletedByEmployeeId" field.
func DeletedByEmployeeIdEqualFold(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldEqualFold(FieldDeletedByEmployeeId, v))
}

// DeletedByEmployeeIdContainsFold applies the ContainsFold predicate on the "DeletedByEmployeeId" field.
func DeletedByEmployeeIdContainsFold(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldContainsFold(FieldDeletedByEmployeeId, v))
}

// DeletedByUserNameEQ applies the EQ predicate on the "DeletedByUserName" field.
func DeletedByUserNameEQ(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldEQ(FieldDeletedByUserName, v))
}

// DeletedByUserNameNEQ applies the NEQ predicate on the "DeletedByUserName" field.
func DeletedByUserNameNEQ(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldNEQ(FieldDeletedByUserName, v))
}

// DeletedByUserNameIn applies the In predicate on the "DeletedByUserName" field.
func DeletedByUserNameIn(vs ...string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldIn(FieldDeletedByUserName, vs...))
}

// DeletedByUserNameNotIn applies the NotIn predicate on the "DeletedByUserName" field.
func DeletedByUserNameNotIn(vs ...string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldNotIn(FieldDeletedByUserName, vs...))
}

// DeletedByUserNameGT applies the GT predicate on the "DeletedByUserName" field.
func DeletedByUserNameGT(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldGT(FieldDeletedByUserName, v))
}

// DeletedByUserNameGTE applies the GTE predicate on the "DeletedByUserName" field.
func DeletedByUserNameGTE(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldGTE(FieldDeletedByUserName, v))
}

// DeletedByUserNameLT applies the LT predicate on the "DeletedByUserName" field.
func DeletedByUserNameLT(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldLT(FieldDeletedByUserName, v))
}

// DeletedByUserNameLTE applies the LTE predicate on the "DeletedByUserName" field.
func DeletedByUserNameLTE(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldLTE(FieldDeletedByUserName, v))
}

// DeletedByUserNameContains applies the Contains predicate on the "DeletedByUserName" field.
func DeletedByUserNameContains(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldContains(FieldDeletedByUserName, v))
}

// DeletedByUserNameHasPrefix applies the HasPrefix predicate on the "DeletedByUserName" field.
func DeletedByUserNameHasPrefix(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldHasPrefix(FieldDeletedByUserName, v))
}

// DeletedByUserNameHasSuffix applies the HasSuffix predicate on the "DeletedByUserName" field.
func DeletedByUserNameHasSuffix(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldHasSuffix(FieldDeletedByUserName, v))
}

// DeletedByUserNameIsNil applies the IsNil predicate on the "DeletedByUserName" field.
func DeletedByUserNameIsNil() predicate.UserMaster {
	return predicate.UserMaster(sql.FieldIsNull(FieldDeletedByUserName))
}

// DeletedByUserNameNotNil applies the NotNil predicate on the "DeletedByUserName" field.
func DeletedByUserNameNotNil() predicate.UserMaster {
	return predicate.UserMaster(sql.FieldNotNull(FieldDeletedByUserName))
}

// DeletedByUserNameEqualFold applies the EqualFold predicate on the "DeletedByUserName" field.
func DeletedByUserNameEqualFold(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldEqualFold(FieldDeletedByUserName, v))
}

// DeletedByUserNameContainsFold applies the ContainsFold predicate on the "DeletedByUserName" field.
func DeletedByUserNameContainsFold(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldContainsFold(FieldDeletedByUserName, v))
}

// DeletedByDesignationEQ applies the EQ predicate on the "DeletedByDesignation" field.
func DeletedByDesignationEQ(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldEQ(FieldDeletedByDesignation, v))
}

// DeletedByDesignationNEQ applies the NEQ predicate on the "DeletedByDesignation" field.
func DeletedByDesignationNEQ(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldNEQ(FieldDeletedByDesignation, v))
}

// DeletedByDesignationIn applies the In predicate on the "DeletedByDesignation" field.
func DeletedByDesignationIn(vs ...string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldIn(FieldDeletedByDesignation, vs...))
}

// DeletedByDesignationNotIn applies the NotIn predicate on the "DeletedByDesignation" field.
func DeletedByDesignationNotIn(vs ...string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldNotIn(FieldDeletedByDesignation, vs...))
}

// DeletedByDesignationGT applies the GT predicate on the "DeletedByDesignation" field.
func DeletedByDesignationGT(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldGT(FieldDeletedByDesignation, v))
}

// DeletedByDesignationGTE applies the GTE predicate on the "DeletedByDesignation" field.
func DeletedByDesignationGTE(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldGTE(FieldDeletedByDesignation, v))
}

// DeletedByDesignationLT applies the LT predicate on the "DeletedByDesignation" field.
func DeletedByDesignationLT(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldLT(FieldDeletedByDesignation, v))
}

// DeletedByDesignationLTE applies the LTE predicate on the "DeletedByDesignation" field.
func DeletedByDesignationLTE(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldLTE(FieldDeletedByDesignation, v))
}

// DeletedByDesignationContains applies the Contains predicate on the "DeletedByDesignation" field.
func DeletedByDesignationContains(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldContains(FieldDeletedByDesignation, v))
}

// DeletedByDesignationHasPrefix applies the HasPrefix predicate on the "DeletedByDesignation" field.
func DeletedByDesignationHasPrefix(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldHasPrefix(FieldDeletedByDesignation, v))
}

// DeletedByDesignationHasSuffix applies the HasSuffix predicate on the "DeletedByDesignation" field.
func DeletedByDesignationHasSuffix(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldHasSuffix(FieldDeletedByDesignation, v))
}

// DeletedByDesignationIsNil applies the IsNil predicate on the "DeletedByDesignation" field.
func DeletedByDesignationIsNil() predicate.UserMaster {
	return predicate.UserMaster(sql.FieldIsNull(FieldDeletedByDesignation))
}

// DeletedByDesignationNotNil applies the NotNil predicate on the "DeletedByDesignation" field.
func DeletedByDesignationNotNil() predicate.UserMaster {
	return predicate.UserMaster(sql.FieldNotNull(FieldDeletedByDesignation))
}

// DeletedByDesignationEqualFold applies the EqualFold predicate on the "DeletedByDesignation" field.
func DeletedByDesignationEqualFold(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldEqualFold(FieldDeletedByDesignation, v))
}

// DeletedByDesignationContainsFold applies the ContainsFold predicate on the "DeletedByDesignation" field.
func DeletedByDesignationContainsFold(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldContainsFold(FieldDeletedByDesignation, v))
}

// DeletedDateEQ applies the EQ predicate on the "DeletedDate" field.
func DeletedDateEQ(v time.Time) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldEQ(FieldDeletedDate, v))
}

// DeletedDateNEQ applies the NEQ predicate on the "DeletedDate" field.
func DeletedDateNEQ(v time.Time) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldNEQ(FieldDeletedDate, v))
}

// DeletedDateIn applies the In predicate on the "DeletedDate" field.
func DeletedDateIn(vs ...time.Time) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldIn(FieldDeletedDate, vs...))
}

// DeletedDateNotIn applies the NotIn predicate on the "DeletedDate" field.
func DeletedDateNotIn(vs ...time.Time) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldNotIn(FieldDeletedDate, vs...))
}

// DeletedDateGT applies the GT predicate on the "DeletedDate" field.
func DeletedDateGT(v time.Time) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldGT(FieldDeletedDate, v))
}

// DeletedDateGTE applies the GTE predicate on the "DeletedDate" field.
func DeletedDateGTE(v time.Time) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldGTE(FieldDeletedDate, v))
}

// DeletedDateLT applies the LT predicate on the "DeletedDate" field.
func DeletedDateLT(v time.Time) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldLT(FieldDeletedDate, v))
}

// DeletedDateLTE applies the LTE predicate on the "DeletedDate" field.
func DeletedDateLTE(v time.Time) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldLTE(FieldDeletedDate, v))
}

// DeletedDateIsNil applies the IsNil predicate on the "DeletedDate" field.
func DeletedDateIsNil() predicate.UserMaster {
	return predicate.UserMaster(sql.FieldIsNull(FieldDeletedDate))
}

// DeletedDateNotNil applies the NotNil predicate on the "DeletedDate" field.
func DeletedDateNotNil() predicate.UserMaster {
	return predicate.UserMaster(sql.FieldNotNull(FieldDeletedDate))
}

// FacilityIDEQ applies the EQ predicate on the "FacilityID" field.
func FacilityIDEQ(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldEQ(FieldFacilityID, v))
}

// FacilityIDNEQ applies the NEQ predicate on the "FacilityID" field.
func FacilityIDNEQ(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldNEQ(FieldFacilityID, v))
}

// FacilityIDIn applies the In predicate on the "FacilityID" field.
func FacilityIDIn(vs ...string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldIn(FieldFacilityID, vs...))
}

// FacilityIDNotIn applies the NotIn predicate on the "FacilityID" field.
func FacilityIDNotIn(vs ...string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldNotIn(FieldFacilityID, vs...))
}

// FacilityIDGT applies the GT predicate on the "FacilityID" field.
func FacilityIDGT(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldGT(FieldFacilityID, v))
}

// FacilityIDGTE applies the GTE predicate on the "FacilityID" field.
func FacilityIDGTE(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldGTE(FieldFacilityID, v))
}

// FacilityIDLT applies the LT predicate on the "FacilityID" field.
func FacilityIDLT(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldLT(FieldFacilityID, v))
}

// FacilityIDLTE applies the LTE predicate on the "FacilityID" field.
func FacilityIDLTE(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldLTE(FieldFacilityID, v))
}

// FacilityIDContains applies the Contains predicate on the "FacilityID" field.
func FacilityIDContains(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldContains(FieldFacilityID, v))
}

// FacilityIDHasPrefix applies the HasPrefix predicate on the "FacilityID" field.
func FacilityIDHasPrefix(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldHasPrefix(FieldFacilityID, v))
}

// FacilityIDHasSuffix applies the HasSuffix predicate on the "FacilityID" field.
func FacilityIDHasSuffix(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldHasSuffix(FieldFacilityID, v))
}

// FacilityIDIsNil applies the IsNil predicate on the "FacilityID" field.
func FacilityIDIsNil() predicate.UserMaster {
	return predicate.UserMaster(sql.FieldIsNull(FieldFacilityID))
}

// FacilityIDNotNil applies the NotNil predicate on the "FacilityID" field.
func FacilityIDNotNil() predicate.UserMaster {
	return predicate.UserMaster(sql.FieldNotNull(FieldFacilityID))
}

// FacilityIDEqualFold applies the EqualFold predicate on the "FacilityID" field.
func FacilityIDEqualFold(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldEqualFold(FieldFacilityID, v))
}

// FacilityIDContainsFold applies the ContainsFold predicate on the "FacilityID" field.
func FacilityIDContainsFold(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldContainsFold(FieldFacilityID, v))
}

// CircleFacilityIdEQ applies the EQ predicate on the "CircleFacilityId" field.
func CircleFacilityIdEQ(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldEQ(FieldCircleFacilityId, v))
}

// CircleFacilityIdNEQ applies the NEQ predicate on the "CircleFacilityId" field.
func CircleFacilityIdNEQ(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldNEQ(FieldCircleFacilityId, v))
}

// CircleFacilityIdIn applies the In predicate on the "CircleFacilityId" field.
func CircleFacilityIdIn(vs ...string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldIn(FieldCircleFacilityId, vs...))
}

// CircleFacilityIdNotIn applies the NotIn predicate on the "CircleFacilityId" field.
func CircleFacilityIdNotIn(vs ...string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldNotIn(FieldCircleFacilityId, vs...))
}

// CircleFacilityIdGT applies the GT predicate on the "CircleFacilityId" field.
func CircleFacilityIdGT(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldGT(FieldCircleFacilityId, v))
}

// CircleFacilityIdGTE applies the GTE predicate on the "CircleFacilityId" field.
func CircleFacilityIdGTE(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldGTE(FieldCircleFacilityId, v))
}

// CircleFacilityIdLT applies the LT predicate on the "CircleFacilityId" field.
func CircleFacilityIdLT(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldLT(FieldCircleFacilityId, v))
}

// CircleFacilityIdLTE applies the LTE predicate on the "CircleFacilityId" field.
func CircleFacilityIdLTE(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldLTE(FieldCircleFacilityId, v))
}

// CircleFacilityIdContains applies the Contains predicate on the "CircleFacilityId" field.
func CircleFacilityIdContains(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldContains(FieldCircleFacilityId, v))
}

// CircleFacilityIdHasPrefix applies the HasPrefix predicate on the "CircleFacilityId" field.
func CircleFacilityIdHasPrefix(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldHasPrefix(FieldCircleFacilityId, v))
}

// CircleFacilityIdHasSuffix applies the HasSuffix predicate on the "CircleFacilityId" field.
func CircleFacilityIdHasSuffix(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldHasSuffix(FieldCircleFacilityId, v))
}

// CircleFacilityIdIsNil applies the IsNil predicate on the "CircleFacilityId" field.
func CircleFacilityIdIsNil() predicate.UserMaster {
	return predicate.UserMaster(sql.FieldIsNull(FieldCircleFacilityId))
}

// CircleFacilityIdNotNil applies the NotNil predicate on the "CircleFacilityId" field.
func CircleFacilityIdNotNil() predicate.UserMaster {
	return predicate.UserMaster(sql.FieldNotNull(FieldCircleFacilityId))
}

// CircleFacilityIdEqualFold applies the EqualFold predicate on the "CircleFacilityId" field.
func CircleFacilityIdEqualFold(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldEqualFold(FieldCircleFacilityId, v))
}

// CircleFacilityIdContainsFold applies the ContainsFold predicate on the "CircleFacilityId" field.
func CircleFacilityIdContainsFold(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldContainsFold(FieldCircleFacilityId, v))
}

// CircleFacilityNameEQ applies the EQ predicate on the "CircleFacilityName" field.
func CircleFacilityNameEQ(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldEQ(FieldCircleFacilityName, v))
}

// CircleFacilityNameNEQ applies the NEQ predicate on the "CircleFacilityName" field.
func CircleFacilityNameNEQ(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldNEQ(FieldCircleFacilityName, v))
}

// CircleFacilityNameIn applies the In predicate on the "CircleFacilityName" field.
func CircleFacilityNameIn(vs ...string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldIn(FieldCircleFacilityName, vs...))
}

// CircleFacilityNameNotIn applies the NotIn predicate on the "CircleFacilityName" field.
func CircleFacilityNameNotIn(vs ...string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldNotIn(FieldCircleFacilityName, vs...))
}

// CircleFacilityNameGT applies the GT predicate on the "CircleFacilityName" field.
func CircleFacilityNameGT(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldGT(FieldCircleFacilityName, v))
}

// CircleFacilityNameGTE applies the GTE predicate on the "CircleFacilityName" field.
func CircleFacilityNameGTE(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldGTE(FieldCircleFacilityName, v))
}

// CircleFacilityNameLT applies the LT predicate on the "CircleFacilityName" field.
func CircleFacilityNameLT(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldLT(FieldCircleFacilityName, v))
}

// CircleFacilityNameLTE applies the LTE predicate on the "CircleFacilityName" field.
func CircleFacilityNameLTE(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldLTE(FieldCircleFacilityName, v))
}

// CircleFacilityNameContains applies the Contains predicate on the "CircleFacilityName" field.
func CircleFacilityNameContains(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldContains(FieldCircleFacilityName, v))
}

// CircleFacilityNameHasPrefix applies the HasPrefix predicate on the "CircleFacilityName" field.
func CircleFacilityNameHasPrefix(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldHasPrefix(FieldCircleFacilityName, v))
}

// CircleFacilityNameHasSuffix applies the HasSuffix predicate on the "CircleFacilityName" field.
func CircleFacilityNameHasSuffix(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldHasSuffix(FieldCircleFacilityName, v))
}

// CircleFacilityNameIsNil applies the IsNil predicate on the "CircleFacilityName" field.
func CircleFacilityNameIsNil() predicate.UserMaster {
	return predicate.UserMaster(sql.FieldIsNull(FieldCircleFacilityName))
}

// CircleFacilityNameNotNil applies the NotNil predicate on the "CircleFacilityName" field.
func CircleFacilityNameNotNil() predicate.UserMaster {
	return predicate.UserMaster(sql.FieldNotNull(FieldCircleFacilityName))
}

// CircleFacilityNameEqualFold applies the EqualFold predicate on the "CircleFacilityName" field.
func CircleFacilityNameEqualFold(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldEqualFold(FieldCircleFacilityName, v))
}

// CircleFacilityNameContainsFold applies the ContainsFold predicate on the "CircleFacilityName" field.
func CircleFacilityNameContainsFold(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldContainsFold(FieldCircleFacilityName, v))
}

// DesignationEQ applies the EQ predicate on the "Designation" field.
func DesignationEQ(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldEQ(FieldDesignation, v))
}

// DesignationNEQ applies the NEQ predicate on the "Designation" field.
func DesignationNEQ(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldNEQ(FieldDesignation, v))
}

// DesignationIn applies the In predicate on the "Designation" field.
func DesignationIn(vs ...string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldIn(FieldDesignation, vs...))
}

// DesignationNotIn applies the NotIn predicate on the "Designation" field.
func DesignationNotIn(vs ...string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldNotIn(FieldDesignation, vs...))
}

// DesignationGT applies the GT predicate on the "Designation" field.
func DesignationGT(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldGT(FieldDesignation, v))
}

// DesignationGTE applies the GTE predicate on the "Designation" field.
func DesignationGTE(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldGTE(FieldDesignation, v))
}

// DesignationLT applies the LT predicate on the "Designation" field.
func DesignationLT(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldLT(FieldDesignation, v))
}

// DesignationLTE applies the LTE predicate on the "Designation" field.
func DesignationLTE(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldLTE(FieldDesignation, v))
}

// DesignationContains applies the Contains predicate on the "Designation" field.
func DesignationContains(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldContains(FieldDesignation, v))
}

// DesignationHasPrefix applies the HasPrefix predicate on the "Designation" field.
func DesignationHasPrefix(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldHasPrefix(FieldDesignation, v))
}

// DesignationHasSuffix applies the HasSuffix predicate on the "Designation" field.
func DesignationHasSuffix(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldHasSuffix(FieldDesignation, v))
}

// DesignationIsNil applies the IsNil predicate on the "Designation" field.
func DesignationIsNil() predicate.UserMaster {
	return predicate.UserMaster(sql.FieldIsNull(FieldDesignation))
}

// DesignationNotNil applies the NotNil predicate on the "Designation" field.
func DesignationNotNil() predicate.UserMaster {
	return predicate.UserMaster(sql.FieldNotNull(FieldDesignation))
}

// DesignationEqualFold applies the EqualFold predicate on the "Designation" field.
func DesignationEqualFold(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldEqualFold(FieldDesignation, v))
}

// DesignationContainsFold applies the ContainsFold predicate on the "Designation" field.
func DesignationContainsFold(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldContainsFold(FieldDesignation, v))
}

// RoleUserCodeEQ applies the EQ predicate on the "RoleUserCode" field.
func RoleUserCodeEQ(v int32) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldEQ(FieldRoleUserCode, v))
}

// RoleUserCodeNEQ applies the NEQ predicate on the "RoleUserCode" field.
func RoleUserCodeNEQ(v int32) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldNEQ(FieldRoleUserCode, v))
}

// RoleUserCodeIn applies the In predicate on the "RoleUserCode" field.
func RoleUserCodeIn(vs ...int32) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldIn(FieldRoleUserCode, vs...))
}

// RoleUserCodeNotIn applies the NotIn predicate on the "RoleUserCode" field.
func RoleUserCodeNotIn(vs ...int32) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldNotIn(FieldRoleUserCode, vs...))
}

// RoleUserCodeIsNil applies the IsNil predicate on the "RoleUserCode" field.
func RoleUserCodeIsNil() predicate.UserMaster {
	return predicate.UserMaster(sql.FieldIsNull(FieldRoleUserCode))
}

// RoleUserCodeNotNil applies the NotNil predicate on the "RoleUserCode" field.
func RoleUserCodeNotNil() predicate.UserMaster {
	return predicate.UserMaster(sql.FieldNotNull(FieldRoleUserCode))
}

// UpdatedbyEQ applies the EQ predicate on the "Updatedby" field.
func UpdatedbyEQ(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldEQ(FieldUpdatedby, v))
}

// UpdatedbyNEQ applies the NEQ predicate on the "Updatedby" field.
func UpdatedbyNEQ(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldNEQ(FieldUpdatedby, v))
}

// UpdatedbyIn applies the In predicate on the "Updatedby" field.
func UpdatedbyIn(vs ...string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldIn(FieldUpdatedby, vs...))
}

// UpdatedbyNotIn applies the NotIn predicate on the "Updatedby" field.
func UpdatedbyNotIn(vs ...string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldNotIn(FieldUpdatedby, vs...))
}

// UpdatedbyGT applies the GT predicate on the "Updatedby" field.
func UpdatedbyGT(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldGT(FieldUpdatedby, v))
}

// UpdatedbyGTE applies the GTE predicate on the "Updatedby" field.
func UpdatedbyGTE(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldGTE(FieldUpdatedby, v))
}

// UpdatedbyLT applies the LT predicate on the "Updatedby" field.
func UpdatedbyLT(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldLT(FieldUpdatedby, v))
}

// UpdatedbyLTE applies the LTE predicate on the "Updatedby" field.
func UpdatedbyLTE(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldLTE(FieldUpdatedby, v))
}

// UpdatedbyContains applies the Contains predicate on the "Updatedby" field.
func UpdatedbyContains(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldContains(FieldUpdatedby, v))
}

// UpdatedbyHasPrefix applies the HasPrefix predicate on the "Updatedby" field.
func UpdatedbyHasPrefix(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldHasPrefix(FieldUpdatedby, v))
}

// UpdatedbyHasSuffix applies the HasSuffix predicate on the "Updatedby" field.
func UpdatedbyHasSuffix(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldHasSuffix(FieldUpdatedby, v))
}

// UpdatedbyIsNil applies the IsNil predicate on the "Updatedby" field.
func UpdatedbyIsNil() predicate.UserMaster {
	return predicate.UserMaster(sql.FieldIsNull(FieldUpdatedby))
}

// UpdatedbyNotNil applies the NotNil predicate on the "Updatedby" field.
func UpdatedbyNotNil() predicate.UserMaster {
	return predicate.UserMaster(sql.FieldNotNull(FieldUpdatedby))
}

// UpdatedbyEqualFold applies the EqualFold predicate on the "Updatedby" field.
func UpdatedbyEqualFold(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldEqualFold(FieldUpdatedby, v))
}

// UpdatedbyContainsFold applies the ContainsFold predicate on the "Updatedby" field.
func UpdatedbyContainsFold(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldContainsFold(FieldUpdatedby, v))
}

// UpdatedDateEQ applies the EQ predicate on the "updatedDate" field.
func UpdatedDateEQ(v time.Time) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldEQ(FieldUpdatedDate, v))
}

// UpdatedDateNEQ applies the NEQ predicate on the "updatedDate" field.
func UpdatedDateNEQ(v time.Time) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldNEQ(FieldUpdatedDate, v))
}

// UpdatedDateIn applies the In predicate on the "updatedDate" field.
func UpdatedDateIn(vs ...time.Time) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldIn(FieldUpdatedDate, vs...))
}

// UpdatedDateNotIn applies the NotIn predicate on the "updatedDate" field.
func UpdatedDateNotIn(vs ...time.Time) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldNotIn(FieldUpdatedDate, vs...))
}

// UpdatedDateGT applies the GT predicate on the "updatedDate" field.
func UpdatedDateGT(v time.Time) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldGT(FieldUpdatedDate, v))
}

// UpdatedDateGTE applies the GTE predicate on the "updatedDate" field.
func UpdatedDateGTE(v time.Time) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldGTE(FieldUpdatedDate, v))
}

// UpdatedDateLT applies the LT predicate on the "updatedDate" field.
func UpdatedDateLT(v time.Time) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldLT(FieldUpdatedDate, v))
}

// UpdatedDateLTE applies the LTE predicate on the "updatedDate" field.
func UpdatedDateLTE(v time.Time) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldLTE(FieldUpdatedDate, v))
}

// UpdatedDateIsNil applies the IsNil predicate on the "updatedDate" field.
func UpdatedDateIsNil() predicate.UserMaster {
	return predicate.UserMaster(sql.FieldIsNull(FieldUpdatedDate))
}

// UpdatedDateNotNil applies the NotNil predicate on the "updatedDate" field.
func UpdatedDateNotNil() predicate.UserMaster {
	return predicate.UserMaster(sql.FieldNotNull(FieldUpdatedDate))
}

// ModifiedbyEQ applies the EQ predicate on the "Modifiedby" field.
func ModifiedbyEQ(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldEQ(FieldModifiedby, v))
}

// ModifiedbyNEQ applies the NEQ predicate on the "Modifiedby" field.
func ModifiedbyNEQ(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldNEQ(FieldModifiedby, v))
}

// ModifiedbyIn applies the In predicate on the "Modifiedby" field.
func ModifiedbyIn(vs ...string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldIn(FieldModifiedby, vs...))
}

// ModifiedbyNotIn applies the NotIn predicate on the "Modifiedby" field.
func ModifiedbyNotIn(vs ...string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldNotIn(FieldModifiedby, vs...))
}

// ModifiedbyGT applies the GT predicate on the "Modifiedby" field.
func ModifiedbyGT(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldGT(FieldModifiedby, v))
}

// ModifiedbyGTE applies the GTE predicate on the "Modifiedby" field.
func ModifiedbyGTE(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldGTE(FieldModifiedby, v))
}

// ModifiedbyLT applies the LT predicate on the "Modifiedby" field.
func ModifiedbyLT(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldLT(FieldModifiedby, v))
}

// ModifiedbyLTE applies the LTE predicate on the "Modifiedby" field.
func ModifiedbyLTE(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldLTE(FieldModifiedby, v))
}

// ModifiedbyContains applies the Contains predicate on the "Modifiedby" field.
func ModifiedbyContains(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldContains(FieldModifiedby, v))
}

// ModifiedbyHasPrefix applies the HasPrefix predicate on the "Modifiedby" field.
func ModifiedbyHasPrefix(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldHasPrefix(FieldModifiedby, v))
}

// ModifiedbyHasSuffix applies the HasSuffix predicate on the "Modifiedby" field.
func ModifiedbyHasSuffix(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldHasSuffix(FieldModifiedby, v))
}

// ModifiedbyIsNil applies the IsNil predicate on the "Modifiedby" field.
func ModifiedbyIsNil() predicate.UserMaster {
	return predicate.UserMaster(sql.FieldIsNull(FieldModifiedby))
}

// ModifiedbyNotNil applies the NotNil predicate on the "Modifiedby" field.
func ModifiedbyNotNil() predicate.UserMaster {
	return predicate.UserMaster(sql.FieldNotNull(FieldModifiedby))
}

// ModifiedbyEqualFold applies the EqualFold predicate on the "Modifiedby" field.
func ModifiedbyEqualFold(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldEqualFold(FieldModifiedby, v))
}

// ModifiedbyContainsFold applies the ContainsFold predicate on the "Modifiedby" field.
func ModifiedbyContainsFold(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldContainsFold(FieldModifiedby, v))
}

// ModifiedDateEQ applies the EQ predicate on the "ModifiedDate" field.
func ModifiedDateEQ(v time.Time) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldEQ(FieldModifiedDate, v))
}

// ModifiedDateNEQ applies the NEQ predicate on the "ModifiedDate" field.
func ModifiedDateNEQ(v time.Time) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldNEQ(FieldModifiedDate, v))
}

// ModifiedDateIn applies the In predicate on the "ModifiedDate" field.
func ModifiedDateIn(vs ...time.Time) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldIn(FieldModifiedDate, vs...))
}

// ModifiedDateNotIn applies the NotIn predicate on the "ModifiedDate" field.
func ModifiedDateNotIn(vs ...time.Time) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldNotIn(FieldModifiedDate, vs...))
}

// ModifiedDateGT applies the GT predicate on the "ModifiedDate" field.
func ModifiedDateGT(v time.Time) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldGT(FieldModifiedDate, v))
}

// ModifiedDateGTE applies the GTE predicate on the "ModifiedDate" field.
func ModifiedDateGTE(v time.Time) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldGTE(FieldModifiedDate, v))
}

// ModifiedDateLT applies the LT predicate on the "ModifiedDate" field.
func ModifiedDateLT(v time.Time) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldLT(FieldModifiedDate, v))
}

// ModifiedDateLTE applies the LTE predicate on the "ModifiedDate" field.
func ModifiedDateLTE(v time.Time) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldLTE(FieldModifiedDate, v))
}

// ModifiedDateIsNil applies the IsNil predicate on the "ModifiedDate" field.
func ModifiedDateIsNil() predicate.UserMaster {
	return predicate.UserMaster(sql.FieldIsNull(FieldModifiedDate))
}

// ModifiedDateNotNil applies the NotNil predicate on the "ModifiedDate" field.
func ModifiedDateNotNil() predicate.UserMaster {
	return predicate.UserMaster(sql.FieldNotNull(FieldModifiedDate))
}

// OperationstatusEQ applies the EQ predicate on the "Operationstatus" field.
func OperationstatusEQ(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldEQ(FieldOperationstatus, v))
}

// OperationstatusNEQ applies the NEQ predicate on the "Operationstatus" field.
func OperationstatusNEQ(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldNEQ(FieldOperationstatus, v))
}

// OperationstatusIn applies the In predicate on the "Operationstatus" field.
func OperationstatusIn(vs ...string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldIn(FieldOperationstatus, vs...))
}

// OperationstatusNotIn applies the NotIn predicate on the "Operationstatus" field.
func OperationstatusNotIn(vs ...string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldNotIn(FieldOperationstatus, vs...))
}

// OperationstatusGT applies the GT predicate on the "Operationstatus" field.
func OperationstatusGT(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldGT(FieldOperationstatus, v))
}

// OperationstatusGTE applies the GTE predicate on the "Operationstatus" field.
func OperationstatusGTE(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldGTE(FieldOperationstatus, v))
}

// OperationstatusLT applies the LT predicate on the "Operationstatus" field.
func OperationstatusLT(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldLT(FieldOperationstatus, v))
}

// OperationstatusLTE applies the LTE predicate on the "Operationstatus" field.
func OperationstatusLTE(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldLTE(FieldOperationstatus, v))
}

// OperationstatusContains applies the Contains predicate on the "Operationstatus" field.
func OperationstatusContains(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldContains(FieldOperationstatus, v))
}

// OperationstatusHasPrefix applies the HasPrefix predicate on the "Operationstatus" field.
func OperationstatusHasPrefix(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldHasPrefix(FieldOperationstatus, v))
}

// OperationstatusHasSuffix applies the HasSuffix predicate on the "Operationstatus" field.
func OperationstatusHasSuffix(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldHasSuffix(FieldOperationstatus, v))
}

// OperationstatusIsNil applies the IsNil predicate on the "Operationstatus" field.
func OperationstatusIsNil() predicate.UserMaster {
	return predicate.UserMaster(sql.FieldIsNull(FieldOperationstatus))
}

// OperationstatusNotNil applies the NotNil predicate on the "Operationstatus" field.
func OperationstatusNotNil() predicate.UserMaster {
	return predicate.UserMaster(sql.FieldNotNull(FieldOperationstatus))
}

// OperationstatusEqualFold applies the EqualFold predicate on the "Operationstatus" field.
func OperationstatusEqualFold(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldEqualFold(FieldOperationstatus, v))
}

// OperationstatusContainsFold applies the ContainsFold predicate on the "Operationstatus" field.
func OperationstatusContainsFold(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldContainsFold(FieldOperationstatus, v))
}

// ExamCodeEQ applies the EQ predicate on the "ExamCode" field.
func ExamCodeEQ(v int32) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldEQ(FieldExamCode, v))
}

// ExamCodeNEQ applies the NEQ predicate on the "ExamCode" field.
func ExamCodeNEQ(v int32) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldNEQ(FieldExamCode, v))
}

// ExamCodeIn applies the In predicate on the "ExamCode" field.
func ExamCodeIn(vs ...int32) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldIn(FieldExamCode, vs...))
}

// ExamCodeNotIn applies the NotIn predicate on the "ExamCode" field.
func ExamCodeNotIn(vs ...int32) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldNotIn(FieldExamCode, vs...))
}

// ExamCodeGT applies the GT predicate on the "ExamCode" field.
func ExamCodeGT(v int32) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldGT(FieldExamCode, v))
}

// ExamCodeGTE applies the GTE predicate on the "ExamCode" field.
func ExamCodeGTE(v int32) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldGTE(FieldExamCode, v))
}

// ExamCodeLT applies the LT predicate on the "ExamCode" field.
func ExamCodeLT(v int32) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldLT(FieldExamCode, v))
}

// ExamCodeLTE applies the LTE predicate on the "ExamCode" field.
func ExamCodeLTE(v int32) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldLTE(FieldExamCode, v))
}

// ExamCodeIsNil applies the IsNil predicate on the "ExamCode" field.
func ExamCodeIsNil() predicate.UserMaster {
	return predicate.UserMaster(sql.FieldIsNull(FieldExamCode))
}

// ExamCodeNotNil applies the NotNil predicate on the "ExamCode" field.
func ExamCodeNotNil() predicate.UserMaster {
	return predicate.UserMaster(sql.FieldNotNull(FieldExamCode))
}

// ExamCodePSEQ applies the EQ predicate on the "ExamCodePS" field.
func ExamCodePSEQ(v int32) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldEQ(FieldExamCodePS, v))
}

// ExamCodePSNEQ applies the NEQ predicate on the "ExamCodePS" field.
func ExamCodePSNEQ(v int32) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldNEQ(FieldExamCodePS, v))
}

// ExamCodePSIn applies the In predicate on the "ExamCodePS" field.
func ExamCodePSIn(vs ...int32) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldIn(FieldExamCodePS, vs...))
}

// ExamCodePSNotIn applies the NotIn predicate on the "ExamCodePS" field.
func ExamCodePSNotIn(vs ...int32) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldNotIn(FieldExamCodePS, vs...))
}

// ExamCodePSGT applies the GT predicate on the "ExamCodePS" field.
func ExamCodePSGT(v int32) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldGT(FieldExamCodePS, v))
}

// ExamCodePSGTE applies the GTE predicate on the "ExamCodePS" field.
func ExamCodePSGTE(v int32) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldGTE(FieldExamCodePS, v))
}

// ExamCodePSLT applies the LT predicate on the "ExamCodePS" field.
func ExamCodePSLT(v int32) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldLT(FieldExamCodePS, v))
}

// ExamCodePSLTE applies the LTE predicate on the "ExamCodePS" field.
func ExamCodePSLTE(v int32) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldLTE(FieldExamCodePS, v))
}

// ExamCodePSIsNil applies the IsNil predicate on the "ExamCodePS" field.
func ExamCodePSIsNil() predicate.UserMaster {
	return predicate.UserMaster(sql.FieldIsNull(FieldExamCodePS))
}

// ExamCodePSNotNil applies the NotNil predicate on the "ExamCodePS" field.
func ExamCodePSNotNil() predicate.UserMaster {
	return predicate.UserMaster(sql.FieldNotNull(FieldExamCodePS))
}

// GenderEQ applies the EQ predicate on the "Gender" field.
func GenderEQ(v Gender) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldEQ(FieldGender, v))
}

// GenderNEQ applies the NEQ predicate on the "Gender" field.
func GenderNEQ(v Gender) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldNEQ(FieldGender, v))
}

// GenderIn applies the In predicate on the "Gender" field.
func GenderIn(vs ...Gender) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldIn(FieldGender, vs...))
}

// GenderNotIn applies the NotIn predicate on the "Gender" field.
func GenderNotIn(vs ...Gender) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldNotIn(FieldGender, vs...))
}

// GenderIsNil applies the IsNil predicate on the "Gender" field.
func GenderIsNil() predicate.UserMaster {
	return predicate.UserMaster(sql.FieldIsNull(FieldGender))
}

// GenderNotNil applies the NotNil predicate on the "Gender" field.
func GenderNotNil() predicate.UserMaster {
	return predicate.UserMaster(sql.FieldNotNull(FieldGender))
}

// DOBEQ applies the EQ predicate on the "DOB" field.
func DOBEQ(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldEQ(FieldDOB, v))
}

// DOBNEQ applies the NEQ predicate on the "DOB" field.
func DOBNEQ(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldNEQ(FieldDOB, v))
}

// DOBIn applies the In predicate on the "DOB" field.
func DOBIn(vs ...string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldIn(FieldDOB, vs...))
}

// DOBNotIn applies the NotIn predicate on the "DOB" field.
func DOBNotIn(vs ...string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldNotIn(FieldDOB, vs...))
}

// DOBGT applies the GT predicate on the "DOB" field.
func DOBGT(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldGT(FieldDOB, v))
}

// DOBGTE applies the GTE predicate on the "DOB" field.
func DOBGTE(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldGTE(FieldDOB, v))
}

// DOBLT applies the LT predicate on the "DOB" field.
func DOBLT(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldLT(FieldDOB, v))
}

// DOBLTE applies the LTE predicate on the "DOB" field.
func DOBLTE(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldLTE(FieldDOB, v))
}

// DOBContains applies the Contains predicate on the "DOB" field.
func DOBContains(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldContains(FieldDOB, v))
}

// DOBHasPrefix applies the HasPrefix predicate on the "DOB" field.
func DOBHasPrefix(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldHasPrefix(FieldDOB, v))
}

// DOBHasSuffix applies the HasSuffix predicate on the "DOB" field.
func DOBHasSuffix(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldHasSuffix(FieldDOB, v))
}

// DOBIsNil applies the IsNil predicate on the "DOB" field.
func DOBIsNil() predicate.UserMaster {
	return predicate.UserMaster(sql.FieldIsNull(FieldDOB))
}

// DOBNotNil applies the NotNil predicate on the "DOB" field.
func DOBNotNil() predicate.UserMaster {
	return predicate.UserMaster(sql.FieldNotNull(FieldDOB))
}

// DOBEqualFold applies the EqualFold predicate on the "DOB" field.
func DOBEqualFold(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldEqualFold(FieldDOB, v))
}

// DOBContainsFold applies the ContainsFold predicate on the "DOB" field.
func DOBContainsFold(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldContainsFold(FieldDOB, v))
}

// CreatedByEQ applies the EQ predicate on the "CreatedBy" field.
func CreatedByEQ(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldEQ(FieldCreatedBy, v))
}

// CreatedByNEQ applies the NEQ predicate on the "CreatedBy" field.
func CreatedByNEQ(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldNEQ(FieldCreatedBy, v))
}

// CreatedByIn applies the In predicate on the "CreatedBy" field.
func CreatedByIn(vs ...string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldIn(FieldCreatedBy, vs...))
}

// CreatedByNotIn applies the NotIn predicate on the "CreatedBy" field.
func CreatedByNotIn(vs ...string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldNotIn(FieldCreatedBy, vs...))
}

// CreatedByGT applies the GT predicate on the "CreatedBy" field.
func CreatedByGT(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldGT(FieldCreatedBy, v))
}

// CreatedByGTE applies the GTE predicate on the "CreatedBy" field.
func CreatedByGTE(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldGTE(FieldCreatedBy, v))
}

// CreatedByLT applies the LT predicate on the "CreatedBy" field.
func CreatedByLT(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldLT(FieldCreatedBy, v))
}

// CreatedByLTE applies the LTE predicate on the "CreatedBy" field.
func CreatedByLTE(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldLTE(FieldCreatedBy, v))
}

// CreatedByContains applies the Contains predicate on the "CreatedBy" field.
func CreatedByContains(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldContains(FieldCreatedBy, v))
}

// CreatedByHasPrefix applies the HasPrefix predicate on the "CreatedBy" field.
func CreatedByHasPrefix(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldHasPrefix(FieldCreatedBy, v))
}

// CreatedByHasSuffix applies the HasSuffix predicate on the "CreatedBy" field.
func CreatedByHasSuffix(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldHasSuffix(FieldCreatedBy, v))
}

// CreatedByIsNil applies the IsNil predicate on the "CreatedBy" field.
func CreatedByIsNil() predicate.UserMaster {
	return predicate.UserMaster(sql.FieldIsNull(FieldCreatedBy))
}

// CreatedByNotNil applies the NotNil predicate on the "CreatedBy" field.
func CreatedByNotNil() predicate.UserMaster {
	return predicate.UserMaster(sql.FieldNotNull(FieldCreatedBy))
}

// CreatedByEqualFold applies the EqualFold predicate on the "CreatedBy" field.
func CreatedByEqualFold(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldEqualFold(FieldCreatedBy, v))
}

// CreatedByContainsFold applies the ContainsFold predicate on the "CreatedBy" field.
func CreatedByContainsFold(v string) predicate.UserMaster {
	return predicate.UserMaster(sql.FieldContainsFold(FieldCreatedBy, v))
}

// HasRoles applies the HasEdge predicate on the "roles" edge.
func HasRoles() predicate.UserMaster {
	return predicate.UserMaster(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, RolesTable, RolesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRolesWith applies the HasEdge predicate on the "roles" edge with a given conditions (other predicates).
func HasRolesWith(preds ...predicate.RoleMaster) predicate.UserMaster {
	return predicate.UserMaster(func(s *sql.Selector) {
		step := newRolesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUsermasterRef applies the HasEdge predicate on the "UsermasterRef" edge.
func HasUsermasterRef() predicate.UserMaster {
	return predicate.UserMaster(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, UsermasterRefTable, UsermasterRefColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUsermasterRefWith applies the HasEdge predicate on the "UsermasterRef" edge with a given conditions (other predicates).
func HasUsermasterRefWith(preds ...predicate.EmployeeMaster) predicate.UserMaster {
	return predicate.UserMaster(func(s *sql.Selector) {
		step := newUsermasterRefStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUsersPSRef applies the HasEdge predicate on the "UsersPSRef" edge.
func HasUsersPSRef() predicate.UserMaster {
	return predicate.UserMaster(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, UsersPSRefTable, UsersPSRefColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUsersPSRefWith applies the HasEdge predicate on the "UsersPSRef" edge with a given conditions (other predicates).
func HasUsersPSRefWith(preds ...predicate.Exam_Applications_PS) predicate.UserMaster {
	return predicate.UserMaster(func(s *sql.Selector) {
		step := newUsersPSRefStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUsersIPRef applies the HasEdge predicate on the "UsersIPRef" edge.
func HasUsersIPRef() predicate.UserMaster {
	return predicate.UserMaster(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, UsersIPRefTable, UsersIPRefColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUsersIPRefWith applies the HasEdge predicate on the "UsersIPRef" edge with a given conditions (other predicates).
func HasUsersIPRefWith(preds ...predicate.Exam_Applications_IP) predicate.UserMaster {
	return predicate.UserMaster(func(s *sql.Selector) {
		step := newUsersIPRefStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUserIDRef applies the HasEdge predicate on the "User_ID_Ref" edge.
func HasUserIDRef() predicate.UserMaster {
	return predicate.UserMaster(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, UserIDRefTable, UserIDRefColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserIDRefWith applies the HasEdge predicate on the "User_ID_Ref" edge with a given conditions (other predicates).
func HasUserIDRefWith(preds ...predicate.ExamNotifications) predicate.UserMaster {
	return predicate.UserMaster(func(s *sql.Selector) {
		step := newUserIDRefStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUsersGDSPARef applies the HasEdge predicate on the "UsersGDSPARef" edge.
func HasUsersGDSPARef() predicate.UserMaster {
	return predicate.UserMaster(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, UsersGDSPARefTable, UsersGDSPARefColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUsersGDSPARefWith applies the HasEdge predicate on the "UsersGDSPARef" edge with a given conditions (other predicates).
func HasUsersGDSPARefWith(preds ...predicate.Exam_Applications_GDSPA) predicate.UserMaster {
	return predicate.UserMaster(func(s *sql.Selector) {
		step := newUsersGDSPARefStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUsersPMPARef applies the HasEdge predicate on the "UsersPMPARef" edge.
func HasUsersPMPARef() predicate.UserMaster {
	return predicate.UserMaster(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, UsersPMPARefTable, UsersPMPARefColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUsersPMPARefWith applies the HasEdge predicate on the "UsersPMPARef" edge with a given conditions (other predicates).
func HasUsersPMPARefWith(preds ...predicate.Exam_Applications_PMPA) predicate.UserMaster {
	return predicate.UserMaster(func(s *sql.Selector) {
		step := newUsersPMPARefStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUsersGDSPMRef applies the HasEdge predicate on the "UsersGDSPMRef" edge.
func HasUsersGDSPMRef() predicate.UserMaster {
	return predicate.UserMaster(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, UsersGDSPMRefTable, UsersGDSPMRefColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUsersGDSPMRefWith applies the HasEdge predicate on the "UsersGDSPMRef" edge with a given conditions (other predicates).
func HasUsersGDSPMRefWith(preds ...predicate.Exam_Applications_GDSPM) predicate.UserMaster {
	return predicate.UserMaster(func(s *sql.Selector) {
		step := newUsersGDSPMRefStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasLogData applies the HasEdge predicate on the "LogData" edge.
func HasLogData() predicate.UserMaster {
	return predicate.UserMaster(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, LogDataTable, LogDataColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasLogDataWith applies the HasEdge predicate on the "LogData" edge with a given conditions (other predicates).
func HasLogDataWith(preds ...predicate.Logs) predicate.UserMaster {
	return predicate.UserMaster(func(s *sql.Selector) {
		step := newLogDataStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.UserMaster) predicate.UserMaster {
	return predicate.UserMaster(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.UserMaster) predicate.UserMaster {
	return predicate.UserMaster(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.UserMaster) predicate.UserMaster {
	return predicate.UserMaster(func(s *sql.Selector) {
		p(s.Not())
	})
}
