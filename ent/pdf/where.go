// Code generated by ent, DO NOT EDIT.

package pdf

import (
	"recruit/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.PDF {
	return predicate.PDF(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.PDF {
	return predicate.PDF(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.PDF {
	return predicate.PDF(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.PDF {
	return predicate.PDF(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.PDF {
	return predicate.PDF(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.PDF {
	return predicate.PDF(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.PDF {
	return predicate.PDF(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.PDF {
	return predicate.PDF(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.PDF {
	return predicate.PDF(sql.FieldLTE(FieldID, id))
}

// Path applies equality check predicate on the "path" field. It's identical to PathEQ.
func Path(v string) predicate.PDF {
	return predicate.PDF(sql.FieldEQ(FieldPath, v))
}

// Filename applies equality check predicate on the "filename" field. It's identical to FilenameEQ.
func Filename(v string) predicate.PDF {
	return predicate.PDF(sql.FieldEQ(FieldFilename, v))
}

// Eventtime applies equality check predicate on the "eventtime" field. It's identical to EventtimeEQ.
func Eventtime(v time.Time) predicate.PDF {
	return predicate.PDF(sql.FieldEQ(FieldEventtime, v))
}

// Examcode applies equality check predicate on the "examcode" field. It's identical to ExamcodeEQ.
func Examcode(v int) predicate.PDF {
	return predicate.PDF(sql.FieldEQ(FieldExamcode, v))
}

// Year applies equality check predicate on the "year" field. It's identical to YearEQ.
func Year(v int) predicate.PDF {
	return predicate.PDF(sql.FieldEQ(FieldYear, v))
}

// PathEQ applies the EQ predicate on the "path" field.
func PathEQ(v string) predicate.PDF {
	return predicate.PDF(sql.FieldEQ(FieldPath, v))
}

// PathNEQ applies the NEQ predicate on the "path" field.
func PathNEQ(v string) predicate.PDF {
	return predicate.PDF(sql.FieldNEQ(FieldPath, v))
}

// PathIn applies the In predicate on the "path" field.
func PathIn(vs ...string) predicate.PDF {
	return predicate.PDF(sql.FieldIn(FieldPath, vs...))
}

// PathNotIn applies the NotIn predicate on the "path" field.
func PathNotIn(vs ...string) predicate.PDF {
	return predicate.PDF(sql.FieldNotIn(FieldPath, vs...))
}

// PathGT applies the GT predicate on the "path" field.
func PathGT(v string) predicate.PDF {
	return predicate.PDF(sql.FieldGT(FieldPath, v))
}

// PathGTE applies the GTE predicate on the "path" field.
func PathGTE(v string) predicate.PDF {
	return predicate.PDF(sql.FieldGTE(FieldPath, v))
}

// PathLT applies the LT predicate on the "path" field.
func PathLT(v string) predicate.PDF {
	return predicate.PDF(sql.FieldLT(FieldPath, v))
}

// PathLTE applies the LTE predicate on the "path" field.
func PathLTE(v string) predicate.PDF {
	return predicate.PDF(sql.FieldLTE(FieldPath, v))
}

// PathContains applies the Contains predicate on the "path" field.
func PathContains(v string) predicate.PDF {
	return predicate.PDF(sql.FieldContains(FieldPath, v))
}

// PathHasPrefix applies the HasPrefix predicate on the "path" field.
func PathHasPrefix(v string) predicate.PDF {
	return predicate.PDF(sql.FieldHasPrefix(FieldPath, v))
}

// PathHasSuffix applies the HasSuffix predicate on the "path" field.
func PathHasSuffix(v string) predicate.PDF {
	return predicate.PDF(sql.FieldHasSuffix(FieldPath, v))
}

// PathIsNil applies the IsNil predicate on the "path" field.
func PathIsNil() predicate.PDF {
	return predicate.PDF(sql.FieldIsNull(FieldPath))
}

// PathNotNil applies the NotNil predicate on the "path" field.
func PathNotNil() predicate.PDF {
	return predicate.PDF(sql.FieldNotNull(FieldPath))
}

// PathEqualFold applies the EqualFold predicate on the "path" field.
func PathEqualFold(v string) predicate.PDF {
	return predicate.PDF(sql.FieldEqualFold(FieldPath, v))
}

// PathContainsFold applies the ContainsFold predicate on the "path" field.
func PathContainsFold(v string) predicate.PDF {
	return predicate.PDF(sql.FieldContainsFold(FieldPath, v))
}

// FilenameEQ applies the EQ predicate on the "filename" field.
func FilenameEQ(v string) predicate.PDF {
	return predicate.PDF(sql.FieldEQ(FieldFilename, v))
}

// FilenameNEQ applies the NEQ predicate on the "filename" field.
func FilenameNEQ(v string) predicate.PDF {
	return predicate.PDF(sql.FieldNEQ(FieldFilename, v))
}

// FilenameIn applies the In predicate on the "filename" field.
func FilenameIn(vs ...string) predicate.PDF {
	return predicate.PDF(sql.FieldIn(FieldFilename, vs...))
}

// FilenameNotIn applies the NotIn predicate on the "filename" field.
func FilenameNotIn(vs ...string) predicate.PDF {
	return predicate.PDF(sql.FieldNotIn(FieldFilename, vs...))
}

// FilenameGT applies the GT predicate on the "filename" field.
func FilenameGT(v string) predicate.PDF {
	return predicate.PDF(sql.FieldGT(FieldFilename, v))
}

// FilenameGTE applies the GTE predicate on the "filename" field.
func FilenameGTE(v string) predicate.PDF {
	return predicate.PDF(sql.FieldGTE(FieldFilename, v))
}

// FilenameLT applies the LT predicate on the "filename" field.
func FilenameLT(v string) predicate.PDF {
	return predicate.PDF(sql.FieldLT(FieldFilename, v))
}

// FilenameLTE applies the LTE predicate on the "filename" field.
func FilenameLTE(v string) predicate.PDF {
	return predicate.PDF(sql.FieldLTE(FieldFilename, v))
}

// FilenameContains applies the Contains predicate on the "filename" field.
func FilenameContains(v string) predicate.PDF {
	return predicate.PDF(sql.FieldContains(FieldFilename, v))
}

// FilenameHasPrefix applies the HasPrefix predicate on the "filename" field.
func FilenameHasPrefix(v string) predicate.PDF {
	return predicate.PDF(sql.FieldHasPrefix(FieldFilename, v))
}

// FilenameHasSuffix applies the HasSuffix predicate on the "filename" field.
func FilenameHasSuffix(v string) predicate.PDF {
	return predicate.PDF(sql.FieldHasSuffix(FieldFilename, v))
}

// FilenameIsNil applies the IsNil predicate on the "filename" field.
func FilenameIsNil() predicate.PDF {
	return predicate.PDF(sql.FieldIsNull(FieldFilename))
}

// FilenameNotNil applies the NotNil predicate on the "filename" field.
func FilenameNotNil() predicate.PDF {
	return predicate.PDF(sql.FieldNotNull(FieldFilename))
}

// FilenameEqualFold applies the EqualFold predicate on the "filename" field.
func FilenameEqualFold(v string) predicate.PDF {
	return predicate.PDF(sql.FieldEqualFold(FieldFilename, v))
}

// FilenameContainsFold applies the ContainsFold predicate on the "filename" field.
func FilenameContainsFold(v string) predicate.PDF {
	return predicate.PDF(sql.FieldContainsFold(FieldFilename, v))
}

// EventtimeEQ applies the EQ predicate on the "eventtime" field.
func EventtimeEQ(v time.Time) predicate.PDF {
	return predicate.PDF(sql.FieldEQ(FieldEventtime, v))
}

// EventtimeNEQ applies the NEQ predicate on the "eventtime" field.
func EventtimeNEQ(v time.Time) predicate.PDF {
	return predicate.PDF(sql.FieldNEQ(FieldEventtime, v))
}

// EventtimeIn applies the In predicate on the "eventtime" field.
func EventtimeIn(vs ...time.Time) predicate.PDF {
	return predicate.PDF(sql.FieldIn(FieldEventtime, vs...))
}

// EventtimeNotIn applies the NotIn predicate on the "eventtime" field.
func EventtimeNotIn(vs ...time.Time) predicate.PDF {
	return predicate.PDF(sql.FieldNotIn(FieldEventtime, vs...))
}

// EventtimeGT applies the GT predicate on the "eventtime" field.
func EventtimeGT(v time.Time) predicate.PDF {
	return predicate.PDF(sql.FieldGT(FieldEventtime, v))
}

// EventtimeGTE applies the GTE predicate on the "eventtime" field.
func EventtimeGTE(v time.Time) predicate.PDF {
	return predicate.PDF(sql.FieldGTE(FieldEventtime, v))
}

// EventtimeLT applies the LT predicate on the "eventtime" field.
func EventtimeLT(v time.Time) predicate.PDF {
	return predicate.PDF(sql.FieldLT(FieldEventtime, v))
}

// EventtimeLTE applies the LTE predicate on the "eventtime" field.
func EventtimeLTE(v time.Time) predicate.PDF {
	return predicate.PDF(sql.FieldLTE(FieldEventtime, v))
}

// EventtimeIsNil applies the IsNil predicate on the "eventtime" field.
func EventtimeIsNil() predicate.PDF {
	return predicate.PDF(sql.FieldIsNull(FieldEventtime))
}

// EventtimeNotNil applies the NotNil predicate on the "eventtime" field.
func EventtimeNotNil() predicate.PDF {
	return predicate.PDF(sql.FieldNotNull(FieldEventtime))
}

// ExamcodeEQ applies the EQ predicate on the "examcode" field.
func ExamcodeEQ(v int) predicate.PDF {
	return predicate.PDF(sql.FieldEQ(FieldExamcode, v))
}

// ExamcodeNEQ applies the NEQ predicate on the "examcode" field.
func ExamcodeNEQ(v int) predicate.PDF {
	return predicate.PDF(sql.FieldNEQ(FieldExamcode, v))
}

// ExamcodeIn applies the In predicate on the "examcode" field.
func ExamcodeIn(vs ...int) predicate.PDF {
	return predicate.PDF(sql.FieldIn(FieldExamcode, vs...))
}

// ExamcodeNotIn applies the NotIn predicate on the "examcode" field.
func ExamcodeNotIn(vs ...int) predicate.PDF {
	return predicate.PDF(sql.FieldNotIn(FieldExamcode, vs...))
}

// ExamcodeGT applies the GT predicate on the "examcode" field.
func ExamcodeGT(v int) predicate.PDF {
	return predicate.PDF(sql.FieldGT(FieldExamcode, v))
}

// ExamcodeGTE applies the GTE predicate on the "examcode" field.
func ExamcodeGTE(v int) predicate.PDF {
	return predicate.PDF(sql.FieldGTE(FieldExamcode, v))
}

// ExamcodeLT applies the LT predicate on the "examcode" field.
func ExamcodeLT(v int) predicate.PDF {
	return predicate.PDF(sql.FieldLT(FieldExamcode, v))
}

// ExamcodeLTE applies the LTE predicate on the "examcode" field.
func ExamcodeLTE(v int) predicate.PDF {
	return predicate.PDF(sql.FieldLTE(FieldExamcode, v))
}

// ExamcodeIsNil applies the IsNil predicate on the "examcode" field.
func ExamcodeIsNil() predicate.PDF {
	return predicate.PDF(sql.FieldIsNull(FieldExamcode))
}

// ExamcodeNotNil applies the NotNil predicate on the "examcode" field.
func ExamcodeNotNil() predicate.PDF {
	return predicate.PDF(sql.FieldNotNull(FieldExamcode))
}

// YearEQ applies the EQ predicate on the "year" field.
func YearEQ(v int) predicate.PDF {
	return predicate.PDF(sql.FieldEQ(FieldYear, v))
}

// YearNEQ applies the NEQ predicate on the "year" field.
func YearNEQ(v int) predicate.PDF {
	return predicate.PDF(sql.FieldNEQ(FieldYear, v))
}

// YearIn applies the In predicate on the "year" field.
func YearIn(vs ...int) predicate.PDF {
	return predicate.PDF(sql.FieldIn(FieldYear, vs...))
}

// YearNotIn applies the NotIn predicate on the "year" field.
func YearNotIn(vs ...int) predicate.PDF {
	return predicate.PDF(sql.FieldNotIn(FieldYear, vs...))
}

// YearGT applies the GT predicate on the "year" field.
func YearGT(v int) predicate.PDF {
	return predicate.PDF(sql.FieldGT(FieldYear, v))
}

// YearGTE applies the GTE predicate on the "year" field.
func YearGTE(v int) predicate.PDF {
	return predicate.PDF(sql.FieldGTE(FieldYear, v))
}

// YearLT applies the LT predicate on the "year" field.
func YearLT(v int) predicate.PDF {
	return predicate.PDF(sql.FieldLT(FieldYear, v))
}

// YearLTE applies the LTE predicate on the "year" field.
func YearLTE(v int) predicate.PDF {
	return predicate.PDF(sql.FieldLTE(FieldYear, v))
}

// YearIsNil applies the IsNil predicate on the "year" field.
func YearIsNil() predicate.PDF {
	return predicate.PDF(sql.FieldIsNull(FieldYear))
}

// YearNotNil applies the NotNil predicate on the "year" field.
func YearNotNil() predicate.PDF {
	return predicate.PDF(sql.FieldNotNull(FieldYear))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.PDF) predicate.PDF {
	return predicate.PDF(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.PDF) predicate.PDF {
	return predicate.PDF(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.PDF) predicate.PDF {
	return predicate.PDF(func(s *sql.Selector) {
		p(s.Not())
	})
}
