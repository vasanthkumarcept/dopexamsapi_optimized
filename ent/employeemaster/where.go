// Code generated by ent, DO NOT EDIT.

package employeemaster

import (
	"recruit/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldLTE(FieldID, id))
}

// EmployeeID applies equality check predicate on the "EmployeeID" field. It's identical to EmployeeIDEQ.
func EmployeeID(v int64) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldEQ(FieldEmployeeID, v))
}

// EmployeeName applies equality check predicate on the "EmployeeName" field. It's identical to EmployeeNameEQ.
func EmployeeName(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldEQ(FieldEmployeeName, v))
}

// DOB applies equality check predicate on the "DOB" field. It's identical to DOBEQ.
func DOB(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldEQ(FieldDOB, v))
}

// Gender applies equality check predicate on the "Gender" field. It's identical to GenderEQ.
func Gender(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldEQ(FieldGender, v))
}

// MobileNumber applies equality check predicate on the "MobileNumber" field. It's identical to MobileNumberEQ.
func MobileNumber(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldEQ(FieldMobileNumber, v))
}

// EmailID applies equality check predicate on the "EmailID" field. It's identical to EmailIDEQ.
func EmailID(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldEQ(FieldEmailID, v))
}

// EmployeeCategoryCode applies equality check predicate on the "EmployeeCategoryCode" field. It's identical to EmployeeCategoryCodeEQ.
func EmployeeCategoryCode(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldEQ(FieldEmployeeCategoryCode, v))
}

// EmployeeCategory applies equality check predicate on the "EmployeeCategory" field. It's identical to EmployeeCategoryEQ.
func EmployeeCategory(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldEQ(FieldEmployeeCategory, v))
}

// PostCode applies equality check predicate on the "PostCode" field. It's identical to PostCodeEQ.
func PostCode(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldEQ(FieldPostCode, v))
}

// EmployeePost applies equality check predicate on the "EmployeePost" field. It's identical to EmployeePostEQ.
func EmployeePost(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldEQ(FieldEmployeePost, v))
}

// FacilityID applies equality check predicate on the "FacilityID" field. It's identical to FacilityIDEQ.
func FacilityID(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldEQ(FieldFacilityID, v))
}

// OfficeName applies equality check predicate on the "OfficeName" field. It's identical to OfficeNameEQ.
func OfficeName(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldEQ(FieldOfficeName, v))
}

// ControllingAuthorityFacilityId applies equality check predicate on the "ControllingAuthorityFacilityId" field. It's identical to ControllingAuthorityFacilityIdEQ.
func ControllingAuthorityFacilityId(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldEQ(FieldControllingAuthorityFacilityId, v))
}

// ControllingAuthorityName applies equality check predicate on the "ControllingAuthorityName" field. It's identical to ControllingAuthorityNameEQ.
func ControllingAuthorityName(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldEQ(FieldControllingAuthorityName, v))
}

// NodalAuthorityFaciliyId applies equality check predicate on the "NodalAuthorityFaciliyId" field. It's identical to NodalAuthorityFaciliyIdEQ.
func NodalAuthorityFaciliyId(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldEQ(FieldNodalAuthorityFaciliyId, v))
}

// NodalAuthorityName applies equality check predicate on the "NodalAuthorityName" field. It's identical to NodalAuthorityNameEQ.
func NodalAuthorityName(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldEQ(FieldNodalAuthorityName, v))
}

// Pincode applies equality check predicate on the "Pincode" field. It's identical to PincodeEQ.
func Pincode(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldEQ(FieldPincode, v))
}

// CircleFacilityID applies equality check predicate on the "CircleFacilityID" field. It's identical to CircleFacilityIDEQ.
func CircleFacilityID(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldEQ(FieldCircleFacilityID, v))
}

// Statuss applies equality check predicate on the "Statuss" field. It's identical to StatussEQ.
func Statuss(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldEQ(FieldStatuss, v))
}

// VerifyStatus applies equality check predicate on the "VerifyStatus" field. It's identical to VerifyStatusEQ.
func VerifyStatus(v bool) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldEQ(FieldVerifyStatus, v))
}

// UidToken applies equality check predicate on the "UidToken" field. It's identical to UidTokenEQ.
func UidToken(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldEQ(FieldUidToken, v))
}

// Createdby applies equality check predicate on the "Createdby" field. It's identical to CreatedbyEQ.
func Createdby(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldEQ(FieldCreatedby, v))
}

// DCCS applies equality check predicate on the "DCCS" field. It's identical to DCCSEQ.
func DCCS(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldEQ(FieldDCCS, v))
}

// CreatedById applies equality check predicate on the "CreatedById" field. It's identical to CreatedByIdEQ.
func CreatedById(v int64) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldEQ(FieldCreatedById, v))
}

// CreatedByUserName applies equality check predicate on the "CreatedByUserName" field. It's identical to CreatedByUserNameEQ.
func CreatedByUserName(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldEQ(FieldCreatedByUserName, v))
}

// CreatedByEmpId applies equality check predicate on the "CreatedByEmpId" field. It's identical to CreatedByEmpIdEQ.
func CreatedByEmpId(v int64) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldEQ(FieldCreatedByEmpId, v))
}

// CreatedByDesignation applies equality check predicate on the "CreatedByDesignation" field. It's identical to CreatedByDesignationEQ.
func CreatedByDesignation(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldEQ(FieldCreatedByDesignation, v))
}

// CreatedDate applies equality check predicate on the "CreatedDate" field. It's identical to CreatedDateEQ.
func CreatedDate(v time.Time) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldEQ(FieldCreatedDate, v))
}

// ModifiedById applies equality check predicate on the "ModifiedById" field. It's identical to ModifiedByIdEQ.
func ModifiedById(v int64) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldEQ(FieldModifiedById, v))
}

// ModifiedByUserName applies equality check predicate on the "ModifiedByUserName" field. It's identical to ModifiedByUserNameEQ.
func ModifiedByUserName(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldEQ(FieldModifiedByUserName, v))
}

// ModifiedByEmpId applies equality check predicate on the "ModifiedByEmpId" field. It's identical to ModifiedByEmpIdEQ.
func ModifiedByEmpId(v int64) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldEQ(FieldModifiedByEmpId, v))
}

// ModifiedByDesignantion applies equality check predicate on the "ModifiedByDesignantion" field. It's identical to ModifiedByDesignantionEQ.
func ModifiedByDesignantion(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldEQ(FieldModifiedByDesignantion, v))
}

// ModifiedDate applies equality check predicate on the "ModifiedDate" field. It's identical to ModifiedDateEQ.
func ModifiedDate(v time.Time) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldEQ(FieldModifiedDate, v))
}

// DeletedById applies equality check predicate on the "DeletedById" field. It's identical to DeletedByIdEQ.
func DeletedById(v int64) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldEQ(FieldDeletedById, v))
}

// DeletedByUserName applies equality check predicate on the "DeletedByUserName" field. It's identical to DeletedByUserNameEQ.
func DeletedByUserName(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldEQ(FieldDeletedByUserName, v))
}

// DeletedByEmpId applies equality check predicate on the "DeletedByEmpId" field. It's identical to DeletedByEmpIdEQ.
func DeletedByEmpId(v int64) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldEQ(FieldDeletedByEmpId, v))
}

// DeletedByDesignation applies equality check predicate on the "DeletedByDesignation" field. It's identical to DeletedByDesignationEQ.
func DeletedByDesignation(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldEQ(FieldDeletedByDesignation, v))
}

// DeletedDate applies equality check predicate on the "DeletedDate" field. It's identical to DeletedDateEQ.
func DeletedDate(v time.Time) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldEQ(FieldDeletedDate, v))
}

// UpdatedAt applies equality check predicate on the "UpdatedAt" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedBy applies equality check predicate on the "UpdatedBy" field. It's identical to UpdatedByEQ.
func UpdatedBy(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldEQ(FieldUpdatedBy, v))
}

// SmsOtp applies equality check predicate on the "SmsOtp" field. It's identical to SmsOtpEQ.
func SmsOtp(v int64) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldEQ(FieldSmsOtp, v))
}

// SmsTriggeredTime applies equality check predicate on the "SmsTriggeredTime" field. It's identical to SmsTriggeredTimeEQ.
func SmsTriggeredTime(v time.Time) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldEQ(FieldSmsTriggeredTime, v))
}

// SmsVerifyStatus applies equality check predicate on the "SmsVerifyStatus" field. It's identical to SmsVerifyStatusEQ.
func SmsVerifyStatus(v bool) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldEQ(FieldSmsVerifyStatus, v))
}

// EmailOtp applies equality check predicate on the "EmailOtp" field. It's identical to EmailOtpEQ.
func EmailOtp(v int64) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldEQ(FieldEmailOtp, v))
}

// EmailTriggeredTime applies equality check predicate on the "EmailTriggeredTime" field. It's identical to EmailTriggeredTimeEQ.
func EmailTriggeredTime(v time.Time) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldEQ(FieldEmailTriggeredTime, v))
}

// EmailVerifyStatus applies equality check predicate on the "EmailVerifyStatus" field. It's identical to EmailVerifyStatusEQ.
func EmailVerifyStatus(v bool) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldEQ(FieldEmailVerifyStatus, v))
}

// FinalSubmitStatus applies equality check predicate on the "FinalSubmitStatus" field. It's identical to FinalSubmitStatusEQ.
func FinalSubmitStatus(v bool) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldEQ(FieldFinalSubmitStatus, v))
}

// DCInPresentCadre applies equality check predicate on the "DCInPresentCadre" field. It's identical to DCInPresentCadreEQ.
func DCInPresentCadre(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldEQ(FieldDCInPresentCadre, v))
}

// Cadre applies equality check predicate on the "Cadre" field. It's identical to CadreEQ.
func Cadre(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldEQ(FieldCadre, v))
}

// EmployeeIDEQ applies the EQ predicate on the "EmployeeID" field.
func EmployeeIDEQ(v int64) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldEQ(FieldEmployeeID, v))
}

// EmployeeIDNEQ applies the NEQ predicate on the "EmployeeID" field.
func EmployeeIDNEQ(v int64) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldNEQ(FieldEmployeeID, v))
}

// EmployeeIDIn applies the In predicate on the "EmployeeID" field.
func EmployeeIDIn(vs ...int64) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldIn(FieldEmployeeID, vs...))
}

// EmployeeIDNotIn applies the NotIn predicate on the "EmployeeID" field.
func EmployeeIDNotIn(vs ...int64) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldNotIn(FieldEmployeeID, vs...))
}

// EmployeeIDGT applies the GT predicate on the "EmployeeID" field.
func EmployeeIDGT(v int64) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldGT(FieldEmployeeID, v))
}

// EmployeeIDGTE applies the GTE predicate on the "EmployeeID" field.
func EmployeeIDGTE(v int64) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldGTE(FieldEmployeeID, v))
}

// EmployeeIDLT applies the LT predicate on the "EmployeeID" field.
func EmployeeIDLT(v int64) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldLT(FieldEmployeeID, v))
}

// EmployeeIDLTE applies the LTE predicate on the "EmployeeID" field.
func EmployeeIDLTE(v int64) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldLTE(FieldEmployeeID, v))
}

// EmployeeIDIsNil applies the IsNil predicate on the "EmployeeID" field.
func EmployeeIDIsNil() predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldIsNull(FieldEmployeeID))
}

// EmployeeIDNotNil applies the NotNil predicate on the "EmployeeID" field.
func EmployeeIDNotNil() predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldNotNull(FieldEmployeeID))
}

// EmployeeNameEQ applies the EQ predicate on the "EmployeeName" field.
func EmployeeNameEQ(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldEQ(FieldEmployeeName, v))
}

// EmployeeNameNEQ applies the NEQ predicate on the "EmployeeName" field.
func EmployeeNameNEQ(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldNEQ(FieldEmployeeName, v))
}

// EmployeeNameIn applies the In predicate on the "EmployeeName" field.
func EmployeeNameIn(vs ...string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldIn(FieldEmployeeName, vs...))
}

// EmployeeNameNotIn applies the NotIn predicate on the "EmployeeName" field.
func EmployeeNameNotIn(vs ...string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldNotIn(FieldEmployeeName, vs...))
}

// EmployeeNameGT applies the GT predicate on the "EmployeeName" field.
func EmployeeNameGT(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldGT(FieldEmployeeName, v))
}

// EmployeeNameGTE applies the GTE predicate on the "EmployeeName" field.
func EmployeeNameGTE(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldGTE(FieldEmployeeName, v))
}

// EmployeeNameLT applies the LT predicate on the "EmployeeName" field.
func EmployeeNameLT(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldLT(FieldEmployeeName, v))
}

// EmployeeNameLTE applies the LTE predicate on the "EmployeeName" field.
func EmployeeNameLTE(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldLTE(FieldEmployeeName, v))
}

// EmployeeNameContains applies the Contains predicate on the "EmployeeName" field.
func EmployeeNameContains(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldContains(FieldEmployeeName, v))
}

// EmployeeNameHasPrefix applies the HasPrefix predicate on the "EmployeeName" field.
func EmployeeNameHasPrefix(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldHasPrefix(FieldEmployeeName, v))
}

// EmployeeNameHasSuffix applies the HasSuffix predicate on the "EmployeeName" field.
func EmployeeNameHasSuffix(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldHasSuffix(FieldEmployeeName, v))
}

// EmployeeNameIsNil applies the IsNil predicate on the "EmployeeName" field.
func EmployeeNameIsNil() predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldIsNull(FieldEmployeeName))
}

// EmployeeNameNotNil applies the NotNil predicate on the "EmployeeName" field.
func EmployeeNameNotNil() predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldNotNull(FieldEmployeeName))
}

// EmployeeNameEqualFold applies the EqualFold predicate on the "EmployeeName" field.
func EmployeeNameEqualFold(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldEqualFold(FieldEmployeeName, v))
}

// EmployeeNameContainsFold applies the ContainsFold predicate on the "EmployeeName" field.
func EmployeeNameContainsFold(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldContainsFold(FieldEmployeeName, v))
}

// DOBEQ applies the EQ predicate on the "DOB" field.
func DOBEQ(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldEQ(FieldDOB, v))
}

// DOBNEQ applies the NEQ predicate on the "DOB" field.
func DOBNEQ(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldNEQ(FieldDOB, v))
}

// DOBIn applies the In predicate on the "DOB" field.
func DOBIn(vs ...string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldIn(FieldDOB, vs...))
}

// DOBNotIn applies the NotIn predicate on the "DOB" field.
func DOBNotIn(vs ...string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldNotIn(FieldDOB, vs...))
}

// DOBGT applies the GT predicate on the "DOB" field.
func DOBGT(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldGT(FieldDOB, v))
}

// DOBGTE applies the GTE predicate on the "DOB" field.
func DOBGTE(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldGTE(FieldDOB, v))
}

// DOBLT applies the LT predicate on the "DOB" field.
func DOBLT(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldLT(FieldDOB, v))
}

// DOBLTE applies the LTE predicate on the "DOB" field.
func DOBLTE(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldLTE(FieldDOB, v))
}

// DOBContains applies the Contains predicate on the "DOB" field.
func DOBContains(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldContains(FieldDOB, v))
}

// DOBHasPrefix applies the HasPrefix predicate on the "DOB" field.
func DOBHasPrefix(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldHasPrefix(FieldDOB, v))
}

// DOBHasSuffix applies the HasSuffix predicate on the "DOB" field.
func DOBHasSuffix(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldHasSuffix(FieldDOB, v))
}

// DOBIsNil applies the IsNil predicate on the "DOB" field.
func DOBIsNil() predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldIsNull(FieldDOB))
}

// DOBNotNil applies the NotNil predicate on the "DOB" field.
func DOBNotNil() predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldNotNull(FieldDOB))
}

// DOBEqualFold applies the EqualFold predicate on the "DOB" field.
func DOBEqualFold(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldEqualFold(FieldDOB, v))
}

// DOBContainsFold applies the ContainsFold predicate on the "DOB" field.
func DOBContainsFold(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldContainsFold(FieldDOB, v))
}

// GenderEQ applies the EQ predicate on the "Gender" field.
func GenderEQ(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldEQ(FieldGender, v))
}

// GenderNEQ applies the NEQ predicate on the "Gender" field.
func GenderNEQ(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldNEQ(FieldGender, v))
}

// GenderIn applies the In predicate on the "Gender" field.
func GenderIn(vs ...string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldIn(FieldGender, vs...))
}

// GenderNotIn applies the NotIn predicate on the "Gender" field.
func GenderNotIn(vs ...string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldNotIn(FieldGender, vs...))
}

// GenderGT applies the GT predicate on the "Gender" field.
func GenderGT(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldGT(FieldGender, v))
}

// GenderGTE applies the GTE predicate on the "Gender" field.
func GenderGTE(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldGTE(FieldGender, v))
}

// GenderLT applies the LT predicate on the "Gender" field.
func GenderLT(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldLT(FieldGender, v))
}

// GenderLTE applies the LTE predicate on the "Gender" field.
func GenderLTE(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldLTE(FieldGender, v))
}

// GenderContains applies the Contains predicate on the "Gender" field.
func GenderContains(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldContains(FieldGender, v))
}

// GenderHasPrefix applies the HasPrefix predicate on the "Gender" field.
func GenderHasPrefix(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldHasPrefix(FieldGender, v))
}

// GenderHasSuffix applies the HasSuffix predicate on the "Gender" field.
func GenderHasSuffix(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldHasSuffix(FieldGender, v))
}

// GenderIsNil applies the IsNil predicate on the "Gender" field.
func GenderIsNil() predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldIsNull(FieldGender))
}

// GenderNotNil applies the NotNil predicate on the "Gender" field.
func GenderNotNil() predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldNotNull(FieldGender))
}

// GenderEqualFold applies the EqualFold predicate on the "Gender" field.
func GenderEqualFold(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldEqualFold(FieldGender, v))
}

// GenderContainsFold applies the ContainsFold predicate on the "Gender" field.
func GenderContainsFold(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldContainsFold(FieldGender, v))
}

// MobileNumberEQ applies the EQ predicate on the "MobileNumber" field.
func MobileNumberEQ(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldEQ(FieldMobileNumber, v))
}

// MobileNumberNEQ applies the NEQ predicate on the "MobileNumber" field.
func MobileNumberNEQ(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldNEQ(FieldMobileNumber, v))
}

// MobileNumberIn applies the In predicate on the "MobileNumber" field.
func MobileNumberIn(vs ...string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldIn(FieldMobileNumber, vs...))
}

// MobileNumberNotIn applies the NotIn predicate on the "MobileNumber" field.
func MobileNumberNotIn(vs ...string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldNotIn(FieldMobileNumber, vs...))
}

// MobileNumberGT applies the GT predicate on the "MobileNumber" field.
func MobileNumberGT(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldGT(FieldMobileNumber, v))
}

// MobileNumberGTE applies the GTE predicate on the "MobileNumber" field.
func MobileNumberGTE(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldGTE(FieldMobileNumber, v))
}

// MobileNumberLT applies the LT predicate on the "MobileNumber" field.
func MobileNumberLT(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldLT(FieldMobileNumber, v))
}

// MobileNumberLTE applies the LTE predicate on the "MobileNumber" field.
func MobileNumberLTE(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldLTE(FieldMobileNumber, v))
}

// MobileNumberContains applies the Contains predicate on the "MobileNumber" field.
func MobileNumberContains(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldContains(FieldMobileNumber, v))
}

// MobileNumberHasPrefix applies the HasPrefix predicate on the "MobileNumber" field.
func MobileNumberHasPrefix(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldHasPrefix(FieldMobileNumber, v))
}

// MobileNumberHasSuffix applies the HasSuffix predicate on the "MobileNumber" field.
func MobileNumberHasSuffix(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldHasSuffix(FieldMobileNumber, v))
}

// MobileNumberIsNil applies the IsNil predicate on the "MobileNumber" field.
func MobileNumberIsNil() predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldIsNull(FieldMobileNumber))
}

// MobileNumberNotNil applies the NotNil predicate on the "MobileNumber" field.
func MobileNumberNotNil() predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldNotNull(FieldMobileNumber))
}

// MobileNumberEqualFold applies the EqualFold predicate on the "MobileNumber" field.
func MobileNumberEqualFold(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldEqualFold(FieldMobileNumber, v))
}

// MobileNumberContainsFold applies the ContainsFold predicate on the "MobileNumber" field.
func MobileNumberContainsFold(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldContainsFold(FieldMobileNumber, v))
}

// EmailIDEQ applies the EQ predicate on the "EmailID" field.
func EmailIDEQ(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldEQ(FieldEmailID, v))
}

// EmailIDNEQ applies the NEQ predicate on the "EmailID" field.
func EmailIDNEQ(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldNEQ(FieldEmailID, v))
}

// EmailIDIn applies the In predicate on the "EmailID" field.
func EmailIDIn(vs ...string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldIn(FieldEmailID, vs...))
}

// EmailIDNotIn applies the NotIn predicate on the "EmailID" field.
func EmailIDNotIn(vs ...string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldNotIn(FieldEmailID, vs...))
}

// EmailIDGT applies the GT predicate on the "EmailID" field.
func EmailIDGT(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldGT(FieldEmailID, v))
}

// EmailIDGTE applies the GTE predicate on the "EmailID" field.
func EmailIDGTE(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldGTE(FieldEmailID, v))
}

// EmailIDLT applies the LT predicate on the "EmailID" field.
func EmailIDLT(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldLT(FieldEmailID, v))
}

// EmailIDLTE applies the LTE predicate on the "EmailID" field.
func EmailIDLTE(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldLTE(FieldEmailID, v))
}

// EmailIDContains applies the Contains predicate on the "EmailID" field.
func EmailIDContains(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldContains(FieldEmailID, v))
}

// EmailIDHasPrefix applies the HasPrefix predicate on the "EmailID" field.
func EmailIDHasPrefix(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldHasPrefix(FieldEmailID, v))
}

// EmailIDHasSuffix applies the HasSuffix predicate on the "EmailID" field.
func EmailIDHasSuffix(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldHasSuffix(FieldEmailID, v))
}

// EmailIDIsNil applies the IsNil predicate on the "EmailID" field.
func EmailIDIsNil() predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldIsNull(FieldEmailID))
}

// EmailIDNotNil applies the NotNil predicate on the "EmailID" field.
func EmailIDNotNil() predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldNotNull(FieldEmailID))
}

// EmailIDEqualFold applies the EqualFold predicate on the "EmailID" field.
func EmailIDEqualFold(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldEqualFold(FieldEmailID, v))
}

// EmailIDContainsFold applies the ContainsFold predicate on the "EmailID" field.
func EmailIDContainsFold(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldContainsFold(FieldEmailID, v))
}

// EmployeeCategoryCodeEQ applies the EQ predicate on the "EmployeeCategoryCode" field.
func EmployeeCategoryCodeEQ(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldEQ(FieldEmployeeCategoryCode, v))
}

// EmployeeCategoryCodeNEQ applies the NEQ predicate on the "EmployeeCategoryCode" field.
func EmployeeCategoryCodeNEQ(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldNEQ(FieldEmployeeCategoryCode, v))
}

// EmployeeCategoryCodeIn applies the In predicate on the "EmployeeCategoryCode" field.
func EmployeeCategoryCodeIn(vs ...string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldIn(FieldEmployeeCategoryCode, vs...))
}

// EmployeeCategoryCodeNotIn applies the NotIn predicate on the "EmployeeCategoryCode" field.
func EmployeeCategoryCodeNotIn(vs ...string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldNotIn(FieldEmployeeCategoryCode, vs...))
}

// EmployeeCategoryCodeGT applies the GT predicate on the "EmployeeCategoryCode" field.
func EmployeeCategoryCodeGT(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldGT(FieldEmployeeCategoryCode, v))
}

// EmployeeCategoryCodeGTE applies the GTE predicate on the "EmployeeCategoryCode" field.
func EmployeeCategoryCodeGTE(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldGTE(FieldEmployeeCategoryCode, v))
}

// EmployeeCategoryCodeLT applies the LT predicate on the "EmployeeCategoryCode" field.
func EmployeeCategoryCodeLT(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldLT(FieldEmployeeCategoryCode, v))
}

// EmployeeCategoryCodeLTE applies the LTE predicate on the "EmployeeCategoryCode" field.
func EmployeeCategoryCodeLTE(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldLTE(FieldEmployeeCategoryCode, v))
}

// EmployeeCategoryCodeContains applies the Contains predicate on the "EmployeeCategoryCode" field.
func EmployeeCategoryCodeContains(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldContains(FieldEmployeeCategoryCode, v))
}

// EmployeeCategoryCodeHasPrefix applies the HasPrefix predicate on the "EmployeeCategoryCode" field.
func EmployeeCategoryCodeHasPrefix(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldHasPrefix(FieldEmployeeCategoryCode, v))
}

// EmployeeCategoryCodeHasSuffix applies the HasSuffix predicate on the "EmployeeCategoryCode" field.
func EmployeeCategoryCodeHasSuffix(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldHasSuffix(FieldEmployeeCategoryCode, v))
}

// EmployeeCategoryCodeIsNil applies the IsNil predicate on the "EmployeeCategoryCode" field.
func EmployeeCategoryCodeIsNil() predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldIsNull(FieldEmployeeCategoryCode))
}

// EmployeeCategoryCodeNotNil applies the NotNil predicate on the "EmployeeCategoryCode" field.
func EmployeeCategoryCodeNotNil() predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldNotNull(FieldEmployeeCategoryCode))
}

// EmployeeCategoryCodeEqualFold applies the EqualFold predicate on the "EmployeeCategoryCode" field.
func EmployeeCategoryCodeEqualFold(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldEqualFold(FieldEmployeeCategoryCode, v))
}

// EmployeeCategoryCodeContainsFold applies the ContainsFold predicate on the "EmployeeCategoryCode" field.
func EmployeeCategoryCodeContainsFold(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldContainsFold(FieldEmployeeCategoryCode, v))
}

// EmployeeCategoryEQ applies the EQ predicate on the "EmployeeCategory" field.
func EmployeeCategoryEQ(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldEQ(FieldEmployeeCategory, v))
}

// EmployeeCategoryNEQ applies the NEQ predicate on the "EmployeeCategory" field.
func EmployeeCategoryNEQ(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldNEQ(FieldEmployeeCategory, v))
}

// EmployeeCategoryIn applies the In predicate on the "EmployeeCategory" field.
func EmployeeCategoryIn(vs ...string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldIn(FieldEmployeeCategory, vs...))
}

// EmployeeCategoryNotIn applies the NotIn predicate on the "EmployeeCategory" field.
func EmployeeCategoryNotIn(vs ...string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldNotIn(FieldEmployeeCategory, vs...))
}

// EmployeeCategoryGT applies the GT predicate on the "EmployeeCategory" field.
func EmployeeCategoryGT(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldGT(FieldEmployeeCategory, v))
}

// EmployeeCategoryGTE applies the GTE predicate on the "EmployeeCategory" field.
func EmployeeCategoryGTE(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldGTE(FieldEmployeeCategory, v))
}

// EmployeeCategoryLT applies the LT predicate on the "EmployeeCategory" field.
func EmployeeCategoryLT(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldLT(FieldEmployeeCategory, v))
}

// EmployeeCategoryLTE applies the LTE predicate on the "EmployeeCategory" field.
func EmployeeCategoryLTE(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldLTE(FieldEmployeeCategory, v))
}

// EmployeeCategoryContains applies the Contains predicate on the "EmployeeCategory" field.
func EmployeeCategoryContains(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldContains(FieldEmployeeCategory, v))
}

// EmployeeCategoryHasPrefix applies the HasPrefix predicate on the "EmployeeCategory" field.
func EmployeeCategoryHasPrefix(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldHasPrefix(FieldEmployeeCategory, v))
}

// EmployeeCategoryHasSuffix applies the HasSuffix predicate on the "EmployeeCategory" field.
func EmployeeCategoryHasSuffix(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldHasSuffix(FieldEmployeeCategory, v))
}

// EmployeeCategoryIsNil applies the IsNil predicate on the "EmployeeCategory" field.
func EmployeeCategoryIsNil() predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldIsNull(FieldEmployeeCategory))
}

// EmployeeCategoryNotNil applies the NotNil predicate on the "EmployeeCategory" field.
func EmployeeCategoryNotNil() predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldNotNull(FieldEmployeeCategory))
}

// EmployeeCategoryEqualFold applies the EqualFold predicate on the "EmployeeCategory" field.
func EmployeeCategoryEqualFold(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldEqualFold(FieldEmployeeCategory, v))
}

// EmployeeCategoryContainsFold applies the ContainsFold predicate on the "EmployeeCategory" field.
func EmployeeCategoryContainsFold(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldContainsFold(FieldEmployeeCategory, v))
}

// PostCodeEQ applies the EQ predicate on the "PostCode" field.
func PostCodeEQ(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldEQ(FieldPostCode, v))
}

// PostCodeNEQ applies the NEQ predicate on the "PostCode" field.
func PostCodeNEQ(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldNEQ(FieldPostCode, v))
}

// PostCodeIn applies the In predicate on the "PostCode" field.
func PostCodeIn(vs ...string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldIn(FieldPostCode, vs...))
}

// PostCodeNotIn applies the NotIn predicate on the "PostCode" field.
func PostCodeNotIn(vs ...string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldNotIn(FieldPostCode, vs...))
}

// PostCodeGT applies the GT predicate on the "PostCode" field.
func PostCodeGT(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldGT(FieldPostCode, v))
}

// PostCodeGTE applies the GTE predicate on the "PostCode" field.
func PostCodeGTE(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldGTE(FieldPostCode, v))
}

// PostCodeLT applies the LT predicate on the "PostCode" field.
func PostCodeLT(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldLT(FieldPostCode, v))
}

// PostCodeLTE applies the LTE predicate on the "PostCode" field.
func PostCodeLTE(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldLTE(FieldPostCode, v))
}

// PostCodeContains applies the Contains predicate on the "PostCode" field.
func PostCodeContains(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldContains(FieldPostCode, v))
}

// PostCodeHasPrefix applies the HasPrefix predicate on the "PostCode" field.
func PostCodeHasPrefix(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldHasPrefix(FieldPostCode, v))
}

// PostCodeHasSuffix applies the HasSuffix predicate on the "PostCode" field.
func PostCodeHasSuffix(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldHasSuffix(FieldPostCode, v))
}

// PostCodeIsNil applies the IsNil predicate on the "PostCode" field.
func PostCodeIsNil() predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldIsNull(FieldPostCode))
}

// PostCodeNotNil applies the NotNil predicate on the "PostCode" field.
func PostCodeNotNil() predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldNotNull(FieldPostCode))
}

// PostCodeEqualFold applies the EqualFold predicate on the "PostCode" field.
func PostCodeEqualFold(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldEqualFold(FieldPostCode, v))
}

// PostCodeContainsFold applies the ContainsFold predicate on the "PostCode" field.
func PostCodeContainsFold(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldContainsFold(FieldPostCode, v))
}

// EmployeePostEQ applies the EQ predicate on the "EmployeePost" field.
func EmployeePostEQ(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldEQ(FieldEmployeePost, v))
}

// EmployeePostNEQ applies the NEQ predicate on the "EmployeePost" field.
func EmployeePostNEQ(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldNEQ(FieldEmployeePost, v))
}

// EmployeePostIn applies the In predicate on the "EmployeePost" field.
func EmployeePostIn(vs ...string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldIn(FieldEmployeePost, vs...))
}

// EmployeePostNotIn applies the NotIn predicate on the "EmployeePost" field.
func EmployeePostNotIn(vs ...string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldNotIn(FieldEmployeePost, vs...))
}

// EmployeePostGT applies the GT predicate on the "EmployeePost" field.
func EmployeePostGT(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldGT(FieldEmployeePost, v))
}

// EmployeePostGTE applies the GTE predicate on the "EmployeePost" field.
func EmployeePostGTE(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldGTE(FieldEmployeePost, v))
}

// EmployeePostLT applies the LT predicate on the "EmployeePost" field.
func EmployeePostLT(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldLT(FieldEmployeePost, v))
}

// EmployeePostLTE applies the LTE predicate on the "EmployeePost" field.
func EmployeePostLTE(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldLTE(FieldEmployeePost, v))
}

// EmployeePostContains applies the Contains predicate on the "EmployeePost" field.
func EmployeePostContains(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldContains(FieldEmployeePost, v))
}

// EmployeePostHasPrefix applies the HasPrefix predicate on the "EmployeePost" field.
func EmployeePostHasPrefix(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldHasPrefix(FieldEmployeePost, v))
}

// EmployeePostHasSuffix applies the HasSuffix predicate on the "EmployeePost" field.
func EmployeePostHasSuffix(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldHasSuffix(FieldEmployeePost, v))
}

// EmployeePostIsNil applies the IsNil predicate on the "EmployeePost" field.
func EmployeePostIsNil() predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldIsNull(FieldEmployeePost))
}

// EmployeePostNotNil applies the NotNil predicate on the "EmployeePost" field.
func EmployeePostNotNil() predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldNotNull(FieldEmployeePost))
}

// EmployeePostEqualFold applies the EqualFold predicate on the "EmployeePost" field.
func EmployeePostEqualFold(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldEqualFold(FieldEmployeePost, v))
}

// EmployeePostContainsFold applies the ContainsFold predicate on the "EmployeePost" field.
func EmployeePostContainsFold(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldContainsFold(FieldEmployeePost, v))
}

// FacilityIDEQ applies the EQ predicate on the "FacilityID" field.
func FacilityIDEQ(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldEQ(FieldFacilityID, v))
}

// FacilityIDNEQ applies the NEQ predicate on the "FacilityID" field.
func FacilityIDNEQ(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldNEQ(FieldFacilityID, v))
}

// FacilityIDIn applies the In predicate on the "FacilityID" field.
func FacilityIDIn(vs ...string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldIn(FieldFacilityID, vs...))
}

// FacilityIDNotIn applies the NotIn predicate on the "FacilityID" field.
func FacilityIDNotIn(vs ...string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldNotIn(FieldFacilityID, vs...))
}

// FacilityIDGT applies the GT predicate on the "FacilityID" field.
func FacilityIDGT(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldGT(FieldFacilityID, v))
}

// FacilityIDGTE applies the GTE predicate on the "FacilityID" field.
func FacilityIDGTE(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldGTE(FieldFacilityID, v))
}

// FacilityIDLT applies the LT predicate on the "FacilityID" field.
func FacilityIDLT(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldLT(FieldFacilityID, v))
}

// FacilityIDLTE applies the LTE predicate on the "FacilityID" field.
func FacilityIDLTE(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldLTE(FieldFacilityID, v))
}

// FacilityIDContains applies the Contains predicate on the "FacilityID" field.
func FacilityIDContains(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldContains(FieldFacilityID, v))
}

// FacilityIDHasPrefix applies the HasPrefix predicate on the "FacilityID" field.
func FacilityIDHasPrefix(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldHasPrefix(FieldFacilityID, v))
}

// FacilityIDHasSuffix applies the HasSuffix predicate on the "FacilityID" field.
func FacilityIDHasSuffix(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldHasSuffix(FieldFacilityID, v))
}

// FacilityIDIsNil applies the IsNil predicate on the "FacilityID" field.
func FacilityIDIsNil() predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldIsNull(FieldFacilityID))
}

// FacilityIDNotNil applies the NotNil predicate on the "FacilityID" field.
func FacilityIDNotNil() predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldNotNull(FieldFacilityID))
}

// FacilityIDEqualFold applies the EqualFold predicate on the "FacilityID" field.
func FacilityIDEqualFold(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldEqualFold(FieldFacilityID, v))
}

// FacilityIDContainsFold applies the ContainsFold predicate on the "FacilityID" field.
func FacilityIDContainsFold(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldContainsFold(FieldFacilityID, v))
}

// OfficeNameEQ applies the EQ predicate on the "OfficeName" field.
func OfficeNameEQ(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldEQ(FieldOfficeName, v))
}

// OfficeNameNEQ applies the NEQ predicate on the "OfficeName" field.
func OfficeNameNEQ(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldNEQ(FieldOfficeName, v))
}

// OfficeNameIn applies the In predicate on the "OfficeName" field.
func OfficeNameIn(vs ...string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldIn(FieldOfficeName, vs...))
}

// OfficeNameNotIn applies the NotIn predicate on the "OfficeName" field.
func OfficeNameNotIn(vs ...string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldNotIn(FieldOfficeName, vs...))
}

// OfficeNameGT applies the GT predicate on the "OfficeName" field.
func OfficeNameGT(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldGT(FieldOfficeName, v))
}

// OfficeNameGTE applies the GTE predicate on the "OfficeName" field.
func OfficeNameGTE(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldGTE(FieldOfficeName, v))
}

// OfficeNameLT applies the LT predicate on the "OfficeName" field.
func OfficeNameLT(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldLT(FieldOfficeName, v))
}

// OfficeNameLTE applies the LTE predicate on the "OfficeName" field.
func OfficeNameLTE(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldLTE(FieldOfficeName, v))
}

// OfficeNameContains applies the Contains predicate on the "OfficeName" field.
func OfficeNameContains(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldContains(FieldOfficeName, v))
}

// OfficeNameHasPrefix applies the HasPrefix predicate on the "OfficeName" field.
func OfficeNameHasPrefix(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldHasPrefix(FieldOfficeName, v))
}

// OfficeNameHasSuffix applies the HasSuffix predicate on the "OfficeName" field.
func OfficeNameHasSuffix(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldHasSuffix(FieldOfficeName, v))
}

// OfficeNameIsNil applies the IsNil predicate on the "OfficeName" field.
func OfficeNameIsNil() predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldIsNull(FieldOfficeName))
}

// OfficeNameNotNil applies the NotNil predicate on the "OfficeName" field.
func OfficeNameNotNil() predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldNotNull(FieldOfficeName))
}

// OfficeNameEqualFold applies the EqualFold predicate on the "OfficeName" field.
func OfficeNameEqualFold(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldEqualFold(FieldOfficeName, v))
}

// OfficeNameContainsFold applies the ContainsFold predicate on the "OfficeName" field.
func OfficeNameContainsFold(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldContainsFold(FieldOfficeName, v))
}

// ControllingAuthorityFacilityIdEQ applies the EQ predicate on the "ControllingAuthorityFacilityId" field.
func ControllingAuthorityFacilityIdEQ(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldEQ(FieldControllingAuthorityFacilityId, v))
}

// ControllingAuthorityFacilityIdNEQ applies the NEQ predicate on the "ControllingAuthorityFacilityId" field.
func ControllingAuthorityFacilityIdNEQ(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldNEQ(FieldControllingAuthorityFacilityId, v))
}

// ControllingAuthorityFacilityIdIn applies the In predicate on the "ControllingAuthorityFacilityId" field.
func ControllingAuthorityFacilityIdIn(vs ...string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldIn(FieldControllingAuthorityFacilityId, vs...))
}

// ControllingAuthorityFacilityIdNotIn applies the NotIn predicate on the "ControllingAuthorityFacilityId" field.
func ControllingAuthorityFacilityIdNotIn(vs ...string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldNotIn(FieldControllingAuthorityFacilityId, vs...))
}

// ControllingAuthorityFacilityIdGT applies the GT predicate on the "ControllingAuthorityFacilityId" field.
func ControllingAuthorityFacilityIdGT(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldGT(FieldControllingAuthorityFacilityId, v))
}

// ControllingAuthorityFacilityIdGTE applies the GTE predicate on the "ControllingAuthorityFacilityId" field.
func ControllingAuthorityFacilityIdGTE(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldGTE(FieldControllingAuthorityFacilityId, v))
}

// ControllingAuthorityFacilityIdLT applies the LT predicate on the "ControllingAuthorityFacilityId" field.
func ControllingAuthorityFacilityIdLT(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldLT(FieldControllingAuthorityFacilityId, v))
}

// ControllingAuthorityFacilityIdLTE applies the LTE predicate on the "ControllingAuthorityFacilityId" field.
func ControllingAuthorityFacilityIdLTE(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldLTE(FieldControllingAuthorityFacilityId, v))
}

// ControllingAuthorityFacilityIdContains applies the Contains predicate on the "ControllingAuthorityFacilityId" field.
func ControllingAuthorityFacilityIdContains(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldContains(FieldControllingAuthorityFacilityId, v))
}

// ControllingAuthorityFacilityIdHasPrefix applies the HasPrefix predicate on the "ControllingAuthorityFacilityId" field.
func ControllingAuthorityFacilityIdHasPrefix(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldHasPrefix(FieldControllingAuthorityFacilityId, v))
}

// ControllingAuthorityFacilityIdHasSuffix applies the HasSuffix predicate on the "ControllingAuthorityFacilityId" field.
func ControllingAuthorityFacilityIdHasSuffix(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldHasSuffix(FieldControllingAuthorityFacilityId, v))
}

// ControllingAuthorityFacilityIdIsNil applies the IsNil predicate on the "ControllingAuthorityFacilityId" field.
func ControllingAuthorityFacilityIdIsNil() predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldIsNull(FieldControllingAuthorityFacilityId))
}

// ControllingAuthorityFacilityIdNotNil applies the NotNil predicate on the "ControllingAuthorityFacilityId" field.
func ControllingAuthorityFacilityIdNotNil() predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldNotNull(FieldControllingAuthorityFacilityId))
}

// ControllingAuthorityFacilityIdEqualFold applies the EqualFold predicate on the "ControllingAuthorityFacilityId" field.
func ControllingAuthorityFacilityIdEqualFold(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldEqualFold(FieldControllingAuthorityFacilityId, v))
}

// ControllingAuthorityFacilityIdContainsFold applies the ContainsFold predicate on the "ControllingAuthorityFacilityId" field.
func ControllingAuthorityFacilityIdContainsFold(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldContainsFold(FieldControllingAuthorityFacilityId, v))
}

// ControllingAuthorityNameEQ applies the EQ predicate on the "ControllingAuthorityName" field.
func ControllingAuthorityNameEQ(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldEQ(FieldControllingAuthorityName, v))
}

// ControllingAuthorityNameNEQ applies the NEQ predicate on the "ControllingAuthorityName" field.
func ControllingAuthorityNameNEQ(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldNEQ(FieldControllingAuthorityName, v))
}

// ControllingAuthorityNameIn applies the In predicate on the "ControllingAuthorityName" field.
func ControllingAuthorityNameIn(vs ...string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldIn(FieldControllingAuthorityName, vs...))
}

// ControllingAuthorityNameNotIn applies the NotIn predicate on the "ControllingAuthorityName" field.
func ControllingAuthorityNameNotIn(vs ...string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldNotIn(FieldControllingAuthorityName, vs...))
}

// ControllingAuthorityNameGT applies the GT predicate on the "ControllingAuthorityName" field.
func ControllingAuthorityNameGT(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldGT(FieldControllingAuthorityName, v))
}

// ControllingAuthorityNameGTE applies the GTE predicate on the "ControllingAuthorityName" field.
func ControllingAuthorityNameGTE(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldGTE(FieldControllingAuthorityName, v))
}

// ControllingAuthorityNameLT applies the LT predicate on the "ControllingAuthorityName" field.
func ControllingAuthorityNameLT(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldLT(FieldControllingAuthorityName, v))
}

// ControllingAuthorityNameLTE applies the LTE predicate on the "ControllingAuthorityName" field.
func ControllingAuthorityNameLTE(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldLTE(FieldControllingAuthorityName, v))
}

// ControllingAuthorityNameContains applies the Contains predicate on the "ControllingAuthorityName" field.
func ControllingAuthorityNameContains(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldContains(FieldControllingAuthorityName, v))
}

// ControllingAuthorityNameHasPrefix applies the HasPrefix predicate on the "ControllingAuthorityName" field.
func ControllingAuthorityNameHasPrefix(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldHasPrefix(FieldControllingAuthorityName, v))
}

// ControllingAuthorityNameHasSuffix applies the HasSuffix predicate on the "ControllingAuthorityName" field.
func ControllingAuthorityNameHasSuffix(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldHasSuffix(FieldControllingAuthorityName, v))
}

// ControllingAuthorityNameIsNil applies the IsNil predicate on the "ControllingAuthorityName" field.
func ControllingAuthorityNameIsNil() predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldIsNull(FieldControllingAuthorityName))
}

// ControllingAuthorityNameNotNil applies the NotNil predicate on the "ControllingAuthorityName" field.
func ControllingAuthorityNameNotNil() predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldNotNull(FieldControllingAuthorityName))
}

// ControllingAuthorityNameEqualFold applies the EqualFold predicate on the "ControllingAuthorityName" field.
func ControllingAuthorityNameEqualFold(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldEqualFold(FieldControllingAuthorityName, v))
}

// ControllingAuthorityNameContainsFold applies the ContainsFold predicate on the "ControllingAuthorityName" field.
func ControllingAuthorityNameContainsFold(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldContainsFold(FieldControllingAuthorityName, v))
}

// NodalAuthorityFaciliyIdEQ applies the EQ predicate on the "NodalAuthorityFaciliyId" field.
func NodalAuthorityFaciliyIdEQ(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldEQ(FieldNodalAuthorityFaciliyId, v))
}

// NodalAuthorityFaciliyIdNEQ applies the NEQ predicate on the "NodalAuthorityFaciliyId" field.
func NodalAuthorityFaciliyIdNEQ(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldNEQ(FieldNodalAuthorityFaciliyId, v))
}

// NodalAuthorityFaciliyIdIn applies the In predicate on the "NodalAuthorityFaciliyId" field.
func NodalAuthorityFaciliyIdIn(vs ...string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldIn(FieldNodalAuthorityFaciliyId, vs...))
}

// NodalAuthorityFaciliyIdNotIn applies the NotIn predicate on the "NodalAuthorityFaciliyId" field.
func NodalAuthorityFaciliyIdNotIn(vs ...string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldNotIn(FieldNodalAuthorityFaciliyId, vs...))
}

// NodalAuthorityFaciliyIdGT applies the GT predicate on the "NodalAuthorityFaciliyId" field.
func NodalAuthorityFaciliyIdGT(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldGT(FieldNodalAuthorityFaciliyId, v))
}

// NodalAuthorityFaciliyIdGTE applies the GTE predicate on the "NodalAuthorityFaciliyId" field.
func NodalAuthorityFaciliyIdGTE(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldGTE(FieldNodalAuthorityFaciliyId, v))
}

// NodalAuthorityFaciliyIdLT applies the LT predicate on the "NodalAuthorityFaciliyId" field.
func NodalAuthorityFaciliyIdLT(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldLT(FieldNodalAuthorityFaciliyId, v))
}

// NodalAuthorityFaciliyIdLTE applies the LTE predicate on the "NodalAuthorityFaciliyId" field.
func NodalAuthorityFaciliyIdLTE(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldLTE(FieldNodalAuthorityFaciliyId, v))
}

// NodalAuthorityFaciliyIdContains applies the Contains predicate on the "NodalAuthorityFaciliyId" field.
func NodalAuthorityFaciliyIdContains(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldContains(FieldNodalAuthorityFaciliyId, v))
}

// NodalAuthorityFaciliyIdHasPrefix applies the HasPrefix predicate on the "NodalAuthorityFaciliyId" field.
func NodalAuthorityFaciliyIdHasPrefix(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldHasPrefix(FieldNodalAuthorityFaciliyId, v))
}

// NodalAuthorityFaciliyIdHasSuffix applies the HasSuffix predicate on the "NodalAuthorityFaciliyId" field.
func NodalAuthorityFaciliyIdHasSuffix(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldHasSuffix(FieldNodalAuthorityFaciliyId, v))
}

// NodalAuthorityFaciliyIdIsNil applies the IsNil predicate on the "NodalAuthorityFaciliyId" field.
func NodalAuthorityFaciliyIdIsNil() predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldIsNull(FieldNodalAuthorityFaciliyId))
}

// NodalAuthorityFaciliyIdNotNil applies the NotNil predicate on the "NodalAuthorityFaciliyId" field.
func NodalAuthorityFaciliyIdNotNil() predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldNotNull(FieldNodalAuthorityFaciliyId))
}

// NodalAuthorityFaciliyIdEqualFold applies the EqualFold predicate on the "NodalAuthorityFaciliyId" field.
func NodalAuthorityFaciliyIdEqualFold(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldEqualFold(FieldNodalAuthorityFaciliyId, v))
}

// NodalAuthorityFaciliyIdContainsFold applies the ContainsFold predicate on the "NodalAuthorityFaciliyId" field.
func NodalAuthorityFaciliyIdContainsFold(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldContainsFold(FieldNodalAuthorityFaciliyId, v))
}

// NodalAuthorityNameEQ applies the EQ predicate on the "NodalAuthorityName" field.
func NodalAuthorityNameEQ(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldEQ(FieldNodalAuthorityName, v))
}

// NodalAuthorityNameNEQ applies the NEQ predicate on the "NodalAuthorityName" field.
func NodalAuthorityNameNEQ(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldNEQ(FieldNodalAuthorityName, v))
}

// NodalAuthorityNameIn applies the In predicate on the "NodalAuthorityName" field.
func NodalAuthorityNameIn(vs ...string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldIn(FieldNodalAuthorityName, vs...))
}

// NodalAuthorityNameNotIn applies the NotIn predicate on the "NodalAuthorityName" field.
func NodalAuthorityNameNotIn(vs ...string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldNotIn(FieldNodalAuthorityName, vs...))
}

// NodalAuthorityNameGT applies the GT predicate on the "NodalAuthorityName" field.
func NodalAuthorityNameGT(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldGT(FieldNodalAuthorityName, v))
}

// NodalAuthorityNameGTE applies the GTE predicate on the "NodalAuthorityName" field.
func NodalAuthorityNameGTE(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldGTE(FieldNodalAuthorityName, v))
}

// NodalAuthorityNameLT applies the LT predicate on the "NodalAuthorityName" field.
func NodalAuthorityNameLT(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldLT(FieldNodalAuthorityName, v))
}

// NodalAuthorityNameLTE applies the LTE predicate on the "NodalAuthorityName" field.
func NodalAuthorityNameLTE(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldLTE(FieldNodalAuthorityName, v))
}

// NodalAuthorityNameContains applies the Contains predicate on the "NodalAuthorityName" field.
func NodalAuthorityNameContains(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldContains(FieldNodalAuthorityName, v))
}

// NodalAuthorityNameHasPrefix applies the HasPrefix predicate on the "NodalAuthorityName" field.
func NodalAuthorityNameHasPrefix(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldHasPrefix(FieldNodalAuthorityName, v))
}

// NodalAuthorityNameHasSuffix applies the HasSuffix predicate on the "NodalAuthorityName" field.
func NodalAuthorityNameHasSuffix(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldHasSuffix(FieldNodalAuthorityName, v))
}

// NodalAuthorityNameIsNil applies the IsNil predicate on the "NodalAuthorityName" field.
func NodalAuthorityNameIsNil() predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldIsNull(FieldNodalAuthorityName))
}

// NodalAuthorityNameNotNil applies the NotNil predicate on the "NodalAuthorityName" field.
func NodalAuthorityNameNotNil() predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldNotNull(FieldNodalAuthorityName))
}

// NodalAuthorityNameEqualFold applies the EqualFold predicate on the "NodalAuthorityName" field.
func NodalAuthorityNameEqualFold(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldEqualFold(FieldNodalAuthorityName, v))
}

// NodalAuthorityNameContainsFold applies the ContainsFold predicate on the "NodalAuthorityName" field.
func NodalAuthorityNameContainsFold(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldContainsFold(FieldNodalAuthorityName, v))
}

// PincodeEQ applies the EQ predicate on the "Pincode" field.
func PincodeEQ(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldEQ(FieldPincode, v))
}

// PincodeNEQ applies the NEQ predicate on the "Pincode" field.
func PincodeNEQ(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldNEQ(FieldPincode, v))
}

// PincodeIn applies the In predicate on the "Pincode" field.
func PincodeIn(vs ...string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldIn(FieldPincode, vs...))
}

// PincodeNotIn applies the NotIn predicate on the "Pincode" field.
func PincodeNotIn(vs ...string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldNotIn(FieldPincode, vs...))
}

// PincodeGT applies the GT predicate on the "Pincode" field.
func PincodeGT(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldGT(FieldPincode, v))
}

// PincodeGTE applies the GTE predicate on the "Pincode" field.
func PincodeGTE(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldGTE(FieldPincode, v))
}

// PincodeLT applies the LT predicate on the "Pincode" field.
func PincodeLT(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldLT(FieldPincode, v))
}

// PincodeLTE applies the LTE predicate on the "Pincode" field.
func PincodeLTE(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldLTE(FieldPincode, v))
}

// PincodeContains applies the Contains predicate on the "Pincode" field.
func PincodeContains(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldContains(FieldPincode, v))
}

// PincodeHasPrefix applies the HasPrefix predicate on the "Pincode" field.
func PincodeHasPrefix(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldHasPrefix(FieldPincode, v))
}

// PincodeHasSuffix applies the HasSuffix predicate on the "Pincode" field.
func PincodeHasSuffix(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldHasSuffix(FieldPincode, v))
}

// PincodeIsNil applies the IsNil predicate on the "Pincode" field.
func PincodeIsNil() predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldIsNull(FieldPincode))
}

// PincodeNotNil applies the NotNil predicate on the "Pincode" field.
func PincodeNotNil() predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldNotNull(FieldPincode))
}

// PincodeEqualFold applies the EqualFold predicate on the "Pincode" field.
func PincodeEqualFold(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldEqualFold(FieldPincode, v))
}

// PincodeContainsFold applies the ContainsFold predicate on the "Pincode" field.
func PincodeContainsFold(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldContainsFold(FieldPincode, v))
}

// CircleFacilityIDEQ applies the EQ predicate on the "CircleFacilityID" field.
func CircleFacilityIDEQ(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldEQ(FieldCircleFacilityID, v))
}

// CircleFacilityIDNEQ applies the NEQ predicate on the "CircleFacilityID" field.
func CircleFacilityIDNEQ(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldNEQ(FieldCircleFacilityID, v))
}

// CircleFacilityIDIn applies the In predicate on the "CircleFacilityID" field.
func CircleFacilityIDIn(vs ...string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldIn(FieldCircleFacilityID, vs...))
}

// CircleFacilityIDNotIn applies the NotIn predicate on the "CircleFacilityID" field.
func CircleFacilityIDNotIn(vs ...string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldNotIn(FieldCircleFacilityID, vs...))
}

// CircleFacilityIDGT applies the GT predicate on the "CircleFacilityID" field.
func CircleFacilityIDGT(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldGT(FieldCircleFacilityID, v))
}

// CircleFacilityIDGTE applies the GTE predicate on the "CircleFacilityID" field.
func CircleFacilityIDGTE(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldGTE(FieldCircleFacilityID, v))
}

// CircleFacilityIDLT applies the LT predicate on the "CircleFacilityID" field.
func CircleFacilityIDLT(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldLT(FieldCircleFacilityID, v))
}

// CircleFacilityIDLTE applies the LTE predicate on the "CircleFacilityID" field.
func CircleFacilityIDLTE(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldLTE(FieldCircleFacilityID, v))
}

// CircleFacilityIDContains applies the Contains predicate on the "CircleFacilityID" field.
func CircleFacilityIDContains(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldContains(FieldCircleFacilityID, v))
}

// CircleFacilityIDHasPrefix applies the HasPrefix predicate on the "CircleFacilityID" field.
func CircleFacilityIDHasPrefix(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldHasPrefix(FieldCircleFacilityID, v))
}

// CircleFacilityIDHasSuffix applies the HasSuffix predicate on the "CircleFacilityID" field.
func CircleFacilityIDHasSuffix(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldHasSuffix(FieldCircleFacilityID, v))
}

// CircleFacilityIDIsNil applies the IsNil predicate on the "CircleFacilityID" field.
func CircleFacilityIDIsNil() predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldIsNull(FieldCircleFacilityID))
}

// CircleFacilityIDNotNil applies the NotNil predicate on the "CircleFacilityID" field.
func CircleFacilityIDNotNil() predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldNotNull(FieldCircleFacilityID))
}

// CircleFacilityIDEqualFold applies the EqualFold predicate on the "CircleFacilityID" field.
func CircleFacilityIDEqualFold(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldEqualFold(FieldCircleFacilityID, v))
}

// CircleFacilityIDContainsFold applies the ContainsFold predicate on the "CircleFacilityID" field.
func CircleFacilityIDContainsFold(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldContainsFold(FieldCircleFacilityID, v))
}

// StatussEQ applies the EQ predicate on the "Statuss" field.
func StatussEQ(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldEQ(FieldStatuss, v))
}

// StatussNEQ applies the NEQ predicate on the "Statuss" field.
func StatussNEQ(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldNEQ(FieldStatuss, v))
}

// StatussIn applies the In predicate on the "Statuss" field.
func StatussIn(vs ...string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldIn(FieldStatuss, vs...))
}

// StatussNotIn applies the NotIn predicate on the "Statuss" field.
func StatussNotIn(vs ...string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldNotIn(FieldStatuss, vs...))
}

// StatussGT applies the GT predicate on the "Statuss" field.
func StatussGT(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldGT(FieldStatuss, v))
}

// StatussGTE applies the GTE predicate on the "Statuss" field.
func StatussGTE(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldGTE(FieldStatuss, v))
}

// StatussLT applies the LT predicate on the "Statuss" field.
func StatussLT(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldLT(FieldStatuss, v))
}

// StatussLTE applies the LTE predicate on the "Statuss" field.
func StatussLTE(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldLTE(FieldStatuss, v))
}

// StatussContains applies the Contains predicate on the "Statuss" field.
func StatussContains(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldContains(FieldStatuss, v))
}

// StatussHasPrefix applies the HasPrefix predicate on the "Statuss" field.
func StatussHasPrefix(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldHasPrefix(FieldStatuss, v))
}

// StatussHasSuffix applies the HasSuffix predicate on the "Statuss" field.
func StatussHasSuffix(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldHasSuffix(FieldStatuss, v))
}

// StatussIsNil applies the IsNil predicate on the "Statuss" field.
func StatussIsNil() predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldIsNull(FieldStatuss))
}

// StatussNotNil applies the NotNil predicate on the "Statuss" field.
func StatussNotNil() predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldNotNull(FieldStatuss))
}

// StatussEqualFold applies the EqualFold predicate on the "Statuss" field.
func StatussEqualFold(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldEqualFold(FieldStatuss, v))
}

// StatussContainsFold applies the ContainsFold predicate on the "Statuss" field.
func StatussContainsFold(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldContainsFold(FieldStatuss, v))
}

// VerifyStatusEQ applies the EQ predicate on the "VerifyStatus" field.
func VerifyStatusEQ(v bool) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldEQ(FieldVerifyStatus, v))
}

// VerifyStatusNEQ applies the NEQ predicate on the "VerifyStatus" field.
func VerifyStatusNEQ(v bool) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldNEQ(FieldVerifyStatus, v))
}

// UidTokenEQ applies the EQ predicate on the "UidToken" field.
func UidTokenEQ(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldEQ(FieldUidToken, v))
}

// UidTokenNEQ applies the NEQ predicate on the "UidToken" field.
func UidTokenNEQ(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldNEQ(FieldUidToken, v))
}

// UidTokenIn applies the In predicate on the "UidToken" field.
func UidTokenIn(vs ...string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldIn(FieldUidToken, vs...))
}

// UidTokenNotIn applies the NotIn predicate on the "UidToken" field.
func UidTokenNotIn(vs ...string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldNotIn(FieldUidToken, vs...))
}

// UidTokenGT applies the GT predicate on the "UidToken" field.
func UidTokenGT(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldGT(FieldUidToken, v))
}

// UidTokenGTE applies the GTE predicate on the "UidToken" field.
func UidTokenGTE(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldGTE(FieldUidToken, v))
}

// UidTokenLT applies the LT predicate on the "UidToken" field.
func UidTokenLT(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldLT(FieldUidToken, v))
}

// UidTokenLTE applies the LTE predicate on the "UidToken" field.
func UidTokenLTE(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldLTE(FieldUidToken, v))
}

// UidTokenContains applies the Contains predicate on the "UidToken" field.
func UidTokenContains(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldContains(FieldUidToken, v))
}

// UidTokenHasPrefix applies the HasPrefix predicate on the "UidToken" field.
func UidTokenHasPrefix(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldHasPrefix(FieldUidToken, v))
}

// UidTokenHasSuffix applies the HasSuffix predicate on the "UidToken" field.
func UidTokenHasSuffix(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldHasSuffix(FieldUidToken, v))
}

// UidTokenIsNil applies the IsNil predicate on the "UidToken" field.
func UidTokenIsNil() predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldIsNull(FieldUidToken))
}

// UidTokenNotNil applies the NotNil predicate on the "UidToken" field.
func UidTokenNotNil() predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldNotNull(FieldUidToken))
}

// UidTokenEqualFold applies the EqualFold predicate on the "UidToken" field.
func UidTokenEqualFold(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldEqualFold(FieldUidToken, v))
}

// UidTokenContainsFold applies the ContainsFold predicate on the "UidToken" field.
func UidTokenContainsFold(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldContainsFold(FieldUidToken, v))
}

// CreatedbyEQ applies the EQ predicate on the "Createdby" field.
func CreatedbyEQ(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldEQ(FieldCreatedby, v))
}

// CreatedbyNEQ applies the NEQ predicate on the "Createdby" field.
func CreatedbyNEQ(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldNEQ(FieldCreatedby, v))
}

// CreatedbyIn applies the In predicate on the "Createdby" field.
func CreatedbyIn(vs ...string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldIn(FieldCreatedby, vs...))
}

// CreatedbyNotIn applies the NotIn predicate on the "Createdby" field.
func CreatedbyNotIn(vs ...string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldNotIn(FieldCreatedby, vs...))
}

// CreatedbyGT applies the GT predicate on the "Createdby" field.
func CreatedbyGT(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldGT(FieldCreatedby, v))
}

// CreatedbyGTE applies the GTE predicate on the "Createdby" field.
func CreatedbyGTE(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldGTE(FieldCreatedby, v))
}

// CreatedbyLT applies the LT predicate on the "Createdby" field.
func CreatedbyLT(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldLT(FieldCreatedby, v))
}

// CreatedbyLTE applies the LTE predicate on the "Createdby" field.
func CreatedbyLTE(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldLTE(FieldCreatedby, v))
}

// CreatedbyContains applies the Contains predicate on the "Createdby" field.
func CreatedbyContains(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldContains(FieldCreatedby, v))
}

// CreatedbyHasPrefix applies the HasPrefix predicate on the "Createdby" field.
func CreatedbyHasPrefix(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldHasPrefix(FieldCreatedby, v))
}

// CreatedbyHasSuffix applies the HasSuffix predicate on the "Createdby" field.
func CreatedbyHasSuffix(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldHasSuffix(FieldCreatedby, v))
}

// CreatedbyIsNil applies the IsNil predicate on the "Createdby" field.
func CreatedbyIsNil() predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldIsNull(FieldCreatedby))
}

// CreatedbyNotNil applies the NotNil predicate on the "Createdby" field.
func CreatedbyNotNil() predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldNotNull(FieldCreatedby))
}

// CreatedbyEqualFold applies the EqualFold predicate on the "Createdby" field.
func CreatedbyEqualFold(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldEqualFold(FieldCreatedby, v))
}

// CreatedbyContainsFold applies the ContainsFold predicate on the "Createdby" field.
func CreatedbyContainsFold(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldContainsFold(FieldCreatedby, v))
}

// DCCSEQ applies the EQ predicate on the "DCCS" field.
func DCCSEQ(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldEQ(FieldDCCS, v))
}

// DCCSNEQ applies the NEQ predicate on the "DCCS" field.
func DCCSNEQ(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldNEQ(FieldDCCS, v))
}

// DCCSIn applies the In predicate on the "DCCS" field.
func DCCSIn(vs ...string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldIn(FieldDCCS, vs...))
}

// DCCSNotIn applies the NotIn predicate on the "DCCS" field.
func DCCSNotIn(vs ...string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldNotIn(FieldDCCS, vs...))
}

// DCCSGT applies the GT predicate on the "DCCS" field.
func DCCSGT(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldGT(FieldDCCS, v))
}

// DCCSGTE applies the GTE predicate on the "DCCS" field.
func DCCSGTE(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldGTE(FieldDCCS, v))
}

// DCCSLT applies the LT predicate on the "DCCS" field.
func DCCSLT(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldLT(FieldDCCS, v))
}

// DCCSLTE applies the LTE predicate on the "DCCS" field.
func DCCSLTE(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldLTE(FieldDCCS, v))
}

// DCCSContains applies the Contains predicate on the "DCCS" field.
func DCCSContains(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldContains(FieldDCCS, v))
}

// DCCSHasPrefix applies the HasPrefix predicate on the "DCCS" field.
func DCCSHasPrefix(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldHasPrefix(FieldDCCS, v))
}

// DCCSHasSuffix applies the HasSuffix predicate on the "DCCS" field.
func DCCSHasSuffix(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldHasSuffix(FieldDCCS, v))
}

// DCCSIsNil applies the IsNil predicate on the "DCCS" field.
func DCCSIsNil() predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldIsNull(FieldDCCS))
}

// DCCSNotNil applies the NotNil predicate on the "DCCS" field.
func DCCSNotNil() predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldNotNull(FieldDCCS))
}

// DCCSEqualFold applies the EqualFold predicate on the "DCCS" field.
func DCCSEqualFold(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldEqualFold(FieldDCCS, v))
}

// DCCSContainsFold applies the ContainsFold predicate on the "DCCS" field.
func DCCSContainsFold(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldContainsFold(FieldDCCS, v))
}

// CreatedByIdEQ applies the EQ predicate on the "CreatedById" field.
func CreatedByIdEQ(v int64) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldEQ(FieldCreatedById, v))
}

// CreatedByIdNEQ applies the NEQ predicate on the "CreatedById" field.
func CreatedByIdNEQ(v int64) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldNEQ(FieldCreatedById, v))
}

// CreatedByIdIn applies the In predicate on the "CreatedById" field.
func CreatedByIdIn(vs ...int64) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldIn(FieldCreatedById, vs...))
}

// CreatedByIdNotIn applies the NotIn predicate on the "CreatedById" field.
func CreatedByIdNotIn(vs ...int64) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldNotIn(FieldCreatedById, vs...))
}

// CreatedByIdGT applies the GT predicate on the "CreatedById" field.
func CreatedByIdGT(v int64) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldGT(FieldCreatedById, v))
}

// CreatedByIdGTE applies the GTE predicate on the "CreatedById" field.
func CreatedByIdGTE(v int64) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldGTE(FieldCreatedById, v))
}

// CreatedByIdLT applies the LT predicate on the "CreatedById" field.
func CreatedByIdLT(v int64) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldLT(FieldCreatedById, v))
}

// CreatedByIdLTE applies the LTE predicate on the "CreatedById" field.
func CreatedByIdLTE(v int64) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldLTE(FieldCreatedById, v))
}

// CreatedByIdIsNil applies the IsNil predicate on the "CreatedById" field.
func CreatedByIdIsNil() predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldIsNull(FieldCreatedById))
}

// CreatedByIdNotNil applies the NotNil predicate on the "CreatedById" field.
func CreatedByIdNotNil() predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldNotNull(FieldCreatedById))
}

// CreatedByUserNameEQ applies the EQ predicate on the "CreatedByUserName" field.
func CreatedByUserNameEQ(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldEQ(FieldCreatedByUserName, v))
}

// CreatedByUserNameNEQ applies the NEQ predicate on the "CreatedByUserName" field.
func CreatedByUserNameNEQ(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldNEQ(FieldCreatedByUserName, v))
}

// CreatedByUserNameIn applies the In predicate on the "CreatedByUserName" field.
func CreatedByUserNameIn(vs ...string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldIn(FieldCreatedByUserName, vs...))
}

// CreatedByUserNameNotIn applies the NotIn predicate on the "CreatedByUserName" field.
func CreatedByUserNameNotIn(vs ...string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldNotIn(FieldCreatedByUserName, vs...))
}

// CreatedByUserNameGT applies the GT predicate on the "CreatedByUserName" field.
func CreatedByUserNameGT(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldGT(FieldCreatedByUserName, v))
}

// CreatedByUserNameGTE applies the GTE predicate on the "CreatedByUserName" field.
func CreatedByUserNameGTE(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldGTE(FieldCreatedByUserName, v))
}

// CreatedByUserNameLT applies the LT predicate on the "CreatedByUserName" field.
func CreatedByUserNameLT(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldLT(FieldCreatedByUserName, v))
}

// CreatedByUserNameLTE applies the LTE predicate on the "CreatedByUserName" field.
func CreatedByUserNameLTE(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldLTE(FieldCreatedByUserName, v))
}

// CreatedByUserNameContains applies the Contains predicate on the "CreatedByUserName" field.
func CreatedByUserNameContains(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldContains(FieldCreatedByUserName, v))
}

// CreatedByUserNameHasPrefix applies the HasPrefix predicate on the "CreatedByUserName" field.
func CreatedByUserNameHasPrefix(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldHasPrefix(FieldCreatedByUserName, v))
}

// CreatedByUserNameHasSuffix applies the HasSuffix predicate on the "CreatedByUserName" field.
func CreatedByUserNameHasSuffix(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldHasSuffix(FieldCreatedByUserName, v))
}

// CreatedByUserNameIsNil applies the IsNil predicate on the "CreatedByUserName" field.
func CreatedByUserNameIsNil() predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldIsNull(FieldCreatedByUserName))
}

// CreatedByUserNameNotNil applies the NotNil predicate on the "CreatedByUserName" field.
func CreatedByUserNameNotNil() predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldNotNull(FieldCreatedByUserName))
}

// CreatedByUserNameEqualFold applies the EqualFold predicate on the "CreatedByUserName" field.
func CreatedByUserNameEqualFold(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldEqualFold(FieldCreatedByUserName, v))
}

// CreatedByUserNameContainsFold applies the ContainsFold predicate on the "CreatedByUserName" field.
func CreatedByUserNameContainsFold(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldContainsFold(FieldCreatedByUserName, v))
}

// CreatedByEmpIdEQ applies the EQ predicate on the "CreatedByEmpId" field.
func CreatedByEmpIdEQ(v int64) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldEQ(FieldCreatedByEmpId, v))
}

// CreatedByEmpIdNEQ applies the NEQ predicate on the "CreatedByEmpId" field.
func CreatedByEmpIdNEQ(v int64) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldNEQ(FieldCreatedByEmpId, v))
}

// CreatedByEmpIdIn applies the In predicate on the "CreatedByEmpId" field.
func CreatedByEmpIdIn(vs ...int64) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldIn(FieldCreatedByEmpId, vs...))
}

// CreatedByEmpIdNotIn applies the NotIn predicate on the "CreatedByEmpId" field.
func CreatedByEmpIdNotIn(vs ...int64) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldNotIn(FieldCreatedByEmpId, vs...))
}

// CreatedByEmpIdGT applies the GT predicate on the "CreatedByEmpId" field.
func CreatedByEmpIdGT(v int64) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldGT(FieldCreatedByEmpId, v))
}

// CreatedByEmpIdGTE applies the GTE predicate on the "CreatedByEmpId" field.
func CreatedByEmpIdGTE(v int64) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldGTE(FieldCreatedByEmpId, v))
}

// CreatedByEmpIdLT applies the LT predicate on the "CreatedByEmpId" field.
func CreatedByEmpIdLT(v int64) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldLT(FieldCreatedByEmpId, v))
}

// CreatedByEmpIdLTE applies the LTE predicate on the "CreatedByEmpId" field.
func CreatedByEmpIdLTE(v int64) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldLTE(FieldCreatedByEmpId, v))
}

// CreatedByEmpIdIsNil applies the IsNil predicate on the "CreatedByEmpId" field.
func CreatedByEmpIdIsNil() predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldIsNull(FieldCreatedByEmpId))
}

// CreatedByEmpIdNotNil applies the NotNil predicate on the "CreatedByEmpId" field.
func CreatedByEmpIdNotNil() predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldNotNull(FieldCreatedByEmpId))
}

// CreatedByDesignationEQ applies the EQ predicate on the "CreatedByDesignation" field.
func CreatedByDesignationEQ(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldEQ(FieldCreatedByDesignation, v))
}

// CreatedByDesignationNEQ applies the NEQ predicate on the "CreatedByDesignation" field.
func CreatedByDesignationNEQ(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldNEQ(FieldCreatedByDesignation, v))
}

// CreatedByDesignationIn applies the In predicate on the "CreatedByDesignation" field.
func CreatedByDesignationIn(vs ...string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldIn(FieldCreatedByDesignation, vs...))
}

// CreatedByDesignationNotIn applies the NotIn predicate on the "CreatedByDesignation" field.
func CreatedByDesignationNotIn(vs ...string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldNotIn(FieldCreatedByDesignation, vs...))
}

// CreatedByDesignationGT applies the GT predicate on the "CreatedByDesignation" field.
func CreatedByDesignationGT(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldGT(FieldCreatedByDesignation, v))
}

// CreatedByDesignationGTE applies the GTE predicate on the "CreatedByDesignation" field.
func CreatedByDesignationGTE(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldGTE(FieldCreatedByDesignation, v))
}

// CreatedByDesignationLT applies the LT predicate on the "CreatedByDesignation" field.
func CreatedByDesignationLT(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldLT(FieldCreatedByDesignation, v))
}

// CreatedByDesignationLTE applies the LTE predicate on the "CreatedByDesignation" field.
func CreatedByDesignationLTE(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldLTE(FieldCreatedByDesignation, v))
}

// CreatedByDesignationContains applies the Contains predicate on the "CreatedByDesignation" field.
func CreatedByDesignationContains(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldContains(FieldCreatedByDesignation, v))
}

// CreatedByDesignationHasPrefix applies the HasPrefix predicate on the "CreatedByDesignation" field.
func CreatedByDesignationHasPrefix(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldHasPrefix(FieldCreatedByDesignation, v))
}

// CreatedByDesignationHasSuffix applies the HasSuffix predicate on the "CreatedByDesignation" field.
func CreatedByDesignationHasSuffix(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldHasSuffix(FieldCreatedByDesignation, v))
}

// CreatedByDesignationIsNil applies the IsNil predicate on the "CreatedByDesignation" field.
func CreatedByDesignationIsNil() predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldIsNull(FieldCreatedByDesignation))
}

// CreatedByDesignationNotNil applies the NotNil predicate on the "CreatedByDesignation" field.
func CreatedByDesignationNotNil() predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldNotNull(FieldCreatedByDesignation))
}

// CreatedByDesignationEqualFold applies the EqualFold predicate on the "CreatedByDesignation" field.
func CreatedByDesignationEqualFold(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldEqualFold(FieldCreatedByDesignation, v))
}

// CreatedByDesignationContainsFold applies the ContainsFold predicate on the "CreatedByDesignation" field.
func CreatedByDesignationContainsFold(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldContainsFold(FieldCreatedByDesignation, v))
}

// CreatedDateEQ applies the EQ predicate on the "CreatedDate" field.
func CreatedDateEQ(v time.Time) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldEQ(FieldCreatedDate, v))
}

// CreatedDateNEQ applies the NEQ predicate on the "CreatedDate" field.
func CreatedDateNEQ(v time.Time) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldNEQ(FieldCreatedDate, v))
}

// CreatedDateIn applies the In predicate on the "CreatedDate" field.
func CreatedDateIn(vs ...time.Time) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldIn(FieldCreatedDate, vs...))
}

// CreatedDateNotIn applies the NotIn predicate on the "CreatedDate" field.
func CreatedDateNotIn(vs ...time.Time) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldNotIn(FieldCreatedDate, vs...))
}

// CreatedDateGT applies the GT predicate on the "CreatedDate" field.
func CreatedDateGT(v time.Time) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldGT(FieldCreatedDate, v))
}

// CreatedDateGTE applies the GTE predicate on the "CreatedDate" field.
func CreatedDateGTE(v time.Time) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldGTE(FieldCreatedDate, v))
}

// CreatedDateLT applies the LT predicate on the "CreatedDate" field.
func CreatedDateLT(v time.Time) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldLT(FieldCreatedDate, v))
}

// CreatedDateLTE applies the LTE predicate on the "CreatedDate" field.
func CreatedDateLTE(v time.Time) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldLTE(FieldCreatedDate, v))
}

// CreatedDateIsNil applies the IsNil predicate on the "CreatedDate" field.
func CreatedDateIsNil() predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldIsNull(FieldCreatedDate))
}

// CreatedDateNotNil applies the NotNil predicate on the "CreatedDate" field.
func CreatedDateNotNil() predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldNotNull(FieldCreatedDate))
}

// ModifiedByIdEQ applies the EQ predicate on the "ModifiedById" field.
func ModifiedByIdEQ(v int64) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldEQ(FieldModifiedById, v))
}

// ModifiedByIdNEQ applies the NEQ predicate on the "ModifiedById" field.
func ModifiedByIdNEQ(v int64) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldNEQ(FieldModifiedById, v))
}

// ModifiedByIdIn applies the In predicate on the "ModifiedById" field.
func ModifiedByIdIn(vs ...int64) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldIn(FieldModifiedById, vs...))
}

// ModifiedByIdNotIn applies the NotIn predicate on the "ModifiedById" field.
func ModifiedByIdNotIn(vs ...int64) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldNotIn(FieldModifiedById, vs...))
}

// ModifiedByIdGT applies the GT predicate on the "ModifiedById" field.
func ModifiedByIdGT(v int64) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldGT(FieldModifiedById, v))
}

// ModifiedByIdGTE applies the GTE predicate on the "ModifiedById" field.
func ModifiedByIdGTE(v int64) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldGTE(FieldModifiedById, v))
}

// ModifiedByIdLT applies the LT predicate on the "ModifiedById" field.
func ModifiedByIdLT(v int64) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldLT(FieldModifiedById, v))
}

// ModifiedByIdLTE applies the LTE predicate on the "ModifiedById" field.
func ModifiedByIdLTE(v int64) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldLTE(FieldModifiedById, v))
}

// ModifiedByIdIsNil applies the IsNil predicate on the "ModifiedById" field.
func ModifiedByIdIsNil() predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldIsNull(FieldModifiedById))
}

// ModifiedByIdNotNil applies the NotNil predicate on the "ModifiedById" field.
func ModifiedByIdNotNil() predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldNotNull(FieldModifiedById))
}

// ModifiedByUserNameEQ applies the EQ predicate on the "ModifiedByUserName" field.
func ModifiedByUserNameEQ(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldEQ(FieldModifiedByUserName, v))
}

// ModifiedByUserNameNEQ applies the NEQ predicate on the "ModifiedByUserName" field.
func ModifiedByUserNameNEQ(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldNEQ(FieldModifiedByUserName, v))
}

// ModifiedByUserNameIn applies the In predicate on the "ModifiedByUserName" field.
func ModifiedByUserNameIn(vs ...string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldIn(FieldModifiedByUserName, vs...))
}

// ModifiedByUserNameNotIn applies the NotIn predicate on the "ModifiedByUserName" field.
func ModifiedByUserNameNotIn(vs ...string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldNotIn(FieldModifiedByUserName, vs...))
}

// ModifiedByUserNameGT applies the GT predicate on the "ModifiedByUserName" field.
func ModifiedByUserNameGT(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldGT(FieldModifiedByUserName, v))
}

// ModifiedByUserNameGTE applies the GTE predicate on the "ModifiedByUserName" field.
func ModifiedByUserNameGTE(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldGTE(FieldModifiedByUserName, v))
}

// ModifiedByUserNameLT applies the LT predicate on the "ModifiedByUserName" field.
func ModifiedByUserNameLT(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldLT(FieldModifiedByUserName, v))
}

// ModifiedByUserNameLTE applies the LTE predicate on the "ModifiedByUserName" field.
func ModifiedByUserNameLTE(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldLTE(FieldModifiedByUserName, v))
}

// ModifiedByUserNameContains applies the Contains predicate on the "ModifiedByUserName" field.
func ModifiedByUserNameContains(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldContains(FieldModifiedByUserName, v))
}

// ModifiedByUserNameHasPrefix applies the HasPrefix predicate on the "ModifiedByUserName" field.
func ModifiedByUserNameHasPrefix(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldHasPrefix(FieldModifiedByUserName, v))
}

// ModifiedByUserNameHasSuffix applies the HasSuffix predicate on the "ModifiedByUserName" field.
func ModifiedByUserNameHasSuffix(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldHasSuffix(FieldModifiedByUserName, v))
}

// ModifiedByUserNameIsNil applies the IsNil predicate on the "ModifiedByUserName" field.
func ModifiedByUserNameIsNil() predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldIsNull(FieldModifiedByUserName))
}

// ModifiedByUserNameNotNil applies the NotNil predicate on the "ModifiedByUserName" field.
func ModifiedByUserNameNotNil() predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldNotNull(FieldModifiedByUserName))
}

// ModifiedByUserNameEqualFold applies the EqualFold predicate on the "ModifiedByUserName" field.
func ModifiedByUserNameEqualFold(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldEqualFold(FieldModifiedByUserName, v))
}

// ModifiedByUserNameContainsFold applies the ContainsFold predicate on the "ModifiedByUserName" field.
func ModifiedByUserNameContainsFold(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldContainsFold(FieldModifiedByUserName, v))
}

// ModifiedByEmpIdEQ applies the EQ predicate on the "ModifiedByEmpId" field.
func ModifiedByEmpIdEQ(v int64) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldEQ(FieldModifiedByEmpId, v))
}

// ModifiedByEmpIdNEQ applies the NEQ predicate on the "ModifiedByEmpId" field.
func ModifiedByEmpIdNEQ(v int64) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldNEQ(FieldModifiedByEmpId, v))
}

// ModifiedByEmpIdIn applies the In predicate on the "ModifiedByEmpId" field.
func ModifiedByEmpIdIn(vs ...int64) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldIn(FieldModifiedByEmpId, vs...))
}

// ModifiedByEmpIdNotIn applies the NotIn predicate on the "ModifiedByEmpId" field.
func ModifiedByEmpIdNotIn(vs ...int64) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldNotIn(FieldModifiedByEmpId, vs...))
}

// ModifiedByEmpIdGT applies the GT predicate on the "ModifiedByEmpId" field.
func ModifiedByEmpIdGT(v int64) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldGT(FieldModifiedByEmpId, v))
}

// ModifiedByEmpIdGTE applies the GTE predicate on the "ModifiedByEmpId" field.
func ModifiedByEmpIdGTE(v int64) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldGTE(FieldModifiedByEmpId, v))
}

// ModifiedByEmpIdLT applies the LT predicate on the "ModifiedByEmpId" field.
func ModifiedByEmpIdLT(v int64) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldLT(FieldModifiedByEmpId, v))
}

// ModifiedByEmpIdLTE applies the LTE predicate on the "ModifiedByEmpId" field.
func ModifiedByEmpIdLTE(v int64) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldLTE(FieldModifiedByEmpId, v))
}

// ModifiedByEmpIdIsNil applies the IsNil predicate on the "ModifiedByEmpId" field.
func ModifiedByEmpIdIsNil() predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldIsNull(FieldModifiedByEmpId))
}

// ModifiedByEmpIdNotNil applies the NotNil predicate on the "ModifiedByEmpId" field.
func ModifiedByEmpIdNotNil() predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldNotNull(FieldModifiedByEmpId))
}

// ModifiedByDesignantionEQ applies the EQ predicate on the "ModifiedByDesignantion" field.
func ModifiedByDesignantionEQ(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldEQ(FieldModifiedByDesignantion, v))
}

// ModifiedByDesignantionNEQ applies the NEQ predicate on the "ModifiedByDesignantion" field.
func ModifiedByDesignantionNEQ(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldNEQ(FieldModifiedByDesignantion, v))
}

// ModifiedByDesignantionIn applies the In predicate on the "ModifiedByDesignantion" field.
func ModifiedByDesignantionIn(vs ...string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldIn(FieldModifiedByDesignantion, vs...))
}

// ModifiedByDesignantionNotIn applies the NotIn predicate on the "ModifiedByDesignantion" field.
func ModifiedByDesignantionNotIn(vs ...string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldNotIn(FieldModifiedByDesignantion, vs...))
}

// ModifiedByDesignantionGT applies the GT predicate on the "ModifiedByDesignantion" field.
func ModifiedByDesignantionGT(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldGT(FieldModifiedByDesignantion, v))
}

// ModifiedByDesignantionGTE applies the GTE predicate on the "ModifiedByDesignantion" field.
func ModifiedByDesignantionGTE(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldGTE(FieldModifiedByDesignantion, v))
}

// ModifiedByDesignantionLT applies the LT predicate on the "ModifiedByDesignantion" field.
func ModifiedByDesignantionLT(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldLT(FieldModifiedByDesignantion, v))
}

// ModifiedByDesignantionLTE applies the LTE predicate on the "ModifiedByDesignantion" field.
func ModifiedByDesignantionLTE(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldLTE(FieldModifiedByDesignantion, v))
}

// ModifiedByDesignantionContains applies the Contains predicate on the "ModifiedByDesignantion" field.
func ModifiedByDesignantionContains(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldContains(FieldModifiedByDesignantion, v))
}

// ModifiedByDesignantionHasPrefix applies the HasPrefix predicate on the "ModifiedByDesignantion" field.
func ModifiedByDesignantionHasPrefix(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldHasPrefix(FieldModifiedByDesignantion, v))
}

// ModifiedByDesignantionHasSuffix applies the HasSuffix predicate on the "ModifiedByDesignantion" field.
func ModifiedByDesignantionHasSuffix(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldHasSuffix(FieldModifiedByDesignantion, v))
}

// ModifiedByDesignantionIsNil applies the IsNil predicate on the "ModifiedByDesignantion" field.
func ModifiedByDesignantionIsNil() predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldIsNull(FieldModifiedByDesignantion))
}

// ModifiedByDesignantionNotNil applies the NotNil predicate on the "ModifiedByDesignantion" field.
func ModifiedByDesignantionNotNil() predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldNotNull(FieldModifiedByDesignantion))
}

// ModifiedByDesignantionEqualFold applies the EqualFold predicate on the "ModifiedByDesignantion" field.
func ModifiedByDesignantionEqualFold(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldEqualFold(FieldModifiedByDesignantion, v))
}

// ModifiedByDesignantionContainsFold applies the ContainsFold predicate on the "ModifiedByDesignantion" field.
func ModifiedByDesignantionContainsFold(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldContainsFold(FieldModifiedByDesignantion, v))
}

// ModifiedDateEQ applies the EQ predicate on the "ModifiedDate" field.
func ModifiedDateEQ(v time.Time) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldEQ(FieldModifiedDate, v))
}

// ModifiedDateNEQ applies the NEQ predicate on the "ModifiedDate" field.
func ModifiedDateNEQ(v time.Time) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldNEQ(FieldModifiedDate, v))
}

// ModifiedDateIn applies the In predicate on the "ModifiedDate" field.
func ModifiedDateIn(vs ...time.Time) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldIn(FieldModifiedDate, vs...))
}

// ModifiedDateNotIn applies the NotIn predicate on the "ModifiedDate" field.
func ModifiedDateNotIn(vs ...time.Time) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldNotIn(FieldModifiedDate, vs...))
}

// ModifiedDateGT applies the GT predicate on the "ModifiedDate" field.
func ModifiedDateGT(v time.Time) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldGT(FieldModifiedDate, v))
}

// ModifiedDateGTE applies the GTE predicate on the "ModifiedDate" field.
func ModifiedDateGTE(v time.Time) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldGTE(FieldModifiedDate, v))
}

// ModifiedDateLT applies the LT predicate on the "ModifiedDate" field.
func ModifiedDateLT(v time.Time) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldLT(FieldModifiedDate, v))
}

// ModifiedDateLTE applies the LTE predicate on the "ModifiedDate" field.
func ModifiedDateLTE(v time.Time) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldLTE(FieldModifiedDate, v))
}

// ModifiedDateIsNil applies the IsNil predicate on the "ModifiedDate" field.
func ModifiedDateIsNil() predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldIsNull(FieldModifiedDate))
}

// ModifiedDateNotNil applies the NotNil predicate on the "ModifiedDate" field.
func ModifiedDateNotNil() predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldNotNull(FieldModifiedDate))
}

// DeletedByIdEQ applies the EQ predicate on the "DeletedById" field.
func DeletedByIdEQ(v int64) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldEQ(FieldDeletedById, v))
}

// DeletedByIdNEQ applies the NEQ predicate on the "DeletedById" field.
func DeletedByIdNEQ(v int64) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldNEQ(FieldDeletedById, v))
}

// DeletedByIdIn applies the In predicate on the "DeletedById" field.
func DeletedByIdIn(vs ...int64) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldIn(FieldDeletedById, vs...))
}

// DeletedByIdNotIn applies the NotIn predicate on the "DeletedById" field.
func DeletedByIdNotIn(vs ...int64) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldNotIn(FieldDeletedById, vs...))
}

// DeletedByIdGT applies the GT predicate on the "DeletedById" field.
func DeletedByIdGT(v int64) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldGT(FieldDeletedById, v))
}

// DeletedByIdGTE applies the GTE predicate on the "DeletedById" field.
func DeletedByIdGTE(v int64) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldGTE(FieldDeletedById, v))
}

// DeletedByIdLT applies the LT predicate on the "DeletedById" field.
func DeletedByIdLT(v int64) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldLT(FieldDeletedById, v))
}

// DeletedByIdLTE applies the LTE predicate on the "DeletedById" field.
func DeletedByIdLTE(v int64) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldLTE(FieldDeletedById, v))
}

// DeletedByIdIsNil applies the IsNil predicate on the "DeletedById" field.
func DeletedByIdIsNil() predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldIsNull(FieldDeletedById))
}

// DeletedByIdNotNil applies the NotNil predicate on the "DeletedById" field.
func DeletedByIdNotNil() predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldNotNull(FieldDeletedById))
}

// DeletedByUserNameEQ applies the EQ predicate on the "DeletedByUserName" field.
func DeletedByUserNameEQ(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldEQ(FieldDeletedByUserName, v))
}

// DeletedByUserNameNEQ applies the NEQ predicate on the "DeletedByUserName" field.
func DeletedByUserNameNEQ(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldNEQ(FieldDeletedByUserName, v))
}

// DeletedByUserNameIn applies the In predicate on the "DeletedByUserName" field.
func DeletedByUserNameIn(vs ...string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldIn(FieldDeletedByUserName, vs...))
}

// DeletedByUserNameNotIn applies the NotIn predicate on the "DeletedByUserName" field.
func DeletedByUserNameNotIn(vs ...string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldNotIn(FieldDeletedByUserName, vs...))
}

// DeletedByUserNameGT applies the GT predicate on the "DeletedByUserName" field.
func DeletedByUserNameGT(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldGT(FieldDeletedByUserName, v))
}

// DeletedByUserNameGTE applies the GTE predicate on the "DeletedByUserName" field.
func DeletedByUserNameGTE(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldGTE(FieldDeletedByUserName, v))
}

// DeletedByUserNameLT applies the LT predicate on the "DeletedByUserName" field.
func DeletedByUserNameLT(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldLT(FieldDeletedByUserName, v))
}

// DeletedByUserNameLTE applies the LTE predicate on the "DeletedByUserName" field.
func DeletedByUserNameLTE(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldLTE(FieldDeletedByUserName, v))
}

// DeletedByUserNameContains applies the Contains predicate on the "DeletedByUserName" field.
func DeletedByUserNameContains(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldContains(FieldDeletedByUserName, v))
}

// DeletedByUserNameHasPrefix applies the HasPrefix predicate on the "DeletedByUserName" field.
func DeletedByUserNameHasPrefix(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldHasPrefix(FieldDeletedByUserName, v))
}

// DeletedByUserNameHasSuffix applies the HasSuffix predicate on the "DeletedByUserName" field.
func DeletedByUserNameHasSuffix(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldHasSuffix(FieldDeletedByUserName, v))
}

// DeletedByUserNameIsNil applies the IsNil predicate on the "DeletedByUserName" field.
func DeletedByUserNameIsNil() predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldIsNull(FieldDeletedByUserName))
}

// DeletedByUserNameNotNil applies the NotNil predicate on the "DeletedByUserName" field.
func DeletedByUserNameNotNil() predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldNotNull(FieldDeletedByUserName))
}

// DeletedByUserNameEqualFold applies the EqualFold predicate on the "DeletedByUserName" field.
func DeletedByUserNameEqualFold(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldEqualFold(FieldDeletedByUserName, v))
}

// DeletedByUserNameContainsFold applies the ContainsFold predicate on the "DeletedByUserName" field.
func DeletedByUserNameContainsFold(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldContainsFold(FieldDeletedByUserName, v))
}

// DeletedByEmpIdEQ applies the EQ predicate on the "DeletedByEmpId" field.
func DeletedByEmpIdEQ(v int64) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldEQ(FieldDeletedByEmpId, v))
}

// DeletedByEmpIdNEQ applies the NEQ predicate on the "DeletedByEmpId" field.
func DeletedByEmpIdNEQ(v int64) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldNEQ(FieldDeletedByEmpId, v))
}

// DeletedByEmpIdIn applies the In predicate on the "DeletedByEmpId" field.
func DeletedByEmpIdIn(vs ...int64) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldIn(FieldDeletedByEmpId, vs...))
}

// DeletedByEmpIdNotIn applies the NotIn predicate on the "DeletedByEmpId" field.
func DeletedByEmpIdNotIn(vs ...int64) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldNotIn(FieldDeletedByEmpId, vs...))
}

// DeletedByEmpIdGT applies the GT predicate on the "DeletedByEmpId" field.
func DeletedByEmpIdGT(v int64) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldGT(FieldDeletedByEmpId, v))
}

// DeletedByEmpIdGTE applies the GTE predicate on the "DeletedByEmpId" field.
func DeletedByEmpIdGTE(v int64) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldGTE(FieldDeletedByEmpId, v))
}

// DeletedByEmpIdLT applies the LT predicate on the "DeletedByEmpId" field.
func DeletedByEmpIdLT(v int64) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldLT(FieldDeletedByEmpId, v))
}

// DeletedByEmpIdLTE applies the LTE predicate on the "DeletedByEmpId" field.
func DeletedByEmpIdLTE(v int64) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldLTE(FieldDeletedByEmpId, v))
}

// DeletedByEmpIdIsNil applies the IsNil predicate on the "DeletedByEmpId" field.
func DeletedByEmpIdIsNil() predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldIsNull(FieldDeletedByEmpId))
}

// DeletedByEmpIdNotNil applies the NotNil predicate on the "DeletedByEmpId" field.
func DeletedByEmpIdNotNil() predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldNotNull(FieldDeletedByEmpId))
}

// DeletedByDesignationEQ applies the EQ predicate on the "DeletedByDesignation" field.
func DeletedByDesignationEQ(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldEQ(FieldDeletedByDesignation, v))
}

// DeletedByDesignationNEQ applies the NEQ predicate on the "DeletedByDesignation" field.
func DeletedByDesignationNEQ(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldNEQ(FieldDeletedByDesignation, v))
}

// DeletedByDesignationIn applies the In predicate on the "DeletedByDesignation" field.
func DeletedByDesignationIn(vs ...string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldIn(FieldDeletedByDesignation, vs...))
}

// DeletedByDesignationNotIn applies the NotIn predicate on the "DeletedByDesignation" field.
func DeletedByDesignationNotIn(vs ...string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldNotIn(FieldDeletedByDesignation, vs...))
}

// DeletedByDesignationGT applies the GT predicate on the "DeletedByDesignation" field.
func DeletedByDesignationGT(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldGT(FieldDeletedByDesignation, v))
}

// DeletedByDesignationGTE applies the GTE predicate on the "DeletedByDesignation" field.
func DeletedByDesignationGTE(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldGTE(FieldDeletedByDesignation, v))
}

// DeletedByDesignationLT applies the LT predicate on the "DeletedByDesignation" field.
func DeletedByDesignationLT(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldLT(FieldDeletedByDesignation, v))
}

// DeletedByDesignationLTE applies the LTE predicate on the "DeletedByDesignation" field.
func DeletedByDesignationLTE(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldLTE(FieldDeletedByDesignation, v))
}

// DeletedByDesignationContains applies the Contains predicate on the "DeletedByDesignation" field.
func DeletedByDesignationContains(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldContains(FieldDeletedByDesignation, v))
}

// DeletedByDesignationHasPrefix applies the HasPrefix predicate on the "DeletedByDesignation" field.
func DeletedByDesignationHasPrefix(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldHasPrefix(FieldDeletedByDesignation, v))
}

// DeletedByDesignationHasSuffix applies the HasSuffix predicate on the "DeletedByDesignation" field.
func DeletedByDesignationHasSuffix(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldHasSuffix(FieldDeletedByDesignation, v))
}

// DeletedByDesignationIsNil applies the IsNil predicate on the "DeletedByDesignation" field.
func DeletedByDesignationIsNil() predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldIsNull(FieldDeletedByDesignation))
}

// DeletedByDesignationNotNil applies the NotNil predicate on the "DeletedByDesignation" field.
func DeletedByDesignationNotNil() predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldNotNull(FieldDeletedByDesignation))
}

// DeletedByDesignationEqualFold applies the EqualFold predicate on the "DeletedByDesignation" field.
func DeletedByDesignationEqualFold(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldEqualFold(FieldDeletedByDesignation, v))
}

// DeletedByDesignationContainsFold applies the ContainsFold predicate on the "DeletedByDesignation" field.
func DeletedByDesignationContainsFold(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldContainsFold(FieldDeletedByDesignation, v))
}

// DeletedDateEQ applies the EQ predicate on the "DeletedDate" field.
func DeletedDateEQ(v time.Time) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldEQ(FieldDeletedDate, v))
}

// DeletedDateNEQ applies the NEQ predicate on the "DeletedDate" field.
func DeletedDateNEQ(v time.Time) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldNEQ(FieldDeletedDate, v))
}

// DeletedDateIn applies the In predicate on the "DeletedDate" field.
func DeletedDateIn(vs ...time.Time) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldIn(FieldDeletedDate, vs...))
}

// DeletedDateNotIn applies the NotIn predicate on the "DeletedDate" field.
func DeletedDateNotIn(vs ...time.Time) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldNotIn(FieldDeletedDate, vs...))
}

// DeletedDateGT applies the GT predicate on the "DeletedDate" field.
func DeletedDateGT(v time.Time) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldGT(FieldDeletedDate, v))
}

// DeletedDateGTE applies the GTE predicate on the "DeletedDate" field.
func DeletedDateGTE(v time.Time) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldGTE(FieldDeletedDate, v))
}

// DeletedDateLT applies the LT predicate on the "DeletedDate" field.
func DeletedDateLT(v time.Time) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldLT(FieldDeletedDate, v))
}

// DeletedDateLTE applies the LTE predicate on the "DeletedDate" field.
func DeletedDateLTE(v time.Time) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldLTE(FieldDeletedDate, v))
}

// DeletedDateIsNil applies the IsNil predicate on the "DeletedDate" field.
func DeletedDateIsNil() predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldIsNull(FieldDeletedDate))
}

// DeletedDateNotNil applies the NotNil predicate on the "DeletedDate" field.
func DeletedDateNotNil() predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldNotNull(FieldDeletedDate))
}

// UpdatedAtEQ applies the EQ predicate on the "UpdatedAt" field.
func UpdatedAtEQ(v time.Time) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "UpdatedAt" field.
func UpdatedAtNEQ(v time.Time) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "UpdatedAt" field.
func UpdatedAtIn(vs ...time.Time) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "UpdatedAt" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "UpdatedAt" field.
func UpdatedAtGT(v time.Time) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "UpdatedAt" field.
func UpdatedAtGTE(v time.Time) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "UpdatedAt" field.
func UpdatedAtLT(v time.Time) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "UpdatedAt" field.
func UpdatedAtLTE(v time.Time) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldLTE(FieldUpdatedAt, v))
}

// UpdatedAtIsNil applies the IsNil predicate on the "UpdatedAt" field.
func UpdatedAtIsNil() predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldIsNull(FieldUpdatedAt))
}

// UpdatedAtNotNil applies the NotNil predicate on the "UpdatedAt" field.
func UpdatedAtNotNil() predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldNotNull(FieldUpdatedAt))
}

// UpdatedByEQ applies the EQ predicate on the "UpdatedBy" field.
func UpdatedByEQ(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldEQ(FieldUpdatedBy, v))
}

// UpdatedByNEQ applies the NEQ predicate on the "UpdatedBy" field.
func UpdatedByNEQ(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldNEQ(FieldUpdatedBy, v))
}

// UpdatedByIn applies the In predicate on the "UpdatedBy" field.
func UpdatedByIn(vs ...string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldIn(FieldUpdatedBy, vs...))
}

// UpdatedByNotIn applies the NotIn predicate on the "UpdatedBy" field.
func UpdatedByNotIn(vs ...string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldNotIn(FieldUpdatedBy, vs...))
}

// UpdatedByGT applies the GT predicate on the "UpdatedBy" field.
func UpdatedByGT(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldGT(FieldUpdatedBy, v))
}

// UpdatedByGTE applies the GTE predicate on the "UpdatedBy" field.
func UpdatedByGTE(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldGTE(FieldUpdatedBy, v))
}

// UpdatedByLT applies the LT predicate on the "UpdatedBy" field.
func UpdatedByLT(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldLT(FieldUpdatedBy, v))
}

// UpdatedByLTE applies the LTE predicate on the "UpdatedBy" field.
func UpdatedByLTE(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldLTE(FieldUpdatedBy, v))
}

// UpdatedByContains applies the Contains predicate on the "UpdatedBy" field.
func UpdatedByContains(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldContains(FieldUpdatedBy, v))
}

// UpdatedByHasPrefix applies the HasPrefix predicate on the "UpdatedBy" field.
func UpdatedByHasPrefix(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldHasPrefix(FieldUpdatedBy, v))
}

// UpdatedByHasSuffix applies the HasSuffix predicate on the "UpdatedBy" field.
func UpdatedByHasSuffix(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldHasSuffix(FieldUpdatedBy, v))
}

// UpdatedByIsNil applies the IsNil predicate on the "UpdatedBy" field.
func UpdatedByIsNil() predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldIsNull(FieldUpdatedBy))
}

// UpdatedByNotNil applies the NotNil predicate on the "UpdatedBy" field.
func UpdatedByNotNil() predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldNotNull(FieldUpdatedBy))
}

// UpdatedByEqualFold applies the EqualFold predicate on the "UpdatedBy" field.
func UpdatedByEqualFold(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldEqualFold(FieldUpdatedBy, v))
}

// UpdatedByContainsFold applies the ContainsFold predicate on the "UpdatedBy" field.
func UpdatedByContainsFold(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldContainsFold(FieldUpdatedBy, v))
}

// SmsOtpEQ applies the EQ predicate on the "SmsOtp" field.
func SmsOtpEQ(v int64) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldEQ(FieldSmsOtp, v))
}

// SmsOtpNEQ applies the NEQ predicate on the "SmsOtp" field.
func SmsOtpNEQ(v int64) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldNEQ(FieldSmsOtp, v))
}

// SmsOtpIn applies the In predicate on the "SmsOtp" field.
func SmsOtpIn(vs ...int64) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldIn(FieldSmsOtp, vs...))
}

// SmsOtpNotIn applies the NotIn predicate on the "SmsOtp" field.
func SmsOtpNotIn(vs ...int64) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldNotIn(FieldSmsOtp, vs...))
}

// SmsOtpGT applies the GT predicate on the "SmsOtp" field.
func SmsOtpGT(v int64) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldGT(FieldSmsOtp, v))
}

// SmsOtpGTE applies the GTE predicate on the "SmsOtp" field.
func SmsOtpGTE(v int64) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldGTE(FieldSmsOtp, v))
}

// SmsOtpLT applies the LT predicate on the "SmsOtp" field.
func SmsOtpLT(v int64) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldLT(FieldSmsOtp, v))
}

// SmsOtpLTE applies the LTE predicate on the "SmsOtp" field.
func SmsOtpLTE(v int64) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldLTE(FieldSmsOtp, v))
}

// SmsOtpIsNil applies the IsNil predicate on the "SmsOtp" field.
func SmsOtpIsNil() predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldIsNull(FieldSmsOtp))
}

// SmsOtpNotNil applies the NotNil predicate on the "SmsOtp" field.
func SmsOtpNotNil() predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldNotNull(FieldSmsOtp))
}

// SmsTriggeredTimeEQ applies the EQ predicate on the "SmsTriggeredTime" field.
func SmsTriggeredTimeEQ(v time.Time) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldEQ(FieldSmsTriggeredTime, v))
}

// SmsTriggeredTimeNEQ applies the NEQ predicate on the "SmsTriggeredTime" field.
func SmsTriggeredTimeNEQ(v time.Time) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldNEQ(FieldSmsTriggeredTime, v))
}

// SmsTriggeredTimeIn applies the In predicate on the "SmsTriggeredTime" field.
func SmsTriggeredTimeIn(vs ...time.Time) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldIn(FieldSmsTriggeredTime, vs...))
}

// SmsTriggeredTimeNotIn applies the NotIn predicate on the "SmsTriggeredTime" field.
func SmsTriggeredTimeNotIn(vs ...time.Time) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldNotIn(FieldSmsTriggeredTime, vs...))
}

// SmsTriggeredTimeGT applies the GT predicate on the "SmsTriggeredTime" field.
func SmsTriggeredTimeGT(v time.Time) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldGT(FieldSmsTriggeredTime, v))
}

// SmsTriggeredTimeGTE applies the GTE predicate on the "SmsTriggeredTime" field.
func SmsTriggeredTimeGTE(v time.Time) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldGTE(FieldSmsTriggeredTime, v))
}

// SmsTriggeredTimeLT applies the LT predicate on the "SmsTriggeredTime" field.
func SmsTriggeredTimeLT(v time.Time) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldLT(FieldSmsTriggeredTime, v))
}

// SmsTriggeredTimeLTE applies the LTE predicate on the "SmsTriggeredTime" field.
func SmsTriggeredTimeLTE(v time.Time) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldLTE(FieldSmsTriggeredTime, v))
}

// SmsTriggeredTimeIsNil applies the IsNil predicate on the "SmsTriggeredTime" field.
func SmsTriggeredTimeIsNil() predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldIsNull(FieldSmsTriggeredTime))
}

// SmsTriggeredTimeNotNil applies the NotNil predicate on the "SmsTriggeredTime" field.
func SmsTriggeredTimeNotNil() predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldNotNull(FieldSmsTriggeredTime))
}

// SmsVerifyStatusEQ applies the EQ predicate on the "SmsVerifyStatus" field.
func SmsVerifyStatusEQ(v bool) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldEQ(FieldSmsVerifyStatus, v))
}

// SmsVerifyStatusNEQ applies the NEQ predicate on the "SmsVerifyStatus" field.
func SmsVerifyStatusNEQ(v bool) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldNEQ(FieldSmsVerifyStatus, v))
}

// EmailOtpEQ applies the EQ predicate on the "EmailOtp" field.
func EmailOtpEQ(v int64) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldEQ(FieldEmailOtp, v))
}

// EmailOtpNEQ applies the NEQ predicate on the "EmailOtp" field.
func EmailOtpNEQ(v int64) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldNEQ(FieldEmailOtp, v))
}

// EmailOtpIn applies the In predicate on the "EmailOtp" field.
func EmailOtpIn(vs ...int64) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldIn(FieldEmailOtp, vs...))
}

// EmailOtpNotIn applies the NotIn predicate on the "EmailOtp" field.
func EmailOtpNotIn(vs ...int64) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldNotIn(FieldEmailOtp, vs...))
}

// EmailOtpGT applies the GT predicate on the "EmailOtp" field.
func EmailOtpGT(v int64) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldGT(FieldEmailOtp, v))
}

// EmailOtpGTE applies the GTE predicate on the "EmailOtp" field.
func EmailOtpGTE(v int64) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldGTE(FieldEmailOtp, v))
}

// EmailOtpLT applies the LT predicate on the "EmailOtp" field.
func EmailOtpLT(v int64) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldLT(FieldEmailOtp, v))
}

// EmailOtpLTE applies the LTE predicate on the "EmailOtp" field.
func EmailOtpLTE(v int64) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldLTE(FieldEmailOtp, v))
}

// EmailOtpIsNil applies the IsNil predicate on the "EmailOtp" field.
func EmailOtpIsNil() predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldIsNull(FieldEmailOtp))
}

// EmailOtpNotNil applies the NotNil predicate on the "EmailOtp" field.
func EmailOtpNotNil() predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldNotNull(FieldEmailOtp))
}

// EmailTriggeredTimeEQ applies the EQ predicate on the "EmailTriggeredTime" field.
func EmailTriggeredTimeEQ(v time.Time) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldEQ(FieldEmailTriggeredTime, v))
}

// EmailTriggeredTimeNEQ applies the NEQ predicate on the "EmailTriggeredTime" field.
func EmailTriggeredTimeNEQ(v time.Time) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldNEQ(FieldEmailTriggeredTime, v))
}

// EmailTriggeredTimeIn applies the In predicate on the "EmailTriggeredTime" field.
func EmailTriggeredTimeIn(vs ...time.Time) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldIn(FieldEmailTriggeredTime, vs...))
}

// EmailTriggeredTimeNotIn applies the NotIn predicate on the "EmailTriggeredTime" field.
func EmailTriggeredTimeNotIn(vs ...time.Time) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldNotIn(FieldEmailTriggeredTime, vs...))
}

// EmailTriggeredTimeGT applies the GT predicate on the "EmailTriggeredTime" field.
func EmailTriggeredTimeGT(v time.Time) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldGT(FieldEmailTriggeredTime, v))
}

// EmailTriggeredTimeGTE applies the GTE predicate on the "EmailTriggeredTime" field.
func EmailTriggeredTimeGTE(v time.Time) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldGTE(FieldEmailTriggeredTime, v))
}

// EmailTriggeredTimeLT applies the LT predicate on the "EmailTriggeredTime" field.
func EmailTriggeredTimeLT(v time.Time) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldLT(FieldEmailTriggeredTime, v))
}

// EmailTriggeredTimeLTE applies the LTE predicate on the "EmailTriggeredTime" field.
func EmailTriggeredTimeLTE(v time.Time) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldLTE(FieldEmailTriggeredTime, v))
}

// EmailTriggeredTimeIsNil applies the IsNil predicate on the "EmailTriggeredTime" field.
func EmailTriggeredTimeIsNil() predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldIsNull(FieldEmailTriggeredTime))
}

// EmailTriggeredTimeNotNil applies the NotNil predicate on the "EmailTriggeredTime" field.
func EmailTriggeredTimeNotNil() predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldNotNull(FieldEmailTriggeredTime))
}

// EmailVerifyStatusEQ applies the EQ predicate on the "EmailVerifyStatus" field.
func EmailVerifyStatusEQ(v bool) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldEQ(FieldEmailVerifyStatus, v))
}

// EmailVerifyStatusNEQ applies the NEQ predicate on the "EmailVerifyStatus" field.
func EmailVerifyStatusNEQ(v bool) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldNEQ(FieldEmailVerifyStatus, v))
}

// FinalSubmitStatusEQ applies the EQ predicate on the "FinalSubmitStatus" field.
func FinalSubmitStatusEQ(v bool) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldEQ(FieldFinalSubmitStatus, v))
}

// FinalSubmitStatusNEQ applies the NEQ predicate on the "FinalSubmitStatus" field.
func FinalSubmitStatusNEQ(v bool) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldNEQ(FieldFinalSubmitStatus, v))
}

// DCInPresentCadreEQ applies the EQ predicate on the "DCInPresentCadre" field.
func DCInPresentCadreEQ(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldEQ(FieldDCInPresentCadre, v))
}

// DCInPresentCadreNEQ applies the NEQ predicate on the "DCInPresentCadre" field.
func DCInPresentCadreNEQ(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldNEQ(FieldDCInPresentCadre, v))
}

// DCInPresentCadreIn applies the In predicate on the "DCInPresentCadre" field.
func DCInPresentCadreIn(vs ...string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldIn(FieldDCInPresentCadre, vs...))
}

// DCInPresentCadreNotIn applies the NotIn predicate on the "DCInPresentCadre" field.
func DCInPresentCadreNotIn(vs ...string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldNotIn(FieldDCInPresentCadre, vs...))
}

// DCInPresentCadreGT applies the GT predicate on the "DCInPresentCadre" field.
func DCInPresentCadreGT(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldGT(FieldDCInPresentCadre, v))
}

// DCInPresentCadreGTE applies the GTE predicate on the "DCInPresentCadre" field.
func DCInPresentCadreGTE(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldGTE(FieldDCInPresentCadre, v))
}

// DCInPresentCadreLT applies the LT predicate on the "DCInPresentCadre" field.
func DCInPresentCadreLT(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldLT(FieldDCInPresentCadre, v))
}

// DCInPresentCadreLTE applies the LTE predicate on the "DCInPresentCadre" field.
func DCInPresentCadreLTE(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldLTE(FieldDCInPresentCadre, v))
}

// DCInPresentCadreContains applies the Contains predicate on the "DCInPresentCadre" field.
func DCInPresentCadreContains(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldContains(FieldDCInPresentCadre, v))
}

// DCInPresentCadreHasPrefix applies the HasPrefix predicate on the "DCInPresentCadre" field.
func DCInPresentCadreHasPrefix(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldHasPrefix(FieldDCInPresentCadre, v))
}

// DCInPresentCadreHasSuffix applies the HasSuffix predicate on the "DCInPresentCadre" field.
func DCInPresentCadreHasSuffix(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldHasSuffix(FieldDCInPresentCadre, v))
}

// DCInPresentCadreIsNil applies the IsNil predicate on the "DCInPresentCadre" field.
func DCInPresentCadreIsNil() predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldIsNull(FieldDCInPresentCadre))
}

// DCInPresentCadreNotNil applies the NotNil predicate on the "DCInPresentCadre" field.
func DCInPresentCadreNotNil() predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldNotNull(FieldDCInPresentCadre))
}

// DCInPresentCadreEqualFold applies the EqualFold predicate on the "DCInPresentCadre" field.
func DCInPresentCadreEqualFold(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldEqualFold(FieldDCInPresentCadre, v))
}

// DCInPresentCadreContainsFold applies the ContainsFold predicate on the "DCInPresentCadre" field.
func DCInPresentCadreContainsFold(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldContainsFold(FieldDCInPresentCadre, v))
}

// CadreEQ applies the EQ predicate on the "Cadre" field.
func CadreEQ(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldEQ(FieldCadre, v))
}

// CadreNEQ applies the NEQ predicate on the "Cadre" field.
func CadreNEQ(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldNEQ(FieldCadre, v))
}

// CadreIn applies the In predicate on the "Cadre" field.
func CadreIn(vs ...string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldIn(FieldCadre, vs...))
}

// CadreNotIn applies the NotIn predicate on the "Cadre" field.
func CadreNotIn(vs ...string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldNotIn(FieldCadre, vs...))
}

// CadreGT applies the GT predicate on the "Cadre" field.
func CadreGT(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldGT(FieldCadre, v))
}

// CadreGTE applies the GTE predicate on the "Cadre" field.
func CadreGTE(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldGTE(FieldCadre, v))
}

// CadreLT applies the LT predicate on the "Cadre" field.
func CadreLT(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldLT(FieldCadre, v))
}

// CadreLTE applies the LTE predicate on the "Cadre" field.
func CadreLTE(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldLTE(FieldCadre, v))
}

// CadreContains applies the Contains predicate on the "Cadre" field.
func CadreContains(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldContains(FieldCadre, v))
}

// CadreHasPrefix applies the HasPrefix predicate on the "Cadre" field.
func CadreHasPrefix(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldHasPrefix(FieldCadre, v))
}

// CadreHasSuffix applies the HasSuffix predicate on the "Cadre" field.
func CadreHasSuffix(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldHasSuffix(FieldCadre, v))
}

// CadreIsNil applies the IsNil predicate on the "Cadre" field.
func CadreIsNil() predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldIsNull(FieldCadre))
}

// CadreNotNil applies the NotNil predicate on the "Cadre" field.
func CadreNotNil() predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldNotNull(FieldCadre))
}

// CadreEqualFold applies the EqualFold predicate on the "Cadre" field.
func CadreEqualFold(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldEqualFold(FieldCadre, v))
}

// CadreContainsFold applies the ContainsFold predicate on the "Cadre" field.
func CadreContainsFold(v string) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(sql.FieldContainsFold(FieldCadre, v))
}

// HasUsermasterRef applies the HasEdge predicate on the "UsermasterRef" edge.
func HasUsermasterRef() predicate.EmployeeMaster {
	return predicate.EmployeeMaster(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, UsermasterRefTable, UsermasterRefColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUsermasterRefWith applies the HasEdge predicate on the "UsermasterRef" edge with a given conditions (other predicates).
func HasUsermasterRefWith(preds ...predicate.UserMaster) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(func(s *sql.Selector) {
		step := newUsermasterRefStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasEmpRef applies the HasEdge predicate on the "Emp_Ref" edge.
func HasEmpRef() predicate.EmployeeMaster {
	return predicate.EmployeeMaster(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, EmpRefTable, EmpRefColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEmpRefWith applies the HasEdge predicate on the "Emp_Ref" edge with a given conditions (other predicates).
func HasEmpRefWith(preds ...predicate.Exam_Applications_PS) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(func(s *sql.Selector) {
		step := newEmpRefStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasLogData applies the HasEdge predicate on the "LogData" edge.
func HasLogData() predicate.EmployeeMaster {
	return predicate.EmployeeMaster(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, LogDataTable, LogDataColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasLogDataWith applies the HasEdge predicate on the "LogData" edge with a given conditions (other predicates).
func HasLogDataWith(preds ...predicate.Logs) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(func(s *sql.Selector) {
		step := newLogDataStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.EmployeeMaster) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.EmployeeMaster) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.EmployeeMaster) predicate.EmployeeMaster {
	return predicate.EmployeeMaster(func(s *sql.Selector) {
		p(s.Not())
	})
}
