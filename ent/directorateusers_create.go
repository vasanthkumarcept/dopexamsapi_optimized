// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"recruit/ent/directorateusers"
	"recruit/ent/employees"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// DirectorateUsersCreate is the builder for creating a DirectorateUsers entity.
type DirectorateUsersCreate struct {
	config
	mutation *DirectorateUsersMutation
	hooks    []Hook
}

// SetRole sets the "Role" field.
func (duc *DirectorateUsersCreate) SetRole(s string) *DirectorateUsersCreate {
	duc.mutation.SetRole(s)
	return duc
}

// SetEmployeedID sets the "EmployeedID" field.
func (duc *DirectorateUsersCreate) SetEmployeedID(i int32) *DirectorateUsersCreate {
	duc.mutation.SetEmployeedID(i)
	return duc
}

// SetEmployeeName sets the "EmployeeName" field.
func (duc *DirectorateUsersCreate) SetEmployeeName(s string) *DirectorateUsersCreate {
	duc.mutation.SetEmployeeName(s)
	return duc
}

// SetEmailId sets the "EmailId" field.
func (duc *DirectorateUsersCreate) SetEmailId(s string) *DirectorateUsersCreate {
	duc.mutation.SetEmailId(s)
	return duc
}

// SetMobileNumber sets the "MobileNumber" field.
func (duc *DirectorateUsersCreate) SetMobileNumber(i int64) *DirectorateUsersCreate {
	duc.mutation.SetMobileNumber(i)
	return duc
}

// SetSequenceNumber sets the "SequenceNumber" field.
func (duc *DirectorateUsersCreate) SetSequenceNumber(i int32) *DirectorateUsersCreate {
	duc.mutation.SetSequenceNumber(i)
	return duc
}

// SetNillableSequenceNumber sets the "SequenceNumber" field if the given value is not nil.
func (duc *DirectorateUsersCreate) SetNillableSequenceNumber(i *int32) *DirectorateUsersCreate {
	if i != nil {
		duc.SetSequenceNumber(*i)
	}
	return duc
}

// SetStatus sets the "Status" field.
func (duc *DirectorateUsersCreate) SetStatus(s string) *DirectorateUsersCreate {
	duc.mutation.SetStatus(s)
	return duc
}

// SetNillableStatus sets the "Status" field if the given value is not nil.
func (duc *DirectorateUsersCreate) SetNillableStatus(s *string) *DirectorateUsersCreate {
	if s != nil {
		duc.SetStatus(*s)
	}
	return duc
}

// SetID sets the "id" field.
func (duc *DirectorateUsersCreate) SetID(i int32) *DirectorateUsersCreate {
	duc.mutation.SetID(i)
	return duc
}

// AddEmployeeUserIDs adds the "employee_user" edge to the Employees entity by IDs.
func (duc *DirectorateUsersCreate) AddEmployeeUserIDs(ids ...int32) *DirectorateUsersCreate {
	duc.mutation.AddEmployeeUserIDs(ids...)
	return duc
}

// AddEmployeeUser adds the "employee_user" edges to the Employees entity.
func (duc *DirectorateUsersCreate) AddEmployeeUser(e ...*Employees) *DirectorateUsersCreate {
	ids := make([]int32, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return duc.AddEmployeeUserIDs(ids...)
}

// Mutation returns the DirectorateUsersMutation object of the builder.
func (duc *DirectorateUsersCreate) Mutation() *DirectorateUsersMutation {
	return duc.mutation
}

// Save creates the DirectorateUsers in the database.
func (duc *DirectorateUsersCreate) Save(ctx context.Context) (*DirectorateUsers, error) {
	duc.defaults()
	return withHooks(ctx, duc.sqlSave, duc.mutation, duc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (duc *DirectorateUsersCreate) SaveX(ctx context.Context) *DirectorateUsers {
	v, err := duc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (duc *DirectorateUsersCreate) Exec(ctx context.Context) error {
	_, err := duc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (duc *DirectorateUsersCreate) ExecX(ctx context.Context) {
	if err := duc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (duc *DirectorateUsersCreate) defaults() {
	if _, ok := duc.mutation.Status(); !ok {
		v := directorateusers.DefaultStatus
		duc.mutation.SetStatus(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (duc *DirectorateUsersCreate) check() error {
	if _, ok := duc.mutation.Role(); !ok {
		return &ValidationError{Name: "Role", err: errors.New(`ent: missing required field "DirectorateUsers.Role"`)}
	}
	if _, ok := duc.mutation.EmployeedID(); !ok {
		return &ValidationError{Name: "EmployeedID", err: errors.New(`ent: missing required field "DirectorateUsers.EmployeedID"`)}
	}
	if _, ok := duc.mutation.EmployeeName(); !ok {
		return &ValidationError{Name: "EmployeeName", err: errors.New(`ent: missing required field "DirectorateUsers.EmployeeName"`)}
	}
	if _, ok := duc.mutation.EmailId(); !ok {
		return &ValidationError{Name: "EmailId", err: errors.New(`ent: missing required field "DirectorateUsers.EmailId"`)}
	}
	if _, ok := duc.mutation.MobileNumber(); !ok {
		return &ValidationError{Name: "MobileNumber", err: errors.New(`ent: missing required field "DirectorateUsers.MobileNumber"`)}
	}
	return nil
}

func (duc *DirectorateUsersCreate) sqlSave(ctx context.Context) (*DirectorateUsers, error) {
	if err := duc.check(); err != nil {
		return nil, err
	}
	_node, _spec := duc.createSpec()
	if err := sqlgraph.CreateNode(ctx, duc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int32(id)
	}
	duc.mutation.id = &_node.ID
	duc.mutation.done = true
	return _node, nil
}

func (duc *DirectorateUsersCreate) createSpec() (*DirectorateUsers, *sqlgraph.CreateSpec) {
	var (
		_node = &DirectorateUsers{config: duc.config}
		_spec = sqlgraph.NewCreateSpec(directorateusers.Table, sqlgraph.NewFieldSpec(directorateusers.FieldID, field.TypeInt32))
	)
	if id, ok := duc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := duc.mutation.Role(); ok {
		_spec.SetField(directorateusers.FieldRole, field.TypeString, value)
		_node.Role = value
	}
	if value, ok := duc.mutation.EmployeedID(); ok {
		_spec.SetField(directorateusers.FieldEmployeedID, field.TypeInt32, value)
		_node.EmployeedID = value
	}
	if value, ok := duc.mutation.EmployeeName(); ok {
		_spec.SetField(directorateusers.FieldEmployeeName, field.TypeString, value)
		_node.EmployeeName = value
	}
	if value, ok := duc.mutation.EmailId(); ok {
		_spec.SetField(directorateusers.FieldEmailId, field.TypeString, value)
		_node.EmailId = value
	}
	if value, ok := duc.mutation.MobileNumber(); ok {
		_spec.SetField(directorateusers.FieldMobileNumber, field.TypeInt64, value)
		_node.MobileNumber = value
	}
	if value, ok := duc.mutation.SequenceNumber(); ok {
		_spec.SetField(directorateusers.FieldSequenceNumber, field.TypeInt32, value)
		_node.SequenceNumber = value
	}
	if value, ok := duc.mutation.Status(); ok {
		_spec.SetField(directorateusers.FieldStatus, field.TypeString, value)
		_node.Status = value
	}
	if nodes := duc.mutation.EmployeeUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   directorateusers.EmployeeUserTable,
			Columns: []string{directorateusers.EmployeeUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employees.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// DirectorateUsersCreateBulk is the builder for creating many DirectorateUsers entities in bulk.
type DirectorateUsersCreateBulk struct {
	config
	builders []*DirectorateUsersCreate
}

// Save creates the DirectorateUsers entities in the database.
func (ducb *DirectorateUsersCreateBulk) Save(ctx context.Context) ([]*DirectorateUsers, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ducb.builders))
	nodes := make([]*DirectorateUsers, len(ducb.builders))
	mutators := make([]Mutator, len(ducb.builders))
	for i := range ducb.builders {
		func(i int, root context.Context) {
			builder := ducb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*DirectorateUsersMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ducb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ducb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ducb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ducb *DirectorateUsersCreateBulk) SaveX(ctx context.Context) []*DirectorateUsers {
	v, err := ducb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ducb *DirectorateUsersCreateBulk) Exec(ctx context.Context) error {
	_, err := ducb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ducb *DirectorateUsersCreateBulk) ExecX(ctx context.Context) {
	if err := ducb.Exec(ctx); err != nil {
		panic(err)
	}
}
