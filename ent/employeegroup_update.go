// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"recruit/ent/employeegroup"
	"recruit/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// EmployeeGroupUpdate is the builder for updating EmployeeGroup entities.
type EmployeeGroupUpdate struct {
	config
	hooks    []Hook
	mutation *EmployeeGroupMutation
}

// Where appends a list predicates to the EmployeeGroupUpdate builder.
func (egu *EmployeeGroupUpdate) Where(ps ...predicate.EmployeeGroup) *EmployeeGroupUpdate {
	egu.mutation.Where(ps...)
	return egu
}

// SetGroupCode sets the "GroupCode" field.
func (egu *EmployeeGroupUpdate) SetGroupCode(s string) *EmployeeGroupUpdate {
	egu.mutation.SetGroupCode(s)
	return egu
}

// SetNillableGroupCode sets the "GroupCode" field if the given value is not nil.
func (egu *EmployeeGroupUpdate) SetNillableGroupCode(s *string) *EmployeeGroupUpdate {
	if s != nil {
		egu.SetGroupCode(*s)
	}
	return egu
}

// ClearGroupCode clears the value of the "GroupCode" field.
func (egu *EmployeeGroupUpdate) ClearGroupCode() *EmployeeGroupUpdate {
	egu.mutation.ClearGroupCode()
	return egu
}

// SetGroupDescription sets the "GroupDescription" field.
func (egu *EmployeeGroupUpdate) SetGroupDescription(s string) *EmployeeGroupUpdate {
	egu.mutation.SetGroupDescription(s)
	return egu
}

// SetNillableGroupDescription sets the "GroupDescription" field if the given value is not nil.
func (egu *EmployeeGroupUpdate) SetNillableGroupDescription(s *string) *EmployeeGroupUpdate {
	if s != nil {
		egu.SetGroupDescription(*s)
	}
	return egu
}

// ClearGroupDescription clears the value of the "GroupDescription" field.
func (egu *EmployeeGroupUpdate) ClearGroupDescription() *EmployeeGroupUpdate {
	egu.mutation.ClearGroupDescription()
	return egu
}

// SetOrderNumber sets the "OrderNumber" field.
func (egu *EmployeeGroupUpdate) SetOrderNumber(s string) *EmployeeGroupUpdate {
	egu.mutation.SetOrderNumber(s)
	return egu
}

// SetNillableOrderNumber sets the "OrderNumber" field if the given value is not nil.
func (egu *EmployeeGroupUpdate) SetNillableOrderNumber(s *string) *EmployeeGroupUpdate {
	if s != nil {
		egu.SetOrderNumber(*s)
	}
	return egu
}

// ClearOrderNumber clears the value of the "OrderNumber" field.
func (egu *EmployeeGroupUpdate) ClearOrderNumber() *EmployeeGroupUpdate {
	egu.mutation.ClearOrderNumber()
	return egu
}

// SetStatus sets the "Status" field.
func (egu *EmployeeGroupUpdate) SetStatus(s string) *EmployeeGroupUpdate {
	egu.mutation.SetStatus(s)
	return egu
}

// SetNillableStatus sets the "Status" field if the given value is not nil.
func (egu *EmployeeGroupUpdate) SetNillableStatus(s *string) *EmployeeGroupUpdate {
	if s != nil {
		egu.SetStatus(*s)
	}
	return egu
}

// ClearStatus clears the value of the "Status" field.
func (egu *EmployeeGroupUpdate) ClearStatus() *EmployeeGroupUpdate {
	egu.mutation.ClearStatus()
	return egu
}

// SetCreatedById sets the "CreatedById" field.
func (egu *EmployeeGroupUpdate) SetCreatedById(i int32) *EmployeeGroupUpdate {
	egu.mutation.ResetCreatedById()
	egu.mutation.SetCreatedById(i)
	return egu
}

// SetNillableCreatedById sets the "CreatedById" field if the given value is not nil.
func (egu *EmployeeGroupUpdate) SetNillableCreatedById(i *int32) *EmployeeGroupUpdate {
	if i != nil {
		egu.SetCreatedById(*i)
	}
	return egu
}

// AddCreatedById adds i to the "CreatedById" field.
func (egu *EmployeeGroupUpdate) AddCreatedById(i int32) *EmployeeGroupUpdate {
	egu.mutation.AddCreatedById(i)
	return egu
}

// ClearCreatedById clears the value of the "CreatedById" field.
func (egu *EmployeeGroupUpdate) ClearCreatedById() *EmployeeGroupUpdate {
	egu.mutation.ClearCreatedById()
	return egu
}

// SetCreatedByUserName sets the "CreatedByUserName" field.
func (egu *EmployeeGroupUpdate) SetCreatedByUserName(s string) *EmployeeGroupUpdate {
	egu.mutation.SetCreatedByUserName(s)
	return egu
}

// SetNillableCreatedByUserName sets the "CreatedByUserName" field if the given value is not nil.
func (egu *EmployeeGroupUpdate) SetNillableCreatedByUserName(s *string) *EmployeeGroupUpdate {
	if s != nil {
		egu.SetCreatedByUserName(*s)
	}
	return egu
}

// ClearCreatedByUserName clears the value of the "CreatedByUserName" field.
func (egu *EmployeeGroupUpdate) ClearCreatedByUserName() *EmployeeGroupUpdate {
	egu.mutation.ClearCreatedByUserName()
	return egu
}

// SetCreatedByEmployeeId sets the "CreatedByEmployeeId" field.
func (egu *EmployeeGroupUpdate) SetCreatedByEmployeeId(s string) *EmployeeGroupUpdate {
	egu.mutation.SetCreatedByEmployeeId(s)
	return egu
}

// SetNillableCreatedByEmployeeId sets the "CreatedByEmployeeId" field if the given value is not nil.
func (egu *EmployeeGroupUpdate) SetNillableCreatedByEmployeeId(s *string) *EmployeeGroupUpdate {
	if s != nil {
		egu.SetCreatedByEmployeeId(*s)
	}
	return egu
}

// ClearCreatedByEmployeeId clears the value of the "CreatedByEmployeeId" field.
func (egu *EmployeeGroupUpdate) ClearCreatedByEmployeeId() *EmployeeGroupUpdate {
	egu.mutation.ClearCreatedByEmployeeId()
	return egu
}

// SetCreatedByDesignation sets the "CreatedByDesignation" field.
func (egu *EmployeeGroupUpdate) SetCreatedByDesignation(s string) *EmployeeGroupUpdate {
	egu.mutation.SetCreatedByDesignation(s)
	return egu
}

// SetNillableCreatedByDesignation sets the "CreatedByDesignation" field if the given value is not nil.
func (egu *EmployeeGroupUpdate) SetNillableCreatedByDesignation(s *string) *EmployeeGroupUpdate {
	if s != nil {
		egu.SetCreatedByDesignation(*s)
	}
	return egu
}

// ClearCreatedByDesignation clears the value of the "CreatedByDesignation" field.
func (egu *EmployeeGroupUpdate) ClearCreatedByDesignation() *EmployeeGroupUpdate {
	egu.mutation.ClearCreatedByDesignation()
	return egu
}

// SetCreatedDate sets the "CreatedDate" field.
func (egu *EmployeeGroupUpdate) SetCreatedDate(t time.Time) *EmployeeGroupUpdate {
	egu.mutation.SetCreatedDate(t)
	return egu
}

// SetNillableCreatedDate sets the "CreatedDate" field if the given value is not nil.
func (egu *EmployeeGroupUpdate) SetNillableCreatedDate(t *time.Time) *EmployeeGroupUpdate {
	if t != nil {
		egu.SetCreatedDate(*t)
	}
	return egu
}

// ClearCreatedDate clears the value of the "CreatedDate" field.
func (egu *EmployeeGroupUpdate) ClearCreatedDate() *EmployeeGroupUpdate {
	egu.mutation.ClearCreatedDate()
	return egu
}

// SetVerifiedById sets the "VerifiedById" field.
func (egu *EmployeeGroupUpdate) SetVerifiedById(i int64) *EmployeeGroupUpdate {
	egu.mutation.ResetVerifiedById()
	egu.mutation.SetVerifiedById(i)
	return egu
}

// SetNillableVerifiedById sets the "VerifiedById" field if the given value is not nil.
func (egu *EmployeeGroupUpdate) SetNillableVerifiedById(i *int64) *EmployeeGroupUpdate {
	if i != nil {
		egu.SetVerifiedById(*i)
	}
	return egu
}

// AddVerifiedById adds i to the "VerifiedById" field.
func (egu *EmployeeGroupUpdate) AddVerifiedById(i int64) *EmployeeGroupUpdate {
	egu.mutation.AddVerifiedById(i)
	return egu
}

// ClearVerifiedById clears the value of the "VerifiedById" field.
func (egu *EmployeeGroupUpdate) ClearVerifiedById() *EmployeeGroupUpdate {
	egu.mutation.ClearVerifiedById()
	return egu
}

// SetVerifiedByUserName sets the "VerifiedByUserName" field.
func (egu *EmployeeGroupUpdate) SetVerifiedByUserName(s string) *EmployeeGroupUpdate {
	egu.mutation.SetVerifiedByUserName(s)
	return egu
}

// SetNillableVerifiedByUserName sets the "VerifiedByUserName" field if the given value is not nil.
func (egu *EmployeeGroupUpdate) SetNillableVerifiedByUserName(s *string) *EmployeeGroupUpdate {
	if s != nil {
		egu.SetVerifiedByUserName(*s)
	}
	return egu
}

// ClearVerifiedByUserName clears the value of the "VerifiedByUserName" field.
func (egu *EmployeeGroupUpdate) ClearVerifiedByUserName() *EmployeeGroupUpdate {
	egu.mutation.ClearVerifiedByUserName()
	return egu
}

// SetVerifiedByEmployeeId sets the "VerifiedByEmployeeId" field.
func (egu *EmployeeGroupUpdate) SetVerifiedByEmployeeId(s string) *EmployeeGroupUpdate {
	egu.mutation.SetVerifiedByEmployeeId(s)
	return egu
}

// SetNillableVerifiedByEmployeeId sets the "VerifiedByEmployeeId" field if the given value is not nil.
func (egu *EmployeeGroupUpdate) SetNillableVerifiedByEmployeeId(s *string) *EmployeeGroupUpdate {
	if s != nil {
		egu.SetVerifiedByEmployeeId(*s)
	}
	return egu
}

// ClearVerifiedByEmployeeId clears the value of the "VerifiedByEmployeeId" field.
func (egu *EmployeeGroupUpdate) ClearVerifiedByEmployeeId() *EmployeeGroupUpdate {
	egu.mutation.ClearVerifiedByEmployeeId()
	return egu
}

// SetVerifiedByDesignation sets the "VerifiedByDesignation" field.
func (egu *EmployeeGroupUpdate) SetVerifiedByDesignation(s string) *EmployeeGroupUpdate {
	egu.mutation.SetVerifiedByDesignation(s)
	return egu
}

// SetNillableVerifiedByDesignation sets the "VerifiedByDesignation" field if the given value is not nil.
func (egu *EmployeeGroupUpdate) SetNillableVerifiedByDesignation(s *string) *EmployeeGroupUpdate {
	if s != nil {
		egu.SetVerifiedByDesignation(*s)
	}
	return egu
}

// ClearVerifiedByDesignation clears the value of the "VerifiedByDesignation" field.
func (egu *EmployeeGroupUpdate) ClearVerifiedByDesignation() *EmployeeGroupUpdate {
	egu.mutation.ClearVerifiedByDesignation()
	return egu
}

// SetVerifiedDate sets the "VerifiedDate" field.
func (egu *EmployeeGroupUpdate) SetVerifiedDate(t time.Time) *EmployeeGroupUpdate {
	egu.mutation.SetVerifiedDate(t)
	return egu
}

// SetNillableVerifiedDate sets the "VerifiedDate" field if the given value is not nil.
func (egu *EmployeeGroupUpdate) SetNillableVerifiedDate(t *time.Time) *EmployeeGroupUpdate {
	if t != nil {
		egu.SetVerifiedDate(*t)
	}
	return egu
}

// ClearVerifiedDate clears the value of the "VerifiedDate" field.
func (egu *EmployeeGroupUpdate) ClearVerifiedDate() *EmployeeGroupUpdate {
	egu.mutation.ClearVerifiedDate()
	return egu
}

// SetDeletedById sets the "DeletedById" field.
func (egu *EmployeeGroupUpdate) SetDeletedById(i int64) *EmployeeGroupUpdate {
	egu.mutation.ResetDeletedById()
	egu.mutation.SetDeletedById(i)
	return egu
}

// SetNillableDeletedById sets the "DeletedById" field if the given value is not nil.
func (egu *EmployeeGroupUpdate) SetNillableDeletedById(i *int64) *EmployeeGroupUpdate {
	if i != nil {
		egu.SetDeletedById(*i)
	}
	return egu
}

// AddDeletedById adds i to the "DeletedById" field.
func (egu *EmployeeGroupUpdate) AddDeletedById(i int64) *EmployeeGroupUpdate {
	egu.mutation.AddDeletedById(i)
	return egu
}

// ClearDeletedById clears the value of the "DeletedById" field.
func (egu *EmployeeGroupUpdate) ClearDeletedById() *EmployeeGroupUpdate {
	egu.mutation.ClearDeletedById()
	return egu
}

// SetDeletedByUserName sets the "DeletedByUserName" field.
func (egu *EmployeeGroupUpdate) SetDeletedByUserName(s string) *EmployeeGroupUpdate {
	egu.mutation.SetDeletedByUserName(s)
	return egu
}

// SetNillableDeletedByUserName sets the "DeletedByUserName" field if the given value is not nil.
func (egu *EmployeeGroupUpdate) SetNillableDeletedByUserName(s *string) *EmployeeGroupUpdate {
	if s != nil {
		egu.SetDeletedByUserName(*s)
	}
	return egu
}

// ClearDeletedByUserName clears the value of the "DeletedByUserName" field.
func (egu *EmployeeGroupUpdate) ClearDeletedByUserName() *EmployeeGroupUpdate {
	egu.mutation.ClearDeletedByUserName()
	return egu
}

// SetDeletedByEmployeeId sets the "DeletedByEmployeeId" field.
func (egu *EmployeeGroupUpdate) SetDeletedByEmployeeId(s string) *EmployeeGroupUpdate {
	egu.mutation.SetDeletedByEmployeeId(s)
	return egu
}

// SetNillableDeletedByEmployeeId sets the "DeletedByEmployeeId" field if the given value is not nil.
func (egu *EmployeeGroupUpdate) SetNillableDeletedByEmployeeId(s *string) *EmployeeGroupUpdate {
	if s != nil {
		egu.SetDeletedByEmployeeId(*s)
	}
	return egu
}

// ClearDeletedByEmployeeId clears the value of the "DeletedByEmployeeId" field.
func (egu *EmployeeGroupUpdate) ClearDeletedByEmployeeId() *EmployeeGroupUpdate {
	egu.mutation.ClearDeletedByEmployeeId()
	return egu
}

// SetDeletedByDesignation sets the "DeletedByDesignation" field.
func (egu *EmployeeGroupUpdate) SetDeletedByDesignation(s string) *EmployeeGroupUpdate {
	egu.mutation.SetDeletedByDesignation(s)
	return egu
}

// SetNillableDeletedByDesignation sets the "DeletedByDesignation" field if the given value is not nil.
func (egu *EmployeeGroupUpdate) SetNillableDeletedByDesignation(s *string) *EmployeeGroupUpdate {
	if s != nil {
		egu.SetDeletedByDesignation(*s)
	}
	return egu
}

// ClearDeletedByDesignation clears the value of the "DeletedByDesignation" field.
func (egu *EmployeeGroupUpdate) ClearDeletedByDesignation() *EmployeeGroupUpdate {
	egu.mutation.ClearDeletedByDesignation()
	return egu
}

// SetDeletedDate sets the "DeletedDate" field.
func (egu *EmployeeGroupUpdate) SetDeletedDate(t time.Time) *EmployeeGroupUpdate {
	egu.mutation.SetDeletedDate(t)
	return egu
}

// SetNillableDeletedDate sets the "DeletedDate" field if the given value is not nil.
func (egu *EmployeeGroupUpdate) SetNillableDeletedDate(t *time.Time) *EmployeeGroupUpdate {
	if t != nil {
		egu.SetDeletedDate(*t)
	}
	return egu
}

// ClearDeletedDate clears the value of the "DeletedDate" field.
func (egu *EmployeeGroupUpdate) ClearDeletedDate() *EmployeeGroupUpdate {
	egu.mutation.ClearDeletedDate()
	return egu
}

// Mutation returns the EmployeeGroupMutation object of the builder.
func (egu *EmployeeGroupUpdate) Mutation() *EmployeeGroupMutation {
	return egu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (egu *EmployeeGroupUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, egu.sqlSave, egu.mutation, egu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (egu *EmployeeGroupUpdate) SaveX(ctx context.Context) int {
	affected, err := egu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (egu *EmployeeGroupUpdate) Exec(ctx context.Context) error {
	_, err := egu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (egu *EmployeeGroupUpdate) ExecX(ctx context.Context) {
	if err := egu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (egu *EmployeeGroupUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(employeegroup.Table, employeegroup.Columns, sqlgraph.NewFieldSpec(employeegroup.FieldID, field.TypeInt32))
	if ps := egu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := egu.mutation.GroupCode(); ok {
		_spec.SetField(employeegroup.FieldGroupCode, field.TypeString, value)
	}
	if egu.mutation.GroupCodeCleared() {
		_spec.ClearField(employeegroup.FieldGroupCode, field.TypeString)
	}
	if value, ok := egu.mutation.GroupDescription(); ok {
		_spec.SetField(employeegroup.FieldGroupDescription, field.TypeString, value)
	}
	if egu.mutation.GroupDescriptionCleared() {
		_spec.ClearField(employeegroup.FieldGroupDescription, field.TypeString)
	}
	if value, ok := egu.mutation.OrderNumber(); ok {
		_spec.SetField(employeegroup.FieldOrderNumber, field.TypeString, value)
	}
	if egu.mutation.OrderNumberCleared() {
		_spec.ClearField(employeegroup.FieldOrderNumber, field.TypeString)
	}
	if value, ok := egu.mutation.Status(); ok {
		_spec.SetField(employeegroup.FieldStatus, field.TypeString, value)
	}
	if egu.mutation.StatusCleared() {
		_spec.ClearField(employeegroup.FieldStatus, field.TypeString)
	}
	if value, ok := egu.mutation.CreatedById(); ok {
		_spec.SetField(employeegroup.FieldCreatedById, field.TypeInt32, value)
	}
	if value, ok := egu.mutation.AddedCreatedById(); ok {
		_spec.AddField(employeegroup.FieldCreatedById, field.TypeInt32, value)
	}
	if egu.mutation.CreatedByIdCleared() {
		_spec.ClearField(employeegroup.FieldCreatedById, field.TypeInt32)
	}
	if value, ok := egu.mutation.CreatedByUserName(); ok {
		_spec.SetField(employeegroup.FieldCreatedByUserName, field.TypeString, value)
	}
	if egu.mutation.CreatedByUserNameCleared() {
		_spec.ClearField(employeegroup.FieldCreatedByUserName, field.TypeString)
	}
	if value, ok := egu.mutation.CreatedByEmployeeId(); ok {
		_spec.SetField(employeegroup.FieldCreatedByEmployeeId, field.TypeString, value)
	}
	if egu.mutation.CreatedByEmployeeIdCleared() {
		_spec.ClearField(employeegroup.FieldCreatedByEmployeeId, field.TypeString)
	}
	if value, ok := egu.mutation.CreatedByDesignation(); ok {
		_spec.SetField(employeegroup.FieldCreatedByDesignation, field.TypeString, value)
	}
	if egu.mutation.CreatedByDesignationCleared() {
		_spec.ClearField(employeegroup.FieldCreatedByDesignation, field.TypeString)
	}
	if value, ok := egu.mutation.CreatedDate(); ok {
		_spec.SetField(employeegroup.FieldCreatedDate, field.TypeTime, value)
	}
	if egu.mutation.CreatedDateCleared() {
		_spec.ClearField(employeegroup.FieldCreatedDate, field.TypeTime)
	}
	if value, ok := egu.mutation.VerifiedById(); ok {
		_spec.SetField(employeegroup.FieldVerifiedById, field.TypeInt64, value)
	}
	if value, ok := egu.mutation.AddedVerifiedById(); ok {
		_spec.AddField(employeegroup.FieldVerifiedById, field.TypeInt64, value)
	}
	if egu.mutation.VerifiedByIdCleared() {
		_spec.ClearField(employeegroup.FieldVerifiedById, field.TypeInt64)
	}
	if value, ok := egu.mutation.VerifiedByUserName(); ok {
		_spec.SetField(employeegroup.FieldVerifiedByUserName, field.TypeString, value)
	}
	if egu.mutation.VerifiedByUserNameCleared() {
		_spec.ClearField(employeegroup.FieldVerifiedByUserName, field.TypeString)
	}
	if value, ok := egu.mutation.VerifiedByEmployeeId(); ok {
		_spec.SetField(employeegroup.FieldVerifiedByEmployeeId, field.TypeString, value)
	}
	if egu.mutation.VerifiedByEmployeeIdCleared() {
		_spec.ClearField(employeegroup.FieldVerifiedByEmployeeId, field.TypeString)
	}
	if value, ok := egu.mutation.VerifiedByDesignation(); ok {
		_spec.SetField(employeegroup.FieldVerifiedByDesignation, field.TypeString, value)
	}
	if egu.mutation.VerifiedByDesignationCleared() {
		_spec.ClearField(employeegroup.FieldVerifiedByDesignation, field.TypeString)
	}
	if value, ok := egu.mutation.VerifiedDate(); ok {
		_spec.SetField(employeegroup.FieldVerifiedDate, field.TypeTime, value)
	}
	if egu.mutation.VerifiedDateCleared() {
		_spec.ClearField(employeegroup.FieldVerifiedDate, field.TypeTime)
	}
	if value, ok := egu.mutation.DeletedById(); ok {
		_spec.SetField(employeegroup.FieldDeletedById, field.TypeInt64, value)
	}
	if value, ok := egu.mutation.AddedDeletedById(); ok {
		_spec.AddField(employeegroup.FieldDeletedById, field.TypeInt64, value)
	}
	if egu.mutation.DeletedByIdCleared() {
		_spec.ClearField(employeegroup.FieldDeletedById, field.TypeInt64)
	}
	if value, ok := egu.mutation.DeletedByUserName(); ok {
		_spec.SetField(employeegroup.FieldDeletedByUserName, field.TypeString, value)
	}
	if egu.mutation.DeletedByUserNameCleared() {
		_spec.ClearField(employeegroup.FieldDeletedByUserName, field.TypeString)
	}
	if value, ok := egu.mutation.DeletedByEmployeeId(); ok {
		_spec.SetField(employeegroup.FieldDeletedByEmployeeId, field.TypeString, value)
	}
	if egu.mutation.DeletedByEmployeeIdCleared() {
		_spec.ClearField(employeegroup.FieldDeletedByEmployeeId, field.TypeString)
	}
	if value, ok := egu.mutation.DeletedByDesignation(); ok {
		_spec.SetField(employeegroup.FieldDeletedByDesignation, field.TypeString, value)
	}
	if egu.mutation.DeletedByDesignationCleared() {
		_spec.ClearField(employeegroup.FieldDeletedByDesignation, field.TypeString)
	}
	if value, ok := egu.mutation.DeletedDate(); ok {
		_spec.SetField(employeegroup.FieldDeletedDate, field.TypeTime, value)
	}
	if egu.mutation.DeletedDateCleared() {
		_spec.ClearField(employeegroup.FieldDeletedDate, field.TypeTime)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, egu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{employeegroup.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	egu.mutation.done = true
	return n, nil
}

// EmployeeGroupUpdateOne is the builder for updating a single EmployeeGroup entity.
type EmployeeGroupUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *EmployeeGroupMutation
}

// SetGroupCode sets the "GroupCode" field.
func (eguo *EmployeeGroupUpdateOne) SetGroupCode(s string) *EmployeeGroupUpdateOne {
	eguo.mutation.SetGroupCode(s)
	return eguo
}

// SetNillableGroupCode sets the "GroupCode" field if the given value is not nil.
func (eguo *EmployeeGroupUpdateOne) SetNillableGroupCode(s *string) *EmployeeGroupUpdateOne {
	if s != nil {
		eguo.SetGroupCode(*s)
	}
	return eguo
}

// ClearGroupCode clears the value of the "GroupCode" field.
func (eguo *EmployeeGroupUpdateOne) ClearGroupCode() *EmployeeGroupUpdateOne {
	eguo.mutation.ClearGroupCode()
	return eguo
}

// SetGroupDescription sets the "GroupDescription" field.
func (eguo *EmployeeGroupUpdateOne) SetGroupDescription(s string) *EmployeeGroupUpdateOne {
	eguo.mutation.SetGroupDescription(s)
	return eguo
}

// SetNillableGroupDescription sets the "GroupDescription" field if the given value is not nil.
func (eguo *EmployeeGroupUpdateOne) SetNillableGroupDescription(s *string) *EmployeeGroupUpdateOne {
	if s != nil {
		eguo.SetGroupDescription(*s)
	}
	return eguo
}

// ClearGroupDescription clears the value of the "GroupDescription" field.
func (eguo *EmployeeGroupUpdateOne) ClearGroupDescription() *EmployeeGroupUpdateOne {
	eguo.mutation.ClearGroupDescription()
	return eguo
}

// SetOrderNumber sets the "OrderNumber" field.
func (eguo *EmployeeGroupUpdateOne) SetOrderNumber(s string) *EmployeeGroupUpdateOne {
	eguo.mutation.SetOrderNumber(s)
	return eguo
}

// SetNillableOrderNumber sets the "OrderNumber" field if the given value is not nil.
func (eguo *EmployeeGroupUpdateOne) SetNillableOrderNumber(s *string) *EmployeeGroupUpdateOne {
	if s != nil {
		eguo.SetOrderNumber(*s)
	}
	return eguo
}

// ClearOrderNumber clears the value of the "OrderNumber" field.
func (eguo *EmployeeGroupUpdateOne) ClearOrderNumber() *EmployeeGroupUpdateOne {
	eguo.mutation.ClearOrderNumber()
	return eguo
}

// SetStatus sets the "Status" field.
func (eguo *EmployeeGroupUpdateOne) SetStatus(s string) *EmployeeGroupUpdateOne {
	eguo.mutation.SetStatus(s)
	return eguo
}

// SetNillableStatus sets the "Status" field if the given value is not nil.
func (eguo *EmployeeGroupUpdateOne) SetNillableStatus(s *string) *EmployeeGroupUpdateOne {
	if s != nil {
		eguo.SetStatus(*s)
	}
	return eguo
}

// ClearStatus clears the value of the "Status" field.
func (eguo *EmployeeGroupUpdateOne) ClearStatus() *EmployeeGroupUpdateOne {
	eguo.mutation.ClearStatus()
	return eguo
}

// SetCreatedById sets the "CreatedById" field.
func (eguo *EmployeeGroupUpdateOne) SetCreatedById(i int32) *EmployeeGroupUpdateOne {
	eguo.mutation.ResetCreatedById()
	eguo.mutation.SetCreatedById(i)
	return eguo
}

// SetNillableCreatedById sets the "CreatedById" field if the given value is not nil.
func (eguo *EmployeeGroupUpdateOne) SetNillableCreatedById(i *int32) *EmployeeGroupUpdateOne {
	if i != nil {
		eguo.SetCreatedById(*i)
	}
	return eguo
}

// AddCreatedById adds i to the "CreatedById" field.
func (eguo *EmployeeGroupUpdateOne) AddCreatedById(i int32) *EmployeeGroupUpdateOne {
	eguo.mutation.AddCreatedById(i)
	return eguo
}

// ClearCreatedById clears the value of the "CreatedById" field.
func (eguo *EmployeeGroupUpdateOne) ClearCreatedById() *EmployeeGroupUpdateOne {
	eguo.mutation.ClearCreatedById()
	return eguo
}

// SetCreatedByUserName sets the "CreatedByUserName" field.
func (eguo *EmployeeGroupUpdateOne) SetCreatedByUserName(s string) *EmployeeGroupUpdateOne {
	eguo.mutation.SetCreatedByUserName(s)
	return eguo
}

// SetNillableCreatedByUserName sets the "CreatedByUserName" field if the given value is not nil.
func (eguo *EmployeeGroupUpdateOne) SetNillableCreatedByUserName(s *string) *EmployeeGroupUpdateOne {
	if s != nil {
		eguo.SetCreatedByUserName(*s)
	}
	return eguo
}

// ClearCreatedByUserName clears the value of the "CreatedByUserName" field.
func (eguo *EmployeeGroupUpdateOne) ClearCreatedByUserName() *EmployeeGroupUpdateOne {
	eguo.mutation.ClearCreatedByUserName()
	return eguo
}

// SetCreatedByEmployeeId sets the "CreatedByEmployeeId" field.
func (eguo *EmployeeGroupUpdateOne) SetCreatedByEmployeeId(s string) *EmployeeGroupUpdateOne {
	eguo.mutation.SetCreatedByEmployeeId(s)
	return eguo
}

// SetNillableCreatedByEmployeeId sets the "CreatedByEmployeeId" field if the given value is not nil.
func (eguo *EmployeeGroupUpdateOne) SetNillableCreatedByEmployeeId(s *string) *EmployeeGroupUpdateOne {
	if s != nil {
		eguo.SetCreatedByEmployeeId(*s)
	}
	return eguo
}

// ClearCreatedByEmployeeId clears the value of the "CreatedByEmployeeId" field.
func (eguo *EmployeeGroupUpdateOne) ClearCreatedByEmployeeId() *EmployeeGroupUpdateOne {
	eguo.mutation.ClearCreatedByEmployeeId()
	return eguo
}

// SetCreatedByDesignation sets the "CreatedByDesignation" field.
func (eguo *EmployeeGroupUpdateOne) SetCreatedByDesignation(s string) *EmployeeGroupUpdateOne {
	eguo.mutation.SetCreatedByDesignation(s)
	return eguo
}

// SetNillableCreatedByDesignation sets the "CreatedByDesignation" field if the given value is not nil.
func (eguo *EmployeeGroupUpdateOne) SetNillableCreatedByDesignation(s *string) *EmployeeGroupUpdateOne {
	if s != nil {
		eguo.SetCreatedByDesignation(*s)
	}
	return eguo
}

// ClearCreatedByDesignation clears the value of the "CreatedByDesignation" field.
func (eguo *EmployeeGroupUpdateOne) ClearCreatedByDesignation() *EmployeeGroupUpdateOne {
	eguo.mutation.ClearCreatedByDesignation()
	return eguo
}

// SetCreatedDate sets the "CreatedDate" field.
func (eguo *EmployeeGroupUpdateOne) SetCreatedDate(t time.Time) *EmployeeGroupUpdateOne {
	eguo.mutation.SetCreatedDate(t)
	return eguo
}

// SetNillableCreatedDate sets the "CreatedDate" field if the given value is not nil.
func (eguo *EmployeeGroupUpdateOne) SetNillableCreatedDate(t *time.Time) *EmployeeGroupUpdateOne {
	if t != nil {
		eguo.SetCreatedDate(*t)
	}
	return eguo
}

// ClearCreatedDate clears the value of the "CreatedDate" field.
func (eguo *EmployeeGroupUpdateOne) ClearCreatedDate() *EmployeeGroupUpdateOne {
	eguo.mutation.ClearCreatedDate()
	return eguo
}

// SetVerifiedById sets the "VerifiedById" field.
func (eguo *EmployeeGroupUpdateOne) SetVerifiedById(i int64) *EmployeeGroupUpdateOne {
	eguo.mutation.ResetVerifiedById()
	eguo.mutation.SetVerifiedById(i)
	return eguo
}

// SetNillableVerifiedById sets the "VerifiedById" field if the given value is not nil.
func (eguo *EmployeeGroupUpdateOne) SetNillableVerifiedById(i *int64) *EmployeeGroupUpdateOne {
	if i != nil {
		eguo.SetVerifiedById(*i)
	}
	return eguo
}

// AddVerifiedById adds i to the "VerifiedById" field.
func (eguo *EmployeeGroupUpdateOne) AddVerifiedById(i int64) *EmployeeGroupUpdateOne {
	eguo.mutation.AddVerifiedById(i)
	return eguo
}

// ClearVerifiedById clears the value of the "VerifiedById" field.
func (eguo *EmployeeGroupUpdateOne) ClearVerifiedById() *EmployeeGroupUpdateOne {
	eguo.mutation.ClearVerifiedById()
	return eguo
}

// SetVerifiedByUserName sets the "VerifiedByUserName" field.
func (eguo *EmployeeGroupUpdateOne) SetVerifiedByUserName(s string) *EmployeeGroupUpdateOne {
	eguo.mutation.SetVerifiedByUserName(s)
	return eguo
}

// SetNillableVerifiedByUserName sets the "VerifiedByUserName" field if the given value is not nil.
func (eguo *EmployeeGroupUpdateOne) SetNillableVerifiedByUserName(s *string) *EmployeeGroupUpdateOne {
	if s != nil {
		eguo.SetVerifiedByUserName(*s)
	}
	return eguo
}

// ClearVerifiedByUserName clears the value of the "VerifiedByUserName" field.
func (eguo *EmployeeGroupUpdateOne) ClearVerifiedByUserName() *EmployeeGroupUpdateOne {
	eguo.mutation.ClearVerifiedByUserName()
	return eguo
}

// SetVerifiedByEmployeeId sets the "VerifiedByEmployeeId" field.
func (eguo *EmployeeGroupUpdateOne) SetVerifiedByEmployeeId(s string) *EmployeeGroupUpdateOne {
	eguo.mutation.SetVerifiedByEmployeeId(s)
	return eguo
}

// SetNillableVerifiedByEmployeeId sets the "VerifiedByEmployeeId" field if the given value is not nil.
func (eguo *EmployeeGroupUpdateOne) SetNillableVerifiedByEmployeeId(s *string) *EmployeeGroupUpdateOne {
	if s != nil {
		eguo.SetVerifiedByEmployeeId(*s)
	}
	return eguo
}

// ClearVerifiedByEmployeeId clears the value of the "VerifiedByEmployeeId" field.
func (eguo *EmployeeGroupUpdateOne) ClearVerifiedByEmployeeId() *EmployeeGroupUpdateOne {
	eguo.mutation.ClearVerifiedByEmployeeId()
	return eguo
}

// SetVerifiedByDesignation sets the "VerifiedByDesignation" field.
func (eguo *EmployeeGroupUpdateOne) SetVerifiedByDesignation(s string) *EmployeeGroupUpdateOne {
	eguo.mutation.SetVerifiedByDesignation(s)
	return eguo
}

// SetNillableVerifiedByDesignation sets the "VerifiedByDesignation" field if the given value is not nil.
func (eguo *EmployeeGroupUpdateOne) SetNillableVerifiedByDesignation(s *string) *EmployeeGroupUpdateOne {
	if s != nil {
		eguo.SetVerifiedByDesignation(*s)
	}
	return eguo
}

// ClearVerifiedByDesignation clears the value of the "VerifiedByDesignation" field.
func (eguo *EmployeeGroupUpdateOne) ClearVerifiedByDesignation() *EmployeeGroupUpdateOne {
	eguo.mutation.ClearVerifiedByDesignation()
	return eguo
}

// SetVerifiedDate sets the "VerifiedDate" field.
func (eguo *EmployeeGroupUpdateOne) SetVerifiedDate(t time.Time) *EmployeeGroupUpdateOne {
	eguo.mutation.SetVerifiedDate(t)
	return eguo
}

// SetNillableVerifiedDate sets the "VerifiedDate" field if the given value is not nil.
func (eguo *EmployeeGroupUpdateOne) SetNillableVerifiedDate(t *time.Time) *EmployeeGroupUpdateOne {
	if t != nil {
		eguo.SetVerifiedDate(*t)
	}
	return eguo
}

// ClearVerifiedDate clears the value of the "VerifiedDate" field.
func (eguo *EmployeeGroupUpdateOne) ClearVerifiedDate() *EmployeeGroupUpdateOne {
	eguo.mutation.ClearVerifiedDate()
	return eguo
}

// SetDeletedById sets the "DeletedById" field.
func (eguo *EmployeeGroupUpdateOne) SetDeletedById(i int64) *EmployeeGroupUpdateOne {
	eguo.mutation.ResetDeletedById()
	eguo.mutation.SetDeletedById(i)
	return eguo
}

// SetNillableDeletedById sets the "DeletedById" field if the given value is not nil.
func (eguo *EmployeeGroupUpdateOne) SetNillableDeletedById(i *int64) *EmployeeGroupUpdateOne {
	if i != nil {
		eguo.SetDeletedById(*i)
	}
	return eguo
}

// AddDeletedById adds i to the "DeletedById" field.
func (eguo *EmployeeGroupUpdateOne) AddDeletedById(i int64) *EmployeeGroupUpdateOne {
	eguo.mutation.AddDeletedById(i)
	return eguo
}

// ClearDeletedById clears the value of the "DeletedById" field.
func (eguo *EmployeeGroupUpdateOne) ClearDeletedById() *EmployeeGroupUpdateOne {
	eguo.mutation.ClearDeletedById()
	return eguo
}

// SetDeletedByUserName sets the "DeletedByUserName" field.
func (eguo *EmployeeGroupUpdateOne) SetDeletedByUserName(s string) *EmployeeGroupUpdateOne {
	eguo.mutation.SetDeletedByUserName(s)
	return eguo
}

// SetNillableDeletedByUserName sets the "DeletedByUserName" field if the given value is not nil.
func (eguo *EmployeeGroupUpdateOne) SetNillableDeletedByUserName(s *string) *EmployeeGroupUpdateOne {
	if s != nil {
		eguo.SetDeletedByUserName(*s)
	}
	return eguo
}

// ClearDeletedByUserName clears the value of the "DeletedByUserName" field.
func (eguo *EmployeeGroupUpdateOne) ClearDeletedByUserName() *EmployeeGroupUpdateOne {
	eguo.mutation.ClearDeletedByUserName()
	return eguo
}

// SetDeletedByEmployeeId sets the "DeletedByEmployeeId" field.
func (eguo *EmployeeGroupUpdateOne) SetDeletedByEmployeeId(s string) *EmployeeGroupUpdateOne {
	eguo.mutation.SetDeletedByEmployeeId(s)
	return eguo
}

// SetNillableDeletedByEmployeeId sets the "DeletedByEmployeeId" field if the given value is not nil.
func (eguo *EmployeeGroupUpdateOne) SetNillableDeletedByEmployeeId(s *string) *EmployeeGroupUpdateOne {
	if s != nil {
		eguo.SetDeletedByEmployeeId(*s)
	}
	return eguo
}

// ClearDeletedByEmployeeId clears the value of the "DeletedByEmployeeId" field.
func (eguo *EmployeeGroupUpdateOne) ClearDeletedByEmployeeId() *EmployeeGroupUpdateOne {
	eguo.mutation.ClearDeletedByEmployeeId()
	return eguo
}

// SetDeletedByDesignation sets the "DeletedByDesignation" field.
func (eguo *EmployeeGroupUpdateOne) SetDeletedByDesignation(s string) *EmployeeGroupUpdateOne {
	eguo.mutation.SetDeletedByDesignation(s)
	return eguo
}

// SetNillableDeletedByDesignation sets the "DeletedByDesignation" field if the given value is not nil.
func (eguo *EmployeeGroupUpdateOne) SetNillableDeletedByDesignation(s *string) *EmployeeGroupUpdateOne {
	if s != nil {
		eguo.SetDeletedByDesignation(*s)
	}
	return eguo
}

// ClearDeletedByDesignation clears the value of the "DeletedByDesignation" field.
func (eguo *EmployeeGroupUpdateOne) ClearDeletedByDesignation() *EmployeeGroupUpdateOne {
	eguo.mutation.ClearDeletedByDesignation()
	return eguo
}

// SetDeletedDate sets the "DeletedDate" field.
func (eguo *EmployeeGroupUpdateOne) SetDeletedDate(t time.Time) *EmployeeGroupUpdateOne {
	eguo.mutation.SetDeletedDate(t)
	return eguo
}

// SetNillableDeletedDate sets the "DeletedDate" field if the given value is not nil.
func (eguo *EmployeeGroupUpdateOne) SetNillableDeletedDate(t *time.Time) *EmployeeGroupUpdateOne {
	if t != nil {
		eguo.SetDeletedDate(*t)
	}
	return eguo
}

// ClearDeletedDate clears the value of the "DeletedDate" field.
func (eguo *EmployeeGroupUpdateOne) ClearDeletedDate() *EmployeeGroupUpdateOne {
	eguo.mutation.ClearDeletedDate()
	return eguo
}

// Mutation returns the EmployeeGroupMutation object of the builder.
func (eguo *EmployeeGroupUpdateOne) Mutation() *EmployeeGroupMutation {
	return eguo.mutation
}

// Where appends a list predicates to the EmployeeGroupUpdate builder.
func (eguo *EmployeeGroupUpdateOne) Where(ps ...predicate.EmployeeGroup) *EmployeeGroupUpdateOne {
	eguo.mutation.Where(ps...)
	return eguo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (eguo *EmployeeGroupUpdateOne) Select(field string, fields ...string) *EmployeeGroupUpdateOne {
	eguo.fields = append([]string{field}, fields...)
	return eguo
}

// Save executes the query and returns the updated EmployeeGroup entity.
func (eguo *EmployeeGroupUpdateOne) Save(ctx context.Context) (*EmployeeGroup, error) {
	return withHooks(ctx, eguo.sqlSave, eguo.mutation, eguo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (eguo *EmployeeGroupUpdateOne) SaveX(ctx context.Context) *EmployeeGroup {
	node, err := eguo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (eguo *EmployeeGroupUpdateOne) Exec(ctx context.Context) error {
	_, err := eguo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eguo *EmployeeGroupUpdateOne) ExecX(ctx context.Context) {
	if err := eguo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (eguo *EmployeeGroupUpdateOne) sqlSave(ctx context.Context) (_node *EmployeeGroup, err error) {
	_spec := sqlgraph.NewUpdateSpec(employeegroup.Table, employeegroup.Columns, sqlgraph.NewFieldSpec(employeegroup.FieldID, field.TypeInt32))
	id, ok := eguo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "EmployeeGroup.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := eguo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, employeegroup.FieldID)
		for _, f := range fields {
			if !employeegroup.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != employeegroup.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := eguo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eguo.mutation.GroupCode(); ok {
		_spec.SetField(employeegroup.FieldGroupCode, field.TypeString, value)
	}
	if eguo.mutation.GroupCodeCleared() {
		_spec.ClearField(employeegroup.FieldGroupCode, field.TypeString)
	}
	if value, ok := eguo.mutation.GroupDescription(); ok {
		_spec.SetField(employeegroup.FieldGroupDescription, field.TypeString, value)
	}
	if eguo.mutation.GroupDescriptionCleared() {
		_spec.ClearField(employeegroup.FieldGroupDescription, field.TypeString)
	}
	if value, ok := eguo.mutation.OrderNumber(); ok {
		_spec.SetField(employeegroup.FieldOrderNumber, field.TypeString, value)
	}
	if eguo.mutation.OrderNumberCleared() {
		_spec.ClearField(employeegroup.FieldOrderNumber, field.TypeString)
	}
	if value, ok := eguo.mutation.Status(); ok {
		_spec.SetField(employeegroup.FieldStatus, field.TypeString, value)
	}
	if eguo.mutation.StatusCleared() {
		_spec.ClearField(employeegroup.FieldStatus, field.TypeString)
	}
	if value, ok := eguo.mutation.CreatedById(); ok {
		_spec.SetField(employeegroup.FieldCreatedById, field.TypeInt32, value)
	}
	if value, ok := eguo.mutation.AddedCreatedById(); ok {
		_spec.AddField(employeegroup.FieldCreatedById, field.TypeInt32, value)
	}
	if eguo.mutation.CreatedByIdCleared() {
		_spec.ClearField(employeegroup.FieldCreatedById, field.TypeInt32)
	}
	if value, ok := eguo.mutation.CreatedByUserName(); ok {
		_spec.SetField(employeegroup.FieldCreatedByUserName, field.TypeString, value)
	}
	if eguo.mutation.CreatedByUserNameCleared() {
		_spec.ClearField(employeegroup.FieldCreatedByUserName, field.TypeString)
	}
	if value, ok := eguo.mutation.CreatedByEmployeeId(); ok {
		_spec.SetField(employeegroup.FieldCreatedByEmployeeId, field.TypeString, value)
	}
	if eguo.mutation.CreatedByEmployeeIdCleared() {
		_spec.ClearField(employeegroup.FieldCreatedByEmployeeId, field.TypeString)
	}
	if value, ok := eguo.mutation.CreatedByDesignation(); ok {
		_spec.SetField(employeegroup.FieldCreatedByDesignation, field.TypeString, value)
	}
	if eguo.mutation.CreatedByDesignationCleared() {
		_spec.ClearField(employeegroup.FieldCreatedByDesignation, field.TypeString)
	}
	if value, ok := eguo.mutation.CreatedDate(); ok {
		_spec.SetField(employeegroup.FieldCreatedDate, field.TypeTime, value)
	}
	if eguo.mutation.CreatedDateCleared() {
		_spec.ClearField(employeegroup.FieldCreatedDate, field.TypeTime)
	}
	if value, ok := eguo.mutation.VerifiedById(); ok {
		_spec.SetField(employeegroup.FieldVerifiedById, field.TypeInt64, value)
	}
	if value, ok := eguo.mutation.AddedVerifiedById(); ok {
		_spec.AddField(employeegroup.FieldVerifiedById, field.TypeInt64, value)
	}
	if eguo.mutation.VerifiedByIdCleared() {
		_spec.ClearField(employeegroup.FieldVerifiedById, field.TypeInt64)
	}
	if value, ok := eguo.mutation.VerifiedByUserName(); ok {
		_spec.SetField(employeegroup.FieldVerifiedByUserName, field.TypeString, value)
	}
	if eguo.mutation.VerifiedByUserNameCleared() {
		_spec.ClearField(employeegroup.FieldVerifiedByUserName, field.TypeString)
	}
	if value, ok := eguo.mutation.VerifiedByEmployeeId(); ok {
		_spec.SetField(employeegroup.FieldVerifiedByEmployeeId, field.TypeString, value)
	}
	if eguo.mutation.VerifiedByEmployeeIdCleared() {
		_spec.ClearField(employeegroup.FieldVerifiedByEmployeeId, field.TypeString)
	}
	if value, ok := eguo.mutation.VerifiedByDesignation(); ok {
		_spec.SetField(employeegroup.FieldVerifiedByDesignation, field.TypeString, value)
	}
	if eguo.mutation.VerifiedByDesignationCleared() {
		_spec.ClearField(employeegroup.FieldVerifiedByDesignation, field.TypeString)
	}
	if value, ok := eguo.mutation.VerifiedDate(); ok {
		_spec.SetField(employeegroup.FieldVerifiedDate, field.TypeTime, value)
	}
	if eguo.mutation.VerifiedDateCleared() {
		_spec.ClearField(employeegroup.FieldVerifiedDate, field.TypeTime)
	}
	if value, ok := eguo.mutation.DeletedById(); ok {
		_spec.SetField(employeegroup.FieldDeletedById, field.TypeInt64, value)
	}
	if value, ok := eguo.mutation.AddedDeletedById(); ok {
		_spec.AddField(employeegroup.FieldDeletedById, field.TypeInt64, value)
	}
	if eguo.mutation.DeletedByIdCleared() {
		_spec.ClearField(employeegroup.FieldDeletedById, field.TypeInt64)
	}
	if value, ok := eguo.mutation.DeletedByUserName(); ok {
		_spec.SetField(employeegroup.FieldDeletedByUserName, field.TypeString, value)
	}
	if eguo.mutation.DeletedByUserNameCleared() {
		_spec.ClearField(employeegroup.FieldDeletedByUserName, field.TypeString)
	}
	if value, ok := eguo.mutation.DeletedByEmployeeId(); ok {
		_spec.SetField(employeegroup.FieldDeletedByEmployeeId, field.TypeString, value)
	}
	if eguo.mutation.DeletedByEmployeeIdCleared() {
		_spec.ClearField(employeegroup.FieldDeletedByEmployeeId, field.TypeString)
	}
	if value, ok := eguo.mutation.DeletedByDesignation(); ok {
		_spec.SetField(employeegroup.FieldDeletedByDesignation, field.TypeString, value)
	}
	if eguo.mutation.DeletedByDesignationCleared() {
		_spec.ClearField(employeegroup.FieldDeletedByDesignation, field.TypeString)
	}
	if value, ok := eguo.mutation.DeletedDate(); ok {
		_spec.SetField(employeegroup.FieldDeletedDate, field.TypeTime, value)
	}
	if eguo.mutation.DeletedDateCleared() {
		_spec.ClearField(employeegroup.FieldDeletedDate, field.TypeTime)
	}
	_node = &EmployeeGroup{config: eguo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, eguo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{employeegroup.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	eguo.mutation.done = true
	return _node, nil
}
