// Code generated by ent, DO NOT EDIT.

package smsemaillog

import (
	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the smsemaillog type in the database.
	Label = "sms_email_log"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "UniqueID"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldMobileEmail holds the string denoting the mobileemail field in the database.
	FieldMobileEmail = "mobile_email"
	// FieldUserName holds the string denoting the username field in the database.
	FieldUserName = "user_name"
	// FieldEventCode holds the string denoting the eventcode field in the database.
	FieldEventCode = "event_code"
	// FieldEventDescription holds the string denoting the eventdescription field in the database.
	FieldEventDescription = "event_description"
	// FieldApiResponse holds the string denoting the apiresponse field in the database.
	FieldApiResponse = "api_response"
	// FieldApiResponseDescription holds the string denoting the apiresponsedescription field in the database.
	FieldApiResponseDescription = "api_response_description"
	// FieldEventtime holds the string denoting the eventtime field in the database.
	FieldEventtime = "eventtime"
	// Table holds the table name of the smsemaillog in the database.
	Table = "SmsEmailLogTable"
)

// Columns holds all SQL columns for smsemaillog fields.
var Columns = []string{
	FieldID,
	FieldType,
	FieldMobileEmail,
	FieldUserName,
	FieldEventCode,
	FieldEventDescription,
	FieldApiResponse,
	FieldApiResponseDescription,
	FieldEventtime,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the SmsEmailLog queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByType orders the results by the Type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByMobileEmail orders the results by the MobileEmail field.
func ByMobileEmail(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMobileEmail, opts...).ToFunc()
}

// ByUserName orders the results by the UserName field.
func ByUserName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserName, opts...).ToFunc()
}

// ByEventCode orders the results by the EventCode field.
func ByEventCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEventCode, opts...).ToFunc()
}

// ByEventDescription orders the results by the EventDescription field.
func ByEventDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEventDescription, opts...).ToFunc()
}

// ByApiResponse orders the results by the ApiResponse field.
func ByApiResponse(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldApiResponse, opts...).ToFunc()
}

// ByApiResponseDescription orders the results by the ApiResponseDescription field.
func ByApiResponseDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldApiResponseDescription, opts...).ToFunc()
}

// ByEventtime orders the results by the eventtime field.
func ByEventtime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEventtime, opts...).ToFunc()
}
