// Code generated by ent, DO NOT EDIT.

package employeedesignation

import (
	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the employeedesignation type in the database.
	Label = "employee_designation"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "DesignationID"
	// FieldPostID holds the string denoting the postid field in the database.
	FieldPostID = "post_id"
	// FieldPostCode holds the string denoting the postcode field in the database.
	FieldPostCode = "post_code"
	// FieldPostDescription holds the string denoting the postdescription field in the database.
	FieldPostDescription = "post_description"
	// FieldDesignationCode holds the string denoting the designationcode field in the database.
	FieldDesignationCode = "designation_code"
	// FieldDesignationDescription holds the string denoting the designationdescription field in the database.
	FieldDesignationDescription = "designation_description"
	// FieldOrderNumber holds the string denoting the ordernumber field in the database.
	FieldOrderNumber = "order_number"
	// FieldCreatedById holds the string denoting the createdbyid field in the database.
	FieldCreatedById = "created_by_id"
	// FieldCreatedByUserName holds the string denoting the createdbyusername field in the database.
	FieldCreatedByUserName = "created_by_user_name"
	// FieldCreatedByEmpId holds the string denoting the createdbyempid field in the database.
	FieldCreatedByEmpId = "created_by_emp_id"
	// FieldCreatedByDesignation holds the string denoting the createdbydesignation field in the database.
	FieldCreatedByDesignation = "created_by_designation"
	// FieldCreatedDate holds the string denoting the createddate field in the database.
	FieldCreatedDate = "created_date"
	// FieldVerifiedbyid holds the string denoting the verifiedbyid field in the database.
	FieldVerifiedbyid = "verifiedbyid"
	// FieldVerifiedbyusername holds the string denoting the verifiedbyusername field in the database.
	FieldVerifiedbyusername = "verifiedbyusername"
	// FieldVerifiedbyEmployeeid holds the string denoting the verifiedbyemployeeid field in the database.
	FieldVerifiedbyEmployeeid = "verifiedby_employeeid"
	// FieldVerifiedbyDesignation holds the string denoting the verifiedbydesignation field in the database.
	FieldVerifiedbyDesignation = "verifiedby_designation"
	// FieldVerifiedDate holds the string denoting the verifieddate field in the database.
	FieldVerifiedDate = "verified_date"
	// FieldStatuss holds the string denoting the statuss field in the database.
	FieldStatuss = "statuss"
	// FieldDeletedbyid holds the string denoting the deletedbyid field in the database.
	FieldDeletedbyid = "deletedbyid"
	// FieldDeletedbyusername holds the string denoting the deletedbyusername field in the database.
	FieldDeletedbyusername = "deletedbyusername"
	// FieldDeletedbyEmployeeid holds the string denoting the deletedbyemployeeid field in the database.
	FieldDeletedbyEmployeeid = "deletedby_employeeid"
	// FieldDeletedbyDesignation holds the string denoting the deletedbydesignation field in the database.
	FieldDeletedbyDesignation = "deletedby_designation"
	// FieldDeletedDate holds the string denoting the deleteddate field in the database.
	FieldDeletedDate = "deleted_date"
	// FieldPaperStatus holds the string denoting the paperstatus field in the database.
	FieldPaperStatus = "paper_status"
	// FieldCalendarCode holds the string denoting the calendarcode field in the database.
	FieldCalendarCode = "calendar_code"
	// FieldExamCodePS holds the string denoting the examcodeps field in the database.
	FieldExamCodePS = "exam_code_ps"
	// FieldCreatedByEmployeeId holds the string denoting the createdbyemployeeid field in the database.
	FieldCreatedByEmployeeId = "created_by_employee_id"
	// Table holds the table name of the employeedesignation in the database.
	Table = "EmployeeDesignation"
)

// Columns holds all SQL columns for employeedesignation fields.
var Columns = []string{
	FieldID,
	FieldPostID,
	FieldPostCode,
	FieldPostDescription,
	FieldDesignationCode,
	FieldDesignationDescription,
	FieldOrderNumber,
	FieldCreatedById,
	FieldCreatedByUserName,
	FieldCreatedByEmpId,
	FieldCreatedByDesignation,
	FieldCreatedDate,
	FieldVerifiedbyid,
	FieldVerifiedbyusername,
	FieldVerifiedbyEmployeeid,
	FieldVerifiedbyDesignation,
	FieldVerifiedDate,
	FieldStatuss,
	FieldDeletedbyid,
	FieldDeletedbyusername,
	FieldDeletedbyEmployeeid,
	FieldDeletedbyDesignation,
	FieldDeletedDate,
	FieldPaperStatus,
	FieldCalendarCode,
	FieldExamCodePS,
	FieldCreatedByEmployeeId,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultStatuss holds the default value on creation for the "Statuss" field.
	DefaultStatuss string
	// PaperStatusValidator is a validator for the "PaperStatus" field. It is called by the builders before save.
	PaperStatusValidator func(string) error
)

// OrderOption defines the ordering options for the EmployeeDesignation queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByPostID orders the results by the PostID field.
func ByPostID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPostID, opts...).ToFunc()
}

// ByPostCode orders the results by the PostCode field.
func ByPostCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPostCode, opts...).ToFunc()
}

// ByPostDescription orders the results by the PostDescription field.
func ByPostDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPostDescription, opts...).ToFunc()
}

// ByDesignationCode orders the results by the DesignationCode field.
func ByDesignationCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDesignationCode, opts...).ToFunc()
}

// ByDesignationDescription orders the results by the DesignationDescription field.
func ByDesignationDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDesignationDescription, opts...).ToFunc()
}

// ByOrderNumber orders the results by the OrderNumber field.
func ByOrderNumber(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOrderNumber, opts...).ToFunc()
}

// ByCreatedById orders the results by the CreatedById field.
func ByCreatedById(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedById, opts...).ToFunc()
}

// ByCreatedByUserName orders the results by the CreatedByUserName field.
func ByCreatedByUserName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedByUserName, opts...).ToFunc()
}

// ByCreatedByEmpId orders the results by the CreatedByEmpId field.
func ByCreatedByEmpId(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedByEmpId, opts...).ToFunc()
}

// ByCreatedByDesignation orders the results by the CreatedByDesignation field.
func ByCreatedByDesignation(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedByDesignation, opts...).ToFunc()
}

// ByCreatedDate orders the results by the CreatedDate field.
func ByCreatedDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedDate, opts...).ToFunc()
}

// ByVerifiedbyid orders the results by the verifiedbyid field.
func ByVerifiedbyid(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVerifiedbyid, opts...).ToFunc()
}

// ByVerifiedbyusername orders the results by the verifiedbyusername field.
func ByVerifiedbyusername(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVerifiedbyusername, opts...).ToFunc()
}

// ByVerifiedbyEmployeeid orders the results by the verifiedbyEmployeeid field.
func ByVerifiedbyEmployeeid(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVerifiedbyEmployeeid, opts...).ToFunc()
}

// ByVerifiedbyDesignation orders the results by the verifiedbyDesignation field.
func ByVerifiedbyDesignation(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVerifiedbyDesignation, opts...).ToFunc()
}

// ByVerifiedDate orders the results by the verifiedDate field.
func ByVerifiedDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVerifiedDate, opts...).ToFunc()
}

// ByStatuss orders the results by the Statuss field.
func ByStatuss(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatuss, opts...).ToFunc()
}

// ByDeletedbyid orders the results by the deletedbyid field.
func ByDeletedbyid(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedbyid, opts...).ToFunc()
}

// ByDeletedbyusername orders the results by the deletedbyusername field.
func ByDeletedbyusername(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedbyusername, opts...).ToFunc()
}

// ByDeletedbyEmployeeid orders the results by the deletedbyEmployeeid field.
func ByDeletedbyEmployeeid(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedbyEmployeeid, opts...).ToFunc()
}

// ByDeletedbyDesignation orders the results by the deletedbyDesignation field.
func ByDeletedbyDesignation(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedbyDesignation, opts...).ToFunc()
}

// ByDeletedDate orders the results by the deletedDate field.
func ByDeletedDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedDate, opts...).ToFunc()
}

// ByPaperStatus orders the results by the PaperStatus field.
func ByPaperStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPaperStatus, opts...).ToFunc()
}

// ByCalendarCode orders the results by the CalendarCode field.
func ByCalendarCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCalendarCode, opts...).ToFunc()
}

// ByExamCodePS orders the results by the ExamCodePS field.
func ByExamCodePS(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExamCodePS, opts...).ToFunc()
}

// ByCreatedByEmployeeId orders the results by the CreatedByEmployeeId field.
func ByCreatedByEmployeeId(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedByEmployeeId, opts...).ToFunc()
}
