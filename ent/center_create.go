// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"recruit/ent/application"
	"recruit/ent/center"
	"recruit/ent/exam"
	"recruit/ent/exam_application_mtspmmg"
	"recruit/ent/exam_applications_gdspa"
	"recruit/ent/exam_applications_gdspm"
	"recruit/ent/exam_applications_ip"
	"recruit/ent/exam_applications_pmpa"
	"recruit/ent/exam_applications_ps"
	"recruit/ent/examcenterhall"
	"recruit/ent/examcitycenter"
	"recruit/ent/logs"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CenterCreate is the builder for creating a Center entity.
type CenterCreate struct {
	config
	mutation *CenterMutation
	hooks    []Hook
}

// SetCityID sets the "CityID" field.
func (cc *CenterCreate) SetCityID(i int32) *CenterCreate {
	cc.mutation.SetCityID(i)
	return cc
}

// SetNillableCityID sets the "CityID" field if the given value is not nil.
func (cc *CenterCreate) SetNillableCityID(i *int32) *CenterCreate {
	if i != nil {
		cc.SetCityID(*i)
	}
	return cc
}

// SetNodalOfficerCode sets the "NodalOfficerCode" field.
func (cc *CenterCreate) SetNodalOfficerCode(i int32) *CenterCreate {
	cc.mutation.SetNodalOfficerCode(i)
	return cc
}

// SetNillableNodalOfficerCode sets the "NodalOfficerCode" field if the given value is not nil.
func (cc *CenterCreate) SetNillableNodalOfficerCode(i *int32) *CenterCreate {
	if i != nil {
		cc.SetNodalOfficerCode(*i)
	}
	return cc
}

// SetExamCenterName sets the "ExamCenterName" field.
func (cc *CenterCreate) SetExamCenterName(s string) *CenterCreate {
	cc.mutation.SetExamCenterName(s)
	return cc
}

// SetNillableExamCenterName sets the "ExamCenterName" field if the given value is not nil.
func (cc *CenterCreate) SetNillableExamCenterName(s *string) *CenterCreate {
	if s != nil {
		cc.SetExamCenterName(*s)
	}
	return cc
}

// SetExamCode sets the "ExamCode" field.
func (cc *CenterCreate) SetExamCode(i int32) *CenterCreate {
	cc.mutation.SetExamCode(i)
	return cc
}

// SetNillableExamCode sets the "ExamCode" field if the given value is not nil.
func (cc *CenterCreate) SetNillableExamCode(i *int32) *CenterCreate {
	if i != nil {
		cc.SetExamCode(*i)
	}
	return cc
}

// SetRegionID sets the "RegionID" field.
func (cc *CenterCreate) SetRegionID(i int32) *CenterCreate {
	cc.mutation.SetRegionID(i)
	return cc
}

// SetNillableRegionID sets the "RegionID" field if the given value is not nil.
func (cc *CenterCreate) SetNillableRegionID(i *int32) *CenterCreate {
	if i != nil {
		cc.SetRegionID(*i)
	}
	return cc
}

// SetCircleID sets the "CircleID" field.
func (cc *CenterCreate) SetCircleID(i int32) *CenterCreate {
	cc.mutation.SetCircleID(i)
	return cc
}

// SetNillableCircleID sets the "CircleID" field if the given value is not nil.
func (cc *CenterCreate) SetNillableCircleID(i *int32) *CenterCreate {
	if i != nil {
		cc.SetCircleID(*i)
	}
	return cc
}

// SetDivisionID sets the "DivisionID" field.
func (cc *CenterCreate) SetDivisionID(i int32) *CenterCreate {
	cc.mutation.SetDivisionID(i)
	return cc
}

// SetNillableDivisionID sets the "DivisionID" field if the given value is not nil.
func (cc *CenterCreate) SetNillableDivisionID(i *int32) *CenterCreate {
	if i != nil {
		cc.SetDivisionID(*i)
	}
	return cc
}

// SetFacilityID sets the "FacilityID" field.
func (cc *CenterCreate) SetFacilityID(i int32) *CenterCreate {
	cc.mutation.SetFacilityID(i)
	return cc
}

// SetNillableFacilityID sets the "FacilityID" field if the given value is not nil.
func (cc *CenterCreate) SetNillableFacilityID(i *int32) *CenterCreate {
	if i != nil {
		cc.SetFacilityID(*i)
	}
	return cc
}

// SetExamNameCode sets the "ExamNameCode" field.
func (cc *CenterCreate) SetExamNameCode(s string) *CenterCreate {
	cc.mutation.SetExamNameCode(s)
	return cc
}

// SetNillableExamNameCode sets the "ExamNameCode" field if the given value is not nil.
func (cc *CenterCreate) SetNillableExamNameCode(s *string) *CenterCreate {
	if s != nil {
		cc.SetExamNameCode(*s)
	}
	return cc
}

// SetExamName sets the "ExamName" field.
func (cc *CenterCreate) SetExamName(s string) *CenterCreate {
	cc.mutation.SetExamName(s)
	return cc
}

// SetNillableExamName sets the "ExamName" field if the given value is not nil.
func (cc *CenterCreate) SetNillableExamName(s *string) *CenterCreate {
	if s != nil {
		cc.SetExamName(*s)
	}
	return cc
}

// SetNAUserName sets the "NAUserName" field.
func (cc *CenterCreate) SetNAUserName(s string) *CenterCreate {
	cc.mutation.SetNAUserName(s)
	return cc
}

// SetNillableNAUserName sets the "NAUserName" field if the given value is not nil.
func (cc *CenterCreate) SetNillableNAUserName(s *string) *CenterCreate {
	if s != nil {
		cc.SetNAUserName(*s)
	}
	return cc
}

// SetNodalOfficeFacilityId sets the "NodalOfficeFacilityId" field.
func (cc *CenterCreate) SetNodalOfficeFacilityId(s string) *CenterCreate {
	cc.mutation.SetNodalOfficeFacilityId(s)
	return cc
}

// SetNillableNodalOfficeFacilityId sets the "NodalOfficeFacilityId" field if the given value is not nil.
func (cc *CenterCreate) SetNillableNodalOfficeFacilityId(s *string) *CenterCreate {
	if s != nil {
		cc.SetNodalOfficeFacilityId(*s)
	}
	return cc
}

// SetAdminCircleOfficeID sets the "AdminCircleOfficeID" field.
func (cc *CenterCreate) SetAdminCircleOfficeID(s string) *CenterCreate {
	cc.mutation.SetAdminCircleOfficeID(s)
	return cc
}

// SetNillableAdminCircleOfficeID sets the "AdminCircleOfficeID" field if the given value is not nil.
func (cc *CenterCreate) SetNillableAdminCircleOfficeID(s *string) *CenterCreate {
	if s != nil {
		cc.SetAdminCircleOfficeID(*s)
	}
	return cc
}

// SetAddress sets the "Address" field.
func (cc *CenterCreate) SetAddress(s string) *CenterCreate {
	cc.mutation.SetAddress(s)
	return cc
}

// SetNillableAddress sets the "Address" field if the given value is not nil.
func (cc *CenterCreate) SetNillableAddress(s *string) *CenterCreate {
	if s != nil {
		cc.SetAddress(*s)
	}
	return cc
}

// SetLandmark sets the "Landmark" field.
func (cc *CenterCreate) SetLandmark(s string) *CenterCreate {
	cc.mutation.SetLandmark(s)
	return cc
}

// SetNillableLandmark sets the "Landmark" field if the given value is not nil.
func (cc *CenterCreate) SetNillableLandmark(s *string) *CenterCreate {
	if s != nil {
		cc.SetLandmark(*s)
	}
	return cc
}

// SetCenterCityName sets the "CenterCityName" field.
func (cc *CenterCreate) SetCenterCityName(s string) *CenterCreate {
	cc.mutation.SetCenterCityName(s)
	return cc
}

// SetNillableCenterCityName sets the "CenterCityName" field if the given value is not nil.
func (cc *CenterCreate) SetNillableCenterCityName(s *string) *CenterCreate {
	if s != nil {
		cc.SetCenterCityName(*s)
	}
	return cc
}

// SetPincode sets the "Pincode" field.
func (cc *CenterCreate) SetPincode(i int32) *CenterCreate {
	cc.mutation.SetPincode(i)
	return cc
}

// SetNillablePincode sets the "Pincode" field if the given value is not nil.
func (cc *CenterCreate) SetNillablePincode(i *int32) *CenterCreate {
	if i != nil {
		cc.SetPincode(*i)
	}
	return cc
}

// SetMaxSeats sets the "MaxSeats" field.
func (cc *CenterCreate) SetMaxSeats(i int32) *CenterCreate {
	cc.mutation.SetMaxSeats(i)
	return cc
}

// SetNillableMaxSeats sets the "MaxSeats" field if the given value is not nil.
func (cc *CenterCreate) SetNillableMaxSeats(i *int32) *CenterCreate {
	if i != nil {
		cc.SetMaxSeats(*i)
	}
	return cc
}

// SetNoAlloted sets the "NoAlloted" field.
func (cc *CenterCreate) SetNoAlloted(i int32) *CenterCreate {
	cc.mutation.SetNoAlloted(i)
	return cc
}

// SetNillableNoAlloted sets the "NoAlloted" field if the given value is not nil.
func (cc *CenterCreate) SetNillableNoAlloted(i *int32) *CenterCreate {
	if i != nil {
		cc.SetNoAlloted(*i)
	}
	return cc
}

// SetPendingSeats sets the "PendingSeats" field.
func (cc *CenterCreate) SetPendingSeats(i int32) *CenterCreate {
	cc.mutation.SetPendingSeats(i)
	return cc
}

// SetNillablePendingSeats sets the "PendingSeats" field if the given value is not nil.
func (cc *CenterCreate) SetNillablePendingSeats(i *int32) *CenterCreate {
	if i != nil {
		cc.SetPendingSeats(*i)
	}
	return cc
}

// SetStatus sets the "Status" field.
func (cc *CenterCreate) SetStatus(b bool) *CenterCreate {
	cc.mutation.SetStatus(b)
	return cc
}

// SetNillableStatus sets the "Status" field if the given value is not nil.
func (cc *CenterCreate) SetNillableStatus(b *bool) *CenterCreate {
	if b != nil {
		cc.SetStatus(*b)
	}
	return cc
}

// SetExamYear sets the "ExamYear" field.
func (cc *CenterCreate) SetExamYear(s string) *CenterCreate {
	cc.mutation.SetExamYear(s)
	return cc
}

// SetNillableExamYear sets the "ExamYear" field if the given value is not nil.
func (cc *CenterCreate) SetNillableExamYear(s *string) *CenterCreate {
	if s != nil {
		cc.SetExamYear(*s)
	}
	return cc
}

// SetConductedBy sets the "ConductedBy" field.
func (cc *CenterCreate) SetConductedBy(s string) *CenterCreate {
	cc.mutation.SetConductedBy(s)
	return cc
}

// SetNillableConductedBy sets the "ConductedBy" field if the given value is not nil.
func (cc *CenterCreate) SetNillableConductedBy(s *string) *CenterCreate {
	if s != nil {
		cc.SetConductedBy(*s)
	}
	return cc
}

// SetConductedByFacilityID sets the "ConductedByFacilityID" field.
func (cc *CenterCreate) SetConductedByFacilityID(s string) *CenterCreate {
	cc.mutation.SetConductedByFacilityID(s)
	return cc
}

// SetNillableConductedByFacilityID sets the "ConductedByFacilityID" field if the given value is not nil.
func (cc *CenterCreate) SetNillableConductedByFacilityID(s *string) *CenterCreate {
	if s != nil {
		cc.SetConductedByFacilityID(*s)
	}
	return cc
}

// SetUpdatedAt sets the "UpdatedAt" field.
func (cc *CenterCreate) SetUpdatedAt(t time.Time) *CenterCreate {
	cc.mutation.SetUpdatedAt(t)
	return cc
}

// SetNillableUpdatedAt sets the "UpdatedAt" field if the given value is not nil.
func (cc *CenterCreate) SetNillableUpdatedAt(t *time.Time) *CenterCreate {
	if t != nil {
		cc.SetUpdatedAt(*t)
	}
	return cc
}

// SetUpdatedBy sets the "UpdatedBy" field.
func (cc *CenterCreate) SetUpdatedBy(s string) *CenterCreate {
	cc.mutation.SetUpdatedBy(s)
	return cc
}

// SetNillableUpdatedBy sets the "UpdatedBy" field if the given value is not nil.
func (cc *CenterCreate) SetNillableUpdatedBy(s *string) *CenterCreate {
	if s != nil {
		cc.SetUpdatedBy(*s)
	}
	return cc
}

// SetPapers sets the "Papers" field.
func (cc *CenterCreate) SetPapers(i []interface{}) *CenterCreate {
	cc.mutation.SetPapers(i)
	return cc
}

// SetID sets the "id" field.
func (cc *CenterCreate) SetID(i int32) *CenterCreate {
	cc.mutation.SetID(i)
	return cc
}

// AddApplicationIDs adds the "applications" edge to the Application entity by IDs.
func (cc *CenterCreate) AddApplicationIDs(ids ...int32) *CenterCreate {
	cc.mutation.AddApplicationIDs(ids...)
	return cc
}

// AddApplications adds the "applications" edges to the Application entity.
func (cc *CenterCreate) AddApplications(a ...*Application) *CenterCreate {
	ids := make([]int32, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return cc.AddApplicationIDs(ids...)
}

// AddExamCentresRefIDs adds the "ExamCentresRef" edge to the Exam_Applications_IP entity by IDs.
func (cc *CenterCreate) AddExamCentresRefIDs(ids ...int64) *CenterCreate {
	cc.mutation.AddExamCentresRefIDs(ids...)
	return cc
}

// AddExamCentresRef adds the "ExamCentresRef" edges to the Exam_Applications_IP entity.
func (cc *CenterCreate) AddExamCentresRef(e ...*Exam_Applications_IP) *CenterCreate {
	ids := make([]int64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return cc.AddExamCentresRefIDs(ids...)
}

// AddExamCentresRefPSIDs adds the "ExamCentresRefPS" edge to the Exam_Applications_PS entity by IDs.
func (cc *CenterCreate) AddExamCentresRefPSIDs(ids ...int64) *CenterCreate {
	cc.mutation.AddExamCentresRefPSIDs(ids...)
	return cc
}

// AddExamCentresRefPS adds the "ExamCentresRefPS" edges to the Exam_Applications_PS entity.
func (cc *CenterCreate) AddExamCentresRefPS(e ...*Exam_Applications_PS) *CenterCreate {
	ids := make([]int64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return cc.AddExamCentresRefPSIDs(ids...)
}

// AddExamCentresRefGDSPAIDs adds the "ExamCentresRefGDSPA" edge to the Exam_Applications_GDSPA entity by IDs.
func (cc *CenterCreate) AddExamCentresRefGDSPAIDs(ids ...int64) *CenterCreate {
	cc.mutation.AddExamCentresRefGDSPAIDs(ids...)
	return cc
}

// AddExamCentresRefGDSPA adds the "ExamCentresRefGDSPA" edges to the Exam_Applications_GDSPA entity.
func (cc *CenterCreate) AddExamCentresRefGDSPA(e ...*Exam_Applications_GDSPA) *CenterCreate {
	ids := make([]int64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return cc.AddExamCentresRefGDSPAIDs(ids...)
}

// AddExamCentresRefPMPAIDs adds the "ExamCentresRefPMPA" edge to the Exam_Applications_PMPA entity by IDs.
func (cc *CenterCreate) AddExamCentresRefPMPAIDs(ids ...int64) *CenterCreate {
	cc.mutation.AddExamCentresRefPMPAIDs(ids...)
	return cc
}

// AddExamCentresRefPMPA adds the "ExamCentresRefPMPA" edges to the Exam_Applications_PMPA entity.
func (cc *CenterCreate) AddExamCentresRefPMPA(e ...*Exam_Applications_PMPA) *CenterCreate {
	ids := make([]int64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return cc.AddExamCentresRefPMPAIDs(ids...)
}

// AddExamCentresRefGDSPMIDs adds the "ExamCentresRefGDSPM" edge to the Exam_Applications_GDSPM entity by IDs.
func (cc *CenterCreate) AddExamCentresRefGDSPMIDs(ids ...int64) *CenterCreate {
	cc.mutation.AddExamCentresRefGDSPMIDs(ids...)
	return cc
}

// AddExamCentresRefGDSPM adds the "ExamCentresRefGDSPM" edges to the Exam_Applications_GDSPM entity.
func (cc *CenterCreate) AddExamCentresRefGDSPM(e ...*Exam_Applications_GDSPM) *CenterCreate {
	ids := make([]int64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return cc.AddExamCentresRefGDSPMIDs(ids...)
}

// AddExamscentreIDs adds the "Examscentres" edge to the ExamCityCenter entity by IDs.
func (cc *CenterCreate) AddExamscentreIDs(ids ...int32) *CenterCreate {
	cc.mutation.AddExamscentreIDs(ids...)
	return cc
}

// AddExamscentres adds the "Examscentres" edges to the ExamCityCenter entity.
func (cc *CenterCreate) AddExamscentres(e ...*ExamCityCenter) *CenterCreate {
	ids := make([]int32, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return cc.AddExamscentreIDs(ids...)
}

// AddExamCentresRefMTSPMMGIDs adds the "ExamCentresRefMTSPMMG" edge to the Exam_Application_MTSPMMG entity by IDs.
func (cc *CenterCreate) AddExamCentresRefMTSPMMGIDs(ids ...int64) *CenterCreate {
	cc.mutation.AddExamCentresRefMTSPMMGIDs(ids...)
	return cc
}

// AddExamCentresRefMTSPMMG adds the "ExamCentresRefMTSPMMG" edges to the Exam_Application_MTSPMMG entity.
func (cc *CenterCreate) AddExamCentresRefMTSPMMG(e ...*Exam_Application_MTSPMMG) *CenterCreate {
	ids := make([]int64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return cc.AddExamCentresRefMTSPMMGIDs(ids...)
}

// AddExaCenterHallRefIDs adds the "ExaCenterHallRef" edge to the ExamCenterHall entity by IDs.
func (cc *CenterCreate) AddExaCenterHallRefIDs(ids ...int32) *CenterCreate {
	cc.mutation.AddExaCenterHallRefIDs(ids...)
	return cc
}

// AddExaCenterHallRef adds the "ExaCenterHallRef" edges to the ExamCenterHall entity.
func (cc *CenterCreate) AddExaCenterHallRef(e ...*ExamCenterHall) *CenterCreate {
	ids := make([]int32, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return cc.AddExaCenterHallRefIDs(ids...)
}

// SetCentresipID sets the "centresip" edge to the Exam entity by ID.
func (cc *CenterCreate) SetCentresipID(id int32) *CenterCreate {
	cc.mutation.SetCentresipID(id)
	return cc
}

// SetNillableCentresipID sets the "centresip" edge to the Exam entity by ID if the given value is not nil.
func (cc *CenterCreate) SetNillableCentresipID(id *int32) *CenterCreate {
	if id != nil {
		cc = cc.SetCentresipID(*id)
	}
	return cc
}

// SetCentresip sets the "centresip" edge to the Exam entity.
func (cc *CenterCreate) SetCentresip(e *Exam) *CenterCreate {
	return cc.SetCentresipID(e.ID)
}

// AddLogDatumIDs adds the "LogData" edge to the Logs entity by IDs.
func (cc *CenterCreate) AddLogDatumIDs(ids ...int64) *CenterCreate {
	cc.mutation.AddLogDatumIDs(ids...)
	return cc
}

// AddLogData adds the "LogData" edges to the Logs entity.
func (cc *CenterCreate) AddLogData(l ...*Logs) *CenterCreate {
	ids := make([]int64, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return cc.AddLogDatumIDs(ids...)
}

// Mutation returns the CenterMutation object of the builder.
func (cc *CenterCreate) Mutation() *CenterMutation {
	return cc.mutation
}

// Save creates the Center in the database.
func (cc *CenterCreate) Save(ctx context.Context) (*Center, error) {
	cc.defaults()
	return withHooks(ctx, cc.sqlSave, cc.mutation, cc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cc *CenterCreate) SaveX(ctx context.Context) *Center {
	v, err := cc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cc *CenterCreate) Exec(ctx context.Context) error {
	_, err := cc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cc *CenterCreate) ExecX(ctx context.Context) {
	if err := cc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cc *CenterCreate) defaults() {
	if _, ok := cc.mutation.CityID(); !ok {
		v := center.DefaultCityID
		cc.mutation.SetCityID(v)
	}
	if _, ok := cc.mutation.NodalOfficerCode(); !ok {
		v := center.DefaultNodalOfficerCode
		cc.mutation.SetNodalOfficerCode(v)
	}
	if _, ok := cc.mutation.ExamCode(); !ok {
		v := center.DefaultExamCode
		cc.mutation.SetExamCode(v)
	}
	if _, ok := cc.mutation.RegionID(); !ok {
		v := center.DefaultRegionID
		cc.mutation.SetRegionID(v)
	}
	if _, ok := cc.mutation.CircleID(); !ok {
		v := center.DefaultCircleID
		cc.mutation.SetCircleID(v)
	}
	if _, ok := cc.mutation.DivisionID(); !ok {
		v := center.DefaultDivisionID
		cc.mutation.SetDivisionID(v)
	}
	if _, ok := cc.mutation.FacilityID(); !ok {
		v := center.DefaultFacilityID
		cc.mutation.SetFacilityID(v)
	}
	if _, ok := cc.mutation.Pincode(); !ok {
		v := center.DefaultPincode
		cc.mutation.SetPincode(v)
	}
	if _, ok := cc.mutation.MaxSeats(); !ok {
		v := center.DefaultMaxSeats
		cc.mutation.SetMaxSeats(v)
	}
	if _, ok := cc.mutation.NoAlloted(); !ok {
		v := center.DefaultNoAlloted
		cc.mutation.SetNoAlloted(v)
	}
	if _, ok := cc.mutation.PendingSeats(); !ok {
		v := center.DefaultPendingSeats
		cc.mutation.SetPendingSeats(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cc *CenterCreate) check() error {
	return nil
}

func (cc *CenterCreate) sqlSave(ctx context.Context) (*Center, error) {
	if err := cc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int32(id)
	}
	cc.mutation.id = &_node.ID
	cc.mutation.done = true
	return _node, nil
}

func (cc *CenterCreate) createSpec() (*Center, *sqlgraph.CreateSpec) {
	var (
		_node = &Center{config: cc.config}
		_spec = sqlgraph.NewCreateSpec(center.Table, sqlgraph.NewFieldSpec(center.FieldID, field.TypeInt32))
	)
	if id, ok := cc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := cc.mutation.CityID(); ok {
		_spec.SetField(center.FieldCityID, field.TypeInt32, value)
		_node.CityID = value
	}
	if value, ok := cc.mutation.NodalOfficerCode(); ok {
		_spec.SetField(center.FieldNodalOfficerCode, field.TypeInt32, value)
		_node.NodalOfficerCode = value
	}
	if value, ok := cc.mutation.ExamCenterName(); ok {
		_spec.SetField(center.FieldExamCenterName, field.TypeString, value)
		_node.ExamCenterName = value
	}
	if value, ok := cc.mutation.RegionID(); ok {
		_spec.SetField(center.FieldRegionID, field.TypeInt32, value)
		_node.RegionID = value
	}
	if value, ok := cc.mutation.CircleID(); ok {
		_spec.SetField(center.FieldCircleID, field.TypeInt32, value)
		_node.CircleID = value
	}
	if value, ok := cc.mutation.DivisionID(); ok {
		_spec.SetField(center.FieldDivisionID, field.TypeInt32, value)
		_node.DivisionID = value
	}
	if value, ok := cc.mutation.FacilityID(); ok {
		_spec.SetField(center.FieldFacilityID, field.TypeInt32, value)
		_node.FacilityID = value
	}
	if value, ok := cc.mutation.ExamNameCode(); ok {
		_spec.SetField(center.FieldExamNameCode, field.TypeString, value)
		_node.ExamNameCode = value
	}
	if value, ok := cc.mutation.ExamName(); ok {
		_spec.SetField(center.FieldExamName, field.TypeString, value)
		_node.ExamName = value
	}
	if value, ok := cc.mutation.NAUserName(); ok {
		_spec.SetField(center.FieldNAUserName, field.TypeString, value)
		_node.NAUserName = value
	}
	if value, ok := cc.mutation.NodalOfficeFacilityId(); ok {
		_spec.SetField(center.FieldNodalOfficeFacilityId, field.TypeString, value)
		_node.NodalOfficeFacilityId = value
	}
	if value, ok := cc.mutation.AdminCircleOfficeID(); ok {
		_spec.SetField(center.FieldAdminCircleOfficeID, field.TypeString, value)
		_node.AdminCircleOfficeID = value
	}
	if value, ok := cc.mutation.Address(); ok {
		_spec.SetField(center.FieldAddress, field.TypeString, value)
		_node.Address = value
	}
	if value, ok := cc.mutation.Landmark(); ok {
		_spec.SetField(center.FieldLandmark, field.TypeString, value)
		_node.Landmark = value
	}
	if value, ok := cc.mutation.CenterCityName(); ok {
		_spec.SetField(center.FieldCenterCityName, field.TypeString, value)
		_node.CenterCityName = value
	}
	if value, ok := cc.mutation.Pincode(); ok {
		_spec.SetField(center.FieldPincode, field.TypeInt32, value)
		_node.Pincode = value
	}
	if value, ok := cc.mutation.MaxSeats(); ok {
		_spec.SetField(center.FieldMaxSeats, field.TypeInt32, value)
		_node.MaxSeats = value
	}
	if value, ok := cc.mutation.NoAlloted(); ok {
		_spec.SetField(center.FieldNoAlloted, field.TypeInt32, value)
		_node.NoAlloted = value
	}
	if value, ok := cc.mutation.PendingSeats(); ok {
		_spec.SetField(center.FieldPendingSeats, field.TypeInt32, value)
		_node.PendingSeats = value
	}
	if value, ok := cc.mutation.Status(); ok {
		_spec.SetField(center.FieldStatus, field.TypeBool, value)
		_node.Status = value
	}
	if value, ok := cc.mutation.ExamYear(); ok {
		_spec.SetField(center.FieldExamYear, field.TypeString, value)
		_node.ExamYear = value
	}
	if value, ok := cc.mutation.ConductedBy(); ok {
		_spec.SetField(center.FieldConductedBy, field.TypeString, value)
		_node.ConductedBy = value
	}
	if value, ok := cc.mutation.ConductedByFacilityID(); ok {
		_spec.SetField(center.FieldConductedByFacilityID, field.TypeString, value)
		_node.ConductedByFacilityID = value
	}
	if value, ok := cc.mutation.UpdatedAt(); ok {
		_spec.SetField(center.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := cc.mutation.UpdatedBy(); ok {
		_spec.SetField(center.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if value, ok := cc.mutation.Papers(); ok {
		_spec.SetField(center.FieldPapers, field.TypeJSON, value)
		_node.Papers = value
	}
	if nodes := cc.mutation.ApplicationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   center.ApplicationsTable,
			Columns: []string{center.ApplicationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(application.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.ExamCentresRefIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   center.ExamCentresRefTable,
			Columns: []string{center.ExamCentresRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_ip.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.ExamCentresRefPSIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   center.ExamCentresRefPSTable,
			Columns: []string{center.ExamCentresRefPSColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_ps.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.ExamCentresRefGDSPAIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   center.ExamCentresRefGDSPATable,
			Columns: []string{center.ExamCentresRefGDSPAColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_gdspa.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.ExamCentresRefPMPAIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   center.ExamCentresRefPMPATable,
			Columns: []string{center.ExamCentresRefPMPAColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_pmpa.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.ExamCentresRefGDSPMIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   center.ExamCentresRefGDSPMTable,
			Columns: []string{center.ExamCentresRefGDSPMColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_gdspm.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.ExamscentresIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   center.ExamscentresTable,
			Columns: []string{center.ExamscentresColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(examcitycenter.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.ExamCentresRefMTSPMMGIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   center.ExamCentresRefMTSPMMGTable,
			Columns: []string{center.ExamCentresRefMTSPMMGColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_application_mtspmmg.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.ExaCenterHallRefIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   center.ExaCenterHallRefTable,
			Columns: []string{center.ExaCenterHallRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(examcenterhall.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.CentresipIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   center.CentresipTable,
			Columns: []string{center.CentresipColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ExamCode = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.LogDataIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   center.LogDataTable,
			Columns: []string{center.LogDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(logs.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// CenterCreateBulk is the builder for creating many Center entities in bulk.
type CenterCreateBulk struct {
	config
	builders []*CenterCreate
}

// Save creates the Center entities in the database.
func (ccb *CenterCreateBulk) Save(ctx context.Context) ([]*Center, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ccb.builders))
	nodes := make([]*Center, len(ccb.builders))
	mutators := make([]Mutator, len(ccb.builders))
	for i := range ccb.builders {
		func(i int, root context.Context) {
			builder := ccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CenterMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ccb *CenterCreateBulk) SaveX(ctx context.Context) []*Center {
	v, err := ccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ccb *CenterCreateBulk) Exec(ctx context.Context) error {
	_, err := ccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccb *CenterCreateBulk) ExecX(ctx context.Context) {
	if err := ccb.Exec(ctx); err != nil {
		panic(err)
	}
}
