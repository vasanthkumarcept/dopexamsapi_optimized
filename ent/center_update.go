// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"recruit/ent/application"
	"recruit/ent/center"
	"recruit/ent/exam"
	"recruit/ent/exam_application_mtspmmg"
	"recruit/ent/exam_applications_gdspa"
	"recruit/ent/exam_applications_gdspm"
	"recruit/ent/exam_applications_ip"
	"recruit/ent/exam_applications_pmpa"
	"recruit/ent/exam_applications_ps"
	"recruit/ent/examcenterhall"
	"recruit/ent/examcitycenter"
	"recruit/ent/logs"
	"recruit/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
)

// CenterUpdate is the builder for updating Center entities.
type CenterUpdate struct {
	config
	hooks    []Hook
	mutation *CenterMutation
}

// Where appends a list predicates to the CenterUpdate builder.
func (cu *CenterUpdate) Where(ps ...predicate.Center) *CenterUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetCityID sets the "CityID" field.
func (cu *CenterUpdate) SetCityID(i int32) *CenterUpdate {
	cu.mutation.ResetCityID()
	cu.mutation.SetCityID(i)
	return cu
}

// SetNillableCityID sets the "CityID" field if the given value is not nil.
func (cu *CenterUpdate) SetNillableCityID(i *int32) *CenterUpdate {
	if i != nil {
		cu.SetCityID(*i)
	}
	return cu
}

// AddCityID adds i to the "CityID" field.
func (cu *CenterUpdate) AddCityID(i int32) *CenterUpdate {
	cu.mutation.AddCityID(i)
	return cu
}

// ClearCityID clears the value of the "CityID" field.
func (cu *CenterUpdate) ClearCityID() *CenterUpdate {
	cu.mutation.ClearCityID()
	return cu
}

// SetNodalOfficerCode sets the "NodalOfficerCode" field.
func (cu *CenterUpdate) SetNodalOfficerCode(i int32) *CenterUpdate {
	cu.mutation.ResetNodalOfficerCode()
	cu.mutation.SetNodalOfficerCode(i)
	return cu
}

// SetNillableNodalOfficerCode sets the "NodalOfficerCode" field if the given value is not nil.
func (cu *CenterUpdate) SetNillableNodalOfficerCode(i *int32) *CenterUpdate {
	if i != nil {
		cu.SetNodalOfficerCode(*i)
	}
	return cu
}

// AddNodalOfficerCode adds i to the "NodalOfficerCode" field.
func (cu *CenterUpdate) AddNodalOfficerCode(i int32) *CenterUpdate {
	cu.mutation.AddNodalOfficerCode(i)
	return cu
}

// ClearNodalOfficerCode clears the value of the "NodalOfficerCode" field.
func (cu *CenterUpdate) ClearNodalOfficerCode() *CenterUpdate {
	cu.mutation.ClearNodalOfficerCode()
	return cu
}

// SetExamCenterName sets the "ExamCenterName" field.
func (cu *CenterUpdate) SetExamCenterName(s string) *CenterUpdate {
	cu.mutation.SetExamCenterName(s)
	return cu
}

// SetNillableExamCenterName sets the "ExamCenterName" field if the given value is not nil.
func (cu *CenterUpdate) SetNillableExamCenterName(s *string) *CenterUpdate {
	if s != nil {
		cu.SetExamCenterName(*s)
	}
	return cu
}

// ClearExamCenterName clears the value of the "ExamCenterName" field.
func (cu *CenterUpdate) ClearExamCenterName() *CenterUpdate {
	cu.mutation.ClearExamCenterName()
	return cu
}

// SetExamCode sets the "ExamCode" field.
func (cu *CenterUpdate) SetExamCode(i int32) *CenterUpdate {
	cu.mutation.SetExamCode(i)
	return cu
}

// SetNillableExamCode sets the "ExamCode" field if the given value is not nil.
func (cu *CenterUpdate) SetNillableExamCode(i *int32) *CenterUpdate {
	if i != nil {
		cu.SetExamCode(*i)
	}
	return cu
}

// ClearExamCode clears the value of the "ExamCode" field.
func (cu *CenterUpdate) ClearExamCode() *CenterUpdate {
	cu.mutation.ClearExamCode()
	return cu
}

// SetRegionID sets the "RegionID" field.
func (cu *CenterUpdate) SetRegionID(i int32) *CenterUpdate {
	cu.mutation.ResetRegionID()
	cu.mutation.SetRegionID(i)
	return cu
}

// SetNillableRegionID sets the "RegionID" field if the given value is not nil.
func (cu *CenterUpdate) SetNillableRegionID(i *int32) *CenterUpdate {
	if i != nil {
		cu.SetRegionID(*i)
	}
	return cu
}

// AddRegionID adds i to the "RegionID" field.
func (cu *CenterUpdate) AddRegionID(i int32) *CenterUpdate {
	cu.mutation.AddRegionID(i)
	return cu
}

// ClearRegionID clears the value of the "RegionID" field.
func (cu *CenterUpdate) ClearRegionID() *CenterUpdate {
	cu.mutation.ClearRegionID()
	return cu
}

// SetCircleID sets the "CircleID" field.
func (cu *CenterUpdate) SetCircleID(i int32) *CenterUpdate {
	cu.mutation.ResetCircleID()
	cu.mutation.SetCircleID(i)
	return cu
}

// SetNillableCircleID sets the "CircleID" field if the given value is not nil.
func (cu *CenterUpdate) SetNillableCircleID(i *int32) *CenterUpdate {
	if i != nil {
		cu.SetCircleID(*i)
	}
	return cu
}

// AddCircleID adds i to the "CircleID" field.
func (cu *CenterUpdate) AddCircleID(i int32) *CenterUpdate {
	cu.mutation.AddCircleID(i)
	return cu
}

// ClearCircleID clears the value of the "CircleID" field.
func (cu *CenterUpdate) ClearCircleID() *CenterUpdate {
	cu.mutation.ClearCircleID()
	return cu
}

// SetDivisionID sets the "DivisionID" field.
func (cu *CenterUpdate) SetDivisionID(i int32) *CenterUpdate {
	cu.mutation.ResetDivisionID()
	cu.mutation.SetDivisionID(i)
	return cu
}

// SetNillableDivisionID sets the "DivisionID" field if the given value is not nil.
func (cu *CenterUpdate) SetNillableDivisionID(i *int32) *CenterUpdate {
	if i != nil {
		cu.SetDivisionID(*i)
	}
	return cu
}

// AddDivisionID adds i to the "DivisionID" field.
func (cu *CenterUpdate) AddDivisionID(i int32) *CenterUpdate {
	cu.mutation.AddDivisionID(i)
	return cu
}

// ClearDivisionID clears the value of the "DivisionID" field.
func (cu *CenterUpdate) ClearDivisionID() *CenterUpdate {
	cu.mutation.ClearDivisionID()
	return cu
}

// SetFacilityID sets the "FacilityID" field.
func (cu *CenterUpdate) SetFacilityID(i int32) *CenterUpdate {
	cu.mutation.ResetFacilityID()
	cu.mutation.SetFacilityID(i)
	return cu
}

// SetNillableFacilityID sets the "FacilityID" field if the given value is not nil.
func (cu *CenterUpdate) SetNillableFacilityID(i *int32) *CenterUpdate {
	if i != nil {
		cu.SetFacilityID(*i)
	}
	return cu
}

// AddFacilityID adds i to the "FacilityID" field.
func (cu *CenterUpdate) AddFacilityID(i int32) *CenterUpdate {
	cu.mutation.AddFacilityID(i)
	return cu
}

// ClearFacilityID clears the value of the "FacilityID" field.
func (cu *CenterUpdate) ClearFacilityID() *CenterUpdate {
	cu.mutation.ClearFacilityID()
	return cu
}

// SetExamNameCode sets the "ExamNameCode" field.
func (cu *CenterUpdate) SetExamNameCode(s string) *CenterUpdate {
	cu.mutation.SetExamNameCode(s)
	return cu
}

// SetNillableExamNameCode sets the "ExamNameCode" field if the given value is not nil.
func (cu *CenterUpdate) SetNillableExamNameCode(s *string) *CenterUpdate {
	if s != nil {
		cu.SetExamNameCode(*s)
	}
	return cu
}

// ClearExamNameCode clears the value of the "ExamNameCode" field.
func (cu *CenterUpdate) ClearExamNameCode() *CenterUpdate {
	cu.mutation.ClearExamNameCode()
	return cu
}

// SetExamName sets the "ExamName" field.
func (cu *CenterUpdate) SetExamName(s string) *CenterUpdate {
	cu.mutation.SetExamName(s)
	return cu
}

// SetNillableExamName sets the "ExamName" field if the given value is not nil.
func (cu *CenterUpdate) SetNillableExamName(s *string) *CenterUpdate {
	if s != nil {
		cu.SetExamName(*s)
	}
	return cu
}

// ClearExamName clears the value of the "ExamName" field.
func (cu *CenterUpdate) ClearExamName() *CenterUpdate {
	cu.mutation.ClearExamName()
	return cu
}

// SetNAUserName sets the "NAUserName" field.
func (cu *CenterUpdate) SetNAUserName(s string) *CenterUpdate {
	cu.mutation.SetNAUserName(s)
	return cu
}

// SetNillableNAUserName sets the "NAUserName" field if the given value is not nil.
func (cu *CenterUpdate) SetNillableNAUserName(s *string) *CenterUpdate {
	if s != nil {
		cu.SetNAUserName(*s)
	}
	return cu
}

// ClearNAUserName clears the value of the "NAUserName" field.
func (cu *CenterUpdate) ClearNAUserName() *CenterUpdate {
	cu.mutation.ClearNAUserName()
	return cu
}

// SetNodalOfficeFacilityId sets the "NodalOfficeFacilityId" field.
func (cu *CenterUpdate) SetNodalOfficeFacilityId(s string) *CenterUpdate {
	cu.mutation.SetNodalOfficeFacilityId(s)
	return cu
}

// SetNillableNodalOfficeFacilityId sets the "NodalOfficeFacilityId" field if the given value is not nil.
func (cu *CenterUpdate) SetNillableNodalOfficeFacilityId(s *string) *CenterUpdate {
	if s != nil {
		cu.SetNodalOfficeFacilityId(*s)
	}
	return cu
}

// ClearNodalOfficeFacilityId clears the value of the "NodalOfficeFacilityId" field.
func (cu *CenterUpdate) ClearNodalOfficeFacilityId() *CenterUpdate {
	cu.mutation.ClearNodalOfficeFacilityId()
	return cu
}

// SetAdminCircleOfficeID sets the "AdminCircleOfficeID" field.
func (cu *CenterUpdate) SetAdminCircleOfficeID(s string) *CenterUpdate {
	cu.mutation.SetAdminCircleOfficeID(s)
	return cu
}

// SetNillableAdminCircleOfficeID sets the "AdminCircleOfficeID" field if the given value is not nil.
func (cu *CenterUpdate) SetNillableAdminCircleOfficeID(s *string) *CenterUpdate {
	if s != nil {
		cu.SetAdminCircleOfficeID(*s)
	}
	return cu
}

// ClearAdminCircleOfficeID clears the value of the "AdminCircleOfficeID" field.
func (cu *CenterUpdate) ClearAdminCircleOfficeID() *CenterUpdate {
	cu.mutation.ClearAdminCircleOfficeID()
	return cu
}

// SetAddress sets the "Address" field.
func (cu *CenterUpdate) SetAddress(s string) *CenterUpdate {
	cu.mutation.SetAddress(s)
	return cu
}

// SetNillableAddress sets the "Address" field if the given value is not nil.
func (cu *CenterUpdate) SetNillableAddress(s *string) *CenterUpdate {
	if s != nil {
		cu.SetAddress(*s)
	}
	return cu
}

// ClearAddress clears the value of the "Address" field.
func (cu *CenterUpdate) ClearAddress() *CenterUpdate {
	cu.mutation.ClearAddress()
	return cu
}

// SetLandmark sets the "Landmark" field.
func (cu *CenterUpdate) SetLandmark(s string) *CenterUpdate {
	cu.mutation.SetLandmark(s)
	return cu
}

// SetNillableLandmark sets the "Landmark" field if the given value is not nil.
func (cu *CenterUpdate) SetNillableLandmark(s *string) *CenterUpdate {
	if s != nil {
		cu.SetLandmark(*s)
	}
	return cu
}

// ClearLandmark clears the value of the "Landmark" field.
func (cu *CenterUpdate) ClearLandmark() *CenterUpdate {
	cu.mutation.ClearLandmark()
	return cu
}

// SetCenterCityName sets the "CenterCityName" field.
func (cu *CenterUpdate) SetCenterCityName(s string) *CenterUpdate {
	cu.mutation.SetCenterCityName(s)
	return cu
}

// SetNillableCenterCityName sets the "CenterCityName" field if the given value is not nil.
func (cu *CenterUpdate) SetNillableCenterCityName(s *string) *CenterUpdate {
	if s != nil {
		cu.SetCenterCityName(*s)
	}
	return cu
}

// ClearCenterCityName clears the value of the "CenterCityName" field.
func (cu *CenterUpdate) ClearCenterCityName() *CenterUpdate {
	cu.mutation.ClearCenterCityName()
	return cu
}

// SetPincode sets the "Pincode" field.
func (cu *CenterUpdate) SetPincode(i int32) *CenterUpdate {
	cu.mutation.ResetPincode()
	cu.mutation.SetPincode(i)
	return cu
}

// SetNillablePincode sets the "Pincode" field if the given value is not nil.
func (cu *CenterUpdate) SetNillablePincode(i *int32) *CenterUpdate {
	if i != nil {
		cu.SetPincode(*i)
	}
	return cu
}

// AddPincode adds i to the "Pincode" field.
func (cu *CenterUpdate) AddPincode(i int32) *CenterUpdate {
	cu.mutation.AddPincode(i)
	return cu
}

// ClearPincode clears the value of the "Pincode" field.
func (cu *CenterUpdate) ClearPincode() *CenterUpdate {
	cu.mutation.ClearPincode()
	return cu
}

// SetMaxSeats sets the "MaxSeats" field.
func (cu *CenterUpdate) SetMaxSeats(i int32) *CenterUpdate {
	cu.mutation.ResetMaxSeats()
	cu.mutation.SetMaxSeats(i)
	return cu
}

// SetNillableMaxSeats sets the "MaxSeats" field if the given value is not nil.
func (cu *CenterUpdate) SetNillableMaxSeats(i *int32) *CenterUpdate {
	if i != nil {
		cu.SetMaxSeats(*i)
	}
	return cu
}

// AddMaxSeats adds i to the "MaxSeats" field.
func (cu *CenterUpdate) AddMaxSeats(i int32) *CenterUpdate {
	cu.mutation.AddMaxSeats(i)
	return cu
}

// ClearMaxSeats clears the value of the "MaxSeats" field.
func (cu *CenterUpdate) ClearMaxSeats() *CenterUpdate {
	cu.mutation.ClearMaxSeats()
	return cu
}

// SetNoAlloted sets the "NoAlloted" field.
func (cu *CenterUpdate) SetNoAlloted(i int32) *CenterUpdate {
	cu.mutation.ResetNoAlloted()
	cu.mutation.SetNoAlloted(i)
	return cu
}

// SetNillableNoAlloted sets the "NoAlloted" field if the given value is not nil.
func (cu *CenterUpdate) SetNillableNoAlloted(i *int32) *CenterUpdate {
	if i != nil {
		cu.SetNoAlloted(*i)
	}
	return cu
}

// AddNoAlloted adds i to the "NoAlloted" field.
func (cu *CenterUpdate) AddNoAlloted(i int32) *CenterUpdate {
	cu.mutation.AddNoAlloted(i)
	return cu
}

// ClearNoAlloted clears the value of the "NoAlloted" field.
func (cu *CenterUpdate) ClearNoAlloted() *CenterUpdate {
	cu.mutation.ClearNoAlloted()
	return cu
}

// SetPendingSeats sets the "PendingSeats" field.
func (cu *CenterUpdate) SetPendingSeats(i int32) *CenterUpdate {
	cu.mutation.ResetPendingSeats()
	cu.mutation.SetPendingSeats(i)
	return cu
}

// SetNillablePendingSeats sets the "PendingSeats" field if the given value is not nil.
func (cu *CenterUpdate) SetNillablePendingSeats(i *int32) *CenterUpdate {
	if i != nil {
		cu.SetPendingSeats(*i)
	}
	return cu
}

// AddPendingSeats adds i to the "PendingSeats" field.
func (cu *CenterUpdate) AddPendingSeats(i int32) *CenterUpdate {
	cu.mutation.AddPendingSeats(i)
	return cu
}

// ClearPendingSeats clears the value of the "PendingSeats" field.
func (cu *CenterUpdate) ClearPendingSeats() *CenterUpdate {
	cu.mutation.ClearPendingSeats()
	return cu
}

// SetStatus sets the "Status" field.
func (cu *CenterUpdate) SetStatus(b bool) *CenterUpdate {
	cu.mutation.SetStatus(b)
	return cu
}

// SetNillableStatus sets the "Status" field if the given value is not nil.
func (cu *CenterUpdate) SetNillableStatus(b *bool) *CenterUpdate {
	if b != nil {
		cu.SetStatus(*b)
	}
	return cu
}

// ClearStatus clears the value of the "Status" field.
func (cu *CenterUpdate) ClearStatus() *CenterUpdate {
	cu.mutation.ClearStatus()
	return cu
}

// SetExamYear sets the "ExamYear" field.
func (cu *CenterUpdate) SetExamYear(s string) *CenterUpdate {
	cu.mutation.SetExamYear(s)
	return cu
}

// SetNillableExamYear sets the "ExamYear" field if the given value is not nil.
func (cu *CenterUpdate) SetNillableExamYear(s *string) *CenterUpdate {
	if s != nil {
		cu.SetExamYear(*s)
	}
	return cu
}

// ClearExamYear clears the value of the "ExamYear" field.
func (cu *CenterUpdate) ClearExamYear() *CenterUpdate {
	cu.mutation.ClearExamYear()
	return cu
}

// SetConductedBy sets the "ConductedBy" field.
func (cu *CenterUpdate) SetConductedBy(s string) *CenterUpdate {
	cu.mutation.SetConductedBy(s)
	return cu
}

// SetNillableConductedBy sets the "ConductedBy" field if the given value is not nil.
func (cu *CenterUpdate) SetNillableConductedBy(s *string) *CenterUpdate {
	if s != nil {
		cu.SetConductedBy(*s)
	}
	return cu
}

// ClearConductedBy clears the value of the "ConductedBy" field.
func (cu *CenterUpdate) ClearConductedBy() *CenterUpdate {
	cu.mutation.ClearConductedBy()
	return cu
}

// SetConductedByFacilityID sets the "ConductedByFacilityID" field.
func (cu *CenterUpdate) SetConductedByFacilityID(s string) *CenterUpdate {
	cu.mutation.SetConductedByFacilityID(s)
	return cu
}

// SetNillableConductedByFacilityID sets the "ConductedByFacilityID" field if the given value is not nil.
func (cu *CenterUpdate) SetNillableConductedByFacilityID(s *string) *CenterUpdate {
	if s != nil {
		cu.SetConductedByFacilityID(*s)
	}
	return cu
}

// ClearConductedByFacilityID clears the value of the "ConductedByFacilityID" field.
func (cu *CenterUpdate) ClearConductedByFacilityID() *CenterUpdate {
	cu.mutation.ClearConductedByFacilityID()
	return cu
}

// SetUpdatedAt sets the "UpdatedAt" field.
func (cu *CenterUpdate) SetUpdatedAt(t time.Time) *CenterUpdate {
	cu.mutation.SetUpdatedAt(t)
	return cu
}

// SetNillableUpdatedAt sets the "UpdatedAt" field if the given value is not nil.
func (cu *CenterUpdate) SetNillableUpdatedAt(t *time.Time) *CenterUpdate {
	if t != nil {
		cu.SetUpdatedAt(*t)
	}
	return cu
}

// ClearUpdatedAt clears the value of the "UpdatedAt" field.
func (cu *CenterUpdate) ClearUpdatedAt() *CenterUpdate {
	cu.mutation.ClearUpdatedAt()
	return cu
}

// SetUpdatedBy sets the "UpdatedBy" field.
func (cu *CenterUpdate) SetUpdatedBy(s string) *CenterUpdate {
	cu.mutation.SetUpdatedBy(s)
	return cu
}

// SetNillableUpdatedBy sets the "UpdatedBy" field if the given value is not nil.
func (cu *CenterUpdate) SetNillableUpdatedBy(s *string) *CenterUpdate {
	if s != nil {
		cu.SetUpdatedBy(*s)
	}
	return cu
}

// ClearUpdatedBy clears the value of the "UpdatedBy" field.
func (cu *CenterUpdate) ClearUpdatedBy() *CenterUpdate {
	cu.mutation.ClearUpdatedBy()
	return cu
}

// SetPapers sets the "Papers" field.
func (cu *CenterUpdate) SetPapers(i []interface{}) *CenterUpdate {
	cu.mutation.SetPapers(i)
	return cu
}

// AppendPapers appends i to the "Papers" field.
func (cu *CenterUpdate) AppendPapers(i []interface{}) *CenterUpdate {
	cu.mutation.AppendPapers(i)
	return cu
}

// ClearPapers clears the value of the "Papers" field.
func (cu *CenterUpdate) ClearPapers() *CenterUpdate {
	cu.mutation.ClearPapers()
	return cu
}

// AddApplicationIDs adds the "applications" edge to the Application entity by IDs.
func (cu *CenterUpdate) AddApplicationIDs(ids ...int32) *CenterUpdate {
	cu.mutation.AddApplicationIDs(ids...)
	return cu
}

// AddApplications adds the "applications" edges to the Application entity.
func (cu *CenterUpdate) AddApplications(a ...*Application) *CenterUpdate {
	ids := make([]int32, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return cu.AddApplicationIDs(ids...)
}

// AddExamCentresRefIDs adds the "ExamCentresRef" edge to the Exam_Applications_IP entity by IDs.
func (cu *CenterUpdate) AddExamCentresRefIDs(ids ...int64) *CenterUpdate {
	cu.mutation.AddExamCentresRefIDs(ids...)
	return cu
}

// AddExamCentresRef adds the "ExamCentresRef" edges to the Exam_Applications_IP entity.
func (cu *CenterUpdate) AddExamCentresRef(e ...*Exam_Applications_IP) *CenterUpdate {
	ids := make([]int64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return cu.AddExamCentresRefIDs(ids...)
}

// AddExamCentresRefPSIDs adds the "ExamCentresRefPS" edge to the Exam_Applications_PS entity by IDs.
func (cu *CenterUpdate) AddExamCentresRefPSIDs(ids ...int64) *CenterUpdate {
	cu.mutation.AddExamCentresRefPSIDs(ids...)
	return cu
}

// AddExamCentresRefPS adds the "ExamCentresRefPS" edges to the Exam_Applications_PS entity.
func (cu *CenterUpdate) AddExamCentresRefPS(e ...*Exam_Applications_PS) *CenterUpdate {
	ids := make([]int64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return cu.AddExamCentresRefPSIDs(ids...)
}

// AddExamCentresRefGDSPAIDs adds the "ExamCentresRefGDSPA" edge to the Exam_Applications_GDSPA entity by IDs.
func (cu *CenterUpdate) AddExamCentresRefGDSPAIDs(ids ...int64) *CenterUpdate {
	cu.mutation.AddExamCentresRefGDSPAIDs(ids...)
	return cu
}

// AddExamCentresRefGDSPA adds the "ExamCentresRefGDSPA" edges to the Exam_Applications_GDSPA entity.
func (cu *CenterUpdate) AddExamCentresRefGDSPA(e ...*Exam_Applications_GDSPA) *CenterUpdate {
	ids := make([]int64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return cu.AddExamCentresRefGDSPAIDs(ids...)
}

// AddExamCentresRefPMPAIDs adds the "ExamCentresRefPMPA" edge to the Exam_Applications_PMPA entity by IDs.
func (cu *CenterUpdate) AddExamCentresRefPMPAIDs(ids ...int64) *CenterUpdate {
	cu.mutation.AddExamCentresRefPMPAIDs(ids...)
	return cu
}

// AddExamCentresRefPMPA adds the "ExamCentresRefPMPA" edges to the Exam_Applications_PMPA entity.
func (cu *CenterUpdate) AddExamCentresRefPMPA(e ...*Exam_Applications_PMPA) *CenterUpdate {
	ids := make([]int64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return cu.AddExamCentresRefPMPAIDs(ids...)
}

// AddExamCentresRefGDSPMIDs adds the "ExamCentresRefGDSPM" edge to the Exam_Applications_GDSPM entity by IDs.
func (cu *CenterUpdate) AddExamCentresRefGDSPMIDs(ids ...int64) *CenterUpdate {
	cu.mutation.AddExamCentresRefGDSPMIDs(ids...)
	return cu
}

// AddExamCentresRefGDSPM adds the "ExamCentresRefGDSPM" edges to the Exam_Applications_GDSPM entity.
func (cu *CenterUpdate) AddExamCentresRefGDSPM(e ...*Exam_Applications_GDSPM) *CenterUpdate {
	ids := make([]int64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return cu.AddExamCentresRefGDSPMIDs(ids...)
}

// AddExamscentreIDs adds the "Examscentres" edge to the ExamCityCenter entity by IDs.
func (cu *CenterUpdate) AddExamscentreIDs(ids ...int32) *CenterUpdate {
	cu.mutation.AddExamscentreIDs(ids...)
	return cu
}

// AddExamscentres adds the "Examscentres" edges to the ExamCityCenter entity.
func (cu *CenterUpdate) AddExamscentres(e ...*ExamCityCenter) *CenterUpdate {
	ids := make([]int32, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return cu.AddExamscentreIDs(ids...)
}

// AddExamCentresRefMTSPMMGIDs adds the "ExamCentresRefMTSPMMG" edge to the Exam_Application_MTSPMMG entity by IDs.
func (cu *CenterUpdate) AddExamCentresRefMTSPMMGIDs(ids ...int64) *CenterUpdate {
	cu.mutation.AddExamCentresRefMTSPMMGIDs(ids...)
	return cu
}

// AddExamCentresRefMTSPMMG adds the "ExamCentresRefMTSPMMG" edges to the Exam_Application_MTSPMMG entity.
func (cu *CenterUpdate) AddExamCentresRefMTSPMMG(e ...*Exam_Application_MTSPMMG) *CenterUpdate {
	ids := make([]int64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return cu.AddExamCentresRefMTSPMMGIDs(ids...)
}

// AddExaCenterHallRefIDs adds the "ExaCenterHallRef" edge to the ExamCenterHall entity by IDs.
func (cu *CenterUpdate) AddExaCenterHallRefIDs(ids ...int32) *CenterUpdate {
	cu.mutation.AddExaCenterHallRefIDs(ids...)
	return cu
}

// AddExaCenterHallRef adds the "ExaCenterHallRef" edges to the ExamCenterHall entity.
func (cu *CenterUpdate) AddExaCenterHallRef(e ...*ExamCenterHall) *CenterUpdate {
	ids := make([]int32, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return cu.AddExaCenterHallRefIDs(ids...)
}

// SetCentresipID sets the "centresip" edge to the Exam entity by ID.
func (cu *CenterUpdate) SetCentresipID(id int32) *CenterUpdate {
	cu.mutation.SetCentresipID(id)
	return cu
}

// SetNillableCentresipID sets the "centresip" edge to the Exam entity by ID if the given value is not nil.
func (cu *CenterUpdate) SetNillableCentresipID(id *int32) *CenterUpdate {
	if id != nil {
		cu = cu.SetCentresipID(*id)
	}
	return cu
}

// SetCentresip sets the "centresip" edge to the Exam entity.
func (cu *CenterUpdate) SetCentresip(e *Exam) *CenterUpdate {
	return cu.SetCentresipID(e.ID)
}

// AddLogDatumIDs adds the "LogData" edge to the Logs entity by IDs.
func (cu *CenterUpdate) AddLogDatumIDs(ids ...int64) *CenterUpdate {
	cu.mutation.AddLogDatumIDs(ids...)
	return cu
}

// AddLogData adds the "LogData" edges to the Logs entity.
func (cu *CenterUpdate) AddLogData(l ...*Logs) *CenterUpdate {
	ids := make([]int64, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return cu.AddLogDatumIDs(ids...)
}

// Mutation returns the CenterMutation object of the builder.
func (cu *CenterUpdate) Mutation() *CenterMutation {
	return cu.mutation
}

// ClearApplications clears all "applications" edges to the Application entity.
func (cu *CenterUpdate) ClearApplications() *CenterUpdate {
	cu.mutation.ClearApplications()
	return cu
}

// RemoveApplicationIDs removes the "applications" edge to Application entities by IDs.
func (cu *CenterUpdate) RemoveApplicationIDs(ids ...int32) *CenterUpdate {
	cu.mutation.RemoveApplicationIDs(ids...)
	return cu
}

// RemoveApplications removes "applications" edges to Application entities.
func (cu *CenterUpdate) RemoveApplications(a ...*Application) *CenterUpdate {
	ids := make([]int32, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return cu.RemoveApplicationIDs(ids...)
}

// ClearExamCentresRef clears all "ExamCentresRef" edges to the Exam_Applications_IP entity.
func (cu *CenterUpdate) ClearExamCentresRef() *CenterUpdate {
	cu.mutation.ClearExamCentresRef()
	return cu
}

// RemoveExamCentresRefIDs removes the "ExamCentresRef" edge to Exam_Applications_IP entities by IDs.
func (cu *CenterUpdate) RemoveExamCentresRefIDs(ids ...int64) *CenterUpdate {
	cu.mutation.RemoveExamCentresRefIDs(ids...)
	return cu
}

// RemoveExamCentresRef removes "ExamCentresRef" edges to Exam_Applications_IP entities.
func (cu *CenterUpdate) RemoveExamCentresRef(e ...*Exam_Applications_IP) *CenterUpdate {
	ids := make([]int64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return cu.RemoveExamCentresRefIDs(ids...)
}

// ClearExamCentresRefPS clears all "ExamCentresRefPS" edges to the Exam_Applications_PS entity.
func (cu *CenterUpdate) ClearExamCentresRefPS() *CenterUpdate {
	cu.mutation.ClearExamCentresRefPS()
	return cu
}

// RemoveExamCentresRefPSIDs removes the "ExamCentresRefPS" edge to Exam_Applications_PS entities by IDs.
func (cu *CenterUpdate) RemoveExamCentresRefPSIDs(ids ...int64) *CenterUpdate {
	cu.mutation.RemoveExamCentresRefPSIDs(ids...)
	return cu
}

// RemoveExamCentresRefPS removes "ExamCentresRefPS" edges to Exam_Applications_PS entities.
func (cu *CenterUpdate) RemoveExamCentresRefPS(e ...*Exam_Applications_PS) *CenterUpdate {
	ids := make([]int64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return cu.RemoveExamCentresRefPSIDs(ids...)
}

// ClearExamCentresRefGDSPA clears all "ExamCentresRefGDSPA" edges to the Exam_Applications_GDSPA entity.
func (cu *CenterUpdate) ClearExamCentresRefGDSPA() *CenterUpdate {
	cu.mutation.ClearExamCentresRefGDSPA()
	return cu
}

// RemoveExamCentresRefGDSPAIDs removes the "ExamCentresRefGDSPA" edge to Exam_Applications_GDSPA entities by IDs.
func (cu *CenterUpdate) RemoveExamCentresRefGDSPAIDs(ids ...int64) *CenterUpdate {
	cu.mutation.RemoveExamCentresRefGDSPAIDs(ids...)
	return cu
}

// RemoveExamCentresRefGDSPA removes "ExamCentresRefGDSPA" edges to Exam_Applications_GDSPA entities.
func (cu *CenterUpdate) RemoveExamCentresRefGDSPA(e ...*Exam_Applications_GDSPA) *CenterUpdate {
	ids := make([]int64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return cu.RemoveExamCentresRefGDSPAIDs(ids...)
}

// ClearExamCentresRefPMPA clears all "ExamCentresRefPMPA" edges to the Exam_Applications_PMPA entity.
func (cu *CenterUpdate) ClearExamCentresRefPMPA() *CenterUpdate {
	cu.mutation.ClearExamCentresRefPMPA()
	return cu
}

// RemoveExamCentresRefPMPAIDs removes the "ExamCentresRefPMPA" edge to Exam_Applications_PMPA entities by IDs.
func (cu *CenterUpdate) RemoveExamCentresRefPMPAIDs(ids ...int64) *CenterUpdate {
	cu.mutation.RemoveExamCentresRefPMPAIDs(ids...)
	return cu
}

// RemoveExamCentresRefPMPA removes "ExamCentresRefPMPA" edges to Exam_Applications_PMPA entities.
func (cu *CenterUpdate) RemoveExamCentresRefPMPA(e ...*Exam_Applications_PMPA) *CenterUpdate {
	ids := make([]int64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return cu.RemoveExamCentresRefPMPAIDs(ids...)
}

// ClearExamCentresRefGDSPM clears all "ExamCentresRefGDSPM" edges to the Exam_Applications_GDSPM entity.
func (cu *CenterUpdate) ClearExamCentresRefGDSPM() *CenterUpdate {
	cu.mutation.ClearExamCentresRefGDSPM()
	return cu
}

// RemoveExamCentresRefGDSPMIDs removes the "ExamCentresRefGDSPM" edge to Exam_Applications_GDSPM entities by IDs.
func (cu *CenterUpdate) RemoveExamCentresRefGDSPMIDs(ids ...int64) *CenterUpdate {
	cu.mutation.RemoveExamCentresRefGDSPMIDs(ids...)
	return cu
}

// RemoveExamCentresRefGDSPM removes "ExamCentresRefGDSPM" edges to Exam_Applications_GDSPM entities.
func (cu *CenterUpdate) RemoveExamCentresRefGDSPM(e ...*Exam_Applications_GDSPM) *CenterUpdate {
	ids := make([]int64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return cu.RemoveExamCentresRefGDSPMIDs(ids...)
}

// ClearExamscentres clears all "Examscentres" edges to the ExamCityCenter entity.
func (cu *CenterUpdate) ClearExamscentres() *CenterUpdate {
	cu.mutation.ClearExamscentres()
	return cu
}

// RemoveExamscentreIDs removes the "Examscentres" edge to ExamCityCenter entities by IDs.
func (cu *CenterUpdate) RemoveExamscentreIDs(ids ...int32) *CenterUpdate {
	cu.mutation.RemoveExamscentreIDs(ids...)
	return cu
}

// RemoveExamscentres removes "Examscentres" edges to ExamCityCenter entities.
func (cu *CenterUpdate) RemoveExamscentres(e ...*ExamCityCenter) *CenterUpdate {
	ids := make([]int32, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return cu.RemoveExamscentreIDs(ids...)
}

// ClearExamCentresRefMTSPMMG clears all "ExamCentresRefMTSPMMG" edges to the Exam_Application_MTSPMMG entity.
func (cu *CenterUpdate) ClearExamCentresRefMTSPMMG() *CenterUpdate {
	cu.mutation.ClearExamCentresRefMTSPMMG()
	return cu
}

// RemoveExamCentresRefMTSPMMGIDs removes the "ExamCentresRefMTSPMMG" edge to Exam_Application_MTSPMMG entities by IDs.
func (cu *CenterUpdate) RemoveExamCentresRefMTSPMMGIDs(ids ...int64) *CenterUpdate {
	cu.mutation.RemoveExamCentresRefMTSPMMGIDs(ids...)
	return cu
}

// RemoveExamCentresRefMTSPMMG removes "ExamCentresRefMTSPMMG" edges to Exam_Application_MTSPMMG entities.
func (cu *CenterUpdate) RemoveExamCentresRefMTSPMMG(e ...*Exam_Application_MTSPMMG) *CenterUpdate {
	ids := make([]int64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return cu.RemoveExamCentresRefMTSPMMGIDs(ids...)
}

// ClearExaCenterHallRef clears all "ExaCenterHallRef" edges to the ExamCenterHall entity.
func (cu *CenterUpdate) ClearExaCenterHallRef() *CenterUpdate {
	cu.mutation.ClearExaCenterHallRef()
	return cu
}

// RemoveExaCenterHallRefIDs removes the "ExaCenterHallRef" edge to ExamCenterHall entities by IDs.
func (cu *CenterUpdate) RemoveExaCenterHallRefIDs(ids ...int32) *CenterUpdate {
	cu.mutation.RemoveExaCenterHallRefIDs(ids...)
	return cu
}

// RemoveExaCenterHallRef removes "ExaCenterHallRef" edges to ExamCenterHall entities.
func (cu *CenterUpdate) RemoveExaCenterHallRef(e ...*ExamCenterHall) *CenterUpdate {
	ids := make([]int32, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return cu.RemoveExaCenterHallRefIDs(ids...)
}

// ClearCentresip clears the "centresip" edge to the Exam entity.
func (cu *CenterUpdate) ClearCentresip() *CenterUpdate {
	cu.mutation.ClearCentresip()
	return cu
}

// ClearLogData clears all "LogData" edges to the Logs entity.
func (cu *CenterUpdate) ClearLogData() *CenterUpdate {
	cu.mutation.ClearLogData()
	return cu
}

// RemoveLogDatumIDs removes the "LogData" edge to Logs entities by IDs.
func (cu *CenterUpdate) RemoveLogDatumIDs(ids ...int64) *CenterUpdate {
	cu.mutation.RemoveLogDatumIDs(ids...)
	return cu
}

// RemoveLogData removes "LogData" edges to Logs entities.
func (cu *CenterUpdate) RemoveLogData(l ...*Logs) *CenterUpdate {
	ids := make([]int64, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return cu.RemoveLogDatumIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *CenterUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, cu.sqlSave, cu.mutation, cu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *CenterUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *CenterUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *CenterUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cu *CenterUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(center.Table, center.Columns, sqlgraph.NewFieldSpec(center.FieldID, field.TypeInt32))
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.CityID(); ok {
		_spec.SetField(center.FieldCityID, field.TypeInt32, value)
	}
	if value, ok := cu.mutation.AddedCityID(); ok {
		_spec.AddField(center.FieldCityID, field.TypeInt32, value)
	}
	if cu.mutation.CityIDCleared() {
		_spec.ClearField(center.FieldCityID, field.TypeInt32)
	}
	if value, ok := cu.mutation.NodalOfficerCode(); ok {
		_spec.SetField(center.FieldNodalOfficerCode, field.TypeInt32, value)
	}
	if value, ok := cu.mutation.AddedNodalOfficerCode(); ok {
		_spec.AddField(center.FieldNodalOfficerCode, field.TypeInt32, value)
	}
	if cu.mutation.NodalOfficerCodeCleared() {
		_spec.ClearField(center.FieldNodalOfficerCode, field.TypeInt32)
	}
	if value, ok := cu.mutation.ExamCenterName(); ok {
		_spec.SetField(center.FieldExamCenterName, field.TypeString, value)
	}
	if cu.mutation.ExamCenterNameCleared() {
		_spec.ClearField(center.FieldExamCenterName, field.TypeString)
	}
	if value, ok := cu.mutation.RegionID(); ok {
		_spec.SetField(center.FieldRegionID, field.TypeInt32, value)
	}
	if value, ok := cu.mutation.AddedRegionID(); ok {
		_spec.AddField(center.FieldRegionID, field.TypeInt32, value)
	}
	if cu.mutation.RegionIDCleared() {
		_spec.ClearField(center.FieldRegionID, field.TypeInt32)
	}
	if value, ok := cu.mutation.CircleID(); ok {
		_spec.SetField(center.FieldCircleID, field.TypeInt32, value)
	}
	if value, ok := cu.mutation.AddedCircleID(); ok {
		_spec.AddField(center.FieldCircleID, field.TypeInt32, value)
	}
	if cu.mutation.CircleIDCleared() {
		_spec.ClearField(center.FieldCircleID, field.TypeInt32)
	}
	if value, ok := cu.mutation.DivisionID(); ok {
		_spec.SetField(center.FieldDivisionID, field.TypeInt32, value)
	}
	if value, ok := cu.mutation.AddedDivisionID(); ok {
		_spec.AddField(center.FieldDivisionID, field.TypeInt32, value)
	}
	if cu.mutation.DivisionIDCleared() {
		_spec.ClearField(center.FieldDivisionID, field.TypeInt32)
	}
	if value, ok := cu.mutation.FacilityID(); ok {
		_spec.SetField(center.FieldFacilityID, field.TypeInt32, value)
	}
	if value, ok := cu.mutation.AddedFacilityID(); ok {
		_spec.AddField(center.FieldFacilityID, field.TypeInt32, value)
	}
	if cu.mutation.FacilityIDCleared() {
		_spec.ClearField(center.FieldFacilityID, field.TypeInt32)
	}
	if value, ok := cu.mutation.ExamNameCode(); ok {
		_spec.SetField(center.FieldExamNameCode, field.TypeString, value)
	}
	if cu.mutation.ExamNameCodeCleared() {
		_spec.ClearField(center.FieldExamNameCode, field.TypeString)
	}
	if value, ok := cu.mutation.ExamName(); ok {
		_spec.SetField(center.FieldExamName, field.TypeString, value)
	}
	if cu.mutation.ExamNameCleared() {
		_spec.ClearField(center.FieldExamName, field.TypeString)
	}
	if value, ok := cu.mutation.NAUserName(); ok {
		_spec.SetField(center.FieldNAUserName, field.TypeString, value)
	}
	if cu.mutation.NAUserNameCleared() {
		_spec.ClearField(center.FieldNAUserName, field.TypeString)
	}
	if value, ok := cu.mutation.NodalOfficeFacilityId(); ok {
		_spec.SetField(center.FieldNodalOfficeFacilityId, field.TypeString, value)
	}
	if cu.mutation.NodalOfficeFacilityIdCleared() {
		_spec.ClearField(center.FieldNodalOfficeFacilityId, field.TypeString)
	}
	if value, ok := cu.mutation.AdminCircleOfficeID(); ok {
		_spec.SetField(center.FieldAdminCircleOfficeID, field.TypeString, value)
	}
	if cu.mutation.AdminCircleOfficeIDCleared() {
		_spec.ClearField(center.FieldAdminCircleOfficeID, field.TypeString)
	}
	if value, ok := cu.mutation.Address(); ok {
		_spec.SetField(center.FieldAddress, field.TypeString, value)
	}
	if cu.mutation.AddressCleared() {
		_spec.ClearField(center.FieldAddress, field.TypeString)
	}
	if value, ok := cu.mutation.Landmark(); ok {
		_spec.SetField(center.FieldLandmark, field.TypeString, value)
	}
	if cu.mutation.LandmarkCleared() {
		_spec.ClearField(center.FieldLandmark, field.TypeString)
	}
	if value, ok := cu.mutation.CenterCityName(); ok {
		_spec.SetField(center.FieldCenterCityName, field.TypeString, value)
	}
	if cu.mutation.CenterCityNameCleared() {
		_spec.ClearField(center.FieldCenterCityName, field.TypeString)
	}
	if value, ok := cu.mutation.Pincode(); ok {
		_spec.SetField(center.FieldPincode, field.TypeInt32, value)
	}
	if value, ok := cu.mutation.AddedPincode(); ok {
		_spec.AddField(center.FieldPincode, field.TypeInt32, value)
	}
	if cu.mutation.PincodeCleared() {
		_spec.ClearField(center.FieldPincode, field.TypeInt32)
	}
	if value, ok := cu.mutation.MaxSeats(); ok {
		_spec.SetField(center.FieldMaxSeats, field.TypeInt32, value)
	}
	if value, ok := cu.mutation.AddedMaxSeats(); ok {
		_spec.AddField(center.FieldMaxSeats, field.TypeInt32, value)
	}
	if cu.mutation.MaxSeatsCleared() {
		_spec.ClearField(center.FieldMaxSeats, field.TypeInt32)
	}
	if value, ok := cu.mutation.NoAlloted(); ok {
		_spec.SetField(center.FieldNoAlloted, field.TypeInt32, value)
	}
	if value, ok := cu.mutation.AddedNoAlloted(); ok {
		_spec.AddField(center.FieldNoAlloted, field.TypeInt32, value)
	}
	if cu.mutation.NoAllotedCleared() {
		_spec.ClearField(center.FieldNoAlloted, field.TypeInt32)
	}
	if value, ok := cu.mutation.PendingSeats(); ok {
		_spec.SetField(center.FieldPendingSeats, field.TypeInt32, value)
	}
	if value, ok := cu.mutation.AddedPendingSeats(); ok {
		_spec.AddField(center.FieldPendingSeats, field.TypeInt32, value)
	}
	if cu.mutation.PendingSeatsCleared() {
		_spec.ClearField(center.FieldPendingSeats, field.TypeInt32)
	}
	if value, ok := cu.mutation.Status(); ok {
		_spec.SetField(center.FieldStatus, field.TypeBool, value)
	}
	if cu.mutation.StatusCleared() {
		_spec.ClearField(center.FieldStatus, field.TypeBool)
	}
	if value, ok := cu.mutation.ExamYear(); ok {
		_spec.SetField(center.FieldExamYear, field.TypeString, value)
	}
	if cu.mutation.ExamYearCleared() {
		_spec.ClearField(center.FieldExamYear, field.TypeString)
	}
	if value, ok := cu.mutation.ConductedBy(); ok {
		_spec.SetField(center.FieldConductedBy, field.TypeString, value)
	}
	if cu.mutation.ConductedByCleared() {
		_spec.ClearField(center.FieldConductedBy, field.TypeString)
	}
	if value, ok := cu.mutation.ConductedByFacilityID(); ok {
		_spec.SetField(center.FieldConductedByFacilityID, field.TypeString, value)
	}
	if cu.mutation.ConductedByFacilityIDCleared() {
		_spec.ClearField(center.FieldConductedByFacilityID, field.TypeString)
	}
	if value, ok := cu.mutation.UpdatedAt(); ok {
		_spec.SetField(center.FieldUpdatedAt, field.TypeTime, value)
	}
	if cu.mutation.UpdatedAtCleared() {
		_spec.ClearField(center.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := cu.mutation.UpdatedBy(); ok {
		_spec.SetField(center.FieldUpdatedBy, field.TypeString, value)
	}
	if cu.mutation.UpdatedByCleared() {
		_spec.ClearField(center.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := cu.mutation.Papers(); ok {
		_spec.SetField(center.FieldPapers, field.TypeJSON, value)
	}
	if value, ok := cu.mutation.AppendedPapers(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, center.FieldPapers, value)
		})
	}
	if cu.mutation.PapersCleared() {
		_spec.ClearField(center.FieldPapers, field.TypeJSON)
	}
	if cu.mutation.ApplicationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   center.ApplicationsTable,
			Columns: []string{center.ApplicationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(application.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedApplicationsIDs(); len(nodes) > 0 && !cu.mutation.ApplicationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   center.ApplicationsTable,
			Columns: []string{center.ApplicationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(application.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.ApplicationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   center.ApplicationsTable,
			Columns: []string{center.ApplicationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(application.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.ExamCentresRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   center.ExamCentresRefTable,
			Columns: []string{center.ExamCentresRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_ip.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedExamCentresRefIDs(); len(nodes) > 0 && !cu.mutation.ExamCentresRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   center.ExamCentresRefTable,
			Columns: []string{center.ExamCentresRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_ip.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.ExamCentresRefIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   center.ExamCentresRefTable,
			Columns: []string{center.ExamCentresRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_ip.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.ExamCentresRefPSCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   center.ExamCentresRefPSTable,
			Columns: []string{center.ExamCentresRefPSColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_ps.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedExamCentresRefPSIDs(); len(nodes) > 0 && !cu.mutation.ExamCentresRefPSCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   center.ExamCentresRefPSTable,
			Columns: []string{center.ExamCentresRefPSColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_ps.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.ExamCentresRefPSIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   center.ExamCentresRefPSTable,
			Columns: []string{center.ExamCentresRefPSColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_ps.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.ExamCentresRefGDSPACleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   center.ExamCentresRefGDSPATable,
			Columns: []string{center.ExamCentresRefGDSPAColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_gdspa.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedExamCentresRefGDSPAIDs(); len(nodes) > 0 && !cu.mutation.ExamCentresRefGDSPACleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   center.ExamCentresRefGDSPATable,
			Columns: []string{center.ExamCentresRefGDSPAColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_gdspa.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.ExamCentresRefGDSPAIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   center.ExamCentresRefGDSPATable,
			Columns: []string{center.ExamCentresRefGDSPAColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_gdspa.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.ExamCentresRefPMPACleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   center.ExamCentresRefPMPATable,
			Columns: []string{center.ExamCentresRefPMPAColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_pmpa.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedExamCentresRefPMPAIDs(); len(nodes) > 0 && !cu.mutation.ExamCentresRefPMPACleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   center.ExamCentresRefPMPATable,
			Columns: []string{center.ExamCentresRefPMPAColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_pmpa.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.ExamCentresRefPMPAIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   center.ExamCentresRefPMPATable,
			Columns: []string{center.ExamCentresRefPMPAColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_pmpa.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.ExamCentresRefGDSPMCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   center.ExamCentresRefGDSPMTable,
			Columns: []string{center.ExamCentresRefGDSPMColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_gdspm.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedExamCentresRefGDSPMIDs(); len(nodes) > 0 && !cu.mutation.ExamCentresRefGDSPMCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   center.ExamCentresRefGDSPMTable,
			Columns: []string{center.ExamCentresRefGDSPMColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_gdspm.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.ExamCentresRefGDSPMIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   center.ExamCentresRefGDSPMTable,
			Columns: []string{center.ExamCentresRefGDSPMColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_gdspm.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.ExamscentresCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   center.ExamscentresTable,
			Columns: []string{center.ExamscentresColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(examcitycenter.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedExamscentresIDs(); len(nodes) > 0 && !cu.mutation.ExamscentresCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   center.ExamscentresTable,
			Columns: []string{center.ExamscentresColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(examcitycenter.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.ExamscentresIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   center.ExamscentresTable,
			Columns: []string{center.ExamscentresColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(examcitycenter.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.ExamCentresRefMTSPMMGCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   center.ExamCentresRefMTSPMMGTable,
			Columns: []string{center.ExamCentresRefMTSPMMGColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_application_mtspmmg.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedExamCentresRefMTSPMMGIDs(); len(nodes) > 0 && !cu.mutation.ExamCentresRefMTSPMMGCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   center.ExamCentresRefMTSPMMGTable,
			Columns: []string{center.ExamCentresRefMTSPMMGColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_application_mtspmmg.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.ExamCentresRefMTSPMMGIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   center.ExamCentresRefMTSPMMGTable,
			Columns: []string{center.ExamCentresRefMTSPMMGColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_application_mtspmmg.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.ExaCenterHallRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   center.ExaCenterHallRefTable,
			Columns: []string{center.ExaCenterHallRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(examcenterhall.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedExaCenterHallRefIDs(); len(nodes) > 0 && !cu.mutation.ExaCenterHallRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   center.ExaCenterHallRefTable,
			Columns: []string{center.ExaCenterHallRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(examcenterhall.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.ExaCenterHallRefIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   center.ExaCenterHallRefTable,
			Columns: []string{center.ExaCenterHallRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(examcenterhall.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.CentresipCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   center.CentresipTable,
			Columns: []string{center.CentresipColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.CentresipIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   center.CentresipTable,
			Columns: []string{center.CentresipColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.LogDataCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   center.LogDataTable,
			Columns: []string{center.LogDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(logs.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedLogDataIDs(); len(nodes) > 0 && !cu.mutation.LogDataCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   center.LogDataTable,
			Columns: []string{center.LogDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(logs.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.LogDataIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   center.LogDataTable,
			Columns: []string{center.LogDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(logs.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{center.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cu.mutation.done = true
	return n, nil
}

// CenterUpdateOne is the builder for updating a single Center entity.
type CenterUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CenterMutation
}

// SetCityID sets the "CityID" field.
func (cuo *CenterUpdateOne) SetCityID(i int32) *CenterUpdateOne {
	cuo.mutation.ResetCityID()
	cuo.mutation.SetCityID(i)
	return cuo
}

// SetNillableCityID sets the "CityID" field if the given value is not nil.
func (cuo *CenterUpdateOne) SetNillableCityID(i *int32) *CenterUpdateOne {
	if i != nil {
		cuo.SetCityID(*i)
	}
	return cuo
}

// AddCityID adds i to the "CityID" field.
func (cuo *CenterUpdateOne) AddCityID(i int32) *CenterUpdateOne {
	cuo.mutation.AddCityID(i)
	return cuo
}

// ClearCityID clears the value of the "CityID" field.
func (cuo *CenterUpdateOne) ClearCityID() *CenterUpdateOne {
	cuo.mutation.ClearCityID()
	return cuo
}

// SetNodalOfficerCode sets the "NodalOfficerCode" field.
func (cuo *CenterUpdateOne) SetNodalOfficerCode(i int32) *CenterUpdateOne {
	cuo.mutation.ResetNodalOfficerCode()
	cuo.mutation.SetNodalOfficerCode(i)
	return cuo
}

// SetNillableNodalOfficerCode sets the "NodalOfficerCode" field if the given value is not nil.
func (cuo *CenterUpdateOne) SetNillableNodalOfficerCode(i *int32) *CenterUpdateOne {
	if i != nil {
		cuo.SetNodalOfficerCode(*i)
	}
	return cuo
}

// AddNodalOfficerCode adds i to the "NodalOfficerCode" field.
func (cuo *CenterUpdateOne) AddNodalOfficerCode(i int32) *CenterUpdateOne {
	cuo.mutation.AddNodalOfficerCode(i)
	return cuo
}

// ClearNodalOfficerCode clears the value of the "NodalOfficerCode" field.
func (cuo *CenterUpdateOne) ClearNodalOfficerCode() *CenterUpdateOne {
	cuo.mutation.ClearNodalOfficerCode()
	return cuo
}

// SetExamCenterName sets the "ExamCenterName" field.
func (cuo *CenterUpdateOne) SetExamCenterName(s string) *CenterUpdateOne {
	cuo.mutation.SetExamCenterName(s)
	return cuo
}

// SetNillableExamCenterName sets the "ExamCenterName" field if the given value is not nil.
func (cuo *CenterUpdateOne) SetNillableExamCenterName(s *string) *CenterUpdateOne {
	if s != nil {
		cuo.SetExamCenterName(*s)
	}
	return cuo
}

// ClearExamCenterName clears the value of the "ExamCenterName" field.
func (cuo *CenterUpdateOne) ClearExamCenterName() *CenterUpdateOne {
	cuo.mutation.ClearExamCenterName()
	return cuo
}

// SetExamCode sets the "ExamCode" field.
func (cuo *CenterUpdateOne) SetExamCode(i int32) *CenterUpdateOne {
	cuo.mutation.SetExamCode(i)
	return cuo
}

// SetNillableExamCode sets the "ExamCode" field if the given value is not nil.
func (cuo *CenterUpdateOne) SetNillableExamCode(i *int32) *CenterUpdateOne {
	if i != nil {
		cuo.SetExamCode(*i)
	}
	return cuo
}

// ClearExamCode clears the value of the "ExamCode" field.
func (cuo *CenterUpdateOne) ClearExamCode() *CenterUpdateOne {
	cuo.mutation.ClearExamCode()
	return cuo
}

// SetRegionID sets the "RegionID" field.
func (cuo *CenterUpdateOne) SetRegionID(i int32) *CenterUpdateOne {
	cuo.mutation.ResetRegionID()
	cuo.mutation.SetRegionID(i)
	return cuo
}

// SetNillableRegionID sets the "RegionID" field if the given value is not nil.
func (cuo *CenterUpdateOne) SetNillableRegionID(i *int32) *CenterUpdateOne {
	if i != nil {
		cuo.SetRegionID(*i)
	}
	return cuo
}

// AddRegionID adds i to the "RegionID" field.
func (cuo *CenterUpdateOne) AddRegionID(i int32) *CenterUpdateOne {
	cuo.mutation.AddRegionID(i)
	return cuo
}

// ClearRegionID clears the value of the "RegionID" field.
func (cuo *CenterUpdateOne) ClearRegionID() *CenterUpdateOne {
	cuo.mutation.ClearRegionID()
	return cuo
}

// SetCircleID sets the "CircleID" field.
func (cuo *CenterUpdateOne) SetCircleID(i int32) *CenterUpdateOne {
	cuo.mutation.ResetCircleID()
	cuo.mutation.SetCircleID(i)
	return cuo
}

// SetNillableCircleID sets the "CircleID" field if the given value is not nil.
func (cuo *CenterUpdateOne) SetNillableCircleID(i *int32) *CenterUpdateOne {
	if i != nil {
		cuo.SetCircleID(*i)
	}
	return cuo
}

// AddCircleID adds i to the "CircleID" field.
func (cuo *CenterUpdateOne) AddCircleID(i int32) *CenterUpdateOne {
	cuo.mutation.AddCircleID(i)
	return cuo
}

// ClearCircleID clears the value of the "CircleID" field.
func (cuo *CenterUpdateOne) ClearCircleID() *CenterUpdateOne {
	cuo.mutation.ClearCircleID()
	return cuo
}

// SetDivisionID sets the "DivisionID" field.
func (cuo *CenterUpdateOne) SetDivisionID(i int32) *CenterUpdateOne {
	cuo.mutation.ResetDivisionID()
	cuo.mutation.SetDivisionID(i)
	return cuo
}

// SetNillableDivisionID sets the "DivisionID" field if the given value is not nil.
func (cuo *CenterUpdateOne) SetNillableDivisionID(i *int32) *CenterUpdateOne {
	if i != nil {
		cuo.SetDivisionID(*i)
	}
	return cuo
}

// AddDivisionID adds i to the "DivisionID" field.
func (cuo *CenterUpdateOne) AddDivisionID(i int32) *CenterUpdateOne {
	cuo.mutation.AddDivisionID(i)
	return cuo
}

// ClearDivisionID clears the value of the "DivisionID" field.
func (cuo *CenterUpdateOne) ClearDivisionID() *CenterUpdateOne {
	cuo.mutation.ClearDivisionID()
	return cuo
}

// SetFacilityID sets the "FacilityID" field.
func (cuo *CenterUpdateOne) SetFacilityID(i int32) *CenterUpdateOne {
	cuo.mutation.ResetFacilityID()
	cuo.mutation.SetFacilityID(i)
	return cuo
}

// SetNillableFacilityID sets the "FacilityID" field if the given value is not nil.
func (cuo *CenterUpdateOne) SetNillableFacilityID(i *int32) *CenterUpdateOne {
	if i != nil {
		cuo.SetFacilityID(*i)
	}
	return cuo
}

// AddFacilityID adds i to the "FacilityID" field.
func (cuo *CenterUpdateOne) AddFacilityID(i int32) *CenterUpdateOne {
	cuo.mutation.AddFacilityID(i)
	return cuo
}

// ClearFacilityID clears the value of the "FacilityID" field.
func (cuo *CenterUpdateOne) ClearFacilityID() *CenterUpdateOne {
	cuo.mutation.ClearFacilityID()
	return cuo
}

// SetExamNameCode sets the "ExamNameCode" field.
func (cuo *CenterUpdateOne) SetExamNameCode(s string) *CenterUpdateOne {
	cuo.mutation.SetExamNameCode(s)
	return cuo
}

// SetNillableExamNameCode sets the "ExamNameCode" field if the given value is not nil.
func (cuo *CenterUpdateOne) SetNillableExamNameCode(s *string) *CenterUpdateOne {
	if s != nil {
		cuo.SetExamNameCode(*s)
	}
	return cuo
}

// ClearExamNameCode clears the value of the "ExamNameCode" field.
func (cuo *CenterUpdateOne) ClearExamNameCode() *CenterUpdateOne {
	cuo.mutation.ClearExamNameCode()
	return cuo
}

// SetExamName sets the "ExamName" field.
func (cuo *CenterUpdateOne) SetExamName(s string) *CenterUpdateOne {
	cuo.mutation.SetExamName(s)
	return cuo
}

// SetNillableExamName sets the "ExamName" field if the given value is not nil.
func (cuo *CenterUpdateOne) SetNillableExamName(s *string) *CenterUpdateOne {
	if s != nil {
		cuo.SetExamName(*s)
	}
	return cuo
}

// ClearExamName clears the value of the "ExamName" field.
func (cuo *CenterUpdateOne) ClearExamName() *CenterUpdateOne {
	cuo.mutation.ClearExamName()
	return cuo
}

// SetNAUserName sets the "NAUserName" field.
func (cuo *CenterUpdateOne) SetNAUserName(s string) *CenterUpdateOne {
	cuo.mutation.SetNAUserName(s)
	return cuo
}

// SetNillableNAUserName sets the "NAUserName" field if the given value is not nil.
func (cuo *CenterUpdateOne) SetNillableNAUserName(s *string) *CenterUpdateOne {
	if s != nil {
		cuo.SetNAUserName(*s)
	}
	return cuo
}

// ClearNAUserName clears the value of the "NAUserName" field.
func (cuo *CenterUpdateOne) ClearNAUserName() *CenterUpdateOne {
	cuo.mutation.ClearNAUserName()
	return cuo
}

// SetNodalOfficeFacilityId sets the "NodalOfficeFacilityId" field.
func (cuo *CenterUpdateOne) SetNodalOfficeFacilityId(s string) *CenterUpdateOne {
	cuo.mutation.SetNodalOfficeFacilityId(s)
	return cuo
}

// SetNillableNodalOfficeFacilityId sets the "NodalOfficeFacilityId" field if the given value is not nil.
func (cuo *CenterUpdateOne) SetNillableNodalOfficeFacilityId(s *string) *CenterUpdateOne {
	if s != nil {
		cuo.SetNodalOfficeFacilityId(*s)
	}
	return cuo
}

// ClearNodalOfficeFacilityId clears the value of the "NodalOfficeFacilityId" field.
func (cuo *CenterUpdateOne) ClearNodalOfficeFacilityId() *CenterUpdateOne {
	cuo.mutation.ClearNodalOfficeFacilityId()
	return cuo
}

// SetAdminCircleOfficeID sets the "AdminCircleOfficeID" field.
func (cuo *CenterUpdateOne) SetAdminCircleOfficeID(s string) *CenterUpdateOne {
	cuo.mutation.SetAdminCircleOfficeID(s)
	return cuo
}

// SetNillableAdminCircleOfficeID sets the "AdminCircleOfficeID" field if the given value is not nil.
func (cuo *CenterUpdateOne) SetNillableAdminCircleOfficeID(s *string) *CenterUpdateOne {
	if s != nil {
		cuo.SetAdminCircleOfficeID(*s)
	}
	return cuo
}

// ClearAdminCircleOfficeID clears the value of the "AdminCircleOfficeID" field.
func (cuo *CenterUpdateOne) ClearAdminCircleOfficeID() *CenterUpdateOne {
	cuo.mutation.ClearAdminCircleOfficeID()
	return cuo
}

// SetAddress sets the "Address" field.
func (cuo *CenterUpdateOne) SetAddress(s string) *CenterUpdateOne {
	cuo.mutation.SetAddress(s)
	return cuo
}

// SetNillableAddress sets the "Address" field if the given value is not nil.
func (cuo *CenterUpdateOne) SetNillableAddress(s *string) *CenterUpdateOne {
	if s != nil {
		cuo.SetAddress(*s)
	}
	return cuo
}

// ClearAddress clears the value of the "Address" field.
func (cuo *CenterUpdateOne) ClearAddress() *CenterUpdateOne {
	cuo.mutation.ClearAddress()
	return cuo
}

// SetLandmark sets the "Landmark" field.
func (cuo *CenterUpdateOne) SetLandmark(s string) *CenterUpdateOne {
	cuo.mutation.SetLandmark(s)
	return cuo
}

// SetNillableLandmark sets the "Landmark" field if the given value is not nil.
func (cuo *CenterUpdateOne) SetNillableLandmark(s *string) *CenterUpdateOne {
	if s != nil {
		cuo.SetLandmark(*s)
	}
	return cuo
}

// ClearLandmark clears the value of the "Landmark" field.
func (cuo *CenterUpdateOne) ClearLandmark() *CenterUpdateOne {
	cuo.mutation.ClearLandmark()
	return cuo
}

// SetCenterCityName sets the "CenterCityName" field.
func (cuo *CenterUpdateOne) SetCenterCityName(s string) *CenterUpdateOne {
	cuo.mutation.SetCenterCityName(s)
	return cuo
}

// SetNillableCenterCityName sets the "CenterCityName" field if the given value is not nil.
func (cuo *CenterUpdateOne) SetNillableCenterCityName(s *string) *CenterUpdateOne {
	if s != nil {
		cuo.SetCenterCityName(*s)
	}
	return cuo
}

// ClearCenterCityName clears the value of the "CenterCityName" field.
func (cuo *CenterUpdateOne) ClearCenterCityName() *CenterUpdateOne {
	cuo.mutation.ClearCenterCityName()
	return cuo
}

// SetPincode sets the "Pincode" field.
func (cuo *CenterUpdateOne) SetPincode(i int32) *CenterUpdateOne {
	cuo.mutation.ResetPincode()
	cuo.mutation.SetPincode(i)
	return cuo
}

// SetNillablePincode sets the "Pincode" field if the given value is not nil.
func (cuo *CenterUpdateOne) SetNillablePincode(i *int32) *CenterUpdateOne {
	if i != nil {
		cuo.SetPincode(*i)
	}
	return cuo
}

// AddPincode adds i to the "Pincode" field.
func (cuo *CenterUpdateOne) AddPincode(i int32) *CenterUpdateOne {
	cuo.mutation.AddPincode(i)
	return cuo
}

// ClearPincode clears the value of the "Pincode" field.
func (cuo *CenterUpdateOne) ClearPincode() *CenterUpdateOne {
	cuo.mutation.ClearPincode()
	return cuo
}

// SetMaxSeats sets the "MaxSeats" field.
func (cuo *CenterUpdateOne) SetMaxSeats(i int32) *CenterUpdateOne {
	cuo.mutation.ResetMaxSeats()
	cuo.mutation.SetMaxSeats(i)
	return cuo
}

// SetNillableMaxSeats sets the "MaxSeats" field if the given value is not nil.
func (cuo *CenterUpdateOne) SetNillableMaxSeats(i *int32) *CenterUpdateOne {
	if i != nil {
		cuo.SetMaxSeats(*i)
	}
	return cuo
}

// AddMaxSeats adds i to the "MaxSeats" field.
func (cuo *CenterUpdateOne) AddMaxSeats(i int32) *CenterUpdateOne {
	cuo.mutation.AddMaxSeats(i)
	return cuo
}

// ClearMaxSeats clears the value of the "MaxSeats" field.
func (cuo *CenterUpdateOne) ClearMaxSeats() *CenterUpdateOne {
	cuo.mutation.ClearMaxSeats()
	return cuo
}

// SetNoAlloted sets the "NoAlloted" field.
func (cuo *CenterUpdateOne) SetNoAlloted(i int32) *CenterUpdateOne {
	cuo.mutation.ResetNoAlloted()
	cuo.mutation.SetNoAlloted(i)
	return cuo
}

// SetNillableNoAlloted sets the "NoAlloted" field if the given value is not nil.
func (cuo *CenterUpdateOne) SetNillableNoAlloted(i *int32) *CenterUpdateOne {
	if i != nil {
		cuo.SetNoAlloted(*i)
	}
	return cuo
}

// AddNoAlloted adds i to the "NoAlloted" field.
func (cuo *CenterUpdateOne) AddNoAlloted(i int32) *CenterUpdateOne {
	cuo.mutation.AddNoAlloted(i)
	return cuo
}

// ClearNoAlloted clears the value of the "NoAlloted" field.
func (cuo *CenterUpdateOne) ClearNoAlloted() *CenterUpdateOne {
	cuo.mutation.ClearNoAlloted()
	return cuo
}

// SetPendingSeats sets the "PendingSeats" field.
func (cuo *CenterUpdateOne) SetPendingSeats(i int32) *CenterUpdateOne {
	cuo.mutation.ResetPendingSeats()
	cuo.mutation.SetPendingSeats(i)
	return cuo
}

// SetNillablePendingSeats sets the "PendingSeats" field if the given value is not nil.
func (cuo *CenterUpdateOne) SetNillablePendingSeats(i *int32) *CenterUpdateOne {
	if i != nil {
		cuo.SetPendingSeats(*i)
	}
	return cuo
}

// AddPendingSeats adds i to the "PendingSeats" field.
func (cuo *CenterUpdateOne) AddPendingSeats(i int32) *CenterUpdateOne {
	cuo.mutation.AddPendingSeats(i)
	return cuo
}

// ClearPendingSeats clears the value of the "PendingSeats" field.
func (cuo *CenterUpdateOne) ClearPendingSeats() *CenterUpdateOne {
	cuo.mutation.ClearPendingSeats()
	return cuo
}

// SetStatus sets the "Status" field.
func (cuo *CenterUpdateOne) SetStatus(b bool) *CenterUpdateOne {
	cuo.mutation.SetStatus(b)
	return cuo
}

// SetNillableStatus sets the "Status" field if the given value is not nil.
func (cuo *CenterUpdateOne) SetNillableStatus(b *bool) *CenterUpdateOne {
	if b != nil {
		cuo.SetStatus(*b)
	}
	return cuo
}

// ClearStatus clears the value of the "Status" field.
func (cuo *CenterUpdateOne) ClearStatus() *CenterUpdateOne {
	cuo.mutation.ClearStatus()
	return cuo
}

// SetExamYear sets the "ExamYear" field.
func (cuo *CenterUpdateOne) SetExamYear(s string) *CenterUpdateOne {
	cuo.mutation.SetExamYear(s)
	return cuo
}

// SetNillableExamYear sets the "ExamYear" field if the given value is not nil.
func (cuo *CenterUpdateOne) SetNillableExamYear(s *string) *CenterUpdateOne {
	if s != nil {
		cuo.SetExamYear(*s)
	}
	return cuo
}

// ClearExamYear clears the value of the "ExamYear" field.
func (cuo *CenterUpdateOne) ClearExamYear() *CenterUpdateOne {
	cuo.mutation.ClearExamYear()
	return cuo
}

// SetConductedBy sets the "ConductedBy" field.
func (cuo *CenterUpdateOne) SetConductedBy(s string) *CenterUpdateOne {
	cuo.mutation.SetConductedBy(s)
	return cuo
}

// SetNillableConductedBy sets the "ConductedBy" field if the given value is not nil.
func (cuo *CenterUpdateOne) SetNillableConductedBy(s *string) *CenterUpdateOne {
	if s != nil {
		cuo.SetConductedBy(*s)
	}
	return cuo
}

// ClearConductedBy clears the value of the "ConductedBy" field.
func (cuo *CenterUpdateOne) ClearConductedBy() *CenterUpdateOne {
	cuo.mutation.ClearConductedBy()
	return cuo
}

// SetConductedByFacilityID sets the "ConductedByFacilityID" field.
func (cuo *CenterUpdateOne) SetConductedByFacilityID(s string) *CenterUpdateOne {
	cuo.mutation.SetConductedByFacilityID(s)
	return cuo
}

// SetNillableConductedByFacilityID sets the "ConductedByFacilityID" field if the given value is not nil.
func (cuo *CenterUpdateOne) SetNillableConductedByFacilityID(s *string) *CenterUpdateOne {
	if s != nil {
		cuo.SetConductedByFacilityID(*s)
	}
	return cuo
}

// ClearConductedByFacilityID clears the value of the "ConductedByFacilityID" field.
func (cuo *CenterUpdateOne) ClearConductedByFacilityID() *CenterUpdateOne {
	cuo.mutation.ClearConductedByFacilityID()
	return cuo
}

// SetUpdatedAt sets the "UpdatedAt" field.
func (cuo *CenterUpdateOne) SetUpdatedAt(t time.Time) *CenterUpdateOne {
	cuo.mutation.SetUpdatedAt(t)
	return cuo
}

// SetNillableUpdatedAt sets the "UpdatedAt" field if the given value is not nil.
func (cuo *CenterUpdateOne) SetNillableUpdatedAt(t *time.Time) *CenterUpdateOne {
	if t != nil {
		cuo.SetUpdatedAt(*t)
	}
	return cuo
}

// ClearUpdatedAt clears the value of the "UpdatedAt" field.
func (cuo *CenterUpdateOne) ClearUpdatedAt() *CenterUpdateOne {
	cuo.mutation.ClearUpdatedAt()
	return cuo
}

// SetUpdatedBy sets the "UpdatedBy" field.
func (cuo *CenterUpdateOne) SetUpdatedBy(s string) *CenterUpdateOne {
	cuo.mutation.SetUpdatedBy(s)
	return cuo
}

// SetNillableUpdatedBy sets the "UpdatedBy" field if the given value is not nil.
func (cuo *CenterUpdateOne) SetNillableUpdatedBy(s *string) *CenterUpdateOne {
	if s != nil {
		cuo.SetUpdatedBy(*s)
	}
	return cuo
}

// ClearUpdatedBy clears the value of the "UpdatedBy" field.
func (cuo *CenterUpdateOne) ClearUpdatedBy() *CenterUpdateOne {
	cuo.mutation.ClearUpdatedBy()
	return cuo
}

// SetPapers sets the "Papers" field.
func (cuo *CenterUpdateOne) SetPapers(i []interface{}) *CenterUpdateOne {
	cuo.mutation.SetPapers(i)
	return cuo
}

// AppendPapers appends i to the "Papers" field.
func (cuo *CenterUpdateOne) AppendPapers(i []interface{}) *CenterUpdateOne {
	cuo.mutation.AppendPapers(i)
	return cuo
}

// ClearPapers clears the value of the "Papers" field.
func (cuo *CenterUpdateOne) ClearPapers() *CenterUpdateOne {
	cuo.mutation.ClearPapers()
	return cuo
}

// AddApplicationIDs adds the "applications" edge to the Application entity by IDs.
func (cuo *CenterUpdateOne) AddApplicationIDs(ids ...int32) *CenterUpdateOne {
	cuo.mutation.AddApplicationIDs(ids...)
	return cuo
}

// AddApplications adds the "applications" edges to the Application entity.
func (cuo *CenterUpdateOne) AddApplications(a ...*Application) *CenterUpdateOne {
	ids := make([]int32, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return cuo.AddApplicationIDs(ids...)
}

// AddExamCentresRefIDs adds the "ExamCentresRef" edge to the Exam_Applications_IP entity by IDs.
func (cuo *CenterUpdateOne) AddExamCentresRefIDs(ids ...int64) *CenterUpdateOne {
	cuo.mutation.AddExamCentresRefIDs(ids...)
	return cuo
}

// AddExamCentresRef adds the "ExamCentresRef" edges to the Exam_Applications_IP entity.
func (cuo *CenterUpdateOne) AddExamCentresRef(e ...*Exam_Applications_IP) *CenterUpdateOne {
	ids := make([]int64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return cuo.AddExamCentresRefIDs(ids...)
}

// AddExamCentresRefPSIDs adds the "ExamCentresRefPS" edge to the Exam_Applications_PS entity by IDs.
func (cuo *CenterUpdateOne) AddExamCentresRefPSIDs(ids ...int64) *CenterUpdateOne {
	cuo.mutation.AddExamCentresRefPSIDs(ids...)
	return cuo
}

// AddExamCentresRefPS adds the "ExamCentresRefPS" edges to the Exam_Applications_PS entity.
func (cuo *CenterUpdateOne) AddExamCentresRefPS(e ...*Exam_Applications_PS) *CenterUpdateOne {
	ids := make([]int64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return cuo.AddExamCentresRefPSIDs(ids...)
}

// AddExamCentresRefGDSPAIDs adds the "ExamCentresRefGDSPA" edge to the Exam_Applications_GDSPA entity by IDs.
func (cuo *CenterUpdateOne) AddExamCentresRefGDSPAIDs(ids ...int64) *CenterUpdateOne {
	cuo.mutation.AddExamCentresRefGDSPAIDs(ids...)
	return cuo
}

// AddExamCentresRefGDSPA adds the "ExamCentresRefGDSPA" edges to the Exam_Applications_GDSPA entity.
func (cuo *CenterUpdateOne) AddExamCentresRefGDSPA(e ...*Exam_Applications_GDSPA) *CenterUpdateOne {
	ids := make([]int64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return cuo.AddExamCentresRefGDSPAIDs(ids...)
}

// AddExamCentresRefPMPAIDs adds the "ExamCentresRefPMPA" edge to the Exam_Applications_PMPA entity by IDs.
func (cuo *CenterUpdateOne) AddExamCentresRefPMPAIDs(ids ...int64) *CenterUpdateOne {
	cuo.mutation.AddExamCentresRefPMPAIDs(ids...)
	return cuo
}

// AddExamCentresRefPMPA adds the "ExamCentresRefPMPA" edges to the Exam_Applications_PMPA entity.
func (cuo *CenterUpdateOne) AddExamCentresRefPMPA(e ...*Exam_Applications_PMPA) *CenterUpdateOne {
	ids := make([]int64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return cuo.AddExamCentresRefPMPAIDs(ids...)
}

// AddExamCentresRefGDSPMIDs adds the "ExamCentresRefGDSPM" edge to the Exam_Applications_GDSPM entity by IDs.
func (cuo *CenterUpdateOne) AddExamCentresRefGDSPMIDs(ids ...int64) *CenterUpdateOne {
	cuo.mutation.AddExamCentresRefGDSPMIDs(ids...)
	return cuo
}

// AddExamCentresRefGDSPM adds the "ExamCentresRefGDSPM" edges to the Exam_Applications_GDSPM entity.
func (cuo *CenterUpdateOne) AddExamCentresRefGDSPM(e ...*Exam_Applications_GDSPM) *CenterUpdateOne {
	ids := make([]int64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return cuo.AddExamCentresRefGDSPMIDs(ids...)
}

// AddExamscentreIDs adds the "Examscentres" edge to the ExamCityCenter entity by IDs.
func (cuo *CenterUpdateOne) AddExamscentreIDs(ids ...int32) *CenterUpdateOne {
	cuo.mutation.AddExamscentreIDs(ids...)
	return cuo
}

// AddExamscentres adds the "Examscentres" edges to the ExamCityCenter entity.
func (cuo *CenterUpdateOne) AddExamscentres(e ...*ExamCityCenter) *CenterUpdateOne {
	ids := make([]int32, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return cuo.AddExamscentreIDs(ids...)
}

// AddExamCentresRefMTSPMMGIDs adds the "ExamCentresRefMTSPMMG" edge to the Exam_Application_MTSPMMG entity by IDs.
func (cuo *CenterUpdateOne) AddExamCentresRefMTSPMMGIDs(ids ...int64) *CenterUpdateOne {
	cuo.mutation.AddExamCentresRefMTSPMMGIDs(ids...)
	return cuo
}

// AddExamCentresRefMTSPMMG adds the "ExamCentresRefMTSPMMG" edges to the Exam_Application_MTSPMMG entity.
func (cuo *CenterUpdateOne) AddExamCentresRefMTSPMMG(e ...*Exam_Application_MTSPMMG) *CenterUpdateOne {
	ids := make([]int64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return cuo.AddExamCentresRefMTSPMMGIDs(ids...)
}

// AddExaCenterHallRefIDs adds the "ExaCenterHallRef" edge to the ExamCenterHall entity by IDs.
func (cuo *CenterUpdateOne) AddExaCenterHallRefIDs(ids ...int32) *CenterUpdateOne {
	cuo.mutation.AddExaCenterHallRefIDs(ids...)
	return cuo
}

// AddExaCenterHallRef adds the "ExaCenterHallRef" edges to the ExamCenterHall entity.
func (cuo *CenterUpdateOne) AddExaCenterHallRef(e ...*ExamCenterHall) *CenterUpdateOne {
	ids := make([]int32, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return cuo.AddExaCenterHallRefIDs(ids...)
}

// SetCentresipID sets the "centresip" edge to the Exam entity by ID.
func (cuo *CenterUpdateOne) SetCentresipID(id int32) *CenterUpdateOne {
	cuo.mutation.SetCentresipID(id)
	return cuo
}

// SetNillableCentresipID sets the "centresip" edge to the Exam entity by ID if the given value is not nil.
func (cuo *CenterUpdateOne) SetNillableCentresipID(id *int32) *CenterUpdateOne {
	if id != nil {
		cuo = cuo.SetCentresipID(*id)
	}
	return cuo
}

// SetCentresip sets the "centresip" edge to the Exam entity.
func (cuo *CenterUpdateOne) SetCentresip(e *Exam) *CenterUpdateOne {
	return cuo.SetCentresipID(e.ID)
}

// AddLogDatumIDs adds the "LogData" edge to the Logs entity by IDs.
func (cuo *CenterUpdateOne) AddLogDatumIDs(ids ...int64) *CenterUpdateOne {
	cuo.mutation.AddLogDatumIDs(ids...)
	return cuo
}

// AddLogData adds the "LogData" edges to the Logs entity.
func (cuo *CenterUpdateOne) AddLogData(l ...*Logs) *CenterUpdateOne {
	ids := make([]int64, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return cuo.AddLogDatumIDs(ids...)
}

// Mutation returns the CenterMutation object of the builder.
func (cuo *CenterUpdateOne) Mutation() *CenterMutation {
	return cuo.mutation
}

// ClearApplications clears all "applications" edges to the Application entity.
func (cuo *CenterUpdateOne) ClearApplications() *CenterUpdateOne {
	cuo.mutation.ClearApplications()
	return cuo
}

// RemoveApplicationIDs removes the "applications" edge to Application entities by IDs.
func (cuo *CenterUpdateOne) RemoveApplicationIDs(ids ...int32) *CenterUpdateOne {
	cuo.mutation.RemoveApplicationIDs(ids...)
	return cuo
}

// RemoveApplications removes "applications" edges to Application entities.
func (cuo *CenterUpdateOne) RemoveApplications(a ...*Application) *CenterUpdateOne {
	ids := make([]int32, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return cuo.RemoveApplicationIDs(ids...)
}

// ClearExamCentresRef clears all "ExamCentresRef" edges to the Exam_Applications_IP entity.
func (cuo *CenterUpdateOne) ClearExamCentresRef() *CenterUpdateOne {
	cuo.mutation.ClearExamCentresRef()
	return cuo
}

// RemoveExamCentresRefIDs removes the "ExamCentresRef" edge to Exam_Applications_IP entities by IDs.
func (cuo *CenterUpdateOne) RemoveExamCentresRefIDs(ids ...int64) *CenterUpdateOne {
	cuo.mutation.RemoveExamCentresRefIDs(ids...)
	return cuo
}

// RemoveExamCentresRef removes "ExamCentresRef" edges to Exam_Applications_IP entities.
func (cuo *CenterUpdateOne) RemoveExamCentresRef(e ...*Exam_Applications_IP) *CenterUpdateOne {
	ids := make([]int64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return cuo.RemoveExamCentresRefIDs(ids...)
}

// ClearExamCentresRefPS clears all "ExamCentresRefPS" edges to the Exam_Applications_PS entity.
func (cuo *CenterUpdateOne) ClearExamCentresRefPS() *CenterUpdateOne {
	cuo.mutation.ClearExamCentresRefPS()
	return cuo
}

// RemoveExamCentresRefPSIDs removes the "ExamCentresRefPS" edge to Exam_Applications_PS entities by IDs.
func (cuo *CenterUpdateOne) RemoveExamCentresRefPSIDs(ids ...int64) *CenterUpdateOne {
	cuo.mutation.RemoveExamCentresRefPSIDs(ids...)
	return cuo
}

// RemoveExamCentresRefPS removes "ExamCentresRefPS" edges to Exam_Applications_PS entities.
func (cuo *CenterUpdateOne) RemoveExamCentresRefPS(e ...*Exam_Applications_PS) *CenterUpdateOne {
	ids := make([]int64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return cuo.RemoveExamCentresRefPSIDs(ids...)
}

// ClearExamCentresRefGDSPA clears all "ExamCentresRefGDSPA" edges to the Exam_Applications_GDSPA entity.
func (cuo *CenterUpdateOne) ClearExamCentresRefGDSPA() *CenterUpdateOne {
	cuo.mutation.ClearExamCentresRefGDSPA()
	return cuo
}

// RemoveExamCentresRefGDSPAIDs removes the "ExamCentresRefGDSPA" edge to Exam_Applications_GDSPA entities by IDs.
func (cuo *CenterUpdateOne) RemoveExamCentresRefGDSPAIDs(ids ...int64) *CenterUpdateOne {
	cuo.mutation.RemoveExamCentresRefGDSPAIDs(ids...)
	return cuo
}

// RemoveExamCentresRefGDSPA removes "ExamCentresRefGDSPA" edges to Exam_Applications_GDSPA entities.
func (cuo *CenterUpdateOne) RemoveExamCentresRefGDSPA(e ...*Exam_Applications_GDSPA) *CenterUpdateOne {
	ids := make([]int64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return cuo.RemoveExamCentresRefGDSPAIDs(ids...)
}

// ClearExamCentresRefPMPA clears all "ExamCentresRefPMPA" edges to the Exam_Applications_PMPA entity.
func (cuo *CenterUpdateOne) ClearExamCentresRefPMPA() *CenterUpdateOne {
	cuo.mutation.ClearExamCentresRefPMPA()
	return cuo
}

// RemoveExamCentresRefPMPAIDs removes the "ExamCentresRefPMPA" edge to Exam_Applications_PMPA entities by IDs.
func (cuo *CenterUpdateOne) RemoveExamCentresRefPMPAIDs(ids ...int64) *CenterUpdateOne {
	cuo.mutation.RemoveExamCentresRefPMPAIDs(ids...)
	return cuo
}

// RemoveExamCentresRefPMPA removes "ExamCentresRefPMPA" edges to Exam_Applications_PMPA entities.
func (cuo *CenterUpdateOne) RemoveExamCentresRefPMPA(e ...*Exam_Applications_PMPA) *CenterUpdateOne {
	ids := make([]int64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return cuo.RemoveExamCentresRefPMPAIDs(ids...)
}

// ClearExamCentresRefGDSPM clears all "ExamCentresRefGDSPM" edges to the Exam_Applications_GDSPM entity.
func (cuo *CenterUpdateOne) ClearExamCentresRefGDSPM() *CenterUpdateOne {
	cuo.mutation.ClearExamCentresRefGDSPM()
	return cuo
}

// RemoveExamCentresRefGDSPMIDs removes the "ExamCentresRefGDSPM" edge to Exam_Applications_GDSPM entities by IDs.
func (cuo *CenterUpdateOne) RemoveExamCentresRefGDSPMIDs(ids ...int64) *CenterUpdateOne {
	cuo.mutation.RemoveExamCentresRefGDSPMIDs(ids...)
	return cuo
}

// RemoveExamCentresRefGDSPM removes "ExamCentresRefGDSPM" edges to Exam_Applications_GDSPM entities.
func (cuo *CenterUpdateOne) RemoveExamCentresRefGDSPM(e ...*Exam_Applications_GDSPM) *CenterUpdateOne {
	ids := make([]int64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return cuo.RemoveExamCentresRefGDSPMIDs(ids...)
}

// ClearExamscentres clears all "Examscentres" edges to the ExamCityCenter entity.
func (cuo *CenterUpdateOne) ClearExamscentres() *CenterUpdateOne {
	cuo.mutation.ClearExamscentres()
	return cuo
}

// RemoveExamscentreIDs removes the "Examscentres" edge to ExamCityCenter entities by IDs.
func (cuo *CenterUpdateOne) RemoveExamscentreIDs(ids ...int32) *CenterUpdateOne {
	cuo.mutation.RemoveExamscentreIDs(ids...)
	return cuo
}

// RemoveExamscentres removes "Examscentres" edges to ExamCityCenter entities.
func (cuo *CenterUpdateOne) RemoveExamscentres(e ...*ExamCityCenter) *CenterUpdateOne {
	ids := make([]int32, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return cuo.RemoveExamscentreIDs(ids...)
}

// ClearExamCentresRefMTSPMMG clears all "ExamCentresRefMTSPMMG" edges to the Exam_Application_MTSPMMG entity.
func (cuo *CenterUpdateOne) ClearExamCentresRefMTSPMMG() *CenterUpdateOne {
	cuo.mutation.ClearExamCentresRefMTSPMMG()
	return cuo
}

// RemoveExamCentresRefMTSPMMGIDs removes the "ExamCentresRefMTSPMMG" edge to Exam_Application_MTSPMMG entities by IDs.
func (cuo *CenterUpdateOne) RemoveExamCentresRefMTSPMMGIDs(ids ...int64) *CenterUpdateOne {
	cuo.mutation.RemoveExamCentresRefMTSPMMGIDs(ids...)
	return cuo
}

// RemoveExamCentresRefMTSPMMG removes "ExamCentresRefMTSPMMG" edges to Exam_Application_MTSPMMG entities.
func (cuo *CenterUpdateOne) RemoveExamCentresRefMTSPMMG(e ...*Exam_Application_MTSPMMG) *CenterUpdateOne {
	ids := make([]int64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return cuo.RemoveExamCentresRefMTSPMMGIDs(ids...)
}

// ClearExaCenterHallRef clears all "ExaCenterHallRef" edges to the ExamCenterHall entity.
func (cuo *CenterUpdateOne) ClearExaCenterHallRef() *CenterUpdateOne {
	cuo.mutation.ClearExaCenterHallRef()
	return cuo
}

// RemoveExaCenterHallRefIDs removes the "ExaCenterHallRef" edge to ExamCenterHall entities by IDs.
func (cuo *CenterUpdateOne) RemoveExaCenterHallRefIDs(ids ...int32) *CenterUpdateOne {
	cuo.mutation.RemoveExaCenterHallRefIDs(ids...)
	return cuo
}

// RemoveExaCenterHallRef removes "ExaCenterHallRef" edges to ExamCenterHall entities.
func (cuo *CenterUpdateOne) RemoveExaCenterHallRef(e ...*ExamCenterHall) *CenterUpdateOne {
	ids := make([]int32, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return cuo.RemoveExaCenterHallRefIDs(ids...)
}

// ClearCentresip clears the "centresip" edge to the Exam entity.
func (cuo *CenterUpdateOne) ClearCentresip() *CenterUpdateOne {
	cuo.mutation.ClearCentresip()
	return cuo
}

// ClearLogData clears all "LogData" edges to the Logs entity.
func (cuo *CenterUpdateOne) ClearLogData() *CenterUpdateOne {
	cuo.mutation.ClearLogData()
	return cuo
}

// RemoveLogDatumIDs removes the "LogData" edge to Logs entities by IDs.
func (cuo *CenterUpdateOne) RemoveLogDatumIDs(ids ...int64) *CenterUpdateOne {
	cuo.mutation.RemoveLogDatumIDs(ids...)
	return cuo
}

// RemoveLogData removes "LogData" edges to Logs entities.
func (cuo *CenterUpdateOne) RemoveLogData(l ...*Logs) *CenterUpdateOne {
	ids := make([]int64, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return cuo.RemoveLogDatumIDs(ids...)
}

// Where appends a list predicates to the CenterUpdate builder.
func (cuo *CenterUpdateOne) Where(ps ...predicate.Center) *CenterUpdateOne {
	cuo.mutation.Where(ps...)
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *CenterUpdateOne) Select(field string, fields ...string) *CenterUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Center entity.
func (cuo *CenterUpdateOne) Save(ctx context.Context) (*Center, error) {
	return withHooks(ctx, cuo.sqlSave, cuo.mutation, cuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *CenterUpdateOne) SaveX(ctx context.Context) *Center {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *CenterUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *CenterUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cuo *CenterUpdateOne) sqlSave(ctx context.Context) (_node *Center, err error) {
	_spec := sqlgraph.NewUpdateSpec(center.Table, center.Columns, sqlgraph.NewFieldSpec(center.FieldID, field.TypeInt32))
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Center.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, center.FieldID)
		for _, f := range fields {
			if !center.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != center.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.CityID(); ok {
		_spec.SetField(center.FieldCityID, field.TypeInt32, value)
	}
	if value, ok := cuo.mutation.AddedCityID(); ok {
		_spec.AddField(center.FieldCityID, field.TypeInt32, value)
	}
	if cuo.mutation.CityIDCleared() {
		_spec.ClearField(center.FieldCityID, field.TypeInt32)
	}
	if value, ok := cuo.mutation.NodalOfficerCode(); ok {
		_spec.SetField(center.FieldNodalOfficerCode, field.TypeInt32, value)
	}
	if value, ok := cuo.mutation.AddedNodalOfficerCode(); ok {
		_spec.AddField(center.FieldNodalOfficerCode, field.TypeInt32, value)
	}
	if cuo.mutation.NodalOfficerCodeCleared() {
		_spec.ClearField(center.FieldNodalOfficerCode, field.TypeInt32)
	}
	if value, ok := cuo.mutation.ExamCenterName(); ok {
		_spec.SetField(center.FieldExamCenterName, field.TypeString, value)
	}
	if cuo.mutation.ExamCenterNameCleared() {
		_spec.ClearField(center.FieldExamCenterName, field.TypeString)
	}
	if value, ok := cuo.mutation.RegionID(); ok {
		_spec.SetField(center.FieldRegionID, field.TypeInt32, value)
	}
	if value, ok := cuo.mutation.AddedRegionID(); ok {
		_spec.AddField(center.FieldRegionID, field.TypeInt32, value)
	}
	if cuo.mutation.RegionIDCleared() {
		_spec.ClearField(center.FieldRegionID, field.TypeInt32)
	}
	if value, ok := cuo.mutation.CircleID(); ok {
		_spec.SetField(center.FieldCircleID, field.TypeInt32, value)
	}
	if value, ok := cuo.mutation.AddedCircleID(); ok {
		_spec.AddField(center.FieldCircleID, field.TypeInt32, value)
	}
	if cuo.mutation.CircleIDCleared() {
		_spec.ClearField(center.FieldCircleID, field.TypeInt32)
	}
	if value, ok := cuo.mutation.DivisionID(); ok {
		_spec.SetField(center.FieldDivisionID, field.TypeInt32, value)
	}
	if value, ok := cuo.mutation.AddedDivisionID(); ok {
		_spec.AddField(center.FieldDivisionID, field.TypeInt32, value)
	}
	if cuo.mutation.DivisionIDCleared() {
		_spec.ClearField(center.FieldDivisionID, field.TypeInt32)
	}
	if value, ok := cuo.mutation.FacilityID(); ok {
		_spec.SetField(center.FieldFacilityID, field.TypeInt32, value)
	}
	if value, ok := cuo.mutation.AddedFacilityID(); ok {
		_spec.AddField(center.FieldFacilityID, field.TypeInt32, value)
	}
	if cuo.mutation.FacilityIDCleared() {
		_spec.ClearField(center.FieldFacilityID, field.TypeInt32)
	}
	if value, ok := cuo.mutation.ExamNameCode(); ok {
		_spec.SetField(center.FieldExamNameCode, field.TypeString, value)
	}
	if cuo.mutation.ExamNameCodeCleared() {
		_spec.ClearField(center.FieldExamNameCode, field.TypeString)
	}
	if value, ok := cuo.mutation.ExamName(); ok {
		_spec.SetField(center.FieldExamName, field.TypeString, value)
	}
	if cuo.mutation.ExamNameCleared() {
		_spec.ClearField(center.FieldExamName, field.TypeString)
	}
	if value, ok := cuo.mutation.NAUserName(); ok {
		_spec.SetField(center.FieldNAUserName, field.TypeString, value)
	}
	if cuo.mutation.NAUserNameCleared() {
		_spec.ClearField(center.FieldNAUserName, field.TypeString)
	}
	if value, ok := cuo.mutation.NodalOfficeFacilityId(); ok {
		_spec.SetField(center.FieldNodalOfficeFacilityId, field.TypeString, value)
	}
	if cuo.mutation.NodalOfficeFacilityIdCleared() {
		_spec.ClearField(center.FieldNodalOfficeFacilityId, field.TypeString)
	}
	if value, ok := cuo.mutation.AdminCircleOfficeID(); ok {
		_spec.SetField(center.FieldAdminCircleOfficeID, field.TypeString, value)
	}
	if cuo.mutation.AdminCircleOfficeIDCleared() {
		_spec.ClearField(center.FieldAdminCircleOfficeID, field.TypeString)
	}
	if value, ok := cuo.mutation.Address(); ok {
		_spec.SetField(center.FieldAddress, field.TypeString, value)
	}
	if cuo.mutation.AddressCleared() {
		_spec.ClearField(center.FieldAddress, field.TypeString)
	}
	if value, ok := cuo.mutation.Landmark(); ok {
		_spec.SetField(center.FieldLandmark, field.TypeString, value)
	}
	if cuo.mutation.LandmarkCleared() {
		_spec.ClearField(center.FieldLandmark, field.TypeString)
	}
	if value, ok := cuo.mutation.CenterCityName(); ok {
		_spec.SetField(center.FieldCenterCityName, field.TypeString, value)
	}
	if cuo.mutation.CenterCityNameCleared() {
		_spec.ClearField(center.FieldCenterCityName, field.TypeString)
	}
	if value, ok := cuo.mutation.Pincode(); ok {
		_spec.SetField(center.FieldPincode, field.TypeInt32, value)
	}
	if value, ok := cuo.mutation.AddedPincode(); ok {
		_spec.AddField(center.FieldPincode, field.TypeInt32, value)
	}
	if cuo.mutation.PincodeCleared() {
		_spec.ClearField(center.FieldPincode, field.TypeInt32)
	}
	if value, ok := cuo.mutation.MaxSeats(); ok {
		_spec.SetField(center.FieldMaxSeats, field.TypeInt32, value)
	}
	if value, ok := cuo.mutation.AddedMaxSeats(); ok {
		_spec.AddField(center.FieldMaxSeats, field.TypeInt32, value)
	}
	if cuo.mutation.MaxSeatsCleared() {
		_spec.ClearField(center.FieldMaxSeats, field.TypeInt32)
	}
	if value, ok := cuo.mutation.NoAlloted(); ok {
		_spec.SetField(center.FieldNoAlloted, field.TypeInt32, value)
	}
	if value, ok := cuo.mutation.AddedNoAlloted(); ok {
		_spec.AddField(center.FieldNoAlloted, field.TypeInt32, value)
	}
	if cuo.mutation.NoAllotedCleared() {
		_spec.ClearField(center.FieldNoAlloted, field.TypeInt32)
	}
	if value, ok := cuo.mutation.PendingSeats(); ok {
		_spec.SetField(center.FieldPendingSeats, field.TypeInt32, value)
	}
	if value, ok := cuo.mutation.AddedPendingSeats(); ok {
		_spec.AddField(center.FieldPendingSeats, field.TypeInt32, value)
	}
	if cuo.mutation.PendingSeatsCleared() {
		_spec.ClearField(center.FieldPendingSeats, field.TypeInt32)
	}
	if value, ok := cuo.mutation.Status(); ok {
		_spec.SetField(center.FieldStatus, field.TypeBool, value)
	}
	if cuo.mutation.StatusCleared() {
		_spec.ClearField(center.FieldStatus, field.TypeBool)
	}
	if value, ok := cuo.mutation.ExamYear(); ok {
		_spec.SetField(center.FieldExamYear, field.TypeString, value)
	}
	if cuo.mutation.ExamYearCleared() {
		_spec.ClearField(center.FieldExamYear, field.TypeString)
	}
	if value, ok := cuo.mutation.ConductedBy(); ok {
		_spec.SetField(center.FieldConductedBy, field.TypeString, value)
	}
	if cuo.mutation.ConductedByCleared() {
		_spec.ClearField(center.FieldConductedBy, field.TypeString)
	}
	if value, ok := cuo.mutation.ConductedByFacilityID(); ok {
		_spec.SetField(center.FieldConductedByFacilityID, field.TypeString, value)
	}
	if cuo.mutation.ConductedByFacilityIDCleared() {
		_spec.ClearField(center.FieldConductedByFacilityID, field.TypeString)
	}
	if value, ok := cuo.mutation.UpdatedAt(); ok {
		_spec.SetField(center.FieldUpdatedAt, field.TypeTime, value)
	}
	if cuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(center.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := cuo.mutation.UpdatedBy(); ok {
		_spec.SetField(center.FieldUpdatedBy, field.TypeString, value)
	}
	if cuo.mutation.UpdatedByCleared() {
		_spec.ClearField(center.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := cuo.mutation.Papers(); ok {
		_spec.SetField(center.FieldPapers, field.TypeJSON, value)
	}
	if value, ok := cuo.mutation.AppendedPapers(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, center.FieldPapers, value)
		})
	}
	if cuo.mutation.PapersCleared() {
		_spec.ClearField(center.FieldPapers, field.TypeJSON)
	}
	if cuo.mutation.ApplicationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   center.ApplicationsTable,
			Columns: []string{center.ApplicationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(application.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedApplicationsIDs(); len(nodes) > 0 && !cuo.mutation.ApplicationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   center.ApplicationsTable,
			Columns: []string{center.ApplicationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(application.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.ApplicationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   center.ApplicationsTable,
			Columns: []string{center.ApplicationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(application.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.ExamCentresRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   center.ExamCentresRefTable,
			Columns: []string{center.ExamCentresRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_ip.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedExamCentresRefIDs(); len(nodes) > 0 && !cuo.mutation.ExamCentresRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   center.ExamCentresRefTable,
			Columns: []string{center.ExamCentresRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_ip.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.ExamCentresRefIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   center.ExamCentresRefTable,
			Columns: []string{center.ExamCentresRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_ip.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.ExamCentresRefPSCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   center.ExamCentresRefPSTable,
			Columns: []string{center.ExamCentresRefPSColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_ps.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedExamCentresRefPSIDs(); len(nodes) > 0 && !cuo.mutation.ExamCentresRefPSCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   center.ExamCentresRefPSTable,
			Columns: []string{center.ExamCentresRefPSColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_ps.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.ExamCentresRefPSIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   center.ExamCentresRefPSTable,
			Columns: []string{center.ExamCentresRefPSColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_ps.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.ExamCentresRefGDSPACleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   center.ExamCentresRefGDSPATable,
			Columns: []string{center.ExamCentresRefGDSPAColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_gdspa.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedExamCentresRefGDSPAIDs(); len(nodes) > 0 && !cuo.mutation.ExamCentresRefGDSPACleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   center.ExamCentresRefGDSPATable,
			Columns: []string{center.ExamCentresRefGDSPAColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_gdspa.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.ExamCentresRefGDSPAIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   center.ExamCentresRefGDSPATable,
			Columns: []string{center.ExamCentresRefGDSPAColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_gdspa.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.ExamCentresRefPMPACleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   center.ExamCentresRefPMPATable,
			Columns: []string{center.ExamCentresRefPMPAColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_pmpa.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedExamCentresRefPMPAIDs(); len(nodes) > 0 && !cuo.mutation.ExamCentresRefPMPACleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   center.ExamCentresRefPMPATable,
			Columns: []string{center.ExamCentresRefPMPAColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_pmpa.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.ExamCentresRefPMPAIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   center.ExamCentresRefPMPATable,
			Columns: []string{center.ExamCentresRefPMPAColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_pmpa.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.ExamCentresRefGDSPMCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   center.ExamCentresRefGDSPMTable,
			Columns: []string{center.ExamCentresRefGDSPMColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_gdspm.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedExamCentresRefGDSPMIDs(); len(nodes) > 0 && !cuo.mutation.ExamCentresRefGDSPMCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   center.ExamCentresRefGDSPMTable,
			Columns: []string{center.ExamCentresRefGDSPMColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_gdspm.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.ExamCentresRefGDSPMIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   center.ExamCentresRefGDSPMTable,
			Columns: []string{center.ExamCentresRefGDSPMColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_gdspm.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.ExamscentresCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   center.ExamscentresTable,
			Columns: []string{center.ExamscentresColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(examcitycenter.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedExamscentresIDs(); len(nodes) > 0 && !cuo.mutation.ExamscentresCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   center.ExamscentresTable,
			Columns: []string{center.ExamscentresColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(examcitycenter.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.ExamscentresIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   center.ExamscentresTable,
			Columns: []string{center.ExamscentresColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(examcitycenter.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.ExamCentresRefMTSPMMGCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   center.ExamCentresRefMTSPMMGTable,
			Columns: []string{center.ExamCentresRefMTSPMMGColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_application_mtspmmg.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedExamCentresRefMTSPMMGIDs(); len(nodes) > 0 && !cuo.mutation.ExamCentresRefMTSPMMGCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   center.ExamCentresRefMTSPMMGTable,
			Columns: []string{center.ExamCentresRefMTSPMMGColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_application_mtspmmg.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.ExamCentresRefMTSPMMGIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   center.ExamCentresRefMTSPMMGTable,
			Columns: []string{center.ExamCentresRefMTSPMMGColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_application_mtspmmg.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.ExaCenterHallRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   center.ExaCenterHallRefTable,
			Columns: []string{center.ExaCenterHallRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(examcenterhall.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedExaCenterHallRefIDs(); len(nodes) > 0 && !cuo.mutation.ExaCenterHallRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   center.ExaCenterHallRefTable,
			Columns: []string{center.ExaCenterHallRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(examcenterhall.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.ExaCenterHallRefIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   center.ExaCenterHallRefTable,
			Columns: []string{center.ExaCenterHallRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(examcenterhall.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.CentresipCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   center.CentresipTable,
			Columns: []string{center.CentresipColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.CentresipIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   center.CentresipTable,
			Columns: []string{center.CentresipColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.LogDataCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   center.LogDataTable,
			Columns: []string{center.LogDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(logs.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedLogDataIDs(); len(nodes) > 0 && !cuo.mutation.LogDataCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   center.LogDataTable,
			Columns: []string{center.LogDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(logs.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.LogDataIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   center.LogDataTable,
			Columns: []string{center.LogDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(logs.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Center{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{center.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cuo.mutation.done = true
	return _node, nil
}
