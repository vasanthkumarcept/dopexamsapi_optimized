// Code generated by ent, DO NOT EDIT.

package logs

import (
	"recruit/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.Logs {
	return predicate.Logs(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.Logs {
	return predicate.Logs(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.Logs {
	return predicate.Logs(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.Logs {
	return predicate.Logs(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.Logs {
	return predicate.Logs(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.Logs {
	return predicate.Logs(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.Logs {
	return predicate.Logs(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.Logs {
	return predicate.Logs(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.Logs {
	return predicate.Logs(sql.FieldLTE(FieldID, id))
}

// Userid applies equality check predicate on the "userid" field. It's identical to UseridEQ.
func Userid(v string) predicate.Logs {
	return predicate.Logs(sql.FieldEQ(FieldUserid, v))
}

// Uniqueid applies equality check predicate on the "uniqueid" field. It's identical to UniqueidEQ.
func Uniqueid(v int64) predicate.Logs {
	return predicate.Logs(sql.FieldEQ(FieldUniqueid, v))
}

// Usertype applies equality check predicate on the "usertype" field. It's identical to UsertypeEQ.
func Usertype(v string) predicate.Logs {
	return predicate.Logs(sql.FieldEQ(FieldUsertype, v))
}

// Userdetails applies equality check predicate on the "userdetails" field. It's identical to UserdetailsEQ.
func Userdetails(v string) predicate.Logs {
	return predicate.Logs(sql.FieldEQ(FieldUserdetails, v))
}

// Remarks applies equality check predicate on the "remarks" field. It's identical to RemarksEQ.
func Remarks(v string) predicate.Logs {
	return predicate.Logs(sql.FieldEQ(FieldRemarks, v))
}

// Action applies equality check predicate on the "action" field. It's identical to ActionEQ.
func Action(v string) predicate.Logs {
	return predicate.Logs(sql.FieldEQ(FieldAction, v))
}

// Ipaddress applies equality check predicate on the "ipaddress" field. It's identical to IpaddressEQ.
func Ipaddress(v string) predicate.Logs {
	return predicate.Logs(sql.FieldEQ(FieldIpaddress, v))
}

// Devicetype applies equality check predicate on the "devicetype" field. It's identical to DevicetypeEQ.
func Devicetype(v string) predicate.Logs {
	return predicate.Logs(sql.FieldEQ(FieldDevicetype, v))
}

// Os applies equality check predicate on the "os" field. It's identical to OsEQ.
func Os(v string) predicate.Logs {
	return predicate.Logs(sql.FieldEQ(FieldOs, v))
}

// Browser applies equality check predicate on the "browser" field. It's identical to BrowserEQ.
func Browser(v string) predicate.Logs {
	return predicate.Logs(sql.FieldEQ(FieldBrowser, v))
}

// Latitude applies equality check predicate on the "latitude" field. It's identical to LatitudeEQ.
func Latitude(v float64) predicate.Logs {
	return predicate.Logs(sql.FieldEQ(FieldLatitude, v))
}

// Longitude applies equality check predicate on the "longitude" field. It's identical to LongitudeEQ.
func Longitude(v float64) predicate.Logs {
	return predicate.Logs(sql.FieldEQ(FieldLongitude, v))
}

// Eventtime applies equality check predicate on the "eventtime" field. It's identical to EventtimeEQ.
func Eventtime(v time.Time) predicate.Logs {
	return predicate.Logs(sql.FieldEQ(FieldEventtime, v))
}

// UseridEQ applies the EQ predicate on the "userid" field.
func UseridEQ(v string) predicate.Logs {
	return predicate.Logs(sql.FieldEQ(FieldUserid, v))
}

// UseridNEQ applies the NEQ predicate on the "userid" field.
func UseridNEQ(v string) predicate.Logs {
	return predicate.Logs(sql.FieldNEQ(FieldUserid, v))
}

// UseridIn applies the In predicate on the "userid" field.
func UseridIn(vs ...string) predicate.Logs {
	return predicate.Logs(sql.FieldIn(FieldUserid, vs...))
}

// UseridNotIn applies the NotIn predicate on the "userid" field.
func UseridNotIn(vs ...string) predicate.Logs {
	return predicate.Logs(sql.FieldNotIn(FieldUserid, vs...))
}

// UseridGT applies the GT predicate on the "userid" field.
func UseridGT(v string) predicate.Logs {
	return predicate.Logs(sql.FieldGT(FieldUserid, v))
}

// UseridGTE applies the GTE predicate on the "userid" field.
func UseridGTE(v string) predicate.Logs {
	return predicate.Logs(sql.FieldGTE(FieldUserid, v))
}

// UseridLT applies the LT predicate on the "userid" field.
func UseridLT(v string) predicate.Logs {
	return predicate.Logs(sql.FieldLT(FieldUserid, v))
}

// UseridLTE applies the LTE predicate on the "userid" field.
func UseridLTE(v string) predicate.Logs {
	return predicate.Logs(sql.FieldLTE(FieldUserid, v))
}

// UseridContains applies the Contains predicate on the "userid" field.
func UseridContains(v string) predicate.Logs {
	return predicate.Logs(sql.FieldContains(FieldUserid, v))
}

// UseridHasPrefix applies the HasPrefix predicate on the "userid" field.
func UseridHasPrefix(v string) predicate.Logs {
	return predicate.Logs(sql.FieldHasPrefix(FieldUserid, v))
}

// UseridHasSuffix applies the HasSuffix predicate on the "userid" field.
func UseridHasSuffix(v string) predicate.Logs {
	return predicate.Logs(sql.FieldHasSuffix(FieldUserid, v))
}

// UseridIsNil applies the IsNil predicate on the "userid" field.
func UseridIsNil() predicate.Logs {
	return predicate.Logs(sql.FieldIsNull(FieldUserid))
}

// UseridNotNil applies the NotNil predicate on the "userid" field.
func UseridNotNil() predicate.Logs {
	return predicate.Logs(sql.FieldNotNull(FieldUserid))
}

// UseridEqualFold applies the EqualFold predicate on the "userid" field.
func UseridEqualFold(v string) predicate.Logs {
	return predicate.Logs(sql.FieldEqualFold(FieldUserid, v))
}

// UseridContainsFold applies the ContainsFold predicate on the "userid" field.
func UseridContainsFold(v string) predicate.Logs {
	return predicate.Logs(sql.FieldContainsFold(FieldUserid, v))
}

// UniqueidEQ applies the EQ predicate on the "uniqueid" field.
func UniqueidEQ(v int64) predicate.Logs {
	return predicate.Logs(sql.FieldEQ(FieldUniqueid, v))
}

// UniqueidNEQ applies the NEQ predicate on the "uniqueid" field.
func UniqueidNEQ(v int64) predicate.Logs {
	return predicate.Logs(sql.FieldNEQ(FieldUniqueid, v))
}

// UniqueidIn applies the In predicate on the "uniqueid" field.
func UniqueidIn(vs ...int64) predicate.Logs {
	return predicate.Logs(sql.FieldIn(FieldUniqueid, vs...))
}

// UniqueidNotIn applies the NotIn predicate on the "uniqueid" field.
func UniqueidNotIn(vs ...int64) predicate.Logs {
	return predicate.Logs(sql.FieldNotIn(FieldUniqueid, vs...))
}

// UniqueidGT applies the GT predicate on the "uniqueid" field.
func UniqueidGT(v int64) predicate.Logs {
	return predicate.Logs(sql.FieldGT(FieldUniqueid, v))
}

// UniqueidGTE applies the GTE predicate on the "uniqueid" field.
func UniqueidGTE(v int64) predicate.Logs {
	return predicate.Logs(sql.FieldGTE(FieldUniqueid, v))
}

// UniqueidLT applies the LT predicate on the "uniqueid" field.
func UniqueidLT(v int64) predicate.Logs {
	return predicate.Logs(sql.FieldLT(FieldUniqueid, v))
}

// UniqueidLTE applies the LTE predicate on the "uniqueid" field.
func UniqueidLTE(v int64) predicate.Logs {
	return predicate.Logs(sql.FieldLTE(FieldUniqueid, v))
}

// UniqueidIsNil applies the IsNil predicate on the "uniqueid" field.
func UniqueidIsNil() predicate.Logs {
	return predicate.Logs(sql.FieldIsNull(FieldUniqueid))
}

// UniqueidNotNil applies the NotNil predicate on the "uniqueid" field.
func UniqueidNotNil() predicate.Logs {
	return predicate.Logs(sql.FieldNotNull(FieldUniqueid))
}

// UsertypeEQ applies the EQ predicate on the "usertype" field.
func UsertypeEQ(v string) predicate.Logs {
	return predicate.Logs(sql.FieldEQ(FieldUsertype, v))
}

// UsertypeNEQ applies the NEQ predicate on the "usertype" field.
func UsertypeNEQ(v string) predicate.Logs {
	return predicate.Logs(sql.FieldNEQ(FieldUsertype, v))
}

// UsertypeIn applies the In predicate on the "usertype" field.
func UsertypeIn(vs ...string) predicate.Logs {
	return predicate.Logs(sql.FieldIn(FieldUsertype, vs...))
}

// UsertypeNotIn applies the NotIn predicate on the "usertype" field.
func UsertypeNotIn(vs ...string) predicate.Logs {
	return predicate.Logs(sql.FieldNotIn(FieldUsertype, vs...))
}

// UsertypeGT applies the GT predicate on the "usertype" field.
func UsertypeGT(v string) predicate.Logs {
	return predicate.Logs(sql.FieldGT(FieldUsertype, v))
}

// UsertypeGTE applies the GTE predicate on the "usertype" field.
func UsertypeGTE(v string) predicate.Logs {
	return predicate.Logs(sql.FieldGTE(FieldUsertype, v))
}

// UsertypeLT applies the LT predicate on the "usertype" field.
func UsertypeLT(v string) predicate.Logs {
	return predicate.Logs(sql.FieldLT(FieldUsertype, v))
}

// UsertypeLTE applies the LTE predicate on the "usertype" field.
func UsertypeLTE(v string) predicate.Logs {
	return predicate.Logs(sql.FieldLTE(FieldUsertype, v))
}

// UsertypeContains applies the Contains predicate on the "usertype" field.
func UsertypeContains(v string) predicate.Logs {
	return predicate.Logs(sql.FieldContains(FieldUsertype, v))
}

// UsertypeHasPrefix applies the HasPrefix predicate on the "usertype" field.
func UsertypeHasPrefix(v string) predicate.Logs {
	return predicate.Logs(sql.FieldHasPrefix(FieldUsertype, v))
}

// UsertypeHasSuffix applies the HasSuffix predicate on the "usertype" field.
func UsertypeHasSuffix(v string) predicate.Logs {
	return predicate.Logs(sql.FieldHasSuffix(FieldUsertype, v))
}

// UsertypeIsNil applies the IsNil predicate on the "usertype" field.
func UsertypeIsNil() predicate.Logs {
	return predicate.Logs(sql.FieldIsNull(FieldUsertype))
}

// UsertypeNotNil applies the NotNil predicate on the "usertype" field.
func UsertypeNotNil() predicate.Logs {
	return predicate.Logs(sql.FieldNotNull(FieldUsertype))
}

// UsertypeEqualFold applies the EqualFold predicate on the "usertype" field.
func UsertypeEqualFold(v string) predicate.Logs {
	return predicate.Logs(sql.FieldEqualFold(FieldUsertype, v))
}

// UsertypeContainsFold applies the ContainsFold predicate on the "usertype" field.
func UsertypeContainsFold(v string) predicate.Logs {
	return predicate.Logs(sql.FieldContainsFold(FieldUsertype, v))
}

// UserdetailsEQ applies the EQ predicate on the "userdetails" field.
func UserdetailsEQ(v string) predicate.Logs {
	return predicate.Logs(sql.FieldEQ(FieldUserdetails, v))
}

// UserdetailsNEQ applies the NEQ predicate on the "userdetails" field.
func UserdetailsNEQ(v string) predicate.Logs {
	return predicate.Logs(sql.FieldNEQ(FieldUserdetails, v))
}

// UserdetailsIn applies the In predicate on the "userdetails" field.
func UserdetailsIn(vs ...string) predicate.Logs {
	return predicate.Logs(sql.FieldIn(FieldUserdetails, vs...))
}

// UserdetailsNotIn applies the NotIn predicate on the "userdetails" field.
func UserdetailsNotIn(vs ...string) predicate.Logs {
	return predicate.Logs(sql.FieldNotIn(FieldUserdetails, vs...))
}

// UserdetailsGT applies the GT predicate on the "userdetails" field.
func UserdetailsGT(v string) predicate.Logs {
	return predicate.Logs(sql.FieldGT(FieldUserdetails, v))
}

// UserdetailsGTE applies the GTE predicate on the "userdetails" field.
func UserdetailsGTE(v string) predicate.Logs {
	return predicate.Logs(sql.FieldGTE(FieldUserdetails, v))
}

// UserdetailsLT applies the LT predicate on the "userdetails" field.
func UserdetailsLT(v string) predicate.Logs {
	return predicate.Logs(sql.FieldLT(FieldUserdetails, v))
}

// UserdetailsLTE applies the LTE predicate on the "userdetails" field.
func UserdetailsLTE(v string) predicate.Logs {
	return predicate.Logs(sql.FieldLTE(FieldUserdetails, v))
}

// UserdetailsContains applies the Contains predicate on the "userdetails" field.
func UserdetailsContains(v string) predicate.Logs {
	return predicate.Logs(sql.FieldContains(FieldUserdetails, v))
}

// UserdetailsHasPrefix applies the HasPrefix predicate on the "userdetails" field.
func UserdetailsHasPrefix(v string) predicate.Logs {
	return predicate.Logs(sql.FieldHasPrefix(FieldUserdetails, v))
}

// UserdetailsHasSuffix applies the HasSuffix predicate on the "userdetails" field.
func UserdetailsHasSuffix(v string) predicate.Logs {
	return predicate.Logs(sql.FieldHasSuffix(FieldUserdetails, v))
}

// UserdetailsIsNil applies the IsNil predicate on the "userdetails" field.
func UserdetailsIsNil() predicate.Logs {
	return predicate.Logs(sql.FieldIsNull(FieldUserdetails))
}

// UserdetailsNotNil applies the NotNil predicate on the "userdetails" field.
func UserdetailsNotNil() predicate.Logs {
	return predicate.Logs(sql.FieldNotNull(FieldUserdetails))
}

// UserdetailsEqualFold applies the EqualFold predicate on the "userdetails" field.
func UserdetailsEqualFold(v string) predicate.Logs {
	return predicate.Logs(sql.FieldEqualFold(FieldUserdetails, v))
}

// UserdetailsContainsFold applies the ContainsFold predicate on the "userdetails" field.
func UserdetailsContainsFold(v string) predicate.Logs {
	return predicate.Logs(sql.FieldContainsFold(FieldUserdetails, v))
}

// RemarksEQ applies the EQ predicate on the "remarks" field.
func RemarksEQ(v string) predicate.Logs {
	return predicate.Logs(sql.FieldEQ(FieldRemarks, v))
}

// RemarksNEQ applies the NEQ predicate on the "remarks" field.
func RemarksNEQ(v string) predicate.Logs {
	return predicate.Logs(sql.FieldNEQ(FieldRemarks, v))
}

// RemarksIn applies the In predicate on the "remarks" field.
func RemarksIn(vs ...string) predicate.Logs {
	return predicate.Logs(sql.FieldIn(FieldRemarks, vs...))
}

// RemarksNotIn applies the NotIn predicate on the "remarks" field.
func RemarksNotIn(vs ...string) predicate.Logs {
	return predicate.Logs(sql.FieldNotIn(FieldRemarks, vs...))
}

// RemarksGT applies the GT predicate on the "remarks" field.
func RemarksGT(v string) predicate.Logs {
	return predicate.Logs(sql.FieldGT(FieldRemarks, v))
}

// RemarksGTE applies the GTE predicate on the "remarks" field.
func RemarksGTE(v string) predicate.Logs {
	return predicate.Logs(sql.FieldGTE(FieldRemarks, v))
}

// RemarksLT applies the LT predicate on the "remarks" field.
func RemarksLT(v string) predicate.Logs {
	return predicate.Logs(sql.FieldLT(FieldRemarks, v))
}

// RemarksLTE applies the LTE predicate on the "remarks" field.
func RemarksLTE(v string) predicate.Logs {
	return predicate.Logs(sql.FieldLTE(FieldRemarks, v))
}

// RemarksContains applies the Contains predicate on the "remarks" field.
func RemarksContains(v string) predicate.Logs {
	return predicate.Logs(sql.FieldContains(FieldRemarks, v))
}

// RemarksHasPrefix applies the HasPrefix predicate on the "remarks" field.
func RemarksHasPrefix(v string) predicate.Logs {
	return predicate.Logs(sql.FieldHasPrefix(FieldRemarks, v))
}

// RemarksHasSuffix applies the HasSuffix predicate on the "remarks" field.
func RemarksHasSuffix(v string) predicate.Logs {
	return predicate.Logs(sql.FieldHasSuffix(FieldRemarks, v))
}

// RemarksIsNil applies the IsNil predicate on the "remarks" field.
func RemarksIsNil() predicate.Logs {
	return predicate.Logs(sql.FieldIsNull(FieldRemarks))
}

// RemarksNotNil applies the NotNil predicate on the "remarks" field.
func RemarksNotNil() predicate.Logs {
	return predicate.Logs(sql.FieldNotNull(FieldRemarks))
}

// RemarksEqualFold applies the EqualFold predicate on the "remarks" field.
func RemarksEqualFold(v string) predicate.Logs {
	return predicate.Logs(sql.FieldEqualFold(FieldRemarks, v))
}

// RemarksContainsFold applies the ContainsFold predicate on the "remarks" field.
func RemarksContainsFold(v string) predicate.Logs {
	return predicate.Logs(sql.FieldContainsFold(FieldRemarks, v))
}

// ActionEQ applies the EQ predicate on the "action" field.
func ActionEQ(v string) predicate.Logs {
	return predicate.Logs(sql.FieldEQ(FieldAction, v))
}

// ActionNEQ applies the NEQ predicate on the "action" field.
func ActionNEQ(v string) predicate.Logs {
	return predicate.Logs(sql.FieldNEQ(FieldAction, v))
}

// ActionIn applies the In predicate on the "action" field.
func ActionIn(vs ...string) predicate.Logs {
	return predicate.Logs(sql.FieldIn(FieldAction, vs...))
}

// ActionNotIn applies the NotIn predicate on the "action" field.
func ActionNotIn(vs ...string) predicate.Logs {
	return predicate.Logs(sql.FieldNotIn(FieldAction, vs...))
}

// ActionGT applies the GT predicate on the "action" field.
func ActionGT(v string) predicate.Logs {
	return predicate.Logs(sql.FieldGT(FieldAction, v))
}

// ActionGTE applies the GTE predicate on the "action" field.
func ActionGTE(v string) predicate.Logs {
	return predicate.Logs(sql.FieldGTE(FieldAction, v))
}

// ActionLT applies the LT predicate on the "action" field.
func ActionLT(v string) predicate.Logs {
	return predicate.Logs(sql.FieldLT(FieldAction, v))
}

// ActionLTE applies the LTE predicate on the "action" field.
func ActionLTE(v string) predicate.Logs {
	return predicate.Logs(sql.FieldLTE(FieldAction, v))
}

// ActionContains applies the Contains predicate on the "action" field.
func ActionContains(v string) predicate.Logs {
	return predicate.Logs(sql.FieldContains(FieldAction, v))
}

// ActionHasPrefix applies the HasPrefix predicate on the "action" field.
func ActionHasPrefix(v string) predicate.Logs {
	return predicate.Logs(sql.FieldHasPrefix(FieldAction, v))
}

// ActionHasSuffix applies the HasSuffix predicate on the "action" field.
func ActionHasSuffix(v string) predicate.Logs {
	return predicate.Logs(sql.FieldHasSuffix(FieldAction, v))
}

// ActionIsNil applies the IsNil predicate on the "action" field.
func ActionIsNil() predicate.Logs {
	return predicate.Logs(sql.FieldIsNull(FieldAction))
}

// ActionNotNil applies the NotNil predicate on the "action" field.
func ActionNotNil() predicate.Logs {
	return predicate.Logs(sql.FieldNotNull(FieldAction))
}

// ActionEqualFold applies the EqualFold predicate on the "action" field.
func ActionEqualFold(v string) predicate.Logs {
	return predicate.Logs(sql.FieldEqualFold(FieldAction, v))
}

// ActionContainsFold applies the ContainsFold predicate on the "action" field.
func ActionContainsFold(v string) predicate.Logs {
	return predicate.Logs(sql.FieldContainsFold(FieldAction, v))
}

// IpaddressEQ applies the EQ predicate on the "ipaddress" field.
func IpaddressEQ(v string) predicate.Logs {
	return predicate.Logs(sql.FieldEQ(FieldIpaddress, v))
}

// IpaddressNEQ applies the NEQ predicate on the "ipaddress" field.
func IpaddressNEQ(v string) predicate.Logs {
	return predicate.Logs(sql.FieldNEQ(FieldIpaddress, v))
}

// IpaddressIn applies the In predicate on the "ipaddress" field.
func IpaddressIn(vs ...string) predicate.Logs {
	return predicate.Logs(sql.FieldIn(FieldIpaddress, vs...))
}

// IpaddressNotIn applies the NotIn predicate on the "ipaddress" field.
func IpaddressNotIn(vs ...string) predicate.Logs {
	return predicate.Logs(sql.FieldNotIn(FieldIpaddress, vs...))
}

// IpaddressGT applies the GT predicate on the "ipaddress" field.
func IpaddressGT(v string) predicate.Logs {
	return predicate.Logs(sql.FieldGT(FieldIpaddress, v))
}

// IpaddressGTE applies the GTE predicate on the "ipaddress" field.
func IpaddressGTE(v string) predicate.Logs {
	return predicate.Logs(sql.FieldGTE(FieldIpaddress, v))
}

// IpaddressLT applies the LT predicate on the "ipaddress" field.
func IpaddressLT(v string) predicate.Logs {
	return predicate.Logs(sql.FieldLT(FieldIpaddress, v))
}

// IpaddressLTE applies the LTE predicate on the "ipaddress" field.
func IpaddressLTE(v string) predicate.Logs {
	return predicate.Logs(sql.FieldLTE(FieldIpaddress, v))
}

// IpaddressContains applies the Contains predicate on the "ipaddress" field.
func IpaddressContains(v string) predicate.Logs {
	return predicate.Logs(sql.FieldContains(FieldIpaddress, v))
}

// IpaddressHasPrefix applies the HasPrefix predicate on the "ipaddress" field.
func IpaddressHasPrefix(v string) predicate.Logs {
	return predicate.Logs(sql.FieldHasPrefix(FieldIpaddress, v))
}

// IpaddressHasSuffix applies the HasSuffix predicate on the "ipaddress" field.
func IpaddressHasSuffix(v string) predicate.Logs {
	return predicate.Logs(sql.FieldHasSuffix(FieldIpaddress, v))
}

// IpaddressIsNil applies the IsNil predicate on the "ipaddress" field.
func IpaddressIsNil() predicate.Logs {
	return predicate.Logs(sql.FieldIsNull(FieldIpaddress))
}

// IpaddressNotNil applies the NotNil predicate on the "ipaddress" field.
func IpaddressNotNil() predicate.Logs {
	return predicate.Logs(sql.FieldNotNull(FieldIpaddress))
}

// IpaddressEqualFold applies the EqualFold predicate on the "ipaddress" field.
func IpaddressEqualFold(v string) predicate.Logs {
	return predicate.Logs(sql.FieldEqualFold(FieldIpaddress, v))
}

// IpaddressContainsFold applies the ContainsFold predicate on the "ipaddress" field.
func IpaddressContainsFold(v string) predicate.Logs {
	return predicate.Logs(sql.FieldContainsFold(FieldIpaddress, v))
}

// DevicetypeEQ applies the EQ predicate on the "devicetype" field.
func DevicetypeEQ(v string) predicate.Logs {
	return predicate.Logs(sql.FieldEQ(FieldDevicetype, v))
}

// DevicetypeNEQ applies the NEQ predicate on the "devicetype" field.
func DevicetypeNEQ(v string) predicate.Logs {
	return predicate.Logs(sql.FieldNEQ(FieldDevicetype, v))
}

// DevicetypeIn applies the In predicate on the "devicetype" field.
func DevicetypeIn(vs ...string) predicate.Logs {
	return predicate.Logs(sql.FieldIn(FieldDevicetype, vs...))
}

// DevicetypeNotIn applies the NotIn predicate on the "devicetype" field.
func DevicetypeNotIn(vs ...string) predicate.Logs {
	return predicate.Logs(sql.FieldNotIn(FieldDevicetype, vs...))
}

// DevicetypeGT applies the GT predicate on the "devicetype" field.
func DevicetypeGT(v string) predicate.Logs {
	return predicate.Logs(sql.FieldGT(FieldDevicetype, v))
}

// DevicetypeGTE applies the GTE predicate on the "devicetype" field.
func DevicetypeGTE(v string) predicate.Logs {
	return predicate.Logs(sql.FieldGTE(FieldDevicetype, v))
}

// DevicetypeLT applies the LT predicate on the "devicetype" field.
func DevicetypeLT(v string) predicate.Logs {
	return predicate.Logs(sql.FieldLT(FieldDevicetype, v))
}

// DevicetypeLTE applies the LTE predicate on the "devicetype" field.
func DevicetypeLTE(v string) predicate.Logs {
	return predicate.Logs(sql.FieldLTE(FieldDevicetype, v))
}

// DevicetypeContains applies the Contains predicate on the "devicetype" field.
func DevicetypeContains(v string) predicate.Logs {
	return predicate.Logs(sql.FieldContains(FieldDevicetype, v))
}

// DevicetypeHasPrefix applies the HasPrefix predicate on the "devicetype" field.
func DevicetypeHasPrefix(v string) predicate.Logs {
	return predicate.Logs(sql.FieldHasPrefix(FieldDevicetype, v))
}

// DevicetypeHasSuffix applies the HasSuffix predicate on the "devicetype" field.
func DevicetypeHasSuffix(v string) predicate.Logs {
	return predicate.Logs(sql.FieldHasSuffix(FieldDevicetype, v))
}

// DevicetypeIsNil applies the IsNil predicate on the "devicetype" field.
func DevicetypeIsNil() predicate.Logs {
	return predicate.Logs(sql.FieldIsNull(FieldDevicetype))
}

// DevicetypeNotNil applies the NotNil predicate on the "devicetype" field.
func DevicetypeNotNil() predicate.Logs {
	return predicate.Logs(sql.FieldNotNull(FieldDevicetype))
}

// DevicetypeEqualFold applies the EqualFold predicate on the "devicetype" field.
func DevicetypeEqualFold(v string) predicate.Logs {
	return predicate.Logs(sql.FieldEqualFold(FieldDevicetype, v))
}

// DevicetypeContainsFold applies the ContainsFold predicate on the "devicetype" field.
func DevicetypeContainsFold(v string) predicate.Logs {
	return predicate.Logs(sql.FieldContainsFold(FieldDevicetype, v))
}

// OsEQ applies the EQ predicate on the "os" field.
func OsEQ(v string) predicate.Logs {
	return predicate.Logs(sql.FieldEQ(FieldOs, v))
}

// OsNEQ applies the NEQ predicate on the "os" field.
func OsNEQ(v string) predicate.Logs {
	return predicate.Logs(sql.FieldNEQ(FieldOs, v))
}

// OsIn applies the In predicate on the "os" field.
func OsIn(vs ...string) predicate.Logs {
	return predicate.Logs(sql.FieldIn(FieldOs, vs...))
}

// OsNotIn applies the NotIn predicate on the "os" field.
func OsNotIn(vs ...string) predicate.Logs {
	return predicate.Logs(sql.FieldNotIn(FieldOs, vs...))
}

// OsGT applies the GT predicate on the "os" field.
func OsGT(v string) predicate.Logs {
	return predicate.Logs(sql.FieldGT(FieldOs, v))
}

// OsGTE applies the GTE predicate on the "os" field.
func OsGTE(v string) predicate.Logs {
	return predicate.Logs(sql.FieldGTE(FieldOs, v))
}

// OsLT applies the LT predicate on the "os" field.
func OsLT(v string) predicate.Logs {
	return predicate.Logs(sql.FieldLT(FieldOs, v))
}

// OsLTE applies the LTE predicate on the "os" field.
func OsLTE(v string) predicate.Logs {
	return predicate.Logs(sql.FieldLTE(FieldOs, v))
}

// OsContains applies the Contains predicate on the "os" field.
func OsContains(v string) predicate.Logs {
	return predicate.Logs(sql.FieldContains(FieldOs, v))
}

// OsHasPrefix applies the HasPrefix predicate on the "os" field.
func OsHasPrefix(v string) predicate.Logs {
	return predicate.Logs(sql.FieldHasPrefix(FieldOs, v))
}

// OsHasSuffix applies the HasSuffix predicate on the "os" field.
func OsHasSuffix(v string) predicate.Logs {
	return predicate.Logs(sql.FieldHasSuffix(FieldOs, v))
}

// OsIsNil applies the IsNil predicate on the "os" field.
func OsIsNil() predicate.Logs {
	return predicate.Logs(sql.FieldIsNull(FieldOs))
}

// OsNotNil applies the NotNil predicate on the "os" field.
func OsNotNil() predicate.Logs {
	return predicate.Logs(sql.FieldNotNull(FieldOs))
}

// OsEqualFold applies the EqualFold predicate on the "os" field.
func OsEqualFold(v string) predicate.Logs {
	return predicate.Logs(sql.FieldEqualFold(FieldOs, v))
}

// OsContainsFold applies the ContainsFold predicate on the "os" field.
func OsContainsFold(v string) predicate.Logs {
	return predicate.Logs(sql.FieldContainsFold(FieldOs, v))
}

// BrowserEQ applies the EQ predicate on the "browser" field.
func BrowserEQ(v string) predicate.Logs {
	return predicate.Logs(sql.FieldEQ(FieldBrowser, v))
}

// BrowserNEQ applies the NEQ predicate on the "browser" field.
func BrowserNEQ(v string) predicate.Logs {
	return predicate.Logs(sql.FieldNEQ(FieldBrowser, v))
}

// BrowserIn applies the In predicate on the "browser" field.
func BrowserIn(vs ...string) predicate.Logs {
	return predicate.Logs(sql.FieldIn(FieldBrowser, vs...))
}

// BrowserNotIn applies the NotIn predicate on the "browser" field.
func BrowserNotIn(vs ...string) predicate.Logs {
	return predicate.Logs(sql.FieldNotIn(FieldBrowser, vs...))
}

// BrowserGT applies the GT predicate on the "browser" field.
func BrowserGT(v string) predicate.Logs {
	return predicate.Logs(sql.FieldGT(FieldBrowser, v))
}

// BrowserGTE applies the GTE predicate on the "browser" field.
func BrowserGTE(v string) predicate.Logs {
	return predicate.Logs(sql.FieldGTE(FieldBrowser, v))
}

// BrowserLT applies the LT predicate on the "browser" field.
func BrowserLT(v string) predicate.Logs {
	return predicate.Logs(sql.FieldLT(FieldBrowser, v))
}

// BrowserLTE applies the LTE predicate on the "browser" field.
func BrowserLTE(v string) predicate.Logs {
	return predicate.Logs(sql.FieldLTE(FieldBrowser, v))
}

// BrowserContains applies the Contains predicate on the "browser" field.
func BrowserContains(v string) predicate.Logs {
	return predicate.Logs(sql.FieldContains(FieldBrowser, v))
}

// BrowserHasPrefix applies the HasPrefix predicate on the "browser" field.
func BrowserHasPrefix(v string) predicate.Logs {
	return predicate.Logs(sql.FieldHasPrefix(FieldBrowser, v))
}

// BrowserHasSuffix applies the HasSuffix predicate on the "browser" field.
func BrowserHasSuffix(v string) predicate.Logs {
	return predicate.Logs(sql.FieldHasSuffix(FieldBrowser, v))
}

// BrowserIsNil applies the IsNil predicate on the "browser" field.
func BrowserIsNil() predicate.Logs {
	return predicate.Logs(sql.FieldIsNull(FieldBrowser))
}

// BrowserNotNil applies the NotNil predicate on the "browser" field.
func BrowserNotNil() predicate.Logs {
	return predicate.Logs(sql.FieldNotNull(FieldBrowser))
}

// BrowserEqualFold applies the EqualFold predicate on the "browser" field.
func BrowserEqualFold(v string) predicate.Logs {
	return predicate.Logs(sql.FieldEqualFold(FieldBrowser, v))
}

// BrowserContainsFold applies the ContainsFold predicate on the "browser" field.
func BrowserContainsFold(v string) predicate.Logs {
	return predicate.Logs(sql.FieldContainsFold(FieldBrowser, v))
}

// LatitudeEQ applies the EQ predicate on the "latitude" field.
func LatitudeEQ(v float64) predicate.Logs {
	return predicate.Logs(sql.FieldEQ(FieldLatitude, v))
}

// LatitudeNEQ applies the NEQ predicate on the "latitude" field.
func LatitudeNEQ(v float64) predicate.Logs {
	return predicate.Logs(sql.FieldNEQ(FieldLatitude, v))
}

// LatitudeIn applies the In predicate on the "latitude" field.
func LatitudeIn(vs ...float64) predicate.Logs {
	return predicate.Logs(sql.FieldIn(FieldLatitude, vs...))
}

// LatitudeNotIn applies the NotIn predicate on the "latitude" field.
func LatitudeNotIn(vs ...float64) predicate.Logs {
	return predicate.Logs(sql.FieldNotIn(FieldLatitude, vs...))
}

// LatitudeGT applies the GT predicate on the "latitude" field.
func LatitudeGT(v float64) predicate.Logs {
	return predicate.Logs(sql.FieldGT(FieldLatitude, v))
}

// LatitudeGTE applies the GTE predicate on the "latitude" field.
func LatitudeGTE(v float64) predicate.Logs {
	return predicate.Logs(sql.FieldGTE(FieldLatitude, v))
}

// LatitudeLT applies the LT predicate on the "latitude" field.
func LatitudeLT(v float64) predicate.Logs {
	return predicate.Logs(sql.FieldLT(FieldLatitude, v))
}

// LatitudeLTE applies the LTE predicate on the "latitude" field.
func LatitudeLTE(v float64) predicate.Logs {
	return predicate.Logs(sql.FieldLTE(FieldLatitude, v))
}

// LatitudeIsNil applies the IsNil predicate on the "latitude" field.
func LatitudeIsNil() predicate.Logs {
	return predicate.Logs(sql.FieldIsNull(FieldLatitude))
}

// LatitudeNotNil applies the NotNil predicate on the "latitude" field.
func LatitudeNotNil() predicate.Logs {
	return predicate.Logs(sql.FieldNotNull(FieldLatitude))
}

// LongitudeEQ applies the EQ predicate on the "longitude" field.
func LongitudeEQ(v float64) predicate.Logs {
	return predicate.Logs(sql.FieldEQ(FieldLongitude, v))
}

// LongitudeNEQ applies the NEQ predicate on the "longitude" field.
func LongitudeNEQ(v float64) predicate.Logs {
	return predicate.Logs(sql.FieldNEQ(FieldLongitude, v))
}

// LongitudeIn applies the In predicate on the "longitude" field.
func LongitudeIn(vs ...float64) predicate.Logs {
	return predicate.Logs(sql.FieldIn(FieldLongitude, vs...))
}

// LongitudeNotIn applies the NotIn predicate on the "longitude" field.
func LongitudeNotIn(vs ...float64) predicate.Logs {
	return predicate.Logs(sql.FieldNotIn(FieldLongitude, vs...))
}

// LongitudeGT applies the GT predicate on the "longitude" field.
func LongitudeGT(v float64) predicate.Logs {
	return predicate.Logs(sql.FieldGT(FieldLongitude, v))
}

// LongitudeGTE applies the GTE predicate on the "longitude" field.
func LongitudeGTE(v float64) predicate.Logs {
	return predicate.Logs(sql.FieldGTE(FieldLongitude, v))
}

// LongitudeLT applies the LT predicate on the "longitude" field.
func LongitudeLT(v float64) predicate.Logs {
	return predicate.Logs(sql.FieldLT(FieldLongitude, v))
}

// LongitudeLTE applies the LTE predicate on the "longitude" field.
func LongitudeLTE(v float64) predicate.Logs {
	return predicate.Logs(sql.FieldLTE(FieldLongitude, v))
}

// LongitudeIsNil applies the IsNil predicate on the "longitude" field.
func LongitudeIsNil() predicate.Logs {
	return predicate.Logs(sql.FieldIsNull(FieldLongitude))
}

// LongitudeNotNil applies the NotNil predicate on the "longitude" field.
func LongitudeNotNil() predicate.Logs {
	return predicate.Logs(sql.FieldNotNull(FieldLongitude))
}

// EventtimeEQ applies the EQ predicate on the "eventtime" field.
func EventtimeEQ(v time.Time) predicate.Logs {
	return predicate.Logs(sql.FieldEQ(FieldEventtime, v))
}

// EventtimeNEQ applies the NEQ predicate on the "eventtime" field.
func EventtimeNEQ(v time.Time) predicate.Logs {
	return predicate.Logs(sql.FieldNEQ(FieldEventtime, v))
}

// EventtimeIn applies the In predicate on the "eventtime" field.
func EventtimeIn(vs ...time.Time) predicate.Logs {
	return predicate.Logs(sql.FieldIn(FieldEventtime, vs...))
}

// EventtimeNotIn applies the NotIn predicate on the "eventtime" field.
func EventtimeNotIn(vs ...time.Time) predicate.Logs {
	return predicate.Logs(sql.FieldNotIn(FieldEventtime, vs...))
}

// EventtimeGT applies the GT predicate on the "eventtime" field.
func EventtimeGT(v time.Time) predicate.Logs {
	return predicate.Logs(sql.FieldGT(FieldEventtime, v))
}

// EventtimeGTE applies the GTE predicate on the "eventtime" field.
func EventtimeGTE(v time.Time) predicate.Logs {
	return predicate.Logs(sql.FieldGTE(FieldEventtime, v))
}

// EventtimeLT applies the LT predicate on the "eventtime" field.
func EventtimeLT(v time.Time) predicate.Logs {
	return predicate.Logs(sql.FieldLT(FieldEventtime, v))
}

// EventtimeLTE applies the LTE predicate on the "eventtime" field.
func EventtimeLTE(v time.Time) predicate.Logs {
	return predicate.Logs(sql.FieldLTE(FieldEventtime, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Logs) predicate.Logs {
	return predicate.Logs(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Logs) predicate.Logs {
	return predicate.Logs(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Logs) predicate.Logs {
	return predicate.Logs(func(s *sql.Selector) {
		p(s.Not())
	})
}
