// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"recruit/ent/center"
	"recruit/ent/examcenterhall"
	"recruit/ent/schema"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// ExamCenterHall is the model entity for the ExamCenterHall schema.
type ExamCenterHall struct {
	config `json:"-"`
	// ID of the ent.
	ID int32 `json:"id,omitempty"`
	// CenterCode holds the value of the "CenterCode" field.
	CenterCode int32 `json:"CenterCode,omitempty"`
	// CityID holds the value of the "CityID" field.
	CityID int32 `json:"CityID,omitempty"`
	// ExamCenterName holds the value of the "ExamCenterName" field.
	ExamCenterName string `json:"ExamCenterName,omitempty"`
	// ExamYear holds the value of the "ExamYear" field.
	ExamYear string `json:"ExamYear,omitempty"`
	// ExamCode holds the value of the "ExamCode" field.
	ExamCode int32 `json:"ExamCode,omitempty"`
	// ExamName holds the value of the "ExamName" field.
	ExamName string `json:"ExamName,omitempty"`
	// CenterCityName holds the value of the "CenterCityName" field.
	CenterCityName string `json:"CenterCityName,omitempty"`
	// ConductedByFacilityID holds the value of the "ConductedByFacilityID" field.
	ConductedByFacilityID string `json:"ConductedByFacilityID,omitempty"`
	// ConductedBy holds the value of the "ConductedBy" field.
	ConductedBy string `json:"ConductedBy,omitempty"`
	// HallName holds the value of the "HallName" field.
	HallName string `json:"HallName,omitempty"`
	// AdminCircleOfficeID holds the value of the "AdminCircleOfficeID" field.
	AdminCircleOfficeID string `json:"AdminCircleOfficeID,omitempty"`
	// MappingIdentificationNumber holds the value of the "MappingIdentificationNumber" field.
	MappingIdentificationNumber []schema.StrucMappingIdentificationNumber `json:"MappingIdentificationNumber,omitempty"`
	// Status holds the value of the "Status" field.
	Status string `json:"Status,omitempty"`
	// CreatedById holds the value of the "CreatedById" field.
	CreatedById int64 `json:"CreatedById,omitempty"`
	// CreatedByUserName holds the value of the "CreatedByUserName" field.
	CreatedByUserName string `json:"CreatedByUserName,omitempty"`
	// CreatedByEmpId holds the value of the "CreatedByEmpId" field.
	CreatedByEmpId int64 `json:"CreatedByEmpId,omitempty"`
	// CreatedByDesignation holds the value of the "CreatedByDesignation" field.
	CreatedByDesignation string `json:"CreatedByDesignation,omitempty"`
	// CreatedDate holds the value of the "CreatedDate" field.
	CreatedDate time.Time `json:"CreatedDate,omitempty"`
	// ModifiedById holds the value of the "ModifiedById" field.
	ModifiedById int64 `json:"ModifiedById,omitempty"`
	// ModifiedByUserName holds the value of the "ModifiedByUserName" field.
	ModifiedByUserName string `json:"ModifiedByUserName,omitempty"`
	// ModifiedByEmpId holds the value of the "ModifiedByEmpId" field.
	ModifiedByEmpId int64 `json:"ModifiedByEmpId,omitempty"`
	// ModifiedByDesignantion holds the value of the "ModifiedByDesignantion" field.
	ModifiedByDesignantion string `json:"ModifiedByDesignantion,omitempty"`
	// ModifiedDate holds the value of the "ModifiedDate" field.
	ModifiedDate time.Time `json:"ModifiedDate,omitempty"`
	// DeletedById holds the value of the "DeletedById" field.
	DeletedById int64 `json:"DeletedById,omitempty"`
	// DeletedByUserName holds the value of the "DeletedByUserName" field.
	DeletedByUserName string `json:"DeletedByUserName,omitempty"`
	// DeletedByEmpId holds the value of the "DeletedByEmpId" field.
	DeletedByEmpId int64 `json:"DeletedByEmpId,omitempty"`
	// DeletedByDesignation holds the value of the "DeletedByDesignation" field.
	DeletedByDesignation string `json:"DeletedByDesignation,omitempty"`
	// DeletedDate holds the value of the "DeletedDate" field.
	DeletedDate time.Time `json:"DeletedDate,omitempty"`
	// UpdatedAt holds the value of the "UpdatedAt" field.
	UpdatedAt time.Time `json:"UpdatedAt,omitempty"`
	// NoSeats holds the value of the "NoSeats" field.
	NoSeats int32 `json:"NoSeats,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ExamCenterHallQuery when eager-loading is set.
	Edges        ExamCenterHallEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ExamCenterHallEdges holds the relations/edges for other nodes in the graph.
type ExamCenterHallEdges struct {
	// ExaCenterHall holds the value of the ExaCenterHall edge.
	ExaCenterHall *Center `json:"ExaCenterHall,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ExaCenterHallOrErr returns the ExaCenterHall value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ExamCenterHallEdges) ExaCenterHallOrErr() (*Center, error) {
	if e.loadedTypes[0] {
		if e.ExaCenterHall == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: center.Label}
		}
		return e.ExaCenterHall, nil
	}
	return nil, &NotLoadedError{edge: "ExaCenterHall"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ExamCenterHall) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case examcenterhall.FieldMappingIdentificationNumber:
			values[i] = new([]byte)
		case examcenterhall.FieldID, examcenterhall.FieldCenterCode, examcenterhall.FieldCityID, examcenterhall.FieldExamCode, examcenterhall.FieldCreatedById, examcenterhall.FieldCreatedByEmpId, examcenterhall.FieldModifiedById, examcenterhall.FieldModifiedByEmpId, examcenterhall.FieldDeletedById, examcenterhall.FieldDeletedByEmpId, examcenterhall.FieldNoSeats:
			values[i] = new(sql.NullInt64)
		case examcenterhall.FieldExamCenterName, examcenterhall.FieldExamYear, examcenterhall.FieldExamName, examcenterhall.FieldCenterCityName, examcenterhall.FieldConductedByFacilityID, examcenterhall.FieldConductedBy, examcenterhall.FieldHallName, examcenterhall.FieldAdminCircleOfficeID, examcenterhall.FieldStatus, examcenterhall.FieldCreatedByUserName, examcenterhall.FieldCreatedByDesignation, examcenterhall.FieldModifiedByUserName, examcenterhall.FieldModifiedByDesignantion, examcenterhall.FieldDeletedByUserName, examcenterhall.FieldDeletedByDesignation:
			values[i] = new(sql.NullString)
		case examcenterhall.FieldCreatedDate, examcenterhall.FieldModifiedDate, examcenterhall.FieldDeletedDate, examcenterhall.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ExamCenterHall fields.
func (ech *ExamCenterHall) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case examcenterhall.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ech.ID = int32(value.Int64)
		case examcenterhall.FieldCenterCode:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field CenterCode", values[i])
			} else if value.Valid {
				ech.CenterCode = int32(value.Int64)
			}
		case examcenterhall.FieldCityID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field CityID", values[i])
			} else if value.Valid {
				ech.CityID = int32(value.Int64)
			}
		case examcenterhall.FieldExamCenterName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ExamCenterName", values[i])
			} else if value.Valid {
				ech.ExamCenterName = value.String
			}
		case examcenterhall.FieldExamYear:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ExamYear", values[i])
			} else if value.Valid {
				ech.ExamYear = value.String
			}
		case examcenterhall.FieldExamCode:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field ExamCode", values[i])
			} else if value.Valid {
				ech.ExamCode = int32(value.Int64)
			}
		case examcenterhall.FieldExamName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ExamName", values[i])
			} else if value.Valid {
				ech.ExamName = value.String
			}
		case examcenterhall.FieldCenterCityName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field CenterCityName", values[i])
			} else if value.Valid {
				ech.CenterCityName = value.String
			}
		case examcenterhall.FieldConductedByFacilityID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ConductedByFacilityID", values[i])
			} else if value.Valid {
				ech.ConductedByFacilityID = value.String
			}
		case examcenterhall.FieldConductedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ConductedBy", values[i])
			} else if value.Valid {
				ech.ConductedBy = value.String
			}
		case examcenterhall.FieldHallName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field HallName", values[i])
			} else if value.Valid {
				ech.HallName = value.String
			}
		case examcenterhall.FieldAdminCircleOfficeID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field AdminCircleOfficeID", values[i])
			} else if value.Valid {
				ech.AdminCircleOfficeID = value.String
			}
		case examcenterhall.FieldMappingIdentificationNumber:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field MappingIdentificationNumber", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &ech.MappingIdentificationNumber); err != nil {
					return fmt.Errorf("unmarshal field MappingIdentificationNumber: %w", err)
				}
			}
		case examcenterhall.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Status", values[i])
			} else if value.Valid {
				ech.Status = value.String
			}
		case examcenterhall.FieldCreatedById:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field CreatedById", values[i])
			} else if value.Valid {
				ech.CreatedById = value.Int64
			}
		case examcenterhall.FieldCreatedByUserName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field CreatedByUserName", values[i])
			} else if value.Valid {
				ech.CreatedByUserName = value.String
			}
		case examcenterhall.FieldCreatedByEmpId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field CreatedByEmpId", values[i])
			} else if value.Valid {
				ech.CreatedByEmpId = value.Int64
			}
		case examcenterhall.FieldCreatedByDesignation:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field CreatedByDesignation", values[i])
			} else if value.Valid {
				ech.CreatedByDesignation = value.String
			}
		case examcenterhall.FieldCreatedDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field CreatedDate", values[i])
			} else if value.Valid {
				ech.CreatedDate = value.Time
			}
		case examcenterhall.FieldModifiedById:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field ModifiedById", values[i])
			} else if value.Valid {
				ech.ModifiedById = value.Int64
			}
		case examcenterhall.FieldModifiedByUserName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ModifiedByUserName", values[i])
			} else if value.Valid {
				ech.ModifiedByUserName = value.String
			}
		case examcenterhall.FieldModifiedByEmpId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field ModifiedByEmpId", values[i])
			} else if value.Valid {
				ech.ModifiedByEmpId = value.Int64
			}
		case examcenterhall.FieldModifiedByDesignantion:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ModifiedByDesignantion", values[i])
			} else if value.Valid {
				ech.ModifiedByDesignantion = value.String
			}
		case examcenterhall.FieldModifiedDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field ModifiedDate", values[i])
			} else if value.Valid {
				ech.ModifiedDate = value.Time
			}
		case examcenterhall.FieldDeletedById:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field DeletedById", values[i])
			} else if value.Valid {
				ech.DeletedById = value.Int64
			}
		case examcenterhall.FieldDeletedByUserName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field DeletedByUserName", values[i])
			} else if value.Valid {
				ech.DeletedByUserName = value.String
			}
		case examcenterhall.FieldDeletedByEmpId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field DeletedByEmpId", values[i])
			} else if value.Valid {
				ech.DeletedByEmpId = value.Int64
			}
		case examcenterhall.FieldDeletedByDesignation:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field DeletedByDesignation", values[i])
			} else if value.Valid {
				ech.DeletedByDesignation = value.String
			}
		case examcenterhall.FieldDeletedDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field DeletedDate", values[i])
			} else if value.Valid {
				ech.DeletedDate = value.Time
			}
		case examcenterhall.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field UpdatedAt", values[i])
			} else if value.Valid {
				ech.UpdatedAt = value.Time
			}
		case examcenterhall.FieldNoSeats:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field NoSeats", values[i])
			} else if value.Valid {
				ech.NoSeats = int32(value.Int64)
			}
		default:
			ech.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ExamCenterHall.
// This includes values selected through modifiers, order, etc.
func (ech *ExamCenterHall) Value(name string) (ent.Value, error) {
	return ech.selectValues.Get(name)
}

// QueryExaCenterHall queries the "ExaCenterHall" edge of the ExamCenterHall entity.
func (ech *ExamCenterHall) QueryExaCenterHall() *CenterQuery {
	return NewExamCenterHallClient(ech.config).QueryExaCenterHall(ech)
}

// Update returns a builder for updating this ExamCenterHall.
// Note that you need to call ExamCenterHall.Unwrap() before calling this method if this ExamCenterHall
// was returned from a transaction, and the transaction was committed or rolled back.
func (ech *ExamCenterHall) Update() *ExamCenterHallUpdateOne {
	return NewExamCenterHallClient(ech.config).UpdateOne(ech)
}

// Unwrap unwraps the ExamCenterHall entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ech *ExamCenterHall) Unwrap() *ExamCenterHall {
	_tx, ok := ech.config.driver.(*txDriver)
	if !ok {
		panic("ent: ExamCenterHall is not a transactional entity")
	}
	ech.config.driver = _tx.drv
	return ech
}

// String implements the fmt.Stringer.
func (ech *ExamCenterHall) String() string {
	var builder strings.Builder
	builder.WriteString("ExamCenterHall(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ech.ID))
	builder.WriteString("CenterCode=")
	builder.WriteString(fmt.Sprintf("%v", ech.CenterCode))
	builder.WriteString(", ")
	builder.WriteString("CityID=")
	builder.WriteString(fmt.Sprintf("%v", ech.CityID))
	builder.WriteString(", ")
	builder.WriteString("ExamCenterName=")
	builder.WriteString(ech.ExamCenterName)
	builder.WriteString(", ")
	builder.WriteString("ExamYear=")
	builder.WriteString(ech.ExamYear)
	builder.WriteString(", ")
	builder.WriteString("ExamCode=")
	builder.WriteString(fmt.Sprintf("%v", ech.ExamCode))
	builder.WriteString(", ")
	builder.WriteString("ExamName=")
	builder.WriteString(ech.ExamName)
	builder.WriteString(", ")
	builder.WriteString("CenterCityName=")
	builder.WriteString(ech.CenterCityName)
	builder.WriteString(", ")
	builder.WriteString("ConductedByFacilityID=")
	builder.WriteString(ech.ConductedByFacilityID)
	builder.WriteString(", ")
	builder.WriteString("ConductedBy=")
	builder.WriteString(ech.ConductedBy)
	builder.WriteString(", ")
	builder.WriteString("HallName=")
	builder.WriteString(ech.HallName)
	builder.WriteString(", ")
	builder.WriteString("AdminCircleOfficeID=")
	builder.WriteString(ech.AdminCircleOfficeID)
	builder.WriteString(", ")
	builder.WriteString("MappingIdentificationNumber=")
	builder.WriteString(fmt.Sprintf("%v", ech.MappingIdentificationNumber))
	builder.WriteString(", ")
	builder.WriteString("Status=")
	builder.WriteString(ech.Status)
	builder.WriteString(", ")
	builder.WriteString("CreatedById=")
	builder.WriteString(fmt.Sprintf("%v", ech.CreatedById))
	builder.WriteString(", ")
	builder.WriteString("CreatedByUserName=")
	builder.WriteString(ech.CreatedByUserName)
	builder.WriteString(", ")
	builder.WriteString("CreatedByEmpId=")
	builder.WriteString(fmt.Sprintf("%v", ech.CreatedByEmpId))
	builder.WriteString(", ")
	builder.WriteString("CreatedByDesignation=")
	builder.WriteString(ech.CreatedByDesignation)
	builder.WriteString(", ")
	builder.WriteString("CreatedDate=")
	builder.WriteString(ech.CreatedDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("ModifiedById=")
	builder.WriteString(fmt.Sprintf("%v", ech.ModifiedById))
	builder.WriteString(", ")
	builder.WriteString("ModifiedByUserName=")
	builder.WriteString(ech.ModifiedByUserName)
	builder.WriteString(", ")
	builder.WriteString("ModifiedByEmpId=")
	builder.WriteString(fmt.Sprintf("%v", ech.ModifiedByEmpId))
	builder.WriteString(", ")
	builder.WriteString("ModifiedByDesignantion=")
	builder.WriteString(ech.ModifiedByDesignantion)
	builder.WriteString(", ")
	builder.WriteString("ModifiedDate=")
	builder.WriteString(ech.ModifiedDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("DeletedById=")
	builder.WriteString(fmt.Sprintf("%v", ech.DeletedById))
	builder.WriteString(", ")
	builder.WriteString("DeletedByUserName=")
	builder.WriteString(ech.DeletedByUserName)
	builder.WriteString(", ")
	builder.WriteString("DeletedByEmpId=")
	builder.WriteString(fmt.Sprintf("%v", ech.DeletedByEmpId))
	builder.WriteString(", ")
	builder.WriteString("DeletedByDesignation=")
	builder.WriteString(ech.DeletedByDesignation)
	builder.WriteString(", ")
	builder.WriteString("DeletedDate=")
	builder.WriteString(ech.DeletedDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("UpdatedAt=")
	builder.WriteString(ech.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("NoSeats=")
	builder.WriteString(fmt.Sprintf("%v", ech.NoSeats))
	builder.WriteByte(')')
	return builder.String()
}

// ExamCenterHalls is a parsable slice of ExamCenterHall.
type ExamCenterHalls []*ExamCenterHall
