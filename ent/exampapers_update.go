// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"recruit/ent/center"
	"recruit/ent/disability"
	"recruit/ent/eligibilitymaster"
	"recruit/ent/examcalendar"
	"recruit/ent/exampapers"
	"recruit/ent/papertypes"
	"recruit/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ExamPapersUpdate is the builder for updating ExamPapers entities.
type ExamPapersUpdate struct {
	config
	hooks    []Hook
	mutation *ExamPapersMutation
}

// Where appends a list predicates to the ExamPapersUpdate builder.
func (epu *ExamPapersUpdate) Where(ps ...predicate.ExamPapers) *ExamPapersUpdate {
	epu.mutation.Where(ps...)
	return epu
}

// SetPaperDescription sets the "PaperDescription" field.
func (epu *ExamPapersUpdate) SetPaperDescription(s string) *ExamPapersUpdate {
	epu.mutation.SetPaperDescription(s)
	return epu
}

// SetExamCode sets the "ExamCode" field.
func (epu *ExamPapersUpdate) SetExamCode(i int32) *ExamPapersUpdate {
	epu.mutation.ResetExamCode()
	epu.mutation.SetExamCode(i)
	return epu
}

// SetNillableExamCode sets the "ExamCode" field if the given value is not nil.
func (epu *ExamPapersUpdate) SetNillableExamCode(i *int32) *ExamPapersUpdate {
	if i != nil {
		epu.SetExamCode(*i)
	}
	return epu
}

// AddExamCode adds i to the "ExamCode" field.
func (epu *ExamPapersUpdate) AddExamCode(i int32) *ExamPapersUpdate {
	epu.mutation.AddExamCode(i)
	return epu
}

// ClearExamCode clears the value of the "ExamCode" field.
func (epu *ExamPapersUpdate) ClearExamCode() *ExamPapersUpdate {
	epu.mutation.ClearExamCode()
	return epu
}

// SetExamName sets the "ExamName" field.
func (epu *ExamPapersUpdate) SetExamName(s string) *ExamPapersUpdate {
	epu.mutation.SetExamName(s)
	return epu
}

// SetNillableExamName sets the "ExamName" field if the given value is not nil.
func (epu *ExamPapersUpdate) SetNillableExamName(s *string) *ExamPapersUpdate {
	if s != nil {
		epu.SetExamName(*s)
	}
	return epu
}

// ClearExamName clears the value of the "ExamName" field.
func (epu *ExamPapersUpdate) ClearExamName() *ExamPapersUpdate {
	epu.mutation.ClearExamName()
	return epu
}

// SetExamShortName sets the "ExamShortName" field.
func (epu *ExamPapersUpdate) SetExamShortName(s string) *ExamPapersUpdate {
	epu.mutation.SetExamShortName(s)
	return epu
}

// SetNillableExamShortName sets the "ExamShortName" field if the given value is not nil.
func (epu *ExamPapersUpdate) SetNillableExamShortName(s *string) *ExamPapersUpdate {
	if s != nil {
		epu.SetExamShortName(*s)
	}
	return epu
}

// ClearExamShortName clears the value of the "ExamShortName" field.
func (epu *ExamPapersUpdate) ClearExamShortName() *ExamPapersUpdate {
	epu.mutation.ClearExamShortName()
	return epu
}

// SetPaperTypeCode sets the "PaperTypeCode" field.
func (epu *ExamPapersUpdate) SetPaperTypeCode(i int32) *ExamPapersUpdate {
	epu.mutation.ResetPaperTypeCode()
	epu.mutation.SetPaperTypeCode(i)
	return epu
}

// SetNillablePaperTypeCode sets the "PaperTypeCode" field if the given value is not nil.
func (epu *ExamPapersUpdate) SetNillablePaperTypeCode(i *int32) *ExamPapersUpdate {
	if i != nil {
		epu.SetPaperTypeCode(*i)
	}
	return epu
}

// AddPaperTypeCode adds i to the "PaperTypeCode" field.
func (epu *ExamPapersUpdate) AddPaperTypeCode(i int32) *ExamPapersUpdate {
	epu.mutation.AddPaperTypeCode(i)
	return epu
}

// ClearPaperTypeCode clears the value of the "PaperTypeCode" field.
func (epu *ExamPapersUpdate) ClearPaperTypeCode() *ExamPapersUpdate {
	epu.mutation.ClearPaperTypeCode()
	return epu
}

// SetPaperTypeName sets the "PaperTypeName" field.
func (epu *ExamPapersUpdate) SetPaperTypeName(s string) *ExamPapersUpdate {
	epu.mutation.SetPaperTypeName(s)
	return epu
}

// SetNillablePaperTypeName sets the "PaperTypeName" field if the given value is not nil.
func (epu *ExamPapersUpdate) SetNillablePaperTypeName(s *string) *ExamPapersUpdate {
	if s != nil {
		epu.SetPaperTypeName(*s)
	}
	return epu
}

// ClearPaperTypeName clears the value of the "PaperTypeName" field.
func (epu *ExamPapersUpdate) ClearPaperTypeName() *ExamPapersUpdate {
	epu.mutation.ClearPaperTypeName()
	return epu
}

// SetCompetitiveQualifying sets the "CompetitiveQualifying" field.
func (epu *ExamPapersUpdate) SetCompetitiveQualifying(b bool) *ExamPapersUpdate {
	epu.mutation.SetCompetitiveQualifying(b)
	return epu
}

// SetNillableCompetitiveQualifying sets the "CompetitiveQualifying" field if the given value is not nil.
func (epu *ExamPapersUpdate) SetNillableCompetitiveQualifying(b *bool) *ExamPapersUpdate {
	if b != nil {
		epu.SetCompetitiveQualifying(*b)
	}
	return epu
}

// SetExceptionForDisability sets the "ExceptionForDisability" field.
func (epu *ExamPapersUpdate) SetExceptionForDisability(b bool) *ExamPapersUpdate {
	epu.mutation.SetExceptionForDisability(b)
	return epu
}

// SetNillableExceptionForDisability sets the "ExceptionForDisability" field if the given value is not nil.
func (epu *ExamPapersUpdate) SetNillableExceptionForDisability(b *bool) *ExamPapersUpdate {
	if b != nil {
		epu.SetExceptionForDisability(*b)
	}
	return epu
}

// SetMaximumMarks sets the "MaximumMarks" field.
func (epu *ExamPapersUpdate) SetMaximumMarks(i int) *ExamPapersUpdate {
	epu.mutation.ResetMaximumMarks()
	epu.mutation.SetMaximumMarks(i)
	return epu
}

// AddMaximumMarks adds i to the "MaximumMarks" field.
func (epu *ExamPapersUpdate) AddMaximumMarks(i int) *ExamPapersUpdate {
	epu.mutation.AddMaximumMarks(i)
	return epu
}

// SetDuration sets the "Duration" field.
func (epu *ExamPapersUpdate) SetDuration(i int) *ExamPapersUpdate {
	epu.mutation.ResetDuration()
	epu.mutation.SetDuration(i)
	return epu
}

// AddDuration adds i to the "Duration" field.
func (epu *ExamPapersUpdate) AddDuration(i int) *ExamPapersUpdate {
	epu.mutation.AddDuration(i)
	return epu
}

// SetLocalLanguageAllowedQuestionPaper sets the "localLanguageAllowedQuestionPaper" field.
func (epu *ExamPapersUpdate) SetLocalLanguageAllowedQuestionPaper(s string) *ExamPapersUpdate {
	epu.mutation.SetLocalLanguageAllowedQuestionPaper(s)
	return epu
}

// SetLocalLanguageAllowedAnswerPaper sets the "localLanguageAllowedAnswerPaper" field.
func (epu *ExamPapersUpdate) SetLocalLanguageAllowedAnswerPaper(s string) *ExamPapersUpdate {
	epu.mutation.SetLocalLanguageAllowedAnswerPaper(s)
	return epu
}

// SetDisabilityTypeID sets the "DisabilityTypeID" field.
func (epu *ExamPapersUpdate) SetDisabilityTypeID(i int32) *ExamPapersUpdate {
	epu.mutation.ResetDisabilityTypeID()
	epu.mutation.SetDisabilityTypeID(i)
	return epu
}

// SetNillableDisabilityTypeID sets the "DisabilityTypeID" field if the given value is not nil.
func (epu *ExamPapersUpdate) SetNillableDisabilityTypeID(i *int32) *ExamPapersUpdate {
	if i != nil {
		epu.SetDisabilityTypeID(*i)
	}
	return epu
}

// AddDisabilityTypeID adds i to the "DisabilityTypeID" field.
func (epu *ExamPapersUpdate) AddDisabilityTypeID(i int32) *ExamPapersUpdate {
	epu.mutation.AddDisabilityTypeID(i)
	return epu
}

// ClearDisabilityTypeID clears the value of the "DisabilityTypeID" field.
func (epu *ExamPapersUpdate) ClearDisabilityTypeID() *ExamPapersUpdate {
	epu.mutation.ClearDisabilityTypeID()
	return epu
}

// SetFromTime sets the "fromTime" field.
func (epu *ExamPapersUpdate) SetFromTime(t time.Time) *ExamPapersUpdate {
	epu.mutation.SetFromTime(t)
	return epu
}

// SetNillableFromTime sets the "fromTime" field if the given value is not nil.
func (epu *ExamPapersUpdate) SetNillableFromTime(t *time.Time) *ExamPapersUpdate {
	if t != nil {
		epu.SetFromTime(*t)
	}
	return epu
}

// ClearFromTime clears the value of the "fromTime" field.
func (epu *ExamPapersUpdate) ClearFromTime() *ExamPapersUpdate {
	epu.mutation.ClearFromTime()
	return epu
}

// SetToTime sets the "toTime" field.
func (epu *ExamPapersUpdate) SetToTime(t time.Time) *ExamPapersUpdate {
	epu.mutation.SetToTime(t)
	return epu
}

// SetNillableToTime sets the "toTime" field if the given value is not nil.
func (epu *ExamPapersUpdate) SetNillableToTime(t *time.Time) *ExamPapersUpdate {
	if t != nil {
		epu.SetToTime(*t)
	}
	return epu
}

// ClearToTime clears the value of the "toTime" field.
func (epu *ExamPapersUpdate) ClearToTime() *ExamPapersUpdate {
	epu.mutation.ClearToTime()
	return epu
}

// SetOrderNumber sets the "OrderNumber" field.
func (epu *ExamPapersUpdate) SetOrderNumber(s string) *ExamPapersUpdate {
	epu.mutation.SetOrderNumber(s)
	return epu
}

// SetNillableOrderNumber sets the "OrderNumber" field if the given value is not nil.
func (epu *ExamPapersUpdate) SetNillableOrderNumber(s *string) *ExamPapersUpdate {
	if s != nil {
		epu.SetOrderNumber(*s)
	}
	return epu
}

// ClearOrderNumber clears the value of the "OrderNumber" field.
func (epu *ExamPapersUpdate) ClearOrderNumber() *ExamPapersUpdate {
	epu.mutation.ClearOrderNumber()
	return epu
}

// SetCreatedById sets the "CreatedById" field.
func (epu *ExamPapersUpdate) SetCreatedById(i int64) *ExamPapersUpdate {
	epu.mutation.ResetCreatedById()
	epu.mutation.SetCreatedById(i)
	return epu
}

// SetNillableCreatedById sets the "CreatedById" field if the given value is not nil.
func (epu *ExamPapersUpdate) SetNillableCreatedById(i *int64) *ExamPapersUpdate {
	if i != nil {
		epu.SetCreatedById(*i)
	}
	return epu
}

// AddCreatedById adds i to the "CreatedById" field.
func (epu *ExamPapersUpdate) AddCreatedById(i int64) *ExamPapersUpdate {
	epu.mutation.AddCreatedById(i)
	return epu
}

// ClearCreatedById clears the value of the "CreatedById" field.
func (epu *ExamPapersUpdate) ClearCreatedById() *ExamPapersUpdate {
	epu.mutation.ClearCreatedById()
	return epu
}

// SetCreatedByUserName sets the "CreatedByUserName" field.
func (epu *ExamPapersUpdate) SetCreatedByUserName(s string) *ExamPapersUpdate {
	epu.mutation.SetCreatedByUserName(s)
	return epu
}

// SetNillableCreatedByUserName sets the "CreatedByUserName" field if the given value is not nil.
func (epu *ExamPapersUpdate) SetNillableCreatedByUserName(s *string) *ExamPapersUpdate {
	if s != nil {
		epu.SetCreatedByUserName(*s)
	}
	return epu
}

// ClearCreatedByUserName clears the value of the "CreatedByUserName" field.
func (epu *ExamPapersUpdate) ClearCreatedByUserName() *ExamPapersUpdate {
	epu.mutation.ClearCreatedByUserName()
	return epu
}

// SetCreatedByEmpId sets the "CreatedByEmpId" field.
func (epu *ExamPapersUpdate) SetCreatedByEmpId(i int64) *ExamPapersUpdate {
	epu.mutation.ResetCreatedByEmpId()
	epu.mutation.SetCreatedByEmpId(i)
	return epu
}

// SetNillableCreatedByEmpId sets the "CreatedByEmpId" field if the given value is not nil.
func (epu *ExamPapersUpdate) SetNillableCreatedByEmpId(i *int64) *ExamPapersUpdate {
	if i != nil {
		epu.SetCreatedByEmpId(*i)
	}
	return epu
}

// AddCreatedByEmpId adds i to the "CreatedByEmpId" field.
func (epu *ExamPapersUpdate) AddCreatedByEmpId(i int64) *ExamPapersUpdate {
	epu.mutation.AddCreatedByEmpId(i)
	return epu
}

// ClearCreatedByEmpId clears the value of the "CreatedByEmpId" field.
func (epu *ExamPapersUpdate) ClearCreatedByEmpId() *ExamPapersUpdate {
	epu.mutation.ClearCreatedByEmpId()
	return epu
}

// SetCreatedByDesignation sets the "CreatedByDesignation" field.
func (epu *ExamPapersUpdate) SetCreatedByDesignation(s string) *ExamPapersUpdate {
	epu.mutation.SetCreatedByDesignation(s)
	return epu
}

// SetNillableCreatedByDesignation sets the "CreatedByDesignation" field if the given value is not nil.
func (epu *ExamPapersUpdate) SetNillableCreatedByDesignation(s *string) *ExamPapersUpdate {
	if s != nil {
		epu.SetCreatedByDesignation(*s)
	}
	return epu
}

// ClearCreatedByDesignation clears the value of the "CreatedByDesignation" field.
func (epu *ExamPapersUpdate) ClearCreatedByDesignation() *ExamPapersUpdate {
	epu.mutation.ClearCreatedByDesignation()
	return epu
}

// SetCreatedDate sets the "CreatedDate" field.
func (epu *ExamPapersUpdate) SetCreatedDate(t time.Time) *ExamPapersUpdate {
	epu.mutation.SetCreatedDate(t)
	return epu
}

// SetNillableCreatedDate sets the "CreatedDate" field if the given value is not nil.
func (epu *ExamPapersUpdate) SetNillableCreatedDate(t *time.Time) *ExamPapersUpdate {
	if t != nil {
		epu.SetCreatedDate(*t)
	}
	return epu
}

// ClearCreatedDate clears the value of the "CreatedDate" field.
func (epu *ExamPapersUpdate) ClearCreatedDate() *ExamPapersUpdate {
	epu.mutation.ClearCreatedDate()
	return epu
}

// SetVerifiedbyid sets the "verifiedbyid" field.
func (epu *ExamPapersUpdate) SetVerifiedbyid(i int64) *ExamPapersUpdate {
	epu.mutation.ResetVerifiedbyid()
	epu.mutation.SetVerifiedbyid(i)
	return epu
}

// SetNillableVerifiedbyid sets the "verifiedbyid" field if the given value is not nil.
func (epu *ExamPapersUpdate) SetNillableVerifiedbyid(i *int64) *ExamPapersUpdate {
	if i != nil {
		epu.SetVerifiedbyid(*i)
	}
	return epu
}

// AddVerifiedbyid adds i to the "verifiedbyid" field.
func (epu *ExamPapersUpdate) AddVerifiedbyid(i int64) *ExamPapersUpdate {
	epu.mutation.AddVerifiedbyid(i)
	return epu
}

// ClearVerifiedbyid clears the value of the "verifiedbyid" field.
func (epu *ExamPapersUpdate) ClearVerifiedbyid() *ExamPapersUpdate {
	epu.mutation.ClearVerifiedbyid()
	return epu
}

// SetVerifiedbyusername sets the "verifiedbyusername" field.
func (epu *ExamPapersUpdate) SetVerifiedbyusername(s string) *ExamPapersUpdate {
	epu.mutation.SetVerifiedbyusername(s)
	return epu
}

// SetNillableVerifiedbyusername sets the "verifiedbyusername" field if the given value is not nil.
func (epu *ExamPapersUpdate) SetNillableVerifiedbyusername(s *string) *ExamPapersUpdate {
	if s != nil {
		epu.SetVerifiedbyusername(*s)
	}
	return epu
}

// ClearVerifiedbyusername clears the value of the "verifiedbyusername" field.
func (epu *ExamPapersUpdate) ClearVerifiedbyusername() *ExamPapersUpdate {
	epu.mutation.ClearVerifiedbyusername()
	return epu
}

// SetVerifiedbyEmployeeid sets the "verifiedbyEmployeeid" field.
func (epu *ExamPapersUpdate) SetVerifiedbyEmployeeid(i int64) *ExamPapersUpdate {
	epu.mutation.ResetVerifiedbyEmployeeid()
	epu.mutation.SetVerifiedbyEmployeeid(i)
	return epu
}

// SetNillableVerifiedbyEmployeeid sets the "verifiedbyEmployeeid" field if the given value is not nil.
func (epu *ExamPapersUpdate) SetNillableVerifiedbyEmployeeid(i *int64) *ExamPapersUpdate {
	if i != nil {
		epu.SetVerifiedbyEmployeeid(*i)
	}
	return epu
}

// AddVerifiedbyEmployeeid adds i to the "verifiedbyEmployeeid" field.
func (epu *ExamPapersUpdate) AddVerifiedbyEmployeeid(i int64) *ExamPapersUpdate {
	epu.mutation.AddVerifiedbyEmployeeid(i)
	return epu
}

// ClearVerifiedbyEmployeeid clears the value of the "verifiedbyEmployeeid" field.
func (epu *ExamPapersUpdate) ClearVerifiedbyEmployeeid() *ExamPapersUpdate {
	epu.mutation.ClearVerifiedbyEmployeeid()
	return epu
}

// SetVerifiedbyDesignation sets the "verifiedbyDesignation" field.
func (epu *ExamPapersUpdate) SetVerifiedbyDesignation(s string) *ExamPapersUpdate {
	epu.mutation.SetVerifiedbyDesignation(s)
	return epu
}

// SetNillableVerifiedbyDesignation sets the "verifiedbyDesignation" field if the given value is not nil.
func (epu *ExamPapersUpdate) SetNillableVerifiedbyDesignation(s *string) *ExamPapersUpdate {
	if s != nil {
		epu.SetVerifiedbyDesignation(*s)
	}
	return epu
}

// ClearVerifiedbyDesignation clears the value of the "verifiedbyDesignation" field.
func (epu *ExamPapersUpdate) ClearVerifiedbyDesignation() *ExamPapersUpdate {
	epu.mutation.ClearVerifiedbyDesignation()
	return epu
}

// SetVerifiedDate sets the "verifiedDate" field.
func (epu *ExamPapersUpdate) SetVerifiedDate(t time.Time) *ExamPapersUpdate {
	epu.mutation.SetVerifiedDate(t)
	return epu
}

// SetNillableVerifiedDate sets the "verifiedDate" field if the given value is not nil.
func (epu *ExamPapersUpdate) SetNillableVerifiedDate(t *time.Time) *ExamPapersUpdate {
	if t != nil {
		epu.SetVerifiedDate(*t)
	}
	return epu
}

// ClearVerifiedDate clears the value of the "verifiedDate" field.
func (epu *ExamPapersUpdate) ClearVerifiedDate() *ExamPapersUpdate {
	epu.mutation.ClearVerifiedDate()
	return epu
}

// SetStatuss sets the "Statuss" field.
func (epu *ExamPapersUpdate) SetStatuss(s string) *ExamPapersUpdate {
	epu.mutation.SetStatuss(s)
	return epu
}

// SetNillableStatuss sets the "Statuss" field if the given value is not nil.
func (epu *ExamPapersUpdate) SetNillableStatuss(s *string) *ExamPapersUpdate {
	if s != nil {
		epu.SetStatuss(*s)
	}
	return epu
}

// ClearStatuss clears the value of the "Statuss" field.
func (epu *ExamPapersUpdate) ClearStatuss() *ExamPapersUpdate {
	epu.mutation.ClearStatuss()
	return epu
}

// SetDeletedbyid sets the "deletedbyid" field.
func (epu *ExamPapersUpdate) SetDeletedbyid(i int64) *ExamPapersUpdate {
	epu.mutation.ResetDeletedbyid()
	epu.mutation.SetDeletedbyid(i)
	return epu
}

// SetNillableDeletedbyid sets the "deletedbyid" field if the given value is not nil.
func (epu *ExamPapersUpdate) SetNillableDeletedbyid(i *int64) *ExamPapersUpdate {
	if i != nil {
		epu.SetDeletedbyid(*i)
	}
	return epu
}

// AddDeletedbyid adds i to the "deletedbyid" field.
func (epu *ExamPapersUpdate) AddDeletedbyid(i int64) *ExamPapersUpdate {
	epu.mutation.AddDeletedbyid(i)
	return epu
}

// ClearDeletedbyid clears the value of the "deletedbyid" field.
func (epu *ExamPapersUpdate) ClearDeletedbyid() *ExamPapersUpdate {
	epu.mutation.ClearDeletedbyid()
	return epu
}

// SetDeletedbyusername sets the "deletedbyusername" field.
func (epu *ExamPapersUpdate) SetDeletedbyusername(s string) *ExamPapersUpdate {
	epu.mutation.SetDeletedbyusername(s)
	return epu
}

// SetNillableDeletedbyusername sets the "deletedbyusername" field if the given value is not nil.
func (epu *ExamPapersUpdate) SetNillableDeletedbyusername(s *string) *ExamPapersUpdate {
	if s != nil {
		epu.SetDeletedbyusername(*s)
	}
	return epu
}

// ClearDeletedbyusername clears the value of the "deletedbyusername" field.
func (epu *ExamPapersUpdate) ClearDeletedbyusername() *ExamPapersUpdate {
	epu.mutation.ClearDeletedbyusername()
	return epu
}

// SetDeletedbyEmployeeid sets the "deletedbyEmployeeid" field.
func (epu *ExamPapersUpdate) SetDeletedbyEmployeeid(i int64) *ExamPapersUpdate {
	epu.mutation.ResetDeletedbyEmployeeid()
	epu.mutation.SetDeletedbyEmployeeid(i)
	return epu
}

// SetNillableDeletedbyEmployeeid sets the "deletedbyEmployeeid" field if the given value is not nil.
func (epu *ExamPapersUpdate) SetNillableDeletedbyEmployeeid(i *int64) *ExamPapersUpdate {
	if i != nil {
		epu.SetDeletedbyEmployeeid(*i)
	}
	return epu
}

// AddDeletedbyEmployeeid adds i to the "deletedbyEmployeeid" field.
func (epu *ExamPapersUpdate) AddDeletedbyEmployeeid(i int64) *ExamPapersUpdate {
	epu.mutation.AddDeletedbyEmployeeid(i)
	return epu
}

// ClearDeletedbyEmployeeid clears the value of the "deletedbyEmployeeid" field.
func (epu *ExamPapersUpdate) ClearDeletedbyEmployeeid() *ExamPapersUpdate {
	epu.mutation.ClearDeletedbyEmployeeid()
	return epu
}

// SetDeletedbyDesignation sets the "deletedbyDesignation" field.
func (epu *ExamPapersUpdate) SetDeletedbyDesignation(s string) *ExamPapersUpdate {
	epu.mutation.SetDeletedbyDesignation(s)
	return epu
}

// SetNillableDeletedbyDesignation sets the "deletedbyDesignation" field if the given value is not nil.
func (epu *ExamPapersUpdate) SetNillableDeletedbyDesignation(s *string) *ExamPapersUpdate {
	if s != nil {
		epu.SetDeletedbyDesignation(*s)
	}
	return epu
}

// ClearDeletedbyDesignation clears the value of the "deletedbyDesignation" field.
func (epu *ExamPapersUpdate) ClearDeletedbyDesignation() *ExamPapersUpdate {
	epu.mutation.ClearDeletedbyDesignation()
	return epu
}

// SetDeletedDate sets the "deletedDate" field.
func (epu *ExamPapersUpdate) SetDeletedDate(t time.Time) *ExamPapersUpdate {
	epu.mutation.SetDeletedDate(t)
	return epu
}

// SetNillableDeletedDate sets the "deletedDate" field if the given value is not nil.
func (epu *ExamPapersUpdate) SetNillableDeletedDate(t *time.Time) *ExamPapersUpdate {
	if t != nil {
		epu.SetDeletedDate(*t)
	}
	return epu
}

// ClearDeletedDate clears the value of the "deletedDate" field.
func (epu *ExamPapersUpdate) ClearDeletedDate() *ExamPapersUpdate {
	epu.mutation.ClearDeletedDate()
	return epu
}

// SetPaperStatus sets the "PaperStatus" field.
func (epu *ExamPapersUpdate) SetPaperStatus(s string) *ExamPapersUpdate {
	epu.mutation.SetPaperStatus(s)
	return epu
}

// SetCalendarCode sets the "CalendarCode" field.
func (epu *ExamPapersUpdate) SetCalendarCode(i int32) *ExamPapersUpdate {
	epu.mutation.ResetCalendarCode()
	epu.mutation.SetCalendarCode(i)
	return epu
}

// SetNillableCalendarCode sets the "CalendarCode" field if the given value is not nil.
func (epu *ExamPapersUpdate) SetNillableCalendarCode(i *int32) *ExamPapersUpdate {
	if i != nil {
		epu.SetCalendarCode(*i)
	}
	return epu
}

// AddCalendarCode adds i to the "CalendarCode" field.
func (epu *ExamPapersUpdate) AddCalendarCode(i int32) *ExamPapersUpdate {
	epu.mutation.AddCalendarCode(i)
	return epu
}

// ClearCalendarCode clears the value of the "CalendarCode" field.
func (epu *ExamPapersUpdate) ClearCalendarCode() *ExamPapersUpdate {
	epu.mutation.ClearCalendarCode()
	return epu
}

// SetExamCodePS sets the "ExamCodePS" field.
func (epu *ExamPapersUpdate) SetExamCodePS(i int32) *ExamPapersUpdate {
	epu.mutation.ResetExamCodePS()
	epu.mutation.SetExamCodePS(i)
	return epu
}

// SetNillableExamCodePS sets the "ExamCodePS" field if the given value is not nil.
func (epu *ExamPapersUpdate) SetNillableExamCodePS(i *int32) *ExamPapersUpdate {
	if i != nil {
		epu.SetExamCodePS(*i)
	}
	return epu
}

// AddExamCodePS adds i to the "ExamCodePS" field.
func (epu *ExamPapersUpdate) AddExamCodePS(i int32) *ExamPapersUpdate {
	epu.mutation.AddExamCodePS(i)
	return epu
}

// ClearExamCodePS clears the value of the "ExamCodePS" field.
func (epu *ExamPapersUpdate) ClearExamCodePS() *ExamPapersUpdate {
	epu.mutation.ClearExamCodePS()
	return epu
}

// SetCreatedByEmployeeId sets the "CreatedByEmployeeId" field.
func (epu *ExamPapersUpdate) SetCreatedByEmployeeId(s string) *ExamPapersUpdate {
	epu.mutation.SetCreatedByEmployeeId(s)
	return epu
}

// SetNillableCreatedByEmployeeId sets the "CreatedByEmployeeId" field if the given value is not nil.
func (epu *ExamPapersUpdate) SetNillableCreatedByEmployeeId(s *string) *ExamPapersUpdate {
	if s != nil {
		epu.SetCreatedByEmployeeId(*s)
	}
	return epu
}

// ClearCreatedByEmployeeId clears the value of the "CreatedByEmployeeId" field.
func (epu *ExamPapersUpdate) ClearCreatedByEmployeeId() *ExamPapersUpdate {
	epu.mutation.ClearCreatedByEmployeeId()
	return epu
}

// AddCenterIDs adds the "centers" edge to the Center entity by IDs.
func (epu *ExamPapersUpdate) AddCenterIDs(ids ...int32) *ExamPapersUpdate {
	epu.mutation.AddCenterIDs(ids...)
	return epu
}

// AddCenters adds the "centers" edges to the Center entity.
func (epu *ExamPapersUpdate) AddCenters(c ...*Center) *ExamPapersUpdate {
	ids := make([]int32, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return epu.AddCenterIDs(ids...)
}

// AddExampapersTypeIDs adds the "exampapers_types" edge to the PaperTypes entity by IDs.
func (epu *ExamPapersUpdate) AddExampapersTypeIDs(ids ...int32) *ExamPapersUpdate {
	epu.mutation.AddExampapersTypeIDs(ids...)
	return epu
}

// AddExampapersTypes adds the "exampapers_types" edges to the PaperTypes entity.
func (epu *ExamPapersUpdate) AddExampapersTypes(p ...*PaperTypes) *ExamPapersUpdate {
	ids := make([]int32, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return epu.AddExampapersTypeIDs(ids...)
}

// AddPapersRefIDs adds the "papers_ref" edge to the ExamCalendar entity by IDs.
func (epu *ExamPapersUpdate) AddPapersRefIDs(ids ...int32) *ExamPapersUpdate {
	epu.mutation.AddPapersRefIDs(ids...)
	return epu
}

// AddPapersRef adds the "papers_ref" edges to the ExamCalendar entity.
func (epu *ExamPapersUpdate) AddPapersRef(e ...*ExamCalendar) *ExamPapersUpdate {
	ids := make([]int32, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return epu.AddPapersRefIDs(ids...)
}

// AddExamPaperEligibilityIDs adds the "ExamPaperEligibility" edge to the EligibilityMaster entity by IDs.
func (epu *ExamPapersUpdate) AddExamPaperEligibilityIDs(ids ...int32) *ExamPapersUpdate {
	epu.mutation.AddExamPaperEligibilityIDs(ids...)
	return epu
}

// AddExamPaperEligibility adds the "ExamPaperEligibility" edges to the EligibilityMaster entity.
func (epu *ExamPapersUpdate) AddExamPaperEligibility(e ...*EligibilityMaster) *ExamPapersUpdate {
	ids := make([]int32, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return epu.AddExamPaperEligibilityIDs(ids...)
}

// AddDisRefIDs adds the "dis_ref" edge to the Disability entity by IDs.
func (epu *ExamPapersUpdate) AddDisRefIDs(ids ...int32) *ExamPapersUpdate {
	epu.mutation.AddDisRefIDs(ids...)
	return epu
}

// AddDisRef adds the "dis_ref" edges to the Disability entity.
func (epu *ExamPapersUpdate) AddDisRef(d ...*Disability) *ExamPapersUpdate {
	ids := make([]int32, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return epu.AddDisRefIDs(ids...)
}

// Mutation returns the ExamPapersMutation object of the builder.
func (epu *ExamPapersUpdate) Mutation() *ExamPapersMutation {
	return epu.mutation
}

// ClearCenters clears all "centers" edges to the Center entity.
func (epu *ExamPapersUpdate) ClearCenters() *ExamPapersUpdate {
	epu.mutation.ClearCenters()
	return epu
}

// RemoveCenterIDs removes the "centers" edge to Center entities by IDs.
func (epu *ExamPapersUpdate) RemoveCenterIDs(ids ...int32) *ExamPapersUpdate {
	epu.mutation.RemoveCenterIDs(ids...)
	return epu
}

// RemoveCenters removes "centers" edges to Center entities.
func (epu *ExamPapersUpdate) RemoveCenters(c ...*Center) *ExamPapersUpdate {
	ids := make([]int32, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return epu.RemoveCenterIDs(ids...)
}

// ClearExampapersTypes clears all "exampapers_types" edges to the PaperTypes entity.
func (epu *ExamPapersUpdate) ClearExampapersTypes() *ExamPapersUpdate {
	epu.mutation.ClearExampapersTypes()
	return epu
}

// RemoveExampapersTypeIDs removes the "exampapers_types" edge to PaperTypes entities by IDs.
func (epu *ExamPapersUpdate) RemoveExampapersTypeIDs(ids ...int32) *ExamPapersUpdate {
	epu.mutation.RemoveExampapersTypeIDs(ids...)
	return epu
}

// RemoveExampapersTypes removes "exampapers_types" edges to PaperTypes entities.
func (epu *ExamPapersUpdate) RemoveExampapersTypes(p ...*PaperTypes) *ExamPapersUpdate {
	ids := make([]int32, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return epu.RemoveExampapersTypeIDs(ids...)
}

// ClearPapersRef clears all "papers_ref" edges to the ExamCalendar entity.
func (epu *ExamPapersUpdate) ClearPapersRef() *ExamPapersUpdate {
	epu.mutation.ClearPapersRef()
	return epu
}

// RemovePapersRefIDs removes the "papers_ref" edge to ExamCalendar entities by IDs.
func (epu *ExamPapersUpdate) RemovePapersRefIDs(ids ...int32) *ExamPapersUpdate {
	epu.mutation.RemovePapersRefIDs(ids...)
	return epu
}

// RemovePapersRef removes "papers_ref" edges to ExamCalendar entities.
func (epu *ExamPapersUpdate) RemovePapersRef(e ...*ExamCalendar) *ExamPapersUpdate {
	ids := make([]int32, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return epu.RemovePapersRefIDs(ids...)
}

// ClearExamPaperEligibility clears all "ExamPaperEligibility" edges to the EligibilityMaster entity.
func (epu *ExamPapersUpdate) ClearExamPaperEligibility() *ExamPapersUpdate {
	epu.mutation.ClearExamPaperEligibility()
	return epu
}

// RemoveExamPaperEligibilityIDs removes the "ExamPaperEligibility" edge to EligibilityMaster entities by IDs.
func (epu *ExamPapersUpdate) RemoveExamPaperEligibilityIDs(ids ...int32) *ExamPapersUpdate {
	epu.mutation.RemoveExamPaperEligibilityIDs(ids...)
	return epu
}

// RemoveExamPaperEligibility removes "ExamPaperEligibility" edges to EligibilityMaster entities.
func (epu *ExamPapersUpdate) RemoveExamPaperEligibility(e ...*EligibilityMaster) *ExamPapersUpdate {
	ids := make([]int32, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return epu.RemoveExamPaperEligibilityIDs(ids...)
}

// ClearDisRef clears all "dis_ref" edges to the Disability entity.
func (epu *ExamPapersUpdate) ClearDisRef() *ExamPapersUpdate {
	epu.mutation.ClearDisRef()
	return epu
}

// RemoveDisRefIDs removes the "dis_ref" edge to Disability entities by IDs.
func (epu *ExamPapersUpdate) RemoveDisRefIDs(ids ...int32) *ExamPapersUpdate {
	epu.mutation.RemoveDisRefIDs(ids...)
	return epu
}

// RemoveDisRef removes "dis_ref" edges to Disability entities.
func (epu *ExamPapersUpdate) RemoveDisRef(d ...*Disability) *ExamPapersUpdate {
	ids := make([]int32, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return epu.RemoveDisRefIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (epu *ExamPapersUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, epu.sqlSave, epu.mutation, epu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (epu *ExamPapersUpdate) SaveX(ctx context.Context) int {
	affected, err := epu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (epu *ExamPapersUpdate) Exec(ctx context.Context) error {
	_, err := epu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (epu *ExamPapersUpdate) ExecX(ctx context.Context) {
	if err := epu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (epu *ExamPapersUpdate) check() error {
	if v, ok := epu.mutation.MaximumMarks(); ok {
		if err := exampapers.MaximumMarksValidator(v); err != nil {
			return &ValidationError{Name: "MaximumMarks", err: fmt.Errorf(`ent: validator failed for field "ExamPapers.MaximumMarks": %w`, err)}
		}
	}
	if v, ok := epu.mutation.Duration(); ok {
		if err := exampapers.DurationValidator(v); err != nil {
			return &ValidationError{Name: "Duration", err: fmt.Errorf(`ent: validator failed for field "ExamPapers.Duration": %w`, err)}
		}
	}
	if v, ok := epu.mutation.LocalLanguageAllowedQuestionPaper(); ok {
		if err := exampapers.LocalLanguageAllowedQuestionPaperValidator(v); err != nil {
			return &ValidationError{Name: "localLanguageAllowedQuestionPaper", err: fmt.Errorf(`ent: validator failed for field "ExamPapers.localLanguageAllowedQuestionPaper": %w`, err)}
		}
	}
	if v, ok := epu.mutation.LocalLanguageAllowedAnswerPaper(); ok {
		if err := exampapers.LocalLanguageAllowedAnswerPaperValidator(v); err != nil {
			return &ValidationError{Name: "localLanguageAllowedAnswerPaper", err: fmt.Errorf(`ent: validator failed for field "ExamPapers.localLanguageAllowedAnswerPaper": %w`, err)}
		}
	}
	if v, ok := epu.mutation.PaperStatus(); ok {
		if err := exampapers.PaperStatusValidator(v); err != nil {
			return &ValidationError{Name: "PaperStatus", err: fmt.Errorf(`ent: validator failed for field "ExamPapers.PaperStatus": %w`, err)}
		}
	}
	return nil
}

func (epu *ExamPapersUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := epu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(exampapers.Table, exampapers.Columns, sqlgraph.NewFieldSpec(exampapers.FieldID, field.TypeInt32))
	if ps := epu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := epu.mutation.PaperDescription(); ok {
		_spec.SetField(exampapers.FieldPaperDescription, field.TypeString, value)
	}
	if value, ok := epu.mutation.ExamCode(); ok {
		_spec.SetField(exampapers.FieldExamCode, field.TypeInt32, value)
	}
	if value, ok := epu.mutation.AddedExamCode(); ok {
		_spec.AddField(exampapers.FieldExamCode, field.TypeInt32, value)
	}
	if epu.mutation.ExamCodeCleared() {
		_spec.ClearField(exampapers.FieldExamCode, field.TypeInt32)
	}
	if value, ok := epu.mutation.ExamName(); ok {
		_spec.SetField(exampapers.FieldExamName, field.TypeString, value)
	}
	if epu.mutation.ExamNameCleared() {
		_spec.ClearField(exampapers.FieldExamName, field.TypeString)
	}
	if value, ok := epu.mutation.ExamShortName(); ok {
		_spec.SetField(exampapers.FieldExamShortName, field.TypeString, value)
	}
	if epu.mutation.ExamShortNameCleared() {
		_spec.ClearField(exampapers.FieldExamShortName, field.TypeString)
	}
	if value, ok := epu.mutation.PaperTypeCode(); ok {
		_spec.SetField(exampapers.FieldPaperTypeCode, field.TypeInt32, value)
	}
	if value, ok := epu.mutation.AddedPaperTypeCode(); ok {
		_spec.AddField(exampapers.FieldPaperTypeCode, field.TypeInt32, value)
	}
	if epu.mutation.PaperTypeCodeCleared() {
		_spec.ClearField(exampapers.FieldPaperTypeCode, field.TypeInt32)
	}
	if value, ok := epu.mutation.PaperTypeName(); ok {
		_spec.SetField(exampapers.FieldPaperTypeName, field.TypeString, value)
	}
	if epu.mutation.PaperTypeNameCleared() {
		_spec.ClearField(exampapers.FieldPaperTypeName, field.TypeString)
	}
	if value, ok := epu.mutation.CompetitiveQualifying(); ok {
		_spec.SetField(exampapers.FieldCompetitiveQualifying, field.TypeBool, value)
	}
	if value, ok := epu.mutation.ExceptionForDisability(); ok {
		_spec.SetField(exampapers.FieldExceptionForDisability, field.TypeBool, value)
	}
	if value, ok := epu.mutation.MaximumMarks(); ok {
		_spec.SetField(exampapers.FieldMaximumMarks, field.TypeInt, value)
	}
	if value, ok := epu.mutation.AddedMaximumMarks(); ok {
		_spec.AddField(exampapers.FieldMaximumMarks, field.TypeInt, value)
	}
	if value, ok := epu.mutation.Duration(); ok {
		_spec.SetField(exampapers.FieldDuration, field.TypeInt, value)
	}
	if value, ok := epu.mutation.AddedDuration(); ok {
		_spec.AddField(exampapers.FieldDuration, field.TypeInt, value)
	}
	if value, ok := epu.mutation.LocalLanguageAllowedQuestionPaper(); ok {
		_spec.SetField(exampapers.FieldLocalLanguageAllowedQuestionPaper, field.TypeString, value)
	}
	if value, ok := epu.mutation.LocalLanguageAllowedAnswerPaper(); ok {
		_spec.SetField(exampapers.FieldLocalLanguageAllowedAnswerPaper, field.TypeString, value)
	}
	if value, ok := epu.mutation.DisabilityTypeID(); ok {
		_spec.SetField(exampapers.FieldDisabilityTypeID, field.TypeInt32, value)
	}
	if value, ok := epu.mutation.AddedDisabilityTypeID(); ok {
		_spec.AddField(exampapers.FieldDisabilityTypeID, field.TypeInt32, value)
	}
	if epu.mutation.DisabilityTypeIDCleared() {
		_spec.ClearField(exampapers.FieldDisabilityTypeID, field.TypeInt32)
	}
	if value, ok := epu.mutation.FromTime(); ok {
		_spec.SetField(exampapers.FieldFromTime, field.TypeTime, value)
	}
	if epu.mutation.FromTimeCleared() {
		_spec.ClearField(exampapers.FieldFromTime, field.TypeTime)
	}
	if value, ok := epu.mutation.ToTime(); ok {
		_spec.SetField(exampapers.FieldToTime, field.TypeTime, value)
	}
	if epu.mutation.ToTimeCleared() {
		_spec.ClearField(exampapers.FieldToTime, field.TypeTime)
	}
	if value, ok := epu.mutation.OrderNumber(); ok {
		_spec.SetField(exampapers.FieldOrderNumber, field.TypeString, value)
	}
	if epu.mutation.OrderNumberCleared() {
		_spec.ClearField(exampapers.FieldOrderNumber, field.TypeString)
	}
	if value, ok := epu.mutation.CreatedById(); ok {
		_spec.SetField(exampapers.FieldCreatedById, field.TypeInt64, value)
	}
	if value, ok := epu.mutation.AddedCreatedById(); ok {
		_spec.AddField(exampapers.FieldCreatedById, field.TypeInt64, value)
	}
	if epu.mutation.CreatedByIdCleared() {
		_spec.ClearField(exampapers.FieldCreatedById, field.TypeInt64)
	}
	if value, ok := epu.mutation.CreatedByUserName(); ok {
		_spec.SetField(exampapers.FieldCreatedByUserName, field.TypeString, value)
	}
	if epu.mutation.CreatedByUserNameCleared() {
		_spec.ClearField(exampapers.FieldCreatedByUserName, field.TypeString)
	}
	if value, ok := epu.mutation.CreatedByEmpId(); ok {
		_spec.SetField(exampapers.FieldCreatedByEmpId, field.TypeInt64, value)
	}
	if value, ok := epu.mutation.AddedCreatedByEmpId(); ok {
		_spec.AddField(exampapers.FieldCreatedByEmpId, field.TypeInt64, value)
	}
	if epu.mutation.CreatedByEmpIdCleared() {
		_spec.ClearField(exampapers.FieldCreatedByEmpId, field.TypeInt64)
	}
	if value, ok := epu.mutation.CreatedByDesignation(); ok {
		_spec.SetField(exampapers.FieldCreatedByDesignation, field.TypeString, value)
	}
	if epu.mutation.CreatedByDesignationCleared() {
		_spec.ClearField(exampapers.FieldCreatedByDesignation, field.TypeString)
	}
	if value, ok := epu.mutation.CreatedDate(); ok {
		_spec.SetField(exampapers.FieldCreatedDate, field.TypeTime, value)
	}
	if epu.mutation.CreatedDateCleared() {
		_spec.ClearField(exampapers.FieldCreatedDate, field.TypeTime)
	}
	if value, ok := epu.mutation.Verifiedbyid(); ok {
		_spec.SetField(exampapers.FieldVerifiedbyid, field.TypeInt64, value)
	}
	if value, ok := epu.mutation.AddedVerifiedbyid(); ok {
		_spec.AddField(exampapers.FieldVerifiedbyid, field.TypeInt64, value)
	}
	if epu.mutation.VerifiedbyidCleared() {
		_spec.ClearField(exampapers.FieldVerifiedbyid, field.TypeInt64)
	}
	if value, ok := epu.mutation.Verifiedbyusername(); ok {
		_spec.SetField(exampapers.FieldVerifiedbyusername, field.TypeString, value)
	}
	if epu.mutation.VerifiedbyusernameCleared() {
		_spec.ClearField(exampapers.FieldVerifiedbyusername, field.TypeString)
	}
	if value, ok := epu.mutation.VerifiedbyEmployeeid(); ok {
		_spec.SetField(exampapers.FieldVerifiedbyEmployeeid, field.TypeInt64, value)
	}
	if value, ok := epu.mutation.AddedVerifiedbyEmployeeid(); ok {
		_spec.AddField(exampapers.FieldVerifiedbyEmployeeid, field.TypeInt64, value)
	}
	if epu.mutation.VerifiedbyEmployeeidCleared() {
		_spec.ClearField(exampapers.FieldVerifiedbyEmployeeid, field.TypeInt64)
	}
	if value, ok := epu.mutation.VerifiedbyDesignation(); ok {
		_spec.SetField(exampapers.FieldVerifiedbyDesignation, field.TypeString, value)
	}
	if epu.mutation.VerifiedbyDesignationCleared() {
		_spec.ClearField(exampapers.FieldVerifiedbyDesignation, field.TypeString)
	}
	if value, ok := epu.mutation.VerifiedDate(); ok {
		_spec.SetField(exampapers.FieldVerifiedDate, field.TypeTime, value)
	}
	if epu.mutation.VerifiedDateCleared() {
		_spec.ClearField(exampapers.FieldVerifiedDate, field.TypeTime)
	}
	if value, ok := epu.mutation.Statuss(); ok {
		_spec.SetField(exampapers.FieldStatuss, field.TypeString, value)
	}
	if epu.mutation.StatussCleared() {
		_spec.ClearField(exampapers.FieldStatuss, field.TypeString)
	}
	if value, ok := epu.mutation.Deletedbyid(); ok {
		_spec.SetField(exampapers.FieldDeletedbyid, field.TypeInt64, value)
	}
	if value, ok := epu.mutation.AddedDeletedbyid(); ok {
		_spec.AddField(exampapers.FieldDeletedbyid, field.TypeInt64, value)
	}
	if epu.mutation.DeletedbyidCleared() {
		_spec.ClearField(exampapers.FieldDeletedbyid, field.TypeInt64)
	}
	if value, ok := epu.mutation.Deletedbyusername(); ok {
		_spec.SetField(exampapers.FieldDeletedbyusername, field.TypeString, value)
	}
	if epu.mutation.DeletedbyusernameCleared() {
		_spec.ClearField(exampapers.FieldDeletedbyusername, field.TypeString)
	}
	if value, ok := epu.mutation.DeletedbyEmployeeid(); ok {
		_spec.SetField(exampapers.FieldDeletedbyEmployeeid, field.TypeInt64, value)
	}
	if value, ok := epu.mutation.AddedDeletedbyEmployeeid(); ok {
		_spec.AddField(exampapers.FieldDeletedbyEmployeeid, field.TypeInt64, value)
	}
	if epu.mutation.DeletedbyEmployeeidCleared() {
		_spec.ClearField(exampapers.FieldDeletedbyEmployeeid, field.TypeInt64)
	}
	if value, ok := epu.mutation.DeletedbyDesignation(); ok {
		_spec.SetField(exampapers.FieldDeletedbyDesignation, field.TypeString, value)
	}
	if epu.mutation.DeletedbyDesignationCleared() {
		_spec.ClearField(exampapers.FieldDeletedbyDesignation, field.TypeString)
	}
	if value, ok := epu.mutation.DeletedDate(); ok {
		_spec.SetField(exampapers.FieldDeletedDate, field.TypeTime, value)
	}
	if epu.mutation.DeletedDateCleared() {
		_spec.ClearField(exampapers.FieldDeletedDate, field.TypeTime)
	}
	if value, ok := epu.mutation.PaperStatus(); ok {
		_spec.SetField(exampapers.FieldPaperStatus, field.TypeString, value)
	}
	if value, ok := epu.mutation.CalendarCode(); ok {
		_spec.SetField(exampapers.FieldCalendarCode, field.TypeInt32, value)
	}
	if value, ok := epu.mutation.AddedCalendarCode(); ok {
		_spec.AddField(exampapers.FieldCalendarCode, field.TypeInt32, value)
	}
	if epu.mutation.CalendarCodeCleared() {
		_spec.ClearField(exampapers.FieldCalendarCode, field.TypeInt32)
	}
	if value, ok := epu.mutation.ExamCodePS(); ok {
		_spec.SetField(exampapers.FieldExamCodePS, field.TypeInt32, value)
	}
	if value, ok := epu.mutation.AddedExamCodePS(); ok {
		_spec.AddField(exampapers.FieldExamCodePS, field.TypeInt32, value)
	}
	if epu.mutation.ExamCodePSCleared() {
		_spec.ClearField(exampapers.FieldExamCodePS, field.TypeInt32)
	}
	if value, ok := epu.mutation.CreatedByEmployeeId(); ok {
		_spec.SetField(exampapers.FieldCreatedByEmployeeId, field.TypeString, value)
	}
	if epu.mutation.CreatedByEmployeeIdCleared() {
		_spec.ClearField(exampapers.FieldCreatedByEmployeeId, field.TypeString)
	}
	if epu.mutation.CentersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exampapers.CentersTable,
			Columns: []string{exampapers.CentersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(center.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := epu.mutation.RemovedCentersIDs(); len(nodes) > 0 && !epu.mutation.CentersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exampapers.CentersTable,
			Columns: []string{exampapers.CentersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(center.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := epu.mutation.CentersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exampapers.CentersTable,
			Columns: []string{exampapers.CentersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(center.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if epu.mutation.ExampapersTypesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exampapers.ExampapersTypesTable,
			Columns: []string{exampapers.ExampapersTypesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(papertypes.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := epu.mutation.RemovedExampapersTypesIDs(); len(nodes) > 0 && !epu.mutation.ExampapersTypesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exampapers.ExampapersTypesTable,
			Columns: []string{exampapers.ExampapersTypesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(papertypes.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := epu.mutation.ExampapersTypesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exampapers.ExampapersTypesTable,
			Columns: []string{exampapers.ExampapersTypesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(papertypes.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if epu.mutation.PapersRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exampapers.PapersRefTable,
			Columns: []string{exampapers.PapersRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(examcalendar.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := epu.mutation.RemovedPapersRefIDs(); len(nodes) > 0 && !epu.mutation.PapersRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exampapers.PapersRefTable,
			Columns: []string{exampapers.PapersRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(examcalendar.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := epu.mutation.PapersRefIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exampapers.PapersRefTable,
			Columns: []string{exampapers.PapersRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(examcalendar.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if epu.mutation.ExamPaperEligibilityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exampapers.ExamPaperEligibilityTable,
			Columns: []string{exampapers.ExamPaperEligibilityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(eligibilitymaster.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := epu.mutation.RemovedExamPaperEligibilityIDs(); len(nodes) > 0 && !epu.mutation.ExamPaperEligibilityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exampapers.ExamPaperEligibilityTable,
			Columns: []string{exampapers.ExamPaperEligibilityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(eligibilitymaster.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := epu.mutation.ExamPaperEligibilityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exampapers.ExamPaperEligibilityTable,
			Columns: []string{exampapers.ExamPaperEligibilityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(eligibilitymaster.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if epu.mutation.DisRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exampapers.DisRefTable,
			Columns: []string{exampapers.DisRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(disability.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := epu.mutation.RemovedDisRefIDs(); len(nodes) > 0 && !epu.mutation.DisRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exampapers.DisRefTable,
			Columns: []string{exampapers.DisRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(disability.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := epu.mutation.DisRefIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exampapers.DisRefTable,
			Columns: []string{exampapers.DisRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(disability.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, epu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{exampapers.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	epu.mutation.done = true
	return n, nil
}

// ExamPapersUpdateOne is the builder for updating a single ExamPapers entity.
type ExamPapersUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ExamPapersMutation
}

// SetPaperDescription sets the "PaperDescription" field.
func (epuo *ExamPapersUpdateOne) SetPaperDescription(s string) *ExamPapersUpdateOne {
	epuo.mutation.SetPaperDescription(s)
	return epuo
}

// SetExamCode sets the "ExamCode" field.
func (epuo *ExamPapersUpdateOne) SetExamCode(i int32) *ExamPapersUpdateOne {
	epuo.mutation.ResetExamCode()
	epuo.mutation.SetExamCode(i)
	return epuo
}

// SetNillableExamCode sets the "ExamCode" field if the given value is not nil.
func (epuo *ExamPapersUpdateOne) SetNillableExamCode(i *int32) *ExamPapersUpdateOne {
	if i != nil {
		epuo.SetExamCode(*i)
	}
	return epuo
}

// AddExamCode adds i to the "ExamCode" field.
func (epuo *ExamPapersUpdateOne) AddExamCode(i int32) *ExamPapersUpdateOne {
	epuo.mutation.AddExamCode(i)
	return epuo
}

// ClearExamCode clears the value of the "ExamCode" field.
func (epuo *ExamPapersUpdateOne) ClearExamCode() *ExamPapersUpdateOne {
	epuo.mutation.ClearExamCode()
	return epuo
}

// SetExamName sets the "ExamName" field.
func (epuo *ExamPapersUpdateOne) SetExamName(s string) *ExamPapersUpdateOne {
	epuo.mutation.SetExamName(s)
	return epuo
}

// SetNillableExamName sets the "ExamName" field if the given value is not nil.
func (epuo *ExamPapersUpdateOne) SetNillableExamName(s *string) *ExamPapersUpdateOne {
	if s != nil {
		epuo.SetExamName(*s)
	}
	return epuo
}

// ClearExamName clears the value of the "ExamName" field.
func (epuo *ExamPapersUpdateOne) ClearExamName() *ExamPapersUpdateOne {
	epuo.mutation.ClearExamName()
	return epuo
}

// SetExamShortName sets the "ExamShortName" field.
func (epuo *ExamPapersUpdateOne) SetExamShortName(s string) *ExamPapersUpdateOne {
	epuo.mutation.SetExamShortName(s)
	return epuo
}

// SetNillableExamShortName sets the "ExamShortName" field if the given value is not nil.
func (epuo *ExamPapersUpdateOne) SetNillableExamShortName(s *string) *ExamPapersUpdateOne {
	if s != nil {
		epuo.SetExamShortName(*s)
	}
	return epuo
}

// ClearExamShortName clears the value of the "ExamShortName" field.
func (epuo *ExamPapersUpdateOne) ClearExamShortName() *ExamPapersUpdateOne {
	epuo.mutation.ClearExamShortName()
	return epuo
}

// SetPaperTypeCode sets the "PaperTypeCode" field.
func (epuo *ExamPapersUpdateOne) SetPaperTypeCode(i int32) *ExamPapersUpdateOne {
	epuo.mutation.ResetPaperTypeCode()
	epuo.mutation.SetPaperTypeCode(i)
	return epuo
}

// SetNillablePaperTypeCode sets the "PaperTypeCode" field if the given value is not nil.
func (epuo *ExamPapersUpdateOne) SetNillablePaperTypeCode(i *int32) *ExamPapersUpdateOne {
	if i != nil {
		epuo.SetPaperTypeCode(*i)
	}
	return epuo
}

// AddPaperTypeCode adds i to the "PaperTypeCode" field.
func (epuo *ExamPapersUpdateOne) AddPaperTypeCode(i int32) *ExamPapersUpdateOne {
	epuo.mutation.AddPaperTypeCode(i)
	return epuo
}

// ClearPaperTypeCode clears the value of the "PaperTypeCode" field.
func (epuo *ExamPapersUpdateOne) ClearPaperTypeCode() *ExamPapersUpdateOne {
	epuo.mutation.ClearPaperTypeCode()
	return epuo
}

// SetPaperTypeName sets the "PaperTypeName" field.
func (epuo *ExamPapersUpdateOne) SetPaperTypeName(s string) *ExamPapersUpdateOne {
	epuo.mutation.SetPaperTypeName(s)
	return epuo
}

// SetNillablePaperTypeName sets the "PaperTypeName" field if the given value is not nil.
func (epuo *ExamPapersUpdateOne) SetNillablePaperTypeName(s *string) *ExamPapersUpdateOne {
	if s != nil {
		epuo.SetPaperTypeName(*s)
	}
	return epuo
}

// ClearPaperTypeName clears the value of the "PaperTypeName" field.
func (epuo *ExamPapersUpdateOne) ClearPaperTypeName() *ExamPapersUpdateOne {
	epuo.mutation.ClearPaperTypeName()
	return epuo
}

// SetCompetitiveQualifying sets the "CompetitiveQualifying" field.
func (epuo *ExamPapersUpdateOne) SetCompetitiveQualifying(b bool) *ExamPapersUpdateOne {
	epuo.mutation.SetCompetitiveQualifying(b)
	return epuo
}

// SetNillableCompetitiveQualifying sets the "CompetitiveQualifying" field if the given value is not nil.
func (epuo *ExamPapersUpdateOne) SetNillableCompetitiveQualifying(b *bool) *ExamPapersUpdateOne {
	if b != nil {
		epuo.SetCompetitiveQualifying(*b)
	}
	return epuo
}

// SetExceptionForDisability sets the "ExceptionForDisability" field.
func (epuo *ExamPapersUpdateOne) SetExceptionForDisability(b bool) *ExamPapersUpdateOne {
	epuo.mutation.SetExceptionForDisability(b)
	return epuo
}

// SetNillableExceptionForDisability sets the "ExceptionForDisability" field if the given value is not nil.
func (epuo *ExamPapersUpdateOne) SetNillableExceptionForDisability(b *bool) *ExamPapersUpdateOne {
	if b != nil {
		epuo.SetExceptionForDisability(*b)
	}
	return epuo
}

// SetMaximumMarks sets the "MaximumMarks" field.
func (epuo *ExamPapersUpdateOne) SetMaximumMarks(i int) *ExamPapersUpdateOne {
	epuo.mutation.ResetMaximumMarks()
	epuo.mutation.SetMaximumMarks(i)
	return epuo
}

// AddMaximumMarks adds i to the "MaximumMarks" field.
func (epuo *ExamPapersUpdateOne) AddMaximumMarks(i int) *ExamPapersUpdateOne {
	epuo.mutation.AddMaximumMarks(i)
	return epuo
}

// SetDuration sets the "Duration" field.
func (epuo *ExamPapersUpdateOne) SetDuration(i int) *ExamPapersUpdateOne {
	epuo.mutation.ResetDuration()
	epuo.mutation.SetDuration(i)
	return epuo
}

// AddDuration adds i to the "Duration" field.
func (epuo *ExamPapersUpdateOne) AddDuration(i int) *ExamPapersUpdateOne {
	epuo.mutation.AddDuration(i)
	return epuo
}

// SetLocalLanguageAllowedQuestionPaper sets the "localLanguageAllowedQuestionPaper" field.
func (epuo *ExamPapersUpdateOne) SetLocalLanguageAllowedQuestionPaper(s string) *ExamPapersUpdateOne {
	epuo.mutation.SetLocalLanguageAllowedQuestionPaper(s)
	return epuo
}

// SetLocalLanguageAllowedAnswerPaper sets the "localLanguageAllowedAnswerPaper" field.
func (epuo *ExamPapersUpdateOne) SetLocalLanguageAllowedAnswerPaper(s string) *ExamPapersUpdateOne {
	epuo.mutation.SetLocalLanguageAllowedAnswerPaper(s)
	return epuo
}

// SetDisabilityTypeID sets the "DisabilityTypeID" field.
func (epuo *ExamPapersUpdateOne) SetDisabilityTypeID(i int32) *ExamPapersUpdateOne {
	epuo.mutation.ResetDisabilityTypeID()
	epuo.mutation.SetDisabilityTypeID(i)
	return epuo
}

// SetNillableDisabilityTypeID sets the "DisabilityTypeID" field if the given value is not nil.
func (epuo *ExamPapersUpdateOne) SetNillableDisabilityTypeID(i *int32) *ExamPapersUpdateOne {
	if i != nil {
		epuo.SetDisabilityTypeID(*i)
	}
	return epuo
}

// AddDisabilityTypeID adds i to the "DisabilityTypeID" field.
func (epuo *ExamPapersUpdateOne) AddDisabilityTypeID(i int32) *ExamPapersUpdateOne {
	epuo.mutation.AddDisabilityTypeID(i)
	return epuo
}

// ClearDisabilityTypeID clears the value of the "DisabilityTypeID" field.
func (epuo *ExamPapersUpdateOne) ClearDisabilityTypeID() *ExamPapersUpdateOne {
	epuo.mutation.ClearDisabilityTypeID()
	return epuo
}

// SetFromTime sets the "fromTime" field.
func (epuo *ExamPapersUpdateOne) SetFromTime(t time.Time) *ExamPapersUpdateOne {
	epuo.mutation.SetFromTime(t)
	return epuo
}

// SetNillableFromTime sets the "fromTime" field if the given value is not nil.
func (epuo *ExamPapersUpdateOne) SetNillableFromTime(t *time.Time) *ExamPapersUpdateOne {
	if t != nil {
		epuo.SetFromTime(*t)
	}
	return epuo
}

// ClearFromTime clears the value of the "fromTime" field.
func (epuo *ExamPapersUpdateOne) ClearFromTime() *ExamPapersUpdateOne {
	epuo.mutation.ClearFromTime()
	return epuo
}

// SetToTime sets the "toTime" field.
func (epuo *ExamPapersUpdateOne) SetToTime(t time.Time) *ExamPapersUpdateOne {
	epuo.mutation.SetToTime(t)
	return epuo
}

// SetNillableToTime sets the "toTime" field if the given value is not nil.
func (epuo *ExamPapersUpdateOne) SetNillableToTime(t *time.Time) *ExamPapersUpdateOne {
	if t != nil {
		epuo.SetToTime(*t)
	}
	return epuo
}

// ClearToTime clears the value of the "toTime" field.
func (epuo *ExamPapersUpdateOne) ClearToTime() *ExamPapersUpdateOne {
	epuo.mutation.ClearToTime()
	return epuo
}

// SetOrderNumber sets the "OrderNumber" field.
func (epuo *ExamPapersUpdateOne) SetOrderNumber(s string) *ExamPapersUpdateOne {
	epuo.mutation.SetOrderNumber(s)
	return epuo
}

// SetNillableOrderNumber sets the "OrderNumber" field if the given value is not nil.
func (epuo *ExamPapersUpdateOne) SetNillableOrderNumber(s *string) *ExamPapersUpdateOne {
	if s != nil {
		epuo.SetOrderNumber(*s)
	}
	return epuo
}

// ClearOrderNumber clears the value of the "OrderNumber" field.
func (epuo *ExamPapersUpdateOne) ClearOrderNumber() *ExamPapersUpdateOne {
	epuo.mutation.ClearOrderNumber()
	return epuo
}

// SetCreatedById sets the "CreatedById" field.
func (epuo *ExamPapersUpdateOne) SetCreatedById(i int64) *ExamPapersUpdateOne {
	epuo.mutation.ResetCreatedById()
	epuo.mutation.SetCreatedById(i)
	return epuo
}

// SetNillableCreatedById sets the "CreatedById" field if the given value is not nil.
func (epuo *ExamPapersUpdateOne) SetNillableCreatedById(i *int64) *ExamPapersUpdateOne {
	if i != nil {
		epuo.SetCreatedById(*i)
	}
	return epuo
}

// AddCreatedById adds i to the "CreatedById" field.
func (epuo *ExamPapersUpdateOne) AddCreatedById(i int64) *ExamPapersUpdateOne {
	epuo.mutation.AddCreatedById(i)
	return epuo
}

// ClearCreatedById clears the value of the "CreatedById" field.
func (epuo *ExamPapersUpdateOne) ClearCreatedById() *ExamPapersUpdateOne {
	epuo.mutation.ClearCreatedById()
	return epuo
}

// SetCreatedByUserName sets the "CreatedByUserName" field.
func (epuo *ExamPapersUpdateOne) SetCreatedByUserName(s string) *ExamPapersUpdateOne {
	epuo.mutation.SetCreatedByUserName(s)
	return epuo
}

// SetNillableCreatedByUserName sets the "CreatedByUserName" field if the given value is not nil.
func (epuo *ExamPapersUpdateOne) SetNillableCreatedByUserName(s *string) *ExamPapersUpdateOne {
	if s != nil {
		epuo.SetCreatedByUserName(*s)
	}
	return epuo
}

// ClearCreatedByUserName clears the value of the "CreatedByUserName" field.
func (epuo *ExamPapersUpdateOne) ClearCreatedByUserName() *ExamPapersUpdateOne {
	epuo.mutation.ClearCreatedByUserName()
	return epuo
}

// SetCreatedByEmpId sets the "CreatedByEmpId" field.
func (epuo *ExamPapersUpdateOne) SetCreatedByEmpId(i int64) *ExamPapersUpdateOne {
	epuo.mutation.ResetCreatedByEmpId()
	epuo.mutation.SetCreatedByEmpId(i)
	return epuo
}

// SetNillableCreatedByEmpId sets the "CreatedByEmpId" field if the given value is not nil.
func (epuo *ExamPapersUpdateOne) SetNillableCreatedByEmpId(i *int64) *ExamPapersUpdateOne {
	if i != nil {
		epuo.SetCreatedByEmpId(*i)
	}
	return epuo
}

// AddCreatedByEmpId adds i to the "CreatedByEmpId" field.
func (epuo *ExamPapersUpdateOne) AddCreatedByEmpId(i int64) *ExamPapersUpdateOne {
	epuo.mutation.AddCreatedByEmpId(i)
	return epuo
}

// ClearCreatedByEmpId clears the value of the "CreatedByEmpId" field.
func (epuo *ExamPapersUpdateOne) ClearCreatedByEmpId() *ExamPapersUpdateOne {
	epuo.mutation.ClearCreatedByEmpId()
	return epuo
}

// SetCreatedByDesignation sets the "CreatedByDesignation" field.
func (epuo *ExamPapersUpdateOne) SetCreatedByDesignation(s string) *ExamPapersUpdateOne {
	epuo.mutation.SetCreatedByDesignation(s)
	return epuo
}

// SetNillableCreatedByDesignation sets the "CreatedByDesignation" field if the given value is not nil.
func (epuo *ExamPapersUpdateOne) SetNillableCreatedByDesignation(s *string) *ExamPapersUpdateOne {
	if s != nil {
		epuo.SetCreatedByDesignation(*s)
	}
	return epuo
}

// ClearCreatedByDesignation clears the value of the "CreatedByDesignation" field.
func (epuo *ExamPapersUpdateOne) ClearCreatedByDesignation() *ExamPapersUpdateOne {
	epuo.mutation.ClearCreatedByDesignation()
	return epuo
}

// SetCreatedDate sets the "CreatedDate" field.
func (epuo *ExamPapersUpdateOne) SetCreatedDate(t time.Time) *ExamPapersUpdateOne {
	epuo.mutation.SetCreatedDate(t)
	return epuo
}

// SetNillableCreatedDate sets the "CreatedDate" field if the given value is not nil.
func (epuo *ExamPapersUpdateOne) SetNillableCreatedDate(t *time.Time) *ExamPapersUpdateOne {
	if t != nil {
		epuo.SetCreatedDate(*t)
	}
	return epuo
}

// ClearCreatedDate clears the value of the "CreatedDate" field.
func (epuo *ExamPapersUpdateOne) ClearCreatedDate() *ExamPapersUpdateOne {
	epuo.mutation.ClearCreatedDate()
	return epuo
}

// SetVerifiedbyid sets the "verifiedbyid" field.
func (epuo *ExamPapersUpdateOne) SetVerifiedbyid(i int64) *ExamPapersUpdateOne {
	epuo.mutation.ResetVerifiedbyid()
	epuo.mutation.SetVerifiedbyid(i)
	return epuo
}

// SetNillableVerifiedbyid sets the "verifiedbyid" field if the given value is not nil.
func (epuo *ExamPapersUpdateOne) SetNillableVerifiedbyid(i *int64) *ExamPapersUpdateOne {
	if i != nil {
		epuo.SetVerifiedbyid(*i)
	}
	return epuo
}

// AddVerifiedbyid adds i to the "verifiedbyid" field.
func (epuo *ExamPapersUpdateOne) AddVerifiedbyid(i int64) *ExamPapersUpdateOne {
	epuo.mutation.AddVerifiedbyid(i)
	return epuo
}

// ClearVerifiedbyid clears the value of the "verifiedbyid" field.
func (epuo *ExamPapersUpdateOne) ClearVerifiedbyid() *ExamPapersUpdateOne {
	epuo.mutation.ClearVerifiedbyid()
	return epuo
}

// SetVerifiedbyusername sets the "verifiedbyusername" field.
func (epuo *ExamPapersUpdateOne) SetVerifiedbyusername(s string) *ExamPapersUpdateOne {
	epuo.mutation.SetVerifiedbyusername(s)
	return epuo
}

// SetNillableVerifiedbyusername sets the "verifiedbyusername" field if the given value is not nil.
func (epuo *ExamPapersUpdateOne) SetNillableVerifiedbyusername(s *string) *ExamPapersUpdateOne {
	if s != nil {
		epuo.SetVerifiedbyusername(*s)
	}
	return epuo
}

// ClearVerifiedbyusername clears the value of the "verifiedbyusername" field.
func (epuo *ExamPapersUpdateOne) ClearVerifiedbyusername() *ExamPapersUpdateOne {
	epuo.mutation.ClearVerifiedbyusername()
	return epuo
}

// SetVerifiedbyEmployeeid sets the "verifiedbyEmployeeid" field.
func (epuo *ExamPapersUpdateOne) SetVerifiedbyEmployeeid(i int64) *ExamPapersUpdateOne {
	epuo.mutation.ResetVerifiedbyEmployeeid()
	epuo.mutation.SetVerifiedbyEmployeeid(i)
	return epuo
}

// SetNillableVerifiedbyEmployeeid sets the "verifiedbyEmployeeid" field if the given value is not nil.
func (epuo *ExamPapersUpdateOne) SetNillableVerifiedbyEmployeeid(i *int64) *ExamPapersUpdateOne {
	if i != nil {
		epuo.SetVerifiedbyEmployeeid(*i)
	}
	return epuo
}

// AddVerifiedbyEmployeeid adds i to the "verifiedbyEmployeeid" field.
func (epuo *ExamPapersUpdateOne) AddVerifiedbyEmployeeid(i int64) *ExamPapersUpdateOne {
	epuo.mutation.AddVerifiedbyEmployeeid(i)
	return epuo
}

// ClearVerifiedbyEmployeeid clears the value of the "verifiedbyEmployeeid" field.
func (epuo *ExamPapersUpdateOne) ClearVerifiedbyEmployeeid() *ExamPapersUpdateOne {
	epuo.mutation.ClearVerifiedbyEmployeeid()
	return epuo
}

// SetVerifiedbyDesignation sets the "verifiedbyDesignation" field.
func (epuo *ExamPapersUpdateOne) SetVerifiedbyDesignation(s string) *ExamPapersUpdateOne {
	epuo.mutation.SetVerifiedbyDesignation(s)
	return epuo
}

// SetNillableVerifiedbyDesignation sets the "verifiedbyDesignation" field if the given value is not nil.
func (epuo *ExamPapersUpdateOne) SetNillableVerifiedbyDesignation(s *string) *ExamPapersUpdateOne {
	if s != nil {
		epuo.SetVerifiedbyDesignation(*s)
	}
	return epuo
}

// ClearVerifiedbyDesignation clears the value of the "verifiedbyDesignation" field.
func (epuo *ExamPapersUpdateOne) ClearVerifiedbyDesignation() *ExamPapersUpdateOne {
	epuo.mutation.ClearVerifiedbyDesignation()
	return epuo
}

// SetVerifiedDate sets the "verifiedDate" field.
func (epuo *ExamPapersUpdateOne) SetVerifiedDate(t time.Time) *ExamPapersUpdateOne {
	epuo.mutation.SetVerifiedDate(t)
	return epuo
}

// SetNillableVerifiedDate sets the "verifiedDate" field if the given value is not nil.
func (epuo *ExamPapersUpdateOne) SetNillableVerifiedDate(t *time.Time) *ExamPapersUpdateOne {
	if t != nil {
		epuo.SetVerifiedDate(*t)
	}
	return epuo
}

// ClearVerifiedDate clears the value of the "verifiedDate" field.
func (epuo *ExamPapersUpdateOne) ClearVerifiedDate() *ExamPapersUpdateOne {
	epuo.mutation.ClearVerifiedDate()
	return epuo
}

// SetStatuss sets the "Statuss" field.
func (epuo *ExamPapersUpdateOne) SetStatuss(s string) *ExamPapersUpdateOne {
	epuo.mutation.SetStatuss(s)
	return epuo
}

// SetNillableStatuss sets the "Statuss" field if the given value is not nil.
func (epuo *ExamPapersUpdateOne) SetNillableStatuss(s *string) *ExamPapersUpdateOne {
	if s != nil {
		epuo.SetStatuss(*s)
	}
	return epuo
}

// ClearStatuss clears the value of the "Statuss" field.
func (epuo *ExamPapersUpdateOne) ClearStatuss() *ExamPapersUpdateOne {
	epuo.mutation.ClearStatuss()
	return epuo
}

// SetDeletedbyid sets the "deletedbyid" field.
func (epuo *ExamPapersUpdateOne) SetDeletedbyid(i int64) *ExamPapersUpdateOne {
	epuo.mutation.ResetDeletedbyid()
	epuo.mutation.SetDeletedbyid(i)
	return epuo
}

// SetNillableDeletedbyid sets the "deletedbyid" field if the given value is not nil.
func (epuo *ExamPapersUpdateOne) SetNillableDeletedbyid(i *int64) *ExamPapersUpdateOne {
	if i != nil {
		epuo.SetDeletedbyid(*i)
	}
	return epuo
}

// AddDeletedbyid adds i to the "deletedbyid" field.
func (epuo *ExamPapersUpdateOne) AddDeletedbyid(i int64) *ExamPapersUpdateOne {
	epuo.mutation.AddDeletedbyid(i)
	return epuo
}

// ClearDeletedbyid clears the value of the "deletedbyid" field.
func (epuo *ExamPapersUpdateOne) ClearDeletedbyid() *ExamPapersUpdateOne {
	epuo.mutation.ClearDeletedbyid()
	return epuo
}

// SetDeletedbyusername sets the "deletedbyusername" field.
func (epuo *ExamPapersUpdateOne) SetDeletedbyusername(s string) *ExamPapersUpdateOne {
	epuo.mutation.SetDeletedbyusername(s)
	return epuo
}

// SetNillableDeletedbyusername sets the "deletedbyusername" field if the given value is not nil.
func (epuo *ExamPapersUpdateOne) SetNillableDeletedbyusername(s *string) *ExamPapersUpdateOne {
	if s != nil {
		epuo.SetDeletedbyusername(*s)
	}
	return epuo
}

// ClearDeletedbyusername clears the value of the "deletedbyusername" field.
func (epuo *ExamPapersUpdateOne) ClearDeletedbyusername() *ExamPapersUpdateOne {
	epuo.mutation.ClearDeletedbyusername()
	return epuo
}

// SetDeletedbyEmployeeid sets the "deletedbyEmployeeid" field.
func (epuo *ExamPapersUpdateOne) SetDeletedbyEmployeeid(i int64) *ExamPapersUpdateOne {
	epuo.mutation.ResetDeletedbyEmployeeid()
	epuo.mutation.SetDeletedbyEmployeeid(i)
	return epuo
}

// SetNillableDeletedbyEmployeeid sets the "deletedbyEmployeeid" field if the given value is not nil.
func (epuo *ExamPapersUpdateOne) SetNillableDeletedbyEmployeeid(i *int64) *ExamPapersUpdateOne {
	if i != nil {
		epuo.SetDeletedbyEmployeeid(*i)
	}
	return epuo
}

// AddDeletedbyEmployeeid adds i to the "deletedbyEmployeeid" field.
func (epuo *ExamPapersUpdateOne) AddDeletedbyEmployeeid(i int64) *ExamPapersUpdateOne {
	epuo.mutation.AddDeletedbyEmployeeid(i)
	return epuo
}

// ClearDeletedbyEmployeeid clears the value of the "deletedbyEmployeeid" field.
func (epuo *ExamPapersUpdateOne) ClearDeletedbyEmployeeid() *ExamPapersUpdateOne {
	epuo.mutation.ClearDeletedbyEmployeeid()
	return epuo
}

// SetDeletedbyDesignation sets the "deletedbyDesignation" field.
func (epuo *ExamPapersUpdateOne) SetDeletedbyDesignation(s string) *ExamPapersUpdateOne {
	epuo.mutation.SetDeletedbyDesignation(s)
	return epuo
}

// SetNillableDeletedbyDesignation sets the "deletedbyDesignation" field if the given value is not nil.
func (epuo *ExamPapersUpdateOne) SetNillableDeletedbyDesignation(s *string) *ExamPapersUpdateOne {
	if s != nil {
		epuo.SetDeletedbyDesignation(*s)
	}
	return epuo
}

// ClearDeletedbyDesignation clears the value of the "deletedbyDesignation" field.
func (epuo *ExamPapersUpdateOne) ClearDeletedbyDesignation() *ExamPapersUpdateOne {
	epuo.mutation.ClearDeletedbyDesignation()
	return epuo
}

// SetDeletedDate sets the "deletedDate" field.
func (epuo *ExamPapersUpdateOne) SetDeletedDate(t time.Time) *ExamPapersUpdateOne {
	epuo.mutation.SetDeletedDate(t)
	return epuo
}

// SetNillableDeletedDate sets the "deletedDate" field if the given value is not nil.
func (epuo *ExamPapersUpdateOne) SetNillableDeletedDate(t *time.Time) *ExamPapersUpdateOne {
	if t != nil {
		epuo.SetDeletedDate(*t)
	}
	return epuo
}

// ClearDeletedDate clears the value of the "deletedDate" field.
func (epuo *ExamPapersUpdateOne) ClearDeletedDate() *ExamPapersUpdateOne {
	epuo.mutation.ClearDeletedDate()
	return epuo
}

// SetPaperStatus sets the "PaperStatus" field.
func (epuo *ExamPapersUpdateOne) SetPaperStatus(s string) *ExamPapersUpdateOne {
	epuo.mutation.SetPaperStatus(s)
	return epuo
}

// SetCalendarCode sets the "CalendarCode" field.
func (epuo *ExamPapersUpdateOne) SetCalendarCode(i int32) *ExamPapersUpdateOne {
	epuo.mutation.ResetCalendarCode()
	epuo.mutation.SetCalendarCode(i)
	return epuo
}

// SetNillableCalendarCode sets the "CalendarCode" field if the given value is not nil.
func (epuo *ExamPapersUpdateOne) SetNillableCalendarCode(i *int32) *ExamPapersUpdateOne {
	if i != nil {
		epuo.SetCalendarCode(*i)
	}
	return epuo
}

// AddCalendarCode adds i to the "CalendarCode" field.
func (epuo *ExamPapersUpdateOne) AddCalendarCode(i int32) *ExamPapersUpdateOne {
	epuo.mutation.AddCalendarCode(i)
	return epuo
}

// ClearCalendarCode clears the value of the "CalendarCode" field.
func (epuo *ExamPapersUpdateOne) ClearCalendarCode() *ExamPapersUpdateOne {
	epuo.mutation.ClearCalendarCode()
	return epuo
}

// SetExamCodePS sets the "ExamCodePS" field.
func (epuo *ExamPapersUpdateOne) SetExamCodePS(i int32) *ExamPapersUpdateOne {
	epuo.mutation.ResetExamCodePS()
	epuo.mutation.SetExamCodePS(i)
	return epuo
}

// SetNillableExamCodePS sets the "ExamCodePS" field if the given value is not nil.
func (epuo *ExamPapersUpdateOne) SetNillableExamCodePS(i *int32) *ExamPapersUpdateOne {
	if i != nil {
		epuo.SetExamCodePS(*i)
	}
	return epuo
}

// AddExamCodePS adds i to the "ExamCodePS" field.
func (epuo *ExamPapersUpdateOne) AddExamCodePS(i int32) *ExamPapersUpdateOne {
	epuo.mutation.AddExamCodePS(i)
	return epuo
}

// ClearExamCodePS clears the value of the "ExamCodePS" field.
func (epuo *ExamPapersUpdateOne) ClearExamCodePS() *ExamPapersUpdateOne {
	epuo.mutation.ClearExamCodePS()
	return epuo
}

// SetCreatedByEmployeeId sets the "CreatedByEmployeeId" field.
func (epuo *ExamPapersUpdateOne) SetCreatedByEmployeeId(s string) *ExamPapersUpdateOne {
	epuo.mutation.SetCreatedByEmployeeId(s)
	return epuo
}

// SetNillableCreatedByEmployeeId sets the "CreatedByEmployeeId" field if the given value is not nil.
func (epuo *ExamPapersUpdateOne) SetNillableCreatedByEmployeeId(s *string) *ExamPapersUpdateOne {
	if s != nil {
		epuo.SetCreatedByEmployeeId(*s)
	}
	return epuo
}

// ClearCreatedByEmployeeId clears the value of the "CreatedByEmployeeId" field.
func (epuo *ExamPapersUpdateOne) ClearCreatedByEmployeeId() *ExamPapersUpdateOne {
	epuo.mutation.ClearCreatedByEmployeeId()
	return epuo
}

// AddCenterIDs adds the "centers" edge to the Center entity by IDs.
func (epuo *ExamPapersUpdateOne) AddCenterIDs(ids ...int32) *ExamPapersUpdateOne {
	epuo.mutation.AddCenterIDs(ids...)
	return epuo
}

// AddCenters adds the "centers" edges to the Center entity.
func (epuo *ExamPapersUpdateOne) AddCenters(c ...*Center) *ExamPapersUpdateOne {
	ids := make([]int32, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return epuo.AddCenterIDs(ids...)
}

// AddExampapersTypeIDs adds the "exampapers_types" edge to the PaperTypes entity by IDs.
func (epuo *ExamPapersUpdateOne) AddExampapersTypeIDs(ids ...int32) *ExamPapersUpdateOne {
	epuo.mutation.AddExampapersTypeIDs(ids...)
	return epuo
}

// AddExampapersTypes adds the "exampapers_types" edges to the PaperTypes entity.
func (epuo *ExamPapersUpdateOne) AddExampapersTypes(p ...*PaperTypes) *ExamPapersUpdateOne {
	ids := make([]int32, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return epuo.AddExampapersTypeIDs(ids...)
}

// AddPapersRefIDs adds the "papers_ref" edge to the ExamCalendar entity by IDs.
func (epuo *ExamPapersUpdateOne) AddPapersRefIDs(ids ...int32) *ExamPapersUpdateOne {
	epuo.mutation.AddPapersRefIDs(ids...)
	return epuo
}

// AddPapersRef adds the "papers_ref" edges to the ExamCalendar entity.
func (epuo *ExamPapersUpdateOne) AddPapersRef(e ...*ExamCalendar) *ExamPapersUpdateOne {
	ids := make([]int32, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return epuo.AddPapersRefIDs(ids...)
}

// AddExamPaperEligibilityIDs adds the "ExamPaperEligibility" edge to the EligibilityMaster entity by IDs.
func (epuo *ExamPapersUpdateOne) AddExamPaperEligibilityIDs(ids ...int32) *ExamPapersUpdateOne {
	epuo.mutation.AddExamPaperEligibilityIDs(ids...)
	return epuo
}

// AddExamPaperEligibility adds the "ExamPaperEligibility" edges to the EligibilityMaster entity.
func (epuo *ExamPapersUpdateOne) AddExamPaperEligibility(e ...*EligibilityMaster) *ExamPapersUpdateOne {
	ids := make([]int32, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return epuo.AddExamPaperEligibilityIDs(ids...)
}

// AddDisRefIDs adds the "dis_ref" edge to the Disability entity by IDs.
func (epuo *ExamPapersUpdateOne) AddDisRefIDs(ids ...int32) *ExamPapersUpdateOne {
	epuo.mutation.AddDisRefIDs(ids...)
	return epuo
}

// AddDisRef adds the "dis_ref" edges to the Disability entity.
func (epuo *ExamPapersUpdateOne) AddDisRef(d ...*Disability) *ExamPapersUpdateOne {
	ids := make([]int32, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return epuo.AddDisRefIDs(ids...)
}

// Mutation returns the ExamPapersMutation object of the builder.
func (epuo *ExamPapersUpdateOne) Mutation() *ExamPapersMutation {
	return epuo.mutation
}

// ClearCenters clears all "centers" edges to the Center entity.
func (epuo *ExamPapersUpdateOne) ClearCenters() *ExamPapersUpdateOne {
	epuo.mutation.ClearCenters()
	return epuo
}

// RemoveCenterIDs removes the "centers" edge to Center entities by IDs.
func (epuo *ExamPapersUpdateOne) RemoveCenterIDs(ids ...int32) *ExamPapersUpdateOne {
	epuo.mutation.RemoveCenterIDs(ids...)
	return epuo
}

// RemoveCenters removes "centers" edges to Center entities.
func (epuo *ExamPapersUpdateOne) RemoveCenters(c ...*Center) *ExamPapersUpdateOne {
	ids := make([]int32, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return epuo.RemoveCenterIDs(ids...)
}

// ClearExampapersTypes clears all "exampapers_types" edges to the PaperTypes entity.
func (epuo *ExamPapersUpdateOne) ClearExampapersTypes() *ExamPapersUpdateOne {
	epuo.mutation.ClearExampapersTypes()
	return epuo
}

// RemoveExampapersTypeIDs removes the "exampapers_types" edge to PaperTypes entities by IDs.
func (epuo *ExamPapersUpdateOne) RemoveExampapersTypeIDs(ids ...int32) *ExamPapersUpdateOne {
	epuo.mutation.RemoveExampapersTypeIDs(ids...)
	return epuo
}

// RemoveExampapersTypes removes "exampapers_types" edges to PaperTypes entities.
func (epuo *ExamPapersUpdateOne) RemoveExampapersTypes(p ...*PaperTypes) *ExamPapersUpdateOne {
	ids := make([]int32, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return epuo.RemoveExampapersTypeIDs(ids...)
}

// ClearPapersRef clears all "papers_ref" edges to the ExamCalendar entity.
func (epuo *ExamPapersUpdateOne) ClearPapersRef() *ExamPapersUpdateOne {
	epuo.mutation.ClearPapersRef()
	return epuo
}

// RemovePapersRefIDs removes the "papers_ref" edge to ExamCalendar entities by IDs.
func (epuo *ExamPapersUpdateOne) RemovePapersRefIDs(ids ...int32) *ExamPapersUpdateOne {
	epuo.mutation.RemovePapersRefIDs(ids...)
	return epuo
}

// RemovePapersRef removes "papers_ref" edges to ExamCalendar entities.
func (epuo *ExamPapersUpdateOne) RemovePapersRef(e ...*ExamCalendar) *ExamPapersUpdateOne {
	ids := make([]int32, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return epuo.RemovePapersRefIDs(ids...)
}

// ClearExamPaperEligibility clears all "ExamPaperEligibility" edges to the EligibilityMaster entity.
func (epuo *ExamPapersUpdateOne) ClearExamPaperEligibility() *ExamPapersUpdateOne {
	epuo.mutation.ClearExamPaperEligibility()
	return epuo
}

// RemoveExamPaperEligibilityIDs removes the "ExamPaperEligibility" edge to EligibilityMaster entities by IDs.
func (epuo *ExamPapersUpdateOne) RemoveExamPaperEligibilityIDs(ids ...int32) *ExamPapersUpdateOne {
	epuo.mutation.RemoveExamPaperEligibilityIDs(ids...)
	return epuo
}

// RemoveExamPaperEligibility removes "ExamPaperEligibility" edges to EligibilityMaster entities.
func (epuo *ExamPapersUpdateOne) RemoveExamPaperEligibility(e ...*EligibilityMaster) *ExamPapersUpdateOne {
	ids := make([]int32, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return epuo.RemoveExamPaperEligibilityIDs(ids...)
}

// ClearDisRef clears all "dis_ref" edges to the Disability entity.
func (epuo *ExamPapersUpdateOne) ClearDisRef() *ExamPapersUpdateOne {
	epuo.mutation.ClearDisRef()
	return epuo
}

// RemoveDisRefIDs removes the "dis_ref" edge to Disability entities by IDs.
func (epuo *ExamPapersUpdateOne) RemoveDisRefIDs(ids ...int32) *ExamPapersUpdateOne {
	epuo.mutation.RemoveDisRefIDs(ids...)
	return epuo
}

// RemoveDisRef removes "dis_ref" edges to Disability entities.
func (epuo *ExamPapersUpdateOne) RemoveDisRef(d ...*Disability) *ExamPapersUpdateOne {
	ids := make([]int32, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return epuo.RemoveDisRefIDs(ids...)
}

// Where appends a list predicates to the ExamPapersUpdate builder.
func (epuo *ExamPapersUpdateOne) Where(ps ...predicate.ExamPapers) *ExamPapersUpdateOne {
	epuo.mutation.Where(ps...)
	return epuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (epuo *ExamPapersUpdateOne) Select(field string, fields ...string) *ExamPapersUpdateOne {
	epuo.fields = append([]string{field}, fields...)
	return epuo
}

// Save executes the query and returns the updated ExamPapers entity.
func (epuo *ExamPapersUpdateOne) Save(ctx context.Context) (*ExamPapers, error) {
	return withHooks(ctx, epuo.sqlSave, epuo.mutation, epuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (epuo *ExamPapersUpdateOne) SaveX(ctx context.Context) *ExamPapers {
	node, err := epuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (epuo *ExamPapersUpdateOne) Exec(ctx context.Context) error {
	_, err := epuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (epuo *ExamPapersUpdateOne) ExecX(ctx context.Context) {
	if err := epuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (epuo *ExamPapersUpdateOne) check() error {
	if v, ok := epuo.mutation.MaximumMarks(); ok {
		if err := exampapers.MaximumMarksValidator(v); err != nil {
			return &ValidationError{Name: "MaximumMarks", err: fmt.Errorf(`ent: validator failed for field "ExamPapers.MaximumMarks": %w`, err)}
		}
	}
	if v, ok := epuo.mutation.Duration(); ok {
		if err := exampapers.DurationValidator(v); err != nil {
			return &ValidationError{Name: "Duration", err: fmt.Errorf(`ent: validator failed for field "ExamPapers.Duration": %w`, err)}
		}
	}
	if v, ok := epuo.mutation.LocalLanguageAllowedQuestionPaper(); ok {
		if err := exampapers.LocalLanguageAllowedQuestionPaperValidator(v); err != nil {
			return &ValidationError{Name: "localLanguageAllowedQuestionPaper", err: fmt.Errorf(`ent: validator failed for field "ExamPapers.localLanguageAllowedQuestionPaper": %w`, err)}
		}
	}
	if v, ok := epuo.mutation.LocalLanguageAllowedAnswerPaper(); ok {
		if err := exampapers.LocalLanguageAllowedAnswerPaperValidator(v); err != nil {
			return &ValidationError{Name: "localLanguageAllowedAnswerPaper", err: fmt.Errorf(`ent: validator failed for field "ExamPapers.localLanguageAllowedAnswerPaper": %w`, err)}
		}
	}
	if v, ok := epuo.mutation.PaperStatus(); ok {
		if err := exampapers.PaperStatusValidator(v); err != nil {
			return &ValidationError{Name: "PaperStatus", err: fmt.Errorf(`ent: validator failed for field "ExamPapers.PaperStatus": %w`, err)}
		}
	}
	return nil
}

func (epuo *ExamPapersUpdateOne) sqlSave(ctx context.Context) (_node *ExamPapers, err error) {
	if err := epuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(exampapers.Table, exampapers.Columns, sqlgraph.NewFieldSpec(exampapers.FieldID, field.TypeInt32))
	id, ok := epuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ExamPapers.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := epuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, exampapers.FieldID)
		for _, f := range fields {
			if !exampapers.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != exampapers.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := epuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := epuo.mutation.PaperDescription(); ok {
		_spec.SetField(exampapers.FieldPaperDescription, field.TypeString, value)
	}
	if value, ok := epuo.mutation.ExamCode(); ok {
		_spec.SetField(exampapers.FieldExamCode, field.TypeInt32, value)
	}
	if value, ok := epuo.mutation.AddedExamCode(); ok {
		_spec.AddField(exampapers.FieldExamCode, field.TypeInt32, value)
	}
	if epuo.mutation.ExamCodeCleared() {
		_spec.ClearField(exampapers.FieldExamCode, field.TypeInt32)
	}
	if value, ok := epuo.mutation.ExamName(); ok {
		_spec.SetField(exampapers.FieldExamName, field.TypeString, value)
	}
	if epuo.mutation.ExamNameCleared() {
		_spec.ClearField(exampapers.FieldExamName, field.TypeString)
	}
	if value, ok := epuo.mutation.ExamShortName(); ok {
		_spec.SetField(exampapers.FieldExamShortName, field.TypeString, value)
	}
	if epuo.mutation.ExamShortNameCleared() {
		_spec.ClearField(exampapers.FieldExamShortName, field.TypeString)
	}
	if value, ok := epuo.mutation.PaperTypeCode(); ok {
		_spec.SetField(exampapers.FieldPaperTypeCode, field.TypeInt32, value)
	}
	if value, ok := epuo.mutation.AddedPaperTypeCode(); ok {
		_spec.AddField(exampapers.FieldPaperTypeCode, field.TypeInt32, value)
	}
	if epuo.mutation.PaperTypeCodeCleared() {
		_spec.ClearField(exampapers.FieldPaperTypeCode, field.TypeInt32)
	}
	if value, ok := epuo.mutation.PaperTypeName(); ok {
		_spec.SetField(exampapers.FieldPaperTypeName, field.TypeString, value)
	}
	if epuo.mutation.PaperTypeNameCleared() {
		_spec.ClearField(exampapers.FieldPaperTypeName, field.TypeString)
	}
	if value, ok := epuo.mutation.CompetitiveQualifying(); ok {
		_spec.SetField(exampapers.FieldCompetitiveQualifying, field.TypeBool, value)
	}
	if value, ok := epuo.mutation.ExceptionForDisability(); ok {
		_spec.SetField(exampapers.FieldExceptionForDisability, field.TypeBool, value)
	}
	if value, ok := epuo.mutation.MaximumMarks(); ok {
		_spec.SetField(exampapers.FieldMaximumMarks, field.TypeInt, value)
	}
	if value, ok := epuo.mutation.AddedMaximumMarks(); ok {
		_spec.AddField(exampapers.FieldMaximumMarks, field.TypeInt, value)
	}
	if value, ok := epuo.mutation.Duration(); ok {
		_spec.SetField(exampapers.FieldDuration, field.TypeInt, value)
	}
	if value, ok := epuo.mutation.AddedDuration(); ok {
		_spec.AddField(exampapers.FieldDuration, field.TypeInt, value)
	}
	if value, ok := epuo.mutation.LocalLanguageAllowedQuestionPaper(); ok {
		_spec.SetField(exampapers.FieldLocalLanguageAllowedQuestionPaper, field.TypeString, value)
	}
	if value, ok := epuo.mutation.LocalLanguageAllowedAnswerPaper(); ok {
		_spec.SetField(exampapers.FieldLocalLanguageAllowedAnswerPaper, field.TypeString, value)
	}
	if value, ok := epuo.mutation.DisabilityTypeID(); ok {
		_spec.SetField(exampapers.FieldDisabilityTypeID, field.TypeInt32, value)
	}
	if value, ok := epuo.mutation.AddedDisabilityTypeID(); ok {
		_spec.AddField(exampapers.FieldDisabilityTypeID, field.TypeInt32, value)
	}
	if epuo.mutation.DisabilityTypeIDCleared() {
		_spec.ClearField(exampapers.FieldDisabilityTypeID, field.TypeInt32)
	}
	if value, ok := epuo.mutation.FromTime(); ok {
		_spec.SetField(exampapers.FieldFromTime, field.TypeTime, value)
	}
	if epuo.mutation.FromTimeCleared() {
		_spec.ClearField(exampapers.FieldFromTime, field.TypeTime)
	}
	if value, ok := epuo.mutation.ToTime(); ok {
		_spec.SetField(exampapers.FieldToTime, field.TypeTime, value)
	}
	if epuo.mutation.ToTimeCleared() {
		_spec.ClearField(exampapers.FieldToTime, field.TypeTime)
	}
	if value, ok := epuo.mutation.OrderNumber(); ok {
		_spec.SetField(exampapers.FieldOrderNumber, field.TypeString, value)
	}
	if epuo.mutation.OrderNumberCleared() {
		_spec.ClearField(exampapers.FieldOrderNumber, field.TypeString)
	}
	if value, ok := epuo.mutation.CreatedById(); ok {
		_spec.SetField(exampapers.FieldCreatedById, field.TypeInt64, value)
	}
	if value, ok := epuo.mutation.AddedCreatedById(); ok {
		_spec.AddField(exampapers.FieldCreatedById, field.TypeInt64, value)
	}
	if epuo.mutation.CreatedByIdCleared() {
		_spec.ClearField(exampapers.FieldCreatedById, field.TypeInt64)
	}
	if value, ok := epuo.mutation.CreatedByUserName(); ok {
		_spec.SetField(exampapers.FieldCreatedByUserName, field.TypeString, value)
	}
	if epuo.mutation.CreatedByUserNameCleared() {
		_spec.ClearField(exampapers.FieldCreatedByUserName, field.TypeString)
	}
	if value, ok := epuo.mutation.CreatedByEmpId(); ok {
		_spec.SetField(exampapers.FieldCreatedByEmpId, field.TypeInt64, value)
	}
	if value, ok := epuo.mutation.AddedCreatedByEmpId(); ok {
		_spec.AddField(exampapers.FieldCreatedByEmpId, field.TypeInt64, value)
	}
	if epuo.mutation.CreatedByEmpIdCleared() {
		_spec.ClearField(exampapers.FieldCreatedByEmpId, field.TypeInt64)
	}
	if value, ok := epuo.mutation.CreatedByDesignation(); ok {
		_spec.SetField(exampapers.FieldCreatedByDesignation, field.TypeString, value)
	}
	if epuo.mutation.CreatedByDesignationCleared() {
		_spec.ClearField(exampapers.FieldCreatedByDesignation, field.TypeString)
	}
	if value, ok := epuo.mutation.CreatedDate(); ok {
		_spec.SetField(exampapers.FieldCreatedDate, field.TypeTime, value)
	}
	if epuo.mutation.CreatedDateCleared() {
		_spec.ClearField(exampapers.FieldCreatedDate, field.TypeTime)
	}
	if value, ok := epuo.mutation.Verifiedbyid(); ok {
		_spec.SetField(exampapers.FieldVerifiedbyid, field.TypeInt64, value)
	}
	if value, ok := epuo.mutation.AddedVerifiedbyid(); ok {
		_spec.AddField(exampapers.FieldVerifiedbyid, field.TypeInt64, value)
	}
	if epuo.mutation.VerifiedbyidCleared() {
		_spec.ClearField(exampapers.FieldVerifiedbyid, field.TypeInt64)
	}
	if value, ok := epuo.mutation.Verifiedbyusername(); ok {
		_spec.SetField(exampapers.FieldVerifiedbyusername, field.TypeString, value)
	}
	if epuo.mutation.VerifiedbyusernameCleared() {
		_spec.ClearField(exampapers.FieldVerifiedbyusername, field.TypeString)
	}
	if value, ok := epuo.mutation.VerifiedbyEmployeeid(); ok {
		_spec.SetField(exampapers.FieldVerifiedbyEmployeeid, field.TypeInt64, value)
	}
	if value, ok := epuo.mutation.AddedVerifiedbyEmployeeid(); ok {
		_spec.AddField(exampapers.FieldVerifiedbyEmployeeid, field.TypeInt64, value)
	}
	if epuo.mutation.VerifiedbyEmployeeidCleared() {
		_spec.ClearField(exampapers.FieldVerifiedbyEmployeeid, field.TypeInt64)
	}
	if value, ok := epuo.mutation.VerifiedbyDesignation(); ok {
		_spec.SetField(exampapers.FieldVerifiedbyDesignation, field.TypeString, value)
	}
	if epuo.mutation.VerifiedbyDesignationCleared() {
		_spec.ClearField(exampapers.FieldVerifiedbyDesignation, field.TypeString)
	}
	if value, ok := epuo.mutation.VerifiedDate(); ok {
		_spec.SetField(exampapers.FieldVerifiedDate, field.TypeTime, value)
	}
	if epuo.mutation.VerifiedDateCleared() {
		_spec.ClearField(exampapers.FieldVerifiedDate, field.TypeTime)
	}
	if value, ok := epuo.mutation.Statuss(); ok {
		_spec.SetField(exampapers.FieldStatuss, field.TypeString, value)
	}
	if epuo.mutation.StatussCleared() {
		_spec.ClearField(exampapers.FieldStatuss, field.TypeString)
	}
	if value, ok := epuo.mutation.Deletedbyid(); ok {
		_spec.SetField(exampapers.FieldDeletedbyid, field.TypeInt64, value)
	}
	if value, ok := epuo.mutation.AddedDeletedbyid(); ok {
		_spec.AddField(exampapers.FieldDeletedbyid, field.TypeInt64, value)
	}
	if epuo.mutation.DeletedbyidCleared() {
		_spec.ClearField(exampapers.FieldDeletedbyid, field.TypeInt64)
	}
	if value, ok := epuo.mutation.Deletedbyusername(); ok {
		_spec.SetField(exampapers.FieldDeletedbyusername, field.TypeString, value)
	}
	if epuo.mutation.DeletedbyusernameCleared() {
		_spec.ClearField(exampapers.FieldDeletedbyusername, field.TypeString)
	}
	if value, ok := epuo.mutation.DeletedbyEmployeeid(); ok {
		_spec.SetField(exampapers.FieldDeletedbyEmployeeid, field.TypeInt64, value)
	}
	if value, ok := epuo.mutation.AddedDeletedbyEmployeeid(); ok {
		_spec.AddField(exampapers.FieldDeletedbyEmployeeid, field.TypeInt64, value)
	}
	if epuo.mutation.DeletedbyEmployeeidCleared() {
		_spec.ClearField(exampapers.FieldDeletedbyEmployeeid, field.TypeInt64)
	}
	if value, ok := epuo.mutation.DeletedbyDesignation(); ok {
		_spec.SetField(exampapers.FieldDeletedbyDesignation, field.TypeString, value)
	}
	if epuo.mutation.DeletedbyDesignationCleared() {
		_spec.ClearField(exampapers.FieldDeletedbyDesignation, field.TypeString)
	}
	if value, ok := epuo.mutation.DeletedDate(); ok {
		_spec.SetField(exampapers.FieldDeletedDate, field.TypeTime, value)
	}
	if epuo.mutation.DeletedDateCleared() {
		_spec.ClearField(exampapers.FieldDeletedDate, field.TypeTime)
	}
	if value, ok := epuo.mutation.PaperStatus(); ok {
		_spec.SetField(exampapers.FieldPaperStatus, field.TypeString, value)
	}
	if value, ok := epuo.mutation.CalendarCode(); ok {
		_spec.SetField(exampapers.FieldCalendarCode, field.TypeInt32, value)
	}
	if value, ok := epuo.mutation.AddedCalendarCode(); ok {
		_spec.AddField(exampapers.FieldCalendarCode, field.TypeInt32, value)
	}
	if epuo.mutation.CalendarCodeCleared() {
		_spec.ClearField(exampapers.FieldCalendarCode, field.TypeInt32)
	}
	if value, ok := epuo.mutation.ExamCodePS(); ok {
		_spec.SetField(exampapers.FieldExamCodePS, field.TypeInt32, value)
	}
	if value, ok := epuo.mutation.AddedExamCodePS(); ok {
		_spec.AddField(exampapers.FieldExamCodePS, field.TypeInt32, value)
	}
	if epuo.mutation.ExamCodePSCleared() {
		_spec.ClearField(exampapers.FieldExamCodePS, field.TypeInt32)
	}
	if value, ok := epuo.mutation.CreatedByEmployeeId(); ok {
		_spec.SetField(exampapers.FieldCreatedByEmployeeId, field.TypeString, value)
	}
	if epuo.mutation.CreatedByEmployeeIdCleared() {
		_spec.ClearField(exampapers.FieldCreatedByEmployeeId, field.TypeString)
	}
	if epuo.mutation.CentersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exampapers.CentersTable,
			Columns: []string{exampapers.CentersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(center.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := epuo.mutation.RemovedCentersIDs(); len(nodes) > 0 && !epuo.mutation.CentersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exampapers.CentersTable,
			Columns: []string{exampapers.CentersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(center.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := epuo.mutation.CentersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exampapers.CentersTable,
			Columns: []string{exampapers.CentersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(center.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if epuo.mutation.ExampapersTypesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exampapers.ExampapersTypesTable,
			Columns: []string{exampapers.ExampapersTypesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(papertypes.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := epuo.mutation.RemovedExampapersTypesIDs(); len(nodes) > 0 && !epuo.mutation.ExampapersTypesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exampapers.ExampapersTypesTable,
			Columns: []string{exampapers.ExampapersTypesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(papertypes.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := epuo.mutation.ExampapersTypesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exampapers.ExampapersTypesTable,
			Columns: []string{exampapers.ExampapersTypesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(papertypes.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if epuo.mutation.PapersRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exampapers.PapersRefTable,
			Columns: []string{exampapers.PapersRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(examcalendar.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := epuo.mutation.RemovedPapersRefIDs(); len(nodes) > 0 && !epuo.mutation.PapersRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exampapers.PapersRefTable,
			Columns: []string{exampapers.PapersRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(examcalendar.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := epuo.mutation.PapersRefIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exampapers.PapersRefTable,
			Columns: []string{exampapers.PapersRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(examcalendar.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if epuo.mutation.ExamPaperEligibilityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exampapers.ExamPaperEligibilityTable,
			Columns: []string{exampapers.ExamPaperEligibilityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(eligibilitymaster.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := epuo.mutation.RemovedExamPaperEligibilityIDs(); len(nodes) > 0 && !epuo.mutation.ExamPaperEligibilityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exampapers.ExamPaperEligibilityTable,
			Columns: []string{exampapers.ExamPaperEligibilityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(eligibilitymaster.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := epuo.mutation.ExamPaperEligibilityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exampapers.ExamPaperEligibilityTable,
			Columns: []string{exampapers.ExamPaperEligibilityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(eligibilitymaster.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if epuo.mutation.DisRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exampapers.DisRefTable,
			Columns: []string{exampapers.DisRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(disability.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := epuo.mutation.RemovedDisRefIDs(); len(nodes) > 0 && !epuo.mutation.DisRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exampapers.DisRefTable,
			Columns: []string{exampapers.DisRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(disability.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := epuo.mutation.DisRefIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exampapers.DisRefTable,
			Columns: []string{exampapers.DisRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(disability.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ExamPapers{config: epuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, epuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{exampapers.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	epuo.mutation.done = true
	return _node, nil
}
