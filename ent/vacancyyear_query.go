// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"
	"recruit/ent/exam"
	"recruit/ent/examcalendar"
	"recruit/ent/predicate"
	"recruit/ent/vacancyyear"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// VacancyYearQuery is the builder for querying VacancyYear entities.
type VacancyYearQuery struct {
	config
	ctx            *QueryContext
	order          []vacancyyear.OrderOption
	inters         []Interceptor
	predicates     []predicate.VacancyYear
	withVacancyRef *ExamCalendarQuery
	withExams      *ExamQuery
	withFKs        bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the VacancyYearQuery builder.
func (vyq *VacancyYearQuery) Where(ps ...predicate.VacancyYear) *VacancyYearQuery {
	vyq.predicates = append(vyq.predicates, ps...)
	return vyq
}

// Limit the number of records to be returned by this query.
func (vyq *VacancyYearQuery) Limit(limit int) *VacancyYearQuery {
	vyq.ctx.Limit = &limit
	return vyq
}

// Offset to start from.
func (vyq *VacancyYearQuery) Offset(offset int) *VacancyYearQuery {
	vyq.ctx.Offset = &offset
	return vyq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (vyq *VacancyYearQuery) Unique(unique bool) *VacancyYearQuery {
	vyq.ctx.Unique = &unique
	return vyq
}

// Order specifies how the records should be ordered.
func (vyq *VacancyYearQuery) Order(o ...vacancyyear.OrderOption) *VacancyYearQuery {
	vyq.order = append(vyq.order, o...)
	return vyq
}

// QueryVacancyRef chains the current query on the "vacancy_ref" edge.
func (vyq *VacancyYearQuery) QueryVacancyRef() *ExamCalendarQuery {
	query := (&ExamCalendarClient{config: vyq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := vyq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := vyq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(vacancyyear.Table, vacancyyear.FieldID, selector),
			sqlgraph.To(examcalendar.Table, examcalendar.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, vacancyyear.VacancyRefTable, vacancyyear.VacancyRefColumn),
		)
		fromU = sqlgraph.SetNeighbors(vyq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryExams chains the current query on the "exams" edge.
func (vyq *VacancyYearQuery) QueryExams() *ExamQuery {
	query := (&ExamClient{config: vyq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := vyq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := vyq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(vacancyyear.Table, vacancyyear.FieldID, selector),
			sqlgraph.To(exam.Table, exam.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, vacancyyear.ExamsTable, vacancyyear.ExamsColumn),
		)
		fromU = sqlgraph.SetNeighbors(vyq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first VacancyYear entity from the query.
// Returns a *NotFoundError when no VacancyYear was found.
func (vyq *VacancyYearQuery) First(ctx context.Context) (*VacancyYear, error) {
	nodes, err := vyq.Limit(1).All(setContextOp(ctx, vyq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{vacancyyear.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (vyq *VacancyYearQuery) FirstX(ctx context.Context) *VacancyYear {
	node, err := vyq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first VacancyYear ID from the query.
// Returns a *NotFoundError when no VacancyYear ID was found.
func (vyq *VacancyYearQuery) FirstID(ctx context.Context) (id int32, err error) {
	var ids []int32
	if ids, err = vyq.Limit(1).IDs(setContextOp(ctx, vyq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{vacancyyear.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (vyq *VacancyYearQuery) FirstIDX(ctx context.Context) int32 {
	id, err := vyq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single VacancyYear entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one VacancyYear entity is found.
// Returns a *NotFoundError when no VacancyYear entities are found.
func (vyq *VacancyYearQuery) Only(ctx context.Context) (*VacancyYear, error) {
	nodes, err := vyq.Limit(2).All(setContextOp(ctx, vyq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{vacancyyear.Label}
	default:
		return nil, &NotSingularError{vacancyyear.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (vyq *VacancyYearQuery) OnlyX(ctx context.Context) *VacancyYear {
	node, err := vyq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only VacancyYear ID in the query.
// Returns a *NotSingularError when more than one VacancyYear ID is found.
// Returns a *NotFoundError when no entities are found.
func (vyq *VacancyYearQuery) OnlyID(ctx context.Context) (id int32, err error) {
	var ids []int32
	if ids, err = vyq.Limit(2).IDs(setContextOp(ctx, vyq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{vacancyyear.Label}
	default:
		err = &NotSingularError{vacancyyear.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (vyq *VacancyYearQuery) OnlyIDX(ctx context.Context) int32 {
	id, err := vyq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of VacancyYears.
func (vyq *VacancyYearQuery) All(ctx context.Context) ([]*VacancyYear, error) {
	ctx = setContextOp(ctx, vyq.ctx, "All")
	if err := vyq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*VacancyYear, *VacancyYearQuery]()
	return withInterceptors[[]*VacancyYear](ctx, vyq, qr, vyq.inters)
}

// AllX is like All, but panics if an error occurs.
func (vyq *VacancyYearQuery) AllX(ctx context.Context) []*VacancyYear {
	nodes, err := vyq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of VacancyYear IDs.
func (vyq *VacancyYearQuery) IDs(ctx context.Context) (ids []int32, err error) {
	if vyq.ctx.Unique == nil && vyq.path != nil {
		vyq.Unique(true)
	}
	ctx = setContextOp(ctx, vyq.ctx, "IDs")
	if err = vyq.Select(vacancyyear.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (vyq *VacancyYearQuery) IDsX(ctx context.Context) []int32 {
	ids, err := vyq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (vyq *VacancyYearQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, vyq.ctx, "Count")
	if err := vyq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, vyq, querierCount[*VacancyYearQuery](), vyq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (vyq *VacancyYearQuery) CountX(ctx context.Context) int {
	count, err := vyq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (vyq *VacancyYearQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, vyq.ctx, "Exist")
	switch _, err := vyq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (vyq *VacancyYearQuery) ExistX(ctx context.Context) bool {
	exist, err := vyq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the VacancyYearQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (vyq *VacancyYearQuery) Clone() *VacancyYearQuery {
	if vyq == nil {
		return nil
	}
	return &VacancyYearQuery{
		config:         vyq.config,
		ctx:            vyq.ctx.Clone(),
		order:          append([]vacancyyear.OrderOption{}, vyq.order...),
		inters:         append([]Interceptor{}, vyq.inters...),
		predicates:     append([]predicate.VacancyYear{}, vyq.predicates...),
		withVacancyRef: vyq.withVacancyRef.Clone(),
		withExams:      vyq.withExams.Clone(),
		// clone intermediate query.
		sql:  vyq.sql.Clone(),
		path: vyq.path,
	}
}

// WithVacancyRef tells the query-builder to eager-load the nodes that are connected to
// the "vacancy_ref" edge. The optional arguments are used to configure the query builder of the edge.
func (vyq *VacancyYearQuery) WithVacancyRef(opts ...func(*ExamCalendarQuery)) *VacancyYearQuery {
	query := (&ExamCalendarClient{config: vyq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	vyq.withVacancyRef = query
	return vyq
}

// WithExams tells the query-builder to eager-load the nodes that are connected to
// the "exams" edge. The optional arguments are used to configure the query builder of the edge.
func (vyq *VacancyYearQuery) WithExams(opts ...func(*ExamQuery)) *VacancyYearQuery {
	query := (&ExamClient{config: vyq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	vyq.withExams = query
	return vyq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		FromDate time.Time `json:"FromDate,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.VacancyYear.Query().
//		GroupBy(vacancyyear.FieldFromDate).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (vyq *VacancyYearQuery) GroupBy(field string, fields ...string) *VacancyYearGroupBy {
	vyq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &VacancyYearGroupBy{build: vyq}
	grbuild.flds = &vyq.ctx.Fields
	grbuild.label = vacancyyear.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		FromDate time.Time `json:"FromDate,omitempty"`
//	}
//
//	client.VacancyYear.Query().
//		Select(vacancyyear.FieldFromDate).
//		Scan(ctx, &v)
func (vyq *VacancyYearQuery) Select(fields ...string) *VacancyYearSelect {
	vyq.ctx.Fields = append(vyq.ctx.Fields, fields...)
	sbuild := &VacancyYearSelect{VacancyYearQuery: vyq}
	sbuild.label = vacancyyear.Label
	sbuild.flds, sbuild.scan = &vyq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a VacancyYearSelect configured with the given aggregations.
func (vyq *VacancyYearQuery) Aggregate(fns ...AggregateFunc) *VacancyYearSelect {
	return vyq.Select().Aggregate(fns...)
}

func (vyq *VacancyYearQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range vyq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, vyq); err != nil {
				return err
			}
		}
	}
	for _, f := range vyq.ctx.Fields {
		if !vacancyyear.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if vyq.path != nil {
		prev, err := vyq.path(ctx)
		if err != nil {
			return err
		}
		vyq.sql = prev
	}
	return nil
}

func (vyq *VacancyYearQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*VacancyYear, error) {
	var (
		nodes       = []*VacancyYear{}
		withFKs     = vyq.withFKs
		_spec       = vyq.querySpec()
		loadedTypes = [2]bool{
			vyq.withVacancyRef != nil,
			vyq.withExams != nil,
		}
	)
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, vacancyyear.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*VacancyYear).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &VacancyYear{config: vyq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, vyq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := vyq.withVacancyRef; query != nil {
		if err := vyq.loadVacancyRef(ctx, query, nodes,
			func(n *VacancyYear) { n.Edges.VacancyRef = []*ExamCalendar{} },
			func(n *VacancyYear, e *ExamCalendar) { n.Edges.VacancyRef = append(n.Edges.VacancyRef, e) }); err != nil {
			return nil, err
		}
	}
	if query := vyq.withExams; query != nil {
		if err := vyq.loadExams(ctx, query, nodes,
			func(n *VacancyYear) { n.Edges.Exams = []*Exam{} },
			func(n *VacancyYear, e *Exam) { n.Edges.Exams = append(n.Edges.Exams, e) }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (vyq *VacancyYearQuery) loadVacancyRef(ctx context.Context, query *ExamCalendarQuery, nodes []*VacancyYear, init func(*VacancyYear), assign func(*VacancyYear, *ExamCalendar)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int32]*VacancyYear)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(examcalendar.FieldVacancyYearCode)
	}
	query.Where(predicate.ExamCalendar(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(vacancyyear.VacancyRefColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.VacancyYearCode
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "VacancyYearCode" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (vyq *VacancyYearQuery) loadExams(ctx context.Context, query *ExamQuery, nodes []*VacancyYear, init func(*VacancyYear), assign func(*VacancyYear, *Exam)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int32]*VacancyYear)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Exam(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(vacancyyear.ExamsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.vacancy_year_exams
		if fk == nil {
			return fmt.Errorf(`foreign-key "vacancy_year_exams" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "vacancy_year_exams" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (vyq *VacancyYearQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := vyq.querySpec()
	_spec.Node.Columns = vyq.ctx.Fields
	if len(vyq.ctx.Fields) > 0 {
		_spec.Unique = vyq.ctx.Unique != nil && *vyq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, vyq.driver, _spec)
}

func (vyq *VacancyYearQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(vacancyyear.Table, vacancyyear.Columns, sqlgraph.NewFieldSpec(vacancyyear.FieldID, field.TypeInt32))
	_spec.From = vyq.sql
	if unique := vyq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if vyq.path != nil {
		_spec.Unique = true
	}
	if fields := vyq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, vacancyyear.FieldID)
		for i := range fields {
			if fields[i] != vacancyyear.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := vyq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := vyq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := vyq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := vyq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (vyq *VacancyYearQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(vyq.driver.Dialect())
	t1 := builder.Table(vacancyyear.Table)
	columns := vyq.ctx.Fields
	if len(columns) == 0 {
		columns = vacancyyear.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if vyq.sql != nil {
		selector = vyq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if vyq.ctx.Unique != nil && *vyq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range vyq.predicates {
		p(selector)
	}
	for _, p := range vyq.order {
		p(selector)
	}
	if offset := vyq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := vyq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// VacancyYearGroupBy is the group-by builder for VacancyYear entities.
type VacancyYearGroupBy struct {
	selector
	build *VacancyYearQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (vygb *VacancyYearGroupBy) Aggregate(fns ...AggregateFunc) *VacancyYearGroupBy {
	vygb.fns = append(vygb.fns, fns...)
	return vygb
}

// Scan applies the selector query and scans the result into the given value.
func (vygb *VacancyYearGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, vygb.build.ctx, "GroupBy")
	if err := vygb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*VacancyYearQuery, *VacancyYearGroupBy](ctx, vygb.build, vygb, vygb.build.inters, v)
}

func (vygb *VacancyYearGroupBy) sqlScan(ctx context.Context, root *VacancyYearQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(vygb.fns))
	for _, fn := range vygb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*vygb.flds)+len(vygb.fns))
		for _, f := range *vygb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*vygb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := vygb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// VacancyYearSelect is the builder for selecting fields of VacancyYear entities.
type VacancyYearSelect struct {
	*VacancyYearQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (vys *VacancyYearSelect) Aggregate(fns ...AggregateFunc) *VacancyYearSelect {
	vys.fns = append(vys.fns, fns...)
	return vys
}

// Scan applies the selector query and scans the result into the given value.
func (vys *VacancyYearSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, vys.ctx, "Select")
	if err := vys.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*VacancyYearQuery, *VacancyYearSelect](ctx, vys.VacancyYearQuery, vys, vys.inters, v)
}

func (vys *VacancyYearSelect) sqlScan(ctx context.Context, root *VacancyYearQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(vys.fns))
	for _, fn := range vys.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*vys.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := vys.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
