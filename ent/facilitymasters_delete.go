// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"recruit/ent/facilitymasters"
	"recruit/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// FacilityMastersDelete is the builder for deleting a FacilityMasters entity.
type FacilityMastersDelete struct {
	config
	hooks    []Hook
	mutation *FacilityMastersMutation
}

// Where appends a list predicates to the FacilityMastersDelete builder.
func (fmd *FacilityMastersDelete) Where(ps ...predicate.FacilityMasters) *FacilityMastersDelete {
	fmd.mutation.Where(ps...)
	return fmd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (fmd *FacilityMastersDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, fmd.sqlExec, fmd.mutation, fmd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (fmd *FacilityMastersDelete) ExecX(ctx context.Context) int {
	n, err := fmd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (fmd *FacilityMastersDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(facilitymasters.Table, sqlgraph.NewFieldSpec(facilitymasters.FieldID, field.TypeInt32))
	if ps := fmd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, fmd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	fmd.mutation.done = true
	return affected, err
}

// FacilityMastersDeleteOne is the builder for deleting a single FacilityMasters entity.
type FacilityMastersDeleteOne struct {
	fmd *FacilityMastersDelete
}

// Where appends a list predicates to the FacilityMastersDelete builder.
func (fmdo *FacilityMastersDeleteOne) Where(ps ...predicate.FacilityMasters) *FacilityMastersDeleteOne {
	fmdo.fmd.mutation.Where(ps...)
	return fmdo
}

// Exec executes the deletion query.
func (fmdo *FacilityMastersDeleteOne) Exec(ctx context.Context) error {
	n, err := fmdo.fmd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{facilitymasters.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (fmdo *FacilityMastersDeleteOne) ExecX(ctx context.Context) {
	if err := fmdo.Exec(ctx); err != nil {
		panic(err)
	}
}
