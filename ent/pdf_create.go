// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"recruit/ent/pdf"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PDFCreate is the builder for creating a PDF entity.
type PDFCreate struct {
	config
	mutation *PDFMutation
	hooks    []Hook
}

// SetPath sets the "path" field.
func (pc *PDFCreate) SetPath(s string) *PDFCreate {
	pc.mutation.SetPath(s)
	return pc
}

// SetNillablePath sets the "path" field if the given value is not nil.
func (pc *PDFCreate) SetNillablePath(s *string) *PDFCreate {
	if s != nil {
		pc.SetPath(*s)
	}
	return pc
}

// SetFilename sets the "filename" field.
func (pc *PDFCreate) SetFilename(s string) *PDFCreate {
	pc.mutation.SetFilename(s)
	return pc
}

// SetNillableFilename sets the "filename" field if the given value is not nil.
func (pc *PDFCreate) SetNillableFilename(s *string) *PDFCreate {
	if s != nil {
		pc.SetFilename(*s)
	}
	return pc
}

// SetEventtime sets the "eventtime" field.
func (pc *PDFCreate) SetEventtime(t time.Time) *PDFCreate {
	pc.mutation.SetEventtime(t)
	return pc
}

// SetNillableEventtime sets the "eventtime" field if the given value is not nil.
func (pc *PDFCreate) SetNillableEventtime(t *time.Time) *PDFCreate {
	if t != nil {
		pc.SetEventtime(*t)
	}
	return pc
}

// SetExamcode sets the "examcode" field.
func (pc *PDFCreate) SetExamcode(i int) *PDFCreate {
	pc.mutation.SetExamcode(i)
	return pc
}

// SetNillableExamcode sets the "examcode" field if the given value is not nil.
func (pc *PDFCreate) SetNillableExamcode(i *int) *PDFCreate {
	if i != nil {
		pc.SetExamcode(*i)
	}
	return pc
}

// SetYear sets the "year" field.
func (pc *PDFCreate) SetYear(i int) *PDFCreate {
	pc.mutation.SetYear(i)
	return pc
}

// SetNillableYear sets the "year" field if the given value is not nil.
func (pc *PDFCreate) SetNillableYear(i *int) *PDFCreate {
	if i != nil {
		pc.SetYear(*i)
	}
	return pc
}

// Mutation returns the PDFMutation object of the builder.
func (pc *PDFCreate) Mutation() *PDFMutation {
	return pc.mutation
}

// Save creates the PDF in the database.
func (pc *PDFCreate) Save(ctx context.Context) (*PDF, error) {
	pc.defaults()
	return withHooks(ctx, pc.sqlSave, pc.mutation, pc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pc *PDFCreate) SaveX(ctx context.Context) *PDF {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pc *PDFCreate) Exec(ctx context.Context) error {
	_, err := pc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pc *PDFCreate) ExecX(ctx context.Context) {
	if err := pc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pc *PDFCreate) defaults() {
	if _, ok := pc.mutation.Eventtime(); !ok {
		v := pdf.DefaultEventtime()
		pc.mutation.SetEventtime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pc *PDFCreate) check() error {
	return nil
}

func (pc *PDFCreate) sqlSave(ctx context.Context) (*PDF, error) {
	if err := pc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	pc.mutation.id = &_node.ID
	pc.mutation.done = true
	return _node, nil
}

func (pc *PDFCreate) createSpec() (*PDF, *sqlgraph.CreateSpec) {
	var (
		_node = &PDF{config: pc.config}
		_spec = sqlgraph.NewCreateSpec(pdf.Table, sqlgraph.NewFieldSpec(pdf.FieldID, field.TypeInt))
	)
	if value, ok := pc.mutation.Path(); ok {
		_spec.SetField(pdf.FieldPath, field.TypeString, value)
		_node.Path = value
	}
	if value, ok := pc.mutation.Filename(); ok {
		_spec.SetField(pdf.FieldFilename, field.TypeString, value)
		_node.Filename = value
	}
	if value, ok := pc.mutation.Eventtime(); ok {
		_spec.SetField(pdf.FieldEventtime, field.TypeTime, value)
		_node.Eventtime = value
	}
	if value, ok := pc.mutation.Examcode(); ok {
		_spec.SetField(pdf.FieldExamcode, field.TypeInt, value)
		_node.Examcode = value
	}
	if value, ok := pc.mutation.Year(); ok {
		_spec.SetField(pdf.FieldYear, field.TypeInt, value)
		_node.Year = value
	}
	return _node, _spec
}

// PDFCreateBulk is the builder for creating many PDF entities in bulk.
type PDFCreateBulk struct {
	config
	builders []*PDFCreate
}

// Save creates the PDF entities in the database.
func (pcb *PDFCreateBulk) Save(ctx context.Context) ([]*PDF, error) {
	specs := make([]*sqlgraph.CreateSpec, len(pcb.builders))
	nodes := make([]*PDF, len(pcb.builders))
	mutators := make([]Mutator, len(pcb.builders))
	for i := range pcb.builders {
		func(i int, root context.Context) {
			builder := pcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PDFMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pcb *PDFCreateBulk) SaveX(ctx context.Context) []*PDF {
	v, err := pcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pcb *PDFCreateBulk) Exec(ctx context.Context) error {
	_, err := pcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcb *PDFCreateBulk) ExecX(ctx context.Context) {
	if err := pcb.Exec(ctx); err != nil {
		panic(err)
	}
}
