// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"recruit/ent/cadre_choice_ip"
	"recruit/ent/exam_applications_ip"
	"recruit/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CadreChoiceIPUpdate is the builder for updating Cadre_Choice_IP entities.
type CadreChoiceIPUpdate struct {
	config
	hooks    []Hook
	mutation *CadreChoiceIPMutation
}

// Where appends a list predicates to the CadreChoiceIPUpdate builder.
func (cciu *CadreChoiceIPUpdate) Where(ps ...predicate.Cadre_Choice_IP) *CadreChoiceIPUpdate {
	cciu.mutation.Where(ps...)
	return cciu
}

// SetApplicationID sets the "ApplicationID" field.
func (cciu *CadreChoiceIPUpdate) SetApplicationID(i int64) *CadreChoiceIPUpdate {
	cciu.mutation.SetApplicationID(i)
	return cciu
}

// SetNillableApplicationID sets the "ApplicationID" field if the given value is not nil.
func (cciu *CadreChoiceIPUpdate) SetNillableApplicationID(i *int64) *CadreChoiceIPUpdate {
	if i != nil {
		cciu.SetApplicationID(*i)
	}
	return cciu
}

// ClearApplicationID clears the value of the "ApplicationID" field.
func (cciu *CadreChoiceIPUpdate) ClearApplicationID() *CadreChoiceIPUpdate {
	cciu.mutation.ClearApplicationID()
	return cciu
}

// SetCadrePrefNo sets the "CadrePrefNo" field.
func (cciu *CadreChoiceIPUpdate) SetCadrePrefNo(s string) *CadreChoiceIPUpdate {
	cciu.mutation.SetCadrePrefNo(s)
	return cciu
}

// SetNillableCadrePrefNo sets the "CadrePrefNo" field if the given value is not nil.
func (cciu *CadreChoiceIPUpdate) SetNillableCadrePrefNo(s *string) *CadreChoiceIPUpdate {
	if s != nil {
		cciu.SetCadrePrefNo(*s)
	}
	return cciu
}

// ClearCadrePrefNo clears the value of the "CadrePrefNo" field.
func (cciu *CadreChoiceIPUpdate) ClearCadrePrefNo() *CadreChoiceIPUpdate {
	cciu.mutation.ClearCadrePrefNo()
	return cciu
}

// SetCadrePrefValue sets the "CadrePrefValue" field.
func (cciu *CadreChoiceIPUpdate) SetCadrePrefValue(s string) *CadreChoiceIPUpdate {
	cciu.mutation.SetCadrePrefValue(s)
	return cciu
}

// SetNillableCadrePrefValue sets the "CadrePrefValue" field if the given value is not nil.
func (cciu *CadreChoiceIPUpdate) SetNillableCadrePrefValue(s *string) *CadreChoiceIPUpdate {
	if s != nil {
		cciu.SetCadrePrefValue(*s)
	}
	return cciu
}

// ClearCadrePrefValue clears the value of the "CadrePrefValue" field.
func (cciu *CadreChoiceIPUpdate) ClearCadrePrefValue() *CadreChoiceIPUpdate {
	cciu.mutation.ClearCadrePrefValue()
	return cciu
}

// SetEmployeeID sets the "EmployeeID" field.
func (cciu *CadreChoiceIPUpdate) SetEmployeeID(i int64) *CadreChoiceIPUpdate {
	cciu.mutation.ResetEmployeeID()
	cciu.mutation.SetEmployeeID(i)
	return cciu
}

// SetNillableEmployeeID sets the "EmployeeID" field if the given value is not nil.
func (cciu *CadreChoiceIPUpdate) SetNillableEmployeeID(i *int64) *CadreChoiceIPUpdate {
	if i != nil {
		cciu.SetEmployeeID(*i)
	}
	return cciu
}

// AddEmployeeID adds i to the "EmployeeID" field.
func (cciu *CadreChoiceIPUpdate) AddEmployeeID(i int64) *CadreChoiceIPUpdate {
	cciu.mutation.AddEmployeeID(i)
	return cciu
}

// ClearEmployeeID clears the value of the "EmployeeID" field.
func (cciu *CadreChoiceIPUpdate) ClearEmployeeID() *CadreChoiceIPUpdate {
	cciu.mutation.ClearEmployeeID()
	return cciu
}

// SetUpdatedAt sets the "UpdatedAt" field.
func (cciu *CadreChoiceIPUpdate) SetUpdatedAt(t time.Time) *CadreChoiceIPUpdate {
	cciu.mutation.SetUpdatedAt(t)
	return cciu
}

// SetNillableUpdatedAt sets the "UpdatedAt" field if the given value is not nil.
func (cciu *CadreChoiceIPUpdate) SetNillableUpdatedAt(t *time.Time) *CadreChoiceIPUpdate {
	if t != nil {
		cciu.SetUpdatedAt(*t)
	}
	return cciu
}

// ClearUpdatedAt clears the value of the "UpdatedAt" field.
func (cciu *CadreChoiceIPUpdate) ClearUpdatedAt() *CadreChoiceIPUpdate {
	cciu.mutation.ClearUpdatedAt()
	return cciu
}

// SetUpdatedBy sets the "UpdatedBy" field.
func (cciu *CadreChoiceIPUpdate) SetUpdatedBy(s string) *CadreChoiceIPUpdate {
	cciu.mutation.SetUpdatedBy(s)
	return cciu
}

// SetNillableUpdatedBy sets the "UpdatedBy" field if the given value is not nil.
func (cciu *CadreChoiceIPUpdate) SetNillableUpdatedBy(s *string) *CadreChoiceIPUpdate {
	if s != nil {
		cciu.SetUpdatedBy(*s)
	}
	return cciu
}

// ClearUpdatedBy clears the value of the "UpdatedBy" field.
func (cciu *CadreChoiceIPUpdate) ClearUpdatedBy() *CadreChoiceIPUpdate {
	cciu.mutation.ClearUpdatedBy()
	return cciu
}

// SetApplnIPRefID sets the "ApplnIP_Ref" edge to the Exam_Applications_IP entity by ID.
func (cciu *CadreChoiceIPUpdate) SetApplnIPRefID(id int64) *CadreChoiceIPUpdate {
	cciu.mutation.SetApplnIPRefID(id)
	return cciu
}

// SetNillableApplnIPRefID sets the "ApplnIP_Ref" edge to the Exam_Applications_IP entity by ID if the given value is not nil.
func (cciu *CadreChoiceIPUpdate) SetNillableApplnIPRefID(id *int64) *CadreChoiceIPUpdate {
	if id != nil {
		cciu = cciu.SetApplnIPRefID(*id)
	}
	return cciu
}

// SetApplnIPRef sets the "ApplnIP_Ref" edge to the Exam_Applications_IP entity.
func (cciu *CadreChoiceIPUpdate) SetApplnIPRef(e *Exam_Applications_IP) *CadreChoiceIPUpdate {
	return cciu.SetApplnIPRefID(e.ID)
}

// Mutation returns the CadreChoiceIPMutation object of the builder.
func (cciu *CadreChoiceIPUpdate) Mutation() *CadreChoiceIPMutation {
	return cciu.mutation
}

// ClearApplnIPRef clears the "ApplnIP_Ref" edge to the Exam_Applications_IP entity.
func (cciu *CadreChoiceIPUpdate) ClearApplnIPRef() *CadreChoiceIPUpdate {
	cciu.mutation.ClearApplnIPRef()
	return cciu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cciu *CadreChoiceIPUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, cciu.sqlSave, cciu.mutation, cciu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cciu *CadreChoiceIPUpdate) SaveX(ctx context.Context) int {
	affected, err := cciu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cciu *CadreChoiceIPUpdate) Exec(ctx context.Context) error {
	_, err := cciu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cciu *CadreChoiceIPUpdate) ExecX(ctx context.Context) {
	if err := cciu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cciu *CadreChoiceIPUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(cadre_choice_ip.Table, cadre_choice_ip.Columns, sqlgraph.NewFieldSpec(cadre_choice_ip.FieldID, field.TypeInt32))
	if ps := cciu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cciu.mutation.CadrePrefNo(); ok {
		_spec.SetField(cadre_choice_ip.FieldCadrePrefNo, field.TypeString, value)
	}
	if cciu.mutation.CadrePrefNoCleared() {
		_spec.ClearField(cadre_choice_ip.FieldCadrePrefNo, field.TypeString)
	}
	if value, ok := cciu.mutation.CadrePrefValue(); ok {
		_spec.SetField(cadre_choice_ip.FieldCadrePrefValue, field.TypeString, value)
	}
	if cciu.mutation.CadrePrefValueCleared() {
		_spec.ClearField(cadre_choice_ip.FieldCadrePrefValue, field.TypeString)
	}
	if value, ok := cciu.mutation.EmployeeID(); ok {
		_spec.SetField(cadre_choice_ip.FieldEmployeeID, field.TypeInt64, value)
	}
	if value, ok := cciu.mutation.AddedEmployeeID(); ok {
		_spec.AddField(cadre_choice_ip.FieldEmployeeID, field.TypeInt64, value)
	}
	if cciu.mutation.EmployeeIDCleared() {
		_spec.ClearField(cadre_choice_ip.FieldEmployeeID, field.TypeInt64)
	}
	if value, ok := cciu.mutation.UpdatedAt(); ok {
		_spec.SetField(cadre_choice_ip.FieldUpdatedAt, field.TypeTime, value)
	}
	if cciu.mutation.UpdatedAtCleared() {
		_spec.ClearField(cadre_choice_ip.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := cciu.mutation.UpdatedBy(); ok {
		_spec.SetField(cadre_choice_ip.FieldUpdatedBy, field.TypeString, value)
	}
	if cciu.mutation.UpdatedByCleared() {
		_spec.ClearField(cadre_choice_ip.FieldUpdatedBy, field.TypeString)
	}
	if cciu.mutation.ApplnIPRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   cadre_choice_ip.ApplnIPRefTable,
			Columns: []string{cadre_choice_ip.ApplnIPRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_ip.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cciu.mutation.ApplnIPRefIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   cadre_choice_ip.ApplnIPRefTable,
			Columns: []string{cadre_choice_ip.ApplnIPRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_ip.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cciu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{cadre_choice_ip.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cciu.mutation.done = true
	return n, nil
}

// CadreChoiceIPUpdateOne is the builder for updating a single Cadre_Choice_IP entity.
type CadreChoiceIPUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CadreChoiceIPMutation
}

// SetApplicationID sets the "ApplicationID" field.
func (cciuo *CadreChoiceIPUpdateOne) SetApplicationID(i int64) *CadreChoiceIPUpdateOne {
	cciuo.mutation.SetApplicationID(i)
	return cciuo
}

// SetNillableApplicationID sets the "ApplicationID" field if the given value is not nil.
func (cciuo *CadreChoiceIPUpdateOne) SetNillableApplicationID(i *int64) *CadreChoiceIPUpdateOne {
	if i != nil {
		cciuo.SetApplicationID(*i)
	}
	return cciuo
}

// ClearApplicationID clears the value of the "ApplicationID" field.
func (cciuo *CadreChoiceIPUpdateOne) ClearApplicationID() *CadreChoiceIPUpdateOne {
	cciuo.mutation.ClearApplicationID()
	return cciuo
}

// SetCadrePrefNo sets the "CadrePrefNo" field.
func (cciuo *CadreChoiceIPUpdateOne) SetCadrePrefNo(s string) *CadreChoiceIPUpdateOne {
	cciuo.mutation.SetCadrePrefNo(s)
	return cciuo
}

// SetNillableCadrePrefNo sets the "CadrePrefNo" field if the given value is not nil.
func (cciuo *CadreChoiceIPUpdateOne) SetNillableCadrePrefNo(s *string) *CadreChoiceIPUpdateOne {
	if s != nil {
		cciuo.SetCadrePrefNo(*s)
	}
	return cciuo
}

// ClearCadrePrefNo clears the value of the "CadrePrefNo" field.
func (cciuo *CadreChoiceIPUpdateOne) ClearCadrePrefNo() *CadreChoiceIPUpdateOne {
	cciuo.mutation.ClearCadrePrefNo()
	return cciuo
}

// SetCadrePrefValue sets the "CadrePrefValue" field.
func (cciuo *CadreChoiceIPUpdateOne) SetCadrePrefValue(s string) *CadreChoiceIPUpdateOne {
	cciuo.mutation.SetCadrePrefValue(s)
	return cciuo
}

// SetNillableCadrePrefValue sets the "CadrePrefValue" field if the given value is not nil.
func (cciuo *CadreChoiceIPUpdateOne) SetNillableCadrePrefValue(s *string) *CadreChoiceIPUpdateOne {
	if s != nil {
		cciuo.SetCadrePrefValue(*s)
	}
	return cciuo
}

// ClearCadrePrefValue clears the value of the "CadrePrefValue" field.
func (cciuo *CadreChoiceIPUpdateOne) ClearCadrePrefValue() *CadreChoiceIPUpdateOne {
	cciuo.mutation.ClearCadrePrefValue()
	return cciuo
}

// SetEmployeeID sets the "EmployeeID" field.
func (cciuo *CadreChoiceIPUpdateOne) SetEmployeeID(i int64) *CadreChoiceIPUpdateOne {
	cciuo.mutation.ResetEmployeeID()
	cciuo.mutation.SetEmployeeID(i)
	return cciuo
}

// SetNillableEmployeeID sets the "EmployeeID" field if the given value is not nil.
func (cciuo *CadreChoiceIPUpdateOne) SetNillableEmployeeID(i *int64) *CadreChoiceIPUpdateOne {
	if i != nil {
		cciuo.SetEmployeeID(*i)
	}
	return cciuo
}

// AddEmployeeID adds i to the "EmployeeID" field.
func (cciuo *CadreChoiceIPUpdateOne) AddEmployeeID(i int64) *CadreChoiceIPUpdateOne {
	cciuo.mutation.AddEmployeeID(i)
	return cciuo
}

// ClearEmployeeID clears the value of the "EmployeeID" field.
func (cciuo *CadreChoiceIPUpdateOne) ClearEmployeeID() *CadreChoiceIPUpdateOne {
	cciuo.mutation.ClearEmployeeID()
	return cciuo
}

// SetUpdatedAt sets the "UpdatedAt" field.
func (cciuo *CadreChoiceIPUpdateOne) SetUpdatedAt(t time.Time) *CadreChoiceIPUpdateOne {
	cciuo.mutation.SetUpdatedAt(t)
	return cciuo
}

// SetNillableUpdatedAt sets the "UpdatedAt" field if the given value is not nil.
func (cciuo *CadreChoiceIPUpdateOne) SetNillableUpdatedAt(t *time.Time) *CadreChoiceIPUpdateOne {
	if t != nil {
		cciuo.SetUpdatedAt(*t)
	}
	return cciuo
}

// ClearUpdatedAt clears the value of the "UpdatedAt" field.
func (cciuo *CadreChoiceIPUpdateOne) ClearUpdatedAt() *CadreChoiceIPUpdateOne {
	cciuo.mutation.ClearUpdatedAt()
	return cciuo
}

// SetUpdatedBy sets the "UpdatedBy" field.
func (cciuo *CadreChoiceIPUpdateOne) SetUpdatedBy(s string) *CadreChoiceIPUpdateOne {
	cciuo.mutation.SetUpdatedBy(s)
	return cciuo
}

// SetNillableUpdatedBy sets the "UpdatedBy" field if the given value is not nil.
func (cciuo *CadreChoiceIPUpdateOne) SetNillableUpdatedBy(s *string) *CadreChoiceIPUpdateOne {
	if s != nil {
		cciuo.SetUpdatedBy(*s)
	}
	return cciuo
}

// ClearUpdatedBy clears the value of the "UpdatedBy" field.
func (cciuo *CadreChoiceIPUpdateOne) ClearUpdatedBy() *CadreChoiceIPUpdateOne {
	cciuo.mutation.ClearUpdatedBy()
	return cciuo
}

// SetApplnIPRefID sets the "ApplnIP_Ref" edge to the Exam_Applications_IP entity by ID.
func (cciuo *CadreChoiceIPUpdateOne) SetApplnIPRefID(id int64) *CadreChoiceIPUpdateOne {
	cciuo.mutation.SetApplnIPRefID(id)
	return cciuo
}

// SetNillableApplnIPRefID sets the "ApplnIP_Ref" edge to the Exam_Applications_IP entity by ID if the given value is not nil.
func (cciuo *CadreChoiceIPUpdateOne) SetNillableApplnIPRefID(id *int64) *CadreChoiceIPUpdateOne {
	if id != nil {
		cciuo = cciuo.SetApplnIPRefID(*id)
	}
	return cciuo
}

// SetApplnIPRef sets the "ApplnIP_Ref" edge to the Exam_Applications_IP entity.
func (cciuo *CadreChoiceIPUpdateOne) SetApplnIPRef(e *Exam_Applications_IP) *CadreChoiceIPUpdateOne {
	return cciuo.SetApplnIPRefID(e.ID)
}

// Mutation returns the CadreChoiceIPMutation object of the builder.
func (cciuo *CadreChoiceIPUpdateOne) Mutation() *CadreChoiceIPMutation {
	return cciuo.mutation
}

// ClearApplnIPRef clears the "ApplnIP_Ref" edge to the Exam_Applications_IP entity.
func (cciuo *CadreChoiceIPUpdateOne) ClearApplnIPRef() *CadreChoiceIPUpdateOne {
	cciuo.mutation.ClearApplnIPRef()
	return cciuo
}

// Where appends a list predicates to the CadreChoiceIPUpdate builder.
func (cciuo *CadreChoiceIPUpdateOne) Where(ps ...predicate.Cadre_Choice_IP) *CadreChoiceIPUpdateOne {
	cciuo.mutation.Where(ps...)
	return cciuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cciuo *CadreChoiceIPUpdateOne) Select(field string, fields ...string) *CadreChoiceIPUpdateOne {
	cciuo.fields = append([]string{field}, fields...)
	return cciuo
}

// Save executes the query and returns the updated Cadre_Choice_IP entity.
func (cciuo *CadreChoiceIPUpdateOne) Save(ctx context.Context) (*Cadre_Choice_IP, error) {
	return withHooks(ctx, cciuo.sqlSave, cciuo.mutation, cciuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cciuo *CadreChoiceIPUpdateOne) SaveX(ctx context.Context) *Cadre_Choice_IP {
	node, err := cciuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cciuo *CadreChoiceIPUpdateOne) Exec(ctx context.Context) error {
	_, err := cciuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cciuo *CadreChoiceIPUpdateOne) ExecX(ctx context.Context) {
	if err := cciuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cciuo *CadreChoiceIPUpdateOne) sqlSave(ctx context.Context) (_node *Cadre_Choice_IP, err error) {
	_spec := sqlgraph.NewUpdateSpec(cadre_choice_ip.Table, cadre_choice_ip.Columns, sqlgraph.NewFieldSpec(cadre_choice_ip.FieldID, field.TypeInt32))
	id, ok := cciuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Cadre_Choice_IP.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cciuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, cadre_choice_ip.FieldID)
		for _, f := range fields {
			if !cadre_choice_ip.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != cadre_choice_ip.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cciuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cciuo.mutation.CadrePrefNo(); ok {
		_spec.SetField(cadre_choice_ip.FieldCadrePrefNo, field.TypeString, value)
	}
	if cciuo.mutation.CadrePrefNoCleared() {
		_spec.ClearField(cadre_choice_ip.FieldCadrePrefNo, field.TypeString)
	}
	if value, ok := cciuo.mutation.CadrePrefValue(); ok {
		_spec.SetField(cadre_choice_ip.FieldCadrePrefValue, field.TypeString, value)
	}
	if cciuo.mutation.CadrePrefValueCleared() {
		_spec.ClearField(cadre_choice_ip.FieldCadrePrefValue, field.TypeString)
	}
	if value, ok := cciuo.mutation.EmployeeID(); ok {
		_spec.SetField(cadre_choice_ip.FieldEmployeeID, field.TypeInt64, value)
	}
	if value, ok := cciuo.mutation.AddedEmployeeID(); ok {
		_spec.AddField(cadre_choice_ip.FieldEmployeeID, field.TypeInt64, value)
	}
	if cciuo.mutation.EmployeeIDCleared() {
		_spec.ClearField(cadre_choice_ip.FieldEmployeeID, field.TypeInt64)
	}
	if value, ok := cciuo.mutation.UpdatedAt(); ok {
		_spec.SetField(cadre_choice_ip.FieldUpdatedAt, field.TypeTime, value)
	}
	if cciuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(cadre_choice_ip.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := cciuo.mutation.UpdatedBy(); ok {
		_spec.SetField(cadre_choice_ip.FieldUpdatedBy, field.TypeString, value)
	}
	if cciuo.mutation.UpdatedByCleared() {
		_spec.ClearField(cadre_choice_ip.FieldUpdatedBy, field.TypeString)
	}
	if cciuo.mutation.ApplnIPRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   cadre_choice_ip.ApplnIPRefTable,
			Columns: []string{cadre_choice_ip.ApplnIPRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_ip.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cciuo.mutation.ApplnIPRefIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   cadre_choice_ip.ApplnIPRefTable,
			Columns: []string{cadre_choice_ip.ApplnIPRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_ip.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Cadre_Choice_IP{config: cciuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cciuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{cadre_choice_ip.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cciuo.mutation.done = true
	return _node, nil
}
