// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"recruit/ent/logs"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// LogsCreate is the builder for creating a Logs entity.
type LogsCreate struct {
	config
	mutation *LogsMutation
	hooks    []Hook
}

// SetUserid sets the "userid" field.
func (lc *LogsCreate) SetUserid(s string) *LogsCreate {
	lc.mutation.SetUserid(s)
	return lc
}

// SetNillableUserid sets the "userid" field if the given value is not nil.
func (lc *LogsCreate) SetNillableUserid(s *string) *LogsCreate {
	if s != nil {
		lc.SetUserid(*s)
	}
	return lc
}

// SetUniqueid sets the "uniqueid" field.
func (lc *LogsCreate) SetUniqueid(i int64) *LogsCreate {
	lc.mutation.SetUniqueid(i)
	return lc
}

// SetNillableUniqueid sets the "uniqueid" field if the given value is not nil.
func (lc *LogsCreate) SetNillableUniqueid(i *int64) *LogsCreate {
	if i != nil {
		lc.SetUniqueid(*i)
	}
	return lc
}

// SetUsertype sets the "usertype" field.
func (lc *LogsCreate) SetUsertype(s string) *LogsCreate {
	lc.mutation.SetUsertype(s)
	return lc
}

// SetNillableUsertype sets the "usertype" field if the given value is not nil.
func (lc *LogsCreate) SetNillableUsertype(s *string) *LogsCreate {
	if s != nil {
		lc.SetUsertype(*s)
	}
	return lc
}

// SetUserdetails sets the "userdetails" field.
func (lc *LogsCreate) SetUserdetails(s string) *LogsCreate {
	lc.mutation.SetUserdetails(s)
	return lc
}

// SetNillableUserdetails sets the "userdetails" field if the given value is not nil.
func (lc *LogsCreate) SetNillableUserdetails(s *string) *LogsCreate {
	if s != nil {
		lc.SetUserdetails(*s)
	}
	return lc
}

// SetRemarks sets the "remarks" field.
func (lc *LogsCreate) SetRemarks(s string) *LogsCreate {
	lc.mutation.SetRemarks(s)
	return lc
}

// SetNillableRemarks sets the "remarks" field if the given value is not nil.
func (lc *LogsCreate) SetNillableRemarks(s *string) *LogsCreate {
	if s != nil {
		lc.SetRemarks(*s)
	}
	return lc
}

// SetAction sets the "action" field.
func (lc *LogsCreate) SetAction(s string) *LogsCreate {
	lc.mutation.SetAction(s)
	return lc
}

// SetNillableAction sets the "action" field if the given value is not nil.
func (lc *LogsCreate) SetNillableAction(s *string) *LogsCreate {
	if s != nil {
		lc.SetAction(*s)
	}
	return lc
}

// SetIpaddress sets the "ipaddress" field.
func (lc *LogsCreate) SetIpaddress(s string) *LogsCreate {
	lc.mutation.SetIpaddress(s)
	return lc
}

// SetNillableIpaddress sets the "ipaddress" field if the given value is not nil.
func (lc *LogsCreate) SetNillableIpaddress(s *string) *LogsCreate {
	if s != nil {
		lc.SetIpaddress(*s)
	}
	return lc
}

// SetDevicetype sets the "devicetype" field.
func (lc *LogsCreate) SetDevicetype(s string) *LogsCreate {
	lc.mutation.SetDevicetype(s)
	return lc
}

// SetNillableDevicetype sets the "devicetype" field if the given value is not nil.
func (lc *LogsCreate) SetNillableDevicetype(s *string) *LogsCreate {
	if s != nil {
		lc.SetDevicetype(*s)
	}
	return lc
}

// SetOs sets the "os" field.
func (lc *LogsCreate) SetOs(s string) *LogsCreate {
	lc.mutation.SetOs(s)
	return lc
}

// SetNillableOs sets the "os" field if the given value is not nil.
func (lc *LogsCreate) SetNillableOs(s *string) *LogsCreate {
	if s != nil {
		lc.SetOs(*s)
	}
	return lc
}

// SetBrowser sets the "browser" field.
func (lc *LogsCreate) SetBrowser(s string) *LogsCreate {
	lc.mutation.SetBrowser(s)
	return lc
}

// SetNillableBrowser sets the "browser" field if the given value is not nil.
func (lc *LogsCreate) SetNillableBrowser(s *string) *LogsCreate {
	if s != nil {
		lc.SetBrowser(*s)
	}
	return lc
}

// SetLatitude sets the "latitude" field.
func (lc *LogsCreate) SetLatitude(f float64) *LogsCreate {
	lc.mutation.SetLatitude(f)
	return lc
}

// SetNillableLatitude sets the "latitude" field if the given value is not nil.
func (lc *LogsCreate) SetNillableLatitude(f *float64) *LogsCreate {
	if f != nil {
		lc.SetLatitude(*f)
	}
	return lc
}

// SetLongitude sets the "longitude" field.
func (lc *LogsCreate) SetLongitude(f float64) *LogsCreate {
	lc.mutation.SetLongitude(f)
	return lc
}

// SetNillableLongitude sets the "longitude" field if the given value is not nil.
func (lc *LogsCreate) SetNillableLongitude(f *float64) *LogsCreate {
	if f != nil {
		lc.SetLongitude(*f)
	}
	return lc
}

// SetEventtime sets the "eventtime" field.
func (lc *LogsCreate) SetEventtime(t time.Time) *LogsCreate {
	lc.mutation.SetEventtime(t)
	return lc
}

// SetNillableEventtime sets the "eventtime" field if the given value is not nil.
func (lc *LogsCreate) SetNillableEventtime(t *time.Time) *LogsCreate {
	if t != nil {
		lc.SetEventtime(*t)
	}
	return lc
}

// SetID sets the "id" field.
func (lc *LogsCreate) SetID(i int64) *LogsCreate {
	lc.mutation.SetID(i)
	return lc
}

// Mutation returns the LogsMutation object of the builder.
func (lc *LogsCreate) Mutation() *LogsMutation {
	return lc.mutation
}

// Save creates the Logs in the database.
func (lc *LogsCreate) Save(ctx context.Context) (*Logs, error) {
	lc.defaults()
	return withHooks(ctx, lc.sqlSave, lc.mutation, lc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (lc *LogsCreate) SaveX(ctx context.Context) *Logs {
	v, err := lc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (lc *LogsCreate) Exec(ctx context.Context) error {
	_, err := lc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lc *LogsCreate) ExecX(ctx context.Context) {
	if err := lc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (lc *LogsCreate) defaults() {
	if _, ok := lc.mutation.Eventtime(); !ok {
		v := logs.DefaultEventtime()
		lc.mutation.SetEventtime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (lc *LogsCreate) check() error {
	if _, ok := lc.mutation.Eventtime(); !ok {
		return &ValidationError{Name: "eventtime", err: errors.New(`ent: missing required field "Logs.eventtime"`)}
	}
	return nil
}

func (lc *LogsCreate) sqlSave(ctx context.Context) (*Logs, error) {
	if err := lc.check(); err != nil {
		return nil, err
	}
	_node, _spec := lc.createSpec()
	if err := sqlgraph.CreateNode(ctx, lc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	lc.mutation.id = &_node.ID
	lc.mutation.done = true
	return _node, nil
}

func (lc *LogsCreate) createSpec() (*Logs, *sqlgraph.CreateSpec) {
	var (
		_node = &Logs{config: lc.config}
		_spec = sqlgraph.NewCreateSpec(logs.Table, sqlgraph.NewFieldSpec(logs.FieldID, field.TypeInt64))
	)
	if id, ok := lc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := lc.mutation.Userid(); ok {
		_spec.SetField(logs.FieldUserid, field.TypeString, value)
		_node.Userid = value
	}
	if value, ok := lc.mutation.Uniqueid(); ok {
		_spec.SetField(logs.FieldUniqueid, field.TypeInt64, value)
		_node.Uniqueid = value
	}
	if value, ok := lc.mutation.Usertype(); ok {
		_spec.SetField(logs.FieldUsertype, field.TypeString, value)
		_node.Usertype = value
	}
	if value, ok := lc.mutation.Userdetails(); ok {
		_spec.SetField(logs.FieldUserdetails, field.TypeString, value)
		_node.Userdetails = value
	}
	if value, ok := lc.mutation.Remarks(); ok {
		_spec.SetField(logs.FieldRemarks, field.TypeString, value)
		_node.Remarks = value
	}
	if value, ok := lc.mutation.Action(); ok {
		_spec.SetField(logs.FieldAction, field.TypeString, value)
		_node.Action = value
	}
	if value, ok := lc.mutation.Ipaddress(); ok {
		_spec.SetField(logs.FieldIpaddress, field.TypeString, value)
		_node.Ipaddress = value
	}
	if value, ok := lc.mutation.Devicetype(); ok {
		_spec.SetField(logs.FieldDevicetype, field.TypeString, value)
		_node.Devicetype = value
	}
	if value, ok := lc.mutation.Os(); ok {
		_spec.SetField(logs.FieldOs, field.TypeString, value)
		_node.Os = value
	}
	if value, ok := lc.mutation.Browser(); ok {
		_spec.SetField(logs.FieldBrowser, field.TypeString, value)
		_node.Browser = value
	}
	if value, ok := lc.mutation.Latitude(); ok {
		_spec.SetField(logs.FieldLatitude, field.TypeFloat64, value)
		_node.Latitude = value
	}
	if value, ok := lc.mutation.Longitude(); ok {
		_spec.SetField(logs.FieldLongitude, field.TypeFloat64, value)
		_node.Longitude = value
	}
	if value, ok := lc.mutation.Eventtime(); ok {
		_spec.SetField(logs.FieldEventtime, field.TypeTime, value)
		_node.Eventtime = value
	}
	return _node, _spec
}

// LogsCreateBulk is the builder for creating many Logs entities in bulk.
type LogsCreateBulk struct {
	config
	builders []*LogsCreate
}

// Save creates the Logs entities in the database.
func (lcb *LogsCreateBulk) Save(ctx context.Context) ([]*Logs, error) {
	specs := make([]*sqlgraph.CreateSpec, len(lcb.builders))
	nodes := make([]*Logs, len(lcb.builders))
	mutators := make([]Mutator, len(lcb.builders))
	for i := range lcb.builders {
		func(i int, root context.Context) {
			builder := lcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*LogsMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, lcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, lcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, lcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (lcb *LogsCreateBulk) SaveX(ctx context.Context) []*Logs {
	v, err := lcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (lcb *LogsCreateBulk) Exec(ctx context.Context) error {
	_, err := lcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lcb *LogsCreateBulk) ExecX(ctx context.Context) {
	if err := lcb.Exec(ctx); err != nil {
		panic(err)
	}
}
