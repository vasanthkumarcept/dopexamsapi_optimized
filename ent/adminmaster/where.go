// Code generated by ent, DO NOT EDIT.

package adminmaster

import (
	"recruit/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldLTE(FieldID, id))
}

// EmployeeId applies equality check predicate on the "EmployeeId" field. It's identical to EmployeeIdEQ.
func EmployeeId(v int64) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldEQ(FieldEmployeeId, v))
}

// EmployeeName applies equality check predicate on the "EmployeeName" field. It's identical to EmployeeNameEQ.
func EmployeeName(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldEQ(FieldEmployeeName, v))
}

// Designation applies equality check predicate on the "Designation" field. It's identical to DesignationEQ.
func Designation(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldEQ(FieldDesignation, v))
}

// RoleUserCode applies equality check predicate on the "RoleUserCode" field. It's identical to RoleUserCodeEQ.
func RoleUserCode(v int32) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldEQ(FieldRoleUserCode, v))
}

// RoleUserDescription applies equality check predicate on the "RoleUserDescription" field. It's identical to RoleUserDescriptionEQ.
func RoleUserDescription(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldEQ(FieldRoleUserDescription, v))
}

// Mobile applies equality check predicate on the "Mobile" field. It's identical to MobileEQ.
func Mobile(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldEQ(FieldMobile, v))
}

// EmailID applies equality check predicate on the "EmailID" field. It's identical to EmailIDEQ.
func EmailID(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldEQ(FieldEmailID, v))
}

// UserName applies equality check predicate on the "UserName" field. It's identical to UserNameEQ.
func UserName(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldEQ(FieldUserName, v))
}

// Password applies equality check predicate on the "Password" field. It's identical to PasswordEQ.
func Password(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldEQ(FieldPassword, v))
}

// FacilityIDUniqueid applies equality check predicate on the "FacilityIDUniqueid" field. It's identical to FacilityIDUniqueidEQ.
func FacilityIDUniqueid(v int64) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldEQ(FieldFacilityIDUniqueid, v))
}

// FacilityID applies equality check predicate on the "FacilityID" field. It's identical to FacilityIDEQ.
func FacilityID(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldEQ(FieldFacilityID, v))
}

// AuthorityFacilityName applies equality check predicate on the "AuthorityFacilityName" field. It's identical to AuthorityFacilityNameEQ.
func AuthorityFacilityName(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldEQ(FieldAuthorityFacilityName, v))
}

// FacilityType applies equality check predicate on the "FacilityType" field. It's identical to FacilityTypeEQ.
func FacilityType(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldEQ(FieldFacilityType, v))
}

// ReportingOfficeFacilityId applies equality check predicate on the "ReportingOfficeFacilityId" field. It's identical to ReportingOfficeFacilityIdEQ.
func ReportingOfficeFacilityId(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldEQ(FieldReportingOfficeFacilityId, v))
}

// ReportingOfficeFacilityName applies equality check predicate on the "ReportingOfficeFacilityName" field. It's identical to ReportingOfficeFacilityNameEQ.
func ReportingOfficeFacilityName(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldEQ(FieldReportingOfficeFacilityName, v))
}

// CircleOfficeFacilityId applies equality check predicate on the "CircleOfficeFacilityId" field. It's identical to CircleOfficeFacilityIdEQ.
func CircleOfficeFacilityId(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldEQ(FieldCircleOfficeFacilityId, v))
}

// CircleOfficeName applies equality check predicate on the "CircleOfficeName" field. It's identical to CircleOfficeNameEQ.
func CircleOfficeName(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldEQ(FieldCircleOfficeName, v))
}

// UidToken applies equality check predicate on the "UidToken" field. It's identical to UidTokenEQ.
func UidToken(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldEQ(FieldUidToken, v))
}

// Statuss applies equality check predicate on the "Statuss" field. It's identical to StatussEQ.
func Statuss(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldEQ(FieldStatuss, v))
}

// OTP applies equality check predicate on the "OTP" field. It's identical to OTPEQ.
func OTP(v int32) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldEQ(FieldOTP, v))
}

// OTPSavedTime applies equality check predicate on the "OTPSavedTime" field. It's identical to OTPSavedTimeEQ.
func OTPSavedTime(v time.Time) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldEQ(FieldOTPSavedTime, v))
}

// OTPTriggeredTime applies equality check predicate on the "OTPTriggeredTime" field. It's identical to OTPTriggeredTimeEQ.
func OTPTriggeredTime(v time.Time) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldEQ(FieldOTPTriggeredTime, v))
}

// OTPExpiryTime applies equality check predicate on the "OTPExpiryTime" field. It's identical to OTPExpiryTimeEQ.
func OTPExpiryTime(v time.Time) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldEQ(FieldOTPExpiryTime, v))
}

// OTPRemarks applies equality check predicate on the "OTPRemarks" field. It's identical to OTPRemarksEQ.
func OTPRemarks(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldEQ(FieldOTPRemarks, v))
}

// CreatedById applies equality check predicate on the "CreatedById" field. It's identical to CreatedByIdEQ.
func CreatedById(v int64) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldEQ(FieldCreatedById, v))
}

// CreatedByUserName applies equality check predicate on the "CreatedByUserName" field. It's identical to CreatedByUserNameEQ.
func CreatedByUserName(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldEQ(FieldCreatedByUserName, v))
}

// CreatedByEmpId applies equality check predicate on the "CreatedByEmpId" field. It's identical to CreatedByEmpIdEQ.
func CreatedByEmpId(v int64) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldEQ(FieldCreatedByEmpId, v))
}

// CreatedByDesignation applies equality check predicate on the "CreatedByDesignation" field. It's identical to CreatedByDesignationEQ.
func CreatedByDesignation(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldEQ(FieldCreatedByDesignation, v))
}

// CreatedDate applies equality check predicate on the "CreatedDate" field. It's identical to CreatedDateEQ.
func CreatedDate(v time.Time) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldEQ(FieldCreatedDate, v))
}

// DeletedById applies equality check predicate on the "DeletedById" field. It's identical to DeletedByIdEQ.
func DeletedById(v int64) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldEQ(FieldDeletedById, v))
}

// DeletedByUserName applies equality check predicate on the "DeletedByUserName" field. It's identical to DeletedByUserNameEQ.
func DeletedByUserName(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldEQ(FieldDeletedByUserName, v))
}

// DeletedByEmpId applies equality check predicate on the "DeletedByEmpId" field. It's identical to DeletedByEmpIdEQ.
func DeletedByEmpId(v int64) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldEQ(FieldDeletedByEmpId, v))
}

// DeletedByDesignation applies equality check predicate on the "DeletedByDesignation" field. It's identical to DeletedByDesignationEQ.
func DeletedByDesignation(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldEQ(FieldDeletedByDesignation, v))
}

// DeletedDate applies equality check predicate on the "DeletedDate" field. It's identical to DeletedDateEQ.
func DeletedDate(v time.Time) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldEQ(FieldDeletedDate, v))
}

// ModifiedById applies equality check predicate on the "ModifiedById" field. It's identical to ModifiedByIdEQ.
func ModifiedById(v int) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldEQ(FieldModifiedById, v))
}

// ModifiedByUserName applies equality check predicate on the "ModifiedByUserName" field. It's identical to ModifiedByUserNameEQ.
func ModifiedByUserName(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldEQ(FieldModifiedByUserName, v))
}

// ModifiedByEmpId applies equality check predicate on the "ModifiedByEmpId" field. It's identical to ModifiedByEmpIdEQ.
func ModifiedByEmpId(v int64) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldEQ(FieldModifiedByEmpId, v))
}

// ModifiedByDesignantion applies equality check predicate on the "ModifiedByDesignantion" field. It's identical to ModifiedByDesignantionEQ.
func ModifiedByDesignantion(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldEQ(FieldModifiedByDesignantion, v))
}

// ModifiedDate applies equality check predicate on the "ModifiedDate" field. It's identical to ModifiedDateEQ.
func ModifiedDate(v time.Time) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldEQ(FieldModifiedDate, v))
}

// DeletedBy applies equality check predicate on the "DeletedBy" field. It's identical to DeletedByEQ.
func DeletedBy(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldEQ(FieldDeletedBy, v))
}

// Deletedbyid applies equality check predicate on the "Deletedbyid" field. It's identical to DeletedbyidEQ.
func Deletedbyid(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldEQ(FieldDeletedbyid, v))
}

// NewPasswordRequest applies equality check predicate on the "NewPasswordRequest" field. It's identical to NewPasswordRequestEQ.
func NewPasswordRequest(v bool) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldEQ(FieldNewPasswordRequest, v))
}

// EventTime applies equality check predicate on the "EventTime" field. It's identical to EventTimeEQ.
func EventTime(v time.Time) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldEQ(FieldEventTime, v))
}

// UUID applies equality check predicate on the "UUID" field. It's identical to UUIDEQ.
func UUID(v int64) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldEQ(FieldUUID, v))
}

// Updatedby applies equality check predicate on the "Updatedby" field. It's identical to UpdatedbyEQ.
func Updatedby(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldEQ(FieldUpdatedby, v))
}

// UpdatedDate applies equality check predicate on the "updatedDate" field. It's identical to UpdatedDateEQ.
func UpdatedDate(v time.Time) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldEQ(FieldUpdatedDate, v))
}

// EmployeeIdEQ applies the EQ predicate on the "EmployeeId" field.
func EmployeeIdEQ(v int64) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldEQ(FieldEmployeeId, v))
}

// EmployeeIdNEQ applies the NEQ predicate on the "EmployeeId" field.
func EmployeeIdNEQ(v int64) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldNEQ(FieldEmployeeId, v))
}

// EmployeeIdIn applies the In predicate on the "EmployeeId" field.
func EmployeeIdIn(vs ...int64) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldIn(FieldEmployeeId, vs...))
}

// EmployeeIdNotIn applies the NotIn predicate on the "EmployeeId" field.
func EmployeeIdNotIn(vs ...int64) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldNotIn(FieldEmployeeId, vs...))
}

// EmployeeIdGT applies the GT predicate on the "EmployeeId" field.
func EmployeeIdGT(v int64) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldGT(FieldEmployeeId, v))
}

// EmployeeIdGTE applies the GTE predicate on the "EmployeeId" field.
func EmployeeIdGTE(v int64) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldGTE(FieldEmployeeId, v))
}

// EmployeeIdLT applies the LT predicate on the "EmployeeId" field.
func EmployeeIdLT(v int64) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldLT(FieldEmployeeId, v))
}

// EmployeeIdLTE applies the LTE predicate on the "EmployeeId" field.
func EmployeeIdLTE(v int64) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldLTE(FieldEmployeeId, v))
}

// EmployeeIdIsNil applies the IsNil predicate on the "EmployeeId" field.
func EmployeeIdIsNil() predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldIsNull(FieldEmployeeId))
}

// EmployeeIdNotNil applies the NotNil predicate on the "EmployeeId" field.
func EmployeeIdNotNil() predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldNotNull(FieldEmployeeId))
}

// EmployeeNameEQ applies the EQ predicate on the "EmployeeName" field.
func EmployeeNameEQ(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldEQ(FieldEmployeeName, v))
}

// EmployeeNameNEQ applies the NEQ predicate on the "EmployeeName" field.
func EmployeeNameNEQ(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldNEQ(FieldEmployeeName, v))
}

// EmployeeNameIn applies the In predicate on the "EmployeeName" field.
func EmployeeNameIn(vs ...string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldIn(FieldEmployeeName, vs...))
}

// EmployeeNameNotIn applies the NotIn predicate on the "EmployeeName" field.
func EmployeeNameNotIn(vs ...string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldNotIn(FieldEmployeeName, vs...))
}

// EmployeeNameGT applies the GT predicate on the "EmployeeName" field.
func EmployeeNameGT(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldGT(FieldEmployeeName, v))
}

// EmployeeNameGTE applies the GTE predicate on the "EmployeeName" field.
func EmployeeNameGTE(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldGTE(FieldEmployeeName, v))
}

// EmployeeNameLT applies the LT predicate on the "EmployeeName" field.
func EmployeeNameLT(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldLT(FieldEmployeeName, v))
}

// EmployeeNameLTE applies the LTE predicate on the "EmployeeName" field.
func EmployeeNameLTE(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldLTE(FieldEmployeeName, v))
}

// EmployeeNameContains applies the Contains predicate on the "EmployeeName" field.
func EmployeeNameContains(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldContains(FieldEmployeeName, v))
}

// EmployeeNameHasPrefix applies the HasPrefix predicate on the "EmployeeName" field.
func EmployeeNameHasPrefix(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldHasPrefix(FieldEmployeeName, v))
}

// EmployeeNameHasSuffix applies the HasSuffix predicate on the "EmployeeName" field.
func EmployeeNameHasSuffix(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldHasSuffix(FieldEmployeeName, v))
}

// EmployeeNameIsNil applies the IsNil predicate on the "EmployeeName" field.
func EmployeeNameIsNil() predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldIsNull(FieldEmployeeName))
}

// EmployeeNameNotNil applies the NotNil predicate on the "EmployeeName" field.
func EmployeeNameNotNil() predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldNotNull(FieldEmployeeName))
}

// EmployeeNameEqualFold applies the EqualFold predicate on the "EmployeeName" field.
func EmployeeNameEqualFold(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldEqualFold(FieldEmployeeName, v))
}

// EmployeeNameContainsFold applies the ContainsFold predicate on the "EmployeeName" field.
func EmployeeNameContainsFold(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldContainsFold(FieldEmployeeName, v))
}

// DesignationEQ applies the EQ predicate on the "Designation" field.
func DesignationEQ(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldEQ(FieldDesignation, v))
}

// DesignationNEQ applies the NEQ predicate on the "Designation" field.
func DesignationNEQ(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldNEQ(FieldDesignation, v))
}

// DesignationIn applies the In predicate on the "Designation" field.
func DesignationIn(vs ...string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldIn(FieldDesignation, vs...))
}

// DesignationNotIn applies the NotIn predicate on the "Designation" field.
func DesignationNotIn(vs ...string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldNotIn(FieldDesignation, vs...))
}

// DesignationGT applies the GT predicate on the "Designation" field.
func DesignationGT(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldGT(FieldDesignation, v))
}

// DesignationGTE applies the GTE predicate on the "Designation" field.
func DesignationGTE(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldGTE(FieldDesignation, v))
}

// DesignationLT applies the LT predicate on the "Designation" field.
func DesignationLT(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldLT(FieldDesignation, v))
}

// DesignationLTE applies the LTE predicate on the "Designation" field.
func DesignationLTE(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldLTE(FieldDesignation, v))
}

// DesignationContains applies the Contains predicate on the "Designation" field.
func DesignationContains(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldContains(FieldDesignation, v))
}

// DesignationHasPrefix applies the HasPrefix predicate on the "Designation" field.
func DesignationHasPrefix(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldHasPrefix(FieldDesignation, v))
}

// DesignationHasSuffix applies the HasSuffix predicate on the "Designation" field.
func DesignationHasSuffix(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldHasSuffix(FieldDesignation, v))
}

// DesignationIsNil applies the IsNil predicate on the "Designation" field.
func DesignationIsNil() predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldIsNull(FieldDesignation))
}

// DesignationNotNil applies the NotNil predicate on the "Designation" field.
func DesignationNotNil() predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldNotNull(FieldDesignation))
}

// DesignationEqualFold applies the EqualFold predicate on the "Designation" field.
func DesignationEqualFold(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldEqualFold(FieldDesignation, v))
}

// DesignationContainsFold applies the ContainsFold predicate on the "Designation" field.
func DesignationContainsFold(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldContainsFold(FieldDesignation, v))
}

// RoleUserCodeEQ applies the EQ predicate on the "RoleUserCode" field.
func RoleUserCodeEQ(v int32) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldEQ(FieldRoleUserCode, v))
}

// RoleUserCodeNEQ applies the NEQ predicate on the "RoleUserCode" field.
func RoleUserCodeNEQ(v int32) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldNEQ(FieldRoleUserCode, v))
}

// RoleUserCodeIn applies the In predicate on the "RoleUserCode" field.
func RoleUserCodeIn(vs ...int32) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldIn(FieldRoleUserCode, vs...))
}

// RoleUserCodeNotIn applies the NotIn predicate on the "RoleUserCode" field.
func RoleUserCodeNotIn(vs ...int32) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldNotIn(FieldRoleUserCode, vs...))
}

// RoleUserCodeGT applies the GT predicate on the "RoleUserCode" field.
func RoleUserCodeGT(v int32) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldGT(FieldRoleUserCode, v))
}

// RoleUserCodeGTE applies the GTE predicate on the "RoleUserCode" field.
func RoleUserCodeGTE(v int32) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldGTE(FieldRoleUserCode, v))
}

// RoleUserCodeLT applies the LT predicate on the "RoleUserCode" field.
func RoleUserCodeLT(v int32) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldLT(FieldRoleUserCode, v))
}

// RoleUserCodeLTE applies the LTE predicate on the "RoleUserCode" field.
func RoleUserCodeLTE(v int32) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldLTE(FieldRoleUserCode, v))
}

// RoleUserCodeIsNil applies the IsNil predicate on the "RoleUserCode" field.
func RoleUserCodeIsNil() predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldIsNull(FieldRoleUserCode))
}

// RoleUserCodeNotNil applies the NotNil predicate on the "RoleUserCode" field.
func RoleUserCodeNotNil() predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldNotNull(FieldRoleUserCode))
}

// RoleUserDescriptionEQ applies the EQ predicate on the "RoleUserDescription" field.
func RoleUserDescriptionEQ(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldEQ(FieldRoleUserDescription, v))
}

// RoleUserDescriptionNEQ applies the NEQ predicate on the "RoleUserDescription" field.
func RoleUserDescriptionNEQ(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldNEQ(FieldRoleUserDescription, v))
}

// RoleUserDescriptionIn applies the In predicate on the "RoleUserDescription" field.
func RoleUserDescriptionIn(vs ...string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldIn(FieldRoleUserDescription, vs...))
}

// RoleUserDescriptionNotIn applies the NotIn predicate on the "RoleUserDescription" field.
func RoleUserDescriptionNotIn(vs ...string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldNotIn(FieldRoleUserDescription, vs...))
}

// RoleUserDescriptionGT applies the GT predicate on the "RoleUserDescription" field.
func RoleUserDescriptionGT(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldGT(FieldRoleUserDescription, v))
}

// RoleUserDescriptionGTE applies the GTE predicate on the "RoleUserDescription" field.
func RoleUserDescriptionGTE(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldGTE(FieldRoleUserDescription, v))
}

// RoleUserDescriptionLT applies the LT predicate on the "RoleUserDescription" field.
func RoleUserDescriptionLT(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldLT(FieldRoleUserDescription, v))
}

// RoleUserDescriptionLTE applies the LTE predicate on the "RoleUserDescription" field.
func RoleUserDescriptionLTE(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldLTE(FieldRoleUserDescription, v))
}

// RoleUserDescriptionContains applies the Contains predicate on the "RoleUserDescription" field.
func RoleUserDescriptionContains(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldContains(FieldRoleUserDescription, v))
}

// RoleUserDescriptionHasPrefix applies the HasPrefix predicate on the "RoleUserDescription" field.
func RoleUserDescriptionHasPrefix(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldHasPrefix(FieldRoleUserDescription, v))
}

// RoleUserDescriptionHasSuffix applies the HasSuffix predicate on the "RoleUserDescription" field.
func RoleUserDescriptionHasSuffix(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldHasSuffix(FieldRoleUserDescription, v))
}

// RoleUserDescriptionIsNil applies the IsNil predicate on the "RoleUserDescription" field.
func RoleUserDescriptionIsNil() predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldIsNull(FieldRoleUserDescription))
}

// RoleUserDescriptionNotNil applies the NotNil predicate on the "RoleUserDescription" field.
func RoleUserDescriptionNotNil() predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldNotNull(FieldRoleUserDescription))
}

// RoleUserDescriptionEqualFold applies the EqualFold predicate on the "RoleUserDescription" field.
func RoleUserDescriptionEqualFold(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldEqualFold(FieldRoleUserDescription, v))
}

// RoleUserDescriptionContainsFold applies the ContainsFold predicate on the "RoleUserDescription" field.
func RoleUserDescriptionContainsFold(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldContainsFold(FieldRoleUserDescription, v))
}

// MobileEQ applies the EQ predicate on the "Mobile" field.
func MobileEQ(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldEQ(FieldMobile, v))
}

// MobileNEQ applies the NEQ predicate on the "Mobile" field.
func MobileNEQ(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldNEQ(FieldMobile, v))
}

// MobileIn applies the In predicate on the "Mobile" field.
func MobileIn(vs ...string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldIn(FieldMobile, vs...))
}

// MobileNotIn applies the NotIn predicate on the "Mobile" field.
func MobileNotIn(vs ...string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldNotIn(FieldMobile, vs...))
}

// MobileGT applies the GT predicate on the "Mobile" field.
func MobileGT(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldGT(FieldMobile, v))
}

// MobileGTE applies the GTE predicate on the "Mobile" field.
func MobileGTE(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldGTE(FieldMobile, v))
}

// MobileLT applies the LT predicate on the "Mobile" field.
func MobileLT(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldLT(FieldMobile, v))
}

// MobileLTE applies the LTE predicate on the "Mobile" field.
func MobileLTE(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldLTE(FieldMobile, v))
}

// MobileContains applies the Contains predicate on the "Mobile" field.
func MobileContains(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldContains(FieldMobile, v))
}

// MobileHasPrefix applies the HasPrefix predicate on the "Mobile" field.
func MobileHasPrefix(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldHasPrefix(FieldMobile, v))
}

// MobileHasSuffix applies the HasSuffix predicate on the "Mobile" field.
func MobileHasSuffix(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldHasSuffix(FieldMobile, v))
}

// MobileIsNil applies the IsNil predicate on the "Mobile" field.
func MobileIsNil() predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldIsNull(FieldMobile))
}

// MobileNotNil applies the NotNil predicate on the "Mobile" field.
func MobileNotNil() predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldNotNull(FieldMobile))
}

// MobileEqualFold applies the EqualFold predicate on the "Mobile" field.
func MobileEqualFold(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldEqualFold(FieldMobile, v))
}

// MobileContainsFold applies the ContainsFold predicate on the "Mobile" field.
func MobileContainsFold(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldContainsFold(FieldMobile, v))
}

// EmailIDEQ applies the EQ predicate on the "EmailID" field.
func EmailIDEQ(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldEQ(FieldEmailID, v))
}

// EmailIDNEQ applies the NEQ predicate on the "EmailID" field.
func EmailIDNEQ(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldNEQ(FieldEmailID, v))
}

// EmailIDIn applies the In predicate on the "EmailID" field.
func EmailIDIn(vs ...string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldIn(FieldEmailID, vs...))
}

// EmailIDNotIn applies the NotIn predicate on the "EmailID" field.
func EmailIDNotIn(vs ...string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldNotIn(FieldEmailID, vs...))
}

// EmailIDGT applies the GT predicate on the "EmailID" field.
func EmailIDGT(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldGT(FieldEmailID, v))
}

// EmailIDGTE applies the GTE predicate on the "EmailID" field.
func EmailIDGTE(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldGTE(FieldEmailID, v))
}

// EmailIDLT applies the LT predicate on the "EmailID" field.
func EmailIDLT(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldLT(FieldEmailID, v))
}

// EmailIDLTE applies the LTE predicate on the "EmailID" field.
func EmailIDLTE(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldLTE(FieldEmailID, v))
}

// EmailIDContains applies the Contains predicate on the "EmailID" field.
func EmailIDContains(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldContains(FieldEmailID, v))
}

// EmailIDHasPrefix applies the HasPrefix predicate on the "EmailID" field.
func EmailIDHasPrefix(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldHasPrefix(FieldEmailID, v))
}

// EmailIDHasSuffix applies the HasSuffix predicate on the "EmailID" field.
func EmailIDHasSuffix(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldHasSuffix(FieldEmailID, v))
}

// EmailIDIsNil applies the IsNil predicate on the "EmailID" field.
func EmailIDIsNil() predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldIsNull(FieldEmailID))
}

// EmailIDNotNil applies the NotNil predicate on the "EmailID" field.
func EmailIDNotNil() predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldNotNull(FieldEmailID))
}

// EmailIDEqualFold applies the EqualFold predicate on the "EmailID" field.
func EmailIDEqualFold(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldEqualFold(FieldEmailID, v))
}

// EmailIDContainsFold applies the ContainsFold predicate on the "EmailID" field.
func EmailIDContainsFold(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldContainsFold(FieldEmailID, v))
}

// UserNameEQ applies the EQ predicate on the "UserName" field.
func UserNameEQ(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldEQ(FieldUserName, v))
}

// UserNameNEQ applies the NEQ predicate on the "UserName" field.
func UserNameNEQ(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldNEQ(FieldUserName, v))
}

// UserNameIn applies the In predicate on the "UserName" field.
func UserNameIn(vs ...string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldIn(FieldUserName, vs...))
}

// UserNameNotIn applies the NotIn predicate on the "UserName" field.
func UserNameNotIn(vs ...string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldNotIn(FieldUserName, vs...))
}

// UserNameGT applies the GT predicate on the "UserName" field.
func UserNameGT(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldGT(FieldUserName, v))
}

// UserNameGTE applies the GTE predicate on the "UserName" field.
func UserNameGTE(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldGTE(FieldUserName, v))
}

// UserNameLT applies the LT predicate on the "UserName" field.
func UserNameLT(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldLT(FieldUserName, v))
}

// UserNameLTE applies the LTE predicate on the "UserName" field.
func UserNameLTE(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldLTE(FieldUserName, v))
}

// UserNameContains applies the Contains predicate on the "UserName" field.
func UserNameContains(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldContains(FieldUserName, v))
}

// UserNameHasPrefix applies the HasPrefix predicate on the "UserName" field.
func UserNameHasPrefix(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldHasPrefix(FieldUserName, v))
}

// UserNameHasSuffix applies the HasSuffix predicate on the "UserName" field.
func UserNameHasSuffix(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldHasSuffix(FieldUserName, v))
}

// UserNameIsNil applies the IsNil predicate on the "UserName" field.
func UserNameIsNil() predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldIsNull(FieldUserName))
}

// UserNameNotNil applies the NotNil predicate on the "UserName" field.
func UserNameNotNil() predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldNotNull(FieldUserName))
}

// UserNameEqualFold applies the EqualFold predicate on the "UserName" field.
func UserNameEqualFold(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldEqualFold(FieldUserName, v))
}

// UserNameContainsFold applies the ContainsFold predicate on the "UserName" field.
func UserNameContainsFold(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldContainsFold(FieldUserName, v))
}

// PasswordEQ applies the EQ predicate on the "Password" field.
func PasswordEQ(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldEQ(FieldPassword, v))
}

// PasswordNEQ applies the NEQ predicate on the "Password" field.
func PasswordNEQ(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldNEQ(FieldPassword, v))
}

// PasswordIn applies the In predicate on the "Password" field.
func PasswordIn(vs ...string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldIn(FieldPassword, vs...))
}

// PasswordNotIn applies the NotIn predicate on the "Password" field.
func PasswordNotIn(vs ...string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldNotIn(FieldPassword, vs...))
}

// PasswordGT applies the GT predicate on the "Password" field.
func PasswordGT(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldGT(FieldPassword, v))
}

// PasswordGTE applies the GTE predicate on the "Password" field.
func PasswordGTE(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldGTE(FieldPassword, v))
}

// PasswordLT applies the LT predicate on the "Password" field.
func PasswordLT(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldLT(FieldPassword, v))
}

// PasswordLTE applies the LTE predicate on the "Password" field.
func PasswordLTE(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldLTE(FieldPassword, v))
}

// PasswordContains applies the Contains predicate on the "Password" field.
func PasswordContains(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldContains(FieldPassword, v))
}

// PasswordHasPrefix applies the HasPrefix predicate on the "Password" field.
func PasswordHasPrefix(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldHasPrefix(FieldPassword, v))
}

// PasswordHasSuffix applies the HasSuffix predicate on the "Password" field.
func PasswordHasSuffix(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldHasSuffix(FieldPassword, v))
}

// PasswordIsNil applies the IsNil predicate on the "Password" field.
func PasswordIsNil() predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldIsNull(FieldPassword))
}

// PasswordNotNil applies the NotNil predicate on the "Password" field.
func PasswordNotNil() predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldNotNull(FieldPassword))
}

// PasswordEqualFold applies the EqualFold predicate on the "Password" field.
func PasswordEqualFold(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldEqualFold(FieldPassword, v))
}

// PasswordContainsFold applies the ContainsFold predicate on the "Password" field.
func PasswordContainsFold(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldContainsFold(FieldPassword, v))
}

// FacilityIDUniqueidEQ applies the EQ predicate on the "FacilityIDUniqueid" field.
func FacilityIDUniqueidEQ(v int64) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldEQ(FieldFacilityIDUniqueid, v))
}

// FacilityIDUniqueidNEQ applies the NEQ predicate on the "FacilityIDUniqueid" field.
func FacilityIDUniqueidNEQ(v int64) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldNEQ(FieldFacilityIDUniqueid, v))
}

// FacilityIDUniqueidIn applies the In predicate on the "FacilityIDUniqueid" field.
func FacilityIDUniqueidIn(vs ...int64) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldIn(FieldFacilityIDUniqueid, vs...))
}

// FacilityIDUniqueidNotIn applies the NotIn predicate on the "FacilityIDUniqueid" field.
func FacilityIDUniqueidNotIn(vs ...int64) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldNotIn(FieldFacilityIDUniqueid, vs...))
}

// FacilityIDUniqueidGT applies the GT predicate on the "FacilityIDUniqueid" field.
func FacilityIDUniqueidGT(v int64) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldGT(FieldFacilityIDUniqueid, v))
}

// FacilityIDUniqueidGTE applies the GTE predicate on the "FacilityIDUniqueid" field.
func FacilityIDUniqueidGTE(v int64) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldGTE(FieldFacilityIDUniqueid, v))
}

// FacilityIDUniqueidLT applies the LT predicate on the "FacilityIDUniqueid" field.
func FacilityIDUniqueidLT(v int64) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldLT(FieldFacilityIDUniqueid, v))
}

// FacilityIDUniqueidLTE applies the LTE predicate on the "FacilityIDUniqueid" field.
func FacilityIDUniqueidLTE(v int64) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldLTE(FieldFacilityIDUniqueid, v))
}

// FacilityIDUniqueidIsNil applies the IsNil predicate on the "FacilityIDUniqueid" field.
func FacilityIDUniqueidIsNil() predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldIsNull(FieldFacilityIDUniqueid))
}

// FacilityIDUniqueidNotNil applies the NotNil predicate on the "FacilityIDUniqueid" field.
func FacilityIDUniqueidNotNil() predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldNotNull(FieldFacilityIDUniqueid))
}

// FacilityIDEQ applies the EQ predicate on the "FacilityID" field.
func FacilityIDEQ(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldEQ(FieldFacilityID, v))
}

// FacilityIDNEQ applies the NEQ predicate on the "FacilityID" field.
func FacilityIDNEQ(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldNEQ(FieldFacilityID, v))
}

// FacilityIDIn applies the In predicate on the "FacilityID" field.
func FacilityIDIn(vs ...string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldIn(FieldFacilityID, vs...))
}

// FacilityIDNotIn applies the NotIn predicate on the "FacilityID" field.
func FacilityIDNotIn(vs ...string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldNotIn(FieldFacilityID, vs...))
}

// FacilityIDGT applies the GT predicate on the "FacilityID" field.
func FacilityIDGT(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldGT(FieldFacilityID, v))
}

// FacilityIDGTE applies the GTE predicate on the "FacilityID" field.
func FacilityIDGTE(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldGTE(FieldFacilityID, v))
}

// FacilityIDLT applies the LT predicate on the "FacilityID" field.
func FacilityIDLT(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldLT(FieldFacilityID, v))
}

// FacilityIDLTE applies the LTE predicate on the "FacilityID" field.
func FacilityIDLTE(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldLTE(FieldFacilityID, v))
}

// FacilityIDContains applies the Contains predicate on the "FacilityID" field.
func FacilityIDContains(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldContains(FieldFacilityID, v))
}

// FacilityIDHasPrefix applies the HasPrefix predicate on the "FacilityID" field.
func FacilityIDHasPrefix(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldHasPrefix(FieldFacilityID, v))
}

// FacilityIDHasSuffix applies the HasSuffix predicate on the "FacilityID" field.
func FacilityIDHasSuffix(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldHasSuffix(FieldFacilityID, v))
}

// FacilityIDIsNil applies the IsNil predicate on the "FacilityID" field.
func FacilityIDIsNil() predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldIsNull(FieldFacilityID))
}

// FacilityIDNotNil applies the NotNil predicate on the "FacilityID" field.
func FacilityIDNotNil() predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldNotNull(FieldFacilityID))
}

// FacilityIDEqualFold applies the EqualFold predicate on the "FacilityID" field.
func FacilityIDEqualFold(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldEqualFold(FieldFacilityID, v))
}

// FacilityIDContainsFold applies the ContainsFold predicate on the "FacilityID" field.
func FacilityIDContainsFold(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldContainsFold(FieldFacilityID, v))
}

// AuthorityFacilityNameEQ applies the EQ predicate on the "AuthorityFacilityName" field.
func AuthorityFacilityNameEQ(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldEQ(FieldAuthorityFacilityName, v))
}

// AuthorityFacilityNameNEQ applies the NEQ predicate on the "AuthorityFacilityName" field.
func AuthorityFacilityNameNEQ(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldNEQ(FieldAuthorityFacilityName, v))
}

// AuthorityFacilityNameIn applies the In predicate on the "AuthorityFacilityName" field.
func AuthorityFacilityNameIn(vs ...string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldIn(FieldAuthorityFacilityName, vs...))
}

// AuthorityFacilityNameNotIn applies the NotIn predicate on the "AuthorityFacilityName" field.
func AuthorityFacilityNameNotIn(vs ...string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldNotIn(FieldAuthorityFacilityName, vs...))
}

// AuthorityFacilityNameGT applies the GT predicate on the "AuthorityFacilityName" field.
func AuthorityFacilityNameGT(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldGT(FieldAuthorityFacilityName, v))
}

// AuthorityFacilityNameGTE applies the GTE predicate on the "AuthorityFacilityName" field.
func AuthorityFacilityNameGTE(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldGTE(FieldAuthorityFacilityName, v))
}

// AuthorityFacilityNameLT applies the LT predicate on the "AuthorityFacilityName" field.
func AuthorityFacilityNameLT(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldLT(FieldAuthorityFacilityName, v))
}

// AuthorityFacilityNameLTE applies the LTE predicate on the "AuthorityFacilityName" field.
func AuthorityFacilityNameLTE(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldLTE(FieldAuthorityFacilityName, v))
}

// AuthorityFacilityNameContains applies the Contains predicate on the "AuthorityFacilityName" field.
func AuthorityFacilityNameContains(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldContains(FieldAuthorityFacilityName, v))
}

// AuthorityFacilityNameHasPrefix applies the HasPrefix predicate on the "AuthorityFacilityName" field.
func AuthorityFacilityNameHasPrefix(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldHasPrefix(FieldAuthorityFacilityName, v))
}

// AuthorityFacilityNameHasSuffix applies the HasSuffix predicate on the "AuthorityFacilityName" field.
func AuthorityFacilityNameHasSuffix(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldHasSuffix(FieldAuthorityFacilityName, v))
}

// AuthorityFacilityNameIsNil applies the IsNil predicate on the "AuthorityFacilityName" field.
func AuthorityFacilityNameIsNil() predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldIsNull(FieldAuthorityFacilityName))
}

// AuthorityFacilityNameNotNil applies the NotNil predicate on the "AuthorityFacilityName" field.
func AuthorityFacilityNameNotNil() predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldNotNull(FieldAuthorityFacilityName))
}

// AuthorityFacilityNameEqualFold applies the EqualFold predicate on the "AuthorityFacilityName" field.
func AuthorityFacilityNameEqualFold(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldEqualFold(FieldAuthorityFacilityName, v))
}

// AuthorityFacilityNameContainsFold applies the ContainsFold predicate on the "AuthorityFacilityName" field.
func AuthorityFacilityNameContainsFold(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldContainsFold(FieldAuthorityFacilityName, v))
}

// FacilityTypeEQ applies the EQ predicate on the "FacilityType" field.
func FacilityTypeEQ(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldEQ(FieldFacilityType, v))
}

// FacilityTypeNEQ applies the NEQ predicate on the "FacilityType" field.
func FacilityTypeNEQ(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldNEQ(FieldFacilityType, v))
}

// FacilityTypeIn applies the In predicate on the "FacilityType" field.
func FacilityTypeIn(vs ...string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldIn(FieldFacilityType, vs...))
}

// FacilityTypeNotIn applies the NotIn predicate on the "FacilityType" field.
func FacilityTypeNotIn(vs ...string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldNotIn(FieldFacilityType, vs...))
}

// FacilityTypeGT applies the GT predicate on the "FacilityType" field.
func FacilityTypeGT(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldGT(FieldFacilityType, v))
}

// FacilityTypeGTE applies the GTE predicate on the "FacilityType" field.
func FacilityTypeGTE(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldGTE(FieldFacilityType, v))
}

// FacilityTypeLT applies the LT predicate on the "FacilityType" field.
func FacilityTypeLT(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldLT(FieldFacilityType, v))
}

// FacilityTypeLTE applies the LTE predicate on the "FacilityType" field.
func FacilityTypeLTE(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldLTE(FieldFacilityType, v))
}

// FacilityTypeContains applies the Contains predicate on the "FacilityType" field.
func FacilityTypeContains(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldContains(FieldFacilityType, v))
}

// FacilityTypeHasPrefix applies the HasPrefix predicate on the "FacilityType" field.
func FacilityTypeHasPrefix(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldHasPrefix(FieldFacilityType, v))
}

// FacilityTypeHasSuffix applies the HasSuffix predicate on the "FacilityType" field.
func FacilityTypeHasSuffix(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldHasSuffix(FieldFacilityType, v))
}

// FacilityTypeIsNil applies the IsNil predicate on the "FacilityType" field.
func FacilityTypeIsNil() predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldIsNull(FieldFacilityType))
}

// FacilityTypeNotNil applies the NotNil predicate on the "FacilityType" field.
func FacilityTypeNotNil() predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldNotNull(FieldFacilityType))
}

// FacilityTypeEqualFold applies the EqualFold predicate on the "FacilityType" field.
func FacilityTypeEqualFold(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldEqualFold(FieldFacilityType, v))
}

// FacilityTypeContainsFold applies the ContainsFold predicate on the "FacilityType" field.
func FacilityTypeContainsFold(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldContainsFold(FieldFacilityType, v))
}

// ReportingOfficeFacilityIdEQ applies the EQ predicate on the "ReportingOfficeFacilityId" field.
func ReportingOfficeFacilityIdEQ(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldEQ(FieldReportingOfficeFacilityId, v))
}

// ReportingOfficeFacilityIdNEQ applies the NEQ predicate on the "ReportingOfficeFacilityId" field.
func ReportingOfficeFacilityIdNEQ(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldNEQ(FieldReportingOfficeFacilityId, v))
}

// ReportingOfficeFacilityIdIn applies the In predicate on the "ReportingOfficeFacilityId" field.
func ReportingOfficeFacilityIdIn(vs ...string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldIn(FieldReportingOfficeFacilityId, vs...))
}

// ReportingOfficeFacilityIdNotIn applies the NotIn predicate on the "ReportingOfficeFacilityId" field.
func ReportingOfficeFacilityIdNotIn(vs ...string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldNotIn(FieldReportingOfficeFacilityId, vs...))
}

// ReportingOfficeFacilityIdGT applies the GT predicate on the "ReportingOfficeFacilityId" field.
func ReportingOfficeFacilityIdGT(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldGT(FieldReportingOfficeFacilityId, v))
}

// ReportingOfficeFacilityIdGTE applies the GTE predicate on the "ReportingOfficeFacilityId" field.
func ReportingOfficeFacilityIdGTE(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldGTE(FieldReportingOfficeFacilityId, v))
}

// ReportingOfficeFacilityIdLT applies the LT predicate on the "ReportingOfficeFacilityId" field.
func ReportingOfficeFacilityIdLT(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldLT(FieldReportingOfficeFacilityId, v))
}

// ReportingOfficeFacilityIdLTE applies the LTE predicate on the "ReportingOfficeFacilityId" field.
func ReportingOfficeFacilityIdLTE(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldLTE(FieldReportingOfficeFacilityId, v))
}

// ReportingOfficeFacilityIdContains applies the Contains predicate on the "ReportingOfficeFacilityId" field.
func ReportingOfficeFacilityIdContains(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldContains(FieldReportingOfficeFacilityId, v))
}

// ReportingOfficeFacilityIdHasPrefix applies the HasPrefix predicate on the "ReportingOfficeFacilityId" field.
func ReportingOfficeFacilityIdHasPrefix(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldHasPrefix(FieldReportingOfficeFacilityId, v))
}

// ReportingOfficeFacilityIdHasSuffix applies the HasSuffix predicate on the "ReportingOfficeFacilityId" field.
func ReportingOfficeFacilityIdHasSuffix(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldHasSuffix(FieldReportingOfficeFacilityId, v))
}

// ReportingOfficeFacilityIdIsNil applies the IsNil predicate on the "ReportingOfficeFacilityId" field.
func ReportingOfficeFacilityIdIsNil() predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldIsNull(FieldReportingOfficeFacilityId))
}

// ReportingOfficeFacilityIdNotNil applies the NotNil predicate on the "ReportingOfficeFacilityId" field.
func ReportingOfficeFacilityIdNotNil() predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldNotNull(FieldReportingOfficeFacilityId))
}

// ReportingOfficeFacilityIdEqualFold applies the EqualFold predicate on the "ReportingOfficeFacilityId" field.
func ReportingOfficeFacilityIdEqualFold(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldEqualFold(FieldReportingOfficeFacilityId, v))
}

// ReportingOfficeFacilityIdContainsFold applies the ContainsFold predicate on the "ReportingOfficeFacilityId" field.
func ReportingOfficeFacilityIdContainsFold(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldContainsFold(FieldReportingOfficeFacilityId, v))
}

// ReportingOfficeFacilityNameEQ applies the EQ predicate on the "ReportingOfficeFacilityName" field.
func ReportingOfficeFacilityNameEQ(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldEQ(FieldReportingOfficeFacilityName, v))
}

// ReportingOfficeFacilityNameNEQ applies the NEQ predicate on the "ReportingOfficeFacilityName" field.
func ReportingOfficeFacilityNameNEQ(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldNEQ(FieldReportingOfficeFacilityName, v))
}

// ReportingOfficeFacilityNameIn applies the In predicate on the "ReportingOfficeFacilityName" field.
func ReportingOfficeFacilityNameIn(vs ...string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldIn(FieldReportingOfficeFacilityName, vs...))
}

// ReportingOfficeFacilityNameNotIn applies the NotIn predicate on the "ReportingOfficeFacilityName" field.
func ReportingOfficeFacilityNameNotIn(vs ...string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldNotIn(FieldReportingOfficeFacilityName, vs...))
}

// ReportingOfficeFacilityNameGT applies the GT predicate on the "ReportingOfficeFacilityName" field.
func ReportingOfficeFacilityNameGT(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldGT(FieldReportingOfficeFacilityName, v))
}

// ReportingOfficeFacilityNameGTE applies the GTE predicate on the "ReportingOfficeFacilityName" field.
func ReportingOfficeFacilityNameGTE(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldGTE(FieldReportingOfficeFacilityName, v))
}

// ReportingOfficeFacilityNameLT applies the LT predicate on the "ReportingOfficeFacilityName" field.
func ReportingOfficeFacilityNameLT(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldLT(FieldReportingOfficeFacilityName, v))
}

// ReportingOfficeFacilityNameLTE applies the LTE predicate on the "ReportingOfficeFacilityName" field.
func ReportingOfficeFacilityNameLTE(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldLTE(FieldReportingOfficeFacilityName, v))
}

// ReportingOfficeFacilityNameContains applies the Contains predicate on the "ReportingOfficeFacilityName" field.
func ReportingOfficeFacilityNameContains(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldContains(FieldReportingOfficeFacilityName, v))
}

// ReportingOfficeFacilityNameHasPrefix applies the HasPrefix predicate on the "ReportingOfficeFacilityName" field.
func ReportingOfficeFacilityNameHasPrefix(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldHasPrefix(FieldReportingOfficeFacilityName, v))
}

// ReportingOfficeFacilityNameHasSuffix applies the HasSuffix predicate on the "ReportingOfficeFacilityName" field.
func ReportingOfficeFacilityNameHasSuffix(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldHasSuffix(FieldReportingOfficeFacilityName, v))
}

// ReportingOfficeFacilityNameIsNil applies the IsNil predicate on the "ReportingOfficeFacilityName" field.
func ReportingOfficeFacilityNameIsNil() predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldIsNull(FieldReportingOfficeFacilityName))
}

// ReportingOfficeFacilityNameNotNil applies the NotNil predicate on the "ReportingOfficeFacilityName" field.
func ReportingOfficeFacilityNameNotNil() predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldNotNull(FieldReportingOfficeFacilityName))
}

// ReportingOfficeFacilityNameEqualFold applies the EqualFold predicate on the "ReportingOfficeFacilityName" field.
func ReportingOfficeFacilityNameEqualFold(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldEqualFold(FieldReportingOfficeFacilityName, v))
}

// ReportingOfficeFacilityNameContainsFold applies the ContainsFold predicate on the "ReportingOfficeFacilityName" field.
func ReportingOfficeFacilityNameContainsFold(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldContainsFold(FieldReportingOfficeFacilityName, v))
}

// CircleOfficeFacilityIdEQ applies the EQ predicate on the "CircleOfficeFacilityId" field.
func CircleOfficeFacilityIdEQ(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldEQ(FieldCircleOfficeFacilityId, v))
}

// CircleOfficeFacilityIdNEQ applies the NEQ predicate on the "CircleOfficeFacilityId" field.
func CircleOfficeFacilityIdNEQ(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldNEQ(FieldCircleOfficeFacilityId, v))
}

// CircleOfficeFacilityIdIn applies the In predicate on the "CircleOfficeFacilityId" field.
func CircleOfficeFacilityIdIn(vs ...string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldIn(FieldCircleOfficeFacilityId, vs...))
}

// CircleOfficeFacilityIdNotIn applies the NotIn predicate on the "CircleOfficeFacilityId" field.
func CircleOfficeFacilityIdNotIn(vs ...string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldNotIn(FieldCircleOfficeFacilityId, vs...))
}

// CircleOfficeFacilityIdGT applies the GT predicate on the "CircleOfficeFacilityId" field.
func CircleOfficeFacilityIdGT(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldGT(FieldCircleOfficeFacilityId, v))
}

// CircleOfficeFacilityIdGTE applies the GTE predicate on the "CircleOfficeFacilityId" field.
func CircleOfficeFacilityIdGTE(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldGTE(FieldCircleOfficeFacilityId, v))
}

// CircleOfficeFacilityIdLT applies the LT predicate on the "CircleOfficeFacilityId" field.
func CircleOfficeFacilityIdLT(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldLT(FieldCircleOfficeFacilityId, v))
}

// CircleOfficeFacilityIdLTE applies the LTE predicate on the "CircleOfficeFacilityId" field.
func CircleOfficeFacilityIdLTE(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldLTE(FieldCircleOfficeFacilityId, v))
}

// CircleOfficeFacilityIdContains applies the Contains predicate on the "CircleOfficeFacilityId" field.
func CircleOfficeFacilityIdContains(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldContains(FieldCircleOfficeFacilityId, v))
}

// CircleOfficeFacilityIdHasPrefix applies the HasPrefix predicate on the "CircleOfficeFacilityId" field.
func CircleOfficeFacilityIdHasPrefix(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldHasPrefix(FieldCircleOfficeFacilityId, v))
}

// CircleOfficeFacilityIdHasSuffix applies the HasSuffix predicate on the "CircleOfficeFacilityId" field.
func CircleOfficeFacilityIdHasSuffix(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldHasSuffix(FieldCircleOfficeFacilityId, v))
}

// CircleOfficeFacilityIdIsNil applies the IsNil predicate on the "CircleOfficeFacilityId" field.
func CircleOfficeFacilityIdIsNil() predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldIsNull(FieldCircleOfficeFacilityId))
}

// CircleOfficeFacilityIdNotNil applies the NotNil predicate on the "CircleOfficeFacilityId" field.
func CircleOfficeFacilityIdNotNil() predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldNotNull(FieldCircleOfficeFacilityId))
}

// CircleOfficeFacilityIdEqualFold applies the EqualFold predicate on the "CircleOfficeFacilityId" field.
func CircleOfficeFacilityIdEqualFold(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldEqualFold(FieldCircleOfficeFacilityId, v))
}

// CircleOfficeFacilityIdContainsFold applies the ContainsFold predicate on the "CircleOfficeFacilityId" field.
func CircleOfficeFacilityIdContainsFold(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldContainsFold(FieldCircleOfficeFacilityId, v))
}

// CircleOfficeNameEQ applies the EQ predicate on the "CircleOfficeName" field.
func CircleOfficeNameEQ(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldEQ(FieldCircleOfficeName, v))
}

// CircleOfficeNameNEQ applies the NEQ predicate on the "CircleOfficeName" field.
func CircleOfficeNameNEQ(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldNEQ(FieldCircleOfficeName, v))
}

// CircleOfficeNameIn applies the In predicate on the "CircleOfficeName" field.
func CircleOfficeNameIn(vs ...string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldIn(FieldCircleOfficeName, vs...))
}

// CircleOfficeNameNotIn applies the NotIn predicate on the "CircleOfficeName" field.
func CircleOfficeNameNotIn(vs ...string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldNotIn(FieldCircleOfficeName, vs...))
}

// CircleOfficeNameGT applies the GT predicate on the "CircleOfficeName" field.
func CircleOfficeNameGT(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldGT(FieldCircleOfficeName, v))
}

// CircleOfficeNameGTE applies the GTE predicate on the "CircleOfficeName" field.
func CircleOfficeNameGTE(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldGTE(FieldCircleOfficeName, v))
}

// CircleOfficeNameLT applies the LT predicate on the "CircleOfficeName" field.
func CircleOfficeNameLT(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldLT(FieldCircleOfficeName, v))
}

// CircleOfficeNameLTE applies the LTE predicate on the "CircleOfficeName" field.
func CircleOfficeNameLTE(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldLTE(FieldCircleOfficeName, v))
}

// CircleOfficeNameContains applies the Contains predicate on the "CircleOfficeName" field.
func CircleOfficeNameContains(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldContains(FieldCircleOfficeName, v))
}

// CircleOfficeNameHasPrefix applies the HasPrefix predicate on the "CircleOfficeName" field.
func CircleOfficeNameHasPrefix(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldHasPrefix(FieldCircleOfficeName, v))
}

// CircleOfficeNameHasSuffix applies the HasSuffix predicate on the "CircleOfficeName" field.
func CircleOfficeNameHasSuffix(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldHasSuffix(FieldCircleOfficeName, v))
}

// CircleOfficeNameIsNil applies the IsNil predicate on the "CircleOfficeName" field.
func CircleOfficeNameIsNil() predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldIsNull(FieldCircleOfficeName))
}

// CircleOfficeNameNotNil applies the NotNil predicate on the "CircleOfficeName" field.
func CircleOfficeNameNotNil() predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldNotNull(FieldCircleOfficeName))
}

// CircleOfficeNameEqualFold applies the EqualFold predicate on the "CircleOfficeName" field.
func CircleOfficeNameEqualFold(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldEqualFold(FieldCircleOfficeName, v))
}

// CircleOfficeNameContainsFold applies the ContainsFold predicate on the "CircleOfficeName" field.
func CircleOfficeNameContainsFold(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldContainsFold(FieldCircleOfficeName, v))
}

// UidTokenEQ applies the EQ predicate on the "UidToken" field.
func UidTokenEQ(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldEQ(FieldUidToken, v))
}

// UidTokenNEQ applies the NEQ predicate on the "UidToken" field.
func UidTokenNEQ(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldNEQ(FieldUidToken, v))
}

// UidTokenIn applies the In predicate on the "UidToken" field.
func UidTokenIn(vs ...string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldIn(FieldUidToken, vs...))
}

// UidTokenNotIn applies the NotIn predicate on the "UidToken" field.
func UidTokenNotIn(vs ...string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldNotIn(FieldUidToken, vs...))
}

// UidTokenGT applies the GT predicate on the "UidToken" field.
func UidTokenGT(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldGT(FieldUidToken, v))
}

// UidTokenGTE applies the GTE predicate on the "UidToken" field.
func UidTokenGTE(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldGTE(FieldUidToken, v))
}

// UidTokenLT applies the LT predicate on the "UidToken" field.
func UidTokenLT(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldLT(FieldUidToken, v))
}

// UidTokenLTE applies the LTE predicate on the "UidToken" field.
func UidTokenLTE(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldLTE(FieldUidToken, v))
}

// UidTokenContains applies the Contains predicate on the "UidToken" field.
func UidTokenContains(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldContains(FieldUidToken, v))
}

// UidTokenHasPrefix applies the HasPrefix predicate on the "UidToken" field.
func UidTokenHasPrefix(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldHasPrefix(FieldUidToken, v))
}

// UidTokenHasSuffix applies the HasSuffix predicate on the "UidToken" field.
func UidTokenHasSuffix(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldHasSuffix(FieldUidToken, v))
}

// UidTokenIsNil applies the IsNil predicate on the "UidToken" field.
func UidTokenIsNil() predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldIsNull(FieldUidToken))
}

// UidTokenNotNil applies the NotNil predicate on the "UidToken" field.
func UidTokenNotNil() predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldNotNull(FieldUidToken))
}

// UidTokenEqualFold applies the EqualFold predicate on the "UidToken" field.
func UidTokenEqualFold(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldEqualFold(FieldUidToken, v))
}

// UidTokenContainsFold applies the ContainsFold predicate on the "UidToken" field.
func UidTokenContainsFold(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldContainsFold(FieldUidToken, v))
}

// StatussEQ applies the EQ predicate on the "Statuss" field.
func StatussEQ(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldEQ(FieldStatuss, v))
}

// StatussNEQ applies the NEQ predicate on the "Statuss" field.
func StatussNEQ(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldNEQ(FieldStatuss, v))
}

// StatussIn applies the In predicate on the "Statuss" field.
func StatussIn(vs ...string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldIn(FieldStatuss, vs...))
}

// StatussNotIn applies the NotIn predicate on the "Statuss" field.
func StatussNotIn(vs ...string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldNotIn(FieldStatuss, vs...))
}

// StatussGT applies the GT predicate on the "Statuss" field.
func StatussGT(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldGT(FieldStatuss, v))
}

// StatussGTE applies the GTE predicate on the "Statuss" field.
func StatussGTE(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldGTE(FieldStatuss, v))
}

// StatussLT applies the LT predicate on the "Statuss" field.
func StatussLT(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldLT(FieldStatuss, v))
}

// StatussLTE applies the LTE predicate on the "Statuss" field.
func StatussLTE(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldLTE(FieldStatuss, v))
}

// StatussContains applies the Contains predicate on the "Statuss" field.
func StatussContains(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldContains(FieldStatuss, v))
}

// StatussHasPrefix applies the HasPrefix predicate on the "Statuss" field.
func StatussHasPrefix(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldHasPrefix(FieldStatuss, v))
}

// StatussHasSuffix applies the HasSuffix predicate on the "Statuss" field.
func StatussHasSuffix(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldHasSuffix(FieldStatuss, v))
}

// StatussIsNil applies the IsNil predicate on the "Statuss" field.
func StatussIsNil() predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldIsNull(FieldStatuss))
}

// StatussNotNil applies the NotNil predicate on the "Statuss" field.
func StatussNotNil() predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldNotNull(FieldStatuss))
}

// StatussEqualFold applies the EqualFold predicate on the "Statuss" field.
func StatussEqualFold(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldEqualFold(FieldStatuss, v))
}

// StatussContainsFold applies the ContainsFold predicate on the "Statuss" field.
func StatussContainsFold(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldContainsFold(FieldStatuss, v))
}

// OTPEQ applies the EQ predicate on the "OTP" field.
func OTPEQ(v int32) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldEQ(FieldOTP, v))
}

// OTPNEQ applies the NEQ predicate on the "OTP" field.
func OTPNEQ(v int32) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldNEQ(FieldOTP, v))
}

// OTPIn applies the In predicate on the "OTP" field.
func OTPIn(vs ...int32) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldIn(FieldOTP, vs...))
}

// OTPNotIn applies the NotIn predicate on the "OTP" field.
func OTPNotIn(vs ...int32) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldNotIn(FieldOTP, vs...))
}

// OTPGT applies the GT predicate on the "OTP" field.
func OTPGT(v int32) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldGT(FieldOTP, v))
}

// OTPGTE applies the GTE predicate on the "OTP" field.
func OTPGTE(v int32) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldGTE(FieldOTP, v))
}

// OTPLT applies the LT predicate on the "OTP" field.
func OTPLT(v int32) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldLT(FieldOTP, v))
}

// OTPLTE applies the LTE predicate on the "OTP" field.
func OTPLTE(v int32) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldLTE(FieldOTP, v))
}

// OTPIsNil applies the IsNil predicate on the "OTP" field.
func OTPIsNil() predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldIsNull(FieldOTP))
}

// OTPNotNil applies the NotNil predicate on the "OTP" field.
func OTPNotNil() predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldNotNull(FieldOTP))
}

// OTPSavedTimeEQ applies the EQ predicate on the "OTPSavedTime" field.
func OTPSavedTimeEQ(v time.Time) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldEQ(FieldOTPSavedTime, v))
}

// OTPSavedTimeNEQ applies the NEQ predicate on the "OTPSavedTime" field.
func OTPSavedTimeNEQ(v time.Time) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldNEQ(FieldOTPSavedTime, v))
}

// OTPSavedTimeIn applies the In predicate on the "OTPSavedTime" field.
func OTPSavedTimeIn(vs ...time.Time) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldIn(FieldOTPSavedTime, vs...))
}

// OTPSavedTimeNotIn applies the NotIn predicate on the "OTPSavedTime" field.
func OTPSavedTimeNotIn(vs ...time.Time) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldNotIn(FieldOTPSavedTime, vs...))
}

// OTPSavedTimeGT applies the GT predicate on the "OTPSavedTime" field.
func OTPSavedTimeGT(v time.Time) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldGT(FieldOTPSavedTime, v))
}

// OTPSavedTimeGTE applies the GTE predicate on the "OTPSavedTime" field.
func OTPSavedTimeGTE(v time.Time) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldGTE(FieldOTPSavedTime, v))
}

// OTPSavedTimeLT applies the LT predicate on the "OTPSavedTime" field.
func OTPSavedTimeLT(v time.Time) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldLT(FieldOTPSavedTime, v))
}

// OTPSavedTimeLTE applies the LTE predicate on the "OTPSavedTime" field.
func OTPSavedTimeLTE(v time.Time) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldLTE(FieldOTPSavedTime, v))
}

// OTPSavedTimeIsNil applies the IsNil predicate on the "OTPSavedTime" field.
func OTPSavedTimeIsNil() predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldIsNull(FieldOTPSavedTime))
}

// OTPSavedTimeNotNil applies the NotNil predicate on the "OTPSavedTime" field.
func OTPSavedTimeNotNil() predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldNotNull(FieldOTPSavedTime))
}

// OTPTriggeredTimeEQ applies the EQ predicate on the "OTPTriggeredTime" field.
func OTPTriggeredTimeEQ(v time.Time) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldEQ(FieldOTPTriggeredTime, v))
}

// OTPTriggeredTimeNEQ applies the NEQ predicate on the "OTPTriggeredTime" field.
func OTPTriggeredTimeNEQ(v time.Time) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldNEQ(FieldOTPTriggeredTime, v))
}

// OTPTriggeredTimeIn applies the In predicate on the "OTPTriggeredTime" field.
func OTPTriggeredTimeIn(vs ...time.Time) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldIn(FieldOTPTriggeredTime, vs...))
}

// OTPTriggeredTimeNotIn applies the NotIn predicate on the "OTPTriggeredTime" field.
func OTPTriggeredTimeNotIn(vs ...time.Time) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldNotIn(FieldOTPTriggeredTime, vs...))
}

// OTPTriggeredTimeGT applies the GT predicate on the "OTPTriggeredTime" field.
func OTPTriggeredTimeGT(v time.Time) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldGT(FieldOTPTriggeredTime, v))
}

// OTPTriggeredTimeGTE applies the GTE predicate on the "OTPTriggeredTime" field.
func OTPTriggeredTimeGTE(v time.Time) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldGTE(FieldOTPTriggeredTime, v))
}

// OTPTriggeredTimeLT applies the LT predicate on the "OTPTriggeredTime" field.
func OTPTriggeredTimeLT(v time.Time) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldLT(FieldOTPTriggeredTime, v))
}

// OTPTriggeredTimeLTE applies the LTE predicate on the "OTPTriggeredTime" field.
func OTPTriggeredTimeLTE(v time.Time) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldLTE(FieldOTPTriggeredTime, v))
}

// OTPTriggeredTimeIsNil applies the IsNil predicate on the "OTPTriggeredTime" field.
func OTPTriggeredTimeIsNil() predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldIsNull(FieldOTPTriggeredTime))
}

// OTPTriggeredTimeNotNil applies the NotNil predicate on the "OTPTriggeredTime" field.
func OTPTriggeredTimeNotNil() predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldNotNull(FieldOTPTriggeredTime))
}

// OTPExpiryTimeEQ applies the EQ predicate on the "OTPExpiryTime" field.
func OTPExpiryTimeEQ(v time.Time) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldEQ(FieldOTPExpiryTime, v))
}

// OTPExpiryTimeNEQ applies the NEQ predicate on the "OTPExpiryTime" field.
func OTPExpiryTimeNEQ(v time.Time) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldNEQ(FieldOTPExpiryTime, v))
}

// OTPExpiryTimeIn applies the In predicate on the "OTPExpiryTime" field.
func OTPExpiryTimeIn(vs ...time.Time) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldIn(FieldOTPExpiryTime, vs...))
}

// OTPExpiryTimeNotIn applies the NotIn predicate on the "OTPExpiryTime" field.
func OTPExpiryTimeNotIn(vs ...time.Time) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldNotIn(FieldOTPExpiryTime, vs...))
}

// OTPExpiryTimeGT applies the GT predicate on the "OTPExpiryTime" field.
func OTPExpiryTimeGT(v time.Time) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldGT(FieldOTPExpiryTime, v))
}

// OTPExpiryTimeGTE applies the GTE predicate on the "OTPExpiryTime" field.
func OTPExpiryTimeGTE(v time.Time) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldGTE(FieldOTPExpiryTime, v))
}

// OTPExpiryTimeLT applies the LT predicate on the "OTPExpiryTime" field.
func OTPExpiryTimeLT(v time.Time) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldLT(FieldOTPExpiryTime, v))
}

// OTPExpiryTimeLTE applies the LTE predicate on the "OTPExpiryTime" field.
func OTPExpiryTimeLTE(v time.Time) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldLTE(FieldOTPExpiryTime, v))
}

// OTPExpiryTimeIsNil applies the IsNil predicate on the "OTPExpiryTime" field.
func OTPExpiryTimeIsNil() predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldIsNull(FieldOTPExpiryTime))
}

// OTPExpiryTimeNotNil applies the NotNil predicate on the "OTPExpiryTime" field.
func OTPExpiryTimeNotNil() predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldNotNull(FieldOTPExpiryTime))
}

// OTPRemarksEQ applies the EQ predicate on the "OTPRemarks" field.
func OTPRemarksEQ(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldEQ(FieldOTPRemarks, v))
}

// OTPRemarksNEQ applies the NEQ predicate on the "OTPRemarks" field.
func OTPRemarksNEQ(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldNEQ(FieldOTPRemarks, v))
}

// OTPRemarksIn applies the In predicate on the "OTPRemarks" field.
func OTPRemarksIn(vs ...string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldIn(FieldOTPRemarks, vs...))
}

// OTPRemarksNotIn applies the NotIn predicate on the "OTPRemarks" field.
func OTPRemarksNotIn(vs ...string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldNotIn(FieldOTPRemarks, vs...))
}

// OTPRemarksGT applies the GT predicate on the "OTPRemarks" field.
func OTPRemarksGT(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldGT(FieldOTPRemarks, v))
}

// OTPRemarksGTE applies the GTE predicate on the "OTPRemarks" field.
func OTPRemarksGTE(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldGTE(FieldOTPRemarks, v))
}

// OTPRemarksLT applies the LT predicate on the "OTPRemarks" field.
func OTPRemarksLT(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldLT(FieldOTPRemarks, v))
}

// OTPRemarksLTE applies the LTE predicate on the "OTPRemarks" field.
func OTPRemarksLTE(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldLTE(FieldOTPRemarks, v))
}

// OTPRemarksContains applies the Contains predicate on the "OTPRemarks" field.
func OTPRemarksContains(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldContains(FieldOTPRemarks, v))
}

// OTPRemarksHasPrefix applies the HasPrefix predicate on the "OTPRemarks" field.
func OTPRemarksHasPrefix(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldHasPrefix(FieldOTPRemarks, v))
}

// OTPRemarksHasSuffix applies the HasSuffix predicate on the "OTPRemarks" field.
func OTPRemarksHasSuffix(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldHasSuffix(FieldOTPRemarks, v))
}

// OTPRemarksIsNil applies the IsNil predicate on the "OTPRemarks" field.
func OTPRemarksIsNil() predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldIsNull(FieldOTPRemarks))
}

// OTPRemarksNotNil applies the NotNil predicate on the "OTPRemarks" field.
func OTPRemarksNotNil() predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldNotNull(FieldOTPRemarks))
}

// OTPRemarksEqualFold applies the EqualFold predicate on the "OTPRemarks" field.
func OTPRemarksEqualFold(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldEqualFold(FieldOTPRemarks, v))
}

// OTPRemarksContainsFold applies the ContainsFold predicate on the "OTPRemarks" field.
func OTPRemarksContainsFold(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldContainsFold(FieldOTPRemarks, v))
}

// CreatedByIdEQ applies the EQ predicate on the "CreatedById" field.
func CreatedByIdEQ(v int64) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldEQ(FieldCreatedById, v))
}

// CreatedByIdNEQ applies the NEQ predicate on the "CreatedById" field.
func CreatedByIdNEQ(v int64) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldNEQ(FieldCreatedById, v))
}

// CreatedByIdIn applies the In predicate on the "CreatedById" field.
func CreatedByIdIn(vs ...int64) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldIn(FieldCreatedById, vs...))
}

// CreatedByIdNotIn applies the NotIn predicate on the "CreatedById" field.
func CreatedByIdNotIn(vs ...int64) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldNotIn(FieldCreatedById, vs...))
}

// CreatedByIdGT applies the GT predicate on the "CreatedById" field.
func CreatedByIdGT(v int64) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldGT(FieldCreatedById, v))
}

// CreatedByIdGTE applies the GTE predicate on the "CreatedById" field.
func CreatedByIdGTE(v int64) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldGTE(FieldCreatedById, v))
}

// CreatedByIdLT applies the LT predicate on the "CreatedById" field.
func CreatedByIdLT(v int64) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldLT(FieldCreatedById, v))
}

// CreatedByIdLTE applies the LTE predicate on the "CreatedById" field.
func CreatedByIdLTE(v int64) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldLTE(FieldCreatedById, v))
}

// CreatedByIdIsNil applies the IsNil predicate on the "CreatedById" field.
func CreatedByIdIsNil() predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldIsNull(FieldCreatedById))
}

// CreatedByIdNotNil applies the NotNil predicate on the "CreatedById" field.
func CreatedByIdNotNil() predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldNotNull(FieldCreatedById))
}

// CreatedByUserNameEQ applies the EQ predicate on the "CreatedByUserName" field.
func CreatedByUserNameEQ(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldEQ(FieldCreatedByUserName, v))
}

// CreatedByUserNameNEQ applies the NEQ predicate on the "CreatedByUserName" field.
func CreatedByUserNameNEQ(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldNEQ(FieldCreatedByUserName, v))
}

// CreatedByUserNameIn applies the In predicate on the "CreatedByUserName" field.
func CreatedByUserNameIn(vs ...string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldIn(FieldCreatedByUserName, vs...))
}

// CreatedByUserNameNotIn applies the NotIn predicate on the "CreatedByUserName" field.
func CreatedByUserNameNotIn(vs ...string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldNotIn(FieldCreatedByUserName, vs...))
}

// CreatedByUserNameGT applies the GT predicate on the "CreatedByUserName" field.
func CreatedByUserNameGT(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldGT(FieldCreatedByUserName, v))
}

// CreatedByUserNameGTE applies the GTE predicate on the "CreatedByUserName" field.
func CreatedByUserNameGTE(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldGTE(FieldCreatedByUserName, v))
}

// CreatedByUserNameLT applies the LT predicate on the "CreatedByUserName" field.
func CreatedByUserNameLT(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldLT(FieldCreatedByUserName, v))
}

// CreatedByUserNameLTE applies the LTE predicate on the "CreatedByUserName" field.
func CreatedByUserNameLTE(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldLTE(FieldCreatedByUserName, v))
}

// CreatedByUserNameContains applies the Contains predicate on the "CreatedByUserName" field.
func CreatedByUserNameContains(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldContains(FieldCreatedByUserName, v))
}

// CreatedByUserNameHasPrefix applies the HasPrefix predicate on the "CreatedByUserName" field.
func CreatedByUserNameHasPrefix(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldHasPrefix(FieldCreatedByUserName, v))
}

// CreatedByUserNameHasSuffix applies the HasSuffix predicate on the "CreatedByUserName" field.
func CreatedByUserNameHasSuffix(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldHasSuffix(FieldCreatedByUserName, v))
}

// CreatedByUserNameIsNil applies the IsNil predicate on the "CreatedByUserName" field.
func CreatedByUserNameIsNil() predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldIsNull(FieldCreatedByUserName))
}

// CreatedByUserNameNotNil applies the NotNil predicate on the "CreatedByUserName" field.
func CreatedByUserNameNotNil() predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldNotNull(FieldCreatedByUserName))
}

// CreatedByUserNameEqualFold applies the EqualFold predicate on the "CreatedByUserName" field.
func CreatedByUserNameEqualFold(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldEqualFold(FieldCreatedByUserName, v))
}

// CreatedByUserNameContainsFold applies the ContainsFold predicate on the "CreatedByUserName" field.
func CreatedByUserNameContainsFold(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldContainsFold(FieldCreatedByUserName, v))
}

// CreatedByEmpIdEQ applies the EQ predicate on the "CreatedByEmpId" field.
func CreatedByEmpIdEQ(v int64) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldEQ(FieldCreatedByEmpId, v))
}

// CreatedByEmpIdNEQ applies the NEQ predicate on the "CreatedByEmpId" field.
func CreatedByEmpIdNEQ(v int64) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldNEQ(FieldCreatedByEmpId, v))
}

// CreatedByEmpIdIn applies the In predicate on the "CreatedByEmpId" field.
func CreatedByEmpIdIn(vs ...int64) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldIn(FieldCreatedByEmpId, vs...))
}

// CreatedByEmpIdNotIn applies the NotIn predicate on the "CreatedByEmpId" field.
func CreatedByEmpIdNotIn(vs ...int64) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldNotIn(FieldCreatedByEmpId, vs...))
}

// CreatedByEmpIdGT applies the GT predicate on the "CreatedByEmpId" field.
func CreatedByEmpIdGT(v int64) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldGT(FieldCreatedByEmpId, v))
}

// CreatedByEmpIdGTE applies the GTE predicate on the "CreatedByEmpId" field.
func CreatedByEmpIdGTE(v int64) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldGTE(FieldCreatedByEmpId, v))
}

// CreatedByEmpIdLT applies the LT predicate on the "CreatedByEmpId" field.
func CreatedByEmpIdLT(v int64) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldLT(FieldCreatedByEmpId, v))
}

// CreatedByEmpIdLTE applies the LTE predicate on the "CreatedByEmpId" field.
func CreatedByEmpIdLTE(v int64) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldLTE(FieldCreatedByEmpId, v))
}

// CreatedByEmpIdIsNil applies the IsNil predicate on the "CreatedByEmpId" field.
func CreatedByEmpIdIsNil() predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldIsNull(FieldCreatedByEmpId))
}

// CreatedByEmpIdNotNil applies the NotNil predicate on the "CreatedByEmpId" field.
func CreatedByEmpIdNotNil() predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldNotNull(FieldCreatedByEmpId))
}

// CreatedByDesignationEQ applies the EQ predicate on the "CreatedByDesignation" field.
func CreatedByDesignationEQ(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldEQ(FieldCreatedByDesignation, v))
}

// CreatedByDesignationNEQ applies the NEQ predicate on the "CreatedByDesignation" field.
func CreatedByDesignationNEQ(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldNEQ(FieldCreatedByDesignation, v))
}

// CreatedByDesignationIn applies the In predicate on the "CreatedByDesignation" field.
func CreatedByDesignationIn(vs ...string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldIn(FieldCreatedByDesignation, vs...))
}

// CreatedByDesignationNotIn applies the NotIn predicate on the "CreatedByDesignation" field.
func CreatedByDesignationNotIn(vs ...string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldNotIn(FieldCreatedByDesignation, vs...))
}

// CreatedByDesignationGT applies the GT predicate on the "CreatedByDesignation" field.
func CreatedByDesignationGT(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldGT(FieldCreatedByDesignation, v))
}

// CreatedByDesignationGTE applies the GTE predicate on the "CreatedByDesignation" field.
func CreatedByDesignationGTE(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldGTE(FieldCreatedByDesignation, v))
}

// CreatedByDesignationLT applies the LT predicate on the "CreatedByDesignation" field.
func CreatedByDesignationLT(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldLT(FieldCreatedByDesignation, v))
}

// CreatedByDesignationLTE applies the LTE predicate on the "CreatedByDesignation" field.
func CreatedByDesignationLTE(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldLTE(FieldCreatedByDesignation, v))
}

// CreatedByDesignationContains applies the Contains predicate on the "CreatedByDesignation" field.
func CreatedByDesignationContains(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldContains(FieldCreatedByDesignation, v))
}

// CreatedByDesignationHasPrefix applies the HasPrefix predicate on the "CreatedByDesignation" field.
func CreatedByDesignationHasPrefix(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldHasPrefix(FieldCreatedByDesignation, v))
}

// CreatedByDesignationHasSuffix applies the HasSuffix predicate on the "CreatedByDesignation" field.
func CreatedByDesignationHasSuffix(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldHasSuffix(FieldCreatedByDesignation, v))
}

// CreatedByDesignationIsNil applies the IsNil predicate on the "CreatedByDesignation" field.
func CreatedByDesignationIsNil() predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldIsNull(FieldCreatedByDesignation))
}

// CreatedByDesignationNotNil applies the NotNil predicate on the "CreatedByDesignation" field.
func CreatedByDesignationNotNil() predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldNotNull(FieldCreatedByDesignation))
}

// CreatedByDesignationEqualFold applies the EqualFold predicate on the "CreatedByDesignation" field.
func CreatedByDesignationEqualFold(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldEqualFold(FieldCreatedByDesignation, v))
}

// CreatedByDesignationContainsFold applies the ContainsFold predicate on the "CreatedByDesignation" field.
func CreatedByDesignationContainsFold(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldContainsFold(FieldCreatedByDesignation, v))
}

// CreatedDateEQ applies the EQ predicate on the "CreatedDate" field.
func CreatedDateEQ(v time.Time) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldEQ(FieldCreatedDate, v))
}

// CreatedDateNEQ applies the NEQ predicate on the "CreatedDate" field.
func CreatedDateNEQ(v time.Time) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldNEQ(FieldCreatedDate, v))
}

// CreatedDateIn applies the In predicate on the "CreatedDate" field.
func CreatedDateIn(vs ...time.Time) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldIn(FieldCreatedDate, vs...))
}

// CreatedDateNotIn applies the NotIn predicate on the "CreatedDate" field.
func CreatedDateNotIn(vs ...time.Time) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldNotIn(FieldCreatedDate, vs...))
}

// CreatedDateGT applies the GT predicate on the "CreatedDate" field.
func CreatedDateGT(v time.Time) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldGT(FieldCreatedDate, v))
}

// CreatedDateGTE applies the GTE predicate on the "CreatedDate" field.
func CreatedDateGTE(v time.Time) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldGTE(FieldCreatedDate, v))
}

// CreatedDateLT applies the LT predicate on the "CreatedDate" field.
func CreatedDateLT(v time.Time) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldLT(FieldCreatedDate, v))
}

// CreatedDateLTE applies the LTE predicate on the "CreatedDate" field.
func CreatedDateLTE(v time.Time) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldLTE(FieldCreatedDate, v))
}

// CreatedDateIsNil applies the IsNil predicate on the "CreatedDate" field.
func CreatedDateIsNil() predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldIsNull(FieldCreatedDate))
}

// CreatedDateNotNil applies the NotNil predicate on the "CreatedDate" field.
func CreatedDateNotNil() predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldNotNull(FieldCreatedDate))
}

// DeletedByIdEQ applies the EQ predicate on the "DeletedById" field.
func DeletedByIdEQ(v int64) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldEQ(FieldDeletedById, v))
}

// DeletedByIdNEQ applies the NEQ predicate on the "DeletedById" field.
func DeletedByIdNEQ(v int64) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldNEQ(FieldDeletedById, v))
}

// DeletedByIdIn applies the In predicate on the "DeletedById" field.
func DeletedByIdIn(vs ...int64) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldIn(FieldDeletedById, vs...))
}

// DeletedByIdNotIn applies the NotIn predicate on the "DeletedById" field.
func DeletedByIdNotIn(vs ...int64) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldNotIn(FieldDeletedById, vs...))
}

// DeletedByIdGT applies the GT predicate on the "DeletedById" field.
func DeletedByIdGT(v int64) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldGT(FieldDeletedById, v))
}

// DeletedByIdGTE applies the GTE predicate on the "DeletedById" field.
func DeletedByIdGTE(v int64) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldGTE(FieldDeletedById, v))
}

// DeletedByIdLT applies the LT predicate on the "DeletedById" field.
func DeletedByIdLT(v int64) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldLT(FieldDeletedById, v))
}

// DeletedByIdLTE applies the LTE predicate on the "DeletedById" field.
func DeletedByIdLTE(v int64) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldLTE(FieldDeletedById, v))
}

// DeletedByIdIsNil applies the IsNil predicate on the "DeletedById" field.
func DeletedByIdIsNil() predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldIsNull(FieldDeletedById))
}

// DeletedByIdNotNil applies the NotNil predicate on the "DeletedById" field.
func DeletedByIdNotNil() predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldNotNull(FieldDeletedById))
}

// DeletedByUserNameEQ applies the EQ predicate on the "DeletedByUserName" field.
func DeletedByUserNameEQ(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldEQ(FieldDeletedByUserName, v))
}

// DeletedByUserNameNEQ applies the NEQ predicate on the "DeletedByUserName" field.
func DeletedByUserNameNEQ(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldNEQ(FieldDeletedByUserName, v))
}

// DeletedByUserNameIn applies the In predicate on the "DeletedByUserName" field.
func DeletedByUserNameIn(vs ...string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldIn(FieldDeletedByUserName, vs...))
}

// DeletedByUserNameNotIn applies the NotIn predicate on the "DeletedByUserName" field.
func DeletedByUserNameNotIn(vs ...string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldNotIn(FieldDeletedByUserName, vs...))
}

// DeletedByUserNameGT applies the GT predicate on the "DeletedByUserName" field.
func DeletedByUserNameGT(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldGT(FieldDeletedByUserName, v))
}

// DeletedByUserNameGTE applies the GTE predicate on the "DeletedByUserName" field.
func DeletedByUserNameGTE(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldGTE(FieldDeletedByUserName, v))
}

// DeletedByUserNameLT applies the LT predicate on the "DeletedByUserName" field.
func DeletedByUserNameLT(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldLT(FieldDeletedByUserName, v))
}

// DeletedByUserNameLTE applies the LTE predicate on the "DeletedByUserName" field.
func DeletedByUserNameLTE(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldLTE(FieldDeletedByUserName, v))
}

// DeletedByUserNameContains applies the Contains predicate on the "DeletedByUserName" field.
func DeletedByUserNameContains(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldContains(FieldDeletedByUserName, v))
}

// DeletedByUserNameHasPrefix applies the HasPrefix predicate on the "DeletedByUserName" field.
func DeletedByUserNameHasPrefix(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldHasPrefix(FieldDeletedByUserName, v))
}

// DeletedByUserNameHasSuffix applies the HasSuffix predicate on the "DeletedByUserName" field.
func DeletedByUserNameHasSuffix(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldHasSuffix(FieldDeletedByUserName, v))
}

// DeletedByUserNameIsNil applies the IsNil predicate on the "DeletedByUserName" field.
func DeletedByUserNameIsNil() predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldIsNull(FieldDeletedByUserName))
}

// DeletedByUserNameNotNil applies the NotNil predicate on the "DeletedByUserName" field.
func DeletedByUserNameNotNil() predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldNotNull(FieldDeletedByUserName))
}

// DeletedByUserNameEqualFold applies the EqualFold predicate on the "DeletedByUserName" field.
func DeletedByUserNameEqualFold(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldEqualFold(FieldDeletedByUserName, v))
}

// DeletedByUserNameContainsFold applies the ContainsFold predicate on the "DeletedByUserName" field.
func DeletedByUserNameContainsFold(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldContainsFold(FieldDeletedByUserName, v))
}

// DeletedByEmpIdEQ applies the EQ predicate on the "DeletedByEmpId" field.
func DeletedByEmpIdEQ(v int64) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldEQ(FieldDeletedByEmpId, v))
}

// DeletedByEmpIdNEQ applies the NEQ predicate on the "DeletedByEmpId" field.
func DeletedByEmpIdNEQ(v int64) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldNEQ(FieldDeletedByEmpId, v))
}

// DeletedByEmpIdIn applies the In predicate on the "DeletedByEmpId" field.
func DeletedByEmpIdIn(vs ...int64) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldIn(FieldDeletedByEmpId, vs...))
}

// DeletedByEmpIdNotIn applies the NotIn predicate on the "DeletedByEmpId" field.
func DeletedByEmpIdNotIn(vs ...int64) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldNotIn(FieldDeletedByEmpId, vs...))
}

// DeletedByEmpIdGT applies the GT predicate on the "DeletedByEmpId" field.
func DeletedByEmpIdGT(v int64) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldGT(FieldDeletedByEmpId, v))
}

// DeletedByEmpIdGTE applies the GTE predicate on the "DeletedByEmpId" field.
func DeletedByEmpIdGTE(v int64) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldGTE(FieldDeletedByEmpId, v))
}

// DeletedByEmpIdLT applies the LT predicate on the "DeletedByEmpId" field.
func DeletedByEmpIdLT(v int64) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldLT(FieldDeletedByEmpId, v))
}

// DeletedByEmpIdLTE applies the LTE predicate on the "DeletedByEmpId" field.
func DeletedByEmpIdLTE(v int64) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldLTE(FieldDeletedByEmpId, v))
}

// DeletedByEmpIdIsNil applies the IsNil predicate on the "DeletedByEmpId" field.
func DeletedByEmpIdIsNil() predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldIsNull(FieldDeletedByEmpId))
}

// DeletedByEmpIdNotNil applies the NotNil predicate on the "DeletedByEmpId" field.
func DeletedByEmpIdNotNil() predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldNotNull(FieldDeletedByEmpId))
}

// DeletedByDesignationEQ applies the EQ predicate on the "DeletedByDesignation" field.
func DeletedByDesignationEQ(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldEQ(FieldDeletedByDesignation, v))
}

// DeletedByDesignationNEQ applies the NEQ predicate on the "DeletedByDesignation" field.
func DeletedByDesignationNEQ(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldNEQ(FieldDeletedByDesignation, v))
}

// DeletedByDesignationIn applies the In predicate on the "DeletedByDesignation" field.
func DeletedByDesignationIn(vs ...string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldIn(FieldDeletedByDesignation, vs...))
}

// DeletedByDesignationNotIn applies the NotIn predicate on the "DeletedByDesignation" field.
func DeletedByDesignationNotIn(vs ...string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldNotIn(FieldDeletedByDesignation, vs...))
}

// DeletedByDesignationGT applies the GT predicate on the "DeletedByDesignation" field.
func DeletedByDesignationGT(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldGT(FieldDeletedByDesignation, v))
}

// DeletedByDesignationGTE applies the GTE predicate on the "DeletedByDesignation" field.
func DeletedByDesignationGTE(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldGTE(FieldDeletedByDesignation, v))
}

// DeletedByDesignationLT applies the LT predicate on the "DeletedByDesignation" field.
func DeletedByDesignationLT(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldLT(FieldDeletedByDesignation, v))
}

// DeletedByDesignationLTE applies the LTE predicate on the "DeletedByDesignation" field.
func DeletedByDesignationLTE(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldLTE(FieldDeletedByDesignation, v))
}

// DeletedByDesignationContains applies the Contains predicate on the "DeletedByDesignation" field.
func DeletedByDesignationContains(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldContains(FieldDeletedByDesignation, v))
}

// DeletedByDesignationHasPrefix applies the HasPrefix predicate on the "DeletedByDesignation" field.
func DeletedByDesignationHasPrefix(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldHasPrefix(FieldDeletedByDesignation, v))
}

// DeletedByDesignationHasSuffix applies the HasSuffix predicate on the "DeletedByDesignation" field.
func DeletedByDesignationHasSuffix(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldHasSuffix(FieldDeletedByDesignation, v))
}

// DeletedByDesignationIsNil applies the IsNil predicate on the "DeletedByDesignation" field.
func DeletedByDesignationIsNil() predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldIsNull(FieldDeletedByDesignation))
}

// DeletedByDesignationNotNil applies the NotNil predicate on the "DeletedByDesignation" field.
func DeletedByDesignationNotNil() predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldNotNull(FieldDeletedByDesignation))
}

// DeletedByDesignationEqualFold applies the EqualFold predicate on the "DeletedByDesignation" field.
func DeletedByDesignationEqualFold(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldEqualFold(FieldDeletedByDesignation, v))
}

// DeletedByDesignationContainsFold applies the ContainsFold predicate on the "DeletedByDesignation" field.
func DeletedByDesignationContainsFold(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldContainsFold(FieldDeletedByDesignation, v))
}

// DeletedDateEQ applies the EQ predicate on the "DeletedDate" field.
func DeletedDateEQ(v time.Time) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldEQ(FieldDeletedDate, v))
}

// DeletedDateNEQ applies the NEQ predicate on the "DeletedDate" field.
func DeletedDateNEQ(v time.Time) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldNEQ(FieldDeletedDate, v))
}

// DeletedDateIn applies the In predicate on the "DeletedDate" field.
func DeletedDateIn(vs ...time.Time) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldIn(FieldDeletedDate, vs...))
}

// DeletedDateNotIn applies the NotIn predicate on the "DeletedDate" field.
func DeletedDateNotIn(vs ...time.Time) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldNotIn(FieldDeletedDate, vs...))
}

// DeletedDateGT applies the GT predicate on the "DeletedDate" field.
func DeletedDateGT(v time.Time) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldGT(FieldDeletedDate, v))
}

// DeletedDateGTE applies the GTE predicate on the "DeletedDate" field.
func DeletedDateGTE(v time.Time) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldGTE(FieldDeletedDate, v))
}

// DeletedDateLT applies the LT predicate on the "DeletedDate" field.
func DeletedDateLT(v time.Time) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldLT(FieldDeletedDate, v))
}

// DeletedDateLTE applies the LTE predicate on the "DeletedDate" field.
func DeletedDateLTE(v time.Time) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldLTE(FieldDeletedDate, v))
}

// DeletedDateIsNil applies the IsNil predicate on the "DeletedDate" field.
func DeletedDateIsNil() predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldIsNull(FieldDeletedDate))
}

// DeletedDateNotNil applies the NotNil predicate on the "DeletedDate" field.
func DeletedDateNotNil() predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldNotNull(FieldDeletedDate))
}

// ModifiedByIdEQ applies the EQ predicate on the "ModifiedById" field.
func ModifiedByIdEQ(v int) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldEQ(FieldModifiedById, v))
}

// ModifiedByIdNEQ applies the NEQ predicate on the "ModifiedById" field.
func ModifiedByIdNEQ(v int) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldNEQ(FieldModifiedById, v))
}

// ModifiedByIdIn applies the In predicate on the "ModifiedById" field.
func ModifiedByIdIn(vs ...int) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldIn(FieldModifiedById, vs...))
}

// ModifiedByIdNotIn applies the NotIn predicate on the "ModifiedById" field.
func ModifiedByIdNotIn(vs ...int) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldNotIn(FieldModifiedById, vs...))
}

// ModifiedByIdGT applies the GT predicate on the "ModifiedById" field.
func ModifiedByIdGT(v int) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldGT(FieldModifiedById, v))
}

// ModifiedByIdGTE applies the GTE predicate on the "ModifiedById" field.
func ModifiedByIdGTE(v int) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldGTE(FieldModifiedById, v))
}

// ModifiedByIdLT applies the LT predicate on the "ModifiedById" field.
func ModifiedByIdLT(v int) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldLT(FieldModifiedById, v))
}

// ModifiedByIdLTE applies the LTE predicate on the "ModifiedById" field.
func ModifiedByIdLTE(v int) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldLTE(FieldModifiedById, v))
}

// ModifiedByIdIsNil applies the IsNil predicate on the "ModifiedById" field.
func ModifiedByIdIsNil() predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldIsNull(FieldModifiedById))
}

// ModifiedByIdNotNil applies the NotNil predicate on the "ModifiedById" field.
func ModifiedByIdNotNil() predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldNotNull(FieldModifiedById))
}

// ModifiedByUserNameEQ applies the EQ predicate on the "ModifiedByUserName" field.
func ModifiedByUserNameEQ(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldEQ(FieldModifiedByUserName, v))
}

// ModifiedByUserNameNEQ applies the NEQ predicate on the "ModifiedByUserName" field.
func ModifiedByUserNameNEQ(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldNEQ(FieldModifiedByUserName, v))
}

// ModifiedByUserNameIn applies the In predicate on the "ModifiedByUserName" field.
func ModifiedByUserNameIn(vs ...string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldIn(FieldModifiedByUserName, vs...))
}

// ModifiedByUserNameNotIn applies the NotIn predicate on the "ModifiedByUserName" field.
func ModifiedByUserNameNotIn(vs ...string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldNotIn(FieldModifiedByUserName, vs...))
}

// ModifiedByUserNameGT applies the GT predicate on the "ModifiedByUserName" field.
func ModifiedByUserNameGT(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldGT(FieldModifiedByUserName, v))
}

// ModifiedByUserNameGTE applies the GTE predicate on the "ModifiedByUserName" field.
func ModifiedByUserNameGTE(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldGTE(FieldModifiedByUserName, v))
}

// ModifiedByUserNameLT applies the LT predicate on the "ModifiedByUserName" field.
func ModifiedByUserNameLT(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldLT(FieldModifiedByUserName, v))
}

// ModifiedByUserNameLTE applies the LTE predicate on the "ModifiedByUserName" field.
func ModifiedByUserNameLTE(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldLTE(FieldModifiedByUserName, v))
}

// ModifiedByUserNameContains applies the Contains predicate on the "ModifiedByUserName" field.
func ModifiedByUserNameContains(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldContains(FieldModifiedByUserName, v))
}

// ModifiedByUserNameHasPrefix applies the HasPrefix predicate on the "ModifiedByUserName" field.
func ModifiedByUserNameHasPrefix(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldHasPrefix(FieldModifiedByUserName, v))
}

// ModifiedByUserNameHasSuffix applies the HasSuffix predicate on the "ModifiedByUserName" field.
func ModifiedByUserNameHasSuffix(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldHasSuffix(FieldModifiedByUserName, v))
}

// ModifiedByUserNameIsNil applies the IsNil predicate on the "ModifiedByUserName" field.
func ModifiedByUserNameIsNil() predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldIsNull(FieldModifiedByUserName))
}

// ModifiedByUserNameNotNil applies the NotNil predicate on the "ModifiedByUserName" field.
func ModifiedByUserNameNotNil() predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldNotNull(FieldModifiedByUserName))
}

// ModifiedByUserNameEqualFold applies the EqualFold predicate on the "ModifiedByUserName" field.
func ModifiedByUserNameEqualFold(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldEqualFold(FieldModifiedByUserName, v))
}

// ModifiedByUserNameContainsFold applies the ContainsFold predicate on the "ModifiedByUserName" field.
func ModifiedByUserNameContainsFold(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldContainsFold(FieldModifiedByUserName, v))
}

// ModifiedByEmpIdEQ applies the EQ predicate on the "ModifiedByEmpId" field.
func ModifiedByEmpIdEQ(v int64) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldEQ(FieldModifiedByEmpId, v))
}

// ModifiedByEmpIdNEQ applies the NEQ predicate on the "ModifiedByEmpId" field.
func ModifiedByEmpIdNEQ(v int64) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldNEQ(FieldModifiedByEmpId, v))
}

// ModifiedByEmpIdIn applies the In predicate on the "ModifiedByEmpId" field.
func ModifiedByEmpIdIn(vs ...int64) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldIn(FieldModifiedByEmpId, vs...))
}

// ModifiedByEmpIdNotIn applies the NotIn predicate on the "ModifiedByEmpId" field.
func ModifiedByEmpIdNotIn(vs ...int64) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldNotIn(FieldModifiedByEmpId, vs...))
}

// ModifiedByEmpIdGT applies the GT predicate on the "ModifiedByEmpId" field.
func ModifiedByEmpIdGT(v int64) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldGT(FieldModifiedByEmpId, v))
}

// ModifiedByEmpIdGTE applies the GTE predicate on the "ModifiedByEmpId" field.
func ModifiedByEmpIdGTE(v int64) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldGTE(FieldModifiedByEmpId, v))
}

// ModifiedByEmpIdLT applies the LT predicate on the "ModifiedByEmpId" field.
func ModifiedByEmpIdLT(v int64) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldLT(FieldModifiedByEmpId, v))
}

// ModifiedByEmpIdLTE applies the LTE predicate on the "ModifiedByEmpId" field.
func ModifiedByEmpIdLTE(v int64) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldLTE(FieldModifiedByEmpId, v))
}

// ModifiedByEmpIdIsNil applies the IsNil predicate on the "ModifiedByEmpId" field.
func ModifiedByEmpIdIsNil() predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldIsNull(FieldModifiedByEmpId))
}

// ModifiedByEmpIdNotNil applies the NotNil predicate on the "ModifiedByEmpId" field.
func ModifiedByEmpIdNotNil() predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldNotNull(FieldModifiedByEmpId))
}

// ModifiedByDesignantionEQ applies the EQ predicate on the "ModifiedByDesignantion" field.
func ModifiedByDesignantionEQ(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldEQ(FieldModifiedByDesignantion, v))
}

// ModifiedByDesignantionNEQ applies the NEQ predicate on the "ModifiedByDesignantion" field.
func ModifiedByDesignantionNEQ(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldNEQ(FieldModifiedByDesignantion, v))
}

// ModifiedByDesignantionIn applies the In predicate on the "ModifiedByDesignantion" field.
func ModifiedByDesignantionIn(vs ...string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldIn(FieldModifiedByDesignantion, vs...))
}

// ModifiedByDesignantionNotIn applies the NotIn predicate on the "ModifiedByDesignantion" field.
func ModifiedByDesignantionNotIn(vs ...string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldNotIn(FieldModifiedByDesignantion, vs...))
}

// ModifiedByDesignantionGT applies the GT predicate on the "ModifiedByDesignantion" field.
func ModifiedByDesignantionGT(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldGT(FieldModifiedByDesignantion, v))
}

// ModifiedByDesignantionGTE applies the GTE predicate on the "ModifiedByDesignantion" field.
func ModifiedByDesignantionGTE(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldGTE(FieldModifiedByDesignantion, v))
}

// ModifiedByDesignantionLT applies the LT predicate on the "ModifiedByDesignantion" field.
func ModifiedByDesignantionLT(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldLT(FieldModifiedByDesignantion, v))
}

// ModifiedByDesignantionLTE applies the LTE predicate on the "ModifiedByDesignantion" field.
func ModifiedByDesignantionLTE(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldLTE(FieldModifiedByDesignantion, v))
}

// ModifiedByDesignantionContains applies the Contains predicate on the "ModifiedByDesignantion" field.
func ModifiedByDesignantionContains(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldContains(FieldModifiedByDesignantion, v))
}

// ModifiedByDesignantionHasPrefix applies the HasPrefix predicate on the "ModifiedByDesignantion" field.
func ModifiedByDesignantionHasPrefix(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldHasPrefix(FieldModifiedByDesignantion, v))
}

// ModifiedByDesignantionHasSuffix applies the HasSuffix predicate on the "ModifiedByDesignantion" field.
func ModifiedByDesignantionHasSuffix(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldHasSuffix(FieldModifiedByDesignantion, v))
}

// ModifiedByDesignantionIsNil applies the IsNil predicate on the "ModifiedByDesignantion" field.
func ModifiedByDesignantionIsNil() predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldIsNull(FieldModifiedByDesignantion))
}

// ModifiedByDesignantionNotNil applies the NotNil predicate on the "ModifiedByDesignantion" field.
func ModifiedByDesignantionNotNil() predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldNotNull(FieldModifiedByDesignantion))
}

// ModifiedByDesignantionEqualFold applies the EqualFold predicate on the "ModifiedByDesignantion" field.
func ModifiedByDesignantionEqualFold(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldEqualFold(FieldModifiedByDesignantion, v))
}

// ModifiedByDesignantionContainsFold applies the ContainsFold predicate on the "ModifiedByDesignantion" field.
func ModifiedByDesignantionContainsFold(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldContainsFold(FieldModifiedByDesignantion, v))
}

// ModifiedDateEQ applies the EQ predicate on the "ModifiedDate" field.
func ModifiedDateEQ(v time.Time) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldEQ(FieldModifiedDate, v))
}

// ModifiedDateNEQ applies the NEQ predicate on the "ModifiedDate" field.
func ModifiedDateNEQ(v time.Time) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldNEQ(FieldModifiedDate, v))
}

// ModifiedDateIn applies the In predicate on the "ModifiedDate" field.
func ModifiedDateIn(vs ...time.Time) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldIn(FieldModifiedDate, vs...))
}

// ModifiedDateNotIn applies the NotIn predicate on the "ModifiedDate" field.
func ModifiedDateNotIn(vs ...time.Time) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldNotIn(FieldModifiedDate, vs...))
}

// ModifiedDateGT applies the GT predicate on the "ModifiedDate" field.
func ModifiedDateGT(v time.Time) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldGT(FieldModifiedDate, v))
}

// ModifiedDateGTE applies the GTE predicate on the "ModifiedDate" field.
func ModifiedDateGTE(v time.Time) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldGTE(FieldModifiedDate, v))
}

// ModifiedDateLT applies the LT predicate on the "ModifiedDate" field.
func ModifiedDateLT(v time.Time) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldLT(FieldModifiedDate, v))
}

// ModifiedDateLTE applies the LTE predicate on the "ModifiedDate" field.
func ModifiedDateLTE(v time.Time) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldLTE(FieldModifiedDate, v))
}

// ModifiedDateIsNil applies the IsNil predicate on the "ModifiedDate" field.
func ModifiedDateIsNil() predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldIsNull(FieldModifiedDate))
}

// ModifiedDateNotNil applies the NotNil predicate on the "ModifiedDate" field.
func ModifiedDateNotNil() predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldNotNull(FieldModifiedDate))
}

// DeletedByEQ applies the EQ predicate on the "DeletedBy" field.
func DeletedByEQ(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldEQ(FieldDeletedBy, v))
}

// DeletedByNEQ applies the NEQ predicate on the "DeletedBy" field.
func DeletedByNEQ(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldNEQ(FieldDeletedBy, v))
}

// DeletedByIn applies the In predicate on the "DeletedBy" field.
func DeletedByIn(vs ...string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldIn(FieldDeletedBy, vs...))
}

// DeletedByNotIn applies the NotIn predicate on the "DeletedBy" field.
func DeletedByNotIn(vs ...string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldNotIn(FieldDeletedBy, vs...))
}

// DeletedByGT applies the GT predicate on the "DeletedBy" field.
func DeletedByGT(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldGT(FieldDeletedBy, v))
}

// DeletedByGTE applies the GTE predicate on the "DeletedBy" field.
func DeletedByGTE(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldGTE(FieldDeletedBy, v))
}

// DeletedByLT applies the LT predicate on the "DeletedBy" field.
func DeletedByLT(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldLT(FieldDeletedBy, v))
}

// DeletedByLTE applies the LTE predicate on the "DeletedBy" field.
func DeletedByLTE(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldLTE(FieldDeletedBy, v))
}

// DeletedByContains applies the Contains predicate on the "DeletedBy" field.
func DeletedByContains(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldContains(FieldDeletedBy, v))
}

// DeletedByHasPrefix applies the HasPrefix predicate on the "DeletedBy" field.
func DeletedByHasPrefix(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldHasPrefix(FieldDeletedBy, v))
}

// DeletedByHasSuffix applies the HasSuffix predicate on the "DeletedBy" field.
func DeletedByHasSuffix(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldHasSuffix(FieldDeletedBy, v))
}

// DeletedByIsNil applies the IsNil predicate on the "DeletedBy" field.
func DeletedByIsNil() predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldIsNull(FieldDeletedBy))
}

// DeletedByNotNil applies the NotNil predicate on the "DeletedBy" field.
func DeletedByNotNil() predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldNotNull(FieldDeletedBy))
}

// DeletedByEqualFold applies the EqualFold predicate on the "DeletedBy" field.
func DeletedByEqualFold(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldEqualFold(FieldDeletedBy, v))
}

// DeletedByContainsFold applies the ContainsFold predicate on the "DeletedBy" field.
func DeletedByContainsFold(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldContainsFold(FieldDeletedBy, v))
}

// DeletedbyidEQ applies the EQ predicate on the "Deletedbyid" field.
func DeletedbyidEQ(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldEQ(FieldDeletedbyid, v))
}

// DeletedbyidNEQ applies the NEQ predicate on the "Deletedbyid" field.
func DeletedbyidNEQ(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldNEQ(FieldDeletedbyid, v))
}

// DeletedbyidIn applies the In predicate on the "Deletedbyid" field.
func DeletedbyidIn(vs ...string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldIn(FieldDeletedbyid, vs...))
}

// DeletedbyidNotIn applies the NotIn predicate on the "Deletedbyid" field.
func DeletedbyidNotIn(vs ...string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldNotIn(FieldDeletedbyid, vs...))
}

// DeletedbyidGT applies the GT predicate on the "Deletedbyid" field.
func DeletedbyidGT(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldGT(FieldDeletedbyid, v))
}

// DeletedbyidGTE applies the GTE predicate on the "Deletedbyid" field.
func DeletedbyidGTE(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldGTE(FieldDeletedbyid, v))
}

// DeletedbyidLT applies the LT predicate on the "Deletedbyid" field.
func DeletedbyidLT(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldLT(FieldDeletedbyid, v))
}

// DeletedbyidLTE applies the LTE predicate on the "Deletedbyid" field.
func DeletedbyidLTE(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldLTE(FieldDeletedbyid, v))
}

// DeletedbyidContains applies the Contains predicate on the "Deletedbyid" field.
func DeletedbyidContains(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldContains(FieldDeletedbyid, v))
}

// DeletedbyidHasPrefix applies the HasPrefix predicate on the "Deletedbyid" field.
func DeletedbyidHasPrefix(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldHasPrefix(FieldDeletedbyid, v))
}

// DeletedbyidHasSuffix applies the HasSuffix predicate on the "Deletedbyid" field.
func DeletedbyidHasSuffix(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldHasSuffix(FieldDeletedbyid, v))
}

// DeletedbyidIsNil applies the IsNil predicate on the "Deletedbyid" field.
func DeletedbyidIsNil() predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldIsNull(FieldDeletedbyid))
}

// DeletedbyidNotNil applies the NotNil predicate on the "Deletedbyid" field.
func DeletedbyidNotNil() predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldNotNull(FieldDeletedbyid))
}

// DeletedbyidEqualFold applies the EqualFold predicate on the "Deletedbyid" field.
func DeletedbyidEqualFold(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldEqualFold(FieldDeletedbyid, v))
}

// DeletedbyidContainsFold applies the ContainsFold predicate on the "Deletedbyid" field.
func DeletedbyidContainsFold(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldContainsFold(FieldDeletedbyid, v))
}

// NewPasswordRequestEQ applies the EQ predicate on the "NewPasswordRequest" field.
func NewPasswordRequestEQ(v bool) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldEQ(FieldNewPasswordRequest, v))
}

// NewPasswordRequestNEQ applies the NEQ predicate on the "NewPasswordRequest" field.
func NewPasswordRequestNEQ(v bool) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldNEQ(FieldNewPasswordRequest, v))
}

// NewPasswordRequestIsNil applies the IsNil predicate on the "NewPasswordRequest" field.
func NewPasswordRequestIsNil() predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldIsNull(FieldNewPasswordRequest))
}

// NewPasswordRequestNotNil applies the NotNil predicate on the "NewPasswordRequest" field.
func NewPasswordRequestNotNil() predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldNotNull(FieldNewPasswordRequest))
}

// EventTimeEQ applies the EQ predicate on the "EventTime" field.
func EventTimeEQ(v time.Time) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldEQ(FieldEventTime, v))
}

// EventTimeNEQ applies the NEQ predicate on the "EventTime" field.
func EventTimeNEQ(v time.Time) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldNEQ(FieldEventTime, v))
}

// EventTimeIn applies the In predicate on the "EventTime" field.
func EventTimeIn(vs ...time.Time) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldIn(FieldEventTime, vs...))
}

// EventTimeNotIn applies the NotIn predicate on the "EventTime" field.
func EventTimeNotIn(vs ...time.Time) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldNotIn(FieldEventTime, vs...))
}

// EventTimeGT applies the GT predicate on the "EventTime" field.
func EventTimeGT(v time.Time) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldGT(FieldEventTime, v))
}

// EventTimeGTE applies the GTE predicate on the "EventTime" field.
func EventTimeGTE(v time.Time) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldGTE(FieldEventTime, v))
}

// EventTimeLT applies the LT predicate on the "EventTime" field.
func EventTimeLT(v time.Time) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldLT(FieldEventTime, v))
}

// EventTimeLTE applies the LTE predicate on the "EventTime" field.
func EventTimeLTE(v time.Time) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldLTE(FieldEventTime, v))
}

// EventTimeIsNil applies the IsNil predicate on the "EventTime" field.
func EventTimeIsNil() predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldIsNull(FieldEventTime))
}

// EventTimeNotNil applies the NotNil predicate on the "EventTime" field.
func EventTimeNotNil() predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldNotNull(FieldEventTime))
}

// UUIDEQ applies the EQ predicate on the "UUID" field.
func UUIDEQ(v int64) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldEQ(FieldUUID, v))
}

// UUIDNEQ applies the NEQ predicate on the "UUID" field.
func UUIDNEQ(v int64) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldNEQ(FieldUUID, v))
}

// UUIDIn applies the In predicate on the "UUID" field.
func UUIDIn(vs ...int64) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldIn(FieldUUID, vs...))
}

// UUIDNotIn applies the NotIn predicate on the "UUID" field.
func UUIDNotIn(vs ...int64) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldNotIn(FieldUUID, vs...))
}

// UUIDGT applies the GT predicate on the "UUID" field.
func UUIDGT(v int64) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldGT(FieldUUID, v))
}

// UUIDGTE applies the GTE predicate on the "UUID" field.
func UUIDGTE(v int64) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldGTE(FieldUUID, v))
}

// UUIDLT applies the LT predicate on the "UUID" field.
func UUIDLT(v int64) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldLT(FieldUUID, v))
}

// UUIDLTE applies the LTE predicate on the "UUID" field.
func UUIDLTE(v int64) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldLTE(FieldUUID, v))
}

// UUIDIsNil applies the IsNil predicate on the "UUID" field.
func UUIDIsNil() predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldIsNull(FieldUUID))
}

// UUIDNotNil applies the NotNil predicate on the "UUID" field.
func UUIDNotNil() predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldNotNull(FieldUUID))
}

// UpdatedbyEQ applies the EQ predicate on the "Updatedby" field.
func UpdatedbyEQ(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldEQ(FieldUpdatedby, v))
}

// UpdatedbyNEQ applies the NEQ predicate on the "Updatedby" field.
func UpdatedbyNEQ(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldNEQ(FieldUpdatedby, v))
}

// UpdatedbyIn applies the In predicate on the "Updatedby" field.
func UpdatedbyIn(vs ...string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldIn(FieldUpdatedby, vs...))
}

// UpdatedbyNotIn applies the NotIn predicate on the "Updatedby" field.
func UpdatedbyNotIn(vs ...string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldNotIn(FieldUpdatedby, vs...))
}

// UpdatedbyGT applies the GT predicate on the "Updatedby" field.
func UpdatedbyGT(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldGT(FieldUpdatedby, v))
}

// UpdatedbyGTE applies the GTE predicate on the "Updatedby" field.
func UpdatedbyGTE(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldGTE(FieldUpdatedby, v))
}

// UpdatedbyLT applies the LT predicate on the "Updatedby" field.
func UpdatedbyLT(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldLT(FieldUpdatedby, v))
}

// UpdatedbyLTE applies the LTE predicate on the "Updatedby" field.
func UpdatedbyLTE(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldLTE(FieldUpdatedby, v))
}

// UpdatedbyContains applies the Contains predicate on the "Updatedby" field.
func UpdatedbyContains(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldContains(FieldUpdatedby, v))
}

// UpdatedbyHasPrefix applies the HasPrefix predicate on the "Updatedby" field.
func UpdatedbyHasPrefix(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldHasPrefix(FieldUpdatedby, v))
}

// UpdatedbyHasSuffix applies the HasSuffix predicate on the "Updatedby" field.
func UpdatedbyHasSuffix(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldHasSuffix(FieldUpdatedby, v))
}

// UpdatedbyIsNil applies the IsNil predicate on the "Updatedby" field.
func UpdatedbyIsNil() predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldIsNull(FieldUpdatedby))
}

// UpdatedbyNotNil applies the NotNil predicate on the "Updatedby" field.
func UpdatedbyNotNil() predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldNotNull(FieldUpdatedby))
}

// UpdatedbyEqualFold applies the EqualFold predicate on the "Updatedby" field.
func UpdatedbyEqualFold(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldEqualFold(FieldUpdatedby, v))
}

// UpdatedbyContainsFold applies the ContainsFold predicate on the "Updatedby" field.
func UpdatedbyContainsFold(v string) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldContainsFold(FieldUpdatedby, v))
}

// UpdatedDateEQ applies the EQ predicate on the "updatedDate" field.
func UpdatedDateEQ(v time.Time) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldEQ(FieldUpdatedDate, v))
}

// UpdatedDateNEQ applies the NEQ predicate on the "updatedDate" field.
func UpdatedDateNEQ(v time.Time) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldNEQ(FieldUpdatedDate, v))
}

// UpdatedDateIn applies the In predicate on the "updatedDate" field.
func UpdatedDateIn(vs ...time.Time) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldIn(FieldUpdatedDate, vs...))
}

// UpdatedDateNotIn applies the NotIn predicate on the "updatedDate" field.
func UpdatedDateNotIn(vs ...time.Time) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldNotIn(FieldUpdatedDate, vs...))
}

// UpdatedDateGT applies the GT predicate on the "updatedDate" field.
func UpdatedDateGT(v time.Time) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldGT(FieldUpdatedDate, v))
}

// UpdatedDateGTE applies the GTE predicate on the "updatedDate" field.
func UpdatedDateGTE(v time.Time) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldGTE(FieldUpdatedDate, v))
}

// UpdatedDateLT applies the LT predicate on the "updatedDate" field.
func UpdatedDateLT(v time.Time) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldLT(FieldUpdatedDate, v))
}

// UpdatedDateLTE applies the LTE predicate on the "updatedDate" field.
func UpdatedDateLTE(v time.Time) predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldLTE(FieldUpdatedDate, v))
}

// UpdatedDateIsNil applies the IsNil predicate on the "updatedDate" field.
func UpdatedDateIsNil() predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldIsNull(FieldUpdatedDate))
}

// UpdatedDateNotNil applies the NotNil predicate on the "updatedDate" field.
func UpdatedDateNotNil() predicate.AdminMaster {
	return predicate.AdminMaster(sql.FieldNotNull(FieldUpdatedDate))
}

// HasLogData applies the HasEdge predicate on the "LogData" edge.
func HasLogData() predicate.AdminMaster {
	return predicate.AdminMaster(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, LogDataTable, LogDataColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasLogDataWith applies the HasEdge predicate on the "LogData" edge with a given conditions (other predicates).
func HasLogDataWith(preds ...predicate.Logs) predicate.AdminMaster {
	return predicate.AdminMaster(func(s *sql.Selector) {
		step := newLogDataStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.AdminMaster) predicate.AdminMaster {
	return predicate.AdminMaster(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.AdminMaster) predicate.AdminMaster {
	return predicate.AdminMaster(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.AdminMaster) predicate.AdminMaster {
	return predicate.AdminMaster(func(s *sql.Selector) {
		p(s.Not())
	})
}
