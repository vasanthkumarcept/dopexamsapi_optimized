// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"recruit/ent/employeeposts"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// EmployeePosts is the model entity for the EmployeePosts schema.
type EmployeePosts struct {
	config `json:"-"`
	// ID of the ent.
	ID int32 `json:"id,omitempty"`
	// PostCode holds the value of the "PostCode" field.
	PostCode string `json:"PostCode,omitempty"`
	// PostDescription holds the value of the "PostDescription" field.
	PostDescription string `json:"PostDescription,omitempty"`
	// Group holds the value of the "Group" field.
	Group string `json:"Group,omitempty"`
	// PayLevel holds the value of the "PayLevel" field.
	PayLevel string `json:"PayLevel,omitempty"`
	// Scale holds the value of the "Scale" field.
	Scale string `json:"Scale,omitempty"`
	// BaseCadreFlag holds the value of the "BaseCadreFlag" field.
	BaseCadreFlag bool `json:"BaseCadreFlag,omitempty"`
	// OrderNumber holds the value of the "OrderNumber" field.
	OrderNumber string `json:"OrderNumber,omitempty"`
	// Status holds the value of the "Status" field.
	Status string `json:"Status,omitempty"`
	// CreatedById holds the value of the "CreatedById" field.
	CreatedById int32 `json:"CreatedById,omitempty"`
	// CreatedByUserName holds the value of the "CreatedByUserName" field.
	CreatedByUserName string `json:"CreatedByUserName,omitempty"`
	// CreatedByEmployeeId holds the value of the "CreatedByEmployeeId" field.
	CreatedByEmployeeId string `json:"CreatedByEmployeeId,omitempty"`
	// CreatedByDesignation holds the value of the "CreatedByDesignation" field.
	CreatedByDesignation string `json:"CreatedByDesignation,omitempty"`
	// CreatedDate holds the value of the "CreatedDate" field.
	CreatedDate time.Time `json:"CreatedDate,omitempty"`
	// VerifiedById holds the value of the "VerifiedById" field.
	VerifiedById int64 `json:"VerifiedById,omitempty"`
	// VerifiedByUserName holds the value of the "VerifiedByUserName" field.
	VerifiedByUserName string `json:"VerifiedByUserName,omitempty"`
	// VerifiedByEmployeeId holds the value of the "VerifiedByEmployeeId" field.
	VerifiedByEmployeeId string `json:"VerifiedByEmployeeId,omitempty"`
	// VerifiedByDesignation holds the value of the "VerifiedByDesignation" field.
	VerifiedByDesignation string `json:"VerifiedByDesignation,omitempty"`
	// VerifiedDate holds the value of the "VerifiedDate" field.
	VerifiedDate time.Time `json:"VerifiedDate,omitempty"`
	// DeletedById holds the value of the "DeletedById" field.
	DeletedById int64 `json:"DeletedById,omitempty"`
	// DeletedByUserName holds the value of the "DeletedByUserName" field.
	DeletedByUserName string `json:"DeletedByUserName,omitempty"`
	// DeletedByEmployeeId holds the value of the "DeletedByEmployeeId" field.
	DeletedByEmployeeId string `json:"DeletedByEmployeeId,omitempty"`
	// DeletedByDesignation holds the value of the "DeletedByDesignation" field.
	DeletedByDesignation string `json:"DeletedByDesignation,omitempty"`
	// DeletedDate holds the value of the "DeletedDate" field.
	DeletedDate time.Time `json:"DeletedDate,omitempty"`
	// GroupDescription holds the value of the "GroupDescription" field.
	GroupDescription string `json:"GroupDescription,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the EmployeePostsQuery when eager-loading is set.
	Edges                               EmployeePostsEdges `json:"edges"`
	eligibility_master_post_eligibility *int32
	selectValues                        sql.SelectValues
}

// EmployeePostsEdges holds the relations/edges for other nodes in the graph.
type EmployeePostsEdges struct {
	// EmpPosts holds the value of the emp_posts edge.
	EmpPosts []*Employees `json:"emp_posts,omitempty"`
	// PostEligibility holds the value of the PostEligibility edge.
	PostEligibility []*EligibilityMaster `json:"PostEligibility,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// EmpPostsOrErr returns the EmpPosts value or an error if the edge
// was not loaded in eager-loading.
func (e EmployeePostsEdges) EmpPostsOrErr() ([]*Employees, error) {
	if e.loadedTypes[0] {
		return e.EmpPosts, nil
	}
	return nil, &NotLoadedError{edge: "emp_posts"}
}

// PostEligibilityOrErr returns the PostEligibility value or an error if the edge
// was not loaded in eager-loading.
func (e EmployeePostsEdges) PostEligibilityOrErr() ([]*EligibilityMaster, error) {
	if e.loadedTypes[1] {
		return e.PostEligibility, nil
	}
	return nil, &NotLoadedError{edge: "PostEligibility"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*EmployeePosts) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case employeeposts.FieldBaseCadreFlag:
			values[i] = new(sql.NullBool)
		case employeeposts.FieldID, employeeposts.FieldCreatedById, employeeposts.FieldVerifiedById, employeeposts.FieldDeletedById:
			values[i] = new(sql.NullInt64)
		case employeeposts.FieldPostCode, employeeposts.FieldPostDescription, employeeposts.FieldGroup, employeeposts.FieldPayLevel, employeeposts.FieldScale, employeeposts.FieldOrderNumber, employeeposts.FieldStatus, employeeposts.FieldCreatedByUserName, employeeposts.FieldCreatedByEmployeeId, employeeposts.FieldCreatedByDesignation, employeeposts.FieldVerifiedByUserName, employeeposts.FieldVerifiedByEmployeeId, employeeposts.FieldVerifiedByDesignation, employeeposts.FieldDeletedByUserName, employeeposts.FieldDeletedByEmployeeId, employeeposts.FieldDeletedByDesignation, employeeposts.FieldGroupDescription:
			values[i] = new(sql.NullString)
		case employeeposts.FieldCreatedDate, employeeposts.FieldVerifiedDate, employeeposts.FieldDeletedDate:
			values[i] = new(sql.NullTime)
		case employeeposts.ForeignKeys[0]: // eligibility_master_post_eligibility
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the EmployeePosts fields.
func (ep *EmployeePosts) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case employeeposts.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ep.ID = int32(value.Int64)
		case employeeposts.FieldPostCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field PostCode", values[i])
			} else if value.Valid {
				ep.PostCode = value.String
			}
		case employeeposts.FieldPostDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field PostDescription", values[i])
			} else if value.Valid {
				ep.PostDescription = value.String
			}
		case employeeposts.FieldGroup:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Group", values[i])
			} else if value.Valid {
				ep.Group = value.String
			}
		case employeeposts.FieldPayLevel:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field PayLevel", values[i])
			} else if value.Valid {
				ep.PayLevel = value.String
			}
		case employeeposts.FieldScale:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Scale", values[i])
			} else if value.Valid {
				ep.Scale = value.String
			}
		case employeeposts.FieldBaseCadreFlag:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field BaseCadreFlag", values[i])
			} else if value.Valid {
				ep.BaseCadreFlag = value.Bool
			}
		case employeeposts.FieldOrderNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field OrderNumber", values[i])
			} else if value.Valid {
				ep.OrderNumber = value.String
			}
		case employeeposts.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Status", values[i])
			} else if value.Valid {
				ep.Status = value.String
			}
		case employeeposts.FieldCreatedById:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field CreatedById", values[i])
			} else if value.Valid {
				ep.CreatedById = int32(value.Int64)
			}
		case employeeposts.FieldCreatedByUserName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field CreatedByUserName", values[i])
			} else if value.Valid {
				ep.CreatedByUserName = value.String
			}
		case employeeposts.FieldCreatedByEmployeeId:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field CreatedByEmployeeId", values[i])
			} else if value.Valid {
				ep.CreatedByEmployeeId = value.String
			}
		case employeeposts.FieldCreatedByDesignation:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field CreatedByDesignation", values[i])
			} else if value.Valid {
				ep.CreatedByDesignation = value.String
			}
		case employeeposts.FieldCreatedDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field CreatedDate", values[i])
			} else if value.Valid {
				ep.CreatedDate = value.Time
			}
		case employeeposts.FieldVerifiedById:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field VerifiedById", values[i])
			} else if value.Valid {
				ep.VerifiedById = value.Int64
			}
		case employeeposts.FieldVerifiedByUserName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field VerifiedByUserName", values[i])
			} else if value.Valid {
				ep.VerifiedByUserName = value.String
			}
		case employeeposts.FieldVerifiedByEmployeeId:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field VerifiedByEmployeeId", values[i])
			} else if value.Valid {
				ep.VerifiedByEmployeeId = value.String
			}
		case employeeposts.FieldVerifiedByDesignation:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field VerifiedByDesignation", values[i])
			} else if value.Valid {
				ep.VerifiedByDesignation = value.String
			}
		case employeeposts.FieldVerifiedDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field VerifiedDate", values[i])
			} else if value.Valid {
				ep.VerifiedDate = value.Time
			}
		case employeeposts.FieldDeletedById:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field DeletedById", values[i])
			} else if value.Valid {
				ep.DeletedById = value.Int64
			}
		case employeeposts.FieldDeletedByUserName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field DeletedByUserName", values[i])
			} else if value.Valid {
				ep.DeletedByUserName = value.String
			}
		case employeeposts.FieldDeletedByEmployeeId:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field DeletedByEmployeeId", values[i])
			} else if value.Valid {
				ep.DeletedByEmployeeId = value.String
			}
		case employeeposts.FieldDeletedByDesignation:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field DeletedByDesignation", values[i])
			} else if value.Valid {
				ep.DeletedByDesignation = value.String
			}
		case employeeposts.FieldDeletedDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field DeletedDate", values[i])
			} else if value.Valid {
				ep.DeletedDate = value.Time
			}
		case employeeposts.FieldGroupDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field GroupDescription", values[i])
			} else if value.Valid {
				ep.GroupDescription = value.String
			}
		case employeeposts.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field eligibility_master_post_eligibility", value)
			} else if value.Valid {
				ep.eligibility_master_post_eligibility = new(int32)
				*ep.eligibility_master_post_eligibility = int32(value.Int64)
			}
		default:
			ep.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the EmployeePosts.
// This includes values selected through modifiers, order, etc.
func (ep *EmployeePosts) Value(name string) (ent.Value, error) {
	return ep.selectValues.Get(name)
}

// QueryEmpPosts queries the "emp_posts" edge of the EmployeePosts entity.
func (ep *EmployeePosts) QueryEmpPosts() *EmployeesQuery {
	return NewEmployeePostsClient(ep.config).QueryEmpPosts(ep)
}

// QueryPostEligibility queries the "PostEligibility" edge of the EmployeePosts entity.
func (ep *EmployeePosts) QueryPostEligibility() *EligibilityMasterQuery {
	return NewEmployeePostsClient(ep.config).QueryPostEligibility(ep)
}

// Update returns a builder for updating this EmployeePosts.
// Note that you need to call EmployeePosts.Unwrap() before calling this method if this EmployeePosts
// was returned from a transaction, and the transaction was committed or rolled back.
func (ep *EmployeePosts) Update() *EmployeePostsUpdateOne {
	return NewEmployeePostsClient(ep.config).UpdateOne(ep)
}

// Unwrap unwraps the EmployeePosts entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ep *EmployeePosts) Unwrap() *EmployeePosts {
	_tx, ok := ep.config.driver.(*txDriver)
	if !ok {
		panic("ent: EmployeePosts is not a transactional entity")
	}
	ep.config.driver = _tx.drv
	return ep
}

// String implements the fmt.Stringer.
func (ep *EmployeePosts) String() string {
	var builder strings.Builder
	builder.WriteString("EmployeePosts(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ep.ID))
	builder.WriteString("PostCode=")
	builder.WriteString(ep.PostCode)
	builder.WriteString(", ")
	builder.WriteString("PostDescription=")
	builder.WriteString(ep.PostDescription)
	builder.WriteString(", ")
	builder.WriteString("Group=")
	builder.WriteString(ep.Group)
	builder.WriteString(", ")
	builder.WriteString("PayLevel=")
	builder.WriteString(ep.PayLevel)
	builder.WriteString(", ")
	builder.WriteString("Scale=")
	builder.WriteString(ep.Scale)
	builder.WriteString(", ")
	builder.WriteString("BaseCadreFlag=")
	builder.WriteString(fmt.Sprintf("%v", ep.BaseCadreFlag))
	builder.WriteString(", ")
	builder.WriteString("OrderNumber=")
	builder.WriteString(ep.OrderNumber)
	builder.WriteString(", ")
	builder.WriteString("Status=")
	builder.WriteString(ep.Status)
	builder.WriteString(", ")
	builder.WriteString("CreatedById=")
	builder.WriteString(fmt.Sprintf("%v", ep.CreatedById))
	builder.WriteString(", ")
	builder.WriteString("CreatedByUserName=")
	builder.WriteString(ep.CreatedByUserName)
	builder.WriteString(", ")
	builder.WriteString("CreatedByEmployeeId=")
	builder.WriteString(ep.CreatedByEmployeeId)
	builder.WriteString(", ")
	builder.WriteString("CreatedByDesignation=")
	builder.WriteString(ep.CreatedByDesignation)
	builder.WriteString(", ")
	builder.WriteString("CreatedDate=")
	builder.WriteString(ep.CreatedDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("VerifiedById=")
	builder.WriteString(fmt.Sprintf("%v", ep.VerifiedById))
	builder.WriteString(", ")
	builder.WriteString("VerifiedByUserName=")
	builder.WriteString(ep.VerifiedByUserName)
	builder.WriteString(", ")
	builder.WriteString("VerifiedByEmployeeId=")
	builder.WriteString(ep.VerifiedByEmployeeId)
	builder.WriteString(", ")
	builder.WriteString("VerifiedByDesignation=")
	builder.WriteString(ep.VerifiedByDesignation)
	builder.WriteString(", ")
	builder.WriteString("VerifiedDate=")
	builder.WriteString(ep.VerifiedDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("DeletedById=")
	builder.WriteString(fmt.Sprintf("%v", ep.DeletedById))
	builder.WriteString(", ")
	builder.WriteString("DeletedByUserName=")
	builder.WriteString(ep.DeletedByUserName)
	builder.WriteString(", ")
	builder.WriteString("DeletedByEmployeeId=")
	builder.WriteString(ep.DeletedByEmployeeId)
	builder.WriteString(", ")
	builder.WriteString("DeletedByDesignation=")
	builder.WriteString(ep.DeletedByDesignation)
	builder.WriteString(", ")
	builder.WriteString("DeletedDate=")
	builder.WriteString(ep.DeletedDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("GroupDescription=")
	builder.WriteString(ep.GroupDescription)
	builder.WriteByte(')')
	return builder.String()
}

// EmployeePostsSlice is a parsable slice of EmployeePosts.
type EmployeePostsSlice []*EmployeePosts
