// Code generated by ent, DO NOT EDIT.

package user

import (
	"fmt"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the user type in the database.
	Label = "user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldEmployeedID holds the string denoting the employeedid field in the database.
	FieldEmployeedID = "employeed_id"
	// FieldIDVerified holds the string denoting the idverified field in the database.
	FieldIDVerified = "id_verified"
	// FieldIDRemStatus holds the string denoting the idremstatus field in the database.
	FieldIDRemStatus = "id_rem_status"
	// FieldIDRemarks holds the string denoting the idremarks field in the database.
	FieldIDRemarks = "id_remarks"
	// FieldEmployeedName holds the string denoting the employeedname field in the database.
	FieldEmployeedName = "employeed_name"
	// FieldNameVerified holds the string denoting the nameverified field in the database.
	FieldNameVerified = "name_verified"
	// FieldNameRemStatus holds the string denoting the nameremstatus field in the database.
	FieldNameRemStatus = "name_rem_status"
	// FieldNameRemarks holds the string denoting the nameremarks field in the database.
	FieldNameRemarks = "name_remarks"
	// FieldDOB holds the string denoting the dob field in the database.
	FieldDOB = "dob"
	// FieldDOBVerified holds the string denoting the dobverified field in the database.
	FieldDOBVerified = "dob_verified"
	// FieldDOBRemStatus holds the string denoting the dobremstatus field in the database.
	FieldDOBRemStatus = "dob_rem_status"
	// FieldDOBRemarks holds the string denoting the dobremarks field in the database.
	FieldDOBRemarks = "dob_remarks"
	// FieldGender holds the string denoting the gender field in the database.
	FieldGender = "gender"
	// FieldGenderVerified holds the string denoting the genderverified field in the database.
	FieldGenderVerified = "gender_verified"
	// FieldGenderRemStatus holds the string denoting the genderremstatus field in the database.
	FieldGenderRemStatus = "gender_rem_status"
	// FieldGenderRemarks holds the string denoting the genderremarks field in the database.
	FieldGenderRemarks = "gender_remarks"
	// FieldCadreid holds the string denoting the cadreid field in the database.
	FieldCadreid = "cadreid"
	// FieldCadreidVerified holds the string denoting the cadreidverified field in the database.
	FieldCadreidVerified = "cadreid_verified"
	// FieldCadreidRemStatus holds the string denoting the cadreidremstatus field in the database.
	FieldCadreidRemStatus = "cadreid_rem_status"
	// FieldCadreidRemarks holds the string denoting the cadreidremarks field in the database.
	FieldCadreidRemarks = "cadreid_remarks"
	// FieldOfficeID holds the string denoting the officeid field in the database.
	FieldOfficeID = "office_id"
	// FieldOfficeIDVerified holds the string denoting the officeidverified field in the database.
	FieldOfficeIDVerified = "office_id_verified"
	// FieldOfficeIDRemStatus holds the string denoting the officeidremstatus field in the database.
	FieldOfficeIDRemStatus = "office_id_rem_status"
	// FieldOfficeIDRemarks holds the string denoting the officeidremarks field in the database.
	FieldOfficeIDRemarks = "office_id_remarks"
	// FieldPH holds the string denoting the ph field in the database.
	FieldPH = "ph"
	// FieldPHVerified holds the string denoting the phverified field in the database.
	FieldPHVerified = "ph_verified"
	// FieldPHRemStatus holds the string denoting the phremstatus field in the database.
	FieldPHRemStatus = "ph_rem_status"
	// FieldPHRemarks holds the string denoting the phremarks field in the database.
	FieldPHRemarks = "ph_remarks"
	// FieldPHDetails holds the string denoting the phdetails field in the database.
	FieldPHDetails = "ph_details"
	// FieldPHDetailsVerified holds the string denoting the phdetailsverified field in the database.
	FieldPHDetailsVerified = "ph_details_verified"
	// FieldPHDetailsRemStatus holds the string denoting the phdetailsremstatus field in the database.
	FieldPHDetailsRemStatus = "ph_details_rem_status"
	// FieldPHDetailsRemarks holds the string denoting the phdetailsremarks field in the database.
	FieldPHDetailsRemarks = "ph_details_remarks"
	// FieldAPSWorking holds the string denoting the apsworking field in the database.
	FieldAPSWorking = "aps_working"
	// FieldAPSWorkingVerified holds the string denoting the apsworkingverified field in the database.
	FieldAPSWorkingVerified = "aps_working_verified"
	// FieldAPSWorkingRemStatus holds the string denoting the apsworkingremstatus field in the database.
	FieldAPSWorkingRemStatus = "aps_working_rem_status"
	// FieldAPSWorkingRemarks holds the string denoting the apsworkingremarks field in the database.
	FieldAPSWorkingRemarks = "aps_working_remarks"
	// FieldProfilestatus holds the string denoting the profilestatus field in the database.
	FieldProfilestatus = "profilestatus"
	// Table holds the table name of the user in the database.
	Table = "users"
)

// Columns holds all SQL columns for user fields.
var Columns = []string{
	FieldID,
	FieldEmployeedID,
	FieldIDVerified,
	FieldIDRemStatus,
	FieldIDRemarks,
	FieldEmployeedName,
	FieldNameVerified,
	FieldNameRemStatus,
	FieldNameRemarks,
	FieldDOB,
	FieldDOBVerified,
	FieldDOBRemStatus,
	FieldDOBRemarks,
	FieldGender,
	FieldGenderVerified,
	FieldGenderRemStatus,
	FieldGenderRemarks,
	FieldCadreid,
	FieldCadreidVerified,
	FieldCadreidRemStatus,
	FieldCadreidRemarks,
	FieldOfficeID,
	FieldOfficeIDVerified,
	FieldOfficeIDRemStatus,
	FieldOfficeIDRemarks,
	FieldPH,
	FieldPHVerified,
	FieldPHRemStatus,
	FieldPHRemarks,
	FieldPHDetails,
	FieldPHDetailsVerified,
	FieldPHDetailsRemStatus,
	FieldPHDetailsRemarks,
	FieldAPSWorking,
	FieldAPSWorkingVerified,
	FieldAPSWorkingRemStatus,
	FieldAPSWorkingRemarks,
	FieldProfilestatus,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultIDVerified holds the default value on creation for the "IDVerified" field.
	DefaultIDVerified bool
	// DefaultIDRemStatus holds the default value on creation for the "IDRemStatus" field.
	DefaultIDRemStatus bool
	// DefaultNameVerified holds the default value on creation for the "nameVerified" field.
	DefaultNameVerified bool
	// DefaultNameRemStatus holds the default value on creation for the "nameRemStatus" field.
	DefaultNameRemStatus bool
	// DefaultDOBVerified holds the default value on creation for the "DOBVerified" field.
	DefaultDOBVerified bool
	// DefaultDOBRemStatus holds the default value on creation for the "DOBRemStatus" field.
	DefaultDOBRemStatus bool
	// DefaultGenderVerified holds the default value on creation for the "genderVerified" field.
	DefaultGenderVerified bool
	// DefaultGenderRemStatus holds the default value on creation for the "genderRemStatus" field.
	DefaultGenderRemStatus bool
	// DefaultCadreidVerified holds the default value on creation for the "cadreidVerified" field.
	DefaultCadreidVerified bool
	// DefaultCadreidRemStatus holds the default value on creation for the "cadreidRemStatus" field.
	DefaultCadreidRemStatus bool
	// DefaultOfficeIDVerified holds the default value on creation for the "officeIDVerified" field.
	DefaultOfficeIDVerified bool
	// DefaultOfficeIDRemStatus holds the default value on creation for the "officeIDRemStatus" field.
	DefaultOfficeIDRemStatus bool
	// DefaultPHVerified holds the default value on creation for the "PHVerified" field.
	DefaultPHVerified bool
	// DefaultPHRemStatus holds the default value on creation for the "PHRemStatus" field.
	DefaultPHRemStatus bool
	// DefaultPHDetailsVerified holds the default value on creation for the "PHDetailsVerified" field.
	DefaultPHDetailsVerified bool
	// DefaultPHDetailsRemStatus holds the default value on creation for the "PHDetailsRemStatus" field.
	DefaultPHDetailsRemStatus bool
	// DefaultAPSWorkingVerified holds the default value on creation for the "APSWorkingVerified" field.
	DefaultAPSWorkingVerified bool
	// DefaultAPSWorkingRemStatus holds the default value on creation for the "APSWorkingRemStatus" field.
	DefaultAPSWorkingRemStatus bool
	// DefaultProfilestatus holds the default value on creation for the "profilestatus" field.
	DefaultProfilestatus bool
)

// Gender defines the type for the "Gender" enum field.
type Gender string

// Gender values.
const (
	GenderMale   Gender = "Male"
	GenderFemale Gender = "Female"
)

func (_gender Gender) String() string {
	return string(_gender)
}

// GenderValidator is a validator for the "Gender" field enum values. It is called by the builders before save.
func GenderValidator(_gender Gender) error {
	switch _gender {
	case GenderMale, GenderFemale:
		return nil
	default:
		return fmt.Errorf("user: invalid enum value for Gender field: %q", _gender)
	}
}

// OrderOption defines the ordering options for the User queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByEmployeedID orders the results by the EmployeedID field.
func ByEmployeedID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmployeedID, opts...).ToFunc()
}

// ByIDVerified orders the results by the IDVerified field.
func ByIDVerified(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIDVerified, opts...).ToFunc()
}

// ByIDRemStatus orders the results by the IDRemStatus field.
func ByIDRemStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIDRemStatus, opts...).ToFunc()
}

// ByIDRemarks orders the results by the IDRemarks field.
func ByIDRemarks(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIDRemarks, opts...).ToFunc()
}

// ByEmployeedName orders the results by the EmployeedName field.
func ByEmployeedName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmployeedName, opts...).ToFunc()
}

// ByNameVerified orders the results by the nameVerified field.
func ByNameVerified(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNameVerified, opts...).ToFunc()
}

// ByNameRemStatus orders the results by the nameRemStatus field.
func ByNameRemStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNameRemStatus, opts...).ToFunc()
}

// ByNameRemarks orders the results by the nameRemarks field.
func ByNameRemarks(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNameRemarks, opts...).ToFunc()
}

// ByDOB orders the results by the DOB field.
func ByDOB(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDOB, opts...).ToFunc()
}

// ByDOBVerified orders the results by the DOBVerified field.
func ByDOBVerified(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDOBVerified, opts...).ToFunc()
}

// ByDOBRemStatus orders the results by the DOBRemStatus field.
func ByDOBRemStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDOBRemStatus, opts...).ToFunc()
}

// ByDOBRemarks orders the results by the DOBRemarks field.
func ByDOBRemarks(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDOBRemarks, opts...).ToFunc()
}

// ByGender orders the results by the Gender field.
func ByGender(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGender, opts...).ToFunc()
}

// ByGenderVerified orders the results by the genderVerified field.
func ByGenderVerified(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGenderVerified, opts...).ToFunc()
}

// ByGenderRemStatus orders the results by the genderRemStatus field.
func ByGenderRemStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGenderRemStatus, opts...).ToFunc()
}

// ByGenderRemarks orders the results by the genderRemarks field.
func ByGenderRemarks(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGenderRemarks, opts...).ToFunc()
}

// ByCadreid orders the results by the Cadreid field.
func ByCadreid(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCadreid, opts...).ToFunc()
}

// ByCadreidVerified orders the results by the cadreidVerified field.
func ByCadreidVerified(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCadreidVerified, opts...).ToFunc()
}

// ByCadreidRemStatus orders the results by the cadreidRemStatus field.
func ByCadreidRemStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCadreidRemStatus, opts...).ToFunc()
}

// ByCadreidRemarks orders the results by the cadreidRemarks field.
func ByCadreidRemarks(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCadreidRemarks, opts...).ToFunc()
}

// ByOfficeID orders the results by the OfficeID field.
func ByOfficeID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOfficeID, opts...).ToFunc()
}

// ByOfficeIDVerified orders the results by the officeIDVerified field.
func ByOfficeIDVerified(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOfficeIDVerified, opts...).ToFunc()
}

// ByOfficeIDRemStatus orders the results by the officeIDRemStatus field.
func ByOfficeIDRemStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOfficeIDRemStatus, opts...).ToFunc()
}

// ByOfficeIDRemarks orders the results by the officeIDRemarks field.
func ByOfficeIDRemarks(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOfficeIDRemarks, opts...).ToFunc()
}

// ByPH orders the results by the PH field.
func ByPH(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPH, opts...).ToFunc()
}

// ByPHVerified orders the results by the PHVerified field.
func ByPHVerified(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPHVerified, opts...).ToFunc()
}

// ByPHRemStatus orders the results by the PHRemStatus field.
func ByPHRemStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPHRemStatus, opts...).ToFunc()
}

// ByPHRemarks orders the results by the PHRemarks field.
func ByPHRemarks(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPHRemarks, opts...).ToFunc()
}

// ByPHDetails orders the results by the PHDetails field.
func ByPHDetails(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPHDetails, opts...).ToFunc()
}

// ByPHDetailsVerified orders the results by the PHDetailsVerified field.
func ByPHDetailsVerified(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPHDetailsVerified, opts...).ToFunc()
}

// ByPHDetailsRemStatus orders the results by the PHDetailsRemStatus field.
func ByPHDetailsRemStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPHDetailsRemStatus, opts...).ToFunc()
}

// ByPHDetailsRemarks orders the results by the PHDetailsRemarks field.
func ByPHDetailsRemarks(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPHDetailsRemarks, opts...).ToFunc()
}

// ByAPSWorking orders the results by the APSWorking field.
func ByAPSWorking(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAPSWorking, opts...).ToFunc()
}

// ByAPSWorkingVerified orders the results by the APSWorkingVerified field.
func ByAPSWorkingVerified(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAPSWorkingVerified, opts...).ToFunc()
}

// ByAPSWorkingRemStatus orders the results by the APSWorkingRemStatus field.
func ByAPSWorkingRemStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAPSWorkingRemStatus, opts...).ToFunc()
}

// ByAPSWorkingRemarks orders the results by the APSWorkingRemarks field.
func ByAPSWorkingRemarks(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAPSWorkingRemarks, opts...).ToFunc()
}

// ByProfilestatus orders the results by the profilestatus field.
func ByProfilestatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProfilestatus, opts...).ToFunc()
}
