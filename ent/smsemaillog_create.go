// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"recruit/ent/smsemaillog"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SmsEmailLogCreate is the builder for creating a SmsEmailLog entity.
type SmsEmailLogCreate struct {
	config
	mutation *SmsEmailLogMutation
	hooks    []Hook
}

// SetType sets the "Type" field.
func (selc *SmsEmailLogCreate) SetType(s string) *SmsEmailLogCreate {
	selc.mutation.SetType(s)
	return selc
}

// SetNillableType sets the "Type" field if the given value is not nil.
func (selc *SmsEmailLogCreate) SetNillableType(s *string) *SmsEmailLogCreate {
	if s != nil {
		selc.SetType(*s)
	}
	return selc
}

// SetMobileEmail sets the "MobileEmail" field.
func (selc *SmsEmailLogCreate) SetMobileEmail(s string) *SmsEmailLogCreate {
	selc.mutation.SetMobileEmail(s)
	return selc
}

// SetNillableMobileEmail sets the "MobileEmail" field if the given value is not nil.
func (selc *SmsEmailLogCreate) SetNillableMobileEmail(s *string) *SmsEmailLogCreate {
	if s != nil {
		selc.SetMobileEmail(*s)
	}
	return selc
}

// SetUserName sets the "UserName" field.
func (selc *SmsEmailLogCreate) SetUserName(s string) *SmsEmailLogCreate {
	selc.mutation.SetUserName(s)
	return selc
}

// SetNillableUserName sets the "UserName" field if the given value is not nil.
func (selc *SmsEmailLogCreate) SetNillableUserName(s *string) *SmsEmailLogCreate {
	if s != nil {
		selc.SetUserName(*s)
	}
	return selc
}

// SetEventCode sets the "EventCode" field.
func (selc *SmsEmailLogCreate) SetEventCode(s string) *SmsEmailLogCreate {
	selc.mutation.SetEventCode(s)
	return selc
}

// SetNillableEventCode sets the "EventCode" field if the given value is not nil.
func (selc *SmsEmailLogCreate) SetNillableEventCode(s *string) *SmsEmailLogCreate {
	if s != nil {
		selc.SetEventCode(*s)
	}
	return selc
}

// SetEventDescription sets the "EventDescription" field.
func (selc *SmsEmailLogCreate) SetEventDescription(s string) *SmsEmailLogCreate {
	selc.mutation.SetEventDescription(s)
	return selc
}

// SetNillableEventDescription sets the "EventDescription" field if the given value is not nil.
func (selc *SmsEmailLogCreate) SetNillableEventDescription(s *string) *SmsEmailLogCreate {
	if s != nil {
		selc.SetEventDescription(*s)
	}
	return selc
}

// SetApiResponse sets the "ApiResponse" field.
func (selc *SmsEmailLogCreate) SetApiResponse(s string) *SmsEmailLogCreate {
	selc.mutation.SetApiResponse(s)
	return selc
}

// SetNillableApiResponse sets the "ApiResponse" field if the given value is not nil.
func (selc *SmsEmailLogCreate) SetNillableApiResponse(s *string) *SmsEmailLogCreate {
	if s != nil {
		selc.SetApiResponse(*s)
	}
	return selc
}

// SetApiResponseDescription sets the "ApiResponseDescription" field.
func (selc *SmsEmailLogCreate) SetApiResponseDescription(s string) *SmsEmailLogCreate {
	selc.mutation.SetApiResponseDescription(s)
	return selc
}

// SetNillableApiResponseDescription sets the "ApiResponseDescription" field if the given value is not nil.
func (selc *SmsEmailLogCreate) SetNillableApiResponseDescription(s *string) *SmsEmailLogCreate {
	if s != nil {
		selc.SetApiResponseDescription(*s)
	}
	return selc
}

// SetEventtime sets the "eventtime" field.
func (selc *SmsEmailLogCreate) SetEventtime(t time.Time) *SmsEmailLogCreate {
	selc.mutation.SetEventtime(t)
	return selc
}

// SetNillableEventtime sets the "eventtime" field if the given value is not nil.
func (selc *SmsEmailLogCreate) SetNillableEventtime(t *time.Time) *SmsEmailLogCreate {
	if t != nil {
		selc.SetEventtime(*t)
	}
	return selc
}

// SetID sets the "id" field.
func (selc *SmsEmailLogCreate) SetID(i int64) *SmsEmailLogCreate {
	selc.mutation.SetID(i)
	return selc
}

// Mutation returns the SmsEmailLogMutation object of the builder.
func (selc *SmsEmailLogCreate) Mutation() *SmsEmailLogMutation {
	return selc.mutation
}

// Save creates the SmsEmailLog in the database.
func (selc *SmsEmailLogCreate) Save(ctx context.Context) (*SmsEmailLog, error) {
	return withHooks(ctx, selc.sqlSave, selc.mutation, selc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (selc *SmsEmailLogCreate) SaveX(ctx context.Context) *SmsEmailLog {
	v, err := selc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (selc *SmsEmailLogCreate) Exec(ctx context.Context) error {
	_, err := selc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (selc *SmsEmailLogCreate) ExecX(ctx context.Context) {
	if err := selc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (selc *SmsEmailLogCreate) check() error {
	return nil
}

func (selc *SmsEmailLogCreate) sqlSave(ctx context.Context) (*SmsEmailLog, error) {
	if err := selc.check(); err != nil {
		return nil, err
	}
	_node, _spec := selc.createSpec()
	if err := sqlgraph.CreateNode(ctx, selc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	selc.mutation.id = &_node.ID
	selc.mutation.done = true
	return _node, nil
}

func (selc *SmsEmailLogCreate) createSpec() (*SmsEmailLog, *sqlgraph.CreateSpec) {
	var (
		_node = &SmsEmailLog{config: selc.config}
		_spec = sqlgraph.NewCreateSpec(smsemaillog.Table, sqlgraph.NewFieldSpec(smsemaillog.FieldID, field.TypeInt64))
	)
	if id, ok := selc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := selc.mutation.GetType(); ok {
		_spec.SetField(smsemaillog.FieldType, field.TypeString, value)
		_node.Type = value
	}
	if value, ok := selc.mutation.MobileEmail(); ok {
		_spec.SetField(smsemaillog.FieldMobileEmail, field.TypeString, value)
		_node.MobileEmail = value
	}
	if value, ok := selc.mutation.UserName(); ok {
		_spec.SetField(smsemaillog.FieldUserName, field.TypeString, value)
		_node.UserName = value
	}
	if value, ok := selc.mutation.EventCode(); ok {
		_spec.SetField(smsemaillog.FieldEventCode, field.TypeString, value)
		_node.EventCode = value
	}
	if value, ok := selc.mutation.EventDescription(); ok {
		_spec.SetField(smsemaillog.FieldEventDescription, field.TypeString, value)
		_node.EventDescription = value
	}
	if value, ok := selc.mutation.ApiResponse(); ok {
		_spec.SetField(smsemaillog.FieldApiResponse, field.TypeString, value)
		_node.ApiResponse = value
	}
	if value, ok := selc.mutation.ApiResponseDescription(); ok {
		_spec.SetField(smsemaillog.FieldApiResponseDescription, field.TypeString, value)
		_node.ApiResponseDescription = value
	}
	if value, ok := selc.mutation.Eventtime(); ok {
		_spec.SetField(smsemaillog.FieldEventtime, field.TypeTime, value)
		_node.Eventtime = value
	}
	return _node, _spec
}

// SmsEmailLogCreateBulk is the builder for creating many SmsEmailLog entities in bulk.
type SmsEmailLogCreateBulk struct {
	config
	builders []*SmsEmailLogCreate
}

// Save creates the SmsEmailLog entities in the database.
func (selcb *SmsEmailLogCreateBulk) Save(ctx context.Context) ([]*SmsEmailLog, error) {
	specs := make([]*sqlgraph.CreateSpec, len(selcb.builders))
	nodes := make([]*SmsEmailLog, len(selcb.builders))
	mutators := make([]Mutator, len(selcb.builders))
	for i := range selcb.builders {
		func(i int, root context.Context) {
			builder := selcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SmsEmailLogMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, selcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, selcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, selcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (selcb *SmsEmailLogCreateBulk) SaveX(ctx context.Context) []*SmsEmailLog {
	v, err := selcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (selcb *SmsEmailLogCreateBulk) Exec(ctx context.Context) error {
	_, err := selcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (selcb *SmsEmailLogCreateBulk) ExecX(ctx context.Context) {
	if err := selcb.Exec(ctx); err != nil {
		panic(err)
	}
}
