// Code generated by ent, DO NOT EDIT.

package application

import (
	"recruit/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int32) predicate.Application {
	return predicate.Application(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int32) predicate.Application {
	return predicate.Application(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int32) predicate.Application {
	return predicate.Application(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int32) predicate.Application {
	return predicate.Application(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int32) predicate.Application {
	return predicate.Application(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int32) predicate.Application {
	return predicate.Application(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int32) predicate.Application {
	return predicate.Application(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int32) predicate.Application {
	return predicate.Application(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int32) predicate.Application {
	return predicate.Application(sql.FieldLTE(FieldID, id))
}

// EmployeeID applies equality check predicate on the "EmployeeID" field. It's identical to EmployeeIDEQ.
func EmployeeID(v int32) predicate.Application {
	return predicate.Application(sql.FieldEQ(FieldEmployeeID, v))
}

// NotifyCode applies equality check predicate on the "NotifyCode" field. It's identical to NotifyCodeEQ.
func NotifyCode(v int32) predicate.Application {
	return predicate.Application(sql.FieldEQ(FieldNotifyCode, v))
}

// HallTicketNumber applies equality check predicate on the "HallTicketNumber" field. It's identical to HallTicketNumberEQ.
func HallTicketNumber(v string) predicate.Application {
	return predicate.Application(sql.FieldEQ(FieldHallTicketNumber, v))
}

// CenterCode applies equality check predicate on the "CenterCode" field. It's identical to CenterCodeEQ.
func CenterCode(v int32) predicate.Application {
	return predicate.Application(sql.FieldEQ(FieldCenterCode, v))
}

// AppliedStamp applies equality check predicate on the "AppliedStamp" field. It's identical to AppliedStampEQ.
func AppliedStamp(v time.Time) predicate.Application {
	return predicate.Application(sql.FieldEQ(FieldAppliedStamp, v))
}

// EmployeeIDEQ applies the EQ predicate on the "EmployeeID" field.
func EmployeeIDEQ(v int32) predicate.Application {
	return predicate.Application(sql.FieldEQ(FieldEmployeeID, v))
}

// EmployeeIDNEQ applies the NEQ predicate on the "EmployeeID" field.
func EmployeeIDNEQ(v int32) predicate.Application {
	return predicate.Application(sql.FieldNEQ(FieldEmployeeID, v))
}

// EmployeeIDIn applies the In predicate on the "EmployeeID" field.
func EmployeeIDIn(vs ...int32) predicate.Application {
	return predicate.Application(sql.FieldIn(FieldEmployeeID, vs...))
}

// EmployeeIDNotIn applies the NotIn predicate on the "EmployeeID" field.
func EmployeeIDNotIn(vs ...int32) predicate.Application {
	return predicate.Application(sql.FieldNotIn(FieldEmployeeID, vs...))
}

// EmployeeIDGT applies the GT predicate on the "EmployeeID" field.
func EmployeeIDGT(v int32) predicate.Application {
	return predicate.Application(sql.FieldGT(FieldEmployeeID, v))
}

// EmployeeIDGTE applies the GTE predicate on the "EmployeeID" field.
func EmployeeIDGTE(v int32) predicate.Application {
	return predicate.Application(sql.FieldGTE(FieldEmployeeID, v))
}

// EmployeeIDLT applies the LT predicate on the "EmployeeID" field.
func EmployeeIDLT(v int32) predicate.Application {
	return predicate.Application(sql.FieldLT(FieldEmployeeID, v))
}

// EmployeeIDLTE applies the LTE predicate on the "EmployeeID" field.
func EmployeeIDLTE(v int32) predicate.Application {
	return predicate.Application(sql.FieldLTE(FieldEmployeeID, v))
}

// NotifyCodeEQ applies the EQ predicate on the "NotifyCode" field.
func NotifyCodeEQ(v int32) predicate.Application {
	return predicate.Application(sql.FieldEQ(FieldNotifyCode, v))
}

// NotifyCodeNEQ applies the NEQ predicate on the "NotifyCode" field.
func NotifyCodeNEQ(v int32) predicate.Application {
	return predicate.Application(sql.FieldNEQ(FieldNotifyCode, v))
}

// NotifyCodeIn applies the In predicate on the "NotifyCode" field.
func NotifyCodeIn(vs ...int32) predicate.Application {
	return predicate.Application(sql.FieldIn(FieldNotifyCode, vs...))
}

// NotifyCodeNotIn applies the NotIn predicate on the "NotifyCode" field.
func NotifyCodeNotIn(vs ...int32) predicate.Application {
	return predicate.Application(sql.FieldNotIn(FieldNotifyCode, vs...))
}

// NotifyCodeIsNil applies the IsNil predicate on the "NotifyCode" field.
func NotifyCodeIsNil() predicate.Application {
	return predicate.Application(sql.FieldIsNull(FieldNotifyCode))
}

// NotifyCodeNotNil applies the NotNil predicate on the "NotifyCode" field.
func NotifyCodeNotNil() predicate.Application {
	return predicate.Application(sql.FieldNotNull(FieldNotifyCode))
}

// HallTicketNumberEQ applies the EQ predicate on the "HallTicketNumber" field.
func HallTicketNumberEQ(v string) predicate.Application {
	return predicate.Application(sql.FieldEQ(FieldHallTicketNumber, v))
}

// HallTicketNumberNEQ applies the NEQ predicate on the "HallTicketNumber" field.
func HallTicketNumberNEQ(v string) predicate.Application {
	return predicate.Application(sql.FieldNEQ(FieldHallTicketNumber, v))
}

// HallTicketNumberIn applies the In predicate on the "HallTicketNumber" field.
func HallTicketNumberIn(vs ...string) predicate.Application {
	return predicate.Application(sql.FieldIn(FieldHallTicketNumber, vs...))
}

// HallTicketNumberNotIn applies the NotIn predicate on the "HallTicketNumber" field.
func HallTicketNumberNotIn(vs ...string) predicate.Application {
	return predicate.Application(sql.FieldNotIn(FieldHallTicketNumber, vs...))
}

// HallTicketNumberGT applies the GT predicate on the "HallTicketNumber" field.
func HallTicketNumberGT(v string) predicate.Application {
	return predicate.Application(sql.FieldGT(FieldHallTicketNumber, v))
}

// HallTicketNumberGTE applies the GTE predicate on the "HallTicketNumber" field.
func HallTicketNumberGTE(v string) predicate.Application {
	return predicate.Application(sql.FieldGTE(FieldHallTicketNumber, v))
}

// HallTicketNumberLT applies the LT predicate on the "HallTicketNumber" field.
func HallTicketNumberLT(v string) predicate.Application {
	return predicate.Application(sql.FieldLT(FieldHallTicketNumber, v))
}

// HallTicketNumberLTE applies the LTE predicate on the "HallTicketNumber" field.
func HallTicketNumberLTE(v string) predicate.Application {
	return predicate.Application(sql.FieldLTE(FieldHallTicketNumber, v))
}

// HallTicketNumberContains applies the Contains predicate on the "HallTicketNumber" field.
func HallTicketNumberContains(v string) predicate.Application {
	return predicate.Application(sql.FieldContains(FieldHallTicketNumber, v))
}

// HallTicketNumberHasPrefix applies the HasPrefix predicate on the "HallTicketNumber" field.
func HallTicketNumberHasPrefix(v string) predicate.Application {
	return predicate.Application(sql.FieldHasPrefix(FieldHallTicketNumber, v))
}

// HallTicketNumberHasSuffix applies the HasSuffix predicate on the "HallTicketNumber" field.
func HallTicketNumberHasSuffix(v string) predicate.Application {
	return predicate.Application(sql.FieldHasSuffix(FieldHallTicketNumber, v))
}

// HallTicketNumberIsNil applies the IsNil predicate on the "HallTicketNumber" field.
func HallTicketNumberIsNil() predicate.Application {
	return predicate.Application(sql.FieldIsNull(FieldHallTicketNumber))
}

// HallTicketNumberNotNil applies the NotNil predicate on the "HallTicketNumber" field.
func HallTicketNumberNotNil() predicate.Application {
	return predicate.Application(sql.FieldNotNull(FieldHallTicketNumber))
}

// HallTicketNumberEqualFold applies the EqualFold predicate on the "HallTicketNumber" field.
func HallTicketNumberEqualFold(v string) predicate.Application {
	return predicate.Application(sql.FieldEqualFold(FieldHallTicketNumber, v))
}

// HallTicketNumberContainsFold applies the ContainsFold predicate on the "HallTicketNumber" field.
func HallTicketNumberContainsFold(v string) predicate.Application {
	return predicate.Application(sql.FieldContainsFold(FieldHallTicketNumber, v))
}

// CenterCodeEQ applies the EQ predicate on the "CenterCode" field.
func CenterCodeEQ(v int32) predicate.Application {
	return predicate.Application(sql.FieldEQ(FieldCenterCode, v))
}

// CenterCodeNEQ applies the NEQ predicate on the "CenterCode" field.
func CenterCodeNEQ(v int32) predicate.Application {
	return predicate.Application(sql.FieldNEQ(FieldCenterCode, v))
}

// CenterCodeIn applies the In predicate on the "CenterCode" field.
func CenterCodeIn(vs ...int32) predicate.Application {
	return predicate.Application(sql.FieldIn(FieldCenterCode, vs...))
}

// CenterCodeNotIn applies the NotIn predicate on the "CenterCode" field.
func CenterCodeNotIn(vs ...int32) predicate.Application {
	return predicate.Application(sql.FieldNotIn(FieldCenterCode, vs...))
}

// CenterCodeIsNil applies the IsNil predicate on the "CenterCode" field.
func CenterCodeIsNil() predicate.Application {
	return predicate.Application(sql.FieldIsNull(FieldCenterCode))
}

// CenterCodeNotNil applies the NotNil predicate on the "CenterCode" field.
func CenterCodeNotNil() predicate.Application {
	return predicate.Application(sql.FieldNotNull(FieldCenterCode))
}

// AppliedStampEQ applies the EQ predicate on the "AppliedStamp" field.
func AppliedStampEQ(v time.Time) predicate.Application {
	return predicate.Application(sql.FieldEQ(FieldAppliedStamp, v))
}

// AppliedStampNEQ applies the NEQ predicate on the "AppliedStamp" field.
func AppliedStampNEQ(v time.Time) predicate.Application {
	return predicate.Application(sql.FieldNEQ(FieldAppliedStamp, v))
}

// AppliedStampIn applies the In predicate on the "AppliedStamp" field.
func AppliedStampIn(vs ...time.Time) predicate.Application {
	return predicate.Application(sql.FieldIn(FieldAppliedStamp, vs...))
}

// AppliedStampNotIn applies the NotIn predicate on the "AppliedStamp" field.
func AppliedStampNotIn(vs ...time.Time) predicate.Application {
	return predicate.Application(sql.FieldNotIn(FieldAppliedStamp, vs...))
}

// AppliedStampGT applies the GT predicate on the "AppliedStamp" field.
func AppliedStampGT(v time.Time) predicate.Application {
	return predicate.Application(sql.FieldGT(FieldAppliedStamp, v))
}

// AppliedStampGTE applies the GTE predicate on the "AppliedStamp" field.
func AppliedStampGTE(v time.Time) predicate.Application {
	return predicate.Application(sql.FieldGTE(FieldAppliedStamp, v))
}

// AppliedStampLT applies the LT predicate on the "AppliedStamp" field.
func AppliedStampLT(v time.Time) predicate.Application {
	return predicate.Application(sql.FieldLT(FieldAppliedStamp, v))
}

// AppliedStampLTE applies the LTE predicate on the "AppliedStamp" field.
func AppliedStampLTE(v time.Time) predicate.Application {
	return predicate.Application(sql.FieldLTE(FieldAppliedStamp, v))
}

// HasCenter applies the HasEdge predicate on the "center" edge.
func HasCenter() predicate.Application {
	return predicate.Application(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CenterTable, CenterColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCenterWith applies the HasEdge predicate on the "center" edge with a given conditions (other predicates).
func HasCenterWith(preds ...predicate.Center) predicate.Application {
	return predicate.Application(func(s *sql.Selector) {
		step := newCenterStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasNotification applies the HasEdge predicate on the "notification" edge.
func HasNotification() predicate.Application {
	return predicate.Application(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, NotificationTable, NotificationColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasNotificationWith applies the HasEdge predicate on the "notification" edge with a given conditions (other predicates).
func HasNotificationWith(preds ...predicate.Notification) predicate.Application {
	return predicate.Application(func(s *sql.Selector) {
		step := newNotificationStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Application) predicate.Application {
	return predicate.Application(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Application) predicate.Application {
	return predicate.Application(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Application) predicate.Application {
	return predicate.Application(func(s *sql.Selector) {
		p(s.Not())
	})
}
