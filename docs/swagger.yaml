definitions:
  candidate_registation.AdminCreation:
    properties:
      AuthorityFacilityName:
        type: string
      CircleOfficeFacilityId:
        type: string
      CircleOfficeName:
        type: string
      CreatedByDesignation:
        type: string
      CreatedByEmpId:
        type: integer
      CreatedById:
        type: integer
      CreatedByUserName:
        type: string
      Designation:
        type: string
      EmailID:
        type: string
      EmployeeId:
        type: integer
      EmployeeName:
        type: string
      FacilityID:
        type: string
      FacilityIdUniqueid:
        type: integer
      FacilityType:
        type: string
      Mobile:
        type: string
      ReportingOfficeFacilityID:
        type: string
      ReportingOfficeFacilityName:
        type: string
      RoleUserCode:
        type: integer
      RoleUserDescription:
        type: string
      UserName:
        type: string
      edges:
        $ref: '#/definitions/candidate_registation.EdgesLogdata'
    required:
    - AuthorityFacilityName
    - CircleOfficeFacilityId
    - CircleOfficeName
    - CreatedByDesignation
    - CreatedByEmpId
    - CreatedById
    - CreatedByUserName
    - Designation
    - EmailID
    - EmployeeId
    - EmployeeName
    - FacilityID
    - FacilityIdUniqueid
    - FacilityType
    - Mobile
    - ReportingOfficeFacilityID
    - ReportingOfficeFacilityName
    - RoleUserCode
    - RoleUserDescription
    - UserName
    - edges
    type: object
  candidate_registation.AdminLoginGenerateOTP:
    properties:
      Password:
        type: string
      UserName:
        type: string
      edges:
        $ref: '#/definitions/candidate_registation.EdgesLogdata'
    required:
    - Password
    - UserName
    - edges
    type: object
  candidate_registation.AdminLoginValidateOTP:
    properties:
      OTP:
        type: integer
      UserName:
        type: string
      edges:
        $ref: '#/definitions/candidate_registation.EdgesLogdata'
    required:
    - OTP
    - UserName
    - edges
    type: object
  candidate_registation.ApplicationDataN:
    properties:
      NO_Recommendations:
        type: string
      NO_Remarks:
        type: string
      VacancyYear:
        type: integer
    type: object
  candidate_registation.ApplicationDataNV:
    properties:
      NO_Recommendations:
        type: string
      NO_Remarks:
        type: string
      Post:
        type: string
      VacancyYear:
        type: integer
    type: object
  candidate_registation.ApplicationDataV:
    properties:
      CA_Recommendations:
        type: string
      CA_Remarks:
        type: string
      VacancyYear:
        type: integer
    type: object
  candidate_registation.ApplicationDataVV:
    properties:
      CA_Recommendations:
        type: string
      CA_Remarks:
        type: string
      Post:
        type: string
      VacancyYear:
        type: integer
    type: object
  candidate_registation.ApplicationGDSPM:
    properties:
      Cadre:
        type: string
      CandidateRemarks:
        type: string
      CategoryCode:
        type: string
      CategoryDescription:
        type: string
      CenterFacilityId:
        type: string
      CenterId:
        type: integer
      CentrePreference:
        type: string
      ClaimingQualifyingService:
        type: string
      ControllingOfficeFacilityID:
        type: string
      ControllingOfficeName:
        type: string
      DCCS:
        type: string
      DOB:
        type: string
      DeputationControllingOfficeID:
        type: string
      DeputationControllingOfficeName:
        type: string
      DeputationOfficeFacilityID:
        type: string
      DeputationOfficeName:
        type: string
      DeputationOfficePincode:
        type: string
      DeputationOfficeUniqueId:
        type: string
      DeputationType:
        type: string
      DesignationID:
        type: string
      DisabilityPercentage:
        type: integer
      DisabilityTypeCode:
        type: string
      DisabilityTypeDescription:
        type: string
      DisabilityTypeID:
        type: string
      EducationCode:
        type: string
      EducationDescription:
        type: string
      EmailID:
        type: string
      EmployeeID:
        type: integer
      EmployeeName:
        type: string
      EmployeePost:
        type: string
      EntryPostCode:
        type: string
      EntryPostDescription:
        type: string
      ExamCode:
        type: integer
      ExamName:
        type: string
      ExamShortName:
        type: string
      ExamYear:
        type: string
      FacilityName:
        type: string
      FacilityUniqueID:
        type: string
      FeederPostCode:
        type: string
      FeederPostDescription:
        type: string
      FeederPostJoiningDate:
        type: string
      Gender:
        type: string
      LienControllingOfficeID:
        type: string
      LienControllingOfficeName:
        type: string
      MobileNumber:
        type: string
      NodalOfficeFacilityID:
        type: string
      NodalOfficeName:
        type: string
      Photo:
        type: string
      PhotoPath:
        type: string
      PostPreferences:
        items: {}
        type: array
      PresentDesignation:
        type: string
      PresentPostCode:
        type: string
      PresentPostDescription:
        type: string
      ReportingOfficeFacilityID:
        type: string
      ReportingOfficeName:
        type: string
      ServiceLength:
        items: {}
        type: array
      Signature:
        type: string
      SignaturePath:
        type: string
      SubdivisionOfficeFacilityID:
        type: string
      SubdivisionOfficeName:
        type: string
      TempHallTicket:
        type: string
      UnitPreferences:
        items: {}
        type: array
      UserID:
        type: integer
      WorkingOfficeCircleFacilityID:
        type: string
      WorkingOfficeCircleName:
        type: string
      WorkingOfficeDivisionFacilityID:
        type: string
      WorkingOfficeDivisionName:
        type: string
      WorkingOfficeFacilityID:
        type: string
      WorkingOfficeName:
        type: string
      WorkingOfficePincode:
        type: integer
      WorkingOfficeRegionFacilityID:
        type: string
      WorkingOfficeRegionName:
        type: string
      edges:
        $ref: '#/definitions/candidate_registation.EdgesLogdata'
    required:
    - CategoryCode
    - CategoryDescription
    - CenterFacilityId
    - CenterId
    - CentrePreference
    - ClaimingQualifyingService
    - ControllingOfficeFacilityID
    - ControllingOfficeName
    - DOB
    - EducationDescription
    - EmailID
    - EmployeeID
    - EmployeeName
    - ExamCode
    - ExamName
    - ExamShortName
    - ExamYear
    - FacilityUniqueID
    - FeederPostJoiningDate
    - Gender
    - LienControllingOfficeID
    - LienControllingOfficeName
    - MobileNumber
    - NodalOfficeFacilityID
    - NodalOfficeName
    - Photo
    - PhotoPath
    - PostPreferences
    - PresentDesignation
    - ServiceLength
    - Signature
    - SignaturePath
    - TempHallTicket
    - UnitPreferences
    - UserID
    - WorkingOfficeCircleFacilityID
    - WorkingOfficeCircleName
    - WorkingOfficeFacilityID
    - WorkingOfficeName
    - WorkingOfficePincode
    - edges
    type: object
  candidate_registation.ApplicationGDSPMforUpdateExamCenters:
    properties:
      Cadre:
        type: string
      CandidateRemarks:
        type: string
      CategoryCode:
        type: string
      CategoryDescription:
        type: string
      CenterFacilityId:
        type: string
      CenterId:
        type: integer
      CentrePreference:
        type: string
      ClaimingQualifyingService:
        type: string
      ControllingOfficeFacilityID:
        type: string
      ControllingOfficeName:
        type: string
      DCCS:
        type: string
      DOB:
        type: string
      DeputationControllingOfficeID:
        type: string
      DeputationControllingOfficeName:
        type: string
      DeputationOfficeFacilityID:
        type: string
      DeputationOfficeName:
        type: string
      DeputationOfficePincode:
        type: string
      DeputationOfficeUniqueId:
        type: string
      DeputationType:
        type: string
      DesignationID:
        type: string
      DisabilityPercentage:
        type: integer
      DisabilityTypeCode:
        type: string
      DisabilityTypeDescription:
        type: string
      DisabilityTypeID:
        type: string
      EducationCode:
        type: string
      EducationDescription:
        type: string
      EmailID:
        type: string
      EmployeeID:
        type: integer
      EmployeeName:
        type: string
      EmployeePost:
        type: string
      EntryPostCode:
        type: string
      EntryPostDescription:
        type: string
      ExamCode:
        type: integer
      ExamName:
        type: string
      ExamShortName:
        type: string
      ExamYear:
        type: string
      FacilityName:
        type: string
      FacilityUniqueID:
        type: string
      FeederPostCode:
        type: string
      FeederPostDescription:
        type: string
      FeederPostJoiningDate:
        type: string
      Gender:
        type: string
      LienControllingOfficeID:
        type: string
      LienControllingOfficeName:
        type: string
      MobileNumber:
        type: string
      NodalOfficeFacilityID:
        type: string
      NodalOfficeName:
        type: string
      Photo:
        type: string
      PhotoPath:
        type: string
      PostPreferences:
        items: {}
        type: array
      PresentDesignation:
        type: string
      PresentPostCode:
        type: string
      PresentPostDescription:
        type: string
      ReportingOfficeFacilityID:
        type: string
      ReportingOfficeName:
        type: string
      ServiceLength:
        items: {}
        type: array
      Signature:
        type: string
      SignaturePath:
        type: string
      SubdivisionOfficeFacilityID:
        type: string
      SubdivisionOfficeName:
        type: string
      TempHallTicket:
        type: string
      UnitPreferences:
        items: {}
        type: array
      UserID:
        type: integer
      WorkingOfficeCircleFacilityID:
        type: string
      WorkingOfficeCircleName:
        type: string
      WorkingOfficeDivisionFacilityID:
        type: string
      WorkingOfficeDivisionName:
        type: string
      WorkingOfficeFacilityID:
        type: string
      WorkingOfficeName:
        type: string
      WorkingOfficePincode:
        type: integer
      WorkingOfficeRegionFacilityID:
        type: string
      WorkingOfficeRegionName:
        type: string
      edges:
        $ref: '#/definitions/candidate_registation.EdgesLogdata'
    type: object
  candidate_registation.ApplicationGroupB:
    properties:
      CandidateRemarks:
        type: string
      CategoryCode:
        type: string
      CategoryDescription:
        type: string
      CenterFacilityId:
        type: string
      CenterId:
        type: integer
      CentrePreference:
        type: string
      ClaimingQualifyingService:
        type: string
      ControllingOfficeFacilityID:
        type: string
      ControllingOfficeName:
        type: string
      DCCS:
        type: string
      DOB:
        type: string
      DeputationControllingOfficeID:
        type: string
      DeputationControllingOfficeName:
        type: string
      DeputationOfficeFacilityID:
        type: string
      DeputationOfficeName:
        type: string
      DeputationOfficePincode:
        type: string
      DeputationOfficeUniqueId:
        type: string
      DeputationType:
        type: string
      DesignationID:
        type: string
      DisabilityPercentage:
        type: integer
      DisabilityTypeCode:
        type: string
      DisabilityTypeDescription:
        type: string
      DisabilityTypeID:
        type: string
      EducationCode:
        type: string
      EducationDescription:
        type: string
      EmailID:
        type: string
      EmployeeID:
        type: integer
      EmployeeName:
        type: string
      EmployeePost:
        type: string
      EntryPostCode:
        type: string
      EntryPostDescription:
        type: string
      ExamCode:
        type: integer
      ExamName:
        type: string
      ExamShortName:
        type: string
      ExamYear:
        type: string
      FacilityName:
        type: string
      FacilityUniqueID:
        type: string
      FeederPostCode:
        type: string
      FeederPostDescription:
        type: string
      FeederPostJoiningDate:
        type: string
      Gender:
        type: string
      LienControllingOfficeID:
        type: string
      LienControllingOfficeName:
        type: string
      MobileNumber:
        type: string
      NodalOfficeFacilityID:
        type: string
      NodalOfficeName:
        type: string
      Photo:
        type: string
      PhotoPath:
        type: string
      PresentDesignation:
        type: string
      PresentPostCode:
        type: string
      PresentPostDescription:
        type: string
      ReportingOfficeFacilityID:
        type: string
      ReportingOfficeName:
        type: string
      ServiceLength:
        items: {}
        type: array
      Signature:
        type: string
      SignaturePath:
        type: string
      TempHallTicket:
        type: string
      UserID:
        type: integer
      WorkingOfficeCircleFacilityID:
        type: string
      WorkingOfficeCircleName:
        type: string
      WorkingOfficeDivisionFacilityID:
        type: string
      WorkingOfficeDivisionName:
        type: string
      WorkingOfficeFacilityID:
        type: string
      WorkingOfficeName:
        type: string
      WorkingOfficePincode:
        type: integer
      WorkingOfficeRegionFacilityID:
        type: string
      WorkingOfficeRegionName:
        type: string
      edges:
        $ref: '#/definitions/candidate_registation.EdgesPSApplicationData'
    required:
    - CategoryCode
    - CategoryDescription
    - CenterFacilityId
    - CenterId
    - CentrePreference
    - ClaimingQualifyingService
    - ControllingOfficeFacilityID
    - ControllingOfficeName
    - DCCS
    - DOB
    - DisabilityTypeDescription
    - EmailID
    - EmployeeID
    - EmployeeName
    - EntryPostDescription
    - ExamCode
    - ExamName
    - ExamShortName
    - ExamYear
    - FacilityUniqueID
    - FeederPostCode
    - FeederPostDescription
    - FeederPostJoiningDate
    - Gender
    - LienControllingOfficeID
    - LienControllingOfficeName
    - MobileNumber
    - NodalOfficeFacilityID
    - NodalOfficeName
    - Photo
    - PhotoPath
    - PresentDesignation
    - PresentPostCode
    - PresentPostDescription
    - ServiceLength
    - Signature
    - SignaturePath
    - TempHallTicket
    - UserID
    - WorkingOfficeCircleFacilityID
    - WorkingOfficeCircleName
    - WorkingOfficeFacilityID
    - WorkingOfficeName
    - WorkingOfficePincode
    - edges
    type: object
  candidate_registation.ApplicationIp:
    properties:
      Cadre:
        type: string
      CandidateRemarks:
        type: string
      CategoryCode:
        type: string
      CategoryDescription:
        type: string
      CenterFacilityId:
        type: string
      CenterId:
        type: integer
      CentrePreference:
        type: string
      ClaimingQualifyingService:
        type: string
      ControllingOfficeFacilityID:
        type: string
      ControllingOfficeName:
        type: string
      DCCS:
        type: string
      DOB:
        type: string
      DeputationControllingOfficeID:
        type: string
      DeputationControllingOfficeName:
        type: string
      DeputationOfficeFacilityID:
        type: string
      DeputationOfficeName:
        type: string
      DeputationOfficePincode:
        type: string
      DeputationOfficeUniqueId:
        type: string
      DeputationType:
        type: string
      DesignationID:
        type: string
      DisabilityPercentage:
        type: integer
      DisabilityTypeCode:
        type: string
      DisabilityTypeDescription:
        type: string
      DisabilityTypeID:
        type: string
      EducationCode:
        type: string
      EducationDescription:
        type: string
      EmailID:
        type: string
      EmployeeID:
        type: integer
      EmployeeName:
        type: string
      EntryPostCode:
        type: string
      EntryPostDescription:
        type: string
      ExamCode:
        type: integer
      ExamName:
        type: string
      ExamShortName:
        type: string
      ExamYear:
        type: string
      FacilityUniqueID:
        type: string
      FeederPostCode:
        type: string
      FeederPostDescription:
        type: string
      FeederPostJoiningDate:
        type: string
      Gender:
        type: string
      LienControllingOfficeID:
        type: string
      LienControllingOfficeName:
        type: string
      MobileNumber:
        type: string
      NodalOfficeFacilityID:
        type: string
      NodalOfficeName:
        type: string
      Photo:
        type: string
      PhotoPath:
        type: string
      PresentDesignation:
        type: string
      PresentPostCode:
        type: string
      PresentPostDescription:
        type: string
      ReportingOfficeFacilityID:
        type: string
      ReportingOfficeName:
        type: string
      ServiceLength:
        items: {}
        type: array
      Signature:
        type: string
      SignaturePath:
        type: string
      TempHallTicket:
        type: string
      UserID:
        type: integer
      WorkingOfficeCircleFacilityID:
        type: string
      WorkingOfficeCircleName:
        type: string
      WorkingOfficeDivisionFacilityID:
        type: string
      WorkingOfficeDivisionName:
        type: string
      WorkingOfficeFacilityID:
        type: string
      WorkingOfficeName:
        type: string
      WorkingOfficePincode:
        type: integer
      WorkingOfficeRegionFacilityID:
        type: string
      WorkingOfficeRegionName:
        type: string
      edges:
        $ref: '#/definitions/candidate_registation.EdgesCircleData'
    required:
    - CategoryCode
    - CategoryDescription
    - CenterFacilityId
    - CenterId
    - CentrePreference
    - ClaimingQualifyingService
    - ControllingOfficeFacilityID
    - ControllingOfficeName
    - DOB
    - EmailID
    - EmployeeID
    - EmployeeName
    - ExamCode
    - ExamName
    - ExamShortName
    - ExamYear
    - FacilityUniqueID
    - FeederPostCode
    - FeederPostDescription
    - FeederPostJoiningDate
    - Gender
    - LienControllingOfficeID
    - LienControllingOfficeName
    - MobileNumber
    - NodalOfficeFacilityID
    - NodalOfficeName
    - Photo
    - PhotoPath
    - PresentDesignation
    - PresentPostCode
    - PresentPostDescription
    - ServiceLength
    - Signature
    - SignaturePath
    - TempHallTicket
    - WorkingOfficeCircleFacilityID
    - WorkingOfficeCircleName
    - WorkingOfficeFacilityID
    - WorkingOfficeName
    - WorkingOfficePincode
    - edges
    type: object
  candidate_registation.ApplicationMTSPM:
    properties:
      Cadre:
        type: string
      CandidateRemarks:
        type: string
      CategoryCode:
        type: string
      CategoryDescription:
        type: string
      CenterFacilityId:
        type: string
      CenterId:
        type: integer
      CentrePreference:
        type: string
      ClaimingQualifyingService:
        type: string
      ControllingOfficeFacilityID:
        type: string
      ControllingOfficeName:
        type: string
      DCCS:
        type: string
      DOB:
        type: string
      DeputationControllingOfficeID:
        type: string
      DeputationControllingOfficeName:
        type: string
      DeputationOfficeFacilityID:
        type: string
      DeputationOfficeName:
        type: string
      DeputationOfficePincode:
        type: string
      DeputationOfficeUniqueId:
        type: string
      DeputationType:
        type: string
      DesignationID:
        type: string
      DisabilityPercentage:
        type: integer
      DisabilityTypeCode:
        type: string
      DisabilityTypeDescription:
        type: string
      DisabilityTypeID:
        type: string
      EducationCode:
        type: string
      EducationDescription:
        type: string
      EmailID:
        type: string
      EmployeeID:
        type: integer
      EmployeeName:
        type: string
      EmployeePost:
        type: string
      EntryPostCode:
        type: string
      EntryPostDescription:
        type: string
      ExamCode:
        type: integer
      ExamName:
        type: string
      ExamShortName:
        type: string
      ExamYear:
        type: string
      FacilityName:
        type: string
      FacilityUniqueID:
        type: string
      FeederPostCode:
        type: string
      FeederPostDescription:
        type: string
      FeederPostJoiningDate:
        type: string
      GDSEngagement:
        items: {}
        type: array
      Gender:
        type: string
      LienControllingOfficeID:
        type: string
      LienControllingOfficeName:
        type: string
      MobileNumber:
        type: string
      NodalOfficeFacilityID:
        type: string
      NodalOfficeName:
        type: string
      Photo:
        type: string
      PhotoPath:
        type: string
      PostPreferences:
        items: {}
        type: array
      PresentDesignation:
        type: string
      PresentPostCode:
        type: string
      PresentPostDescription:
        type: string
      ReportingOfficeFacilityID:
        type: string
      ReportingOfficeName:
        type: string
      ServiceLength:
        items: {}
        type: array
      Signature:
        type: string
      SignaturePath:
        type: string
      TempHallTicket:
        type: string
      UnitPreferences:
        items: {}
        type: array
      UserID:
        type: integer
      WorkingOfficeCircleFacilityID:
        type: string
      WorkingOfficeCircleName:
        type: string
      WorkingOfficeDivisionFacilityID:
        type: string
      WorkingOfficeDivisionName:
        type: string
      WorkingOfficeFacilityID:
        type: string
      WorkingOfficeName:
        type: string
      WorkingOfficePincode:
        type: integer
      WorkingOfficeRegionFacilityID:
        type: string
      WorkingOfficeRegionName:
        type: string
      edges:
        $ref: '#/definitions/candidate_registation.EdgesLogdata'
    required:
    - CategoryCode
    - CategoryDescription
    - CenterFacilityId
    - CenterId
    - CentrePreference
    - ClaimingQualifyingService
    - ControllingOfficeFacilityID
    - ControllingOfficeName
    - DOB
    - EmailID
    - EmployeeID
    - EmployeeName
    - EntryPostCode
    - EntryPostDescription
    - ExamCode
    - ExamName
    - ExamShortName
    - ExamYear
    - FacilityUniqueID
    - FeederPostCode
    - FeederPostDescription
    - FeederPostJoiningDate
    - Gender
    - LienControllingOfficeID
    - LienControllingOfficeName
    - MobileNumber
    - NodalOfficeFacilityID
    - NodalOfficeName
    - Photo
    - PhotoPath
    - PostPreferences
    - PresentDesignation
    - PresentPostCode
    - PresentPostDescription
    - ReportingOfficeFacilityID
    - ReportingOfficeName
    - ServiceLength
    - Signature
    - SignaturePath
    - TempHallTicket
    - UnitPreferences
    - UserID
    - WorkingOfficeCircleFacilityID
    - WorkingOfficeCircleName
    - WorkingOfficeFacilityID
    - WorkingOfficeName
    - WorkingOfficePincode
    - edges
    type: object
  candidate_registation.CandidateCreation:
    properties:
      CreatedBy:
        type: string
      DOB:
        type: string
      EmailID:
        type: string
      EmployeeID:
        type: integer
      EmployeeName:
        type: string
      FacilityID:
        type: string
      Gender:
        $ref: '#/definitions/candidate_registation.Gender'
      MobileNumber:
        type: string
      UidToken:
        type: string
      edges:
        $ref: '#/definitions/candidate_registation.EdgesLogdata'
    required:
    - CreatedBy
    - DOB
    - EmailID
    - EmployeeID
    - EmployeeName
    - FacilityID
    - Gender
    - MobileNumber
    - edges
    type: object
  candidate_registation.CandidateRegistrationGenerateOTP:
    properties:
      Password:
        type: string
      UserName:
        type: string
      edges:
        $ref: '#/definitions/candidate_registation.EdgesLogdata'
    required:
    - Password
    - UserName
    - edges
    type: object
  candidate_registation.CandidateRegistrationOTP:
    properties:
      EmailOTP:
        type: integer
      OTP:
        type: integer
      Password:
        type: string
      UserName:
        type: string
      edges:
        $ref: '#/definitions/candidate_registation.EdgesLogdata'
    required:
    - EmailOTP
    - OTP
    - Password
    - UserName
    - edges
    type: object
  candidate_registation.CenterReq:
    properties:
      Address:
        type: string
      CenterCityName:
        type: string
      CityID:
        type: integer
      ConductedBy:
        type: string
      ConductedByFacilityID:
        type: string
      ExamCenterName:
        type: string
      ExamCode:
        type: integer
      ExamYear:
        type: integer
      Landmark:
        type: string
      MaxSeats:
        type: integer
      NAUserName:
        type: string
      NOUserName:
        type: string
      NodalOfficeFacilityID:
        type: string
      Pincode:
        type: integer
      Status:
        type: boolean
      edges:
        $ref: '#/definitions/candidate_registation.EdgesLogdata'
    required:
    - ExamCenterName
    - MaxSeats
    - NOUserName
    - NodalOfficeFacilityID
    - Status
    type: object
  candidate_registation.CenterRequest:
    properties:
      Address:
        type: string
      AdminCircleOfficeID:
        type: string
      CenterCityName:
        type: string
      CircleID:
        type: integer
      CityID:
        type: integer
      ConductedBy:
        type: string
      ConductedByFacilityID:
        type: string
      DivisionID:
        type: integer
      ExamCenterName:
        type: string
      ExamCode:
        type: integer
      ExamName:
        type: string
      ExamNameCode:
        type: string
      ExamYear:
        type: string
      FacilityID:
        type: integer
      Landmark:
        type: string
      MaxSeats:
        type: integer
      NAUserName:
        type: string
      NoAlloted:
        type: integer
      NodalOfficeFacilityId:
        type: string
      NodalOfficerCode:
        type: integer
      Papers:
        description: Assuming Papers is a list of strings
        items: {}
        type: array
      PendingSeats:
        type: integer
      Pincode:
        type: integer
      RegionID:
        type: integer
      Status:
        type: boolean
      UpdatedAt:
        type: string
      UpdatedBy:
        type: string
      edges:
        $ref: '#/definitions/candidate_registation.EdgesLogdata'
    required:
    - Address
    - CenterCityName
    - CircleID
    - CityID
    - DivisionID
    - ExamCenterName
    - ExamCode
    - ExamName
    - ExamNameCode
    - FacilityID
    - NodalOfficerCode
    - Pincode
    - RegionID
    type: object
  candidate_registation.CircleData:
    properties:
      PlacePrefNo:
        type: integer
      PlacePrefValue:
        type: string
    type: object
  candidate_registation.CreateNotificationStruct:
    properties:
      AdmitCardDate:
        type: string
      ApplicationCorrectionLastDate:
        type: string
      ApplicationEndDate:
        type: string
      ApplicationStartDate:
        type: string
      ApplicationVerificationLastDate:
        type: string
      CenterAllotmentEndDate:
        type: string
      CircleOfficeFacilityId:
        type: string
      CircleOfficeName:
        type: string
      CreatedBy:
        type: string
      CreatedByDesignation:
        type: string
      CreatedById:
        type: integer
      CreatedByName:
        type: string
      CrucialDate:
        items: {}
        type: array
      ExamCode:
        type: integer
      ExamName:
        type: string
      ExamYear:
        type: integer
      IssuedBy:
        type: string
      NodalOfficerApprovalDate:
        type: string
      NotificationOrderNumber:
        type: string
      NotificationStatus:
        type: string
      OrderDate:
        type: string
      Papers:
        items: {}
        type: array
      ResubmittedApplicationVerificationDate:
        type: string
      UpdatedBy:
        type: string
      UserName:
        type: string
      edges:
        $ref: '#/definitions/candidate_registation.EdgesLogdata'
    required:
    - AdmitCardDate
    - ApplicationEndDate
    - ApplicationVerificationLastDate
    - CenterAllotmentEndDate
    - CrucialDate
    - ExamCode
    - ExamName
    - ExamYear
    - NodalOfficerApprovalDate
    - OrderDate
    - Papers
    - ResubmittedApplicationVerificationDate
    - UserName
    type: object
  candidate_registation.CreateUserRequest:
    properties:
      CircleFacilityId:
        type: string
      CircleFacilityName:
        type: string
      CreatedAt:
        type: string
      CreatedBy:
        type: string
      CreatedByDesignation:
        type: string
      CreatedByEmployeeId:
        type: string
      CreatedById:
        type: integer
      CreatedByUserName:
        type: string
      CreatedDate:
        type: string
      DOB:
        type: string
      DeletedByDesignation:
        type: string
      DeletedByEmployeeId:
        type: string
      DeletedById:
        type: integer
      DeletedByUserName:
        type: string
      DeletedDate:
        type: string
      Designation:
        type: string
      EmailCreatedAt:
        type: string
      EmailID:
        type: string
      EmailNewPasswordRequest:
        type: boolean
      EmailOTP:
        type: integer
      EmailOTPExpiryTime:
        type: string
      EmailOTPRemarks:
        type: string
      EmailOTPSavedTime:
        type: string
      EmailOTPTriggeredTime:
        type: string
      EmployeeID:
        type: integer
      EmployeeName:
        type: string
      ExamCode:
        type: integer
      ExamCodePS:
        type: integer
      FacilityID:
        type: string
      Gender:
        type: string
      Mobile:
        type: string
      ModifiedDate:
        type: string
      Modifiedby:
        type: string
      NewPasswordRequest:
        type: boolean
      OTP:
        type: integer
      OTPExpiryTime:
        type: string
      OTPRemarks:
        type: string
      OTPSavedTime:
        type: string
      OTPTriggeredTime:
        type: string
      Operationstatus:
        type: string
      Password:
        type: string
      RoleUserCode:
        type: integer
      Status:
        type: boolean
      Statuss:
        type: string
      UidToken:
        type: string
      UpdatedDate:
        type: string
      Updatedby:
        type: string
      UserName:
        type: string
    required:
    - EmailID
    - EmployeeID
    - EmployeeName
    - Mobile
    - Password
    - UserName
    type: object
  candidate_registation.DeleteAdminMasterStruc:
    properties:
      AdminUniqueID:
        type: integer
      DeletedByDesignation:
        type: string
      DeletedByEmpId:
        type: integer
      DeletedById:
        type: integer
      DeletedByUserName:
        type: string
      UserName:
        type: string
      edges:
        $ref: '#/definitions/candidate_registation.EdgesLogdata'
    required:
    - AdminUniqueID
    - DeletedByDesignation
    - DeletedByEmpId
    - DeletedById
    - DeletedByUserName
    - UserName
    - edges
    type: object
  candidate_registation.EdgesCircleData:
    properties:
      CirclePrefRef:
        items:
          $ref: '#/definitions/candidate_registation.CircleData'
        type: array
      LogData:
        items:
          $ref: '#/definitions/candidate_registation.LogData'
        type: array
    type: object
  candidate_registation.EdgesGDSPMApplicationData:
    properties:
      GDSPMApplicationsRef:
        items:
          $ref: '#/definitions/candidate_registation.ApplicationDataVV'
        type: array
      LogData:
        items:
          $ref: '#/definitions/candidate_registation.LogData'
        type: array
    type: object
  candidate_registation.EdgesGDSPMApplicationDataNAv:
    properties:
      GDSPMApplicationsRef:
        items:
          $ref: '#/definitions/candidate_registation.ApplicationDataNV'
        type: array
      LogData:
        items:
          $ref: '#/definitions/candidate_registation.LogData'
        type: array
    type: object
  candidate_registation.EdgesIPApplicatinData:
    properties:
      CirclePrefRef:
        items:
          $ref: '#/definitions/candidate_registation.CircleData'
        type: array
      IPApplicationsRef:
        items:
          $ref: '#/definitions/candidate_registation.ApplicationDataV'
        type: array
      LogData:
        items:
          $ref: '#/definitions/candidate_registation.LogData'
        type: array
    type: object
  candidate_registation.EdgesIPApplicatinDataNA:
    properties:
      CirclePrefRef:
        items:
          $ref: '#/definitions/candidate_registation.CircleData'
        type: array
      IPApplicationsRef:
        items:
          $ref: '#/definitions/candidate_registation.ApplicationDataN'
        type: array
      LogData:
        items:
          $ref: '#/definitions/candidate_registation.LogData'
        type: array
    type: object
  candidate_registation.EdgesLogdata:
    properties:
      LogData:
        items:
          $ref: '#/definitions/candidate_registation.LogData'
        type: array
    type: object
  candidate_registation.EdgesMTSPMApplicationData:
    properties:
      LogData:
        items:
          $ref: '#/definitions/candidate_registation.LogData'
        type: array
      MTSPMMGApplicationsRef:
        items:
          $ref: '#/definitions/candidate_registation.ApplicationDataV'
        type: array
    type: object
  candidate_registation.EdgesMTSPMApplicationDataNA:
    properties:
      LogData:
        items:
          $ref: '#/definitions/candidate_registation.LogData'
        type: array
      MTSPMMGApplicationsRef:
        items:
          $ref: '#/definitions/candidate_registation.ApplicationDataN'
        type: array
    type: object
  candidate_registation.EdgesPSApplicationData:
    properties:
      IPApplicationsRef:
        items:
          $ref: '#/definitions/candidate_registation.ApplicationDataV'
        type: array
      LogData:
        items:
          $ref: '#/definitions/candidate_registation.LogData'
        type: array
    type: object
  candidate_registation.EdgesPSApplicationDataNo:
    properties:
      LogData:
        items:
          $ref: '#/definitions/candidate_registation.LogData'
        type: array
      PSApplicationsRef:
        items:
          $ref: '#/definitions/candidate_registation.ApplicationDataN'
        type: array
    type: object
  candidate_registation.Gender:
    enum:
    - Male
    - Female
    - Other
    type: string
    x-enum-varnames:
    - Male
    - Female
    - Other
  candidate_registation.IssueNotificationStruct:
    properties:
      AdmitCardDate:
        type: string
      ApplicationCorrectionLastDate:
        type: string
      ApplicationEndDate:
        type: string
      ApplicationStartDate:
        type: string
      ApplicationVerificationLastDate:
        type: string
      ApprovedBy:
        type: string
      ApprovedByDesignation:
        type: string
      ApprovedById:
        type: integer
      ApprovedByName:
        type: string
      CenterAllotmentEndDate:
        type: string
      CircleOfficeFacilityId:
        type: string
      CircleOfficeName:
        type: string
      CreatedBy:
        type: string
      CreatedByDesignation:
        type: string
      CreatedById:
        type: integer
      CreatedByName:
        type: string
      CrucialDate:
        items: {}
        type: array
      ExamCode:
        type: integer
      ExamName:
        type: string
      ExamShortName:
        type: string
      ExamYear:
        type: integer
      Id:
        type: integer
      IssuedBy:
        type: string
      NodalOfficerApprovalDate:
        type: string
      NotificationNumber:
        type: string
      NotificationOrderNumber:
        type: string
      NotificationRemarks:
        type: string
      NotificationStatus:
        type: string
      OrderDate:
        type: string
      Papers:
        items: {}
        type: array
      ResubmittedApplicationVerificationDate:
        type: string
      Status:
        type: string
      UserName:
        type: string
      edges:
        $ref: '#/definitions/candidate_registation.EdgesLogdata'
    required:
    - AdmitCardDate
    - ApplicationCorrectionLastDate
    - ApplicationEndDate
    - ApplicationStartDate
    - ApplicationVerificationLastDate
    - CenterAllotmentEndDate
    - CrucialDate
    - NodalOfficerApprovalDate
    - OrderDate
    - Papers
    - ResubmittedApplicationVerificationDate
    type: object
  candidate_registation.LogData:
    properties:
      Action:
        type: string
      Browser:
        type: string
      IPAddress:
        type: string
      Latitude:
        type: number
      Longitude:
        type: number
      OS:
        type: string
      Remarks:
        type: string
      UserID:
        type: string
      UserType:
        type: string
    required:
    - IPAddress
    - Latitude
    - Longitude
    - Remarks
    - UserID
    type: object
  candidate_registation.NAVerifyApplicationGDSPM:
    properties:
      AppliactionRemarks:
        type: string
      ApplicationNumber:
        type: string
      EmployeeID:
        type: integer
      ExamCode:
        type: integer
      ExamName:
        type: string
      ExamShortName:
        type: string
      ExamYear:
        type: string
      GenerateHallTicketFlag:
        type: boolean
      NA_EmployeeDesignation:
        type: string
      NA_EmployeeId:
        type: string
      NA_GeneralRemarks:
        type: string
      NA_Remarks:
        type: string
      NA_UserName:
        type: string
      RecommendedStatus:
        type: string
      UserID:
        type: integer
      edges:
        $ref: '#/definitions/candidate_registation.EdgesGDSPMApplicationDataNAv'
      id:
        type: integer
    required:
    - ApplicationNumber
    - EmployeeID
    - NA_EmployeeId
    - NA_UserName
    - id
    type: object
  candidate_registation.NAVerifyApplicationGroupB:
    properties:
      AppliactionRemarks:
        type: string
      ApplicationNumber:
        type: string
      ControllingOfficeFacilityID:
        type: string
      EmployeeID:
        type: integer
      ExamCode:
        type: integer
      ExamName:
        type: string
      ExamShortName:
        type: string
      ExamYear:
        type: string
      GenerateHallTicketFlag:
        type: boolean
      NA_EmployeeDesignation:
        type: string
      NA_EmployeeId:
        type: string
      NA_GeneralRemarks:
        type: string
      NA_Remarks:
        type: string
      NA_UserName:
        type: string
      RecommendedStatus:
        type: string
      UserID:
        type: integer
      edges:
        $ref: '#/definitions/candidate_registation.EdgesPSApplicationDataNo'
      id:
        type: integer
    required:
    - ApplicationNumber
    - ControllingOfficeFacilityID
    - EmployeeID
    - NA_EmployeeId
    - NA_UserName
    - id
    type: object
  candidate_registation.NAVerifyApplicationIp:
    properties:
      AppliactionRemarks:
        type: string
      ApplicationNumber:
        type: string
      EmployeeID:
        type: integer
      ExamCode:
        type: integer
      ExamName:
        type: string
      ExamShortName:
        type: string
      ExamYear:
        type: string
      GenerateHallTicketFlag:
        type: boolean
      NA_EmployeeDesignation:
        type: string
      NA_EmployeeId:
        type: string
      NA_GeneralRemarks:
        type: string
      NA_Remarks:
        type: string
      NA_UserName:
        type: string
      RecommendedStatus:
        type: string
      UserID:
        type: integer
      edges:
        $ref: '#/definitions/candidate_registation.EdgesIPApplicatinDataNA'
      id:
        type: integer
    required:
    - ApplicationNumber
    - EmployeeID
    - NA_EmployeeId
    - NA_UserName
    - id
    type: object
  candidate_registation.NAVerifyApplicationMTSPM:
    properties:
      AppliactionRemarks:
        type: string
      ApplicationNumber:
        type: string
      EmployeeID:
        type: integer
      ExamCode:
        type: integer
      ExamName:
        type: string
      ExamShortName:
        type: string
      ExamYear:
        type: string
      GenerateHallTicketFlag:
        type: boolean
      NA_EmployeeDesignation:
        type: string
      NA_EmployeeId:
        type: string
      NA_GeneralRemarks:
        type: string
      NA_Remarks:
        type: string
      NA_UserName:
        type: string
      RecommendedStatus:
        type: string
      UserID:
        type: integer
      edges:
        $ref: '#/definitions/candidate_registation.EdgesMTSPMApplicationDataNA'
      id:
        type: integer
    required:
    - ApplicationNumber
    - EmployeeID
    - NA_EmployeeId
    - NA_UserName
    - id
    type: object
  candidate_registation.ReApplicationGDSPM:
    properties:
      ApplicationNumber:
        type: string
      Cadre:
        type: string
      CandidateRemarks:
        type: string
      CategoryCode:
        type: string
      CategoryDescription:
        type: string
      CenterFacilityId:
        type: string
      CenterId:
        type: integer
      CentrePreference:
        type: string
      ClaimingQualifyingService:
        type: string
      ControllingOfficeFacilityID:
        type: string
      ControllingOfficeName:
        type: string
      DCCS:
        type: string
      DCInPresentCadre:
        type: string
      DOB:
        type: string
      DeputationControllingOfficeID:
        type: string
      DeputationControllingOfficeName:
        type: string
      DeputationOfficeFacilityID:
        type: string
      DeputationOfficeName:
        type: string
      DeputationOfficePincode:
        type: string
      DeputationOfficeUniqueId:
        type: string
      DeputationType:
        type: string
      DesignationID:
        type: string
      DisabilityPercentage:
        type: integer
      DisabilityTypeCode:
        type: string
      DisabilityTypeDescription:
        type: string
      DisabilityTypeID:
        type: string
      EducationCode:
        type: string
      EducationDescription:
        type: string
      EmailID:
        type: string
      EmployeeID:
        type: integer
      EmployeeName:
        type: string
      EmployeePost:
        type: string
      EntryPostCode:
        type: string
      EntryPostDescription:
        type: string
      ExamCode:
        type: integer
      ExamName:
        type: string
      ExamShortName:
        type: string
      ExamYear:
        type: string
      FacilityName:
        type: string
      FacilityUniqueID:
        type: string
      FeederPostCode:
        type: string
      FeederPostDescription:
        type: string
      FeederPostJoiningDate:
        type: string
      GDSEngagement:
        items: {}
        type: array
      Gender:
        type: string
      LienControllingOfficeID:
        type: string
      LienControllingOfficeName:
        type: string
      MobileNumber:
        type: string
      NodalOfficeFacilityID:
        type: string
      NodalOfficeName:
        type: string
      Photo:
        type: string
      PhotoPath:
        type: string
      PostPreferences:
        items: {}
        type: array
      PresentDesignation:
        type: string
      PresentPostCode:
        type: string
      PresentPostDescription:
        type: string
      Remarks:
        type: string
      ReportingOfficeFacilityID:
        type: string
      ReportingOfficeName:
        type: string
      ServiceLength:
        items: {}
        type: array
      Signature:
        type: string
      SignaturePath:
        type: string
      TempHallTicket:
        type: string
      UnitPreferences:
        items: {}
        type: array
      UserID:
        type: integer
      WorkingOfficeCircleFacilityID:
        type: string
      WorkingOfficeCircleName:
        type: string
      WorkingOfficeDivisionFacilityID:
        type: string
      WorkingOfficeDivisionName:
        type: string
      WorkingOfficeFacilityID:
        type: string
      WorkingOfficeName:
        type: string
      WorkingOfficePincode:
        type: integer
      WorkingOfficeRegionFacilityID:
        type: string
      WorkingOfficeRegionName:
        type: string
      edges:
        $ref: '#/definitions/candidate_registation.EdgesLogdata'
      id:
        type: integer
    required:
    - ApplicationNumber
    - CategoryCode
    - CategoryDescription
    - CenterFacilityId
    - CenterId
    - CentrePreference
    - ClaimingQualifyingService
    - ControllingOfficeFacilityID
    - ControllingOfficeName
    - DOB
    - DisabilityTypeDescription
    - EmailID
    - EmployeeID
    - EmployeeName
    - ExamCode
    - ExamName
    - ExamShortName
    - ExamYear
    - FacilityUniqueID
    - FeederPostJoiningDate
    - Gender
    - LienControllingOfficeID
    - LienControllingOfficeName
    - MobileNumber
    - NodalOfficeFacilityID
    - NodalOfficeName
    - Photo
    - PhotoPath
    - PostPreferences
    - PresentDesignation
    - ServiceLength
    - Signature
    - SignaturePath
    - TempHallTicket
    - UnitPreferences
    - UserID
    - WorkingOfficeCircleFacilityID
    - WorkingOfficeCircleName
    - WorkingOfficeFacilityID
    - WorkingOfficeName
    - WorkingOfficePincode
    - edges
    - id
    type: object
  candidate_registation.ReApplicationGroupB:
    properties:
      ApplicationNumber:
        type: string
      CandidateRemarks:
        type: string
      CategoryCode:
        type: string
      CategoryDescription:
        type: string
      CenterFacilityId:
        type: string
      CenterId:
        type: integer
      CentrePreference:
        type: string
      ClaimingQualifyingService:
        type: string
      ControllingOfficeFacilityID:
        type: string
      ControllingOfficeName:
        type: string
      DCCS:
        type: string
      DOB:
        type: string
      DeputationControllingOfficeID:
        type: string
      DeputationControllingOfficeName:
        type: string
      DeputationOfficeFacilityID:
        type: string
      DeputationOfficeName:
        type: string
      DeputationOfficePincode:
        type: string
      DeputationOfficeUniqueId:
        type: string
      DeputationType:
        type: string
      DesignationID:
        type: string
      DisabilityPercentage:
        type: integer
      DisabilityTypeCode:
        type: string
      DisabilityTypeDescription:
        type: string
      DisabilityTypeID:
        type: string
      EducationCode:
        type: string
      EducationDescription:
        type: string
      EmailID:
        type: string
      EmployeeID:
        type: integer
      EmployeeName:
        type: string
      EmployeePost:
        type: string
      EntryPostCode:
        type: string
      EntryPostDescription:
        type: string
      ExamCode:
        type: integer
      ExamName:
        type: string
      ExamShortName:
        type: string
      ExamYear:
        type: string
      FacilityName:
        type: string
      FacilityUniqueID:
        type: string
      FeederPostCode:
        type: string
      FeederPostDescription:
        type: string
      FeederPostJoiningDate:
        type: string
      Gender:
        type: string
      LienControllingOfficeID:
        type: string
      LienControllingOfficeName:
        type: string
      MobileNumber:
        type: string
      NodalOfficeFacilityID:
        type: string
      NodalOfficeName:
        type: string
      Photo:
        type: string
      PhotoPath:
        type: string
      PresentDesignation:
        type: string
      PresentPostCode:
        type: string
      PresentPostDescription:
        type: string
      ReportingOfficeFacilityID:
        type: string
      ReportingOfficeName:
        type: string
      ServiceLength:
        items: {}
        type: array
      Signature:
        type: string
      SignaturePath:
        type: string
      TempHallTicket:
        type: string
      UserID:
        type: integer
      WorkingOfficeCircleFacilityID:
        type: string
      WorkingOfficeCircleName:
        type: string
      WorkingOfficeDivisionFacilityID:
        type: string
      WorkingOfficeDivisionName:
        type: string
      WorkingOfficeFacilityID:
        type: string
      WorkingOfficeName:
        type: string
      WorkingOfficePincode:
        type: integer
      WorkingOfficeRegionFacilityID:
        type: string
      WorkingOfficeRegionName:
        type: string
      edges:
        $ref: '#/definitions/candidate_registation.EdgesPSApplicationData'
      id:
        type: integer
    required:
    - CategoryCode
    - CategoryDescription
    - CenterFacilityId
    - CenterId
    - CentrePreference
    - ClaimingQualifyingService
    - ControllingOfficeFacilityID
    - ControllingOfficeName
    - DCCS
    - DOB
    - DisabilityTypeDescription
    - EmailID
    - EmployeeID
    - EmployeeName
    - EntryPostDescription
    - ExamCode
    - ExamName
    - ExamShortName
    - ExamYear
    - FacilityUniqueID
    - FeederPostCode
    - FeederPostDescription
    - FeederPostJoiningDate
    - Gender
    - LienControllingOfficeID
    - LienControllingOfficeName
    - MobileNumber
    - NodalOfficeFacilityID
    - NodalOfficeName
    - Photo
    - PhotoPath
    - PresentDesignation
    - PresentPostCode
    - PresentPostDescription
    - ServiceLength
    - Signature
    - SignaturePath
    - TempHallTicket
    - UserID
    - WorkingOfficeCircleFacilityID
    - WorkingOfficeCircleName
    - WorkingOfficeFacilityID
    - WorkingOfficeName
    - WorkingOfficePincode
    - edges
    type: object
  candidate_registation.RequestBody:
    properties:
      UserName:
        type: string
      current_password:
        type: string
      edges:
        $ref: '#/definitions/candidate_registation.EdgesLogdata'
      new_password:
        type: string
    required:
    - UserName
    - current_password
    - new_password
    type: object
  candidate_registation.ResubmitApplicationIp:
    properties:
      ApplicationNumber:
        type: string
      Cadre:
        type: string
      CandidateRemarks:
        type: string
      CategoryCode:
        type: string
      CategoryDescription:
        type: string
      CenterFacilityId:
        type: string
      CenterId:
        type: integer
      CentrePreference:
        type: string
      ClaimingQualifyingService:
        type: string
      ControllingOfficeFacilityID:
        type: string
      ControllingOfficeName:
        type: string
      DCCS:
        type: string
      DOB:
        type: string
      DeputationControllingOfficeID:
        type: string
      DeputationControllingOfficeName:
        type: string
      DeputationOfficeFacilityID:
        type: string
      DeputationOfficeName:
        type: string
      DeputationOfficePincode:
        type: string
      DeputationOfficeUniqueId:
        type: string
      DeputationType:
        type: string
      DesignationID:
        type: string
      DisabilityPercentage:
        type: integer
      DisabilityTypeCode:
        type: string
      DisabilityTypeDescription:
        type: string
      DisabilityTypeID:
        type: string
      EducationCode:
        type: string
      EducationDescription:
        type: string
      EmailID:
        type: string
      EmployeeID:
        type: integer
      EmployeeName:
        type: string
      EntryPostCode:
        type: string
      EntryPostDescription:
        type: string
      ExamCode:
        type: integer
      ExamName:
        type: string
      ExamShortName:
        type: string
      ExamYear:
        type: string
      FacilityUniqueID:
        type: string
      FeederPostCode:
        type: string
      FeederPostDescription:
        type: string
      FeederPostJoiningDate:
        type: string
      Gender:
        type: string
      LienControllingOfficeID:
        type: string
      LienControllingOfficeName:
        type: string
      MobileNumber:
        type: string
      NodalOfficeFacilityID:
        type: string
      NodalOfficeName:
        type: string
      Photo:
        type: string
      PhotoPath:
        type: string
      PresentDesignation:
        type: string
      PresentPostCode:
        type: string
      PresentPostDescription:
        type: string
      ReportingOfficeFacilityID:
        type: string
      ReportingOfficeName:
        type: string
      ServiceLength:
        items: {}
        type: array
      Signature:
        type: string
      SignaturePath:
        type: string
      TempHallTicket:
        type: string
      UserID:
        type: integer
      WorkingOfficeCircleFacilityID:
        type: string
      WorkingOfficeCircleName:
        type: string
      WorkingOfficeDivisionFacilityID:
        type: string
      WorkingOfficeDivisionName:
        type: string
      WorkingOfficeFacilityID:
        type: string
      WorkingOfficeName:
        type: string
      WorkingOfficePincode:
        type: integer
      WorkingOfficeRegionFacilityID:
        type: string
      WorkingOfficeRegionName:
        type: string
      edges:
        $ref: '#/definitions/candidate_registation.EdgesCircleData'
      id:
        type: integer
    required:
    - CategoryCode
    - CategoryDescription
    - CenterFacilityId
    - CenterId
    - CentrePreference
    - ClaimingQualifyingService
    - ControllingOfficeFacilityID
    - ControllingOfficeName
    - DOB
    - EmailID
    - EmployeeID
    - EmployeeName
    - ExamCode
    - ExamName
    - ExamShortName
    - ExamYear
    - FacilityUniqueID
    - FeederPostCode
    - FeederPostDescription
    - FeederPostJoiningDate
    - Gender
    - LienControllingOfficeID
    - LienControllingOfficeName
    - MobileNumber
    - NodalOfficeFacilityID
    - NodalOfficeName
    - Photo
    - PhotoPath
    - PresentDesignation
    - PresentPostCode
    - PresentPostDescription
    - ServiceLength
    - Signature
    - SignaturePath
    - TempHallTicket
    - WorkingOfficeCircleFacilityID
    - WorkingOfficeCircleName
    - WorkingOfficeFacilityID
    - WorkingOfficeName
    - WorkingOfficePincode
    - edges
    type: object
  candidate_registation.StrucAdminResetSaveNewPassword:
    properties:
      NewPassword:
        type: string
      OTP:
        type: integer
      UserName:
        type: string
      edges:
        $ref: '#/definitions/candidate_registation.EdgesLogdata'
    required:
    - NewPassword
    - OTP
    - UserName
    - edges
    type: object
  candidate_registation.StrucAdminResetValidateOTP:
    properties:
      OTP:
        type: integer
      UserName:
        type: string
      edges:
        $ref: '#/definitions/candidate_registation.EdgesLogdata'
    required:
    - OTP
    - UserName
    - edges
    type: object
  candidate_registation.StrucAdminResetValidateUserName:
    properties:
      UserName:
        type: string
      edges:
        $ref: '#/definitions/candidate_registation.EdgesLogdata'
    required:
    - UserName
    - edges
    type: object
  candidate_registation.StrucCreateEmployeeMaster:
    properties:
      CircleFacilityId:
        type: string
      ControllingAuthorityFacilityId:
        type: string
      ControllingAuthorityName:
        type: string
      CreatedByDesignation:
        type: string
      CreatedByEmpId:
        type: integer
      CreatedById:
        type: integer
      CreatedByUserName:
        type: string
      DOB:
        type: string
      EmailId:
        type: string
      EmployeeCategory:
        type: string
      EmployeeID:
        type: integer
      EmployeeName:
        type: string
      EmployeePost:
        type: string
      FacilityId:
        type: string
      Gender:
        type: string
      MobileNumber:
        type: string
      NodalAuthorityFaciliyId:
        type: string
      NodalAuthorityName:
        type: string
      OfficeName:
        type: string
      Pincode:
        type: string
      VerifyStatus:
        type: boolean
      edges:
        $ref: '#/definitions/candidate_registation.EdgesLogdata'
    required:
    - CircleFacilityId
    - ControllingAuthorityFacilityId
    - ControllingAuthorityName
    - CreatedByDesignation
    - CreatedByEmpId
    - CreatedById
    - CreatedByUserName
    - DOB
    - EmailId
    - EmployeeCategory
    - EmployeeID
    - EmployeeName
    - EmployeePost
    - FacilityId
    - Gender
    - MobileNumber
    - NodalAuthorityFaciliyId
    - NodalAuthorityName
    - OfficeName
    - Pincode
    - edges
    type: object
  candidate_registation.StrucModifyEmployeeMaster:
    properties:
      CircleFacilityId:
        type: string
      ControllingAuthorityFacilityId:
        type: string
      ControllingAuthorityName:
        type: string
      DOB:
        type: string
      EmailId:
        type: string
      EmployeeCategory:
        type: string
      EmployeeID:
        type: integer
      EmployeeName:
        type: string
      EmployeePost:
        type: string
      FacilityId:
        type: string
      Gender:
        type: string
      MobileNumber:
        type: string
      ModifiedByDesignantion:
        type: string
      ModifiedByEmpId:
        type: integer
      ModifiedById:
        type: integer
      ModifiedByUserName:
        type: string
      NodalAuthorityFaciliyId:
        type: string
      NodalAuthorityName:
        type: string
      OfficeName:
        type: string
      Pincode:
        type: string
      VerifyStatus:
        type: boolean
      edges:
        $ref: '#/definitions/candidate_registation.EdgesLogdata'
    required:
    - CircleFacilityId
    - ControllingAuthorityFacilityId
    - ControllingAuthorityName
    - DOB
    - EmailId
    - EmployeeCategory
    - EmployeeID
    - EmployeeName
    - EmployeePost
    - FacilityId
    - Gender
    - MobileNumber
    - ModifiedByDesignantion
    - ModifiedByEmpId
    - ModifiedById
    - ModifiedByUserName
    - NodalAuthorityFaciliyId
    - NodalAuthorityName
    - OfficeName
    - Pincode
    - VerifyStatus
    - edges
    type: object
  candidate_registation.StrucUserResetSaveNewPassword:
    properties:
      NewPassword:
        type: string
      OTP:
        type: integer
      UserName:
        type: string
      edges:
        $ref: '#/definitions/candidate_registation.EdgesLogdata'
    required:
    - NewPassword
    - OTP
    - UserName
    - edges
    type: object
  candidate_registation.StrucUserResetValidateOTP:
    properties:
      OTP:
        type: integer
      UserName:
        type: string
      edges:
        $ref: '#/definitions/candidate_registation.EdgesLogdata'
    required:
    - OTP
    - UserName
    - edges
    type: object
  candidate_registation.StrucUserResetValidateUserName:
    properties:
      UserName:
        type: string
      edges:
        $ref: '#/definitions/candidate_registation.EdgesLogdata'
    required:
    - UserName
    - edges
    type: object
  candidate_registation.UpdateAdminMasterStruc:
    properties:
      AdminUniqueID:
        type: integer
      Designation:
        type: string
      EmailID:
        type: string
      EmployeeId:
        type: integer
      EmployeeName:
        type: string
      FacilityID:
        type: string
      Mobile:
        type: string
      ModifiedByDesignation:
        type: string
      ModifiedByEmpId:
        type: integer
      ModifiedById:
        type: integer
      ModifiedByUserName:
        type: string
      RoleUserCode:
        type: integer
      RoleUserDescription:
        type: string
      UserName:
        type: string
      edges:
        $ref: '#/definitions/candidate_registation.EdgesLogdata'
    required:
    - AdminUniqueID
    - Designation
    - EmailID
    - EmployeeId
    - EmployeeName
    - FacilityID
    - Mobile
    - ModifiedByDesignation
    - ModifiedByEmpId
    - ModifiedById
    - ModifiedByUserName
    - RoleUserCode
    - RoleUserDescription
    - UserName
    - edges
    type: object
  candidate_registation.UpdateExamCentersInIP:
    properties:
      Cadre:
        type: string
      CandidateRemarks:
        type: string
      CategoryCode:
        type: string
      CategoryDescription:
        type: string
      CenterFacilityId:
        type: string
      CenterId:
        type: integer
      CentrePreference:
        type: string
      ClaimingQualifyingService:
        type: string
      ControllingOfficeFacilityID:
        type: string
      ControllingOfficeName:
        type: string
      DCCS:
        type: string
      DOB:
        type: string
      DeputationControllingOfficeID:
        type: string
      DeputationControllingOfficeName:
        type: string
      DeputationOfficeFacilityID:
        type: string
      DeputationOfficeName:
        type: string
      DeputationOfficePincode:
        type: string
      DeputationOfficeUniqueId:
        type: string
      DeputationType:
        type: string
      DesignationID:
        type: string
      DisabilityPercentage:
        type: integer
      DisabilityTypeCode:
        type: string
      DisabilityTypeDescription:
        type: string
      DisabilityTypeID:
        type: string
      EducationCode:
        type: string
      EducationDescription:
        type: string
      EmailID:
        type: string
      EmployeeID:
        type: integer
      EmployeeName:
        type: string
      EntryPostCode:
        type: string
      EntryPostDescription:
        type: string
      ExamCode:
        type: integer
      ExamName:
        type: string
      ExamShortName:
        type: string
      ExamYear:
        type: string
      FacilityUniqueID:
        type: string
      FeederPostCode:
        type: string
      FeederPostDescription:
        type: string
      FeederPostJoiningDate:
        type: string
      Gender:
        type: string
      LienControllingOfficeID:
        type: string
      LienControllingOfficeName:
        type: string
      MobileNumber:
        type: string
      NodalOfficeFacilityID:
        type: string
      NodalOfficeName:
        type: string
      Photo:
        type: string
      PhotoPath:
        type: string
      PresentDesignation:
        type: string
      PresentPostCode:
        type: string
      PresentPostDescription:
        type: string
      ReportingOfficeFacilityID:
        type: string
      ReportingOfficeName:
        type: string
      ServiceLength:
        items: {}
        type: array
      Signature:
        type: string
      SignaturePath:
        type: string
      TempHallTicket:
        type: string
      UserID:
        type: integer
      WorkingOfficeCircleFacilityID:
        type: string
      WorkingOfficeCircleName:
        type: string
      WorkingOfficeDivisionFacilityID:
        type: string
      WorkingOfficeDivisionName:
        type: string
      WorkingOfficeFacilityID:
        type: string
      WorkingOfficeName:
        type: string
      WorkingOfficePincode:
        type: integer
      WorkingOfficeRegionFacilityID:
        type: string
      WorkingOfficeRegionName:
        type: string
      edges:
        $ref: '#/definitions/candidate_registation.EdgesCircleData'
    type: object
  candidate_registation.UpdateNotificationStruct:
    properties:
      AdmitCardDate:
        type: string
      ApplicationCorrectionLastDate:
        type: string
      ApplicationCorrectionStartDate:
        type: string
      ApplicationEndDate:
        type: string
      ApplicationStartDate:
        type: string
      ApplicationVerificationLastDate:
        type: string
      CenterAllotmentEndDate:
        type: string
      CircleOfficeFacilityId:
        type: string
      CircleOfficeName:
        type: string
      CreatedBy:
        type: string
      CreatedByDesignation:
        type: string
      CreatedById:
        type: integer
      CreatedByName:
        type: string
      CrucialDate:
        items: {}
        type: array
      ExamCode:
        type: integer
      ExamName:
        type: string
      ExamShortName:
        type: string
      ExamYear:
        type: integer
      Id:
        type: integer
      IssuedBy:
        type: string
      NodalOfficerApprovalDate:
        type: string
      NotificationOrderNumber:
        type: string
      NotificationRemarks:
        type: string
      NotificationStatus:
        type: string
      OrderDate:
        type: string
      Papers:
        items: {}
        type: array
      ResubmittedApplicationVerificationDate:
        type: string
      UpdatedBy:
        type: string
      UserName:
        type: string
      edges:
        $ref: '#/definitions/candidate_registation.EdgesLogdata'
    required:
    - AdmitCardDate
    - ApplicationCorrectionStartDate
    - ApplicationEndDate
    - ApplicationVerificationLastDate
    - CenterAllotmentEndDate
    - CrucialDate
    - ExamCode
    - ExamName
    - ExamYear
    - NodalOfficerApprovalDate
    - OrderDate
    - Papers
    - ResubmittedApplicationVerificationDate
    - UserName
    type: object
  candidate_registation.UserRequest:
    properties:
      APSWorking:
        type: boolean
      APSWorkingRemStatus:
        type: boolean
      APSWorkingRemarks:
        type: string
      APSWorkingVerified:
        type: boolean
      Cadreid:
        type: integer
      CadreidRemStatus:
        type: boolean
      CadreidRemarks:
        type: string
      CadreidVerified:
        type: boolean
      DOB:
        type: string
      DOBRemStatus:
        type: boolean
      DOBRemarks:
        type: string
      DOBVerified:
        type: boolean
      EmployeedID:
        type: string
      EmployeedName:
        type: string
      Gender:
        type: string
      GenderRemStatus:
        type: boolean
      GenderRemarks:
        type: string
      GenderVerified:
        type: boolean
      IDRemStatus:
        type: boolean
      IDRemarks:
        type: string
      IDVerified:
        type: boolean
      NameRemStatus:
        type: boolean
      NameRemarks:
        type: string
      NameVerified:
        type: boolean
      OfficeID:
        type: integer
      OfficeIDRemStatus:
        type: boolean
      OfficeIDRemarks:
        type: string
      OfficeIDVerified:
        type: boolean
      PH:
        type: boolean
      PHDetails:
        type: string
      PHDetailsRemStatus:
        type: boolean
      PHDetailsRemarks:
        type: string
      PHDetailsVerified:
        type: boolean
      PHRemStatus:
        type: boolean
      PHRemarks:
        type: string
      PHVerified:
        type: boolean
      Profilestatus:
        type: boolean
      id:
        type: integer
    type: object
  candidate_registation.VerifyApplicationGDSPM:
    properties:
      AppliactionRemarks:
        type: string
      ApplicationNumber:
        type: string
      CA_EmployeeDesignation:
        type: string
      CA_EmployeeId:
        type: string
      CA_GeneralRemarks:
        type: string
      CA_Remarks:
        type: string
      CA_UserName:
        type: string
      DisciplinaryCaseStatus:
        description: new coloumn
        type: boolean
      EmployeeID:
        type: integer
      ExamCode:
        type: integer
      ExamName:
        type: string
      ExamShortName:
        type: string
      ExamYear:
        type: string
      GenerateHallTicketFlag:
        type: boolean
      NonQualifyingService:
        items: {}
        type: array
      Post:
        type: string
      PunishmentStatus:
        description: new coloumn
        type: boolean
      RecommendedStatus:
        type: string
      ServiceLength:
        items: {}
        type: array
      UserID:
        type: integer
      edges:
        $ref: '#/definitions/candidate_registation.EdgesGDSPMApplicationData'
      id:
        type: integer
    required:
    - ApplicationNumber
    - CA_EmployeeId
    - CA_UserName
    - EmployeeID
    - ServiceLength
    - id
    type: object
  candidate_registation.VerifyApplicationGroupB:
    properties:
      AppliactionRemarks:
        type: string
      ApplicationNumber:
        type: string
      CA_EmployeeDesignation:
        type: string
      CA_EmployeeId:
        type: string
      CA_GeneralRemarks:
        type: string
      CA_Remarks:
        type: string
      CA_UserName:
        type: string
      ControllingOfficeFacilityID:
        type: string
      DisciplinaryCaseStatus:
        type: boolean
      EmployeeID:
        type: integer
      ExamCode:
        type: integer
      ExamName:
        type: string
      ExamShortName:
        type: string
      ExamYear:
        type: string
      GenerateHallTicketFlag:
        type: boolean
      NonQualifyingService:
        items: {}
        type: array
      PunishmentStatus:
        type: boolean
      RecommendedStatus:
        type: string
      ServiceLength:
        items: {}
        type: array
      UserID:
        type: integer
      edges:
        $ref: '#/definitions/candidate_registation.EdgesPSApplicationData'
      id:
        type: integer
    required:
    - ApplicationNumber
    - CA_EmployeeId
    - CA_UserName
    - ControllingOfficeFacilityID
    - EmployeeID
    - ServiceLength
    - id
    type: object
  candidate_registation.VerifyApplicationIp:
    properties:
      AppliactionRemarks:
        type: string
      ApplicationNumber:
        type: string
      CA_EmployeeDesignation:
        type: string
      CA_EmployeeId:
        type: string
      CA_GeneralRemarks:
        type: string
      CA_Remarks:
        type: string
      CA_UserName:
        type: string
      DisciplinaryCaseStatus:
        description: new coloumn
        type: boolean
      EmployeeID:
        type: integer
      ExamCode:
        type: integer
      ExamName:
        type: string
      ExamShortName:
        type: string
      ExamYear:
        type: string
      GenerateHallTicketFlag:
        type: boolean
      NonQualifyingService:
        items: {}
        type: array
      PunishmentStatus:
        description: new coloumn
        type: boolean
      RecommendedStatus:
        type: string
      ServiceLength:
        items: {}
        type: array
      UserID:
        type: integer
      edges:
        $ref: '#/definitions/candidate_registation.EdgesIPApplicatinData'
      id:
        type: integer
    required:
    - ApplicationNumber
    - CA_EmployeeId
    - CA_UserName
    - EmployeeID
    - ServiceLength
    - id
    type: object
  candidate_registation.VerifyApplicationMTSPM:
    properties:
      AppliactionRemarks:
        type: string
      ApplicationNumber:
        type: string
      CA_EmployeeDesignation:
        type: string
      CA_EmployeeId:
        type: string
      CA_GeneralRemarks:
        type: string
      CA_Remarks:
        type: string
      CA_UserName:
        type: string
      DisciplinaryCaseStatus:
        description: new coloumn
        type: boolean
      EmployeeID:
        type: integer
      ExamCode:
        type: integer
      ExamName:
        type: string
      ExamShortName:
        type: string
      ExamYear:
        type: string
      GenerateHallTicketFlag:
        type: boolean
      NonQualifyingService:
        items: {}
        type: array
      PunishmentStatus:
        description: new coloumn
        type: boolean
      RecommendedStatus:
        type: string
      ServiceLength:
        items: {}
        type: array
      UserID:
        type: integer
      edges:
        $ref: '#/definitions/candidate_registation.EdgesMTSPMApplicationData'
      id:
        type: integer
    required:
    - ApplicationNumber
    - CA_EmployeeId
    - CA_UserName
    - EmployeeID
    - ServiceLength
    - id
    type: object
  candidate_registation.VerifyApplicationVAGDSPM:
    properties:
      ApplicationNumber:
        type: string
      EmployeeID:
        type: integer
      ExamCode:
        type: integer
      ExamName:
        type: string
      ExamShortName:
        type: string
      ExamYear:
        type: string
      VA_EmployeeDesignation:
        type: string
      VA_EmployeeId:
        type: string
      VA_GeneralRemarks:
        type: string
      VA_UserName:
        type: string
      edges:
        $ref: '#/definitions/candidate_registation.EdgesLogdata'
      id:
        type: integer
    required:
    - ApplicationNumber
    - EmployeeID
    - ExamCode
    - ExamName
    - ExamShortName
    - ExamYear
    - VA_EmployeeId
    - VA_GeneralRemarks
    - VA_UserName
    - id
    type: object
  handlers.ApplicationGroupBCenter:
    properties:
      CandidateRemarks:
        type: string
      CategoryCode:
        type: string
      CategoryDescription:
        type: string
      CenterFacilityId:
        type: string
      CenterId:
        type: integer
      CentrePreference:
        type: string
      ClaimingQualifyingService:
        type: string
      ControllingOfficeFacilityID:
        type: string
      ControllingOfficeName:
        type: string
      DCCS:
        type: string
      DOB:
        type: string
      DeputationControllingOfficeID:
        type: string
      DeputationControllingOfficeName:
        type: string
      DeputationOfficeFacilityID:
        type: string
      DeputationOfficeName:
        type: string
      DeputationOfficePincode:
        type: string
      DeputationOfficeUniqueId:
        type: string
      DeputationType:
        type: string
      DesignationID:
        type: string
      DisabilityPercentage:
        type: integer
      DisabilityTypeCode:
        type: string
      DisabilityTypeDescription:
        type: string
      DisabilityTypeID:
        type: string
      EducationCode:
        type: string
      EducationDescription:
        type: string
      EmailID:
        type: string
      EmployeeID:
        type: integer
      EmployeeName:
        type: string
      EmployeePost:
        type: string
      EntryPostCode:
        type: string
      EntryPostDescription:
        type: string
      ExamCode:
        type: integer
      ExamName:
        type: string
      ExamShortName:
        type: string
      ExamYear:
        type: string
      FacilityName:
        type: string
      FacilityUniqueID:
        type: string
      FeederPostCode:
        type: string
      FeederPostDescription:
        type: string
      FeederPostJoiningDate:
        type: string
      Gender:
        type: string
      LienControllingOfficeID:
        type: string
      LienControllingOfficeName:
        type: string
      MobileNumber:
        type: string
      NodalOfficeFacilityID:
        type: string
      NodalOfficeName:
        type: string
      Photo:
        type: string
      PhotoPath:
        type: string
      PresentDesignation:
        type: string
      PresentPostCode:
        type: string
      PresentPostDescription:
        type: string
      ReportingOfficeFacilityID:
        type: string
      ReportingOfficeName:
        type: string
      ServiceLength:
        items: {}
        type: array
      Signature:
        type: string
      SignaturePath:
        type: string
      TempHallTicket:
        type: string
      UserID:
        type: integer
      WorkingOfficeCircleFacilityID:
        type: string
      WorkingOfficeCircleName:
        type: string
      WorkingOfficeDivisionFacilityID:
        type: string
      WorkingOfficeDivisionName:
        type: string
      WorkingOfficeFacilityID:
        type: string
      WorkingOfficeName:
        type: string
      WorkingOfficePincode:
        type: integer
      WorkingOfficeRegionFacilityID:
        type: string
      WorkingOfficeRegionName:
        type: string
      edges:
        $ref: '#/definitions/candidate_registation.EdgesPSApplicationData'
    type: object
  handlers.ApplicationMTSPMUpdatecenter:
    properties:
      Cadre:
        type: string
      CandidateRemarks:
        type: string
      CategoryCode:
        type: string
      CategoryDescription:
        type: string
      CenterFacilityId:
        type: string
      CenterId:
        type: integer
      CentrePreference:
        type: string
      ClaimingQualifyingService:
        type: string
      ControllingOfficeFacilityID:
        type: string
      ControllingOfficeName:
        type: string
      DCCS:
        type: string
      DOB:
        type: string
      DeputationControllingOfficeID:
        type: string
      DeputationControllingOfficeName:
        type: string
      DeputationOfficeFacilityID:
        type: string
      DeputationOfficeName:
        type: string
      DeputationOfficePincode:
        type: string
      DeputationOfficeUniqueId:
        type: string
      DeputationType:
        type: string
      DesignationID:
        type: string
      DisabilityPercentage:
        type: integer
      DisabilityTypeCode:
        type: string
      DisabilityTypeDescription:
        type: string
      DisabilityTypeID:
        type: string
      EducationCode:
        type: string
      EducationDescription:
        type: string
      EmailID:
        type: string
      EmployeeID:
        type: integer
      EmployeeName:
        type: string
      EmployeePost:
        type: string
      EntryPostCode:
        type: string
      EntryPostDescription:
        type: string
      ExamCode:
        type: integer
      ExamName:
        type: string
      ExamShortName:
        type: string
      ExamYear:
        type: string
      FacilityName:
        type: string
      FacilityUniqueID:
        type: string
      FeederPostCode:
        type: string
      FeederPostDescription:
        type: string
      FeederPostJoiningDate:
        type: string
      GDSEngagement:
        items: {}
        type: array
      Gender:
        type: string
      LienControllingOfficeID:
        type: string
      LienControllingOfficeName:
        type: string
      MobileNumber:
        type: string
      NodalOfficeFacilityID:
        type: string
      NodalOfficeName:
        type: string
      Photo:
        type: string
      PhotoPath:
        type: string
      PostPreferences:
        items: {}
        type: array
      PresentDesignation:
        type: string
      PresentPostCode:
        type: string
      PresentPostDescription:
        type: string
      ReportingOfficeFacilityID:
        type: string
      ReportingOfficeName:
        type: string
      ServiceLength:
        items: {}
        type: array
      Signature:
        type: string
      SignaturePath:
        type: string
      TempHallTicket:
        type: string
      UnitPreferences:
        items: {}
        type: array
      UserID:
        type: integer
      WorkingOfficeCircleFacilityID:
        type: string
      WorkingOfficeCircleName:
        type: string
      WorkingOfficeDivisionFacilityID:
        type: string
      WorkingOfficeDivisionName:
        type: string
      WorkingOfficeFacilityID:
        type: string
      WorkingOfficeName:
        type: string
      WorkingOfficePincode:
        type: integer
      WorkingOfficeRegionFacilityID:
        type: string
      WorkingOfficeRegionName:
        type: string
      edges:
        $ref: '#/definitions/candidate_registation.EdgesLogdata'
    type: object
  handlers.CenterResponse:
    properties:
      Address:
        type: string
      CenterCityName:
        type: string
      ExamCenterName:
        type: string
      ID:
        type: integer
      Landmark:
        type: string
      Message:
        type: string
      Pincode:
        type: integer
      Status:
        type: boolean
    type: object
  handlers.CenterrResponse:
    properties:
      data: {}
      dataexists:
        type: boolean
      message:
        type: string
      success:
        type: boolean
    type: object
  handlers.DisabilityRequest:
    properties:
      CreatedByDesignation:
        type: string
      CreatedByEmployeeId:
        type: string
      CreatedById:
        type: integer
      CreatedByUserName:
        type: string
      CreatedDate:
        type: string
      DeletedByDesignation:
        type: string
      DeletedByEmployeeId:
        type: string
      DeletedById:
        type: integer
      DeletedByUserName:
        type: string
      DeletedDate:
        type: string
      DisabilityFlag:
        type: string
      DisabilityPercentage:
        type: integer
      DisabilityTypeCode:
        type: string
      DisabilityTypeDescription:
        type: string
      HallCategoryCode:
        type: string
      OrderNumber:
        type: string
      Statuss:
        type: string
      VerifiedByDesignation:
        type: string
      VerifiedByEmployeeId:
        type: string
      VerifiedById:
        type: integer
      VerifiedByUserName:
        type: string
      VerifiedDate:
        type: string
    type: object
  handlers.DisabilityResponse:
    properties:
      data:
        properties:
          message:
            type: string
        type: object
    type: object
  handlers.ExamCalendarsResponse:
    properties:
      data: {}
      dataexists:
        type: boolean
      message:
        type: string
      success:
        type: boolean
    type: object
  handlers.ExamCityCenterCreateRequest:
    properties:
      CenterCityName:
        type: string
      CentreCityName:
        type: string
      CentreCode:
        type: integer
      CircleCityName:
        type: string
      CircleID:
        type: integer
      ConductedBy:
        type: string
      CreatedByDesignation:
        type: string
      CreatedByEmpId:
        type: integer
      CreatedById:
        type: integer
      CreatedByUserName:
        type: string
      DivisionCode:
        type: integer
      DivisionName:
        type: string
      ExamCode:
        type: integer
      ExamName:
        type: string
      ExamShortName:
        type: string
      ExamYear:
        type: integer
      NodalOfficeFacilityID:
        type: string
      NodalOfficeName:
        type: string
      NotificationCode:
        type: integer
      NotificationNumber:
        type: string
      RegionCityName:
        type: string
      RegionCode:
        type: integer
      RegionID:
        type: integer
      RegionName:
        type: string
      Remarks:
        type: string
      Status:
        type: string
      UpdatedAt:
        type: string
      UpdatedBy:
        type: string
    required:
    - ExamCode
    - ExamName
    - ExamYear
    type: object
  handlers.ExamCityCenterCreateResponse:
    properties:
      data:
        properties:
          message:
            type: string
        type: object
    type: object
  handlers.ExamResponse:
    properties:
      data: {}
      dataexists:
        type: boolean
      message:
        type: string
      success:
        type: boolean
    type: object
  handlers.ExamStatisticsResponse:
    properties:
      data:
        items:
          additionalProperties: true
          type: object
        type: array
      dataexists:
        type: boolean
      message:
        type: string
      success:
        type: boolean
    type: object
  handlers.GenerateHallticketRequestBody:
    properties:
      ExamCode:
        type: integer
      ExamYear:
        type: string
      nodalOfficerFacilityID:
        type: string
    type: object
  handlers.LogData:
    properties:
      action:
        type: string
      browser:
        type: string
      devicetype:
        type: string
      eventtime:
        type: string
      ipaddress:
        type: string
      latitude:
        type: number
      longitude:
        type: number
      os:
        type: string
      remarks:
        type: string
      userid:
        type: string
      usertype:
        type: string
    type: object
  handlers.RequestBody:
    properties:
      current_password:
        type: string
      edges:
        properties:
          LogData:
            items:
              $ref: '#/definitions/handlers.LogData'
            type: array
        type: object
      new_password:
        type: string
    required:
    - current_password
    - new_password
    type: object
  handlers.requestBody:
    properties:
      ExamCode:
        type: integer
      ExamYear:
        type: string
      nodalOfficerFacilityID:
        type: string
    type: object
  handlers.requestBodyy:
    properties:
      ExamCode:
        type: integer
      ExamYear:
        type: string
      nodalOfficerFacilityID:
        type: string
    type: object
  start.AdminCreationResponse:
    properties:
      AuthorityFacilityName:
        type: string
      CircleOfficeFacilityId:
        type: string
      CircleOfficeName:
        type: string
      CreatedByDesignation:
        type: string
      CreatedByEmpId:
        type: integer
      CreatedById:
        type: integer
      CreatedByUserName:
        type: string
      Designation:
        type: string
      EmailID:
        type: string
      EmployeeId:
        type: integer
      EmployeeName:
        type: string
      FacilityID:
        type: string
      FacilityIdUniqueid:
        type: integer
      FacilityType:
        type: string
      Mobile:
        type: string
      ReportingOfficeFacilityID:
        type: string
      ReportingOfficeFacilityName:
        type: string
      RoleUserCode:
        type: integer
      RoleUserDescription:
        type: string
      UserName:
        type: string
    type: object
  start.AdminUser:
    properties:
      AuthorityFacilityName:
        type: string
      CircleOfficeFacilityID:
        type: string
      CircleOfficeName:
        type: string
      Designation:
        type: string
      EmployeeID:
        type: string
      EmployeeName:
        type: string
      FacilityID:
        type: string
      FacilityType:
        type: string
      ReportingOfficeFacilityID:
        type: string
      ReportingOfficeFacilityName:
        type: string
      RoleUserCode:
        type: string
      RoleUserDescription:
        type: string
      Token:
        type: string
      id:
        type: integer
    type: object
  start.AdminUserResponse:
    properties:
      data: {}
      dataexists:
        type: boolean
      message:
        type: string
      success:
        type: boolean
    type: object
  start.AdminUserr:
    properties:
      AuthorityFacilityName:
        type: string
      CAUsername:
        type: string
      Designation:
        type: string
      Email:
        type: string
      EmployeeID:
        type: string
      EmployeeName:
        type: string
      FacilityID:
        type: string
      Mobile:
        type: string
      RoleUserCode:
        type: string
      SMSStatus:
        type: string
      UserName:
        type: string
    type: object
  start.ApplicationData:
    properties:
      Application Status:
        type: string
      ApplicationNumber:
        type: string
      Email:
        type: string
      EmailStatus:
        type: string
      EmployeeID:
        type: integer
      Mobile:
        type: string
      SMSStatus:
        type: string
    type: object
  start.CreateApplicationResponse:
    properties:
      data:
        $ref: '#/definitions/start.ApplicationData'
      dataexists:
        type: boolean
      message:
        type: string
      success:
        type: boolean
    type: object
  start.CreateGDSPMResponse:
    properties:
      data:
        $ref: '#/definitions/start.ResponseData'
      dataexists:
        type: boolean
      message:
        type: string
      success:
        type: boolean
    type: object
  start.EmployeeMasterResponse:
    properties:
      data: {}
      dataexists:
        type: boolean
      message:
        type: string
      success:
        type: boolean
    type: object
  start.ErrorResponse:
    properties:
      error:
        type: string
    type: object
  start.FirstTimeUserData:
    properties:
      Email:
        type: string
      EmailStatus:
        type: string
      EmployeeID:
        type: integer
      Mobile:
        type: string
      RoleUserCode:
        type: string
      SMSStatus:
        type: string
      UserName:
        type: string
    type: object
  start.GetAllCAPendingVerificationsResponse:
    properties:
      data: {}
      dataexists:
        type: boolean
      message:
        type: string
      success:
        type: boolean
    type: object
  start.GetApplicationsResponse:
    properties:
      data: {}
      dataexists:
        type: boolean
      message:
        type: string
      success:
        type: boolean
    type: object
  start.GetGDSPMApplicationsResponse:
    properties:
      data: {}
      dataexists:
        type: boolean
      message:
        type: string
      success:
        type: boolean
    type: object
  start.GetGDSPMCAPendingOldRemarksByEmpIdData:
    properties:
      applicationremarks:
        type: string
      applicationstatus:
        type: string
      employeeid:
        type: integer
    type: object
  start.GetGDSPMCAPendingOldRemarksByEmpIdResponse:
    properties:
      data:
        $ref: '#/definitions/start.GetGDSPMCAPendingOldRemarksByEmpIdData'
      dataexists:
        type: boolean
      message:
        type: string
      success:
        type: boolean
    type: object
  start.PsGroupBResponse:
    properties:
      data:
        $ref: '#/definitions/start.PsgroupBData'
      dataexists:
        type: boolean
      message:
        type: string
      success:
        type: boolean
    type: object
  start.PsgroupBData:
    properties:
      Application Status:
        type: string
      ApplicationNumber:
        type: string
      Email ID:
        type: string
      EmailDeliveryStatus:
        type: boolean
      EmployeeID:
        type: integer
      Mobile:
        type: string
      SMSDeliveryStatus:
        type: boolean
    type: object
  start.ResponseData:
    properties:
      ApplicationNumber:
        type: string
      ApplicationStatus:
        type: string
      Email:
        type: string
      EmailStatus:
        type: string
      EmployeeID:
        type: integer
      Mobile:
        type: string
      SMSStatus:
        type: string
    type: object
  start.RollmasterResponse:
    properties:
      RoleUserCode:
        type: integer
      created_date:
        type: string
      role_name:
        type: string
      status:
        type: boolean
    type: object
  start.UpdateCenterCodeResponse:
    properties:
      data:
        type: object
      dataexists:
        type: boolean
      message:
        type: string
      success:
        type: boolean
    type: object
  start.UserResetSaveNewPasswordResponse:
    properties:
      UserName:
        type: string
      message:
        type: string
    type: object
  start.UserResetValidateOTPResponse:
    properties:
      data: {}
      dataexists:
        type: boolean
      message:
        type: string
      success:
        type: boolean
    type: object
  start.UserResetValidateUserNameData:
    properties:
      Email:
        type: string
      EmployeeID:
        type: string
      Mobile:
        type: string
      RoleUserCode:
        type: string
      SMSStatus:
        type: string
      UserName:
        type: string
    type: object
  start.UserResetValidateUserNameResponse:
    properties:
      data:
        $ref: '#/definitions/start.UserResetValidateUserNameData'
      dataexists:
        type: boolean
      message:
        type: string
      success:
        type: boolean
    type: object
  start.UserResponse:
    properties:
      data:
        $ref: '#/definitions/start.FirstTimeUserData'
      dataexists:
        type: boolean
      message:
        type: string
      success:
        type: boolean
    type: object
  start.VerifyAdminLoginResponse:
    properties:
      data:
        $ref: '#/definitions/start.AdminUser'
      dataexists:
        type: boolean
      message:
        type: string
      success:
        type: boolean
    type: object
  start.VerifyAdminUserLoginResponse:
    properties:
      data:
        $ref: '#/definitions/start.AdminUserr'
      dataexists:
        type: boolean
      message:
        type: string
      success:
        type: boolean
    type: object
  start.VerifyGDSPMVAApplicationsData:
    properties:
      ApplicationRemarks:
        type: string
      ApplicationStatus:
        type: string
      EmployeeID:
        type: integer
      RoleUserCode:
        type: string
    type: object
  start.VerifyGDSPMVAApplicationsResponse:
    properties:
      data:
        $ref: '#/definitions/start.VerifyGDSPMVAApplicationsData'
      dataexists:
        type: boolean
      message:
        type: string
      success:
        type: boolean
    type: object
  start.VerifyIPApplicationData:
    properties:
      ApplicationNumber:
        type: string
      ApplicationRemarks:
        type: string
      ApplicationStatus:
        type: string
      Email:
        type: string
      EmailStatus:
        type: string
      EmployeeID:
        type: string
      Mobile:
        type: string
      RoleUserCode:
        type: string
      SMSStatus:
        type: string
    type: object
  start.VerifyIPApplicationResponse:
    properties:
      data:
        $ref: '#/definitions/start.VerifyIPApplicationData'
      dataexists:
        type: boolean
      message:
        type: string
      success:
        type: boolean
    type: object
host: localhost:8080
info:
  contact: {}
  description: This is a departmental examination API with Swagger documentation
  title: Departmental Examination API
  version: "1.0"
paths:
  /deptexam/ActiveExamsByYear/{selectedyear}:
    get:
      description: Get active exams for a given exam year without specifying CA Facility
        ID.
      parameters:
      - description: Selected Year
        in: path
        name: selectedyear
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Active Exam fetched successfully by Exam year WithoutCAFacilityID
          schema:
            $ref: '#/definitions/handlers.ExamResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "401":
          description: Unauthorized error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "403":
          description: Forbidden error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "404":
          description: No Articles are invoiced to the beat
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
      summary: Query Active Exams by Exam Year without CA Facility ID
      tags:
      - Exam
  /deptexam/ActiveExamsByYear/{selectedyear}/{circleidcontext}:
    get:
      description: Get active exams for a given exam year and facility ID.
      parameters:
      - description: Selected Year
        in: path
        name: selectedyear
        required: true
        type: integer
      - description: Circle ID Context
        in: path
        name: circleidcontext
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Active Exam fetched successfully by Exam year
          schema:
            $ref: '#/definitions/handlers.ExamResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "401":
          description: Unauthorized error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "403":
          description: Forbidden error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "404":
          description: No Articles are invoiced to the beat
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
      summary: Query Active Exams by Exam Year
      tags:
      - Exam
  /deptexam/CircleHeadQuarters/{id2}:
    get:
      consumes:
      - application/json
      description: Get Circle HeadQuarters details based on Exam Conducted By
      parameters:
      - description: ID of the Exam Conducted By
        in: path
        name: id2
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: CircleHeadQuarters details extracted
          schema:
            $ref: '#/definitions/start.EmployeeMasterResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "401":
          description: Unauthorized error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "403":
          description: Forbidden error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "404":
          description: Facilities not found
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
      summary: Query Circle HeadQuarters By Exam Conducted By
      tags:
      - Facilities
  /deptexam/CreateExamCityCenters:
    post:
      consumes:
      - application/json
      description: Create a new exam city center with the input payload
      parameters:
      - description: Exam City Center
        in: body
        name: examCityCenter
        required: true
        schema:
          $ref: '#/definitions/handlers.ExamCityCenterCreateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Exam City Center created successfully
          schema:
            $ref: '#/definitions/handlers.ExamCityCenterCreateResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "401":
          description: Unauthorized error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "403":
          description: Forbidden error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "404":
          description: No Articles are invoiced to the beat
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
      summary: Create a new exam city center
      tags:
      - ExamCityCenters
  /deptexam/GetFacilitiesByCircleOfficeId/{id}:
    get:
      consumes:
      - application/json
      description: Retrieve facilities by Circle Office ID
      parameters:
      - description: Circle Office ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/start.EmployeeMasterResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "401":
          description: Unauthorized error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "403":
          description: Forbidden error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "404":
          description: Facilities not found
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
      summary: Get Facilities By Circle Office ID
      tags:
      - Facilities
  /deptexam/QueryCityNamesByNotiIDFromExamCenter/{id1}/{id2}:
    get:
      description: Get city names associated with a specific exam ID from the exam
        center.
      parameters:
      - description: ID1
        in: path
        name: id1
        required: true
        type: string
      - description: ID2
        in: path
        name: id2
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: City Names fetched successfully by Exam year
          schema:
            $ref: '#/definitions/handlers.ExamResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "401":
          description: Unauthorized error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "403":
          description: Forbidden error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "404":
          description: No Articles are invoiced to the beat
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
      summary: Query City Names by Exam ID from Exam Center
      tags:
      - Exam
  /deptexam/QueryCityNamesByNotificationIDFromExamCenter/{id1}/{id2}/{id3}:
    get:
      description: Get city names associated with a specific notification ID, exam
        ID, and code from the exam center.
      parameters:
      - description: Notification ID
        in: path
        name: id1
        required: true
        type: string
      - description: Exam ID
        in: path
        name: id2
        required: true
        type: integer
      - description: Code
        in: path
        name: id3
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Active Exam fetched successfully by Notification ID
          schema:
            $ref: '#/definitions/handlers.ExamResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "401":
          description: Unauthorized error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "403":
          description: Forbidden error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "404":
          description: No Articles are invoiced to the beat
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
      summary: Query City Names by Notification ID from Exam Center
      tags:
      - Exam
  /deptexam/QueryExamCityNamesForIPExam/{notificationnumber}/{examyear}/{examcode}:
    get:
      description: Get city names associated with a specific notification number,
        exam year, and exam code for IP Exam.
      parameters:
      - description: Notification Number
        in: path
        name: notificationnumber
        required: true
        type: string
      - description: Exam Year
        in: path
        name: examyear
        required: true
        type: integer
      - description: Exam Code
        in: path
        name: examcode
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Exam city extracted successfully
          schema:
            $ref: '#/definitions/handlers.ExamResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "401":
          description: Unauthorized error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "403":
          description: Forbidden error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "404":
          description: No Articles are invoiced to the beat
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
      summary: Query Exam City Names for IP Exam
      tags:
      - Exam
  /deptexam/RegionHeadQuarters/{id2}:
    get:
      consumes:
      - application/json
      description: Get Region HeadQuarters details based on Exam Conducted By
      parameters:
      - description: ID of the Exam Conducted By
        in: path
        name: id2
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/start.EmployeeMasterResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "401":
          description: Unauthorized error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "403":
          description: Forbidden error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "404":
          description: Facilities not found
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
      summary: Query Region HeadQuarters By Exam Conducted By
      tags:
      - Facilities
  /deptexam/center/get/{id}:
    get:
      consumes:
      - application/json
      description: Get details of a specific exam center by ID
      parameters:
      - description: Center ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Active Exam fetched successfully by Exam year
          schema:
            $ref: '#/definitions/handlers.CenterrResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "401":
          description: Unauthorized error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "403":
          description: Forbidden error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "404":
          description: No Articles are invoiced to the beat
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
      summary: Get Center ID
      tags:
      - Nodal
  /deptexam/center/submit:
    post:
      consumes:
      - application/json
      description: Create a new exam center
      parameters:
      - description: Exam Center Data
        in: body
        name: examCenter
        required: true
        schema:
          $ref: '#/definitions/candidate_registation.CenterReq'
      produces:
      - application/json
      responses:
        "200":
          description: New Exam Centre Created successfully
          schema:
            $ref: '#/definitions/handlers.CenterrResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "401":
          description: Unauthorized error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "403":
          description: Forbidden error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "404":
          description: No Articles are invoiced to the beat
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
      summary: Create Exam Center
      tags:
      - Nodal
  /deptexam/center/update/{id}:
    put:
      consumes:
      - application/json
      description: Update an existing exam center by ID
      parameters:
      - description: Center ID
        in: path
        name: id
        required: true
        type: integer
      - description: Exam Center Data
        in: body
        name: center
        required: true
        schema:
          $ref: '#/definitions/candidate_registation.CenterRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Exam Centre Updated
          schema:
            $ref: '#/definitions/handlers.CenterResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "401":
          description: Unauthorized error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "403":
          description: Forbidden error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "404":
          description: No Articles are invoiced to the beat
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
      summary: Update an Exam Center
      tags:
      - ExamCenters
  /deptexam/centers/{id1}/{id2}/{id3}/{id4}:
    get:
      consumes:
      - application/json
      description: Get exam centres based on Nodal Office ID, Exam Code, and City
        ID
      parameters:
      - description: Exam Code
        in: path
        name: id1
        required: true
        type: integer
      - description: Nodal Office ID
        in: path
        name: id2
        required: true
        type: string
      - description: Additional Parameter
        in: path
        name: id3
        required: true
        type: string
      - description: City ID
        in: path
        name: id4
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: 'Exam Center fetched successfully by NodalOffice ID '
          schema:
            $ref: '#/definitions/handlers.CenterrResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "401":
          description: Unauthorized error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "403":
          description: Forbidden error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "404":
          description: No Articles are invoiced to the beat
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
      summary: Get Exam Centres by Nodal Office ID and Exam Code
      tags:
      - Nodal
  /deptexam/centersByCircleID/{id}:
    get:
      consumes:
      - application/json
      description: Retrieve all exam city centers for a specified circle ID
      parameters:
      - description: Circle ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Exam City Center retrieved successfully
          schema:
            $ref: '#/definitions/handlers.ExamCityCenterCreateResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "401":
          description: Unauthorized error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "403":
          description: Forbidden error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "404":
          description: No Articles are invoiced to the beat
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
      summary: Get Exam City Centers by Circle ID
      tags:
      - ExamCityCenters
  /deptexam/centersBycity/{id}:
    get:
      consumes:
      - application/json
      description: Retrieve all exam city centers for a specified city
      parameters:
      - description: City ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Exam City Center retrieved  successfully
          schema:
            $ref: '#/definitions/handlers.ExamCityCenterCreateResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "401":
          description: Unauthorized error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "403":
          description: Forbidden error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "404":
          description: No Articles are invoiced to the beat
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
      summary: Get Exam City Centers by City
      tags:
      - ExamCityCenters
  /deptexam/employeedisbilitytypes:
    get:
      consumes:
      - application/json
      description: Get all disability types from the database
      produces:
      - application/json
      responses:
        "200":
          description: Successfully all disability types Retrieved
          schema:
            $ref: '#/definitions/handlers.DisabilityResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "401":
          description: Unauthorized error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "403":
          description: Forbidden error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "404":
          description: No Articles are invoiced to the beat
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
      summary: Get all disability types
      tags:
      - Disability
    post:
      consumes:
      - application/json
      description: Create a new Disability type with given parameters
      parameters:
      - description: Disability data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.DisabilityRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully created the Disability Types
          schema:
            type: string
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "401":
          description: Unauthorized error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "403":
          description: Forbidden error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "404":
          description: No Articles are invoiced to the beat
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
      summary: Create a new Disability type
      tags:
      - Disability
  /deptexam/examcalendars:
    get:
      consumes:
      - application/json
      description: Get a list of all exam calendars
      produces:
      - application/json
      responses:
        "200":
          description: Exam calender fetched successfully
          schema:
            $ref: '#/definitions/handlers.ExamCalendarsResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "401":
          description: Unauthorized error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "403":
          description: Forbidden error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "404":
          description: No Articles are invoiced to the beat
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
      summary: Get all exam calendars
      tags:
      - ExamCalendars
  /deptexam/examcalendars/{id}:
    get:
      consumes:
      - application/json
      description: Get a list of all exam calendars by ID
      parameters:
      - description: Exam Calendar ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Exam calender fetched successfully by ID
          schema:
            $ref: '#/definitions/handlers.ExamCalendarsResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "401":
          description: Unauthorized error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "403":
          description: Forbidden error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "404":
          description: No Articles are invoiced to the beat
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
      summary: Get all exam calendars by ID
      tags:
      - ExamCalendars
  /deptexam/exams:
    get:
      description: Fetch all available exams.
      produces:
      - application/json
      responses:
        "200":
          description: Active Exam fetched successfully by Exam year
          schema:
            $ref: '#/definitions/handlers.ExamResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "401":
          description: Unauthorized error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "403":
          description: Forbidden error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "404":
          description: No Articles are invoiced to the beat
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
      summary: Get Exams
      tags:
      - Exam
  /deptexam/exams/statistics/fordirectorate/circlewise/get/examyear{examcode}/{examyear}:
    get:
      description: Get the statistics of exam applications for directorate circle
        wise based on the exam code and exam year.
      parameters:
      - description: Exam Code
        in: path
        name: examcode
        required: true
        type: integer
      - description: Exam Year
        in: path
        name: examyear
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Getting Nodal officer statistics done successfully
          schema:
            $ref: '#/definitions/handlers.ExamStatisticsResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "401":
          description: Unauthorized error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "403":
          description: Forbidden error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "404":
          description: No Articles are invoiced to the beat
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
      summary: Get Exam Statistics for Directorate Circle Wise
      tags:
      - Exam
  /deptexam/exams/statistics/fordirectorate/get/{examcode}/{selectedyear}:
    get:
      description: Get the statistics of exam applications for directorate based on
        the exam code and selected year.
      parameters:
      - description: Exam Code
        in: path
        name: examcode
        required: true
        type: integer
      - description: Selected Year
        in: path
        name: selectedyear
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Getting statistics based on application status done successfully
          schema:
            $ref: '#/definitions/handlers.ExamStatisticsResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "401":
          description: Unauthorized error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "403":
          description: Forbidden error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "404":
          description: No Articles are invoiced to the beat
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
      summary: Get Exam Applications Statistics for Directorate
      tags:
      - Exam
  /deptexam/exams/statistics/get/{examcode}/{nofacilityid}/{examyear}:
    get:
      description: Get the statistics of exam applications for Nodal Officer based
        on the exam code, facility ID, and exam year.
      parameters:
      - description: Exam Code
        in: path
        name: examcode
        required: true
        type: integer
      - description: Facility ID
        in: path
        name: nofacilityid
        required: true
        type: string
      - description: Exam Year
        in: path
        name: examyear
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Getting statistics based on application status done successfully
          schema:
            $ref: '#/definitions/handlers.ExamStatisticsResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "401":
          description: Unauthorized error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "403":
          description: Forbidden error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "404":
          description: No Articles are invoiced to the beat
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
      summary: Get Exam Applications Statistics for Nodal Officer
      tags:
      - Exam
  /deptexam/exams/statistics/officewise/get/{examcode}/{nofacilityid}/{examyear}:
    get:
      description: Get the statistics of exam applications office-wise based on the
        exam code and facility ID.
      parameters:
      - description: Exam Code
        in: path
        name: examcode
        required: true
        type: integer
      - description: Nodal Office Facility ID
        in: path
        name: nofacilityid
        required: true
        type: string
      - description: Exam Year
        in: path
        name: examyear
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: ExamApplications Statistics fetched Successfully
          schema:
            $ref: '#/definitions/handlers.ExamStatisticsResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "401":
          description: Unauthorized error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "403":
          description: Forbidden error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "404":
          description: No Articles are invoiced to the beat
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
      summary: Get Exam Applications Statistics Office Wise
      tags:
      - Exam
  /deptexam/facilities/byfacilityofficeid/{workingofficefacilityid}:
    get:
      consumes:
      - application/json
      description: Get details of a facility based on the given office ID
      parameters:
      - description: Office ID
        in: path
        name: workingofficefacilityid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Facily details extracted
          schema:
            $ref: '#/definitions/start.EmployeeMasterResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "401":
          description: Unauthorized error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "403":
          description: Forbidden error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "404":
          description: No Articles are invoiced to the beat
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
      summary: Get facility details by office ID
      tags:
      - Facilities
  /deptexam/notification/GetDraftNotification/{examid}/{examyear}/{officetype}/{facilityid}:
    get:
      consumes:
      - application/json
      description: Fetch notification based on Exam code, Exam year, Office type,
        and facility ID
      parameters:
      - description: Exam ID
        in: path
        name: examid
        required: true
        type: integer
      - description: Exam Year
        in: path
        name: examyear
        required: true
        type: integer
      - description: Office Type
        in: path
        name: officetype
        required: true
        type: string
      - description: Facility ID
        in: path
        name: facilityid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Fetched notification based on Exam code, Exam year, Office
            type and facility ID
          schema:
            $ref: '#/definitions/start.EmployeeMasterResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "401":
          description: Unauthorized error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "403":
          description: Forbidden error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "404":
          description: No Articles are invoiced to the beat
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
      summary: Get Draft Notification
      tags:
      - ExamNotifications
  /deptexam/notification/PutIssueNotificationSingle:
    put:
      consumes:
      - application/json
      description: Issue a single exam notification
      parameters:
      - description: Issue Notification
        in: body
        name: notification
        required: true
        schema:
          $ref: '#/definitions/candidate_registation.IssueNotificationStruct'
      produces:
      - application/json
      responses:
        "200":
          description: 'Notification issued successfully '
          schema:
            $ref: '#/definitions/start.EmployeeMasterResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "401":
          description: Unauthorized error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "403":
          description: Forbidden error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "404":
          description: No Articles are invoiced to the beat
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
      summary: Issue a Single Notification
      tags:
      - ExamNotifications
  /deptexam/notification/UpdateResubmitDraftNotification:
    put:
      consumes:
      - application/json
      description: Update and resubmit a draft notification
      parameters:
      - description: Update Notification
        in: body
        name: notification
        required: true
        schema:
          $ref: '#/definitions/candidate_registation.UpdateNotificationStruct'
      produces:
      - application/json
      responses:
        "200":
          description: 'Notification Updated Sucessfully '
          schema:
            $ref: '#/definitions/start.EmployeeMasterResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "401":
          description: Unauthorized error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "403":
          description: Forbidden error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "404":
          description: No Articles are invoiced to the beat
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
      summary: Update and Resubmit Draft Notification
      tags:
      - ExamNotifications
  /deptexam/notification/create:
    post:
      consumes:
      - application/json
      description: Create a new exam notification
      parameters:
      - description: Exam Notification
        in: body
        name: notification
        required: true
        schema:
          $ref: '#/definitions/candidate_registation.CreateNotificationStruct'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully created the Notification
          schema:
            $ref: '#/definitions/start.EmployeeMasterResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "401":
          description: Unauthorized error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "403":
          description: Forbidden error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "404":
          description: No Articles are invoiced to the beat
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
      summary: Create Exam Notification
      tags:
      - ExamNotifications
  /deptexam/notification/getPNDnotifications/{circleid}:
    get:
      consumes:
      - application/json
      description: Get all PND notifications for a specific circle
      parameters:
      - description: Circle ID
        in: path
        name: circleid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: 'Notification details fetched '
          schema:
            $ref: '#/definitions/start.EmployeeMasterResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "401":
          description: Unauthorized error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "403":
          description: Forbidden error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "404":
          description: No Articles are invoiced to the beat
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
      summary: Get PND Notifications
      tags:
      - ExamNotifications
  /generate-hallticket-numbers:
    post:
      consumes:
      - application/json
      description: Generates hall ticket numbers for a given exam year, exam code,
        and nodal officer facility ID
      parameters:
      - description: Request Body
        in: body
        name: requestBody
        required: true
        schema:
          $ref: '#/definitions/handlers.GenerateHallticketRequestBody'
      produces:
      - application/json
      responses:
        "200":
          description: Hall Ticket generation done successfully
          schema:
            $ref: '#/definitions/start.GetAllCAPendingVerificationsResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "401":
          description: Unauthorized error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "403":
          description: Forbidden error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "404":
          description: Facilities not found
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
      summary: Generate Hall Ticket Numbers
      tags:
      - IP Exam Application
  /notification/getallnotificationsmax/{examyear}/{circleid}:
    get:
      consumes:
      - application/json
      description: Get all notifications for a specific exam year and circle ID
      parameters:
      - description: Exam Year
        in: path
        name: examyear
        required: true
        type: integer
      - description: Circle ID
        in: path
        name: circleid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: 'Notification details fetched '
          schema:
            $ref: '#/definitions/start.EmployeeMasterResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "401":
          description: Unauthorized error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "403":
          description: Forbidden error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "404":
          description: No Articles are invoiced to the beat
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
      summary: Get All Notifications by Year and Circle ID
      tags:
      - ExamNotifications
  /rect/GDSPMexams/Applications/Submit:
    post:
      consumes:
      - application/json
      description: Submit new GDS to PM/MG/MTS applications
      parameters:
      - description: New GDS to PM/MG/MTS Application Data
        in: body
        name: newPAAppplns
        required: true
        schema:
          $ref: '#/definitions/candidate_registation.ApplicationGDSPM'
      produces:
      - application/json
      responses:
        "200":
          description: GDS to PM/MG/MTS application submitted successfully
          schema:
            $ref: '#/definitions/start.CreateGDSPMResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "401":
          description: Unauthorized error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "403":
          description: Forbidden error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "404":
          description: Facilities not found
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
      summary: Create new GDS to PM/MG/MTS applications
      tags:
      - GDS PM Applications
  /rect/GDSPMexams/Applications/resubmit:
    put:
      consumes:
      - application/json
      description: Resubmit GDS to PM/MG/MTS applications with updated remarks
      parameters:
      - description: Resubmit GDS PM Application
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/candidate_registation.ReApplicationGDSPM'
      produces:
      - application/json
      responses:
        "200":
          description: GDS to PM/MG/MTS application re-submitted successfully
          schema:
            $ref: '#/definitions/start.CreateGDSPMResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "401":
          description: Unauthorized error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "403":
          description: Forbidden error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "404":
          description: Facilities not found
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
      summary: Resubmit GDS to PM/MG/MTS applications
      tags:
      - GDS PM Applications
  /rect/GDSPMexams/Halltickets:
    put:
      consumes:
      - application/json
      description: Generates hall ticket numbers for GDSPM based on the provided exam
        year, exam code, and nodal officer facility ID
      parameters:
      - description: Request body to generate hall ticket numbers
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.requestBodyy'
      produces:
      - application/json
      responses:
        "200":
          description: Hall Ticket generation done successfully
          schema:
            $ref: '#/definitions/start.GetGDSPMApplicationsResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "401":
          description: Unauthorized error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "403":
          description: Forbidden error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "404":
          description: Applications not found
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
      summary: Generate Hall Ticket Numbers for GDSPM
      tags:
      - GDS PM Applications
  /rect/GDSPMexams/applications/Verify:
    put:
      consumes:
      - application/json
      description: Verify GDS to PM/MG/MTS applications by updating remarks
      parameters:
      - description: Verify GDS PM Application
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/candidate_registation.VerifyApplicationGDSPM'
      produces:
      - application/json
      responses:
        "200":
          description: GDS to PM/MG/MTS application verified successfully
          schema:
            $ref: '#/definitions/start.CreateGDSPMResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "401":
          description: Unauthorized error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "403":
          description: Forbidden error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "404":
          description: Facilities not found
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
      summary: Verify GDS to PM/MG/MTS applications
      tags:
      - GDS PM Applications
  /rect/GDSPMexams/applications/getbyempid/{employeeid}/{examyear}:
    get:
      consumes:
      - application/json
      description: Fetch GDS to PM/MG/MTS applications for a given employee ID and
        exam year
      parameters:
      - description: Employee ID
        in: path
        name: employeeid
        required: true
        type: integer
      - description: Exam Year
        in: path
        name: examyear
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Application details fetched successfully
          schema:
            $ref: '#/definitions/start.GetGDSPMApplicationsResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "401":
          description: Unauthorized error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "403":
          description: Forbidden error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "404":
          description: Facilities not found
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
      summary: Get GDS to PM/MG/MTS applications by Employee ID
      tags:
      - GDS PM Applications
  /rect/GDSPMexams/applications/vaVerify:
    put:
      consumes:
      - application/json
      description: Verify GDS to PM/MG/MTS applications with updated remarks by Sub
        Verifying Authority
      parameters:
      - description: Verify GDS PM Application by Sub Verifying Authority
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/candidate_registation.VerifyApplicationVAGDSPM'
      produces:
      - application/json
      responses:
        "200":
          description: GDS to PM/MG/MTS application verified successfully
          schema:
            $ref: '#/definitions/start.VerifyGDSPMVAApplicationsResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "401":
          description: Unauthorized error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "403":
          description: Forbidden error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "404":
          description: Facilities not found
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
      summary: Verify GDS to PM/MG/MTS applications by Sub Verifying Authority
      tags:
      - GDS PM Applications
  /rect/GDSPMexams/caprevremarks/{employeeid}/{examyear}:
    get:
      consumes:
      - application/json
      description: Fetches old remarks for GDS to PM/MG/MTS applications pending with
        candidate based on employee ID and exam year
      parameters:
      - description: Employee ID
        in: path
        name: employeeid
        required: true
        type: integer
      - description: Exam Year
        in: path
        name: examyear
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully fetched old remarks for pending applications
          schema:
            $ref: '#/definitions/start.GetGDSPMCAPendingOldRemarksByEmpIdResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "401":
          description: Unauthorized error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "403":
          description: Forbidden error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "404":
          description: Employee or applications not found
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
      summary: Get old remarks for GDS to PM/MG/MTS applications pending with candidate
        by employee ID and exam year
      tags:
      - GDS PM Applications
  /rect/GDSPMexams/center/updatecenters:
    put:
      consumes:
      - application/json
      description: Updates exam centers for GDSPM applications and returns string
        response
      parameters:
      - description: Request body to update exam centers
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/candidate_registation.ApplicationGDSPMforUpdateExamCenters'
      produces:
      - application/json
      responses:
        "200":
          description: Exam centers updated successfully
          schema:
            $ref: '#/definitions/start.GetGDSPMApplicationsResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "401":
          description: Unauthorized error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "403":
          description: Forbidden error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "404":
          description: Applications not found
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
      summary: Update Exam Centers in GDSPM Applications and return string
      tags:
      - GDS PM Applications
  /rect/GDSPMexams/getAllPendingWithCandidate/{facilityid}/{selectedyear}:
    get:
      consumes:
      - application/json
      description: Fetches GDSPM applications that are pending with the candidate
        based on facility ID and selected year
      parameters:
      - description: Facility ID
        in: path
        name: facilityid
        required: true
        type: string
      - description: Selected Year
        in: path
        name: selectedyear
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Applications fetched successfully
          schema:
            $ref: '#/definitions/start.GetGDSPMApplicationsResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "401":
          description: Unauthorized error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "403":
          description: Forbidden error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "404":
          description: Applications not found
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
      summary: Get all GDSPM applications pending with candidate
      tags:
      - GDS PM Applications
  /rect/GDSPMexams/getallcapending/{employeeid}/{examyear}:
    get:
      consumes:
      - application/json
      description: Fetches GDS to PM/MG/MTS applications that are pending with CA
        verifications based on employee ID and exam year
      parameters:
      - description: Employee ID
        in: path
        name: employeeid
        required: true
        type: integer
      - description: Exam Year
        in: path
        name: examyear
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully fetched pending application details with CA
          schema:
            $ref: '#/definitions/start.GetGDSPMApplicationsResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "401":
          description: Unauthorized error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "403":
          description: Forbidden error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "404":
          description: Employee or applications not found
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
      summary: Get GDS to PM/MG/MTS application pending details by employee ID and
        exam year
      tags:
      - GDS PM Applications
  /rect/GDSPMexams/getallcapendingapplications/{facilityid}/{selectedyear}:
    get:
      consumes:
      - application/json
      description: Fetches all pending GDS to PM/MG/MTS applications that are awaiting
        CA verifications
      parameters:
      - description: Facility ID
        in: path
        name: facilityid
        required: true
        type: string
      - description: Selected Year
        in: path
        name: selectedyear
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully fetched pending applications with CA
          schema:
            $ref: '#/definitions/start.GetGDSPMApplicationsResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "401":
          description: Unauthorized error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "403":
          description: Forbidden error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "404":
          description: Facility or applications not found
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
      summary: Get all GDS to PM/MG/MTS applications pending CA verifications by facility
        ID and selected year
      tags:
      - GDS PM Applications
  /rect/GDSPMexams/getallcaverified/{employeeid}/{examyear}:
    get:
      consumes:
      - application/json
      description: Fetches the GDS to PM/MG/MTS application details that have been
        verified by CA based on Employee ID and exam year
      parameters:
      - description: Employee ID
        in: path
        name: employeeid
        required: true
        type: integer
      - description: Exam Year
        in: path
        name: examyear
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully fetched application details with CA verified status
          schema:
            $ref: '#/definitions/start.GetGDSPMApplicationsResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "401":
          description: Unauthorized error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "403":
          description: Forbidden error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "404":
          description: Employee or application not found
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
      summary: Get CA verified GDS to PM/MG/MTS application details by Employee ID
      tags:
      - GDS PM Applications
  /rect/GDSPMexams/getallcaverifiedapplications/{facilityid}/{selectedyear}:
    get:
      consumes:
      - application/json
      description: Fetches all GDS to PM/MG/MTS applications that have been verified
        by CA based on facility ID and selected year
      parameters:
      - description: Facility ID
        in: path
        name: facilityid
        required: true
        type: string
      - description: Selected Year
        in: path
        name: selectedyear
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully fetched CA verified applications
          schema:
            $ref: '#/definitions/start.GetGDSPMApplicationsResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "401":
          description: Unauthorized error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "403":
          description: Forbidden error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "404":
          description: Facility or applications not found
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
      summary: Get all CA verified GDS to PM/MG/MTS applications
      tags:
      - GDS PM Applications
  /rect/GDSPMexams/getallcaverifiedapplicationsforna/{facilityid}/{selectedyear}:
    get:
      consumes:
      - application/json
      description: Fetches all GDS to PM/MG/MTS applications that have been verified
        by CA for a given facility and year
      parameters:
      - description: Facility ID
        in: path
        name: facilityid
        required: true
        type: string
      - description: Selected Year
        in: path
        name: selectedyear
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully fetched applications verified by CA for NA
          schema:
            $ref: '#/definitions/start.GetGDSPMApplicationsResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "401":
          description: Unauthorized error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "403":
          description: Forbidden error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "404":
          description: Facility or application not found
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
      summary: Get all GDS to PM/MG/MTS applications verified by CA for NA
      tags:
      - GDS PM Applications
  /rect/GDSPMexams/getallnaverified/{employeeid}/{examyear}:
    get:
      description: Fetches GDSPM applications NA verified details by employee ID and
        exam year
      parameters:
      - description: Employee ID
        in: path
        name: employeeid
        required: true
        type: integer
      - description: Exam Year
        in: path
        name: examyear
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Fetching NA verified application by employee ID
          schema:
            $ref: '#/definitions/start.GetGDSPMApplicationsResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "401":
          description: Unauthorized error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "403":
          description: Forbidden error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "404":
          description: Applications not found
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
      summary: Get GDSPM Applications NA Verified Details by Employee ID
      tags:
      - GDS PM Applications
  /rect/GDSPMexams/getallnaverifiedapplications/{facilityid}/{selectedyear}:
    get:
      description: Fetches GDSPM applications verified by NA based on facility ID
        and selected year
      parameters:
      - description: Facility ID
        in: path
        name: facilityid
        required: true
        type: string
      - description: Selected Year
        in: path
        name: selectedyear
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Fetching applications verified by NA
          schema:
            $ref: '#/definitions/start.GetGDSPMApplicationsResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "401":
          description: Unauthorized error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "403":
          description: Forbidden error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "404":
          description: Applications not found
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
      summary: Get GDSPM Applications Verified by NA
      tags:
      - GDS PM Applications
  /rect/GDSPMexams/getallnaverifiedapplicationsforna/{facilityid}/{selectedyear}:
    get:
      description: Fetches GDSPM applications NA verified details for a specific facility
        and selected year
      parameters:
      - description: Facility ID
        in: path
        name: facilityid
        required: true
        type: string
      - description: Selected Year
        in: path
        name: selectedyear
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Fetching applications verified by NA
          schema:
            $ref: '#/definitions/start.GetGDSPMApplicationsResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "401":
          description: Unauthorized error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "403":
          description: Forbidden error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "404":
          description: Applications not found
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
      summary: Get GDSPM Applications NA Verified Details for NA
      tags:
      - GDS PM Applications
  /rect/GDSPMexams/getallvapendingapplications/{facilityid}/{selectedyear}:
    get:
      consumes:
      - application/json
      description: Fetches GDSPM applications that are pending verification by the
        VA (Verification Authority) based on facility ID and selected year
      parameters:
      - description: Facility ID
        in: path
        name: facilityid
        required: true
        type: string
      - description: Selected Year
        in: path
        name: selectedyear
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Applications fetched successfully
          schema:
            $ref: '#/definitions/start.GetGDSPMApplicationsResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "401":
          description: Unauthorized error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "403":
          description: Forbidden error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "404":
          description: Applications not found
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
      summary: Get all GDSPM VA pending verifications
      tags:
      - GDS PM Applications
  /rect/GDSPMexams/hallticket/get/{examcode}/{employeeid}/{examyear}:
    get:
      consumes:
      - application/json
      description: Fetches GDSPM applications with hall ticket based on exam code,
        employee ID, and exam year
      parameters:
      - description: Exam Code
        in: path
        name: examcode
        required: true
        type: integer
      - description: Employee ID
        in: path
        name: employeeid
        required: true
        type: integer
      - description: Exam Year
        in: path
        name: examyear
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Applications fetched successfully
          schema:
            $ref: '#/definitions/start.GetGDSPMApplicationsResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "401":
          description: Unauthorized error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "403":
          description: Forbidden error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "404":
          description: Applications not found
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
      summary: Get GDSPM Hall Ticket by Exam Code and Employee ID
      tags:
      - GDS PM Applications
  /rect/GDSPMexams/noverify:
    put:
      consumes:
      - application/json
      description: Updates the nodal recommendations for a given GDSPM application
        based on Employee ID
      parameters:
      - description: GDSPM Application
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/candidate_registation.NAVerifyApplicationGDSPM'
      produces:
      - application/json
      responses:
        "200":
          description: Nodal officer successfully verified the GDSPMMG application
          schema:
            $ref: '#/definitions/start.CreateGDSPMResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "401":
          description: Unauthorized error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "403":
          description: Forbidden error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "404":
          description: Employee or application not found
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
      summary: Update Nodal Recommendations for GDSPM by Employee ID
      tags:
      - GDS PM Applications
  /rect/GDSPMexams/recommendations/{employeeid}:
    get:
      description: Fetches GDSPM exam recommendations based on Employee ID
      parameters:
      - description: Employee ID
        in: path
        name: employeeid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Fetching recommendations by employee ID
          schema:
            $ref: '#/definitions/start.GetGDSPMApplicationsResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "401":
          description: Unauthorized error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "403":
          description: Forbidden error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "404":
          description: Employee or recommendations not found
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
      summary: Get GDSPM Exam Recommendations by Employee ID
      tags:
      - GDS PM Applications
  /rect/GetFacilitiesByReportingOfficeId/{facilityid}:
    get:
      consumes:
      - application/json
      description: Get the list of facilities associated with a specific reporting
        office ID
      parameters:
      - description: Facility ID
        in: path
        name: facilityid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Facilities retrieved successfully
          schema:
            $ref: '#/definitions/start.EmployeeMasterResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "401":
          description: Unauthorized error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "403":
          description: Forbidden error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "404":
          description: Facilities not found
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
      summary: Get facilities by reporting office ID
      tags:
      - Facilities
  /rect/MTSPMMGexams/Halltickets:
    put:
      consumes:
      - application/json
      description: Generates hall ticket numbers for MTS to PM/MG applicants based
        on exam year, exam code, and nodal officer facility ID
      parameters:
      - description: Request Body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.requestBody'
      produces:
      - application/json
      responses:
        "200":
          description: Hall Ticket generation done successfully
          schema:
            $ref: '#/definitions/start.GetApplicationsResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "401":
          description: Unauthorized error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "403":
          description: Forbidden error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "404":
          description: Applications not found
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
      summary: Generate hall ticket numbers for MTS to PM/MG applicants
      tags:
      - MTSPM Applications
  /rect/MTSPMMGexams/applications/getbyempid/{employeeid}/{examyear}:
    get:
      consumes:
      - application/json
      description: Retrieves the MTS to PM/MG applications for a given employee ID
        and exam year
      parameters:
      - description: Employee ID
        in: path
        name: employeeid
        required: true
        type: string
      - description: Exam Year
        in: path
        name: examyear
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Application details fetched successfully
          schema:
            $ref: '#/definitions/start.GetApplicationsResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "401":
          description: Unauthorized error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "403":
          description: Forbidden error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "404":
          description: Applications not found
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
      summary: Get MTS to PM/MG Applications by Employee ID
      tags:
      - MTSPM Applications
  /rect/MTSPMMGexams/applications/resubmit:
    put:
      consumes:
      - application/json
      description: Resubmits the MTS to PM/MG application and updates its status
      parameters:
      - description: Re-Application Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/candidate_registation.ReApplicationGDSPM'
      produces:
      - application/json
      responses:
        "200":
          description: MTS to PM/MG exam application re-submitted successfully
          schema:
            $ref: '#/definitions/start.CreateApplicationResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "401":
          description: Unauthorized error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "403":
          description: Forbidden error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "404":
          description: Applications not found
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
      summary: Resubmit MTS to PM/MG Application
      tags:
      - MTSPM Applications
  /rect/MTSPMMGexams/applications/submit:
    post:
      consumes:
      - application/json
      description: Creates a new MTS to PM/MG application with the provided details
      parameters:
      - description: Request body for creating a new MTS to PM/MG application
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/candidate_registation.ApplicationMTSPM'
      produces:
      - application/json
      responses:
        "200":
          description: MTS to PM/MG Application submitted successfully
          schema:
            $ref: '#/definitions/start.CreateApplicationResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "401":
          description: Unauthorized error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "403":
          description: Forbidden error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "404":
          description: Applications not found
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
      summary: Create a new MTS to PM/MG application
      tags:
      - MTSPM Applications
  /rect/MTSPMMGexams/applications/verify:
    put:
      consumes:
      - application/json
      description: Verifies the MTS to PM/MG application and updates its status
      parameters:
      - description: Verify Application Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/candidate_registation.VerifyApplicationMTSPM'
      produces:
      - application/json
      responses:
        "200":
          description: MTS to PM/MG exam application verified successfully
          schema:
            $ref: '#/definitions/start.CreateApplicationResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "401":
          description: Unauthorized error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "403":
          description: Forbidden error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "404":
          description: Applications not found
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
      summary: Verify MTS to PM/MG Application
      tags:
      - MTSPM Applications
  /rect/MTSPMMGexams/caprevremarks/{employeeid}/{examyear}:
    get:
      consumes:
      - application/json
      description: Retrieves old CA application remarks for MTS to PM/MG applications
        pending with a candidate based on employee ID and selected year
      parameters:
      - description: Employee ID
        in: path
        name: employeeid
        required: true
        type: integer
      - description: Exam Year
        in: path
        name: examyear
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Fetching applicatins pending with candiate with remarks
          schema:
            $ref: '#/definitions/start.GetApplicationsResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "401":
          description: Unauthorized error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "403":
          description: Forbidden error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "404":
          description: Details not found
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
      summary: Get old CA application remarks by employee ID
      tags:
      - MTSPM Applications
  /rect/MTSPMMGexams/center/updatecenters:
    put:
      consumes:
      - application/json
      description: Updates exam centers in MTS to PM/MG applications and returns the
        updated status
      parameters:
      - description: Array of MTS to PM/MG applications with updated exam centers
        in: body
        name: request
        required: true
        schema:
          items:
            $ref: '#/definitions/handlers.ApplicationMTSPMUpdatecenter'
          type: array
      produces:
      - application/json
      responses:
        "200":
          description: Updating Exam centers for MTSPM Applications
          schema:
            $ref: '#/definitions/start.GetApplicationsResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "401":
          description: Unauthorized error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "403":
          description: Forbidden error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "404":
          description: Applications not found
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
      summary: Update exam centers in MTS to PM/MG applications and return status
      tags:
      - MTSPM Applications
  /rect/MTSPMMGexams/getAllPendingWithCandidate/{facilityid}/{selectedyear}:
    get:
      consumes:
      - application/json
      description: Retrieves all MTS to PM/MG applications that are pending with the
        candidate based on facility ID and selected year
      parameters:
      - description: Facility ID
        in: path
        name: facilityid
        required: true
        type: string
      - description: Selected Year
        in: path
        name: selectedyear
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Fetching application pending with candidate
          schema:
            $ref: '#/definitions/start.GetApplicationsResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "401":
          description: Unauthorized error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "403":
          description: Forbidden error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "404":
          description: Applications not found
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
      summary: Get all MTS to PM/MG applications pending with candidate
      tags:
      - MTSPM Applications
  /rect/MTSPMMGexams/getallcapending/{employeeid}{examyear}:
    get:
      consumes:
      - application/json
      description: Retrieves details of MTS to PM/MG applications pending CA verification
        for a given employee ID and selected year
      parameters:
      - description: Employee ID
        in: path
        name: employeeid
        required: true
        type: integer
      - description: Selected Year
        in: path
        name: examyear
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Fetched pending details with CA
          schema:
            $ref: '#/definitions/start.GetApplicationsResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "401":
          description: Unauthorized error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "403":
          description: Forbidden error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "404":
          description: Details not found
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
      summary: Get MTS to PM/MG CA pending details by employee ID
      tags:
      - MTSPM Applications
  /rect/MTSPMMGexams/getallcapendingapplications/{facilityid}/{selectedyear}:
    get:
      consumes:
      - application/json
      description: Retrieves all MTS to PM/MG applications pending CA verifications
        for a given facility ID and selected year
      parameters:
      - description: Facility ID
        in: path
        name: facilityid
        required: true
        type: string
      - description: Selected Year
        in: path
        name: selectedyear
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Fetched pending applications with CA
          schema:
            $ref: '#/definitions/start.GetApplicationsResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "401":
          description: Unauthorized error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "403":
          description: Forbidden error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "404":
          description: Applications not found
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
      summary: Get all MTS to PM/MG CA pending verifications
      tags:
      - MTSPM Applications
  /rect/MTSPMMGexams/getallcaverified/{employeeid}/{selectedyear}:
    get:
      consumes:
      - application/json
      description: Retrieves details of MTS to PM/MG applications that are verified
        by CA for a given employee ID and selected year
      parameters:
      - description: Employee ID
        in: path
        name: employeeid
        required: true
        type: integer
      - description: Selected Year
        in: path
        name: selectedyear
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Fetching applicatins pending with candiate with remarks
          schema:
            $ref: '#/definitions/start.GetApplicationsResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "401":
          description: Unauthorized error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "403":
          description: Forbidden error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "404":
          description: Details not found
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
      summary: Get details of MTS to PM/MG applications verified by CA based on employee
        ID
      tags:
      - MTSPM Applications
  /rect/MTSPMMGexams/getallcaverifiedapplications/{facilityid}/{selectedyear}:
    get:
      consumes:
      - application/json
      description: Retrieves all MTS to PM/MG applications that are verified by CA
        for a given facility ID and selected year
      parameters:
      - description: Facility ID
        in: path
        name: facilityid
        required: true
        type: string
      - description: Selected Year
        in: path
        name: selectedyear
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Fetched CA Verified applications
          schema:
            $ref: '#/definitions/start.GetApplicationsResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "401":
          description: Unauthorized error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "403":
          description: Forbidden error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "404":
          description: Details not found
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
      summary: Get all MTS to PM/MG applications verified by CA
      tags:
      - MTSPM Applications
  /rect/MTSPMMGexams/getallcaverifiedapplicationsforna/{facilityid}/{selectedyear}:
    get:
      consumes:
      - application/json
      description: Retrieves all MTS to PM/MG applications that are verified by CA
        for NA for a given facility ID and selected year
      parameters:
      - description: Facility ID
        in: path
        name: facilityid
        required: true
        type: string
      - description: Selected Year
        in: path
        name: selectedyear
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Fetched CA Verified applications
          schema:
            $ref: '#/definitions/start.GetApplicationsResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "401":
          description: Unauthorized error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "403":
          description: Forbidden error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "404":
          description: Details not found
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
      summary: Get all MTS to PM/MG applications verified by CA for NA
      tags:
      - MTSPM Applications
  /rect/MTSPMMGexams/getallnaverifiedapplicationsforna/{facilityid}/{selectedyear}:
    get:
      consumes:
      - application/json
      description: Fetches MTS to PM/MG applications verified by National Authority
        (NA) for National Authority (NA) based on facility ID and selected year
      parameters:
      - description: Facility ID
        in: path
        name: facilityid
        required: true
        type: string
      - description: Selected Year
        in: path
        name: selectedyear
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Fetching applications verified by NA
          schema:
            $ref: '#/definitions/start.GetApplicationsResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "401":
          description: Unauthorized error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "403":
          description: Forbidden error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "404":
          description: Details not found
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
      summary: Get all MTS to PM/MG applications verified by NA for NA
      tags:
      - MTSPM Applications
  /rect/MTSPMMGexams/hallticket/get/{examcode}/{employeeid}/{selectedyear}:
    get:
      consumes:
      - application/json
      description: Retrieves MTSPMMG hall ticket details based on exam code, employee
        ID, and selected year
      parameters:
      - description: Exam code
        in: path
        name: examcode
        required: true
        type: integer
      - description: Employee ID
        in: path
        name: employeeid
        required: true
        type: integer
      - description: Selected year
        in: query
        name: selectedyear
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Generate application with Hallticket Number
          schema:
            $ref: '#/definitions/start.GetApplicationsResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "401":
          description: Unauthorized error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "403":
          description: Forbidden error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "404":
          description: Applications not found
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
      summary: Get MTSPMMG hall ticket details by exam code and employee ID
      tags:
      - MTSPM Applications
  /rect/MTSPMMGexams/noverify:
    put:
      consumes:
      - application/json
      description: Updates nodal recommendations for the MTS to PM/MG application
        and sends notifications
      parameters:
      - description: Nodal Verification Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/candidate_registation.NAVerifyApplicationMTSPM'
      produces:
      - application/json
      responses:
        "200":
          description: 'Nodal officer successfully verified this MTS to PM/MG application '
          schema:
            $ref: '#/definitions/start.CreateApplicationResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "401":
          description: Unauthorized error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "403":
          description: Forbidden error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "404":
          description: Details not found
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
      summary: Update nodal recommendations for MTS to PM/MG by employee ID
      tags:
      - MTSPM Applications
  /rect/MTSPMMGexams/recommendations/{employeeid}:
    get:
      consumes:
      - application/json
      description: Fetches MTS to PM/MG exam recommendations based on employee ID
      parameters:
      - description: Employee ID
        in: path
        name: employeeid
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Fetching recommendations by employee ID
          schema:
            $ref: '#/definitions/start.GetApplicationsResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "401":
          description: Unauthorized error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "403":
          description: Forbidden error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "404":
          description: Details not found
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
      summary: Get MTS to PM/MG exam recommendations by employee ID
      tags:
      - MTSPM Applications
  /rect/PSexams/Halltickets:
    put:
      consumes:
      - application/json
      description: Fetches PS applications that are pending with candidates based
        on facility ID and selected year
      parameters:
      - description: Application data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/handlers.requestBody'
      produces:
      - application/json
      responses:
        "200":
          description: Hall Ticket generation done successfully
          schema:
            $ref: '#/definitions/start.GetApplicationsResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "401":
          description: Unauthorized error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "403":
          description: Forbidden error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "404":
          description: Applications not found
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
      summary: Get PS applications pending with candidate for a specific facility
        and year
      tags:
      - PS GroupB Applications
  /rect/admin/ChangeAdminPassword/{username}:
    put:
      consumes:
      - application/json
      description: Changes the admin password with the provided data
      parameters:
      - description: Admin Username
        in: path
        name: username
        required: true
        type: string
      - description: Request Body containing current and new password
        in: body
        name: requestBody
        required: true
        schema:
          $ref: '#/definitions/candidate_registation.RequestBody'
      produces:
      - application/json
      responses:
        "200":
          description: New Password updated Successfully
          schema:
            $ref: '#/definitions/start.AdminUserResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "401":
          description: Unauthorized error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "403":
          description: Forbidden error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "404":
          description: No Articles are invoiced to the beat
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
      summary: Change the admin password
      tags:
      - Admin
  /rect/admin/deleteadminuserbyempid/{username}:
    delete:
      consumes:
      - application/json
      description: Delete an admin user by username
      parameters:
      - description: Admin Username
        in: path
        name: username
        required: true
        type: string
      - description: Admin user deletion information
        in: body
        name: AdminUser
        required: true
        schema:
          $ref: '#/definitions/candidate_registation.DeleteAdminMasterStruc'
      produces:
      - application/json
      responses:
        "200":
          description: Admin Users deleted Successfully
          schema:
            $ref: '#/definitions/start.AdminUserResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "401":
          description: Unauthorized error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "403":
          description: Forbidden error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "404":
          description: No Articles are invoiced to the beat
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
      summary: Delete Admin User
      tags:
      - Admin
  /rect/admin/getadminuserbyempid/{id}:
    get:
      consumes:
      - application/json
      description: Retrieves admin user details based on the provided employee ID
      parameters:
      - description: Employee ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Admin users fetched by EMployeeID successfully
          schema:
            $ref: '#/definitions/start.AdminUserResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "401":
          description: Unauthorized error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "403":
          description: Forbidden error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "404":
          description: No Articles are invoiced to the beat
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
      summary: Get Admin Users by Employee ID
      tags:
      - Admin
  /rect/admin/getadminuserbyfacilityrole/{facilityid}/{role}:
    get:
      description: Get a list of admin users by facility ID and role
      parameters:
      - description: Facility ID
        in: path
        name: facilityid
        required: true
        type: string
      - description: Role
        in: path
        name: role
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Admin users fetched successfully
          schema:
            $ref: '#/definitions/start.AdminUserResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "401":
          description: Unauthorized error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "403":
          description: Forbidden error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "404":
          description: No Articles are invoiced to the beat
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
      summary: Get All Admin Users by Facility and Role
      tags:
      - Admin
  /rect/admin/getadminuserbyusername/{id}:
    get:
      consumes:
      - application/json
      description: Retrieves admin user details based on the provided username
      parameters:
      - description: Username
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Admin users fetched successfully
          schema:
            $ref: '#/definitions/start.AdminUserResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "401":
          description: Unauthorized error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "403":
          description: Forbidden error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "404":
          description: No Articles are invoiced to the beat
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
      summary: Get Admin Users by Username
      tags:
      - Admin
  /rect/admin/getempmasteruserbyempid/{employeeid}:
    get:
      consumes:
      - application/json
      description: Get details of an employee master user by their employee ID
      parameters:
      - description: Employee ID
        in: path
        name: employeeid
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Employee master user retrieved successfully
          schema:
            $ref: '#/definitions/start.EmployeeMasterResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "401":
          description: Unauthorized error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "403":
          description: Forbidden error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "404":
          description: Employee not found
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
      summary: Get employee master user by employee ID
      tags:
      - Employee
  /rect/admin/roles:
    get:
      description: Get a list of all roles
      produces:
      - application/json
      responses:
        "200":
          description: List of roles retrieved successfully
          schema:
            $ref: '#/definitions/start.RollmasterResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
      summary: Get all roles
      tags:
      - Roles
  /rect/admin/roles/{id}:
    get:
      consumes:
      - application/json
      description: Get details of a specific role by its ID
      parameters:
      - description: Role ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: successfully retreived
          schema:
            $ref: '#/definitions/start.RollmasterResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
      summary: Get role by ID
      tags:
      - Roles
  /rect/admins/reset/savenewpassword:
    post:
      consumes:
      - application/json
      description: Saves a new password for the admin user after validation
      parameters:
      - description: Request Body containing the username and new password
        in: body
        name: newUser
        required: true
        schema:
          $ref: '#/definitions/candidate_registation.StrucAdminResetSaveNewPassword'
      produces:
      - application/json
      responses:
        "200":
          description: Admin user password reset  successfully
          schema:
            $ref: '#/definitions/start.AdminUserResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "401":
          description: Unauthorized error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "403":
          description: Forbidden error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "404":
          description: No Articles are invoiced to the beat
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
      summary: Admin Reset Save New Password
      tags:
      - Admin
  /rect/admins/reset/validateOTP:
    post:
      consumes:
      - application/json
      description: Validates the OTP for admin user reset
      parameters:
      - description: Request Body containing the username and OTP
        in: body
        name: newUser
        required: true
        schema:
          $ref: '#/definitions/candidate_registation.StrucAdminResetValidateOTP'
      produces:
      - application/json
      responses:
        "200":
          description: Admin user OTP Verified Successfully
          schema:
            $ref: '#/definitions/start.AdminUserResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "401":
          description: Unauthorized error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "403":
          description: Forbidden error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "404":
          description: No Articles are invoiced to the beat
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
      summary: Admin Reset Validate OTP
      tags:
      - Admin
  /rect/admins/reset/validateusername:
    post:
      consumes:
      - application/json
      description: Validates admin user details based on the provided username and
        triggers OTP for verification
      parameters:
      - description: Admin user validation request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/candidate_registation.StrucAdminResetValidateUserName'
      produces:
      - application/json
      responses:
        "200":
          description: Admin users fetched successfully
          schema:
            $ref: '#/definitions/start.AdminUserResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "401":
          description: Unauthorized error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "403":
          description: Forbidden error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "404":
          description: No Articles are invoiced to the beat
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
      summary: Validate Admin User by Username
      tags:
      - Admin
  /rect/adminusers/verifyloginn:
    post:
      consumes:
      - application/json
      description: Authenticates an admin user based on OTP
      parameters:
      - description: Admin Login Validate OTP
        in: body
        name: newUser
        required: true
        schema:
          $ref: '#/definitions/candidate_registation.AdminLoginValidateOTP'
      produces:
      - application/json
      responses:
        "200":
          description: Admin user authenticated  successfully
          schema:
            $ref: '#/definitions/start.VerifyAdminLoginResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "401":
          description: Unauthorized error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "403":
          description: Forbidden error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "404":
          description: No Articles are invoiced to the beat
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
      summary: Verify Admin Login
      tags:
      - Admin
  /rect/adminusers/verifynewUser:
    post:
      consumes:
      - application/json
      description: Verify admin login using OTP
      parameters:
      - description: Change Password Request
        in: body
        name: requestBody
        required: true
        schema:
          $ref: '#/definitions/handlers.RequestBody'
      produces:
      - application/json
      responses:
        "200":
          description: New Password updated Successfully
          schema:
            $ref: '#/definitions/start.UserResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "401":
          description: Unauthorized error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "403":
          description: Forbidden error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "404":
          description: Facilities not found
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
      summary: Verify admin login
      tags:
      - Users
  /rect/adminusers/verifyuserr:
    post:
      consumes:
      - application/json
      description: Authenticates an admin user based on username and password, and
        sends an OTP to the registered mobile number
      parameters:
      - description: Admin Login Generate OTP
        in: body
        name: newUser
        required: true
        schema:
          $ref: '#/definitions/candidate_registation.AdminLoginGenerateOTP'
      produces:
      - application/json
      responses:
        "200":
          description: OTP sent to registered mobile number
          schema:
            $ref: '#/definitions/start.VerifyAdminUserLoginResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "401":
          description: Unauthorized error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "403":
          description: Forbidden error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "404":
          description: No Articles are invoiced to the beat
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
      summary: Verify Admin User Login
      tags:
      - Admin
  /rect/candidatecreate:
    post:
      consumes:
      - application/json
      description: Create a new candidate user with the provided details
      parameters:
      - description: Candidate Details
        in: body
        name: candidate
        required: true
        schema:
          $ref: '#/definitions/candidate_registation.CandidateCreation'
      produces:
      - application/json
      responses:
        "200":
          description: Employee master user retrieved successfully
          schema:
            $ref: '#/definitions/start.EmployeeMasterResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "401":
          description: Unauthorized error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "403":
          description: Forbidden error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "404":
          description: Employee not found
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
      summary: Create a candidate user
      tags:
      - Employee
  /rect/center/updatecenters/IP:
    put:
      consumes:
      - application/json
      description: Update the exam centers in IP applications with the provided data
      parameters:
      - description: Request Body
        in: body
        name: requestBody
        required: true
        schema:
          $ref: '#/definitions/candidate_registation.UpdateExamCentersInIP'
      produces:
      - application/json
      responses:
        "200":
          description: Updating Exam centers for IP Applications
          schema:
            $ref: '#/definitions/start.GetAllCAPendingVerificationsResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "401":
          description: Unauthorized error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "403":
          description: Forbidden error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "404":
          description: Facilities not found
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
      summary: Update Exam Centers in IP Applications
      tags:
      - IP Exam Application
  /rect/employees/search/byempid/{employeeid}:
    get:
      consumes:
      - application/json
      description: Fetches Employee details for a given employee ID
      parameters:
      - description: Employee ID
        in: path
        name: employeeid
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Employee details fetched
          schema:
            $ref: '#/definitions/start.GetAllCAPendingVerificationsResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "401":
          description: Unauthorized error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "403":
          description: Forbidden error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "404":
          description: Facilities not found
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
      summary: Get Employee details by employee ID
      tags:
      - IP Exam Application
  /rect/empmaster/GetEmployeesBasedOnCA/{cafacilityid}:
    get:
      consumes:
      - application/json
      description: Get details of employees based on CA Facility ID
      parameters:
      - description: CA Facility ID
        in: path
        name: cafacilityid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Employee retrieved successfully
          schema:
            $ref: '#/definitions/start.EmployeeMasterResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "401":
          description: Unauthorized error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "403":
          description: Forbidden error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "404":
          description: Employee not found
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
      summary: Get employees based on CA Facility ID
      tags:
      - Employee
  /rect/empmaster/createemployee:
    post:
      consumes:
      - application/json
      description: Create a new employee master record in the system
      parameters:
      - description: Employee Master Data
        in: body
        name: empMaster
        required: true
        schema:
          $ref: '#/definitions/candidate_registation.StrucCreateEmployeeMaster'
      produces:
      - application/json
      responses:
        "200":
          description: Employee Master created  successfully
          schema:
            $ref: '#/definitions/start.EmployeeMasterResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "401":
          description: Unauthorized error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "403":
          description: Forbidden error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "404":
          description: Employee not found
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
      summary: Create a new Employee Master
      tags:
      - Employee
  /rect/empmaster/modifyemployee:
    put:
      consumes:
      - application/json
      description: Modify an employee master record in the system
      parameters:
      - description: Modify Employee Master Data
        in: body
        name: modifyEmpMaster
        required: true
        schema:
          $ref: '#/definitions/candidate_registation.StrucModifyEmployeeMaster'
      produces:
      - application/json
      responses:
        "200":
          description: Employee Master modified  successfully
          schema:
            $ref: '#/definitions/start.EmployeeMasterResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "401":
          description: Unauthorized error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "403":
          description: Forbidden error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "404":
          description: Employee not found
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
      summary: Modify an existing Employee Master
      tags:
      - Employee
  /rect/empmaster/viewemployee/{employeeid}:
    get:
      consumes:
      - application/json
      description: Get details of an employee master record by employee ID
      parameters:
      - description: Employee ID
        in: path
        name: employeeid
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Employee master user retrieved successfully
          schema:
            $ref: '#/definitions/start.EmployeeMasterResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "401":
          description: Unauthorized error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "403":
          description: Forbidden error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "404":
          description: Employee not found
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
      summary: View an existing Employee Master
      tags:
      - Employee
  /rect/facilities/byPincode/{pincode}:
    get:
      consumes:
      - application/json
      description: Get details of offices based on the given pincode
      parameters:
      - description: Pincode
        in: path
        name: pincode
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Office retrieved based on pincode successfully
          schema:
            $ref: '#/definitions/start.EmployeeMasterResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "401":
          description: Unauthorized error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "403":
          description: Forbidden error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "404":
          description: Facilities not found
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
      summary: Get offices by pincode
      tags:
      - Facilities
  /rect/getExamApplicationsByCityPref/{examYear}/{examcode}/{cityid}:
    get:
      description: Fetch the application count based on Exam city
      parameters:
      - description: Exam Year
        in: path
        name: examYear
        required: true
        type: string
      - description: Exam Code
        in: path
        name: examcode
        required: true
        type: string
      - description: City ID
        in: path
        name: cityid
        required: true
        type: string
      responses:
        "200":
          description: Fetching application count based on Exam city
          schema:
            $ref: '#/definitions/start.GetAllCAPendingVerificationsResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "401":
          description: Unauthorized error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "403":
          description: Forbidden error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "404":
          description: Facilities not found
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
      summary: Get Exam Applications Preference City Wise Stats
      tags:
      - IP Exam Application
  /rect/getExamApplicationsByCityPrefGDSPM/{examYear}/{examcode}/{cityid}:
    get:
      consumes:
      - application/json
      description: Fetches statistics for GDSPM exam applications based on exam year,
        exam code, and city ID
      parameters:
      - description: Exam Year
        in: path
        name: examYear
        required: true
        type: string
      - description: Exam Code
        in: path
        name: examcode
        required: true
        type: string
      - description: City ID
        in: path
        name: cityid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Statistics fetched successfully
          schema:
            $ref: '#/definitions/start.GetGDSPMApplicationsResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "401":
          description: Unauthorized error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "403":
          description: Forbidden error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "404":
          description: Data not found
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
      summary: Get Exam Applications Preference City Wise Statistics for GDSPM
      tags:
      - GDS PM Applications
  /rect/getExamApplicationsByCityPrefMTSPMMG/{examYear}/{examcode}/{cityid}:
    get:
      consumes:
      - application/json
      description: Retrieves statistics on exam application preferences city-wise
        based on exam year, exam code, and city ID
      parameters:
      - description: Exam Year
        in: path
        name: examYear
        required: true
        type: string
      - description: Exam Code
        in: path
        name: examcode
        required: true
        type: string
      - description: City ID
        in: path
        name: cityid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: 'Fetching application count based on Exam city '
          schema:
            $ref: '#/definitions/start.GetApplicationsResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "401":
          description: Unauthorized error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "403":
          description: Forbidden error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "404":
          description: Applications not found
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
      summary: Get exam application preference statistics city-wise for MTS to PM/MG
        exams
      tags:
      - MTSPM Applications
  /rect/getExamApplicationsByCityPrefPS/{examYear}/{examcode}/{cityid}:
    get:
      consumes:
      - application/json
      description: Fetches the application count based on exam city for a specific
        exam year, exam code, and city ID
      parameters:
      - description: Exam Year
        in: path
        name: examYear
        required: true
        type: string
      - description: Exam Code
        in: path
        name: examcode
        required: true
        type: string
      - description: City ID
        in: path
        name: cityid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Fetching application count based on Exam city
          schema:
            $ref: '#/definitions/start.GetApplicationsResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "401":
          description: Unauthorized error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "403":
          description: Forbidden error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "404":
          description: Applications not found
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
      summary: Get Exam Applications Preference City-Wise Stats for PS
      tags:
      - PS GroupB Applications
  /rect/ipexams/applications/getbyempid/{employeeid}/{examyear}:
    get:
      consumes:
      - application/json
      description: Fetches IP applications details for a given employee ID and year
      parameters:
      - description: Employee ID
        in: path
        name: employeeid
        required: true
        type: integer
      - description: Selected Year
        in: path
        name: examyear
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Application details fetched successfully
          schema:
            $ref: '#/definitions/start.GetAllCAPendingVerificationsResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "401":
          description: Unauthorized error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "403":
          description: Forbidden error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "404":
          description: Facilities not found
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
      summary: Get Applications details by employee ID
      tags:
      - IP Exam Application
  /rect/ipexams/applications/resubmit:
    put:
      consumes:
      - application/json
      description: Re-Submit an IP application based on provided by Applicant.
      parameters:
      - description: IP Application Data
        in: body
        name: application
        required: true
        schema:
          $ref: '#/definitions/candidate_registation.ResubmitApplicationIp'
      produces:
      - application/json
      responses:
        "200":
          description: IP application re-submitted successfully
          schema:
            $ref: '#/definitions/start.VerifyIPApplicationResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "401":
          description: Unauthorized error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "403":
          description: Forbidden error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "404":
          description: Facilities not found
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
      summary: Re-Submit IP Application
      tags:
      - IP Exam Application
  /rect/ipexams/applications/submit:
    post:
      consumes:
      - application/json
      description: Submit an new IP application based on provided by Applicant.
      parameters:
      - description: IP Application Data
        in: body
        name: application
        required: true
        schema:
          $ref: '#/definitions/candidate_registation.ApplicationIp'
      produces:
      - application/json
      responses:
        "200":
          description: IP Application submitted successfully
          schema:
            $ref: '#/definitions/start.VerifyIPApplicationResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "401":
          description: Unauthorized error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "403":
          description: Forbidden error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "404":
          description: Facilities not found
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
      summary: Create IP Application
      tags:
      - IP Exam Application
  /rect/ipexams/applications/verify:
    put:
      consumes:
      - application/json
      description: Verifies an IP application based on provided details By CA.
      parameters:
      - description: IP Application Data
        in: body
        name: application
        required: true
        schema:
          $ref: '#/definitions/candidate_registation.VerifyApplicationIp'
      produces:
      - application/json
      responses:
        "200":
          description: IP application verified successfully
          schema:
            $ref: '#/definitions/start.VerifyIPApplicationResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "401":
          description: Unauthorized error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "403":
          description: Forbidden error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "404":
          description: Facilities not found
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
      summary: Verify IP Application By CA
      tags:
      - IP Exam Application
  /rect/ipexams/caprevremarks/{employeeid}/{selectedyear}:
    get:
      consumes:
      - application/json
      description: Fetches IP applications CA pending with candiate with remarks for
        a given employee ID and year
      parameters:
      - description: Employee ID
        in: path
        name: employeeid
        required: true
        type: integer
      - description: Selected Year
        in: path
        name: selectedyear
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Fetching applicatins pending with candiate with remarks
          schema:
            $ref: '#/definitions/start.GetAllCAPendingVerificationsResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "401":
          description: Unauthorized error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "403":
          description: Forbidden error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "404":
          description: Facilities not found
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
      summary: Get CA Pending with candiate with remarks details by employee ID
      tags:
      - IP Exam Application
  /rect/ipexams/getAllPendingWithCandidate/{facilityid}/{selectedyear}:
    get:
      consumes:
      - application/json
      description: Fetches IP applications pending with Candidate by facility ID and
        year
      parameters:
      - description: Facility ID
        in: path
        name: facilityid
        required: true
        type: string
      - description: Selected Year
        in: path
        name: selectedyear
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Fetching application pending with candidate
          schema:
            $ref: '#/definitions/start.GetAllCAPendingVerificationsResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "401":
          description: Unauthorized error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "403":
          description: Forbidden error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "404":
          description: Facilities not found
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
      summary: Get All Applications pending with Candidate by Facility ID and year
      tags:
      - IP Exam Application
  /rect/ipexams/getallcapending/{employeeid}/{selectedyear}:
    get:
      consumes:
      - application/json
      description: Fetches IP applications CA pending for a given employee ID and
        year
      parameters:
      - description: Employee ID
        in: path
        name: employeeid
        required: true
        type: integer
      - description: Selected Year
        in: path
        name: selectedyear
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Fetching application pending with CA
          schema:
            $ref: '#/definitions/start.GetAllCAPendingVerificationsResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "401":
          description: Unauthorized error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "403":
          description: Forbidden error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "404":
          description: Facilities not found
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
      summary: Get CA Pending details by employee ID
      tags:
      - IP Exam Application
  /rect/ipexams/getallcapendingapplications/{facilityid}/{selectedyear}:
    get:
      consumes:
      - application/json
      description: Fetches all IP applications pending CA verifications for a given
        facility and year
      parameters:
      - description: Facility ID
        in: path
        name: facilityid
        required: true
        type: string
      - description: Selected Year
        in: path
        name: selectedyear
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Fetched CA Verified applications
          schema:
            $ref: '#/definitions/start.GetAllCAPendingVerificationsResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "401":
          description: Unauthorized error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "403":
          description: Forbidden error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "404":
          description: Facilities not found
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
      summary: Get all pending CA verifications
      tags:
      - IP Exam Application
  /rect/ipexams/getallcaverified/{employeeid}/{selectedyear}:
    get:
      consumes:
      - application/json
      description: Fetches IP applications verified by CA for a given employee ID
        and year
      parameters:
      - description: Employee ID
        in: path
        name: employeeid
        required: true
        type: integer
      - description: Selected Year
        in: path
        name: selectedyear
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Fetched data based on employeeid with Verified status
          schema:
            $ref: '#/definitions/start.GetAllCAPendingVerificationsResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "401":
          description: Unauthorized error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "403":
          description: Forbidden error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "404":
          description: Facilities not found
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
      summary: Get CA verified details by employee ID
      tags:
      - IP Exam Application
  /rect/ipexams/getallcaverifiedapplications/{facilityid}/{selectedyear}:
    get:
      consumes:
      - application/json
      parameters:
      - description: Facility ID
        in: path
        name: facilityid
        required: true
        type: string
      - description: Selected Year
        in: path
        name: selectedyear
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Fetched CA Verified applications
          schema:
            $ref: '#/definitions/start.GetAllCAPendingVerificationsResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "401":
          description: Unauthorized error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "403":
          description: Forbidden error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "404":
          description: Facilities not found
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
      summary: Get all CA verified applications for a given facility and year
      tags:
      - IP Exam Application
  /rect/ipexams/getallcaverifiedapplicationsforna/{facilityid}/{selectedyear}:
    get:
      consumes:
      - application/json
      description: Fetches IP applications  all CA Verified by facility ID and year
      parameters:
      - description: Facility ID
        in: path
        name: facilityid
        required: true
        type: string
      - description: Selected Year
        in: path
        name: selectedyear
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Fetching applications verified by CA
          schema:
            $ref: '#/definitions/start.GetAllCAPendingVerificationsResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "401":
          description: Unauthorized error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "403":
          description: Forbidden error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "404":
          description: Facilities not found
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
      summary: Get All CA Verified by Facility ID and year
      tags:
      - IP Exam Application
  /rect/ipexams/getallnaverified/{employeeid}/{examyear}:
    get:
      consumes:
      - application/json
      description: Fetches IP applications NA Verified by Employee ID and year
      parameters:
      - description: Employee ID
        in: path
        name: employeeid
        required: true
        type: integer
      - description: Exam Year
        in: path
        name: examyear
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Fetching NA verified application by employee ID
          schema:
            $ref: '#/definitions/start.GetAllCAPendingVerificationsResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "401":
          description: Unauthorized error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "403":
          description: Forbidden error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "404":
          description: Facilities not found
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
      summary: Get NA Verified by Employee ID and year
      tags:
      - IP Exam Application
  /rect/ipexams/getallnaverifiedapplications/{facilityid}/{selectedyear}:
    get:
      consumes:
      - application/json
      description: Fetches IP applications all NA Verified by facilityID and year
      parameters:
      - description: Facility ID
        in: path
        name: facilityid
        required: true
        type: string
      - description: Selected Year
        in: path
        name: selectedyear
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Fetching all NA Verified application
          schema:
            $ref: '#/definitions/start.GetAllCAPendingVerificationsResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "401":
          description: Unauthorized error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "403":
          description: Forbidden error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "404":
          description: Facilities not found
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
      summary: Get all NA Verified by facilityID and year
      tags:
      - IP Exam Application
  /rect/ipexams/getallnaverifiedapplicationsforna/{facilityid}/{selectedyear}:
    get:
      consumes:
      - application/json
      description: Fetches IP applications  all NA Verified by facility ID and year
      parameters:
      - description: Facility ID
        in: path
        name: facilityid
        required: true
        type: string
      - description: Selected Year
        in: path
        name: selectedyear
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Fetching applications verified by NA
          schema:
            $ref: '#/definitions/start.GetAllCAPendingVerificationsResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "401":
          description: Unauthorized error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "403":
          description: Forbidden error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "404":
          description: Facilities not found
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
      summary: Get All NA Verified by Facility ID and year
      tags:
      - IP Exam Application
  /rect/ipexams/hallticket/get/{examname}/{employeeid}/{examyear}:
    get:
      consumes:
      - application/json
      description: Fetches All Exam HallTicket  by Examcode employeeid and year
      parameters:
      - description: Exam Code
        in: path
        name: examname
        required: true
        type: integer
      - description: Employee ID
        in: path
        name: employeeid
        required: true
        type: integer
      - description: Exam Year
        in: path
        name: examyear
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Fetching applications generated with Hall ticket
          schema:
            $ref: '#/definitions/start.GetAllCAPendingVerificationsResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "401":
          description: Unauthorized error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "403":
          description: Forbidden error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "404":
          description: Facilities not found
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
      summary: Get All Exam HallTicket  by Examcode employeeid and year
      tags:
      - IP Exam Application
  /rect/ipexams/halltickets/{examyear}:
    put:
      consumes:
      - application/json
      description: Generates hall ticket numbers for a given exam year
      parameters:
      - description: Exam Year
        in: path
        name: examyear
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Generation of Hall ticket number
          schema:
            $ref: '#/definitions/start.GetAllCAPendingVerificationsResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "401":
          description: Unauthorized error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "403":
          description: Forbidden error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "404":
          description: Facilities not found
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
      summary: Generate Hall Ticket Numbers
      tags:
      - IP Exam Application
  /rect/ipexams/noverify:
    put:
      consumes:
      - application/json
      description: Update nodal recommendations for IP applications by employee ID
      parameters:
      - description: Request Body
        in: body
        name: requestBody
        required: true
        schema:
          $ref: '#/definitions/candidate_registation.NAVerifyApplicationIp'
      produces:
      - application/json
      responses:
        "200":
          description: Nodal officer successfully verified this IP application
          schema:
            $ref: '#/definitions/start.VerifyIPApplicationResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "401":
          description: Unauthorized error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "403":
          description: Forbidden error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "404":
          description: Facilities not found
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
      summary: Update Nodal Recommendations for IP by Employee ID
      tags:
      - IP Exam Application
  /rect/ipexams/recommendations/{employeeid}:
    get:
      consumes:
      - application/json
      description: Fetches IP applications Recommendations for a given employee ID
      parameters:
      - description: Employee ID
        in: path
        name: employeeid
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Fetching recommendations by employee ID
          schema:
            $ref: '#/definitions/start.GetAllCAPendingVerificationsResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "401":
          description: Unauthorized error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "403":
          description: Forbidden error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "404":
          description: Facilities not found
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
      summary: Get Application Recommendations by employee ID
      tags:
      - IP Exam Application
  /rect/profile:
    post:
      consumes:
      - application/json
      description: Create a new user with the input payload
      parameters:
      - description: User  data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/candidate_registation.UserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully created the User
          schema:
            $ref: '#/definitions/start.EmployeeMasterResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "401":
          description: Unauthorized error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "403":
          description: Forbidden error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "404":
          description: Facilities not found
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
      summary: Create a new user
      tags:
      - Users
  /rect/profileadmin:
    post:
      consumes:
      - application/json
      description: Creates a new admin user with the provided information
      parameters:
      - description: Admin creation request
        in: body
        name: adminRequest
        required: true
        schema:
          $ref: '#/definitions/candidate_registation.AdminCreation'
      produces:
      - application/json
      responses:
        "200":
          description: Admin creation succesfully registerd
          schema:
            $ref: '#/definitions/start.AdminCreationResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "401":
          description: Unauthorized error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "403":
          description: Forbidden error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "404":
          description: No Articles are invoiced to the beat
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
      summary: Create a new admin user
      tags:
      - Admin
  /rect/profileadminupdate:
    put:
      consumes:
      - application/json
      description: Update an existing admin user's information
      parameters:
      - description: Admin user information
        in: body
        name: AdminUser
        required: true
        schema:
          $ref: '#/definitions/candidate_registation.UpdateAdminMasterStruc'
      produces:
      - application/json
      responses:
        "200":
          description: Admin Users updated Successfully
          schema:
            $ref: '#/definitions/start.AdminUserResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "401":
          description: Unauthorized error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "403":
          description: Forbidden error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "404":
          description: No Articles are invoiced to the beat
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
      summary: Update Admin User
      tags:
      - Admin
  /rect/psexams/applications/getbyempid/{employeeid}/{examyear}:
    get:
      consumes:
      - application/json
      description: Fetch PS Group B exam applications by employee ID and exam year
      parameters:
      - description: Employee ID
        in: path
        name: employeeid
        required: true
        type: integer
      - description: Exam Year
        in: path
        name: examyear
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Application details fetched successfully
          schema:
            $ref: '#/definitions/start.GetApplicationsResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "401":
          description: Unauthorized error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "403":
          description: Forbidden error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "404":
          description: Applications not found
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
      summary: Get PS Applications by Employee ID
      tags:
      - PS GroupB Applications
  /rect/psexams/applications/resubmit:
    put:
      consumes:
      - application/json
      description: Resubmit a PS Group B exam application
      parameters:
      - description: Application data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/candidate_registation.ReApplicationGroupB'
      produces:
      - application/json
      responses:
        "200":
          description: PS Group B Exam application re-submitted successfully
          schema:
            $ref: '#/definitions/start.PsGroupBResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "401":
          description: Unauthorized error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "403":
          description: Forbidden error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "404":
          description: Applications not found
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
      summary: Resubmit PS Application
      tags:
      - PS GroupB Applications
  /rect/psexams/applications/submit:
    post:
      consumes:
      - application/json
      description: Create a new PS Group B exam application
      parameters:
      - description: Application data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/candidate_registation.ApplicationGroupB'
      produces:
      - application/json
      responses:
        "200":
          description: PS Group B Exam Application submitted successfully
          schema:
            $ref: '#/definitions/start.PsGroupBResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "401":
          description: Unauthorized error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "403":
          description: Forbidden error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "404":
          description: Applications not found
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
      summary: Create new PS Applications
      tags:
      - PS GroupB Applications
  /rect/psexams/applications/verify:
    put:
      consumes:
      - application/json
      description: Verify a PS Group B exam application
      parameters:
      - description: Application data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/candidate_registation.VerifyApplicationGroupB'
      produces:
      - application/json
      responses:
        "200":
          description: PS Group B exam application verified successfully
          schema:
            $ref: '#/definitions/start.PsGroupBResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "401":
          description: Unauthorized error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "403":
          description: Forbidden error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "404":
          description: Applications not found
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
      summary: Verify PS Application By CA
      tags:
      - PS GroupB Applications
  /rect/psexams/caprevremarks/{employeeid}/{examyear}:
    get:
      consumes:
      - application/json
      description: Fetches PS Group A applications pending with candidate along with
        old remarks by employee ID and exam year
      parameters:
      - description: Employee ID
        in: path
        name: employeeid
        required: true
        type: integer
      - description: Selected Year
        in: path
        name: examyear
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Fetching applicatins pending with candiate with remarks
          schema:
            $ref: '#/definitions/start.GetApplicationsResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "401":
          description: Unauthorized error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "403":
          description: Forbidden error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "404":
          description: Applications not found
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
      summary: Get PS Group A pending old remarks by Employee ID
      tags:
      - PS GroupB Applications
  /rect/psexams/center/updatecenters:
    post:
      consumes:
      - application/json
      description: Update exam centers in PS applications with new data
      parameters:
      - description: JSON array of PS exam applications
        in: body
        name: request
        required: true
        schema:
          items:
            $ref: '#/definitions/handlers.ApplicationGroupBCenter'
          type: array
      produces:
      - application/json
      responses:
        "200":
          description: Updating Exam centers for IP Applications
          schema:
            $ref: '#/definitions/start.GetApplicationsResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "401":
          description: Unauthorized error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "403":
          description: Forbidden error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "404":
          description: Applications not found
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
      summary: Update exam centers in PS applications
      tags:
      - PS GroupB Applications
  /rect/psexams/getAllPSPendingWithCandidate/{facilityid}/{selectedyear}:
    get:
      consumes:
      - application/json
      description: Fetches PS applications that are pending with candidates based
        on facility ID and selected year
      parameters:
      - description: Facility ID
        in: path
        name: facilityid
        required: true
        type: string
      - description: Selected Year
        in: path
        name: selectedyear
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: 'Fetching application pending with candidate '
          schema:
            $ref: '#/definitions/start.GetApplicationsResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "401":
          description: Unauthorized error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "403":
          description: Forbidden error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "404":
          description: Applications not found
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
      summary: Get PS applications pending with candidate for a specific facility
        and year
      tags:
      - PS GroupB Applications
  /rect/psexams/getallcapending/{employeeid}/{selectedyear}:
    get:
      consumes:
      - application/json
      description: Fetches PS Group A applications pending verification by CA for
        a specific employee ID and exam year
      parameters:
      - description: Employee ID
        in: path
        name: employeeid
        required: true
        type: integer
      - description: Selected Year
        in: path
        name: selectedyear
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Fetching application pending with CA
          schema:
            $ref: '#/definitions/start.GetApplicationsResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "401":
          description: Unauthorized error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "403":
          description: Forbidden error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "404":
          description: Applications not found
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
      summary: Get PS Group A pending details by Employee ID
      tags:
      - PS GroupB Applications
  /rect/psexams/getallcapendingapplications/{facilityid}/{selectedyear}:
    get:
      consumes:
      - application/json
      description: Fetches all pending PS Group A applications pending verification
        by CA for a specific facility and selected year
      parameters:
      - description: Facility ID
        in: path
        name: facilityid
        required: true
        type: string
      - description: Selected Year
        in: path
        name: selectedyear
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Fetched pending application with CA
          schema:
            $ref: '#/definitions/start.GetApplicationsResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "401":
          description: Unauthorized error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "403":
          description: Forbidden error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "404":
          description: Applications not found
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
      summary: Get all PS Group A pending verifications by CA
      tags:
      - PS GroupB Applications
  /rect/psexams/getallcaverified/{employeeid}/{selectedyear}:
    get:
      consumes:
      - application/json
      description: Fetches PS Group A applications verified by CA for a specific Employee
        ID and exam year
      parameters:
      - description: Employee ID
        in: path
        name: employeeid
        required: true
        type: integer
      - description: Selected Year
        in: path
        name: selectedyear
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Fetched data based on employeeid with Verified status
          schema:
            $ref: '#/definitions/start.GetApplicationsResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "401":
          description: Unauthorized error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "403":
          description: Forbidden error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "404":
          description: Applications not found
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
      summary: Get PS Group A verified applications by Employee ID
      tags:
      - PS GroupB Applications
  /rect/psexams/getallcaverifiedapplications/{facilityid}/{selectedyear}:
    get:
      consumes:
      - application/json
      description: Fetches PS Group A applications verified by CA for a specific facility
        ID and selected year
      parameters:
      - description: Facility ID
        in: path
        name: facilityid
        required: true
        type: string
      - description: Selected Year
        in: path
        name: selectedyear
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Fetched CA Verified applications
          schema:
            $ref: '#/definitions/start.GetApplicationsResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "401":
          description: Unauthorized error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "403":
          description: Forbidden error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "404":
          description: Applications not found
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
      summary: Get PS Group A verified applications
      tags:
      - PS GroupB Applications
  /rect/psexams/getallcaverifiedapplicationsforna/{facilityid}/{selectedyear}:
    get:
      consumes:
      - application/json
      description: Fetches PS applications verified by CA for a specific facility
        ID and selected year
      parameters:
      - description: Facility ID
        in: path
        name: facilityid
        required: true
        type: string
      - description: Selected Year
        in: path
        name: selectedyear
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Fetching application verified by CA for NA
          schema:
            $ref: '#/definitions/start.GetApplicationsResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "401":
          description: Unauthorized error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "403":
          description: Forbidden error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "404":
          description: Applications not found
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
      summary: Get PS applications verified by CA for NA
      tags:
      - PS GroupB Applications
  /rect/psexams/getallnaverified/{employeeid}:
    get:
      consumes:
      - application/json
      description: Fetches PS applications verified by NA based on employee ID
      parameters:
      - description: Employee ID
        in: path
        name: employeeid
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Fetching NA verified application by employee ID
          schema:
            $ref: '#/definitions/start.GetApplicationsResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "401":
          description: Unauthorized error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "403":
          description: Forbidden error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "404":
          description: Applications not found
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
      summary: Get PS applications verified by NA for a specific employee ID
      tags:
      - PS GroupB Applications
  /rect/psexams/getallnaverifiedapplications/{facilityid}/{selectedyear}:
    get:
      consumes:
      - application/json
      description: Fetches PS applications verified by NA based on facility ID and
        selected year
      parameters:
      - description: Facility ID
        in: path
        name: facilityid
        required: true
        type: string
      - description: Selected Year
        in: path
        name: selectedyear
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Fetching all NA Verified application
          schema:
            $ref: '#/definitions/start.GetApplicationsResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "401":
          description: Unauthorized error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "403":
          description: Forbidden error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "404":
          description: Applications not found
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
      summary: Get PS applications verified by NA
      tags:
      - PS GroupB Applications
  /rect/psexams/getallnaverifiedapplicationsforna/{facilityid}/{selectedyear}:
    get:
      consumes:
      - application/json
      description: Fetches PS applications verified by NA based on facility ID and
        selected year
      parameters:
      - description: Facility ID
        in: path
        name: facilityid
        required: true
        type: string
      - description: Selected Year
        in: path
        name: selectedyear
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Updating Exam centers for IP Applications
          schema:
            $ref: '#/definitions/start.GetApplicationsResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "401":
          description: Unauthorized error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "403":
          description: Forbidden error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "404":
          description: Applications not found
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
      summary: Get PS applications verified by NA for a specific facility and year
      tags:
      - PS GroupB Applications
  /rect/psexams/noverify:
    put:
      consumes:
      - application/json
      description: Updates nodal recommendations for PS GroupB applications based
        on Employee ID
      parameters:
      - description: Application GroupB data
        in: body
        name: newAppln
        required: true
        schema:
          $ref: '#/definitions/candidate_registation.NAVerifyApplicationGroupB'
      produces:
      - application/json
      responses:
        "200":
          description: 'Nodal officer successfully verified this PS GroupB application '
          schema:
            $ref: '#/definitions/start.PsGroupBResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "401":
          description: Unauthorized error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "403":
          description: Forbidden error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "404":
          description: Applications not found
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
      summary: Update Nodal Recommendations for PS by Employee ID
      tags:
      - PS GroupB Applications
  /rect/psexams/recommendations/{employeeid}:
    get:
      consumes:
      - application/json
      description: Fetches PS exam recommendations based on employee ID
      parameters:
      - description: Employee ID
        in: path
        name: employeeid
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Fetching recommendations by employee ID
          schema:
            $ref: '#/definitions/start.GetApplicationsResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "401":
          description: Unauthorized error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "403":
          description: Forbidden error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "404":
          description: Applications not found
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
      summary: Get PS exam recommendations by Employee ID
      tags:
      - PS GroupB Applications
  /rect/updateCenterCodeForApplications:
    put:
      consumes:
      - application/json
      description: Update the center code for multiple applications
      parameters:
      - description: Request Data Array
        in: body
        name: requestData
        required: true
        schema:
          items:
            properties:
              controllingOfficeFacilityID:
                type: string
              examCenterID:
                type: integer
              examCityID:
                type: integer
              seatsToAllot:
                type: integer
            type: object
          type: array
      produces:
      - application/json
      responses:
        "200":
          description: Total Number of Applications Updated with center code Successfully
          schema:
            $ref: '#/definitions/start.UpdateCenterCodeResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "401":
          description: Unauthorized error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "403":
          description: Forbidden error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "404":
          description: Facilities not found
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
      summary: Update Center Code For Applications
      tags:
      - IP Exam Application
  /rect/updateCenterCodeForApplicationsGDSPM:
    put:
      consumes:
      - application/json
      description: Updates center codes for GDSPM applications based on provided data
        array
      parameters:
      - description: Array of request data to update center codes
        in: body
        name: request
        required: true
        schema:
          items:
            items:
              properties:
                controllingOfficeFacilityID:
                  type: string
                examCenterID:
                  type: integer
                examCityID:
                  type: integer
                seatsToAllot:
                  type: integer
              type: object
            type: array
          type: array
      produces:
      - application/json
      responses:
        "200":
          description: Applications updated successfully
          schema:
            $ref: '#/definitions/start.GetGDSPMApplicationsResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "401":
          description: Unauthorized error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "403":
          description: Forbidden error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "404":
          description: Applications not found
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
      summary: Update Center Code for Applications in GDSPM
      tags:
      - GDS PM Applications
  /rect/updateCenterCodeForApplicationsMTSPMMG:
    put:
      consumes:
      - application/json
      description: Update center code for applications based on preferences, center
        code, reporting office name, and seats to allot
      parameters:
      - description: Array of request data to update center codes
        in: body
        name: request
        required: true
        schema:
          items:
            items:
              properties:
                controllingOfficeFacilityID:
                  type: string
                examCenterID:
                  type: integer
                examCityID:
                  type: integer
                seatsToAllot:
                  type: integer
              type: object
            type: array
          type: array
      produces:
      - application/json
      responses:
        "200":
          description: 'Fetching application count based on Exam city '
          schema:
            $ref: '#/definitions/start.GetApplicationsResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "401":
          description: Unauthorized error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "403":
          description: Forbidden error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "404":
          description: Applications not found
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
      summary: Update center code for applications in MTSPMMG
      tags:
      - MTSPM Applications
  /rect/updateCenterCodeForApplicationsPS:
    put:
      consumes:
      - application/json
      description: Updates the center code for PS applications based on provided data
      parameters:
      - description: Request Data Array
        in: body
        name: requestDataArray
        required: true
        schema:
          items:
            items:
              properties:
                controllingOfficeFacilityID:
                  type: string
                examCenterID:
                  type: integer
                examCityID:
                  type: integer
                seatsToAllot:
                  type: integer
              type: object
            type: array
          type: array
      produces:
      - application/json
      responses:
        "200":
          description: All Applications Updated with center code Successfully
          schema:
            $ref: '#/definitions/start.GetApplicationsResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "401":
          description: Unauthorized error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "403":
          description: Forbidden error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "404":
          description: Applications not found
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
      summary: Update Center Code for Applications
      tags:
      - PS GroupB Applications
  /rect/users/ChangeUserPassword:
    put:
      consumes:
      - application/json
      description: Change the password of a user by their username
      parameters:
      - description: Change Password Request
        in: body
        name: requestBody
        required: true
        schema:
          $ref: '#/definitions/candidate_registation.RequestBody'
      produces:
      - application/json
      responses:
        "200":
          description: New Password updated Successfully
          schema:
            $ref: '#/definitions/start.UserResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "401":
          description: Unauthorized error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "403":
          description: Forbidden error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "404":
          description: Facilities not found
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
      summary: Change user password
      tags:
      - Users
  /rect/users/changepassword/{id}:
    put:
      consumes:
      - application/json
      description: Change the password of a user by their ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: Change Password Request
        in: body
        name: requestBody
        required: true
        schema:
          $ref: '#/definitions/handlers.RequestBody'
      produces:
      - application/json
      responses:
        "200":
          description: New Password updated Successfully
          schema:
            $ref: '#/definitions/start.UserResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "401":
          description: Unauthorized error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "403":
          description: Forbidden error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "404":
          description: Facilities not found
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
      summary: Change user password
      tags:
      - Users
  /rect/users/getpassword/{id1}:
    get:
      consumes:
      - application/json
      description: Get the password of a user by their employee ID and send it via
        SMS
      parameters:
      - description: Employee ID
        in: path
        name: id1
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Your current password is Successfully Senty
          schema:
            $ref: '#/definitions/start.UserResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "401":
          description: Unauthorized error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "403":
          description: Forbidden error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "404":
          description: Facilities not found
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
      summary: Get password by employee ID
      tags:
      - Users
  /rect/users/login:
    post:
      consumes:
      - application/json
      description: Verify a user's login credentials
      parameters:
      - description: User login data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/candidate_registation.CandidateRegistrationGenerateOTP'
      produces:
      - application/json
      responses:
        "200":
          description: User login verified successfully
          schema:
            $ref: '#/definitions/start.EmployeeMasterResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "401":
          description: Unauthorized error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "403":
          description: Forbidden error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "404":
          description: Facilities not found
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
      summary: Verify user login
      tags:
      - Users
  /rect/users/new/submit:
    post:
      consumes:
      - application/json
      description: Create a new user and send OTP for verification
      parameters:
      - description: New User Data
        in: body
        name: newUser
        required: true
        schema:
          $ref: '#/definitions/candidate_registation.CandidateRegistrationGenerateOTP'
      produces:
      - application/json
      responses:
        "200":
          description: New User created successfully
          schema:
            $ref: '#/definitions/start.UserResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "401":
          description: Unauthorized error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "403":
          description: Forbidden error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "404":
          description: Facilities not found
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
      summary: Create a new user for the first time
      tags:
      - Users
  /rect/users/new/update:
    post:
      consumes:
      - application/json
      description: Update details of a first-time user based on provided information
        and OTP validation
      parameters:
      - description: New User Details
        in: body
        name: newUser
        required: true
        schema:
          $ref: '#/definitions/candidate_registation.CandidateRegistrationOTP'
      produces:
      - application/json
      responses:
        "200":
          description: New User updated successfully
          schema:
            $ref: '#/definitions/start.UserResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "401":
          description: Unauthorized error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "403":
          description: Forbidden error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "404":
          description: Facilities not found
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
      summary: Update first-time user details
      tags:
      - Users
  /rect/users/reset/savenewpassword:
    post:
      consumes:
      - application/json
      description: Save new password for a user after password reset.
      parameters:
      - description: User reset save new password request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/candidate_registation.StrucUserResetSaveNewPassword'
      produces:
      - application/json
      responses:
        "200":
          description: 'User password reset successfully '
          schema:
            $ref: '#/definitions/start.UserResetSaveNewPasswordResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "401":
          description: Unauthorized error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "403":
          description: Forbidden error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "404":
          description: Facilities not found
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
      summary: Save new password after user reset
      tags:
      - Users
  /rect/users/reset/validateOTP:
    post:
      consumes:
      - application/json
      description: Validates the OTP for user reset process
      parameters:
      - description: User Reset Validate OTP
        in: body
        name: newUser
        required: true
        schema:
          $ref: '#/definitions/candidate_registation.StrucUserResetValidateOTP'
      produces:
      - application/json
      responses:
        "200":
          description: User OTP intiated
          schema:
            $ref: '#/definitions/start.UserResetValidateOTPResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "401":
          description: Unauthorized error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "403":
          description: Forbidden error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "404":
          description: Facilities not found
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
      summary: Validate OTP for User Reset
      tags:
      - Users
  /rect/users/reset/validateusername:
    post:
      consumes:
      - application/json
      description: Validate the username and send OTP for password reset.
      parameters:
      - description: User reset validate username request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/candidate_registation.StrucUserResetValidateUserName'
      produces:
      - application/json
      responses:
        "200":
          description: Successful response
          schema:
            $ref: '#/definitions/start.UserResetValidateUserNameResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "401":
          description: Unauthorized error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "403":
          description: Forbidden error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "404":
          description: Facilities not found
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
      summary: Validate username during password reset
      tags:
      - Users
  /rect/users/updatepassword/{id}:
    put:
      consumes:
      - application/json
      description: Update the password of a user by their ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: User Details
        in: body
        name: newUser
        required: true
        schema:
          $ref: '#/definitions/candidate_registation.CreateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Password updated Successfully
          schema:
            $ref: '#/definitions/start.UserResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "401":
          description: Unauthorized error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "403":
          description: Forbidden error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "404":
          description: Facilities not found
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/start.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/start.ErrorResponse'
      summary: Update user password
      tags:
      - Users
swagger: "2.0"
