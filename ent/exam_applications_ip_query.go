// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"
	"recruit/ent/cadre_choice_ip"
	"recruit/ent/center"
	"recruit/ent/circlesummaryforno"
	"recruit/ent/exam_applications_ip"
	"recruit/ent/examcitycenter"
	"recruit/ent/logs"
	"recruit/ent/placeofpreferenceip"
	"recruit/ent/predicate"
	"recruit/ent/recommendationsipapplications"
	"recruit/ent/rolemaster"
	"recruit/ent/usermaster"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ExamApplicationsIPQuery is the builder for querying Exam_Applications_IP entities.
type ExamApplicationsIPQuery struct {
	config
	ctx                   *QueryContext
	order                 []exam_applications_ip.OrderOption
	inters                []Interceptor
	predicates            []predicate.Exam_Applications_IP
	withUsersIPRef        *UserMasterQuery
	withCadrePrefRef      *CadreChoiceIPQuery
	withCirclePrefRef     *PlaceOfPreferenceIPQuery
	withIPApplicationsRef *RecommendationsIPApplicationsQuery
	withLogData           *LogsQuery
	withExamCentres       *CenterQuery
	withExamcitycenter    *ExamCityCenterQuery
	withRoleusers         *RoleMasterQuery
	withCircleRefs        *CircleSummaryForNOQuery
	withFKs               bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the ExamApplicationsIPQuery builder.
func (eaiq *ExamApplicationsIPQuery) Where(ps ...predicate.Exam_Applications_IP) *ExamApplicationsIPQuery {
	eaiq.predicates = append(eaiq.predicates, ps...)
	return eaiq
}

// Limit the number of records to be returned by this query.
func (eaiq *ExamApplicationsIPQuery) Limit(limit int) *ExamApplicationsIPQuery {
	eaiq.ctx.Limit = &limit
	return eaiq
}

// Offset to start from.
func (eaiq *ExamApplicationsIPQuery) Offset(offset int) *ExamApplicationsIPQuery {
	eaiq.ctx.Offset = &offset
	return eaiq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (eaiq *ExamApplicationsIPQuery) Unique(unique bool) *ExamApplicationsIPQuery {
	eaiq.ctx.Unique = &unique
	return eaiq
}

// Order specifies how the records should be ordered.
func (eaiq *ExamApplicationsIPQuery) Order(o ...exam_applications_ip.OrderOption) *ExamApplicationsIPQuery {
	eaiq.order = append(eaiq.order, o...)
	return eaiq
}

// QueryUsersIPRef chains the current query on the "UsersIPRef" edge.
func (eaiq *ExamApplicationsIPQuery) QueryUsersIPRef() *UserMasterQuery {
	query := (&UserMasterClient{config: eaiq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eaiq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eaiq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(exam_applications_ip.Table, exam_applications_ip.FieldID, selector),
			sqlgraph.To(usermaster.Table, usermaster.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, exam_applications_ip.UsersIPRefTable, exam_applications_ip.UsersIPRefColumn),
		)
		fromU = sqlgraph.SetNeighbors(eaiq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCadrePrefRef chains the current query on the "CadrePref_Ref" edge.
func (eaiq *ExamApplicationsIPQuery) QueryCadrePrefRef() *CadreChoiceIPQuery {
	query := (&CadreChoiceIPClient{config: eaiq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eaiq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eaiq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(exam_applications_ip.Table, exam_applications_ip.FieldID, selector),
			sqlgraph.To(cadre_choice_ip.Table, cadre_choice_ip.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, exam_applications_ip.CadrePrefRefTable, exam_applications_ip.CadrePrefRefColumn),
		)
		fromU = sqlgraph.SetNeighbors(eaiq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCirclePrefRef chains the current query on the "CirclePrefRef" edge.
func (eaiq *ExamApplicationsIPQuery) QueryCirclePrefRef() *PlaceOfPreferenceIPQuery {
	query := (&PlaceOfPreferenceIPClient{config: eaiq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eaiq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eaiq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(exam_applications_ip.Table, exam_applications_ip.FieldID, selector),
			sqlgraph.To(placeofpreferenceip.Table, placeofpreferenceip.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, exam_applications_ip.CirclePrefRefTable, exam_applications_ip.CirclePrefRefColumn),
		)
		fromU = sqlgraph.SetNeighbors(eaiq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryIPApplicationsRef chains the current query on the "IPApplicationsRef" edge.
func (eaiq *ExamApplicationsIPQuery) QueryIPApplicationsRef() *RecommendationsIPApplicationsQuery {
	query := (&RecommendationsIPApplicationsClient{config: eaiq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eaiq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eaiq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(exam_applications_ip.Table, exam_applications_ip.FieldID, selector),
			sqlgraph.To(recommendationsipapplications.Table, recommendationsipapplications.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, exam_applications_ip.IPApplicationsRefTable, exam_applications_ip.IPApplicationsRefColumn),
		)
		fromU = sqlgraph.SetNeighbors(eaiq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryLogData chains the current query on the "LogData" edge.
func (eaiq *ExamApplicationsIPQuery) QueryLogData() *LogsQuery {
	query := (&LogsClient{config: eaiq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eaiq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eaiq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(exam_applications_ip.Table, exam_applications_ip.FieldID, selector),
			sqlgraph.To(logs.Table, logs.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, exam_applications_ip.LogDataTable, exam_applications_ip.LogDataColumn),
		)
		fromU = sqlgraph.SetNeighbors(eaiq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryExamCentres chains the current query on the "ExamCentres" edge.
func (eaiq *ExamApplicationsIPQuery) QueryExamCentres() *CenterQuery {
	query := (&CenterClient{config: eaiq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eaiq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eaiq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(exam_applications_ip.Table, exam_applications_ip.FieldID, selector),
			sqlgraph.To(center.Table, center.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, exam_applications_ip.ExamCentresTable, exam_applications_ip.ExamCentresColumn),
		)
		fromU = sqlgraph.SetNeighbors(eaiq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryExamcitycenter chains the current query on the "examcitycenter" edge.
func (eaiq *ExamApplicationsIPQuery) QueryExamcitycenter() *ExamCityCenterQuery {
	query := (&ExamCityCenterClient{config: eaiq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eaiq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eaiq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(exam_applications_ip.Table, exam_applications_ip.FieldID, selector),
			sqlgraph.To(examcitycenter.Table, examcitycenter.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, exam_applications_ip.ExamcitycenterTable, exam_applications_ip.ExamcitycenterColumn),
		)
		fromU = sqlgraph.SetNeighbors(eaiq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryRoleusers chains the current query on the "roleusers" edge.
func (eaiq *ExamApplicationsIPQuery) QueryRoleusers() *RoleMasterQuery {
	query := (&RoleMasterClient{config: eaiq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eaiq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eaiq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(exam_applications_ip.Table, exam_applications_ip.FieldID, selector),
			sqlgraph.To(rolemaster.Table, rolemaster.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, exam_applications_ip.RoleusersTable, exam_applications_ip.RoleusersColumn),
		)
		fromU = sqlgraph.SetNeighbors(eaiq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCircleRefs chains the current query on the "CircleRefs" edge.
func (eaiq *ExamApplicationsIPQuery) QueryCircleRefs() *CircleSummaryForNOQuery {
	query := (&CircleSummaryForNOClient{config: eaiq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eaiq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eaiq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(exam_applications_ip.Table, exam_applications_ip.FieldID, selector),
			sqlgraph.To(circlesummaryforno.Table, circlesummaryforno.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, exam_applications_ip.CircleRefsTable, exam_applications_ip.CircleRefsColumn),
		)
		fromU = sqlgraph.SetNeighbors(eaiq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first Exam_Applications_IP entity from the query.
// Returns a *NotFoundError when no Exam_Applications_IP was found.
func (eaiq *ExamApplicationsIPQuery) First(ctx context.Context) (*Exam_Applications_IP, error) {
	nodes, err := eaiq.Limit(1).All(setContextOp(ctx, eaiq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{exam_applications_ip.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (eaiq *ExamApplicationsIPQuery) FirstX(ctx context.Context) *Exam_Applications_IP {
	node, err := eaiq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first Exam_Applications_IP ID from the query.
// Returns a *NotFoundError when no Exam_Applications_IP ID was found.
func (eaiq *ExamApplicationsIPQuery) FirstID(ctx context.Context) (id int64, err error) {
	var ids []int64
	if ids, err = eaiq.Limit(1).IDs(setContextOp(ctx, eaiq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{exam_applications_ip.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (eaiq *ExamApplicationsIPQuery) FirstIDX(ctx context.Context) int64 {
	id, err := eaiq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single Exam_Applications_IP entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one Exam_Applications_IP entity is found.
// Returns a *NotFoundError when no Exam_Applications_IP entities are found.
func (eaiq *ExamApplicationsIPQuery) Only(ctx context.Context) (*Exam_Applications_IP, error) {
	nodes, err := eaiq.Limit(2).All(setContextOp(ctx, eaiq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{exam_applications_ip.Label}
	default:
		return nil, &NotSingularError{exam_applications_ip.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (eaiq *ExamApplicationsIPQuery) OnlyX(ctx context.Context) *Exam_Applications_IP {
	node, err := eaiq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only Exam_Applications_IP ID in the query.
// Returns a *NotSingularError when more than one Exam_Applications_IP ID is found.
// Returns a *NotFoundError when no entities are found.
func (eaiq *ExamApplicationsIPQuery) OnlyID(ctx context.Context) (id int64, err error) {
	var ids []int64
	if ids, err = eaiq.Limit(2).IDs(setContextOp(ctx, eaiq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{exam_applications_ip.Label}
	default:
		err = &NotSingularError{exam_applications_ip.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (eaiq *ExamApplicationsIPQuery) OnlyIDX(ctx context.Context) int64 {
	id, err := eaiq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Exam_Applications_IPs.
func (eaiq *ExamApplicationsIPQuery) All(ctx context.Context) ([]*Exam_Applications_IP, error) {
	ctx = setContextOp(ctx, eaiq.ctx, "All")
	if err := eaiq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*Exam_Applications_IP, *ExamApplicationsIPQuery]()
	return withInterceptors[[]*Exam_Applications_IP](ctx, eaiq, qr, eaiq.inters)
}

// AllX is like All, but panics if an error occurs.
func (eaiq *ExamApplicationsIPQuery) AllX(ctx context.Context) []*Exam_Applications_IP {
	nodes, err := eaiq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of Exam_Applications_IP IDs.
func (eaiq *ExamApplicationsIPQuery) IDs(ctx context.Context) (ids []int64, err error) {
	if eaiq.ctx.Unique == nil && eaiq.path != nil {
		eaiq.Unique(true)
	}
	ctx = setContextOp(ctx, eaiq.ctx, "IDs")
	if err = eaiq.Select(exam_applications_ip.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (eaiq *ExamApplicationsIPQuery) IDsX(ctx context.Context) []int64 {
	ids, err := eaiq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (eaiq *ExamApplicationsIPQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, eaiq.ctx, "Count")
	if err := eaiq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, eaiq, querierCount[*ExamApplicationsIPQuery](), eaiq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (eaiq *ExamApplicationsIPQuery) CountX(ctx context.Context) int {
	count, err := eaiq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (eaiq *ExamApplicationsIPQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, eaiq.ctx, "Exist")
	switch _, err := eaiq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (eaiq *ExamApplicationsIPQuery) ExistX(ctx context.Context) bool {
	exist, err := eaiq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the ExamApplicationsIPQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (eaiq *ExamApplicationsIPQuery) Clone() *ExamApplicationsIPQuery {
	if eaiq == nil {
		return nil
	}
	return &ExamApplicationsIPQuery{
		config:                eaiq.config,
		ctx:                   eaiq.ctx.Clone(),
		order:                 append([]exam_applications_ip.OrderOption{}, eaiq.order...),
		inters:                append([]Interceptor{}, eaiq.inters...),
		predicates:            append([]predicate.Exam_Applications_IP{}, eaiq.predicates...),
		withUsersIPRef:        eaiq.withUsersIPRef.Clone(),
		withCadrePrefRef:      eaiq.withCadrePrefRef.Clone(),
		withCirclePrefRef:     eaiq.withCirclePrefRef.Clone(),
		withIPApplicationsRef: eaiq.withIPApplicationsRef.Clone(),
		withLogData:           eaiq.withLogData.Clone(),
		withExamCentres:       eaiq.withExamCentres.Clone(),
		withExamcitycenter:    eaiq.withExamcitycenter.Clone(),
		withRoleusers:         eaiq.withRoleusers.Clone(),
		withCircleRefs:        eaiq.withCircleRefs.Clone(),
		// clone intermediate query.
		sql:  eaiq.sql.Clone(),
		path: eaiq.path,
	}
}

// WithUsersIPRef tells the query-builder to eager-load the nodes that are connected to
// the "UsersIPRef" edge. The optional arguments are used to configure the query builder of the edge.
func (eaiq *ExamApplicationsIPQuery) WithUsersIPRef(opts ...func(*UserMasterQuery)) *ExamApplicationsIPQuery {
	query := (&UserMasterClient{config: eaiq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	eaiq.withUsersIPRef = query
	return eaiq
}

// WithCadrePrefRef tells the query-builder to eager-load the nodes that are connected to
// the "CadrePref_Ref" edge. The optional arguments are used to configure the query builder of the edge.
func (eaiq *ExamApplicationsIPQuery) WithCadrePrefRef(opts ...func(*CadreChoiceIPQuery)) *ExamApplicationsIPQuery {
	query := (&CadreChoiceIPClient{config: eaiq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	eaiq.withCadrePrefRef = query
	return eaiq
}

// WithCirclePrefRef tells the query-builder to eager-load the nodes that are connected to
// the "CirclePrefRef" edge. The optional arguments are used to configure the query builder of the edge.
func (eaiq *ExamApplicationsIPQuery) WithCirclePrefRef(opts ...func(*PlaceOfPreferenceIPQuery)) *ExamApplicationsIPQuery {
	query := (&PlaceOfPreferenceIPClient{config: eaiq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	eaiq.withCirclePrefRef = query
	return eaiq
}

// WithIPApplicationsRef tells the query-builder to eager-load the nodes that are connected to
// the "IPApplicationsRef" edge. The optional arguments are used to configure the query builder of the edge.
func (eaiq *ExamApplicationsIPQuery) WithIPApplicationsRef(opts ...func(*RecommendationsIPApplicationsQuery)) *ExamApplicationsIPQuery {
	query := (&RecommendationsIPApplicationsClient{config: eaiq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	eaiq.withIPApplicationsRef = query
	return eaiq
}

// WithLogData tells the query-builder to eager-load the nodes that are connected to
// the "LogData" edge. The optional arguments are used to configure the query builder of the edge.
func (eaiq *ExamApplicationsIPQuery) WithLogData(opts ...func(*LogsQuery)) *ExamApplicationsIPQuery {
	query := (&LogsClient{config: eaiq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	eaiq.withLogData = query
	return eaiq
}

// WithExamCentres tells the query-builder to eager-load the nodes that are connected to
// the "ExamCentres" edge. The optional arguments are used to configure the query builder of the edge.
func (eaiq *ExamApplicationsIPQuery) WithExamCentres(opts ...func(*CenterQuery)) *ExamApplicationsIPQuery {
	query := (&CenterClient{config: eaiq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	eaiq.withExamCentres = query
	return eaiq
}

// WithExamcitycenter tells the query-builder to eager-load the nodes that are connected to
// the "examcitycenter" edge. The optional arguments are used to configure the query builder of the edge.
func (eaiq *ExamApplicationsIPQuery) WithExamcitycenter(opts ...func(*ExamCityCenterQuery)) *ExamApplicationsIPQuery {
	query := (&ExamCityCenterClient{config: eaiq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	eaiq.withExamcitycenter = query
	return eaiq
}

// WithRoleusers tells the query-builder to eager-load the nodes that are connected to
// the "roleusers" edge. The optional arguments are used to configure the query builder of the edge.
func (eaiq *ExamApplicationsIPQuery) WithRoleusers(opts ...func(*RoleMasterQuery)) *ExamApplicationsIPQuery {
	query := (&RoleMasterClient{config: eaiq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	eaiq.withRoleusers = query
	return eaiq
}

// WithCircleRefs tells the query-builder to eager-load the nodes that are connected to
// the "CircleRefs" edge. The optional arguments are used to configure the query builder of the edge.
func (eaiq *ExamApplicationsIPQuery) WithCircleRefs(opts ...func(*CircleSummaryForNOQuery)) *ExamApplicationsIPQuery {
	query := (&CircleSummaryForNOClient{config: eaiq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	eaiq.withCircleRefs = query
	return eaiq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		ApplicationNumber string `json:"ApplicationNumber,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.ExamApplicationsIP.Query().
//		GroupBy(exam_applications_ip.FieldApplicationNumber).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (eaiq *ExamApplicationsIPQuery) GroupBy(field string, fields ...string) *ExamApplicationsIPGroupBy {
	eaiq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &ExamApplicationsIPGroupBy{build: eaiq}
	grbuild.flds = &eaiq.ctx.Fields
	grbuild.label = exam_applications_ip.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		ApplicationNumber string `json:"ApplicationNumber,omitempty"`
//	}
//
//	client.ExamApplicationsIP.Query().
//		Select(exam_applications_ip.FieldApplicationNumber).
//		Scan(ctx, &v)
func (eaiq *ExamApplicationsIPQuery) Select(fields ...string) *ExamApplicationsIPSelect {
	eaiq.ctx.Fields = append(eaiq.ctx.Fields, fields...)
	sbuild := &ExamApplicationsIPSelect{ExamApplicationsIPQuery: eaiq}
	sbuild.label = exam_applications_ip.Label
	sbuild.flds, sbuild.scan = &eaiq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a ExamApplicationsIPSelect configured with the given aggregations.
func (eaiq *ExamApplicationsIPQuery) Aggregate(fns ...AggregateFunc) *ExamApplicationsIPSelect {
	return eaiq.Select().Aggregate(fns...)
}

func (eaiq *ExamApplicationsIPQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range eaiq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, eaiq); err != nil {
				return err
			}
		}
	}
	for _, f := range eaiq.ctx.Fields {
		if !exam_applications_ip.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if eaiq.path != nil {
		prev, err := eaiq.path(ctx)
		if err != nil {
			return err
		}
		eaiq.sql = prev
	}
	return nil
}

func (eaiq *ExamApplicationsIPQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*Exam_Applications_IP, error) {
	var (
		nodes       = []*Exam_Applications_IP{}
		withFKs     = eaiq.withFKs
		_spec       = eaiq.querySpec()
		loadedTypes = [9]bool{
			eaiq.withUsersIPRef != nil,
			eaiq.withCadrePrefRef != nil,
			eaiq.withCirclePrefRef != nil,
			eaiq.withIPApplicationsRef != nil,
			eaiq.withLogData != nil,
			eaiq.withExamCentres != nil,
			eaiq.withExamcitycenter != nil,
			eaiq.withRoleusers != nil,
			eaiq.withCircleRefs != nil,
		}
	)
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, exam_applications_ip.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*Exam_Applications_IP).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &Exam_Applications_IP{config: eaiq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, eaiq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := eaiq.withUsersIPRef; query != nil {
		if err := eaiq.loadUsersIPRef(ctx, query, nodes,
			func(n *Exam_Applications_IP) { n.Edges.UsersIPRef = []*UserMaster{} },
			func(n *Exam_Applications_IP, e *UserMaster) { n.Edges.UsersIPRef = append(n.Edges.UsersIPRef, e) }); err != nil {
			return nil, err
		}
	}
	if query := eaiq.withCadrePrefRef; query != nil {
		if err := eaiq.loadCadrePrefRef(ctx, query, nodes,
			func(n *Exam_Applications_IP) { n.Edges.CadrePrefRef = []*Cadre_Choice_IP{} },
			func(n *Exam_Applications_IP, e *Cadre_Choice_IP) {
				n.Edges.CadrePrefRef = append(n.Edges.CadrePrefRef, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := eaiq.withCirclePrefRef; query != nil {
		if err := eaiq.loadCirclePrefRef(ctx, query, nodes,
			func(n *Exam_Applications_IP) { n.Edges.CirclePrefRef = []*PlaceOfPreferenceIP{} },
			func(n *Exam_Applications_IP, e *PlaceOfPreferenceIP) {
				n.Edges.CirclePrefRef = append(n.Edges.CirclePrefRef, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := eaiq.withIPApplicationsRef; query != nil {
		if err := eaiq.loadIPApplicationsRef(ctx, query, nodes,
			func(n *Exam_Applications_IP) { n.Edges.IPApplicationsRef = []*RecommendationsIPApplications{} },
			func(n *Exam_Applications_IP, e *RecommendationsIPApplications) {
				n.Edges.IPApplicationsRef = append(n.Edges.IPApplicationsRef, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := eaiq.withLogData; query != nil {
		if err := eaiq.loadLogData(ctx, query, nodes,
			func(n *Exam_Applications_IP) { n.Edges.LogData = []*Logs{} },
			func(n *Exam_Applications_IP, e *Logs) { n.Edges.LogData = append(n.Edges.LogData, e) }); err != nil {
			return nil, err
		}
	}
	if query := eaiq.withExamCentres; query != nil {
		if err := eaiq.loadExamCentres(ctx, query, nodes, nil,
			func(n *Exam_Applications_IP, e *Center) { n.Edges.ExamCentres = e }); err != nil {
			return nil, err
		}
	}
	if query := eaiq.withExamcitycenter; query != nil {
		if err := eaiq.loadExamcitycenter(ctx, query, nodes, nil,
			func(n *Exam_Applications_IP, e *ExamCityCenter) { n.Edges.Examcitycenter = e }); err != nil {
			return nil, err
		}
	}
	if query := eaiq.withRoleusers; query != nil {
		if err := eaiq.loadRoleusers(ctx, query, nodes, nil,
			func(n *Exam_Applications_IP, e *RoleMaster) { n.Edges.Roleusers = e }); err != nil {
			return nil, err
		}
	}
	if query := eaiq.withCircleRefs; query != nil {
		if err := eaiq.loadCircleRefs(ctx, query, nodes, nil,
			func(n *Exam_Applications_IP, e *CircleSummaryForNO) { n.Edges.CircleRefs = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (eaiq *ExamApplicationsIPQuery) loadUsersIPRef(ctx context.Context, query *UserMasterQuery, nodes []*Exam_Applications_IP, init func(*Exam_Applications_IP), assign func(*Exam_Applications_IP, *UserMaster)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int64]*Exam_Applications_IP)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.UserMaster(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(exam_applications_ip.UsersIPRefColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.exam_applications_ip_users_ip_ref
		if fk == nil {
			return fmt.Errorf(`foreign-key "exam_applications_ip_users_ip_ref" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "exam_applications_ip_users_ip_ref" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (eaiq *ExamApplicationsIPQuery) loadCadrePrefRef(ctx context.Context, query *CadreChoiceIPQuery, nodes []*Exam_Applications_IP, init func(*Exam_Applications_IP), assign func(*Exam_Applications_IP, *Cadre_Choice_IP)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int64]*Exam_Applications_IP)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(cadre_choice_ip.FieldApplicationID)
	}
	query.Where(predicate.Cadre_Choice_IP(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(exam_applications_ip.CadrePrefRefColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.ApplicationID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "ApplicationID" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (eaiq *ExamApplicationsIPQuery) loadCirclePrefRef(ctx context.Context, query *PlaceOfPreferenceIPQuery, nodes []*Exam_Applications_IP, init func(*Exam_Applications_IP), assign func(*Exam_Applications_IP, *PlaceOfPreferenceIP)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int64]*Exam_Applications_IP)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.PlaceOfPreferenceIP(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(exam_applications_ip.CirclePrefRefColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.exam_applications_ip_circle_pref_ref
		if fk == nil {
			return fmt.Errorf(`foreign-key "exam_applications_ip_circle_pref_ref" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "exam_applications_ip_circle_pref_ref" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (eaiq *ExamApplicationsIPQuery) loadIPApplicationsRef(ctx context.Context, query *RecommendationsIPApplicationsQuery, nodes []*Exam_Applications_IP, init func(*Exam_Applications_IP), assign func(*Exam_Applications_IP, *RecommendationsIPApplications)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int64]*Exam_Applications_IP)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.RecommendationsIPApplications(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(exam_applications_ip.IPApplicationsRefColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.exam_applications_ip_ip_applications_ref
		if fk == nil {
			return fmt.Errorf(`foreign-key "exam_applications_ip_ip_applications_ref" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "exam_applications_ip_ip_applications_ref" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (eaiq *ExamApplicationsIPQuery) loadLogData(ctx context.Context, query *LogsQuery, nodes []*Exam_Applications_IP, init func(*Exam_Applications_IP), assign func(*Exam_Applications_IP, *Logs)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int64]*Exam_Applications_IP)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Logs(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(exam_applications_ip.LogDataColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.exam_applications_ip_log_data
		if fk == nil {
			return fmt.Errorf(`foreign-key "exam_applications_ip_log_data" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "exam_applications_ip_log_data" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (eaiq *ExamApplicationsIPQuery) loadExamCentres(ctx context.Context, query *CenterQuery, nodes []*Exam_Applications_IP, init func(*Exam_Applications_IP), assign func(*Exam_Applications_IP, *Center)) error {
	ids := make([]int32, 0, len(nodes))
	nodeids := make(map[int32][]*Exam_Applications_IP)
	for i := range nodes {
		fk := nodes[i].CenterCode
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(center.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "CenterCode" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (eaiq *ExamApplicationsIPQuery) loadExamcitycenter(ctx context.Context, query *ExamCityCenterQuery, nodes []*Exam_Applications_IP, init func(*Exam_Applications_IP), assign func(*Exam_Applications_IP, *ExamCityCenter)) error {
	ids := make([]int32, 0, len(nodes))
	nodeids := make(map[int32][]*Exam_Applications_IP)
	for i := range nodes {
		fk := nodes[i].ExamCityCenterCode
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(examcitycenter.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "ExamCityCenterCode" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (eaiq *ExamApplicationsIPQuery) loadRoleusers(ctx context.Context, query *RoleMasterQuery, nodes []*Exam_Applications_IP, init func(*Exam_Applications_IP), assign func(*Exam_Applications_IP, *RoleMaster)) error {
	ids := make([]int32, 0, len(nodes))
	nodeids := make(map[int32][]*Exam_Applications_IP)
	for i := range nodes {
		fk := nodes[i].RoleUserCode
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(rolemaster.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "RoleUserCode" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (eaiq *ExamApplicationsIPQuery) loadCircleRefs(ctx context.Context, query *CircleSummaryForNOQuery, nodes []*Exam_Applications_IP, init func(*Exam_Applications_IP), assign func(*Exam_Applications_IP, *CircleSummaryForNO)) error {
	ids := make([]int32, 0, len(nodes))
	nodeids := make(map[int32][]*Exam_Applications_IP)
	for i := range nodes {
		if nodes[i].CircleSID == nil {
			continue
		}
		fk := *nodes[i].CircleSID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(circlesummaryforno.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "CircleSID" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (eaiq *ExamApplicationsIPQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := eaiq.querySpec()
	_spec.Node.Columns = eaiq.ctx.Fields
	if len(eaiq.ctx.Fields) > 0 {
		_spec.Unique = eaiq.ctx.Unique != nil && *eaiq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, eaiq.driver, _spec)
}

func (eaiq *ExamApplicationsIPQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(exam_applications_ip.Table, exam_applications_ip.Columns, sqlgraph.NewFieldSpec(exam_applications_ip.FieldID, field.TypeInt64))
	_spec.From = eaiq.sql
	if unique := eaiq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if eaiq.path != nil {
		_spec.Unique = true
	}
	if fields := eaiq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, exam_applications_ip.FieldID)
		for i := range fields {
			if fields[i] != exam_applications_ip.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if eaiq.withExamCentres != nil {
			_spec.Node.AddColumnOnce(exam_applications_ip.FieldCenterCode)
		}
		if eaiq.withExamcitycenter != nil {
			_spec.Node.AddColumnOnce(exam_applications_ip.FieldExamCityCenterCode)
		}
		if eaiq.withRoleusers != nil {
			_spec.Node.AddColumnOnce(exam_applications_ip.FieldRoleUserCode)
		}
		if eaiq.withCircleRefs != nil {
			_spec.Node.AddColumnOnce(exam_applications_ip.FieldCircleSID)
		}
	}
	if ps := eaiq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := eaiq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := eaiq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := eaiq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (eaiq *ExamApplicationsIPQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(eaiq.driver.Dialect())
	t1 := builder.Table(exam_applications_ip.Table)
	columns := eaiq.ctx.Fields
	if len(columns) == 0 {
		columns = exam_applications_ip.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if eaiq.sql != nil {
		selector = eaiq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if eaiq.ctx.Unique != nil && *eaiq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range eaiq.predicates {
		p(selector)
	}
	for _, p := range eaiq.order {
		p(selector)
	}
	if offset := eaiq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := eaiq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// ExamApplicationsIPGroupBy is the group-by builder for Exam_Applications_IP entities.
type ExamApplicationsIPGroupBy struct {
	selector
	build *ExamApplicationsIPQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (eaigb *ExamApplicationsIPGroupBy) Aggregate(fns ...AggregateFunc) *ExamApplicationsIPGroupBy {
	eaigb.fns = append(eaigb.fns, fns...)
	return eaigb
}

// Scan applies the selector query and scans the result into the given value.
func (eaigb *ExamApplicationsIPGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, eaigb.build.ctx, "GroupBy")
	if err := eaigb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ExamApplicationsIPQuery, *ExamApplicationsIPGroupBy](ctx, eaigb.build, eaigb, eaigb.build.inters, v)
}

func (eaigb *ExamApplicationsIPGroupBy) sqlScan(ctx context.Context, root *ExamApplicationsIPQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(eaigb.fns))
	for _, fn := range eaigb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*eaigb.flds)+len(eaigb.fns))
		for _, f := range *eaigb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*eaigb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := eaigb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// ExamApplicationsIPSelect is the builder for selecting fields of ExamApplicationsIP entities.
type ExamApplicationsIPSelect struct {
	*ExamApplicationsIPQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (eais *ExamApplicationsIPSelect) Aggregate(fns ...AggregateFunc) *ExamApplicationsIPSelect {
	eais.fns = append(eais.fns, fns...)
	return eais
}

// Scan applies the selector query and scans the result into the given value.
func (eais *ExamApplicationsIPSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, eais.ctx, "Select")
	if err := eais.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ExamApplicationsIPQuery, *ExamApplicationsIPSelect](ctx, eais.ExamApplicationsIPQuery, eais, eais.inters, v)
}

func (eais *ExamApplicationsIPSelect) sqlScan(ctx context.Context, root *ExamApplicationsIPQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(eais.fns))
	for _, fn := range eais.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*eais.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := eais.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
