// Code generated by ent, DO NOT EDIT.

package examnotifications

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the examnotifications type in the database.
	Label = "exam_notifications"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "NotificationCode"
	// FieldUserName holds the string denoting the username field in the database.
	FieldUserName = "user_name"
	// FieldExamYear holds the string denoting the examyear field in the database.
	FieldExamYear = "exam_year"
	// FieldEmployeeMasterRequestLastDate holds the string denoting the employeemasterrequestlastdate field in the database.
	FieldEmployeeMasterRequestLastDate = "employee_master_request_last_date"
	// FieldEmployeeMasterRequestApprovalLastDate holds the string denoting the employeemasterrequestapprovallastdate field in the database.
	FieldEmployeeMasterRequestApprovalLastDate = "employee_master_request_approval_last_date"
	// FieldExamRegisterLastDate holds the string denoting the examregisterlastdate field in the database.
	FieldExamRegisterLastDate = "exam_register_last_date"
	// FieldApplicationStartDate holds the string denoting the applicationstartdate field in the database.
	FieldApplicationStartDate = "application_start_date"
	// FieldApplicationEndDate holds the string denoting the applicationenddate field in the database.
	FieldApplicationEndDate = "application_end_date"
	// FieldApplicationCorrectionStartDate holds the string denoting the applicationcorrectionstartdate field in the database.
	FieldApplicationCorrectionStartDate = "application_correction_start_date"
	// FieldApplicationCorrectionLastDate holds the string denoting the applicationcorrectionlastdate field in the database.
	FieldApplicationCorrectionLastDate = "application_correction_last_date"
	// FieldApplicationVerificationLastDate holds the string denoting the applicationverificationlastdate field in the database.
	FieldApplicationVerificationLastDate = "application_verification_last_date"
	// FieldCenterAllotmentEndDate holds the string denoting the centerallotmentenddate field in the database.
	FieldCenterAllotmentEndDate = "center_allotment_end_date"
	// FieldNodalOfficerApprovalDate holds the string denoting the nodalofficerapprovaldate field in the database.
	FieldNodalOfficerApprovalDate = "nodal_officer_approval_date"
	// FieldAdmitCardDate holds the string denoting the admitcarddate field in the database.
	FieldAdmitCardDate = "admit_card_date"
	// FieldUpdatedAt holds the string denoting the updatedat field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldUpdatedBy holds the string denoting the updatedby field in the database.
	FieldUpdatedBy = "updated_by"
	// FieldCrucialDate holds the string denoting the crucialdate field in the database.
	FieldCrucialDate = "crucial_date"
	// FieldDesignation holds the string denoting the designation field in the database.
	FieldDesignation = "designation"
	// FieldOfficerName holds the string denoting the officername field in the database.
	FieldOfficerName = "officer_name"
	// FieldNotificationOrderNumber holds the string denoting the notificationordernumber field in the database.
	FieldNotificationOrderNumber = "notification_order_number"
	// FieldNotesheetScannedCopy holds the string denoting the notesheetscannedcopy field in the database.
	FieldNotesheetScannedCopy = "notesheet_scanned_copy"
	// FieldNotificationNumber holds the string denoting the notificationnumber field in the database.
	FieldNotificationNumber = "notification_number"
	// FieldFlag holds the string denoting the flag field in the database.
	FieldFlag = "flag"
	// FieldExamShortName holds the string denoting the examshortname field in the database.
	FieldExamShortName = "exam_short_name"
	// FieldCircleOfficeFacilityId holds the string denoting the circleofficefacilityid field in the database.
	FieldCircleOfficeFacilityId = "circle_office_facility_id"
	// FieldCircleOfficeName holds the string denoting the circleofficename field in the database.
	FieldCircleOfficeName = "circle_office_name"
	// FieldIssuedBy holds the string denoting the issuedby field in the database.
	FieldIssuedBy = "issued_by"
	// FieldOrderDate holds the string denoting the orderdate field in the database.
	FieldOrderDate = "order_date"
	// FieldCreatedBy holds the string denoting the createdby field in the database.
	FieldCreatedBy = "created_by"
	// FieldCreatedById holds the string denoting the createdbyid field in the database.
	FieldCreatedById = "created_by_id"
	// FieldCreatedByName holds the string denoting the createdbyname field in the database.
	FieldCreatedByName = "created_by_name"
	// FieldCreatedByDesignation holds the string denoting the createdbydesignation field in the database.
	FieldCreatedByDesignation = "created_by_designation"
	// FieldApprovedBy holds the string denoting the approvedby field in the database.
	FieldApprovedBy = "approved_by"
	// FieldApprovedById holds the string denoting the approvedbyid field in the database.
	FieldApprovedById = "approved_by_id"
	// FieldApprovedByName holds the string denoting the approvedbyname field in the database.
	FieldApprovedByName = "approved_by_name"
	// FieldApprovedByDesignation holds the string denoting the approvedbydesignation field in the database.
	FieldApprovedByDesignation = "approved_by_designation"
	// FieldResubmittedApplicationVerificationDate holds the string denoting the resubmittedapplicationverificationdate field in the database.
	FieldResubmittedApplicationVerificationDate = "resubmitted_application_verification_date"
	// FieldPapers holds the string denoting the papers field in the database.
	FieldPapers = "papers"
	// FieldNotificationStatus holds the string denoting the notificationstatus field in the database.
	FieldNotificationStatus = "notification_status"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldNotificationReIssueStatus holds the string denoting the notificationreissuestatus field in the database.
	FieldNotificationReIssueStatus = "notification_re_issue_status"
	// FieldEditFlagStatus holds the string denoting the editflagstatus field in the database.
	FieldEditFlagStatus = "edit_flag_status"
	// FieldExamCode holds the string denoting the examcode field in the database.
	FieldExamCode = "exam_code"
	// FieldExamName holds the string denoting the examname field in the database.
	FieldExamName = "exam_name"
	// FieldUserID holds the string denoting the userid field in the database.
	FieldUserID = "user_id"
	// FieldNotificationRemarks holds the string denoting the notificationremarks field in the database.
	FieldNotificationRemarks = "notification_remarks"
	// FieldSmsExamShortName holds the string denoting the smsexamshortname field in the database.
	FieldSmsExamShortName = "sms_exam_short_name"
	// EdgeUserIDref holds the string denoting the useridref edge name in mutations.
	EdgeUserIDref = "UserIDref"
	// EdgeLogData holds the string denoting the logdata edge name in mutations.
	EdgeLogData = "LogData"
	// UserMasterFieldID holds the string denoting the ID field of the UserMaster.
	UserMasterFieldID = "UserID"
	// LogsFieldID holds the string denoting the ID field of the Logs.
	LogsFieldID = "ID"
	// Table holds the table name of the examnotifications in the database.
	Table = "ExamNotifications"
	// UserIDrefTable is the table that holds the UserIDref relation/edge.
	UserIDrefTable = "ExamNotifications"
	// UserIDrefInverseTable is the table name for the UserMaster entity.
	// It exists in this package in order to avoid circular dependency with the "usermaster" package.
	UserIDrefInverseTable = "UserMaster"
	// UserIDrefColumn is the table column denoting the UserIDref relation/edge.
	UserIDrefColumn = "user_id"
	// LogDataTable is the table that holds the LogData relation/edge.
	LogDataTable = "LogsTable"
	// LogDataInverseTable is the table name for the Logs entity.
	// It exists in this package in order to avoid circular dependency with the "logs" package.
	LogDataInverseTable = "LogsTable"
	// LogDataColumn is the table column denoting the LogData relation/edge.
	LogDataColumn = "exam_notifications_log_data"
)

// Columns holds all SQL columns for examnotifications fields.
var Columns = []string{
	FieldID,
	FieldUserName,
	FieldExamYear,
	FieldEmployeeMasterRequestLastDate,
	FieldEmployeeMasterRequestApprovalLastDate,
	FieldExamRegisterLastDate,
	FieldApplicationStartDate,
	FieldApplicationEndDate,
	FieldApplicationCorrectionStartDate,
	FieldApplicationCorrectionLastDate,
	FieldApplicationVerificationLastDate,
	FieldCenterAllotmentEndDate,
	FieldNodalOfficerApprovalDate,
	FieldAdmitCardDate,
	FieldUpdatedAt,
	FieldUpdatedBy,
	FieldCrucialDate,
	FieldDesignation,
	FieldOfficerName,
	FieldNotificationOrderNumber,
	FieldNotesheetScannedCopy,
	FieldNotificationNumber,
	FieldFlag,
	FieldExamShortName,
	FieldCircleOfficeFacilityId,
	FieldCircleOfficeName,
	FieldIssuedBy,
	FieldOrderDate,
	FieldCreatedBy,
	FieldCreatedById,
	FieldCreatedByName,
	FieldCreatedByDesignation,
	FieldApprovedBy,
	FieldApprovedById,
	FieldApprovedByName,
	FieldApprovedByDesignation,
	FieldResubmittedApplicationVerificationDate,
	FieldPapers,
	FieldNotificationStatus,
	FieldStatus,
	FieldNotificationReIssueStatus,
	FieldEditFlagStatus,
	FieldExamCode,
	FieldExamName,
	FieldUserID,
	FieldNotificationRemarks,
	FieldSmsExamShortName,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "ExamNotifications"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"exam_exam_notifications_ref",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultFlag holds the default value on creation for the "Flag" field.
	DefaultFlag bool
	// DefaultNotificationReIssueStatus holds the default value on creation for the "NotificationReIssueStatus" field.
	DefaultNotificationReIssueStatus bool
	// DefaultEditFlagStatus holds the default value on creation for the "EditFlagStatus" field.
	DefaultEditFlagStatus bool
)

// OrderOption defines the ordering options for the ExamNotifications queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByUserName orders the results by the UserName field.
func ByUserName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserName, opts...).ToFunc()
}

// ByExamYear orders the results by the ExamYear field.
func ByExamYear(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExamYear, opts...).ToFunc()
}

// ByEmployeeMasterRequestLastDate orders the results by the EmployeeMasterRequestLastDate field.
func ByEmployeeMasterRequestLastDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmployeeMasterRequestLastDate, opts...).ToFunc()
}

// ByEmployeeMasterRequestApprovalLastDate orders the results by the EmployeeMasterRequestApprovalLastDate field.
func ByEmployeeMasterRequestApprovalLastDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmployeeMasterRequestApprovalLastDate, opts...).ToFunc()
}

// ByExamRegisterLastDate orders the results by the ExamRegisterLastDate field.
func ByExamRegisterLastDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExamRegisterLastDate, opts...).ToFunc()
}

// ByApplicationStartDate orders the results by the ApplicationStartDate field.
func ByApplicationStartDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldApplicationStartDate, opts...).ToFunc()
}

// ByApplicationEndDate orders the results by the ApplicationEndDate field.
func ByApplicationEndDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldApplicationEndDate, opts...).ToFunc()
}

// ByApplicationCorrectionStartDate orders the results by the ApplicationCorrectionStartDate field.
func ByApplicationCorrectionStartDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldApplicationCorrectionStartDate, opts...).ToFunc()
}

// ByApplicationCorrectionLastDate orders the results by the ApplicationCorrectionLastDate field.
func ByApplicationCorrectionLastDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldApplicationCorrectionLastDate, opts...).ToFunc()
}

// ByApplicationVerificationLastDate orders the results by the ApplicationVerificationLastDate field.
func ByApplicationVerificationLastDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldApplicationVerificationLastDate, opts...).ToFunc()
}

// ByCenterAllotmentEndDate orders the results by the CenterAllotmentEndDate field.
func ByCenterAllotmentEndDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCenterAllotmentEndDate, opts...).ToFunc()
}

// ByNodalOfficerApprovalDate orders the results by the NodalOfficerApprovalDate field.
func ByNodalOfficerApprovalDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNodalOfficerApprovalDate, opts...).ToFunc()
}

// ByAdmitCardDate orders the results by the AdmitCardDate field.
func ByAdmitCardDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAdmitCardDate, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the UpdatedAt field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByUpdatedBy orders the results by the UpdatedBy field.
func ByUpdatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedBy, opts...).ToFunc()
}

// ByDesignation orders the results by the Designation field.
func ByDesignation(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDesignation, opts...).ToFunc()
}

// ByOfficerName orders the results by the OfficerName field.
func ByOfficerName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOfficerName, opts...).ToFunc()
}

// ByNotificationOrderNumber orders the results by the NotificationOrderNumber field.
func ByNotificationOrderNumber(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNotificationOrderNumber, opts...).ToFunc()
}

// ByNotesheetScannedCopy orders the results by the NotesheetScannedCopy field.
func ByNotesheetScannedCopy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNotesheetScannedCopy, opts...).ToFunc()
}

// ByNotificationNumber orders the results by the NotificationNumber field.
func ByNotificationNumber(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNotificationNumber, opts...).ToFunc()
}

// ByFlag orders the results by the Flag field.
func ByFlag(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFlag, opts...).ToFunc()
}

// ByExamShortName orders the results by the ExamShortName field.
func ByExamShortName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExamShortName, opts...).ToFunc()
}

// ByCircleOfficeFacilityId orders the results by the CircleOfficeFacilityId field.
func ByCircleOfficeFacilityId(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCircleOfficeFacilityId, opts...).ToFunc()
}

// ByCircleOfficeName orders the results by the CircleOfficeName field.
func ByCircleOfficeName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCircleOfficeName, opts...).ToFunc()
}

// ByIssuedBy orders the results by the IssuedBy field.
func ByIssuedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIssuedBy, opts...).ToFunc()
}

// ByOrderDate orders the results by the OrderDate field.
func ByOrderDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOrderDate, opts...).ToFunc()
}

// ByCreatedBy orders the results by the CreatedBy field.
func ByCreatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedBy, opts...).ToFunc()
}

// ByCreatedById orders the results by the CreatedById field.
func ByCreatedById(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedById, opts...).ToFunc()
}

// ByCreatedByName orders the results by the CreatedByName field.
func ByCreatedByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedByName, opts...).ToFunc()
}

// ByCreatedByDesignation orders the results by the CreatedByDesignation field.
func ByCreatedByDesignation(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedByDesignation, opts...).ToFunc()
}

// ByApprovedBy orders the results by the ApprovedBy field.
func ByApprovedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldApprovedBy, opts...).ToFunc()
}

// ByApprovedById orders the results by the ApprovedById field.
func ByApprovedById(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldApprovedById, opts...).ToFunc()
}

// ByApprovedByName orders the results by the ApprovedByName field.
func ByApprovedByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldApprovedByName, opts...).ToFunc()
}

// ByApprovedByDesignation orders the results by the ApprovedByDesignation field.
func ByApprovedByDesignation(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldApprovedByDesignation, opts...).ToFunc()
}

// ByResubmittedApplicationVerificationDate orders the results by the ResubmittedApplicationVerificationDate field.
func ByResubmittedApplicationVerificationDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldResubmittedApplicationVerificationDate, opts...).ToFunc()
}

// ByNotificationStatus orders the results by the NotificationStatus field.
func ByNotificationStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNotificationStatus, opts...).ToFunc()
}

// ByStatus orders the results by the Status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByNotificationReIssueStatus orders the results by the NotificationReIssueStatus field.
func ByNotificationReIssueStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNotificationReIssueStatus, opts...).ToFunc()
}

// ByEditFlagStatus orders the results by the EditFlagStatus field.
func ByEditFlagStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEditFlagStatus, opts...).ToFunc()
}

// ByExamCode orders the results by the ExamCode field.
func ByExamCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExamCode, opts...).ToFunc()
}

// ByExamName orders the results by the ExamName field.
func ByExamName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExamName, opts...).ToFunc()
}

// ByUserID orders the results by the UserID field.
func ByUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserID, opts...).ToFunc()
}

// ByNotificationRemarks orders the results by the NotificationRemarks field.
func ByNotificationRemarks(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNotificationRemarks, opts...).ToFunc()
}

// BySmsExamShortName orders the results by the SmsExamShortName field.
func BySmsExamShortName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSmsExamShortName, opts...).ToFunc()
}

// ByUserIDrefField orders the results by UserIDref field.
func ByUserIDrefField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserIDrefStep(), sql.OrderByField(field, opts...))
	}
}

// ByLogDataCount orders the results by LogData count.
func ByLogDataCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newLogDataStep(), opts...)
	}
}

// ByLogData orders the results by LogData terms.
func ByLogData(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newLogDataStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newUserIDrefStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserIDrefInverseTable, UserMasterFieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, UserIDrefTable, UserIDrefColumn),
	)
}
func newLogDataStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(LogDataInverseTable, LogsFieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, LogDataTable, LogDataColumn),
	)
}
