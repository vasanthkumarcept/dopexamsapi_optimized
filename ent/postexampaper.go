// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"recruit/ent/postexampaper"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// PostExamPaper is the model entity for the PostExamPaper schema.
type PostExamPaper struct {
	config `json:"-"`
	// ID of the ent.
	ID int32 `json:"id,omitempty"`
	// ExamConfigurationExamCode holds the value of the "ExamConfigurationExamCode" field.
	ExamConfigurationExamCode int32 `json:"ExamConfigurationExamCode,omitempty"`
	// ExamShortDescription holds the value of the "ExamShortDescription" field.
	ExamShortDescription string `json:"ExamShortDescription,omitempty"`
	// ExamLongDescription holds the value of the "ExamLongDescription" field.
	ExamLongDescription string `json:"ExamLongDescription,omitempty"`
	// ExamPaperCode holds the value of the "ExamPaperCode" field.
	ExamPaperCode string `json:"ExamPaperCode,omitempty"`
	// PaperDescription holds the value of the "PaperDescription" field.
	PaperDescription string `json:"PaperDescription,omitempty"`
	// EmployeePostPostId holds the value of the "EmployeePost_postId" field.
	EmployeePostPostId string `json:"EmployeePost_postId,omitempty"`
	// EmployeeGroupGroupId holds the value of the "EmployeeGroup_GroupId" field.
	EmployeeGroupGroupId string `json:"EmployeeGroup_GroupId,omitempty"`
	// GroupDescription holds the value of the "GroupDescription" field.
	GroupDescription string `json:"GroupDescription,omitempty"`
	// PostCode holds the value of the "PostCode" field.
	PostCode string `json:"PostCode,omitempty"`
	// PostDescription holds the value of the "PostDescription" field.
	PostDescription string `json:"PostDescription,omitempty"`
	// BaseCadre holds the value of the "BaseCadre" field.
	BaseCadre int `json:"BaseCadre,omitempty"`
	// PayLevel holds the value of the "PayLevel" field.
	PayLevel string `json:"PayLevel,omitempty"`
	// Scale holds the value of the "Scale" field.
	Scale string `json:"Scale,omitempty"`
	// OrderNumber holds the value of the "OrderNumber" field.
	OrderNumber string `json:"OrderNumber,omitempty"`
	// Status holds the value of the "Status" field.
	Status string `json:"Status,omitempty"`
	// CreatedById holds the value of the "CreatedById" field.
	CreatedById int64 `json:"CreatedById,omitempty"`
	// CreatedByUserName holds the value of the "CreatedByUserName" field.
	CreatedByUserName string `json:"CreatedByUserName,omitempty"`
	// CreatedByEmployeeId holds the value of the "CreatedByEmployeeId" field.
	CreatedByEmployeeId string `json:"CreatedByEmployeeId,omitempty"`
	// CreatedByDesignation holds the value of the "CreatedByDesignation" field.
	CreatedByDesignation string `json:"CreatedByDesignation,omitempty"`
	// CreatedDate holds the value of the "CreatedDate" field.
	CreatedDate time.Time `json:"CreatedDate,omitempty"`
	// VerifiedById holds the value of the "VerifiedById" field.
	VerifiedById int64 `json:"VerifiedById,omitempty"`
	// VerifiedByUserName holds the value of the "VerifiedByUserName" field.
	VerifiedByUserName string `json:"VerifiedByUserName,omitempty"`
	// VerifiedByEmployeeId holds the value of the "VerifiedByEmployeeId" field.
	VerifiedByEmployeeId string `json:"VerifiedByEmployeeId,omitempty"`
	// VerifiedByDesignation holds the value of the "VerifiedByDesignation" field.
	VerifiedByDesignation string `json:"VerifiedByDesignation,omitempty"`
	// VerifiedDate holds the value of the "VerifiedDate" field.
	VerifiedDate time.Time `json:"VerifiedDate,omitempty"`
	// DeletedById holds the value of the "DeletedById" field.
	DeletedById int64 `json:"DeletedById,omitempty"`
	// DeletedByUserName holds the value of the "DeletedByUserName" field.
	DeletedByUserName string `json:"DeletedByUserName,omitempty"`
	// DeletedByEmployeeId holds the value of the "DeletedByEmployeeId" field.
	DeletedByEmployeeId string `json:"DeletedByEmployeeId,omitempty"`
	// DeletedByDesignation holds the value of the "DeletedByDesignation" field.
	DeletedByDesignation string `json:"DeletedByDesignation,omitempty"`
	// DeletedDate holds the value of the "DeletedDate" field.
	DeletedDate  time.Time `json:"DeletedDate,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*PostExamPaper) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case postexampaper.FieldID, postexampaper.FieldExamConfigurationExamCode, postexampaper.FieldBaseCadre, postexampaper.FieldCreatedById, postexampaper.FieldVerifiedById, postexampaper.FieldDeletedById:
			values[i] = new(sql.NullInt64)
		case postexampaper.FieldExamShortDescription, postexampaper.FieldExamLongDescription, postexampaper.FieldExamPaperCode, postexampaper.FieldPaperDescription, postexampaper.FieldEmployeePostPostId, postexampaper.FieldEmployeeGroupGroupId, postexampaper.FieldGroupDescription, postexampaper.FieldPostCode, postexampaper.FieldPostDescription, postexampaper.FieldPayLevel, postexampaper.FieldScale, postexampaper.FieldOrderNumber, postexampaper.FieldStatus, postexampaper.FieldCreatedByUserName, postexampaper.FieldCreatedByEmployeeId, postexampaper.FieldCreatedByDesignation, postexampaper.FieldVerifiedByUserName, postexampaper.FieldVerifiedByEmployeeId, postexampaper.FieldVerifiedByDesignation, postexampaper.FieldDeletedByUserName, postexampaper.FieldDeletedByEmployeeId, postexampaper.FieldDeletedByDesignation:
			values[i] = new(sql.NullString)
		case postexampaper.FieldCreatedDate, postexampaper.FieldVerifiedDate, postexampaper.FieldDeletedDate:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the PostExamPaper fields.
func (pep *PostExamPaper) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case postexampaper.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pep.ID = int32(value.Int64)
		case postexampaper.FieldExamConfigurationExamCode:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field ExamConfigurationExamCode", values[i])
			} else if value.Valid {
				pep.ExamConfigurationExamCode = int32(value.Int64)
			}
		case postexampaper.FieldExamShortDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ExamShortDescription", values[i])
			} else if value.Valid {
				pep.ExamShortDescription = value.String
			}
		case postexampaper.FieldExamLongDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ExamLongDescription", values[i])
			} else if value.Valid {
				pep.ExamLongDescription = value.String
			}
		case postexampaper.FieldExamPaperCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ExamPaperCode", values[i])
			} else if value.Valid {
				pep.ExamPaperCode = value.String
			}
		case postexampaper.FieldPaperDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field PaperDescription", values[i])
			} else if value.Valid {
				pep.PaperDescription = value.String
			}
		case postexampaper.FieldEmployeePostPostId:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field EmployeePost_postId", values[i])
			} else if value.Valid {
				pep.EmployeePostPostId = value.String
			}
		case postexampaper.FieldEmployeeGroupGroupId:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field EmployeeGroup_GroupId", values[i])
			} else if value.Valid {
				pep.EmployeeGroupGroupId = value.String
			}
		case postexampaper.FieldGroupDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field GroupDescription", values[i])
			} else if value.Valid {
				pep.GroupDescription = value.String
			}
		case postexampaper.FieldPostCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field PostCode", values[i])
			} else if value.Valid {
				pep.PostCode = value.String
			}
		case postexampaper.FieldPostDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field PostDescription", values[i])
			} else if value.Valid {
				pep.PostDescription = value.String
			}
		case postexampaper.FieldBaseCadre:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field BaseCadre", values[i])
			} else if value.Valid {
				pep.BaseCadre = int(value.Int64)
			}
		case postexampaper.FieldPayLevel:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field PayLevel", values[i])
			} else if value.Valid {
				pep.PayLevel = value.String
			}
		case postexampaper.FieldScale:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Scale", values[i])
			} else if value.Valid {
				pep.Scale = value.String
			}
		case postexampaper.FieldOrderNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field OrderNumber", values[i])
			} else if value.Valid {
				pep.OrderNumber = value.String
			}
		case postexampaper.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Status", values[i])
			} else if value.Valid {
				pep.Status = value.String
			}
		case postexampaper.FieldCreatedById:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field CreatedById", values[i])
			} else if value.Valid {
				pep.CreatedById = value.Int64
			}
		case postexampaper.FieldCreatedByUserName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field CreatedByUserName", values[i])
			} else if value.Valid {
				pep.CreatedByUserName = value.String
			}
		case postexampaper.FieldCreatedByEmployeeId:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field CreatedByEmployeeId", values[i])
			} else if value.Valid {
				pep.CreatedByEmployeeId = value.String
			}
		case postexampaper.FieldCreatedByDesignation:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field CreatedByDesignation", values[i])
			} else if value.Valid {
				pep.CreatedByDesignation = value.String
			}
		case postexampaper.FieldCreatedDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field CreatedDate", values[i])
			} else if value.Valid {
				pep.CreatedDate = value.Time
			}
		case postexampaper.FieldVerifiedById:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field VerifiedById", values[i])
			} else if value.Valid {
				pep.VerifiedById = value.Int64
			}
		case postexampaper.FieldVerifiedByUserName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field VerifiedByUserName", values[i])
			} else if value.Valid {
				pep.VerifiedByUserName = value.String
			}
		case postexampaper.FieldVerifiedByEmployeeId:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field VerifiedByEmployeeId", values[i])
			} else if value.Valid {
				pep.VerifiedByEmployeeId = value.String
			}
		case postexampaper.FieldVerifiedByDesignation:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field VerifiedByDesignation", values[i])
			} else if value.Valid {
				pep.VerifiedByDesignation = value.String
			}
		case postexampaper.FieldVerifiedDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field VerifiedDate", values[i])
			} else if value.Valid {
				pep.VerifiedDate = value.Time
			}
		case postexampaper.FieldDeletedById:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field DeletedById", values[i])
			} else if value.Valid {
				pep.DeletedById = value.Int64
			}
		case postexampaper.FieldDeletedByUserName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field DeletedByUserName", values[i])
			} else if value.Valid {
				pep.DeletedByUserName = value.String
			}
		case postexampaper.FieldDeletedByEmployeeId:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field DeletedByEmployeeId", values[i])
			} else if value.Valid {
				pep.DeletedByEmployeeId = value.String
			}
		case postexampaper.FieldDeletedByDesignation:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field DeletedByDesignation", values[i])
			} else if value.Valid {
				pep.DeletedByDesignation = value.String
			}
		case postexampaper.FieldDeletedDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field DeletedDate", values[i])
			} else if value.Valid {
				pep.DeletedDate = value.Time
			}
		default:
			pep.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the PostExamPaper.
// This includes values selected through modifiers, order, etc.
func (pep *PostExamPaper) Value(name string) (ent.Value, error) {
	return pep.selectValues.Get(name)
}

// Update returns a builder for updating this PostExamPaper.
// Note that you need to call PostExamPaper.Unwrap() before calling this method if this PostExamPaper
// was returned from a transaction, and the transaction was committed or rolled back.
func (pep *PostExamPaper) Update() *PostExamPaperUpdateOne {
	return NewPostExamPaperClient(pep.config).UpdateOne(pep)
}

// Unwrap unwraps the PostExamPaper entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pep *PostExamPaper) Unwrap() *PostExamPaper {
	_tx, ok := pep.config.driver.(*txDriver)
	if !ok {
		panic("ent: PostExamPaper is not a transactional entity")
	}
	pep.config.driver = _tx.drv
	return pep
}

// String implements the fmt.Stringer.
func (pep *PostExamPaper) String() string {
	var builder strings.Builder
	builder.WriteString("PostExamPaper(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pep.ID))
	builder.WriteString("ExamConfigurationExamCode=")
	builder.WriteString(fmt.Sprintf("%v", pep.ExamConfigurationExamCode))
	builder.WriteString(", ")
	builder.WriteString("ExamShortDescription=")
	builder.WriteString(pep.ExamShortDescription)
	builder.WriteString(", ")
	builder.WriteString("ExamLongDescription=")
	builder.WriteString(pep.ExamLongDescription)
	builder.WriteString(", ")
	builder.WriteString("ExamPaperCode=")
	builder.WriteString(pep.ExamPaperCode)
	builder.WriteString(", ")
	builder.WriteString("PaperDescription=")
	builder.WriteString(pep.PaperDescription)
	builder.WriteString(", ")
	builder.WriteString("EmployeePost_postId=")
	builder.WriteString(pep.EmployeePostPostId)
	builder.WriteString(", ")
	builder.WriteString("EmployeeGroup_GroupId=")
	builder.WriteString(pep.EmployeeGroupGroupId)
	builder.WriteString(", ")
	builder.WriteString("GroupDescription=")
	builder.WriteString(pep.GroupDescription)
	builder.WriteString(", ")
	builder.WriteString("PostCode=")
	builder.WriteString(pep.PostCode)
	builder.WriteString(", ")
	builder.WriteString("PostDescription=")
	builder.WriteString(pep.PostDescription)
	builder.WriteString(", ")
	builder.WriteString("BaseCadre=")
	builder.WriteString(fmt.Sprintf("%v", pep.BaseCadre))
	builder.WriteString(", ")
	builder.WriteString("PayLevel=")
	builder.WriteString(pep.PayLevel)
	builder.WriteString(", ")
	builder.WriteString("Scale=")
	builder.WriteString(pep.Scale)
	builder.WriteString(", ")
	builder.WriteString("OrderNumber=")
	builder.WriteString(pep.OrderNumber)
	builder.WriteString(", ")
	builder.WriteString("Status=")
	builder.WriteString(pep.Status)
	builder.WriteString(", ")
	builder.WriteString("CreatedById=")
	builder.WriteString(fmt.Sprintf("%v", pep.CreatedById))
	builder.WriteString(", ")
	builder.WriteString("CreatedByUserName=")
	builder.WriteString(pep.CreatedByUserName)
	builder.WriteString(", ")
	builder.WriteString("CreatedByEmployeeId=")
	builder.WriteString(pep.CreatedByEmployeeId)
	builder.WriteString(", ")
	builder.WriteString("CreatedByDesignation=")
	builder.WriteString(pep.CreatedByDesignation)
	builder.WriteString(", ")
	builder.WriteString("CreatedDate=")
	builder.WriteString(pep.CreatedDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("VerifiedById=")
	builder.WriteString(fmt.Sprintf("%v", pep.VerifiedById))
	builder.WriteString(", ")
	builder.WriteString("VerifiedByUserName=")
	builder.WriteString(pep.VerifiedByUserName)
	builder.WriteString(", ")
	builder.WriteString("VerifiedByEmployeeId=")
	builder.WriteString(pep.VerifiedByEmployeeId)
	builder.WriteString(", ")
	builder.WriteString("VerifiedByDesignation=")
	builder.WriteString(pep.VerifiedByDesignation)
	builder.WriteString(", ")
	builder.WriteString("VerifiedDate=")
	builder.WriteString(pep.VerifiedDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("DeletedById=")
	builder.WriteString(fmt.Sprintf("%v", pep.DeletedById))
	builder.WriteString(", ")
	builder.WriteString("DeletedByUserName=")
	builder.WriteString(pep.DeletedByUserName)
	builder.WriteString(", ")
	builder.WriteString("DeletedByEmployeeId=")
	builder.WriteString(pep.DeletedByEmployeeId)
	builder.WriteString(", ")
	builder.WriteString("DeletedByDesignation=")
	builder.WriteString(pep.DeletedByDesignation)
	builder.WriteString(", ")
	builder.WriteString("DeletedDate=")
	builder.WriteString(pep.DeletedDate.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// PostExamPapers is a parsable slice of PostExamPaper.
type PostExamPapers []*PostExamPaper
