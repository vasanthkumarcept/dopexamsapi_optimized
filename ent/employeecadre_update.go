// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"recruit/ent/employeecadre"
	"recruit/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// EmployeeCadreUpdate is the builder for updating EmployeeCadre entities.
type EmployeeCadreUpdate struct {
	config
	hooks    []Hook
	mutation *EmployeeCadreMutation
}

// Where appends a list predicates to the EmployeeCadreUpdate builder.
func (ecu *EmployeeCadreUpdate) Where(ps ...predicate.EmployeeCadre) *EmployeeCadreUpdate {
	ecu.mutation.Where(ps...)
	return ecu
}

// SetCadrecode sets the "cadrecode" field.
func (ecu *EmployeeCadreUpdate) SetCadrecode(s string) *EmployeeCadreUpdate {
	ecu.mutation.SetCadrecode(s)
	return ecu
}

// SetCadredescription sets the "cadredescription" field.
func (ecu *EmployeeCadreUpdate) SetCadredescription(s string) *EmployeeCadreUpdate {
	ecu.mutation.SetCadredescription(s)
	return ecu
}

// SetPayLevel sets the "PayLevel" field.
func (ecu *EmployeeCadreUpdate) SetPayLevel(s string) *EmployeeCadreUpdate {
	ecu.mutation.SetPayLevel(s)
	return ecu
}

// SetScale sets the "Scale" field.
func (ecu *EmployeeCadreUpdate) SetScale(s string) *EmployeeCadreUpdate {
	ecu.mutation.SetScale(s)
	return ecu
}

// SetExamconfigurationExamcode sets the "ExamconfigurationExamcode" field.
func (ecu *EmployeeCadreUpdate) SetExamconfigurationExamcode(i int32) *EmployeeCadreUpdate {
	ecu.mutation.ResetExamconfigurationExamcode()
	ecu.mutation.SetExamconfigurationExamcode(i)
	return ecu
}

// SetNillableExamconfigurationExamcode sets the "ExamconfigurationExamcode" field if the given value is not nil.
func (ecu *EmployeeCadreUpdate) SetNillableExamconfigurationExamcode(i *int32) *EmployeeCadreUpdate {
	if i != nil {
		ecu.SetExamconfigurationExamcode(*i)
	}
	return ecu
}

// AddExamconfigurationExamcode adds i to the "ExamconfigurationExamcode" field.
func (ecu *EmployeeCadreUpdate) AddExamconfigurationExamcode(i int32) *EmployeeCadreUpdate {
	ecu.mutation.AddExamconfigurationExamcode(i)
	return ecu
}

// ClearExamconfigurationExamcode clears the value of the "ExamconfigurationExamcode" field.
func (ecu *EmployeeCadreUpdate) ClearExamconfigurationExamcode() *EmployeeCadreUpdate {
	ecu.mutation.ClearExamconfigurationExamcode()
	return ecu
}

// SetExamShortDescription sets the "ExamShortDescription" field.
func (ecu *EmployeeCadreUpdate) SetExamShortDescription(s string) *EmployeeCadreUpdate {
	ecu.mutation.SetExamShortDescription(s)
	return ecu
}

// SetNillableExamShortDescription sets the "ExamShortDescription" field if the given value is not nil.
func (ecu *EmployeeCadreUpdate) SetNillableExamShortDescription(s *string) *EmployeeCadreUpdate {
	if s != nil {
		ecu.SetExamShortDescription(*s)
	}
	return ecu
}

// ClearExamShortDescription clears the value of the "ExamShortDescription" field.
func (ecu *EmployeeCadreUpdate) ClearExamShortDescription() *EmployeeCadreUpdate {
	ecu.mutation.ClearExamShortDescription()
	return ecu
}

// SetExamLongDescription sets the "ExamLongDescription" field.
func (ecu *EmployeeCadreUpdate) SetExamLongDescription(s string) *EmployeeCadreUpdate {
	ecu.mutation.SetExamLongDescription(s)
	return ecu
}

// SetNillableExamLongDescription sets the "ExamLongDescription" field if the given value is not nil.
func (ecu *EmployeeCadreUpdate) SetNillableExamLongDescription(s *string) *EmployeeCadreUpdate {
	if s != nil {
		ecu.SetExamLongDescription(*s)
	}
	return ecu
}

// ClearExamLongDescription clears the value of the "ExamLongDescription" field.
func (ecu *EmployeeCadreUpdate) ClearExamLongDescription() *EmployeeCadreUpdate {
	ecu.mutation.ClearExamLongDescription()
	return ecu
}

// SetEmployeePostPostId sets the "EmployeePost_postId" field.
func (ecu *EmployeeCadreUpdate) SetEmployeePostPostId(i int32) *EmployeeCadreUpdate {
	ecu.mutation.ResetEmployeePostPostId()
	ecu.mutation.SetEmployeePostPostId(i)
	return ecu
}

// SetNillableEmployeePostPostId sets the "EmployeePost_postId" field if the given value is not nil.
func (ecu *EmployeeCadreUpdate) SetNillableEmployeePostPostId(i *int32) *EmployeeCadreUpdate {
	if i != nil {
		ecu.SetEmployeePostPostId(*i)
	}
	return ecu
}

// AddEmployeePostPostId adds i to the "EmployeePost_postId" field.
func (ecu *EmployeeCadreUpdate) AddEmployeePostPostId(i int32) *EmployeeCadreUpdate {
	ecu.mutation.AddEmployeePostPostId(i)
	return ecu
}

// ClearEmployeePostPostId clears the value of the "EmployeePost_postId" field.
func (ecu *EmployeeCadreUpdate) ClearEmployeePostPostId() *EmployeeCadreUpdate {
	ecu.mutation.ClearEmployeePostPostId()
	return ecu
}

// SetEmployeeGroupGroupId sets the "EmployeeGroup_groupId" field.
func (ecu *EmployeeCadreUpdate) SetEmployeeGroupGroupId(i int32) *EmployeeCadreUpdate {
	ecu.mutation.ResetEmployeeGroupGroupId()
	ecu.mutation.SetEmployeeGroupGroupId(i)
	return ecu
}

// SetNillableEmployeeGroupGroupId sets the "EmployeeGroup_groupId" field if the given value is not nil.
func (ecu *EmployeeCadreUpdate) SetNillableEmployeeGroupGroupId(i *int32) *EmployeeCadreUpdate {
	if i != nil {
		ecu.SetEmployeeGroupGroupId(*i)
	}
	return ecu
}

// AddEmployeeGroupGroupId adds i to the "EmployeeGroup_groupId" field.
func (ecu *EmployeeCadreUpdate) AddEmployeeGroupGroupId(i int32) *EmployeeCadreUpdate {
	ecu.mutation.AddEmployeeGroupGroupId(i)
	return ecu
}

// ClearEmployeeGroupGroupId clears the value of the "EmployeeGroup_groupId" field.
func (ecu *EmployeeCadreUpdate) ClearEmployeeGroupGroupId() *EmployeeCadreUpdate {
	ecu.mutation.ClearEmployeeGroupGroupId()
	return ecu
}

// SetGroupDescription sets the "GroupDescription" field.
func (ecu *EmployeeCadreUpdate) SetGroupDescription(s string) *EmployeeCadreUpdate {
	ecu.mutation.SetGroupDescription(s)
	return ecu
}

// SetNillableGroupDescription sets the "GroupDescription" field if the given value is not nil.
func (ecu *EmployeeCadreUpdate) SetNillableGroupDescription(s *string) *EmployeeCadreUpdate {
	if s != nil {
		ecu.SetGroupDescription(*s)
	}
	return ecu
}

// ClearGroupDescription clears the value of the "GroupDescription" field.
func (ecu *EmployeeCadreUpdate) ClearGroupDescription() *EmployeeCadreUpdate {
	ecu.mutation.ClearGroupDescription()
	return ecu
}

// SetPostCode sets the "PostCode" field.
func (ecu *EmployeeCadreUpdate) SetPostCode(s string) *EmployeeCadreUpdate {
	ecu.mutation.SetPostCode(s)
	return ecu
}

// SetNillablePostCode sets the "PostCode" field if the given value is not nil.
func (ecu *EmployeeCadreUpdate) SetNillablePostCode(s *string) *EmployeeCadreUpdate {
	if s != nil {
		ecu.SetPostCode(*s)
	}
	return ecu
}

// ClearPostCode clears the value of the "PostCode" field.
func (ecu *EmployeeCadreUpdate) ClearPostCode() *EmployeeCadreUpdate {
	ecu.mutation.ClearPostCode()
	return ecu
}

// SetPostDescription sets the "PostDescription" field.
func (ecu *EmployeeCadreUpdate) SetPostDescription(s string) *EmployeeCadreUpdate {
	ecu.mutation.SetPostDescription(s)
	return ecu
}

// SetNillablePostDescription sets the "PostDescription" field if the given value is not nil.
func (ecu *EmployeeCadreUpdate) SetNillablePostDescription(s *string) *EmployeeCadreUpdate {
	if s != nil {
		ecu.SetPostDescription(*s)
	}
	return ecu
}

// ClearPostDescription clears the value of the "PostDescription" field.
func (ecu *EmployeeCadreUpdate) ClearPostDescription() *EmployeeCadreUpdate {
	ecu.mutation.ClearPostDescription()
	return ecu
}

// SetBaseCadre sets the "BaseCadre" field.
func (ecu *EmployeeCadreUpdate) SetBaseCadre(i int32) *EmployeeCadreUpdate {
	ecu.mutation.ResetBaseCadre()
	ecu.mutation.SetBaseCadre(i)
	return ecu
}

// SetNillableBaseCadre sets the "BaseCadre" field if the given value is not nil.
func (ecu *EmployeeCadreUpdate) SetNillableBaseCadre(i *int32) *EmployeeCadreUpdate {
	if i != nil {
		ecu.SetBaseCadre(*i)
	}
	return ecu
}

// AddBaseCadre adds i to the "BaseCadre" field.
func (ecu *EmployeeCadreUpdate) AddBaseCadre(i int32) *EmployeeCadreUpdate {
	ecu.mutation.AddBaseCadre(i)
	return ecu
}

// ClearBaseCadre clears the value of the "BaseCadre" field.
func (ecu *EmployeeCadreUpdate) ClearBaseCadre() *EmployeeCadreUpdate {
	ecu.mutation.ClearBaseCadre()
	return ecu
}

// SetGdsService sets the "GdsService" field.
func (ecu *EmployeeCadreUpdate) SetGdsService(i int32) *EmployeeCadreUpdate {
	ecu.mutation.ResetGdsService()
	ecu.mutation.SetGdsService(i)
	return ecu
}

// SetNillableGdsService sets the "GdsService" field if the given value is not nil.
func (ecu *EmployeeCadreUpdate) SetNillableGdsService(i *int32) *EmployeeCadreUpdate {
	if i != nil {
		ecu.SetGdsService(*i)
	}
	return ecu
}

// AddGdsService adds i to the "GdsService" field.
func (ecu *EmployeeCadreUpdate) AddGdsService(i int32) *EmployeeCadreUpdate {
	ecu.mutation.AddGdsService(i)
	return ecu
}

// ClearGdsService clears the value of the "GdsService" field.
func (ecu *EmployeeCadreUpdate) ClearGdsService() *EmployeeCadreUpdate {
	ecu.mutation.ClearGdsService()
	return ecu
}

// SetAgeCriteria sets the "ageCriteria" field.
func (ecu *EmployeeCadreUpdate) SetAgeCriteria(i int32) *EmployeeCadreUpdate {
	ecu.mutation.ResetAgeCriteria()
	ecu.mutation.SetAgeCriteria(i)
	return ecu
}

// SetNillableAgeCriteria sets the "ageCriteria" field if the given value is not nil.
func (ecu *EmployeeCadreUpdate) SetNillableAgeCriteria(i *int32) *EmployeeCadreUpdate {
	if i != nil {
		ecu.SetAgeCriteria(*i)
	}
	return ecu
}

// AddAgeCriteria adds i to the "ageCriteria" field.
func (ecu *EmployeeCadreUpdate) AddAgeCriteria(i int32) *EmployeeCadreUpdate {
	ecu.mutation.AddAgeCriteria(i)
	return ecu
}

// ClearAgeCriteria clears the value of the "ageCriteria" field.
func (ecu *EmployeeCadreUpdate) ClearAgeCriteria() *EmployeeCadreUpdate {
	ecu.mutation.ClearAgeCriteria()
	return ecu
}

// SetServiceCriteria sets the "ServiceCriteria" field.
func (ecu *EmployeeCadreUpdate) SetServiceCriteria(i int32) *EmployeeCadreUpdate {
	ecu.mutation.ResetServiceCriteria()
	ecu.mutation.SetServiceCriteria(i)
	return ecu
}

// SetNillableServiceCriteria sets the "ServiceCriteria" field if the given value is not nil.
func (ecu *EmployeeCadreUpdate) SetNillableServiceCriteria(i *int32) *EmployeeCadreUpdate {
	if i != nil {
		ecu.SetServiceCriteria(*i)
	}
	return ecu
}

// AddServiceCriteria adds i to the "ServiceCriteria" field.
func (ecu *EmployeeCadreUpdate) AddServiceCriteria(i int32) *EmployeeCadreUpdate {
	ecu.mutation.AddServiceCriteria(i)
	return ecu
}

// ClearServiceCriteria clears the value of the "ServiceCriteria" field.
func (ecu *EmployeeCadreUpdate) ClearServiceCriteria() *EmployeeCadreUpdate {
	ecu.mutation.ClearServiceCriteria()
	return ecu
}

// SetDrivingLicenceCriteria sets the "DrivingLicenceCriteria" field.
func (ecu *EmployeeCadreUpdate) SetDrivingLicenceCriteria(i int32) *EmployeeCadreUpdate {
	ecu.mutation.ResetDrivingLicenceCriteria()
	ecu.mutation.SetDrivingLicenceCriteria(i)
	return ecu
}

// SetNillableDrivingLicenceCriteria sets the "DrivingLicenceCriteria" field if the given value is not nil.
func (ecu *EmployeeCadreUpdate) SetNillableDrivingLicenceCriteria(i *int32) *EmployeeCadreUpdate {
	if i != nil {
		ecu.SetDrivingLicenceCriteria(*i)
	}
	return ecu
}

// AddDrivingLicenceCriteria adds i to the "DrivingLicenceCriteria" field.
func (ecu *EmployeeCadreUpdate) AddDrivingLicenceCriteria(i int32) *EmployeeCadreUpdate {
	ecu.mutation.AddDrivingLicenceCriteria(i)
	return ecu
}

// ClearDrivingLicenceCriteria clears the value of the "DrivingLicenceCriteria" field.
func (ecu *EmployeeCadreUpdate) ClearDrivingLicenceCriteria() *EmployeeCadreUpdate {
	ecu.mutation.ClearDrivingLicenceCriteria()
	return ecu
}

// SetComputerKnowledge sets the "ComputerKnowledge" field.
func (ecu *EmployeeCadreUpdate) SetComputerKnowledge(i int32) *EmployeeCadreUpdate {
	ecu.mutation.ResetComputerKnowledge()
	ecu.mutation.SetComputerKnowledge(i)
	return ecu
}

// SetNillableComputerKnowledge sets the "ComputerKnowledge" field if the given value is not nil.
func (ecu *EmployeeCadreUpdate) SetNillableComputerKnowledge(i *int32) *EmployeeCadreUpdate {
	if i != nil {
		ecu.SetComputerKnowledge(*i)
	}
	return ecu
}

// AddComputerKnowledge adds i to the "ComputerKnowledge" field.
func (ecu *EmployeeCadreUpdate) AddComputerKnowledge(i int32) *EmployeeCadreUpdate {
	ecu.mutation.AddComputerKnowledge(i)
	return ecu
}

// ClearComputerKnowledge clears the value of the "ComputerKnowledge" field.
func (ecu *EmployeeCadreUpdate) ClearComputerKnowledge() *EmployeeCadreUpdate {
	ecu.mutation.ClearComputerKnowledge()
	return ecu
}

// SetEligibiltyBasedOnLevelOfPaymatrix sets the "EligibiltyBasedOnLevelOfPaymatrix" field.
func (ecu *EmployeeCadreUpdate) SetEligibiltyBasedOnLevelOfPaymatrix(i int32) *EmployeeCadreUpdate {
	ecu.mutation.ResetEligibiltyBasedOnLevelOfPaymatrix()
	ecu.mutation.SetEligibiltyBasedOnLevelOfPaymatrix(i)
	return ecu
}

// SetNillableEligibiltyBasedOnLevelOfPaymatrix sets the "EligibiltyBasedOnLevelOfPaymatrix" field if the given value is not nil.
func (ecu *EmployeeCadreUpdate) SetNillableEligibiltyBasedOnLevelOfPaymatrix(i *int32) *EmployeeCadreUpdate {
	if i != nil {
		ecu.SetEligibiltyBasedOnLevelOfPaymatrix(*i)
	}
	return ecu
}

// AddEligibiltyBasedOnLevelOfPaymatrix adds i to the "EligibiltyBasedOnLevelOfPaymatrix" field.
func (ecu *EmployeeCadreUpdate) AddEligibiltyBasedOnLevelOfPaymatrix(i int32) *EmployeeCadreUpdate {
	ecu.mutation.AddEligibiltyBasedOnLevelOfPaymatrix(i)
	return ecu
}

// ClearEligibiltyBasedOnLevelOfPaymatrix clears the value of the "EligibiltyBasedOnLevelOfPaymatrix" field.
func (ecu *EmployeeCadreUpdate) ClearEligibiltyBasedOnLevelOfPaymatrix() *EmployeeCadreUpdate {
	ecu.mutation.ClearEligibiltyBasedOnLevelOfPaymatrix()
	return ecu
}

// SetEducationDetailsEducationCode sets the "EducationDetails_educationCode" field.
func (ecu *EmployeeCadreUpdate) SetEducationDetailsEducationCode(i int32) *EmployeeCadreUpdate {
	ecu.mutation.ResetEducationDetailsEducationCode()
	ecu.mutation.SetEducationDetailsEducationCode(i)
	return ecu
}

// SetNillableEducationDetailsEducationCode sets the "EducationDetails_educationCode" field if the given value is not nil.
func (ecu *EmployeeCadreUpdate) SetNillableEducationDetailsEducationCode(i *int32) *EmployeeCadreUpdate {
	if i != nil {
		ecu.SetEducationDetailsEducationCode(*i)
	}
	return ecu
}

// AddEducationDetailsEducationCode adds i to the "EducationDetails_educationCode" field.
func (ecu *EmployeeCadreUpdate) AddEducationDetailsEducationCode(i int32) *EmployeeCadreUpdate {
	ecu.mutation.AddEducationDetailsEducationCode(i)
	return ecu
}

// ClearEducationDetailsEducationCode clears the value of the "EducationDetails_educationCode" field.
func (ecu *EmployeeCadreUpdate) ClearEducationDetailsEducationCode() *EmployeeCadreUpdate {
	ecu.mutation.ClearEducationDetailsEducationCode()
	return ecu
}

// SetEducationDescription sets the "EducationDescription" field.
func (ecu *EmployeeCadreUpdate) SetEducationDescription(s string) *EmployeeCadreUpdate {
	ecu.mutation.SetEducationDescription(s)
	return ecu
}

// SetNillableEducationDescription sets the "EducationDescription" field if the given value is not nil.
func (ecu *EmployeeCadreUpdate) SetNillableEducationDescription(s *string) *EmployeeCadreUpdate {
	if s != nil {
		ecu.SetEducationDescription(*s)
	}
	return ecu
}

// ClearEducationDescription clears the value of the "EducationDescription" field.
func (ecu *EmployeeCadreUpdate) ClearEducationDescription() *EmployeeCadreUpdate {
	ecu.mutation.ClearEducationDescription()
	return ecu
}

// SetOrderNumber sets the "OrderNumber" field.
func (ecu *EmployeeCadreUpdate) SetOrderNumber(s string) *EmployeeCadreUpdate {
	ecu.mutation.SetOrderNumber(s)
	return ecu
}

// SetNillableOrderNumber sets the "OrderNumber" field if the given value is not nil.
func (ecu *EmployeeCadreUpdate) SetNillableOrderNumber(s *string) *EmployeeCadreUpdate {
	if s != nil {
		ecu.SetOrderNumber(*s)
	}
	return ecu
}

// ClearOrderNumber clears the value of the "OrderNumber" field.
func (ecu *EmployeeCadreUpdate) ClearOrderNumber() *EmployeeCadreUpdate {
	ecu.mutation.ClearOrderNumber()
	return ecu
}

// SetStatus sets the "Status" field.
func (ecu *EmployeeCadreUpdate) SetStatus(s string) *EmployeeCadreUpdate {
	ecu.mutation.SetStatus(s)
	return ecu
}

// SetNillableStatus sets the "Status" field if the given value is not nil.
func (ecu *EmployeeCadreUpdate) SetNillableStatus(s *string) *EmployeeCadreUpdate {
	if s != nil {
		ecu.SetStatus(*s)
	}
	return ecu
}

// ClearStatus clears the value of the "Status" field.
func (ecu *EmployeeCadreUpdate) ClearStatus() *EmployeeCadreUpdate {
	ecu.mutation.ClearStatus()
	return ecu
}

// SetCreatedById sets the "CreatedById" field.
func (ecu *EmployeeCadreUpdate) SetCreatedById(i int32) *EmployeeCadreUpdate {
	ecu.mutation.ResetCreatedById()
	ecu.mutation.SetCreatedById(i)
	return ecu
}

// SetNillableCreatedById sets the "CreatedById" field if the given value is not nil.
func (ecu *EmployeeCadreUpdate) SetNillableCreatedById(i *int32) *EmployeeCadreUpdate {
	if i != nil {
		ecu.SetCreatedById(*i)
	}
	return ecu
}

// AddCreatedById adds i to the "CreatedById" field.
func (ecu *EmployeeCadreUpdate) AddCreatedById(i int32) *EmployeeCadreUpdate {
	ecu.mutation.AddCreatedById(i)
	return ecu
}

// ClearCreatedById clears the value of the "CreatedById" field.
func (ecu *EmployeeCadreUpdate) ClearCreatedById() *EmployeeCadreUpdate {
	ecu.mutation.ClearCreatedById()
	return ecu
}

// SetCreatedByUserName sets the "CreatedByUserName" field.
func (ecu *EmployeeCadreUpdate) SetCreatedByUserName(s string) *EmployeeCadreUpdate {
	ecu.mutation.SetCreatedByUserName(s)
	return ecu
}

// SetNillableCreatedByUserName sets the "CreatedByUserName" field if the given value is not nil.
func (ecu *EmployeeCadreUpdate) SetNillableCreatedByUserName(s *string) *EmployeeCadreUpdate {
	if s != nil {
		ecu.SetCreatedByUserName(*s)
	}
	return ecu
}

// ClearCreatedByUserName clears the value of the "CreatedByUserName" field.
func (ecu *EmployeeCadreUpdate) ClearCreatedByUserName() *EmployeeCadreUpdate {
	ecu.mutation.ClearCreatedByUserName()
	return ecu
}

// SetCreatedByEmployeeId sets the "CreatedByEmployeeId" field.
func (ecu *EmployeeCadreUpdate) SetCreatedByEmployeeId(s string) *EmployeeCadreUpdate {
	ecu.mutation.SetCreatedByEmployeeId(s)
	return ecu
}

// SetNillableCreatedByEmployeeId sets the "CreatedByEmployeeId" field if the given value is not nil.
func (ecu *EmployeeCadreUpdate) SetNillableCreatedByEmployeeId(s *string) *EmployeeCadreUpdate {
	if s != nil {
		ecu.SetCreatedByEmployeeId(*s)
	}
	return ecu
}

// ClearCreatedByEmployeeId clears the value of the "CreatedByEmployeeId" field.
func (ecu *EmployeeCadreUpdate) ClearCreatedByEmployeeId() *EmployeeCadreUpdate {
	ecu.mutation.ClearCreatedByEmployeeId()
	return ecu
}

// SetCreatedByDesignation sets the "CreatedByDesignation" field.
func (ecu *EmployeeCadreUpdate) SetCreatedByDesignation(s string) *EmployeeCadreUpdate {
	ecu.mutation.SetCreatedByDesignation(s)
	return ecu
}

// SetNillableCreatedByDesignation sets the "CreatedByDesignation" field if the given value is not nil.
func (ecu *EmployeeCadreUpdate) SetNillableCreatedByDesignation(s *string) *EmployeeCadreUpdate {
	if s != nil {
		ecu.SetCreatedByDesignation(*s)
	}
	return ecu
}

// ClearCreatedByDesignation clears the value of the "CreatedByDesignation" field.
func (ecu *EmployeeCadreUpdate) ClearCreatedByDesignation() *EmployeeCadreUpdate {
	ecu.mutation.ClearCreatedByDesignation()
	return ecu
}

// SetCreatedDate sets the "CreatedDate" field.
func (ecu *EmployeeCadreUpdate) SetCreatedDate(t time.Time) *EmployeeCadreUpdate {
	ecu.mutation.SetCreatedDate(t)
	return ecu
}

// SetNillableCreatedDate sets the "CreatedDate" field if the given value is not nil.
func (ecu *EmployeeCadreUpdate) SetNillableCreatedDate(t *time.Time) *EmployeeCadreUpdate {
	if t != nil {
		ecu.SetCreatedDate(*t)
	}
	return ecu
}

// ClearCreatedDate clears the value of the "CreatedDate" field.
func (ecu *EmployeeCadreUpdate) ClearCreatedDate() *EmployeeCadreUpdate {
	ecu.mutation.ClearCreatedDate()
	return ecu
}

// SetVerifiedById sets the "VerifiedById" field.
func (ecu *EmployeeCadreUpdate) SetVerifiedById(i int64) *EmployeeCadreUpdate {
	ecu.mutation.ResetVerifiedById()
	ecu.mutation.SetVerifiedById(i)
	return ecu
}

// SetNillableVerifiedById sets the "VerifiedById" field if the given value is not nil.
func (ecu *EmployeeCadreUpdate) SetNillableVerifiedById(i *int64) *EmployeeCadreUpdate {
	if i != nil {
		ecu.SetVerifiedById(*i)
	}
	return ecu
}

// AddVerifiedById adds i to the "VerifiedById" field.
func (ecu *EmployeeCadreUpdate) AddVerifiedById(i int64) *EmployeeCadreUpdate {
	ecu.mutation.AddVerifiedById(i)
	return ecu
}

// ClearVerifiedById clears the value of the "VerifiedById" field.
func (ecu *EmployeeCadreUpdate) ClearVerifiedById() *EmployeeCadreUpdate {
	ecu.mutation.ClearVerifiedById()
	return ecu
}

// SetVerifiedByUserName sets the "VerifiedByUserName" field.
func (ecu *EmployeeCadreUpdate) SetVerifiedByUserName(s string) *EmployeeCadreUpdate {
	ecu.mutation.SetVerifiedByUserName(s)
	return ecu
}

// SetNillableVerifiedByUserName sets the "VerifiedByUserName" field if the given value is not nil.
func (ecu *EmployeeCadreUpdate) SetNillableVerifiedByUserName(s *string) *EmployeeCadreUpdate {
	if s != nil {
		ecu.SetVerifiedByUserName(*s)
	}
	return ecu
}

// ClearVerifiedByUserName clears the value of the "VerifiedByUserName" field.
func (ecu *EmployeeCadreUpdate) ClearVerifiedByUserName() *EmployeeCadreUpdate {
	ecu.mutation.ClearVerifiedByUserName()
	return ecu
}

// SetVerifiedByEmployeeId sets the "VerifiedByEmployeeId" field.
func (ecu *EmployeeCadreUpdate) SetVerifiedByEmployeeId(s string) *EmployeeCadreUpdate {
	ecu.mutation.SetVerifiedByEmployeeId(s)
	return ecu
}

// SetNillableVerifiedByEmployeeId sets the "VerifiedByEmployeeId" field if the given value is not nil.
func (ecu *EmployeeCadreUpdate) SetNillableVerifiedByEmployeeId(s *string) *EmployeeCadreUpdate {
	if s != nil {
		ecu.SetVerifiedByEmployeeId(*s)
	}
	return ecu
}

// ClearVerifiedByEmployeeId clears the value of the "VerifiedByEmployeeId" field.
func (ecu *EmployeeCadreUpdate) ClearVerifiedByEmployeeId() *EmployeeCadreUpdate {
	ecu.mutation.ClearVerifiedByEmployeeId()
	return ecu
}

// SetVerifiedByDesignation sets the "VerifiedByDesignation" field.
func (ecu *EmployeeCadreUpdate) SetVerifiedByDesignation(s string) *EmployeeCadreUpdate {
	ecu.mutation.SetVerifiedByDesignation(s)
	return ecu
}

// SetNillableVerifiedByDesignation sets the "VerifiedByDesignation" field if the given value is not nil.
func (ecu *EmployeeCadreUpdate) SetNillableVerifiedByDesignation(s *string) *EmployeeCadreUpdate {
	if s != nil {
		ecu.SetVerifiedByDesignation(*s)
	}
	return ecu
}

// ClearVerifiedByDesignation clears the value of the "VerifiedByDesignation" field.
func (ecu *EmployeeCadreUpdate) ClearVerifiedByDesignation() *EmployeeCadreUpdate {
	ecu.mutation.ClearVerifiedByDesignation()
	return ecu
}

// SetVerifiedDate sets the "VerifiedDate" field.
func (ecu *EmployeeCadreUpdate) SetVerifiedDate(t time.Time) *EmployeeCadreUpdate {
	ecu.mutation.SetVerifiedDate(t)
	return ecu
}

// SetNillableVerifiedDate sets the "VerifiedDate" field if the given value is not nil.
func (ecu *EmployeeCadreUpdate) SetNillableVerifiedDate(t *time.Time) *EmployeeCadreUpdate {
	if t != nil {
		ecu.SetVerifiedDate(*t)
	}
	return ecu
}

// ClearVerifiedDate clears the value of the "VerifiedDate" field.
func (ecu *EmployeeCadreUpdate) ClearVerifiedDate() *EmployeeCadreUpdate {
	ecu.mutation.ClearVerifiedDate()
	return ecu
}

// SetDeletedById sets the "DeletedById" field.
func (ecu *EmployeeCadreUpdate) SetDeletedById(i int64) *EmployeeCadreUpdate {
	ecu.mutation.ResetDeletedById()
	ecu.mutation.SetDeletedById(i)
	return ecu
}

// SetNillableDeletedById sets the "DeletedById" field if the given value is not nil.
func (ecu *EmployeeCadreUpdate) SetNillableDeletedById(i *int64) *EmployeeCadreUpdate {
	if i != nil {
		ecu.SetDeletedById(*i)
	}
	return ecu
}

// AddDeletedById adds i to the "DeletedById" field.
func (ecu *EmployeeCadreUpdate) AddDeletedById(i int64) *EmployeeCadreUpdate {
	ecu.mutation.AddDeletedById(i)
	return ecu
}

// ClearDeletedById clears the value of the "DeletedById" field.
func (ecu *EmployeeCadreUpdate) ClearDeletedById() *EmployeeCadreUpdate {
	ecu.mutation.ClearDeletedById()
	return ecu
}

// SetDeletedByUserName sets the "DeletedByUserName" field.
func (ecu *EmployeeCadreUpdate) SetDeletedByUserName(s string) *EmployeeCadreUpdate {
	ecu.mutation.SetDeletedByUserName(s)
	return ecu
}

// SetNillableDeletedByUserName sets the "DeletedByUserName" field if the given value is not nil.
func (ecu *EmployeeCadreUpdate) SetNillableDeletedByUserName(s *string) *EmployeeCadreUpdate {
	if s != nil {
		ecu.SetDeletedByUserName(*s)
	}
	return ecu
}

// ClearDeletedByUserName clears the value of the "DeletedByUserName" field.
func (ecu *EmployeeCadreUpdate) ClearDeletedByUserName() *EmployeeCadreUpdate {
	ecu.mutation.ClearDeletedByUserName()
	return ecu
}

// SetDeletedByEmployeeId sets the "DeletedByEmployeeId" field.
func (ecu *EmployeeCadreUpdate) SetDeletedByEmployeeId(s string) *EmployeeCadreUpdate {
	ecu.mutation.SetDeletedByEmployeeId(s)
	return ecu
}

// SetNillableDeletedByEmployeeId sets the "DeletedByEmployeeId" field if the given value is not nil.
func (ecu *EmployeeCadreUpdate) SetNillableDeletedByEmployeeId(s *string) *EmployeeCadreUpdate {
	if s != nil {
		ecu.SetDeletedByEmployeeId(*s)
	}
	return ecu
}

// ClearDeletedByEmployeeId clears the value of the "DeletedByEmployeeId" field.
func (ecu *EmployeeCadreUpdate) ClearDeletedByEmployeeId() *EmployeeCadreUpdate {
	ecu.mutation.ClearDeletedByEmployeeId()
	return ecu
}

// SetDeletedByDesignation sets the "DeletedByDesignation" field.
func (ecu *EmployeeCadreUpdate) SetDeletedByDesignation(s string) *EmployeeCadreUpdate {
	ecu.mutation.SetDeletedByDesignation(s)
	return ecu
}

// SetNillableDeletedByDesignation sets the "DeletedByDesignation" field if the given value is not nil.
func (ecu *EmployeeCadreUpdate) SetNillableDeletedByDesignation(s *string) *EmployeeCadreUpdate {
	if s != nil {
		ecu.SetDeletedByDesignation(*s)
	}
	return ecu
}

// ClearDeletedByDesignation clears the value of the "DeletedByDesignation" field.
func (ecu *EmployeeCadreUpdate) ClearDeletedByDesignation() *EmployeeCadreUpdate {
	ecu.mutation.ClearDeletedByDesignation()
	return ecu
}

// SetDeletedDate sets the "DeletedDate" field.
func (ecu *EmployeeCadreUpdate) SetDeletedDate(t time.Time) *EmployeeCadreUpdate {
	ecu.mutation.SetDeletedDate(t)
	return ecu
}

// SetNillableDeletedDate sets the "DeletedDate" field if the given value is not nil.
func (ecu *EmployeeCadreUpdate) SetNillableDeletedDate(t *time.Time) *EmployeeCadreUpdate {
	if t != nil {
		ecu.SetDeletedDate(*t)
	}
	return ecu
}

// ClearDeletedDate clears the value of the "DeletedDate" field.
func (ecu *EmployeeCadreUpdate) ClearDeletedDate() *EmployeeCadreUpdate {
	ecu.mutation.ClearDeletedDate()
	return ecu
}

// Mutation returns the EmployeeCadreMutation object of the builder.
func (ecu *EmployeeCadreUpdate) Mutation() *EmployeeCadreMutation {
	return ecu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ecu *EmployeeCadreUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ecu.sqlSave, ecu.mutation, ecu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ecu *EmployeeCadreUpdate) SaveX(ctx context.Context) int {
	affected, err := ecu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ecu *EmployeeCadreUpdate) Exec(ctx context.Context) error {
	_, err := ecu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ecu *EmployeeCadreUpdate) ExecX(ctx context.Context) {
	if err := ecu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ecu *EmployeeCadreUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(employeecadre.Table, employeecadre.Columns, sqlgraph.NewFieldSpec(employeecadre.FieldID, field.TypeInt32))
	if ps := ecu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ecu.mutation.Cadrecode(); ok {
		_spec.SetField(employeecadre.FieldCadrecode, field.TypeString, value)
	}
	if value, ok := ecu.mutation.Cadredescription(); ok {
		_spec.SetField(employeecadre.FieldCadredescription, field.TypeString, value)
	}
	if value, ok := ecu.mutation.PayLevel(); ok {
		_spec.SetField(employeecadre.FieldPayLevel, field.TypeString, value)
	}
	if value, ok := ecu.mutation.Scale(); ok {
		_spec.SetField(employeecadre.FieldScale, field.TypeString, value)
	}
	if value, ok := ecu.mutation.ExamconfigurationExamcode(); ok {
		_spec.SetField(employeecadre.FieldExamconfigurationExamcode, field.TypeInt32, value)
	}
	if value, ok := ecu.mutation.AddedExamconfigurationExamcode(); ok {
		_spec.AddField(employeecadre.FieldExamconfigurationExamcode, field.TypeInt32, value)
	}
	if ecu.mutation.ExamconfigurationExamcodeCleared() {
		_spec.ClearField(employeecadre.FieldExamconfigurationExamcode, field.TypeInt32)
	}
	if value, ok := ecu.mutation.ExamShortDescription(); ok {
		_spec.SetField(employeecadre.FieldExamShortDescription, field.TypeString, value)
	}
	if ecu.mutation.ExamShortDescriptionCleared() {
		_spec.ClearField(employeecadre.FieldExamShortDescription, field.TypeString)
	}
	if value, ok := ecu.mutation.ExamLongDescription(); ok {
		_spec.SetField(employeecadre.FieldExamLongDescription, field.TypeString, value)
	}
	if ecu.mutation.ExamLongDescriptionCleared() {
		_spec.ClearField(employeecadre.FieldExamLongDescription, field.TypeString)
	}
	if value, ok := ecu.mutation.EmployeePostPostId(); ok {
		_spec.SetField(employeecadre.FieldEmployeePostPostId, field.TypeInt32, value)
	}
	if value, ok := ecu.mutation.AddedEmployeePostPostId(); ok {
		_spec.AddField(employeecadre.FieldEmployeePostPostId, field.TypeInt32, value)
	}
	if ecu.mutation.EmployeePostPostIdCleared() {
		_spec.ClearField(employeecadre.FieldEmployeePostPostId, field.TypeInt32)
	}
	if value, ok := ecu.mutation.EmployeeGroupGroupId(); ok {
		_spec.SetField(employeecadre.FieldEmployeeGroupGroupId, field.TypeInt32, value)
	}
	if value, ok := ecu.mutation.AddedEmployeeGroupGroupId(); ok {
		_spec.AddField(employeecadre.FieldEmployeeGroupGroupId, field.TypeInt32, value)
	}
	if ecu.mutation.EmployeeGroupGroupIdCleared() {
		_spec.ClearField(employeecadre.FieldEmployeeGroupGroupId, field.TypeInt32)
	}
	if value, ok := ecu.mutation.GroupDescription(); ok {
		_spec.SetField(employeecadre.FieldGroupDescription, field.TypeString, value)
	}
	if ecu.mutation.GroupDescriptionCleared() {
		_spec.ClearField(employeecadre.FieldGroupDescription, field.TypeString)
	}
	if value, ok := ecu.mutation.PostCode(); ok {
		_spec.SetField(employeecadre.FieldPostCode, field.TypeString, value)
	}
	if ecu.mutation.PostCodeCleared() {
		_spec.ClearField(employeecadre.FieldPostCode, field.TypeString)
	}
	if value, ok := ecu.mutation.PostDescription(); ok {
		_spec.SetField(employeecadre.FieldPostDescription, field.TypeString, value)
	}
	if ecu.mutation.PostDescriptionCleared() {
		_spec.ClearField(employeecadre.FieldPostDescription, field.TypeString)
	}
	if value, ok := ecu.mutation.BaseCadre(); ok {
		_spec.SetField(employeecadre.FieldBaseCadre, field.TypeInt32, value)
	}
	if value, ok := ecu.mutation.AddedBaseCadre(); ok {
		_spec.AddField(employeecadre.FieldBaseCadre, field.TypeInt32, value)
	}
	if ecu.mutation.BaseCadreCleared() {
		_spec.ClearField(employeecadre.FieldBaseCadre, field.TypeInt32)
	}
	if value, ok := ecu.mutation.GdsService(); ok {
		_spec.SetField(employeecadre.FieldGdsService, field.TypeInt32, value)
	}
	if value, ok := ecu.mutation.AddedGdsService(); ok {
		_spec.AddField(employeecadre.FieldGdsService, field.TypeInt32, value)
	}
	if ecu.mutation.GdsServiceCleared() {
		_spec.ClearField(employeecadre.FieldGdsService, field.TypeInt32)
	}
	if value, ok := ecu.mutation.AgeCriteria(); ok {
		_spec.SetField(employeecadre.FieldAgeCriteria, field.TypeInt32, value)
	}
	if value, ok := ecu.mutation.AddedAgeCriteria(); ok {
		_spec.AddField(employeecadre.FieldAgeCriteria, field.TypeInt32, value)
	}
	if ecu.mutation.AgeCriteriaCleared() {
		_spec.ClearField(employeecadre.FieldAgeCriteria, field.TypeInt32)
	}
	if value, ok := ecu.mutation.ServiceCriteria(); ok {
		_spec.SetField(employeecadre.FieldServiceCriteria, field.TypeInt32, value)
	}
	if value, ok := ecu.mutation.AddedServiceCriteria(); ok {
		_spec.AddField(employeecadre.FieldServiceCriteria, field.TypeInt32, value)
	}
	if ecu.mutation.ServiceCriteriaCleared() {
		_spec.ClearField(employeecadre.FieldServiceCriteria, field.TypeInt32)
	}
	if value, ok := ecu.mutation.DrivingLicenceCriteria(); ok {
		_spec.SetField(employeecadre.FieldDrivingLicenceCriteria, field.TypeInt32, value)
	}
	if value, ok := ecu.mutation.AddedDrivingLicenceCriteria(); ok {
		_spec.AddField(employeecadre.FieldDrivingLicenceCriteria, field.TypeInt32, value)
	}
	if ecu.mutation.DrivingLicenceCriteriaCleared() {
		_spec.ClearField(employeecadre.FieldDrivingLicenceCriteria, field.TypeInt32)
	}
	if value, ok := ecu.mutation.ComputerKnowledge(); ok {
		_spec.SetField(employeecadre.FieldComputerKnowledge, field.TypeInt32, value)
	}
	if value, ok := ecu.mutation.AddedComputerKnowledge(); ok {
		_spec.AddField(employeecadre.FieldComputerKnowledge, field.TypeInt32, value)
	}
	if ecu.mutation.ComputerKnowledgeCleared() {
		_spec.ClearField(employeecadre.FieldComputerKnowledge, field.TypeInt32)
	}
	if value, ok := ecu.mutation.EligibiltyBasedOnLevelOfPaymatrix(); ok {
		_spec.SetField(employeecadre.FieldEligibiltyBasedOnLevelOfPaymatrix, field.TypeInt32, value)
	}
	if value, ok := ecu.mutation.AddedEligibiltyBasedOnLevelOfPaymatrix(); ok {
		_spec.AddField(employeecadre.FieldEligibiltyBasedOnLevelOfPaymatrix, field.TypeInt32, value)
	}
	if ecu.mutation.EligibiltyBasedOnLevelOfPaymatrixCleared() {
		_spec.ClearField(employeecadre.FieldEligibiltyBasedOnLevelOfPaymatrix, field.TypeInt32)
	}
	if value, ok := ecu.mutation.EducationDetailsEducationCode(); ok {
		_spec.SetField(employeecadre.FieldEducationDetailsEducationCode, field.TypeInt32, value)
	}
	if value, ok := ecu.mutation.AddedEducationDetailsEducationCode(); ok {
		_spec.AddField(employeecadre.FieldEducationDetailsEducationCode, field.TypeInt32, value)
	}
	if ecu.mutation.EducationDetailsEducationCodeCleared() {
		_spec.ClearField(employeecadre.FieldEducationDetailsEducationCode, field.TypeInt32)
	}
	if value, ok := ecu.mutation.EducationDescription(); ok {
		_spec.SetField(employeecadre.FieldEducationDescription, field.TypeString, value)
	}
	if ecu.mutation.EducationDescriptionCleared() {
		_spec.ClearField(employeecadre.FieldEducationDescription, field.TypeString)
	}
	if value, ok := ecu.mutation.OrderNumber(); ok {
		_spec.SetField(employeecadre.FieldOrderNumber, field.TypeString, value)
	}
	if ecu.mutation.OrderNumberCleared() {
		_spec.ClearField(employeecadre.FieldOrderNumber, field.TypeString)
	}
	if value, ok := ecu.mutation.Status(); ok {
		_spec.SetField(employeecadre.FieldStatus, field.TypeString, value)
	}
	if ecu.mutation.StatusCleared() {
		_spec.ClearField(employeecadre.FieldStatus, field.TypeString)
	}
	if value, ok := ecu.mutation.CreatedById(); ok {
		_spec.SetField(employeecadre.FieldCreatedById, field.TypeInt32, value)
	}
	if value, ok := ecu.mutation.AddedCreatedById(); ok {
		_spec.AddField(employeecadre.FieldCreatedById, field.TypeInt32, value)
	}
	if ecu.mutation.CreatedByIdCleared() {
		_spec.ClearField(employeecadre.FieldCreatedById, field.TypeInt32)
	}
	if value, ok := ecu.mutation.CreatedByUserName(); ok {
		_spec.SetField(employeecadre.FieldCreatedByUserName, field.TypeString, value)
	}
	if ecu.mutation.CreatedByUserNameCleared() {
		_spec.ClearField(employeecadre.FieldCreatedByUserName, field.TypeString)
	}
	if value, ok := ecu.mutation.CreatedByEmployeeId(); ok {
		_spec.SetField(employeecadre.FieldCreatedByEmployeeId, field.TypeString, value)
	}
	if ecu.mutation.CreatedByEmployeeIdCleared() {
		_spec.ClearField(employeecadre.FieldCreatedByEmployeeId, field.TypeString)
	}
	if value, ok := ecu.mutation.CreatedByDesignation(); ok {
		_spec.SetField(employeecadre.FieldCreatedByDesignation, field.TypeString, value)
	}
	if ecu.mutation.CreatedByDesignationCleared() {
		_spec.ClearField(employeecadre.FieldCreatedByDesignation, field.TypeString)
	}
	if value, ok := ecu.mutation.CreatedDate(); ok {
		_spec.SetField(employeecadre.FieldCreatedDate, field.TypeTime, value)
	}
	if ecu.mutation.CreatedDateCleared() {
		_spec.ClearField(employeecadre.FieldCreatedDate, field.TypeTime)
	}
	if value, ok := ecu.mutation.VerifiedById(); ok {
		_spec.SetField(employeecadre.FieldVerifiedById, field.TypeInt64, value)
	}
	if value, ok := ecu.mutation.AddedVerifiedById(); ok {
		_spec.AddField(employeecadre.FieldVerifiedById, field.TypeInt64, value)
	}
	if ecu.mutation.VerifiedByIdCleared() {
		_spec.ClearField(employeecadre.FieldVerifiedById, field.TypeInt64)
	}
	if value, ok := ecu.mutation.VerifiedByUserName(); ok {
		_spec.SetField(employeecadre.FieldVerifiedByUserName, field.TypeString, value)
	}
	if ecu.mutation.VerifiedByUserNameCleared() {
		_spec.ClearField(employeecadre.FieldVerifiedByUserName, field.TypeString)
	}
	if value, ok := ecu.mutation.VerifiedByEmployeeId(); ok {
		_spec.SetField(employeecadre.FieldVerifiedByEmployeeId, field.TypeString, value)
	}
	if ecu.mutation.VerifiedByEmployeeIdCleared() {
		_spec.ClearField(employeecadre.FieldVerifiedByEmployeeId, field.TypeString)
	}
	if value, ok := ecu.mutation.VerifiedByDesignation(); ok {
		_spec.SetField(employeecadre.FieldVerifiedByDesignation, field.TypeString, value)
	}
	if ecu.mutation.VerifiedByDesignationCleared() {
		_spec.ClearField(employeecadre.FieldVerifiedByDesignation, field.TypeString)
	}
	if value, ok := ecu.mutation.VerifiedDate(); ok {
		_spec.SetField(employeecadre.FieldVerifiedDate, field.TypeTime, value)
	}
	if ecu.mutation.VerifiedDateCleared() {
		_spec.ClearField(employeecadre.FieldVerifiedDate, field.TypeTime)
	}
	if value, ok := ecu.mutation.DeletedById(); ok {
		_spec.SetField(employeecadre.FieldDeletedById, field.TypeInt64, value)
	}
	if value, ok := ecu.mutation.AddedDeletedById(); ok {
		_spec.AddField(employeecadre.FieldDeletedById, field.TypeInt64, value)
	}
	if ecu.mutation.DeletedByIdCleared() {
		_spec.ClearField(employeecadre.FieldDeletedById, field.TypeInt64)
	}
	if value, ok := ecu.mutation.DeletedByUserName(); ok {
		_spec.SetField(employeecadre.FieldDeletedByUserName, field.TypeString, value)
	}
	if ecu.mutation.DeletedByUserNameCleared() {
		_spec.ClearField(employeecadre.FieldDeletedByUserName, field.TypeString)
	}
	if value, ok := ecu.mutation.DeletedByEmployeeId(); ok {
		_spec.SetField(employeecadre.FieldDeletedByEmployeeId, field.TypeString, value)
	}
	if ecu.mutation.DeletedByEmployeeIdCleared() {
		_spec.ClearField(employeecadre.FieldDeletedByEmployeeId, field.TypeString)
	}
	if value, ok := ecu.mutation.DeletedByDesignation(); ok {
		_spec.SetField(employeecadre.FieldDeletedByDesignation, field.TypeString, value)
	}
	if ecu.mutation.DeletedByDesignationCleared() {
		_spec.ClearField(employeecadre.FieldDeletedByDesignation, field.TypeString)
	}
	if value, ok := ecu.mutation.DeletedDate(); ok {
		_spec.SetField(employeecadre.FieldDeletedDate, field.TypeTime, value)
	}
	if ecu.mutation.DeletedDateCleared() {
		_spec.ClearField(employeecadre.FieldDeletedDate, field.TypeTime)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ecu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{employeecadre.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ecu.mutation.done = true
	return n, nil
}

// EmployeeCadreUpdateOne is the builder for updating a single EmployeeCadre entity.
type EmployeeCadreUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *EmployeeCadreMutation
}

// SetCadrecode sets the "cadrecode" field.
func (ecuo *EmployeeCadreUpdateOne) SetCadrecode(s string) *EmployeeCadreUpdateOne {
	ecuo.mutation.SetCadrecode(s)
	return ecuo
}

// SetCadredescription sets the "cadredescription" field.
func (ecuo *EmployeeCadreUpdateOne) SetCadredescription(s string) *EmployeeCadreUpdateOne {
	ecuo.mutation.SetCadredescription(s)
	return ecuo
}

// SetPayLevel sets the "PayLevel" field.
func (ecuo *EmployeeCadreUpdateOne) SetPayLevel(s string) *EmployeeCadreUpdateOne {
	ecuo.mutation.SetPayLevel(s)
	return ecuo
}

// SetScale sets the "Scale" field.
func (ecuo *EmployeeCadreUpdateOne) SetScale(s string) *EmployeeCadreUpdateOne {
	ecuo.mutation.SetScale(s)
	return ecuo
}

// SetExamconfigurationExamcode sets the "ExamconfigurationExamcode" field.
func (ecuo *EmployeeCadreUpdateOne) SetExamconfigurationExamcode(i int32) *EmployeeCadreUpdateOne {
	ecuo.mutation.ResetExamconfigurationExamcode()
	ecuo.mutation.SetExamconfigurationExamcode(i)
	return ecuo
}

// SetNillableExamconfigurationExamcode sets the "ExamconfigurationExamcode" field if the given value is not nil.
func (ecuo *EmployeeCadreUpdateOne) SetNillableExamconfigurationExamcode(i *int32) *EmployeeCadreUpdateOne {
	if i != nil {
		ecuo.SetExamconfigurationExamcode(*i)
	}
	return ecuo
}

// AddExamconfigurationExamcode adds i to the "ExamconfigurationExamcode" field.
func (ecuo *EmployeeCadreUpdateOne) AddExamconfigurationExamcode(i int32) *EmployeeCadreUpdateOne {
	ecuo.mutation.AddExamconfigurationExamcode(i)
	return ecuo
}

// ClearExamconfigurationExamcode clears the value of the "ExamconfigurationExamcode" field.
func (ecuo *EmployeeCadreUpdateOne) ClearExamconfigurationExamcode() *EmployeeCadreUpdateOne {
	ecuo.mutation.ClearExamconfigurationExamcode()
	return ecuo
}

// SetExamShortDescription sets the "ExamShortDescription" field.
func (ecuo *EmployeeCadreUpdateOne) SetExamShortDescription(s string) *EmployeeCadreUpdateOne {
	ecuo.mutation.SetExamShortDescription(s)
	return ecuo
}

// SetNillableExamShortDescription sets the "ExamShortDescription" field if the given value is not nil.
func (ecuo *EmployeeCadreUpdateOne) SetNillableExamShortDescription(s *string) *EmployeeCadreUpdateOne {
	if s != nil {
		ecuo.SetExamShortDescription(*s)
	}
	return ecuo
}

// ClearExamShortDescription clears the value of the "ExamShortDescription" field.
func (ecuo *EmployeeCadreUpdateOne) ClearExamShortDescription() *EmployeeCadreUpdateOne {
	ecuo.mutation.ClearExamShortDescription()
	return ecuo
}

// SetExamLongDescription sets the "ExamLongDescription" field.
func (ecuo *EmployeeCadreUpdateOne) SetExamLongDescription(s string) *EmployeeCadreUpdateOne {
	ecuo.mutation.SetExamLongDescription(s)
	return ecuo
}

// SetNillableExamLongDescription sets the "ExamLongDescription" field if the given value is not nil.
func (ecuo *EmployeeCadreUpdateOne) SetNillableExamLongDescription(s *string) *EmployeeCadreUpdateOne {
	if s != nil {
		ecuo.SetExamLongDescription(*s)
	}
	return ecuo
}

// ClearExamLongDescription clears the value of the "ExamLongDescription" field.
func (ecuo *EmployeeCadreUpdateOne) ClearExamLongDescription() *EmployeeCadreUpdateOne {
	ecuo.mutation.ClearExamLongDescription()
	return ecuo
}

// SetEmployeePostPostId sets the "EmployeePost_postId" field.
func (ecuo *EmployeeCadreUpdateOne) SetEmployeePostPostId(i int32) *EmployeeCadreUpdateOne {
	ecuo.mutation.ResetEmployeePostPostId()
	ecuo.mutation.SetEmployeePostPostId(i)
	return ecuo
}

// SetNillableEmployeePostPostId sets the "EmployeePost_postId" field if the given value is not nil.
func (ecuo *EmployeeCadreUpdateOne) SetNillableEmployeePostPostId(i *int32) *EmployeeCadreUpdateOne {
	if i != nil {
		ecuo.SetEmployeePostPostId(*i)
	}
	return ecuo
}

// AddEmployeePostPostId adds i to the "EmployeePost_postId" field.
func (ecuo *EmployeeCadreUpdateOne) AddEmployeePostPostId(i int32) *EmployeeCadreUpdateOne {
	ecuo.mutation.AddEmployeePostPostId(i)
	return ecuo
}

// ClearEmployeePostPostId clears the value of the "EmployeePost_postId" field.
func (ecuo *EmployeeCadreUpdateOne) ClearEmployeePostPostId() *EmployeeCadreUpdateOne {
	ecuo.mutation.ClearEmployeePostPostId()
	return ecuo
}

// SetEmployeeGroupGroupId sets the "EmployeeGroup_groupId" field.
func (ecuo *EmployeeCadreUpdateOne) SetEmployeeGroupGroupId(i int32) *EmployeeCadreUpdateOne {
	ecuo.mutation.ResetEmployeeGroupGroupId()
	ecuo.mutation.SetEmployeeGroupGroupId(i)
	return ecuo
}

// SetNillableEmployeeGroupGroupId sets the "EmployeeGroup_groupId" field if the given value is not nil.
func (ecuo *EmployeeCadreUpdateOne) SetNillableEmployeeGroupGroupId(i *int32) *EmployeeCadreUpdateOne {
	if i != nil {
		ecuo.SetEmployeeGroupGroupId(*i)
	}
	return ecuo
}

// AddEmployeeGroupGroupId adds i to the "EmployeeGroup_groupId" field.
func (ecuo *EmployeeCadreUpdateOne) AddEmployeeGroupGroupId(i int32) *EmployeeCadreUpdateOne {
	ecuo.mutation.AddEmployeeGroupGroupId(i)
	return ecuo
}

// ClearEmployeeGroupGroupId clears the value of the "EmployeeGroup_groupId" field.
func (ecuo *EmployeeCadreUpdateOne) ClearEmployeeGroupGroupId() *EmployeeCadreUpdateOne {
	ecuo.mutation.ClearEmployeeGroupGroupId()
	return ecuo
}

// SetGroupDescription sets the "GroupDescription" field.
func (ecuo *EmployeeCadreUpdateOne) SetGroupDescription(s string) *EmployeeCadreUpdateOne {
	ecuo.mutation.SetGroupDescription(s)
	return ecuo
}

// SetNillableGroupDescription sets the "GroupDescription" field if the given value is not nil.
func (ecuo *EmployeeCadreUpdateOne) SetNillableGroupDescription(s *string) *EmployeeCadreUpdateOne {
	if s != nil {
		ecuo.SetGroupDescription(*s)
	}
	return ecuo
}

// ClearGroupDescription clears the value of the "GroupDescription" field.
func (ecuo *EmployeeCadreUpdateOne) ClearGroupDescription() *EmployeeCadreUpdateOne {
	ecuo.mutation.ClearGroupDescription()
	return ecuo
}

// SetPostCode sets the "PostCode" field.
func (ecuo *EmployeeCadreUpdateOne) SetPostCode(s string) *EmployeeCadreUpdateOne {
	ecuo.mutation.SetPostCode(s)
	return ecuo
}

// SetNillablePostCode sets the "PostCode" field if the given value is not nil.
func (ecuo *EmployeeCadreUpdateOne) SetNillablePostCode(s *string) *EmployeeCadreUpdateOne {
	if s != nil {
		ecuo.SetPostCode(*s)
	}
	return ecuo
}

// ClearPostCode clears the value of the "PostCode" field.
func (ecuo *EmployeeCadreUpdateOne) ClearPostCode() *EmployeeCadreUpdateOne {
	ecuo.mutation.ClearPostCode()
	return ecuo
}

// SetPostDescription sets the "PostDescription" field.
func (ecuo *EmployeeCadreUpdateOne) SetPostDescription(s string) *EmployeeCadreUpdateOne {
	ecuo.mutation.SetPostDescription(s)
	return ecuo
}

// SetNillablePostDescription sets the "PostDescription" field if the given value is not nil.
func (ecuo *EmployeeCadreUpdateOne) SetNillablePostDescription(s *string) *EmployeeCadreUpdateOne {
	if s != nil {
		ecuo.SetPostDescription(*s)
	}
	return ecuo
}

// ClearPostDescription clears the value of the "PostDescription" field.
func (ecuo *EmployeeCadreUpdateOne) ClearPostDescription() *EmployeeCadreUpdateOne {
	ecuo.mutation.ClearPostDescription()
	return ecuo
}

// SetBaseCadre sets the "BaseCadre" field.
func (ecuo *EmployeeCadreUpdateOne) SetBaseCadre(i int32) *EmployeeCadreUpdateOne {
	ecuo.mutation.ResetBaseCadre()
	ecuo.mutation.SetBaseCadre(i)
	return ecuo
}

// SetNillableBaseCadre sets the "BaseCadre" field if the given value is not nil.
func (ecuo *EmployeeCadreUpdateOne) SetNillableBaseCadre(i *int32) *EmployeeCadreUpdateOne {
	if i != nil {
		ecuo.SetBaseCadre(*i)
	}
	return ecuo
}

// AddBaseCadre adds i to the "BaseCadre" field.
func (ecuo *EmployeeCadreUpdateOne) AddBaseCadre(i int32) *EmployeeCadreUpdateOne {
	ecuo.mutation.AddBaseCadre(i)
	return ecuo
}

// ClearBaseCadre clears the value of the "BaseCadre" field.
func (ecuo *EmployeeCadreUpdateOne) ClearBaseCadre() *EmployeeCadreUpdateOne {
	ecuo.mutation.ClearBaseCadre()
	return ecuo
}

// SetGdsService sets the "GdsService" field.
func (ecuo *EmployeeCadreUpdateOne) SetGdsService(i int32) *EmployeeCadreUpdateOne {
	ecuo.mutation.ResetGdsService()
	ecuo.mutation.SetGdsService(i)
	return ecuo
}

// SetNillableGdsService sets the "GdsService" field if the given value is not nil.
func (ecuo *EmployeeCadreUpdateOne) SetNillableGdsService(i *int32) *EmployeeCadreUpdateOne {
	if i != nil {
		ecuo.SetGdsService(*i)
	}
	return ecuo
}

// AddGdsService adds i to the "GdsService" field.
func (ecuo *EmployeeCadreUpdateOne) AddGdsService(i int32) *EmployeeCadreUpdateOne {
	ecuo.mutation.AddGdsService(i)
	return ecuo
}

// ClearGdsService clears the value of the "GdsService" field.
func (ecuo *EmployeeCadreUpdateOne) ClearGdsService() *EmployeeCadreUpdateOne {
	ecuo.mutation.ClearGdsService()
	return ecuo
}

// SetAgeCriteria sets the "ageCriteria" field.
func (ecuo *EmployeeCadreUpdateOne) SetAgeCriteria(i int32) *EmployeeCadreUpdateOne {
	ecuo.mutation.ResetAgeCriteria()
	ecuo.mutation.SetAgeCriteria(i)
	return ecuo
}

// SetNillableAgeCriteria sets the "ageCriteria" field if the given value is not nil.
func (ecuo *EmployeeCadreUpdateOne) SetNillableAgeCriteria(i *int32) *EmployeeCadreUpdateOne {
	if i != nil {
		ecuo.SetAgeCriteria(*i)
	}
	return ecuo
}

// AddAgeCriteria adds i to the "ageCriteria" field.
func (ecuo *EmployeeCadreUpdateOne) AddAgeCriteria(i int32) *EmployeeCadreUpdateOne {
	ecuo.mutation.AddAgeCriteria(i)
	return ecuo
}

// ClearAgeCriteria clears the value of the "ageCriteria" field.
func (ecuo *EmployeeCadreUpdateOne) ClearAgeCriteria() *EmployeeCadreUpdateOne {
	ecuo.mutation.ClearAgeCriteria()
	return ecuo
}

// SetServiceCriteria sets the "ServiceCriteria" field.
func (ecuo *EmployeeCadreUpdateOne) SetServiceCriteria(i int32) *EmployeeCadreUpdateOne {
	ecuo.mutation.ResetServiceCriteria()
	ecuo.mutation.SetServiceCriteria(i)
	return ecuo
}

// SetNillableServiceCriteria sets the "ServiceCriteria" field if the given value is not nil.
func (ecuo *EmployeeCadreUpdateOne) SetNillableServiceCriteria(i *int32) *EmployeeCadreUpdateOne {
	if i != nil {
		ecuo.SetServiceCriteria(*i)
	}
	return ecuo
}

// AddServiceCriteria adds i to the "ServiceCriteria" field.
func (ecuo *EmployeeCadreUpdateOne) AddServiceCriteria(i int32) *EmployeeCadreUpdateOne {
	ecuo.mutation.AddServiceCriteria(i)
	return ecuo
}

// ClearServiceCriteria clears the value of the "ServiceCriteria" field.
func (ecuo *EmployeeCadreUpdateOne) ClearServiceCriteria() *EmployeeCadreUpdateOne {
	ecuo.mutation.ClearServiceCriteria()
	return ecuo
}

// SetDrivingLicenceCriteria sets the "DrivingLicenceCriteria" field.
func (ecuo *EmployeeCadreUpdateOne) SetDrivingLicenceCriteria(i int32) *EmployeeCadreUpdateOne {
	ecuo.mutation.ResetDrivingLicenceCriteria()
	ecuo.mutation.SetDrivingLicenceCriteria(i)
	return ecuo
}

// SetNillableDrivingLicenceCriteria sets the "DrivingLicenceCriteria" field if the given value is not nil.
func (ecuo *EmployeeCadreUpdateOne) SetNillableDrivingLicenceCriteria(i *int32) *EmployeeCadreUpdateOne {
	if i != nil {
		ecuo.SetDrivingLicenceCriteria(*i)
	}
	return ecuo
}

// AddDrivingLicenceCriteria adds i to the "DrivingLicenceCriteria" field.
func (ecuo *EmployeeCadreUpdateOne) AddDrivingLicenceCriteria(i int32) *EmployeeCadreUpdateOne {
	ecuo.mutation.AddDrivingLicenceCriteria(i)
	return ecuo
}

// ClearDrivingLicenceCriteria clears the value of the "DrivingLicenceCriteria" field.
func (ecuo *EmployeeCadreUpdateOne) ClearDrivingLicenceCriteria() *EmployeeCadreUpdateOne {
	ecuo.mutation.ClearDrivingLicenceCriteria()
	return ecuo
}

// SetComputerKnowledge sets the "ComputerKnowledge" field.
func (ecuo *EmployeeCadreUpdateOne) SetComputerKnowledge(i int32) *EmployeeCadreUpdateOne {
	ecuo.mutation.ResetComputerKnowledge()
	ecuo.mutation.SetComputerKnowledge(i)
	return ecuo
}

// SetNillableComputerKnowledge sets the "ComputerKnowledge" field if the given value is not nil.
func (ecuo *EmployeeCadreUpdateOne) SetNillableComputerKnowledge(i *int32) *EmployeeCadreUpdateOne {
	if i != nil {
		ecuo.SetComputerKnowledge(*i)
	}
	return ecuo
}

// AddComputerKnowledge adds i to the "ComputerKnowledge" field.
func (ecuo *EmployeeCadreUpdateOne) AddComputerKnowledge(i int32) *EmployeeCadreUpdateOne {
	ecuo.mutation.AddComputerKnowledge(i)
	return ecuo
}

// ClearComputerKnowledge clears the value of the "ComputerKnowledge" field.
func (ecuo *EmployeeCadreUpdateOne) ClearComputerKnowledge() *EmployeeCadreUpdateOne {
	ecuo.mutation.ClearComputerKnowledge()
	return ecuo
}

// SetEligibiltyBasedOnLevelOfPaymatrix sets the "EligibiltyBasedOnLevelOfPaymatrix" field.
func (ecuo *EmployeeCadreUpdateOne) SetEligibiltyBasedOnLevelOfPaymatrix(i int32) *EmployeeCadreUpdateOne {
	ecuo.mutation.ResetEligibiltyBasedOnLevelOfPaymatrix()
	ecuo.mutation.SetEligibiltyBasedOnLevelOfPaymatrix(i)
	return ecuo
}

// SetNillableEligibiltyBasedOnLevelOfPaymatrix sets the "EligibiltyBasedOnLevelOfPaymatrix" field if the given value is not nil.
func (ecuo *EmployeeCadreUpdateOne) SetNillableEligibiltyBasedOnLevelOfPaymatrix(i *int32) *EmployeeCadreUpdateOne {
	if i != nil {
		ecuo.SetEligibiltyBasedOnLevelOfPaymatrix(*i)
	}
	return ecuo
}

// AddEligibiltyBasedOnLevelOfPaymatrix adds i to the "EligibiltyBasedOnLevelOfPaymatrix" field.
func (ecuo *EmployeeCadreUpdateOne) AddEligibiltyBasedOnLevelOfPaymatrix(i int32) *EmployeeCadreUpdateOne {
	ecuo.mutation.AddEligibiltyBasedOnLevelOfPaymatrix(i)
	return ecuo
}

// ClearEligibiltyBasedOnLevelOfPaymatrix clears the value of the "EligibiltyBasedOnLevelOfPaymatrix" field.
func (ecuo *EmployeeCadreUpdateOne) ClearEligibiltyBasedOnLevelOfPaymatrix() *EmployeeCadreUpdateOne {
	ecuo.mutation.ClearEligibiltyBasedOnLevelOfPaymatrix()
	return ecuo
}

// SetEducationDetailsEducationCode sets the "EducationDetails_educationCode" field.
func (ecuo *EmployeeCadreUpdateOne) SetEducationDetailsEducationCode(i int32) *EmployeeCadreUpdateOne {
	ecuo.mutation.ResetEducationDetailsEducationCode()
	ecuo.mutation.SetEducationDetailsEducationCode(i)
	return ecuo
}

// SetNillableEducationDetailsEducationCode sets the "EducationDetails_educationCode" field if the given value is not nil.
func (ecuo *EmployeeCadreUpdateOne) SetNillableEducationDetailsEducationCode(i *int32) *EmployeeCadreUpdateOne {
	if i != nil {
		ecuo.SetEducationDetailsEducationCode(*i)
	}
	return ecuo
}

// AddEducationDetailsEducationCode adds i to the "EducationDetails_educationCode" field.
func (ecuo *EmployeeCadreUpdateOne) AddEducationDetailsEducationCode(i int32) *EmployeeCadreUpdateOne {
	ecuo.mutation.AddEducationDetailsEducationCode(i)
	return ecuo
}

// ClearEducationDetailsEducationCode clears the value of the "EducationDetails_educationCode" field.
func (ecuo *EmployeeCadreUpdateOne) ClearEducationDetailsEducationCode() *EmployeeCadreUpdateOne {
	ecuo.mutation.ClearEducationDetailsEducationCode()
	return ecuo
}

// SetEducationDescription sets the "EducationDescription" field.
func (ecuo *EmployeeCadreUpdateOne) SetEducationDescription(s string) *EmployeeCadreUpdateOne {
	ecuo.mutation.SetEducationDescription(s)
	return ecuo
}

// SetNillableEducationDescription sets the "EducationDescription" field if the given value is not nil.
func (ecuo *EmployeeCadreUpdateOne) SetNillableEducationDescription(s *string) *EmployeeCadreUpdateOne {
	if s != nil {
		ecuo.SetEducationDescription(*s)
	}
	return ecuo
}

// ClearEducationDescription clears the value of the "EducationDescription" field.
func (ecuo *EmployeeCadreUpdateOne) ClearEducationDescription() *EmployeeCadreUpdateOne {
	ecuo.mutation.ClearEducationDescription()
	return ecuo
}

// SetOrderNumber sets the "OrderNumber" field.
func (ecuo *EmployeeCadreUpdateOne) SetOrderNumber(s string) *EmployeeCadreUpdateOne {
	ecuo.mutation.SetOrderNumber(s)
	return ecuo
}

// SetNillableOrderNumber sets the "OrderNumber" field if the given value is not nil.
func (ecuo *EmployeeCadreUpdateOne) SetNillableOrderNumber(s *string) *EmployeeCadreUpdateOne {
	if s != nil {
		ecuo.SetOrderNumber(*s)
	}
	return ecuo
}

// ClearOrderNumber clears the value of the "OrderNumber" field.
func (ecuo *EmployeeCadreUpdateOne) ClearOrderNumber() *EmployeeCadreUpdateOne {
	ecuo.mutation.ClearOrderNumber()
	return ecuo
}

// SetStatus sets the "Status" field.
func (ecuo *EmployeeCadreUpdateOne) SetStatus(s string) *EmployeeCadreUpdateOne {
	ecuo.mutation.SetStatus(s)
	return ecuo
}

// SetNillableStatus sets the "Status" field if the given value is not nil.
func (ecuo *EmployeeCadreUpdateOne) SetNillableStatus(s *string) *EmployeeCadreUpdateOne {
	if s != nil {
		ecuo.SetStatus(*s)
	}
	return ecuo
}

// ClearStatus clears the value of the "Status" field.
func (ecuo *EmployeeCadreUpdateOne) ClearStatus() *EmployeeCadreUpdateOne {
	ecuo.mutation.ClearStatus()
	return ecuo
}

// SetCreatedById sets the "CreatedById" field.
func (ecuo *EmployeeCadreUpdateOne) SetCreatedById(i int32) *EmployeeCadreUpdateOne {
	ecuo.mutation.ResetCreatedById()
	ecuo.mutation.SetCreatedById(i)
	return ecuo
}

// SetNillableCreatedById sets the "CreatedById" field if the given value is not nil.
func (ecuo *EmployeeCadreUpdateOne) SetNillableCreatedById(i *int32) *EmployeeCadreUpdateOne {
	if i != nil {
		ecuo.SetCreatedById(*i)
	}
	return ecuo
}

// AddCreatedById adds i to the "CreatedById" field.
func (ecuo *EmployeeCadreUpdateOne) AddCreatedById(i int32) *EmployeeCadreUpdateOne {
	ecuo.mutation.AddCreatedById(i)
	return ecuo
}

// ClearCreatedById clears the value of the "CreatedById" field.
func (ecuo *EmployeeCadreUpdateOne) ClearCreatedById() *EmployeeCadreUpdateOne {
	ecuo.mutation.ClearCreatedById()
	return ecuo
}

// SetCreatedByUserName sets the "CreatedByUserName" field.
func (ecuo *EmployeeCadreUpdateOne) SetCreatedByUserName(s string) *EmployeeCadreUpdateOne {
	ecuo.mutation.SetCreatedByUserName(s)
	return ecuo
}

// SetNillableCreatedByUserName sets the "CreatedByUserName" field if the given value is not nil.
func (ecuo *EmployeeCadreUpdateOne) SetNillableCreatedByUserName(s *string) *EmployeeCadreUpdateOne {
	if s != nil {
		ecuo.SetCreatedByUserName(*s)
	}
	return ecuo
}

// ClearCreatedByUserName clears the value of the "CreatedByUserName" field.
func (ecuo *EmployeeCadreUpdateOne) ClearCreatedByUserName() *EmployeeCadreUpdateOne {
	ecuo.mutation.ClearCreatedByUserName()
	return ecuo
}

// SetCreatedByEmployeeId sets the "CreatedByEmployeeId" field.
func (ecuo *EmployeeCadreUpdateOne) SetCreatedByEmployeeId(s string) *EmployeeCadreUpdateOne {
	ecuo.mutation.SetCreatedByEmployeeId(s)
	return ecuo
}

// SetNillableCreatedByEmployeeId sets the "CreatedByEmployeeId" field if the given value is not nil.
func (ecuo *EmployeeCadreUpdateOne) SetNillableCreatedByEmployeeId(s *string) *EmployeeCadreUpdateOne {
	if s != nil {
		ecuo.SetCreatedByEmployeeId(*s)
	}
	return ecuo
}

// ClearCreatedByEmployeeId clears the value of the "CreatedByEmployeeId" field.
func (ecuo *EmployeeCadreUpdateOne) ClearCreatedByEmployeeId() *EmployeeCadreUpdateOne {
	ecuo.mutation.ClearCreatedByEmployeeId()
	return ecuo
}

// SetCreatedByDesignation sets the "CreatedByDesignation" field.
func (ecuo *EmployeeCadreUpdateOne) SetCreatedByDesignation(s string) *EmployeeCadreUpdateOne {
	ecuo.mutation.SetCreatedByDesignation(s)
	return ecuo
}

// SetNillableCreatedByDesignation sets the "CreatedByDesignation" field if the given value is not nil.
func (ecuo *EmployeeCadreUpdateOne) SetNillableCreatedByDesignation(s *string) *EmployeeCadreUpdateOne {
	if s != nil {
		ecuo.SetCreatedByDesignation(*s)
	}
	return ecuo
}

// ClearCreatedByDesignation clears the value of the "CreatedByDesignation" field.
func (ecuo *EmployeeCadreUpdateOne) ClearCreatedByDesignation() *EmployeeCadreUpdateOne {
	ecuo.mutation.ClearCreatedByDesignation()
	return ecuo
}

// SetCreatedDate sets the "CreatedDate" field.
func (ecuo *EmployeeCadreUpdateOne) SetCreatedDate(t time.Time) *EmployeeCadreUpdateOne {
	ecuo.mutation.SetCreatedDate(t)
	return ecuo
}

// SetNillableCreatedDate sets the "CreatedDate" field if the given value is not nil.
func (ecuo *EmployeeCadreUpdateOne) SetNillableCreatedDate(t *time.Time) *EmployeeCadreUpdateOne {
	if t != nil {
		ecuo.SetCreatedDate(*t)
	}
	return ecuo
}

// ClearCreatedDate clears the value of the "CreatedDate" field.
func (ecuo *EmployeeCadreUpdateOne) ClearCreatedDate() *EmployeeCadreUpdateOne {
	ecuo.mutation.ClearCreatedDate()
	return ecuo
}

// SetVerifiedById sets the "VerifiedById" field.
func (ecuo *EmployeeCadreUpdateOne) SetVerifiedById(i int64) *EmployeeCadreUpdateOne {
	ecuo.mutation.ResetVerifiedById()
	ecuo.mutation.SetVerifiedById(i)
	return ecuo
}

// SetNillableVerifiedById sets the "VerifiedById" field if the given value is not nil.
func (ecuo *EmployeeCadreUpdateOne) SetNillableVerifiedById(i *int64) *EmployeeCadreUpdateOne {
	if i != nil {
		ecuo.SetVerifiedById(*i)
	}
	return ecuo
}

// AddVerifiedById adds i to the "VerifiedById" field.
func (ecuo *EmployeeCadreUpdateOne) AddVerifiedById(i int64) *EmployeeCadreUpdateOne {
	ecuo.mutation.AddVerifiedById(i)
	return ecuo
}

// ClearVerifiedById clears the value of the "VerifiedById" field.
func (ecuo *EmployeeCadreUpdateOne) ClearVerifiedById() *EmployeeCadreUpdateOne {
	ecuo.mutation.ClearVerifiedById()
	return ecuo
}

// SetVerifiedByUserName sets the "VerifiedByUserName" field.
func (ecuo *EmployeeCadreUpdateOne) SetVerifiedByUserName(s string) *EmployeeCadreUpdateOne {
	ecuo.mutation.SetVerifiedByUserName(s)
	return ecuo
}

// SetNillableVerifiedByUserName sets the "VerifiedByUserName" field if the given value is not nil.
func (ecuo *EmployeeCadreUpdateOne) SetNillableVerifiedByUserName(s *string) *EmployeeCadreUpdateOne {
	if s != nil {
		ecuo.SetVerifiedByUserName(*s)
	}
	return ecuo
}

// ClearVerifiedByUserName clears the value of the "VerifiedByUserName" field.
func (ecuo *EmployeeCadreUpdateOne) ClearVerifiedByUserName() *EmployeeCadreUpdateOne {
	ecuo.mutation.ClearVerifiedByUserName()
	return ecuo
}

// SetVerifiedByEmployeeId sets the "VerifiedByEmployeeId" field.
func (ecuo *EmployeeCadreUpdateOne) SetVerifiedByEmployeeId(s string) *EmployeeCadreUpdateOne {
	ecuo.mutation.SetVerifiedByEmployeeId(s)
	return ecuo
}

// SetNillableVerifiedByEmployeeId sets the "VerifiedByEmployeeId" field if the given value is not nil.
func (ecuo *EmployeeCadreUpdateOne) SetNillableVerifiedByEmployeeId(s *string) *EmployeeCadreUpdateOne {
	if s != nil {
		ecuo.SetVerifiedByEmployeeId(*s)
	}
	return ecuo
}

// ClearVerifiedByEmployeeId clears the value of the "VerifiedByEmployeeId" field.
func (ecuo *EmployeeCadreUpdateOne) ClearVerifiedByEmployeeId() *EmployeeCadreUpdateOne {
	ecuo.mutation.ClearVerifiedByEmployeeId()
	return ecuo
}

// SetVerifiedByDesignation sets the "VerifiedByDesignation" field.
func (ecuo *EmployeeCadreUpdateOne) SetVerifiedByDesignation(s string) *EmployeeCadreUpdateOne {
	ecuo.mutation.SetVerifiedByDesignation(s)
	return ecuo
}

// SetNillableVerifiedByDesignation sets the "VerifiedByDesignation" field if the given value is not nil.
func (ecuo *EmployeeCadreUpdateOne) SetNillableVerifiedByDesignation(s *string) *EmployeeCadreUpdateOne {
	if s != nil {
		ecuo.SetVerifiedByDesignation(*s)
	}
	return ecuo
}

// ClearVerifiedByDesignation clears the value of the "VerifiedByDesignation" field.
func (ecuo *EmployeeCadreUpdateOne) ClearVerifiedByDesignation() *EmployeeCadreUpdateOne {
	ecuo.mutation.ClearVerifiedByDesignation()
	return ecuo
}

// SetVerifiedDate sets the "VerifiedDate" field.
func (ecuo *EmployeeCadreUpdateOne) SetVerifiedDate(t time.Time) *EmployeeCadreUpdateOne {
	ecuo.mutation.SetVerifiedDate(t)
	return ecuo
}

// SetNillableVerifiedDate sets the "VerifiedDate" field if the given value is not nil.
func (ecuo *EmployeeCadreUpdateOne) SetNillableVerifiedDate(t *time.Time) *EmployeeCadreUpdateOne {
	if t != nil {
		ecuo.SetVerifiedDate(*t)
	}
	return ecuo
}

// ClearVerifiedDate clears the value of the "VerifiedDate" field.
func (ecuo *EmployeeCadreUpdateOne) ClearVerifiedDate() *EmployeeCadreUpdateOne {
	ecuo.mutation.ClearVerifiedDate()
	return ecuo
}

// SetDeletedById sets the "DeletedById" field.
func (ecuo *EmployeeCadreUpdateOne) SetDeletedById(i int64) *EmployeeCadreUpdateOne {
	ecuo.mutation.ResetDeletedById()
	ecuo.mutation.SetDeletedById(i)
	return ecuo
}

// SetNillableDeletedById sets the "DeletedById" field if the given value is not nil.
func (ecuo *EmployeeCadreUpdateOne) SetNillableDeletedById(i *int64) *EmployeeCadreUpdateOne {
	if i != nil {
		ecuo.SetDeletedById(*i)
	}
	return ecuo
}

// AddDeletedById adds i to the "DeletedById" field.
func (ecuo *EmployeeCadreUpdateOne) AddDeletedById(i int64) *EmployeeCadreUpdateOne {
	ecuo.mutation.AddDeletedById(i)
	return ecuo
}

// ClearDeletedById clears the value of the "DeletedById" field.
func (ecuo *EmployeeCadreUpdateOne) ClearDeletedById() *EmployeeCadreUpdateOne {
	ecuo.mutation.ClearDeletedById()
	return ecuo
}

// SetDeletedByUserName sets the "DeletedByUserName" field.
func (ecuo *EmployeeCadreUpdateOne) SetDeletedByUserName(s string) *EmployeeCadreUpdateOne {
	ecuo.mutation.SetDeletedByUserName(s)
	return ecuo
}

// SetNillableDeletedByUserName sets the "DeletedByUserName" field if the given value is not nil.
func (ecuo *EmployeeCadreUpdateOne) SetNillableDeletedByUserName(s *string) *EmployeeCadreUpdateOne {
	if s != nil {
		ecuo.SetDeletedByUserName(*s)
	}
	return ecuo
}

// ClearDeletedByUserName clears the value of the "DeletedByUserName" field.
func (ecuo *EmployeeCadreUpdateOne) ClearDeletedByUserName() *EmployeeCadreUpdateOne {
	ecuo.mutation.ClearDeletedByUserName()
	return ecuo
}

// SetDeletedByEmployeeId sets the "DeletedByEmployeeId" field.
func (ecuo *EmployeeCadreUpdateOne) SetDeletedByEmployeeId(s string) *EmployeeCadreUpdateOne {
	ecuo.mutation.SetDeletedByEmployeeId(s)
	return ecuo
}

// SetNillableDeletedByEmployeeId sets the "DeletedByEmployeeId" field if the given value is not nil.
func (ecuo *EmployeeCadreUpdateOne) SetNillableDeletedByEmployeeId(s *string) *EmployeeCadreUpdateOne {
	if s != nil {
		ecuo.SetDeletedByEmployeeId(*s)
	}
	return ecuo
}

// ClearDeletedByEmployeeId clears the value of the "DeletedByEmployeeId" field.
func (ecuo *EmployeeCadreUpdateOne) ClearDeletedByEmployeeId() *EmployeeCadreUpdateOne {
	ecuo.mutation.ClearDeletedByEmployeeId()
	return ecuo
}

// SetDeletedByDesignation sets the "DeletedByDesignation" field.
func (ecuo *EmployeeCadreUpdateOne) SetDeletedByDesignation(s string) *EmployeeCadreUpdateOne {
	ecuo.mutation.SetDeletedByDesignation(s)
	return ecuo
}

// SetNillableDeletedByDesignation sets the "DeletedByDesignation" field if the given value is not nil.
func (ecuo *EmployeeCadreUpdateOne) SetNillableDeletedByDesignation(s *string) *EmployeeCadreUpdateOne {
	if s != nil {
		ecuo.SetDeletedByDesignation(*s)
	}
	return ecuo
}

// ClearDeletedByDesignation clears the value of the "DeletedByDesignation" field.
func (ecuo *EmployeeCadreUpdateOne) ClearDeletedByDesignation() *EmployeeCadreUpdateOne {
	ecuo.mutation.ClearDeletedByDesignation()
	return ecuo
}

// SetDeletedDate sets the "DeletedDate" field.
func (ecuo *EmployeeCadreUpdateOne) SetDeletedDate(t time.Time) *EmployeeCadreUpdateOne {
	ecuo.mutation.SetDeletedDate(t)
	return ecuo
}

// SetNillableDeletedDate sets the "DeletedDate" field if the given value is not nil.
func (ecuo *EmployeeCadreUpdateOne) SetNillableDeletedDate(t *time.Time) *EmployeeCadreUpdateOne {
	if t != nil {
		ecuo.SetDeletedDate(*t)
	}
	return ecuo
}

// ClearDeletedDate clears the value of the "DeletedDate" field.
func (ecuo *EmployeeCadreUpdateOne) ClearDeletedDate() *EmployeeCadreUpdateOne {
	ecuo.mutation.ClearDeletedDate()
	return ecuo
}

// Mutation returns the EmployeeCadreMutation object of the builder.
func (ecuo *EmployeeCadreUpdateOne) Mutation() *EmployeeCadreMutation {
	return ecuo.mutation
}

// Where appends a list predicates to the EmployeeCadreUpdate builder.
func (ecuo *EmployeeCadreUpdateOne) Where(ps ...predicate.EmployeeCadre) *EmployeeCadreUpdateOne {
	ecuo.mutation.Where(ps...)
	return ecuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ecuo *EmployeeCadreUpdateOne) Select(field string, fields ...string) *EmployeeCadreUpdateOne {
	ecuo.fields = append([]string{field}, fields...)
	return ecuo
}

// Save executes the query and returns the updated EmployeeCadre entity.
func (ecuo *EmployeeCadreUpdateOne) Save(ctx context.Context) (*EmployeeCadre, error) {
	return withHooks(ctx, ecuo.sqlSave, ecuo.mutation, ecuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ecuo *EmployeeCadreUpdateOne) SaveX(ctx context.Context) *EmployeeCadre {
	node, err := ecuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ecuo *EmployeeCadreUpdateOne) Exec(ctx context.Context) error {
	_, err := ecuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ecuo *EmployeeCadreUpdateOne) ExecX(ctx context.Context) {
	if err := ecuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ecuo *EmployeeCadreUpdateOne) sqlSave(ctx context.Context) (_node *EmployeeCadre, err error) {
	_spec := sqlgraph.NewUpdateSpec(employeecadre.Table, employeecadre.Columns, sqlgraph.NewFieldSpec(employeecadre.FieldID, field.TypeInt32))
	id, ok := ecuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "EmployeeCadre.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ecuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, employeecadre.FieldID)
		for _, f := range fields {
			if !employeecadre.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != employeecadre.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ecuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ecuo.mutation.Cadrecode(); ok {
		_spec.SetField(employeecadre.FieldCadrecode, field.TypeString, value)
	}
	if value, ok := ecuo.mutation.Cadredescription(); ok {
		_spec.SetField(employeecadre.FieldCadredescription, field.TypeString, value)
	}
	if value, ok := ecuo.mutation.PayLevel(); ok {
		_spec.SetField(employeecadre.FieldPayLevel, field.TypeString, value)
	}
	if value, ok := ecuo.mutation.Scale(); ok {
		_spec.SetField(employeecadre.FieldScale, field.TypeString, value)
	}
	if value, ok := ecuo.mutation.ExamconfigurationExamcode(); ok {
		_spec.SetField(employeecadre.FieldExamconfigurationExamcode, field.TypeInt32, value)
	}
	if value, ok := ecuo.mutation.AddedExamconfigurationExamcode(); ok {
		_spec.AddField(employeecadre.FieldExamconfigurationExamcode, field.TypeInt32, value)
	}
	if ecuo.mutation.ExamconfigurationExamcodeCleared() {
		_spec.ClearField(employeecadre.FieldExamconfigurationExamcode, field.TypeInt32)
	}
	if value, ok := ecuo.mutation.ExamShortDescription(); ok {
		_spec.SetField(employeecadre.FieldExamShortDescription, field.TypeString, value)
	}
	if ecuo.mutation.ExamShortDescriptionCleared() {
		_spec.ClearField(employeecadre.FieldExamShortDescription, field.TypeString)
	}
	if value, ok := ecuo.mutation.ExamLongDescription(); ok {
		_spec.SetField(employeecadre.FieldExamLongDescription, field.TypeString, value)
	}
	if ecuo.mutation.ExamLongDescriptionCleared() {
		_spec.ClearField(employeecadre.FieldExamLongDescription, field.TypeString)
	}
	if value, ok := ecuo.mutation.EmployeePostPostId(); ok {
		_spec.SetField(employeecadre.FieldEmployeePostPostId, field.TypeInt32, value)
	}
	if value, ok := ecuo.mutation.AddedEmployeePostPostId(); ok {
		_spec.AddField(employeecadre.FieldEmployeePostPostId, field.TypeInt32, value)
	}
	if ecuo.mutation.EmployeePostPostIdCleared() {
		_spec.ClearField(employeecadre.FieldEmployeePostPostId, field.TypeInt32)
	}
	if value, ok := ecuo.mutation.EmployeeGroupGroupId(); ok {
		_spec.SetField(employeecadre.FieldEmployeeGroupGroupId, field.TypeInt32, value)
	}
	if value, ok := ecuo.mutation.AddedEmployeeGroupGroupId(); ok {
		_spec.AddField(employeecadre.FieldEmployeeGroupGroupId, field.TypeInt32, value)
	}
	if ecuo.mutation.EmployeeGroupGroupIdCleared() {
		_spec.ClearField(employeecadre.FieldEmployeeGroupGroupId, field.TypeInt32)
	}
	if value, ok := ecuo.mutation.GroupDescription(); ok {
		_spec.SetField(employeecadre.FieldGroupDescription, field.TypeString, value)
	}
	if ecuo.mutation.GroupDescriptionCleared() {
		_spec.ClearField(employeecadre.FieldGroupDescription, field.TypeString)
	}
	if value, ok := ecuo.mutation.PostCode(); ok {
		_spec.SetField(employeecadre.FieldPostCode, field.TypeString, value)
	}
	if ecuo.mutation.PostCodeCleared() {
		_spec.ClearField(employeecadre.FieldPostCode, field.TypeString)
	}
	if value, ok := ecuo.mutation.PostDescription(); ok {
		_spec.SetField(employeecadre.FieldPostDescription, field.TypeString, value)
	}
	if ecuo.mutation.PostDescriptionCleared() {
		_spec.ClearField(employeecadre.FieldPostDescription, field.TypeString)
	}
	if value, ok := ecuo.mutation.BaseCadre(); ok {
		_spec.SetField(employeecadre.FieldBaseCadre, field.TypeInt32, value)
	}
	if value, ok := ecuo.mutation.AddedBaseCadre(); ok {
		_spec.AddField(employeecadre.FieldBaseCadre, field.TypeInt32, value)
	}
	if ecuo.mutation.BaseCadreCleared() {
		_spec.ClearField(employeecadre.FieldBaseCadre, field.TypeInt32)
	}
	if value, ok := ecuo.mutation.GdsService(); ok {
		_spec.SetField(employeecadre.FieldGdsService, field.TypeInt32, value)
	}
	if value, ok := ecuo.mutation.AddedGdsService(); ok {
		_spec.AddField(employeecadre.FieldGdsService, field.TypeInt32, value)
	}
	if ecuo.mutation.GdsServiceCleared() {
		_spec.ClearField(employeecadre.FieldGdsService, field.TypeInt32)
	}
	if value, ok := ecuo.mutation.AgeCriteria(); ok {
		_spec.SetField(employeecadre.FieldAgeCriteria, field.TypeInt32, value)
	}
	if value, ok := ecuo.mutation.AddedAgeCriteria(); ok {
		_spec.AddField(employeecadre.FieldAgeCriteria, field.TypeInt32, value)
	}
	if ecuo.mutation.AgeCriteriaCleared() {
		_spec.ClearField(employeecadre.FieldAgeCriteria, field.TypeInt32)
	}
	if value, ok := ecuo.mutation.ServiceCriteria(); ok {
		_spec.SetField(employeecadre.FieldServiceCriteria, field.TypeInt32, value)
	}
	if value, ok := ecuo.mutation.AddedServiceCriteria(); ok {
		_spec.AddField(employeecadre.FieldServiceCriteria, field.TypeInt32, value)
	}
	if ecuo.mutation.ServiceCriteriaCleared() {
		_spec.ClearField(employeecadre.FieldServiceCriteria, field.TypeInt32)
	}
	if value, ok := ecuo.mutation.DrivingLicenceCriteria(); ok {
		_spec.SetField(employeecadre.FieldDrivingLicenceCriteria, field.TypeInt32, value)
	}
	if value, ok := ecuo.mutation.AddedDrivingLicenceCriteria(); ok {
		_spec.AddField(employeecadre.FieldDrivingLicenceCriteria, field.TypeInt32, value)
	}
	if ecuo.mutation.DrivingLicenceCriteriaCleared() {
		_spec.ClearField(employeecadre.FieldDrivingLicenceCriteria, field.TypeInt32)
	}
	if value, ok := ecuo.mutation.ComputerKnowledge(); ok {
		_spec.SetField(employeecadre.FieldComputerKnowledge, field.TypeInt32, value)
	}
	if value, ok := ecuo.mutation.AddedComputerKnowledge(); ok {
		_spec.AddField(employeecadre.FieldComputerKnowledge, field.TypeInt32, value)
	}
	if ecuo.mutation.ComputerKnowledgeCleared() {
		_spec.ClearField(employeecadre.FieldComputerKnowledge, field.TypeInt32)
	}
	if value, ok := ecuo.mutation.EligibiltyBasedOnLevelOfPaymatrix(); ok {
		_spec.SetField(employeecadre.FieldEligibiltyBasedOnLevelOfPaymatrix, field.TypeInt32, value)
	}
	if value, ok := ecuo.mutation.AddedEligibiltyBasedOnLevelOfPaymatrix(); ok {
		_spec.AddField(employeecadre.FieldEligibiltyBasedOnLevelOfPaymatrix, field.TypeInt32, value)
	}
	if ecuo.mutation.EligibiltyBasedOnLevelOfPaymatrixCleared() {
		_spec.ClearField(employeecadre.FieldEligibiltyBasedOnLevelOfPaymatrix, field.TypeInt32)
	}
	if value, ok := ecuo.mutation.EducationDetailsEducationCode(); ok {
		_spec.SetField(employeecadre.FieldEducationDetailsEducationCode, field.TypeInt32, value)
	}
	if value, ok := ecuo.mutation.AddedEducationDetailsEducationCode(); ok {
		_spec.AddField(employeecadre.FieldEducationDetailsEducationCode, field.TypeInt32, value)
	}
	if ecuo.mutation.EducationDetailsEducationCodeCleared() {
		_spec.ClearField(employeecadre.FieldEducationDetailsEducationCode, field.TypeInt32)
	}
	if value, ok := ecuo.mutation.EducationDescription(); ok {
		_spec.SetField(employeecadre.FieldEducationDescription, field.TypeString, value)
	}
	if ecuo.mutation.EducationDescriptionCleared() {
		_spec.ClearField(employeecadre.FieldEducationDescription, field.TypeString)
	}
	if value, ok := ecuo.mutation.OrderNumber(); ok {
		_spec.SetField(employeecadre.FieldOrderNumber, field.TypeString, value)
	}
	if ecuo.mutation.OrderNumberCleared() {
		_spec.ClearField(employeecadre.FieldOrderNumber, field.TypeString)
	}
	if value, ok := ecuo.mutation.Status(); ok {
		_spec.SetField(employeecadre.FieldStatus, field.TypeString, value)
	}
	if ecuo.mutation.StatusCleared() {
		_spec.ClearField(employeecadre.FieldStatus, field.TypeString)
	}
	if value, ok := ecuo.mutation.CreatedById(); ok {
		_spec.SetField(employeecadre.FieldCreatedById, field.TypeInt32, value)
	}
	if value, ok := ecuo.mutation.AddedCreatedById(); ok {
		_spec.AddField(employeecadre.FieldCreatedById, field.TypeInt32, value)
	}
	if ecuo.mutation.CreatedByIdCleared() {
		_spec.ClearField(employeecadre.FieldCreatedById, field.TypeInt32)
	}
	if value, ok := ecuo.mutation.CreatedByUserName(); ok {
		_spec.SetField(employeecadre.FieldCreatedByUserName, field.TypeString, value)
	}
	if ecuo.mutation.CreatedByUserNameCleared() {
		_spec.ClearField(employeecadre.FieldCreatedByUserName, field.TypeString)
	}
	if value, ok := ecuo.mutation.CreatedByEmployeeId(); ok {
		_spec.SetField(employeecadre.FieldCreatedByEmployeeId, field.TypeString, value)
	}
	if ecuo.mutation.CreatedByEmployeeIdCleared() {
		_spec.ClearField(employeecadre.FieldCreatedByEmployeeId, field.TypeString)
	}
	if value, ok := ecuo.mutation.CreatedByDesignation(); ok {
		_spec.SetField(employeecadre.FieldCreatedByDesignation, field.TypeString, value)
	}
	if ecuo.mutation.CreatedByDesignationCleared() {
		_spec.ClearField(employeecadre.FieldCreatedByDesignation, field.TypeString)
	}
	if value, ok := ecuo.mutation.CreatedDate(); ok {
		_spec.SetField(employeecadre.FieldCreatedDate, field.TypeTime, value)
	}
	if ecuo.mutation.CreatedDateCleared() {
		_spec.ClearField(employeecadre.FieldCreatedDate, field.TypeTime)
	}
	if value, ok := ecuo.mutation.VerifiedById(); ok {
		_spec.SetField(employeecadre.FieldVerifiedById, field.TypeInt64, value)
	}
	if value, ok := ecuo.mutation.AddedVerifiedById(); ok {
		_spec.AddField(employeecadre.FieldVerifiedById, field.TypeInt64, value)
	}
	if ecuo.mutation.VerifiedByIdCleared() {
		_spec.ClearField(employeecadre.FieldVerifiedById, field.TypeInt64)
	}
	if value, ok := ecuo.mutation.VerifiedByUserName(); ok {
		_spec.SetField(employeecadre.FieldVerifiedByUserName, field.TypeString, value)
	}
	if ecuo.mutation.VerifiedByUserNameCleared() {
		_spec.ClearField(employeecadre.FieldVerifiedByUserName, field.TypeString)
	}
	if value, ok := ecuo.mutation.VerifiedByEmployeeId(); ok {
		_spec.SetField(employeecadre.FieldVerifiedByEmployeeId, field.TypeString, value)
	}
	if ecuo.mutation.VerifiedByEmployeeIdCleared() {
		_spec.ClearField(employeecadre.FieldVerifiedByEmployeeId, field.TypeString)
	}
	if value, ok := ecuo.mutation.VerifiedByDesignation(); ok {
		_spec.SetField(employeecadre.FieldVerifiedByDesignation, field.TypeString, value)
	}
	if ecuo.mutation.VerifiedByDesignationCleared() {
		_spec.ClearField(employeecadre.FieldVerifiedByDesignation, field.TypeString)
	}
	if value, ok := ecuo.mutation.VerifiedDate(); ok {
		_spec.SetField(employeecadre.FieldVerifiedDate, field.TypeTime, value)
	}
	if ecuo.mutation.VerifiedDateCleared() {
		_spec.ClearField(employeecadre.FieldVerifiedDate, field.TypeTime)
	}
	if value, ok := ecuo.mutation.DeletedById(); ok {
		_spec.SetField(employeecadre.FieldDeletedById, field.TypeInt64, value)
	}
	if value, ok := ecuo.mutation.AddedDeletedById(); ok {
		_spec.AddField(employeecadre.FieldDeletedById, field.TypeInt64, value)
	}
	if ecuo.mutation.DeletedByIdCleared() {
		_spec.ClearField(employeecadre.FieldDeletedById, field.TypeInt64)
	}
	if value, ok := ecuo.mutation.DeletedByUserName(); ok {
		_spec.SetField(employeecadre.FieldDeletedByUserName, field.TypeString, value)
	}
	if ecuo.mutation.DeletedByUserNameCleared() {
		_spec.ClearField(employeecadre.FieldDeletedByUserName, field.TypeString)
	}
	if value, ok := ecuo.mutation.DeletedByEmployeeId(); ok {
		_spec.SetField(employeecadre.FieldDeletedByEmployeeId, field.TypeString, value)
	}
	if ecuo.mutation.DeletedByEmployeeIdCleared() {
		_spec.ClearField(employeecadre.FieldDeletedByEmployeeId, field.TypeString)
	}
	if value, ok := ecuo.mutation.DeletedByDesignation(); ok {
		_spec.SetField(employeecadre.FieldDeletedByDesignation, field.TypeString, value)
	}
	if ecuo.mutation.DeletedByDesignationCleared() {
		_spec.ClearField(employeecadre.FieldDeletedByDesignation, field.TypeString)
	}
	if value, ok := ecuo.mutation.DeletedDate(); ok {
		_spec.SetField(employeecadre.FieldDeletedDate, field.TypeTime, value)
	}
	if ecuo.mutation.DeletedDateCleared() {
		_spec.ClearField(employeecadre.FieldDeletedDate, field.TypeTime)
	}
	_node = &EmployeeCadre{config: ecuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ecuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{employeecadre.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ecuo.mutation.done = true
	return _node, nil
}
