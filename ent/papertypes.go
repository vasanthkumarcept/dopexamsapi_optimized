// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"recruit/ent/exampapers"
	"recruit/ent/papertypes"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// PaperTypes is the model entity for the PaperTypes schema.
type PaperTypes struct {
	config `json:"-"`
	// ID of the ent.
	ID int32 `json:"id,omitempty"`
	// PaperTypeDescription holds the value of the "PaperTypeDescription" field.
	PaperTypeDescription string `json:"PaperTypeDescription,omitempty"`
	// SequenceNumber holds the value of the "SequenceNumber" field.
	SequenceNumber int32 `json:"SequenceNumber,omitempty"`
	// OrderNumber holds the value of the "OrderNumber" field.
	OrderNumber string `json:"OrderNumber,omitempty"`
	// CreatedById holds the value of the "CreatedById" field.
	CreatedById int64 `json:"CreatedById,omitempty"`
	// CreatedByUserName holds the value of the "CreatedByUserName" field.
	CreatedByUserName string `json:"CreatedByUserName,omitempty"`
	// CreatedByEmployeeId holds the value of the "CreatedByEmployeeId" field.
	CreatedByEmployeeId string `json:"CreatedByEmployeeId,omitempty"`
	// CreatedByDesignation holds the value of the "CreatedByDesignation" field.
	CreatedByDesignation string `json:"CreatedByDesignation,omitempty"`
	// CreatedDate holds the value of the "CreatedDate" field.
	CreatedDate time.Time `json:"CreatedDate,omitempty"`
	// VerifiedById holds the value of the "VerifiedById" field.
	VerifiedById int64 `json:"VerifiedById,omitempty"`
	// VerifiedByUserName holds the value of the "VerifiedByUserName" field.
	VerifiedByUserName string `json:"VerifiedByUserName,omitempty"`
	// VerifiedByEmployeeId holds the value of the "VerifiedByEmployeeId" field.
	VerifiedByEmployeeId string `json:"VerifiedByEmployeeId,omitempty"`
	// VerifiedByDesignation holds the value of the "VerifiedByDesignation" field.
	VerifiedByDesignation string `json:"VerifiedByDesignation,omitempty"`
	// VerifiedDate holds the value of the "VerifiedDate" field.
	VerifiedDate time.Time `json:"VerifiedDate,omitempty"`
	// Status holds the value of the "Status" field.
	Status string `json:"Status,omitempty"`
	// DeletedById holds the value of the "DeletedById" field.
	DeletedById int64 `json:"DeletedById,omitempty"`
	// DeletedByUserName holds the value of the "DeletedByUserName" field.
	DeletedByUserName string `json:"DeletedByUserName,omitempty"`
	// DeletedByEmployeeId holds the value of the "DeletedByEmployeeId" field.
	DeletedByEmployeeId string `json:"DeletedByEmployeeId,omitempty"`
	// DeletedByDesignation holds the value of the "DeletedByDesignation" field.
	DeletedByDesignation string `json:"DeletedByDesignation,omitempty"`
	// DeletedDate holds the value of the "DeletedDate" field.
	DeletedDate time.Time `json:"DeletedDate,omitempty"`
	// PaperCode holds the value of the "PaperCode" field.
	PaperCode int32 `json:"PaperCode,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PaperTypesQuery when eager-loading is set.
	Edges        PaperTypesEdges `json:"edges"`
	selectValues sql.SelectValues
}

// PaperTypesEdges holds the relations/edges for other nodes in the graph.
type PaperTypesEdges struct {
	// Papercode holds the value of the papercode edge.
	Papercode *ExamPapers `json:"papercode,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// PapercodeOrErr returns the Papercode value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PaperTypesEdges) PapercodeOrErr() (*ExamPapers, error) {
	if e.loadedTypes[0] {
		if e.Papercode == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: exampapers.Label}
		}
		return e.Papercode, nil
	}
	return nil, &NotLoadedError{edge: "papercode"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*PaperTypes) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case papertypes.FieldID, papertypes.FieldSequenceNumber, papertypes.FieldCreatedById, papertypes.FieldVerifiedById, papertypes.FieldDeletedById, papertypes.FieldPaperCode:
			values[i] = new(sql.NullInt64)
		case papertypes.FieldPaperTypeDescription, papertypes.FieldOrderNumber, papertypes.FieldCreatedByUserName, papertypes.FieldCreatedByEmployeeId, papertypes.FieldCreatedByDesignation, papertypes.FieldVerifiedByUserName, papertypes.FieldVerifiedByEmployeeId, papertypes.FieldVerifiedByDesignation, papertypes.FieldStatus, papertypes.FieldDeletedByUserName, papertypes.FieldDeletedByEmployeeId, papertypes.FieldDeletedByDesignation:
			values[i] = new(sql.NullString)
		case papertypes.FieldCreatedDate, papertypes.FieldVerifiedDate, papertypes.FieldDeletedDate:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the PaperTypes fields.
func (pt *PaperTypes) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case papertypes.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pt.ID = int32(value.Int64)
		case papertypes.FieldPaperTypeDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field PaperTypeDescription", values[i])
			} else if value.Valid {
				pt.PaperTypeDescription = value.String
			}
		case papertypes.FieldSequenceNumber:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field SequenceNumber", values[i])
			} else if value.Valid {
				pt.SequenceNumber = int32(value.Int64)
			}
		case papertypes.FieldOrderNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field OrderNumber", values[i])
			} else if value.Valid {
				pt.OrderNumber = value.String
			}
		case papertypes.FieldCreatedById:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field CreatedById", values[i])
			} else if value.Valid {
				pt.CreatedById = value.Int64
			}
		case papertypes.FieldCreatedByUserName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field CreatedByUserName", values[i])
			} else if value.Valid {
				pt.CreatedByUserName = value.String
			}
		case papertypes.FieldCreatedByEmployeeId:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field CreatedByEmployeeId", values[i])
			} else if value.Valid {
				pt.CreatedByEmployeeId = value.String
			}
		case papertypes.FieldCreatedByDesignation:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field CreatedByDesignation", values[i])
			} else if value.Valid {
				pt.CreatedByDesignation = value.String
			}
		case papertypes.FieldCreatedDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field CreatedDate", values[i])
			} else if value.Valid {
				pt.CreatedDate = value.Time
			}
		case papertypes.FieldVerifiedById:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field VerifiedById", values[i])
			} else if value.Valid {
				pt.VerifiedById = value.Int64
			}
		case papertypes.FieldVerifiedByUserName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field VerifiedByUserName", values[i])
			} else if value.Valid {
				pt.VerifiedByUserName = value.String
			}
		case papertypes.FieldVerifiedByEmployeeId:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field VerifiedByEmployeeId", values[i])
			} else if value.Valid {
				pt.VerifiedByEmployeeId = value.String
			}
		case papertypes.FieldVerifiedByDesignation:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field VerifiedByDesignation", values[i])
			} else if value.Valid {
				pt.VerifiedByDesignation = value.String
			}
		case papertypes.FieldVerifiedDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field VerifiedDate", values[i])
			} else if value.Valid {
				pt.VerifiedDate = value.Time
			}
		case papertypes.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Status", values[i])
			} else if value.Valid {
				pt.Status = value.String
			}
		case papertypes.FieldDeletedById:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field DeletedById", values[i])
			} else if value.Valid {
				pt.DeletedById = value.Int64
			}
		case papertypes.FieldDeletedByUserName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field DeletedByUserName", values[i])
			} else if value.Valid {
				pt.DeletedByUserName = value.String
			}
		case papertypes.FieldDeletedByEmployeeId:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field DeletedByEmployeeId", values[i])
			} else if value.Valid {
				pt.DeletedByEmployeeId = value.String
			}
		case papertypes.FieldDeletedByDesignation:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field DeletedByDesignation", values[i])
			} else if value.Valid {
				pt.DeletedByDesignation = value.String
			}
		case papertypes.FieldDeletedDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field DeletedDate", values[i])
			} else if value.Valid {
				pt.DeletedDate = value.Time
			}
		case papertypes.FieldPaperCode:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field PaperCode", values[i])
			} else if value.Valid {
				pt.PaperCode = int32(value.Int64)
			}
		default:
			pt.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the PaperTypes.
// This includes values selected through modifiers, order, etc.
func (pt *PaperTypes) Value(name string) (ent.Value, error) {
	return pt.selectValues.Get(name)
}

// QueryPapercode queries the "papercode" edge of the PaperTypes entity.
func (pt *PaperTypes) QueryPapercode() *ExamPapersQuery {
	return NewPaperTypesClient(pt.config).QueryPapercode(pt)
}

// Update returns a builder for updating this PaperTypes.
// Note that you need to call PaperTypes.Unwrap() before calling this method if this PaperTypes
// was returned from a transaction, and the transaction was committed or rolled back.
func (pt *PaperTypes) Update() *PaperTypesUpdateOne {
	return NewPaperTypesClient(pt.config).UpdateOne(pt)
}

// Unwrap unwraps the PaperTypes entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pt *PaperTypes) Unwrap() *PaperTypes {
	_tx, ok := pt.config.driver.(*txDriver)
	if !ok {
		panic("ent: PaperTypes is not a transactional entity")
	}
	pt.config.driver = _tx.drv
	return pt
}

// String implements the fmt.Stringer.
func (pt *PaperTypes) String() string {
	var builder strings.Builder
	builder.WriteString("PaperTypes(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pt.ID))
	builder.WriteString("PaperTypeDescription=")
	builder.WriteString(pt.PaperTypeDescription)
	builder.WriteString(", ")
	builder.WriteString("SequenceNumber=")
	builder.WriteString(fmt.Sprintf("%v", pt.SequenceNumber))
	builder.WriteString(", ")
	builder.WriteString("OrderNumber=")
	builder.WriteString(pt.OrderNumber)
	builder.WriteString(", ")
	builder.WriteString("CreatedById=")
	builder.WriteString(fmt.Sprintf("%v", pt.CreatedById))
	builder.WriteString(", ")
	builder.WriteString("CreatedByUserName=")
	builder.WriteString(pt.CreatedByUserName)
	builder.WriteString(", ")
	builder.WriteString("CreatedByEmployeeId=")
	builder.WriteString(pt.CreatedByEmployeeId)
	builder.WriteString(", ")
	builder.WriteString("CreatedByDesignation=")
	builder.WriteString(pt.CreatedByDesignation)
	builder.WriteString(", ")
	builder.WriteString("CreatedDate=")
	builder.WriteString(pt.CreatedDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("VerifiedById=")
	builder.WriteString(fmt.Sprintf("%v", pt.VerifiedById))
	builder.WriteString(", ")
	builder.WriteString("VerifiedByUserName=")
	builder.WriteString(pt.VerifiedByUserName)
	builder.WriteString(", ")
	builder.WriteString("VerifiedByEmployeeId=")
	builder.WriteString(pt.VerifiedByEmployeeId)
	builder.WriteString(", ")
	builder.WriteString("VerifiedByDesignation=")
	builder.WriteString(pt.VerifiedByDesignation)
	builder.WriteString(", ")
	builder.WriteString("VerifiedDate=")
	builder.WriteString(pt.VerifiedDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("Status=")
	builder.WriteString(pt.Status)
	builder.WriteString(", ")
	builder.WriteString("DeletedById=")
	builder.WriteString(fmt.Sprintf("%v", pt.DeletedById))
	builder.WriteString(", ")
	builder.WriteString("DeletedByUserName=")
	builder.WriteString(pt.DeletedByUserName)
	builder.WriteString(", ")
	builder.WriteString("DeletedByEmployeeId=")
	builder.WriteString(pt.DeletedByEmployeeId)
	builder.WriteString(", ")
	builder.WriteString("DeletedByDesignation=")
	builder.WriteString(pt.DeletedByDesignation)
	builder.WriteString(", ")
	builder.WriteString("DeletedDate=")
	builder.WriteString(pt.DeletedDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("PaperCode=")
	builder.WriteString(fmt.Sprintf("%v", pt.PaperCode))
	builder.WriteByte(')')
	return builder.String()
}

// PaperTypesSlice is a parsable slice of PaperTypes.
type PaperTypesSlice []*PaperTypes
