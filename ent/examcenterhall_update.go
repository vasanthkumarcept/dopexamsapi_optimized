// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"recruit/ent/center"
	"recruit/ent/examcenterhall"
	"recruit/ent/predicate"
	"recruit/ent/schema"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
)

// ExamCenterHallUpdate is the builder for updating ExamCenterHall entities.
type ExamCenterHallUpdate struct {
	config
	hooks    []Hook
	mutation *ExamCenterHallMutation
}

// Where appends a list predicates to the ExamCenterHallUpdate builder.
func (echu *ExamCenterHallUpdate) Where(ps ...predicate.ExamCenterHall) *ExamCenterHallUpdate {
	echu.mutation.Where(ps...)
	return echu
}

// SetCenterCode sets the "CenterCode" field.
func (echu *ExamCenterHallUpdate) SetCenterCode(i int32) *ExamCenterHallUpdate {
	echu.mutation.SetCenterCode(i)
	return echu
}

// SetNillableCenterCode sets the "CenterCode" field if the given value is not nil.
func (echu *ExamCenterHallUpdate) SetNillableCenterCode(i *int32) *ExamCenterHallUpdate {
	if i != nil {
		echu.SetCenterCode(*i)
	}
	return echu
}

// ClearCenterCode clears the value of the "CenterCode" field.
func (echu *ExamCenterHallUpdate) ClearCenterCode() *ExamCenterHallUpdate {
	echu.mutation.ClearCenterCode()
	return echu
}

// SetCityID sets the "CityID" field.
func (echu *ExamCenterHallUpdate) SetCityID(i int32) *ExamCenterHallUpdate {
	echu.mutation.ResetCityID()
	echu.mutation.SetCityID(i)
	return echu
}

// SetNillableCityID sets the "CityID" field if the given value is not nil.
func (echu *ExamCenterHallUpdate) SetNillableCityID(i *int32) *ExamCenterHallUpdate {
	if i != nil {
		echu.SetCityID(*i)
	}
	return echu
}

// AddCityID adds i to the "CityID" field.
func (echu *ExamCenterHallUpdate) AddCityID(i int32) *ExamCenterHallUpdate {
	echu.mutation.AddCityID(i)
	return echu
}

// ClearCityID clears the value of the "CityID" field.
func (echu *ExamCenterHallUpdate) ClearCityID() *ExamCenterHallUpdate {
	echu.mutation.ClearCityID()
	return echu
}

// SetExamCenterName sets the "ExamCenterName" field.
func (echu *ExamCenterHallUpdate) SetExamCenterName(s string) *ExamCenterHallUpdate {
	echu.mutation.SetExamCenterName(s)
	return echu
}

// SetNillableExamCenterName sets the "ExamCenterName" field if the given value is not nil.
func (echu *ExamCenterHallUpdate) SetNillableExamCenterName(s *string) *ExamCenterHallUpdate {
	if s != nil {
		echu.SetExamCenterName(*s)
	}
	return echu
}

// ClearExamCenterName clears the value of the "ExamCenterName" field.
func (echu *ExamCenterHallUpdate) ClearExamCenterName() *ExamCenterHallUpdate {
	echu.mutation.ClearExamCenterName()
	return echu
}

// SetExamYear sets the "ExamYear" field.
func (echu *ExamCenterHallUpdate) SetExamYear(s string) *ExamCenterHallUpdate {
	echu.mutation.SetExamYear(s)
	return echu
}

// SetNillableExamYear sets the "ExamYear" field if the given value is not nil.
func (echu *ExamCenterHallUpdate) SetNillableExamYear(s *string) *ExamCenterHallUpdate {
	if s != nil {
		echu.SetExamYear(*s)
	}
	return echu
}

// ClearExamYear clears the value of the "ExamYear" field.
func (echu *ExamCenterHallUpdate) ClearExamYear() *ExamCenterHallUpdate {
	echu.mutation.ClearExamYear()
	return echu
}

// SetExamCode sets the "ExamCode" field.
func (echu *ExamCenterHallUpdate) SetExamCode(i int32) *ExamCenterHallUpdate {
	echu.mutation.ResetExamCode()
	echu.mutation.SetExamCode(i)
	return echu
}

// SetNillableExamCode sets the "ExamCode" field if the given value is not nil.
func (echu *ExamCenterHallUpdate) SetNillableExamCode(i *int32) *ExamCenterHallUpdate {
	if i != nil {
		echu.SetExamCode(*i)
	}
	return echu
}

// AddExamCode adds i to the "ExamCode" field.
func (echu *ExamCenterHallUpdate) AddExamCode(i int32) *ExamCenterHallUpdate {
	echu.mutation.AddExamCode(i)
	return echu
}

// ClearExamCode clears the value of the "ExamCode" field.
func (echu *ExamCenterHallUpdate) ClearExamCode() *ExamCenterHallUpdate {
	echu.mutation.ClearExamCode()
	return echu
}

// SetExamName sets the "ExamName" field.
func (echu *ExamCenterHallUpdate) SetExamName(s string) *ExamCenterHallUpdate {
	echu.mutation.SetExamName(s)
	return echu
}

// SetNillableExamName sets the "ExamName" field if the given value is not nil.
func (echu *ExamCenterHallUpdate) SetNillableExamName(s *string) *ExamCenterHallUpdate {
	if s != nil {
		echu.SetExamName(*s)
	}
	return echu
}

// ClearExamName clears the value of the "ExamName" field.
func (echu *ExamCenterHallUpdate) ClearExamName() *ExamCenterHallUpdate {
	echu.mutation.ClearExamName()
	return echu
}

// SetCenterCityName sets the "CenterCityName" field.
func (echu *ExamCenterHallUpdate) SetCenterCityName(s string) *ExamCenterHallUpdate {
	echu.mutation.SetCenterCityName(s)
	return echu
}

// SetNillableCenterCityName sets the "CenterCityName" field if the given value is not nil.
func (echu *ExamCenterHallUpdate) SetNillableCenterCityName(s *string) *ExamCenterHallUpdate {
	if s != nil {
		echu.SetCenterCityName(*s)
	}
	return echu
}

// ClearCenterCityName clears the value of the "CenterCityName" field.
func (echu *ExamCenterHallUpdate) ClearCenterCityName() *ExamCenterHallUpdate {
	echu.mutation.ClearCenterCityName()
	return echu
}

// SetConductedByFacilityID sets the "ConductedByFacilityID" field.
func (echu *ExamCenterHallUpdate) SetConductedByFacilityID(s string) *ExamCenterHallUpdate {
	echu.mutation.SetConductedByFacilityID(s)
	return echu
}

// SetNillableConductedByFacilityID sets the "ConductedByFacilityID" field if the given value is not nil.
func (echu *ExamCenterHallUpdate) SetNillableConductedByFacilityID(s *string) *ExamCenterHallUpdate {
	if s != nil {
		echu.SetConductedByFacilityID(*s)
	}
	return echu
}

// ClearConductedByFacilityID clears the value of the "ConductedByFacilityID" field.
func (echu *ExamCenterHallUpdate) ClearConductedByFacilityID() *ExamCenterHallUpdate {
	echu.mutation.ClearConductedByFacilityID()
	return echu
}

// SetConductedBy sets the "ConductedBy" field.
func (echu *ExamCenterHallUpdate) SetConductedBy(s string) *ExamCenterHallUpdate {
	echu.mutation.SetConductedBy(s)
	return echu
}

// SetNillableConductedBy sets the "ConductedBy" field if the given value is not nil.
func (echu *ExamCenterHallUpdate) SetNillableConductedBy(s *string) *ExamCenterHallUpdate {
	if s != nil {
		echu.SetConductedBy(*s)
	}
	return echu
}

// ClearConductedBy clears the value of the "ConductedBy" field.
func (echu *ExamCenterHallUpdate) ClearConductedBy() *ExamCenterHallUpdate {
	echu.mutation.ClearConductedBy()
	return echu
}

// SetHallName sets the "HallName" field.
func (echu *ExamCenterHallUpdate) SetHallName(s string) *ExamCenterHallUpdate {
	echu.mutation.SetHallName(s)
	return echu
}

// SetNillableHallName sets the "HallName" field if the given value is not nil.
func (echu *ExamCenterHallUpdate) SetNillableHallName(s *string) *ExamCenterHallUpdate {
	if s != nil {
		echu.SetHallName(*s)
	}
	return echu
}

// ClearHallName clears the value of the "HallName" field.
func (echu *ExamCenterHallUpdate) ClearHallName() *ExamCenterHallUpdate {
	echu.mutation.ClearHallName()
	return echu
}

// SetAdminCircleOfficeID sets the "AdminCircleOfficeID" field.
func (echu *ExamCenterHallUpdate) SetAdminCircleOfficeID(s string) *ExamCenterHallUpdate {
	echu.mutation.SetAdminCircleOfficeID(s)
	return echu
}

// SetNillableAdminCircleOfficeID sets the "AdminCircleOfficeID" field if the given value is not nil.
func (echu *ExamCenterHallUpdate) SetNillableAdminCircleOfficeID(s *string) *ExamCenterHallUpdate {
	if s != nil {
		echu.SetAdminCircleOfficeID(*s)
	}
	return echu
}

// ClearAdminCircleOfficeID clears the value of the "AdminCircleOfficeID" field.
func (echu *ExamCenterHallUpdate) ClearAdminCircleOfficeID() *ExamCenterHallUpdate {
	echu.mutation.ClearAdminCircleOfficeID()
	return echu
}

// SetMappingIdentificationNumber sets the "MappingIdentificationNumber" field.
func (echu *ExamCenterHallUpdate) SetMappingIdentificationNumber(smin []schema.StrucMappingIdentificationNumber) *ExamCenterHallUpdate {
	echu.mutation.SetMappingIdentificationNumber(smin)
	return echu
}

// AppendMappingIdentificationNumber appends smin to the "MappingIdentificationNumber" field.
func (echu *ExamCenterHallUpdate) AppendMappingIdentificationNumber(smin []schema.StrucMappingIdentificationNumber) *ExamCenterHallUpdate {
	echu.mutation.AppendMappingIdentificationNumber(smin)
	return echu
}

// ClearMappingIdentificationNumber clears the value of the "MappingIdentificationNumber" field.
func (echu *ExamCenterHallUpdate) ClearMappingIdentificationNumber() *ExamCenterHallUpdate {
	echu.mutation.ClearMappingIdentificationNumber()
	return echu
}

// SetStatus sets the "Status" field.
func (echu *ExamCenterHallUpdate) SetStatus(s string) *ExamCenterHallUpdate {
	echu.mutation.SetStatus(s)
	return echu
}

// SetNillableStatus sets the "Status" field if the given value is not nil.
func (echu *ExamCenterHallUpdate) SetNillableStatus(s *string) *ExamCenterHallUpdate {
	if s != nil {
		echu.SetStatus(*s)
	}
	return echu
}

// ClearStatus clears the value of the "Status" field.
func (echu *ExamCenterHallUpdate) ClearStatus() *ExamCenterHallUpdate {
	echu.mutation.ClearStatus()
	return echu
}

// SetCreatedById sets the "CreatedById" field.
func (echu *ExamCenterHallUpdate) SetCreatedById(i int64) *ExamCenterHallUpdate {
	echu.mutation.ResetCreatedById()
	echu.mutation.SetCreatedById(i)
	return echu
}

// SetNillableCreatedById sets the "CreatedById" field if the given value is not nil.
func (echu *ExamCenterHallUpdate) SetNillableCreatedById(i *int64) *ExamCenterHallUpdate {
	if i != nil {
		echu.SetCreatedById(*i)
	}
	return echu
}

// AddCreatedById adds i to the "CreatedById" field.
func (echu *ExamCenterHallUpdate) AddCreatedById(i int64) *ExamCenterHallUpdate {
	echu.mutation.AddCreatedById(i)
	return echu
}

// ClearCreatedById clears the value of the "CreatedById" field.
func (echu *ExamCenterHallUpdate) ClearCreatedById() *ExamCenterHallUpdate {
	echu.mutation.ClearCreatedById()
	return echu
}

// SetCreatedByUserName sets the "CreatedByUserName" field.
func (echu *ExamCenterHallUpdate) SetCreatedByUserName(s string) *ExamCenterHallUpdate {
	echu.mutation.SetCreatedByUserName(s)
	return echu
}

// SetNillableCreatedByUserName sets the "CreatedByUserName" field if the given value is not nil.
func (echu *ExamCenterHallUpdate) SetNillableCreatedByUserName(s *string) *ExamCenterHallUpdate {
	if s != nil {
		echu.SetCreatedByUserName(*s)
	}
	return echu
}

// ClearCreatedByUserName clears the value of the "CreatedByUserName" field.
func (echu *ExamCenterHallUpdate) ClearCreatedByUserName() *ExamCenterHallUpdate {
	echu.mutation.ClearCreatedByUserName()
	return echu
}

// SetCreatedByEmpId sets the "CreatedByEmpId" field.
func (echu *ExamCenterHallUpdate) SetCreatedByEmpId(i int64) *ExamCenterHallUpdate {
	echu.mutation.ResetCreatedByEmpId()
	echu.mutation.SetCreatedByEmpId(i)
	return echu
}

// SetNillableCreatedByEmpId sets the "CreatedByEmpId" field if the given value is not nil.
func (echu *ExamCenterHallUpdate) SetNillableCreatedByEmpId(i *int64) *ExamCenterHallUpdate {
	if i != nil {
		echu.SetCreatedByEmpId(*i)
	}
	return echu
}

// AddCreatedByEmpId adds i to the "CreatedByEmpId" field.
func (echu *ExamCenterHallUpdate) AddCreatedByEmpId(i int64) *ExamCenterHallUpdate {
	echu.mutation.AddCreatedByEmpId(i)
	return echu
}

// ClearCreatedByEmpId clears the value of the "CreatedByEmpId" field.
func (echu *ExamCenterHallUpdate) ClearCreatedByEmpId() *ExamCenterHallUpdate {
	echu.mutation.ClearCreatedByEmpId()
	return echu
}

// SetCreatedByDesignation sets the "CreatedByDesignation" field.
func (echu *ExamCenterHallUpdate) SetCreatedByDesignation(s string) *ExamCenterHallUpdate {
	echu.mutation.SetCreatedByDesignation(s)
	return echu
}

// SetNillableCreatedByDesignation sets the "CreatedByDesignation" field if the given value is not nil.
func (echu *ExamCenterHallUpdate) SetNillableCreatedByDesignation(s *string) *ExamCenterHallUpdate {
	if s != nil {
		echu.SetCreatedByDesignation(*s)
	}
	return echu
}

// ClearCreatedByDesignation clears the value of the "CreatedByDesignation" field.
func (echu *ExamCenterHallUpdate) ClearCreatedByDesignation() *ExamCenterHallUpdate {
	echu.mutation.ClearCreatedByDesignation()
	return echu
}

// SetCreatedDate sets the "CreatedDate" field.
func (echu *ExamCenterHallUpdate) SetCreatedDate(t time.Time) *ExamCenterHallUpdate {
	echu.mutation.SetCreatedDate(t)
	return echu
}

// SetNillableCreatedDate sets the "CreatedDate" field if the given value is not nil.
func (echu *ExamCenterHallUpdate) SetNillableCreatedDate(t *time.Time) *ExamCenterHallUpdate {
	if t != nil {
		echu.SetCreatedDate(*t)
	}
	return echu
}

// ClearCreatedDate clears the value of the "CreatedDate" field.
func (echu *ExamCenterHallUpdate) ClearCreatedDate() *ExamCenterHallUpdate {
	echu.mutation.ClearCreatedDate()
	return echu
}

// SetModifiedById sets the "ModifiedById" field.
func (echu *ExamCenterHallUpdate) SetModifiedById(i int64) *ExamCenterHallUpdate {
	echu.mutation.ResetModifiedById()
	echu.mutation.SetModifiedById(i)
	return echu
}

// SetNillableModifiedById sets the "ModifiedById" field if the given value is not nil.
func (echu *ExamCenterHallUpdate) SetNillableModifiedById(i *int64) *ExamCenterHallUpdate {
	if i != nil {
		echu.SetModifiedById(*i)
	}
	return echu
}

// AddModifiedById adds i to the "ModifiedById" field.
func (echu *ExamCenterHallUpdate) AddModifiedById(i int64) *ExamCenterHallUpdate {
	echu.mutation.AddModifiedById(i)
	return echu
}

// ClearModifiedById clears the value of the "ModifiedById" field.
func (echu *ExamCenterHallUpdate) ClearModifiedById() *ExamCenterHallUpdate {
	echu.mutation.ClearModifiedById()
	return echu
}

// SetModifiedByUserName sets the "ModifiedByUserName" field.
func (echu *ExamCenterHallUpdate) SetModifiedByUserName(s string) *ExamCenterHallUpdate {
	echu.mutation.SetModifiedByUserName(s)
	return echu
}

// SetNillableModifiedByUserName sets the "ModifiedByUserName" field if the given value is not nil.
func (echu *ExamCenterHallUpdate) SetNillableModifiedByUserName(s *string) *ExamCenterHallUpdate {
	if s != nil {
		echu.SetModifiedByUserName(*s)
	}
	return echu
}

// ClearModifiedByUserName clears the value of the "ModifiedByUserName" field.
func (echu *ExamCenterHallUpdate) ClearModifiedByUserName() *ExamCenterHallUpdate {
	echu.mutation.ClearModifiedByUserName()
	return echu
}

// SetModifiedByEmpId sets the "ModifiedByEmpId" field.
func (echu *ExamCenterHallUpdate) SetModifiedByEmpId(i int64) *ExamCenterHallUpdate {
	echu.mutation.ResetModifiedByEmpId()
	echu.mutation.SetModifiedByEmpId(i)
	return echu
}

// SetNillableModifiedByEmpId sets the "ModifiedByEmpId" field if the given value is not nil.
func (echu *ExamCenterHallUpdate) SetNillableModifiedByEmpId(i *int64) *ExamCenterHallUpdate {
	if i != nil {
		echu.SetModifiedByEmpId(*i)
	}
	return echu
}

// AddModifiedByEmpId adds i to the "ModifiedByEmpId" field.
func (echu *ExamCenterHallUpdate) AddModifiedByEmpId(i int64) *ExamCenterHallUpdate {
	echu.mutation.AddModifiedByEmpId(i)
	return echu
}

// ClearModifiedByEmpId clears the value of the "ModifiedByEmpId" field.
func (echu *ExamCenterHallUpdate) ClearModifiedByEmpId() *ExamCenterHallUpdate {
	echu.mutation.ClearModifiedByEmpId()
	return echu
}

// SetModifiedByDesignantion sets the "ModifiedByDesignantion" field.
func (echu *ExamCenterHallUpdate) SetModifiedByDesignantion(s string) *ExamCenterHallUpdate {
	echu.mutation.SetModifiedByDesignantion(s)
	return echu
}

// SetNillableModifiedByDesignantion sets the "ModifiedByDesignantion" field if the given value is not nil.
func (echu *ExamCenterHallUpdate) SetNillableModifiedByDesignantion(s *string) *ExamCenterHallUpdate {
	if s != nil {
		echu.SetModifiedByDesignantion(*s)
	}
	return echu
}

// ClearModifiedByDesignantion clears the value of the "ModifiedByDesignantion" field.
func (echu *ExamCenterHallUpdate) ClearModifiedByDesignantion() *ExamCenterHallUpdate {
	echu.mutation.ClearModifiedByDesignantion()
	return echu
}

// SetModifiedDate sets the "ModifiedDate" field.
func (echu *ExamCenterHallUpdate) SetModifiedDate(t time.Time) *ExamCenterHallUpdate {
	echu.mutation.SetModifiedDate(t)
	return echu
}

// SetNillableModifiedDate sets the "ModifiedDate" field if the given value is not nil.
func (echu *ExamCenterHallUpdate) SetNillableModifiedDate(t *time.Time) *ExamCenterHallUpdate {
	if t != nil {
		echu.SetModifiedDate(*t)
	}
	return echu
}

// ClearModifiedDate clears the value of the "ModifiedDate" field.
func (echu *ExamCenterHallUpdate) ClearModifiedDate() *ExamCenterHallUpdate {
	echu.mutation.ClearModifiedDate()
	return echu
}

// SetDeletedById sets the "DeletedById" field.
func (echu *ExamCenterHallUpdate) SetDeletedById(i int64) *ExamCenterHallUpdate {
	echu.mutation.ResetDeletedById()
	echu.mutation.SetDeletedById(i)
	return echu
}

// SetNillableDeletedById sets the "DeletedById" field if the given value is not nil.
func (echu *ExamCenterHallUpdate) SetNillableDeletedById(i *int64) *ExamCenterHallUpdate {
	if i != nil {
		echu.SetDeletedById(*i)
	}
	return echu
}

// AddDeletedById adds i to the "DeletedById" field.
func (echu *ExamCenterHallUpdate) AddDeletedById(i int64) *ExamCenterHallUpdate {
	echu.mutation.AddDeletedById(i)
	return echu
}

// ClearDeletedById clears the value of the "DeletedById" field.
func (echu *ExamCenterHallUpdate) ClearDeletedById() *ExamCenterHallUpdate {
	echu.mutation.ClearDeletedById()
	return echu
}

// SetDeletedByUserName sets the "DeletedByUserName" field.
func (echu *ExamCenterHallUpdate) SetDeletedByUserName(s string) *ExamCenterHallUpdate {
	echu.mutation.SetDeletedByUserName(s)
	return echu
}

// SetNillableDeletedByUserName sets the "DeletedByUserName" field if the given value is not nil.
func (echu *ExamCenterHallUpdate) SetNillableDeletedByUserName(s *string) *ExamCenterHallUpdate {
	if s != nil {
		echu.SetDeletedByUserName(*s)
	}
	return echu
}

// ClearDeletedByUserName clears the value of the "DeletedByUserName" field.
func (echu *ExamCenterHallUpdate) ClearDeletedByUserName() *ExamCenterHallUpdate {
	echu.mutation.ClearDeletedByUserName()
	return echu
}

// SetDeletedByEmpId sets the "DeletedByEmpId" field.
func (echu *ExamCenterHallUpdate) SetDeletedByEmpId(i int64) *ExamCenterHallUpdate {
	echu.mutation.ResetDeletedByEmpId()
	echu.mutation.SetDeletedByEmpId(i)
	return echu
}

// SetNillableDeletedByEmpId sets the "DeletedByEmpId" field if the given value is not nil.
func (echu *ExamCenterHallUpdate) SetNillableDeletedByEmpId(i *int64) *ExamCenterHallUpdate {
	if i != nil {
		echu.SetDeletedByEmpId(*i)
	}
	return echu
}

// AddDeletedByEmpId adds i to the "DeletedByEmpId" field.
func (echu *ExamCenterHallUpdate) AddDeletedByEmpId(i int64) *ExamCenterHallUpdate {
	echu.mutation.AddDeletedByEmpId(i)
	return echu
}

// ClearDeletedByEmpId clears the value of the "DeletedByEmpId" field.
func (echu *ExamCenterHallUpdate) ClearDeletedByEmpId() *ExamCenterHallUpdate {
	echu.mutation.ClearDeletedByEmpId()
	return echu
}

// SetDeletedByDesignation sets the "DeletedByDesignation" field.
func (echu *ExamCenterHallUpdate) SetDeletedByDesignation(s string) *ExamCenterHallUpdate {
	echu.mutation.SetDeletedByDesignation(s)
	return echu
}

// SetNillableDeletedByDesignation sets the "DeletedByDesignation" field if the given value is not nil.
func (echu *ExamCenterHallUpdate) SetNillableDeletedByDesignation(s *string) *ExamCenterHallUpdate {
	if s != nil {
		echu.SetDeletedByDesignation(*s)
	}
	return echu
}

// ClearDeletedByDesignation clears the value of the "DeletedByDesignation" field.
func (echu *ExamCenterHallUpdate) ClearDeletedByDesignation() *ExamCenterHallUpdate {
	echu.mutation.ClearDeletedByDesignation()
	return echu
}

// SetDeletedDate sets the "DeletedDate" field.
func (echu *ExamCenterHallUpdate) SetDeletedDate(t time.Time) *ExamCenterHallUpdate {
	echu.mutation.SetDeletedDate(t)
	return echu
}

// SetNillableDeletedDate sets the "DeletedDate" field if the given value is not nil.
func (echu *ExamCenterHallUpdate) SetNillableDeletedDate(t *time.Time) *ExamCenterHallUpdate {
	if t != nil {
		echu.SetDeletedDate(*t)
	}
	return echu
}

// ClearDeletedDate clears the value of the "DeletedDate" field.
func (echu *ExamCenterHallUpdate) ClearDeletedDate() *ExamCenterHallUpdate {
	echu.mutation.ClearDeletedDate()
	return echu
}

// SetUpdatedAt sets the "UpdatedAt" field.
func (echu *ExamCenterHallUpdate) SetUpdatedAt(t time.Time) *ExamCenterHallUpdate {
	echu.mutation.SetUpdatedAt(t)
	return echu
}

// SetNillableUpdatedAt sets the "UpdatedAt" field if the given value is not nil.
func (echu *ExamCenterHallUpdate) SetNillableUpdatedAt(t *time.Time) *ExamCenterHallUpdate {
	if t != nil {
		echu.SetUpdatedAt(*t)
	}
	return echu
}

// ClearUpdatedAt clears the value of the "UpdatedAt" field.
func (echu *ExamCenterHallUpdate) ClearUpdatedAt() *ExamCenterHallUpdate {
	echu.mutation.ClearUpdatedAt()
	return echu
}

// SetNoSeats sets the "NoSeats" field.
func (echu *ExamCenterHallUpdate) SetNoSeats(i int32) *ExamCenterHallUpdate {
	echu.mutation.ResetNoSeats()
	echu.mutation.SetNoSeats(i)
	return echu
}

// SetNillableNoSeats sets the "NoSeats" field if the given value is not nil.
func (echu *ExamCenterHallUpdate) SetNillableNoSeats(i *int32) *ExamCenterHallUpdate {
	if i != nil {
		echu.SetNoSeats(*i)
	}
	return echu
}

// AddNoSeats adds i to the "NoSeats" field.
func (echu *ExamCenterHallUpdate) AddNoSeats(i int32) *ExamCenterHallUpdate {
	echu.mutation.AddNoSeats(i)
	return echu
}

// ClearNoSeats clears the value of the "NoSeats" field.
func (echu *ExamCenterHallUpdate) ClearNoSeats() *ExamCenterHallUpdate {
	echu.mutation.ClearNoSeats()
	return echu
}

// SetExaCenterHallID sets the "ExaCenterHall" edge to the Center entity by ID.
func (echu *ExamCenterHallUpdate) SetExaCenterHallID(id int32) *ExamCenterHallUpdate {
	echu.mutation.SetExaCenterHallID(id)
	return echu
}

// SetNillableExaCenterHallID sets the "ExaCenterHall" edge to the Center entity by ID if the given value is not nil.
func (echu *ExamCenterHallUpdate) SetNillableExaCenterHallID(id *int32) *ExamCenterHallUpdate {
	if id != nil {
		echu = echu.SetExaCenterHallID(*id)
	}
	return echu
}

// SetExaCenterHall sets the "ExaCenterHall" edge to the Center entity.
func (echu *ExamCenterHallUpdate) SetExaCenterHall(c *Center) *ExamCenterHallUpdate {
	return echu.SetExaCenterHallID(c.ID)
}

// Mutation returns the ExamCenterHallMutation object of the builder.
func (echu *ExamCenterHallUpdate) Mutation() *ExamCenterHallMutation {
	return echu.mutation
}

// ClearExaCenterHall clears the "ExaCenterHall" edge to the Center entity.
func (echu *ExamCenterHallUpdate) ClearExaCenterHall() *ExamCenterHallUpdate {
	echu.mutation.ClearExaCenterHall()
	return echu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (echu *ExamCenterHallUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, echu.sqlSave, echu.mutation, echu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (echu *ExamCenterHallUpdate) SaveX(ctx context.Context) int {
	affected, err := echu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (echu *ExamCenterHallUpdate) Exec(ctx context.Context) error {
	_, err := echu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (echu *ExamCenterHallUpdate) ExecX(ctx context.Context) {
	if err := echu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (echu *ExamCenterHallUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(examcenterhall.Table, examcenterhall.Columns, sqlgraph.NewFieldSpec(examcenterhall.FieldID, field.TypeInt32))
	if ps := echu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := echu.mutation.CityID(); ok {
		_spec.SetField(examcenterhall.FieldCityID, field.TypeInt32, value)
	}
	if value, ok := echu.mutation.AddedCityID(); ok {
		_spec.AddField(examcenterhall.FieldCityID, field.TypeInt32, value)
	}
	if echu.mutation.CityIDCleared() {
		_spec.ClearField(examcenterhall.FieldCityID, field.TypeInt32)
	}
	if value, ok := echu.mutation.ExamCenterName(); ok {
		_spec.SetField(examcenterhall.FieldExamCenterName, field.TypeString, value)
	}
	if echu.mutation.ExamCenterNameCleared() {
		_spec.ClearField(examcenterhall.FieldExamCenterName, field.TypeString)
	}
	if value, ok := echu.mutation.ExamYear(); ok {
		_spec.SetField(examcenterhall.FieldExamYear, field.TypeString, value)
	}
	if echu.mutation.ExamYearCleared() {
		_spec.ClearField(examcenterhall.FieldExamYear, field.TypeString)
	}
	if value, ok := echu.mutation.ExamCode(); ok {
		_spec.SetField(examcenterhall.FieldExamCode, field.TypeInt32, value)
	}
	if value, ok := echu.mutation.AddedExamCode(); ok {
		_spec.AddField(examcenterhall.FieldExamCode, field.TypeInt32, value)
	}
	if echu.mutation.ExamCodeCleared() {
		_spec.ClearField(examcenterhall.FieldExamCode, field.TypeInt32)
	}
	if value, ok := echu.mutation.ExamName(); ok {
		_spec.SetField(examcenterhall.FieldExamName, field.TypeString, value)
	}
	if echu.mutation.ExamNameCleared() {
		_spec.ClearField(examcenterhall.FieldExamName, field.TypeString)
	}
	if value, ok := echu.mutation.CenterCityName(); ok {
		_spec.SetField(examcenterhall.FieldCenterCityName, field.TypeString, value)
	}
	if echu.mutation.CenterCityNameCleared() {
		_spec.ClearField(examcenterhall.FieldCenterCityName, field.TypeString)
	}
	if value, ok := echu.mutation.ConductedByFacilityID(); ok {
		_spec.SetField(examcenterhall.FieldConductedByFacilityID, field.TypeString, value)
	}
	if echu.mutation.ConductedByFacilityIDCleared() {
		_spec.ClearField(examcenterhall.FieldConductedByFacilityID, field.TypeString)
	}
	if value, ok := echu.mutation.ConductedBy(); ok {
		_spec.SetField(examcenterhall.FieldConductedBy, field.TypeString, value)
	}
	if echu.mutation.ConductedByCleared() {
		_spec.ClearField(examcenterhall.FieldConductedBy, field.TypeString)
	}
	if value, ok := echu.mutation.HallName(); ok {
		_spec.SetField(examcenterhall.FieldHallName, field.TypeString, value)
	}
	if echu.mutation.HallNameCleared() {
		_spec.ClearField(examcenterhall.FieldHallName, field.TypeString)
	}
	if value, ok := echu.mutation.AdminCircleOfficeID(); ok {
		_spec.SetField(examcenterhall.FieldAdminCircleOfficeID, field.TypeString, value)
	}
	if echu.mutation.AdminCircleOfficeIDCleared() {
		_spec.ClearField(examcenterhall.FieldAdminCircleOfficeID, field.TypeString)
	}
	if value, ok := echu.mutation.MappingIdentificationNumber(); ok {
		_spec.SetField(examcenterhall.FieldMappingIdentificationNumber, field.TypeJSON, value)
	}
	if value, ok := echu.mutation.AppendedMappingIdentificationNumber(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, examcenterhall.FieldMappingIdentificationNumber, value)
		})
	}
	if echu.mutation.MappingIdentificationNumberCleared() {
		_spec.ClearField(examcenterhall.FieldMappingIdentificationNumber, field.TypeJSON)
	}
	if value, ok := echu.mutation.Status(); ok {
		_spec.SetField(examcenterhall.FieldStatus, field.TypeString, value)
	}
	if echu.mutation.StatusCleared() {
		_spec.ClearField(examcenterhall.FieldStatus, field.TypeString)
	}
	if value, ok := echu.mutation.CreatedById(); ok {
		_spec.SetField(examcenterhall.FieldCreatedById, field.TypeInt64, value)
	}
	if value, ok := echu.mutation.AddedCreatedById(); ok {
		_spec.AddField(examcenterhall.FieldCreatedById, field.TypeInt64, value)
	}
	if echu.mutation.CreatedByIdCleared() {
		_spec.ClearField(examcenterhall.FieldCreatedById, field.TypeInt64)
	}
	if value, ok := echu.mutation.CreatedByUserName(); ok {
		_spec.SetField(examcenterhall.FieldCreatedByUserName, field.TypeString, value)
	}
	if echu.mutation.CreatedByUserNameCleared() {
		_spec.ClearField(examcenterhall.FieldCreatedByUserName, field.TypeString)
	}
	if value, ok := echu.mutation.CreatedByEmpId(); ok {
		_spec.SetField(examcenterhall.FieldCreatedByEmpId, field.TypeInt64, value)
	}
	if value, ok := echu.mutation.AddedCreatedByEmpId(); ok {
		_spec.AddField(examcenterhall.FieldCreatedByEmpId, field.TypeInt64, value)
	}
	if echu.mutation.CreatedByEmpIdCleared() {
		_spec.ClearField(examcenterhall.FieldCreatedByEmpId, field.TypeInt64)
	}
	if value, ok := echu.mutation.CreatedByDesignation(); ok {
		_spec.SetField(examcenterhall.FieldCreatedByDesignation, field.TypeString, value)
	}
	if echu.mutation.CreatedByDesignationCleared() {
		_spec.ClearField(examcenterhall.FieldCreatedByDesignation, field.TypeString)
	}
	if value, ok := echu.mutation.CreatedDate(); ok {
		_spec.SetField(examcenterhall.FieldCreatedDate, field.TypeTime, value)
	}
	if echu.mutation.CreatedDateCleared() {
		_spec.ClearField(examcenterhall.FieldCreatedDate, field.TypeTime)
	}
	if value, ok := echu.mutation.ModifiedById(); ok {
		_spec.SetField(examcenterhall.FieldModifiedById, field.TypeInt64, value)
	}
	if value, ok := echu.mutation.AddedModifiedById(); ok {
		_spec.AddField(examcenterhall.FieldModifiedById, field.TypeInt64, value)
	}
	if echu.mutation.ModifiedByIdCleared() {
		_spec.ClearField(examcenterhall.FieldModifiedById, field.TypeInt64)
	}
	if value, ok := echu.mutation.ModifiedByUserName(); ok {
		_spec.SetField(examcenterhall.FieldModifiedByUserName, field.TypeString, value)
	}
	if echu.mutation.ModifiedByUserNameCleared() {
		_spec.ClearField(examcenterhall.FieldModifiedByUserName, field.TypeString)
	}
	if value, ok := echu.mutation.ModifiedByEmpId(); ok {
		_spec.SetField(examcenterhall.FieldModifiedByEmpId, field.TypeInt64, value)
	}
	if value, ok := echu.mutation.AddedModifiedByEmpId(); ok {
		_spec.AddField(examcenterhall.FieldModifiedByEmpId, field.TypeInt64, value)
	}
	if echu.mutation.ModifiedByEmpIdCleared() {
		_spec.ClearField(examcenterhall.FieldModifiedByEmpId, field.TypeInt64)
	}
	if value, ok := echu.mutation.ModifiedByDesignantion(); ok {
		_spec.SetField(examcenterhall.FieldModifiedByDesignantion, field.TypeString, value)
	}
	if echu.mutation.ModifiedByDesignantionCleared() {
		_spec.ClearField(examcenterhall.FieldModifiedByDesignantion, field.TypeString)
	}
	if value, ok := echu.mutation.ModifiedDate(); ok {
		_spec.SetField(examcenterhall.FieldModifiedDate, field.TypeTime, value)
	}
	if echu.mutation.ModifiedDateCleared() {
		_spec.ClearField(examcenterhall.FieldModifiedDate, field.TypeTime)
	}
	if value, ok := echu.mutation.DeletedById(); ok {
		_spec.SetField(examcenterhall.FieldDeletedById, field.TypeInt64, value)
	}
	if value, ok := echu.mutation.AddedDeletedById(); ok {
		_spec.AddField(examcenterhall.FieldDeletedById, field.TypeInt64, value)
	}
	if echu.mutation.DeletedByIdCleared() {
		_spec.ClearField(examcenterhall.FieldDeletedById, field.TypeInt64)
	}
	if value, ok := echu.mutation.DeletedByUserName(); ok {
		_spec.SetField(examcenterhall.FieldDeletedByUserName, field.TypeString, value)
	}
	if echu.mutation.DeletedByUserNameCleared() {
		_spec.ClearField(examcenterhall.FieldDeletedByUserName, field.TypeString)
	}
	if value, ok := echu.mutation.DeletedByEmpId(); ok {
		_spec.SetField(examcenterhall.FieldDeletedByEmpId, field.TypeInt64, value)
	}
	if value, ok := echu.mutation.AddedDeletedByEmpId(); ok {
		_spec.AddField(examcenterhall.FieldDeletedByEmpId, field.TypeInt64, value)
	}
	if echu.mutation.DeletedByEmpIdCleared() {
		_spec.ClearField(examcenterhall.FieldDeletedByEmpId, field.TypeInt64)
	}
	if value, ok := echu.mutation.DeletedByDesignation(); ok {
		_spec.SetField(examcenterhall.FieldDeletedByDesignation, field.TypeString, value)
	}
	if echu.mutation.DeletedByDesignationCleared() {
		_spec.ClearField(examcenterhall.FieldDeletedByDesignation, field.TypeString)
	}
	if value, ok := echu.mutation.DeletedDate(); ok {
		_spec.SetField(examcenterhall.FieldDeletedDate, field.TypeTime, value)
	}
	if echu.mutation.DeletedDateCleared() {
		_spec.ClearField(examcenterhall.FieldDeletedDate, field.TypeTime)
	}
	if value, ok := echu.mutation.UpdatedAt(); ok {
		_spec.SetField(examcenterhall.FieldUpdatedAt, field.TypeTime, value)
	}
	if echu.mutation.UpdatedAtCleared() {
		_spec.ClearField(examcenterhall.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := echu.mutation.NoSeats(); ok {
		_spec.SetField(examcenterhall.FieldNoSeats, field.TypeInt32, value)
	}
	if value, ok := echu.mutation.AddedNoSeats(); ok {
		_spec.AddField(examcenterhall.FieldNoSeats, field.TypeInt32, value)
	}
	if echu.mutation.NoSeatsCleared() {
		_spec.ClearField(examcenterhall.FieldNoSeats, field.TypeInt32)
	}
	if echu.mutation.ExaCenterHallCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   examcenterhall.ExaCenterHallTable,
			Columns: []string{examcenterhall.ExaCenterHallColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(center.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := echu.mutation.ExaCenterHallIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   examcenterhall.ExaCenterHallTable,
			Columns: []string{examcenterhall.ExaCenterHallColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(center.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, echu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{examcenterhall.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	echu.mutation.done = true
	return n, nil
}

// ExamCenterHallUpdateOne is the builder for updating a single ExamCenterHall entity.
type ExamCenterHallUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ExamCenterHallMutation
}

// SetCenterCode sets the "CenterCode" field.
func (echuo *ExamCenterHallUpdateOne) SetCenterCode(i int32) *ExamCenterHallUpdateOne {
	echuo.mutation.SetCenterCode(i)
	return echuo
}

// SetNillableCenterCode sets the "CenterCode" field if the given value is not nil.
func (echuo *ExamCenterHallUpdateOne) SetNillableCenterCode(i *int32) *ExamCenterHallUpdateOne {
	if i != nil {
		echuo.SetCenterCode(*i)
	}
	return echuo
}

// ClearCenterCode clears the value of the "CenterCode" field.
func (echuo *ExamCenterHallUpdateOne) ClearCenterCode() *ExamCenterHallUpdateOne {
	echuo.mutation.ClearCenterCode()
	return echuo
}

// SetCityID sets the "CityID" field.
func (echuo *ExamCenterHallUpdateOne) SetCityID(i int32) *ExamCenterHallUpdateOne {
	echuo.mutation.ResetCityID()
	echuo.mutation.SetCityID(i)
	return echuo
}

// SetNillableCityID sets the "CityID" field if the given value is not nil.
func (echuo *ExamCenterHallUpdateOne) SetNillableCityID(i *int32) *ExamCenterHallUpdateOne {
	if i != nil {
		echuo.SetCityID(*i)
	}
	return echuo
}

// AddCityID adds i to the "CityID" field.
func (echuo *ExamCenterHallUpdateOne) AddCityID(i int32) *ExamCenterHallUpdateOne {
	echuo.mutation.AddCityID(i)
	return echuo
}

// ClearCityID clears the value of the "CityID" field.
func (echuo *ExamCenterHallUpdateOne) ClearCityID() *ExamCenterHallUpdateOne {
	echuo.mutation.ClearCityID()
	return echuo
}

// SetExamCenterName sets the "ExamCenterName" field.
func (echuo *ExamCenterHallUpdateOne) SetExamCenterName(s string) *ExamCenterHallUpdateOne {
	echuo.mutation.SetExamCenterName(s)
	return echuo
}

// SetNillableExamCenterName sets the "ExamCenterName" field if the given value is not nil.
func (echuo *ExamCenterHallUpdateOne) SetNillableExamCenterName(s *string) *ExamCenterHallUpdateOne {
	if s != nil {
		echuo.SetExamCenterName(*s)
	}
	return echuo
}

// ClearExamCenterName clears the value of the "ExamCenterName" field.
func (echuo *ExamCenterHallUpdateOne) ClearExamCenterName() *ExamCenterHallUpdateOne {
	echuo.mutation.ClearExamCenterName()
	return echuo
}

// SetExamYear sets the "ExamYear" field.
func (echuo *ExamCenterHallUpdateOne) SetExamYear(s string) *ExamCenterHallUpdateOne {
	echuo.mutation.SetExamYear(s)
	return echuo
}

// SetNillableExamYear sets the "ExamYear" field if the given value is not nil.
func (echuo *ExamCenterHallUpdateOne) SetNillableExamYear(s *string) *ExamCenterHallUpdateOne {
	if s != nil {
		echuo.SetExamYear(*s)
	}
	return echuo
}

// ClearExamYear clears the value of the "ExamYear" field.
func (echuo *ExamCenterHallUpdateOne) ClearExamYear() *ExamCenterHallUpdateOne {
	echuo.mutation.ClearExamYear()
	return echuo
}

// SetExamCode sets the "ExamCode" field.
func (echuo *ExamCenterHallUpdateOne) SetExamCode(i int32) *ExamCenterHallUpdateOne {
	echuo.mutation.ResetExamCode()
	echuo.mutation.SetExamCode(i)
	return echuo
}

// SetNillableExamCode sets the "ExamCode" field if the given value is not nil.
func (echuo *ExamCenterHallUpdateOne) SetNillableExamCode(i *int32) *ExamCenterHallUpdateOne {
	if i != nil {
		echuo.SetExamCode(*i)
	}
	return echuo
}

// AddExamCode adds i to the "ExamCode" field.
func (echuo *ExamCenterHallUpdateOne) AddExamCode(i int32) *ExamCenterHallUpdateOne {
	echuo.mutation.AddExamCode(i)
	return echuo
}

// ClearExamCode clears the value of the "ExamCode" field.
func (echuo *ExamCenterHallUpdateOne) ClearExamCode() *ExamCenterHallUpdateOne {
	echuo.mutation.ClearExamCode()
	return echuo
}

// SetExamName sets the "ExamName" field.
func (echuo *ExamCenterHallUpdateOne) SetExamName(s string) *ExamCenterHallUpdateOne {
	echuo.mutation.SetExamName(s)
	return echuo
}

// SetNillableExamName sets the "ExamName" field if the given value is not nil.
func (echuo *ExamCenterHallUpdateOne) SetNillableExamName(s *string) *ExamCenterHallUpdateOne {
	if s != nil {
		echuo.SetExamName(*s)
	}
	return echuo
}

// ClearExamName clears the value of the "ExamName" field.
func (echuo *ExamCenterHallUpdateOne) ClearExamName() *ExamCenterHallUpdateOne {
	echuo.mutation.ClearExamName()
	return echuo
}

// SetCenterCityName sets the "CenterCityName" field.
func (echuo *ExamCenterHallUpdateOne) SetCenterCityName(s string) *ExamCenterHallUpdateOne {
	echuo.mutation.SetCenterCityName(s)
	return echuo
}

// SetNillableCenterCityName sets the "CenterCityName" field if the given value is not nil.
func (echuo *ExamCenterHallUpdateOne) SetNillableCenterCityName(s *string) *ExamCenterHallUpdateOne {
	if s != nil {
		echuo.SetCenterCityName(*s)
	}
	return echuo
}

// ClearCenterCityName clears the value of the "CenterCityName" field.
func (echuo *ExamCenterHallUpdateOne) ClearCenterCityName() *ExamCenterHallUpdateOne {
	echuo.mutation.ClearCenterCityName()
	return echuo
}

// SetConductedByFacilityID sets the "ConductedByFacilityID" field.
func (echuo *ExamCenterHallUpdateOne) SetConductedByFacilityID(s string) *ExamCenterHallUpdateOne {
	echuo.mutation.SetConductedByFacilityID(s)
	return echuo
}

// SetNillableConductedByFacilityID sets the "ConductedByFacilityID" field if the given value is not nil.
func (echuo *ExamCenterHallUpdateOne) SetNillableConductedByFacilityID(s *string) *ExamCenterHallUpdateOne {
	if s != nil {
		echuo.SetConductedByFacilityID(*s)
	}
	return echuo
}

// ClearConductedByFacilityID clears the value of the "ConductedByFacilityID" field.
func (echuo *ExamCenterHallUpdateOne) ClearConductedByFacilityID() *ExamCenterHallUpdateOne {
	echuo.mutation.ClearConductedByFacilityID()
	return echuo
}

// SetConductedBy sets the "ConductedBy" field.
func (echuo *ExamCenterHallUpdateOne) SetConductedBy(s string) *ExamCenterHallUpdateOne {
	echuo.mutation.SetConductedBy(s)
	return echuo
}

// SetNillableConductedBy sets the "ConductedBy" field if the given value is not nil.
func (echuo *ExamCenterHallUpdateOne) SetNillableConductedBy(s *string) *ExamCenterHallUpdateOne {
	if s != nil {
		echuo.SetConductedBy(*s)
	}
	return echuo
}

// ClearConductedBy clears the value of the "ConductedBy" field.
func (echuo *ExamCenterHallUpdateOne) ClearConductedBy() *ExamCenterHallUpdateOne {
	echuo.mutation.ClearConductedBy()
	return echuo
}

// SetHallName sets the "HallName" field.
func (echuo *ExamCenterHallUpdateOne) SetHallName(s string) *ExamCenterHallUpdateOne {
	echuo.mutation.SetHallName(s)
	return echuo
}

// SetNillableHallName sets the "HallName" field if the given value is not nil.
func (echuo *ExamCenterHallUpdateOne) SetNillableHallName(s *string) *ExamCenterHallUpdateOne {
	if s != nil {
		echuo.SetHallName(*s)
	}
	return echuo
}

// ClearHallName clears the value of the "HallName" field.
func (echuo *ExamCenterHallUpdateOne) ClearHallName() *ExamCenterHallUpdateOne {
	echuo.mutation.ClearHallName()
	return echuo
}

// SetAdminCircleOfficeID sets the "AdminCircleOfficeID" field.
func (echuo *ExamCenterHallUpdateOne) SetAdminCircleOfficeID(s string) *ExamCenterHallUpdateOne {
	echuo.mutation.SetAdminCircleOfficeID(s)
	return echuo
}

// SetNillableAdminCircleOfficeID sets the "AdminCircleOfficeID" field if the given value is not nil.
func (echuo *ExamCenterHallUpdateOne) SetNillableAdminCircleOfficeID(s *string) *ExamCenterHallUpdateOne {
	if s != nil {
		echuo.SetAdminCircleOfficeID(*s)
	}
	return echuo
}

// ClearAdminCircleOfficeID clears the value of the "AdminCircleOfficeID" field.
func (echuo *ExamCenterHallUpdateOne) ClearAdminCircleOfficeID() *ExamCenterHallUpdateOne {
	echuo.mutation.ClearAdminCircleOfficeID()
	return echuo
}

// SetMappingIdentificationNumber sets the "MappingIdentificationNumber" field.
func (echuo *ExamCenterHallUpdateOne) SetMappingIdentificationNumber(smin []schema.StrucMappingIdentificationNumber) *ExamCenterHallUpdateOne {
	echuo.mutation.SetMappingIdentificationNumber(smin)
	return echuo
}

// AppendMappingIdentificationNumber appends smin to the "MappingIdentificationNumber" field.
func (echuo *ExamCenterHallUpdateOne) AppendMappingIdentificationNumber(smin []schema.StrucMappingIdentificationNumber) *ExamCenterHallUpdateOne {
	echuo.mutation.AppendMappingIdentificationNumber(smin)
	return echuo
}

// ClearMappingIdentificationNumber clears the value of the "MappingIdentificationNumber" field.
func (echuo *ExamCenterHallUpdateOne) ClearMappingIdentificationNumber() *ExamCenterHallUpdateOne {
	echuo.mutation.ClearMappingIdentificationNumber()
	return echuo
}

// SetStatus sets the "Status" field.
func (echuo *ExamCenterHallUpdateOne) SetStatus(s string) *ExamCenterHallUpdateOne {
	echuo.mutation.SetStatus(s)
	return echuo
}

// SetNillableStatus sets the "Status" field if the given value is not nil.
func (echuo *ExamCenterHallUpdateOne) SetNillableStatus(s *string) *ExamCenterHallUpdateOne {
	if s != nil {
		echuo.SetStatus(*s)
	}
	return echuo
}

// ClearStatus clears the value of the "Status" field.
func (echuo *ExamCenterHallUpdateOne) ClearStatus() *ExamCenterHallUpdateOne {
	echuo.mutation.ClearStatus()
	return echuo
}

// SetCreatedById sets the "CreatedById" field.
func (echuo *ExamCenterHallUpdateOne) SetCreatedById(i int64) *ExamCenterHallUpdateOne {
	echuo.mutation.ResetCreatedById()
	echuo.mutation.SetCreatedById(i)
	return echuo
}

// SetNillableCreatedById sets the "CreatedById" field if the given value is not nil.
func (echuo *ExamCenterHallUpdateOne) SetNillableCreatedById(i *int64) *ExamCenterHallUpdateOne {
	if i != nil {
		echuo.SetCreatedById(*i)
	}
	return echuo
}

// AddCreatedById adds i to the "CreatedById" field.
func (echuo *ExamCenterHallUpdateOne) AddCreatedById(i int64) *ExamCenterHallUpdateOne {
	echuo.mutation.AddCreatedById(i)
	return echuo
}

// ClearCreatedById clears the value of the "CreatedById" field.
func (echuo *ExamCenterHallUpdateOne) ClearCreatedById() *ExamCenterHallUpdateOne {
	echuo.mutation.ClearCreatedById()
	return echuo
}

// SetCreatedByUserName sets the "CreatedByUserName" field.
func (echuo *ExamCenterHallUpdateOne) SetCreatedByUserName(s string) *ExamCenterHallUpdateOne {
	echuo.mutation.SetCreatedByUserName(s)
	return echuo
}

// SetNillableCreatedByUserName sets the "CreatedByUserName" field if the given value is not nil.
func (echuo *ExamCenterHallUpdateOne) SetNillableCreatedByUserName(s *string) *ExamCenterHallUpdateOne {
	if s != nil {
		echuo.SetCreatedByUserName(*s)
	}
	return echuo
}

// ClearCreatedByUserName clears the value of the "CreatedByUserName" field.
func (echuo *ExamCenterHallUpdateOne) ClearCreatedByUserName() *ExamCenterHallUpdateOne {
	echuo.mutation.ClearCreatedByUserName()
	return echuo
}

// SetCreatedByEmpId sets the "CreatedByEmpId" field.
func (echuo *ExamCenterHallUpdateOne) SetCreatedByEmpId(i int64) *ExamCenterHallUpdateOne {
	echuo.mutation.ResetCreatedByEmpId()
	echuo.mutation.SetCreatedByEmpId(i)
	return echuo
}

// SetNillableCreatedByEmpId sets the "CreatedByEmpId" field if the given value is not nil.
func (echuo *ExamCenterHallUpdateOne) SetNillableCreatedByEmpId(i *int64) *ExamCenterHallUpdateOne {
	if i != nil {
		echuo.SetCreatedByEmpId(*i)
	}
	return echuo
}

// AddCreatedByEmpId adds i to the "CreatedByEmpId" field.
func (echuo *ExamCenterHallUpdateOne) AddCreatedByEmpId(i int64) *ExamCenterHallUpdateOne {
	echuo.mutation.AddCreatedByEmpId(i)
	return echuo
}

// ClearCreatedByEmpId clears the value of the "CreatedByEmpId" field.
func (echuo *ExamCenterHallUpdateOne) ClearCreatedByEmpId() *ExamCenterHallUpdateOne {
	echuo.mutation.ClearCreatedByEmpId()
	return echuo
}

// SetCreatedByDesignation sets the "CreatedByDesignation" field.
func (echuo *ExamCenterHallUpdateOne) SetCreatedByDesignation(s string) *ExamCenterHallUpdateOne {
	echuo.mutation.SetCreatedByDesignation(s)
	return echuo
}

// SetNillableCreatedByDesignation sets the "CreatedByDesignation" field if the given value is not nil.
func (echuo *ExamCenterHallUpdateOne) SetNillableCreatedByDesignation(s *string) *ExamCenterHallUpdateOne {
	if s != nil {
		echuo.SetCreatedByDesignation(*s)
	}
	return echuo
}

// ClearCreatedByDesignation clears the value of the "CreatedByDesignation" field.
func (echuo *ExamCenterHallUpdateOne) ClearCreatedByDesignation() *ExamCenterHallUpdateOne {
	echuo.mutation.ClearCreatedByDesignation()
	return echuo
}

// SetCreatedDate sets the "CreatedDate" field.
func (echuo *ExamCenterHallUpdateOne) SetCreatedDate(t time.Time) *ExamCenterHallUpdateOne {
	echuo.mutation.SetCreatedDate(t)
	return echuo
}

// SetNillableCreatedDate sets the "CreatedDate" field if the given value is not nil.
func (echuo *ExamCenterHallUpdateOne) SetNillableCreatedDate(t *time.Time) *ExamCenterHallUpdateOne {
	if t != nil {
		echuo.SetCreatedDate(*t)
	}
	return echuo
}

// ClearCreatedDate clears the value of the "CreatedDate" field.
func (echuo *ExamCenterHallUpdateOne) ClearCreatedDate() *ExamCenterHallUpdateOne {
	echuo.mutation.ClearCreatedDate()
	return echuo
}

// SetModifiedById sets the "ModifiedById" field.
func (echuo *ExamCenterHallUpdateOne) SetModifiedById(i int64) *ExamCenterHallUpdateOne {
	echuo.mutation.ResetModifiedById()
	echuo.mutation.SetModifiedById(i)
	return echuo
}

// SetNillableModifiedById sets the "ModifiedById" field if the given value is not nil.
func (echuo *ExamCenterHallUpdateOne) SetNillableModifiedById(i *int64) *ExamCenterHallUpdateOne {
	if i != nil {
		echuo.SetModifiedById(*i)
	}
	return echuo
}

// AddModifiedById adds i to the "ModifiedById" field.
func (echuo *ExamCenterHallUpdateOne) AddModifiedById(i int64) *ExamCenterHallUpdateOne {
	echuo.mutation.AddModifiedById(i)
	return echuo
}

// ClearModifiedById clears the value of the "ModifiedById" field.
func (echuo *ExamCenterHallUpdateOne) ClearModifiedById() *ExamCenterHallUpdateOne {
	echuo.mutation.ClearModifiedById()
	return echuo
}

// SetModifiedByUserName sets the "ModifiedByUserName" field.
func (echuo *ExamCenterHallUpdateOne) SetModifiedByUserName(s string) *ExamCenterHallUpdateOne {
	echuo.mutation.SetModifiedByUserName(s)
	return echuo
}

// SetNillableModifiedByUserName sets the "ModifiedByUserName" field if the given value is not nil.
func (echuo *ExamCenterHallUpdateOne) SetNillableModifiedByUserName(s *string) *ExamCenterHallUpdateOne {
	if s != nil {
		echuo.SetModifiedByUserName(*s)
	}
	return echuo
}

// ClearModifiedByUserName clears the value of the "ModifiedByUserName" field.
func (echuo *ExamCenterHallUpdateOne) ClearModifiedByUserName() *ExamCenterHallUpdateOne {
	echuo.mutation.ClearModifiedByUserName()
	return echuo
}

// SetModifiedByEmpId sets the "ModifiedByEmpId" field.
func (echuo *ExamCenterHallUpdateOne) SetModifiedByEmpId(i int64) *ExamCenterHallUpdateOne {
	echuo.mutation.ResetModifiedByEmpId()
	echuo.mutation.SetModifiedByEmpId(i)
	return echuo
}

// SetNillableModifiedByEmpId sets the "ModifiedByEmpId" field if the given value is not nil.
func (echuo *ExamCenterHallUpdateOne) SetNillableModifiedByEmpId(i *int64) *ExamCenterHallUpdateOne {
	if i != nil {
		echuo.SetModifiedByEmpId(*i)
	}
	return echuo
}

// AddModifiedByEmpId adds i to the "ModifiedByEmpId" field.
func (echuo *ExamCenterHallUpdateOne) AddModifiedByEmpId(i int64) *ExamCenterHallUpdateOne {
	echuo.mutation.AddModifiedByEmpId(i)
	return echuo
}

// ClearModifiedByEmpId clears the value of the "ModifiedByEmpId" field.
func (echuo *ExamCenterHallUpdateOne) ClearModifiedByEmpId() *ExamCenterHallUpdateOne {
	echuo.mutation.ClearModifiedByEmpId()
	return echuo
}

// SetModifiedByDesignantion sets the "ModifiedByDesignantion" field.
func (echuo *ExamCenterHallUpdateOne) SetModifiedByDesignantion(s string) *ExamCenterHallUpdateOne {
	echuo.mutation.SetModifiedByDesignantion(s)
	return echuo
}

// SetNillableModifiedByDesignantion sets the "ModifiedByDesignantion" field if the given value is not nil.
func (echuo *ExamCenterHallUpdateOne) SetNillableModifiedByDesignantion(s *string) *ExamCenterHallUpdateOne {
	if s != nil {
		echuo.SetModifiedByDesignantion(*s)
	}
	return echuo
}

// ClearModifiedByDesignantion clears the value of the "ModifiedByDesignantion" field.
func (echuo *ExamCenterHallUpdateOne) ClearModifiedByDesignantion() *ExamCenterHallUpdateOne {
	echuo.mutation.ClearModifiedByDesignantion()
	return echuo
}

// SetModifiedDate sets the "ModifiedDate" field.
func (echuo *ExamCenterHallUpdateOne) SetModifiedDate(t time.Time) *ExamCenterHallUpdateOne {
	echuo.mutation.SetModifiedDate(t)
	return echuo
}

// SetNillableModifiedDate sets the "ModifiedDate" field if the given value is not nil.
func (echuo *ExamCenterHallUpdateOne) SetNillableModifiedDate(t *time.Time) *ExamCenterHallUpdateOne {
	if t != nil {
		echuo.SetModifiedDate(*t)
	}
	return echuo
}

// ClearModifiedDate clears the value of the "ModifiedDate" field.
func (echuo *ExamCenterHallUpdateOne) ClearModifiedDate() *ExamCenterHallUpdateOne {
	echuo.mutation.ClearModifiedDate()
	return echuo
}

// SetDeletedById sets the "DeletedById" field.
func (echuo *ExamCenterHallUpdateOne) SetDeletedById(i int64) *ExamCenterHallUpdateOne {
	echuo.mutation.ResetDeletedById()
	echuo.mutation.SetDeletedById(i)
	return echuo
}

// SetNillableDeletedById sets the "DeletedById" field if the given value is not nil.
func (echuo *ExamCenterHallUpdateOne) SetNillableDeletedById(i *int64) *ExamCenterHallUpdateOne {
	if i != nil {
		echuo.SetDeletedById(*i)
	}
	return echuo
}

// AddDeletedById adds i to the "DeletedById" field.
func (echuo *ExamCenterHallUpdateOne) AddDeletedById(i int64) *ExamCenterHallUpdateOne {
	echuo.mutation.AddDeletedById(i)
	return echuo
}

// ClearDeletedById clears the value of the "DeletedById" field.
func (echuo *ExamCenterHallUpdateOne) ClearDeletedById() *ExamCenterHallUpdateOne {
	echuo.mutation.ClearDeletedById()
	return echuo
}

// SetDeletedByUserName sets the "DeletedByUserName" field.
func (echuo *ExamCenterHallUpdateOne) SetDeletedByUserName(s string) *ExamCenterHallUpdateOne {
	echuo.mutation.SetDeletedByUserName(s)
	return echuo
}

// SetNillableDeletedByUserName sets the "DeletedByUserName" field if the given value is not nil.
func (echuo *ExamCenterHallUpdateOne) SetNillableDeletedByUserName(s *string) *ExamCenterHallUpdateOne {
	if s != nil {
		echuo.SetDeletedByUserName(*s)
	}
	return echuo
}

// ClearDeletedByUserName clears the value of the "DeletedByUserName" field.
func (echuo *ExamCenterHallUpdateOne) ClearDeletedByUserName() *ExamCenterHallUpdateOne {
	echuo.mutation.ClearDeletedByUserName()
	return echuo
}

// SetDeletedByEmpId sets the "DeletedByEmpId" field.
func (echuo *ExamCenterHallUpdateOne) SetDeletedByEmpId(i int64) *ExamCenterHallUpdateOne {
	echuo.mutation.ResetDeletedByEmpId()
	echuo.mutation.SetDeletedByEmpId(i)
	return echuo
}

// SetNillableDeletedByEmpId sets the "DeletedByEmpId" field if the given value is not nil.
func (echuo *ExamCenterHallUpdateOne) SetNillableDeletedByEmpId(i *int64) *ExamCenterHallUpdateOne {
	if i != nil {
		echuo.SetDeletedByEmpId(*i)
	}
	return echuo
}

// AddDeletedByEmpId adds i to the "DeletedByEmpId" field.
func (echuo *ExamCenterHallUpdateOne) AddDeletedByEmpId(i int64) *ExamCenterHallUpdateOne {
	echuo.mutation.AddDeletedByEmpId(i)
	return echuo
}

// ClearDeletedByEmpId clears the value of the "DeletedByEmpId" field.
func (echuo *ExamCenterHallUpdateOne) ClearDeletedByEmpId() *ExamCenterHallUpdateOne {
	echuo.mutation.ClearDeletedByEmpId()
	return echuo
}

// SetDeletedByDesignation sets the "DeletedByDesignation" field.
func (echuo *ExamCenterHallUpdateOne) SetDeletedByDesignation(s string) *ExamCenterHallUpdateOne {
	echuo.mutation.SetDeletedByDesignation(s)
	return echuo
}

// SetNillableDeletedByDesignation sets the "DeletedByDesignation" field if the given value is not nil.
func (echuo *ExamCenterHallUpdateOne) SetNillableDeletedByDesignation(s *string) *ExamCenterHallUpdateOne {
	if s != nil {
		echuo.SetDeletedByDesignation(*s)
	}
	return echuo
}

// ClearDeletedByDesignation clears the value of the "DeletedByDesignation" field.
func (echuo *ExamCenterHallUpdateOne) ClearDeletedByDesignation() *ExamCenterHallUpdateOne {
	echuo.mutation.ClearDeletedByDesignation()
	return echuo
}

// SetDeletedDate sets the "DeletedDate" field.
func (echuo *ExamCenterHallUpdateOne) SetDeletedDate(t time.Time) *ExamCenterHallUpdateOne {
	echuo.mutation.SetDeletedDate(t)
	return echuo
}

// SetNillableDeletedDate sets the "DeletedDate" field if the given value is not nil.
func (echuo *ExamCenterHallUpdateOne) SetNillableDeletedDate(t *time.Time) *ExamCenterHallUpdateOne {
	if t != nil {
		echuo.SetDeletedDate(*t)
	}
	return echuo
}

// ClearDeletedDate clears the value of the "DeletedDate" field.
func (echuo *ExamCenterHallUpdateOne) ClearDeletedDate() *ExamCenterHallUpdateOne {
	echuo.mutation.ClearDeletedDate()
	return echuo
}

// SetUpdatedAt sets the "UpdatedAt" field.
func (echuo *ExamCenterHallUpdateOne) SetUpdatedAt(t time.Time) *ExamCenterHallUpdateOne {
	echuo.mutation.SetUpdatedAt(t)
	return echuo
}

// SetNillableUpdatedAt sets the "UpdatedAt" field if the given value is not nil.
func (echuo *ExamCenterHallUpdateOne) SetNillableUpdatedAt(t *time.Time) *ExamCenterHallUpdateOne {
	if t != nil {
		echuo.SetUpdatedAt(*t)
	}
	return echuo
}

// ClearUpdatedAt clears the value of the "UpdatedAt" field.
func (echuo *ExamCenterHallUpdateOne) ClearUpdatedAt() *ExamCenterHallUpdateOne {
	echuo.mutation.ClearUpdatedAt()
	return echuo
}

// SetNoSeats sets the "NoSeats" field.
func (echuo *ExamCenterHallUpdateOne) SetNoSeats(i int32) *ExamCenterHallUpdateOne {
	echuo.mutation.ResetNoSeats()
	echuo.mutation.SetNoSeats(i)
	return echuo
}

// SetNillableNoSeats sets the "NoSeats" field if the given value is not nil.
func (echuo *ExamCenterHallUpdateOne) SetNillableNoSeats(i *int32) *ExamCenterHallUpdateOne {
	if i != nil {
		echuo.SetNoSeats(*i)
	}
	return echuo
}

// AddNoSeats adds i to the "NoSeats" field.
func (echuo *ExamCenterHallUpdateOne) AddNoSeats(i int32) *ExamCenterHallUpdateOne {
	echuo.mutation.AddNoSeats(i)
	return echuo
}

// ClearNoSeats clears the value of the "NoSeats" field.
func (echuo *ExamCenterHallUpdateOne) ClearNoSeats() *ExamCenterHallUpdateOne {
	echuo.mutation.ClearNoSeats()
	return echuo
}

// SetExaCenterHallID sets the "ExaCenterHall" edge to the Center entity by ID.
func (echuo *ExamCenterHallUpdateOne) SetExaCenterHallID(id int32) *ExamCenterHallUpdateOne {
	echuo.mutation.SetExaCenterHallID(id)
	return echuo
}

// SetNillableExaCenterHallID sets the "ExaCenterHall" edge to the Center entity by ID if the given value is not nil.
func (echuo *ExamCenterHallUpdateOne) SetNillableExaCenterHallID(id *int32) *ExamCenterHallUpdateOne {
	if id != nil {
		echuo = echuo.SetExaCenterHallID(*id)
	}
	return echuo
}

// SetExaCenterHall sets the "ExaCenterHall" edge to the Center entity.
func (echuo *ExamCenterHallUpdateOne) SetExaCenterHall(c *Center) *ExamCenterHallUpdateOne {
	return echuo.SetExaCenterHallID(c.ID)
}

// Mutation returns the ExamCenterHallMutation object of the builder.
func (echuo *ExamCenterHallUpdateOne) Mutation() *ExamCenterHallMutation {
	return echuo.mutation
}

// ClearExaCenterHall clears the "ExaCenterHall" edge to the Center entity.
func (echuo *ExamCenterHallUpdateOne) ClearExaCenterHall() *ExamCenterHallUpdateOne {
	echuo.mutation.ClearExaCenterHall()
	return echuo
}

// Where appends a list predicates to the ExamCenterHallUpdate builder.
func (echuo *ExamCenterHallUpdateOne) Where(ps ...predicate.ExamCenterHall) *ExamCenterHallUpdateOne {
	echuo.mutation.Where(ps...)
	return echuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (echuo *ExamCenterHallUpdateOne) Select(field string, fields ...string) *ExamCenterHallUpdateOne {
	echuo.fields = append([]string{field}, fields...)
	return echuo
}

// Save executes the query and returns the updated ExamCenterHall entity.
func (echuo *ExamCenterHallUpdateOne) Save(ctx context.Context) (*ExamCenterHall, error) {
	return withHooks(ctx, echuo.sqlSave, echuo.mutation, echuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (echuo *ExamCenterHallUpdateOne) SaveX(ctx context.Context) *ExamCenterHall {
	node, err := echuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (echuo *ExamCenterHallUpdateOne) Exec(ctx context.Context) error {
	_, err := echuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (echuo *ExamCenterHallUpdateOne) ExecX(ctx context.Context) {
	if err := echuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (echuo *ExamCenterHallUpdateOne) sqlSave(ctx context.Context) (_node *ExamCenterHall, err error) {
	_spec := sqlgraph.NewUpdateSpec(examcenterhall.Table, examcenterhall.Columns, sqlgraph.NewFieldSpec(examcenterhall.FieldID, field.TypeInt32))
	id, ok := echuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ExamCenterHall.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := echuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, examcenterhall.FieldID)
		for _, f := range fields {
			if !examcenterhall.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != examcenterhall.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := echuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := echuo.mutation.CityID(); ok {
		_spec.SetField(examcenterhall.FieldCityID, field.TypeInt32, value)
	}
	if value, ok := echuo.mutation.AddedCityID(); ok {
		_spec.AddField(examcenterhall.FieldCityID, field.TypeInt32, value)
	}
	if echuo.mutation.CityIDCleared() {
		_spec.ClearField(examcenterhall.FieldCityID, field.TypeInt32)
	}
	if value, ok := echuo.mutation.ExamCenterName(); ok {
		_spec.SetField(examcenterhall.FieldExamCenterName, field.TypeString, value)
	}
	if echuo.mutation.ExamCenterNameCleared() {
		_spec.ClearField(examcenterhall.FieldExamCenterName, field.TypeString)
	}
	if value, ok := echuo.mutation.ExamYear(); ok {
		_spec.SetField(examcenterhall.FieldExamYear, field.TypeString, value)
	}
	if echuo.mutation.ExamYearCleared() {
		_spec.ClearField(examcenterhall.FieldExamYear, field.TypeString)
	}
	if value, ok := echuo.mutation.ExamCode(); ok {
		_spec.SetField(examcenterhall.FieldExamCode, field.TypeInt32, value)
	}
	if value, ok := echuo.mutation.AddedExamCode(); ok {
		_spec.AddField(examcenterhall.FieldExamCode, field.TypeInt32, value)
	}
	if echuo.mutation.ExamCodeCleared() {
		_spec.ClearField(examcenterhall.FieldExamCode, field.TypeInt32)
	}
	if value, ok := echuo.mutation.ExamName(); ok {
		_spec.SetField(examcenterhall.FieldExamName, field.TypeString, value)
	}
	if echuo.mutation.ExamNameCleared() {
		_spec.ClearField(examcenterhall.FieldExamName, field.TypeString)
	}
	if value, ok := echuo.mutation.CenterCityName(); ok {
		_spec.SetField(examcenterhall.FieldCenterCityName, field.TypeString, value)
	}
	if echuo.mutation.CenterCityNameCleared() {
		_spec.ClearField(examcenterhall.FieldCenterCityName, field.TypeString)
	}
	if value, ok := echuo.mutation.ConductedByFacilityID(); ok {
		_spec.SetField(examcenterhall.FieldConductedByFacilityID, field.TypeString, value)
	}
	if echuo.mutation.ConductedByFacilityIDCleared() {
		_spec.ClearField(examcenterhall.FieldConductedByFacilityID, field.TypeString)
	}
	if value, ok := echuo.mutation.ConductedBy(); ok {
		_spec.SetField(examcenterhall.FieldConductedBy, field.TypeString, value)
	}
	if echuo.mutation.ConductedByCleared() {
		_spec.ClearField(examcenterhall.FieldConductedBy, field.TypeString)
	}
	if value, ok := echuo.mutation.HallName(); ok {
		_spec.SetField(examcenterhall.FieldHallName, field.TypeString, value)
	}
	if echuo.mutation.HallNameCleared() {
		_spec.ClearField(examcenterhall.FieldHallName, field.TypeString)
	}
	if value, ok := echuo.mutation.AdminCircleOfficeID(); ok {
		_spec.SetField(examcenterhall.FieldAdminCircleOfficeID, field.TypeString, value)
	}
	if echuo.mutation.AdminCircleOfficeIDCleared() {
		_spec.ClearField(examcenterhall.FieldAdminCircleOfficeID, field.TypeString)
	}
	if value, ok := echuo.mutation.MappingIdentificationNumber(); ok {
		_spec.SetField(examcenterhall.FieldMappingIdentificationNumber, field.TypeJSON, value)
	}
	if value, ok := echuo.mutation.AppendedMappingIdentificationNumber(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, examcenterhall.FieldMappingIdentificationNumber, value)
		})
	}
	if echuo.mutation.MappingIdentificationNumberCleared() {
		_spec.ClearField(examcenterhall.FieldMappingIdentificationNumber, field.TypeJSON)
	}
	if value, ok := echuo.mutation.Status(); ok {
		_spec.SetField(examcenterhall.FieldStatus, field.TypeString, value)
	}
	if echuo.mutation.StatusCleared() {
		_spec.ClearField(examcenterhall.FieldStatus, field.TypeString)
	}
	if value, ok := echuo.mutation.CreatedById(); ok {
		_spec.SetField(examcenterhall.FieldCreatedById, field.TypeInt64, value)
	}
	if value, ok := echuo.mutation.AddedCreatedById(); ok {
		_spec.AddField(examcenterhall.FieldCreatedById, field.TypeInt64, value)
	}
	if echuo.mutation.CreatedByIdCleared() {
		_spec.ClearField(examcenterhall.FieldCreatedById, field.TypeInt64)
	}
	if value, ok := echuo.mutation.CreatedByUserName(); ok {
		_spec.SetField(examcenterhall.FieldCreatedByUserName, field.TypeString, value)
	}
	if echuo.mutation.CreatedByUserNameCleared() {
		_spec.ClearField(examcenterhall.FieldCreatedByUserName, field.TypeString)
	}
	if value, ok := echuo.mutation.CreatedByEmpId(); ok {
		_spec.SetField(examcenterhall.FieldCreatedByEmpId, field.TypeInt64, value)
	}
	if value, ok := echuo.mutation.AddedCreatedByEmpId(); ok {
		_spec.AddField(examcenterhall.FieldCreatedByEmpId, field.TypeInt64, value)
	}
	if echuo.mutation.CreatedByEmpIdCleared() {
		_spec.ClearField(examcenterhall.FieldCreatedByEmpId, field.TypeInt64)
	}
	if value, ok := echuo.mutation.CreatedByDesignation(); ok {
		_spec.SetField(examcenterhall.FieldCreatedByDesignation, field.TypeString, value)
	}
	if echuo.mutation.CreatedByDesignationCleared() {
		_spec.ClearField(examcenterhall.FieldCreatedByDesignation, field.TypeString)
	}
	if value, ok := echuo.mutation.CreatedDate(); ok {
		_spec.SetField(examcenterhall.FieldCreatedDate, field.TypeTime, value)
	}
	if echuo.mutation.CreatedDateCleared() {
		_spec.ClearField(examcenterhall.FieldCreatedDate, field.TypeTime)
	}
	if value, ok := echuo.mutation.ModifiedById(); ok {
		_spec.SetField(examcenterhall.FieldModifiedById, field.TypeInt64, value)
	}
	if value, ok := echuo.mutation.AddedModifiedById(); ok {
		_spec.AddField(examcenterhall.FieldModifiedById, field.TypeInt64, value)
	}
	if echuo.mutation.ModifiedByIdCleared() {
		_spec.ClearField(examcenterhall.FieldModifiedById, field.TypeInt64)
	}
	if value, ok := echuo.mutation.ModifiedByUserName(); ok {
		_spec.SetField(examcenterhall.FieldModifiedByUserName, field.TypeString, value)
	}
	if echuo.mutation.ModifiedByUserNameCleared() {
		_spec.ClearField(examcenterhall.FieldModifiedByUserName, field.TypeString)
	}
	if value, ok := echuo.mutation.ModifiedByEmpId(); ok {
		_spec.SetField(examcenterhall.FieldModifiedByEmpId, field.TypeInt64, value)
	}
	if value, ok := echuo.mutation.AddedModifiedByEmpId(); ok {
		_spec.AddField(examcenterhall.FieldModifiedByEmpId, field.TypeInt64, value)
	}
	if echuo.mutation.ModifiedByEmpIdCleared() {
		_spec.ClearField(examcenterhall.FieldModifiedByEmpId, field.TypeInt64)
	}
	if value, ok := echuo.mutation.ModifiedByDesignantion(); ok {
		_spec.SetField(examcenterhall.FieldModifiedByDesignantion, field.TypeString, value)
	}
	if echuo.mutation.ModifiedByDesignantionCleared() {
		_spec.ClearField(examcenterhall.FieldModifiedByDesignantion, field.TypeString)
	}
	if value, ok := echuo.mutation.ModifiedDate(); ok {
		_spec.SetField(examcenterhall.FieldModifiedDate, field.TypeTime, value)
	}
	if echuo.mutation.ModifiedDateCleared() {
		_spec.ClearField(examcenterhall.FieldModifiedDate, field.TypeTime)
	}
	if value, ok := echuo.mutation.DeletedById(); ok {
		_spec.SetField(examcenterhall.FieldDeletedById, field.TypeInt64, value)
	}
	if value, ok := echuo.mutation.AddedDeletedById(); ok {
		_spec.AddField(examcenterhall.FieldDeletedById, field.TypeInt64, value)
	}
	if echuo.mutation.DeletedByIdCleared() {
		_spec.ClearField(examcenterhall.FieldDeletedById, field.TypeInt64)
	}
	if value, ok := echuo.mutation.DeletedByUserName(); ok {
		_spec.SetField(examcenterhall.FieldDeletedByUserName, field.TypeString, value)
	}
	if echuo.mutation.DeletedByUserNameCleared() {
		_spec.ClearField(examcenterhall.FieldDeletedByUserName, field.TypeString)
	}
	if value, ok := echuo.mutation.DeletedByEmpId(); ok {
		_spec.SetField(examcenterhall.FieldDeletedByEmpId, field.TypeInt64, value)
	}
	if value, ok := echuo.mutation.AddedDeletedByEmpId(); ok {
		_spec.AddField(examcenterhall.FieldDeletedByEmpId, field.TypeInt64, value)
	}
	if echuo.mutation.DeletedByEmpIdCleared() {
		_spec.ClearField(examcenterhall.FieldDeletedByEmpId, field.TypeInt64)
	}
	if value, ok := echuo.mutation.DeletedByDesignation(); ok {
		_spec.SetField(examcenterhall.FieldDeletedByDesignation, field.TypeString, value)
	}
	if echuo.mutation.DeletedByDesignationCleared() {
		_spec.ClearField(examcenterhall.FieldDeletedByDesignation, field.TypeString)
	}
	if value, ok := echuo.mutation.DeletedDate(); ok {
		_spec.SetField(examcenterhall.FieldDeletedDate, field.TypeTime, value)
	}
	if echuo.mutation.DeletedDateCleared() {
		_spec.ClearField(examcenterhall.FieldDeletedDate, field.TypeTime)
	}
	if value, ok := echuo.mutation.UpdatedAt(); ok {
		_spec.SetField(examcenterhall.FieldUpdatedAt, field.TypeTime, value)
	}
	if echuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(examcenterhall.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := echuo.mutation.NoSeats(); ok {
		_spec.SetField(examcenterhall.FieldNoSeats, field.TypeInt32, value)
	}
	if value, ok := echuo.mutation.AddedNoSeats(); ok {
		_spec.AddField(examcenterhall.FieldNoSeats, field.TypeInt32, value)
	}
	if echuo.mutation.NoSeatsCleared() {
		_spec.ClearField(examcenterhall.FieldNoSeats, field.TypeInt32)
	}
	if echuo.mutation.ExaCenterHallCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   examcenterhall.ExaCenterHallTable,
			Columns: []string{examcenterhall.ExaCenterHallColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(center.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := echuo.mutation.ExaCenterHallIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   examcenterhall.ExaCenterHallTable,
			Columns: []string{examcenterhall.ExaCenterHallColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(center.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ExamCenterHall{config: echuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, echuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{examcenterhall.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	echuo.mutation.done = true
	return _node, nil
}
