// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"
	"recruit/ent/employeemaster"
	"recruit/ent/exam_applications_gdspa"
	"recruit/ent/exam_applications_gdspm"
	"recruit/ent/exam_applications_ip"
	"recruit/ent/exam_applications_pmpa"
	"recruit/ent/exam_applications_ps"
	"recruit/ent/examnotifications"
	"recruit/ent/logs"
	"recruit/ent/predicate"
	"recruit/ent/rolemaster"
	"recruit/ent/usermaster"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserMasterQuery is the builder for querying UserMaster entities.
type UserMasterQuery struct {
	config
	ctx               *QueryContext
	order             []usermaster.OrderOption
	inters            []Interceptor
	predicates        []predicate.UserMaster
	withRoles         *RoleMasterQuery
	withUsermasterRef *EmployeeMasterQuery
	withUsersPSRef    *ExamApplicationsPSQuery
	withUsersIPRef    *ExamApplicationsIPQuery
	withUserIDRef     *ExamNotificationsQuery
	withUsersGDSPARef *ExamApplicationsGDSPAQuery
	withUsersPMPARef  *ExamApplicationsPMPAQuery
	withUsersGDSPMRef *ExamApplicationsGDSPMQuery
	withLogData       *LogsQuery
	withFKs           bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the UserMasterQuery builder.
func (umq *UserMasterQuery) Where(ps ...predicate.UserMaster) *UserMasterQuery {
	umq.predicates = append(umq.predicates, ps...)
	return umq
}

// Limit the number of records to be returned by this query.
func (umq *UserMasterQuery) Limit(limit int) *UserMasterQuery {
	umq.ctx.Limit = &limit
	return umq
}

// Offset to start from.
func (umq *UserMasterQuery) Offset(offset int) *UserMasterQuery {
	umq.ctx.Offset = &offset
	return umq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (umq *UserMasterQuery) Unique(unique bool) *UserMasterQuery {
	umq.ctx.Unique = &unique
	return umq
}

// Order specifies how the records should be ordered.
func (umq *UserMasterQuery) Order(o ...usermaster.OrderOption) *UserMasterQuery {
	umq.order = append(umq.order, o...)
	return umq
}

// QueryRoles chains the current query on the "roles" edge.
func (umq *UserMasterQuery) QueryRoles() *RoleMasterQuery {
	query := (&RoleMasterClient{config: umq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := umq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := umq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(usermaster.Table, usermaster.FieldID, selector),
			sqlgraph.To(rolemaster.Table, rolemaster.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, usermaster.RolesTable, usermaster.RolesColumn),
		)
		fromU = sqlgraph.SetNeighbors(umq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryUsermasterRef chains the current query on the "UsermasterRef" edge.
func (umq *UserMasterQuery) QueryUsermasterRef() *EmployeeMasterQuery {
	query := (&EmployeeMasterClient{config: umq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := umq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := umq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(usermaster.Table, usermaster.FieldID, selector),
			sqlgraph.To(employeemaster.Table, employeemaster.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, usermaster.UsermasterRefTable, usermaster.UsermasterRefColumn),
		)
		fromU = sqlgraph.SetNeighbors(umq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryUsersPSRef chains the current query on the "UsersPSRef" edge.
func (umq *UserMasterQuery) QueryUsersPSRef() *ExamApplicationsPSQuery {
	query := (&ExamApplicationsPSClient{config: umq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := umq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := umq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(usermaster.Table, usermaster.FieldID, selector),
			sqlgraph.To(exam_applications_ps.Table, exam_applications_ps.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, usermaster.UsersPSRefTable, usermaster.UsersPSRefColumn),
		)
		fromU = sqlgraph.SetNeighbors(umq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryUsersIPRef chains the current query on the "UsersIPRef" edge.
func (umq *UserMasterQuery) QueryUsersIPRef() *ExamApplicationsIPQuery {
	query := (&ExamApplicationsIPClient{config: umq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := umq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := umq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(usermaster.Table, usermaster.FieldID, selector),
			sqlgraph.To(exam_applications_ip.Table, exam_applications_ip.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, usermaster.UsersIPRefTable, usermaster.UsersIPRefColumn),
		)
		fromU = sqlgraph.SetNeighbors(umq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryUserIDRef chains the current query on the "User_ID_Ref" edge.
func (umq *UserMasterQuery) QueryUserIDRef() *ExamNotificationsQuery {
	query := (&ExamNotificationsClient{config: umq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := umq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := umq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(usermaster.Table, usermaster.FieldID, selector),
			sqlgraph.To(examnotifications.Table, examnotifications.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, usermaster.UserIDRefTable, usermaster.UserIDRefColumn),
		)
		fromU = sqlgraph.SetNeighbors(umq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryUsersGDSPARef chains the current query on the "UsersGDSPARef" edge.
func (umq *UserMasterQuery) QueryUsersGDSPARef() *ExamApplicationsGDSPAQuery {
	query := (&ExamApplicationsGDSPAClient{config: umq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := umq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := umq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(usermaster.Table, usermaster.FieldID, selector),
			sqlgraph.To(exam_applications_gdspa.Table, exam_applications_gdspa.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, usermaster.UsersGDSPARefTable, usermaster.UsersGDSPARefColumn),
		)
		fromU = sqlgraph.SetNeighbors(umq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryUsersPMPARef chains the current query on the "UsersPMPARef" edge.
func (umq *UserMasterQuery) QueryUsersPMPARef() *ExamApplicationsPMPAQuery {
	query := (&ExamApplicationsPMPAClient{config: umq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := umq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := umq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(usermaster.Table, usermaster.FieldID, selector),
			sqlgraph.To(exam_applications_pmpa.Table, exam_applications_pmpa.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, usermaster.UsersPMPARefTable, usermaster.UsersPMPARefColumn),
		)
		fromU = sqlgraph.SetNeighbors(umq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryUsersGDSPMRef chains the current query on the "UsersGDSPMRef" edge.
func (umq *UserMasterQuery) QueryUsersGDSPMRef() *ExamApplicationsGDSPMQuery {
	query := (&ExamApplicationsGDSPMClient{config: umq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := umq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := umq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(usermaster.Table, usermaster.FieldID, selector),
			sqlgraph.To(exam_applications_gdspm.Table, exam_applications_gdspm.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, usermaster.UsersGDSPMRefTable, usermaster.UsersGDSPMRefColumn),
		)
		fromU = sqlgraph.SetNeighbors(umq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryLogData chains the current query on the "LogData" edge.
func (umq *UserMasterQuery) QueryLogData() *LogsQuery {
	query := (&LogsClient{config: umq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := umq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := umq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(usermaster.Table, usermaster.FieldID, selector),
			sqlgraph.To(logs.Table, logs.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, usermaster.LogDataTable, usermaster.LogDataColumn),
		)
		fromU = sqlgraph.SetNeighbors(umq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first UserMaster entity from the query.
// Returns a *NotFoundError when no UserMaster was found.
func (umq *UserMasterQuery) First(ctx context.Context) (*UserMaster, error) {
	nodes, err := umq.Limit(1).All(setContextOp(ctx, umq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{usermaster.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (umq *UserMasterQuery) FirstX(ctx context.Context) *UserMaster {
	node, err := umq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first UserMaster ID from the query.
// Returns a *NotFoundError when no UserMaster ID was found.
func (umq *UserMasterQuery) FirstID(ctx context.Context) (id int64, err error) {
	var ids []int64
	if ids, err = umq.Limit(1).IDs(setContextOp(ctx, umq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{usermaster.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (umq *UserMasterQuery) FirstIDX(ctx context.Context) int64 {
	id, err := umq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single UserMaster entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one UserMaster entity is found.
// Returns a *NotFoundError when no UserMaster entities are found.
func (umq *UserMasterQuery) Only(ctx context.Context) (*UserMaster, error) {
	nodes, err := umq.Limit(2).All(setContextOp(ctx, umq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{usermaster.Label}
	default:
		return nil, &NotSingularError{usermaster.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (umq *UserMasterQuery) OnlyX(ctx context.Context) *UserMaster {
	node, err := umq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only UserMaster ID in the query.
// Returns a *NotSingularError when more than one UserMaster ID is found.
// Returns a *NotFoundError when no entities are found.
func (umq *UserMasterQuery) OnlyID(ctx context.Context) (id int64, err error) {
	var ids []int64
	if ids, err = umq.Limit(2).IDs(setContextOp(ctx, umq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{usermaster.Label}
	default:
		err = &NotSingularError{usermaster.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (umq *UserMasterQuery) OnlyIDX(ctx context.Context) int64 {
	id, err := umq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of UserMasters.
func (umq *UserMasterQuery) All(ctx context.Context) ([]*UserMaster, error) {
	ctx = setContextOp(ctx, umq.ctx, "All")
	if err := umq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*UserMaster, *UserMasterQuery]()
	return withInterceptors[[]*UserMaster](ctx, umq, qr, umq.inters)
}

// AllX is like All, but panics if an error occurs.
func (umq *UserMasterQuery) AllX(ctx context.Context) []*UserMaster {
	nodes, err := umq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of UserMaster IDs.
func (umq *UserMasterQuery) IDs(ctx context.Context) (ids []int64, err error) {
	if umq.ctx.Unique == nil && umq.path != nil {
		umq.Unique(true)
	}
	ctx = setContextOp(ctx, umq.ctx, "IDs")
	if err = umq.Select(usermaster.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (umq *UserMasterQuery) IDsX(ctx context.Context) []int64 {
	ids, err := umq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (umq *UserMasterQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, umq.ctx, "Count")
	if err := umq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, umq, querierCount[*UserMasterQuery](), umq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (umq *UserMasterQuery) CountX(ctx context.Context) int {
	count, err := umq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (umq *UserMasterQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, umq.ctx, "Exist")
	switch _, err := umq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (umq *UserMasterQuery) ExistX(ctx context.Context) bool {
	exist, err := umq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the UserMasterQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (umq *UserMasterQuery) Clone() *UserMasterQuery {
	if umq == nil {
		return nil
	}
	return &UserMasterQuery{
		config:            umq.config,
		ctx:               umq.ctx.Clone(),
		order:             append([]usermaster.OrderOption{}, umq.order...),
		inters:            append([]Interceptor{}, umq.inters...),
		predicates:        append([]predicate.UserMaster{}, umq.predicates...),
		withRoles:         umq.withRoles.Clone(),
		withUsermasterRef: umq.withUsermasterRef.Clone(),
		withUsersPSRef:    umq.withUsersPSRef.Clone(),
		withUsersIPRef:    umq.withUsersIPRef.Clone(),
		withUserIDRef:     umq.withUserIDRef.Clone(),
		withUsersGDSPARef: umq.withUsersGDSPARef.Clone(),
		withUsersPMPARef:  umq.withUsersPMPARef.Clone(),
		withUsersGDSPMRef: umq.withUsersGDSPMRef.Clone(),
		withLogData:       umq.withLogData.Clone(),
		// clone intermediate query.
		sql:  umq.sql.Clone(),
		path: umq.path,
	}
}

// WithRoles tells the query-builder to eager-load the nodes that are connected to
// the "roles" edge. The optional arguments are used to configure the query builder of the edge.
func (umq *UserMasterQuery) WithRoles(opts ...func(*RoleMasterQuery)) *UserMasterQuery {
	query := (&RoleMasterClient{config: umq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	umq.withRoles = query
	return umq
}

// WithUsermasterRef tells the query-builder to eager-load the nodes that are connected to
// the "UsermasterRef" edge. The optional arguments are used to configure the query builder of the edge.
func (umq *UserMasterQuery) WithUsermasterRef(opts ...func(*EmployeeMasterQuery)) *UserMasterQuery {
	query := (&EmployeeMasterClient{config: umq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	umq.withUsermasterRef = query
	return umq
}

// WithUsersPSRef tells the query-builder to eager-load the nodes that are connected to
// the "UsersPSRef" edge. The optional arguments are used to configure the query builder of the edge.
func (umq *UserMasterQuery) WithUsersPSRef(opts ...func(*ExamApplicationsPSQuery)) *UserMasterQuery {
	query := (&ExamApplicationsPSClient{config: umq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	umq.withUsersPSRef = query
	return umq
}

// WithUsersIPRef tells the query-builder to eager-load the nodes that are connected to
// the "UsersIPRef" edge. The optional arguments are used to configure the query builder of the edge.
func (umq *UserMasterQuery) WithUsersIPRef(opts ...func(*ExamApplicationsIPQuery)) *UserMasterQuery {
	query := (&ExamApplicationsIPClient{config: umq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	umq.withUsersIPRef = query
	return umq
}

// WithUserIDRef tells the query-builder to eager-load the nodes that are connected to
// the "User_ID_Ref" edge. The optional arguments are used to configure the query builder of the edge.
func (umq *UserMasterQuery) WithUserIDRef(opts ...func(*ExamNotificationsQuery)) *UserMasterQuery {
	query := (&ExamNotificationsClient{config: umq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	umq.withUserIDRef = query
	return umq
}

// WithUsersGDSPARef tells the query-builder to eager-load the nodes that are connected to
// the "UsersGDSPARef" edge. The optional arguments are used to configure the query builder of the edge.
func (umq *UserMasterQuery) WithUsersGDSPARef(opts ...func(*ExamApplicationsGDSPAQuery)) *UserMasterQuery {
	query := (&ExamApplicationsGDSPAClient{config: umq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	umq.withUsersGDSPARef = query
	return umq
}

// WithUsersPMPARef tells the query-builder to eager-load the nodes that are connected to
// the "UsersPMPARef" edge. The optional arguments are used to configure the query builder of the edge.
func (umq *UserMasterQuery) WithUsersPMPARef(opts ...func(*ExamApplicationsPMPAQuery)) *UserMasterQuery {
	query := (&ExamApplicationsPMPAClient{config: umq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	umq.withUsersPMPARef = query
	return umq
}

// WithUsersGDSPMRef tells the query-builder to eager-load the nodes that are connected to
// the "UsersGDSPMRef" edge. The optional arguments are used to configure the query builder of the edge.
func (umq *UserMasterQuery) WithUsersGDSPMRef(opts ...func(*ExamApplicationsGDSPMQuery)) *UserMasterQuery {
	query := (&ExamApplicationsGDSPMClient{config: umq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	umq.withUsersGDSPMRef = query
	return umq
}

// WithLogData tells the query-builder to eager-load the nodes that are connected to
// the "LogData" edge. The optional arguments are used to configure the query builder of the edge.
func (umq *UserMasterQuery) WithLogData(opts ...func(*LogsQuery)) *UserMasterQuery {
	query := (&LogsClient{config: umq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	umq.withLogData = query
	return umq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		EmployeeID int64 `json:"EmployeeID,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.UserMaster.Query().
//		GroupBy(usermaster.FieldEmployeeID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (umq *UserMasterQuery) GroupBy(field string, fields ...string) *UserMasterGroupBy {
	umq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &UserMasterGroupBy{build: umq}
	grbuild.flds = &umq.ctx.Fields
	grbuild.label = usermaster.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		EmployeeID int64 `json:"EmployeeID,omitempty"`
//	}
//
//	client.UserMaster.Query().
//		Select(usermaster.FieldEmployeeID).
//		Scan(ctx, &v)
func (umq *UserMasterQuery) Select(fields ...string) *UserMasterSelect {
	umq.ctx.Fields = append(umq.ctx.Fields, fields...)
	sbuild := &UserMasterSelect{UserMasterQuery: umq}
	sbuild.label = usermaster.Label
	sbuild.flds, sbuild.scan = &umq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a UserMasterSelect configured with the given aggregations.
func (umq *UserMasterQuery) Aggregate(fns ...AggregateFunc) *UserMasterSelect {
	return umq.Select().Aggregate(fns...)
}

func (umq *UserMasterQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range umq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, umq); err != nil {
				return err
			}
		}
	}
	for _, f := range umq.ctx.Fields {
		if !usermaster.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if umq.path != nil {
		prev, err := umq.path(ctx)
		if err != nil {
			return err
		}
		umq.sql = prev
	}
	return nil
}

func (umq *UserMasterQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*UserMaster, error) {
	var (
		nodes       = []*UserMaster{}
		withFKs     = umq.withFKs
		_spec       = umq.querySpec()
		loadedTypes = [9]bool{
			umq.withRoles != nil,
			umq.withUsermasterRef != nil,
			umq.withUsersPSRef != nil,
			umq.withUsersIPRef != nil,
			umq.withUserIDRef != nil,
			umq.withUsersGDSPARef != nil,
			umq.withUsersPMPARef != nil,
			umq.withUsersGDSPMRef != nil,
			umq.withLogData != nil,
		}
	)
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, usermaster.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*UserMaster).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &UserMaster{config: umq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, umq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := umq.withRoles; query != nil {
		if err := umq.loadRoles(ctx, query, nodes, nil,
			func(n *UserMaster, e *RoleMaster) { n.Edges.Roles = e }); err != nil {
			return nil, err
		}
	}
	if query := umq.withUsermasterRef; query != nil {
		if err := umq.loadUsermasterRef(ctx, query, nodes,
			func(n *UserMaster) { n.Edges.UsermasterRef = []*EmployeeMaster{} },
			func(n *UserMaster, e *EmployeeMaster) { n.Edges.UsermasterRef = append(n.Edges.UsermasterRef, e) }); err != nil {
			return nil, err
		}
	}
	if query := umq.withUsersPSRef; query != nil {
		if err := umq.loadUsersPSRef(ctx, query, nodes,
			func(n *UserMaster) { n.Edges.UsersPSRef = []*Exam_Applications_PS{} },
			func(n *UserMaster, e *Exam_Applications_PS) { n.Edges.UsersPSRef = append(n.Edges.UsersPSRef, e) }); err != nil {
			return nil, err
		}
	}
	if query := umq.withUsersIPRef; query != nil {
		if err := umq.loadUsersIPRef(ctx, query, nodes,
			func(n *UserMaster) { n.Edges.UsersIPRef = []*Exam_Applications_IP{} },
			func(n *UserMaster, e *Exam_Applications_IP) { n.Edges.UsersIPRef = append(n.Edges.UsersIPRef, e) }); err != nil {
			return nil, err
		}
	}
	if query := umq.withUserIDRef; query != nil {
		if err := umq.loadUserIDRef(ctx, query, nodes,
			func(n *UserMaster) { n.Edges.UserIDRef = []*ExamNotifications{} },
			func(n *UserMaster, e *ExamNotifications) { n.Edges.UserIDRef = append(n.Edges.UserIDRef, e) }); err != nil {
			return nil, err
		}
	}
	if query := umq.withUsersGDSPARef; query != nil {
		if err := umq.loadUsersGDSPARef(ctx, query, nodes,
			func(n *UserMaster) { n.Edges.UsersGDSPARef = []*Exam_Applications_GDSPA{} },
			func(n *UserMaster, e *Exam_Applications_GDSPA) {
				n.Edges.UsersGDSPARef = append(n.Edges.UsersGDSPARef, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := umq.withUsersPMPARef; query != nil {
		if err := umq.loadUsersPMPARef(ctx, query, nodes,
			func(n *UserMaster) { n.Edges.UsersPMPARef = []*Exam_Applications_PMPA{} },
			func(n *UserMaster, e *Exam_Applications_PMPA) { n.Edges.UsersPMPARef = append(n.Edges.UsersPMPARef, e) }); err != nil {
			return nil, err
		}
	}
	if query := umq.withUsersGDSPMRef; query != nil {
		if err := umq.loadUsersGDSPMRef(ctx, query, nodes,
			func(n *UserMaster) { n.Edges.UsersGDSPMRef = []*Exam_Applications_GDSPM{} },
			func(n *UserMaster, e *Exam_Applications_GDSPM) {
				n.Edges.UsersGDSPMRef = append(n.Edges.UsersGDSPMRef, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := umq.withLogData; query != nil {
		if err := umq.loadLogData(ctx, query, nodes,
			func(n *UserMaster) { n.Edges.LogData = []*Logs{} },
			func(n *UserMaster, e *Logs) { n.Edges.LogData = append(n.Edges.LogData, e) }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (umq *UserMasterQuery) loadRoles(ctx context.Context, query *RoleMasterQuery, nodes []*UserMaster, init func(*UserMaster), assign func(*UserMaster, *RoleMaster)) error {
	ids := make([]int32, 0, len(nodes))
	nodeids := make(map[int32][]*UserMaster)
	for i := range nodes {
		fk := nodes[i].RoleUserCode
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(rolemaster.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "RoleUserCode" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (umq *UserMasterQuery) loadUsermasterRef(ctx context.Context, query *EmployeeMasterQuery, nodes []*UserMaster, init func(*UserMaster), assign func(*UserMaster, *EmployeeMaster)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int64]*UserMaster)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.EmployeeMaster(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(usermaster.UsermasterRefColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.user_master_usermaster_ref
		if fk == nil {
			return fmt.Errorf(`foreign-key "user_master_usermaster_ref" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "user_master_usermaster_ref" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (umq *UserMasterQuery) loadUsersPSRef(ctx context.Context, query *ExamApplicationsPSQuery, nodes []*UserMaster, init func(*UserMaster), assign func(*UserMaster, *Exam_Applications_PS)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int64]*UserMaster)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Exam_Applications_PS(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(usermaster.UsersPSRefColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.user_master_users_ps_ref
		if fk == nil {
			return fmt.Errorf(`foreign-key "user_master_users_ps_ref" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "user_master_users_ps_ref" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (umq *UserMasterQuery) loadUsersIPRef(ctx context.Context, query *ExamApplicationsIPQuery, nodes []*UserMaster, init func(*UserMaster), assign func(*UserMaster, *Exam_Applications_IP)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int64]*UserMaster)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Exam_Applications_IP(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(usermaster.UsersIPRefColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.user_master_users_ip_ref
		if fk == nil {
			return fmt.Errorf(`foreign-key "user_master_users_ip_ref" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "user_master_users_ip_ref" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (umq *UserMasterQuery) loadUserIDRef(ctx context.Context, query *ExamNotificationsQuery, nodes []*UserMaster, init func(*UserMaster), assign func(*UserMaster, *ExamNotifications)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int64]*UserMaster)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(examnotifications.FieldUserID)
	}
	query.Where(predicate.ExamNotifications(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(usermaster.UserIDRefColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.UserID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "UserID" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (umq *UserMasterQuery) loadUsersGDSPARef(ctx context.Context, query *ExamApplicationsGDSPAQuery, nodes []*UserMaster, init func(*UserMaster), assign func(*UserMaster, *Exam_Applications_GDSPA)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int64]*UserMaster)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Exam_Applications_GDSPA(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(usermaster.UsersGDSPARefColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.user_master_users_gdspa_ref
		if fk == nil {
			return fmt.Errorf(`foreign-key "user_master_users_gdspa_ref" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "user_master_users_gdspa_ref" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (umq *UserMasterQuery) loadUsersPMPARef(ctx context.Context, query *ExamApplicationsPMPAQuery, nodes []*UserMaster, init func(*UserMaster), assign func(*UserMaster, *Exam_Applications_PMPA)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int64]*UserMaster)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Exam_Applications_PMPA(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(usermaster.UsersPMPARefColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.user_master_users_pmpa_ref
		if fk == nil {
			return fmt.Errorf(`foreign-key "user_master_users_pmpa_ref" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "user_master_users_pmpa_ref" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (umq *UserMasterQuery) loadUsersGDSPMRef(ctx context.Context, query *ExamApplicationsGDSPMQuery, nodes []*UserMaster, init func(*UserMaster), assign func(*UserMaster, *Exam_Applications_GDSPM)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int64]*UserMaster)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Exam_Applications_GDSPM(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(usermaster.UsersGDSPMRefColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.user_master_users_gdspm_ref
		if fk == nil {
			return fmt.Errorf(`foreign-key "user_master_users_gdspm_ref" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "user_master_users_gdspm_ref" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (umq *UserMasterQuery) loadLogData(ctx context.Context, query *LogsQuery, nodes []*UserMaster, init func(*UserMaster), assign func(*UserMaster, *Logs)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int64]*UserMaster)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Logs(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(usermaster.LogDataColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.user_master_log_data
		if fk == nil {
			return fmt.Errorf(`foreign-key "user_master_log_data" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "user_master_log_data" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (umq *UserMasterQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := umq.querySpec()
	_spec.Node.Columns = umq.ctx.Fields
	if len(umq.ctx.Fields) > 0 {
		_spec.Unique = umq.ctx.Unique != nil && *umq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, umq.driver, _spec)
}

func (umq *UserMasterQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(usermaster.Table, usermaster.Columns, sqlgraph.NewFieldSpec(usermaster.FieldID, field.TypeInt64))
	_spec.From = umq.sql
	if unique := umq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if umq.path != nil {
		_spec.Unique = true
	}
	if fields := umq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, usermaster.FieldID)
		for i := range fields {
			if fields[i] != usermaster.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if umq.withRoles != nil {
			_spec.Node.AddColumnOnce(usermaster.FieldRoleUserCode)
		}
	}
	if ps := umq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := umq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := umq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := umq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (umq *UserMasterQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(umq.driver.Dialect())
	t1 := builder.Table(usermaster.Table)
	columns := umq.ctx.Fields
	if len(columns) == 0 {
		columns = usermaster.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if umq.sql != nil {
		selector = umq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if umq.ctx.Unique != nil && *umq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range umq.predicates {
		p(selector)
	}
	for _, p := range umq.order {
		p(selector)
	}
	if offset := umq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := umq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// UserMasterGroupBy is the group-by builder for UserMaster entities.
type UserMasterGroupBy struct {
	selector
	build *UserMasterQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (umgb *UserMasterGroupBy) Aggregate(fns ...AggregateFunc) *UserMasterGroupBy {
	umgb.fns = append(umgb.fns, fns...)
	return umgb
}

// Scan applies the selector query and scans the result into the given value.
func (umgb *UserMasterGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, umgb.build.ctx, "GroupBy")
	if err := umgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*UserMasterQuery, *UserMasterGroupBy](ctx, umgb.build, umgb, umgb.build.inters, v)
}

func (umgb *UserMasterGroupBy) sqlScan(ctx context.Context, root *UserMasterQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(umgb.fns))
	for _, fn := range umgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*umgb.flds)+len(umgb.fns))
		for _, f := range *umgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*umgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := umgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// UserMasterSelect is the builder for selecting fields of UserMaster entities.
type UserMasterSelect struct {
	*UserMasterQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (ums *UserMasterSelect) Aggregate(fns ...AggregateFunc) *UserMasterSelect {
	ums.fns = append(ums.fns, fns...)
	return ums
}

// Scan applies the selector query and scans the result into the given value.
func (ums *UserMasterSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ums.ctx, "Select")
	if err := ums.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*UserMasterQuery, *UserMasterSelect](ctx, ums.UserMasterQuery, ums, ums.inters, v)
}

func (ums *UserMasterSelect) sqlScan(ctx context.Context, root *UserMasterQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(ums.fns))
	for _, fn := range ums.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*ums.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ums.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
