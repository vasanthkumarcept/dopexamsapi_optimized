// Code generated by ent, DO NOT EDIT.

package ageeligibility

import (
	"recruit/ent/predicate"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int32) predicate.AgeEligibility {
	return predicate.AgeEligibility(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int32) predicate.AgeEligibility {
	return predicate.AgeEligibility(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int32) predicate.AgeEligibility {
	return predicate.AgeEligibility(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int32) predicate.AgeEligibility {
	return predicate.AgeEligibility(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int32) predicate.AgeEligibility {
	return predicate.AgeEligibility(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int32) predicate.AgeEligibility {
	return predicate.AgeEligibility(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int32) predicate.AgeEligibility {
	return predicate.AgeEligibility(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int32) predicate.AgeEligibility {
	return predicate.AgeEligibility(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int32) predicate.AgeEligibility {
	return predicate.AgeEligibility(sql.FieldLTE(FieldID, id))
}

// EligibillityCode applies equality check predicate on the "EligibillityCode" field. It's identical to EligibillityCodeEQ.
func EligibillityCode(v int32) predicate.AgeEligibility {
	return predicate.AgeEligibility(sql.FieldEQ(FieldEligibillityCode, v))
}

// Age applies equality check predicate on the "Age" field. It's identical to AgeEQ.
func Age(v int32) predicate.AgeEligibility {
	return predicate.AgeEligibility(sql.FieldEQ(FieldAge, v))
}

// CategoryID applies equality check predicate on the "CategoryID" field. It's identical to CategoryIDEQ.
func CategoryID(v int32) predicate.AgeEligibility {
	return predicate.AgeEligibility(sql.FieldEQ(FieldCategoryID, v))
}

// EligibillityCodeEQ applies the EQ predicate on the "EligibillityCode" field.
func EligibillityCodeEQ(v int32) predicate.AgeEligibility {
	return predicate.AgeEligibility(sql.FieldEQ(FieldEligibillityCode, v))
}

// EligibillityCodeNEQ applies the NEQ predicate on the "EligibillityCode" field.
func EligibillityCodeNEQ(v int32) predicate.AgeEligibility {
	return predicate.AgeEligibility(sql.FieldNEQ(FieldEligibillityCode, v))
}

// EligibillityCodeIn applies the In predicate on the "EligibillityCode" field.
func EligibillityCodeIn(vs ...int32) predicate.AgeEligibility {
	return predicate.AgeEligibility(sql.FieldIn(FieldEligibillityCode, vs...))
}

// EligibillityCodeNotIn applies the NotIn predicate on the "EligibillityCode" field.
func EligibillityCodeNotIn(vs ...int32) predicate.AgeEligibility {
	return predicate.AgeEligibility(sql.FieldNotIn(FieldEligibillityCode, vs...))
}

// EligibillityCodeGT applies the GT predicate on the "EligibillityCode" field.
func EligibillityCodeGT(v int32) predicate.AgeEligibility {
	return predicate.AgeEligibility(sql.FieldGT(FieldEligibillityCode, v))
}

// EligibillityCodeGTE applies the GTE predicate on the "EligibillityCode" field.
func EligibillityCodeGTE(v int32) predicate.AgeEligibility {
	return predicate.AgeEligibility(sql.FieldGTE(FieldEligibillityCode, v))
}

// EligibillityCodeLT applies the LT predicate on the "EligibillityCode" field.
func EligibillityCodeLT(v int32) predicate.AgeEligibility {
	return predicate.AgeEligibility(sql.FieldLT(FieldEligibillityCode, v))
}

// EligibillityCodeLTE applies the LTE predicate on the "EligibillityCode" field.
func EligibillityCodeLTE(v int32) predicate.AgeEligibility {
	return predicate.AgeEligibility(sql.FieldLTE(FieldEligibillityCode, v))
}

// EligibillityCodeIsNil applies the IsNil predicate on the "EligibillityCode" field.
func EligibillityCodeIsNil() predicate.AgeEligibility {
	return predicate.AgeEligibility(sql.FieldIsNull(FieldEligibillityCode))
}

// EligibillityCodeNotNil applies the NotNil predicate on the "EligibillityCode" field.
func EligibillityCodeNotNil() predicate.AgeEligibility {
	return predicate.AgeEligibility(sql.FieldNotNull(FieldEligibillityCode))
}

// AgeEQ applies the EQ predicate on the "Age" field.
func AgeEQ(v int32) predicate.AgeEligibility {
	return predicate.AgeEligibility(sql.FieldEQ(FieldAge, v))
}

// AgeNEQ applies the NEQ predicate on the "Age" field.
func AgeNEQ(v int32) predicate.AgeEligibility {
	return predicate.AgeEligibility(sql.FieldNEQ(FieldAge, v))
}

// AgeIn applies the In predicate on the "Age" field.
func AgeIn(vs ...int32) predicate.AgeEligibility {
	return predicate.AgeEligibility(sql.FieldIn(FieldAge, vs...))
}

// AgeNotIn applies the NotIn predicate on the "Age" field.
func AgeNotIn(vs ...int32) predicate.AgeEligibility {
	return predicate.AgeEligibility(sql.FieldNotIn(FieldAge, vs...))
}

// AgeGT applies the GT predicate on the "Age" field.
func AgeGT(v int32) predicate.AgeEligibility {
	return predicate.AgeEligibility(sql.FieldGT(FieldAge, v))
}

// AgeGTE applies the GTE predicate on the "Age" field.
func AgeGTE(v int32) predicate.AgeEligibility {
	return predicate.AgeEligibility(sql.FieldGTE(FieldAge, v))
}

// AgeLT applies the LT predicate on the "Age" field.
func AgeLT(v int32) predicate.AgeEligibility {
	return predicate.AgeEligibility(sql.FieldLT(FieldAge, v))
}

// AgeLTE applies the LTE predicate on the "Age" field.
func AgeLTE(v int32) predicate.AgeEligibility {
	return predicate.AgeEligibility(sql.FieldLTE(FieldAge, v))
}

// AgeIsNil applies the IsNil predicate on the "Age" field.
func AgeIsNil() predicate.AgeEligibility {
	return predicate.AgeEligibility(sql.FieldIsNull(FieldAge))
}

// AgeNotNil applies the NotNil predicate on the "Age" field.
func AgeNotNil() predicate.AgeEligibility {
	return predicate.AgeEligibility(sql.FieldNotNull(FieldAge))
}

// CategoryIDEQ applies the EQ predicate on the "CategoryID" field.
func CategoryIDEQ(v int32) predicate.AgeEligibility {
	return predicate.AgeEligibility(sql.FieldEQ(FieldCategoryID, v))
}

// CategoryIDNEQ applies the NEQ predicate on the "CategoryID" field.
func CategoryIDNEQ(v int32) predicate.AgeEligibility {
	return predicate.AgeEligibility(sql.FieldNEQ(FieldCategoryID, v))
}

// CategoryIDIn applies the In predicate on the "CategoryID" field.
func CategoryIDIn(vs ...int32) predicate.AgeEligibility {
	return predicate.AgeEligibility(sql.FieldIn(FieldCategoryID, vs...))
}

// CategoryIDNotIn applies the NotIn predicate on the "CategoryID" field.
func CategoryIDNotIn(vs ...int32) predicate.AgeEligibility {
	return predicate.AgeEligibility(sql.FieldNotIn(FieldCategoryID, vs...))
}

// CategoryIDGT applies the GT predicate on the "CategoryID" field.
func CategoryIDGT(v int32) predicate.AgeEligibility {
	return predicate.AgeEligibility(sql.FieldGT(FieldCategoryID, v))
}

// CategoryIDGTE applies the GTE predicate on the "CategoryID" field.
func CategoryIDGTE(v int32) predicate.AgeEligibility {
	return predicate.AgeEligibility(sql.FieldGTE(FieldCategoryID, v))
}

// CategoryIDLT applies the LT predicate on the "CategoryID" field.
func CategoryIDLT(v int32) predicate.AgeEligibility {
	return predicate.AgeEligibility(sql.FieldLT(FieldCategoryID, v))
}

// CategoryIDLTE applies the LTE predicate on the "CategoryID" field.
func CategoryIDLTE(v int32) predicate.AgeEligibility {
	return predicate.AgeEligibility(sql.FieldLTE(FieldCategoryID, v))
}

// CategoryIDIsNil applies the IsNil predicate on the "CategoryID" field.
func CategoryIDIsNil() predicate.AgeEligibility {
	return predicate.AgeEligibility(sql.FieldIsNull(FieldCategoryID))
}

// CategoryIDNotNil applies the NotNil predicate on the "CategoryID" field.
func CategoryIDNotNil() predicate.AgeEligibility {
	return predicate.AgeEligibility(sql.FieldNotNull(FieldCategoryID))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.AgeEligibility) predicate.AgeEligibility {
	return predicate.AgeEligibility(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.AgeEligibility) predicate.AgeEligibility {
	return predicate.AgeEligibility(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.AgeEligibility) predicate.AgeEligibility {
	return predicate.AgeEligibility(func(s *sql.Selector) {
		p(s.Not())
	})
}
