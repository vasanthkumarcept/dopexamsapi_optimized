// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"recruit/ent/postexampaper"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PostExamPaperCreate is the builder for creating a PostExamPaper entity.
type PostExamPaperCreate struct {
	config
	mutation *PostExamPaperMutation
	hooks    []Hook
}

// SetExamConfigurationExamCode sets the "ExamConfigurationExamCode" field.
func (pepc *PostExamPaperCreate) SetExamConfigurationExamCode(i int32) *PostExamPaperCreate {
	pepc.mutation.SetExamConfigurationExamCode(i)
	return pepc
}

// SetNillableExamConfigurationExamCode sets the "ExamConfigurationExamCode" field if the given value is not nil.
func (pepc *PostExamPaperCreate) SetNillableExamConfigurationExamCode(i *int32) *PostExamPaperCreate {
	if i != nil {
		pepc.SetExamConfigurationExamCode(*i)
	}
	return pepc
}

// SetExamShortDescription sets the "ExamShortDescription" field.
func (pepc *PostExamPaperCreate) SetExamShortDescription(s string) *PostExamPaperCreate {
	pepc.mutation.SetExamShortDescription(s)
	return pepc
}

// SetNillableExamShortDescription sets the "ExamShortDescription" field if the given value is not nil.
func (pepc *PostExamPaperCreate) SetNillableExamShortDescription(s *string) *PostExamPaperCreate {
	if s != nil {
		pepc.SetExamShortDescription(*s)
	}
	return pepc
}

// SetExamLongDescription sets the "ExamLongDescription" field.
func (pepc *PostExamPaperCreate) SetExamLongDescription(s string) *PostExamPaperCreate {
	pepc.mutation.SetExamLongDescription(s)
	return pepc
}

// SetNillableExamLongDescription sets the "ExamLongDescription" field if the given value is not nil.
func (pepc *PostExamPaperCreate) SetNillableExamLongDescription(s *string) *PostExamPaperCreate {
	if s != nil {
		pepc.SetExamLongDescription(*s)
	}
	return pepc
}

// SetExamPaperCode sets the "ExamPaperCode" field.
func (pepc *PostExamPaperCreate) SetExamPaperCode(s string) *PostExamPaperCreate {
	pepc.mutation.SetExamPaperCode(s)
	return pepc
}

// SetNillableExamPaperCode sets the "ExamPaperCode" field if the given value is not nil.
func (pepc *PostExamPaperCreate) SetNillableExamPaperCode(s *string) *PostExamPaperCreate {
	if s != nil {
		pepc.SetExamPaperCode(*s)
	}
	return pepc
}

// SetPaperDescription sets the "PaperDescription" field.
func (pepc *PostExamPaperCreate) SetPaperDescription(s string) *PostExamPaperCreate {
	pepc.mutation.SetPaperDescription(s)
	return pepc
}

// SetNillablePaperDescription sets the "PaperDescription" field if the given value is not nil.
func (pepc *PostExamPaperCreate) SetNillablePaperDescription(s *string) *PostExamPaperCreate {
	if s != nil {
		pepc.SetPaperDescription(*s)
	}
	return pepc
}

// SetEmployeePostPostId sets the "EmployeePost_postId" field.
func (pepc *PostExamPaperCreate) SetEmployeePostPostId(s string) *PostExamPaperCreate {
	pepc.mutation.SetEmployeePostPostId(s)
	return pepc
}

// SetNillableEmployeePostPostId sets the "EmployeePost_postId" field if the given value is not nil.
func (pepc *PostExamPaperCreate) SetNillableEmployeePostPostId(s *string) *PostExamPaperCreate {
	if s != nil {
		pepc.SetEmployeePostPostId(*s)
	}
	return pepc
}

// SetEmployeeGroupGroupId sets the "EmployeeGroup_GroupId" field.
func (pepc *PostExamPaperCreate) SetEmployeeGroupGroupId(s string) *PostExamPaperCreate {
	pepc.mutation.SetEmployeeGroupGroupId(s)
	return pepc
}

// SetNillableEmployeeGroupGroupId sets the "EmployeeGroup_GroupId" field if the given value is not nil.
func (pepc *PostExamPaperCreate) SetNillableEmployeeGroupGroupId(s *string) *PostExamPaperCreate {
	if s != nil {
		pepc.SetEmployeeGroupGroupId(*s)
	}
	return pepc
}

// SetGroupDescription sets the "GroupDescription" field.
func (pepc *PostExamPaperCreate) SetGroupDescription(s string) *PostExamPaperCreate {
	pepc.mutation.SetGroupDescription(s)
	return pepc
}

// SetNillableGroupDescription sets the "GroupDescription" field if the given value is not nil.
func (pepc *PostExamPaperCreate) SetNillableGroupDescription(s *string) *PostExamPaperCreate {
	if s != nil {
		pepc.SetGroupDescription(*s)
	}
	return pepc
}

// SetPostCode sets the "PostCode" field.
func (pepc *PostExamPaperCreate) SetPostCode(s string) *PostExamPaperCreate {
	pepc.mutation.SetPostCode(s)
	return pepc
}

// SetNillablePostCode sets the "PostCode" field if the given value is not nil.
func (pepc *PostExamPaperCreate) SetNillablePostCode(s *string) *PostExamPaperCreate {
	if s != nil {
		pepc.SetPostCode(*s)
	}
	return pepc
}

// SetPostDescription sets the "PostDescription" field.
func (pepc *PostExamPaperCreate) SetPostDescription(s string) *PostExamPaperCreate {
	pepc.mutation.SetPostDescription(s)
	return pepc
}

// SetNillablePostDescription sets the "PostDescription" field if the given value is not nil.
func (pepc *PostExamPaperCreate) SetNillablePostDescription(s *string) *PostExamPaperCreate {
	if s != nil {
		pepc.SetPostDescription(*s)
	}
	return pepc
}

// SetBaseCadre sets the "BaseCadre" field.
func (pepc *PostExamPaperCreate) SetBaseCadre(i int) *PostExamPaperCreate {
	pepc.mutation.SetBaseCadre(i)
	return pepc
}

// SetNillableBaseCadre sets the "BaseCadre" field if the given value is not nil.
func (pepc *PostExamPaperCreate) SetNillableBaseCadre(i *int) *PostExamPaperCreate {
	if i != nil {
		pepc.SetBaseCadre(*i)
	}
	return pepc
}

// SetPayLevel sets the "PayLevel" field.
func (pepc *PostExamPaperCreate) SetPayLevel(s string) *PostExamPaperCreate {
	pepc.mutation.SetPayLevel(s)
	return pepc
}

// SetNillablePayLevel sets the "PayLevel" field if the given value is not nil.
func (pepc *PostExamPaperCreate) SetNillablePayLevel(s *string) *PostExamPaperCreate {
	if s != nil {
		pepc.SetPayLevel(*s)
	}
	return pepc
}

// SetScale sets the "Scale" field.
func (pepc *PostExamPaperCreate) SetScale(s string) *PostExamPaperCreate {
	pepc.mutation.SetScale(s)
	return pepc
}

// SetNillableScale sets the "Scale" field if the given value is not nil.
func (pepc *PostExamPaperCreate) SetNillableScale(s *string) *PostExamPaperCreate {
	if s != nil {
		pepc.SetScale(*s)
	}
	return pepc
}

// SetOrderNumber sets the "OrderNumber" field.
func (pepc *PostExamPaperCreate) SetOrderNumber(s string) *PostExamPaperCreate {
	pepc.mutation.SetOrderNumber(s)
	return pepc
}

// SetNillableOrderNumber sets the "OrderNumber" field if the given value is not nil.
func (pepc *PostExamPaperCreate) SetNillableOrderNumber(s *string) *PostExamPaperCreate {
	if s != nil {
		pepc.SetOrderNumber(*s)
	}
	return pepc
}

// SetStatus sets the "Status" field.
func (pepc *PostExamPaperCreate) SetStatus(s string) *PostExamPaperCreate {
	pepc.mutation.SetStatus(s)
	return pepc
}

// SetNillableStatus sets the "Status" field if the given value is not nil.
func (pepc *PostExamPaperCreate) SetNillableStatus(s *string) *PostExamPaperCreate {
	if s != nil {
		pepc.SetStatus(*s)
	}
	return pepc
}

// SetCreatedById sets the "CreatedById" field.
func (pepc *PostExamPaperCreate) SetCreatedById(i int64) *PostExamPaperCreate {
	pepc.mutation.SetCreatedById(i)
	return pepc
}

// SetNillableCreatedById sets the "CreatedById" field if the given value is not nil.
func (pepc *PostExamPaperCreate) SetNillableCreatedById(i *int64) *PostExamPaperCreate {
	if i != nil {
		pepc.SetCreatedById(*i)
	}
	return pepc
}

// SetCreatedByUserName sets the "CreatedByUserName" field.
func (pepc *PostExamPaperCreate) SetCreatedByUserName(s string) *PostExamPaperCreate {
	pepc.mutation.SetCreatedByUserName(s)
	return pepc
}

// SetNillableCreatedByUserName sets the "CreatedByUserName" field if the given value is not nil.
func (pepc *PostExamPaperCreate) SetNillableCreatedByUserName(s *string) *PostExamPaperCreate {
	if s != nil {
		pepc.SetCreatedByUserName(*s)
	}
	return pepc
}

// SetCreatedByEmployeeId sets the "CreatedByEmployeeId" field.
func (pepc *PostExamPaperCreate) SetCreatedByEmployeeId(s string) *PostExamPaperCreate {
	pepc.mutation.SetCreatedByEmployeeId(s)
	return pepc
}

// SetNillableCreatedByEmployeeId sets the "CreatedByEmployeeId" field if the given value is not nil.
func (pepc *PostExamPaperCreate) SetNillableCreatedByEmployeeId(s *string) *PostExamPaperCreate {
	if s != nil {
		pepc.SetCreatedByEmployeeId(*s)
	}
	return pepc
}

// SetCreatedByDesignation sets the "CreatedByDesignation" field.
func (pepc *PostExamPaperCreate) SetCreatedByDesignation(s string) *PostExamPaperCreate {
	pepc.mutation.SetCreatedByDesignation(s)
	return pepc
}

// SetNillableCreatedByDesignation sets the "CreatedByDesignation" field if the given value is not nil.
func (pepc *PostExamPaperCreate) SetNillableCreatedByDesignation(s *string) *PostExamPaperCreate {
	if s != nil {
		pepc.SetCreatedByDesignation(*s)
	}
	return pepc
}

// SetCreatedDate sets the "CreatedDate" field.
func (pepc *PostExamPaperCreate) SetCreatedDate(t time.Time) *PostExamPaperCreate {
	pepc.mutation.SetCreatedDate(t)
	return pepc
}

// SetNillableCreatedDate sets the "CreatedDate" field if the given value is not nil.
func (pepc *PostExamPaperCreate) SetNillableCreatedDate(t *time.Time) *PostExamPaperCreate {
	if t != nil {
		pepc.SetCreatedDate(*t)
	}
	return pepc
}

// SetVerifiedById sets the "VerifiedById" field.
func (pepc *PostExamPaperCreate) SetVerifiedById(i int64) *PostExamPaperCreate {
	pepc.mutation.SetVerifiedById(i)
	return pepc
}

// SetNillableVerifiedById sets the "VerifiedById" field if the given value is not nil.
func (pepc *PostExamPaperCreate) SetNillableVerifiedById(i *int64) *PostExamPaperCreate {
	if i != nil {
		pepc.SetVerifiedById(*i)
	}
	return pepc
}

// SetVerifiedByUserName sets the "VerifiedByUserName" field.
func (pepc *PostExamPaperCreate) SetVerifiedByUserName(s string) *PostExamPaperCreate {
	pepc.mutation.SetVerifiedByUserName(s)
	return pepc
}

// SetNillableVerifiedByUserName sets the "VerifiedByUserName" field if the given value is not nil.
func (pepc *PostExamPaperCreate) SetNillableVerifiedByUserName(s *string) *PostExamPaperCreate {
	if s != nil {
		pepc.SetVerifiedByUserName(*s)
	}
	return pepc
}

// SetVerifiedByEmployeeId sets the "VerifiedByEmployeeId" field.
func (pepc *PostExamPaperCreate) SetVerifiedByEmployeeId(s string) *PostExamPaperCreate {
	pepc.mutation.SetVerifiedByEmployeeId(s)
	return pepc
}

// SetNillableVerifiedByEmployeeId sets the "VerifiedByEmployeeId" field if the given value is not nil.
func (pepc *PostExamPaperCreate) SetNillableVerifiedByEmployeeId(s *string) *PostExamPaperCreate {
	if s != nil {
		pepc.SetVerifiedByEmployeeId(*s)
	}
	return pepc
}

// SetVerifiedByDesignation sets the "VerifiedByDesignation" field.
func (pepc *PostExamPaperCreate) SetVerifiedByDesignation(s string) *PostExamPaperCreate {
	pepc.mutation.SetVerifiedByDesignation(s)
	return pepc
}

// SetNillableVerifiedByDesignation sets the "VerifiedByDesignation" field if the given value is not nil.
func (pepc *PostExamPaperCreate) SetNillableVerifiedByDesignation(s *string) *PostExamPaperCreate {
	if s != nil {
		pepc.SetVerifiedByDesignation(*s)
	}
	return pepc
}

// SetVerifiedDate sets the "VerifiedDate" field.
func (pepc *PostExamPaperCreate) SetVerifiedDate(t time.Time) *PostExamPaperCreate {
	pepc.mutation.SetVerifiedDate(t)
	return pepc
}

// SetNillableVerifiedDate sets the "VerifiedDate" field if the given value is not nil.
func (pepc *PostExamPaperCreate) SetNillableVerifiedDate(t *time.Time) *PostExamPaperCreate {
	if t != nil {
		pepc.SetVerifiedDate(*t)
	}
	return pepc
}

// SetDeletedById sets the "DeletedById" field.
func (pepc *PostExamPaperCreate) SetDeletedById(i int64) *PostExamPaperCreate {
	pepc.mutation.SetDeletedById(i)
	return pepc
}

// SetNillableDeletedById sets the "DeletedById" field if the given value is not nil.
func (pepc *PostExamPaperCreate) SetNillableDeletedById(i *int64) *PostExamPaperCreate {
	if i != nil {
		pepc.SetDeletedById(*i)
	}
	return pepc
}

// SetDeletedByUserName sets the "DeletedByUserName" field.
func (pepc *PostExamPaperCreate) SetDeletedByUserName(s string) *PostExamPaperCreate {
	pepc.mutation.SetDeletedByUserName(s)
	return pepc
}

// SetNillableDeletedByUserName sets the "DeletedByUserName" field if the given value is not nil.
func (pepc *PostExamPaperCreate) SetNillableDeletedByUserName(s *string) *PostExamPaperCreate {
	if s != nil {
		pepc.SetDeletedByUserName(*s)
	}
	return pepc
}

// SetDeletedByEmployeeId sets the "DeletedByEmployeeId" field.
func (pepc *PostExamPaperCreate) SetDeletedByEmployeeId(s string) *PostExamPaperCreate {
	pepc.mutation.SetDeletedByEmployeeId(s)
	return pepc
}

// SetNillableDeletedByEmployeeId sets the "DeletedByEmployeeId" field if the given value is not nil.
func (pepc *PostExamPaperCreate) SetNillableDeletedByEmployeeId(s *string) *PostExamPaperCreate {
	if s != nil {
		pepc.SetDeletedByEmployeeId(*s)
	}
	return pepc
}

// SetDeletedByDesignation sets the "DeletedByDesignation" field.
func (pepc *PostExamPaperCreate) SetDeletedByDesignation(s string) *PostExamPaperCreate {
	pepc.mutation.SetDeletedByDesignation(s)
	return pepc
}

// SetNillableDeletedByDesignation sets the "DeletedByDesignation" field if the given value is not nil.
func (pepc *PostExamPaperCreate) SetNillableDeletedByDesignation(s *string) *PostExamPaperCreate {
	if s != nil {
		pepc.SetDeletedByDesignation(*s)
	}
	return pepc
}

// SetDeletedDate sets the "DeletedDate" field.
func (pepc *PostExamPaperCreate) SetDeletedDate(t time.Time) *PostExamPaperCreate {
	pepc.mutation.SetDeletedDate(t)
	return pepc
}

// SetNillableDeletedDate sets the "DeletedDate" field if the given value is not nil.
func (pepc *PostExamPaperCreate) SetNillableDeletedDate(t *time.Time) *PostExamPaperCreate {
	if t != nil {
		pepc.SetDeletedDate(*t)
	}
	return pepc
}

// SetID sets the "id" field.
func (pepc *PostExamPaperCreate) SetID(i int32) *PostExamPaperCreate {
	pepc.mutation.SetID(i)
	return pepc
}

// Mutation returns the PostExamPaperMutation object of the builder.
func (pepc *PostExamPaperCreate) Mutation() *PostExamPaperMutation {
	return pepc.mutation
}

// Save creates the PostExamPaper in the database.
func (pepc *PostExamPaperCreate) Save(ctx context.Context) (*PostExamPaper, error) {
	return withHooks(ctx, pepc.sqlSave, pepc.mutation, pepc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pepc *PostExamPaperCreate) SaveX(ctx context.Context) *PostExamPaper {
	v, err := pepc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pepc *PostExamPaperCreate) Exec(ctx context.Context) error {
	_, err := pepc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pepc *PostExamPaperCreate) ExecX(ctx context.Context) {
	if err := pepc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pepc *PostExamPaperCreate) check() error {
	return nil
}

func (pepc *PostExamPaperCreate) sqlSave(ctx context.Context) (*PostExamPaper, error) {
	if err := pepc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pepc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pepc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int32(id)
	}
	pepc.mutation.id = &_node.ID
	pepc.mutation.done = true
	return _node, nil
}

func (pepc *PostExamPaperCreate) createSpec() (*PostExamPaper, *sqlgraph.CreateSpec) {
	var (
		_node = &PostExamPaper{config: pepc.config}
		_spec = sqlgraph.NewCreateSpec(postexampaper.Table, sqlgraph.NewFieldSpec(postexampaper.FieldID, field.TypeInt32))
	)
	if id, ok := pepc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := pepc.mutation.ExamConfigurationExamCode(); ok {
		_spec.SetField(postexampaper.FieldExamConfigurationExamCode, field.TypeInt32, value)
		_node.ExamConfigurationExamCode = value
	}
	if value, ok := pepc.mutation.ExamShortDescription(); ok {
		_spec.SetField(postexampaper.FieldExamShortDescription, field.TypeString, value)
		_node.ExamShortDescription = value
	}
	if value, ok := pepc.mutation.ExamLongDescription(); ok {
		_spec.SetField(postexampaper.FieldExamLongDescription, field.TypeString, value)
		_node.ExamLongDescription = value
	}
	if value, ok := pepc.mutation.ExamPaperCode(); ok {
		_spec.SetField(postexampaper.FieldExamPaperCode, field.TypeString, value)
		_node.ExamPaperCode = value
	}
	if value, ok := pepc.mutation.PaperDescription(); ok {
		_spec.SetField(postexampaper.FieldPaperDescription, field.TypeString, value)
		_node.PaperDescription = value
	}
	if value, ok := pepc.mutation.EmployeePostPostId(); ok {
		_spec.SetField(postexampaper.FieldEmployeePostPostId, field.TypeString, value)
		_node.EmployeePostPostId = value
	}
	if value, ok := pepc.mutation.EmployeeGroupGroupId(); ok {
		_spec.SetField(postexampaper.FieldEmployeeGroupGroupId, field.TypeString, value)
		_node.EmployeeGroupGroupId = value
	}
	if value, ok := pepc.mutation.GroupDescription(); ok {
		_spec.SetField(postexampaper.FieldGroupDescription, field.TypeString, value)
		_node.GroupDescription = value
	}
	if value, ok := pepc.mutation.PostCode(); ok {
		_spec.SetField(postexampaper.FieldPostCode, field.TypeString, value)
		_node.PostCode = value
	}
	if value, ok := pepc.mutation.PostDescription(); ok {
		_spec.SetField(postexampaper.FieldPostDescription, field.TypeString, value)
		_node.PostDescription = value
	}
	if value, ok := pepc.mutation.BaseCadre(); ok {
		_spec.SetField(postexampaper.FieldBaseCadre, field.TypeInt, value)
		_node.BaseCadre = value
	}
	if value, ok := pepc.mutation.PayLevel(); ok {
		_spec.SetField(postexampaper.FieldPayLevel, field.TypeString, value)
		_node.PayLevel = value
	}
	if value, ok := pepc.mutation.Scale(); ok {
		_spec.SetField(postexampaper.FieldScale, field.TypeString, value)
		_node.Scale = value
	}
	if value, ok := pepc.mutation.OrderNumber(); ok {
		_spec.SetField(postexampaper.FieldOrderNumber, field.TypeString, value)
		_node.OrderNumber = value
	}
	if value, ok := pepc.mutation.Status(); ok {
		_spec.SetField(postexampaper.FieldStatus, field.TypeString, value)
		_node.Status = value
	}
	if value, ok := pepc.mutation.CreatedById(); ok {
		_spec.SetField(postexampaper.FieldCreatedById, field.TypeInt64, value)
		_node.CreatedById = value
	}
	if value, ok := pepc.mutation.CreatedByUserName(); ok {
		_spec.SetField(postexampaper.FieldCreatedByUserName, field.TypeString, value)
		_node.CreatedByUserName = value
	}
	if value, ok := pepc.mutation.CreatedByEmployeeId(); ok {
		_spec.SetField(postexampaper.FieldCreatedByEmployeeId, field.TypeString, value)
		_node.CreatedByEmployeeId = value
	}
	if value, ok := pepc.mutation.CreatedByDesignation(); ok {
		_spec.SetField(postexampaper.FieldCreatedByDesignation, field.TypeString, value)
		_node.CreatedByDesignation = value
	}
	if value, ok := pepc.mutation.CreatedDate(); ok {
		_spec.SetField(postexampaper.FieldCreatedDate, field.TypeTime, value)
		_node.CreatedDate = value
	}
	if value, ok := pepc.mutation.VerifiedById(); ok {
		_spec.SetField(postexampaper.FieldVerifiedById, field.TypeInt64, value)
		_node.VerifiedById = value
	}
	if value, ok := pepc.mutation.VerifiedByUserName(); ok {
		_spec.SetField(postexampaper.FieldVerifiedByUserName, field.TypeString, value)
		_node.VerifiedByUserName = value
	}
	if value, ok := pepc.mutation.VerifiedByEmployeeId(); ok {
		_spec.SetField(postexampaper.FieldVerifiedByEmployeeId, field.TypeString, value)
		_node.VerifiedByEmployeeId = value
	}
	if value, ok := pepc.mutation.VerifiedByDesignation(); ok {
		_spec.SetField(postexampaper.FieldVerifiedByDesignation, field.TypeString, value)
		_node.VerifiedByDesignation = value
	}
	if value, ok := pepc.mutation.VerifiedDate(); ok {
		_spec.SetField(postexampaper.FieldVerifiedDate, field.TypeTime, value)
		_node.VerifiedDate = value
	}
	if value, ok := pepc.mutation.DeletedById(); ok {
		_spec.SetField(postexampaper.FieldDeletedById, field.TypeInt64, value)
		_node.DeletedById = value
	}
	if value, ok := pepc.mutation.DeletedByUserName(); ok {
		_spec.SetField(postexampaper.FieldDeletedByUserName, field.TypeString, value)
		_node.DeletedByUserName = value
	}
	if value, ok := pepc.mutation.DeletedByEmployeeId(); ok {
		_spec.SetField(postexampaper.FieldDeletedByEmployeeId, field.TypeString, value)
		_node.DeletedByEmployeeId = value
	}
	if value, ok := pepc.mutation.DeletedByDesignation(); ok {
		_spec.SetField(postexampaper.FieldDeletedByDesignation, field.TypeString, value)
		_node.DeletedByDesignation = value
	}
	if value, ok := pepc.mutation.DeletedDate(); ok {
		_spec.SetField(postexampaper.FieldDeletedDate, field.TypeTime, value)
		_node.DeletedDate = value
	}
	return _node, _spec
}

// PostExamPaperCreateBulk is the builder for creating many PostExamPaper entities in bulk.
type PostExamPaperCreateBulk struct {
	config
	builders []*PostExamPaperCreate
}

// Save creates the PostExamPaper entities in the database.
func (pepcb *PostExamPaperCreateBulk) Save(ctx context.Context) ([]*PostExamPaper, error) {
	specs := make([]*sqlgraph.CreateSpec, len(pepcb.builders))
	nodes := make([]*PostExamPaper, len(pepcb.builders))
	mutators := make([]Mutator, len(pepcb.builders))
	for i := range pepcb.builders {
		func(i int, root context.Context) {
			builder := pepcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PostExamPaperMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pepcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pepcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pepcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pepcb *PostExamPaperCreateBulk) SaveX(ctx context.Context) []*PostExamPaper {
	v, err := pepcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pepcb *PostExamPaperCreateBulk) Exec(ctx context.Context) error {
	_, err := pepcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pepcb *PostExamPaperCreateBulk) ExecX(ctx context.Context) {
	if err := pepcb.Exec(ctx); err != nil {
		panic(err)
	}
}
