// Code generated by ent, DO NOT EDIT.

package examcitycenter

import (
	"recruit/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int32) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int32) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int32) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int32) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int32) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int32) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int32) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int32) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int32) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldLTE(FieldID, id))
}

// ExamCode applies equality check predicate on the "ExamCode" field. It's identical to ExamCodeEQ.
func ExamCode(v int32) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldEQ(FieldExamCode, v))
}

// ExamName applies equality check predicate on the "ExamName" field. It's identical to ExamNameEQ.
func ExamName(v string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldEQ(FieldExamName, v))
}

// ExamShortName applies equality check predicate on the "ExamShortName" field. It's identical to ExamShortNameEQ.
func ExamShortName(v string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldEQ(FieldExamShortName, v))
}

// ExamYear applies equality check predicate on the "ExamYear" field. It's identical to ExamYearEQ.
func ExamYear(v int32) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldEQ(FieldExamYear, v))
}

// ConductedBy applies equality check predicate on the "ConductedBy" field. It's identical to ConductedByEQ.
func ConductedBy(v string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldEQ(FieldConductedBy, v))
}

// NodalOfficeFacilityID applies equality check predicate on the "NodalOfficeFacilityID" field. It's identical to NodalOfficeFacilityIDEQ.
func NodalOfficeFacilityID(v string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldEQ(FieldNodalOfficeFacilityID, v))
}

// NodalOfficeName applies equality check predicate on the "NodalOfficeName" field. It's identical to NodalOfficeNameEQ.
func NodalOfficeName(v string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldEQ(FieldNodalOfficeName, v))
}

// NotificationCode applies equality check predicate on the "NotificationCode" field. It's identical to NotificationCodeEQ.
func NotificationCode(v int32) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldEQ(FieldNotificationCode, v))
}

// NotificationNumber applies equality check predicate on the "NotificationNumber" field. It's identical to NotificationNumberEQ.
func NotificationNumber(v string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldEQ(FieldNotificationNumber, v))
}

// CenterCityName applies equality check predicate on the "CenterCityName" field. It's identical to CenterCityNameEQ.
func CenterCityName(v string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldEQ(FieldCenterCityName, v))
}

// CreatedById applies equality check predicate on the "CreatedById" field. It's identical to CreatedByIdEQ.
func CreatedById(v int64) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldEQ(FieldCreatedById, v))
}

// CreatedByUserName applies equality check predicate on the "CreatedByUserName" field. It's identical to CreatedByUserNameEQ.
func CreatedByUserName(v string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldEQ(FieldCreatedByUserName, v))
}

// CreatedByEmpId applies equality check predicate on the "CreatedByEmpId" field. It's identical to CreatedByEmpIdEQ.
func CreatedByEmpId(v int64) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldEQ(FieldCreatedByEmpId, v))
}

// CreatedByDesignation applies equality check predicate on the "CreatedByDesignation" field. It's identical to CreatedByDesignationEQ.
func CreatedByDesignation(v string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldEQ(FieldCreatedByDesignation, v))
}

// CreatedDate applies equality check predicate on the "CreatedDate" field. It's identical to CreatedDateEQ.
func CreatedDate(v time.Time) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldEQ(FieldCreatedDate, v))
}

// Status applies equality check predicate on the "Status" field. It's identical to StatusEQ.
func Status(v string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldEQ(FieldStatus, v))
}

// Deletedbyid applies equality check predicate on the "deletedbyid" field. It's identical to DeletedbyidEQ.
func Deletedbyid(v int64) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldEQ(FieldDeletedbyid, v))
}

// Deletedbyusername applies equality check predicate on the "deletedbyusername" field. It's identical to DeletedbyusernameEQ.
func Deletedbyusername(v string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldEQ(FieldDeletedbyusername, v))
}

// DeletedbyEmployeeid applies equality check predicate on the "deletedbyEmployeeid" field. It's identical to DeletedbyEmployeeidEQ.
func DeletedbyEmployeeid(v int64) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldEQ(FieldDeletedbyEmployeeid, v))
}

// DeletedbyDesignation applies equality check predicate on the "deletedbyDesignation" field. It's identical to DeletedbyDesignationEQ.
func DeletedbyDesignation(v string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldEQ(FieldDeletedbyDesignation, v))
}

// DeletedDate applies equality check predicate on the "deletedDate" field. It's identical to DeletedDateEQ.
func DeletedDate(v time.Time) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldEQ(FieldDeletedDate, v))
}

// CircleCityName applies equality check predicate on the "CircleCityName" field. It's identical to CircleCityNameEQ.
func CircleCityName(v string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldEQ(FieldCircleCityName, v))
}

// DivisionCode applies equality check predicate on the "DivisionCode" field. It's identical to DivisionCodeEQ.
func DivisionCode(v int32) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldEQ(FieldDivisionCode, v))
}

// RegionCode applies equality check predicate on the "RegionCode" field. It's identical to RegionCodeEQ.
func RegionCode(v int32) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldEQ(FieldRegionCode, v))
}

// DivisionName applies equality check predicate on the "DivisionName" field. It's identical to DivisionNameEQ.
func DivisionName(v string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldEQ(FieldDivisionName, v))
}

// RegionID applies equality check predicate on the "RegionID" field. It's identical to RegionIDEQ.
func RegionID(v int32) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldEQ(FieldRegionID, v))
}

// RegionName applies equality check predicate on the "RegionName" field. It's identical to RegionNameEQ.
func RegionName(v string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldEQ(FieldRegionName, v))
}

// RegionCityName applies equality check predicate on the "RegionCityName" field. It's identical to RegionCityNameEQ.
func RegionCityName(v string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldEQ(FieldRegionCityName, v))
}

// CentreCityName applies equality check predicate on the "CentreCityName" field. It's identical to CentreCityNameEQ.
func CentreCityName(v string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldEQ(FieldCentreCityName, v))
}

// Remarks applies equality check predicate on the "Remarks" field. It's identical to RemarksEQ.
func Remarks(v string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldEQ(FieldRemarks, v))
}

// UpdatedAt applies equality check predicate on the "UpdatedAt" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedBy applies equality check predicate on the "UpdatedBy" field. It's identical to UpdatedByEQ.
func UpdatedBy(v string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldEQ(FieldUpdatedBy, v))
}

// CentreCode applies equality check predicate on the "CentreCode" field. It's identical to CentreCodeEQ.
func CentreCode(v int32) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldEQ(FieldCentreCode, v))
}

// CircleID applies equality check predicate on the "CircleID" field. It's identical to CircleIDEQ.
func CircleID(v int32) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldEQ(FieldCircleID, v))
}

// ExamCodeEQ applies the EQ predicate on the "ExamCode" field.
func ExamCodeEQ(v int32) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldEQ(FieldExamCode, v))
}

// ExamCodeNEQ applies the NEQ predicate on the "ExamCode" field.
func ExamCodeNEQ(v int32) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldNEQ(FieldExamCode, v))
}

// ExamCodeIn applies the In predicate on the "ExamCode" field.
func ExamCodeIn(vs ...int32) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldIn(FieldExamCode, vs...))
}

// ExamCodeNotIn applies the NotIn predicate on the "ExamCode" field.
func ExamCodeNotIn(vs ...int32) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldNotIn(FieldExamCode, vs...))
}

// ExamCodeGT applies the GT predicate on the "ExamCode" field.
func ExamCodeGT(v int32) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldGT(FieldExamCode, v))
}

// ExamCodeGTE applies the GTE predicate on the "ExamCode" field.
func ExamCodeGTE(v int32) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldGTE(FieldExamCode, v))
}

// ExamCodeLT applies the LT predicate on the "ExamCode" field.
func ExamCodeLT(v int32) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldLT(FieldExamCode, v))
}

// ExamCodeLTE applies the LTE predicate on the "ExamCode" field.
func ExamCodeLTE(v int32) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldLTE(FieldExamCode, v))
}

// ExamCodeIsNil applies the IsNil predicate on the "ExamCode" field.
func ExamCodeIsNil() predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldIsNull(FieldExamCode))
}

// ExamCodeNotNil applies the NotNil predicate on the "ExamCode" field.
func ExamCodeNotNil() predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldNotNull(FieldExamCode))
}

// ExamNameEQ applies the EQ predicate on the "ExamName" field.
func ExamNameEQ(v string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldEQ(FieldExamName, v))
}

// ExamNameNEQ applies the NEQ predicate on the "ExamName" field.
func ExamNameNEQ(v string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldNEQ(FieldExamName, v))
}

// ExamNameIn applies the In predicate on the "ExamName" field.
func ExamNameIn(vs ...string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldIn(FieldExamName, vs...))
}

// ExamNameNotIn applies the NotIn predicate on the "ExamName" field.
func ExamNameNotIn(vs ...string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldNotIn(FieldExamName, vs...))
}

// ExamNameGT applies the GT predicate on the "ExamName" field.
func ExamNameGT(v string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldGT(FieldExamName, v))
}

// ExamNameGTE applies the GTE predicate on the "ExamName" field.
func ExamNameGTE(v string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldGTE(FieldExamName, v))
}

// ExamNameLT applies the LT predicate on the "ExamName" field.
func ExamNameLT(v string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldLT(FieldExamName, v))
}

// ExamNameLTE applies the LTE predicate on the "ExamName" field.
func ExamNameLTE(v string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldLTE(FieldExamName, v))
}

// ExamNameContains applies the Contains predicate on the "ExamName" field.
func ExamNameContains(v string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldContains(FieldExamName, v))
}

// ExamNameHasPrefix applies the HasPrefix predicate on the "ExamName" field.
func ExamNameHasPrefix(v string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldHasPrefix(FieldExamName, v))
}

// ExamNameHasSuffix applies the HasSuffix predicate on the "ExamName" field.
func ExamNameHasSuffix(v string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldHasSuffix(FieldExamName, v))
}

// ExamNameIsNil applies the IsNil predicate on the "ExamName" field.
func ExamNameIsNil() predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldIsNull(FieldExamName))
}

// ExamNameNotNil applies the NotNil predicate on the "ExamName" field.
func ExamNameNotNil() predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldNotNull(FieldExamName))
}

// ExamNameEqualFold applies the EqualFold predicate on the "ExamName" field.
func ExamNameEqualFold(v string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldEqualFold(FieldExamName, v))
}

// ExamNameContainsFold applies the ContainsFold predicate on the "ExamName" field.
func ExamNameContainsFold(v string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldContainsFold(FieldExamName, v))
}

// ExamShortNameEQ applies the EQ predicate on the "ExamShortName" field.
func ExamShortNameEQ(v string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldEQ(FieldExamShortName, v))
}

// ExamShortNameNEQ applies the NEQ predicate on the "ExamShortName" field.
func ExamShortNameNEQ(v string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldNEQ(FieldExamShortName, v))
}

// ExamShortNameIn applies the In predicate on the "ExamShortName" field.
func ExamShortNameIn(vs ...string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldIn(FieldExamShortName, vs...))
}

// ExamShortNameNotIn applies the NotIn predicate on the "ExamShortName" field.
func ExamShortNameNotIn(vs ...string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldNotIn(FieldExamShortName, vs...))
}

// ExamShortNameGT applies the GT predicate on the "ExamShortName" field.
func ExamShortNameGT(v string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldGT(FieldExamShortName, v))
}

// ExamShortNameGTE applies the GTE predicate on the "ExamShortName" field.
func ExamShortNameGTE(v string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldGTE(FieldExamShortName, v))
}

// ExamShortNameLT applies the LT predicate on the "ExamShortName" field.
func ExamShortNameLT(v string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldLT(FieldExamShortName, v))
}

// ExamShortNameLTE applies the LTE predicate on the "ExamShortName" field.
func ExamShortNameLTE(v string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldLTE(FieldExamShortName, v))
}

// ExamShortNameContains applies the Contains predicate on the "ExamShortName" field.
func ExamShortNameContains(v string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldContains(FieldExamShortName, v))
}

// ExamShortNameHasPrefix applies the HasPrefix predicate on the "ExamShortName" field.
func ExamShortNameHasPrefix(v string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldHasPrefix(FieldExamShortName, v))
}

// ExamShortNameHasSuffix applies the HasSuffix predicate on the "ExamShortName" field.
func ExamShortNameHasSuffix(v string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldHasSuffix(FieldExamShortName, v))
}

// ExamShortNameIsNil applies the IsNil predicate on the "ExamShortName" field.
func ExamShortNameIsNil() predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldIsNull(FieldExamShortName))
}

// ExamShortNameNotNil applies the NotNil predicate on the "ExamShortName" field.
func ExamShortNameNotNil() predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldNotNull(FieldExamShortName))
}

// ExamShortNameEqualFold applies the EqualFold predicate on the "ExamShortName" field.
func ExamShortNameEqualFold(v string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldEqualFold(FieldExamShortName, v))
}

// ExamShortNameContainsFold applies the ContainsFold predicate on the "ExamShortName" field.
func ExamShortNameContainsFold(v string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldContainsFold(FieldExamShortName, v))
}

// ExamYearEQ applies the EQ predicate on the "ExamYear" field.
func ExamYearEQ(v int32) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldEQ(FieldExamYear, v))
}

// ExamYearNEQ applies the NEQ predicate on the "ExamYear" field.
func ExamYearNEQ(v int32) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldNEQ(FieldExamYear, v))
}

// ExamYearIn applies the In predicate on the "ExamYear" field.
func ExamYearIn(vs ...int32) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldIn(FieldExamYear, vs...))
}

// ExamYearNotIn applies the NotIn predicate on the "ExamYear" field.
func ExamYearNotIn(vs ...int32) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldNotIn(FieldExamYear, vs...))
}

// ExamYearGT applies the GT predicate on the "ExamYear" field.
func ExamYearGT(v int32) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldGT(FieldExamYear, v))
}

// ExamYearGTE applies the GTE predicate on the "ExamYear" field.
func ExamYearGTE(v int32) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldGTE(FieldExamYear, v))
}

// ExamYearLT applies the LT predicate on the "ExamYear" field.
func ExamYearLT(v int32) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldLT(FieldExamYear, v))
}

// ExamYearLTE applies the LTE predicate on the "ExamYear" field.
func ExamYearLTE(v int32) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldLTE(FieldExamYear, v))
}

// ExamYearIsNil applies the IsNil predicate on the "ExamYear" field.
func ExamYearIsNil() predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldIsNull(FieldExamYear))
}

// ExamYearNotNil applies the NotNil predicate on the "ExamYear" field.
func ExamYearNotNil() predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldNotNull(FieldExamYear))
}

// ConductedByEQ applies the EQ predicate on the "ConductedBy" field.
func ConductedByEQ(v string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldEQ(FieldConductedBy, v))
}

// ConductedByNEQ applies the NEQ predicate on the "ConductedBy" field.
func ConductedByNEQ(v string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldNEQ(FieldConductedBy, v))
}

// ConductedByIn applies the In predicate on the "ConductedBy" field.
func ConductedByIn(vs ...string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldIn(FieldConductedBy, vs...))
}

// ConductedByNotIn applies the NotIn predicate on the "ConductedBy" field.
func ConductedByNotIn(vs ...string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldNotIn(FieldConductedBy, vs...))
}

// ConductedByGT applies the GT predicate on the "ConductedBy" field.
func ConductedByGT(v string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldGT(FieldConductedBy, v))
}

// ConductedByGTE applies the GTE predicate on the "ConductedBy" field.
func ConductedByGTE(v string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldGTE(FieldConductedBy, v))
}

// ConductedByLT applies the LT predicate on the "ConductedBy" field.
func ConductedByLT(v string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldLT(FieldConductedBy, v))
}

// ConductedByLTE applies the LTE predicate on the "ConductedBy" field.
func ConductedByLTE(v string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldLTE(FieldConductedBy, v))
}

// ConductedByContains applies the Contains predicate on the "ConductedBy" field.
func ConductedByContains(v string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldContains(FieldConductedBy, v))
}

// ConductedByHasPrefix applies the HasPrefix predicate on the "ConductedBy" field.
func ConductedByHasPrefix(v string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldHasPrefix(FieldConductedBy, v))
}

// ConductedByHasSuffix applies the HasSuffix predicate on the "ConductedBy" field.
func ConductedByHasSuffix(v string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldHasSuffix(FieldConductedBy, v))
}

// ConductedByIsNil applies the IsNil predicate on the "ConductedBy" field.
func ConductedByIsNil() predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldIsNull(FieldConductedBy))
}

// ConductedByNotNil applies the NotNil predicate on the "ConductedBy" field.
func ConductedByNotNil() predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldNotNull(FieldConductedBy))
}

// ConductedByEqualFold applies the EqualFold predicate on the "ConductedBy" field.
func ConductedByEqualFold(v string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldEqualFold(FieldConductedBy, v))
}

// ConductedByContainsFold applies the ContainsFold predicate on the "ConductedBy" field.
func ConductedByContainsFold(v string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldContainsFold(FieldConductedBy, v))
}

// NodalOfficeFacilityIDEQ applies the EQ predicate on the "NodalOfficeFacilityID" field.
func NodalOfficeFacilityIDEQ(v string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldEQ(FieldNodalOfficeFacilityID, v))
}

// NodalOfficeFacilityIDNEQ applies the NEQ predicate on the "NodalOfficeFacilityID" field.
func NodalOfficeFacilityIDNEQ(v string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldNEQ(FieldNodalOfficeFacilityID, v))
}

// NodalOfficeFacilityIDIn applies the In predicate on the "NodalOfficeFacilityID" field.
func NodalOfficeFacilityIDIn(vs ...string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldIn(FieldNodalOfficeFacilityID, vs...))
}

// NodalOfficeFacilityIDNotIn applies the NotIn predicate on the "NodalOfficeFacilityID" field.
func NodalOfficeFacilityIDNotIn(vs ...string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldNotIn(FieldNodalOfficeFacilityID, vs...))
}

// NodalOfficeFacilityIDGT applies the GT predicate on the "NodalOfficeFacilityID" field.
func NodalOfficeFacilityIDGT(v string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldGT(FieldNodalOfficeFacilityID, v))
}

// NodalOfficeFacilityIDGTE applies the GTE predicate on the "NodalOfficeFacilityID" field.
func NodalOfficeFacilityIDGTE(v string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldGTE(FieldNodalOfficeFacilityID, v))
}

// NodalOfficeFacilityIDLT applies the LT predicate on the "NodalOfficeFacilityID" field.
func NodalOfficeFacilityIDLT(v string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldLT(FieldNodalOfficeFacilityID, v))
}

// NodalOfficeFacilityIDLTE applies the LTE predicate on the "NodalOfficeFacilityID" field.
func NodalOfficeFacilityIDLTE(v string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldLTE(FieldNodalOfficeFacilityID, v))
}

// NodalOfficeFacilityIDContains applies the Contains predicate on the "NodalOfficeFacilityID" field.
func NodalOfficeFacilityIDContains(v string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldContains(FieldNodalOfficeFacilityID, v))
}

// NodalOfficeFacilityIDHasPrefix applies the HasPrefix predicate on the "NodalOfficeFacilityID" field.
func NodalOfficeFacilityIDHasPrefix(v string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldHasPrefix(FieldNodalOfficeFacilityID, v))
}

// NodalOfficeFacilityIDHasSuffix applies the HasSuffix predicate on the "NodalOfficeFacilityID" field.
func NodalOfficeFacilityIDHasSuffix(v string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldHasSuffix(FieldNodalOfficeFacilityID, v))
}

// NodalOfficeFacilityIDIsNil applies the IsNil predicate on the "NodalOfficeFacilityID" field.
func NodalOfficeFacilityIDIsNil() predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldIsNull(FieldNodalOfficeFacilityID))
}

// NodalOfficeFacilityIDNotNil applies the NotNil predicate on the "NodalOfficeFacilityID" field.
func NodalOfficeFacilityIDNotNil() predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldNotNull(FieldNodalOfficeFacilityID))
}

// NodalOfficeFacilityIDEqualFold applies the EqualFold predicate on the "NodalOfficeFacilityID" field.
func NodalOfficeFacilityIDEqualFold(v string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldEqualFold(FieldNodalOfficeFacilityID, v))
}

// NodalOfficeFacilityIDContainsFold applies the ContainsFold predicate on the "NodalOfficeFacilityID" field.
func NodalOfficeFacilityIDContainsFold(v string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldContainsFold(FieldNodalOfficeFacilityID, v))
}

// NodalOfficeNameEQ applies the EQ predicate on the "NodalOfficeName" field.
func NodalOfficeNameEQ(v string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldEQ(FieldNodalOfficeName, v))
}

// NodalOfficeNameNEQ applies the NEQ predicate on the "NodalOfficeName" field.
func NodalOfficeNameNEQ(v string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldNEQ(FieldNodalOfficeName, v))
}

// NodalOfficeNameIn applies the In predicate on the "NodalOfficeName" field.
func NodalOfficeNameIn(vs ...string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldIn(FieldNodalOfficeName, vs...))
}

// NodalOfficeNameNotIn applies the NotIn predicate on the "NodalOfficeName" field.
func NodalOfficeNameNotIn(vs ...string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldNotIn(FieldNodalOfficeName, vs...))
}

// NodalOfficeNameGT applies the GT predicate on the "NodalOfficeName" field.
func NodalOfficeNameGT(v string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldGT(FieldNodalOfficeName, v))
}

// NodalOfficeNameGTE applies the GTE predicate on the "NodalOfficeName" field.
func NodalOfficeNameGTE(v string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldGTE(FieldNodalOfficeName, v))
}

// NodalOfficeNameLT applies the LT predicate on the "NodalOfficeName" field.
func NodalOfficeNameLT(v string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldLT(FieldNodalOfficeName, v))
}

// NodalOfficeNameLTE applies the LTE predicate on the "NodalOfficeName" field.
func NodalOfficeNameLTE(v string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldLTE(FieldNodalOfficeName, v))
}

// NodalOfficeNameContains applies the Contains predicate on the "NodalOfficeName" field.
func NodalOfficeNameContains(v string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldContains(FieldNodalOfficeName, v))
}

// NodalOfficeNameHasPrefix applies the HasPrefix predicate on the "NodalOfficeName" field.
func NodalOfficeNameHasPrefix(v string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldHasPrefix(FieldNodalOfficeName, v))
}

// NodalOfficeNameHasSuffix applies the HasSuffix predicate on the "NodalOfficeName" field.
func NodalOfficeNameHasSuffix(v string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldHasSuffix(FieldNodalOfficeName, v))
}

// NodalOfficeNameIsNil applies the IsNil predicate on the "NodalOfficeName" field.
func NodalOfficeNameIsNil() predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldIsNull(FieldNodalOfficeName))
}

// NodalOfficeNameNotNil applies the NotNil predicate on the "NodalOfficeName" field.
func NodalOfficeNameNotNil() predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldNotNull(FieldNodalOfficeName))
}

// NodalOfficeNameEqualFold applies the EqualFold predicate on the "NodalOfficeName" field.
func NodalOfficeNameEqualFold(v string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldEqualFold(FieldNodalOfficeName, v))
}

// NodalOfficeNameContainsFold applies the ContainsFold predicate on the "NodalOfficeName" field.
func NodalOfficeNameContainsFold(v string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldContainsFold(FieldNodalOfficeName, v))
}

// NotificationCodeEQ applies the EQ predicate on the "NotificationCode" field.
func NotificationCodeEQ(v int32) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldEQ(FieldNotificationCode, v))
}

// NotificationCodeNEQ applies the NEQ predicate on the "NotificationCode" field.
func NotificationCodeNEQ(v int32) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldNEQ(FieldNotificationCode, v))
}

// NotificationCodeIn applies the In predicate on the "NotificationCode" field.
func NotificationCodeIn(vs ...int32) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldIn(FieldNotificationCode, vs...))
}

// NotificationCodeNotIn applies the NotIn predicate on the "NotificationCode" field.
func NotificationCodeNotIn(vs ...int32) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldNotIn(FieldNotificationCode, vs...))
}

// NotificationCodeGT applies the GT predicate on the "NotificationCode" field.
func NotificationCodeGT(v int32) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldGT(FieldNotificationCode, v))
}

// NotificationCodeGTE applies the GTE predicate on the "NotificationCode" field.
func NotificationCodeGTE(v int32) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldGTE(FieldNotificationCode, v))
}

// NotificationCodeLT applies the LT predicate on the "NotificationCode" field.
func NotificationCodeLT(v int32) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldLT(FieldNotificationCode, v))
}

// NotificationCodeLTE applies the LTE predicate on the "NotificationCode" field.
func NotificationCodeLTE(v int32) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldLTE(FieldNotificationCode, v))
}

// NotificationCodeIsNil applies the IsNil predicate on the "NotificationCode" field.
func NotificationCodeIsNil() predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldIsNull(FieldNotificationCode))
}

// NotificationCodeNotNil applies the NotNil predicate on the "NotificationCode" field.
func NotificationCodeNotNil() predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldNotNull(FieldNotificationCode))
}

// NotificationNumberEQ applies the EQ predicate on the "NotificationNumber" field.
func NotificationNumberEQ(v string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldEQ(FieldNotificationNumber, v))
}

// NotificationNumberNEQ applies the NEQ predicate on the "NotificationNumber" field.
func NotificationNumberNEQ(v string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldNEQ(FieldNotificationNumber, v))
}

// NotificationNumberIn applies the In predicate on the "NotificationNumber" field.
func NotificationNumberIn(vs ...string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldIn(FieldNotificationNumber, vs...))
}

// NotificationNumberNotIn applies the NotIn predicate on the "NotificationNumber" field.
func NotificationNumberNotIn(vs ...string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldNotIn(FieldNotificationNumber, vs...))
}

// NotificationNumberGT applies the GT predicate on the "NotificationNumber" field.
func NotificationNumberGT(v string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldGT(FieldNotificationNumber, v))
}

// NotificationNumberGTE applies the GTE predicate on the "NotificationNumber" field.
func NotificationNumberGTE(v string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldGTE(FieldNotificationNumber, v))
}

// NotificationNumberLT applies the LT predicate on the "NotificationNumber" field.
func NotificationNumberLT(v string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldLT(FieldNotificationNumber, v))
}

// NotificationNumberLTE applies the LTE predicate on the "NotificationNumber" field.
func NotificationNumberLTE(v string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldLTE(FieldNotificationNumber, v))
}

// NotificationNumberContains applies the Contains predicate on the "NotificationNumber" field.
func NotificationNumberContains(v string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldContains(FieldNotificationNumber, v))
}

// NotificationNumberHasPrefix applies the HasPrefix predicate on the "NotificationNumber" field.
func NotificationNumberHasPrefix(v string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldHasPrefix(FieldNotificationNumber, v))
}

// NotificationNumberHasSuffix applies the HasSuffix predicate on the "NotificationNumber" field.
func NotificationNumberHasSuffix(v string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldHasSuffix(FieldNotificationNumber, v))
}

// NotificationNumberIsNil applies the IsNil predicate on the "NotificationNumber" field.
func NotificationNumberIsNil() predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldIsNull(FieldNotificationNumber))
}

// NotificationNumberNotNil applies the NotNil predicate on the "NotificationNumber" field.
func NotificationNumberNotNil() predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldNotNull(FieldNotificationNumber))
}

// NotificationNumberEqualFold applies the EqualFold predicate on the "NotificationNumber" field.
func NotificationNumberEqualFold(v string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldEqualFold(FieldNotificationNumber, v))
}

// NotificationNumberContainsFold applies the ContainsFold predicate on the "NotificationNumber" field.
func NotificationNumberContainsFold(v string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldContainsFold(FieldNotificationNumber, v))
}

// CenterCityNameEQ applies the EQ predicate on the "CenterCityName" field.
func CenterCityNameEQ(v string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldEQ(FieldCenterCityName, v))
}

// CenterCityNameNEQ applies the NEQ predicate on the "CenterCityName" field.
func CenterCityNameNEQ(v string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldNEQ(FieldCenterCityName, v))
}

// CenterCityNameIn applies the In predicate on the "CenterCityName" field.
func CenterCityNameIn(vs ...string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldIn(FieldCenterCityName, vs...))
}

// CenterCityNameNotIn applies the NotIn predicate on the "CenterCityName" field.
func CenterCityNameNotIn(vs ...string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldNotIn(FieldCenterCityName, vs...))
}

// CenterCityNameGT applies the GT predicate on the "CenterCityName" field.
func CenterCityNameGT(v string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldGT(FieldCenterCityName, v))
}

// CenterCityNameGTE applies the GTE predicate on the "CenterCityName" field.
func CenterCityNameGTE(v string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldGTE(FieldCenterCityName, v))
}

// CenterCityNameLT applies the LT predicate on the "CenterCityName" field.
func CenterCityNameLT(v string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldLT(FieldCenterCityName, v))
}

// CenterCityNameLTE applies the LTE predicate on the "CenterCityName" field.
func CenterCityNameLTE(v string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldLTE(FieldCenterCityName, v))
}

// CenterCityNameContains applies the Contains predicate on the "CenterCityName" field.
func CenterCityNameContains(v string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldContains(FieldCenterCityName, v))
}

// CenterCityNameHasPrefix applies the HasPrefix predicate on the "CenterCityName" field.
func CenterCityNameHasPrefix(v string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldHasPrefix(FieldCenterCityName, v))
}

// CenterCityNameHasSuffix applies the HasSuffix predicate on the "CenterCityName" field.
func CenterCityNameHasSuffix(v string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldHasSuffix(FieldCenterCityName, v))
}

// CenterCityNameIsNil applies the IsNil predicate on the "CenterCityName" field.
func CenterCityNameIsNil() predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldIsNull(FieldCenterCityName))
}

// CenterCityNameNotNil applies the NotNil predicate on the "CenterCityName" field.
func CenterCityNameNotNil() predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldNotNull(FieldCenterCityName))
}

// CenterCityNameEqualFold applies the EqualFold predicate on the "CenterCityName" field.
func CenterCityNameEqualFold(v string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldEqualFold(FieldCenterCityName, v))
}

// CenterCityNameContainsFold applies the ContainsFold predicate on the "CenterCityName" field.
func CenterCityNameContainsFold(v string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldContainsFold(FieldCenterCityName, v))
}

// CreatedByIdEQ applies the EQ predicate on the "CreatedById" field.
func CreatedByIdEQ(v int64) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldEQ(FieldCreatedById, v))
}

// CreatedByIdNEQ applies the NEQ predicate on the "CreatedById" field.
func CreatedByIdNEQ(v int64) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldNEQ(FieldCreatedById, v))
}

// CreatedByIdIn applies the In predicate on the "CreatedById" field.
func CreatedByIdIn(vs ...int64) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldIn(FieldCreatedById, vs...))
}

// CreatedByIdNotIn applies the NotIn predicate on the "CreatedById" field.
func CreatedByIdNotIn(vs ...int64) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldNotIn(FieldCreatedById, vs...))
}

// CreatedByIdGT applies the GT predicate on the "CreatedById" field.
func CreatedByIdGT(v int64) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldGT(FieldCreatedById, v))
}

// CreatedByIdGTE applies the GTE predicate on the "CreatedById" field.
func CreatedByIdGTE(v int64) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldGTE(FieldCreatedById, v))
}

// CreatedByIdLT applies the LT predicate on the "CreatedById" field.
func CreatedByIdLT(v int64) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldLT(FieldCreatedById, v))
}

// CreatedByIdLTE applies the LTE predicate on the "CreatedById" field.
func CreatedByIdLTE(v int64) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldLTE(FieldCreatedById, v))
}

// CreatedByIdIsNil applies the IsNil predicate on the "CreatedById" field.
func CreatedByIdIsNil() predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldIsNull(FieldCreatedById))
}

// CreatedByIdNotNil applies the NotNil predicate on the "CreatedById" field.
func CreatedByIdNotNil() predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldNotNull(FieldCreatedById))
}

// CreatedByUserNameEQ applies the EQ predicate on the "CreatedByUserName" field.
func CreatedByUserNameEQ(v string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldEQ(FieldCreatedByUserName, v))
}

// CreatedByUserNameNEQ applies the NEQ predicate on the "CreatedByUserName" field.
func CreatedByUserNameNEQ(v string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldNEQ(FieldCreatedByUserName, v))
}

// CreatedByUserNameIn applies the In predicate on the "CreatedByUserName" field.
func CreatedByUserNameIn(vs ...string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldIn(FieldCreatedByUserName, vs...))
}

// CreatedByUserNameNotIn applies the NotIn predicate on the "CreatedByUserName" field.
func CreatedByUserNameNotIn(vs ...string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldNotIn(FieldCreatedByUserName, vs...))
}

// CreatedByUserNameGT applies the GT predicate on the "CreatedByUserName" field.
func CreatedByUserNameGT(v string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldGT(FieldCreatedByUserName, v))
}

// CreatedByUserNameGTE applies the GTE predicate on the "CreatedByUserName" field.
func CreatedByUserNameGTE(v string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldGTE(FieldCreatedByUserName, v))
}

// CreatedByUserNameLT applies the LT predicate on the "CreatedByUserName" field.
func CreatedByUserNameLT(v string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldLT(FieldCreatedByUserName, v))
}

// CreatedByUserNameLTE applies the LTE predicate on the "CreatedByUserName" field.
func CreatedByUserNameLTE(v string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldLTE(FieldCreatedByUserName, v))
}

// CreatedByUserNameContains applies the Contains predicate on the "CreatedByUserName" field.
func CreatedByUserNameContains(v string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldContains(FieldCreatedByUserName, v))
}

// CreatedByUserNameHasPrefix applies the HasPrefix predicate on the "CreatedByUserName" field.
func CreatedByUserNameHasPrefix(v string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldHasPrefix(FieldCreatedByUserName, v))
}

// CreatedByUserNameHasSuffix applies the HasSuffix predicate on the "CreatedByUserName" field.
func CreatedByUserNameHasSuffix(v string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldHasSuffix(FieldCreatedByUserName, v))
}

// CreatedByUserNameIsNil applies the IsNil predicate on the "CreatedByUserName" field.
func CreatedByUserNameIsNil() predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldIsNull(FieldCreatedByUserName))
}

// CreatedByUserNameNotNil applies the NotNil predicate on the "CreatedByUserName" field.
func CreatedByUserNameNotNil() predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldNotNull(FieldCreatedByUserName))
}

// CreatedByUserNameEqualFold applies the EqualFold predicate on the "CreatedByUserName" field.
func CreatedByUserNameEqualFold(v string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldEqualFold(FieldCreatedByUserName, v))
}

// CreatedByUserNameContainsFold applies the ContainsFold predicate on the "CreatedByUserName" field.
func CreatedByUserNameContainsFold(v string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldContainsFold(FieldCreatedByUserName, v))
}

// CreatedByEmpIdEQ applies the EQ predicate on the "CreatedByEmpId" field.
func CreatedByEmpIdEQ(v int64) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldEQ(FieldCreatedByEmpId, v))
}

// CreatedByEmpIdNEQ applies the NEQ predicate on the "CreatedByEmpId" field.
func CreatedByEmpIdNEQ(v int64) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldNEQ(FieldCreatedByEmpId, v))
}

// CreatedByEmpIdIn applies the In predicate on the "CreatedByEmpId" field.
func CreatedByEmpIdIn(vs ...int64) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldIn(FieldCreatedByEmpId, vs...))
}

// CreatedByEmpIdNotIn applies the NotIn predicate on the "CreatedByEmpId" field.
func CreatedByEmpIdNotIn(vs ...int64) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldNotIn(FieldCreatedByEmpId, vs...))
}

// CreatedByEmpIdGT applies the GT predicate on the "CreatedByEmpId" field.
func CreatedByEmpIdGT(v int64) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldGT(FieldCreatedByEmpId, v))
}

// CreatedByEmpIdGTE applies the GTE predicate on the "CreatedByEmpId" field.
func CreatedByEmpIdGTE(v int64) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldGTE(FieldCreatedByEmpId, v))
}

// CreatedByEmpIdLT applies the LT predicate on the "CreatedByEmpId" field.
func CreatedByEmpIdLT(v int64) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldLT(FieldCreatedByEmpId, v))
}

// CreatedByEmpIdLTE applies the LTE predicate on the "CreatedByEmpId" field.
func CreatedByEmpIdLTE(v int64) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldLTE(FieldCreatedByEmpId, v))
}

// CreatedByEmpIdIsNil applies the IsNil predicate on the "CreatedByEmpId" field.
func CreatedByEmpIdIsNil() predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldIsNull(FieldCreatedByEmpId))
}

// CreatedByEmpIdNotNil applies the NotNil predicate on the "CreatedByEmpId" field.
func CreatedByEmpIdNotNil() predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldNotNull(FieldCreatedByEmpId))
}

// CreatedByDesignationEQ applies the EQ predicate on the "CreatedByDesignation" field.
func CreatedByDesignationEQ(v string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldEQ(FieldCreatedByDesignation, v))
}

// CreatedByDesignationNEQ applies the NEQ predicate on the "CreatedByDesignation" field.
func CreatedByDesignationNEQ(v string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldNEQ(FieldCreatedByDesignation, v))
}

// CreatedByDesignationIn applies the In predicate on the "CreatedByDesignation" field.
func CreatedByDesignationIn(vs ...string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldIn(FieldCreatedByDesignation, vs...))
}

// CreatedByDesignationNotIn applies the NotIn predicate on the "CreatedByDesignation" field.
func CreatedByDesignationNotIn(vs ...string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldNotIn(FieldCreatedByDesignation, vs...))
}

// CreatedByDesignationGT applies the GT predicate on the "CreatedByDesignation" field.
func CreatedByDesignationGT(v string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldGT(FieldCreatedByDesignation, v))
}

// CreatedByDesignationGTE applies the GTE predicate on the "CreatedByDesignation" field.
func CreatedByDesignationGTE(v string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldGTE(FieldCreatedByDesignation, v))
}

// CreatedByDesignationLT applies the LT predicate on the "CreatedByDesignation" field.
func CreatedByDesignationLT(v string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldLT(FieldCreatedByDesignation, v))
}

// CreatedByDesignationLTE applies the LTE predicate on the "CreatedByDesignation" field.
func CreatedByDesignationLTE(v string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldLTE(FieldCreatedByDesignation, v))
}

// CreatedByDesignationContains applies the Contains predicate on the "CreatedByDesignation" field.
func CreatedByDesignationContains(v string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldContains(FieldCreatedByDesignation, v))
}

// CreatedByDesignationHasPrefix applies the HasPrefix predicate on the "CreatedByDesignation" field.
func CreatedByDesignationHasPrefix(v string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldHasPrefix(FieldCreatedByDesignation, v))
}

// CreatedByDesignationHasSuffix applies the HasSuffix predicate on the "CreatedByDesignation" field.
func CreatedByDesignationHasSuffix(v string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldHasSuffix(FieldCreatedByDesignation, v))
}

// CreatedByDesignationIsNil applies the IsNil predicate on the "CreatedByDesignation" field.
func CreatedByDesignationIsNil() predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldIsNull(FieldCreatedByDesignation))
}

// CreatedByDesignationNotNil applies the NotNil predicate on the "CreatedByDesignation" field.
func CreatedByDesignationNotNil() predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldNotNull(FieldCreatedByDesignation))
}

// CreatedByDesignationEqualFold applies the EqualFold predicate on the "CreatedByDesignation" field.
func CreatedByDesignationEqualFold(v string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldEqualFold(FieldCreatedByDesignation, v))
}

// CreatedByDesignationContainsFold applies the ContainsFold predicate on the "CreatedByDesignation" field.
func CreatedByDesignationContainsFold(v string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldContainsFold(FieldCreatedByDesignation, v))
}

// CreatedDateEQ applies the EQ predicate on the "CreatedDate" field.
func CreatedDateEQ(v time.Time) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldEQ(FieldCreatedDate, v))
}

// CreatedDateNEQ applies the NEQ predicate on the "CreatedDate" field.
func CreatedDateNEQ(v time.Time) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldNEQ(FieldCreatedDate, v))
}

// CreatedDateIn applies the In predicate on the "CreatedDate" field.
func CreatedDateIn(vs ...time.Time) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldIn(FieldCreatedDate, vs...))
}

// CreatedDateNotIn applies the NotIn predicate on the "CreatedDate" field.
func CreatedDateNotIn(vs ...time.Time) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldNotIn(FieldCreatedDate, vs...))
}

// CreatedDateGT applies the GT predicate on the "CreatedDate" field.
func CreatedDateGT(v time.Time) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldGT(FieldCreatedDate, v))
}

// CreatedDateGTE applies the GTE predicate on the "CreatedDate" field.
func CreatedDateGTE(v time.Time) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldGTE(FieldCreatedDate, v))
}

// CreatedDateLT applies the LT predicate on the "CreatedDate" field.
func CreatedDateLT(v time.Time) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldLT(FieldCreatedDate, v))
}

// CreatedDateLTE applies the LTE predicate on the "CreatedDate" field.
func CreatedDateLTE(v time.Time) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldLTE(FieldCreatedDate, v))
}

// CreatedDateIsNil applies the IsNil predicate on the "CreatedDate" field.
func CreatedDateIsNil() predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldIsNull(FieldCreatedDate))
}

// CreatedDateNotNil applies the NotNil predicate on the "CreatedDate" field.
func CreatedDateNotNil() predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldNotNull(FieldCreatedDate))
}

// StatusEQ applies the EQ predicate on the "Status" field.
func StatusEQ(v string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "Status" field.
func StatusNEQ(v string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "Status" field.
func StatusIn(vs ...string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "Status" field.
func StatusNotIn(vs ...string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "Status" field.
func StatusGT(v string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "Status" field.
func StatusGTE(v string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "Status" field.
func StatusLT(v string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "Status" field.
func StatusLTE(v string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldLTE(FieldStatus, v))
}

// StatusContains applies the Contains predicate on the "Status" field.
func StatusContains(v string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldContains(FieldStatus, v))
}

// StatusHasPrefix applies the HasPrefix predicate on the "Status" field.
func StatusHasPrefix(v string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldHasPrefix(FieldStatus, v))
}

// StatusHasSuffix applies the HasSuffix predicate on the "Status" field.
func StatusHasSuffix(v string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldHasSuffix(FieldStatus, v))
}

// StatusIsNil applies the IsNil predicate on the "Status" field.
func StatusIsNil() predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldIsNull(FieldStatus))
}

// StatusNotNil applies the NotNil predicate on the "Status" field.
func StatusNotNil() predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldNotNull(FieldStatus))
}

// StatusEqualFold applies the EqualFold predicate on the "Status" field.
func StatusEqualFold(v string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldEqualFold(FieldStatus, v))
}

// StatusContainsFold applies the ContainsFold predicate on the "Status" field.
func StatusContainsFold(v string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldContainsFold(FieldStatus, v))
}

// DeletedbyidEQ applies the EQ predicate on the "deletedbyid" field.
func DeletedbyidEQ(v int64) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldEQ(FieldDeletedbyid, v))
}

// DeletedbyidNEQ applies the NEQ predicate on the "deletedbyid" field.
func DeletedbyidNEQ(v int64) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldNEQ(FieldDeletedbyid, v))
}

// DeletedbyidIn applies the In predicate on the "deletedbyid" field.
func DeletedbyidIn(vs ...int64) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldIn(FieldDeletedbyid, vs...))
}

// DeletedbyidNotIn applies the NotIn predicate on the "deletedbyid" field.
func DeletedbyidNotIn(vs ...int64) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldNotIn(FieldDeletedbyid, vs...))
}

// DeletedbyidGT applies the GT predicate on the "deletedbyid" field.
func DeletedbyidGT(v int64) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldGT(FieldDeletedbyid, v))
}

// DeletedbyidGTE applies the GTE predicate on the "deletedbyid" field.
func DeletedbyidGTE(v int64) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldGTE(FieldDeletedbyid, v))
}

// DeletedbyidLT applies the LT predicate on the "deletedbyid" field.
func DeletedbyidLT(v int64) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldLT(FieldDeletedbyid, v))
}

// DeletedbyidLTE applies the LTE predicate on the "deletedbyid" field.
func DeletedbyidLTE(v int64) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldLTE(FieldDeletedbyid, v))
}

// DeletedbyidIsNil applies the IsNil predicate on the "deletedbyid" field.
func DeletedbyidIsNil() predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldIsNull(FieldDeletedbyid))
}

// DeletedbyidNotNil applies the NotNil predicate on the "deletedbyid" field.
func DeletedbyidNotNil() predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldNotNull(FieldDeletedbyid))
}

// DeletedbyusernameEQ applies the EQ predicate on the "deletedbyusername" field.
func DeletedbyusernameEQ(v string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldEQ(FieldDeletedbyusername, v))
}

// DeletedbyusernameNEQ applies the NEQ predicate on the "deletedbyusername" field.
func DeletedbyusernameNEQ(v string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldNEQ(FieldDeletedbyusername, v))
}

// DeletedbyusernameIn applies the In predicate on the "deletedbyusername" field.
func DeletedbyusernameIn(vs ...string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldIn(FieldDeletedbyusername, vs...))
}

// DeletedbyusernameNotIn applies the NotIn predicate on the "deletedbyusername" field.
func DeletedbyusernameNotIn(vs ...string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldNotIn(FieldDeletedbyusername, vs...))
}

// DeletedbyusernameGT applies the GT predicate on the "deletedbyusername" field.
func DeletedbyusernameGT(v string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldGT(FieldDeletedbyusername, v))
}

// DeletedbyusernameGTE applies the GTE predicate on the "deletedbyusername" field.
func DeletedbyusernameGTE(v string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldGTE(FieldDeletedbyusername, v))
}

// DeletedbyusernameLT applies the LT predicate on the "deletedbyusername" field.
func DeletedbyusernameLT(v string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldLT(FieldDeletedbyusername, v))
}

// DeletedbyusernameLTE applies the LTE predicate on the "deletedbyusername" field.
func DeletedbyusernameLTE(v string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldLTE(FieldDeletedbyusername, v))
}

// DeletedbyusernameContains applies the Contains predicate on the "deletedbyusername" field.
func DeletedbyusernameContains(v string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldContains(FieldDeletedbyusername, v))
}

// DeletedbyusernameHasPrefix applies the HasPrefix predicate on the "deletedbyusername" field.
func DeletedbyusernameHasPrefix(v string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldHasPrefix(FieldDeletedbyusername, v))
}

// DeletedbyusernameHasSuffix applies the HasSuffix predicate on the "deletedbyusername" field.
func DeletedbyusernameHasSuffix(v string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldHasSuffix(FieldDeletedbyusername, v))
}

// DeletedbyusernameIsNil applies the IsNil predicate on the "deletedbyusername" field.
func DeletedbyusernameIsNil() predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldIsNull(FieldDeletedbyusername))
}

// DeletedbyusernameNotNil applies the NotNil predicate on the "deletedbyusername" field.
func DeletedbyusernameNotNil() predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldNotNull(FieldDeletedbyusername))
}

// DeletedbyusernameEqualFold applies the EqualFold predicate on the "deletedbyusername" field.
func DeletedbyusernameEqualFold(v string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldEqualFold(FieldDeletedbyusername, v))
}

// DeletedbyusernameContainsFold applies the ContainsFold predicate on the "deletedbyusername" field.
func DeletedbyusernameContainsFold(v string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldContainsFold(FieldDeletedbyusername, v))
}

// DeletedbyEmployeeidEQ applies the EQ predicate on the "deletedbyEmployeeid" field.
func DeletedbyEmployeeidEQ(v int64) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldEQ(FieldDeletedbyEmployeeid, v))
}

// DeletedbyEmployeeidNEQ applies the NEQ predicate on the "deletedbyEmployeeid" field.
func DeletedbyEmployeeidNEQ(v int64) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldNEQ(FieldDeletedbyEmployeeid, v))
}

// DeletedbyEmployeeidIn applies the In predicate on the "deletedbyEmployeeid" field.
func DeletedbyEmployeeidIn(vs ...int64) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldIn(FieldDeletedbyEmployeeid, vs...))
}

// DeletedbyEmployeeidNotIn applies the NotIn predicate on the "deletedbyEmployeeid" field.
func DeletedbyEmployeeidNotIn(vs ...int64) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldNotIn(FieldDeletedbyEmployeeid, vs...))
}

// DeletedbyEmployeeidGT applies the GT predicate on the "deletedbyEmployeeid" field.
func DeletedbyEmployeeidGT(v int64) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldGT(FieldDeletedbyEmployeeid, v))
}

// DeletedbyEmployeeidGTE applies the GTE predicate on the "deletedbyEmployeeid" field.
func DeletedbyEmployeeidGTE(v int64) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldGTE(FieldDeletedbyEmployeeid, v))
}

// DeletedbyEmployeeidLT applies the LT predicate on the "deletedbyEmployeeid" field.
func DeletedbyEmployeeidLT(v int64) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldLT(FieldDeletedbyEmployeeid, v))
}

// DeletedbyEmployeeidLTE applies the LTE predicate on the "deletedbyEmployeeid" field.
func DeletedbyEmployeeidLTE(v int64) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldLTE(FieldDeletedbyEmployeeid, v))
}

// DeletedbyEmployeeidIsNil applies the IsNil predicate on the "deletedbyEmployeeid" field.
func DeletedbyEmployeeidIsNil() predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldIsNull(FieldDeletedbyEmployeeid))
}

// DeletedbyEmployeeidNotNil applies the NotNil predicate on the "deletedbyEmployeeid" field.
func DeletedbyEmployeeidNotNil() predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldNotNull(FieldDeletedbyEmployeeid))
}

// DeletedbyDesignationEQ applies the EQ predicate on the "deletedbyDesignation" field.
func DeletedbyDesignationEQ(v string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldEQ(FieldDeletedbyDesignation, v))
}

// DeletedbyDesignationNEQ applies the NEQ predicate on the "deletedbyDesignation" field.
func DeletedbyDesignationNEQ(v string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldNEQ(FieldDeletedbyDesignation, v))
}

// DeletedbyDesignationIn applies the In predicate on the "deletedbyDesignation" field.
func DeletedbyDesignationIn(vs ...string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldIn(FieldDeletedbyDesignation, vs...))
}

// DeletedbyDesignationNotIn applies the NotIn predicate on the "deletedbyDesignation" field.
func DeletedbyDesignationNotIn(vs ...string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldNotIn(FieldDeletedbyDesignation, vs...))
}

// DeletedbyDesignationGT applies the GT predicate on the "deletedbyDesignation" field.
func DeletedbyDesignationGT(v string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldGT(FieldDeletedbyDesignation, v))
}

// DeletedbyDesignationGTE applies the GTE predicate on the "deletedbyDesignation" field.
func DeletedbyDesignationGTE(v string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldGTE(FieldDeletedbyDesignation, v))
}

// DeletedbyDesignationLT applies the LT predicate on the "deletedbyDesignation" field.
func DeletedbyDesignationLT(v string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldLT(FieldDeletedbyDesignation, v))
}

// DeletedbyDesignationLTE applies the LTE predicate on the "deletedbyDesignation" field.
func DeletedbyDesignationLTE(v string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldLTE(FieldDeletedbyDesignation, v))
}

// DeletedbyDesignationContains applies the Contains predicate on the "deletedbyDesignation" field.
func DeletedbyDesignationContains(v string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldContains(FieldDeletedbyDesignation, v))
}

// DeletedbyDesignationHasPrefix applies the HasPrefix predicate on the "deletedbyDesignation" field.
func DeletedbyDesignationHasPrefix(v string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldHasPrefix(FieldDeletedbyDesignation, v))
}

// DeletedbyDesignationHasSuffix applies the HasSuffix predicate on the "deletedbyDesignation" field.
func DeletedbyDesignationHasSuffix(v string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldHasSuffix(FieldDeletedbyDesignation, v))
}

// DeletedbyDesignationIsNil applies the IsNil predicate on the "deletedbyDesignation" field.
func DeletedbyDesignationIsNil() predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldIsNull(FieldDeletedbyDesignation))
}

// DeletedbyDesignationNotNil applies the NotNil predicate on the "deletedbyDesignation" field.
func DeletedbyDesignationNotNil() predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldNotNull(FieldDeletedbyDesignation))
}

// DeletedbyDesignationEqualFold applies the EqualFold predicate on the "deletedbyDesignation" field.
func DeletedbyDesignationEqualFold(v string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldEqualFold(FieldDeletedbyDesignation, v))
}

// DeletedbyDesignationContainsFold applies the ContainsFold predicate on the "deletedbyDesignation" field.
func DeletedbyDesignationContainsFold(v string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldContainsFold(FieldDeletedbyDesignation, v))
}

// DeletedDateEQ applies the EQ predicate on the "deletedDate" field.
func DeletedDateEQ(v time.Time) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldEQ(FieldDeletedDate, v))
}

// DeletedDateNEQ applies the NEQ predicate on the "deletedDate" field.
func DeletedDateNEQ(v time.Time) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldNEQ(FieldDeletedDate, v))
}

// DeletedDateIn applies the In predicate on the "deletedDate" field.
func DeletedDateIn(vs ...time.Time) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldIn(FieldDeletedDate, vs...))
}

// DeletedDateNotIn applies the NotIn predicate on the "deletedDate" field.
func DeletedDateNotIn(vs ...time.Time) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldNotIn(FieldDeletedDate, vs...))
}

// DeletedDateGT applies the GT predicate on the "deletedDate" field.
func DeletedDateGT(v time.Time) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldGT(FieldDeletedDate, v))
}

// DeletedDateGTE applies the GTE predicate on the "deletedDate" field.
func DeletedDateGTE(v time.Time) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldGTE(FieldDeletedDate, v))
}

// DeletedDateLT applies the LT predicate on the "deletedDate" field.
func DeletedDateLT(v time.Time) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldLT(FieldDeletedDate, v))
}

// DeletedDateLTE applies the LTE predicate on the "deletedDate" field.
func DeletedDateLTE(v time.Time) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldLTE(FieldDeletedDate, v))
}

// DeletedDateIsNil applies the IsNil predicate on the "deletedDate" field.
func DeletedDateIsNil() predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldIsNull(FieldDeletedDate))
}

// DeletedDateNotNil applies the NotNil predicate on the "deletedDate" field.
func DeletedDateNotNil() predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldNotNull(FieldDeletedDate))
}

// CircleCityNameEQ applies the EQ predicate on the "CircleCityName" field.
func CircleCityNameEQ(v string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldEQ(FieldCircleCityName, v))
}

// CircleCityNameNEQ applies the NEQ predicate on the "CircleCityName" field.
func CircleCityNameNEQ(v string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldNEQ(FieldCircleCityName, v))
}

// CircleCityNameIn applies the In predicate on the "CircleCityName" field.
func CircleCityNameIn(vs ...string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldIn(FieldCircleCityName, vs...))
}

// CircleCityNameNotIn applies the NotIn predicate on the "CircleCityName" field.
func CircleCityNameNotIn(vs ...string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldNotIn(FieldCircleCityName, vs...))
}

// CircleCityNameGT applies the GT predicate on the "CircleCityName" field.
func CircleCityNameGT(v string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldGT(FieldCircleCityName, v))
}

// CircleCityNameGTE applies the GTE predicate on the "CircleCityName" field.
func CircleCityNameGTE(v string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldGTE(FieldCircleCityName, v))
}

// CircleCityNameLT applies the LT predicate on the "CircleCityName" field.
func CircleCityNameLT(v string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldLT(FieldCircleCityName, v))
}

// CircleCityNameLTE applies the LTE predicate on the "CircleCityName" field.
func CircleCityNameLTE(v string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldLTE(FieldCircleCityName, v))
}

// CircleCityNameContains applies the Contains predicate on the "CircleCityName" field.
func CircleCityNameContains(v string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldContains(FieldCircleCityName, v))
}

// CircleCityNameHasPrefix applies the HasPrefix predicate on the "CircleCityName" field.
func CircleCityNameHasPrefix(v string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldHasPrefix(FieldCircleCityName, v))
}

// CircleCityNameHasSuffix applies the HasSuffix predicate on the "CircleCityName" field.
func CircleCityNameHasSuffix(v string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldHasSuffix(FieldCircleCityName, v))
}

// CircleCityNameIsNil applies the IsNil predicate on the "CircleCityName" field.
func CircleCityNameIsNil() predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldIsNull(FieldCircleCityName))
}

// CircleCityNameNotNil applies the NotNil predicate on the "CircleCityName" field.
func CircleCityNameNotNil() predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldNotNull(FieldCircleCityName))
}

// CircleCityNameEqualFold applies the EqualFold predicate on the "CircleCityName" field.
func CircleCityNameEqualFold(v string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldEqualFold(FieldCircleCityName, v))
}

// CircleCityNameContainsFold applies the ContainsFold predicate on the "CircleCityName" field.
func CircleCityNameContainsFold(v string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldContainsFold(FieldCircleCityName, v))
}

// DivisionCodeEQ applies the EQ predicate on the "DivisionCode" field.
func DivisionCodeEQ(v int32) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldEQ(FieldDivisionCode, v))
}

// DivisionCodeNEQ applies the NEQ predicate on the "DivisionCode" field.
func DivisionCodeNEQ(v int32) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldNEQ(FieldDivisionCode, v))
}

// DivisionCodeIn applies the In predicate on the "DivisionCode" field.
func DivisionCodeIn(vs ...int32) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldIn(FieldDivisionCode, vs...))
}

// DivisionCodeNotIn applies the NotIn predicate on the "DivisionCode" field.
func DivisionCodeNotIn(vs ...int32) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldNotIn(FieldDivisionCode, vs...))
}

// DivisionCodeGT applies the GT predicate on the "DivisionCode" field.
func DivisionCodeGT(v int32) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldGT(FieldDivisionCode, v))
}

// DivisionCodeGTE applies the GTE predicate on the "DivisionCode" field.
func DivisionCodeGTE(v int32) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldGTE(FieldDivisionCode, v))
}

// DivisionCodeLT applies the LT predicate on the "DivisionCode" field.
func DivisionCodeLT(v int32) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldLT(FieldDivisionCode, v))
}

// DivisionCodeLTE applies the LTE predicate on the "DivisionCode" field.
func DivisionCodeLTE(v int32) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldLTE(FieldDivisionCode, v))
}

// DivisionCodeIsNil applies the IsNil predicate on the "DivisionCode" field.
func DivisionCodeIsNil() predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldIsNull(FieldDivisionCode))
}

// DivisionCodeNotNil applies the NotNil predicate on the "DivisionCode" field.
func DivisionCodeNotNil() predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldNotNull(FieldDivisionCode))
}

// RegionCodeEQ applies the EQ predicate on the "RegionCode" field.
func RegionCodeEQ(v int32) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldEQ(FieldRegionCode, v))
}

// RegionCodeNEQ applies the NEQ predicate on the "RegionCode" field.
func RegionCodeNEQ(v int32) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldNEQ(FieldRegionCode, v))
}

// RegionCodeIn applies the In predicate on the "RegionCode" field.
func RegionCodeIn(vs ...int32) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldIn(FieldRegionCode, vs...))
}

// RegionCodeNotIn applies the NotIn predicate on the "RegionCode" field.
func RegionCodeNotIn(vs ...int32) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldNotIn(FieldRegionCode, vs...))
}

// RegionCodeGT applies the GT predicate on the "RegionCode" field.
func RegionCodeGT(v int32) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldGT(FieldRegionCode, v))
}

// RegionCodeGTE applies the GTE predicate on the "RegionCode" field.
func RegionCodeGTE(v int32) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldGTE(FieldRegionCode, v))
}

// RegionCodeLT applies the LT predicate on the "RegionCode" field.
func RegionCodeLT(v int32) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldLT(FieldRegionCode, v))
}

// RegionCodeLTE applies the LTE predicate on the "RegionCode" field.
func RegionCodeLTE(v int32) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldLTE(FieldRegionCode, v))
}

// RegionCodeIsNil applies the IsNil predicate on the "RegionCode" field.
func RegionCodeIsNil() predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldIsNull(FieldRegionCode))
}

// RegionCodeNotNil applies the NotNil predicate on the "RegionCode" field.
func RegionCodeNotNil() predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldNotNull(FieldRegionCode))
}

// DivisionNameEQ applies the EQ predicate on the "DivisionName" field.
func DivisionNameEQ(v string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldEQ(FieldDivisionName, v))
}

// DivisionNameNEQ applies the NEQ predicate on the "DivisionName" field.
func DivisionNameNEQ(v string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldNEQ(FieldDivisionName, v))
}

// DivisionNameIn applies the In predicate on the "DivisionName" field.
func DivisionNameIn(vs ...string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldIn(FieldDivisionName, vs...))
}

// DivisionNameNotIn applies the NotIn predicate on the "DivisionName" field.
func DivisionNameNotIn(vs ...string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldNotIn(FieldDivisionName, vs...))
}

// DivisionNameGT applies the GT predicate on the "DivisionName" field.
func DivisionNameGT(v string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldGT(FieldDivisionName, v))
}

// DivisionNameGTE applies the GTE predicate on the "DivisionName" field.
func DivisionNameGTE(v string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldGTE(FieldDivisionName, v))
}

// DivisionNameLT applies the LT predicate on the "DivisionName" field.
func DivisionNameLT(v string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldLT(FieldDivisionName, v))
}

// DivisionNameLTE applies the LTE predicate on the "DivisionName" field.
func DivisionNameLTE(v string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldLTE(FieldDivisionName, v))
}

// DivisionNameContains applies the Contains predicate on the "DivisionName" field.
func DivisionNameContains(v string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldContains(FieldDivisionName, v))
}

// DivisionNameHasPrefix applies the HasPrefix predicate on the "DivisionName" field.
func DivisionNameHasPrefix(v string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldHasPrefix(FieldDivisionName, v))
}

// DivisionNameHasSuffix applies the HasSuffix predicate on the "DivisionName" field.
func DivisionNameHasSuffix(v string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldHasSuffix(FieldDivisionName, v))
}

// DivisionNameIsNil applies the IsNil predicate on the "DivisionName" field.
func DivisionNameIsNil() predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldIsNull(FieldDivisionName))
}

// DivisionNameNotNil applies the NotNil predicate on the "DivisionName" field.
func DivisionNameNotNil() predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldNotNull(FieldDivisionName))
}

// DivisionNameEqualFold applies the EqualFold predicate on the "DivisionName" field.
func DivisionNameEqualFold(v string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldEqualFold(FieldDivisionName, v))
}

// DivisionNameContainsFold applies the ContainsFold predicate on the "DivisionName" field.
func DivisionNameContainsFold(v string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldContainsFold(FieldDivisionName, v))
}

// RegionIDEQ applies the EQ predicate on the "RegionID" field.
func RegionIDEQ(v int32) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldEQ(FieldRegionID, v))
}

// RegionIDNEQ applies the NEQ predicate on the "RegionID" field.
func RegionIDNEQ(v int32) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldNEQ(FieldRegionID, v))
}

// RegionIDIn applies the In predicate on the "RegionID" field.
func RegionIDIn(vs ...int32) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldIn(FieldRegionID, vs...))
}

// RegionIDNotIn applies the NotIn predicate on the "RegionID" field.
func RegionIDNotIn(vs ...int32) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldNotIn(FieldRegionID, vs...))
}

// RegionIDGT applies the GT predicate on the "RegionID" field.
func RegionIDGT(v int32) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldGT(FieldRegionID, v))
}

// RegionIDGTE applies the GTE predicate on the "RegionID" field.
func RegionIDGTE(v int32) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldGTE(FieldRegionID, v))
}

// RegionIDLT applies the LT predicate on the "RegionID" field.
func RegionIDLT(v int32) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldLT(FieldRegionID, v))
}

// RegionIDLTE applies the LTE predicate on the "RegionID" field.
func RegionIDLTE(v int32) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldLTE(FieldRegionID, v))
}

// RegionIDIsNil applies the IsNil predicate on the "RegionID" field.
func RegionIDIsNil() predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldIsNull(FieldRegionID))
}

// RegionIDNotNil applies the NotNil predicate on the "RegionID" field.
func RegionIDNotNil() predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldNotNull(FieldRegionID))
}

// RegionNameEQ applies the EQ predicate on the "RegionName" field.
func RegionNameEQ(v string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldEQ(FieldRegionName, v))
}

// RegionNameNEQ applies the NEQ predicate on the "RegionName" field.
func RegionNameNEQ(v string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldNEQ(FieldRegionName, v))
}

// RegionNameIn applies the In predicate on the "RegionName" field.
func RegionNameIn(vs ...string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldIn(FieldRegionName, vs...))
}

// RegionNameNotIn applies the NotIn predicate on the "RegionName" field.
func RegionNameNotIn(vs ...string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldNotIn(FieldRegionName, vs...))
}

// RegionNameGT applies the GT predicate on the "RegionName" field.
func RegionNameGT(v string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldGT(FieldRegionName, v))
}

// RegionNameGTE applies the GTE predicate on the "RegionName" field.
func RegionNameGTE(v string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldGTE(FieldRegionName, v))
}

// RegionNameLT applies the LT predicate on the "RegionName" field.
func RegionNameLT(v string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldLT(FieldRegionName, v))
}

// RegionNameLTE applies the LTE predicate on the "RegionName" field.
func RegionNameLTE(v string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldLTE(FieldRegionName, v))
}

// RegionNameContains applies the Contains predicate on the "RegionName" field.
func RegionNameContains(v string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldContains(FieldRegionName, v))
}

// RegionNameHasPrefix applies the HasPrefix predicate on the "RegionName" field.
func RegionNameHasPrefix(v string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldHasPrefix(FieldRegionName, v))
}

// RegionNameHasSuffix applies the HasSuffix predicate on the "RegionName" field.
func RegionNameHasSuffix(v string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldHasSuffix(FieldRegionName, v))
}

// RegionNameIsNil applies the IsNil predicate on the "RegionName" field.
func RegionNameIsNil() predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldIsNull(FieldRegionName))
}

// RegionNameNotNil applies the NotNil predicate on the "RegionName" field.
func RegionNameNotNil() predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldNotNull(FieldRegionName))
}

// RegionNameEqualFold applies the EqualFold predicate on the "RegionName" field.
func RegionNameEqualFold(v string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldEqualFold(FieldRegionName, v))
}

// RegionNameContainsFold applies the ContainsFold predicate on the "RegionName" field.
func RegionNameContainsFold(v string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldContainsFold(FieldRegionName, v))
}

// RegionCityNameEQ applies the EQ predicate on the "RegionCityName" field.
func RegionCityNameEQ(v string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldEQ(FieldRegionCityName, v))
}

// RegionCityNameNEQ applies the NEQ predicate on the "RegionCityName" field.
func RegionCityNameNEQ(v string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldNEQ(FieldRegionCityName, v))
}

// RegionCityNameIn applies the In predicate on the "RegionCityName" field.
func RegionCityNameIn(vs ...string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldIn(FieldRegionCityName, vs...))
}

// RegionCityNameNotIn applies the NotIn predicate on the "RegionCityName" field.
func RegionCityNameNotIn(vs ...string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldNotIn(FieldRegionCityName, vs...))
}

// RegionCityNameGT applies the GT predicate on the "RegionCityName" field.
func RegionCityNameGT(v string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldGT(FieldRegionCityName, v))
}

// RegionCityNameGTE applies the GTE predicate on the "RegionCityName" field.
func RegionCityNameGTE(v string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldGTE(FieldRegionCityName, v))
}

// RegionCityNameLT applies the LT predicate on the "RegionCityName" field.
func RegionCityNameLT(v string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldLT(FieldRegionCityName, v))
}

// RegionCityNameLTE applies the LTE predicate on the "RegionCityName" field.
func RegionCityNameLTE(v string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldLTE(FieldRegionCityName, v))
}

// RegionCityNameContains applies the Contains predicate on the "RegionCityName" field.
func RegionCityNameContains(v string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldContains(FieldRegionCityName, v))
}

// RegionCityNameHasPrefix applies the HasPrefix predicate on the "RegionCityName" field.
func RegionCityNameHasPrefix(v string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldHasPrefix(FieldRegionCityName, v))
}

// RegionCityNameHasSuffix applies the HasSuffix predicate on the "RegionCityName" field.
func RegionCityNameHasSuffix(v string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldHasSuffix(FieldRegionCityName, v))
}

// RegionCityNameIsNil applies the IsNil predicate on the "RegionCityName" field.
func RegionCityNameIsNil() predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldIsNull(FieldRegionCityName))
}

// RegionCityNameNotNil applies the NotNil predicate on the "RegionCityName" field.
func RegionCityNameNotNil() predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldNotNull(FieldRegionCityName))
}

// RegionCityNameEqualFold applies the EqualFold predicate on the "RegionCityName" field.
func RegionCityNameEqualFold(v string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldEqualFold(FieldRegionCityName, v))
}

// RegionCityNameContainsFold applies the ContainsFold predicate on the "RegionCityName" field.
func RegionCityNameContainsFold(v string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldContainsFold(FieldRegionCityName, v))
}

// CentreCityNameEQ applies the EQ predicate on the "CentreCityName" field.
func CentreCityNameEQ(v string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldEQ(FieldCentreCityName, v))
}

// CentreCityNameNEQ applies the NEQ predicate on the "CentreCityName" field.
func CentreCityNameNEQ(v string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldNEQ(FieldCentreCityName, v))
}

// CentreCityNameIn applies the In predicate on the "CentreCityName" field.
func CentreCityNameIn(vs ...string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldIn(FieldCentreCityName, vs...))
}

// CentreCityNameNotIn applies the NotIn predicate on the "CentreCityName" field.
func CentreCityNameNotIn(vs ...string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldNotIn(FieldCentreCityName, vs...))
}

// CentreCityNameGT applies the GT predicate on the "CentreCityName" field.
func CentreCityNameGT(v string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldGT(FieldCentreCityName, v))
}

// CentreCityNameGTE applies the GTE predicate on the "CentreCityName" field.
func CentreCityNameGTE(v string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldGTE(FieldCentreCityName, v))
}

// CentreCityNameLT applies the LT predicate on the "CentreCityName" field.
func CentreCityNameLT(v string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldLT(FieldCentreCityName, v))
}

// CentreCityNameLTE applies the LTE predicate on the "CentreCityName" field.
func CentreCityNameLTE(v string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldLTE(FieldCentreCityName, v))
}

// CentreCityNameContains applies the Contains predicate on the "CentreCityName" field.
func CentreCityNameContains(v string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldContains(FieldCentreCityName, v))
}

// CentreCityNameHasPrefix applies the HasPrefix predicate on the "CentreCityName" field.
func CentreCityNameHasPrefix(v string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldHasPrefix(FieldCentreCityName, v))
}

// CentreCityNameHasSuffix applies the HasSuffix predicate on the "CentreCityName" field.
func CentreCityNameHasSuffix(v string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldHasSuffix(FieldCentreCityName, v))
}

// CentreCityNameIsNil applies the IsNil predicate on the "CentreCityName" field.
func CentreCityNameIsNil() predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldIsNull(FieldCentreCityName))
}

// CentreCityNameNotNil applies the NotNil predicate on the "CentreCityName" field.
func CentreCityNameNotNil() predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldNotNull(FieldCentreCityName))
}

// CentreCityNameEqualFold applies the EqualFold predicate on the "CentreCityName" field.
func CentreCityNameEqualFold(v string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldEqualFold(FieldCentreCityName, v))
}

// CentreCityNameContainsFold applies the ContainsFold predicate on the "CentreCityName" field.
func CentreCityNameContainsFold(v string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldContainsFold(FieldCentreCityName, v))
}

// RemarksEQ applies the EQ predicate on the "Remarks" field.
func RemarksEQ(v string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldEQ(FieldRemarks, v))
}

// RemarksNEQ applies the NEQ predicate on the "Remarks" field.
func RemarksNEQ(v string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldNEQ(FieldRemarks, v))
}

// RemarksIn applies the In predicate on the "Remarks" field.
func RemarksIn(vs ...string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldIn(FieldRemarks, vs...))
}

// RemarksNotIn applies the NotIn predicate on the "Remarks" field.
func RemarksNotIn(vs ...string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldNotIn(FieldRemarks, vs...))
}

// RemarksGT applies the GT predicate on the "Remarks" field.
func RemarksGT(v string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldGT(FieldRemarks, v))
}

// RemarksGTE applies the GTE predicate on the "Remarks" field.
func RemarksGTE(v string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldGTE(FieldRemarks, v))
}

// RemarksLT applies the LT predicate on the "Remarks" field.
func RemarksLT(v string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldLT(FieldRemarks, v))
}

// RemarksLTE applies the LTE predicate on the "Remarks" field.
func RemarksLTE(v string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldLTE(FieldRemarks, v))
}

// RemarksContains applies the Contains predicate on the "Remarks" field.
func RemarksContains(v string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldContains(FieldRemarks, v))
}

// RemarksHasPrefix applies the HasPrefix predicate on the "Remarks" field.
func RemarksHasPrefix(v string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldHasPrefix(FieldRemarks, v))
}

// RemarksHasSuffix applies the HasSuffix predicate on the "Remarks" field.
func RemarksHasSuffix(v string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldHasSuffix(FieldRemarks, v))
}

// RemarksIsNil applies the IsNil predicate on the "Remarks" field.
func RemarksIsNil() predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldIsNull(FieldRemarks))
}

// RemarksNotNil applies the NotNil predicate on the "Remarks" field.
func RemarksNotNil() predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldNotNull(FieldRemarks))
}

// RemarksEqualFold applies the EqualFold predicate on the "Remarks" field.
func RemarksEqualFold(v string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldEqualFold(FieldRemarks, v))
}

// RemarksContainsFold applies the ContainsFold predicate on the "Remarks" field.
func RemarksContainsFold(v string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldContainsFold(FieldRemarks, v))
}

// UpdatedAtEQ applies the EQ predicate on the "UpdatedAt" field.
func UpdatedAtEQ(v time.Time) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "UpdatedAt" field.
func UpdatedAtNEQ(v time.Time) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "UpdatedAt" field.
func UpdatedAtIn(vs ...time.Time) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "UpdatedAt" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "UpdatedAt" field.
func UpdatedAtGT(v time.Time) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "UpdatedAt" field.
func UpdatedAtGTE(v time.Time) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "UpdatedAt" field.
func UpdatedAtLT(v time.Time) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "UpdatedAt" field.
func UpdatedAtLTE(v time.Time) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldLTE(FieldUpdatedAt, v))
}

// UpdatedAtIsNil applies the IsNil predicate on the "UpdatedAt" field.
func UpdatedAtIsNil() predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldIsNull(FieldUpdatedAt))
}

// UpdatedAtNotNil applies the NotNil predicate on the "UpdatedAt" field.
func UpdatedAtNotNil() predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldNotNull(FieldUpdatedAt))
}

// UpdatedByEQ applies the EQ predicate on the "UpdatedBy" field.
func UpdatedByEQ(v string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldEQ(FieldUpdatedBy, v))
}

// UpdatedByNEQ applies the NEQ predicate on the "UpdatedBy" field.
func UpdatedByNEQ(v string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldNEQ(FieldUpdatedBy, v))
}

// UpdatedByIn applies the In predicate on the "UpdatedBy" field.
func UpdatedByIn(vs ...string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldIn(FieldUpdatedBy, vs...))
}

// UpdatedByNotIn applies the NotIn predicate on the "UpdatedBy" field.
func UpdatedByNotIn(vs ...string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldNotIn(FieldUpdatedBy, vs...))
}

// UpdatedByGT applies the GT predicate on the "UpdatedBy" field.
func UpdatedByGT(v string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldGT(FieldUpdatedBy, v))
}

// UpdatedByGTE applies the GTE predicate on the "UpdatedBy" field.
func UpdatedByGTE(v string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldGTE(FieldUpdatedBy, v))
}

// UpdatedByLT applies the LT predicate on the "UpdatedBy" field.
func UpdatedByLT(v string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldLT(FieldUpdatedBy, v))
}

// UpdatedByLTE applies the LTE predicate on the "UpdatedBy" field.
func UpdatedByLTE(v string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldLTE(FieldUpdatedBy, v))
}

// UpdatedByContains applies the Contains predicate on the "UpdatedBy" field.
func UpdatedByContains(v string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldContains(FieldUpdatedBy, v))
}

// UpdatedByHasPrefix applies the HasPrefix predicate on the "UpdatedBy" field.
func UpdatedByHasPrefix(v string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldHasPrefix(FieldUpdatedBy, v))
}

// UpdatedByHasSuffix applies the HasSuffix predicate on the "UpdatedBy" field.
func UpdatedByHasSuffix(v string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldHasSuffix(FieldUpdatedBy, v))
}

// UpdatedByIsNil applies the IsNil predicate on the "UpdatedBy" field.
func UpdatedByIsNil() predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldIsNull(FieldUpdatedBy))
}

// UpdatedByNotNil applies the NotNil predicate on the "UpdatedBy" field.
func UpdatedByNotNil() predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldNotNull(FieldUpdatedBy))
}

// UpdatedByEqualFold applies the EqualFold predicate on the "UpdatedBy" field.
func UpdatedByEqualFold(v string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldEqualFold(FieldUpdatedBy, v))
}

// UpdatedByContainsFold applies the ContainsFold predicate on the "UpdatedBy" field.
func UpdatedByContainsFold(v string) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldContainsFold(FieldUpdatedBy, v))
}

// CentreCodeEQ applies the EQ predicate on the "CentreCode" field.
func CentreCodeEQ(v int32) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldEQ(FieldCentreCode, v))
}

// CentreCodeNEQ applies the NEQ predicate on the "CentreCode" field.
func CentreCodeNEQ(v int32) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldNEQ(FieldCentreCode, v))
}

// CentreCodeIn applies the In predicate on the "CentreCode" field.
func CentreCodeIn(vs ...int32) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldIn(FieldCentreCode, vs...))
}

// CentreCodeNotIn applies the NotIn predicate on the "CentreCode" field.
func CentreCodeNotIn(vs ...int32) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldNotIn(FieldCentreCode, vs...))
}

// CentreCodeGT applies the GT predicate on the "CentreCode" field.
func CentreCodeGT(v int32) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldGT(FieldCentreCode, v))
}

// CentreCodeGTE applies the GTE predicate on the "CentreCode" field.
func CentreCodeGTE(v int32) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldGTE(FieldCentreCode, v))
}

// CentreCodeLT applies the LT predicate on the "CentreCode" field.
func CentreCodeLT(v int32) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldLT(FieldCentreCode, v))
}

// CentreCodeLTE applies the LTE predicate on the "CentreCode" field.
func CentreCodeLTE(v int32) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldLTE(FieldCentreCode, v))
}

// CentreCodeIsNil applies the IsNil predicate on the "CentreCode" field.
func CentreCodeIsNil() predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldIsNull(FieldCentreCode))
}

// CentreCodeNotNil applies the NotNil predicate on the "CentreCode" field.
func CentreCodeNotNil() predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldNotNull(FieldCentreCode))
}

// CircleIDEQ applies the EQ predicate on the "CircleID" field.
func CircleIDEQ(v int32) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldEQ(FieldCircleID, v))
}

// CircleIDNEQ applies the NEQ predicate on the "CircleID" field.
func CircleIDNEQ(v int32) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldNEQ(FieldCircleID, v))
}

// CircleIDIn applies the In predicate on the "CircleID" field.
func CircleIDIn(vs ...int32) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldIn(FieldCircleID, vs...))
}

// CircleIDNotIn applies the NotIn predicate on the "CircleID" field.
func CircleIDNotIn(vs ...int32) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldNotIn(FieldCircleID, vs...))
}

// CircleIDGT applies the GT predicate on the "CircleID" field.
func CircleIDGT(v int32) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldGT(FieldCircleID, v))
}

// CircleIDGTE applies the GTE predicate on the "CircleID" field.
func CircleIDGTE(v int32) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldGTE(FieldCircleID, v))
}

// CircleIDLT applies the LT predicate on the "CircleID" field.
func CircleIDLT(v int32) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldLT(FieldCircleID, v))
}

// CircleIDLTE applies the LTE predicate on the "CircleID" field.
func CircleIDLTE(v int32) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldLTE(FieldCircleID, v))
}

// CircleIDIsNil applies the IsNil predicate on the "CircleID" field.
func CircleIDIsNil() predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldIsNull(FieldCircleID))
}

// CircleIDNotNil applies the NotNil predicate on the "CircleID" field.
func CircleIDNotNil() predicate.ExamCityCenter {
	return predicate.ExamCityCenter(sql.FieldNotNull(FieldCircleID))
}

// HasExamCityCenterRef applies the HasEdge predicate on the "ExamCityCenterRef" edge.
func HasExamCityCenterRef() predicate.ExamCityCenter {
	return predicate.ExamCityCenter(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ExamCityCenterRefTable, ExamCityCenterRefColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasExamCityCenterRefWith applies the HasEdge predicate on the "ExamCityCenterRef" edge with a given conditions (other predicates).
func HasExamCityCenterRefWith(preds ...predicate.Exam_Applications_IP) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(func(s *sql.Selector) {
		step := newExamCityCenterRefStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasExamCityCenterMTSPMMGRef applies the HasEdge predicate on the "ExamCityCenterMTSPMMGRef" edge.
func HasExamCityCenterMTSPMMGRef() predicate.ExamCityCenter {
	return predicate.ExamCityCenter(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ExamCityCenterMTSPMMGRefTable, ExamCityCenterMTSPMMGRefColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasExamCityCenterMTSPMMGRefWith applies the HasEdge predicate on the "ExamCityCenterMTSPMMGRef" edge with a given conditions (other predicates).
func HasExamCityCenterMTSPMMGRefWith(preds ...predicate.Exam_Application_MTSPMMG) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(func(s *sql.Selector) {
		step := newExamCityCenterMTSPMMGRefStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasExamCityCenterGDSPARef applies the HasEdge predicate on the "ExamCityCenterGDSPARef" edge.
func HasExamCityCenterGDSPARef() predicate.ExamCityCenter {
	return predicate.ExamCityCenter(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ExamCityCenterGDSPARefTable, ExamCityCenterGDSPARefColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasExamCityCenterGDSPARefWith applies the HasEdge predicate on the "ExamCityCenterGDSPARef" edge with a given conditions (other predicates).
func HasExamCityCenterGDSPARefWith(preds ...predicate.Exam_Applications_GDSPA) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(func(s *sql.Selector) {
		step := newExamCityCenterGDSPARefStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasExamCityCenterGDSPMRef applies the HasEdge predicate on the "ExamCityCenterGDSPMRef" edge.
func HasExamCityCenterGDSPMRef() predicate.ExamCityCenter {
	return predicate.ExamCityCenter(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ExamCityCenterGDSPMRefTable, ExamCityCenterGDSPMRefColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasExamCityCenterGDSPMRefWith applies the HasEdge predicate on the "ExamCityCenterGDSPMRef" edge with a given conditions (other predicates).
func HasExamCityCenterGDSPMRefWith(preds ...predicate.Exam_Applications_GDSPM) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(func(s *sql.Selector) {
		step := newExamCityCenterGDSPMRefStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasExamCityCenterPMPARef applies the HasEdge predicate on the "ExamCityCenterPMPARef" edge.
func HasExamCityCenterPMPARef() predicate.ExamCityCenter {
	return predicate.ExamCityCenter(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ExamCityCenterPMPARefTable, ExamCityCenterPMPARefColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasExamCityCenterPMPARefWith applies the HasEdge predicate on the "ExamCityCenterPMPARef" edge with a given conditions (other predicates).
func HasExamCityCenterPMPARefWith(preds ...predicate.Exam_Applications_PMPA) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(func(s *sql.Selector) {
		step := newExamCityCenterPMPARefStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasExamCityCenterPSRef applies the HasEdge predicate on the "ExamCityCenterPSRef" edge.
func HasExamCityCenterPSRef() predicate.ExamCityCenter {
	return predicate.ExamCityCenter(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ExamCityCenterPSRefTable, ExamCityCenterPSRefColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasExamCityCenterPSRefWith applies the HasEdge predicate on the "ExamCityCenterPSRef" edge with a given conditions (other predicates).
func HasExamCityCenterPSRefWith(preds ...predicate.Exam_Applications_PS) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(func(s *sql.Selector) {
		step := newExamCityCenterPSRefStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ExamCityCenter) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ExamCityCenter) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ExamCityCenter) predicate.ExamCityCenter {
	return predicate.ExamCityCenter(func(s *sql.Selector) {
		p(s.Not())
	})
}
