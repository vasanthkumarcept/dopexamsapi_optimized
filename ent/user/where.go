// Code generated by ent, DO NOT EDIT.

package user

import (
	"recruit/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.User {
	return predicate.User(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.User {
	return predicate.User(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.User {
	return predicate.User(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.User {
	return predicate.User(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.User {
	return predicate.User(sql.FieldLTE(FieldID, id))
}

// EmployeedID applies equality check predicate on the "EmployeedID" field. It's identical to EmployeedIDEQ.
func EmployeedID(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldEmployeedID, v))
}

// IDVerified applies equality check predicate on the "IDVerified" field. It's identical to IDVerifiedEQ.
func IDVerified(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldIDVerified, v))
}

// IDRemStatus applies equality check predicate on the "IDRemStatus" field. It's identical to IDRemStatusEQ.
func IDRemStatus(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldIDRemStatus, v))
}

// IDRemarks applies equality check predicate on the "IDRemarks" field. It's identical to IDRemarksEQ.
func IDRemarks(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldIDRemarks, v))
}

// EmployeedName applies equality check predicate on the "EmployeedName" field. It's identical to EmployeedNameEQ.
func EmployeedName(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldEmployeedName, v))
}

// NameVerified applies equality check predicate on the "nameVerified" field. It's identical to NameVerifiedEQ.
func NameVerified(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldNameVerified, v))
}

// NameRemStatus applies equality check predicate on the "nameRemStatus" field. It's identical to NameRemStatusEQ.
func NameRemStatus(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldNameRemStatus, v))
}

// NameRemarks applies equality check predicate on the "nameRemarks" field. It's identical to NameRemarksEQ.
func NameRemarks(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldNameRemarks, v))
}

// DOB applies equality check predicate on the "DOB" field. It's identical to DOBEQ.
func DOB(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldDOB, v))
}

// DOBVerified applies equality check predicate on the "DOBVerified" field. It's identical to DOBVerifiedEQ.
func DOBVerified(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldDOBVerified, v))
}

// DOBRemStatus applies equality check predicate on the "DOBRemStatus" field. It's identical to DOBRemStatusEQ.
func DOBRemStatus(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldDOBRemStatus, v))
}

// DOBRemarks applies equality check predicate on the "DOBRemarks" field. It's identical to DOBRemarksEQ.
func DOBRemarks(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldDOBRemarks, v))
}

// GenderVerified applies equality check predicate on the "genderVerified" field. It's identical to GenderVerifiedEQ.
func GenderVerified(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldGenderVerified, v))
}

// GenderRemStatus applies equality check predicate on the "genderRemStatus" field. It's identical to GenderRemStatusEQ.
func GenderRemStatus(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldGenderRemStatus, v))
}

// GenderRemarks applies equality check predicate on the "genderRemarks" field. It's identical to GenderRemarksEQ.
func GenderRemarks(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldGenderRemarks, v))
}

// Cadreid applies equality check predicate on the "Cadreid" field. It's identical to CadreidEQ.
func Cadreid(v int32) predicate.User {
	return predicate.User(sql.FieldEQ(FieldCadreid, v))
}

// CadreidVerified applies equality check predicate on the "cadreidVerified" field. It's identical to CadreidVerifiedEQ.
func CadreidVerified(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldCadreidVerified, v))
}

// CadreidRemStatus applies equality check predicate on the "cadreidRemStatus" field. It's identical to CadreidRemStatusEQ.
func CadreidRemStatus(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldCadreidRemStatus, v))
}

// CadreidRemarks applies equality check predicate on the "cadreidRemarks" field. It's identical to CadreidRemarksEQ.
func CadreidRemarks(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldCadreidRemarks, v))
}

// OfficeID applies equality check predicate on the "OfficeID" field. It's identical to OfficeIDEQ.
func OfficeID(v int32) predicate.User {
	return predicate.User(sql.FieldEQ(FieldOfficeID, v))
}

// OfficeIDVerified applies equality check predicate on the "officeIDVerified" field. It's identical to OfficeIDVerifiedEQ.
func OfficeIDVerified(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldOfficeIDVerified, v))
}

// OfficeIDRemStatus applies equality check predicate on the "officeIDRemStatus" field. It's identical to OfficeIDRemStatusEQ.
func OfficeIDRemStatus(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldOfficeIDRemStatus, v))
}

// OfficeIDRemarks applies equality check predicate on the "officeIDRemarks" field. It's identical to OfficeIDRemarksEQ.
func OfficeIDRemarks(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldOfficeIDRemarks, v))
}

// PH applies equality check predicate on the "PH" field. It's identical to PHEQ.
func PH(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldPH, v))
}

// PHVerified applies equality check predicate on the "PHVerified" field. It's identical to PHVerifiedEQ.
func PHVerified(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldPHVerified, v))
}

// PHRemStatus applies equality check predicate on the "PHRemStatus" field. It's identical to PHRemStatusEQ.
func PHRemStatus(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldPHRemStatus, v))
}

// PHRemarks applies equality check predicate on the "PHRemarks" field. It's identical to PHRemarksEQ.
func PHRemarks(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldPHRemarks, v))
}

// PHDetails applies equality check predicate on the "PHDetails" field. It's identical to PHDetailsEQ.
func PHDetails(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldPHDetails, v))
}

// PHDetailsVerified applies equality check predicate on the "PHDetailsVerified" field. It's identical to PHDetailsVerifiedEQ.
func PHDetailsVerified(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldPHDetailsVerified, v))
}

// PHDetailsRemStatus applies equality check predicate on the "PHDetailsRemStatus" field. It's identical to PHDetailsRemStatusEQ.
func PHDetailsRemStatus(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldPHDetailsRemStatus, v))
}

// PHDetailsRemarks applies equality check predicate on the "PHDetailsRemarks" field. It's identical to PHDetailsRemarksEQ.
func PHDetailsRemarks(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldPHDetailsRemarks, v))
}

// APSWorking applies equality check predicate on the "APSWorking" field. It's identical to APSWorkingEQ.
func APSWorking(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldAPSWorking, v))
}

// APSWorkingVerified applies equality check predicate on the "APSWorkingVerified" field. It's identical to APSWorkingVerifiedEQ.
func APSWorkingVerified(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldAPSWorkingVerified, v))
}

// APSWorkingRemStatus applies equality check predicate on the "APSWorkingRemStatus" field. It's identical to APSWorkingRemStatusEQ.
func APSWorkingRemStatus(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldAPSWorkingRemStatus, v))
}

// APSWorkingRemarks applies equality check predicate on the "APSWorkingRemarks" field. It's identical to APSWorkingRemarksEQ.
func APSWorkingRemarks(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldAPSWorkingRemarks, v))
}

// Profilestatus applies equality check predicate on the "profilestatus" field. It's identical to ProfilestatusEQ.
func Profilestatus(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldProfilestatus, v))
}

// EmployeedIDEQ applies the EQ predicate on the "EmployeedID" field.
func EmployeedIDEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldEmployeedID, v))
}

// EmployeedIDNEQ applies the NEQ predicate on the "EmployeedID" field.
func EmployeedIDNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldEmployeedID, v))
}

// EmployeedIDIn applies the In predicate on the "EmployeedID" field.
func EmployeedIDIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldEmployeedID, vs...))
}

// EmployeedIDNotIn applies the NotIn predicate on the "EmployeedID" field.
func EmployeedIDNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldEmployeedID, vs...))
}

// EmployeedIDGT applies the GT predicate on the "EmployeedID" field.
func EmployeedIDGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldEmployeedID, v))
}

// EmployeedIDGTE applies the GTE predicate on the "EmployeedID" field.
func EmployeedIDGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldEmployeedID, v))
}

// EmployeedIDLT applies the LT predicate on the "EmployeedID" field.
func EmployeedIDLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldEmployeedID, v))
}

// EmployeedIDLTE applies the LTE predicate on the "EmployeedID" field.
func EmployeedIDLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldEmployeedID, v))
}

// EmployeedIDContains applies the Contains predicate on the "EmployeedID" field.
func EmployeedIDContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldEmployeedID, v))
}

// EmployeedIDHasPrefix applies the HasPrefix predicate on the "EmployeedID" field.
func EmployeedIDHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldEmployeedID, v))
}

// EmployeedIDHasSuffix applies the HasSuffix predicate on the "EmployeedID" field.
func EmployeedIDHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldEmployeedID, v))
}

// EmployeedIDEqualFold applies the EqualFold predicate on the "EmployeedID" field.
func EmployeedIDEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldEmployeedID, v))
}

// EmployeedIDContainsFold applies the ContainsFold predicate on the "EmployeedID" field.
func EmployeedIDContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldEmployeedID, v))
}

// IDVerifiedEQ applies the EQ predicate on the "IDVerified" field.
func IDVerifiedEQ(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldIDVerified, v))
}

// IDVerifiedNEQ applies the NEQ predicate on the "IDVerified" field.
func IDVerifiedNEQ(v bool) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldIDVerified, v))
}

// IDRemStatusEQ applies the EQ predicate on the "IDRemStatus" field.
func IDRemStatusEQ(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldIDRemStatus, v))
}

// IDRemStatusNEQ applies the NEQ predicate on the "IDRemStatus" field.
func IDRemStatusNEQ(v bool) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldIDRemStatus, v))
}

// IDRemarksEQ applies the EQ predicate on the "IDRemarks" field.
func IDRemarksEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldIDRemarks, v))
}

// IDRemarksNEQ applies the NEQ predicate on the "IDRemarks" field.
func IDRemarksNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldIDRemarks, v))
}

// IDRemarksIn applies the In predicate on the "IDRemarks" field.
func IDRemarksIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldIDRemarks, vs...))
}

// IDRemarksNotIn applies the NotIn predicate on the "IDRemarks" field.
func IDRemarksNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldIDRemarks, vs...))
}

// IDRemarksGT applies the GT predicate on the "IDRemarks" field.
func IDRemarksGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldIDRemarks, v))
}

// IDRemarksGTE applies the GTE predicate on the "IDRemarks" field.
func IDRemarksGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldIDRemarks, v))
}

// IDRemarksLT applies the LT predicate on the "IDRemarks" field.
func IDRemarksLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldIDRemarks, v))
}

// IDRemarksLTE applies the LTE predicate on the "IDRemarks" field.
func IDRemarksLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldIDRemarks, v))
}

// IDRemarksContains applies the Contains predicate on the "IDRemarks" field.
func IDRemarksContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldIDRemarks, v))
}

// IDRemarksHasPrefix applies the HasPrefix predicate on the "IDRemarks" field.
func IDRemarksHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldIDRemarks, v))
}

// IDRemarksHasSuffix applies the HasSuffix predicate on the "IDRemarks" field.
func IDRemarksHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldIDRemarks, v))
}

// IDRemarksEqualFold applies the EqualFold predicate on the "IDRemarks" field.
func IDRemarksEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldIDRemarks, v))
}

// IDRemarksContainsFold applies the ContainsFold predicate on the "IDRemarks" field.
func IDRemarksContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldIDRemarks, v))
}

// EmployeedNameEQ applies the EQ predicate on the "EmployeedName" field.
func EmployeedNameEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldEmployeedName, v))
}

// EmployeedNameNEQ applies the NEQ predicate on the "EmployeedName" field.
func EmployeedNameNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldEmployeedName, v))
}

// EmployeedNameIn applies the In predicate on the "EmployeedName" field.
func EmployeedNameIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldEmployeedName, vs...))
}

// EmployeedNameNotIn applies the NotIn predicate on the "EmployeedName" field.
func EmployeedNameNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldEmployeedName, vs...))
}

// EmployeedNameGT applies the GT predicate on the "EmployeedName" field.
func EmployeedNameGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldEmployeedName, v))
}

// EmployeedNameGTE applies the GTE predicate on the "EmployeedName" field.
func EmployeedNameGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldEmployeedName, v))
}

// EmployeedNameLT applies the LT predicate on the "EmployeedName" field.
func EmployeedNameLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldEmployeedName, v))
}

// EmployeedNameLTE applies the LTE predicate on the "EmployeedName" field.
func EmployeedNameLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldEmployeedName, v))
}

// EmployeedNameContains applies the Contains predicate on the "EmployeedName" field.
func EmployeedNameContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldEmployeedName, v))
}

// EmployeedNameHasPrefix applies the HasPrefix predicate on the "EmployeedName" field.
func EmployeedNameHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldEmployeedName, v))
}

// EmployeedNameHasSuffix applies the HasSuffix predicate on the "EmployeedName" field.
func EmployeedNameHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldEmployeedName, v))
}

// EmployeedNameEqualFold applies the EqualFold predicate on the "EmployeedName" field.
func EmployeedNameEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldEmployeedName, v))
}

// EmployeedNameContainsFold applies the ContainsFold predicate on the "EmployeedName" field.
func EmployeedNameContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldEmployeedName, v))
}

// NameVerifiedEQ applies the EQ predicate on the "nameVerified" field.
func NameVerifiedEQ(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldNameVerified, v))
}

// NameVerifiedNEQ applies the NEQ predicate on the "nameVerified" field.
func NameVerifiedNEQ(v bool) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldNameVerified, v))
}

// NameRemStatusEQ applies the EQ predicate on the "nameRemStatus" field.
func NameRemStatusEQ(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldNameRemStatus, v))
}

// NameRemStatusNEQ applies the NEQ predicate on the "nameRemStatus" field.
func NameRemStatusNEQ(v bool) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldNameRemStatus, v))
}

// NameRemarksEQ applies the EQ predicate on the "nameRemarks" field.
func NameRemarksEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldNameRemarks, v))
}

// NameRemarksNEQ applies the NEQ predicate on the "nameRemarks" field.
func NameRemarksNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldNameRemarks, v))
}

// NameRemarksIn applies the In predicate on the "nameRemarks" field.
func NameRemarksIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldNameRemarks, vs...))
}

// NameRemarksNotIn applies the NotIn predicate on the "nameRemarks" field.
func NameRemarksNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldNameRemarks, vs...))
}

// NameRemarksGT applies the GT predicate on the "nameRemarks" field.
func NameRemarksGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldNameRemarks, v))
}

// NameRemarksGTE applies the GTE predicate on the "nameRemarks" field.
func NameRemarksGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldNameRemarks, v))
}

// NameRemarksLT applies the LT predicate on the "nameRemarks" field.
func NameRemarksLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldNameRemarks, v))
}

// NameRemarksLTE applies the LTE predicate on the "nameRemarks" field.
func NameRemarksLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldNameRemarks, v))
}

// NameRemarksContains applies the Contains predicate on the "nameRemarks" field.
func NameRemarksContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldNameRemarks, v))
}

// NameRemarksHasPrefix applies the HasPrefix predicate on the "nameRemarks" field.
func NameRemarksHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldNameRemarks, v))
}

// NameRemarksHasSuffix applies the HasSuffix predicate on the "nameRemarks" field.
func NameRemarksHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldNameRemarks, v))
}

// NameRemarksEqualFold applies the EqualFold predicate on the "nameRemarks" field.
func NameRemarksEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldNameRemarks, v))
}

// NameRemarksContainsFold applies the ContainsFold predicate on the "nameRemarks" field.
func NameRemarksContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldNameRemarks, v))
}

// DOBEQ applies the EQ predicate on the "DOB" field.
func DOBEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldDOB, v))
}

// DOBNEQ applies the NEQ predicate on the "DOB" field.
func DOBNEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldDOB, v))
}

// DOBIn applies the In predicate on the "DOB" field.
func DOBIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldIn(FieldDOB, vs...))
}

// DOBNotIn applies the NotIn predicate on the "DOB" field.
func DOBNotIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldDOB, vs...))
}

// DOBGT applies the GT predicate on the "DOB" field.
func DOBGT(v time.Time) predicate.User {
	return predicate.User(sql.FieldGT(FieldDOB, v))
}

// DOBGTE applies the GTE predicate on the "DOB" field.
func DOBGTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldGTE(FieldDOB, v))
}

// DOBLT applies the LT predicate on the "DOB" field.
func DOBLT(v time.Time) predicate.User {
	return predicate.User(sql.FieldLT(FieldDOB, v))
}

// DOBLTE applies the LTE predicate on the "DOB" field.
func DOBLTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldLTE(FieldDOB, v))
}

// DOBVerifiedEQ applies the EQ predicate on the "DOBVerified" field.
func DOBVerifiedEQ(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldDOBVerified, v))
}

// DOBVerifiedNEQ applies the NEQ predicate on the "DOBVerified" field.
func DOBVerifiedNEQ(v bool) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldDOBVerified, v))
}

// DOBRemStatusEQ applies the EQ predicate on the "DOBRemStatus" field.
func DOBRemStatusEQ(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldDOBRemStatus, v))
}

// DOBRemStatusNEQ applies the NEQ predicate on the "DOBRemStatus" field.
func DOBRemStatusNEQ(v bool) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldDOBRemStatus, v))
}

// DOBRemarksEQ applies the EQ predicate on the "DOBRemarks" field.
func DOBRemarksEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldDOBRemarks, v))
}

// DOBRemarksNEQ applies the NEQ predicate on the "DOBRemarks" field.
func DOBRemarksNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldDOBRemarks, v))
}

// DOBRemarksIn applies the In predicate on the "DOBRemarks" field.
func DOBRemarksIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldDOBRemarks, vs...))
}

// DOBRemarksNotIn applies the NotIn predicate on the "DOBRemarks" field.
func DOBRemarksNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldDOBRemarks, vs...))
}

// DOBRemarksGT applies the GT predicate on the "DOBRemarks" field.
func DOBRemarksGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldDOBRemarks, v))
}

// DOBRemarksGTE applies the GTE predicate on the "DOBRemarks" field.
func DOBRemarksGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldDOBRemarks, v))
}

// DOBRemarksLT applies the LT predicate on the "DOBRemarks" field.
func DOBRemarksLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldDOBRemarks, v))
}

// DOBRemarksLTE applies the LTE predicate on the "DOBRemarks" field.
func DOBRemarksLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldDOBRemarks, v))
}

// DOBRemarksContains applies the Contains predicate on the "DOBRemarks" field.
func DOBRemarksContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldDOBRemarks, v))
}

// DOBRemarksHasPrefix applies the HasPrefix predicate on the "DOBRemarks" field.
func DOBRemarksHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldDOBRemarks, v))
}

// DOBRemarksHasSuffix applies the HasSuffix predicate on the "DOBRemarks" field.
func DOBRemarksHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldDOBRemarks, v))
}

// DOBRemarksEqualFold applies the EqualFold predicate on the "DOBRemarks" field.
func DOBRemarksEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldDOBRemarks, v))
}

// DOBRemarksContainsFold applies the ContainsFold predicate on the "DOBRemarks" field.
func DOBRemarksContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldDOBRemarks, v))
}

// GenderEQ applies the EQ predicate on the "Gender" field.
func GenderEQ(v Gender) predicate.User {
	return predicate.User(sql.FieldEQ(FieldGender, v))
}

// GenderNEQ applies the NEQ predicate on the "Gender" field.
func GenderNEQ(v Gender) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldGender, v))
}

// GenderIn applies the In predicate on the "Gender" field.
func GenderIn(vs ...Gender) predicate.User {
	return predicate.User(sql.FieldIn(FieldGender, vs...))
}

// GenderNotIn applies the NotIn predicate on the "Gender" field.
func GenderNotIn(vs ...Gender) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldGender, vs...))
}

// GenderVerifiedEQ applies the EQ predicate on the "genderVerified" field.
func GenderVerifiedEQ(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldGenderVerified, v))
}

// GenderVerifiedNEQ applies the NEQ predicate on the "genderVerified" field.
func GenderVerifiedNEQ(v bool) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldGenderVerified, v))
}

// GenderRemStatusEQ applies the EQ predicate on the "genderRemStatus" field.
func GenderRemStatusEQ(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldGenderRemStatus, v))
}

// GenderRemStatusNEQ applies the NEQ predicate on the "genderRemStatus" field.
func GenderRemStatusNEQ(v bool) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldGenderRemStatus, v))
}

// GenderRemarksEQ applies the EQ predicate on the "genderRemarks" field.
func GenderRemarksEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldGenderRemarks, v))
}

// GenderRemarksNEQ applies the NEQ predicate on the "genderRemarks" field.
func GenderRemarksNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldGenderRemarks, v))
}

// GenderRemarksIn applies the In predicate on the "genderRemarks" field.
func GenderRemarksIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldGenderRemarks, vs...))
}

// GenderRemarksNotIn applies the NotIn predicate on the "genderRemarks" field.
func GenderRemarksNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldGenderRemarks, vs...))
}

// GenderRemarksGT applies the GT predicate on the "genderRemarks" field.
func GenderRemarksGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldGenderRemarks, v))
}

// GenderRemarksGTE applies the GTE predicate on the "genderRemarks" field.
func GenderRemarksGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldGenderRemarks, v))
}

// GenderRemarksLT applies the LT predicate on the "genderRemarks" field.
func GenderRemarksLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldGenderRemarks, v))
}

// GenderRemarksLTE applies the LTE predicate on the "genderRemarks" field.
func GenderRemarksLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldGenderRemarks, v))
}

// GenderRemarksContains applies the Contains predicate on the "genderRemarks" field.
func GenderRemarksContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldGenderRemarks, v))
}

// GenderRemarksHasPrefix applies the HasPrefix predicate on the "genderRemarks" field.
func GenderRemarksHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldGenderRemarks, v))
}

// GenderRemarksHasSuffix applies the HasSuffix predicate on the "genderRemarks" field.
func GenderRemarksHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldGenderRemarks, v))
}

// GenderRemarksEqualFold applies the EqualFold predicate on the "genderRemarks" field.
func GenderRemarksEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldGenderRemarks, v))
}

// GenderRemarksContainsFold applies the ContainsFold predicate on the "genderRemarks" field.
func GenderRemarksContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldGenderRemarks, v))
}

// CadreidEQ applies the EQ predicate on the "Cadreid" field.
func CadreidEQ(v int32) predicate.User {
	return predicate.User(sql.FieldEQ(FieldCadreid, v))
}

// CadreidNEQ applies the NEQ predicate on the "Cadreid" field.
func CadreidNEQ(v int32) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldCadreid, v))
}

// CadreidIn applies the In predicate on the "Cadreid" field.
func CadreidIn(vs ...int32) predicate.User {
	return predicate.User(sql.FieldIn(FieldCadreid, vs...))
}

// CadreidNotIn applies the NotIn predicate on the "Cadreid" field.
func CadreidNotIn(vs ...int32) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldCadreid, vs...))
}

// CadreidGT applies the GT predicate on the "Cadreid" field.
func CadreidGT(v int32) predicate.User {
	return predicate.User(sql.FieldGT(FieldCadreid, v))
}

// CadreidGTE applies the GTE predicate on the "Cadreid" field.
func CadreidGTE(v int32) predicate.User {
	return predicate.User(sql.FieldGTE(FieldCadreid, v))
}

// CadreidLT applies the LT predicate on the "Cadreid" field.
func CadreidLT(v int32) predicate.User {
	return predicate.User(sql.FieldLT(FieldCadreid, v))
}

// CadreidLTE applies the LTE predicate on the "Cadreid" field.
func CadreidLTE(v int32) predicate.User {
	return predicate.User(sql.FieldLTE(FieldCadreid, v))
}

// CadreidVerifiedEQ applies the EQ predicate on the "cadreidVerified" field.
func CadreidVerifiedEQ(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldCadreidVerified, v))
}

// CadreidVerifiedNEQ applies the NEQ predicate on the "cadreidVerified" field.
func CadreidVerifiedNEQ(v bool) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldCadreidVerified, v))
}

// CadreidRemStatusEQ applies the EQ predicate on the "cadreidRemStatus" field.
func CadreidRemStatusEQ(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldCadreidRemStatus, v))
}

// CadreidRemStatusNEQ applies the NEQ predicate on the "cadreidRemStatus" field.
func CadreidRemStatusNEQ(v bool) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldCadreidRemStatus, v))
}

// CadreidRemarksEQ applies the EQ predicate on the "cadreidRemarks" field.
func CadreidRemarksEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldCadreidRemarks, v))
}

// CadreidRemarksNEQ applies the NEQ predicate on the "cadreidRemarks" field.
func CadreidRemarksNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldCadreidRemarks, v))
}

// CadreidRemarksIn applies the In predicate on the "cadreidRemarks" field.
func CadreidRemarksIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldCadreidRemarks, vs...))
}

// CadreidRemarksNotIn applies the NotIn predicate on the "cadreidRemarks" field.
func CadreidRemarksNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldCadreidRemarks, vs...))
}

// CadreidRemarksGT applies the GT predicate on the "cadreidRemarks" field.
func CadreidRemarksGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldCadreidRemarks, v))
}

// CadreidRemarksGTE applies the GTE predicate on the "cadreidRemarks" field.
func CadreidRemarksGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldCadreidRemarks, v))
}

// CadreidRemarksLT applies the LT predicate on the "cadreidRemarks" field.
func CadreidRemarksLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldCadreidRemarks, v))
}

// CadreidRemarksLTE applies the LTE predicate on the "cadreidRemarks" field.
func CadreidRemarksLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldCadreidRemarks, v))
}

// CadreidRemarksContains applies the Contains predicate on the "cadreidRemarks" field.
func CadreidRemarksContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldCadreidRemarks, v))
}

// CadreidRemarksHasPrefix applies the HasPrefix predicate on the "cadreidRemarks" field.
func CadreidRemarksHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldCadreidRemarks, v))
}

// CadreidRemarksHasSuffix applies the HasSuffix predicate on the "cadreidRemarks" field.
func CadreidRemarksHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldCadreidRemarks, v))
}

// CadreidRemarksEqualFold applies the EqualFold predicate on the "cadreidRemarks" field.
func CadreidRemarksEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldCadreidRemarks, v))
}

// CadreidRemarksContainsFold applies the ContainsFold predicate on the "cadreidRemarks" field.
func CadreidRemarksContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldCadreidRemarks, v))
}

// OfficeIDEQ applies the EQ predicate on the "OfficeID" field.
func OfficeIDEQ(v int32) predicate.User {
	return predicate.User(sql.FieldEQ(FieldOfficeID, v))
}

// OfficeIDNEQ applies the NEQ predicate on the "OfficeID" field.
func OfficeIDNEQ(v int32) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldOfficeID, v))
}

// OfficeIDIn applies the In predicate on the "OfficeID" field.
func OfficeIDIn(vs ...int32) predicate.User {
	return predicate.User(sql.FieldIn(FieldOfficeID, vs...))
}

// OfficeIDNotIn applies the NotIn predicate on the "OfficeID" field.
func OfficeIDNotIn(vs ...int32) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldOfficeID, vs...))
}

// OfficeIDGT applies the GT predicate on the "OfficeID" field.
func OfficeIDGT(v int32) predicate.User {
	return predicate.User(sql.FieldGT(FieldOfficeID, v))
}

// OfficeIDGTE applies the GTE predicate on the "OfficeID" field.
func OfficeIDGTE(v int32) predicate.User {
	return predicate.User(sql.FieldGTE(FieldOfficeID, v))
}

// OfficeIDLT applies the LT predicate on the "OfficeID" field.
func OfficeIDLT(v int32) predicate.User {
	return predicate.User(sql.FieldLT(FieldOfficeID, v))
}

// OfficeIDLTE applies the LTE predicate on the "OfficeID" field.
func OfficeIDLTE(v int32) predicate.User {
	return predicate.User(sql.FieldLTE(FieldOfficeID, v))
}

// OfficeIDVerifiedEQ applies the EQ predicate on the "officeIDVerified" field.
func OfficeIDVerifiedEQ(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldOfficeIDVerified, v))
}

// OfficeIDVerifiedNEQ applies the NEQ predicate on the "officeIDVerified" field.
func OfficeIDVerifiedNEQ(v bool) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldOfficeIDVerified, v))
}

// OfficeIDRemStatusEQ applies the EQ predicate on the "officeIDRemStatus" field.
func OfficeIDRemStatusEQ(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldOfficeIDRemStatus, v))
}

// OfficeIDRemStatusNEQ applies the NEQ predicate on the "officeIDRemStatus" field.
func OfficeIDRemStatusNEQ(v bool) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldOfficeIDRemStatus, v))
}

// OfficeIDRemarksEQ applies the EQ predicate on the "officeIDRemarks" field.
func OfficeIDRemarksEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldOfficeIDRemarks, v))
}

// OfficeIDRemarksNEQ applies the NEQ predicate on the "officeIDRemarks" field.
func OfficeIDRemarksNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldOfficeIDRemarks, v))
}

// OfficeIDRemarksIn applies the In predicate on the "officeIDRemarks" field.
func OfficeIDRemarksIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldOfficeIDRemarks, vs...))
}

// OfficeIDRemarksNotIn applies the NotIn predicate on the "officeIDRemarks" field.
func OfficeIDRemarksNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldOfficeIDRemarks, vs...))
}

// OfficeIDRemarksGT applies the GT predicate on the "officeIDRemarks" field.
func OfficeIDRemarksGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldOfficeIDRemarks, v))
}

// OfficeIDRemarksGTE applies the GTE predicate on the "officeIDRemarks" field.
func OfficeIDRemarksGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldOfficeIDRemarks, v))
}

// OfficeIDRemarksLT applies the LT predicate on the "officeIDRemarks" field.
func OfficeIDRemarksLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldOfficeIDRemarks, v))
}

// OfficeIDRemarksLTE applies the LTE predicate on the "officeIDRemarks" field.
func OfficeIDRemarksLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldOfficeIDRemarks, v))
}

// OfficeIDRemarksContains applies the Contains predicate on the "officeIDRemarks" field.
func OfficeIDRemarksContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldOfficeIDRemarks, v))
}

// OfficeIDRemarksHasPrefix applies the HasPrefix predicate on the "officeIDRemarks" field.
func OfficeIDRemarksHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldOfficeIDRemarks, v))
}

// OfficeIDRemarksHasSuffix applies the HasSuffix predicate on the "officeIDRemarks" field.
func OfficeIDRemarksHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldOfficeIDRemarks, v))
}

// OfficeIDRemarksEqualFold applies the EqualFold predicate on the "officeIDRemarks" field.
func OfficeIDRemarksEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldOfficeIDRemarks, v))
}

// OfficeIDRemarksContainsFold applies the ContainsFold predicate on the "officeIDRemarks" field.
func OfficeIDRemarksContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldOfficeIDRemarks, v))
}

// PHEQ applies the EQ predicate on the "PH" field.
func PHEQ(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldPH, v))
}

// PHNEQ applies the NEQ predicate on the "PH" field.
func PHNEQ(v bool) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldPH, v))
}

// PHVerifiedEQ applies the EQ predicate on the "PHVerified" field.
func PHVerifiedEQ(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldPHVerified, v))
}

// PHVerifiedNEQ applies the NEQ predicate on the "PHVerified" field.
func PHVerifiedNEQ(v bool) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldPHVerified, v))
}

// PHRemStatusEQ applies the EQ predicate on the "PHRemStatus" field.
func PHRemStatusEQ(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldPHRemStatus, v))
}

// PHRemStatusNEQ applies the NEQ predicate on the "PHRemStatus" field.
func PHRemStatusNEQ(v bool) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldPHRemStatus, v))
}

// PHRemarksEQ applies the EQ predicate on the "PHRemarks" field.
func PHRemarksEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldPHRemarks, v))
}

// PHRemarksNEQ applies the NEQ predicate on the "PHRemarks" field.
func PHRemarksNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldPHRemarks, v))
}

// PHRemarksIn applies the In predicate on the "PHRemarks" field.
func PHRemarksIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldPHRemarks, vs...))
}

// PHRemarksNotIn applies the NotIn predicate on the "PHRemarks" field.
func PHRemarksNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldPHRemarks, vs...))
}

// PHRemarksGT applies the GT predicate on the "PHRemarks" field.
func PHRemarksGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldPHRemarks, v))
}

// PHRemarksGTE applies the GTE predicate on the "PHRemarks" field.
func PHRemarksGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldPHRemarks, v))
}

// PHRemarksLT applies the LT predicate on the "PHRemarks" field.
func PHRemarksLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldPHRemarks, v))
}

// PHRemarksLTE applies the LTE predicate on the "PHRemarks" field.
func PHRemarksLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldPHRemarks, v))
}

// PHRemarksContains applies the Contains predicate on the "PHRemarks" field.
func PHRemarksContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldPHRemarks, v))
}

// PHRemarksHasPrefix applies the HasPrefix predicate on the "PHRemarks" field.
func PHRemarksHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldPHRemarks, v))
}

// PHRemarksHasSuffix applies the HasSuffix predicate on the "PHRemarks" field.
func PHRemarksHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldPHRemarks, v))
}

// PHRemarksEqualFold applies the EqualFold predicate on the "PHRemarks" field.
func PHRemarksEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldPHRemarks, v))
}

// PHRemarksContainsFold applies the ContainsFold predicate on the "PHRemarks" field.
func PHRemarksContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldPHRemarks, v))
}

// PHDetailsEQ applies the EQ predicate on the "PHDetails" field.
func PHDetailsEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldPHDetails, v))
}

// PHDetailsNEQ applies the NEQ predicate on the "PHDetails" field.
func PHDetailsNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldPHDetails, v))
}

// PHDetailsIn applies the In predicate on the "PHDetails" field.
func PHDetailsIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldPHDetails, vs...))
}

// PHDetailsNotIn applies the NotIn predicate on the "PHDetails" field.
func PHDetailsNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldPHDetails, vs...))
}

// PHDetailsGT applies the GT predicate on the "PHDetails" field.
func PHDetailsGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldPHDetails, v))
}

// PHDetailsGTE applies the GTE predicate on the "PHDetails" field.
func PHDetailsGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldPHDetails, v))
}

// PHDetailsLT applies the LT predicate on the "PHDetails" field.
func PHDetailsLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldPHDetails, v))
}

// PHDetailsLTE applies the LTE predicate on the "PHDetails" field.
func PHDetailsLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldPHDetails, v))
}

// PHDetailsContains applies the Contains predicate on the "PHDetails" field.
func PHDetailsContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldPHDetails, v))
}

// PHDetailsHasPrefix applies the HasPrefix predicate on the "PHDetails" field.
func PHDetailsHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldPHDetails, v))
}

// PHDetailsHasSuffix applies the HasSuffix predicate on the "PHDetails" field.
func PHDetailsHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldPHDetails, v))
}

// PHDetailsIsNil applies the IsNil predicate on the "PHDetails" field.
func PHDetailsIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldPHDetails))
}

// PHDetailsNotNil applies the NotNil predicate on the "PHDetails" field.
func PHDetailsNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldPHDetails))
}

// PHDetailsEqualFold applies the EqualFold predicate on the "PHDetails" field.
func PHDetailsEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldPHDetails, v))
}

// PHDetailsContainsFold applies the ContainsFold predicate on the "PHDetails" field.
func PHDetailsContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldPHDetails, v))
}

// PHDetailsVerifiedEQ applies the EQ predicate on the "PHDetailsVerified" field.
func PHDetailsVerifiedEQ(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldPHDetailsVerified, v))
}

// PHDetailsVerifiedNEQ applies the NEQ predicate on the "PHDetailsVerified" field.
func PHDetailsVerifiedNEQ(v bool) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldPHDetailsVerified, v))
}

// PHDetailsRemStatusEQ applies the EQ predicate on the "PHDetailsRemStatus" field.
func PHDetailsRemStatusEQ(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldPHDetailsRemStatus, v))
}

// PHDetailsRemStatusNEQ applies the NEQ predicate on the "PHDetailsRemStatus" field.
func PHDetailsRemStatusNEQ(v bool) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldPHDetailsRemStatus, v))
}

// PHDetailsRemarksEQ applies the EQ predicate on the "PHDetailsRemarks" field.
func PHDetailsRemarksEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldPHDetailsRemarks, v))
}

// PHDetailsRemarksNEQ applies the NEQ predicate on the "PHDetailsRemarks" field.
func PHDetailsRemarksNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldPHDetailsRemarks, v))
}

// PHDetailsRemarksIn applies the In predicate on the "PHDetailsRemarks" field.
func PHDetailsRemarksIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldPHDetailsRemarks, vs...))
}

// PHDetailsRemarksNotIn applies the NotIn predicate on the "PHDetailsRemarks" field.
func PHDetailsRemarksNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldPHDetailsRemarks, vs...))
}

// PHDetailsRemarksGT applies the GT predicate on the "PHDetailsRemarks" field.
func PHDetailsRemarksGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldPHDetailsRemarks, v))
}

// PHDetailsRemarksGTE applies the GTE predicate on the "PHDetailsRemarks" field.
func PHDetailsRemarksGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldPHDetailsRemarks, v))
}

// PHDetailsRemarksLT applies the LT predicate on the "PHDetailsRemarks" field.
func PHDetailsRemarksLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldPHDetailsRemarks, v))
}

// PHDetailsRemarksLTE applies the LTE predicate on the "PHDetailsRemarks" field.
func PHDetailsRemarksLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldPHDetailsRemarks, v))
}

// PHDetailsRemarksContains applies the Contains predicate on the "PHDetailsRemarks" field.
func PHDetailsRemarksContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldPHDetailsRemarks, v))
}

// PHDetailsRemarksHasPrefix applies the HasPrefix predicate on the "PHDetailsRemarks" field.
func PHDetailsRemarksHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldPHDetailsRemarks, v))
}

// PHDetailsRemarksHasSuffix applies the HasSuffix predicate on the "PHDetailsRemarks" field.
func PHDetailsRemarksHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldPHDetailsRemarks, v))
}

// PHDetailsRemarksEqualFold applies the EqualFold predicate on the "PHDetailsRemarks" field.
func PHDetailsRemarksEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldPHDetailsRemarks, v))
}

// PHDetailsRemarksContainsFold applies the ContainsFold predicate on the "PHDetailsRemarks" field.
func PHDetailsRemarksContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldPHDetailsRemarks, v))
}

// APSWorkingEQ applies the EQ predicate on the "APSWorking" field.
func APSWorkingEQ(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldAPSWorking, v))
}

// APSWorkingNEQ applies the NEQ predicate on the "APSWorking" field.
func APSWorkingNEQ(v bool) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldAPSWorking, v))
}

// APSWorkingVerifiedEQ applies the EQ predicate on the "APSWorkingVerified" field.
func APSWorkingVerifiedEQ(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldAPSWorkingVerified, v))
}

// APSWorkingVerifiedNEQ applies the NEQ predicate on the "APSWorkingVerified" field.
func APSWorkingVerifiedNEQ(v bool) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldAPSWorkingVerified, v))
}

// APSWorkingRemStatusEQ applies the EQ predicate on the "APSWorkingRemStatus" field.
func APSWorkingRemStatusEQ(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldAPSWorkingRemStatus, v))
}

// APSWorkingRemStatusNEQ applies the NEQ predicate on the "APSWorkingRemStatus" field.
func APSWorkingRemStatusNEQ(v bool) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldAPSWorkingRemStatus, v))
}

// APSWorkingRemarksEQ applies the EQ predicate on the "APSWorkingRemarks" field.
func APSWorkingRemarksEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldAPSWorkingRemarks, v))
}

// APSWorkingRemarksNEQ applies the NEQ predicate on the "APSWorkingRemarks" field.
func APSWorkingRemarksNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldAPSWorkingRemarks, v))
}

// APSWorkingRemarksIn applies the In predicate on the "APSWorkingRemarks" field.
func APSWorkingRemarksIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldAPSWorkingRemarks, vs...))
}

// APSWorkingRemarksNotIn applies the NotIn predicate on the "APSWorkingRemarks" field.
func APSWorkingRemarksNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldAPSWorkingRemarks, vs...))
}

// APSWorkingRemarksGT applies the GT predicate on the "APSWorkingRemarks" field.
func APSWorkingRemarksGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldAPSWorkingRemarks, v))
}

// APSWorkingRemarksGTE applies the GTE predicate on the "APSWorkingRemarks" field.
func APSWorkingRemarksGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldAPSWorkingRemarks, v))
}

// APSWorkingRemarksLT applies the LT predicate on the "APSWorkingRemarks" field.
func APSWorkingRemarksLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldAPSWorkingRemarks, v))
}

// APSWorkingRemarksLTE applies the LTE predicate on the "APSWorkingRemarks" field.
func APSWorkingRemarksLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldAPSWorkingRemarks, v))
}

// APSWorkingRemarksContains applies the Contains predicate on the "APSWorkingRemarks" field.
func APSWorkingRemarksContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldAPSWorkingRemarks, v))
}

// APSWorkingRemarksHasPrefix applies the HasPrefix predicate on the "APSWorkingRemarks" field.
func APSWorkingRemarksHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldAPSWorkingRemarks, v))
}

// APSWorkingRemarksHasSuffix applies the HasSuffix predicate on the "APSWorkingRemarks" field.
func APSWorkingRemarksHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldAPSWorkingRemarks, v))
}

// APSWorkingRemarksEqualFold applies the EqualFold predicate on the "APSWorkingRemarks" field.
func APSWorkingRemarksEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldAPSWorkingRemarks, v))
}

// APSWorkingRemarksContainsFold applies the ContainsFold predicate on the "APSWorkingRemarks" field.
func APSWorkingRemarksContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldAPSWorkingRemarks, v))
}

// ProfilestatusEQ applies the EQ predicate on the "profilestatus" field.
func ProfilestatusEQ(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldProfilestatus, v))
}

// ProfilestatusNEQ applies the NEQ predicate on the "profilestatus" field.
func ProfilestatusNEQ(v bool) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldProfilestatus, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.User) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.User) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.User) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		p(s.Not())
	})
}
