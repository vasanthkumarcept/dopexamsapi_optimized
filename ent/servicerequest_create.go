// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"recruit/ent/servicerequest"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ServiceRequestCreate is the builder for creating a ServiceRequest entity.
type ServiceRequestCreate struct {
	config
	mutation *ServiceRequestMutation
	hooks    []Hook
}

// SetRemarks sets the "remarks" field.
func (src *ServiceRequestCreate) SetRemarks(s string) *ServiceRequestCreate {
	src.mutation.SetRemarks(s)
	return src
}

// SetNillableRemarks sets the "remarks" field if the given value is not nil.
func (src *ServiceRequestCreate) SetNillableRemarks(s *string) *ServiceRequestCreate {
	if s != nil {
		src.SetRemarks(*s)
	}
	return src
}

// SetAction sets the "action" field.
func (src *ServiceRequestCreate) SetAction(s string) *ServiceRequestCreate {
	src.mutation.SetAction(s)
	return src
}

// SetNillableAction sets the "action" field if the given value is not nil.
func (src *ServiceRequestCreate) SetNillableAction(s *string) *ServiceRequestCreate {
	if s != nil {
		src.SetAction(*s)
	}
	return src
}

// SetPushedTime sets the "PushedTime" field.
func (src *ServiceRequestCreate) SetPushedTime(t time.Time) *ServiceRequestCreate {
	src.mutation.SetPushedTime(t)
	return src
}

// SetNillablePushedTime sets the "PushedTime" field if the given value is not nil.
func (src *ServiceRequestCreate) SetNillablePushedTime(t *time.Time) *ServiceRequestCreate {
	if t != nil {
		src.SetPushedTime(*t)
	}
	return src
}

// SetUpdatedBy sets the "UpdatedBy" field.
func (src *ServiceRequestCreate) SetUpdatedBy(s string) *ServiceRequestCreate {
	src.mutation.SetUpdatedBy(s)
	return src
}

// SetNillableUpdatedBy sets the "UpdatedBy" field if the given value is not nil.
func (src *ServiceRequestCreate) SetNillableUpdatedBy(s *string) *ServiceRequestCreate {
	if s != nil {
		src.SetUpdatedBy(*s)
	}
	return src
}

// SetUpdatedTime sets the "UpdatedTime" field.
func (src *ServiceRequestCreate) SetUpdatedTime(t time.Time) *ServiceRequestCreate {
	src.mutation.SetUpdatedTime(t)
	return src
}

// SetNillableUpdatedTime sets the "UpdatedTime" field if the given value is not nil.
func (src *ServiceRequestCreate) SetNillableUpdatedTime(t *time.Time) *ServiceRequestCreate {
	if t != nil {
		src.SetUpdatedTime(*t)
	}
	return src
}

// SetAssignedTo sets the "AssignedTo" field.
func (src *ServiceRequestCreate) SetAssignedTo(s string) *ServiceRequestCreate {
	src.mutation.SetAssignedTo(s)
	return src
}

// SetNillableAssignedTo sets the "AssignedTo" field if the given value is not nil.
func (src *ServiceRequestCreate) SetNillableAssignedTo(s *string) *ServiceRequestCreate {
	if s != nil {
		src.SetAssignedTo(*s)
	}
	return src
}

// SetRemarksNew sets the "RemarksNew" field.
func (src *ServiceRequestCreate) SetRemarksNew(s string) *ServiceRequestCreate {
	src.mutation.SetRemarksNew(s)
	return src
}

// SetNillableRemarksNew sets the "RemarksNew" field if the given value is not nil.
func (src *ServiceRequestCreate) SetNillableRemarksNew(s *string) *ServiceRequestCreate {
	if s != nil {
		src.SetRemarksNew(*s)
	}
	return src
}

// SetStatus sets the "Status" field.
func (src *ServiceRequestCreate) SetStatus(s string) *ServiceRequestCreate {
	src.mutation.SetStatus(s)
	return src
}

// SetNillableStatus sets the "Status" field if the given value is not nil.
func (src *ServiceRequestCreate) SetNillableStatus(s *string) *ServiceRequestCreate {
	if s != nil {
		src.SetStatus(*s)
	}
	return src
}

// SetClosedOn sets the "ClosedOn" field.
func (src *ServiceRequestCreate) SetClosedOn(t time.Time) *ServiceRequestCreate {
	src.mutation.SetClosedOn(t)
	return src
}

// SetNillableClosedOn sets the "ClosedOn" field if the given value is not nil.
func (src *ServiceRequestCreate) SetNillableClosedOn(t *time.Time) *ServiceRequestCreate {
	if t != nil {
		src.SetClosedOn(*t)
	}
	return src
}

// SetID sets the "id" field.
func (src *ServiceRequestCreate) SetID(i int64) *ServiceRequestCreate {
	src.mutation.SetID(i)
	return src
}

// Mutation returns the ServiceRequestMutation object of the builder.
func (src *ServiceRequestCreate) Mutation() *ServiceRequestMutation {
	return src.mutation
}

// Save creates the ServiceRequest in the database.
func (src *ServiceRequestCreate) Save(ctx context.Context) (*ServiceRequest, error) {
	return withHooks(ctx, src.sqlSave, src.mutation, src.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (src *ServiceRequestCreate) SaveX(ctx context.Context) *ServiceRequest {
	v, err := src.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (src *ServiceRequestCreate) Exec(ctx context.Context) error {
	_, err := src.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (src *ServiceRequestCreate) ExecX(ctx context.Context) {
	if err := src.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (src *ServiceRequestCreate) check() error {
	return nil
}

func (src *ServiceRequestCreate) sqlSave(ctx context.Context) (*ServiceRequest, error) {
	if err := src.check(); err != nil {
		return nil, err
	}
	_node, _spec := src.createSpec()
	if err := sqlgraph.CreateNode(ctx, src.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	src.mutation.id = &_node.ID
	src.mutation.done = true
	return _node, nil
}

func (src *ServiceRequestCreate) createSpec() (*ServiceRequest, *sqlgraph.CreateSpec) {
	var (
		_node = &ServiceRequest{config: src.config}
		_spec = sqlgraph.NewCreateSpec(servicerequest.Table, sqlgraph.NewFieldSpec(servicerequest.FieldID, field.TypeInt64))
	)
	if id, ok := src.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := src.mutation.Remarks(); ok {
		_spec.SetField(servicerequest.FieldRemarks, field.TypeString, value)
		_node.Remarks = value
	}
	if value, ok := src.mutation.Action(); ok {
		_spec.SetField(servicerequest.FieldAction, field.TypeString, value)
		_node.Action = value
	}
	if value, ok := src.mutation.PushedTime(); ok {
		_spec.SetField(servicerequest.FieldPushedTime, field.TypeTime, value)
		_node.PushedTime = value
	}
	if value, ok := src.mutation.UpdatedBy(); ok {
		_spec.SetField(servicerequest.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if value, ok := src.mutation.UpdatedTime(); ok {
		_spec.SetField(servicerequest.FieldUpdatedTime, field.TypeTime, value)
		_node.UpdatedTime = value
	}
	if value, ok := src.mutation.AssignedTo(); ok {
		_spec.SetField(servicerequest.FieldAssignedTo, field.TypeString, value)
		_node.AssignedTo = value
	}
	if value, ok := src.mutation.RemarksNew(); ok {
		_spec.SetField(servicerequest.FieldRemarksNew, field.TypeString, value)
		_node.RemarksNew = value
	}
	if value, ok := src.mutation.Status(); ok {
		_spec.SetField(servicerequest.FieldStatus, field.TypeString, value)
		_node.Status = value
	}
	if value, ok := src.mutation.ClosedOn(); ok {
		_spec.SetField(servicerequest.FieldClosedOn, field.TypeTime, value)
		_node.ClosedOn = value
	}
	return _node, _spec
}

// ServiceRequestCreateBulk is the builder for creating many ServiceRequest entities in bulk.
type ServiceRequestCreateBulk struct {
	config
	builders []*ServiceRequestCreate
}

// Save creates the ServiceRequest entities in the database.
func (srcb *ServiceRequestCreateBulk) Save(ctx context.Context) ([]*ServiceRequest, error) {
	specs := make([]*sqlgraph.CreateSpec, len(srcb.builders))
	nodes := make([]*ServiceRequest, len(srcb.builders))
	mutators := make([]Mutator, len(srcb.builders))
	for i := range srcb.builders {
		func(i int, root context.Context) {
			builder := srcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ServiceRequestMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, srcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, srcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, srcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (srcb *ServiceRequestCreateBulk) SaveX(ctx context.Context) []*ServiceRequest {
	v, err := srcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (srcb *ServiceRequestCreateBulk) Exec(ctx context.Context) error {
	_, err := srcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (srcb *ServiceRequestCreateBulk) ExecX(ctx context.Context) {
	if err := srcb.Exec(ctx); err != nil {
		panic(err)
	}
}
