// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"recruit/ent/adminlogin"
	"recruit/ent/logs"
	"recruit/ent/predicate"
	"recruit/ent/rolemaster"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AdminLoginUpdate is the builder for updating AdminLogin entities.
type AdminLoginUpdate struct {
	config
	hooks    []Hook
	mutation *AdminLoginMutation
}

// Where appends a list predicates to the AdminLoginUpdate builder.
func (alu *AdminLoginUpdate) Where(ps ...predicate.AdminLogin) *AdminLoginUpdate {
	alu.mutation.Where(ps...)
	return alu
}

// SetRoleUserCode sets the "RoleUserCode" field.
func (alu *AdminLoginUpdate) SetRoleUserCode(i int32) *AdminLoginUpdate {
	alu.mutation.SetRoleUserCode(i)
	return alu
}

// SetNillableRoleUserCode sets the "RoleUserCode" field if the given value is not nil.
func (alu *AdminLoginUpdate) SetNillableRoleUserCode(i *int32) *AdminLoginUpdate {
	if i != nil {
		alu.SetRoleUserCode(*i)
	}
	return alu
}

// ClearRoleUserCode clears the value of the "RoleUserCode" field.
func (alu *AdminLoginUpdate) ClearRoleUserCode() *AdminLoginUpdate {
	alu.mutation.ClearRoleUserCode()
	return alu
}

// SetRoleName sets the "RoleName" field.
func (alu *AdminLoginUpdate) SetRoleName(s string) *AdminLoginUpdate {
	alu.mutation.SetRoleName(s)
	return alu
}

// SetNillableRoleName sets the "RoleName" field if the given value is not nil.
func (alu *AdminLoginUpdate) SetNillableRoleName(s *string) *AdminLoginUpdate {
	if s != nil {
		alu.SetRoleName(*s)
	}
	return alu
}

// ClearRoleName clears the value of the "RoleName" field.
func (alu *AdminLoginUpdate) ClearRoleName() *AdminLoginUpdate {
	alu.mutation.ClearRoleName()
	return alu
}

// SetCreatedDate sets the "CreatedDate" field.
func (alu *AdminLoginUpdate) SetCreatedDate(t time.Time) *AdminLoginUpdate {
	alu.mutation.SetCreatedDate(t)
	return alu
}

// SetNillableCreatedDate sets the "CreatedDate" field if the given value is not nil.
func (alu *AdminLoginUpdate) SetNillableCreatedDate(t *time.Time) *AdminLoginUpdate {
	if t != nil {
		alu.SetCreatedDate(*t)
	}
	return alu
}

// ClearCreatedDate clears the value of the "CreatedDate" field.
func (alu *AdminLoginUpdate) ClearCreatedDate() *AdminLoginUpdate {
	alu.mutation.ClearCreatedDate()
	return alu
}

// SetStatus sets the "Status" field.
func (alu *AdminLoginUpdate) SetStatus(s string) *AdminLoginUpdate {
	alu.mutation.SetStatus(s)
	return alu
}

// SetNillableStatus sets the "Status" field if the given value is not nil.
func (alu *AdminLoginUpdate) SetNillableStatus(s *string) *AdminLoginUpdate {
	if s != nil {
		alu.SetStatus(*s)
	}
	return alu
}

// ClearStatus clears the value of the "Status" field.
func (alu *AdminLoginUpdate) ClearStatus() *AdminLoginUpdate {
	alu.mutation.ClearStatus()
	return alu
}

// SetEmployeedID sets the "EmployeedID" field.
func (alu *AdminLoginUpdate) SetEmployeedID(i int32) *AdminLoginUpdate {
	alu.mutation.ResetEmployeedID()
	alu.mutation.SetEmployeedID(i)
	return alu
}

// SetNillableEmployeedID sets the "EmployeedID" field if the given value is not nil.
func (alu *AdminLoginUpdate) SetNillableEmployeedID(i *int32) *AdminLoginUpdate {
	if i != nil {
		alu.SetEmployeedID(*i)
	}
	return alu
}

// AddEmployeedID adds i to the "EmployeedID" field.
func (alu *AdminLoginUpdate) AddEmployeedID(i int32) *AdminLoginUpdate {
	alu.mutation.AddEmployeedID(i)
	return alu
}

// ClearEmployeedID clears the value of the "EmployeedID" field.
func (alu *AdminLoginUpdate) ClearEmployeedID() *AdminLoginUpdate {
	alu.mutation.ClearEmployeedID()
	return alu
}

// SetEmployeeName sets the "EmployeeName" field.
func (alu *AdminLoginUpdate) SetEmployeeName(s string) *AdminLoginUpdate {
	alu.mutation.SetEmployeeName(s)
	return alu
}

// SetNillableEmployeeName sets the "EmployeeName" field if the given value is not nil.
func (alu *AdminLoginUpdate) SetNillableEmployeeName(s *string) *AdminLoginUpdate {
	if s != nil {
		alu.SetEmployeeName(*s)
	}
	return alu
}

// ClearEmployeeName clears the value of the "EmployeeName" field.
func (alu *AdminLoginUpdate) ClearEmployeeName() *AdminLoginUpdate {
	alu.mutation.ClearEmployeeName()
	return alu
}

// SetEmailid sets the "Emailid" field.
func (alu *AdminLoginUpdate) SetEmailid(s string) *AdminLoginUpdate {
	alu.mutation.SetEmailid(s)
	return alu
}

// SetNillableEmailid sets the "Emailid" field if the given value is not nil.
func (alu *AdminLoginUpdate) SetNillableEmailid(s *string) *AdminLoginUpdate {
	if s != nil {
		alu.SetEmailid(*s)
	}
	return alu
}

// ClearEmailid clears the value of the "Emailid" field.
func (alu *AdminLoginUpdate) ClearEmailid() *AdminLoginUpdate {
	alu.mutation.ClearEmailid()
	return alu
}

// SetMobileNumber sets the "MobileNumber" field.
func (alu *AdminLoginUpdate) SetMobileNumber(i int64) *AdminLoginUpdate {
	alu.mutation.ResetMobileNumber()
	alu.mutation.SetMobileNumber(i)
	return alu
}

// SetNillableMobileNumber sets the "MobileNumber" field if the given value is not nil.
func (alu *AdminLoginUpdate) SetNillableMobileNumber(i *int64) *AdminLoginUpdate {
	if i != nil {
		alu.SetMobileNumber(*i)
	}
	return alu
}

// AddMobileNumber adds i to the "MobileNumber" field.
func (alu *AdminLoginUpdate) AddMobileNumber(i int64) *AdminLoginUpdate {
	alu.mutation.AddMobileNumber(i)
	return alu
}

// ClearMobileNumber clears the value of the "MobileNumber" field.
func (alu *AdminLoginUpdate) ClearMobileNumber() *AdminLoginUpdate {
	alu.mutation.ClearMobileNumber()
	return alu
}

// SetUsername sets the "Username" field.
func (alu *AdminLoginUpdate) SetUsername(s string) *AdminLoginUpdate {
	alu.mutation.SetUsername(s)
	return alu
}

// SetOTP sets the "OTP" field.
func (alu *AdminLoginUpdate) SetOTP(i int32) *AdminLoginUpdate {
	alu.mutation.ResetOTP()
	alu.mutation.SetOTP(i)
	return alu
}

// SetNillableOTP sets the "OTP" field if the given value is not nil.
func (alu *AdminLoginUpdate) SetNillableOTP(i *int32) *AdminLoginUpdate {
	if i != nil {
		alu.SetOTP(*i)
	}
	return alu
}

// AddOTP adds i to the "OTP" field.
func (alu *AdminLoginUpdate) AddOTP(i int32) *AdminLoginUpdate {
	alu.mutation.AddOTP(i)
	return alu
}

// ClearOTP clears the value of the "OTP" field.
func (alu *AdminLoginUpdate) ClearOTP() *AdminLoginUpdate {
	alu.mutation.ClearOTP()
	return alu
}

// SetPassword sets the "Password" field.
func (alu *AdminLoginUpdate) SetPassword(s string) *AdminLoginUpdate {
	alu.mutation.SetPassword(s)
	return alu
}

// SetVerifyRemarks sets the "VerifyRemarks" field.
func (alu *AdminLoginUpdate) SetVerifyRemarks(s string) *AdminLoginUpdate {
	alu.mutation.SetVerifyRemarks(s)
	return alu
}

// SetNillableVerifyRemarks sets the "VerifyRemarks" field if the given value is not nil.
func (alu *AdminLoginUpdate) SetNillableVerifyRemarks(s *string) *AdminLoginUpdate {
	if s != nil {
		alu.SetVerifyRemarks(*s)
	}
	return alu
}

// ClearVerifyRemarks clears the value of the "VerifyRemarks" field.
func (alu *AdminLoginUpdate) ClearVerifyRemarks() *AdminLoginUpdate {
	alu.mutation.ClearVerifyRemarks()
	return alu
}

// SetRoleMasterID sets the "role_master" edge to the RoleMaster entity by ID.
func (alu *AdminLoginUpdate) SetRoleMasterID(id int32) *AdminLoginUpdate {
	alu.mutation.SetRoleMasterID(id)
	return alu
}

// SetNillableRoleMasterID sets the "role_master" edge to the RoleMaster entity by ID if the given value is not nil.
func (alu *AdminLoginUpdate) SetNillableRoleMasterID(id *int32) *AdminLoginUpdate {
	if id != nil {
		alu = alu.SetRoleMasterID(*id)
	}
	return alu
}

// SetRoleMaster sets the "role_master" edge to the RoleMaster entity.
func (alu *AdminLoginUpdate) SetRoleMaster(r *RoleMaster) *AdminLoginUpdate {
	return alu.SetRoleMasterID(r.ID)
}

// AddLogDatumIDs adds the "LogData" edge to the Logs entity by IDs.
func (alu *AdminLoginUpdate) AddLogDatumIDs(ids ...int64) *AdminLoginUpdate {
	alu.mutation.AddLogDatumIDs(ids...)
	return alu
}

// AddLogData adds the "LogData" edges to the Logs entity.
func (alu *AdminLoginUpdate) AddLogData(l ...*Logs) *AdminLoginUpdate {
	ids := make([]int64, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return alu.AddLogDatumIDs(ids...)
}

// Mutation returns the AdminLoginMutation object of the builder.
func (alu *AdminLoginUpdate) Mutation() *AdminLoginMutation {
	return alu.mutation
}

// ClearRoleMaster clears the "role_master" edge to the RoleMaster entity.
func (alu *AdminLoginUpdate) ClearRoleMaster() *AdminLoginUpdate {
	alu.mutation.ClearRoleMaster()
	return alu
}

// ClearLogData clears all "LogData" edges to the Logs entity.
func (alu *AdminLoginUpdate) ClearLogData() *AdminLoginUpdate {
	alu.mutation.ClearLogData()
	return alu
}

// RemoveLogDatumIDs removes the "LogData" edge to Logs entities by IDs.
func (alu *AdminLoginUpdate) RemoveLogDatumIDs(ids ...int64) *AdminLoginUpdate {
	alu.mutation.RemoveLogDatumIDs(ids...)
	return alu
}

// RemoveLogData removes "LogData" edges to Logs entities.
func (alu *AdminLoginUpdate) RemoveLogData(l ...*Logs) *AdminLoginUpdate {
	ids := make([]int64, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return alu.RemoveLogDatumIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (alu *AdminLoginUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, alu.sqlSave, alu.mutation, alu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (alu *AdminLoginUpdate) SaveX(ctx context.Context) int {
	affected, err := alu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (alu *AdminLoginUpdate) Exec(ctx context.Context) error {
	_, err := alu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (alu *AdminLoginUpdate) ExecX(ctx context.Context) {
	if err := alu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (alu *AdminLoginUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(adminlogin.Table, adminlogin.Columns, sqlgraph.NewFieldSpec(adminlogin.FieldID, field.TypeInt32))
	if ps := alu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := alu.mutation.RoleName(); ok {
		_spec.SetField(adminlogin.FieldRoleName, field.TypeString, value)
	}
	if alu.mutation.RoleNameCleared() {
		_spec.ClearField(adminlogin.FieldRoleName, field.TypeString)
	}
	if value, ok := alu.mutation.CreatedDate(); ok {
		_spec.SetField(adminlogin.FieldCreatedDate, field.TypeTime, value)
	}
	if alu.mutation.CreatedDateCleared() {
		_spec.ClearField(adminlogin.FieldCreatedDate, field.TypeTime)
	}
	if value, ok := alu.mutation.Status(); ok {
		_spec.SetField(adminlogin.FieldStatus, field.TypeString, value)
	}
	if alu.mutation.StatusCleared() {
		_spec.ClearField(adminlogin.FieldStatus, field.TypeString)
	}
	if value, ok := alu.mutation.EmployeedID(); ok {
		_spec.SetField(adminlogin.FieldEmployeedID, field.TypeInt32, value)
	}
	if value, ok := alu.mutation.AddedEmployeedID(); ok {
		_spec.AddField(adminlogin.FieldEmployeedID, field.TypeInt32, value)
	}
	if alu.mutation.EmployeedIDCleared() {
		_spec.ClearField(adminlogin.FieldEmployeedID, field.TypeInt32)
	}
	if value, ok := alu.mutation.EmployeeName(); ok {
		_spec.SetField(adminlogin.FieldEmployeeName, field.TypeString, value)
	}
	if alu.mutation.EmployeeNameCleared() {
		_spec.ClearField(adminlogin.FieldEmployeeName, field.TypeString)
	}
	if value, ok := alu.mutation.Emailid(); ok {
		_spec.SetField(adminlogin.FieldEmailid, field.TypeString, value)
	}
	if alu.mutation.EmailidCleared() {
		_spec.ClearField(adminlogin.FieldEmailid, field.TypeString)
	}
	if value, ok := alu.mutation.MobileNumber(); ok {
		_spec.SetField(adminlogin.FieldMobileNumber, field.TypeInt64, value)
	}
	if value, ok := alu.mutation.AddedMobileNumber(); ok {
		_spec.AddField(adminlogin.FieldMobileNumber, field.TypeInt64, value)
	}
	if alu.mutation.MobileNumberCleared() {
		_spec.ClearField(adminlogin.FieldMobileNumber, field.TypeInt64)
	}
	if value, ok := alu.mutation.Username(); ok {
		_spec.SetField(adminlogin.FieldUsername, field.TypeString, value)
	}
	if value, ok := alu.mutation.OTP(); ok {
		_spec.SetField(adminlogin.FieldOTP, field.TypeInt32, value)
	}
	if value, ok := alu.mutation.AddedOTP(); ok {
		_spec.AddField(adminlogin.FieldOTP, field.TypeInt32, value)
	}
	if alu.mutation.OTPCleared() {
		_spec.ClearField(adminlogin.FieldOTP, field.TypeInt32)
	}
	if value, ok := alu.mutation.Password(); ok {
		_spec.SetField(adminlogin.FieldPassword, field.TypeString, value)
	}
	if value, ok := alu.mutation.VerifyRemarks(); ok {
		_spec.SetField(adminlogin.FieldVerifyRemarks, field.TypeString, value)
	}
	if alu.mutation.VerifyRemarksCleared() {
		_spec.ClearField(adminlogin.FieldVerifyRemarks, field.TypeString)
	}
	if alu.mutation.RoleMasterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   adminlogin.RoleMasterTable,
			Columns: []string{adminlogin.RoleMasterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rolemaster.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := alu.mutation.RoleMasterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   adminlogin.RoleMasterTable,
			Columns: []string{adminlogin.RoleMasterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rolemaster.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if alu.mutation.LogDataCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   adminlogin.LogDataTable,
			Columns: []string{adminlogin.LogDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(logs.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := alu.mutation.RemovedLogDataIDs(); len(nodes) > 0 && !alu.mutation.LogDataCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   adminlogin.LogDataTable,
			Columns: []string{adminlogin.LogDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(logs.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := alu.mutation.LogDataIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   adminlogin.LogDataTable,
			Columns: []string{adminlogin.LogDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(logs.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, alu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{adminlogin.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	alu.mutation.done = true
	return n, nil
}

// AdminLoginUpdateOne is the builder for updating a single AdminLogin entity.
type AdminLoginUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AdminLoginMutation
}

// SetRoleUserCode sets the "RoleUserCode" field.
func (aluo *AdminLoginUpdateOne) SetRoleUserCode(i int32) *AdminLoginUpdateOne {
	aluo.mutation.SetRoleUserCode(i)
	return aluo
}

// SetNillableRoleUserCode sets the "RoleUserCode" field if the given value is not nil.
func (aluo *AdminLoginUpdateOne) SetNillableRoleUserCode(i *int32) *AdminLoginUpdateOne {
	if i != nil {
		aluo.SetRoleUserCode(*i)
	}
	return aluo
}

// ClearRoleUserCode clears the value of the "RoleUserCode" field.
func (aluo *AdminLoginUpdateOne) ClearRoleUserCode() *AdminLoginUpdateOne {
	aluo.mutation.ClearRoleUserCode()
	return aluo
}

// SetRoleName sets the "RoleName" field.
func (aluo *AdminLoginUpdateOne) SetRoleName(s string) *AdminLoginUpdateOne {
	aluo.mutation.SetRoleName(s)
	return aluo
}

// SetNillableRoleName sets the "RoleName" field if the given value is not nil.
func (aluo *AdminLoginUpdateOne) SetNillableRoleName(s *string) *AdminLoginUpdateOne {
	if s != nil {
		aluo.SetRoleName(*s)
	}
	return aluo
}

// ClearRoleName clears the value of the "RoleName" field.
func (aluo *AdminLoginUpdateOne) ClearRoleName() *AdminLoginUpdateOne {
	aluo.mutation.ClearRoleName()
	return aluo
}

// SetCreatedDate sets the "CreatedDate" field.
func (aluo *AdminLoginUpdateOne) SetCreatedDate(t time.Time) *AdminLoginUpdateOne {
	aluo.mutation.SetCreatedDate(t)
	return aluo
}

// SetNillableCreatedDate sets the "CreatedDate" field if the given value is not nil.
func (aluo *AdminLoginUpdateOne) SetNillableCreatedDate(t *time.Time) *AdminLoginUpdateOne {
	if t != nil {
		aluo.SetCreatedDate(*t)
	}
	return aluo
}

// ClearCreatedDate clears the value of the "CreatedDate" field.
func (aluo *AdminLoginUpdateOne) ClearCreatedDate() *AdminLoginUpdateOne {
	aluo.mutation.ClearCreatedDate()
	return aluo
}

// SetStatus sets the "Status" field.
func (aluo *AdminLoginUpdateOne) SetStatus(s string) *AdminLoginUpdateOne {
	aluo.mutation.SetStatus(s)
	return aluo
}

// SetNillableStatus sets the "Status" field if the given value is not nil.
func (aluo *AdminLoginUpdateOne) SetNillableStatus(s *string) *AdminLoginUpdateOne {
	if s != nil {
		aluo.SetStatus(*s)
	}
	return aluo
}

// ClearStatus clears the value of the "Status" field.
func (aluo *AdminLoginUpdateOne) ClearStatus() *AdminLoginUpdateOne {
	aluo.mutation.ClearStatus()
	return aluo
}

// SetEmployeedID sets the "EmployeedID" field.
func (aluo *AdminLoginUpdateOne) SetEmployeedID(i int32) *AdminLoginUpdateOne {
	aluo.mutation.ResetEmployeedID()
	aluo.mutation.SetEmployeedID(i)
	return aluo
}

// SetNillableEmployeedID sets the "EmployeedID" field if the given value is not nil.
func (aluo *AdminLoginUpdateOne) SetNillableEmployeedID(i *int32) *AdminLoginUpdateOne {
	if i != nil {
		aluo.SetEmployeedID(*i)
	}
	return aluo
}

// AddEmployeedID adds i to the "EmployeedID" field.
func (aluo *AdminLoginUpdateOne) AddEmployeedID(i int32) *AdminLoginUpdateOne {
	aluo.mutation.AddEmployeedID(i)
	return aluo
}

// ClearEmployeedID clears the value of the "EmployeedID" field.
func (aluo *AdminLoginUpdateOne) ClearEmployeedID() *AdminLoginUpdateOne {
	aluo.mutation.ClearEmployeedID()
	return aluo
}

// SetEmployeeName sets the "EmployeeName" field.
func (aluo *AdminLoginUpdateOne) SetEmployeeName(s string) *AdminLoginUpdateOne {
	aluo.mutation.SetEmployeeName(s)
	return aluo
}

// SetNillableEmployeeName sets the "EmployeeName" field if the given value is not nil.
func (aluo *AdminLoginUpdateOne) SetNillableEmployeeName(s *string) *AdminLoginUpdateOne {
	if s != nil {
		aluo.SetEmployeeName(*s)
	}
	return aluo
}

// ClearEmployeeName clears the value of the "EmployeeName" field.
func (aluo *AdminLoginUpdateOne) ClearEmployeeName() *AdminLoginUpdateOne {
	aluo.mutation.ClearEmployeeName()
	return aluo
}

// SetEmailid sets the "Emailid" field.
func (aluo *AdminLoginUpdateOne) SetEmailid(s string) *AdminLoginUpdateOne {
	aluo.mutation.SetEmailid(s)
	return aluo
}

// SetNillableEmailid sets the "Emailid" field if the given value is not nil.
func (aluo *AdminLoginUpdateOne) SetNillableEmailid(s *string) *AdminLoginUpdateOne {
	if s != nil {
		aluo.SetEmailid(*s)
	}
	return aluo
}

// ClearEmailid clears the value of the "Emailid" field.
func (aluo *AdminLoginUpdateOne) ClearEmailid() *AdminLoginUpdateOne {
	aluo.mutation.ClearEmailid()
	return aluo
}

// SetMobileNumber sets the "MobileNumber" field.
func (aluo *AdminLoginUpdateOne) SetMobileNumber(i int64) *AdminLoginUpdateOne {
	aluo.mutation.ResetMobileNumber()
	aluo.mutation.SetMobileNumber(i)
	return aluo
}

// SetNillableMobileNumber sets the "MobileNumber" field if the given value is not nil.
func (aluo *AdminLoginUpdateOne) SetNillableMobileNumber(i *int64) *AdminLoginUpdateOne {
	if i != nil {
		aluo.SetMobileNumber(*i)
	}
	return aluo
}

// AddMobileNumber adds i to the "MobileNumber" field.
func (aluo *AdminLoginUpdateOne) AddMobileNumber(i int64) *AdminLoginUpdateOne {
	aluo.mutation.AddMobileNumber(i)
	return aluo
}

// ClearMobileNumber clears the value of the "MobileNumber" field.
func (aluo *AdminLoginUpdateOne) ClearMobileNumber() *AdminLoginUpdateOne {
	aluo.mutation.ClearMobileNumber()
	return aluo
}

// SetUsername sets the "Username" field.
func (aluo *AdminLoginUpdateOne) SetUsername(s string) *AdminLoginUpdateOne {
	aluo.mutation.SetUsername(s)
	return aluo
}

// SetOTP sets the "OTP" field.
func (aluo *AdminLoginUpdateOne) SetOTP(i int32) *AdminLoginUpdateOne {
	aluo.mutation.ResetOTP()
	aluo.mutation.SetOTP(i)
	return aluo
}

// SetNillableOTP sets the "OTP" field if the given value is not nil.
func (aluo *AdminLoginUpdateOne) SetNillableOTP(i *int32) *AdminLoginUpdateOne {
	if i != nil {
		aluo.SetOTP(*i)
	}
	return aluo
}

// AddOTP adds i to the "OTP" field.
func (aluo *AdminLoginUpdateOne) AddOTP(i int32) *AdminLoginUpdateOne {
	aluo.mutation.AddOTP(i)
	return aluo
}

// ClearOTP clears the value of the "OTP" field.
func (aluo *AdminLoginUpdateOne) ClearOTP() *AdminLoginUpdateOne {
	aluo.mutation.ClearOTP()
	return aluo
}

// SetPassword sets the "Password" field.
func (aluo *AdminLoginUpdateOne) SetPassword(s string) *AdminLoginUpdateOne {
	aluo.mutation.SetPassword(s)
	return aluo
}

// SetVerifyRemarks sets the "VerifyRemarks" field.
func (aluo *AdminLoginUpdateOne) SetVerifyRemarks(s string) *AdminLoginUpdateOne {
	aluo.mutation.SetVerifyRemarks(s)
	return aluo
}

// SetNillableVerifyRemarks sets the "VerifyRemarks" field if the given value is not nil.
func (aluo *AdminLoginUpdateOne) SetNillableVerifyRemarks(s *string) *AdminLoginUpdateOne {
	if s != nil {
		aluo.SetVerifyRemarks(*s)
	}
	return aluo
}

// ClearVerifyRemarks clears the value of the "VerifyRemarks" field.
func (aluo *AdminLoginUpdateOne) ClearVerifyRemarks() *AdminLoginUpdateOne {
	aluo.mutation.ClearVerifyRemarks()
	return aluo
}

// SetRoleMasterID sets the "role_master" edge to the RoleMaster entity by ID.
func (aluo *AdminLoginUpdateOne) SetRoleMasterID(id int32) *AdminLoginUpdateOne {
	aluo.mutation.SetRoleMasterID(id)
	return aluo
}

// SetNillableRoleMasterID sets the "role_master" edge to the RoleMaster entity by ID if the given value is not nil.
func (aluo *AdminLoginUpdateOne) SetNillableRoleMasterID(id *int32) *AdminLoginUpdateOne {
	if id != nil {
		aluo = aluo.SetRoleMasterID(*id)
	}
	return aluo
}

// SetRoleMaster sets the "role_master" edge to the RoleMaster entity.
func (aluo *AdminLoginUpdateOne) SetRoleMaster(r *RoleMaster) *AdminLoginUpdateOne {
	return aluo.SetRoleMasterID(r.ID)
}

// AddLogDatumIDs adds the "LogData" edge to the Logs entity by IDs.
func (aluo *AdminLoginUpdateOne) AddLogDatumIDs(ids ...int64) *AdminLoginUpdateOne {
	aluo.mutation.AddLogDatumIDs(ids...)
	return aluo
}

// AddLogData adds the "LogData" edges to the Logs entity.
func (aluo *AdminLoginUpdateOne) AddLogData(l ...*Logs) *AdminLoginUpdateOne {
	ids := make([]int64, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return aluo.AddLogDatumIDs(ids...)
}

// Mutation returns the AdminLoginMutation object of the builder.
func (aluo *AdminLoginUpdateOne) Mutation() *AdminLoginMutation {
	return aluo.mutation
}

// ClearRoleMaster clears the "role_master" edge to the RoleMaster entity.
func (aluo *AdminLoginUpdateOne) ClearRoleMaster() *AdminLoginUpdateOne {
	aluo.mutation.ClearRoleMaster()
	return aluo
}

// ClearLogData clears all "LogData" edges to the Logs entity.
func (aluo *AdminLoginUpdateOne) ClearLogData() *AdminLoginUpdateOne {
	aluo.mutation.ClearLogData()
	return aluo
}

// RemoveLogDatumIDs removes the "LogData" edge to Logs entities by IDs.
func (aluo *AdminLoginUpdateOne) RemoveLogDatumIDs(ids ...int64) *AdminLoginUpdateOne {
	aluo.mutation.RemoveLogDatumIDs(ids...)
	return aluo
}

// RemoveLogData removes "LogData" edges to Logs entities.
func (aluo *AdminLoginUpdateOne) RemoveLogData(l ...*Logs) *AdminLoginUpdateOne {
	ids := make([]int64, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return aluo.RemoveLogDatumIDs(ids...)
}

// Where appends a list predicates to the AdminLoginUpdate builder.
func (aluo *AdminLoginUpdateOne) Where(ps ...predicate.AdminLogin) *AdminLoginUpdateOne {
	aluo.mutation.Where(ps...)
	return aluo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (aluo *AdminLoginUpdateOne) Select(field string, fields ...string) *AdminLoginUpdateOne {
	aluo.fields = append([]string{field}, fields...)
	return aluo
}

// Save executes the query and returns the updated AdminLogin entity.
func (aluo *AdminLoginUpdateOne) Save(ctx context.Context) (*AdminLogin, error) {
	return withHooks(ctx, aluo.sqlSave, aluo.mutation, aluo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (aluo *AdminLoginUpdateOne) SaveX(ctx context.Context) *AdminLogin {
	node, err := aluo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (aluo *AdminLoginUpdateOne) Exec(ctx context.Context) error {
	_, err := aluo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aluo *AdminLoginUpdateOne) ExecX(ctx context.Context) {
	if err := aluo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (aluo *AdminLoginUpdateOne) sqlSave(ctx context.Context) (_node *AdminLogin, err error) {
	_spec := sqlgraph.NewUpdateSpec(adminlogin.Table, adminlogin.Columns, sqlgraph.NewFieldSpec(adminlogin.FieldID, field.TypeInt32))
	id, ok := aluo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "AdminLogin.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := aluo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, adminlogin.FieldID)
		for _, f := range fields {
			if !adminlogin.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != adminlogin.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := aluo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := aluo.mutation.RoleName(); ok {
		_spec.SetField(adminlogin.FieldRoleName, field.TypeString, value)
	}
	if aluo.mutation.RoleNameCleared() {
		_spec.ClearField(adminlogin.FieldRoleName, field.TypeString)
	}
	if value, ok := aluo.mutation.CreatedDate(); ok {
		_spec.SetField(adminlogin.FieldCreatedDate, field.TypeTime, value)
	}
	if aluo.mutation.CreatedDateCleared() {
		_spec.ClearField(adminlogin.FieldCreatedDate, field.TypeTime)
	}
	if value, ok := aluo.mutation.Status(); ok {
		_spec.SetField(adminlogin.FieldStatus, field.TypeString, value)
	}
	if aluo.mutation.StatusCleared() {
		_spec.ClearField(adminlogin.FieldStatus, field.TypeString)
	}
	if value, ok := aluo.mutation.EmployeedID(); ok {
		_spec.SetField(adminlogin.FieldEmployeedID, field.TypeInt32, value)
	}
	if value, ok := aluo.mutation.AddedEmployeedID(); ok {
		_spec.AddField(adminlogin.FieldEmployeedID, field.TypeInt32, value)
	}
	if aluo.mutation.EmployeedIDCleared() {
		_spec.ClearField(adminlogin.FieldEmployeedID, field.TypeInt32)
	}
	if value, ok := aluo.mutation.EmployeeName(); ok {
		_spec.SetField(adminlogin.FieldEmployeeName, field.TypeString, value)
	}
	if aluo.mutation.EmployeeNameCleared() {
		_spec.ClearField(adminlogin.FieldEmployeeName, field.TypeString)
	}
	if value, ok := aluo.mutation.Emailid(); ok {
		_spec.SetField(adminlogin.FieldEmailid, field.TypeString, value)
	}
	if aluo.mutation.EmailidCleared() {
		_spec.ClearField(adminlogin.FieldEmailid, field.TypeString)
	}
	if value, ok := aluo.mutation.MobileNumber(); ok {
		_spec.SetField(adminlogin.FieldMobileNumber, field.TypeInt64, value)
	}
	if value, ok := aluo.mutation.AddedMobileNumber(); ok {
		_spec.AddField(adminlogin.FieldMobileNumber, field.TypeInt64, value)
	}
	if aluo.mutation.MobileNumberCleared() {
		_spec.ClearField(adminlogin.FieldMobileNumber, field.TypeInt64)
	}
	if value, ok := aluo.mutation.Username(); ok {
		_spec.SetField(adminlogin.FieldUsername, field.TypeString, value)
	}
	if value, ok := aluo.mutation.OTP(); ok {
		_spec.SetField(adminlogin.FieldOTP, field.TypeInt32, value)
	}
	if value, ok := aluo.mutation.AddedOTP(); ok {
		_spec.AddField(adminlogin.FieldOTP, field.TypeInt32, value)
	}
	if aluo.mutation.OTPCleared() {
		_spec.ClearField(adminlogin.FieldOTP, field.TypeInt32)
	}
	if value, ok := aluo.mutation.Password(); ok {
		_spec.SetField(adminlogin.FieldPassword, field.TypeString, value)
	}
	if value, ok := aluo.mutation.VerifyRemarks(); ok {
		_spec.SetField(adminlogin.FieldVerifyRemarks, field.TypeString, value)
	}
	if aluo.mutation.VerifyRemarksCleared() {
		_spec.ClearField(adminlogin.FieldVerifyRemarks, field.TypeString)
	}
	if aluo.mutation.RoleMasterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   adminlogin.RoleMasterTable,
			Columns: []string{adminlogin.RoleMasterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rolemaster.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aluo.mutation.RoleMasterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   adminlogin.RoleMasterTable,
			Columns: []string{adminlogin.RoleMasterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rolemaster.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if aluo.mutation.LogDataCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   adminlogin.LogDataTable,
			Columns: []string{adminlogin.LogDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(logs.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aluo.mutation.RemovedLogDataIDs(); len(nodes) > 0 && !aluo.mutation.LogDataCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   adminlogin.LogDataTable,
			Columns: []string{adminlogin.LogDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(logs.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aluo.mutation.LogDataIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   adminlogin.LogDataTable,
			Columns: []string{adminlogin.LogDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(logs.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &AdminLogin{config: aluo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, aluo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{adminlogin.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	aluo.mutation.done = true
	return _node, nil
}
