// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"recruit/ent/reversal_application_ip"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ReversalApplicationIPCreate is the builder for creating a Reversal_Application_IP entity.
type ReversalApplicationIPCreate struct {
	config
	mutation *ReversalApplicationIPMutation
	hooks    []Hook
}

// SetEmployeeID sets the "EmployeeID" field.
func (raic *ReversalApplicationIPCreate) SetEmployeeID(i int64) *ReversalApplicationIPCreate {
	raic.mutation.SetEmployeeID(i)
	return raic
}

// SetNillableEmployeeID sets the "EmployeeID" field if the given value is not nil.
func (raic *ReversalApplicationIPCreate) SetNillableEmployeeID(i *int64) *ReversalApplicationIPCreate {
	if i != nil {
		raic.SetEmployeeID(*i)
	}
	return raic
}

// SetEmployeeName sets the "EmployeeName" field.
func (raic *ReversalApplicationIPCreate) SetEmployeeName(s string) *ReversalApplicationIPCreate {
	raic.mutation.SetEmployeeName(s)
	return raic
}

// SetNillableEmployeeName sets the "EmployeeName" field if the given value is not nil.
func (raic *ReversalApplicationIPCreate) SetNillableEmployeeName(s *string) *ReversalApplicationIPCreate {
	if s != nil {
		raic.SetEmployeeName(*s)
	}
	return raic
}

// SetDOB sets the "DOB" field.
func (raic *ReversalApplicationIPCreate) SetDOB(s string) *ReversalApplicationIPCreate {
	raic.mutation.SetDOB(s)
	return raic
}

// SetNillableDOB sets the "DOB" field if the given value is not nil.
func (raic *ReversalApplicationIPCreate) SetNillableDOB(s *string) *ReversalApplicationIPCreate {
	if s != nil {
		raic.SetDOB(*s)
	}
	return raic
}

// SetGender sets the "Gender" field.
func (raic *ReversalApplicationIPCreate) SetGender(rai reversal_application_ip.Gender) *ReversalApplicationIPCreate {
	raic.mutation.SetGender(rai)
	return raic
}

// SetMobileNumber sets the "MobileNumber" field.
func (raic *ReversalApplicationIPCreate) SetMobileNumber(s string) *ReversalApplicationIPCreate {
	raic.mutation.SetMobileNumber(s)
	return raic
}

// SetNillableMobileNumber sets the "MobileNumber" field if the given value is not nil.
func (raic *ReversalApplicationIPCreate) SetNillableMobileNumber(s *string) *ReversalApplicationIPCreate {
	if s != nil {
		raic.SetMobileNumber(*s)
	}
	return raic
}

// SetEmailID sets the "EmailID" field.
func (raic *ReversalApplicationIPCreate) SetEmailID(s string) *ReversalApplicationIPCreate {
	raic.mutation.SetEmailID(s)
	return raic
}

// SetNillableEmailID sets the "EmailID" field if the given value is not nil.
func (raic *ReversalApplicationIPCreate) SetNillableEmailID(s *string) *ReversalApplicationIPCreate {
	if s != nil {
		raic.SetEmailID(*s)
	}
	return raic
}

// SetEmployeeCategory sets the "EmployeeCategory" field.
func (raic *ReversalApplicationIPCreate) SetEmployeeCategory(s string) *ReversalApplicationIPCreate {
	raic.mutation.SetEmployeeCategory(s)
	return raic
}

// SetNillableEmployeeCategory sets the "EmployeeCategory" field if the given value is not nil.
func (raic *ReversalApplicationIPCreate) SetNillableEmployeeCategory(s *string) *ReversalApplicationIPCreate {
	if s != nil {
		raic.SetEmployeeCategory(*s)
	}
	return raic
}

// SetCadre sets the "Cadre" field.
func (raic *ReversalApplicationIPCreate) SetCadre(s string) *ReversalApplicationIPCreate {
	raic.mutation.SetCadre(s)
	return raic
}

// SetNillableCadre sets the "Cadre" field if the given value is not nil.
func (raic *ReversalApplicationIPCreate) SetNillableCadre(s *string) *ReversalApplicationIPCreate {
	if s != nil {
		raic.SetCadre(*s)
	}
	return raic
}

// SetEmployeePost sets the "EmployeePost" field.
func (raic *ReversalApplicationIPCreate) SetEmployeePost(s string) *ReversalApplicationIPCreate {
	raic.mutation.SetEmployeePost(s)
	return raic
}

// SetNillableEmployeePost sets the "EmployeePost" field if the given value is not nil.
func (raic *ReversalApplicationIPCreate) SetNillableEmployeePost(s *string) *ReversalApplicationIPCreate {
	if s != nil {
		raic.SetEmployeePost(*s)
	}
	return raic
}

// SetFacilityID sets the "FacilityID" field.
func (raic *ReversalApplicationIPCreate) SetFacilityID(s string) *ReversalApplicationIPCreate {
	raic.mutation.SetFacilityID(s)
	return raic
}

// SetNillableFacilityID sets the "FacilityID" field if the given value is not nil.
func (raic *ReversalApplicationIPCreate) SetNillableFacilityID(s *string) *ReversalApplicationIPCreate {
	if s != nil {
		raic.SetFacilityID(*s)
	}
	return raic
}

// SetDCCS sets the "DCCS" field.
func (raic *ReversalApplicationIPCreate) SetDCCS(s string) *ReversalApplicationIPCreate {
	raic.mutation.SetDCCS(s)
	return raic
}

// SetNillableDCCS sets the "DCCS" field if the given value is not nil.
func (raic *ReversalApplicationIPCreate) SetNillableDCCS(s *string) *ReversalApplicationIPCreate {
	if s != nil {
		raic.SetDCCS(*s)
	}
	return raic
}

// SetDCInPresentCadre sets the "DCInPresentCadre" field.
func (raic *ReversalApplicationIPCreate) SetDCInPresentCadre(s string) *ReversalApplicationIPCreate {
	raic.mutation.SetDCInPresentCadre(s)
	return raic
}

// SetNillableDCInPresentCadre sets the "DCInPresentCadre" field if the given value is not nil.
func (raic *ReversalApplicationIPCreate) SetNillableDCInPresentCadre(s *string) *ReversalApplicationIPCreate {
	if s != nil {
		raic.SetDCInPresentCadre(*s)
	}
	return raic
}

// SetDeputationOfficeId sets the "DeputationOfficeId" field.
func (raic *ReversalApplicationIPCreate) SetDeputationOfficeId(s string) *ReversalApplicationIPCreate {
	raic.mutation.SetDeputationOfficeId(s)
	return raic
}

// SetNillableDeputationOfficeId sets the "DeputationOfficeId" field if the given value is not nil.
func (raic *ReversalApplicationIPCreate) SetNillableDeputationOfficeId(s *string) *ReversalApplicationIPCreate {
	if s != nil {
		raic.SetDeputationOfficeId(*s)
	}
	return raic
}

// SetDisabilityType sets the "DisabilityType" field.
func (raic *ReversalApplicationIPCreate) SetDisabilityType(s string) *ReversalApplicationIPCreate {
	raic.mutation.SetDisabilityType(s)
	return raic
}

// SetNillableDisabilityType sets the "DisabilityType" field if the given value is not nil.
func (raic *ReversalApplicationIPCreate) SetNillableDisabilityType(s *string) *ReversalApplicationIPCreate {
	if s != nil {
		raic.SetDisabilityType(*s)
	}
	return raic
}

// SetDisabilityPercentage sets the "DisabilityPercentage" field.
func (raic *ReversalApplicationIPCreate) SetDisabilityPercentage(s string) *ReversalApplicationIPCreate {
	raic.mutation.SetDisabilityPercentage(s)
	return raic
}

// SetNillableDisabilityPercentage sets the "DisabilityPercentage" field if the given value is not nil.
func (raic *ReversalApplicationIPCreate) SetNillableDisabilityPercentage(s *string) *ReversalApplicationIPCreate {
	if s != nil {
		raic.SetDisabilityPercentage(*s)
	}
	return raic
}

// SetEducation sets the "Education" field.
func (raic *ReversalApplicationIPCreate) SetEducation(s string) *ReversalApplicationIPCreate {
	raic.mutation.SetEducation(s)
	return raic
}

// SetNillableEducation sets the "Education" field if the given value is not nil.
func (raic *ReversalApplicationIPCreate) SetNillableEducation(s *string) *ReversalApplicationIPCreate {
	if s != nil {
		raic.SetEducation(*s)
	}
	return raic
}

// SetExamCodeIP sets the "ExamCodeIP" field.
func (raic *ReversalApplicationIPCreate) SetExamCodeIP(i int32) *ReversalApplicationIPCreate {
	raic.mutation.SetExamCodeIP(i)
	return raic
}

// SetNillableExamCodeIP sets the "ExamCodeIP" field if the given value is not nil.
func (raic *ReversalApplicationIPCreate) SetNillableExamCodeIP(i *int32) *ReversalApplicationIPCreate {
	if i != nil {
		raic.SetExamCodeIP(*i)
	}
	return raic
}

// SetExamYear sets the "ExamYear" field.
func (raic *ReversalApplicationIPCreate) SetExamYear(s string) *ReversalApplicationIPCreate {
	raic.mutation.SetExamYear(s)
	return raic
}

// SetNillableExamYear sets the "ExamYear" field if the given value is not nil.
func (raic *ReversalApplicationIPCreate) SetNillableExamYear(s *string) *ReversalApplicationIPCreate {
	if s != nil {
		raic.SetExamYear(*s)
	}
	return raic
}

// SetCentrePreference sets the "CentrePreference" field.
func (raic *ReversalApplicationIPCreate) SetCentrePreference(s string) *ReversalApplicationIPCreate {
	raic.mutation.SetCentrePreference(s)
	return raic
}

// SetNillableCentrePreference sets the "CentrePreference" field if the given value is not nil.
func (raic *ReversalApplicationIPCreate) SetNillableCentrePreference(s *string) *ReversalApplicationIPCreate {
	if s != nil {
		raic.SetCentrePreference(*s)
	}
	return raic
}

// SetSignature sets the "Signature" field.
func (raic *ReversalApplicationIPCreate) SetSignature(s string) *ReversalApplicationIPCreate {
	raic.mutation.SetSignature(s)
	return raic
}

// SetNillableSignature sets the "Signature" field if the given value is not nil.
func (raic *ReversalApplicationIPCreate) SetNillableSignature(s *string) *ReversalApplicationIPCreate {
	if s != nil {
		raic.SetSignature(*s)
	}
	return raic
}

// SetPhoto sets the "Photo" field.
func (raic *ReversalApplicationIPCreate) SetPhoto(s string) *ReversalApplicationIPCreate {
	raic.mutation.SetPhoto(s)
	return raic
}

// SetNillablePhoto sets the "Photo" field if the given value is not nil.
func (raic *ReversalApplicationIPCreate) SetNillablePhoto(s *string) *ReversalApplicationIPCreate {
	if s != nil {
		raic.SetPhoto(*s)
	}
	return raic
}

// SetApplicationStatus sets the "ApplicationStatus" field.
func (raic *ReversalApplicationIPCreate) SetApplicationStatus(s string) *ReversalApplicationIPCreate {
	raic.mutation.SetApplicationStatus(s)
	return raic
}

// SetNillableApplicationStatus sets the "ApplicationStatus" field if the given value is not nil.
func (raic *ReversalApplicationIPCreate) SetNillableApplicationStatus(s *string) *ReversalApplicationIPCreate {
	if s != nil {
		raic.SetApplicationStatus(*s)
	}
	return raic
}

// SetReversalApplnSubmittedDate sets the "ReversalApplnSubmittedDate" field.
func (raic *ReversalApplicationIPCreate) SetReversalApplnSubmittedDate(t time.Time) *ReversalApplicationIPCreate {
	raic.mutation.SetReversalApplnSubmittedDate(t)
	return raic
}

// SetNillableReversalApplnSubmittedDate sets the "ReversalApplnSubmittedDate" field if the given value is not nil.
func (raic *ReversalApplicationIPCreate) SetNillableReversalApplnSubmittedDate(t *time.Time) *ReversalApplicationIPCreate {
	if t != nil {
		raic.SetReversalApplnSubmittedDate(*t)
	}
	return raic
}

// SetVARemarks sets the "VA_Remarks" field.
func (raic *ReversalApplicationIPCreate) SetVARemarks(s string) *ReversalApplicationIPCreate {
	raic.mutation.SetVARemarks(s)
	return raic
}

// SetNillableVARemarks sets the "VA_Remarks" field if the given value is not nil.
func (raic *ReversalApplicationIPCreate) SetNillableVARemarks(s *string) *ReversalApplicationIPCreate {
	if s != nil {
		raic.SetVARemarks(*s)
	}
	return raic
}

// SetVAUserName sets the "VA_UserName" field.
func (raic *ReversalApplicationIPCreate) SetVAUserName(s string) *ReversalApplicationIPCreate {
	raic.mutation.SetVAUserName(s)
	return raic
}

// SetNillableVAUserName sets the "VA_UserName" field if the given value is not nil.
func (raic *ReversalApplicationIPCreate) SetNillableVAUserName(s *string) *ReversalApplicationIPCreate {
	if s != nil {
		raic.SetVAUserName(*s)
	}
	return raic
}

// SetVADate sets the "VA_Date" field.
func (raic *ReversalApplicationIPCreate) SetVADate(t time.Time) *ReversalApplicationIPCreate {
	raic.mutation.SetVADate(t)
	return raic
}

// SetNillableVADate sets the "VA_Date" field if the given value is not nil.
func (raic *ReversalApplicationIPCreate) SetNillableVADate(t *time.Time) *ReversalApplicationIPCreate {
	if t != nil {
		raic.SetVADate(*t)
	}
	return raic
}

// SetCARemarks sets the "CA_Remarks" field.
func (raic *ReversalApplicationIPCreate) SetCARemarks(s string) *ReversalApplicationIPCreate {
	raic.mutation.SetCARemarks(s)
	return raic
}

// SetNillableCARemarks sets the "CA_Remarks" field if the given value is not nil.
func (raic *ReversalApplicationIPCreate) SetNillableCARemarks(s *string) *ReversalApplicationIPCreate {
	if s != nil {
		raic.SetCARemarks(*s)
	}
	return raic
}

// SetCAUserName sets the "CA_UserName" field.
func (raic *ReversalApplicationIPCreate) SetCAUserName(s string) *ReversalApplicationIPCreate {
	raic.mutation.SetCAUserName(s)
	return raic
}

// SetNillableCAUserName sets the "CA_UserName" field if the given value is not nil.
func (raic *ReversalApplicationIPCreate) SetNillableCAUserName(s *string) *ReversalApplicationIPCreate {
	if s != nil {
		raic.SetCAUserName(*s)
	}
	return raic
}

// SetCADate sets the "CA_Date" field.
func (raic *ReversalApplicationIPCreate) SetCADate(t time.Time) *ReversalApplicationIPCreate {
	raic.mutation.SetCADate(t)
	return raic
}

// SetNillableCADate sets the "CA_Date" field if the given value is not nil.
func (raic *ReversalApplicationIPCreate) SetNillableCADate(t *time.Time) *ReversalApplicationIPCreate {
	if t != nil {
		raic.SetCADate(*t)
	}
	return raic
}

// SetAppliactionRemarks sets the "AppliactionRemarks" field.
func (raic *ReversalApplicationIPCreate) SetAppliactionRemarks(s string) *ReversalApplicationIPCreate {
	raic.mutation.SetAppliactionRemarks(s)
	return raic
}

// SetNillableAppliactionRemarks sets the "AppliactionRemarks" field if the given value is not nil.
func (raic *ReversalApplicationIPCreate) SetNillableAppliactionRemarks(s *string) *ReversalApplicationIPCreate {
	if s != nil {
		raic.SetAppliactionRemarks(*s)
	}
	return raic
}

// SetUpdatedAt sets the "UpdatedAt" field.
func (raic *ReversalApplicationIPCreate) SetUpdatedAt(t time.Time) *ReversalApplicationIPCreate {
	raic.mutation.SetUpdatedAt(t)
	return raic
}

// SetNillableUpdatedAt sets the "UpdatedAt" field if the given value is not nil.
func (raic *ReversalApplicationIPCreate) SetNillableUpdatedAt(t *time.Time) *ReversalApplicationIPCreate {
	if t != nil {
		raic.SetUpdatedAt(*t)
	}
	return raic
}

// SetUpdatedBy sets the "UpdatedBy" field.
func (raic *ReversalApplicationIPCreate) SetUpdatedBy(s string) *ReversalApplicationIPCreate {
	raic.mutation.SetUpdatedBy(s)
	return raic
}

// SetNillableUpdatedBy sets the "UpdatedBy" field if the given value is not nil.
func (raic *ReversalApplicationIPCreate) SetNillableUpdatedBy(s *string) *ReversalApplicationIPCreate {
	if s != nil {
		raic.SetUpdatedBy(*s)
	}
	return raic
}

// SetRoleUserCode sets the "RoleUserCode" field.
func (raic *ReversalApplicationIPCreate) SetRoleUserCode(i int32) *ReversalApplicationIPCreate {
	raic.mutation.SetRoleUserCode(i)
	return raic
}

// SetNillableRoleUserCode sets the "RoleUserCode" field if the given value is not nil.
func (raic *ReversalApplicationIPCreate) SetNillableRoleUserCode(i *int32) *ReversalApplicationIPCreate {
	if i != nil {
		raic.SetRoleUserCode(*i)
	}
	return raic
}

// SetID sets the "id" field.
func (raic *ReversalApplicationIPCreate) SetID(i int64) *ReversalApplicationIPCreate {
	raic.mutation.SetID(i)
	return raic
}

// Mutation returns the ReversalApplicationIPMutation object of the builder.
func (raic *ReversalApplicationIPCreate) Mutation() *ReversalApplicationIPMutation {
	return raic.mutation
}

// Save creates the Reversal_Application_IP in the database.
func (raic *ReversalApplicationIPCreate) Save(ctx context.Context) (*Reversal_Application_IP, error) {
	raic.defaults()
	return withHooks(ctx, raic.sqlSave, raic.mutation, raic.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (raic *ReversalApplicationIPCreate) SaveX(ctx context.Context) *Reversal_Application_IP {
	v, err := raic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (raic *ReversalApplicationIPCreate) Exec(ctx context.Context) error {
	_, err := raic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (raic *ReversalApplicationIPCreate) ExecX(ctx context.Context) {
	if err := raic.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (raic *ReversalApplicationIPCreate) defaults() {
	if _, ok := raic.mutation.UpdatedAt(); !ok {
		v := reversal_application_ip.DefaultUpdatedAt()
		raic.mutation.SetUpdatedAt(v)
	}
	if _, ok := raic.mutation.UpdatedBy(); !ok {
		v := reversal_application_ip.DefaultUpdatedBy
		raic.mutation.SetUpdatedBy(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (raic *ReversalApplicationIPCreate) check() error {
	if _, ok := raic.mutation.Gender(); !ok {
		return &ValidationError{Name: "Gender", err: errors.New(`ent: missing required field "Reversal_Application_IP.Gender"`)}
	}
	if v, ok := raic.mutation.Gender(); ok {
		if err := reversal_application_ip.GenderValidator(v); err != nil {
			return &ValidationError{Name: "Gender", err: fmt.Errorf(`ent: validator failed for field "Reversal_Application_IP.Gender": %w`, err)}
		}
	}
	return nil
}

func (raic *ReversalApplicationIPCreate) sqlSave(ctx context.Context) (*Reversal_Application_IP, error) {
	if err := raic.check(); err != nil {
		return nil, err
	}
	_node, _spec := raic.createSpec()
	if err := sqlgraph.CreateNode(ctx, raic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	raic.mutation.id = &_node.ID
	raic.mutation.done = true
	return _node, nil
}

func (raic *ReversalApplicationIPCreate) createSpec() (*Reversal_Application_IP, *sqlgraph.CreateSpec) {
	var (
		_node = &Reversal_Application_IP{config: raic.config}
		_spec = sqlgraph.NewCreateSpec(reversal_application_ip.Table, sqlgraph.NewFieldSpec(reversal_application_ip.FieldID, field.TypeInt64))
	)
	if id, ok := raic.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := raic.mutation.EmployeeID(); ok {
		_spec.SetField(reversal_application_ip.FieldEmployeeID, field.TypeInt64, value)
		_node.EmployeeID = value
	}
	if value, ok := raic.mutation.EmployeeName(); ok {
		_spec.SetField(reversal_application_ip.FieldEmployeeName, field.TypeString, value)
		_node.EmployeeName = value
	}
	if value, ok := raic.mutation.DOB(); ok {
		_spec.SetField(reversal_application_ip.FieldDOB, field.TypeString, value)
		_node.DOB = value
	}
	if value, ok := raic.mutation.Gender(); ok {
		_spec.SetField(reversal_application_ip.FieldGender, field.TypeEnum, value)
		_node.Gender = value
	}
	if value, ok := raic.mutation.MobileNumber(); ok {
		_spec.SetField(reversal_application_ip.FieldMobileNumber, field.TypeString, value)
		_node.MobileNumber = value
	}
	if value, ok := raic.mutation.EmailID(); ok {
		_spec.SetField(reversal_application_ip.FieldEmailID, field.TypeString, value)
		_node.EmailID = value
	}
	if value, ok := raic.mutation.EmployeeCategory(); ok {
		_spec.SetField(reversal_application_ip.FieldEmployeeCategory, field.TypeString, value)
		_node.EmployeeCategory = value
	}
	if value, ok := raic.mutation.Cadre(); ok {
		_spec.SetField(reversal_application_ip.FieldCadre, field.TypeString, value)
		_node.Cadre = value
	}
	if value, ok := raic.mutation.EmployeePost(); ok {
		_spec.SetField(reversal_application_ip.FieldEmployeePost, field.TypeString, value)
		_node.EmployeePost = value
	}
	if value, ok := raic.mutation.FacilityID(); ok {
		_spec.SetField(reversal_application_ip.FieldFacilityID, field.TypeString, value)
		_node.FacilityID = value
	}
	if value, ok := raic.mutation.DCCS(); ok {
		_spec.SetField(reversal_application_ip.FieldDCCS, field.TypeString, value)
		_node.DCCS = value
	}
	if value, ok := raic.mutation.DCInPresentCadre(); ok {
		_spec.SetField(reversal_application_ip.FieldDCInPresentCadre, field.TypeString, value)
		_node.DCInPresentCadre = value
	}
	if value, ok := raic.mutation.DeputationOfficeId(); ok {
		_spec.SetField(reversal_application_ip.FieldDeputationOfficeId, field.TypeString, value)
		_node.DeputationOfficeId = value
	}
	if value, ok := raic.mutation.DisabilityType(); ok {
		_spec.SetField(reversal_application_ip.FieldDisabilityType, field.TypeString, value)
		_node.DisabilityType = value
	}
	if value, ok := raic.mutation.DisabilityPercentage(); ok {
		_spec.SetField(reversal_application_ip.FieldDisabilityPercentage, field.TypeString, value)
		_node.DisabilityPercentage = value
	}
	if value, ok := raic.mutation.Education(); ok {
		_spec.SetField(reversal_application_ip.FieldEducation, field.TypeString, value)
		_node.Education = value
	}
	if value, ok := raic.mutation.ExamCodeIP(); ok {
		_spec.SetField(reversal_application_ip.FieldExamCodeIP, field.TypeInt32, value)
		_node.ExamCodeIP = value
	}
	if value, ok := raic.mutation.ExamYear(); ok {
		_spec.SetField(reversal_application_ip.FieldExamYear, field.TypeString, value)
		_node.ExamYear = value
	}
	if value, ok := raic.mutation.CentrePreference(); ok {
		_spec.SetField(reversal_application_ip.FieldCentrePreference, field.TypeString, value)
		_node.CentrePreference = value
	}
	if value, ok := raic.mutation.Signature(); ok {
		_spec.SetField(reversal_application_ip.FieldSignature, field.TypeString, value)
		_node.Signature = value
	}
	if value, ok := raic.mutation.Photo(); ok {
		_spec.SetField(reversal_application_ip.FieldPhoto, field.TypeString, value)
		_node.Photo = value
	}
	if value, ok := raic.mutation.ApplicationStatus(); ok {
		_spec.SetField(reversal_application_ip.FieldApplicationStatus, field.TypeString, value)
		_node.ApplicationStatus = value
	}
	if value, ok := raic.mutation.ReversalApplnSubmittedDate(); ok {
		_spec.SetField(reversal_application_ip.FieldReversalApplnSubmittedDate, field.TypeTime, value)
		_node.ReversalApplnSubmittedDate = value
	}
	if value, ok := raic.mutation.VARemarks(); ok {
		_spec.SetField(reversal_application_ip.FieldVARemarks, field.TypeString, value)
		_node.VARemarks = value
	}
	if value, ok := raic.mutation.VAUserName(); ok {
		_spec.SetField(reversal_application_ip.FieldVAUserName, field.TypeString, value)
		_node.VAUserName = value
	}
	if value, ok := raic.mutation.VADate(); ok {
		_spec.SetField(reversal_application_ip.FieldVADate, field.TypeTime, value)
		_node.VADate = value
	}
	if value, ok := raic.mutation.CARemarks(); ok {
		_spec.SetField(reversal_application_ip.FieldCARemarks, field.TypeString, value)
		_node.CARemarks = value
	}
	if value, ok := raic.mutation.CAUserName(); ok {
		_spec.SetField(reversal_application_ip.FieldCAUserName, field.TypeString, value)
		_node.CAUserName = value
	}
	if value, ok := raic.mutation.CADate(); ok {
		_spec.SetField(reversal_application_ip.FieldCADate, field.TypeTime, value)
		_node.CADate = value
	}
	if value, ok := raic.mutation.AppliactionRemarks(); ok {
		_spec.SetField(reversal_application_ip.FieldAppliactionRemarks, field.TypeString, value)
		_node.AppliactionRemarks = value
	}
	if value, ok := raic.mutation.UpdatedAt(); ok {
		_spec.SetField(reversal_application_ip.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := raic.mutation.UpdatedBy(); ok {
		_spec.SetField(reversal_application_ip.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if value, ok := raic.mutation.RoleUserCode(); ok {
		_spec.SetField(reversal_application_ip.FieldRoleUserCode, field.TypeInt32, value)
		_node.RoleUserCode = value
	}
	return _node, _spec
}

// ReversalApplicationIPCreateBulk is the builder for creating many Reversal_Application_IP entities in bulk.
type ReversalApplicationIPCreateBulk struct {
	config
	builders []*ReversalApplicationIPCreate
}

// Save creates the Reversal_Application_IP entities in the database.
func (raicb *ReversalApplicationIPCreateBulk) Save(ctx context.Context) ([]*Reversal_Application_IP, error) {
	specs := make([]*sqlgraph.CreateSpec, len(raicb.builders))
	nodes := make([]*Reversal_Application_IP, len(raicb.builders))
	mutators := make([]Mutator, len(raicb.builders))
	for i := range raicb.builders {
		func(i int, root context.Context) {
			builder := raicb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ReversalApplicationIPMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, raicb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, raicb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, raicb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (raicb *ReversalApplicationIPCreateBulk) SaveX(ctx context.Context) []*Reversal_Application_IP {
	v, err := raicb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (raicb *ReversalApplicationIPCreateBulk) Exec(ctx context.Context) error {
	_, err := raicb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (raicb *ReversalApplicationIPCreateBulk) ExecX(ctx context.Context) {
	if err := raicb.Exec(ctx); err != nil {
		panic(err)
	}
}
