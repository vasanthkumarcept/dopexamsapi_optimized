// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"recruit/ent/educationdetails"
	"recruit/ent/logs"
	"recruit/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// EducationDetailsUpdate is the builder for updating EducationDetails entities.
type EducationDetailsUpdate struct {
	config
	hooks    []Hook
	mutation *EducationDetailsMutation
}

// Where appends a list predicates to the EducationDetailsUpdate builder.
func (edu *EducationDetailsUpdate) Where(ps ...predicate.EducationDetails) *EducationDetailsUpdate {
	edu.mutation.Where(ps...)
	return edu
}

// SetEducationDescription sets the "educationDescription" field.
func (edu *EducationDetailsUpdate) SetEducationDescription(s string) *EducationDetailsUpdate {
	edu.mutation.SetEducationDescription(s)
	return edu
}

// SetNillableEducationDescription sets the "educationDescription" field if the given value is not nil.
func (edu *EducationDetailsUpdate) SetNillableEducationDescription(s *string) *EducationDetailsUpdate {
	if s != nil {
		edu.SetEducationDescription(*s)
	}
	return edu
}

// ClearEducationDescription clears the value of the "educationDescription" field.
func (edu *EducationDetailsUpdate) ClearEducationDescription() *EducationDetailsUpdate {
	edu.mutation.ClearEducationDescription()
	return edu
}

// SetOrderNumber sets the "OrderNumber" field.
func (edu *EducationDetailsUpdate) SetOrderNumber(s string) *EducationDetailsUpdate {
	edu.mutation.SetOrderNumber(s)
	return edu
}

// SetNillableOrderNumber sets the "OrderNumber" field if the given value is not nil.
func (edu *EducationDetailsUpdate) SetNillableOrderNumber(s *string) *EducationDetailsUpdate {
	if s != nil {
		edu.SetOrderNumber(*s)
	}
	return edu
}

// ClearOrderNumber clears the value of the "OrderNumber" field.
func (edu *EducationDetailsUpdate) ClearOrderNumber() *EducationDetailsUpdate {
	edu.mutation.ClearOrderNumber()
	return edu
}

// SetCreatedById sets the "CreatedById" field.
func (edu *EducationDetailsUpdate) SetCreatedById(i int64) *EducationDetailsUpdate {
	edu.mutation.ResetCreatedById()
	edu.mutation.SetCreatedById(i)
	return edu
}

// SetNillableCreatedById sets the "CreatedById" field if the given value is not nil.
func (edu *EducationDetailsUpdate) SetNillableCreatedById(i *int64) *EducationDetailsUpdate {
	if i != nil {
		edu.SetCreatedById(*i)
	}
	return edu
}

// AddCreatedById adds i to the "CreatedById" field.
func (edu *EducationDetailsUpdate) AddCreatedById(i int64) *EducationDetailsUpdate {
	edu.mutation.AddCreatedById(i)
	return edu
}

// ClearCreatedById clears the value of the "CreatedById" field.
func (edu *EducationDetailsUpdate) ClearCreatedById() *EducationDetailsUpdate {
	edu.mutation.ClearCreatedById()
	return edu
}

// SetCreatedByUserName sets the "CreatedByUserName" field.
func (edu *EducationDetailsUpdate) SetCreatedByUserName(s string) *EducationDetailsUpdate {
	edu.mutation.SetCreatedByUserName(s)
	return edu
}

// SetNillableCreatedByUserName sets the "CreatedByUserName" field if the given value is not nil.
func (edu *EducationDetailsUpdate) SetNillableCreatedByUserName(s *string) *EducationDetailsUpdate {
	if s != nil {
		edu.SetCreatedByUserName(*s)
	}
	return edu
}

// ClearCreatedByUserName clears the value of the "CreatedByUserName" field.
func (edu *EducationDetailsUpdate) ClearCreatedByUserName() *EducationDetailsUpdate {
	edu.mutation.ClearCreatedByUserName()
	return edu
}

// SetCreatedByEmployeeId sets the "CreatedByEmployeeId" field.
func (edu *EducationDetailsUpdate) SetCreatedByEmployeeId(s string) *EducationDetailsUpdate {
	edu.mutation.SetCreatedByEmployeeId(s)
	return edu
}

// SetNillableCreatedByEmployeeId sets the "CreatedByEmployeeId" field if the given value is not nil.
func (edu *EducationDetailsUpdate) SetNillableCreatedByEmployeeId(s *string) *EducationDetailsUpdate {
	if s != nil {
		edu.SetCreatedByEmployeeId(*s)
	}
	return edu
}

// ClearCreatedByEmployeeId clears the value of the "CreatedByEmployeeId" field.
func (edu *EducationDetailsUpdate) ClearCreatedByEmployeeId() *EducationDetailsUpdate {
	edu.mutation.ClearCreatedByEmployeeId()
	return edu
}

// SetCreatedByDesignation sets the "CreatedByDesignation" field.
func (edu *EducationDetailsUpdate) SetCreatedByDesignation(s string) *EducationDetailsUpdate {
	edu.mutation.SetCreatedByDesignation(s)
	return edu
}

// SetNillableCreatedByDesignation sets the "CreatedByDesignation" field if the given value is not nil.
func (edu *EducationDetailsUpdate) SetNillableCreatedByDesignation(s *string) *EducationDetailsUpdate {
	if s != nil {
		edu.SetCreatedByDesignation(*s)
	}
	return edu
}

// ClearCreatedByDesignation clears the value of the "CreatedByDesignation" field.
func (edu *EducationDetailsUpdate) ClearCreatedByDesignation() *EducationDetailsUpdate {
	edu.mutation.ClearCreatedByDesignation()
	return edu
}

// SetCreatedDate sets the "CreatedDate" field.
func (edu *EducationDetailsUpdate) SetCreatedDate(t time.Time) *EducationDetailsUpdate {
	edu.mutation.SetCreatedDate(t)
	return edu
}

// SetNillableCreatedDate sets the "CreatedDate" field if the given value is not nil.
func (edu *EducationDetailsUpdate) SetNillableCreatedDate(t *time.Time) *EducationDetailsUpdate {
	if t != nil {
		edu.SetCreatedDate(*t)
	}
	return edu
}

// ClearCreatedDate clears the value of the "CreatedDate" field.
func (edu *EducationDetailsUpdate) ClearCreatedDate() *EducationDetailsUpdate {
	edu.mutation.ClearCreatedDate()
	return edu
}

// SetVerifiedById sets the "VerifiedById" field.
func (edu *EducationDetailsUpdate) SetVerifiedById(i int64) *EducationDetailsUpdate {
	edu.mutation.ResetVerifiedById()
	edu.mutation.SetVerifiedById(i)
	return edu
}

// SetNillableVerifiedById sets the "VerifiedById" field if the given value is not nil.
func (edu *EducationDetailsUpdate) SetNillableVerifiedById(i *int64) *EducationDetailsUpdate {
	if i != nil {
		edu.SetVerifiedById(*i)
	}
	return edu
}

// AddVerifiedById adds i to the "VerifiedById" field.
func (edu *EducationDetailsUpdate) AddVerifiedById(i int64) *EducationDetailsUpdate {
	edu.mutation.AddVerifiedById(i)
	return edu
}

// ClearVerifiedById clears the value of the "VerifiedById" field.
func (edu *EducationDetailsUpdate) ClearVerifiedById() *EducationDetailsUpdate {
	edu.mutation.ClearVerifiedById()
	return edu
}

// SetVerifiedByUserName sets the "VerifiedByUserName" field.
func (edu *EducationDetailsUpdate) SetVerifiedByUserName(s string) *EducationDetailsUpdate {
	edu.mutation.SetVerifiedByUserName(s)
	return edu
}

// SetNillableVerifiedByUserName sets the "VerifiedByUserName" field if the given value is not nil.
func (edu *EducationDetailsUpdate) SetNillableVerifiedByUserName(s *string) *EducationDetailsUpdate {
	if s != nil {
		edu.SetVerifiedByUserName(*s)
	}
	return edu
}

// ClearVerifiedByUserName clears the value of the "VerifiedByUserName" field.
func (edu *EducationDetailsUpdate) ClearVerifiedByUserName() *EducationDetailsUpdate {
	edu.mutation.ClearVerifiedByUserName()
	return edu
}

// SetVerifiedByEmployeeId sets the "VerifiedByEmployeeId" field.
func (edu *EducationDetailsUpdate) SetVerifiedByEmployeeId(s string) *EducationDetailsUpdate {
	edu.mutation.SetVerifiedByEmployeeId(s)
	return edu
}

// SetNillableVerifiedByEmployeeId sets the "VerifiedByEmployeeId" field if the given value is not nil.
func (edu *EducationDetailsUpdate) SetNillableVerifiedByEmployeeId(s *string) *EducationDetailsUpdate {
	if s != nil {
		edu.SetVerifiedByEmployeeId(*s)
	}
	return edu
}

// ClearVerifiedByEmployeeId clears the value of the "VerifiedByEmployeeId" field.
func (edu *EducationDetailsUpdate) ClearVerifiedByEmployeeId() *EducationDetailsUpdate {
	edu.mutation.ClearVerifiedByEmployeeId()
	return edu
}

// SetVerifiedByDesignation sets the "VerifiedByDesignation" field.
func (edu *EducationDetailsUpdate) SetVerifiedByDesignation(s string) *EducationDetailsUpdate {
	edu.mutation.SetVerifiedByDesignation(s)
	return edu
}

// SetNillableVerifiedByDesignation sets the "VerifiedByDesignation" field if the given value is not nil.
func (edu *EducationDetailsUpdate) SetNillableVerifiedByDesignation(s *string) *EducationDetailsUpdate {
	if s != nil {
		edu.SetVerifiedByDesignation(*s)
	}
	return edu
}

// ClearVerifiedByDesignation clears the value of the "VerifiedByDesignation" field.
func (edu *EducationDetailsUpdate) ClearVerifiedByDesignation() *EducationDetailsUpdate {
	edu.mutation.ClearVerifiedByDesignation()
	return edu
}

// SetVerifiedDate sets the "VerifiedDate" field.
func (edu *EducationDetailsUpdate) SetVerifiedDate(t time.Time) *EducationDetailsUpdate {
	edu.mutation.SetVerifiedDate(t)
	return edu
}

// SetNillableVerifiedDate sets the "VerifiedDate" field if the given value is not nil.
func (edu *EducationDetailsUpdate) SetNillableVerifiedDate(t *time.Time) *EducationDetailsUpdate {
	if t != nil {
		edu.SetVerifiedDate(*t)
	}
	return edu
}

// ClearVerifiedDate clears the value of the "VerifiedDate" field.
func (edu *EducationDetailsUpdate) ClearVerifiedDate() *EducationDetailsUpdate {
	edu.mutation.ClearVerifiedDate()
	return edu
}

// SetStatus sets the "Status" field.
func (edu *EducationDetailsUpdate) SetStatus(s string) *EducationDetailsUpdate {
	edu.mutation.SetStatus(s)
	return edu
}

// SetDeletedById sets the "DeletedById" field.
func (edu *EducationDetailsUpdate) SetDeletedById(i int64) *EducationDetailsUpdate {
	edu.mutation.ResetDeletedById()
	edu.mutation.SetDeletedById(i)
	return edu
}

// SetNillableDeletedById sets the "DeletedById" field if the given value is not nil.
func (edu *EducationDetailsUpdate) SetNillableDeletedById(i *int64) *EducationDetailsUpdate {
	if i != nil {
		edu.SetDeletedById(*i)
	}
	return edu
}

// AddDeletedById adds i to the "DeletedById" field.
func (edu *EducationDetailsUpdate) AddDeletedById(i int64) *EducationDetailsUpdate {
	edu.mutation.AddDeletedById(i)
	return edu
}

// ClearDeletedById clears the value of the "DeletedById" field.
func (edu *EducationDetailsUpdate) ClearDeletedById() *EducationDetailsUpdate {
	edu.mutation.ClearDeletedById()
	return edu
}

// SetDeletedByUserName sets the "DeletedByUserName" field.
func (edu *EducationDetailsUpdate) SetDeletedByUserName(s string) *EducationDetailsUpdate {
	edu.mutation.SetDeletedByUserName(s)
	return edu
}

// SetNillableDeletedByUserName sets the "DeletedByUserName" field if the given value is not nil.
func (edu *EducationDetailsUpdate) SetNillableDeletedByUserName(s *string) *EducationDetailsUpdate {
	if s != nil {
		edu.SetDeletedByUserName(*s)
	}
	return edu
}

// ClearDeletedByUserName clears the value of the "DeletedByUserName" field.
func (edu *EducationDetailsUpdate) ClearDeletedByUserName() *EducationDetailsUpdate {
	edu.mutation.ClearDeletedByUserName()
	return edu
}

// SetDeletedByEmployeeId sets the "DeletedByEmployeeId" field.
func (edu *EducationDetailsUpdate) SetDeletedByEmployeeId(s string) *EducationDetailsUpdate {
	edu.mutation.SetDeletedByEmployeeId(s)
	return edu
}

// SetNillableDeletedByEmployeeId sets the "DeletedByEmployeeId" field if the given value is not nil.
func (edu *EducationDetailsUpdate) SetNillableDeletedByEmployeeId(s *string) *EducationDetailsUpdate {
	if s != nil {
		edu.SetDeletedByEmployeeId(*s)
	}
	return edu
}

// ClearDeletedByEmployeeId clears the value of the "DeletedByEmployeeId" field.
func (edu *EducationDetailsUpdate) ClearDeletedByEmployeeId() *EducationDetailsUpdate {
	edu.mutation.ClearDeletedByEmployeeId()
	return edu
}

// SetDeletedByDesignation sets the "DeletedByDesignation" field.
func (edu *EducationDetailsUpdate) SetDeletedByDesignation(s string) *EducationDetailsUpdate {
	edu.mutation.SetDeletedByDesignation(s)
	return edu
}

// SetNillableDeletedByDesignation sets the "DeletedByDesignation" field if the given value is not nil.
func (edu *EducationDetailsUpdate) SetNillableDeletedByDesignation(s *string) *EducationDetailsUpdate {
	if s != nil {
		edu.SetDeletedByDesignation(*s)
	}
	return edu
}

// ClearDeletedByDesignation clears the value of the "DeletedByDesignation" field.
func (edu *EducationDetailsUpdate) ClearDeletedByDesignation() *EducationDetailsUpdate {
	edu.mutation.ClearDeletedByDesignation()
	return edu
}

// SetDeletedDate sets the "DeletedDate" field.
func (edu *EducationDetailsUpdate) SetDeletedDate(t time.Time) *EducationDetailsUpdate {
	edu.mutation.SetDeletedDate(t)
	return edu
}

// SetNillableDeletedDate sets the "DeletedDate" field if the given value is not nil.
func (edu *EducationDetailsUpdate) SetNillableDeletedDate(t *time.Time) *EducationDetailsUpdate {
	if t != nil {
		edu.SetDeletedDate(*t)
	}
	return edu
}

// ClearDeletedDate clears the value of the "DeletedDate" field.
func (edu *EducationDetailsUpdate) ClearDeletedDate() *EducationDetailsUpdate {
	edu.mutation.ClearDeletedDate()
	return edu
}

// AddLogDatumIDs adds the "LogData" edge to the Logs entity by IDs.
func (edu *EducationDetailsUpdate) AddLogDatumIDs(ids ...int64) *EducationDetailsUpdate {
	edu.mutation.AddLogDatumIDs(ids...)
	return edu
}

// AddLogData adds the "LogData" edges to the Logs entity.
func (edu *EducationDetailsUpdate) AddLogData(l ...*Logs) *EducationDetailsUpdate {
	ids := make([]int64, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return edu.AddLogDatumIDs(ids...)
}

// Mutation returns the EducationDetailsMutation object of the builder.
func (edu *EducationDetailsUpdate) Mutation() *EducationDetailsMutation {
	return edu.mutation
}

// ClearLogData clears all "LogData" edges to the Logs entity.
func (edu *EducationDetailsUpdate) ClearLogData() *EducationDetailsUpdate {
	edu.mutation.ClearLogData()
	return edu
}

// RemoveLogDatumIDs removes the "LogData" edge to Logs entities by IDs.
func (edu *EducationDetailsUpdate) RemoveLogDatumIDs(ids ...int64) *EducationDetailsUpdate {
	edu.mutation.RemoveLogDatumIDs(ids...)
	return edu
}

// RemoveLogData removes "LogData" edges to Logs entities.
func (edu *EducationDetailsUpdate) RemoveLogData(l ...*Logs) *EducationDetailsUpdate {
	ids := make([]int64, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return edu.RemoveLogDatumIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (edu *EducationDetailsUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, edu.sqlSave, edu.mutation, edu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (edu *EducationDetailsUpdate) SaveX(ctx context.Context) int {
	affected, err := edu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (edu *EducationDetailsUpdate) Exec(ctx context.Context) error {
	_, err := edu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (edu *EducationDetailsUpdate) ExecX(ctx context.Context) {
	if err := edu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (edu *EducationDetailsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(educationdetails.Table, educationdetails.Columns, sqlgraph.NewFieldSpec(educationdetails.FieldID, field.TypeInt64))
	if ps := edu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := edu.mutation.EducationDescription(); ok {
		_spec.SetField(educationdetails.FieldEducationDescription, field.TypeString, value)
	}
	if edu.mutation.EducationDescriptionCleared() {
		_spec.ClearField(educationdetails.FieldEducationDescription, field.TypeString)
	}
	if value, ok := edu.mutation.OrderNumber(); ok {
		_spec.SetField(educationdetails.FieldOrderNumber, field.TypeString, value)
	}
	if edu.mutation.OrderNumberCleared() {
		_spec.ClearField(educationdetails.FieldOrderNumber, field.TypeString)
	}
	if value, ok := edu.mutation.CreatedById(); ok {
		_spec.SetField(educationdetails.FieldCreatedById, field.TypeInt64, value)
	}
	if value, ok := edu.mutation.AddedCreatedById(); ok {
		_spec.AddField(educationdetails.FieldCreatedById, field.TypeInt64, value)
	}
	if edu.mutation.CreatedByIdCleared() {
		_spec.ClearField(educationdetails.FieldCreatedById, field.TypeInt64)
	}
	if value, ok := edu.mutation.CreatedByUserName(); ok {
		_spec.SetField(educationdetails.FieldCreatedByUserName, field.TypeString, value)
	}
	if edu.mutation.CreatedByUserNameCleared() {
		_spec.ClearField(educationdetails.FieldCreatedByUserName, field.TypeString)
	}
	if value, ok := edu.mutation.CreatedByEmployeeId(); ok {
		_spec.SetField(educationdetails.FieldCreatedByEmployeeId, field.TypeString, value)
	}
	if edu.mutation.CreatedByEmployeeIdCleared() {
		_spec.ClearField(educationdetails.FieldCreatedByEmployeeId, field.TypeString)
	}
	if value, ok := edu.mutation.CreatedByDesignation(); ok {
		_spec.SetField(educationdetails.FieldCreatedByDesignation, field.TypeString, value)
	}
	if edu.mutation.CreatedByDesignationCleared() {
		_spec.ClearField(educationdetails.FieldCreatedByDesignation, field.TypeString)
	}
	if value, ok := edu.mutation.CreatedDate(); ok {
		_spec.SetField(educationdetails.FieldCreatedDate, field.TypeTime, value)
	}
	if edu.mutation.CreatedDateCleared() {
		_spec.ClearField(educationdetails.FieldCreatedDate, field.TypeTime)
	}
	if value, ok := edu.mutation.VerifiedById(); ok {
		_spec.SetField(educationdetails.FieldVerifiedById, field.TypeInt64, value)
	}
	if value, ok := edu.mutation.AddedVerifiedById(); ok {
		_spec.AddField(educationdetails.FieldVerifiedById, field.TypeInt64, value)
	}
	if edu.mutation.VerifiedByIdCleared() {
		_spec.ClearField(educationdetails.FieldVerifiedById, field.TypeInt64)
	}
	if value, ok := edu.mutation.VerifiedByUserName(); ok {
		_spec.SetField(educationdetails.FieldVerifiedByUserName, field.TypeString, value)
	}
	if edu.mutation.VerifiedByUserNameCleared() {
		_spec.ClearField(educationdetails.FieldVerifiedByUserName, field.TypeString)
	}
	if value, ok := edu.mutation.VerifiedByEmployeeId(); ok {
		_spec.SetField(educationdetails.FieldVerifiedByEmployeeId, field.TypeString, value)
	}
	if edu.mutation.VerifiedByEmployeeIdCleared() {
		_spec.ClearField(educationdetails.FieldVerifiedByEmployeeId, field.TypeString)
	}
	if value, ok := edu.mutation.VerifiedByDesignation(); ok {
		_spec.SetField(educationdetails.FieldVerifiedByDesignation, field.TypeString, value)
	}
	if edu.mutation.VerifiedByDesignationCleared() {
		_spec.ClearField(educationdetails.FieldVerifiedByDesignation, field.TypeString)
	}
	if value, ok := edu.mutation.VerifiedDate(); ok {
		_spec.SetField(educationdetails.FieldVerifiedDate, field.TypeTime, value)
	}
	if edu.mutation.VerifiedDateCleared() {
		_spec.ClearField(educationdetails.FieldVerifiedDate, field.TypeTime)
	}
	if value, ok := edu.mutation.Status(); ok {
		_spec.SetField(educationdetails.FieldStatus, field.TypeString, value)
	}
	if value, ok := edu.mutation.DeletedById(); ok {
		_spec.SetField(educationdetails.FieldDeletedById, field.TypeInt64, value)
	}
	if value, ok := edu.mutation.AddedDeletedById(); ok {
		_spec.AddField(educationdetails.FieldDeletedById, field.TypeInt64, value)
	}
	if edu.mutation.DeletedByIdCleared() {
		_spec.ClearField(educationdetails.FieldDeletedById, field.TypeInt64)
	}
	if value, ok := edu.mutation.DeletedByUserName(); ok {
		_spec.SetField(educationdetails.FieldDeletedByUserName, field.TypeString, value)
	}
	if edu.mutation.DeletedByUserNameCleared() {
		_spec.ClearField(educationdetails.FieldDeletedByUserName, field.TypeString)
	}
	if value, ok := edu.mutation.DeletedByEmployeeId(); ok {
		_spec.SetField(educationdetails.FieldDeletedByEmployeeId, field.TypeString, value)
	}
	if edu.mutation.DeletedByEmployeeIdCleared() {
		_spec.ClearField(educationdetails.FieldDeletedByEmployeeId, field.TypeString)
	}
	if value, ok := edu.mutation.DeletedByDesignation(); ok {
		_spec.SetField(educationdetails.FieldDeletedByDesignation, field.TypeString, value)
	}
	if edu.mutation.DeletedByDesignationCleared() {
		_spec.ClearField(educationdetails.FieldDeletedByDesignation, field.TypeString)
	}
	if value, ok := edu.mutation.DeletedDate(); ok {
		_spec.SetField(educationdetails.FieldDeletedDate, field.TypeTime, value)
	}
	if edu.mutation.DeletedDateCleared() {
		_spec.ClearField(educationdetails.FieldDeletedDate, field.TypeTime)
	}
	if edu.mutation.LogDataCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   educationdetails.LogDataTable,
			Columns: []string{educationdetails.LogDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(logs.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := edu.mutation.RemovedLogDataIDs(); len(nodes) > 0 && !edu.mutation.LogDataCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   educationdetails.LogDataTable,
			Columns: []string{educationdetails.LogDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(logs.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := edu.mutation.LogDataIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   educationdetails.LogDataTable,
			Columns: []string{educationdetails.LogDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(logs.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, edu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{educationdetails.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	edu.mutation.done = true
	return n, nil
}

// EducationDetailsUpdateOne is the builder for updating a single EducationDetails entity.
type EducationDetailsUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *EducationDetailsMutation
}

// SetEducationDescription sets the "educationDescription" field.
func (eduo *EducationDetailsUpdateOne) SetEducationDescription(s string) *EducationDetailsUpdateOne {
	eduo.mutation.SetEducationDescription(s)
	return eduo
}

// SetNillableEducationDescription sets the "educationDescription" field if the given value is not nil.
func (eduo *EducationDetailsUpdateOne) SetNillableEducationDescription(s *string) *EducationDetailsUpdateOne {
	if s != nil {
		eduo.SetEducationDescription(*s)
	}
	return eduo
}

// ClearEducationDescription clears the value of the "educationDescription" field.
func (eduo *EducationDetailsUpdateOne) ClearEducationDescription() *EducationDetailsUpdateOne {
	eduo.mutation.ClearEducationDescription()
	return eduo
}

// SetOrderNumber sets the "OrderNumber" field.
func (eduo *EducationDetailsUpdateOne) SetOrderNumber(s string) *EducationDetailsUpdateOne {
	eduo.mutation.SetOrderNumber(s)
	return eduo
}

// SetNillableOrderNumber sets the "OrderNumber" field if the given value is not nil.
func (eduo *EducationDetailsUpdateOne) SetNillableOrderNumber(s *string) *EducationDetailsUpdateOne {
	if s != nil {
		eduo.SetOrderNumber(*s)
	}
	return eduo
}

// ClearOrderNumber clears the value of the "OrderNumber" field.
func (eduo *EducationDetailsUpdateOne) ClearOrderNumber() *EducationDetailsUpdateOne {
	eduo.mutation.ClearOrderNumber()
	return eduo
}

// SetCreatedById sets the "CreatedById" field.
func (eduo *EducationDetailsUpdateOne) SetCreatedById(i int64) *EducationDetailsUpdateOne {
	eduo.mutation.ResetCreatedById()
	eduo.mutation.SetCreatedById(i)
	return eduo
}

// SetNillableCreatedById sets the "CreatedById" field if the given value is not nil.
func (eduo *EducationDetailsUpdateOne) SetNillableCreatedById(i *int64) *EducationDetailsUpdateOne {
	if i != nil {
		eduo.SetCreatedById(*i)
	}
	return eduo
}

// AddCreatedById adds i to the "CreatedById" field.
func (eduo *EducationDetailsUpdateOne) AddCreatedById(i int64) *EducationDetailsUpdateOne {
	eduo.mutation.AddCreatedById(i)
	return eduo
}

// ClearCreatedById clears the value of the "CreatedById" field.
func (eduo *EducationDetailsUpdateOne) ClearCreatedById() *EducationDetailsUpdateOne {
	eduo.mutation.ClearCreatedById()
	return eduo
}

// SetCreatedByUserName sets the "CreatedByUserName" field.
func (eduo *EducationDetailsUpdateOne) SetCreatedByUserName(s string) *EducationDetailsUpdateOne {
	eduo.mutation.SetCreatedByUserName(s)
	return eduo
}

// SetNillableCreatedByUserName sets the "CreatedByUserName" field if the given value is not nil.
func (eduo *EducationDetailsUpdateOne) SetNillableCreatedByUserName(s *string) *EducationDetailsUpdateOne {
	if s != nil {
		eduo.SetCreatedByUserName(*s)
	}
	return eduo
}

// ClearCreatedByUserName clears the value of the "CreatedByUserName" field.
func (eduo *EducationDetailsUpdateOne) ClearCreatedByUserName() *EducationDetailsUpdateOne {
	eduo.mutation.ClearCreatedByUserName()
	return eduo
}

// SetCreatedByEmployeeId sets the "CreatedByEmployeeId" field.
func (eduo *EducationDetailsUpdateOne) SetCreatedByEmployeeId(s string) *EducationDetailsUpdateOne {
	eduo.mutation.SetCreatedByEmployeeId(s)
	return eduo
}

// SetNillableCreatedByEmployeeId sets the "CreatedByEmployeeId" field if the given value is not nil.
func (eduo *EducationDetailsUpdateOne) SetNillableCreatedByEmployeeId(s *string) *EducationDetailsUpdateOne {
	if s != nil {
		eduo.SetCreatedByEmployeeId(*s)
	}
	return eduo
}

// ClearCreatedByEmployeeId clears the value of the "CreatedByEmployeeId" field.
func (eduo *EducationDetailsUpdateOne) ClearCreatedByEmployeeId() *EducationDetailsUpdateOne {
	eduo.mutation.ClearCreatedByEmployeeId()
	return eduo
}

// SetCreatedByDesignation sets the "CreatedByDesignation" field.
func (eduo *EducationDetailsUpdateOne) SetCreatedByDesignation(s string) *EducationDetailsUpdateOne {
	eduo.mutation.SetCreatedByDesignation(s)
	return eduo
}

// SetNillableCreatedByDesignation sets the "CreatedByDesignation" field if the given value is not nil.
func (eduo *EducationDetailsUpdateOne) SetNillableCreatedByDesignation(s *string) *EducationDetailsUpdateOne {
	if s != nil {
		eduo.SetCreatedByDesignation(*s)
	}
	return eduo
}

// ClearCreatedByDesignation clears the value of the "CreatedByDesignation" field.
func (eduo *EducationDetailsUpdateOne) ClearCreatedByDesignation() *EducationDetailsUpdateOne {
	eduo.mutation.ClearCreatedByDesignation()
	return eduo
}

// SetCreatedDate sets the "CreatedDate" field.
func (eduo *EducationDetailsUpdateOne) SetCreatedDate(t time.Time) *EducationDetailsUpdateOne {
	eduo.mutation.SetCreatedDate(t)
	return eduo
}

// SetNillableCreatedDate sets the "CreatedDate" field if the given value is not nil.
func (eduo *EducationDetailsUpdateOne) SetNillableCreatedDate(t *time.Time) *EducationDetailsUpdateOne {
	if t != nil {
		eduo.SetCreatedDate(*t)
	}
	return eduo
}

// ClearCreatedDate clears the value of the "CreatedDate" field.
func (eduo *EducationDetailsUpdateOne) ClearCreatedDate() *EducationDetailsUpdateOne {
	eduo.mutation.ClearCreatedDate()
	return eduo
}

// SetVerifiedById sets the "VerifiedById" field.
func (eduo *EducationDetailsUpdateOne) SetVerifiedById(i int64) *EducationDetailsUpdateOne {
	eduo.mutation.ResetVerifiedById()
	eduo.mutation.SetVerifiedById(i)
	return eduo
}

// SetNillableVerifiedById sets the "VerifiedById" field if the given value is not nil.
func (eduo *EducationDetailsUpdateOne) SetNillableVerifiedById(i *int64) *EducationDetailsUpdateOne {
	if i != nil {
		eduo.SetVerifiedById(*i)
	}
	return eduo
}

// AddVerifiedById adds i to the "VerifiedById" field.
func (eduo *EducationDetailsUpdateOne) AddVerifiedById(i int64) *EducationDetailsUpdateOne {
	eduo.mutation.AddVerifiedById(i)
	return eduo
}

// ClearVerifiedById clears the value of the "VerifiedById" field.
func (eduo *EducationDetailsUpdateOne) ClearVerifiedById() *EducationDetailsUpdateOne {
	eduo.mutation.ClearVerifiedById()
	return eduo
}

// SetVerifiedByUserName sets the "VerifiedByUserName" field.
func (eduo *EducationDetailsUpdateOne) SetVerifiedByUserName(s string) *EducationDetailsUpdateOne {
	eduo.mutation.SetVerifiedByUserName(s)
	return eduo
}

// SetNillableVerifiedByUserName sets the "VerifiedByUserName" field if the given value is not nil.
func (eduo *EducationDetailsUpdateOne) SetNillableVerifiedByUserName(s *string) *EducationDetailsUpdateOne {
	if s != nil {
		eduo.SetVerifiedByUserName(*s)
	}
	return eduo
}

// ClearVerifiedByUserName clears the value of the "VerifiedByUserName" field.
func (eduo *EducationDetailsUpdateOne) ClearVerifiedByUserName() *EducationDetailsUpdateOne {
	eduo.mutation.ClearVerifiedByUserName()
	return eduo
}

// SetVerifiedByEmployeeId sets the "VerifiedByEmployeeId" field.
func (eduo *EducationDetailsUpdateOne) SetVerifiedByEmployeeId(s string) *EducationDetailsUpdateOne {
	eduo.mutation.SetVerifiedByEmployeeId(s)
	return eduo
}

// SetNillableVerifiedByEmployeeId sets the "VerifiedByEmployeeId" field if the given value is not nil.
func (eduo *EducationDetailsUpdateOne) SetNillableVerifiedByEmployeeId(s *string) *EducationDetailsUpdateOne {
	if s != nil {
		eduo.SetVerifiedByEmployeeId(*s)
	}
	return eduo
}

// ClearVerifiedByEmployeeId clears the value of the "VerifiedByEmployeeId" field.
func (eduo *EducationDetailsUpdateOne) ClearVerifiedByEmployeeId() *EducationDetailsUpdateOne {
	eduo.mutation.ClearVerifiedByEmployeeId()
	return eduo
}

// SetVerifiedByDesignation sets the "VerifiedByDesignation" field.
func (eduo *EducationDetailsUpdateOne) SetVerifiedByDesignation(s string) *EducationDetailsUpdateOne {
	eduo.mutation.SetVerifiedByDesignation(s)
	return eduo
}

// SetNillableVerifiedByDesignation sets the "VerifiedByDesignation" field if the given value is not nil.
func (eduo *EducationDetailsUpdateOne) SetNillableVerifiedByDesignation(s *string) *EducationDetailsUpdateOne {
	if s != nil {
		eduo.SetVerifiedByDesignation(*s)
	}
	return eduo
}

// ClearVerifiedByDesignation clears the value of the "VerifiedByDesignation" field.
func (eduo *EducationDetailsUpdateOne) ClearVerifiedByDesignation() *EducationDetailsUpdateOne {
	eduo.mutation.ClearVerifiedByDesignation()
	return eduo
}

// SetVerifiedDate sets the "VerifiedDate" field.
func (eduo *EducationDetailsUpdateOne) SetVerifiedDate(t time.Time) *EducationDetailsUpdateOne {
	eduo.mutation.SetVerifiedDate(t)
	return eduo
}

// SetNillableVerifiedDate sets the "VerifiedDate" field if the given value is not nil.
func (eduo *EducationDetailsUpdateOne) SetNillableVerifiedDate(t *time.Time) *EducationDetailsUpdateOne {
	if t != nil {
		eduo.SetVerifiedDate(*t)
	}
	return eduo
}

// ClearVerifiedDate clears the value of the "VerifiedDate" field.
func (eduo *EducationDetailsUpdateOne) ClearVerifiedDate() *EducationDetailsUpdateOne {
	eduo.mutation.ClearVerifiedDate()
	return eduo
}

// SetStatus sets the "Status" field.
func (eduo *EducationDetailsUpdateOne) SetStatus(s string) *EducationDetailsUpdateOne {
	eduo.mutation.SetStatus(s)
	return eduo
}

// SetDeletedById sets the "DeletedById" field.
func (eduo *EducationDetailsUpdateOne) SetDeletedById(i int64) *EducationDetailsUpdateOne {
	eduo.mutation.ResetDeletedById()
	eduo.mutation.SetDeletedById(i)
	return eduo
}

// SetNillableDeletedById sets the "DeletedById" field if the given value is not nil.
func (eduo *EducationDetailsUpdateOne) SetNillableDeletedById(i *int64) *EducationDetailsUpdateOne {
	if i != nil {
		eduo.SetDeletedById(*i)
	}
	return eduo
}

// AddDeletedById adds i to the "DeletedById" field.
func (eduo *EducationDetailsUpdateOne) AddDeletedById(i int64) *EducationDetailsUpdateOne {
	eduo.mutation.AddDeletedById(i)
	return eduo
}

// ClearDeletedById clears the value of the "DeletedById" field.
func (eduo *EducationDetailsUpdateOne) ClearDeletedById() *EducationDetailsUpdateOne {
	eduo.mutation.ClearDeletedById()
	return eduo
}

// SetDeletedByUserName sets the "DeletedByUserName" field.
func (eduo *EducationDetailsUpdateOne) SetDeletedByUserName(s string) *EducationDetailsUpdateOne {
	eduo.mutation.SetDeletedByUserName(s)
	return eduo
}

// SetNillableDeletedByUserName sets the "DeletedByUserName" field if the given value is not nil.
func (eduo *EducationDetailsUpdateOne) SetNillableDeletedByUserName(s *string) *EducationDetailsUpdateOne {
	if s != nil {
		eduo.SetDeletedByUserName(*s)
	}
	return eduo
}

// ClearDeletedByUserName clears the value of the "DeletedByUserName" field.
func (eduo *EducationDetailsUpdateOne) ClearDeletedByUserName() *EducationDetailsUpdateOne {
	eduo.mutation.ClearDeletedByUserName()
	return eduo
}

// SetDeletedByEmployeeId sets the "DeletedByEmployeeId" field.
func (eduo *EducationDetailsUpdateOne) SetDeletedByEmployeeId(s string) *EducationDetailsUpdateOne {
	eduo.mutation.SetDeletedByEmployeeId(s)
	return eduo
}

// SetNillableDeletedByEmployeeId sets the "DeletedByEmployeeId" field if the given value is not nil.
func (eduo *EducationDetailsUpdateOne) SetNillableDeletedByEmployeeId(s *string) *EducationDetailsUpdateOne {
	if s != nil {
		eduo.SetDeletedByEmployeeId(*s)
	}
	return eduo
}

// ClearDeletedByEmployeeId clears the value of the "DeletedByEmployeeId" field.
func (eduo *EducationDetailsUpdateOne) ClearDeletedByEmployeeId() *EducationDetailsUpdateOne {
	eduo.mutation.ClearDeletedByEmployeeId()
	return eduo
}

// SetDeletedByDesignation sets the "DeletedByDesignation" field.
func (eduo *EducationDetailsUpdateOne) SetDeletedByDesignation(s string) *EducationDetailsUpdateOne {
	eduo.mutation.SetDeletedByDesignation(s)
	return eduo
}

// SetNillableDeletedByDesignation sets the "DeletedByDesignation" field if the given value is not nil.
func (eduo *EducationDetailsUpdateOne) SetNillableDeletedByDesignation(s *string) *EducationDetailsUpdateOne {
	if s != nil {
		eduo.SetDeletedByDesignation(*s)
	}
	return eduo
}

// ClearDeletedByDesignation clears the value of the "DeletedByDesignation" field.
func (eduo *EducationDetailsUpdateOne) ClearDeletedByDesignation() *EducationDetailsUpdateOne {
	eduo.mutation.ClearDeletedByDesignation()
	return eduo
}

// SetDeletedDate sets the "DeletedDate" field.
func (eduo *EducationDetailsUpdateOne) SetDeletedDate(t time.Time) *EducationDetailsUpdateOne {
	eduo.mutation.SetDeletedDate(t)
	return eduo
}

// SetNillableDeletedDate sets the "DeletedDate" field if the given value is not nil.
func (eduo *EducationDetailsUpdateOne) SetNillableDeletedDate(t *time.Time) *EducationDetailsUpdateOne {
	if t != nil {
		eduo.SetDeletedDate(*t)
	}
	return eduo
}

// ClearDeletedDate clears the value of the "DeletedDate" field.
func (eduo *EducationDetailsUpdateOne) ClearDeletedDate() *EducationDetailsUpdateOne {
	eduo.mutation.ClearDeletedDate()
	return eduo
}

// AddLogDatumIDs adds the "LogData" edge to the Logs entity by IDs.
func (eduo *EducationDetailsUpdateOne) AddLogDatumIDs(ids ...int64) *EducationDetailsUpdateOne {
	eduo.mutation.AddLogDatumIDs(ids...)
	return eduo
}

// AddLogData adds the "LogData" edges to the Logs entity.
func (eduo *EducationDetailsUpdateOne) AddLogData(l ...*Logs) *EducationDetailsUpdateOne {
	ids := make([]int64, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return eduo.AddLogDatumIDs(ids...)
}

// Mutation returns the EducationDetailsMutation object of the builder.
func (eduo *EducationDetailsUpdateOne) Mutation() *EducationDetailsMutation {
	return eduo.mutation
}

// ClearLogData clears all "LogData" edges to the Logs entity.
func (eduo *EducationDetailsUpdateOne) ClearLogData() *EducationDetailsUpdateOne {
	eduo.mutation.ClearLogData()
	return eduo
}

// RemoveLogDatumIDs removes the "LogData" edge to Logs entities by IDs.
func (eduo *EducationDetailsUpdateOne) RemoveLogDatumIDs(ids ...int64) *EducationDetailsUpdateOne {
	eduo.mutation.RemoveLogDatumIDs(ids...)
	return eduo
}

// RemoveLogData removes "LogData" edges to Logs entities.
func (eduo *EducationDetailsUpdateOne) RemoveLogData(l ...*Logs) *EducationDetailsUpdateOne {
	ids := make([]int64, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return eduo.RemoveLogDatumIDs(ids...)
}

// Where appends a list predicates to the EducationDetailsUpdate builder.
func (eduo *EducationDetailsUpdateOne) Where(ps ...predicate.EducationDetails) *EducationDetailsUpdateOne {
	eduo.mutation.Where(ps...)
	return eduo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (eduo *EducationDetailsUpdateOne) Select(field string, fields ...string) *EducationDetailsUpdateOne {
	eduo.fields = append([]string{field}, fields...)
	return eduo
}

// Save executes the query and returns the updated EducationDetails entity.
func (eduo *EducationDetailsUpdateOne) Save(ctx context.Context) (*EducationDetails, error) {
	return withHooks(ctx, eduo.sqlSave, eduo.mutation, eduo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (eduo *EducationDetailsUpdateOne) SaveX(ctx context.Context) *EducationDetails {
	node, err := eduo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (eduo *EducationDetailsUpdateOne) Exec(ctx context.Context) error {
	_, err := eduo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eduo *EducationDetailsUpdateOne) ExecX(ctx context.Context) {
	if err := eduo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (eduo *EducationDetailsUpdateOne) sqlSave(ctx context.Context) (_node *EducationDetails, err error) {
	_spec := sqlgraph.NewUpdateSpec(educationdetails.Table, educationdetails.Columns, sqlgraph.NewFieldSpec(educationdetails.FieldID, field.TypeInt64))
	id, ok := eduo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "EducationDetails.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := eduo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, educationdetails.FieldID)
		for _, f := range fields {
			if !educationdetails.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != educationdetails.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := eduo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eduo.mutation.EducationDescription(); ok {
		_spec.SetField(educationdetails.FieldEducationDescription, field.TypeString, value)
	}
	if eduo.mutation.EducationDescriptionCleared() {
		_spec.ClearField(educationdetails.FieldEducationDescription, field.TypeString)
	}
	if value, ok := eduo.mutation.OrderNumber(); ok {
		_spec.SetField(educationdetails.FieldOrderNumber, field.TypeString, value)
	}
	if eduo.mutation.OrderNumberCleared() {
		_spec.ClearField(educationdetails.FieldOrderNumber, field.TypeString)
	}
	if value, ok := eduo.mutation.CreatedById(); ok {
		_spec.SetField(educationdetails.FieldCreatedById, field.TypeInt64, value)
	}
	if value, ok := eduo.mutation.AddedCreatedById(); ok {
		_spec.AddField(educationdetails.FieldCreatedById, field.TypeInt64, value)
	}
	if eduo.mutation.CreatedByIdCleared() {
		_spec.ClearField(educationdetails.FieldCreatedById, field.TypeInt64)
	}
	if value, ok := eduo.mutation.CreatedByUserName(); ok {
		_spec.SetField(educationdetails.FieldCreatedByUserName, field.TypeString, value)
	}
	if eduo.mutation.CreatedByUserNameCleared() {
		_spec.ClearField(educationdetails.FieldCreatedByUserName, field.TypeString)
	}
	if value, ok := eduo.mutation.CreatedByEmployeeId(); ok {
		_spec.SetField(educationdetails.FieldCreatedByEmployeeId, field.TypeString, value)
	}
	if eduo.mutation.CreatedByEmployeeIdCleared() {
		_spec.ClearField(educationdetails.FieldCreatedByEmployeeId, field.TypeString)
	}
	if value, ok := eduo.mutation.CreatedByDesignation(); ok {
		_spec.SetField(educationdetails.FieldCreatedByDesignation, field.TypeString, value)
	}
	if eduo.mutation.CreatedByDesignationCleared() {
		_spec.ClearField(educationdetails.FieldCreatedByDesignation, field.TypeString)
	}
	if value, ok := eduo.mutation.CreatedDate(); ok {
		_spec.SetField(educationdetails.FieldCreatedDate, field.TypeTime, value)
	}
	if eduo.mutation.CreatedDateCleared() {
		_spec.ClearField(educationdetails.FieldCreatedDate, field.TypeTime)
	}
	if value, ok := eduo.mutation.VerifiedById(); ok {
		_spec.SetField(educationdetails.FieldVerifiedById, field.TypeInt64, value)
	}
	if value, ok := eduo.mutation.AddedVerifiedById(); ok {
		_spec.AddField(educationdetails.FieldVerifiedById, field.TypeInt64, value)
	}
	if eduo.mutation.VerifiedByIdCleared() {
		_spec.ClearField(educationdetails.FieldVerifiedById, field.TypeInt64)
	}
	if value, ok := eduo.mutation.VerifiedByUserName(); ok {
		_spec.SetField(educationdetails.FieldVerifiedByUserName, field.TypeString, value)
	}
	if eduo.mutation.VerifiedByUserNameCleared() {
		_spec.ClearField(educationdetails.FieldVerifiedByUserName, field.TypeString)
	}
	if value, ok := eduo.mutation.VerifiedByEmployeeId(); ok {
		_spec.SetField(educationdetails.FieldVerifiedByEmployeeId, field.TypeString, value)
	}
	if eduo.mutation.VerifiedByEmployeeIdCleared() {
		_spec.ClearField(educationdetails.FieldVerifiedByEmployeeId, field.TypeString)
	}
	if value, ok := eduo.mutation.VerifiedByDesignation(); ok {
		_spec.SetField(educationdetails.FieldVerifiedByDesignation, field.TypeString, value)
	}
	if eduo.mutation.VerifiedByDesignationCleared() {
		_spec.ClearField(educationdetails.FieldVerifiedByDesignation, field.TypeString)
	}
	if value, ok := eduo.mutation.VerifiedDate(); ok {
		_spec.SetField(educationdetails.FieldVerifiedDate, field.TypeTime, value)
	}
	if eduo.mutation.VerifiedDateCleared() {
		_spec.ClearField(educationdetails.FieldVerifiedDate, field.TypeTime)
	}
	if value, ok := eduo.mutation.Status(); ok {
		_spec.SetField(educationdetails.FieldStatus, field.TypeString, value)
	}
	if value, ok := eduo.mutation.DeletedById(); ok {
		_spec.SetField(educationdetails.FieldDeletedById, field.TypeInt64, value)
	}
	if value, ok := eduo.mutation.AddedDeletedById(); ok {
		_spec.AddField(educationdetails.FieldDeletedById, field.TypeInt64, value)
	}
	if eduo.mutation.DeletedByIdCleared() {
		_spec.ClearField(educationdetails.FieldDeletedById, field.TypeInt64)
	}
	if value, ok := eduo.mutation.DeletedByUserName(); ok {
		_spec.SetField(educationdetails.FieldDeletedByUserName, field.TypeString, value)
	}
	if eduo.mutation.DeletedByUserNameCleared() {
		_spec.ClearField(educationdetails.FieldDeletedByUserName, field.TypeString)
	}
	if value, ok := eduo.mutation.DeletedByEmployeeId(); ok {
		_spec.SetField(educationdetails.FieldDeletedByEmployeeId, field.TypeString, value)
	}
	if eduo.mutation.DeletedByEmployeeIdCleared() {
		_spec.ClearField(educationdetails.FieldDeletedByEmployeeId, field.TypeString)
	}
	if value, ok := eduo.mutation.DeletedByDesignation(); ok {
		_spec.SetField(educationdetails.FieldDeletedByDesignation, field.TypeString, value)
	}
	if eduo.mutation.DeletedByDesignationCleared() {
		_spec.ClearField(educationdetails.FieldDeletedByDesignation, field.TypeString)
	}
	if value, ok := eduo.mutation.DeletedDate(); ok {
		_spec.SetField(educationdetails.FieldDeletedDate, field.TypeTime, value)
	}
	if eduo.mutation.DeletedDateCleared() {
		_spec.ClearField(educationdetails.FieldDeletedDate, field.TypeTime)
	}
	if eduo.mutation.LogDataCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   educationdetails.LogDataTable,
			Columns: []string{educationdetails.LogDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(logs.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eduo.mutation.RemovedLogDataIDs(); len(nodes) > 0 && !eduo.mutation.LogDataCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   educationdetails.LogDataTable,
			Columns: []string{educationdetails.LogDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(logs.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eduo.mutation.LogDataIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   educationdetails.LogDataTable,
			Columns: []string{educationdetails.LogDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(logs.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &EducationDetails{config: eduo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, eduo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{educationdetails.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	eduo.mutation.done = true
	return _node, nil
}
