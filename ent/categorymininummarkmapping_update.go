// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"recruit/ent/categorymininummarkmapping"
	"recruit/ent/logs"
	"recruit/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CategoryMininumMarkMappingUpdate is the builder for updating CategoryMininumMarkMapping entities.
type CategoryMininumMarkMappingUpdate struct {
	config
	hooks    []Hook
	mutation *CategoryMininumMarkMappingMutation
}

// Where appends a list predicates to the CategoryMininumMarkMappingUpdate builder.
func (cmmmu *CategoryMininumMarkMappingUpdate) Where(ps ...predicate.CategoryMininumMarkMapping) *CategoryMininumMarkMappingUpdate {
	cmmmu.mutation.Where(ps...)
	return cmmmu
}

// SetExamCode sets the "ExamCode" field.
func (cmmmu *CategoryMininumMarkMappingUpdate) SetExamCode(i int64) *CategoryMininumMarkMappingUpdate {
	cmmmu.mutation.ResetExamCode()
	cmmmu.mutation.SetExamCode(i)
	return cmmmu
}

// SetNillableExamCode sets the "ExamCode" field if the given value is not nil.
func (cmmmu *CategoryMininumMarkMappingUpdate) SetNillableExamCode(i *int64) *CategoryMininumMarkMappingUpdate {
	if i != nil {
		cmmmu.SetExamCode(*i)
	}
	return cmmmu
}

// AddExamCode adds i to the "ExamCode" field.
func (cmmmu *CategoryMininumMarkMappingUpdate) AddExamCode(i int64) *CategoryMininumMarkMappingUpdate {
	cmmmu.mutation.AddExamCode(i)
	return cmmmu
}

// ClearExamCode clears the value of the "ExamCode" field.
func (cmmmu *CategoryMininumMarkMappingUpdate) ClearExamCode() *CategoryMininumMarkMappingUpdate {
	cmmmu.mutation.ClearExamCode()
	return cmmmu
}

// SetExamName sets the "ExamName" field.
func (cmmmu *CategoryMininumMarkMappingUpdate) SetExamName(s string) *CategoryMininumMarkMappingUpdate {
	cmmmu.mutation.SetExamName(s)
	return cmmmu
}

// SetNillableExamName sets the "ExamName" field if the given value is not nil.
func (cmmmu *CategoryMininumMarkMappingUpdate) SetNillableExamName(s *string) *CategoryMininumMarkMappingUpdate {
	if s != nil {
		cmmmu.SetExamName(*s)
	}
	return cmmmu
}

// ClearExamName clears the value of the "ExamName" field.
func (cmmmu *CategoryMininumMarkMappingUpdate) ClearExamName() *CategoryMininumMarkMappingUpdate {
	cmmmu.mutation.ClearExamName()
	return cmmmu
}

// SetExamShortName sets the "ExamShortName" field.
func (cmmmu *CategoryMininumMarkMappingUpdate) SetExamShortName(s string) *CategoryMininumMarkMappingUpdate {
	cmmmu.mutation.SetExamShortName(s)
	return cmmmu
}

// SetNillableExamShortName sets the "ExamShortName" field if the given value is not nil.
func (cmmmu *CategoryMininumMarkMappingUpdate) SetNillableExamShortName(s *string) *CategoryMininumMarkMappingUpdate {
	if s != nil {
		cmmmu.SetExamShortName(*s)
	}
	return cmmmu
}

// ClearExamShortName clears the value of the "ExamShortName" field.
func (cmmmu *CategoryMininumMarkMappingUpdate) ClearExamShortName() *CategoryMininumMarkMappingUpdate {
	cmmmu.mutation.ClearExamShortName()
	return cmmmu
}

// SetPaperCode sets the "PaperCode" field.
func (cmmmu *CategoryMininumMarkMappingUpdate) SetPaperCode(i int64) *CategoryMininumMarkMappingUpdate {
	cmmmu.mutation.ResetPaperCode()
	cmmmu.mutation.SetPaperCode(i)
	return cmmmu
}

// SetNillablePaperCode sets the "PaperCode" field if the given value is not nil.
func (cmmmu *CategoryMininumMarkMappingUpdate) SetNillablePaperCode(i *int64) *CategoryMininumMarkMappingUpdate {
	if i != nil {
		cmmmu.SetPaperCode(*i)
	}
	return cmmmu
}

// AddPaperCode adds i to the "PaperCode" field.
func (cmmmu *CategoryMininumMarkMappingUpdate) AddPaperCode(i int64) *CategoryMininumMarkMappingUpdate {
	cmmmu.mutation.AddPaperCode(i)
	return cmmmu
}

// ClearPaperCode clears the value of the "PaperCode" field.
func (cmmmu *CategoryMininumMarkMappingUpdate) ClearPaperCode() *CategoryMininumMarkMappingUpdate {
	cmmmu.mutation.ClearPaperCode()
	return cmmmu
}

// SetPaperDescription sets the "PaperDescription" field.
func (cmmmu *CategoryMininumMarkMappingUpdate) SetPaperDescription(s string) *CategoryMininumMarkMappingUpdate {
	cmmmu.mutation.SetPaperDescription(s)
	return cmmmu
}

// SetNillablePaperDescription sets the "PaperDescription" field if the given value is not nil.
func (cmmmu *CategoryMininumMarkMappingUpdate) SetNillablePaperDescription(s *string) *CategoryMininumMarkMappingUpdate {
	if s != nil {
		cmmmu.SetPaperDescription(*s)
	}
	return cmmmu
}

// ClearPaperDescription clears the value of the "PaperDescription" field.
func (cmmmu *CategoryMininumMarkMappingUpdate) ClearPaperDescription() *CategoryMininumMarkMappingUpdate {
	cmmmu.mutation.ClearPaperDescription()
	return cmmmu
}

// SetDisabilityTypeID sets the "DisabilityTypeID" field.
func (cmmmu *CategoryMininumMarkMappingUpdate) SetDisabilityTypeID(i int64) *CategoryMininumMarkMappingUpdate {
	cmmmu.mutation.ResetDisabilityTypeID()
	cmmmu.mutation.SetDisabilityTypeID(i)
	return cmmmu
}

// SetNillableDisabilityTypeID sets the "DisabilityTypeID" field if the given value is not nil.
func (cmmmu *CategoryMininumMarkMappingUpdate) SetNillableDisabilityTypeID(i *int64) *CategoryMininumMarkMappingUpdate {
	if i != nil {
		cmmmu.SetDisabilityTypeID(*i)
	}
	return cmmmu
}

// AddDisabilityTypeID adds i to the "DisabilityTypeID" field.
func (cmmmu *CategoryMininumMarkMappingUpdate) AddDisabilityTypeID(i int64) *CategoryMininumMarkMappingUpdate {
	cmmmu.mutation.AddDisabilityTypeID(i)
	return cmmmu
}

// ClearDisabilityTypeID clears the value of the "DisabilityTypeID" field.
func (cmmmu *CategoryMininumMarkMappingUpdate) ClearDisabilityTypeID() *CategoryMininumMarkMappingUpdate {
	cmmmu.mutation.ClearDisabilityTypeID()
	return cmmmu
}

// SetDisabilityTypeCode sets the "DisabilityTypeCode" field.
func (cmmmu *CategoryMininumMarkMappingUpdate) SetDisabilityTypeCode(s string) *CategoryMininumMarkMappingUpdate {
	cmmmu.mutation.SetDisabilityTypeCode(s)
	return cmmmu
}

// SetNillableDisabilityTypeCode sets the "DisabilityTypeCode" field if the given value is not nil.
func (cmmmu *CategoryMininumMarkMappingUpdate) SetNillableDisabilityTypeCode(s *string) *CategoryMininumMarkMappingUpdate {
	if s != nil {
		cmmmu.SetDisabilityTypeCode(*s)
	}
	return cmmmu
}

// ClearDisabilityTypeCode clears the value of the "DisabilityTypeCode" field.
func (cmmmu *CategoryMininumMarkMappingUpdate) ClearDisabilityTypeCode() *CategoryMininumMarkMappingUpdate {
	cmmmu.mutation.ClearDisabilityTypeCode()
	return cmmmu
}

// SetDisabilityTypeDescription sets the "DisabilityTypeDescription" field.
func (cmmmu *CategoryMininumMarkMappingUpdate) SetDisabilityTypeDescription(s string) *CategoryMininumMarkMappingUpdate {
	cmmmu.mutation.SetDisabilityTypeDescription(s)
	return cmmmu
}

// SetNillableDisabilityTypeDescription sets the "DisabilityTypeDescription" field if the given value is not nil.
func (cmmmu *CategoryMininumMarkMappingUpdate) SetNillableDisabilityTypeDescription(s *string) *CategoryMininumMarkMappingUpdate {
	if s != nil {
		cmmmu.SetDisabilityTypeDescription(*s)
	}
	return cmmmu
}

// ClearDisabilityTypeDescription clears the value of the "DisabilityTypeDescription" field.
func (cmmmu *CategoryMininumMarkMappingUpdate) ClearDisabilityTypeDescription() *CategoryMininumMarkMappingUpdate {
	cmmmu.mutation.ClearDisabilityTypeDescription()
	return cmmmu
}

// SetMinimumMarks sets the "minimumMarks" field.
func (cmmmu *CategoryMininumMarkMappingUpdate) SetMinimumMarks(i int64) *CategoryMininumMarkMappingUpdate {
	cmmmu.mutation.ResetMinimumMarks()
	cmmmu.mutation.SetMinimumMarks(i)
	return cmmmu
}

// SetNillableMinimumMarks sets the "minimumMarks" field if the given value is not nil.
func (cmmmu *CategoryMininumMarkMappingUpdate) SetNillableMinimumMarks(i *int64) *CategoryMininumMarkMappingUpdate {
	if i != nil {
		cmmmu.SetMinimumMarks(*i)
	}
	return cmmmu
}

// AddMinimumMarks adds i to the "minimumMarks" field.
func (cmmmu *CategoryMininumMarkMappingUpdate) AddMinimumMarks(i int64) *CategoryMininumMarkMappingUpdate {
	cmmmu.mutation.AddMinimumMarks(i)
	return cmmmu
}

// ClearMinimumMarks clears the value of the "minimumMarks" field.
func (cmmmu *CategoryMininumMarkMappingUpdate) ClearMinimumMarks() *CategoryMininumMarkMappingUpdate {
	cmmmu.mutation.ClearMinimumMarks()
	return cmmmu
}

// SetOrderNumber sets the "OrderNumber" field.
func (cmmmu *CategoryMininumMarkMappingUpdate) SetOrderNumber(s string) *CategoryMininumMarkMappingUpdate {
	cmmmu.mutation.SetOrderNumber(s)
	return cmmmu
}

// SetNillableOrderNumber sets the "OrderNumber" field if the given value is not nil.
func (cmmmu *CategoryMininumMarkMappingUpdate) SetNillableOrderNumber(s *string) *CategoryMininumMarkMappingUpdate {
	if s != nil {
		cmmmu.SetOrderNumber(*s)
	}
	return cmmmu
}

// ClearOrderNumber clears the value of the "OrderNumber" field.
func (cmmmu *CategoryMininumMarkMappingUpdate) ClearOrderNumber() *CategoryMininumMarkMappingUpdate {
	cmmmu.mutation.ClearOrderNumber()
	return cmmmu
}

// SetCreatedById sets the "CreatedById" field.
func (cmmmu *CategoryMininumMarkMappingUpdate) SetCreatedById(i int64) *CategoryMininumMarkMappingUpdate {
	cmmmu.mutation.ResetCreatedById()
	cmmmu.mutation.SetCreatedById(i)
	return cmmmu
}

// SetNillableCreatedById sets the "CreatedById" field if the given value is not nil.
func (cmmmu *CategoryMininumMarkMappingUpdate) SetNillableCreatedById(i *int64) *CategoryMininumMarkMappingUpdate {
	if i != nil {
		cmmmu.SetCreatedById(*i)
	}
	return cmmmu
}

// AddCreatedById adds i to the "CreatedById" field.
func (cmmmu *CategoryMininumMarkMappingUpdate) AddCreatedById(i int64) *CategoryMininumMarkMappingUpdate {
	cmmmu.mutation.AddCreatedById(i)
	return cmmmu
}

// ClearCreatedById clears the value of the "CreatedById" field.
func (cmmmu *CategoryMininumMarkMappingUpdate) ClearCreatedById() *CategoryMininumMarkMappingUpdate {
	cmmmu.mutation.ClearCreatedById()
	return cmmmu
}

// SetCreatedByUserName sets the "CreatedByUserName" field.
func (cmmmu *CategoryMininumMarkMappingUpdate) SetCreatedByUserName(s string) *CategoryMininumMarkMappingUpdate {
	cmmmu.mutation.SetCreatedByUserName(s)
	return cmmmu
}

// SetNillableCreatedByUserName sets the "CreatedByUserName" field if the given value is not nil.
func (cmmmu *CategoryMininumMarkMappingUpdate) SetNillableCreatedByUserName(s *string) *CategoryMininumMarkMappingUpdate {
	if s != nil {
		cmmmu.SetCreatedByUserName(*s)
	}
	return cmmmu
}

// ClearCreatedByUserName clears the value of the "CreatedByUserName" field.
func (cmmmu *CategoryMininumMarkMappingUpdate) ClearCreatedByUserName() *CategoryMininumMarkMappingUpdate {
	cmmmu.mutation.ClearCreatedByUserName()
	return cmmmu
}

// SetCreatedByEmpId sets the "CreatedByEmpId" field.
func (cmmmu *CategoryMininumMarkMappingUpdate) SetCreatedByEmpId(i int64) *CategoryMininumMarkMappingUpdate {
	cmmmu.mutation.ResetCreatedByEmpId()
	cmmmu.mutation.SetCreatedByEmpId(i)
	return cmmmu
}

// SetNillableCreatedByEmpId sets the "CreatedByEmpId" field if the given value is not nil.
func (cmmmu *CategoryMininumMarkMappingUpdate) SetNillableCreatedByEmpId(i *int64) *CategoryMininumMarkMappingUpdate {
	if i != nil {
		cmmmu.SetCreatedByEmpId(*i)
	}
	return cmmmu
}

// AddCreatedByEmpId adds i to the "CreatedByEmpId" field.
func (cmmmu *CategoryMininumMarkMappingUpdate) AddCreatedByEmpId(i int64) *CategoryMininumMarkMappingUpdate {
	cmmmu.mutation.AddCreatedByEmpId(i)
	return cmmmu
}

// ClearCreatedByEmpId clears the value of the "CreatedByEmpId" field.
func (cmmmu *CategoryMininumMarkMappingUpdate) ClearCreatedByEmpId() *CategoryMininumMarkMappingUpdate {
	cmmmu.mutation.ClearCreatedByEmpId()
	return cmmmu
}

// SetCreatedByDesignation sets the "CreatedByDesignation" field.
func (cmmmu *CategoryMininumMarkMappingUpdate) SetCreatedByDesignation(s string) *CategoryMininumMarkMappingUpdate {
	cmmmu.mutation.SetCreatedByDesignation(s)
	return cmmmu
}

// SetNillableCreatedByDesignation sets the "CreatedByDesignation" field if the given value is not nil.
func (cmmmu *CategoryMininumMarkMappingUpdate) SetNillableCreatedByDesignation(s *string) *CategoryMininumMarkMappingUpdate {
	if s != nil {
		cmmmu.SetCreatedByDesignation(*s)
	}
	return cmmmu
}

// ClearCreatedByDesignation clears the value of the "CreatedByDesignation" field.
func (cmmmu *CategoryMininumMarkMappingUpdate) ClearCreatedByDesignation() *CategoryMininumMarkMappingUpdate {
	cmmmu.mutation.ClearCreatedByDesignation()
	return cmmmu
}

// SetCreatedDate sets the "CreatedDate" field.
func (cmmmu *CategoryMininumMarkMappingUpdate) SetCreatedDate(t time.Time) *CategoryMininumMarkMappingUpdate {
	cmmmu.mutation.SetCreatedDate(t)
	return cmmmu
}

// SetNillableCreatedDate sets the "CreatedDate" field if the given value is not nil.
func (cmmmu *CategoryMininumMarkMappingUpdate) SetNillableCreatedDate(t *time.Time) *CategoryMininumMarkMappingUpdate {
	if t != nil {
		cmmmu.SetCreatedDate(*t)
	}
	return cmmmu
}

// ClearCreatedDate clears the value of the "CreatedDate" field.
func (cmmmu *CategoryMininumMarkMappingUpdate) ClearCreatedDate() *CategoryMininumMarkMappingUpdate {
	cmmmu.mutation.ClearCreatedDate()
	return cmmmu
}

// SetVerifiedbyid sets the "verifiedbyid" field.
func (cmmmu *CategoryMininumMarkMappingUpdate) SetVerifiedbyid(i int64) *CategoryMininumMarkMappingUpdate {
	cmmmu.mutation.ResetVerifiedbyid()
	cmmmu.mutation.SetVerifiedbyid(i)
	return cmmmu
}

// SetNillableVerifiedbyid sets the "verifiedbyid" field if the given value is not nil.
func (cmmmu *CategoryMininumMarkMappingUpdate) SetNillableVerifiedbyid(i *int64) *CategoryMininumMarkMappingUpdate {
	if i != nil {
		cmmmu.SetVerifiedbyid(*i)
	}
	return cmmmu
}

// AddVerifiedbyid adds i to the "verifiedbyid" field.
func (cmmmu *CategoryMininumMarkMappingUpdate) AddVerifiedbyid(i int64) *CategoryMininumMarkMappingUpdate {
	cmmmu.mutation.AddVerifiedbyid(i)
	return cmmmu
}

// ClearVerifiedbyid clears the value of the "verifiedbyid" field.
func (cmmmu *CategoryMininumMarkMappingUpdate) ClearVerifiedbyid() *CategoryMininumMarkMappingUpdate {
	cmmmu.mutation.ClearVerifiedbyid()
	return cmmmu
}

// SetVerifiedbyusername sets the "verifiedbyusername" field.
func (cmmmu *CategoryMininumMarkMappingUpdate) SetVerifiedbyusername(s string) *CategoryMininumMarkMappingUpdate {
	cmmmu.mutation.SetVerifiedbyusername(s)
	return cmmmu
}

// SetNillableVerifiedbyusername sets the "verifiedbyusername" field if the given value is not nil.
func (cmmmu *CategoryMininumMarkMappingUpdate) SetNillableVerifiedbyusername(s *string) *CategoryMininumMarkMappingUpdate {
	if s != nil {
		cmmmu.SetVerifiedbyusername(*s)
	}
	return cmmmu
}

// ClearVerifiedbyusername clears the value of the "verifiedbyusername" field.
func (cmmmu *CategoryMininumMarkMappingUpdate) ClearVerifiedbyusername() *CategoryMininumMarkMappingUpdate {
	cmmmu.mutation.ClearVerifiedbyusername()
	return cmmmu
}

// SetVerifiedbyEmployeeid sets the "verifiedbyEmployeeid" field.
func (cmmmu *CategoryMininumMarkMappingUpdate) SetVerifiedbyEmployeeid(i int64) *CategoryMininumMarkMappingUpdate {
	cmmmu.mutation.ResetVerifiedbyEmployeeid()
	cmmmu.mutation.SetVerifiedbyEmployeeid(i)
	return cmmmu
}

// SetNillableVerifiedbyEmployeeid sets the "verifiedbyEmployeeid" field if the given value is not nil.
func (cmmmu *CategoryMininumMarkMappingUpdate) SetNillableVerifiedbyEmployeeid(i *int64) *CategoryMininumMarkMappingUpdate {
	if i != nil {
		cmmmu.SetVerifiedbyEmployeeid(*i)
	}
	return cmmmu
}

// AddVerifiedbyEmployeeid adds i to the "verifiedbyEmployeeid" field.
func (cmmmu *CategoryMininumMarkMappingUpdate) AddVerifiedbyEmployeeid(i int64) *CategoryMininumMarkMappingUpdate {
	cmmmu.mutation.AddVerifiedbyEmployeeid(i)
	return cmmmu
}

// ClearVerifiedbyEmployeeid clears the value of the "verifiedbyEmployeeid" field.
func (cmmmu *CategoryMininumMarkMappingUpdate) ClearVerifiedbyEmployeeid() *CategoryMininumMarkMappingUpdate {
	cmmmu.mutation.ClearVerifiedbyEmployeeid()
	return cmmmu
}

// SetVerifiedbyDesignation sets the "verifiedbyDesignation" field.
func (cmmmu *CategoryMininumMarkMappingUpdate) SetVerifiedbyDesignation(s string) *CategoryMininumMarkMappingUpdate {
	cmmmu.mutation.SetVerifiedbyDesignation(s)
	return cmmmu
}

// SetNillableVerifiedbyDesignation sets the "verifiedbyDesignation" field if the given value is not nil.
func (cmmmu *CategoryMininumMarkMappingUpdate) SetNillableVerifiedbyDesignation(s *string) *CategoryMininumMarkMappingUpdate {
	if s != nil {
		cmmmu.SetVerifiedbyDesignation(*s)
	}
	return cmmmu
}

// ClearVerifiedbyDesignation clears the value of the "verifiedbyDesignation" field.
func (cmmmu *CategoryMininumMarkMappingUpdate) ClearVerifiedbyDesignation() *CategoryMininumMarkMappingUpdate {
	cmmmu.mutation.ClearVerifiedbyDesignation()
	return cmmmu
}

// SetVerifiedDate sets the "verifiedDate" field.
func (cmmmu *CategoryMininumMarkMappingUpdate) SetVerifiedDate(t time.Time) *CategoryMininumMarkMappingUpdate {
	cmmmu.mutation.SetVerifiedDate(t)
	return cmmmu
}

// SetNillableVerifiedDate sets the "verifiedDate" field if the given value is not nil.
func (cmmmu *CategoryMininumMarkMappingUpdate) SetNillableVerifiedDate(t *time.Time) *CategoryMininumMarkMappingUpdate {
	if t != nil {
		cmmmu.SetVerifiedDate(*t)
	}
	return cmmmu
}

// ClearVerifiedDate clears the value of the "verifiedDate" field.
func (cmmmu *CategoryMininumMarkMappingUpdate) ClearVerifiedDate() *CategoryMininumMarkMappingUpdate {
	cmmmu.mutation.ClearVerifiedDate()
	return cmmmu
}

// SetStatuss sets the "Statuss" field.
func (cmmmu *CategoryMininumMarkMappingUpdate) SetStatuss(s string) *CategoryMininumMarkMappingUpdate {
	cmmmu.mutation.SetStatuss(s)
	return cmmmu
}

// SetNillableStatuss sets the "Statuss" field if the given value is not nil.
func (cmmmu *CategoryMininumMarkMappingUpdate) SetNillableStatuss(s *string) *CategoryMininumMarkMappingUpdate {
	if s != nil {
		cmmmu.SetStatuss(*s)
	}
	return cmmmu
}

// ClearStatuss clears the value of the "Statuss" field.
func (cmmmu *CategoryMininumMarkMappingUpdate) ClearStatuss() *CategoryMininumMarkMappingUpdate {
	cmmmu.mutation.ClearStatuss()
	return cmmmu
}

// SetDeletedbyid sets the "deletedbyid" field.
func (cmmmu *CategoryMininumMarkMappingUpdate) SetDeletedbyid(i int64) *CategoryMininumMarkMappingUpdate {
	cmmmu.mutation.ResetDeletedbyid()
	cmmmu.mutation.SetDeletedbyid(i)
	return cmmmu
}

// SetNillableDeletedbyid sets the "deletedbyid" field if the given value is not nil.
func (cmmmu *CategoryMininumMarkMappingUpdate) SetNillableDeletedbyid(i *int64) *CategoryMininumMarkMappingUpdate {
	if i != nil {
		cmmmu.SetDeletedbyid(*i)
	}
	return cmmmu
}

// AddDeletedbyid adds i to the "deletedbyid" field.
func (cmmmu *CategoryMininumMarkMappingUpdate) AddDeletedbyid(i int64) *CategoryMininumMarkMappingUpdate {
	cmmmu.mutation.AddDeletedbyid(i)
	return cmmmu
}

// ClearDeletedbyid clears the value of the "deletedbyid" field.
func (cmmmu *CategoryMininumMarkMappingUpdate) ClearDeletedbyid() *CategoryMininumMarkMappingUpdate {
	cmmmu.mutation.ClearDeletedbyid()
	return cmmmu
}

// SetDeletedbyusername sets the "deletedbyusername" field.
func (cmmmu *CategoryMininumMarkMappingUpdate) SetDeletedbyusername(s string) *CategoryMininumMarkMappingUpdate {
	cmmmu.mutation.SetDeletedbyusername(s)
	return cmmmu
}

// SetNillableDeletedbyusername sets the "deletedbyusername" field if the given value is not nil.
func (cmmmu *CategoryMininumMarkMappingUpdate) SetNillableDeletedbyusername(s *string) *CategoryMininumMarkMappingUpdate {
	if s != nil {
		cmmmu.SetDeletedbyusername(*s)
	}
	return cmmmu
}

// ClearDeletedbyusername clears the value of the "deletedbyusername" field.
func (cmmmu *CategoryMininumMarkMappingUpdate) ClearDeletedbyusername() *CategoryMininumMarkMappingUpdate {
	cmmmu.mutation.ClearDeletedbyusername()
	return cmmmu
}

// SetDeletedbyEmployeeid sets the "deletedbyEmployeeid" field.
func (cmmmu *CategoryMininumMarkMappingUpdate) SetDeletedbyEmployeeid(i int64) *CategoryMininumMarkMappingUpdate {
	cmmmu.mutation.ResetDeletedbyEmployeeid()
	cmmmu.mutation.SetDeletedbyEmployeeid(i)
	return cmmmu
}

// SetNillableDeletedbyEmployeeid sets the "deletedbyEmployeeid" field if the given value is not nil.
func (cmmmu *CategoryMininumMarkMappingUpdate) SetNillableDeletedbyEmployeeid(i *int64) *CategoryMininumMarkMappingUpdate {
	if i != nil {
		cmmmu.SetDeletedbyEmployeeid(*i)
	}
	return cmmmu
}

// AddDeletedbyEmployeeid adds i to the "deletedbyEmployeeid" field.
func (cmmmu *CategoryMininumMarkMappingUpdate) AddDeletedbyEmployeeid(i int64) *CategoryMininumMarkMappingUpdate {
	cmmmu.mutation.AddDeletedbyEmployeeid(i)
	return cmmmu
}

// ClearDeletedbyEmployeeid clears the value of the "deletedbyEmployeeid" field.
func (cmmmu *CategoryMininumMarkMappingUpdate) ClearDeletedbyEmployeeid() *CategoryMininumMarkMappingUpdate {
	cmmmu.mutation.ClearDeletedbyEmployeeid()
	return cmmmu
}

// SetDeletedbyDesignation sets the "deletedbyDesignation" field.
func (cmmmu *CategoryMininumMarkMappingUpdate) SetDeletedbyDesignation(s string) *CategoryMininumMarkMappingUpdate {
	cmmmu.mutation.SetDeletedbyDesignation(s)
	return cmmmu
}

// SetNillableDeletedbyDesignation sets the "deletedbyDesignation" field if the given value is not nil.
func (cmmmu *CategoryMininumMarkMappingUpdate) SetNillableDeletedbyDesignation(s *string) *CategoryMininumMarkMappingUpdate {
	if s != nil {
		cmmmu.SetDeletedbyDesignation(*s)
	}
	return cmmmu
}

// ClearDeletedbyDesignation clears the value of the "deletedbyDesignation" field.
func (cmmmu *CategoryMininumMarkMappingUpdate) ClearDeletedbyDesignation() *CategoryMininumMarkMappingUpdate {
	cmmmu.mutation.ClearDeletedbyDesignation()
	return cmmmu
}

// SetDeletedDate sets the "deletedDate" field.
func (cmmmu *CategoryMininumMarkMappingUpdate) SetDeletedDate(t time.Time) *CategoryMininumMarkMappingUpdate {
	cmmmu.mutation.SetDeletedDate(t)
	return cmmmu
}

// SetNillableDeletedDate sets the "deletedDate" field if the given value is not nil.
func (cmmmu *CategoryMininumMarkMappingUpdate) SetNillableDeletedDate(t *time.Time) *CategoryMininumMarkMappingUpdate {
	if t != nil {
		cmmmu.SetDeletedDate(*t)
	}
	return cmmmu
}

// ClearDeletedDate clears the value of the "deletedDate" field.
func (cmmmu *CategoryMininumMarkMappingUpdate) ClearDeletedDate() *CategoryMininumMarkMappingUpdate {
	cmmmu.mutation.ClearDeletedDate()
	return cmmmu
}

// AddLogDatumIDs adds the "LogData" edge to the Logs entity by IDs.
func (cmmmu *CategoryMininumMarkMappingUpdate) AddLogDatumIDs(ids ...int64) *CategoryMininumMarkMappingUpdate {
	cmmmu.mutation.AddLogDatumIDs(ids...)
	return cmmmu
}

// AddLogData adds the "LogData" edges to the Logs entity.
func (cmmmu *CategoryMininumMarkMappingUpdate) AddLogData(l ...*Logs) *CategoryMininumMarkMappingUpdate {
	ids := make([]int64, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return cmmmu.AddLogDatumIDs(ids...)
}

// Mutation returns the CategoryMininumMarkMappingMutation object of the builder.
func (cmmmu *CategoryMininumMarkMappingUpdate) Mutation() *CategoryMininumMarkMappingMutation {
	return cmmmu.mutation
}

// ClearLogData clears all "LogData" edges to the Logs entity.
func (cmmmu *CategoryMininumMarkMappingUpdate) ClearLogData() *CategoryMininumMarkMappingUpdate {
	cmmmu.mutation.ClearLogData()
	return cmmmu
}

// RemoveLogDatumIDs removes the "LogData" edge to Logs entities by IDs.
func (cmmmu *CategoryMininumMarkMappingUpdate) RemoveLogDatumIDs(ids ...int64) *CategoryMininumMarkMappingUpdate {
	cmmmu.mutation.RemoveLogDatumIDs(ids...)
	return cmmmu
}

// RemoveLogData removes "LogData" edges to Logs entities.
func (cmmmu *CategoryMininumMarkMappingUpdate) RemoveLogData(l ...*Logs) *CategoryMininumMarkMappingUpdate {
	ids := make([]int64, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return cmmmu.RemoveLogDatumIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cmmmu *CategoryMininumMarkMappingUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, cmmmu.sqlSave, cmmmu.mutation, cmmmu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cmmmu *CategoryMininumMarkMappingUpdate) SaveX(ctx context.Context) int {
	affected, err := cmmmu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cmmmu *CategoryMininumMarkMappingUpdate) Exec(ctx context.Context) error {
	_, err := cmmmu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cmmmu *CategoryMininumMarkMappingUpdate) ExecX(ctx context.Context) {
	if err := cmmmu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cmmmu *CategoryMininumMarkMappingUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(categorymininummarkmapping.Table, categorymininummarkmapping.Columns, sqlgraph.NewFieldSpec(categorymininummarkmapping.FieldID, field.TypeInt64))
	if ps := cmmmu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cmmmu.mutation.ExamCode(); ok {
		_spec.SetField(categorymininummarkmapping.FieldExamCode, field.TypeInt64, value)
	}
	if value, ok := cmmmu.mutation.AddedExamCode(); ok {
		_spec.AddField(categorymininummarkmapping.FieldExamCode, field.TypeInt64, value)
	}
	if cmmmu.mutation.ExamCodeCleared() {
		_spec.ClearField(categorymininummarkmapping.FieldExamCode, field.TypeInt64)
	}
	if value, ok := cmmmu.mutation.ExamName(); ok {
		_spec.SetField(categorymininummarkmapping.FieldExamName, field.TypeString, value)
	}
	if cmmmu.mutation.ExamNameCleared() {
		_spec.ClearField(categorymininummarkmapping.FieldExamName, field.TypeString)
	}
	if value, ok := cmmmu.mutation.ExamShortName(); ok {
		_spec.SetField(categorymininummarkmapping.FieldExamShortName, field.TypeString, value)
	}
	if cmmmu.mutation.ExamShortNameCleared() {
		_spec.ClearField(categorymininummarkmapping.FieldExamShortName, field.TypeString)
	}
	if value, ok := cmmmu.mutation.PaperCode(); ok {
		_spec.SetField(categorymininummarkmapping.FieldPaperCode, field.TypeInt64, value)
	}
	if value, ok := cmmmu.mutation.AddedPaperCode(); ok {
		_spec.AddField(categorymininummarkmapping.FieldPaperCode, field.TypeInt64, value)
	}
	if cmmmu.mutation.PaperCodeCleared() {
		_spec.ClearField(categorymininummarkmapping.FieldPaperCode, field.TypeInt64)
	}
	if value, ok := cmmmu.mutation.PaperDescription(); ok {
		_spec.SetField(categorymininummarkmapping.FieldPaperDescription, field.TypeString, value)
	}
	if cmmmu.mutation.PaperDescriptionCleared() {
		_spec.ClearField(categorymininummarkmapping.FieldPaperDescription, field.TypeString)
	}
	if value, ok := cmmmu.mutation.DisabilityTypeID(); ok {
		_spec.SetField(categorymininummarkmapping.FieldDisabilityTypeID, field.TypeInt64, value)
	}
	if value, ok := cmmmu.mutation.AddedDisabilityTypeID(); ok {
		_spec.AddField(categorymininummarkmapping.FieldDisabilityTypeID, field.TypeInt64, value)
	}
	if cmmmu.mutation.DisabilityTypeIDCleared() {
		_spec.ClearField(categorymininummarkmapping.FieldDisabilityTypeID, field.TypeInt64)
	}
	if value, ok := cmmmu.mutation.DisabilityTypeCode(); ok {
		_spec.SetField(categorymininummarkmapping.FieldDisabilityTypeCode, field.TypeString, value)
	}
	if cmmmu.mutation.DisabilityTypeCodeCleared() {
		_spec.ClearField(categorymininummarkmapping.FieldDisabilityTypeCode, field.TypeString)
	}
	if value, ok := cmmmu.mutation.DisabilityTypeDescription(); ok {
		_spec.SetField(categorymininummarkmapping.FieldDisabilityTypeDescription, field.TypeString, value)
	}
	if cmmmu.mutation.DisabilityTypeDescriptionCleared() {
		_spec.ClearField(categorymininummarkmapping.FieldDisabilityTypeDescription, field.TypeString)
	}
	if value, ok := cmmmu.mutation.MinimumMarks(); ok {
		_spec.SetField(categorymininummarkmapping.FieldMinimumMarks, field.TypeInt64, value)
	}
	if value, ok := cmmmu.mutation.AddedMinimumMarks(); ok {
		_spec.AddField(categorymininummarkmapping.FieldMinimumMarks, field.TypeInt64, value)
	}
	if cmmmu.mutation.MinimumMarksCleared() {
		_spec.ClearField(categorymininummarkmapping.FieldMinimumMarks, field.TypeInt64)
	}
	if value, ok := cmmmu.mutation.OrderNumber(); ok {
		_spec.SetField(categorymininummarkmapping.FieldOrderNumber, field.TypeString, value)
	}
	if cmmmu.mutation.OrderNumberCleared() {
		_spec.ClearField(categorymininummarkmapping.FieldOrderNumber, field.TypeString)
	}
	if value, ok := cmmmu.mutation.CreatedById(); ok {
		_spec.SetField(categorymininummarkmapping.FieldCreatedById, field.TypeInt64, value)
	}
	if value, ok := cmmmu.mutation.AddedCreatedById(); ok {
		_spec.AddField(categorymininummarkmapping.FieldCreatedById, field.TypeInt64, value)
	}
	if cmmmu.mutation.CreatedByIdCleared() {
		_spec.ClearField(categorymininummarkmapping.FieldCreatedById, field.TypeInt64)
	}
	if value, ok := cmmmu.mutation.CreatedByUserName(); ok {
		_spec.SetField(categorymininummarkmapping.FieldCreatedByUserName, field.TypeString, value)
	}
	if cmmmu.mutation.CreatedByUserNameCleared() {
		_spec.ClearField(categorymininummarkmapping.FieldCreatedByUserName, field.TypeString)
	}
	if value, ok := cmmmu.mutation.CreatedByEmpId(); ok {
		_spec.SetField(categorymininummarkmapping.FieldCreatedByEmpId, field.TypeInt64, value)
	}
	if value, ok := cmmmu.mutation.AddedCreatedByEmpId(); ok {
		_spec.AddField(categorymininummarkmapping.FieldCreatedByEmpId, field.TypeInt64, value)
	}
	if cmmmu.mutation.CreatedByEmpIdCleared() {
		_spec.ClearField(categorymininummarkmapping.FieldCreatedByEmpId, field.TypeInt64)
	}
	if value, ok := cmmmu.mutation.CreatedByDesignation(); ok {
		_spec.SetField(categorymininummarkmapping.FieldCreatedByDesignation, field.TypeString, value)
	}
	if cmmmu.mutation.CreatedByDesignationCleared() {
		_spec.ClearField(categorymininummarkmapping.FieldCreatedByDesignation, field.TypeString)
	}
	if value, ok := cmmmu.mutation.CreatedDate(); ok {
		_spec.SetField(categorymininummarkmapping.FieldCreatedDate, field.TypeTime, value)
	}
	if cmmmu.mutation.CreatedDateCleared() {
		_spec.ClearField(categorymininummarkmapping.FieldCreatedDate, field.TypeTime)
	}
	if value, ok := cmmmu.mutation.Verifiedbyid(); ok {
		_spec.SetField(categorymininummarkmapping.FieldVerifiedbyid, field.TypeInt64, value)
	}
	if value, ok := cmmmu.mutation.AddedVerifiedbyid(); ok {
		_spec.AddField(categorymininummarkmapping.FieldVerifiedbyid, field.TypeInt64, value)
	}
	if cmmmu.mutation.VerifiedbyidCleared() {
		_spec.ClearField(categorymininummarkmapping.FieldVerifiedbyid, field.TypeInt64)
	}
	if value, ok := cmmmu.mutation.Verifiedbyusername(); ok {
		_spec.SetField(categorymininummarkmapping.FieldVerifiedbyusername, field.TypeString, value)
	}
	if cmmmu.mutation.VerifiedbyusernameCleared() {
		_spec.ClearField(categorymininummarkmapping.FieldVerifiedbyusername, field.TypeString)
	}
	if value, ok := cmmmu.mutation.VerifiedbyEmployeeid(); ok {
		_spec.SetField(categorymininummarkmapping.FieldVerifiedbyEmployeeid, field.TypeInt64, value)
	}
	if value, ok := cmmmu.mutation.AddedVerifiedbyEmployeeid(); ok {
		_spec.AddField(categorymininummarkmapping.FieldVerifiedbyEmployeeid, field.TypeInt64, value)
	}
	if cmmmu.mutation.VerifiedbyEmployeeidCleared() {
		_spec.ClearField(categorymininummarkmapping.FieldVerifiedbyEmployeeid, field.TypeInt64)
	}
	if value, ok := cmmmu.mutation.VerifiedbyDesignation(); ok {
		_spec.SetField(categorymininummarkmapping.FieldVerifiedbyDesignation, field.TypeString, value)
	}
	if cmmmu.mutation.VerifiedbyDesignationCleared() {
		_spec.ClearField(categorymininummarkmapping.FieldVerifiedbyDesignation, field.TypeString)
	}
	if value, ok := cmmmu.mutation.VerifiedDate(); ok {
		_spec.SetField(categorymininummarkmapping.FieldVerifiedDate, field.TypeTime, value)
	}
	if cmmmu.mutation.VerifiedDateCleared() {
		_spec.ClearField(categorymininummarkmapping.FieldVerifiedDate, field.TypeTime)
	}
	if value, ok := cmmmu.mutation.Statuss(); ok {
		_spec.SetField(categorymininummarkmapping.FieldStatuss, field.TypeString, value)
	}
	if cmmmu.mutation.StatussCleared() {
		_spec.ClearField(categorymininummarkmapping.FieldStatuss, field.TypeString)
	}
	if value, ok := cmmmu.mutation.Deletedbyid(); ok {
		_spec.SetField(categorymininummarkmapping.FieldDeletedbyid, field.TypeInt64, value)
	}
	if value, ok := cmmmu.mutation.AddedDeletedbyid(); ok {
		_spec.AddField(categorymininummarkmapping.FieldDeletedbyid, field.TypeInt64, value)
	}
	if cmmmu.mutation.DeletedbyidCleared() {
		_spec.ClearField(categorymininummarkmapping.FieldDeletedbyid, field.TypeInt64)
	}
	if value, ok := cmmmu.mutation.Deletedbyusername(); ok {
		_spec.SetField(categorymininummarkmapping.FieldDeletedbyusername, field.TypeString, value)
	}
	if cmmmu.mutation.DeletedbyusernameCleared() {
		_spec.ClearField(categorymininummarkmapping.FieldDeletedbyusername, field.TypeString)
	}
	if value, ok := cmmmu.mutation.DeletedbyEmployeeid(); ok {
		_spec.SetField(categorymininummarkmapping.FieldDeletedbyEmployeeid, field.TypeInt64, value)
	}
	if value, ok := cmmmu.mutation.AddedDeletedbyEmployeeid(); ok {
		_spec.AddField(categorymininummarkmapping.FieldDeletedbyEmployeeid, field.TypeInt64, value)
	}
	if cmmmu.mutation.DeletedbyEmployeeidCleared() {
		_spec.ClearField(categorymininummarkmapping.FieldDeletedbyEmployeeid, field.TypeInt64)
	}
	if value, ok := cmmmu.mutation.DeletedbyDesignation(); ok {
		_spec.SetField(categorymininummarkmapping.FieldDeletedbyDesignation, field.TypeString, value)
	}
	if cmmmu.mutation.DeletedbyDesignationCleared() {
		_spec.ClearField(categorymininummarkmapping.FieldDeletedbyDesignation, field.TypeString)
	}
	if value, ok := cmmmu.mutation.DeletedDate(); ok {
		_spec.SetField(categorymininummarkmapping.FieldDeletedDate, field.TypeTime, value)
	}
	if cmmmu.mutation.DeletedDateCleared() {
		_spec.ClearField(categorymininummarkmapping.FieldDeletedDate, field.TypeTime)
	}
	if cmmmu.mutation.LogDataCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   categorymininummarkmapping.LogDataTable,
			Columns: []string{categorymininummarkmapping.LogDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(logs.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cmmmu.mutation.RemovedLogDataIDs(); len(nodes) > 0 && !cmmmu.mutation.LogDataCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   categorymininummarkmapping.LogDataTable,
			Columns: []string{categorymininummarkmapping.LogDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(logs.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cmmmu.mutation.LogDataIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   categorymininummarkmapping.LogDataTable,
			Columns: []string{categorymininummarkmapping.LogDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(logs.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cmmmu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{categorymininummarkmapping.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cmmmu.mutation.done = true
	return n, nil
}

// CategoryMininumMarkMappingUpdateOne is the builder for updating a single CategoryMininumMarkMapping entity.
type CategoryMininumMarkMappingUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CategoryMininumMarkMappingMutation
}

// SetExamCode sets the "ExamCode" field.
func (cmmmuo *CategoryMininumMarkMappingUpdateOne) SetExamCode(i int64) *CategoryMininumMarkMappingUpdateOne {
	cmmmuo.mutation.ResetExamCode()
	cmmmuo.mutation.SetExamCode(i)
	return cmmmuo
}

// SetNillableExamCode sets the "ExamCode" field if the given value is not nil.
func (cmmmuo *CategoryMininumMarkMappingUpdateOne) SetNillableExamCode(i *int64) *CategoryMininumMarkMappingUpdateOne {
	if i != nil {
		cmmmuo.SetExamCode(*i)
	}
	return cmmmuo
}

// AddExamCode adds i to the "ExamCode" field.
func (cmmmuo *CategoryMininumMarkMappingUpdateOne) AddExamCode(i int64) *CategoryMininumMarkMappingUpdateOne {
	cmmmuo.mutation.AddExamCode(i)
	return cmmmuo
}

// ClearExamCode clears the value of the "ExamCode" field.
func (cmmmuo *CategoryMininumMarkMappingUpdateOne) ClearExamCode() *CategoryMininumMarkMappingUpdateOne {
	cmmmuo.mutation.ClearExamCode()
	return cmmmuo
}

// SetExamName sets the "ExamName" field.
func (cmmmuo *CategoryMininumMarkMappingUpdateOne) SetExamName(s string) *CategoryMininumMarkMappingUpdateOne {
	cmmmuo.mutation.SetExamName(s)
	return cmmmuo
}

// SetNillableExamName sets the "ExamName" field if the given value is not nil.
func (cmmmuo *CategoryMininumMarkMappingUpdateOne) SetNillableExamName(s *string) *CategoryMininumMarkMappingUpdateOne {
	if s != nil {
		cmmmuo.SetExamName(*s)
	}
	return cmmmuo
}

// ClearExamName clears the value of the "ExamName" field.
func (cmmmuo *CategoryMininumMarkMappingUpdateOne) ClearExamName() *CategoryMininumMarkMappingUpdateOne {
	cmmmuo.mutation.ClearExamName()
	return cmmmuo
}

// SetExamShortName sets the "ExamShortName" field.
func (cmmmuo *CategoryMininumMarkMappingUpdateOne) SetExamShortName(s string) *CategoryMininumMarkMappingUpdateOne {
	cmmmuo.mutation.SetExamShortName(s)
	return cmmmuo
}

// SetNillableExamShortName sets the "ExamShortName" field if the given value is not nil.
func (cmmmuo *CategoryMininumMarkMappingUpdateOne) SetNillableExamShortName(s *string) *CategoryMininumMarkMappingUpdateOne {
	if s != nil {
		cmmmuo.SetExamShortName(*s)
	}
	return cmmmuo
}

// ClearExamShortName clears the value of the "ExamShortName" field.
func (cmmmuo *CategoryMininumMarkMappingUpdateOne) ClearExamShortName() *CategoryMininumMarkMappingUpdateOne {
	cmmmuo.mutation.ClearExamShortName()
	return cmmmuo
}

// SetPaperCode sets the "PaperCode" field.
func (cmmmuo *CategoryMininumMarkMappingUpdateOne) SetPaperCode(i int64) *CategoryMininumMarkMappingUpdateOne {
	cmmmuo.mutation.ResetPaperCode()
	cmmmuo.mutation.SetPaperCode(i)
	return cmmmuo
}

// SetNillablePaperCode sets the "PaperCode" field if the given value is not nil.
func (cmmmuo *CategoryMininumMarkMappingUpdateOne) SetNillablePaperCode(i *int64) *CategoryMininumMarkMappingUpdateOne {
	if i != nil {
		cmmmuo.SetPaperCode(*i)
	}
	return cmmmuo
}

// AddPaperCode adds i to the "PaperCode" field.
func (cmmmuo *CategoryMininumMarkMappingUpdateOne) AddPaperCode(i int64) *CategoryMininumMarkMappingUpdateOne {
	cmmmuo.mutation.AddPaperCode(i)
	return cmmmuo
}

// ClearPaperCode clears the value of the "PaperCode" field.
func (cmmmuo *CategoryMininumMarkMappingUpdateOne) ClearPaperCode() *CategoryMininumMarkMappingUpdateOne {
	cmmmuo.mutation.ClearPaperCode()
	return cmmmuo
}

// SetPaperDescription sets the "PaperDescription" field.
func (cmmmuo *CategoryMininumMarkMappingUpdateOne) SetPaperDescription(s string) *CategoryMininumMarkMappingUpdateOne {
	cmmmuo.mutation.SetPaperDescription(s)
	return cmmmuo
}

// SetNillablePaperDescription sets the "PaperDescription" field if the given value is not nil.
func (cmmmuo *CategoryMininumMarkMappingUpdateOne) SetNillablePaperDescription(s *string) *CategoryMininumMarkMappingUpdateOne {
	if s != nil {
		cmmmuo.SetPaperDescription(*s)
	}
	return cmmmuo
}

// ClearPaperDescription clears the value of the "PaperDescription" field.
func (cmmmuo *CategoryMininumMarkMappingUpdateOne) ClearPaperDescription() *CategoryMininumMarkMappingUpdateOne {
	cmmmuo.mutation.ClearPaperDescription()
	return cmmmuo
}

// SetDisabilityTypeID sets the "DisabilityTypeID" field.
func (cmmmuo *CategoryMininumMarkMappingUpdateOne) SetDisabilityTypeID(i int64) *CategoryMininumMarkMappingUpdateOne {
	cmmmuo.mutation.ResetDisabilityTypeID()
	cmmmuo.mutation.SetDisabilityTypeID(i)
	return cmmmuo
}

// SetNillableDisabilityTypeID sets the "DisabilityTypeID" field if the given value is not nil.
func (cmmmuo *CategoryMininumMarkMappingUpdateOne) SetNillableDisabilityTypeID(i *int64) *CategoryMininumMarkMappingUpdateOne {
	if i != nil {
		cmmmuo.SetDisabilityTypeID(*i)
	}
	return cmmmuo
}

// AddDisabilityTypeID adds i to the "DisabilityTypeID" field.
func (cmmmuo *CategoryMininumMarkMappingUpdateOne) AddDisabilityTypeID(i int64) *CategoryMininumMarkMappingUpdateOne {
	cmmmuo.mutation.AddDisabilityTypeID(i)
	return cmmmuo
}

// ClearDisabilityTypeID clears the value of the "DisabilityTypeID" field.
func (cmmmuo *CategoryMininumMarkMappingUpdateOne) ClearDisabilityTypeID() *CategoryMininumMarkMappingUpdateOne {
	cmmmuo.mutation.ClearDisabilityTypeID()
	return cmmmuo
}

// SetDisabilityTypeCode sets the "DisabilityTypeCode" field.
func (cmmmuo *CategoryMininumMarkMappingUpdateOne) SetDisabilityTypeCode(s string) *CategoryMininumMarkMappingUpdateOne {
	cmmmuo.mutation.SetDisabilityTypeCode(s)
	return cmmmuo
}

// SetNillableDisabilityTypeCode sets the "DisabilityTypeCode" field if the given value is not nil.
func (cmmmuo *CategoryMininumMarkMappingUpdateOne) SetNillableDisabilityTypeCode(s *string) *CategoryMininumMarkMappingUpdateOne {
	if s != nil {
		cmmmuo.SetDisabilityTypeCode(*s)
	}
	return cmmmuo
}

// ClearDisabilityTypeCode clears the value of the "DisabilityTypeCode" field.
func (cmmmuo *CategoryMininumMarkMappingUpdateOne) ClearDisabilityTypeCode() *CategoryMininumMarkMappingUpdateOne {
	cmmmuo.mutation.ClearDisabilityTypeCode()
	return cmmmuo
}

// SetDisabilityTypeDescription sets the "DisabilityTypeDescription" field.
func (cmmmuo *CategoryMininumMarkMappingUpdateOne) SetDisabilityTypeDescription(s string) *CategoryMininumMarkMappingUpdateOne {
	cmmmuo.mutation.SetDisabilityTypeDescription(s)
	return cmmmuo
}

// SetNillableDisabilityTypeDescription sets the "DisabilityTypeDescription" field if the given value is not nil.
func (cmmmuo *CategoryMininumMarkMappingUpdateOne) SetNillableDisabilityTypeDescription(s *string) *CategoryMininumMarkMappingUpdateOne {
	if s != nil {
		cmmmuo.SetDisabilityTypeDescription(*s)
	}
	return cmmmuo
}

// ClearDisabilityTypeDescription clears the value of the "DisabilityTypeDescription" field.
func (cmmmuo *CategoryMininumMarkMappingUpdateOne) ClearDisabilityTypeDescription() *CategoryMininumMarkMappingUpdateOne {
	cmmmuo.mutation.ClearDisabilityTypeDescription()
	return cmmmuo
}

// SetMinimumMarks sets the "minimumMarks" field.
func (cmmmuo *CategoryMininumMarkMappingUpdateOne) SetMinimumMarks(i int64) *CategoryMininumMarkMappingUpdateOne {
	cmmmuo.mutation.ResetMinimumMarks()
	cmmmuo.mutation.SetMinimumMarks(i)
	return cmmmuo
}

// SetNillableMinimumMarks sets the "minimumMarks" field if the given value is not nil.
func (cmmmuo *CategoryMininumMarkMappingUpdateOne) SetNillableMinimumMarks(i *int64) *CategoryMininumMarkMappingUpdateOne {
	if i != nil {
		cmmmuo.SetMinimumMarks(*i)
	}
	return cmmmuo
}

// AddMinimumMarks adds i to the "minimumMarks" field.
func (cmmmuo *CategoryMininumMarkMappingUpdateOne) AddMinimumMarks(i int64) *CategoryMininumMarkMappingUpdateOne {
	cmmmuo.mutation.AddMinimumMarks(i)
	return cmmmuo
}

// ClearMinimumMarks clears the value of the "minimumMarks" field.
func (cmmmuo *CategoryMininumMarkMappingUpdateOne) ClearMinimumMarks() *CategoryMininumMarkMappingUpdateOne {
	cmmmuo.mutation.ClearMinimumMarks()
	return cmmmuo
}

// SetOrderNumber sets the "OrderNumber" field.
func (cmmmuo *CategoryMininumMarkMappingUpdateOne) SetOrderNumber(s string) *CategoryMininumMarkMappingUpdateOne {
	cmmmuo.mutation.SetOrderNumber(s)
	return cmmmuo
}

// SetNillableOrderNumber sets the "OrderNumber" field if the given value is not nil.
func (cmmmuo *CategoryMininumMarkMappingUpdateOne) SetNillableOrderNumber(s *string) *CategoryMininumMarkMappingUpdateOne {
	if s != nil {
		cmmmuo.SetOrderNumber(*s)
	}
	return cmmmuo
}

// ClearOrderNumber clears the value of the "OrderNumber" field.
func (cmmmuo *CategoryMininumMarkMappingUpdateOne) ClearOrderNumber() *CategoryMininumMarkMappingUpdateOne {
	cmmmuo.mutation.ClearOrderNumber()
	return cmmmuo
}

// SetCreatedById sets the "CreatedById" field.
func (cmmmuo *CategoryMininumMarkMappingUpdateOne) SetCreatedById(i int64) *CategoryMininumMarkMappingUpdateOne {
	cmmmuo.mutation.ResetCreatedById()
	cmmmuo.mutation.SetCreatedById(i)
	return cmmmuo
}

// SetNillableCreatedById sets the "CreatedById" field if the given value is not nil.
func (cmmmuo *CategoryMininumMarkMappingUpdateOne) SetNillableCreatedById(i *int64) *CategoryMininumMarkMappingUpdateOne {
	if i != nil {
		cmmmuo.SetCreatedById(*i)
	}
	return cmmmuo
}

// AddCreatedById adds i to the "CreatedById" field.
func (cmmmuo *CategoryMininumMarkMappingUpdateOne) AddCreatedById(i int64) *CategoryMininumMarkMappingUpdateOne {
	cmmmuo.mutation.AddCreatedById(i)
	return cmmmuo
}

// ClearCreatedById clears the value of the "CreatedById" field.
func (cmmmuo *CategoryMininumMarkMappingUpdateOne) ClearCreatedById() *CategoryMininumMarkMappingUpdateOne {
	cmmmuo.mutation.ClearCreatedById()
	return cmmmuo
}

// SetCreatedByUserName sets the "CreatedByUserName" field.
func (cmmmuo *CategoryMininumMarkMappingUpdateOne) SetCreatedByUserName(s string) *CategoryMininumMarkMappingUpdateOne {
	cmmmuo.mutation.SetCreatedByUserName(s)
	return cmmmuo
}

// SetNillableCreatedByUserName sets the "CreatedByUserName" field if the given value is not nil.
func (cmmmuo *CategoryMininumMarkMappingUpdateOne) SetNillableCreatedByUserName(s *string) *CategoryMininumMarkMappingUpdateOne {
	if s != nil {
		cmmmuo.SetCreatedByUserName(*s)
	}
	return cmmmuo
}

// ClearCreatedByUserName clears the value of the "CreatedByUserName" field.
func (cmmmuo *CategoryMininumMarkMappingUpdateOne) ClearCreatedByUserName() *CategoryMininumMarkMappingUpdateOne {
	cmmmuo.mutation.ClearCreatedByUserName()
	return cmmmuo
}

// SetCreatedByEmpId sets the "CreatedByEmpId" field.
func (cmmmuo *CategoryMininumMarkMappingUpdateOne) SetCreatedByEmpId(i int64) *CategoryMininumMarkMappingUpdateOne {
	cmmmuo.mutation.ResetCreatedByEmpId()
	cmmmuo.mutation.SetCreatedByEmpId(i)
	return cmmmuo
}

// SetNillableCreatedByEmpId sets the "CreatedByEmpId" field if the given value is not nil.
func (cmmmuo *CategoryMininumMarkMappingUpdateOne) SetNillableCreatedByEmpId(i *int64) *CategoryMininumMarkMappingUpdateOne {
	if i != nil {
		cmmmuo.SetCreatedByEmpId(*i)
	}
	return cmmmuo
}

// AddCreatedByEmpId adds i to the "CreatedByEmpId" field.
func (cmmmuo *CategoryMininumMarkMappingUpdateOne) AddCreatedByEmpId(i int64) *CategoryMininumMarkMappingUpdateOne {
	cmmmuo.mutation.AddCreatedByEmpId(i)
	return cmmmuo
}

// ClearCreatedByEmpId clears the value of the "CreatedByEmpId" field.
func (cmmmuo *CategoryMininumMarkMappingUpdateOne) ClearCreatedByEmpId() *CategoryMininumMarkMappingUpdateOne {
	cmmmuo.mutation.ClearCreatedByEmpId()
	return cmmmuo
}

// SetCreatedByDesignation sets the "CreatedByDesignation" field.
func (cmmmuo *CategoryMininumMarkMappingUpdateOne) SetCreatedByDesignation(s string) *CategoryMininumMarkMappingUpdateOne {
	cmmmuo.mutation.SetCreatedByDesignation(s)
	return cmmmuo
}

// SetNillableCreatedByDesignation sets the "CreatedByDesignation" field if the given value is not nil.
func (cmmmuo *CategoryMininumMarkMappingUpdateOne) SetNillableCreatedByDesignation(s *string) *CategoryMininumMarkMappingUpdateOne {
	if s != nil {
		cmmmuo.SetCreatedByDesignation(*s)
	}
	return cmmmuo
}

// ClearCreatedByDesignation clears the value of the "CreatedByDesignation" field.
func (cmmmuo *CategoryMininumMarkMappingUpdateOne) ClearCreatedByDesignation() *CategoryMininumMarkMappingUpdateOne {
	cmmmuo.mutation.ClearCreatedByDesignation()
	return cmmmuo
}

// SetCreatedDate sets the "CreatedDate" field.
func (cmmmuo *CategoryMininumMarkMappingUpdateOne) SetCreatedDate(t time.Time) *CategoryMininumMarkMappingUpdateOne {
	cmmmuo.mutation.SetCreatedDate(t)
	return cmmmuo
}

// SetNillableCreatedDate sets the "CreatedDate" field if the given value is not nil.
func (cmmmuo *CategoryMininumMarkMappingUpdateOne) SetNillableCreatedDate(t *time.Time) *CategoryMininumMarkMappingUpdateOne {
	if t != nil {
		cmmmuo.SetCreatedDate(*t)
	}
	return cmmmuo
}

// ClearCreatedDate clears the value of the "CreatedDate" field.
func (cmmmuo *CategoryMininumMarkMappingUpdateOne) ClearCreatedDate() *CategoryMininumMarkMappingUpdateOne {
	cmmmuo.mutation.ClearCreatedDate()
	return cmmmuo
}

// SetVerifiedbyid sets the "verifiedbyid" field.
func (cmmmuo *CategoryMininumMarkMappingUpdateOne) SetVerifiedbyid(i int64) *CategoryMininumMarkMappingUpdateOne {
	cmmmuo.mutation.ResetVerifiedbyid()
	cmmmuo.mutation.SetVerifiedbyid(i)
	return cmmmuo
}

// SetNillableVerifiedbyid sets the "verifiedbyid" field if the given value is not nil.
func (cmmmuo *CategoryMininumMarkMappingUpdateOne) SetNillableVerifiedbyid(i *int64) *CategoryMininumMarkMappingUpdateOne {
	if i != nil {
		cmmmuo.SetVerifiedbyid(*i)
	}
	return cmmmuo
}

// AddVerifiedbyid adds i to the "verifiedbyid" field.
func (cmmmuo *CategoryMininumMarkMappingUpdateOne) AddVerifiedbyid(i int64) *CategoryMininumMarkMappingUpdateOne {
	cmmmuo.mutation.AddVerifiedbyid(i)
	return cmmmuo
}

// ClearVerifiedbyid clears the value of the "verifiedbyid" field.
func (cmmmuo *CategoryMininumMarkMappingUpdateOne) ClearVerifiedbyid() *CategoryMininumMarkMappingUpdateOne {
	cmmmuo.mutation.ClearVerifiedbyid()
	return cmmmuo
}

// SetVerifiedbyusername sets the "verifiedbyusername" field.
func (cmmmuo *CategoryMininumMarkMappingUpdateOne) SetVerifiedbyusername(s string) *CategoryMininumMarkMappingUpdateOne {
	cmmmuo.mutation.SetVerifiedbyusername(s)
	return cmmmuo
}

// SetNillableVerifiedbyusername sets the "verifiedbyusername" field if the given value is not nil.
func (cmmmuo *CategoryMininumMarkMappingUpdateOne) SetNillableVerifiedbyusername(s *string) *CategoryMininumMarkMappingUpdateOne {
	if s != nil {
		cmmmuo.SetVerifiedbyusername(*s)
	}
	return cmmmuo
}

// ClearVerifiedbyusername clears the value of the "verifiedbyusername" field.
func (cmmmuo *CategoryMininumMarkMappingUpdateOne) ClearVerifiedbyusername() *CategoryMininumMarkMappingUpdateOne {
	cmmmuo.mutation.ClearVerifiedbyusername()
	return cmmmuo
}

// SetVerifiedbyEmployeeid sets the "verifiedbyEmployeeid" field.
func (cmmmuo *CategoryMininumMarkMappingUpdateOne) SetVerifiedbyEmployeeid(i int64) *CategoryMininumMarkMappingUpdateOne {
	cmmmuo.mutation.ResetVerifiedbyEmployeeid()
	cmmmuo.mutation.SetVerifiedbyEmployeeid(i)
	return cmmmuo
}

// SetNillableVerifiedbyEmployeeid sets the "verifiedbyEmployeeid" field if the given value is not nil.
func (cmmmuo *CategoryMininumMarkMappingUpdateOne) SetNillableVerifiedbyEmployeeid(i *int64) *CategoryMininumMarkMappingUpdateOne {
	if i != nil {
		cmmmuo.SetVerifiedbyEmployeeid(*i)
	}
	return cmmmuo
}

// AddVerifiedbyEmployeeid adds i to the "verifiedbyEmployeeid" field.
func (cmmmuo *CategoryMininumMarkMappingUpdateOne) AddVerifiedbyEmployeeid(i int64) *CategoryMininumMarkMappingUpdateOne {
	cmmmuo.mutation.AddVerifiedbyEmployeeid(i)
	return cmmmuo
}

// ClearVerifiedbyEmployeeid clears the value of the "verifiedbyEmployeeid" field.
func (cmmmuo *CategoryMininumMarkMappingUpdateOne) ClearVerifiedbyEmployeeid() *CategoryMininumMarkMappingUpdateOne {
	cmmmuo.mutation.ClearVerifiedbyEmployeeid()
	return cmmmuo
}

// SetVerifiedbyDesignation sets the "verifiedbyDesignation" field.
func (cmmmuo *CategoryMininumMarkMappingUpdateOne) SetVerifiedbyDesignation(s string) *CategoryMininumMarkMappingUpdateOne {
	cmmmuo.mutation.SetVerifiedbyDesignation(s)
	return cmmmuo
}

// SetNillableVerifiedbyDesignation sets the "verifiedbyDesignation" field if the given value is not nil.
func (cmmmuo *CategoryMininumMarkMappingUpdateOne) SetNillableVerifiedbyDesignation(s *string) *CategoryMininumMarkMappingUpdateOne {
	if s != nil {
		cmmmuo.SetVerifiedbyDesignation(*s)
	}
	return cmmmuo
}

// ClearVerifiedbyDesignation clears the value of the "verifiedbyDesignation" field.
func (cmmmuo *CategoryMininumMarkMappingUpdateOne) ClearVerifiedbyDesignation() *CategoryMininumMarkMappingUpdateOne {
	cmmmuo.mutation.ClearVerifiedbyDesignation()
	return cmmmuo
}

// SetVerifiedDate sets the "verifiedDate" field.
func (cmmmuo *CategoryMininumMarkMappingUpdateOne) SetVerifiedDate(t time.Time) *CategoryMininumMarkMappingUpdateOne {
	cmmmuo.mutation.SetVerifiedDate(t)
	return cmmmuo
}

// SetNillableVerifiedDate sets the "verifiedDate" field if the given value is not nil.
func (cmmmuo *CategoryMininumMarkMappingUpdateOne) SetNillableVerifiedDate(t *time.Time) *CategoryMininumMarkMappingUpdateOne {
	if t != nil {
		cmmmuo.SetVerifiedDate(*t)
	}
	return cmmmuo
}

// ClearVerifiedDate clears the value of the "verifiedDate" field.
func (cmmmuo *CategoryMininumMarkMappingUpdateOne) ClearVerifiedDate() *CategoryMininumMarkMappingUpdateOne {
	cmmmuo.mutation.ClearVerifiedDate()
	return cmmmuo
}

// SetStatuss sets the "Statuss" field.
func (cmmmuo *CategoryMininumMarkMappingUpdateOne) SetStatuss(s string) *CategoryMininumMarkMappingUpdateOne {
	cmmmuo.mutation.SetStatuss(s)
	return cmmmuo
}

// SetNillableStatuss sets the "Statuss" field if the given value is not nil.
func (cmmmuo *CategoryMininumMarkMappingUpdateOne) SetNillableStatuss(s *string) *CategoryMininumMarkMappingUpdateOne {
	if s != nil {
		cmmmuo.SetStatuss(*s)
	}
	return cmmmuo
}

// ClearStatuss clears the value of the "Statuss" field.
func (cmmmuo *CategoryMininumMarkMappingUpdateOne) ClearStatuss() *CategoryMininumMarkMappingUpdateOne {
	cmmmuo.mutation.ClearStatuss()
	return cmmmuo
}

// SetDeletedbyid sets the "deletedbyid" field.
func (cmmmuo *CategoryMininumMarkMappingUpdateOne) SetDeletedbyid(i int64) *CategoryMininumMarkMappingUpdateOne {
	cmmmuo.mutation.ResetDeletedbyid()
	cmmmuo.mutation.SetDeletedbyid(i)
	return cmmmuo
}

// SetNillableDeletedbyid sets the "deletedbyid" field if the given value is not nil.
func (cmmmuo *CategoryMininumMarkMappingUpdateOne) SetNillableDeletedbyid(i *int64) *CategoryMininumMarkMappingUpdateOne {
	if i != nil {
		cmmmuo.SetDeletedbyid(*i)
	}
	return cmmmuo
}

// AddDeletedbyid adds i to the "deletedbyid" field.
func (cmmmuo *CategoryMininumMarkMappingUpdateOne) AddDeletedbyid(i int64) *CategoryMininumMarkMappingUpdateOne {
	cmmmuo.mutation.AddDeletedbyid(i)
	return cmmmuo
}

// ClearDeletedbyid clears the value of the "deletedbyid" field.
func (cmmmuo *CategoryMininumMarkMappingUpdateOne) ClearDeletedbyid() *CategoryMininumMarkMappingUpdateOne {
	cmmmuo.mutation.ClearDeletedbyid()
	return cmmmuo
}

// SetDeletedbyusername sets the "deletedbyusername" field.
func (cmmmuo *CategoryMininumMarkMappingUpdateOne) SetDeletedbyusername(s string) *CategoryMininumMarkMappingUpdateOne {
	cmmmuo.mutation.SetDeletedbyusername(s)
	return cmmmuo
}

// SetNillableDeletedbyusername sets the "deletedbyusername" field if the given value is not nil.
func (cmmmuo *CategoryMininumMarkMappingUpdateOne) SetNillableDeletedbyusername(s *string) *CategoryMininumMarkMappingUpdateOne {
	if s != nil {
		cmmmuo.SetDeletedbyusername(*s)
	}
	return cmmmuo
}

// ClearDeletedbyusername clears the value of the "deletedbyusername" field.
func (cmmmuo *CategoryMininumMarkMappingUpdateOne) ClearDeletedbyusername() *CategoryMininumMarkMappingUpdateOne {
	cmmmuo.mutation.ClearDeletedbyusername()
	return cmmmuo
}

// SetDeletedbyEmployeeid sets the "deletedbyEmployeeid" field.
func (cmmmuo *CategoryMininumMarkMappingUpdateOne) SetDeletedbyEmployeeid(i int64) *CategoryMininumMarkMappingUpdateOne {
	cmmmuo.mutation.ResetDeletedbyEmployeeid()
	cmmmuo.mutation.SetDeletedbyEmployeeid(i)
	return cmmmuo
}

// SetNillableDeletedbyEmployeeid sets the "deletedbyEmployeeid" field if the given value is not nil.
func (cmmmuo *CategoryMininumMarkMappingUpdateOne) SetNillableDeletedbyEmployeeid(i *int64) *CategoryMininumMarkMappingUpdateOne {
	if i != nil {
		cmmmuo.SetDeletedbyEmployeeid(*i)
	}
	return cmmmuo
}

// AddDeletedbyEmployeeid adds i to the "deletedbyEmployeeid" field.
func (cmmmuo *CategoryMininumMarkMappingUpdateOne) AddDeletedbyEmployeeid(i int64) *CategoryMininumMarkMappingUpdateOne {
	cmmmuo.mutation.AddDeletedbyEmployeeid(i)
	return cmmmuo
}

// ClearDeletedbyEmployeeid clears the value of the "deletedbyEmployeeid" field.
func (cmmmuo *CategoryMininumMarkMappingUpdateOne) ClearDeletedbyEmployeeid() *CategoryMininumMarkMappingUpdateOne {
	cmmmuo.mutation.ClearDeletedbyEmployeeid()
	return cmmmuo
}

// SetDeletedbyDesignation sets the "deletedbyDesignation" field.
func (cmmmuo *CategoryMininumMarkMappingUpdateOne) SetDeletedbyDesignation(s string) *CategoryMininumMarkMappingUpdateOne {
	cmmmuo.mutation.SetDeletedbyDesignation(s)
	return cmmmuo
}

// SetNillableDeletedbyDesignation sets the "deletedbyDesignation" field if the given value is not nil.
func (cmmmuo *CategoryMininumMarkMappingUpdateOne) SetNillableDeletedbyDesignation(s *string) *CategoryMininumMarkMappingUpdateOne {
	if s != nil {
		cmmmuo.SetDeletedbyDesignation(*s)
	}
	return cmmmuo
}

// ClearDeletedbyDesignation clears the value of the "deletedbyDesignation" field.
func (cmmmuo *CategoryMininumMarkMappingUpdateOne) ClearDeletedbyDesignation() *CategoryMininumMarkMappingUpdateOne {
	cmmmuo.mutation.ClearDeletedbyDesignation()
	return cmmmuo
}

// SetDeletedDate sets the "deletedDate" field.
func (cmmmuo *CategoryMininumMarkMappingUpdateOne) SetDeletedDate(t time.Time) *CategoryMininumMarkMappingUpdateOne {
	cmmmuo.mutation.SetDeletedDate(t)
	return cmmmuo
}

// SetNillableDeletedDate sets the "deletedDate" field if the given value is not nil.
func (cmmmuo *CategoryMininumMarkMappingUpdateOne) SetNillableDeletedDate(t *time.Time) *CategoryMininumMarkMappingUpdateOne {
	if t != nil {
		cmmmuo.SetDeletedDate(*t)
	}
	return cmmmuo
}

// ClearDeletedDate clears the value of the "deletedDate" field.
func (cmmmuo *CategoryMininumMarkMappingUpdateOne) ClearDeletedDate() *CategoryMininumMarkMappingUpdateOne {
	cmmmuo.mutation.ClearDeletedDate()
	return cmmmuo
}

// AddLogDatumIDs adds the "LogData" edge to the Logs entity by IDs.
func (cmmmuo *CategoryMininumMarkMappingUpdateOne) AddLogDatumIDs(ids ...int64) *CategoryMininumMarkMappingUpdateOne {
	cmmmuo.mutation.AddLogDatumIDs(ids...)
	return cmmmuo
}

// AddLogData adds the "LogData" edges to the Logs entity.
func (cmmmuo *CategoryMininumMarkMappingUpdateOne) AddLogData(l ...*Logs) *CategoryMininumMarkMappingUpdateOne {
	ids := make([]int64, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return cmmmuo.AddLogDatumIDs(ids...)
}

// Mutation returns the CategoryMininumMarkMappingMutation object of the builder.
func (cmmmuo *CategoryMininumMarkMappingUpdateOne) Mutation() *CategoryMininumMarkMappingMutation {
	return cmmmuo.mutation
}

// ClearLogData clears all "LogData" edges to the Logs entity.
func (cmmmuo *CategoryMininumMarkMappingUpdateOne) ClearLogData() *CategoryMininumMarkMappingUpdateOne {
	cmmmuo.mutation.ClearLogData()
	return cmmmuo
}

// RemoveLogDatumIDs removes the "LogData" edge to Logs entities by IDs.
func (cmmmuo *CategoryMininumMarkMappingUpdateOne) RemoveLogDatumIDs(ids ...int64) *CategoryMininumMarkMappingUpdateOne {
	cmmmuo.mutation.RemoveLogDatumIDs(ids...)
	return cmmmuo
}

// RemoveLogData removes "LogData" edges to Logs entities.
func (cmmmuo *CategoryMininumMarkMappingUpdateOne) RemoveLogData(l ...*Logs) *CategoryMininumMarkMappingUpdateOne {
	ids := make([]int64, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return cmmmuo.RemoveLogDatumIDs(ids...)
}

// Where appends a list predicates to the CategoryMininumMarkMappingUpdate builder.
func (cmmmuo *CategoryMininumMarkMappingUpdateOne) Where(ps ...predicate.CategoryMininumMarkMapping) *CategoryMininumMarkMappingUpdateOne {
	cmmmuo.mutation.Where(ps...)
	return cmmmuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cmmmuo *CategoryMininumMarkMappingUpdateOne) Select(field string, fields ...string) *CategoryMininumMarkMappingUpdateOne {
	cmmmuo.fields = append([]string{field}, fields...)
	return cmmmuo
}

// Save executes the query and returns the updated CategoryMininumMarkMapping entity.
func (cmmmuo *CategoryMininumMarkMappingUpdateOne) Save(ctx context.Context) (*CategoryMininumMarkMapping, error) {
	return withHooks(ctx, cmmmuo.sqlSave, cmmmuo.mutation, cmmmuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cmmmuo *CategoryMininumMarkMappingUpdateOne) SaveX(ctx context.Context) *CategoryMininumMarkMapping {
	node, err := cmmmuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cmmmuo *CategoryMininumMarkMappingUpdateOne) Exec(ctx context.Context) error {
	_, err := cmmmuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cmmmuo *CategoryMininumMarkMappingUpdateOne) ExecX(ctx context.Context) {
	if err := cmmmuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cmmmuo *CategoryMininumMarkMappingUpdateOne) sqlSave(ctx context.Context) (_node *CategoryMininumMarkMapping, err error) {
	_spec := sqlgraph.NewUpdateSpec(categorymininummarkmapping.Table, categorymininummarkmapping.Columns, sqlgraph.NewFieldSpec(categorymininummarkmapping.FieldID, field.TypeInt64))
	id, ok := cmmmuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "CategoryMininumMarkMapping.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cmmmuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, categorymininummarkmapping.FieldID)
		for _, f := range fields {
			if !categorymininummarkmapping.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != categorymininummarkmapping.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cmmmuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cmmmuo.mutation.ExamCode(); ok {
		_spec.SetField(categorymininummarkmapping.FieldExamCode, field.TypeInt64, value)
	}
	if value, ok := cmmmuo.mutation.AddedExamCode(); ok {
		_spec.AddField(categorymininummarkmapping.FieldExamCode, field.TypeInt64, value)
	}
	if cmmmuo.mutation.ExamCodeCleared() {
		_spec.ClearField(categorymininummarkmapping.FieldExamCode, field.TypeInt64)
	}
	if value, ok := cmmmuo.mutation.ExamName(); ok {
		_spec.SetField(categorymininummarkmapping.FieldExamName, field.TypeString, value)
	}
	if cmmmuo.mutation.ExamNameCleared() {
		_spec.ClearField(categorymininummarkmapping.FieldExamName, field.TypeString)
	}
	if value, ok := cmmmuo.mutation.ExamShortName(); ok {
		_spec.SetField(categorymininummarkmapping.FieldExamShortName, field.TypeString, value)
	}
	if cmmmuo.mutation.ExamShortNameCleared() {
		_spec.ClearField(categorymininummarkmapping.FieldExamShortName, field.TypeString)
	}
	if value, ok := cmmmuo.mutation.PaperCode(); ok {
		_spec.SetField(categorymininummarkmapping.FieldPaperCode, field.TypeInt64, value)
	}
	if value, ok := cmmmuo.mutation.AddedPaperCode(); ok {
		_spec.AddField(categorymininummarkmapping.FieldPaperCode, field.TypeInt64, value)
	}
	if cmmmuo.mutation.PaperCodeCleared() {
		_spec.ClearField(categorymininummarkmapping.FieldPaperCode, field.TypeInt64)
	}
	if value, ok := cmmmuo.mutation.PaperDescription(); ok {
		_spec.SetField(categorymininummarkmapping.FieldPaperDescription, field.TypeString, value)
	}
	if cmmmuo.mutation.PaperDescriptionCleared() {
		_spec.ClearField(categorymininummarkmapping.FieldPaperDescription, field.TypeString)
	}
	if value, ok := cmmmuo.mutation.DisabilityTypeID(); ok {
		_spec.SetField(categorymininummarkmapping.FieldDisabilityTypeID, field.TypeInt64, value)
	}
	if value, ok := cmmmuo.mutation.AddedDisabilityTypeID(); ok {
		_spec.AddField(categorymininummarkmapping.FieldDisabilityTypeID, field.TypeInt64, value)
	}
	if cmmmuo.mutation.DisabilityTypeIDCleared() {
		_spec.ClearField(categorymininummarkmapping.FieldDisabilityTypeID, field.TypeInt64)
	}
	if value, ok := cmmmuo.mutation.DisabilityTypeCode(); ok {
		_spec.SetField(categorymininummarkmapping.FieldDisabilityTypeCode, field.TypeString, value)
	}
	if cmmmuo.mutation.DisabilityTypeCodeCleared() {
		_spec.ClearField(categorymininummarkmapping.FieldDisabilityTypeCode, field.TypeString)
	}
	if value, ok := cmmmuo.mutation.DisabilityTypeDescription(); ok {
		_spec.SetField(categorymininummarkmapping.FieldDisabilityTypeDescription, field.TypeString, value)
	}
	if cmmmuo.mutation.DisabilityTypeDescriptionCleared() {
		_spec.ClearField(categorymininummarkmapping.FieldDisabilityTypeDescription, field.TypeString)
	}
	if value, ok := cmmmuo.mutation.MinimumMarks(); ok {
		_spec.SetField(categorymininummarkmapping.FieldMinimumMarks, field.TypeInt64, value)
	}
	if value, ok := cmmmuo.mutation.AddedMinimumMarks(); ok {
		_spec.AddField(categorymininummarkmapping.FieldMinimumMarks, field.TypeInt64, value)
	}
	if cmmmuo.mutation.MinimumMarksCleared() {
		_spec.ClearField(categorymininummarkmapping.FieldMinimumMarks, field.TypeInt64)
	}
	if value, ok := cmmmuo.mutation.OrderNumber(); ok {
		_spec.SetField(categorymininummarkmapping.FieldOrderNumber, field.TypeString, value)
	}
	if cmmmuo.mutation.OrderNumberCleared() {
		_spec.ClearField(categorymininummarkmapping.FieldOrderNumber, field.TypeString)
	}
	if value, ok := cmmmuo.mutation.CreatedById(); ok {
		_spec.SetField(categorymininummarkmapping.FieldCreatedById, field.TypeInt64, value)
	}
	if value, ok := cmmmuo.mutation.AddedCreatedById(); ok {
		_spec.AddField(categorymininummarkmapping.FieldCreatedById, field.TypeInt64, value)
	}
	if cmmmuo.mutation.CreatedByIdCleared() {
		_spec.ClearField(categorymininummarkmapping.FieldCreatedById, field.TypeInt64)
	}
	if value, ok := cmmmuo.mutation.CreatedByUserName(); ok {
		_spec.SetField(categorymininummarkmapping.FieldCreatedByUserName, field.TypeString, value)
	}
	if cmmmuo.mutation.CreatedByUserNameCleared() {
		_spec.ClearField(categorymininummarkmapping.FieldCreatedByUserName, field.TypeString)
	}
	if value, ok := cmmmuo.mutation.CreatedByEmpId(); ok {
		_spec.SetField(categorymininummarkmapping.FieldCreatedByEmpId, field.TypeInt64, value)
	}
	if value, ok := cmmmuo.mutation.AddedCreatedByEmpId(); ok {
		_spec.AddField(categorymininummarkmapping.FieldCreatedByEmpId, field.TypeInt64, value)
	}
	if cmmmuo.mutation.CreatedByEmpIdCleared() {
		_spec.ClearField(categorymininummarkmapping.FieldCreatedByEmpId, field.TypeInt64)
	}
	if value, ok := cmmmuo.mutation.CreatedByDesignation(); ok {
		_spec.SetField(categorymininummarkmapping.FieldCreatedByDesignation, field.TypeString, value)
	}
	if cmmmuo.mutation.CreatedByDesignationCleared() {
		_spec.ClearField(categorymininummarkmapping.FieldCreatedByDesignation, field.TypeString)
	}
	if value, ok := cmmmuo.mutation.CreatedDate(); ok {
		_spec.SetField(categorymininummarkmapping.FieldCreatedDate, field.TypeTime, value)
	}
	if cmmmuo.mutation.CreatedDateCleared() {
		_spec.ClearField(categorymininummarkmapping.FieldCreatedDate, field.TypeTime)
	}
	if value, ok := cmmmuo.mutation.Verifiedbyid(); ok {
		_spec.SetField(categorymininummarkmapping.FieldVerifiedbyid, field.TypeInt64, value)
	}
	if value, ok := cmmmuo.mutation.AddedVerifiedbyid(); ok {
		_spec.AddField(categorymininummarkmapping.FieldVerifiedbyid, field.TypeInt64, value)
	}
	if cmmmuo.mutation.VerifiedbyidCleared() {
		_spec.ClearField(categorymininummarkmapping.FieldVerifiedbyid, field.TypeInt64)
	}
	if value, ok := cmmmuo.mutation.Verifiedbyusername(); ok {
		_spec.SetField(categorymininummarkmapping.FieldVerifiedbyusername, field.TypeString, value)
	}
	if cmmmuo.mutation.VerifiedbyusernameCleared() {
		_spec.ClearField(categorymininummarkmapping.FieldVerifiedbyusername, field.TypeString)
	}
	if value, ok := cmmmuo.mutation.VerifiedbyEmployeeid(); ok {
		_spec.SetField(categorymininummarkmapping.FieldVerifiedbyEmployeeid, field.TypeInt64, value)
	}
	if value, ok := cmmmuo.mutation.AddedVerifiedbyEmployeeid(); ok {
		_spec.AddField(categorymininummarkmapping.FieldVerifiedbyEmployeeid, field.TypeInt64, value)
	}
	if cmmmuo.mutation.VerifiedbyEmployeeidCleared() {
		_spec.ClearField(categorymininummarkmapping.FieldVerifiedbyEmployeeid, field.TypeInt64)
	}
	if value, ok := cmmmuo.mutation.VerifiedbyDesignation(); ok {
		_spec.SetField(categorymininummarkmapping.FieldVerifiedbyDesignation, field.TypeString, value)
	}
	if cmmmuo.mutation.VerifiedbyDesignationCleared() {
		_spec.ClearField(categorymininummarkmapping.FieldVerifiedbyDesignation, field.TypeString)
	}
	if value, ok := cmmmuo.mutation.VerifiedDate(); ok {
		_spec.SetField(categorymininummarkmapping.FieldVerifiedDate, field.TypeTime, value)
	}
	if cmmmuo.mutation.VerifiedDateCleared() {
		_spec.ClearField(categorymininummarkmapping.FieldVerifiedDate, field.TypeTime)
	}
	if value, ok := cmmmuo.mutation.Statuss(); ok {
		_spec.SetField(categorymininummarkmapping.FieldStatuss, field.TypeString, value)
	}
	if cmmmuo.mutation.StatussCleared() {
		_spec.ClearField(categorymininummarkmapping.FieldStatuss, field.TypeString)
	}
	if value, ok := cmmmuo.mutation.Deletedbyid(); ok {
		_spec.SetField(categorymininummarkmapping.FieldDeletedbyid, field.TypeInt64, value)
	}
	if value, ok := cmmmuo.mutation.AddedDeletedbyid(); ok {
		_spec.AddField(categorymininummarkmapping.FieldDeletedbyid, field.TypeInt64, value)
	}
	if cmmmuo.mutation.DeletedbyidCleared() {
		_spec.ClearField(categorymininummarkmapping.FieldDeletedbyid, field.TypeInt64)
	}
	if value, ok := cmmmuo.mutation.Deletedbyusername(); ok {
		_spec.SetField(categorymininummarkmapping.FieldDeletedbyusername, field.TypeString, value)
	}
	if cmmmuo.mutation.DeletedbyusernameCleared() {
		_spec.ClearField(categorymininummarkmapping.FieldDeletedbyusername, field.TypeString)
	}
	if value, ok := cmmmuo.mutation.DeletedbyEmployeeid(); ok {
		_spec.SetField(categorymininummarkmapping.FieldDeletedbyEmployeeid, field.TypeInt64, value)
	}
	if value, ok := cmmmuo.mutation.AddedDeletedbyEmployeeid(); ok {
		_spec.AddField(categorymininummarkmapping.FieldDeletedbyEmployeeid, field.TypeInt64, value)
	}
	if cmmmuo.mutation.DeletedbyEmployeeidCleared() {
		_spec.ClearField(categorymininummarkmapping.FieldDeletedbyEmployeeid, field.TypeInt64)
	}
	if value, ok := cmmmuo.mutation.DeletedbyDesignation(); ok {
		_spec.SetField(categorymininummarkmapping.FieldDeletedbyDesignation, field.TypeString, value)
	}
	if cmmmuo.mutation.DeletedbyDesignationCleared() {
		_spec.ClearField(categorymininummarkmapping.FieldDeletedbyDesignation, field.TypeString)
	}
	if value, ok := cmmmuo.mutation.DeletedDate(); ok {
		_spec.SetField(categorymininummarkmapping.FieldDeletedDate, field.TypeTime, value)
	}
	if cmmmuo.mutation.DeletedDateCleared() {
		_spec.ClearField(categorymininummarkmapping.FieldDeletedDate, field.TypeTime)
	}
	if cmmmuo.mutation.LogDataCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   categorymininummarkmapping.LogDataTable,
			Columns: []string{categorymininummarkmapping.LogDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(logs.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cmmmuo.mutation.RemovedLogDataIDs(); len(nodes) > 0 && !cmmmuo.mutation.LogDataCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   categorymininummarkmapping.LogDataTable,
			Columns: []string{categorymininummarkmapping.LogDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(logs.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cmmmuo.mutation.LogDataIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   categorymininummarkmapping.LogDataTable,
			Columns: []string{categorymininummarkmapping.LogDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(logs.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &CategoryMininumMarkMapping{config: cmmmuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cmmmuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{categorymininummarkmapping.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cmmmuo.mutation.done = true
	return _node, nil
}
