// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"recruit/ent/exam_application_mtspmmg"
	"recruit/ent/predicate"
	"recruit/ent/recommendationsmtspmmgapplications"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// RecommendationsMTSPMMGApplicationsUpdate is the builder for updating RecommendationsMTSPMMGApplications entities.
type RecommendationsMTSPMMGApplicationsUpdate struct {
	config
	hooks    []Hook
	mutation *RecommendationsMTSPMMGApplicationsMutation
}

// Where appends a list predicates to the RecommendationsMTSPMMGApplicationsUpdate builder.
func (rmau *RecommendationsMTSPMMGApplicationsUpdate) Where(ps ...predicate.RecommendationsMTSPMMGApplications) *RecommendationsMTSPMMGApplicationsUpdate {
	rmau.mutation.Where(ps...)
	return rmau
}

// SetApplicationID sets the "ApplicationID" field.
func (rmau *RecommendationsMTSPMMGApplicationsUpdate) SetApplicationID(i int64) *RecommendationsMTSPMMGApplicationsUpdate {
	rmau.mutation.SetApplicationID(i)
	return rmau
}

// SetNillableApplicationID sets the "ApplicationID" field if the given value is not nil.
func (rmau *RecommendationsMTSPMMGApplicationsUpdate) SetNillableApplicationID(i *int64) *RecommendationsMTSPMMGApplicationsUpdate {
	if i != nil {
		rmau.SetApplicationID(*i)
	}
	return rmau
}

// ClearApplicationID clears the value of the "ApplicationID" field.
func (rmau *RecommendationsMTSPMMGApplicationsUpdate) ClearApplicationID() *RecommendationsMTSPMMGApplicationsUpdate {
	rmau.mutation.ClearApplicationID()
	return rmau
}

// SetEmployeeID sets the "EmployeeID" field.
func (rmau *RecommendationsMTSPMMGApplicationsUpdate) SetEmployeeID(i int64) *RecommendationsMTSPMMGApplicationsUpdate {
	rmau.mutation.ResetEmployeeID()
	rmau.mutation.SetEmployeeID(i)
	return rmau
}

// SetNillableEmployeeID sets the "EmployeeID" field if the given value is not nil.
func (rmau *RecommendationsMTSPMMGApplicationsUpdate) SetNillableEmployeeID(i *int64) *RecommendationsMTSPMMGApplicationsUpdate {
	if i != nil {
		rmau.SetEmployeeID(*i)
	}
	return rmau
}

// AddEmployeeID adds i to the "EmployeeID" field.
func (rmau *RecommendationsMTSPMMGApplicationsUpdate) AddEmployeeID(i int64) *RecommendationsMTSPMMGApplicationsUpdate {
	rmau.mutation.AddEmployeeID(i)
	return rmau
}

// ClearEmployeeID clears the value of the "EmployeeID" field.
func (rmau *RecommendationsMTSPMMGApplicationsUpdate) ClearEmployeeID() *RecommendationsMTSPMMGApplicationsUpdate {
	rmau.mutation.ClearEmployeeID()
	return rmau
}

// SetExamNameCode sets the "ExamNameCode" field.
func (rmau *RecommendationsMTSPMMGApplicationsUpdate) SetExamNameCode(s string) *RecommendationsMTSPMMGApplicationsUpdate {
	rmau.mutation.SetExamNameCode(s)
	return rmau
}

// SetNillableExamNameCode sets the "ExamNameCode" field if the given value is not nil.
func (rmau *RecommendationsMTSPMMGApplicationsUpdate) SetNillableExamNameCode(s *string) *RecommendationsMTSPMMGApplicationsUpdate {
	if s != nil {
		rmau.SetExamNameCode(*s)
	}
	return rmau
}

// ClearExamNameCode clears the value of the "ExamNameCode" field.
func (rmau *RecommendationsMTSPMMGApplicationsUpdate) ClearExamNameCode() *RecommendationsMTSPMMGApplicationsUpdate {
	rmau.mutation.ClearExamNameCode()
	return rmau
}

// SetExamYear sets the "ExamYear" field.
func (rmau *RecommendationsMTSPMMGApplicationsUpdate) SetExamYear(s string) *RecommendationsMTSPMMGApplicationsUpdate {
	rmau.mutation.SetExamYear(s)
	return rmau
}

// SetNillableExamYear sets the "ExamYear" field if the given value is not nil.
func (rmau *RecommendationsMTSPMMGApplicationsUpdate) SetNillableExamYear(s *string) *RecommendationsMTSPMMGApplicationsUpdate {
	if s != nil {
		rmau.SetExamYear(*s)
	}
	return rmau
}

// ClearExamYear clears the value of the "ExamYear" field.
func (rmau *RecommendationsMTSPMMGApplicationsUpdate) ClearExamYear() *RecommendationsMTSPMMGApplicationsUpdate {
	rmau.mutation.ClearExamYear()
	return rmau
}

// SetExamName sets the "ExamName" field.
func (rmau *RecommendationsMTSPMMGApplicationsUpdate) SetExamName(s string) *RecommendationsMTSPMMGApplicationsUpdate {
	rmau.mutation.SetExamName(s)
	return rmau
}

// SetNillableExamName sets the "ExamName" field if the given value is not nil.
func (rmau *RecommendationsMTSPMMGApplicationsUpdate) SetNillableExamName(s *string) *RecommendationsMTSPMMGApplicationsUpdate {
	if s != nil {
		rmau.SetExamName(*s)
	}
	return rmau
}

// ClearExamName clears the value of the "ExamName" field.
func (rmau *RecommendationsMTSPMMGApplicationsUpdate) ClearExamName() *RecommendationsMTSPMMGApplicationsUpdate {
	rmau.mutation.ClearExamName()
	return rmau
}

// SetVacancyYear sets the "VacancyYear" field.
func (rmau *RecommendationsMTSPMMGApplicationsUpdate) SetVacancyYear(i int32) *RecommendationsMTSPMMGApplicationsUpdate {
	rmau.mutation.ResetVacancyYear()
	rmau.mutation.SetVacancyYear(i)
	return rmau
}

// SetNillableVacancyYear sets the "VacancyYear" field if the given value is not nil.
func (rmau *RecommendationsMTSPMMGApplicationsUpdate) SetNillableVacancyYear(i *int32) *RecommendationsMTSPMMGApplicationsUpdate {
	if i != nil {
		rmau.SetVacancyYear(*i)
	}
	return rmau
}

// AddVacancyYear adds i to the "VacancyYear" field.
func (rmau *RecommendationsMTSPMMGApplicationsUpdate) AddVacancyYear(i int32) *RecommendationsMTSPMMGApplicationsUpdate {
	rmau.mutation.AddVacancyYear(i)
	return rmau
}

// ClearVacancyYear clears the value of the "VacancyYear" field.
func (rmau *RecommendationsMTSPMMGApplicationsUpdate) ClearVacancyYear() *RecommendationsMTSPMMGApplicationsUpdate {
	rmau.mutation.ClearVacancyYear()
	return rmau
}

// SetCARecommendations sets the "CA_Recommendations" field.
func (rmau *RecommendationsMTSPMMGApplicationsUpdate) SetCARecommendations(s string) *RecommendationsMTSPMMGApplicationsUpdate {
	rmau.mutation.SetCARecommendations(s)
	return rmau
}

// SetNillableCARecommendations sets the "CA_Recommendations" field if the given value is not nil.
func (rmau *RecommendationsMTSPMMGApplicationsUpdate) SetNillableCARecommendations(s *string) *RecommendationsMTSPMMGApplicationsUpdate {
	if s != nil {
		rmau.SetCARecommendations(*s)
	}
	return rmau
}

// ClearCARecommendations clears the value of the "CA_Recommendations" field.
func (rmau *RecommendationsMTSPMMGApplicationsUpdate) ClearCARecommendations() *RecommendationsMTSPMMGApplicationsUpdate {
	rmau.mutation.ClearCARecommendations()
	return rmau
}

// SetCAUpdatedAt sets the "CA_UpdatedAt" field.
func (rmau *RecommendationsMTSPMMGApplicationsUpdate) SetCAUpdatedAt(t time.Time) *RecommendationsMTSPMMGApplicationsUpdate {
	rmau.mutation.SetCAUpdatedAt(t)
	return rmau
}

// SetNillableCAUpdatedAt sets the "CA_UpdatedAt" field if the given value is not nil.
func (rmau *RecommendationsMTSPMMGApplicationsUpdate) SetNillableCAUpdatedAt(t *time.Time) *RecommendationsMTSPMMGApplicationsUpdate {
	if t != nil {
		rmau.SetCAUpdatedAt(*t)
	}
	return rmau
}

// ClearCAUpdatedAt clears the value of the "CA_UpdatedAt" field.
func (rmau *RecommendationsMTSPMMGApplicationsUpdate) ClearCAUpdatedAt() *RecommendationsMTSPMMGApplicationsUpdate {
	rmau.mutation.ClearCAUpdatedAt()
	return rmau
}

// SetCAUserName sets the "CA_UserName" field.
func (rmau *RecommendationsMTSPMMGApplicationsUpdate) SetCAUserName(s string) *RecommendationsMTSPMMGApplicationsUpdate {
	rmau.mutation.SetCAUserName(s)
	return rmau
}

// SetNillableCAUserName sets the "CA_UserName" field if the given value is not nil.
func (rmau *RecommendationsMTSPMMGApplicationsUpdate) SetNillableCAUserName(s *string) *RecommendationsMTSPMMGApplicationsUpdate {
	if s != nil {
		rmau.SetCAUserName(*s)
	}
	return rmau
}

// ClearCAUserName clears the value of the "CA_UserName" field.
func (rmau *RecommendationsMTSPMMGApplicationsUpdate) ClearCAUserName() *RecommendationsMTSPMMGApplicationsUpdate {
	rmau.mutation.ClearCAUserName()
	return rmau
}

// SetCARemarks sets the "CA_Remarks" field.
func (rmau *RecommendationsMTSPMMGApplicationsUpdate) SetCARemarks(s string) *RecommendationsMTSPMMGApplicationsUpdate {
	rmau.mutation.SetCARemarks(s)
	return rmau
}

// SetNillableCARemarks sets the "CA_Remarks" field if the given value is not nil.
func (rmau *RecommendationsMTSPMMGApplicationsUpdate) SetNillableCARemarks(s *string) *RecommendationsMTSPMMGApplicationsUpdate {
	if s != nil {
		rmau.SetCARemarks(*s)
	}
	return rmau
}

// ClearCARemarks clears the value of the "CA_Remarks" field.
func (rmau *RecommendationsMTSPMMGApplicationsUpdate) ClearCARemarks() *RecommendationsMTSPMMGApplicationsUpdate {
	rmau.mutation.ClearCARemarks()
	return rmau
}

// SetNORecommendations sets the "NO_Recommendations" field.
func (rmau *RecommendationsMTSPMMGApplicationsUpdate) SetNORecommendations(s string) *RecommendationsMTSPMMGApplicationsUpdate {
	rmau.mutation.SetNORecommendations(s)
	return rmau
}

// SetNillableNORecommendations sets the "NO_Recommendations" field if the given value is not nil.
func (rmau *RecommendationsMTSPMMGApplicationsUpdate) SetNillableNORecommendations(s *string) *RecommendationsMTSPMMGApplicationsUpdate {
	if s != nil {
		rmau.SetNORecommendations(*s)
	}
	return rmau
}

// ClearNORecommendations clears the value of the "NO_Recommendations" field.
func (rmau *RecommendationsMTSPMMGApplicationsUpdate) ClearNORecommendations() *RecommendationsMTSPMMGApplicationsUpdate {
	rmau.mutation.ClearNORecommendations()
	return rmau
}

// SetNOUpdatedAt sets the "NO_UpdatedAt" field.
func (rmau *RecommendationsMTSPMMGApplicationsUpdate) SetNOUpdatedAt(t time.Time) *RecommendationsMTSPMMGApplicationsUpdate {
	rmau.mutation.SetNOUpdatedAt(t)
	return rmau
}

// SetNillableNOUpdatedAt sets the "NO_UpdatedAt" field if the given value is not nil.
func (rmau *RecommendationsMTSPMMGApplicationsUpdate) SetNillableNOUpdatedAt(t *time.Time) *RecommendationsMTSPMMGApplicationsUpdate {
	if t != nil {
		rmau.SetNOUpdatedAt(*t)
	}
	return rmau
}

// ClearNOUpdatedAt clears the value of the "NO_UpdatedAt" field.
func (rmau *RecommendationsMTSPMMGApplicationsUpdate) ClearNOUpdatedAt() *RecommendationsMTSPMMGApplicationsUpdate {
	rmau.mutation.ClearNOUpdatedAt()
	return rmau
}

// SetNOUserName sets the "NO_UserName" field.
func (rmau *RecommendationsMTSPMMGApplicationsUpdate) SetNOUserName(s string) *RecommendationsMTSPMMGApplicationsUpdate {
	rmau.mutation.SetNOUserName(s)
	return rmau
}

// SetNillableNOUserName sets the "NO_UserName" field if the given value is not nil.
func (rmau *RecommendationsMTSPMMGApplicationsUpdate) SetNillableNOUserName(s *string) *RecommendationsMTSPMMGApplicationsUpdate {
	if s != nil {
		rmau.SetNOUserName(*s)
	}
	return rmau
}

// ClearNOUserName clears the value of the "NO_UserName" field.
func (rmau *RecommendationsMTSPMMGApplicationsUpdate) ClearNOUserName() *RecommendationsMTSPMMGApplicationsUpdate {
	rmau.mutation.ClearNOUserName()
	return rmau
}

// SetNORemarks sets the "NO_Remarks" field.
func (rmau *RecommendationsMTSPMMGApplicationsUpdate) SetNORemarks(s string) *RecommendationsMTSPMMGApplicationsUpdate {
	rmau.mutation.SetNORemarks(s)
	return rmau
}

// SetNillableNORemarks sets the "NO_Remarks" field if the given value is not nil.
func (rmau *RecommendationsMTSPMMGApplicationsUpdate) SetNillableNORemarks(s *string) *RecommendationsMTSPMMGApplicationsUpdate {
	if s != nil {
		rmau.SetNORemarks(*s)
	}
	return rmau
}

// ClearNORemarks clears the value of the "NO_Remarks" field.
func (rmau *RecommendationsMTSPMMGApplicationsUpdate) ClearNORemarks() *RecommendationsMTSPMMGApplicationsUpdate {
	rmau.mutation.ClearNORemarks()
	return rmau
}

// SetApplicationStatus sets the "ApplicationStatus" field.
func (rmau *RecommendationsMTSPMMGApplicationsUpdate) SetApplicationStatus(s string) *RecommendationsMTSPMMGApplicationsUpdate {
	rmau.mutation.SetApplicationStatus(s)
	return rmau
}

// SetNillableApplicationStatus sets the "ApplicationStatus" field if the given value is not nil.
func (rmau *RecommendationsMTSPMMGApplicationsUpdate) SetNillableApplicationStatus(s *string) *RecommendationsMTSPMMGApplicationsUpdate {
	if s != nil {
		rmau.SetApplicationStatus(*s)
	}
	return rmau
}

// ClearApplicationStatus clears the value of the "ApplicationStatus" field.
func (rmau *RecommendationsMTSPMMGApplicationsUpdate) ClearApplicationStatus() *RecommendationsMTSPMMGApplicationsUpdate {
	rmau.mutation.ClearApplicationStatus()
	return rmau
}

// SetUpdatedAt sets the "UpdatedAt" field.
func (rmau *RecommendationsMTSPMMGApplicationsUpdate) SetUpdatedAt(t time.Time) *RecommendationsMTSPMMGApplicationsUpdate {
	rmau.mutation.SetUpdatedAt(t)
	return rmau
}

// SetNillableUpdatedAt sets the "UpdatedAt" field if the given value is not nil.
func (rmau *RecommendationsMTSPMMGApplicationsUpdate) SetNillableUpdatedAt(t *time.Time) *RecommendationsMTSPMMGApplicationsUpdate {
	if t != nil {
		rmau.SetUpdatedAt(*t)
	}
	return rmau
}

// ClearUpdatedAt clears the value of the "UpdatedAt" field.
func (rmau *RecommendationsMTSPMMGApplicationsUpdate) ClearUpdatedAt() *RecommendationsMTSPMMGApplicationsUpdate {
	rmau.mutation.ClearUpdatedAt()
	return rmau
}

// SetUpdatedBy sets the "UpdatedBy" field.
func (rmau *RecommendationsMTSPMMGApplicationsUpdate) SetUpdatedBy(s string) *RecommendationsMTSPMMGApplicationsUpdate {
	rmau.mutation.SetUpdatedBy(s)
	return rmau
}

// SetNillableUpdatedBy sets the "UpdatedBy" field if the given value is not nil.
func (rmau *RecommendationsMTSPMMGApplicationsUpdate) SetNillableUpdatedBy(s *string) *RecommendationsMTSPMMGApplicationsUpdate {
	if s != nil {
		rmau.SetUpdatedBy(*s)
	}
	return rmau
}

// ClearUpdatedBy clears the value of the "UpdatedBy" field.
func (rmau *RecommendationsMTSPMMGApplicationsUpdate) ClearUpdatedBy() *RecommendationsMTSPMMGApplicationsUpdate {
	rmau.mutation.ClearUpdatedBy()
	return rmau
}

// SetGenerateHallTicketFlag sets the "GenerateHallTicketFlag" field.
func (rmau *RecommendationsMTSPMMGApplicationsUpdate) SetGenerateHallTicketFlag(b bool) *RecommendationsMTSPMMGApplicationsUpdate {
	rmau.mutation.SetGenerateHallTicketFlag(b)
	return rmau
}

// SetNillableGenerateHallTicketFlag sets the "GenerateHallTicketFlag" field if the given value is not nil.
func (rmau *RecommendationsMTSPMMGApplicationsUpdate) SetNillableGenerateHallTicketFlag(b *bool) *RecommendationsMTSPMMGApplicationsUpdate {
	if b != nil {
		rmau.SetGenerateHallTicketFlag(*b)
	}
	return rmau
}

// ClearGenerateHallTicketFlag clears the value of the "GenerateHallTicketFlag" field.
func (rmau *RecommendationsMTSPMMGApplicationsUpdate) ClearGenerateHallTicketFlag() *RecommendationsMTSPMMGApplicationsUpdate {
	rmau.mutation.ClearGenerateHallTicketFlag()
	return rmau
}

// SetApplnRefID sets the "ApplnRef" edge to the Exam_Application_MTSPMMG entity by ID.
func (rmau *RecommendationsMTSPMMGApplicationsUpdate) SetApplnRefID(id int64) *RecommendationsMTSPMMGApplicationsUpdate {
	rmau.mutation.SetApplnRefID(id)
	return rmau
}

// SetNillableApplnRefID sets the "ApplnRef" edge to the Exam_Application_MTSPMMG entity by ID if the given value is not nil.
func (rmau *RecommendationsMTSPMMGApplicationsUpdate) SetNillableApplnRefID(id *int64) *RecommendationsMTSPMMGApplicationsUpdate {
	if id != nil {
		rmau = rmau.SetApplnRefID(*id)
	}
	return rmau
}

// SetApplnRef sets the "ApplnRef" edge to the Exam_Application_MTSPMMG entity.
func (rmau *RecommendationsMTSPMMGApplicationsUpdate) SetApplnRef(e *Exam_Application_MTSPMMG) *RecommendationsMTSPMMGApplicationsUpdate {
	return rmau.SetApplnRefID(e.ID)
}

// Mutation returns the RecommendationsMTSPMMGApplicationsMutation object of the builder.
func (rmau *RecommendationsMTSPMMGApplicationsUpdate) Mutation() *RecommendationsMTSPMMGApplicationsMutation {
	return rmau.mutation
}

// ClearApplnRef clears the "ApplnRef" edge to the Exam_Application_MTSPMMG entity.
func (rmau *RecommendationsMTSPMMGApplicationsUpdate) ClearApplnRef() *RecommendationsMTSPMMGApplicationsUpdate {
	rmau.mutation.ClearApplnRef()
	return rmau
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (rmau *RecommendationsMTSPMMGApplicationsUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, rmau.sqlSave, rmau.mutation, rmau.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rmau *RecommendationsMTSPMMGApplicationsUpdate) SaveX(ctx context.Context) int {
	affected, err := rmau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (rmau *RecommendationsMTSPMMGApplicationsUpdate) Exec(ctx context.Context) error {
	_, err := rmau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rmau *RecommendationsMTSPMMGApplicationsUpdate) ExecX(ctx context.Context) {
	if err := rmau.Exec(ctx); err != nil {
		panic(err)
	}
}

func (rmau *RecommendationsMTSPMMGApplicationsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(recommendationsmtspmmgapplications.Table, recommendationsmtspmmgapplications.Columns, sqlgraph.NewFieldSpec(recommendationsmtspmmgapplications.FieldID, field.TypeInt64))
	if ps := rmau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rmau.mutation.EmployeeID(); ok {
		_spec.SetField(recommendationsmtspmmgapplications.FieldEmployeeID, field.TypeInt64, value)
	}
	if value, ok := rmau.mutation.AddedEmployeeID(); ok {
		_spec.AddField(recommendationsmtspmmgapplications.FieldEmployeeID, field.TypeInt64, value)
	}
	if rmau.mutation.EmployeeIDCleared() {
		_spec.ClearField(recommendationsmtspmmgapplications.FieldEmployeeID, field.TypeInt64)
	}
	if value, ok := rmau.mutation.ExamNameCode(); ok {
		_spec.SetField(recommendationsmtspmmgapplications.FieldExamNameCode, field.TypeString, value)
	}
	if rmau.mutation.ExamNameCodeCleared() {
		_spec.ClearField(recommendationsmtspmmgapplications.FieldExamNameCode, field.TypeString)
	}
	if value, ok := rmau.mutation.ExamYear(); ok {
		_spec.SetField(recommendationsmtspmmgapplications.FieldExamYear, field.TypeString, value)
	}
	if rmau.mutation.ExamYearCleared() {
		_spec.ClearField(recommendationsmtspmmgapplications.FieldExamYear, field.TypeString)
	}
	if value, ok := rmau.mutation.ExamName(); ok {
		_spec.SetField(recommendationsmtspmmgapplications.FieldExamName, field.TypeString, value)
	}
	if rmau.mutation.ExamNameCleared() {
		_spec.ClearField(recommendationsmtspmmgapplications.FieldExamName, field.TypeString)
	}
	if value, ok := rmau.mutation.VacancyYear(); ok {
		_spec.SetField(recommendationsmtspmmgapplications.FieldVacancyYear, field.TypeInt32, value)
	}
	if value, ok := rmau.mutation.AddedVacancyYear(); ok {
		_spec.AddField(recommendationsmtspmmgapplications.FieldVacancyYear, field.TypeInt32, value)
	}
	if rmau.mutation.VacancyYearCleared() {
		_spec.ClearField(recommendationsmtspmmgapplications.FieldVacancyYear, field.TypeInt32)
	}
	if value, ok := rmau.mutation.CARecommendations(); ok {
		_spec.SetField(recommendationsmtspmmgapplications.FieldCARecommendations, field.TypeString, value)
	}
	if rmau.mutation.CARecommendationsCleared() {
		_spec.ClearField(recommendationsmtspmmgapplications.FieldCARecommendations, field.TypeString)
	}
	if value, ok := rmau.mutation.CAUpdatedAt(); ok {
		_spec.SetField(recommendationsmtspmmgapplications.FieldCAUpdatedAt, field.TypeTime, value)
	}
	if rmau.mutation.CAUpdatedAtCleared() {
		_spec.ClearField(recommendationsmtspmmgapplications.FieldCAUpdatedAt, field.TypeTime)
	}
	if value, ok := rmau.mutation.CAUserName(); ok {
		_spec.SetField(recommendationsmtspmmgapplications.FieldCAUserName, field.TypeString, value)
	}
	if rmau.mutation.CAUserNameCleared() {
		_spec.ClearField(recommendationsmtspmmgapplications.FieldCAUserName, field.TypeString)
	}
	if value, ok := rmau.mutation.CARemarks(); ok {
		_spec.SetField(recommendationsmtspmmgapplications.FieldCARemarks, field.TypeString, value)
	}
	if rmau.mutation.CARemarksCleared() {
		_spec.ClearField(recommendationsmtspmmgapplications.FieldCARemarks, field.TypeString)
	}
	if value, ok := rmau.mutation.NORecommendations(); ok {
		_spec.SetField(recommendationsmtspmmgapplications.FieldNORecommendations, field.TypeString, value)
	}
	if rmau.mutation.NORecommendationsCleared() {
		_spec.ClearField(recommendationsmtspmmgapplications.FieldNORecommendations, field.TypeString)
	}
	if value, ok := rmau.mutation.NOUpdatedAt(); ok {
		_spec.SetField(recommendationsmtspmmgapplications.FieldNOUpdatedAt, field.TypeTime, value)
	}
	if rmau.mutation.NOUpdatedAtCleared() {
		_spec.ClearField(recommendationsmtspmmgapplications.FieldNOUpdatedAt, field.TypeTime)
	}
	if value, ok := rmau.mutation.NOUserName(); ok {
		_spec.SetField(recommendationsmtspmmgapplications.FieldNOUserName, field.TypeString, value)
	}
	if rmau.mutation.NOUserNameCleared() {
		_spec.ClearField(recommendationsmtspmmgapplications.FieldNOUserName, field.TypeString)
	}
	if value, ok := rmau.mutation.NORemarks(); ok {
		_spec.SetField(recommendationsmtspmmgapplications.FieldNORemarks, field.TypeString, value)
	}
	if rmau.mutation.NORemarksCleared() {
		_spec.ClearField(recommendationsmtspmmgapplications.FieldNORemarks, field.TypeString)
	}
	if value, ok := rmau.mutation.ApplicationStatus(); ok {
		_spec.SetField(recommendationsmtspmmgapplications.FieldApplicationStatus, field.TypeString, value)
	}
	if rmau.mutation.ApplicationStatusCleared() {
		_spec.ClearField(recommendationsmtspmmgapplications.FieldApplicationStatus, field.TypeString)
	}
	if value, ok := rmau.mutation.UpdatedAt(); ok {
		_spec.SetField(recommendationsmtspmmgapplications.FieldUpdatedAt, field.TypeTime, value)
	}
	if rmau.mutation.UpdatedAtCleared() {
		_spec.ClearField(recommendationsmtspmmgapplications.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := rmau.mutation.UpdatedBy(); ok {
		_spec.SetField(recommendationsmtspmmgapplications.FieldUpdatedBy, field.TypeString, value)
	}
	if rmau.mutation.UpdatedByCleared() {
		_spec.ClearField(recommendationsmtspmmgapplications.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := rmau.mutation.GenerateHallTicketFlag(); ok {
		_spec.SetField(recommendationsmtspmmgapplications.FieldGenerateHallTicketFlag, field.TypeBool, value)
	}
	if rmau.mutation.GenerateHallTicketFlagCleared() {
		_spec.ClearField(recommendationsmtspmmgapplications.FieldGenerateHallTicketFlag, field.TypeBool)
	}
	if rmau.mutation.ApplnRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   recommendationsmtspmmgapplications.ApplnRefTable,
			Columns: []string{recommendationsmtspmmgapplications.ApplnRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_application_mtspmmg.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rmau.mutation.ApplnRefIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   recommendationsmtspmmgapplications.ApplnRefTable,
			Columns: []string{recommendationsmtspmmgapplications.ApplnRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_application_mtspmmg.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, rmau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{recommendationsmtspmmgapplications.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	rmau.mutation.done = true
	return n, nil
}

// RecommendationsMTSPMMGApplicationsUpdateOne is the builder for updating a single RecommendationsMTSPMMGApplications entity.
type RecommendationsMTSPMMGApplicationsUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *RecommendationsMTSPMMGApplicationsMutation
}

// SetApplicationID sets the "ApplicationID" field.
func (rmauo *RecommendationsMTSPMMGApplicationsUpdateOne) SetApplicationID(i int64) *RecommendationsMTSPMMGApplicationsUpdateOne {
	rmauo.mutation.SetApplicationID(i)
	return rmauo
}

// SetNillableApplicationID sets the "ApplicationID" field if the given value is not nil.
func (rmauo *RecommendationsMTSPMMGApplicationsUpdateOne) SetNillableApplicationID(i *int64) *RecommendationsMTSPMMGApplicationsUpdateOne {
	if i != nil {
		rmauo.SetApplicationID(*i)
	}
	return rmauo
}

// ClearApplicationID clears the value of the "ApplicationID" field.
func (rmauo *RecommendationsMTSPMMGApplicationsUpdateOne) ClearApplicationID() *RecommendationsMTSPMMGApplicationsUpdateOne {
	rmauo.mutation.ClearApplicationID()
	return rmauo
}

// SetEmployeeID sets the "EmployeeID" field.
func (rmauo *RecommendationsMTSPMMGApplicationsUpdateOne) SetEmployeeID(i int64) *RecommendationsMTSPMMGApplicationsUpdateOne {
	rmauo.mutation.ResetEmployeeID()
	rmauo.mutation.SetEmployeeID(i)
	return rmauo
}

// SetNillableEmployeeID sets the "EmployeeID" field if the given value is not nil.
func (rmauo *RecommendationsMTSPMMGApplicationsUpdateOne) SetNillableEmployeeID(i *int64) *RecommendationsMTSPMMGApplicationsUpdateOne {
	if i != nil {
		rmauo.SetEmployeeID(*i)
	}
	return rmauo
}

// AddEmployeeID adds i to the "EmployeeID" field.
func (rmauo *RecommendationsMTSPMMGApplicationsUpdateOne) AddEmployeeID(i int64) *RecommendationsMTSPMMGApplicationsUpdateOne {
	rmauo.mutation.AddEmployeeID(i)
	return rmauo
}

// ClearEmployeeID clears the value of the "EmployeeID" field.
func (rmauo *RecommendationsMTSPMMGApplicationsUpdateOne) ClearEmployeeID() *RecommendationsMTSPMMGApplicationsUpdateOne {
	rmauo.mutation.ClearEmployeeID()
	return rmauo
}

// SetExamNameCode sets the "ExamNameCode" field.
func (rmauo *RecommendationsMTSPMMGApplicationsUpdateOne) SetExamNameCode(s string) *RecommendationsMTSPMMGApplicationsUpdateOne {
	rmauo.mutation.SetExamNameCode(s)
	return rmauo
}

// SetNillableExamNameCode sets the "ExamNameCode" field if the given value is not nil.
func (rmauo *RecommendationsMTSPMMGApplicationsUpdateOne) SetNillableExamNameCode(s *string) *RecommendationsMTSPMMGApplicationsUpdateOne {
	if s != nil {
		rmauo.SetExamNameCode(*s)
	}
	return rmauo
}

// ClearExamNameCode clears the value of the "ExamNameCode" field.
func (rmauo *RecommendationsMTSPMMGApplicationsUpdateOne) ClearExamNameCode() *RecommendationsMTSPMMGApplicationsUpdateOne {
	rmauo.mutation.ClearExamNameCode()
	return rmauo
}

// SetExamYear sets the "ExamYear" field.
func (rmauo *RecommendationsMTSPMMGApplicationsUpdateOne) SetExamYear(s string) *RecommendationsMTSPMMGApplicationsUpdateOne {
	rmauo.mutation.SetExamYear(s)
	return rmauo
}

// SetNillableExamYear sets the "ExamYear" field if the given value is not nil.
func (rmauo *RecommendationsMTSPMMGApplicationsUpdateOne) SetNillableExamYear(s *string) *RecommendationsMTSPMMGApplicationsUpdateOne {
	if s != nil {
		rmauo.SetExamYear(*s)
	}
	return rmauo
}

// ClearExamYear clears the value of the "ExamYear" field.
func (rmauo *RecommendationsMTSPMMGApplicationsUpdateOne) ClearExamYear() *RecommendationsMTSPMMGApplicationsUpdateOne {
	rmauo.mutation.ClearExamYear()
	return rmauo
}

// SetExamName sets the "ExamName" field.
func (rmauo *RecommendationsMTSPMMGApplicationsUpdateOne) SetExamName(s string) *RecommendationsMTSPMMGApplicationsUpdateOne {
	rmauo.mutation.SetExamName(s)
	return rmauo
}

// SetNillableExamName sets the "ExamName" field if the given value is not nil.
func (rmauo *RecommendationsMTSPMMGApplicationsUpdateOne) SetNillableExamName(s *string) *RecommendationsMTSPMMGApplicationsUpdateOne {
	if s != nil {
		rmauo.SetExamName(*s)
	}
	return rmauo
}

// ClearExamName clears the value of the "ExamName" field.
func (rmauo *RecommendationsMTSPMMGApplicationsUpdateOne) ClearExamName() *RecommendationsMTSPMMGApplicationsUpdateOne {
	rmauo.mutation.ClearExamName()
	return rmauo
}

// SetVacancyYear sets the "VacancyYear" field.
func (rmauo *RecommendationsMTSPMMGApplicationsUpdateOne) SetVacancyYear(i int32) *RecommendationsMTSPMMGApplicationsUpdateOne {
	rmauo.mutation.ResetVacancyYear()
	rmauo.mutation.SetVacancyYear(i)
	return rmauo
}

// SetNillableVacancyYear sets the "VacancyYear" field if the given value is not nil.
func (rmauo *RecommendationsMTSPMMGApplicationsUpdateOne) SetNillableVacancyYear(i *int32) *RecommendationsMTSPMMGApplicationsUpdateOne {
	if i != nil {
		rmauo.SetVacancyYear(*i)
	}
	return rmauo
}

// AddVacancyYear adds i to the "VacancyYear" field.
func (rmauo *RecommendationsMTSPMMGApplicationsUpdateOne) AddVacancyYear(i int32) *RecommendationsMTSPMMGApplicationsUpdateOne {
	rmauo.mutation.AddVacancyYear(i)
	return rmauo
}

// ClearVacancyYear clears the value of the "VacancyYear" field.
func (rmauo *RecommendationsMTSPMMGApplicationsUpdateOne) ClearVacancyYear() *RecommendationsMTSPMMGApplicationsUpdateOne {
	rmauo.mutation.ClearVacancyYear()
	return rmauo
}

// SetCARecommendations sets the "CA_Recommendations" field.
func (rmauo *RecommendationsMTSPMMGApplicationsUpdateOne) SetCARecommendations(s string) *RecommendationsMTSPMMGApplicationsUpdateOne {
	rmauo.mutation.SetCARecommendations(s)
	return rmauo
}

// SetNillableCARecommendations sets the "CA_Recommendations" field if the given value is not nil.
func (rmauo *RecommendationsMTSPMMGApplicationsUpdateOne) SetNillableCARecommendations(s *string) *RecommendationsMTSPMMGApplicationsUpdateOne {
	if s != nil {
		rmauo.SetCARecommendations(*s)
	}
	return rmauo
}

// ClearCARecommendations clears the value of the "CA_Recommendations" field.
func (rmauo *RecommendationsMTSPMMGApplicationsUpdateOne) ClearCARecommendations() *RecommendationsMTSPMMGApplicationsUpdateOne {
	rmauo.mutation.ClearCARecommendations()
	return rmauo
}

// SetCAUpdatedAt sets the "CA_UpdatedAt" field.
func (rmauo *RecommendationsMTSPMMGApplicationsUpdateOne) SetCAUpdatedAt(t time.Time) *RecommendationsMTSPMMGApplicationsUpdateOne {
	rmauo.mutation.SetCAUpdatedAt(t)
	return rmauo
}

// SetNillableCAUpdatedAt sets the "CA_UpdatedAt" field if the given value is not nil.
func (rmauo *RecommendationsMTSPMMGApplicationsUpdateOne) SetNillableCAUpdatedAt(t *time.Time) *RecommendationsMTSPMMGApplicationsUpdateOne {
	if t != nil {
		rmauo.SetCAUpdatedAt(*t)
	}
	return rmauo
}

// ClearCAUpdatedAt clears the value of the "CA_UpdatedAt" field.
func (rmauo *RecommendationsMTSPMMGApplicationsUpdateOne) ClearCAUpdatedAt() *RecommendationsMTSPMMGApplicationsUpdateOne {
	rmauo.mutation.ClearCAUpdatedAt()
	return rmauo
}

// SetCAUserName sets the "CA_UserName" field.
func (rmauo *RecommendationsMTSPMMGApplicationsUpdateOne) SetCAUserName(s string) *RecommendationsMTSPMMGApplicationsUpdateOne {
	rmauo.mutation.SetCAUserName(s)
	return rmauo
}

// SetNillableCAUserName sets the "CA_UserName" field if the given value is not nil.
func (rmauo *RecommendationsMTSPMMGApplicationsUpdateOne) SetNillableCAUserName(s *string) *RecommendationsMTSPMMGApplicationsUpdateOne {
	if s != nil {
		rmauo.SetCAUserName(*s)
	}
	return rmauo
}

// ClearCAUserName clears the value of the "CA_UserName" field.
func (rmauo *RecommendationsMTSPMMGApplicationsUpdateOne) ClearCAUserName() *RecommendationsMTSPMMGApplicationsUpdateOne {
	rmauo.mutation.ClearCAUserName()
	return rmauo
}

// SetCARemarks sets the "CA_Remarks" field.
func (rmauo *RecommendationsMTSPMMGApplicationsUpdateOne) SetCARemarks(s string) *RecommendationsMTSPMMGApplicationsUpdateOne {
	rmauo.mutation.SetCARemarks(s)
	return rmauo
}

// SetNillableCARemarks sets the "CA_Remarks" field if the given value is not nil.
func (rmauo *RecommendationsMTSPMMGApplicationsUpdateOne) SetNillableCARemarks(s *string) *RecommendationsMTSPMMGApplicationsUpdateOne {
	if s != nil {
		rmauo.SetCARemarks(*s)
	}
	return rmauo
}

// ClearCARemarks clears the value of the "CA_Remarks" field.
func (rmauo *RecommendationsMTSPMMGApplicationsUpdateOne) ClearCARemarks() *RecommendationsMTSPMMGApplicationsUpdateOne {
	rmauo.mutation.ClearCARemarks()
	return rmauo
}

// SetNORecommendations sets the "NO_Recommendations" field.
func (rmauo *RecommendationsMTSPMMGApplicationsUpdateOne) SetNORecommendations(s string) *RecommendationsMTSPMMGApplicationsUpdateOne {
	rmauo.mutation.SetNORecommendations(s)
	return rmauo
}

// SetNillableNORecommendations sets the "NO_Recommendations" field if the given value is not nil.
func (rmauo *RecommendationsMTSPMMGApplicationsUpdateOne) SetNillableNORecommendations(s *string) *RecommendationsMTSPMMGApplicationsUpdateOne {
	if s != nil {
		rmauo.SetNORecommendations(*s)
	}
	return rmauo
}

// ClearNORecommendations clears the value of the "NO_Recommendations" field.
func (rmauo *RecommendationsMTSPMMGApplicationsUpdateOne) ClearNORecommendations() *RecommendationsMTSPMMGApplicationsUpdateOne {
	rmauo.mutation.ClearNORecommendations()
	return rmauo
}

// SetNOUpdatedAt sets the "NO_UpdatedAt" field.
func (rmauo *RecommendationsMTSPMMGApplicationsUpdateOne) SetNOUpdatedAt(t time.Time) *RecommendationsMTSPMMGApplicationsUpdateOne {
	rmauo.mutation.SetNOUpdatedAt(t)
	return rmauo
}

// SetNillableNOUpdatedAt sets the "NO_UpdatedAt" field if the given value is not nil.
func (rmauo *RecommendationsMTSPMMGApplicationsUpdateOne) SetNillableNOUpdatedAt(t *time.Time) *RecommendationsMTSPMMGApplicationsUpdateOne {
	if t != nil {
		rmauo.SetNOUpdatedAt(*t)
	}
	return rmauo
}

// ClearNOUpdatedAt clears the value of the "NO_UpdatedAt" field.
func (rmauo *RecommendationsMTSPMMGApplicationsUpdateOne) ClearNOUpdatedAt() *RecommendationsMTSPMMGApplicationsUpdateOne {
	rmauo.mutation.ClearNOUpdatedAt()
	return rmauo
}

// SetNOUserName sets the "NO_UserName" field.
func (rmauo *RecommendationsMTSPMMGApplicationsUpdateOne) SetNOUserName(s string) *RecommendationsMTSPMMGApplicationsUpdateOne {
	rmauo.mutation.SetNOUserName(s)
	return rmauo
}

// SetNillableNOUserName sets the "NO_UserName" field if the given value is not nil.
func (rmauo *RecommendationsMTSPMMGApplicationsUpdateOne) SetNillableNOUserName(s *string) *RecommendationsMTSPMMGApplicationsUpdateOne {
	if s != nil {
		rmauo.SetNOUserName(*s)
	}
	return rmauo
}

// ClearNOUserName clears the value of the "NO_UserName" field.
func (rmauo *RecommendationsMTSPMMGApplicationsUpdateOne) ClearNOUserName() *RecommendationsMTSPMMGApplicationsUpdateOne {
	rmauo.mutation.ClearNOUserName()
	return rmauo
}

// SetNORemarks sets the "NO_Remarks" field.
func (rmauo *RecommendationsMTSPMMGApplicationsUpdateOne) SetNORemarks(s string) *RecommendationsMTSPMMGApplicationsUpdateOne {
	rmauo.mutation.SetNORemarks(s)
	return rmauo
}

// SetNillableNORemarks sets the "NO_Remarks" field if the given value is not nil.
func (rmauo *RecommendationsMTSPMMGApplicationsUpdateOne) SetNillableNORemarks(s *string) *RecommendationsMTSPMMGApplicationsUpdateOne {
	if s != nil {
		rmauo.SetNORemarks(*s)
	}
	return rmauo
}

// ClearNORemarks clears the value of the "NO_Remarks" field.
func (rmauo *RecommendationsMTSPMMGApplicationsUpdateOne) ClearNORemarks() *RecommendationsMTSPMMGApplicationsUpdateOne {
	rmauo.mutation.ClearNORemarks()
	return rmauo
}

// SetApplicationStatus sets the "ApplicationStatus" field.
func (rmauo *RecommendationsMTSPMMGApplicationsUpdateOne) SetApplicationStatus(s string) *RecommendationsMTSPMMGApplicationsUpdateOne {
	rmauo.mutation.SetApplicationStatus(s)
	return rmauo
}

// SetNillableApplicationStatus sets the "ApplicationStatus" field if the given value is not nil.
func (rmauo *RecommendationsMTSPMMGApplicationsUpdateOne) SetNillableApplicationStatus(s *string) *RecommendationsMTSPMMGApplicationsUpdateOne {
	if s != nil {
		rmauo.SetApplicationStatus(*s)
	}
	return rmauo
}

// ClearApplicationStatus clears the value of the "ApplicationStatus" field.
func (rmauo *RecommendationsMTSPMMGApplicationsUpdateOne) ClearApplicationStatus() *RecommendationsMTSPMMGApplicationsUpdateOne {
	rmauo.mutation.ClearApplicationStatus()
	return rmauo
}

// SetUpdatedAt sets the "UpdatedAt" field.
func (rmauo *RecommendationsMTSPMMGApplicationsUpdateOne) SetUpdatedAt(t time.Time) *RecommendationsMTSPMMGApplicationsUpdateOne {
	rmauo.mutation.SetUpdatedAt(t)
	return rmauo
}

// SetNillableUpdatedAt sets the "UpdatedAt" field if the given value is not nil.
func (rmauo *RecommendationsMTSPMMGApplicationsUpdateOne) SetNillableUpdatedAt(t *time.Time) *RecommendationsMTSPMMGApplicationsUpdateOne {
	if t != nil {
		rmauo.SetUpdatedAt(*t)
	}
	return rmauo
}

// ClearUpdatedAt clears the value of the "UpdatedAt" field.
func (rmauo *RecommendationsMTSPMMGApplicationsUpdateOne) ClearUpdatedAt() *RecommendationsMTSPMMGApplicationsUpdateOne {
	rmauo.mutation.ClearUpdatedAt()
	return rmauo
}

// SetUpdatedBy sets the "UpdatedBy" field.
func (rmauo *RecommendationsMTSPMMGApplicationsUpdateOne) SetUpdatedBy(s string) *RecommendationsMTSPMMGApplicationsUpdateOne {
	rmauo.mutation.SetUpdatedBy(s)
	return rmauo
}

// SetNillableUpdatedBy sets the "UpdatedBy" field if the given value is not nil.
func (rmauo *RecommendationsMTSPMMGApplicationsUpdateOne) SetNillableUpdatedBy(s *string) *RecommendationsMTSPMMGApplicationsUpdateOne {
	if s != nil {
		rmauo.SetUpdatedBy(*s)
	}
	return rmauo
}

// ClearUpdatedBy clears the value of the "UpdatedBy" field.
func (rmauo *RecommendationsMTSPMMGApplicationsUpdateOne) ClearUpdatedBy() *RecommendationsMTSPMMGApplicationsUpdateOne {
	rmauo.mutation.ClearUpdatedBy()
	return rmauo
}

// SetGenerateHallTicketFlag sets the "GenerateHallTicketFlag" field.
func (rmauo *RecommendationsMTSPMMGApplicationsUpdateOne) SetGenerateHallTicketFlag(b bool) *RecommendationsMTSPMMGApplicationsUpdateOne {
	rmauo.mutation.SetGenerateHallTicketFlag(b)
	return rmauo
}

// SetNillableGenerateHallTicketFlag sets the "GenerateHallTicketFlag" field if the given value is not nil.
func (rmauo *RecommendationsMTSPMMGApplicationsUpdateOne) SetNillableGenerateHallTicketFlag(b *bool) *RecommendationsMTSPMMGApplicationsUpdateOne {
	if b != nil {
		rmauo.SetGenerateHallTicketFlag(*b)
	}
	return rmauo
}

// ClearGenerateHallTicketFlag clears the value of the "GenerateHallTicketFlag" field.
func (rmauo *RecommendationsMTSPMMGApplicationsUpdateOne) ClearGenerateHallTicketFlag() *RecommendationsMTSPMMGApplicationsUpdateOne {
	rmauo.mutation.ClearGenerateHallTicketFlag()
	return rmauo
}

// SetApplnRefID sets the "ApplnRef" edge to the Exam_Application_MTSPMMG entity by ID.
func (rmauo *RecommendationsMTSPMMGApplicationsUpdateOne) SetApplnRefID(id int64) *RecommendationsMTSPMMGApplicationsUpdateOne {
	rmauo.mutation.SetApplnRefID(id)
	return rmauo
}

// SetNillableApplnRefID sets the "ApplnRef" edge to the Exam_Application_MTSPMMG entity by ID if the given value is not nil.
func (rmauo *RecommendationsMTSPMMGApplicationsUpdateOne) SetNillableApplnRefID(id *int64) *RecommendationsMTSPMMGApplicationsUpdateOne {
	if id != nil {
		rmauo = rmauo.SetApplnRefID(*id)
	}
	return rmauo
}

// SetApplnRef sets the "ApplnRef" edge to the Exam_Application_MTSPMMG entity.
func (rmauo *RecommendationsMTSPMMGApplicationsUpdateOne) SetApplnRef(e *Exam_Application_MTSPMMG) *RecommendationsMTSPMMGApplicationsUpdateOne {
	return rmauo.SetApplnRefID(e.ID)
}

// Mutation returns the RecommendationsMTSPMMGApplicationsMutation object of the builder.
func (rmauo *RecommendationsMTSPMMGApplicationsUpdateOne) Mutation() *RecommendationsMTSPMMGApplicationsMutation {
	return rmauo.mutation
}

// ClearApplnRef clears the "ApplnRef" edge to the Exam_Application_MTSPMMG entity.
func (rmauo *RecommendationsMTSPMMGApplicationsUpdateOne) ClearApplnRef() *RecommendationsMTSPMMGApplicationsUpdateOne {
	rmauo.mutation.ClearApplnRef()
	return rmauo
}

// Where appends a list predicates to the RecommendationsMTSPMMGApplicationsUpdate builder.
func (rmauo *RecommendationsMTSPMMGApplicationsUpdateOne) Where(ps ...predicate.RecommendationsMTSPMMGApplications) *RecommendationsMTSPMMGApplicationsUpdateOne {
	rmauo.mutation.Where(ps...)
	return rmauo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (rmauo *RecommendationsMTSPMMGApplicationsUpdateOne) Select(field string, fields ...string) *RecommendationsMTSPMMGApplicationsUpdateOne {
	rmauo.fields = append([]string{field}, fields...)
	return rmauo
}

// Save executes the query and returns the updated RecommendationsMTSPMMGApplications entity.
func (rmauo *RecommendationsMTSPMMGApplicationsUpdateOne) Save(ctx context.Context) (*RecommendationsMTSPMMGApplications, error) {
	return withHooks(ctx, rmauo.sqlSave, rmauo.mutation, rmauo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rmauo *RecommendationsMTSPMMGApplicationsUpdateOne) SaveX(ctx context.Context) *RecommendationsMTSPMMGApplications {
	node, err := rmauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (rmauo *RecommendationsMTSPMMGApplicationsUpdateOne) Exec(ctx context.Context) error {
	_, err := rmauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rmauo *RecommendationsMTSPMMGApplicationsUpdateOne) ExecX(ctx context.Context) {
	if err := rmauo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (rmauo *RecommendationsMTSPMMGApplicationsUpdateOne) sqlSave(ctx context.Context) (_node *RecommendationsMTSPMMGApplications, err error) {
	_spec := sqlgraph.NewUpdateSpec(recommendationsmtspmmgapplications.Table, recommendationsmtspmmgapplications.Columns, sqlgraph.NewFieldSpec(recommendationsmtspmmgapplications.FieldID, field.TypeInt64))
	id, ok := rmauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "RecommendationsMTSPMMGApplications.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := rmauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, recommendationsmtspmmgapplications.FieldID)
		for _, f := range fields {
			if !recommendationsmtspmmgapplications.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != recommendationsmtspmmgapplications.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := rmauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rmauo.mutation.EmployeeID(); ok {
		_spec.SetField(recommendationsmtspmmgapplications.FieldEmployeeID, field.TypeInt64, value)
	}
	if value, ok := rmauo.mutation.AddedEmployeeID(); ok {
		_spec.AddField(recommendationsmtspmmgapplications.FieldEmployeeID, field.TypeInt64, value)
	}
	if rmauo.mutation.EmployeeIDCleared() {
		_spec.ClearField(recommendationsmtspmmgapplications.FieldEmployeeID, field.TypeInt64)
	}
	if value, ok := rmauo.mutation.ExamNameCode(); ok {
		_spec.SetField(recommendationsmtspmmgapplications.FieldExamNameCode, field.TypeString, value)
	}
	if rmauo.mutation.ExamNameCodeCleared() {
		_spec.ClearField(recommendationsmtspmmgapplications.FieldExamNameCode, field.TypeString)
	}
	if value, ok := rmauo.mutation.ExamYear(); ok {
		_spec.SetField(recommendationsmtspmmgapplications.FieldExamYear, field.TypeString, value)
	}
	if rmauo.mutation.ExamYearCleared() {
		_spec.ClearField(recommendationsmtspmmgapplications.FieldExamYear, field.TypeString)
	}
	if value, ok := rmauo.mutation.ExamName(); ok {
		_spec.SetField(recommendationsmtspmmgapplications.FieldExamName, field.TypeString, value)
	}
	if rmauo.mutation.ExamNameCleared() {
		_spec.ClearField(recommendationsmtspmmgapplications.FieldExamName, field.TypeString)
	}
	if value, ok := rmauo.mutation.VacancyYear(); ok {
		_spec.SetField(recommendationsmtspmmgapplications.FieldVacancyYear, field.TypeInt32, value)
	}
	if value, ok := rmauo.mutation.AddedVacancyYear(); ok {
		_spec.AddField(recommendationsmtspmmgapplications.FieldVacancyYear, field.TypeInt32, value)
	}
	if rmauo.mutation.VacancyYearCleared() {
		_spec.ClearField(recommendationsmtspmmgapplications.FieldVacancyYear, field.TypeInt32)
	}
	if value, ok := rmauo.mutation.CARecommendations(); ok {
		_spec.SetField(recommendationsmtspmmgapplications.FieldCARecommendations, field.TypeString, value)
	}
	if rmauo.mutation.CARecommendationsCleared() {
		_spec.ClearField(recommendationsmtspmmgapplications.FieldCARecommendations, field.TypeString)
	}
	if value, ok := rmauo.mutation.CAUpdatedAt(); ok {
		_spec.SetField(recommendationsmtspmmgapplications.FieldCAUpdatedAt, field.TypeTime, value)
	}
	if rmauo.mutation.CAUpdatedAtCleared() {
		_spec.ClearField(recommendationsmtspmmgapplications.FieldCAUpdatedAt, field.TypeTime)
	}
	if value, ok := rmauo.mutation.CAUserName(); ok {
		_spec.SetField(recommendationsmtspmmgapplications.FieldCAUserName, field.TypeString, value)
	}
	if rmauo.mutation.CAUserNameCleared() {
		_spec.ClearField(recommendationsmtspmmgapplications.FieldCAUserName, field.TypeString)
	}
	if value, ok := rmauo.mutation.CARemarks(); ok {
		_spec.SetField(recommendationsmtspmmgapplications.FieldCARemarks, field.TypeString, value)
	}
	if rmauo.mutation.CARemarksCleared() {
		_spec.ClearField(recommendationsmtspmmgapplications.FieldCARemarks, field.TypeString)
	}
	if value, ok := rmauo.mutation.NORecommendations(); ok {
		_spec.SetField(recommendationsmtspmmgapplications.FieldNORecommendations, field.TypeString, value)
	}
	if rmauo.mutation.NORecommendationsCleared() {
		_spec.ClearField(recommendationsmtspmmgapplications.FieldNORecommendations, field.TypeString)
	}
	if value, ok := rmauo.mutation.NOUpdatedAt(); ok {
		_spec.SetField(recommendationsmtspmmgapplications.FieldNOUpdatedAt, field.TypeTime, value)
	}
	if rmauo.mutation.NOUpdatedAtCleared() {
		_spec.ClearField(recommendationsmtspmmgapplications.FieldNOUpdatedAt, field.TypeTime)
	}
	if value, ok := rmauo.mutation.NOUserName(); ok {
		_spec.SetField(recommendationsmtspmmgapplications.FieldNOUserName, field.TypeString, value)
	}
	if rmauo.mutation.NOUserNameCleared() {
		_spec.ClearField(recommendationsmtspmmgapplications.FieldNOUserName, field.TypeString)
	}
	if value, ok := rmauo.mutation.NORemarks(); ok {
		_spec.SetField(recommendationsmtspmmgapplications.FieldNORemarks, field.TypeString, value)
	}
	if rmauo.mutation.NORemarksCleared() {
		_spec.ClearField(recommendationsmtspmmgapplications.FieldNORemarks, field.TypeString)
	}
	if value, ok := rmauo.mutation.ApplicationStatus(); ok {
		_spec.SetField(recommendationsmtspmmgapplications.FieldApplicationStatus, field.TypeString, value)
	}
	if rmauo.mutation.ApplicationStatusCleared() {
		_spec.ClearField(recommendationsmtspmmgapplications.FieldApplicationStatus, field.TypeString)
	}
	if value, ok := rmauo.mutation.UpdatedAt(); ok {
		_spec.SetField(recommendationsmtspmmgapplications.FieldUpdatedAt, field.TypeTime, value)
	}
	if rmauo.mutation.UpdatedAtCleared() {
		_spec.ClearField(recommendationsmtspmmgapplications.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := rmauo.mutation.UpdatedBy(); ok {
		_spec.SetField(recommendationsmtspmmgapplications.FieldUpdatedBy, field.TypeString, value)
	}
	if rmauo.mutation.UpdatedByCleared() {
		_spec.ClearField(recommendationsmtspmmgapplications.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := rmauo.mutation.GenerateHallTicketFlag(); ok {
		_spec.SetField(recommendationsmtspmmgapplications.FieldGenerateHallTicketFlag, field.TypeBool, value)
	}
	if rmauo.mutation.GenerateHallTicketFlagCleared() {
		_spec.ClearField(recommendationsmtspmmgapplications.FieldGenerateHallTicketFlag, field.TypeBool)
	}
	if rmauo.mutation.ApplnRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   recommendationsmtspmmgapplications.ApplnRefTable,
			Columns: []string{recommendationsmtspmmgapplications.ApplnRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_application_mtspmmg.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rmauo.mutation.ApplnRefIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   recommendationsmtspmmgapplications.ApplnRefTable,
			Columns: []string{recommendationsmtspmmgapplications.ApplnRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_application_mtspmmg.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &RecommendationsMTSPMMGApplications{config: rmauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, rmauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{recommendationsmtspmmgapplications.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	rmauo.mutation.done = true
	return _node, nil
}
