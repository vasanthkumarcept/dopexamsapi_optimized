// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"
	"recruit/ent/exam_applications_pmpa"
	"recruit/ent/predicate"
	"recruit/ent/recommendationspmpaapplications"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// RecommendationsPMPAApplicationsQuery is the builder for querying RecommendationsPMPAApplications entities.
type RecommendationsPMPAApplicationsQuery struct {
	config
	ctx          *QueryContext
	order        []recommendationspmpaapplications.OrderOption
	inters       []Interceptor
	predicates   []predicate.RecommendationsPMPAApplications
	withApplnRef *ExamApplicationsPMPAQuery
	withFKs      bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the RecommendationsPMPAApplicationsQuery builder.
func (rpaq *RecommendationsPMPAApplicationsQuery) Where(ps ...predicate.RecommendationsPMPAApplications) *RecommendationsPMPAApplicationsQuery {
	rpaq.predicates = append(rpaq.predicates, ps...)
	return rpaq
}

// Limit the number of records to be returned by this query.
func (rpaq *RecommendationsPMPAApplicationsQuery) Limit(limit int) *RecommendationsPMPAApplicationsQuery {
	rpaq.ctx.Limit = &limit
	return rpaq
}

// Offset to start from.
func (rpaq *RecommendationsPMPAApplicationsQuery) Offset(offset int) *RecommendationsPMPAApplicationsQuery {
	rpaq.ctx.Offset = &offset
	return rpaq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (rpaq *RecommendationsPMPAApplicationsQuery) Unique(unique bool) *RecommendationsPMPAApplicationsQuery {
	rpaq.ctx.Unique = &unique
	return rpaq
}

// Order specifies how the records should be ordered.
func (rpaq *RecommendationsPMPAApplicationsQuery) Order(o ...recommendationspmpaapplications.OrderOption) *RecommendationsPMPAApplicationsQuery {
	rpaq.order = append(rpaq.order, o...)
	return rpaq
}

// QueryApplnRef chains the current query on the "ApplnRef" edge.
func (rpaq *RecommendationsPMPAApplicationsQuery) QueryApplnRef() *ExamApplicationsPMPAQuery {
	query := (&ExamApplicationsPMPAClient{config: rpaq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := rpaq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := rpaq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(recommendationspmpaapplications.Table, recommendationspmpaapplications.FieldID, selector),
			sqlgraph.To(exam_applications_pmpa.Table, exam_applications_pmpa.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, recommendationspmpaapplications.ApplnRefTable, recommendationspmpaapplications.ApplnRefColumn),
		)
		fromU = sqlgraph.SetNeighbors(rpaq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first RecommendationsPMPAApplications entity from the query.
// Returns a *NotFoundError when no RecommendationsPMPAApplications was found.
func (rpaq *RecommendationsPMPAApplicationsQuery) First(ctx context.Context) (*RecommendationsPMPAApplications, error) {
	nodes, err := rpaq.Limit(1).All(setContextOp(ctx, rpaq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{recommendationspmpaapplications.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (rpaq *RecommendationsPMPAApplicationsQuery) FirstX(ctx context.Context) *RecommendationsPMPAApplications {
	node, err := rpaq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first RecommendationsPMPAApplications ID from the query.
// Returns a *NotFoundError when no RecommendationsPMPAApplications ID was found.
func (rpaq *RecommendationsPMPAApplicationsQuery) FirstID(ctx context.Context) (id int64, err error) {
	var ids []int64
	if ids, err = rpaq.Limit(1).IDs(setContextOp(ctx, rpaq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{recommendationspmpaapplications.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (rpaq *RecommendationsPMPAApplicationsQuery) FirstIDX(ctx context.Context) int64 {
	id, err := rpaq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single RecommendationsPMPAApplications entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one RecommendationsPMPAApplications entity is found.
// Returns a *NotFoundError when no RecommendationsPMPAApplications entities are found.
func (rpaq *RecommendationsPMPAApplicationsQuery) Only(ctx context.Context) (*RecommendationsPMPAApplications, error) {
	nodes, err := rpaq.Limit(2).All(setContextOp(ctx, rpaq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{recommendationspmpaapplications.Label}
	default:
		return nil, &NotSingularError{recommendationspmpaapplications.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (rpaq *RecommendationsPMPAApplicationsQuery) OnlyX(ctx context.Context) *RecommendationsPMPAApplications {
	node, err := rpaq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only RecommendationsPMPAApplications ID in the query.
// Returns a *NotSingularError when more than one RecommendationsPMPAApplications ID is found.
// Returns a *NotFoundError when no entities are found.
func (rpaq *RecommendationsPMPAApplicationsQuery) OnlyID(ctx context.Context) (id int64, err error) {
	var ids []int64
	if ids, err = rpaq.Limit(2).IDs(setContextOp(ctx, rpaq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{recommendationspmpaapplications.Label}
	default:
		err = &NotSingularError{recommendationspmpaapplications.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (rpaq *RecommendationsPMPAApplicationsQuery) OnlyIDX(ctx context.Context) int64 {
	id, err := rpaq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of RecommendationsPMPAApplicationsSlice.
func (rpaq *RecommendationsPMPAApplicationsQuery) All(ctx context.Context) ([]*RecommendationsPMPAApplications, error) {
	ctx = setContextOp(ctx, rpaq.ctx, "All")
	if err := rpaq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*RecommendationsPMPAApplications, *RecommendationsPMPAApplicationsQuery]()
	return withInterceptors[[]*RecommendationsPMPAApplications](ctx, rpaq, qr, rpaq.inters)
}

// AllX is like All, but panics if an error occurs.
func (rpaq *RecommendationsPMPAApplicationsQuery) AllX(ctx context.Context) []*RecommendationsPMPAApplications {
	nodes, err := rpaq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of RecommendationsPMPAApplications IDs.
func (rpaq *RecommendationsPMPAApplicationsQuery) IDs(ctx context.Context) (ids []int64, err error) {
	if rpaq.ctx.Unique == nil && rpaq.path != nil {
		rpaq.Unique(true)
	}
	ctx = setContextOp(ctx, rpaq.ctx, "IDs")
	if err = rpaq.Select(recommendationspmpaapplications.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (rpaq *RecommendationsPMPAApplicationsQuery) IDsX(ctx context.Context) []int64 {
	ids, err := rpaq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (rpaq *RecommendationsPMPAApplicationsQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, rpaq.ctx, "Count")
	if err := rpaq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, rpaq, querierCount[*RecommendationsPMPAApplicationsQuery](), rpaq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (rpaq *RecommendationsPMPAApplicationsQuery) CountX(ctx context.Context) int {
	count, err := rpaq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (rpaq *RecommendationsPMPAApplicationsQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, rpaq.ctx, "Exist")
	switch _, err := rpaq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (rpaq *RecommendationsPMPAApplicationsQuery) ExistX(ctx context.Context) bool {
	exist, err := rpaq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the RecommendationsPMPAApplicationsQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (rpaq *RecommendationsPMPAApplicationsQuery) Clone() *RecommendationsPMPAApplicationsQuery {
	if rpaq == nil {
		return nil
	}
	return &RecommendationsPMPAApplicationsQuery{
		config:       rpaq.config,
		ctx:          rpaq.ctx.Clone(),
		order:        append([]recommendationspmpaapplications.OrderOption{}, rpaq.order...),
		inters:       append([]Interceptor{}, rpaq.inters...),
		predicates:   append([]predicate.RecommendationsPMPAApplications{}, rpaq.predicates...),
		withApplnRef: rpaq.withApplnRef.Clone(),
		// clone intermediate query.
		sql:  rpaq.sql.Clone(),
		path: rpaq.path,
	}
}

// WithApplnRef tells the query-builder to eager-load the nodes that are connected to
// the "ApplnRef" edge. The optional arguments are used to configure the query builder of the edge.
func (rpaq *RecommendationsPMPAApplicationsQuery) WithApplnRef(opts ...func(*ExamApplicationsPMPAQuery)) *RecommendationsPMPAApplicationsQuery {
	query := (&ExamApplicationsPMPAClient{config: rpaq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	rpaq.withApplnRef = query
	return rpaq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		ApplicationID int64 `json:"ApplicationID,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.RecommendationsPMPAApplications.Query().
//		GroupBy(recommendationspmpaapplications.FieldApplicationID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (rpaq *RecommendationsPMPAApplicationsQuery) GroupBy(field string, fields ...string) *RecommendationsPMPAApplicationsGroupBy {
	rpaq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &RecommendationsPMPAApplicationsGroupBy{build: rpaq}
	grbuild.flds = &rpaq.ctx.Fields
	grbuild.label = recommendationspmpaapplications.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		ApplicationID int64 `json:"ApplicationID,omitempty"`
//	}
//
//	client.RecommendationsPMPAApplications.Query().
//		Select(recommendationspmpaapplications.FieldApplicationID).
//		Scan(ctx, &v)
func (rpaq *RecommendationsPMPAApplicationsQuery) Select(fields ...string) *RecommendationsPMPAApplicationsSelect {
	rpaq.ctx.Fields = append(rpaq.ctx.Fields, fields...)
	sbuild := &RecommendationsPMPAApplicationsSelect{RecommendationsPMPAApplicationsQuery: rpaq}
	sbuild.label = recommendationspmpaapplications.Label
	sbuild.flds, sbuild.scan = &rpaq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a RecommendationsPMPAApplicationsSelect configured with the given aggregations.
func (rpaq *RecommendationsPMPAApplicationsQuery) Aggregate(fns ...AggregateFunc) *RecommendationsPMPAApplicationsSelect {
	return rpaq.Select().Aggregate(fns...)
}

func (rpaq *RecommendationsPMPAApplicationsQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range rpaq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, rpaq); err != nil {
				return err
			}
		}
	}
	for _, f := range rpaq.ctx.Fields {
		if !recommendationspmpaapplications.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if rpaq.path != nil {
		prev, err := rpaq.path(ctx)
		if err != nil {
			return err
		}
		rpaq.sql = prev
	}
	return nil
}

func (rpaq *RecommendationsPMPAApplicationsQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*RecommendationsPMPAApplications, error) {
	var (
		nodes       = []*RecommendationsPMPAApplications{}
		withFKs     = rpaq.withFKs
		_spec       = rpaq.querySpec()
		loadedTypes = [1]bool{
			rpaq.withApplnRef != nil,
		}
	)
	if rpaq.withApplnRef != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, recommendationspmpaapplications.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*RecommendationsPMPAApplications).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &RecommendationsPMPAApplications{config: rpaq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, rpaq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := rpaq.withApplnRef; query != nil {
		if err := rpaq.loadApplnRef(ctx, query, nodes, nil,
			func(n *RecommendationsPMPAApplications, e *Exam_Applications_PMPA) { n.Edges.ApplnRef = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (rpaq *RecommendationsPMPAApplicationsQuery) loadApplnRef(ctx context.Context, query *ExamApplicationsPMPAQuery, nodes []*RecommendationsPMPAApplications, init func(*RecommendationsPMPAApplications), assign func(*RecommendationsPMPAApplications, *Exam_Applications_PMPA)) error {
	ids := make([]int64, 0, len(nodes))
	nodeids := make(map[int64][]*RecommendationsPMPAApplications)
	for i := range nodes {
		if nodes[i].exam_applications_pmpa_pmpa_applications_ref == nil {
			continue
		}
		fk := *nodes[i].exam_applications_pmpa_pmpa_applications_ref
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(exam_applications_pmpa.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "exam_applications_pmpa_pmpa_applications_ref" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (rpaq *RecommendationsPMPAApplicationsQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := rpaq.querySpec()
	_spec.Node.Columns = rpaq.ctx.Fields
	if len(rpaq.ctx.Fields) > 0 {
		_spec.Unique = rpaq.ctx.Unique != nil && *rpaq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, rpaq.driver, _spec)
}

func (rpaq *RecommendationsPMPAApplicationsQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(recommendationspmpaapplications.Table, recommendationspmpaapplications.Columns, sqlgraph.NewFieldSpec(recommendationspmpaapplications.FieldID, field.TypeInt64))
	_spec.From = rpaq.sql
	if unique := rpaq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if rpaq.path != nil {
		_spec.Unique = true
	}
	if fields := rpaq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, recommendationspmpaapplications.FieldID)
		for i := range fields {
			if fields[i] != recommendationspmpaapplications.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := rpaq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := rpaq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := rpaq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := rpaq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (rpaq *RecommendationsPMPAApplicationsQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(rpaq.driver.Dialect())
	t1 := builder.Table(recommendationspmpaapplications.Table)
	columns := rpaq.ctx.Fields
	if len(columns) == 0 {
		columns = recommendationspmpaapplications.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if rpaq.sql != nil {
		selector = rpaq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if rpaq.ctx.Unique != nil && *rpaq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range rpaq.predicates {
		p(selector)
	}
	for _, p := range rpaq.order {
		p(selector)
	}
	if offset := rpaq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := rpaq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// RecommendationsPMPAApplicationsGroupBy is the group-by builder for RecommendationsPMPAApplications entities.
type RecommendationsPMPAApplicationsGroupBy struct {
	selector
	build *RecommendationsPMPAApplicationsQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (rpagb *RecommendationsPMPAApplicationsGroupBy) Aggregate(fns ...AggregateFunc) *RecommendationsPMPAApplicationsGroupBy {
	rpagb.fns = append(rpagb.fns, fns...)
	return rpagb
}

// Scan applies the selector query and scans the result into the given value.
func (rpagb *RecommendationsPMPAApplicationsGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, rpagb.build.ctx, "GroupBy")
	if err := rpagb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*RecommendationsPMPAApplicationsQuery, *RecommendationsPMPAApplicationsGroupBy](ctx, rpagb.build, rpagb, rpagb.build.inters, v)
}

func (rpagb *RecommendationsPMPAApplicationsGroupBy) sqlScan(ctx context.Context, root *RecommendationsPMPAApplicationsQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(rpagb.fns))
	for _, fn := range rpagb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*rpagb.flds)+len(rpagb.fns))
		for _, f := range *rpagb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*rpagb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := rpagb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// RecommendationsPMPAApplicationsSelect is the builder for selecting fields of RecommendationsPMPAApplications entities.
type RecommendationsPMPAApplicationsSelect struct {
	*RecommendationsPMPAApplicationsQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (rpas *RecommendationsPMPAApplicationsSelect) Aggregate(fns ...AggregateFunc) *RecommendationsPMPAApplicationsSelect {
	rpas.fns = append(rpas.fns, fns...)
	return rpas
}

// Scan applies the selector query and scans the result into the given value.
func (rpas *RecommendationsPMPAApplicationsSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, rpas.ctx, "Select")
	if err := rpas.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*RecommendationsPMPAApplicationsQuery, *RecommendationsPMPAApplicationsSelect](ctx, rpas.RecommendationsPMPAApplicationsQuery, rpas, rpas.inters, v)
}

func (rpas *RecommendationsPMPAApplicationsSelect) sqlScan(ctx context.Context, root *RecommendationsPMPAApplicationsQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(rpas.fns))
	for _, fn := range rpas.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*rpas.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := rpas.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
