// Code generated by ent, DO NOT EDIT.

package examcalendar

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the examcalendar type in the database.
	Label = "exam_calendar"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "CalendarCode"
	// FieldExamYear holds the string denoting the examyear field in the database.
	FieldExamYear = "exam_year"
	// FieldExamName holds the string denoting the examname field in the database.
	FieldExamName = "exam_name"
	// FieldExamCode holds the string denoting the examcode field in the database.
	FieldExamCode = "exam_code"
	// FieldNotificationDate holds the string denoting the notificationdate field in the database.
	FieldNotificationDate = "notification_date"
	// FieldModelNotificationDate holds the string denoting the modelnotificationdate field in the database.
	FieldModelNotificationDate = "model_notification_date"
	// FieldApplicationEndDate holds the string denoting the applicationenddate field in the database.
	FieldApplicationEndDate = "application_end_date"
	// FieldApprovedOrderDate holds the string denoting the approvedorderdate field in the database.
	FieldApprovedOrderDate = "approved_order_date"
	// FieldTentativeResultDate holds the string denoting the tentativeresultdate field in the database.
	FieldTentativeResultDate = "tentative_result_date"
	// FieldCreatedDate holds the string denoting the createddate field in the database.
	FieldCreatedDate = "created_date"
	// FieldApprovedOrderNumber holds the string denoting the approvedordernumber field in the database.
	FieldApprovedOrderNumber = "approved_order_number"
	// FieldVacancyYears holds the string denoting the vacancyyears field in the database.
	FieldVacancyYears = "vacancy_years"
	// FieldExamPapers holds the string denoting the exampapers field in the database.
	FieldExamPapers = "exam_papers"
	// FieldVacancyYearCode holds the string denoting the vacancyyearcode field in the database.
	FieldVacancyYearCode = "vacancy_year_code"
	// FieldPaperCode holds the string denoting the papercode field in the database.
	FieldPaperCode = "paper_code"
	// FieldExamCodePS holds the string denoting the examcodeps field in the database.
	FieldExamCodePS = "exam_code_ps"
	// EdgeVcyYears holds the string denoting the vcy_years edge name in mutations.
	EdgeVcyYears = "vcy_years"
	// EdgeExams holds the string denoting the exams edge name in mutations.
	EdgeExams = "exams"
	// EdgePapers holds the string denoting the papers edge name in mutations.
	EdgePapers = "papers"
	// EdgeNotifyRef holds the string denoting the notify_ref edge name in mutations.
	EdgeNotifyRef = "Notify_ref"
	// VacancyYearFieldID holds the string denoting the ID field of the VacancyYear.
	VacancyYearFieldID = "VacancyYearCode"
	// ExamFieldID holds the string denoting the ID field of the Exam.
	ExamFieldID = "UniqueID"
	// ExamPapersFieldID holds the string denoting the ID field of the ExamPapers.
	ExamPapersFieldID = "PaperCode"
	// NotificationFieldID holds the string denoting the ID field of the Notification.
	NotificationFieldID = "NotifyCode"
	// Table holds the table name of the examcalendar in the database.
	Table = "ExamCalendar"
	// VcyYearsTable is the table that holds the vcy_years relation/edge.
	VcyYearsTable = "ExamCalendar"
	// VcyYearsInverseTable is the table name for the VacancyYear entity.
	// It exists in this package in order to avoid circular dependency with the "vacancyyear" package.
	VcyYearsInverseTable = "VacancyYears"
	// VcyYearsColumn is the table column denoting the vcy_years relation/edge.
	VcyYearsColumn = "vacancy_year_code"
	// ExamsTable is the table that holds the exams relation/edge.
	ExamsTable = "ExamCalendar"
	// ExamsInverseTable is the table name for the Exam entity.
	// It exists in this package in order to avoid circular dependency with the "exam" package.
	ExamsInverseTable = "Exam"
	// ExamsColumn is the table column denoting the exams relation/edge.
	ExamsColumn = "exam_code"
	// PapersTable is the table that holds the papers relation/edge.
	PapersTable = "ExamCalendar"
	// PapersInverseTable is the table name for the ExamPapers entity.
	// It exists in this package in order to avoid circular dependency with the "exampapers" package.
	PapersInverseTable = "exam_papers"
	// PapersColumn is the table column denoting the papers relation/edge.
	PapersColumn = "paper_code"
	// NotifyRefTable is the table that holds the Notify_ref relation/edge.
	NotifyRefTable = "Notification"
	// NotifyRefInverseTable is the table name for the Notification entity.
	// It exists in this package in order to avoid circular dependency with the "notification" package.
	NotifyRefInverseTable = "Notification"
	// NotifyRefColumn is the table column denoting the Notify_ref relation/edge.
	NotifyRefColumn = "exam_calendar_notify_ref"
)

// Columns holds all SQL columns for examcalendar fields.
var Columns = []string{
	FieldID,
	FieldExamYear,
	FieldExamName,
	FieldExamCode,
	FieldNotificationDate,
	FieldModelNotificationDate,
	FieldApplicationEndDate,
	FieldApprovedOrderDate,
	FieldTentativeResultDate,
	FieldCreatedDate,
	FieldApprovedOrderNumber,
	FieldVacancyYears,
	FieldExamPapers,
	FieldVacancyYearCode,
	FieldPaperCode,
	FieldExamCodePS,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// ExamNameValidator is a validator for the "ExamName" field. It is called by the builders before save.
	ExamNameValidator func(string) error
)

// OrderOption defines the ordering options for the ExamCalendar queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByExamYear orders the results by the ExamYear field.
func ByExamYear(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExamYear, opts...).ToFunc()
}

// ByExamName orders the results by the ExamName field.
func ByExamName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExamName, opts...).ToFunc()
}

// ByExamCode orders the results by the ExamCode field.
func ByExamCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExamCode, opts...).ToFunc()
}

// ByNotificationDate orders the results by the NotificationDate field.
func ByNotificationDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNotificationDate, opts...).ToFunc()
}

// ByModelNotificationDate orders the results by the ModelNotificationDate field.
func ByModelNotificationDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldModelNotificationDate, opts...).ToFunc()
}

// ByApplicationEndDate orders the results by the ApplicationEndDate field.
func ByApplicationEndDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldApplicationEndDate, opts...).ToFunc()
}

// ByApprovedOrderDate orders the results by the ApprovedOrderDate field.
func ByApprovedOrderDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldApprovedOrderDate, opts...).ToFunc()
}

// ByTentativeResultDate orders the results by the TentativeResultDate field.
func ByTentativeResultDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTentativeResultDate, opts...).ToFunc()
}

// ByCreatedDate orders the results by the CreatedDate field.
func ByCreatedDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedDate, opts...).ToFunc()
}

// ByApprovedOrderNumber orders the results by the ApprovedOrderNumber field.
func ByApprovedOrderNumber(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldApprovedOrderNumber, opts...).ToFunc()
}

// ByVacancyYearCode orders the results by the VacancyYearCode field.
func ByVacancyYearCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVacancyYearCode, opts...).ToFunc()
}

// ByPaperCode orders the results by the PaperCode field.
func ByPaperCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPaperCode, opts...).ToFunc()
}

// ByExamCodePS orders the results by the ExamCodePS field.
func ByExamCodePS(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExamCodePS, opts...).ToFunc()
}

// ByVcyYearsField orders the results by vcy_years field.
func ByVcyYearsField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newVcyYearsStep(), sql.OrderByField(field, opts...))
	}
}

// ByExamsField orders the results by exams field.
func ByExamsField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newExamsStep(), sql.OrderByField(field, opts...))
	}
}

// ByPapersField orders the results by papers field.
func ByPapersField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPapersStep(), sql.OrderByField(field, opts...))
	}
}

// ByNotifyRefCount orders the results by Notify_ref count.
func ByNotifyRefCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newNotifyRefStep(), opts...)
	}
}

// ByNotifyRef orders the results by Notify_ref terms.
func ByNotifyRef(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newNotifyRefStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newVcyYearsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(VcyYearsInverseTable, VacancyYearFieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, VcyYearsTable, VcyYearsColumn),
	)
}
func newExamsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ExamsInverseTable, ExamFieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ExamsTable, ExamsColumn),
	)
}
func newPapersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PapersInverseTable, ExamPapersFieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, PapersTable, PapersColumn),
	)
}
func newNotifyRefStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(NotifyRefInverseTable, NotificationFieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, NotifyRefTable, NotifyRefColumn),
	)
}
