// Code generated by ent, DO NOT EDIT.

package message

import (
	"recruit/ent/predicate"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.Message {
	return predicate.Message(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.Message {
	return predicate.Message(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.Message {
	return predicate.Message(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.Message {
	return predicate.Message(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.Message {
	return predicate.Message(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.Message {
	return predicate.Message(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.Message {
	return predicate.Message(sql.FieldLTE(FieldID, id))
}

// Description applies equality check predicate on the "Description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldDescription, v))
}

// Priority applies equality check predicate on the "Priority" field. It's identical to PriorityEQ.
func Priority(v int32) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldPriority, v))
}

// Status applies equality check predicate on the "Status" field. It's identical to StatusEQ.
func Status(v bool) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldStatus, v))
}

// DescriptionEQ applies the EQ predicate on the "Description" field.
func DescriptionEQ(v string) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "Description" field.
func DescriptionNEQ(v string) predicate.Message {
	return predicate.Message(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "Description" field.
func DescriptionIn(vs ...string) predicate.Message {
	return predicate.Message(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "Description" field.
func DescriptionNotIn(vs ...string) predicate.Message {
	return predicate.Message(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "Description" field.
func DescriptionGT(v string) predicate.Message {
	return predicate.Message(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "Description" field.
func DescriptionGTE(v string) predicate.Message {
	return predicate.Message(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "Description" field.
func DescriptionLT(v string) predicate.Message {
	return predicate.Message(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "Description" field.
func DescriptionLTE(v string) predicate.Message {
	return predicate.Message(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "Description" field.
func DescriptionContains(v string) predicate.Message {
	return predicate.Message(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "Description" field.
func DescriptionHasPrefix(v string) predicate.Message {
	return predicate.Message(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "Description" field.
func DescriptionHasSuffix(v string) predicate.Message {
	return predicate.Message(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionIsNil applies the IsNil predicate on the "Description" field.
func DescriptionIsNil() predicate.Message {
	return predicate.Message(sql.FieldIsNull(FieldDescription))
}

// DescriptionNotNil applies the NotNil predicate on the "Description" field.
func DescriptionNotNil() predicate.Message {
	return predicate.Message(sql.FieldNotNull(FieldDescription))
}

// DescriptionEqualFold applies the EqualFold predicate on the "Description" field.
func DescriptionEqualFold(v string) predicate.Message {
	return predicate.Message(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "Description" field.
func DescriptionContainsFold(v string) predicate.Message {
	return predicate.Message(sql.FieldContainsFold(FieldDescription, v))
}

// PriorityEQ applies the EQ predicate on the "Priority" field.
func PriorityEQ(v int32) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldPriority, v))
}

// PriorityNEQ applies the NEQ predicate on the "Priority" field.
func PriorityNEQ(v int32) predicate.Message {
	return predicate.Message(sql.FieldNEQ(FieldPriority, v))
}

// PriorityIn applies the In predicate on the "Priority" field.
func PriorityIn(vs ...int32) predicate.Message {
	return predicate.Message(sql.FieldIn(FieldPriority, vs...))
}

// PriorityNotIn applies the NotIn predicate on the "Priority" field.
func PriorityNotIn(vs ...int32) predicate.Message {
	return predicate.Message(sql.FieldNotIn(FieldPriority, vs...))
}

// PriorityGT applies the GT predicate on the "Priority" field.
func PriorityGT(v int32) predicate.Message {
	return predicate.Message(sql.FieldGT(FieldPriority, v))
}

// PriorityGTE applies the GTE predicate on the "Priority" field.
func PriorityGTE(v int32) predicate.Message {
	return predicate.Message(sql.FieldGTE(FieldPriority, v))
}

// PriorityLT applies the LT predicate on the "Priority" field.
func PriorityLT(v int32) predicate.Message {
	return predicate.Message(sql.FieldLT(FieldPriority, v))
}

// PriorityLTE applies the LTE predicate on the "Priority" field.
func PriorityLTE(v int32) predicate.Message {
	return predicate.Message(sql.FieldLTE(FieldPriority, v))
}

// StatusEQ applies the EQ predicate on the "Status" field.
func StatusEQ(v bool) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "Status" field.
func StatusNEQ(v bool) predicate.Message {
	return predicate.Message(sql.FieldNEQ(FieldStatus, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Message) predicate.Message {
	return predicate.Message(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Message) predicate.Message {
	return predicate.Message(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Message) predicate.Message {
	return predicate.Message(func(s *sql.Selector) {
		p(s.Not())
	})
}
