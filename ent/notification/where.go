// Code generated by ent, DO NOT EDIT.

package notification

import (
	"recruit/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int32) predicate.Notification {
	return predicate.Notification(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int32) predicate.Notification {
	return predicate.Notification(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int32) predicate.Notification {
	return predicate.Notification(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int32) predicate.Notification {
	return predicate.Notification(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int32) predicate.Notification {
	return predicate.Notification(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int32) predicate.Notification {
	return predicate.Notification(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int32) predicate.Notification {
	return predicate.Notification(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int32) predicate.Notification {
	return predicate.Notification(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int32) predicate.Notification {
	return predicate.Notification(sql.FieldLTE(FieldID, id))
}

// ExamCode applies equality check predicate on the "ExamCode" field. It's identical to ExamCodeEQ.
func ExamCode(v int32) predicate.Notification {
	return predicate.Notification(sql.FieldEQ(FieldExamCode, v))
}

// ExamYear applies equality check predicate on the "ExamYear" field. It's identical to ExamYearEQ.
func ExamYear(v int32) predicate.Notification {
	return predicate.Notification(sql.FieldEQ(FieldExamYear, v))
}

// ApplicationStartDate applies equality check predicate on the "ApplicationStartDate" field. It's identical to ApplicationStartDateEQ.
func ApplicationStartDate(v time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldEQ(FieldApplicationStartDate, v))
}

// ApplicationEndDate applies equality check predicate on the "ApplicationEndDate" field. It's identical to ApplicationEndDateEQ.
func ApplicationEndDate(v time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldEQ(FieldApplicationEndDate, v))
}

// VerificationDateByController applies equality check predicate on the "VerificationDateByController" field. It's identical to VerificationDateByControllerEQ.
func VerificationDateByController(v time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldEQ(FieldVerificationDateByController, v))
}

// CorrectionDateByCandidate applies equality check predicate on the "CorrectionDateByCandidate" field. It's identical to CorrectionDateByCandidateEQ.
func CorrectionDateByCandidate(v time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldEQ(FieldCorrectionDateByCandidate, v))
}

// CorrectionVeriyDateByController applies equality check predicate on the "CorrectionVeriyDateByController" field. It's identical to CorrectionVeriyDateByControllerEQ.
func CorrectionVeriyDateByController(v time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldEQ(FieldCorrectionVeriyDateByController, v))
}

// HallTicketAllotmentDateByNodalOfficer applies equality check predicate on the "HallTicketAllotmentDateByNodalOfficer" field. It's identical to HallTicketAllotmentDateByNodalOfficerEQ.
func HallTicketAllotmentDateByNodalOfficer(v time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldEQ(FieldHallTicketAllotmentDateByNodalOfficer, v))
}

// HallTicketDownloadDate applies equality check predicate on the "HallTicketDownloadDate" field. It's identical to HallTicketDownloadDateEQ.
func HallTicketDownloadDate(v time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldEQ(FieldHallTicketDownloadDate, v))
}

// NotifyFile applies equality check predicate on the "NotifyFile" field. It's identical to NotifyFileEQ.
func NotifyFile(v string) predicate.Notification {
	return predicate.Notification(sql.FieldEQ(FieldNotifyFile, v))
}

// SyllabusFile applies equality check predicate on the "SyllabusFile" field. It's identical to SyllabusFileEQ.
func SyllabusFile(v string) predicate.Notification {
	return predicate.Notification(sql.FieldEQ(FieldSyllabusFile, v))
}

// VacanciesFile applies equality check predicate on the "VacanciesFile" field. It's identical to VacanciesFileEQ.
func VacanciesFile(v string) predicate.Notification {
	return predicate.Notification(sql.FieldEQ(FieldVacanciesFile, v))
}

// ExamCodePS applies equality check predicate on the "ExamCodePS" field. It's identical to ExamCodePSEQ.
func ExamCodePS(v int32) predicate.Notification {
	return predicate.Notification(sql.FieldEQ(FieldExamCodePS, v))
}

// CenterAllotmentEndDate applies equality check predicate on the "CenterAllotmentEndDate" field. It's identical to CenterAllotmentEndDateEQ.
func CenterAllotmentEndDate(v time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldEQ(FieldCenterAllotmentEndDate, v))
}

// ExamCodeEQ applies the EQ predicate on the "ExamCode" field.
func ExamCodeEQ(v int32) predicate.Notification {
	return predicate.Notification(sql.FieldEQ(FieldExamCode, v))
}

// ExamCodeNEQ applies the NEQ predicate on the "ExamCode" field.
func ExamCodeNEQ(v int32) predicate.Notification {
	return predicate.Notification(sql.FieldNEQ(FieldExamCode, v))
}

// ExamCodeIn applies the In predicate on the "ExamCode" field.
func ExamCodeIn(vs ...int32) predicate.Notification {
	return predicate.Notification(sql.FieldIn(FieldExamCode, vs...))
}

// ExamCodeNotIn applies the NotIn predicate on the "ExamCode" field.
func ExamCodeNotIn(vs ...int32) predicate.Notification {
	return predicate.Notification(sql.FieldNotIn(FieldExamCode, vs...))
}

// ExamCodeIsNil applies the IsNil predicate on the "ExamCode" field.
func ExamCodeIsNil() predicate.Notification {
	return predicate.Notification(sql.FieldIsNull(FieldExamCode))
}

// ExamCodeNotNil applies the NotNil predicate on the "ExamCode" field.
func ExamCodeNotNil() predicate.Notification {
	return predicate.Notification(sql.FieldNotNull(FieldExamCode))
}

// ExamYearEQ applies the EQ predicate on the "ExamYear" field.
func ExamYearEQ(v int32) predicate.Notification {
	return predicate.Notification(sql.FieldEQ(FieldExamYear, v))
}

// ExamYearNEQ applies the NEQ predicate on the "ExamYear" field.
func ExamYearNEQ(v int32) predicate.Notification {
	return predicate.Notification(sql.FieldNEQ(FieldExamYear, v))
}

// ExamYearIn applies the In predicate on the "ExamYear" field.
func ExamYearIn(vs ...int32) predicate.Notification {
	return predicate.Notification(sql.FieldIn(FieldExamYear, vs...))
}

// ExamYearNotIn applies the NotIn predicate on the "ExamYear" field.
func ExamYearNotIn(vs ...int32) predicate.Notification {
	return predicate.Notification(sql.FieldNotIn(FieldExamYear, vs...))
}

// ExamYearGT applies the GT predicate on the "ExamYear" field.
func ExamYearGT(v int32) predicate.Notification {
	return predicate.Notification(sql.FieldGT(FieldExamYear, v))
}

// ExamYearGTE applies the GTE predicate on the "ExamYear" field.
func ExamYearGTE(v int32) predicate.Notification {
	return predicate.Notification(sql.FieldGTE(FieldExamYear, v))
}

// ExamYearLT applies the LT predicate on the "ExamYear" field.
func ExamYearLT(v int32) predicate.Notification {
	return predicate.Notification(sql.FieldLT(FieldExamYear, v))
}

// ExamYearLTE applies the LTE predicate on the "ExamYear" field.
func ExamYearLTE(v int32) predicate.Notification {
	return predicate.Notification(sql.FieldLTE(FieldExamYear, v))
}

// ApplicationStartDateEQ applies the EQ predicate on the "ApplicationStartDate" field.
func ApplicationStartDateEQ(v time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldEQ(FieldApplicationStartDate, v))
}

// ApplicationStartDateNEQ applies the NEQ predicate on the "ApplicationStartDate" field.
func ApplicationStartDateNEQ(v time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldNEQ(FieldApplicationStartDate, v))
}

// ApplicationStartDateIn applies the In predicate on the "ApplicationStartDate" field.
func ApplicationStartDateIn(vs ...time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldIn(FieldApplicationStartDate, vs...))
}

// ApplicationStartDateNotIn applies the NotIn predicate on the "ApplicationStartDate" field.
func ApplicationStartDateNotIn(vs ...time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldNotIn(FieldApplicationStartDate, vs...))
}

// ApplicationStartDateGT applies the GT predicate on the "ApplicationStartDate" field.
func ApplicationStartDateGT(v time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldGT(FieldApplicationStartDate, v))
}

// ApplicationStartDateGTE applies the GTE predicate on the "ApplicationStartDate" field.
func ApplicationStartDateGTE(v time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldGTE(FieldApplicationStartDate, v))
}

// ApplicationStartDateLT applies the LT predicate on the "ApplicationStartDate" field.
func ApplicationStartDateLT(v time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldLT(FieldApplicationStartDate, v))
}

// ApplicationStartDateLTE applies the LTE predicate on the "ApplicationStartDate" field.
func ApplicationStartDateLTE(v time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldLTE(FieldApplicationStartDate, v))
}

// ApplicationEndDateEQ applies the EQ predicate on the "ApplicationEndDate" field.
func ApplicationEndDateEQ(v time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldEQ(FieldApplicationEndDate, v))
}

// ApplicationEndDateNEQ applies the NEQ predicate on the "ApplicationEndDate" field.
func ApplicationEndDateNEQ(v time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldNEQ(FieldApplicationEndDate, v))
}

// ApplicationEndDateIn applies the In predicate on the "ApplicationEndDate" field.
func ApplicationEndDateIn(vs ...time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldIn(FieldApplicationEndDate, vs...))
}

// ApplicationEndDateNotIn applies the NotIn predicate on the "ApplicationEndDate" field.
func ApplicationEndDateNotIn(vs ...time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldNotIn(FieldApplicationEndDate, vs...))
}

// ApplicationEndDateGT applies the GT predicate on the "ApplicationEndDate" field.
func ApplicationEndDateGT(v time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldGT(FieldApplicationEndDate, v))
}

// ApplicationEndDateGTE applies the GTE predicate on the "ApplicationEndDate" field.
func ApplicationEndDateGTE(v time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldGTE(FieldApplicationEndDate, v))
}

// ApplicationEndDateLT applies the LT predicate on the "ApplicationEndDate" field.
func ApplicationEndDateLT(v time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldLT(FieldApplicationEndDate, v))
}

// ApplicationEndDateLTE applies the LTE predicate on the "ApplicationEndDate" field.
func ApplicationEndDateLTE(v time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldLTE(FieldApplicationEndDate, v))
}

// VerificationDateByControllerEQ applies the EQ predicate on the "VerificationDateByController" field.
func VerificationDateByControllerEQ(v time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldEQ(FieldVerificationDateByController, v))
}

// VerificationDateByControllerNEQ applies the NEQ predicate on the "VerificationDateByController" field.
func VerificationDateByControllerNEQ(v time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldNEQ(FieldVerificationDateByController, v))
}

// VerificationDateByControllerIn applies the In predicate on the "VerificationDateByController" field.
func VerificationDateByControllerIn(vs ...time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldIn(FieldVerificationDateByController, vs...))
}

// VerificationDateByControllerNotIn applies the NotIn predicate on the "VerificationDateByController" field.
func VerificationDateByControllerNotIn(vs ...time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldNotIn(FieldVerificationDateByController, vs...))
}

// VerificationDateByControllerGT applies the GT predicate on the "VerificationDateByController" field.
func VerificationDateByControllerGT(v time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldGT(FieldVerificationDateByController, v))
}

// VerificationDateByControllerGTE applies the GTE predicate on the "VerificationDateByController" field.
func VerificationDateByControllerGTE(v time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldGTE(FieldVerificationDateByController, v))
}

// VerificationDateByControllerLT applies the LT predicate on the "VerificationDateByController" field.
func VerificationDateByControllerLT(v time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldLT(FieldVerificationDateByController, v))
}

// VerificationDateByControllerLTE applies the LTE predicate on the "VerificationDateByController" field.
func VerificationDateByControllerLTE(v time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldLTE(FieldVerificationDateByController, v))
}

// CorrectionDateByCandidateEQ applies the EQ predicate on the "CorrectionDateByCandidate" field.
func CorrectionDateByCandidateEQ(v time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldEQ(FieldCorrectionDateByCandidate, v))
}

// CorrectionDateByCandidateNEQ applies the NEQ predicate on the "CorrectionDateByCandidate" field.
func CorrectionDateByCandidateNEQ(v time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldNEQ(FieldCorrectionDateByCandidate, v))
}

// CorrectionDateByCandidateIn applies the In predicate on the "CorrectionDateByCandidate" field.
func CorrectionDateByCandidateIn(vs ...time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldIn(FieldCorrectionDateByCandidate, vs...))
}

// CorrectionDateByCandidateNotIn applies the NotIn predicate on the "CorrectionDateByCandidate" field.
func CorrectionDateByCandidateNotIn(vs ...time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldNotIn(FieldCorrectionDateByCandidate, vs...))
}

// CorrectionDateByCandidateGT applies the GT predicate on the "CorrectionDateByCandidate" field.
func CorrectionDateByCandidateGT(v time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldGT(FieldCorrectionDateByCandidate, v))
}

// CorrectionDateByCandidateGTE applies the GTE predicate on the "CorrectionDateByCandidate" field.
func CorrectionDateByCandidateGTE(v time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldGTE(FieldCorrectionDateByCandidate, v))
}

// CorrectionDateByCandidateLT applies the LT predicate on the "CorrectionDateByCandidate" field.
func CorrectionDateByCandidateLT(v time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldLT(FieldCorrectionDateByCandidate, v))
}

// CorrectionDateByCandidateLTE applies the LTE predicate on the "CorrectionDateByCandidate" field.
func CorrectionDateByCandidateLTE(v time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldLTE(FieldCorrectionDateByCandidate, v))
}

// CorrectionVeriyDateByControllerEQ applies the EQ predicate on the "CorrectionVeriyDateByController" field.
func CorrectionVeriyDateByControllerEQ(v time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldEQ(FieldCorrectionVeriyDateByController, v))
}

// CorrectionVeriyDateByControllerNEQ applies the NEQ predicate on the "CorrectionVeriyDateByController" field.
func CorrectionVeriyDateByControllerNEQ(v time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldNEQ(FieldCorrectionVeriyDateByController, v))
}

// CorrectionVeriyDateByControllerIn applies the In predicate on the "CorrectionVeriyDateByController" field.
func CorrectionVeriyDateByControllerIn(vs ...time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldIn(FieldCorrectionVeriyDateByController, vs...))
}

// CorrectionVeriyDateByControllerNotIn applies the NotIn predicate on the "CorrectionVeriyDateByController" field.
func CorrectionVeriyDateByControllerNotIn(vs ...time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldNotIn(FieldCorrectionVeriyDateByController, vs...))
}

// CorrectionVeriyDateByControllerGT applies the GT predicate on the "CorrectionVeriyDateByController" field.
func CorrectionVeriyDateByControllerGT(v time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldGT(FieldCorrectionVeriyDateByController, v))
}

// CorrectionVeriyDateByControllerGTE applies the GTE predicate on the "CorrectionVeriyDateByController" field.
func CorrectionVeriyDateByControllerGTE(v time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldGTE(FieldCorrectionVeriyDateByController, v))
}

// CorrectionVeriyDateByControllerLT applies the LT predicate on the "CorrectionVeriyDateByController" field.
func CorrectionVeriyDateByControllerLT(v time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldLT(FieldCorrectionVeriyDateByController, v))
}

// CorrectionVeriyDateByControllerLTE applies the LTE predicate on the "CorrectionVeriyDateByController" field.
func CorrectionVeriyDateByControllerLTE(v time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldLTE(FieldCorrectionVeriyDateByController, v))
}

// HallTicketAllotmentDateByNodalOfficerEQ applies the EQ predicate on the "HallTicketAllotmentDateByNodalOfficer" field.
func HallTicketAllotmentDateByNodalOfficerEQ(v time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldEQ(FieldHallTicketAllotmentDateByNodalOfficer, v))
}

// HallTicketAllotmentDateByNodalOfficerNEQ applies the NEQ predicate on the "HallTicketAllotmentDateByNodalOfficer" field.
func HallTicketAllotmentDateByNodalOfficerNEQ(v time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldNEQ(FieldHallTicketAllotmentDateByNodalOfficer, v))
}

// HallTicketAllotmentDateByNodalOfficerIn applies the In predicate on the "HallTicketAllotmentDateByNodalOfficer" field.
func HallTicketAllotmentDateByNodalOfficerIn(vs ...time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldIn(FieldHallTicketAllotmentDateByNodalOfficer, vs...))
}

// HallTicketAllotmentDateByNodalOfficerNotIn applies the NotIn predicate on the "HallTicketAllotmentDateByNodalOfficer" field.
func HallTicketAllotmentDateByNodalOfficerNotIn(vs ...time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldNotIn(FieldHallTicketAllotmentDateByNodalOfficer, vs...))
}

// HallTicketAllotmentDateByNodalOfficerGT applies the GT predicate on the "HallTicketAllotmentDateByNodalOfficer" field.
func HallTicketAllotmentDateByNodalOfficerGT(v time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldGT(FieldHallTicketAllotmentDateByNodalOfficer, v))
}

// HallTicketAllotmentDateByNodalOfficerGTE applies the GTE predicate on the "HallTicketAllotmentDateByNodalOfficer" field.
func HallTicketAllotmentDateByNodalOfficerGTE(v time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldGTE(FieldHallTicketAllotmentDateByNodalOfficer, v))
}

// HallTicketAllotmentDateByNodalOfficerLT applies the LT predicate on the "HallTicketAllotmentDateByNodalOfficer" field.
func HallTicketAllotmentDateByNodalOfficerLT(v time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldLT(FieldHallTicketAllotmentDateByNodalOfficer, v))
}

// HallTicketAllotmentDateByNodalOfficerLTE applies the LTE predicate on the "HallTicketAllotmentDateByNodalOfficer" field.
func HallTicketAllotmentDateByNodalOfficerLTE(v time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldLTE(FieldHallTicketAllotmentDateByNodalOfficer, v))
}

// HallTicketDownloadDateEQ applies the EQ predicate on the "HallTicketDownloadDate" field.
func HallTicketDownloadDateEQ(v time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldEQ(FieldHallTicketDownloadDate, v))
}

// HallTicketDownloadDateNEQ applies the NEQ predicate on the "HallTicketDownloadDate" field.
func HallTicketDownloadDateNEQ(v time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldNEQ(FieldHallTicketDownloadDate, v))
}

// HallTicketDownloadDateIn applies the In predicate on the "HallTicketDownloadDate" field.
func HallTicketDownloadDateIn(vs ...time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldIn(FieldHallTicketDownloadDate, vs...))
}

// HallTicketDownloadDateNotIn applies the NotIn predicate on the "HallTicketDownloadDate" field.
func HallTicketDownloadDateNotIn(vs ...time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldNotIn(FieldHallTicketDownloadDate, vs...))
}

// HallTicketDownloadDateGT applies the GT predicate on the "HallTicketDownloadDate" field.
func HallTicketDownloadDateGT(v time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldGT(FieldHallTicketDownloadDate, v))
}

// HallTicketDownloadDateGTE applies the GTE predicate on the "HallTicketDownloadDate" field.
func HallTicketDownloadDateGTE(v time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldGTE(FieldHallTicketDownloadDate, v))
}

// HallTicketDownloadDateLT applies the LT predicate on the "HallTicketDownloadDate" field.
func HallTicketDownloadDateLT(v time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldLT(FieldHallTicketDownloadDate, v))
}

// HallTicketDownloadDateLTE applies the LTE predicate on the "HallTicketDownloadDate" field.
func HallTicketDownloadDateLTE(v time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldLTE(FieldHallTicketDownloadDate, v))
}

// HallTicketDownloadDateIsNil applies the IsNil predicate on the "HallTicketDownloadDate" field.
func HallTicketDownloadDateIsNil() predicate.Notification {
	return predicate.Notification(sql.FieldIsNull(FieldHallTicketDownloadDate))
}

// HallTicketDownloadDateNotNil applies the NotNil predicate on the "HallTicketDownloadDate" field.
func HallTicketDownloadDateNotNil() predicate.Notification {
	return predicate.Notification(sql.FieldNotNull(FieldHallTicketDownloadDate))
}

// NotifyFileEQ applies the EQ predicate on the "NotifyFile" field.
func NotifyFileEQ(v string) predicate.Notification {
	return predicate.Notification(sql.FieldEQ(FieldNotifyFile, v))
}

// NotifyFileNEQ applies the NEQ predicate on the "NotifyFile" field.
func NotifyFileNEQ(v string) predicate.Notification {
	return predicate.Notification(sql.FieldNEQ(FieldNotifyFile, v))
}

// NotifyFileIn applies the In predicate on the "NotifyFile" field.
func NotifyFileIn(vs ...string) predicate.Notification {
	return predicate.Notification(sql.FieldIn(FieldNotifyFile, vs...))
}

// NotifyFileNotIn applies the NotIn predicate on the "NotifyFile" field.
func NotifyFileNotIn(vs ...string) predicate.Notification {
	return predicate.Notification(sql.FieldNotIn(FieldNotifyFile, vs...))
}

// NotifyFileGT applies the GT predicate on the "NotifyFile" field.
func NotifyFileGT(v string) predicate.Notification {
	return predicate.Notification(sql.FieldGT(FieldNotifyFile, v))
}

// NotifyFileGTE applies the GTE predicate on the "NotifyFile" field.
func NotifyFileGTE(v string) predicate.Notification {
	return predicate.Notification(sql.FieldGTE(FieldNotifyFile, v))
}

// NotifyFileLT applies the LT predicate on the "NotifyFile" field.
func NotifyFileLT(v string) predicate.Notification {
	return predicate.Notification(sql.FieldLT(FieldNotifyFile, v))
}

// NotifyFileLTE applies the LTE predicate on the "NotifyFile" field.
func NotifyFileLTE(v string) predicate.Notification {
	return predicate.Notification(sql.FieldLTE(FieldNotifyFile, v))
}

// NotifyFileContains applies the Contains predicate on the "NotifyFile" field.
func NotifyFileContains(v string) predicate.Notification {
	return predicate.Notification(sql.FieldContains(FieldNotifyFile, v))
}

// NotifyFileHasPrefix applies the HasPrefix predicate on the "NotifyFile" field.
func NotifyFileHasPrefix(v string) predicate.Notification {
	return predicate.Notification(sql.FieldHasPrefix(FieldNotifyFile, v))
}

// NotifyFileHasSuffix applies the HasSuffix predicate on the "NotifyFile" field.
func NotifyFileHasSuffix(v string) predicate.Notification {
	return predicate.Notification(sql.FieldHasSuffix(FieldNotifyFile, v))
}

// NotifyFileIsNil applies the IsNil predicate on the "NotifyFile" field.
func NotifyFileIsNil() predicate.Notification {
	return predicate.Notification(sql.FieldIsNull(FieldNotifyFile))
}

// NotifyFileNotNil applies the NotNil predicate on the "NotifyFile" field.
func NotifyFileNotNil() predicate.Notification {
	return predicate.Notification(sql.FieldNotNull(FieldNotifyFile))
}

// NotifyFileEqualFold applies the EqualFold predicate on the "NotifyFile" field.
func NotifyFileEqualFold(v string) predicate.Notification {
	return predicate.Notification(sql.FieldEqualFold(FieldNotifyFile, v))
}

// NotifyFileContainsFold applies the ContainsFold predicate on the "NotifyFile" field.
func NotifyFileContainsFold(v string) predicate.Notification {
	return predicate.Notification(sql.FieldContainsFold(FieldNotifyFile, v))
}

// SyllabusFileEQ applies the EQ predicate on the "SyllabusFile" field.
func SyllabusFileEQ(v string) predicate.Notification {
	return predicate.Notification(sql.FieldEQ(FieldSyllabusFile, v))
}

// SyllabusFileNEQ applies the NEQ predicate on the "SyllabusFile" field.
func SyllabusFileNEQ(v string) predicate.Notification {
	return predicate.Notification(sql.FieldNEQ(FieldSyllabusFile, v))
}

// SyllabusFileIn applies the In predicate on the "SyllabusFile" field.
func SyllabusFileIn(vs ...string) predicate.Notification {
	return predicate.Notification(sql.FieldIn(FieldSyllabusFile, vs...))
}

// SyllabusFileNotIn applies the NotIn predicate on the "SyllabusFile" field.
func SyllabusFileNotIn(vs ...string) predicate.Notification {
	return predicate.Notification(sql.FieldNotIn(FieldSyllabusFile, vs...))
}

// SyllabusFileGT applies the GT predicate on the "SyllabusFile" field.
func SyllabusFileGT(v string) predicate.Notification {
	return predicate.Notification(sql.FieldGT(FieldSyllabusFile, v))
}

// SyllabusFileGTE applies the GTE predicate on the "SyllabusFile" field.
func SyllabusFileGTE(v string) predicate.Notification {
	return predicate.Notification(sql.FieldGTE(FieldSyllabusFile, v))
}

// SyllabusFileLT applies the LT predicate on the "SyllabusFile" field.
func SyllabusFileLT(v string) predicate.Notification {
	return predicate.Notification(sql.FieldLT(FieldSyllabusFile, v))
}

// SyllabusFileLTE applies the LTE predicate on the "SyllabusFile" field.
func SyllabusFileLTE(v string) predicate.Notification {
	return predicate.Notification(sql.FieldLTE(FieldSyllabusFile, v))
}

// SyllabusFileContains applies the Contains predicate on the "SyllabusFile" field.
func SyllabusFileContains(v string) predicate.Notification {
	return predicate.Notification(sql.FieldContains(FieldSyllabusFile, v))
}

// SyllabusFileHasPrefix applies the HasPrefix predicate on the "SyllabusFile" field.
func SyllabusFileHasPrefix(v string) predicate.Notification {
	return predicate.Notification(sql.FieldHasPrefix(FieldSyllabusFile, v))
}

// SyllabusFileHasSuffix applies the HasSuffix predicate on the "SyllabusFile" field.
func SyllabusFileHasSuffix(v string) predicate.Notification {
	return predicate.Notification(sql.FieldHasSuffix(FieldSyllabusFile, v))
}

// SyllabusFileIsNil applies the IsNil predicate on the "SyllabusFile" field.
func SyllabusFileIsNil() predicate.Notification {
	return predicate.Notification(sql.FieldIsNull(FieldSyllabusFile))
}

// SyllabusFileNotNil applies the NotNil predicate on the "SyllabusFile" field.
func SyllabusFileNotNil() predicate.Notification {
	return predicate.Notification(sql.FieldNotNull(FieldSyllabusFile))
}

// SyllabusFileEqualFold applies the EqualFold predicate on the "SyllabusFile" field.
func SyllabusFileEqualFold(v string) predicate.Notification {
	return predicate.Notification(sql.FieldEqualFold(FieldSyllabusFile, v))
}

// SyllabusFileContainsFold applies the ContainsFold predicate on the "SyllabusFile" field.
func SyllabusFileContainsFold(v string) predicate.Notification {
	return predicate.Notification(sql.FieldContainsFold(FieldSyllabusFile, v))
}

// VacanciesFileEQ applies the EQ predicate on the "VacanciesFile" field.
func VacanciesFileEQ(v string) predicate.Notification {
	return predicate.Notification(sql.FieldEQ(FieldVacanciesFile, v))
}

// VacanciesFileNEQ applies the NEQ predicate on the "VacanciesFile" field.
func VacanciesFileNEQ(v string) predicate.Notification {
	return predicate.Notification(sql.FieldNEQ(FieldVacanciesFile, v))
}

// VacanciesFileIn applies the In predicate on the "VacanciesFile" field.
func VacanciesFileIn(vs ...string) predicate.Notification {
	return predicate.Notification(sql.FieldIn(FieldVacanciesFile, vs...))
}

// VacanciesFileNotIn applies the NotIn predicate on the "VacanciesFile" field.
func VacanciesFileNotIn(vs ...string) predicate.Notification {
	return predicate.Notification(sql.FieldNotIn(FieldVacanciesFile, vs...))
}

// VacanciesFileGT applies the GT predicate on the "VacanciesFile" field.
func VacanciesFileGT(v string) predicate.Notification {
	return predicate.Notification(sql.FieldGT(FieldVacanciesFile, v))
}

// VacanciesFileGTE applies the GTE predicate on the "VacanciesFile" field.
func VacanciesFileGTE(v string) predicate.Notification {
	return predicate.Notification(sql.FieldGTE(FieldVacanciesFile, v))
}

// VacanciesFileLT applies the LT predicate on the "VacanciesFile" field.
func VacanciesFileLT(v string) predicate.Notification {
	return predicate.Notification(sql.FieldLT(FieldVacanciesFile, v))
}

// VacanciesFileLTE applies the LTE predicate on the "VacanciesFile" field.
func VacanciesFileLTE(v string) predicate.Notification {
	return predicate.Notification(sql.FieldLTE(FieldVacanciesFile, v))
}

// VacanciesFileContains applies the Contains predicate on the "VacanciesFile" field.
func VacanciesFileContains(v string) predicate.Notification {
	return predicate.Notification(sql.FieldContains(FieldVacanciesFile, v))
}

// VacanciesFileHasPrefix applies the HasPrefix predicate on the "VacanciesFile" field.
func VacanciesFileHasPrefix(v string) predicate.Notification {
	return predicate.Notification(sql.FieldHasPrefix(FieldVacanciesFile, v))
}

// VacanciesFileHasSuffix applies the HasSuffix predicate on the "VacanciesFile" field.
func VacanciesFileHasSuffix(v string) predicate.Notification {
	return predicate.Notification(sql.FieldHasSuffix(FieldVacanciesFile, v))
}

// VacanciesFileIsNil applies the IsNil predicate on the "VacanciesFile" field.
func VacanciesFileIsNil() predicate.Notification {
	return predicate.Notification(sql.FieldIsNull(FieldVacanciesFile))
}

// VacanciesFileNotNil applies the NotNil predicate on the "VacanciesFile" field.
func VacanciesFileNotNil() predicate.Notification {
	return predicate.Notification(sql.FieldNotNull(FieldVacanciesFile))
}

// VacanciesFileEqualFold applies the EqualFold predicate on the "VacanciesFile" field.
func VacanciesFileEqualFold(v string) predicate.Notification {
	return predicate.Notification(sql.FieldEqualFold(FieldVacanciesFile, v))
}

// VacanciesFileContainsFold applies the ContainsFold predicate on the "VacanciesFile" field.
func VacanciesFileContainsFold(v string) predicate.Notification {
	return predicate.Notification(sql.FieldContainsFold(FieldVacanciesFile, v))
}

// ExamCodePSEQ applies the EQ predicate on the "ExamCodePS" field.
func ExamCodePSEQ(v int32) predicate.Notification {
	return predicate.Notification(sql.FieldEQ(FieldExamCodePS, v))
}

// ExamCodePSNEQ applies the NEQ predicate on the "ExamCodePS" field.
func ExamCodePSNEQ(v int32) predicate.Notification {
	return predicate.Notification(sql.FieldNEQ(FieldExamCodePS, v))
}

// ExamCodePSIn applies the In predicate on the "ExamCodePS" field.
func ExamCodePSIn(vs ...int32) predicate.Notification {
	return predicate.Notification(sql.FieldIn(FieldExamCodePS, vs...))
}

// ExamCodePSNotIn applies the NotIn predicate on the "ExamCodePS" field.
func ExamCodePSNotIn(vs ...int32) predicate.Notification {
	return predicate.Notification(sql.FieldNotIn(FieldExamCodePS, vs...))
}

// ExamCodePSGT applies the GT predicate on the "ExamCodePS" field.
func ExamCodePSGT(v int32) predicate.Notification {
	return predicate.Notification(sql.FieldGT(FieldExamCodePS, v))
}

// ExamCodePSGTE applies the GTE predicate on the "ExamCodePS" field.
func ExamCodePSGTE(v int32) predicate.Notification {
	return predicate.Notification(sql.FieldGTE(FieldExamCodePS, v))
}

// ExamCodePSLT applies the LT predicate on the "ExamCodePS" field.
func ExamCodePSLT(v int32) predicate.Notification {
	return predicate.Notification(sql.FieldLT(FieldExamCodePS, v))
}

// ExamCodePSLTE applies the LTE predicate on the "ExamCodePS" field.
func ExamCodePSLTE(v int32) predicate.Notification {
	return predicate.Notification(sql.FieldLTE(FieldExamCodePS, v))
}

// ExamCodePSIsNil applies the IsNil predicate on the "ExamCodePS" field.
func ExamCodePSIsNil() predicate.Notification {
	return predicate.Notification(sql.FieldIsNull(FieldExamCodePS))
}

// ExamCodePSNotNil applies the NotNil predicate on the "ExamCodePS" field.
func ExamCodePSNotNil() predicate.Notification {
	return predicate.Notification(sql.FieldNotNull(FieldExamCodePS))
}

// CenterAllotmentEndDateEQ applies the EQ predicate on the "CenterAllotmentEndDate" field.
func CenterAllotmentEndDateEQ(v time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldEQ(FieldCenterAllotmentEndDate, v))
}

// CenterAllotmentEndDateNEQ applies the NEQ predicate on the "CenterAllotmentEndDate" field.
func CenterAllotmentEndDateNEQ(v time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldNEQ(FieldCenterAllotmentEndDate, v))
}

// CenterAllotmentEndDateIn applies the In predicate on the "CenterAllotmentEndDate" field.
func CenterAllotmentEndDateIn(vs ...time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldIn(FieldCenterAllotmentEndDate, vs...))
}

// CenterAllotmentEndDateNotIn applies the NotIn predicate on the "CenterAllotmentEndDate" field.
func CenterAllotmentEndDateNotIn(vs ...time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldNotIn(FieldCenterAllotmentEndDate, vs...))
}

// CenterAllotmentEndDateGT applies the GT predicate on the "CenterAllotmentEndDate" field.
func CenterAllotmentEndDateGT(v time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldGT(FieldCenterAllotmentEndDate, v))
}

// CenterAllotmentEndDateGTE applies the GTE predicate on the "CenterAllotmentEndDate" field.
func CenterAllotmentEndDateGTE(v time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldGTE(FieldCenterAllotmentEndDate, v))
}

// CenterAllotmentEndDateLT applies the LT predicate on the "CenterAllotmentEndDate" field.
func CenterAllotmentEndDateLT(v time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldLT(FieldCenterAllotmentEndDate, v))
}

// CenterAllotmentEndDateLTE applies the LTE predicate on the "CenterAllotmentEndDate" field.
func CenterAllotmentEndDateLTE(v time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldLTE(FieldCenterAllotmentEndDate, v))
}

// CenterAllotmentEndDateIsNil applies the IsNil predicate on the "CenterAllotmentEndDate" field.
func CenterAllotmentEndDateIsNil() predicate.Notification {
	return predicate.Notification(sql.FieldIsNull(FieldCenterAllotmentEndDate))
}

// CenterAllotmentEndDateNotNil applies the NotNil predicate on the "CenterAllotmentEndDate" field.
func CenterAllotmentEndDateNotNil() predicate.Notification {
	return predicate.Notification(sql.FieldNotNull(FieldCenterAllotmentEndDate))
}

// HasApplications applies the HasEdge predicate on the "applications" edge.
func HasApplications() predicate.Notification {
	return predicate.Notification(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ApplicationsTable, ApplicationsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasApplicationsWith applies the HasEdge predicate on the "applications" edge with a given conditions (other predicates).
func HasApplicationsWith(preds ...predicate.Application) predicate.Notification {
	return predicate.Notification(func(s *sql.Selector) {
		step := newApplicationsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasExam applies the HasEdge predicate on the "exam" edge.
func HasExam() predicate.Notification {
	return predicate.Notification(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ExamTable, ExamColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasExamWith applies the HasEdge predicate on the "exam" edge with a given conditions (other predicates).
func HasExamWith(preds ...predicate.Exam) predicate.Notification {
	return predicate.Notification(func(s *sql.Selector) {
		step := newExamStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasVacancyYears applies the HasEdge predicate on the "vacancy_years" edge.
func HasVacancyYears() predicate.Notification {
	return predicate.Notification(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, VacancyYearsTable, VacancyYearsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasVacancyYearsWith applies the HasEdge predicate on the "vacancy_years" edge with a given conditions (other predicates).
func HasVacancyYearsWith(preds ...predicate.VacancyYear) predicate.Notification {
	return predicate.Notification(func(s *sql.Selector) {
		step := newVacancyYearsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasNotifyRef applies the HasEdge predicate on the "notify_ref" edge.
func HasNotifyRef() predicate.Notification {
	return predicate.Notification(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, NotifyRefTable, NotifyRefPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasNotifyRefWith applies the HasEdge predicate on the "notify_ref" edge with a given conditions (other predicates).
func HasNotifyRefWith(preds ...predicate.Notification) predicate.Notification {
	return predicate.Notification(func(s *sql.Selector) {
		step := newNotifyRefStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasLogData applies the HasEdge predicate on the "LogData" edge.
func HasLogData() predicate.Notification {
	return predicate.Notification(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, LogDataTable, LogDataColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasLogDataWith applies the HasEdge predicate on the "LogData" edge with a given conditions (other predicates).
func HasLogDataWith(preds ...predicate.Logs) predicate.Notification {
	return predicate.Notification(func(s *sql.Selector) {
		step := newLogDataStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Notification) predicate.Notification {
	return predicate.Notification(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Notification) predicate.Notification {
	return predicate.Notification(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Notification) predicate.Notification {
	return predicate.Notification(func(s *sql.Selector) {
		p(s.Not())
	})
}
