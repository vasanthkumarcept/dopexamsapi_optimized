// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"recruit/ent/exam"
	"recruit/ent/examtype"
	"recruit/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ExamTypeUpdate is the builder for updating ExamType entities.
type ExamTypeUpdate struct {
	config
	hooks    []Hook
	mutation *ExamTypeMutation
}

// Where appends a list predicates to the ExamTypeUpdate builder.
func (etu *ExamTypeUpdate) Where(ps ...predicate.ExamType) *ExamTypeUpdate {
	etu.mutation.Where(ps...)
	return etu
}

// SetExamType sets the "ExamType" field.
func (etu *ExamTypeUpdate) SetExamType(s string) *ExamTypeUpdate {
	etu.mutation.SetExamType(s)
	return etu
}

// SetStatus sets the "Status" field.
func (etu *ExamTypeUpdate) SetStatus(s string) *ExamTypeUpdate {
	etu.mutation.SetStatus(s)
	return etu
}

// SetExamCode sets the "ExamCode" field.
func (etu *ExamTypeUpdate) SetExamCode(i int32) *ExamTypeUpdate {
	etu.mutation.SetExamCode(i)
	return etu
}

// SetNillableExamCode sets the "ExamCode" field if the given value is not nil.
func (etu *ExamTypeUpdate) SetNillableExamCode(i *int32) *ExamTypeUpdate {
	if i != nil {
		etu.SetExamCode(*i)
	}
	return etu
}

// ClearExamCode clears the value of the "ExamCode" field.
func (etu *ExamTypeUpdate) ClearExamCode() *ExamTypeUpdate {
	etu.mutation.ClearExamCode()
	return etu
}

// SetExamID sets the "exam" edge to the Exam entity by ID.
func (etu *ExamTypeUpdate) SetExamID(id int32) *ExamTypeUpdate {
	etu.mutation.SetExamID(id)
	return etu
}

// SetNillableExamID sets the "exam" edge to the Exam entity by ID if the given value is not nil.
func (etu *ExamTypeUpdate) SetNillableExamID(id *int32) *ExamTypeUpdate {
	if id != nil {
		etu = etu.SetExamID(*id)
	}
	return etu
}

// SetExam sets the "exam" edge to the Exam entity.
func (etu *ExamTypeUpdate) SetExam(e *Exam) *ExamTypeUpdate {
	return etu.SetExamID(e.ID)
}

// Mutation returns the ExamTypeMutation object of the builder.
func (etu *ExamTypeUpdate) Mutation() *ExamTypeMutation {
	return etu.mutation
}

// ClearExam clears the "exam" edge to the Exam entity.
func (etu *ExamTypeUpdate) ClearExam() *ExamTypeUpdate {
	etu.mutation.ClearExam()
	return etu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (etu *ExamTypeUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, etu.sqlSave, etu.mutation, etu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (etu *ExamTypeUpdate) SaveX(ctx context.Context) int {
	affected, err := etu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (etu *ExamTypeUpdate) Exec(ctx context.Context) error {
	_, err := etu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (etu *ExamTypeUpdate) ExecX(ctx context.Context) {
	if err := etu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (etu *ExamTypeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(examtype.Table, examtype.Columns, sqlgraph.NewFieldSpec(examtype.FieldID, field.TypeInt32))
	if ps := etu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := etu.mutation.ExamType(); ok {
		_spec.SetField(examtype.FieldExamType, field.TypeString, value)
	}
	if value, ok := etu.mutation.Status(); ok {
		_spec.SetField(examtype.FieldStatus, field.TypeString, value)
	}
	if etu.mutation.ExamCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   examtype.ExamTable,
			Columns: []string{examtype.ExamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := etu.mutation.ExamIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   examtype.ExamTable,
			Columns: []string{examtype.ExamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, etu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{examtype.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	etu.mutation.done = true
	return n, nil
}

// ExamTypeUpdateOne is the builder for updating a single ExamType entity.
type ExamTypeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ExamTypeMutation
}

// SetExamType sets the "ExamType" field.
func (etuo *ExamTypeUpdateOne) SetExamType(s string) *ExamTypeUpdateOne {
	etuo.mutation.SetExamType(s)
	return etuo
}

// SetStatus sets the "Status" field.
func (etuo *ExamTypeUpdateOne) SetStatus(s string) *ExamTypeUpdateOne {
	etuo.mutation.SetStatus(s)
	return etuo
}

// SetExamCode sets the "ExamCode" field.
func (etuo *ExamTypeUpdateOne) SetExamCode(i int32) *ExamTypeUpdateOne {
	etuo.mutation.SetExamCode(i)
	return etuo
}

// SetNillableExamCode sets the "ExamCode" field if the given value is not nil.
func (etuo *ExamTypeUpdateOne) SetNillableExamCode(i *int32) *ExamTypeUpdateOne {
	if i != nil {
		etuo.SetExamCode(*i)
	}
	return etuo
}

// ClearExamCode clears the value of the "ExamCode" field.
func (etuo *ExamTypeUpdateOne) ClearExamCode() *ExamTypeUpdateOne {
	etuo.mutation.ClearExamCode()
	return etuo
}

// SetExamID sets the "exam" edge to the Exam entity by ID.
func (etuo *ExamTypeUpdateOne) SetExamID(id int32) *ExamTypeUpdateOne {
	etuo.mutation.SetExamID(id)
	return etuo
}

// SetNillableExamID sets the "exam" edge to the Exam entity by ID if the given value is not nil.
func (etuo *ExamTypeUpdateOne) SetNillableExamID(id *int32) *ExamTypeUpdateOne {
	if id != nil {
		etuo = etuo.SetExamID(*id)
	}
	return etuo
}

// SetExam sets the "exam" edge to the Exam entity.
func (etuo *ExamTypeUpdateOne) SetExam(e *Exam) *ExamTypeUpdateOne {
	return etuo.SetExamID(e.ID)
}

// Mutation returns the ExamTypeMutation object of the builder.
func (etuo *ExamTypeUpdateOne) Mutation() *ExamTypeMutation {
	return etuo.mutation
}

// ClearExam clears the "exam" edge to the Exam entity.
func (etuo *ExamTypeUpdateOne) ClearExam() *ExamTypeUpdateOne {
	etuo.mutation.ClearExam()
	return etuo
}

// Where appends a list predicates to the ExamTypeUpdate builder.
func (etuo *ExamTypeUpdateOne) Where(ps ...predicate.ExamType) *ExamTypeUpdateOne {
	etuo.mutation.Where(ps...)
	return etuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (etuo *ExamTypeUpdateOne) Select(field string, fields ...string) *ExamTypeUpdateOne {
	etuo.fields = append([]string{field}, fields...)
	return etuo
}

// Save executes the query and returns the updated ExamType entity.
func (etuo *ExamTypeUpdateOne) Save(ctx context.Context) (*ExamType, error) {
	return withHooks(ctx, etuo.sqlSave, etuo.mutation, etuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (etuo *ExamTypeUpdateOne) SaveX(ctx context.Context) *ExamType {
	node, err := etuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (etuo *ExamTypeUpdateOne) Exec(ctx context.Context) error {
	_, err := etuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (etuo *ExamTypeUpdateOne) ExecX(ctx context.Context) {
	if err := etuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (etuo *ExamTypeUpdateOne) sqlSave(ctx context.Context) (_node *ExamType, err error) {
	_spec := sqlgraph.NewUpdateSpec(examtype.Table, examtype.Columns, sqlgraph.NewFieldSpec(examtype.FieldID, field.TypeInt32))
	id, ok := etuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ExamType.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := etuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, examtype.FieldID)
		for _, f := range fields {
			if !examtype.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != examtype.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := etuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := etuo.mutation.ExamType(); ok {
		_spec.SetField(examtype.FieldExamType, field.TypeString, value)
	}
	if value, ok := etuo.mutation.Status(); ok {
		_spec.SetField(examtype.FieldStatus, field.TypeString, value)
	}
	if etuo.mutation.ExamCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   examtype.ExamTable,
			Columns: []string{examtype.ExamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := etuo.mutation.ExamIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   examtype.ExamTable,
			Columns: []string{examtype.ExamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ExamType{config: etuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, etuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{examtype.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	etuo.mutation.done = true
	return _node, nil
}
