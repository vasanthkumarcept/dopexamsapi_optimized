// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"recruit/ent/examcategorydisabilitymapping"
	"recruit/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ExamCategoryDisabilityMappingUpdate is the builder for updating ExamCategoryDisabilityMapping entities.
type ExamCategoryDisabilityMappingUpdate struct {
	config
	hooks    []Hook
	mutation *ExamCategoryDisabilityMappingMutation
}

// Where appends a list predicates to the ExamCategoryDisabilityMappingUpdate builder.
func (ecdmu *ExamCategoryDisabilityMappingUpdate) Where(ps ...predicate.ExamCategoryDisabilityMapping) *ExamCategoryDisabilityMappingUpdate {
	ecdmu.mutation.Where(ps...)
	return ecdmu
}

// SetExamCode sets the "ExamCode" field.
func (ecdmu *ExamCategoryDisabilityMappingUpdate) SetExamCode(i int64) *ExamCategoryDisabilityMappingUpdate {
	ecdmu.mutation.ResetExamCode()
	ecdmu.mutation.SetExamCode(i)
	return ecdmu
}

// SetNillableExamCode sets the "ExamCode" field if the given value is not nil.
func (ecdmu *ExamCategoryDisabilityMappingUpdate) SetNillableExamCode(i *int64) *ExamCategoryDisabilityMappingUpdate {
	if i != nil {
		ecdmu.SetExamCode(*i)
	}
	return ecdmu
}

// AddExamCode adds i to the "ExamCode" field.
func (ecdmu *ExamCategoryDisabilityMappingUpdate) AddExamCode(i int64) *ExamCategoryDisabilityMappingUpdate {
	ecdmu.mutation.AddExamCode(i)
	return ecdmu
}

// ClearExamCode clears the value of the "ExamCode" field.
func (ecdmu *ExamCategoryDisabilityMappingUpdate) ClearExamCode() *ExamCategoryDisabilityMappingUpdate {
	ecdmu.mutation.ClearExamCode()
	return ecdmu
}

// SetExamShortName sets the "ExamShortName" field.
func (ecdmu *ExamCategoryDisabilityMappingUpdate) SetExamShortName(s string) *ExamCategoryDisabilityMappingUpdate {
	ecdmu.mutation.SetExamShortName(s)
	return ecdmu
}

// SetNillableExamShortName sets the "ExamShortName" field if the given value is not nil.
func (ecdmu *ExamCategoryDisabilityMappingUpdate) SetNillableExamShortName(s *string) *ExamCategoryDisabilityMappingUpdate {
	if s != nil {
		ecdmu.SetExamShortName(*s)
	}
	return ecdmu
}

// ClearExamShortName clears the value of the "ExamShortName" field.
func (ecdmu *ExamCategoryDisabilityMappingUpdate) ClearExamShortName() *ExamCategoryDisabilityMappingUpdate {
	ecdmu.mutation.ClearExamShortName()
	return ecdmu
}

// SetCategoryDisability sets the "CategoryDisability" field.
func (ecdmu *ExamCategoryDisabilityMappingUpdate) SetCategoryDisability(s string) *ExamCategoryDisabilityMappingUpdate {
	ecdmu.mutation.SetCategoryDisability(s)
	return ecdmu
}

// SetNillableCategoryDisability sets the "CategoryDisability" field if the given value is not nil.
func (ecdmu *ExamCategoryDisabilityMappingUpdate) SetNillableCategoryDisability(s *string) *ExamCategoryDisabilityMappingUpdate {
	if s != nil {
		ecdmu.SetCategoryDisability(*s)
	}
	return ecdmu
}

// ClearCategoryDisability clears the value of the "CategoryDisability" field.
func (ecdmu *ExamCategoryDisabilityMappingUpdate) ClearCategoryDisability() *ExamCategoryDisabilityMappingUpdate {
	ecdmu.mutation.ClearCategoryDisability()
	return ecdmu
}

// SetCategoryDisabilityCode sets the "CategoryDisabilityCode" field.
func (ecdmu *ExamCategoryDisabilityMappingUpdate) SetCategoryDisabilityCode(s string) *ExamCategoryDisabilityMappingUpdate {
	ecdmu.mutation.SetCategoryDisabilityCode(s)
	return ecdmu
}

// SetNillableCategoryDisabilityCode sets the "CategoryDisabilityCode" field if the given value is not nil.
func (ecdmu *ExamCategoryDisabilityMappingUpdate) SetNillableCategoryDisabilityCode(s *string) *ExamCategoryDisabilityMappingUpdate {
	if s != nil {
		ecdmu.SetCategoryDisabilityCode(*s)
	}
	return ecdmu
}

// ClearCategoryDisabilityCode clears the value of the "CategoryDisabilityCode" field.
func (ecdmu *ExamCategoryDisabilityMappingUpdate) ClearCategoryDisabilityCode() *ExamCategoryDisabilityMappingUpdate {
	ecdmu.mutation.ClearCategoryDisabilityCode()
	return ecdmu
}

// SetCategoryDisabilityDescription sets the "CategoryDisabilityDescription" field.
func (ecdmu *ExamCategoryDisabilityMappingUpdate) SetCategoryDisabilityDescription(s string) *ExamCategoryDisabilityMappingUpdate {
	ecdmu.mutation.SetCategoryDisabilityDescription(s)
	return ecdmu
}

// SetNillableCategoryDisabilityDescription sets the "CategoryDisabilityDescription" field if the given value is not nil.
func (ecdmu *ExamCategoryDisabilityMappingUpdate) SetNillableCategoryDisabilityDescription(s *string) *ExamCategoryDisabilityMappingUpdate {
	if s != nil {
		ecdmu.SetCategoryDisabilityDescription(*s)
	}
	return ecdmu
}

// ClearCategoryDisabilityDescription clears the value of the "CategoryDisabilityDescription" field.
func (ecdmu *ExamCategoryDisabilityMappingUpdate) ClearCategoryDisabilityDescription() *ExamCategoryDisabilityMappingUpdate {
	ecdmu.mutation.ClearCategoryDisabilityDescription()
	return ecdmu
}

// SetAgeException sets the "AgeException" field.
func (ecdmu *ExamCategoryDisabilityMappingUpdate) SetAgeException(i int32) *ExamCategoryDisabilityMappingUpdate {
	ecdmu.mutation.ResetAgeException()
	ecdmu.mutation.SetAgeException(i)
	return ecdmu
}

// SetNillableAgeException sets the "AgeException" field if the given value is not nil.
func (ecdmu *ExamCategoryDisabilityMappingUpdate) SetNillableAgeException(i *int32) *ExamCategoryDisabilityMappingUpdate {
	if i != nil {
		ecdmu.SetAgeException(*i)
	}
	return ecdmu
}

// AddAgeException adds i to the "AgeException" field.
func (ecdmu *ExamCategoryDisabilityMappingUpdate) AddAgeException(i int32) *ExamCategoryDisabilityMappingUpdate {
	ecdmu.mutation.AddAgeException(i)
	return ecdmu
}

// ClearAgeException clears the value of the "AgeException" field.
func (ecdmu *ExamCategoryDisabilityMappingUpdate) ClearAgeException() *ExamCategoryDisabilityMappingUpdate {
	ecdmu.mutation.ClearAgeException()
	return ecdmu
}

// SetServiceException sets the "ServiceException" field.
func (ecdmu *ExamCategoryDisabilityMappingUpdate) SetServiceException(i int32) *ExamCategoryDisabilityMappingUpdate {
	ecdmu.mutation.ResetServiceException()
	ecdmu.mutation.SetServiceException(i)
	return ecdmu
}

// SetNillableServiceException sets the "ServiceException" field if the given value is not nil.
func (ecdmu *ExamCategoryDisabilityMappingUpdate) SetNillableServiceException(i *int32) *ExamCategoryDisabilityMappingUpdate {
	if i != nil {
		ecdmu.SetServiceException(*i)
	}
	return ecdmu
}

// AddServiceException adds i to the "ServiceException" field.
func (ecdmu *ExamCategoryDisabilityMappingUpdate) AddServiceException(i int32) *ExamCategoryDisabilityMappingUpdate {
	ecdmu.mutation.AddServiceException(i)
	return ecdmu
}

// ClearServiceException clears the value of the "ServiceException" field.
func (ecdmu *ExamCategoryDisabilityMappingUpdate) ClearServiceException() *ExamCategoryDisabilityMappingUpdate {
	ecdmu.mutation.ClearServiceException()
	return ecdmu
}

// SetDrivingLicense sets the "DrivingLicense" field.
func (ecdmu *ExamCategoryDisabilityMappingUpdate) SetDrivingLicense(b bool) *ExamCategoryDisabilityMappingUpdate {
	ecdmu.mutation.SetDrivingLicense(b)
	return ecdmu
}

// SetNillableDrivingLicense sets the "DrivingLicense" field if the given value is not nil.
func (ecdmu *ExamCategoryDisabilityMappingUpdate) SetNillableDrivingLicense(b *bool) *ExamCategoryDisabilityMappingUpdate {
	if b != nil {
		ecdmu.SetDrivingLicense(*b)
	}
	return ecdmu
}

// ClearDrivingLicense clears the value of the "DrivingLicense" field.
func (ecdmu *ExamCategoryDisabilityMappingUpdate) ClearDrivingLicense() *ExamCategoryDisabilityMappingUpdate {
	ecdmu.mutation.ClearDrivingLicense()
	return ecdmu
}

// SetOrderNumber sets the "OrderNumber" field.
func (ecdmu *ExamCategoryDisabilityMappingUpdate) SetOrderNumber(s string) *ExamCategoryDisabilityMappingUpdate {
	ecdmu.mutation.SetOrderNumber(s)
	return ecdmu
}

// SetNillableOrderNumber sets the "OrderNumber" field if the given value is not nil.
func (ecdmu *ExamCategoryDisabilityMappingUpdate) SetNillableOrderNumber(s *string) *ExamCategoryDisabilityMappingUpdate {
	if s != nil {
		ecdmu.SetOrderNumber(*s)
	}
	return ecdmu
}

// ClearOrderNumber clears the value of the "OrderNumber" field.
func (ecdmu *ExamCategoryDisabilityMappingUpdate) ClearOrderNumber() *ExamCategoryDisabilityMappingUpdate {
	ecdmu.mutation.ClearOrderNumber()
	return ecdmu
}

// SetStatus sets the "Status" field.
func (ecdmu *ExamCategoryDisabilityMappingUpdate) SetStatus(s string) *ExamCategoryDisabilityMappingUpdate {
	ecdmu.mutation.SetStatus(s)
	return ecdmu
}

// SetNillableStatus sets the "Status" field if the given value is not nil.
func (ecdmu *ExamCategoryDisabilityMappingUpdate) SetNillableStatus(s *string) *ExamCategoryDisabilityMappingUpdate {
	if s != nil {
		ecdmu.SetStatus(*s)
	}
	return ecdmu
}

// ClearStatus clears the value of the "Status" field.
func (ecdmu *ExamCategoryDisabilityMappingUpdate) ClearStatus() *ExamCategoryDisabilityMappingUpdate {
	ecdmu.mutation.ClearStatus()
	return ecdmu
}

// SetCreatedById sets the "CreatedById" field.
func (ecdmu *ExamCategoryDisabilityMappingUpdate) SetCreatedById(i int32) *ExamCategoryDisabilityMappingUpdate {
	ecdmu.mutation.ResetCreatedById()
	ecdmu.mutation.SetCreatedById(i)
	return ecdmu
}

// SetNillableCreatedById sets the "CreatedById" field if the given value is not nil.
func (ecdmu *ExamCategoryDisabilityMappingUpdate) SetNillableCreatedById(i *int32) *ExamCategoryDisabilityMappingUpdate {
	if i != nil {
		ecdmu.SetCreatedById(*i)
	}
	return ecdmu
}

// AddCreatedById adds i to the "CreatedById" field.
func (ecdmu *ExamCategoryDisabilityMappingUpdate) AddCreatedById(i int32) *ExamCategoryDisabilityMappingUpdate {
	ecdmu.mutation.AddCreatedById(i)
	return ecdmu
}

// ClearCreatedById clears the value of the "CreatedById" field.
func (ecdmu *ExamCategoryDisabilityMappingUpdate) ClearCreatedById() *ExamCategoryDisabilityMappingUpdate {
	ecdmu.mutation.ClearCreatedById()
	return ecdmu
}

// SetCreatedByUserName sets the "CreatedByUserName" field.
func (ecdmu *ExamCategoryDisabilityMappingUpdate) SetCreatedByUserName(s string) *ExamCategoryDisabilityMappingUpdate {
	ecdmu.mutation.SetCreatedByUserName(s)
	return ecdmu
}

// SetNillableCreatedByUserName sets the "CreatedByUserName" field if the given value is not nil.
func (ecdmu *ExamCategoryDisabilityMappingUpdate) SetNillableCreatedByUserName(s *string) *ExamCategoryDisabilityMappingUpdate {
	if s != nil {
		ecdmu.SetCreatedByUserName(*s)
	}
	return ecdmu
}

// ClearCreatedByUserName clears the value of the "CreatedByUserName" field.
func (ecdmu *ExamCategoryDisabilityMappingUpdate) ClearCreatedByUserName() *ExamCategoryDisabilityMappingUpdate {
	ecdmu.mutation.ClearCreatedByUserName()
	return ecdmu
}

// SetCreatedByEmployeeId sets the "CreatedByEmployeeId" field.
func (ecdmu *ExamCategoryDisabilityMappingUpdate) SetCreatedByEmployeeId(s string) *ExamCategoryDisabilityMappingUpdate {
	ecdmu.mutation.SetCreatedByEmployeeId(s)
	return ecdmu
}

// SetNillableCreatedByEmployeeId sets the "CreatedByEmployeeId" field if the given value is not nil.
func (ecdmu *ExamCategoryDisabilityMappingUpdate) SetNillableCreatedByEmployeeId(s *string) *ExamCategoryDisabilityMappingUpdate {
	if s != nil {
		ecdmu.SetCreatedByEmployeeId(*s)
	}
	return ecdmu
}

// ClearCreatedByEmployeeId clears the value of the "CreatedByEmployeeId" field.
func (ecdmu *ExamCategoryDisabilityMappingUpdate) ClearCreatedByEmployeeId() *ExamCategoryDisabilityMappingUpdate {
	ecdmu.mutation.ClearCreatedByEmployeeId()
	return ecdmu
}

// SetCreatedByDesignation sets the "CreatedByDesignation" field.
func (ecdmu *ExamCategoryDisabilityMappingUpdate) SetCreatedByDesignation(s string) *ExamCategoryDisabilityMappingUpdate {
	ecdmu.mutation.SetCreatedByDesignation(s)
	return ecdmu
}

// SetNillableCreatedByDesignation sets the "CreatedByDesignation" field if the given value is not nil.
func (ecdmu *ExamCategoryDisabilityMappingUpdate) SetNillableCreatedByDesignation(s *string) *ExamCategoryDisabilityMappingUpdate {
	if s != nil {
		ecdmu.SetCreatedByDesignation(*s)
	}
	return ecdmu
}

// ClearCreatedByDesignation clears the value of the "CreatedByDesignation" field.
func (ecdmu *ExamCategoryDisabilityMappingUpdate) ClearCreatedByDesignation() *ExamCategoryDisabilityMappingUpdate {
	ecdmu.mutation.ClearCreatedByDesignation()
	return ecdmu
}

// SetCreatedDate sets the "CreatedDate" field.
func (ecdmu *ExamCategoryDisabilityMappingUpdate) SetCreatedDate(t time.Time) *ExamCategoryDisabilityMappingUpdate {
	ecdmu.mutation.SetCreatedDate(t)
	return ecdmu
}

// SetNillableCreatedDate sets the "CreatedDate" field if the given value is not nil.
func (ecdmu *ExamCategoryDisabilityMappingUpdate) SetNillableCreatedDate(t *time.Time) *ExamCategoryDisabilityMappingUpdate {
	if t != nil {
		ecdmu.SetCreatedDate(*t)
	}
	return ecdmu
}

// ClearCreatedDate clears the value of the "CreatedDate" field.
func (ecdmu *ExamCategoryDisabilityMappingUpdate) ClearCreatedDate() *ExamCategoryDisabilityMappingUpdate {
	ecdmu.mutation.ClearCreatedDate()
	return ecdmu
}

// SetVerifiedById sets the "VerifiedById" field.
func (ecdmu *ExamCategoryDisabilityMappingUpdate) SetVerifiedById(i int64) *ExamCategoryDisabilityMappingUpdate {
	ecdmu.mutation.ResetVerifiedById()
	ecdmu.mutation.SetVerifiedById(i)
	return ecdmu
}

// SetNillableVerifiedById sets the "VerifiedById" field if the given value is not nil.
func (ecdmu *ExamCategoryDisabilityMappingUpdate) SetNillableVerifiedById(i *int64) *ExamCategoryDisabilityMappingUpdate {
	if i != nil {
		ecdmu.SetVerifiedById(*i)
	}
	return ecdmu
}

// AddVerifiedById adds i to the "VerifiedById" field.
func (ecdmu *ExamCategoryDisabilityMappingUpdate) AddVerifiedById(i int64) *ExamCategoryDisabilityMappingUpdate {
	ecdmu.mutation.AddVerifiedById(i)
	return ecdmu
}

// ClearVerifiedById clears the value of the "VerifiedById" field.
func (ecdmu *ExamCategoryDisabilityMappingUpdate) ClearVerifiedById() *ExamCategoryDisabilityMappingUpdate {
	ecdmu.mutation.ClearVerifiedById()
	return ecdmu
}

// SetVerifiedByUserName sets the "VerifiedByUserName" field.
func (ecdmu *ExamCategoryDisabilityMappingUpdate) SetVerifiedByUserName(s string) *ExamCategoryDisabilityMappingUpdate {
	ecdmu.mutation.SetVerifiedByUserName(s)
	return ecdmu
}

// SetNillableVerifiedByUserName sets the "VerifiedByUserName" field if the given value is not nil.
func (ecdmu *ExamCategoryDisabilityMappingUpdate) SetNillableVerifiedByUserName(s *string) *ExamCategoryDisabilityMappingUpdate {
	if s != nil {
		ecdmu.SetVerifiedByUserName(*s)
	}
	return ecdmu
}

// ClearVerifiedByUserName clears the value of the "VerifiedByUserName" field.
func (ecdmu *ExamCategoryDisabilityMappingUpdate) ClearVerifiedByUserName() *ExamCategoryDisabilityMappingUpdate {
	ecdmu.mutation.ClearVerifiedByUserName()
	return ecdmu
}

// SetVerifiedByEmployeeId sets the "VerifiedByEmployeeId" field.
func (ecdmu *ExamCategoryDisabilityMappingUpdate) SetVerifiedByEmployeeId(s string) *ExamCategoryDisabilityMappingUpdate {
	ecdmu.mutation.SetVerifiedByEmployeeId(s)
	return ecdmu
}

// SetNillableVerifiedByEmployeeId sets the "VerifiedByEmployeeId" field if the given value is not nil.
func (ecdmu *ExamCategoryDisabilityMappingUpdate) SetNillableVerifiedByEmployeeId(s *string) *ExamCategoryDisabilityMappingUpdate {
	if s != nil {
		ecdmu.SetVerifiedByEmployeeId(*s)
	}
	return ecdmu
}

// ClearVerifiedByEmployeeId clears the value of the "VerifiedByEmployeeId" field.
func (ecdmu *ExamCategoryDisabilityMappingUpdate) ClearVerifiedByEmployeeId() *ExamCategoryDisabilityMappingUpdate {
	ecdmu.mutation.ClearVerifiedByEmployeeId()
	return ecdmu
}

// SetVerifiedByDesignation sets the "VerifiedByDesignation" field.
func (ecdmu *ExamCategoryDisabilityMappingUpdate) SetVerifiedByDesignation(s string) *ExamCategoryDisabilityMappingUpdate {
	ecdmu.mutation.SetVerifiedByDesignation(s)
	return ecdmu
}

// SetNillableVerifiedByDesignation sets the "VerifiedByDesignation" field if the given value is not nil.
func (ecdmu *ExamCategoryDisabilityMappingUpdate) SetNillableVerifiedByDesignation(s *string) *ExamCategoryDisabilityMappingUpdate {
	if s != nil {
		ecdmu.SetVerifiedByDesignation(*s)
	}
	return ecdmu
}

// ClearVerifiedByDesignation clears the value of the "VerifiedByDesignation" field.
func (ecdmu *ExamCategoryDisabilityMappingUpdate) ClearVerifiedByDesignation() *ExamCategoryDisabilityMappingUpdate {
	ecdmu.mutation.ClearVerifiedByDesignation()
	return ecdmu
}

// SetVerifiedDate sets the "VerifiedDate" field.
func (ecdmu *ExamCategoryDisabilityMappingUpdate) SetVerifiedDate(t time.Time) *ExamCategoryDisabilityMappingUpdate {
	ecdmu.mutation.SetVerifiedDate(t)
	return ecdmu
}

// SetNillableVerifiedDate sets the "VerifiedDate" field if the given value is not nil.
func (ecdmu *ExamCategoryDisabilityMappingUpdate) SetNillableVerifiedDate(t *time.Time) *ExamCategoryDisabilityMappingUpdate {
	if t != nil {
		ecdmu.SetVerifiedDate(*t)
	}
	return ecdmu
}

// ClearVerifiedDate clears the value of the "VerifiedDate" field.
func (ecdmu *ExamCategoryDisabilityMappingUpdate) ClearVerifiedDate() *ExamCategoryDisabilityMappingUpdate {
	ecdmu.mutation.ClearVerifiedDate()
	return ecdmu
}

// SetDeletedById sets the "DeletedById" field.
func (ecdmu *ExamCategoryDisabilityMappingUpdate) SetDeletedById(i int64) *ExamCategoryDisabilityMappingUpdate {
	ecdmu.mutation.ResetDeletedById()
	ecdmu.mutation.SetDeletedById(i)
	return ecdmu
}

// SetNillableDeletedById sets the "DeletedById" field if the given value is not nil.
func (ecdmu *ExamCategoryDisabilityMappingUpdate) SetNillableDeletedById(i *int64) *ExamCategoryDisabilityMappingUpdate {
	if i != nil {
		ecdmu.SetDeletedById(*i)
	}
	return ecdmu
}

// AddDeletedById adds i to the "DeletedById" field.
func (ecdmu *ExamCategoryDisabilityMappingUpdate) AddDeletedById(i int64) *ExamCategoryDisabilityMappingUpdate {
	ecdmu.mutation.AddDeletedById(i)
	return ecdmu
}

// ClearDeletedById clears the value of the "DeletedById" field.
func (ecdmu *ExamCategoryDisabilityMappingUpdate) ClearDeletedById() *ExamCategoryDisabilityMappingUpdate {
	ecdmu.mutation.ClearDeletedById()
	return ecdmu
}

// SetDeletedByUserName sets the "DeletedByUserName" field.
func (ecdmu *ExamCategoryDisabilityMappingUpdate) SetDeletedByUserName(s string) *ExamCategoryDisabilityMappingUpdate {
	ecdmu.mutation.SetDeletedByUserName(s)
	return ecdmu
}

// SetNillableDeletedByUserName sets the "DeletedByUserName" field if the given value is not nil.
func (ecdmu *ExamCategoryDisabilityMappingUpdate) SetNillableDeletedByUserName(s *string) *ExamCategoryDisabilityMappingUpdate {
	if s != nil {
		ecdmu.SetDeletedByUserName(*s)
	}
	return ecdmu
}

// ClearDeletedByUserName clears the value of the "DeletedByUserName" field.
func (ecdmu *ExamCategoryDisabilityMappingUpdate) ClearDeletedByUserName() *ExamCategoryDisabilityMappingUpdate {
	ecdmu.mutation.ClearDeletedByUserName()
	return ecdmu
}

// SetDeletedByEmployeeId sets the "DeletedByEmployeeId" field.
func (ecdmu *ExamCategoryDisabilityMappingUpdate) SetDeletedByEmployeeId(s string) *ExamCategoryDisabilityMappingUpdate {
	ecdmu.mutation.SetDeletedByEmployeeId(s)
	return ecdmu
}

// SetNillableDeletedByEmployeeId sets the "DeletedByEmployeeId" field if the given value is not nil.
func (ecdmu *ExamCategoryDisabilityMappingUpdate) SetNillableDeletedByEmployeeId(s *string) *ExamCategoryDisabilityMappingUpdate {
	if s != nil {
		ecdmu.SetDeletedByEmployeeId(*s)
	}
	return ecdmu
}

// ClearDeletedByEmployeeId clears the value of the "DeletedByEmployeeId" field.
func (ecdmu *ExamCategoryDisabilityMappingUpdate) ClearDeletedByEmployeeId() *ExamCategoryDisabilityMappingUpdate {
	ecdmu.mutation.ClearDeletedByEmployeeId()
	return ecdmu
}

// SetDeletedByDesignation sets the "DeletedByDesignation" field.
func (ecdmu *ExamCategoryDisabilityMappingUpdate) SetDeletedByDesignation(s string) *ExamCategoryDisabilityMappingUpdate {
	ecdmu.mutation.SetDeletedByDesignation(s)
	return ecdmu
}

// SetNillableDeletedByDesignation sets the "DeletedByDesignation" field if the given value is not nil.
func (ecdmu *ExamCategoryDisabilityMappingUpdate) SetNillableDeletedByDesignation(s *string) *ExamCategoryDisabilityMappingUpdate {
	if s != nil {
		ecdmu.SetDeletedByDesignation(*s)
	}
	return ecdmu
}

// ClearDeletedByDesignation clears the value of the "DeletedByDesignation" field.
func (ecdmu *ExamCategoryDisabilityMappingUpdate) ClearDeletedByDesignation() *ExamCategoryDisabilityMappingUpdate {
	ecdmu.mutation.ClearDeletedByDesignation()
	return ecdmu
}

// SetDeletedDate sets the "DeletedDate" field.
func (ecdmu *ExamCategoryDisabilityMappingUpdate) SetDeletedDate(t time.Time) *ExamCategoryDisabilityMappingUpdate {
	ecdmu.mutation.SetDeletedDate(t)
	return ecdmu
}

// SetNillableDeletedDate sets the "DeletedDate" field if the given value is not nil.
func (ecdmu *ExamCategoryDisabilityMappingUpdate) SetNillableDeletedDate(t *time.Time) *ExamCategoryDisabilityMappingUpdate {
	if t != nil {
		ecdmu.SetDeletedDate(*t)
	}
	return ecdmu
}

// ClearDeletedDate clears the value of the "DeletedDate" field.
func (ecdmu *ExamCategoryDisabilityMappingUpdate) ClearDeletedDate() *ExamCategoryDisabilityMappingUpdate {
	ecdmu.mutation.ClearDeletedDate()
	return ecdmu
}

// Mutation returns the ExamCategoryDisabilityMappingMutation object of the builder.
func (ecdmu *ExamCategoryDisabilityMappingUpdate) Mutation() *ExamCategoryDisabilityMappingMutation {
	return ecdmu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ecdmu *ExamCategoryDisabilityMappingUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ecdmu.sqlSave, ecdmu.mutation, ecdmu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ecdmu *ExamCategoryDisabilityMappingUpdate) SaveX(ctx context.Context) int {
	affected, err := ecdmu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ecdmu *ExamCategoryDisabilityMappingUpdate) Exec(ctx context.Context) error {
	_, err := ecdmu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ecdmu *ExamCategoryDisabilityMappingUpdate) ExecX(ctx context.Context) {
	if err := ecdmu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ecdmu *ExamCategoryDisabilityMappingUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(examcategorydisabilitymapping.Table, examcategorydisabilitymapping.Columns, sqlgraph.NewFieldSpec(examcategorydisabilitymapping.FieldID, field.TypeInt32))
	if ps := ecdmu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ecdmu.mutation.ExamCode(); ok {
		_spec.SetField(examcategorydisabilitymapping.FieldExamCode, field.TypeInt64, value)
	}
	if value, ok := ecdmu.mutation.AddedExamCode(); ok {
		_spec.AddField(examcategorydisabilitymapping.FieldExamCode, field.TypeInt64, value)
	}
	if ecdmu.mutation.ExamCodeCleared() {
		_spec.ClearField(examcategorydisabilitymapping.FieldExamCode, field.TypeInt64)
	}
	if value, ok := ecdmu.mutation.ExamShortName(); ok {
		_spec.SetField(examcategorydisabilitymapping.FieldExamShortName, field.TypeString, value)
	}
	if ecdmu.mutation.ExamShortNameCleared() {
		_spec.ClearField(examcategorydisabilitymapping.FieldExamShortName, field.TypeString)
	}
	if value, ok := ecdmu.mutation.CategoryDisability(); ok {
		_spec.SetField(examcategorydisabilitymapping.FieldCategoryDisability, field.TypeString, value)
	}
	if ecdmu.mutation.CategoryDisabilityCleared() {
		_spec.ClearField(examcategorydisabilitymapping.FieldCategoryDisability, field.TypeString)
	}
	if value, ok := ecdmu.mutation.CategoryDisabilityCode(); ok {
		_spec.SetField(examcategorydisabilitymapping.FieldCategoryDisabilityCode, field.TypeString, value)
	}
	if ecdmu.mutation.CategoryDisabilityCodeCleared() {
		_spec.ClearField(examcategorydisabilitymapping.FieldCategoryDisabilityCode, field.TypeString)
	}
	if value, ok := ecdmu.mutation.CategoryDisabilityDescription(); ok {
		_spec.SetField(examcategorydisabilitymapping.FieldCategoryDisabilityDescription, field.TypeString, value)
	}
	if ecdmu.mutation.CategoryDisabilityDescriptionCleared() {
		_spec.ClearField(examcategorydisabilitymapping.FieldCategoryDisabilityDescription, field.TypeString)
	}
	if value, ok := ecdmu.mutation.AgeException(); ok {
		_spec.SetField(examcategorydisabilitymapping.FieldAgeException, field.TypeInt32, value)
	}
	if value, ok := ecdmu.mutation.AddedAgeException(); ok {
		_spec.AddField(examcategorydisabilitymapping.FieldAgeException, field.TypeInt32, value)
	}
	if ecdmu.mutation.AgeExceptionCleared() {
		_spec.ClearField(examcategorydisabilitymapping.FieldAgeException, field.TypeInt32)
	}
	if value, ok := ecdmu.mutation.ServiceException(); ok {
		_spec.SetField(examcategorydisabilitymapping.FieldServiceException, field.TypeInt32, value)
	}
	if value, ok := ecdmu.mutation.AddedServiceException(); ok {
		_spec.AddField(examcategorydisabilitymapping.FieldServiceException, field.TypeInt32, value)
	}
	if ecdmu.mutation.ServiceExceptionCleared() {
		_spec.ClearField(examcategorydisabilitymapping.FieldServiceException, field.TypeInt32)
	}
	if value, ok := ecdmu.mutation.DrivingLicense(); ok {
		_spec.SetField(examcategorydisabilitymapping.FieldDrivingLicense, field.TypeBool, value)
	}
	if ecdmu.mutation.DrivingLicenseCleared() {
		_spec.ClearField(examcategorydisabilitymapping.FieldDrivingLicense, field.TypeBool)
	}
	if value, ok := ecdmu.mutation.OrderNumber(); ok {
		_spec.SetField(examcategorydisabilitymapping.FieldOrderNumber, field.TypeString, value)
	}
	if ecdmu.mutation.OrderNumberCleared() {
		_spec.ClearField(examcategorydisabilitymapping.FieldOrderNumber, field.TypeString)
	}
	if value, ok := ecdmu.mutation.Status(); ok {
		_spec.SetField(examcategorydisabilitymapping.FieldStatus, field.TypeString, value)
	}
	if ecdmu.mutation.StatusCleared() {
		_spec.ClearField(examcategorydisabilitymapping.FieldStatus, field.TypeString)
	}
	if value, ok := ecdmu.mutation.CreatedById(); ok {
		_spec.SetField(examcategorydisabilitymapping.FieldCreatedById, field.TypeInt32, value)
	}
	if value, ok := ecdmu.mutation.AddedCreatedById(); ok {
		_spec.AddField(examcategorydisabilitymapping.FieldCreatedById, field.TypeInt32, value)
	}
	if ecdmu.mutation.CreatedByIdCleared() {
		_spec.ClearField(examcategorydisabilitymapping.FieldCreatedById, field.TypeInt32)
	}
	if value, ok := ecdmu.mutation.CreatedByUserName(); ok {
		_spec.SetField(examcategorydisabilitymapping.FieldCreatedByUserName, field.TypeString, value)
	}
	if ecdmu.mutation.CreatedByUserNameCleared() {
		_spec.ClearField(examcategorydisabilitymapping.FieldCreatedByUserName, field.TypeString)
	}
	if value, ok := ecdmu.mutation.CreatedByEmployeeId(); ok {
		_spec.SetField(examcategorydisabilitymapping.FieldCreatedByEmployeeId, field.TypeString, value)
	}
	if ecdmu.mutation.CreatedByEmployeeIdCleared() {
		_spec.ClearField(examcategorydisabilitymapping.FieldCreatedByEmployeeId, field.TypeString)
	}
	if value, ok := ecdmu.mutation.CreatedByDesignation(); ok {
		_spec.SetField(examcategorydisabilitymapping.FieldCreatedByDesignation, field.TypeString, value)
	}
	if ecdmu.mutation.CreatedByDesignationCleared() {
		_spec.ClearField(examcategorydisabilitymapping.FieldCreatedByDesignation, field.TypeString)
	}
	if value, ok := ecdmu.mutation.CreatedDate(); ok {
		_spec.SetField(examcategorydisabilitymapping.FieldCreatedDate, field.TypeTime, value)
	}
	if ecdmu.mutation.CreatedDateCleared() {
		_spec.ClearField(examcategorydisabilitymapping.FieldCreatedDate, field.TypeTime)
	}
	if value, ok := ecdmu.mutation.VerifiedById(); ok {
		_spec.SetField(examcategorydisabilitymapping.FieldVerifiedById, field.TypeInt64, value)
	}
	if value, ok := ecdmu.mutation.AddedVerifiedById(); ok {
		_spec.AddField(examcategorydisabilitymapping.FieldVerifiedById, field.TypeInt64, value)
	}
	if ecdmu.mutation.VerifiedByIdCleared() {
		_spec.ClearField(examcategorydisabilitymapping.FieldVerifiedById, field.TypeInt64)
	}
	if value, ok := ecdmu.mutation.VerifiedByUserName(); ok {
		_spec.SetField(examcategorydisabilitymapping.FieldVerifiedByUserName, field.TypeString, value)
	}
	if ecdmu.mutation.VerifiedByUserNameCleared() {
		_spec.ClearField(examcategorydisabilitymapping.FieldVerifiedByUserName, field.TypeString)
	}
	if value, ok := ecdmu.mutation.VerifiedByEmployeeId(); ok {
		_spec.SetField(examcategorydisabilitymapping.FieldVerifiedByEmployeeId, field.TypeString, value)
	}
	if ecdmu.mutation.VerifiedByEmployeeIdCleared() {
		_spec.ClearField(examcategorydisabilitymapping.FieldVerifiedByEmployeeId, field.TypeString)
	}
	if value, ok := ecdmu.mutation.VerifiedByDesignation(); ok {
		_spec.SetField(examcategorydisabilitymapping.FieldVerifiedByDesignation, field.TypeString, value)
	}
	if ecdmu.mutation.VerifiedByDesignationCleared() {
		_spec.ClearField(examcategorydisabilitymapping.FieldVerifiedByDesignation, field.TypeString)
	}
	if value, ok := ecdmu.mutation.VerifiedDate(); ok {
		_spec.SetField(examcategorydisabilitymapping.FieldVerifiedDate, field.TypeTime, value)
	}
	if ecdmu.mutation.VerifiedDateCleared() {
		_spec.ClearField(examcategorydisabilitymapping.FieldVerifiedDate, field.TypeTime)
	}
	if value, ok := ecdmu.mutation.DeletedById(); ok {
		_spec.SetField(examcategorydisabilitymapping.FieldDeletedById, field.TypeInt64, value)
	}
	if value, ok := ecdmu.mutation.AddedDeletedById(); ok {
		_spec.AddField(examcategorydisabilitymapping.FieldDeletedById, field.TypeInt64, value)
	}
	if ecdmu.mutation.DeletedByIdCleared() {
		_spec.ClearField(examcategorydisabilitymapping.FieldDeletedById, field.TypeInt64)
	}
	if value, ok := ecdmu.mutation.DeletedByUserName(); ok {
		_spec.SetField(examcategorydisabilitymapping.FieldDeletedByUserName, field.TypeString, value)
	}
	if ecdmu.mutation.DeletedByUserNameCleared() {
		_spec.ClearField(examcategorydisabilitymapping.FieldDeletedByUserName, field.TypeString)
	}
	if value, ok := ecdmu.mutation.DeletedByEmployeeId(); ok {
		_spec.SetField(examcategorydisabilitymapping.FieldDeletedByEmployeeId, field.TypeString, value)
	}
	if ecdmu.mutation.DeletedByEmployeeIdCleared() {
		_spec.ClearField(examcategorydisabilitymapping.FieldDeletedByEmployeeId, field.TypeString)
	}
	if value, ok := ecdmu.mutation.DeletedByDesignation(); ok {
		_spec.SetField(examcategorydisabilitymapping.FieldDeletedByDesignation, field.TypeString, value)
	}
	if ecdmu.mutation.DeletedByDesignationCleared() {
		_spec.ClearField(examcategorydisabilitymapping.FieldDeletedByDesignation, field.TypeString)
	}
	if value, ok := ecdmu.mutation.DeletedDate(); ok {
		_spec.SetField(examcategorydisabilitymapping.FieldDeletedDate, field.TypeTime, value)
	}
	if ecdmu.mutation.DeletedDateCleared() {
		_spec.ClearField(examcategorydisabilitymapping.FieldDeletedDate, field.TypeTime)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ecdmu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{examcategorydisabilitymapping.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ecdmu.mutation.done = true
	return n, nil
}

// ExamCategoryDisabilityMappingUpdateOne is the builder for updating a single ExamCategoryDisabilityMapping entity.
type ExamCategoryDisabilityMappingUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ExamCategoryDisabilityMappingMutation
}

// SetExamCode sets the "ExamCode" field.
func (ecdmuo *ExamCategoryDisabilityMappingUpdateOne) SetExamCode(i int64) *ExamCategoryDisabilityMappingUpdateOne {
	ecdmuo.mutation.ResetExamCode()
	ecdmuo.mutation.SetExamCode(i)
	return ecdmuo
}

// SetNillableExamCode sets the "ExamCode" field if the given value is not nil.
func (ecdmuo *ExamCategoryDisabilityMappingUpdateOne) SetNillableExamCode(i *int64) *ExamCategoryDisabilityMappingUpdateOne {
	if i != nil {
		ecdmuo.SetExamCode(*i)
	}
	return ecdmuo
}

// AddExamCode adds i to the "ExamCode" field.
func (ecdmuo *ExamCategoryDisabilityMappingUpdateOne) AddExamCode(i int64) *ExamCategoryDisabilityMappingUpdateOne {
	ecdmuo.mutation.AddExamCode(i)
	return ecdmuo
}

// ClearExamCode clears the value of the "ExamCode" field.
func (ecdmuo *ExamCategoryDisabilityMappingUpdateOne) ClearExamCode() *ExamCategoryDisabilityMappingUpdateOne {
	ecdmuo.mutation.ClearExamCode()
	return ecdmuo
}

// SetExamShortName sets the "ExamShortName" field.
func (ecdmuo *ExamCategoryDisabilityMappingUpdateOne) SetExamShortName(s string) *ExamCategoryDisabilityMappingUpdateOne {
	ecdmuo.mutation.SetExamShortName(s)
	return ecdmuo
}

// SetNillableExamShortName sets the "ExamShortName" field if the given value is not nil.
func (ecdmuo *ExamCategoryDisabilityMappingUpdateOne) SetNillableExamShortName(s *string) *ExamCategoryDisabilityMappingUpdateOne {
	if s != nil {
		ecdmuo.SetExamShortName(*s)
	}
	return ecdmuo
}

// ClearExamShortName clears the value of the "ExamShortName" field.
func (ecdmuo *ExamCategoryDisabilityMappingUpdateOne) ClearExamShortName() *ExamCategoryDisabilityMappingUpdateOne {
	ecdmuo.mutation.ClearExamShortName()
	return ecdmuo
}

// SetCategoryDisability sets the "CategoryDisability" field.
func (ecdmuo *ExamCategoryDisabilityMappingUpdateOne) SetCategoryDisability(s string) *ExamCategoryDisabilityMappingUpdateOne {
	ecdmuo.mutation.SetCategoryDisability(s)
	return ecdmuo
}

// SetNillableCategoryDisability sets the "CategoryDisability" field if the given value is not nil.
func (ecdmuo *ExamCategoryDisabilityMappingUpdateOne) SetNillableCategoryDisability(s *string) *ExamCategoryDisabilityMappingUpdateOne {
	if s != nil {
		ecdmuo.SetCategoryDisability(*s)
	}
	return ecdmuo
}

// ClearCategoryDisability clears the value of the "CategoryDisability" field.
func (ecdmuo *ExamCategoryDisabilityMappingUpdateOne) ClearCategoryDisability() *ExamCategoryDisabilityMappingUpdateOne {
	ecdmuo.mutation.ClearCategoryDisability()
	return ecdmuo
}

// SetCategoryDisabilityCode sets the "CategoryDisabilityCode" field.
func (ecdmuo *ExamCategoryDisabilityMappingUpdateOne) SetCategoryDisabilityCode(s string) *ExamCategoryDisabilityMappingUpdateOne {
	ecdmuo.mutation.SetCategoryDisabilityCode(s)
	return ecdmuo
}

// SetNillableCategoryDisabilityCode sets the "CategoryDisabilityCode" field if the given value is not nil.
func (ecdmuo *ExamCategoryDisabilityMappingUpdateOne) SetNillableCategoryDisabilityCode(s *string) *ExamCategoryDisabilityMappingUpdateOne {
	if s != nil {
		ecdmuo.SetCategoryDisabilityCode(*s)
	}
	return ecdmuo
}

// ClearCategoryDisabilityCode clears the value of the "CategoryDisabilityCode" field.
func (ecdmuo *ExamCategoryDisabilityMappingUpdateOne) ClearCategoryDisabilityCode() *ExamCategoryDisabilityMappingUpdateOne {
	ecdmuo.mutation.ClearCategoryDisabilityCode()
	return ecdmuo
}

// SetCategoryDisabilityDescription sets the "CategoryDisabilityDescription" field.
func (ecdmuo *ExamCategoryDisabilityMappingUpdateOne) SetCategoryDisabilityDescription(s string) *ExamCategoryDisabilityMappingUpdateOne {
	ecdmuo.mutation.SetCategoryDisabilityDescription(s)
	return ecdmuo
}

// SetNillableCategoryDisabilityDescription sets the "CategoryDisabilityDescription" field if the given value is not nil.
func (ecdmuo *ExamCategoryDisabilityMappingUpdateOne) SetNillableCategoryDisabilityDescription(s *string) *ExamCategoryDisabilityMappingUpdateOne {
	if s != nil {
		ecdmuo.SetCategoryDisabilityDescription(*s)
	}
	return ecdmuo
}

// ClearCategoryDisabilityDescription clears the value of the "CategoryDisabilityDescription" field.
func (ecdmuo *ExamCategoryDisabilityMappingUpdateOne) ClearCategoryDisabilityDescription() *ExamCategoryDisabilityMappingUpdateOne {
	ecdmuo.mutation.ClearCategoryDisabilityDescription()
	return ecdmuo
}

// SetAgeException sets the "AgeException" field.
func (ecdmuo *ExamCategoryDisabilityMappingUpdateOne) SetAgeException(i int32) *ExamCategoryDisabilityMappingUpdateOne {
	ecdmuo.mutation.ResetAgeException()
	ecdmuo.mutation.SetAgeException(i)
	return ecdmuo
}

// SetNillableAgeException sets the "AgeException" field if the given value is not nil.
func (ecdmuo *ExamCategoryDisabilityMappingUpdateOne) SetNillableAgeException(i *int32) *ExamCategoryDisabilityMappingUpdateOne {
	if i != nil {
		ecdmuo.SetAgeException(*i)
	}
	return ecdmuo
}

// AddAgeException adds i to the "AgeException" field.
func (ecdmuo *ExamCategoryDisabilityMappingUpdateOne) AddAgeException(i int32) *ExamCategoryDisabilityMappingUpdateOne {
	ecdmuo.mutation.AddAgeException(i)
	return ecdmuo
}

// ClearAgeException clears the value of the "AgeException" field.
func (ecdmuo *ExamCategoryDisabilityMappingUpdateOne) ClearAgeException() *ExamCategoryDisabilityMappingUpdateOne {
	ecdmuo.mutation.ClearAgeException()
	return ecdmuo
}

// SetServiceException sets the "ServiceException" field.
func (ecdmuo *ExamCategoryDisabilityMappingUpdateOne) SetServiceException(i int32) *ExamCategoryDisabilityMappingUpdateOne {
	ecdmuo.mutation.ResetServiceException()
	ecdmuo.mutation.SetServiceException(i)
	return ecdmuo
}

// SetNillableServiceException sets the "ServiceException" field if the given value is not nil.
func (ecdmuo *ExamCategoryDisabilityMappingUpdateOne) SetNillableServiceException(i *int32) *ExamCategoryDisabilityMappingUpdateOne {
	if i != nil {
		ecdmuo.SetServiceException(*i)
	}
	return ecdmuo
}

// AddServiceException adds i to the "ServiceException" field.
func (ecdmuo *ExamCategoryDisabilityMappingUpdateOne) AddServiceException(i int32) *ExamCategoryDisabilityMappingUpdateOne {
	ecdmuo.mutation.AddServiceException(i)
	return ecdmuo
}

// ClearServiceException clears the value of the "ServiceException" field.
func (ecdmuo *ExamCategoryDisabilityMappingUpdateOne) ClearServiceException() *ExamCategoryDisabilityMappingUpdateOne {
	ecdmuo.mutation.ClearServiceException()
	return ecdmuo
}

// SetDrivingLicense sets the "DrivingLicense" field.
func (ecdmuo *ExamCategoryDisabilityMappingUpdateOne) SetDrivingLicense(b bool) *ExamCategoryDisabilityMappingUpdateOne {
	ecdmuo.mutation.SetDrivingLicense(b)
	return ecdmuo
}

// SetNillableDrivingLicense sets the "DrivingLicense" field if the given value is not nil.
func (ecdmuo *ExamCategoryDisabilityMappingUpdateOne) SetNillableDrivingLicense(b *bool) *ExamCategoryDisabilityMappingUpdateOne {
	if b != nil {
		ecdmuo.SetDrivingLicense(*b)
	}
	return ecdmuo
}

// ClearDrivingLicense clears the value of the "DrivingLicense" field.
func (ecdmuo *ExamCategoryDisabilityMappingUpdateOne) ClearDrivingLicense() *ExamCategoryDisabilityMappingUpdateOne {
	ecdmuo.mutation.ClearDrivingLicense()
	return ecdmuo
}

// SetOrderNumber sets the "OrderNumber" field.
func (ecdmuo *ExamCategoryDisabilityMappingUpdateOne) SetOrderNumber(s string) *ExamCategoryDisabilityMappingUpdateOne {
	ecdmuo.mutation.SetOrderNumber(s)
	return ecdmuo
}

// SetNillableOrderNumber sets the "OrderNumber" field if the given value is not nil.
func (ecdmuo *ExamCategoryDisabilityMappingUpdateOne) SetNillableOrderNumber(s *string) *ExamCategoryDisabilityMappingUpdateOne {
	if s != nil {
		ecdmuo.SetOrderNumber(*s)
	}
	return ecdmuo
}

// ClearOrderNumber clears the value of the "OrderNumber" field.
func (ecdmuo *ExamCategoryDisabilityMappingUpdateOne) ClearOrderNumber() *ExamCategoryDisabilityMappingUpdateOne {
	ecdmuo.mutation.ClearOrderNumber()
	return ecdmuo
}

// SetStatus sets the "Status" field.
func (ecdmuo *ExamCategoryDisabilityMappingUpdateOne) SetStatus(s string) *ExamCategoryDisabilityMappingUpdateOne {
	ecdmuo.mutation.SetStatus(s)
	return ecdmuo
}

// SetNillableStatus sets the "Status" field if the given value is not nil.
func (ecdmuo *ExamCategoryDisabilityMappingUpdateOne) SetNillableStatus(s *string) *ExamCategoryDisabilityMappingUpdateOne {
	if s != nil {
		ecdmuo.SetStatus(*s)
	}
	return ecdmuo
}

// ClearStatus clears the value of the "Status" field.
func (ecdmuo *ExamCategoryDisabilityMappingUpdateOne) ClearStatus() *ExamCategoryDisabilityMappingUpdateOne {
	ecdmuo.mutation.ClearStatus()
	return ecdmuo
}

// SetCreatedById sets the "CreatedById" field.
func (ecdmuo *ExamCategoryDisabilityMappingUpdateOne) SetCreatedById(i int32) *ExamCategoryDisabilityMappingUpdateOne {
	ecdmuo.mutation.ResetCreatedById()
	ecdmuo.mutation.SetCreatedById(i)
	return ecdmuo
}

// SetNillableCreatedById sets the "CreatedById" field if the given value is not nil.
func (ecdmuo *ExamCategoryDisabilityMappingUpdateOne) SetNillableCreatedById(i *int32) *ExamCategoryDisabilityMappingUpdateOne {
	if i != nil {
		ecdmuo.SetCreatedById(*i)
	}
	return ecdmuo
}

// AddCreatedById adds i to the "CreatedById" field.
func (ecdmuo *ExamCategoryDisabilityMappingUpdateOne) AddCreatedById(i int32) *ExamCategoryDisabilityMappingUpdateOne {
	ecdmuo.mutation.AddCreatedById(i)
	return ecdmuo
}

// ClearCreatedById clears the value of the "CreatedById" field.
func (ecdmuo *ExamCategoryDisabilityMappingUpdateOne) ClearCreatedById() *ExamCategoryDisabilityMappingUpdateOne {
	ecdmuo.mutation.ClearCreatedById()
	return ecdmuo
}

// SetCreatedByUserName sets the "CreatedByUserName" field.
func (ecdmuo *ExamCategoryDisabilityMappingUpdateOne) SetCreatedByUserName(s string) *ExamCategoryDisabilityMappingUpdateOne {
	ecdmuo.mutation.SetCreatedByUserName(s)
	return ecdmuo
}

// SetNillableCreatedByUserName sets the "CreatedByUserName" field if the given value is not nil.
func (ecdmuo *ExamCategoryDisabilityMappingUpdateOne) SetNillableCreatedByUserName(s *string) *ExamCategoryDisabilityMappingUpdateOne {
	if s != nil {
		ecdmuo.SetCreatedByUserName(*s)
	}
	return ecdmuo
}

// ClearCreatedByUserName clears the value of the "CreatedByUserName" field.
func (ecdmuo *ExamCategoryDisabilityMappingUpdateOne) ClearCreatedByUserName() *ExamCategoryDisabilityMappingUpdateOne {
	ecdmuo.mutation.ClearCreatedByUserName()
	return ecdmuo
}

// SetCreatedByEmployeeId sets the "CreatedByEmployeeId" field.
func (ecdmuo *ExamCategoryDisabilityMappingUpdateOne) SetCreatedByEmployeeId(s string) *ExamCategoryDisabilityMappingUpdateOne {
	ecdmuo.mutation.SetCreatedByEmployeeId(s)
	return ecdmuo
}

// SetNillableCreatedByEmployeeId sets the "CreatedByEmployeeId" field if the given value is not nil.
func (ecdmuo *ExamCategoryDisabilityMappingUpdateOne) SetNillableCreatedByEmployeeId(s *string) *ExamCategoryDisabilityMappingUpdateOne {
	if s != nil {
		ecdmuo.SetCreatedByEmployeeId(*s)
	}
	return ecdmuo
}

// ClearCreatedByEmployeeId clears the value of the "CreatedByEmployeeId" field.
func (ecdmuo *ExamCategoryDisabilityMappingUpdateOne) ClearCreatedByEmployeeId() *ExamCategoryDisabilityMappingUpdateOne {
	ecdmuo.mutation.ClearCreatedByEmployeeId()
	return ecdmuo
}

// SetCreatedByDesignation sets the "CreatedByDesignation" field.
func (ecdmuo *ExamCategoryDisabilityMappingUpdateOne) SetCreatedByDesignation(s string) *ExamCategoryDisabilityMappingUpdateOne {
	ecdmuo.mutation.SetCreatedByDesignation(s)
	return ecdmuo
}

// SetNillableCreatedByDesignation sets the "CreatedByDesignation" field if the given value is not nil.
func (ecdmuo *ExamCategoryDisabilityMappingUpdateOne) SetNillableCreatedByDesignation(s *string) *ExamCategoryDisabilityMappingUpdateOne {
	if s != nil {
		ecdmuo.SetCreatedByDesignation(*s)
	}
	return ecdmuo
}

// ClearCreatedByDesignation clears the value of the "CreatedByDesignation" field.
func (ecdmuo *ExamCategoryDisabilityMappingUpdateOne) ClearCreatedByDesignation() *ExamCategoryDisabilityMappingUpdateOne {
	ecdmuo.mutation.ClearCreatedByDesignation()
	return ecdmuo
}

// SetCreatedDate sets the "CreatedDate" field.
func (ecdmuo *ExamCategoryDisabilityMappingUpdateOne) SetCreatedDate(t time.Time) *ExamCategoryDisabilityMappingUpdateOne {
	ecdmuo.mutation.SetCreatedDate(t)
	return ecdmuo
}

// SetNillableCreatedDate sets the "CreatedDate" field if the given value is not nil.
func (ecdmuo *ExamCategoryDisabilityMappingUpdateOne) SetNillableCreatedDate(t *time.Time) *ExamCategoryDisabilityMappingUpdateOne {
	if t != nil {
		ecdmuo.SetCreatedDate(*t)
	}
	return ecdmuo
}

// ClearCreatedDate clears the value of the "CreatedDate" field.
func (ecdmuo *ExamCategoryDisabilityMappingUpdateOne) ClearCreatedDate() *ExamCategoryDisabilityMappingUpdateOne {
	ecdmuo.mutation.ClearCreatedDate()
	return ecdmuo
}

// SetVerifiedById sets the "VerifiedById" field.
func (ecdmuo *ExamCategoryDisabilityMappingUpdateOne) SetVerifiedById(i int64) *ExamCategoryDisabilityMappingUpdateOne {
	ecdmuo.mutation.ResetVerifiedById()
	ecdmuo.mutation.SetVerifiedById(i)
	return ecdmuo
}

// SetNillableVerifiedById sets the "VerifiedById" field if the given value is not nil.
func (ecdmuo *ExamCategoryDisabilityMappingUpdateOne) SetNillableVerifiedById(i *int64) *ExamCategoryDisabilityMappingUpdateOne {
	if i != nil {
		ecdmuo.SetVerifiedById(*i)
	}
	return ecdmuo
}

// AddVerifiedById adds i to the "VerifiedById" field.
func (ecdmuo *ExamCategoryDisabilityMappingUpdateOne) AddVerifiedById(i int64) *ExamCategoryDisabilityMappingUpdateOne {
	ecdmuo.mutation.AddVerifiedById(i)
	return ecdmuo
}

// ClearVerifiedById clears the value of the "VerifiedById" field.
func (ecdmuo *ExamCategoryDisabilityMappingUpdateOne) ClearVerifiedById() *ExamCategoryDisabilityMappingUpdateOne {
	ecdmuo.mutation.ClearVerifiedById()
	return ecdmuo
}

// SetVerifiedByUserName sets the "VerifiedByUserName" field.
func (ecdmuo *ExamCategoryDisabilityMappingUpdateOne) SetVerifiedByUserName(s string) *ExamCategoryDisabilityMappingUpdateOne {
	ecdmuo.mutation.SetVerifiedByUserName(s)
	return ecdmuo
}

// SetNillableVerifiedByUserName sets the "VerifiedByUserName" field if the given value is not nil.
func (ecdmuo *ExamCategoryDisabilityMappingUpdateOne) SetNillableVerifiedByUserName(s *string) *ExamCategoryDisabilityMappingUpdateOne {
	if s != nil {
		ecdmuo.SetVerifiedByUserName(*s)
	}
	return ecdmuo
}

// ClearVerifiedByUserName clears the value of the "VerifiedByUserName" field.
func (ecdmuo *ExamCategoryDisabilityMappingUpdateOne) ClearVerifiedByUserName() *ExamCategoryDisabilityMappingUpdateOne {
	ecdmuo.mutation.ClearVerifiedByUserName()
	return ecdmuo
}

// SetVerifiedByEmployeeId sets the "VerifiedByEmployeeId" field.
func (ecdmuo *ExamCategoryDisabilityMappingUpdateOne) SetVerifiedByEmployeeId(s string) *ExamCategoryDisabilityMappingUpdateOne {
	ecdmuo.mutation.SetVerifiedByEmployeeId(s)
	return ecdmuo
}

// SetNillableVerifiedByEmployeeId sets the "VerifiedByEmployeeId" field if the given value is not nil.
func (ecdmuo *ExamCategoryDisabilityMappingUpdateOne) SetNillableVerifiedByEmployeeId(s *string) *ExamCategoryDisabilityMappingUpdateOne {
	if s != nil {
		ecdmuo.SetVerifiedByEmployeeId(*s)
	}
	return ecdmuo
}

// ClearVerifiedByEmployeeId clears the value of the "VerifiedByEmployeeId" field.
func (ecdmuo *ExamCategoryDisabilityMappingUpdateOne) ClearVerifiedByEmployeeId() *ExamCategoryDisabilityMappingUpdateOne {
	ecdmuo.mutation.ClearVerifiedByEmployeeId()
	return ecdmuo
}

// SetVerifiedByDesignation sets the "VerifiedByDesignation" field.
func (ecdmuo *ExamCategoryDisabilityMappingUpdateOne) SetVerifiedByDesignation(s string) *ExamCategoryDisabilityMappingUpdateOne {
	ecdmuo.mutation.SetVerifiedByDesignation(s)
	return ecdmuo
}

// SetNillableVerifiedByDesignation sets the "VerifiedByDesignation" field if the given value is not nil.
func (ecdmuo *ExamCategoryDisabilityMappingUpdateOne) SetNillableVerifiedByDesignation(s *string) *ExamCategoryDisabilityMappingUpdateOne {
	if s != nil {
		ecdmuo.SetVerifiedByDesignation(*s)
	}
	return ecdmuo
}

// ClearVerifiedByDesignation clears the value of the "VerifiedByDesignation" field.
func (ecdmuo *ExamCategoryDisabilityMappingUpdateOne) ClearVerifiedByDesignation() *ExamCategoryDisabilityMappingUpdateOne {
	ecdmuo.mutation.ClearVerifiedByDesignation()
	return ecdmuo
}

// SetVerifiedDate sets the "VerifiedDate" field.
func (ecdmuo *ExamCategoryDisabilityMappingUpdateOne) SetVerifiedDate(t time.Time) *ExamCategoryDisabilityMappingUpdateOne {
	ecdmuo.mutation.SetVerifiedDate(t)
	return ecdmuo
}

// SetNillableVerifiedDate sets the "VerifiedDate" field if the given value is not nil.
func (ecdmuo *ExamCategoryDisabilityMappingUpdateOne) SetNillableVerifiedDate(t *time.Time) *ExamCategoryDisabilityMappingUpdateOne {
	if t != nil {
		ecdmuo.SetVerifiedDate(*t)
	}
	return ecdmuo
}

// ClearVerifiedDate clears the value of the "VerifiedDate" field.
func (ecdmuo *ExamCategoryDisabilityMappingUpdateOne) ClearVerifiedDate() *ExamCategoryDisabilityMappingUpdateOne {
	ecdmuo.mutation.ClearVerifiedDate()
	return ecdmuo
}

// SetDeletedById sets the "DeletedById" field.
func (ecdmuo *ExamCategoryDisabilityMappingUpdateOne) SetDeletedById(i int64) *ExamCategoryDisabilityMappingUpdateOne {
	ecdmuo.mutation.ResetDeletedById()
	ecdmuo.mutation.SetDeletedById(i)
	return ecdmuo
}

// SetNillableDeletedById sets the "DeletedById" field if the given value is not nil.
func (ecdmuo *ExamCategoryDisabilityMappingUpdateOne) SetNillableDeletedById(i *int64) *ExamCategoryDisabilityMappingUpdateOne {
	if i != nil {
		ecdmuo.SetDeletedById(*i)
	}
	return ecdmuo
}

// AddDeletedById adds i to the "DeletedById" field.
func (ecdmuo *ExamCategoryDisabilityMappingUpdateOne) AddDeletedById(i int64) *ExamCategoryDisabilityMappingUpdateOne {
	ecdmuo.mutation.AddDeletedById(i)
	return ecdmuo
}

// ClearDeletedById clears the value of the "DeletedById" field.
func (ecdmuo *ExamCategoryDisabilityMappingUpdateOne) ClearDeletedById() *ExamCategoryDisabilityMappingUpdateOne {
	ecdmuo.mutation.ClearDeletedById()
	return ecdmuo
}

// SetDeletedByUserName sets the "DeletedByUserName" field.
func (ecdmuo *ExamCategoryDisabilityMappingUpdateOne) SetDeletedByUserName(s string) *ExamCategoryDisabilityMappingUpdateOne {
	ecdmuo.mutation.SetDeletedByUserName(s)
	return ecdmuo
}

// SetNillableDeletedByUserName sets the "DeletedByUserName" field if the given value is not nil.
func (ecdmuo *ExamCategoryDisabilityMappingUpdateOne) SetNillableDeletedByUserName(s *string) *ExamCategoryDisabilityMappingUpdateOne {
	if s != nil {
		ecdmuo.SetDeletedByUserName(*s)
	}
	return ecdmuo
}

// ClearDeletedByUserName clears the value of the "DeletedByUserName" field.
func (ecdmuo *ExamCategoryDisabilityMappingUpdateOne) ClearDeletedByUserName() *ExamCategoryDisabilityMappingUpdateOne {
	ecdmuo.mutation.ClearDeletedByUserName()
	return ecdmuo
}

// SetDeletedByEmployeeId sets the "DeletedByEmployeeId" field.
func (ecdmuo *ExamCategoryDisabilityMappingUpdateOne) SetDeletedByEmployeeId(s string) *ExamCategoryDisabilityMappingUpdateOne {
	ecdmuo.mutation.SetDeletedByEmployeeId(s)
	return ecdmuo
}

// SetNillableDeletedByEmployeeId sets the "DeletedByEmployeeId" field if the given value is not nil.
func (ecdmuo *ExamCategoryDisabilityMappingUpdateOne) SetNillableDeletedByEmployeeId(s *string) *ExamCategoryDisabilityMappingUpdateOne {
	if s != nil {
		ecdmuo.SetDeletedByEmployeeId(*s)
	}
	return ecdmuo
}

// ClearDeletedByEmployeeId clears the value of the "DeletedByEmployeeId" field.
func (ecdmuo *ExamCategoryDisabilityMappingUpdateOne) ClearDeletedByEmployeeId() *ExamCategoryDisabilityMappingUpdateOne {
	ecdmuo.mutation.ClearDeletedByEmployeeId()
	return ecdmuo
}

// SetDeletedByDesignation sets the "DeletedByDesignation" field.
func (ecdmuo *ExamCategoryDisabilityMappingUpdateOne) SetDeletedByDesignation(s string) *ExamCategoryDisabilityMappingUpdateOne {
	ecdmuo.mutation.SetDeletedByDesignation(s)
	return ecdmuo
}

// SetNillableDeletedByDesignation sets the "DeletedByDesignation" field if the given value is not nil.
func (ecdmuo *ExamCategoryDisabilityMappingUpdateOne) SetNillableDeletedByDesignation(s *string) *ExamCategoryDisabilityMappingUpdateOne {
	if s != nil {
		ecdmuo.SetDeletedByDesignation(*s)
	}
	return ecdmuo
}

// ClearDeletedByDesignation clears the value of the "DeletedByDesignation" field.
func (ecdmuo *ExamCategoryDisabilityMappingUpdateOne) ClearDeletedByDesignation() *ExamCategoryDisabilityMappingUpdateOne {
	ecdmuo.mutation.ClearDeletedByDesignation()
	return ecdmuo
}

// SetDeletedDate sets the "DeletedDate" field.
func (ecdmuo *ExamCategoryDisabilityMappingUpdateOne) SetDeletedDate(t time.Time) *ExamCategoryDisabilityMappingUpdateOne {
	ecdmuo.mutation.SetDeletedDate(t)
	return ecdmuo
}

// SetNillableDeletedDate sets the "DeletedDate" field if the given value is not nil.
func (ecdmuo *ExamCategoryDisabilityMappingUpdateOne) SetNillableDeletedDate(t *time.Time) *ExamCategoryDisabilityMappingUpdateOne {
	if t != nil {
		ecdmuo.SetDeletedDate(*t)
	}
	return ecdmuo
}

// ClearDeletedDate clears the value of the "DeletedDate" field.
func (ecdmuo *ExamCategoryDisabilityMappingUpdateOne) ClearDeletedDate() *ExamCategoryDisabilityMappingUpdateOne {
	ecdmuo.mutation.ClearDeletedDate()
	return ecdmuo
}

// Mutation returns the ExamCategoryDisabilityMappingMutation object of the builder.
func (ecdmuo *ExamCategoryDisabilityMappingUpdateOne) Mutation() *ExamCategoryDisabilityMappingMutation {
	return ecdmuo.mutation
}

// Where appends a list predicates to the ExamCategoryDisabilityMappingUpdate builder.
func (ecdmuo *ExamCategoryDisabilityMappingUpdateOne) Where(ps ...predicate.ExamCategoryDisabilityMapping) *ExamCategoryDisabilityMappingUpdateOne {
	ecdmuo.mutation.Where(ps...)
	return ecdmuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ecdmuo *ExamCategoryDisabilityMappingUpdateOne) Select(field string, fields ...string) *ExamCategoryDisabilityMappingUpdateOne {
	ecdmuo.fields = append([]string{field}, fields...)
	return ecdmuo
}

// Save executes the query and returns the updated ExamCategoryDisabilityMapping entity.
func (ecdmuo *ExamCategoryDisabilityMappingUpdateOne) Save(ctx context.Context) (*ExamCategoryDisabilityMapping, error) {
	return withHooks(ctx, ecdmuo.sqlSave, ecdmuo.mutation, ecdmuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ecdmuo *ExamCategoryDisabilityMappingUpdateOne) SaveX(ctx context.Context) *ExamCategoryDisabilityMapping {
	node, err := ecdmuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ecdmuo *ExamCategoryDisabilityMappingUpdateOne) Exec(ctx context.Context) error {
	_, err := ecdmuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ecdmuo *ExamCategoryDisabilityMappingUpdateOne) ExecX(ctx context.Context) {
	if err := ecdmuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ecdmuo *ExamCategoryDisabilityMappingUpdateOne) sqlSave(ctx context.Context) (_node *ExamCategoryDisabilityMapping, err error) {
	_spec := sqlgraph.NewUpdateSpec(examcategorydisabilitymapping.Table, examcategorydisabilitymapping.Columns, sqlgraph.NewFieldSpec(examcategorydisabilitymapping.FieldID, field.TypeInt32))
	id, ok := ecdmuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ExamCategoryDisabilityMapping.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ecdmuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, examcategorydisabilitymapping.FieldID)
		for _, f := range fields {
			if !examcategorydisabilitymapping.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != examcategorydisabilitymapping.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ecdmuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ecdmuo.mutation.ExamCode(); ok {
		_spec.SetField(examcategorydisabilitymapping.FieldExamCode, field.TypeInt64, value)
	}
	if value, ok := ecdmuo.mutation.AddedExamCode(); ok {
		_spec.AddField(examcategorydisabilitymapping.FieldExamCode, field.TypeInt64, value)
	}
	if ecdmuo.mutation.ExamCodeCleared() {
		_spec.ClearField(examcategorydisabilitymapping.FieldExamCode, field.TypeInt64)
	}
	if value, ok := ecdmuo.mutation.ExamShortName(); ok {
		_spec.SetField(examcategorydisabilitymapping.FieldExamShortName, field.TypeString, value)
	}
	if ecdmuo.mutation.ExamShortNameCleared() {
		_spec.ClearField(examcategorydisabilitymapping.FieldExamShortName, field.TypeString)
	}
	if value, ok := ecdmuo.mutation.CategoryDisability(); ok {
		_spec.SetField(examcategorydisabilitymapping.FieldCategoryDisability, field.TypeString, value)
	}
	if ecdmuo.mutation.CategoryDisabilityCleared() {
		_spec.ClearField(examcategorydisabilitymapping.FieldCategoryDisability, field.TypeString)
	}
	if value, ok := ecdmuo.mutation.CategoryDisabilityCode(); ok {
		_spec.SetField(examcategorydisabilitymapping.FieldCategoryDisabilityCode, field.TypeString, value)
	}
	if ecdmuo.mutation.CategoryDisabilityCodeCleared() {
		_spec.ClearField(examcategorydisabilitymapping.FieldCategoryDisabilityCode, field.TypeString)
	}
	if value, ok := ecdmuo.mutation.CategoryDisabilityDescription(); ok {
		_spec.SetField(examcategorydisabilitymapping.FieldCategoryDisabilityDescription, field.TypeString, value)
	}
	if ecdmuo.mutation.CategoryDisabilityDescriptionCleared() {
		_spec.ClearField(examcategorydisabilitymapping.FieldCategoryDisabilityDescription, field.TypeString)
	}
	if value, ok := ecdmuo.mutation.AgeException(); ok {
		_spec.SetField(examcategorydisabilitymapping.FieldAgeException, field.TypeInt32, value)
	}
	if value, ok := ecdmuo.mutation.AddedAgeException(); ok {
		_spec.AddField(examcategorydisabilitymapping.FieldAgeException, field.TypeInt32, value)
	}
	if ecdmuo.mutation.AgeExceptionCleared() {
		_spec.ClearField(examcategorydisabilitymapping.FieldAgeException, field.TypeInt32)
	}
	if value, ok := ecdmuo.mutation.ServiceException(); ok {
		_spec.SetField(examcategorydisabilitymapping.FieldServiceException, field.TypeInt32, value)
	}
	if value, ok := ecdmuo.mutation.AddedServiceException(); ok {
		_spec.AddField(examcategorydisabilitymapping.FieldServiceException, field.TypeInt32, value)
	}
	if ecdmuo.mutation.ServiceExceptionCleared() {
		_spec.ClearField(examcategorydisabilitymapping.FieldServiceException, field.TypeInt32)
	}
	if value, ok := ecdmuo.mutation.DrivingLicense(); ok {
		_spec.SetField(examcategorydisabilitymapping.FieldDrivingLicense, field.TypeBool, value)
	}
	if ecdmuo.mutation.DrivingLicenseCleared() {
		_spec.ClearField(examcategorydisabilitymapping.FieldDrivingLicense, field.TypeBool)
	}
	if value, ok := ecdmuo.mutation.OrderNumber(); ok {
		_spec.SetField(examcategorydisabilitymapping.FieldOrderNumber, field.TypeString, value)
	}
	if ecdmuo.mutation.OrderNumberCleared() {
		_spec.ClearField(examcategorydisabilitymapping.FieldOrderNumber, field.TypeString)
	}
	if value, ok := ecdmuo.mutation.Status(); ok {
		_spec.SetField(examcategorydisabilitymapping.FieldStatus, field.TypeString, value)
	}
	if ecdmuo.mutation.StatusCleared() {
		_spec.ClearField(examcategorydisabilitymapping.FieldStatus, field.TypeString)
	}
	if value, ok := ecdmuo.mutation.CreatedById(); ok {
		_spec.SetField(examcategorydisabilitymapping.FieldCreatedById, field.TypeInt32, value)
	}
	if value, ok := ecdmuo.mutation.AddedCreatedById(); ok {
		_spec.AddField(examcategorydisabilitymapping.FieldCreatedById, field.TypeInt32, value)
	}
	if ecdmuo.mutation.CreatedByIdCleared() {
		_spec.ClearField(examcategorydisabilitymapping.FieldCreatedById, field.TypeInt32)
	}
	if value, ok := ecdmuo.mutation.CreatedByUserName(); ok {
		_spec.SetField(examcategorydisabilitymapping.FieldCreatedByUserName, field.TypeString, value)
	}
	if ecdmuo.mutation.CreatedByUserNameCleared() {
		_spec.ClearField(examcategorydisabilitymapping.FieldCreatedByUserName, field.TypeString)
	}
	if value, ok := ecdmuo.mutation.CreatedByEmployeeId(); ok {
		_spec.SetField(examcategorydisabilitymapping.FieldCreatedByEmployeeId, field.TypeString, value)
	}
	if ecdmuo.mutation.CreatedByEmployeeIdCleared() {
		_spec.ClearField(examcategorydisabilitymapping.FieldCreatedByEmployeeId, field.TypeString)
	}
	if value, ok := ecdmuo.mutation.CreatedByDesignation(); ok {
		_spec.SetField(examcategorydisabilitymapping.FieldCreatedByDesignation, field.TypeString, value)
	}
	if ecdmuo.mutation.CreatedByDesignationCleared() {
		_spec.ClearField(examcategorydisabilitymapping.FieldCreatedByDesignation, field.TypeString)
	}
	if value, ok := ecdmuo.mutation.CreatedDate(); ok {
		_spec.SetField(examcategorydisabilitymapping.FieldCreatedDate, field.TypeTime, value)
	}
	if ecdmuo.mutation.CreatedDateCleared() {
		_spec.ClearField(examcategorydisabilitymapping.FieldCreatedDate, field.TypeTime)
	}
	if value, ok := ecdmuo.mutation.VerifiedById(); ok {
		_spec.SetField(examcategorydisabilitymapping.FieldVerifiedById, field.TypeInt64, value)
	}
	if value, ok := ecdmuo.mutation.AddedVerifiedById(); ok {
		_spec.AddField(examcategorydisabilitymapping.FieldVerifiedById, field.TypeInt64, value)
	}
	if ecdmuo.mutation.VerifiedByIdCleared() {
		_spec.ClearField(examcategorydisabilitymapping.FieldVerifiedById, field.TypeInt64)
	}
	if value, ok := ecdmuo.mutation.VerifiedByUserName(); ok {
		_spec.SetField(examcategorydisabilitymapping.FieldVerifiedByUserName, field.TypeString, value)
	}
	if ecdmuo.mutation.VerifiedByUserNameCleared() {
		_spec.ClearField(examcategorydisabilitymapping.FieldVerifiedByUserName, field.TypeString)
	}
	if value, ok := ecdmuo.mutation.VerifiedByEmployeeId(); ok {
		_spec.SetField(examcategorydisabilitymapping.FieldVerifiedByEmployeeId, field.TypeString, value)
	}
	if ecdmuo.mutation.VerifiedByEmployeeIdCleared() {
		_spec.ClearField(examcategorydisabilitymapping.FieldVerifiedByEmployeeId, field.TypeString)
	}
	if value, ok := ecdmuo.mutation.VerifiedByDesignation(); ok {
		_spec.SetField(examcategorydisabilitymapping.FieldVerifiedByDesignation, field.TypeString, value)
	}
	if ecdmuo.mutation.VerifiedByDesignationCleared() {
		_spec.ClearField(examcategorydisabilitymapping.FieldVerifiedByDesignation, field.TypeString)
	}
	if value, ok := ecdmuo.mutation.VerifiedDate(); ok {
		_spec.SetField(examcategorydisabilitymapping.FieldVerifiedDate, field.TypeTime, value)
	}
	if ecdmuo.mutation.VerifiedDateCleared() {
		_spec.ClearField(examcategorydisabilitymapping.FieldVerifiedDate, field.TypeTime)
	}
	if value, ok := ecdmuo.mutation.DeletedById(); ok {
		_spec.SetField(examcategorydisabilitymapping.FieldDeletedById, field.TypeInt64, value)
	}
	if value, ok := ecdmuo.mutation.AddedDeletedById(); ok {
		_spec.AddField(examcategorydisabilitymapping.FieldDeletedById, field.TypeInt64, value)
	}
	if ecdmuo.mutation.DeletedByIdCleared() {
		_spec.ClearField(examcategorydisabilitymapping.FieldDeletedById, field.TypeInt64)
	}
	if value, ok := ecdmuo.mutation.DeletedByUserName(); ok {
		_spec.SetField(examcategorydisabilitymapping.FieldDeletedByUserName, field.TypeString, value)
	}
	if ecdmuo.mutation.DeletedByUserNameCleared() {
		_spec.ClearField(examcategorydisabilitymapping.FieldDeletedByUserName, field.TypeString)
	}
	if value, ok := ecdmuo.mutation.DeletedByEmployeeId(); ok {
		_spec.SetField(examcategorydisabilitymapping.FieldDeletedByEmployeeId, field.TypeString, value)
	}
	if ecdmuo.mutation.DeletedByEmployeeIdCleared() {
		_spec.ClearField(examcategorydisabilitymapping.FieldDeletedByEmployeeId, field.TypeString)
	}
	if value, ok := ecdmuo.mutation.DeletedByDesignation(); ok {
		_spec.SetField(examcategorydisabilitymapping.FieldDeletedByDesignation, field.TypeString, value)
	}
	if ecdmuo.mutation.DeletedByDesignationCleared() {
		_spec.ClearField(examcategorydisabilitymapping.FieldDeletedByDesignation, field.TypeString)
	}
	if value, ok := ecdmuo.mutation.DeletedDate(); ok {
		_spec.SetField(examcategorydisabilitymapping.FieldDeletedDate, field.TypeTime, value)
	}
	if ecdmuo.mutation.DeletedDateCleared() {
		_spec.ClearField(examcategorydisabilitymapping.FieldDeletedDate, field.TypeTime)
	}
	_node = &ExamCategoryDisabilityMapping{config: ecdmuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ecdmuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{examcategorydisabilitymapping.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ecdmuo.mutation.done = true
	return _node, nil
}
