// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"
	"recruit/ent/cadre_choice_pm"
	"recruit/ent/center"
	"recruit/ent/circlesummaryforno"
	"recruit/ent/division_choice_pm"
	"recruit/ent/exam"
	"recruit/ent/exam_applications_gdspm"
	"recruit/ent/examcitycenter"
	"recruit/ent/logs"
	"recruit/ent/predicate"
	"recruit/ent/recommendationsgdspmapplications"
	"recruit/ent/rolemaster"
	"recruit/ent/usermaster"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ExamApplicationsGDSPMQuery is the builder for querying Exam_Applications_GDSPM entities.
type ExamApplicationsGDSPMQuery struct {
	config
	ctx                      *QueryContext
	order                    []exam_applications_gdspm.OrderOption
	inters                   []Interceptor
	predicates               []predicate.Exam_Applications_GDSPM
	withUsersGDSPMRef        *UserMasterQuery
	withCadrePrefRefGDSPM    *CadreChoicePMQuery
	withCirclePrefRefGDSPM   *DivisionChoicePMQuery
	withGDSPMApplicationsRef *RecommendationsGDSPMApplicationsQuery
	withLogData              *LogsQuery
	withExams                *ExamQuery
	withGDSPMExamCentres     *CenterQuery
	withCircleRefsGDSPM      *CircleSummaryForNOQuery
	withRoleusers            *RoleMasterQuery
	withExamcitycenter       *ExamCityCenterQuery
	withFKs                  bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the ExamApplicationsGDSPMQuery builder.
func (eagq *ExamApplicationsGDSPMQuery) Where(ps ...predicate.Exam_Applications_GDSPM) *ExamApplicationsGDSPMQuery {
	eagq.predicates = append(eagq.predicates, ps...)
	return eagq
}

// Limit the number of records to be returned by this query.
func (eagq *ExamApplicationsGDSPMQuery) Limit(limit int) *ExamApplicationsGDSPMQuery {
	eagq.ctx.Limit = &limit
	return eagq
}

// Offset to start from.
func (eagq *ExamApplicationsGDSPMQuery) Offset(offset int) *ExamApplicationsGDSPMQuery {
	eagq.ctx.Offset = &offset
	return eagq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (eagq *ExamApplicationsGDSPMQuery) Unique(unique bool) *ExamApplicationsGDSPMQuery {
	eagq.ctx.Unique = &unique
	return eagq
}

// Order specifies how the records should be ordered.
func (eagq *ExamApplicationsGDSPMQuery) Order(o ...exam_applications_gdspm.OrderOption) *ExamApplicationsGDSPMQuery {
	eagq.order = append(eagq.order, o...)
	return eagq
}

// QueryUsersGDSPMRef chains the current query on the "UsersGDSPMRef" edge.
func (eagq *ExamApplicationsGDSPMQuery) QueryUsersGDSPMRef() *UserMasterQuery {
	query := (&UserMasterClient{config: eagq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eagq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eagq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(exam_applications_gdspm.Table, exam_applications_gdspm.FieldID, selector),
			sqlgraph.To(usermaster.Table, usermaster.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, exam_applications_gdspm.UsersGDSPMRefTable, exam_applications_gdspm.UsersGDSPMRefColumn),
		)
		fromU = sqlgraph.SetNeighbors(eagq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCadrePrefRefGDSPM chains the current query on the "CadrePrefRefGDSPM" edge.
func (eagq *ExamApplicationsGDSPMQuery) QueryCadrePrefRefGDSPM() *CadreChoicePMQuery {
	query := (&CadreChoicePMClient{config: eagq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eagq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eagq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(exam_applications_gdspm.Table, exam_applications_gdspm.FieldID, selector),
			sqlgraph.To(cadre_choice_pm.Table, cadre_choice_pm.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, exam_applications_gdspm.CadrePrefRefGDSPMTable, exam_applications_gdspm.CadrePrefRefGDSPMColumn),
		)
		fromU = sqlgraph.SetNeighbors(eagq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCirclePrefRefGDSPM chains the current query on the "CirclePrefRefGDSPM" edge.
func (eagq *ExamApplicationsGDSPMQuery) QueryCirclePrefRefGDSPM() *DivisionChoicePMQuery {
	query := (&DivisionChoicePMClient{config: eagq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eagq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eagq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(exam_applications_gdspm.Table, exam_applications_gdspm.FieldID, selector),
			sqlgraph.To(division_choice_pm.Table, division_choice_pm.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, exam_applications_gdspm.CirclePrefRefGDSPMTable, exam_applications_gdspm.CirclePrefRefGDSPMColumn),
		)
		fromU = sqlgraph.SetNeighbors(eagq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryGDSPMApplicationsRef chains the current query on the "GDSPMApplicationsRef" edge.
func (eagq *ExamApplicationsGDSPMQuery) QueryGDSPMApplicationsRef() *RecommendationsGDSPMApplicationsQuery {
	query := (&RecommendationsGDSPMApplicationsClient{config: eagq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eagq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eagq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(exam_applications_gdspm.Table, exam_applications_gdspm.FieldID, selector),
			sqlgraph.To(recommendationsgdspmapplications.Table, recommendationsgdspmapplications.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, exam_applications_gdspm.GDSPMApplicationsRefTable, exam_applications_gdspm.GDSPMApplicationsRefColumn),
		)
		fromU = sqlgraph.SetNeighbors(eagq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryLogData chains the current query on the "LogData" edge.
func (eagq *ExamApplicationsGDSPMQuery) QueryLogData() *LogsQuery {
	query := (&LogsClient{config: eagq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eagq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eagq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(exam_applications_gdspm.Table, exam_applications_gdspm.FieldID, selector),
			sqlgraph.To(logs.Table, logs.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, exam_applications_gdspm.LogDataTable, exam_applications_gdspm.LogDataColumn),
		)
		fromU = sqlgraph.SetNeighbors(eagq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryExams chains the current query on the "Exams" edge.
func (eagq *ExamApplicationsGDSPMQuery) QueryExams() *ExamQuery {
	query := (&ExamClient{config: eagq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eagq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eagq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(exam_applications_gdspm.Table, exam_applications_gdspm.FieldID, selector),
			sqlgraph.To(exam.Table, exam.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, exam_applications_gdspm.ExamsTable, exam_applications_gdspm.ExamsColumn),
		)
		fromU = sqlgraph.SetNeighbors(eagq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryGDSPMExamCentres chains the current query on the "GDSPMExamCentres" edge.
func (eagq *ExamApplicationsGDSPMQuery) QueryGDSPMExamCentres() *CenterQuery {
	query := (&CenterClient{config: eagq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eagq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eagq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(exam_applications_gdspm.Table, exam_applications_gdspm.FieldID, selector),
			sqlgraph.To(center.Table, center.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, exam_applications_gdspm.GDSPMExamCentresTable, exam_applications_gdspm.GDSPMExamCentresColumn),
		)
		fromU = sqlgraph.SetNeighbors(eagq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCircleRefsGDSPM chains the current query on the "CircleRefsGDSPM" edge.
func (eagq *ExamApplicationsGDSPMQuery) QueryCircleRefsGDSPM() *CircleSummaryForNOQuery {
	query := (&CircleSummaryForNOClient{config: eagq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eagq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eagq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(exam_applications_gdspm.Table, exam_applications_gdspm.FieldID, selector),
			sqlgraph.To(circlesummaryforno.Table, circlesummaryforno.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, exam_applications_gdspm.CircleRefsGDSPMTable, exam_applications_gdspm.CircleRefsGDSPMColumn),
		)
		fromU = sqlgraph.SetNeighbors(eagq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryRoleusers chains the current query on the "roleusers" edge.
func (eagq *ExamApplicationsGDSPMQuery) QueryRoleusers() *RoleMasterQuery {
	query := (&RoleMasterClient{config: eagq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eagq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eagq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(exam_applications_gdspm.Table, exam_applications_gdspm.FieldID, selector),
			sqlgraph.To(rolemaster.Table, rolemaster.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, exam_applications_gdspm.RoleusersTable, exam_applications_gdspm.RoleusersColumn),
		)
		fromU = sqlgraph.SetNeighbors(eagq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryExamcitycenter chains the current query on the "examcitycenter" edge.
func (eagq *ExamApplicationsGDSPMQuery) QueryExamcitycenter() *ExamCityCenterQuery {
	query := (&ExamCityCenterClient{config: eagq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eagq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eagq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(exam_applications_gdspm.Table, exam_applications_gdspm.FieldID, selector),
			sqlgraph.To(examcitycenter.Table, examcitycenter.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, exam_applications_gdspm.ExamcitycenterTable, exam_applications_gdspm.ExamcitycenterColumn),
		)
		fromU = sqlgraph.SetNeighbors(eagq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first Exam_Applications_GDSPM entity from the query.
// Returns a *NotFoundError when no Exam_Applications_GDSPM was found.
func (eagq *ExamApplicationsGDSPMQuery) First(ctx context.Context) (*Exam_Applications_GDSPM, error) {
	nodes, err := eagq.Limit(1).All(setContextOp(ctx, eagq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{exam_applications_gdspm.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (eagq *ExamApplicationsGDSPMQuery) FirstX(ctx context.Context) *Exam_Applications_GDSPM {
	node, err := eagq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first Exam_Applications_GDSPM ID from the query.
// Returns a *NotFoundError when no Exam_Applications_GDSPM ID was found.
func (eagq *ExamApplicationsGDSPMQuery) FirstID(ctx context.Context) (id int64, err error) {
	var ids []int64
	if ids, err = eagq.Limit(1).IDs(setContextOp(ctx, eagq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{exam_applications_gdspm.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (eagq *ExamApplicationsGDSPMQuery) FirstIDX(ctx context.Context) int64 {
	id, err := eagq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single Exam_Applications_GDSPM entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one Exam_Applications_GDSPM entity is found.
// Returns a *NotFoundError when no Exam_Applications_GDSPM entities are found.
func (eagq *ExamApplicationsGDSPMQuery) Only(ctx context.Context) (*Exam_Applications_GDSPM, error) {
	nodes, err := eagq.Limit(2).All(setContextOp(ctx, eagq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{exam_applications_gdspm.Label}
	default:
		return nil, &NotSingularError{exam_applications_gdspm.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (eagq *ExamApplicationsGDSPMQuery) OnlyX(ctx context.Context) *Exam_Applications_GDSPM {
	node, err := eagq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only Exam_Applications_GDSPM ID in the query.
// Returns a *NotSingularError when more than one Exam_Applications_GDSPM ID is found.
// Returns a *NotFoundError when no entities are found.
func (eagq *ExamApplicationsGDSPMQuery) OnlyID(ctx context.Context) (id int64, err error) {
	var ids []int64
	if ids, err = eagq.Limit(2).IDs(setContextOp(ctx, eagq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{exam_applications_gdspm.Label}
	default:
		err = &NotSingularError{exam_applications_gdspm.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (eagq *ExamApplicationsGDSPMQuery) OnlyIDX(ctx context.Context) int64 {
	id, err := eagq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Exam_Applications_GDSPMs.
func (eagq *ExamApplicationsGDSPMQuery) All(ctx context.Context) ([]*Exam_Applications_GDSPM, error) {
	ctx = setContextOp(ctx, eagq.ctx, "All")
	if err := eagq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*Exam_Applications_GDSPM, *ExamApplicationsGDSPMQuery]()
	return withInterceptors[[]*Exam_Applications_GDSPM](ctx, eagq, qr, eagq.inters)
}

// AllX is like All, but panics if an error occurs.
func (eagq *ExamApplicationsGDSPMQuery) AllX(ctx context.Context) []*Exam_Applications_GDSPM {
	nodes, err := eagq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of Exam_Applications_GDSPM IDs.
func (eagq *ExamApplicationsGDSPMQuery) IDs(ctx context.Context) (ids []int64, err error) {
	if eagq.ctx.Unique == nil && eagq.path != nil {
		eagq.Unique(true)
	}
	ctx = setContextOp(ctx, eagq.ctx, "IDs")
	if err = eagq.Select(exam_applications_gdspm.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (eagq *ExamApplicationsGDSPMQuery) IDsX(ctx context.Context) []int64 {
	ids, err := eagq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (eagq *ExamApplicationsGDSPMQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, eagq.ctx, "Count")
	if err := eagq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, eagq, querierCount[*ExamApplicationsGDSPMQuery](), eagq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (eagq *ExamApplicationsGDSPMQuery) CountX(ctx context.Context) int {
	count, err := eagq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (eagq *ExamApplicationsGDSPMQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, eagq.ctx, "Exist")
	switch _, err := eagq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (eagq *ExamApplicationsGDSPMQuery) ExistX(ctx context.Context) bool {
	exist, err := eagq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the ExamApplicationsGDSPMQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (eagq *ExamApplicationsGDSPMQuery) Clone() *ExamApplicationsGDSPMQuery {
	if eagq == nil {
		return nil
	}
	return &ExamApplicationsGDSPMQuery{
		config:                   eagq.config,
		ctx:                      eagq.ctx.Clone(),
		order:                    append([]exam_applications_gdspm.OrderOption{}, eagq.order...),
		inters:                   append([]Interceptor{}, eagq.inters...),
		predicates:               append([]predicate.Exam_Applications_GDSPM{}, eagq.predicates...),
		withUsersGDSPMRef:        eagq.withUsersGDSPMRef.Clone(),
		withCadrePrefRefGDSPM:    eagq.withCadrePrefRefGDSPM.Clone(),
		withCirclePrefRefGDSPM:   eagq.withCirclePrefRefGDSPM.Clone(),
		withGDSPMApplicationsRef: eagq.withGDSPMApplicationsRef.Clone(),
		withLogData:              eagq.withLogData.Clone(),
		withExams:                eagq.withExams.Clone(),
		withGDSPMExamCentres:     eagq.withGDSPMExamCentres.Clone(),
		withCircleRefsGDSPM:      eagq.withCircleRefsGDSPM.Clone(),
		withRoleusers:            eagq.withRoleusers.Clone(),
		withExamcitycenter:       eagq.withExamcitycenter.Clone(),
		// clone intermediate query.
		sql:  eagq.sql.Clone(),
		path: eagq.path,
	}
}

// WithUsersGDSPMRef tells the query-builder to eager-load the nodes that are connected to
// the "UsersGDSPMRef" edge. The optional arguments are used to configure the query builder of the edge.
func (eagq *ExamApplicationsGDSPMQuery) WithUsersGDSPMRef(opts ...func(*UserMasterQuery)) *ExamApplicationsGDSPMQuery {
	query := (&UserMasterClient{config: eagq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	eagq.withUsersGDSPMRef = query
	return eagq
}

// WithCadrePrefRefGDSPM tells the query-builder to eager-load the nodes that are connected to
// the "CadrePrefRefGDSPM" edge. The optional arguments are used to configure the query builder of the edge.
func (eagq *ExamApplicationsGDSPMQuery) WithCadrePrefRefGDSPM(opts ...func(*CadreChoicePMQuery)) *ExamApplicationsGDSPMQuery {
	query := (&CadreChoicePMClient{config: eagq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	eagq.withCadrePrefRefGDSPM = query
	return eagq
}

// WithCirclePrefRefGDSPM tells the query-builder to eager-load the nodes that are connected to
// the "CirclePrefRefGDSPM" edge. The optional arguments are used to configure the query builder of the edge.
func (eagq *ExamApplicationsGDSPMQuery) WithCirclePrefRefGDSPM(opts ...func(*DivisionChoicePMQuery)) *ExamApplicationsGDSPMQuery {
	query := (&DivisionChoicePMClient{config: eagq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	eagq.withCirclePrefRefGDSPM = query
	return eagq
}

// WithGDSPMApplicationsRef tells the query-builder to eager-load the nodes that are connected to
// the "GDSPMApplicationsRef" edge. The optional arguments are used to configure the query builder of the edge.
func (eagq *ExamApplicationsGDSPMQuery) WithGDSPMApplicationsRef(opts ...func(*RecommendationsGDSPMApplicationsQuery)) *ExamApplicationsGDSPMQuery {
	query := (&RecommendationsGDSPMApplicationsClient{config: eagq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	eagq.withGDSPMApplicationsRef = query
	return eagq
}

// WithLogData tells the query-builder to eager-load the nodes that are connected to
// the "LogData" edge. The optional arguments are used to configure the query builder of the edge.
func (eagq *ExamApplicationsGDSPMQuery) WithLogData(opts ...func(*LogsQuery)) *ExamApplicationsGDSPMQuery {
	query := (&LogsClient{config: eagq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	eagq.withLogData = query
	return eagq
}

// WithExams tells the query-builder to eager-load the nodes that are connected to
// the "Exams" edge. The optional arguments are used to configure the query builder of the edge.
func (eagq *ExamApplicationsGDSPMQuery) WithExams(opts ...func(*ExamQuery)) *ExamApplicationsGDSPMQuery {
	query := (&ExamClient{config: eagq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	eagq.withExams = query
	return eagq
}

// WithGDSPMExamCentres tells the query-builder to eager-load the nodes that are connected to
// the "GDSPMExamCentres" edge. The optional arguments are used to configure the query builder of the edge.
func (eagq *ExamApplicationsGDSPMQuery) WithGDSPMExamCentres(opts ...func(*CenterQuery)) *ExamApplicationsGDSPMQuery {
	query := (&CenterClient{config: eagq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	eagq.withGDSPMExamCentres = query
	return eagq
}

// WithCircleRefsGDSPM tells the query-builder to eager-load the nodes that are connected to
// the "CircleRefsGDSPM" edge. The optional arguments are used to configure the query builder of the edge.
func (eagq *ExamApplicationsGDSPMQuery) WithCircleRefsGDSPM(opts ...func(*CircleSummaryForNOQuery)) *ExamApplicationsGDSPMQuery {
	query := (&CircleSummaryForNOClient{config: eagq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	eagq.withCircleRefsGDSPM = query
	return eagq
}

// WithRoleusers tells the query-builder to eager-load the nodes that are connected to
// the "roleusers" edge. The optional arguments are used to configure the query builder of the edge.
func (eagq *ExamApplicationsGDSPMQuery) WithRoleusers(opts ...func(*RoleMasterQuery)) *ExamApplicationsGDSPMQuery {
	query := (&RoleMasterClient{config: eagq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	eagq.withRoleusers = query
	return eagq
}

// WithExamcitycenter tells the query-builder to eager-load the nodes that are connected to
// the "examcitycenter" edge. The optional arguments are used to configure the query builder of the edge.
func (eagq *ExamApplicationsGDSPMQuery) WithExamcitycenter(opts ...func(*ExamCityCenterQuery)) *ExamApplicationsGDSPMQuery {
	query := (&ExamCityCenterClient{config: eagq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	eagq.withExamcitycenter = query
	return eagq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		ApplicationNumber string `json:"ApplicationNumber,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.ExamApplicationsGDSPM.Query().
//		GroupBy(exam_applications_gdspm.FieldApplicationNumber).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (eagq *ExamApplicationsGDSPMQuery) GroupBy(field string, fields ...string) *ExamApplicationsGDSPMGroupBy {
	eagq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &ExamApplicationsGDSPMGroupBy{build: eagq}
	grbuild.flds = &eagq.ctx.Fields
	grbuild.label = exam_applications_gdspm.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		ApplicationNumber string `json:"ApplicationNumber,omitempty"`
//	}
//
//	client.ExamApplicationsGDSPM.Query().
//		Select(exam_applications_gdspm.FieldApplicationNumber).
//		Scan(ctx, &v)
func (eagq *ExamApplicationsGDSPMQuery) Select(fields ...string) *ExamApplicationsGDSPMSelect {
	eagq.ctx.Fields = append(eagq.ctx.Fields, fields...)
	sbuild := &ExamApplicationsGDSPMSelect{ExamApplicationsGDSPMQuery: eagq}
	sbuild.label = exam_applications_gdspm.Label
	sbuild.flds, sbuild.scan = &eagq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a ExamApplicationsGDSPMSelect configured with the given aggregations.
func (eagq *ExamApplicationsGDSPMQuery) Aggregate(fns ...AggregateFunc) *ExamApplicationsGDSPMSelect {
	return eagq.Select().Aggregate(fns...)
}

func (eagq *ExamApplicationsGDSPMQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range eagq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, eagq); err != nil {
				return err
			}
		}
	}
	for _, f := range eagq.ctx.Fields {
		if !exam_applications_gdspm.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if eagq.path != nil {
		prev, err := eagq.path(ctx)
		if err != nil {
			return err
		}
		eagq.sql = prev
	}
	return nil
}

func (eagq *ExamApplicationsGDSPMQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*Exam_Applications_GDSPM, error) {
	var (
		nodes       = []*Exam_Applications_GDSPM{}
		withFKs     = eagq.withFKs
		_spec       = eagq.querySpec()
		loadedTypes = [10]bool{
			eagq.withUsersGDSPMRef != nil,
			eagq.withCadrePrefRefGDSPM != nil,
			eagq.withCirclePrefRefGDSPM != nil,
			eagq.withGDSPMApplicationsRef != nil,
			eagq.withLogData != nil,
			eagq.withExams != nil,
			eagq.withGDSPMExamCentres != nil,
			eagq.withCircleRefsGDSPM != nil,
			eagq.withRoleusers != nil,
			eagq.withExamcitycenter != nil,
		}
	)
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, exam_applications_gdspm.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*Exam_Applications_GDSPM).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &Exam_Applications_GDSPM{config: eagq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, eagq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := eagq.withUsersGDSPMRef; query != nil {
		if err := eagq.loadUsersGDSPMRef(ctx, query, nodes,
			func(n *Exam_Applications_GDSPM) { n.Edges.UsersGDSPMRef = []*UserMaster{} },
			func(n *Exam_Applications_GDSPM, e *UserMaster) {
				n.Edges.UsersGDSPMRef = append(n.Edges.UsersGDSPMRef, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := eagq.withCadrePrefRefGDSPM; query != nil {
		if err := eagq.loadCadrePrefRefGDSPM(ctx, query, nodes,
			func(n *Exam_Applications_GDSPM) { n.Edges.CadrePrefRefGDSPM = []*Cadre_Choice_PM{} },
			func(n *Exam_Applications_GDSPM, e *Cadre_Choice_PM) {
				n.Edges.CadrePrefRefGDSPM = append(n.Edges.CadrePrefRefGDSPM, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := eagq.withCirclePrefRefGDSPM; query != nil {
		if err := eagq.loadCirclePrefRefGDSPM(ctx, query, nodes,
			func(n *Exam_Applications_GDSPM) { n.Edges.CirclePrefRefGDSPM = []*Division_Choice_PM{} },
			func(n *Exam_Applications_GDSPM, e *Division_Choice_PM) {
				n.Edges.CirclePrefRefGDSPM = append(n.Edges.CirclePrefRefGDSPM, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := eagq.withGDSPMApplicationsRef; query != nil {
		if err := eagq.loadGDSPMApplicationsRef(ctx, query, nodes,
			func(n *Exam_Applications_GDSPM) { n.Edges.GDSPMApplicationsRef = []*RecommendationsGDSPMApplications{} },
			func(n *Exam_Applications_GDSPM, e *RecommendationsGDSPMApplications) {
				n.Edges.GDSPMApplicationsRef = append(n.Edges.GDSPMApplicationsRef, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := eagq.withLogData; query != nil {
		if err := eagq.loadLogData(ctx, query, nodes,
			func(n *Exam_Applications_GDSPM) { n.Edges.LogData = []*Logs{} },
			func(n *Exam_Applications_GDSPM, e *Logs) { n.Edges.LogData = append(n.Edges.LogData, e) }); err != nil {
			return nil, err
		}
	}
	if query := eagq.withExams; query != nil {
		if err := eagq.loadExams(ctx, query, nodes, nil,
			func(n *Exam_Applications_GDSPM, e *Exam) { n.Edges.Exams = e }); err != nil {
			return nil, err
		}
	}
	if query := eagq.withGDSPMExamCentres; query != nil {
		if err := eagq.loadGDSPMExamCentres(ctx, query, nodes, nil,
			func(n *Exam_Applications_GDSPM, e *Center) { n.Edges.GDSPMExamCentres = e }); err != nil {
			return nil, err
		}
	}
	if query := eagq.withCircleRefsGDSPM; query != nil {
		if err := eagq.loadCircleRefsGDSPM(ctx, query, nodes, nil,
			func(n *Exam_Applications_GDSPM, e *CircleSummaryForNO) { n.Edges.CircleRefsGDSPM = e }); err != nil {
			return nil, err
		}
	}
	if query := eagq.withRoleusers; query != nil {
		if err := eagq.loadRoleusers(ctx, query, nodes, nil,
			func(n *Exam_Applications_GDSPM, e *RoleMaster) { n.Edges.Roleusers = e }); err != nil {
			return nil, err
		}
	}
	if query := eagq.withExamcitycenter; query != nil {
		if err := eagq.loadExamcitycenter(ctx, query, nodes, nil,
			func(n *Exam_Applications_GDSPM, e *ExamCityCenter) { n.Edges.Examcitycenter = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (eagq *ExamApplicationsGDSPMQuery) loadUsersGDSPMRef(ctx context.Context, query *UserMasterQuery, nodes []*Exam_Applications_GDSPM, init func(*Exam_Applications_GDSPM), assign func(*Exam_Applications_GDSPM, *UserMaster)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int64]*Exam_Applications_GDSPM)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.UserMaster(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(exam_applications_gdspm.UsersGDSPMRefColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.exam_applications_gdspm_users_gdspm_ref
		if fk == nil {
			return fmt.Errorf(`foreign-key "exam_applications_gdspm_users_gdspm_ref" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "exam_applications_gdspm_users_gdspm_ref" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (eagq *ExamApplicationsGDSPMQuery) loadCadrePrefRefGDSPM(ctx context.Context, query *CadreChoicePMQuery, nodes []*Exam_Applications_GDSPM, init func(*Exam_Applications_GDSPM), assign func(*Exam_Applications_GDSPM, *Cadre_Choice_PM)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int64]*Exam_Applications_GDSPM)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(cadre_choice_pm.FieldApplicationID)
	}
	query.Where(predicate.Cadre_Choice_PM(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(exam_applications_gdspm.CadrePrefRefGDSPMColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.ApplicationID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "ApplicationID" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (eagq *ExamApplicationsGDSPMQuery) loadCirclePrefRefGDSPM(ctx context.Context, query *DivisionChoicePMQuery, nodes []*Exam_Applications_GDSPM, init func(*Exam_Applications_GDSPM), assign func(*Exam_Applications_GDSPM, *Division_Choice_PM)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int64]*Exam_Applications_GDSPM)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(division_choice_pm.FieldApplicationID)
	}
	query.Where(predicate.Division_Choice_PM(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(exam_applications_gdspm.CirclePrefRefGDSPMColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.ApplicationID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "ApplicationID" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (eagq *ExamApplicationsGDSPMQuery) loadGDSPMApplicationsRef(ctx context.Context, query *RecommendationsGDSPMApplicationsQuery, nodes []*Exam_Applications_GDSPM, init func(*Exam_Applications_GDSPM), assign func(*Exam_Applications_GDSPM, *RecommendationsGDSPMApplications)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int64]*Exam_Applications_GDSPM)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.RecommendationsGDSPMApplications(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(exam_applications_gdspm.GDSPMApplicationsRefColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.exam_applications_gdspm_gdspm_applications_ref
		if fk == nil {
			return fmt.Errorf(`foreign-key "exam_applications_gdspm_gdspm_applications_ref" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "exam_applications_gdspm_gdspm_applications_ref" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (eagq *ExamApplicationsGDSPMQuery) loadLogData(ctx context.Context, query *LogsQuery, nodes []*Exam_Applications_GDSPM, init func(*Exam_Applications_GDSPM), assign func(*Exam_Applications_GDSPM, *Logs)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int64]*Exam_Applications_GDSPM)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Logs(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(exam_applications_gdspm.LogDataColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.exam_applications_gdspm_log_data
		if fk == nil {
			return fmt.Errorf(`foreign-key "exam_applications_gdspm_log_data" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "exam_applications_gdspm_log_data" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (eagq *ExamApplicationsGDSPMQuery) loadExams(ctx context.Context, query *ExamQuery, nodes []*Exam_Applications_GDSPM, init func(*Exam_Applications_GDSPM), assign func(*Exam_Applications_GDSPM, *Exam)) error {
	ids := make([]int32, 0, len(nodes))
	nodeids := make(map[int32][]*Exam_Applications_GDSPM)
	for i := range nodes {
		fk := nodes[i].ExamCode
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(exam.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "ExamCode" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (eagq *ExamApplicationsGDSPMQuery) loadGDSPMExamCentres(ctx context.Context, query *CenterQuery, nodes []*Exam_Applications_GDSPM, init func(*Exam_Applications_GDSPM), assign func(*Exam_Applications_GDSPM, *Center)) error {
	ids := make([]int32, 0, len(nodes))
	nodeids := make(map[int32][]*Exam_Applications_GDSPM)
	for i := range nodes {
		fk := nodes[i].CenterCode
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(center.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "CenterCode" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (eagq *ExamApplicationsGDSPMQuery) loadCircleRefsGDSPM(ctx context.Context, query *CircleSummaryForNOQuery, nodes []*Exam_Applications_GDSPM, init func(*Exam_Applications_GDSPM), assign func(*Exam_Applications_GDSPM, *CircleSummaryForNO)) error {
	ids := make([]int32, 0, len(nodes))
	nodeids := make(map[int32][]*Exam_Applications_GDSPM)
	for i := range nodes {
		if nodes[i].CircleSID == nil {
			continue
		}
		fk := *nodes[i].CircleSID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(circlesummaryforno.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "CircleSID" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (eagq *ExamApplicationsGDSPMQuery) loadRoleusers(ctx context.Context, query *RoleMasterQuery, nodes []*Exam_Applications_GDSPM, init func(*Exam_Applications_GDSPM), assign func(*Exam_Applications_GDSPM, *RoleMaster)) error {
	ids := make([]int32, 0, len(nodes))
	nodeids := make(map[int32][]*Exam_Applications_GDSPM)
	for i := range nodes {
		fk := nodes[i].RoleUserCode
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(rolemaster.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "RoleUserCode" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (eagq *ExamApplicationsGDSPMQuery) loadExamcitycenter(ctx context.Context, query *ExamCityCenterQuery, nodes []*Exam_Applications_GDSPM, init func(*Exam_Applications_GDSPM), assign func(*Exam_Applications_GDSPM, *ExamCityCenter)) error {
	ids := make([]int32, 0, len(nodes))
	nodeids := make(map[int32][]*Exam_Applications_GDSPM)
	for i := range nodes {
		fk := nodes[i].ExamCityCenterCode
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(examcitycenter.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "ExamCityCenterCode" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (eagq *ExamApplicationsGDSPMQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := eagq.querySpec()
	_spec.Node.Columns = eagq.ctx.Fields
	if len(eagq.ctx.Fields) > 0 {
		_spec.Unique = eagq.ctx.Unique != nil && *eagq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, eagq.driver, _spec)
}

func (eagq *ExamApplicationsGDSPMQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(exam_applications_gdspm.Table, exam_applications_gdspm.Columns, sqlgraph.NewFieldSpec(exam_applications_gdspm.FieldID, field.TypeInt64))
	_spec.From = eagq.sql
	if unique := eagq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if eagq.path != nil {
		_spec.Unique = true
	}
	if fields := eagq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, exam_applications_gdspm.FieldID)
		for i := range fields {
			if fields[i] != exam_applications_gdspm.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if eagq.withExams != nil {
			_spec.Node.AddColumnOnce(exam_applications_gdspm.FieldExamCode)
		}
		if eagq.withGDSPMExamCentres != nil {
			_spec.Node.AddColumnOnce(exam_applications_gdspm.FieldCenterCode)
		}
		if eagq.withCircleRefsGDSPM != nil {
			_spec.Node.AddColumnOnce(exam_applications_gdspm.FieldCircleSID)
		}
		if eagq.withRoleusers != nil {
			_spec.Node.AddColumnOnce(exam_applications_gdspm.FieldRoleUserCode)
		}
		if eagq.withExamcitycenter != nil {
			_spec.Node.AddColumnOnce(exam_applications_gdspm.FieldExamCityCenterCode)
		}
	}
	if ps := eagq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := eagq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := eagq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := eagq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (eagq *ExamApplicationsGDSPMQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(eagq.driver.Dialect())
	t1 := builder.Table(exam_applications_gdspm.Table)
	columns := eagq.ctx.Fields
	if len(columns) == 0 {
		columns = exam_applications_gdspm.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if eagq.sql != nil {
		selector = eagq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if eagq.ctx.Unique != nil && *eagq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range eagq.predicates {
		p(selector)
	}
	for _, p := range eagq.order {
		p(selector)
	}
	if offset := eagq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := eagq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// ExamApplicationsGDSPMGroupBy is the group-by builder for Exam_Applications_GDSPM entities.
type ExamApplicationsGDSPMGroupBy struct {
	selector
	build *ExamApplicationsGDSPMQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (eaggb *ExamApplicationsGDSPMGroupBy) Aggregate(fns ...AggregateFunc) *ExamApplicationsGDSPMGroupBy {
	eaggb.fns = append(eaggb.fns, fns...)
	return eaggb
}

// Scan applies the selector query and scans the result into the given value.
func (eaggb *ExamApplicationsGDSPMGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, eaggb.build.ctx, "GroupBy")
	if err := eaggb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ExamApplicationsGDSPMQuery, *ExamApplicationsGDSPMGroupBy](ctx, eaggb.build, eaggb, eaggb.build.inters, v)
}

func (eaggb *ExamApplicationsGDSPMGroupBy) sqlScan(ctx context.Context, root *ExamApplicationsGDSPMQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(eaggb.fns))
	for _, fn := range eaggb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*eaggb.flds)+len(eaggb.fns))
		for _, f := range *eaggb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*eaggb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := eaggb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// ExamApplicationsGDSPMSelect is the builder for selecting fields of ExamApplicationsGDSPM entities.
type ExamApplicationsGDSPMSelect struct {
	*ExamApplicationsGDSPMQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (eags *ExamApplicationsGDSPMSelect) Aggregate(fns ...AggregateFunc) *ExamApplicationsGDSPMSelect {
	eags.fns = append(eags.fns, fns...)
	return eags
}

// Scan applies the selector query and scans the result into the given value.
func (eags *ExamApplicationsGDSPMSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, eags.ctx, "Select")
	if err := eags.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ExamApplicationsGDSPMQuery, *ExamApplicationsGDSPMSelect](ctx, eags.ExamApplicationsGDSPMQuery, eags, eags.inters, v)
}

func (eags *ExamApplicationsGDSPMSelect) sqlScan(ctx context.Context, root *ExamApplicationsGDSPMQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(eags.fns))
	for _, fn := range eags.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*eags.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := eags.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
