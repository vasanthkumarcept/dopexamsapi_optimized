// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"recruit/ent/logs"
	"recruit/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// LogsUpdate is the builder for updating Logs entities.
type LogsUpdate struct {
	config
	hooks    []Hook
	mutation *LogsMutation
}

// Where appends a list predicates to the LogsUpdate builder.
func (lu *LogsUpdate) Where(ps ...predicate.Logs) *LogsUpdate {
	lu.mutation.Where(ps...)
	return lu
}

// SetUserid sets the "userid" field.
func (lu *LogsUpdate) SetUserid(s string) *LogsUpdate {
	lu.mutation.SetUserid(s)
	return lu
}

// SetNillableUserid sets the "userid" field if the given value is not nil.
func (lu *LogsUpdate) SetNillableUserid(s *string) *LogsUpdate {
	if s != nil {
		lu.SetUserid(*s)
	}
	return lu
}

// ClearUserid clears the value of the "userid" field.
func (lu *LogsUpdate) ClearUserid() *LogsUpdate {
	lu.mutation.ClearUserid()
	return lu
}

// SetUniqueid sets the "uniqueid" field.
func (lu *LogsUpdate) SetUniqueid(i int64) *LogsUpdate {
	lu.mutation.ResetUniqueid()
	lu.mutation.SetUniqueid(i)
	return lu
}

// SetNillableUniqueid sets the "uniqueid" field if the given value is not nil.
func (lu *LogsUpdate) SetNillableUniqueid(i *int64) *LogsUpdate {
	if i != nil {
		lu.SetUniqueid(*i)
	}
	return lu
}

// AddUniqueid adds i to the "uniqueid" field.
func (lu *LogsUpdate) AddUniqueid(i int64) *LogsUpdate {
	lu.mutation.AddUniqueid(i)
	return lu
}

// ClearUniqueid clears the value of the "uniqueid" field.
func (lu *LogsUpdate) ClearUniqueid() *LogsUpdate {
	lu.mutation.ClearUniqueid()
	return lu
}

// SetUsertype sets the "usertype" field.
func (lu *LogsUpdate) SetUsertype(s string) *LogsUpdate {
	lu.mutation.SetUsertype(s)
	return lu
}

// SetNillableUsertype sets the "usertype" field if the given value is not nil.
func (lu *LogsUpdate) SetNillableUsertype(s *string) *LogsUpdate {
	if s != nil {
		lu.SetUsertype(*s)
	}
	return lu
}

// ClearUsertype clears the value of the "usertype" field.
func (lu *LogsUpdate) ClearUsertype() *LogsUpdate {
	lu.mutation.ClearUsertype()
	return lu
}

// SetUserdetails sets the "userdetails" field.
func (lu *LogsUpdate) SetUserdetails(s string) *LogsUpdate {
	lu.mutation.SetUserdetails(s)
	return lu
}

// SetNillableUserdetails sets the "userdetails" field if the given value is not nil.
func (lu *LogsUpdate) SetNillableUserdetails(s *string) *LogsUpdate {
	if s != nil {
		lu.SetUserdetails(*s)
	}
	return lu
}

// ClearUserdetails clears the value of the "userdetails" field.
func (lu *LogsUpdate) ClearUserdetails() *LogsUpdate {
	lu.mutation.ClearUserdetails()
	return lu
}

// SetRemarks sets the "remarks" field.
func (lu *LogsUpdate) SetRemarks(s string) *LogsUpdate {
	lu.mutation.SetRemarks(s)
	return lu
}

// SetNillableRemarks sets the "remarks" field if the given value is not nil.
func (lu *LogsUpdate) SetNillableRemarks(s *string) *LogsUpdate {
	if s != nil {
		lu.SetRemarks(*s)
	}
	return lu
}

// ClearRemarks clears the value of the "remarks" field.
func (lu *LogsUpdate) ClearRemarks() *LogsUpdate {
	lu.mutation.ClearRemarks()
	return lu
}

// SetAction sets the "action" field.
func (lu *LogsUpdate) SetAction(s string) *LogsUpdate {
	lu.mutation.SetAction(s)
	return lu
}

// SetNillableAction sets the "action" field if the given value is not nil.
func (lu *LogsUpdate) SetNillableAction(s *string) *LogsUpdate {
	if s != nil {
		lu.SetAction(*s)
	}
	return lu
}

// ClearAction clears the value of the "action" field.
func (lu *LogsUpdate) ClearAction() *LogsUpdate {
	lu.mutation.ClearAction()
	return lu
}

// SetIpaddress sets the "ipaddress" field.
func (lu *LogsUpdate) SetIpaddress(s string) *LogsUpdate {
	lu.mutation.SetIpaddress(s)
	return lu
}

// SetNillableIpaddress sets the "ipaddress" field if the given value is not nil.
func (lu *LogsUpdate) SetNillableIpaddress(s *string) *LogsUpdate {
	if s != nil {
		lu.SetIpaddress(*s)
	}
	return lu
}

// ClearIpaddress clears the value of the "ipaddress" field.
func (lu *LogsUpdate) ClearIpaddress() *LogsUpdate {
	lu.mutation.ClearIpaddress()
	return lu
}

// SetDevicetype sets the "devicetype" field.
func (lu *LogsUpdate) SetDevicetype(s string) *LogsUpdate {
	lu.mutation.SetDevicetype(s)
	return lu
}

// SetNillableDevicetype sets the "devicetype" field if the given value is not nil.
func (lu *LogsUpdate) SetNillableDevicetype(s *string) *LogsUpdate {
	if s != nil {
		lu.SetDevicetype(*s)
	}
	return lu
}

// ClearDevicetype clears the value of the "devicetype" field.
func (lu *LogsUpdate) ClearDevicetype() *LogsUpdate {
	lu.mutation.ClearDevicetype()
	return lu
}

// SetOs sets the "os" field.
func (lu *LogsUpdate) SetOs(s string) *LogsUpdate {
	lu.mutation.SetOs(s)
	return lu
}

// SetNillableOs sets the "os" field if the given value is not nil.
func (lu *LogsUpdate) SetNillableOs(s *string) *LogsUpdate {
	if s != nil {
		lu.SetOs(*s)
	}
	return lu
}

// ClearOs clears the value of the "os" field.
func (lu *LogsUpdate) ClearOs() *LogsUpdate {
	lu.mutation.ClearOs()
	return lu
}

// SetBrowser sets the "browser" field.
func (lu *LogsUpdate) SetBrowser(s string) *LogsUpdate {
	lu.mutation.SetBrowser(s)
	return lu
}

// SetNillableBrowser sets the "browser" field if the given value is not nil.
func (lu *LogsUpdate) SetNillableBrowser(s *string) *LogsUpdate {
	if s != nil {
		lu.SetBrowser(*s)
	}
	return lu
}

// ClearBrowser clears the value of the "browser" field.
func (lu *LogsUpdate) ClearBrowser() *LogsUpdate {
	lu.mutation.ClearBrowser()
	return lu
}

// SetLatitude sets the "latitude" field.
func (lu *LogsUpdate) SetLatitude(f float64) *LogsUpdate {
	lu.mutation.ResetLatitude()
	lu.mutation.SetLatitude(f)
	return lu
}

// SetNillableLatitude sets the "latitude" field if the given value is not nil.
func (lu *LogsUpdate) SetNillableLatitude(f *float64) *LogsUpdate {
	if f != nil {
		lu.SetLatitude(*f)
	}
	return lu
}

// AddLatitude adds f to the "latitude" field.
func (lu *LogsUpdate) AddLatitude(f float64) *LogsUpdate {
	lu.mutation.AddLatitude(f)
	return lu
}

// ClearLatitude clears the value of the "latitude" field.
func (lu *LogsUpdate) ClearLatitude() *LogsUpdate {
	lu.mutation.ClearLatitude()
	return lu
}

// SetLongitude sets the "longitude" field.
func (lu *LogsUpdate) SetLongitude(f float64) *LogsUpdate {
	lu.mutation.ResetLongitude()
	lu.mutation.SetLongitude(f)
	return lu
}

// SetNillableLongitude sets the "longitude" field if the given value is not nil.
func (lu *LogsUpdate) SetNillableLongitude(f *float64) *LogsUpdate {
	if f != nil {
		lu.SetLongitude(*f)
	}
	return lu
}

// AddLongitude adds f to the "longitude" field.
func (lu *LogsUpdate) AddLongitude(f float64) *LogsUpdate {
	lu.mutation.AddLongitude(f)
	return lu
}

// ClearLongitude clears the value of the "longitude" field.
func (lu *LogsUpdate) ClearLongitude() *LogsUpdate {
	lu.mutation.ClearLongitude()
	return lu
}

// SetEventtime sets the "eventtime" field.
func (lu *LogsUpdate) SetEventtime(t time.Time) *LogsUpdate {
	lu.mutation.SetEventtime(t)
	return lu
}

// SetNillableEventtime sets the "eventtime" field if the given value is not nil.
func (lu *LogsUpdate) SetNillableEventtime(t *time.Time) *LogsUpdate {
	if t != nil {
		lu.SetEventtime(*t)
	}
	return lu
}

// Mutation returns the LogsMutation object of the builder.
func (lu *LogsUpdate) Mutation() *LogsMutation {
	return lu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (lu *LogsUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, lu.sqlSave, lu.mutation, lu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (lu *LogsUpdate) SaveX(ctx context.Context) int {
	affected, err := lu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (lu *LogsUpdate) Exec(ctx context.Context) error {
	_, err := lu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lu *LogsUpdate) ExecX(ctx context.Context) {
	if err := lu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (lu *LogsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(logs.Table, logs.Columns, sqlgraph.NewFieldSpec(logs.FieldID, field.TypeInt64))
	if ps := lu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := lu.mutation.Userid(); ok {
		_spec.SetField(logs.FieldUserid, field.TypeString, value)
	}
	if lu.mutation.UseridCleared() {
		_spec.ClearField(logs.FieldUserid, field.TypeString)
	}
	if value, ok := lu.mutation.Uniqueid(); ok {
		_spec.SetField(logs.FieldUniqueid, field.TypeInt64, value)
	}
	if value, ok := lu.mutation.AddedUniqueid(); ok {
		_spec.AddField(logs.FieldUniqueid, field.TypeInt64, value)
	}
	if lu.mutation.UniqueidCleared() {
		_spec.ClearField(logs.FieldUniqueid, field.TypeInt64)
	}
	if value, ok := lu.mutation.Usertype(); ok {
		_spec.SetField(logs.FieldUsertype, field.TypeString, value)
	}
	if lu.mutation.UsertypeCleared() {
		_spec.ClearField(logs.FieldUsertype, field.TypeString)
	}
	if value, ok := lu.mutation.Userdetails(); ok {
		_spec.SetField(logs.FieldUserdetails, field.TypeString, value)
	}
	if lu.mutation.UserdetailsCleared() {
		_spec.ClearField(logs.FieldUserdetails, field.TypeString)
	}
	if value, ok := lu.mutation.Remarks(); ok {
		_spec.SetField(logs.FieldRemarks, field.TypeString, value)
	}
	if lu.mutation.RemarksCleared() {
		_spec.ClearField(logs.FieldRemarks, field.TypeString)
	}
	if value, ok := lu.mutation.Action(); ok {
		_spec.SetField(logs.FieldAction, field.TypeString, value)
	}
	if lu.mutation.ActionCleared() {
		_spec.ClearField(logs.FieldAction, field.TypeString)
	}
	if value, ok := lu.mutation.Ipaddress(); ok {
		_spec.SetField(logs.FieldIpaddress, field.TypeString, value)
	}
	if lu.mutation.IpaddressCleared() {
		_spec.ClearField(logs.FieldIpaddress, field.TypeString)
	}
	if value, ok := lu.mutation.Devicetype(); ok {
		_spec.SetField(logs.FieldDevicetype, field.TypeString, value)
	}
	if lu.mutation.DevicetypeCleared() {
		_spec.ClearField(logs.FieldDevicetype, field.TypeString)
	}
	if value, ok := lu.mutation.Os(); ok {
		_spec.SetField(logs.FieldOs, field.TypeString, value)
	}
	if lu.mutation.OsCleared() {
		_spec.ClearField(logs.FieldOs, field.TypeString)
	}
	if value, ok := lu.mutation.Browser(); ok {
		_spec.SetField(logs.FieldBrowser, field.TypeString, value)
	}
	if lu.mutation.BrowserCleared() {
		_spec.ClearField(logs.FieldBrowser, field.TypeString)
	}
	if value, ok := lu.mutation.Latitude(); ok {
		_spec.SetField(logs.FieldLatitude, field.TypeFloat64, value)
	}
	if value, ok := lu.mutation.AddedLatitude(); ok {
		_spec.AddField(logs.FieldLatitude, field.TypeFloat64, value)
	}
	if lu.mutation.LatitudeCleared() {
		_spec.ClearField(logs.FieldLatitude, field.TypeFloat64)
	}
	if value, ok := lu.mutation.Longitude(); ok {
		_spec.SetField(logs.FieldLongitude, field.TypeFloat64, value)
	}
	if value, ok := lu.mutation.AddedLongitude(); ok {
		_spec.AddField(logs.FieldLongitude, field.TypeFloat64, value)
	}
	if lu.mutation.LongitudeCleared() {
		_spec.ClearField(logs.FieldLongitude, field.TypeFloat64)
	}
	if value, ok := lu.mutation.Eventtime(); ok {
		_spec.SetField(logs.FieldEventtime, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, lu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{logs.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	lu.mutation.done = true
	return n, nil
}

// LogsUpdateOne is the builder for updating a single Logs entity.
type LogsUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *LogsMutation
}

// SetUserid sets the "userid" field.
func (luo *LogsUpdateOne) SetUserid(s string) *LogsUpdateOne {
	luo.mutation.SetUserid(s)
	return luo
}

// SetNillableUserid sets the "userid" field if the given value is not nil.
func (luo *LogsUpdateOne) SetNillableUserid(s *string) *LogsUpdateOne {
	if s != nil {
		luo.SetUserid(*s)
	}
	return luo
}

// ClearUserid clears the value of the "userid" field.
func (luo *LogsUpdateOne) ClearUserid() *LogsUpdateOne {
	luo.mutation.ClearUserid()
	return luo
}

// SetUniqueid sets the "uniqueid" field.
func (luo *LogsUpdateOne) SetUniqueid(i int64) *LogsUpdateOne {
	luo.mutation.ResetUniqueid()
	luo.mutation.SetUniqueid(i)
	return luo
}

// SetNillableUniqueid sets the "uniqueid" field if the given value is not nil.
func (luo *LogsUpdateOne) SetNillableUniqueid(i *int64) *LogsUpdateOne {
	if i != nil {
		luo.SetUniqueid(*i)
	}
	return luo
}

// AddUniqueid adds i to the "uniqueid" field.
func (luo *LogsUpdateOne) AddUniqueid(i int64) *LogsUpdateOne {
	luo.mutation.AddUniqueid(i)
	return luo
}

// ClearUniqueid clears the value of the "uniqueid" field.
func (luo *LogsUpdateOne) ClearUniqueid() *LogsUpdateOne {
	luo.mutation.ClearUniqueid()
	return luo
}

// SetUsertype sets the "usertype" field.
func (luo *LogsUpdateOne) SetUsertype(s string) *LogsUpdateOne {
	luo.mutation.SetUsertype(s)
	return luo
}

// SetNillableUsertype sets the "usertype" field if the given value is not nil.
func (luo *LogsUpdateOne) SetNillableUsertype(s *string) *LogsUpdateOne {
	if s != nil {
		luo.SetUsertype(*s)
	}
	return luo
}

// ClearUsertype clears the value of the "usertype" field.
func (luo *LogsUpdateOne) ClearUsertype() *LogsUpdateOne {
	luo.mutation.ClearUsertype()
	return luo
}

// SetUserdetails sets the "userdetails" field.
func (luo *LogsUpdateOne) SetUserdetails(s string) *LogsUpdateOne {
	luo.mutation.SetUserdetails(s)
	return luo
}

// SetNillableUserdetails sets the "userdetails" field if the given value is not nil.
func (luo *LogsUpdateOne) SetNillableUserdetails(s *string) *LogsUpdateOne {
	if s != nil {
		luo.SetUserdetails(*s)
	}
	return luo
}

// ClearUserdetails clears the value of the "userdetails" field.
func (luo *LogsUpdateOne) ClearUserdetails() *LogsUpdateOne {
	luo.mutation.ClearUserdetails()
	return luo
}

// SetRemarks sets the "remarks" field.
func (luo *LogsUpdateOne) SetRemarks(s string) *LogsUpdateOne {
	luo.mutation.SetRemarks(s)
	return luo
}

// SetNillableRemarks sets the "remarks" field if the given value is not nil.
func (luo *LogsUpdateOne) SetNillableRemarks(s *string) *LogsUpdateOne {
	if s != nil {
		luo.SetRemarks(*s)
	}
	return luo
}

// ClearRemarks clears the value of the "remarks" field.
func (luo *LogsUpdateOne) ClearRemarks() *LogsUpdateOne {
	luo.mutation.ClearRemarks()
	return luo
}

// SetAction sets the "action" field.
func (luo *LogsUpdateOne) SetAction(s string) *LogsUpdateOne {
	luo.mutation.SetAction(s)
	return luo
}

// SetNillableAction sets the "action" field if the given value is not nil.
func (luo *LogsUpdateOne) SetNillableAction(s *string) *LogsUpdateOne {
	if s != nil {
		luo.SetAction(*s)
	}
	return luo
}

// ClearAction clears the value of the "action" field.
func (luo *LogsUpdateOne) ClearAction() *LogsUpdateOne {
	luo.mutation.ClearAction()
	return luo
}

// SetIpaddress sets the "ipaddress" field.
func (luo *LogsUpdateOne) SetIpaddress(s string) *LogsUpdateOne {
	luo.mutation.SetIpaddress(s)
	return luo
}

// SetNillableIpaddress sets the "ipaddress" field if the given value is not nil.
func (luo *LogsUpdateOne) SetNillableIpaddress(s *string) *LogsUpdateOne {
	if s != nil {
		luo.SetIpaddress(*s)
	}
	return luo
}

// ClearIpaddress clears the value of the "ipaddress" field.
func (luo *LogsUpdateOne) ClearIpaddress() *LogsUpdateOne {
	luo.mutation.ClearIpaddress()
	return luo
}

// SetDevicetype sets the "devicetype" field.
func (luo *LogsUpdateOne) SetDevicetype(s string) *LogsUpdateOne {
	luo.mutation.SetDevicetype(s)
	return luo
}

// SetNillableDevicetype sets the "devicetype" field if the given value is not nil.
func (luo *LogsUpdateOne) SetNillableDevicetype(s *string) *LogsUpdateOne {
	if s != nil {
		luo.SetDevicetype(*s)
	}
	return luo
}

// ClearDevicetype clears the value of the "devicetype" field.
func (luo *LogsUpdateOne) ClearDevicetype() *LogsUpdateOne {
	luo.mutation.ClearDevicetype()
	return luo
}

// SetOs sets the "os" field.
func (luo *LogsUpdateOne) SetOs(s string) *LogsUpdateOne {
	luo.mutation.SetOs(s)
	return luo
}

// SetNillableOs sets the "os" field if the given value is not nil.
func (luo *LogsUpdateOne) SetNillableOs(s *string) *LogsUpdateOne {
	if s != nil {
		luo.SetOs(*s)
	}
	return luo
}

// ClearOs clears the value of the "os" field.
func (luo *LogsUpdateOne) ClearOs() *LogsUpdateOne {
	luo.mutation.ClearOs()
	return luo
}

// SetBrowser sets the "browser" field.
func (luo *LogsUpdateOne) SetBrowser(s string) *LogsUpdateOne {
	luo.mutation.SetBrowser(s)
	return luo
}

// SetNillableBrowser sets the "browser" field if the given value is not nil.
func (luo *LogsUpdateOne) SetNillableBrowser(s *string) *LogsUpdateOne {
	if s != nil {
		luo.SetBrowser(*s)
	}
	return luo
}

// ClearBrowser clears the value of the "browser" field.
func (luo *LogsUpdateOne) ClearBrowser() *LogsUpdateOne {
	luo.mutation.ClearBrowser()
	return luo
}

// SetLatitude sets the "latitude" field.
func (luo *LogsUpdateOne) SetLatitude(f float64) *LogsUpdateOne {
	luo.mutation.ResetLatitude()
	luo.mutation.SetLatitude(f)
	return luo
}

// SetNillableLatitude sets the "latitude" field if the given value is not nil.
func (luo *LogsUpdateOne) SetNillableLatitude(f *float64) *LogsUpdateOne {
	if f != nil {
		luo.SetLatitude(*f)
	}
	return luo
}

// AddLatitude adds f to the "latitude" field.
func (luo *LogsUpdateOne) AddLatitude(f float64) *LogsUpdateOne {
	luo.mutation.AddLatitude(f)
	return luo
}

// ClearLatitude clears the value of the "latitude" field.
func (luo *LogsUpdateOne) ClearLatitude() *LogsUpdateOne {
	luo.mutation.ClearLatitude()
	return luo
}

// SetLongitude sets the "longitude" field.
func (luo *LogsUpdateOne) SetLongitude(f float64) *LogsUpdateOne {
	luo.mutation.ResetLongitude()
	luo.mutation.SetLongitude(f)
	return luo
}

// SetNillableLongitude sets the "longitude" field if the given value is not nil.
func (luo *LogsUpdateOne) SetNillableLongitude(f *float64) *LogsUpdateOne {
	if f != nil {
		luo.SetLongitude(*f)
	}
	return luo
}

// AddLongitude adds f to the "longitude" field.
func (luo *LogsUpdateOne) AddLongitude(f float64) *LogsUpdateOne {
	luo.mutation.AddLongitude(f)
	return luo
}

// ClearLongitude clears the value of the "longitude" field.
func (luo *LogsUpdateOne) ClearLongitude() *LogsUpdateOne {
	luo.mutation.ClearLongitude()
	return luo
}

// SetEventtime sets the "eventtime" field.
func (luo *LogsUpdateOne) SetEventtime(t time.Time) *LogsUpdateOne {
	luo.mutation.SetEventtime(t)
	return luo
}

// SetNillableEventtime sets the "eventtime" field if the given value is not nil.
func (luo *LogsUpdateOne) SetNillableEventtime(t *time.Time) *LogsUpdateOne {
	if t != nil {
		luo.SetEventtime(*t)
	}
	return luo
}

// Mutation returns the LogsMutation object of the builder.
func (luo *LogsUpdateOne) Mutation() *LogsMutation {
	return luo.mutation
}

// Where appends a list predicates to the LogsUpdate builder.
func (luo *LogsUpdateOne) Where(ps ...predicate.Logs) *LogsUpdateOne {
	luo.mutation.Where(ps...)
	return luo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (luo *LogsUpdateOne) Select(field string, fields ...string) *LogsUpdateOne {
	luo.fields = append([]string{field}, fields...)
	return luo
}

// Save executes the query and returns the updated Logs entity.
func (luo *LogsUpdateOne) Save(ctx context.Context) (*Logs, error) {
	return withHooks(ctx, luo.sqlSave, luo.mutation, luo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (luo *LogsUpdateOne) SaveX(ctx context.Context) *Logs {
	node, err := luo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (luo *LogsUpdateOne) Exec(ctx context.Context) error {
	_, err := luo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (luo *LogsUpdateOne) ExecX(ctx context.Context) {
	if err := luo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (luo *LogsUpdateOne) sqlSave(ctx context.Context) (_node *Logs, err error) {
	_spec := sqlgraph.NewUpdateSpec(logs.Table, logs.Columns, sqlgraph.NewFieldSpec(logs.FieldID, field.TypeInt64))
	id, ok := luo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Logs.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := luo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, logs.FieldID)
		for _, f := range fields {
			if !logs.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != logs.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := luo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := luo.mutation.Userid(); ok {
		_spec.SetField(logs.FieldUserid, field.TypeString, value)
	}
	if luo.mutation.UseridCleared() {
		_spec.ClearField(logs.FieldUserid, field.TypeString)
	}
	if value, ok := luo.mutation.Uniqueid(); ok {
		_spec.SetField(logs.FieldUniqueid, field.TypeInt64, value)
	}
	if value, ok := luo.mutation.AddedUniqueid(); ok {
		_spec.AddField(logs.FieldUniqueid, field.TypeInt64, value)
	}
	if luo.mutation.UniqueidCleared() {
		_spec.ClearField(logs.FieldUniqueid, field.TypeInt64)
	}
	if value, ok := luo.mutation.Usertype(); ok {
		_spec.SetField(logs.FieldUsertype, field.TypeString, value)
	}
	if luo.mutation.UsertypeCleared() {
		_spec.ClearField(logs.FieldUsertype, field.TypeString)
	}
	if value, ok := luo.mutation.Userdetails(); ok {
		_spec.SetField(logs.FieldUserdetails, field.TypeString, value)
	}
	if luo.mutation.UserdetailsCleared() {
		_spec.ClearField(logs.FieldUserdetails, field.TypeString)
	}
	if value, ok := luo.mutation.Remarks(); ok {
		_spec.SetField(logs.FieldRemarks, field.TypeString, value)
	}
	if luo.mutation.RemarksCleared() {
		_spec.ClearField(logs.FieldRemarks, field.TypeString)
	}
	if value, ok := luo.mutation.Action(); ok {
		_spec.SetField(logs.FieldAction, field.TypeString, value)
	}
	if luo.mutation.ActionCleared() {
		_spec.ClearField(logs.FieldAction, field.TypeString)
	}
	if value, ok := luo.mutation.Ipaddress(); ok {
		_spec.SetField(logs.FieldIpaddress, field.TypeString, value)
	}
	if luo.mutation.IpaddressCleared() {
		_spec.ClearField(logs.FieldIpaddress, field.TypeString)
	}
	if value, ok := luo.mutation.Devicetype(); ok {
		_spec.SetField(logs.FieldDevicetype, field.TypeString, value)
	}
	if luo.mutation.DevicetypeCleared() {
		_spec.ClearField(logs.FieldDevicetype, field.TypeString)
	}
	if value, ok := luo.mutation.Os(); ok {
		_spec.SetField(logs.FieldOs, field.TypeString, value)
	}
	if luo.mutation.OsCleared() {
		_spec.ClearField(logs.FieldOs, field.TypeString)
	}
	if value, ok := luo.mutation.Browser(); ok {
		_spec.SetField(logs.FieldBrowser, field.TypeString, value)
	}
	if luo.mutation.BrowserCleared() {
		_spec.ClearField(logs.FieldBrowser, field.TypeString)
	}
	if value, ok := luo.mutation.Latitude(); ok {
		_spec.SetField(logs.FieldLatitude, field.TypeFloat64, value)
	}
	if value, ok := luo.mutation.AddedLatitude(); ok {
		_spec.AddField(logs.FieldLatitude, field.TypeFloat64, value)
	}
	if luo.mutation.LatitudeCleared() {
		_spec.ClearField(logs.FieldLatitude, field.TypeFloat64)
	}
	if value, ok := luo.mutation.Longitude(); ok {
		_spec.SetField(logs.FieldLongitude, field.TypeFloat64, value)
	}
	if value, ok := luo.mutation.AddedLongitude(); ok {
		_spec.AddField(logs.FieldLongitude, field.TypeFloat64, value)
	}
	if luo.mutation.LongitudeCleared() {
		_spec.ClearField(logs.FieldLongitude, field.TypeFloat64)
	}
	if value, ok := luo.mutation.Eventtime(); ok {
		_spec.SetField(logs.FieldEventtime, field.TypeTime, value)
	}
	_node = &Logs{config: luo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, luo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{logs.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	luo.mutation.done = true
	return _node, nil
}
