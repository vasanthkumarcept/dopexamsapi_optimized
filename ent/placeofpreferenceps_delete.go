// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"recruit/ent/placeofpreferenceps"
	"recruit/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PlaceOfPreferencePSDelete is the builder for deleting a PlaceOfPreferencePS entity.
type PlaceOfPreferencePSDelete struct {
	config
	hooks    []Hook
	mutation *PlaceOfPreferencePSMutation
}

// Where appends a list predicates to the PlaceOfPreferencePSDelete builder.
func (poppd *PlaceOfPreferencePSDelete) Where(ps ...predicate.PlaceOfPreferencePS) *PlaceOfPreferencePSDelete {
	poppd.mutation.Where(ps...)
	return poppd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (poppd *PlaceOfPreferencePSDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, poppd.sqlExec, poppd.mutation, poppd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (poppd *PlaceOfPreferencePSDelete) ExecX(ctx context.Context) int {
	n, err := poppd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (poppd *PlaceOfPreferencePSDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(placeofpreferenceps.Table, sqlgraph.NewFieldSpec(placeofpreferenceps.FieldID, field.TypeInt32))
	if ps := poppd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, poppd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	poppd.mutation.done = true
	return affected, err
}

// PlaceOfPreferencePSDeleteOne is the builder for deleting a single PlaceOfPreferencePS entity.
type PlaceOfPreferencePSDeleteOne struct {
	poppd *PlaceOfPreferencePSDelete
}

// Where appends a list predicates to the PlaceOfPreferencePSDelete builder.
func (poppdo *PlaceOfPreferencePSDeleteOne) Where(ps ...predicate.PlaceOfPreferencePS) *PlaceOfPreferencePSDeleteOne {
	poppdo.poppd.mutation.Where(ps...)
	return poppdo
}

// Exec executes the deletion query.
func (poppdo *PlaceOfPreferencePSDeleteOne) Exec(ctx context.Context) error {
	n, err := poppdo.poppd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{placeofpreferenceps.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (poppdo *PlaceOfPreferencePSDeleteOne) ExecX(ctx context.Context) {
	if err := poppdo.Exec(ctx); err != nil {
		panic(err)
	}
}
