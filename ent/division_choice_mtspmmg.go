// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"recruit/ent/division_choice_mtspmmg"
	"recruit/ent/exam_application_mtspmmg"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Division_Choice_MTSPMMG is the model entity for the Division_Choice_MTSPMMG schema.
type Division_Choice_MTSPMMG struct {
	config `json:"-"`
	// ID of the ent.
	ID int32 `json:"id,omitempty"`
	// ApplicationID holds the value of the "ApplicationID" field.
	ApplicationID int64 `json:"ApplicationID,omitempty"`
	// Group holds the value of the "Group" field.
	Group string `json:"Group,omitempty"`
	// CadrePrefNo holds the value of the "CadrePrefNo" field.
	CadrePrefNo int64 `json:"CadrePrefNo,omitempty"`
	// Cadre holds the value of the "Cadre" field.
	Cadre string `json:"Cadre,omitempty"`
	// PlacePrefNo holds the value of the "PlacePrefNo" field.
	PlacePrefNo int64 `json:"PlacePrefNo,omitempty"`
	// PlacePrefValue holds the value of the "PlacePrefValue" field.
	PlacePrefValue string `json:"PlacePrefValue,omitempty"`
	// PostPrefNo holds the value of the "PostPrefNo" field.
	PostPrefNo int64 `json:"PostPrefNo,omitempty"`
	// PostingPrefValue holds the value of the "PostingPrefValue" field.
	PostingPrefValue string `json:"PostingPrefValue,omitempty"`
	// EmployeeID holds the value of the "EmployeeID" field.
	EmployeeID int64 `json:"EmployeeID,omitempty"`
	// UpdatedAt holds the value of the "UpdatedAt" field.
	UpdatedAt time.Time `json:"UpdatedAt,omitempty"`
	// UpdatedBy holds the value of the "UpdatedBy" field.
	UpdatedBy string `json:"UpdatedBy,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the Division_Choice_MTSPMMGQuery when eager-loading is set.
	Edges        Division_Choice_MTSPMMGEdges `json:"edges"`
	selectValues sql.SelectValues
}

// Division_Choice_MTSPMMGEdges holds the relations/edges for other nodes in the graph.
type Division_Choice_MTSPMMGEdges struct {
	// ApplnMTSPMMGRef holds the value of the ApplnMTSPMMG_Ref edge.
	ApplnMTSPMMGRef *Exam_Application_MTSPMMG `json:"ApplnMTSPMMG_Ref,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ApplnMTSPMMGRefOrErr returns the ApplnMTSPMMGRef value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e Division_Choice_MTSPMMGEdges) ApplnMTSPMMGRefOrErr() (*Exam_Application_MTSPMMG, error) {
	if e.loadedTypes[0] {
		if e.ApplnMTSPMMGRef == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: exam_application_mtspmmg.Label}
		}
		return e.ApplnMTSPMMGRef, nil
	}
	return nil, &NotLoadedError{edge: "ApplnMTSPMMG_Ref"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Division_Choice_MTSPMMG) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case division_choice_mtspmmg.FieldID, division_choice_mtspmmg.FieldApplicationID, division_choice_mtspmmg.FieldCadrePrefNo, division_choice_mtspmmg.FieldPlacePrefNo, division_choice_mtspmmg.FieldPostPrefNo, division_choice_mtspmmg.FieldEmployeeID:
			values[i] = new(sql.NullInt64)
		case division_choice_mtspmmg.FieldGroup, division_choice_mtspmmg.FieldCadre, division_choice_mtspmmg.FieldPlacePrefValue, division_choice_mtspmmg.FieldPostingPrefValue, division_choice_mtspmmg.FieldUpdatedBy:
			values[i] = new(sql.NullString)
		case division_choice_mtspmmg.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Division_Choice_MTSPMMG fields.
func (dcm *Division_Choice_MTSPMMG) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case division_choice_mtspmmg.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			dcm.ID = int32(value.Int64)
		case division_choice_mtspmmg.FieldApplicationID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field ApplicationID", values[i])
			} else if value.Valid {
				dcm.ApplicationID = value.Int64
			}
		case division_choice_mtspmmg.FieldGroup:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Group", values[i])
			} else if value.Valid {
				dcm.Group = value.String
			}
		case division_choice_mtspmmg.FieldCadrePrefNo:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field CadrePrefNo", values[i])
			} else if value.Valid {
				dcm.CadrePrefNo = value.Int64
			}
		case division_choice_mtspmmg.FieldCadre:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Cadre", values[i])
			} else if value.Valid {
				dcm.Cadre = value.String
			}
		case division_choice_mtspmmg.FieldPlacePrefNo:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field PlacePrefNo", values[i])
			} else if value.Valid {
				dcm.PlacePrefNo = value.Int64
			}
		case division_choice_mtspmmg.FieldPlacePrefValue:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field PlacePrefValue", values[i])
			} else if value.Valid {
				dcm.PlacePrefValue = value.String
			}
		case division_choice_mtspmmg.FieldPostPrefNo:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field PostPrefNo", values[i])
			} else if value.Valid {
				dcm.PostPrefNo = value.Int64
			}
		case division_choice_mtspmmg.FieldPostingPrefValue:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field PostingPrefValue", values[i])
			} else if value.Valid {
				dcm.PostingPrefValue = value.String
			}
		case division_choice_mtspmmg.FieldEmployeeID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field EmployeeID", values[i])
			} else if value.Valid {
				dcm.EmployeeID = value.Int64
			}
		case division_choice_mtspmmg.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field UpdatedAt", values[i])
			} else if value.Valid {
				dcm.UpdatedAt = value.Time
			}
		case division_choice_mtspmmg.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field UpdatedBy", values[i])
			} else if value.Valid {
				dcm.UpdatedBy = value.String
			}
		default:
			dcm.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Division_Choice_MTSPMMG.
// This includes values selected through modifiers, order, etc.
func (dcm *Division_Choice_MTSPMMG) Value(name string) (ent.Value, error) {
	return dcm.selectValues.Get(name)
}

// QueryApplnMTSPMMGRef queries the "ApplnMTSPMMG_Ref" edge of the Division_Choice_MTSPMMG entity.
func (dcm *Division_Choice_MTSPMMG) QueryApplnMTSPMMGRef() *ExamApplicationMTSPMMGQuery {
	return NewDivisionChoiceMTSPMMGClient(dcm.config).QueryApplnMTSPMMGRef(dcm)
}

// Update returns a builder for updating this Division_Choice_MTSPMMG.
// Note that you need to call Division_Choice_MTSPMMG.Unwrap() before calling this method if this Division_Choice_MTSPMMG
// was returned from a transaction, and the transaction was committed or rolled back.
func (dcm *Division_Choice_MTSPMMG) Update() *DivisionChoiceMTSPMMGUpdateOne {
	return NewDivisionChoiceMTSPMMGClient(dcm.config).UpdateOne(dcm)
}

// Unwrap unwraps the Division_Choice_MTSPMMG entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (dcm *Division_Choice_MTSPMMG) Unwrap() *Division_Choice_MTSPMMG {
	_tx, ok := dcm.config.driver.(*txDriver)
	if !ok {
		panic("ent: Division_Choice_MTSPMMG is not a transactional entity")
	}
	dcm.config.driver = _tx.drv
	return dcm
}

// String implements the fmt.Stringer.
func (dcm *Division_Choice_MTSPMMG) String() string {
	var builder strings.Builder
	builder.WriteString("Division_Choice_MTSPMMG(")
	builder.WriteString(fmt.Sprintf("id=%v, ", dcm.ID))
	builder.WriteString("ApplicationID=")
	builder.WriteString(fmt.Sprintf("%v", dcm.ApplicationID))
	builder.WriteString(", ")
	builder.WriteString("Group=")
	builder.WriteString(dcm.Group)
	builder.WriteString(", ")
	builder.WriteString("CadrePrefNo=")
	builder.WriteString(fmt.Sprintf("%v", dcm.CadrePrefNo))
	builder.WriteString(", ")
	builder.WriteString("Cadre=")
	builder.WriteString(dcm.Cadre)
	builder.WriteString(", ")
	builder.WriteString("PlacePrefNo=")
	builder.WriteString(fmt.Sprintf("%v", dcm.PlacePrefNo))
	builder.WriteString(", ")
	builder.WriteString("PlacePrefValue=")
	builder.WriteString(dcm.PlacePrefValue)
	builder.WriteString(", ")
	builder.WriteString("PostPrefNo=")
	builder.WriteString(fmt.Sprintf("%v", dcm.PostPrefNo))
	builder.WriteString(", ")
	builder.WriteString("PostingPrefValue=")
	builder.WriteString(dcm.PostingPrefValue)
	builder.WriteString(", ")
	builder.WriteString("EmployeeID=")
	builder.WriteString(fmt.Sprintf("%v", dcm.EmployeeID))
	builder.WriteString(", ")
	builder.WriteString("UpdatedAt=")
	builder.WriteString(dcm.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("UpdatedBy=")
	builder.WriteString(dcm.UpdatedBy)
	builder.WriteByte(')')
	return builder.String()
}

// Division_Choice_MTSPMMGs is a parsable slice of Division_Choice_MTSPMMG.
type Division_Choice_MTSPMMGs []*Division_Choice_MTSPMMG
