// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"recruit/ent/predicate"
	"recruit/ent/smsemaillog"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SmsEmailLogDelete is the builder for deleting a SmsEmailLog entity.
type SmsEmailLogDelete struct {
	config
	hooks    []Hook
	mutation *SmsEmailLogMutation
}

// Where appends a list predicates to the SmsEmailLogDelete builder.
func (seld *SmsEmailLogDelete) Where(ps ...predicate.SmsEmailLog) *SmsEmailLogDelete {
	seld.mutation.Where(ps...)
	return seld
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (seld *SmsEmailLogDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, seld.sqlExec, seld.mutation, seld.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (seld *SmsEmailLogDelete) ExecX(ctx context.Context) int {
	n, err := seld.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (seld *SmsEmailLogDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(smsemaillog.Table, sqlgraph.NewFieldSpec(smsemaillog.FieldID, field.TypeInt64))
	if ps := seld.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, seld.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	seld.mutation.done = true
	return affected, err
}

// SmsEmailLogDeleteOne is the builder for deleting a single SmsEmailLog entity.
type SmsEmailLogDeleteOne struct {
	seld *SmsEmailLogDelete
}

// Where appends a list predicates to the SmsEmailLogDelete builder.
func (seldo *SmsEmailLogDeleteOne) Where(ps ...predicate.SmsEmailLog) *SmsEmailLogDeleteOne {
	seldo.seld.mutation.Where(ps...)
	return seldo
}

// Exec executes the deletion query.
func (seldo *SmsEmailLogDeleteOne) Exec(ctx context.Context) error {
	n, err := seldo.seld.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{smsemaillog.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (seldo *SmsEmailLogDeleteOne) ExecX(ctx context.Context) {
	if err := seldo.Exec(ctx); err != nil {
		panic(err)
	}
}
