// Code generated by entimport, DO NOT EDIT.

package schema

import (
	"entgo.io/ent"
	"entgo.io/ent/dialect/entsql"
	"entgo.io/ent/schema"
	"entgo.io/ent/dialect"
    "entgo.io/ent/schema/edge"
	"entgo.io/ent/schema/field"
)

type Disability struct {
	ent.Schema
}

func (Disability) Fields() []ent.Field {
	return []ent.Field{
		
		field.Int32("id").StorageKey("DisabilityTypeID"),
		
		field.String("DisabilityTypeCode"),
		field.String("DisabilityTypeDescription"),
		field.Int32("DisabilityPercentage"),
		field.Enum("DisabilityFlag").Values("Temporary", "Permanent"),	
	    //field.Int32("PaperCode").Optional()
		//Addtional Field
		field.String("HallCategoryCode").Optional(),
		field.String("OrderNumber").Optional(),
		
		field.Int64("CreatedById").Optional(),
		field.String("CreatedByUserName").Optional(),
		field.String("CreatedByEmployeeId").Optional(),
		field.String("CreatedByDesignation").Optional(),
		field.Time("CreatedDate").SchemaType(map[string]string{
			dialect.Postgres: "timestamp",
		}).Optional(),
		field.Int64("VerifiedById").Optional(),
field.String("VerifiedByUserName").Optional(),
field.String("VerifiedByEmployeeId").Optional(),
field.String("VerifiedByDesignation").Optional(),
field.Time("VerifiedDate").SchemaType(map[string]string{
    dialect.Postgres: "timestamp",
}).Optional(),
field.String("Statuss").Optional(),
field.Int64("DeletedById").Optional(),
field.String("DeletedByUserName").Optional(),
field.String("DeletedByEmployeeId").Optional(),
field.String("DeletedByDesignation").Optional(),
field.Time("DeletedDate").SchemaType(map[string]string{
    dialect.Postgres: "timestamp",
}).Optional(),
		} 
}
func (Disability) Edges() []ent.Edge {
	return []ent.Edge{edge.To("dis_ref", ExamPapers.Type),
	}

}
func (Disability) Annotations() []schema.Annotation {
	return []schema.Annotation{entsql.Annotation{Table: "Disability"}}
}
