// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"
	"recruit/ent/exam_applications_gdspm"
	"recruit/ent/predicate"
	"recruit/ent/recommendationsgdspmapplications"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// RecommendationsGDSPMApplicationsQuery is the builder for querying RecommendationsGDSPMApplications entities.
type RecommendationsGDSPMApplicationsQuery struct {
	config
	ctx          *QueryContext
	order        []recommendationsgdspmapplications.OrderOption
	inters       []Interceptor
	predicates   []predicate.RecommendationsGDSPMApplications
	withApplnRef *ExamApplicationsGDSPMQuery
	withFKs      bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the RecommendationsGDSPMApplicationsQuery builder.
func (rgaq *RecommendationsGDSPMApplicationsQuery) Where(ps ...predicate.RecommendationsGDSPMApplications) *RecommendationsGDSPMApplicationsQuery {
	rgaq.predicates = append(rgaq.predicates, ps...)
	return rgaq
}

// Limit the number of records to be returned by this query.
func (rgaq *RecommendationsGDSPMApplicationsQuery) Limit(limit int) *RecommendationsGDSPMApplicationsQuery {
	rgaq.ctx.Limit = &limit
	return rgaq
}

// Offset to start from.
func (rgaq *RecommendationsGDSPMApplicationsQuery) Offset(offset int) *RecommendationsGDSPMApplicationsQuery {
	rgaq.ctx.Offset = &offset
	return rgaq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (rgaq *RecommendationsGDSPMApplicationsQuery) Unique(unique bool) *RecommendationsGDSPMApplicationsQuery {
	rgaq.ctx.Unique = &unique
	return rgaq
}

// Order specifies how the records should be ordered.
func (rgaq *RecommendationsGDSPMApplicationsQuery) Order(o ...recommendationsgdspmapplications.OrderOption) *RecommendationsGDSPMApplicationsQuery {
	rgaq.order = append(rgaq.order, o...)
	return rgaq
}

// QueryApplnRef chains the current query on the "ApplnRef" edge.
func (rgaq *RecommendationsGDSPMApplicationsQuery) QueryApplnRef() *ExamApplicationsGDSPMQuery {
	query := (&ExamApplicationsGDSPMClient{config: rgaq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := rgaq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := rgaq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(recommendationsgdspmapplications.Table, recommendationsgdspmapplications.FieldID, selector),
			sqlgraph.To(exam_applications_gdspm.Table, exam_applications_gdspm.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, recommendationsgdspmapplications.ApplnRefTable, recommendationsgdspmapplications.ApplnRefColumn),
		)
		fromU = sqlgraph.SetNeighbors(rgaq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first RecommendationsGDSPMApplications entity from the query.
// Returns a *NotFoundError when no RecommendationsGDSPMApplications was found.
func (rgaq *RecommendationsGDSPMApplicationsQuery) First(ctx context.Context) (*RecommendationsGDSPMApplications, error) {
	nodes, err := rgaq.Limit(1).All(setContextOp(ctx, rgaq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{recommendationsgdspmapplications.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (rgaq *RecommendationsGDSPMApplicationsQuery) FirstX(ctx context.Context) *RecommendationsGDSPMApplications {
	node, err := rgaq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first RecommendationsGDSPMApplications ID from the query.
// Returns a *NotFoundError when no RecommendationsGDSPMApplications ID was found.
func (rgaq *RecommendationsGDSPMApplicationsQuery) FirstID(ctx context.Context) (id int64, err error) {
	var ids []int64
	if ids, err = rgaq.Limit(1).IDs(setContextOp(ctx, rgaq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{recommendationsgdspmapplications.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (rgaq *RecommendationsGDSPMApplicationsQuery) FirstIDX(ctx context.Context) int64 {
	id, err := rgaq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single RecommendationsGDSPMApplications entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one RecommendationsGDSPMApplications entity is found.
// Returns a *NotFoundError when no RecommendationsGDSPMApplications entities are found.
func (rgaq *RecommendationsGDSPMApplicationsQuery) Only(ctx context.Context) (*RecommendationsGDSPMApplications, error) {
	nodes, err := rgaq.Limit(2).All(setContextOp(ctx, rgaq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{recommendationsgdspmapplications.Label}
	default:
		return nil, &NotSingularError{recommendationsgdspmapplications.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (rgaq *RecommendationsGDSPMApplicationsQuery) OnlyX(ctx context.Context) *RecommendationsGDSPMApplications {
	node, err := rgaq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only RecommendationsGDSPMApplications ID in the query.
// Returns a *NotSingularError when more than one RecommendationsGDSPMApplications ID is found.
// Returns a *NotFoundError when no entities are found.
func (rgaq *RecommendationsGDSPMApplicationsQuery) OnlyID(ctx context.Context) (id int64, err error) {
	var ids []int64
	if ids, err = rgaq.Limit(2).IDs(setContextOp(ctx, rgaq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{recommendationsgdspmapplications.Label}
	default:
		err = &NotSingularError{recommendationsgdspmapplications.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (rgaq *RecommendationsGDSPMApplicationsQuery) OnlyIDX(ctx context.Context) int64 {
	id, err := rgaq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of RecommendationsGDSPMApplicationsSlice.
func (rgaq *RecommendationsGDSPMApplicationsQuery) All(ctx context.Context) ([]*RecommendationsGDSPMApplications, error) {
	ctx = setContextOp(ctx, rgaq.ctx, "All")
	if err := rgaq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*RecommendationsGDSPMApplications, *RecommendationsGDSPMApplicationsQuery]()
	return withInterceptors[[]*RecommendationsGDSPMApplications](ctx, rgaq, qr, rgaq.inters)
}

// AllX is like All, but panics if an error occurs.
func (rgaq *RecommendationsGDSPMApplicationsQuery) AllX(ctx context.Context) []*RecommendationsGDSPMApplications {
	nodes, err := rgaq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of RecommendationsGDSPMApplications IDs.
func (rgaq *RecommendationsGDSPMApplicationsQuery) IDs(ctx context.Context) (ids []int64, err error) {
	if rgaq.ctx.Unique == nil && rgaq.path != nil {
		rgaq.Unique(true)
	}
	ctx = setContextOp(ctx, rgaq.ctx, "IDs")
	if err = rgaq.Select(recommendationsgdspmapplications.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (rgaq *RecommendationsGDSPMApplicationsQuery) IDsX(ctx context.Context) []int64 {
	ids, err := rgaq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (rgaq *RecommendationsGDSPMApplicationsQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, rgaq.ctx, "Count")
	if err := rgaq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, rgaq, querierCount[*RecommendationsGDSPMApplicationsQuery](), rgaq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (rgaq *RecommendationsGDSPMApplicationsQuery) CountX(ctx context.Context) int {
	count, err := rgaq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (rgaq *RecommendationsGDSPMApplicationsQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, rgaq.ctx, "Exist")
	switch _, err := rgaq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (rgaq *RecommendationsGDSPMApplicationsQuery) ExistX(ctx context.Context) bool {
	exist, err := rgaq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the RecommendationsGDSPMApplicationsQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (rgaq *RecommendationsGDSPMApplicationsQuery) Clone() *RecommendationsGDSPMApplicationsQuery {
	if rgaq == nil {
		return nil
	}
	return &RecommendationsGDSPMApplicationsQuery{
		config:       rgaq.config,
		ctx:          rgaq.ctx.Clone(),
		order:        append([]recommendationsgdspmapplications.OrderOption{}, rgaq.order...),
		inters:       append([]Interceptor{}, rgaq.inters...),
		predicates:   append([]predicate.RecommendationsGDSPMApplications{}, rgaq.predicates...),
		withApplnRef: rgaq.withApplnRef.Clone(),
		// clone intermediate query.
		sql:  rgaq.sql.Clone(),
		path: rgaq.path,
	}
}

// WithApplnRef tells the query-builder to eager-load the nodes that are connected to
// the "ApplnRef" edge. The optional arguments are used to configure the query builder of the edge.
func (rgaq *RecommendationsGDSPMApplicationsQuery) WithApplnRef(opts ...func(*ExamApplicationsGDSPMQuery)) *RecommendationsGDSPMApplicationsQuery {
	query := (&ExamApplicationsGDSPMClient{config: rgaq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	rgaq.withApplnRef = query
	return rgaq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		ApplicationID int64 `json:"ApplicationID,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.RecommendationsGDSPMApplications.Query().
//		GroupBy(recommendationsgdspmapplications.FieldApplicationID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (rgaq *RecommendationsGDSPMApplicationsQuery) GroupBy(field string, fields ...string) *RecommendationsGDSPMApplicationsGroupBy {
	rgaq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &RecommendationsGDSPMApplicationsGroupBy{build: rgaq}
	grbuild.flds = &rgaq.ctx.Fields
	grbuild.label = recommendationsgdspmapplications.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		ApplicationID int64 `json:"ApplicationID,omitempty"`
//	}
//
//	client.RecommendationsGDSPMApplications.Query().
//		Select(recommendationsgdspmapplications.FieldApplicationID).
//		Scan(ctx, &v)
func (rgaq *RecommendationsGDSPMApplicationsQuery) Select(fields ...string) *RecommendationsGDSPMApplicationsSelect {
	rgaq.ctx.Fields = append(rgaq.ctx.Fields, fields...)
	sbuild := &RecommendationsGDSPMApplicationsSelect{RecommendationsGDSPMApplicationsQuery: rgaq}
	sbuild.label = recommendationsgdspmapplications.Label
	sbuild.flds, sbuild.scan = &rgaq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a RecommendationsGDSPMApplicationsSelect configured with the given aggregations.
func (rgaq *RecommendationsGDSPMApplicationsQuery) Aggregate(fns ...AggregateFunc) *RecommendationsGDSPMApplicationsSelect {
	return rgaq.Select().Aggregate(fns...)
}

func (rgaq *RecommendationsGDSPMApplicationsQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range rgaq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, rgaq); err != nil {
				return err
			}
		}
	}
	for _, f := range rgaq.ctx.Fields {
		if !recommendationsgdspmapplications.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if rgaq.path != nil {
		prev, err := rgaq.path(ctx)
		if err != nil {
			return err
		}
		rgaq.sql = prev
	}
	return nil
}

func (rgaq *RecommendationsGDSPMApplicationsQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*RecommendationsGDSPMApplications, error) {
	var (
		nodes       = []*RecommendationsGDSPMApplications{}
		withFKs     = rgaq.withFKs
		_spec       = rgaq.querySpec()
		loadedTypes = [1]bool{
			rgaq.withApplnRef != nil,
		}
	)
	if rgaq.withApplnRef != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, recommendationsgdspmapplications.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*RecommendationsGDSPMApplications).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &RecommendationsGDSPMApplications{config: rgaq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, rgaq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := rgaq.withApplnRef; query != nil {
		if err := rgaq.loadApplnRef(ctx, query, nodes, nil,
			func(n *RecommendationsGDSPMApplications, e *Exam_Applications_GDSPM) { n.Edges.ApplnRef = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (rgaq *RecommendationsGDSPMApplicationsQuery) loadApplnRef(ctx context.Context, query *ExamApplicationsGDSPMQuery, nodes []*RecommendationsGDSPMApplications, init func(*RecommendationsGDSPMApplications), assign func(*RecommendationsGDSPMApplications, *Exam_Applications_GDSPM)) error {
	ids := make([]int64, 0, len(nodes))
	nodeids := make(map[int64][]*RecommendationsGDSPMApplications)
	for i := range nodes {
		if nodes[i].exam_applications_gdspm_gdspm_applications_ref == nil {
			continue
		}
		fk := *nodes[i].exam_applications_gdspm_gdspm_applications_ref
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(exam_applications_gdspm.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "exam_applications_gdspm_gdspm_applications_ref" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (rgaq *RecommendationsGDSPMApplicationsQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := rgaq.querySpec()
	_spec.Node.Columns = rgaq.ctx.Fields
	if len(rgaq.ctx.Fields) > 0 {
		_spec.Unique = rgaq.ctx.Unique != nil && *rgaq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, rgaq.driver, _spec)
}

func (rgaq *RecommendationsGDSPMApplicationsQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(recommendationsgdspmapplications.Table, recommendationsgdspmapplications.Columns, sqlgraph.NewFieldSpec(recommendationsgdspmapplications.FieldID, field.TypeInt64))
	_spec.From = rgaq.sql
	if unique := rgaq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if rgaq.path != nil {
		_spec.Unique = true
	}
	if fields := rgaq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, recommendationsgdspmapplications.FieldID)
		for i := range fields {
			if fields[i] != recommendationsgdspmapplications.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := rgaq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := rgaq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := rgaq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := rgaq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (rgaq *RecommendationsGDSPMApplicationsQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(rgaq.driver.Dialect())
	t1 := builder.Table(recommendationsgdspmapplications.Table)
	columns := rgaq.ctx.Fields
	if len(columns) == 0 {
		columns = recommendationsgdspmapplications.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if rgaq.sql != nil {
		selector = rgaq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if rgaq.ctx.Unique != nil && *rgaq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range rgaq.predicates {
		p(selector)
	}
	for _, p := range rgaq.order {
		p(selector)
	}
	if offset := rgaq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := rgaq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// RecommendationsGDSPMApplicationsGroupBy is the group-by builder for RecommendationsGDSPMApplications entities.
type RecommendationsGDSPMApplicationsGroupBy struct {
	selector
	build *RecommendationsGDSPMApplicationsQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (rgagb *RecommendationsGDSPMApplicationsGroupBy) Aggregate(fns ...AggregateFunc) *RecommendationsGDSPMApplicationsGroupBy {
	rgagb.fns = append(rgagb.fns, fns...)
	return rgagb
}

// Scan applies the selector query and scans the result into the given value.
func (rgagb *RecommendationsGDSPMApplicationsGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, rgagb.build.ctx, "GroupBy")
	if err := rgagb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*RecommendationsGDSPMApplicationsQuery, *RecommendationsGDSPMApplicationsGroupBy](ctx, rgagb.build, rgagb, rgagb.build.inters, v)
}

func (rgagb *RecommendationsGDSPMApplicationsGroupBy) sqlScan(ctx context.Context, root *RecommendationsGDSPMApplicationsQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(rgagb.fns))
	for _, fn := range rgagb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*rgagb.flds)+len(rgagb.fns))
		for _, f := range *rgagb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*rgagb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := rgagb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// RecommendationsGDSPMApplicationsSelect is the builder for selecting fields of RecommendationsGDSPMApplications entities.
type RecommendationsGDSPMApplicationsSelect struct {
	*RecommendationsGDSPMApplicationsQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (rgas *RecommendationsGDSPMApplicationsSelect) Aggregate(fns ...AggregateFunc) *RecommendationsGDSPMApplicationsSelect {
	rgas.fns = append(rgas.fns, fns...)
	return rgas
}

// Scan applies the selector query and scans the result into the given value.
func (rgas *RecommendationsGDSPMApplicationsSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, rgas.ctx, "Select")
	if err := rgas.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*RecommendationsGDSPMApplicationsQuery, *RecommendationsGDSPMApplicationsSelect](ctx, rgas.RecommendationsGDSPMApplicationsQuery, rgas, rgas.inters, v)
}

func (rgas *RecommendationsGDSPMApplicationsSelect) sqlScan(ctx context.Context, root *RecommendationsGDSPMApplicationsQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(rgas.fns))
	for _, fn := range rgas.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*rgas.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := rgas.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
