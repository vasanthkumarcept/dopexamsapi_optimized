// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"recruit/ent/exampostmapping"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// ExamPostMapping is the model entity for the ExamPostMapping schema.
type ExamPostMapping struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// ExamCode holds the value of the "ExamCode" field.
	ExamCode int64 `json:"ExamCode,omitempty"`
	// ExamShortDescription holds the value of the "ExamShortDescription" field.
	ExamShortDescription string `json:"ExamShortDescription,omitempty"`
	// PostType holds the value of the "PostType" field.
	PostType int `json:"PostType,omitempty"`
	// PostTypeDescription holds the value of the "PostTypeDescription" field.
	PostTypeDescription string `json:"PostTypeDescription,omitempty"`
	// FromPostCode holds the value of the "FromPostCode" field.
	FromPostCode string `json:"FromPostCode,omitempty"`
	// FromPostDescription holds the value of the "FromPostDescription" field.
	FromPostDescription string `json:"FromPostDescription,omitempty"`
	// ToPostCode holds the value of the "ToPostCode" field.
	ToPostCode string `json:"ToPostCode,omitempty"`
	// ToPostDescription holds the value of the "ToPostDescription" field.
	ToPostDescription string `json:"ToPostDescription,omitempty"`
	// AgeCriteria holds the value of the "AgeCriteria" field.
	AgeCriteria int `json:"AgeCriteria,omitempty"`
	// ServiceCriteria holds the value of the "ServiceCriteria" field.
	ServiceCriteria int `json:"ServiceCriteria,omitempty"`
	// EducationCode holds the value of the "EducationCode" field.
	EducationCode int32 `json:"EducationCode,omitempty"`
	// EducationDescription holds the value of the "EducationDescription" field.
	EducationDescription string `json:"EducationDescription,omitempty"`
	// OrderNumber holds the value of the "OrderNumber" field.
	OrderNumber string `json:"OrderNumber,omitempty"`
	// CreatedById holds the value of the "CreatedById" field.
	CreatedById int64 `json:"CreatedById,omitempty"`
	// CreatedByUserName holds the value of the "CreatedByUserName" field.
	CreatedByUserName string `json:"CreatedByUserName,omitempty"`
	// CreatedByEmployeeId holds the value of the "CreatedByEmployeeId" field.
	CreatedByEmployeeId string `json:"CreatedByEmployeeId,omitempty"`
	// CreatedByDesignation holds the value of the "CreatedByDesignation" field.
	CreatedByDesignation string `json:"CreatedByDesignation,omitempty"`
	// CreatedDate holds the value of the "CreatedDate" field.
	CreatedDate string `json:"CreatedDate,omitempty"`
	// VerifiedById holds the value of the "VerifiedById" field.
	VerifiedById int64 `json:"VerifiedById,omitempty"`
	// VerifiedByUserName holds the value of the "VerifiedByUserName" field.
	VerifiedByUserName string `json:"VerifiedByUserName,omitempty"`
	// VerifiedByEmployeeId holds the value of the "VerifiedByEmployeeId" field.
	VerifiedByEmployeeId string `json:"VerifiedByEmployeeId,omitempty"`
	// VerifiedByDesignation holds the value of the "VerifiedByDesignation" field.
	VerifiedByDesignation string `json:"VerifiedByDesignation,omitempty"`
	// VerifiedDate holds the value of the "VerifiedDate" field.
	VerifiedDate string `json:"VerifiedDate,omitempty"`
	// Status holds the value of the "Status" field.
	Status string `json:"Status,omitempty"`
	// DeletedById holds the value of the "DeletedById" field.
	DeletedById int64 `json:"DeletedById,omitempty"`
	// DeletedByUserName holds the value of the "DeletedByUserName" field.
	DeletedByUserName string `json:"DeletedByUserName,omitempty"`
	// DeletedByEmployeeId holds the value of the "DeletedByEmployeeId" field.
	DeletedByEmployeeId string `json:"DeletedByEmployeeId,omitempty"`
	// DeletedByDesignation holds the value of the "DeletedByDesignation" field.
	DeletedByDesignation string `json:"DeletedByDesignation,omitempty"`
	// DeletedDate holds the value of the "DeletedDate" field.
	DeletedDate  string `json:"DeletedDate,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ExamPostMapping) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case exampostmapping.FieldID, exampostmapping.FieldExamCode, exampostmapping.FieldPostType, exampostmapping.FieldAgeCriteria, exampostmapping.FieldServiceCriteria, exampostmapping.FieldEducationCode, exampostmapping.FieldCreatedById, exampostmapping.FieldVerifiedById, exampostmapping.FieldDeletedById:
			values[i] = new(sql.NullInt64)
		case exampostmapping.FieldExamShortDescription, exampostmapping.FieldPostTypeDescription, exampostmapping.FieldFromPostCode, exampostmapping.FieldFromPostDescription, exampostmapping.FieldToPostCode, exampostmapping.FieldToPostDescription, exampostmapping.FieldEducationDescription, exampostmapping.FieldOrderNumber, exampostmapping.FieldCreatedByUserName, exampostmapping.FieldCreatedByEmployeeId, exampostmapping.FieldCreatedByDesignation, exampostmapping.FieldCreatedDate, exampostmapping.FieldVerifiedByUserName, exampostmapping.FieldVerifiedByEmployeeId, exampostmapping.FieldVerifiedByDesignation, exampostmapping.FieldVerifiedDate, exampostmapping.FieldStatus, exampostmapping.FieldDeletedByUserName, exampostmapping.FieldDeletedByEmployeeId, exampostmapping.FieldDeletedByDesignation, exampostmapping.FieldDeletedDate:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ExamPostMapping fields.
func (epm *ExamPostMapping) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case exampostmapping.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			epm.ID = int(value.Int64)
		case exampostmapping.FieldExamCode:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field ExamCode", values[i])
			} else if value.Valid {
				epm.ExamCode = value.Int64
			}
		case exampostmapping.FieldExamShortDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ExamShortDescription", values[i])
			} else if value.Valid {
				epm.ExamShortDescription = value.String
			}
		case exampostmapping.FieldPostType:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field PostType", values[i])
			} else if value.Valid {
				epm.PostType = int(value.Int64)
			}
		case exampostmapping.FieldPostTypeDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field PostTypeDescription", values[i])
			} else if value.Valid {
				epm.PostTypeDescription = value.String
			}
		case exampostmapping.FieldFromPostCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field FromPostCode", values[i])
			} else if value.Valid {
				epm.FromPostCode = value.String
			}
		case exampostmapping.FieldFromPostDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field FromPostDescription", values[i])
			} else if value.Valid {
				epm.FromPostDescription = value.String
			}
		case exampostmapping.FieldToPostCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ToPostCode", values[i])
			} else if value.Valid {
				epm.ToPostCode = value.String
			}
		case exampostmapping.FieldToPostDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ToPostDescription", values[i])
			} else if value.Valid {
				epm.ToPostDescription = value.String
			}
		case exampostmapping.FieldAgeCriteria:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field AgeCriteria", values[i])
			} else if value.Valid {
				epm.AgeCriteria = int(value.Int64)
			}
		case exampostmapping.FieldServiceCriteria:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field ServiceCriteria", values[i])
			} else if value.Valid {
				epm.ServiceCriteria = int(value.Int64)
			}
		case exampostmapping.FieldEducationCode:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field EducationCode", values[i])
			} else if value.Valid {
				epm.EducationCode = int32(value.Int64)
			}
		case exampostmapping.FieldEducationDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field EducationDescription", values[i])
			} else if value.Valid {
				epm.EducationDescription = value.String
			}
		case exampostmapping.FieldOrderNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field OrderNumber", values[i])
			} else if value.Valid {
				epm.OrderNumber = value.String
			}
		case exampostmapping.FieldCreatedById:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field CreatedById", values[i])
			} else if value.Valid {
				epm.CreatedById = value.Int64
			}
		case exampostmapping.FieldCreatedByUserName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field CreatedByUserName", values[i])
			} else if value.Valid {
				epm.CreatedByUserName = value.String
			}
		case exampostmapping.FieldCreatedByEmployeeId:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field CreatedByEmployeeId", values[i])
			} else if value.Valid {
				epm.CreatedByEmployeeId = value.String
			}
		case exampostmapping.FieldCreatedByDesignation:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field CreatedByDesignation", values[i])
			} else if value.Valid {
				epm.CreatedByDesignation = value.String
			}
		case exampostmapping.FieldCreatedDate:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field CreatedDate", values[i])
			} else if value.Valid {
				epm.CreatedDate = value.String
			}
		case exampostmapping.FieldVerifiedById:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field VerifiedById", values[i])
			} else if value.Valid {
				epm.VerifiedById = value.Int64
			}
		case exampostmapping.FieldVerifiedByUserName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field VerifiedByUserName", values[i])
			} else if value.Valid {
				epm.VerifiedByUserName = value.String
			}
		case exampostmapping.FieldVerifiedByEmployeeId:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field VerifiedByEmployeeId", values[i])
			} else if value.Valid {
				epm.VerifiedByEmployeeId = value.String
			}
		case exampostmapping.FieldVerifiedByDesignation:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field VerifiedByDesignation", values[i])
			} else if value.Valid {
				epm.VerifiedByDesignation = value.String
			}
		case exampostmapping.FieldVerifiedDate:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field VerifiedDate", values[i])
			} else if value.Valid {
				epm.VerifiedDate = value.String
			}
		case exampostmapping.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Status", values[i])
			} else if value.Valid {
				epm.Status = value.String
			}
		case exampostmapping.FieldDeletedById:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field DeletedById", values[i])
			} else if value.Valid {
				epm.DeletedById = value.Int64
			}
		case exampostmapping.FieldDeletedByUserName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field DeletedByUserName", values[i])
			} else if value.Valid {
				epm.DeletedByUserName = value.String
			}
		case exampostmapping.FieldDeletedByEmployeeId:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field DeletedByEmployeeId", values[i])
			} else if value.Valid {
				epm.DeletedByEmployeeId = value.String
			}
		case exampostmapping.FieldDeletedByDesignation:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field DeletedByDesignation", values[i])
			} else if value.Valid {
				epm.DeletedByDesignation = value.String
			}
		case exampostmapping.FieldDeletedDate:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field DeletedDate", values[i])
			} else if value.Valid {
				epm.DeletedDate = value.String
			}
		default:
			epm.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ExamPostMapping.
// This includes values selected through modifiers, order, etc.
func (epm *ExamPostMapping) Value(name string) (ent.Value, error) {
	return epm.selectValues.Get(name)
}

// Update returns a builder for updating this ExamPostMapping.
// Note that you need to call ExamPostMapping.Unwrap() before calling this method if this ExamPostMapping
// was returned from a transaction, and the transaction was committed or rolled back.
func (epm *ExamPostMapping) Update() *ExamPostMappingUpdateOne {
	return NewExamPostMappingClient(epm.config).UpdateOne(epm)
}

// Unwrap unwraps the ExamPostMapping entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (epm *ExamPostMapping) Unwrap() *ExamPostMapping {
	_tx, ok := epm.config.driver.(*txDriver)
	if !ok {
		panic("ent: ExamPostMapping is not a transactional entity")
	}
	epm.config.driver = _tx.drv
	return epm
}

// String implements the fmt.Stringer.
func (epm *ExamPostMapping) String() string {
	var builder strings.Builder
	builder.WriteString("ExamPostMapping(")
	builder.WriteString(fmt.Sprintf("id=%v, ", epm.ID))
	builder.WriteString("ExamCode=")
	builder.WriteString(fmt.Sprintf("%v", epm.ExamCode))
	builder.WriteString(", ")
	builder.WriteString("ExamShortDescription=")
	builder.WriteString(epm.ExamShortDescription)
	builder.WriteString(", ")
	builder.WriteString("PostType=")
	builder.WriteString(fmt.Sprintf("%v", epm.PostType))
	builder.WriteString(", ")
	builder.WriteString("PostTypeDescription=")
	builder.WriteString(epm.PostTypeDescription)
	builder.WriteString(", ")
	builder.WriteString("FromPostCode=")
	builder.WriteString(epm.FromPostCode)
	builder.WriteString(", ")
	builder.WriteString("FromPostDescription=")
	builder.WriteString(epm.FromPostDescription)
	builder.WriteString(", ")
	builder.WriteString("ToPostCode=")
	builder.WriteString(epm.ToPostCode)
	builder.WriteString(", ")
	builder.WriteString("ToPostDescription=")
	builder.WriteString(epm.ToPostDescription)
	builder.WriteString(", ")
	builder.WriteString("AgeCriteria=")
	builder.WriteString(fmt.Sprintf("%v", epm.AgeCriteria))
	builder.WriteString(", ")
	builder.WriteString("ServiceCriteria=")
	builder.WriteString(fmt.Sprintf("%v", epm.ServiceCriteria))
	builder.WriteString(", ")
	builder.WriteString("EducationCode=")
	builder.WriteString(fmt.Sprintf("%v", epm.EducationCode))
	builder.WriteString(", ")
	builder.WriteString("EducationDescription=")
	builder.WriteString(epm.EducationDescription)
	builder.WriteString(", ")
	builder.WriteString("OrderNumber=")
	builder.WriteString(epm.OrderNumber)
	builder.WriteString(", ")
	builder.WriteString("CreatedById=")
	builder.WriteString(fmt.Sprintf("%v", epm.CreatedById))
	builder.WriteString(", ")
	builder.WriteString("CreatedByUserName=")
	builder.WriteString(epm.CreatedByUserName)
	builder.WriteString(", ")
	builder.WriteString("CreatedByEmployeeId=")
	builder.WriteString(epm.CreatedByEmployeeId)
	builder.WriteString(", ")
	builder.WriteString("CreatedByDesignation=")
	builder.WriteString(epm.CreatedByDesignation)
	builder.WriteString(", ")
	builder.WriteString("CreatedDate=")
	builder.WriteString(epm.CreatedDate)
	builder.WriteString(", ")
	builder.WriteString("VerifiedById=")
	builder.WriteString(fmt.Sprintf("%v", epm.VerifiedById))
	builder.WriteString(", ")
	builder.WriteString("VerifiedByUserName=")
	builder.WriteString(epm.VerifiedByUserName)
	builder.WriteString(", ")
	builder.WriteString("VerifiedByEmployeeId=")
	builder.WriteString(epm.VerifiedByEmployeeId)
	builder.WriteString(", ")
	builder.WriteString("VerifiedByDesignation=")
	builder.WriteString(epm.VerifiedByDesignation)
	builder.WriteString(", ")
	builder.WriteString("VerifiedDate=")
	builder.WriteString(epm.VerifiedDate)
	builder.WriteString(", ")
	builder.WriteString("Status=")
	builder.WriteString(epm.Status)
	builder.WriteString(", ")
	builder.WriteString("DeletedById=")
	builder.WriteString(fmt.Sprintf("%v", epm.DeletedById))
	builder.WriteString(", ")
	builder.WriteString("DeletedByUserName=")
	builder.WriteString(epm.DeletedByUserName)
	builder.WriteString(", ")
	builder.WriteString("DeletedByEmployeeId=")
	builder.WriteString(epm.DeletedByEmployeeId)
	builder.WriteString(", ")
	builder.WriteString("DeletedByDesignation=")
	builder.WriteString(epm.DeletedByDesignation)
	builder.WriteString(", ")
	builder.WriteString("DeletedDate=")
	builder.WriteString(epm.DeletedDate)
	builder.WriteByte(')')
	return builder.String()
}

// ExamPostMappings is a parsable slice of ExamPostMapping.
type ExamPostMappings []*ExamPostMapping
