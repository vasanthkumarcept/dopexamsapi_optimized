// Code generated by ent, DO NOT EDIT.

package educationdetails

import (
	"recruit/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldLTE(FieldID, id))
}

// EducationDescription applies equality check predicate on the "educationDescription" field. It's identical to EducationDescriptionEQ.
func EducationDescription(v string) predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldEQ(FieldEducationDescription, v))
}

// OrderNumber applies equality check predicate on the "OrderNumber" field. It's identical to OrderNumberEQ.
func OrderNumber(v string) predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldEQ(FieldOrderNumber, v))
}

// CreatedById applies equality check predicate on the "CreatedById" field. It's identical to CreatedByIdEQ.
func CreatedById(v int64) predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldEQ(FieldCreatedById, v))
}

// CreatedByUserName applies equality check predicate on the "CreatedByUserName" field. It's identical to CreatedByUserNameEQ.
func CreatedByUserName(v string) predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldEQ(FieldCreatedByUserName, v))
}

// CreatedByEmployeeId applies equality check predicate on the "CreatedByEmployeeId" field. It's identical to CreatedByEmployeeIdEQ.
func CreatedByEmployeeId(v string) predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldEQ(FieldCreatedByEmployeeId, v))
}

// CreatedByDesignation applies equality check predicate on the "CreatedByDesignation" field. It's identical to CreatedByDesignationEQ.
func CreatedByDesignation(v string) predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldEQ(FieldCreatedByDesignation, v))
}

// CreatedDate applies equality check predicate on the "CreatedDate" field. It's identical to CreatedDateEQ.
func CreatedDate(v time.Time) predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldEQ(FieldCreatedDate, v))
}

// VerifiedById applies equality check predicate on the "VerifiedById" field. It's identical to VerifiedByIdEQ.
func VerifiedById(v int64) predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldEQ(FieldVerifiedById, v))
}

// VerifiedByUserName applies equality check predicate on the "VerifiedByUserName" field. It's identical to VerifiedByUserNameEQ.
func VerifiedByUserName(v string) predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldEQ(FieldVerifiedByUserName, v))
}

// VerifiedByEmployeeId applies equality check predicate on the "VerifiedByEmployeeId" field. It's identical to VerifiedByEmployeeIdEQ.
func VerifiedByEmployeeId(v string) predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldEQ(FieldVerifiedByEmployeeId, v))
}

// VerifiedByDesignation applies equality check predicate on the "VerifiedByDesignation" field. It's identical to VerifiedByDesignationEQ.
func VerifiedByDesignation(v string) predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldEQ(FieldVerifiedByDesignation, v))
}

// VerifiedDate applies equality check predicate on the "VerifiedDate" field. It's identical to VerifiedDateEQ.
func VerifiedDate(v time.Time) predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldEQ(FieldVerifiedDate, v))
}

// Status applies equality check predicate on the "Status" field. It's identical to StatusEQ.
func Status(v string) predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldEQ(FieldStatus, v))
}

// DeletedById applies equality check predicate on the "DeletedById" field. It's identical to DeletedByIdEQ.
func DeletedById(v int64) predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldEQ(FieldDeletedById, v))
}

// DeletedByUserName applies equality check predicate on the "DeletedByUserName" field. It's identical to DeletedByUserNameEQ.
func DeletedByUserName(v string) predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldEQ(FieldDeletedByUserName, v))
}

// DeletedByEmployeeId applies equality check predicate on the "DeletedByEmployeeId" field. It's identical to DeletedByEmployeeIdEQ.
func DeletedByEmployeeId(v string) predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldEQ(FieldDeletedByEmployeeId, v))
}

// DeletedByDesignation applies equality check predicate on the "DeletedByDesignation" field. It's identical to DeletedByDesignationEQ.
func DeletedByDesignation(v string) predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldEQ(FieldDeletedByDesignation, v))
}

// DeletedDate applies equality check predicate on the "DeletedDate" field. It's identical to DeletedDateEQ.
func DeletedDate(v time.Time) predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldEQ(FieldDeletedDate, v))
}

// EducationDescriptionEQ applies the EQ predicate on the "educationDescription" field.
func EducationDescriptionEQ(v string) predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldEQ(FieldEducationDescription, v))
}

// EducationDescriptionNEQ applies the NEQ predicate on the "educationDescription" field.
func EducationDescriptionNEQ(v string) predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldNEQ(FieldEducationDescription, v))
}

// EducationDescriptionIn applies the In predicate on the "educationDescription" field.
func EducationDescriptionIn(vs ...string) predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldIn(FieldEducationDescription, vs...))
}

// EducationDescriptionNotIn applies the NotIn predicate on the "educationDescription" field.
func EducationDescriptionNotIn(vs ...string) predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldNotIn(FieldEducationDescription, vs...))
}

// EducationDescriptionGT applies the GT predicate on the "educationDescription" field.
func EducationDescriptionGT(v string) predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldGT(FieldEducationDescription, v))
}

// EducationDescriptionGTE applies the GTE predicate on the "educationDescription" field.
func EducationDescriptionGTE(v string) predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldGTE(FieldEducationDescription, v))
}

// EducationDescriptionLT applies the LT predicate on the "educationDescription" field.
func EducationDescriptionLT(v string) predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldLT(FieldEducationDescription, v))
}

// EducationDescriptionLTE applies the LTE predicate on the "educationDescription" field.
func EducationDescriptionLTE(v string) predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldLTE(FieldEducationDescription, v))
}

// EducationDescriptionContains applies the Contains predicate on the "educationDescription" field.
func EducationDescriptionContains(v string) predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldContains(FieldEducationDescription, v))
}

// EducationDescriptionHasPrefix applies the HasPrefix predicate on the "educationDescription" field.
func EducationDescriptionHasPrefix(v string) predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldHasPrefix(FieldEducationDescription, v))
}

// EducationDescriptionHasSuffix applies the HasSuffix predicate on the "educationDescription" field.
func EducationDescriptionHasSuffix(v string) predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldHasSuffix(FieldEducationDescription, v))
}

// EducationDescriptionIsNil applies the IsNil predicate on the "educationDescription" field.
func EducationDescriptionIsNil() predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldIsNull(FieldEducationDescription))
}

// EducationDescriptionNotNil applies the NotNil predicate on the "educationDescription" field.
func EducationDescriptionNotNil() predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldNotNull(FieldEducationDescription))
}

// EducationDescriptionEqualFold applies the EqualFold predicate on the "educationDescription" field.
func EducationDescriptionEqualFold(v string) predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldEqualFold(FieldEducationDescription, v))
}

// EducationDescriptionContainsFold applies the ContainsFold predicate on the "educationDescription" field.
func EducationDescriptionContainsFold(v string) predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldContainsFold(FieldEducationDescription, v))
}

// OrderNumberEQ applies the EQ predicate on the "OrderNumber" field.
func OrderNumberEQ(v string) predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldEQ(FieldOrderNumber, v))
}

// OrderNumberNEQ applies the NEQ predicate on the "OrderNumber" field.
func OrderNumberNEQ(v string) predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldNEQ(FieldOrderNumber, v))
}

// OrderNumberIn applies the In predicate on the "OrderNumber" field.
func OrderNumberIn(vs ...string) predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldIn(FieldOrderNumber, vs...))
}

// OrderNumberNotIn applies the NotIn predicate on the "OrderNumber" field.
func OrderNumberNotIn(vs ...string) predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldNotIn(FieldOrderNumber, vs...))
}

// OrderNumberGT applies the GT predicate on the "OrderNumber" field.
func OrderNumberGT(v string) predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldGT(FieldOrderNumber, v))
}

// OrderNumberGTE applies the GTE predicate on the "OrderNumber" field.
func OrderNumberGTE(v string) predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldGTE(FieldOrderNumber, v))
}

// OrderNumberLT applies the LT predicate on the "OrderNumber" field.
func OrderNumberLT(v string) predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldLT(FieldOrderNumber, v))
}

// OrderNumberLTE applies the LTE predicate on the "OrderNumber" field.
func OrderNumberLTE(v string) predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldLTE(FieldOrderNumber, v))
}

// OrderNumberContains applies the Contains predicate on the "OrderNumber" field.
func OrderNumberContains(v string) predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldContains(FieldOrderNumber, v))
}

// OrderNumberHasPrefix applies the HasPrefix predicate on the "OrderNumber" field.
func OrderNumberHasPrefix(v string) predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldHasPrefix(FieldOrderNumber, v))
}

// OrderNumberHasSuffix applies the HasSuffix predicate on the "OrderNumber" field.
func OrderNumberHasSuffix(v string) predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldHasSuffix(FieldOrderNumber, v))
}

// OrderNumberIsNil applies the IsNil predicate on the "OrderNumber" field.
func OrderNumberIsNil() predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldIsNull(FieldOrderNumber))
}

// OrderNumberNotNil applies the NotNil predicate on the "OrderNumber" field.
func OrderNumberNotNil() predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldNotNull(FieldOrderNumber))
}

// OrderNumberEqualFold applies the EqualFold predicate on the "OrderNumber" field.
func OrderNumberEqualFold(v string) predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldEqualFold(FieldOrderNumber, v))
}

// OrderNumberContainsFold applies the ContainsFold predicate on the "OrderNumber" field.
func OrderNumberContainsFold(v string) predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldContainsFold(FieldOrderNumber, v))
}

// CreatedByIdEQ applies the EQ predicate on the "CreatedById" field.
func CreatedByIdEQ(v int64) predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldEQ(FieldCreatedById, v))
}

// CreatedByIdNEQ applies the NEQ predicate on the "CreatedById" field.
func CreatedByIdNEQ(v int64) predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldNEQ(FieldCreatedById, v))
}

// CreatedByIdIn applies the In predicate on the "CreatedById" field.
func CreatedByIdIn(vs ...int64) predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldIn(FieldCreatedById, vs...))
}

// CreatedByIdNotIn applies the NotIn predicate on the "CreatedById" field.
func CreatedByIdNotIn(vs ...int64) predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldNotIn(FieldCreatedById, vs...))
}

// CreatedByIdGT applies the GT predicate on the "CreatedById" field.
func CreatedByIdGT(v int64) predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldGT(FieldCreatedById, v))
}

// CreatedByIdGTE applies the GTE predicate on the "CreatedById" field.
func CreatedByIdGTE(v int64) predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldGTE(FieldCreatedById, v))
}

// CreatedByIdLT applies the LT predicate on the "CreatedById" field.
func CreatedByIdLT(v int64) predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldLT(FieldCreatedById, v))
}

// CreatedByIdLTE applies the LTE predicate on the "CreatedById" field.
func CreatedByIdLTE(v int64) predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldLTE(FieldCreatedById, v))
}

// CreatedByIdIsNil applies the IsNil predicate on the "CreatedById" field.
func CreatedByIdIsNil() predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldIsNull(FieldCreatedById))
}

// CreatedByIdNotNil applies the NotNil predicate on the "CreatedById" field.
func CreatedByIdNotNil() predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldNotNull(FieldCreatedById))
}

// CreatedByUserNameEQ applies the EQ predicate on the "CreatedByUserName" field.
func CreatedByUserNameEQ(v string) predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldEQ(FieldCreatedByUserName, v))
}

// CreatedByUserNameNEQ applies the NEQ predicate on the "CreatedByUserName" field.
func CreatedByUserNameNEQ(v string) predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldNEQ(FieldCreatedByUserName, v))
}

// CreatedByUserNameIn applies the In predicate on the "CreatedByUserName" field.
func CreatedByUserNameIn(vs ...string) predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldIn(FieldCreatedByUserName, vs...))
}

// CreatedByUserNameNotIn applies the NotIn predicate on the "CreatedByUserName" field.
func CreatedByUserNameNotIn(vs ...string) predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldNotIn(FieldCreatedByUserName, vs...))
}

// CreatedByUserNameGT applies the GT predicate on the "CreatedByUserName" field.
func CreatedByUserNameGT(v string) predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldGT(FieldCreatedByUserName, v))
}

// CreatedByUserNameGTE applies the GTE predicate on the "CreatedByUserName" field.
func CreatedByUserNameGTE(v string) predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldGTE(FieldCreatedByUserName, v))
}

// CreatedByUserNameLT applies the LT predicate on the "CreatedByUserName" field.
func CreatedByUserNameLT(v string) predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldLT(FieldCreatedByUserName, v))
}

// CreatedByUserNameLTE applies the LTE predicate on the "CreatedByUserName" field.
func CreatedByUserNameLTE(v string) predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldLTE(FieldCreatedByUserName, v))
}

// CreatedByUserNameContains applies the Contains predicate on the "CreatedByUserName" field.
func CreatedByUserNameContains(v string) predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldContains(FieldCreatedByUserName, v))
}

// CreatedByUserNameHasPrefix applies the HasPrefix predicate on the "CreatedByUserName" field.
func CreatedByUserNameHasPrefix(v string) predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldHasPrefix(FieldCreatedByUserName, v))
}

// CreatedByUserNameHasSuffix applies the HasSuffix predicate on the "CreatedByUserName" field.
func CreatedByUserNameHasSuffix(v string) predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldHasSuffix(FieldCreatedByUserName, v))
}

// CreatedByUserNameIsNil applies the IsNil predicate on the "CreatedByUserName" field.
func CreatedByUserNameIsNil() predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldIsNull(FieldCreatedByUserName))
}

// CreatedByUserNameNotNil applies the NotNil predicate on the "CreatedByUserName" field.
func CreatedByUserNameNotNil() predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldNotNull(FieldCreatedByUserName))
}

// CreatedByUserNameEqualFold applies the EqualFold predicate on the "CreatedByUserName" field.
func CreatedByUserNameEqualFold(v string) predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldEqualFold(FieldCreatedByUserName, v))
}

// CreatedByUserNameContainsFold applies the ContainsFold predicate on the "CreatedByUserName" field.
func CreatedByUserNameContainsFold(v string) predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldContainsFold(FieldCreatedByUserName, v))
}

// CreatedByEmployeeIdEQ applies the EQ predicate on the "CreatedByEmployeeId" field.
func CreatedByEmployeeIdEQ(v string) predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldEQ(FieldCreatedByEmployeeId, v))
}

// CreatedByEmployeeIdNEQ applies the NEQ predicate on the "CreatedByEmployeeId" field.
func CreatedByEmployeeIdNEQ(v string) predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldNEQ(FieldCreatedByEmployeeId, v))
}

// CreatedByEmployeeIdIn applies the In predicate on the "CreatedByEmployeeId" field.
func CreatedByEmployeeIdIn(vs ...string) predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldIn(FieldCreatedByEmployeeId, vs...))
}

// CreatedByEmployeeIdNotIn applies the NotIn predicate on the "CreatedByEmployeeId" field.
func CreatedByEmployeeIdNotIn(vs ...string) predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldNotIn(FieldCreatedByEmployeeId, vs...))
}

// CreatedByEmployeeIdGT applies the GT predicate on the "CreatedByEmployeeId" field.
func CreatedByEmployeeIdGT(v string) predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldGT(FieldCreatedByEmployeeId, v))
}

// CreatedByEmployeeIdGTE applies the GTE predicate on the "CreatedByEmployeeId" field.
func CreatedByEmployeeIdGTE(v string) predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldGTE(FieldCreatedByEmployeeId, v))
}

// CreatedByEmployeeIdLT applies the LT predicate on the "CreatedByEmployeeId" field.
func CreatedByEmployeeIdLT(v string) predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldLT(FieldCreatedByEmployeeId, v))
}

// CreatedByEmployeeIdLTE applies the LTE predicate on the "CreatedByEmployeeId" field.
func CreatedByEmployeeIdLTE(v string) predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldLTE(FieldCreatedByEmployeeId, v))
}

// CreatedByEmployeeIdContains applies the Contains predicate on the "CreatedByEmployeeId" field.
func CreatedByEmployeeIdContains(v string) predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldContains(FieldCreatedByEmployeeId, v))
}

// CreatedByEmployeeIdHasPrefix applies the HasPrefix predicate on the "CreatedByEmployeeId" field.
func CreatedByEmployeeIdHasPrefix(v string) predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldHasPrefix(FieldCreatedByEmployeeId, v))
}

// CreatedByEmployeeIdHasSuffix applies the HasSuffix predicate on the "CreatedByEmployeeId" field.
func CreatedByEmployeeIdHasSuffix(v string) predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldHasSuffix(FieldCreatedByEmployeeId, v))
}

// CreatedByEmployeeIdIsNil applies the IsNil predicate on the "CreatedByEmployeeId" field.
func CreatedByEmployeeIdIsNil() predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldIsNull(FieldCreatedByEmployeeId))
}

// CreatedByEmployeeIdNotNil applies the NotNil predicate on the "CreatedByEmployeeId" field.
func CreatedByEmployeeIdNotNil() predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldNotNull(FieldCreatedByEmployeeId))
}

// CreatedByEmployeeIdEqualFold applies the EqualFold predicate on the "CreatedByEmployeeId" field.
func CreatedByEmployeeIdEqualFold(v string) predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldEqualFold(FieldCreatedByEmployeeId, v))
}

// CreatedByEmployeeIdContainsFold applies the ContainsFold predicate on the "CreatedByEmployeeId" field.
func CreatedByEmployeeIdContainsFold(v string) predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldContainsFold(FieldCreatedByEmployeeId, v))
}

// CreatedByDesignationEQ applies the EQ predicate on the "CreatedByDesignation" field.
func CreatedByDesignationEQ(v string) predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldEQ(FieldCreatedByDesignation, v))
}

// CreatedByDesignationNEQ applies the NEQ predicate on the "CreatedByDesignation" field.
func CreatedByDesignationNEQ(v string) predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldNEQ(FieldCreatedByDesignation, v))
}

// CreatedByDesignationIn applies the In predicate on the "CreatedByDesignation" field.
func CreatedByDesignationIn(vs ...string) predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldIn(FieldCreatedByDesignation, vs...))
}

// CreatedByDesignationNotIn applies the NotIn predicate on the "CreatedByDesignation" field.
func CreatedByDesignationNotIn(vs ...string) predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldNotIn(FieldCreatedByDesignation, vs...))
}

// CreatedByDesignationGT applies the GT predicate on the "CreatedByDesignation" field.
func CreatedByDesignationGT(v string) predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldGT(FieldCreatedByDesignation, v))
}

// CreatedByDesignationGTE applies the GTE predicate on the "CreatedByDesignation" field.
func CreatedByDesignationGTE(v string) predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldGTE(FieldCreatedByDesignation, v))
}

// CreatedByDesignationLT applies the LT predicate on the "CreatedByDesignation" field.
func CreatedByDesignationLT(v string) predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldLT(FieldCreatedByDesignation, v))
}

// CreatedByDesignationLTE applies the LTE predicate on the "CreatedByDesignation" field.
func CreatedByDesignationLTE(v string) predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldLTE(FieldCreatedByDesignation, v))
}

// CreatedByDesignationContains applies the Contains predicate on the "CreatedByDesignation" field.
func CreatedByDesignationContains(v string) predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldContains(FieldCreatedByDesignation, v))
}

// CreatedByDesignationHasPrefix applies the HasPrefix predicate on the "CreatedByDesignation" field.
func CreatedByDesignationHasPrefix(v string) predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldHasPrefix(FieldCreatedByDesignation, v))
}

// CreatedByDesignationHasSuffix applies the HasSuffix predicate on the "CreatedByDesignation" field.
func CreatedByDesignationHasSuffix(v string) predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldHasSuffix(FieldCreatedByDesignation, v))
}

// CreatedByDesignationIsNil applies the IsNil predicate on the "CreatedByDesignation" field.
func CreatedByDesignationIsNil() predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldIsNull(FieldCreatedByDesignation))
}

// CreatedByDesignationNotNil applies the NotNil predicate on the "CreatedByDesignation" field.
func CreatedByDesignationNotNil() predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldNotNull(FieldCreatedByDesignation))
}

// CreatedByDesignationEqualFold applies the EqualFold predicate on the "CreatedByDesignation" field.
func CreatedByDesignationEqualFold(v string) predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldEqualFold(FieldCreatedByDesignation, v))
}

// CreatedByDesignationContainsFold applies the ContainsFold predicate on the "CreatedByDesignation" field.
func CreatedByDesignationContainsFold(v string) predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldContainsFold(FieldCreatedByDesignation, v))
}

// CreatedDateEQ applies the EQ predicate on the "CreatedDate" field.
func CreatedDateEQ(v time.Time) predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldEQ(FieldCreatedDate, v))
}

// CreatedDateNEQ applies the NEQ predicate on the "CreatedDate" field.
func CreatedDateNEQ(v time.Time) predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldNEQ(FieldCreatedDate, v))
}

// CreatedDateIn applies the In predicate on the "CreatedDate" field.
func CreatedDateIn(vs ...time.Time) predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldIn(FieldCreatedDate, vs...))
}

// CreatedDateNotIn applies the NotIn predicate on the "CreatedDate" field.
func CreatedDateNotIn(vs ...time.Time) predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldNotIn(FieldCreatedDate, vs...))
}

// CreatedDateGT applies the GT predicate on the "CreatedDate" field.
func CreatedDateGT(v time.Time) predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldGT(FieldCreatedDate, v))
}

// CreatedDateGTE applies the GTE predicate on the "CreatedDate" field.
func CreatedDateGTE(v time.Time) predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldGTE(FieldCreatedDate, v))
}

// CreatedDateLT applies the LT predicate on the "CreatedDate" field.
func CreatedDateLT(v time.Time) predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldLT(FieldCreatedDate, v))
}

// CreatedDateLTE applies the LTE predicate on the "CreatedDate" field.
func CreatedDateLTE(v time.Time) predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldLTE(FieldCreatedDate, v))
}

// CreatedDateIsNil applies the IsNil predicate on the "CreatedDate" field.
func CreatedDateIsNil() predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldIsNull(FieldCreatedDate))
}

// CreatedDateNotNil applies the NotNil predicate on the "CreatedDate" field.
func CreatedDateNotNil() predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldNotNull(FieldCreatedDate))
}

// VerifiedByIdEQ applies the EQ predicate on the "VerifiedById" field.
func VerifiedByIdEQ(v int64) predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldEQ(FieldVerifiedById, v))
}

// VerifiedByIdNEQ applies the NEQ predicate on the "VerifiedById" field.
func VerifiedByIdNEQ(v int64) predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldNEQ(FieldVerifiedById, v))
}

// VerifiedByIdIn applies the In predicate on the "VerifiedById" field.
func VerifiedByIdIn(vs ...int64) predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldIn(FieldVerifiedById, vs...))
}

// VerifiedByIdNotIn applies the NotIn predicate on the "VerifiedById" field.
func VerifiedByIdNotIn(vs ...int64) predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldNotIn(FieldVerifiedById, vs...))
}

// VerifiedByIdGT applies the GT predicate on the "VerifiedById" field.
func VerifiedByIdGT(v int64) predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldGT(FieldVerifiedById, v))
}

// VerifiedByIdGTE applies the GTE predicate on the "VerifiedById" field.
func VerifiedByIdGTE(v int64) predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldGTE(FieldVerifiedById, v))
}

// VerifiedByIdLT applies the LT predicate on the "VerifiedById" field.
func VerifiedByIdLT(v int64) predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldLT(FieldVerifiedById, v))
}

// VerifiedByIdLTE applies the LTE predicate on the "VerifiedById" field.
func VerifiedByIdLTE(v int64) predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldLTE(FieldVerifiedById, v))
}

// VerifiedByIdIsNil applies the IsNil predicate on the "VerifiedById" field.
func VerifiedByIdIsNil() predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldIsNull(FieldVerifiedById))
}

// VerifiedByIdNotNil applies the NotNil predicate on the "VerifiedById" field.
func VerifiedByIdNotNil() predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldNotNull(FieldVerifiedById))
}

// VerifiedByUserNameEQ applies the EQ predicate on the "VerifiedByUserName" field.
func VerifiedByUserNameEQ(v string) predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldEQ(FieldVerifiedByUserName, v))
}

// VerifiedByUserNameNEQ applies the NEQ predicate on the "VerifiedByUserName" field.
func VerifiedByUserNameNEQ(v string) predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldNEQ(FieldVerifiedByUserName, v))
}

// VerifiedByUserNameIn applies the In predicate on the "VerifiedByUserName" field.
func VerifiedByUserNameIn(vs ...string) predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldIn(FieldVerifiedByUserName, vs...))
}

// VerifiedByUserNameNotIn applies the NotIn predicate on the "VerifiedByUserName" field.
func VerifiedByUserNameNotIn(vs ...string) predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldNotIn(FieldVerifiedByUserName, vs...))
}

// VerifiedByUserNameGT applies the GT predicate on the "VerifiedByUserName" field.
func VerifiedByUserNameGT(v string) predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldGT(FieldVerifiedByUserName, v))
}

// VerifiedByUserNameGTE applies the GTE predicate on the "VerifiedByUserName" field.
func VerifiedByUserNameGTE(v string) predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldGTE(FieldVerifiedByUserName, v))
}

// VerifiedByUserNameLT applies the LT predicate on the "VerifiedByUserName" field.
func VerifiedByUserNameLT(v string) predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldLT(FieldVerifiedByUserName, v))
}

// VerifiedByUserNameLTE applies the LTE predicate on the "VerifiedByUserName" field.
func VerifiedByUserNameLTE(v string) predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldLTE(FieldVerifiedByUserName, v))
}

// VerifiedByUserNameContains applies the Contains predicate on the "VerifiedByUserName" field.
func VerifiedByUserNameContains(v string) predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldContains(FieldVerifiedByUserName, v))
}

// VerifiedByUserNameHasPrefix applies the HasPrefix predicate on the "VerifiedByUserName" field.
func VerifiedByUserNameHasPrefix(v string) predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldHasPrefix(FieldVerifiedByUserName, v))
}

// VerifiedByUserNameHasSuffix applies the HasSuffix predicate on the "VerifiedByUserName" field.
func VerifiedByUserNameHasSuffix(v string) predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldHasSuffix(FieldVerifiedByUserName, v))
}

// VerifiedByUserNameIsNil applies the IsNil predicate on the "VerifiedByUserName" field.
func VerifiedByUserNameIsNil() predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldIsNull(FieldVerifiedByUserName))
}

// VerifiedByUserNameNotNil applies the NotNil predicate on the "VerifiedByUserName" field.
func VerifiedByUserNameNotNil() predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldNotNull(FieldVerifiedByUserName))
}

// VerifiedByUserNameEqualFold applies the EqualFold predicate on the "VerifiedByUserName" field.
func VerifiedByUserNameEqualFold(v string) predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldEqualFold(FieldVerifiedByUserName, v))
}

// VerifiedByUserNameContainsFold applies the ContainsFold predicate on the "VerifiedByUserName" field.
func VerifiedByUserNameContainsFold(v string) predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldContainsFold(FieldVerifiedByUserName, v))
}

// VerifiedByEmployeeIdEQ applies the EQ predicate on the "VerifiedByEmployeeId" field.
func VerifiedByEmployeeIdEQ(v string) predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldEQ(FieldVerifiedByEmployeeId, v))
}

// VerifiedByEmployeeIdNEQ applies the NEQ predicate on the "VerifiedByEmployeeId" field.
func VerifiedByEmployeeIdNEQ(v string) predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldNEQ(FieldVerifiedByEmployeeId, v))
}

// VerifiedByEmployeeIdIn applies the In predicate on the "VerifiedByEmployeeId" field.
func VerifiedByEmployeeIdIn(vs ...string) predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldIn(FieldVerifiedByEmployeeId, vs...))
}

// VerifiedByEmployeeIdNotIn applies the NotIn predicate on the "VerifiedByEmployeeId" field.
func VerifiedByEmployeeIdNotIn(vs ...string) predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldNotIn(FieldVerifiedByEmployeeId, vs...))
}

// VerifiedByEmployeeIdGT applies the GT predicate on the "VerifiedByEmployeeId" field.
func VerifiedByEmployeeIdGT(v string) predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldGT(FieldVerifiedByEmployeeId, v))
}

// VerifiedByEmployeeIdGTE applies the GTE predicate on the "VerifiedByEmployeeId" field.
func VerifiedByEmployeeIdGTE(v string) predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldGTE(FieldVerifiedByEmployeeId, v))
}

// VerifiedByEmployeeIdLT applies the LT predicate on the "VerifiedByEmployeeId" field.
func VerifiedByEmployeeIdLT(v string) predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldLT(FieldVerifiedByEmployeeId, v))
}

// VerifiedByEmployeeIdLTE applies the LTE predicate on the "VerifiedByEmployeeId" field.
func VerifiedByEmployeeIdLTE(v string) predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldLTE(FieldVerifiedByEmployeeId, v))
}

// VerifiedByEmployeeIdContains applies the Contains predicate on the "VerifiedByEmployeeId" field.
func VerifiedByEmployeeIdContains(v string) predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldContains(FieldVerifiedByEmployeeId, v))
}

// VerifiedByEmployeeIdHasPrefix applies the HasPrefix predicate on the "VerifiedByEmployeeId" field.
func VerifiedByEmployeeIdHasPrefix(v string) predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldHasPrefix(FieldVerifiedByEmployeeId, v))
}

// VerifiedByEmployeeIdHasSuffix applies the HasSuffix predicate on the "VerifiedByEmployeeId" field.
func VerifiedByEmployeeIdHasSuffix(v string) predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldHasSuffix(FieldVerifiedByEmployeeId, v))
}

// VerifiedByEmployeeIdIsNil applies the IsNil predicate on the "VerifiedByEmployeeId" field.
func VerifiedByEmployeeIdIsNil() predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldIsNull(FieldVerifiedByEmployeeId))
}

// VerifiedByEmployeeIdNotNil applies the NotNil predicate on the "VerifiedByEmployeeId" field.
func VerifiedByEmployeeIdNotNil() predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldNotNull(FieldVerifiedByEmployeeId))
}

// VerifiedByEmployeeIdEqualFold applies the EqualFold predicate on the "VerifiedByEmployeeId" field.
func VerifiedByEmployeeIdEqualFold(v string) predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldEqualFold(FieldVerifiedByEmployeeId, v))
}

// VerifiedByEmployeeIdContainsFold applies the ContainsFold predicate on the "VerifiedByEmployeeId" field.
func VerifiedByEmployeeIdContainsFold(v string) predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldContainsFold(FieldVerifiedByEmployeeId, v))
}

// VerifiedByDesignationEQ applies the EQ predicate on the "VerifiedByDesignation" field.
func VerifiedByDesignationEQ(v string) predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldEQ(FieldVerifiedByDesignation, v))
}

// VerifiedByDesignationNEQ applies the NEQ predicate on the "VerifiedByDesignation" field.
func VerifiedByDesignationNEQ(v string) predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldNEQ(FieldVerifiedByDesignation, v))
}

// VerifiedByDesignationIn applies the In predicate on the "VerifiedByDesignation" field.
func VerifiedByDesignationIn(vs ...string) predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldIn(FieldVerifiedByDesignation, vs...))
}

// VerifiedByDesignationNotIn applies the NotIn predicate on the "VerifiedByDesignation" field.
func VerifiedByDesignationNotIn(vs ...string) predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldNotIn(FieldVerifiedByDesignation, vs...))
}

// VerifiedByDesignationGT applies the GT predicate on the "VerifiedByDesignation" field.
func VerifiedByDesignationGT(v string) predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldGT(FieldVerifiedByDesignation, v))
}

// VerifiedByDesignationGTE applies the GTE predicate on the "VerifiedByDesignation" field.
func VerifiedByDesignationGTE(v string) predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldGTE(FieldVerifiedByDesignation, v))
}

// VerifiedByDesignationLT applies the LT predicate on the "VerifiedByDesignation" field.
func VerifiedByDesignationLT(v string) predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldLT(FieldVerifiedByDesignation, v))
}

// VerifiedByDesignationLTE applies the LTE predicate on the "VerifiedByDesignation" field.
func VerifiedByDesignationLTE(v string) predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldLTE(FieldVerifiedByDesignation, v))
}

// VerifiedByDesignationContains applies the Contains predicate on the "VerifiedByDesignation" field.
func VerifiedByDesignationContains(v string) predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldContains(FieldVerifiedByDesignation, v))
}

// VerifiedByDesignationHasPrefix applies the HasPrefix predicate on the "VerifiedByDesignation" field.
func VerifiedByDesignationHasPrefix(v string) predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldHasPrefix(FieldVerifiedByDesignation, v))
}

// VerifiedByDesignationHasSuffix applies the HasSuffix predicate on the "VerifiedByDesignation" field.
func VerifiedByDesignationHasSuffix(v string) predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldHasSuffix(FieldVerifiedByDesignation, v))
}

// VerifiedByDesignationIsNil applies the IsNil predicate on the "VerifiedByDesignation" field.
func VerifiedByDesignationIsNil() predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldIsNull(FieldVerifiedByDesignation))
}

// VerifiedByDesignationNotNil applies the NotNil predicate on the "VerifiedByDesignation" field.
func VerifiedByDesignationNotNil() predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldNotNull(FieldVerifiedByDesignation))
}

// VerifiedByDesignationEqualFold applies the EqualFold predicate on the "VerifiedByDesignation" field.
func VerifiedByDesignationEqualFold(v string) predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldEqualFold(FieldVerifiedByDesignation, v))
}

// VerifiedByDesignationContainsFold applies the ContainsFold predicate on the "VerifiedByDesignation" field.
func VerifiedByDesignationContainsFold(v string) predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldContainsFold(FieldVerifiedByDesignation, v))
}

// VerifiedDateEQ applies the EQ predicate on the "VerifiedDate" field.
func VerifiedDateEQ(v time.Time) predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldEQ(FieldVerifiedDate, v))
}

// VerifiedDateNEQ applies the NEQ predicate on the "VerifiedDate" field.
func VerifiedDateNEQ(v time.Time) predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldNEQ(FieldVerifiedDate, v))
}

// VerifiedDateIn applies the In predicate on the "VerifiedDate" field.
func VerifiedDateIn(vs ...time.Time) predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldIn(FieldVerifiedDate, vs...))
}

// VerifiedDateNotIn applies the NotIn predicate on the "VerifiedDate" field.
func VerifiedDateNotIn(vs ...time.Time) predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldNotIn(FieldVerifiedDate, vs...))
}

// VerifiedDateGT applies the GT predicate on the "VerifiedDate" field.
func VerifiedDateGT(v time.Time) predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldGT(FieldVerifiedDate, v))
}

// VerifiedDateGTE applies the GTE predicate on the "VerifiedDate" field.
func VerifiedDateGTE(v time.Time) predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldGTE(FieldVerifiedDate, v))
}

// VerifiedDateLT applies the LT predicate on the "VerifiedDate" field.
func VerifiedDateLT(v time.Time) predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldLT(FieldVerifiedDate, v))
}

// VerifiedDateLTE applies the LTE predicate on the "VerifiedDate" field.
func VerifiedDateLTE(v time.Time) predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldLTE(FieldVerifiedDate, v))
}

// VerifiedDateIsNil applies the IsNil predicate on the "VerifiedDate" field.
func VerifiedDateIsNil() predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldIsNull(FieldVerifiedDate))
}

// VerifiedDateNotNil applies the NotNil predicate on the "VerifiedDate" field.
func VerifiedDateNotNil() predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldNotNull(FieldVerifiedDate))
}

// StatusEQ applies the EQ predicate on the "Status" field.
func StatusEQ(v string) predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "Status" field.
func StatusNEQ(v string) predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "Status" field.
func StatusIn(vs ...string) predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "Status" field.
func StatusNotIn(vs ...string) predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "Status" field.
func StatusGT(v string) predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "Status" field.
func StatusGTE(v string) predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "Status" field.
func StatusLT(v string) predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "Status" field.
func StatusLTE(v string) predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldLTE(FieldStatus, v))
}

// StatusContains applies the Contains predicate on the "Status" field.
func StatusContains(v string) predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldContains(FieldStatus, v))
}

// StatusHasPrefix applies the HasPrefix predicate on the "Status" field.
func StatusHasPrefix(v string) predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldHasPrefix(FieldStatus, v))
}

// StatusHasSuffix applies the HasSuffix predicate on the "Status" field.
func StatusHasSuffix(v string) predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldHasSuffix(FieldStatus, v))
}

// StatusEqualFold applies the EqualFold predicate on the "Status" field.
func StatusEqualFold(v string) predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldEqualFold(FieldStatus, v))
}

// StatusContainsFold applies the ContainsFold predicate on the "Status" field.
func StatusContainsFold(v string) predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldContainsFold(FieldStatus, v))
}

// DeletedByIdEQ applies the EQ predicate on the "DeletedById" field.
func DeletedByIdEQ(v int64) predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldEQ(FieldDeletedById, v))
}

// DeletedByIdNEQ applies the NEQ predicate on the "DeletedById" field.
func DeletedByIdNEQ(v int64) predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldNEQ(FieldDeletedById, v))
}

// DeletedByIdIn applies the In predicate on the "DeletedById" field.
func DeletedByIdIn(vs ...int64) predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldIn(FieldDeletedById, vs...))
}

// DeletedByIdNotIn applies the NotIn predicate on the "DeletedById" field.
func DeletedByIdNotIn(vs ...int64) predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldNotIn(FieldDeletedById, vs...))
}

// DeletedByIdGT applies the GT predicate on the "DeletedById" field.
func DeletedByIdGT(v int64) predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldGT(FieldDeletedById, v))
}

// DeletedByIdGTE applies the GTE predicate on the "DeletedById" field.
func DeletedByIdGTE(v int64) predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldGTE(FieldDeletedById, v))
}

// DeletedByIdLT applies the LT predicate on the "DeletedById" field.
func DeletedByIdLT(v int64) predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldLT(FieldDeletedById, v))
}

// DeletedByIdLTE applies the LTE predicate on the "DeletedById" field.
func DeletedByIdLTE(v int64) predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldLTE(FieldDeletedById, v))
}

// DeletedByIdIsNil applies the IsNil predicate on the "DeletedById" field.
func DeletedByIdIsNil() predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldIsNull(FieldDeletedById))
}

// DeletedByIdNotNil applies the NotNil predicate on the "DeletedById" field.
func DeletedByIdNotNil() predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldNotNull(FieldDeletedById))
}

// DeletedByUserNameEQ applies the EQ predicate on the "DeletedByUserName" field.
func DeletedByUserNameEQ(v string) predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldEQ(FieldDeletedByUserName, v))
}

// DeletedByUserNameNEQ applies the NEQ predicate on the "DeletedByUserName" field.
func DeletedByUserNameNEQ(v string) predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldNEQ(FieldDeletedByUserName, v))
}

// DeletedByUserNameIn applies the In predicate on the "DeletedByUserName" field.
func DeletedByUserNameIn(vs ...string) predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldIn(FieldDeletedByUserName, vs...))
}

// DeletedByUserNameNotIn applies the NotIn predicate on the "DeletedByUserName" field.
func DeletedByUserNameNotIn(vs ...string) predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldNotIn(FieldDeletedByUserName, vs...))
}

// DeletedByUserNameGT applies the GT predicate on the "DeletedByUserName" field.
func DeletedByUserNameGT(v string) predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldGT(FieldDeletedByUserName, v))
}

// DeletedByUserNameGTE applies the GTE predicate on the "DeletedByUserName" field.
func DeletedByUserNameGTE(v string) predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldGTE(FieldDeletedByUserName, v))
}

// DeletedByUserNameLT applies the LT predicate on the "DeletedByUserName" field.
func DeletedByUserNameLT(v string) predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldLT(FieldDeletedByUserName, v))
}

// DeletedByUserNameLTE applies the LTE predicate on the "DeletedByUserName" field.
func DeletedByUserNameLTE(v string) predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldLTE(FieldDeletedByUserName, v))
}

// DeletedByUserNameContains applies the Contains predicate on the "DeletedByUserName" field.
func DeletedByUserNameContains(v string) predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldContains(FieldDeletedByUserName, v))
}

// DeletedByUserNameHasPrefix applies the HasPrefix predicate on the "DeletedByUserName" field.
func DeletedByUserNameHasPrefix(v string) predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldHasPrefix(FieldDeletedByUserName, v))
}

// DeletedByUserNameHasSuffix applies the HasSuffix predicate on the "DeletedByUserName" field.
func DeletedByUserNameHasSuffix(v string) predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldHasSuffix(FieldDeletedByUserName, v))
}

// DeletedByUserNameIsNil applies the IsNil predicate on the "DeletedByUserName" field.
func DeletedByUserNameIsNil() predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldIsNull(FieldDeletedByUserName))
}

// DeletedByUserNameNotNil applies the NotNil predicate on the "DeletedByUserName" field.
func DeletedByUserNameNotNil() predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldNotNull(FieldDeletedByUserName))
}

// DeletedByUserNameEqualFold applies the EqualFold predicate on the "DeletedByUserName" field.
func DeletedByUserNameEqualFold(v string) predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldEqualFold(FieldDeletedByUserName, v))
}

// DeletedByUserNameContainsFold applies the ContainsFold predicate on the "DeletedByUserName" field.
func DeletedByUserNameContainsFold(v string) predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldContainsFold(FieldDeletedByUserName, v))
}

// DeletedByEmployeeIdEQ applies the EQ predicate on the "DeletedByEmployeeId" field.
func DeletedByEmployeeIdEQ(v string) predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldEQ(FieldDeletedByEmployeeId, v))
}

// DeletedByEmployeeIdNEQ applies the NEQ predicate on the "DeletedByEmployeeId" field.
func DeletedByEmployeeIdNEQ(v string) predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldNEQ(FieldDeletedByEmployeeId, v))
}

// DeletedByEmployeeIdIn applies the In predicate on the "DeletedByEmployeeId" field.
func DeletedByEmployeeIdIn(vs ...string) predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldIn(FieldDeletedByEmployeeId, vs...))
}

// DeletedByEmployeeIdNotIn applies the NotIn predicate on the "DeletedByEmployeeId" field.
func DeletedByEmployeeIdNotIn(vs ...string) predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldNotIn(FieldDeletedByEmployeeId, vs...))
}

// DeletedByEmployeeIdGT applies the GT predicate on the "DeletedByEmployeeId" field.
func DeletedByEmployeeIdGT(v string) predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldGT(FieldDeletedByEmployeeId, v))
}

// DeletedByEmployeeIdGTE applies the GTE predicate on the "DeletedByEmployeeId" field.
func DeletedByEmployeeIdGTE(v string) predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldGTE(FieldDeletedByEmployeeId, v))
}

// DeletedByEmployeeIdLT applies the LT predicate on the "DeletedByEmployeeId" field.
func DeletedByEmployeeIdLT(v string) predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldLT(FieldDeletedByEmployeeId, v))
}

// DeletedByEmployeeIdLTE applies the LTE predicate on the "DeletedByEmployeeId" field.
func DeletedByEmployeeIdLTE(v string) predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldLTE(FieldDeletedByEmployeeId, v))
}

// DeletedByEmployeeIdContains applies the Contains predicate on the "DeletedByEmployeeId" field.
func DeletedByEmployeeIdContains(v string) predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldContains(FieldDeletedByEmployeeId, v))
}

// DeletedByEmployeeIdHasPrefix applies the HasPrefix predicate on the "DeletedByEmployeeId" field.
func DeletedByEmployeeIdHasPrefix(v string) predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldHasPrefix(FieldDeletedByEmployeeId, v))
}

// DeletedByEmployeeIdHasSuffix applies the HasSuffix predicate on the "DeletedByEmployeeId" field.
func DeletedByEmployeeIdHasSuffix(v string) predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldHasSuffix(FieldDeletedByEmployeeId, v))
}

// DeletedByEmployeeIdIsNil applies the IsNil predicate on the "DeletedByEmployeeId" field.
func DeletedByEmployeeIdIsNil() predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldIsNull(FieldDeletedByEmployeeId))
}

// DeletedByEmployeeIdNotNil applies the NotNil predicate on the "DeletedByEmployeeId" field.
func DeletedByEmployeeIdNotNil() predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldNotNull(FieldDeletedByEmployeeId))
}

// DeletedByEmployeeIdEqualFold applies the EqualFold predicate on the "DeletedByEmployeeId" field.
func DeletedByEmployeeIdEqualFold(v string) predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldEqualFold(FieldDeletedByEmployeeId, v))
}

// DeletedByEmployeeIdContainsFold applies the ContainsFold predicate on the "DeletedByEmployeeId" field.
func DeletedByEmployeeIdContainsFold(v string) predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldContainsFold(FieldDeletedByEmployeeId, v))
}

// DeletedByDesignationEQ applies the EQ predicate on the "DeletedByDesignation" field.
func DeletedByDesignationEQ(v string) predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldEQ(FieldDeletedByDesignation, v))
}

// DeletedByDesignationNEQ applies the NEQ predicate on the "DeletedByDesignation" field.
func DeletedByDesignationNEQ(v string) predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldNEQ(FieldDeletedByDesignation, v))
}

// DeletedByDesignationIn applies the In predicate on the "DeletedByDesignation" field.
func DeletedByDesignationIn(vs ...string) predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldIn(FieldDeletedByDesignation, vs...))
}

// DeletedByDesignationNotIn applies the NotIn predicate on the "DeletedByDesignation" field.
func DeletedByDesignationNotIn(vs ...string) predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldNotIn(FieldDeletedByDesignation, vs...))
}

// DeletedByDesignationGT applies the GT predicate on the "DeletedByDesignation" field.
func DeletedByDesignationGT(v string) predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldGT(FieldDeletedByDesignation, v))
}

// DeletedByDesignationGTE applies the GTE predicate on the "DeletedByDesignation" field.
func DeletedByDesignationGTE(v string) predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldGTE(FieldDeletedByDesignation, v))
}

// DeletedByDesignationLT applies the LT predicate on the "DeletedByDesignation" field.
func DeletedByDesignationLT(v string) predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldLT(FieldDeletedByDesignation, v))
}

// DeletedByDesignationLTE applies the LTE predicate on the "DeletedByDesignation" field.
func DeletedByDesignationLTE(v string) predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldLTE(FieldDeletedByDesignation, v))
}

// DeletedByDesignationContains applies the Contains predicate on the "DeletedByDesignation" field.
func DeletedByDesignationContains(v string) predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldContains(FieldDeletedByDesignation, v))
}

// DeletedByDesignationHasPrefix applies the HasPrefix predicate on the "DeletedByDesignation" field.
func DeletedByDesignationHasPrefix(v string) predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldHasPrefix(FieldDeletedByDesignation, v))
}

// DeletedByDesignationHasSuffix applies the HasSuffix predicate on the "DeletedByDesignation" field.
func DeletedByDesignationHasSuffix(v string) predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldHasSuffix(FieldDeletedByDesignation, v))
}

// DeletedByDesignationIsNil applies the IsNil predicate on the "DeletedByDesignation" field.
func DeletedByDesignationIsNil() predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldIsNull(FieldDeletedByDesignation))
}

// DeletedByDesignationNotNil applies the NotNil predicate on the "DeletedByDesignation" field.
func DeletedByDesignationNotNil() predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldNotNull(FieldDeletedByDesignation))
}

// DeletedByDesignationEqualFold applies the EqualFold predicate on the "DeletedByDesignation" field.
func DeletedByDesignationEqualFold(v string) predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldEqualFold(FieldDeletedByDesignation, v))
}

// DeletedByDesignationContainsFold applies the ContainsFold predicate on the "DeletedByDesignation" field.
func DeletedByDesignationContainsFold(v string) predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldContainsFold(FieldDeletedByDesignation, v))
}

// DeletedDateEQ applies the EQ predicate on the "DeletedDate" field.
func DeletedDateEQ(v time.Time) predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldEQ(FieldDeletedDate, v))
}

// DeletedDateNEQ applies the NEQ predicate on the "DeletedDate" field.
func DeletedDateNEQ(v time.Time) predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldNEQ(FieldDeletedDate, v))
}

// DeletedDateIn applies the In predicate on the "DeletedDate" field.
func DeletedDateIn(vs ...time.Time) predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldIn(FieldDeletedDate, vs...))
}

// DeletedDateNotIn applies the NotIn predicate on the "DeletedDate" field.
func DeletedDateNotIn(vs ...time.Time) predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldNotIn(FieldDeletedDate, vs...))
}

// DeletedDateGT applies the GT predicate on the "DeletedDate" field.
func DeletedDateGT(v time.Time) predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldGT(FieldDeletedDate, v))
}

// DeletedDateGTE applies the GTE predicate on the "DeletedDate" field.
func DeletedDateGTE(v time.Time) predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldGTE(FieldDeletedDate, v))
}

// DeletedDateLT applies the LT predicate on the "DeletedDate" field.
func DeletedDateLT(v time.Time) predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldLT(FieldDeletedDate, v))
}

// DeletedDateLTE applies the LTE predicate on the "DeletedDate" field.
func DeletedDateLTE(v time.Time) predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldLTE(FieldDeletedDate, v))
}

// DeletedDateIsNil applies the IsNil predicate on the "DeletedDate" field.
func DeletedDateIsNil() predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldIsNull(FieldDeletedDate))
}

// DeletedDateNotNil applies the NotNil predicate on the "DeletedDate" field.
func DeletedDateNotNil() predicate.EducationDetails {
	return predicate.EducationDetails(sql.FieldNotNull(FieldDeletedDate))
}

// HasLogData applies the HasEdge predicate on the "LogData" edge.
func HasLogData() predicate.EducationDetails {
	return predicate.EducationDetails(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, LogDataTable, LogDataColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasLogDataWith applies the HasEdge predicate on the "LogData" edge with a given conditions (other predicates).
func HasLogDataWith(preds ...predicate.Logs) predicate.EducationDetails {
	return predicate.EducationDetails(func(s *sql.Selector) {
		step := newLogDataStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.EducationDetails) predicate.EducationDetails {
	return predicate.EducationDetails(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.EducationDetails) predicate.EducationDetails {
	return predicate.EducationDetails(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.EducationDetails) predicate.EducationDetails {
	return predicate.EducationDetails(func(s *sql.Selector) {
		p(s.Not())
	})
}
