// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"recruit/ent/categorymininummarkmapping"
	"recruit/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CategoryMininumMarkMappingDelete is the builder for deleting a CategoryMininumMarkMapping entity.
type CategoryMininumMarkMappingDelete struct {
	config
	hooks    []Hook
	mutation *CategoryMininumMarkMappingMutation
}

// Where appends a list predicates to the CategoryMininumMarkMappingDelete builder.
func (cmmmd *CategoryMininumMarkMappingDelete) Where(ps ...predicate.CategoryMininumMarkMapping) *CategoryMininumMarkMappingDelete {
	cmmmd.mutation.Where(ps...)
	return cmmmd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (cmmmd *CategoryMininumMarkMappingDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, cmmmd.sqlExec, cmmmd.mutation, cmmmd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (cmmmd *CategoryMininumMarkMappingDelete) ExecX(ctx context.Context) int {
	n, err := cmmmd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (cmmmd *CategoryMininumMarkMappingDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(categorymininummarkmapping.Table, sqlgraph.NewFieldSpec(categorymininummarkmapping.FieldID, field.TypeInt64))
	if ps := cmmmd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, cmmmd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	cmmmd.mutation.done = true
	return affected, err
}

// CategoryMininumMarkMappingDeleteOne is the builder for deleting a single CategoryMininumMarkMapping entity.
type CategoryMininumMarkMappingDeleteOne struct {
	cmmmd *CategoryMininumMarkMappingDelete
}

// Where appends a list predicates to the CategoryMininumMarkMappingDelete builder.
func (cmmmdo *CategoryMininumMarkMappingDeleteOne) Where(ps ...predicate.CategoryMininumMarkMapping) *CategoryMininumMarkMappingDeleteOne {
	cmmmdo.cmmmd.mutation.Where(ps...)
	return cmmmdo
}

// Exec executes the deletion query.
func (cmmmdo *CategoryMininumMarkMappingDeleteOne) Exec(ctx context.Context) error {
	n, err := cmmmdo.cmmmd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{categorymininummarkmapping.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (cmmmdo *CategoryMininumMarkMappingDeleteOne) ExecX(ctx context.Context) {
	if err := cmmmdo.Exec(ctx); err != nil {
		panic(err)
	}
}
