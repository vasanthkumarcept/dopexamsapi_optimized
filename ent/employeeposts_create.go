// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"recruit/ent/eligibilitymaster"
	"recruit/ent/employeeposts"
	"recruit/ent/employees"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// EmployeePostsCreate is the builder for creating a EmployeePosts entity.
type EmployeePostsCreate struct {
	config
	mutation *EmployeePostsMutation
	hooks    []Hook
}

// SetPostCode sets the "PostCode" field.
func (epc *EmployeePostsCreate) SetPostCode(s string) *EmployeePostsCreate {
	epc.mutation.SetPostCode(s)
	return epc
}

// SetPostDescription sets the "PostDescription" field.
func (epc *EmployeePostsCreate) SetPostDescription(s string) *EmployeePostsCreate {
	epc.mutation.SetPostDescription(s)
	return epc
}

// SetNillablePostDescription sets the "PostDescription" field if the given value is not nil.
func (epc *EmployeePostsCreate) SetNillablePostDescription(s *string) *EmployeePostsCreate {
	if s != nil {
		epc.SetPostDescription(*s)
	}
	return epc
}

// SetGroup sets the "Group" field.
func (epc *EmployeePostsCreate) SetGroup(s string) *EmployeePostsCreate {
	epc.mutation.SetGroup(s)
	return epc
}

// SetNillableGroup sets the "Group" field if the given value is not nil.
func (epc *EmployeePostsCreate) SetNillableGroup(s *string) *EmployeePostsCreate {
	if s != nil {
		epc.SetGroup(*s)
	}
	return epc
}

// SetPayLevel sets the "PayLevel" field.
func (epc *EmployeePostsCreate) SetPayLevel(s string) *EmployeePostsCreate {
	epc.mutation.SetPayLevel(s)
	return epc
}

// SetNillablePayLevel sets the "PayLevel" field if the given value is not nil.
func (epc *EmployeePostsCreate) SetNillablePayLevel(s *string) *EmployeePostsCreate {
	if s != nil {
		epc.SetPayLevel(*s)
	}
	return epc
}

// SetScale sets the "Scale" field.
func (epc *EmployeePostsCreate) SetScale(s string) *EmployeePostsCreate {
	epc.mutation.SetScale(s)
	return epc
}

// SetNillableScale sets the "Scale" field if the given value is not nil.
func (epc *EmployeePostsCreate) SetNillableScale(s *string) *EmployeePostsCreate {
	if s != nil {
		epc.SetScale(*s)
	}
	return epc
}

// SetBaseCadreFlag sets the "BaseCadreFlag" field.
func (epc *EmployeePostsCreate) SetBaseCadreFlag(b bool) *EmployeePostsCreate {
	epc.mutation.SetBaseCadreFlag(b)
	return epc
}

// SetNillableBaseCadreFlag sets the "BaseCadreFlag" field if the given value is not nil.
func (epc *EmployeePostsCreate) SetNillableBaseCadreFlag(b *bool) *EmployeePostsCreate {
	if b != nil {
		epc.SetBaseCadreFlag(*b)
	}
	return epc
}

// SetOrderNumber sets the "OrderNumber" field.
func (epc *EmployeePostsCreate) SetOrderNumber(s string) *EmployeePostsCreate {
	epc.mutation.SetOrderNumber(s)
	return epc
}

// SetNillableOrderNumber sets the "OrderNumber" field if the given value is not nil.
func (epc *EmployeePostsCreate) SetNillableOrderNumber(s *string) *EmployeePostsCreate {
	if s != nil {
		epc.SetOrderNumber(*s)
	}
	return epc
}

// SetStatus sets the "Status" field.
func (epc *EmployeePostsCreate) SetStatus(s string) *EmployeePostsCreate {
	epc.mutation.SetStatus(s)
	return epc
}

// SetNillableStatus sets the "Status" field if the given value is not nil.
func (epc *EmployeePostsCreate) SetNillableStatus(s *string) *EmployeePostsCreate {
	if s != nil {
		epc.SetStatus(*s)
	}
	return epc
}

// SetCreatedById sets the "CreatedById" field.
func (epc *EmployeePostsCreate) SetCreatedById(i int32) *EmployeePostsCreate {
	epc.mutation.SetCreatedById(i)
	return epc
}

// SetNillableCreatedById sets the "CreatedById" field if the given value is not nil.
func (epc *EmployeePostsCreate) SetNillableCreatedById(i *int32) *EmployeePostsCreate {
	if i != nil {
		epc.SetCreatedById(*i)
	}
	return epc
}

// SetCreatedByUserName sets the "CreatedByUserName" field.
func (epc *EmployeePostsCreate) SetCreatedByUserName(s string) *EmployeePostsCreate {
	epc.mutation.SetCreatedByUserName(s)
	return epc
}

// SetNillableCreatedByUserName sets the "CreatedByUserName" field if the given value is not nil.
func (epc *EmployeePostsCreate) SetNillableCreatedByUserName(s *string) *EmployeePostsCreate {
	if s != nil {
		epc.SetCreatedByUserName(*s)
	}
	return epc
}

// SetCreatedByEmployeeId sets the "CreatedByEmployeeId" field.
func (epc *EmployeePostsCreate) SetCreatedByEmployeeId(s string) *EmployeePostsCreate {
	epc.mutation.SetCreatedByEmployeeId(s)
	return epc
}

// SetNillableCreatedByEmployeeId sets the "CreatedByEmployeeId" field if the given value is not nil.
func (epc *EmployeePostsCreate) SetNillableCreatedByEmployeeId(s *string) *EmployeePostsCreate {
	if s != nil {
		epc.SetCreatedByEmployeeId(*s)
	}
	return epc
}

// SetCreatedByDesignation sets the "CreatedByDesignation" field.
func (epc *EmployeePostsCreate) SetCreatedByDesignation(s string) *EmployeePostsCreate {
	epc.mutation.SetCreatedByDesignation(s)
	return epc
}

// SetNillableCreatedByDesignation sets the "CreatedByDesignation" field if the given value is not nil.
func (epc *EmployeePostsCreate) SetNillableCreatedByDesignation(s *string) *EmployeePostsCreate {
	if s != nil {
		epc.SetCreatedByDesignation(*s)
	}
	return epc
}

// SetCreatedDate sets the "CreatedDate" field.
func (epc *EmployeePostsCreate) SetCreatedDate(t time.Time) *EmployeePostsCreate {
	epc.mutation.SetCreatedDate(t)
	return epc
}

// SetNillableCreatedDate sets the "CreatedDate" field if the given value is not nil.
func (epc *EmployeePostsCreate) SetNillableCreatedDate(t *time.Time) *EmployeePostsCreate {
	if t != nil {
		epc.SetCreatedDate(*t)
	}
	return epc
}

// SetVerifiedById sets the "VerifiedById" field.
func (epc *EmployeePostsCreate) SetVerifiedById(i int64) *EmployeePostsCreate {
	epc.mutation.SetVerifiedById(i)
	return epc
}

// SetNillableVerifiedById sets the "VerifiedById" field if the given value is not nil.
func (epc *EmployeePostsCreate) SetNillableVerifiedById(i *int64) *EmployeePostsCreate {
	if i != nil {
		epc.SetVerifiedById(*i)
	}
	return epc
}

// SetVerifiedByUserName sets the "VerifiedByUserName" field.
func (epc *EmployeePostsCreate) SetVerifiedByUserName(s string) *EmployeePostsCreate {
	epc.mutation.SetVerifiedByUserName(s)
	return epc
}

// SetNillableVerifiedByUserName sets the "VerifiedByUserName" field if the given value is not nil.
func (epc *EmployeePostsCreate) SetNillableVerifiedByUserName(s *string) *EmployeePostsCreate {
	if s != nil {
		epc.SetVerifiedByUserName(*s)
	}
	return epc
}

// SetVerifiedByEmployeeId sets the "VerifiedByEmployeeId" field.
func (epc *EmployeePostsCreate) SetVerifiedByEmployeeId(s string) *EmployeePostsCreate {
	epc.mutation.SetVerifiedByEmployeeId(s)
	return epc
}

// SetNillableVerifiedByEmployeeId sets the "VerifiedByEmployeeId" field if the given value is not nil.
func (epc *EmployeePostsCreate) SetNillableVerifiedByEmployeeId(s *string) *EmployeePostsCreate {
	if s != nil {
		epc.SetVerifiedByEmployeeId(*s)
	}
	return epc
}

// SetVerifiedByDesignation sets the "VerifiedByDesignation" field.
func (epc *EmployeePostsCreate) SetVerifiedByDesignation(s string) *EmployeePostsCreate {
	epc.mutation.SetVerifiedByDesignation(s)
	return epc
}

// SetNillableVerifiedByDesignation sets the "VerifiedByDesignation" field if the given value is not nil.
func (epc *EmployeePostsCreate) SetNillableVerifiedByDesignation(s *string) *EmployeePostsCreate {
	if s != nil {
		epc.SetVerifiedByDesignation(*s)
	}
	return epc
}

// SetVerifiedDate sets the "VerifiedDate" field.
func (epc *EmployeePostsCreate) SetVerifiedDate(t time.Time) *EmployeePostsCreate {
	epc.mutation.SetVerifiedDate(t)
	return epc
}

// SetNillableVerifiedDate sets the "VerifiedDate" field if the given value is not nil.
func (epc *EmployeePostsCreate) SetNillableVerifiedDate(t *time.Time) *EmployeePostsCreate {
	if t != nil {
		epc.SetVerifiedDate(*t)
	}
	return epc
}

// SetDeletedById sets the "DeletedById" field.
func (epc *EmployeePostsCreate) SetDeletedById(i int64) *EmployeePostsCreate {
	epc.mutation.SetDeletedById(i)
	return epc
}

// SetNillableDeletedById sets the "DeletedById" field if the given value is not nil.
func (epc *EmployeePostsCreate) SetNillableDeletedById(i *int64) *EmployeePostsCreate {
	if i != nil {
		epc.SetDeletedById(*i)
	}
	return epc
}

// SetDeletedByUserName sets the "DeletedByUserName" field.
func (epc *EmployeePostsCreate) SetDeletedByUserName(s string) *EmployeePostsCreate {
	epc.mutation.SetDeletedByUserName(s)
	return epc
}

// SetNillableDeletedByUserName sets the "DeletedByUserName" field if the given value is not nil.
func (epc *EmployeePostsCreate) SetNillableDeletedByUserName(s *string) *EmployeePostsCreate {
	if s != nil {
		epc.SetDeletedByUserName(*s)
	}
	return epc
}

// SetDeletedByEmployeeId sets the "DeletedByEmployeeId" field.
func (epc *EmployeePostsCreate) SetDeletedByEmployeeId(s string) *EmployeePostsCreate {
	epc.mutation.SetDeletedByEmployeeId(s)
	return epc
}

// SetNillableDeletedByEmployeeId sets the "DeletedByEmployeeId" field if the given value is not nil.
func (epc *EmployeePostsCreate) SetNillableDeletedByEmployeeId(s *string) *EmployeePostsCreate {
	if s != nil {
		epc.SetDeletedByEmployeeId(*s)
	}
	return epc
}

// SetDeletedByDesignation sets the "DeletedByDesignation" field.
func (epc *EmployeePostsCreate) SetDeletedByDesignation(s string) *EmployeePostsCreate {
	epc.mutation.SetDeletedByDesignation(s)
	return epc
}

// SetNillableDeletedByDesignation sets the "DeletedByDesignation" field if the given value is not nil.
func (epc *EmployeePostsCreate) SetNillableDeletedByDesignation(s *string) *EmployeePostsCreate {
	if s != nil {
		epc.SetDeletedByDesignation(*s)
	}
	return epc
}

// SetDeletedDate sets the "DeletedDate" field.
func (epc *EmployeePostsCreate) SetDeletedDate(t time.Time) *EmployeePostsCreate {
	epc.mutation.SetDeletedDate(t)
	return epc
}

// SetNillableDeletedDate sets the "DeletedDate" field if the given value is not nil.
func (epc *EmployeePostsCreate) SetNillableDeletedDate(t *time.Time) *EmployeePostsCreate {
	if t != nil {
		epc.SetDeletedDate(*t)
	}
	return epc
}

// SetGroupDescription sets the "GroupDescription" field.
func (epc *EmployeePostsCreate) SetGroupDescription(s string) *EmployeePostsCreate {
	epc.mutation.SetGroupDescription(s)
	return epc
}

// SetNillableGroupDescription sets the "GroupDescription" field if the given value is not nil.
func (epc *EmployeePostsCreate) SetNillableGroupDescription(s *string) *EmployeePostsCreate {
	if s != nil {
		epc.SetGroupDescription(*s)
	}
	return epc
}

// SetID sets the "id" field.
func (epc *EmployeePostsCreate) SetID(i int32) *EmployeePostsCreate {
	epc.mutation.SetID(i)
	return epc
}

// AddEmpPostIDs adds the "emp_posts" edge to the Employees entity by IDs.
func (epc *EmployeePostsCreate) AddEmpPostIDs(ids ...int32) *EmployeePostsCreate {
	epc.mutation.AddEmpPostIDs(ids...)
	return epc
}

// AddEmpPosts adds the "emp_posts" edges to the Employees entity.
func (epc *EmployeePostsCreate) AddEmpPosts(e ...*Employees) *EmployeePostsCreate {
	ids := make([]int32, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return epc.AddEmpPostIDs(ids...)
}

// AddPostEligibilityIDs adds the "PostEligibility" edge to the EligibilityMaster entity by IDs.
func (epc *EmployeePostsCreate) AddPostEligibilityIDs(ids ...int32) *EmployeePostsCreate {
	epc.mutation.AddPostEligibilityIDs(ids...)
	return epc
}

// AddPostEligibility adds the "PostEligibility" edges to the EligibilityMaster entity.
func (epc *EmployeePostsCreate) AddPostEligibility(e ...*EligibilityMaster) *EmployeePostsCreate {
	ids := make([]int32, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return epc.AddPostEligibilityIDs(ids...)
}

// Mutation returns the EmployeePostsMutation object of the builder.
func (epc *EmployeePostsCreate) Mutation() *EmployeePostsMutation {
	return epc.mutation
}

// Save creates the EmployeePosts in the database.
func (epc *EmployeePostsCreate) Save(ctx context.Context) (*EmployeePosts, error) {
	return withHooks(ctx, epc.sqlSave, epc.mutation, epc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (epc *EmployeePostsCreate) SaveX(ctx context.Context) *EmployeePosts {
	v, err := epc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (epc *EmployeePostsCreate) Exec(ctx context.Context) error {
	_, err := epc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (epc *EmployeePostsCreate) ExecX(ctx context.Context) {
	if err := epc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (epc *EmployeePostsCreate) check() error {
	if _, ok := epc.mutation.PostCode(); !ok {
		return &ValidationError{Name: "PostCode", err: errors.New(`ent: missing required field "EmployeePosts.PostCode"`)}
	}
	return nil
}

func (epc *EmployeePostsCreate) sqlSave(ctx context.Context) (*EmployeePosts, error) {
	if err := epc.check(); err != nil {
		return nil, err
	}
	_node, _spec := epc.createSpec()
	if err := sqlgraph.CreateNode(ctx, epc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int32(id)
	}
	epc.mutation.id = &_node.ID
	epc.mutation.done = true
	return _node, nil
}

func (epc *EmployeePostsCreate) createSpec() (*EmployeePosts, *sqlgraph.CreateSpec) {
	var (
		_node = &EmployeePosts{config: epc.config}
		_spec = sqlgraph.NewCreateSpec(employeeposts.Table, sqlgraph.NewFieldSpec(employeeposts.FieldID, field.TypeInt32))
	)
	if id, ok := epc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := epc.mutation.PostCode(); ok {
		_spec.SetField(employeeposts.FieldPostCode, field.TypeString, value)
		_node.PostCode = value
	}
	if value, ok := epc.mutation.PostDescription(); ok {
		_spec.SetField(employeeposts.FieldPostDescription, field.TypeString, value)
		_node.PostDescription = value
	}
	if value, ok := epc.mutation.Group(); ok {
		_spec.SetField(employeeposts.FieldGroup, field.TypeString, value)
		_node.Group = value
	}
	if value, ok := epc.mutation.PayLevel(); ok {
		_spec.SetField(employeeposts.FieldPayLevel, field.TypeString, value)
		_node.PayLevel = value
	}
	if value, ok := epc.mutation.Scale(); ok {
		_spec.SetField(employeeposts.FieldScale, field.TypeString, value)
		_node.Scale = value
	}
	if value, ok := epc.mutation.BaseCadreFlag(); ok {
		_spec.SetField(employeeposts.FieldBaseCadreFlag, field.TypeBool, value)
		_node.BaseCadreFlag = value
	}
	if value, ok := epc.mutation.OrderNumber(); ok {
		_spec.SetField(employeeposts.FieldOrderNumber, field.TypeString, value)
		_node.OrderNumber = value
	}
	if value, ok := epc.mutation.Status(); ok {
		_spec.SetField(employeeposts.FieldStatus, field.TypeString, value)
		_node.Status = value
	}
	if value, ok := epc.mutation.CreatedById(); ok {
		_spec.SetField(employeeposts.FieldCreatedById, field.TypeInt32, value)
		_node.CreatedById = value
	}
	if value, ok := epc.mutation.CreatedByUserName(); ok {
		_spec.SetField(employeeposts.FieldCreatedByUserName, field.TypeString, value)
		_node.CreatedByUserName = value
	}
	if value, ok := epc.mutation.CreatedByEmployeeId(); ok {
		_spec.SetField(employeeposts.FieldCreatedByEmployeeId, field.TypeString, value)
		_node.CreatedByEmployeeId = value
	}
	if value, ok := epc.mutation.CreatedByDesignation(); ok {
		_spec.SetField(employeeposts.FieldCreatedByDesignation, field.TypeString, value)
		_node.CreatedByDesignation = value
	}
	if value, ok := epc.mutation.CreatedDate(); ok {
		_spec.SetField(employeeposts.FieldCreatedDate, field.TypeTime, value)
		_node.CreatedDate = value
	}
	if value, ok := epc.mutation.VerifiedById(); ok {
		_spec.SetField(employeeposts.FieldVerifiedById, field.TypeInt64, value)
		_node.VerifiedById = value
	}
	if value, ok := epc.mutation.VerifiedByUserName(); ok {
		_spec.SetField(employeeposts.FieldVerifiedByUserName, field.TypeString, value)
		_node.VerifiedByUserName = value
	}
	if value, ok := epc.mutation.VerifiedByEmployeeId(); ok {
		_spec.SetField(employeeposts.FieldVerifiedByEmployeeId, field.TypeString, value)
		_node.VerifiedByEmployeeId = value
	}
	if value, ok := epc.mutation.VerifiedByDesignation(); ok {
		_spec.SetField(employeeposts.FieldVerifiedByDesignation, field.TypeString, value)
		_node.VerifiedByDesignation = value
	}
	if value, ok := epc.mutation.VerifiedDate(); ok {
		_spec.SetField(employeeposts.FieldVerifiedDate, field.TypeTime, value)
		_node.VerifiedDate = value
	}
	if value, ok := epc.mutation.DeletedById(); ok {
		_spec.SetField(employeeposts.FieldDeletedById, field.TypeInt64, value)
		_node.DeletedById = value
	}
	if value, ok := epc.mutation.DeletedByUserName(); ok {
		_spec.SetField(employeeposts.FieldDeletedByUserName, field.TypeString, value)
		_node.DeletedByUserName = value
	}
	if value, ok := epc.mutation.DeletedByEmployeeId(); ok {
		_spec.SetField(employeeposts.FieldDeletedByEmployeeId, field.TypeString, value)
		_node.DeletedByEmployeeId = value
	}
	if value, ok := epc.mutation.DeletedByDesignation(); ok {
		_spec.SetField(employeeposts.FieldDeletedByDesignation, field.TypeString, value)
		_node.DeletedByDesignation = value
	}
	if value, ok := epc.mutation.DeletedDate(); ok {
		_spec.SetField(employeeposts.FieldDeletedDate, field.TypeTime, value)
		_node.DeletedDate = value
	}
	if value, ok := epc.mutation.GroupDescription(); ok {
		_spec.SetField(employeeposts.FieldGroupDescription, field.TypeString, value)
		_node.GroupDescription = value
	}
	if nodes := epc.mutation.EmpPostsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employeeposts.EmpPostsTable,
			Columns: []string{employeeposts.EmpPostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employees.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := epc.mutation.PostEligibilityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employeeposts.PostEligibilityTable,
			Columns: []string{employeeposts.PostEligibilityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(eligibilitymaster.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// EmployeePostsCreateBulk is the builder for creating many EmployeePosts entities in bulk.
type EmployeePostsCreateBulk struct {
	config
	builders []*EmployeePostsCreate
}

// Save creates the EmployeePosts entities in the database.
func (epcb *EmployeePostsCreateBulk) Save(ctx context.Context) ([]*EmployeePosts, error) {
	specs := make([]*sqlgraph.CreateSpec, len(epcb.builders))
	nodes := make([]*EmployeePosts, len(epcb.builders))
	mutators := make([]Mutator, len(epcb.builders))
	for i := range epcb.builders {
		func(i int, root context.Context) {
			builder := epcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*EmployeePostsMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, epcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, epcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, epcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (epcb *EmployeePostsCreateBulk) SaveX(ctx context.Context) []*EmployeePosts {
	v, err := epcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (epcb *EmployeePostsCreateBulk) Exec(ctx context.Context) error {
	_, err := epcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (epcb *EmployeePostsCreateBulk) ExecX(ctx context.Context) {
	if err := epcb.Exec(ctx); err != nil {
		panic(err)
	}
}
