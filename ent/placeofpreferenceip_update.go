// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"recruit/ent/exam_applications_ip"
	"recruit/ent/placeofpreferenceip"
	"recruit/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PlaceOfPreferenceIPUpdate is the builder for updating PlaceOfPreferenceIP entities.
type PlaceOfPreferenceIPUpdate struct {
	config
	hooks    []Hook
	mutation *PlaceOfPreferenceIPMutation
}

// Where appends a list predicates to the PlaceOfPreferenceIPUpdate builder.
func (popiu *PlaceOfPreferenceIPUpdate) Where(ps ...predicate.PlaceOfPreferenceIP) *PlaceOfPreferenceIPUpdate {
	popiu.mutation.Where(ps...)
	return popiu
}

// SetApplicationID sets the "ApplicationID" field.
func (popiu *PlaceOfPreferenceIPUpdate) SetApplicationID(i int64) *PlaceOfPreferenceIPUpdate {
	popiu.mutation.ResetApplicationID()
	popiu.mutation.SetApplicationID(i)
	return popiu
}

// SetNillableApplicationID sets the "ApplicationID" field if the given value is not nil.
func (popiu *PlaceOfPreferenceIPUpdate) SetNillableApplicationID(i *int64) *PlaceOfPreferenceIPUpdate {
	if i != nil {
		popiu.SetApplicationID(*i)
	}
	return popiu
}

// AddApplicationID adds i to the "ApplicationID" field.
func (popiu *PlaceOfPreferenceIPUpdate) AddApplicationID(i int64) *PlaceOfPreferenceIPUpdate {
	popiu.mutation.AddApplicationID(i)
	return popiu
}

// ClearApplicationID clears the value of the "ApplicationID" field.
func (popiu *PlaceOfPreferenceIPUpdate) ClearApplicationID() *PlaceOfPreferenceIPUpdate {
	popiu.mutation.ClearApplicationID()
	return popiu
}

// SetPlacePrefNo sets the "PlacePrefNo" field.
func (popiu *PlaceOfPreferenceIPUpdate) SetPlacePrefNo(i int32) *PlaceOfPreferenceIPUpdate {
	popiu.mutation.ResetPlacePrefNo()
	popiu.mutation.SetPlacePrefNo(i)
	return popiu
}

// SetNillablePlacePrefNo sets the "PlacePrefNo" field if the given value is not nil.
func (popiu *PlaceOfPreferenceIPUpdate) SetNillablePlacePrefNo(i *int32) *PlaceOfPreferenceIPUpdate {
	if i != nil {
		popiu.SetPlacePrefNo(*i)
	}
	return popiu
}

// AddPlacePrefNo adds i to the "PlacePrefNo" field.
func (popiu *PlaceOfPreferenceIPUpdate) AddPlacePrefNo(i int32) *PlaceOfPreferenceIPUpdate {
	popiu.mutation.AddPlacePrefNo(i)
	return popiu
}

// ClearPlacePrefNo clears the value of the "PlacePrefNo" field.
func (popiu *PlaceOfPreferenceIPUpdate) ClearPlacePrefNo() *PlaceOfPreferenceIPUpdate {
	popiu.mutation.ClearPlacePrefNo()
	return popiu
}

// SetPlacePrefValue sets the "PlacePrefValue" field.
func (popiu *PlaceOfPreferenceIPUpdate) SetPlacePrefValue(s string) *PlaceOfPreferenceIPUpdate {
	popiu.mutation.SetPlacePrefValue(s)
	return popiu
}

// SetNillablePlacePrefValue sets the "PlacePrefValue" field if the given value is not nil.
func (popiu *PlaceOfPreferenceIPUpdate) SetNillablePlacePrefValue(s *string) *PlaceOfPreferenceIPUpdate {
	if s != nil {
		popiu.SetPlacePrefValue(*s)
	}
	return popiu
}

// ClearPlacePrefValue clears the value of the "PlacePrefValue" field.
func (popiu *PlaceOfPreferenceIPUpdate) ClearPlacePrefValue() *PlaceOfPreferenceIPUpdate {
	popiu.mutation.ClearPlacePrefValue()
	return popiu
}

// SetEmployeeID sets the "EmployeeID" field.
func (popiu *PlaceOfPreferenceIPUpdate) SetEmployeeID(i int64) *PlaceOfPreferenceIPUpdate {
	popiu.mutation.ResetEmployeeID()
	popiu.mutation.SetEmployeeID(i)
	return popiu
}

// SetNillableEmployeeID sets the "EmployeeID" field if the given value is not nil.
func (popiu *PlaceOfPreferenceIPUpdate) SetNillableEmployeeID(i *int64) *PlaceOfPreferenceIPUpdate {
	if i != nil {
		popiu.SetEmployeeID(*i)
	}
	return popiu
}

// AddEmployeeID adds i to the "EmployeeID" field.
func (popiu *PlaceOfPreferenceIPUpdate) AddEmployeeID(i int64) *PlaceOfPreferenceIPUpdate {
	popiu.mutation.AddEmployeeID(i)
	return popiu
}

// ClearEmployeeID clears the value of the "EmployeeID" field.
func (popiu *PlaceOfPreferenceIPUpdate) ClearEmployeeID() *PlaceOfPreferenceIPUpdate {
	popiu.mutation.ClearEmployeeID()
	return popiu
}

// SetUpdatedAt sets the "UpdatedAt" field.
func (popiu *PlaceOfPreferenceIPUpdate) SetUpdatedAt(t time.Time) *PlaceOfPreferenceIPUpdate {
	popiu.mutation.SetUpdatedAt(t)
	return popiu
}

// SetNillableUpdatedAt sets the "UpdatedAt" field if the given value is not nil.
func (popiu *PlaceOfPreferenceIPUpdate) SetNillableUpdatedAt(t *time.Time) *PlaceOfPreferenceIPUpdate {
	if t != nil {
		popiu.SetUpdatedAt(*t)
	}
	return popiu
}

// ClearUpdatedAt clears the value of the "UpdatedAt" field.
func (popiu *PlaceOfPreferenceIPUpdate) ClearUpdatedAt() *PlaceOfPreferenceIPUpdate {
	popiu.mutation.ClearUpdatedAt()
	return popiu
}

// SetUpdatedBy sets the "UpdatedBy" field.
func (popiu *PlaceOfPreferenceIPUpdate) SetUpdatedBy(s string) *PlaceOfPreferenceIPUpdate {
	popiu.mutation.SetUpdatedBy(s)
	return popiu
}

// SetNillableUpdatedBy sets the "UpdatedBy" field if the given value is not nil.
func (popiu *PlaceOfPreferenceIPUpdate) SetNillableUpdatedBy(s *string) *PlaceOfPreferenceIPUpdate {
	if s != nil {
		popiu.SetUpdatedBy(*s)
	}
	return popiu
}

// ClearUpdatedBy clears the value of the "UpdatedBy" field.
func (popiu *PlaceOfPreferenceIPUpdate) ClearUpdatedBy() *PlaceOfPreferenceIPUpdate {
	popiu.mutation.ClearUpdatedBy()
	return popiu
}

// SetApplnIPRefID sets the "ApplnIP_Ref" edge to the Exam_Applications_IP entity by ID.
func (popiu *PlaceOfPreferenceIPUpdate) SetApplnIPRefID(id int64) *PlaceOfPreferenceIPUpdate {
	popiu.mutation.SetApplnIPRefID(id)
	return popiu
}

// SetNillableApplnIPRefID sets the "ApplnIP_Ref" edge to the Exam_Applications_IP entity by ID if the given value is not nil.
func (popiu *PlaceOfPreferenceIPUpdate) SetNillableApplnIPRefID(id *int64) *PlaceOfPreferenceIPUpdate {
	if id != nil {
		popiu = popiu.SetApplnIPRefID(*id)
	}
	return popiu
}

// SetApplnIPRef sets the "ApplnIP_Ref" edge to the Exam_Applications_IP entity.
func (popiu *PlaceOfPreferenceIPUpdate) SetApplnIPRef(e *Exam_Applications_IP) *PlaceOfPreferenceIPUpdate {
	return popiu.SetApplnIPRefID(e.ID)
}

// Mutation returns the PlaceOfPreferenceIPMutation object of the builder.
func (popiu *PlaceOfPreferenceIPUpdate) Mutation() *PlaceOfPreferenceIPMutation {
	return popiu.mutation
}

// ClearApplnIPRef clears the "ApplnIP_Ref" edge to the Exam_Applications_IP entity.
func (popiu *PlaceOfPreferenceIPUpdate) ClearApplnIPRef() *PlaceOfPreferenceIPUpdate {
	popiu.mutation.ClearApplnIPRef()
	return popiu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (popiu *PlaceOfPreferenceIPUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, popiu.sqlSave, popiu.mutation, popiu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (popiu *PlaceOfPreferenceIPUpdate) SaveX(ctx context.Context) int {
	affected, err := popiu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (popiu *PlaceOfPreferenceIPUpdate) Exec(ctx context.Context) error {
	_, err := popiu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (popiu *PlaceOfPreferenceIPUpdate) ExecX(ctx context.Context) {
	if err := popiu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (popiu *PlaceOfPreferenceIPUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(placeofpreferenceip.Table, placeofpreferenceip.Columns, sqlgraph.NewFieldSpec(placeofpreferenceip.FieldID, field.TypeInt32))
	if ps := popiu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := popiu.mutation.ApplicationID(); ok {
		_spec.SetField(placeofpreferenceip.FieldApplicationID, field.TypeInt64, value)
	}
	if value, ok := popiu.mutation.AddedApplicationID(); ok {
		_spec.AddField(placeofpreferenceip.FieldApplicationID, field.TypeInt64, value)
	}
	if popiu.mutation.ApplicationIDCleared() {
		_spec.ClearField(placeofpreferenceip.FieldApplicationID, field.TypeInt64)
	}
	if value, ok := popiu.mutation.PlacePrefNo(); ok {
		_spec.SetField(placeofpreferenceip.FieldPlacePrefNo, field.TypeInt32, value)
	}
	if value, ok := popiu.mutation.AddedPlacePrefNo(); ok {
		_spec.AddField(placeofpreferenceip.FieldPlacePrefNo, field.TypeInt32, value)
	}
	if popiu.mutation.PlacePrefNoCleared() {
		_spec.ClearField(placeofpreferenceip.FieldPlacePrefNo, field.TypeInt32)
	}
	if value, ok := popiu.mutation.PlacePrefValue(); ok {
		_spec.SetField(placeofpreferenceip.FieldPlacePrefValue, field.TypeString, value)
	}
	if popiu.mutation.PlacePrefValueCleared() {
		_spec.ClearField(placeofpreferenceip.FieldPlacePrefValue, field.TypeString)
	}
	if value, ok := popiu.mutation.EmployeeID(); ok {
		_spec.SetField(placeofpreferenceip.FieldEmployeeID, field.TypeInt64, value)
	}
	if value, ok := popiu.mutation.AddedEmployeeID(); ok {
		_spec.AddField(placeofpreferenceip.FieldEmployeeID, field.TypeInt64, value)
	}
	if popiu.mutation.EmployeeIDCleared() {
		_spec.ClearField(placeofpreferenceip.FieldEmployeeID, field.TypeInt64)
	}
	if value, ok := popiu.mutation.UpdatedAt(); ok {
		_spec.SetField(placeofpreferenceip.FieldUpdatedAt, field.TypeTime, value)
	}
	if popiu.mutation.UpdatedAtCleared() {
		_spec.ClearField(placeofpreferenceip.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := popiu.mutation.UpdatedBy(); ok {
		_spec.SetField(placeofpreferenceip.FieldUpdatedBy, field.TypeString, value)
	}
	if popiu.mutation.UpdatedByCleared() {
		_spec.ClearField(placeofpreferenceip.FieldUpdatedBy, field.TypeString)
	}
	if popiu.mutation.ApplnIPRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   placeofpreferenceip.ApplnIPRefTable,
			Columns: []string{placeofpreferenceip.ApplnIPRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_ip.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := popiu.mutation.ApplnIPRefIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   placeofpreferenceip.ApplnIPRefTable,
			Columns: []string{placeofpreferenceip.ApplnIPRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_ip.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, popiu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{placeofpreferenceip.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	popiu.mutation.done = true
	return n, nil
}

// PlaceOfPreferenceIPUpdateOne is the builder for updating a single PlaceOfPreferenceIP entity.
type PlaceOfPreferenceIPUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PlaceOfPreferenceIPMutation
}

// SetApplicationID sets the "ApplicationID" field.
func (popiuo *PlaceOfPreferenceIPUpdateOne) SetApplicationID(i int64) *PlaceOfPreferenceIPUpdateOne {
	popiuo.mutation.ResetApplicationID()
	popiuo.mutation.SetApplicationID(i)
	return popiuo
}

// SetNillableApplicationID sets the "ApplicationID" field if the given value is not nil.
func (popiuo *PlaceOfPreferenceIPUpdateOne) SetNillableApplicationID(i *int64) *PlaceOfPreferenceIPUpdateOne {
	if i != nil {
		popiuo.SetApplicationID(*i)
	}
	return popiuo
}

// AddApplicationID adds i to the "ApplicationID" field.
func (popiuo *PlaceOfPreferenceIPUpdateOne) AddApplicationID(i int64) *PlaceOfPreferenceIPUpdateOne {
	popiuo.mutation.AddApplicationID(i)
	return popiuo
}

// ClearApplicationID clears the value of the "ApplicationID" field.
func (popiuo *PlaceOfPreferenceIPUpdateOne) ClearApplicationID() *PlaceOfPreferenceIPUpdateOne {
	popiuo.mutation.ClearApplicationID()
	return popiuo
}

// SetPlacePrefNo sets the "PlacePrefNo" field.
func (popiuo *PlaceOfPreferenceIPUpdateOne) SetPlacePrefNo(i int32) *PlaceOfPreferenceIPUpdateOne {
	popiuo.mutation.ResetPlacePrefNo()
	popiuo.mutation.SetPlacePrefNo(i)
	return popiuo
}

// SetNillablePlacePrefNo sets the "PlacePrefNo" field if the given value is not nil.
func (popiuo *PlaceOfPreferenceIPUpdateOne) SetNillablePlacePrefNo(i *int32) *PlaceOfPreferenceIPUpdateOne {
	if i != nil {
		popiuo.SetPlacePrefNo(*i)
	}
	return popiuo
}

// AddPlacePrefNo adds i to the "PlacePrefNo" field.
func (popiuo *PlaceOfPreferenceIPUpdateOne) AddPlacePrefNo(i int32) *PlaceOfPreferenceIPUpdateOne {
	popiuo.mutation.AddPlacePrefNo(i)
	return popiuo
}

// ClearPlacePrefNo clears the value of the "PlacePrefNo" field.
func (popiuo *PlaceOfPreferenceIPUpdateOne) ClearPlacePrefNo() *PlaceOfPreferenceIPUpdateOne {
	popiuo.mutation.ClearPlacePrefNo()
	return popiuo
}

// SetPlacePrefValue sets the "PlacePrefValue" field.
func (popiuo *PlaceOfPreferenceIPUpdateOne) SetPlacePrefValue(s string) *PlaceOfPreferenceIPUpdateOne {
	popiuo.mutation.SetPlacePrefValue(s)
	return popiuo
}

// SetNillablePlacePrefValue sets the "PlacePrefValue" field if the given value is not nil.
func (popiuo *PlaceOfPreferenceIPUpdateOne) SetNillablePlacePrefValue(s *string) *PlaceOfPreferenceIPUpdateOne {
	if s != nil {
		popiuo.SetPlacePrefValue(*s)
	}
	return popiuo
}

// ClearPlacePrefValue clears the value of the "PlacePrefValue" field.
func (popiuo *PlaceOfPreferenceIPUpdateOne) ClearPlacePrefValue() *PlaceOfPreferenceIPUpdateOne {
	popiuo.mutation.ClearPlacePrefValue()
	return popiuo
}

// SetEmployeeID sets the "EmployeeID" field.
func (popiuo *PlaceOfPreferenceIPUpdateOne) SetEmployeeID(i int64) *PlaceOfPreferenceIPUpdateOne {
	popiuo.mutation.ResetEmployeeID()
	popiuo.mutation.SetEmployeeID(i)
	return popiuo
}

// SetNillableEmployeeID sets the "EmployeeID" field if the given value is not nil.
func (popiuo *PlaceOfPreferenceIPUpdateOne) SetNillableEmployeeID(i *int64) *PlaceOfPreferenceIPUpdateOne {
	if i != nil {
		popiuo.SetEmployeeID(*i)
	}
	return popiuo
}

// AddEmployeeID adds i to the "EmployeeID" field.
func (popiuo *PlaceOfPreferenceIPUpdateOne) AddEmployeeID(i int64) *PlaceOfPreferenceIPUpdateOne {
	popiuo.mutation.AddEmployeeID(i)
	return popiuo
}

// ClearEmployeeID clears the value of the "EmployeeID" field.
func (popiuo *PlaceOfPreferenceIPUpdateOne) ClearEmployeeID() *PlaceOfPreferenceIPUpdateOne {
	popiuo.mutation.ClearEmployeeID()
	return popiuo
}

// SetUpdatedAt sets the "UpdatedAt" field.
func (popiuo *PlaceOfPreferenceIPUpdateOne) SetUpdatedAt(t time.Time) *PlaceOfPreferenceIPUpdateOne {
	popiuo.mutation.SetUpdatedAt(t)
	return popiuo
}

// SetNillableUpdatedAt sets the "UpdatedAt" field if the given value is not nil.
func (popiuo *PlaceOfPreferenceIPUpdateOne) SetNillableUpdatedAt(t *time.Time) *PlaceOfPreferenceIPUpdateOne {
	if t != nil {
		popiuo.SetUpdatedAt(*t)
	}
	return popiuo
}

// ClearUpdatedAt clears the value of the "UpdatedAt" field.
func (popiuo *PlaceOfPreferenceIPUpdateOne) ClearUpdatedAt() *PlaceOfPreferenceIPUpdateOne {
	popiuo.mutation.ClearUpdatedAt()
	return popiuo
}

// SetUpdatedBy sets the "UpdatedBy" field.
func (popiuo *PlaceOfPreferenceIPUpdateOne) SetUpdatedBy(s string) *PlaceOfPreferenceIPUpdateOne {
	popiuo.mutation.SetUpdatedBy(s)
	return popiuo
}

// SetNillableUpdatedBy sets the "UpdatedBy" field if the given value is not nil.
func (popiuo *PlaceOfPreferenceIPUpdateOne) SetNillableUpdatedBy(s *string) *PlaceOfPreferenceIPUpdateOne {
	if s != nil {
		popiuo.SetUpdatedBy(*s)
	}
	return popiuo
}

// ClearUpdatedBy clears the value of the "UpdatedBy" field.
func (popiuo *PlaceOfPreferenceIPUpdateOne) ClearUpdatedBy() *PlaceOfPreferenceIPUpdateOne {
	popiuo.mutation.ClearUpdatedBy()
	return popiuo
}

// SetApplnIPRefID sets the "ApplnIP_Ref" edge to the Exam_Applications_IP entity by ID.
func (popiuo *PlaceOfPreferenceIPUpdateOne) SetApplnIPRefID(id int64) *PlaceOfPreferenceIPUpdateOne {
	popiuo.mutation.SetApplnIPRefID(id)
	return popiuo
}

// SetNillableApplnIPRefID sets the "ApplnIP_Ref" edge to the Exam_Applications_IP entity by ID if the given value is not nil.
func (popiuo *PlaceOfPreferenceIPUpdateOne) SetNillableApplnIPRefID(id *int64) *PlaceOfPreferenceIPUpdateOne {
	if id != nil {
		popiuo = popiuo.SetApplnIPRefID(*id)
	}
	return popiuo
}

// SetApplnIPRef sets the "ApplnIP_Ref" edge to the Exam_Applications_IP entity.
func (popiuo *PlaceOfPreferenceIPUpdateOne) SetApplnIPRef(e *Exam_Applications_IP) *PlaceOfPreferenceIPUpdateOne {
	return popiuo.SetApplnIPRefID(e.ID)
}

// Mutation returns the PlaceOfPreferenceIPMutation object of the builder.
func (popiuo *PlaceOfPreferenceIPUpdateOne) Mutation() *PlaceOfPreferenceIPMutation {
	return popiuo.mutation
}

// ClearApplnIPRef clears the "ApplnIP_Ref" edge to the Exam_Applications_IP entity.
func (popiuo *PlaceOfPreferenceIPUpdateOne) ClearApplnIPRef() *PlaceOfPreferenceIPUpdateOne {
	popiuo.mutation.ClearApplnIPRef()
	return popiuo
}

// Where appends a list predicates to the PlaceOfPreferenceIPUpdate builder.
func (popiuo *PlaceOfPreferenceIPUpdateOne) Where(ps ...predicate.PlaceOfPreferenceIP) *PlaceOfPreferenceIPUpdateOne {
	popiuo.mutation.Where(ps...)
	return popiuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (popiuo *PlaceOfPreferenceIPUpdateOne) Select(field string, fields ...string) *PlaceOfPreferenceIPUpdateOne {
	popiuo.fields = append([]string{field}, fields...)
	return popiuo
}

// Save executes the query and returns the updated PlaceOfPreferenceIP entity.
func (popiuo *PlaceOfPreferenceIPUpdateOne) Save(ctx context.Context) (*PlaceOfPreferenceIP, error) {
	return withHooks(ctx, popiuo.sqlSave, popiuo.mutation, popiuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (popiuo *PlaceOfPreferenceIPUpdateOne) SaveX(ctx context.Context) *PlaceOfPreferenceIP {
	node, err := popiuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (popiuo *PlaceOfPreferenceIPUpdateOne) Exec(ctx context.Context) error {
	_, err := popiuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (popiuo *PlaceOfPreferenceIPUpdateOne) ExecX(ctx context.Context) {
	if err := popiuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (popiuo *PlaceOfPreferenceIPUpdateOne) sqlSave(ctx context.Context) (_node *PlaceOfPreferenceIP, err error) {
	_spec := sqlgraph.NewUpdateSpec(placeofpreferenceip.Table, placeofpreferenceip.Columns, sqlgraph.NewFieldSpec(placeofpreferenceip.FieldID, field.TypeInt32))
	id, ok := popiuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "PlaceOfPreferenceIP.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := popiuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, placeofpreferenceip.FieldID)
		for _, f := range fields {
			if !placeofpreferenceip.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != placeofpreferenceip.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := popiuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := popiuo.mutation.ApplicationID(); ok {
		_spec.SetField(placeofpreferenceip.FieldApplicationID, field.TypeInt64, value)
	}
	if value, ok := popiuo.mutation.AddedApplicationID(); ok {
		_spec.AddField(placeofpreferenceip.FieldApplicationID, field.TypeInt64, value)
	}
	if popiuo.mutation.ApplicationIDCleared() {
		_spec.ClearField(placeofpreferenceip.FieldApplicationID, field.TypeInt64)
	}
	if value, ok := popiuo.mutation.PlacePrefNo(); ok {
		_spec.SetField(placeofpreferenceip.FieldPlacePrefNo, field.TypeInt32, value)
	}
	if value, ok := popiuo.mutation.AddedPlacePrefNo(); ok {
		_spec.AddField(placeofpreferenceip.FieldPlacePrefNo, field.TypeInt32, value)
	}
	if popiuo.mutation.PlacePrefNoCleared() {
		_spec.ClearField(placeofpreferenceip.FieldPlacePrefNo, field.TypeInt32)
	}
	if value, ok := popiuo.mutation.PlacePrefValue(); ok {
		_spec.SetField(placeofpreferenceip.FieldPlacePrefValue, field.TypeString, value)
	}
	if popiuo.mutation.PlacePrefValueCleared() {
		_spec.ClearField(placeofpreferenceip.FieldPlacePrefValue, field.TypeString)
	}
	if value, ok := popiuo.mutation.EmployeeID(); ok {
		_spec.SetField(placeofpreferenceip.FieldEmployeeID, field.TypeInt64, value)
	}
	if value, ok := popiuo.mutation.AddedEmployeeID(); ok {
		_spec.AddField(placeofpreferenceip.FieldEmployeeID, field.TypeInt64, value)
	}
	if popiuo.mutation.EmployeeIDCleared() {
		_spec.ClearField(placeofpreferenceip.FieldEmployeeID, field.TypeInt64)
	}
	if value, ok := popiuo.mutation.UpdatedAt(); ok {
		_spec.SetField(placeofpreferenceip.FieldUpdatedAt, field.TypeTime, value)
	}
	if popiuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(placeofpreferenceip.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := popiuo.mutation.UpdatedBy(); ok {
		_spec.SetField(placeofpreferenceip.FieldUpdatedBy, field.TypeString, value)
	}
	if popiuo.mutation.UpdatedByCleared() {
		_spec.ClearField(placeofpreferenceip.FieldUpdatedBy, field.TypeString)
	}
	if popiuo.mutation.ApplnIPRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   placeofpreferenceip.ApplnIPRefTable,
			Columns: []string{placeofpreferenceip.ApplnIPRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_ip.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := popiuo.mutation.ApplnIPRefIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   placeofpreferenceip.ApplnIPRefTable,
			Columns: []string{placeofpreferenceip.ApplnIPRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_ip.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &PlaceOfPreferenceIP{config: popiuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, popiuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{placeofpreferenceip.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	popiuo.mutation.done = true
	return _node, nil
}
