// Code generated by ent, DO NOT EDIT.

package rolemaster

import (
	"recruit/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int32) predicate.RoleMaster {
	return predicate.RoleMaster(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int32) predicate.RoleMaster {
	return predicate.RoleMaster(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int32) predicate.RoleMaster {
	return predicate.RoleMaster(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int32) predicate.RoleMaster {
	return predicate.RoleMaster(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int32) predicate.RoleMaster {
	return predicate.RoleMaster(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int32) predicate.RoleMaster {
	return predicate.RoleMaster(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int32) predicate.RoleMaster {
	return predicate.RoleMaster(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int32) predicate.RoleMaster {
	return predicate.RoleMaster(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int32) predicate.RoleMaster {
	return predicate.RoleMaster(sql.FieldLTE(FieldID, id))
}

// RoleName applies equality check predicate on the "RoleName" field. It's identical to RoleNameEQ.
func RoleName(v string) predicate.RoleMaster {
	return predicate.RoleMaster(sql.FieldEQ(FieldRoleName, v))
}

// CreatedDate applies equality check predicate on the "CreatedDate" field. It's identical to CreatedDateEQ.
func CreatedDate(v time.Time) predicate.RoleMaster {
	return predicate.RoleMaster(sql.FieldEQ(FieldCreatedDate, v))
}

// Status applies equality check predicate on the "Status" field. It's identical to StatusEQ.
func Status(v bool) predicate.RoleMaster {
	return predicate.RoleMaster(sql.FieldEQ(FieldStatus, v))
}

// RoleCode applies equality check predicate on the "RoleCode" field. It's identical to RoleCodeEQ.
func RoleCode(v int32) predicate.RoleMaster {
	return predicate.RoleMaster(sql.FieldEQ(FieldRoleCode, v))
}

// RoleNameEQ applies the EQ predicate on the "RoleName" field.
func RoleNameEQ(v string) predicate.RoleMaster {
	return predicate.RoleMaster(sql.FieldEQ(FieldRoleName, v))
}

// RoleNameNEQ applies the NEQ predicate on the "RoleName" field.
func RoleNameNEQ(v string) predicate.RoleMaster {
	return predicate.RoleMaster(sql.FieldNEQ(FieldRoleName, v))
}

// RoleNameIn applies the In predicate on the "RoleName" field.
func RoleNameIn(vs ...string) predicate.RoleMaster {
	return predicate.RoleMaster(sql.FieldIn(FieldRoleName, vs...))
}

// RoleNameNotIn applies the NotIn predicate on the "RoleName" field.
func RoleNameNotIn(vs ...string) predicate.RoleMaster {
	return predicate.RoleMaster(sql.FieldNotIn(FieldRoleName, vs...))
}

// RoleNameGT applies the GT predicate on the "RoleName" field.
func RoleNameGT(v string) predicate.RoleMaster {
	return predicate.RoleMaster(sql.FieldGT(FieldRoleName, v))
}

// RoleNameGTE applies the GTE predicate on the "RoleName" field.
func RoleNameGTE(v string) predicate.RoleMaster {
	return predicate.RoleMaster(sql.FieldGTE(FieldRoleName, v))
}

// RoleNameLT applies the LT predicate on the "RoleName" field.
func RoleNameLT(v string) predicate.RoleMaster {
	return predicate.RoleMaster(sql.FieldLT(FieldRoleName, v))
}

// RoleNameLTE applies the LTE predicate on the "RoleName" field.
func RoleNameLTE(v string) predicate.RoleMaster {
	return predicate.RoleMaster(sql.FieldLTE(FieldRoleName, v))
}

// RoleNameContains applies the Contains predicate on the "RoleName" field.
func RoleNameContains(v string) predicate.RoleMaster {
	return predicate.RoleMaster(sql.FieldContains(FieldRoleName, v))
}

// RoleNameHasPrefix applies the HasPrefix predicate on the "RoleName" field.
func RoleNameHasPrefix(v string) predicate.RoleMaster {
	return predicate.RoleMaster(sql.FieldHasPrefix(FieldRoleName, v))
}

// RoleNameHasSuffix applies the HasSuffix predicate on the "RoleName" field.
func RoleNameHasSuffix(v string) predicate.RoleMaster {
	return predicate.RoleMaster(sql.FieldHasSuffix(FieldRoleName, v))
}

// RoleNameEqualFold applies the EqualFold predicate on the "RoleName" field.
func RoleNameEqualFold(v string) predicate.RoleMaster {
	return predicate.RoleMaster(sql.FieldEqualFold(FieldRoleName, v))
}

// RoleNameContainsFold applies the ContainsFold predicate on the "RoleName" field.
func RoleNameContainsFold(v string) predicate.RoleMaster {
	return predicate.RoleMaster(sql.FieldContainsFold(FieldRoleName, v))
}

// CreatedDateEQ applies the EQ predicate on the "CreatedDate" field.
func CreatedDateEQ(v time.Time) predicate.RoleMaster {
	return predicate.RoleMaster(sql.FieldEQ(FieldCreatedDate, v))
}

// CreatedDateNEQ applies the NEQ predicate on the "CreatedDate" field.
func CreatedDateNEQ(v time.Time) predicate.RoleMaster {
	return predicate.RoleMaster(sql.FieldNEQ(FieldCreatedDate, v))
}

// CreatedDateIn applies the In predicate on the "CreatedDate" field.
func CreatedDateIn(vs ...time.Time) predicate.RoleMaster {
	return predicate.RoleMaster(sql.FieldIn(FieldCreatedDate, vs...))
}

// CreatedDateNotIn applies the NotIn predicate on the "CreatedDate" field.
func CreatedDateNotIn(vs ...time.Time) predicate.RoleMaster {
	return predicate.RoleMaster(sql.FieldNotIn(FieldCreatedDate, vs...))
}

// CreatedDateGT applies the GT predicate on the "CreatedDate" field.
func CreatedDateGT(v time.Time) predicate.RoleMaster {
	return predicate.RoleMaster(sql.FieldGT(FieldCreatedDate, v))
}

// CreatedDateGTE applies the GTE predicate on the "CreatedDate" field.
func CreatedDateGTE(v time.Time) predicate.RoleMaster {
	return predicate.RoleMaster(sql.FieldGTE(FieldCreatedDate, v))
}

// CreatedDateLT applies the LT predicate on the "CreatedDate" field.
func CreatedDateLT(v time.Time) predicate.RoleMaster {
	return predicate.RoleMaster(sql.FieldLT(FieldCreatedDate, v))
}

// CreatedDateLTE applies the LTE predicate on the "CreatedDate" field.
func CreatedDateLTE(v time.Time) predicate.RoleMaster {
	return predicate.RoleMaster(sql.FieldLTE(FieldCreatedDate, v))
}

// CreatedDateIsNil applies the IsNil predicate on the "CreatedDate" field.
func CreatedDateIsNil() predicate.RoleMaster {
	return predicate.RoleMaster(sql.FieldIsNull(FieldCreatedDate))
}

// CreatedDateNotNil applies the NotNil predicate on the "CreatedDate" field.
func CreatedDateNotNil() predicate.RoleMaster {
	return predicate.RoleMaster(sql.FieldNotNull(FieldCreatedDate))
}

// StatusEQ applies the EQ predicate on the "Status" field.
func StatusEQ(v bool) predicate.RoleMaster {
	return predicate.RoleMaster(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "Status" field.
func StatusNEQ(v bool) predicate.RoleMaster {
	return predicate.RoleMaster(sql.FieldNEQ(FieldStatus, v))
}

// RoleCodeEQ applies the EQ predicate on the "RoleCode" field.
func RoleCodeEQ(v int32) predicate.RoleMaster {
	return predicate.RoleMaster(sql.FieldEQ(FieldRoleCode, v))
}

// RoleCodeNEQ applies the NEQ predicate on the "RoleCode" field.
func RoleCodeNEQ(v int32) predicate.RoleMaster {
	return predicate.RoleMaster(sql.FieldNEQ(FieldRoleCode, v))
}

// RoleCodeIn applies the In predicate on the "RoleCode" field.
func RoleCodeIn(vs ...int32) predicate.RoleMaster {
	return predicate.RoleMaster(sql.FieldIn(FieldRoleCode, vs...))
}

// RoleCodeNotIn applies the NotIn predicate on the "RoleCode" field.
func RoleCodeNotIn(vs ...int32) predicate.RoleMaster {
	return predicate.RoleMaster(sql.FieldNotIn(FieldRoleCode, vs...))
}

// RoleCodeGT applies the GT predicate on the "RoleCode" field.
func RoleCodeGT(v int32) predicate.RoleMaster {
	return predicate.RoleMaster(sql.FieldGT(FieldRoleCode, v))
}

// RoleCodeGTE applies the GTE predicate on the "RoleCode" field.
func RoleCodeGTE(v int32) predicate.RoleMaster {
	return predicate.RoleMaster(sql.FieldGTE(FieldRoleCode, v))
}

// RoleCodeLT applies the LT predicate on the "RoleCode" field.
func RoleCodeLT(v int32) predicate.RoleMaster {
	return predicate.RoleMaster(sql.FieldLT(FieldRoleCode, v))
}

// RoleCodeLTE applies the LTE predicate on the "RoleCode" field.
func RoleCodeLTE(v int32) predicate.RoleMaster {
	return predicate.RoleMaster(sql.FieldLTE(FieldRoleCode, v))
}

// RoleCodeIsNil applies the IsNil predicate on the "RoleCode" field.
func RoleCodeIsNil() predicate.RoleMaster {
	return predicate.RoleMaster(sql.FieldIsNull(FieldRoleCode))
}

// RoleCodeNotNil applies the NotNil predicate on the "RoleCode" field.
func RoleCodeNotNil() predicate.RoleMaster {
	return predicate.RoleMaster(sql.FieldNotNull(FieldRoleCode))
}

// HasRoles applies the HasEdge predicate on the "roles" edge.
func HasRoles() predicate.RoleMaster {
	return predicate.RoleMaster(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, RolesTable, RolesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRolesWith applies the HasEdge predicate on the "roles" edge with a given conditions (other predicates).
func HasRolesWith(preds ...predicate.AdminLogin) predicate.RoleMaster {
	return predicate.RoleMaster(func(s *sql.Selector) {
		step := newRolesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasRolesRef applies the HasEdge predicate on the "Roles_Ref" edge.
func HasRolesRef() predicate.RoleMaster {
	return predicate.RoleMaster(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, RolesRefTable, RolesRefColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRolesRefWith applies the HasEdge predicate on the "Roles_Ref" edge with a given conditions (other predicates).
func HasRolesRefWith(preds ...predicate.UserMaster) predicate.RoleMaster {
	return predicate.RoleMaster(func(s *sql.Selector) {
		step := newRolesRefStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasRolesPSRef applies the HasEdge predicate on the "Roles_PS_Ref" edge.
func HasRolesPSRef() predicate.RoleMaster {
	return predicate.RoleMaster(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, RolesPSRefTable, RolesPSRefColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRolesPSRefWith applies the HasEdge predicate on the "Roles_PS_Ref" edge with a given conditions (other predicates).
func HasRolesPSRefWith(preds ...predicate.Exam_Applications_PS) predicate.RoleMaster {
	return predicate.RoleMaster(func(s *sql.Selector) {
		step := newRolesPSRefStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasRolesIPRef applies the HasEdge predicate on the "Roles_IP_Ref" edge.
func HasRolesIPRef() predicate.RoleMaster {
	return predicate.RoleMaster(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, RolesIPRefTable, RolesIPRefColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRolesIPRefWith applies the HasEdge predicate on the "Roles_IP_Ref" edge with a given conditions (other predicates).
func HasRolesIPRefWith(preds ...predicate.Exam_Applications_IP) predicate.RoleMaster {
	return predicate.RoleMaster(func(s *sql.Selector) {
		step := newRolesIPRefStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasRolesGDSPARef applies the HasEdge predicate on the "Roles_GDSPA_Ref" edge.
func HasRolesGDSPARef() predicate.RoleMaster {
	return predicate.RoleMaster(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, RolesGDSPARefTable, RolesGDSPARefColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRolesGDSPARefWith applies the HasEdge predicate on the "Roles_GDSPA_Ref" edge with a given conditions (other predicates).
func HasRolesGDSPARefWith(preds ...predicate.Exam_Applications_GDSPA) predicate.RoleMaster {
	return predicate.RoleMaster(func(s *sql.Selector) {
		step := newRolesGDSPARefStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasRolesGDSPMRef applies the HasEdge predicate on the "Roles_GDSPM_Ref" edge.
func HasRolesGDSPMRef() predicate.RoleMaster {
	return predicate.RoleMaster(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, RolesGDSPMRefTable, RolesGDSPMRefColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRolesGDSPMRefWith applies the HasEdge predicate on the "Roles_GDSPM_Ref" edge with a given conditions (other predicates).
func HasRolesGDSPMRefWith(preds ...predicate.Exam_Applications_GDSPM) predicate.RoleMaster {
	return predicate.RoleMaster(func(s *sql.Selector) {
		step := newRolesGDSPMRefStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasRolesPMPARef applies the HasEdge predicate on the "Roles_PMPA_Ref" edge.
func HasRolesPMPARef() predicate.RoleMaster {
	return predicate.RoleMaster(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, RolesPMPARefTable, RolesPMPARefColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRolesPMPARefWith applies the HasEdge predicate on the "Roles_PMPA_Ref" edge with a given conditions (other predicates).
func HasRolesPMPARefWith(preds ...predicate.Exam_Applications_PMPA) predicate.RoleMaster {
	return predicate.RoleMaster(func(s *sql.Selector) {
		step := newRolesPMPARefStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasRolesMTSPMMGRef applies the HasEdge predicate on the "Roles_MTSPMMG_Ref" edge.
func HasRolesMTSPMMGRef() predicate.RoleMaster {
	return predicate.RoleMaster(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, RolesMTSPMMGRefTable, RolesMTSPMMGRefColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRolesMTSPMMGRefWith applies the HasEdge predicate on the "Roles_MTSPMMG_Ref" edge with a given conditions (other predicates).
func HasRolesMTSPMMGRefWith(preds ...predicate.Exam_Application_MTSPMMG) predicate.RoleMaster {
	return predicate.RoleMaster(func(s *sql.Selector) {
		step := newRolesMTSPMMGRefStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.RoleMaster) predicate.RoleMaster {
	return predicate.RoleMaster(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.RoleMaster) predicate.RoleMaster {
	return predicate.RoleMaster(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.RoleMaster) predicate.RoleMaster {
	return predicate.RoleMaster(func(s *sql.Selector) {
		p(s.Not())
	})
}
