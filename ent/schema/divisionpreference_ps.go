// Code generated by entimport, DO NOT EDIT.

package schema

import (
	
	"entgo.io/ent/dialect/entsql"
	"entgo.io/ent"
	//"time"
	"entgo.io/ent/dialect"
	"entgo.io/ent/schema"
	"entgo.io/ent/schema/edge"
	"entgo.io/ent/schema/field"
	//"encoding/json"
)

// Exam holds the schema definition for the Exam entity.
type PlaceOfPreferencePS struct {
	ent.Schema
}

/// Fields of the Exam.
func (PlaceOfPreferencePS) Fields() []ent.Field {
	return []ent.Field{field.Int32("id").StorageKey("PlacePrefId"), 
	field.Int64("ApplicationID").Optional(),
	field.Int32("PlacePrefNo").Optional(), 
	field.String("PlacePrefValue").Optional(), 	
	field.Int64("EmployeeID").Optional(),	
	field.Time("UpdatedAt").
	SchemaType(map[string]string{
		dialect.Postgres: "date",
	}).
	/*Default(func() time.Time {
		now := time.Now().UTC().Truncate(24 * time.Hour)
		return time.Date(now.Year(), now.Month(), now.Day(), 0, 0, 0, 0, time.UTC)
	}).*/
	Optional(),
	field.String("UpdatedBy").Default("API").Optional(),}
}
// Edges of the Exam.
func (PlaceOfPreferencePS) Edges() []ent.Edge {
	return []ent.Edge{edge.From("PlaceApplnPS_Ref", Exam_Applications_PS.Type).Ref("CirclePrefRefPS").Unique().Field("ApplicationID"),
	}

}
func (PlaceOfPreferencePS) Annotations() []schema.Annotation {
	return []schema.Annotation{entsql.Annotation{Table: "PlaceOfPreferencePS"}}
}

