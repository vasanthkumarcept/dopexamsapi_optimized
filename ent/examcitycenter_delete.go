// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"recruit/ent/examcitycenter"
	"recruit/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ExamCityCenterDelete is the builder for deleting a ExamCityCenter entity.
type ExamCityCenterDelete struct {
	config
	hooks    []Hook
	mutation *ExamCityCenterMutation
}

// Where appends a list predicates to the ExamCityCenterDelete builder.
func (eccd *ExamCityCenterDelete) Where(ps ...predicate.ExamCityCenter) *ExamCityCenterDelete {
	eccd.mutation.Where(ps...)
	return eccd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (eccd *ExamCityCenterDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, eccd.sqlExec, eccd.mutation, eccd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (eccd *ExamCityCenterDelete) ExecX(ctx context.Context) int {
	n, err := eccd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (eccd *ExamCityCenterDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(examcitycenter.Table, sqlgraph.NewFieldSpec(examcitycenter.FieldID, field.TypeInt32))
	if ps := eccd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, eccd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	eccd.mutation.done = true
	return affected, err
}

// ExamCityCenterDeleteOne is the builder for deleting a single ExamCityCenter entity.
type ExamCityCenterDeleteOne struct {
	eccd *ExamCityCenterDelete
}

// Where appends a list predicates to the ExamCityCenterDelete builder.
func (eccdo *ExamCityCenterDeleteOne) Where(ps ...predicate.ExamCityCenter) *ExamCityCenterDeleteOne {
	eccdo.eccd.mutation.Where(ps...)
	return eccdo
}

// Exec executes the deletion query.
func (eccdo *ExamCityCenterDeleteOne) Exec(ctx context.Context) error {
	n, err := eccdo.eccd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{examcitycenter.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (eccdo *ExamCityCenterDeleteOne) ExecX(ctx context.Context) {
	if err := eccdo.Exec(ctx); err != nil {
		panic(err)
	}
}
