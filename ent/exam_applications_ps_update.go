// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"recruit/ent/cadre_choice_ps"
	"recruit/ent/center"
	"recruit/ent/circlesummaryforno"
	"recruit/ent/exam"
	"recruit/ent/exam_applications_ps"
	"recruit/ent/examcitycenter"
	"recruit/ent/logs"
	"recruit/ent/placeofpreferenceps"
	"recruit/ent/predicate"
	"recruit/ent/recommendationspsapplications"
	"recruit/ent/rolemaster"
	"recruit/ent/usermaster"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
)

// ExamApplicationsPSUpdate is the builder for updating Exam_Applications_PS entities.
type ExamApplicationsPSUpdate struct {
	config
	hooks    []Hook
	mutation *ExamApplicationsPSMutation
}

// Where appends a list predicates to the ExamApplicationsPSUpdate builder.
func (eapu *ExamApplicationsPSUpdate) Where(ps ...predicate.Exam_Applications_PS) *ExamApplicationsPSUpdate {
	eapu.mutation.Where(ps...)
	return eapu
}

// SetApplicationNumber sets the "ApplicationNumber" field.
func (eapu *ExamApplicationsPSUpdate) SetApplicationNumber(s string) *ExamApplicationsPSUpdate {
	eapu.mutation.SetApplicationNumber(s)
	return eapu
}

// SetNillableApplicationNumber sets the "ApplicationNumber" field if the given value is not nil.
func (eapu *ExamApplicationsPSUpdate) SetNillableApplicationNumber(s *string) *ExamApplicationsPSUpdate {
	if s != nil {
		eapu.SetApplicationNumber(*s)
	}
	return eapu
}

// ClearApplicationNumber clears the value of the "ApplicationNumber" field.
func (eapu *ExamApplicationsPSUpdate) ClearApplicationNumber() *ExamApplicationsPSUpdate {
	eapu.mutation.ClearApplicationNumber()
	return eapu
}

// SetApplnSubmittedDate sets the "ApplnSubmittedDate" field.
func (eapu *ExamApplicationsPSUpdate) SetApplnSubmittedDate(t time.Time) *ExamApplicationsPSUpdate {
	eapu.mutation.SetApplnSubmittedDate(t)
	return eapu
}

// SetNillableApplnSubmittedDate sets the "ApplnSubmittedDate" field if the given value is not nil.
func (eapu *ExamApplicationsPSUpdate) SetNillableApplnSubmittedDate(t *time.Time) *ExamApplicationsPSUpdate {
	if t != nil {
		eapu.SetApplnSubmittedDate(*t)
	}
	return eapu
}

// ClearApplnSubmittedDate clears the value of the "ApplnSubmittedDate" field.
func (eapu *ExamApplicationsPSUpdate) ClearApplnSubmittedDate() *ExamApplicationsPSUpdate {
	eapu.mutation.ClearApplnSubmittedDate()
	return eapu
}

// SetExamCode sets the "ExamCode" field.
func (eapu *ExamApplicationsPSUpdate) SetExamCode(i int32) *ExamApplicationsPSUpdate {
	eapu.mutation.SetExamCode(i)
	return eapu
}

// SetNillableExamCode sets the "ExamCode" field if the given value is not nil.
func (eapu *ExamApplicationsPSUpdate) SetNillableExamCode(i *int32) *ExamApplicationsPSUpdate {
	if i != nil {
		eapu.SetExamCode(*i)
	}
	return eapu
}

// ClearExamCode clears the value of the "ExamCode" field.
func (eapu *ExamApplicationsPSUpdate) ClearExamCode() *ExamApplicationsPSUpdate {
	eapu.mutation.ClearExamCode()
	return eapu
}

// SetExamShortName sets the "ExamShortName" field.
func (eapu *ExamApplicationsPSUpdate) SetExamShortName(s string) *ExamApplicationsPSUpdate {
	eapu.mutation.SetExamShortName(s)
	return eapu
}

// SetNillableExamShortName sets the "ExamShortName" field if the given value is not nil.
func (eapu *ExamApplicationsPSUpdate) SetNillableExamShortName(s *string) *ExamApplicationsPSUpdate {
	if s != nil {
		eapu.SetExamShortName(*s)
	}
	return eapu
}

// ClearExamShortName clears the value of the "ExamShortName" field.
func (eapu *ExamApplicationsPSUpdate) ClearExamShortName() *ExamApplicationsPSUpdate {
	eapu.mutation.ClearExamShortName()
	return eapu
}

// SetExamName sets the "ExamName" field.
func (eapu *ExamApplicationsPSUpdate) SetExamName(s string) *ExamApplicationsPSUpdate {
	eapu.mutation.SetExamName(s)
	return eapu
}

// SetNillableExamName sets the "ExamName" field if the given value is not nil.
func (eapu *ExamApplicationsPSUpdate) SetNillableExamName(s *string) *ExamApplicationsPSUpdate {
	if s != nil {
		eapu.SetExamName(*s)
	}
	return eapu
}

// ClearExamName clears the value of the "ExamName" field.
func (eapu *ExamApplicationsPSUpdate) ClearExamName() *ExamApplicationsPSUpdate {
	eapu.mutation.ClearExamName()
	return eapu
}

// SetSmsExamShortName sets the "SmsExamShortName" field.
func (eapu *ExamApplicationsPSUpdate) SetSmsExamShortName(s string) *ExamApplicationsPSUpdate {
	eapu.mutation.SetSmsExamShortName(s)
	return eapu
}

// SetNillableSmsExamShortName sets the "SmsExamShortName" field if the given value is not nil.
func (eapu *ExamApplicationsPSUpdate) SetNillableSmsExamShortName(s *string) *ExamApplicationsPSUpdate {
	if s != nil {
		eapu.SetSmsExamShortName(*s)
	}
	return eapu
}

// ClearSmsExamShortName clears the value of the "SmsExamShortName" field.
func (eapu *ExamApplicationsPSUpdate) ClearSmsExamShortName() *ExamApplicationsPSUpdate {
	eapu.mutation.ClearSmsExamShortName()
	return eapu
}

// SetExamYear sets the "ExamYear" field.
func (eapu *ExamApplicationsPSUpdate) SetExamYear(s string) *ExamApplicationsPSUpdate {
	eapu.mutation.SetExamYear(s)
	return eapu
}

// SetNillableExamYear sets the "ExamYear" field if the given value is not nil.
func (eapu *ExamApplicationsPSUpdate) SetNillableExamYear(s *string) *ExamApplicationsPSUpdate {
	if s != nil {
		eapu.SetExamYear(*s)
	}
	return eapu
}

// ClearExamYear clears the value of the "ExamYear" field.
func (eapu *ExamApplicationsPSUpdate) ClearExamYear() *ExamApplicationsPSUpdate {
	eapu.mutation.ClearExamYear()
	return eapu
}

// SetUserID sets the "UserID" field.
func (eapu *ExamApplicationsPSUpdate) SetUserID(i int32) *ExamApplicationsPSUpdate {
	eapu.mutation.ResetUserID()
	eapu.mutation.SetUserID(i)
	return eapu
}

// SetNillableUserID sets the "UserID" field if the given value is not nil.
func (eapu *ExamApplicationsPSUpdate) SetNillableUserID(i *int32) *ExamApplicationsPSUpdate {
	if i != nil {
		eapu.SetUserID(*i)
	}
	return eapu
}

// AddUserID adds i to the "UserID" field.
func (eapu *ExamApplicationsPSUpdate) AddUserID(i int32) *ExamApplicationsPSUpdate {
	eapu.mutation.AddUserID(i)
	return eapu
}

// ClearUserID clears the value of the "UserID" field.
func (eapu *ExamApplicationsPSUpdate) ClearUserID() *ExamApplicationsPSUpdate {
	eapu.mutation.ClearUserID()
	return eapu
}

// SetEmployeeID sets the "EmployeeID" field.
func (eapu *ExamApplicationsPSUpdate) SetEmployeeID(i int64) *ExamApplicationsPSUpdate {
	eapu.mutation.ResetEmployeeID()
	eapu.mutation.SetEmployeeID(i)
	return eapu
}

// SetNillableEmployeeID sets the "EmployeeID" field if the given value is not nil.
func (eapu *ExamApplicationsPSUpdate) SetNillableEmployeeID(i *int64) *ExamApplicationsPSUpdate {
	if i != nil {
		eapu.SetEmployeeID(*i)
	}
	return eapu
}

// AddEmployeeID adds i to the "EmployeeID" field.
func (eapu *ExamApplicationsPSUpdate) AddEmployeeID(i int64) *ExamApplicationsPSUpdate {
	eapu.mutation.AddEmployeeID(i)
	return eapu
}

// ClearEmployeeID clears the value of the "EmployeeID" field.
func (eapu *ExamApplicationsPSUpdate) ClearEmployeeID() *ExamApplicationsPSUpdate {
	eapu.mutation.ClearEmployeeID()
	return eapu
}

// SetEmployeeName sets the "EmployeeName" field.
func (eapu *ExamApplicationsPSUpdate) SetEmployeeName(s string) *ExamApplicationsPSUpdate {
	eapu.mutation.SetEmployeeName(s)
	return eapu
}

// SetNillableEmployeeName sets the "EmployeeName" field if the given value is not nil.
func (eapu *ExamApplicationsPSUpdate) SetNillableEmployeeName(s *string) *ExamApplicationsPSUpdate {
	if s != nil {
		eapu.SetEmployeeName(*s)
	}
	return eapu
}

// ClearEmployeeName clears the value of the "EmployeeName" field.
func (eapu *ExamApplicationsPSUpdate) ClearEmployeeName() *ExamApplicationsPSUpdate {
	eapu.mutation.ClearEmployeeName()
	return eapu
}

// SetDOB sets the "DOB" field.
func (eapu *ExamApplicationsPSUpdate) SetDOB(s string) *ExamApplicationsPSUpdate {
	eapu.mutation.SetDOB(s)
	return eapu
}

// SetNillableDOB sets the "DOB" field if the given value is not nil.
func (eapu *ExamApplicationsPSUpdate) SetNillableDOB(s *string) *ExamApplicationsPSUpdate {
	if s != nil {
		eapu.SetDOB(*s)
	}
	return eapu
}

// ClearDOB clears the value of the "DOB" field.
func (eapu *ExamApplicationsPSUpdate) ClearDOB() *ExamApplicationsPSUpdate {
	eapu.mutation.ClearDOB()
	return eapu
}

// SetGender sets the "Gender" field.
func (eapu *ExamApplicationsPSUpdate) SetGender(s string) *ExamApplicationsPSUpdate {
	eapu.mutation.SetGender(s)
	return eapu
}

// SetNillableGender sets the "Gender" field if the given value is not nil.
func (eapu *ExamApplicationsPSUpdate) SetNillableGender(s *string) *ExamApplicationsPSUpdate {
	if s != nil {
		eapu.SetGender(*s)
	}
	return eapu
}

// ClearGender clears the value of the "Gender" field.
func (eapu *ExamApplicationsPSUpdate) ClearGender() *ExamApplicationsPSUpdate {
	eapu.mutation.ClearGender()
	return eapu
}

// SetMobileNumber sets the "MobileNumber" field.
func (eapu *ExamApplicationsPSUpdate) SetMobileNumber(s string) *ExamApplicationsPSUpdate {
	eapu.mutation.SetMobileNumber(s)
	return eapu
}

// SetNillableMobileNumber sets the "MobileNumber" field if the given value is not nil.
func (eapu *ExamApplicationsPSUpdate) SetNillableMobileNumber(s *string) *ExamApplicationsPSUpdate {
	if s != nil {
		eapu.SetMobileNumber(*s)
	}
	return eapu
}

// ClearMobileNumber clears the value of the "MobileNumber" field.
func (eapu *ExamApplicationsPSUpdate) ClearMobileNumber() *ExamApplicationsPSUpdate {
	eapu.mutation.ClearMobileNumber()
	return eapu
}

// SetEmailID sets the "EmailID" field.
func (eapu *ExamApplicationsPSUpdate) SetEmailID(s string) *ExamApplicationsPSUpdate {
	eapu.mutation.SetEmailID(s)
	return eapu
}

// SetNillableEmailID sets the "EmailID" field if the given value is not nil.
func (eapu *ExamApplicationsPSUpdate) SetNillableEmailID(s *string) *ExamApplicationsPSUpdate {
	if s != nil {
		eapu.SetEmailID(*s)
	}
	return eapu
}

// ClearEmailID clears the value of the "EmailID" field.
func (eapu *ExamApplicationsPSUpdate) ClearEmailID() *ExamApplicationsPSUpdate {
	eapu.mutation.ClearEmailID()
	return eapu
}

// SetCategoryCode sets the "CategoryCode" field.
func (eapu *ExamApplicationsPSUpdate) SetCategoryCode(s string) *ExamApplicationsPSUpdate {
	eapu.mutation.SetCategoryCode(s)
	return eapu
}

// SetNillableCategoryCode sets the "CategoryCode" field if the given value is not nil.
func (eapu *ExamApplicationsPSUpdate) SetNillableCategoryCode(s *string) *ExamApplicationsPSUpdate {
	if s != nil {
		eapu.SetCategoryCode(*s)
	}
	return eapu
}

// ClearCategoryCode clears the value of the "CategoryCode" field.
func (eapu *ExamApplicationsPSUpdate) ClearCategoryCode() *ExamApplicationsPSUpdate {
	eapu.mutation.ClearCategoryCode()
	return eapu
}

// SetCategoryDescription sets the "CategoryDescription" field.
func (eapu *ExamApplicationsPSUpdate) SetCategoryDescription(s string) *ExamApplicationsPSUpdate {
	eapu.mutation.SetCategoryDescription(s)
	return eapu
}

// SetNillableCategoryDescription sets the "CategoryDescription" field if the given value is not nil.
func (eapu *ExamApplicationsPSUpdate) SetNillableCategoryDescription(s *string) *ExamApplicationsPSUpdate {
	if s != nil {
		eapu.SetCategoryDescription(*s)
	}
	return eapu
}

// ClearCategoryDescription clears the value of the "CategoryDescription" field.
func (eapu *ExamApplicationsPSUpdate) ClearCategoryDescription() *ExamApplicationsPSUpdate {
	eapu.mutation.ClearCategoryDescription()
	return eapu
}

// SetDisabilityTypeID sets the "DisabilityTypeID" field.
func (eapu *ExamApplicationsPSUpdate) SetDisabilityTypeID(s string) *ExamApplicationsPSUpdate {
	eapu.mutation.SetDisabilityTypeID(s)
	return eapu
}

// SetNillableDisabilityTypeID sets the "DisabilityTypeID" field if the given value is not nil.
func (eapu *ExamApplicationsPSUpdate) SetNillableDisabilityTypeID(s *string) *ExamApplicationsPSUpdate {
	if s != nil {
		eapu.SetDisabilityTypeID(*s)
	}
	return eapu
}

// ClearDisabilityTypeID clears the value of the "DisabilityTypeID" field.
func (eapu *ExamApplicationsPSUpdate) ClearDisabilityTypeID() *ExamApplicationsPSUpdate {
	eapu.mutation.ClearDisabilityTypeID()
	return eapu
}

// SetDisabilityTypeCode sets the "DisabilityTypeCode" field.
func (eapu *ExamApplicationsPSUpdate) SetDisabilityTypeCode(s string) *ExamApplicationsPSUpdate {
	eapu.mutation.SetDisabilityTypeCode(s)
	return eapu
}

// SetNillableDisabilityTypeCode sets the "DisabilityTypeCode" field if the given value is not nil.
func (eapu *ExamApplicationsPSUpdate) SetNillableDisabilityTypeCode(s *string) *ExamApplicationsPSUpdate {
	if s != nil {
		eapu.SetDisabilityTypeCode(*s)
	}
	return eapu
}

// ClearDisabilityTypeCode clears the value of the "DisabilityTypeCode" field.
func (eapu *ExamApplicationsPSUpdate) ClearDisabilityTypeCode() *ExamApplicationsPSUpdate {
	eapu.mutation.ClearDisabilityTypeCode()
	return eapu
}

// SetDisabilityTypeDescription sets the "DisabilityTypeDescription" field.
func (eapu *ExamApplicationsPSUpdate) SetDisabilityTypeDescription(s string) *ExamApplicationsPSUpdate {
	eapu.mutation.SetDisabilityTypeDescription(s)
	return eapu
}

// SetNillableDisabilityTypeDescription sets the "DisabilityTypeDescription" field if the given value is not nil.
func (eapu *ExamApplicationsPSUpdate) SetNillableDisabilityTypeDescription(s *string) *ExamApplicationsPSUpdate {
	if s != nil {
		eapu.SetDisabilityTypeDescription(*s)
	}
	return eapu
}

// ClearDisabilityTypeDescription clears the value of the "DisabilityTypeDescription" field.
func (eapu *ExamApplicationsPSUpdate) ClearDisabilityTypeDescription() *ExamApplicationsPSUpdate {
	eapu.mutation.ClearDisabilityTypeDescription()
	return eapu
}

// SetDisabilityPercentage sets the "DisabilityPercentage" field.
func (eapu *ExamApplicationsPSUpdate) SetDisabilityPercentage(i int32) *ExamApplicationsPSUpdate {
	eapu.mutation.ResetDisabilityPercentage()
	eapu.mutation.SetDisabilityPercentage(i)
	return eapu
}

// SetNillableDisabilityPercentage sets the "DisabilityPercentage" field if the given value is not nil.
func (eapu *ExamApplicationsPSUpdate) SetNillableDisabilityPercentage(i *int32) *ExamApplicationsPSUpdate {
	if i != nil {
		eapu.SetDisabilityPercentage(*i)
	}
	return eapu
}

// AddDisabilityPercentage adds i to the "DisabilityPercentage" field.
func (eapu *ExamApplicationsPSUpdate) AddDisabilityPercentage(i int32) *ExamApplicationsPSUpdate {
	eapu.mutation.AddDisabilityPercentage(i)
	return eapu
}

// ClearDisabilityPercentage clears the value of the "DisabilityPercentage" field.
func (eapu *ExamApplicationsPSUpdate) ClearDisabilityPercentage() *ExamApplicationsPSUpdate {
	eapu.mutation.ClearDisabilityPercentage()
	return eapu
}

// SetDCCS sets the "DCCS" field.
func (eapu *ExamApplicationsPSUpdate) SetDCCS(s string) *ExamApplicationsPSUpdate {
	eapu.mutation.SetDCCS(s)
	return eapu
}

// SetNillableDCCS sets the "DCCS" field if the given value is not nil.
func (eapu *ExamApplicationsPSUpdate) SetNillableDCCS(s *string) *ExamApplicationsPSUpdate {
	if s != nil {
		eapu.SetDCCS(*s)
	}
	return eapu
}

// ClearDCCS clears the value of the "DCCS" field.
func (eapu *ExamApplicationsPSUpdate) ClearDCCS() *ExamApplicationsPSUpdate {
	eapu.mutation.ClearDCCS()
	return eapu
}

// SetEntryPostCode sets the "EntryPostCode" field.
func (eapu *ExamApplicationsPSUpdate) SetEntryPostCode(s string) *ExamApplicationsPSUpdate {
	eapu.mutation.SetEntryPostCode(s)
	return eapu
}

// SetNillableEntryPostCode sets the "EntryPostCode" field if the given value is not nil.
func (eapu *ExamApplicationsPSUpdate) SetNillableEntryPostCode(s *string) *ExamApplicationsPSUpdate {
	if s != nil {
		eapu.SetEntryPostCode(*s)
	}
	return eapu
}

// ClearEntryPostCode clears the value of the "EntryPostCode" field.
func (eapu *ExamApplicationsPSUpdate) ClearEntryPostCode() *ExamApplicationsPSUpdate {
	eapu.mutation.ClearEntryPostCode()
	return eapu
}

// SetEntryPostDescription sets the "EntryPostDescription" field.
func (eapu *ExamApplicationsPSUpdate) SetEntryPostDescription(s string) *ExamApplicationsPSUpdate {
	eapu.mutation.SetEntryPostDescription(s)
	return eapu
}

// SetNillableEntryPostDescription sets the "EntryPostDescription" field if the given value is not nil.
func (eapu *ExamApplicationsPSUpdate) SetNillableEntryPostDescription(s *string) *ExamApplicationsPSUpdate {
	if s != nil {
		eapu.SetEntryPostDescription(*s)
	}
	return eapu
}

// ClearEntryPostDescription clears the value of the "EntryPostDescription" field.
func (eapu *ExamApplicationsPSUpdate) ClearEntryPostDescription() *ExamApplicationsPSUpdate {
	eapu.mutation.ClearEntryPostDescription()
	return eapu
}

// SetPresentPostCode sets the "PresentPostCode" field.
func (eapu *ExamApplicationsPSUpdate) SetPresentPostCode(s string) *ExamApplicationsPSUpdate {
	eapu.mutation.SetPresentPostCode(s)
	return eapu
}

// SetNillablePresentPostCode sets the "PresentPostCode" field if the given value is not nil.
func (eapu *ExamApplicationsPSUpdate) SetNillablePresentPostCode(s *string) *ExamApplicationsPSUpdate {
	if s != nil {
		eapu.SetPresentPostCode(*s)
	}
	return eapu
}

// ClearPresentPostCode clears the value of the "PresentPostCode" field.
func (eapu *ExamApplicationsPSUpdate) ClearPresentPostCode() *ExamApplicationsPSUpdate {
	eapu.mutation.ClearPresentPostCode()
	return eapu
}

// SetPresentPostDescription sets the "PresentPostDescription" field.
func (eapu *ExamApplicationsPSUpdate) SetPresentPostDescription(s string) *ExamApplicationsPSUpdate {
	eapu.mutation.SetPresentPostDescription(s)
	return eapu
}

// SetNillablePresentPostDescription sets the "PresentPostDescription" field if the given value is not nil.
func (eapu *ExamApplicationsPSUpdate) SetNillablePresentPostDescription(s *string) *ExamApplicationsPSUpdate {
	if s != nil {
		eapu.SetPresentPostDescription(*s)
	}
	return eapu
}

// ClearPresentPostDescription clears the value of the "PresentPostDescription" field.
func (eapu *ExamApplicationsPSUpdate) ClearPresentPostDescription() *ExamApplicationsPSUpdate {
	eapu.mutation.ClearPresentPostDescription()
	return eapu
}

// SetFeederPostCode sets the "FeederPostCode" field.
func (eapu *ExamApplicationsPSUpdate) SetFeederPostCode(s string) *ExamApplicationsPSUpdate {
	eapu.mutation.SetFeederPostCode(s)
	return eapu
}

// SetNillableFeederPostCode sets the "FeederPostCode" field if the given value is not nil.
func (eapu *ExamApplicationsPSUpdate) SetNillableFeederPostCode(s *string) *ExamApplicationsPSUpdate {
	if s != nil {
		eapu.SetFeederPostCode(*s)
	}
	return eapu
}

// ClearFeederPostCode clears the value of the "FeederPostCode" field.
func (eapu *ExamApplicationsPSUpdate) ClearFeederPostCode() *ExamApplicationsPSUpdate {
	eapu.mutation.ClearFeederPostCode()
	return eapu
}

// SetFeederPostDescription sets the "FeederPostDescription" field.
func (eapu *ExamApplicationsPSUpdate) SetFeederPostDescription(s string) *ExamApplicationsPSUpdate {
	eapu.mutation.SetFeederPostDescription(s)
	return eapu
}

// SetNillableFeederPostDescription sets the "FeederPostDescription" field if the given value is not nil.
func (eapu *ExamApplicationsPSUpdate) SetNillableFeederPostDescription(s *string) *ExamApplicationsPSUpdate {
	if s != nil {
		eapu.SetFeederPostDescription(*s)
	}
	return eapu
}

// ClearFeederPostDescription clears the value of the "FeederPostDescription" field.
func (eapu *ExamApplicationsPSUpdate) ClearFeederPostDescription() *ExamApplicationsPSUpdate {
	eapu.mutation.ClearFeederPostDescription()
	return eapu
}

// SetFeederPostJoiningDate sets the "FeederPostJoiningDate" field.
func (eapu *ExamApplicationsPSUpdate) SetFeederPostJoiningDate(s string) *ExamApplicationsPSUpdate {
	eapu.mutation.SetFeederPostJoiningDate(s)
	return eapu
}

// SetNillableFeederPostJoiningDate sets the "FeederPostJoiningDate" field if the given value is not nil.
func (eapu *ExamApplicationsPSUpdate) SetNillableFeederPostJoiningDate(s *string) *ExamApplicationsPSUpdate {
	if s != nil {
		eapu.SetFeederPostJoiningDate(*s)
	}
	return eapu
}

// ClearFeederPostJoiningDate clears the value of the "FeederPostJoiningDate" field.
func (eapu *ExamApplicationsPSUpdate) ClearFeederPostJoiningDate() *ExamApplicationsPSUpdate {
	eapu.mutation.ClearFeederPostJoiningDate()
	return eapu
}

// SetDesignationID sets the "DesignationID" field.
func (eapu *ExamApplicationsPSUpdate) SetDesignationID(s string) *ExamApplicationsPSUpdate {
	eapu.mutation.SetDesignationID(s)
	return eapu
}

// SetNillableDesignationID sets the "DesignationID" field if the given value is not nil.
func (eapu *ExamApplicationsPSUpdate) SetNillableDesignationID(s *string) *ExamApplicationsPSUpdate {
	if s != nil {
		eapu.SetDesignationID(*s)
	}
	return eapu
}

// ClearDesignationID clears the value of the "DesignationID" field.
func (eapu *ExamApplicationsPSUpdate) ClearDesignationID() *ExamApplicationsPSUpdate {
	eapu.mutation.ClearDesignationID()
	return eapu
}

// SetPresentDesignation sets the "PresentDesignation" field.
func (eapu *ExamApplicationsPSUpdate) SetPresentDesignation(s string) *ExamApplicationsPSUpdate {
	eapu.mutation.SetPresentDesignation(s)
	return eapu
}

// SetNillablePresentDesignation sets the "PresentDesignation" field if the given value is not nil.
func (eapu *ExamApplicationsPSUpdate) SetNillablePresentDesignation(s *string) *ExamApplicationsPSUpdate {
	if s != nil {
		eapu.SetPresentDesignation(*s)
	}
	return eapu
}

// ClearPresentDesignation clears the value of the "PresentDesignation" field.
func (eapu *ExamApplicationsPSUpdate) ClearPresentDesignation() *ExamApplicationsPSUpdate {
	eapu.mutation.ClearPresentDesignation()
	return eapu
}

// SetEducationCode sets the "EducationCode" field.
func (eapu *ExamApplicationsPSUpdate) SetEducationCode(s string) *ExamApplicationsPSUpdate {
	eapu.mutation.SetEducationCode(s)
	return eapu
}

// SetNillableEducationCode sets the "EducationCode" field if the given value is not nil.
func (eapu *ExamApplicationsPSUpdate) SetNillableEducationCode(s *string) *ExamApplicationsPSUpdate {
	if s != nil {
		eapu.SetEducationCode(*s)
	}
	return eapu
}

// ClearEducationCode clears the value of the "EducationCode" field.
func (eapu *ExamApplicationsPSUpdate) ClearEducationCode() *ExamApplicationsPSUpdate {
	eapu.mutation.ClearEducationCode()
	return eapu
}

// SetEducationDescription sets the "EducationDescription" field.
func (eapu *ExamApplicationsPSUpdate) SetEducationDescription(s string) *ExamApplicationsPSUpdate {
	eapu.mutation.SetEducationDescription(s)
	return eapu
}

// SetNillableEducationDescription sets the "EducationDescription" field if the given value is not nil.
func (eapu *ExamApplicationsPSUpdate) SetNillableEducationDescription(s *string) *ExamApplicationsPSUpdate {
	if s != nil {
		eapu.SetEducationDescription(*s)
	}
	return eapu
}

// ClearEducationDescription clears the value of the "EducationDescription" field.
func (eapu *ExamApplicationsPSUpdate) ClearEducationDescription() *ExamApplicationsPSUpdate {
	eapu.mutation.ClearEducationDescription()
	return eapu
}

// SetFacilityUniqueID sets the "FacilityUniqueID" field.
func (eapu *ExamApplicationsPSUpdate) SetFacilityUniqueID(s string) *ExamApplicationsPSUpdate {
	eapu.mutation.SetFacilityUniqueID(s)
	return eapu
}

// SetNillableFacilityUniqueID sets the "FacilityUniqueID" field if the given value is not nil.
func (eapu *ExamApplicationsPSUpdate) SetNillableFacilityUniqueID(s *string) *ExamApplicationsPSUpdate {
	if s != nil {
		eapu.SetFacilityUniqueID(*s)
	}
	return eapu
}

// ClearFacilityUniqueID clears the value of the "FacilityUniqueID" field.
func (eapu *ExamApplicationsPSUpdate) ClearFacilityUniqueID() *ExamApplicationsPSUpdate {
	eapu.mutation.ClearFacilityUniqueID()
	return eapu
}

// SetWorkingOfficePincode sets the "WorkingOfficePincode" field.
func (eapu *ExamApplicationsPSUpdate) SetWorkingOfficePincode(i int32) *ExamApplicationsPSUpdate {
	eapu.mutation.ResetWorkingOfficePincode()
	eapu.mutation.SetWorkingOfficePincode(i)
	return eapu
}

// SetNillableWorkingOfficePincode sets the "WorkingOfficePincode" field if the given value is not nil.
func (eapu *ExamApplicationsPSUpdate) SetNillableWorkingOfficePincode(i *int32) *ExamApplicationsPSUpdate {
	if i != nil {
		eapu.SetWorkingOfficePincode(*i)
	}
	return eapu
}

// AddWorkingOfficePincode adds i to the "WorkingOfficePincode" field.
func (eapu *ExamApplicationsPSUpdate) AddWorkingOfficePincode(i int32) *ExamApplicationsPSUpdate {
	eapu.mutation.AddWorkingOfficePincode(i)
	return eapu
}

// ClearWorkingOfficePincode clears the value of the "WorkingOfficePincode" field.
func (eapu *ExamApplicationsPSUpdate) ClearWorkingOfficePincode() *ExamApplicationsPSUpdate {
	eapu.mutation.ClearWorkingOfficePincode()
	return eapu
}

// SetWorkingOfficeFacilityID sets the "WorkingOfficeFacilityID" field.
func (eapu *ExamApplicationsPSUpdate) SetWorkingOfficeFacilityID(s string) *ExamApplicationsPSUpdate {
	eapu.mutation.SetWorkingOfficeFacilityID(s)
	return eapu
}

// SetNillableWorkingOfficeFacilityID sets the "WorkingOfficeFacilityID" field if the given value is not nil.
func (eapu *ExamApplicationsPSUpdate) SetNillableWorkingOfficeFacilityID(s *string) *ExamApplicationsPSUpdate {
	if s != nil {
		eapu.SetWorkingOfficeFacilityID(*s)
	}
	return eapu
}

// ClearWorkingOfficeFacilityID clears the value of the "WorkingOfficeFacilityID" field.
func (eapu *ExamApplicationsPSUpdate) ClearWorkingOfficeFacilityID() *ExamApplicationsPSUpdate {
	eapu.mutation.ClearWorkingOfficeFacilityID()
	return eapu
}

// SetWorkingOfficeName sets the "WorkingOfficeName" field.
func (eapu *ExamApplicationsPSUpdate) SetWorkingOfficeName(s string) *ExamApplicationsPSUpdate {
	eapu.mutation.SetWorkingOfficeName(s)
	return eapu
}

// SetNillableWorkingOfficeName sets the "WorkingOfficeName" field if the given value is not nil.
func (eapu *ExamApplicationsPSUpdate) SetNillableWorkingOfficeName(s *string) *ExamApplicationsPSUpdate {
	if s != nil {
		eapu.SetWorkingOfficeName(*s)
	}
	return eapu
}

// ClearWorkingOfficeName clears the value of the "WorkingOfficeName" field.
func (eapu *ExamApplicationsPSUpdate) ClearWorkingOfficeName() *ExamApplicationsPSUpdate {
	eapu.mutation.ClearWorkingOfficeName()
	return eapu
}

// SetWorkingOfficeCircleFacilityID sets the "WorkingOfficeCircleFacilityID" field.
func (eapu *ExamApplicationsPSUpdate) SetWorkingOfficeCircleFacilityID(s string) *ExamApplicationsPSUpdate {
	eapu.mutation.SetWorkingOfficeCircleFacilityID(s)
	return eapu
}

// SetNillableWorkingOfficeCircleFacilityID sets the "WorkingOfficeCircleFacilityID" field if the given value is not nil.
func (eapu *ExamApplicationsPSUpdate) SetNillableWorkingOfficeCircleFacilityID(s *string) *ExamApplicationsPSUpdate {
	if s != nil {
		eapu.SetWorkingOfficeCircleFacilityID(*s)
	}
	return eapu
}

// ClearWorkingOfficeCircleFacilityID clears the value of the "WorkingOfficeCircleFacilityID" field.
func (eapu *ExamApplicationsPSUpdate) ClearWorkingOfficeCircleFacilityID() *ExamApplicationsPSUpdate {
	eapu.mutation.ClearWorkingOfficeCircleFacilityID()
	return eapu
}

// SetWorkingOfficeCircleName sets the "WorkingOfficeCircleName" field.
func (eapu *ExamApplicationsPSUpdate) SetWorkingOfficeCircleName(s string) *ExamApplicationsPSUpdate {
	eapu.mutation.SetWorkingOfficeCircleName(s)
	return eapu
}

// SetNillableWorkingOfficeCircleName sets the "WorkingOfficeCircleName" field if the given value is not nil.
func (eapu *ExamApplicationsPSUpdate) SetNillableWorkingOfficeCircleName(s *string) *ExamApplicationsPSUpdate {
	if s != nil {
		eapu.SetWorkingOfficeCircleName(*s)
	}
	return eapu
}

// ClearWorkingOfficeCircleName clears the value of the "WorkingOfficeCircleName" field.
func (eapu *ExamApplicationsPSUpdate) ClearWorkingOfficeCircleName() *ExamApplicationsPSUpdate {
	eapu.mutation.ClearWorkingOfficeCircleName()
	return eapu
}

// SetWorkingOfficeRegionFacilityID sets the "WorkingOfficeRegionFacilityID" field.
func (eapu *ExamApplicationsPSUpdate) SetWorkingOfficeRegionFacilityID(s string) *ExamApplicationsPSUpdate {
	eapu.mutation.SetWorkingOfficeRegionFacilityID(s)
	return eapu
}

// SetNillableWorkingOfficeRegionFacilityID sets the "WorkingOfficeRegionFacilityID" field if the given value is not nil.
func (eapu *ExamApplicationsPSUpdate) SetNillableWorkingOfficeRegionFacilityID(s *string) *ExamApplicationsPSUpdate {
	if s != nil {
		eapu.SetWorkingOfficeRegionFacilityID(*s)
	}
	return eapu
}

// ClearWorkingOfficeRegionFacilityID clears the value of the "WorkingOfficeRegionFacilityID" field.
func (eapu *ExamApplicationsPSUpdate) ClearWorkingOfficeRegionFacilityID() *ExamApplicationsPSUpdate {
	eapu.mutation.ClearWorkingOfficeRegionFacilityID()
	return eapu
}

// SetWorkingOfficeRegionName sets the "WorkingOfficeRegionName" field.
func (eapu *ExamApplicationsPSUpdate) SetWorkingOfficeRegionName(s string) *ExamApplicationsPSUpdate {
	eapu.mutation.SetWorkingOfficeRegionName(s)
	return eapu
}

// SetNillableWorkingOfficeRegionName sets the "WorkingOfficeRegionName" field if the given value is not nil.
func (eapu *ExamApplicationsPSUpdate) SetNillableWorkingOfficeRegionName(s *string) *ExamApplicationsPSUpdate {
	if s != nil {
		eapu.SetWorkingOfficeRegionName(*s)
	}
	return eapu
}

// ClearWorkingOfficeRegionName clears the value of the "WorkingOfficeRegionName" field.
func (eapu *ExamApplicationsPSUpdate) ClearWorkingOfficeRegionName() *ExamApplicationsPSUpdate {
	eapu.mutation.ClearWorkingOfficeRegionName()
	return eapu
}

// SetWorkingOfficeDivisionFacilityID sets the "WorkingOfficeDivisionFacilityID" field.
func (eapu *ExamApplicationsPSUpdate) SetWorkingOfficeDivisionFacilityID(s string) *ExamApplicationsPSUpdate {
	eapu.mutation.SetWorkingOfficeDivisionFacilityID(s)
	return eapu
}

// SetNillableWorkingOfficeDivisionFacilityID sets the "WorkingOfficeDivisionFacilityID" field if the given value is not nil.
func (eapu *ExamApplicationsPSUpdate) SetNillableWorkingOfficeDivisionFacilityID(s *string) *ExamApplicationsPSUpdate {
	if s != nil {
		eapu.SetWorkingOfficeDivisionFacilityID(*s)
	}
	return eapu
}

// ClearWorkingOfficeDivisionFacilityID clears the value of the "WorkingOfficeDivisionFacilityID" field.
func (eapu *ExamApplicationsPSUpdate) ClearWorkingOfficeDivisionFacilityID() *ExamApplicationsPSUpdate {
	eapu.mutation.ClearWorkingOfficeDivisionFacilityID()
	return eapu
}

// SetWorkingOfficeDivisionName sets the "WorkingOfficeDivisionName" field.
func (eapu *ExamApplicationsPSUpdate) SetWorkingOfficeDivisionName(s string) *ExamApplicationsPSUpdate {
	eapu.mutation.SetWorkingOfficeDivisionName(s)
	return eapu
}

// SetNillableWorkingOfficeDivisionName sets the "WorkingOfficeDivisionName" field if the given value is not nil.
func (eapu *ExamApplicationsPSUpdate) SetNillableWorkingOfficeDivisionName(s *string) *ExamApplicationsPSUpdate {
	if s != nil {
		eapu.SetWorkingOfficeDivisionName(*s)
	}
	return eapu
}

// ClearWorkingOfficeDivisionName clears the value of the "WorkingOfficeDivisionName" field.
func (eapu *ExamApplicationsPSUpdate) ClearWorkingOfficeDivisionName() *ExamApplicationsPSUpdate {
	eapu.mutation.ClearWorkingOfficeDivisionName()
	return eapu
}

// SetReportingOfficeFacilityID sets the "ReportingOfficeFacilityID" field.
func (eapu *ExamApplicationsPSUpdate) SetReportingOfficeFacilityID(s string) *ExamApplicationsPSUpdate {
	eapu.mutation.SetReportingOfficeFacilityID(s)
	return eapu
}

// SetNillableReportingOfficeFacilityID sets the "ReportingOfficeFacilityID" field if the given value is not nil.
func (eapu *ExamApplicationsPSUpdate) SetNillableReportingOfficeFacilityID(s *string) *ExamApplicationsPSUpdate {
	if s != nil {
		eapu.SetReportingOfficeFacilityID(*s)
	}
	return eapu
}

// ClearReportingOfficeFacilityID clears the value of the "ReportingOfficeFacilityID" field.
func (eapu *ExamApplicationsPSUpdate) ClearReportingOfficeFacilityID() *ExamApplicationsPSUpdate {
	eapu.mutation.ClearReportingOfficeFacilityID()
	return eapu
}

// SetReportingOfficeName sets the "ReportingOfficeName" field.
func (eapu *ExamApplicationsPSUpdate) SetReportingOfficeName(s string) *ExamApplicationsPSUpdate {
	eapu.mutation.SetReportingOfficeName(s)
	return eapu
}

// SetNillableReportingOfficeName sets the "ReportingOfficeName" field if the given value is not nil.
func (eapu *ExamApplicationsPSUpdate) SetNillableReportingOfficeName(s *string) *ExamApplicationsPSUpdate {
	if s != nil {
		eapu.SetReportingOfficeName(*s)
	}
	return eapu
}

// ClearReportingOfficeName clears the value of the "ReportingOfficeName" field.
func (eapu *ExamApplicationsPSUpdate) ClearReportingOfficeName() *ExamApplicationsPSUpdate {
	eapu.mutation.ClearReportingOfficeName()
	return eapu
}

// SetLienControllingOfficeID sets the "LienControllingOfficeID" field.
func (eapu *ExamApplicationsPSUpdate) SetLienControllingOfficeID(s string) *ExamApplicationsPSUpdate {
	eapu.mutation.SetLienControllingOfficeID(s)
	return eapu
}

// SetNillableLienControllingOfficeID sets the "LienControllingOfficeID" field if the given value is not nil.
func (eapu *ExamApplicationsPSUpdate) SetNillableLienControllingOfficeID(s *string) *ExamApplicationsPSUpdate {
	if s != nil {
		eapu.SetLienControllingOfficeID(*s)
	}
	return eapu
}

// ClearLienControllingOfficeID clears the value of the "LienControllingOfficeID" field.
func (eapu *ExamApplicationsPSUpdate) ClearLienControllingOfficeID() *ExamApplicationsPSUpdate {
	eapu.mutation.ClearLienControllingOfficeID()
	return eapu
}

// SetLienControllingOfficeName sets the "LienControllingOfficeName" field.
func (eapu *ExamApplicationsPSUpdate) SetLienControllingOfficeName(s string) *ExamApplicationsPSUpdate {
	eapu.mutation.SetLienControllingOfficeName(s)
	return eapu
}

// SetNillableLienControllingOfficeName sets the "LienControllingOfficeName" field if the given value is not nil.
func (eapu *ExamApplicationsPSUpdate) SetNillableLienControllingOfficeName(s *string) *ExamApplicationsPSUpdate {
	if s != nil {
		eapu.SetLienControllingOfficeName(*s)
	}
	return eapu
}

// ClearLienControllingOfficeName clears the value of the "LienControllingOfficeName" field.
func (eapu *ExamApplicationsPSUpdate) ClearLienControllingOfficeName() *ExamApplicationsPSUpdate {
	eapu.mutation.ClearLienControllingOfficeName()
	return eapu
}

// SetInDeputation sets the "InDeputation" field.
func (eapu *ExamApplicationsPSUpdate) SetInDeputation(s string) *ExamApplicationsPSUpdate {
	eapu.mutation.SetInDeputation(s)
	return eapu
}

// SetNillableInDeputation sets the "InDeputation" field if the given value is not nil.
func (eapu *ExamApplicationsPSUpdate) SetNillableInDeputation(s *string) *ExamApplicationsPSUpdate {
	if s != nil {
		eapu.SetInDeputation(*s)
	}
	return eapu
}

// ClearInDeputation clears the value of the "InDeputation" field.
func (eapu *ExamApplicationsPSUpdate) ClearInDeputation() *ExamApplicationsPSUpdate {
	eapu.mutation.ClearInDeputation()
	return eapu
}

// SetDeputationType sets the "DeputationType" field.
func (eapu *ExamApplicationsPSUpdate) SetDeputationType(s string) *ExamApplicationsPSUpdate {
	eapu.mutation.SetDeputationType(s)
	return eapu
}

// SetNillableDeputationType sets the "DeputationType" field if the given value is not nil.
func (eapu *ExamApplicationsPSUpdate) SetNillableDeputationType(s *string) *ExamApplicationsPSUpdate {
	if s != nil {
		eapu.SetDeputationType(*s)
	}
	return eapu
}

// ClearDeputationType clears the value of the "DeputationType" field.
func (eapu *ExamApplicationsPSUpdate) ClearDeputationType() *ExamApplicationsPSUpdate {
	eapu.mutation.ClearDeputationType()
	return eapu
}

// SetDeputationOfficeUniqueId sets the "DeputationOfficeUniqueId" field.
func (eapu *ExamApplicationsPSUpdate) SetDeputationOfficeUniqueId(s string) *ExamApplicationsPSUpdate {
	eapu.mutation.SetDeputationOfficeUniqueId(s)
	return eapu
}

// SetNillableDeputationOfficeUniqueId sets the "DeputationOfficeUniqueId" field if the given value is not nil.
func (eapu *ExamApplicationsPSUpdate) SetNillableDeputationOfficeUniqueId(s *string) *ExamApplicationsPSUpdate {
	if s != nil {
		eapu.SetDeputationOfficeUniqueId(*s)
	}
	return eapu
}

// ClearDeputationOfficeUniqueId clears the value of the "DeputationOfficeUniqueId" field.
func (eapu *ExamApplicationsPSUpdate) ClearDeputationOfficeUniqueId() *ExamApplicationsPSUpdate {
	eapu.mutation.ClearDeputationOfficeUniqueId()
	return eapu
}

// SetDeputationOfficeFacilityID sets the "DeputationOfficeFacilityID" field.
func (eapu *ExamApplicationsPSUpdate) SetDeputationOfficeFacilityID(s string) *ExamApplicationsPSUpdate {
	eapu.mutation.SetDeputationOfficeFacilityID(s)
	return eapu
}

// SetNillableDeputationOfficeFacilityID sets the "DeputationOfficeFacilityID" field if the given value is not nil.
func (eapu *ExamApplicationsPSUpdate) SetNillableDeputationOfficeFacilityID(s *string) *ExamApplicationsPSUpdate {
	if s != nil {
		eapu.SetDeputationOfficeFacilityID(*s)
	}
	return eapu
}

// ClearDeputationOfficeFacilityID clears the value of the "DeputationOfficeFacilityID" field.
func (eapu *ExamApplicationsPSUpdate) ClearDeputationOfficeFacilityID() *ExamApplicationsPSUpdate {
	eapu.mutation.ClearDeputationOfficeFacilityID()
	return eapu
}

// SetDeputationOfficeName sets the "DeputationOfficeName" field.
func (eapu *ExamApplicationsPSUpdate) SetDeputationOfficeName(s string) *ExamApplicationsPSUpdate {
	eapu.mutation.SetDeputationOfficeName(s)
	return eapu
}

// SetNillableDeputationOfficeName sets the "DeputationOfficeName" field if the given value is not nil.
func (eapu *ExamApplicationsPSUpdate) SetNillableDeputationOfficeName(s *string) *ExamApplicationsPSUpdate {
	if s != nil {
		eapu.SetDeputationOfficeName(*s)
	}
	return eapu
}

// ClearDeputationOfficeName clears the value of the "DeputationOfficeName" field.
func (eapu *ExamApplicationsPSUpdate) ClearDeputationOfficeName() *ExamApplicationsPSUpdate {
	eapu.mutation.ClearDeputationOfficeName()
	return eapu
}

// SetDeputationControllingOfficeID sets the "DeputationControllingOfficeID" field.
func (eapu *ExamApplicationsPSUpdate) SetDeputationControllingOfficeID(s string) *ExamApplicationsPSUpdate {
	eapu.mutation.SetDeputationControllingOfficeID(s)
	return eapu
}

// SetNillableDeputationControllingOfficeID sets the "DeputationControllingOfficeID" field if the given value is not nil.
func (eapu *ExamApplicationsPSUpdate) SetNillableDeputationControllingOfficeID(s *string) *ExamApplicationsPSUpdate {
	if s != nil {
		eapu.SetDeputationControllingOfficeID(*s)
	}
	return eapu
}

// ClearDeputationControllingOfficeID clears the value of the "DeputationControllingOfficeID" field.
func (eapu *ExamApplicationsPSUpdate) ClearDeputationControllingOfficeID() *ExamApplicationsPSUpdate {
	eapu.mutation.ClearDeputationControllingOfficeID()
	return eapu
}

// SetDeputationControllingOfficeName sets the "DeputationControllingOfficeName" field.
func (eapu *ExamApplicationsPSUpdate) SetDeputationControllingOfficeName(s string) *ExamApplicationsPSUpdate {
	eapu.mutation.SetDeputationControllingOfficeName(s)
	return eapu
}

// SetNillableDeputationControllingOfficeName sets the "DeputationControllingOfficeName" field if the given value is not nil.
func (eapu *ExamApplicationsPSUpdate) SetNillableDeputationControllingOfficeName(s *string) *ExamApplicationsPSUpdate {
	if s != nil {
		eapu.SetDeputationControllingOfficeName(*s)
	}
	return eapu
}

// ClearDeputationControllingOfficeName clears the value of the "DeputationControllingOfficeName" field.
func (eapu *ExamApplicationsPSUpdate) ClearDeputationControllingOfficeName() *ExamApplicationsPSUpdate {
	eapu.mutation.ClearDeputationControllingOfficeName()
	return eapu
}

// SetControllingOfficeFacilityID sets the "ControllingOfficeFacilityID" field.
func (eapu *ExamApplicationsPSUpdate) SetControllingOfficeFacilityID(s string) *ExamApplicationsPSUpdate {
	eapu.mutation.SetControllingOfficeFacilityID(s)
	return eapu
}

// SetNillableControllingOfficeFacilityID sets the "ControllingOfficeFacilityID" field if the given value is not nil.
func (eapu *ExamApplicationsPSUpdate) SetNillableControllingOfficeFacilityID(s *string) *ExamApplicationsPSUpdate {
	if s != nil {
		eapu.SetControllingOfficeFacilityID(*s)
	}
	return eapu
}

// ClearControllingOfficeFacilityID clears the value of the "ControllingOfficeFacilityID" field.
func (eapu *ExamApplicationsPSUpdate) ClearControllingOfficeFacilityID() *ExamApplicationsPSUpdate {
	eapu.mutation.ClearControllingOfficeFacilityID()
	return eapu
}

// SetControllingOfficeName sets the "ControllingOfficeName" field.
func (eapu *ExamApplicationsPSUpdate) SetControllingOfficeName(s string) *ExamApplicationsPSUpdate {
	eapu.mutation.SetControllingOfficeName(s)
	return eapu
}

// SetNillableControllingOfficeName sets the "ControllingOfficeName" field if the given value is not nil.
func (eapu *ExamApplicationsPSUpdate) SetNillableControllingOfficeName(s *string) *ExamApplicationsPSUpdate {
	if s != nil {
		eapu.SetControllingOfficeName(*s)
	}
	return eapu
}

// ClearControllingOfficeName clears the value of the "ControllingOfficeName" field.
func (eapu *ExamApplicationsPSUpdate) ClearControllingOfficeName() *ExamApplicationsPSUpdate {
	eapu.mutation.ClearControllingOfficeName()
	return eapu
}

// SetNodalOfficeFacilityID sets the "NodalOfficeFacilityID" field.
func (eapu *ExamApplicationsPSUpdate) SetNodalOfficeFacilityID(s string) *ExamApplicationsPSUpdate {
	eapu.mutation.SetNodalOfficeFacilityID(s)
	return eapu
}

// SetNillableNodalOfficeFacilityID sets the "NodalOfficeFacilityID" field if the given value is not nil.
func (eapu *ExamApplicationsPSUpdate) SetNillableNodalOfficeFacilityID(s *string) *ExamApplicationsPSUpdate {
	if s != nil {
		eapu.SetNodalOfficeFacilityID(*s)
	}
	return eapu
}

// ClearNodalOfficeFacilityID clears the value of the "NodalOfficeFacilityID" field.
func (eapu *ExamApplicationsPSUpdate) ClearNodalOfficeFacilityID() *ExamApplicationsPSUpdate {
	eapu.mutation.ClearNodalOfficeFacilityID()
	return eapu
}

// SetNodalOfficeName sets the "NodalOfficeName" field.
func (eapu *ExamApplicationsPSUpdate) SetNodalOfficeName(s string) *ExamApplicationsPSUpdate {
	eapu.mutation.SetNodalOfficeName(s)
	return eapu
}

// SetNillableNodalOfficeName sets the "NodalOfficeName" field if the given value is not nil.
func (eapu *ExamApplicationsPSUpdate) SetNillableNodalOfficeName(s *string) *ExamApplicationsPSUpdate {
	if s != nil {
		eapu.SetNodalOfficeName(*s)
	}
	return eapu
}

// ClearNodalOfficeName clears the value of the "NodalOfficeName" field.
func (eapu *ExamApplicationsPSUpdate) ClearNodalOfficeName() *ExamApplicationsPSUpdate {
	eapu.mutation.ClearNodalOfficeName()
	return eapu
}

// SetExamCityCenterCode sets the "ExamCityCenterCode" field.
func (eapu *ExamApplicationsPSUpdate) SetExamCityCenterCode(i int32) *ExamApplicationsPSUpdate {
	eapu.mutation.SetExamCityCenterCode(i)
	return eapu
}

// SetNillableExamCityCenterCode sets the "ExamCityCenterCode" field if the given value is not nil.
func (eapu *ExamApplicationsPSUpdate) SetNillableExamCityCenterCode(i *int32) *ExamApplicationsPSUpdate {
	if i != nil {
		eapu.SetExamCityCenterCode(*i)
	}
	return eapu
}

// ClearExamCityCenterCode clears the value of the "ExamCityCenterCode" field.
func (eapu *ExamApplicationsPSUpdate) ClearExamCityCenterCode() *ExamApplicationsPSUpdate {
	eapu.mutation.ClearExamCityCenterCode()
	return eapu
}

// SetCenterFacilityId sets the "CenterFacilityId" field.
func (eapu *ExamApplicationsPSUpdate) SetCenterFacilityId(s string) *ExamApplicationsPSUpdate {
	eapu.mutation.SetCenterFacilityId(s)
	return eapu
}

// SetNillableCenterFacilityId sets the "CenterFacilityId" field if the given value is not nil.
func (eapu *ExamApplicationsPSUpdate) SetNillableCenterFacilityId(s *string) *ExamApplicationsPSUpdate {
	if s != nil {
		eapu.SetCenterFacilityId(*s)
	}
	return eapu
}

// ClearCenterFacilityId clears the value of the "CenterFacilityId" field.
func (eapu *ExamApplicationsPSUpdate) ClearCenterFacilityId() *ExamApplicationsPSUpdate {
	eapu.mutation.ClearCenterFacilityId()
	return eapu
}

// SetCentrePreference sets the "CentrePreference" field.
func (eapu *ExamApplicationsPSUpdate) SetCentrePreference(s string) *ExamApplicationsPSUpdate {
	eapu.mutation.SetCentrePreference(s)
	return eapu
}

// SetNillableCentrePreference sets the "CentrePreference" field if the given value is not nil.
func (eapu *ExamApplicationsPSUpdate) SetNillableCentrePreference(s *string) *ExamApplicationsPSUpdate {
	if s != nil {
		eapu.SetCentrePreference(*s)
	}
	return eapu
}

// ClearCentrePreference clears the value of the "CentrePreference" field.
func (eapu *ExamApplicationsPSUpdate) ClearCentrePreference() *ExamApplicationsPSUpdate {
	eapu.mutation.ClearCentrePreference()
	return eapu
}

// SetSignature sets the "Signature" field.
func (eapu *ExamApplicationsPSUpdate) SetSignature(s string) *ExamApplicationsPSUpdate {
	eapu.mutation.SetSignature(s)
	return eapu
}

// SetNillableSignature sets the "Signature" field if the given value is not nil.
func (eapu *ExamApplicationsPSUpdate) SetNillableSignature(s *string) *ExamApplicationsPSUpdate {
	if s != nil {
		eapu.SetSignature(*s)
	}
	return eapu
}

// ClearSignature clears the value of the "Signature" field.
func (eapu *ExamApplicationsPSUpdate) ClearSignature() *ExamApplicationsPSUpdate {
	eapu.mutation.ClearSignature()
	return eapu
}

// SetPhoto sets the "Photo" field.
func (eapu *ExamApplicationsPSUpdate) SetPhoto(s string) *ExamApplicationsPSUpdate {
	eapu.mutation.SetPhoto(s)
	return eapu
}

// SetNillablePhoto sets the "Photo" field if the given value is not nil.
func (eapu *ExamApplicationsPSUpdate) SetNillablePhoto(s *string) *ExamApplicationsPSUpdate {
	if s != nil {
		eapu.SetPhoto(*s)
	}
	return eapu
}

// ClearPhoto clears the value of the "Photo" field.
func (eapu *ExamApplicationsPSUpdate) ClearPhoto() *ExamApplicationsPSUpdate {
	eapu.mutation.ClearPhoto()
	return eapu
}

// SetSignaturePath sets the "SignaturePath" field.
func (eapu *ExamApplicationsPSUpdate) SetSignaturePath(s string) *ExamApplicationsPSUpdate {
	eapu.mutation.SetSignaturePath(s)
	return eapu
}

// SetNillableSignaturePath sets the "SignaturePath" field if the given value is not nil.
func (eapu *ExamApplicationsPSUpdate) SetNillableSignaturePath(s *string) *ExamApplicationsPSUpdate {
	if s != nil {
		eapu.SetSignaturePath(*s)
	}
	return eapu
}

// ClearSignaturePath clears the value of the "SignaturePath" field.
func (eapu *ExamApplicationsPSUpdate) ClearSignaturePath() *ExamApplicationsPSUpdate {
	eapu.mutation.ClearSignaturePath()
	return eapu
}

// SetPhotoPath sets the "PhotoPath" field.
func (eapu *ExamApplicationsPSUpdate) SetPhotoPath(s string) *ExamApplicationsPSUpdate {
	eapu.mutation.SetPhotoPath(s)
	return eapu
}

// SetNillablePhotoPath sets the "PhotoPath" field if the given value is not nil.
func (eapu *ExamApplicationsPSUpdate) SetNillablePhotoPath(s *string) *ExamApplicationsPSUpdate {
	if s != nil {
		eapu.SetPhotoPath(*s)
	}
	return eapu
}

// ClearPhotoPath clears the value of the "PhotoPath" field.
func (eapu *ExamApplicationsPSUpdate) ClearPhotoPath() *ExamApplicationsPSUpdate {
	eapu.mutation.ClearPhotoPath()
	return eapu
}

// SetTempHallTicket sets the "TempHallTicket" field.
func (eapu *ExamApplicationsPSUpdate) SetTempHallTicket(s string) *ExamApplicationsPSUpdate {
	eapu.mutation.SetTempHallTicket(s)
	return eapu
}

// SetNillableTempHallTicket sets the "TempHallTicket" field if the given value is not nil.
func (eapu *ExamApplicationsPSUpdate) SetNillableTempHallTicket(s *string) *ExamApplicationsPSUpdate {
	if s != nil {
		eapu.SetTempHallTicket(*s)
	}
	return eapu
}

// ClearTempHallTicket clears the value of the "TempHallTicket" field.
func (eapu *ExamApplicationsPSUpdate) ClearTempHallTicket() *ExamApplicationsPSUpdate {
	eapu.mutation.ClearTempHallTicket()
	return eapu
}

// SetCandidateRemarks sets the "CandidateRemarks" field.
func (eapu *ExamApplicationsPSUpdate) SetCandidateRemarks(s string) *ExamApplicationsPSUpdate {
	eapu.mutation.SetCandidateRemarks(s)
	return eapu
}

// SetNillableCandidateRemarks sets the "CandidateRemarks" field if the given value is not nil.
func (eapu *ExamApplicationsPSUpdate) SetNillableCandidateRemarks(s *string) *ExamApplicationsPSUpdate {
	if s != nil {
		eapu.SetCandidateRemarks(*s)
	}
	return eapu
}

// ClearCandidateRemarks clears the value of the "CandidateRemarks" field.
func (eapu *ExamApplicationsPSUpdate) ClearCandidateRemarks() *ExamApplicationsPSUpdate {
	eapu.mutation.ClearCandidateRemarks()
	return eapu
}

// SetVAGeneralRemarks sets the "VAGeneralRemarks" field.
func (eapu *ExamApplicationsPSUpdate) SetVAGeneralRemarks(s string) *ExamApplicationsPSUpdate {
	eapu.mutation.SetVAGeneralRemarks(s)
	return eapu
}

// SetNillableVAGeneralRemarks sets the "VAGeneralRemarks" field if the given value is not nil.
func (eapu *ExamApplicationsPSUpdate) SetNillableVAGeneralRemarks(s *string) *ExamApplicationsPSUpdate {
	if s != nil {
		eapu.SetVAGeneralRemarks(*s)
	}
	return eapu
}

// ClearVAGeneralRemarks clears the value of the "VAGeneralRemarks" field.
func (eapu *ExamApplicationsPSUpdate) ClearVAGeneralRemarks() *ExamApplicationsPSUpdate {
	eapu.mutation.ClearVAGeneralRemarks()
	return eapu
}

// SetCAGeneralRemarks sets the "CAGeneralRemarks" field.
func (eapu *ExamApplicationsPSUpdate) SetCAGeneralRemarks(s string) *ExamApplicationsPSUpdate {
	eapu.mutation.SetCAGeneralRemarks(s)
	return eapu
}

// SetNillableCAGeneralRemarks sets the "CAGeneralRemarks" field if the given value is not nil.
func (eapu *ExamApplicationsPSUpdate) SetNillableCAGeneralRemarks(s *string) *ExamApplicationsPSUpdate {
	if s != nil {
		eapu.SetCAGeneralRemarks(*s)
	}
	return eapu
}

// ClearCAGeneralRemarks clears the value of the "CAGeneralRemarks" field.
func (eapu *ExamApplicationsPSUpdate) ClearCAGeneralRemarks() *ExamApplicationsPSUpdate {
	eapu.mutation.ClearCAGeneralRemarks()
	return eapu
}

// SetNAGeneralRemarks sets the "NAGeneralRemarks" field.
func (eapu *ExamApplicationsPSUpdate) SetNAGeneralRemarks(s string) *ExamApplicationsPSUpdate {
	eapu.mutation.SetNAGeneralRemarks(s)
	return eapu
}

// SetNillableNAGeneralRemarks sets the "NAGeneralRemarks" field if the given value is not nil.
func (eapu *ExamApplicationsPSUpdate) SetNillableNAGeneralRemarks(s *string) *ExamApplicationsPSUpdate {
	if s != nil {
		eapu.SetNAGeneralRemarks(*s)
	}
	return eapu
}

// ClearNAGeneralRemarks clears the value of the "NAGeneralRemarks" field.
func (eapu *ExamApplicationsPSUpdate) ClearNAGeneralRemarks() *ExamApplicationsPSUpdate {
	eapu.mutation.ClearNAGeneralRemarks()
	return eapu
}

// SetApplicationStatus sets the "ApplicationStatus" field.
func (eapu *ExamApplicationsPSUpdate) SetApplicationStatus(s string) *ExamApplicationsPSUpdate {
	eapu.mutation.SetApplicationStatus(s)
	return eapu
}

// SetNillableApplicationStatus sets the "ApplicationStatus" field if the given value is not nil.
func (eapu *ExamApplicationsPSUpdate) SetNillableApplicationStatus(s *string) *ExamApplicationsPSUpdate {
	if s != nil {
		eapu.SetApplicationStatus(*s)
	}
	return eapu
}

// ClearApplicationStatus clears the value of the "ApplicationStatus" field.
func (eapu *ExamApplicationsPSUpdate) ClearApplicationStatus() *ExamApplicationsPSUpdate {
	eapu.mutation.ClearApplicationStatus()
	return eapu
}

// SetStatus sets the "Status" field.
func (eapu *ExamApplicationsPSUpdate) SetStatus(s string) *ExamApplicationsPSUpdate {
	eapu.mutation.SetStatus(s)
	return eapu
}

// SetNillableStatus sets the "Status" field if the given value is not nil.
func (eapu *ExamApplicationsPSUpdate) SetNillableStatus(s *string) *ExamApplicationsPSUpdate {
	if s != nil {
		eapu.SetStatus(*s)
	}
	return eapu
}

// ClearStatus clears the value of the "Status" field.
func (eapu *ExamApplicationsPSUpdate) ClearStatus() *ExamApplicationsPSUpdate {
	eapu.mutation.ClearStatus()
	return eapu
}

// SetVAUserId sets the "VA_UserId" field.
func (eapu *ExamApplicationsPSUpdate) SetVAUserId(i int32) *ExamApplicationsPSUpdate {
	eapu.mutation.ResetVAUserId()
	eapu.mutation.SetVAUserId(i)
	return eapu
}

// SetNillableVAUserId sets the "VA_UserId" field if the given value is not nil.
func (eapu *ExamApplicationsPSUpdate) SetNillableVAUserId(i *int32) *ExamApplicationsPSUpdate {
	if i != nil {
		eapu.SetVAUserId(*i)
	}
	return eapu
}

// AddVAUserId adds i to the "VA_UserId" field.
func (eapu *ExamApplicationsPSUpdate) AddVAUserId(i int32) *ExamApplicationsPSUpdate {
	eapu.mutation.AddVAUserId(i)
	return eapu
}

// ClearVAUserId clears the value of the "VA_UserId" field.
func (eapu *ExamApplicationsPSUpdate) ClearVAUserId() *ExamApplicationsPSUpdate {
	eapu.mutation.ClearVAUserId()
	return eapu
}

// SetVAUserName sets the "VA_UserName" field.
func (eapu *ExamApplicationsPSUpdate) SetVAUserName(s string) *ExamApplicationsPSUpdate {
	eapu.mutation.SetVAUserName(s)
	return eapu
}

// SetNillableVAUserName sets the "VA_UserName" field if the given value is not nil.
func (eapu *ExamApplicationsPSUpdate) SetNillableVAUserName(s *string) *ExamApplicationsPSUpdate {
	if s != nil {
		eapu.SetVAUserName(*s)
	}
	return eapu
}

// ClearVAUserName clears the value of the "VA_UserName" field.
func (eapu *ExamApplicationsPSUpdate) ClearVAUserName() *ExamApplicationsPSUpdate {
	eapu.mutation.ClearVAUserName()
	return eapu
}

// SetVAEmployeeID sets the "VA_EmployeeID" field.
func (eapu *ExamApplicationsPSUpdate) SetVAEmployeeID(s string) *ExamApplicationsPSUpdate {
	eapu.mutation.SetVAEmployeeID(s)
	return eapu
}

// SetNillableVAEmployeeID sets the "VA_EmployeeID" field if the given value is not nil.
func (eapu *ExamApplicationsPSUpdate) SetNillableVAEmployeeID(s *string) *ExamApplicationsPSUpdate {
	if s != nil {
		eapu.SetVAEmployeeID(*s)
	}
	return eapu
}

// ClearVAEmployeeID clears the value of the "VA_EmployeeID" field.
func (eapu *ExamApplicationsPSUpdate) ClearVAEmployeeID() *ExamApplicationsPSUpdate {
	eapu.mutation.ClearVAEmployeeID()
	return eapu
}

// SetVAEmployeeDesignation sets the "VA_EmployeeDesignation" field.
func (eapu *ExamApplicationsPSUpdate) SetVAEmployeeDesignation(s string) *ExamApplicationsPSUpdate {
	eapu.mutation.SetVAEmployeeDesignation(s)
	return eapu
}

// SetNillableVAEmployeeDesignation sets the "VA_EmployeeDesignation" field if the given value is not nil.
func (eapu *ExamApplicationsPSUpdate) SetNillableVAEmployeeDesignation(s *string) *ExamApplicationsPSUpdate {
	if s != nil {
		eapu.SetVAEmployeeDesignation(*s)
	}
	return eapu
}

// ClearVAEmployeeDesignation clears the value of the "VA_EmployeeDesignation" field.
func (eapu *ExamApplicationsPSUpdate) ClearVAEmployeeDesignation() *ExamApplicationsPSUpdate {
	eapu.mutation.ClearVAEmployeeDesignation()
	return eapu
}

// SetVARemarks sets the "VA_Remarks" field.
func (eapu *ExamApplicationsPSUpdate) SetVARemarks(s string) *ExamApplicationsPSUpdate {
	eapu.mutation.SetVARemarks(s)
	return eapu
}

// SetNillableVARemarks sets the "VA_Remarks" field if the given value is not nil.
func (eapu *ExamApplicationsPSUpdate) SetNillableVARemarks(s *string) *ExamApplicationsPSUpdate {
	if s != nil {
		eapu.SetVARemarks(*s)
	}
	return eapu
}

// ClearVARemarks clears the value of the "VA_Remarks" field.
func (eapu *ExamApplicationsPSUpdate) ClearVARemarks() *ExamApplicationsPSUpdate {
	eapu.mutation.ClearVARemarks()
	return eapu
}

// SetVADate sets the "VA_Date" field.
func (eapu *ExamApplicationsPSUpdate) SetVADate(t time.Time) *ExamApplicationsPSUpdate {
	eapu.mutation.SetVADate(t)
	return eapu
}

// SetNillableVADate sets the "VA_Date" field if the given value is not nil.
func (eapu *ExamApplicationsPSUpdate) SetNillableVADate(t *time.Time) *ExamApplicationsPSUpdate {
	if t != nil {
		eapu.SetVADate(*t)
	}
	return eapu
}

// ClearVADate clears the value of the "VA_Date" field.
func (eapu *ExamApplicationsPSUpdate) ClearVADate() *ExamApplicationsPSUpdate {
	eapu.mutation.ClearVADate()
	return eapu
}

// SetCAUserId sets the "CA_UserId" field.
func (eapu *ExamApplicationsPSUpdate) SetCAUserId(i int32) *ExamApplicationsPSUpdate {
	eapu.mutation.ResetCAUserId()
	eapu.mutation.SetCAUserId(i)
	return eapu
}

// SetNillableCAUserId sets the "CA_UserId" field if the given value is not nil.
func (eapu *ExamApplicationsPSUpdate) SetNillableCAUserId(i *int32) *ExamApplicationsPSUpdate {
	if i != nil {
		eapu.SetCAUserId(*i)
	}
	return eapu
}

// AddCAUserId adds i to the "CA_UserId" field.
func (eapu *ExamApplicationsPSUpdate) AddCAUserId(i int32) *ExamApplicationsPSUpdate {
	eapu.mutation.AddCAUserId(i)
	return eapu
}

// ClearCAUserId clears the value of the "CA_UserId" field.
func (eapu *ExamApplicationsPSUpdate) ClearCAUserId() *ExamApplicationsPSUpdate {
	eapu.mutation.ClearCAUserId()
	return eapu
}

// SetCAUserName sets the "CA_UserName" field.
func (eapu *ExamApplicationsPSUpdate) SetCAUserName(s string) *ExamApplicationsPSUpdate {
	eapu.mutation.SetCAUserName(s)
	return eapu
}

// SetNillableCAUserName sets the "CA_UserName" field if the given value is not nil.
func (eapu *ExamApplicationsPSUpdate) SetNillableCAUserName(s *string) *ExamApplicationsPSUpdate {
	if s != nil {
		eapu.SetCAUserName(*s)
	}
	return eapu
}

// ClearCAUserName clears the value of the "CA_UserName" field.
func (eapu *ExamApplicationsPSUpdate) ClearCAUserName() *ExamApplicationsPSUpdate {
	eapu.mutation.ClearCAUserName()
	return eapu
}

// SetCAEmployeeID sets the "CA_EmployeeID" field.
func (eapu *ExamApplicationsPSUpdate) SetCAEmployeeID(s string) *ExamApplicationsPSUpdate {
	eapu.mutation.SetCAEmployeeID(s)
	return eapu
}

// SetNillableCAEmployeeID sets the "CA_EmployeeID" field if the given value is not nil.
func (eapu *ExamApplicationsPSUpdate) SetNillableCAEmployeeID(s *string) *ExamApplicationsPSUpdate {
	if s != nil {
		eapu.SetCAEmployeeID(*s)
	}
	return eapu
}

// ClearCAEmployeeID clears the value of the "CA_EmployeeID" field.
func (eapu *ExamApplicationsPSUpdate) ClearCAEmployeeID() *ExamApplicationsPSUpdate {
	eapu.mutation.ClearCAEmployeeID()
	return eapu
}

// SetCAEmployeeDesignation sets the "CA_EmployeeDesignation" field.
func (eapu *ExamApplicationsPSUpdate) SetCAEmployeeDesignation(s string) *ExamApplicationsPSUpdate {
	eapu.mutation.SetCAEmployeeDesignation(s)
	return eapu
}

// SetNillableCAEmployeeDesignation sets the "CA_EmployeeDesignation" field if the given value is not nil.
func (eapu *ExamApplicationsPSUpdate) SetNillableCAEmployeeDesignation(s *string) *ExamApplicationsPSUpdate {
	if s != nil {
		eapu.SetCAEmployeeDesignation(*s)
	}
	return eapu
}

// ClearCAEmployeeDesignation clears the value of the "CA_EmployeeDesignation" field.
func (eapu *ExamApplicationsPSUpdate) ClearCAEmployeeDesignation() *ExamApplicationsPSUpdate {
	eapu.mutation.ClearCAEmployeeDesignation()
	return eapu
}

// SetCARemarks sets the "CA_Remarks" field.
func (eapu *ExamApplicationsPSUpdate) SetCARemarks(s string) *ExamApplicationsPSUpdate {
	eapu.mutation.SetCARemarks(s)
	return eapu
}

// SetNillableCARemarks sets the "CA_Remarks" field if the given value is not nil.
func (eapu *ExamApplicationsPSUpdate) SetNillableCARemarks(s *string) *ExamApplicationsPSUpdate {
	if s != nil {
		eapu.SetCARemarks(*s)
	}
	return eapu
}

// ClearCARemarks clears the value of the "CA_Remarks" field.
func (eapu *ExamApplicationsPSUpdate) ClearCARemarks() *ExamApplicationsPSUpdate {
	eapu.mutation.ClearCARemarks()
	return eapu
}

// SetCADate sets the "CA_Date" field.
func (eapu *ExamApplicationsPSUpdate) SetCADate(t time.Time) *ExamApplicationsPSUpdate {
	eapu.mutation.SetCADate(t)
	return eapu
}

// SetNillableCADate sets the "CA_Date" field if the given value is not nil.
func (eapu *ExamApplicationsPSUpdate) SetNillableCADate(t *time.Time) *ExamApplicationsPSUpdate {
	if t != nil {
		eapu.SetCADate(*t)
	}
	return eapu
}

// ClearCADate clears the value of the "CA_Date" field.
func (eapu *ExamApplicationsPSUpdate) ClearCADate() *ExamApplicationsPSUpdate {
	eapu.mutation.ClearCADate()
	return eapu
}

// SetNAUserId sets the "NA_UserId" field.
func (eapu *ExamApplicationsPSUpdate) SetNAUserId(i int32) *ExamApplicationsPSUpdate {
	eapu.mutation.ResetNAUserId()
	eapu.mutation.SetNAUserId(i)
	return eapu
}

// SetNillableNAUserId sets the "NA_UserId" field if the given value is not nil.
func (eapu *ExamApplicationsPSUpdate) SetNillableNAUserId(i *int32) *ExamApplicationsPSUpdate {
	if i != nil {
		eapu.SetNAUserId(*i)
	}
	return eapu
}

// AddNAUserId adds i to the "NA_UserId" field.
func (eapu *ExamApplicationsPSUpdate) AddNAUserId(i int32) *ExamApplicationsPSUpdate {
	eapu.mutation.AddNAUserId(i)
	return eapu
}

// ClearNAUserId clears the value of the "NA_UserId" field.
func (eapu *ExamApplicationsPSUpdate) ClearNAUserId() *ExamApplicationsPSUpdate {
	eapu.mutation.ClearNAUserId()
	return eapu
}

// SetNAUserName sets the "NA_UserName" field.
func (eapu *ExamApplicationsPSUpdate) SetNAUserName(s string) *ExamApplicationsPSUpdate {
	eapu.mutation.SetNAUserName(s)
	return eapu
}

// SetNillableNAUserName sets the "NA_UserName" field if the given value is not nil.
func (eapu *ExamApplicationsPSUpdate) SetNillableNAUserName(s *string) *ExamApplicationsPSUpdate {
	if s != nil {
		eapu.SetNAUserName(*s)
	}
	return eapu
}

// ClearNAUserName clears the value of the "NA_UserName" field.
func (eapu *ExamApplicationsPSUpdate) ClearNAUserName() *ExamApplicationsPSUpdate {
	eapu.mutation.ClearNAUserName()
	return eapu
}

// SetNAEmployeeID sets the "NA_EmployeeID" field.
func (eapu *ExamApplicationsPSUpdate) SetNAEmployeeID(s string) *ExamApplicationsPSUpdate {
	eapu.mutation.SetNAEmployeeID(s)
	return eapu
}

// SetNillableNAEmployeeID sets the "NA_EmployeeID" field if the given value is not nil.
func (eapu *ExamApplicationsPSUpdate) SetNillableNAEmployeeID(s *string) *ExamApplicationsPSUpdate {
	if s != nil {
		eapu.SetNAEmployeeID(*s)
	}
	return eapu
}

// ClearNAEmployeeID clears the value of the "NA_EmployeeID" field.
func (eapu *ExamApplicationsPSUpdate) ClearNAEmployeeID() *ExamApplicationsPSUpdate {
	eapu.mutation.ClearNAEmployeeID()
	return eapu
}

// SetNAEmployeeDesignation sets the "NA_EmployeeDesignation" field.
func (eapu *ExamApplicationsPSUpdate) SetNAEmployeeDesignation(s string) *ExamApplicationsPSUpdate {
	eapu.mutation.SetNAEmployeeDesignation(s)
	return eapu
}

// SetNillableNAEmployeeDesignation sets the "NA_EmployeeDesignation" field if the given value is not nil.
func (eapu *ExamApplicationsPSUpdate) SetNillableNAEmployeeDesignation(s *string) *ExamApplicationsPSUpdate {
	if s != nil {
		eapu.SetNAEmployeeDesignation(*s)
	}
	return eapu
}

// ClearNAEmployeeDesignation clears the value of the "NA_EmployeeDesignation" field.
func (eapu *ExamApplicationsPSUpdate) ClearNAEmployeeDesignation() *ExamApplicationsPSUpdate {
	eapu.mutation.ClearNAEmployeeDesignation()
	return eapu
}

// SetNARemarks sets the "NA_Remarks" field.
func (eapu *ExamApplicationsPSUpdate) SetNARemarks(s string) *ExamApplicationsPSUpdate {
	eapu.mutation.SetNARemarks(s)
	return eapu
}

// SetNillableNARemarks sets the "NA_Remarks" field if the given value is not nil.
func (eapu *ExamApplicationsPSUpdate) SetNillableNARemarks(s *string) *ExamApplicationsPSUpdate {
	if s != nil {
		eapu.SetNARemarks(*s)
	}
	return eapu
}

// ClearNARemarks clears the value of the "NA_Remarks" field.
func (eapu *ExamApplicationsPSUpdate) ClearNARemarks() *ExamApplicationsPSUpdate {
	eapu.mutation.ClearNARemarks()
	return eapu
}

// SetNADate sets the "NA_Date" field.
func (eapu *ExamApplicationsPSUpdate) SetNADate(t time.Time) *ExamApplicationsPSUpdate {
	eapu.mutation.SetNADate(t)
	return eapu
}

// SetNillableNADate sets the "NA_Date" field if the given value is not nil.
func (eapu *ExamApplicationsPSUpdate) SetNillableNADate(t *time.Time) *ExamApplicationsPSUpdate {
	if t != nil {
		eapu.SetNADate(*t)
	}
	return eapu
}

// ClearNADate clears the value of the "NA_Date" field.
func (eapu *ExamApplicationsPSUpdate) ClearNADate() *ExamApplicationsPSUpdate {
	eapu.mutation.ClearNADate()
	return eapu
}

// SetAppliactionRemarks sets the "AppliactionRemarks" field.
func (eapu *ExamApplicationsPSUpdate) SetAppliactionRemarks(s string) *ExamApplicationsPSUpdate {
	eapu.mutation.SetAppliactionRemarks(s)
	return eapu
}

// SetNillableAppliactionRemarks sets the "AppliactionRemarks" field if the given value is not nil.
func (eapu *ExamApplicationsPSUpdate) SetNillableAppliactionRemarks(s *string) *ExamApplicationsPSUpdate {
	if s != nil {
		eapu.SetAppliactionRemarks(*s)
	}
	return eapu
}

// ClearAppliactionRemarks clears the value of the "AppliactionRemarks" field.
func (eapu *ExamApplicationsPSUpdate) ClearAppliactionRemarks() *ExamApplicationsPSUpdate {
	eapu.mutation.ClearAppliactionRemarks()
	return eapu
}

// SetCadrePreferences sets the "CadrePreferences" field.
func (eapu *ExamApplicationsPSUpdate) SetCadrePreferences(i []interface{}) *ExamApplicationsPSUpdate {
	eapu.mutation.SetCadrePreferences(i)
	return eapu
}

// AppendCadrePreferences appends i to the "CadrePreferences" field.
func (eapu *ExamApplicationsPSUpdate) AppendCadrePreferences(i []interface{}) *ExamApplicationsPSUpdate {
	eapu.mutation.AppendCadrePreferences(i)
	return eapu
}

// ClearCadrePreferences clears the value of the "CadrePreferences" field.
func (eapu *ExamApplicationsPSUpdate) ClearCadrePreferences() *ExamApplicationsPSUpdate {
	eapu.mutation.ClearCadrePreferences()
	return eapu
}

// SetCAPreviousRemarks sets the "CAPreviousRemarks" field.
func (eapu *ExamApplicationsPSUpdate) SetCAPreviousRemarks(s string) *ExamApplicationsPSUpdate {
	eapu.mutation.SetCAPreviousRemarks(s)
	return eapu
}

// SetNillableCAPreviousRemarks sets the "CAPreviousRemarks" field if the given value is not nil.
func (eapu *ExamApplicationsPSUpdate) SetNillableCAPreviousRemarks(s *string) *ExamApplicationsPSUpdate {
	if s != nil {
		eapu.SetCAPreviousRemarks(*s)
	}
	return eapu
}

// ClearCAPreviousRemarks clears the value of the "CAPreviousRemarks" field.
func (eapu *ExamApplicationsPSUpdate) ClearCAPreviousRemarks() *ExamApplicationsPSUpdate {
	eapu.mutation.ClearCAPreviousRemarks()
	return eapu
}

// SetPunishmentStatus sets the "PunishmentStatus" field.
func (eapu *ExamApplicationsPSUpdate) SetPunishmentStatus(b bool) *ExamApplicationsPSUpdate {
	eapu.mutation.SetPunishmentStatus(b)
	return eapu
}

// SetNillablePunishmentStatus sets the "PunishmentStatus" field if the given value is not nil.
func (eapu *ExamApplicationsPSUpdate) SetNillablePunishmentStatus(b *bool) *ExamApplicationsPSUpdate {
	if b != nil {
		eapu.SetPunishmentStatus(*b)
	}
	return eapu
}

// ClearPunishmentStatus clears the value of the "PunishmentStatus" field.
func (eapu *ExamApplicationsPSUpdate) ClearPunishmentStatus() *ExamApplicationsPSUpdate {
	eapu.mutation.ClearPunishmentStatus()
	return eapu
}

// SetDisciplinaryCaseStatus sets the "DisciplinaryCaseStatus" field.
func (eapu *ExamApplicationsPSUpdate) SetDisciplinaryCaseStatus(b bool) *ExamApplicationsPSUpdate {
	eapu.mutation.SetDisciplinaryCaseStatus(b)
	return eapu
}

// SetNillableDisciplinaryCaseStatus sets the "DisciplinaryCaseStatus" field if the given value is not nil.
func (eapu *ExamApplicationsPSUpdate) SetNillableDisciplinaryCaseStatus(b *bool) *ExamApplicationsPSUpdate {
	if b != nil {
		eapu.SetDisciplinaryCaseStatus(*b)
	}
	return eapu
}

// ClearDisciplinaryCaseStatus clears the value of the "DisciplinaryCaseStatus" field.
func (eapu *ExamApplicationsPSUpdate) ClearDisciplinaryCaseStatus() *ExamApplicationsPSUpdate {
	eapu.mutation.ClearDisciplinaryCaseStatus()
	return eapu
}

// SetGenerateHallTicketFlag sets the "GenerateHallTicketFlag" field.
func (eapu *ExamApplicationsPSUpdate) SetGenerateHallTicketFlag(b bool) *ExamApplicationsPSUpdate {
	eapu.mutation.SetGenerateHallTicketFlag(b)
	return eapu
}

// SetNillableGenerateHallTicketFlag sets the "GenerateHallTicketFlag" field if the given value is not nil.
func (eapu *ExamApplicationsPSUpdate) SetNillableGenerateHallTicketFlag(b *bool) *ExamApplicationsPSUpdate {
	if b != nil {
		eapu.SetGenerateHallTicketFlag(*b)
	}
	return eapu
}

// ClearGenerateHallTicketFlag clears the value of the "GenerateHallTicketFlag" field.
func (eapu *ExamApplicationsPSUpdate) ClearGenerateHallTicketFlag() *ExamApplicationsPSUpdate {
	eapu.mutation.ClearGenerateHallTicketFlag()
	return eapu
}

// SetHallTicketNumber sets the "HallTicketNumber" field.
func (eapu *ExamApplicationsPSUpdate) SetHallTicketNumber(s string) *ExamApplicationsPSUpdate {
	eapu.mutation.SetHallTicketNumber(s)
	return eapu
}

// SetNillableHallTicketNumber sets the "HallTicketNumber" field if the given value is not nil.
func (eapu *ExamApplicationsPSUpdate) SetNillableHallTicketNumber(s *string) *ExamApplicationsPSUpdate {
	if s != nil {
		eapu.SetHallTicketNumber(*s)
	}
	return eapu
}

// ClearHallTicketNumber clears the value of the "HallTicketNumber" field.
func (eapu *ExamApplicationsPSUpdate) ClearHallTicketNumber() *ExamApplicationsPSUpdate {
	eapu.mutation.ClearHallTicketNumber()
	return eapu
}

// SetHallTicketGeneratedFlag sets the "HallTicketGeneratedFlag" field.
func (eapu *ExamApplicationsPSUpdate) SetHallTicketGeneratedFlag(b bool) *ExamApplicationsPSUpdate {
	eapu.mutation.SetHallTicketGeneratedFlag(b)
	return eapu
}

// SetNillableHallTicketGeneratedFlag sets the "HallTicketGeneratedFlag" field if the given value is not nil.
func (eapu *ExamApplicationsPSUpdate) SetNillableHallTicketGeneratedFlag(b *bool) *ExamApplicationsPSUpdate {
	if b != nil {
		eapu.SetHallTicketGeneratedFlag(*b)
	}
	return eapu
}

// ClearHallTicketGeneratedFlag clears the value of the "HallTicketGeneratedFlag" field.
func (eapu *ExamApplicationsPSUpdate) ClearHallTicketGeneratedFlag() *ExamApplicationsPSUpdate {
	eapu.mutation.ClearHallTicketGeneratedFlag()
	return eapu
}

// SetGenerateHallTicketFlagByNO sets the "GenerateHallTicketFlagByNO" field.
func (eapu *ExamApplicationsPSUpdate) SetGenerateHallTicketFlagByNO(b bool) *ExamApplicationsPSUpdate {
	eapu.mutation.SetGenerateHallTicketFlagByNO(b)
	return eapu
}

// SetNillableGenerateHallTicketFlagByNO sets the "GenerateHallTicketFlagByNO" field if the given value is not nil.
func (eapu *ExamApplicationsPSUpdate) SetNillableGenerateHallTicketFlagByNO(b *bool) *ExamApplicationsPSUpdate {
	if b != nil {
		eapu.SetGenerateHallTicketFlagByNO(*b)
	}
	return eapu
}

// ClearGenerateHallTicketFlagByNO clears the value of the "GenerateHallTicketFlagByNO" field.
func (eapu *ExamApplicationsPSUpdate) ClearGenerateHallTicketFlagByNO() *ExamApplicationsPSUpdate {
	eapu.mutation.ClearGenerateHallTicketFlagByNO()
	return eapu
}

// SetHallTicketGeneratedDate sets the "HallTicketGeneratedDate" field.
func (eapu *ExamApplicationsPSUpdate) SetHallTicketGeneratedDate(t time.Time) *ExamApplicationsPSUpdate {
	eapu.mutation.SetHallTicketGeneratedDate(t)
	return eapu
}

// SetNillableHallTicketGeneratedDate sets the "HallTicketGeneratedDate" field if the given value is not nil.
func (eapu *ExamApplicationsPSUpdate) SetNillableHallTicketGeneratedDate(t *time.Time) *ExamApplicationsPSUpdate {
	if t != nil {
		eapu.SetHallTicketGeneratedDate(*t)
	}
	return eapu
}

// ClearHallTicketGeneratedDate clears the value of the "HallTicketGeneratedDate" field.
func (eapu *ExamApplicationsPSUpdate) ClearHallTicketGeneratedDate() *ExamApplicationsPSUpdate {
	eapu.mutation.ClearHallTicketGeneratedDate()
	return eapu
}

// SetTemporaryHallTicket sets the "TemporaryHallTicket" field.
func (eapu *ExamApplicationsPSUpdate) SetTemporaryHallTicket(s string) *ExamApplicationsPSUpdate {
	eapu.mutation.SetTemporaryHallTicket(s)
	return eapu
}

// SetNillableTemporaryHallTicket sets the "TemporaryHallTicket" field if the given value is not nil.
func (eapu *ExamApplicationsPSUpdate) SetNillableTemporaryHallTicket(s *string) *ExamApplicationsPSUpdate {
	if s != nil {
		eapu.SetTemporaryHallTicket(*s)
	}
	return eapu
}

// ClearTemporaryHallTicket clears the value of the "TemporaryHallTicket" field.
func (eapu *ExamApplicationsPSUpdate) ClearTemporaryHallTicket() *ExamApplicationsPSUpdate {
	eapu.mutation.ClearTemporaryHallTicket()
	return eapu
}

// SetOptionUsed sets the "OptionUsed" field.
func (eapu *ExamApplicationsPSUpdate) SetOptionUsed(s string) *ExamApplicationsPSUpdate {
	eapu.mutation.SetOptionUsed(s)
	return eapu
}

// SetNillableOptionUsed sets the "OptionUsed" field if the given value is not nil.
func (eapu *ExamApplicationsPSUpdate) SetNillableOptionUsed(s *string) *ExamApplicationsPSUpdate {
	if s != nil {
		eapu.SetOptionUsed(*s)
	}
	return eapu
}

// ClearOptionUsed clears the value of the "OptionUsed" field.
func (eapu *ExamApplicationsPSUpdate) ClearOptionUsed() *ExamApplicationsPSUpdate {
	eapu.mutation.ClearOptionUsed()
	return eapu
}

// SetRemarks sets the "Remarks" field.
func (eapu *ExamApplicationsPSUpdate) SetRemarks(s string) *ExamApplicationsPSUpdate {
	eapu.mutation.SetRemarks(s)
	return eapu
}

// SetNillableRemarks sets the "Remarks" field if the given value is not nil.
func (eapu *ExamApplicationsPSUpdate) SetNillableRemarks(s *string) *ExamApplicationsPSUpdate {
	if s != nil {
		eapu.SetRemarks(*s)
	}
	return eapu
}

// ClearRemarks clears the value of the "Remarks" field.
func (eapu *ExamApplicationsPSUpdate) ClearRemarks() *ExamApplicationsPSUpdate {
	eapu.mutation.ClearRemarks()
	return eapu
}

// SetCadre sets the "Cadre" field.
func (eapu *ExamApplicationsPSUpdate) SetCadre(s string) *ExamApplicationsPSUpdate {
	eapu.mutation.SetCadre(s)
	return eapu
}

// SetNillableCadre sets the "Cadre" field if the given value is not nil.
func (eapu *ExamApplicationsPSUpdate) SetNillableCadre(s *string) *ExamApplicationsPSUpdate {
	if s != nil {
		eapu.SetCadre(*s)
	}
	return eapu
}

// ClearCadre clears the value of the "Cadre" field.
func (eapu *ExamApplicationsPSUpdate) ClearCadre() *ExamApplicationsPSUpdate {
	eapu.mutation.ClearCadre()
	return eapu
}

// SetEmployeePost sets the "EmployeePost" field.
func (eapu *ExamApplicationsPSUpdate) SetEmployeePost(s string) *ExamApplicationsPSUpdate {
	eapu.mutation.SetEmployeePost(s)
	return eapu
}

// SetNillableEmployeePost sets the "EmployeePost" field if the given value is not nil.
func (eapu *ExamApplicationsPSUpdate) SetNillableEmployeePost(s *string) *ExamApplicationsPSUpdate {
	if s != nil {
		eapu.SetEmployeePost(*s)
	}
	return eapu
}

// ClearEmployeePost clears the value of the "EmployeePost" field.
func (eapu *ExamApplicationsPSUpdate) ClearEmployeePost() *ExamApplicationsPSUpdate {
	eapu.mutation.ClearEmployeePost()
	return eapu
}

// SetDOJInEligiblePost sets the "DOJInEligiblePost" field.
func (eapu *ExamApplicationsPSUpdate) SetDOJInEligiblePost(s string) *ExamApplicationsPSUpdate {
	eapu.mutation.SetDOJInEligiblePost(s)
	return eapu
}

// SetNillableDOJInEligiblePost sets the "DOJInEligiblePost" field if the given value is not nil.
func (eapu *ExamApplicationsPSUpdate) SetNillableDOJInEligiblePost(s *string) *ExamApplicationsPSUpdate {
	if s != nil {
		eapu.SetDOJInEligiblePost(*s)
	}
	return eapu
}

// ClearDOJInEligiblePost clears the value of the "DOJInEligiblePost" field.
func (eapu *ExamApplicationsPSUpdate) ClearDOJInEligiblePost() *ExamApplicationsPSUpdate {
	eapu.mutation.ClearDOJInEligiblePost()
	return eapu
}

// SetDivisionPreferences sets the "DivisionPreferences" field.
func (eapu *ExamApplicationsPSUpdate) SetDivisionPreferences(i []interface{}) *ExamApplicationsPSUpdate {
	eapu.mutation.SetDivisionPreferences(i)
	return eapu
}

// AppendDivisionPreferences appends i to the "DivisionPreferences" field.
func (eapu *ExamApplicationsPSUpdate) AppendDivisionPreferences(i []interface{}) *ExamApplicationsPSUpdate {
	eapu.mutation.AppendDivisionPreferences(i)
	return eapu
}

// ClearDivisionPreferences clears the value of the "DivisionPreferences" field.
func (eapu *ExamApplicationsPSUpdate) ClearDivisionPreferences() *ExamApplicationsPSUpdate {
	eapu.mutation.ClearDivisionPreferences()
	return eapu
}

// SetRoleUserCode sets the "RoleUserCode" field.
func (eapu *ExamApplicationsPSUpdate) SetRoleUserCode(i int32) *ExamApplicationsPSUpdate {
	eapu.mutation.SetRoleUserCode(i)
	return eapu
}

// SetNillableRoleUserCode sets the "RoleUserCode" field if the given value is not nil.
func (eapu *ExamApplicationsPSUpdate) SetNillableRoleUserCode(i *int32) *ExamApplicationsPSUpdate {
	if i != nil {
		eapu.SetRoleUserCode(*i)
	}
	return eapu
}

// ClearRoleUserCode clears the value of the "RoleUserCode" field.
func (eapu *ExamApplicationsPSUpdate) ClearRoleUserCode() *ExamApplicationsPSUpdate {
	eapu.mutation.ClearRoleUserCode()
	return eapu
}

// SetCircleSID sets the "CircleSID" field.
func (eapu *ExamApplicationsPSUpdate) SetCircleSID(i int32) *ExamApplicationsPSUpdate {
	eapu.mutation.SetCircleSID(i)
	return eapu
}

// SetNillableCircleSID sets the "CircleSID" field if the given value is not nil.
func (eapu *ExamApplicationsPSUpdate) SetNillableCircleSID(i *int32) *ExamApplicationsPSUpdate {
	if i != nil {
		eapu.SetCircleSID(*i)
	}
	return eapu
}

// ClearCircleSID clears the value of the "CircleSID" field.
func (eapu *ExamApplicationsPSUpdate) ClearCircleSID() *ExamApplicationsPSUpdate {
	eapu.mutation.ClearCircleSID()
	return eapu
}

// SetFacilityName sets the "FacilityName" field.
func (eapu *ExamApplicationsPSUpdate) SetFacilityName(s string) *ExamApplicationsPSUpdate {
	eapu.mutation.SetFacilityName(s)
	return eapu
}

// SetNillableFacilityName sets the "FacilityName" field if the given value is not nil.
func (eapu *ExamApplicationsPSUpdate) SetNillableFacilityName(s *string) *ExamApplicationsPSUpdate {
	if s != nil {
		eapu.SetFacilityName(*s)
	}
	return eapu
}

// ClearFacilityName clears the value of the "FacilityName" field.
func (eapu *ExamApplicationsPSUpdate) ClearFacilityName() *ExamApplicationsPSUpdate {
	eapu.mutation.ClearFacilityName()
	return eapu
}

// SetServiceLength sets the "ServiceLength" field.
func (eapu *ExamApplicationsPSUpdate) SetServiceLength(i []interface{}) *ExamApplicationsPSUpdate {
	eapu.mutation.SetServiceLength(i)
	return eapu
}

// AppendServiceLength appends i to the "ServiceLength" field.
func (eapu *ExamApplicationsPSUpdate) AppendServiceLength(i []interface{}) *ExamApplicationsPSUpdate {
	eapu.mutation.AppendServiceLength(i)
	return eapu
}

// ClearServiceLength clears the value of the "ServiceLength" field.
func (eapu *ExamApplicationsPSUpdate) ClearServiceLength() *ExamApplicationsPSUpdate {
	eapu.mutation.ClearServiceLength()
	return eapu
}

// SetNonQualifyingService sets the "NonQualifyingService" field.
func (eapu *ExamApplicationsPSUpdate) SetNonQualifyingService(i []interface{}) *ExamApplicationsPSUpdate {
	eapu.mutation.SetNonQualifyingService(i)
	return eapu
}

// AppendNonQualifyingService appends i to the "NonQualifyingService" field.
func (eapu *ExamApplicationsPSUpdate) AppendNonQualifyingService(i []interface{}) *ExamApplicationsPSUpdate {
	eapu.mutation.AppendNonQualifyingService(i)
	return eapu
}

// ClearNonQualifyingService clears the value of the "NonQualifyingService" field.
func (eapu *ExamApplicationsPSUpdate) ClearNonQualifyingService() *ExamApplicationsPSUpdate {
	eapu.mutation.ClearNonQualifyingService()
	return eapu
}

// SetDCInPresentCadre sets the "DCInPresentCadre" field.
func (eapu *ExamApplicationsPSUpdate) SetDCInPresentCadre(s string) *ExamApplicationsPSUpdate {
	eapu.mutation.SetDCInPresentCadre(s)
	return eapu
}

// SetNillableDCInPresentCadre sets the "DCInPresentCadre" field if the given value is not nil.
func (eapu *ExamApplicationsPSUpdate) SetNillableDCInPresentCadre(s *string) *ExamApplicationsPSUpdate {
	if s != nil {
		eapu.SetDCInPresentCadre(*s)
	}
	return eapu
}

// ClearDCInPresentCadre clears the value of the "DCInPresentCadre" field.
func (eapu *ExamApplicationsPSUpdate) ClearDCInPresentCadre() *ExamApplicationsPSUpdate {
	eapu.mutation.ClearDCInPresentCadre()
	return eapu
}

// SetCenterId sets the "CenterId" field.
func (eapu *ExamApplicationsPSUpdate) SetCenterId(i int32) *ExamApplicationsPSUpdate {
	eapu.mutation.ResetCenterId()
	eapu.mutation.SetCenterId(i)
	return eapu
}

// SetNillableCenterId sets the "CenterId" field if the given value is not nil.
func (eapu *ExamApplicationsPSUpdate) SetNillableCenterId(i *int32) *ExamApplicationsPSUpdate {
	if i != nil {
		eapu.SetCenterId(*i)
	}
	return eapu
}

// AddCenterId adds i to the "CenterId" field.
func (eapu *ExamApplicationsPSUpdate) AddCenterId(i int32) *ExamApplicationsPSUpdate {
	eapu.mutation.AddCenterId(i)
	return eapu
}

// ClearCenterId clears the value of the "CenterId" field.
func (eapu *ExamApplicationsPSUpdate) ClearCenterId() *ExamApplicationsPSUpdate {
	eapu.mutation.ClearCenterId()
	return eapu
}

// SetCenterCode sets the "CenterCode" field.
func (eapu *ExamApplicationsPSUpdate) SetCenterCode(i int32) *ExamApplicationsPSUpdate {
	eapu.mutation.SetCenterCode(i)
	return eapu
}

// SetNillableCenterCode sets the "CenterCode" field if the given value is not nil.
func (eapu *ExamApplicationsPSUpdate) SetNillableCenterCode(i *int32) *ExamApplicationsPSUpdate {
	if i != nil {
		eapu.SetCenterCode(*i)
	}
	return eapu
}

// ClearCenterCode clears the value of the "CenterCode" field.
func (eapu *ExamApplicationsPSUpdate) ClearCenterCode() *ExamApplicationsPSUpdate {
	eapu.mutation.ClearCenterCode()
	return eapu
}

// SetClaimingQualifyingService sets the "ClaimingQualifyingService" field.
func (eapu *ExamApplicationsPSUpdate) SetClaimingQualifyingService(s string) *ExamApplicationsPSUpdate {
	eapu.mutation.SetClaimingQualifyingService(s)
	return eapu
}

// SetNillableClaimingQualifyingService sets the "ClaimingQualifyingService" field if the given value is not nil.
func (eapu *ExamApplicationsPSUpdate) SetNillableClaimingQualifyingService(s *string) *ExamApplicationsPSUpdate {
	if s != nil {
		eapu.SetClaimingQualifyingService(*s)
	}
	return eapu
}

// ClearClaimingQualifyingService clears the value of the "ClaimingQualifyingService" field.
func (eapu *ExamApplicationsPSUpdate) ClearClaimingQualifyingService() *ExamApplicationsPSUpdate {
	eapu.mutation.ClearClaimingQualifyingService()
	return eapu
}

// SetDeputationOfficePincode sets the "DeputationOfficePincode" field.
func (eapu *ExamApplicationsPSUpdate) SetDeputationOfficePincode(s string) *ExamApplicationsPSUpdate {
	eapu.mutation.SetDeputationOfficePincode(s)
	return eapu
}

// SetNillableDeputationOfficePincode sets the "DeputationOfficePincode" field if the given value is not nil.
func (eapu *ExamApplicationsPSUpdate) SetNillableDeputationOfficePincode(s *string) *ExamApplicationsPSUpdate {
	if s != nil {
		eapu.SetDeputationOfficePincode(*s)
	}
	return eapu
}

// ClearDeputationOfficePincode clears the value of the "DeputationOfficePincode" field.
func (eapu *ExamApplicationsPSUpdate) ClearDeputationOfficePincode() *ExamApplicationsPSUpdate {
	eapu.mutation.ClearDeputationOfficePincode()
	return eapu
}

// SetRecommendedStatus sets the "RecommendedStatus" field.
func (eapu *ExamApplicationsPSUpdate) SetRecommendedStatus(s string) *ExamApplicationsPSUpdate {
	eapu.mutation.SetRecommendedStatus(s)
	return eapu
}

// SetNillableRecommendedStatus sets the "RecommendedStatus" field if the given value is not nil.
func (eapu *ExamApplicationsPSUpdate) SetNillableRecommendedStatus(s *string) *ExamApplicationsPSUpdate {
	if s != nil {
		eapu.SetRecommendedStatus(*s)
	}
	return eapu
}

// ClearRecommendedStatus clears the value of the "RecommendedStatus" field.
func (eapu *ExamApplicationsPSUpdate) ClearRecommendedStatus() *ExamApplicationsPSUpdate {
	eapu.mutation.ClearRecommendedStatus()
	return eapu
}

// SetUpdatedAt sets the "UpdatedAt" field.
func (eapu *ExamApplicationsPSUpdate) SetUpdatedAt(t time.Time) *ExamApplicationsPSUpdate {
	eapu.mutation.SetUpdatedAt(t)
	return eapu
}

// SetNillableUpdatedAt sets the "UpdatedAt" field if the given value is not nil.
func (eapu *ExamApplicationsPSUpdate) SetNillableUpdatedAt(t *time.Time) *ExamApplicationsPSUpdate {
	if t != nil {
		eapu.SetUpdatedAt(*t)
	}
	return eapu
}

// ClearUpdatedAt clears the value of the "UpdatedAt" field.
func (eapu *ExamApplicationsPSUpdate) ClearUpdatedAt() *ExamApplicationsPSUpdate {
	eapu.mutation.ClearUpdatedAt()
	return eapu
}

// SetUpdatedBy sets the "UpdatedBy" field.
func (eapu *ExamApplicationsPSUpdate) SetUpdatedBy(s string) *ExamApplicationsPSUpdate {
	eapu.mutation.SetUpdatedBy(s)
	return eapu
}

// SetNillableUpdatedBy sets the "UpdatedBy" field if the given value is not nil.
func (eapu *ExamApplicationsPSUpdate) SetNillableUpdatedBy(s *string) *ExamApplicationsPSUpdate {
	if s != nil {
		eapu.SetUpdatedBy(*s)
	}
	return eapu
}

// ClearUpdatedBy clears the value of the "UpdatedBy" field.
func (eapu *ExamApplicationsPSUpdate) ClearUpdatedBy() *ExamApplicationsPSUpdate {
	eapu.mutation.ClearUpdatedBy()
	return eapu
}

// SetApplicationWdlDate sets the "ApplicationWdlDate" field.
func (eapu *ExamApplicationsPSUpdate) SetApplicationWdlDate(t time.Time) *ExamApplicationsPSUpdate {
	eapu.mutation.SetApplicationWdlDate(t)
	return eapu
}

// SetNillableApplicationWdlDate sets the "ApplicationWdlDate" field if the given value is not nil.
func (eapu *ExamApplicationsPSUpdate) SetNillableApplicationWdlDate(t *time.Time) *ExamApplicationsPSUpdate {
	if t != nil {
		eapu.SetApplicationWdlDate(*t)
	}
	return eapu
}

// ClearApplicationWdlDate clears the value of the "ApplicationWdlDate" field.
func (eapu *ExamApplicationsPSUpdate) ClearApplicationWdlDate() *ExamApplicationsPSUpdate {
	eapu.mutation.ClearApplicationWdlDate()
	return eapu
}

// SetExamCenterHall sets the "ExamCenterHall" field.
func (eapu *ExamApplicationsPSUpdate) SetExamCenterHall(i int32) *ExamApplicationsPSUpdate {
	eapu.mutation.ResetExamCenterHall()
	eapu.mutation.SetExamCenterHall(i)
	return eapu
}

// SetNillableExamCenterHall sets the "ExamCenterHall" field if the given value is not nil.
func (eapu *ExamApplicationsPSUpdate) SetNillableExamCenterHall(i *int32) *ExamApplicationsPSUpdate {
	if i != nil {
		eapu.SetExamCenterHall(*i)
	}
	return eapu
}

// AddExamCenterHall adds i to the "ExamCenterHall" field.
func (eapu *ExamApplicationsPSUpdate) AddExamCenterHall(i int32) *ExamApplicationsPSUpdate {
	eapu.mutation.AddExamCenterHall(i)
	return eapu
}

// ClearExamCenterHall clears the value of the "ExamCenterHall" field.
func (eapu *ExamApplicationsPSUpdate) ClearExamCenterHall() *ExamApplicationsPSUpdate {
	eapu.mutation.ClearExamCenterHall()
	return eapu
}

// SetHallName sets the "HallName" field.
func (eapu *ExamApplicationsPSUpdate) SetHallName(s string) *ExamApplicationsPSUpdate {
	eapu.mutation.SetHallName(s)
	return eapu
}

// SetNillableHallName sets the "HallName" field if the given value is not nil.
func (eapu *ExamApplicationsPSUpdate) SetNillableHallName(s *string) *ExamApplicationsPSUpdate {
	if s != nil {
		eapu.SetHallName(*s)
	}
	return eapu
}

// ClearHallName clears the value of the "HallName" field.
func (eapu *ExamApplicationsPSUpdate) ClearHallName() *ExamApplicationsPSUpdate {
	eapu.mutation.ClearHallName()
	return eapu
}

// SetReportingOfficeID sets the "ReportingOfficeID" field.
func (eapu *ExamApplicationsPSUpdate) SetReportingOfficeID(s string) *ExamApplicationsPSUpdate {
	eapu.mutation.SetReportingOfficeID(s)
	return eapu
}

// SetNillableReportingOfficeID sets the "ReportingOfficeID" field if the given value is not nil.
func (eapu *ExamApplicationsPSUpdate) SetNillableReportingOfficeID(s *string) *ExamApplicationsPSUpdate {
	if s != nil {
		eapu.SetReportingOfficeID(*s)
	}
	return eapu
}

// ClearReportingOfficeID clears the value of the "ReportingOfficeID" field.
func (eapu *ExamApplicationsPSUpdate) ClearReportingOfficeID() *ExamApplicationsPSUpdate {
	eapu.mutation.ClearReportingOfficeID()
	return eapu
}

// AddUsersPSRefIDs adds the "UsersPSRef" edge to the UserMaster entity by IDs.
func (eapu *ExamApplicationsPSUpdate) AddUsersPSRefIDs(ids ...int64) *ExamApplicationsPSUpdate {
	eapu.mutation.AddUsersPSRefIDs(ids...)
	return eapu
}

// AddUsersPSRef adds the "UsersPSRef" edges to the UserMaster entity.
func (eapu *ExamApplicationsPSUpdate) AddUsersPSRef(u ...*UserMaster) *ExamApplicationsPSUpdate {
	ids := make([]int64, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return eapu.AddUsersPSRefIDs(ids...)
}

// AddCadrePrefPSRefIDs adds the "CadrePrefPS_Ref" edge to the Cadre_Choice_PS entity by IDs.
func (eapu *ExamApplicationsPSUpdate) AddCadrePrefPSRefIDs(ids ...int32) *ExamApplicationsPSUpdate {
	eapu.mutation.AddCadrePrefPSRefIDs(ids...)
	return eapu
}

// AddCadrePrefPSRef adds the "CadrePrefPS_Ref" edges to the Cadre_Choice_PS entity.
func (eapu *ExamApplicationsPSUpdate) AddCadrePrefPSRef(c ...*Cadre_Choice_PS) *ExamApplicationsPSUpdate {
	ids := make([]int32, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return eapu.AddCadrePrefPSRefIDs(ids...)
}

// AddCirclePrefRefPSIDs adds the "CirclePrefRefPS" edge to the PlaceOfPreferencePS entity by IDs.
func (eapu *ExamApplicationsPSUpdate) AddCirclePrefRefPSIDs(ids ...int32) *ExamApplicationsPSUpdate {
	eapu.mutation.AddCirclePrefRefPSIDs(ids...)
	return eapu
}

// AddCirclePrefRefPS adds the "CirclePrefRefPS" edges to the PlaceOfPreferencePS entity.
func (eapu *ExamApplicationsPSUpdate) AddCirclePrefRefPS(p ...*PlaceOfPreferencePS) *ExamApplicationsPSUpdate {
	ids := make([]int32, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return eapu.AddCirclePrefRefPSIDs(ids...)
}

// AddPSApplicationsRefIDs adds the "PSApplicationsRef" edge to the RecommendationsPSApplications entity by IDs.
func (eapu *ExamApplicationsPSUpdate) AddPSApplicationsRefIDs(ids ...int64) *ExamApplicationsPSUpdate {
	eapu.mutation.AddPSApplicationsRefIDs(ids...)
	return eapu
}

// AddPSApplicationsRef adds the "PSApplicationsRef" edges to the RecommendationsPSApplications entity.
func (eapu *ExamApplicationsPSUpdate) AddPSApplicationsRef(r ...*RecommendationsPSApplications) *ExamApplicationsPSUpdate {
	ids := make([]int64, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return eapu.AddPSApplicationsRefIDs(ids...)
}

// SetExamsPSID sets the "ExamsPS" edge to the Exam entity by ID.
func (eapu *ExamApplicationsPSUpdate) SetExamsPSID(id int32) *ExamApplicationsPSUpdate {
	eapu.mutation.SetExamsPSID(id)
	return eapu
}

// SetNillableExamsPSID sets the "ExamsPS" edge to the Exam entity by ID if the given value is not nil.
func (eapu *ExamApplicationsPSUpdate) SetNillableExamsPSID(id *int32) *ExamApplicationsPSUpdate {
	if id != nil {
		eapu = eapu.SetExamsPSID(*id)
	}
	return eapu
}

// SetExamsPS sets the "ExamsPS" edge to the Exam entity.
func (eapu *ExamApplicationsPSUpdate) SetExamsPS(e *Exam) *ExamApplicationsPSUpdate {
	return eapu.SetExamsPSID(e.ID)
}

// SetRoleusersID sets the "roleusers" edge to the RoleMaster entity by ID.
func (eapu *ExamApplicationsPSUpdate) SetRoleusersID(id int32) *ExamApplicationsPSUpdate {
	eapu.mutation.SetRoleusersID(id)
	return eapu
}

// SetNillableRoleusersID sets the "roleusers" edge to the RoleMaster entity by ID if the given value is not nil.
func (eapu *ExamApplicationsPSUpdate) SetNillableRoleusersID(id *int32) *ExamApplicationsPSUpdate {
	if id != nil {
		eapu = eapu.SetRoleusersID(*id)
	}
	return eapu
}

// SetRoleusers sets the "roleusers" edge to the RoleMaster entity.
func (eapu *ExamApplicationsPSUpdate) SetRoleusers(r *RoleMaster) *ExamApplicationsPSUpdate {
	return eapu.SetRoleusersID(r.ID)
}

// SetExamcitycenterID sets the "examcitycenter" edge to the ExamCityCenter entity by ID.
func (eapu *ExamApplicationsPSUpdate) SetExamcitycenterID(id int32) *ExamApplicationsPSUpdate {
	eapu.mutation.SetExamcitycenterID(id)
	return eapu
}

// SetNillableExamcitycenterID sets the "examcitycenter" edge to the ExamCityCenter entity by ID if the given value is not nil.
func (eapu *ExamApplicationsPSUpdate) SetNillableExamcitycenterID(id *int32) *ExamApplicationsPSUpdate {
	if id != nil {
		eapu = eapu.SetExamcitycenterID(*id)
	}
	return eapu
}

// SetExamcitycenter sets the "examcitycenter" edge to the ExamCityCenter entity.
func (eapu *ExamApplicationsPSUpdate) SetExamcitycenter(e *ExamCityCenter) *ExamApplicationsPSUpdate {
	return eapu.SetExamcitycenterID(e.ID)
}

// SetPSExamCentresID sets the "PSExamCentres" edge to the Center entity by ID.
func (eapu *ExamApplicationsPSUpdate) SetPSExamCentresID(id int32) *ExamApplicationsPSUpdate {
	eapu.mutation.SetPSExamCentresID(id)
	return eapu
}

// SetNillablePSExamCentresID sets the "PSExamCentres" edge to the Center entity by ID if the given value is not nil.
func (eapu *ExamApplicationsPSUpdate) SetNillablePSExamCentresID(id *int32) *ExamApplicationsPSUpdate {
	if id != nil {
		eapu = eapu.SetPSExamCentresID(*id)
	}
	return eapu
}

// SetPSExamCentres sets the "PSExamCentres" edge to the Center entity.
func (eapu *ExamApplicationsPSUpdate) SetPSExamCentres(c *Center) *ExamApplicationsPSUpdate {
	return eapu.SetPSExamCentresID(c.ID)
}

// SetCircleRefsID sets the "CircleRefs" edge to the CircleSummaryForNO entity by ID.
func (eapu *ExamApplicationsPSUpdate) SetCircleRefsID(id int32) *ExamApplicationsPSUpdate {
	eapu.mutation.SetCircleRefsID(id)
	return eapu
}

// SetNillableCircleRefsID sets the "CircleRefs" edge to the CircleSummaryForNO entity by ID if the given value is not nil.
func (eapu *ExamApplicationsPSUpdate) SetNillableCircleRefsID(id *int32) *ExamApplicationsPSUpdate {
	if id != nil {
		eapu = eapu.SetCircleRefsID(*id)
	}
	return eapu
}

// SetCircleRefs sets the "CircleRefs" edge to the CircleSummaryForNO entity.
func (eapu *ExamApplicationsPSUpdate) SetCircleRefs(c *CircleSummaryForNO) *ExamApplicationsPSUpdate {
	return eapu.SetCircleRefsID(c.ID)
}

// AddLogDatumIDs adds the "LogData" edge to the Logs entity by IDs.
func (eapu *ExamApplicationsPSUpdate) AddLogDatumIDs(ids ...int64) *ExamApplicationsPSUpdate {
	eapu.mutation.AddLogDatumIDs(ids...)
	return eapu
}

// AddLogData adds the "LogData" edges to the Logs entity.
func (eapu *ExamApplicationsPSUpdate) AddLogData(l ...*Logs) *ExamApplicationsPSUpdate {
	ids := make([]int64, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return eapu.AddLogDatumIDs(ids...)
}

// Mutation returns the ExamApplicationsPSMutation object of the builder.
func (eapu *ExamApplicationsPSUpdate) Mutation() *ExamApplicationsPSMutation {
	return eapu.mutation
}

// ClearUsersPSRef clears all "UsersPSRef" edges to the UserMaster entity.
func (eapu *ExamApplicationsPSUpdate) ClearUsersPSRef() *ExamApplicationsPSUpdate {
	eapu.mutation.ClearUsersPSRef()
	return eapu
}

// RemoveUsersPSRefIDs removes the "UsersPSRef" edge to UserMaster entities by IDs.
func (eapu *ExamApplicationsPSUpdate) RemoveUsersPSRefIDs(ids ...int64) *ExamApplicationsPSUpdate {
	eapu.mutation.RemoveUsersPSRefIDs(ids...)
	return eapu
}

// RemoveUsersPSRef removes "UsersPSRef" edges to UserMaster entities.
func (eapu *ExamApplicationsPSUpdate) RemoveUsersPSRef(u ...*UserMaster) *ExamApplicationsPSUpdate {
	ids := make([]int64, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return eapu.RemoveUsersPSRefIDs(ids...)
}

// ClearCadrePrefPSRef clears all "CadrePrefPS_Ref" edges to the Cadre_Choice_PS entity.
func (eapu *ExamApplicationsPSUpdate) ClearCadrePrefPSRef() *ExamApplicationsPSUpdate {
	eapu.mutation.ClearCadrePrefPSRef()
	return eapu
}

// RemoveCadrePrefPSRefIDs removes the "CadrePrefPS_Ref" edge to Cadre_Choice_PS entities by IDs.
func (eapu *ExamApplicationsPSUpdate) RemoveCadrePrefPSRefIDs(ids ...int32) *ExamApplicationsPSUpdate {
	eapu.mutation.RemoveCadrePrefPSRefIDs(ids...)
	return eapu
}

// RemoveCadrePrefPSRef removes "CadrePrefPS_Ref" edges to Cadre_Choice_PS entities.
func (eapu *ExamApplicationsPSUpdate) RemoveCadrePrefPSRef(c ...*Cadre_Choice_PS) *ExamApplicationsPSUpdate {
	ids := make([]int32, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return eapu.RemoveCadrePrefPSRefIDs(ids...)
}

// ClearCirclePrefRefPS clears all "CirclePrefRefPS" edges to the PlaceOfPreferencePS entity.
func (eapu *ExamApplicationsPSUpdate) ClearCirclePrefRefPS() *ExamApplicationsPSUpdate {
	eapu.mutation.ClearCirclePrefRefPS()
	return eapu
}

// RemoveCirclePrefRefPSIDs removes the "CirclePrefRefPS" edge to PlaceOfPreferencePS entities by IDs.
func (eapu *ExamApplicationsPSUpdate) RemoveCirclePrefRefPSIDs(ids ...int32) *ExamApplicationsPSUpdate {
	eapu.mutation.RemoveCirclePrefRefPSIDs(ids...)
	return eapu
}

// RemoveCirclePrefRefPS removes "CirclePrefRefPS" edges to PlaceOfPreferencePS entities.
func (eapu *ExamApplicationsPSUpdate) RemoveCirclePrefRefPS(p ...*PlaceOfPreferencePS) *ExamApplicationsPSUpdate {
	ids := make([]int32, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return eapu.RemoveCirclePrefRefPSIDs(ids...)
}

// ClearPSApplicationsRef clears all "PSApplicationsRef" edges to the RecommendationsPSApplications entity.
func (eapu *ExamApplicationsPSUpdate) ClearPSApplicationsRef() *ExamApplicationsPSUpdate {
	eapu.mutation.ClearPSApplicationsRef()
	return eapu
}

// RemovePSApplicationsRefIDs removes the "PSApplicationsRef" edge to RecommendationsPSApplications entities by IDs.
func (eapu *ExamApplicationsPSUpdate) RemovePSApplicationsRefIDs(ids ...int64) *ExamApplicationsPSUpdate {
	eapu.mutation.RemovePSApplicationsRefIDs(ids...)
	return eapu
}

// RemovePSApplicationsRef removes "PSApplicationsRef" edges to RecommendationsPSApplications entities.
func (eapu *ExamApplicationsPSUpdate) RemovePSApplicationsRef(r ...*RecommendationsPSApplications) *ExamApplicationsPSUpdate {
	ids := make([]int64, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return eapu.RemovePSApplicationsRefIDs(ids...)
}

// ClearExamsPS clears the "ExamsPS" edge to the Exam entity.
func (eapu *ExamApplicationsPSUpdate) ClearExamsPS() *ExamApplicationsPSUpdate {
	eapu.mutation.ClearExamsPS()
	return eapu
}

// ClearRoleusers clears the "roleusers" edge to the RoleMaster entity.
func (eapu *ExamApplicationsPSUpdate) ClearRoleusers() *ExamApplicationsPSUpdate {
	eapu.mutation.ClearRoleusers()
	return eapu
}

// ClearExamcitycenter clears the "examcitycenter" edge to the ExamCityCenter entity.
func (eapu *ExamApplicationsPSUpdate) ClearExamcitycenter() *ExamApplicationsPSUpdate {
	eapu.mutation.ClearExamcitycenter()
	return eapu
}

// ClearPSExamCentres clears the "PSExamCentres" edge to the Center entity.
func (eapu *ExamApplicationsPSUpdate) ClearPSExamCentres() *ExamApplicationsPSUpdate {
	eapu.mutation.ClearPSExamCentres()
	return eapu
}

// ClearCircleRefs clears the "CircleRefs" edge to the CircleSummaryForNO entity.
func (eapu *ExamApplicationsPSUpdate) ClearCircleRefs() *ExamApplicationsPSUpdate {
	eapu.mutation.ClearCircleRefs()
	return eapu
}

// ClearLogData clears all "LogData" edges to the Logs entity.
func (eapu *ExamApplicationsPSUpdate) ClearLogData() *ExamApplicationsPSUpdate {
	eapu.mutation.ClearLogData()
	return eapu
}

// RemoveLogDatumIDs removes the "LogData" edge to Logs entities by IDs.
func (eapu *ExamApplicationsPSUpdate) RemoveLogDatumIDs(ids ...int64) *ExamApplicationsPSUpdate {
	eapu.mutation.RemoveLogDatumIDs(ids...)
	return eapu
}

// RemoveLogData removes "LogData" edges to Logs entities.
func (eapu *ExamApplicationsPSUpdate) RemoveLogData(l ...*Logs) *ExamApplicationsPSUpdate {
	ids := make([]int64, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return eapu.RemoveLogDatumIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (eapu *ExamApplicationsPSUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, eapu.sqlSave, eapu.mutation, eapu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (eapu *ExamApplicationsPSUpdate) SaveX(ctx context.Context) int {
	affected, err := eapu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (eapu *ExamApplicationsPSUpdate) Exec(ctx context.Context) error {
	_, err := eapu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eapu *ExamApplicationsPSUpdate) ExecX(ctx context.Context) {
	if err := eapu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (eapu *ExamApplicationsPSUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(exam_applications_ps.Table, exam_applications_ps.Columns, sqlgraph.NewFieldSpec(exam_applications_ps.FieldID, field.TypeInt64))
	if ps := eapu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eapu.mutation.ApplicationNumber(); ok {
		_spec.SetField(exam_applications_ps.FieldApplicationNumber, field.TypeString, value)
	}
	if eapu.mutation.ApplicationNumberCleared() {
		_spec.ClearField(exam_applications_ps.FieldApplicationNumber, field.TypeString)
	}
	if value, ok := eapu.mutation.ApplnSubmittedDate(); ok {
		_spec.SetField(exam_applications_ps.FieldApplnSubmittedDate, field.TypeTime, value)
	}
	if eapu.mutation.ApplnSubmittedDateCleared() {
		_spec.ClearField(exam_applications_ps.FieldApplnSubmittedDate, field.TypeTime)
	}
	if value, ok := eapu.mutation.ExamShortName(); ok {
		_spec.SetField(exam_applications_ps.FieldExamShortName, field.TypeString, value)
	}
	if eapu.mutation.ExamShortNameCleared() {
		_spec.ClearField(exam_applications_ps.FieldExamShortName, field.TypeString)
	}
	if value, ok := eapu.mutation.ExamName(); ok {
		_spec.SetField(exam_applications_ps.FieldExamName, field.TypeString, value)
	}
	if eapu.mutation.ExamNameCleared() {
		_spec.ClearField(exam_applications_ps.FieldExamName, field.TypeString)
	}
	if value, ok := eapu.mutation.SmsExamShortName(); ok {
		_spec.SetField(exam_applications_ps.FieldSmsExamShortName, field.TypeString, value)
	}
	if eapu.mutation.SmsExamShortNameCleared() {
		_spec.ClearField(exam_applications_ps.FieldSmsExamShortName, field.TypeString)
	}
	if value, ok := eapu.mutation.ExamYear(); ok {
		_spec.SetField(exam_applications_ps.FieldExamYear, field.TypeString, value)
	}
	if eapu.mutation.ExamYearCleared() {
		_spec.ClearField(exam_applications_ps.FieldExamYear, field.TypeString)
	}
	if value, ok := eapu.mutation.UserID(); ok {
		_spec.SetField(exam_applications_ps.FieldUserID, field.TypeInt32, value)
	}
	if value, ok := eapu.mutation.AddedUserID(); ok {
		_spec.AddField(exam_applications_ps.FieldUserID, field.TypeInt32, value)
	}
	if eapu.mutation.UserIDCleared() {
		_spec.ClearField(exam_applications_ps.FieldUserID, field.TypeInt32)
	}
	if value, ok := eapu.mutation.EmployeeID(); ok {
		_spec.SetField(exam_applications_ps.FieldEmployeeID, field.TypeInt64, value)
	}
	if value, ok := eapu.mutation.AddedEmployeeID(); ok {
		_spec.AddField(exam_applications_ps.FieldEmployeeID, field.TypeInt64, value)
	}
	if eapu.mutation.EmployeeIDCleared() {
		_spec.ClearField(exam_applications_ps.FieldEmployeeID, field.TypeInt64)
	}
	if value, ok := eapu.mutation.EmployeeName(); ok {
		_spec.SetField(exam_applications_ps.FieldEmployeeName, field.TypeString, value)
	}
	if eapu.mutation.EmployeeNameCleared() {
		_spec.ClearField(exam_applications_ps.FieldEmployeeName, field.TypeString)
	}
	if value, ok := eapu.mutation.DOB(); ok {
		_spec.SetField(exam_applications_ps.FieldDOB, field.TypeString, value)
	}
	if eapu.mutation.DOBCleared() {
		_spec.ClearField(exam_applications_ps.FieldDOB, field.TypeString)
	}
	if value, ok := eapu.mutation.Gender(); ok {
		_spec.SetField(exam_applications_ps.FieldGender, field.TypeString, value)
	}
	if eapu.mutation.GenderCleared() {
		_spec.ClearField(exam_applications_ps.FieldGender, field.TypeString)
	}
	if value, ok := eapu.mutation.MobileNumber(); ok {
		_spec.SetField(exam_applications_ps.FieldMobileNumber, field.TypeString, value)
	}
	if eapu.mutation.MobileNumberCleared() {
		_spec.ClearField(exam_applications_ps.FieldMobileNumber, field.TypeString)
	}
	if value, ok := eapu.mutation.EmailID(); ok {
		_spec.SetField(exam_applications_ps.FieldEmailID, field.TypeString, value)
	}
	if eapu.mutation.EmailIDCleared() {
		_spec.ClearField(exam_applications_ps.FieldEmailID, field.TypeString)
	}
	if value, ok := eapu.mutation.CategoryCode(); ok {
		_spec.SetField(exam_applications_ps.FieldCategoryCode, field.TypeString, value)
	}
	if eapu.mutation.CategoryCodeCleared() {
		_spec.ClearField(exam_applications_ps.FieldCategoryCode, field.TypeString)
	}
	if value, ok := eapu.mutation.CategoryDescription(); ok {
		_spec.SetField(exam_applications_ps.FieldCategoryDescription, field.TypeString, value)
	}
	if eapu.mutation.CategoryDescriptionCleared() {
		_spec.ClearField(exam_applications_ps.FieldCategoryDescription, field.TypeString)
	}
	if value, ok := eapu.mutation.DisabilityTypeID(); ok {
		_spec.SetField(exam_applications_ps.FieldDisabilityTypeID, field.TypeString, value)
	}
	if eapu.mutation.DisabilityTypeIDCleared() {
		_spec.ClearField(exam_applications_ps.FieldDisabilityTypeID, field.TypeString)
	}
	if value, ok := eapu.mutation.DisabilityTypeCode(); ok {
		_spec.SetField(exam_applications_ps.FieldDisabilityTypeCode, field.TypeString, value)
	}
	if eapu.mutation.DisabilityTypeCodeCleared() {
		_spec.ClearField(exam_applications_ps.FieldDisabilityTypeCode, field.TypeString)
	}
	if value, ok := eapu.mutation.DisabilityTypeDescription(); ok {
		_spec.SetField(exam_applications_ps.FieldDisabilityTypeDescription, field.TypeString, value)
	}
	if eapu.mutation.DisabilityTypeDescriptionCleared() {
		_spec.ClearField(exam_applications_ps.FieldDisabilityTypeDescription, field.TypeString)
	}
	if value, ok := eapu.mutation.DisabilityPercentage(); ok {
		_spec.SetField(exam_applications_ps.FieldDisabilityPercentage, field.TypeInt32, value)
	}
	if value, ok := eapu.mutation.AddedDisabilityPercentage(); ok {
		_spec.AddField(exam_applications_ps.FieldDisabilityPercentage, field.TypeInt32, value)
	}
	if eapu.mutation.DisabilityPercentageCleared() {
		_spec.ClearField(exam_applications_ps.FieldDisabilityPercentage, field.TypeInt32)
	}
	if value, ok := eapu.mutation.DCCS(); ok {
		_spec.SetField(exam_applications_ps.FieldDCCS, field.TypeString, value)
	}
	if eapu.mutation.DCCSCleared() {
		_spec.ClearField(exam_applications_ps.FieldDCCS, field.TypeString)
	}
	if value, ok := eapu.mutation.EntryPostCode(); ok {
		_spec.SetField(exam_applications_ps.FieldEntryPostCode, field.TypeString, value)
	}
	if eapu.mutation.EntryPostCodeCleared() {
		_spec.ClearField(exam_applications_ps.FieldEntryPostCode, field.TypeString)
	}
	if value, ok := eapu.mutation.EntryPostDescription(); ok {
		_spec.SetField(exam_applications_ps.FieldEntryPostDescription, field.TypeString, value)
	}
	if eapu.mutation.EntryPostDescriptionCleared() {
		_spec.ClearField(exam_applications_ps.FieldEntryPostDescription, field.TypeString)
	}
	if value, ok := eapu.mutation.PresentPostCode(); ok {
		_spec.SetField(exam_applications_ps.FieldPresentPostCode, field.TypeString, value)
	}
	if eapu.mutation.PresentPostCodeCleared() {
		_spec.ClearField(exam_applications_ps.FieldPresentPostCode, field.TypeString)
	}
	if value, ok := eapu.mutation.PresentPostDescription(); ok {
		_spec.SetField(exam_applications_ps.FieldPresentPostDescription, field.TypeString, value)
	}
	if eapu.mutation.PresentPostDescriptionCleared() {
		_spec.ClearField(exam_applications_ps.FieldPresentPostDescription, field.TypeString)
	}
	if value, ok := eapu.mutation.FeederPostCode(); ok {
		_spec.SetField(exam_applications_ps.FieldFeederPostCode, field.TypeString, value)
	}
	if eapu.mutation.FeederPostCodeCleared() {
		_spec.ClearField(exam_applications_ps.FieldFeederPostCode, field.TypeString)
	}
	if value, ok := eapu.mutation.FeederPostDescription(); ok {
		_spec.SetField(exam_applications_ps.FieldFeederPostDescription, field.TypeString, value)
	}
	if eapu.mutation.FeederPostDescriptionCleared() {
		_spec.ClearField(exam_applications_ps.FieldFeederPostDescription, field.TypeString)
	}
	if value, ok := eapu.mutation.FeederPostJoiningDate(); ok {
		_spec.SetField(exam_applications_ps.FieldFeederPostJoiningDate, field.TypeString, value)
	}
	if eapu.mutation.FeederPostJoiningDateCleared() {
		_spec.ClearField(exam_applications_ps.FieldFeederPostJoiningDate, field.TypeString)
	}
	if value, ok := eapu.mutation.DesignationID(); ok {
		_spec.SetField(exam_applications_ps.FieldDesignationID, field.TypeString, value)
	}
	if eapu.mutation.DesignationIDCleared() {
		_spec.ClearField(exam_applications_ps.FieldDesignationID, field.TypeString)
	}
	if value, ok := eapu.mutation.PresentDesignation(); ok {
		_spec.SetField(exam_applications_ps.FieldPresentDesignation, field.TypeString, value)
	}
	if eapu.mutation.PresentDesignationCleared() {
		_spec.ClearField(exam_applications_ps.FieldPresentDesignation, field.TypeString)
	}
	if value, ok := eapu.mutation.EducationCode(); ok {
		_spec.SetField(exam_applications_ps.FieldEducationCode, field.TypeString, value)
	}
	if eapu.mutation.EducationCodeCleared() {
		_spec.ClearField(exam_applications_ps.FieldEducationCode, field.TypeString)
	}
	if value, ok := eapu.mutation.EducationDescription(); ok {
		_spec.SetField(exam_applications_ps.FieldEducationDescription, field.TypeString, value)
	}
	if eapu.mutation.EducationDescriptionCleared() {
		_spec.ClearField(exam_applications_ps.FieldEducationDescription, field.TypeString)
	}
	if value, ok := eapu.mutation.FacilityUniqueID(); ok {
		_spec.SetField(exam_applications_ps.FieldFacilityUniqueID, field.TypeString, value)
	}
	if eapu.mutation.FacilityUniqueIDCleared() {
		_spec.ClearField(exam_applications_ps.FieldFacilityUniqueID, field.TypeString)
	}
	if value, ok := eapu.mutation.WorkingOfficePincode(); ok {
		_spec.SetField(exam_applications_ps.FieldWorkingOfficePincode, field.TypeInt32, value)
	}
	if value, ok := eapu.mutation.AddedWorkingOfficePincode(); ok {
		_spec.AddField(exam_applications_ps.FieldWorkingOfficePincode, field.TypeInt32, value)
	}
	if eapu.mutation.WorkingOfficePincodeCleared() {
		_spec.ClearField(exam_applications_ps.FieldWorkingOfficePincode, field.TypeInt32)
	}
	if value, ok := eapu.mutation.WorkingOfficeFacilityID(); ok {
		_spec.SetField(exam_applications_ps.FieldWorkingOfficeFacilityID, field.TypeString, value)
	}
	if eapu.mutation.WorkingOfficeFacilityIDCleared() {
		_spec.ClearField(exam_applications_ps.FieldWorkingOfficeFacilityID, field.TypeString)
	}
	if value, ok := eapu.mutation.WorkingOfficeName(); ok {
		_spec.SetField(exam_applications_ps.FieldWorkingOfficeName, field.TypeString, value)
	}
	if eapu.mutation.WorkingOfficeNameCleared() {
		_spec.ClearField(exam_applications_ps.FieldWorkingOfficeName, field.TypeString)
	}
	if value, ok := eapu.mutation.WorkingOfficeCircleFacilityID(); ok {
		_spec.SetField(exam_applications_ps.FieldWorkingOfficeCircleFacilityID, field.TypeString, value)
	}
	if eapu.mutation.WorkingOfficeCircleFacilityIDCleared() {
		_spec.ClearField(exam_applications_ps.FieldWorkingOfficeCircleFacilityID, field.TypeString)
	}
	if value, ok := eapu.mutation.WorkingOfficeCircleName(); ok {
		_spec.SetField(exam_applications_ps.FieldWorkingOfficeCircleName, field.TypeString, value)
	}
	if eapu.mutation.WorkingOfficeCircleNameCleared() {
		_spec.ClearField(exam_applications_ps.FieldWorkingOfficeCircleName, field.TypeString)
	}
	if value, ok := eapu.mutation.WorkingOfficeRegionFacilityID(); ok {
		_spec.SetField(exam_applications_ps.FieldWorkingOfficeRegionFacilityID, field.TypeString, value)
	}
	if eapu.mutation.WorkingOfficeRegionFacilityIDCleared() {
		_spec.ClearField(exam_applications_ps.FieldWorkingOfficeRegionFacilityID, field.TypeString)
	}
	if value, ok := eapu.mutation.WorkingOfficeRegionName(); ok {
		_spec.SetField(exam_applications_ps.FieldWorkingOfficeRegionName, field.TypeString, value)
	}
	if eapu.mutation.WorkingOfficeRegionNameCleared() {
		_spec.ClearField(exam_applications_ps.FieldWorkingOfficeRegionName, field.TypeString)
	}
	if value, ok := eapu.mutation.WorkingOfficeDivisionFacilityID(); ok {
		_spec.SetField(exam_applications_ps.FieldWorkingOfficeDivisionFacilityID, field.TypeString, value)
	}
	if eapu.mutation.WorkingOfficeDivisionFacilityIDCleared() {
		_spec.ClearField(exam_applications_ps.FieldWorkingOfficeDivisionFacilityID, field.TypeString)
	}
	if value, ok := eapu.mutation.WorkingOfficeDivisionName(); ok {
		_spec.SetField(exam_applications_ps.FieldWorkingOfficeDivisionName, field.TypeString, value)
	}
	if eapu.mutation.WorkingOfficeDivisionNameCleared() {
		_spec.ClearField(exam_applications_ps.FieldWorkingOfficeDivisionName, field.TypeString)
	}
	if value, ok := eapu.mutation.ReportingOfficeFacilityID(); ok {
		_spec.SetField(exam_applications_ps.FieldReportingOfficeFacilityID, field.TypeString, value)
	}
	if eapu.mutation.ReportingOfficeFacilityIDCleared() {
		_spec.ClearField(exam_applications_ps.FieldReportingOfficeFacilityID, field.TypeString)
	}
	if value, ok := eapu.mutation.ReportingOfficeName(); ok {
		_spec.SetField(exam_applications_ps.FieldReportingOfficeName, field.TypeString, value)
	}
	if eapu.mutation.ReportingOfficeNameCleared() {
		_spec.ClearField(exam_applications_ps.FieldReportingOfficeName, field.TypeString)
	}
	if value, ok := eapu.mutation.LienControllingOfficeID(); ok {
		_spec.SetField(exam_applications_ps.FieldLienControllingOfficeID, field.TypeString, value)
	}
	if eapu.mutation.LienControllingOfficeIDCleared() {
		_spec.ClearField(exam_applications_ps.FieldLienControllingOfficeID, field.TypeString)
	}
	if value, ok := eapu.mutation.LienControllingOfficeName(); ok {
		_spec.SetField(exam_applications_ps.FieldLienControllingOfficeName, field.TypeString, value)
	}
	if eapu.mutation.LienControllingOfficeNameCleared() {
		_spec.ClearField(exam_applications_ps.FieldLienControllingOfficeName, field.TypeString)
	}
	if value, ok := eapu.mutation.InDeputation(); ok {
		_spec.SetField(exam_applications_ps.FieldInDeputation, field.TypeString, value)
	}
	if eapu.mutation.InDeputationCleared() {
		_spec.ClearField(exam_applications_ps.FieldInDeputation, field.TypeString)
	}
	if value, ok := eapu.mutation.DeputationType(); ok {
		_spec.SetField(exam_applications_ps.FieldDeputationType, field.TypeString, value)
	}
	if eapu.mutation.DeputationTypeCleared() {
		_spec.ClearField(exam_applications_ps.FieldDeputationType, field.TypeString)
	}
	if value, ok := eapu.mutation.DeputationOfficeUniqueId(); ok {
		_spec.SetField(exam_applications_ps.FieldDeputationOfficeUniqueId, field.TypeString, value)
	}
	if eapu.mutation.DeputationOfficeUniqueIdCleared() {
		_spec.ClearField(exam_applications_ps.FieldDeputationOfficeUniqueId, field.TypeString)
	}
	if value, ok := eapu.mutation.DeputationOfficeFacilityID(); ok {
		_spec.SetField(exam_applications_ps.FieldDeputationOfficeFacilityID, field.TypeString, value)
	}
	if eapu.mutation.DeputationOfficeFacilityIDCleared() {
		_spec.ClearField(exam_applications_ps.FieldDeputationOfficeFacilityID, field.TypeString)
	}
	if value, ok := eapu.mutation.DeputationOfficeName(); ok {
		_spec.SetField(exam_applications_ps.FieldDeputationOfficeName, field.TypeString, value)
	}
	if eapu.mutation.DeputationOfficeNameCleared() {
		_spec.ClearField(exam_applications_ps.FieldDeputationOfficeName, field.TypeString)
	}
	if value, ok := eapu.mutation.DeputationControllingOfficeID(); ok {
		_spec.SetField(exam_applications_ps.FieldDeputationControllingOfficeID, field.TypeString, value)
	}
	if eapu.mutation.DeputationControllingOfficeIDCleared() {
		_spec.ClearField(exam_applications_ps.FieldDeputationControllingOfficeID, field.TypeString)
	}
	if value, ok := eapu.mutation.DeputationControllingOfficeName(); ok {
		_spec.SetField(exam_applications_ps.FieldDeputationControllingOfficeName, field.TypeString, value)
	}
	if eapu.mutation.DeputationControllingOfficeNameCleared() {
		_spec.ClearField(exam_applications_ps.FieldDeputationControllingOfficeName, field.TypeString)
	}
	if value, ok := eapu.mutation.ControllingOfficeFacilityID(); ok {
		_spec.SetField(exam_applications_ps.FieldControllingOfficeFacilityID, field.TypeString, value)
	}
	if eapu.mutation.ControllingOfficeFacilityIDCleared() {
		_spec.ClearField(exam_applications_ps.FieldControllingOfficeFacilityID, field.TypeString)
	}
	if value, ok := eapu.mutation.ControllingOfficeName(); ok {
		_spec.SetField(exam_applications_ps.FieldControllingOfficeName, field.TypeString, value)
	}
	if eapu.mutation.ControllingOfficeNameCleared() {
		_spec.ClearField(exam_applications_ps.FieldControllingOfficeName, field.TypeString)
	}
	if value, ok := eapu.mutation.NodalOfficeFacilityID(); ok {
		_spec.SetField(exam_applications_ps.FieldNodalOfficeFacilityID, field.TypeString, value)
	}
	if eapu.mutation.NodalOfficeFacilityIDCleared() {
		_spec.ClearField(exam_applications_ps.FieldNodalOfficeFacilityID, field.TypeString)
	}
	if value, ok := eapu.mutation.NodalOfficeName(); ok {
		_spec.SetField(exam_applications_ps.FieldNodalOfficeName, field.TypeString, value)
	}
	if eapu.mutation.NodalOfficeNameCleared() {
		_spec.ClearField(exam_applications_ps.FieldNodalOfficeName, field.TypeString)
	}
	if value, ok := eapu.mutation.CenterFacilityId(); ok {
		_spec.SetField(exam_applications_ps.FieldCenterFacilityId, field.TypeString, value)
	}
	if eapu.mutation.CenterFacilityIdCleared() {
		_spec.ClearField(exam_applications_ps.FieldCenterFacilityId, field.TypeString)
	}
	if value, ok := eapu.mutation.CentrePreference(); ok {
		_spec.SetField(exam_applications_ps.FieldCentrePreference, field.TypeString, value)
	}
	if eapu.mutation.CentrePreferenceCleared() {
		_spec.ClearField(exam_applications_ps.FieldCentrePreference, field.TypeString)
	}
	if value, ok := eapu.mutation.Signature(); ok {
		_spec.SetField(exam_applications_ps.FieldSignature, field.TypeString, value)
	}
	if eapu.mutation.SignatureCleared() {
		_spec.ClearField(exam_applications_ps.FieldSignature, field.TypeString)
	}
	if value, ok := eapu.mutation.Photo(); ok {
		_spec.SetField(exam_applications_ps.FieldPhoto, field.TypeString, value)
	}
	if eapu.mutation.PhotoCleared() {
		_spec.ClearField(exam_applications_ps.FieldPhoto, field.TypeString)
	}
	if value, ok := eapu.mutation.SignaturePath(); ok {
		_spec.SetField(exam_applications_ps.FieldSignaturePath, field.TypeString, value)
	}
	if eapu.mutation.SignaturePathCleared() {
		_spec.ClearField(exam_applications_ps.FieldSignaturePath, field.TypeString)
	}
	if value, ok := eapu.mutation.PhotoPath(); ok {
		_spec.SetField(exam_applications_ps.FieldPhotoPath, field.TypeString, value)
	}
	if eapu.mutation.PhotoPathCleared() {
		_spec.ClearField(exam_applications_ps.FieldPhotoPath, field.TypeString)
	}
	if value, ok := eapu.mutation.TempHallTicket(); ok {
		_spec.SetField(exam_applications_ps.FieldTempHallTicket, field.TypeString, value)
	}
	if eapu.mutation.TempHallTicketCleared() {
		_spec.ClearField(exam_applications_ps.FieldTempHallTicket, field.TypeString)
	}
	if value, ok := eapu.mutation.CandidateRemarks(); ok {
		_spec.SetField(exam_applications_ps.FieldCandidateRemarks, field.TypeString, value)
	}
	if eapu.mutation.CandidateRemarksCleared() {
		_spec.ClearField(exam_applications_ps.FieldCandidateRemarks, field.TypeString)
	}
	if value, ok := eapu.mutation.VAGeneralRemarks(); ok {
		_spec.SetField(exam_applications_ps.FieldVAGeneralRemarks, field.TypeString, value)
	}
	if eapu.mutation.VAGeneralRemarksCleared() {
		_spec.ClearField(exam_applications_ps.FieldVAGeneralRemarks, field.TypeString)
	}
	if value, ok := eapu.mutation.CAGeneralRemarks(); ok {
		_spec.SetField(exam_applications_ps.FieldCAGeneralRemarks, field.TypeString, value)
	}
	if eapu.mutation.CAGeneralRemarksCleared() {
		_spec.ClearField(exam_applications_ps.FieldCAGeneralRemarks, field.TypeString)
	}
	if value, ok := eapu.mutation.NAGeneralRemarks(); ok {
		_spec.SetField(exam_applications_ps.FieldNAGeneralRemarks, field.TypeString, value)
	}
	if eapu.mutation.NAGeneralRemarksCleared() {
		_spec.ClearField(exam_applications_ps.FieldNAGeneralRemarks, field.TypeString)
	}
	if value, ok := eapu.mutation.ApplicationStatus(); ok {
		_spec.SetField(exam_applications_ps.FieldApplicationStatus, field.TypeString, value)
	}
	if eapu.mutation.ApplicationStatusCleared() {
		_spec.ClearField(exam_applications_ps.FieldApplicationStatus, field.TypeString)
	}
	if value, ok := eapu.mutation.Status(); ok {
		_spec.SetField(exam_applications_ps.FieldStatus, field.TypeString, value)
	}
	if eapu.mutation.StatusCleared() {
		_spec.ClearField(exam_applications_ps.FieldStatus, field.TypeString)
	}
	if value, ok := eapu.mutation.VAUserId(); ok {
		_spec.SetField(exam_applications_ps.FieldVAUserId, field.TypeInt32, value)
	}
	if value, ok := eapu.mutation.AddedVAUserId(); ok {
		_spec.AddField(exam_applications_ps.FieldVAUserId, field.TypeInt32, value)
	}
	if eapu.mutation.VAUserIdCleared() {
		_spec.ClearField(exam_applications_ps.FieldVAUserId, field.TypeInt32)
	}
	if value, ok := eapu.mutation.VAUserName(); ok {
		_spec.SetField(exam_applications_ps.FieldVAUserName, field.TypeString, value)
	}
	if eapu.mutation.VAUserNameCleared() {
		_spec.ClearField(exam_applications_ps.FieldVAUserName, field.TypeString)
	}
	if value, ok := eapu.mutation.VAEmployeeID(); ok {
		_spec.SetField(exam_applications_ps.FieldVAEmployeeID, field.TypeString, value)
	}
	if eapu.mutation.VAEmployeeIDCleared() {
		_spec.ClearField(exam_applications_ps.FieldVAEmployeeID, field.TypeString)
	}
	if value, ok := eapu.mutation.VAEmployeeDesignation(); ok {
		_spec.SetField(exam_applications_ps.FieldVAEmployeeDesignation, field.TypeString, value)
	}
	if eapu.mutation.VAEmployeeDesignationCleared() {
		_spec.ClearField(exam_applications_ps.FieldVAEmployeeDesignation, field.TypeString)
	}
	if value, ok := eapu.mutation.VARemarks(); ok {
		_spec.SetField(exam_applications_ps.FieldVARemarks, field.TypeString, value)
	}
	if eapu.mutation.VARemarksCleared() {
		_spec.ClearField(exam_applications_ps.FieldVARemarks, field.TypeString)
	}
	if value, ok := eapu.mutation.VADate(); ok {
		_spec.SetField(exam_applications_ps.FieldVADate, field.TypeTime, value)
	}
	if eapu.mutation.VADateCleared() {
		_spec.ClearField(exam_applications_ps.FieldVADate, field.TypeTime)
	}
	if value, ok := eapu.mutation.CAUserId(); ok {
		_spec.SetField(exam_applications_ps.FieldCAUserId, field.TypeInt32, value)
	}
	if value, ok := eapu.mutation.AddedCAUserId(); ok {
		_spec.AddField(exam_applications_ps.FieldCAUserId, field.TypeInt32, value)
	}
	if eapu.mutation.CAUserIdCleared() {
		_spec.ClearField(exam_applications_ps.FieldCAUserId, field.TypeInt32)
	}
	if value, ok := eapu.mutation.CAUserName(); ok {
		_spec.SetField(exam_applications_ps.FieldCAUserName, field.TypeString, value)
	}
	if eapu.mutation.CAUserNameCleared() {
		_spec.ClearField(exam_applications_ps.FieldCAUserName, field.TypeString)
	}
	if value, ok := eapu.mutation.CAEmployeeID(); ok {
		_spec.SetField(exam_applications_ps.FieldCAEmployeeID, field.TypeString, value)
	}
	if eapu.mutation.CAEmployeeIDCleared() {
		_spec.ClearField(exam_applications_ps.FieldCAEmployeeID, field.TypeString)
	}
	if value, ok := eapu.mutation.CAEmployeeDesignation(); ok {
		_spec.SetField(exam_applications_ps.FieldCAEmployeeDesignation, field.TypeString, value)
	}
	if eapu.mutation.CAEmployeeDesignationCleared() {
		_spec.ClearField(exam_applications_ps.FieldCAEmployeeDesignation, field.TypeString)
	}
	if value, ok := eapu.mutation.CARemarks(); ok {
		_spec.SetField(exam_applications_ps.FieldCARemarks, field.TypeString, value)
	}
	if eapu.mutation.CARemarksCleared() {
		_spec.ClearField(exam_applications_ps.FieldCARemarks, field.TypeString)
	}
	if value, ok := eapu.mutation.CADate(); ok {
		_spec.SetField(exam_applications_ps.FieldCADate, field.TypeTime, value)
	}
	if eapu.mutation.CADateCleared() {
		_spec.ClearField(exam_applications_ps.FieldCADate, field.TypeTime)
	}
	if value, ok := eapu.mutation.NAUserId(); ok {
		_spec.SetField(exam_applications_ps.FieldNAUserId, field.TypeInt32, value)
	}
	if value, ok := eapu.mutation.AddedNAUserId(); ok {
		_spec.AddField(exam_applications_ps.FieldNAUserId, field.TypeInt32, value)
	}
	if eapu.mutation.NAUserIdCleared() {
		_spec.ClearField(exam_applications_ps.FieldNAUserId, field.TypeInt32)
	}
	if value, ok := eapu.mutation.NAUserName(); ok {
		_spec.SetField(exam_applications_ps.FieldNAUserName, field.TypeString, value)
	}
	if eapu.mutation.NAUserNameCleared() {
		_spec.ClearField(exam_applications_ps.FieldNAUserName, field.TypeString)
	}
	if value, ok := eapu.mutation.NAEmployeeID(); ok {
		_spec.SetField(exam_applications_ps.FieldNAEmployeeID, field.TypeString, value)
	}
	if eapu.mutation.NAEmployeeIDCleared() {
		_spec.ClearField(exam_applications_ps.FieldNAEmployeeID, field.TypeString)
	}
	if value, ok := eapu.mutation.NAEmployeeDesignation(); ok {
		_spec.SetField(exam_applications_ps.FieldNAEmployeeDesignation, field.TypeString, value)
	}
	if eapu.mutation.NAEmployeeDesignationCleared() {
		_spec.ClearField(exam_applications_ps.FieldNAEmployeeDesignation, field.TypeString)
	}
	if value, ok := eapu.mutation.NARemarks(); ok {
		_spec.SetField(exam_applications_ps.FieldNARemarks, field.TypeString, value)
	}
	if eapu.mutation.NARemarksCleared() {
		_spec.ClearField(exam_applications_ps.FieldNARemarks, field.TypeString)
	}
	if value, ok := eapu.mutation.NADate(); ok {
		_spec.SetField(exam_applications_ps.FieldNADate, field.TypeTime, value)
	}
	if eapu.mutation.NADateCleared() {
		_spec.ClearField(exam_applications_ps.FieldNADate, field.TypeTime)
	}
	if value, ok := eapu.mutation.AppliactionRemarks(); ok {
		_spec.SetField(exam_applications_ps.FieldAppliactionRemarks, field.TypeString, value)
	}
	if eapu.mutation.AppliactionRemarksCleared() {
		_spec.ClearField(exam_applications_ps.FieldAppliactionRemarks, field.TypeString)
	}
	if value, ok := eapu.mutation.CadrePreferences(); ok {
		_spec.SetField(exam_applications_ps.FieldCadrePreferences, field.TypeJSON, value)
	}
	if value, ok := eapu.mutation.AppendedCadrePreferences(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, exam_applications_ps.FieldCadrePreferences, value)
		})
	}
	if eapu.mutation.CadrePreferencesCleared() {
		_spec.ClearField(exam_applications_ps.FieldCadrePreferences, field.TypeJSON)
	}
	if value, ok := eapu.mutation.CAPreviousRemarks(); ok {
		_spec.SetField(exam_applications_ps.FieldCAPreviousRemarks, field.TypeString, value)
	}
	if eapu.mutation.CAPreviousRemarksCleared() {
		_spec.ClearField(exam_applications_ps.FieldCAPreviousRemarks, field.TypeString)
	}
	if value, ok := eapu.mutation.PunishmentStatus(); ok {
		_spec.SetField(exam_applications_ps.FieldPunishmentStatus, field.TypeBool, value)
	}
	if eapu.mutation.PunishmentStatusCleared() {
		_spec.ClearField(exam_applications_ps.FieldPunishmentStatus, field.TypeBool)
	}
	if value, ok := eapu.mutation.DisciplinaryCaseStatus(); ok {
		_spec.SetField(exam_applications_ps.FieldDisciplinaryCaseStatus, field.TypeBool, value)
	}
	if eapu.mutation.DisciplinaryCaseStatusCleared() {
		_spec.ClearField(exam_applications_ps.FieldDisciplinaryCaseStatus, field.TypeBool)
	}
	if value, ok := eapu.mutation.GenerateHallTicketFlag(); ok {
		_spec.SetField(exam_applications_ps.FieldGenerateHallTicketFlag, field.TypeBool, value)
	}
	if eapu.mutation.GenerateHallTicketFlagCleared() {
		_spec.ClearField(exam_applications_ps.FieldGenerateHallTicketFlag, field.TypeBool)
	}
	if value, ok := eapu.mutation.HallTicketNumber(); ok {
		_spec.SetField(exam_applications_ps.FieldHallTicketNumber, field.TypeString, value)
	}
	if eapu.mutation.HallTicketNumberCleared() {
		_spec.ClearField(exam_applications_ps.FieldHallTicketNumber, field.TypeString)
	}
	if value, ok := eapu.mutation.HallTicketGeneratedFlag(); ok {
		_spec.SetField(exam_applications_ps.FieldHallTicketGeneratedFlag, field.TypeBool, value)
	}
	if eapu.mutation.HallTicketGeneratedFlagCleared() {
		_spec.ClearField(exam_applications_ps.FieldHallTicketGeneratedFlag, field.TypeBool)
	}
	if value, ok := eapu.mutation.GenerateHallTicketFlagByNO(); ok {
		_spec.SetField(exam_applications_ps.FieldGenerateHallTicketFlagByNO, field.TypeBool, value)
	}
	if eapu.mutation.GenerateHallTicketFlagByNOCleared() {
		_spec.ClearField(exam_applications_ps.FieldGenerateHallTicketFlagByNO, field.TypeBool)
	}
	if value, ok := eapu.mutation.HallTicketGeneratedDate(); ok {
		_spec.SetField(exam_applications_ps.FieldHallTicketGeneratedDate, field.TypeTime, value)
	}
	if eapu.mutation.HallTicketGeneratedDateCleared() {
		_spec.ClearField(exam_applications_ps.FieldHallTicketGeneratedDate, field.TypeTime)
	}
	if value, ok := eapu.mutation.TemporaryHallTicket(); ok {
		_spec.SetField(exam_applications_ps.FieldTemporaryHallTicket, field.TypeString, value)
	}
	if eapu.mutation.TemporaryHallTicketCleared() {
		_spec.ClearField(exam_applications_ps.FieldTemporaryHallTicket, field.TypeString)
	}
	if value, ok := eapu.mutation.OptionUsed(); ok {
		_spec.SetField(exam_applications_ps.FieldOptionUsed, field.TypeString, value)
	}
	if eapu.mutation.OptionUsedCleared() {
		_spec.ClearField(exam_applications_ps.FieldOptionUsed, field.TypeString)
	}
	if value, ok := eapu.mutation.Remarks(); ok {
		_spec.SetField(exam_applications_ps.FieldRemarks, field.TypeString, value)
	}
	if eapu.mutation.RemarksCleared() {
		_spec.ClearField(exam_applications_ps.FieldRemarks, field.TypeString)
	}
	if value, ok := eapu.mutation.Cadre(); ok {
		_spec.SetField(exam_applications_ps.FieldCadre, field.TypeString, value)
	}
	if eapu.mutation.CadreCleared() {
		_spec.ClearField(exam_applications_ps.FieldCadre, field.TypeString)
	}
	if value, ok := eapu.mutation.EmployeePost(); ok {
		_spec.SetField(exam_applications_ps.FieldEmployeePost, field.TypeString, value)
	}
	if eapu.mutation.EmployeePostCleared() {
		_spec.ClearField(exam_applications_ps.FieldEmployeePost, field.TypeString)
	}
	if value, ok := eapu.mutation.DOJInEligiblePost(); ok {
		_spec.SetField(exam_applications_ps.FieldDOJInEligiblePost, field.TypeString, value)
	}
	if eapu.mutation.DOJInEligiblePostCleared() {
		_spec.ClearField(exam_applications_ps.FieldDOJInEligiblePost, field.TypeString)
	}
	if value, ok := eapu.mutation.DivisionPreferences(); ok {
		_spec.SetField(exam_applications_ps.FieldDivisionPreferences, field.TypeJSON, value)
	}
	if value, ok := eapu.mutation.AppendedDivisionPreferences(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, exam_applications_ps.FieldDivisionPreferences, value)
		})
	}
	if eapu.mutation.DivisionPreferencesCleared() {
		_spec.ClearField(exam_applications_ps.FieldDivisionPreferences, field.TypeJSON)
	}
	if value, ok := eapu.mutation.FacilityName(); ok {
		_spec.SetField(exam_applications_ps.FieldFacilityName, field.TypeString, value)
	}
	if eapu.mutation.FacilityNameCleared() {
		_spec.ClearField(exam_applications_ps.FieldFacilityName, field.TypeString)
	}
	if value, ok := eapu.mutation.ServiceLength(); ok {
		_spec.SetField(exam_applications_ps.FieldServiceLength, field.TypeJSON, value)
	}
	if value, ok := eapu.mutation.AppendedServiceLength(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, exam_applications_ps.FieldServiceLength, value)
		})
	}
	if eapu.mutation.ServiceLengthCleared() {
		_spec.ClearField(exam_applications_ps.FieldServiceLength, field.TypeJSON)
	}
	if value, ok := eapu.mutation.NonQualifyingService(); ok {
		_spec.SetField(exam_applications_ps.FieldNonQualifyingService, field.TypeJSON, value)
	}
	if value, ok := eapu.mutation.AppendedNonQualifyingService(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, exam_applications_ps.FieldNonQualifyingService, value)
		})
	}
	if eapu.mutation.NonQualifyingServiceCleared() {
		_spec.ClearField(exam_applications_ps.FieldNonQualifyingService, field.TypeJSON)
	}
	if value, ok := eapu.mutation.DCInPresentCadre(); ok {
		_spec.SetField(exam_applications_ps.FieldDCInPresentCadre, field.TypeString, value)
	}
	if eapu.mutation.DCInPresentCadreCleared() {
		_spec.ClearField(exam_applications_ps.FieldDCInPresentCadre, field.TypeString)
	}
	if value, ok := eapu.mutation.CenterId(); ok {
		_spec.SetField(exam_applications_ps.FieldCenterId, field.TypeInt32, value)
	}
	if value, ok := eapu.mutation.AddedCenterId(); ok {
		_spec.AddField(exam_applications_ps.FieldCenterId, field.TypeInt32, value)
	}
	if eapu.mutation.CenterIdCleared() {
		_spec.ClearField(exam_applications_ps.FieldCenterId, field.TypeInt32)
	}
	if value, ok := eapu.mutation.ClaimingQualifyingService(); ok {
		_spec.SetField(exam_applications_ps.FieldClaimingQualifyingService, field.TypeString, value)
	}
	if eapu.mutation.ClaimingQualifyingServiceCleared() {
		_spec.ClearField(exam_applications_ps.FieldClaimingQualifyingService, field.TypeString)
	}
	if value, ok := eapu.mutation.DeputationOfficePincode(); ok {
		_spec.SetField(exam_applications_ps.FieldDeputationOfficePincode, field.TypeString, value)
	}
	if eapu.mutation.DeputationOfficePincodeCleared() {
		_spec.ClearField(exam_applications_ps.FieldDeputationOfficePincode, field.TypeString)
	}
	if value, ok := eapu.mutation.RecommendedStatus(); ok {
		_spec.SetField(exam_applications_ps.FieldRecommendedStatus, field.TypeString, value)
	}
	if eapu.mutation.RecommendedStatusCleared() {
		_spec.ClearField(exam_applications_ps.FieldRecommendedStatus, field.TypeString)
	}
	if value, ok := eapu.mutation.UpdatedAt(); ok {
		_spec.SetField(exam_applications_ps.FieldUpdatedAt, field.TypeTime, value)
	}
	if eapu.mutation.UpdatedAtCleared() {
		_spec.ClearField(exam_applications_ps.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := eapu.mutation.UpdatedBy(); ok {
		_spec.SetField(exam_applications_ps.FieldUpdatedBy, field.TypeString, value)
	}
	if eapu.mutation.UpdatedByCleared() {
		_spec.ClearField(exam_applications_ps.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := eapu.mutation.ApplicationWdlDate(); ok {
		_spec.SetField(exam_applications_ps.FieldApplicationWdlDate, field.TypeTime, value)
	}
	if eapu.mutation.ApplicationWdlDateCleared() {
		_spec.ClearField(exam_applications_ps.FieldApplicationWdlDate, field.TypeTime)
	}
	if value, ok := eapu.mutation.ExamCenterHall(); ok {
		_spec.SetField(exam_applications_ps.FieldExamCenterHall, field.TypeInt32, value)
	}
	if value, ok := eapu.mutation.AddedExamCenterHall(); ok {
		_spec.AddField(exam_applications_ps.FieldExamCenterHall, field.TypeInt32, value)
	}
	if eapu.mutation.ExamCenterHallCleared() {
		_spec.ClearField(exam_applications_ps.FieldExamCenterHall, field.TypeInt32)
	}
	if value, ok := eapu.mutation.HallName(); ok {
		_spec.SetField(exam_applications_ps.FieldHallName, field.TypeString, value)
	}
	if eapu.mutation.HallNameCleared() {
		_spec.ClearField(exam_applications_ps.FieldHallName, field.TypeString)
	}
	if value, ok := eapu.mutation.ReportingOfficeID(); ok {
		_spec.SetField(exam_applications_ps.FieldReportingOfficeID, field.TypeString, value)
	}
	if eapu.mutation.ReportingOfficeIDCleared() {
		_spec.ClearField(exam_applications_ps.FieldReportingOfficeID, field.TypeString)
	}
	if eapu.mutation.UsersPSRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_applications_ps.UsersPSRefTable,
			Columns: []string{exam_applications_ps.UsersPSRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usermaster.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eapu.mutation.RemovedUsersPSRefIDs(); len(nodes) > 0 && !eapu.mutation.UsersPSRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_applications_ps.UsersPSRefTable,
			Columns: []string{exam_applications_ps.UsersPSRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usermaster.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eapu.mutation.UsersPSRefIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_applications_ps.UsersPSRefTable,
			Columns: []string{exam_applications_ps.UsersPSRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usermaster.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eapu.mutation.CadrePrefPSRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_applications_ps.CadrePrefPSRefTable,
			Columns: []string{exam_applications_ps.CadrePrefPSRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cadre_choice_ps.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eapu.mutation.RemovedCadrePrefPSRefIDs(); len(nodes) > 0 && !eapu.mutation.CadrePrefPSRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_applications_ps.CadrePrefPSRefTable,
			Columns: []string{exam_applications_ps.CadrePrefPSRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cadre_choice_ps.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eapu.mutation.CadrePrefPSRefIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_applications_ps.CadrePrefPSRefTable,
			Columns: []string{exam_applications_ps.CadrePrefPSRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cadre_choice_ps.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eapu.mutation.CirclePrefRefPSCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_applications_ps.CirclePrefRefPSTable,
			Columns: []string{exam_applications_ps.CirclePrefRefPSColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(placeofpreferenceps.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eapu.mutation.RemovedCirclePrefRefPSIDs(); len(nodes) > 0 && !eapu.mutation.CirclePrefRefPSCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_applications_ps.CirclePrefRefPSTable,
			Columns: []string{exam_applications_ps.CirclePrefRefPSColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(placeofpreferenceps.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eapu.mutation.CirclePrefRefPSIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_applications_ps.CirclePrefRefPSTable,
			Columns: []string{exam_applications_ps.CirclePrefRefPSColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(placeofpreferenceps.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eapu.mutation.PSApplicationsRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_applications_ps.PSApplicationsRefTable,
			Columns: []string{exam_applications_ps.PSApplicationsRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(recommendationspsapplications.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eapu.mutation.RemovedPSApplicationsRefIDs(); len(nodes) > 0 && !eapu.mutation.PSApplicationsRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_applications_ps.PSApplicationsRefTable,
			Columns: []string{exam_applications_ps.PSApplicationsRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(recommendationspsapplications.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eapu.mutation.PSApplicationsRefIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_applications_ps.PSApplicationsRefTable,
			Columns: []string{exam_applications_ps.PSApplicationsRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(recommendationspsapplications.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eapu.mutation.ExamsPSCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   exam_applications_ps.ExamsPSTable,
			Columns: []string{exam_applications_ps.ExamsPSColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eapu.mutation.ExamsPSIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   exam_applications_ps.ExamsPSTable,
			Columns: []string{exam_applications_ps.ExamsPSColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eapu.mutation.RoleusersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   exam_applications_ps.RoleusersTable,
			Columns: []string{exam_applications_ps.RoleusersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rolemaster.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eapu.mutation.RoleusersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   exam_applications_ps.RoleusersTable,
			Columns: []string{exam_applications_ps.RoleusersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rolemaster.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eapu.mutation.ExamcitycenterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   exam_applications_ps.ExamcitycenterTable,
			Columns: []string{exam_applications_ps.ExamcitycenterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(examcitycenter.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eapu.mutation.ExamcitycenterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   exam_applications_ps.ExamcitycenterTable,
			Columns: []string{exam_applications_ps.ExamcitycenterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(examcitycenter.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eapu.mutation.PSExamCentresCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   exam_applications_ps.PSExamCentresTable,
			Columns: []string{exam_applications_ps.PSExamCentresColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(center.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eapu.mutation.PSExamCentresIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   exam_applications_ps.PSExamCentresTable,
			Columns: []string{exam_applications_ps.PSExamCentresColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(center.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eapu.mutation.CircleRefsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   exam_applications_ps.CircleRefsTable,
			Columns: []string{exam_applications_ps.CircleRefsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(circlesummaryforno.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eapu.mutation.CircleRefsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   exam_applications_ps.CircleRefsTable,
			Columns: []string{exam_applications_ps.CircleRefsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(circlesummaryforno.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eapu.mutation.LogDataCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_applications_ps.LogDataTable,
			Columns: []string{exam_applications_ps.LogDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(logs.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eapu.mutation.RemovedLogDataIDs(); len(nodes) > 0 && !eapu.mutation.LogDataCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_applications_ps.LogDataTable,
			Columns: []string{exam_applications_ps.LogDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(logs.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eapu.mutation.LogDataIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_applications_ps.LogDataTable,
			Columns: []string{exam_applications_ps.LogDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(logs.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, eapu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{exam_applications_ps.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	eapu.mutation.done = true
	return n, nil
}

// ExamApplicationsPSUpdateOne is the builder for updating a single Exam_Applications_PS entity.
type ExamApplicationsPSUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ExamApplicationsPSMutation
}

// SetApplicationNumber sets the "ApplicationNumber" field.
func (eapuo *ExamApplicationsPSUpdateOne) SetApplicationNumber(s string) *ExamApplicationsPSUpdateOne {
	eapuo.mutation.SetApplicationNumber(s)
	return eapuo
}

// SetNillableApplicationNumber sets the "ApplicationNumber" field if the given value is not nil.
func (eapuo *ExamApplicationsPSUpdateOne) SetNillableApplicationNumber(s *string) *ExamApplicationsPSUpdateOne {
	if s != nil {
		eapuo.SetApplicationNumber(*s)
	}
	return eapuo
}

// ClearApplicationNumber clears the value of the "ApplicationNumber" field.
func (eapuo *ExamApplicationsPSUpdateOne) ClearApplicationNumber() *ExamApplicationsPSUpdateOne {
	eapuo.mutation.ClearApplicationNumber()
	return eapuo
}

// SetApplnSubmittedDate sets the "ApplnSubmittedDate" field.
func (eapuo *ExamApplicationsPSUpdateOne) SetApplnSubmittedDate(t time.Time) *ExamApplicationsPSUpdateOne {
	eapuo.mutation.SetApplnSubmittedDate(t)
	return eapuo
}

// SetNillableApplnSubmittedDate sets the "ApplnSubmittedDate" field if the given value is not nil.
func (eapuo *ExamApplicationsPSUpdateOne) SetNillableApplnSubmittedDate(t *time.Time) *ExamApplicationsPSUpdateOne {
	if t != nil {
		eapuo.SetApplnSubmittedDate(*t)
	}
	return eapuo
}

// ClearApplnSubmittedDate clears the value of the "ApplnSubmittedDate" field.
func (eapuo *ExamApplicationsPSUpdateOne) ClearApplnSubmittedDate() *ExamApplicationsPSUpdateOne {
	eapuo.mutation.ClearApplnSubmittedDate()
	return eapuo
}

// SetExamCode sets the "ExamCode" field.
func (eapuo *ExamApplicationsPSUpdateOne) SetExamCode(i int32) *ExamApplicationsPSUpdateOne {
	eapuo.mutation.SetExamCode(i)
	return eapuo
}

// SetNillableExamCode sets the "ExamCode" field if the given value is not nil.
func (eapuo *ExamApplicationsPSUpdateOne) SetNillableExamCode(i *int32) *ExamApplicationsPSUpdateOne {
	if i != nil {
		eapuo.SetExamCode(*i)
	}
	return eapuo
}

// ClearExamCode clears the value of the "ExamCode" field.
func (eapuo *ExamApplicationsPSUpdateOne) ClearExamCode() *ExamApplicationsPSUpdateOne {
	eapuo.mutation.ClearExamCode()
	return eapuo
}

// SetExamShortName sets the "ExamShortName" field.
func (eapuo *ExamApplicationsPSUpdateOne) SetExamShortName(s string) *ExamApplicationsPSUpdateOne {
	eapuo.mutation.SetExamShortName(s)
	return eapuo
}

// SetNillableExamShortName sets the "ExamShortName" field if the given value is not nil.
func (eapuo *ExamApplicationsPSUpdateOne) SetNillableExamShortName(s *string) *ExamApplicationsPSUpdateOne {
	if s != nil {
		eapuo.SetExamShortName(*s)
	}
	return eapuo
}

// ClearExamShortName clears the value of the "ExamShortName" field.
func (eapuo *ExamApplicationsPSUpdateOne) ClearExamShortName() *ExamApplicationsPSUpdateOne {
	eapuo.mutation.ClearExamShortName()
	return eapuo
}

// SetExamName sets the "ExamName" field.
func (eapuo *ExamApplicationsPSUpdateOne) SetExamName(s string) *ExamApplicationsPSUpdateOne {
	eapuo.mutation.SetExamName(s)
	return eapuo
}

// SetNillableExamName sets the "ExamName" field if the given value is not nil.
func (eapuo *ExamApplicationsPSUpdateOne) SetNillableExamName(s *string) *ExamApplicationsPSUpdateOne {
	if s != nil {
		eapuo.SetExamName(*s)
	}
	return eapuo
}

// ClearExamName clears the value of the "ExamName" field.
func (eapuo *ExamApplicationsPSUpdateOne) ClearExamName() *ExamApplicationsPSUpdateOne {
	eapuo.mutation.ClearExamName()
	return eapuo
}

// SetSmsExamShortName sets the "SmsExamShortName" field.
func (eapuo *ExamApplicationsPSUpdateOne) SetSmsExamShortName(s string) *ExamApplicationsPSUpdateOne {
	eapuo.mutation.SetSmsExamShortName(s)
	return eapuo
}

// SetNillableSmsExamShortName sets the "SmsExamShortName" field if the given value is not nil.
func (eapuo *ExamApplicationsPSUpdateOne) SetNillableSmsExamShortName(s *string) *ExamApplicationsPSUpdateOne {
	if s != nil {
		eapuo.SetSmsExamShortName(*s)
	}
	return eapuo
}

// ClearSmsExamShortName clears the value of the "SmsExamShortName" field.
func (eapuo *ExamApplicationsPSUpdateOne) ClearSmsExamShortName() *ExamApplicationsPSUpdateOne {
	eapuo.mutation.ClearSmsExamShortName()
	return eapuo
}

// SetExamYear sets the "ExamYear" field.
func (eapuo *ExamApplicationsPSUpdateOne) SetExamYear(s string) *ExamApplicationsPSUpdateOne {
	eapuo.mutation.SetExamYear(s)
	return eapuo
}

// SetNillableExamYear sets the "ExamYear" field if the given value is not nil.
func (eapuo *ExamApplicationsPSUpdateOne) SetNillableExamYear(s *string) *ExamApplicationsPSUpdateOne {
	if s != nil {
		eapuo.SetExamYear(*s)
	}
	return eapuo
}

// ClearExamYear clears the value of the "ExamYear" field.
func (eapuo *ExamApplicationsPSUpdateOne) ClearExamYear() *ExamApplicationsPSUpdateOne {
	eapuo.mutation.ClearExamYear()
	return eapuo
}

// SetUserID sets the "UserID" field.
func (eapuo *ExamApplicationsPSUpdateOne) SetUserID(i int32) *ExamApplicationsPSUpdateOne {
	eapuo.mutation.ResetUserID()
	eapuo.mutation.SetUserID(i)
	return eapuo
}

// SetNillableUserID sets the "UserID" field if the given value is not nil.
func (eapuo *ExamApplicationsPSUpdateOne) SetNillableUserID(i *int32) *ExamApplicationsPSUpdateOne {
	if i != nil {
		eapuo.SetUserID(*i)
	}
	return eapuo
}

// AddUserID adds i to the "UserID" field.
func (eapuo *ExamApplicationsPSUpdateOne) AddUserID(i int32) *ExamApplicationsPSUpdateOne {
	eapuo.mutation.AddUserID(i)
	return eapuo
}

// ClearUserID clears the value of the "UserID" field.
func (eapuo *ExamApplicationsPSUpdateOne) ClearUserID() *ExamApplicationsPSUpdateOne {
	eapuo.mutation.ClearUserID()
	return eapuo
}

// SetEmployeeID sets the "EmployeeID" field.
func (eapuo *ExamApplicationsPSUpdateOne) SetEmployeeID(i int64) *ExamApplicationsPSUpdateOne {
	eapuo.mutation.ResetEmployeeID()
	eapuo.mutation.SetEmployeeID(i)
	return eapuo
}

// SetNillableEmployeeID sets the "EmployeeID" field if the given value is not nil.
func (eapuo *ExamApplicationsPSUpdateOne) SetNillableEmployeeID(i *int64) *ExamApplicationsPSUpdateOne {
	if i != nil {
		eapuo.SetEmployeeID(*i)
	}
	return eapuo
}

// AddEmployeeID adds i to the "EmployeeID" field.
func (eapuo *ExamApplicationsPSUpdateOne) AddEmployeeID(i int64) *ExamApplicationsPSUpdateOne {
	eapuo.mutation.AddEmployeeID(i)
	return eapuo
}

// ClearEmployeeID clears the value of the "EmployeeID" field.
func (eapuo *ExamApplicationsPSUpdateOne) ClearEmployeeID() *ExamApplicationsPSUpdateOne {
	eapuo.mutation.ClearEmployeeID()
	return eapuo
}

// SetEmployeeName sets the "EmployeeName" field.
func (eapuo *ExamApplicationsPSUpdateOne) SetEmployeeName(s string) *ExamApplicationsPSUpdateOne {
	eapuo.mutation.SetEmployeeName(s)
	return eapuo
}

// SetNillableEmployeeName sets the "EmployeeName" field if the given value is not nil.
func (eapuo *ExamApplicationsPSUpdateOne) SetNillableEmployeeName(s *string) *ExamApplicationsPSUpdateOne {
	if s != nil {
		eapuo.SetEmployeeName(*s)
	}
	return eapuo
}

// ClearEmployeeName clears the value of the "EmployeeName" field.
func (eapuo *ExamApplicationsPSUpdateOne) ClearEmployeeName() *ExamApplicationsPSUpdateOne {
	eapuo.mutation.ClearEmployeeName()
	return eapuo
}

// SetDOB sets the "DOB" field.
func (eapuo *ExamApplicationsPSUpdateOne) SetDOB(s string) *ExamApplicationsPSUpdateOne {
	eapuo.mutation.SetDOB(s)
	return eapuo
}

// SetNillableDOB sets the "DOB" field if the given value is not nil.
func (eapuo *ExamApplicationsPSUpdateOne) SetNillableDOB(s *string) *ExamApplicationsPSUpdateOne {
	if s != nil {
		eapuo.SetDOB(*s)
	}
	return eapuo
}

// ClearDOB clears the value of the "DOB" field.
func (eapuo *ExamApplicationsPSUpdateOne) ClearDOB() *ExamApplicationsPSUpdateOne {
	eapuo.mutation.ClearDOB()
	return eapuo
}

// SetGender sets the "Gender" field.
func (eapuo *ExamApplicationsPSUpdateOne) SetGender(s string) *ExamApplicationsPSUpdateOne {
	eapuo.mutation.SetGender(s)
	return eapuo
}

// SetNillableGender sets the "Gender" field if the given value is not nil.
func (eapuo *ExamApplicationsPSUpdateOne) SetNillableGender(s *string) *ExamApplicationsPSUpdateOne {
	if s != nil {
		eapuo.SetGender(*s)
	}
	return eapuo
}

// ClearGender clears the value of the "Gender" field.
func (eapuo *ExamApplicationsPSUpdateOne) ClearGender() *ExamApplicationsPSUpdateOne {
	eapuo.mutation.ClearGender()
	return eapuo
}

// SetMobileNumber sets the "MobileNumber" field.
func (eapuo *ExamApplicationsPSUpdateOne) SetMobileNumber(s string) *ExamApplicationsPSUpdateOne {
	eapuo.mutation.SetMobileNumber(s)
	return eapuo
}

// SetNillableMobileNumber sets the "MobileNumber" field if the given value is not nil.
func (eapuo *ExamApplicationsPSUpdateOne) SetNillableMobileNumber(s *string) *ExamApplicationsPSUpdateOne {
	if s != nil {
		eapuo.SetMobileNumber(*s)
	}
	return eapuo
}

// ClearMobileNumber clears the value of the "MobileNumber" field.
func (eapuo *ExamApplicationsPSUpdateOne) ClearMobileNumber() *ExamApplicationsPSUpdateOne {
	eapuo.mutation.ClearMobileNumber()
	return eapuo
}

// SetEmailID sets the "EmailID" field.
func (eapuo *ExamApplicationsPSUpdateOne) SetEmailID(s string) *ExamApplicationsPSUpdateOne {
	eapuo.mutation.SetEmailID(s)
	return eapuo
}

// SetNillableEmailID sets the "EmailID" field if the given value is not nil.
func (eapuo *ExamApplicationsPSUpdateOne) SetNillableEmailID(s *string) *ExamApplicationsPSUpdateOne {
	if s != nil {
		eapuo.SetEmailID(*s)
	}
	return eapuo
}

// ClearEmailID clears the value of the "EmailID" field.
func (eapuo *ExamApplicationsPSUpdateOne) ClearEmailID() *ExamApplicationsPSUpdateOne {
	eapuo.mutation.ClearEmailID()
	return eapuo
}

// SetCategoryCode sets the "CategoryCode" field.
func (eapuo *ExamApplicationsPSUpdateOne) SetCategoryCode(s string) *ExamApplicationsPSUpdateOne {
	eapuo.mutation.SetCategoryCode(s)
	return eapuo
}

// SetNillableCategoryCode sets the "CategoryCode" field if the given value is not nil.
func (eapuo *ExamApplicationsPSUpdateOne) SetNillableCategoryCode(s *string) *ExamApplicationsPSUpdateOne {
	if s != nil {
		eapuo.SetCategoryCode(*s)
	}
	return eapuo
}

// ClearCategoryCode clears the value of the "CategoryCode" field.
func (eapuo *ExamApplicationsPSUpdateOne) ClearCategoryCode() *ExamApplicationsPSUpdateOne {
	eapuo.mutation.ClearCategoryCode()
	return eapuo
}

// SetCategoryDescription sets the "CategoryDescription" field.
func (eapuo *ExamApplicationsPSUpdateOne) SetCategoryDescription(s string) *ExamApplicationsPSUpdateOne {
	eapuo.mutation.SetCategoryDescription(s)
	return eapuo
}

// SetNillableCategoryDescription sets the "CategoryDescription" field if the given value is not nil.
func (eapuo *ExamApplicationsPSUpdateOne) SetNillableCategoryDescription(s *string) *ExamApplicationsPSUpdateOne {
	if s != nil {
		eapuo.SetCategoryDescription(*s)
	}
	return eapuo
}

// ClearCategoryDescription clears the value of the "CategoryDescription" field.
func (eapuo *ExamApplicationsPSUpdateOne) ClearCategoryDescription() *ExamApplicationsPSUpdateOne {
	eapuo.mutation.ClearCategoryDescription()
	return eapuo
}

// SetDisabilityTypeID sets the "DisabilityTypeID" field.
func (eapuo *ExamApplicationsPSUpdateOne) SetDisabilityTypeID(s string) *ExamApplicationsPSUpdateOne {
	eapuo.mutation.SetDisabilityTypeID(s)
	return eapuo
}

// SetNillableDisabilityTypeID sets the "DisabilityTypeID" field if the given value is not nil.
func (eapuo *ExamApplicationsPSUpdateOne) SetNillableDisabilityTypeID(s *string) *ExamApplicationsPSUpdateOne {
	if s != nil {
		eapuo.SetDisabilityTypeID(*s)
	}
	return eapuo
}

// ClearDisabilityTypeID clears the value of the "DisabilityTypeID" field.
func (eapuo *ExamApplicationsPSUpdateOne) ClearDisabilityTypeID() *ExamApplicationsPSUpdateOne {
	eapuo.mutation.ClearDisabilityTypeID()
	return eapuo
}

// SetDisabilityTypeCode sets the "DisabilityTypeCode" field.
func (eapuo *ExamApplicationsPSUpdateOne) SetDisabilityTypeCode(s string) *ExamApplicationsPSUpdateOne {
	eapuo.mutation.SetDisabilityTypeCode(s)
	return eapuo
}

// SetNillableDisabilityTypeCode sets the "DisabilityTypeCode" field if the given value is not nil.
func (eapuo *ExamApplicationsPSUpdateOne) SetNillableDisabilityTypeCode(s *string) *ExamApplicationsPSUpdateOne {
	if s != nil {
		eapuo.SetDisabilityTypeCode(*s)
	}
	return eapuo
}

// ClearDisabilityTypeCode clears the value of the "DisabilityTypeCode" field.
func (eapuo *ExamApplicationsPSUpdateOne) ClearDisabilityTypeCode() *ExamApplicationsPSUpdateOne {
	eapuo.mutation.ClearDisabilityTypeCode()
	return eapuo
}

// SetDisabilityTypeDescription sets the "DisabilityTypeDescription" field.
func (eapuo *ExamApplicationsPSUpdateOne) SetDisabilityTypeDescription(s string) *ExamApplicationsPSUpdateOne {
	eapuo.mutation.SetDisabilityTypeDescription(s)
	return eapuo
}

// SetNillableDisabilityTypeDescription sets the "DisabilityTypeDescription" field if the given value is not nil.
func (eapuo *ExamApplicationsPSUpdateOne) SetNillableDisabilityTypeDescription(s *string) *ExamApplicationsPSUpdateOne {
	if s != nil {
		eapuo.SetDisabilityTypeDescription(*s)
	}
	return eapuo
}

// ClearDisabilityTypeDescription clears the value of the "DisabilityTypeDescription" field.
func (eapuo *ExamApplicationsPSUpdateOne) ClearDisabilityTypeDescription() *ExamApplicationsPSUpdateOne {
	eapuo.mutation.ClearDisabilityTypeDescription()
	return eapuo
}

// SetDisabilityPercentage sets the "DisabilityPercentage" field.
func (eapuo *ExamApplicationsPSUpdateOne) SetDisabilityPercentage(i int32) *ExamApplicationsPSUpdateOne {
	eapuo.mutation.ResetDisabilityPercentage()
	eapuo.mutation.SetDisabilityPercentage(i)
	return eapuo
}

// SetNillableDisabilityPercentage sets the "DisabilityPercentage" field if the given value is not nil.
func (eapuo *ExamApplicationsPSUpdateOne) SetNillableDisabilityPercentage(i *int32) *ExamApplicationsPSUpdateOne {
	if i != nil {
		eapuo.SetDisabilityPercentage(*i)
	}
	return eapuo
}

// AddDisabilityPercentage adds i to the "DisabilityPercentage" field.
func (eapuo *ExamApplicationsPSUpdateOne) AddDisabilityPercentage(i int32) *ExamApplicationsPSUpdateOne {
	eapuo.mutation.AddDisabilityPercentage(i)
	return eapuo
}

// ClearDisabilityPercentage clears the value of the "DisabilityPercentage" field.
func (eapuo *ExamApplicationsPSUpdateOne) ClearDisabilityPercentage() *ExamApplicationsPSUpdateOne {
	eapuo.mutation.ClearDisabilityPercentage()
	return eapuo
}

// SetDCCS sets the "DCCS" field.
func (eapuo *ExamApplicationsPSUpdateOne) SetDCCS(s string) *ExamApplicationsPSUpdateOne {
	eapuo.mutation.SetDCCS(s)
	return eapuo
}

// SetNillableDCCS sets the "DCCS" field if the given value is not nil.
func (eapuo *ExamApplicationsPSUpdateOne) SetNillableDCCS(s *string) *ExamApplicationsPSUpdateOne {
	if s != nil {
		eapuo.SetDCCS(*s)
	}
	return eapuo
}

// ClearDCCS clears the value of the "DCCS" field.
func (eapuo *ExamApplicationsPSUpdateOne) ClearDCCS() *ExamApplicationsPSUpdateOne {
	eapuo.mutation.ClearDCCS()
	return eapuo
}

// SetEntryPostCode sets the "EntryPostCode" field.
func (eapuo *ExamApplicationsPSUpdateOne) SetEntryPostCode(s string) *ExamApplicationsPSUpdateOne {
	eapuo.mutation.SetEntryPostCode(s)
	return eapuo
}

// SetNillableEntryPostCode sets the "EntryPostCode" field if the given value is not nil.
func (eapuo *ExamApplicationsPSUpdateOne) SetNillableEntryPostCode(s *string) *ExamApplicationsPSUpdateOne {
	if s != nil {
		eapuo.SetEntryPostCode(*s)
	}
	return eapuo
}

// ClearEntryPostCode clears the value of the "EntryPostCode" field.
func (eapuo *ExamApplicationsPSUpdateOne) ClearEntryPostCode() *ExamApplicationsPSUpdateOne {
	eapuo.mutation.ClearEntryPostCode()
	return eapuo
}

// SetEntryPostDescription sets the "EntryPostDescription" field.
func (eapuo *ExamApplicationsPSUpdateOne) SetEntryPostDescription(s string) *ExamApplicationsPSUpdateOne {
	eapuo.mutation.SetEntryPostDescription(s)
	return eapuo
}

// SetNillableEntryPostDescription sets the "EntryPostDescription" field if the given value is not nil.
func (eapuo *ExamApplicationsPSUpdateOne) SetNillableEntryPostDescription(s *string) *ExamApplicationsPSUpdateOne {
	if s != nil {
		eapuo.SetEntryPostDescription(*s)
	}
	return eapuo
}

// ClearEntryPostDescription clears the value of the "EntryPostDescription" field.
func (eapuo *ExamApplicationsPSUpdateOne) ClearEntryPostDescription() *ExamApplicationsPSUpdateOne {
	eapuo.mutation.ClearEntryPostDescription()
	return eapuo
}

// SetPresentPostCode sets the "PresentPostCode" field.
func (eapuo *ExamApplicationsPSUpdateOne) SetPresentPostCode(s string) *ExamApplicationsPSUpdateOne {
	eapuo.mutation.SetPresentPostCode(s)
	return eapuo
}

// SetNillablePresentPostCode sets the "PresentPostCode" field if the given value is not nil.
func (eapuo *ExamApplicationsPSUpdateOne) SetNillablePresentPostCode(s *string) *ExamApplicationsPSUpdateOne {
	if s != nil {
		eapuo.SetPresentPostCode(*s)
	}
	return eapuo
}

// ClearPresentPostCode clears the value of the "PresentPostCode" field.
func (eapuo *ExamApplicationsPSUpdateOne) ClearPresentPostCode() *ExamApplicationsPSUpdateOne {
	eapuo.mutation.ClearPresentPostCode()
	return eapuo
}

// SetPresentPostDescription sets the "PresentPostDescription" field.
func (eapuo *ExamApplicationsPSUpdateOne) SetPresentPostDescription(s string) *ExamApplicationsPSUpdateOne {
	eapuo.mutation.SetPresentPostDescription(s)
	return eapuo
}

// SetNillablePresentPostDescription sets the "PresentPostDescription" field if the given value is not nil.
func (eapuo *ExamApplicationsPSUpdateOne) SetNillablePresentPostDescription(s *string) *ExamApplicationsPSUpdateOne {
	if s != nil {
		eapuo.SetPresentPostDescription(*s)
	}
	return eapuo
}

// ClearPresentPostDescription clears the value of the "PresentPostDescription" field.
func (eapuo *ExamApplicationsPSUpdateOne) ClearPresentPostDescription() *ExamApplicationsPSUpdateOne {
	eapuo.mutation.ClearPresentPostDescription()
	return eapuo
}

// SetFeederPostCode sets the "FeederPostCode" field.
func (eapuo *ExamApplicationsPSUpdateOne) SetFeederPostCode(s string) *ExamApplicationsPSUpdateOne {
	eapuo.mutation.SetFeederPostCode(s)
	return eapuo
}

// SetNillableFeederPostCode sets the "FeederPostCode" field if the given value is not nil.
func (eapuo *ExamApplicationsPSUpdateOne) SetNillableFeederPostCode(s *string) *ExamApplicationsPSUpdateOne {
	if s != nil {
		eapuo.SetFeederPostCode(*s)
	}
	return eapuo
}

// ClearFeederPostCode clears the value of the "FeederPostCode" field.
func (eapuo *ExamApplicationsPSUpdateOne) ClearFeederPostCode() *ExamApplicationsPSUpdateOne {
	eapuo.mutation.ClearFeederPostCode()
	return eapuo
}

// SetFeederPostDescription sets the "FeederPostDescription" field.
func (eapuo *ExamApplicationsPSUpdateOne) SetFeederPostDescription(s string) *ExamApplicationsPSUpdateOne {
	eapuo.mutation.SetFeederPostDescription(s)
	return eapuo
}

// SetNillableFeederPostDescription sets the "FeederPostDescription" field if the given value is not nil.
func (eapuo *ExamApplicationsPSUpdateOne) SetNillableFeederPostDescription(s *string) *ExamApplicationsPSUpdateOne {
	if s != nil {
		eapuo.SetFeederPostDescription(*s)
	}
	return eapuo
}

// ClearFeederPostDescription clears the value of the "FeederPostDescription" field.
func (eapuo *ExamApplicationsPSUpdateOne) ClearFeederPostDescription() *ExamApplicationsPSUpdateOne {
	eapuo.mutation.ClearFeederPostDescription()
	return eapuo
}

// SetFeederPostJoiningDate sets the "FeederPostJoiningDate" field.
func (eapuo *ExamApplicationsPSUpdateOne) SetFeederPostJoiningDate(s string) *ExamApplicationsPSUpdateOne {
	eapuo.mutation.SetFeederPostJoiningDate(s)
	return eapuo
}

// SetNillableFeederPostJoiningDate sets the "FeederPostJoiningDate" field if the given value is not nil.
func (eapuo *ExamApplicationsPSUpdateOne) SetNillableFeederPostJoiningDate(s *string) *ExamApplicationsPSUpdateOne {
	if s != nil {
		eapuo.SetFeederPostJoiningDate(*s)
	}
	return eapuo
}

// ClearFeederPostJoiningDate clears the value of the "FeederPostJoiningDate" field.
func (eapuo *ExamApplicationsPSUpdateOne) ClearFeederPostJoiningDate() *ExamApplicationsPSUpdateOne {
	eapuo.mutation.ClearFeederPostJoiningDate()
	return eapuo
}

// SetDesignationID sets the "DesignationID" field.
func (eapuo *ExamApplicationsPSUpdateOne) SetDesignationID(s string) *ExamApplicationsPSUpdateOne {
	eapuo.mutation.SetDesignationID(s)
	return eapuo
}

// SetNillableDesignationID sets the "DesignationID" field if the given value is not nil.
func (eapuo *ExamApplicationsPSUpdateOne) SetNillableDesignationID(s *string) *ExamApplicationsPSUpdateOne {
	if s != nil {
		eapuo.SetDesignationID(*s)
	}
	return eapuo
}

// ClearDesignationID clears the value of the "DesignationID" field.
func (eapuo *ExamApplicationsPSUpdateOne) ClearDesignationID() *ExamApplicationsPSUpdateOne {
	eapuo.mutation.ClearDesignationID()
	return eapuo
}

// SetPresentDesignation sets the "PresentDesignation" field.
func (eapuo *ExamApplicationsPSUpdateOne) SetPresentDesignation(s string) *ExamApplicationsPSUpdateOne {
	eapuo.mutation.SetPresentDesignation(s)
	return eapuo
}

// SetNillablePresentDesignation sets the "PresentDesignation" field if the given value is not nil.
func (eapuo *ExamApplicationsPSUpdateOne) SetNillablePresentDesignation(s *string) *ExamApplicationsPSUpdateOne {
	if s != nil {
		eapuo.SetPresentDesignation(*s)
	}
	return eapuo
}

// ClearPresentDesignation clears the value of the "PresentDesignation" field.
func (eapuo *ExamApplicationsPSUpdateOne) ClearPresentDesignation() *ExamApplicationsPSUpdateOne {
	eapuo.mutation.ClearPresentDesignation()
	return eapuo
}

// SetEducationCode sets the "EducationCode" field.
func (eapuo *ExamApplicationsPSUpdateOne) SetEducationCode(s string) *ExamApplicationsPSUpdateOne {
	eapuo.mutation.SetEducationCode(s)
	return eapuo
}

// SetNillableEducationCode sets the "EducationCode" field if the given value is not nil.
func (eapuo *ExamApplicationsPSUpdateOne) SetNillableEducationCode(s *string) *ExamApplicationsPSUpdateOne {
	if s != nil {
		eapuo.SetEducationCode(*s)
	}
	return eapuo
}

// ClearEducationCode clears the value of the "EducationCode" field.
func (eapuo *ExamApplicationsPSUpdateOne) ClearEducationCode() *ExamApplicationsPSUpdateOne {
	eapuo.mutation.ClearEducationCode()
	return eapuo
}

// SetEducationDescription sets the "EducationDescription" field.
func (eapuo *ExamApplicationsPSUpdateOne) SetEducationDescription(s string) *ExamApplicationsPSUpdateOne {
	eapuo.mutation.SetEducationDescription(s)
	return eapuo
}

// SetNillableEducationDescription sets the "EducationDescription" field if the given value is not nil.
func (eapuo *ExamApplicationsPSUpdateOne) SetNillableEducationDescription(s *string) *ExamApplicationsPSUpdateOne {
	if s != nil {
		eapuo.SetEducationDescription(*s)
	}
	return eapuo
}

// ClearEducationDescription clears the value of the "EducationDescription" field.
func (eapuo *ExamApplicationsPSUpdateOne) ClearEducationDescription() *ExamApplicationsPSUpdateOne {
	eapuo.mutation.ClearEducationDescription()
	return eapuo
}

// SetFacilityUniqueID sets the "FacilityUniqueID" field.
func (eapuo *ExamApplicationsPSUpdateOne) SetFacilityUniqueID(s string) *ExamApplicationsPSUpdateOne {
	eapuo.mutation.SetFacilityUniqueID(s)
	return eapuo
}

// SetNillableFacilityUniqueID sets the "FacilityUniqueID" field if the given value is not nil.
func (eapuo *ExamApplicationsPSUpdateOne) SetNillableFacilityUniqueID(s *string) *ExamApplicationsPSUpdateOne {
	if s != nil {
		eapuo.SetFacilityUniqueID(*s)
	}
	return eapuo
}

// ClearFacilityUniqueID clears the value of the "FacilityUniqueID" field.
func (eapuo *ExamApplicationsPSUpdateOne) ClearFacilityUniqueID() *ExamApplicationsPSUpdateOne {
	eapuo.mutation.ClearFacilityUniqueID()
	return eapuo
}

// SetWorkingOfficePincode sets the "WorkingOfficePincode" field.
func (eapuo *ExamApplicationsPSUpdateOne) SetWorkingOfficePincode(i int32) *ExamApplicationsPSUpdateOne {
	eapuo.mutation.ResetWorkingOfficePincode()
	eapuo.mutation.SetWorkingOfficePincode(i)
	return eapuo
}

// SetNillableWorkingOfficePincode sets the "WorkingOfficePincode" field if the given value is not nil.
func (eapuo *ExamApplicationsPSUpdateOne) SetNillableWorkingOfficePincode(i *int32) *ExamApplicationsPSUpdateOne {
	if i != nil {
		eapuo.SetWorkingOfficePincode(*i)
	}
	return eapuo
}

// AddWorkingOfficePincode adds i to the "WorkingOfficePincode" field.
func (eapuo *ExamApplicationsPSUpdateOne) AddWorkingOfficePincode(i int32) *ExamApplicationsPSUpdateOne {
	eapuo.mutation.AddWorkingOfficePincode(i)
	return eapuo
}

// ClearWorkingOfficePincode clears the value of the "WorkingOfficePincode" field.
func (eapuo *ExamApplicationsPSUpdateOne) ClearWorkingOfficePincode() *ExamApplicationsPSUpdateOne {
	eapuo.mutation.ClearWorkingOfficePincode()
	return eapuo
}

// SetWorkingOfficeFacilityID sets the "WorkingOfficeFacilityID" field.
func (eapuo *ExamApplicationsPSUpdateOne) SetWorkingOfficeFacilityID(s string) *ExamApplicationsPSUpdateOne {
	eapuo.mutation.SetWorkingOfficeFacilityID(s)
	return eapuo
}

// SetNillableWorkingOfficeFacilityID sets the "WorkingOfficeFacilityID" field if the given value is not nil.
func (eapuo *ExamApplicationsPSUpdateOne) SetNillableWorkingOfficeFacilityID(s *string) *ExamApplicationsPSUpdateOne {
	if s != nil {
		eapuo.SetWorkingOfficeFacilityID(*s)
	}
	return eapuo
}

// ClearWorkingOfficeFacilityID clears the value of the "WorkingOfficeFacilityID" field.
func (eapuo *ExamApplicationsPSUpdateOne) ClearWorkingOfficeFacilityID() *ExamApplicationsPSUpdateOne {
	eapuo.mutation.ClearWorkingOfficeFacilityID()
	return eapuo
}

// SetWorkingOfficeName sets the "WorkingOfficeName" field.
func (eapuo *ExamApplicationsPSUpdateOne) SetWorkingOfficeName(s string) *ExamApplicationsPSUpdateOne {
	eapuo.mutation.SetWorkingOfficeName(s)
	return eapuo
}

// SetNillableWorkingOfficeName sets the "WorkingOfficeName" field if the given value is not nil.
func (eapuo *ExamApplicationsPSUpdateOne) SetNillableWorkingOfficeName(s *string) *ExamApplicationsPSUpdateOne {
	if s != nil {
		eapuo.SetWorkingOfficeName(*s)
	}
	return eapuo
}

// ClearWorkingOfficeName clears the value of the "WorkingOfficeName" field.
func (eapuo *ExamApplicationsPSUpdateOne) ClearWorkingOfficeName() *ExamApplicationsPSUpdateOne {
	eapuo.mutation.ClearWorkingOfficeName()
	return eapuo
}

// SetWorkingOfficeCircleFacilityID sets the "WorkingOfficeCircleFacilityID" field.
func (eapuo *ExamApplicationsPSUpdateOne) SetWorkingOfficeCircleFacilityID(s string) *ExamApplicationsPSUpdateOne {
	eapuo.mutation.SetWorkingOfficeCircleFacilityID(s)
	return eapuo
}

// SetNillableWorkingOfficeCircleFacilityID sets the "WorkingOfficeCircleFacilityID" field if the given value is not nil.
func (eapuo *ExamApplicationsPSUpdateOne) SetNillableWorkingOfficeCircleFacilityID(s *string) *ExamApplicationsPSUpdateOne {
	if s != nil {
		eapuo.SetWorkingOfficeCircleFacilityID(*s)
	}
	return eapuo
}

// ClearWorkingOfficeCircleFacilityID clears the value of the "WorkingOfficeCircleFacilityID" field.
func (eapuo *ExamApplicationsPSUpdateOne) ClearWorkingOfficeCircleFacilityID() *ExamApplicationsPSUpdateOne {
	eapuo.mutation.ClearWorkingOfficeCircleFacilityID()
	return eapuo
}

// SetWorkingOfficeCircleName sets the "WorkingOfficeCircleName" field.
func (eapuo *ExamApplicationsPSUpdateOne) SetWorkingOfficeCircleName(s string) *ExamApplicationsPSUpdateOne {
	eapuo.mutation.SetWorkingOfficeCircleName(s)
	return eapuo
}

// SetNillableWorkingOfficeCircleName sets the "WorkingOfficeCircleName" field if the given value is not nil.
func (eapuo *ExamApplicationsPSUpdateOne) SetNillableWorkingOfficeCircleName(s *string) *ExamApplicationsPSUpdateOne {
	if s != nil {
		eapuo.SetWorkingOfficeCircleName(*s)
	}
	return eapuo
}

// ClearWorkingOfficeCircleName clears the value of the "WorkingOfficeCircleName" field.
func (eapuo *ExamApplicationsPSUpdateOne) ClearWorkingOfficeCircleName() *ExamApplicationsPSUpdateOne {
	eapuo.mutation.ClearWorkingOfficeCircleName()
	return eapuo
}

// SetWorkingOfficeRegionFacilityID sets the "WorkingOfficeRegionFacilityID" field.
func (eapuo *ExamApplicationsPSUpdateOne) SetWorkingOfficeRegionFacilityID(s string) *ExamApplicationsPSUpdateOne {
	eapuo.mutation.SetWorkingOfficeRegionFacilityID(s)
	return eapuo
}

// SetNillableWorkingOfficeRegionFacilityID sets the "WorkingOfficeRegionFacilityID" field if the given value is not nil.
func (eapuo *ExamApplicationsPSUpdateOne) SetNillableWorkingOfficeRegionFacilityID(s *string) *ExamApplicationsPSUpdateOne {
	if s != nil {
		eapuo.SetWorkingOfficeRegionFacilityID(*s)
	}
	return eapuo
}

// ClearWorkingOfficeRegionFacilityID clears the value of the "WorkingOfficeRegionFacilityID" field.
func (eapuo *ExamApplicationsPSUpdateOne) ClearWorkingOfficeRegionFacilityID() *ExamApplicationsPSUpdateOne {
	eapuo.mutation.ClearWorkingOfficeRegionFacilityID()
	return eapuo
}

// SetWorkingOfficeRegionName sets the "WorkingOfficeRegionName" field.
func (eapuo *ExamApplicationsPSUpdateOne) SetWorkingOfficeRegionName(s string) *ExamApplicationsPSUpdateOne {
	eapuo.mutation.SetWorkingOfficeRegionName(s)
	return eapuo
}

// SetNillableWorkingOfficeRegionName sets the "WorkingOfficeRegionName" field if the given value is not nil.
func (eapuo *ExamApplicationsPSUpdateOne) SetNillableWorkingOfficeRegionName(s *string) *ExamApplicationsPSUpdateOne {
	if s != nil {
		eapuo.SetWorkingOfficeRegionName(*s)
	}
	return eapuo
}

// ClearWorkingOfficeRegionName clears the value of the "WorkingOfficeRegionName" field.
func (eapuo *ExamApplicationsPSUpdateOne) ClearWorkingOfficeRegionName() *ExamApplicationsPSUpdateOne {
	eapuo.mutation.ClearWorkingOfficeRegionName()
	return eapuo
}

// SetWorkingOfficeDivisionFacilityID sets the "WorkingOfficeDivisionFacilityID" field.
func (eapuo *ExamApplicationsPSUpdateOne) SetWorkingOfficeDivisionFacilityID(s string) *ExamApplicationsPSUpdateOne {
	eapuo.mutation.SetWorkingOfficeDivisionFacilityID(s)
	return eapuo
}

// SetNillableWorkingOfficeDivisionFacilityID sets the "WorkingOfficeDivisionFacilityID" field if the given value is not nil.
func (eapuo *ExamApplicationsPSUpdateOne) SetNillableWorkingOfficeDivisionFacilityID(s *string) *ExamApplicationsPSUpdateOne {
	if s != nil {
		eapuo.SetWorkingOfficeDivisionFacilityID(*s)
	}
	return eapuo
}

// ClearWorkingOfficeDivisionFacilityID clears the value of the "WorkingOfficeDivisionFacilityID" field.
func (eapuo *ExamApplicationsPSUpdateOne) ClearWorkingOfficeDivisionFacilityID() *ExamApplicationsPSUpdateOne {
	eapuo.mutation.ClearWorkingOfficeDivisionFacilityID()
	return eapuo
}

// SetWorkingOfficeDivisionName sets the "WorkingOfficeDivisionName" field.
func (eapuo *ExamApplicationsPSUpdateOne) SetWorkingOfficeDivisionName(s string) *ExamApplicationsPSUpdateOne {
	eapuo.mutation.SetWorkingOfficeDivisionName(s)
	return eapuo
}

// SetNillableWorkingOfficeDivisionName sets the "WorkingOfficeDivisionName" field if the given value is not nil.
func (eapuo *ExamApplicationsPSUpdateOne) SetNillableWorkingOfficeDivisionName(s *string) *ExamApplicationsPSUpdateOne {
	if s != nil {
		eapuo.SetWorkingOfficeDivisionName(*s)
	}
	return eapuo
}

// ClearWorkingOfficeDivisionName clears the value of the "WorkingOfficeDivisionName" field.
func (eapuo *ExamApplicationsPSUpdateOne) ClearWorkingOfficeDivisionName() *ExamApplicationsPSUpdateOne {
	eapuo.mutation.ClearWorkingOfficeDivisionName()
	return eapuo
}

// SetReportingOfficeFacilityID sets the "ReportingOfficeFacilityID" field.
func (eapuo *ExamApplicationsPSUpdateOne) SetReportingOfficeFacilityID(s string) *ExamApplicationsPSUpdateOne {
	eapuo.mutation.SetReportingOfficeFacilityID(s)
	return eapuo
}

// SetNillableReportingOfficeFacilityID sets the "ReportingOfficeFacilityID" field if the given value is not nil.
func (eapuo *ExamApplicationsPSUpdateOne) SetNillableReportingOfficeFacilityID(s *string) *ExamApplicationsPSUpdateOne {
	if s != nil {
		eapuo.SetReportingOfficeFacilityID(*s)
	}
	return eapuo
}

// ClearReportingOfficeFacilityID clears the value of the "ReportingOfficeFacilityID" field.
func (eapuo *ExamApplicationsPSUpdateOne) ClearReportingOfficeFacilityID() *ExamApplicationsPSUpdateOne {
	eapuo.mutation.ClearReportingOfficeFacilityID()
	return eapuo
}

// SetReportingOfficeName sets the "ReportingOfficeName" field.
func (eapuo *ExamApplicationsPSUpdateOne) SetReportingOfficeName(s string) *ExamApplicationsPSUpdateOne {
	eapuo.mutation.SetReportingOfficeName(s)
	return eapuo
}

// SetNillableReportingOfficeName sets the "ReportingOfficeName" field if the given value is not nil.
func (eapuo *ExamApplicationsPSUpdateOne) SetNillableReportingOfficeName(s *string) *ExamApplicationsPSUpdateOne {
	if s != nil {
		eapuo.SetReportingOfficeName(*s)
	}
	return eapuo
}

// ClearReportingOfficeName clears the value of the "ReportingOfficeName" field.
func (eapuo *ExamApplicationsPSUpdateOne) ClearReportingOfficeName() *ExamApplicationsPSUpdateOne {
	eapuo.mutation.ClearReportingOfficeName()
	return eapuo
}

// SetLienControllingOfficeID sets the "LienControllingOfficeID" field.
func (eapuo *ExamApplicationsPSUpdateOne) SetLienControllingOfficeID(s string) *ExamApplicationsPSUpdateOne {
	eapuo.mutation.SetLienControllingOfficeID(s)
	return eapuo
}

// SetNillableLienControllingOfficeID sets the "LienControllingOfficeID" field if the given value is not nil.
func (eapuo *ExamApplicationsPSUpdateOne) SetNillableLienControllingOfficeID(s *string) *ExamApplicationsPSUpdateOne {
	if s != nil {
		eapuo.SetLienControllingOfficeID(*s)
	}
	return eapuo
}

// ClearLienControllingOfficeID clears the value of the "LienControllingOfficeID" field.
func (eapuo *ExamApplicationsPSUpdateOne) ClearLienControllingOfficeID() *ExamApplicationsPSUpdateOne {
	eapuo.mutation.ClearLienControllingOfficeID()
	return eapuo
}

// SetLienControllingOfficeName sets the "LienControllingOfficeName" field.
func (eapuo *ExamApplicationsPSUpdateOne) SetLienControllingOfficeName(s string) *ExamApplicationsPSUpdateOne {
	eapuo.mutation.SetLienControllingOfficeName(s)
	return eapuo
}

// SetNillableLienControllingOfficeName sets the "LienControllingOfficeName" field if the given value is not nil.
func (eapuo *ExamApplicationsPSUpdateOne) SetNillableLienControllingOfficeName(s *string) *ExamApplicationsPSUpdateOne {
	if s != nil {
		eapuo.SetLienControllingOfficeName(*s)
	}
	return eapuo
}

// ClearLienControllingOfficeName clears the value of the "LienControllingOfficeName" field.
func (eapuo *ExamApplicationsPSUpdateOne) ClearLienControllingOfficeName() *ExamApplicationsPSUpdateOne {
	eapuo.mutation.ClearLienControllingOfficeName()
	return eapuo
}

// SetInDeputation sets the "InDeputation" field.
func (eapuo *ExamApplicationsPSUpdateOne) SetInDeputation(s string) *ExamApplicationsPSUpdateOne {
	eapuo.mutation.SetInDeputation(s)
	return eapuo
}

// SetNillableInDeputation sets the "InDeputation" field if the given value is not nil.
func (eapuo *ExamApplicationsPSUpdateOne) SetNillableInDeputation(s *string) *ExamApplicationsPSUpdateOne {
	if s != nil {
		eapuo.SetInDeputation(*s)
	}
	return eapuo
}

// ClearInDeputation clears the value of the "InDeputation" field.
func (eapuo *ExamApplicationsPSUpdateOne) ClearInDeputation() *ExamApplicationsPSUpdateOne {
	eapuo.mutation.ClearInDeputation()
	return eapuo
}

// SetDeputationType sets the "DeputationType" field.
func (eapuo *ExamApplicationsPSUpdateOne) SetDeputationType(s string) *ExamApplicationsPSUpdateOne {
	eapuo.mutation.SetDeputationType(s)
	return eapuo
}

// SetNillableDeputationType sets the "DeputationType" field if the given value is not nil.
func (eapuo *ExamApplicationsPSUpdateOne) SetNillableDeputationType(s *string) *ExamApplicationsPSUpdateOne {
	if s != nil {
		eapuo.SetDeputationType(*s)
	}
	return eapuo
}

// ClearDeputationType clears the value of the "DeputationType" field.
func (eapuo *ExamApplicationsPSUpdateOne) ClearDeputationType() *ExamApplicationsPSUpdateOne {
	eapuo.mutation.ClearDeputationType()
	return eapuo
}

// SetDeputationOfficeUniqueId sets the "DeputationOfficeUniqueId" field.
func (eapuo *ExamApplicationsPSUpdateOne) SetDeputationOfficeUniqueId(s string) *ExamApplicationsPSUpdateOne {
	eapuo.mutation.SetDeputationOfficeUniqueId(s)
	return eapuo
}

// SetNillableDeputationOfficeUniqueId sets the "DeputationOfficeUniqueId" field if the given value is not nil.
func (eapuo *ExamApplicationsPSUpdateOne) SetNillableDeputationOfficeUniqueId(s *string) *ExamApplicationsPSUpdateOne {
	if s != nil {
		eapuo.SetDeputationOfficeUniqueId(*s)
	}
	return eapuo
}

// ClearDeputationOfficeUniqueId clears the value of the "DeputationOfficeUniqueId" field.
func (eapuo *ExamApplicationsPSUpdateOne) ClearDeputationOfficeUniqueId() *ExamApplicationsPSUpdateOne {
	eapuo.mutation.ClearDeputationOfficeUniqueId()
	return eapuo
}

// SetDeputationOfficeFacilityID sets the "DeputationOfficeFacilityID" field.
func (eapuo *ExamApplicationsPSUpdateOne) SetDeputationOfficeFacilityID(s string) *ExamApplicationsPSUpdateOne {
	eapuo.mutation.SetDeputationOfficeFacilityID(s)
	return eapuo
}

// SetNillableDeputationOfficeFacilityID sets the "DeputationOfficeFacilityID" field if the given value is not nil.
func (eapuo *ExamApplicationsPSUpdateOne) SetNillableDeputationOfficeFacilityID(s *string) *ExamApplicationsPSUpdateOne {
	if s != nil {
		eapuo.SetDeputationOfficeFacilityID(*s)
	}
	return eapuo
}

// ClearDeputationOfficeFacilityID clears the value of the "DeputationOfficeFacilityID" field.
func (eapuo *ExamApplicationsPSUpdateOne) ClearDeputationOfficeFacilityID() *ExamApplicationsPSUpdateOne {
	eapuo.mutation.ClearDeputationOfficeFacilityID()
	return eapuo
}

// SetDeputationOfficeName sets the "DeputationOfficeName" field.
func (eapuo *ExamApplicationsPSUpdateOne) SetDeputationOfficeName(s string) *ExamApplicationsPSUpdateOne {
	eapuo.mutation.SetDeputationOfficeName(s)
	return eapuo
}

// SetNillableDeputationOfficeName sets the "DeputationOfficeName" field if the given value is not nil.
func (eapuo *ExamApplicationsPSUpdateOne) SetNillableDeputationOfficeName(s *string) *ExamApplicationsPSUpdateOne {
	if s != nil {
		eapuo.SetDeputationOfficeName(*s)
	}
	return eapuo
}

// ClearDeputationOfficeName clears the value of the "DeputationOfficeName" field.
func (eapuo *ExamApplicationsPSUpdateOne) ClearDeputationOfficeName() *ExamApplicationsPSUpdateOne {
	eapuo.mutation.ClearDeputationOfficeName()
	return eapuo
}

// SetDeputationControllingOfficeID sets the "DeputationControllingOfficeID" field.
func (eapuo *ExamApplicationsPSUpdateOne) SetDeputationControllingOfficeID(s string) *ExamApplicationsPSUpdateOne {
	eapuo.mutation.SetDeputationControllingOfficeID(s)
	return eapuo
}

// SetNillableDeputationControllingOfficeID sets the "DeputationControllingOfficeID" field if the given value is not nil.
func (eapuo *ExamApplicationsPSUpdateOne) SetNillableDeputationControllingOfficeID(s *string) *ExamApplicationsPSUpdateOne {
	if s != nil {
		eapuo.SetDeputationControllingOfficeID(*s)
	}
	return eapuo
}

// ClearDeputationControllingOfficeID clears the value of the "DeputationControllingOfficeID" field.
func (eapuo *ExamApplicationsPSUpdateOne) ClearDeputationControllingOfficeID() *ExamApplicationsPSUpdateOne {
	eapuo.mutation.ClearDeputationControllingOfficeID()
	return eapuo
}

// SetDeputationControllingOfficeName sets the "DeputationControllingOfficeName" field.
func (eapuo *ExamApplicationsPSUpdateOne) SetDeputationControllingOfficeName(s string) *ExamApplicationsPSUpdateOne {
	eapuo.mutation.SetDeputationControllingOfficeName(s)
	return eapuo
}

// SetNillableDeputationControllingOfficeName sets the "DeputationControllingOfficeName" field if the given value is not nil.
func (eapuo *ExamApplicationsPSUpdateOne) SetNillableDeputationControllingOfficeName(s *string) *ExamApplicationsPSUpdateOne {
	if s != nil {
		eapuo.SetDeputationControllingOfficeName(*s)
	}
	return eapuo
}

// ClearDeputationControllingOfficeName clears the value of the "DeputationControllingOfficeName" field.
func (eapuo *ExamApplicationsPSUpdateOne) ClearDeputationControllingOfficeName() *ExamApplicationsPSUpdateOne {
	eapuo.mutation.ClearDeputationControllingOfficeName()
	return eapuo
}

// SetControllingOfficeFacilityID sets the "ControllingOfficeFacilityID" field.
func (eapuo *ExamApplicationsPSUpdateOne) SetControllingOfficeFacilityID(s string) *ExamApplicationsPSUpdateOne {
	eapuo.mutation.SetControllingOfficeFacilityID(s)
	return eapuo
}

// SetNillableControllingOfficeFacilityID sets the "ControllingOfficeFacilityID" field if the given value is not nil.
func (eapuo *ExamApplicationsPSUpdateOne) SetNillableControllingOfficeFacilityID(s *string) *ExamApplicationsPSUpdateOne {
	if s != nil {
		eapuo.SetControllingOfficeFacilityID(*s)
	}
	return eapuo
}

// ClearControllingOfficeFacilityID clears the value of the "ControllingOfficeFacilityID" field.
func (eapuo *ExamApplicationsPSUpdateOne) ClearControllingOfficeFacilityID() *ExamApplicationsPSUpdateOne {
	eapuo.mutation.ClearControllingOfficeFacilityID()
	return eapuo
}

// SetControllingOfficeName sets the "ControllingOfficeName" field.
func (eapuo *ExamApplicationsPSUpdateOne) SetControllingOfficeName(s string) *ExamApplicationsPSUpdateOne {
	eapuo.mutation.SetControllingOfficeName(s)
	return eapuo
}

// SetNillableControllingOfficeName sets the "ControllingOfficeName" field if the given value is not nil.
func (eapuo *ExamApplicationsPSUpdateOne) SetNillableControllingOfficeName(s *string) *ExamApplicationsPSUpdateOne {
	if s != nil {
		eapuo.SetControllingOfficeName(*s)
	}
	return eapuo
}

// ClearControllingOfficeName clears the value of the "ControllingOfficeName" field.
func (eapuo *ExamApplicationsPSUpdateOne) ClearControllingOfficeName() *ExamApplicationsPSUpdateOne {
	eapuo.mutation.ClearControllingOfficeName()
	return eapuo
}

// SetNodalOfficeFacilityID sets the "NodalOfficeFacilityID" field.
func (eapuo *ExamApplicationsPSUpdateOne) SetNodalOfficeFacilityID(s string) *ExamApplicationsPSUpdateOne {
	eapuo.mutation.SetNodalOfficeFacilityID(s)
	return eapuo
}

// SetNillableNodalOfficeFacilityID sets the "NodalOfficeFacilityID" field if the given value is not nil.
func (eapuo *ExamApplicationsPSUpdateOne) SetNillableNodalOfficeFacilityID(s *string) *ExamApplicationsPSUpdateOne {
	if s != nil {
		eapuo.SetNodalOfficeFacilityID(*s)
	}
	return eapuo
}

// ClearNodalOfficeFacilityID clears the value of the "NodalOfficeFacilityID" field.
func (eapuo *ExamApplicationsPSUpdateOne) ClearNodalOfficeFacilityID() *ExamApplicationsPSUpdateOne {
	eapuo.mutation.ClearNodalOfficeFacilityID()
	return eapuo
}

// SetNodalOfficeName sets the "NodalOfficeName" field.
func (eapuo *ExamApplicationsPSUpdateOne) SetNodalOfficeName(s string) *ExamApplicationsPSUpdateOne {
	eapuo.mutation.SetNodalOfficeName(s)
	return eapuo
}

// SetNillableNodalOfficeName sets the "NodalOfficeName" field if the given value is not nil.
func (eapuo *ExamApplicationsPSUpdateOne) SetNillableNodalOfficeName(s *string) *ExamApplicationsPSUpdateOne {
	if s != nil {
		eapuo.SetNodalOfficeName(*s)
	}
	return eapuo
}

// ClearNodalOfficeName clears the value of the "NodalOfficeName" field.
func (eapuo *ExamApplicationsPSUpdateOne) ClearNodalOfficeName() *ExamApplicationsPSUpdateOne {
	eapuo.mutation.ClearNodalOfficeName()
	return eapuo
}

// SetExamCityCenterCode sets the "ExamCityCenterCode" field.
func (eapuo *ExamApplicationsPSUpdateOne) SetExamCityCenterCode(i int32) *ExamApplicationsPSUpdateOne {
	eapuo.mutation.SetExamCityCenterCode(i)
	return eapuo
}

// SetNillableExamCityCenterCode sets the "ExamCityCenterCode" field if the given value is not nil.
func (eapuo *ExamApplicationsPSUpdateOne) SetNillableExamCityCenterCode(i *int32) *ExamApplicationsPSUpdateOne {
	if i != nil {
		eapuo.SetExamCityCenterCode(*i)
	}
	return eapuo
}

// ClearExamCityCenterCode clears the value of the "ExamCityCenterCode" field.
func (eapuo *ExamApplicationsPSUpdateOne) ClearExamCityCenterCode() *ExamApplicationsPSUpdateOne {
	eapuo.mutation.ClearExamCityCenterCode()
	return eapuo
}

// SetCenterFacilityId sets the "CenterFacilityId" field.
func (eapuo *ExamApplicationsPSUpdateOne) SetCenterFacilityId(s string) *ExamApplicationsPSUpdateOne {
	eapuo.mutation.SetCenterFacilityId(s)
	return eapuo
}

// SetNillableCenterFacilityId sets the "CenterFacilityId" field if the given value is not nil.
func (eapuo *ExamApplicationsPSUpdateOne) SetNillableCenterFacilityId(s *string) *ExamApplicationsPSUpdateOne {
	if s != nil {
		eapuo.SetCenterFacilityId(*s)
	}
	return eapuo
}

// ClearCenterFacilityId clears the value of the "CenterFacilityId" field.
func (eapuo *ExamApplicationsPSUpdateOne) ClearCenterFacilityId() *ExamApplicationsPSUpdateOne {
	eapuo.mutation.ClearCenterFacilityId()
	return eapuo
}

// SetCentrePreference sets the "CentrePreference" field.
func (eapuo *ExamApplicationsPSUpdateOne) SetCentrePreference(s string) *ExamApplicationsPSUpdateOne {
	eapuo.mutation.SetCentrePreference(s)
	return eapuo
}

// SetNillableCentrePreference sets the "CentrePreference" field if the given value is not nil.
func (eapuo *ExamApplicationsPSUpdateOne) SetNillableCentrePreference(s *string) *ExamApplicationsPSUpdateOne {
	if s != nil {
		eapuo.SetCentrePreference(*s)
	}
	return eapuo
}

// ClearCentrePreference clears the value of the "CentrePreference" field.
func (eapuo *ExamApplicationsPSUpdateOne) ClearCentrePreference() *ExamApplicationsPSUpdateOne {
	eapuo.mutation.ClearCentrePreference()
	return eapuo
}

// SetSignature sets the "Signature" field.
func (eapuo *ExamApplicationsPSUpdateOne) SetSignature(s string) *ExamApplicationsPSUpdateOne {
	eapuo.mutation.SetSignature(s)
	return eapuo
}

// SetNillableSignature sets the "Signature" field if the given value is not nil.
func (eapuo *ExamApplicationsPSUpdateOne) SetNillableSignature(s *string) *ExamApplicationsPSUpdateOne {
	if s != nil {
		eapuo.SetSignature(*s)
	}
	return eapuo
}

// ClearSignature clears the value of the "Signature" field.
func (eapuo *ExamApplicationsPSUpdateOne) ClearSignature() *ExamApplicationsPSUpdateOne {
	eapuo.mutation.ClearSignature()
	return eapuo
}

// SetPhoto sets the "Photo" field.
func (eapuo *ExamApplicationsPSUpdateOne) SetPhoto(s string) *ExamApplicationsPSUpdateOne {
	eapuo.mutation.SetPhoto(s)
	return eapuo
}

// SetNillablePhoto sets the "Photo" field if the given value is not nil.
func (eapuo *ExamApplicationsPSUpdateOne) SetNillablePhoto(s *string) *ExamApplicationsPSUpdateOne {
	if s != nil {
		eapuo.SetPhoto(*s)
	}
	return eapuo
}

// ClearPhoto clears the value of the "Photo" field.
func (eapuo *ExamApplicationsPSUpdateOne) ClearPhoto() *ExamApplicationsPSUpdateOne {
	eapuo.mutation.ClearPhoto()
	return eapuo
}

// SetSignaturePath sets the "SignaturePath" field.
func (eapuo *ExamApplicationsPSUpdateOne) SetSignaturePath(s string) *ExamApplicationsPSUpdateOne {
	eapuo.mutation.SetSignaturePath(s)
	return eapuo
}

// SetNillableSignaturePath sets the "SignaturePath" field if the given value is not nil.
func (eapuo *ExamApplicationsPSUpdateOne) SetNillableSignaturePath(s *string) *ExamApplicationsPSUpdateOne {
	if s != nil {
		eapuo.SetSignaturePath(*s)
	}
	return eapuo
}

// ClearSignaturePath clears the value of the "SignaturePath" field.
func (eapuo *ExamApplicationsPSUpdateOne) ClearSignaturePath() *ExamApplicationsPSUpdateOne {
	eapuo.mutation.ClearSignaturePath()
	return eapuo
}

// SetPhotoPath sets the "PhotoPath" field.
func (eapuo *ExamApplicationsPSUpdateOne) SetPhotoPath(s string) *ExamApplicationsPSUpdateOne {
	eapuo.mutation.SetPhotoPath(s)
	return eapuo
}

// SetNillablePhotoPath sets the "PhotoPath" field if the given value is not nil.
func (eapuo *ExamApplicationsPSUpdateOne) SetNillablePhotoPath(s *string) *ExamApplicationsPSUpdateOne {
	if s != nil {
		eapuo.SetPhotoPath(*s)
	}
	return eapuo
}

// ClearPhotoPath clears the value of the "PhotoPath" field.
func (eapuo *ExamApplicationsPSUpdateOne) ClearPhotoPath() *ExamApplicationsPSUpdateOne {
	eapuo.mutation.ClearPhotoPath()
	return eapuo
}

// SetTempHallTicket sets the "TempHallTicket" field.
func (eapuo *ExamApplicationsPSUpdateOne) SetTempHallTicket(s string) *ExamApplicationsPSUpdateOne {
	eapuo.mutation.SetTempHallTicket(s)
	return eapuo
}

// SetNillableTempHallTicket sets the "TempHallTicket" field if the given value is not nil.
func (eapuo *ExamApplicationsPSUpdateOne) SetNillableTempHallTicket(s *string) *ExamApplicationsPSUpdateOne {
	if s != nil {
		eapuo.SetTempHallTicket(*s)
	}
	return eapuo
}

// ClearTempHallTicket clears the value of the "TempHallTicket" field.
func (eapuo *ExamApplicationsPSUpdateOne) ClearTempHallTicket() *ExamApplicationsPSUpdateOne {
	eapuo.mutation.ClearTempHallTicket()
	return eapuo
}

// SetCandidateRemarks sets the "CandidateRemarks" field.
func (eapuo *ExamApplicationsPSUpdateOne) SetCandidateRemarks(s string) *ExamApplicationsPSUpdateOne {
	eapuo.mutation.SetCandidateRemarks(s)
	return eapuo
}

// SetNillableCandidateRemarks sets the "CandidateRemarks" field if the given value is not nil.
func (eapuo *ExamApplicationsPSUpdateOne) SetNillableCandidateRemarks(s *string) *ExamApplicationsPSUpdateOne {
	if s != nil {
		eapuo.SetCandidateRemarks(*s)
	}
	return eapuo
}

// ClearCandidateRemarks clears the value of the "CandidateRemarks" field.
func (eapuo *ExamApplicationsPSUpdateOne) ClearCandidateRemarks() *ExamApplicationsPSUpdateOne {
	eapuo.mutation.ClearCandidateRemarks()
	return eapuo
}

// SetVAGeneralRemarks sets the "VAGeneralRemarks" field.
func (eapuo *ExamApplicationsPSUpdateOne) SetVAGeneralRemarks(s string) *ExamApplicationsPSUpdateOne {
	eapuo.mutation.SetVAGeneralRemarks(s)
	return eapuo
}

// SetNillableVAGeneralRemarks sets the "VAGeneralRemarks" field if the given value is not nil.
func (eapuo *ExamApplicationsPSUpdateOne) SetNillableVAGeneralRemarks(s *string) *ExamApplicationsPSUpdateOne {
	if s != nil {
		eapuo.SetVAGeneralRemarks(*s)
	}
	return eapuo
}

// ClearVAGeneralRemarks clears the value of the "VAGeneralRemarks" field.
func (eapuo *ExamApplicationsPSUpdateOne) ClearVAGeneralRemarks() *ExamApplicationsPSUpdateOne {
	eapuo.mutation.ClearVAGeneralRemarks()
	return eapuo
}

// SetCAGeneralRemarks sets the "CAGeneralRemarks" field.
func (eapuo *ExamApplicationsPSUpdateOne) SetCAGeneralRemarks(s string) *ExamApplicationsPSUpdateOne {
	eapuo.mutation.SetCAGeneralRemarks(s)
	return eapuo
}

// SetNillableCAGeneralRemarks sets the "CAGeneralRemarks" field if the given value is not nil.
func (eapuo *ExamApplicationsPSUpdateOne) SetNillableCAGeneralRemarks(s *string) *ExamApplicationsPSUpdateOne {
	if s != nil {
		eapuo.SetCAGeneralRemarks(*s)
	}
	return eapuo
}

// ClearCAGeneralRemarks clears the value of the "CAGeneralRemarks" field.
func (eapuo *ExamApplicationsPSUpdateOne) ClearCAGeneralRemarks() *ExamApplicationsPSUpdateOne {
	eapuo.mutation.ClearCAGeneralRemarks()
	return eapuo
}

// SetNAGeneralRemarks sets the "NAGeneralRemarks" field.
func (eapuo *ExamApplicationsPSUpdateOne) SetNAGeneralRemarks(s string) *ExamApplicationsPSUpdateOne {
	eapuo.mutation.SetNAGeneralRemarks(s)
	return eapuo
}

// SetNillableNAGeneralRemarks sets the "NAGeneralRemarks" field if the given value is not nil.
func (eapuo *ExamApplicationsPSUpdateOne) SetNillableNAGeneralRemarks(s *string) *ExamApplicationsPSUpdateOne {
	if s != nil {
		eapuo.SetNAGeneralRemarks(*s)
	}
	return eapuo
}

// ClearNAGeneralRemarks clears the value of the "NAGeneralRemarks" field.
func (eapuo *ExamApplicationsPSUpdateOne) ClearNAGeneralRemarks() *ExamApplicationsPSUpdateOne {
	eapuo.mutation.ClearNAGeneralRemarks()
	return eapuo
}

// SetApplicationStatus sets the "ApplicationStatus" field.
func (eapuo *ExamApplicationsPSUpdateOne) SetApplicationStatus(s string) *ExamApplicationsPSUpdateOne {
	eapuo.mutation.SetApplicationStatus(s)
	return eapuo
}

// SetNillableApplicationStatus sets the "ApplicationStatus" field if the given value is not nil.
func (eapuo *ExamApplicationsPSUpdateOne) SetNillableApplicationStatus(s *string) *ExamApplicationsPSUpdateOne {
	if s != nil {
		eapuo.SetApplicationStatus(*s)
	}
	return eapuo
}

// ClearApplicationStatus clears the value of the "ApplicationStatus" field.
func (eapuo *ExamApplicationsPSUpdateOne) ClearApplicationStatus() *ExamApplicationsPSUpdateOne {
	eapuo.mutation.ClearApplicationStatus()
	return eapuo
}

// SetStatus sets the "Status" field.
func (eapuo *ExamApplicationsPSUpdateOne) SetStatus(s string) *ExamApplicationsPSUpdateOne {
	eapuo.mutation.SetStatus(s)
	return eapuo
}

// SetNillableStatus sets the "Status" field if the given value is not nil.
func (eapuo *ExamApplicationsPSUpdateOne) SetNillableStatus(s *string) *ExamApplicationsPSUpdateOne {
	if s != nil {
		eapuo.SetStatus(*s)
	}
	return eapuo
}

// ClearStatus clears the value of the "Status" field.
func (eapuo *ExamApplicationsPSUpdateOne) ClearStatus() *ExamApplicationsPSUpdateOne {
	eapuo.mutation.ClearStatus()
	return eapuo
}

// SetVAUserId sets the "VA_UserId" field.
func (eapuo *ExamApplicationsPSUpdateOne) SetVAUserId(i int32) *ExamApplicationsPSUpdateOne {
	eapuo.mutation.ResetVAUserId()
	eapuo.mutation.SetVAUserId(i)
	return eapuo
}

// SetNillableVAUserId sets the "VA_UserId" field if the given value is not nil.
func (eapuo *ExamApplicationsPSUpdateOne) SetNillableVAUserId(i *int32) *ExamApplicationsPSUpdateOne {
	if i != nil {
		eapuo.SetVAUserId(*i)
	}
	return eapuo
}

// AddVAUserId adds i to the "VA_UserId" field.
func (eapuo *ExamApplicationsPSUpdateOne) AddVAUserId(i int32) *ExamApplicationsPSUpdateOne {
	eapuo.mutation.AddVAUserId(i)
	return eapuo
}

// ClearVAUserId clears the value of the "VA_UserId" field.
func (eapuo *ExamApplicationsPSUpdateOne) ClearVAUserId() *ExamApplicationsPSUpdateOne {
	eapuo.mutation.ClearVAUserId()
	return eapuo
}

// SetVAUserName sets the "VA_UserName" field.
func (eapuo *ExamApplicationsPSUpdateOne) SetVAUserName(s string) *ExamApplicationsPSUpdateOne {
	eapuo.mutation.SetVAUserName(s)
	return eapuo
}

// SetNillableVAUserName sets the "VA_UserName" field if the given value is not nil.
func (eapuo *ExamApplicationsPSUpdateOne) SetNillableVAUserName(s *string) *ExamApplicationsPSUpdateOne {
	if s != nil {
		eapuo.SetVAUserName(*s)
	}
	return eapuo
}

// ClearVAUserName clears the value of the "VA_UserName" field.
func (eapuo *ExamApplicationsPSUpdateOne) ClearVAUserName() *ExamApplicationsPSUpdateOne {
	eapuo.mutation.ClearVAUserName()
	return eapuo
}

// SetVAEmployeeID sets the "VA_EmployeeID" field.
func (eapuo *ExamApplicationsPSUpdateOne) SetVAEmployeeID(s string) *ExamApplicationsPSUpdateOne {
	eapuo.mutation.SetVAEmployeeID(s)
	return eapuo
}

// SetNillableVAEmployeeID sets the "VA_EmployeeID" field if the given value is not nil.
func (eapuo *ExamApplicationsPSUpdateOne) SetNillableVAEmployeeID(s *string) *ExamApplicationsPSUpdateOne {
	if s != nil {
		eapuo.SetVAEmployeeID(*s)
	}
	return eapuo
}

// ClearVAEmployeeID clears the value of the "VA_EmployeeID" field.
func (eapuo *ExamApplicationsPSUpdateOne) ClearVAEmployeeID() *ExamApplicationsPSUpdateOne {
	eapuo.mutation.ClearVAEmployeeID()
	return eapuo
}

// SetVAEmployeeDesignation sets the "VA_EmployeeDesignation" field.
func (eapuo *ExamApplicationsPSUpdateOne) SetVAEmployeeDesignation(s string) *ExamApplicationsPSUpdateOne {
	eapuo.mutation.SetVAEmployeeDesignation(s)
	return eapuo
}

// SetNillableVAEmployeeDesignation sets the "VA_EmployeeDesignation" field if the given value is not nil.
func (eapuo *ExamApplicationsPSUpdateOne) SetNillableVAEmployeeDesignation(s *string) *ExamApplicationsPSUpdateOne {
	if s != nil {
		eapuo.SetVAEmployeeDesignation(*s)
	}
	return eapuo
}

// ClearVAEmployeeDesignation clears the value of the "VA_EmployeeDesignation" field.
func (eapuo *ExamApplicationsPSUpdateOne) ClearVAEmployeeDesignation() *ExamApplicationsPSUpdateOne {
	eapuo.mutation.ClearVAEmployeeDesignation()
	return eapuo
}

// SetVARemarks sets the "VA_Remarks" field.
func (eapuo *ExamApplicationsPSUpdateOne) SetVARemarks(s string) *ExamApplicationsPSUpdateOne {
	eapuo.mutation.SetVARemarks(s)
	return eapuo
}

// SetNillableVARemarks sets the "VA_Remarks" field if the given value is not nil.
func (eapuo *ExamApplicationsPSUpdateOne) SetNillableVARemarks(s *string) *ExamApplicationsPSUpdateOne {
	if s != nil {
		eapuo.SetVARemarks(*s)
	}
	return eapuo
}

// ClearVARemarks clears the value of the "VA_Remarks" field.
func (eapuo *ExamApplicationsPSUpdateOne) ClearVARemarks() *ExamApplicationsPSUpdateOne {
	eapuo.mutation.ClearVARemarks()
	return eapuo
}

// SetVADate sets the "VA_Date" field.
func (eapuo *ExamApplicationsPSUpdateOne) SetVADate(t time.Time) *ExamApplicationsPSUpdateOne {
	eapuo.mutation.SetVADate(t)
	return eapuo
}

// SetNillableVADate sets the "VA_Date" field if the given value is not nil.
func (eapuo *ExamApplicationsPSUpdateOne) SetNillableVADate(t *time.Time) *ExamApplicationsPSUpdateOne {
	if t != nil {
		eapuo.SetVADate(*t)
	}
	return eapuo
}

// ClearVADate clears the value of the "VA_Date" field.
func (eapuo *ExamApplicationsPSUpdateOne) ClearVADate() *ExamApplicationsPSUpdateOne {
	eapuo.mutation.ClearVADate()
	return eapuo
}

// SetCAUserId sets the "CA_UserId" field.
func (eapuo *ExamApplicationsPSUpdateOne) SetCAUserId(i int32) *ExamApplicationsPSUpdateOne {
	eapuo.mutation.ResetCAUserId()
	eapuo.mutation.SetCAUserId(i)
	return eapuo
}

// SetNillableCAUserId sets the "CA_UserId" field if the given value is not nil.
func (eapuo *ExamApplicationsPSUpdateOne) SetNillableCAUserId(i *int32) *ExamApplicationsPSUpdateOne {
	if i != nil {
		eapuo.SetCAUserId(*i)
	}
	return eapuo
}

// AddCAUserId adds i to the "CA_UserId" field.
func (eapuo *ExamApplicationsPSUpdateOne) AddCAUserId(i int32) *ExamApplicationsPSUpdateOne {
	eapuo.mutation.AddCAUserId(i)
	return eapuo
}

// ClearCAUserId clears the value of the "CA_UserId" field.
func (eapuo *ExamApplicationsPSUpdateOne) ClearCAUserId() *ExamApplicationsPSUpdateOne {
	eapuo.mutation.ClearCAUserId()
	return eapuo
}

// SetCAUserName sets the "CA_UserName" field.
func (eapuo *ExamApplicationsPSUpdateOne) SetCAUserName(s string) *ExamApplicationsPSUpdateOne {
	eapuo.mutation.SetCAUserName(s)
	return eapuo
}

// SetNillableCAUserName sets the "CA_UserName" field if the given value is not nil.
func (eapuo *ExamApplicationsPSUpdateOne) SetNillableCAUserName(s *string) *ExamApplicationsPSUpdateOne {
	if s != nil {
		eapuo.SetCAUserName(*s)
	}
	return eapuo
}

// ClearCAUserName clears the value of the "CA_UserName" field.
func (eapuo *ExamApplicationsPSUpdateOne) ClearCAUserName() *ExamApplicationsPSUpdateOne {
	eapuo.mutation.ClearCAUserName()
	return eapuo
}

// SetCAEmployeeID sets the "CA_EmployeeID" field.
func (eapuo *ExamApplicationsPSUpdateOne) SetCAEmployeeID(s string) *ExamApplicationsPSUpdateOne {
	eapuo.mutation.SetCAEmployeeID(s)
	return eapuo
}

// SetNillableCAEmployeeID sets the "CA_EmployeeID" field if the given value is not nil.
func (eapuo *ExamApplicationsPSUpdateOne) SetNillableCAEmployeeID(s *string) *ExamApplicationsPSUpdateOne {
	if s != nil {
		eapuo.SetCAEmployeeID(*s)
	}
	return eapuo
}

// ClearCAEmployeeID clears the value of the "CA_EmployeeID" field.
func (eapuo *ExamApplicationsPSUpdateOne) ClearCAEmployeeID() *ExamApplicationsPSUpdateOne {
	eapuo.mutation.ClearCAEmployeeID()
	return eapuo
}

// SetCAEmployeeDesignation sets the "CA_EmployeeDesignation" field.
func (eapuo *ExamApplicationsPSUpdateOne) SetCAEmployeeDesignation(s string) *ExamApplicationsPSUpdateOne {
	eapuo.mutation.SetCAEmployeeDesignation(s)
	return eapuo
}

// SetNillableCAEmployeeDesignation sets the "CA_EmployeeDesignation" field if the given value is not nil.
func (eapuo *ExamApplicationsPSUpdateOne) SetNillableCAEmployeeDesignation(s *string) *ExamApplicationsPSUpdateOne {
	if s != nil {
		eapuo.SetCAEmployeeDesignation(*s)
	}
	return eapuo
}

// ClearCAEmployeeDesignation clears the value of the "CA_EmployeeDesignation" field.
func (eapuo *ExamApplicationsPSUpdateOne) ClearCAEmployeeDesignation() *ExamApplicationsPSUpdateOne {
	eapuo.mutation.ClearCAEmployeeDesignation()
	return eapuo
}

// SetCARemarks sets the "CA_Remarks" field.
func (eapuo *ExamApplicationsPSUpdateOne) SetCARemarks(s string) *ExamApplicationsPSUpdateOne {
	eapuo.mutation.SetCARemarks(s)
	return eapuo
}

// SetNillableCARemarks sets the "CA_Remarks" field if the given value is not nil.
func (eapuo *ExamApplicationsPSUpdateOne) SetNillableCARemarks(s *string) *ExamApplicationsPSUpdateOne {
	if s != nil {
		eapuo.SetCARemarks(*s)
	}
	return eapuo
}

// ClearCARemarks clears the value of the "CA_Remarks" field.
func (eapuo *ExamApplicationsPSUpdateOne) ClearCARemarks() *ExamApplicationsPSUpdateOne {
	eapuo.mutation.ClearCARemarks()
	return eapuo
}

// SetCADate sets the "CA_Date" field.
func (eapuo *ExamApplicationsPSUpdateOne) SetCADate(t time.Time) *ExamApplicationsPSUpdateOne {
	eapuo.mutation.SetCADate(t)
	return eapuo
}

// SetNillableCADate sets the "CA_Date" field if the given value is not nil.
func (eapuo *ExamApplicationsPSUpdateOne) SetNillableCADate(t *time.Time) *ExamApplicationsPSUpdateOne {
	if t != nil {
		eapuo.SetCADate(*t)
	}
	return eapuo
}

// ClearCADate clears the value of the "CA_Date" field.
func (eapuo *ExamApplicationsPSUpdateOne) ClearCADate() *ExamApplicationsPSUpdateOne {
	eapuo.mutation.ClearCADate()
	return eapuo
}

// SetNAUserId sets the "NA_UserId" field.
func (eapuo *ExamApplicationsPSUpdateOne) SetNAUserId(i int32) *ExamApplicationsPSUpdateOne {
	eapuo.mutation.ResetNAUserId()
	eapuo.mutation.SetNAUserId(i)
	return eapuo
}

// SetNillableNAUserId sets the "NA_UserId" field if the given value is not nil.
func (eapuo *ExamApplicationsPSUpdateOne) SetNillableNAUserId(i *int32) *ExamApplicationsPSUpdateOne {
	if i != nil {
		eapuo.SetNAUserId(*i)
	}
	return eapuo
}

// AddNAUserId adds i to the "NA_UserId" field.
func (eapuo *ExamApplicationsPSUpdateOne) AddNAUserId(i int32) *ExamApplicationsPSUpdateOne {
	eapuo.mutation.AddNAUserId(i)
	return eapuo
}

// ClearNAUserId clears the value of the "NA_UserId" field.
func (eapuo *ExamApplicationsPSUpdateOne) ClearNAUserId() *ExamApplicationsPSUpdateOne {
	eapuo.mutation.ClearNAUserId()
	return eapuo
}

// SetNAUserName sets the "NA_UserName" field.
func (eapuo *ExamApplicationsPSUpdateOne) SetNAUserName(s string) *ExamApplicationsPSUpdateOne {
	eapuo.mutation.SetNAUserName(s)
	return eapuo
}

// SetNillableNAUserName sets the "NA_UserName" field if the given value is not nil.
func (eapuo *ExamApplicationsPSUpdateOne) SetNillableNAUserName(s *string) *ExamApplicationsPSUpdateOne {
	if s != nil {
		eapuo.SetNAUserName(*s)
	}
	return eapuo
}

// ClearNAUserName clears the value of the "NA_UserName" field.
func (eapuo *ExamApplicationsPSUpdateOne) ClearNAUserName() *ExamApplicationsPSUpdateOne {
	eapuo.mutation.ClearNAUserName()
	return eapuo
}

// SetNAEmployeeID sets the "NA_EmployeeID" field.
func (eapuo *ExamApplicationsPSUpdateOne) SetNAEmployeeID(s string) *ExamApplicationsPSUpdateOne {
	eapuo.mutation.SetNAEmployeeID(s)
	return eapuo
}

// SetNillableNAEmployeeID sets the "NA_EmployeeID" field if the given value is not nil.
func (eapuo *ExamApplicationsPSUpdateOne) SetNillableNAEmployeeID(s *string) *ExamApplicationsPSUpdateOne {
	if s != nil {
		eapuo.SetNAEmployeeID(*s)
	}
	return eapuo
}

// ClearNAEmployeeID clears the value of the "NA_EmployeeID" field.
func (eapuo *ExamApplicationsPSUpdateOne) ClearNAEmployeeID() *ExamApplicationsPSUpdateOne {
	eapuo.mutation.ClearNAEmployeeID()
	return eapuo
}

// SetNAEmployeeDesignation sets the "NA_EmployeeDesignation" field.
func (eapuo *ExamApplicationsPSUpdateOne) SetNAEmployeeDesignation(s string) *ExamApplicationsPSUpdateOne {
	eapuo.mutation.SetNAEmployeeDesignation(s)
	return eapuo
}

// SetNillableNAEmployeeDesignation sets the "NA_EmployeeDesignation" field if the given value is not nil.
func (eapuo *ExamApplicationsPSUpdateOne) SetNillableNAEmployeeDesignation(s *string) *ExamApplicationsPSUpdateOne {
	if s != nil {
		eapuo.SetNAEmployeeDesignation(*s)
	}
	return eapuo
}

// ClearNAEmployeeDesignation clears the value of the "NA_EmployeeDesignation" field.
func (eapuo *ExamApplicationsPSUpdateOne) ClearNAEmployeeDesignation() *ExamApplicationsPSUpdateOne {
	eapuo.mutation.ClearNAEmployeeDesignation()
	return eapuo
}

// SetNARemarks sets the "NA_Remarks" field.
func (eapuo *ExamApplicationsPSUpdateOne) SetNARemarks(s string) *ExamApplicationsPSUpdateOne {
	eapuo.mutation.SetNARemarks(s)
	return eapuo
}

// SetNillableNARemarks sets the "NA_Remarks" field if the given value is not nil.
func (eapuo *ExamApplicationsPSUpdateOne) SetNillableNARemarks(s *string) *ExamApplicationsPSUpdateOne {
	if s != nil {
		eapuo.SetNARemarks(*s)
	}
	return eapuo
}

// ClearNARemarks clears the value of the "NA_Remarks" field.
func (eapuo *ExamApplicationsPSUpdateOne) ClearNARemarks() *ExamApplicationsPSUpdateOne {
	eapuo.mutation.ClearNARemarks()
	return eapuo
}

// SetNADate sets the "NA_Date" field.
func (eapuo *ExamApplicationsPSUpdateOne) SetNADate(t time.Time) *ExamApplicationsPSUpdateOne {
	eapuo.mutation.SetNADate(t)
	return eapuo
}

// SetNillableNADate sets the "NA_Date" field if the given value is not nil.
func (eapuo *ExamApplicationsPSUpdateOne) SetNillableNADate(t *time.Time) *ExamApplicationsPSUpdateOne {
	if t != nil {
		eapuo.SetNADate(*t)
	}
	return eapuo
}

// ClearNADate clears the value of the "NA_Date" field.
func (eapuo *ExamApplicationsPSUpdateOne) ClearNADate() *ExamApplicationsPSUpdateOne {
	eapuo.mutation.ClearNADate()
	return eapuo
}

// SetAppliactionRemarks sets the "AppliactionRemarks" field.
func (eapuo *ExamApplicationsPSUpdateOne) SetAppliactionRemarks(s string) *ExamApplicationsPSUpdateOne {
	eapuo.mutation.SetAppliactionRemarks(s)
	return eapuo
}

// SetNillableAppliactionRemarks sets the "AppliactionRemarks" field if the given value is not nil.
func (eapuo *ExamApplicationsPSUpdateOne) SetNillableAppliactionRemarks(s *string) *ExamApplicationsPSUpdateOne {
	if s != nil {
		eapuo.SetAppliactionRemarks(*s)
	}
	return eapuo
}

// ClearAppliactionRemarks clears the value of the "AppliactionRemarks" field.
func (eapuo *ExamApplicationsPSUpdateOne) ClearAppliactionRemarks() *ExamApplicationsPSUpdateOne {
	eapuo.mutation.ClearAppliactionRemarks()
	return eapuo
}

// SetCadrePreferences sets the "CadrePreferences" field.
func (eapuo *ExamApplicationsPSUpdateOne) SetCadrePreferences(i []interface{}) *ExamApplicationsPSUpdateOne {
	eapuo.mutation.SetCadrePreferences(i)
	return eapuo
}

// AppendCadrePreferences appends i to the "CadrePreferences" field.
func (eapuo *ExamApplicationsPSUpdateOne) AppendCadrePreferences(i []interface{}) *ExamApplicationsPSUpdateOne {
	eapuo.mutation.AppendCadrePreferences(i)
	return eapuo
}

// ClearCadrePreferences clears the value of the "CadrePreferences" field.
func (eapuo *ExamApplicationsPSUpdateOne) ClearCadrePreferences() *ExamApplicationsPSUpdateOne {
	eapuo.mutation.ClearCadrePreferences()
	return eapuo
}

// SetCAPreviousRemarks sets the "CAPreviousRemarks" field.
func (eapuo *ExamApplicationsPSUpdateOne) SetCAPreviousRemarks(s string) *ExamApplicationsPSUpdateOne {
	eapuo.mutation.SetCAPreviousRemarks(s)
	return eapuo
}

// SetNillableCAPreviousRemarks sets the "CAPreviousRemarks" field if the given value is not nil.
func (eapuo *ExamApplicationsPSUpdateOne) SetNillableCAPreviousRemarks(s *string) *ExamApplicationsPSUpdateOne {
	if s != nil {
		eapuo.SetCAPreviousRemarks(*s)
	}
	return eapuo
}

// ClearCAPreviousRemarks clears the value of the "CAPreviousRemarks" field.
func (eapuo *ExamApplicationsPSUpdateOne) ClearCAPreviousRemarks() *ExamApplicationsPSUpdateOne {
	eapuo.mutation.ClearCAPreviousRemarks()
	return eapuo
}

// SetPunishmentStatus sets the "PunishmentStatus" field.
func (eapuo *ExamApplicationsPSUpdateOne) SetPunishmentStatus(b bool) *ExamApplicationsPSUpdateOne {
	eapuo.mutation.SetPunishmentStatus(b)
	return eapuo
}

// SetNillablePunishmentStatus sets the "PunishmentStatus" field if the given value is not nil.
func (eapuo *ExamApplicationsPSUpdateOne) SetNillablePunishmentStatus(b *bool) *ExamApplicationsPSUpdateOne {
	if b != nil {
		eapuo.SetPunishmentStatus(*b)
	}
	return eapuo
}

// ClearPunishmentStatus clears the value of the "PunishmentStatus" field.
func (eapuo *ExamApplicationsPSUpdateOne) ClearPunishmentStatus() *ExamApplicationsPSUpdateOne {
	eapuo.mutation.ClearPunishmentStatus()
	return eapuo
}

// SetDisciplinaryCaseStatus sets the "DisciplinaryCaseStatus" field.
func (eapuo *ExamApplicationsPSUpdateOne) SetDisciplinaryCaseStatus(b bool) *ExamApplicationsPSUpdateOne {
	eapuo.mutation.SetDisciplinaryCaseStatus(b)
	return eapuo
}

// SetNillableDisciplinaryCaseStatus sets the "DisciplinaryCaseStatus" field if the given value is not nil.
func (eapuo *ExamApplicationsPSUpdateOne) SetNillableDisciplinaryCaseStatus(b *bool) *ExamApplicationsPSUpdateOne {
	if b != nil {
		eapuo.SetDisciplinaryCaseStatus(*b)
	}
	return eapuo
}

// ClearDisciplinaryCaseStatus clears the value of the "DisciplinaryCaseStatus" field.
func (eapuo *ExamApplicationsPSUpdateOne) ClearDisciplinaryCaseStatus() *ExamApplicationsPSUpdateOne {
	eapuo.mutation.ClearDisciplinaryCaseStatus()
	return eapuo
}

// SetGenerateHallTicketFlag sets the "GenerateHallTicketFlag" field.
func (eapuo *ExamApplicationsPSUpdateOne) SetGenerateHallTicketFlag(b bool) *ExamApplicationsPSUpdateOne {
	eapuo.mutation.SetGenerateHallTicketFlag(b)
	return eapuo
}

// SetNillableGenerateHallTicketFlag sets the "GenerateHallTicketFlag" field if the given value is not nil.
func (eapuo *ExamApplicationsPSUpdateOne) SetNillableGenerateHallTicketFlag(b *bool) *ExamApplicationsPSUpdateOne {
	if b != nil {
		eapuo.SetGenerateHallTicketFlag(*b)
	}
	return eapuo
}

// ClearGenerateHallTicketFlag clears the value of the "GenerateHallTicketFlag" field.
func (eapuo *ExamApplicationsPSUpdateOne) ClearGenerateHallTicketFlag() *ExamApplicationsPSUpdateOne {
	eapuo.mutation.ClearGenerateHallTicketFlag()
	return eapuo
}

// SetHallTicketNumber sets the "HallTicketNumber" field.
func (eapuo *ExamApplicationsPSUpdateOne) SetHallTicketNumber(s string) *ExamApplicationsPSUpdateOne {
	eapuo.mutation.SetHallTicketNumber(s)
	return eapuo
}

// SetNillableHallTicketNumber sets the "HallTicketNumber" field if the given value is not nil.
func (eapuo *ExamApplicationsPSUpdateOne) SetNillableHallTicketNumber(s *string) *ExamApplicationsPSUpdateOne {
	if s != nil {
		eapuo.SetHallTicketNumber(*s)
	}
	return eapuo
}

// ClearHallTicketNumber clears the value of the "HallTicketNumber" field.
func (eapuo *ExamApplicationsPSUpdateOne) ClearHallTicketNumber() *ExamApplicationsPSUpdateOne {
	eapuo.mutation.ClearHallTicketNumber()
	return eapuo
}

// SetHallTicketGeneratedFlag sets the "HallTicketGeneratedFlag" field.
func (eapuo *ExamApplicationsPSUpdateOne) SetHallTicketGeneratedFlag(b bool) *ExamApplicationsPSUpdateOne {
	eapuo.mutation.SetHallTicketGeneratedFlag(b)
	return eapuo
}

// SetNillableHallTicketGeneratedFlag sets the "HallTicketGeneratedFlag" field if the given value is not nil.
func (eapuo *ExamApplicationsPSUpdateOne) SetNillableHallTicketGeneratedFlag(b *bool) *ExamApplicationsPSUpdateOne {
	if b != nil {
		eapuo.SetHallTicketGeneratedFlag(*b)
	}
	return eapuo
}

// ClearHallTicketGeneratedFlag clears the value of the "HallTicketGeneratedFlag" field.
func (eapuo *ExamApplicationsPSUpdateOne) ClearHallTicketGeneratedFlag() *ExamApplicationsPSUpdateOne {
	eapuo.mutation.ClearHallTicketGeneratedFlag()
	return eapuo
}

// SetGenerateHallTicketFlagByNO sets the "GenerateHallTicketFlagByNO" field.
func (eapuo *ExamApplicationsPSUpdateOne) SetGenerateHallTicketFlagByNO(b bool) *ExamApplicationsPSUpdateOne {
	eapuo.mutation.SetGenerateHallTicketFlagByNO(b)
	return eapuo
}

// SetNillableGenerateHallTicketFlagByNO sets the "GenerateHallTicketFlagByNO" field if the given value is not nil.
func (eapuo *ExamApplicationsPSUpdateOne) SetNillableGenerateHallTicketFlagByNO(b *bool) *ExamApplicationsPSUpdateOne {
	if b != nil {
		eapuo.SetGenerateHallTicketFlagByNO(*b)
	}
	return eapuo
}

// ClearGenerateHallTicketFlagByNO clears the value of the "GenerateHallTicketFlagByNO" field.
func (eapuo *ExamApplicationsPSUpdateOne) ClearGenerateHallTicketFlagByNO() *ExamApplicationsPSUpdateOne {
	eapuo.mutation.ClearGenerateHallTicketFlagByNO()
	return eapuo
}

// SetHallTicketGeneratedDate sets the "HallTicketGeneratedDate" field.
func (eapuo *ExamApplicationsPSUpdateOne) SetHallTicketGeneratedDate(t time.Time) *ExamApplicationsPSUpdateOne {
	eapuo.mutation.SetHallTicketGeneratedDate(t)
	return eapuo
}

// SetNillableHallTicketGeneratedDate sets the "HallTicketGeneratedDate" field if the given value is not nil.
func (eapuo *ExamApplicationsPSUpdateOne) SetNillableHallTicketGeneratedDate(t *time.Time) *ExamApplicationsPSUpdateOne {
	if t != nil {
		eapuo.SetHallTicketGeneratedDate(*t)
	}
	return eapuo
}

// ClearHallTicketGeneratedDate clears the value of the "HallTicketGeneratedDate" field.
func (eapuo *ExamApplicationsPSUpdateOne) ClearHallTicketGeneratedDate() *ExamApplicationsPSUpdateOne {
	eapuo.mutation.ClearHallTicketGeneratedDate()
	return eapuo
}

// SetTemporaryHallTicket sets the "TemporaryHallTicket" field.
func (eapuo *ExamApplicationsPSUpdateOne) SetTemporaryHallTicket(s string) *ExamApplicationsPSUpdateOne {
	eapuo.mutation.SetTemporaryHallTicket(s)
	return eapuo
}

// SetNillableTemporaryHallTicket sets the "TemporaryHallTicket" field if the given value is not nil.
func (eapuo *ExamApplicationsPSUpdateOne) SetNillableTemporaryHallTicket(s *string) *ExamApplicationsPSUpdateOne {
	if s != nil {
		eapuo.SetTemporaryHallTicket(*s)
	}
	return eapuo
}

// ClearTemporaryHallTicket clears the value of the "TemporaryHallTicket" field.
func (eapuo *ExamApplicationsPSUpdateOne) ClearTemporaryHallTicket() *ExamApplicationsPSUpdateOne {
	eapuo.mutation.ClearTemporaryHallTicket()
	return eapuo
}

// SetOptionUsed sets the "OptionUsed" field.
func (eapuo *ExamApplicationsPSUpdateOne) SetOptionUsed(s string) *ExamApplicationsPSUpdateOne {
	eapuo.mutation.SetOptionUsed(s)
	return eapuo
}

// SetNillableOptionUsed sets the "OptionUsed" field if the given value is not nil.
func (eapuo *ExamApplicationsPSUpdateOne) SetNillableOptionUsed(s *string) *ExamApplicationsPSUpdateOne {
	if s != nil {
		eapuo.SetOptionUsed(*s)
	}
	return eapuo
}

// ClearOptionUsed clears the value of the "OptionUsed" field.
func (eapuo *ExamApplicationsPSUpdateOne) ClearOptionUsed() *ExamApplicationsPSUpdateOne {
	eapuo.mutation.ClearOptionUsed()
	return eapuo
}

// SetRemarks sets the "Remarks" field.
func (eapuo *ExamApplicationsPSUpdateOne) SetRemarks(s string) *ExamApplicationsPSUpdateOne {
	eapuo.mutation.SetRemarks(s)
	return eapuo
}

// SetNillableRemarks sets the "Remarks" field if the given value is not nil.
func (eapuo *ExamApplicationsPSUpdateOne) SetNillableRemarks(s *string) *ExamApplicationsPSUpdateOne {
	if s != nil {
		eapuo.SetRemarks(*s)
	}
	return eapuo
}

// ClearRemarks clears the value of the "Remarks" field.
func (eapuo *ExamApplicationsPSUpdateOne) ClearRemarks() *ExamApplicationsPSUpdateOne {
	eapuo.mutation.ClearRemarks()
	return eapuo
}

// SetCadre sets the "Cadre" field.
func (eapuo *ExamApplicationsPSUpdateOne) SetCadre(s string) *ExamApplicationsPSUpdateOne {
	eapuo.mutation.SetCadre(s)
	return eapuo
}

// SetNillableCadre sets the "Cadre" field if the given value is not nil.
func (eapuo *ExamApplicationsPSUpdateOne) SetNillableCadre(s *string) *ExamApplicationsPSUpdateOne {
	if s != nil {
		eapuo.SetCadre(*s)
	}
	return eapuo
}

// ClearCadre clears the value of the "Cadre" field.
func (eapuo *ExamApplicationsPSUpdateOne) ClearCadre() *ExamApplicationsPSUpdateOne {
	eapuo.mutation.ClearCadre()
	return eapuo
}

// SetEmployeePost sets the "EmployeePost" field.
func (eapuo *ExamApplicationsPSUpdateOne) SetEmployeePost(s string) *ExamApplicationsPSUpdateOne {
	eapuo.mutation.SetEmployeePost(s)
	return eapuo
}

// SetNillableEmployeePost sets the "EmployeePost" field if the given value is not nil.
func (eapuo *ExamApplicationsPSUpdateOne) SetNillableEmployeePost(s *string) *ExamApplicationsPSUpdateOne {
	if s != nil {
		eapuo.SetEmployeePost(*s)
	}
	return eapuo
}

// ClearEmployeePost clears the value of the "EmployeePost" field.
func (eapuo *ExamApplicationsPSUpdateOne) ClearEmployeePost() *ExamApplicationsPSUpdateOne {
	eapuo.mutation.ClearEmployeePost()
	return eapuo
}

// SetDOJInEligiblePost sets the "DOJInEligiblePost" field.
func (eapuo *ExamApplicationsPSUpdateOne) SetDOJInEligiblePost(s string) *ExamApplicationsPSUpdateOne {
	eapuo.mutation.SetDOJInEligiblePost(s)
	return eapuo
}

// SetNillableDOJInEligiblePost sets the "DOJInEligiblePost" field if the given value is not nil.
func (eapuo *ExamApplicationsPSUpdateOne) SetNillableDOJInEligiblePost(s *string) *ExamApplicationsPSUpdateOne {
	if s != nil {
		eapuo.SetDOJInEligiblePost(*s)
	}
	return eapuo
}

// ClearDOJInEligiblePost clears the value of the "DOJInEligiblePost" field.
func (eapuo *ExamApplicationsPSUpdateOne) ClearDOJInEligiblePost() *ExamApplicationsPSUpdateOne {
	eapuo.mutation.ClearDOJInEligiblePost()
	return eapuo
}

// SetDivisionPreferences sets the "DivisionPreferences" field.
func (eapuo *ExamApplicationsPSUpdateOne) SetDivisionPreferences(i []interface{}) *ExamApplicationsPSUpdateOne {
	eapuo.mutation.SetDivisionPreferences(i)
	return eapuo
}

// AppendDivisionPreferences appends i to the "DivisionPreferences" field.
func (eapuo *ExamApplicationsPSUpdateOne) AppendDivisionPreferences(i []interface{}) *ExamApplicationsPSUpdateOne {
	eapuo.mutation.AppendDivisionPreferences(i)
	return eapuo
}

// ClearDivisionPreferences clears the value of the "DivisionPreferences" field.
func (eapuo *ExamApplicationsPSUpdateOne) ClearDivisionPreferences() *ExamApplicationsPSUpdateOne {
	eapuo.mutation.ClearDivisionPreferences()
	return eapuo
}

// SetRoleUserCode sets the "RoleUserCode" field.
func (eapuo *ExamApplicationsPSUpdateOne) SetRoleUserCode(i int32) *ExamApplicationsPSUpdateOne {
	eapuo.mutation.SetRoleUserCode(i)
	return eapuo
}

// SetNillableRoleUserCode sets the "RoleUserCode" field if the given value is not nil.
func (eapuo *ExamApplicationsPSUpdateOne) SetNillableRoleUserCode(i *int32) *ExamApplicationsPSUpdateOne {
	if i != nil {
		eapuo.SetRoleUserCode(*i)
	}
	return eapuo
}

// ClearRoleUserCode clears the value of the "RoleUserCode" field.
func (eapuo *ExamApplicationsPSUpdateOne) ClearRoleUserCode() *ExamApplicationsPSUpdateOne {
	eapuo.mutation.ClearRoleUserCode()
	return eapuo
}

// SetCircleSID sets the "CircleSID" field.
func (eapuo *ExamApplicationsPSUpdateOne) SetCircleSID(i int32) *ExamApplicationsPSUpdateOne {
	eapuo.mutation.SetCircleSID(i)
	return eapuo
}

// SetNillableCircleSID sets the "CircleSID" field if the given value is not nil.
func (eapuo *ExamApplicationsPSUpdateOne) SetNillableCircleSID(i *int32) *ExamApplicationsPSUpdateOne {
	if i != nil {
		eapuo.SetCircleSID(*i)
	}
	return eapuo
}

// ClearCircleSID clears the value of the "CircleSID" field.
func (eapuo *ExamApplicationsPSUpdateOne) ClearCircleSID() *ExamApplicationsPSUpdateOne {
	eapuo.mutation.ClearCircleSID()
	return eapuo
}

// SetFacilityName sets the "FacilityName" field.
func (eapuo *ExamApplicationsPSUpdateOne) SetFacilityName(s string) *ExamApplicationsPSUpdateOne {
	eapuo.mutation.SetFacilityName(s)
	return eapuo
}

// SetNillableFacilityName sets the "FacilityName" field if the given value is not nil.
func (eapuo *ExamApplicationsPSUpdateOne) SetNillableFacilityName(s *string) *ExamApplicationsPSUpdateOne {
	if s != nil {
		eapuo.SetFacilityName(*s)
	}
	return eapuo
}

// ClearFacilityName clears the value of the "FacilityName" field.
func (eapuo *ExamApplicationsPSUpdateOne) ClearFacilityName() *ExamApplicationsPSUpdateOne {
	eapuo.mutation.ClearFacilityName()
	return eapuo
}

// SetServiceLength sets the "ServiceLength" field.
func (eapuo *ExamApplicationsPSUpdateOne) SetServiceLength(i []interface{}) *ExamApplicationsPSUpdateOne {
	eapuo.mutation.SetServiceLength(i)
	return eapuo
}

// AppendServiceLength appends i to the "ServiceLength" field.
func (eapuo *ExamApplicationsPSUpdateOne) AppendServiceLength(i []interface{}) *ExamApplicationsPSUpdateOne {
	eapuo.mutation.AppendServiceLength(i)
	return eapuo
}

// ClearServiceLength clears the value of the "ServiceLength" field.
func (eapuo *ExamApplicationsPSUpdateOne) ClearServiceLength() *ExamApplicationsPSUpdateOne {
	eapuo.mutation.ClearServiceLength()
	return eapuo
}

// SetNonQualifyingService sets the "NonQualifyingService" field.
func (eapuo *ExamApplicationsPSUpdateOne) SetNonQualifyingService(i []interface{}) *ExamApplicationsPSUpdateOne {
	eapuo.mutation.SetNonQualifyingService(i)
	return eapuo
}

// AppendNonQualifyingService appends i to the "NonQualifyingService" field.
func (eapuo *ExamApplicationsPSUpdateOne) AppendNonQualifyingService(i []interface{}) *ExamApplicationsPSUpdateOne {
	eapuo.mutation.AppendNonQualifyingService(i)
	return eapuo
}

// ClearNonQualifyingService clears the value of the "NonQualifyingService" field.
func (eapuo *ExamApplicationsPSUpdateOne) ClearNonQualifyingService() *ExamApplicationsPSUpdateOne {
	eapuo.mutation.ClearNonQualifyingService()
	return eapuo
}

// SetDCInPresentCadre sets the "DCInPresentCadre" field.
func (eapuo *ExamApplicationsPSUpdateOne) SetDCInPresentCadre(s string) *ExamApplicationsPSUpdateOne {
	eapuo.mutation.SetDCInPresentCadre(s)
	return eapuo
}

// SetNillableDCInPresentCadre sets the "DCInPresentCadre" field if the given value is not nil.
func (eapuo *ExamApplicationsPSUpdateOne) SetNillableDCInPresentCadre(s *string) *ExamApplicationsPSUpdateOne {
	if s != nil {
		eapuo.SetDCInPresentCadre(*s)
	}
	return eapuo
}

// ClearDCInPresentCadre clears the value of the "DCInPresentCadre" field.
func (eapuo *ExamApplicationsPSUpdateOne) ClearDCInPresentCadre() *ExamApplicationsPSUpdateOne {
	eapuo.mutation.ClearDCInPresentCadre()
	return eapuo
}

// SetCenterId sets the "CenterId" field.
func (eapuo *ExamApplicationsPSUpdateOne) SetCenterId(i int32) *ExamApplicationsPSUpdateOne {
	eapuo.mutation.ResetCenterId()
	eapuo.mutation.SetCenterId(i)
	return eapuo
}

// SetNillableCenterId sets the "CenterId" field if the given value is not nil.
func (eapuo *ExamApplicationsPSUpdateOne) SetNillableCenterId(i *int32) *ExamApplicationsPSUpdateOne {
	if i != nil {
		eapuo.SetCenterId(*i)
	}
	return eapuo
}

// AddCenterId adds i to the "CenterId" field.
func (eapuo *ExamApplicationsPSUpdateOne) AddCenterId(i int32) *ExamApplicationsPSUpdateOne {
	eapuo.mutation.AddCenterId(i)
	return eapuo
}

// ClearCenterId clears the value of the "CenterId" field.
func (eapuo *ExamApplicationsPSUpdateOne) ClearCenterId() *ExamApplicationsPSUpdateOne {
	eapuo.mutation.ClearCenterId()
	return eapuo
}

// SetCenterCode sets the "CenterCode" field.
func (eapuo *ExamApplicationsPSUpdateOne) SetCenterCode(i int32) *ExamApplicationsPSUpdateOne {
	eapuo.mutation.SetCenterCode(i)
	return eapuo
}

// SetNillableCenterCode sets the "CenterCode" field if the given value is not nil.
func (eapuo *ExamApplicationsPSUpdateOne) SetNillableCenterCode(i *int32) *ExamApplicationsPSUpdateOne {
	if i != nil {
		eapuo.SetCenterCode(*i)
	}
	return eapuo
}

// ClearCenterCode clears the value of the "CenterCode" field.
func (eapuo *ExamApplicationsPSUpdateOne) ClearCenterCode() *ExamApplicationsPSUpdateOne {
	eapuo.mutation.ClearCenterCode()
	return eapuo
}

// SetClaimingQualifyingService sets the "ClaimingQualifyingService" field.
func (eapuo *ExamApplicationsPSUpdateOne) SetClaimingQualifyingService(s string) *ExamApplicationsPSUpdateOne {
	eapuo.mutation.SetClaimingQualifyingService(s)
	return eapuo
}

// SetNillableClaimingQualifyingService sets the "ClaimingQualifyingService" field if the given value is not nil.
func (eapuo *ExamApplicationsPSUpdateOne) SetNillableClaimingQualifyingService(s *string) *ExamApplicationsPSUpdateOne {
	if s != nil {
		eapuo.SetClaimingQualifyingService(*s)
	}
	return eapuo
}

// ClearClaimingQualifyingService clears the value of the "ClaimingQualifyingService" field.
func (eapuo *ExamApplicationsPSUpdateOne) ClearClaimingQualifyingService() *ExamApplicationsPSUpdateOne {
	eapuo.mutation.ClearClaimingQualifyingService()
	return eapuo
}

// SetDeputationOfficePincode sets the "DeputationOfficePincode" field.
func (eapuo *ExamApplicationsPSUpdateOne) SetDeputationOfficePincode(s string) *ExamApplicationsPSUpdateOne {
	eapuo.mutation.SetDeputationOfficePincode(s)
	return eapuo
}

// SetNillableDeputationOfficePincode sets the "DeputationOfficePincode" field if the given value is not nil.
func (eapuo *ExamApplicationsPSUpdateOne) SetNillableDeputationOfficePincode(s *string) *ExamApplicationsPSUpdateOne {
	if s != nil {
		eapuo.SetDeputationOfficePincode(*s)
	}
	return eapuo
}

// ClearDeputationOfficePincode clears the value of the "DeputationOfficePincode" field.
func (eapuo *ExamApplicationsPSUpdateOne) ClearDeputationOfficePincode() *ExamApplicationsPSUpdateOne {
	eapuo.mutation.ClearDeputationOfficePincode()
	return eapuo
}

// SetRecommendedStatus sets the "RecommendedStatus" field.
func (eapuo *ExamApplicationsPSUpdateOne) SetRecommendedStatus(s string) *ExamApplicationsPSUpdateOne {
	eapuo.mutation.SetRecommendedStatus(s)
	return eapuo
}

// SetNillableRecommendedStatus sets the "RecommendedStatus" field if the given value is not nil.
func (eapuo *ExamApplicationsPSUpdateOne) SetNillableRecommendedStatus(s *string) *ExamApplicationsPSUpdateOne {
	if s != nil {
		eapuo.SetRecommendedStatus(*s)
	}
	return eapuo
}

// ClearRecommendedStatus clears the value of the "RecommendedStatus" field.
func (eapuo *ExamApplicationsPSUpdateOne) ClearRecommendedStatus() *ExamApplicationsPSUpdateOne {
	eapuo.mutation.ClearRecommendedStatus()
	return eapuo
}

// SetUpdatedAt sets the "UpdatedAt" field.
func (eapuo *ExamApplicationsPSUpdateOne) SetUpdatedAt(t time.Time) *ExamApplicationsPSUpdateOne {
	eapuo.mutation.SetUpdatedAt(t)
	return eapuo
}

// SetNillableUpdatedAt sets the "UpdatedAt" field if the given value is not nil.
func (eapuo *ExamApplicationsPSUpdateOne) SetNillableUpdatedAt(t *time.Time) *ExamApplicationsPSUpdateOne {
	if t != nil {
		eapuo.SetUpdatedAt(*t)
	}
	return eapuo
}

// ClearUpdatedAt clears the value of the "UpdatedAt" field.
func (eapuo *ExamApplicationsPSUpdateOne) ClearUpdatedAt() *ExamApplicationsPSUpdateOne {
	eapuo.mutation.ClearUpdatedAt()
	return eapuo
}

// SetUpdatedBy sets the "UpdatedBy" field.
func (eapuo *ExamApplicationsPSUpdateOne) SetUpdatedBy(s string) *ExamApplicationsPSUpdateOne {
	eapuo.mutation.SetUpdatedBy(s)
	return eapuo
}

// SetNillableUpdatedBy sets the "UpdatedBy" field if the given value is not nil.
func (eapuo *ExamApplicationsPSUpdateOne) SetNillableUpdatedBy(s *string) *ExamApplicationsPSUpdateOne {
	if s != nil {
		eapuo.SetUpdatedBy(*s)
	}
	return eapuo
}

// ClearUpdatedBy clears the value of the "UpdatedBy" field.
func (eapuo *ExamApplicationsPSUpdateOne) ClearUpdatedBy() *ExamApplicationsPSUpdateOne {
	eapuo.mutation.ClearUpdatedBy()
	return eapuo
}

// SetApplicationWdlDate sets the "ApplicationWdlDate" field.
func (eapuo *ExamApplicationsPSUpdateOne) SetApplicationWdlDate(t time.Time) *ExamApplicationsPSUpdateOne {
	eapuo.mutation.SetApplicationWdlDate(t)
	return eapuo
}

// SetNillableApplicationWdlDate sets the "ApplicationWdlDate" field if the given value is not nil.
func (eapuo *ExamApplicationsPSUpdateOne) SetNillableApplicationWdlDate(t *time.Time) *ExamApplicationsPSUpdateOne {
	if t != nil {
		eapuo.SetApplicationWdlDate(*t)
	}
	return eapuo
}

// ClearApplicationWdlDate clears the value of the "ApplicationWdlDate" field.
func (eapuo *ExamApplicationsPSUpdateOne) ClearApplicationWdlDate() *ExamApplicationsPSUpdateOne {
	eapuo.mutation.ClearApplicationWdlDate()
	return eapuo
}

// SetExamCenterHall sets the "ExamCenterHall" field.
func (eapuo *ExamApplicationsPSUpdateOne) SetExamCenterHall(i int32) *ExamApplicationsPSUpdateOne {
	eapuo.mutation.ResetExamCenterHall()
	eapuo.mutation.SetExamCenterHall(i)
	return eapuo
}

// SetNillableExamCenterHall sets the "ExamCenterHall" field if the given value is not nil.
func (eapuo *ExamApplicationsPSUpdateOne) SetNillableExamCenterHall(i *int32) *ExamApplicationsPSUpdateOne {
	if i != nil {
		eapuo.SetExamCenterHall(*i)
	}
	return eapuo
}

// AddExamCenterHall adds i to the "ExamCenterHall" field.
func (eapuo *ExamApplicationsPSUpdateOne) AddExamCenterHall(i int32) *ExamApplicationsPSUpdateOne {
	eapuo.mutation.AddExamCenterHall(i)
	return eapuo
}

// ClearExamCenterHall clears the value of the "ExamCenterHall" field.
func (eapuo *ExamApplicationsPSUpdateOne) ClearExamCenterHall() *ExamApplicationsPSUpdateOne {
	eapuo.mutation.ClearExamCenterHall()
	return eapuo
}

// SetHallName sets the "HallName" field.
func (eapuo *ExamApplicationsPSUpdateOne) SetHallName(s string) *ExamApplicationsPSUpdateOne {
	eapuo.mutation.SetHallName(s)
	return eapuo
}

// SetNillableHallName sets the "HallName" field if the given value is not nil.
func (eapuo *ExamApplicationsPSUpdateOne) SetNillableHallName(s *string) *ExamApplicationsPSUpdateOne {
	if s != nil {
		eapuo.SetHallName(*s)
	}
	return eapuo
}

// ClearHallName clears the value of the "HallName" field.
func (eapuo *ExamApplicationsPSUpdateOne) ClearHallName() *ExamApplicationsPSUpdateOne {
	eapuo.mutation.ClearHallName()
	return eapuo
}

// SetReportingOfficeID sets the "ReportingOfficeID" field.
func (eapuo *ExamApplicationsPSUpdateOne) SetReportingOfficeID(s string) *ExamApplicationsPSUpdateOne {
	eapuo.mutation.SetReportingOfficeID(s)
	return eapuo
}

// SetNillableReportingOfficeID sets the "ReportingOfficeID" field if the given value is not nil.
func (eapuo *ExamApplicationsPSUpdateOne) SetNillableReportingOfficeID(s *string) *ExamApplicationsPSUpdateOne {
	if s != nil {
		eapuo.SetReportingOfficeID(*s)
	}
	return eapuo
}

// ClearReportingOfficeID clears the value of the "ReportingOfficeID" field.
func (eapuo *ExamApplicationsPSUpdateOne) ClearReportingOfficeID() *ExamApplicationsPSUpdateOne {
	eapuo.mutation.ClearReportingOfficeID()
	return eapuo
}

// AddUsersPSRefIDs adds the "UsersPSRef" edge to the UserMaster entity by IDs.
func (eapuo *ExamApplicationsPSUpdateOne) AddUsersPSRefIDs(ids ...int64) *ExamApplicationsPSUpdateOne {
	eapuo.mutation.AddUsersPSRefIDs(ids...)
	return eapuo
}

// AddUsersPSRef adds the "UsersPSRef" edges to the UserMaster entity.
func (eapuo *ExamApplicationsPSUpdateOne) AddUsersPSRef(u ...*UserMaster) *ExamApplicationsPSUpdateOne {
	ids := make([]int64, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return eapuo.AddUsersPSRefIDs(ids...)
}

// AddCadrePrefPSRefIDs adds the "CadrePrefPS_Ref" edge to the Cadre_Choice_PS entity by IDs.
func (eapuo *ExamApplicationsPSUpdateOne) AddCadrePrefPSRefIDs(ids ...int32) *ExamApplicationsPSUpdateOne {
	eapuo.mutation.AddCadrePrefPSRefIDs(ids...)
	return eapuo
}

// AddCadrePrefPSRef adds the "CadrePrefPS_Ref" edges to the Cadre_Choice_PS entity.
func (eapuo *ExamApplicationsPSUpdateOne) AddCadrePrefPSRef(c ...*Cadre_Choice_PS) *ExamApplicationsPSUpdateOne {
	ids := make([]int32, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return eapuo.AddCadrePrefPSRefIDs(ids...)
}

// AddCirclePrefRefPSIDs adds the "CirclePrefRefPS" edge to the PlaceOfPreferencePS entity by IDs.
func (eapuo *ExamApplicationsPSUpdateOne) AddCirclePrefRefPSIDs(ids ...int32) *ExamApplicationsPSUpdateOne {
	eapuo.mutation.AddCirclePrefRefPSIDs(ids...)
	return eapuo
}

// AddCirclePrefRefPS adds the "CirclePrefRefPS" edges to the PlaceOfPreferencePS entity.
func (eapuo *ExamApplicationsPSUpdateOne) AddCirclePrefRefPS(p ...*PlaceOfPreferencePS) *ExamApplicationsPSUpdateOne {
	ids := make([]int32, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return eapuo.AddCirclePrefRefPSIDs(ids...)
}

// AddPSApplicationsRefIDs adds the "PSApplicationsRef" edge to the RecommendationsPSApplications entity by IDs.
func (eapuo *ExamApplicationsPSUpdateOne) AddPSApplicationsRefIDs(ids ...int64) *ExamApplicationsPSUpdateOne {
	eapuo.mutation.AddPSApplicationsRefIDs(ids...)
	return eapuo
}

// AddPSApplicationsRef adds the "PSApplicationsRef" edges to the RecommendationsPSApplications entity.
func (eapuo *ExamApplicationsPSUpdateOne) AddPSApplicationsRef(r ...*RecommendationsPSApplications) *ExamApplicationsPSUpdateOne {
	ids := make([]int64, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return eapuo.AddPSApplicationsRefIDs(ids...)
}

// SetExamsPSID sets the "ExamsPS" edge to the Exam entity by ID.
func (eapuo *ExamApplicationsPSUpdateOne) SetExamsPSID(id int32) *ExamApplicationsPSUpdateOne {
	eapuo.mutation.SetExamsPSID(id)
	return eapuo
}

// SetNillableExamsPSID sets the "ExamsPS" edge to the Exam entity by ID if the given value is not nil.
func (eapuo *ExamApplicationsPSUpdateOne) SetNillableExamsPSID(id *int32) *ExamApplicationsPSUpdateOne {
	if id != nil {
		eapuo = eapuo.SetExamsPSID(*id)
	}
	return eapuo
}

// SetExamsPS sets the "ExamsPS" edge to the Exam entity.
func (eapuo *ExamApplicationsPSUpdateOne) SetExamsPS(e *Exam) *ExamApplicationsPSUpdateOne {
	return eapuo.SetExamsPSID(e.ID)
}

// SetRoleusersID sets the "roleusers" edge to the RoleMaster entity by ID.
func (eapuo *ExamApplicationsPSUpdateOne) SetRoleusersID(id int32) *ExamApplicationsPSUpdateOne {
	eapuo.mutation.SetRoleusersID(id)
	return eapuo
}

// SetNillableRoleusersID sets the "roleusers" edge to the RoleMaster entity by ID if the given value is not nil.
func (eapuo *ExamApplicationsPSUpdateOne) SetNillableRoleusersID(id *int32) *ExamApplicationsPSUpdateOne {
	if id != nil {
		eapuo = eapuo.SetRoleusersID(*id)
	}
	return eapuo
}

// SetRoleusers sets the "roleusers" edge to the RoleMaster entity.
func (eapuo *ExamApplicationsPSUpdateOne) SetRoleusers(r *RoleMaster) *ExamApplicationsPSUpdateOne {
	return eapuo.SetRoleusersID(r.ID)
}

// SetExamcitycenterID sets the "examcitycenter" edge to the ExamCityCenter entity by ID.
func (eapuo *ExamApplicationsPSUpdateOne) SetExamcitycenterID(id int32) *ExamApplicationsPSUpdateOne {
	eapuo.mutation.SetExamcitycenterID(id)
	return eapuo
}

// SetNillableExamcitycenterID sets the "examcitycenter" edge to the ExamCityCenter entity by ID if the given value is not nil.
func (eapuo *ExamApplicationsPSUpdateOne) SetNillableExamcitycenterID(id *int32) *ExamApplicationsPSUpdateOne {
	if id != nil {
		eapuo = eapuo.SetExamcitycenterID(*id)
	}
	return eapuo
}

// SetExamcitycenter sets the "examcitycenter" edge to the ExamCityCenter entity.
func (eapuo *ExamApplicationsPSUpdateOne) SetExamcitycenter(e *ExamCityCenter) *ExamApplicationsPSUpdateOne {
	return eapuo.SetExamcitycenterID(e.ID)
}

// SetPSExamCentresID sets the "PSExamCentres" edge to the Center entity by ID.
func (eapuo *ExamApplicationsPSUpdateOne) SetPSExamCentresID(id int32) *ExamApplicationsPSUpdateOne {
	eapuo.mutation.SetPSExamCentresID(id)
	return eapuo
}

// SetNillablePSExamCentresID sets the "PSExamCentres" edge to the Center entity by ID if the given value is not nil.
func (eapuo *ExamApplicationsPSUpdateOne) SetNillablePSExamCentresID(id *int32) *ExamApplicationsPSUpdateOne {
	if id != nil {
		eapuo = eapuo.SetPSExamCentresID(*id)
	}
	return eapuo
}

// SetPSExamCentres sets the "PSExamCentres" edge to the Center entity.
func (eapuo *ExamApplicationsPSUpdateOne) SetPSExamCentres(c *Center) *ExamApplicationsPSUpdateOne {
	return eapuo.SetPSExamCentresID(c.ID)
}

// SetCircleRefsID sets the "CircleRefs" edge to the CircleSummaryForNO entity by ID.
func (eapuo *ExamApplicationsPSUpdateOne) SetCircleRefsID(id int32) *ExamApplicationsPSUpdateOne {
	eapuo.mutation.SetCircleRefsID(id)
	return eapuo
}

// SetNillableCircleRefsID sets the "CircleRefs" edge to the CircleSummaryForNO entity by ID if the given value is not nil.
func (eapuo *ExamApplicationsPSUpdateOne) SetNillableCircleRefsID(id *int32) *ExamApplicationsPSUpdateOne {
	if id != nil {
		eapuo = eapuo.SetCircleRefsID(*id)
	}
	return eapuo
}

// SetCircleRefs sets the "CircleRefs" edge to the CircleSummaryForNO entity.
func (eapuo *ExamApplicationsPSUpdateOne) SetCircleRefs(c *CircleSummaryForNO) *ExamApplicationsPSUpdateOne {
	return eapuo.SetCircleRefsID(c.ID)
}

// AddLogDatumIDs adds the "LogData" edge to the Logs entity by IDs.
func (eapuo *ExamApplicationsPSUpdateOne) AddLogDatumIDs(ids ...int64) *ExamApplicationsPSUpdateOne {
	eapuo.mutation.AddLogDatumIDs(ids...)
	return eapuo
}

// AddLogData adds the "LogData" edges to the Logs entity.
func (eapuo *ExamApplicationsPSUpdateOne) AddLogData(l ...*Logs) *ExamApplicationsPSUpdateOne {
	ids := make([]int64, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return eapuo.AddLogDatumIDs(ids...)
}

// Mutation returns the ExamApplicationsPSMutation object of the builder.
func (eapuo *ExamApplicationsPSUpdateOne) Mutation() *ExamApplicationsPSMutation {
	return eapuo.mutation
}

// ClearUsersPSRef clears all "UsersPSRef" edges to the UserMaster entity.
func (eapuo *ExamApplicationsPSUpdateOne) ClearUsersPSRef() *ExamApplicationsPSUpdateOne {
	eapuo.mutation.ClearUsersPSRef()
	return eapuo
}

// RemoveUsersPSRefIDs removes the "UsersPSRef" edge to UserMaster entities by IDs.
func (eapuo *ExamApplicationsPSUpdateOne) RemoveUsersPSRefIDs(ids ...int64) *ExamApplicationsPSUpdateOne {
	eapuo.mutation.RemoveUsersPSRefIDs(ids...)
	return eapuo
}

// RemoveUsersPSRef removes "UsersPSRef" edges to UserMaster entities.
func (eapuo *ExamApplicationsPSUpdateOne) RemoveUsersPSRef(u ...*UserMaster) *ExamApplicationsPSUpdateOne {
	ids := make([]int64, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return eapuo.RemoveUsersPSRefIDs(ids...)
}

// ClearCadrePrefPSRef clears all "CadrePrefPS_Ref" edges to the Cadre_Choice_PS entity.
func (eapuo *ExamApplicationsPSUpdateOne) ClearCadrePrefPSRef() *ExamApplicationsPSUpdateOne {
	eapuo.mutation.ClearCadrePrefPSRef()
	return eapuo
}

// RemoveCadrePrefPSRefIDs removes the "CadrePrefPS_Ref" edge to Cadre_Choice_PS entities by IDs.
func (eapuo *ExamApplicationsPSUpdateOne) RemoveCadrePrefPSRefIDs(ids ...int32) *ExamApplicationsPSUpdateOne {
	eapuo.mutation.RemoveCadrePrefPSRefIDs(ids...)
	return eapuo
}

// RemoveCadrePrefPSRef removes "CadrePrefPS_Ref" edges to Cadre_Choice_PS entities.
func (eapuo *ExamApplicationsPSUpdateOne) RemoveCadrePrefPSRef(c ...*Cadre_Choice_PS) *ExamApplicationsPSUpdateOne {
	ids := make([]int32, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return eapuo.RemoveCadrePrefPSRefIDs(ids...)
}

// ClearCirclePrefRefPS clears all "CirclePrefRefPS" edges to the PlaceOfPreferencePS entity.
func (eapuo *ExamApplicationsPSUpdateOne) ClearCirclePrefRefPS() *ExamApplicationsPSUpdateOne {
	eapuo.mutation.ClearCirclePrefRefPS()
	return eapuo
}

// RemoveCirclePrefRefPSIDs removes the "CirclePrefRefPS" edge to PlaceOfPreferencePS entities by IDs.
func (eapuo *ExamApplicationsPSUpdateOne) RemoveCirclePrefRefPSIDs(ids ...int32) *ExamApplicationsPSUpdateOne {
	eapuo.mutation.RemoveCirclePrefRefPSIDs(ids...)
	return eapuo
}

// RemoveCirclePrefRefPS removes "CirclePrefRefPS" edges to PlaceOfPreferencePS entities.
func (eapuo *ExamApplicationsPSUpdateOne) RemoveCirclePrefRefPS(p ...*PlaceOfPreferencePS) *ExamApplicationsPSUpdateOne {
	ids := make([]int32, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return eapuo.RemoveCirclePrefRefPSIDs(ids...)
}

// ClearPSApplicationsRef clears all "PSApplicationsRef" edges to the RecommendationsPSApplications entity.
func (eapuo *ExamApplicationsPSUpdateOne) ClearPSApplicationsRef() *ExamApplicationsPSUpdateOne {
	eapuo.mutation.ClearPSApplicationsRef()
	return eapuo
}

// RemovePSApplicationsRefIDs removes the "PSApplicationsRef" edge to RecommendationsPSApplications entities by IDs.
func (eapuo *ExamApplicationsPSUpdateOne) RemovePSApplicationsRefIDs(ids ...int64) *ExamApplicationsPSUpdateOne {
	eapuo.mutation.RemovePSApplicationsRefIDs(ids...)
	return eapuo
}

// RemovePSApplicationsRef removes "PSApplicationsRef" edges to RecommendationsPSApplications entities.
func (eapuo *ExamApplicationsPSUpdateOne) RemovePSApplicationsRef(r ...*RecommendationsPSApplications) *ExamApplicationsPSUpdateOne {
	ids := make([]int64, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return eapuo.RemovePSApplicationsRefIDs(ids...)
}

// ClearExamsPS clears the "ExamsPS" edge to the Exam entity.
func (eapuo *ExamApplicationsPSUpdateOne) ClearExamsPS() *ExamApplicationsPSUpdateOne {
	eapuo.mutation.ClearExamsPS()
	return eapuo
}

// ClearRoleusers clears the "roleusers" edge to the RoleMaster entity.
func (eapuo *ExamApplicationsPSUpdateOne) ClearRoleusers() *ExamApplicationsPSUpdateOne {
	eapuo.mutation.ClearRoleusers()
	return eapuo
}

// ClearExamcitycenter clears the "examcitycenter" edge to the ExamCityCenter entity.
func (eapuo *ExamApplicationsPSUpdateOne) ClearExamcitycenter() *ExamApplicationsPSUpdateOne {
	eapuo.mutation.ClearExamcitycenter()
	return eapuo
}

// ClearPSExamCentres clears the "PSExamCentres" edge to the Center entity.
func (eapuo *ExamApplicationsPSUpdateOne) ClearPSExamCentres() *ExamApplicationsPSUpdateOne {
	eapuo.mutation.ClearPSExamCentres()
	return eapuo
}

// ClearCircleRefs clears the "CircleRefs" edge to the CircleSummaryForNO entity.
func (eapuo *ExamApplicationsPSUpdateOne) ClearCircleRefs() *ExamApplicationsPSUpdateOne {
	eapuo.mutation.ClearCircleRefs()
	return eapuo
}

// ClearLogData clears all "LogData" edges to the Logs entity.
func (eapuo *ExamApplicationsPSUpdateOne) ClearLogData() *ExamApplicationsPSUpdateOne {
	eapuo.mutation.ClearLogData()
	return eapuo
}

// RemoveLogDatumIDs removes the "LogData" edge to Logs entities by IDs.
func (eapuo *ExamApplicationsPSUpdateOne) RemoveLogDatumIDs(ids ...int64) *ExamApplicationsPSUpdateOne {
	eapuo.mutation.RemoveLogDatumIDs(ids...)
	return eapuo
}

// RemoveLogData removes "LogData" edges to Logs entities.
func (eapuo *ExamApplicationsPSUpdateOne) RemoveLogData(l ...*Logs) *ExamApplicationsPSUpdateOne {
	ids := make([]int64, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return eapuo.RemoveLogDatumIDs(ids...)
}

// Where appends a list predicates to the ExamApplicationsPSUpdate builder.
func (eapuo *ExamApplicationsPSUpdateOne) Where(ps ...predicate.Exam_Applications_PS) *ExamApplicationsPSUpdateOne {
	eapuo.mutation.Where(ps...)
	return eapuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (eapuo *ExamApplicationsPSUpdateOne) Select(field string, fields ...string) *ExamApplicationsPSUpdateOne {
	eapuo.fields = append([]string{field}, fields...)
	return eapuo
}

// Save executes the query and returns the updated Exam_Applications_PS entity.
func (eapuo *ExamApplicationsPSUpdateOne) Save(ctx context.Context) (*Exam_Applications_PS, error) {
	return withHooks(ctx, eapuo.sqlSave, eapuo.mutation, eapuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (eapuo *ExamApplicationsPSUpdateOne) SaveX(ctx context.Context) *Exam_Applications_PS {
	node, err := eapuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (eapuo *ExamApplicationsPSUpdateOne) Exec(ctx context.Context) error {
	_, err := eapuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eapuo *ExamApplicationsPSUpdateOne) ExecX(ctx context.Context) {
	if err := eapuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (eapuo *ExamApplicationsPSUpdateOne) sqlSave(ctx context.Context) (_node *Exam_Applications_PS, err error) {
	_spec := sqlgraph.NewUpdateSpec(exam_applications_ps.Table, exam_applications_ps.Columns, sqlgraph.NewFieldSpec(exam_applications_ps.FieldID, field.TypeInt64))
	id, ok := eapuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Exam_Applications_PS.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := eapuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, exam_applications_ps.FieldID)
		for _, f := range fields {
			if !exam_applications_ps.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != exam_applications_ps.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := eapuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eapuo.mutation.ApplicationNumber(); ok {
		_spec.SetField(exam_applications_ps.FieldApplicationNumber, field.TypeString, value)
	}
	if eapuo.mutation.ApplicationNumberCleared() {
		_spec.ClearField(exam_applications_ps.FieldApplicationNumber, field.TypeString)
	}
	if value, ok := eapuo.mutation.ApplnSubmittedDate(); ok {
		_spec.SetField(exam_applications_ps.FieldApplnSubmittedDate, field.TypeTime, value)
	}
	if eapuo.mutation.ApplnSubmittedDateCleared() {
		_spec.ClearField(exam_applications_ps.FieldApplnSubmittedDate, field.TypeTime)
	}
	if value, ok := eapuo.mutation.ExamShortName(); ok {
		_spec.SetField(exam_applications_ps.FieldExamShortName, field.TypeString, value)
	}
	if eapuo.mutation.ExamShortNameCleared() {
		_spec.ClearField(exam_applications_ps.FieldExamShortName, field.TypeString)
	}
	if value, ok := eapuo.mutation.ExamName(); ok {
		_spec.SetField(exam_applications_ps.FieldExamName, field.TypeString, value)
	}
	if eapuo.mutation.ExamNameCleared() {
		_spec.ClearField(exam_applications_ps.FieldExamName, field.TypeString)
	}
	if value, ok := eapuo.mutation.SmsExamShortName(); ok {
		_spec.SetField(exam_applications_ps.FieldSmsExamShortName, field.TypeString, value)
	}
	if eapuo.mutation.SmsExamShortNameCleared() {
		_spec.ClearField(exam_applications_ps.FieldSmsExamShortName, field.TypeString)
	}
	if value, ok := eapuo.mutation.ExamYear(); ok {
		_spec.SetField(exam_applications_ps.FieldExamYear, field.TypeString, value)
	}
	if eapuo.mutation.ExamYearCleared() {
		_spec.ClearField(exam_applications_ps.FieldExamYear, field.TypeString)
	}
	if value, ok := eapuo.mutation.UserID(); ok {
		_spec.SetField(exam_applications_ps.FieldUserID, field.TypeInt32, value)
	}
	if value, ok := eapuo.mutation.AddedUserID(); ok {
		_spec.AddField(exam_applications_ps.FieldUserID, field.TypeInt32, value)
	}
	if eapuo.mutation.UserIDCleared() {
		_spec.ClearField(exam_applications_ps.FieldUserID, field.TypeInt32)
	}
	if value, ok := eapuo.mutation.EmployeeID(); ok {
		_spec.SetField(exam_applications_ps.FieldEmployeeID, field.TypeInt64, value)
	}
	if value, ok := eapuo.mutation.AddedEmployeeID(); ok {
		_spec.AddField(exam_applications_ps.FieldEmployeeID, field.TypeInt64, value)
	}
	if eapuo.mutation.EmployeeIDCleared() {
		_spec.ClearField(exam_applications_ps.FieldEmployeeID, field.TypeInt64)
	}
	if value, ok := eapuo.mutation.EmployeeName(); ok {
		_spec.SetField(exam_applications_ps.FieldEmployeeName, field.TypeString, value)
	}
	if eapuo.mutation.EmployeeNameCleared() {
		_spec.ClearField(exam_applications_ps.FieldEmployeeName, field.TypeString)
	}
	if value, ok := eapuo.mutation.DOB(); ok {
		_spec.SetField(exam_applications_ps.FieldDOB, field.TypeString, value)
	}
	if eapuo.mutation.DOBCleared() {
		_spec.ClearField(exam_applications_ps.FieldDOB, field.TypeString)
	}
	if value, ok := eapuo.mutation.Gender(); ok {
		_spec.SetField(exam_applications_ps.FieldGender, field.TypeString, value)
	}
	if eapuo.mutation.GenderCleared() {
		_spec.ClearField(exam_applications_ps.FieldGender, field.TypeString)
	}
	if value, ok := eapuo.mutation.MobileNumber(); ok {
		_spec.SetField(exam_applications_ps.FieldMobileNumber, field.TypeString, value)
	}
	if eapuo.mutation.MobileNumberCleared() {
		_spec.ClearField(exam_applications_ps.FieldMobileNumber, field.TypeString)
	}
	if value, ok := eapuo.mutation.EmailID(); ok {
		_spec.SetField(exam_applications_ps.FieldEmailID, field.TypeString, value)
	}
	if eapuo.mutation.EmailIDCleared() {
		_spec.ClearField(exam_applications_ps.FieldEmailID, field.TypeString)
	}
	if value, ok := eapuo.mutation.CategoryCode(); ok {
		_spec.SetField(exam_applications_ps.FieldCategoryCode, field.TypeString, value)
	}
	if eapuo.mutation.CategoryCodeCleared() {
		_spec.ClearField(exam_applications_ps.FieldCategoryCode, field.TypeString)
	}
	if value, ok := eapuo.mutation.CategoryDescription(); ok {
		_spec.SetField(exam_applications_ps.FieldCategoryDescription, field.TypeString, value)
	}
	if eapuo.mutation.CategoryDescriptionCleared() {
		_spec.ClearField(exam_applications_ps.FieldCategoryDescription, field.TypeString)
	}
	if value, ok := eapuo.mutation.DisabilityTypeID(); ok {
		_spec.SetField(exam_applications_ps.FieldDisabilityTypeID, field.TypeString, value)
	}
	if eapuo.mutation.DisabilityTypeIDCleared() {
		_spec.ClearField(exam_applications_ps.FieldDisabilityTypeID, field.TypeString)
	}
	if value, ok := eapuo.mutation.DisabilityTypeCode(); ok {
		_spec.SetField(exam_applications_ps.FieldDisabilityTypeCode, field.TypeString, value)
	}
	if eapuo.mutation.DisabilityTypeCodeCleared() {
		_spec.ClearField(exam_applications_ps.FieldDisabilityTypeCode, field.TypeString)
	}
	if value, ok := eapuo.mutation.DisabilityTypeDescription(); ok {
		_spec.SetField(exam_applications_ps.FieldDisabilityTypeDescription, field.TypeString, value)
	}
	if eapuo.mutation.DisabilityTypeDescriptionCleared() {
		_spec.ClearField(exam_applications_ps.FieldDisabilityTypeDescription, field.TypeString)
	}
	if value, ok := eapuo.mutation.DisabilityPercentage(); ok {
		_spec.SetField(exam_applications_ps.FieldDisabilityPercentage, field.TypeInt32, value)
	}
	if value, ok := eapuo.mutation.AddedDisabilityPercentage(); ok {
		_spec.AddField(exam_applications_ps.FieldDisabilityPercentage, field.TypeInt32, value)
	}
	if eapuo.mutation.DisabilityPercentageCleared() {
		_spec.ClearField(exam_applications_ps.FieldDisabilityPercentage, field.TypeInt32)
	}
	if value, ok := eapuo.mutation.DCCS(); ok {
		_spec.SetField(exam_applications_ps.FieldDCCS, field.TypeString, value)
	}
	if eapuo.mutation.DCCSCleared() {
		_spec.ClearField(exam_applications_ps.FieldDCCS, field.TypeString)
	}
	if value, ok := eapuo.mutation.EntryPostCode(); ok {
		_spec.SetField(exam_applications_ps.FieldEntryPostCode, field.TypeString, value)
	}
	if eapuo.mutation.EntryPostCodeCleared() {
		_spec.ClearField(exam_applications_ps.FieldEntryPostCode, field.TypeString)
	}
	if value, ok := eapuo.mutation.EntryPostDescription(); ok {
		_spec.SetField(exam_applications_ps.FieldEntryPostDescription, field.TypeString, value)
	}
	if eapuo.mutation.EntryPostDescriptionCleared() {
		_spec.ClearField(exam_applications_ps.FieldEntryPostDescription, field.TypeString)
	}
	if value, ok := eapuo.mutation.PresentPostCode(); ok {
		_spec.SetField(exam_applications_ps.FieldPresentPostCode, field.TypeString, value)
	}
	if eapuo.mutation.PresentPostCodeCleared() {
		_spec.ClearField(exam_applications_ps.FieldPresentPostCode, field.TypeString)
	}
	if value, ok := eapuo.mutation.PresentPostDescription(); ok {
		_spec.SetField(exam_applications_ps.FieldPresentPostDescription, field.TypeString, value)
	}
	if eapuo.mutation.PresentPostDescriptionCleared() {
		_spec.ClearField(exam_applications_ps.FieldPresentPostDescription, field.TypeString)
	}
	if value, ok := eapuo.mutation.FeederPostCode(); ok {
		_spec.SetField(exam_applications_ps.FieldFeederPostCode, field.TypeString, value)
	}
	if eapuo.mutation.FeederPostCodeCleared() {
		_spec.ClearField(exam_applications_ps.FieldFeederPostCode, field.TypeString)
	}
	if value, ok := eapuo.mutation.FeederPostDescription(); ok {
		_spec.SetField(exam_applications_ps.FieldFeederPostDescription, field.TypeString, value)
	}
	if eapuo.mutation.FeederPostDescriptionCleared() {
		_spec.ClearField(exam_applications_ps.FieldFeederPostDescription, field.TypeString)
	}
	if value, ok := eapuo.mutation.FeederPostJoiningDate(); ok {
		_spec.SetField(exam_applications_ps.FieldFeederPostJoiningDate, field.TypeString, value)
	}
	if eapuo.mutation.FeederPostJoiningDateCleared() {
		_spec.ClearField(exam_applications_ps.FieldFeederPostJoiningDate, field.TypeString)
	}
	if value, ok := eapuo.mutation.DesignationID(); ok {
		_spec.SetField(exam_applications_ps.FieldDesignationID, field.TypeString, value)
	}
	if eapuo.mutation.DesignationIDCleared() {
		_spec.ClearField(exam_applications_ps.FieldDesignationID, field.TypeString)
	}
	if value, ok := eapuo.mutation.PresentDesignation(); ok {
		_spec.SetField(exam_applications_ps.FieldPresentDesignation, field.TypeString, value)
	}
	if eapuo.mutation.PresentDesignationCleared() {
		_spec.ClearField(exam_applications_ps.FieldPresentDesignation, field.TypeString)
	}
	if value, ok := eapuo.mutation.EducationCode(); ok {
		_spec.SetField(exam_applications_ps.FieldEducationCode, field.TypeString, value)
	}
	if eapuo.mutation.EducationCodeCleared() {
		_spec.ClearField(exam_applications_ps.FieldEducationCode, field.TypeString)
	}
	if value, ok := eapuo.mutation.EducationDescription(); ok {
		_spec.SetField(exam_applications_ps.FieldEducationDescription, field.TypeString, value)
	}
	if eapuo.mutation.EducationDescriptionCleared() {
		_spec.ClearField(exam_applications_ps.FieldEducationDescription, field.TypeString)
	}
	if value, ok := eapuo.mutation.FacilityUniqueID(); ok {
		_spec.SetField(exam_applications_ps.FieldFacilityUniqueID, field.TypeString, value)
	}
	if eapuo.mutation.FacilityUniqueIDCleared() {
		_spec.ClearField(exam_applications_ps.FieldFacilityUniqueID, field.TypeString)
	}
	if value, ok := eapuo.mutation.WorkingOfficePincode(); ok {
		_spec.SetField(exam_applications_ps.FieldWorkingOfficePincode, field.TypeInt32, value)
	}
	if value, ok := eapuo.mutation.AddedWorkingOfficePincode(); ok {
		_spec.AddField(exam_applications_ps.FieldWorkingOfficePincode, field.TypeInt32, value)
	}
	if eapuo.mutation.WorkingOfficePincodeCleared() {
		_spec.ClearField(exam_applications_ps.FieldWorkingOfficePincode, field.TypeInt32)
	}
	if value, ok := eapuo.mutation.WorkingOfficeFacilityID(); ok {
		_spec.SetField(exam_applications_ps.FieldWorkingOfficeFacilityID, field.TypeString, value)
	}
	if eapuo.mutation.WorkingOfficeFacilityIDCleared() {
		_spec.ClearField(exam_applications_ps.FieldWorkingOfficeFacilityID, field.TypeString)
	}
	if value, ok := eapuo.mutation.WorkingOfficeName(); ok {
		_spec.SetField(exam_applications_ps.FieldWorkingOfficeName, field.TypeString, value)
	}
	if eapuo.mutation.WorkingOfficeNameCleared() {
		_spec.ClearField(exam_applications_ps.FieldWorkingOfficeName, field.TypeString)
	}
	if value, ok := eapuo.mutation.WorkingOfficeCircleFacilityID(); ok {
		_spec.SetField(exam_applications_ps.FieldWorkingOfficeCircleFacilityID, field.TypeString, value)
	}
	if eapuo.mutation.WorkingOfficeCircleFacilityIDCleared() {
		_spec.ClearField(exam_applications_ps.FieldWorkingOfficeCircleFacilityID, field.TypeString)
	}
	if value, ok := eapuo.mutation.WorkingOfficeCircleName(); ok {
		_spec.SetField(exam_applications_ps.FieldWorkingOfficeCircleName, field.TypeString, value)
	}
	if eapuo.mutation.WorkingOfficeCircleNameCleared() {
		_spec.ClearField(exam_applications_ps.FieldWorkingOfficeCircleName, field.TypeString)
	}
	if value, ok := eapuo.mutation.WorkingOfficeRegionFacilityID(); ok {
		_spec.SetField(exam_applications_ps.FieldWorkingOfficeRegionFacilityID, field.TypeString, value)
	}
	if eapuo.mutation.WorkingOfficeRegionFacilityIDCleared() {
		_spec.ClearField(exam_applications_ps.FieldWorkingOfficeRegionFacilityID, field.TypeString)
	}
	if value, ok := eapuo.mutation.WorkingOfficeRegionName(); ok {
		_spec.SetField(exam_applications_ps.FieldWorkingOfficeRegionName, field.TypeString, value)
	}
	if eapuo.mutation.WorkingOfficeRegionNameCleared() {
		_spec.ClearField(exam_applications_ps.FieldWorkingOfficeRegionName, field.TypeString)
	}
	if value, ok := eapuo.mutation.WorkingOfficeDivisionFacilityID(); ok {
		_spec.SetField(exam_applications_ps.FieldWorkingOfficeDivisionFacilityID, field.TypeString, value)
	}
	if eapuo.mutation.WorkingOfficeDivisionFacilityIDCleared() {
		_spec.ClearField(exam_applications_ps.FieldWorkingOfficeDivisionFacilityID, field.TypeString)
	}
	if value, ok := eapuo.mutation.WorkingOfficeDivisionName(); ok {
		_spec.SetField(exam_applications_ps.FieldWorkingOfficeDivisionName, field.TypeString, value)
	}
	if eapuo.mutation.WorkingOfficeDivisionNameCleared() {
		_spec.ClearField(exam_applications_ps.FieldWorkingOfficeDivisionName, field.TypeString)
	}
	if value, ok := eapuo.mutation.ReportingOfficeFacilityID(); ok {
		_spec.SetField(exam_applications_ps.FieldReportingOfficeFacilityID, field.TypeString, value)
	}
	if eapuo.mutation.ReportingOfficeFacilityIDCleared() {
		_spec.ClearField(exam_applications_ps.FieldReportingOfficeFacilityID, field.TypeString)
	}
	if value, ok := eapuo.mutation.ReportingOfficeName(); ok {
		_spec.SetField(exam_applications_ps.FieldReportingOfficeName, field.TypeString, value)
	}
	if eapuo.mutation.ReportingOfficeNameCleared() {
		_spec.ClearField(exam_applications_ps.FieldReportingOfficeName, field.TypeString)
	}
	if value, ok := eapuo.mutation.LienControllingOfficeID(); ok {
		_spec.SetField(exam_applications_ps.FieldLienControllingOfficeID, field.TypeString, value)
	}
	if eapuo.mutation.LienControllingOfficeIDCleared() {
		_spec.ClearField(exam_applications_ps.FieldLienControllingOfficeID, field.TypeString)
	}
	if value, ok := eapuo.mutation.LienControllingOfficeName(); ok {
		_spec.SetField(exam_applications_ps.FieldLienControllingOfficeName, field.TypeString, value)
	}
	if eapuo.mutation.LienControllingOfficeNameCleared() {
		_spec.ClearField(exam_applications_ps.FieldLienControllingOfficeName, field.TypeString)
	}
	if value, ok := eapuo.mutation.InDeputation(); ok {
		_spec.SetField(exam_applications_ps.FieldInDeputation, field.TypeString, value)
	}
	if eapuo.mutation.InDeputationCleared() {
		_spec.ClearField(exam_applications_ps.FieldInDeputation, field.TypeString)
	}
	if value, ok := eapuo.mutation.DeputationType(); ok {
		_spec.SetField(exam_applications_ps.FieldDeputationType, field.TypeString, value)
	}
	if eapuo.mutation.DeputationTypeCleared() {
		_spec.ClearField(exam_applications_ps.FieldDeputationType, field.TypeString)
	}
	if value, ok := eapuo.mutation.DeputationOfficeUniqueId(); ok {
		_spec.SetField(exam_applications_ps.FieldDeputationOfficeUniqueId, field.TypeString, value)
	}
	if eapuo.mutation.DeputationOfficeUniqueIdCleared() {
		_spec.ClearField(exam_applications_ps.FieldDeputationOfficeUniqueId, field.TypeString)
	}
	if value, ok := eapuo.mutation.DeputationOfficeFacilityID(); ok {
		_spec.SetField(exam_applications_ps.FieldDeputationOfficeFacilityID, field.TypeString, value)
	}
	if eapuo.mutation.DeputationOfficeFacilityIDCleared() {
		_spec.ClearField(exam_applications_ps.FieldDeputationOfficeFacilityID, field.TypeString)
	}
	if value, ok := eapuo.mutation.DeputationOfficeName(); ok {
		_spec.SetField(exam_applications_ps.FieldDeputationOfficeName, field.TypeString, value)
	}
	if eapuo.mutation.DeputationOfficeNameCleared() {
		_spec.ClearField(exam_applications_ps.FieldDeputationOfficeName, field.TypeString)
	}
	if value, ok := eapuo.mutation.DeputationControllingOfficeID(); ok {
		_spec.SetField(exam_applications_ps.FieldDeputationControllingOfficeID, field.TypeString, value)
	}
	if eapuo.mutation.DeputationControllingOfficeIDCleared() {
		_spec.ClearField(exam_applications_ps.FieldDeputationControllingOfficeID, field.TypeString)
	}
	if value, ok := eapuo.mutation.DeputationControllingOfficeName(); ok {
		_spec.SetField(exam_applications_ps.FieldDeputationControllingOfficeName, field.TypeString, value)
	}
	if eapuo.mutation.DeputationControllingOfficeNameCleared() {
		_spec.ClearField(exam_applications_ps.FieldDeputationControllingOfficeName, field.TypeString)
	}
	if value, ok := eapuo.mutation.ControllingOfficeFacilityID(); ok {
		_spec.SetField(exam_applications_ps.FieldControllingOfficeFacilityID, field.TypeString, value)
	}
	if eapuo.mutation.ControllingOfficeFacilityIDCleared() {
		_spec.ClearField(exam_applications_ps.FieldControllingOfficeFacilityID, field.TypeString)
	}
	if value, ok := eapuo.mutation.ControllingOfficeName(); ok {
		_spec.SetField(exam_applications_ps.FieldControllingOfficeName, field.TypeString, value)
	}
	if eapuo.mutation.ControllingOfficeNameCleared() {
		_spec.ClearField(exam_applications_ps.FieldControllingOfficeName, field.TypeString)
	}
	if value, ok := eapuo.mutation.NodalOfficeFacilityID(); ok {
		_spec.SetField(exam_applications_ps.FieldNodalOfficeFacilityID, field.TypeString, value)
	}
	if eapuo.mutation.NodalOfficeFacilityIDCleared() {
		_spec.ClearField(exam_applications_ps.FieldNodalOfficeFacilityID, field.TypeString)
	}
	if value, ok := eapuo.mutation.NodalOfficeName(); ok {
		_spec.SetField(exam_applications_ps.FieldNodalOfficeName, field.TypeString, value)
	}
	if eapuo.mutation.NodalOfficeNameCleared() {
		_spec.ClearField(exam_applications_ps.FieldNodalOfficeName, field.TypeString)
	}
	if value, ok := eapuo.mutation.CenterFacilityId(); ok {
		_spec.SetField(exam_applications_ps.FieldCenterFacilityId, field.TypeString, value)
	}
	if eapuo.mutation.CenterFacilityIdCleared() {
		_spec.ClearField(exam_applications_ps.FieldCenterFacilityId, field.TypeString)
	}
	if value, ok := eapuo.mutation.CentrePreference(); ok {
		_spec.SetField(exam_applications_ps.FieldCentrePreference, field.TypeString, value)
	}
	if eapuo.mutation.CentrePreferenceCleared() {
		_spec.ClearField(exam_applications_ps.FieldCentrePreference, field.TypeString)
	}
	if value, ok := eapuo.mutation.Signature(); ok {
		_spec.SetField(exam_applications_ps.FieldSignature, field.TypeString, value)
	}
	if eapuo.mutation.SignatureCleared() {
		_spec.ClearField(exam_applications_ps.FieldSignature, field.TypeString)
	}
	if value, ok := eapuo.mutation.Photo(); ok {
		_spec.SetField(exam_applications_ps.FieldPhoto, field.TypeString, value)
	}
	if eapuo.mutation.PhotoCleared() {
		_spec.ClearField(exam_applications_ps.FieldPhoto, field.TypeString)
	}
	if value, ok := eapuo.mutation.SignaturePath(); ok {
		_spec.SetField(exam_applications_ps.FieldSignaturePath, field.TypeString, value)
	}
	if eapuo.mutation.SignaturePathCleared() {
		_spec.ClearField(exam_applications_ps.FieldSignaturePath, field.TypeString)
	}
	if value, ok := eapuo.mutation.PhotoPath(); ok {
		_spec.SetField(exam_applications_ps.FieldPhotoPath, field.TypeString, value)
	}
	if eapuo.mutation.PhotoPathCleared() {
		_spec.ClearField(exam_applications_ps.FieldPhotoPath, field.TypeString)
	}
	if value, ok := eapuo.mutation.TempHallTicket(); ok {
		_spec.SetField(exam_applications_ps.FieldTempHallTicket, field.TypeString, value)
	}
	if eapuo.mutation.TempHallTicketCleared() {
		_spec.ClearField(exam_applications_ps.FieldTempHallTicket, field.TypeString)
	}
	if value, ok := eapuo.mutation.CandidateRemarks(); ok {
		_spec.SetField(exam_applications_ps.FieldCandidateRemarks, field.TypeString, value)
	}
	if eapuo.mutation.CandidateRemarksCleared() {
		_spec.ClearField(exam_applications_ps.FieldCandidateRemarks, field.TypeString)
	}
	if value, ok := eapuo.mutation.VAGeneralRemarks(); ok {
		_spec.SetField(exam_applications_ps.FieldVAGeneralRemarks, field.TypeString, value)
	}
	if eapuo.mutation.VAGeneralRemarksCleared() {
		_spec.ClearField(exam_applications_ps.FieldVAGeneralRemarks, field.TypeString)
	}
	if value, ok := eapuo.mutation.CAGeneralRemarks(); ok {
		_spec.SetField(exam_applications_ps.FieldCAGeneralRemarks, field.TypeString, value)
	}
	if eapuo.mutation.CAGeneralRemarksCleared() {
		_spec.ClearField(exam_applications_ps.FieldCAGeneralRemarks, field.TypeString)
	}
	if value, ok := eapuo.mutation.NAGeneralRemarks(); ok {
		_spec.SetField(exam_applications_ps.FieldNAGeneralRemarks, field.TypeString, value)
	}
	if eapuo.mutation.NAGeneralRemarksCleared() {
		_spec.ClearField(exam_applications_ps.FieldNAGeneralRemarks, field.TypeString)
	}
	if value, ok := eapuo.mutation.ApplicationStatus(); ok {
		_spec.SetField(exam_applications_ps.FieldApplicationStatus, field.TypeString, value)
	}
	if eapuo.mutation.ApplicationStatusCleared() {
		_spec.ClearField(exam_applications_ps.FieldApplicationStatus, field.TypeString)
	}
	if value, ok := eapuo.mutation.Status(); ok {
		_spec.SetField(exam_applications_ps.FieldStatus, field.TypeString, value)
	}
	if eapuo.mutation.StatusCleared() {
		_spec.ClearField(exam_applications_ps.FieldStatus, field.TypeString)
	}
	if value, ok := eapuo.mutation.VAUserId(); ok {
		_spec.SetField(exam_applications_ps.FieldVAUserId, field.TypeInt32, value)
	}
	if value, ok := eapuo.mutation.AddedVAUserId(); ok {
		_spec.AddField(exam_applications_ps.FieldVAUserId, field.TypeInt32, value)
	}
	if eapuo.mutation.VAUserIdCleared() {
		_spec.ClearField(exam_applications_ps.FieldVAUserId, field.TypeInt32)
	}
	if value, ok := eapuo.mutation.VAUserName(); ok {
		_spec.SetField(exam_applications_ps.FieldVAUserName, field.TypeString, value)
	}
	if eapuo.mutation.VAUserNameCleared() {
		_spec.ClearField(exam_applications_ps.FieldVAUserName, field.TypeString)
	}
	if value, ok := eapuo.mutation.VAEmployeeID(); ok {
		_spec.SetField(exam_applications_ps.FieldVAEmployeeID, field.TypeString, value)
	}
	if eapuo.mutation.VAEmployeeIDCleared() {
		_spec.ClearField(exam_applications_ps.FieldVAEmployeeID, field.TypeString)
	}
	if value, ok := eapuo.mutation.VAEmployeeDesignation(); ok {
		_spec.SetField(exam_applications_ps.FieldVAEmployeeDesignation, field.TypeString, value)
	}
	if eapuo.mutation.VAEmployeeDesignationCleared() {
		_spec.ClearField(exam_applications_ps.FieldVAEmployeeDesignation, field.TypeString)
	}
	if value, ok := eapuo.mutation.VARemarks(); ok {
		_spec.SetField(exam_applications_ps.FieldVARemarks, field.TypeString, value)
	}
	if eapuo.mutation.VARemarksCleared() {
		_spec.ClearField(exam_applications_ps.FieldVARemarks, field.TypeString)
	}
	if value, ok := eapuo.mutation.VADate(); ok {
		_spec.SetField(exam_applications_ps.FieldVADate, field.TypeTime, value)
	}
	if eapuo.mutation.VADateCleared() {
		_spec.ClearField(exam_applications_ps.FieldVADate, field.TypeTime)
	}
	if value, ok := eapuo.mutation.CAUserId(); ok {
		_spec.SetField(exam_applications_ps.FieldCAUserId, field.TypeInt32, value)
	}
	if value, ok := eapuo.mutation.AddedCAUserId(); ok {
		_spec.AddField(exam_applications_ps.FieldCAUserId, field.TypeInt32, value)
	}
	if eapuo.mutation.CAUserIdCleared() {
		_spec.ClearField(exam_applications_ps.FieldCAUserId, field.TypeInt32)
	}
	if value, ok := eapuo.mutation.CAUserName(); ok {
		_spec.SetField(exam_applications_ps.FieldCAUserName, field.TypeString, value)
	}
	if eapuo.mutation.CAUserNameCleared() {
		_spec.ClearField(exam_applications_ps.FieldCAUserName, field.TypeString)
	}
	if value, ok := eapuo.mutation.CAEmployeeID(); ok {
		_spec.SetField(exam_applications_ps.FieldCAEmployeeID, field.TypeString, value)
	}
	if eapuo.mutation.CAEmployeeIDCleared() {
		_spec.ClearField(exam_applications_ps.FieldCAEmployeeID, field.TypeString)
	}
	if value, ok := eapuo.mutation.CAEmployeeDesignation(); ok {
		_spec.SetField(exam_applications_ps.FieldCAEmployeeDesignation, field.TypeString, value)
	}
	if eapuo.mutation.CAEmployeeDesignationCleared() {
		_spec.ClearField(exam_applications_ps.FieldCAEmployeeDesignation, field.TypeString)
	}
	if value, ok := eapuo.mutation.CARemarks(); ok {
		_spec.SetField(exam_applications_ps.FieldCARemarks, field.TypeString, value)
	}
	if eapuo.mutation.CARemarksCleared() {
		_spec.ClearField(exam_applications_ps.FieldCARemarks, field.TypeString)
	}
	if value, ok := eapuo.mutation.CADate(); ok {
		_spec.SetField(exam_applications_ps.FieldCADate, field.TypeTime, value)
	}
	if eapuo.mutation.CADateCleared() {
		_spec.ClearField(exam_applications_ps.FieldCADate, field.TypeTime)
	}
	if value, ok := eapuo.mutation.NAUserId(); ok {
		_spec.SetField(exam_applications_ps.FieldNAUserId, field.TypeInt32, value)
	}
	if value, ok := eapuo.mutation.AddedNAUserId(); ok {
		_spec.AddField(exam_applications_ps.FieldNAUserId, field.TypeInt32, value)
	}
	if eapuo.mutation.NAUserIdCleared() {
		_spec.ClearField(exam_applications_ps.FieldNAUserId, field.TypeInt32)
	}
	if value, ok := eapuo.mutation.NAUserName(); ok {
		_spec.SetField(exam_applications_ps.FieldNAUserName, field.TypeString, value)
	}
	if eapuo.mutation.NAUserNameCleared() {
		_spec.ClearField(exam_applications_ps.FieldNAUserName, field.TypeString)
	}
	if value, ok := eapuo.mutation.NAEmployeeID(); ok {
		_spec.SetField(exam_applications_ps.FieldNAEmployeeID, field.TypeString, value)
	}
	if eapuo.mutation.NAEmployeeIDCleared() {
		_spec.ClearField(exam_applications_ps.FieldNAEmployeeID, field.TypeString)
	}
	if value, ok := eapuo.mutation.NAEmployeeDesignation(); ok {
		_spec.SetField(exam_applications_ps.FieldNAEmployeeDesignation, field.TypeString, value)
	}
	if eapuo.mutation.NAEmployeeDesignationCleared() {
		_spec.ClearField(exam_applications_ps.FieldNAEmployeeDesignation, field.TypeString)
	}
	if value, ok := eapuo.mutation.NARemarks(); ok {
		_spec.SetField(exam_applications_ps.FieldNARemarks, field.TypeString, value)
	}
	if eapuo.mutation.NARemarksCleared() {
		_spec.ClearField(exam_applications_ps.FieldNARemarks, field.TypeString)
	}
	if value, ok := eapuo.mutation.NADate(); ok {
		_spec.SetField(exam_applications_ps.FieldNADate, field.TypeTime, value)
	}
	if eapuo.mutation.NADateCleared() {
		_spec.ClearField(exam_applications_ps.FieldNADate, field.TypeTime)
	}
	if value, ok := eapuo.mutation.AppliactionRemarks(); ok {
		_spec.SetField(exam_applications_ps.FieldAppliactionRemarks, field.TypeString, value)
	}
	if eapuo.mutation.AppliactionRemarksCleared() {
		_spec.ClearField(exam_applications_ps.FieldAppliactionRemarks, field.TypeString)
	}
	if value, ok := eapuo.mutation.CadrePreferences(); ok {
		_spec.SetField(exam_applications_ps.FieldCadrePreferences, field.TypeJSON, value)
	}
	if value, ok := eapuo.mutation.AppendedCadrePreferences(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, exam_applications_ps.FieldCadrePreferences, value)
		})
	}
	if eapuo.mutation.CadrePreferencesCleared() {
		_spec.ClearField(exam_applications_ps.FieldCadrePreferences, field.TypeJSON)
	}
	if value, ok := eapuo.mutation.CAPreviousRemarks(); ok {
		_spec.SetField(exam_applications_ps.FieldCAPreviousRemarks, field.TypeString, value)
	}
	if eapuo.mutation.CAPreviousRemarksCleared() {
		_spec.ClearField(exam_applications_ps.FieldCAPreviousRemarks, field.TypeString)
	}
	if value, ok := eapuo.mutation.PunishmentStatus(); ok {
		_spec.SetField(exam_applications_ps.FieldPunishmentStatus, field.TypeBool, value)
	}
	if eapuo.mutation.PunishmentStatusCleared() {
		_spec.ClearField(exam_applications_ps.FieldPunishmentStatus, field.TypeBool)
	}
	if value, ok := eapuo.mutation.DisciplinaryCaseStatus(); ok {
		_spec.SetField(exam_applications_ps.FieldDisciplinaryCaseStatus, field.TypeBool, value)
	}
	if eapuo.mutation.DisciplinaryCaseStatusCleared() {
		_spec.ClearField(exam_applications_ps.FieldDisciplinaryCaseStatus, field.TypeBool)
	}
	if value, ok := eapuo.mutation.GenerateHallTicketFlag(); ok {
		_spec.SetField(exam_applications_ps.FieldGenerateHallTicketFlag, field.TypeBool, value)
	}
	if eapuo.mutation.GenerateHallTicketFlagCleared() {
		_spec.ClearField(exam_applications_ps.FieldGenerateHallTicketFlag, field.TypeBool)
	}
	if value, ok := eapuo.mutation.HallTicketNumber(); ok {
		_spec.SetField(exam_applications_ps.FieldHallTicketNumber, field.TypeString, value)
	}
	if eapuo.mutation.HallTicketNumberCleared() {
		_spec.ClearField(exam_applications_ps.FieldHallTicketNumber, field.TypeString)
	}
	if value, ok := eapuo.mutation.HallTicketGeneratedFlag(); ok {
		_spec.SetField(exam_applications_ps.FieldHallTicketGeneratedFlag, field.TypeBool, value)
	}
	if eapuo.mutation.HallTicketGeneratedFlagCleared() {
		_spec.ClearField(exam_applications_ps.FieldHallTicketGeneratedFlag, field.TypeBool)
	}
	if value, ok := eapuo.mutation.GenerateHallTicketFlagByNO(); ok {
		_spec.SetField(exam_applications_ps.FieldGenerateHallTicketFlagByNO, field.TypeBool, value)
	}
	if eapuo.mutation.GenerateHallTicketFlagByNOCleared() {
		_spec.ClearField(exam_applications_ps.FieldGenerateHallTicketFlagByNO, field.TypeBool)
	}
	if value, ok := eapuo.mutation.HallTicketGeneratedDate(); ok {
		_spec.SetField(exam_applications_ps.FieldHallTicketGeneratedDate, field.TypeTime, value)
	}
	if eapuo.mutation.HallTicketGeneratedDateCleared() {
		_spec.ClearField(exam_applications_ps.FieldHallTicketGeneratedDate, field.TypeTime)
	}
	if value, ok := eapuo.mutation.TemporaryHallTicket(); ok {
		_spec.SetField(exam_applications_ps.FieldTemporaryHallTicket, field.TypeString, value)
	}
	if eapuo.mutation.TemporaryHallTicketCleared() {
		_spec.ClearField(exam_applications_ps.FieldTemporaryHallTicket, field.TypeString)
	}
	if value, ok := eapuo.mutation.OptionUsed(); ok {
		_spec.SetField(exam_applications_ps.FieldOptionUsed, field.TypeString, value)
	}
	if eapuo.mutation.OptionUsedCleared() {
		_spec.ClearField(exam_applications_ps.FieldOptionUsed, field.TypeString)
	}
	if value, ok := eapuo.mutation.Remarks(); ok {
		_spec.SetField(exam_applications_ps.FieldRemarks, field.TypeString, value)
	}
	if eapuo.mutation.RemarksCleared() {
		_spec.ClearField(exam_applications_ps.FieldRemarks, field.TypeString)
	}
	if value, ok := eapuo.mutation.Cadre(); ok {
		_spec.SetField(exam_applications_ps.FieldCadre, field.TypeString, value)
	}
	if eapuo.mutation.CadreCleared() {
		_spec.ClearField(exam_applications_ps.FieldCadre, field.TypeString)
	}
	if value, ok := eapuo.mutation.EmployeePost(); ok {
		_spec.SetField(exam_applications_ps.FieldEmployeePost, field.TypeString, value)
	}
	if eapuo.mutation.EmployeePostCleared() {
		_spec.ClearField(exam_applications_ps.FieldEmployeePost, field.TypeString)
	}
	if value, ok := eapuo.mutation.DOJInEligiblePost(); ok {
		_spec.SetField(exam_applications_ps.FieldDOJInEligiblePost, field.TypeString, value)
	}
	if eapuo.mutation.DOJInEligiblePostCleared() {
		_spec.ClearField(exam_applications_ps.FieldDOJInEligiblePost, field.TypeString)
	}
	if value, ok := eapuo.mutation.DivisionPreferences(); ok {
		_spec.SetField(exam_applications_ps.FieldDivisionPreferences, field.TypeJSON, value)
	}
	if value, ok := eapuo.mutation.AppendedDivisionPreferences(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, exam_applications_ps.FieldDivisionPreferences, value)
		})
	}
	if eapuo.mutation.DivisionPreferencesCleared() {
		_spec.ClearField(exam_applications_ps.FieldDivisionPreferences, field.TypeJSON)
	}
	if value, ok := eapuo.mutation.FacilityName(); ok {
		_spec.SetField(exam_applications_ps.FieldFacilityName, field.TypeString, value)
	}
	if eapuo.mutation.FacilityNameCleared() {
		_spec.ClearField(exam_applications_ps.FieldFacilityName, field.TypeString)
	}
	if value, ok := eapuo.mutation.ServiceLength(); ok {
		_spec.SetField(exam_applications_ps.FieldServiceLength, field.TypeJSON, value)
	}
	if value, ok := eapuo.mutation.AppendedServiceLength(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, exam_applications_ps.FieldServiceLength, value)
		})
	}
	if eapuo.mutation.ServiceLengthCleared() {
		_spec.ClearField(exam_applications_ps.FieldServiceLength, field.TypeJSON)
	}
	if value, ok := eapuo.mutation.NonQualifyingService(); ok {
		_spec.SetField(exam_applications_ps.FieldNonQualifyingService, field.TypeJSON, value)
	}
	if value, ok := eapuo.mutation.AppendedNonQualifyingService(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, exam_applications_ps.FieldNonQualifyingService, value)
		})
	}
	if eapuo.mutation.NonQualifyingServiceCleared() {
		_spec.ClearField(exam_applications_ps.FieldNonQualifyingService, field.TypeJSON)
	}
	if value, ok := eapuo.mutation.DCInPresentCadre(); ok {
		_spec.SetField(exam_applications_ps.FieldDCInPresentCadre, field.TypeString, value)
	}
	if eapuo.mutation.DCInPresentCadreCleared() {
		_spec.ClearField(exam_applications_ps.FieldDCInPresentCadre, field.TypeString)
	}
	if value, ok := eapuo.mutation.CenterId(); ok {
		_spec.SetField(exam_applications_ps.FieldCenterId, field.TypeInt32, value)
	}
	if value, ok := eapuo.mutation.AddedCenterId(); ok {
		_spec.AddField(exam_applications_ps.FieldCenterId, field.TypeInt32, value)
	}
	if eapuo.mutation.CenterIdCleared() {
		_spec.ClearField(exam_applications_ps.FieldCenterId, field.TypeInt32)
	}
	if value, ok := eapuo.mutation.ClaimingQualifyingService(); ok {
		_spec.SetField(exam_applications_ps.FieldClaimingQualifyingService, field.TypeString, value)
	}
	if eapuo.mutation.ClaimingQualifyingServiceCleared() {
		_spec.ClearField(exam_applications_ps.FieldClaimingQualifyingService, field.TypeString)
	}
	if value, ok := eapuo.mutation.DeputationOfficePincode(); ok {
		_spec.SetField(exam_applications_ps.FieldDeputationOfficePincode, field.TypeString, value)
	}
	if eapuo.mutation.DeputationOfficePincodeCleared() {
		_spec.ClearField(exam_applications_ps.FieldDeputationOfficePincode, field.TypeString)
	}
	if value, ok := eapuo.mutation.RecommendedStatus(); ok {
		_spec.SetField(exam_applications_ps.FieldRecommendedStatus, field.TypeString, value)
	}
	if eapuo.mutation.RecommendedStatusCleared() {
		_spec.ClearField(exam_applications_ps.FieldRecommendedStatus, field.TypeString)
	}
	if value, ok := eapuo.mutation.UpdatedAt(); ok {
		_spec.SetField(exam_applications_ps.FieldUpdatedAt, field.TypeTime, value)
	}
	if eapuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(exam_applications_ps.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := eapuo.mutation.UpdatedBy(); ok {
		_spec.SetField(exam_applications_ps.FieldUpdatedBy, field.TypeString, value)
	}
	if eapuo.mutation.UpdatedByCleared() {
		_spec.ClearField(exam_applications_ps.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := eapuo.mutation.ApplicationWdlDate(); ok {
		_spec.SetField(exam_applications_ps.FieldApplicationWdlDate, field.TypeTime, value)
	}
	if eapuo.mutation.ApplicationWdlDateCleared() {
		_spec.ClearField(exam_applications_ps.FieldApplicationWdlDate, field.TypeTime)
	}
	if value, ok := eapuo.mutation.ExamCenterHall(); ok {
		_spec.SetField(exam_applications_ps.FieldExamCenterHall, field.TypeInt32, value)
	}
	if value, ok := eapuo.mutation.AddedExamCenterHall(); ok {
		_spec.AddField(exam_applications_ps.FieldExamCenterHall, field.TypeInt32, value)
	}
	if eapuo.mutation.ExamCenterHallCleared() {
		_spec.ClearField(exam_applications_ps.FieldExamCenterHall, field.TypeInt32)
	}
	if value, ok := eapuo.mutation.HallName(); ok {
		_spec.SetField(exam_applications_ps.FieldHallName, field.TypeString, value)
	}
	if eapuo.mutation.HallNameCleared() {
		_spec.ClearField(exam_applications_ps.FieldHallName, field.TypeString)
	}
	if value, ok := eapuo.mutation.ReportingOfficeID(); ok {
		_spec.SetField(exam_applications_ps.FieldReportingOfficeID, field.TypeString, value)
	}
	if eapuo.mutation.ReportingOfficeIDCleared() {
		_spec.ClearField(exam_applications_ps.FieldReportingOfficeID, field.TypeString)
	}
	if eapuo.mutation.UsersPSRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_applications_ps.UsersPSRefTable,
			Columns: []string{exam_applications_ps.UsersPSRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usermaster.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eapuo.mutation.RemovedUsersPSRefIDs(); len(nodes) > 0 && !eapuo.mutation.UsersPSRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_applications_ps.UsersPSRefTable,
			Columns: []string{exam_applications_ps.UsersPSRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usermaster.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eapuo.mutation.UsersPSRefIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_applications_ps.UsersPSRefTable,
			Columns: []string{exam_applications_ps.UsersPSRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usermaster.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eapuo.mutation.CadrePrefPSRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_applications_ps.CadrePrefPSRefTable,
			Columns: []string{exam_applications_ps.CadrePrefPSRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cadre_choice_ps.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eapuo.mutation.RemovedCadrePrefPSRefIDs(); len(nodes) > 0 && !eapuo.mutation.CadrePrefPSRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_applications_ps.CadrePrefPSRefTable,
			Columns: []string{exam_applications_ps.CadrePrefPSRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cadre_choice_ps.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eapuo.mutation.CadrePrefPSRefIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_applications_ps.CadrePrefPSRefTable,
			Columns: []string{exam_applications_ps.CadrePrefPSRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cadre_choice_ps.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eapuo.mutation.CirclePrefRefPSCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_applications_ps.CirclePrefRefPSTable,
			Columns: []string{exam_applications_ps.CirclePrefRefPSColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(placeofpreferenceps.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eapuo.mutation.RemovedCirclePrefRefPSIDs(); len(nodes) > 0 && !eapuo.mutation.CirclePrefRefPSCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_applications_ps.CirclePrefRefPSTable,
			Columns: []string{exam_applications_ps.CirclePrefRefPSColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(placeofpreferenceps.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eapuo.mutation.CirclePrefRefPSIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_applications_ps.CirclePrefRefPSTable,
			Columns: []string{exam_applications_ps.CirclePrefRefPSColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(placeofpreferenceps.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eapuo.mutation.PSApplicationsRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_applications_ps.PSApplicationsRefTable,
			Columns: []string{exam_applications_ps.PSApplicationsRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(recommendationspsapplications.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eapuo.mutation.RemovedPSApplicationsRefIDs(); len(nodes) > 0 && !eapuo.mutation.PSApplicationsRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_applications_ps.PSApplicationsRefTable,
			Columns: []string{exam_applications_ps.PSApplicationsRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(recommendationspsapplications.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eapuo.mutation.PSApplicationsRefIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_applications_ps.PSApplicationsRefTable,
			Columns: []string{exam_applications_ps.PSApplicationsRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(recommendationspsapplications.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eapuo.mutation.ExamsPSCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   exam_applications_ps.ExamsPSTable,
			Columns: []string{exam_applications_ps.ExamsPSColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eapuo.mutation.ExamsPSIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   exam_applications_ps.ExamsPSTable,
			Columns: []string{exam_applications_ps.ExamsPSColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eapuo.mutation.RoleusersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   exam_applications_ps.RoleusersTable,
			Columns: []string{exam_applications_ps.RoleusersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rolemaster.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eapuo.mutation.RoleusersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   exam_applications_ps.RoleusersTable,
			Columns: []string{exam_applications_ps.RoleusersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rolemaster.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eapuo.mutation.ExamcitycenterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   exam_applications_ps.ExamcitycenterTable,
			Columns: []string{exam_applications_ps.ExamcitycenterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(examcitycenter.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eapuo.mutation.ExamcitycenterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   exam_applications_ps.ExamcitycenterTable,
			Columns: []string{exam_applications_ps.ExamcitycenterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(examcitycenter.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eapuo.mutation.PSExamCentresCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   exam_applications_ps.PSExamCentresTable,
			Columns: []string{exam_applications_ps.PSExamCentresColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(center.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eapuo.mutation.PSExamCentresIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   exam_applications_ps.PSExamCentresTable,
			Columns: []string{exam_applications_ps.PSExamCentresColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(center.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eapuo.mutation.CircleRefsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   exam_applications_ps.CircleRefsTable,
			Columns: []string{exam_applications_ps.CircleRefsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(circlesummaryforno.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eapuo.mutation.CircleRefsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   exam_applications_ps.CircleRefsTable,
			Columns: []string{exam_applications_ps.CircleRefsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(circlesummaryforno.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eapuo.mutation.LogDataCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_applications_ps.LogDataTable,
			Columns: []string{exam_applications_ps.LogDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(logs.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eapuo.mutation.RemovedLogDataIDs(); len(nodes) > 0 && !eapuo.mutation.LogDataCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_applications_ps.LogDataTable,
			Columns: []string{exam_applications_ps.LogDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(logs.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eapuo.mutation.LogDataIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_applications_ps.LogDataTable,
			Columns: []string{exam_applications_ps.LogDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(logs.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Exam_Applications_PS{config: eapuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, eapuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{exam_applications_ps.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	eapuo.mutation.done = true
	return _node, nil
}
