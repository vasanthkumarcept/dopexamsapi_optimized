// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"recruit/ent/circlesummaryforno"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// CircleSummaryForNO is the model entity for the CircleSummaryForNO schema.
type CircleSummaryForNO struct {
	config `json:"-"`
	// ID of the ent.
	ID int32 `json:"id,omitempty"`
	// CircleOfficeId holds the value of the "CircleOfficeId" field.
	CircleOfficeId string `json:"CircleOfficeId,omitempty"`
	// CircleOfficeName holds the value of the "CircleOfficeName" field.
	CircleOfficeName string `json:"CircleOfficeName,omitempty"`
	// ApproveHallTicketGenrationIP holds the value of the "ApproveHallTicketGenrationIP" field.
	ApproveHallTicketGenrationIP bool `json:"ApproveHallTicketGenrationIP,omitempty"`
	// ApproveHallTicketGenrationPS holds the value of the "ApproveHallTicketGenrationPS" field.
	ApproveHallTicketGenrationPS bool `json:"ApproveHallTicketGenrationPS,omitempty"`
	// ApproveHallTicketGenrationPM holds the value of the "ApproveHallTicketGenrationPM" field.
	ApproveHallTicketGenrationPM bool `json:"ApproveHallTicketGenrationPM,omitempty"`
	// ApproveHallTicketGenrationPA holds the value of the "ApproveHallTicketGenrationPA" field.
	ApproveHallTicketGenrationPA bool `json:"ApproveHallTicketGenrationPA,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CircleSummaryForNOQuery when eager-loading is set.
	Edges        CircleSummaryForNOEdges `json:"edges"`
	selectValues sql.SelectValues
}

// CircleSummaryForNOEdges holds the relations/edges for other nodes in the graph.
type CircleSummaryForNOEdges struct {
	// Circleusers holds the value of the circleusers edge.
	Circleusers []*UserMaster `json:"circleusers,omitempty"`
	// CircleRefsForHallTicketIP holds the value of the CircleRefsForHallTicketIP edge.
	CircleRefsForHallTicketIP []*Exam_Applications_IP `json:"CircleRefsForHallTicketIP,omitempty"`
	// CircleRefsForHallTicketPS holds the value of the CircleRefsForHallTicketPS edge.
	CircleRefsForHallTicketPS []*Exam_Applications_PS `json:"CircleRefsForHallTicketPS,omitempty"`
	// CircleRefsForHallTicketGDSPA holds the value of the CircleRefsForHallTicketGDSPA edge.
	CircleRefsForHallTicketGDSPA []*Exam_Applications_GDSPA `json:"CircleRefsForHallTicketGDSPA,omitempty"`
	// CircleRefsForHallTicketGDSPM holds the value of the CircleRefsForHallTicketGDSPM edge.
	CircleRefsForHallTicketGDSPM []*Exam_Applications_GDSPM `json:"CircleRefsForHallTicketGDSPM,omitempty"`
	// CircleRefsForHallTicketPMPA holds the value of the CircleRefsForHallTicketPMPA edge.
	CircleRefsForHallTicketPMPA []*Exam_Applications_PMPA `json:"CircleRefsForHallTicketPMPA,omitempty"`
	// CircleRefsForHallTicketMTSPMMG holds the value of the CircleRefsForHallTicketMTSPMMG edge.
	CircleRefsForHallTicketMTSPMMG []*Exam_Application_MTSPMMG `json:"CircleRefsForHallTicketMTSPMMG,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [7]bool
}

// CircleusersOrErr returns the Circleusers value or an error if the edge
// was not loaded in eager-loading.
func (e CircleSummaryForNOEdges) CircleusersOrErr() ([]*UserMaster, error) {
	if e.loadedTypes[0] {
		return e.Circleusers, nil
	}
	return nil, &NotLoadedError{edge: "circleusers"}
}

// CircleRefsForHallTicketIPOrErr returns the CircleRefsForHallTicketIP value or an error if the edge
// was not loaded in eager-loading.
func (e CircleSummaryForNOEdges) CircleRefsForHallTicketIPOrErr() ([]*Exam_Applications_IP, error) {
	if e.loadedTypes[1] {
		return e.CircleRefsForHallTicketIP, nil
	}
	return nil, &NotLoadedError{edge: "CircleRefsForHallTicketIP"}
}

// CircleRefsForHallTicketPSOrErr returns the CircleRefsForHallTicketPS value or an error if the edge
// was not loaded in eager-loading.
func (e CircleSummaryForNOEdges) CircleRefsForHallTicketPSOrErr() ([]*Exam_Applications_PS, error) {
	if e.loadedTypes[2] {
		return e.CircleRefsForHallTicketPS, nil
	}
	return nil, &NotLoadedError{edge: "CircleRefsForHallTicketPS"}
}

// CircleRefsForHallTicketGDSPAOrErr returns the CircleRefsForHallTicketGDSPA value or an error if the edge
// was not loaded in eager-loading.
func (e CircleSummaryForNOEdges) CircleRefsForHallTicketGDSPAOrErr() ([]*Exam_Applications_GDSPA, error) {
	if e.loadedTypes[3] {
		return e.CircleRefsForHallTicketGDSPA, nil
	}
	return nil, &NotLoadedError{edge: "CircleRefsForHallTicketGDSPA"}
}

// CircleRefsForHallTicketGDSPMOrErr returns the CircleRefsForHallTicketGDSPM value or an error if the edge
// was not loaded in eager-loading.
func (e CircleSummaryForNOEdges) CircleRefsForHallTicketGDSPMOrErr() ([]*Exam_Applications_GDSPM, error) {
	if e.loadedTypes[4] {
		return e.CircleRefsForHallTicketGDSPM, nil
	}
	return nil, &NotLoadedError{edge: "CircleRefsForHallTicketGDSPM"}
}

// CircleRefsForHallTicketPMPAOrErr returns the CircleRefsForHallTicketPMPA value or an error if the edge
// was not loaded in eager-loading.
func (e CircleSummaryForNOEdges) CircleRefsForHallTicketPMPAOrErr() ([]*Exam_Applications_PMPA, error) {
	if e.loadedTypes[5] {
		return e.CircleRefsForHallTicketPMPA, nil
	}
	return nil, &NotLoadedError{edge: "CircleRefsForHallTicketPMPA"}
}

// CircleRefsForHallTicketMTSPMMGOrErr returns the CircleRefsForHallTicketMTSPMMG value or an error if the edge
// was not loaded in eager-loading.
func (e CircleSummaryForNOEdges) CircleRefsForHallTicketMTSPMMGOrErr() ([]*Exam_Application_MTSPMMG, error) {
	if e.loadedTypes[6] {
		return e.CircleRefsForHallTicketMTSPMMG, nil
	}
	return nil, &NotLoadedError{edge: "CircleRefsForHallTicketMTSPMMG"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CircleSummaryForNO) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case circlesummaryforno.FieldApproveHallTicketGenrationIP, circlesummaryforno.FieldApproveHallTicketGenrationPS, circlesummaryforno.FieldApproveHallTicketGenrationPM, circlesummaryforno.FieldApproveHallTicketGenrationPA:
			values[i] = new(sql.NullBool)
		case circlesummaryforno.FieldID:
			values[i] = new(sql.NullInt64)
		case circlesummaryforno.FieldCircleOfficeId, circlesummaryforno.FieldCircleOfficeName:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CircleSummaryForNO fields.
func (csfn *CircleSummaryForNO) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case circlesummaryforno.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			csfn.ID = int32(value.Int64)
		case circlesummaryforno.FieldCircleOfficeId:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field CircleOfficeId", values[i])
			} else if value.Valid {
				csfn.CircleOfficeId = value.String
			}
		case circlesummaryforno.FieldCircleOfficeName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field CircleOfficeName", values[i])
			} else if value.Valid {
				csfn.CircleOfficeName = value.String
			}
		case circlesummaryforno.FieldApproveHallTicketGenrationIP:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field ApproveHallTicketGenrationIP", values[i])
			} else if value.Valid {
				csfn.ApproveHallTicketGenrationIP = value.Bool
			}
		case circlesummaryforno.FieldApproveHallTicketGenrationPS:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field ApproveHallTicketGenrationPS", values[i])
			} else if value.Valid {
				csfn.ApproveHallTicketGenrationPS = value.Bool
			}
		case circlesummaryforno.FieldApproveHallTicketGenrationPM:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field ApproveHallTicketGenrationPM", values[i])
			} else if value.Valid {
				csfn.ApproveHallTicketGenrationPM = value.Bool
			}
		case circlesummaryforno.FieldApproveHallTicketGenrationPA:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field ApproveHallTicketGenrationPA", values[i])
			} else if value.Valid {
				csfn.ApproveHallTicketGenrationPA = value.Bool
			}
		default:
			csfn.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the CircleSummaryForNO.
// This includes values selected through modifiers, order, etc.
func (csfn *CircleSummaryForNO) Value(name string) (ent.Value, error) {
	return csfn.selectValues.Get(name)
}

// QueryCircleusers queries the "circleusers" edge of the CircleSummaryForNO entity.
func (csfn *CircleSummaryForNO) QueryCircleusers() *UserMasterQuery {
	return NewCircleSummaryForNOClient(csfn.config).QueryCircleusers(csfn)
}

// QueryCircleRefsForHallTicketIP queries the "CircleRefsForHallTicketIP" edge of the CircleSummaryForNO entity.
func (csfn *CircleSummaryForNO) QueryCircleRefsForHallTicketIP() *ExamApplicationsIPQuery {
	return NewCircleSummaryForNOClient(csfn.config).QueryCircleRefsForHallTicketIP(csfn)
}

// QueryCircleRefsForHallTicketPS queries the "CircleRefsForHallTicketPS" edge of the CircleSummaryForNO entity.
func (csfn *CircleSummaryForNO) QueryCircleRefsForHallTicketPS() *ExamApplicationsPSQuery {
	return NewCircleSummaryForNOClient(csfn.config).QueryCircleRefsForHallTicketPS(csfn)
}

// QueryCircleRefsForHallTicketGDSPA queries the "CircleRefsForHallTicketGDSPA" edge of the CircleSummaryForNO entity.
func (csfn *CircleSummaryForNO) QueryCircleRefsForHallTicketGDSPA() *ExamApplicationsGDSPAQuery {
	return NewCircleSummaryForNOClient(csfn.config).QueryCircleRefsForHallTicketGDSPA(csfn)
}

// QueryCircleRefsForHallTicketGDSPM queries the "CircleRefsForHallTicketGDSPM" edge of the CircleSummaryForNO entity.
func (csfn *CircleSummaryForNO) QueryCircleRefsForHallTicketGDSPM() *ExamApplicationsGDSPMQuery {
	return NewCircleSummaryForNOClient(csfn.config).QueryCircleRefsForHallTicketGDSPM(csfn)
}

// QueryCircleRefsForHallTicketPMPA queries the "CircleRefsForHallTicketPMPA" edge of the CircleSummaryForNO entity.
func (csfn *CircleSummaryForNO) QueryCircleRefsForHallTicketPMPA() *ExamApplicationsPMPAQuery {
	return NewCircleSummaryForNOClient(csfn.config).QueryCircleRefsForHallTicketPMPA(csfn)
}

// QueryCircleRefsForHallTicketMTSPMMG queries the "CircleRefsForHallTicketMTSPMMG" edge of the CircleSummaryForNO entity.
func (csfn *CircleSummaryForNO) QueryCircleRefsForHallTicketMTSPMMG() *ExamApplicationMTSPMMGQuery {
	return NewCircleSummaryForNOClient(csfn.config).QueryCircleRefsForHallTicketMTSPMMG(csfn)
}

// Update returns a builder for updating this CircleSummaryForNO.
// Note that you need to call CircleSummaryForNO.Unwrap() before calling this method if this CircleSummaryForNO
// was returned from a transaction, and the transaction was committed or rolled back.
func (csfn *CircleSummaryForNO) Update() *CircleSummaryForNOUpdateOne {
	return NewCircleSummaryForNOClient(csfn.config).UpdateOne(csfn)
}

// Unwrap unwraps the CircleSummaryForNO entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (csfn *CircleSummaryForNO) Unwrap() *CircleSummaryForNO {
	_tx, ok := csfn.config.driver.(*txDriver)
	if !ok {
		panic("ent: CircleSummaryForNO is not a transactional entity")
	}
	csfn.config.driver = _tx.drv
	return csfn
}

// String implements the fmt.Stringer.
func (csfn *CircleSummaryForNO) String() string {
	var builder strings.Builder
	builder.WriteString("CircleSummaryForNO(")
	builder.WriteString(fmt.Sprintf("id=%v, ", csfn.ID))
	builder.WriteString("CircleOfficeId=")
	builder.WriteString(csfn.CircleOfficeId)
	builder.WriteString(", ")
	builder.WriteString("CircleOfficeName=")
	builder.WriteString(csfn.CircleOfficeName)
	builder.WriteString(", ")
	builder.WriteString("ApproveHallTicketGenrationIP=")
	builder.WriteString(fmt.Sprintf("%v", csfn.ApproveHallTicketGenrationIP))
	builder.WriteString(", ")
	builder.WriteString("ApproveHallTicketGenrationPS=")
	builder.WriteString(fmt.Sprintf("%v", csfn.ApproveHallTicketGenrationPS))
	builder.WriteString(", ")
	builder.WriteString("ApproveHallTicketGenrationPM=")
	builder.WriteString(fmt.Sprintf("%v", csfn.ApproveHallTicketGenrationPM))
	builder.WriteString(", ")
	builder.WriteString("ApproveHallTicketGenrationPA=")
	builder.WriteString(fmt.Sprintf("%v", csfn.ApproveHallTicketGenrationPA))
	builder.WriteByte(')')
	return builder.String()
}

// CircleSummaryForNOs is a parsable slice of CircleSummaryForNO.
type CircleSummaryForNOs []*CircleSummaryForNO
