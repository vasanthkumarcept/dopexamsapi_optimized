// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"
	"recruit/ent/adminlogin"
	"recruit/ent/exam_application_mtspmmg"
	"recruit/ent/exam_applications_gdspa"
	"recruit/ent/exam_applications_gdspm"
	"recruit/ent/exam_applications_ip"
	"recruit/ent/exam_applications_pmpa"
	"recruit/ent/exam_applications_ps"
	"recruit/ent/predicate"
	"recruit/ent/rolemaster"
	"recruit/ent/usermaster"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// RoleMasterQuery is the builder for querying RoleMaster entities.
type RoleMasterQuery struct {
	config
	ctx                 *QueryContext
	order               []rolemaster.OrderOption
	inters              []Interceptor
	predicates          []predicate.RoleMaster
	withRoles           *AdminLoginQuery
	withRolesRef        *UserMasterQuery
	withRolesPSRef      *ExamApplicationsPSQuery
	withRolesIPRef      *ExamApplicationsIPQuery
	withRolesGDSPARef   *ExamApplicationsGDSPAQuery
	withRolesGDSPMRef   *ExamApplicationsGDSPMQuery
	withRolesPMPARef    *ExamApplicationsPMPAQuery
	withRolesMTSPMMGRef *ExamApplicationMTSPMMGQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the RoleMasterQuery builder.
func (rmq *RoleMasterQuery) Where(ps ...predicate.RoleMaster) *RoleMasterQuery {
	rmq.predicates = append(rmq.predicates, ps...)
	return rmq
}

// Limit the number of records to be returned by this query.
func (rmq *RoleMasterQuery) Limit(limit int) *RoleMasterQuery {
	rmq.ctx.Limit = &limit
	return rmq
}

// Offset to start from.
func (rmq *RoleMasterQuery) Offset(offset int) *RoleMasterQuery {
	rmq.ctx.Offset = &offset
	return rmq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (rmq *RoleMasterQuery) Unique(unique bool) *RoleMasterQuery {
	rmq.ctx.Unique = &unique
	return rmq
}

// Order specifies how the records should be ordered.
func (rmq *RoleMasterQuery) Order(o ...rolemaster.OrderOption) *RoleMasterQuery {
	rmq.order = append(rmq.order, o...)
	return rmq
}

// QueryRoles chains the current query on the "roles" edge.
func (rmq *RoleMasterQuery) QueryRoles() *AdminLoginQuery {
	query := (&AdminLoginClient{config: rmq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := rmq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := rmq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(rolemaster.Table, rolemaster.FieldID, selector),
			sqlgraph.To(adminlogin.Table, adminlogin.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, rolemaster.RolesTable, rolemaster.RolesColumn),
		)
		fromU = sqlgraph.SetNeighbors(rmq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryRolesRef chains the current query on the "Roles_Ref" edge.
func (rmq *RoleMasterQuery) QueryRolesRef() *UserMasterQuery {
	query := (&UserMasterClient{config: rmq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := rmq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := rmq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(rolemaster.Table, rolemaster.FieldID, selector),
			sqlgraph.To(usermaster.Table, usermaster.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, rolemaster.RolesRefTable, rolemaster.RolesRefColumn),
		)
		fromU = sqlgraph.SetNeighbors(rmq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryRolesPSRef chains the current query on the "Roles_PS_Ref" edge.
func (rmq *RoleMasterQuery) QueryRolesPSRef() *ExamApplicationsPSQuery {
	query := (&ExamApplicationsPSClient{config: rmq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := rmq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := rmq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(rolemaster.Table, rolemaster.FieldID, selector),
			sqlgraph.To(exam_applications_ps.Table, exam_applications_ps.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, rolemaster.RolesPSRefTable, rolemaster.RolesPSRefColumn),
		)
		fromU = sqlgraph.SetNeighbors(rmq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryRolesIPRef chains the current query on the "Roles_IP_Ref" edge.
func (rmq *RoleMasterQuery) QueryRolesIPRef() *ExamApplicationsIPQuery {
	query := (&ExamApplicationsIPClient{config: rmq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := rmq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := rmq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(rolemaster.Table, rolemaster.FieldID, selector),
			sqlgraph.To(exam_applications_ip.Table, exam_applications_ip.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, rolemaster.RolesIPRefTable, rolemaster.RolesIPRefColumn),
		)
		fromU = sqlgraph.SetNeighbors(rmq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryRolesGDSPARef chains the current query on the "Roles_GDSPA_Ref" edge.
func (rmq *RoleMasterQuery) QueryRolesGDSPARef() *ExamApplicationsGDSPAQuery {
	query := (&ExamApplicationsGDSPAClient{config: rmq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := rmq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := rmq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(rolemaster.Table, rolemaster.FieldID, selector),
			sqlgraph.To(exam_applications_gdspa.Table, exam_applications_gdspa.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, rolemaster.RolesGDSPARefTable, rolemaster.RolesGDSPARefColumn),
		)
		fromU = sqlgraph.SetNeighbors(rmq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryRolesGDSPMRef chains the current query on the "Roles_GDSPM_Ref" edge.
func (rmq *RoleMasterQuery) QueryRolesGDSPMRef() *ExamApplicationsGDSPMQuery {
	query := (&ExamApplicationsGDSPMClient{config: rmq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := rmq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := rmq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(rolemaster.Table, rolemaster.FieldID, selector),
			sqlgraph.To(exam_applications_gdspm.Table, exam_applications_gdspm.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, rolemaster.RolesGDSPMRefTable, rolemaster.RolesGDSPMRefColumn),
		)
		fromU = sqlgraph.SetNeighbors(rmq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryRolesPMPARef chains the current query on the "Roles_PMPA_Ref" edge.
func (rmq *RoleMasterQuery) QueryRolesPMPARef() *ExamApplicationsPMPAQuery {
	query := (&ExamApplicationsPMPAClient{config: rmq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := rmq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := rmq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(rolemaster.Table, rolemaster.FieldID, selector),
			sqlgraph.To(exam_applications_pmpa.Table, exam_applications_pmpa.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, rolemaster.RolesPMPARefTable, rolemaster.RolesPMPARefColumn),
		)
		fromU = sqlgraph.SetNeighbors(rmq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryRolesMTSPMMGRef chains the current query on the "Roles_MTSPMMG_Ref" edge.
func (rmq *RoleMasterQuery) QueryRolesMTSPMMGRef() *ExamApplicationMTSPMMGQuery {
	query := (&ExamApplicationMTSPMMGClient{config: rmq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := rmq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := rmq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(rolemaster.Table, rolemaster.FieldID, selector),
			sqlgraph.To(exam_application_mtspmmg.Table, exam_application_mtspmmg.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, rolemaster.RolesMTSPMMGRefTable, rolemaster.RolesMTSPMMGRefColumn),
		)
		fromU = sqlgraph.SetNeighbors(rmq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first RoleMaster entity from the query.
// Returns a *NotFoundError when no RoleMaster was found.
func (rmq *RoleMasterQuery) First(ctx context.Context) (*RoleMaster, error) {
	nodes, err := rmq.Limit(1).All(setContextOp(ctx, rmq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{rolemaster.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (rmq *RoleMasterQuery) FirstX(ctx context.Context) *RoleMaster {
	node, err := rmq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first RoleMaster ID from the query.
// Returns a *NotFoundError when no RoleMaster ID was found.
func (rmq *RoleMasterQuery) FirstID(ctx context.Context) (id int32, err error) {
	var ids []int32
	if ids, err = rmq.Limit(1).IDs(setContextOp(ctx, rmq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{rolemaster.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (rmq *RoleMasterQuery) FirstIDX(ctx context.Context) int32 {
	id, err := rmq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single RoleMaster entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one RoleMaster entity is found.
// Returns a *NotFoundError when no RoleMaster entities are found.
func (rmq *RoleMasterQuery) Only(ctx context.Context) (*RoleMaster, error) {
	nodes, err := rmq.Limit(2).All(setContextOp(ctx, rmq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{rolemaster.Label}
	default:
		return nil, &NotSingularError{rolemaster.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (rmq *RoleMasterQuery) OnlyX(ctx context.Context) *RoleMaster {
	node, err := rmq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only RoleMaster ID in the query.
// Returns a *NotSingularError when more than one RoleMaster ID is found.
// Returns a *NotFoundError when no entities are found.
func (rmq *RoleMasterQuery) OnlyID(ctx context.Context) (id int32, err error) {
	var ids []int32
	if ids, err = rmq.Limit(2).IDs(setContextOp(ctx, rmq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{rolemaster.Label}
	default:
		err = &NotSingularError{rolemaster.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (rmq *RoleMasterQuery) OnlyIDX(ctx context.Context) int32 {
	id, err := rmq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of RoleMasters.
func (rmq *RoleMasterQuery) All(ctx context.Context) ([]*RoleMaster, error) {
	ctx = setContextOp(ctx, rmq.ctx, "All")
	if err := rmq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*RoleMaster, *RoleMasterQuery]()
	return withInterceptors[[]*RoleMaster](ctx, rmq, qr, rmq.inters)
}

// AllX is like All, but panics if an error occurs.
func (rmq *RoleMasterQuery) AllX(ctx context.Context) []*RoleMaster {
	nodes, err := rmq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of RoleMaster IDs.
func (rmq *RoleMasterQuery) IDs(ctx context.Context) (ids []int32, err error) {
	if rmq.ctx.Unique == nil && rmq.path != nil {
		rmq.Unique(true)
	}
	ctx = setContextOp(ctx, rmq.ctx, "IDs")
	if err = rmq.Select(rolemaster.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (rmq *RoleMasterQuery) IDsX(ctx context.Context) []int32 {
	ids, err := rmq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (rmq *RoleMasterQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, rmq.ctx, "Count")
	if err := rmq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, rmq, querierCount[*RoleMasterQuery](), rmq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (rmq *RoleMasterQuery) CountX(ctx context.Context) int {
	count, err := rmq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (rmq *RoleMasterQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, rmq.ctx, "Exist")
	switch _, err := rmq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (rmq *RoleMasterQuery) ExistX(ctx context.Context) bool {
	exist, err := rmq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the RoleMasterQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (rmq *RoleMasterQuery) Clone() *RoleMasterQuery {
	if rmq == nil {
		return nil
	}
	return &RoleMasterQuery{
		config:              rmq.config,
		ctx:                 rmq.ctx.Clone(),
		order:               append([]rolemaster.OrderOption{}, rmq.order...),
		inters:              append([]Interceptor{}, rmq.inters...),
		predicates:          append([]predicate.RoleMaster{}, rmq.predicates...),
		withRoles:           rmq.withRoles.Clone(),
		withRolesRef:        rmq.withRolesRef.Clone(),
		withRolesPSRef:      rmq.withRolesPSRef.Clone(),
		withRolesIPRef:      rmq.withRolesIPRef.Clone(),
		withRolesGDSPARef:   rmq.withRolesGDSPARef.Clone(),
		withRolesGDSPMRef:   rmq.withRolesGDSPMRef.Clone(),
		withRolesPMPARef:    rmq.withRolesPMPARef.Clone(),
		withRolesMTSPMMGRef: rmq.withRolesMTSPMMGRef.Clone(),
		// clone intermediate query.
		sql:  rmq.sql.Clone(),
		path: rmq.path,
	}
}

// WithRoles tells the query-builder to eager-load the nodes that are connected to
// the "roles" edge. The optional arguments are used to configure the query builder of the edge.
func (rmq *RoleMasterQuery) WithRoles(opts ...func(*AdminLoginQuery)) *RoleMasterQuery {
	query := (&AdminLoginClient{config: rmq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	rmq.withRoles = query
	return rmq
}

// WithRolesRef tells the query-builder to eager-load the nodes that are connected to
// the "Roles_Ref" edge. The optional arguments are used to configure the query builder of the edge.
func (rmq *RoleMasterQuery) WithRolesRef(opts ...func(*UserMasterQuery)) *RoleMasterQuery {
	query := (&UserMasterClient{config: rmq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	rmq.withRolesRef = query
	return rmq
}

// WithRolesPSRef tells the query-builder to eager-load the nodes that are connected to
// the "Roles_PS_Ref" edge. The optional arguments are used to configure the query builder of the edge.
func (rmq *RoleMasterQuery) WithRolesPSRef(opts ...func(*ExamApplicationsPSQuery)) *RoleMasterQuery {
	query := (&ExamApplicationsPSClient{config: rmq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	rmq.withRolesPSRef = query
	return rmq
}

// WithRolesIPRef tells the query-builder to eager-load the nodes that are connected to
// the "Roles_IP_Ref" edge. The optional arguments are used to configure the query builder of the edge.
func (rmq *RoleMasterQuery) WithRolesIPRef(opts ...func(*ExamApplicationsIPQuery)) *RoleMasterQuery {
	query := (&ExamApplicationsIPClient{config: rmq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	rmq.withRolesIPRef = query
	return rmq
}

// WithRolesGDSPARef tells the query-builder to eager-load the nodes that are connected to
// the "Roles_GDSPA_Ref" edge. The optional arguments are used to configure the query builder of the edge.
func (rmq *RoleMasterQuery) WithRolesGDSPARef(opts ...func(*ExamApplicationsGDSPAQuery)) *RoleMasterQuery {
	query := (&ExamApplicationsGDSPAClient{config: rmq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	rmq.withRolesGDSPARef = query
	return rmq
}

// WithRolesGDSPMRef tells the query-builder to eager-load the nodes that are connected to
// the "Roles_GDSPM_Ref" edge. The optional arguments are used to configure the query builder of the edge.
func (rmq *RoleMasterQuery) WithRolesGDSPMRef(opts ...func(*ExamApplicationsGDSPMQuery)) *RoleMasterQuery {
	query := (&ExamApplicationsGDSPMClient{config: rmq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	rmq.withRolesGDSPMRef = query
	return rmq
}

// WithRolesPMPARef tells the query-builder to eager-load the nodes that are connected to
// the "Roles_PMPA_Ref" edge. The optional arguments are used to configure the query builder of the edge.
func (rmq *RoleMasterQuery) WithRolesPMPARef(opts ...func(*ExamApplicationsPMPAQuery)) *RoleMasterQuery {
	query := (&ExamApplicationsPMPAClient{config: rmq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	rmq.withRolesPMPARef = query
	return rmq
}

// WithRolesMTSPMMGRef tells the query-builder to eager-load the nodes that are connected to
// the "Roles_MTSPMMG_Ref" edge. The optional arguments are used to configure the query builder of the edge.
func (rmq *RoleMasterQuery) WithRolesMTSPMMGRef(opts ...func(*ExamApplicationMTSPMMGQuery)) *RoleMasterQuery {
	query := (&ExamApplicationMTSPMMGClient{config: rmq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	rmq.withRolesMTSPMMGRef = query
	return rmq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		RoleName string `json:"RoleName,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.RoleMaster.Query().
//		GroupBy(rolemaster.FieldRoleName).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (rmq *RoleMasterQuery) GroupBy(field string, fields ...string) *RoleMasterGroupBy {
	rmq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &RoleMasterGroupBy{build: rmq}
	grbuild.flds = &rmq.ctx.Fields
	grbuild.label = rolemaster.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		RoleName string `json:"RoleName,omitempty"`
//	}
//
//	client.RoleMaster.Query().
//		Select(rolemaster.FieldRoleName).
//		Scan(ctx, &v)
func (rmq *RoleMasterQuery) Select(fields ...string) *RoleMasterSelect {
	rmq.ctx.Fields = append(rmq.ctx.Fields, fields...)
	sbuild := &RoleMasterSelect{RoleMasterQuery: rmq}
	sbuild.label = rolemaster.Label
	sbuild.flds, sbuild.scan = &rmq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a RoleMasterSelect configured with the given aggregations.
func (rmq *RoleMasterQuery) Aggregate(fns ...AggregateFunc) *RoleMasterSelect {
	return rmq.Select().Aggregate(fns...)
}

func (rmq *RoleMasterQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range rmq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, rmq); err != nil {
				return err
			}
		}
	}
	for _, f := range rmq.ctx.Fields {
		if !rolemaster.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if rmq.path != nil {
		prev, err := rmq.path(ctx)
		if err != nil {
			return err
		}
		rmq.sql = prev
	}
	return nil
}

func (rmq *RoleMasterQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*RoleMaster, error) {
	var (
		nodes       = []*RoleMaster{}
		_spec       = rmq.querySpec()
		loadedTypes = [8]bool{
			rmq.withRoles != nil,
			rmq.withRolesRef != nil,
			rmq.withRolesPSRef != nil,
			rmq.withRolesIPRef != nil,
			rmq.withRolesGDSPARef != nil,
			rmq.withRolesGDSPMRef != nil,
			rmq.withRolesPMPARef != nil,
			rmq.withRolesMTSPMMGRef != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*RoleMaster).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &RoleMaster{config: rmq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, rmq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := rmq.withRoles; query != nil {
		if err := rmq.loadRoles(ctx, query, nodes,
			func(n *RoleMaster) { n.Edges.Roles = []*AdminLogin{} },
			func(n *RoleMaster, e *AdminLogin) { n.Edges.Roles = append(n.Edges.Roles, e) }); err != nil {
			return nil, err
		}
	}
	if query := rmq.withRolesRef; query != nil {
		if err := rmq.loadRolesRef(ctx, query, nodes,
			func(n *RoleMaster) { n.Edges.RolesRef = []*UserMaster{} },
			func(n *RoleMaster, e *UserMaster) { n.Edges.RolesRef = append(n.Edges.RolesRef, e) }); err != nil {
			return nil, err
		}
	}
	if query := rmq.withRolesPSRef; query != nil {
		if err := rmq.loadRolesPSRef(ctx, query, nodes,
			func(n *RoleMaster) { n.Edges.RolesPSRef = []*Exam_Applications_PS{} },
			func(n *RoleMaster, e *Exam_Applications_PS) { n.Edges.RolesPSRef = append(n.Edges.RolesPSRef, e) }); err != nil {
			return nil, err
		}
	}
	if query := rmq.withRolesIPRef; query != nil {
		if err := rmq.loadRolesIPRef(ctx, query, nodes,
			func(n *RoleMaster) { n.Edges.RolesIPRef = []*Exam_Applications_IP{} },
			func(n *RoleMaster, e *Exam_Applications_IP) { n.Edges.RolesIPRef = append(n.Edges.RolesIPRef, e) }); err != nil {
			return nil, err
		}
	}
	if query := rmq.withRolesGDSPARef; query != nil {
		if err := rmq.loadRolesGDSPARef(ctx, query, nodes,
			func(n *RoleMaster) { n.Edges.RolesGDSPARef = []*Exam_Applications_GDSPA{} },
			func(n *RoleMaster, e *Exam_Applications_GDSPA) {
				n.Edges.RolesGDSPARef = append(n.Edges.RolesGDSPARef, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := rmq.withRolesGDSPMRef; query != nil {
		if err := rmq.loadRolesGDSPMRef(ctx, query, nodes,
			func(n *RoleMaster) { n.Edges.RolesGDSPMRef = []*Exam_Applications_GDSPM{} },
			func(n *RoleMaster, e *Exam_Applications_GDSPM) {
				n.Edges.RolesGDSPMRef = append(n.Edges.RolesGDSPMRef, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := rmq.withRolesPMPARef; query != nil {
		if err := rmq.loadRolesPMPARef(ctx, query, nodes,
			func(n *RoleMaster) { n.Edges.RolesPMPARef = []*Exam_Applications_PMPA{} },
			func(n *RoleMaster, e *Exam_Applications_PMPA) { n.Edges.RolesPMPARef = append(n.Edges.RolesPMPARef, e) }); err != nil {
			return nil, err
		}
	}
	if query := rmq.withRolesMTSPMMGRef; query != nil {
		if err := rmq.loadRolesMTSPMMGRef(ctx, query, nodes,
			func(n *RoleMaster) { n.Edges.RolesMTSPMMGRef = []*Exam_Application_MTSPMMG{} },
			func(n *RoleMaster, e *Exam_Application_MTSPMMG) {
				n.Edges.RolesMTSPMMGRef = append(n.Edges.RolesMTSPMMGRef, e)
			}); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (rmq *RoleMasterQuery) loadRoles(ctx context.Context, query *AdminLoginQuery, nodes []*RoleMaster, init func(*RoleMaster), assign func(*RoleMaster, *AdminLogin)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int32]*RoleMaster)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(adminlogin.FieldRoleUserCode)
	}
	query.Where(predicate.AdminLogin(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(rolemaster.RolesColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.RoleUserCode
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "RoleUserCode" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (rmq *RoleMasterQuery) loadRolesRef(ctx context.Context, query *UserMasterQuery, nodes []*RoleMaster, init func(*RoleMaster), assign func(*RoleMaster, *UserMaster)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int32]*RoleMaster)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(usermaster.FieldRoleUserCode)
	}
	query.Where(predicate.UserMaster(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(rolemaster.RolesRefColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.RoleUserCode
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "RoleUserCode" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (rmq *RoleMasterQuery) loadRolesPSRef(ctx context.Context, query *ExamApplicationsPSQuery, nodes []*RoleMaster, init func(*RoleMaster), assign func(*RoleMaster, *Exam_Applications_PS)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int32]*RoleMaster)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(exam_applications_ps.FieldRoleUserCode)
	}
	query.Where(predicate.Exam_Applications_PS(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(rolemaster.RolesPSRefColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.RoleUserCode
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "RoleUserCode" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (rmq *RoleMasterQuery) loadRolesIPRef(ctx context.Context, query *ExamApplicationsIPQuery, nodes []*RoleMaster, init func(*RoleMaster), assign func(*RoleMaster, *Exam_Applications_IP)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int32]*RoleMaster)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(exam_applications_ip.FieldRoleUserCode)
	}
	query.Where(predicate.Exam_Applications_IP(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(rolemaster.RolesIPRefColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.RoleUserCode
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "RoleUserCode" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (rmq *RoleMasterQuery) loadRolesGDSPARef(ctx context.Context, query *ExamApplicationsGDSPAQuery, nodes []*RoleMaster, init func(*RoleMaster), assign func(*RoleMaster, *Exam_Applications_GDSPA)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int32]*RoleMaster)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(exam_applications_gdspa.FieldRoleUserCode)
	}
	query.Where(predicate.Exam_Applications_GDSPA(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(rolemaster.RolesGDSPARefColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.RoleUserCode
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "RoleUserCode" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (rmq *RoleMasterQuery) loadRolesGDSPMRef(ctx context.Context, query *ExamApplicationsGDSPMQuery, nodes []*RoleMaster, init func(*RoleMaster), assign func(*RoleMaster, *Exam_Applications_GDSPM)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int32]*RoleMaster)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(exam_applications_gdspm.FieldRoleUserCode)
	}
	query.Where(predicate.Exam_Applications_GDSPM(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(rolemaster.RolesGDSPMRefColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.RoleUserCode
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "RoleUserCode" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (rmq *RoleMasterQuery) loadRolesPMPARef(ctx context.Context, query *ExamApplicationsPMPAQuery, nodes []*RoleMaster, init func(*RoleMaster), assign func(*RoleMaster, *Exam_Applications_PMPA)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int32]*RoleMaster)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(exam_applications_pmpa.FieldRoleUserCode)
	}
	query.Where(predicate.Exam_Applications_PMPA(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(rolemaster.RolesPMPARefColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.RoleUserCode
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "RoleUserCode" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (rmq *RoleMasterQuery) loadRolesMTSPMMGRef(ctx context.Context, query *ExamApplicationMTSPMMGQuery, nodes []*RoleMaster, init func(*RoleMaster), assign func(*RoleMaster, *Exam_Application_MTSPMMG)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int32]*RoleMaster)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(exam_application_mtspmmg.FieldRoleUserCode)
	}
	query.Where(predicate.Exam_Application_MTSPMMG(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(rolemaster.RolesMTSPMMGRefColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.RoleUserCode
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "RoleUserCode" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (rmq *RoleMasterQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := rmq.querySpec()
	_spec.Node.Columns = rmq.ctx.Fields
	if len(rmq.ctx.Fields) > 0 {
		_spec.Unique = rmq.ctx.Unique != nil && *rmq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, rmq.driver, _spec)
}

func (rmq *RoleMasterQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(rolemaster.Table, rolemaster.Columns, sqlgraph.NewFieldSpec(rolemaster.FieldID, field.TypeInt32))
	_spec.From = rmq.sql
	if unique := rmq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if rmq.path != nil {
		_spec.Unique = true
	}
	if fields := rmq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, rolemaster.FieldID)
		for i := range fields {
			if fields[i] != rolemaster.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := rmq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := rmq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := rmq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := rmq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (rmq *RoleMasterQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(rmq.driver.Dialect())
	t1 := builder.Table(rolemaster.Table)
	columns := rmq.ctx.Fields
	if len(columns) == 0 {
		columns = rolemaster.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if rmq.sql != nil {
		selector = rmq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if rmq.ctx.Unique != nil && *rmq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range rmq.predicates {
		p(selector)
	}
	for _, p := range rmq.order {
		p(selector)
	}
	if offset := rmq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := rmq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// RoleMasterGroupBy is the group-by builder for RoleMaster entities.
type RoleMasterGroupBy struct {
	selector
	build *RoleMasterQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (rmgb *RoleMasterGroupBy) Aggregate(fns ...AggregateFunc) *RoleMasterGroupBy {
	rmgb.fns = append(rmgb.fns, fns...)
	return rmgb
}

// Scan applies the selector query and scans the result into the given value.
func (rmgb *RoleMasterGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, rmgb.build.ctx, "GroupBy")
	if err := rmgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*RoleMasterQuery, *RoleMasterGroupBy](ctx, rmgb.build, rmgb, rmgb.build.inters, v)
}

func (rmgb *RoleMasterGroupBy) sqlScan(ctx context.Context, root *RoleMasterQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(rmgb.fns))
	for _, fn := range rmgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*rmgb.flds)+len(rmgb.fns))
		for _, f := range *rmgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*rmgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := rmgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// RoleMasterSelect is the builder for selecting fields of RoleMaster entities.
type RoleMasterSelect struct {
	*RoleMasterQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (rms *RoleMasterSelect) Aggregate(fns ...AggregateFunc) *RoleMasterSelect {
	rms.fns = append(rms.fns, fns...)
	return rms
}

// Scan applies the selector query and scans the result into the given value.
func (rms *RoleMasterSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, rms.ctx, "Select")
	if err := rms.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*RoleMasterQuery, *RoleMasterSelect](ctx, rms.RoleMasterQuery, rms, rms.inters, v)
}

func (rms *RoleMasterSelect) sqlScan(ctx context.Context, root *RoleMasterQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(rms.fns))
	for _, fn := range rms.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*rms.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := rms.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
