// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"recruit/ent/exampapers"
	"recruit/ent/papertypes"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PaperTypesCreate is the builder for creating a PaperTypes entity.
type PaperTypesCreate struct {
	config
	mutation *PaperTypesMutation
	hooks    []Hook
}

// SetPaperTypeDescription sets the "PaperTypeDescription" field.
func (ptc *PaperTypesCreate) SetPaperTypeDescription(s string) *PaperTypesCreate {
	ptc.mutation.SetPaperTypeDescription(s)
	return ptc
}

// SetSequenceNumber sets the "SequenceNumber" field.
func (ptc *PaperTypesCreate) SetSequenceNumber(i int32) *PaperTypesCreate {
	ptc.mutation.SetSequenceNumber(i)
	return ptc
}

// SetNillableSequenceNumber sets the "SequenceNumber" field if the given value is not nil.
func (ptc *PaperTypesCreate) SetNillableSequenceNumber(i *int32) *PaperTypesCreate {
	if i != nil {
		ptc.SetSequenceNumber(*i)
	}
	return ptc
}

// SetOrderNumber sets the "OrderNumber" field.
func (ptc *PaperTypesCreate) SetOrderNumber(s string) *PaperTypesCreate {
	ptc.mutation.SetOrderNumber(s)
	return ptc
}

// SetNillableOrderNumber sets the "OrderNumber" field if the given value is not nil.
func (ptc *PaperTypesCreate) SetNillableOrderNumber(s *string) *PaperTypesCreate {
	if s != nil {
		ptc.SetOrderNumber(*s)
	}
	return ptc
}

// SetCreatedById sets the "CreatedById" field.
func (ptc *PaperTypesCreate) SetCreatedById(i int64) *PaperTypesCreate {
	ptc.mutation.SetCreatedById(i)
	return ptc
}

// SetNillableCreatedById sets the "CreatedById" field if the given value is not nil.
func (ptc *PaperTypesCreate) SetNillableCreatedById(i *int64) *PaperTypesCreate {
	if i != nil {
		ptc.SetCreatedById(*i)
	}
	return ptc
}

// SetCreatedByUserName sets the "CreatedByUserName" field.
func (ptc *PaperTypesCreate) SetCreatedByUserName(s string) *PaperTypesCreate {
	ptc.mutation.SetCreatedByUserName(s)
	return ptc
}

// SetNillableCreatedByUserName sets the "CreatedByUserName" field if the given value is not nil.
func (ptc *PaperTypesCreate) SetNillableCreatedByUserName(s *string) *PaperTypesCreate {
	if s != nil {
		ptc.SetCreatedByUserName(*s)
	}
	return ptc
}

// SetCreatedByEmployeeId sets the "CreatedByEmployeeId" field.
func (ptc *PaperTypesCreate) SetCreatedByEmployeeId(s string) *PaperTypesCreate {
	ptc.mutation.SetCreatedByEmployeeId(s)
	return ptc
}

// SetNillableCreatedByEmployeeId sets the "CreatedByEmployeeId" field if the given value is not nil.
func (ptc *PaperTypesCreate) SetNillableCreatedByEmployeeId(s *string) *PaperTypesCreate {
	if s != nil {
		ptc.SetCreatedByEmployeeId(*s)
	}
	return ptc
}

// SetCreatedByDesignation sets the "CreatedByDesignation" field.
func (ptc *PaperTypesCreate) SetCreatedByDesignation(s string) *PaperTypesCreate {
	ptc.mutation.SetCreatedByDesignation(s)
	return ptc
}

// SetNillableCreatedByDesignation sets the "CreatedByDesignation" field if the given value is not nil.
func (ptc *PaperTypesCreate) SetNillableCreatedByDesignation(s *string) *PaperTypesCreate {
	if s != nil {
		ptc.SetCreatedByDesignation(*s)
	}
	return ptc
}

// SetCreatedDate sets the "CreatedDate" field.
func (ptc *PaperTypesCreate) SetCreatedDate(t time.Time) *PaperTypesCreate {
	ptc.mutation.SetCreatedDate(t)
	return ptc
}

// SetNillableCreatedDate sets the "CreatedDate" field if the given value is not nil.
func (ptc *PaperTypesCreate) SetNillableCreatedDate(t *time.Time) *PaperTypesCreate {
	if t != nil {
		ptc.SetCreatedDate(*t)
	}
	return ptc
}

// SetVerifiedById sets the "VerifiedById" field.
func (ptc *PaperTypesCreate) SetVerifiedById(i int64) *PaperTypesCreate {
	ptc.mutation.SetVerifiedById(i)
	return ptc
}

// SetNillableVerifiedById sets the "VerifiedById" field if the given value is not nil.
func (ptc *PaperTypesCreate) SetNillableVerifiedById(i *int64) *PaperTypesCreate {
	if i != nil {
		ptc.SetVerifiedById(*i)
	}
	return ptc
}

// SetVerifiedByUserName sets the "VerifiedByUserName" field.
func (ptc *PaperTypesCreate) SetVerifiedByUserName(s string) *PaperTypesCreate {
	ptc.mutation.SetVerifiedByUserName(s)
	return ptc
}

// SetNillableVerifiedByUserName sets the "VerifiedByUserName" field if the given value is not nil.
func (ptc *PaperTypesCreate) SetNillableVerifiedByUserName(s *string) *PaperTypesCreate {
	if s != nil {
		ptc.SetVerifiedByUserName(*s)
	}
	return ptc
}

// SetVerifiedByEmployeeId sets the "VerifiedByEmployeeId" field.
func (ptc *PaperTypesCreate) SetVerifiedByEmployeeId(s string) *PaperTypesCreate {
	ptc.mutation.SetVerifiedByEmployeeId(s)
	return ptc
}

// SetNillableVerifiedByEmployeeId sets the "VerifiedByEmployeeId" field if the given value is not nil.
func (ptc *PaperTypesCreate) SetNillableVerifiedByEmployeeId(s *string) *PaperTypesCreate {
	if s != nil {
		ptc.SetVerifiedByEmployeeId(*s)
	}
	return ptc
}

// SetVerifiedByDesignation sets the "VerifiedByDesignation" field.
func (ptc *PaperTypesCreate) SetVerifiedByDesignation(s string) *PaperTypesCreate {
	ptc.mutation.SetVerifiedByDesignation(s)
	return ptc
}

// SetNillableVerifiedByDesignation sets the "VerifiedByDesignation" field if the given value is not nil.
func (ptc *PaperTypesCreate) SetNillableVerifiedByDesignation(s *string) *PaperTypesCreate {
	if s != nil {
		ptc.SetVerifiedByDesignation(*s)
	}
	return ptc
}

// SetVerifiedDate sets the "VerifiedDate" field.
func (ptc *PaperTypesCreate) SetVerifiedDate(t time.Time) *PaperTypesCreate {
	ptc.mutation.SetVerifiedDate(t)
	return ptc
}

// SetNillableVerifiedDate sets the "VerifiedDate" field if the given value is not nil.
func (ptc *PaperTypesCreate) SetNillableVerifiedDate(t *time.Time) *PaperTypesCreate {
	if t != nil {
		ptc.SetVerifiedDate(*t)
	}
	return ptc
}

// SetStatus sets the "Status" field.
func (ptc *PaperTypesCreate) SetStatus(s string) *PaperTypesCreate {
	ptc.mutation.SetStatus(s)
	return ptc
}

// SetDeletedById sets the "DeletedById" field.
func (ptc *PaperTypesCreate) SetDeletedById(i int64) *PaperTypesCreate {
	ptc.mutation.SetDeletedById(i)
	return ptc
}

// SetNillableDeletedById sets the "DeletedById" field if the given value is not nil.
func (ptc *PaperTypesCreate) SetNillableDeletedById(i *int64) *PaperTypesCreate {
	if i != nil {
		ptc.SetDeletedById(*i)
	}
	return ptc
}

// SetDeletedByUserName sets the "DeletedByUserName" field.
func (ptc *PaperTypesCreate) SetDeletedByUserName(s string) *PaperTypesCreate {
	ptc.mutation.SetDeletedByUserName(s)
	return ptc
}

// SetNillableDeletedByUserName sets the "DeletedByUserName" field if the given value is not nil.
func (ptc *PaperTypesCreate) SetNillableDeletedByUserName(s *string) *PaperTypesCreate {
	if s != nil {
		ptc.SetDeletedByUserName(*s)
	}
	return ptc
}

// SetDeletedByEmployeeId sets the "DeletedByEmployeeId" field.
func (ptc *PaperTypesCreate) SetDeletedByEmployeeId(s string) *PaperTypesCreate {
	ptc.mutation.SetDeletedByEmployeeId(s)
	return ptc
}

// SetNillableDeletedByEmployeeId sets the "DeletedByEmployeeId" field if the given value is not nil.
func (ptc *PaperTypesCreate) SetNillableDeletedByEmployeeId(s *string) *PaperTypesCreate {
	if s != nil {
		ptc.SetDeletedByEmployeeId(*s)
	}
	return ptc
}

// SetDeletedByDesignation sets the "DeletedByDesignation" field.
func (ptc *PaperTypesCreate) SetDeletedByDesignation(s string) *PaperTypesCreate {
	ptc.mutation.SetDeletedByDesignation(s)
	return ptc
}

// SetNillableDeletedByDesignation sets the "DeletedByDesignation" field if the given value is not nil.
func (ptc *PaperTypesCreate) SetNillableDeletedByDesignation(s *string) *PaperTypesCreate {
	if s != nil {
		ptc.SetDeletedByDesignation(*s)
	}
	return ptc
}

// SetDeletedDate sets the "DeletedDate" field.
func (ptc *PaperTypesCreate) SetDeletedDate(t time.Time) *PaperTypesCreate {
	ptc.mutation.SetDeletedDate(t)
	return ptc
}

// SetNillableDeletedDate sets the "DeletedDate" field if the given value is not nil.
func (ptc *PaperTypesCreate) SetNillableDeletedDate(t *time.Time) *PaperTypesCreate {
	if t != nil {
		ptc.SetDeletedDate(*t)
	}
	return ptc
}

// SetPaperCode sets the "PaperCode" field.
func (ptc *PaperTypesCreate) SetPaperCode(i int32) *PaperTypesCreate {
	ptc.mutation.SetPaperCode(i)
	return ptc
}

// SetNillablePaperCode sets the "PaperCode" field if the given value is not nil.
func (ptc *PaperTypesCreate) SetNillablePaperCode(i *int32) *PaperTypesCreate {
	if i != nil {
		ptc.SetPaperCode(*i)
	}
	return ptc
}

// SetID sets the "id" field.
func (ptc *PaperTypesCreate) SetID(i int32) *PaperTypesCreate {
	ptc.mutation.SetID(i)
	return ptc
}

// SetPapercodeID sets the "papercode" edge to the ExamPapers entity by ID.
func (ptc *PaperTypesCreate) SetPapercodeID(id int32) *PaperTypesCreate {
	ptc.mutation.SetPapercodeID(id)
	return ptc
}

// SetNillablePapercodeID sets the "papercode" edge to the ExamPapers entity by ID if the given value is not nil.
func (ptc *PaperTypesCreate) SetNillablePapercodeID(id *int32) *PaperTypesCreate {
	if id != nil {
		ptc = ptc.SetPapercodeID(*id)
	}
	return ptc
}

// SetPapercode sets the "papercode" edge to the ExamPapers entity.
func (ptc *PaperTypesCreate) SetPapercode(e *ExamPapers) *PaperTypesCreate {
	return ptc.SetPapercodeID(e.ID)
}

// Mutation returns the PaperTypesMutation object of the builder.
func (ptc *PaperTypesCreate) Mutation() *PaperTypesMutation {
	return ptc.mutation
}

// Save creates the PaperTypes in the database.
func (ptc *PaperTypesCreate) Save(ctx context.Context) (*PaperTypes, error) {
	return withHooks(ctx, ptc.sqlSave, ptc.mutation, ptc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ptc *PaperTypesCreate) SaveX(ctx context.Context) *PaperTypes {
	v, err := ptc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ptc *PaperTypesCreate) Exec(ctx context.Context) error {
	_, err := ptc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ptc *PaperTypesCreate) ExecX(ctx context.Context) {
	if err := ptc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ptc *PaperTypesCreate) check() error {
	if _, ok := ptc.mutation.PaperTypeDescription(); !ok {
		return &ValidationError{Name: "PaperTypeDescription", err: errors.New(`ent: missing required field "PaperTypes.PaperTypeDescription"`)}
	}
	if v, ok := ptc.mutation.PaperTypeDescription(); ok {
		if err := papertypes.PaperTypeDescriptionValidator(v); err != nil {
			return &ValidationError{Name: "PaperTypeDescription", err: fmt.Errorf(`ent: validator failed for field "PaperTypes.PaperTypeDescription": %w`, err)}
		}
	}
	if _, ok := ptc.mutation.Status(); !ok {
		return &ValidationError{Name: "Status", err: errors.New(`ent: missing required field "PaperTypes.Status"`)}
	}
	return nil
}

func (ptc *PaperTypesCreate) sqlSave(ctx context.Context) (*PaperTypes, error) {
	if err := ptc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ptc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ptc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int32(id)
	}
	ptc.mutation.id = &_node.ID
	ptc.mutation.done = true
	return _node, nil
}

func (ptc *PaperTypesCreate) createSpec() (*PaperTypes, *sqlgraph.CreateSpec) {
	var (
		_node = &PaperTypes{config: ptc.config}
		_spec = sqlgraph.NewCreateSpec(papertypes.Table, sqlgraph.NewFieldSpec(papertypes.FieldID, field.TypeInt32))
	)
	if id, ok := ptc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ptc.mutation.PaperTypeDescription(); ok {
		_spec.SetField(papertypes.FieldPaperTypeDescription, field.TypeString, value)
		_node.PaperTypeDescription = value
	}
	if value, ok := ptc.mutation.SequenceNumber(); ok {
		_spec.SetField(papertypes.FieldSequenceNumber, field.TypeInt32, value)
		_node.SequenceNumber = value
	}
	if value, ok := ptc.mutation.OrderNumber(); ok {
		_spec.SetField(papertypes.FieldOrderNumber, field.TypeString, value)
		_node.OrderNumber = value
	}
	if value, ok := ptc.mutation.CreatedById(); ok {
		_spec.SetField(papertypes.FieldCreatedById, field.TypeInt64, value)
		_node.CreatedById = value
	}
	if value, ok := ptc.mutation.CreatedByUserName(); ok {
		_spec.SetField(papertypes.FieldCreatedByUserName, field.TypeString, value)
		_node.CreatedByUserName = value
	}
	if value, ok := ptc.mutation.CreatedByEmployeeId(); ok {
		_spec.SetField(papertypes.FieldCreatedByEmployeeId, field.TypeString, value)
		_node.CreatedByEmployeeId = value
	}
	if value, ok := ptc.mutation.CreatedByDesignation(); ok {
		_spec.SetField(papertypes.FieldCreatedByDesignation, field.TypeString, value)
		_node.CreatedByDesignation = value
	}
	if value, ok := ptc.mutation.CreatedDate(); ok {
		_spec.SetField(papertypes.FieldCreatedDate, field.TypeTime, value)
		_node.CreatedDate = value
	}
	if value, ok := ptc.mutation.VerifiedById(); ok {
		_spec.SetField(papertypes.FieldVerifiedById, field.TypeInt64, value)
		_node.VerifiedById = value
	}
	if value, ok := ptc.mutation.VerifiedByUserName(); ok {
		_spec.SetField(papertypes.FieldVerifiedByUserName, field.TypeString, value)
		_node.VerifiedByUserName = value
	}
	if value, ok := ptc.mutation.VerifiedByEmployeeId(); ok {
		_spec.SetField(papertypes.FieldVerifiedByEmployeeId, field.TypeString, value)
		_node.VerifiedByEmployeeId = value
	}
	if value, ok := ptc.mutation.VerifiedByDesignation(); ok {
		_spec.SetField(papertypes.FieldVerifiedByDesignation, field.TypeString, value)
		_node.VerifiedByDesignation = value
	}
	if value, ok := ptc.mutation.VerifiedDate(); ok {
		_spec.SetField(papertypes.FieldVerifiedDate, field.TypeTime, value)
		_node.VerifiedDate = value
	}
	if value, ok := ptc.mutation.Status(); ok {
		_spec.SetField(papertypes.FieldStatus, field.TypeString, value)
		_node.Status = value
	}
	if value, ok := ptc.mutation.DeletedById(); ok {
		_spec.SetField(papertypes.FieldDeletedById, field.TypeInt64, value)
		_node.DeletedById = value
	}
	if value, ok := ptc.mutation.DeletedByUserName(); ok {
		_spec.SetField(papertypes.FieldDeletedByUserName, field.TypeString, value)
		_node.DeletedByUserName = value
	}
	if value, ok := ptc.mutation.DeletedByEmployeeId(); ok {
		_spec.SetField(papertypes.FieldDeletedByEmployeeId, field.TypeString, value)
		_node.DeletedByEmployeeId = value
	}
	if value, ok := ptc.mutation.DeletedByDesignation(); ok {
		_spec.SetField(papertypes.FieldDeletedByDesignation, field.TypeString, value)
		_node.DeletedByDesignation = value
	}
	if value, ok := ptc.mutation.DeletedDate(); ok {
		_spec.SetField(papertypes.FieldDeletedDate, field.TypeTime, value)
		_node.DeletedDate = value
	}
	if nodes := ptc.mutation.PapercodeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   papertypes.PapercodeTable,
			Columns: []string{papertypes.PapercodeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exampapers.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.PaperCode = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// PaperTypesCreateBulk is the builder for creating many PaperTypes entities in bulk.
type PaperTypesCreateBulk struct {
	config
	builders []*PaperTypesCreate
}

// Save creates the PaperTypes entities in the database.
func (ptcb *PaperTypesCreateBulk) Save(ctx context.Context) ([]*PaperTypes, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ptcb.builders))
	nodes := make([]*PaperTypes, len(ptcb.builders))
	mutators := make([]Mutator, len(ptcb.builders))
	for i := range ptcb.builders {
		func(i int, root context.Context) {
			builder := ptcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PaperTypesMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ptcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ptcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ptcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ptcb *PaperTypesCreateBulk) SaveX(ctx context.Context) []*PaperTypes {
	v, err := ptcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ptcb *PaperTypesCreateBulk) Exec(ctx context.Context) error {
	_, err := ptcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ptcb *PaperTypesCreateBulk) ExecX(ctx context.Context) {
	if err := ptcb.Exec(ctx); err != nil {
		panic(err)
	}
}
