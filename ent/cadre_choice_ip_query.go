// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"
	"recruit/ent/cadre_choice_ip"
	"recruit/ent/exam_applications_ip"
	"recruit/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CadreChoiceIPQuery is the builder for querying Cadre_Choice_IP entities.
type CadreChoiceIPQuery struct {
	config
	ctx            *QueryContext
	order          []cadre_choice_ip.OrderOption
	inters         []Interceptor
	predicates     []predicate.Cadre_Choice_IP
	withApplnIPRef *ExamApplicationsIPQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the CadreChoiceIPQuery builder.
func (cciq *CadreChoiceIPQuery) Where(ps ...predicate.Cadre_Choice_IP) *CadreChoiceIPQuery {
	cciq.predicates = append(cciq.predicates, ps...)
	return cciq
}

// Limit the number of records to be returned by this query.
func (cciq *CadreChoiceIPQuery) Limit(limit int) *CadreChoiceIPQuery {
	cciq.ctx.Limit = &limit
	return cciq
}

// Offset to start from.
func (cciq *CadreChoiceIPQuery) Offset(offset int) *CadreChoiceIPQuery {
	cciq.ctx.Offset = &offset
	return cciq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (cciq *CadreChoiceIPQuery) Unique(unique bool) *CadreChoiceIPQuery {
	cciq.ctx.Unique = &unique
	return cciq
}

// Order specifies how the records should be ordered.
func (cciq *CadreChoiceIPQuery) Order(o ...cadre_choice_ip.OrderOption) *CadreChoiceIPQuery {
	cciq.order = append(cciq.order, o...)
	return cciq
}

// QueryApplnIPRef chains the current query on the "ApplnIP_Ref" edge.
func (cciq *CadreChoiceIPQuery) QueryApplnIPRef() *ExamApplicationsIPQuery {
	query := (&ExamApplicationsIPClient{config: cciq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cciq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cciq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(cadre_choice_ip.Table, cadre_choice_ip.FieldID, selector),
			sqlgraph.To(exam_applications_ip.Table, exam_applications_ip.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, cadre_choice_ip.ApplnIPRefTable, cadre_choice_ip.ApplnIPRefColumn),
		)
		fromU = sqlgraph.SetNeighbors(cciq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first Cadre_Choice_IP entity from the query.
// Returns a *NotFoundError when no Cadre_Choice_IP was found.
func (cciq *CadreChoiceIPQuery) First(ctx context.Context) (*Cadre_Choice_IP, error) {
	nodes, err := cciq.Limit(1).All(setContextOp(ctx, cciq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{cadre_choice_ip.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (cciq *CadreChoiceIPQuery) FirstX(ctx context.Context) *Cadre_Choice_IP {
	node, err := cciq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first Cadre_Choice_IP ID from the query.
// Returns a *NotFoundError when no Cadre_Choice_IP ID was found.
func (cciq *CadreChoiceIPQuery) FirstID(ctx context.Context) (id int32, err error) {
	var ids []int32
	if ids, err = cciq.Limit(1).IDs(setContextOp(ctx, cciq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{cadre_choice_ip.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (cciq *CadreChoiceIPQuery) FirstIDX(ctx context.Context) int32 {
	id, err := cciq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single Cadre_Choice_IP entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one Cadre_Choice_IP entity is found.
// Returns a *NotFoundError when no Cadre_Choice_IP entities are found.
func (cciq *CadreChoiceIPQuery) Only(ctx context.Context) (*Cadre_Choice_IP, error) {
	nodes, err := cciq.Limit(2).All(setContextOp(ctx, cciq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{cadre_choice_ip.Label}
	default:
		return nil, &NotSingularError{cadre_choice_ip.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (cciq *CadreChoiceIPQuery) OnlyX(ctx context.Context) *Cadre_Choice_IP {
	node, err := cciq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only Cadre_Choice_IP ID in the query.
// Returns a *NotSingularError when more than one Cadre_Choice_IP ID is found.
// Returns a *NotFoundError when no entities are found.
func (cciq *CadreChoiceIPQuery) OnlyID(ctx context.Context) (id int32, err error) {
	var ids []int32
	if ids, err = cciq.Limit(2).IDs(setContextOp(ctx, cciq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{cadre_choice_ip.Label}
	default:
		err = &NotSingularError{cadre_choice_ip.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (cciq *CadreChoiceIPQuery) OnlyIDX(ctx context.Context) int32 {
	id, err := cciq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Cadre_Choice_IPs.
func (cciq *CadreChoiceIPQuery) All(ctx context.Context) ([]*Cadre_Choice_IP, error) {
	ctx = setContextOp(ctx, cciq.ctx, "All")
	if err := cciq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*Cadre_Choice_IP, *CadreChoiceIPQuery]()
	return withInterceptors[[]*Cadre_Choice_IP](ctx, cciq, qr, cciq.inters)
}

// AllX is like All, but panics if an error occurs.
func (cciq *CadreChoiceIPQuery) AllX(ctx context.Context) []*Cadre_Choice_IP {
	nodes, err := cciq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of Cadre_Choice_IP IDs.
func (cciq *CadreChoiceIPQuery) IDs(ctx context.Context) (ids []int32, err error) {
	if cciq.ctx.Unique == nil && cciq.path != nil {
		cciq.Unique(true)
	}
	ctx = setContextOp(ctx, cciq.ctx, "IDs")
	if err = cciq.Select(cadre_choice_ip.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (cciq *CadreChoiceIPQuery) IDsX(ctx context.Context) []int32 {
	ids, err := cciq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (cciq *CadreChoiceIPQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, cciq.ctx, "Count")
	if err := cciq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, cciq, querierCount[*CadreChoiceIPQuery](), cciq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (cciq *CadreChoiceIPQuery) CountX(ctx context.Context) int {
	count, err := cciq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (cciq *CadreChoiceIPQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, cciq.ctx, "Exist")
	switch _, err := cciq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (cciq *CadreChoiceIPQuery) ExistX(ctx context.Context) bool {
	exist, err := cciq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the CadreChoiceIPQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (cciq *CadreChoiceIPQuery) Clone() *CadreChoiceIPQuery {
	if cciq == nil {
		return nil
	}
	return &CadreChoiceIPQuery{
		config:         cciq.config,
		ctx:            cciq.ctx.Clone(),
		order:          append([]cadre_choice_ip.OrderOption{}, cciq.order...),
		inters:         append([]Interceptor{}, cciq.inters...),
		predicates:     append([]predicate.Cadre_Choice_IP{}, cciq.predicates...),
		withApplnIPRef: cciq.withApplnIPRef.Clone(),
		// clone intermediate query.
		sql:  cciq.sql.Clone(),
		path: cciq.path,
	}
}

// WithApplnIPRef tells the query-builder to eager-load the nodes that are connected to
// the "ApplnIP_Ref" edge. The optional arguments are used to configure the query builder of the edge.
func (cciq *CadreChoiceIPQuery) WithApplnIPRef(opts ...func(*ExamApplicationsIPQuery)) *CadreChoiceIPQuery {
	query := (&ExamApplicationsIPClient{config: cciq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	cciq.withApplnIPRef = query
	return cciq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		ApplicationID int64 `json:"ApplicationID,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.CadreChoiceIP.Query().
//		GroupBy(cadre_choice_ip.FieldApplicationID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (cciq *CadreChoiceIPQuery) GroupBy(field string, fields ...string) *CadreChoiceIPGroupBy {
	cciq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &CadreChoiceIPGroupBy{build: cciq}
	grbuild.flds = &cciq.ctx.Fields
	grbuild.label = cadre_choice_ip.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		ApplicationID int64 `json:"ApplicationID,omitempty"`
//	}
//
//	client.CadreChoiceIP.Query().
//		Select(cadre_choice_ip.FieldApplicationID).
//		Scan(ctx, &v)
func (cciq *CadreChoiceIPQuery) Select(fields ...string) *CadreChoiceIPSelect {
	cciq.ctx.Fields = append(cciq.ctx.Fields, fields...)
	sbuild := &CadreChoiceIPSelect{CadreChoiceIPQuery: cciq}
	sbuild.label = cadre_choice_ip.Label
	sbuild.flds, sbuild.scan = &cciq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a CadreChoiceIPSelect configured with the given aggregations.
func (cciq *CadreChoiceIPQuery) Aggregate(fns ...AggregateFunc) *CadreChoiceIPSelect {
	return cciq.Select().Aggregate(fns...)
}

func (cciq *CadreChoiceIPQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range cciq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, cciq); err != nil {
				return err
			}
		}
	}
	for _, f := range cciq.ctx.Fields {
		if !cadre_choice_ip.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if cciq.path != nil {
		prev, err := cciq.path(ctx)
		if err != nil {
			return err
		}
		cciq.sql = prev
	}
	return nil
}

func (cciq *CadreChoiceIPQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*Cadre_Choice_IP, error) {
	var (
		nodes       = []*Cadre_Choice_IP{}
		_spec       = cciq.querySpec()
		loadedTypes = [1]bool{
			cciq.withApplnIPRef != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*Cadre_Choice_IP).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &Cadre_Choice_IP{config: cciq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, cciq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := cciq.withApplnIPRef; query != nil {
		if err := cciq.loadApplnIPRef(ctx, query, nodes, nil,
			func(n *Cadre_Choice_IP, e *Exam_Applications_IP) { n.Edges.ApplnIPRef = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (cciq *CadreChoiceIPQuery) loadApplnIPRef(ctx context.Context, query *ExamApplicationsIPQuery, nodes []*Cadre_Choice_IP, init func(*Cadre_Choice_IP), assign func(*Cadre_Choice_IP, *Exam_Applications_IP)) error {
	ids := make([]int64, 0, len(nodes))
	nodeids := make(map[int64][]*Cadre_Choice_IP)
	for i := range nodes {
		fk := nodes[i].ApplicationID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(exam_applications_ip.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "ApplicationID" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (cciq *CadreChoiceIPQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := cciq.querySpec()
	_spec.Node.Columns = cciq.ctx.Fields
	if len(cciq.ctx.Fields) > 0 {
		_spec.Unique = cciq.ctx.Unique != nil && *cciq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, cciq.driver, _spec)
}

func (cciq *CadreChoiceIPQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(cadre_choice_ip.Table, cadre_choice_ip.Columns, sqlgraph.NewFieldSpec(cadre_choice_ip.FieldID, field.TypeInt32))
	_spec.From = cciq.sql
	if unique := cciq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if cciq.path != nil {
		_spec.Unique = true
	}
	if fields := cciq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, cadre_choice_ip.FieldID)
		for i := range fields {
			if fields[i] != cadre_choice_ip.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if cciq.withApplnIPRef != nil {
			_spec.Node.AddColumnOnce(cadre_choice_ip.FieldApplicationID)
		}
	}
	if ps := cciq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := cciq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := cciq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := cciq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (cciq *CadreChoiceIPQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(cciq.driver.Dialect())
	t1 := builder.Table(cadre_choice_ip.Table)
	columns := cciq.ctx.Fields
	if len(columns) == 0 {
		columns = cadre_choice_ip.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if cciq.sql != nil {
		selector = cciq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if cciq.ctx.Unique != nil && *cciq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range cciq.predicates {
		p(selector)
	}
	for _, p := range cciq.order {
		p(selector)
	}
	if offset := cciq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := cciq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// CadreChoiceIPGroupBy is the group-by builder for Cadre_Choice_IP entities.
type CadreChoiceIPGroupBy struct {
	selector
	build *CadreChoiceIPQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (ccigb *CadreChoiceIPGroupBy) Aggregate(fns ...AggregateFunc) *CadreChoiceIPGroupBy {
	ccigb.fns = append(ccigb.fns, fns...)
	return ccigb
}

// Scan applies the selector query and scans the result into the given value.
func (ccigb *CadreChoiceIPGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ccigb.build.ctx, "GroupBy")
	if err := ccigb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*CadreChoiceIPQuery, *CadreChoiceIPGroupBy](ctx, ccigb.build, ccigb, ccigb.build.inters, v)
}

func (ccigb *CadreChoiceIPGroupBy) sqlScan(ctx context.Context, root *CadreChoiceIPQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(ccigb.fns))
	for _, fn := range ccigb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*ccigb.flds)+len(ccigb.fns))
		for _, f := range *ccigb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*ccigb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ccigb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// CadreChoiceIPSelect is the builder for selecting fields of CadreChoiceIP entities.
type CadreChoiceIPSelect struct {
	*CadreChoiceIPQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (ccis *CadreChoiceIPSelect) Aggregate(fns ...AggregateFunc) *CadreChoiceIPSelect {
	ccis.fns = append(ccis.fns, fns...)
	return ccis
}

// Scan applies the selector query and scans the result into the given value.
func (ccis *CadreChoiceIPSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ccis.ctx, "Select")
	if err := ccis.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*CadreChoiceIPQuery, *CadreChoiceIPSelect](ctx, ccis.CadreChoiceIPQuery, ccis, ccis.inters, v)
}

func (ccis *CadreChoiceIPSelect) sqlScan(ctx context.Context, root *CadreChoiceIPQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(ccis.fns))
	for _, fn := range ccis.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*ccis.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ccis.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
