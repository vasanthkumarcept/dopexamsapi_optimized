// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"recruit/ent/educationdetails"
	"recruit/ent/logs"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// EducationDetailsCreate is the builder for creating a EducationDetails entity.
type EducationDetailsCreate struct {
	config
	mutation *EducationDetailsMutation
	hooks    []Hook
}

// SetEducationDescription sets the "educationDescription" field.
func (edc *EducationDetailsCreate) SetEducationDescription(s string) *EducationDetailsCreate {
	edc.mutation.SetEducationDescription(s)
	return edc
}

// SetNillableEducationDescription sets the "educationDescription" field if the given value is not nil.
func (edc *EducationDetailsCreate) SetNillableEducationDescription(s *string) *EducationDetailsCreate {
	if s != nil {
		edc.SetEducationDescription(*s)
	}
	return edc
}

// SetOrderNumber sets the "OrderNumber" field.
func (edc *EducationDetailsCreate) SetOrderNumber(s string) *EducationDetailsCreate {
	edc.mutation.SetOrderNumber(s)
	return edc
}

// SetNillableOrderNumber sets the "OrderNumber" field if the given value is not nil.
func (edc *EducationDetailsCreate) SetNillableOrderNumber(s *string) *EducationDetailsCreate {
	if s != nil {
		edc.SetOrderNumber(*s)
	}
	return edc
}

// SetCreatedById sets the "CreatedById" field.
func (edc *EducationDetailsCreate) SetCreatedById(i int64) *EducationDetailsCreate {
	edc.mutation.SetCreatedById(i)
	return edc
}

// SetNillableCreatedById sets the "CreatedById" field if the given value is not nil.
func (edc *EducationDetailsCreate) SetNillableCreatedById(i *int64) *EducationDetailsCreate {
	if i != nil {
		edc.SetCreatedById(*i)
	}
	return edc
}

// SetCreatedByUserName sets the "CreatedByUserName" field.
func (edc *EducationDetailsCreate) SetCreatedByUserName(s string) *EducationDetailsCreate {
	edc.mutation.SetCreatedByUserName(s)
	return edc
}

// SetNillableCreatedByUserName sets the "CreatedByUserName" field if the given value is not nil.
func (edc *EducationDetailsCreate) SetNillableCreatedByUserName(s *string) *EducationDetailsCreate {
	if s != nil {
		edc.SetCreatedByUserName(*s)
	}
	return edc
}

// SetCreatedByEmployeeId sets the "CreatedByEmployeeId" field.
func (edc *EducationDetailsCreate) SetCreatedByEmployeeId(s string) *EducationDetailsCreate {
	edc.mutation.SetCreatedByEmployeeId(s)
	return edc
}

// SetNillableCreatedByEmployeeId sets the "CreatedByEmployeeId" field if the given value is not nil.
func (edc *EducationDetailsCreate) SetNillableCreatedByEmployeeId(s *string) *EducationDetailsCreate {
	if s != nil {
		edc.SetCreatedByEmployeeId(*s)
	}
	return edc
}

// SetCreatedByDesignation sets the "CreatedByDesignation" field.
func (edc *EducationDetailsCreate) SetCreatedByDesignation(s string) *EducationDetailsCreate {
	edc.mutation.SetCreatedByDesignation(s)
	return edc
}

// SetNillableCreatedByDesignation sets the "CreatedByDesignation" field if the given value is not nil.
func (edc *EducationDetailsCreate) SetNillableCreatedByDesignation(s *string) *EducationDetailsCreate {
	if s != nil {
		edc.SetCreatedByDesignation(*s)
	}
	return edc
}

// SetCreatedDate sets the "CreatedDate" field.
func (edc *EducationDetailsCreate) SetCreatedDate(t time.Time) *EducationDetailsCreate {
	edc.mutation.SetCreatedDate(t)
	return edc
}

// SetNillableCreatedDate sets the "CreatedDate" field if the given value is not nil.
func (edc *EducationDetailsCreate) SetNillableCreatedDate(t *time.Time) *EducationDetailsCreate {
	if t != nil {
		edc.SetCreatedDate(*t)
	}
	return edc
}

// SetVerifiedById sets the "VerifiedById" field.
func (edc *EducationDetailsCreate) SetVerifiedById(i int64) *EducationDetailsCreate {
	edc.mutation.SetVerifiedById(i)
	return edc
}

// SetNillableVerifiedById sets the "VerifiedById" field if the given value is not nil.
func (edc *EducationDetailsCreate) SetNillableVerifiedById(i *int64) *EducationDetailsCreate {
	if i != nil {
		edc.SetVerifiedById(*i)
	}
	return edc
}

// SetVerifiedByUserName sets the "VerifiedByUserName" field.
func (edc *EducationDetailsCreate) SetVerifiedByUserName(s string) *EducationDetailsCreate {
	edc.mutation.SetVerifiedByUserName(s)
	return edc
}

// SetNillableVerifiedByUserName sets the "VerifiedByUserName" field if the given value is not nil.
func (edc *EducationDetailsCreate) SetNillableVerifiedByUserName(s *string) *EducationDetailsCreate {
	if s != nil {
		edc.SetVerifiedByUserName(*s)
	}
	return edc
}

// SetVerifiedByEmployeeId sets the "VerifiedByEmployeeId" field.
func (edc *EducationDetailsCreate) SetVerifiedByEmployeeId(s string) *EducationDetailsCreate {
	edc.mutation.SetVerifiedByEmployeeId(s)
	return edc
}

// SetNillableVerifiedByEmployeeId sets the "VerifiedByEmployeeId" field if the given value is not nil.
func (edc *EducationDetailsCreate) SetNillableVerifiedByEmployeeId(s *string) *EducationDetailsCreate {
	if s != nil {
		edc.SetVerifiedByEmployeeId(*s)
	}
	return edc
}

// SetVerifiedByDesignation sets the "VerifiedByDesignation" field.
func (edc *EducationDetailsCreate) SetVerifiedByDesignation(s string) *EducationDetailsCreate {
	edc.mutation.SetVerifiedByDesignation(s)
	return edc
}

// SetNillableVerifiedByDesignation sets the "VerifiedByDesignation" field if the given value is not nil.
func (edc *EducationDetailsCreate) SetNillableVerifiedByDesignation(s *string) *EducationDetailsCreate {
	if s != nil {
		edc.SetVerifiedByDesignation(*s)
	}
	return edc
}

// SetVerifiedDate sets the "VerifiedDate" field.
func (edc *EducationDetailsCreate) SetVerifiedDate(t time.Time) *EducationDetailsCreate {
	edc.mutation.SetVerifiedDate(t)
	return edc
}

// SetNillableVerifiedDate sets the "VerifiedDate" field if the given value is not nil.
func (edc *EducationDetailsCreate) SetNillableVerifiedDate(t *time.Time) *EducationDetailsCreate {
	if t != nil {
		edc.SetVerifiedDate(*t)
	}
	return edc
}

// SetStatus sets the "Status" field.
func (edc *EducationDetailsCreate) SetStatus(s string) *EducationDetailsCreate {
	edc.mutation.SetStatus(s)
	return edc
}

// SetDeletedById sets the "DeletedById" field.
func (edc *EducationDetailsCreate) SetDeletedById(i int64) *EducationDetailsCreate {
	edc.mutation.SetDeletedById(i)
	return edc
}

// SetNillableDeletedById sets the "DeletedById" field if the given value is not nil.
func (edc *EducationDetailsCreate) SetNillableDeletedById(i *int64) *EducationDetailsCreate {
	if i != nil {
		edc.SetDeletedById(*i)
	}
	return edc
}

// SetDeletedByUserName sets the "DeletedByUserName" field.
func (edc *EducationDetailsCreate) SetDeletedByUserName(s string) *EducationDetailsCreate {
	edc.mutation.SetDeletedByUserName(s)
	return edc
}

// SetNillableDeletedByUserName sets the "DeletedByUserName" field if the given value is not nil.
func (edc *EducationDetailsCreate) SetNillableDeletedByUserName(s *string) *EducationDetailsCreate {
	if s != nil {
		edc.SetDeletedByUserName(*s)
	}
	return edc
}

// SetDeletedByEmployeeId sets the "DeletedByEmployeeId" field.
func (edc *EducationDetailsCreate) SetDeletedByEmployeeId(s string) *EducationDetailsCreate {
	edc.mutation.SetDeletedByEmployeeId(s)
	return edc
}

// SetNillableDeletedByEmployeeId sets the "DeletedByEmployeeId" field if the given value is not nil.
func (edc *EducationDetailsCreate) SetNillableDeletedByEmployeeId(s *string) *EducationDetailsCreate {
	if s != nil {
		edc.SetDeletedByEmployeeId(*s)
	}
	return edc
}

// SetDeletedByDesignation sets the "DeletedByDesignation" field.
func (edc *EducationDetailsCreate) SetDeletedByDesignation(s string) *EducationDetailsCreate {
	edc.mutation.SetDeletedByDesignation(s)
	return edc
}

// SetNillableDeletedByDesignation sets the "DeletedByDesignation" field if the given value is not nil.
func (edc *EducationDetailsCreate) SetNillableDeletedByDesignation(s *string) *EducationDetailsCreate {
	if s != nil {
		edc.SetDeletedByDesignation(*s)
	}
	return edc
}

// SetDeletedDate sets the "DeletedDate" field.
func (edc *EducationDetailsCreate) SetDeletedDate(t time.Time) *EducationDetailsCreate {
	edc.mutation.SetDeletedDate(t)
	return edc
}

// SetNillableDeletedDate sets the "DeletedDate" field if the given value is not nil.
func (edc *EducationDetailsCreate) SetNillableDeletedDate(t *time.Time) *EducationDetailsCreate {
	if t != nil {
		edc.SetDeletedDate(*t)
	}
	return edc
}

// SetID sets the "id" field.
func (edc *EducationDetailsCreate) SetID(i int64) *EducationDetailsCreate {
	edc.mutation.SetID(i)
	return edc
}

// AddLogDatumIDs adds the "LogData" edge to the Logs entity by IDs.
func (edc *EducationDetailsCreate) AddLogDatumIDs(ids ...int64) *EducationDetailsCreate {
	edc.mutation.AddLogDatumIDs(ids...)
	return edc
}

// AddLogData adds the "LogData" edges to the Logs entity.
func (edc *EducationDetailsCreate) AddLogData(l ...*Logs) *EducationDetailsCreate {
	ids := make([]int64, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return edc.AddLogDatumIDs(ids...)
}

// Mutation returns the EducationDetailsMutation object of the builder.
func (edc *EducationDetailsCreate) Mutation() *EducationDetailsMutation {
	return edc.mutation
}

// Save creates the EducationDetails in the database.
func (edc *EducationDetailsCreate) Save(ctx context.Context) (*EducationDetails, error) {
	return withHooks(ctx, edc.sqlSave, edc.mutation, edc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (edc *EducationDetailsCreate) SaveX(ctx context.Context) *EducationDetails {
	v, err := edc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (edc *EducationDetailsCreate) Exec(ctx context.Context) error {
	_, err := edc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (edc *EducationDetailsCreate) ExecX(ctx context.Context) {
	if err := edc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (edc *EducationDetailsCreate) check() error {
	if _, ok := edc.mutation.Status(); !ok {
		return &ValidationError{Name: "Status", err: errors.New(`ent: missing required field "EducationDetails.Status"`)}
	}
	return nil
}

func (edc *EducationDetailsCreate) sqlSave(ctx context.Context) (*EducationDetails, error) {
	if err := edc.check(); err != nil {
		return nil, err
	}
	_node, _spec := edc.createSpec()
	if err := sqlgraph.CreateNode(ctx, edc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	edc.mutation.id = &_node.ID
	edc.mutation.done = true
	return _node, nil
}

func (edc *EducationDetailsCreate) createSpec() (*EducationDetails, *sqlgraph.CreateSpec) {
	var (
		_node = &EducationDetails{config: edc.config}
		_spec = sqlgraph.NewCreateSpec(educationdetails.Table, sqlgraph.NewFieldSpec(educationdetails.FieldID, field.TypeInt64))
	)
	if id, ok := edc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := edc.mutation.EducationDescription(); ok {
		_spec.SetField(educationdetails.FieldEducationDescription, field.TypeString, value)
		_node.EducationDescription = value
	}
	if value, ok := edc.mutation.OrderNumber(); ok {
		_spec.SetField(educationdetails.FieldOrderNumber, field.TypeString, value)
		_node.OrderNumber = value
	}
	if value, ok := edc.mutation.CreatedById(); ok {
		_spec.SetField(educationdetails.FieldCreatedById, field.TypeInt64, value)
		_node.CreatedById = value
	}
	if value, ok := edc.mutation.CreatedByUserName(); ok {
		_spec.SetField(educationdetails.FieldCreatedByUserName, field.TypeString, value)
		_node.CreatedByUserName = value
	}
	if value, ok := edc.mutation.CreatedByEmployeeId(); ok {
		_spec.SetField(educationdetails.FieldCreatedByEmployeeId, field.TypeString, value)
		_node.CreatedByEmployeeId = value
	}
	if value, ok := edc.mutation.CreatedByDesignation(); ok {
		_spec.SetField(educationdetails.FieldCreatedByDesignation, field.TypeString, value)
		_node.CreatedByDesignation = value
	}
	if value, ok := edc.mutation.CreatedDate(); ok {
		_spec.SetField(educationdetails.FieldCreatedDate, field.TypeTime, value)
		_node.CreatedDate = value
	}
	if value, ok := edc.mutation.VerifiedById(); ok {
		_spec.SetField(educationdetails.FieldVerifiedById, field.TypeInt64, value)
		_node.VerifiedById = value
	}
	if value, ok := edc.mutation.VerifiedByUserName(); ok {
		_spec.SetField(educationdetails.FieldVerifiedByUserName, field.TypeString, value)
		_node.VerifiedByUserName = value
	}
	if value, ok := edc.mutation.VerifiedByEmployeeId(); ok {
		_spec.SetField(educationdetails.FieldVerifiedByEmployeeId, field.TypeString, value)
		_node.VerifiedByEmployeeId = value
	}
	if value, ok := edc.mutation.VerifiedByDesignation(); ok {
		_spec.SetField(educationdetails.FieldVerifiedByDesignation, field.TypeString, value)
		_node.VerifiedByDesignation = value
	}
	if value, ok := edc.mutation.VerifiedDate(); ok {
		_spec.SetField(educationdetails.FieldVerifiedDate, field.TypeTime, value)
		_node.VerifiedDate = value
	}
	if value, ok := edc.mutation.Status(); ok {
		_spec.SetField(educationdetails.FieldStatus, field.TypeString, value)
		_node.Status = value
	}
	if value, ok := edc.mutation.DeletedById(); ok {
		_spec.SetField(educationdetails.FieldDeletedById, field.TypeInt64, value)
		_node.DeletedById = value
	}
	if value, ok := edc.mutation.DeletedByUserName(); ok {
		_spec.SetField(educationdetails.FieldDeletedByUserName, field.TypeString, value)
		_node.DeletedByUserName = value
	}
	if value, ok := edc.mutation.DeletedByEmployeeId(); ok {
		_spec.SetField(educationdetails.FieldDeletedByEmployeeId, field.TypeString, value)
		_node.DeletedByEmployeeId = value
	}
	if value, ok := edc.mutation.DeletedByDesignation(); ok {
		_spec.SetField(educationdetails.FieldDeletedByDesignation, field.TypeString, value)
		_node.DeletedByDesignation = value
	}
	if value, ok := edc.mutation.DeletedDate(); ok {
		_spec.SetField(educationdetails.FieldDeletedDate, field.TypeTime, value)
		_node.DeletedDate = value
	}
	if nodes := edc.mutation.LogDataIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   educationdetails.LogDataTable,
			Columns: []string{educationdetails.LogDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(logs.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// EducationDetailsCreateBulk is the builder for creating many EducationDetails entities in bulk.
type EducationDetailsCreateBulk struct {
	config
	builders []*EducationDetailsCreate
}

// Save creates the EducationDetails entities in the database.
func (edcb *EducationDetailsCreateBulk) Save(ctx context.Context) ([]*EducationDetails, error) {
	specs := make([]*sqlgraph.CreateSpec, len(edcb.builders))
	nodes := make([]*EducationDetails, len(edcb.builders))
	mutators := make([]Mutator, len(edcb.builders))
	for i := range edcb.builders {
		func(i int, root context.Context) {
			builder := edcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*EducationDetailsMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, edcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, edcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, edcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (edcb *EducationDetailsCreateBulk) SaveX(ctx context.Context) []*EducationDetails {
	v, err := edcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (edcb *EducationDetailsCreateBulk) Exec(ctx context.Context) error {
	_, err := edcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (edcb *EducationDetailsCreateBulk) ExecX(ctx context.Context) {
	if err := edcb.Exec(ctx); err != nil {
		panic(err)
	}
}
