// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"recruit/ent/exam_application_mtspmmg"
	"recruit/ent/exam_applications_gdspa"
	"recruit/ent/exam_applications_gdspm"
	"recruit/ent/exam_applications_ip"
	"recruit/ent/exam_applications_pmpa"
	"recruit/ent/exam_applications_ps"
	"recruit/ent/examcitycenter"
	"recruit/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ExamCityCenterUpdate is the builder for updating ExamCityCenter entities.
type ExamCityCenterUpdate struct {
	config
	hooks    []Hook
	mutation *ExamCityCenterMutation
}

// Where appends a list predicates to the ExamCityCenterUpdate builder.
func (eccu *ExamCityCenterUpdate) Where(ps ...predicate.ExamCityCenter) *ExamCityCenterUpdate {
	eccu.mutation.Where(ps...)
	return eccu
}

// SetExamCode sets the "ExamCode" field.
func (eccu *ExamCityCenterUpdate) SetExamCode(i int32) *ExamCityCenterUpdate {
	eccu.mutation.ResetExamCode()
	eccu.mutation.SetExamCode(i)
	return eccu
}

// SetNillableExamCode sets the "ExamCode" field if the given value is not nil.
func (eccu *ExamCityCenterUpdate) SetNillableExamCode(i *int32) *ExamCityCenterUpdate {
	if i != nil {
		eccu.SetExamCode(*i)
	}
	return eccu
}

// AddExamCode adds i to the "ExamCode" field.
func (eccu *ExamCityCenterUpdate) AddExamCode(i int32) *ExamCityCenterUpdate {
	eccu.mutation.AddExamCode(i)
	return eccu
}

// ClearExamCode clears the value of the "ExamCode" field.
func (eccu *ExamCityCenterUpdate) ClearExamCode() *ExamCityCenterUpdate {
	eccu.mutation.ClearExamCode()
	return eccu
}

// SetExamName sets the "ExamName" field.
func (eccu *ExamCityCenterUpdate) SetExamName(s string) *ExamCityCenterUpdate {
	eccu.mutation.SetExamName(s)
	return eccu
}

// SetNillableExamName sets the "ExamName" field if the given value is not nil.
func (eccu *ExamCityCenterUpdate) SetNillableExamName(s *string) *ExamCityCenterUpdate {
	if s != nil {
		eccu.SetExamName(*s)
	}
	return eccu
}

// ClearExamName clears the value of the "ExamName" field.
func (eccu *ExamCityCenterUpdate) ClearExamName() *ExamCityCenterUpdate {
	eccu.mutation.ClearExamName()
	return eccu
}

// SetExamShortName sets the "ExamShortName" field.
func (eccu *ExamCityCenterUpdate) SetExamShortName(s string) *ExamCityCenterUpdate {
	eccu.mutation.SetExamShortName(s)
	return eccu
}

// SetNillableExamShortName sets the "ExamShortName" field if the given value is not nil.
func (eccu *ExamCityCenterUpdate) SetNillableExamShortName(s *string) *ExamCityCenterUpdate {
	if s != nil {
		eccu.SetExamShortName(*s)
	}
	return eccu
}

// ClearExamShortName clears the value of the "ExamShortName" field.
func (eccu *ExamCityCenterUpdate) ClearExamShortName() *ExamCityCenterUpdate {
	eccu.mutation.ClearExamShortName()
	return eccu
}

// SetExamYear sets the "ExamYear" field.
func (eccu *ExamCityCenterUpdate) SetExamYear(i int32) *ExamCityCenterUpdate {
	eccu.mutation.ResetExamYear()
	eccu.mutation.SetExamYear(i)
	return eccu
}

// SetNillableExamYear sets the "ExamYear" field if the given value is not nil.
func (eccu *ExamCityCenterUpdate) SetNillableExamYear(i *int32) *ExamCityCenterUpdate {
	if i != nil {
		eccu.SetExamYear(*i)
	}
	return eccu
}

// AddExamYear adds i to the "ExamYear" field.
func (eccu *ExamCityCenterUpdate) AddExamYear(i int32) *ExamCityCenterUpdate {
	eccu.mutation.AddExamYear(i)
	return eccu
}

// ClearExamYear clears the value of the "ExamYear" field.
func (eccu *ExamCityCenterUpdate) ClearExamYear() *ExamCityCenterUpdate {
	eccu.mutation.ClearExamYear()
	return eccu
}

// SetConductedBy sets the "ConductedBy" field.
func (eccu *ExamCityCenterUpdate) SetConductedBy(s string) *ExamCityCenterUpdate {
	eccu.mutation.SetConductedBy(s)
	return eccu
}

// SetNillableConductedBy sets the "ConductedBy" field if the given value is not nil.
func (eccu *ExamCityCenterUpdate) SetNillableConductedBy(s *string) *ExamCityCenterUpdate {
	if s != nil {
		eccu.SetConductedBy(*s)
	}
	return eccu
}

// ClearConductedBy clears the value of the "ConductedBy" field.
func (eccu *ExamCityCenterUpdate) ClearConductedBy() *ExamCityCenterUpdate {
	eccu.mutation.ClearConductedBy()
	return eccu
}

// SetNodalOfficeFacilityID sets the "NodalOfficeFacilityID" field.
func (eccu *ExamCityCenterUpdate) SetNodalOfficeFacilityID(s string) *ExamCityCenterUpdate {
	eccu.mutation.SetNodalOfficeFacilityID(s)
	return eccu
}

// SetNillableNodalOfficeFacilityID sets the "NodalOfficeFacilityID" field if the given value is not nil.
func (eccu *ExamCityCenterUpdate) SetNillableNodalOfficeFacilityID(s *string) *ExamCityCenterUpdate {
	if s != nil {
		eccu.SetNodalOfficeFacilityID(*s)
	}
	return eccu
}

// ClearNodalOfficeFacilityID clears the value of the "NodalOfficeFacilityID" field.
func (eccu *ExamCityCenterUpdate) ClearNodalOfficeFacilityID() *ExamCityCenterUpdate {
	eccu.mutation.ClearNodalOfficeFacilityID()
	return eccu
}

// SetNodalOfficeName sets the "NodalOfficeName" field.
func (eccu *ExamCityCenterUpdate) SetNodalOfficeName(s string) *ExamCityCenterUpdate {
	eccu.mutation.SetNodalOfficeName(s)
	return eccu
}

// SetNillableNodalOfficeName sets the "NodalOfficeName" field if the given value is not nil.
func (eccu *ExamCityCenterUpdate) SetNillableNodalOfficeName(s *string) *ExamCityCenterUpdate {
	if s != nil {
		eccu.SetNodalOfficeName(*s)
	}
	return eccu
}

// ClearNodalOfficeName clears the value of the "NodalOfficeName" field.
func (eccu *ExamCityCenterUpdate) ClearNodalOfficeName() *ExamCityCenterUpdate {
	eccu.mutation.ClearNodalOfficeName()
	return eccu
}

// SetNotificationCode sets the "NotificationCode" field.
func (eccu *ExamCityCenterUpdate) SetNotificationCode(i int32) *ExamCityCenterUpdate {
	eccu.mutation.ResetNotificationCode()
	eccu.mutation.SetNotificationCode(i)
	return eccu
}

// SetNillableNotificationCode sets the "NotificationCode" field if the given value is not nil.
func (eccu *ExamCityCenterUpdate) SetNillableNotificationCode(i *int32) *ExamCityCenterUpdate {
	if i != nil {
		eccu.SetNotificationCode(*i)
	}
	return eccu
}

// AddNotificationCode adds i to the "NotificationCode" field.
func (eccu *ExamCityCenterUpdate) AddNotificationCode(i int32) *ExamCityCenterUpdate {
	eccu.mutation.AddNotificationCode(i)
	return eccu
}

// ClearNotificationCode clears the value of the "NotificationCode" field.
func (eccu *ExamCityCenterUpdate) ClearNotificationCode() *ExamCityCenterUpdate {
	eccu.mutation.ClearNotificationCode()
	return eccu
}

// SetNotificationNumber sets the "NotificationNumber" field.
func (eccu *ExamCityCenterUpdate) SetNotificationNumber(s string) *ExamCityCenterUpdate {
	eccu.mutation.SetNotificationNumber(s)
	return eccu
}

// SetNillableNotificationNumber sets the "NotificationNumber" field if the given value is not nil.
func (eccu *ExamCityCenterUpdate) SetNillableNotificationNumber(s *string) *ExamCityCenterUpdate {
	if s != nil {
		eccu.SetNotificationNumber(*s)
	}
	return eccu
}

// ClearNotificationNumber clears the value of the "NotificationNumber" field.
func (eccu *ExamCityCenterUpdate) ClearNotificationNumber() *ExamCityCenterUpdate {
	eccu.mutation.ClearNotificationNumber()
	return eccu
}

// SetCenterCityName sets the "CenterCityName" field.
func (eccu *ExamCityCenterUpdate) SetCenterCityName(s string) *ExamCityCenterUpdate {
	eccu.mutation.SetCenterCityName(s)
	return eccu
}

// SetNillableCenterCityName sets the "CenterCityName" field if the given value is not nil.
func (eccu *ExamCityCenterUpdate) SetNillableCenterCityName(s *string) *ExamCityCenterUpdate {
	if s != nil {
		eccu.SetCenterCityName(*s)
	}
	return eccu
}

// ClearCenterCityName clears the value of the "CenterCityName" field.
func (eccu *ExamCityCenterUpdate) ClearCenterCityName() *ExamCityCenterUpdate {
	eccu.mutation.ClearCenterCityName()
	return eccu
}

// SetCreatedById sets the "CreatedById" field.
func (eccu *ExamCityCenterUpdate) SetCreatedById(i int64) *ExamCityCenterUpdate {
	eccu.mutation.ResetCreatedById()
	eccu.mutation.SetCreatedById(i)
	return eccu
}

// SetNillableCreatedById sets the "CreatedById" field if the given value is not nil.
func (eccu *ExamCityCenterUpdate) SetNillableCreatedById(i *int64) *ExamCityCenterUpdate {
	if i != nil {
		eccu.SetCreatedById(*i)
	}
	return eccu
}

// AddCreatedById adds i to the "CreatedById" field.
func (eccu *ExamCityCenterUpdate) AddCreatedById(i int64) *ExamCityCenterUpdate {
	eccu.mutation.AddCreatedById(i)
	return eccu
}

// ClearCreatedById clears the value of the "CreatedById" field.
func (eccu *ExamCityCenterUpdate) ClearCreatedById() *ExamCityCenterUpdate {
	eccu.mutation.ClearCreatedById()
	return eccu
}

// SetCreatedByUserName sets the "CreatedByUserName" field.
func (eccu *ExamCityCenterUpdate) SetCreatedByUserName(s string) *ExamCityCenterUpdate {
	eccu.mutation.SetCreatedByUserName(s)
	return eccu
}

// SetNillableCreatedByUserName sets the "CreatedByUserName" field if the given value is not nil.
func (eccu *ExamCityCenterUpdate) SetNillableCreatedByUserName(s *string) *ExamCityCenterUpdate {
	if s != nil {
		eccu.SetCreatedByUserName(*s)
	}
	return eccu
}

// ClearCreatedByUserName clears the value of the "CreatedByUserName" field.
func (eccu *ExamCityCenterUpdate) ClearCreatedByUserName() *ExamCityCenterUpdate {
	eccu.mutation.ClearCreatedByUserName()
	return eccu
}

// SetCreatedByEmpId sets the "CreatedByEmpId" field.
func (eccu *ExamCityCenterUpdate) SetCreatedByEmpId(i int64) *ExamCityCenterUpdate {
	eccu.mutation.ResetCreatedByEmpId()
	eccu.mutation.SetCreatedByEmpId(i)
	return eccu
}

// SetNillableCreatedByEmpId sets the "CreatedByEmpId" field if the given value is not nil.
func (eccu *ExamCityCenterUpdate) SetNillableCreatedByEmpId(i *int64) *ExamCityCenterUpdate {
	if i != nil {
		eccu.SetCreatedByEmpId(*i)
	}
	return eccu
}

// AddCreatedByEmpId adds i to the "CreatedByEmpId" field.
func (eccu *ExamCityCenterUpdate) AddCreatedByEmpId(i int64) *ExamCityCenterUpdate {
	eccu.mutation.AddCreatedByEmpId(i)
	return eccu
}

// ClearCreatedByEmpId clears the value of the "CreatedByEmpId" field.
func (eccu *ExamCityCenterUpdate) ClearCreatedByEmpId() *ExamCityCenterUpdate {
	eccu.mutation.ClearCreatedByEmpId()
	return eccu
}

// SetCreatedByDesignation sets the "CreatedByDesignation" field.
func (eccu *ExamCityCenterUpdate) SetCreatedByDesignation(s string) *ExamCityCenterUpdate {
	eccu.mutation.SetCreatedByDesignation(s)
	return eccu
}

// SetNillableCreatedByDesignation sets the "CreatedByDesignation" field if the given value is not nil.
func (eccu *ExamCityCenterUpdate) SetNillableCreatedByDesignation(s *string) *ExamCityCenterUpdate {
	if s != nil {
		eccu.SetCreatedByDesignation(*s)
	}
	return eccu
}

// ClearCreatedByDesignation clears the value of the "CreatedByDesignation" field.
func (eccu *ExamCityCenterUpdate) ClearCreatedByDesignation() *ExamCityCenterUpdate {
	eccu.mutation.ClearCreatedByDesignation()
	return eccu
}

// SetCreatedDate sets the "CreatedDate" field.
func (eccu *ExamCityCenterUpdate) SetCreatedDate(t time.Time) *ExamCityCenterUpdate {
	eccu.mutation.SetCreatedDate(t)
	return eccu
}

// SetNillableCreatedDate sets the "CreatedDate" field if the given value is not nil.
func (eccu *ExamCityCenterUpdate) SetNillableCreatedDate(t *time.Time) *ExamCityCenterUpdate {
	if t != nil {
		eccu.SetCreatedDate(*t)
	}
	return eccu
}

// ClearCreatedDate clears the value of the "CreatedDate" field.
func (eccu *ExamCityCenterUpdate) ClearCreatedDate() *ExamCityCenterUpdate {
	eccu.mutation.ClearCreatedDate()
	return eccu
}

// SetStatus sets the "Status" field.
func (eccu *ExamCityCenterUpdate) SetStatus(s string) *ExamCityCenterUpdate {
	eccu.mutation.SetStatus(s)
	return eccu
}

// SetNillableStatus sets the "Status" field if the given value is not nil.
func (eccu *ExamCityCenterUpdate) SetNillableStatus(s *string) *ExamCityCenterUpdate {
	if s != nil {
		eccu.SetStatus(*s)
	}
	return eccu
}

// ClearStatus clears the value of the "Status" field.
func (eccu *ExamCityCenterUpdate) ClearStatus() *ExamCityCenterUpdate {
	eccu.mutation.ClearStatus()
	return eccu
}

// SetDeletedbyid sets the "deletedbyid" field.
func (eccu *ExamCityCenterUpdate) SetDeletedbyid(i int64) *ExamCityCenterUpdate {
	eccu.mutation.ResetDeletedbyid()
	eccu.mutation.SetDeletedbyid(i)
	return eccu
}

// SetNillableDeletedbyid sets the "deletedbyid" field if the given value is not nil.
func (eccu *ExamCityCenterUpdate) SetNillableDeletedbyid(i *int64) *ExamCityCenterUpdate {
	if i != nil {
		eccu.SetDeletedbyid(*i)
	}
	return eccu
}

// AddDeletedbyid adds i to the "deletedbyid" field.
func (eccu *ExamCityCenterUpdate) AddDeletedbyid(i int64) *ExamCityCenterUpdate {
	eccu.mutation.AddDeletedbyid(i)
	return eccu
}

// ClearDeletedbyid clears the value of the "deletedbyid" field.
func (eccu *ExamCityCenterUpdate) ClearDeletedbyid() *ExamCityCenterUpdate {
	eccu.mutation.ClearDeletedbyid()
	return eccu
}

// SetDeletedbyusername sets the "deletedbyusername" field.
func (eccu *ExamCityCenterUpdate) SetDeletedbyusername(s string) *ExamCityCenterUpdate {
	eccu.mutation.SetDeletedbyusername(s)
	return eccu
}

// SetNillableDeletedbyusername sets the "deletedbyusername" field if the given value is not nil.
func (eccu *ExamCityCenterUpdate) SetNillableDeletedbyusername(s *string) *ExamCityCenterUpdate {
	if s != nil {
		eccu.SetDeletedbyusername(*s)
	}
	return eccu
}

// ClearDeletedbyusername clears the value of the "deletedbyusername" field.
func (eccu *ExamCityCenterUpdate) ClearDeletedbyusername() *ExamCityCenterUpdate {
	eccu.mutation.ClearDeletedbyusername()
	return eccu
}

// SetDeletedbyEmployeeid sets the "deletedbyEmployeeid" field.
func (eccu *ExamCityCenterUpdate) SetDeletedbyEmployeeid(i int64) *ExamCityCenterUpdate {
	eccu.mutation.ResetDeletedbyEmployeeid()
	eccu.mutation.SetDeletedbyEmployeeid(i)
	return eccu
}

// SetNillableDeletedbyEmployeeid sets the "deletedbyEmployeeid" field if the given value is not nil.
func (eccu *ExamCityCenterUpdate) SetNillableDeletedbyEmployeeid(i *int64) *ExamCityCenterUpdate {
	if i != nil {
		eccu.SetDeletedbyEmployeeid(*i)
	}
	return eccu
}

// AddDeletedbyEmployeeid adds i to the "deletedbyEmployeeid" field.
func (eccu *ExamCityCenterUpdate) AddDeletedbyEmployeeid(i int64) *ExamCityCenterUpdate {
	eccu.mutation.AddDeletedbyEmployeeid(i)
	return eccu
}

// ClearDeletedbyEmployeeid clears the value of the "deletedbyEmployeeid" field.
func (eccu *ExamCityCenterUpdate) ClearDeletedbyEmployeeid() *ExamCityCenterUpdate {
	eccu.mutation.ClearDeletedbyEmployeeid()
	return eccu
}

// SetDeletedbyDesignation sets the "deletedbyDesignation" field.
func (eccu *ExamCityCenterUpdate) SetDeletedbyDesignation(s string) *ExamCityCenterUpdate {
	eccu.mutation.SetDeletedbyDesignation(s)
	return eccu
}

// SetNillableDeletedbyDesignation sets the "deletedbyDesignation" field if the given value is not nil.
func (eccu *ExamCityCenterUpdate) SetNillableDeletedbyDesignation(s *string) *ExamCityCenterUpdate {
	if s != nil {
		eccu.SetDeletedbyDesignation(*s)
	}
	return eccu
}

// ClearDeletedbyDesignation clears the value of the "deletedbyDesignation" field.
func (eccu *ExamCityCenterUpdate) ClearDeletedbyDesignation() *ExamCityCenterUpdate {
	eccu.mutation.ClearDeletedbyDesignation()
	return eccu
}

// SetDeletedDate sets the "deletedDate" field.
func (eccu *ExamCityCenterUpdate) SetDeletedDate(t time.Time) *ExamCityCenterUpdate {
	eccu.mutation.SetDeletedDate(t)
	return eccu
}

// SetNillableDeletedDate sets the "deletedDate" field if the given value is not nil.
func (eccu *ExamCityCenterUpdate) SetNillableDeletedDate(t *time.Time) *ExamCityCenterUpdate {
	if t != nil {
		eccu.SetDeletedDate(*t)
	}
	return eccu
}

// ClearDeletedDate clears the value of the "deletedDate" field.
func (eccu *ExamCityCenterUpdate) ClearDeletedDate() *ExamCityCenterUpdate {
	eccu.mutation.ClearDeletedDate()
	return eccu
}

// SetCircleCityName sets the "CircleCityName" field.
func (eccu *ExamCityCenterUpdate) SetCircleCityName(s string) *ExamCityCenterUpdate {
	eccu.mutation.SetCircleCityName(s)
	return eccu
}

// SetNillableCircleCityName sets the "CircleCityName" field if the given value is not nil.
func (eccu *ExamCityCenterUpdate) SetNillableCircleCityName(s *string) *ExamCityCenterUpdate {
	if s != nil {
		eccu.SetCircleCityName(*s)
	}
	return eccu
}

// ClearCircleCityName clears the value of the "CircleCityName" field.
func (eccu *ExamCityCenterUpdate) ClearCircleCityName() *ExamCityCenterUpdate {
	eccu.mutation.ClearCircleCityName()
	return eccu
}

// SetDivisionCode sets the "DivisionCode" field.
func (eccu *ExamCityCenterUpdate) SetDivisionCode(i int32) *ExamCityCenterUpdate {
	eccu.mutation.ResetDivisionCode()
	eccu.mutation.SetDivisionCode(i)
	return eccu
}

// SetNillableDivisionCode sets the "DivisionCode" field if the given value is not nil.
func (eccu *ExamCityCenterUpdate) SetNillableDivisionCode(i *int32) *ExamCityCenterUpdate {
	if i != nil {
		eccu.SetDivisionCode(*i)
	}
	return eccu
}

// AddDivisionCode adds i to the "DivisionCode" field.
func (eccu *ExamCityCenterUpdate) AddDivisionCode(i int32) *ExamCityCenterUpdate {
	eccu.mutation.AddDivisionCode(i)
	return eccu
}

// ClearDivisionCode clears the value of the "DivisionCode" field.
func (eccu *ExamCityCenterUpdate) ClearDivisionCode() *ExamCityCenterUpdate {
	eccu.mutation.ClearDivisionCode()
	return eccu
}

// SetRegionCode sets the "RegionCode" field.
func (eccu *ExamCityCenterUpdate) SetRegionCode(i int32) *ExamCityCenterUpdate {
	eccu.mutation.ResetRegionCode()
	eccu.mutation.SetRegionCode(i)
	return eccu
}

// SetNillableRegionCode sets the "RegionCode" field if the given value is not nil.
func (eccu *ExamCityCenterUpdate) SetNillableRegionCode(i *int32) *ExamCityCenterUpdate {
	if i != nil {
		eccu.SetRegionCode(*i)
	}
	return eccu
}

// AddRegionCode adds i to the "RegionCode" field.
func (eccu *ExamCityCenterUpdate) AddRegionCode(i int32) *ExamCityCenterUpdate {
	eccu.mutation.AddRegionCode(i)
	return eccu
}

// ClearRegionCode clears the value of the "RegionCode" field.
func (eccu *ExamCityCenterUpdate) ClearRegionCode() *ExamCityCenterUpdate {
	eccu.mutation.ClearRegionCode()
	return eccu
}

// SetDivisionName sets the "DivisionName" field.
func (eccu *ExamCityCenterUpdate) SetDivisionName(s string) *ExamCityCenterUpdate {
	eccu.mutation.SetDivisionName(s)
	return eccu
}

// SetNillableDivisionName sets the "DivisionName" field if the given value is not nil.
func (eccu *ExamCityCenterUpdate) SetNillableDivisionName(s *string) *ExamCityCenterUpdate {
	if s != nil {
		eccu.SetDivisionName(*s)
	}
	return eccu
}

// ClearDivisionName clears the value of the "DivisionName" field.
func (eccu *ExamCityCenterUpdate) ClearDivisionName() *ExamCityCenterUpdate {
	eccu.mutation.ClearDivisionName()
	return eccu
}

// SetRegionID sets the "RegionID" field.
func (eccu *ExamCityCenterUpdate) SetRegionID(i int32) *ExamCityCenterUpdate {
	eccu.mutation.ResetRegionID()
	eccu.mutation.SetRegionID(i)
	return eccu
}

// SetNillableRegionID sets the "RegionID" field if the given value is not nil.
func (eccu *ExamCityCenterUpdate) SetNillableRegionID(i *int32) *ExamCityCenterUpdate {
	if i != nil {
		eccu.SetRegionID(*i)
	}
	return eccu
}

// AddRegionID adds i to the "RegionID" field.
func (eccu *ExamCityCenterUpdate) AddRegionID(i int32) *ExamCityCenterUpdate {
	eccu.mutation.AddRegionID(i)
	return eccu
}

// ClearRegionID clears the value of the "RegionID" field.
func (eccu *ExamCityCenterUpdate) ClearRegionID() *ExamCityCenterUpdate {
	eccu.mutation.ClearRegionID()
	return eccu
}

// SetRegionName sets the "RegionName" field.
func (eccu *ExamCityCenterUpdate) SetRegionName(s string) *ExamCityCenterUpdate {
	eccu.mutation.SetRegionName(s)
	return eccu
}

// SetNillableRegionName sets the "RegionName" field if the given value is not nil.
func (eccu *ExamCityCenterUpdate) SetNillableRegionName(s *string) *ExamCityCenterUpdate {
	if s != nil {
		eccu.SetRegionName(*s)
	}
	return eccu
}

// ClearRegionName clears the value of the "RegionName" field.
func (eccu *ExamCityCenterUpdate) ClearRegionName() *ExamCityCenterUpdate {
	eccu.mutation.ClearRegionName()
	return eccu
}

// SetRegionCityName sets the "RegionCityName" field.
func (eccu *ExamCityCenterUpdate) SetRegionCityName(s string) *ExamCityCenterUpdate {
	eccu.mutation.SetRegionCityName(s)
	return eccu
}

// SetNillableRegionCityName sets the "RegionCityName" field if the given value is not nil.
func (eccu *ExamCityCenterUpdate) SetNillableRegionCityName(s *string) *ExamCityCenterUpdate {
	if s != nil {
		eccu.SetRegionCityName(*s)
	}
	return eccu
}

// ClearRegionCityName clears the value of the "RegionCityName" field.
func (eccu *ExamCityCenterUpdate) ClearRegionCityName() *ExamCityCenterUpdate {
	eccu.mutation.ClearRegionCityName()
	return eccu
}

// SetCentreCityName sets the "CentreCityName" field.
func (eccu *ExamCityCenterUpdate) SetCentreCityName(s string) *ExamCityCenterUpdate {
	eccu.mutation.SetCentreCityName(s)
	return eccu
}

// SetNillableCentreCityName sets the "CentreCityName" field if the given value is not nil.
func (eccu *ExamCityCenterUpdate) SetNillableCentreCityName(s *string) *ExamCityCenterUpdate {
	if s != nil {
		eccu.SetCentreCityName(*s)
	}
	return eccu
}

// ClearCentreCityName clears the value of the "CentreCityName" field.
func (eccu *ExamCityCenterUpdate) ClearCentreCityName() *ExamCityCenterUpdate {
	eccu.mutation.ClearCentreCityName()
	return eccu
}

// SetRemarks sets the "Remarks" field.
func (eccu *ExamCityCenterUpdate) SetRemarks(s string) *ExamCityCenterUpdate {
	eccu.mutation.SetRemarks(s)
	return eccu
}

// SetNillableRemarks sets the "Remarks" field if the given value is not nil.
func (eccu *ExamCityCenterUpdate) SetNillableRemarks(s *string) *ExamCityCenterUpdate {
	if s != nil {
		eccu.SetRemarks(*s)
	}
	return eccu
}

// ClearRemarks clears the value of the "Remarks" field.
func (eccu *ExamCityCenterUpdate) ClearRemarks() *ExamCityCenterUpdate {
	eccu.mutation.ClearRemarks()
	return eccu
}

// SetUpdatedAt sets the "UpdatedAt" field.
func (eccu *ExamCityCenterUpdate) SetUpdatedAt(t time.Time) *ExamCityCenterUpdate {
	eccu.mutation.SetUpdatedAt(t)
	return eccu
}

// SetNillableUpdatedAt sets the "UpdatedAt" field if the given value is not nil.
func (eccu *ExamCityCenterUpdate) SetNillableUpdatedAt(t *time.Time) *ExamCityCenterUpdate {
	if t != nil {
		eccu.SetUpdatedAt(*t)
	}
	return eccu
}

// ClearUpdatedAt clears the value of the "UpdatedAt" field.
func (eccu *ExamCityCenterUpdate) ClearUpdatedAt() *ExamCityCenterUpdate {
	eccu.mutation.ClearUpdatedAt()
	return eccu
}

// SetUpdatedBy sets the "UpdatedBy" field.
func (eccu *ExamCityCenterUpdate) SetUpdatedBy(s string) *ExamCityCenterUpdate {
	eccu.mutation.SetUpdatedBy(s)
	return eccu
}

// SetNillableUpdatedBy sets the "UpdatedBy" field if the given value is not nil.
func (eccu *ExamCityCenterUpdate) SetNillableUpdatedBy(s *string) *ExamCityCenterUpdate {
	if s != nil {
		eccu.SetUpdatedBy(*s)
	}
	return eccu
}

// ClearUpdatedBy clears the value of the "UpdatedBy" field.
func (eccu *ExamCityCenterUpdate) ClearUpdatedBy() *ExamCityCenterUpdate {
	eccu.mutation.ClearUpdatedBy()
	return eccu
}

// SetCentreCode sets the "CentreCode" field.
func (eccu *ExamCityCenterUpdate) SetCentreCode(i int32) *ExamCityCenterUpdate {
	eccu.mutation.ResetCentreCode()
	eccu.mutation.SetCentreCode(i)
	return eccu
}

// SetNillableCentreCode sets the "CentreCode" field if the given value is not nil.
func (eccu *ExamCityCenterUpdate) SetNillableCentreCode(i *int32) *ExamCityCenterUpdate {
	if i != nil {
		eccu.SetCentreCode(*i)
	}
	return eccu
}

// AddCentreCode adds i to the "CentreCode" field.
func (eccu *ExamCityCenterUpdate) AddCentreCode(i int32) *ExamCityCenterUpdate {
	eccu.mutation.AddCentreCode(i)
	return eccu
}

// ClearCentreCode clears the value of the "CentreCode" field.
func (eccu *ExamCityCenterUpdate) ClearCentreCode() *ExamCityCenterUpdate {
	eccu.mutation.ClearCentreCode()
	return eccu
}

// SetCircleID sets the "CircleID" field.
func (eccu *ExamCityCenterUpdate) SetCircleID(i int32) *ExamCityCenterUpdate {
	eccu.mutation.ResetCircleID()
	eccu.mutation.SetCircleID(i)
	return eccu
}

// SetNillableCircleID sets the "CircleID" field if the given value is not nil.
func (eccu *ExamCityCenterUpdate) SetNillableCircleID(i *int32) *ExamCityCenterUpdate {
	if i != nil {
		eccu.SetCircleID(*i)
	}
	return eccu
}

// AddCircleID adds i to the "CircleID" field.
func (eccu *ExamCityCenterUpdate) AddCircleID(i int32) *ExamCityCenterUpdate {
	eccu.mutation.AddCircleID(i)
	return eccu
}

// ClearCircleID clears the value of the "CircleID" field.
func (eccu *ExamCityCenterUpdate) ClearCircleID() *ExamCityCenterUpdate {
	eccu.mutation.ClearCircleID()
	return eccu
}

// AddExamCityCenterRefIDs adds the "ExamCityCenterRef" edge to the Exam_Applications_IP entity by IDs.
func (eccu *ExamCityCenterUpdate) AddExamCityCenterRefIDs(ids ...int64) *ExamCityCenterUpdate {
	eccu.mutation.AddExamCityCenterRefIDs(ids...)
	return eccu
}

// AddExamCityCenterRef adds the "ExamCityCenterRef" edges to the Exam_Applications_IP entity.
func (eccu *ExamCityCenterUpdate) AddExamCityCenterRef(e ...*Exam_Applications_IP) *ExamCityCenterUpdate {
	ids := make([]int64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return eccu.AddExamCityCenterRefIDs(ids...)
}

// AddExamCityCenterMTSPMMGRefIDs adds the "ExamCityCenterMTSPMMGRef" edge to the Exam_Application_MTSPMMG entity by IDs.
func (eccu *ExamCityCenterUpdate) AddExamCityCenterMTSPMMGRefIDs(ids ...int64) *ExamCityCenterUpdate {
	eccu.mutation.AddExamCityCenterMTSPMMGRefIDs(ids...)
	return eccu
}

// AddExamCityCenterMTSPMMGRef adds the "ExamCityCenterMTSPMMGRef" edges to the Exam_Application_MTSPMMG entity.
func (eccu *ExamCityCenterUpdate) AddExamCityCenterMTSPMMGRef(e ...*Exam_Application_MTSPMMG) *ExamCityCenterUpdate {
	ids := make([]int64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return eccu.AddExamCityCenterMTSPMMGRefIDs(ids...)
}

// AddExamCityCenterGDSPARefIDs adds the "ExamCityCenterGDSPARef" edge to the Exam_Applications_GDSPA entity by IDs.
func (eccu *ExamCityCenterUpdate) AddExamCityCenterGDSPARefIDs(ids ...int64) *ExamCityCenterUpdate {
	eccu.mutation.AddExamCityCenterGDSPARefIDs(ids...)
	return eccu
}

// AddExamCityCenterGDSPARef adds the "ExamCityCenterGDSPARef" edges to the Exam_Applications_GDSPA entity.
func (eccu *ExamCityCenterUpdate) AddExamCityCenterGDSPARef(e ...*Exam_Applications_GDSPA) *ExamCityCenterUpdate {
	ids := make([]int64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return eccu.AddExamCityCenterGDSPARefIDs(ids...)
}

// AddExamCityCenterGDSPMRefIDs adds the "ExamCityCenterGDSPMRef" edge to the Exam_Applications_GDSPM entity by IDs.
func (eccu *ExamCityCenterUpdate) AddExamCityCenterGDSPMRefIDs(ids ...int64) *ExamCityCenterUpdate {
	eccu.mutation.AddExamCityCenterGDSPMRefIDs(ids...)
	return eccu
}

// AddExamCityCenterGDSPMRef adds the "ExamCityCenterGDSPMRef" edges to the Exam_Applications_GDSPM entity.
func (eccu *ExamCityCenterUpdate) AddExamCityCenterGDSPMRef(e ...*Exam_Applications_GDSPM) *ExamCityCenterUpdate {
	ids := make([]int64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return eccu.AddExamCityCenterGDSPMRefIDs(ids...)
}

// AddExamCityCenterPMPARefIDs adds the "ExamCityCenterPMPARef" edge to the Exam_Applications_PMPA entity by IDs.
func (eccu *ExamCityCenterUpdate) AddExamCityCenterPMPARefIDs(ids ...int64) *ExamCityCenterUpdate {
	eccu.mutation.AddExamCityCenterPMPARefIDs(ids...)
	return eccu
}

// AddExamCityCenterPMPARef adds the "ExamCityCenterPMPARef" edges to the Exam_Applications_PMPA entity.
func (eccu *ExamCityCenterUpdate) AddExamCityCenterPMPARef(e ...*Exam_Applications_PMPA) *ExamCityCenterUpdate {
	ids := make([]int64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return eccu.AddExamCityCenterPMPARefIDs(ids...)
}

// AddExamCityCenterPSRefIDs adds the "ExamCityCenterPSRef" edge to the Exam_Applications_PS entity by IDs.
func (eccu *ExamCityCenterUpdate) AddExamCityCenterPSRefIDs(ids ...int64) *ExamCityCenterUpdate {
	eccu.mutation.AddExamCityCenterPSRefIDs(ids...)
	return eccu
}

// AddExamCityCenterPSRef adds the "ExamCityCenterPSRef" edges to the Exam_Applications_PS entity.
func (eccu *ExamCityCenterUpdate) AddExamCityCenterPSRef(e ...*Exam_Applications_PS) *ExamCityCenterUpdate {
	ids := make([]int64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return eccu.AddExamCityCenterPSRefIDs(ids...)
}

// Mutation returns the ExamCityCenterMutation object of the builder.
func (eccu *ExamCityCenterUpdate) Mutation() *ExamCityCenterMutation {
	return eccu.mutation
}

// ClearExamCityCenterRef clears all "ExamCityCenterRef" edges to the Exam_Applications_IP entity.
func (eccu *ExamCityCenterUpdate) ClearExamCityCenterRef() *ExamCityCenterUpdate {
	eccu.mutation.ClearExamCityCenterRef()
	return eccu
}

// RemoveExamCityCenterRefIDs removes the "ExamCityCenterRef" edge to Exam_Applications_IP entities by IDs.
func (eccu *ExamCityCenterUpdate) RemoveExamCityCenterRefIDs(ids ...int64) *ExamCityCenterUpdate {
	eccu.mutation.RemoveExamCityCenterRefIDs(ids...)
	return eccu
}

// RemoveExamCityCenterRef removes "ExamCityCenterRef" edges to Exam_Applications_IP entities.
func (eccu *ExamCityCenterUpdate) RemoveExamCityCenterRef(e ...*Exam_Applications_IP) *ExamCityCenterUpdate {
	ids := make([]int64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return eccu.RemoveExamCityCenterRefIDs(ids...)
}

// ClearExamCityCenterMTSPMMGRef clears all "ExamCityCenterMTSPMMGRef" edges to the Exam_Application_MTSPMMG entity.
func (eccu *ExamCityCenterUpdate) ClearExamCityCenterMTSPMMGRef() *ExamCityCenterUpdate {
	eccu.mutation.ClearExamCityCenterMTSPMMGRef()
	return eccu
}

// RemoveExamCityCenterMTSPMMGRefIDs removes the "ExamCityCenterMTSPMMGRef" edge to Exam_Application_MTSPMMG entities by IDs.
func (eccu *ExamCityCenterUpdate) RemoveExamCityCenterMTSPMMGRefIDs(ids ...int64) *ExamCityCenterUpdate {
	eccu.mutation.RemoveExamCityCenterMTSPMMGRefIDs(ids...)
	return eccu
}

// RemoveExamCityCenterMTSPMMGRef removes "ExamCityCenterMTSPMMGRef" edges to Exam_Application_MTSPMMG entities.
func (eccu *ExamCityCenterUpdate) RemoveExamCityCenterMTSPMMGRef(e ...*Exam_Application_MTSPMMG) *ExamCityCenterUpdate {
	ids := make([]int64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return eccu.RemoveExamCityCenterMTSPMMGRefIDs(ids...)
}

// ClearExamCityCenterGDSPARef clears all "ExamCityCenterGDSPARef" edges to the Exam_Applications_GDSPA entity.
func (eccu *ExamCityCenterUpdate) ClearExamCityCenterGDSPARef() *ExamCityCenterUpdate {
	eccu.mutation.ClearExamCityCenterGDSPARef()
	return eccu
}

// RemoveExamCityCenterGDSPARefIDs removes the "ExamCityCenterGDSPARef" edge to Exam_Applications_GDSPA entities by IDs.
func (eccu *ExamCityCenterUpdate) RemoveExamCityCenterGDSPARefIDs(ids ...int64) *ExamCityCenterUpdate {
	eccu.mutation.RemoveExamCityCenterGDSPARefIDs(ids...)
	return eccu
}

// RemoveExamCityCenterGDSPARef removes "ExamCityCenterGDSPARef" edges to Exam_Applications_GDSPA entities.
func (eccu *ExamCityCenterUpdate) RemoveExamCityCenterGDSPARef(e ...*Exam_Applications_GDSPA) *ExamCityCenterUpdate {
	ids := make([]int64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return eccu.RemoveExamCityCenterGDSPARefIDs(ids...)
}

// ClearExamCityCenterGDSPMRef clears all "ExamCityCenterGDSPMRef" edges to the Exam_Applications_GDSPM entity.
func (eccu *ExamCityCenterUpdate) ClearExamCityCenterGDSPMRef() *ExamCityCenterUpdate {
	eccu.mutation.ClearExamCityCenterGDSPMRef()
	return eccu
}

// RemoveExamCityCenterGDSPMRefIDs removes the "ExamCityCenterGDSPMRef" edge to Exam_Applications_GDSPM entities by IDs.
func (eccu *ExamCityCenterUpdate) RemoveExamCityCenterGDSPMRefIDs(ids ...int64) *ExamCityCenterUpdate {
	eccu.mutation.RemoveExamCityCenterGDSPMRefIDs(ids...)
	return eccu
}

// RemoveExamCityCenterGDSPMRef removes "ExamCityCenterGDSPMRef" edges to Exam_Applications_GDSPM entities.
func (eccu *ExamCityCenterUpdate) RemoveExamCityCenterGDSPMRef(e ...*Exam_Applications_GDSPM) *ExamCityCenterUpdate {
	ids := make([]int64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return eccu.RemoveExamCityCenterGDSPMRefIDs(ids...)
}

// ClearExamCityCenterPMPARef clears all "ExamCityCenterPMPARef" edges to the Exam_Applications_PMPA entity.
func (eccu *ExamCityCenterUpdate) ClearExamCityCenterPMPARef() *ExamCityCenterUpdate {
	eccu.mutation.ClearExamCityCenterPMPARef()
	return eccu
}

// RemoveExamCityCenterPMPARefIDs removes the "ExamCityCenterPMPARef" edge to Exam_Applications_PMPA entities by IDs.
func (eccu *ExamCityCenterUpdate) RemoveExamCityCenterPMPARefIDs(ids ...int64) *ExamCityCenterUpdate {
	eccu.mutation.RemoveExamCityCenterPMPARefIDs(ids...)
	return eccu
}

// RemoveExamCityCenterPMPARef removes "ExamCityCenterPMPARef" edges to Exam_Applications_PMPA entities.
func (eccu *ExamCityCenterUpdate) RemoveExamCityCenterPMPARef(e ...*Exam_Applications_PMPA) *ExamCityCenterUpdate {
	ids := make([]int64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return eccu.RemoveExamCityCenterPMPARefIDs(ids...)
}

// ClearExamCityCenterPSRef clears all "ExamCityCenterPSRef" edges to the Exam_Applications_PS entity.
func (eccu *ExamCityCenterUpdate) ClearExamCityCenterPSRef() *ExamCityCenterUpdate {
	eccu.mutation.ClearExamCityCenterPSRef()
	return eccu
}

// RemoveExamCityCenterPSRefIDs removes the "ExamCityCenterPSRef" edge to Exam_Applications_PS entities by IDs.
func (eccu *ExamCityCenterUpdate) RemoveExamCityCenterPSRefIDs(ids ...int64) *ExamCityCenterUpdate {
	eccu.mutation.RemoveExamCityCenterPSRefIDs(ids...)
	return eccu
}

// RemoveExamCityCenterPSRef removes "ExamCityCenterPSRef" edges to Exam_Applications_PS entities.
func (eccu *ExamCityCenterUpdate) RemoveExamCityCenterPSRef(e ...*Exam_Applications_PS) *ExamCityCenterUpdate {
	ids := make([]int64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return eccu.RemoveExamCityCenterPSRefIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (eccu *ExamCityCenterUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, eccu.sqlSave, eccu.mutation, eccu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (eccu *ExamCityCenterUpdate) SaveX(ctx context.Context) int {
	affected, err := eccu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (eccu *ExamCityCenterUpdate) Exec(ctx context.Context) error {
	_, err := eccu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eccu *ExamCityCenterUpdate) ExecX(ctx context.Context) {
	if err := eccu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (eccu *ExamCityCenterUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(examcitycenter.Table, examcitycenter.Columns, sqlgraph.NewFieldSpec(examcitycenter.FieldID, field.TypeInt32))
	if ps := eccu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eccu.mutation.ExamCode(); ok {
		_spec.SetField(examcitycenter.FieldExamCode, field.TypeInt32, value)
	}
	if value, ok := eccu.mutation.AddedExamCode(); ok {
		_spec.AddField(examcitycenter.FieldExamCode, field.TypeInt32, value)
	}
	if eccu.mutation.ExamCodeCleared() {
		_spec.ClearField(examcitycenter.FieldExamCode, field.TypeInt32)
	}
	if value, ok := eccu.mutation.ExamName(); ok {
		_spec.SetField(examcitycenter.FieldExamName, field.TypeString, value)
	}
	if eccu.mutation.ExamNameCleared() {
		_spec.ClearField(examcitycenter.FieldExamName, field.TypeString)
	}
	if value, ok := eccu.mutation.ExamShortName(); ok {
		_spec.SetField(examcitycenter.FieldExamShortName, field.TypeString, value)
	}
	if eccu.mutation.ExamShortNameCleared() {
		_spec.ClearField(examcitycenter.FieldExamShortName, field.TypeString)
	}
	if value, ok := eccu.mutation.ExamYear(); ok {
		_spec.SetField(examcitycenter.FieldExamYear, field.TypeInt32, value)
	}
	if value, ok := eccu.mutation.AddedExamYear(); ok {
		_spec.AddField(examcitycenter.FieldExamYear, field.TypeInt32, value)
	}
	if eccu.mutation.ExamYearCleared() {
		_spec.ClearField(examcitycenter.FieldExamYear, field.TypeInt32)
	}
	if value, ok := eccu.mutation.ConductedBy(); ok {
		_spec.SetField(examcitycenter.FieldConductedBy, field.TypeString, value)
	}
	if eccu.mutation.ConductedByCleared() {
		_spec.ClearField(examcitycenter.FieldConductedBy, field.TypeString)
	}
	if value, ok := eccu.mutation.NodalOfficeFacilityID(); ok {
		_spec.SetField(examcitycenter.FieldNodalOfficeFacilityID, field.TypeString, value)
	}
	if eccu.mutation.NodalOfficeFacilityIDCleared() {
		_spec.ClearField(examcitycenter.FieldNodalOfficeFacilityID, field.TypeString)
	}
	if value, ok := eccu.mutation.NodalOfficeName(); ok {
		_spec.SetField(examcitycenter.FieldNodalOfficeName, field.TypeString, value)
	}
	if eccu.mutation.NodalOfficeNameCleared() {
		_spec.ClearField(examcitycenter.FieldNodalOfficeName, field.TypeString)
	}
	if value, ok := eccu.mutation.NotificationCode(); ok {
		_spec.SetField(examcitycenter.FieldNotificationCode, field.TypeInt32, value)
	}
	if value, ok := eccu.mutation.AddedNotificationCode(); ok {
		_spec.AddField(examcitycenter.FieldNotificationCode, field.TypeInt32, value)
	}
	if eccu.mutation.NotificationCodeCleared() {
		_spec.ClearField(examcitycenter.FieldNotificationCode, field.TypeInt32)
	}
	if value, ok := eccu.mutation.NotificationNumber(); ok {
		_spec.SetField(examcitycenter.FieldNotificationNumber, field.TypeString, value)
	}
	if eccu.mutation.NotificationNumberCleared() {
		_spec.ClearField(examcitycenter.FieldNotificationNumber, field.TypeString)
	}
	if value, ok := eccu.mutation.CenterCityName(); ok {
		_spec.SetField(examcitycenter.FieldCenterCityName, field.TypeString, value)
	}
	if eccu.mutation.CenterCityNameCleared() {
		_spec.ClearField(examcitycenter.FieldCenterCityName, field.TypeString)
	}
	if value, ok := eccu.mutation.CreatedById(); ok {
		_spec.SetField(examcitycenter.FieldCreatedById, field.TypeInt64, value)
	}
	if value, ok := eccu.mutation.AddedCreatedById(); ok {
		_spec.AddField(examcitycenter.FieldCreatedById, field.TypeInt64, value)
	}
	if eccu.mutation.CreatedByIdCleared() {
		_spec.ClearField(examcitycenter.FieldCreatedById, field.TypeInt64)
	}
	if value, ok := eccu.mutation.CreatedByUserName(); ok {
		_spec.SetField(examcitycenter.FieldCreatedByUserName, field.TypeString, value)
	}
	if eccu.mutation.CreatedByUserNameCleared() {
		_spec.ClearField(examcitycenter.FieldCreatedByUserName, field.TypeString)
	}
	if value, ok := eccu.mutation.CreatedByEmpId(); ok {
		_spec.SetField(examcitycenter.FieldCreatedByEmpId, field.TypeInt64, value)
	}
	if value, ok := eccu.mutation.AddedCreatedByEmpId(); ok {
		_spec.AddField(examcitycenter.FieldCreatedByEmpId, field.TypeInt64, value)
	}
	if eccu.mutation.CreatedByEmpIdCleared() {
		_spec.ClearField(examcitycenter.FieldCreatedByEmpId, field.TypeInt64)
	}
	if value, ok := eccu.mutation.CreatedByDesignation(); ok {
		_spec.SetField(examcitycenter.FieldCreatedByDesignation, field.TypeString, value)
	}
	if eccu.mutation.CreatedByDesignationCleared() {
		_spec.ClearField(examcitycenter.FieldCreatedByDesignation, field.TypeString)
	}
	if value, ok := eccu.mutation.CreatedDate(); ok {
		_spec.SetField(examcitycenter.FieldCreatedDate, field.TypeTime, value)
	}
	if eccu.mutation.CreatedDateCleared() {
		_spec.ClearField(examcitycenter.FieldCreatedDate, field.TypeTime)
	}
	if value, ok := eccu.mutation.Status(); ok {
		_spec.SetField(examcitycenter.FieldStatus, field.TypeString, value)
	}
	if eccu.mutation.StatusCleared() {
		_spec.ClearField(examcitycenter.FieldStatus, field.TypeString)
	}
	if value, ok := eccu.mutation.Deletedbyid(); ok {
		_spec.SetField(examcitycenter.FieldDeletedbyid, field.TypeInt64, value)
	}
	if value, ok := eccu.mutation.AddedDeletedbyid(); ok {
		_spec.AddField(examcitycenter.FieldDeletedbyid, field.TypeInt64, value)
	}
	if eccu.mutation.DeletedbyidCleared() {
		_spec.ClearField(examcitycenter.FieldDeletedbyid, field.TypeInt64)
	}
	if value, ok := eccu.mutation.Deletedbyusername(); ok {
		_spec.SetField(examcitycenter.FieldDeletedbyusername, field.TypeString, value)
	}
	if eccu.mutation.DeletedbyusernameCleared() {
		_spec.ClearField(examcitycenter.FieldDeletedbyusername, field.TypeString)
	}
	if value, ok := eccu.mutation.DeletedbyEmployeeid(); ok {
		_spec.SetField(examcitycenter.FieldDeletedbyEmployeeid, field.TypeInt64, value)
	}
	if value, ok := eccu.mutation.AddedDeletedbyEmployeeid(); ok {
		_spec.AddField(examcitycenter.FieldDeletedbyEmployeeid, field.TypeInt64, value)
	}
	if eccu.mutation.DeletedbyEmployeeidCleared() {
		_spec.ClearField(examcitycenter.FieldDeletedbyEmployeeid, field.TypeInt64)
	}
	if value, ok := eccu.mutation.DeletedbyDesignation(); ok {
		_spec.SetField(examcitycenter.FieldDeletedbyDesignation, field.TypeString, value)
	}
	if eccu.mutation.DeletedbyDesignationCleared() {
		_spec.ClearField(examcitycenter.FieldDeletedbyDesignation, field.TypeString)
	}
	if value, ok := eccu.mutation.DeletedDate(); ok {
		_spec.SetField(examcitycenter.FieldDeletedDate, field.TypeTime, value)
	}
	if eccu.mutation.DeletedDateCleared() {
		_spec.ClearField(examcitycenter.FieldDeletedDate, field.TypeTime)
	}
	if value, ok := eccu.mutation.CircleCityName(); ok {
		_spec.SetField(examcitycenter.FieldCircleCityName, field.TypeString, value)
	}
	if eccu.mutation.CircleCityNameCleared() {
		_spec.ClearField(examcitycenter.FieldCircleCityName, field.TypeString)
	}
	if value, ok := eccu.mutation.DivisionCode(); ok {
		_spec.SetField(examcitycenter.FieldDivisionCode, field.TypeInt32, value)
	}
	if value, ok := eccu.mutation.AddedDivisionCode(); ok {
		_spec.AddField(examcitycenter.FieldDivisionCode, field.TypeInt32, value)
	}
	if eccu.mutation.DivisionCodeCleared() {
		_spec.ClearField(examcitycenter.FieldDivisionCode, field.TypeInt32)
	}
	if value, ok := eccu.mutation.RegionCode(); ok {
		_spec.SetField(examcitycenter.FieldRegionCode, field.TypeInt32, value)
	}
	if value, ok := eccu.mutation.AddedRegionCode(); ok {
		_spec.AddField(examcitycenter.FieldRegionCode, field.TypeInt32, value)
	}
	if eccu.mutation.RegionCodeCleared() {
		_spec.ClearField(examcitycenter.FieldRegionCode, field.TypeInt32)
	}
	if value, ok := eccu.mutation.DivisionName(); ok {
		_spec.SetField(examcitycenter.FieldDivisionName, field.TypeString, value)
	}
	if eccu.mutation.DivisionNameCleared() {
		_spec.ClearField(examcitycenter.FieldDivisionName, field.TypeString)
	}
	if value, ok := eccu.mutation.RegionID(); ok {
		_spec.SetField(examcitycenter.FieldRegionID, field.TypeInt32, value)
	}
	if value, ok := eccu.mutation.AddedRegionID(); ok {
		_spec.AddField(examcitycenter.FieldRegionID, field.TypeInt32, value)
	}
	if eccu.mutation.RegionIDCleared() {
		_spec.ClearField(examcitycenter.FieldRegionID, field.TypeInt32)
	}
	if value, ok := eccu.mutation.RegionName(); ok {
		_spec.SetField(examcitycenter.FieldRegionName, field.TypeString, value)
	}
	if eccu.mutation.RegionNameCleared() {
		_spec.ClearField(examcitycenter.FieldRegionName, field.TypeString)
	}
	if value, ok := eccu.mutation.RegionCityName(); ok {
		_spec.SetField(examcitycenter.FieldRegionCityName, field.TypeString, value)
	}
	if eccu.mutation.RegionCityNameCleared() {
		_spec.ClearField(examcitycenter.FieldRegionCityName, field.TypeString)
	}
	if value, ok := eccu.mutation.CentreCityName(); ok {
		_spec.SetField(examcitycenter.FieldCentreCityName, field.TypeString, value)
	}
	if eccu.mutation.CentreCityNameCleared() {
		_spec.ClearField(examcitycenter.FieldCentreCityName, field.TypeString)
	}
	if value, ok := eccu.mutation.Remarks(); ok {
		_spec.SetField(examcitycenter.FieldRemarks, field.TypeString, value)
	}
	if eccu.mutation.RemarksCleared() {
		_spec.ClearField(examcitycenter.FieldRemarks, field.TypeString)
	}
	if value, ok := eccu.mutation.UpdatedAt(); ok {
		_spec.SetField(examcitycenter.FieldUpdatedAt, field.TypeTime, value)
	}
	if eccu.mutation.UpdatedAtCleared() {
		_spec.ClearField(examcitycenter.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := eccu.mutation.UpdatedBy(); ok {
		_spec.SetField(examcitycenter.FieldUpdatedBy, field.TypeString, value)
	}
	if eccu.mutation.UpdatedByCleared() {
		_spec.ClearField(examcitycenter.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := eccu.mutation.CentreCode(); ok {
		_spec.SetField(examcitycenter.FieldCentreCode, field.TypeInt32, value)
	}
	if value, ok := eccu.mutation.AddedCentreCode(); ok {
		_spec.AddField(examcitycenter.FieldCentreCode, field.TypeInt32, value)
	}
	if eccu.mutation.CentreCodeCleared() {
		_spec.ClearField(examcitycenter.FieldCentreCode, field.TypeInt32)
	}
	if value, ok := eccu.mutation.CircleID(); ok {
		_spec.SetField(examcitycenter.FieldCircleID, field.TypeInt32, value)
	}
	if value, ok := eccu.mutation.AddedCircleID(); ok {
		_spec.AddField(examcitycenter.FieldCircleID, field.TypeInt32, value)
	}
	if eccu.mutation.CircleIDCleared() {
		_spec.ClearField(examcitycenter.FieldCircleID, field.TypeInt32)
	}
	if eccu.mutation.ExamCityCenterRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   examcitycenter.ExamCityCenterRefTable,
			Columns: []string{examcitycenter.ExamCityCenterRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_ip.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eccu.mutation.RemovedExamCityCenterRefIDs(); len(nodes) > 0 && !eccu.mutation.ExamCityCenterRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   examcitycenter.ExamCityCenterRefTable,
			Columns: []string{examcitycenter.ExamCityCenterRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_ip.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eccu.mutation.ExamCityCenterRefIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   examcitycenter.ExamCityCenterRefTable,
			Columns: []string{examcitycenter.ExamCityCenterRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_ip.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eccu.mutation.ExamCityCenterMTSPMMGRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   examcitycenter.ExamCityCenterMTSPMMGRefTable,
			Columns: []string{examcitycenter.ExamCityCenterMTSPMMGRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_application_mtspmmg.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eccu.mutation.RemovedExamCityCenterMTSPMMGRefIDs(); len(nodes) > 0 && !eccu.mutation.ExamCityCenterMTSPMMGRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   examcitycenter.ExamCityCenterMTSPMMGRefTable,
			Columns: []string{examcitycenter.ExamCityCenterMTSPMMGRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_application_mtspmmg.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eccu.mutation.ExamCityCenterMTSPMMGRefIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   examcitycenter.ExamCityCenterMTSPMMGRefTable,
			Columns: []string{examcitycenter.ExamCityCenterMTSPMMGRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_application_mtspmmg.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eccu.mutation.ExamCityCenterGDSPARefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   examcitycenter.ExamCityCenterGDSPARefTable,
			Columns: []string{examcitycenter.ExamCityCenterGDSPARefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_gdspa.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eccu.mutation.RemovedExamCityCenterGDSPARefIDs(); len(nodes) > 0 && !eccu.mutation.ExamCityCenterGDSPARefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   examcitycenter.ExamCityCenterGDSPARefTable,
			Columns: []string{examcitycenter.ExamCityCenterGDSPARefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_gdspa.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eccu.mutation.ExamCityCenterGDSPARefIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   examcitycenter.ExamCityCenterGDSPARefTable,
			Columns: []string{examcitycenter.ExamCityCenterGDSPARefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_gdspa.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eccu.mutation.ExamCityCenterGDSPMRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   examcitycenter.ExamCityCenterGDSPMRefTable,
			Columns: []string{examcitycenter.ExamCityCenterGDSPMRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_gdspm.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eccu.mutation.RemovedExamCityCenterGDSPMRefIDs(); len(nodes) > 0 && !eccu.mutation.ExamCityCenterGDSPMRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   examcitycenter.ExamCityCenterGDSPMRefTable,
			Columns: []string{examcitycenter.ExamCityCenterGDSPMRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_gdspm.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eccu.mutation.ExamCityCenterGDSPMRefIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   examcitycenter.ExamCityCenterGDSPMRefTable,
			Columns: []string{examcitycenter.ExamCityCenterGDSPMRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_gdspm.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eccu.mutation.ExamCityCenterPMPARefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   examcitycenter.ExamCityCenterPMPARefTable,
			Columns: []string{examcitycenter.ExamCityCenterPMPARefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_pmpa.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eccu.mutation.RemovedExamCityCenterPMPARefIDs(); len(nodes) > 0 && !eccu.mutation.ExamCityCenterPMPARefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   examcitycenter.ExamCityCenterPMPARefTable,
			Columns: []string{examcitycenter.ExamCityCenterPMPARefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_pmpa.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eccu.mutation.ExamCityCenterPMPARefIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   examcitycenter.ExamCityCenterPMPARefTable,
			Columns: []string{examcitycenter.ExamCityCenterPMPARefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_pmpa.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eccu.mutation.ExamCityCenterPSRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   examcitycenter.ExamCityCenterPSRefTable,
			Columns: []string{examcitycenter.ExamCityCenterPSRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_ps.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eccu.mutation.RemovedExamCityCenterPSRefIDs(); len(nodes) > 0 && !eccu.mutation.ExamCityCenterPSRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   examcitycenter.ExamCityCenterPSRefTable,
			Columns: []string{examcitycenter.ExamCityCenterPSRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_ps.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eccu.mutation.ExamCityCenterPSRefIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   examcitycenter.ExamCityCenterPSRefTable,
			Columns: []string{examcitycenter.ExamCityCenterPSRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_ps.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, eccu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{examcitycenter.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	eccu.mutation.done = true
	return n, nil
}

// ExamCityCenterUpdateOne is the builder for updating a single ExamCityCenter entity.
type ExamCityCenterUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ExamCityCenterMutation
}

// SetExamCode sets the "ExamCode" field.
func (eccuo *ExamCityCenterUpdateOne) SetExamCode(i int32) *ExamCityCenterUpdateOne {
	eccuo.mutation.ResetExamCode()
	eccuo.mutation.SetExamCode(i)
	return eccuo
}

// SetNillableExamCode sets the "ExamCode" field if the given value is not nil.
func (eccuo *ExamCityCenterUpdateOne) SetNillableExamCode(i *int32) *ExamCityCenterUpdateOne {
	if i != nil {
		eccuo.SetExamCode(*i)
	}
	return eccuo
}

// AddExamCode adds i to the "ExamCode" field.
func (eccuo *ExamCityCenterUpdateOne) AddExamCode(i int32) *ExamCityCenterUpdateOne {
	eccuo.mutation.AddExamCode(i)
	return eccuo
}

// ClearExamCode clears the value of the "ExamCode" field.
func (eccuo *ExamCityCenterUpdateOne) ClearExamCode() *ExamCityCenterUpdateOne {
	eccuo.mutation.ClearExamCode()
	return eccuo
}

// SetExamName sets the "ExamName" field.
func (eccuo *ExamCityCenterUpdateOne) SetExamName(s string) *ExamCityCenterUpdateOne {
	eccuo.mutation.SetExamName(s)
	return eccuo
}

// SetNillableExamName sets the "ExamName" field if the given value is not nil.
func (eccuo *ExamCityCenterUpdateOne) SetNillableExamName(s *string) *ExamCityCenterUpdateOne {
	if s != nil {
		eccuo.SetExamName(*s)
	}
	return eccuo
}

// ClearExamName clears the value of the "ExamName" field.
func (eccuo *ExamCityCenterUpdateOne) ClearExamName() *ExamCityCenterUpdateOne {
	eccuo.mutation.ClearExamName()
	return eccuo
}

// SetExamShortName sets the "ExamShortName" field.
func (eccuo *ExamCityCenterUpdateOne) SetExamShortName(s string) *ExamCityCenterUpdateOne {
	eccuo.mutation.SetExamShortName(s)
	return eccuo
}

// SetNillableExamShortName sets the "ExamShortName" field if the given value is not nil.
func (eccuo *ExamCityCenterUpdateOne) SetNillableExamShortName(s *string) *ExamCityCenterUpdateOne {
	if s != nil {
		eccuo.SetExamShortName(*s)
	}
	return eccuo
}

// ClearExamShortName clears the value of the "ExamShortName" field.
func (eccuo *ExamCityCenterUpdateOne) ClearExamShortName() *ExamCityCenterUpdateOne {
	eccuo.mutation.ClearExamShortName()
	return eccuo
}

// SetExamYear sets the "ExamYear" field.
func (eccuo *ExamCityCenterUpdateOne) SetExamYear(i int32) *ExamCityCenterUpdateOne {
	eccuo.mutation.ResetExamYear()
	eccuo.mutation.SetExamYear(i)
	return eccuo
}

// SetNillableExamYear sets the "ExamYear" field if the given value is not nil.
func (eccuo *ExamCityCenterUpdateOne) SetNillableExamYear(i *int32) *ExamCityCenterUpdateOne {
	if i != nil {
		eccuo.SetExamYear(*i)
	}
	return eccuo
}

// AddExamYear adds i to the "ExamYear" field.
func (eccuo *ExamCityCenterUpdateOne) AddExamYear(i int32) *ExamCityCenterUpdateOne {
	eccuo.mutation.AddExamYear(i)
	return eccuo
}

// ClearExamYear clears the value of the "ExamYear" field.
func (eccuo *ExamCityCenterUpdateOne) ClearExamYear() *ExamCityCenterUpdateOne {
	eccuo.mutation.ClearExamYear()
	return eccuo
}

// SetConductedBy sets the "ConductedBy" field.
func (eccuo *ExamCityCenterUpdateOne) SetConductedBy(s string) *ExamCityCenterUpdateOne {
	eccuo.mutation.SetConductedBy(s)
	return eccuo
}

// SetNillableConductedBy sets the "ConductedBy" field if the given value is not nil.
func (eccuo *ExamCityCenterUpdateOne) SetNillableConductedBy(s *string) *ExamCityCenterUpdateOne {
	if s != nil {
		eccuo.SetConductedBy(*s)
	}
	return eccuo
}

// ClearConductedBy clears the value of the "ConductedBy" field.
func (eccuo *ExamCityCenterUpdateOne) ClearConductedBy() *ExamCityCenterUpdateOne {
	eccuo.mutation.ClearConductedBy()
	return eccuo
}

// SetNodalOfficeFacilityID sets the "NodalOfficeFacilityID" field.
func (eccuo *ExamCityCenterUpdateOne) SetNodalOfficeFacilityID(s string) *ExamCityCenterUpdateOne {
	eccuo.mutation.SetNodalOfficeFacilityID(s)
	return eccuo
}

// SetNillableNodalOfficeFacilityID sets the "NodalOfficeFacilityID" field if the given value is not nil.
func (eccuo *ExamCityCenterUpdateOne) SetNillableNodalOfficeFacilityID(s *string) *ExamCityCenterUpdateOne {
	if s != nil {
		eccuo.SetNodalOfficeFacilityID(*s)
	}
	return eccuo
}

// ClearNodalOfficeFacilityID clears the value of the "NodalOfficeFacilityID" field.
func (eccuo *ExamCityCenterUpdateOne) ClearNodalOfficeFacilityID() *ExamCityCenterUpdateOne {
	eccuo.mutation.ClearNodalOfficeFacilityID()
	return eccuo
}

// SetNodalOfficeName sets the "NodalOfficeName" field.
func (eccuo *ExamCityCenterUpdateOne) SetNodalOfficeName(s string) *ExamCityCenterUpdateOne {
	eccuo.mutation.SetNodalOfficeName(s)
	return eccuo
}

// SetNillableNodalOfficeName sets the "NodalOfficeName" field if the given value is not nil.
func (eccuo *ExamCityCenterUpdateOne) SetNillableNodalOfficeName(s *string) *ExamCityCenterUpdateOne {
	if s != nil {
		eccuo.SetNodalOfficeName(*s)
	}
	return eccuo
}

// ClearNodalOfficeName clears the value of the "NodalOfficeName" field.
func (eccuo *ExamCityCenterUpdateOne) ClearNodalOfficeName() *ExamCityCenterUpdateOne {
	eccuo.mutation.ClearNodalOfficeName()
	return eccuo
}

// SetNotificationCode sets the "NotificationCode" field.
func (eccuo *ExamCityCenterUpdateOne) SetNotificationCode(i int32) *ExamCityCenterUpdateOne {
	eccuo.mutation.ResetNotificationCode()
	eccuo.mutation.SetNotificationCode(i)
	return eccuo
}

// SetNillableNotificationCode sets the "NotificationCode" field if the given value is not nil.
func (eccuo *ExamCityCenterUpdateOne) SetNillableNotificationCode(i *int32) *ExamCityCenterUpdateOne {
	if i != nil {
		eccuo.SetNotificationCode(*i)
	}
	return eccuo
}

// AddNotificationCode adds i to the "NotificationCode" field.
func (eccuo *ExamCityCenterUpdateOne) AddNotificationCode(i int32) *ExamCityCenterUpdateOne {
	eccuo.mutation.AddNotificationCode(i)
	return eccuo
}

// ClearNotificationCode clears the value of the "NotificationCode" field.
func (eccuo *ExamCityCenterUpdateOne) ClearNotificationCode() *ExamCityCenterUpdateOne {
	eccuo.mutation.ClearNotificationCode()
	return eccuo
}

// SetNotificationNumber sets the "NotificationNumber" field.
func (eccuo *ExamCityCenterUpdateOne) SetNotificationNumber(s string) *ExamCityCenterUpdateOne {
	eccuo.mutation.SetNotificationNumber(s)
	return eccuo
}

// SetNillableNotificationNumber sets the "NotificationNumber" field if the given value is not nil.
func (eccuo *ExamCityCenterUpdateOne) SetNillableNotificationNumber(s *string) *ExamCityCenterUpdateOne {
	if s != nil {
		eccuo.SetNotificationNumber(*s)
	}
	return eccuo
}

// ClearNotificationNumber clears the value of the "NotificationNumber" field.
func (eccuo *ExamCityCenterUpdateOne) ClearNotificationNumber() *ExamCityCenterUpdateOne {
	eccuo.mutation.ClearNotificationNumber()
	return eccuo
}

// SetCenterCityName sets the "CenterCityName" field.
func (eccuo *ExamCityCenterUpdateOne) SetCenterCityName(s string) *ExamCityCenterUpdateOne {
	eccuo.mutation.SetCenterCityName(s)
	return eccuo
}

// SetNillableCenterCityName sets the "CenterCityName" field if the given value is not nil.
func (eccuo *ExamCityCenterUpdateOne) SetNillableCenterCityName(s *string) *ExamCityCenterUpdateOne {
	if s != nil {
		eccuo.SetCenterCityName(*s)
	}
	return eccuo
}

// ClearCenterCityName clears the value of the "CenterCityName" field.
func (eccuo *ExamCityCenterUpdateOne) ClearCenterCityName() *ExamCityCenterUpdateOne {
	eccuo.mutation.ClearCenterCityName()
	return eccuo
}

// SetCreatedById sets the "CreatedById" field.
func (eccuo *ExamCityCenterUpdateOne) SetCreatedById(i int64) *ExamCityCenterUpdateOne {
	eccuo.mutation.ResetCreatedById()
	eccuo.mutation.SetCreatedById(i)
	return eccuo
}

// SetNillableCreatedById sets the "CreatedById" field if the given value is not nil.
func (eccuo *ExamCityCenterUpdateOne) SetNillableCreatedById(i *int64) *ExamCityCenterUpdateOne {
	if i != nil {
		eccuo.SetCreatedById(*i)
	}
	return eccuo
}

// AddCreatedById adds i to the "CreatedById" field.
func (eccuo *ExamCityCenterUpdateOne) AddCreatedById(i int64) *ExamCityCenterUpdateOne {
	eccuo.mutation.AddCreatedById(i)
	return eccuo
}

// ClearCreatedById clears the value of the "CreatedById" field.
func (eccuo *ExamCityCenterUpdateOne) ClearCreatedById() *ExamCityCenterUpdateOne {
	eccuo.mutation.ClearCreatedById()
	return eccuo
}

// SetCreatedByUserName sets the "CreatedByUserName" field.
func (eccuo *ExamCityCenterUpdateOne) SetCreatedByUserName(s string) *ExamCityCenterUpdateOne {
	eccuo.mutation.SetCreatedByUserName(s)
	return eccuo
}

// SetNillableCreatedByUserName sets the "CreatedByUserName" field if the given value is not nil.
func (eccuo *ExamCityCenterUpdateOne) SetNillableCreatedByUserName(s *string) *ExamCityCenterUpdateOne {
	if s != nil {
		eccuo.SetCreatedByUserName(*s)
	}
	return eccuo
}

// ClearCreatedByUserName clears the value of the "CreatedByUserName" field.
func (eccuo *ExamCityCenterUpdateOne) ClearCreatedByUserName() *ExamCityCenterUpdateOne {
	eccuo.mutation.ClearCreatedByUserName()
	return eccuo
}

// SetCreatedByEmpId sets the "CreatedByEmpId" field.
func (eccuo *ExamCityCenterUpdateOne) SetCreatedByEmpId(i int64) *ExamCityCenterUpdateOne {
	eccuo.mutation.ResetCreatedByEmpId()
	eccuo.mutation.SetCreatedByEmpId(i)
	return eccuo
}

// SetNillableCreatedByEmpId sets the "CreatedByEmpId" field if the given value is not nil.
func (eccuo *ExamCityCenterUpdateOne) SetNillableCreatedByEmpId(i *int64) *ExamCityCenterUpdateOne {
	if i != nil {
		eccuo.SetCreatedByEmpId(*i)
	}
	return eccuo
}

// AddCreatedByEmpId adds i to the "CreatedByEmpId" field.
func (eccuo *ExamCityCenterUpdateOne) AddCreatedByEmpId(i int64) *ExamCityCenterUpdateOne {
	eccuo.mutation.AddCreatedByEmpId(i)
	return eccuo
}

// ClearCreatedByEmpId clears the value of the "CreatedByEmpId" field.
func (eccuo *ExamCityCenterUpdateOne) ClearCreatedByEmpId() *ExamCityCenterUpdateOne {
	eccuo.mutation.ClearCreatedByEmpId()
	return eccuo
}

// SetCreatedByDesignation sets the "CreatedByDesignation" field.
func (eccuo *ExamCityCenterUpdateOne) SetCreatedByDesignation(s string) *ExamCityCenterUpdateOne {
	eccuo.mutation.SetCreatedByDesignation(s)
	return eccuo
}

// SetNillableCreatedByDesignation sets the "CreatedByDesignation" field if the given value is not nil.
func (eccuo *ExamCityCenterUpdateOne) SetNillableCreatedByDesignation(s *string) *ExamCityCenterUpdateOne {
	if s != nil {
		eccuo.SetCreatedByDesignation(*s)
	}
	return eccuo
}

// ClearCreatedByDesignation clears the value of the "CreatedByDesignation" field.
func (eccuo *ExamCityCenterUpdateOne) ClearCreatedByDesignation() *ExamCityCenterUpdateOne {
	eccuo.mutation.ClearCreatedByDesignation()
	return eccuo
}

// SetCreatedDate sets the "CreatedDate" field.
func (eccuo *ExamCityCenterUpdateOne) SetCreatedDate(t time.Time) *ExamCityCenterUpdateOne {
	eccuo.mutation.SetCreatedDate(t)
	return eccuo
}

// SetNillableCreatedDate sets the "CreatedDate" field if the given value is not nil.
func (eccuo *ExamCityCenterUpdateOne) SetNillableCreatedDate(t *time.Time) *ExamCityCenterUpdateOne {
	if t != nil {
		eccuo.SetCreatedDate(*t)
	}
	return eccuo
}

// ClearCreatedDate clears the value of the "CreatedDate" field.
func (eccuo *ExamCityCenterUpdateOne) ClearCreatedDate() *ExamCityCenterUpdateOne {
	eccuo.mutation.ClearCreatedDate()
	return eccuo
}

// SetStatus sets the "Status" field.
func (eccuo *ExamCityCenterUpdateOne) SetStatus(s string) *ExamCityCenterUpdateOne {
	eccuo.mutation.SetStatus(s)
	return eccuo
}

// SetNillableStatus sets the "Status" field if the given value is not nil.
func (eccuo *ExamCityCenterUpdateOne) SetNillableStatus(s *string) *ExamCityCenterUpdateOne {
	if s != nil {
		eccuo.SetStatus(*s)
	}
	return eccuo
}

// ClearStatus clears the value of the "Status" field.
func (eccuo *ExamCityCenterUpdateOne) ClearStatus() *ExamCityCenterUpdateOne {
	eccuo.mutation.ClearStatus()
	return eccuo
}

// SetDeletedbyid sets the "deletedbyid" field.
func (eccuo *ExamCityCenterUpdateOne) SetDeletedbyid(i int64) *ExamCityCenterUpdateOne {
	eccuo.mutation.ResetDeletedbyid()
	eccuo.mutation.SetDeletedbyid(i)
	return eccuo
}

// SetNillableDeletedbyid sets the "deletedbyid" field if the given value is not nil.
func (eccuo *ExamCityCenterUpdateOne) SetNillableDeletedbyid(i *int64) *ExamCityCenterUpdateOne {
	if i != nil {
		eccuo.SetDeletedbyid(*i)
	}
	return eccuo
}

// AddDeletedbyid adds i to the "deletedbyid" field.
func (eccuo *ExamCityCenterUpdateOne) AddDeletedbyid(i int64) *ExamCityCenterUpdateOne {
	eccuo.mutation.AddDeletedbyid(i)
	return eccuo
}

// ClearDeletedbyid clears the value of the "deletedbyid" field.
func (eccuo *ExamCityCenterUpdateOne) ClearDeletedbyid() *ExamCityCenterUpdateOne {
	eccuo.mutation.ClearDeletedbyid()
	return eccuo
}

// SetDeletedbyusername sets the "deletedbyusername" field.
func (eccuo *ExamCityCenterUpdateOne) SetDeletedbyusername(s string) *ExamCityCenterUpdateOne {
	eccuo.mutation.SetDeletedbyusername(s)
	return eccuo
}

// SetNillableDeletedbyusername sets the "deletedbyusername" field if the given value is not nil.
func (eccuo *ExamCityCenterUpdateOne) SetNillableDeletedbyusername(s *string) *ExamCityCenterUpdateOne {
	if s != nil {
		eccuo.SetDeletedbyusername(*s)
	}
	return eccuo
}

// ClearDeletedbyusername clears the value of the "deletedbyusername" field.
func (eccuo *ExamCityCenterUpdateOne) ClearDeletedbyusername() *ExamCityCenterUpdateOne {
	eccuo.mutation.ClearDeletedbyusername()
	return eccuo
}

// SetDeletedbyEmployeeid sets the "deletedbyEmployeeid" field.
func (eccuo *ExamCityCenterUpdateOne) SetDeletedbyEmployeeid(i int64) *ExamCityCenterUpdateOne {
	eccuo.mutation.ResetDeletedbyEmployeeid()
	eccuo.mutation.SetDeletedbyEmployeeid(i)
	return eccuo
}

// SetNillableDeletedbyEmployeeid sets the "deletedbyEmployeeid" field if the given value is not nil.
func (eccuo *ExamCityCenterUpdateOne) SetNillableDeletedbyEmployeeid(i *int64) *ExamCityCenterUpdateOne {
	if i != nil {
		eccuo.SetDeletedbyEmployeeid(*i)
	}
	return eccuo
}

// AddDeletedbyEmployeeid adds i to the "deletedbyEmployeeid" field.
func (eccuo *ExamCityCenterUpdateOne) AddDeletedbyEmployeeid(i int64) *ExamCityCenterUpdateOne {
	eccuo.mutation.AddDeletedbyEmployeeid(i)
	return eccuo
}

// ClearDeletedbyEmployeeid clears the value of the "deletedbyEmployeeid" field.
func (eccuo *ExamCityCenterUpdateOne) ClearDeletedbyEmployeeid() *ExamCityCenterUpdateOne {
	eccuo.mutation.ClearDeletedbyEmployeeid()
	return eccuo
}

// SetDeletedbyDesignation sets the "deletedbyDesignation" field.
func (eccuo *ExamCityCenterUpdateOne) SetDeletedbyDesignation(s string) *ExamCityCenterUpdateOne {
	eccuo.mutation.SetDeletedbyDesignation(s)
	return eccuo
}

// SetNillableDeletedbyDesignation sets the "deletedbyDesignation" field if the given value is not nil.
func (eccuo *ExamCityCenterUpdateOne) SetNillableDeletedbyDesignation(s *string) *ExamCityCenterUpdateOne {
	if s != nil {
		eccuo.SetDeletedbyDesignation(*s)
	}
	return eccuo
}

// ClearDeletedbyDesignation clears the value of the "deletedbyDesignation" field.
func (eccuo *ExamCityCenterUpdateOne) ClearDeletedbyDesignation() *ExamCityCenterUpdateOne {
	eccuo.mutation.ClearDeletedbyDesignation()
	return eccuo
}

// SetDeletedDate sets the "deletedDate" field.
func (eccuo *ExamCityCenterUpdateOne) SetDeletedDate(t time.Time) *ExamCityCenterUpdateOne {
	eccuo.mutation.SetDeletedDate(t)
	return eccuo
}

// SetNillableDeletedDate sets the "deletedDate" field if the given value is not nil.
func (eccuo *ExamCityCenterUpdateOne) SetNillableDeletedDate(t *time.Time) *ExamCityCenterUpdateOne {
	if t != nil {
		eccuo.SetDeletedDate(*t)
	}
	return eccuo
}

// ClearDeletedDate clears the value of the "deletedDate" field.
func (eccuo *ExamCityCenterUpdateOne) ClearDeletedDate() *ExamCityCenterUpdateOne {
	eccuo.mutation.ClearDeletedDate()
	return eccuo
}

// SetCircleCityName sets the "CircleCityName" field.
func (eccuo *ExamCityCenterUpdateOne) SetCircleCityName(s string) *ExamCityCenterUpdateOne {
	eccuo.mutation.SetCircleCityName(s)
	return eccuo
}

// SetNillableCircleCityName sets the "CircleCityName" field if the given value is not nil.
func (eccuo *ExamCityCenterUpdateOne) SetNillableCircleCityName(s *string) *ExamCityCenterUpdateOne {
	if s != nil {
		eccuo.SetCircleCityName(*s)
	}
	return eccuo
}

// ClearCircleCityName clears the value of the "CircleCityName" field.
func (eccuo *ExamCityCenterUpdateOne) ClearCircleCityName() *ExamCityCenterUpdateOne {
	eccuo.mutation.ClearCircleCityName()
	return eccuo
}

// SetDivisionCode sets the "DivisionCode" field.
func (eccuo *ExamCityCenterUpdateOne) SetDivisionCode(i int32) *ExamCityCenterUpdateOne {
	eccuo.mutation.ResetDivisionCode()
	eccuo.mutation.SetDivisionCode(i)
	return eccuo
}

// SetNillableDivisionCode sets the "DivisionCode" field if the given value is not nil.
func (eccuo *ExamCityCenterUpdateOne) SetNillableDivisionCode(i *int32) *ExamCityCenterUpdateOne {
	if i != nil {
		eccuo.SetDivisionCode(*i)
	}
	return eccuo
}

// AddDivisionCode adds i to the "DivisionCode" field.
func (eccuo *ExamCityCenterUpdateOne) AddDivisionCode(i int32) *ExamCityCenterUpdateOne {
	eccuo.mutation.AddDivisionCode(i)
	return eccuo
}

// ClearDivisionCode clears the value of the "DivisionCode" field.
func (eccuo *ExamCityCenterUpdateOne) ClearDivisionCode() *ExamCityCenterUpdateOne {
	eccuo.mutation.ClearDivisionCode()
	return eccuo
}

// SetRegionCode sets the "RegionCode" field.
func (eccuo *ExamCityCenterUpdateOne) SetRegionCode(i int32) *ExamCityCenterUpdateOne {
	eccuo.mutation.ResetRegionCode()
	eccuo.mutation.SetRegionCode(i)
	return eccuo
}

// SetNillableRegionCode sets the "RegionCode" field if the given value is not nil.
func (eccuo *ExamCityCenterUpdateOne) SetNillableRegionCode(i *int32) *ExamCityCenterUpdateOne {
	if i != nil {
		eccuo.SetRegionCode(*i)
	}
	return eccuo
}

// AddRegionCode adds i to the "RegionCode" field.
func (eccuo *ExamCityCenterUpdateOne) AddRegionCode(i int32) *ExamCityCenterUpdateOne {
	eccuo.mutation.AddRegionCode(i)
	return eccuo
}

// ClearRegionCode clears the value of the "RegionCode" field.
func (eccuo *ExamCityCenterUpdateOne) ClearRegionCode() *ExamCityCenterUpdateOne {
	eccuo.mutation.ClearRegionCode()
	return eccuo
}

// SetDivisionName sets the "DivisionName" field.
func (eccuo *ExamCityCenterUpdateOne) SetDivisionName(s string) *ExamCityCenterUpdateOne {
	eccuo.mutation.SetDivisionName(s)
	return eccuo
}

// SetNillableDivisionName sets the "DivisionName" field if the given value is not nil.
func (eccuo *ExamCityCenterUpdateOne) SetNillableDivisionName(s *string) *ExamCityCenterUpdateOne {
	if s != nil {
		eccuo.SetDivisionName(*s)
	}
	return eccuo
}

// ClearDivisionName clears the value of the "DivisionName" field.
func (eccuo *ExamCityCenterUpdateOne) ClearDivisionName() *ExamCityCenterUpdateOne {
	eccuo.mutation.ClearDivisionName()
	return eccuo
}

// SetRegionID sets the "RegionID" field.
func (eccuo *ExamCityCenterUpdateOne) SetRegionID(i int32) *ExamCityCenterUpdateOne {
	eccuo.mutation.ResetRegionID()
	eccuo.mutation.SetRegionID(i)
	return eccuo
}

// SetNillableRegionID sets the "RegionID" field if the given value is not nil.
func (eccuo *ExamCityCenterUpdateOne) SetNillableRegionID(i *int32) *ExamCityCenterUpdateOne {
	if i != nil {
		eccuo.SetRegionID(*i)
	}
	return eccuo
}

// AddRegionID adds i to the "RegionID" field.
func (eccuo *ExamCityCenterUpdateOne) AddRegionID(i int32) *ExamCityCenterUpdateOne {
	eccuo.mutation.AddRegionID(i)
	return eccuo
}

// ClearRegionID clears the value of the "RegionID" field.
func (eccuo *ExamCityCenterUpdateOne) ClearRegionID() *ExamCityCenterUpdateOne {
	eccuo.mutation.ClearRegionID()
	return eccuo
}

// SetRegionName sets the "RegionName" field.
func (eccuo *ExamCityCenterUpdateOne) SetRegionName(s string) *ExamCityCenterUpdateOne {
	eccuo.mutation.SetRegionName(s)
	return eccuo
}

// SetNillableRegionName sets the "RegionName" field if the given value is not nil.
func (eccuo *ExamCityCenterUpdateOne) SetNillableRegionName(s *string) *ExamCityCenterUpdateOne {
	if s != nil {
		eccuo.SetRegionName(*s)
	}
	return eccuo
}

// ClearRegionName clears the value of the "RegionName" field.
func (eccuo *ExamCityCenterUpdateOne) ClearRegionName() *ExamCityCenterUpdateOne {
	eccuo.mutation.ClearRegionName()
	return eccuo
}

// SetRegionCityName sets the "RegionCityName" field.
func (eccuo *ExamCityCenterUpdateOne) SetRegionCityName(s string) *ExamCityCenterUpdateOne {
	eccuo.mutation.SetRegionCityName(s)
	return eccuo
}

// SetNillableRegionCityName sets the "RegionCityName" field if the given value is not nil.
func (eccuo *ExamCityCenterUpdateOne) SetNillableRegionCityName(s *string) *ExamCityCenterUpdateOne {
	if s != nil {
		eccuo.SetRegionCityName(*s)
	}
	return eccuo
}

// ClearRegionCityName clears the value of the "RegionCityName" field.
func (eccuo *ExamCityCenterUpdateOne) ClearRegionCityName() *ExamCityCenterUpdateOne {
	eccuo.mutation.ClearRegionCityName()
	return eccuo
}

// SetCentreCityName sets the "CentreCityName" field.
func (eccuo *ExamCityCenterUpdateOne) SetCentreCityName(s string) *ExamCityCenterUpdateOne {
	eccuo.mutation.SetCentreCityName(s)
	return eccuo
}

// SetNillableCentreCityName sets the "CentreCityName" field if the given value is not nil.
func (eccuo *ExamCityCenterUpdateOne) SetNillableCentreCityName(s *string) *ExamCityCenterUpdateOne {
	if s != nil {
		eccuo.SetCentreCityName(*s)
	}
	return eccuo
}

// ClearCentreCityName clears the value of the "CentreCityName" field.
func (eccuo *ExamCityCenterUpdateOne) ClearCentreCityName() *ExamCityCenterUpdateOne {
	eccuo.mutation.ClearCentreCityName()
	return eccuo
}

// SetRemarks sets the "Remarks" field.
func (eccuo *ExamCityCenterUpdateOne) SetRemarks(s string) *ExamCityCenterUpdateOne {
	eccuo.mutation.SetRemarks(s)
	return eccuo
}

// SetNillableRemarks sets the "Remarks" field if the given value is not nil.
func (eccuo *ExamCityCenterUpdateOne) SetNillableRemarks(s *string) *ExamCityCenterUpdateOne {
	if s != nil {
		eccuo.SetRemarks(*s)
	}
	return eccuo
}

// ClearRemarks clears the value of the "Remarks" field.
func (eccuo *ExamCityCenterUpdateOne) ClearRemarks() *ExamCityCenterUpdateOne {
	eccuo.mutation.ClearRemarks()
	return eccuo
}

// SetUpdatedAt sets the "UpdatedAt" field.
func (eccuo *ExamCityCenterUpdateOne) SetUpdatedAt(t time.Time) *ExamCityCenterUpdateOne {
	eccuo.mutation.SetUpdatedAt(t)
	return eccuo
}

// SetNillableUpdatedAt sets the "UpdatedAt" field if the given value is not nil.
func (eccuo *ExamCityCenterUpdateOne) SetNillableUpdatedAt(t *time.Time) *ExamCityCenterUpdateOne {
	if t != nil {
		eccuo.SetUpdatedAt(*t)
	}
	return eccuo
}

// ClearUpdatedAt clears the value of the "UpdatedAt" field.
func (eccuo *ExamCityCenterUpdateOne) ClearUpdatedAt() *ExamCityCenterUpdateOne {
	eccuo.mutation.ClearUpdatedAt()
	return eccuo
}

// SetUpdatedBy sets the "UpdatedBy" field.
func (eccuo *ExamCityCenterUpdateOne) SetUpdatedBy(s string) *ExamCityCenterUpdateOne {
	eccuo.mutation.SetUpdatedBy(s)
	return eccuo
}

// SetNillableUpdatedBy sets the "UpdatedBy" field if the given value is not nil.
func (eccuo *ExamCityCenterUpdateOne) SetNillableUpdatedBy(s *string) *ExamCityCenterUpdateOne {
	if s != nil {
		eccuo.SetUpdatedBy(*s)
	}
	return eccuo
}

// ClearUpdatedBy clears the value of the "UpdatedBy" field.
func (eccuo *ExamCityCenterUpdateOne) ClearUpdatedBy() *ExamCityCenterUpdateOne {
	eccuo.mutation.ClearUpdatedBy()
	return eccuo
}

// SetCentreCode sets the "CentreCode" field.
func (eccuo *ExamCityCenterUpdateOne) SetCentreCode(i int32) *ExamCityCenterUpdateOne {
	eccuo.mutation.ResetCentreCode()
	eccuo.mutation.SetCentreCode(i)
	return eccuo
}

// SetNillableCentreCode sets the "CentreCode" field if the given value is not nil.
func (eccuo *ExamCityCenterUpdateOne) SetNillableCentreCode(i *int32) *ExamCityCenterUpdateOne {
	if i != nil {
		eccuo.SetCentreCode(*i)
	}
	return eccuo
}

// AddCentreCode adds i to the "CentreCode" field.
func (eccuo *ExamCityCenterUpdateOne) AddCentreCode(i int32) *ExamCityCenterUpdateOne {
	eccuo.mutation.AddCentreCode(i)
	return eccuo
}

// ClearCentreCode clears the value of the "CentreCode" field.
func (eccuo *ExamCityCenterUpdateOne) ClearCentreCode() *ExamCityCenterUpdateOne {
	eccuo.mutation.ClearCentreCode()
	return eccuo
}

// SetCircleID sets the "CircleID" field.
func (eccuo *ExamCityCenterUpdateOne) SetCircleID(i int32) *ExamCityCenterUpdateOne {
	eccuo.mutation.ResetCircleID()
	eccuo.mutation.SetCircleID(i)
	return eccuo
}

// SetNillableCircleID sets the "CircleID" field if the given value is not nil.
func (eccuo *ExamCityCenterUpdateOne) SetNillableCircleID(i *int32) *ExamCityCenterUpdateOne {
	if i != nil {
		eccuo.SetCircleID(*i)
	}
	return eccuo
}

// AddCircleID adds i to the "CircleID" field.
func (eccuo *ExamCityCenterUpdateOne) AddCircleID(i int32) *ExamCityCenterUpdateOne {
	eccuo.mutation.AddCircleID(i)
	return eccuo
}

// ClearCircleID clears the value of the "CircleID" field.
func (eccuo *ExamCityCenterUpdateOne) ClearCircleID() *ExamCityCenterUpdateOne {
	eccuo.mutation.ClearCircleID()
	return eccuo
}

// AddExamCityCenterRefIDs adds the "ExamCityCenterRef" edge to the Exam_Applications_IP entity by IDs.
func (eccuo *ExamCityCenterUpdateOne) AddExamCityCenterRefIDs(ids ...int64) *ExamCityCenterUpdateOne {
	eccuo.mutation.AddExamCityCenterRefIDs(ids...)
	return eccuo
}

// AddExamCityCenterRef adds the "ExamCityCenterRef" edges to the Exam_Applications_IP entity.
func (eccuo *ExamCityCenterUpdateOne) AddExamCityCenterRef(e ...*Exam_Applications_IP) *ExamCityCenterUpdateOne {
	ids := make([]int64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return eccuo.AddExamCityCenterRefIDs(ids...)
}

// AddExamCityCenterMTSPMMGRefIDs adds the "ExamCityCenterMTSPMMGRef" edge to the Exam_Application_MTSPMMG entity by IDs.
func (eccuo *ExamCityCenterUpdateOne) AddExamCityCenterMTSPMMGRefIDs(ids ...int64) *ExamCityCenterUpdateOne {
	eccuo.mutation.AddExamCityCenterMTSPMMGRefIDs(ids...)
	return eccuo
}

// AddExamCityCenterMTSPMMGRef adds the "ExamCityCenterMTSPMMGRef" edges to the Exam_Application_MTSPMMG entity.
func (eccuo *ExamCityCenterUpdateOne) AddExamCityCenterMTSPMMGRef(e ...*Exam_Application_MTSPMMG) *ExamCityCenterUpdateOne {
	ids := make([]int64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return eccuo.AddExamCityCenterMTSPMMGRefIDs(ids...)
}

// AddExamCityCenterGDSPARefIDs adds the "ExamCityCenterGDSPARef" edge to the Exam_Applications_GDSPA entity by IDs.
func (eccuo *ExamCityCenterUpdateOne) AddExamCityCenterGDSPARefIDs(ids ...int64) *ExamCityCenterUpdateOne {
	eccuo.mutation.AddExamCityCenterGDSPARefIDs(ids...)
	return eccuo
}

// AddExamCityCenterGDSPARef adds the "ExamCityCenterGDSPARef" edges to the Exam_Applications_GDSPA entity.
func (eccuo *ExamCityCenterUpdateOne) AddExamCityCenterGDSPARef(e ...*Exam_Applications_GDSPA) *ExamCityCenterUpdateOne {
	ids := make([]int64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return eccuo.AddExamCityCenterGDSPARefIDs(ids...)
}

// AddExamCityCenterGDSPMRefIDs adds the "ExamCityCenterGDSPMRef" edge to the Exam_Applications_GDSPM entity by IDs.
func (eccuo *ExamCityCenterUpdateOne) AddExamCityCenterGDSPMRefIDs(ids ...int64) *ExamCityCenterUpdateOne {
	eccuo.mutation.AddExamCityCenterGDSPMRefIDs(ids...)
	return eccuo
}

// AddExamCityCenterGDSPMRef adds the "ExamCityCenterGDSPMRef" edges to the Exam_Applications_GDSPM entity.
func (eccuo *ExamCityCenterUpdateOne) AddExamCityCenterGDSPMRef(e ...*Exam_Applications_GDSPM) *ExamCityCenterUpdateOne {
	ids := make([]int64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return eccuo.AddExamCityCenterGDSPMRefIDs(ids...)
}

// AddExamCityCenterPMPARefIDs adds the "ExamCityCenterPMPARef" edge to the Exam_Applications_PMPA entity by IDs.
func (eccuo *ExamCityCenterUpdateOne) AddExamCityCenterPMPARefIDs(ids ...int64) *ExamCityCenterUpdateOne {
	eccuo.mutation.AddExamCityCenterPMPARefIDs(ids...)
	return eccuo
}

// AddExamCityCenterPMPARef adds the "ExamCityCenterPMPARef" edges to the Exam_Applications_PMPA entity.
func (eccuo *ExamCityCenterUpdateOne) AddExamCityCenterPMPARef(e ...*Exam_Applications_PMPA) *ExamCityCenterUpdateOne {
	ids := make([]int64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return eccuo.AddExamCityCenterPMPARefIDs(ids...)
}

// AddExamCityCenterPSRefIDs adds the "ExamCityCenterPSRef" edge to the Exam_Applications_PS entity by IDs.
func (eccuo *ExamCityCenterUpdateOne) AddExamCityCenterPSRefIDs(ids ...int64) *ExamCityCenterUpdateOne {
	eccuo.mutation.AddExamCityCenterPSRefIDs(ids...)
	return eccuo
}

// AddExamCityCenterPSRef adds the "ExamCityCenterPSRef" edges to the Exam_Applications_PS entity.
func (eccuo *ExamCityCenterUpdateOne) AddExamCityCenterPSRef(e ...*Exam_Applications_PS) *ExamCityCenterUpdateOne {
	ids := make([]int64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return eccuo.AddExamCityCenterPSRefIDs(ids...)
}

// Mutation returns the ExamCityCenterMutation object of the builder.
func (eccuo *ExamCityCenterUpdateOne) Mutation() *ExamCityCenterMutation {
	return eccuo.mutation
}

// ClearExamCityCenterRef clears all "ExamCityCenterRef" edges to the Exam_Applications_IP entity.
func (eccuo *ExamCityCenterUpdateOne) ClearExamCityCenterRef() *ExamCityCenterUpdateOne {
	eccuo.mutation.ClearExamCityCenterRef()
	return eccuo
}

// RemoveExamCityCenterRefIDs removes the "ExamCityCenterRef" edge to Exam_Applications_IP entities by IDs.
func (eccuo *ExamCityCenterUpdateOne) RemoveExamCityCenterRefIDs(ids ...int64) *ExamCityCenterUpdateOne {
	eccuo.mutation.RemoveExamCityCenterRefIDs(ids...)
	return eccuo
}

// RemoveExamCityCenterRef removes "ExamCityCenterRef" edges to Exam_Applications_IP entities.
func (eccuo *ExamCityCenterUpdateOne) RemoveExamCityCenterRef(e ...*Exam_Applications_IP) *ExamCityCenterUpdateOne {
	ids := make([]int64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return eccuo.RemoveExamCityCenterRefIDs(ids...)
}

// ClearExamCityCenterMTSPMMGRef clears all "ExamCityCenterMTSPMMGRef" edges to the Exam_Application_MTSPMMG entity.
func (eccuo *ExamCityCenterUpdateOne) ClearExamCityCenterMTSPMMGRef() *ExamCityCenterUpdateOne {
	eccuo.mutation.ClearExamCityCenterMTSPMMGRef()
	return eccuo
}

// RemoveExamCityCenterMTSPMMGRefIDs removes the "ExamCityCenterMTSPMMGRef" edge to Exam_Application_MTSPMMG entities by IDs.
func (eccuo *ExamCityCenterUpdateOne) RemoveExamCityCenterMTSPMMGRefIDs(ids ...int64) *ExamCityCenterUpdateOne {
	eccuo.mutation.RemoveExamCityCenterMTSPMMGRefIDs(ids...)
	return eccuo
}

// RemoveExamCityCenterMTSPMMGRef removes "ExamCityCenterMTSPMMGRef" edges to Exam_Application_MTSPMMG entities.
func (eccuo *ExamCityCenterUpdateOne) RemoveExamCityCenterMTSPMMGRef(e ...*Exam_Application_MTSPMMG) *ExamCityCenterUpdateOne {
	ids := make([]int64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return eccuo.RemoveExamCityCenterMTSPMMGRefIDs(ids...)
}

// ClearExamCityCenterGDSPARef clears all "ExamCityCenterGDSPARef" edges to the Exam_Applications_GDSPA entity.
func (eccuo *ExamCityCenterUpdateOne) ClearExamCityCenterGDSPARef() *ExamCityCenterUpdateOne {
	eccuo.mutation.ClearExamCityCenterGDSPARef()
	return eccuo
}

// RemoveExamCityCenterGDSPARefIDs removes the "ExamCityCenterGDSPARef" edge to Exam_Applications_GDSPA entities by IDs.
func (eccuo *ExamCityCenterUpdateOne) RemoveExamCityCenterGDSPARefIDs(ids ...int64) *ExamCityCenterUpdateOne {
	eccuo.mutation.RemoveExamCityCenterGDSPARefIDs(ids...)
	return eccuo
}

// RemoveExamCityCenterGDSPARef removes "ExamCityCenterGDSPARef" edges to Exam_Applications_GDSPA entities.
func (eccuo *ExamCityCenterUpdateOne) RemoveExamCityCenterGDSPARef(e ...*Exam_Applications_GDSPA) *ExamCityCenterUpdateOne {
	ids := make([]int64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return eccuo.RemoveExamCityCenterGDSPARefIDs(ids...)
}

// ClearExamCityCenterGDSPMRef clears all "ExamCityCenterGDSPMRef" edges to the Exam_Applications_GDSPM entity.
func (eccuo *ExamCityCenterUpdateOne) ClearExamCityCenterGDSPMRef() *ExamCityCenterUpdateOne {
	eccuo.mutation.ClearExamCityCenterGDSPMRef()
	return eccuo
}

// RemoveExamCityCenterGDSPMRefIDs removes the "ExamCityCenterGDSPMRef" edge to Exam_Applications_GDSPM entities by IDs.
func (eccuo *ExamCityCenterUpdateOne) RemoveExamCityCenterGDSPMRefIDs(ids ...int64) *ExamCityCenterUpdateOne {
	eccuo.mutation.RemoveExamCityCenterGDSPMRefIDs(ids...)
	return eccuo
}

// RemoveExamCityCenterGDSPMRef removes "ExamCityCenterGDSPMRef" edges to Exam_Applications_GDSPM entities.
func (eccuo *ExamCityCenterUpdateOne) RemoveExamCityCenterGDSPMRef(e ...*Exam_Applications_GDSPM) *ExamCityCenterUpdateOne {
	ids := make([]int64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return eccuo.RemoveExamCityCenterGDSPMRefIDs(ids...)
}

// ClearExamCityCenterPMPARef clears all "ExamCityCenterPMPARef" edges to the Exam_Applications_PMPA entity.
func (eccuo *ExamCityCenterUpdateOne) ClearExamCityCenterPMPARef() *ExamCityCenterUpdateOne {
	eccuo.mutation.ClearExamCityCenterPMPARef()
	return eccuo
}

// RemoveExamCityCenterPMPARefIDs removes the "ExamCityCenterPMPARef" edge to Exam_Applications_PMPA entities by IDs.
func (eccuo *ExamCityCenterUpdateOne) RemoveExamCityCenterPMPARefIDs(ids ...int64) *ExamCityCenterUpdateOne {
	eccuo.mutation.RemoveExamCityCenterPMPARefIDs(ids...)
	return eccuo
}

// RemoveExamCityCenterPMPARef removes "ExamCityCenterPMPARef" edges to Exam_Applications_PMPA entities.
func (eccuo *ExamCityCenterUpdateOne) RemoveExamCityCenterPMPARef(e ...*Exam_Applications_PMPA) *ExamCityCenterUpdateOne {
	ids := make([]int64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return eccuo.RemoveExamCityCenterPMPARefIDs(ids...)
}

// ClearExamCityCenterPSRef clears all "ExamCityCenterPSRef" edges to the Exam_Applications_PS entity.
func (eccuo *ExamCityCenterUpdateOne) ClearExamCityCenterPSRef() *ExamCityCenterUpdateOne {
	eccuo.mutation.ClearExamCityCenterPSRef()
	return eccuo
}

// RemoveExamCityCenterPSRefIDs removes the "ExamCityCenterPSRef" edge to Exam_Applications_PS entities by IDs.
func (eccuo *ExamCityCenterUpdateOne) RemoveExamCityCenterPSRefIDs(ids ...int64) *ExamCityCenterUpdateOne {
	eccuo.mutation.RemoveExamCityCenterPSRefIDs(ids...)
	return eccuo
}

// RemoveExamCityCenterPSRef removes "ExamCityCenterPSRef" edges to Exam_Applications_PS entities.
func (eccuo *ExamCityCenterUpdateOne) RemoveExamCityCenterPSRef(e ...*Exam_Applications_PS) *ExamCityCenterUpdateOne {
	ids := make([]int64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return eccuo.RemoveExamCityCenterPSRefIDs(ids...)
}

// Where appends a list predicates to the ExamCityCenterUpdate builder.
func (eccuo *ExamCityCenterUpdateOne) Where(ps ...predicate.ExamCityCenter) *ExamCityCenterUpdateOne {
	eccuo.mutation.Where(ps...)
	return eccuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (eccuo *ExamCityCenterUpdateOne) Select(field string, fields ...string) *ExamCityCenterUpdateOne {
	eccuo.fields = append([]string{field}, fields...)
	return eccuo
}

// Save executes the query and returns the updated ExamCityCenter entity.
func (eccuo *ExamCityCenterUpdateOne) Save(ctx context.Context) (*ExamCityCenter, error) {
	return withHooks(ctx, eccuo.sqlSave, eccuo.mutation, eccuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (eccuo *ExamCityCenterUpdateOne) SaveX(ctx context.Context) *ExamCityCenter {
	node, err := eccuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (eccuo *ExamCityCenterUpdateOne) Exec(ctx context.Context) error {
	_, err := eccuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eccuo *ExamCityCenterUpdateOne) ExecX(ctx context.Context) {
	if err := eccuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (eccuo *ExamCityCenterUpdateOne) sqlSave(ctx context.Context) (_node *ExamCityCenter, err error) {
	_spec := sqlgraph.NewUpdateSpec(examcitycenter.Table, examcitycenter.Columns, sqlgraph.NewFieldSpec(examcitycenter.FieldID, field.TypeInt32))
	id, ok := eccuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ExamCityCenter.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := eccuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, examcitycenter.FieldID)
		for _, f := range fields {
			if !examcitycenter.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != examcitycenter.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := eccuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eccuo.mutation.ExamCode(); ok {
		_spec.SetField(examcitycenter.FieldExamCode, field.TypeInt32, value)
	}
	if value, ok := eccuo.mutation.AddedExamCode(); ok {
		_spec.AddField(examcitycenter.FieldExamCode, field.TypeInt32, value)
	}
	if eccuo.mutation.ExamCodeCleared() {
		_spec.ClearField(examcitycenter.FieldExamCode, field.TypeInt32)
	}
	if value, ok := eccuo.mutation.ExamName(); ok {
		_spec.SetField(examcitycenter.FieldExamName, field.TypeString, value)
	}
	if eccuo.mutation.ExamNameCleared() {
		_spec.ClearField(examcitycenter.FieldExamName, field.TypeString)
	}
	if value, ok := eccuo.mutation.ExamShortName(); ok {
		_spec.SetField(examcitycenter.FieldExamShortName, field.TypeString, value)
	}
	if eccuo.mutation.ExamShortNameCleared() {
		_spec.ClearField(examcitycenter.FieldExamShortName, field.TypeString)
	}
	if value, ok := eccuo.mutation.ExamYear(); ok {
		_spec.SetField(examcitycenter.FieldExamYear, field.TypeInt32, value)
	}
	if value, ok := eccuo.mutation.AddedExamYear(); ok {
		_spec.AddField(examcitycenter.FieldExamYear, field.TypeInt32, value)
	}
	if eccuo.mutation.ExamYearCleared() {
		_spec.ClearField(examcitycenter.FieldExamYear, field.TypeInt32)
	}
	if value, ok := eccuo.mutation.ConductedBy(); ok {
		_spec.SetField(examcitycenter.FieldConductedBy, field.TypeString, value)
	}
	if eccuo.mutation.ConductedByCleared() {
		_spec.ClearField(examcitycenter.FieldConductedBy, field.TypeString)
	}
	if value, ok := eccuo.mutation.NodalOfficeFacilityID(); ok {
		_spec.SetField(examcitycenter.FieldNodalOfficeFacilityID, field.TypeString, value)
	}
	if eccuo.mutation.NodalOfficeFacilityIDCleared() {
		_spec.ClearField(examcitycenter.FieldNodalOfficeFacilityID, field.TypeString)
	}
	if value, ok := eccuo.mutation.NodalOfficeName(); ok {
		_spec.SetField(examcitycenter.FieldNodalOfficeName, field.TypeString, value)
	}
	if eccuo.mutation.NodalOfficeNameCleared() {
		_spec.ClearField(examcitycenter.FieldNodalOfficeName, field.TypeString)
	}
	if value, ok := eccuo.mutation.NotificationCode(); ok {
		_spec.SetField(examcitycenter.FieldNotificationCode, field.TypeInt32, value)
	}
	if value, ok := eccuo.mutation.AddedNotificationCode(); ok {
		_spec.AddField(examcitycenter.FieldNotificationCode, field.TypeInt32, value)
	}
	if eccuo.mutation.NotificationCodeCleared() {
		_spec.ClearField(examcitycenter.FieldNotificationCode, field.TypeInt32)
	}
	if value, ok := eccuo.mutation.NotificationNumber(); ok {
		_spec.SetField(examcitycenter.FieldNotificationNumber, field.TypeString, value)
	}
	if eccuo.mutation.NotificationNumberCleared() {
		_spec.ClearField(examcitycenter.FieldNotificationNumber, field.TypeString)
	}
	if value, ok := eccuo.mutation.CenterCityName(); ok {
		_spec.SetField(examcitycenter.FieldCenterCityName, field.TypeString, value)
	}
	if eccuo.mutation.CenterCityNameCleared() {
		_spec.ClearField(examcitycenter.FieldCenterCityName, field.TypeString)
	}
	if value, ok := eccuo.mutation.CreatedById(); ok {
		_spec.SetField(examcitycenter.FieldCreatedById, field.TypeInt64, value)
	}
	if value, ok := eccuo.mutation.AddedCreatedById(); ok {
		_spec.AddField(examcitycenter.FieldCreatedById, field.TypeInt64, value)
	}
	if eccuo.mutation.CreatedByIdCleared() {
		_spec.ClearField(examcitycenter.FieldCreatedById, field.TypeInt64)
	}
	if value, ok := eccuo.mutation.CreatedByUserName(); ok {
		_spec.SetField(examcitycenter.FieldCreatedByUserName, field.TypeString, value)
	}
	if eccuo.mutation.CreatedByUserNameCleared() {
		_spec.ClearField(examcitycenter.FieldCreatedByUserName, field.TypeString)
	}
	if value, ok := eccuo.mutation.CreatedByEmpId(); ok {
		_spec.SetField(examcitycenter.FieldCreatedByEmpId, field.TypeInt64, value)
	}
	if value, ok := eccuo.mutation.AddedCreatedByEmpId(); ok {
		_spec.AddField(examcitycenter.FieldCreatedByEmpId, field.TypeInt64, value)
	}
	if eccuo.mutation.CreatedByEmpIdCleared() {
		_spec.ClearField(examcitycenter.FieldCreatedByEmpId, field.TypeInt64)
	}
	if value, ok := eccuo.mutation.CreatedByDesignation(); ok {
		_spec.SetField(examcitycenter.FieldCreatedByDesignation, field.TypeString, value)
	}
	if eccuo.mutation.CreatedByDesignationCleared() {
		_spec.ClearField(examcitycenter.FieldCreatedByDesignation, field.TypeString)
	}
	if value, ok := eccuo.mutation.CreatedDate(); ok {
		_spec.SetField(examcitycenter.FieldCreatedDate, field.TypeTime, value)
	}
	if eccuo.mutation.CreatedDateCleared() {
		_spec.ClearField(examcitycenter.FieldCreatedDate, field.TypeTime)
	}
	if value, ok := eccuo.mutation.Status(); ok {
		_spec.SetField(examcitycenter.FieldStatus, field.TypeString, value)
	}
	if eccuo.mutation.StatusCleared() {
		_spec.ClearField(examcitycenter.FieldStatus, field.TypeString)
	}
	if value, ok := eccuo.mutation.Deletedbyid(); ok {
		_spec.SetField(examcitycenter.FieldDeletedbyid, field.TypeInt64, value)
	}
	if value, ok := eccuo.mutation.AddedDeletedbyid(); ok {
		_spec.AddField(examcitycenter.FieldDeletedbyid, field.TypeInt64, value)
	}
	if eccuo.mutation.DeletedbyidCleared() {
		_spec.ClearField(examcitycenter.FieldDeletedbyid, field.TypeInt64)
	}
	if value, ok := eccuo.mutation.Deletedbyusername(); ok {
		_spec.SetField(examcitycenter.FieldDeletedbyusername, field.TypeString, value)
	}
	if eccuo.mutation.DeletedbyusernameCleared() {
		_spec.ClearField(examcitycenter.FieldDeletedbyusername, field.TypeString)
	}
	if value, ok := eccuo.mutation.DeletedbyEmployeeid(); ok {
		_spec.SetField(examcitycenter.FieldDeletedbyEmployeeid, field.TypeInt64, value)
	}
	if value, ok := eccuo.mutation.AddedDeletedbyEmployeeid(); ok {
		_spec.AddField(examcitycenter.FieldDeletedbyEmployeeid, field.TypeInt64, value)
	}
	if eccuo.mutation.DeletedbyEmployeeidCleared() {
		_spec.ClearField(examcitycenter.FieldDeletedbyEmployeeid, field.TypeInt64)
	}
	if value, ok := eccuo.mutation.DeletedbyDesignation(); ok {
		_spec.SetField(examcitycenter.FieldDeletedbyDesignation, field.TypeString, value)
	}
	if eccuo.mutation.DeletedbyDesignationCleared() {
		_spec.ClearField(examcitycenter.FieldDeletedbyDesignation, field.TypeString)
	}
	if value, ok := eccuo.mutation.DeletedDate(); ok {
		_spec.SetField(examcitycenter.FieldDeletedDate, field.TypeTime, value)
	}
	if eccuo.mutation.DeletedDateCleared() {
		_spec.ClearField(examcitycenter.FieldDeletedDate, field.TypeTime)
	}
	if value, ok := eccuo.mutation.CircleCityName(); ok {
		_spec.SetField(examcitycenter.FieldCircleCityName, field.TypeString, value)
	}
	if eccuo.mutation.CircleCityNameCleared() {
		_spec.ClearField(examcitycenter.FieldCircleCityName, field.TypeString)
	}
	if value, ok := eccuo.mutation.DivisionCode(); ok {
		_spec.SetField(examcitycenter.FieldDivisionCode, field.TypeInt32, value)
	}
	if value, ok := eccuo.mutation.AddedDivisionCode(); ok {
		_spec.AddField(examcitycenter.FieldDivisionCode, field.TypeInt32, value)
	}
	if eccuo.mutation.DivisionCodeCleared() {
		_spec.ClearField(examcitycenter.FieldDivisionCode, field.TypeInt32)
	}
	if value, ok := eccuo.mutation.RegionCode(); ok {
		_spec.SetField(examcitycenter.FieldRegionCode, field.TypeInt32, value)
	}
	if value, ok := eccuo.mutation.AddedRegionCode(); ok {
		_spec.AddField(examcitycenter.FieldRegionCode, field.TypeInt32, value)
	}
	if eccuo.mutation.RegionCodeCleared() {
		_spec.ClearField(examcitycenter.FieldRegionCode, field.TypeInt32)
	}
	if value, ok := eccuo.mutation.DivisionName(); ok {
		_spec.SetField(examcitycenter.FieldDivisionName, field.TypeString, value)
	}
	if eccuo.mutation.DivisionNameCleared() {
		_spec.ClearField(examcitycenter.FieldDivisionName, field.TypeString)
	}
	if value, ok := eccuo.mutation.RegionID(); ok {
		_spec.SetField(examcitycenter.FieldRegionID, field.TypeInt32, value)
	}
	if value, ok := eccuo.mutation.AddedRegionID(); ok {
		_spec.AddField(examcitycenter.FieldRegionID, field.TypeInt32, value)
	}
	if eccuo.mutation.RegionIDCleared() {
		_spec.ClearField(examcitycenter.FieldRegionID, field.TypeInt32)
	}
	if value, ok := eccuo.mutation.RegionName(); ok {
		_spec.SetField(examcitycenter.FieldRegionName, field.TypeString, value)
	}
	if eccuo.mutation.RegionNameCleared() {
		_spec.ClearField(examcitycenter.FieldRegionName, field.TypeString)
	}
	if value, ok := eccuo.mutation.RegionCityName(); ok {
		_spec.SetField(examcitycenter.FieldRegionCityName, field.TypeString, value)
	}
	if eccuo.mutation.RegionCityNameCleared() {
		_spec.ClearField(examcitycenter.FieldRegionCityName, field.TypeString)
	}
	if value, ok := eccuo.mutation.CentreCityName(); ok {
		_spec.SetField(examcitycenter.FieldCentreCityName, field.TypeString, value)
	}
	if eccuo.mutation.CentreCityNameCleared() {
		_spec.ClearField(examcitycenter.FieldCentreCityName, field.TypeString)
	}
	if value, ok := eccuo.mutation.Remarks(); ok {
		_spec.SetField(examcitycenter.FieldRemarks, field.TypeString, value)
	}
	if eccuo.mutation.RemarksCleared() {
		_spec.ClearField(examcitycenter.FieldRemarks, field.TypeString)
	}
	if value, ok := eccuo.mutation.UpdatedAt(); ok {
		_spec.SetField(examcitycenter.FieldUpdatedAt, field.TypeTime, value)
	}
	if eccuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(examcitycenter.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := eccuo.mutation.UpdatedBy(); ok {
		_spec.SetField(examcitycenter.FieldUpdatedBy, field.TypeString, value)
	}
	if eccuo.mutation.UpdatedByCleared() {
		_spec.ClearField(examcitycenter.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := eccuo.mutation.CentreCode(); ok {
		_spec.SetField(examcitycenter.FieldCentreCode, field.TypeInt32, value)
	}
	if value, ok := eccuo.mutation.AddedCentreCode(); ok {
		_spec.AddField(examcitycenter.FieldCentreCode, field.TypeInt32, value)
	}
	if eccuo.mutation.CentreCodeCleared() {
		_spec.ClearField(examcitycenter.FieldCentreCode, field.TypeInt32)
	}
	if value, ok := eccuo.mutation.CircleID(); ok {
		_spec.SetField(examcitycenter.FieldCircleID, field.TypeInt32, value)
	}
	if value, ok := eccuo.mutation.AddedCircleID(); ok {
		_spec.AddField(examcitycenter.FieldCircleID, field.TypeInt32, value)
	}
	if eccuo.mutation.CircleIDCleared() {
		_spec.ClearField(examcitycenter.FieldCircleID, field.TypeInt32)
	}
	if eccuo.mutation.ExamCityCenterRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   examcitycenter.ExamCityCenterRefTable,
			Columns: []string{examcitycenter.ExamCityCenterRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_ip.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eccuo.mutation.RemovedExamCityCenterRefIDs(); len(nodes) > 0 && !eccuo.mutation.ExamCityCenterRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   examcitycenter.ExamCityCenterRefTable,
			Columns: []string{examcitycenter.ExamCityCenterRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_ip.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eccuo.mutation.ExamCityCenterRefIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   examcitycenter.ExamCityCenterRefTable,
			Columns: []string{examcitycenter.ExamCityCenterRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_ip.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eccuo.mutation.ExamCityCenterMTSPMMGRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   examcitycenter.ExamCityCenterMTSPMMGRefTable,
			Columns: []string{examcitycenter.ExamCityCenterMTSPMMGRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_application_mtspmmg.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eccuo.mutation.RemovedExamCityCenterMTSPMMGRefIDs(); len(nodes) > 0 && !eccuo.mutation.ExamCityCenterMTSPMMGRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   examcitycenter.ExamCityCenterMTSPMMGRefTable,
			Columns: []string{examcitycenter.ExamCityCenterMTSPMMGRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_application_mtspmmg.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eccuo.mutation.ExamCityCenterMTSPMMGRefIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   examcitycenter.ExamCityCenterMTSPMMGRefTable,
			Columns: []string{examcitycenter.ExamCityCenterMTSPMMGRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_application_mtspmmg.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eccuo.mutation.ExamCityCenterGDSPARefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   examcitycenter.ExamCityCenterGDSPARefTable,
			Columns: []string{examcitycenter.ExamCityCenterGDSPARefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_gdspa.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eccuo.mutation.RemovedExamCityCenterGDSPARefIDs(); len(nodes) > 0 && !eccuo.mutation.ExamCityCenterGDSPARefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   examcitycenter.ExamCityCenterGDSPARefTable,
			Columns: []string{examcitycenter.ExamCityCenterGDSPARefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_gdspa.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eccuo.mutation.ExamCityCenterGDSPARefIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   examcitycenter.ExamCityCenterGDSPARefTable,
			Columns: []string{examcitycenter.ExamCityCenterGDSPARefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_gdspa.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eccuo.mutation.ExamCityCenterGDSPMRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   examcitycenter.ExamCityCenterGDSPMRefTable,
			Columns: []string{examcitycenter.ExamCityCenterGDSPMRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_gdspm.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eccuo.mutation.RemovedExamCityCenterGDSPMRefIDs(); len(nodes) > 0 && !eccuo.mutation.ExamCityCenterGDSPMRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   examcitycenter.ExamCityCenterGDSPMRefTable,
			Columns: []string{examcitycenter.ExamCityCenterGDSPMRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_gdspm.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eccuo.mutation.ExamCityCenterGDSPMRefIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   examcitycenter.ExamCityCenterGDSPMRefTable,
			Columns: []string{examcitycenter.ExamCityCenterGDSPMRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_gdspm.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eccuo.mutation.ExamCityCenterPMPARefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   examcitycenter.ExamCityCenterPMPARefTable,
			Columns: []string{examcitycenter.ExamCityCenterPMPARefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_pmpa.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eccuo.mutation.RemovedExamCityCenterPMPARefIDs(); len(nodes) > 0 && !eccuo.mutation.ExamCityCenterPMPARefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   examcitycenter.ExamCityCenterPMPARefTable,
			Columns: []string{examcitycenter.ExamCityCenterPMPARefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_pmpa.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eccuo.mutation.ExamCityCenterPMPARefIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   examcitycenter.ExamCityCenterPMPARefTable,
			Columns: []string{examcitycenter.ExamCityCenterPMPARefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_pmpa.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eccuo.mutation.ExamCityCenterPSRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   examcitycenter.ExamCityCenterPSRefTable,
			Columns: []string{examcitycenter.ExamCityCenterPSRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_ps.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eccuo.mutation.RemovedExamCityCenterPSRefIDs(); len(nodes) > 0 && !eccuo.mutation.ExamCityCenterPSRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   examcitycenter.ExamCityCenterPSRefTable,
			Columns: []string{examcitycenter.ExamCityCenterPSRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_ps.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eccuo.mutation.ExamCityCenterPSRefIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   examcitycenter.ExamCityCenterPSRefTable,
			Columns: []string{examcitycenter.ExamCityCenterPSRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_ps.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ExamCityCenter{config: eccuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, eccuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{examcitycenter.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	eccuo.mutation.done = true
	return _node, nil
}
