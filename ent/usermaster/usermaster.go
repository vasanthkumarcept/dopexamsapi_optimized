// Code generated by ent, DO NOT EDIT.

package usermaster

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the usermaster type in the database.
	Label = "user_master"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "UserID"
	// FieldEmployeeID holds the string denoting the employeeid field in the database.
	FieldEmployeeID = "employee_id"
	// FieldEmployeeName holds the string denoting the employeename field in the database.
	FieldEmployeeName = "employee_name"
	// FieldMobile holds the string denoting the mobile field in the database.
	FieldMobile = "mobile"
	// FieldEmailID holds the string denoting the emailid field in the database.
	FieldEmailID = "email_id"
	// FieldUserName holds the string denoting the username field in the database.
	FieldUserName = "user_name"
	// FieldPassword holds the string denoting the password field in the database.
	FieldPassword = "password"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldStatuss holds the string denoting the statuss field in the database.
	FieldStatuss = "statuss"
	// FieldOTP holds the string denoting the otp field in the database.
	FieldOTP = "otp"
	// FieldOTPNew holds the string denoting the otpnew field in the database.
	FieldOTPNew = "otp_new"
	// FieldEmailOTPNew holds the string denoting the emailotpnew field in the database.
	FieldEmailOTPNew = "email_otp_new"
	// FieldOTPRemarks holds the string denoting the otpremarks field in the database.
	FieldOTPRemarks = "otp_remarks"
	// FieldCreatedAt holds the string denoting the createdat field in the database.
	FieldCreatedAt = "created_at"
	// FieldOTPTriggeredTime holds the string denoting the otptriggeredtime field in the database.
	FieldOTPTriggeredTime = "otp_triggered_time"
	// FieldOTPSavedTime holds the string denoting the otpsavedtime field in the database.
	FieldOTPSavedTime = "otp_saved_time"
	// FieldOTPExpiryTime holds the string denoting the otpexpirytime field in the database.
	FieldOTPExpiryTime = "otp_expiry_time"
	// FieldNewPasswordRequest holds the string denoting the newpasswordrequest field in the database.
	FieldNewPasswordRequest = "new_password_request"
	// FieldEmailOTP holds the string denoting the emailotp field in the database.
	FieldEmailOTP = "email_otp"
	// FieldEmailOTPRemarks holds the string denoting the emailotpremarks field in the database.
	FieldEmailOTPRemarks = "email_otp_remarks"
	// FieldEmailCreatedAt holds the string denoting the emailcreatedat field in the database.
	FieldEmailCreatedAt = "email_created_at"
	// FieldEmailOTPTriggeredTime holds the string denoting the emailotptriggeredtime field in the database.
	FieldEmailOTPTriggeredTime = "email_otp_triggered_time"
	// FieldEmailOTPSavedTime holds the string denoting the emailotpsavedtime field in the database.
	FieldEmailOTPSavedTime = "email_otp_saved_time"
	// FieldEmailOTPExpiryTime holds the string denoting the emailotpexpirytime field in the database.
	FieldEmailOTPExpiryTime = "email_otp_expiry_time"
	// FieldEmailNewPasswordRequest holds the string denoting the emailnewpasswordrequest field in the database.
	FieldEmailNewPasswordRequest = "email_new_password_request"
	// FieldUidToken holds the string denoting the uidtoken field in the database.
	FieldUidToken = "uid_token"
	// FieldCreatedById holds the string denoting the createdbyid field in the database.
	FieldCreatedById = "created_by_id"
	// FieldCreatedByEmployeeId holds the string denoting the createdbyemployeeid field in the database.
	FieldCreatedByEmployeeId = "created_by_employee_id"
	// FieldCreatedByUserName holds the string denoting the createdbyusername field in the database.
	FieldCreatedByUserName = "created_by_user_name"
	// FieldCreatedByDesignation holds the string denoting the createdbydesignation field in the database.
	FieldCreatedByDesignation = "created_by_designation"
	// FieldCreatedDate holds the string denoting the createddate field in the database.
	FieldCreatedDate = "created_date"
	// FieldDeletedById holds the string denoting the deletedbyid field in the database.
	FieldDeletedById = "deleted_by_id"
	// FieldDeletedByEmployeeId holds the string denoting the deletedbyemployeeid field in the database.
	FieldDeletedByEmployeeId = "deleted_by_employee_id"
	// FieldDeletedByUserName holds the string denoting the deletedbyusername field in the database.
	FieldDeletedByUserName = "deleted_by_user_name"
	// FieldDeletedByDesignation holds the string denoting the deletedbydesignation field in the database.
	FieldDeletedByDesignation = "deleted_by_designation"
	// FieldDeletedDate holds the string denoting the deleteddate field in the database.
	FieldDeletedDate = "deleted_date"
	// FieldFacilityID holds the string denoting the facilityid field in the database.
	FieldFacilityID = "facility_id"
	// FieldCircleFacilityId holds the string denoting the circlefacilityid field in the database.
	FieldCircleFacilityId = "circle_facility_id"
	// FieldCircleFacilityName holds the string denoting the circlefacilityname field in the database.
	FieldCircleFacilityName = "circle_facility_name"
	// FieldDesignation holds the string denoting the designation field in the database.
	FieldDesignation = "designation"
	// FieldRoleUserCode holds the string denoting the roleusercode field in the database.
	FieldRoleUserCode = "role_user_code"
	// FieldUpdatedby holds the string denoting the updatedby field in the database.
	FieldUpdatedby = "updatedby"
	// FieldUpdatedDate holds the string denoting the updateddate field in the database.
	FieldUpdatedDate = "updated_date"
	// FieldModifiedby holds the string denoting the modifiedby field in the database.
	FieldModifiedby = "modifiedby"
	// FieldModifiedDate holds the string denoting the modifieddate field in the database.
	FieldModifiedDate = "modified_date"
	// FieldOperationstatus holds the string denoting the operationstatus field in the database.
	FieldOperationstatus = "operationstatus"
	// FieldExamCode holds the string denoting the examcode field in the database.
	FieldExamCode = "exam_code"
	// FieldExamCodePS holds the string denoting the examcodeps field in the database.
	FieldExamCodePS = "exam_code_ps"
	// FieldGender holds the string denoting the gender field in the database.
	FieldGender = "gender"
	// FieldDOB holds the string denoting the dob field in the database.
	FieldDOB = "dob"
	// FieldCreatedBy holds the string denoting the createdby field in the database.
	FieldCreatedBy = "created_by"
	// EdgeRoles holds the string denoting the roles edge name in mutations.
	EdgeRoles = "roles"
	// EdgeUsermasterRef holds the string denoting the usermasterref edge name in mutations.
	EdgeUsermasterRef = "UsermasterRef"
	// EdgeUsersPSRef holds the string denoting the userspsref edge name in mutations.
	EdgeUsersPSRef = "UsersPSRef"
	// EdgeUsersIPRef holds the string denoting the usersipref edge name in mutations.
	EdgeUsersIPRef = "UsersIPRef"
	// EdgeUserIDRef holds the string denoting the user_id_ref edge name in mutations.
	EdgeUserIDRef = "User_ID_Ref"
	// EdgeUsersGDSPARef holds the string denoting the usersgdsparef edge name in mutations.
	EdgeUsersGDSPARef = "UsersGDSPARef"
	// EdgeUsersPMPARef holds the string denoting the userspmparef edge name in mutations.
	EdgeUsersPMPARef = "UsersPMPARef"
	// EdgeUsersGDSPMRef holds the string denoting the usersgdspmref edge name in mutations.
	EdgeUsersGDSPMRef = "UsersGDSPMRef"
	// EdgeLogData holds the string denoting the logdata edge name in mutations.
	EdgeLogData = "LogData"
	// RoleMasterFieldID holds the string denoting the ID field of the RoleMaster.
	RoleMasterFieldID = "RoleUserCode"
	// EmployeeMasterFieldID holds the string denoting the ID field of the EmployeeMaster.
	EmployeeMasterFieldID = "EmpID"
	// Exam_Applications_PSFieldID holds the string denoting the ID field of the Exam_Applications_PS.
	Exam_Applications_PSFieldID = "ApplicationID"
	// Exam_Applications_IPFieldID holds the string denoting the ID field of the Exam_Applications_IP.
	Exam_Applications_IPFieldID = "ApplicationID"
	// ExamNotificationsFieldID holds the string denoting the ID field of the ExamNotifications.
	ExamNotificationsFieldID = "NotificationCode"
	// Exam_Applications_GDSPAFieldID holds the string denoting the ID field of the Exam_Applications_GDSPA.
	Exam_Applications_GDSPAFieldID = "ApplicationID"
	// Exam_Applications_PMPAFieldID holds the string denoting the ID field of the Exam_Applications_PMPA.
	Exam_Applications_PMPAFieldID = "ApplicationID"
	// Exam_Applications_GDSPMFieldID holds the string denoting the ID field of the Exam_Applications_GDSPM.
	Exam_Applications_GDSPMFieldID = "ApplicationID"
	// LogsFieldID holds the string denoting the ID field of the Logs.
	LogsFieldID = "ID"
	// Table holds the table name of the usermaster in the database.
	Table = "UserMaster"
	// RolesTable is the table that holds the roles relation/edge.
	RolesTable = "UserMaster"
	// RolesInverseTable is the table name for the RoleMaster entity.
	// It exists in this package in order to avoid circular dependency with the "rolemaster" package.
	RolesInverseTable = "RoleMaster"
	// RolesColumn is the table column denoting the roles relation/edge.
	RolesColumn = "role_user_code"
	// UsermasterRefTable is the table that holds the UsermasterRef relation/edge.
	UsermasterRefTable = "EmployeeMaster"
	// UsermasterRefInverseTable is the table name for the EmployeeMaster entity.
	// It exists in this package in order to avoid circular dependency with the "employeemaster" package.
	UsermasterRefInverseTable = "EmployeeMaster"
	// UsermasterRefColumn is the table column denoting the UsermasterRef relation/edge.
	UsermasterRefColumn = "user_master_usermaster_ref"
	// UsersPSRefTable is the table that holds the UsersPSRef relation/edge.
	UsersPSRefTable = "Exam_Applications_PS"
	// UsersPSRefInverseTable is the table name for the Exam_Applications_PS entity.
	// It exists in this package in order to avoid circular dependency with the "exam_applications_ps" package.
	UsersPSRefInverseTable = "Exam_Applications_PS"
	// UsersPSRefColumn is the table column denoting the UsersPSRef relation/edge.
	UsersPSRefColumn = "user_master_users_ps_ref"
	// UsersIPRefTable is the table that holds the UsersIPRef relation/edge.
	UsersIPRefTable = "Exam_Applications_IP"
	// UsersIPRefInverseTable is the table name for the Exam_Applications_IP entity.
	// It exists in this package in order to avoid circular dependency with the "exam_applications_ip" package.
	UsersIPRefInverseTable = "Exam_Applications_IP"
	// UsersIPRefColumn is the table column denoting the UsersIPRef relation/edge.
	UsersIPRefColumn = "user_master_users_ip_ref"
	// UserIDRefTable is the table that holds the User_ID_Ref relation/edge.
	UserIDRefTable = "ExamNotifications"
	// UserIDRefInverseTable is the table name for the ExamNotifications entity.
	// It exists in this package in order to avoid circular dependency with the "examnotifications" package.
	UserIDRefInverseTable = "ExamNotifications"
	// UserIDRefColumn is the table column denoting the User_ID_Ref relation/edge.
	UserIDRefColumn = "user_id"
	// UsersGDSPARefTable is the table that holds the UsersGDSPARef relation/edge.
	UsersGDSPARefTable = "Exam_Applications_GDSPA"
	// UsersGDSPARefInverseTable is the table name for the Exam_Applications_GDSPA entity.
	// It exists in this package in order to avoid circular dependency with the "exam_applications_gdspa" package.
	UsersGDSPARefInverseTable = "Exam_Applications_GDSPA"
	// UsersGDSPARefColumn is the table column denoting the UsersGDSPARef relation/edge.
	UsersGDSPARefColumn = "user_master_users_gdspa_ref"
	// UsersPMPARefTable is the table that holds the UsersPMPARef relation/edge.
	UsersPMPARefTable = "Exam_Applications_PMPA"
	// UsersPMPARefInverseTable is the table name for the Exam_Applications_PMPA entity.
	// It exists in this package in order to avoid circular dependency with the "exam_applications_pmpa" package.
	UsersPMPARefInverseTable = "Exam_Applications_PMPA"
	// UsersPMPARefColumn is the table column denoting the UsersPMPARef relation/edge.
	UsersPMPARefColumn = "user_master_users_pmpa_ref"
	// UsersGDSPMRefTable is the table that holds the UsersGDSPMRef relation/edge.
	UsersGDSPMRefTable = "Exam_Applications_GDSPM"
	// UsersGDSPMRefInverseTable is the table name for the Exam_Applications_GDSPM entity.
	// It exists in this package in order to avoid circular dependency with the "exam_applications_gdspm" package.
	UsersGDSPMRefInverseTable = "Exam_Applications_GDSPM"
	// UsersGDSPMRefColumn is the table column denoting the UsersGDSPMRef relation/edge.
	UsersGDSPMRefColumn = "user_master_users_gdspm_ref"
	// LogDataTable is the table that holds the LogData relation/edge.
	LogDataTable = "LogsTable"
	// LogDataInverseTable is the table name for the Logs entity.
	// It exists in this package in order to avoid circular dependency with the "logs" package.
	LogDataInverseTable = "LogsTable"
	// LogDataColumn is the table column denoting the LogData relation/edge.
	LogDataColumn = "user_master_log_data"
)

// Columns holds all SQL columns for usermaster fields.
var Columns = []string{
	FieldID,
	FieldEmployeeID,
	FieldEmployeeName,
	FieldMobile,
	FieldEmailID,
	FieldUserName,
	FieldPassword,
	FieldStatus,
	FieldStatuss,
	FieldOTP,
	FieldOTPNew,
	FieldEmailOTPNew,
	FieldOTPRemarks,
	FieldCreatedAt,
	FieldOTPTriggeredTime,
	FieldOTPSavedTime,
	FieldOTPExpiryTime,
	FieldNewPasswordRequest,
	FieldEmailOTP,
	FieldEmailOTPRemarks,
	FieldEmailCreatedAt,
	FieldEmailOTPTriggeredTime,
	FieldEmailOTPSavedTime,
	FieldEmailOTPExpiryTime,
	FieldEmailNewPasswordRequest,
	FieldUidToken,
	FieldCreatedById,
	FieldCreatedByEmployeeId,
	FieldCreatedByUserName,
	FieldCreatedByDesignation,
	FieldCreatedDate,
	FieldDeletedById,
	FieldDeletedByEmployeeId,
	FieldDeletedByUserName,
	FieldDeletedByDesignation,
	FieldDeletedDate,
	FieldFacilityID,
	FieldCircleFacilityId,
	FieldCircleFacilityName,
	FieldDesignation,
	FieldRoleUserCode,
	FieldUpdatedby,
	FieldUpdatedDate,
	FieldModifiedby,
	FieldModifiedDate,
	FieldOperationstatus,
	FieldExamCode,
	FieldExamCodePS,
	FieldGender,
	FieldDOB,
	FieldCreatedBy,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "UserMaster"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"circle_summary_for_no_circleusers",
	"employee_master_usermaster_ref",
	"exam_application_mtspmmg_users_mtspmmg_ref",
	"exam_applications_gdspa_users_gdspa_ref",
	"exam_applications_gdspm_users_gdspm_ref",
	"exam_applications_ip_users_ip_ref",
	"exam_applications_pmpa_users_pmpa_ref",
	"exam_applications_ps_users_ps_ref",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultStatus holds the default value on creation for the "Status" field.
	DefaultStatus bool
	// DefaultStatuss holds the default value on creation for the "Statuss" field.
	DefaultStatuss string
	// DefaultOTPTriggeredTime holds the default value on creation for the "OTPTriggeredTime" field.
	DefaultOTPTriggeredTime func() time.Time
	// DefaultOTPSavedTime holds the default value on creation for the "OTPSavedTime" field.
	DefaultOTPSavedTime func() time.Time
	// DefaultEmailOTPTriggeredTime holds the default value on creation for the "EmailOTPTriggeredTime" field.
	DefaultEmailOTPTriggeredTime func() time.Time
	// DefaultEmailOTPSavedTime holds the default value on creation for the "EmailOTPSavedTime" field.
	DefaultEmailOTPSavedTime func() time.Time
	// DefaultUpdatedDate holds the default value on creation for the "updatedDate" field.
	DefaultUpdatedDate func() time.Time
	// DefaultModifiedDate holds the default value on creation for the "ModifiedDate" field.
	DefaultModifiedDate func() time.Time
	// DefaultCreatedBy holds the default value on creation for the "CreatedBy" field.
	DefaultCreatedBy string
)

// Gender defines the type for the "Gender" enum field.
type Gender string

// Gender values.
const (
	GenderMale   Gender = "Male"
	GenderFemale Gender = "Female"
)

func (_gender Gender) String() string {
	return string(_gender)
}

// GenderValidator is a validator for the "Gender" field enum values. It is called by the builders before save.
func GenderValidator(_gender Gender) error {
	switch _gender {
	case GenderMale, GenderFemale:
		return nil
	default:
		return fmt.Errorf("usermaster: invalid enum value for Gender field: %q", _gender)
	}
}

// OrderOption defines the ordering options for the UserMaster queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByEmployeeID orders the results by the EmployeeID field.
func ByEmployeeID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmployeeID, opts...).ToFunc()
}

// ByEmployeeName orders the results by the EmployeeName field.
func ByEmployeeName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmployeeName, opts...).ToFunc()
}

// ByMobile orders the results by the Mobile field.
func ByMobile(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMobile, opts...).ToFunc()
}

// ByEmailID orders the results by the EmailID field.
func ByEmailID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmailID, opts...).ToFunc()
}

// ByUserName orders the results by the UserName field.
func ByUserName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserName, opts...).ToFunc()
}

// ByPassword orders the results by the Password field.
func ByPassword(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPassword, opts...).ToFunc()
}

// ByStatus orders the results by the Status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByStatuss orders the results by the Statuss field.
func ByStatuss(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatuss, opts...).ToFunc()
}

// ByOTP orders the results by the OTP field.
func ByOTP(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOTP, opts...).ToFunc()
}

// ByOTPNew orders the results by the OTPNew field.
func ByOTPNew(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOTPNew, opts...).ToFunc()
}

// ByEmailOTPNew orders the results by the EmailOTPNew field.
func ByEmailOTPNew(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmailOTPNew, opts...).ToFunc()
}

// ByOTPRemarks orders the results by the OTPRemarks field.
func ByOTPRemarks(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOTPRemarks, opts...).ToFunc()
}

// ByCreatedAt orders the results by the CreatedAt field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByOTPTriggeredTime orders the results by the OTPTriggeredTime field.
func ByOTPTriggeredTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOTPTriggeredTime, opts...).ToFunc()
}

// ByOTPSavedTime orders the results by the OTPSavedTime field.
func ByOTPSavedTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOTPSavedTime, opts...).ToFunc()
}

// ByOTPExpiryTime orders the results by the OTPExpiryTime field.
func ByOTPExpiryTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOTPExpiryTime, opts...).ToFunc()
}

// ByNewPasswordRequest orders the results by the NewPasswordRequest field.
func ByNewPasswordRequest(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNewPasswordRequest, opts...).ToFunc()
}

// ByEmailOTP orders the results by the EmailOTP field.
func ByEmailOTP(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmailOTP, opts...).ToFunc()
}

// ByEmailOTPRemarks orders the results by the EmailOTPRemarks field.
func ByEmailOTPRemarks(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmailOTPRemarks, opts...).ToFunc()
}

// ByEmailCreatedAt orders the results by the EmailCreatedAt field.
func ByEmailCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmailCreatedAt, opts...).ToFunc()
}

// ByEmailOTPTriggeredTime orders the results by the EmailOTPTriggeredTime field.
func ByEmailOTPTriggeredTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmailOTPTriggeredTime, opts...).ToFunc()
}

// ByEmailOTPSavedTime orders the results by the EmailOTPSavedTime field.
func ByEmailOTPSavedTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmailOTPSavedTime, opts...).ToFunc()
}

// ByEmailOTPExpiryTime orders the results by the EmailOTPExpiryTime field.
func ByEmailOTPExpiryTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmailOTPExpiryTime, opts...).ToFunc()
}

// ByEmailNewPasswordRequest orders the results by the EmailNewPasswordRequest field.
func ByEmailNewPasswordRequest(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmailNewPasswordRequest, opts...).ToFunc()
}

// ByUidToken orders the results by the UidToken field.
func ByUidToken(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUidToken, opts...).ToFunc()
}

// ByCreatedById orders the results by the CreatedById field.
func ByCreatedById(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedById, opts...).ToFunc()
}

// ByCreatedByEmployeeId orders the results by the CreatedByEmployeeId field.
func ByCreatedByEmployeeId(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedByEmployeeId, opts...).ToFunc()
}

// ByCreatedByUserName orders the results by the CreatedByUserName field.
func ByCreatedByUserName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedByUserName, opts...).ToFunc()
}

// ByCreatedByDesignation orders the results by the CreatedByDesignation field.
func ByCreatedByDesignation(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedByDesignation, opts...).ToFunc()
}

// ByCreatedDate orders the results by the CreatedDate field.
func ByCreatedDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedDate, opts...).ToFunc()
}

// ByDeletedById orders the results by the DeletedById field.
func ByDeletedById(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedById, opts...).ToFunc()
}

// ByDeletedByEmployeeId orders the results by the DeletedByEmployeeId field.
func ByDeletedByEmployeeId(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedByEmployeeId, opts...).ToFunc()
}

// ByDeletedByUserName orders the results by the DeletedByUserName field.
func ByDeletedByUserName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedByUserName, opts...).ToFunc()
}

// ByDeletedByDesignation orders the results by the DeletedByDesignation field.
func ByDeletedByDesignation(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedByDesignation, opts...).ToFunc()
}

// ByDeletedDate orders the results by the DeletedDate field.
func ByDeletedDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedDate, opts...).ToFunc()
}

// ByFacilityID orders the results by the FacilityID field.
func ByFacilityID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFacilityID, opts...).ToFunc()
}

// ByCircleFacilityId orders the results by the CircleFacilityId field.
func ByCircleFacilityId(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCircleFacilityId, opts...).ToFunc()
}

// ByCircleFacilityName orders the results by the CircleFacilityName field.
func ByCircleFacilityName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCircleFacilityName, opts...).ToFunc()
}

// ByDesignation orders the results by the Designation field.
func ByDesignation(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDesignation, opts...).ToFunc()
}

// ByRoleUserCode orders the results by the RoleUserCode field.
func ByRoleUserCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRoleUserCode, opts...).ToFunc()
}

// ByUpdatedby orders the results by the Updatedby field.
func ByUpdatedby(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedby, opts...).ToFunc()
}

// ByUpdatedDate orders the results by the updatedDate field.
func ByUpdatedDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedDate, opts...).ToFunc()
}

// ByModifiedby orders the results by the Modifiedby field.
func ByModifiedby(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldModifiedby, opts...).ToFunc()
}

// ByModifiedDate orders the results by the ModifiedDate field.
func ByModifiedDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldModifiedDate, opts...).ToFunc()
}

// ByOperationstatus orders the results by the Operationstatus field.
func ByOperationstatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOperationstatus, opts...).ToFunc()
}

// ByExamCode orders the results by the ExamCode field.
func ByExamCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExamCode, opts...).ToFunc()
}

// ByExamCodePS orders the results by the ExamCodePS field.
func ByExamCodePS(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExamCodePS, opts...).ToFunc()
}

// ByGender orders the results by the Gender field.
func ByGender(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGender, opts...).ToFunc()
}

// ByDOB orders the results by the DOB field.
func ByDOB(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDOB, opts...).ToFunc()
}

// ByCreatedBy orders the results by the CreatedBy field.
func ByCreatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedBy, opts...).ToFunc()
}

// ByRolesField orders the results by roles field.
func ByRolesField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRolesStep(), sql.OrderByField(field, opts...))
	}
}

// ByUsermasterRefCount orders the results by UsermasterRef count.
func ByUsermasterRefCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newUsermasterRefStep(), opts...)
	}
}

// ByUsermasterRef orders the results by UsermasterRef terms.
func ByUsermasterRef(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUsermasterRefStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByUsersPSRefCount orders the results by UsersPSRef count.
func ByUsersPSRefCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newUsersPSRefStep(), opts...)
	}
}

// ByUsersPSRef orders the results by UsersPSRef terms.
func ByUsersPSRef(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUsersPSRefStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByUsersIPRefCount orders the results by UsersIPRef count.
func ByUsersIPRefCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newUsersIPRefStep(), opts...)
	}
}

// ByUsersIPRef orders the results by UsersIPRef terms.
func ByUsersIPRef(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUsersIPRefStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByUserIDRefCount orders the results by User_ID_Ref count.
func ByUserIDRefCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newUserIDRefStep(), opts...)
	}
}

// ByUserIDRef orders the results by User_ID_Ref terms.
func ByUserIDRef(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserIDRefStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByUsersGDSPARefCount orders the results by UsersGDSPARef count.
func ByUsersGDSPARefCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newUsersGDSPARefStep(), opts...)
	}
}

// ByUsersGDSPARef orders the results by UsersGDSPARef terms.
func ByUsersGDSPARef(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUsersGDSPARefStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByUsersPMPARefCount orders the results by UsersPMPARef count.
func ByUsersPMPARefCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newUsersPMPARefStep(), opts...)
	}
}

// ByUsersPMPARef orders the results by UsersPMPARef terms.
func ByUsersPMPARef(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUsersPMPARefStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByUsersGDSPMRefCount orders the results by UsersGDSPMRef count.
func ByUsersGDSPMRefCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newUsersGDSPMRefStep(), opts...)
	}
}

// ByUsersGDSPMRef orders the results by UsersGDSPMRef terms.
func ByUsersGDSPMRef(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUsersGDSPMRefStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByLogDataCount orders the results by LogData count.
func ByLogDataCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newLogDataStep(), opts...)
	}
}

// ByLogData orders the results by LogData terms.
func ByLogData(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newLogDataStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newRolesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RolesInverseTable, RoleMasterFieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, RolesTable, RolesColumn),
	)
}
func newUsermasterRefStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UsermasterRefInverseTable, EmployeeMasterFieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, UsermasterRefTable, UsermasterRefColumn),
	)
}
func newUsersPSRefStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UsersPSRefInverseTable, Exam_Applications_PSFieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, UsersPSRefTable, UsersPSRefColumn),
	)
}
func newUsersIPRefStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UsersIPRefInverseTable, Exam_Applications_IPFieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, UsersIPRefTable, UsersIPRefColumn),
	)
}
func newUserIDRefStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserIDRefInverseTable, ExamNotificationsFieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, UserIDRefTable, UserIDRefColumn),
	)
}
func newUsersGDSPARefStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UsersGDSPARefInverseTable, Exam_Applications_GDSPAFieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, UsersGDSPARefTable, UsersGDSPARefColumn),
	)
}
func newUsersPMPARefStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UsersPMPARefInverseTable, Exam_Applications_PMPAFieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, UsersPMPARefTable, UsersPMPARefColumn),
	)
}
func newUsersGDSPMRefStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UsersGDSPMRefInverseTable, Exam_Applications_GDSPMFieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, UsersGDSPMRefTable, UsersGDSPMRefColumn),
	)
}
func newLogDataStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(LogDataInverseTable, LogsFieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, LogDataTable, LogDataColumn),
	)
}
