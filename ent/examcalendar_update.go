// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"recruit/ent/exam"
	"recruit/ent/examcalendar"
	"recruit/ent/exampapers"
	"recruit/ent/notification"
	"recruit/ent/predicate"
	"recruit/ent/vacancyyear"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
)

// ExamCalendarUpdate is the builder for updating ExamCalendar entities.
type ExamCalendarUpdate struct {
	config
	hooks    []Hook
	mutation *ExamCalendarMutation
}

// Where appends a list predicates to the ExamCalendarUpdate builder.
func (ecu *ExamCalendarUpdate) Where(ps ...predicate.ExamCalendar) *ExamCalendarUpdate {
	ecu.mutation.Where(ps...)
	return ecu
}

// SetExamYear sets the "ExamYear" field.
func (ecu *ExamCalendarUpdate) SetExamYear(i int32) *ExamCalendarUpdate {
	ecu.mutation.ResetExamYear()
	ecu.mutation.SetExamYear(i)
	return ecu
}

// AddExamYear adds i to the "ExamYear" field.
func (ecu *ExamCalendarUpdate) AddExamYear(i int32) *ExamCalendarUpdate {
	ecu.mutation.AddExamYear(i)
	return ecu
}

// SetExamName sets the "ExamName" field.
func (ecu *ExamCalendarUpdate) SetExamName(s string) *ExamCalendarUpdate {
	ecu.mutation.SetExamName(s)
	return ecu
}

// SetExamCode sets the "ExamCode" field.
func (ecu *ExamCalendarUpdate) SetExamCode(i int32) *ExamCalendarUpdate {
	ecu.mutation.SetExamCode(i)
	return ecu
}

// SetNillableExamCode sets the "ExamCode" field if the given value is not nil.
func (ecu *ExamCalendarUpdate) SetNillableExamCode(i *int32) *ExamCalendarUpdate {
	if i != nil {
		ecu.SetExamCode(*i)
	}
	return ecu
}

// ClearExamCode clears the value of the "ExamCode" field.
func (ecu *ExamCalendarUpdate) ClearExamCode() *ExamCalendarUpdate {
	ecu.mutation.ClearExamCode()
	return ecu
}

// SetNotificationDate sets the "NotificationDate" field.
func (ecu *ExamCalendarUpdate) SetNotificationDate(t time.Time) *ExamCalendarUpdate {
	ecu.mutation.SetNotificationDate(t)
	return ecu
}

// SetModelNotificationDate sets the "ModelNotificationDate" field.
func (ecu *ExamCalendarUpdate) SetModelNotificationDate(t time.Time) *ExamCalendarUpdate {
	ecu.mutation.SetModelNotificationDate(t)
	return ecu
}

// SetApplicationEndDate sets the "ApplicationEndDate" field.
func (ecu *ExamCalendarUpdate) SetApplicationEndDate(t time.Time) *ExamCalendarUpdate {
	ecu.mutation.SetApplicationEndDate(t)
	return ecu
}

// SetApprovedOrderDate sets the "ApprovedOrderDate" field.
func (ecu *ExamCalendarUpdate) SetApprovedOrderDate(t time.Time) *ExamCalendarUpdate {
	ecu.mutation.SetApprovedOrderDate(t)
	return ecu
}

// SetTentativeResultDate sets the "TentativeResultDate" field.
func (ecu *ExamCalendarUpdate) SetTentativeResultDate(t time.Time) *ExamCalendarUpdate {
	ecu.mutation.SetTentativeResultDate(t)
	return ecu
}

// SetNillableTentativeResultDate sets the "TentativeResultDate" field if the given value is not nil.
func (ecu *ExamCalendarUpdate) SetNillableTentativeResultDate(t *time.Time) *ExamCalendarUpdate {
	if t != nil {
		ecu.SetTentativeResultDate(*t)
	}
	return ecu
}

// ClearTentativeResultDate clears the value of the "TentativeResultDate" field.
func (ecu *ExamCalendarUpdate) ClearTentativeResultDate() *ExamCalendarUpdate {
	ecu.mutation.ClearTentativeResultDate()
	return ecu
}

// SetCreatedDate sets the "CreatedDate" field.
func (ecu *ExamCalendarUpdate) SetCreatedDate(t time.Time) *ExamCalendarUpdate {
	ecu.mutation.SetCreatedDate(t)
	return ecu
}

// SetApprovedOrderNumber sets the "ApprovedOrderNumber" field.
func (ecu *ExamCalendarUpdate) SetApprovedOrderNumber(s string) *ExamCalendarUpdate {
	ecu.mutation.SetApprovedOrderNumber(s)
	return ecu
}

// SetVacancyYears sets the "VacancyYears" field.
func (ecu *ExamCalendarUpdate) SetVacancyYears(i []interface{}) *ExamCalendarUpdate {
	ecu.mutation.SetVacancyYears(i)
	return ecu
}

// AppendVacancyYears appends i to the "VacancyYears" field.
func (ecu *ExamCalendarUpdate) AppendVacancyYears(i []interface{}) *ExamCalendarUpdate {
	ecu.mutation.AppendVacancyYears(i)
	return ecu
}

// ClearVacancyYears clears the value of the "VacancyYears" field.
func (ecu *ExamCalendarUpdate) ClearVacancyYears() *ExamCalendarUpdate {
	ecu.mutation.ClearVacancyYears()
	return ecu
}

// SetExamPapers sets the "ExamPapers" field.
func (ecu *ExamCalendarUpdate) SetExamPapers(i []interface{}) *ExamCalendarUpdate {
	ecu.mutation.SetExamPapers(i)
	return ecu
}

// AppendExamPapers appends i to the "ExamPapers" field.
func (ecu *ExamCalendarUpdate) AppendExamPapers(i []interface{}) *ExamCalendarUpdate {
	ecu.mutation.AppendExamPapers(i)
	return ecu
}

// ClearExamPapers clears the value of the "ExamPapers" field.
func (ecu *ExamCalendarUpdate) ClearExamPapers() *ExamCalendarUpdate {
	ecu.mutation.ClearExamPapers()
	return ecu
}

// SetVacancyYearCode sets the "VacancyYearCode" field.
func (ecu *ExamCalendarUpdate) SetVacancyYearCode(i int32) *ExamCalendarUpdate {
	ecu.mutation.SetVacancyYearCode(i)
	return ecu
}

// SetNillableVacancyYearCode sets the "VacancyYearCode" field if the given value is not nil.
func (ecu *ExamCalendarUpdate) SetNillableVacancyYearCode(i *int32) *ExamCalendarUpdate {
	if i != nil {
		ecu.SetVacancyYearCode(*i)
	}
	return ecu
}

// ClearVacancyYearCode clears the value of the "VacancyYearCode" field.
func (ecu *ExamCalendarUpdate) ClearVacancyYearCode() *ExamCalendarUpdate {
	ecu.mutation.ClearVacancyYearCode()
	return ecu
}

// SetPaperCode sets the "PaperCode" field.
func (ecu *ExamCalendarUpdate) SetPaperCode(i int32) *ExamCalendarUpdate {
	ecu.mutation.SetPaperCode(i)
	return ecu
}

// SetNillablePaperCode sets the "PaperCode" field if the given value is not nil.
func (ecu *ExamCalendarUpdate) SetNillablePaperCode(i *int32) *ExamCalendarUpdate {
	if i != nil {
		ecu.SetPaperCode(*i)
	}
	return ecu
}

// ClearPaperCode clears the value of the "PaperCode" field.
func (ecu *ExamCalendarUpdate) ClearPaperCode() *ExamCalendarUpdate {
	ecu.mutation.ClearPaperCode()
	return ecu
}

// SetExamCodePS sets the "ExamCodePS" field.
func (ecu *ExamCalendarUpdate) SetExamCodePS(i int32) *ExamCalendarUpdate {
	ecu.mutation.ResetExamCodePS()
	ecu.mutation.SetExamCodePS(i)
	return ecu
}

// SetNillableExamCodePS sets the "ExamCodePS" field if the given value is not nil.
func (ecu *ExamCalendarUpdate) SetNillableExamCodePS(i *int32) *ExamCalendarUpdate {
	if i != nil {
		ecu.SetExamCodePS(*i)
	}
	return ecu
}

// AddExamCodePS adds i to the "ExamCodePS" field.
func (ecu *ExamCalendarUpdate) AddExamCodePS(i int32) *ExamCalendarUpdate {
	ecu.mutation.AddExamCodePS(i)
	return ecu
}

// ClearExamCodePS clears the value of the "ExamCodePS" field.
func (ecu *ExamCalendarUpdate) ClearExamCodePS() *ExamCalendarUpdate {
	ecu.mutation.ClearExamCodePS()
	return ecu
}

// SetVcyYearsID sets the "vcy_years" edge to the VacancyYear entity by ID.
func (ecu *ExamCalendarUpdate) SetVcyYearsID(id int32) *ExamCalendarUpdate {
	ecu.mutation.SetVcyYearsID(id)
	return ecu
}

// SetNillableVcyYearsID sets the "vcy_years" edge to the VacancyYear entity by ID if the given value is not nil.
func (ecu *ExamCalendarUpdate) SetNillableVcyYearsID(id *int32) *ExamCalendarUpdate {
	if id != nil {
		ecu = ecu.SetVcyYearsID(*id)
	}
	return ecu
}

// SetVcyYears sets the "vcy_years" edge to the VacancyYear entity.
func (ecu *ExamCalendarUpdate) SetVcyYears(v *VacancyYear) *ExamCalendarUpdate {
	return ecu.SetVcyYearsID(v.ID)
}

// SetExamsID sets the "exams" edge to the Exam entity by ID.
func (ecu *ExamCalendarUpdate) SetExamsID(id int32) *ExamCalendarUpdate {
	ecu.mutation.SetExamsID(id)
	return ecu
}

// SetNillableExamsID sets the "exams" edge to the Exam entity by ID if the given value is not nil.
func (ecu *ExamCalendarUpdate) SetNillableExamsID(id *int32) *ExamCalendarUpdate {
	if id != nil {
		ecu = ecu.SetExamsID(*id)
	}
	return ecu
}

// SetExams sets the "exams" edge to the Exam entity.
func (ecu *ExamCalendarUpdate) SetExams(e *Exam) *ExamCalendarUpdate {
	return ecu.SetExamsID(e.ID)
}

// SetPapersID sets the "papers" edge to the ExamPapers entity by ID.
func (ecu *ExamCalendarUpdate) SetPapersID(id int32) *ExamCalendarUpdate {
	ecu.mutation.SetPapersID(id)
	return ecu
}

// SetNillablePapersID sets the "papers" edge to the ExamPapers entity by ID if the given value is not nil.
func (ecu *ExamCalendarUpdate) SetNillablePapersID(id *int32) *ExamCalendarUpdate {
	if id != nil {
		ecu = ecu.SetPapersID(*id)
	}
	return ecu
}

// SetPapers sets the "papers" edge to the ExamPapers entity.
func (ecu *ExamCalendarUpdate) SetPapers(e *ExamPapers) *ExamCalendarUpdate {
	return ecu.SetPapersID(e.ID)
}

// AddNotifyRefIDs adds the "Notify_ref" edge to the Notification entity by IDs.
func (ecu *ExamCalendarUpdate) AddNotifyRefIDs(ids ...int32) *ExamCalendarUpdate {
	ecu.mutation.AddNotifyRefIDs(ids...)
	return ecu
}

// AddNotifyRef adds the "Notify_ref" edges to the Notification entity.
func (ecu *ExamCalendarUpdate) AddNotifyRef(n ...*Notification) *ExamCalendarUpdate {
	ids := make([]int32, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return ecu.AddNotifyRefIDs(ids...)
}

// Mutation returns the ExamCalendarMutation object of the builder.
func (ecu *ExamCalendarUpdate) Mutation() *ExamCalendarMutation {
	return ecu.mutation
}

// ClearVcyYears clears the "vcy_years" edge to the VacancyYear entity.
func (ecu *ExamCalendarUpdate) ClearVcyYears() *ExamCalendarUpdate {
	ecu.mutation.ClearVcyYears()
	return ecu
}

// ClearExams clears the "exams" edge to the Exam entity.
func (ecu *ExamCalendarUpdate) ClearExams() *ExamCalendarUpdate {
	ecu.mutation.ClearExams()
	return ecu
}

// ClearPapers clears the "papers" edge to the ExamPapers entity.
func (ecu *ExamCalendarUpdate) ClearPapers() *ExamCalendarUpdate {
	ecu.mutation.ClearPapers()
	return ecu
}

// ClearNotifyRef clears all "Notify_ref" edges to the Notification entity.
func (ecu *ExamCalendarUpdate) ClearNotifyRef() *ExamCalendarUpdate {
	ecu.mutation.ClearNotifyRef()
	return ecu
}

// RemoveNotifyRefIDs removes the "Notify_ref" edge to Notification entities by IDs.
func (ecu *ExamCalendarUpdate) RemoveNotifyRefIDs(ids ...int32) *ExamCalendarUpdate {
	ecu.mutation.RemoveNotifyRefIDs(ids...)
	return ecu
}

// RemoveNotifyRef removes "Notify_ref" edges to Notification entities.
func (ecu *ExamCalendarUpdate) RemoveNotifyRef(n ...*Notification) *ExamCalendarUpdate {
	ids := make([]int32, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return ecu.RemoveNotifyRefIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ecu *ExamCalendarUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ecu.sqlSave, ecu.mutation, ecu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ecu *ExamCalendarUpdate) SaveX(ctx context.Context) int {
	affected, err := ecu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ecu *ExamCalendarUpdate) Exec(ctx context.Context) error {
	_, err := ecu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ecu *ExamCalendarUpdate) ExecX(ctx context.Context) {
	if err := ecu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ecu *ExamCalendarUpdate) check() error {
	if v, ok := ecu.mutation.ExamName(); ok {
		if err := examcalendar.ExamNameValidator(v); err != nil {
			return &ValidationError{Name: "ExamName", err: fmt.Errorf(`ent: validator failed for field "ExamCalendar.ExamName": %w`, err)}
		}
	}
	return nil
}

func (ecu *ExamCalendarUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ecu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(examcalendar.Table, examcalendar.Columns, sqlgraph.NewFieldSpec(examcalendar.FieldID, field.TypeInt32))
	if ps := ecu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ecu.mutation.ExamYear(); ok {
		_spec.SetField(examcalendar.FieldExamYear, field.TypeInt32, value)
	}
	if value, ok := ecu.mutation.AddedExamYear(); ok {
		_spec.AddField(examcalendar.FieldExamYear, field.TypeInt32, value)
	}
	if value, ok := ecu.mutation.ExamName(); ok {
		_spec.SetField(examcalendar.FieldExamName, field.TypeString, value)
	}
	if value, ok := ecu.mutation.NotificationDate(); ok {
		_spec.SetField(examcalendar.FieldNotificationDate, field.TypeTime, value)
	}
	if value, ok := ecu.mutation.ModelNotificationDate(); ok {
		_spec.SetField(examcalendar.FieldModelNotificationDate, field.TypeTime, value)
	}
	if value, ok := ecu.mutation.ApplicationEndDate(); ok {
		_spec.SetField(examcalendar.FieldApplicationEndDate, field.TypeTime, value)
	}
	if value, ok := ecu.mutation.ApprovedOrderDate(); ok {
		_spec.SetField(examcalendar.FieldApprovedOrderDate, field.TypeTime, value)
	}
	if value, ok := ecu.mutation.TentativeResultDate(); ok {
		_spec.SetField(examcalendar.FieldTentativeResultDate, field.TypeTime, value)
	}
	if ecu.mutation.TentativeResultDateCleared() {
		_spec.ClearField(examcalendar.FieldTentativeResultDate, field.TypeTime)
	}
	if value, ok := ecu.mutation.CreatedDate(); ok {
		_spec.SetField(examcalendar.FieldCreatedDate, field.TypeTime, value)
	}
	if value, ok := ecu.mutation.ApprovedOrderNumber(); ok {
		_spec.SetField(examcalendar.FieldApprovedOrderNumber, field.TypeString, value)
	}
	if value, ok := ecu.mutation.VacancyYears(); ok {
		_spec.SetField(examcalendar.FieldVacancyYears, field.TypeJSON, value)
	}
	if value, ok := ecu.mutation.AppendedVacancyYears(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, examcalendar.FieldVacancyYears, value)
		})
	}
	if ecu.mutation.VacancyYearsCleared() {
		_spec.ClearField(examcalendar.FieldVacancyYears, field.TypeJSON)
	}
	if value, ok := ecu.mutation.ExamPapers(); ok {
		_spec.SetField(examcalendar.FieldExamPapers, field.TypeJSON, value)
	}
	if value, ok := ecu.mutation.AppendedExamPapers(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, examcalendar.FieldExamPapers, value)
		})
	}
	if ecu.mutation.ExamPapersCleared() {
		_spec.ClearField(examcalendar.FieldExamPapers, field.TypeJSON)
	}
	if value, ok := ecu.mutation.ExamCodePS(); ok {
		_spec.SetField(examcalendar.FieldExamCodePS, field.TypeInt32, value)
	}
	if value, ok := ecu.mutation.AddedExamCodePS(); ok {
		_spec.AddField(examcalendar.FieldExamCodePS, field.TypeInt32, value)
	}
	if ecu.mutation.ExamCodePSCleared() {
		_spec.ClearField(examcalendar.FieldExamCodePS, field.TypeInt32)
	}
	if ecu.mutation.VcyYearsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   examcalendar.VcyYearsTable,
			Columns: []string{examcalendar.VcyYearsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vacancyyear.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ecu.mutation.VcyYearsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   examcalendar.VcyYearsTable,
			Columns: []string{examcalendar.VcyYearsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vacancyyear.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ecu.mutation.ExamsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   examcalendar.ExamsTable,
			Columns: []string{examcalendar.ExamsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ecu.mutation.ExamsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   examcalendar.ExamsTable,
			Columns: []string{examcalendar.ExamsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ecu.mutation.PapersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   examcalendar.PapersTable,
			Columns: []string{examcalendar.PapersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exampapers.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ecu.mutation.PapersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   examcalendar.PapersTable,
			Columns: []string{examcalendar.PapersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exampapers.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ecu.mutation.NotifyRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   examcalendar.NotifyRefTable,
			Columns: []string{examcalendar.NotifyRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notification.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ecu.mutation.RemovedNotifyRefIDs(); len(nodes) > 0 && !ecu.mutation.NotifyRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   examcalendar.NotifyRefTable,
			Columns: []string{examcalendar.NotifyRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notification.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ecu.mutation.NotifyRefIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   examcalendar.NotifyRefTable,
			Columns: []string{examcalendar.NotifyRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notification.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ecu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{examcalendar.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ecu.mutation.done = true
	return n, nil
}

// ExamCalendarUpdateOne is the builder for updating a single ExamCalendar entity.
type ExamCalendarUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ExamCalendarMutation
}

// SetExamYear sets the "ExamYear" field.
func (ecuo *ExamCalendarUpdateOne) SetExamYear(i int32) *ExamCalendarUpdateOne {
	ecuo.mutation.ResetExamYear()
	ecuo.mutation.SetExamYear(i)
	return ecuo
}

// AddExamYear adds i to the "ExamYear" field.
func (ecuo *ExamCalendarUpdateOne) AddExamYear(i int32) *ExamCalendarUpdateOne {
	ecuo.mutation.AddExamYear(i)
	return ecuo
}

// SetExamName sets the "ExamName" field.
func (ecuo *ExamCalendarUpdateOne) SetExamName(s string) *ExamCalendarUpdateOne {
	ecuo.mutation.SetExamName(s)
	return ecuo
}

// SetExamCode sets the "ExamCode" field.
func (ecuo *ExamCalendarUpdateOne) SetExamCode(i int32) *ExamCalendarUpdateOne {
	ecuo.mutation.SetExamCode(i)
	return ecuo
}

// SetNillableExamCode sets the "ExamCode" field if the given value is not nil.
func (ecuo *ExamCalendarUpdateOne) SetNillableExamCode(i *int32) *ExamCalendarUpdateOne {
	if i != nil {
		ecuo.SetExamCode(*i)
	}
	return ecuo
}

// ClearExamCode clears the value of the "ExamCode" field.
func (ecuo *ExamCalendarUpdateOne) ClearExamCode() *ExamCalendarUpdateOne {
	ecuo.mutation.ClearExamCode()
	return ecuo
}

// SetNotificationDate sets the "NotificationDate" field.
func (ecuo *ExamCalendarUpdateOne) SetNotificationDate(t time.Time) *ExamCalendarUpdateOne {
	ecuo.mutation.SetNotificationDate(t)
	return ecuo
}

// SetModelNotificationDate sets the "ModelNotificationDate" field.
func (ecuo *ExamCalendarUpdateOne) SetModelNotificationDate(t time.Time) *ExamCalendarUpdateOne {
	ecuo.mutation.SetModelNotificationDate(t)
	return ecuo
}

// SetApplicationEndDate sets the "ApplicationEndDate" field.
func (ecuo *ExamCalendarUpdateOne) SetApplicationEndDate(t time.Time) *ExamCalendarUpdateOne {
	ecuo.mutation.SetApplicationEndDate(t)
	return ecuo
}

// SetApprovedOrderDate sets the "ApprovedOrderDate" field.
func (ecuo *ExamCalendarUpdateOne) SetApprovedOrderDate(t time.Time) *ExamCalendarUpdateOne {
	ecuo.mutation.SetApprovedOrderDate(t)
	return ecuo
}

// SetTentativeResultDate sets the "TentativeResultDate" field.
func (ecuo *ExamCalendarUpdateOne) SetTentativeResultDate(t time.Time) *ExamCalendarUpdateOne {
	ecuo.mutation.SetTentativeResultDate(t)
	return ecuo
}

// SetNillableTentativeResultDate sets the "TentativeResultDate" field if the given value is not nil.
func (ecuo *ExamCalendarUpdateOne) SetNillableTentativeResultDate(t *time.Time) *ExamCalendarUpdateOne {
	if t != nil {
		ecuo.SetTentativeResultDate(*t)
	}
	return ecuo
}

// ClearTentativeResultDate clears the value of the "TentativeResultDate" field.
func (ecuo *ExamCalendarUpdateOne) ClearTentativeResultDate() *ExamCalendarUpdateOne {
	ecuo.mutation.ClearTentativeResultDate()
	return ecuo
}

// SetCreatedDate sets the "CreatedDate" field.
func (ecuo *ExamCalendarUpdateOne) SetCreatedDate(t time.Time) *ExamCalendarUpdateOne {
	ecuo.mutation.SetCreatedDate(t)
	return ecuo
}

// SetApprovedOrderNumber sets the "ApprovedOrderNumber" field.
func (ecuo *ExamCalendarUpdateOne) SetApprovedOrderNumber(s string) *ExamCalendarUpdateOne {
	ecuo.mutation.SetApprovedOrderNumber(s)
	return ecuo
}

// SetVacancyYears sets the "VacancyYears" field.
func (ecuo *ExamCalendarUpdateOne) SetVacancyYears(i []interface{}) *ExamCalendarUpdateOne {
	ecuo.mutation.SetVacancyYears(i)
	return ecuo
}

// AppendVacancyYears appends i to the "VacancyYears" field.
func (ecuo *ExamCalendarUpdateOne) AppendVacancyYears(i []interface{}) *ExamCalendarUpdateOne {
	ecuo.mutation.AppendVacancyYears(i)
	return ecuo
}

// ClearVacancyYears clears the value of the "VacancyYears" field.
func (ecuo *ExamCalendarUpdateOne) ClearVacancyYears() *ExamCalendarUpdateOne {
	ecuo.mutation.ClearVacancyYears()
	return ecuo
}

// SetExamPapers sets the "ExamPapers" field.
func (ecuo *ExamCalendarUpdateOne) SetExamPapers(i []interface{}) *ExamCalendarUpdateOne {
	ecuo.mutation.SetExamPapers(i)
	return ecuo
}

// AppendExamPapers appends i to the "ExamPapers" field.
func (ecuo *ExamCalendarUpdateOne) AppendExamPapers(i []interface{}) *ExamCalendarUpdateOne {
	ecuo.mutation.AppendExamPapers(i)
	return ecuo
}

// ClearExamPapers clears the value of the "ExamPapers" field.
func (ecuo *ExamCalendarUpdateOne) ClearExamPapers() *ExamCalendarUpdateOne {
	ecuo.mutation.ClearExamPapers()
	return ecuo
}

// SetVacancyYearCode sets the "VacancyYearCode" field.
func (ecuo *ExamCalendarUpdateOne) SetVacancyYearCode(i int32) *ExamCalendarUpdateOne {
	ecuo.mutation.SetVacancyYearCode(i)
	return ecuo
}

// SetNillableVacancyYearCode sets the "VacancyYearCode" field if the given value is not nil.
func (ecuo *ExamCalendarUpdateOne) SetNillableVacancyYearCode(i *int32) *ExamCalendarUpdateOne {
	if i != nil {
		ecuo.SetVacancyYearCode(*i)
	}
	return ecuo
}

// ClearVacancyYearCode clears the value of the "VacancyYearCode" field.
func (ecuo *ExamCalendarUpdateOne) ClearVacancyYearCode() *ExamCalendarUpdateOne {
	ecuo.mutation.ClearVacancyYearCode()
	return ecuo
}

// SetPaperCode sets the "PaperCode" field.
func (ecuo *ExamCalendarUpdateOne) SetPaperCode(i int32) *ExamCalendarUpdateOne {
	ecuo.mutation.SetPaperCode(i)
	return ecuo
}

// SetNillablePaperCode sets the "PaperCode" field if the given value is not nil.
func (ecuo *ExamCalendarUpdateOne) SetNillablePaperCode(i *int32) *ExamCalendarUpdateOne {
	if i != nil {
		ecuo.SetPaperCode(*i)
	}
	return ecuo
}

// ClearPaperCode clears the value of the "PaperCode" field.
func (ecuo *ExamCalendarUpdateOne) ClearPaperCode() *ExamCalendarUpdateOne {
	ecuo.mutation.ClearPaperCode()
	return ecuo
}

// SetExamCodePS sets the "ExamCodePS" field.
func (ecuo *ExamCalendarUpdateOne) SetExamCodePS(i int32) *ExamCalendarUpdateOne {
	ecuo.mutation.ResetExamCodePS()
	ecuo.mutation.SetExamCodePS(i)
	return ecuo
}

// SetNillableExamCodePS sets the "ExamCodePS" field if the given value is not nil.
func (ecuo *ExamCalendarUpdateOne) SetNillableExamCodePS(i *int32) *ExamCalendarUpdateOne {
	if i != nil {
		ecuo.SetExamCodePS(*i)
	}
	return ecuo
}

// AddExamCodePS adds i to the "ExamCodePS" field.
func (ecuo *ExamCalendarUpdateOne) AddExamCodePS(i int32) *ExamCalendarUpdateOne {
	ecuo.mutation.AddExamCodePS(i)
	return ecuo
}

// ClearExamCodePS clears the value of the "ExamCodePS" field.
func (ecuo *ExamCalendarUpdateOne) ClearExamCodePS() *ExamCalendarUpdateOne {
	ecuo.mutation.ClearExamCodePS()
	return ecuo
}

// SetVcyYearsID sets the "vcy_years" edge to the VacancyYear entity by ID.
func (ecuo *ExamCalendarUpdateOne) SetVcyYearsID(id int32) *ExamCalendarUpdateOne {
	ecuo.mutation.SetVcyYearsID(id)
	return ecuo
}

// SetNillableVcyYearsID sets the "vcy_years" edge to the VacancyYear entity by ID if the given value is not nil.
func (ecuo *ExamCalendarUpdateOne) SetNillableVcyYearsID(id *int32) *ExamCalendarUpdateOne {
	if id != nil {
		ecuo = ecuo.SetVcyYearsID(*id)
	}
	return ecuo
}

// SetVcyYears sets the "vcy_years" edge to the VacancyYear entity.
func (ecuo *ExamCalendarUpdateOne) SetVcyYears(v *VacancyYear) *ExamCalendarUpdateOne {
	return ecuo.SetVcyYearsID(v.ID)
}

// SetExamsID sets the "exams" edge to the Exam entity by ID.
func (ecuo *ExamCalendarUpdateOne) SetExamsID(id int32) *ExamCalendarUpdateOne {
	ecuo.mutation.SetExamsID(id)
	return ecuo
}

// SetNillableExamsID sets the "exams" edge to the Exam entity by ID if the given value is not nil.
func (ecuo *ExamCalendarUpdateOne) SetNillableExamsID(id *int32) *ExamCalendarUpdateOne {
	if id != nil {
		ecuo = ecuo.SetExamsID(*id)
	}
	return ecuo
}

// SetExams sets the "exams" edge to the Exam entity.
func (ecuo *ExamCalendarUpdateOne) SetExams(e *Exam) *ExamCalendarUpdateOne {
	return ecuo.SetExamsID(e.ID)
}

// SetPapersID sets the "papers" edge to the ExamPapers entity by ID.
func (ecuo *ExamCalendarUpdateOne) SetPapersID(id int32) *ExamCalendarUpdateOne {
	ecuo.mutation.SetPapersID(id)
	return ecuo
}

// SetNillablePapersID sets the "papers" edge to the ExamPapers entity by ID if the given value is not nil.
func (ecuo *ExamCalendarUpdateOne) SetNillablePapersID(id *int32) *ExamCalendarUpdateOne {
	if id != nil {
		ecuo = ecuo.SetPapersID(*id)
	}
	return ecuo
}

// SetPapers sets the "papers" edge to the ExamPapers entity.
func (ecuo *ExamCalendarUpdateOne) SetPapers(e *ExamPapers) *ExamCalendarUpdateOne {
	return ecuo.SetPapersID(e.ID)
}

// AddNotifyRefIDs adds the "Notify_ref" edge to the Notification entity by IDs.
func (ecuo *ExamCalendarUpdateOne) AddNotifyRefIDs(ids ...int32) *ExamCalendarUpdateOne {
	ecuo.mutation.AddNotifyRefIDs(ids...)
	return ecuo
}

// AddNotifyRef adds the "Notify_ref" edges to the Notification entity.
func (ecuo *ExamCalendarUpdateOne) AddNotifyRef(n ...*Notification) *ExamCalendarUpdateOne {
	ids := make([]int32, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return ecuo.AddNotifyRefIDs(ids...)
}

// Mutation returns the ExamCalendarMutation object of the builder.
func (ecuo *ExamCalendarUpdateOne) Mutation() *ExamCalendarMutation {
	return ecuo.mutation
}

// ClearVcyYears clears the "vcy_years" edge to the VacancyYear entity.
func (ecuo *ExamCalendarUpdateOne) ClearVcyYears() *ExamCalendarUpdateOne {
	ecuo.mutation.ClearVcyYears()
	return ecuo
}

// ClearExams clears the "exams" edge to the Exam entity.
func (ecuo *ExamCalendarUpdateOne) ClearExams() *ExamCalendarUpdateOne {
	ecuo.mutation.ClearExams()
	return ecuo
}

// ClearPapers clears the "papers" edge to the ExamPapers entity.
func (ecuo *ExamCalendarUpdateOne) ClearPapers() *ExamCalendarUpdateOne {
	ecuo.mutation.ClearPapers()
	return ecuo
}

// ClearNotifyRef clears all "Notify_ref" edges to the Notification entity.
func (ecuo *ExamCalendarUpdateOne) ClearNotifyRef() *ExamCalendarUpdateOne {
	ecuo.mutation.ClearNotifyRef()
	return ecuo
}

// RemoveNotifyRefIDs removes the "Notify_ref" edge to Notification entities by IDs.
func (ecuo *ExamCalendarUpdateOne) RemoveNotifyRefIDs(ids ...int32) *ExamCalendarUpdateOne {
	ecuo.mutation.RemoveNotifyRefIDs(ids...)
	return ecuo
}

// RemoveNotifyRef removes "Notify_ref" edges to Notification entities.
func (ecuo *ExamCalendarUpdateOne) RemoveNotifyRef(n ...*Notification) *ExamCalendarUpdateOne {
	ids := make([]int32, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return ecuo.RemoveNotifyRefIDs(ids...)
}

// Where appends a list predicates to the ExamCalendarUpdate builder.
func (ecuo *ExamCalendarUpdateOne) Where(ps ...predicate.ExamCalendar) *ExamCalendarUpdateOne {
	ecuo.mutation.Where(ps...)
	return ecuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ecuo *ExamCalendarUpdateOne) Select(field string, fields ...string) *ExamCalendarUpdateOne {
	ecuo.fields = append([]string{field}, fields...)
	return ecuo
}

// Save executes the query and returns the updated ExamCalendar entity.
func (ecuo *ExamCalendarUpdateOne) Save(ctx context.Context) (*ExamCalendar, error) {
	return withHooks(ctx, ecuo.sqlSave, ecuo.mutation, ecuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ecuo *ExamCalendarUpdateOne) SaveX(ctx context.Context) *ExamCalendar {
	node, err := ecuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ecuo *ExamCalendarUpdateOne) Exec(ctx context.Context) error {
	_, err := ecuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ecuo *ExamCalendarUpdateOne) ExecX(ctx context.Context) {
	if err := ecuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ecuo *ExamCalendarUpdateOne) check() error {
	if v, ok := ecuo.mutation.ExamName(); ok {
		if err := examcalendar.ExamNameValidator(v); err != nil {
			return &ValidationError{Name: "ExamName", err: fmt.Errorf(`ent: validator failed for field "ExamCalendar.ExamName": %w`, err)}
		}
	}
	return nil
}

func (ecuo *ExamCalendarUpdateOne) sqlSave(ctx context.Context) (_node *ExamCalendar, err error) {
	if err := ecuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(examcalendar.Table, examcalendar.Columns, sqlgraph.NewFieldSpec(examcalendar.FieldID, field.TypeInt32))
	id, ok := ecuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ExamCalendar.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ecuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, examcalendar.FieldID)
		for _, f := range fields {
			if !examcalendar.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != examcalendar.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ecuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ecuo.mutation.ExamYear(); ok {
		_spec.SetField(examcalendar.FieldExamYear, field.TypeInt32, value)
	}
	if value, ok := ecuo.mutation.AddedExamYear(); ok {
		_spec.AddField(examcalendar.FieldExamYear, field.TypeInt32, value)
	}
	if value, ok := ecuo.mutation.ExamName(); ok {
		_spec.SetField(examcalendar.FieldExamName, field.TypeString, value)
	}
	if value, ok := ecuo.mutation.NotificationDate(); ok {
		_spec.SetField(examcalendar.FieldNotificationDate, field.TypeTime, value)
	}
	if value, ok := ecuo.mutation.ModelNotificationDate(); ok {
		_spec.SetField(examcalendar.FieldModelNotificationDate, field.TypeTime, value)
	}
	if value, ok := ecuo.mutation.ApplicationEndDate(); ok {
		_spec.SetField(examcalendar.FieldApplicationEndDate, field.TypeTime, value)
	}
	if value, ok := ecuo.mutation.ApprovedOrderDate(); ok {
		_spec.SetField(examcalendar.FieldApprovedOrderDate, field.TypeTime, value)
	}
	if value, ok := ecuo.mutation.TentativeResultDate(); ok {
		_spec.SetField(examcalendar.FieldTentativeResultDate, field.TypeTime, value)
	}
	if ecuo.mutation.TentativeResultDateCleared() {
		_spec.ClearField(examcalendar.FieldTentativeResultDate, field.TypeTime)
	}
	if value, ok := ecuo.mutation.CreatedDate(); ok {
		_spec.SetField(examcalendar.FieldCreatedDate, field.TypeTime, value)
	}
	if value, ok := ecuo.mutation.ApprovedOrderNumber(); ok {
		_spec.SetField(examcalendar.FieldApprovedOrderNumber, field.TypeString, value)
	}
	if value, ok := ecuo.mutation.VacancyYears(); ok {
		_spec.SetField(examcalendar.FieldVacancyYears, field.TypeJSON, value)
	}
	if value, ok := ecuo.mutation.AppendedVacancyYears(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, examcalendar.FieldVacancyYears, value)
		})
	}
	if ecuo.mutation.VacancyYearsCleared() {
		_spec.ClearField(examcalendar.FieldVacancyYears, field.TypeJSON)
	}
	if value, ok := ecuo.mutation.ExamPapers(); ok {
		_spec.SetField(examcalendar.FieldExamPapers, field.TypeJSON, value)
	}
	if value, ok := ecuo.mutation.AppendedExamPapers(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, examcalendar.FieldExamPapers, value)
		})
	}
	if ecuo.mutation.ExamPapersCleared() {
		_spec.ClearField(examcalendar.FieldExamPapers, field.TypeJSON)
	}
	if value, ok := ecuo.mutation.ExamCodePS(); ok {
		_spec.SetField(examcalendar.FieldExamCodePS, field.TypeInt32, value)
	}
	if value, ok := ecuo.mutation.AddedExamCodePS(); ok {
		_spec.AddField(examcalendar.FieldExamCodePS, field.TypeInt32, value)
	}
	if ecuo.mutation.ExamCodePSCleared() {
		_spec.ClearField(examcalendar.FieldExamCodePS, field.TypeInt32)
	}
	if ecuo.mutation.VcyYearsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   examcalendar.VcyYearsTable,
			Columns: []string{examcalendar.VcyYearsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vacancyyear.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ecuo.mutation.VcyYearsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   examcalendar.VcyYearsTable,
			Columns: []string{examcalendar.VcyYearsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vacancyyear.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ecuo.mutation.ExamsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   examcalendar.ExamsTable,
			Columns: []string{examcalendar.ExamsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ecuo.mutation.ExamsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   examcalendar.ExamsTable,
			Columns: []string{examcalendar.ExamsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ecuo.mutation.PapersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   examcalendar.PapersTable,
			Columns: []string{examcalendar.PapersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exampapers.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ecuo.mutation.PapersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   examcalendar.PapersTable,
			Columns: []string{examcalendar.PapersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exampapers.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ecuo.mutation.NotifyRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   examcalendar.NotifyRefTable,
			Columns: []string{examcalendar.NotifyRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notification.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ecuo.mutation.RemovedNotifyRefIDs(); len(nodes) > 0 && !ecuo.mutation.NotifyRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   examcalendar.NotifyRefTable,
			Columns: []string{examcalendar.NotifyRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notification.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ecuo.mutation.NotifyRefIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   examcalendar.NotifyRefTable,
			Columns: []string{examcalendar.NotifyRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notification.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ExamCalendar{config: ecuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ecuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{examcalendar.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ecuo.mutation.done = true
	return _node, nil
}
