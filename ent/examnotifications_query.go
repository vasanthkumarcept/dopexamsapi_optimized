// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"
	"recruit/ent/examnotifications"
	"recruit/ent/logs"
	"recruit/ent/predicate"
	"recruit/ent/usermaster"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ExamNotificationsQuery is the builder for querying ExamNotifications entities.
type ExamNotificationsQuery struct {
	config
	ctx           *QueryContext
	order         []examnotifications.OrderOption
	inters        []Interceptor
	predicates    []predicate.ExamNotifications
	withUserIDref *UserMasterQuery
	withLogData   *LogsQuery
	withFKs       bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the ExamNotificationsQuery builder.
func (enq *ExamNotificationsQuery) Where(ps ...predicate.ExamNotifications) *ExamNotificationsQuery {
	enq.predicates = append(enq.predicates, ps...)
	return enq
}

// Limit the number of records to be returned by this query.
func (enq *ExamNotificationsQuery) Limit(limit int) *ExamNotificationsQuery {
	enq.ctx.Limit = &limit
	return enq
}

// Offset to start from.
func (enq *ExamNotificationsQuery) Offset(offset int) *ExamNotificationsQuery {
	enq.ctx.Offset = &offset
	return enq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (enq *ExamNotificationsQuery) Unique(unique bool) *ExamNotificationsQuery {
	enq.ctx.Unique = &unique
	return enq
}

// Order specifies how the records should be ordered.
func (enq *ExamNotificationsQuery) Order(o ...examnotifications.OrderOption) *ExamNotificationsQuery {
	enq.order = append(enq.order, o...)
	return enq
}

// QueryUserIDref chains the current query on the "UserIDref" edge.
func (enq *ExamNotificationsQuery) QueryUserIDref() *UserMasterQuery {
	query := (&UserMasterClient{config: enq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := enq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := enq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(examnotifications.Table, examnotifications.FieldID, selector),
			sqlgraph.To(usermaster.Table, usermaster.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, examnotifications.UserIDrefTable, examnotifications.UserIDrefColumn),
		)
		fromU = sqlgraph.SetNeighbors(enq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryLogData chains the current query on the "LogData" edge.
func (enq *ExamNotificationsQuery) QueryLogData() *LogsQuery {
	query := (&LogsClient{config: enq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := enq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := enq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(examnotifications.Table, examnotifications.FieldID, selector),
			sqlgraph.To(logs.Table, logs.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, examnotifications.LogDataTable, examnotifications.LogDataColumn),
		)
		fromU = sqlgraph.SetNeighbors(enq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first ExamNotifications entity from the query.
// Returns a *NotFoundError when no ExamNotifications was found.
func (enq *ExamNotificationsQuery) First(ctx context.Context) (*ExamNotifications, error) {
	nodes, err := enq.Limit(1).All(setContextOp(ctx, enq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{examnotifications.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (enq *ExamNotificationsQuery) FirstX(ctx context.Context) *ExamNotifications {
	node, err := enq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first ExamNotifications ID from the query.
// Returns a *NotFoundError when no ExamNotifications ID was found.
func (enq *ExamNotificationsQuery) FirstID(ctx context.Context) (id int32, err error) {
	var ids []int32
	if ids, err = enq.Limit(1).IDs(setContextOp(ctx, enq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{examnotifications.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (enq *ExamNotificationsQuery) FirstIDX(ctx context.Context) int32 {
	id, err := enq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single ExamNotifications entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one ExamNotifications entity is found.
// Returns a *NotFoundError when no ExamNotifications entities are found.
func (enq *ExamNotificationsQuery) Only(ctx context.Context) (*ExamNotifications, error) {
	nodes, err := enq.Limit(2).All(setContextOp(ctx, enq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{examnotifications.Label}
	default:
		return nil, &NotSingularError{examnotifications.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (enq *ExamNotificationsQuery) OnlyX(ctx context.Context) *ExamNotifications {
	node, err := enq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only ExamNotifications ID in the query.
// Returns a *NotSingularError when more than one ExamNotifications ID is found.
// Returns a *NotFoundError when no entities are found.
func (enq *ExamNotificationsQuery) OnlyID(ctx context.Context) (id int32, err error) {
	var ids []int32
	if ids, err = enq.Limit(2).IDs(setContextOp(ctx, enq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{examnotifications.Label}
	default:
		err = &NotSingularError{examnotifications.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (enq *ExamNotificationsQuery) OnlyIDX(ctx context.Context) int32 {
	id, err := enq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of ExamNotificationsSlice.
func (enq *ExamNotificationsQuery) All(ctx context.Context) ([]*ExamNotifications, error) {
	ctx = setContextOp(ctx, enq.ctx, "All")
	if err := enq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*ExamNotifications, *ExamNotificationsQuery]()
	return withInterceptors[[]*ExamNotifications](ctx, enq, qr, enq.inters)
}

// AllX is like All, but panics if an error occurs.
func (enq *ExamNotificationsQuery) AllX(ctx context.Context) []*ExamNotifications {
	nodes, err := enq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of ExamNotifications IDs.
func (enq *ExamNotificationsQuery) IDs(ctx context.Context) (ids []int32, err error) {
	if enq.ctx.Unique == nil && enq.path != nil {
		enq.Unique(true)
	}
	ctx = setContextOp(ctx, enq.ctx, "IDs")
	if err = enq.Select(examnotifications.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (enq *ExamNotificationsQuery) IDsX(ctx context.Context) []int32 {
	ids, err := enq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (enq *ExamNotificationsQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, enq.ctx, "Count")
	if err := enq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, enq, querierCount[*ExamNotificationsQuery](), enq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (enq *ExamNotificationsQuery) CountX(ctx context.Context) int {
	count, err := enq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (enq *ExamNotificationsQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, enq.ctx, "Exist")
	switch _, err := enq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (enq *ExamNotificationsQuery) ExistX(ctx context.Context) bool {
	exist, err := enq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the ExamNotificationsQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (enq *ExamNotificationsQuery) Clone() *ExamNotificationsQuery {
	if enq == nil {
		return nil
	}
	return &ExamNotificationsQuery{
		config:        enq.config,
		ctx:           enq.ctx.Clone(),
		order:         append([]examnotifications.OrderOption{}, enq.order...),
		inters:        append([]Interceptor{}, enq.inters...),
		predicates:    append([]predicate.ExamNotifications{}, enq.predicates...),
		withUserIDref: enq.withUserIDref.Clone(),
		withLogData:   enq.withLogData.Clone(),
		// clone intermediate query.
		sql:  enq.sql.Clone(),
		path: enq.path,
	}
}

// WithUserIDref tells the query-builder to eager-load the nodes that are connected to
// the "UserIDref" edge. The optional arguments are used to configure the query builder of the edge.
func (enq *ExamNotificationsQuery) WithUserIDref(opts ...func(*UserMasterQuery)) *ExamNotificationsQuery {
	query := (&UserMasterClient{config: enq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	enq.withUserIDref = query
	return enq
}

// WithLogData tells the query-builder to eager-load the nodes that are connected to
// the "LogData" edge. The optional arguments are used to configure the query builder of the edge.
func (enq *ExamNotificationsQuery) WithLogData(opts ...func(*LogsQuery)) *ExamNotificationsQuery {
	query := (&LogsClient{config: enq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	enq.withLogData = query
	return enq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		UserName string `json:"UserName,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.ExamNotifications.Query().
//		GroupBy(examnotifications.FieldUserName).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (enq *ExamNotificationsQuery) GroupBy(field string, fields ...string) *ExamNotificationsGroupBy {
	enq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &ExamNotificationsGroupBy{build: enq}
	grbuild.flds = &enq.ctx.Fields
	grbuild.label = examnotifications.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		UserName string `json:"UserName,omitempty"`
//	}
//
//	client.ExamNotifications.Query().
//		Select(examnotifications.FieldUserName).
//		Scan(ctx, &v)
func (enq *ExamNotificationsQuery) Select(fields ...string) *ExamNotificationsSelect {
	enq.ctx.Fields = append(enq.ctx.Fields, fields...)
	sbuild := &ExamNotificationsSelect{ExamNotificationsQuery: enq}
	sbuild.label = examnotifications.Label
	sbuild.flds, sbuild.scan = &enq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a ExamNotificationsSelect configured with the given aggregations.
func (enq *ExamNotificationsQuery) Aggregate(fns ...AggregateFunc) *ExamNotificationsSelect {
	return enq.Select().Aggregate(fns...)
}

func (enq *ExamNotificationsQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range enq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, enq); err != nil {
				return err
			}
		}
	}
	for _, f := range enq.ctx.Fields {
		if !examnotifications.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if enq.path != nil {
		prev, err := enq.path(ctx)
		if err != nil {
			return err
		}
		enq.sql = prev
	}
	return nil
}

func (enq *ExamNotificationsQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*ExamNotifications, error) {
	var (
		nodes       = []*ExamNotifications{}
		withFKs     = enq.withFKs
		_spec       = enq.querySpec()
		loadedTypes = [2]bool{
			enq.withUserIDref != nil,
			enq.withLogData != nil,
		}
	)
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, examnotifications.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*ExamNotifications).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &ExamNotifications{config: enq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, enq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := enq.withUserIDref; query != nil {
		if err := enq.loadUserIDref(ctx, query, nodes, nil,
			func(n *ExamNotifications, e *UserMaster) { n.Edges.UserIDref = e }); err != nil {
			return nil, err
		}
	}
	if query := enq.withLogData; query != nil {
		if err := enq.loadLogData(ctx, query, nodes,
			func(n *ExamNotifications) { n.Edges.LogData = []*Logs{} },
			func(n *ExamNotifications, e *Logs) { n.Edges.LogData = append(n.Edges.LogData, e) }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (enq *ExamNotificationsQuery) loadUserIDref(ctx context.Context, query *UserMasterQuery, nodes []*ExamNotifications, init func(*ExamNotifications), assign func(*ExamNotifications, *UserMaster)) error {
	ids := make([]int64, 0, len(nodes))
	nodeids := make(map[int64][]*ExamNotifications)
	for i := range nodes {
		fk := nodes[i].UserID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(usermaster.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "UserID" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (enq *ExamNotificationsQuery) loadLogData(ctx context.Context, query *LogsQuery, nodes []*ExamNotifications, init func(*ExamNotifications), assign func(*ExamNotifications, *Logs)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int32]*ExamNotifications)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Logs(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(examnotifications.LogDataColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.exam_notifications_log_data
		if fk == nil {
			return fmt.Errorf(`foreign-key "exam_notifications_log_data" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "exam_notifications_log_data" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (enq *ExamNotificationsQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := enq.querySpec()
	_spec.Node.Columns = enq.ctx.Fields
	if len(enq.ctx.Fields) > 0 {
		_spec.Unique = enq.ctx.Unique != nil && *enq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, enq.driver, _spec)
}

func (enq *ExamNotificationsQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(examnotifications.Table, examnotifications.Columns, sqlgraph.NewFieldSpec(examnotifications.FieldID, field.TypeInt32))
	_spec.From = enq.sql
	if unique := enq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if enq.path != nil {
		_spec.Unique = true
	}
	if fields := enq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, examnotifications.FieldID)
		for i := range fields {
			if fields[i] != examnotifications.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if enq.withUserIDref != nil {
			_spec.Node.AddColumnOnce(examnotifications.FieldUserID)
		}
	}
	if ps := enq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := enq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := enq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := enq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (enq *ExamNotificationsQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(enq.driver.Dialect())
	t1 := builder.Table(examnotifications.Table)
	columns := enq.ctx.Fields
	if len(columns) == 0 {
		columns = examnotifications.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if enq.sql != nil {
		selector = enq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if enq.ctx.Unique != nil && *enq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range enq.predicates {
		p(selector)
	}
	for _, p := range enq.order {
		p(selector)
	}
	if offset := enq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := enq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// ExamNotificationsGroupBy is the group-by builder for ExamNotifications entities.
type ExamNotificationsGroupBy struct {
	selector
	build *ExamNotificationsQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (engb *ExamNotificationsGroupBy) Aggregate(fns ...AggregateFunc) *ExamNotificationsGroupBy {
	engb.fns = append(engb.fns, fns...)
	return engb
}

// Scan applies the selector query and scans the result into the given value.
func (engb *ExamNotificationsGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, engb.build.ctx, "GroupBy")
	if err := engb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ExamNotificationsQuery, *ExamNotificationsGroupBy](ctx, engb.build, engb, engb.build.inters, v)
}

func (engb *ExamNotificationsGroupBy) sqlScan(ctx context.Context, root *ExamNotificationsQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(engb.fns))
	for _, fn := range engb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*engb.flds)+len(engb.fns))
		for _, f := range *engb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*engb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := engb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// ExamNotificationsSelect is the builder for selecting fields of ExamNotifications entities.
type ExamNotificationsSelect struct {
	*ExamNotificationsQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (ens *ExamNotificationsSelect) Aggregate(fns ...AggregateFunc) *ExamNotificationsSelect {
	ens.fns = append(ens.fns, fns...)
	return ens
}

// Scan applies the selector query and scans the result into the given value.
func (ens *ExamNotificationsSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ens.ctx, "Select")
	if err := ens.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ExamNotificationsQuery, *ExamNotificationsSelect](ctx, ens.ExamNotificationsQuery, ens, ens.inters, v)
}

func (ens *ExamNotificationsSelect) sqlScan(ctx context.Context, root *ExamNotificationsQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(ens.fns))
	for _, fn := range ens.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*ens.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ens.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
