// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"recruit/ent/exam_applications_gdspm"
	"recruit/ent/recommendationsgdspmapplications"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// RecommendationsGDSPMApplications is the model entity for the RecommendationsGDSPMApplications schema.
type RecommendationsGDSPMApplications struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// ApplicationID holds the value of the "ApplicationID" field.
	ApplicationID int64 `json:"ApplicationID,omitempty"`
	// EmployeeID holds the value of the "EmployeeID" field.
	EmployeeID int64 `json:"EmployeeID,omitempty"`
	// ExamNameCode holds the value of the "ExamNameCode" field.
	ExamNameCode string `json:"ExamNameCode,omitempty"`
	// ExamYear holds the value of the "ExamYear" field.
	ExamYear string `json:"ExamYear,omitempty"`
	// VacancyYear holds the value of the "VacancyYear" field.
	VacancyYear int32 `json:"VacancyYear,omitempty"`
	// Post holds the value of the "Post" field.
	Post string `json:"Post,omitempty"`
	// Eligible holds the value of the "Eligible" field.
	Eligible bool `json:"Eligible,omitempty"`
	// CARecommendations holds the value of the "CA_Recommendations" field.
	CARecommendations string `json:"CA_Recommendations,omitempty"`
	// CAUpdatedAt holds the value of the "CA_UpdatedAt" field.
	CAUpdatedAt time.Time `json:"CA_UpdatedAt,omitempty"`
	// CAUserName holds the value of the "CA_UserName" field.
	CAUserName string `json:"CA_UserName,omitempty"`
	// CARemarks holds the value of the "CA_Remarks" field.
	CARemarks string `json:"CA_Remarks,omitempty"`
	// NORecommendations holds the value of the "NO_Recommendations" field.
	NORecommendations string `json:"NO_Recommendations,omitempty"`
	// NOUpdatedAt holds the value of the "NO_UpdatedAt" field.
	NOUpdatedAt time.Time `json:"NO_UpdatedAt,omitempty"`
	// NOUserName holds the value of the "NO_UserName" field.
	NOUserName string `json:"NO_UserName,omitempty"`
	// NORemarks holds the value of the "NO_Remarks" field.
	NORemarks string `json:"NO_Remarks,omitempty"`
	// ApplicationStatus holds the value of the "ApplicationStatus" field.
	ApplicationStatus string `json:"ApplicationStatus,omitempty"`
	// UpdatedAt holds the value of the "UpdatedAt" field.
	UpdatedAt time.Time `json:"UpdatedAt,omitempty"`
	// UpdatedBy holds the value of the "UpdatedBy" field.
	UpdatedBy string `json:"UpdatedBy,omitempty"`
	// GenerateHallTicketFlag holds the value of the "GenerateHallTicketFlag" field.
	GenerateHallTicketFlag bool `json:"GenerateHallTicketFlag,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the RecommendationsGDSPMApplicationsQuery when eager-loading is set.
	Edges                                          RecommendationsGDSPMApplicationsEdges `json:"edges"`
	exam_applications_gdspm_gdspm_applications_ref *int64
	selectValues                                   sql.SelectValues
}

// RecommendationsGDSPMApplicationsEdges holds the relations/edges for other nodes in the graph.
type RecommendationsGDSPMApplicationsEdges struct {
	// ApplnRef holds the value of the ApplnRef edge.
	ApplnRef *Exam_Applications_GDSPM `json:"ApplnRef,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ApplnRefOrErr returns the ApplnRef value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RecommendationsGDSPMApplicationsEdges) ApplnRefOrErr() (*Exam_Applications_GDSPM, error) {
	if e.loadedTypes[0] {
		if e.ApplnRef == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: exam_applications_gdspm.Label}
		}
		return e.ApplnRef, nil
	}
	return nil, &NotLoadedError{edge: "ApplnRef"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*RecommendationsGDSPMApplications) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case recommendationsgdspmapplications.FieldEligible, recommendationsgdspmapplications.FieldGenerateHallTicketFlag:
			values[i] = new(sql.NullBool)
		case recommendationsgdspmapplications.FieldID, recommendationsgdspmapplications.FieldApplicationID, recommendationsgdspmapplications.FieldEmployeeID, recommendationsgdspmapplications.FieldVacancyYear:
			values[i] = new(sql.NullInt64)
		case recommendationsgdspmapplications.FieldExamNameCode, recommendationsgdspmapplications.FieldExamYear, recommendationsgdspmapplications.FieldPost, recommendationsgdspmapplications.FieldCARecommendations, recommendationsgdspmapplications.FieldCAUserName, recommendationsgdspmapplications.FieldCARemarks, recommendationsgdspmapplications.FieldNORecommendations, recommendationsgdspmapplications.FieldNOUserName, recommendationsgdspmapplications.FieldNORemarks, recommendationsgdspmapplications.FieldApplicationStatus, recommendationsgdspmapplications.FieldUpdatedBy:
			values[i] = new(sql.NullString)
		case recommendationsgdspmapplications.FieldCAUpdatedAt, recommendationsgdspmapplications.FieldNOUpdatedAt, recommendationsgdspmapplications.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case recommendationsgdspmapplications.ForeignKeys[0]: // exam_applications_gdspm_gdspm_applications_ref
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the RecommendationsGDSPMApplications fields.
func (rga *RecommendationsGDSPMApplications) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case recommendationsgdspmapplications.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			rga.ID = int64(value.Int64)
		case recommendationsgdspmapplications.FieldApplicationID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field ApplicationID", values[i])
			} else if value.Valid {
				rga.ApplicationID = value.Int64
			}
		case recommendationsgdspmapplications.FieldEmployeeID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field EmployeeID", values[i])
			} else if value.Valid {
				rga.EmployeeID = value.Int64
			}
		case recommendationsgdspmapplications.FieldExamNameCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ExamNameCode", values[i])
			} else if value.Valid {
				rga.ExamNameCode = value.String
			}
		case recommendationsgdspmapplications.FieldExamYear:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ExamYear", values[i])
			} else if value.Valid {
				rga.ExamYear = value.String
			}
		case recommendationsgdspmapplications.FieldVacancyYear:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field VacancyYear", values[i])
			} else if value.Valid {
				rga.VacancyYear = int32(value.Int64)
			}
		case recommendationsgdspmapplications.FieldPost:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Post", values[i])
			} else if value.Valid {
				rga.Post = value.String
			}
		case recommendationsgdspmapplications.FieldEligible:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field Eligible", values[i])
			} else if value.Valid {
				rga.Eligible = value.Bool
			}
		case recommendationsgdspmapplications.FieldCARecommendations:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field CA_Recommendations", values[i])
			} else if value.Valid {
				rga.CARecommendations = value.String
			}
		case recommendationsgdspmapplications.FieldCAUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field CA_UpdatedAt", values[i])
			} else if value.Valid {
				rga.CAUpdatedAt = value.Time
			}
		case recommendationsgdspmapplications.FieldCAUserName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field CA_UserName", values[i])
			} else if value.Valid {
				rga.CAUserName = value.String
			}
		case recommendationsgdspmapplications.FieldCARemarks:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field CA_Remarks", values[i])
			} else if value.Valid {
				rga.CARemarks = value.String
			}
		case recommendationsgdspmapplications.FieldNORecommendations:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field NO_Recommendations", values[i])
			} else if value.Valid {
				rga.NORecommendations = value.String
			}
		case recommendationsgdspmapplications.FieldNOUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field NO_UpdatedAt", values[i])
			} else if value.Valid {
				rga.NOUpdatedAt = value.Time
			}
		case recommendationsgdspmapplications.FieldNOUserName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field NO_UserName", values[i])
			} else if value.Valid {
				rga.NOUserName = value.String
			}
		case recommendationsgdspmapplications.FieldNORemarks:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field NO_Remarks", values[i])
			} else if value.Valid {
				rga.NORemarks = value.String
			}
		case recommendationsgdspmapplications.FieldApplicationStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ApplicationStatus", values[i])
			} else if value.Valid {
				rga.ApplicationStatus = value.String
			}
		case recommendationsgdspmapplications.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field UpdatedAt", values[i])
			} else if value.Valid {
				rga.UpdatedAt = value.Time
			}
		case recommendationsgdspmapplications.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field UpdatedBy", values[i])
			} else if value.Valid {
				rga.UpdatedBy = value.String
			}
		case recommendationsgdspmapplications.FieldGenerateHallTicketFlag:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field GenerateHallTicketFlag", values[i])
			} else if value.Valid {
				rga.GenerateHallTicketFlag = value.Bool
			}
		case recommendationsgdspmapplications.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field exam_applications_gdspm_gdspm_applications_ref", value)
			} else if value.Valid {
				rga.exam_applications_gdspm_gdspm_applications_ref = new(int64)
				*rga.exam_applications_gdspm_gdspm_applications_ref = int64(value.Int64)
			}
		default:
			rga.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the RecommendationsGDSPMApplications.
// This includes values selected through modifiers, order, etc.
func (rga *RecommendationsGDSPMApplications) Value(name string) (ent.Value, error) {
	return rga.selectValues.Get(name)
}

// QueryApplnRef queries the "ApplnRef" edge of the RecommendationsGDSPMApplications entity.
func (rga *RecommendationsGDSPMApplications) QueryApplnRef() *ExamApplicationsGDSPMQuery {
	return NewRecommendationsGDSPMApplicationsClient(rga.config).QueryApplnRef(rga)
}

// Update returns a builder for updating this RecommendationsGDSPMApplications.
// Note that you need to call RecommendationsGDSPMApplications.Unwrap() before calling this method if this RecommendationsGDSPMApplications
// was returned from a transaction, and the transaction was committed or rolled back.
func (rga *RecommendationsGDSPMApplications) Update() *RecommendationsGDSPMApplicationsUpdateOne {
	return NewRecommendationsGDSPMApplicationsClient(rga.config).UpdateOne(rga)
}

// Unwrap unwraps the RecommendationsGDSPMApplications entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (rga *RecommendationsGDSPMApplications) Unwrap() *RecommendationsGDSPMApplications {
	_tx, ok := rga.config.driver.(*txDriver)
	if !ok {
		panic("ent: RecommendationsGDSPMApplications is not a transactional entity")
	}
	rga.config.driver = _tx.drv
	return rga
}

// String implements the fmt.Stringer.
func (rga *RecommendationsGDSPMApplications) String() string {
	var builder strings.Builder
	builder.WriteString("RecommendationsGDSPMApplications(")
	builder.WriteString(fmt.Sprintf("id=%v, ", rga.ID))
	builder.WriteString("ApplicationID=")
	builder.WriteString(fmt.Sprintf("%v", rga.ApplicationID))
	builder.WriteString(", ")
	builder.WriteString("EmployeeID=")
	builder.WriteString(fmt.Sprintf("%v", rga.EmployeeID))
	builder.WriteString(", ")
	builder.WriteString("ExamNameCode=")
	builder.WriteString(rga.ExamNameCode)
	builder.WriteString(", ")
	builder.WriteString("ExamYear=")
	builder.WriteString(rga.ExamYear)
	builder.WriteString(", ")
	builder.WriteString("VacancyYear=")
	builder.WriteString(fmt.Sprintf("%v", rga.VacancyYear))
	builder.WriteString(", ")
	builder.WriteString("Post=")
	builder.WriteString(rga.Post)
	builder.WriteString(", ")
	builder.WriteString("Eligible=")
	builder.WriteString(fmt.Sprintf("%v", rga.Eligible))
	builder.WriteString(", ")
	builder.WriteString("CA_Recommendations=")
	builder.WriteString(rga.CARecommendations)
	builder.WriteString(", ")
	builder.WriteString("CA_UpdatedAt=")
	builder.WriteString(rga.CAUpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("CA_UserName=")
	builder.WriteString(rga.CAUserName)
	builder.WriteString(", ")
	builder.WriteString("CA_Remarks=")
	builder.WriteString(rga.CARemarks)
	builder.WriteString(", ")
	builder.WriteString("NO_Recommendations=")
	builder.WriteString(rga.NORecommendations)
	builder.WriteString(", ")
	builder.WriteString("NO_UpdatedAt=")
	builder.WriteString(rga.NOUpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("NO_UserName=")
	builder.WriteString(rga.NOUserName)
	builder.WriteString(", ")
	builder.WriteString("NO_Remarks=")
	builder.WriteString(rga.NORemarks)
	builder.WriteString(", ")
	builder.WriteString("ApplicationStatus=")
	builder.WriteString(rga.ApplicationStatus)
	builder.WriteString(", ")
	builder.WriteString("UpdatedAt=")
	builder.WriteString(rga.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("UpdatedBy=")
	builder.WriteString(rga.UpdatedBy)
	builder.WriteString(", ")
	builder.WriteString("GenerateHallTicketFlag=")
	builder.WriteString(fmt.Sprintf("%v", rga.GenerateHallTicketFlag))
	builder.WriteByte(')')
	return builder.String()
}

// RecommendationsGDSPMApplicationsSlice is a parsable slice of RecommendationsGDSPMApplications.
type RecommendationsGDSPMApplicationsSlice []*RecommendationsGDSPMApplications
