// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"recruit/ent/exam_application_mtspmmg"
	"recruit/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ExamApplicationMTSPMMGDelete is the builder for deleting a Exam_Application_MTSPMMG entity.
type ExamApplicationMTSPMMGDelete struct {
	config
	hooks    []Hook
	mutation *ExamApplicationMTSPMMGMutation
}

// Where appends a list predicates to the ExamApplicationMTSPMMGDelete builder.
func (eamd *ExamApplicationMTSPMMGDelete) Where(ps ...predicate.Exam_Application_MTSPMMG) *ExamApplicationMTSPMMGDelete {
	eamd.mutation.Where(ps...)
	return eamd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (eamd *ExamApplicationMTSPMMGDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, eamd.sqlExec, eamd.mutation, eamd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (eamd *ExamApplicationMTSPMMGDelete) ExecX(ctx context.Context) int {
	n, err := eamd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (eamd *ExamApplicationMTSPMMGDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(exam_application_mtspmmg.Table, sqlgraph.NewFieldSpec(exam_application_mtspmmg.FieldID, field.TypeInt64))
	if ps := eamd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, eamd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	eamd.mutation.done = true
	return affected, err
}

// ExamApplicationMTSPMMGDeleteOne is the builder for deleting a single Exam_Application_MTSPMMG entity.
type ExamApplicationMTSPMMGDeleteOne struct {
	eamd *ExamApplicationMTSPMMGDelete
}

// Where appends a list predicates to the ExamApplicationMTSPMMGDelete builder.
func (eamdo *ExamApplicationMTSPMMGDeleteOne) Where(ps ...predicate.Exam_Application_MTSPMMG) *ExamApplicationMTSPMMGDeleteOne {
	eamdo.eamd.mutation.Where(ps...)
	return eamdo
}

// Exec executes the deletion query.
func (eamdo *ExamApplicationMTSPMMGDeleteOne) Exec(ctx context.Context) error {
	n, err := eamdo.eamd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{exam_application_mtspmmg.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (eamdo *ExamApplicationMTSPMMGDeleteOne) ExecX(ctx context.Context) {
	if err := eamdo.Exec(ctx); err != nil {
		panic(err)
	}
}
