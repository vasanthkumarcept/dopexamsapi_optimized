// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"
	"recruit/ent/eligibilitycadrepaymatrix"
	"recruit/ent/logs"
	"recruit/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// EligibilityCadrePayMatrixQuery is the builder for querying EligibilityCadrePayMatrix entities.
type EligibilityCadrePayMatrixQuery struct {
	config
	ctx         *QueryContext
	order       []eligibilitycadrepaymatrix.OrderOption
	inters      []Interceptor
	predicates  []predicate.EligibilityCadrePayMatrix
	withLogData *LogsQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the EligibilityCadrePayMatrixQuery builder.
func (ecpmq *EligibilityCadrePayMatrixQuery) Where(ps ...predicate.EligibilityCadrePayMatrix) *EligibilityCadrePayMatrixQuery {
	ecpmq.predicates = append(ecpmq.predicates, ps...)
	return ecpmq
}

// Limit the number of records to be returned by this query.
func (ecpmq *EligibilityCadrePayMatrixQuery) Limit(limit int) *EligibilityCadrePayMatrixQuery {
	ecpmq.ctx.Limit = &limit
	return ecpmq
}

// Offset to start from.
func (ecpmq *EligibilityCadrePayMatrixQuery) Offset(offset int) *EligibilityCadrePayMatrixQuery {
	ecpmq.ctx.Offset = &offset
	return ecpmq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (ecpmq *EligibilityCadrePayMatrixQuery) Unique(unique bool) *EligibilityCadrePayMatrixQuery {
	ecpmq.ctx.Unique = &unique
	return ecpmq
}

// Order specifies how the records should be ordered.
func (ecpmq *EligibilityCadrePayMatrixQuery) Order(o ...eligibilitycadrepaymatrix.OrderOption) *EligibilityCadrePayMatrixQuery {
	ecpmq.order = append(ecpmq.order, o...)
	return ecpmq
}

// QueryLogData chains the current query on the "LogData" edge.
func (ecpmq *EligibilityCadrePayMatrixQuery) QueryLogData() *LogsQuery {
	query := (&LogsClient{config: ecpmq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ecpmq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ecpmq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(eligibilitycadrepaymatrix.Table, eligibilitycadrepaymatrix.FieldID, selector),
			sqlgraph.To(logs.Table, logs.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, eligibilitycadrepaymatrix.LogDataTable, eligibilitycadrepaymatrix.LogDataColumn),
		)
		fromU = sqlgraph.SetNeighbors(ecpmq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first EligibilityCadrePayMatrix entity from the query.
// Returns a *NotFoundError when no EligibilityCadrePayMatrix was found.
func (ecpmq *EligibilityCadrePayMatrixQuery) First(ctx context.Context) (*EligibilityCadrePayMatrix, error) {
	nodes, err := ecpmq.Limit(1).All(setContextOp(ctx, ecpmq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{eligibilitycadrepaymatrix.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (ecpmq *EligibilityCadrePayMatrixQuery) FirstX(ctx context.Context) *EligibilityCadrePayMatrix {
	node, err := ecpmq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first EligibilityCadrePayMatrix ID from the query.
// Returns a *NotFoundError when no EligibilityCadrePayMatrix ID was found.
func (ecpmq *EligibilityCadrePayMatrixQuery) FirstID(ctx context.Context) (id int64, err error) {
	var ids []int64
	if ids, err = ecpmq.Limit(1).IDs(setContextOp(ctx, ecpmq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{eligibilitycadrepaymatrix.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (ecpmq *EligibilityCadrePayMatrixQuery) FirstIDX(ctx context.Context) int64 {
	id, err := ecpmq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single EligibilityCadrePayMatrix entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one EligibilityCadrePayMatrix entity is found.
// Returns a *NotFoundError when no EligibilityCadrePayMatrix entities are found.
func (ecpmq *EligibilityCadrePayMatrixQuery) Only(ctx context.Context) (*EligibilityCadrePayMatrix, error) {
	nodes, err := ecpmq.Limit(2).All(setContextOp(ctx, ecpmq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{eligibilitycadrepaymatrix.Label}
	default:
		return nil, &NotSingularError{eligibilitycadrepaymatrix.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (ecpmq *EligibilityCadrePayMatrixQuery) OnlyX(ctx context.Context) *EligibilityCadrePayMatrix {
	node, err := ecpmq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only EligibilityCadrePayMatrix ID in the query.
// Returns a *NotSingularError when more than one EligibilityCadrePayMatrix ID is found.
// Returns a *NotFoundError when no entities are found.
func (ecpmq *EligibilityCadrePayMatrixQuery) OnlyID(ctx context.Context) (id int64, err error) {
	var ids []int64
	if ids, err = ecpmq.Limit(2).IDs(setContextOp(ctx, ecpmq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{eligibilitycadrepaymatrix.Label}
	default:
		err = &NotSingularError{eligibilitycadrepaymatrix.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (ecpmq *EligibilityCadrePayMatrixQuery) OnlyIDX(ctx context.Context) int64 {
	id, err := ecpmq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of EligibilityCadrePayMatrixes.
func (ecpmq *EligibilityCadrePayMatrixQuery) All(ctx context.Context) ([]*EligibilityCadrePayMatrix, error) {
	ctx = setContextOp(ctx, ecpmq.ctx, "All")
	if err := ecpmq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*EligibilityCadrePayMatrix, *EligibilityCadrePayMatrixQuery]()
	return withInterceptors[[]*EligibilityCadrePayMatrix](ctx, ecpmq, qr, ecpmq.inters)
}

// AllX is like All, but panics if an error occurs.
func (ecpmq *EligibilityCadrePayMatrixQuery) AllX(ctx context.Context) []*EligibilityCadrePayMatrix {
	nodes, err := ecpmq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of EligibilityCadrePayMatrix IDs.
func (ecpmq *EligibilityCadrePayMatrixQuery) IDs(ctx context.Context) (ids []int64, err error) {
	if ecpmq.ctx.Unique == nil && ecpmq.path != nil {
		ecpmq.Unique(true)
	}
	ctx = setContextOp(ctx, ecpmq.ctx, "IDs")
	if err = ecpmq.Select(eligibilitycadrepaymatrix.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (ecpmq *EligibilityCadrePayMatrixQuery) IDsX(ctx context.Context) []int64 {
	ids, err := ecpmq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (ecpmq *EligibilityCadrePayMatrixQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, ecpmq.ctx, "Count")
	if err := ecpmq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, ecpmq, querierCount[*EligibilityCadrePayMatrixQuery](), ecpmq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (ecpmq *EligibilityCadrePayMatrixQuery) CountX(ctx context.Context) int {
	count, err := ecpmq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (ecpmq *EligibilityCadrePayMatrixQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, ecpmq.ctx, "Exist")
	switch _, err := ecpmq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (ecpmq *EligibilityCadrePayMatrixQuery) ExistX(ctx context.Context) bool {
	exist, err := ecpmq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the EligibilityCadrePayMatrixQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (ecpmq *EligibilityCadrePayMatrixQuery) Clone() *EligibilityCadrePayMatrixQuery {
	if ecpmq == nil {
		return nil
	}
	return &EligibilityCadrePayMatrixQuery{
		config:      ecpmq.config,
		ctx:         ecpmq.ctx.Clone(),
		order:       append([]eligibilitycadrepaymatrix.OrderOption{}, ecpmq.order...),
		inters:      append([]Interceptor{}, ecpmq.inters...),
		predicates:  append([]predicate.EligibilityCadrePayMatrix{}, ecpmq.predicates...),
		withLogData: ecpmq.withLogData.Clone(),
		// clone intermediate query.
		sql:  ecpmq.sql.Clone(),
		path: ecpmq.path,
	}
}

// WithLogData tells the query-builder to eager-load the nodes that are connected to
// the "LogData" edge. The optional arguments are used to configure the query builder of the edge.
func (ecpmq *EligibilityCadrePayMatrixQuery) WithLogData(opts ...func(*LogsQuery)) *EligibilityCadrePayMatrixQuery {
	query := (&LogsClient{config: ecpmq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	ecpmq.withLogData = query
	return ecpmq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CadreEligibleConfigurationCadreEligibleCode int64 `json:"cadreEligibleConfiguration_cadreEligibleCode,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.EligibilityCadrePayMatrix.Query().
//		GroupBy(eligibilitycadrepaymatrix.FieldCadreEligibleConfigurationCadreEligibleCode).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (ecpmq *EligibilityCadrePayMatrixQuery) GroupBy(field string, fields ...string) *EligibilityCadrePayMatrixGroupBy {
	ecpmq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &EligibilityCadrePayMatrixGroupBy{build: ecpmq}
	grbuild.flds = &ecpmq.ctx.Fields
	grbuild.label = eligibilitycadrepaymatrix.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CadreEligibleConfigurationCadreEligibleCode int64 `json:"cadreEligibleConfiguration_cadreEligibleCode,omitempty"`
//	}
//
//	client.EligibilityCadrePayMatrix.Query().
//		Select(eligibilitycadrepaymatrix.FieldCadreEligibleConfigurationCadreEligibleCode).
//		Scan(ctx, &v)
func (ecpmq *EligibilityCadrePayMatrixQuery) Select(fields ...string) *EligibilityCadrePayMatrixSelect {
	ecpmq.ctx.Fields = append(ecpmq.ctx.Fields, fields...)
	sbuild := &EligibilityCadrePayMatrixSelect{EligibilityCadrePayMatrixQuery: ecpmq}
	sbuild.label = eligibilitycadrepaymatrix.Label
	sbuild.flds, sbuild.scan = &ecpmq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a EligibilityCadrePayMatrixSelect configured with the given aggregations.
func (ecpmq *EligibilityCadrePayMatrixQuery) Aggregate(fns ...AggregateFunc) *EligibilityCadrePayMatrixSelect {
	return ecpmq.Select().Aggregate(fns...)
}

func (ecpmq *EligibilityCadrePayMatrixQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range ecpmq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, ecpmq); err != nil {
				return err
			}
		}
	}
	for _, f := range ecpmq.ctx.Fields {
		if !eligibilitycadrepaymatrix.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if ecpmq.path != nil {
		prev, err := ecpmq.path(ctx)
		if err != nil {
			return err
		}
		ecpmq.sql = prev
	}
	return nil
}

func (ecpmq *EligibilityCadrePayMatrixQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*EligibilityCadrePayMatrix, error) {
	var (
		nodes       = []*EligibilityCadrePayMatrix{}
		_spec       = ecpmq.querySpec()
		loadedTypes = [1]bool{
			ecpmq.withLogData != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*EligibilityCadrePayMatrix).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &EligibilityCadrePayMatrix{config: ecpmq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, ecpmq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := ecpmq.withLogData; query != nil {
		if err := ecpmq.loadLogData(ctx, query, nodes,
			func(n *EligibilityCadrePayMatrix) { n.Edges.LogData = []*Logs{} },
			func(n *EligibilityCadrePayMatrix, e *Logs) { n.Edges.LogData = append(n.Edges.LogData, e) }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (ecpmq *EligibilityCadrePayMatrixQuery) loadLogData(ctx context.Context, query *LogsQuery, nodes []*EligibilityCadrePayMatrix, init func(*EligibilityCadrePayMatrix), assign func(*EligibilityCadrePayMatrix, *Logs)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int64]*EligibilityCadrePayMatrix)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Logs(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(eligibilitycadrepaymatrix.LogDataColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.eligibility_cadre_pay_matrix_log_data
		if fk == nil {
			return fmt.Errorf(`foreign-key "eligibility_cadre_pay_matrix_log_data" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "eligibility_cadre_pay_matrix_log_data" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (ecpmq *EligibilityCadrePayMatrixQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := ecpmq.querySpec()
	_spec.Node.Columns = ecpmq.ctx.Fields
	if len(ecpmq.ctx.Fields) > 0 {
		_spec.Unique = ecpmq.ctx.Unique != nil && *ecpmq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, ecpmq.driver, _spec)
}

func (ecpmq *EligibilityCadrePayMatrixQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(eligibilitycadrepaymatrix.Table, eligibilitycadrepaymatrix.Columns, sqlgraph.NewFieldSpec(eligibilitycadrepaymatrix.FieldID, field.TypeInt64))
	_spec.From = ecpmq.sql
	if unique := ecpmq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if ecpmq.path != nil {
		_spec.Unique = true
	}
	if fields := ecpmq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, eligibilitycadrepaymatrix.FieldID)
		for i := range fields {
			if fields[i] != eligibilitycadrepaymatrix.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := ecpmq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := ecpmq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := ecpmq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := ecpmq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (ecpmq *EligibilityCadrePayMatrixQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(ecpmq.driver.Dialect())
	t1 := builder.Table(eligibilitycadrepaymatrix.Table)
	columns := ecpmq.ctx.Fields
	if len(columns) == 0 {
		columns = eligibilitycadrepaymatrix.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if ecpmq.sql != nil {
		selector = ecpmq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if ecpmq.ctx.Unique != nil && *ecpmq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range ecpmq.predicates {
		p(selector)
	}
	for _, p := range ecpmq.order {
		p(selector)
	}
	if offset := ecpmq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := ecpmq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// EligibilityCadrePayMatrixGroupBy is the group-by builder for EligibilityCadrePayMatrix entities.
type EligibilityCadrePayMatrixGroupBy struct {
	selector
	build *EligibilityCadrePayMatrixQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (ecpmgb *EligibilityCadrePayMatrixGroupBy) Aggregate(fns ...AggregateFunc) *EligibilityCadrePayMatrixGroupBy {
	ecpmgb.fns = append(ecpmgb.fns, fns...)
	return ecpmgb
}

// Scan applies the selector query and scans the result into the given value.
func (ecpmgb *EligibilityCadrePayMatrixGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ecpmgb.build.ctx, "GroupBy")
	if err := ecpmgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*EligibilityCadrePayMatrixQuery, *EligibilityCadrePayMatrixGroupBy](ctx, ecpmgb.build, ecpmgb, ecpmgb.build.inters, v)
}

func (ecpmgb *EligibilityCadrePayMatrixGroupBy) sqlScan(ctx context.Context, root *EligibilityCadrePayMatrixQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(ecpmgb.fns))
	for _, fn := range ecpmgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*ecpmgb.flds)+len(ecpmgb.fns))
		for _, f := range *ecpmgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*ecpmgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ecpmgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// EligibilityCadrePayMatrixSelect is the builder for selecting fields of EligibilityCadrePayMatrix entities.
type EligibilityCadrePayMatrixSelect struct {
	*EligibilityCadrePayMatrixQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (ecpms *EligibilityCadrePayMatrixSelect) Aggregate(fns ...AggregateFunc) *EligibilityCadrePayMatrixSelect {
	ecpms.fns = append(ecpms.fns, fns...)
	return ecpms
}

// Scan applies the selector query and scans the result into the given value.
func (ecpms *EligibilityCadrePayMatrixSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ecpms.ctx, "Select")
	if err := ecpms.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*EligibilityCadrePayMatrixQuery, *EligibilityCadrePayMatrixSelect](ctx, ecpms.EligibilityCadrePayMatrixQuery, ecpms, ecpms.inters, v)
}

func (ecpms *EligibilityCadrePayMatrixSelect) sqlScan(ctx context.Context, root *EligibilityCadrePayMatrixQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(ecpms.fns))
	for _, fn := range ecpms.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*ecpms.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ecpms.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
