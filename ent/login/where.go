// Code generated by ent, DO NOT EDIT.

package login

import (
	"recruit/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Login {
	return predicate.Login(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Login {
	return predicate.Login(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Login {
	return predicate.Login(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Login {
	return predicate.Login(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Login {
	return predicate.Login(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Login {
	return predicate.Login(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Login {
	return predicate.Login(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Login {
	return predicate.Login(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Login {
	return predicate.Login(sql.FieldLTE(FieldID, id))
}

// LoginID applies equality check predicate on the "loginID" field. It's identical to LoginIDEQ.
func LoginID(v uuid.UUID) predicate.Login {
	return predicate.Login(sql.FieldEQ(FieldLoginID, v))
}

// Username applies equality check predicate on the "username" field. It's identical to UsernameEQ.
func Username(v string) predicate.Login {
	return predicate.Login(sql.FieldEQ(FieldUsername, v))
}

// Password applies equality check predicate on the "password" field. It's identical to PasswordEQ.
func Password(v string) predicate.Login {
	return predicate.Login(sql.FieldEQ(FieldPassword, v))
}

// EmployeedID applies equality check predicate on the "EmployeedID" field. It's identical to EmployeedIDEQ.
func EmployeedID(v int32) predicate.Login {
	return predicate.Login(sql.FieldEQ(FieldEmployeedID, v))
}

// ExpireminsToken applies equality check predicate on the "expiremins_token" field. It's identical to ExpireminsTokenEQ.
func ExpireminsToken(v int32) predicate.Login {
	return predicate.Login(sql.FieldEQ(FieldExpireminsToken, v))
}

// ExpireminsRefreshToken applies equality check predicate on the "expiremins_refresh_token" field. It's identical to ExpireminsRefreshTokenEQ.
func ExpireminsRefreshToken(v int32) predicate.Login {
	return predicate.Login(sql.FieldEQ(FieldExpireminsRefreshToken, v))
}

// Role applies equality check predicate on the "role" field. It's identical to RoleEQ.
func Role(v int32) predicate.Login {
	return predicate.Login(sql.FieldEQ(FieldRole, v))
}

// Token applies equality check predicate on the "token" field. It's identical to TokenEQ.
func Token(v string) predicate.Login {
	return predicate.Login(sql.FieldEQ(FieldToken, v))
}

// VerifyRemarks applies equality check predicate on the "VerifyRemarks" field. It's identical to VerifyRemarksEQ.
func VerifyRemarks(v string) predicate.Login {
	return predicate.Login(sql.FieldEQ(FieldVerifyRemarks, v))
}

// LoginIDEQ applies the EQ predicate on the "loginID" field.
func LoginIDEQ(v uuid.UUID) predicate.Login {
	return predicate.Login(sql.FieldEQ(FieldLoginID, v))
}

// LoginIDNEQ applies the NEQ predicate on the "loginID" field.
func LoginIDNEQ(v uuid.UUID) predicate.Login {
	return predicate.Login(sql.FieldNEQ(FieldLoginID, v))
}

// LoginIDIn applies the In predicate on the "loginID" field.
func LoginIDIn(vs ...uuid.UUID) predicate.Login {
	return predicate.Login(sql.FieldIn(FieldLoginID, vs...))
}

// LoginIDNotIn applies the NotIn predicate on the "loginID" field.
func LoginIDNotIn(vs ...uuid.UUID) predicate.Login {
	return predicate.Login(sql.FieldNotIn(FieldLoginID, vs...))
}

// LoginIDGT applies the GT predicate on the "loginID" field.
func LoginIDGT(v uuid.UUID) predicate.Login {
	return predicate.Login(sql.FieldGT(FieldLoginID, v))
}

// LoginIDGTE applies the GTE predicate on the "loginID" field.
func LoginIDGTE(v uuid.UUID) predicate.Login {
	return predicate.Login(sql.FieldGTE(FieldLoginID, v))
}

// LoginIDLT applies the LT predicate on the "loginID" field.
func LoginIDLT(v uuid.UUID) predicate.Login {
	return predicate.Login(sql.FieldLT(FieldLoginID, v))
}

// LoginIDLTE applies the LTE predicate on the "loginID" field.
func LoginIDLTE(v uuid.UUID) predicate.Login {
	return predicate.Login(sql.FieldLTE(FieldLoginID, v))
}

// UsernameEQ applies the EQ predicate on the "username" field.
func UsernameEQ(v string) predicate.Login {
	return predicate.Login(sql.FieldEQ(FieldUsername, v))
}

// UsernameNEQ applies the NEQ predicate on the "username" field.
func UsernameNEQ(v string) predicate.Login {
	return predicate.Login(sql.FieldNEQ(FieldUsername, v))
}

// UsernameIn applies the In predicate on the "username" field.
func UsernameIn(vs ...string) predicate.Login {
	return predicate.Login(sql.FieldIn(FieldUsername, vs...))
}

// UsernameNotIn applies the NotIn predicate on the "username" field.
func UsernameNotIn(vs ...string) predicate.Login {
	return predicate.Login(sql.FieldNotIn(FieldUsername, vs...))
}

// UsernameGT applies the GT predicate on the "username" field.
func UsernameGT(v string) predicate.Login {
	return predicate.Login(sql.FieldGT(FieldUsername, v))
}

// UsernameGTE applies the GTE predicate on the "username" field.
func UsernameGTE(v string) predicate.Login {
	return predicate.Login(sql.FieldGTE(FieldUsername, v))
}

// UsernameLT applies the LT predicate on the "username" field.
func UsernameLT(v string) predicate.Login {
	return predicate.Login(sql.FieldLT(FieldUsername, v))
}

// UsernameLTE applies the LTE predicate on the "username" field.
func UsernameLTE(v string) predicate.Login {
	return predicate.Login(sql.FieldLTE(FieldUsername, v))
}

// UsernameContains applies the Contains predicate on the "username" field.
func UsernameContains(v string) predicate.Login {
	return predicate.Login(sql.FieldContains(FieldUsername, v))
}

// UsernameHasPrefix applies the HasPrefix predicate on the "username" field.
func UsernameHasPrefix(v string) predicate.Login {
	return predicate.Login(sql.FieldHasPrefix(FieldUsername, v))
}

// UsernameHasSuffix applies the HasSuffix predicate on the "username" field.
func UsernameHasSuffix(v string) predicate.Login {
	return predicate.Login(sql.FieldHasSuffix(FieldUsername, v))
}

// UsernameEqualFold applies the EqualFold predicate on the "username" field.
func UsernameEqualFold(v string) predicate.Login {
	return predicate.Login(sql.FieldEqualFold(FieldUsername, v))
}

// UsernameContainsFold applies the ContainsFold predicate on the "username" field.
func UsernameContainsFold(v string) predicate.Login {
	return predicate.Login(sql.FieldContainsFold(FieldUsername, v))
}

// PasswordEQ applies the EQ predicate on the "password" field.
func PasswordEQ(v string) predicate.Login {
	return predicate.Login(sql.FieldEQ(FieldPassword, v))
}

// PasswordNEQ applies the NEQ predicate on the "password" field.
func PasswordNEQ(v string) predicate.Login {
	return predicate.Login(sql.FieldNEQ(FieldPassword, v))
}

// PasswordIn applies the In predicate on the "password" field.
func PasswordIn(vs ...string) predicate.Login {
	return predicate.Login(sql.FieldIn(FieldPassword, vs...))
}

// PasswordNotIn applies the NotIn predicate on the "password" field.
func PasswordNotIn(vs ...string) predicate.Login {
	return predicate.Login(sql.FieldNotIn(FieldPassword, vs...))
}

// PasswordGT applies the GT predicate on the "password" field.
func PasswordGT(v string) predicate.Login {
	return predicate.Login(sql.FieldGT(FieldPassword, v))
}

// PasswordGTE applies the GTE predicate on the "password" field.
func PasswordGTE(v string) predicate.Login {
	return predicate.Login(sql.FieldGTE(FieldPassword, v))
}

// PasswordLT applies the LT predicate on the "password" field.
func PasswordLT(v string) predicate.Login {
	return predicate.Login(sql.FieldLT(FieldPassword, v))
}

// PasswordLTE applies the LTE predicate on the "password" field.
func PasswordLTE(v string) predicate.Login {
	return predicate.Login(sql.FieldLTE(FieldPassword, v))
}

// PasswordContains applies the Contains predicate on the "password" field.
func PasswordContains(v string) predicate.Login {
	return predicate.Login(sql.FieldContains(FieldPassword, v))
}

// PasswordHasPrefix applies the HasPrefix predicate on the "password" field.
func PasswordHasPrefix(v string) predicate.Login {
	return predicate.Login(sql.FieldHasPrefix(FieldPassword, v))
}

// PasswordHasSuffix applies the HasSuffix predicate on the "password" field.
func PasswordHasSuffix(v string) predicate.Login {
	return predicate.Login(sql.FieldHasSuffix(FieldPassword, v))
}

// PasswordEqualFold applies the EqualFold predicate on the "password" field.
func PasswordEqualFold(v string) predicate.Login {
	return predicate.Login(sql.FieldEqualFold(FieldPassword, v))
}

// PasswordContainsFold applies the ContainsFold predicate on the "password" field.
func PasswordContainsFold(v string) predicate.Login {
	return predicate.Login(sql.FieldContainsFold(FieldPassword, v))
}

// EmployeedIDEQ applies the EQ predicate on the "EmployeedID" field.
func EmployeedIDEQ(v int32) predicate.Login {
	return predicate.Login(sql.FieldEQ(FieldEmployeedID, v))
}

// EmployeedIDNEQ applies the NEQ predicate on the "EmployeedID" field.
func EmployeedIDNEQ(v int32) predicate.Login {
	return predicate.Login(sql.FieldNEQ(FieldEmployeedID, v))
}

// EmployeedIDIn applies the In predicate on the "EmployeedID" field.
func EmployeedIDIn(vs ...int32) predicate.Login {
	return predicate.Login(sql.FieldIn(FieldEmployeedID, vs...))
}

// EmployeedIDNotIn applies the NotIn predicate on the "EmployeedID" field.
func EmployeedIDNotIn(vs ...int32) predicate.Login {
	return predicate.Login(sql.FieldNotIn(FieldEmployeedID, vs...))
}

// EmployeedIDGT applies the GT predicate on the "EmployeedID" field.
func EmployeedIDGT(v int32) predicate.Login {
	return predicate.Login(sql.FieldGT(FieldEmployeedID, v))
}

// EmployeedIDGTE applies the GTE predicate on the "EmployeedID" field.
func EmployeedIDGTE(v int32) predicate.Login {
	return predicate.Login(sql.FieldGTE(FieldEmployeedID, v))
}

// EmployeedIDLT applies the LT predicate on the "EmployeedID" field.
func EmployeedIDLT(v int32) predicate.Login {
	return predicate.Login(sql.FieldLT(FieldEmployeedID, v))
}

// EmployeedIDLTE applies the LTE predicate on the "EmployeedID" field.
func EmployeedIDLTE(v int32) predicate.Login {
	return predicate.Login(sql.FieldLTE(FieldEmployeedID, v))
}

// EmployeedIDIsNil applies the IsNil predicate on the "EmployeedID" field.
func EmployeedIDIsNil() predicate.Login {
	return predicate.Login(sql.FieldIsNull(FieldEmployeedID))
}

// EmployeedIDNotNil applies the NotNil predicate on the "EmployeedID" field.
func EmployeedIDNotNil() predicate.Login {
	return predicate.Login(sql.FieldNotNull(FieldEmployeedID))
}

// ExpireminsTokenEQ applies the EQ predicate on the "expiremins_token" field.
func ExpireminsTokenEQ(v int32) predicate.Login {
	return predicate.Login(sql.FieldEQ(FieldExpireminsToken, v))
}

// ExpireminsTokenNEQ applies the NEQ predicate on the "expiremins_token" field.
func ExpireminsTokenNEQ(v int32) predicate.Login {
	return predicate.Login(sql.FieldNEQ(FieldExpireminsToken, v))
}

// ExpireminsTokenIn applies the In predicate on the "expiremins_token" field.
func ExpireminsTokenIn(vs ...int32) predicate.Login {
	return predicate.Login(sql.FieldIn(FieldExpireminsToken, vs...))
}

// ExpireminsTokenNotIn applies the NotIn predicate on the "expiremins_token" field.
func ExpireminsTokenNotIn(vs ...int32) predicate.Login {
	return predicate.Login(sql.FieldNotIn(FieldExpireminsToken, vs...))
}

// ExpireminsTokenGT applies the GT predicate on the "expiremins_token" field.
func ExpireminsTokenGT(v int32) predicate.Login {
	return predicate.Login(sql.FieldGT(FieldExpireminsToken, v))
}

// ExpireminsTokenGTE applies the GTE predicate on the "expiremins_token" field.
func ExpireminsTokenGTE(v int32) predicate.Login {
	return predicate.Login(sql.FieldGTE(FieldExpireminsToken, v))
}

// ExpireminsTokenLT applies the LT predicate on the "expiremins_token" field.
func ExpireminsTokenLT(v int32) predicate.Login {
	return predicate.Login(sql.FieldLT(FieldExpireminsToken, v))
}

// ExpireminsTokenLTE applies the LTE predicate on the "expiremins_token" field.
func ExpireminsTokenLTE(v int32) predicate.Login {
	return predicate.Login(sql.FieldLTE(FieldExpireminsToken, v))
}

// ExpireminsRefreshTokenEQ applies the EQ predicate on the "expiremins_refresh_token" field.
func ExpireminsRefreshTokenEQ(v int32) predicate.Login {
	return predicate.Login(sql.FieldEQ(FieldExpireminsRefreshToken, v))
}

// ExpireminsRefreshTokenNEQ applies the NEQ predicate on the "expiremins_refresh_token" field.
func ExpireminsRefreshTokenNEQ(v int32) predicate.Login {
	return predicate.Login(sql.FieldNEQ(FieldExpireminsRefreshToken, v))
}

// ExpireminsRefreshTokenIn applies the In predicate on the "expiremins_refresh_token" field.
func ExpireminsRefreshTokenIn(vs ...int32) predicate.Login {
	return predicate.Login(sql.FieldIn(FieldExpireminsRefreshToken, vs...))
}

// ExpireminsRefreshTokenNotIn applies the NotIn predicate on the "expiremins_refresh_token" field.
func ExpireminsRefreshTokenNotIn(vs ...int32) predicate.Login {
	return predicate.Login(sql.FieldNotIn(FieldExpireminsRefreshToken, vs...))
}

// ExpireminsRefreshTokenGT applies the GT predicate on the "expiremins_refresh_token" field.
func ExpireminsRefreshTokenGT(v int32) predicate.Login {
	return predicate.Login(sql.FieldGT(FieldExpireminsRefreshToken, v))
}

// ExpireminsRefreshTokenGTE applies the GTE predicate on the "expiremins_refresh_token" field.
func ExpireminsRefreshTokenGTE(v int32) predicate.Login {
	return predicate.Login(sql.FieldGTE(FieldExpireminsRefreshToken, v))
}

// ExpireminsRefreshTokenLT applies the LT predicate on the "expiremins_refresh_token" field.
func ExpireminsRefreshTokenLT(v int32) predicate.Login {
	return predicate.Login(sql.FieldLT(FieldExpireminsRefreshToken, v))
}

// ExpireminsRefreshTokenLTE applies the LTE predicate on the "expiremins_refresh_token" field.
func ExpireminsRefreshTokenLTE(v int32) predicate.Login {
	return predicate.Login(sql.FieldLTE(FieldExpireminsRefreshToken, v))
}

// RoleEQ applies the EQ predicate on the "role" field.
func RoleEQ(v int32) predicate.Login {
	return predicate.Login(sql.FieldEQ(FieldRole, v))
}

// RoleNEQ applies the NEQ predicate on the "role" field.
func RoleNEQ(v int32) predicate.Login {
	return predicate.Login(sql.FieldNEQ(FieldRole, v))
}

// RoleIn applies the In predicate on the "role" field.
func RoleIn(vs ...int32) predicate.Login {
	return predicate.Login(sql.FieldIn(FieldRole, vs...))
}

// RoleNotIn applies the NotIn predicate on the "role" field.
func RoleNotIn(vs ...int32) predicate.Login {
	return predicate.Login(sql.FieldNotIn(FieldRole, vs...))
}

// RoleGT applies the GT predicate on the "role" field.
func RoleGT(v int32) predicate.Login {
	return predicate.Login(sql.FieldGT(FieldRole, v))
}

// RoleGTE applies the GTE predicate on the "role" field.
func RoleGTE(v int32) predicate.Login {
	return predicate.Login(sql.FieldGTE(FieldRole, v))
}

// RoleLT applies the LT predicate on the "role" field.
func RoleLT(v int32) predicate.Login {
	return predicate.Login(sql.FieldLT(FieldRole, v))
}

// RoleLTE applies the LTE predicate on the "role" field.
func RoleLTE(v int32) predicate.Login {
	return predicate.Login(sql.FieldLTE(FieldRole, v))
}

// TokenEQ applies the EQ predicate on the "token" field.
func TokenEQ(v string) predicate.Login {
	return predicate.Login(sql.FieldEQ(FieldToken, v))
}

// TokenNEQ applies the NEQ predicate on the "token" field.
func TokenNEQ(v string) predicate.Login {
	return predicate.Login(sql.FieldNEQ(FieldToken, v))
}

// TokenIn applies the In predicate on the "token" field.
func TokenIn(vs ...string) predicate.Login {
	return predicate.Login(sql.FieldIn(FieldToken, vs...))
}

// TokenNotIn applies the NotIn predicate on the "token" field.
func TokenNotIn(vs ...string) predicate.Login {
	return predicate.Login(sql.FieldNotIn(FieldToken, vs...))
}

// TokenGT applies the GT predicate on the "token" field.
func TokenGT(v string) predicate.Login {
	return predicate.Login(sql.FieldGT(FieldToken, v))
}

// TokenGTE applies the GTE predicate on the "token" field.
func TokenGTE(v string) predicate.Login {
	return predicate.Login(sql.FieldGTE(FieldToken, v))
}

// TokenLT applies the LT predicate on the "token" field.
func TokenLT(v string) predicate.Login {
	return predicate.Login(sql.FieldLT(FieldToken, v))
}

// TokenLTE applies the LTE predicate on the "token" field.
func TokenLTE(v string) predicate.Login {
	return predicate.Login(sql.FieldLTE(FieldToken, v))
}

// TokenContains applies the Contains predicate on the "token" field.
func TokenContains(v string) predicate.Login {
	return predicate.Login(sql.FieldContains(FieldToken, v))
}

// TokenHasPrefix applies the HasPrefix predicate on the "token" field.
func TokenHasPrefix(v string) predicate.Login {
	return predicate.Login(sql.FieldHasPrefix(FieldToken, v))
}

// TokenHasSuffix applies the HasSuffix predicate on the "token" field.
func TokenHasSuffix(v string) predicate.Login {
	return predicate.Login(sql.FieldHasSuffix(FieldToken, v))
}

// TokenEqualFold applies the EqualFold predicate on the "token" field.
func TokenEqualFold(v string) predicate.Login {
	return predicate.Login(sql.FieldEqualFold(FieldToken, v))
}

// TokenContainsFold applies the ContainsFold predicate on the "token" field.
func TokenContainsFold(v string) predicate.Login {
	return predicate.Login(sql.FieldContainsFold(FieldToken, v))
}

// VerifyRemarksEQ applies the EQ predicate on the "VerifyRemarks" field.
func VerifyRemarksEQ(v string) predicate.Login {
	return predicate.Login(sql.FieldEQ(FieldVerifyRemarks, v))
}

// VerifyRemarksNEQ applies the NEQ predicate on the "VerifyRemarks" field.
func VerifyRemarksNEQ(v string) predicate.Login {
	return predicate.Login(sql.FieldNEQ(FieldVerifyRemarks, v))
}

// VerifyRemarksIn applies the In predicate on the "VerifyRemarks" field.
func VerifyRemarksIn(vs ...string) predicate.Login {
	return predicate.Login(sql.FieldIn(FieldVerifyRemarks, vs...))
}

// VerifyRemarksNotIn applies the NotIn predicate on the "VerifyRemarks" field.
func VerifyRemarksNotIn(vs ...string) predicate.Login {
	return predicate.Login(sql.FieldNotIn(FieldVerifyRemarks, vs...))
}

// VerifyRemarksGT applies the GT predicate on the "VerifyRemarks" field.
func VerifyRemarksGT(v string) predicate.Login {
	return predicate.Login(sql.FieldGT(FieldVerifyRemarks, v))
}

// VerifyRemarksGTE applies the GTE predicate on the "VerifyRemarks" field.
func VerifyRemarksGTE(v string) predicate.Login {
	return predicate.Login(sql.FieldGTE(FieldVerifyRemarks, v))
}

// VerifyRemarksLT applies the LT predicate on the "VerifyRemarks" field.
func VerifyRemarksLT(v string) predicate.Login {
	return predicate.Login(sql.FieldLT(FieldVerifyRemarks, v))
}

// VerifyRemarksLTE applies the LTE predicate on the "VerifyRemarks" field.
func VerifyRemarksLTE(v string) predicate.Login {
	return predicate.Login(sql.FieldLTE(FieldVerifyRemarks, v))
}

// VerifyRemarksContains applies the Contains predicate on the "VerifyRemarks" field.
func VerifyRemarksContains(v string) predicate.Login {
	return predicate.Login(sql.FieldContains(FieldVerifyRemarks, v))
}

// VerifyRemarksHasPrefix applies the HasPrefix predicate on the "VerifyRemarks" field.
func VerifyRemarksHasPrefix(v string) predicate.Login {
	return predicate.Login(sql.FieldHasPrefix(FieldVerifyRemarks, v))
}

// VerifyRemarksHasSuffix applies the HasSuffix predicate on the "VerifyRemarks" field.
func VerifyRemarksHasSuffix(v string) predicate.Login {
	return predicate.Login(sql.FieldHasSuffix(FieldVerifyRemarks, v))
}

// VerifyRemarksIsNil applies the IsNil predicate on the "VerifyRemarks" field.
func VerifyRemarksIsNil() predicate.Login {
	return predicate.Login(sql.FieldIsNull(FieldVerifyRemarks))
}

// VerifyRemarksNotNil applies the NotNil predicate on the "VerifyRemarks" field.
func VerifyRemarksNotNil() predicate.Login {
	return predicate.Login(sql.FieldNotNull(FieldVerifyRemarks))
}

// VerifyRemarksEqualFold applies the EqualFold predicate on the "VerifyRemarks" field.
func VerifyRemarksEqualFold(v string) predicate.Login {
	return predicate.Login(sql.FieldEqualFold(FieldVerifyRemarks, v))
}

// VerifyRemarksContainsFold applies the ContainsFold predicate on the "VerifyRemarks" field.
func VerifyRemarksContainsFold(v string) predicate.Login {
	return predicate.Login(sql.FieldContainsFold(FieldVerifyRemarks, v))
}

// HasLogData applies the HasEdge predicate on the "LogData" edge.
func HasLogData() predicate.Login {
	return predicate.Login(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, LogDataTable, LogDataColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasLogDataWith applies the HasEdge predicate on the "LogData" edge with a given conditions (other predicates).
func HasLogDataWith(preds ...predicate.Logs) predicate.Login {
	return predicate.Login(func(s *sql.Selector) {
		step := newLogDataStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Login) predicate.Login {
	return predicate.Login(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Login) predicate.Login {
	return predicate.Login(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Login) predicate.Login {
	return predicate.Login(func(s *sql.Selector) {
		p(s.Not())
	})
}
