// Code generated by entimport, DO NOT EDIT.

package schema

import (
	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/entsql"
	"entgo.io/ent/schema"
	"entgo.io/ent/schema/edge"
	"entgo.io/ent/schema/field"
	"entgo.io/ent/schema/index"
	"time"
)

type AdminMaster struct {
	ent.Schema
}


func (AdminMaster) Fields() []ent.Field {
	return []ent.Field{
		field.Int64("id"),
		field.Int64("EmployeeId").Optional().Default(0),
		field.String("EmployeeName").Optional(),
		field.String("Designation").Optional(),
		field.Int32("RoleUserCode").Optional().Default(0),
		field.String("RoleUserDescription").Optional(),
		field.String("Mobile").Optional(),
		field.String("EmailID").Optional(),
		field.String("UserName").Optional(),
		field.String("Password").Default("Cept@123"). Optional(),
		field.Int64("FacilityIDUniqueid").Optional().Default(0),
		field.String("FacilityID").Optional(),
		field.String("AuthorityFacilityName").Optional(),
		field.String("FacilityType").Optional(),
		field.String("ReportingOfficeFacilityId").Optional(),
		field.String("ReportingOfficeFacilityName").Optional(),
		field.String("CircleOfficeFacilityId").Optional(),
		field.String("CircleOfficeName").Optional(),
		field.String("UidToken").Optional(),
		field.String("Statuss").Default("active"). Optional(),
		field.Int32("OTP").Optional().Default(0),
		field.Time("OTPSavedTime").SchemaType(map[string]string{
			dialect.Postgres: "timestamp",
		}).SchemaType(map[string]string{
			dialect.Postgres: "timestamp",
		}).Default(time.Now).Optional(),	
		field.Time("OTPTriggeredTime").SchemaType(map[string]string{
			dialect.Postgres: "timestamp",
		}).SchemaType(map[string]string{
			dialect.Postgres: "timestamp",
		}).Default(time.Now).Optional(),
		field.Time("OTPExpiryTime").SchemaType(map[string]string{
			dialect.Postgres: "timestamp",
		}).SchemaType(map[string]string{
			dialect.Postgres: "timestamp",
		}).Default(time.Now).Optional(),
		field.String("OTPRemarks").Optional(),
		field.Int64("CreatedById").Optional().Default(0),
		field.String("CreatedByUserName").Optional(),
		field.Int64("CreatedByEmpId").Optional().Default(0),
		field.String("CreatedByDesignation").Optional(),
		field.Time("CreatedDate").SchemaType(map[string]string{
			dialect.Postgres: "timestamp",
		}).Default(time.Now).Optional(),
		field.Int64("DeletedById").Optional().Default(0),
		field.String("DeletedByUserName").Optional(),
		field.Int64("DeletedByEmpId").Optional().Default(0),
		field.String("DeletedByDesignation").Optional(),
		field.Time("DeletedDate").SchemaType(map[string]string{
			dialect.Postgres: "timestamp",
		}).Default(time.Now).Optional(),

		field.Int("ModifiedById").Optional().Default(0),
		field.String("ModifiedByUserName").Optional(),
		field.Int64("ModifiedByEmpId").Optional().Default(0),
		field.String("ModifiedByDesignantion").Optional(),

		field.Time("ModifiedDate").SchemaType(map[string]string{
			dialect.Postgres: "timestamp",
		}).Default(time.Now).Optional(),
		field.String("DeletedBy").Optional(),
		field.String("Deletedbyid").Optional(),
		field.Bool("NewPasswordRequest").Optional(),
		field.Time("EventTime").SchemaType(map[string]string{
			dialect.Postgres: "timestamp",
		}).Default(time.Now).Optional(),
				//old
				field.Int64("UUID").Optional().Default(0),
				field.String("Updatedby").Optional(),
				field.Time("updatedDate").SchemaType(map[string]string{
					dialect.Postgres: "timestamp",
				}).Default(time.Now).Optional(),
		//field.String("CreatedBy").Default("API").Optional(),
		}
}


func (AdminMaster) Indexes() []ent.Index {
	return []ent.Index{
				index.Fields("EmployeeId","RoleUserCode","FacilityID","Statuss").Unique(),
				index.Fields("UserName","Statuss").Unique(),
	}
}

func (AdminMaster) Edges() []ent.Edge {
	return []ent.Edge{
		edge.To("LogData", Logs.Type),
	}
	
}


func (AdminMaster) Annotations() []schema.Annotation {
	return []schema.Annotation{entsql.Annotation{Table: "AdminMaster"}}
}


