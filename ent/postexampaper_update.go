// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"recruit/ent/postexampaper"
	"recruit/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PostExamPaperUpdate is the builder for updating PostExamPaper entities.
type PostExamPaperUpdate struct {
	config
	hooks    []Hook
	mutation *PostExamPaperMutation
}

// Where appends a list predicates to the PostExamPaperUpdate builder.
func (pepu *PostExamPaperUpdate) Where(ps ...predicate.PostExamPaper) *PostExamPaperUpdate {
	pepu.mutation.Where(ps...)
	return pepu
}

// SetExamConfigurationExamCode sets the "ExamConfigurationExamCode" field.
func (pepu *PostExamPaperUpdate) SetExamConfigurationExamCode(i int32) *PostExamPaperUpdate {
	pepu.mutation.ResetExamConfigurationExamCode()
	pepu.mutation.SetExamConfigurationExamCode(i)
	return pepu
}

// SetNillableExamConfigurationExamCode sets the "ExamConfigurationExamCode" field if the given value is not nil.
func (pepu *PostExamPaperUpdate) SetNillableExamConfigurationExamCode(i *int32) *PostExamPaperUpdate {
	if i != nil {
		pepu.SetExamConfigurationExamCode(*i)
	}
	return pepu
}

// AddExamConfigurationExamCode adds i to the "ExamConfigurationExamCode" field.
func (pepu *PostExamPaperUpdate) AddExamConfigurationExamCode(i int32) *PostExamPaperUpdate {
	pepu.mutation.AddExamConfigurationExamCode(i)
	return pepu
}

// ClearExamConfigurationExamCode clears the value of the "ExamConfigurationExamCode" field.
func (pepu *PostExamPaperUpdate) ClearExamConfigurationExamCode() *PostExamPaperUpdate {
	pepu.mutation.ClearExamConfigurationExamCode()
	return pepu
}

// SetExamShortDescription sets the "ExamShortDescription" field.
func (pepu *PostExamPaperUpdate) SetExamShortDescription(s string) *PostExamPaperUpdate {
	pepu.mutation.SetExamShortDescription(s)
	return pepu
}

// SetNillableExamShortDescription sets the "ExamShortDescription" field if the given value is not nil.
func (pepu *PostExamPaperUpdate) SetNillableExamShortDescription(s *string) *PostExamPaperUpdate {
	if s != nil {
		pepu.SetExamShortDescription(*s)
	}
	return pepu
}

// ClearExamShortDescription clears the value of the "ExamShortDescription" field.
func (pepu *PostExamPaperUpdate) ClearExamShortDescription() *PostExamPaperUpdate {
	pepu.mutation.ClearExamShortDescription()
	return pepu
}

// SetExamLongDescription sets the "ExamLongDescription" field.
func (pepu *PostExamPaperUpdate) SetExamLongDescription(s string) *PostExamPaperUpdate {
	pepu.mutation.SetExamLongDescription(s)
	return pepu
}

// SetNillableExamLongDescription sets the "ExamLongDescription" field if the given value is not nil.
func (pepu *PostExamPaperUpdate) SetNillableExamLongDescription(s *string) *PostExamPaperUpdate {
	if s != nil {
		pepu.SetExamLongDescription(*s)
	}
	return pepu
}

// ClearExamLongDescription clears the value of the "ExamLongDescription" field.
func (pepu *PostExamPaperUpdate) ClearExamLongDescription() *PostExamPaperUpdate {
	pepu.mutation.ClearExamLongDescription()
	return pepu
}

// SetExamPaperCode sets the "ExamPaperCode" field.
func (pepu *PostExamPaperUpdate) SetExamPaperCode(s string) *PostExamPaperUpdate {
	pepu.mutation.SetExamPaperCode(s)
	return pepu
}

// SetNillableExamPaperCode sets the "ExamPaperCode" field if the given value is not nil.
func (pepu *PostExamPaperUpdate) SetNillableExamPaperCode(s *string) *PostExamPaperUpdate {
	if s != nil {
		pepu.SetExamPaperCode(*s)
	}
	return pepu
}

// ClearExamPaperCode clears the value of the "ExamPaperCode" field.
func (pepu *PostExamPaperUpdate) ClearExamPaperCode() *PostExamPaperUpdate {
	pepu.mutation.ClearExamPaperCode()
	return pepu
}

// SetPaperDescription sets the "PaperDescription" field.
func (pepu *PostExamPaperUpdate) SetPaperDescription(s string) *PostExamPaperUpdate {
	pepu.mutation.SetPaperDescription(s)
	return pepu
}

// SetNillablePaperDescription sets the "PaperDescription" field if the given value is not nil.
func (pepu *PostExamPaperUpdate) SetNillablePaperDescription(s *string) *PostExamPaperUpdate {
	if s != nil {
		pepu.SetPaperDescription(*s)
	}
	return pepu
}

// ClearPaperDescription clears the value of the "PaperDescription" field.
func (pepu *PostExamPaperUpdate) ClearPaperDescription() *PostExamPaperUpdate {
	pepu.mutation.ClearPaperDescription()
	return pepu
}

// SetEmployeePostPostId sets the "EmployeePost_postId" field.
func (pepu *PostExamPaperUpdate) SetEmployeePostPostId(s string) *PostExamPaperUpdate {
	pepu.mutation.SetEmployeePostPostId(s)
	return pepu
}

// SetNillableEmployeePostPostId sets the "EmployeePost_postId" field if the given value is not nil.
func (pepu *PostExamPaperUpdate) SetNillableEmployeePostPostId(s *string) *PostExamPaperUpdate {
	if s != nil {
		pepu.SetEmployeePostPostId(*s)
	}
	return pepu
}

// ClearEmployeePostPostId clears the value of the "EmployeePost_postId" field.
func (pepu *PostExamPaperUpdate) ClearEmployeePostPostId() *PostExamPaperUpdate {
	pepu.mutation.ClearEmployeePostPostId()
	return pepu
}

// SetEmployeeGroupGroupId sets the "EmployeeGroup_GroupId" field.
func (pepu *PostExamPaperUpdate) SetEmployeeGroupGroupId(s string) *PostExamPaperUpdate {
	pepu.mutation.SetEmployeeGroupGroupId(s)
	return pepu
}

// SetNillableEmployeeGroupGroupId sets the "EmployeeGroup_GroupId" field if the given value is not nil.
func (pepu *PostExamPaperUpdate) SetNillableEmployeeGroupGroupId(s *string) *PostExamPaperUpdate {
	if s != nil {
		pepu.SetEmployeeGroupGroupId(*s)
	}
	return pepu
}

// ClearEmployeeGroupGroupId clears the value of the "EmployeeGroup_GroupId" field.
func (pepu *PostExamPaperUpdate) ClearEmployeeGroupGroupId() *PostExamPaperUpdate {
	pepu.mutation.ClearEmployeeGroupGroupId()
	return pepu
}

// SetGroupDescription sets the "GroupDescription" field.
func (pepu *PostExamPaperUpdate) SetGroupDescription(s string) *PostExamPaperUpdate {
	pepu.mutation.SetGroupDescription(s)
	return pepu
}

// SetNillableGroupDescription sets the "GroupDescription" field if the given value is not nil.
func (pepu *PostExamPaperUpdate) SetNillableGroupDescription(s *string) *PostExamPaperUpdate {
	if s != nil {
		pepu.SetGroupDescription(*s)
	}
	return pepu
}

// ClearGroupDescription clears the value of the "GroupDescription" field.
func (pepu *PostExamPaperUpdate) ClearGroupDescription() *PostExamPaperUpdate {
	pepu.mutation.ClearGroupDescription()
	return pepu
}

// SetPostCode sets the "PostCode" field.
func (pepu *PostExamPaperUpdate) SetPostCode(s string) *PostExamPaperUpdate {
	pepu.mutation.SetPostCode(s)
	return pepu
}

// SetNillablePostCode sets the "PostCode" field if the given value is not nil.
func (pepu *PostExamPaperUpdate) SetNillablePostCode(s *string) *PostExamPaperUpdate {
	if s != nil {
		pepu.SetPostCode(*s)
	}
	return pepu
}

// ClearPostCode clears the value of the "PostCode" field.
func (pepu *PostExamPaperUpdate) ClearPostCode() *PostExamPaperUpdate {
	pepu.mutation.ClearPostCode()
	return pepu
}

// SetPostDescription sets the "PostDescription" field.
func (pepu *PostExamPaperUpdate) SetPostDescription(s string) *PostExamPaperUpdate {
	pepu.mutation.SetPostDescription(s)
	return pepu
}

// SetNillablePostDescription sets the "PostDescription" field if the given value is not nil.
func (pepu *PostExamPaperUpdate) SetNillablePostDescription(s *string) *PostExamPaperUpdate {
	if s != nil {
		pepu.SetPostDescription(*s)
	}
	return pepu
}

// ClearPostDescription clears the value of the "PostDescription" field.
func (pepu *PostExamPaperUpdate) ClearPostDescription() *PostExamPaperUpdate {
	pepu.mutation.ClearPostDescription()
	return pepu
}

// SetBaseCadre sets the "BaseCadre" field.
func (pepu *PostExamPaperUpdate) SetBaseCadre(i int) *PostExamPaperUpdate {
	pepu.mutation.ResetBaseCadre()
	pepu.mutation.SetBaseCadre(i)
	return pepu
}

// SetNillableBaseCadre sets the "BaseCadre" field if the given value is not nil.
func (pepu *PostExamPaperUpdate) SetNillableBaseCadre(i *int) *PostExamPaperUpdate {
	if i != nil {
		pepu.SetBaseCadre(*i)
	}
	return pepu
}

// AddBaseCadre adds i to the "BaseCadre" field.
func (pepu *PostExamPaperUpdate) AddBaseCadre(i int) *PostExamPaperUpdate {
	pepu.mutation.AddBaseCadre(i)
	return pepu
}

// ClearBaseCadre clears the value of the "BaseCadre" field.
func (pepu *PostExamPaperUpdate) ClearBaseCadre() *PostExamPaperUpdate {
	pepu.mutation.ClearBaseCadre()
	return pepu
}

// SetPayLevel sets the "PayLevel" field.
func (pepu *PostExamPaperUpdate) SetPayLevel(s string) *PostExamPaperUpdate {
	pepu.mutation.SetPayLevel(s)
	return pepu
}

// SetNillablePayLevel sets the "PayLevel" field if the given value is not nil.
func (pepu *PostExamPaperUpdate) SetNillablePayLevel(s *string) *PostExamPaperUpdate {
	if s != nil {
		pepu.SetPayLevel(*s)
	}
	return pepu
}

// ClearPayLevel clears the value of the "PayLevel" field.
func (pepu *PostExamPaperUpdate) ClearPayLevel() *PostExamPaperUpdate {
	pepu.mutation.ClearPayLevel()
	return pepu
}

// SetScale sets the "Scale" field.
func (pepu *PostExamPaperUpdate) SetScale(s string) *PostExamPaperUpdate {
	pepu.mutation.SetScale(s)
	return pepu
}

// SetNillableScale sets the "Scale" field if the given value is not nil.
func (pepu *PostExamPaperUpdate) SetNillableScale(s *string) *PostExamPaperUpdate {
	if s != nil {
		pepu.SetScale(*s)
	}
	return pepu
}

// ClearScale clears the value of the "Scale" field.
func (pepu *PostExamPaperUpdate) ClearScale() *PostExamPaperUpdate {
	pepu.mutation.ClearScale()
	return pepu
}

// SetOrderNumber sets the "OrderNumber" field.
func (pepu *PostExamPaperUpdate) SetOrderNumber(s string) *PostExamPaperUpdate {
	pepu.mutation.SetOrderNumber(s)
	return pepu
}

// SetNillableOrderNumber sets the "OrderNumber" field if the given value is not nil.
func (pepu *PostExamPaperUpdate) SetNillableOrderNumber(s *string) *PostExamPaperUpdate {
	if s != nil {
		pepu.SetOrderNumber(*s)
	}
	return pepu
}

// ClearOrderNumber clears the value of the "OrderNumber" field.
func (pepu *PostExamPaperUpdate) ClearOrderNumber() *PostExamPaperUpdate {
	pepu.mutation.ClearOrderNumber()
	return pepu
}

// SetStatus sets the "Status" field.
func (pepu *PostExamPaperUpdate) SetStatus(s string) *PostExamPaperUpdate {
	pepu.mutation.SetStatus(s)
	return pepu
}

// SetNillableStatus sets the "Status" field if the given value is not nil.
func (pepu *PostExamPaperUpdate) SetNillableStatus(s *string) *PostExamPaperUpdate {
	if s != nil {
		pepu.SetStatus(*s)
	}
	return pepu
}

// ClearStatus clears the value of the "Status" field.
func (pepu *PostExamPaperUpdate) ClearStatus() *PostExamPaperUpdate {
	pepu.mutation.ClearStatus()
	return pepu
}

// SetCreatedById sets the "CreatedById" field.
func (pepu *PostExamPaperUpdate) SetCreatedById(i int64) *PostExamPaperUpdate {
	pepu.mutation.ResetCreatedById()
	pepu.mutation.SetCreatedById(i)
	return pepu
}

// SetNillableCreatedById sets the "CreatedById" field if the given value is not nil.
func (pepu *PostExamPaperUpdate) SetNillableCreatedById(i *int64) *PostExamPaperUpdate {
	if i != nil {
		pepu.SetCreatedById(*i)
	}
	return pepu
}

// AddCreatedById adds i to the "CreatedById" field.
func (pepu *PostExamPaperUpdate) AddCreatedById(i int64) *PostExamPaperUpdate {
	pepu.mutation.AddCreatedById(i)
	return pepu
}

// ClearCreatedById clears the value of the "CreatedById" field.
func (pepu *PostExamPaperUpdate) ClearCreatedById() *PostExamPaperUpdate {
	pepu.mutation.ClearCreatedById()
	return pepu
}

// SetCreatedByUserName sets the "CreatedByUserName" field.
func (pepu *PostExamPaperUpdate) SetCreatedByUserName(s string) *PostExamPaperUpdate {
	pepu.mutation.SetCreatedByUserName(s)
	return pepu
}

// SetNillableCreatedByUserName sets the "CreatedByUserName" field if the given value is not nil.
func (pepu *PostExamPaperUpdate) SetNillableCreatedByUserName(s *string) *PostExamPaperUpdate {
	if s != nil {
		pepu.SetCreatedByUserName(*s)
	}
	return pepu
}

// ClearCreatedByUserName clears the value of the "CreatedByUserName" field.
func (pepu *PostExamPaperUpdate) ClearCreatedByUserName() *PostExamPaperUpdate {
	pepu.mutation.ClearCreatedByUserName()
	return pepu
}

// SetCreatedByEmployeeId sets the "CreatedByEmployeeId" field.
func (pepu *PostExamPaperUpdate) SetCreatedByEmployeeId(s string) *PostExamPaperUpdate {
	pepu.mutation.SetCreatedByEmployeeId(s)
	return pepu
}

// SetNillableCreatedByEmployeeId sets the "CreatedByEmployeeId" field if the given value is not nil.
func (pepu *PostExamPaperUpdate) SetNillableCreatedByEmployeeId(s *string) *PostExamPaperUpdate {
	if s != nil {
		pepu.SetCreatedByEmployeeId(*s)
	}
	return pepu
}

// ClearCreatedByEmployeeId clears the value of the "CreatedByEmployeeId" field.
func (pepu *PostExamPaperUpdate) ClearCreatedByEmployeeId() *PostExamPaperUpdate {
	pepu.mutation.ClearCreatedByEmployeeId()
	return pepu
}

// SetCreatedByDesignation sets the "CreatedByDesignation" field.
func (pepu *PostExamPaperUpdate) SetCreatedByDesignation(s string) *PostExamPaperUpdate {
	pepu.mutation.SetCreatedByDesignation(s)
	return pepu
}

// SetNillableCreatedByDesignation sets the "CreatedByDesignation" field if the given value is not nil.
func (pepu *PostExamPaperUpdate) SetNillableCreatedByDesignation(s *string) *PostExamPaperUpdate {
	if s != nil {
		pepu.SetCreatedByDesignation(*s)
	}
	return pepu
}

// ClearCreatedByDesignation clears the value of the "CreatedByDesignation" field.
func (pepu *PostExamPaperUpdate) ClearCreatedByDesignation() *PostExamPaperUpdate {
	pepu.mutation.ClearCreatedByDesignation()
	return pepu
}

// SetCreatedDate sets the "CreatedDate" field.
func (pepu *PostExamPaperUpdate) SetCreatedDate(t time.Time) *PostExamPaperUpdate {
	pepu.mutation.SetCreatedDate(t)
	return pepu
}

// SetNillableCreatedDate sets the "CreatedDate" field if the given value is not nil.
func (pepu *PostExamPaperUpdate) SetNillableCreatedDate(t *time.Time) *PostExamPaperUpdate {
	if t != nil {
		pepu.SetCreatedDate(*t)
	}
	return pepu
}

// ClearCreatedDate clears the value of the "CreatedDate" field.
func (pepu *PostExamPaperUpdate) ClearCreatedDate() *PostExamPaperUpdate {
	pepu.mutation.ClearCreatedDate()
	return pepu
}

// SetVerifiedById sets the "VerifiedById" field.
func (pepu *PostExamPaperUpdate) SetVerifiedById(i int64) *PostExamPaperUpdate {
	pepu.mutation.ResetVerifiedById()
	pepu.mutation.SetVerifiedById(i)
	return pepu
}

// SetNillableVerifiedById sets the "VerifiedById" field if the given value is not nil.
func (pepu *PostExamPaperUpdate) SetNillableVerifiedById(i *int64) *PostExamPaperUpdate {
	if i != nil {
		pepu.SetVerifiedById(*i)
	}
	return pepu
}

// AddVerifiedById adds i to the "VerifiedById" field.
func (pepu *PostExamPaperUpdate) AddVerifiedById(i int64) *PostExamPaperUpdate {
	pepu.mutation.AddVerifiedById(i)
	return pepu
}

// ClearVerifiedById clears the value of the "VerifiedById" field.
func (pepu *PostExamPaperUpdate) ClearVerifiedById() *PostExamPaperUpdate {
	pepu.mutation.ClearVerifiedById()
	return pepu
}

// SetVerifiedByUserName sets the "VerifiedByUserName" field.
func (pepu *PostExamPaperUpdate) SetVerifiedByUserName(s string) *PostExamPaperUpdate {
	pepu.mutation.SetVerifiedByUserName(s)
	return pepu
}

// SetNillableVerifiedByUserName sets the "VerifiedByUserName" field if the given value is not nil.
func (pepu *PostExamPaperUpdate) SetNillableVerifiedByUserName(s *string) *PostExamPaperUpdate {
	if s != nil {
		pepu.SetVerifiedByUserName(*s)
	}
	return pepu
}

// ClearVerifiedByUserName clears the value of the "VerifiedByUserName" field.
func (pepu *PostExamPaperUpdate) ClearVerifiedByUserName() *PostExamPaperUpdate {
	pepu.mutation.ClearVerifiedByUserName()
	return pepu
}

// SetVerifiedByEmployeeId sets the "VerifiedByEmployeeId" field.
func (pepu *PostExamPaperUpdate) SetVerifiedByEmployeeId(s string) *PostExamPaperUpdate {
	pepu.mutation.SetVerifiedByEmployeeId(s)
	return pepu
}

// SetNillableVerifiedByEmployeeId sets the "VerifiedByEmployeeId" field if the given value is not nil.
func (pepu *PostExamPaperUpdate) SetNillableVerifiedByEmployeeId(s *string) *PostExamPaperUpdate {
	if s != nil {
		pepu.SetVerifiedByEmployeeId(*s)
	}
	return pepu
}

// ClearVerifiedByEmployeeId clears the value of the "VerifiedByEmployeeId" field.
func (pepu *PostExamPaperUpdate) ClearVerifiedByEmployeeId() *PostExamPaperUpdate {
	pepu.mutation.ClearVerifiedByEmployeeId()
	return pepu
}

// SetVerifiedByDesignation sets the "VerifiedByDesignation" field.
func (pepu *PostExamPaperUpdate) SetVerifiedByDesignation(s string) *PostExamPaperUpdate {
	pepu.mutation.SetVerifiedByDesignation(s)
	return pepu
}

// SetNillableVerifiedByDesignation sets the "VerifiedByDesignation" field if the given value is not nil.
func (pepu *PostExamPaperUpdate) SetNillableVerifiedByDesignation(s *string) *PostExamPaperUpdate {
	if s != nil {
		pepu.SetVerifiedByDesignation(*s)
	}
	return pepu
}

// ClearVerifiedByDesignation clears the value of the "VerifiedByDesignation" field.
func (pepu *PostExamPaperUpdate) ClearVerifiedByDesignation() *PostExamPaperUpdate {
	pepu.mutation.ClearVerifiedByDesignation()
	return pepu
}

// SetVerifiedDate sets the "VerifiedDate" field.
func (pepu *PostExamPaperUpdate) SetVerifiedDate(t time.Time) *PostExamPaperUpdate {
	pepu.mutation.SetVerifiedDate(t)
	return pepu
}

// SetNillableVerifiedDate sets the "VerifiedDate" field if the given value is not nil.
func (pepu *PostExamPaperUpdate) SetNillableVerifiedDate(t *time.Time) *PostExamPaperUpdate {
	if t != nil {
		pepu.SetVerifiedDate(*t)
	}
	return pepu
}

// ClearVerifiedDate clears the value of the "VerifiedDate" field.
func (pepu *PostExamPaperUpdate) ClearVerifiedDate() *PostExamPaperUpdate {
	pepu.mutation.ClearVerifiedDate()
	return pepu
}

// SetDeletedById sets the "DeletedById" field.
func (pepu *PostExamPaperUpdate) SetDeletedById(i int64) *PostExamPaperUpdate {
	pepu.mutation.ResetDeletedById()
	pepu.mutation.SetDeletedById(i)
	return pepu
}

// SetNillableDeletedById sets the "DeletedById" field if the given value is not nil.
func (pepu *PostExamPaperUpdate) SetNillableDeletedById(i *int64) *PostExamPaperUpdate {
	if i != nil {
		pepu.SetDeletedById(*i)
	}
	return pepu
}

// AddDeletedById adds i to the "DeletedById" field.
func (pepu *PostExamPaperUpdate) AddDeletedById(i int64) *PostExamPaperUpdate {
	pepu.mutation.AddDeletedById(i)
	return pepu
}

// ClearDeletedById clears the value of the "DeletedById" field.
func (pepu *PostExamPaperUpdate) ClearDeletedById() *PostExamPaperUpdate {
	pepu.mutation.ClearDeletedById()
	return pepu
}

// SetDeletedByUserName sets the "DeletedByUserName" field.
func (pepu *PostExamPaperUpdate) SetDeletedByUserName(s string) *PostExamPaperUpdate {
	pepu.mutation.SetDeletedByUserName(s)
	return pepu
}

// SetNillableDeletedByUserName sets the "DeletedByUserName" field if the given value is not nil.
func (pepu *PostExamPaperUpdate) SetNillableDeletedByUserName(s *string) *PostExamPaperUpdate {
	if s != nil {
		pepu.SetDeletedByUserName(*s)
	}
	return pepu
}

// ClearDeletedByUserName clears the value of the "DeletedByUserName" field.
func (pepu *PostExamPaperUpdate) ClearDeletedByUserName() *PostExamPaperUpdate {
	pepu.mutation.ClearDeletedByUserName()
	return pepu
}

// SetDeletedByEmployeeId sets the "DeletedByEmployeeId" field.
func (pepu *PostExamPaperUpdate) SetDeletedByEmployeeId(s string) *PostExamPaperUpdate {
	pepu.mutation.SetDeletedByEmployeeId(s)
	return pepu
}

// SetNillableDeletedByEmployeeId sets the "DeletedByEmployeeId" field if the given value is not nil.
func (pepu *PostExamPaperUpdate) SetNillableDeletedByEmployeeId(s *string) *PostExamPaperUpdate {
	if s != nil {
		pepu.SetDeletedByEmployeeId(*s)
	}
	return pepu
}

// ClearDeletedByEmployeeId clears the value of the "DeletedByEmployeeId" field.
func (pepu *PostExamPaperUpdate) ClearDeletedByEmployeeId() *PostExamPaperUpdate {
	pepu.mutation.ClearDeletedByEmployeeId()
	return pepu
}

// SetDeletedByDesignation sets the "DeletedByDesignation" field.
func (pepu *PostExamPaperUpdate) SetDeletedByDesignation(s string) *PostExamPaperUpdate {
	pepu.mutation.SetDeletedByDesignation(s)
	return pepu
}

// SetNillableDeletedByDesignation sets the "DeletedByDesignation" field if the given value is not nil.
func (pepu *PostExamPaperUpdate) SetNillableDeletedByDesignation(s *string) *PostExamPaperUpdate {
	if s != nil {
		pepu.SetDeletedByDesignation(*s)
	}
	return pepu
}

// ClearDeletedByDesignation clears the value of the "DeletedByDesignation" field.
func (pepu *PostExamPaperUpdate) ClearDeletedByDesignation() *PostExamPaperUpdate {
	pepu.mutation.ClearDeletedByDesignation()
	return pepu
}

// SetDeletedDate sets the "DeletedDate" field.
func (pepu *PostExamPaperUpdate) SetDeletedDate(t time.Time) *PostExamPaperUpdate {
	pepu.mutation.SetDeletedDate(t)
	return pepu
}

// SetNillableDeletedDate sets the "DeletedDate" field if the given value is not nil.
func (pepu *PostExamPaperUpdate) SetNillableDeletedDate(t *time.Time) *PostExamPaperUpdate {
	if t != nil {
		pepu.SetDeletedDate(*t)
	}
	return pepu
}

// ClearDeletedDate clears the value of the "DeletedDate" field.
func (pepu *PostExamPaperUpdate) ClearDeletedDate() *PostExamPaperUpdate {
	pepu.mutation.ClearDeletedDate()
	return pepu
}

// Mutation returns the PostExamPaperMutation object of the builder.
func (pepu *PostExamPaperUpdate) Mutation() *PostExamPaperMutation {
	return pepu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pepu *PostExamPaperUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, pepu.sqlSave, pepu.mutation, pepu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pepu *PostExamPaperUpdate) SaveX(ctx context.Context) int {
	affected, err := pepu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pepu *PostExamPaperUpdate) Exec(ctx context.Context) error {
	_, err := pepu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pepu *PostExamPaperUpdate) ExecX(ctx context.Context) {
	if err := pepu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (pepu *PostExamPaperUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(postexampaper.Table, postexampaper.Columns, sqlgraph.NewFieldSpec(postexampaper.FieldID, field.TypeInt32))
	if ps := pepu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pepu.mutation.ExamConfigurationExamCode(); ok {
		_spec.SetField(postexampaper.FieldExamConfigurationExamCode, field.TypeInt32, value)
	}
	if value, ok := pepu.mutation.AddedExamConfigurationExamCode(); ok {
		_spec.AddField(postexampaper.FieldExamConfigurationExamCode, field.TypeInt32, value)
	}
	if pepu.mutation.ExamConfigurationExamCodeCleared() {
		_spec.ClearField(postexampaper.FieldExamConfigurationExamCode, field.TypeInt32)
	}
	if value, ok := pepu.mutation.ExamShortDescription(); ok {
		_spec.SetField(postexampaper.FieldExamShortDescription, field.TypeString, value)
	}
	if pepu.mutation.ExamShortDescriptionCleared() {
		_spec.ClearField(postexampaper.FieldExamShortDescription, field.TypeString)
	}
	if value, ok := pepu.mutation.ExamLongDescription(); ok {
		_spec.SetField(postexampaper.FieldExamLongDescription, field.TypeString, value)
	}
	if pepu.mutation.ExamLongDescriptionCleared() {
		_spec.ClearField(postexampaper.FieldExamLongDescription, field.TypeString)
	}
	if value, ok := pepu.mutation.ExamPaperCode(); ok {
		_spec.SetField(postexampaper.FieldExamPaperCode, field.TypeString, value)
	}
	if pepu.mutation.ExamPaperCodeCleared() {
		_spec.ClearField(postexampaper.FieldExamPaperCode, field.TypeString)
	}
	if value, ok := pepu.mutation.PaperDescription(); ok {
		_spec.SetField(postexampaper.FieldPaperDescription, field.TypeString, value)
	}
	if pepu.mutation.PaperDescriptionCleared() {
		_spec.ClearField(postexampaper.FieldPaperDescription, field.TypeString)
	}
	if value, ok := pepu.mutation.EmployeePostPostId(); ok {
		_spec.SetField(postexampaper.FieldEmployeePostPostId, field.TypeString, value)
	}
	if pepu.mutation.EmployeePostPostIdCleared() {
		_spec.ClearField(postexampaper.FieldEmployeePostPostId, field.TypeString)
	}
	if value, ok := pepu.mutation.EmployeeGroupGroupId(); ok {
		_spec.SetField(postexampaper.FieldEmployeeGroupGroupId, field.TypeString, value)
	}
	if pepu.mutation.EmployeeGroupGroupIdCleared() {
		_spec.ClearField(postexampaper.FieldEmployeeGroupGroupId, field.TypeString)
	}
	if value, ok := pepu.mutation.GroupDescription(); ok {
		_spec.SetField(postexampaper.FieldGroupDescription, field.TypeString, value)
	}
	if pepu.mutation.GroupDescriptionCleared() {
		_spec.ClearField(postexampaper.FieldGroupDescription, field.TypeString)
	}
	if value, ok := pepu.mutation.PostCode(); ok {
		_spec.SetField(postexampaper.FieldPostCode, field.TypeString, value)
	}
	if pepu.mutation.PostCodeCleared() {
		_spec.ClearField(postexampaper.FieldPostCode, field.TypeString)
	}
	if value, ok := pepu.mutation.PostDescription(); ok {
		_spec.SetField(postexampaper.FieldPostDescription, field.TypeString, value)
	}
	if pepu.mutation.PostDescriptionCleared() {
		_spec.ClearField(postexampaper.FieldPostDescription, field.TypeString)
	}
	if value, ok := pepu.mutation.BaseCadre(); ok {
		_spec.SetField(postexampaper.FieldBaseCadre, field.TypeInt, value)
	}
	if value, ok := pepu.mutation.AddedBaseCadre(); ok {
		_spec.AddField(postexampaper.FieldBaseCadre, field.TypeInt, value)
	}
	if pepu.mutation.BaseCadreCleared() {
		_spec.ClearField(postexampaper.FieldBaseCadre, field.TypeInt)
	}
	if value, ok := pepu.mutation.PayLevel(); ok {
		_spec.SetField(postexampaper.FieldPayLevel, field.TypeString, value)
	}
	if pepu.mutation.PayLevelCleared() {
		_spec.ClearField(postexampaper.FieldPayLevel, field.TypeString)
	}
	if value, ok := pepu.mutation.Scale(); ok {
		_spec.SetField(postexampaper.FieldScale, field.TypeString, value)
	}
	if pepu.mutation.ScaleCleared() {
		_spec.ClearField(postexampaper.FieldScale, field.TypeString)
	}
	if value, ok := pepu.mutation.OrderNumber(); ok {
		_spec.SetField(postexampaper.FieldOrderNumber, field.TypeString, value)
	}
	if pepu.mutation.OrderNumberCleared() {
		_spec.ClearField(postexampaper.FieldOrderNumber, field.TypeString)
	}
	if value, ok := pepu.mutation.Status(); ok {
		_spec.SetField(postexampaper.FieldStatus, field.TypeString, value)
	}
	if pepu.mutation.StatusCleared() {
		_spec.ClearField(postexampaper.FieldStatus, field.TypeString)
	}
	if value, ok := pepu.mutation.CreatedById(); ok {
		_spec.SetField(postexampaper.FieldCreatedById, field.TypeInt64, value)
	}
	if value, ok := pepu.mutation.AddedCreatedById(); ok {
		_spec.AddField(postexampaper.FieldCreatedById, field.TypeInt64, value)
	}
	if pepu.mutation.CreatedByIdCleared() {
		_spec.ClearField(postexampaper.FieldCreatedById, field.TypeInt64)
	}
	if value, ok := pepu.mutation.CreatedByUserName(); ok {
		_spec.SetField(postexampaper.FieldCreatedByUserName, field.TypeString, value)
	}
	if pepu.mutation.CreatedByUserNameCleared() {
		_spec.ClearField(postexampaper.FieldCreatedByUserName, field.TypeString)
	}
	if value, ok := pepu.mutation.CreatedByEmployeeId(); ok {
		_spec.SetField(postexampaper.FieldCreatedByEmployeeId, field.TypeString, value)
	}
	if pepu.mutation.CreatedByEmployeeIdCleared() {
		_spec.ClearField(postexampaper.FieldCreatedByEmployeeId, field.TypeString)
	}
	if value, ok := pepu.mutation.CreatedByDesignation(); ok {
		_spec.SetField(postexampaper.FieldCreatedByDesignation, field.TypeString, value)
	}
	if pepu.mutation.CreatedByDesignationCleared() {
		_spec.ClearField(postexampaper.FieldCreatedByDesignation, field.TypeString)
	}
	if value, ok := pepu.mutation.CreatedDate(); ok {
		_spec.SetField(postexampaper.FieldCreatedDate, field.TypeTime, value)
	}
	if pepu.mutation.CreatedDateCleared() {
		_spec.ClearField(postexampaper.FieldCreatedDate, field.TypeTime)
	}
	if value, ok := pepu.mutation.VerifiedById(); ok {
		_spec.SetField(postexampaper.FieldVerifiedById, field.TypeInt64, value)
	}
	if value, ok := pepu.mutation.AddedVerifiedById(); ok {
		_spec.AddField(postexampaper.FieldVerifiedById, field.TypeInt64, value)
	}
	if pepu.mutation.VerifiedByIdCleared() {
		_spec.ClearField(postexampaper.FieldVerifiedById, field.TypeInt64)
	}
	if value, ok := pepu.mutation.VerifiedByUserName(); ok {
		_spec.SetField(postexampaper.FieldVerifiedByUserName, field.TypeString, value)
	}
	if pepu.mutation.VerifiedByUserNameCleared() {
		_spec.ClearField(postexampaper.FieldVerifiedByUserName, field.TypeString)
	}
	if value, ok := pepu.mutation.VerifiedByEmployeeId(); ok {
		_spec.SetField(postexampaper.FieldVerifiedByEmployeeId, field.TypeString, value)
	}
	if pepu.mutation.VerifiedByEmployeeIdCleared() {
		_spec.ClearField(postexampaper.FieldVerifiedByEmployeeId, field.TypeString)
	}
	if value, ok := pepu.mutation.VerifiedByDesignation(); ok {
		_spec.SetField(postexampaper.FieldVerifiedByDesignation, field.TypeString, value)
	}
	if pepu.mutation.VerifiedByDesignationCleared() {
		_spec.ClearField(postexampaper.FieldVerifiedByDesignation, field.TypeString)
	}
	if value, ok := pepu.mutation.VerifiedDate(); ok {
		_spec.SetField(postexampaper.FieldVerifiedDate, field.TypeTime, value)
	}
	if pepu.mutation.VerifiedDateCleared() {
		_spec.ClearField(postexampaper.FieldVerifiedDate, field.TypeTime)
	}
	if value, ok := pepu.mutation.DeletedById(); ok {
		_spec.SetField(postexampaper.FieldDeletedById, field.TypeInt64, value)
	}
	if value, ok := pepu.mutation.AddedDeletedById(); ok {
		_spec.AddField(postexampaper.FieldDeletedById, field.TypeInt64, value)
	}
	if pepu.mutation.DeletedByIdCleared() {
		_spec.ClearField(postexampaper.FieldDeletedById, field.TypeInt64)
	}
	if value, ok := pepu.mutation.DeletedByUserName(); ok {
		_spec.SetField(postexampaper.FieldDeletedByUserName, field.TypeString, value)
	}
	if pepu.mutation.DeletedByUserNameCleared() {
		_spec.ClearField(postexampaper.FieldDeletedByUserName, field.TypeString)
	}
	if value, ok := pepu.mutation.DeletedByEmployeeId(); ok {
		_spec.SetField(postexampaper.FieldDeletedByEmployeeId, field.TypeString, value)
	}
	if pepu.mutation.DeletedByEmployeeIdCleared() {
		_spec.ClearField(postexampaper.FieldDeletedByEmployeeId, field.TypeString)
	}
	if value, ok := pepu.mutation.DeletedByDesignation(); ok {
		_spec.SetField(postexampaper.FieldDeletedByDesignation, field.TypeString, value)
	}
	if pepu.mutation.DeletedByDesignationCleared() {
		_spec.ClearField(postexampaper.FieldDeletedByDesignation, field.TypeString)
	}
	if value, ok := pepu.mutation.DeletedDate(); ok {
		_spec.SetField(postexampaper.FieldDeletedDate, field.TypeTime, value)
	}
	if pepu.mutation.DeletedDateCleared() {
		_spec.ClearField(postexampaper.FieldDeletedDate, field.TypeTime)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pepu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{postexampaper.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pepu.mutation.done = true
	return n, nil
}

// PostExamPaperUpdateOne is the builder for updating a single PostExamPaper entity.
type PostExamPaperUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PostExamPaperMutation
}

// SetExamConfigurationExamCode sets the "ExamConfigurationExamCode" field.
func (pepuo *PostExamPaperUpdateOne) SetExamConfigurationExamCode(i int32) *PostExamPaperUpdateOne {
	pepuo.mutation.ResetExamConfigurationExamCode()
	pepuo.mutation.SetExamConfigurationExamCode(i)
	return pepuo
}

// SetNillableExamConfigurationExamCode sets the "ExamConfigurationExamCode" field if the given value is not nil.
func (pepuo *PostExamPaperUpdateOne) SetNillableExamConfigurationExamCode(i *int32) *PostExamPaperUpdateOne {
	if i != nil {
		pepuo.SetExamConfigurationExamCode(*i)
	}
	return pepuo
}

// AddExamConfigurationExamCode adds i to the "ExamConfigurationExamCode" field.
func (pepuo *PostExamPaperUpdateOne) AddExamConfigurationExamCode(i int32) *PostExamPaperUpdateOne {
	pepuo.mutation.AddExamConfigurationExamCode(i)
	return pepuo
}

// ClearExamConfigurationExamCode clears the value of the "ExamConfigurationExamCode" field.
func (pepuo *PostExamPaperUpdateOne) ClearExamConfigurationExamCode() *PostExamPaperUpdateOne {
	pepuo.mutation.ClearExamConfigurationExamCode()
	return pepuo
}

// SetExamShortDescription sets the "ExamShortDescription" field.
func (pepuo *PostExamPaperUpdateOne) SetExamShortDescription(s string) *PostExamPaperUpdateOne {
	pepuo.mutation.SetExamShortDescription(s)
	return pepuo
}

// SetNillableExamShortDescription sets the "ExamShortDescription" field if the given value is not nil.
func (pepuo *PostExamPaperUpdateOne) SetNillableExamShortDescription(s *string) *PostExamPaperUpdateOne {
	if s != nil {
		pepuo.SetExamShortDescription(*s)
	}
	return pepuo
}

// ClearExamShortDescription clears the value of the "ExamShortDescription" field.
func (pepuo *PostExamPaperUpdateOne) ClearExamShortDescription() *PostExamPaperUpdateOne {
	pepuo.mutation.ClearExamShortDescription()
	return pepuo
}

// SetExamLongDescription sets the "ExamLongDescription" field.
func (pepuo *PostExamPaperUpdateOne) SetExamLongDescription(s string) *PostExamPaperUpdateOne {
	pepuo.mutation.SetExamLongDescription(s)
	return pepuo
}

// SetNillableExamLongDescription sets the "ExamLongDescription" field if the given value is not nil.
func (pepuo *PostExamPaperUpdateOne) SetNillableExamLongDescription(s *string) *PostExamPaperUpdateOne {
	if s != nil {
		pepuo.SetExamLongDescription(*s)
	}
	return pepuo
}

// ClearExamLongDescription clears the value of the "ExamLongDescription" field.
func (pepuo *PostExamPaperUpdateOne) ClearExamLongDescription() *PostExamPaperUpdateOne {
	pepuo.mutation.ClearExamLongDescription()
	return pepuo
}

// SetExamPaperCode sets the "ExamPaperCode" field.
func (pepuo *PostExamPaperUpdateOne) SetExamPaperCode(s string) *PostExamPaperUpdateOne {
	pepuo.mutation.SetExamPaperCode(s)
	return pepuo
}

// SetNillableExamPaperCode sets the "ExamPaperCode" field if the given value is not nil.
func (pepuo *PostExamPaperUpdateOne) SetNillableExamPaperCode(s *string) *PostExamPaperUpdateOne {
	if s != nil {
		pepuo.SetExamPaperCode(*s)
	}
	return pepuo
}

// ClearExamPaperCode clears the value of the "ExamPaperCode" field.
func (pepuo *PostExamPaperUpdateOne) ClearExamPaperCode() *PostExamPaperUpdateOne {
	pepuo.mutation.ClearExamPaperCode()
	return pepuo
}

// SetPaperDescription sets the "PaperDescription" field.
func (pepuo *PostExamPaperUpdateOne) SetPaperDescription(s string) *PostExamPaperUpdateOne {
	pepuo.mutation.SetPaperDescription(s)
	return pepuo
}

// SetNillablePaperDescription sets the "PaperDescription" field if the given value is not nil.
func (pepuo *PostExamPaperUpdateOne) SetNillablePaperDescription(s *string) *PostExamPaperUpdateOne {
	if s != nil {
		pepuo.SetPaperDescription(*s)
	}
	return pepuo
}

// ClearPaperDescription clears the value of the "PaperDescription" field.
func (pepuo *PostExamPaperUpdateOne) ClearPaperDescription() *PostExamPaperUpdateOne {
	pepuo.mutation.ClearPaperDescription()
	return pepuo
}

// SetEmployeePostPostId sets the "EmployeePost_postId" field.
func (pepuo *PostExamPaperUpdateOne) SetEmployeePostPostId(s string) *PostExamPaperUpdateOne {
	pepuo.mutation.SetEmployeePostPostId(s)
	return pepuo
}

// SetNillableEmployeePostPostId sets the "EmployeePost_postId" field if the given value is not nil.
func (pepuo *PostExamPaperUpdateOne) SetNillableEmployeePostPostId(s *string) *PostExamPaperUpdateOne {
	if s != nil {
		pepuo.SetEmployeePostPostId(*s)
	}
	return pepuo
}

// ClearEmployeePostPostId clears the value of the "EmployeePost_postId" field.
func (pepuo *PostExamPaperUpdateOne) ClearEmployeePostPostId() *PostExamPaperUpdateOne {
	pepuo.mutation.ClearEmployeePostPostId()
	return pepuo
}

// SetEmployeeGroupGroupId sets the "EmployeeGroup_GroupId" field.
func (pepuo *PostExamPaperUpdateOne) SetEmployeeGroupGroupId(s string) *PostExamPaperUpdateOne {
	pepuo.mutation.SetEmployeeGroupGroupId(s)
	return pepuo
}

// SetNillableEmployeeGroupGroupId sets the "EmployeeGroup_GroupId" field if the given value is not nil.
func (pepuo *PostExamPaperUpdateOne) SetNillableEmployeeGroupGroupId(s *string) *PostExamPaperUpdateOne {
	if s != nil {
		pepuo.SetEmployeeGroupGroupId(*s)
	}
	return pepuo
}

// ClearEmployeeGroupGroupId clears the value of the "EmployeeGroup_GroupId" field.
func (pepuo *PostExamPaperUpdateOne) ClearEmployeeGroupGroupId() *PostExamPaperUpdateOne {
	pepuo.mutation.ClearEmployeeGroupGroupId()
	return pepuo
}

// SetGroupDescription sets the "GroupDescription" field.
func (pepuo *PostExamPaperUpdateOne) SetGroupDescription(s string) *PostExamPaperUpdateOne {
	pepuo.mutation.SetGroupDescription(s)
	return pepuo
}

// SetNillableGroupDescription sets the "GroupDescription" field if the given value is not nil.
func (pepuo *PostExamPaperUpdateOne) SetNillableGroupDescription(s *string) *PostExamPaperUpdateOne {
	if s != nil {
		pepuo.SetGroupDescription(*s)
	}
	return pepuo
}

// ClearGroupDescription clears the value of the "GroupDescription" field.
func (pepuo *PostExamPaperUpdateOne) ClearGroupDescription() *PostExamPaperUpdateOne {
	pepuo.mutation.ClearGroupDescription()
	return pepuo
}

// SetPostCode sets the "PostCode" field.
func (pepuo *PostExamPaperUpdateOne) SetPostCode(s string) *PostExamPaperUpdateOne {
	pepuo.mutation.SetPostCode(s)
	return pepuo
}

// SetNillablePostCode sets the "PostCode" field if the given value is not nil.
func (pepuo *PostExamPaperUpdateOne) SetNillablePostCode(s *string) *PostExamPaperUpdateOne {
	if s != nil {
		pepuo.SetPostCode(*s)
	}
	return pepuo
}

// ClearPostCode clears the value of the "PostCode" field.
func (pepuo *PostExamPaperUpdateOne) ClearPostCode() *PostExamPaperUpdateOne {
	pepuo.mutation.ClearPostCode()
	return pepuo
}

// SetPostDescription sets the "PostDescription" field.
func (pepuo *PostExamPaperUpdateOne) SetPostDescription(s string) *PostExamPaperUpdateOne {
	pepuo.mutation.SetPostDescription(s)
	return pepuo
}

// SetNillablePostDescription sets the "PostDescription" field if the given value is not nil.
func (pepuo *PostExamPaperUpdateOne) SetNillablePostDescription(s *string) *PostExamPaperUpdateOne {
	if s != nil {
		pepuo.SetPostDescription(*s)
	}
	return pepuo
}

// ClearPostDescription clears the value of the "PostDescription" field.
func (pepuo *PostExamPaperUpdateOne) ClearPostDescription() *PostExamPaperUpdateOne {
	pepuo.mutation.ClearPostDescription()
	return pepuo
}

// SetBaseCadre sets the "BaseCadre" field.
func (pepuo *PostExamPaperUpdateOne) SetBaseCadre(i int) *PostExamPaperUpdateOne {
	pepuo.mutation.ResetBaseCadre()
	pepuo.mutation.SetBaseCadre(i)
	return pepuo
}

// SetNillableBaseCadre sets the "BaseCadre" field if the given value is not nil.
func (pepuo *PostExamPaperUpdateOne) SetNillableBaseCadre(i *int) *PostExamPaperUpdateOne {
	if i != nil {
		pepuo.SetBaseCadre(*i)
	}
	return pepuo
}

// AddBaseCadre adds i to the "BaseCadre" field.
func (pepuo *PostExamPaperUpdateOne) AddBaseCadre(i int) *PostExamPaperUpdateOne {
	pepuo.mutation.AddBaseCadre(i)
	return pepuo
}

// ClearBaseCadre clears the value of the "BaseCadre" field.
func (pepuo *PostExamPaperUpdateOne) ClearBaseCadre() *PostExamPaperUpdateOne {
	pepuo.mutation.ClearBaseCadre()
	return pepuo
}

// SetPayLevel sets the "PayLevel" field.
func (pepuo *PostExamPaperUpdateOne) SetPayLevel(s string) *PostExamPaperUpdateOne {
	pepuo.mutation.SetPayLevel(s)
	return pepuo
}

// SetNillablePayLevel sets the "PayLevel" field if the given value is not nil.
func (pepuo *PostExamPaperUpdateOne) SetNillablePayLevel(s *string) *PostExamPaperUpdateOne {
	if s != nil {
		pepuo.SetPayLevel(*s)
	}
	return pepuo
}

// ClearPayLevel clears the value of the "PayLevel" field.
func (pepuo *PostExamPaperUpdateOne) ClearPayLevel() *PostExamPaperUpdateOne {
	pepuo.mutation.ClearPayLevel()
	return pepuo
}

// SetScale sets the "Scale" field.
func (pepuo *PostExamPaperUpdateOne) SetScale(s string) *PostExamPaperUpdateOne {
	pepuo.mutation.SetScale(s)
	return pepuo
}

// SetNillableScale sets the "Scale" field if the given value is not nil.
func (pepuo *PostExamPaperUpdateOne) SetNillableScale(s *string) *PostExamPaperUpdateOne {
	if s != nil {
		pepuo.SetScale(*s)
	}
	return pepuo
}

// ClearScale clears the value of the "Scale" field.
func (pepuo *PostExamPaperUpdateOne) ClearScale() *PostExamPaperUpdateOne {
	pepuo.mutation.ClearScale()
	return pepuo
}

// SetOrderNumber sets the "OrderNumber" field.
func (pepuo *PostExamPaperUpdateOne) SetOrderNumber(s string) *PostExamPaperUpdateOne {
	pepuo.mutation.SetOrderNumber(s)
	return pepuo
}

// SetNillableOrderNumber sets the "OrderNumber" field if the given value is not nil.
func (pepuo *PostExamPaperUpdateOne) SetNillableOrderNumber(s *string) *PostExamPaperUpdateOne {
	if s != nil {
		pepuo.SetOrderNumber(*s)
	}
	return pepuo
}

// ClearOrderNumber clears the value of the "OrderNumber" field.
func (pepuo *PostExamPaperUpdateOne) ClearOrderNumber() *PostExamPaperUpdateOne {
	pepuo.mutation.ClearOrderNumber()
	return pepuo
}

// SetStatus sets the "Status" field.
func (pepuo *PostExamPaperUpdateOne) SetStatus(s string) *PostExamPaperUpdateOne {
	pepuo.mutation.SetStatus(s)
	return pepuo
}

// SetNillableStatus sets the "Status" field if the given value is not nil.
func (pepuo *PostExamPaperUpdateOne) SetNillableStatus(s *string) *PostExamPaperUpdateOne {
	if s != nil {
		pepuo.SetStatus(*s)
	}
	return pepuo
}

// ClearStatus clears the value of the "Status" field.
func (pepuo *PostExamPaperUpdateOne) ClearStatus() *PostExamPaperUpdateOne {
	pepuo.mutation.ClearStatus()
	return pepuo
}

// SetCreatedById sets the "CreatedById" field.
func (pepuo *PostExamPaperUpdateOne) SetCreatedById(i int64) *PostExamPaperUpdateOne {
	pepuo.mutation.ResetCreatedById()
	pepuo.mutation.SetCreatedById(i)
	return pepuo
}

// SetNillableCreatedById sets the "CreatedById" field if the given value is not nil.
func (pepuo *PostExamPaperUpdateOne) SetNillableCreatedById(i *int64) *PostExamPaperUpdateOne {
	if i != nil {
		pepuo.SetCreatedById(*i)
	}
	return pepuo
}

// AddCreatedById adds i to the "CreatedById" field.
func (pepuo *PostExamPaperUpdateOne) AddCreatedById(i int64) *PostExamPaperUpdateOne {
	pepuo.mutation.AddCreatedById(i)
	return pepuo
}

// ClearCreatedById clears the value of the "CreatedById" field.
func (pepuo *PostExamPaperUpdateOne) ClearCreatedById() *PostExamPaperUpdateOne {
	pepuo.mutation.ClearCreatedById()
	return pepuo
}

// SetCreatedByUserName sets the "CreatedByUserName" field.
func (pepuo *PostExamPaperUpdateOne) SetCreatedByUserName(s string) *PostExamPaperUpdateOne {
	pepuo.mutation.SetCreatedByUserName(s)
	return pepuo
}

// SetNillableCreatedByUserName sets the "CreatedByUserName" field if the given value is not nil.
func (pepuo *PostExamPaperUpdateOne) SetNillableCreatedByUserName(s *string) *PostExamPaperUpdateOne {
	if s != nil {
		pepuo.SetCreatedByUserName(*s)
	}
	return pepuo
}

// ClearCreatedByUserName clears the value of the "CreatedByUserName" field.
func (pepuo *PostExamPaperUpdateOne) ClearCreatedByUserName() *PostExamPaperUpdateOne {
	pepuo.mutation.ClearCreatedByUserName()
	return pepuo
}

// SetCreatedByEmployeeId sets the "CreatedByEmployeeId" field.
func (pepuo *PostExamPaperUpdateOne) SetCreatedByEmployeeId(s string) *PostExamPaperUpdateOne {
	pepuo.mutation.SetCreatedByEmployeeId(s)
	return pepuo
}

// SetNillableCreatedByEmployeeId sets the "CreatedByEmployeeId" field if the given value is not nil.
func (pepuo *PostExamPaperUpdateOne) SetNillableCreatedByEmployeeId(s *string) *PostExamPaperUpdateOne {
	if s != nil {
		pepuo.SetCreatedByEmployeeId(*s)
	}
	return pepuo
}

// ClearCreatedByEmployeeId clears the value of the "CreatedByEmployeeId" field.
func (pepuo *PostExamPaperUpdateOne) ClearCreatedByEmployeeId() *PostExamPaperUpdateOne {
	pepuo.mutation.ClearCreatedByEmployeeId()
	return pepuo
}

// SetCreatedByDesignation sets the "CreatedByDesignation" field.
func (pepuo *PostExamPaperUpdateOne) SetCreatedByDesignation(s string) *PostExamPaperUpdateOne {
	pepuo.mutation.SetCreatedByDesignation(s)
	return pepuo
}

// SetNillableCreatedByDesignation sets the "CreatedByDesignation" field if the given value is not nil.
func (pepuo *PostExamPaperUpdateOne) SetNillableCreatedByDesignation(s *string) *PostExamPaperUpdateOne {
	if s != nil {
		pepuo.SetCreatedByDesignation(*s)
	}
	return pepuo
}

// ClearCreatedByDesignation clears the value of the "CreatedByDesignation" field.
func (pepuo *PostExamPaperUpdateOne) ClearCreatedByDesignation() *PostExamPaperUpdateOne {
	pepuo.mutation.ClearCreatedByDesignation()
	return pepuo
}

// SetCreatedDate sets the "CreatedDate" field.
func (pepuo *PostExamPaperUpdateOne) SetCreatedDate(t time.Time) *PostExamPaperUpdateOne {
	pepuo.mutation.SetCreatedDate(t)
	return pepuo
}

// SetNillableCreatedDate sets the "CreatedDate" field if the given value is not nil.
func (pepuo *PostExamPaperUpdateOne) SetNillableCreatedDate(t *time.Time) *PostExamPaperUpdateOne {
	if t != nil {
		pepuo.SetCreatedDate(*t)
	}
	return pepuo
}

// ClearCreatedDate clears the value of the "CreatedDate" field.
func (pepuo *PostExamPaperUpdateOne) ClearCreatedDate() *PostExamPaperUpdateOne {
	pepuo.mutation.ClearCreatedDate()
	return pepuo
}

// SetVerifiedById sets the "VerifiedById" field.
func (pepuo *PostExamPaperUpdateOne) SetVerifiedById(i int64) *PostExamPaperUpdateOne {
	pepuo.mutation.ResetVerifiedById()
	pepuo.mutation.SetVerifiedById(i)
	return pepuo
}

// SetNillableVerifiedById sets the "VerifiedById" field if the given value is not nil.
func (pepuo *PostExamPaperUpdateOne) SetNillableVerifiedById(i *int64) *PostExamPaperUpdateOne {
	if i != nil {
		pepuo.SetVerifiedById(*i)
	}
	return pepuo
}

// AddVerifiedById adds i to the "VerifiedById" field.
func (pepuo *PostExamPaperUpdateOne) AddVerifiedById(i int64) *PostExamPaperUpdateOne {
	pepuo.mutation.AddVerifiedById(i)
	return pepuo
}

// ClearVerifiedById clears the value of the "VerifiedById" field.
func (pepuo *PostExamPaperUpdateOne) ClearVerifiedById() *PostExamPaperUpdateOne {
	pepuo.mutation.ClearVerifiedById()
	return pepuo
}

// SetVerifiedByUserName sets the "VerifiedByUserName" field.
func (pepuo *PostExamPaperUpdateOne) SetVerifiedByUserName(s string) *PostExamPaperUpdateOne {
	pepuo.mutation.SetVerifiedByUserName(s)
	return pepuo
}

// SetNillableVerifiedByUserName sets the "VerifiedByUserName" field if the given value is not nil.
func (pepuo *PostExamPaperUpdateOne) SetNillableVerifiedByUserName(s *string) *PostExamPaperUpdateOne {
	if s != nil {
		pepuo.SetVerifiedByUserName(*s)
	}
	return pepuo
}

// ClearVerifiedByUserName clears the value of the "VerifiedByUserName" field.
func (pepuo *PostExamPaperUpdateOne) ClearVerifiedByUserName() *PostExamPaperUpdateOne {
	pepuo.mutation.ClearVerifiedByUserName()
	return pepuo
}

// SetVerifiedByEmployeeId sets the "VerifiedByEmployeeId" field.
func (pepuo *PostExamPaperUpdateOne) SetVerifiedByEmployeeId(s string) *PostExamPaperUpdateOne {
	pepuo.mutation.SetVerifiedByEmployeeId(s)
	return pepuo
}

// SetNillableVerifiedByEmployeeId sets the "VerifiedByEmployeeId" field if the given value is not nil.
func (pepuo *PostExamPaperUpdateOne) SetNillableVerifiedByEmployeeId(s *string) *PostExamPaperUpdateOne {
	if s != nil {
		pepuo.SetVerifiedByEmployeeId(*s)
	}
	return pepuo
}

// ClearVerifiedByEmployeeId clears the value of the "VerifiedByEmployeeId" field.
func (pepuo *PostExamPaperUpdateOne) ClearVerifiedByEmployeeId() *PostExamPaperUpdateOne {
	pepuo.mutation.ClearVerifiedByEmployeeId()
	return pepuo
}

// SetVerifiedByDesignation sets the "VerifiedByDesignation" field.
func (pepuo *PostExamPaperUpdateOne) SetVerifiedByDesignation(s string) *PostExamPaperUpdateOne {
	pepuo.mutation.SetVerifiedByDesignation(s)
	return pepuo
}

// SetNillableVerifiedByDesignation sets the "VerifiedByDesignation" field if the given value is not nil.
func (pepuo *PostExamPaperUpdateOne) SetNillableVerifiedByDesignation(s *string) *PostExamPaperUpdateOne {
	if s != nil {
		pepuo.SetVerifiedByDesignation(*s)
	}
	return pepuo
}

// ClearVerifiedByDesignation clears the value of the "VerifiedByDesignation" field.
func (pepuo *PostExamPaperUpdateOne) ClearVerifiedByDesignation() *PostExamPaperUpdateOne {
	pepuo.mutation.ClearVerifiedByDesignation()
	return pepuo
}

// SetVerifiedDate sets the "VerifiedDate" field.
func (pepuo *PostExamPaperUpdateOne) SetVerifiedDate(t time.Time) *PostExamPaperUpdateOne {
	pepuo.mutation.SetVerifiedDate(t)
	return pepuo
}

// SetNillableVerifiedDate sets the "VerifiedDate" field if the given value is not nil.
func (pepuo *PostExamPaperUpdateOne) SetNillableVerifiedDate(t *time.Time) *PostExamPaperUpdateOne {
	if t != nil {
		pepuo.SetVerifiedDate(*t)
	}
	return pepuo
}

// ClearVerifiedDate clears the value of the "VerifiedDate" field.
func (pepuo *PostExamPaperUpdateOne) ClearVerifiedDate() *PostExamPaperUpdateOne {
	pepuo.mutation.ClearVerifiedDate()
	return pepuo
}

// SetDeletedById sets the "DeletedById" field.
func (pepuo *PostExamPaperUpdateOne) SetDeletedById(i int64) *PostExamPaperUpdateOne {
	pepuo.mutation.ResetDeletedById()
	pepuo.mutation.SetDeletedById(i)
	return pepuo
}

// SetNillableDeletedById sets the "DeletedById" field if the given value is not nil.
func (pepuo *PostExamPaperUpdateOne) SetNillableDeletedById(i *int64) *PostExamPaperUpdateOne {
	if i != nil {
		pepuo.SetDeletedById(*i)
	}
	return pepuo
}

// AddDeletedById adds i to the "DeletedById" field.
func (pepuo *PostExamPaperUpdateOne) AddDeletedById(i int64) *PostExamPaperUpdateOne {
	pepuo.mutation.AddDeletedById(i)
	return pepuo
}

// ClearDeletedById clears the value of the "DeletedById" field.
func (pepuo *PostExamPaperUpdateOne) ClearDeletedById() *PostExamPaperUpdateOne {
	pepuo.mutation.ClearDeletedById()
	return pepuo
}

// SetDeletedByUserName sets the "DeletedByUserName" field.
func (pepuo *PostExamPaperUpdateOne) SetDeletedByUserName(s string) *PostExamPaperUpdateOne {
	pepuo.mutation.SetDeletedByUserName(s)
	return pepuo
}

// SetNillableDeletedByUserName sets the "DeletedByUserName" field if the given value is not nil.
func (pepuo *PostExamPaperUpdateOne) SetNillableDeletedByUserName(s *string) *PostExamPaperUpdateOne {
	if s != nil {
		pepuo.SetDeletedByUserName(*s)
	}
	return pepuo
}

// ClearDeletedByUserName clears the value of the "DeletedByUserName" field.
func (pepuo *PostExamPaperUpdateOne) ClearDeletedByUserName() *PostExamPaperUpdateOne {
	pepuo.mutation.ClearDeletedByUserName()
	return pepuo
}

// SetDeletedByEmployeeId sets the "DeletedByEmployeeId" field.
func (pepuo *PostExamPaperUpdateOne) SetDeletedByEmployeeId(s string) *PostExamPaperUpdateOne {
	pepuo.mutation.SetDeletedByEmployeeId(s)
	return pepuo
}

// SetNillableDeletedByEmployeeId sets the "DeletedByEmployeeId" field if the given value is not nil.
func (pepuo *PostExamPaperUpdateOne) SetNillableDeletedByEmployeeId(s *string) *PostExamPaperUpdateOne {
	if s != nil {
		pepuo.SetDeletedByEmployeeId(*s)
	}
	return pepuo
}

// ClearDeletedByEmployeeId clears the value of the "DeletedByEmployeeId" field.
func (pepuo *PostExamPaperUpdateOne) ClearDeletedByEmployeeId() *PostExamPaperUpdateOne {
	pepuo.mutation.ClearDeletedByEmployeeId()
	return pepuo
}

// SetDeletedByDesignation sets the "DeletedByDesignation" field.
func (pepuo *PostExamPaperUpdateOne) SetDeletedByDesignation(s string) *PostExamPaperUpdateOne {
	pepuo.mutation.SetDeletedByDesignation(s)
	return pepuo
}

// SetNillableDeletedByDesignation sets the "DeletedByDesignation" field if the given value is not nil.
func (pepuo *PostExamPaperUpdateOne) SetNillableDeletedByDesignation(s *string) *PostExamPaperUpdateOne {
	if s != nil {
		pepuo.SetDeletedByDesignation(*s)
	}
	return pepuo
}

// ClearDeletedByDesignation clears the value of the "DeletedByDesignation" field.
func (pepuo *PostExamPaperUpdateOne) ClearDeletedByDesignation() *PostExamPaperUpdateOne {
	pepuo.mutation.ClearDeletedByDesignation()
	return pepuo
}

// SetDeletedDate sets the "DeletedDate" field.
func (pepuo *PostExamPaperUpdateOne) SetDeletedDate(t time.Time) *PostExamPaperUpdateOne {
	pepuo.mutation.SetDeletedDate(t)
	return pepuo
}

// SetNillableDeletedDate sets the "DeletedDate" field if the given value is not nil.
func (pepuo *PostExamPaperUpdateOne) SetNillableDeletedDate(t *time.Time) *PostExamPaperUpdateOne {
	if t != nil {
		pepuo.SetDeletedDate(*t)
	}
	return pepuo
}

// ClearDeletedDate clears the value of the "DeletedDate" field.
func (pepuo *PostExamPaperUpdateOne) ClearDeletedDate() *PostExamPaperUpdateOne {
	pepuo.mutation.ClearDeletedDate()
	return pepuo
}

// Mutation returns the PostExamPaperMutation object of the builder.
func (pepuo *PostExamPaperUpdateOne) Mutation() *PostExamPaperMutation {
	return pepuo.mutation
}

// Where appends a list predicates to the PostExamPaperUpdate builder.
func (pepuo *PostExamPaperUpdateOne) Where(ps ...predicate.PostExamPaper) *PostExamPaperUpdateOne {
	pepuo.mutation.Where(ps...)
	return pepuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (pepuo *PostExamPaperUpdateOne) Select(field string, fields ...string) *PostExamPaperUpdateOne {
	pepuo.fields = append([]string{field}, fields...)
	return pepuo
}

// Save executes the query and returns the updated PostExamPaper entity.
func (pepuo *PostExamPaperUpdateOne) Save(ctx context.Context) (*PostExamPaper, error) {
	return withHooks(ctx, pepuo.sqlSave, pepuo.mutation, pepuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pepuo *PostExamPaperUpdateOne) SaveX(ctx context.Context) *PostExamPaper {
	node, err := pepuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pepuo *PostExamPaperUpdateOne) Exec(ctx context.Context) error {
	_, err := pepuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pepuo *PostExamPaperUpdateOne) ExecX(ctx context.Context) {
	if err := pepuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (pepuo *PostExamPaperUpdateOne) sqlSave(ctx context.Context) (_node *PostExamPaper, err error) {
	_spec := sqlgraph.NewUpdateSpec(postexampaper.Table, postexampaper.Columns, sqlgraph.NewFieldSpec(postexampaper.FieldID, field.TypeInt32))
	id, ok := pepuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "PostExamPaper.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := pepuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, postexampaper.FieldID)
		for _, f := range fields {
			if !postexampaper.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != postexampaper.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := pepuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pepuo.mutation.ExamConfigurationExamCode(); ok {
		_spec.SetField(postexampaper.FieldExamConfigurationExamCode, field.TypeInt32, value)
	}
	if value, ok := pepuo.mutation.AddedExamConfigurationExamCode(); ok {
		_spec.AddField(postexampaper.FieldExamConfigurationExamCode, field.TypeInt32, value)
	}
	if pepuo.mutation.ExamConfigurationExamCodeCleared() {
		_spec.ClearField(postexampaper.FieldExamConfigurationExamCode, field.TypeInt32)
	}
	if value, ok := pepuo.mutation.ExamShortDescription(); ok {
		_spec.SetField(postexampaper.FieldExamShortDescription, field.TypeString, value)
	}
	if pepuo.mutation.ExamShortDescriptionCleared() {
		_spec.ClearField(postexampaper.FieldExamShortDescription, field.TypeString)
	}
	if value, ok := pepuo.mutation.ExamLongDescription(); ok {
		_spec.SetField(postexampaper.FieldExamLongDescription, field.TypeString, value)
	}
	if pepuo.mutation.ExamLongDescriptionCleared() {
		_spec.ClearField(postexampaper.FieldExamLongDescription, field.TypeString)
	}
	if value, ok := pepuo.mutation.ExamPaperCode(); ok {
		_spec.SetField(postexampaper.FieldExamPaperCode, field.TypeString, value)
	}
	if pepuo.mutation.ExamPaperCodeCleared() {
		_spec.ClearField(postexampaper.FieldExamPaperCode, field.TypeString)
	}
	if value, ok := pepuo.mutation.PaperDescription(); ok {
		_spec.SetField(postexampaper.FieldPaperDescription, field.TypeString, value)
	}
	if pepuo.mutation.PaperDescriptionCleared() {
		_spec.ClearField(postexampaper.FieldPaperDescription, field.TypeString)
	}
	if value, ok := pepuo.mutation.EmployeePostPostId(); ok {
		_spec.SetField(postexampaper.FieldEmployeePostPostId, field.TypeString, value)
	}
	if pepuo.mutation.EmployeePostPostIdCleared() {
		_spec.ClearField(postexampaper.FieldEmployeePostPostId, field.TypeString)
	}
	if value, ok := pepuo.mutation.EmployeeGroupGroupId(); ok {
		_spec.SetField(postexampaper.FieldEmployeeGroupGroupId, field.TypeString, value)
	}
	if pepuo.mutation.EmployeeGroupGroupIdCleared() {
		_spec.ClearField(postexampaper.FieldEmployeeGroupGroupId, field.TypeString)
	}
	if value, ok := pepuo.mutation.GroupDescription(); ok {
		_spec.SetField(postexampaper.FieldGroupDescription, field.TypeString, value)
	}
	if pepuo.mutation.GroupDescriptionCleared() {
		_spec.ClearField(postexampaper.FieldGroupDescription, field.TypeString)
	}
	if value, ok := pepuo.mutation.PostCode(); ok {
		_spec.SetField(postexampaper.FieldPostCode, field.TypeString, value)
	}
	if pepuo.mutation.PostCodeCleared() {
		_spec.ClearField(postexampaper.FieldPostCode, field.TypeString)
	}
	if value, ok := pepuo.mutation.PostDescription(); ok {
		_spec.SetField(postexampaper.FieldPostDescription, field.TypeString, value)
	}
	if pepuo.mutation.PostDescriptionCleared() {
		_spec.ClearField(postexampaper.FieldPostDescription, field.TypeString)
	}
	if value, ok := pepuo.mutation.BaseCadre(); ok {
		_spec.SetField(postexampaper.FieldBaseCadre, field.TypeInt, value)
	}
	if value, ok := pepuo.mutation.AddedBaseCadre(); ok {
		_spec.AddField(postexampaper.FieldBaseCadre, field.TypeInt, value)
	}
	if pepuo.mutation.BaseCadreCleared() {
		_spec.ClearField(postexampaper.FieldBaseCadre, field.TypeInt)
	}
	if value, ok := pepuo.mutation.PayLevel(); ok {
		_spec.SetField(postexampaper.FieldPayLevel, field.TypeString, value)
	}
	if pepuo.mutation.PayLevelCleared() {
		_spec.ClearField(postexampaper.FieldPayLevel, field.TypeString)
	}
	if value, ok := pepuo.mutation.Scale(); ok {
		_spec.SetField(postexampaper.FieldScale, field.TypeString, value)
	}
	if pepuo.mutation.ScaleCleared() {
		_spec.ClearField(postexampaper.FieldScale, field.TypeString)
	}
	if value, ok := pepuo.mutation.OrderNumber(); ok {
		_spec.SetField(postexampaper.FieldOrderNumber, field.TypeString, value)
	}
	if pepuo.mutation.OrderNumberCleared() {
		_spec.ClearField(postexampaper.FieldOrderNumber, field.TypeString)
	}
	if value, ok := pepuo.mutation.Status(); ok {
		_spec.SetField(postexampaper.FieldStatus, field.TypeString, value)
	}
	if pepuo.mutation.StatusCleared() {
		_spec.ClearField(postexampaper.FieldStatus, field.TypeString)
	}
	if value, ok := pepuo.mutation.CreatedById(); ok {
		_spec.SetField(postexampaper.FieldCreatedById, field.TypeInt64, value)
	}
	if value, ok := pepuo.mutation.AddedCreatedById(); ok {
		_spec.AddField(postexampaper.FieldCreatedById, field.TypeInt64, value)
	}
	if pepuo.mutation.CreatedByIdCleared() {
		_spec.ClearField(postexampaper.FieldCreatedById, field.TypeInt64)
	}
	if value, ok := pepuo.mutation.CreatedByUserName(); ok {
		_spec.SetField(postexampaper.FieldCreatedByUserName, field.TypeString, value)
	}
	if pepuo.mutation.CreatedByUserNameCleared() {
		_spec.ClearField(postexampaper.FieldCreatedByUserName, field.TypeString)
	}
	if value, ok := pepuo.mutation.CreatedByEmployeeId(); ok {
		_spec.SetField(postexampaper.FieldCreatedByEmployeeId, field.TypeString, value)
	}
	if pepuo.mutation.CreatedByEmployeeIdCleared() {
		_spec.ClearField(postexampaper.FieldCreatedByEmployeeId, field.TypeString)
	}
	if value, ok := pepuo.mutation.CreatedByDesignation(); ok {
		_spec.SetField(postexampaper.FieldCreatedByDesignation, field.TypeString, value)
	}
	if pepuo.mutation.CreatedByDesignationCleared() {
		_spec.ClearField(postexampaper.FieldCreatedByDesignation, field.TypeString)
	}
	if value, ok := pepuo.mutation.CreatedDate(); ok {
		_spec.SetField(postexampaper.FieldCreatedDate, field.TypeTime, value)
	}
	if pepuo.mutation.CreatedDateCleared() {
		_spec.ClearField(postexampaper.FieldCreatedDate, field.TypeTime)
	}
	if value, ok := pepuo.mutation.VerifiedById(); ok {
		_spec.SetField(postexampaper.FieldVerifiedById, field.TypeInt64, value)
	}
	if value, ok := pepuo.mutation.AddedVerifiedById(); ok {
		_spec.AddField(postexampaper.FieldVerifiedById, field.TypeInt64, value)
	}
	if pepuo.mutation.VerifiedByIdCleared() {
		_spec.ClearField(postexampaper.FieldVerifiedById, field.TypeInt64)
	}
	if value, ok := pepuo.mutation.VerifiedByUserName(); ok {
		_spec.SetField(postexampaper.FieldVerifiedByUserName, field.TypeString, value)
	}
	if pepuo.mutation.VerifiedByUserNameCleared() {
		_spec.ClearField(postexampaper.FieldVerifiedByUserName, field.TypeString)
	}
	if value, ok := pepuo.mutation.VerifiedByEmployeeId(); ok {
		_spec.SetField(postexampaper.FieldVerifiedByEmployeeId, field.TypeString, value)
	}
	if pepuo.mutation.VerifiedByEmployeeIdCleared() {
		_spec.ClearField(postexampaper.FieldVerifiedByEmployeeId, field.TypeString)
	}
	if value, ok := pepuo.mutation.VerifiedByDesignation(); ok {
		_spec.SetField(postexampaper.FieldVerifiedByDesignation, field.TypeString, value)
	}
	if pepuo.mutation.VerifiedByDesignationCleared() {
		_spec.ClearField(postexampaper.FieldVerifiedByDesignation, field.TypeString)
	}
	if value, ok := pepuo.mutation.VerifiedDate(); ok {
		_spec.SetField(postexampaper.FieldVerifiedDate, field.TypeTime, value)
	}
	if pepuo.mutation.VerifiedDateCleared() {
		_spec.ClearField(postexampaper.FieldVerifiedDate, field.TypeTime)
	}
	if value, ok := pepuo.mutation.DeletedById(); ok {
		_spec.SetField(postexampaper.FieldDeletedById, field.TypeInt64, value)
	}
	if value, ok := pepuo.mutation.AddedDeletedById(); ok {
		_spec.AddField(postexampaper.FieldDeletedById, field.TypeInt64, value)
	}
	if pepuo.mutation.DeletedByIdCleared() {
		_spec.ClearField(postexampaper.FieldDeletedById, field.TypeInt64)
	}
	if value, ok := pepuo.mutation.DeletedByUserName(); ok {
		_spec.SetField(postexampaper.FieldDeletedByUserName, field.TypeString, value)
	}
	if pepuo.mutation.DeletedByUserNameCleared() {
		_spec.ClearField(postexampaper.FieldDeletedByUserName, field.TypeString)
	}
	if value, ok := pepuo.mutation.DeletedByEmployeeId(); ok {
		_spec.SetField(postexampaper.FieldDeletedByEmployeeId, field.TypeString, value)
	}
	if pepuo.mutation.DeletedByEmployeeIdCleared() {
		_spec.ClearField(postexampaper.FieldDeletedByEmployeeId, field.TypeString)
	}
	if value, ok := pepuo.mutation.DeletedByDesignation(); ok {
		_spec.SetField(postexampaper.FieldDeletedByDesignation, field.TypeString, value)
	}
	if pepuo.mutation.DeletedByDesignationCleared() {
		_spec.ClearField(postexampaper.FieldDeletedByDesignation, field.TypeString)
	}
	if value, ok := pepuo.mutation.DeletedDate(); ok {
		_spec.SetField(postexampaper.FieldDeletedDate, field.TypeTime, value)
	}
	if pepuo.mutation.DeletedDateCleared() {
		_spec.ClearField(postexampaper.FieldDeletedDate, field.TypeTime)
	}
	_node = &PostExamPaper{config: pepuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pepuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{postexampaper.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	pepuo.mutation.done = true
	return _node, nil
}
