// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"recruit/ent/exam"
	"recruit/ent/examtype"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ExamTypeCreate is the builder for creating a ExamType entity.
type ExamTypeCreate struct {
	config
	mutation *ExamTypeMutation
	hooks    []Hook
}

// SetExamType sets the "ExamType" field.
func (etc *ExamTypeCreate) SetExamType(s string) *ExamTypeCreate {
	etc.mutation.SetExamType(s)
	return etc
}

// SetStatus sets the "Status" field.
func (etc *ExamTypeCreate) SetStatus(s string) *ExamTypeCreate {
	etc.mutation.SetStatus(s)
	return etc
}

// SetExamCode sets the "ExamCode" field.
func (etc *ExamTypeCreate) SetExamCode(i int32) *ExamTypeCreate {
	etc.mutation.SetExamCode(i)
	return etc
}

// SetNillableExamCode sets the "ExamCode" field if the given value is not nil.
func (etc *ExamTypeCreate) SetNillableExamCode(i *int32) *ExamTypeCreate {
	if i != nil {
		etc.SetExamCode(*i)
	}
	return etc
}

// SetID sets the "id" field.
func (etc *ExamTypeCreate) SetID(i int32) *ExamTypeCreate {
	etc.mutation.SetID(i)
	return etc
}

// SetExamID sets the "exam" edge to the Exam entity by ID.
func (etc *ExamTypeCreate) SetExamID(id int32) *ExamTypeCreate {
	etc.mutation.SetExamID(id)
	return etc
}

// SetNillableExamID sets the "exam" edge to the Exam entity by ID if the given value is not nil.
func (etc *ExamTypeCreate) SetNillableExamID(id *int32) *ExamTypeCreate {
	if id != nil {
		etc = etc.SetExamID(*id)
	}
	return etc
}

// SetExam sets the "exam" edge to the Exam entity.
func (etc *ExamTypeCreate) SetExam(e *Exam) *ExamTypeCreate {
	return etc.SetExamID(e.ID)
}

// Mutation returns the ExamTypeMutation object of the builder.
func (etc *ExamTypeCreate) Mutation() *ExamTypeMutation {
	return etc.mutation
}

// Save creates the ExamType in the database.
func (etc *ExamTypeCreate) Save(ctx context.Context) (*ExamType, error) {
	return withHooks(ctx, etc.sqlSave, etc.mutation, etc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (etc *ExamTypeCreate) SaveX(ctx context.Context) *ExamType {
	v, err := etc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (etc *ExamTypeCreate) Exec(ctx context.Context) error {
	_, err := etc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (etc *ExamTypeCreate) ExecX(ctx context.Context) {
	if err := etc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (etc *ExamTypeCreate) check() error {
	if _, ok := etc.mutation.ExamType(); !ok {
		return &ValidationError{Name: "ExamType", err: errors.New(`ent: missing required field "ExamType.ExamType"`)}
	}
	if _, ok := etc.mutation.Status(); !ok {
		return &ValidationError{Name: "Status", err: errors.New(`ent: missing required field "ExamType.Status"`)}
	}
	return nil
}

func (etc *ExamTypeCreate) sqlSave(ctx context.Context) (*ExamType, error) {
	if err := etc.check(); err != nil {
		return nil, err
	}
	_node, _spec := etc.createSpec()
	if err := sqlgraph.CreateNode(ctx, etc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int32(id)
	}
	etc.mutation.id = &_node.ID
	etc.mutation.done = true
	return _node, nil
}

func (etc *ExamTypeCreate) createSpec() (*ExamType, *sqlgraph.CreateSpec) {
	var (
		_node = &ExamType{config: etc.config}
		_spec = sqlgraph.NewCreateSpec(examtype.Table, sqlgraph.NewFieldSpec(examtype.FieldID, field.TypeInt32))
	)
	if id, ok := etc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := etc.mutation.ExamType(); ok {
		_spec.SetField(examtype.FieldExamType, field.TypeString, value)
		_node.ExamType = value
	}
	if value, ok := etc.mutation.Status(); ok {
		_spec.SetField(examtype.FieldStatus, field.TypeString, value)
		_node.Status = value
	}
	if nodes := etc.mutation.ExamIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   examtype.ExamTable,
			Columns: []string{examtype.ExamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ExamCode = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ExamTypeCreateBulk is the builder for creating many ExamType entities in bulk.
type ExamTypeCreateBulk struct {
	config
	builders []*ExamTypeCreate
}

// Save creates the ExamType entities in the database.
func (etcb *ExamTypeCreateBulk) Save(ctx context.Context) ([]*ExamType, error) {
	specs := make([]*sqlgraph.CreateSpec, len(etcb.builders))
	nodes := make([]*ExamType, len(etcb.builders))
	mutators := make([]Mutator, len(etcb.builders))
	for i := range etcb.builders {
		func(i int, root context.Context) {
			builder := etcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ExamTypeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, etcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, etcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, etcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (etcb *ExamTypeCreateBulk) SaveX(ctx context.Context) []*ExamType {
	v, err := etcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (etcb *ExamTypeCreateBulk) Exec(ctx context.Context) error {
	_, err := etcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (etcb *ExamTypeCreateBulk) ExecX(ctx context.Context) {
	if err := etcb.Exec(ctx); err != nil {
		panic(err)
	}
}
