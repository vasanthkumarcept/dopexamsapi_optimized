// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"recruit/ent/categorymininummarkmapping"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// CategoryMininumMarkMapping is the model entity for the CategoryMininumMarkMapping schema.
type CategoryMininumMarkMapping struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// ExamCode holds the value of the "ExamCode" field.
	ExamCode int64 `json:"ExamCode,omitempty"`
	// ExamName holds the value of the "ExamName" field.
	ExamName string `json:"ExamName,omitempty"`
	// ExamShortName holds the value of the "ExamShortName" field.
	ExamShortName string `json:"ExamShortName,omitempty"`
	// PaperCode holds the value of the "PaperCode" field.
	PaperCode int64 `json:"PaperCode,omitempty"`
	// PaperDescription holds the value of the "PaperDescription" field.
	PaperDescription string `json:"PaperDescription,omitempty"`
	// DisabilityTypeID holds the value of the "DisabilityTypeID" field.
	DisabilityTypeID int64 `json:"DisabilityTypeID,omitempty"`
	// DisabilityTypeCode holds the value of the "DisabilityTypeCode" field.
	DisabilityTypeCode string `json:"DisabilityTypeCode,omitempty"`
	// DisabilityTypeDescription holds the value of the "DisabilityTypeDescription" field.
	DisabilityTypeDescription string `json:"DisabilityTypeDescription,omitempty"`
	// MinimumMarks holds the value of the "minimumMarks" field.
	MinimumMarks int64 `json:"minimumMarks,omitempty"`
	// OrderNumber holds the value of the "OrderNumber" field.
	OrderNumber string `json:"OrderNumber,omitempty"`
	// CreatedById holds the value of the "CreatedById" field.
	CreatedById int64 `json:"CreatedById,omitempty"`
	// CreatedByUserName holds the value of the "CreatedByUserName" field.
	CreatedByUserName string `json:"CreatedByUserName,omitempty"`
	// CreatedByEmpId holds the value of the "CreatedByEmpId" field.
	CreatedByEmpId int64 `json:"CreatedByEmpId,omitempty"`
	// CreatedByDesignation holds the value of the "CreatedByDesignation" field.
	CreatedByDesignation string `json:"CreatedByDesignation,omitempty"`
	// CreatedDate holds the value of the "CreatedDate" field.
	CreatedDate time.Time `json:"CreatedDate,omitempty"`
	// Verifiedbyid holds the value of the "verifiedbyid" field.
	Verifiedbyid int64 `json:"verifiedbyid,omitempty"`
	// Verifiedbyusername holds the value of the "verifiedbyusername" field.
	Verifiedbyusername string `json:"verifiedbyusername,omitempty"`
	// VerifiedbyEmployeeid holds the value of the "verifiedbyEmployeeid" field.
	VerifiedbyEmployeeid int64 `json:"verifiedbyEmployeeid,omitempty"`
	// VerifiedbyDesignation holds the value of the "verifiedbyDesignation" field.
	VerifiedbyDesignation string `json:"verifiedbyDesignation,omitempty"`
	// VerifiedDate holds the value of the "verifiedDate" field.
	VerifiedDate time.Time `json:"verifiedDate,omitempty"`
	// Statuss holds the value of the "Statuss" field.
	Statuss string `json:"Statuss,omitempty"`
	// Deletedbyid holds the value of the "deletedbyid" field.
	Deletedbyid int64 `json:"deletedbyid,omitempty"`
	// Deletedbyusername holds the value of the "deletedbyusername" field.
	Deletedbyusername string `json:"deletedbyusername,omitempty"`
	// DeletedbyEmployeeid holds the value of the "deletedbyEmployeeid" field.
	DeletedbyEmployeeid int64 `json:"deletedbyEmployeeid,omitempty"`
	// DeletedbyDesignation holds the value of the "deletedbyDesignation" field.
	DeletedbyDesignation string `json:"deletedbyDesignation,omitempty"`
	// DeletedDate holds the value of the "deletedDate" field.
	DeletedDate time.Time `json:"deletedDate,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CategoryMininumMarkMappingQuery when eager-loading is set.
	Edges        CategoryMininumMarkMappingEdges `json:"edges"`
	selectValues sql.SelectValues
}

// CategoryMininumMarkMappingEdges holds the relations/edges for other nodes in the graph.
type CategoryMininumMarkMappingEdges struct {
	// LogData holds the value of the LogData edge.
	LogData []*Logs `json:"LogData,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// LogDataOrErr returns the LogData value or an error if the edge
// was not loaded in eager-loading.
func (e CategoryMininumMarkMappingEdges) LogDataOrErr() ([]*Logs, error) {
	if e.loadedTypes[0] {
		return e.LogData, nil
	}
	return nil, &NotLoadedError{edge: "LogData"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CategoryMininumMarkMapping) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case categorymininummarkmapping.FieldID, categorymininummarkmapping.FieldExamCode, categorymininummarkmapping.FieldPaperCode, categorymininummarkmapping.FieldDisabilityTypeID, categorymininummarkmapping.FieldMinimumMarks, categorymininummarkmapping.FieldCreatedById, categorymininummarkmapping.FieldCreatedByEmpId, categorymininummarkmapping.FieldVerifiedbyid, categorymininummarkmapping.FieldVerifiedbyEmployeeid, categorymininummarkmapping.FieldDeletedbyid, categorymininummarkmapping.FieldDeletedbyEmployeeid:
			values[i] = new(sql.NullInt64)
		case categorymininummarkmapping.FieldExamName, categorymininummarkmapping.FieldExamShortName, categorymininummarkmapping.FieldPaperDescription, categorymininummarkmapping.FieldDisabilityTypeCode, categorymininummarkmapping.FieldDisabilityTypeDescription, categorymininummarkmapping.FieldOrderNumber, categorymininummarkmapping.FieldCreatedByUserName, categorymininummarkmapping.FieldCreatedByDesignation, categorymininummarkmapping.FieldVerifiedbyusername, categorymininummarkmapping.FieldVerifiedbyDesignation, categorymininummarkmapping.FieldStatuss, categorymininummarkmapping.FieldDeletedbyusername, categorymininummarkmapping.FieldDeletedbyDesignation:
			values[i] = new(sql.NullString)
		case categorymininummarkmapping.FieldCreatedDate, categorymininummarkmapping.FieldVerifiedDate, categorymininummarkmapping.FieldDeletedDate:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CategoryMininumMarkMapping fields.
func (cmmm *CategoryMininumMarkMapping) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case categorymininummarkmapping.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			cmmm.ID = int64(value.Int64)
		case categorymininummarkmapping.FieldExamCode:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field ExamCode", values[i])
			} else if value.Valid {
				cmmm.ExamCode = value.Int64
			}
		case categorymininummarkmapping.FieldExamName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ExamName", values[i])
			} else if value.Valid {
				cmmm.ExamName = value.String
			}
		case categorymininummarkmapping.FieldExamShortName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ExamShortName", values[i])
			} else if value.Valid {
				cmmm.ExamShortName = value.String
			}
		case categorymininummarkmapping.FieldPaperCode:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field PaperCode", values[i])
			} else if value.Valid {
				cmmm.PaperCode = value.Int64
			}
		case categorymininummarkmapping.FieldPaperDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field PaperDescription", values[i])
			} else if value.Valid {
				cmmm.PaperDescription = value.String
			}
		case categorymininummarkmapping.FieldDisabilityTypeID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field DisabilityTypeID", values[i])
			} else if value.Valid {
				cmmm.DisabilityTypeID = value.Int64
			}
		case categorymininummarkmapping.FieldDisabilityTypeCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field DisabilityTypeCode", values[i])
			} else if value.Valid {
				cmmm.DisabilityTypeCode = value.String
			}
		case categorymininummarkmapping.FieldDisabilityTypeDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field DisabilityTypeDescription", values[i])
			} else if value.Valid {
				cmmm.DisabilityTypeDescription = value.String
			}
		case categorymininummarkmapping.FieldMinimumMarks:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field minimumMarks", values[i])
			} else if value.Valid {
				cmmm.MinimumMarks = value.Int64
			}
		case categorymininummarkmapping.FieldOrderNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field OrderNumber", values[i])
			} else if value.Valid {
				cmmm.OrderNumber = value.String
			}
		case categorymininummarkmapping.FieldCreatedById:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field CreatedById", values[i])
			} else if value.Valid {
				cmmm.CreatedById = value.Int64
			}
		case categorymininummarkmapping.FieldCreatedByUserName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field CreatedByUserName", values[i])
			} else if value.Valid {
				cmmm.CreatedByUserName = value.String
			}
		case categorymininummarkmapping.FieldCreatedByEmpId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field CreatedByEmpId", values[i])
			} else if value.Valid {
				cmmm.CreatedByEmpId = value.Int64
			}
		case categorymininummarkmapping.FieldCreatedByDesignation:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field CreatedByDesignation", values[i])
			} else if value.Valid {
				cmmm.CreatedByDesignation = value.String
			}
		case categorymininummarkmapping.FieldCreatedDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field CreatedDate", values[i])
			} else if value.Valid {
				cmmm.CreatedDate = value.Time
			}
		case categorymininummarkmapping.FieldVerifiedbyid:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field verifiedbyid", values[i])
			} else if value.Valid {
				cmmm.Verifiedbyid = value.Int64
			}
		case categorymininummarkmapping.FieldVerifiedbyusername:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field verifiedbyusername", values[i])
			} else if value.Valid {
				cmmm.Verifiedbyusername = value.String
			}
		case categorymininummarkmapping.FieldVerifiedbyEmployeeid:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field verifiedbyEmployeeid", values[i])
			} else if value.Valid {
				cmmm.VerifiedbyEmployeeid = value.Int64
			}
		case categorymininummarkmapping.FieldVerifiedbyDesignation:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field verifiedbyDesignation", values[i])
			} else if value.Valid {
				cmmm.VerifiedbyDesignation = value.String
			}
		case categorymininummarkmapping.FieldVerifiedDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field verifiedDate", values[i])
			} else if value.Valid {
				cmmm.VerifiedDate = value.Time
			}
		case categorymininummarkmapping.FieldStatuss:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Statuss", values[i])
			} else if value.Valid {
				cmmm.Statuss = value.String
			}
		case categorymininummarkmapping.FieldDeletedbyid:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deletedbyid", values[i])
			} else if value.Valid {
				cmmm.Deletedbyid = value.Int64
			}
		case categorymininummarkmapping.FieldDeletedbyusername:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field deletedbyusername", values[i])
			} else if value.Valid {
				cmmm.Deletedbyusername = value.String
			}
		case categorymininummarkmapping.FieldDeletedbyEmployeeid:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deletedbyEmployeeid", values[i])
			} else if value.Valid {
				cmmm.DeletedbyEmployeeid = value.Int64
			}
		case categorymininummarkmapping.FieldDeletedbyDesignation:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field deletedbyDesignation", values[i])
			} else if value.Valid {
				cmmm.DeletedbyDesignation = value.String
			}
		case categorymininummarkmapping.FieldDeletedDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deletedDate", values[i])
			} else if value.Valid {
				cmmm.DeletedDate = value.Time
			}
		default:
			cmmm.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the CategoryMininumMarkMapping.
// This includes values selected through modifiers, order, etc.
func (cmmm *CategoryMininumMarkMapping) Value(name string) (ent.Value, error) {
	return cmmm.selectValues.Get(name)
}

// QueryLogData queries the "LogData" edge of the CategoryMininumMarkMapping entity.
func (cmmm *CategoryMininumMarkMapping) QueryLogData() *LogsQuery {
	return NewCategoryMininumMarkMappingClient(cmmm.config).QueryLogData(cmmm)
}

// Update returns a builder for updating this CategoryMininumMarkMapping.
// Note that you need to call CategoryMininumMarkMapping.Unwrap() before calling this method if this CategoryMininumMarkMapping
// was returned from a transaction, and the transaction was committed or rolled back.
func (cmmm *CategoryMininumMarkMapping) Update() *CategoryMininumMarkMappingUpdateOne {
	return NewCategoryMininumMarkMappingClient(cmmm.config).UpdateOne(cmmm)
}

// Unwrap unwraps the CategoryMininumMarkMapping entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (cmmm *CategoryMininumMarkMapping) Unwrap() *CategoryMininumMarkMapping {
	_tx, ok := cmmm.config.driver.(*txDriver)
	if !ok {
		panic("ent: CategoryMininumMarkMapping is not a transactional entity")
	}
	cmmm.config.driver = _tx.drv
	return cmmm
}

// String implements the fmt.Stringer.
func (cmmm *CategoryMininumMarkMapping) String() string {
	var builder strings.Builder
	builder.WriteString("CategoryMininumMarkMapping(")
	builder.WriteString(fmt.Sprintf("id=%v, ", cmmm.ID))
	builder.WriteString("ExamCode=")
	builder.WriteString(fmt.Sprintf("%v", cmmm.ExamCode))
	builder.WriteString(", ")
	builder.WriteString("ExamName=")
	builder.WriteString(cmmm.ExamName)
	builder.WriteString(", ")
	builder.WriteString("ExamShortName=")
	builder.WriteString(cmmm.ExamShortName)
	builder.WriteString(", ")
	builder.WriteString("PaperCode=")
	builder.WriteString(fmt.Sprintf("%v", cmmm.PaperCode))
	builder.WriteString(", ")
	builder.WriteString("PaperDescription=")
	builder.WriteString(cmmm.PaperDescription)
	builder.WriteString(", ")
	builder.WriteString("DisabilityTypeID=")
	builder.WriteString(fmt.Sprintf("%v", cmmm.DisabilityTypeID))
	builder.WriteString(", ")
	builder.WriteString("DisabilityTypeCode=")
	builder.WriteString(cmmm.DisabilityTypeCode)
	builder.WriteString(", ")
	builder.WriteString("DisabilityTypeDescription=")
	builder.WriteString(cmmm.DisabilityTypeDescription)
	builder.WriteString(", ")
	builder.WriteString("minimumMarks=")
	builder.WriteString(fmt.Sprintf("%v", cmmm.MinimumMarks))
	builder.WriteString(", ")
	builder.WriteString("OrderNumber=")
	builder.WriteString(cmmm.OrderNumber)
	builder.WriteString(", ")
	builder.WriteString("CreatedById=")
	builder.WriteString(fmt.Sprintf("%v", cmmm.CreatedById))
	builder.WriteString(", ")
	builder.WriteString("CreatedByUserName=")
	builder.WriteString(cmmm.CreatedByUserName)
	builder.WriteString(", ")
	builder.WriteString("CreatedByEmpId=")
	builder.WriteString(fmt.Sprintf("%v", cmmm.CreatedByEmpId))
	builder.WriteString(", ")
	builder.WriteString("CreatedByDesignation=")
	builder.WriteString(cmmm.CreatedByDesignation)
	builder.WriteString(", ")
	builder.WriteString("CreatedDate=")
	builder.WriteString(cmmm.CreatedDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("verifiedbyid=")
	builder.WriteString(fmt.Sprintf("%v", cmmm.Verifiedbyid))
	builder.WriteString(", ")
	builder.WriteString("verifiedbyusername=")
	builder.WriteString(cmmm.Verifiedbyusername)
	builder.WriteString(", ")
	builder.WriteString("verifiedbyEmployeeid=")
	builder.WriteString(fmt.Sprintf("%v", cmmm.VerifiedbyEmployeeid))
	builder.WriteString(", ")
	builder.WriteString("verifiedbyDesignation=")
	builder.WriteString(cmmm.VerifiedbyDesignation)
	builder.WriteString(", ")
	builder.WriteString("verifiedDate=")
	builder.WriteString(cmmm.VerifiedDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("Statuss=")
	builder.WriteString(cmmm.Statuss)
	builder.WriteString(", ")
	builder.WriteString("deletedbyid=")
	builder.WriteString(fmt.Sprintf("%v", cmmm.Deletedbyid))
	builder.WriteString(", ")
	builder.WriteString("deletedbyusername=")
	builder.WriteString(cmmm.Deletedbyusername)
	builder.WriteString(", ")
	builder.WriteString("deletedbyEmployeeid=")
	builder.WriteString(fmt.Sprintf("%v", cmmm.DeletedbyEmployeeid))
	builder.WriteString(", ")
	builder.WriteString("deletedbyDesignation=")
	builder.WriteString(cmmm.DeletedbyDesignation)
	builder.WriteString(", ")
	builder.WriteString("deletedDate=")
	builder.WriteString(cmmm.DeletedDate.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// CategoryMininumMarkMappings is a parsable slice of CategoryMininumMarkMapping.
type CategoryMininumMarkMappings []*CategoryMininumMarkMapping
