// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"recruit/ent/center"
	"recruit/ent/circlesummaryforno"
	"recruit/ent/exam"
	"recruit/ent/exam_applications_gdspm"
	"recruit/ent/examcitycenter"
	"recruit/ent/rolemaster"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Exam_Applications_GDSPM is the model entity for the Exam_Applications_GDSPM schema.
type Exam_Applications_GDSPM struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// ApplicationNumber holds the value of the "ApplicationNumber" field.
	ApplicationNumber string `json:"ApplicationNumber,omitempty"`
	// ApplnSubmittedDate holds the value of the "ApplnSubmittedDate" field.
	ApplnSubmittedDate time.Time `json:"ApplnSubmittedDate,omitempty"`
	// ExamCode holds the value of the "ExamCode" field.
	ExamCode int32 `json:"ExamCode,omitempty"`
	// ExamShortName holds the value of the "ExamShortName" field.
	ExamShortName string `json:"ExamShortName,omitempty"`
	// ExamName holds the value of the "ExamName" field.
	ExamName string `json:"ExamName,omitempty"`
	// SmsExamShortName holds the value of the "SmsExamShortName" field.
	SmsExamShortName string `json:"SmsExamShortName,omitempty"`
	// ExamYear holds the value of the "ExamYear" field.
	ExamYear string `json:"ExamYear,omitempty"`
	// UserID holds the value of the "UserID" field.
	UserID int32 `json:"UserID,omitempty"`
	// EmployeeID holds the value of the "EmployeeID" field.
	EmployeeID int64 `json:"EmployeeID,omitempty"`
	// EmployeeName holds the value of the "EmployeeName" field.
	EmployeeName string `json:"EmployeeName,omitempty"`
	// DOB holds the value of the "DOB" field.
	DOB string `json:"DOB,omitempty"`
	// Gender holds the value of the "Gender" field.
	Gender string `json:"Gender,omitempty"`
	// MobileNumber holds the value of the "MobileNumber" field.
	MobileNumber string `json:"MobileNumber,omitempty"`
	// EmailID holds the value of the "EmailID" field.
	EmailID string `json:"EmailID,omitempty"`
	// CategoryCode holds the value of the "CategoryCode" field.
	CategoryCode string `json:"CategoryCode,omitempty"`
	// CategoryDescription holds the value of the "CategoryDescription" field.
	CategoryDescription string `json:"CategoryDescription,omitempty"`
	// DisabilityTypeID holds the value of the "DisabilityTypeID" field.
	DisabilityTypeID string `json:"DisabilityTypeID,omitempty"`
	// DisabilityTypeCode holds the value of the "DisabilityTypeCode" field.
	DisabilityTypeCode string `json:"DisabilityTypeCode,omitempty"`
	// DisabilityTypeDescription holds the value of the "DisabilityTypeDescription" field.
	DisabilityTypeDescription string `json:"DisabilityTypeDescription,omitempty"`
	// DisabilityPercentage holds the value of the "DisabilityPercentage" field.
	DisabilityPercentage int32 `json:"DisabilityPercentage,omitempty"`
	// DCCS holds the value of the "DCCS" field.
	DCCS string `json:"DCCS,omitempty"`
	// EntryPostCode holds the value of the "EntryPostCode" field.
	EntryPostCode string `json:"EntryPostCode,omitempty"`
	// EntryPostDescription holds the value of the "EntryPostDescription" field.
	EntryPostDescription string `json:"EntryPostDescription,omitempty"`
	// PresentPostCode holds the value of the "PresentPostCode" field.
	PresentPostCode string `json:"PresentPostCode,omitempty"`
	// PresentPostDescription holds the value of the "PresentPostDescription" field.
	PresentPostDescription string `json:"PresentPostDescription,omitempty"`
	// FeederPostCode holds the value of the "FeederPostCode" field.
	FeederPostCode string `json:"FeederPostCode,omitempty"`
	// FeederPostDescription holds the value of the "FeederPostDescription" field.
	FeederPostDescription string `json:"FeederPostDescription,omitempty"`
	// FeederPostJoiningDate holds the value of the "FeederPostJoiningDate" field.
	FeederPostJoiningDate string `json:"FeederPostJoiningDate,omitempty"`
	// DesignationID holds the value of the "DesignationID" field.
	DesignationID string `json:"DesignationID,omitempty"`
	// PresentDesignation holds the value of the "PresentDesignation" field.
	PresentDesignation string `json:"PresentDesignation,omitempty"`
	// EducationCode holds the value of the "EducationCode" field.
	EducationCode string `json:"EducationCode,omitempty"`
	// EducationDescription holds the value of the "EducationDescription" field.
	EducationDescription string `json:"EducationDescription,omitempty"`
	// FacilityUniqueID holds the value of the "FacilityUniqueID" field.
	FacilityUniqueID string `json:"FacilityUniqueID,omitempty"`
	// WorkingOfficePincode holds the value of the "WorkingOfficePincode" field.
	WorkingOfficePincode int32 `json:"WorkingOfficePincode,omitempty"`
	// WorkingOfficeFacilityID holds the value of the "WorkingOfficeFacilityID" field.
	WorkingOfficeFacilityID string `json:"WorkingOfficeFacilityID,omitempty"`
	// WorkingOfficeName holds the value of the "WorkingOfficeName" field.
	WorkingOfficeName string `json:"WorkingOfficeName,omitempty"`
	// WorkingOfficeCircleFacilityID holds the value of the "WorkingOfficeCircleFacilityID" field.
	WorkingOfficeCircleFacilityID string `json:"WorkingOfficeCircleFacilityID,omitempty"`
	// WorkingOfficeCircleName holds the value of the "WorkingOfficeCircleName" field.
	WorkingOfficeCircleName string `json:"WorkingOfficeCircleName,omitempty"`
	// WorkingOfficeRegionFacilityID holds the value of the "WorkingOfficeRegionFacilityID" field.
	WorkingOfficeRegionFacilityID string `json:"WorkingOfficeRegionFacilityID,omitempty"`
	// WorkingOfficeRegionName holds the value of the "WorkingOfficeRegionName" field.
	WorkingOfficeRegionName string `json:"WorkingOfficeRegionName,omitempty"`
	// WorkingOfficeDivisionFacilityID holds the value of the "WorkingOfficeDivisionFacilityID" field.
	WorkingOfficeDivisionFacilityID string `json:"WorkingOfficeDivisionFacilityID,omitempty"`
	// WorkingOfficeDivisionName holds the value of the "WorkingOfficeDivisionName" field.
	WorkingOfficeDivisionName string `json:"WorkingOfficeDivisionName,omitempty"`
	// ReportingOfficeFacilityID holds the value of the "ReportingOfficeFacilityID" field.
	ReportingOfficeFacilityID string `json:"ReportingOfficeFacilityID,omitempty"`
	// ReportingOfficeName holds the value of the "ReportingOfficeName" field.
	ReportingOfficeName string `json:"ReportingOfficeName,omitempty"`
	// LienControllingOfficeID holds the value of the "LienControllingOfficeID" field.
	LienControllingOfficeID string `json:"LienControllingOfficeID,omitempty"`
	// LienControllingOfficeName holds the value of the "LienControllingOfficeName" field.
	LienControllingOfficeName string `json:"LienControllingOfficeName,omitempty"`
	// InDeputation holds the value of the "InDeputation" field.
	InDeputation string `json:"InDeputation,omitempty"`
	// DeputationType holds the value of the "DeputationType" field.
	DeputationType string `json:"DeputationType,omitempty"`
	// DeputationOfficeUniqueId holds the value of the "DeputationOfficeUniqueId" field.
	DeputationOfficeUniqueId string `json:"DeputationOfficeUniqueId,omitempty"`
	// DeputationOfficeFacilityID holds the value of the "DeputationOfficeFacilityID" field.
	DeputationOfficeFacilityID string `json:"DeputationOfficeFacilityID,omitempty"`
	// DeputationOfficeName holds the value of the "DeputationOfficeName" field.
	DeputationOfficeName string `json:"DeputationOfficeName,omitempty"`
	// DeputationControllingOfficeID holds the value of the "DeputationControllingOfficeID" field.
	DeputationControllingOfficeID string `json:"DeputationControllingOfficeID,omitempty"`
	// DeputationControllingOfficeName holds the value of the "DeputationControllingOfficeName" field.
	DeputationControllingOfficeName string `json:"DeputationControllingOfficeName,omitempty"`
	// ControllingOfficeFacilityID holds the value of the "ControllingOfficeFacilityID" field.
	ControllingOfficeFacilityID string `json:"ControllingOfficeFacilityID,omitempty"`
	// ControllingOfficeName holds the value of the "ControllingOfficeName" field.
	ControllingOfficeName string `json:"ControllingOfficeName,omitempty"`
	// NodalOfficeFacilityID holds the value of the "NodalOfficeFacilityID" field.
	NodalOfficeFacilityID string `json:"NodalOfficeFacilityID,omitempty"`
	// NodalOfficeName holds the value of the "NodalOfficeName" field.
	NodalOfficeName string `json:"NodalOfficeName,omitempty"`
	// SubdivisionOfficeFacilityID holds the value of the "SubdivisionOfficeFacilityID" field.
	SubdivisionOfficeFacilityID string `json:"SubdivisionOfficeFacilityID,omitempty"`
	// SubdivisionOfficeName holds the value of the "SubdivisionOfficeName" field.
	SubdivisionOfficeName string `json:"SubdivisionOfficeName,omitempty"`
	// ExamCityCenterCode holds the value of the "ExamCityCenterCode" field.
	ExamCityCenterCode int32 `json:"ExamCityCenterCode,omitempty"`
	// CenterFacilityId holds the value of the "CenterFacilityId" field.
	CenterFacilityId string `json:"CenterFacilityId,omitempty"`
	// CentrePreference holds the value of the "CentrePreference" field.
	CentrePreference string `json:"CentrePreference,omitempty"`
	// Signature holds the value of the "Signature" field.
	Signature string `json:"Signature,omitempty"`
	// Photo holds the value of the "Photo" field.
	Photo string `json:"Photo,omitempty"`
	// CandidatePhoto holds the value of the "CandidatePhoto" field.
	CandidatePhoto []byte `json:"CandidatePhoto,omitempty"`
	// CandidateSignature holds the value of the "CandidateSignature" field.
	CandidateSignature []byte `json:"CandidateSignature,omitempty"`
	// SignaturePath holds the value of the "SignaturePath" field.
	SignaturePath string `json:"SignaturePath,omitempty"`
	// PhotoPath holds the value of the "PhotoPath" field.
	PhotoPath string `json:"PhotoPath,omitempty"`
	// TempHallTicket holds the value of the "TempHallTicket" field.
	TempHallTicket string `json:"TempHallTicket,omitempty"`
	// CandidateRemarks holds the value of the "CandidateRemarks" field.
	CandidateRemarks string `json:"CandidateRemarks,omitempty"`
	// VAGeneralRemarks holds the value of the "VAGeneralRemarks" field.
	VAGeneralRemarks string `json:"VAGeneralRemarks,omitempty"`
	// CAGeneralRemarks holds the value of the "CAGeneralRemarks" field.
	CAGeneralRemarks string `json:"CAGeneralRemarks,omitempty"`
	// NAGeneralRemarks holds the value of the "NAGeneralRemarks" field.
	NAGeneralRemarks string `json:"NAGeneralRemarks,omitempty"`
	// ApplicationStatus holds the value of the "ApplicationStatus" field.
	ApplicationStatus string `json:"ApplicationStatus,omitempty"`
	// Status holds the value of the "Status" field.
	Status string `json:"Status,omitempty"`
	// RecommendedStatus holds the value of the "RecommendedStatus" field.
	RecommendedStatus string `json:"RecommendedStatus,omitempty"`
	// ApplicationWdlDate holds the value of the "ApplicationWdlDate" field.
	ApplicationWdlDate time.Time `json:"ApplicationWdlDate,omitempty"`
	// VAUserId holds the value of the "VA_UserId" field.
	VAUserId int32 `json:"VA_UserId,omitempty"`
	// VAUserName holds the value of the "VA_UserName" field.
	VAUserName string `json:"VA_UserName,omitempty"`
	// VAEmployeeID holds the value of the "VA_EmployeeID" field.
	VAEmployeeID string `json:"VA_EmployeeID,omitempty"`
	// VAEmployeeDesignation holds the value of the "VA_EmployeeDesignation" field.
	VAEmployeeDesignation string `json:"VA_EmployeeDesignation,omitempty"`
	// VARemarks holds the value of the "VA_Remarks" field.
	VARemarks string `json:"VA_Remarks,omitempty"`
	// VADate holds the value of the "VA_Date" field.
	VADate time.Time `json:"VA_Date,omitempty"`
	// CAUserId holds the value of the "CA_UserId" field.
	CAUserId int32 `json:"CA_UserId,omitempty"`
	// CAUserName holds the value of the "CA_UserName" field.
	CAUserName string `json:"CA_UserName,omitempty"`
	// CAEmployeeID holds the value of the "CA_EmployeeID" field.
	CAEmployeeID string `json:"CA_EmployeeID,omitempty"`
	// CAEmployeeDesignation holds the value of the "CA_EmployeeDesignation" field.
	CAEmployeeDesignation string `json:"CA_EmployeeDesignation,omitempty"`
	// CARemarks holds the value of the "CA_Remarks" field.
	CARemarks string `json:"CA_Remarks,omitempty"`
	// CADate holds the value of the "CA_Date" field.
	CADate time.Time `json:"CA_Date,omitempty"`
	// NAUserId holds the value of the "NA_UserId" field.
	NAUserId int32 `json:"NA_UserId,omitempty"`
	// NAUserName holds the value of the "NA_UserName" field.
	NAUserName string `json:"NA_UserName,omitempty"`
	// NAEmployeeID holds the value of the "NA_EmployeeID" field.
	NAEmployeeID string `json:"NA_EmployeeID,omitempty"`
	// NAEmployeeDesignation holds the value of the "NA_EmployeeDesignation" field.
	NAEmployeeDesignation string `json:"NA_EmployeeDesignation,omitempty"`
	// NARemarks holds the value of the "NA_Remarks" field.
	NARemarks string `json:"NA_Remarks,omitempty"`
	// NADate holds the value of the "NA_Date" field.
	NADate time.Time `json:"NA_Date,omitempty"`
	// AppliactionRemarks holds the value of the "AppliactionRemarks" field.
	AppliactionRemarks string `json:"AppliactionRemarks,omitempty"`
	// CadrePreferences holds the value of the "CadrePreferences" field.
	CadrePreferences []interface{} `json:"CadrePreferences,omitempty"`
	// CAPreviousRemarks holds the value of the "CAPreviousRemarks" field.
	CAPreviousRemarks string `json:"CAPreviousRemarks,omitempty"`
	// PunishmentStatus holds the value of the "PunishmentStatus" field.
	PunishmentStatus bool `json:"PunishmentStatus,omitempty"`
	// DisciplinaryCaseStatus holds the value of the "DisciplinaryCaseStatus" field.
	DisciplinaryCaseStatus bool `json:"DisciplinaryCaseStatus,omitempty"`
	// GenerateHallTicketFlag holds the value of the "GenerateHallTicketFlag" field.
	GenerateHallTicketFlag *bool `json:"GenerateHallTicketFlag,omitempty"`
	// HallTicketNumber holds the value of the "HallTicketNumber" field.
	HallTicketNumber string `json:"HallTicketNumber,omitempty"`
	// HallTicketGeneratedFlag holds the value of the "HallTicketGeneratedFlag" field.
	HallTicketGeneratedFlag bool `json:"HallTicketGeneratedFlag,omitempty"`
	// GenerateHallTicketFlagByNO holds the value of the "GenerateHallTicketFlagByNO" field.
	GenerateHallTicketFlagByNO *bool `json:"GenerateHallTicketFlagByNO,omitempty"`
	// HallTicketGeneratedDate holds the value of the "HallTicketGeneratedDate" field.
	HallTicketGeneratedDate time.Time `json:"HallTicketGeneratedDate,omitempty"`
	// TemporaryHallTicket holds the value of the "TemporaryHallTicket" field.
	TemporaryHallTicket string `json:"TemporaryHallTicket,omitempty"`
	// OptionUsed holds the value of the "OptionUsed" field.
	OptionUsed string `json:"OptionUsed,omitempty"`
	// Remarks holds the value of the "Remarks" field.
	Remarks string `json:"Remarks,omitempty"`
	// Cadre holds the value of the "Cadre" field.
	Cadre string `json:"Cadre,omitempty"`
	// EmployeePost holds the value of the "EmployeePost" field.
	EmployeePost string `json:"EmployeePost,omitempty"`
	// DOJInEligiblePost holds the value of the "DOJInEligiblePost" field.
	DOJInEligiblePost string `json:"DOJInEligiblePost,omitempty"`
	// DivisionPreferences holds the value of the "DivisionPreferences" field.
	DivisionPreferences []interface{} `json:"DivisionPreferences,omitempty"`
	// RoleUserCode holds the value of the "RoleUserCode" field.
	RoleUserCode int32 `json:"RoleUserCode,omitempty"`
	// ServiceLength holds the value of the "ServiceLength" field.
	ServiceLength []interface{} `json:"ServiceLength,omitempty"`
	// NonQualifyingService holds the value of the "NonQualifyingService" field.
	NonQualifyingService []interface{} `json:"NonQualifyingService,omitempty"`
	// DCInPresentCadre holds the value of the "DCInPresentCadre" field.
	DCInPresentCadre string `json:"DCInPresentCadre,omitempty"`
	// ReportingOfficeID holds the value of the "ReportingOfficeID" field.
	ReportingOfficeID string `json:"ReportingOfficeID,omitempty"`
	// PostPreferences holds the value of the "PostPreferences" field.
	PostPreferences []interface{} `json:"PostPreferences,omitempty"`
	// UnitPreferences holds the value of the "UnitPreferences" field.
	UnitPreferences []interface{} `json:"UnitPreferences,omitempty"`
	// CenterId holds the value of the "CenterId" field.
	CenterId int32 `json:"CenterId,omitempty"`
	// CenterCode holds the value of the "CenterCode" field.
	CenterCode int32 `json:"CenterCode,omitempty"`
	// ClaimingQualifyingService holds the value of the "ClaimingQualifyingService" field.
	ClaimingQualifyingService string `json:"ClaimingQualifyingService,omitempty"`
	// DeputationOfficePincode holds the value of the "DeputationOfficePincode" field.
	DeputationOfficePincode string `json:"DeputationOfficePincode,omitempty"`
	// CircleSID holds the value of the "CircleSID" field.
	CircleSID *int32 `json:"CircleSID,omitempty"`
	// FacilityName holds the value of the "FacilityName" field.
	FacilityName string `json:"FacilityName,omitempty"`
	// UpdatedAt holds the value of the "UpdatedAt" field.
	UpdatedAt time.Time `json:"UpdatedAt,omitempty"`
	// UpdatedBy holds the value of the "UpdatedBy" field.
	UpdatedBy string `json:"UpdatedBy,omitempty"`
	// ExamCenterHall holds the value of the "ExamCenterHall" field.
	ExamCenterHall int32 `json:"ExamCenterHall,omitempty"`
	// HallName holds the value of the "HallName" field.
	HallName string `json:"HallName,omitempty"`
	// GDSEngagement holds the value of the "GDSEngagement" field.
	GDSEngagement []interface{} `json:"GDSEngagement,omitempty"`
	// PMMailGuardMTSEngagement holds the value of the "PMMailGuardMTSEngagement" field.
	PMMailGuardMTSEngagement []interface{} `json:"PMMailGuardMTSEngagement,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the Exam_Applications_GDSPMQuery when eager-loading is set.
	Edges                       Exam_Applications_GDSPMEdges `json:"edges"`
	user_master_users_gdspm_ref *int64
	selectValues                sql.SelectValues
}

// Exam_Applications_GDSPMEdges holds the relations/edges for other nodes in the graph.
type Exam_Applications_GDSPMEdges struct {
	// UsersGDSPMRef holds the value of the UsersGDSPMRef edge.
	UsersGDSPMRef []*UserMaster `json:"UsersGDSPMRef,omitempty"`
	// CadrePrefRefGDSPM holds the value of the CadrePrefRefGDSPM edge.
	CadrePrefRefGDSPM []*Cadre_Choice_PM `json:"CadrePrefRefGDSPM,omitempty"`
	// CirclePrefRefGDSPM holds the value of the CirclePrefRefGDSPM edge.
	CirclePrefRefGDSPM []*Division_Choice_PM `json:"CirclePrefRefGDSPM,omitempty"`
	// GDSPMApplicationsRef holds the value of the GDSPMApplicationsRef edge.
	GDSPMApplicationsRef []*RecommendationsGDSPMApplications `json:"GDSPMApplicationsRef,omitempty"`
	// LogData holds the value of the LogData edge.
	LogData []*Logs `json:"LogData,omitempty"`
	// Exams holds the value of the Exams edge.
	Exams *Exam `json:"Exams,omitempty"`
	// GDSPMExamCentres holds the value of the GDSPMExamCentres edge.
	GDSPMExamCentres *Center `json:"GDSPMExamCentres,omitempty"`
	// CircleRefsGDSPM holds the value of the CircleRefsGDSPM edge.
	CircleRefsGDSPM *CircleSummaryForNO `json:"CircleRefsGDSPM,omitempty"`
	// Roleusers holds the value of the roleusers edge.
	Roleusers *RoleMaster `json:"roleusers,omitempty"`
	// Examcitycenter holds the value of the examcitycenter edge.
	Examcitycenter *ExamCityCenter `json:"examcitycenter,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [10]bool
}

// UsersGDSPMRefOrErr returns the UsersGDSPMRef value or an error if the edge
// was not loaded in eager-loading.
func (e Exam_Applications_GDSPMEdges) UsersGDSPMRefOrErr() ([]*UserMaster, error) {
	if e.loadedTypes[0] {
		return e.UsersGDSPMRef, nil
	}
	return nil, &NotLoadedError{edge: "UsersGDSPMRef"}
}

// CadrePrefRefGDSPMOrErr returns the CadrePrefRefGDSPM value or an error if the edge
// was not loaded in eager-loading.
func (e Exam_Applications_GDSPMEdges) CadrePrefRefGDSPMOrErr() ([]*Cadre_Choice_PM, error) {
	if e.loadedTypes[1] {
		return e.CadrePrefRefGDSPM, nil
	}
	return nil, &NotLoadedError{edge: "CadrePrefRefGDSPM"}
}

// CirclePrefRefGDSPMOrErr returns the CirclePrefRefGDSPM value or an error if the edge
// was not loaded in eager-loading.
func (e Exam_Applications_GDSPMEdges) CirclePrefRefGDSPMOrErr() ([]*Division_Choice_PM, error) {
	if e.loadedTypes[2] {
		return e.CirclePrefRefGDSPM, nil
	}
	return nil, &NotLoadedError{edge: "CirclePrefRefGDSPM"}
}

// GDSPMApplicationsRefOrErr returns the GDSPMApplicationsRef value or an error if the edge
// was not loaded in eager-loading.
func (e Exam_Applications_GDSPMEdges) GDSPMApplicationsRefOrErr() ([]*RecommendationsGDSPMApplications, error) {
	if e.loadedTypes[3] {
		return e.GDSPMApplicationsRef, nil
	}
	return nil, &NotLoadedError{edge: "GDSPMApplicationsRef"}
}

// LogDataOrErr returns the LogData value or an error if the edge
// was not loaded in eager-loading.
func (e Exam_Applications_GDSPMEdges) LogDataOrErr() ([]*Logs, error) {
	if e.loadedTypes[4] {
		return e.LogData, nil
	}
	return nil, &NotLoadedError{edge: "LogData"}
}

// ExamsOrErr returns the Exams value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e Exam_Applications_GDSPMEdges) ExamsOrErr() (*Exam, error) {
	if e.loadedTypes[5] {
		if e.Exams == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: exam.Label}
		}
		return e.Exams, nil
	}
	return nil, &NotLoadedError{edge: "Exams"}
}

// GDSPMExamCentresOrErr returns the GDSPMExamCentres value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e Exam_Applications_GDSPMEdges) GDSPMExamCentresOrErr() (*Center, error) {
	if e.loadedTypes[6] {
		if e.GDSPMExamCentres == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: center.Label}
		}
		return e.GDSPMExamCentres, nil
	}
	return nil, &NotLoadedError{edge: "GDSPMExamCentres"}
}

// CircleRefsGDSPMOrErr returns the CircleRefsGDSPM value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e Exam_Applications_GDSPMEdges) CircleRefsGDSPMOrErr() (*CircleSummaryForNO, error) {
	if e.loadedTypes[7] {
		if e.CircleRefsGDSPM == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: circlesummaryforno.Label}
		}
		return e.CircleRefsGDSPM, nil
	}
	return nil, &NotLoadedError{edge: "CircleRefsGDSPM"}
}

// RoleusersOrErr returns the Roleusers value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e Exam_Applications_GDSPMEdges) RoleusersOrErr() (*RoleMaster, error) {
	if e.loadedTypes[8] {
		if e.Roleusers == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: rolemaster.Label}
		}
		return e.Roleusers, nil
	}
	return nil, &NotLoadedError{edge: "roleusers"}
}

// ExamcitycenterOrErr returns the Examcitycenter value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e Exam_Applications_GDSPMEdges) ExamcitycenterOrErr() (*ExamCityCenter, error) {
	if e.loadedTypes[9] {
		if e.Examcitycenter == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: examcitycenter.Label}
		}
		return e.Examcitycenter, nil
	}
	return nil, &NotLoadedError{edge: "examcitycenter"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Exam_Applications_GDSPM) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case exam_applications_gdspm.FieldCandidatePhoto, exam_applications_gdspm.FieldCandidateSignature, exam_applications_gdspm.FieldCadrePreferences, exam_applications_gdspm.FieldDivisionPreferences, exam_applications_gdspm.FieldServiceLength, exam_applications_gdspm.FieldNonQualifyingService, exam_applications_gdspm.FieldPostPreferences, exam_applications_gdspm.FieldUnitPreferences, exam_applications_gdspm.FieldGDSEngagement, exam_applications_gdspm.FieldPMMailGuardMTSEngagement:
			values[i] = new([]byte)
		case exam_applications_gdspm.FieldPunishmentStatus, exam_applications_gdspm.FieldDisciplinaryCaseStatus, exam_applications_gdspm.FieldGenerateHallTicketFlag, exam_applications_gdspm.FieldHallTicketGeneratedFlag, exam_applications_gdspm.FieldGenerateHallTicketFlagByNO:
			values[i] = new(sql.NullBool)
		case exam_applications_gdspm.FieldID, exam_applications_gdspm.FieldExamCode, exam_applications_gdspm.FieldUserID, exam_applications_gdspm.FieldEmployeeID, exam_applications_gdspm.FieldDisabilityPercentage, exam_applications_gdspm.FieldWorkingOfficePincode, exam_applications_gdspm.FieldExamCityCenterCode, exam_applications_gdspm.FieldVAUserId, exam_applications_gdspm.FieldCAUserId, exam_applications_gdspm.FieldNAUserId, exam_applications_gdspm.FieldRoleUserCode, exam_applications_gdspm.FieldCenterId, exam_applications_gdspm.FieldCenterCode, exam_applications_gdspm.FieldCircleSID, exam_applications_gdspm.FieldExamCenterHall:
			values[i] = new(sql.NullInt64)
		case exam_applications_gdspm.FieldApplicationNumber, exam_applications_gdspm.FieldExamShortName, exam_applications_gdspm.FieldExamName, exam_applications_gdspm.FieldSmsExamShortName, exam_applications_gdspm.FieldExamYear, exam_applications_gdspm.FieldEmployeeName, exam_applications_gdspm.FieldDOB, exam_applications_gdspm.FieldGender, exam_applications_gdspm.FieldMobileNumber, exam_applications_gdspm.FieldEmailID, exam_applications_gdspm.FieldCategoryCode, exam_applications_gdspm.FieldCategoryDescription, exam_applications_gdspm.FieldDisabilityTypeID, exam_applications_gdspm.FieldDisabilityTypeCode, exam_applications_gdspm.FieldDisabilityTypeDescription, exam_applications_gdspm.FieldDCCS, exam_applications_gdspm.FieldEntryPostCode, exam_applications_gdspm.FieldEntryPostDescription, exam_applications_gdspm.FieldPresentPostCode, exam_applications_gdspm.FieldPresentPostDescription, exam_applications_gdspm.FieldFeederPostCode, exam_applications_gdspm.FieldFeederPostDescription, exam_applications_gdspm.FieldFeederPostJoiningDate, exam_applications_gdspm.FieldDesignationID, exam_applications_gdspm.FieldPresentDesignation, exam_applications_gdspm.FieldEducationCode, exam_applications_gdspm.FieldEducationDescription, exam_applications_gdspm.FieldFacilityUniqueID, exam_applications_gdspm.FieldWorkingOfficeFacilityID, exam_applications_gdspm.FieldWorkingOfficeName, exam_applications_gdspm.FieldWorkingOfficeCircleFacilityID, exam_applications_gdspm.FieldWorkingOfficeCircleName, exam_applications_gdspm.FieldWorkingOfficeRegionFacilityID, exam_applications_gdspm.FieldWorkingOfficeRegionName, exam_applications_gdspm.FieldWorkingOfficeDivisionFacilityID, exam_applications_gdspm.FieldWorkingOfficeDivisionName, exam_applications_gdspm.FieldReportingOfficeFacilityID, exam_applications_gdspm.FieldReportingOfficeName, exam_applications_gdspm.FieldLienControllingOfficeID, exam_applications_gdspm.FieldLienControllingOfficeName, exam_applications_gdspm.FieldInDeputation, exam_applications_gdspm.FieldDeputationType, exam_applications_gdspm.FieldDeputationOfficeUniqueId, exam_applications_gdspm.FieldDeputationOfficeFacilityID, exam_applications_gdspm.FieldDeputationOfficeName, exam_applications_gdspm.FieldDeputationControllingOfficeID, exam_applications_gdspm.FieldDeputationControllingOfficeName, exam_applications_gdspm.FieldControllingOfficeFacilityID, exam_applications_gdspm.FieldControllingOfficeName, exam_applications_gdspm.FieldNodalOfficeFacilityID, exam_applications_gdspm.FieldNodalOfficeName, exam_applications_gdspm.FieldSubdivisionOfficeFacilityID, exam_applications_gdspm.FieldSubdivisionOfficeName, exam_applications_gdspm.FieldCenterFacilityId, exam_applications_gdspm.FieldCentrePreference, exam_applications_gdspm.FieldSignature, exam_applications_gdspm.FieldPhoto, exam_applications_gdspm.FieldSignaturePath, exam_applications_gdspm.FieldPhotoPath, exam_applications_gdspm.FieldTempHallTicket, exam_applications_gdspm.FieldCandidateRemarks, exam_applications_gdspm.FieldVAGeneralRemarks, exam_applications_gdspm.FieldCAGeneralRemarks, exam_applications_gdspm.FieldNAGeneralRemarks, exam_applications_gdspm.FieldApplicationStatus, exam_applications_gdspm.FieldStatus, exam_applications_gdspm.FieldRecommendedStatus, exam_applications_gdspm.FieldVAUserName, exam_applications_gdspm.FieldVAEmployeeID, exam_applications_gdspm.FieldVAEmployeeDesignation, exam_applications_gdspm.FieldVARemarks, exam_applications_gdspm.FieldCAUserName, exam_applications_gdspm.FieldCAEmployeeID, exam_applications_gdspm.FieldCAEmployeeDesignation, exam_applications_gdspm.FieldCARemarks, exam_applications_gdspm.FieldNAUserName, exam_applications_gdspm.FieldNAEmployeeID, exam_applications_gdspm.FieldNAEmployeeDesignation, exam_applications_gdspm.FieldNARemarks, exam_applications_gdspm.FieldAppliactionRemarks, exam_applications_gdspm.FieldCAPreviousRemarks, exam_applications_gdspm.FieldHallTicketNumber, exam_applications_gdspm.FieldTemporaryHallTicket, exam_applications_gdspm.FieldOptionUsed, exam_applications_gdspm.FieldRemarks, exam_applications_gdspm.FieldCadre, exam_applications_gdspm.FieldEmployeePost, exam_applications_gdspm.FieldDOJInEligiblePost, exam_applications_gdspm.FieldDCInPresentCadre, exam_applications_gdspm.FieldReportingOfficeID, exam_applications_gdspm.FieldClaimingQualifyingService, exam_applications_gdspm.FieldDeputationOfficePincode, exam_applications_gdspm.FieldFacilityName, exam_applications_gdspm.FieldUpdatedBy, exam_applications_gdspm.FieldHallName:
			values[i] = new(sql.NullString)
		case exam_applications_gdspm.FieldApplnSubmittedDate, exam_applications_gdspm.FieldApplicationWdlDate, exam_applications_gdspm.FieldVADate, exam_applications_gdspm.FieldCADate, exam_applications_gdspm.FieldNADate, exam_applications_gdspm.FieldHallTicketGeneratedDate, exam_applications_gdspm.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case exam_applications_gdspm.ForeignKeys[0]: // user_master_users_gdspm_ref
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Exam_Applications_GDSPM fields.
func (eag *Exam_Applications_GDSPM) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case exam_applications_gdspm.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			eag.ID = int64(value.Int64)
		case exam_applications_gdspm.FieldApplicationNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ApplicationNumber", values[i])
			} else if value.Valid {
				eag.ApplicationNumber = value.String
			}
		case exam_applications_gdspm.FieldApplnSubmittedDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field ApplnSubmittedDate", values[i])
			} else if value.Valid {
				eag.ApplnSubmittedDate = value.Time
			}
		case exam_applications_gdspm.FieldExamCode:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field ExamCode", values[i])
			} else if value.Valid {
				eag.ExamCode = int32(value.Int64)
			}
		case exam_applications_gdspm.FieldExamShortName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ExamShortName", values[i])
			} else if value.Valid {
				eag.ExamShortName = value.String
			}
		case exam_applications_gdspm.FieldExamName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ExamName", values[i])
			} else if value.Valid {
				eag.ExamName = value.String
			}
		case exam_applications_gdspm.FieldSmsExamShortName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field SmsExamShortName", values[i])
			} else if value.Valid {
				eag.SmsExamShortName = value.String
			}
		case exam_applications_gdspm.FieldExamYear:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ExamYear", values[i])
			} else if value.Valid {
				eag.ExamYear = value.String
			}
		case exam_applications_gdspm.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field UserID", values[i])
			} else if value.Valid {
				eag.UserID = int32(value.Int64)
			}
		case exam_applications_gdspm.FieldEmployeeID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field EmployeeID", values[i])
			} else if value.Valid {
				eag.EmployeeID = value.Int64
			}
		case exam_applications_gdspm.FieldEmployeeName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field EmployeeName", values[i])
			} else if value.Valid {
				eag.EmployeeName = value.String
			}
		case exam_applications_gdspm.FieldDOB:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field DOB", values[i])
			} else if value.Valid {
				eag.DOB = value.String
			}
		case exam_applications_gdspm.FieldGender:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Gender", values[i])
			} else if value.Valid {
				eag.Gender = value.String
			}
		case exam_applications_gdspm.FieldMobileNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field MobileNumber", values[i])
			} else if value.Valid {
				eag.MobileNumber = value.String
			}
		case exam_applications_gdspm.FieldEmailID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field EmailID", values[i])
			} else if value.Valid {
				eag.EmailID = value.String
			}
		case exam_applications_gdspm.FieldCategoryCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field CategoryCode", values[i])
			} else if value.Valid {
				eag.CategoryCode = value.String
			}
		case exam_applications_gdspm.FieldCategoryDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field CategoryDescription", values[i])
			} else if value.Valid {
				eag.CategoryDescription = value.String
			}
		case exam_applications_gdspm.FieldDisabilityTypeID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field DisabilityTypeID", values[i])
			} else if value.Valid {
				eag.DisabilityTypeID = value.String
			}
		case exam_applications_gdspm.FieldDisabilityTypeCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field DisabilityTypeCode", values[i])
			} else if value.Valid {
				eag.DisabilityTypeCode = value.String
			}
		case exam_applications_gdspm.FieldDisabilityTypeDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field DisabilityTypeDescription", values[i])
			} else if value.Valid {
				eag.DisabilityTypeDescription = value.String
			}
		case exam_applications_gdspm.FieldDisabilityPercentage:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field DisabilityPercentage", values[i])
			} else if value.Valid {
				eag.DisabilityPercentage = int32(value.Int64)
			}
		case exam_applications_gdspm.FieldDCCS:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field DCCS", values[i])
			} else if value.Valid {
				eag.DCCS = value.String
			}
		case exam_applications_gdspm.FieldEntryPostCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field EntryPostCode", values[i])
			} else if value.Valid {
				eag.EntryPostCode = value.String
			}
		case exam_applications_gdspm.FieldEntryPostDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field EntryPostDescription", values[i])
			} else if value.Valid {
				eag.EntryPostDescription = value.String
			}
		case exam_applications_gdspm.FieldPresentPostCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field PresentPostCode", values[i])
			} else if value.Valid {
				eag.PresentPostCode = value.String
			}
		case exam_applications_gdspm.FieldPresentPostDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field PresentPostDescription", values[i])
			} else if value.Valid {
				eag.PresentPostDescription = value.String
			}
		case exam_applications_gdspm.FieldFeederPostCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field FeederPostCode", values[i])
			} else if value.Valid {
				eag.FeederPostCode = value.String
			}
		case exam_applications_gdspm.FieldFeederPostDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field FeederPostDescription", values[i])
			} else if value.Valid {
				eag.FeederPostDescription = value.String
			}
		case exam_applications_gdspm.FieldFeederPostJoiningDate:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field FeederPostJoiningDate", values[i])
			} else if value.Valid {
				eag.FeederPostJoiningDate = value.String
			}
		case exam_applications_gdspm.FieldDesignationID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field DesignationID", values[i])
			} else if value.Valid {
				eag.DesignationID = value.String
			}
		case exam_applications_gdspm.FieldPresentDesignation:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field PresentDesignation", values[i])
			} else if value.Valid {
				eag.PresentDesignation = value.String
			}
		case exam_applications_gdspm.FieldEducationCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field EducationCode", values[i])
			} else if value.Valid {
				eag.EducationCode = value.String
			}
		case exam_applications_gdspm.FieldEducationDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field EducationDescription", values[i])
			} else if value.Valid {
				eag.EducationDescription = value.String
			}
		case exam_applications_gdspm.FieldFacilityUniqueID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field FacilityUniqueID", values[i])
			} else if value.Valid {
				eag.FacilityUniqueID = value.String
			}
		case exam_applications_gdspm.FieldWorkingOfficePincode:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field WorkingOfficePincode", values[i])
			} else if value.Valid {
				eag.WorkingOfficePincode = int32(value.Int64)
			}
		case exam_applications_gdspm.FieldWorkingOfficeFacilityID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field WorkingOfficeFacilityID", values[i])
			} else if value.Valid {
				eag.WorkingOfficeFacilityID = value.String
			}
		case exam_applications_gdspm.FieldWorkingOfficeName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field WorkingOfficeName", values[i])
			} else if value.Valid {
				eag.WorkingOfficeName = value.String
			}
		case exam_applications_gdspm.FieldWorkingOfficeCircleFacilityID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field WorkingOfficeCircleFacilityID", values[i])
			} else if value.Valid {
				eag.WorkingOfficeCircleFacilityID = value.String
			}
		case exam_applications_gdspm.FieldWorkingOfficeCircleName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field WorkingOfficeCircleName", values[i])
			} else if value.Valid {
				eag.WorkingOfficeCircleName = value.String
			}
		case exam_applications_gdspm.FieldWorkingOfficeRegionFacilityID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field WorkingOfficeRegionFacilityID", values[i])
			} else if value.Valid {
				eag.WorkingOfficeRegionFacilityID = value.String
			}
		case exam_applications_gdspm.FieldWorkingOfficeRegionName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field WorkingOfficeRegionName", values[i])
			} else if value.Valid {
				eag.WorkingOfficeRegionName = value.String
			}
		case exam_applications_gdspm.FieldWorkingOfficeDivisionFacilityID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field WorkingOfficeDivisionFacilityID", values[i])
			} else if value.Valid {
				eag.WorkingOfficeDivisionFacilityID = value.String
			}
		case exam_applications_gdspm.FieldWorkingOfficeDivisionName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field WorkingOfficeDivisionName", values[i])
			} else if value.Valid {
				eag.WorkingOfficeDivisionName = value.String
			}
		case exam_applications_gdspm.FieldReportingOfficeFacilityID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ReportingOfficeFacilityID", values[i])
			} else if value.Valid {
				eag.ReportingOfficeFacilityID = value.String
			}
		case exam_applications_gdspm.FieldReportingOfficeName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ReportingOfficeName", values[i])
			} else if value.Valid {
				eag.ReportingOfficeName = value.String
			}
		case exam_applications_gdspm.FieldLienControllingOfficeID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field LienControllingOfficeID", values[i])
			} else if value.Valid {
				eag.LienControllingOfficeID = value.String
			}
		case exam_applications_gdspm.FieldLienControllingOfficeName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field LienControllingOfficeName", values[i])
			} else if value.Valid {
				eag.LienControllingOfficeName = value.String
			}
		case exam_applications_gdspm.FieldInDeputation:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field InDeputation", values[i])
			} else if value.Valid {
				eag.InDeputation = value.String
			}
		case exam_applications_gdspm.FieldDeputationType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field DeputationType", values[i])
			} else if value.Valid {
				eag.DeputationType = value.String
			}
		case exam_applications_gdspm.FieldDeputationOfficeUniqueId:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field DeputationOfficeUniqueId", values[i])
			} else if value.Valid {
				eag.DeputationOfficeUniqueId = value.String
			}
		case exam_applications_gdspm.FieldDeputationOfficeFacilityID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field DeputationOfficeFacilityID", values[i])
			} else if value.Valid {
				eag.DeputationOfficeFacilityID = value.String
			}
		case exam_applications_gdspm.FieldDeputationOfficeName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field DeputationOfficeName", values[i])
			} else if value.Valid {
				eag.DeputationOfficeName = value.String
			}
		case exam_applications_gdspm.FieldDeputationControllingOfficeID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field DeputationControllingOfficeID", values[i])
			} else if value.Valid {
				eag.DeputationControllingOfficeID = value.String
			}
		case exam_applications_gdspm.FieldDeputationControllingOfficeName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field DeputationControllingOfficeName", values[i])
			} else if value.Valid {
				eag.DeputationControllingOfficeName = value.String
			}
		case exam_applications_gdspm.FieldControllingOfficeFacilityID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ControllingOfficeFacilityID", values[i])
			} else if value.Valid {
				eag.ControllingOfficeFacilityID = value.String
			}
		case exam_applications_gdspm.FieldControllingOfficeName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ControllingOfficeName", values[i])
			} else if value.Valid {
				eag.ControllingOfficeName = value.String
			}
		case exam_applications_gdspm.FieldNodalOfficeFacilityID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field NodalOfficeFacilityID", values[i])
			} else if value.Valid {
				eag.NodalOfficeFacilityID = value.String
			}
		case exam_applications_gdspm.FieldNodalOfficeName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field NodalOfficeName", values[i])
			} else if value.Valid {
				eag.NodalOfficeName = value.String
			}
		case exam_applications_gdspm.FieldSubdivisionOfficeFacilityID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field SubdivisionOfficeFacilityID", values[i])
			} else if value.Valid {
				eag.SubdivisionOfficeFacilityID = value.String
			}
		case exam_applications_gdspm.FieldSubdivisionOfficeName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field SubdivisionOfficeName", values[i])
			} else if value.Valid {
				eag.SubdivisionOfficeName = value.String
			}
		case exam_applications_gdspm.FieldExamCityCenterCode:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field ExamCityCenterCode", values[i])
			} else if value.Valid {
				eag.ExamCityCenterCode = int32(value.Int64)
			}
		case exam_applications_gdspm.FieldCenterFacilityId:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field CenterFacilityId", values[i])
			} else if value.Valid {
				eag.CenterFacilityId = value.String
			}
		case exam_applications_gdspm.FieldCentrePreference:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field CentrePreference", values[i])
			} else if value.Valid {
				eag.CentrePreference = value.String
			}
		case exam_applications_gdspm.FieldSignature:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Signature", values[i])
			} else if value.Valid {
				eag.Signature = value.String
			}
		case exam_applications_gdspm.FieldPhoto:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Photo", values[i])
			} else if value.Valid {
				eag.Photo = value.String
			}
		case exam_applications_gdspm.FieldCandidatePhoto:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field CandidatePhoto", values[i])
			} else if value != nil {
				eag.CandidatePhoto = *value
			}
		case exam_applications_gdspm.FieldCandidateSignature:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field CandidateSignature", values[i])
			} else if value != nil {
				eag.CandidateSignature = *value
			}
		case exam_applications_gdspm.FieldSignaturePath:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field SignaturePath", values[i])
			} else if value.Valid {
				eag.SignaturePath = value.String
			}
		case exam_applications_gdspm.FieldPhotoPath:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field PhotoPath", values[i])
			} else if value.Valid {
				eag.PhotoPath = value.String
			}
		case exam_applications_gdspm.FieldTempHallTicket:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field TempHallTicket", values[i])
			} else if value.Valid {
				eag.TempHallTicket = value.String
			}
		case exam_applications_gdspm.FieldCandidateRemarks:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field CandidateRemarks", values[i])
			} else if value.Valid {
				eag.CandidateRemarks = value.String
			}
		case exam_applications_gdspm.FieldVAGeneralRemarks:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field VAGeneralRemarks", values[i])
			} else if value.Valid {
				eag.VAGeneralRemarks = value.String
			}
		case exam_applications_gdspm.FieldCAGeneralRemarks:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field CAGeneralRemarks", values[i])
			} else if value.Valid {
				eag.CAGeneralRemarks = value.String
			}
		case exam_applications_gdspm.FieldNAGeneralRemarks:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field NAGeneralRemarks", values[i])
			} else if value.Valid {
				eag.NAGeneralRemarks = value.String
			}
		case exam_applications_gdspm.FieldApplicationStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ApplicationStatus", values[i])
			} else if value.Valid {
				eag.ApplicationStatus = value.String
			}
		case exam_applications_gdspm.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Status", values[i])
			} else if value.Valid {
				eag.Status = value.String
			}
		case exam_applications_gdspm.FieldRecommendedStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field RecommendedStatus", values[i])
			} else if value.Valid {
				eag.RecommendedStatus = value.String
			}
		case exam_applications_gdspm.FieldApplicationWdlDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field ApplicationWdlDate", values[i])
			} else if value.Valid {
				eag.ApplicationWdlDate = value.Time
			}
		case exam_applications_gdspm.FieldVAUserId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field VA_UserId", values[i])
			} else if value.Valid {
				eag.VAUserId = int32(value.Int64)
			}
		case exam_applications_gdspm.FieldVAUserName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field VA_UserName", values[i])
			} else if value.Valid {
				eag.VAUserName = value.String
			}
		case exam_applications_gdspm.FieldVAEmployeeID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field VA_EmployeeID", values[i])
			} else if value.Valid {
				eag.VAEmployeeID = value.String
			}
		case exam_applications_gdspm.FieldVAEmployeeDesignation:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field VA_EmployeeDesignation", values[i])
			} else if value.Valid {
				eag.VAEmployeeDesignation = value.String
			}
		case exam_applications_gdspm.FieldVARemarks:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field VA_Remarks", values[i])
			} else if value.Valid {
				eag.VARemarks = value.String
			}
		case exam_applications_gdspm.FieldVADate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field VA_Date", values[i])
			} else if value.Valid {
				eag.VADate = value.Time
			}
		case exam_applications_gdspm.FieldCAUserId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field CA_UserId", values[i])
			} else if value.Valid {
				eag.CAUserId = int32(value.Int64)
			}
		case exam_applications_gdspm.FieldCAUserName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field CA_UserName", values[i])
			} else if value.Valid {
				eag.CAUserName = value.String
			}
		case exam_applications_gdspm.FieldCAEmployeeID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field CA_EmployeeID", values[i])
			} else if value.Valid {
				eag.CAEmployeeID = value.String
			}
		case exam_applications_gdspm.FieldCAEmployeeDesignation:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field CA_EmployeeDesignation", values[i])
			} else if value.Valid {
				eag.CAEmployeeDesignation = value.String
			}
		case exam_applications_gdspm.FieldCARemarks:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field CA_Remarks", values[i])
			} else if value.Valid {
				eag.CARemarks = value.String
			}
		case exam_applications_gdspm.FieldCADate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field CA_Date", values[i])
			} else if value.Valid {
				eag.CADate = value.Time
			}
		case exam_applications_gdspm.FieldNAUserId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field NA_UserId", values[i])
			} else if value.Valid {
				eag.NAUserId = int32(value.Int64)
			}
		case exam_applications_gdspm.FieldNAUserName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field NA_UserName", values[i])
			} else if value.Valid {
				eag.NAUserName = value.String
			}
		case exam_applications_gdspm.FieldNAEmployeeID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field NA_EmployeeID", values[i])
			} else if value.Valid {
				eag.NAEmployeeID = value.String
			}
		case exam_applications_gdspm.FieldNAEmployeeDesignation:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field NA_EmployeeDesignation", values[i])
			} else if value.Valid {
				eag.NAEmployeeDesignation = value.String
			}
		case exam_applications_gdspm.FieldNARemarks:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field NA_Remarks", values[i])
			} else if value.Valid {
				eag.NARemarks = value.String
			}
		case exam_applications_gdspm.FieldNADate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field NA_Date", values[i])
			} else if value.Valid {
				eag.NADate = value.Time
			}
		case exam_applications_gdspm.FieldAppliactionRemarks:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field AppliactionRemarks", values[i])
			} else if value.Valid {
				eag.AppliactionRemarks = value.String
			}
		case exam_applications_gdspm.FieldCadrePreferences:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field CadrePreferences", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &eag.CadrePreferences); err != nil {
					return fmt.Errorf("unmarshal field CadrePreferences: %w", err)
				}
			}
		case exam_applications_gdspm.FieldCAPreviousRemarks:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field CAPreviousRemarks", values[i])
			} else if value.Valid {
				eag.CAPreviousRemarks = value.String
			}
		case exam_applications_gdspm.FieldPunishmentStatus:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field PunishmentStatus", values[i])
			} else if value.Valid {
				eag.PunishmentStatus = value.Bool
			}
		case exam_applications_gdspm.FieldDisciplinaryCaseStatus:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field DisciplinaryCaseStatus", values[i])
			} else if value.Valid {
				eag.DisciplinaryCaseStatus = value.Bool
			}
		case exam_applications_gdspm.FieldGenerateHallTicketFlag:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field GenerateHallTicketFlag", values[i])
			} else if value.Valid {
				eag.GenerateHallTicketFlag = new(bool)
				*eag.GenerateHallTicketFlag = value.Bool
			}
		case exam_applications_gdspm.FieldHallTicketNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field HallTicketNumber", values[i])
			} else if value.Valid {
				eag.HallTicketNumber = value.String
			}
		case exam_applications_gdspm.FieldHallTicketGeneratedFlag:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field HallTicketGeneratedFlag", values[i])
			} else if value.Valid {
				eag.HallTicketGeneratedFlag = value.Bool
			}
		case exam_applications_gdspm.FieldGenerateHallTicketFlagByNO:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field GenerateHallTicketFlagByNO", values[i])
			} else if value.Valid {
				eag.GenerateHallTicketFlagByNO = new(bool)
				*eag.GenerateHallTicketFlagByNO = value.Bool
			}
		case exam_applications_gdspm.FieldHallTicketGeneratedDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field HallTicketGeneratedDate", values[i])
			} else if value.Valid {
				eag.HallTicketGeneratedDate = value.Time
			}
		case exam_applications_gdspm.FieldTemporaryHallTicket:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field TemporaryHallTicket", values[i])
			} else if value.Valid {
				eag.TemporaryHallTicket = value.String
			}
		case exam_applications_gdspm.FieldOptionUsed:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field OptionUsed", values[i])
			} else if value.Valid {
				eag.OptionUsed = value.String
			}
		case exam_applications_gdspm.FieldRemarks:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Remarks", values[i])
			} else if value.Valid {
				eag.Remarks = value.String
			}
		case exam_applications_gdspm.FieldCadre:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Cadre", values[i])
			} else if value.Valid {
				eag.Cadre = value.String
			}
		case exam_applications_gdspm.FieldEmployeePost:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field EmployeePost", values[i])
			} else if value.Valid {
				eag.EmployeePost = value.String
			}
		case exam_applications_gdspm.FieldDOJInEligiblePost:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field DOJInEligiblePost", values[i])
			} else if value.Valid {
				eag.DOJInEligiblePost = value.String
			}
		case exam_applications_gdspm.FieldDivisionPreferences:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field DivisionPreferences", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &eag.DivisionPreferences); err != nil {
					return fmt.Errorf("unmarshal field DivisionPreferences: %w", err)
				}
			}
		case exam_applications_gdspm.FieldRoleUserCode:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field RoleUserCode", values[i])
			} else if value.Valid {
				eag.RoleUserCode = int32(value.Int64)
			}
		case exam_applications_gdspm.FieldServiceLength:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field ServiceLength", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &eag.ServiceLength); err != nil {
					return fmt.Errorf("unmarshal field ServiceLength: %w", err)
				}
			}
		case exam_applications_gdspm.FieldNonQualifyingService:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field NonQualifyingService", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &eag.NonQualifyingService); err != nil {
					return fmt.Errorf("unmarshal field NonQualifyingService: %w", err)
				}
			}
		case exam_applications_gdspm.FieldDCInPresentCadre:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field DCInPresentCadre", values[i])
			} else if value.Valid {
				eag.DCInPresentCadre = value.String
			}
		case exam_applications_gdspm.FieldReportingOfficeID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ReportingOfficeID", values[i])
			} else if value.Valid {
				eag.ReportingOfficeID = value.String
			}
		case exam_applications_gdspm.FieldPostPreferences:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field PostPreferences", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &eag.PostPreferences); err != nil {
					return fmt.Errorf("unmarshal field PostPreferences: %w", err)
				}
			}
		case exam_applications_gdspm.FieldUnitPreferences:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field UnitPreferences", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &eag.UnitPreferences); err != nil {
					return fmt.Errorf("unmarshal field UnitPreferences: %w", err)
				}
			}
		case exam_applications_gdspm.FieldCenterId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field CenterId", values[i])
			} else if value.Valid {
				eag.CenterId = int32(value.Int64)
			}
		case exam_applications_gdspm.FieldCenterCode:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field CenterCode", values[i])
			} else if value.Valid {
				eag.CenterCode = int32(value.Int64)
			}
		case exam_applications_gdspm.FieldClaimingQualifyingService:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ClaimingQualifyingService", values[i])
			} else if value.Valid {
				eag.ClaimingQualifyingService = value.String
			}
		case exam_applications_gdspm.FieldDeputationOfficePincode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field DeputationOfficePincode", values[i])
			} else if value.Valid {
				eag.DeputationOfficePincode = value.String
			}
		case exam_applications_gdspm.FieldCircleSID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field CircleSID", values[i])
			} else if value.Valid {
				eag.CircleSID = new(int32)
				*eag.CircleSID = int32(value.Int64)
			}
		case exam_applications_gdspm.FieldFacilityName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field FacilityName", values[i])
			} else if value.Valid {
				eag.FacilityName = value.String
			}
		case exam_applications_gdspm.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field UpdatedAt", values[i])
			} else if value.Valid {
				eag.UpdatedAt = value.Time
			}
		case exam_applications_gdspm.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field UpdatedBy", values[i])
			} else if value.Valid {
				eag.UpdatedBy = value.String
			}
		case exam_applications_gdspm.FieldExamCenterHall:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field ExamCenterHall", values[i])
			} else if value.Valid {
				eag.ExamCenterHall = int32(value.Int64)
			}
		case exam_applications_gdspm.FieldHallName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field HallName", values[i])
			} else if value.Valid {
				eag.HallName = value.String
			}
		case exam_applications_gdspm.FieldGDSEngagement:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field GDSEngagement", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &eag.GDSEngagement); err != nil {
					return fmt.Errorf("unmarshal field GDSEngagement: %w", err)
				}
			}
		case exam_applications_gdspm.FieldPMMailGuardMTSEngagement:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field PMMailGuardMTSEngagement", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &eag.PMMailGuardMTSEngagement); err != nil {
					return fmt.Errorf("unmarshal field PMMailGuardMTSEngagement: %w", err)
				}
			}
		case exam_applications_gdspm.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_master_users_gdspm_ref", value)
			} else if value.Valid {
				eag.user_master_users_gdspm_ref = new(int64)
				*eag.user_master_users_gdspm_ref = int64(value.Int64)
			}
		default:
			eag.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Exam_Applications_GDSPM.
// This includes values selected through modifiers, order, etc.
func (eag *Exam_Applications_GDSPM) Value(name string) (ent.Value, error) {
	return eag.selectValues.Get(name)
}

// QueryUsersGDSPMRef queries the "UsersGDSPMRef" edge of the Exam_Applications_GDSPM entity.
func (eag *Exam_Applications_GDSPM) QueryUsersGDSPMRef() *UserMasterQuery {
	return NewExamApplicationsGDSPMClient(eag.config).QueryUsersGDSPMRef(eag)
}

// QueryCadrePrefRefGDSPM queries the "CadrePrefRefGDSPM" edge of the Exam_Applications_GDSPM entity.
func (eag *Exam_Applications_GDSPM) QueryCadrePrefRefGDSPM() *CadreChoicePMQuery {
	return NewExamApplicationsGDSPMClient(eag.config).QueryCadrePrefRefGDSPM(eag)
}

// QueryCirclePrefRefGDSPM queries the "CirclePrefRefGDSPM" edge of the Exam_Applications_GDSPM entity.
func (eag *Exam_Applications_GDSPM) QueryCirclePrefRefGDSPM() *DivisionChoicePMQuery {
	return NewExamApplicationsGDSPMClient(eag.config).QueryCirclePrefRefGDSPM(eag)
}

// QueryGDSPMApplicationsRef queries the "GDSPMApplicationsRef" edge of the Exam_Applications_GDSPM entity.
func (eag *Exam_Applications_GDSPM) QueryGDSPMApplicationsRef() *RecommendationsGDSPMApplicationsQuery {
	return NewExamApplicationsGDSPMClient(eag.config).QueryGDSPMApplicationsRef(eag)
}

// QueryLogData queries the "LogData" edge of the Exam_Applications_GDSPM entity.
func (eag *Exam_Applications_GDSPM) QueryLogData() *LogsQuery {
	return NewExamApplicationsGDSPMClient(eag.config).QueryLogData(eag)
}

// QueryExams queries the "Exams" edge of the Exam_Applications_GDSPM entity.
func (eag *Exam_Applications_GDSPM) QueryExams() *ExamQuery {
	return NewExamApplicationsGDSPMClient(eag.config).QueryExams(eag)
}

// QueryGDSPMExamCentres queries the "GDSPMExamCentres" edge of the Exam_Applications_GDSPM entity.
func (eag *Exam_Applications_GDSPM) QueryGDSPMExamCentres() *CenterQuery {
	return NewExamApplicationsGDSPMClient(eag.config).QueryGDSPMExamCentres(eag)
}

// QueryCircleRefsGDSPM queries the "CircleRefsGDSPM" edge of the Exam_Applications_GDSPM entity.
func (eag *Exam_Applications_GDSPM) QueryCircleRefsGDSPM() *CircleSummaryForNOQuery {
	return NewExamApplicationsGDSPMClient(eag.config).QueryCircleRefsGDSPM(eag)
}

// QueryRoleusers queries the "roleusers" edge of the Exam_Applications_GDSPM entity.
func (eag *Exam_Applications_GDSPM) QueryRoleusers() *RoleMasterQuery {
	return NewExamApplicationsGDSPMClient(eag.config).QueryRoleusers(eag)
}

// QueryExamcitycenter queries the "examcitycenter" edge of the Exam_Applications_GDSPM entity.
func (eag *Exam_Applications_GDSPM) QueryExamcitycenter() *ExamCityCenterQuery {
	return NewExamApplicationsGDSPMClient(eag.config).QueryExamcitycenter(eag)
}

// Update returns a builder for updating this Exam_Applications_GDSPM.
// Note that you need to call Exam_Applications_GDSPM.Unwrap() before calling this method if this Exam_Applications_GDSPM
// was returned from a transaction, and the transaction was committed or rolled back.
func (eag *Exam_Applications_GDSPM) Update() *ExamApplicationsGDSPMUpdateOne {
	return NewExamApplicationsGDSPMClient(eag.config).UpdateOne(eag)
}

// Unwrap unwraps the Exam_Applications_GDSPM entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (eag *Exam_Applications_GDSPM) Unwrap() *Exam_Applications_GDSPM {
	_tx, ok := eag.config.driver.(*txDriver)
	if !ok {
		panic("ent: Exam_Applications_GDSPM is not a transactional entity")
	}
	eag.config.driver = _tx.drv
	return eag
}

// String implements the fmt.Stringer.
func (eag *Exam_Applications_GDSPM) String() string {
	var builder strings.Builder
	builder.WriteString("Exam_Applications_GDSPM(")
	builder.WriteString(fmt.Sprintf("id=%v, ", eag.ID))
	builder.WriteString("ApplicationNumber=")
	builder.WriteString(eag.ApplicationNumber)
	builder.WriteString(", ")
	builder.WriteString("ApplnSubmittedDate=")
	builder.WriteString(eag.ApplnSubmittedDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("ExamCode=")
	builder.WriteString(fmt.Sprintf("%v", eag.ExamCode))
	builder.WriteString(", ")
	builder.WriteString("ExamShortName=")
	builder.WriteString(eag.ExamShortName)
	builder.WriteString(", ")
	builder.WriteString("ExamName=")
	builder.WriteString(eag.ExamName)
	builder.WriteString(", ")
	builder.WriteString("SmsExamShortName=")
	builder.WriteString(eag.SmsExamShortName)
	builder.WriteString(", ")
	builder.WriteString("ExamYear=")
	builder.WriteString(eag.ExamYear)
	builder.WriteString(", ")
	builder.WriteString("UserID=")
	builder.WriteString(fmt.Sprintf("%v", eag.UserID))
	builder.WriteString(", ")
	builder.WriteString("EmployeeID=")
	builder.WriteString(fmt.Sprintf("%v", eag.EmployeeID))
	builder.WriteString(", ")
	builder.WriteString("EmployeeName=")
	builder.WriteString(eag.EmployeeName)
	builder.WriteString(", ")
	builder.WriteString("DOB=")
	builder.WriteString(eag.DOB)
	builder.WriteString(", ")
	builder.WriteString("Gender=")
	builder.WriteString(eag.Gender)
	builder.WriteString(", ")
	builder.WriteString("MobileNumber=")
	builder.WriteString(eag.MobileNumber)
	builder.WriteString(", ")
	builder.WriteString("EmailID=")
	builder.WriteString(eag.EmailID)
	builder.WriteString(", ")
	builder.WriteString("CategoryCode=")
	builder.WriteString(eag.CategoryCode)
	builder.WriteString(", ")
	builder.WriteString("CategoryDescription=")
	builder.WriteString(eag.CategoryDescription)
	builder.WriteString(", ")
	builder.WriteString("DisabilityTypeID=")
	builder.WriteString(eag.DisabilityTypeID)
	builder.WriteString(", ")
	builder.WriteString("DisabilityTypeCode=")
	builder.WriteString(eag.DisabilityTypeCode)
	builder.WriteString(", ")
	builder.WriteString("DisabilityTypeDescription=")
	builder.WriteString(eag.DisabilityTypeDescription)
	builder.WriteString(", ")
	builder.WriteString("DisabilityPercentage=")
	builder.WriteString(fmt.Sprintf("%v", eag.DisabilityPercentage))
	builder.WriteString(", ")
	builder.WriteString("DCCS=")
	builder.WriteString(eag.DCCS)
	builder.WriteString(", ")
	builder.WriteString("EntryPostCode=")
	builder.WriteString(eag.EntryPostCode)
	builder.WriteString(", ")
	builder.WriteString("EntryPostDescription=")
	builder.WriteString(eag.EntryPostDescription)
	builder.WriteString(", ")
	builder.WriteString("PresentPostCode=")
	builder.WriteString(eag.PresentPostCode)
	builder.WriteString(", ")
	builder.WriteString("PresentPostDescription=")
	builder.WriteString(eag.PresentPostDescription)
	builder.WriteString(", ")
	builder.WriteString("FeederPostCode=")
	builder.WriteString(eag.FeederPostCode)
	builder.WriteString(", ")
	builder.WriteString("FeederPostDescription=")
	builder.WriteString(eag.FeederPostDescription)
	builder.WriteString(", ")
	builder.WriteString("FeederPostJoiningDate=")
	builder.WriteString(eag.FeederPostJoiningDate)
	builder.WriteString(", ")
	builder.WriteString("DesignationID=")
	builder.WriteString(eag.DesignationID)
	builder.WriteString(", ")
	builder.WriteString("PresentDesignation=")
	builder.WriteString(eag.PresentDesignation)
	builder.WriteString(", ")
	builder.WriteString("EducationCode=")
	builder.WriteString(eag.EducationCode)
	builder.WriteString(", ")
	builder.WriteString("EducationDescription=")
	builder.WriteString(eag.EducationDescription)
	builder.WriteString(", ")
	builder.WriteString("FacilityUniqueID=")
	builder.WriteString(eag.FacilityUniqueID)
	builder.WriteString(", ")
	builder.WriteString("WorkingOfficePincode=")
	builder.WriteString(fmt.Sprintf("%v", eag.WorkingOfficePincode))
	builder.WriteString(", ")
	builder.WriteString("WorkingOfficeFacilityID=")
	builder.WriteString(eag.WorkingOfficeFacilityID)
	builder.WriteString(", ")
	builder.WriteString("WorkingOfficeName=")
	builder.WriteString(eag.WorkingOfficeName)
	builder.WriteString(", ")
	builder.WriteString("WorkingOfficeCircleFacilityID=")
	builder.WriteString(eag.WorkingOfficeCircleFacilityID)
	builder.WriteString(", ")
	builder.WriteString("WorkingOfficeCircleName=")
	builder.WriteString(eag.WorkingOfficeCircleName)
	builder.WriteString(", ")
	builder.WriteString("WorkingOfficeRegionFacilityID=")
	builder.WriteString(eag.WorkingOfficeRegionFacilityID)
	builder.WriteString(", ")
	builder.WriteString("WorkingOfficeRegionName=")
	builder.WriteString(eag.WorkingOfficeRegionName)
	builder.WriteString(", ")
	builder.WriteString("WorkingOfficeDivisionFacilityID=")
	builder.WriteString(eag.WorkingOfficeDivisionFacilityID)
	builder.WriteString(", ")
	builder.WriteString("WorkingOfficeDivisionName=")
	builder.WriteString(eag.WorkingOfficeDivisionName)
	builder.WriteString(", ")
	builder.WriteString("ReportingOfficeFacilityID=")
	builder.WriteString(eag.ReportingOfficeFacilityID)
	builder.WriteString(", ")
	builder.WriteString("ReportingOfficeName=")
	builder.WriteString(eag.ReportingOfficeName)
	builder.WriteString(", ")
	builder.WriteString("LienControllingOfficeID=")
	builder.WriteString(eag.LienControllingOfficeID)
	builder.WriteString(", ")
	builder.WriteString("LienControllingOfficeName=")
	builder.WriteString(eag.LienControllingOfficeName)
	builder.WriteString(", ")
	builder.WriteString("InDeputation=")
	builder.WriteString(eag.InDeputation)
	builder.WriteString(", ")
	builder.WriteString("DeputationType=")
	builder.WriteString(eag.DeputationType)
	builder.WriteString(", ")
	builder.WriteString("DeputationOfficeUniqueId=")
	builder.WriteString(eag.DeputationOfficeUniqueId)
	builder.WriteString(", ")
	builder.WriteString("DeputationOfficeFacilityID=")
	builder.WriteString(eag.DeputationOfficeFacilityID)
	builder.WriteString(", ")
	builder.WriteString("DeputationOfficeName=")
	builder.WriteString(eag.DeputationOfficeName)
	builder.WriteString(", ")
	builder.WriteString("DeputationControllingOfficeID=")
	builder.WriteString(eag.DeputationControllingOfficeID)
	builder.WriteString(", ")
	builder.WriteString("DeputationControllingOfficeName=")
	builder.WriteString(eag.DeputationControllingOfficeName)
	builder.WriteString(", ")
	builder.WriteString("ControllingOfficeFacilityID=")
	builder.WriteString(eag.ControllingOfficeFacilityID)
	builder.WriteString(", ")
	builder.WriteString("ControllingOfficeName=")
	builder.WriteString(eag.ControllingOfficeName)
	builder.WriteString(", ")
	builder.WriteString("NodalOfficeFacilityID=")
	builder.WriteString(eag.NodalOfficeFacilityID)
	builder.WriteString(", ")
	builder.WriteString("NodalOfficeName=")
	builder.WriteString(eag.NodalOfficeName)
	builder.WriteString(", ")
	builder.WriteString("SubdivisionOfficeFacilityID=")
	builder.WriteString(eag.SubdivisionOfficeFacilityID)
	builder.WriteString(", ")
	builder.WriteString("SubdivisionOfficeName=")
	builder.WriteString(eag.SubdivisionOfficeName)
	builder.WriteString(", ")
	builder.WriteString("ExamCityCenterCode=")
	builder.WriteString(fmt.Sprintf("%v", eag.ExamCityCenterCode))
	builder.WriteString(", ")
	builder.WriteString("CenterFacilityId=")
	builder.WriteString(eag.CenterFacilityId)
	builder.WriteString(", ")
	builder.WriteString("CentrePreference=")
	builder.WriteString(eag.CentrePreference)
	builder.WriteString(", ")
	builder.WriteString("Signature=")
	builder.WriteString(eag.Signature)
	builder.WriteString(", ")
	builder.WriteString("Photo=")
	builder.WriteString(eag.Photo)
	builder.WriteString(", ")
	builder.WriteString("CandidatePhoto=")
	builder.WriteString(fmt.Sprintf("%v", eag.CandidatePhoto))
	builder.WriteString(", ")
	builder.WriteString("CandidateSignature=")
	builder.WriteString(fmt.Sprintf("%v", eag.CandidateSignature))
	builder.WriteString(", ")
	builder.WriteString("SignaturePath=")
	builder.WriteString(eag.SignaturePath)
	builder.WriteString(", ")
	builder.WriteString("PhotoPath=")
	builder.WriteString(eag.PhotoPath)
	builder.WriteString(", ")
	builder.WriteString("TempHallTicket=")
	builder.WriteString(eag.TempHallTicket)
	builder.WriteString(", ")
	builder.WriteString("CandidateRemarks=")
	builder.WriteString(eag.CandidateRemarks)
	builder.WriteString(", ")
	builder.WriteString("VAGeneralRemarks=")
	builder.WriteString(eag.VAGeneralRemarks)
	builder.WriteString(", ")
	builder.WriteString("CAGeneralRemarks=")
	builder.WriteString(eag.CAGeneralRemarks)
	builder.WriteString(", ")
	builder.WriteString("NAGeneralRemarks=")
	builder.WriteString(eag.NAGeneralRemarks)
	builder.WriteString(", ")
	builder.WriteString("ApplicationStatus=")
	builder.WriteString(eag.ApplicationStatus)
	builder.WriteString(", ")
	builder.WriteString("Status=")
	builder.WriteString(eag.Status)
	builder.WriteString(", ")
	builder.WriteString("RecommendedStatus=")
	builder.WriteString(eag.RecommendedStatus)
	builder.WriteString(", ")
	builder.WriteString("ApplicationWdlDate=")
	builder.WriteString(eag.ApplicationWdlDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("VA_UserId=")
	builder.WriteString(fmt.Sprintf("%v", eag.VAUserId))
	builder.WriteString(", ")
	builder.WriteString("VA_UserName=")
	builder.WriteString(eag.VAUserName)
	builder.WriteString(", ")
	builder.WriteString("VA_EmployeeID=")
	builder.WriteString(eag.VAEmployeeID)
	builder.WriteString(", ")
	builder.WriteString("VA_EmployeeDesignation=")
	builder.WriteString(eag.VAEmployeeDesignation)
	builder.WriteString(", ")
	builder.WriteString("VA_Remarks=")
	builder.WriteString(eag.VARemarks)
	builder.WriteString(", ")
	builder.WriteString("VA_Date=")
	builder.WriteString(eag.VADate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("CA_UserId=")
	builder.WriteString(fmt.Sprintf("%v", eag.CAUserId))
	builder.WriteString(", ")
	builder.WriteString("CA_UserName=")
	builder.WriteString(eag.CAUserName)
	builder.WriteString(", ")
	builder.WriteString("CA_EmployeeID=")
	builder.WriteString(eag.CAEmployeeID)
	builder.WriteString(", ")
	builder.WriteString("CA_EmployeeDesignation=")
	builder.WriteString(eag.CAEmployeeDesignation)
	builder.WriteString(", ")
	builder.WriteString("CA_Remarks=")
	builder.WriteString(eag.CARemarks)
	builder.WriteString(", ")
	builder.WriteString("CA_Date=")
	builder.WriteString(eag.CADate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("NA_UserId=")
	builder.WriteString(fmt.Sprintf("%v", eag.NAUserId))
	builder.WriteString(", ")
	builder.WriteString("NA_UserName=")
	builder.WriteString(eag.NAUserName)
	builder.WriteString(", ")
	builder.WriteString("NA_EmployeeID=")
	builder.WriteString(eag.NAEmployeeID)
	builder.WriteString(", ")
	builder.WriteString("NA_EmployeeDesignation=")
	builder.WriteString(eag.NAEmployeeDesignation)
	builder.WriteString(", ")
	builder.WriteString("NA_Remarks=")
	builder.WriteString(eag.NARemarks)
	builder.WriteString(", ")
	builder.WriteString("NA_Date=")
	builder.WriteString(eag.NADate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("AppliactionRemarks=")
	builder.WriteString(eag.AppliactionRemarks)
	builder.WriteString(", ")
	builder.WriteString("CadrePreferences=")
	builder.WriteString(fmt.Sprintf("%v", eag.CadrePreferences))
	builder.WriteString(", ")
	builder.WriteString("CAPreviousRemarks=")
	builder.WriteString(eag.CAPreviousRemarks)
	builder.WriteString(", ")
	builder.WriteString("PunishmentStatus=")
	builder.WriteString(fmt.Sprintf("%v", eag.PunishmentStatus))
	builder.WriteString(", ")
	builder.WriteString("DisciplinaryCaseStatus=")
	builder.WriteString(fmt.Sprintf("%v", eag.DisciplinaryCaseStatus))
	builder.WriteString(", ")
	if v := eag.GenerateHallTicketFlag; v != nil {
		builder.WriteString("GenerateHallTicketFlag=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("HallTicketNumber=")
	builder.WriteString(eag.HallTicketNumber)
	builder.WriteString(", ")
	builder.WriteString("HallTicketGeneratedFlag=")
	builder.WriteString(fmt.Sprintf("%v", eag.HallTicketGeneratedFlag))
	builder.WriteString(", ")
	if v := eag.GenerateHallTicketFlagByNO; v != nil {
		builder.WriteString("GenerateHallTicketFlagByNO=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("HallTicketGeneratedDate=")
	builder.WriteString(eag.HallTicketGeneratedDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("TemporaryHallTicket=")
	builder.WriteString(eag.TemporaryHallTicket)
	builder.WriteString(", ")
	builder.WriteString("OptionUsed=")
	builder.WriteString(eag.OptionUsed)
	builder.WriteString(", ")
	builder.WriteString("Remarks=")
	builder.WriteString(eag.Remarks)
	builder.WriteString(", ")
	builder.WriteString("Cadre=")
	builder.WriteString(eag.Cadre)
	builder.WriteString(", ")
	builder.WriteString("EmployeePost=")
	builder.WriteString(eag.EmployeePost)
	builder.WriteString(", ")
	builder.WriteString("DOJInEligiblePost=")
	builder.WriteString(eag.DOJInEligiblePost)
	builder.WriteString(", ")
	builder.WriteString("DivisionPreferences=")
	builder.WriteString(fmt.Sprintf("%v", eag.DivisionPreferences))
	builder.WriteString(", ")
	builder.WriteString("RoleUserCode=")
	builder.WriteString(fmt.Sprintf("%v", eag.RoleUserCode))
	builder.WriteString(", ")
	builder.WriteString("ServiceLength=")
	builder.WriteString(fmt.Sprintf("%v", eag.ServiceLength))
	builder.WriteString(", ")
	builder.WriteString("NonQualifyingService=")
	builder.WriteString(fmt.Sprintf("%v", eag.NonQualifyingService))
	builder.WriteString(", ")
	builder.WriteString("DCInPresentCadre=")
	builder.WriteString(eag.DCInPresentCadre)
	builder.WriteString(", ")
	builder.WriteString("ReportingOfficeID=")
	builder.WriteString(eag.ReportingOfficeID)
	builder.WriteString(", ")
	builder.WriteString("PostPreferences=")
	builder.WriteString(fmt.Sprintf("%v", eag.PostPreferences))
	builder.WriteString(", ")
	builder.WriteString("UnitPreferences=")
	builder.WriteString(fmt.Sprintf("%v", eag.UnitPreferences))
	builder.WriteString(", ")
	builder.WriteString("CenterId=")
	builder.WriteString(fmt.Sprintf("%v", eag.CenterId))
	builder.WriteString(", ")
	builder.WriteString("CenterCode=")
	builder.WriteString(fmt.Sprintf("%v", eag.CenterCode))
	builder.WriteString(", ")
	builder.WriteString("ClaimingQualifyingService=")
	builder.WriteString(eag.ClaimingQualifyingService)
	builder.WriteString(", ")
	builder.WriteString("DeputationOfficePincode=")
	builder.WriteString(eag.DeputationOfficePincode)
	builder.WriteString(", ")
	if v := eag.CircleSID; v != nil {
		builder.WriteString("CircleSID=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("FacilityName=")
	builder.WriteString(eag.FacilityName)
	builder.WriteString(", ")
	builder.WriteString("UpdatedAt=")
	builder.WriteString(eag.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("UpdatedBy=")
	builder.WriteString(eag.UpdatedBy)
	builder.WriteString(", ")
	builder.WriteString("ExamCenterHall=")
	builder.WriteString(fmt.Sprintf("%v", eag.ExamCenterHall))
	builder.WriteString(", ")
	builder.WriteString("HallName=")
	builder.WriteString(eag.HallName)
	builder.WriteString(", ")
	builder.WriteString("GDSEngagement=")
	builder.WriteString(fmt.Sprintf("%v", eag.GDSEngagement))
	builder.WriteString(", ")
	builder.WriteString("PMMailGuardMTSEngagement=")
	builder.WriteString(fmt.Sprintf("%v", eag.PMMailGuardMTSEngagement))
	builder.WriteByte(')')
	return builder.String()
}

// Exam_Applications_GDSPMs is a parsable slice of Exam_Applications_GDSPM.
type Exam_Applications_GDSPMs []*Exam_Applications_GDSPM
