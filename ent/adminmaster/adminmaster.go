// Code generated by ent, DO NOT EDIT.

package adminmaster

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the adminmaster type in the database.
	Label = "admin_master"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldEmployeeId holds the string denoting the employeeid field in the database.
	FieldEmployeeId = "employee_id"
	// FieldEmployeeName holds the string denoting the employeename field in the database.
	FieldEmployeeName = "employee_name"
	// FieldDesignation holds the string denoting the designation field in the database.
	FieldDesignation = "designation"
	// FieldRoleUserCode holds the string denoting the roleusercode field in the database.
	FieldRoleUserCode = "role_user_code"
	// FieldRoleUserDescription holds the string denoting the roleuserdescription field in the database.
	FieldRoleUserDescription = "role_user_description"
	// FieldMobile holds the string denoting the mobile field in the database.
	FieldMobile = "mobile"
	// FieldEmailID holds the string denoting the emailid field in the database.
	FieldEmailID = "email_id"
	// FieldUserName holds the string denoting the username field in the database.
	FieldUserName = "user_name"
	// FieldPassword holds the string denoting the password field in the database.
	FieldPassword = "password"
	// FieldFacilityIDUniqueid holds the string denoting the facilityiduniqueid field in the database.
	FieldFacilityIDUniqueid = "facility_id_uniqueid"
	// FieldFacilityID holds the string denoting the facilityid field in the database.
	FieldFacilityID = "facility_id"
	// FieldAuthorityFacilityName holds the string denoting the authorityfacilityname field in the database.
	FieldAuthorityFacilityName = "authority_facility_name"
	// FieldFacilityType holds the string denoting the facilitytype field in the database.
	FieldFacilityType = "facility_type"
	// FieldReportingOfficeFacilityId holds the string denoting the reportingofficefacilityid field in the database.
	FieldReportingOfficeFacilityId = "reporting_office_facility_id"
	// FieldReportingOfficeFacilityName holds the string denoting the reportingofficefacilityname field in the database.
	FieldReportingOfficeFacilityName = "reporting_office_facility_name"
	// FieldCircleOfficeFacilityId holds the string denoting the circleofficefacilityid field in the database.
	FieldCircleOfficeFacilityId = "circle_office_facility_id"
	// FieldCircleOfficeName holds the string denoting the circleofficename field in the database.
	FieldCircleOfficeName = "circle_office_name"
	// FieldUidToken holds the string denoting the uidtoken field in the database.
	FieldUidToken = "uid_token"
	// FieldStatuss holds the string denoting the statuss field in the database.
	FieldStatuss = "statuss"
	// FieldOTP holds the string denoting the otp field in the database.
	FieldOTP = "otp"
	// FieldOTPSavedTime holds the string denoting the otpsavedtime field in the database.
	FieldOTPSavedTime = "otp_saved_time"
	// FieldOTPTriggeredTime holds the string denoting the otptriggeredtime field in the database.
	FieldOTPTriggeredTime = "otp_triggered_time"
	// FieldOTPExpiryTime holds the string denoting the otpexpirytime field in the database.
	FieldOTPExpiryTime = "otp_expiry_time"
	// FieldOTPRemarks holds the string denoting the otpremarks field in the database.
	FieldOTPRemarks = "otp_remarks"
	// FieldCreatedById holds the string denoting the createdbyid field in the database.
	FieldCreatedById = "created_by_id"
	// FieldCreatedByUserName holds the string denoting the createdbyusername field in the database.
	FieldCreatedByUserName = "created_by_user_name"
	// FieldCreatedByEmpId holds the string denoting the createdbyempid field in the database.
	FieldCreatedByEmpId = "created_by_emp_id"
	// FieldCreatedByDesignation holds the string denoting the createdbydesignation field in the database.
	FieldCreatedByDesignation = "created_by_designation"
	// FieldCreatedDate holds the string denoting the createddate field in the database.
	FieldCreatedDate = "created_date"
	// FieldDeletedById holds the string denoting the deletedbyid field in the database.
	FieldDeletedById = "deleted_by_id"
	// FieldDeletedByUserName holds the string denoting the deletedbyusername field in the database.
	FieldDeletedByUserName = "deleted_by_user_name"
	// FieldDeletedByEmpId holds the string denoting the deletedbyempid field in the database.
	FieldDeletedByEmpId = "deleted_by_emp_id"
	// FieldDeletedByDesignation holds the string denoting the deletedbydesignation field in the database.
	FieldDeletedByDesignation = "deleted_by_designation"
	// FieldDeletedDate holds the string denoting the deleteddate field in the database.
	FieldDeletedDate = "deleted_date"
	// FieldModifiedById holds the string denoting the modifiedbyid field in the database.
	FieldModifiedById = "modified_by_id"
	// FieldModifiedByUserName holds the string denoting the modifiedbyusername field in the database.
	FieldModifiedByUserName = "modified_by_user_name"
	// FieldModifiedByEmpId holds the string denoting the modifiedbyempid field in the database.
	FieldModifiedByEmpId = "modified_by_emp_id"
	// FieldModifiedByDesignantion holds the string denoting the modifiedbydesignantion field in the database.
	FieldModifiedByDesignantion = "modified_by_designantion"
	// FieldModifiedDate holds the string denoting the modifieddate field in the database.
	FieldModifiedDate = "modified_date"
	// FieldDeletedBy holds the string denoting the deletedby field in the database.
	FieldDeletedBy = "deleted_by"
	// FieldDeletedbyid holds the string denoting the deletedbyid field in the database.
	FieldDeletedbyid = "deletedbyid"
	// FieldNewPasswordRequest holds the string denoting the newpasswordrequest field in the database.
	FieldNewPasswordRequest = "new_password_request"
	// FieldEventTime holds the string denoting the eventtime field in the database.
	FieldEventTime = "event_time"
	// FieldUUID holds the string denoting the uuid field in the database.
	FieldUUID = "uuid"
	// FieldUpdatedby holds the string denoting the updatedby field in the database.
	FieldUpdatedby = "updatedby"
	// FieldUpdatedDate holds the string denoting the updateddate field in the database.
	FieldUpdatedDate = "updated_date"
	// EdgeLogData holds the string denoting the logdata edge name in mutations.
	EdgeLogData = "LogData"
	// LogsFieldID holds the string denoting the ID field of the Logs.
	LogsFieldID = "ID"
	// Table holds the table name of the adminmaster in the database.
	Table = "AdminMaster"
	// LogDataTable is the table that holds the LogData relation/edge.
	LogDataTable = "LogsTable"
	// LogDataInverseTable is the table name for the Logs entity.
	// It exists in this package in order to avoid circular dependency with the "logs" package.
	LogDataInverseTable = "LogsTable"
	// LogDataColumn is the table column denoting the LogData relation/edge.
	LogDataColumn = "admin_master_log_data"
)

// Columns holds all SQL columns for adminmaster fields.
var Columns = []string{
	FieldID,
	FieldEmployeeId,
	FieldEmployeeName,
	FieldDesignation,
	FieldRoleUserCode,
	FieldRoleUserDescription,
	FieldMobile,
	FieldEmailID,
	FieldUserName,
	FieldPassword,
	FieldFacilityIDUniqueid,
	FieldFacilityID,
	FieldAuthorityFacilityName,
	FieldFacilityType,
	FieldReportingOfficeFacilityId,
	FieldReportingOfficeFacilityName,
	FieldCircleOfficeFacilityId,
	FieldCircleOfficeName,
	FieldUidToken,
	FieldStatuss,
	FieldOTP,
	FieldOTPSavedTime,
	FieldOTPTriggeredTime,
	FieldOTPExpiryTime,
	FieldOTPRemarks,
	FieldCreatedById,
	FieldCreatedByUserName,
	FieldCreatedByEmpId,
	FieldCreatedByDesignation,
	FieldCreatedDate,
	FieldDeletedById,
	FieldDeletedByUserName,
	FieldDeletedByEmpId,
	FieldDeletedByDesignation,
	FieldDeletedDate,
	FieldModifiedById,
	FieldModifiedByUserName,
	FieldModifiedByEmpId,
	FieldModifiedByDesignantion,
	FieldModifiedDate,
	FieldDeletedBy,
	FieldDeletedbyid,
	FieldNewPasswordRequest,
	FieldEventTime,
	FieldUUID,
	FieldUpdatedby,
	FieldUpdatedDate,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultEmployeeId holds the default value on creation for the "EmployeeId" field.
	DefaultEmployeeId int64
	// DefaultRoleUserCode holds the default value on creation for the "RoleUserCode" field.
	DefaultRoleUserCode int32
	// DefaultPassword holds the default value on creation for the "Password" field.
	DefaultPassword string
	// DefaultFacilityIDUniqueid holds the default value on creation for the "FacilityIDUniqueid" field.
	DefaultFacilityIDUniqueid int64
	// DefaultStatuss holds the default value on creation for the "Statuss" field.
	DefaultStatuss string
	// DefaultOTP holds the default value on creation for the "OTP" field.
	DefaultOTP int32
	// DefaultOTPSavedTime holds the default value on creation for the "OTPSavedTime" field.
	DefaultOTPSavedTime func() time.Time
	// DefaultOTPTriggeredTime holds the default value on creation for the "OTPTriggeredTime" field.
	DefaultOTPTriggeredTime func() time.Time
	// DefaultOTPExpiryTime holds the default value on creation for the "OTPExpiryTime" field.
	DefaultOTPExpiryTime func() time.Time
	// DefaultCreatedById holds the default value on creation for the "CreatedById" field.
	DefaultCreatedById int64
	// DefaultCreatedByEmpId holds the default value on creation for the "CreatedByEmpId" field.
	DefaultCreatedByEmpId int64
	// DefaultCreatedDate holds the default value on creation for the "CreatedDate" field.
	DefaultCreatedDate func() time.Time
	// DefaultDeletedById holds the default value on creation for the "DeletedById" field.
	DefaultDeletedById int64
	// DefaultDeletedByEmpId holds the default value on creation for the "DeletedByEmpId" field.
	DefaultDeletedByEmpId int64
	// DefaultDeletedDate holds the default value on creation for the "DeletedDate" field.
	DefaultDeletedDate func() time.Time
	// DefaultModifiedById holds the default value on creation for the "ModifiedById" field.
	DefaultModifiedById int
	// DefaultModifiedByEmpId holds the default value on creation for the "ModifiedByEmpId" field.
	DefaultModifiedByEmpId int64
	// DefaultModifiedDate holds the default value on creation for the "ModifiedDate" field.
	DefaultModifiedDate func() time.Time
	// DefaultEventTime holds the default value on creation for the "EventTime" field.
	DefaultEventTime func() time.Time
	// DefaultUUID holds the default value on creation for the "UUID" field.
	DefaultUUID int64
	// DefaultUpdatedDate holds the default value on creation for the "updatedDate" field.
	DefaultUpdatedDate func() time.Time
)

// OrderOption defines the ordering options for the AdminMaster queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByEmployeeId orders the results by the EmployeeId field.
func ByEmployeeId(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmployeeId, opts...).ToFunc()
}

// ByEmployeeName orders the results by the EmployeeName field.
func ByEmployeeName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmployeeName, opts...).ToFunc()
}

// ByDesignation orders the results by the Designation field.
func ByDesignation(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDesignation, opts...).ToFunc()
}

// ByRoleUserCode orders the results by the RoleUserCode field.
func ByRoleUserCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRoleUserCode, opts...).ToFunc()
}

// ByRoleUserDescription orders the results by the RoleUserDescription field.
func ByRoleUserDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRoleUserDescription, opts...).ToFunc()
}

// ByMobile orders the results by the Mobile field.
func ByMobile(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMobile, opts...).ToFunc()
}

// ByEmailID orders the results by the EmailID field.
func ByEmailID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmailID, opts...).ToFunc()
}

// ByUserName orders the results by the UserName field.
func ByUserName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserName, opts...).ToFunc()
}

// ByPassword orders the results by the Password field.
func ByPassword(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPassword, opts...).ToFunc()
}

// ByFacilityIDUniqueid orders the results by the FacilityIDUniqueid field.
func ByFacilityIDUniqueid(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFacilityIDUniqueid, opts...).ToFunc()
}

// ByFacilityID orders the results by the FacilityID field.
func ByFacilityID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFacilityID, opts...).ToFunc()
}

// ByAuthorityFacilityName orders the results by the AuthorityFacilityName field.
func ByAuthorityFacilityName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAuthorityFacilityName, opts...).ToFunc()
}

// ByFacilityType orders the results by the FacilityType field.
func ByFacilityType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFacilityType, opts...).ToFunc()
}

// ByReportingOfficeFacilityId orders the results by the ReportingOfficeFacilityId field.
func ByReportingOfficeFacilityId(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldReportingOfficeFacilityId, opts...).ToFunc()
}

// ByReportingOfficeFacilityName orders the results by the ReportingOfficeFacilityName field.
func ByReportingOfficeFacilityName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldReportingOfficeFacilityName, opts...).ToFunc()
}

// ByCircleOfficeFacilityId orders the results by the CircleOfficeFacilityId field.
func ByCircleOfficeFacilityId(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCircleOfficeFacilityId, opts...).ToFunc()
}

// ByCircleOfficeName orders the results by the CircleOfficeName field.
func ByCircleOfficeName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCircleOfficeName, opts...).ToFunc()
}

// ByUidToken orders the results by the UidToken field.
func ByUidToken(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUidToken, opts...).ToFunc()
}

// ByStatuss orders the results by the Statuss field.
func ByStatuss(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatuss, opts...).ToFunc()
}

// ByOTP orders the results by the OTP field.
func ByOTP(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOTP, opts...).ToFunc()
}

// ByOTPSavedTime orders the results by the OTPSavedTime field.
func ByOTPSavedTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOTPSavedTime, opts...).ToFunc()
}

// ByOTPTriggeredTime orders the results by the OTPTriggeredTime field.
func ByOTPTriggeredTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOTPTriggeredTime, opts...).ToFunc()
}

// ByOTPExpiryTime orders the results by the OTPExpiryTime field.
func ByOTPExpiryTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOTPExpiryTime, opts...).ToFunc()
}

// ByOTPRemarks orders the results by the OTPRemarks field.
func ByOTPRemarks(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOTPRemarks, opts...).ToFunc()
}

// ByCreatedById orders the results by the CreatedById field.
func ByCreatedById(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedById, opts...).ToFunc()
}

// ByCreatedByUserName orders the results by the CreatedByUserName field.
func ByCreatedByUserName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedByUserName, opts...).ToFunc()
}

// ByCreatedByEmpId orders the results by the CreatedByEmpId field.
func ByCreatedByEmpId(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedByEmpId, opts...).ToFunc()
}

// ByCreatedByDesignation orders the results by the CreatedByDesignation field.
func ByCreatedByDesignation(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedByDesignation, opts...).ToFunc()
}

// ByCreatedDate orders the results by the CreatedDate field.
func ByCreatedDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedDate, opts...).ToFunc()
}

// ByDeletedById orders the results by the DeletedById field.
func ByDeletedById(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedById, opts...).ToFunc()
}

// ByDeletedByUserName orders the results by the DeletedByUserName field.
func ByDeletedByUserName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedByUserName, opts...).ToFunc()
}

// ByDeletedByEmpId orders the results by the DeletedByEmpId field.
func ByDeletedByEmpId(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedByEmpId, opts...).ToFunc()
}

// ByDeletedByDesignation orders the results by the DeletedByDesignation field.
func ByDeletedByDesignation(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedByDesignation, opts...).ToFunc()
}

// ByDeletedDate orders the results by the DeletedDate field.
func ByDeletedDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedDate, opts...).ToFunc()
}

// ByModifiedById orders the results by the ModifiedById field.
func ByModifiedById(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldModifiedById, opts...).ToFunc()
}

// ByModifiedByUserName orders the results by the ModifiedByUserName field.
func ByModifiedByUserName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldModifiedByUserName, opts...).ToFunc()
}

// ByModifiedByEmpId orders the results by the ModifiedByEmpId field.
func ByModifiedByEmpId(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldModifiedByEmpId, opts...).ToFunc()
}

// ByModifiedByDesignantion orders the results by the ModifiedByDesignantion field.
func ByModifiedByDesignantion(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldModifiedByDesignantion, opts...).ToFunc()
}

// ByModifiedDate orders the results by the ModifiedDate field.
func ByModifiedDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldModifiedDate, opts...).ToFunc()
}

// ByDeletedBy orders the results by the DeletedBy field.
func ByDeletedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedBy, opts...).ToFunc()
}

// ByDeletedbyid orders the results by the Deletedbyid field.
func ByDeletedbyid(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedbyid, opts...).ToFunc()
}

// ByNewPasswordRequest orders the results by the NewPasswordRequest field.
func ByNewPasswordRequest(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNewPasswordRequest, opts...).ToFunc()
}

// ByEventTime orders the results by the EventTime field.
func ByEventTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEventTime, opts...).ToFunc()
}

// ByUUID orders the results by the UUID field.
func ByUUID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUUID, opts...).ToFunc()
}

// ByUpdatedby orders the results by the Updatedby field.
func ByUpdatedby(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedby, opts...).ToFunc()
}

// ByUpdatedDate orders the results by the updatedDate field.
func ByUpdatedDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedDate, opts...).ToFunc()
}

// ByLogDataCount orders the results by LogData count.
func ByLogDataCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newLogDataStep(), opts...)
	}
}

// ByLogData orders the results by LogData terms.
func ByLogData(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newLogDataStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newLogDataStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(LogDataInverseTable, LogsFieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, LogDataTable, LogDataColumn),
	)
}
