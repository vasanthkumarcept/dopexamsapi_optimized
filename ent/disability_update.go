// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"recruit/ent/disability"
	"recruit/ent/exampapers"
	"recruit/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// DisabilityUpdate is the builder for updating Disability entities.
type DisabilityUpdate struct {
	config
	hooks    []Hook
	mutation *DisabilityMutation
}

// Where appends a list predicates to the DisabilityUpdate builder.
func (du *DisabilityUpdate) Where(ps ...predicate.Disability) *DisabilityUpdate {
	du.mutation.Where(ps...)
	return du
}

// SetDisabilityTypeCode sets the "DisabilityTypeCode" field.
func (du *DisabilityUpdate) SetDisabilityTypeCode(s string) *DisabilityUpdate {
	du.mutation.SetDisabilityTypeCode(s)
	return du
}

// SetDisabilityTypeDescription sets the "DisabilityTypeDescription" field.
func (du *DisabilityUpdate) SetDisabilityTypeDescription(s string) *DisabilityUpdate {
	du.mutation.SetDisabilityTypeDescription(s)
	return du
}

// SetDisabilityPercentage sets the "DisabilityPercentage" field.
func (du *DisabilityUpdate) SetDisabilityPercentage(i int32) *DisabilityUpdate {
	du.mutation.ResetDisabilityPercentage()
	du.mutation.SetDisabilityPercentage(i)
	return du
}

// AddDisabilityPercentage adds i to the "DisabilityPercentage" field.
func (du *DisabilityUpdate) AddDisabilityPercentage(i int32) *DisabilityUpdate {
	du.mutation.AddDisabilityPercentage(i)
	return du
}

// SetDisabilityFlag sets the "DisabilityFlag" field.
func (du *DisabilityUpdate) SetDisabilityFlag(df disability.DisabilityFlag) *DisabilityUpdate {
	du.mutation.SetDisabilityFlag(df)
	return du
}

// SetHallCategoryCode sets the "HallCategoryCode" field.
func (du *DisabilityUpdate) SetHallCategoryCode(s string) *DisabilityUpdate {
	du.mutation.SetHallCategoryCode(s)
	return du
}

// SetNillableHallCategoryCode sets the "HallCategoryCode" field if the given value is not nil.
func (du *DisabilityUpdate) SetNillableHallCategoryCode(s *string) *DisabilityUpdate {
	if s != nil {
		du.SetHallCategoryCode(*s)
	}
	return du
}

// ClearHallCategoryCode clears the value of the "HallCategoryCode" field.
func (du *DisabilityUpdate) ClearHallCategoryCode() *DisabilityUpdate {
	du.mutation.ClearHallCategoryCode()
	return du
}

// SetOrderNumber sets the "OrderNumber" field.
func (du *DisabilityUpdate) SetOrderNumber(s string) *DisabilityUpdate {
	du.mutation.SetOrderNumber(s)
	return du
}

// SetNillableOrderNumber sets the "OrderNumber" field if the given value is not nil.
func (du *DisabilityUpdate) SetNillableOrderNumber(s *string) *DisabilityUpdate {
	if s != nil {
		du.SetOrderNumber(*s)
	}
	return du
}

// ClearOrderNumber clears the value of the "OrderNumber" field.
func (du *DisabilityUpdate) ClearOrderNumber() *DisabilityUpdate {
	du.mutation.ClearOrderNumber()
	return du
}

// SetCreatedById sets the "CreatedById" field.
func (du *DisabilityUpdate) SetCreatedById(i int64) *DisabilityUpdate {
	du.mutation.ResetCreatedById()
	du.mutation.SetCreatedById(i)
	return du
}

// SetNillableCreatedById sets the "CreatedById" field if the given value is not nil.
func (du *DisabilityUpdate) SetNillableCreatedById(i *int64) *DisabilityUpdate {
	if i != nil {
		du.SetCreatedById(*i)
	}
	return du
}

// AddCreatedById adds i to the "CreatedById" field.
func (du *DisabilityUpdate) AddCreatedById(i int64) *DisabilityUpdate {
	du.mutation.AddCreatedById(i)
	return du
}

// ClearCreatedById clears the value of the "CreatedById" field.
func (du *DisabilityUpdate) ClearCreatedById() *DisabilityUpdate {
	du.mutation.ClearCreatedById()
	return du
}

// SetCreatedByUserName sets the "CreatedByUserName" field.
func (du *DisabilityUpdate) SetCreatedByUserName(s string) *DisabilityUpdate {
	du.mutation.SetCreatedByUserName(s)
	return du
}

// SetNillableCreatedByUserName sets the "CreatedByUserName" field if the given value is not nil.
func (du *DisabilityUpdate) SetNillableCreatedByUserName(s *string) *DisabilityUpdate {
	if s != nil {
		du.SetCreatedByUserName(*s)
	}
	return du
}

// ClearCreatedByUserName clears the value of the "CreatedByUserName" field.
func (du *DisabilityUpdate) ClearCreatedByUserName() *DisabilityUpdate {
	du.mutation.ClearCreatedByUserName()
	return du
}

// SetCreatedByEmployeeId sets the "CreatedByEmployeeId" field.
func (du *DisabilityUpdate) SetCreatedByEmployeeId(s string) *DisabilityUpdate {
	du.mutation.SetCreatedByEmployeeId(s)
	return du
}

// SetNillableCreatedByEmployeeId sets the "CreatedByEmployeeId" field if the given value is not nil.
func (du *DisabilityUpdate) SetNillableCreatedByEmployeeId(s *string) *DisabilityUpdate {
	if s != nil {
		du.SetCreatedByEmployeeId(*s)
	}
	return du
}

// ClearCreatedByEmployeeId clears the value of the "CreatedByEmployeeId" field.
func (du *DisabilityUpdate) ClearCreatedByEmployeeId() *DisabilityUpdate {
	du.mutation.ClearCreatedByEmployeeId()
	return du
}

// SetCreatedByDesignation sets the "CreatedByDesignation" field.
func (du *DisabilityUpdate) SetCreatedByDesignation(s string) *DisabilityUpdate {
	du.mutation.SetCreatedByDesignation(s)
	return du
}

// SetNillableCreatedByDesignation sets the "CreatedByDesignation" field if the given value is not nil.
func (du *DisabilityUpdate) SetNillableCreatedByDesignation(s *string) *DisabilityUpdate {
	if s != nil {
		du.SetCreatedByDesignation(*s)
	}
	return du
}

// ClearCreatedByDesignation clears the value of the "CreatedByDesignation" field.
func (du *DisabilityUpdate) ClearCreatedByDesignation() *DisabilityUpdate {
	du.mutation.ClearCreatedByDesignation()
	return du
}

// SetCreatedDate sets the "CreatedDate" field.
func (du *DisabilityUpdate) SetCreatedDate(t time.Time) *DisabilityUpdate {
	du.mutation.SetCreatedDate(t)
	return du
}

// SetNillableCreatedDate sets the "CreatedDate" field if the given value is not nil.
func (du *DisabilityUpdate) SetNillableCreatedDate(t *time.Time) *DisabilityUpdate {
	if t != nil {
		du.SetCreatedDate(*t)
	}
	return du
}

// ClearCreatedDate clears the value of the "CreatedDate" field.
func (du *DisabilityUpdate) ClearCreatedDate() *DisabilityUpdate {
	du.mutation.ClearCreatedDate()
	return du
}

// SetVerifiedById sets the "VerifiedById" field.
func (du *DisabilityUpdate) SetVerifiedById(i int64) *DisabilityUpdate {
	du.mutation.ResetVerifiedById()
	du.mutation.SetVerifiedById(i)
	return du
}

// SetNillableVerifiedById sets the "VerifiedById" field if the given value is not nil.
func (du *DisabilityUpdate) SetNillableVerifiedById(i *int64) *DisabilityUpdate {
	if i != nil {
		du.SetVerifiedById(*i)
	}
	return du
}

// AddVerifiedById adds i to the "VerifiedById" field.
func (du *DisabilityUpdate) AddVerifiedById(i int64) *DisabilityUpdate {
	du.mutation.AddVerifiedById(i)
	return du
}

// ClearVerifiedById clears the value of the "VerifiedById" field.
func (du *DisabilityUpdate) ClearVerifiedById() *DisabilityUpdate {
	du.mutation.ClearVerifiedById()
	return du
}

// SetVerifiedByUserName sets the "VerifiedByUserName" field.
func (du *DisabilityUpdate) SetVerifiedByUserName(s string) *DisabilityUpdate {
	du.mutation.SetVerifiedByUserName(s)
	return du
}

// SetNillableVerifiedByUserName sets the "VerifiedByUserName" field if the given value is not nil.
func (du *DisabilityUpdate) SetNillableVerifiedByUserName(s *string) *DisabilityUpdate {
	if s != nil {
		du.SetVerifiedByUserName(*s)
	}
	return du
}

// ClearVerifiedByUserName clears the value of the "VerifiedByUserName" field.
func (du *DisabilityUpdate) ClearVerifiedByUserName() *DisabilityUpdate {
	du.mutation.ClearVerifiedByUserName()
	return du
}

// SetVerifiedByEmployeeId sets the "VerifiedByEmployeeId" field.
func (du *DisabilityUpdate) SetVerifiedByEmployeeId(s string) *DisabilityUpdate {
	du.mutation.SetVerifiedByEmployeeId(s)
	return du
}

// SetNillableVerifiedByEmployeeId sets the "VerifiedByEmployeeId" field if the given value is not nil.
func (du *DisabilityUpdate) SetNillableVerifiedByEmployeeId(s *string) *DisabilityUpdate {
	if s != nil {
		du.SetVerifiedByEmployeeId(*s)
	}
	return du
}

// ClearVerifiedByEmployeeId clears the value of the "VerifiedByEmployeeId" field.
func (du *DisabilityUpdate) ClearVerifiedByEmployeeId() *DisabilityUpdate {
	du.mutation.ClearVerifiedByEmployeeId()
	return du
}

// SetVerifiedByDesignation sets the "VerifiedByDesignation" field.
func (du *DisabilityUpdate) SetVerifiedByDesignation(s string) *DisabilityUpdate {
	du.mutation.SetVerifiedByDesignation(s)
	return du
}

// SetNillableVerifiedByDesignation sets the "VerifiedByDesignation" field if the given value is not nil.
func (du *DisabilityUpdate) SetNillableVerifiedByDesignation(s *string) *DisabilityUpdate {
	if s != nil {
		du.SetVerifiedByDesignation(*s)
	}
	return du
}

// ClearVerifiedByDesignation clears the value of the "VerifiedByDesignation" field.
func (du *DisabilityUpdate) ClearVerifiedByDesignation() *DisabilityUpdate {
	du.mutation.ClearVerifiedByDesignation()
	return du
}

// SetVerifiedDate sets the "VerifiedDate" field.
func (du *DisabilityUpdate) SetVerifiedDate(t time.Time) *DisabilityUpdate {
	du.mutation.SetVerifiedDate(t)
	return du
}

// SetNillableVerifiedDate sets the "VerifiedDate" field if the given value is not nil.
func (du *DisabilityUpdate) SetNillableVerifiedDate(t *time.Time) *DisabilityUpdate {
	if t != nil {
		du.SetVerifiedDate(*t)
	}
	return du
}

// ClearVerifiedDate clears the value of the "VerifiedDate" field.
func (du *DisabilityUpdate) ClearVerifiedDate() *DisabilityUpdate {
	du.mutation.ClearVerifiedDate()
	return du
}

// SetStatuss sets the "Statuss" field.
func (du *DisabilityUpdate) SetStatuss(s string) *DisabilityUpdate {
	du.mutation.SetStatuss(s)
	return du
}

// SetNillableStatuss sets the "Statuss" field if the given value is not nil.
func (du *DisabilityUpdate) SetNillableStatuss(s *string) *DisabilityUpdate {
	if s != nil {
		du.SetStatuss(*s)
	}
	return du
}

// ClearStatuss clears the value of the "Statuss" field.
func (du *DisabilityUpdate) ClearStatuss() *DisabilityUpdate {
	du.mutation.ClearStatuss()
	return du
}

// SetDeletedById sets the "DeletedById" field.
func (du *DisabilityUpdate) SetDeletedById(i int64) *DisabilityUpdate {
	du.mutation.ResetDeletedById()
	du.mutation.SetDeletedById(i)
	return du
}

// SetNillableDeletedById sets the "DeletedById" field if the given value is not nil.
func (du *DisabilityUpdate) SetNillableDeletedById(i *int64) *DisabilityUpdate {
	if i != nil {
		du.SetDeletedById(*i)
	}
	return du
}

// AddDeletedById adds i to the "DeletedById" field.
func (du *DisabilityUpdate) AddDeletedById(i int64) *DisabilityUpdate {
	du.mutation.AddDeletedById(i)
	return du
}

// ClearDeletedById clears the value of the "DeletedById" field.
func (du *DisabilityUpdate) ClearDeletedById() *DisabilityUpdate {
	du.mutation.ClearDeletedById()
	return du
}

// SetDeletedByUserName sets the "DeletedByUserName" field.
func (du *DisabilityUpdate) SetDeletedByUserName(s string) *DisabilityUpdate {
	du.mutation.SetDeletedByUserName(s)
	return du
}

// SetNillableDeletedByUserName sets the "DeletedByUserName" field if the given value is not nil.
func (du *DisabilityUpdate) SetNillableDeletedByUserName(s *string) *DisabilityUpdate {
	if s != nil {
		du.SetDeletedByUserName(*s)
	}
	return du
}

// ClearDeletedByUserName clears the value of the "DeletedByUserName" field.
func (du *DisabilityUpdate) ClearDeletedByUserName() *DisabilityUpdate {
	du.mutation.ClearDeletedByUserName()
	return du
}

// SetDeletedByEmployeeId sets the "DeletedByEmployeeId" field.
func (du *DisabilityUpdate) SetDeletedByEmployeeId(s string) *DisabilityUpdate {
	du.mutation.SetDeletedByEmployeeId(s)
	return du
}

// SetNillableDeletedByEmployeeId sets the "DeletedByEmployeeId" field if the given value is not nil.
func (du *DisabilityUpdate) SetNillableDeletedByEmployeeId(s *string) *DisabilityUpdate {
	if s != nil {
		du.SetDeletedByEmployeeId(*s)
	}
	return du
}

// ClearDeletedByEmployeeId clears the value of the "DeletedByEmployeeId" field.
func (du *DisabilityUpdate) ClearDeletedByEmployeeId() *DisabilityUpdate {
	du.mutation.ClearDeletedByEmployeeId()
	return du
}

// SetDeletedByDesignation sets the "DeletedByDesignation" field.
func (du *DisabilityUpdate) SetDeletedByDesignation(s string) *DisabilityUpdate {
	du.mutation.SetDeletedByDesignation(s)
	return du
}

// SetNillableDeletedByDesignation sets the "DeletedByDesignation" field if the given value is not nil.
func (du *DisabilityUpdate) SetNillableDeletedByDesignation(s *string) *DisabilityUpdate {
	if s != nil {
		du.SetDeletedByDesignation(*s)
	}
	return du
}

// ClearDeletedByDesignation clears the value of the "DeletedByDesignation" field.
func (du *DisabilityUpdate) ClearDeletedByDesignation() *DisabilityUpdate {
	du.mutation.ClearDeletedByDesignation()
	return du
}

// SetDeletedDate sets the "DeletedDate" field.
func (du *DisabilityUpdate) SetDeletedDate(t time.Time) *DisabilityUpdate {
	du.mutation.SetDeletedDate(t)
	return du
}

// SetNillableDeletedDate sets the "DeletedDate" field if the given value is not nil.
func (du *DisabilityUpdate) SetNillableDeletedDate(t *time.Time) *DisabilityUpdate {
	if t != nil {
		du.SetDeletedDate(*t)
	}
	return du
}

// ClearDeletedDate clears the value of the "DeletedDate" field.
func (du *DisabilityUpdate) ClearDeletedDate() *DisabilityUpdate {
	du.mutation.ClearDeletedDate()
	return du
}

// AddDisRefIDs adds the "dis_ref" edge to the ExamPapers entity by IDs.
func (du *DisabilityUpdate) AddDisRefIDs(ids ...int32) *DisabilityUpdate {
	du.mutation.AddDisRefIDs(ids...)
	return du
}

// AddDisRef adds the "dis_ref" edges to the ExamPapers entity.
func (du *DisabilityUpdate) AddDisRef(e ...*ExamPapers) *DisabilityUpdate {
	ids := make([]int32, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return du.AddDisRefIDs(ids...)
}

// Mutation returns the DisabilityMutation object of the builder.
func (du *DisabilityUpdate) Mutation() *DisabilityMutation {
	return du.mutation
}

// ClearDisRef clears all "dis_ref" edges to the ExamPapers entity.
func (du *DisabilityUpdate) ClearDisRef() *DisabilityUpdate {
	du.mutation.ClearDisRef()
	return du
}

// RemoveDisRefIDs removes the "dis_ref" edge to ExamPapers entities by IDs.
func (du *DisabilityUpdate) RemoveDisRefIDs(ids ...int32) *DisabilityUpdate {
	du.mutation.RemoveDisRefIDs(ids...)
	return du
}

// RemoveDisRef removes "dis_ref" edges to ExamPapers entities.
func (du *DisabilityUpdate) RemoveDisRef(e ...*ExamPapers) *DisabilityUpdate {
	ids := make([]int32, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return du.RemoveDisRefIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (du *DisabilityUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, du.sqlSave, du.mutation, du.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (du *DisabilityUpdate) SaveX(ctx context.Context) int {
	affected, err := du.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (du *DisabilityUpdate) Exec(ctx context.Context) error {
	_, err := du.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (du *DisabilityUpdate) ExecX(ctx context.Context) {
	if err := du.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (du *DisabilityUpdate) check() error {
	if v, ok := du.mutation.DisabilityFlag(); ok {
		if err := disability.DisabilityFlagValidator(v); err != nil {
			return &ValidationError{Name: "DisabilityFlag", err: fmt.Errorf(`ent: validator failed for field "Disability.DisabilityFlag": %w`, err)}
		}
	}
	return nil
}

func (du *DisabilityUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := du.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(disability.Table, disability.Columns, sqlgraph.NewFieldSpec(disability.FieldID, field.TypeInt32))
	if ps := du.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := du.mutation.DisabilityTypeCode(); ok {
		_spec.SetField(disability.FieldDisabilityTypeCode, field.TypeString, value)
	}
	if value, ok := du.mutation.DisabilityTypeDescription(); ok {
		_spec.SetField(disability.FieldDisabilityTypeDescription, field.TypeString, value)
	}
	if value, ok := du.mutation.DisabilityPercentage(); ok {
		_spec.SetField(disability.FieldDisabilityPercentage, field.TypeInt32, value)
	}
	if value, ok := du.mutation.AddedDisabilityPercentage(); ok {
		_spec.AddField(disability.FieldDisabilityPercentage, field.TypeInt32, value)
	}
	if value, ok := du.mutation.DisabilityFlag(); ok {
		_spec.SetField(disability.FieldDisabilityFlag, field.TypeEnum, value)
	}
	if value, ok := du.mutation.HallCategoryCode(); ok {
		_spec.SetField(disability.FieldHallCategoryCode, field.TypeString, value)
	}
	if du.mutation.HallCategoryCodeCleared() {
		_spec.ClearField(disability.FieldHallCategoryCode, field.TypeString)
	}
	if value, ok := du.mutation.OrderNumber(); ok {
		_spec.SetField(disability.FieldOrderNumber, field.TypeString, value)
	}
	if du.mutation.OrderNumberCleared() {
		_spec.ClearField(disability.FieldOrderNumber, field.TypeString)
	}
	if value, ok := du.mutation.CreatedById(); ok {
		_spec.SetField(disability.FieldCreatedById, field.TypeInt64, value)
	}
	if value, ok := du.mutation.AddedCreatedById(); ok {
		_spec.AddField(disability.FieldCreatedById, field.TypeInt64, value)
	}
	if du.mutation.CreatedByIdCleared() {
		_spec.ClearField(disability.FieldCreatedById, field.TypeInt64)
	}
	if value, ok := du.mutation.CreatedByUserName(); ok {
		_spec.SetField(disability.FieldCreatedByUserName, field.TypeString, value)
	}
	if du.mutation.CreatedByUserNameCleared() {
		_spec.ClearField(disability.FieldCreatedByUserName, field.TypeString)
	}
	if value, ok := du.mutation.CreatedByEmployeeId(); ok {
		_spec.SetField(disability.FieldCreatedByEmployeeId, field.TypeString, value)
	}
	if du.mutation.CreatedByEmployeeIdCleared() {
		_spec.ClearField(disability.FieldCreatedByEmployeeId, field.TypeString)
	}
	if value, ok := du.mutation.CreatedByDesignation(); ok {
		_spec.SetField(disability.FieldCreatedByDesignation, field.TypeString, value)
	}
	if du.mutation.CreatedByDesignationCleared() {
		_spec.ClearField(disability.FieldCreatedByDesignation, field.TypeString)
	}
	if value, ok := du.mutation.CreatedDate(); ok {
		_spec.SetField(disability.FieldCreatedDate, field.TypeTime, value)
	}
	if du.mutation.CreatedDateCleared() {
		_spec.ClearField(disability.FieldCreatedDate, field.TypeTime)
	}
	if value, ok := du.mutation.VerifiedById(); ok {
		_spec.SetField(disability.FieldVerifiedById, field.TypeInt64, value)
	}
	if value, ok := du.mutation.AddedVerifiedById(); ok {
		_spec.AddField(disability.FieldVerifiedById, field.TypeInt64, value)
	}
	if du.mutation.VerifiedByIdCleared() {
		_spec.ClearField(disability.FieldVerifiedById, field.TypeInt64)
	}
	if value, ok := du.mutation.VerifiedByUserName(); ok {
		_spec.SetField(disability.FieldVerifiedByUserName, field.TypeString, value)
	}
	if du.mutation.VerifiedByUserNameCleared() {
		_spec.ClearField(disability.FieldVerifiedByUserName, field.TypeString)
	}
	if value, ok := du.mutation.VerifiedByEmployeeId(); ok {
		_spec.SetField(disability.FieldVerifiedByEmployeeId, field.TypeString, value)
	}
	if du.mutation.VerifiedByEmployeeIdCleared() {
		_spec.ClearField(disability.FieldVerifiedByEmployeeId, field.TypeString)
	}
	if value, ok := du.mutation.VerifiedByDesignation(); ok {
		_spec.SetField(disability.FieldVerifiedByDesignation, field.TypeString, value)
	}
	if du.mutation.VerifiedByDesignationCleared() {
		_spec.ClearField(disability.FieldVerifiedByDesignation, field.TypeString)
	}
	if value, ok := du.mutation.VerifiedDate(); ok {
		_spec.SetField(disability.FieldVerifiedDate, field.TypeTime, value)
	}
	if du.mutation.VerifiedDateCleared() {
		_spec.ClearField(disability.FieldVerifiedDate, field.TypeTime)
	}
	if value, ok := du.mutation.Statuss(); ok {
		_spec.SetField(disability.FieldStatuss, field.TypeString, value)
	}
	if du.mutation.StatussCleared() {
		_spec.ClearField(disability.FieldStatuss, field.TypeString)
	}
	if value, ok := du.mutation.DeletedById(); ok {
		_spec.SetField(disability.FieldDeletedById, field.TypeInt64, value)
	}
	if value, ok := du.mutation.AddedDeletedById(); ok {
		_spec.AddField(disability.FieldDeletedById, field.TypeInt64, value)
	}
	if du.mutation.DeletedByIdCleared() {
		_spec.ClearField(disability.FieldDeletedById, field.TypeInt64)
	}
	if value, ok := du.mutation.DeletedByUserName(); ok {
		_spec.SetField(disability.FieldDeletedByUserName, field.TypeString, value)
	}
	if du.mutation.DeletedByUserNameCleared() {
		_spec.ClearField(disability.FieldDeletedByUserName, field.TypeString)
	}
	if value, ok := du.mutation.DeletedByEmployeeId(); ok {
		_spec.SetField(disability.FieldDeletedByEmployeeId, field.TypeString, value)
	}
	if du.mutation.DeletedByEmployeeIdCleared() {
		_spec.ClearField(disability.FieldDeletedByEmployeeId, field.TypeString)
	}
	if value, ok := du.mutation.DeletedByDesignation(); ok {
		_spec.SetField(disability.FieldDeletedByDesignation, field.TypeString, value)
	}
	if du.mutation.DeletedByDesignationCleared() {
		_spec.ClearField(disability.FieldDeletedByDesignation, field.TypeString)
	}
	if value, ok := du.mutation.DeletedDate(); ok {
		_spec.SetField(disability.FieldDeletedDate, field.TypeTime, value)
	}
	if du.mutation.DeletedDateCleared() {
		_spec.ClearField(disability.FieldDeletedDate, field.TypeTime)
	}
	if du.mutation.DisRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   disability.DisRefTable,
			Columns: []string{disability.DisRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exampapers.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.RemovedDisRefIDs(); len(nodes) > 0 && !du.mutation.DisRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   disability.DisRefTable,
			Columns: []string{disability.DisRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exampapers.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.DisRefIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   disability.DisRefTable,
			Columns: []string{disability.DisRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exampapers.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, du.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{disability.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	du.mutation.done = true
	return n, nil
}

// DisabilityUpdateOne is the builder for updating a single Disability entity.
type DisabilityUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DisabilityMutation
}

// SetDisabilityTypeCode sets the "DisabilityTypeCode" field.
func (duo *DisabilityUpdateOne) SetDisabilityTypeCode(s string) *DisabilityUpdateOne {
	duo.mutation.SetDisabilityTypeCode(s)
	return duo
}

// SetDisabilityTypeDescription sets the "DisabilityTypeDescription" field.
func (duo *DisabilityUpdateOne) SetDisabilityTypeDescription(s string) *DisabilityUpdateOne {
	duo.mutation.SetDisabilityTypeDescription(s)
	return duo
}

// SetDisabilityPercentage sets the "DisabilityPercentage" field.
func (duo *DisabilityUpdateOne) SetDisabilityPercentage(i int32) *DisabilityUpdateOne {
	duo.mutation.ResetDisabilityPercentage()
	duo.mutation.SetDisabilityPercentage(i)
	return duo
}

// AddDisabilityPercentage adds i to the "DisabilityPercentage" field.
func (duo *DisabilityUpdateOne) AddDisabilityPercentage(i int32) *DisabilityUpdateOne {
	duo.mutation.AddDisabilityPercentage(i)
	return duo
}

// SetDisabilityFlag sets the "DisabilityFlag" field.
func (duo *DisabilityUpdateOne) SetDisabilityFlag(df disability.DisabilityFlag) *DisabilityUpdateOne {
	duo.mutation.SetDisabilityFlag(df)
	return duo
}

// SetHallCategoryCode sets the "HallCategoryCode" field.
func (duo *DisabilityUpdateOne) SetHallCategoryCode(s string) *DisabilityUpdateOne {
	duo.mutation.SetHallCategoryCode(s)
	return duo
}

// SetNillableHallCategoryCode sets the "HallCategoryCode" field if the given value is not nil.
func (duo *DisabilityUpdateOne) SetNillableHallCategoryCode(s *string) *DisabilityUpdateOne {
	if s != nil {
		duo.SetHallCategoryCode(*s)
	}
	return duo
}

// ClearHallCategoryCode clears the value of the "HallCategoryCode" field.
func (duo *DisabilityUpdateOne) ClearHallCategoryCode() *DisabilityUpdateOne {
	duo.mutation.ClearHallCategoryCode()
	return duo
}

// SetOrderNumber sets the "OrderNumber" field.
func (duo *DisabilityUpdateOne) SetOrderNumber(s string) *DisabilityUpdateOne {
	duo.mutation.SetOrderNumber(s)
	return duo
}

// SetNillableOrderNumber sets the "OrderNumber" field if the given value is not nil.
func (duo *DisabilityUpdateOne) SetNillableOrderNumber(s *string) *DisabilityUpdateOne {
	if s != nil {
		duo.SetOrderNumber(*s)
	}
	return duo
}

// ClearOrderNumber clears the value of the "OrderNumber" field.
func (duo *DisabilityUpdateOne) ClearOrderNumber() *DisabilityUpdateOne {
	duo.mutation.ClearOrderNumber()
	return duo
}

// SetCreatedById sets the "CreatedById" field.
func (duo *DisabilityUpdateOne) SetCreatedById(i int64) *DisabilityUpdateOne {
	duo.mutation.ResetCreatedById()
	duo.mutation.SetCreatedById(i)
	return duo
}

// SetNillableCreatedById sets the "CreatedById" field if the given value is not nil.
func (duo *DisabilityUpdateOne) SetNillableCreatedById(i *int64) *DisabilityUpdateOne {
	if i != nil {
		duo.SetCreatedById(*i)
	}
	return duo
}

// AddCreatedById adds i to the "CreatedById" field.
func (duo *DisabilityUpdateOne) AddCreatedById(i int64) *DisabilityUpdateOne {
	duo.mutation.AddCreatedById(i)
	return duo
}

// ClearCreatedById clears the value of the "CreatedById" field.
func (duo *DisabilityUpdateOne) ClearCreatedById() *DisabilityUpdateOne {
	duo.mutation.ClearCreatedById()
	return duo
}

// SetCreatedByUserName sets the "CreatedByUserName" field.
func (duo *DisabilityUpdateOne) SetCreatedByUserName(s string) *DisabilityUpdateOne {
	duo.mutation.SetCreatedByUserName(s)
	return duo
}

// SetNillableCreatedByUserName sets the "CreatedByUserName" field if the given value is not nil.
func (duo *DisabilityUpdateOne) SetNillableCreatedByUserName(s *string) *DisabilityUpdateOne {
	if s != nil {
		duo.SetCreatedByUserName(*s)
	}
	return duo
}

// ClearCreatedByUserName clears the value of the "CreatedByUserName" field.
func (duo *DisabilityUpdateOne) ClearCreatedByUserName() *DisabilityUpdateOne {
	duo.mutation.ClearCreatedByUserName()
	return duo
}

// SetCreatedByEmployeeId sets the "CreatedByEmployeeId" field.
func (duo *DisabilityUpdateOne) SetCreatedByEmployeeId(s string) *DisabilityUpdateOne {
	duo.mutation.SetCreatedByEmployeeId(s)
	return duo
}

// SetNillableCreatedByEmployeeId sets the "CreatedByEmployeeId" field if the given value is not nil.
func (duo *DisabilityUpdateOne) SetNillableCreatedByEmployeeId(s *string) *DisabilityUpdateOne {
	if s != nil {
		duo.SetCreatedByEmployeeId(*s)
	}
	return duo
}

// ClearCreatedByEmployeeId clears the value of the "CreatedByEmployeeId" field.
func (duo *DisabilityUpdateOne) ClearCreatedByEmployeeId() *DisabilityUpdateOne {
	duo.mutation.ClearCreatedByEmployeeId()
	return duo
}

// SetCreatedByDesignation sets the "CreatedByDesignation" field.
func (duo *DisabilityUpdateOne) SetCreatedByDesignation(s string) *DisabilityUpdateOne {
	duo.mutation.SetCreatedByDesignation(s)
	return duo
}

// SetNillableCreatedByDesignation sets the "CreatedByDesignation" field if the given value is not nil.
func (duo *DisabilityUpdateOne) SetNillableCreatedByDesignation(s *string) *DisabilityUpdateOne {
	if s != nil {
		duo.SetCreatedByDesignation(*s)
	}
	return duo
}

// ClearCreatedByDesignation clears the value of the "CreatedByDesignation" field.
func (duo *DisabilityUpdateOne) ClearCreatedByDesignation() *DisabilityUpdateOne {
	duo.mutation.ClearCreatedByDesignation()
	return duo
}

// SetCreatedDate sets the "CreatedDate" field.
func (duo *DisabilityUpdateOne) SetCreatedDate(t time.Time) *DisabilityUpdateOne {
	duo.mutation.SetCreatedDate(t)
	return duo
}

// SetNillableCreatedDate sets the "CreatedDate" field if the given value is not nil.
func (duo *DisabilityUpdateOne) SetNillableCreatedDate(t *time.Time) *DisabilityUpdateOne {
	if t != nil {
		duo.SetCreatedDate(*t)
	}
	return duo
}

// ClearCreatedDate clears the value of the "CreatedDate" field.
func (duo *DisabilityUpdateOne) ClearCreatedDate() *DisabilityUpdateOne {
	duo.mutation.ClearCreatedDate()
	return duo
}

// SetVerifiedById sets the "VerifiedById" field.
func (duo *DisabilityUpdateOne) SetVerifiedById(i int64) *DisabilityUpdateOne {
	duo.mutation.ResetVerifiedById()
	duo.mutation.SetVerifiedById(i)
	return duo
}

// SetNillableVerifiedById sets the "VerifiedById" field if the given value is not nil.
func (duo *DisabilityUpdateOne) SetNillableVerifiedById(i *int64) *DisabilityUpdateOne {
	if i != nil {
		duo.SetVerifiedById(*i)
	}
	return duo
}

// AddVerifiedById adds i to the "VerifiedById" field.
func (duo *DisabilityUpdateOne) AddVerifiedById(i int64) *DisabilityUpdateOne {
	duo.mutation.AddVerifiedById(i)
	return duo
}

// ClearVerifiedById clears the value of the "VerifiedById" field.
func (duo *DisabilityUpdateOne) ClearVerifiedById() *DisabilityUpdateOne {
	duo.mutation.ClearVerifiedById()
	return duo
}

// SetVerifiedByUserName sets the "VerifiedByUserName" field.
func (duo *DisabilityUpdateOne) SetVerifiedByUserName(s string) *DisabilityUpdateOne {
	duo.mutation.SetVerifiedByUserName(s)
	return duo
}

// SetNillableVerifiedByUserName sets the "VerifiedByUserName" field if the given value is not nil.
func (duo *DisabilityUpdateOne) SetNillableVerifiedByUserName(s *string) *DisabilityUpdateOne {
	if s != nil {
		duo.SetVerifiedByUserName(*s)
	}
	return duo
}

// ClearVerifiedByUserName clears the value of the "VerifiedByUserName" field.
func (duo *DisabilityUpdateOne) ClearVerifiedByUserName() *DisabilityUpdateOne {
	duo.mutation.ClearVerifiedByUserName()
	return duo
}

// SetVerifiedByEmployeeId sets the "VerifiedByEmployeeId" field.
func (duo *DisabilityUpdateOne) SetVerifiedByEmployeeId(s string) *DisabilityUpdateOne {
	duo.mutation.SetVerifiedByEmployeeId(s)
	return duo
}

// SetNillableVerifiedByEmployeeId sets the "VerifiedByEmployeeId" field if the given value is not nil.
func (duo *DisabilityUpdateOne) SetNillableVerifiedByEmployeeId(s *string) *DisabilityUpdateOne {
	if s != nil {
		duo.SetVerifiedByEmployeeId(*s)
	}
	return duo
}

// ClearVerifiedByEmployeeId clears the value of the "VerifiedByEmployeeId" field.
func (duo *DisabilityUpdateOne) ClearVerifiedByEmployeeId() *DisabilityUpdateOne {
	duo.mutation.ClearVerifiedByEmployeeId()
	return duo
}

// SetVerifiedByDesignation sets the "VerifiedByDesignation" field.
func (duo *DisabilityUpdateOne) SetVerifiedByDesignation(s string) *DisabilityUpdateOne {
	duo.mutation.SetVerifiedByDesignation(s)
	return duo
}

// SetNillableVerifiedByDesignation sets the "VerifiedByDesignation" field if the given value is not nil.
func (duo *DisabilityUpdateOne) SetNillableVerifiedByDesignation(s *string) *DisabilityUpdateOne {
	if s != nil {
		duo.SetVerifiedByDesignation(*s)
	}
	return duo
}

// ClearVerifiedByDesignation clears the value of the "VerifiedByDesignation" field.
func (duo *DisabilityUpdateOne) ClearVerifiedByDesignation() *DisabilityUpdateOne {
	duo.mutation.ClearVerifiedByDesignation()
	return duo
}

// SetVerifiedDate sets the "VerifiedDate" field.
func (duo *DisabilityUpdateOne) SetVerifiedDate(t time.Time) *DisabilityUpdateOne {
	duo.mutation.SetVerifiedDate(t)
	return duo
}

// SetNillableVerifiedDate sets the "VerifiedDate" field if the given value is not nil.
func (duo *DisabilityUpdateOne) SetNillableVerifiedDate(t *time.Time) *DisabilityUpdateOne {
	if t != nil {
		duo.SetVerifiedDate(*t)
	}
	return duo
}

// ClearVerifiedDate clears the value of the "VerifiedDate" field.
func (duo *DisabilityUpdateOne) ClearVerifiedDate() *DisabilityUpdateOne {
	duo.mutation.ClearVerifiedDate()
	return duo
}

// SetStatuss sets the "Statuss" field.
func (duo *DisabilityUpdateOne) SetStatuss(s string) *DisabilityUpdateOne {
	duo.mutation.SetStatuss(s)
	return duo
}

// SetNillableStatuss sets the "Statuss" field if the given value is not nil.
func (duo *DisabilityUpdateOne) SetNillableStatuss(s *string) *DisabilityUpdateOne {
	if s != nil {
		duo.SetStatuss(*s)
	}
	return duo
}

// ClearStatuss clears the value of the "Statuss" field.
func (duo *DisabilityUpdateOne) ClearStatuss() *DisabilityUpdateOne {
	duo.mutation.ClearStatuss()
	return duo
}

// SetDeletedById sets the "DeletedById" field.
func (duo *DisabilityUpdateOne) SetDeletedById(i int64) *DisabilityUpdateOne {
	duo.mutation.ResetDeletedById()
	duo.mutation.SetDeletedById(i)
	return duo
}

// SetNillableDeletedById sets the "DeletedById" field if the given value is not nil.
func (duo *DisabilityUpdateOne) SetNillableDeletedById(i *int64) *DisabilityUpdateOne {
	if i != nil {
		duo.SetDeletedById(*i)
	}
	return duo
}

// AddDeletedById adds i to the "DeletedById" field.
func (duo *DisabilityUpdateOne) AddDeletedById(i int64) *DisabilityUpdateOne {
	duo.mutation.AddDeletedById(i)
	return duo
}

// ClearDeletedById clears the value of the "DeletedById" field.
func (duo *DisabilityUpdateOne) ClearDeletedById() *DisabilityUpdateOne {
	duo.mutation.ClearDeletedById()
	return duo
}

// SetDeletedByUserName sets the "DeletedByUserName" field.
func (duo *DisabilityUpdateOne) SetDeletedByUserName(s string) *DisabilityUpdateOne {
	duo.mutation.SetDeletedByUserName(s)
	return duo
}

// SetNillableDeletedByUserName sets the "DeletedByUserName" field if the given value is not nil.
func (duo *DisabilityUpdateOne) SetNillableDeletedByUserName(s *string) *DisabilityUpdateOne {
	if s != nil {
		duo.SetDeletedByUserName(*s)
	}
	return duo
}

// ClearDeletedByUserName clears the value of the "DeletedByUserName" field.
func (duo *DisabilityUpdateOne) ClearDeletedByUserName() *DisabilityUpdateOne {
	duo.mutation.ClearDeletedByUserName()
	return duo
}

// SetDeletedByEmployeeId sets the "DeletedByEmployeeId" field.
func (duo *DisabilityUpdateOne) SetDeletedByEmployeeId(s string) *DisabilityUpdateOne {
	duo.mutation.SetDeletedByEmployeeId(s)
	return duo
}

// SetNillableDeletedByEmployeeId sets the "DeletedByEmployeeId" field if the given value is not nil.
func (duo *DisabilityUpdateOne) SetNillableDeletedByEmployeeId(s *string) *DisabilityUpdateOne {
	if s != nil {
		duo.SetDeletedByEmployeeId(*s)
	}
	return duo
}

// ClearDeletedByEmployeeId clears the value of the "DeletedByEmployeeId" field.
func (duo *DisabilityUpdateOne) ClearDeletedByEmployeeId() *DisabilityUpdateOne {
	duo.mutation.ClearDeletedByEmployeeId()
	return duo
}

// SetDeletedByDesignation sets the "DeletedByDesignation" field.
func (duo *DisabilityUpdateOne) SetDeletedByDesignation(s string) *DisabilityUpdateOne {
	duo.mutation.SetDeletedByDesignation(s)
	return duo
}

// SetNillableDeletedByDesignation sets the "DeletedByDesignation" field if the given value is not nil.
func (duo *DisabilityUpdateOne) SetNillableDeletedByDesignation(s *string) *DisabilityUpdateOne {
	if s != nil {
		duo.SetDeletedByDesignation(*s)
	}
	return duo
}

// ClearDeletedByDesignation clears the value of the "DeletedByDesignation" field.
func (duo *DisabilityUpdateOne) ClearDeletedByDesignation() *DisabilityUpdateOne {
	duo.mutation.ClearDeletedByDesignation()
	return duo
}

// SetDeletedDate sets the "DeletedDate" field.
func (duo *DisabilityUpdateOne) SetDeletedDate(t time.Time) *DisabilityUpdateOne {
	duo.mutation.SetDeletedDate(t)
	return duo
}

// SetNillableDeletedDate sets the "DeletedDate" field if the given value is not nil.
func (duo *DisabilityUpdateOne) SetNillableDeletedDate(t *time.Time) *DisabilityUpdateOne {
	if t != nil {
		duo.SetDeletedDate(*t)
	}
	return duo
}

// ClearDeletedDate clears the value of the "DeletedDate" field.
func (duo *DisabilityUpdateOne) ClearDeletedDate() *DisabilityUpdateOne {
	duo.mutation.ClearDeletedDate()
	return duo
}

// AddDisRefIDs adds the "dis_ref" edge to the ExamPapers entity by IDs.
func (duo *DisabilityUpdateOne) AddDisRefIDs(ids ...int32) *DisabilityUpdateOne {
	duo.mutation.AddDisRefIDs(ids...)
	return duo
}

// AddDisRef adds the "dis_ref" edges to the ExamPapers entity.
func (duo *DisabilityUpdateOne) AddDisRef(e ...*ExamPapers) *DisabilityUpdateOne {
	ids := make([]int32, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return duo.AddDisRefIDs(ids...)
}

// Mutation returns the DisabilityMutation object of the builder.
func (duo *DisabilityUpdateOne) Mutation() *DisabilityMutation {
	return duo.mutation
}

// ClearDisRef clears all "dis_ref" edges to the ExamPapers entity.
func (duo *DisabilityUpdateOne) ClearDisRef() *DisabilityUpdateOne {
	duo.mutation.ClearDisRef()
	return duo
}

// RemoveDisRefIDs removes the "dis_ref" edge to ExamPapers entities by IDs.
func (duo *DisabilityUpdateOne) RemoveDisRefIDs(ids ...int32) *DisabilityUpdateOne {
	duo.mutation.RemoveDisRefIDs(ids...)
	return duo
}

// RemoveDisRef removes "dis_ref" edges to ExamPapers entities.
func (duo *DisabilityUpdateOne) RemoveDisRef(e ...*ExamPapers) *DisabilityUpdateOne {
	ids := make([]int32, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return duo.RemoveDisRefIDs(ids...)
}

// Where appends a list predicates to the DisabilityUpdate builder.
func (duo *DisabilityUpdateOne) Where(ps ...predicate.Disability) *DisabilityUpdateOne {
	duo.mutation.Where(ps...)
	return duo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (duo *DisabilityUpdateOne) Select(field string, fields ...string) *DisabilityUpdateOne {
	duo.fields = append([]string{field}, fields...)
	return duo
}

// Save executes the query and returns the updated Disability entity.
func (duo *DisabilityUpdateOne) Save(ctx context.Context) (*Disability, error) {
	return withHooks(ctx, duo.sqlSave, duo.mutation, duo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (duo *DisabilityUpdateOne) SaveX(ctx context.Context) *Disability {
	node, err := duo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (duo *DisabilityUpdateOne) Exec(ctx context.Context) error {
	_, err := duo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (duo *DisabilityUpdateOne) ExecX(ctx context.Context) {
	if err := duo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (duo *DisabilityUpdateOne) check() error {
	if v, ok := duo.mutation.DisabilityFlag(); ok {
		if err := disability.DisabilityFlagValidator(v); err != nil {
			return &ValidationError{Name: "DisabilityFlag", err: fmt.Errorf(`ent: validator failed for field "Disability.DisabilityFlag": %w`, err)}
		}
	}
	return nil
}

func (duo *DisabilityUpdateOne) sqlSave(ctx context.Context) (_node *Disability, err error) {
	if err := duo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(disability.Table, disability.Columns, sqlgraph.NewFieldSpec(disability.FieldID, field.TypeInt32))
	id, ok := duo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Disability.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := duo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, disability.FieldID)
		for _, f := range fields {
			if !disability.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != disability.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := duo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := duo.mutation.DisabilityTypeCode(); ok {
		_spec.SetField(disability.FieldDisabilityTypeCode, field.TypeString, value)
	}
	if value, ok := duo.mutation.DisabilityTypeDescription(); ok {
		_spec.SetField(disability.FieldDisabilityTypeDescription, field.TypeString, value)
	}
	if value, ok := duo.mutation.DisabilityPercentage(); ok {
		_spec.SetField(disability.FieldDisabilityPercentage, field.TypeInt32, value)
	}
	if value, ok := duo.mutation.AddedDisabilityPercentage(); ok {
		_spec.AddField(disability.FieldDisabilityPercentage, field.TypeInt32, value)
	}
	if value, ok := duo.mutation.DisabilityFlag(); ok {
		_spec.SetField(disability.FieldDisabilityFlag, field.TypeEnum, value)
	}
	if value, ok := duo.mutation.HallCategoryCode(); ok {
		_spec.SetField(disability.FieldHallCategoryCode, field.TypeString, value)
	}
	if duo.mutation.HallCategoryCodeCleared() {
		_spec.ClearField(disability.FieldHallCategoryCode, field.TypeString)
	}
	if value, ok := duo.mutation.OrderNumber(); ok {
		_spec.SetField(disability.FieldOrderNumber, field.TypeString, value)
	}
	if duo.mutation.OrderNumberCleared() {
		_spec.ClearField(disability.FieldOrderNumber, field.TypeString)
	}
	if value, ok := duo.mutation.CreatedById(); ok {
		_spec.SetField(disability.FieldCreatedById, field.TypeInt64, value)
	}
	if value, ok := duo.mutation.AddedCreatedById(); ok {
		_spec.AddField(disability.FieldCreatedById, field.TypeInt64, value)
	}
	if duo.mutation.CreatedByIdCleared() {
		_spec.ClearField(disability.FieldCreatedById, field.TypeInt64)
	}
	if value, ok := duo.mutation.CreatedByUserName(); ok {
		_spec.SetField(disability.FieldCreatedByUserName, field.TypeString, value)
	}
	if duo.mutation.CreatedByUserNameCleared() {
		_spec.ClearField(disability.FieldCreatedByUserName, field.TypeString)
	}
	if value, ok := duo.mutation.CreatedByEmployeeId(); ok {
		_spec.SetField(disability.FieldCreatedByEmployeeId, field.TypeString, value)
	}
	if duo.mutation.CreatedByEmployeeIdCleared() {
		_spec.ClearField(disability.FieldCreatedByEmployeeId, field.TypeString)
	}
	if value, ok := duo.mutation.CreatedByDesignation(); ok {
		_spec.SetField(disability.FieldCreatedByDesignation, field.TypeString, value)
	}
	if duo.mutation.CreatedByDesignationCleared() {
		_spec.ClearField(disability.FieldCreatedByDesignation, field.TypeString)
	}
	if value, ok := duo.mutation.CreatedDate(); ok {
		_spec.SetField(disability.FieldCreatedDate, field.TypeTime, value)
	}
	if duo.mutation.CreatedDateCleared() {
		_spec.ClearField(disability.FieldCreatedDate, field.TypeTime)
	}
	if value, ok := duo.mutation.VerifiedById(); ok {
		_spec.SetField(disability.FieldVerifiedById, field.TypeInt64, value)
	}
	if value, ok := duo.mutation.AddedVerifiedById(); ok {
		_spec.AddField(disability.FieldVerifiedById, field.TypeInt64, value)
	}
	if duo.mutation.VerifiedByIdCleared() {
		_spec.ClearField(disability.FieldVerifiedById, field.TypeInt64)
	}
	if value, ok := duo.mutation.VerifiedByUserName(); ok {
		_spec.SetField(disability.FieldVerifiedByUserName, field.TypeString, value)
	}
	if duo.mutation.VerifiedByUserNameCleared() {
		_spec.ClearField(disability.FieldVerifiedByUserName, field.TypeString)
	}
	if value, ok := duo.mutation.VerifiedByEmployeeId(); ok {
		_spec.SetField(disability.FieldVerifiedByEmployeeId, field.TypeString, value)
	}
	if duo.mutation.VerifiedByEmployeeIdCleared() {
		_spec.ClearField(disability.FieldVerifiedByEmployeeId, field.TypeString)
	}
	if value, ok := duo.mutation.VerifiedByDesignation(); ok {
		_spec.SetField(disability.FieldVerifiedByDesignation, field.TypeString, value)
	}
	if duo.mutation.VerifiedByDesignationCleared() {
		_spec.ClearField(disability.FieldVerifiedByDesignation, field.TypeString)
	}
	if value, ok := duo.mutation.VerifiedDate(); ok {
		_spec.SetField(disability.FieldVerifiedDate, field.TypeTime, value)
	}
	if duo.mutation.VerifiedDateCleared() {
		_spec.ClearField(disability.FieldVerifiedDate, field.TypeTime)
	}
	if value, ok := duo.mutation.Statuss(); ok {
		_spec.SetField(disability.FieldStatuss, field.TypeString, value)
	}
	if duo.mutation.StatussCleared() {
		_spec.ClearField(disability.FieldStatuss, field.TypeString)
	}
	if value, ok := duo.mutation.DeletedById(); ok {
		_spec.SetField(disability.FieldDeletedById, field.TypeInt64, value)
	}
	if value, ok := duo.mutation.AddedDeletedById(); ok {
		_spec.AddField(disability.FieldDeletedById, field.TypeInt64, value)
	}
	if duo.mutation.DeletedByIdCleared() {
		_spec.ClearField(disability.FieldDeletedById, field.TypeInt64)
	}
	if value, ok := duo.mutation.DeletedByUserName(); ok {
		_spec.SetField(disability.FieldDeletedByUserName, field.TypeString, value)
	}
	if duo.mutation.DeletedByUserNameCleared() {
		_spec.ClearField(disability.FieldDeletedByUserName, field.TypeString)
	}
	if value, ok := duo.mutation.DeletedByEmployeeId(); ok {
		_spec.SetField(disability.FieldDeletedByEmployeeId, field.TypeString, value)
	}
	if duo.mutation.DeletedByEmployeeIdCleared() {
		_spec.ClearField(disability.FieldDeletedByEmployeeId, field.TypeString)
	}
	if value, ok := duo.mutation.DeletedByDesignation(); ok {
		_spec.SetField(disability.FieldDeletedByDesignation, field.TypeString, value)
	}
	if duo.mutation.DeletedByDesignationCleared() {
		_spec.ClearField(disability.FieldDeletedByDesignation, field.TypeString)
	}
	if value, ok := duo.mutation.DeletedDate(); ok {
		_spec.SetField(disability.FieldDeletedDate, field.TypeTime, value)
	}
	if duo.mutation.DeletedDateCleared() {
		_spec.ClearField(disability.FieldDeletedDate, field.TypeTime)
	}
	if duo.mutation.DisRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   disability.DisRefTable,
			Columns: []string{disability.DisRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exampapers.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.RemovedDisRefIDs(); len(nodes) > 0 && !duo.mutation.DisRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   disability.DisRefTable,
			Columns: []string{disability.DisRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exampapers.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.DisRefIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   disability.DisRefTable,
			Columns: []string{disability.DisRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exampapers.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Disability{config: duo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, duo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{disability.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	duo.mutation.done = true
	return _node, nil
}
