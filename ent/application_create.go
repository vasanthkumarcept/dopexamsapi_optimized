// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"recruit/ent/application"
	"recruit/ent/center"
	"recruit/ent/notification"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ApplicationCreate is the builder for creating a Application entity.
type ApplicationCreate struct {
	config
	mutation *ApplicationMutation
	hooks    []Hook
}

// SetEmployeeID sets the "EmployeeID" field.
func (ac *ApplicationCreate) SetEmployeeID(i int32) *ApplicationCreate {
	ac.mutation.SetEmployeeID(i)
	return ac
}

// SetNotifyCode sets the "NotifyCode" field.
func (ac *ApplicationCreate) SetNotifyCode(i int32) *ApplicationCreate {
	ac.mutation.SetNotifyCode(i)
	return ac
}

// SetNillableNotifyCode sets the "NotifyCode" field if the given value is not nil.
func (ac *ApplicationCreate) SetNillableNotifyCode(i *int32) *ApplicationCreate {
	if i != nil {
		ac.SetNotifyCode(*i)
	}
	return ac
}

// SetHallTicketNumber sets the "HallTicketNumber" field.
func (ac *ApplicationCreate) SetHallTicketNumber(s string) *ApplicationCreate {
	ac.mutation.SetHallTicketNumber(s)
	return ac
}

// SetNillableHallTicketNumber sets the "HallTicketNumber" field if the given value is not nil.
func (ac *ApplicationCreate) SetNillableHallTicketNumber(s *string) *ApplicationCreate {
	if s != nil {
		ac.SetHallTicketNumber(*s)
	}
	return ac
}

// SetCenterCode sets the "CenterCode" field.
func (ac *ApplicationCreate) SetCenterCode(i int32) *ApplicationCreate {
	ac.mutation.SetCenterCode(i)
	return ac
}

// SetNillableCenterCode sets the "CenterCode" field if the given value is not nil.
func (ac *ApplicationCreate) SetNillableCenterCode(i *int32) *ApplicationCreate {
	if i != nil {
		ac.SetCenterCode(*i)
	}
	return ac
}

// SetAppliedStamp sets the "AppliedStamp" field.
func (ac *ApplicationCreate) SetAppliedStamp(t time.Time) *ApplicationCreate {
	ac.mutation.SetAppliedStamp(t)
	return ac
}

// SetID sets the "id" field.
func (ac *ApplicationCreate) SetID(i int32) *ApplicationCreate {
	ac.mutation.SetID(i)
	return ac
}

// SetCenterID sets the "center" edge to the Center entity by ID.
func (ac *ApplicationCreate) SetCenterID(id int32) *ApplicationCreate {
	ac.mutation.SetCenterID(id)
	return ac
}

// SetNillableCenterID sets the "center" edge to the Center entity by ID if the given value is not nil.
func (ac *ApplicationCreate) SetNillableCenterID(id *int32) *ApplicationCreate {
	if id != nil {
		ac = ac.SetCenterID(*id)
	}
	return ac
}

// SetCenter sets the "center" edge to the Center entity.
func (ac *ApplicationCreate) SetCenter(c *Center) *ApplicationCreate {
	return ac.SetCenterID(c.ID)
}

// SetNotificationID sets the "notification" edge to the Notification entity by ID.
func (ac *ApplicationCreate) SetNotificationID(id int32) *ApplicationCreate {
	ac.mutation.SetNotificationID(id)
	return ac
}

// SetNillableNotificationID sets the "notification" edge to the Notification entity by ID if the given value is not nil.
func (ac *ApplicationCreate) SetNillableNotificationID(id *int32) *ApplicationCreate {
	if id != nil {
		ac = ac.SetNotificationID(*id)
	}
	return ac
}

// SetNotification sets the "notification" edge to the Notification entity.
func (ac *ApplicationCreate) SetNotification(n *Notification) *ApplicationCreate {
	return ac.SetNotificationID(n.ID)
}

// Mutation returns the ApplicationMutation object of the builder.
func (ac *ApplicationCreate) Mutation() *ApplicationMutation {
	return ac.mutation
}

// Save creates the Application in the database.
func (ac *ApplicationCreate) Save(ctx context.Context) (*Application, error) {
	return withHooks(ctx, ac.sqlSave, ac.mutation, ac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ac *ApplicationCreate) SaveX(ctx context.Context) *Application {
	v, err := ac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ac *ApplicationCreate) Exec(ctx context.Context) error {
	_, err := ac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ac *ApplicationCreate) ExecX(ctx context.Context) {
	if err := ac.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ac *ApplicationCreate) check() error {
	if _, ok := ac.mutation.EmployeeID(); !ok {
		return &ValidationError{Name: "EmployeeID", err: errors.New(`ent: missing required field "Application.EmployeeID"`)}
	}
	if _, ok := ac.mutation.AppliedStamp(); !ok {
		return &ValidationError{Name: "AppliedStamp", err: errors.New(`ent: missing required field "Application.AppliedStamp"`)}
	}
	return nil
}

func (ac *ApplicationCreate) sqlSave(ctx context.Context) (*Application, error) {
	if err := ac.check(); err != nil {
		return nil, err
	}
	_node, _spec := ac.createSpec()
	if err := sqlgraph.CreateNode(ctx, ac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int32(id)
	}
	ac.mutation.id = &_node.ID
	ac.mutation.done = true
	return _node, nil
}

func (ac *ApplicationCreate) createSpec() (*Application, *sqlgraph.CreateSpec) {
	var (
		_node = &Application{config: ac.config}
		_spec = sqlgraph.NewCreateSpec(application.Table, sqlgraph.NewFieldSpec(application.FieldID, field.TypeInt32))
	)
	if id, ok := ac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ac.mutation.EmployeeID(); ok {
		_spec.SetField(application.FieldEmployeeID, field.TypeInt32, value)
		_node.EmployeeID = value
	}
	if value, ok := ac.mutation.HallTicketNumber(); ok {
		_spec.SetField(application.FieldHallTicketNumber, field.TypeString, value)
		_node.HallTicketNumber = value
	}
	if value, ok := ac.mutation.AppliedStamp(); ok {
		_spec.SetField(application.FieldAppliedStamp, field.TypeTime, value)
		_node.AppliedStamp = value
	}
	if nodes := ac.mutation.CenterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   application.CenterTable,
			Columns: []string{application.CenterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(center.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CenterCode = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.NotificationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   application.NotificationTable,
			Columns: []string{application.NotificationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notification.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.NotifyCode = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ApplicationCreateBulk is the builder for creating many Application entities in bulk.
type ApplicationCreateBulk struct {
	config
	builders []*ApplicationCreate
}

// Save creates the Application entities in the database.
func (acb *ApplicationCreateBulk) Save(ctx context.Context) ([]*Application, error) {
	specs := make([]*sqlgraph.CreateSpec, len(acb.builders))
	nodes := make([]*Application, len(acb.builders))
	mutators := make([]Mutator, len(acb.builders))
	for i := range acb.builders {
		func(i int, root context.Context) {
			builder := acb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ApplicationMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, acb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, acb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, acb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (acb *ApplicationCreateBulk) SaveX(ctx context.Context) []*Application {
	v, err := acb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (acb *ApplicationCreateBulk) Exec(ctx context.Context) error {
	_, err := acb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (acb *ApplicationCreateBulk) ExecX(ctx context.Context) {
	if err := acb.Exec(ctx); err != nil {
		panic(err)
	}
}
