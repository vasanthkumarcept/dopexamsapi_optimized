// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"recruit/ent/employees"
	"recruit/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// EmployeesUpdate is the builder for updating Employees entities.
type EmployeesUpdate struct {
	config
	hooks    []Hook
	mutation *EmployeesMutation
}

// Where appends a list predicates to the EmployeesUpdate builder.
func (eu *EmployeesUpdate) Where(ps ...predicate.Employees) *EmployeesUpdate {
	eu.mutation.Where(ps...)
	return eu
}

// SetEmployeedID sets the "EmployeedID" field.
func (eu *EmployeesUpdate) SetEmployeedID(i int32) *EmployeesUpdate {
	eu.mutation.ResetEmployeedID()
	eu.mutation.SetEmployeedID(i)
	return eu
}

// AddEmployeedID adds i to the "EmployeedID" field.
func (eu *EmployeesUpdate) AddEmployeedID(i int32) *EmployeesUpdate {
	eu.mutation.AddEmployeedID(i)
	return eu
}

// SetIDVerified sets the "IDVerified" field.
func (eu *EmployeesUpdate) SetIDVerified(b bool) *EmployeesUpdate {
	eu.mutation.SetIDVerified(b)
	return eu
}

// SetNillableIDVerified sets the "IDVerified" field if the given value is not nil.
func (eu *EmployeesUpdate) SetNillableIDVerified(b *bool) *EmployeesUpdate {
	if b != nil {
		eu.SetIDVerified(*b)
	}
	return eu
}

// SetIDRemStatus sets the "IDRemStatus" field.
func (eu *EmployeesUpdate) SetIDRemStatus(b bool) *EmployeesUpdate {
	eu.mutation.SetIDRemStatus(b)
	return eu
}

// SetNillableIDRemStatus sets the "IDRemStatus" field if the given value is not nil.
func (eu *EmployeesUpdate) SetNillableIDRemStatus(b *bool) *EmployeesUpdate {
	if b != nil {
		eu.SetIDRemStatus(*b)
	}
	return eu
}

// SetIDRemarks sets the "IDRemarks" field.
func (eu *EmployeesUpdate) SetIDRemarks(s string) *EmployeesUpdate {
	eu.mutation.SetIDRemarks(s)
	return eu
}

// SetNillableIDRemarks sets the "IDRemarks" field if the given value is not nil.
func (eu *EmployeesUpdate) SetNillableIDRemarks(s *string) *EmployeesUpdate {
	if s != nil {
		eu.SetIDRemarks(*s)
	}
	return eu
}

// ClearIDRemarks clears the value of the "IDRemarks" field.
func (eu *EmployeesUpdate) ClearIDRemarks() *EmployeesUpdate {
	eu.mutation.ClearIDRemarks()
	return eu
}

// SetEmployeeName sets the "EmployeeName" field.
func (eu *EmployeesUpdate) SetEmployeeName(s string) *EmployeesUpdate {
	eu.mutation.SetEmployeeName(s)
	return eu
}

// SetNameVerified sets the "nameVerified" field.
func (eu *EmployeesUpdate) SetNameVerified(b bool) *EmployeesUpdate {
	eu.mutation.SetNameVerified(b)
	return eu
}

// SetNillableNameVerified sets the "nameVerified" field if the given value is not nil.
func (eu *EmployeesUpdate) SetNillableNameVerified(b *bool) *EmployeesUpdate {
	if b != nil {
		eu.SetNameVerified(*b)
	}
	return eu
}

// SetNameRemStatus sets the "nameRemStatus" field.
func (eu *EmployeesUpdate) SetNameRemStatus(b bool) *EmployeesUpdate {
	eu.mutation.SetNameRemStatus(b)
	return eu
}

// SetNillableNameRemStatus sets the "nameRemStatus" field if the given value is not nil.
func (eu *EmployeesUpdate) SetNillableNameRemStatus(b *bool) *EmployeesUpdate {
	if b != nil {
		eu.SetNameRemStatus(*b)
	}
	return eu
}

// SetNameRemarks sets the "nameRemarks" field.
func (eu *EmployeesUpdate) SetNameRemarks(s string) *EmployeesUpdate {
	eu.mutation.SetNameRemarks(s)
	return eu
}

// SetNillableNameRemarks sets the "nameRemarks" field if the given value is not nil.
func (eu *EmployeesUpdate) SetNillableNameRemarks(s *string) *EmployeesUpdate {
	if s != nil {
		eu.SetNameRemarks(*s)
	}
	return eu
}

// ClearNameRemarks clears the value of the "nameRemarks" field.
func (eu *EmployeesUpdate) ClearNameRemarks() *EmployeesUpdate {
	eu.mutation.ClearNameRemarks()
	return eu
}

// SetEmployeeFathersName sets the "EmployeeFathersName" field.
func (eu *EmployeesUpdate) SetEmployeeFathersName(s string) *EmployeesUpdate {
	eu.mutation.SetEmployeeFathersName(s)
	return eu
}

// SetFathersNameVerified sets the "FathersNameVerified" field.
func (eu *EmployeesUpdate) SetFathersNameVerified(b bool) *EmployeesUpdate {
	eu.mutation.SetFathersNameVerified(b)
	return eu
}

// SetNillableFathersNameVerified sets the "FathersNameVerified" field if the given value is not nil.
func (eu *EmployeesUpdate) SetNillableFathersNameVerified(b *bool) *EmployeesUpdate {
	if b != nil {
		eu.SetFathersNameVerified(*b)
	}
	return eu
}

// SetFathersNameRemStatus sets the "FathersNameRemStatus" field.
func (eu *EmployeesUpdate) SetFathersNameRemStatus(b bool) *EmployeesUpdate {
	eu.mutation.SetFathersNameRemStatus(b)
	return eu
}

// SetNillableFathersNameRemStatus sets the "FathersNameRemStatus" field if the given value is not nil.
func (eu *EmployeesUpdate) SetNillableFathersNameRemStatus(b *bool) *EmployeesUpdate {
	if b != nil {
		eu.SetFathersNameRemStatus(*b)
	}
	return eu
}

// SetFathersNameRemarks sets the "FathersNameRemarks" field.
func (eu *EmployeesUpdate) SetFathersNameRemarks(s string) *EmployeesUpdate {
	eu.mutation.SetFathersNameRemarks(s)
	return eu
}

// SetNillableFathersNameRemarks sets the "FathersNameRemarks" field if the given value is not nil.
func (eu *EmployeesUpdate) SetNillableFathersNameRemarks(s *string) *EmployeesUpdate {
	if s != nil {
		eu.SetFathersNameRemarks(*s)
	}
	return eu
}

// ClearFathersNameRemarks clears the value of the "FathersNameRemarks" field.
func (eu *EmployeesUpdate) ClearFathersNameRemarks() *EmployeesUpdate {
	eu.mutation.ClearFathersNameRemarks()
	return eu
}

// SetDOB sets the "DOB" field.
func (eu *EmployeesUpdate) SetDOB(t time.Time) *EmployeesUpdate {
	eu.mutation.SetDOB(t)
	return eu
}

// SetDOBVerified sets the "DOBVerified" field.
func (eu *EmployeesUpdate) SetDOBVerified(b bool) *EmployeesUpdate {
	eu.mutation.SetDOBVerified(b)
	return eu
}

// SetNillableDOBVerified sets the "DOBVerified" field if the given value is not nil.
func (eu *EmployeesUpdate) SetNillableDOBVerified(b *bool) *EmployeesUpdate {
	if b != nil {
		eu.SetDOBVerified(*b)
	}
	return eu
}

// SetDOBRemStatus sets the "DOBRemStatus" field.
func (eu *EmployeesUpdate) SetDOBRemStatus(b bool) *EmployeesUpdate {
	eu.mutation.SetDOBRemStatus(b)
	return eu
}

// SetNillableDOBRemStatus sets the "DOBRemStatus" field if the given value is not nil.
func (eu *EmployeesUpdate) SetNillableDOBRemStatus(b *bool) *EmployeesUpdate {
	if b != nil {
		eu.SetDOBRemStatus(*b)
	}
	return eu
}

// SetDOBRemarks sets the "DOBRemarks" field.
func (eu *EmployeesUpdate) SetDOBRemarks(s string) *EmployeesUpdate {
	eu.mutation.SetDOBRemarks(s)
	return eu
}

// SetNillableDOBRemarks sets the "DOBRemarks" field if the given value is not nil.
func (eu *EmployeesUpdate) SetNillableDOBRemarks(s *string) *EmployeesUpdate {
	if s != nil {
		eu.SetDOBRemarks(*s)
	}
	return eu
}

// ClearDOBRemarks clears the value of the "DOBRemarks" field.
func (eu *EmployeesUpdate) ClearDOBRemarks() *EmployeesUpdate {
	eu.mutation.ClearDOBRemarks()
	return eu
}

// SetGender sets the "Gender" field.
func (eu *EmployeesUpdate) SetGender(e employees.Gender) *EmployeesUpdate {
	eu.mutation.SetGender(e)
	return eu
}

// SetGenderVerified sets the "genderVerified" field.
func (eu *EmployeesUpdate) SetGenderVerified(b bool) *EmployeesUpdate {
	eu.mutation.SetGenderVerified(b)
	return eu
}

// SetNillableGenderVerified sets the "genderVerified" field if the given value is not nil.
func (eu *EmployeesUpdate) SetNillableGenderVerified(b *bool) *EmployeesUpdate {
	if b != nil {
		eu.SetGenderVerified(*b)
	}
	return eu
}

// SetGenderRemStatus sets the "genderRemStatus" field.
func (eu *EmployeesUpdate) SetGenderRemStatus(b bool) *EmployeesUpdate {
	eu.mutation.SetGenderRemStatus(b)
	return eu
}

// SetNillableGenderRemStatus sets the "genderRemStatus" field if the given value is not nil.
func (eu *EmployeesUpdate) SetNillableGenderRemStatus(b *bool) *EmployeesUpdate {
	if b != nil {
		eu.SetGenderRemStatus(*b)
	}
	return eu
}

// SetGenderRemarks sets the "genderRemarks" field.
func (eu *EmployeesUpdate) SetGenderRemarks(s string) *EmployeesUpdate {
	eu.mutation.SetGenderRemarks(s)
	return eu
}

// SetNillableGenderRemarks sets the "genderRemarks" field if the given value is not nil.
func (eu *EmployeesUpdate) SetNillableGenderRemarks(s *string) *EmployeesUpdate {
	if s != nil {
		eu.SetGenderRemarks(*s)
	}
	return eu
}

// ClearGenderRemarks clears the value of the "genderRemarks" field.
func (eu *EmployeesUpdate) ClearGenderRemarks() *EmployeesUpdate {
	eu.mutation.ClearGenderRemarks()
	return eu
}

// SetMobileNumber sets the "MobileNumber" field.
func (eu *EmployeesUpdate) SetMobileNumber(i int64) *EmployeesUpdate {
	eu.mutation.ResetMobileNumber()
	eu.mutation.SetMobileNumber(i)
	return eu
}

// SetNillableMobileNumber sets the "MobileNumber" field if the given value is not nil.
func (eu *EmployeesUpdate) SetNillableMobileNumber(i *int64) *EmployeesUpdate {
	if i != nil {
		eu.SetMobileNumber(*i)
	}
	return eu
}

// AddMobileNumber adds i to the "MobileNumber" field.
func (eu *EmployeesUpdate) AddMobileNumber(i int64) *EmployeesUpdate {
	eu.mutation.AddMobileNumber(i)
	return eu
}

// ClearMobileNumber clears the value of the "MobileNumber" field.
func (eu *EmployeesUpdate) ClearMobileNumber() *EmployeesUpdate {
	eu.mutation.ClearMobileNumber()
	return eu
}

// SetMobileNumberVerified sets the "MobileNumberVerified" field.
func (eu *EmployeesUpdate) SetMobileNumberVerified(b bool) *EmployeesUpdate {
	eu.mutation.SetMobileNumberVerified(b)
	return eu
}

// SetNillableMobileNumberVerified sets the "MobileNumberVerified" field if the given value is not nil.
func (eu *EmployeesUpdate) SetNillableMobileNumberVerified(b *bool) *EmployeesUpdate {
	if b != nil {
		eu.SetMobileNumberVerified(*b)
	}
	return eu
}

// SetMobileNumberRemStatus sets the "MobileNumberRemStatus" field.
func (eu *EmployeesUpdate) SetMobileNumberRemStatus(b bool) *EmployeesUpdate {
	eu.mutation.SetMobileNumberRemStatus(b)
	return eu
}

// SetNillableMobileNumberRemStatus sets the "MobileNumberRemStatus" field if the given value is not nil.
func (eu *EmployeesUpdate) SetNillableMobileNumberRemStatus(b *bool) *EmployeesUpdate {
	if b != nil {
		eu.SetMobileNumberRemStatus(*b)
	}
	return eu
}

// SetMobileNumberRemarks sets the "MobileNumberRemarks" field.
func (eu *EmployeesUpdate) SetMobileNumberRemarks(s string) *EmployeesUpdate {
	eu.mutation.SetMobileNumberRemarks(s)
	return eu
}

// SetNillableMobileNumberRemarks sets the "MobileNumberRemarks" field if the given value is not nil.
func (eu *EmployeesUpdate) SetNillableMobileNumberRemarks(s *string) *EmployeesUpdate {
	if s != nil {
		eu.SetMobileNumberRemarks(*s)
	}
	return eu
}

// ClearMobileNumberRemarks clears the value of the "MobileNumberRemarks" field.
func (eu *EmployeesUpdate) ClearMobileNumberRemarks() *EmployeesUpdate {
	eu.mutation.ClearMobileNumberRemarks()
	return eu
}

// SetEmailID sets the "EmailID" field.
func (eu *EmployeesUpdate) SetEmailID(s string) *EmployeesUpdate {
	eu.mutation.SetEmailID(s)
	return eu
}

// SetNillableEmailID sets the "EmailID" field if the given value is not nil.
func (eu *EmployeesUpdate) SetNillableEmailID(s *string) *EmployeesUpdate {
	if s != nil {
		eu.SetEmailID(*s)
	}
	return eu
}

// ClearEmailID clears the value of the "EmailID" field.
func (eu *EmployeesUpdate) ClearEmailID() *EmployeesUpdate {
	eu.mutation.ClearEmailID()
	return eu
}

// SetEmailIDVerified sets the "EmailIDVerified" field.
func (eu *EmployeesUpdate) SetEmailIDVerified(b bool) *EmployeesUpdate {
	eu.mutation.SetEmailIDVerified(b)
	return eu
}

// SetNillableEmailIDVerified sets the "EmailIDVerified" field if the given value is not nil.
func (eu *EmployeesUpdate) SetNillableEmailIDVerified(b *bool) *EmployeesUpdate {
	if b != nil {
		eu.SetEmailIDVerified(*b)
	}
	return eu
}

// SetEmailIDRemStatus sets the "EmailIDRemStatus" field.
func (eu *EmployeesUpdate) SetEmailIDRemStatus(b bool) *EmployeesUpdate {
	eu.mutation.SetEmailIDRemStatus(b)
	return eu
}

// SetNillableEmailIDRemStatus sets the "EmailIDRemStatus" field if the given value is not nil.
func (eu *EmployeesUpdate) SetNillableEmailIDRemStatus(b *bool) *EmployeesUpdate {
	if b != nil {
		eu.SetEmailIDRemStatus(*b)
	}
	return eu
}

// SetEmailIDRemarks sets the "EmailIDRemarks" field.
func (eu *EmployeesUpdate) SetEmailIDRemarks(s string) *EmployeesUpdate {
	eu.mutation.SetEmailIDRemarks(s)
	return eu
}

// SetNillableEmailIDRemarks sets the "EmailIDRemarks" field if the given value is not nil.
func (eu *EmployeesUpdate) SetNillableEmailIDRemarks(s *string) *EmployeesUpdate {
	if s != nil {
		eu.SetEmailIDRemarks(*s)
	}
	return eu
}

// ClearEmailIDRemarks clears the value of the "EmailIDRemarks" field.
func (eu *EmployeesUpdate) ClearEmailIDRemarks() *EmployeesUpdate {
	eu.mutation.ClearEmailIDRemarks()
	return eu
}

// SetCategoryid sets the "Categoryid" field.
func (eu *EmployeesUpdate) SetCategoryid(i int32) *EmployeesUpdate {
	eu.mutation.ResetCategoryid()
	eu.mutation.SetCategoryid(i)
	return eu
}

// SetNillableCategoryid sets the "Categoryid" field if the given value is not nil.
func (eu *EmployeesUpdate) SetNillableCategoryid(i *int32) *EmployeesUpdate {
	if i != nil {
		eu.SetCategoryid(*i)
	}
	return eu
}

// AddCategoryid adds i to the "Categoryid" field.
func (eu *EmployeesUpdate) AddCategoryid(i int32) *EmployeesUpdate {
	eu.mutation.AddCategoryid(i)
	return eu
}

// ClearCategoryid clears the value of the "Categoryid" field.
func (eu *EmployeesUpdate) ClearCategoryid() *EmployeesUpdate {
	eu.mutation.ClearCategoryid()
	return eu
}

// SetEmployeeCategoryCode sets the "EmployeeCategoryCode" field.
func (eu *EmployeesUpdate) SetEmployeeCategoryCode(s string) *EmployeesUpdate {
	eu.mutation.SetEmployeeCategoryCode(s)
	return eu
}

// SetNillableEmployeeCategoryCode sets the "EmployeeCategoryCode" field if the given value is not nil.
func (eu *EmployeesUpdate) SetNillableEmployeeCategoryCode(s *string) *EmployeesUpdate {
	if s != nil {
		eu.SetEmployeeCategoryCode(*s)
	}
	return eu
}

// ClearEmployeeCategoryCode clears the value of the "EmployeeCategoryCode" field.
func (eu *EmployeesUpdate) ClearEmployeeCategoryCode() *EmployeesUpdate {
	eu.mutation.ClearEmployeeCategoryCode()
	return eu
}

// SetEmployeeCategory sets the "EmployeeCategory" field.
func (eu *EmployeesUpdate) SetEmployeeCategory(s string) *EmployeesUpdate {
	eu.mutation.SetEmployeeCategory(s)
	return eu
}

// SetEmployeeCategoryCodeVerified sets the "EmployeeCategoryCodeVerified" field.
func (eu *EmployeesUpdate) SetEmployeeCategoryCodeVerified(b bool) *EmployeesUpdate {
	eu.mutation.SetEmployeeCategoryCodeVerified(b)
	return eu
}

// SetNillableEmployeeCategoryCodeVerified sets the "EmployeeCategoryCodeVerified" field if the given value is not nil.
func (eu *EmployeesUpdate) SetNillableEmployeeCategoryCodeVerified(b *bool) *EmployeesUpdate {
	if b != nil {
		eu.SetEmployeeCategoryCodeVerified(*b)
	}
	return eu
}

// SetEmployeeCategoryCodeRemStatus sets the "EmployeeCategoryCodeRemStatus" field.
func (eu *EmployeesUpdate) SetEmployeeCategoryCodeRemStatus(b bool) *EmployeesUpdate {
	eu.mutation.SetEmployeeCategoryCodeRemStatus(b)
	return eu
}

// SetNillableEmployeeCategoryCodeRemStatus sets the "EmployeeCategoryCodeRemStatus" field if the given value is not nil.
func (eu *EmployeesUpdate) SetNillableEmployeeCategoryCodeRemStatus(b *bool) *EmployeesUpdate {
	if b != nil {
		eu.SetEmployeeCategoryCodeRemStatus(*b)
	}
	return eu
}

// SetEmployeeCategoryCodeRemarks sets the "EmployeeCategoryCodeRemarks" field.
func (eu *EmployeesUpdate) SetEmployeeCategoryCodeRemarks(s string) *EmployeesUpdate {
	eu.mutation.SetEmployeeCategoryCodeRemarks(s)
	return eu
}

// SetNillableEmployeeCategoryCodeRemarks sets the "EmployeeCategoryCodeRemarks" field if the given value is not nil.
func (eu *EmployeesUpdate) SetNillableEmployeeCategoryCodeRemarks(s *string) *EmployeesUpdate {
	if s != nil {
		eu.SetEmployeeCategoryCodeRemarks(*s)
	}
	return eu
}

// ClearEmployeeCategoryCodeRemarks clears the value of the "EmployeeCategoryCodeRemarks" field.
func (eu *EmployeesUpdate) ClearEmployeeCategoryCodeRemarks() *EmployeesUpdate {
	eu.mutation.ClearEmployeeCategoryCodeRemarks()
	return eu
}

// SetWithDisability sets the "WithDisability" field.
func (eu *EmployeesUpdate) SetWithDisability(s string) *EmployeesUpdate {
	eu.mutation.SetWithDisability(s)
	return eu
}

// SetWithDisabilityVerified sets the "WithDisabilityVerified" field.
func (eu *EmployeesUpdate) SetWithDisabilityVerified(b bool) *EmployeesUpdate {
	eu.mutation.SetWithDisabilityVerified(b)
	return eu
}

// SetNillableWithDisabilityVerified sets the "WithDisabilityVerified" field if the given value is not nil.
func (eu *EmployeesUpdate) SetNillableWithDisabilityVerified(b *bool) *EmployeesUpdate {
	if b != nil {
		eu.SetWithDisabilityVerified(*b)
	}
	return eu
}

// SetWithDisabilityRemStatus sets the "WithDisabilityRemStatus" field.
func (eu *EmployeesUpdate) SetWithDisabilityRemStatus(b bool) *EmployeesUpdate {
	eu.mutation.SetWithDisabilityRemStatus(b)
	return eu
}

// SetNillableWithDisabilityRemStatus sets the "WithDisabilityRemStatus" field if the given value is not nil.
func (eu *EmployeesUpdate) SetNillableWithDisabilityRemStatus(b *bool) *EmployeesUpdate {
	if b != nil {
		eu.SetWithDisabilityRemStatus(*b)
	}
	return eu
}

// SetWithDisabilityRemarks sets the "WithDisabilityRemarks" field.
func (eu *EmployeesUpdate) SetWithDisabilityRemarks(b bool) *EmployeesUpdate {
	eu.mutation.SetWithDisabilityRemarks(b)
	return eu
}

// SetNillableWithDisabilityRemarks sets the "WithDisabilityRemarks" field if the given value is not nil.
func (eu *EmployeesUpdate) SetNillableWithDisabilityRemarks(b *bool) *EmployeesUpdate {
	if b != nil {
		eu.SetWithDisabilityRemarks(*b)
	}
	return eu
}

// ClearWithDisabilityRemarks clears the value of the "WithDisabilityRemarks" field.
func (eu *EmployeesUpdate) ClearWithDisabilityRemarks() *EmployeesUpdate {
	eu.mutation.ClearWithDisabilityRemarks()
	return eu
}

// SetDisabilityType sets the "DisabilityType" field.
func (eu *EmployeesUpdate) SetDisabilityType(s string) *EmployeesUpdate {
	eu.mutation.SetDisabilityType(s)
	return eu
}

// SetNillableDisabilityType sets the "DisabilityType" field if the given value is not nil.
func (eu *EmployeesUpdate) SetNillableDisabilityType(s *string) *EmployeesUpdate {
	if s != nil {
		eu.SetDisabilityType(*s)
	}
	return eu
}

// ClearDisabilityType clears the value of the "DisabilityType" field.
func (eu *EmployeesUpdate) ClearDisabilityType() *EmployeesUpdate {
	eu.mutation.ClearDisabilityType()
	return eu
}

// SetDisabilityTypeVerified sets the "DisabilityTypeVerified" field.
func (eu *EmployeesUpdate) SetDisabilityTypeVerified(b bool) *EmployeesUpdate {
	eu.mutation.SetDisabilityTypeVerified(b)
	return eu
}

// SetNillableDisabilityTypeVerified sets the "DisabilityTypeVerified" field if the given value is not nil.
func (eu *EmployeesUpdate) SetNillableDisabilityTypeVerified(b *bool) *EmployeesUpdate {
	if b != nil {
		eu.SetDisabilityTypeVerified(*b)
	}
	return eu
}

// SetDisabilityTypeRemStatus sets the "DisabilityTypeRemStatus" field.
func (eu *EmployeesUpdate) SetDisabilityTypeRemStatus(b bool) *EmployeesUpdate {
	eu.mutation.SetDisabilityTypeRemStatus(b)
	return eu
}

// SetNillableDisabilityTypeRemStatus sets the "DisabilityTypeRemStatus" field if the given value is not nil.
func (eu *EmployeesUpdate) SetNillableDisabilityTypeRemStatus(b *bool) *EmployeesUpdate {
	if b != nil {
		eu.SetDisabilityTypeRemStatus(*b)
	}
	return eu
}

// SetDisabilityTypeRemarks sets the "DisabilityTypeRemarks" field.
func (eu *EmployeesUpdate) SetDisabilityTypeRemarks(s string) *EmployeesUpdate {
	eu.mutation.SetDisabilityTypeRemarks(s)
	return eu
}

// SetNillableDisabilityTypeRemarks sets the "DisabilityTypeRemarks" field if the given value is not nil.
func (eu *EmployeesUpdate) SetNillableDisabilityTypeRemarks(s *string) *EmployeesUpdate {
	if s != nil {
		eu.SetDisabilityTypeRemarks(*s)
	}
	return eu
}

// ClearDisabilityTypeRemarks clears the value of the "DisabilityTypeRemarks" field.
func (eu *EmployeesUpdate) ClearDisabilityTypeRemarks() *EmployeesUpdate {
	eu.mutation.ClearDisabilityTypeRemarks()
	return eu
}

// SetDisabilityPercentage sets the "DisabilityPercentage" field.
func (eu *EmployeesUpdate) SetDisabilityPercentage(i int32) *EmployeesUpdate {
	eu.mutation.ResetDisabilityPercentage()
	eu.mutation.SetDisabilityPercentage(i)
	return eu
}

// SetNillableDisabilityPercentage sets the "DisabilityPercentage" field if the given value is not nil.
func (eu *EmployeesUpdate) SetNillableDisabilityPercentage(i *int32) *EmployeesUpdate {
	if i != nil {
		eu.SetDisabilityPercentage(*i)
	}
	return eu
}

// AddDisabilityPercentage adds i to the "DisabilityPercentage" field.
func (eu *EmployeesUpdate) AddDisabilityPercentage(i int32) *EmployeesUpdate {
	eu.mutation.AddDisabilityPercentage(i)
	return eu
}

// ClearDisabilityPercentage clears the value of the "DisabilityPercentage" field.
func (eu *EmployeesUpdate) ClearDisabilityPercentage() *EmployeesUpdate {
	eu.mutation.ClearDisabilityPercentage()
	return eu
}

// SetDisabilityPercentageVerified sets the "DisabilityPercentageVerified" field.
func (eu *EmployeesUpdate) SetDisabilityPercentageVerified(b bool) *EmployeesUpdate {
	eu.mutation.SetDisabilityPercentageVerified(b)
	return eu
}

// SetNillableDisabilityPercentageVerified sets the "DisabilityPercentageVerified" field if the given value is not nil.
func (eu *EmployeesUpdate) SetNillableDisabilityPercentageVerified(b *bool) *EmployeesUpdate {
	if b != nil {
		eu.SetDisabilityPercentageVerified(*b)
	}
	return eu
}

// SetDisabilityPercentageRemStatus sets the "DisabilityPercentageRemStatus" field.
func (eu *EmployeesUpdate) SetDisabilityPercentageRemStatus(b bool) *EmployeesUpdate {
	eu.mutation.SetDisabilityPercentageRemStatus(b)
	return eu
}

// SetNillableDisabilityPercentageRemStatus sets the "DisabilityPercentageRemStatus" field if the given value is not nil.
func (eu *EmployeesUpdate) SetNillableDisabilityPercentageRemStatus(b *bool) *EmployeesUpdate {
	if b != nil {
		eu.SetDisabilityPercentageRemStatus(*b)
	}
	return eu
}

// SetDisabilityPercentageRemarks sets the "DisabilityPercentageRemarks" field.
func (eu *EmployeesUpdate) SetDisabilityPercentageRemarks(s string) *EmployeesUpdate {
	eu.mutation.SetDisabilityPercentageRemarks(s)
	return eu
}

// SetNillableDisabilityPercentageRemarks sets the "DisabilityPercentageRemarks" field if the given value is not nil.
func (eu *EmployeesUpdate) SetNillableDisabilityPercentageRemarks(s *string) *EmployeesUpdate {
	if s != nil {
		eu.SetDisabilityPercentageRemarks(*s)
	}
	return eu
}

// ClearDisabilityPercentageRemarks clears the value of the "DisabilityPercentageRemarks" field.
func (eu *EmployeesUpdate) ClearDisabilityPercentageRemarks() *EmployeesUpdate {
	eu.mutation.ClearDisabilityPercentageRemarks()
	return eu
}

// SetSignature sets the "Signature" field.
func (eu *EmployeesUpdate) SetSignature(s string) *EmployeesUpdate {
	eu.mutation.SetSignature(s)
	return eu
}

// SetSignatureVerified sets the "SignatureVerified" field.
func (eu *EmployeesUpdate) SetSignatureVerified(b bool) *EmployeesUpdate {
	eu.mutation.SetSignatureVerified(b)
	return eu
}

// SetNillableSignatureVerified sets the "SignatureVerified" field if the given value is not nil.
func (eu *EmployeesUpdate) SetNillableSignatureVerified(b *bool) *EmployeesUpdate {
	if b != nil {
		eu.SetSignatureVerified(*b)
	}
	return eu
}

// SetSignatureRemStatus sets the "SignatureRemStatus" field.
func (eu *EmployeesUpdate) SetSignatureRemStatus(b bool) *EmployeesUpdate {
	eu.mutation.SetSignatureRemStatus(b)
	return eu
}

// SetNillableSignatureRemStatus sets the "SignatureRemStatus" field if the given value is not nil.
func (eu *EmployeesUpdate) SetNillableSignatureRemStatus(b *bool) *EmployeesUpdate {
	if b != nil {
		eu.SetSignatureRemStatus(*b)
	}
	return eu
}

// SetSignatureRemarks sets the "SignatureRemarks" field.
func (eu *EmployeesUpdate) SetSignatureRemarks(s string) *EmployeesUpdate {
	eu.mutation.SetSignatureRemarks(s)
	return eu
}

// SetNillableSignatureRemarks sets the "SignatureRemarks" field if the given value is not nil.
func (eu *EmployeesUpdate) SetNillableSignatureRemarks(s *string) *EmployeesUpdate {
	if s != nil {
		eu.SetSignatureRemarks(*s)
	}
	return eu
}

// ClearSignatureRemarks clears the value of the "SignatureRemarks" field.
func (eu *EmployeesUpdate) ClearSignatureRemarks() *EmployeesUpdate {
	eu.mutation.ClearSignatureRemarks()
	return eu
}

// SetPhoto sets the "Photo" field.
func (eu *EmployeesUpdate) SetPhoto(s string) *EmployeesUpdate {
	eu.mutation.SetPhoto(s)
	return eu
}

// SetPhotoVerified sets the "PhotoVerified" field.
func (eu *EmployeesUpdate) SetPhotoVerified(b bool) *EmployeesUpdate {
	eu.mutation.SetPhotoVerified(b)
	return eu
}

// SetNillablePhotoVerified sets the "PhotoVerified" field if the given value is not nil.
func (eu *EmployeesUpdate) SetNillablePhotoVerified(b *bool) *EmployeesUpdate {
	if b != nil {
		eu.SetPhotoVerified(*b)
	}
	return eu
}

// SetPhotoRemStatus sets the "PhotoRemStatus" field.
func (eu *EmployeesUpdate) SetPhotoRemStatus(b bool) *EmployeesUpdate {
	eu.mutation.SetPhotoRemStatus(b)
	return eu
}

// SetNillablePhotoRemStatus sets the "PhotoRemStatus" field if the given value is not nil.
func (eu *EmployeesUpdate) SetNillablePhotoRemStatus(b *bool) *EmployeesUpdate {
	if b != nil {
		eu.SetPhotoRemStatus(*b)
	}
	return eu
}

// SetPhotoRemarks sets the "PhotoRemarks" field.
func (eu *EmployeesUpdate) SetPhotoRemarks(s string) *EmployeesUpdate {
	eu.mutation.SetPhotoRemarks(s)
	return eu
}

// SetNillablePhotoRemarks sets the "PhotoRemarks" field if the given value is not nil.
func (eu *EmployeesUpdate) SetNillablePhotoRemarks(s *string) *EmployeesUpdate {
	if s != nil {
		eu.SetPhotoRemarks(*s)
	}
	return eu
}

// ClearPhotoRemarks clears the value of the "PhotoRemarks" field.
func (eu *EmployeesUpdate) ClearPhotoRemarks() *EmployeesUpdate {
	eu.mutation.ClearPhotoRemarks()
	return eu
}

// SetPostID sets the "PostID" field.
func (eu *EmployeesUpdate) SetPostID(i int32) *EmployeesUpdate {
	eu.mutation.ResetPostID()
	eu.mutation.SetPostID(i)
	return eu
}

// SetNillablePostID sets the "PostID" field if the given value is not nil.
func (eu *EmployeesUpdate) SetNillablePostID(i *int32) *EmployeesUpdate {
	if i != nil {
		eu.SetPostID(*i)
	}
	return eu
}

// AddPostID adds i to the "PostID" field.
func (eu *EmployeesUpdate) AddPostID(i int32) *EmployeesUpdate {
	eu.mutation.AddPostID(i)
	return eu
}

// ClearPostID clears the value of the "PostID" field.
func (eu *EmployeesUpdate) ClearPostID() *EmployeesUpdate {
	eu.mutation.ClearPostID()
	return eu
}

// SetPostCode sets the "PostCode" field.
func (eu *EmployeesUpdate) SetPostCode(s string) *EmployeesUpdate {
	eu.mutation.SetPostCode(s)
	return eu
}

// SetNillablePostCode sets the "PostCode" field if the given value is not nil.
func (eu *EmployeesUpdate) SetNillablePostCode(s *string) *EmployeesUpdate {
	if s != nil {
		eu.SetPostCode(*s)
	}
	return eu
}

// ClearPostCode clears the value of the "PostCode" field.
func (eu *EmployeesUpdate) ClearPostCode() *EmployeesUpdate {
	eu.mutation.ClearPostCode()
	return eu
}

// SetEmployeePost sets the "EmployeePost" field.
func (eu *EmployeesUpdate) SetEmployeePost(s string) *EmployeesUpdate {
	eu.mutation.SetEmployeePost(s)
	return eu
}

// SetEmployeePostVerified sets the "EmployeePostVerified" field.
func (eu *EmployeesUpdate) SetEmployeePostVerified(b bool) *EmployeesUpdate {
	eu.mutation.SetEmployeePostVerified(b)
	return eu
}

// SetNillableEmployeePostVerified sets the "EmployeePostVerified" field if the given value is not nil.
func (eu *EmployeesUpdate) SetNillableEmployeePostVerified(b *bool) *EmployeesUpdate {
	if b != nil {
		eu.SetEmployeePostVerified(*b)
	}
	return eu
}

// SetEmployeePostRemStatus sets the "EmployeePostRemStatus" field.
func (eu *EmployeesUpdate) SetEmployeePostRemStatus(b bool) *EmployeesUpdate {
	eu.mutation.SetEmployeePostRemStatus(b)
	return eu
}

// SetNillableEmployeePostRemStatus sets the "EmployeePostRemStatus" field if the given value is not nil.
func (eu *EmployeesUpdate) SetNillableEmployeePostRemStatus(b *bool) *EmployeesUpdate {
	if b != nil {
		eu.SetEmployeePostRemStatus(*b)
	}
	return eu
}

// SetEmployeePostRemarks sets the "EmployeePostRemarks" field.
func (eu *EmployeesUpdate) SetEmployeePostRemarks(s string) *EmployeesUpdate {
	eu.mutation.SetEmployeePostRemarks(s)
	return eu
}

// SetNillableEmployeePostRemarks sets the "EmployeePostRemarks" field if the given value is not nil.
func (eu *EmployeesUpdate) SetNillableEmployeePostRemarks(s *string) *EmployeesUpdate {
	if s != nil {
		eu.SetEmployeePostRemarks(*s)
	}
	return eu
}

// ClearEmployeePostRemarks clears the value of the "EmployeePostRemarks" field.
func (eu *EmployeesUpdate) ClearEmployeePostRemarks() *EmployeesUpdate {
	eu.mutation.ClearEmployeePostRemarks()
	return eu
}

// SetDesignationID sets the "DesignationID" field.
func (eu *EmployeesUpdate) SetDesignationID(i int32) *EmployeesUpdate {
	eu.mutation.ResetDesignationID()
	eu.mutation.SetDesignationID(i)
	return eu
}

// SetNillableDesignationID sets the "DesignationID" field if the given value is not nil.
func (eu *EmployeesUpdate) SetNillableDesignationID(i *int32) *EmployeesUpdate {
	if i != nil {
		eu.SetDesignationID(*i)
	}
	return eu
}

// AddDesignationID adds i to the "DesignationID" field.
func (eu *EmployeesUpdate) AddDesignationID(i int32) *EmployeesUpdate {
	eu.mutation.AddDesignationID(i)
	return eu
}

// ClearDesignationID clears the value of the "DesignationID" field.
func (eu *EmployeesUpdate) ClearDesignationID() *EmployeesUpdate {
	eu.mutation.ClearDesignationID()
	return eu
}

// SetEmployeeDesignation sets the "EmployeeDesignation" field.
func (eu *EmployeesUpdate) SetEmployeeDesignation(s string) *EmployeesUpdate {
	eu.mutation.SetEmployeeDesignation(s)
	return eu
}

// SetEmployeeDesignationVerified sets the "EmployeeDesignationVerified" field.
func (eu *EmployeesUpdate) SetEmployeeDesignationVerified(b bool) *EmployeesUpdate {
	eu.mutation.SetEmployeeDesignationVerified(b)
	return eu
}

// SetNillableEmployeeDesignationVerified sets the "EmployeeDesignationVerified" field if the given value is not nil.
func (eu *EmployeesUpdate) SetNillableEmployeeDesignationVerified(b *bool) *EmployeesUpdate {
	if b != nil {
		eu.SetEmployeeDesignationVerified(*b)
	}
	return eu
}

// SetEmployeeDesignationRemStatus sets the "EmployeeDesignationRemStatus" field.
func (eu *EmployeesUpdate) SetEmployeeDesignationRemStatus(b bool) *EmployeesUpdate {
	eu.mutation.SetEmployeeDesignationRemStatus(b)
	return eu
}

// SetNillableEmployeeDesignationRemStatus sets the "EmployeeDesignationRemStatus" field if the given value is not nil.
func (eu *EmployeesUpdate) SetNillableEmployeeDesignationRemStatus(b *bool) *EmployeesUpdate {
	if b != nil {
		eu.SetEmployeeDesignationRemStatus(*b)
	}
	return eu
}

// SetEmployeeDesignationRemarks sets the "EmployeeDesignationRemarks" field.
func (eu *EmployeesUpdate) SetEmployeeDesignationRemarks(s string) *EmployeesUpdate {
	eu.mutation.SetEmployeeDesignationRemarks(s)
	return eu
}

// SetNillableEmployeeDesignationRemarks sets the "EmployeeDesignationRemarks" field if the given value is not nil.
func (eu *EmployeesUpdate) SetNillableEmployeeDesignationRemarks(s *string) *EmployeesUpdate {
	if s != nil {
		eu.SetEmployeeDesignationRemarks(*s)
	}
	return eu
}

// ClearEmployeeDesignationRemarks clears the value of the "EmployeeDesignationRemarks" field.
func (eu *EmployeesUpdate) ClearEmployeeDesignationRemarks() *EmployeesUpdate {
	eu.mutation.ClearEmployeeDesignationRemarks()
	return eu
}

// SetCircleID sets the "CircleID" field.
func (eu *EmployeesUpdate) SetCircleID(i int32) *EmployeesUpdate {
	eu.mutation.ResetCircleID()
	eu.mutation.SetCircleID(i)
	return eu
}

// SetNillableCircleID sets the "CircleID" field if the given value is not nil.
func (eu *EmployeesUpdate) SetNillableCircleID(i *int32) *EmployeesUpdate {
	if i != nil {
		eu.SetCircleID(*i)
	}
	return eu
}

// AddCircleID adds i to the "CircleID" field.
func (eu *EmployeesUpdate) AddCircleID(i int32) *EmployeesUpdate {
	eu.mutation.AddCircleID(i)
	return eu
}

// ClearCircleID clears the value of the "CircleID" field.
func (eu *EmployeesUpdate) ClearCircleID() *EmployeesUpdate {
	eu.mutation.ClearCircleID()
	return eu
}

// SetCircleName sets the "CircleName" field.
func (eu *EmployeesUpdate) SetCircleName(s string) *EmployeesUpdate {
	eu.mutation.SetCircleName(s)
	return eu
}

// SetCircleVerified sets the "CircleVerified" field.
func (eu *EmployeesUpdate) SetCircleVerified(b bool) *EmployeesUpdate {
	eu.mutation.SetCircleVerified(b)
	return eu
}

// SetNillableCircleVerified sets the "CircleVerified" field if the given value is not nil.
func (eu *EmployeesUpdate) SetNillableCircleVerified(b *bool) *EmployeesUpdate {
	if b != nil {
		eu.SetCircleVerified(*b)
	}
	return eu
}

// SetCircleRemStatus sets the "CircleRemStatus" field.
func (eu *EmployeesUpdate) SetCircleRemStatus(b bool) *EmployeesUpdate {
	eu.mutation.SetCircleRemStatus(b)
	return eu
}

// SetNillableCircleRemStatus sets the "CircleRemStatus" field if the given value is not nil.
func (eu *EmployeesUpdate) SetNillableCircleRemStatus(b *bool) *EmployeesUpdate {
	if b != nil {
		eu.SetCircleRemStatus(*b)
	}
	return eu
}

// SetCircleRemarks sets the "CircleRemarks" field.
func (eu *EmployeesUpdate) SetCircleRemarks(s string) *EmployeesUpdate {
	eu.mutation.SetCircleRemarks(s)
	return eu
}

// SetNillableCircleRemarks sets the "CircleRemarks" field if the given value is not nil.
func (eu *EmployeesUpdate) SetNillableCircleRemarks(s *string) *EmployeesUpdate {
	if s != nil {
		eu.SetCircleRemarks(*s)
	}
	return eu
}

// ClearCircleRemarks clears the value of the "CircleRemarks" field.
func (eu *EmployeesUpdate) ClearCircleRemarks() *EmployeesUpdate {
	eu.mutation.ClearCircleRemarks()
	return eu
}

// SetRegionID sets the "RegionID" field.
func (eu *EmployeesUpdate) SetRegionID(i int32) *EmployeesUpdate {
	eu.mutation.ResetRegionID()
	eu.mutation.SetRegionID(i)
	return eu
}

// SetNillableRegionID sets the "RegionID" field if the given value is not nil.
func (eu *EmployeesUpdate) SetNillableRegionID(i *int32) *EmployeesUpdate {
	if i != nil {
		eu.SetRegionID(*i)
	}
	return eu
}

// AddRegionID adds i to the "RegionID" field.
func (eu *EmployeesUpdate) AddRegionID(i int32) *EmployeesUpdate {
	eu.mutation.AddRegionID(i)
	return eu
}

// ClearRegionID clears the value of the "RegionID" field.
func (eu *EmployeesUpdate) ClearRegionID() *EmployeesUpdate {
	eu.mutation.ClearRegionID()
	return eu
}

// SetRegionName sets the "RegionName" field.
func (eu *EmployeesUpdate) SetRegionName(s string) *EmployeesUpdate {
	eu.mutation.SetRegionName(s)
	return eu
}

// SetNillableRegionName sets the "RegionName" field if the given value is not nil.
func (eu *EmployeesUpdate) SetNillableRegionName(s *string) *EmployeesUpdate {
	if s != nil {
		eu.SetRegionName(*s)
	}
	return eu
}

// ClearRegionName clears the value of the "RegionName" field.
func (eu *EmployeesUpdate) ClearRegionName() *EmployeesUpdate {
	eu.mutation.ClearRegionName()
	return eu
}

// SetRegionVerified sets the "RegionVerified" field.
func (eu *EmployeesUpdate) SetRegionVerified(b bool) *EmployeesUpdate {
	eu.mutation.SetRegionVerified(b)
	return eu
}

// SetNillableRegionVerified sets the "RegionVerified" field if the given value is not nil.
func (eu *EmployeesUpdate) SetNillableRegionVerified(b *bool) *EmployeesUpdate {
	if b != nil {
		eu.SetRegionVerified(*b)
	}
	return eu
}

// SetRegionRemStatus sets the "RegionRemStatus" field.
func (eu *EmployeesUpdate) SetRegionRemStatus(b bool) *EmployeesUpdate {
	eu.mutation.SetRegionRemStatus(b)
	return eu
}

// SetNillableRegionRemStatus sets the "RegionRemStatus" field if the given value is not nil.
func (eu *EmployeesUpdate) SetNillableRegionRemStatus(b *bool) *EmployeesUpdate {
	if b != nil {
		eu.SetRegionRemStatus(*b)
	}
	return eu
}

// SetRegionRemarks sets the "RegionRemarks" field.
func (eu *EmployeesUpdate) SetRegionRemarks(s string) *EmployeesUpdate {
	eu.mutation.SetRegionRemarks(s)
	return eu
}

// SetNillableRegionRemarks sets the "RegionRemarks" field if the given value is not nil.
func (eu *EmployeesUpdate) SetNillableRegionRemarks(s *string) *EmployeesUpdate {
	if s != nil {
		eu.SetRegionRemarks(*s)
	}
	return eu
}

// ClearRegionRemarks clears the value of the "RegionRemarks" field.
func (eu *EmployeesUpdate) ClearRegionRemarks() *EmployeesUpdate {
	eu.mutation.ClearRegionRemarks()
	return eu
}

// SetDivisionID sets the "DivisionID" field.
func (eu *EmployeesUpdate) SetDivisionID(i int32) *EmployeesUpdate {
	eu.mutation.ResetDivisionID()
	eu.mutation.SetDivisionID(i)
	return eu
}

// SetNillableDivisionID sets the "DivisionID" field if the given value is not nil.
func (eu *EmployeesUpdate) SetNillableDivisionID(i *int32) *EmployeesUpdate {
	if i != nil {
		eu.SetDivisionID(*i)
	}
	return eu
}

// AddDivisionID adds i to the "DivisionID" field.
func (eu *EmployeesUpdate) AddDivisionID(i int32) *EmployeesUpdate {
	eu.mutation.AddDivisionID(i)
	return eu
}

// ClearDivisionID clears the value of the "DivisionID" field.
func (eu *EmployeesUpdate) ClearDivisionID() *EmployeesUpdate {
	eu.mutation.ClearDivisionID()
	return eu
}

// SetDivisionName sets the "DivisionName" field.
func (eu *EmployeesUpdate) SetDivisionName(s string) *EmployeesUpdate {
	eu.mutation.SetDivisionName(s)
	return eu
}

// SetNillableDivisionName sets the "DivisionName" field if the given value is not nil.
func (eu *EmployeesUpdate) SetNillableDivisionName(s *string) *EmployeesUpdate {
	if s != nil {
		eu.SetDivisionName(*s)
	}
	return eu
}

// ClearDivisionName clears the value of the "DivisionName" field.
func (eu *EmployeesUpdate) ClearDivisionName() *EmployeesUpdate {
	eu.mutation.ClearDivisionName()
	return eu
}

// SetDivisionVerified sets the "DivisionVerified" field.
func (eu *EmployeesUpdate) SetDivisionVerified(b bool) *EmployeesUpdate {
	eu.mutation.SetDivisionVerified(b)
	return eu
}

// SetNillableDivisionVerified sets the "DivisionVerified" field if the given value is not nil.
func (eu *EmployeesUpdate) SetNillableDivisionVerified(b *bool) *EmployeesUpdate {
	if b != nil {
		eu.SetDivisionVerified(*b)
	}
	return eu
}

// SetDivisionRemStatus sets the "DivisionRemStatus" field.
func (eu *EmployeesUpdate) SetDivisionRemStatus(b bool) *EmployeesUpdate {
	eu.mutation.SetDivisionRemStatus(b)
	return eu
}

// SetNillableDivisionRemStatus sets the "DivisionRemStatus" field if the given value is not nil.
func (eu *EmployeesUpdate) SetNillableDivisionRemStatus(b *bool) *EmployeesUpdate {
	if b != nil {
		eu.SetDivisionRemStatus(*b)
	}
	return eu
}

// SetDivisionRemarks sets the "DivisionRemarks" field.
func (eu *EmployeesUpdate) SetDivisionRemarks(s string) *EmployeesUpdate {
	eu.mutation.SetDivisionRemarks(s)
	return eu
}

// SetOfficeID sets the "OfficeID" field.
func (eu *EmployeesUpdate) SetOfficeID(i int32) *EmployeesUpdate {
	eu.mutation.ResetOfficeID()
	eu.mutation.SetOfficeID(i)
	return eu
}

// SetNillableOfficeID sets the "OfficeID" field if the given value is not nil.
func (eu *EmployeesUpdate) SetNillableOfficeID(i *int32) *EmployeesUpdate {
	if i != nil {
		eu.SetOfficeID(*i)
	}
	return eu
}

// AddOfficeID adds i to the "OfficeID" field.
func (eu *EmployeesUpdate) AddOfficeID(i int32) *EmployeesUpdate {
	eu.mutation.AddOfficeID(i)
	return eu
}

// ClearOfficeID clears the value of the "OfficeID" field.
func (eu *EmployeesUpdate) ClearOfficeID() *EmployeesUpdate {
	eu.mutation.ClearOfficeID()
	return eu
}

// SetOfficeName sets the "OfficeName" field.
func (eu *EmployeesUpdate) SetOfficeName(s string) *EmployeesUpdate {
	eu.mutation.SetOfficeName(s)
	return eu
}

// SetOfficeVerified sets the "OfficeVerified" field.
func (eu *EmployeesUpdate) SetOfficeVerified(b bool) *EmployeesUpdate {
	eu.mutation.SetOfficeVerified(b)
	return eu
}

// SetNillableOfficeVerified sets the "OfficeVerified" field if the given value is not nil.
func (eu *EmployeesUpdate) SetNillableOfficeVerified(b *bool) *EmployeesUpdate {
	if b != nil {
		eu.SetOfficeVerified(*b)
	}
	return eu
}

// SetOfficeRemStatus sets the "OfficeRemStatus" field.
func (eu *EmployeesUpdate) SetOfficeRemStatus(b bool) *EmployeesUpdate {
	eu.mutation.SetOfficeRemStatus(b)
	return eu
}

// SetNillableOfficeRemStatus sets the "OfficeRemStatus" field if the given value is not nil.
func (eu *EmployeesUpdate) SetNillableOfficeRemStatus(b *bool) *EmployeesUpdate {
	if b != nil {
		eu.SetOfficeRemStatus(*b)
	}
	return eu
}

// SetOfficeRemarks sets the "OfficeRemarks" field.
func (eu *EmployeesUpdate) SetOfficeRemarks(s string) *EmployeesUpdate {
	eu.mutation.SetOfficeRemarks(s)
	return eu
}

// SetNillableOfficeRemarks sets the "OfficeRemarks" field if the given value is not nil.
func (eu *EmployeesUpdate) SetNillableOfficeRemarks(s *string) *EmployeesUpdate {
	if s != nil {
		eu.SetOfficeRemarks(*s)
	}
	return eu
}

// ClearOfficeRemarks clears the value of the "OfficeRemarks" field.
func (eu *EmployeesUpdate) ClearOfficeRemarks() *EmployeesUpdate {
	eu.mutation.ClearOfficeRemarks()
	return eu
}

// SetRole sets the "Role" field.
func (eu *EmployeesUpdate) SetRole(s string) *EmployeesUpdate {
	eu.mutation.SetRole(s)
	return eu
}

// SetRoleVerified sets the "RoleVerified" field.
func (eu *EmployeesUpdate) SetRoleVerified(b bool) *EmployeesUpdate {
	eu.mutation.SetRoleVerified(b)
	return eu
}

// SetNillableRoleVerified sets the "RoleVerified" field if the given value is not nil.
func (eu *EmployeesUpdate) SetNillableRoleVerified(b *bool) *EmployeesUpdate {
	if b != nil {
		eu.SetRoleVerified(*b)
	}
	return eu
}

// SetRoleRemStatus sets the "RoleRemStatus" field.
func (eu *EmployeesUpdate) SetRoleRemStatus(b bool) *EmployeesUpdate {
	eu.mutation.SetRoleRemStatus(b)
	return eu
}

// SetNillableRoleRemStatus sets the "RoleRemStatus" field if the given value is not nil.
func (eu *EmployeesUpdate) SetNillableRoleRemStatus(b *bool) *EmployeesUpdate {
	if b != nil {
		eu.SetRoleRemStatus(*b)
	}
	return eu
}

// SetRoleRemarks sets the "RoleRemarks" field.
func (eu *EmployeesUpdate) SetRoleRemarks(s string) *EmployeesUpdate {
	eu.mutation.SetRoleRemarks(s)
	return eu
}

// SetDCCS sets the "DCCS" field.
func (eu *EmployeesUpdate) SetDCCS(t time.Time) *EmployeesUpdate {
	eu.mutation.SetDCCS(t)
	return eu
}

// SetDCCSVerified sets the "DCCSVerified" field.
func (eu *EmployeesUpdate) SetDCCSVerified(b bool) *EmployeesUpdate {
	eu.mutation.SetDCCSVerified(b)
	return eu
}

// SetNillableDCCSVerified sets the "DCCSVerified" field if the given value is not nil.
func (eu *EmployeesUpdate) SetNillableDCCSVerified(b *bool) *EmployeesUpdate {
	if b != nil {
		eu.SetDCCSVerified(*b)
	}
	return eu
}

// SetDCCSRemStatus sets the "DCCSRemStatus" field.
func (eu *EmployeesUpdate) SetDCCSRemStatus(b bool) *EmployeesUpdate {
	eu.mutation.SetDCCSRemStatus(b)
	return eu
}

// SetNillableDCCSRemStatus sets the "DCCSRemStatus" field if the given value is not nil.
func (eu *EmployeesUpdate) SetNillableDCCSRemStatus(b *bool) *EmployeesUpdate {
	if b != nil {
		eu.SetDCCSRemStatus(*b)
	}
	return eu
}

// SetDCCSRemarks sets the "DCCSRemarks" field.
func (eu *EmployeesUpdate) SetDCCSRemarks(s string) *EmployeesUpdate {
	eu.mutation.SetDCCSRemarks(s)
	return eu
}

// SetNillableDCCSRemarks sets the "DCCSRemarks" field if the given value is not nil.
func (eu *EmployeesUpdate) SetNillableDCCSRemarks(s *string) *EmployeesUpdate {
	if s != nil {
		eu.SetDCCSRemarks(*s)
	}
	return eu
}

// ClearDCCSRemarks clears the value of the "DCCSRemarks" field.
func (eu *EmployeesUpdate) ClearDCCSRemarks() *EmployeesUpdate {
	eu.mutation.ClearDCCSRemarks()
	return eu
}

// SetDCInPresentCadre sets the "DCInPresentCadre" field.
func (eu *EmployeesUpdate) SetDCInPresentCadre(t time.Time) *EmployeesUpdate {
	eu.mutation.SetDCInPresentCadre(t)
	return eu
}

// SetDCInPresentCadreVerified sets the "DCInPresentCadreVerified" field.
func (eu *EmployeesUpdate) SetDCInPresentCadreVerified(b bool) *EmployeesUpdate {
	eu.mutation.SetDCInPresentCadreVerified(b)
	return eu
}

// SetNillableDCInPresentCadreVerified sets the "DCInPresentCadreVerified" field if the given value is not nil.
func (eu *EmployeesUpdate) SetNillableDCInPresentCadreVerified(b *bool) *EmployeesUpdate {
	if b != nil {
		eu.SetDCInPresentCadreVerified(*b)
	}
	return eu
}

// SetDCInPresentCadreRemStatus sets the "DCInPresentCadreRemStatus" field.
func (eu *EmployeesUpdate) SetDCInPresentCadreRemStatus(b bool) *EmployeesUpdate {
	eu.mutation.SetDCInPresentCadreRemStatus(b)
	return eu
}

// SetNillableDCInPresentCadreRemStatus sets the "DCInPresentCadreRemStatus" field if the given value is not nil.
func (eu *EmployeesUpdate) SetNillableDCInPresentCadreRemStatus(b *bool) *EmployeesUpdate {
	if b != nil {
		eu.SetDCInPresentCadreRemStatus(*b)
	}
	return eu
}

// SetDCInPresentCadreRemarks sets the "DCInPresentCadreRemarks" field.
func (eu *EmployeesUpdate) SetDCInPresentCadreRemarks(s string) *EmployeesUpdate {
	eu.mutation.SetDCInPresentCadreRemarks(s)
	return eu
}

// SetNillableDCInPresentCadreRemarks sets the "DCInPresentCadreRemarks" field if the given value is not nil.
func (eu *EmployeesUpdate) SetNillableDCInPresentCadreRemarks(s *string) *EmployeesUpdate {
	if s != nil {
		eu.SetDCInPresentCadreRemarks(*s)
	}
	return eu
}

// ClearDCInPresentCadreRemarks clears the value of the "DCInPresentCadreRemarks" field.
func (eu *EmployeesUpdate) ClearDCInPresentCadreRemarks() *EmployeesUpdate {
	eu.mutation.ClearDCInPresentCadreRemarks()
	return eu
}

// SetAPSWorking sets the "APSWorking" field.
func (eu *EmployeesUpdate) SetAPSWorking(b bool) *EmployeesUpdate {
	eu.mutation.SetAPSWorking(b)
	return eu
}

// SetNillableAPSWorking sets the "APSWorking" field if the given value is not nil.
func (eu *EmployeesUpdate) SetNillableAPSWorking(b *bool) *EmployeesUpdate {
	if b != nil {
		eu.SetAPSWorking(*b)
	}
	return eu
}

// ClearAPSWorking clears the value of the "APSWorking" field.
func (eu *EmployeesUpdate) ClearAPSWorking() *EmployeesUpdate {
	eu.mutation.ClearAPSWorking()
	return eu
}

// SetAPSWorkingVerified sets the "APSWorkingVerified" field.
func (eu *EmployeesUpdate) SetAPSWorkingVerified(b bool) *EmployeesUpdate {
	eu.mutation.SetAPSWorkingVerified(b)
	return eu
}

// SetNillableAPSWorkingVerified sets the "APSWorkingVerified" field if the given value is not nil.
func (eu *EmployeesUpdate) SetNillableAPSWorkingVerified(b *bool) *EmployeesUpdate {
	if b != nil {
		eu.SetAPSWorkingVerified(*b)
	}
	return eu
}

// SetAPSWorkingRemStatus sets the "APSWorkingRemStatus" field.
func (eu *EmployeesUpdate) SetAPSWorkingRemStatus(b bool) *EmployeesUpdate {
	eu.mutation.SetAPSWorkingRemStatus(b)
	return eu
}

// SetNillableAPSWorkingRemStatus sets the "APSWorkingRemStatus" field if the given value is not nil.
func (eu *EmployeesUpdate) SetNillableAPSWorkingRemStatus(b *bool) *EmployeesUpdate {
	if b != nil {
		eu.SetAPSWorkingRemStatus(*b)
	}
	return eu
}

// SetAPSWorkingRemarks sets the "APSWorkingRemarks" field.
func (eu *EmployeesUpdate) SetAPSWorkingRemarks(s string) *EmployeesUpdate {
	eu.mutation.SetAPSWorkingRemarks(s)
	return eu
}

// SetNillableAPSWorkingRemarks sets the "APSWorkingRemarks" field if the given value is not nil.
func (eu *EmployeesUpdate) SetNillableAPSWorkingRemarks(s *string) *EmployeesUpdate {
	if s != nil {
		eu.SetAPSWorkingRemarks(*s)
	}
	return eu
}

// ClearAPSWorkingRemarks clears the value of the "APSWorkingRemarks" field.
func (eu *EmployeesUpdate) ClearAPSWorkingRemarks() *EmployeesUpdate {
	eu.mutation.ClearAPSWorkingRemarks()
	return eu
}

// SetProfilestatus sets the "profilestatus" field.
func (eu *EmployeesUpdate) SetProfilestatus(b bool) *EmployeesUpdate {
	eu.mutation.SetProfilestatus(b)
	return eu
}

// SetNillableProfilestatus sets the "profilestatus" field if the given value is not nil.
func (eu *EmployeesUpdate) SetNillableProfilestatus(b *bool) *EmployeesUpdate {
	if b != nil {
		eu.SetProfilestatus(*b)
	}
	return eu
}

// SetRoleUserCode sets the "RoleUserCode" field.
func (eu *EmployeesUpdate) SetRoleUserCode(i int32) *EmployeesUpdate {
	eu.mutation.ResetRoleUserCode()
	eu.mutation.SetRoleUserCode(i)
	return eu
}

// SetNillableRoleUserCode sets the "RoleUserCode" field if the given value is not nil.
func (eu *EmployeesUpdate) SetNillableRoleUserCode(i *int32) *EmployeesUpdate {
	if i != nil {
		eu.SetRoleUserCode(*i)
	}
	return eu
}

// AddRoleUserCode adds i to the "RoleUserCode" field.
func (eu *EmployeesUpdate) AddRoleUserCode(i int32) *EmployeesUpdate {
	eu.mutation.AddRoleUserCode(i)
	return eu
}

// ClearRoleUserCode clears the value of the "RoleUserCode" field.
func (eu *EmployeesUpdate) ClearRoleUserCode() *EmployeesUpdate {
	eu.mutation.ClearRoleUserCode()
	return eu
}

// Mutation returns the EmployeesMutation object of the builder.
func (eu *EmployeesUpdate) Mutation() *EmployeesMutation {
	return eu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (eu *EmployeesUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, eu.sqlSave, eu.mutation, eu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (eu *EmployeesUpdate) SaveX(ctx context.Context) int {
	affected, err := eu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (eu *EmployeesUpdate) Exec(ctx context.Context) error {
	_, err := eu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eu *EmployeesUpdate) ExecX(ctx context.Context) {
	if err := eu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (eu *EmployeesUpdate) check() error {
	if v, ok := eu.mutation.Gender(); ok {
		if err := employees.GenderValidator(v); err != nil {
			return &ValidationError{Name: "Gender", err: fmt.Errorf(`ent: validator failed for field "Employees.Gender": %w`, err)}
		}
	}
	return nil
}

func (eu *EmployeesUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := eu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(employees.Table, employees.Columns, sqlgraph.NewFieldSpec(employees.FieldID, field.TypeInt32))
	if ps := eu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eu.mutation.EmployeedID(); ok {
		_spec.SetField(employees.FieldEmployeedID, field.TypeInt32, value)
	}
	if value, ok := eu.mutation.AddedEmployeedID(); ok {
		_spec.AddField(employees.FieldEmployeedID, field.TypeInt32, value)
	}
	if value, ok := eu.mutation.IDVerified(); ok {
		_spec.SetField(employees.FieldIDVerified, field.TypeBool, value)
	}
	if value, ok := eu.mutation.IDRemStatus(); ok {
		_spec.SetField(employees.FieldIDRemStatus, field.TypeBool, value)
	}
	if value, ok := eu.mutation.IDRemarks(); ok {
		_spec.SetField(employees.FieldIDRemarks, field.TypeString, value)
	}
	if eu.mutation.IDRemarksCleared() {
		_spec.ClearField(employees.FieldIDRemarks, field.TypeString)
	}
	if value, ok := eu.mutation.EmployeeName(); ok {
		_spec.SetField(employees.FieldEmployeeName, field.TypeString, value)
	}
	if value, ok := eu.mutation.NameVerified(); ok {
		_spec.SetField(employees.FieldNameVerified, field.TypeBool, value)
	}
	if value, ok := eu.mutation.NameRemStatus(); ok {
		_spec.SetField(employees.FieldNameRemStatus, field.TypeBool, value)
	}
	if value, ok := eu.mutation.NameRemarks(); ok {
		_spec.SetField(employees.FieldNameRemarks, field.TypeString, value)
	}
	if eu.mutation.NameRemarksCleared() {
		_spec.ClearField(employees.FieldNameRemarks, field.TypeString)
	}
	if value, ok := eu.mutation.EmployeeFathersName(); ok {
		_spec.SetField(employees.FieldEmployeeFathersName, field.TypeString, value)
	}
	if value, ok := eu.mutation.FathersNameVerified(); ok {
		_spec.SetField(employees.FieldFathersNameVerified, field.TypeBool, value)
	}
	if value, ok := eu.mutation.FathersNameRemStatus(); ok {
		_spec.SetField(employees.FieldFathersNameRemStatus, field.TypeBool, value)
	}
	if value, ok := eu.mutation.FathersNameRemarks(); ok {
		_spec.SetField(employees.FieldFathersNameRemarks, field.TypeString, value)
	}
	if eu.mutation.FathersNameRemarksCleared() {
		_spec.ClearField(employees.FieldFathersNameRemarks, field.TypeString)
	}
	if value, ok := eu.mutation.DOB(); ok {
		_spec.SetField(employees.FieldDOB, field.TypeTime, value)
	}
	if value, ok := eu.mutation.DOBVerified(); ok {
		_spec.SetField(employees.FieldDOBVerified, field.TypeBool, value)
	}
	if value, ok := eu.mutation.DOBRemStatus(); ok {
		_spec.SetField(employees.FieldDOBRemStatus, field.TypeBool, value)
	}
	if value, ok := eu.mutation.DOBRemarks(); ok {
		_spec.SetField(employees.FieldDOBRemarks, field.TypeString, value)
	}
	if eu.mutation.DOBRemarksCleared() {
		_spec.ClearField(employees.FieldDOBRemarks, field.TypeString)
	}
	if value, ok := eu.mutation.Gender(); ok {
		_spec.SetField(employees.FieldGender, field.TypeEnum, value)
	}
	if value, ok := eu.mutation.GenderVerified(); ok {
		_spec.SetField(employees.FieldGenderVerified, field.TypeBool, value)
	}
	if value, ok := eu.mutation.GenderRemStatus(); ok {
		_spec.SetField(employees.FieldGenderRemStatus, field.TypeBool, value)
	}
	if value, ok := eu.mutation.GenderRemarks(); ok {
		_spec.SetField(employees.FieldGenderRemarks, field.TypeString, value)
	}
	if eu.mutation.GenderRemarksCleared() {
		_spec.ClearField(employees.FieldGenderRemarks, field.TypeString)
	}
	if value, ok := eu.mutation.MobileNumber(); ok {
		_spec.SetField(employees.FieldMobileNumber, field.TypeInt64, value)
	}
	if value, ok := eu.mutation.AddedMobileNumber(); ok {
		_spec.AddField(employees.FieldMobileNumber, field.TypeInt64, value)
	}
	if eu.mutation.MobileNumberCleared() {
		_spec.ClearField(employees.FieldMobileNumber, field.TypeInt64)
	}
	if value, ok := eu.mutation.MobileNumberVerified(); ok {
		_spec.SetField(employees.FieldMobileNumberVerified, field.TypeBool, value)
	}
	if value, ok := eu.mutation.MobileNumberRemStatus(); ok {
		_spec.SetField(employees.FieldMobileNumberRemStatus, field.TypeBool, value)
	}
	if value, ok := eu.mutation.MobileNumberRemarks(); ok {
		_spec.SetField(employees.FieldMobileNumberRemarks, field.TypeString, value)
	}
	if eu.mutation.MobileNumberRemarksCleared() {
		_spec.ClearField(employees.FieldMobileNumberRemarks, field.TypeString)
	}
	if value, ok := eu.mutation.EmailID(); ok {
		_spec.SetField(employees.FieldEmailID, field.TypeString, value)
	}
	if eu.mutation.EmailIDCleared() {
		_spec.ClearField(employees.FieldEmailID, field.TypeString)
	}
	if value, ok := eu.mutation.EmailIDVerified(); ok {
		_spec.SetField(employees.FieldEmailIDVerified, field.TypeBool, value)
	}
	if value, ok := eu.mutation.EmailIDRemStatus(); ok {
		_spec.SetField(employees.FieldEmailIDRemStatus, field.TypeBool, value)
	}
	if value, ok := eu.mutation.EmailIDRemarks(); ok {
		_spec.SetField(employees.FieldEmailIDRemarks, field.TypeString, value)
	}
	if eu.mutation.EmailIDRemarksCleared() {
		_spec.ClearField(employees.FieldEmailIDRemarks, field.TypeString)
	}
	if value, ok := eu.mutation.Categoryid(); ok {
		_spec.SetField(employees.FieldCategoryid, field.TypeInt32, value)
	}
	if value, ok := eu.mutation.AddedCategoryid(); ok {
		_spec.AddField(employees.FieldCategoryid, field.TypeInt32, value)
	}
	if eu.mutation.CategoryidCleared() {
		_spec.ClearField(employees.FieldCategoryid, field.TypeInt32)
	}
	if value, ok := eu.mutation.EmployeeCategoryCode(); ok {
		_spec.SetField(employees.FieldEmployeeCategoryCode, field.TypeString, value)
	}
	if eu.mutation.EmployeeCategoryCodeCleared() {
		_spec.ClearField(employees.FieldEmployeeCategoryCode, field.TypeString)
	}
	if value, ok := eu.mutation.EmployeeCategory(); ok {
		_spec.SetField(employees.FieldEmployeeCategory, field.TypeString, value)
	}
	if value, ok := eu.mutation.EmployeeCategoryCodeVerified(); ok {
		_spec.SetField(employees.FieldEmployeeCategoryCodeVerified, field.TypeBool, value)
	}
	if value, ok := eu.mutation.EmployeeCategoryCodeRemStatus(); ok {
		_spec.SetField(employees.FieldEmployeeCategoryCodeRemStatus, field.TypeBool, value)
	}
	if value, ok := eu.mutation.EmployeeCategoryCodeRemarks(); ok {
		_spec.SetField(employees.FieldEmployeeCategoryCodeRemarks, field.TypeString, value)
	}
	if eu.mutation.EmployeeCategoryCodeRemarksCleared() {
		_spec.ClearField(employees.FieldEmployeeCategoryCodeRemarks, field.TypeString)
	}
	if value, ok := eu.mutation.WithDisability(); ok {
		_spec.SetField(employees.FieldWithDisability, field.TypeString, value)
	}
	if value, ok := eu.mutation.WithDisabilityVerified(); ok {
		_spec.SetField(employees.FieldWithDisabilityVerified, field.TypeBool, value)
	}
	if value, ok := eu.mutation.WithDisabilityRemStatus(); ok {
		_spec.SetField(employees.FieldWithDisabilityRemStatus, field.TypeBool, value)
	}
	if value, ok := eu.mutation.WithDisabilityRemarks(); ok {
		_spec.SetField(employees.FieldWithDisabilityRemarks, field.TypeBool, value)
	}
	if eu.mutation.WithDisabilityRemarksCleared() {
		_spec.ClearField(employees.FieldWithDisabilityRemarks, field.TypeBool)
	}
	if value, ok := eu.mutation.DisabilityType(); ok {
		_spec.SetField(employees.FieldDisabilityType, field.TypeString, value)
	}
	if eu.mutation.DisabilityTypeCleared() {
		_spec.ClearField(employees.FieldDisabilityType, field.TypeString)
	}
	if value, ok := eu.mutation.DisabilityTypeVerified(); ok {
		_spec.SetField(employees.FieldDisabilityTypeVerified, field.TypeBool, value)
	}
	if value, ok := eu.mutation.DisabilityTypeRemStatus(); ok {
		_spec.SetField(employees.FieldDisabilityTypeRemStatus, field.TypeBool, value)
	}
	if value, ok := eu.mutation.DisabilityTypeRemarks(); ok {
		_spec.SetField(employees.FieldDisabilityTypeRemarks, field.TypeString, value)
	}
	if eu.mutation.DisabilityTypeRemarksCleared() {
		_spec.ClearField(employees.FieldDisabilityTypeRemarks, field.TypeString)
	}
	if value, ok := eu.mutation.DisabilityPercentage(); ok {
		_spec.SetField(employees.FieldDisabilityPercentage, field.TypeInt32, value)
	}
	if value, ok := eu.mutation.AddedDisabilityPercentage(); ok {
		_spec.AddField(employees.FieldDisabilityPercentage, field.TypeInt32, value)
	}
	if eu.mutation.DisabilityPercentageCleared() {
		_spec.ClearField(employees.FieldDisabilityPercentage, field.TypeInt32)
	}
	if value, ok := eu.mutation.DisabilityPercentageVerified(); ok {
		_spec.SetField(employees.FieldDisabilityPercentageVerified, field.TypeBool, value)
	}
	if value, ok := eu.mutation.DisabilityPercentageRemStatus(); ok {
		_spec.SetField(employees.FieldDisabilityPercentageRemStatus, field.TypeBool, value)
	}
	if value, ok := eu.mutation.DisabilityPercentageRemarks(); ok {
		_spec.SetField(employees.FieldDisabilityPercentageRemarks, field.TypeString, value)
	}
	if eu.mutation.DisabilityPercentageRemarksCleared() {
		_spec.ClearField(employees.FieldDisabilityPercentageRemarks, field.TypeString)
	}
	if value, ok := eu.mutation.Signature(); ok {
		_spec.SetField(employees.FieldSignature, field.TypeString, value)
	}
	if value, ok := eu.mutation.SignatureVerified(); ok {
		_spec.SetField(employees.FieldSignatureVerified, field.TypeBool, value)
	}
	if value, ok := eu.mutation.SignatureRemStatus(); ok {
		_spec.SetField(employees.FieldSignatureRemStatus, field.TypeBool, value)
	}
	if value, ok := eu.mutation.SignatureRemarks(); ok {
		_spec.SetField(employees.FieldSignatureRemarks, field.TypeString, value)
	}
	if eu.mutation.SignatureRemarksCleared() {
		_spec.ClearField(employees.FieldSignatureRemarks, field.TypeString)
	}
	if value, ok := eu.mutation.Photo(); ok {
		_spec.SetField(employees.FieldPhoto, field.TypeString, value)
	}
	if value, ok := eu.mutation.PhotoVerified(); ok {
		_spec.SetField(employees.FieldPhotoVerified, field.TypeBool, value)
	}
	if value, ok := eu.mutation.PhotoRemStatus(); ok {
		_spec.SetField(employees.FieldPhotoRemStatus, field.TypeBool, value)
	}
	if value, ok := eu.mutation.PhotoRemarks(); ok {
		_spec.SetField(employees.FieldPhotoRemarks, field.TypeString, value)
	}
	if eu.mutation.PhotoRemarksCleared() {
		_spec.ClearField(employees.FieldPhotoRemarks, field.TypeString)
	}
	if value, ok := eu.mutation.PostID(); ok {
		_spec.SetField(employees.FieldPostID, field.TypeInt32, value)
	}
	if value, ok := eu.mutation.AddedPostID(); ok {
		_spec.AddField(employees.FieldPostID, field.TypeInt32, value)
	}
	if eu.mutation.PostIDCleared() {
		_spec.ClearField(employees.FieldPostID, field.TypeInt32)
	}
	if value, ok := eu.mutation.PostCode(); ok {
		_spec.SetField(employees.FieldPostCode, field.TypeString, value)
	}
	if eu.mutation.PostCodeCleared() {
		_spec.ClearField(employees.FieldPostCode, field.TypeString)
	}
	if value, ok := eu.mutation.EmployeePost(); ok {
		_spec.SetField(employees.FieldEmployeePost, field.TypeString, value)
	}
	if value, ok := eu.mutation.EmployeePostVerified(); ok {
		_spec.SetField(employees.FieldEmployeePostVerified, field.TypeBool, value)
	}
	if value, ok := eu.mutation.EmployeePostRemStatus(); ok {
		_spec.SetField(employees.FieldEmployeePostRemStatus, field.TypeBool, value)
	}
	if value, ok := eu.mutation.EmployeePostRemarks(); ok {
		_spec.SetField(employees.FieldEmployeePostRemarks, field.TypeString, value)
	}
	if eu.mutation.EmployeePostRemarksCleared() {
		_spec.ClearField(employees.FieldEmployeePostRemarks, field.TypeString)
	}
	if value, ok := eu.mutation.DesignationID(); ok {
		_spec.SetField(employees.FieldDesignationID, field.TypeInt32, value)
	}
	if value, ok := eu.mutation.AddedDesignationID(); ok {
		_spec.AddField(employees.FieldDesignationID, field.TypeInt32, value)
	}
	if eu.mutation.DesignationIDCleared() {
		_spec.ClearField(employees.FieldDesignationID, field.TypeInt32)
	}
	if value, ok := eu.mutation.EmployeeDesignation(); ok {
		_spec.SetField(employees.FieldEmployeeDesignation, field.TypeString, value)
	}
	if value, ok := eu.mutation.EmployeeDesignationVerified(); ok {
		_spec.SetField(employees.FieldEmployeeDesignationVerified, field.TypeBool, value)
	}
	if value, ok := eu.mutation.EmployeeDesignationRemStatus(); ok {
		_spec.SetField(employees.FieldEmployeeDesignationRemStatus, field.TypeBool, value)
	}
	if value, ok := eu.mutation.EmployeeDesignationRemarks(); ok {
		_spec.SetField(employees.FieldEmployeeDesignationRemarks, field.TypeString, value)
	}
	if eu.mutation.EmployeeDesignationRemarksCleared() {
		_spec.ClearField(employees.FieldEmployeeDesignationRemarks, field.TypeString)
	}
	if value, ok := eu.mutation.CircleID(); ok {
		_spec.SetField(employees.FieldCircleID, field.TypeInt32, value)
	}
	if value, ok := eu.mutation.AddedCircleID(); ok {
		_spec.AddField(employees.FieldCircleID, field.TypeInt32, value)
	}
	if eu.mutation.CircleIDCleared() {
		_spec.ClearField(employees.FieldCircleID, field.TypeInt32)
	}
	if value, ok := eu.mutation.CircleName(); ok {
		_spec.SetField(employees.FieldCircleName, field.TypeString, value)
	}
	if value, ok := eu.mutation.CircleVerified(); ok {
		_spec.SetField(employees.FieldCircleVerified, field.TypeBool, value)
	}
	if value, ok := eu.mutation.CircleRemStatus(); ok {
		_spec.SetField(employees.FieldCircleRemStatus, field.TypeBool, value)
	}
	if value, ok := eu.mutation.CircleRemarks(); ok {
		_spec.SetField(employees.FieldCircleRemarks, field.TypeString, value)
	}
	if eu.mutation.CircleRemarksCleared() {
		_spec.ClearField(employees.FieldCircleRemarks, field.TypeString)
	}
	if value, ok := eu.mutation.RegionID(); ok {
		_spec.SetField(employees.FieldRegionID, field.TypeInt32, value)
	}
	if value, ok := eu.mutation.AddedRegionID(); ok {
		_spec.AddField(employees.FieldRegionID, field.TypeInt32, value)
	}
	if eu.mutation.RegionIDCleared() {
		_spec.ClearField(employees.FieldRegionID, field.TypeInt32)
	}
	if value, ok := eu.mutation.RegionName(); ok {
		_spec.SetField(employees.FieldRegionName, field.TypeString, value)
	}
	if eu.mutation.RegionNameCleared() {
		_spec.ClearField(employees.FieldRegionName, field.TypeString)
	}
	if value, ok := eu.mutation.RegionVerified(); ok {
		_spec.SetField(employees.FieldRegionVerified, field.TypeBool, value)
	}
	if value, ok := eu.mutation.RegionRemStatus(); ok {
		_spec.SetField(employees.FieldRegionRemStatus, field.TypeBool, value)
	}
	if value, ok := eu.mutation.RegionRemarks(); ok {
		_spec.SetField(employees.FieldRegionRemarks, field.TypeString, value)
	}
	if eu.mutation.RegionRemarksCleared() {
		_spec.ClearField(employees.FieldRegionRemarks, field.TypeString)
	}
	if value, ok := eu.mutation.DivisionID(); ok {
		_spec.SetField(employees.FieldDivisionID, field.TypeInt32, value)
	}
	if value, ok := eu.mutation.AddedDivisionID(); ok {
		_spec.AddField(employees.FieldDivisionID, field.TypeInt32, value)
	}
	if eu.mutation.DivisionIDCleared() {
		_spec.ClearField(employees.FieldDivisionID, field.TypeInt32)
	}
	if value, ok := eu.mutation.DivisionName(); ok {
		_spec.SetField(employees.FieldDivisionName, field.TypeString, value)
	}
	if eu.mutation.DivisionNameCleared() {
		_spec.ClearField(employees.FieldDivisionName, field.TypeString)
	}
	if value, ok := eu.mutation.DivisionVerified(); ok {
		_spec.SetField(employees.FieldDivisionVerified, field.TypeBool, value)
	}
	if value, ok := eu.mutation.DivisionRemStatus(); ok {
		_spec.SetField(employees.FieldDivisionRemStatus, field.TypeBool, value)
	}
	if value, ok := eu.mutation.DivisionRemarks(); ok {
		_spec.SetField(employees.FieldDivisionRemarks, field.TypeString, value)
	}
	if value, ok := eu.mutation.OfficeID(); ok {
		_spec.SetField(employees.FieldOfficeID, field.TypeInt32, value)
	}
	if value, ok := eu.mutation.AddedOfficeID(); ok {
		_spec.AddField(employees.FieldOfficeID, field.TypeInt32, value)
	}
	if eu.mutation.OfficeIDCleared() {
		_spec.ClearField(employees.FieldOfficeID, field.TypeInt32)
	}
	if value, ok := eu.mutation.OfficeName(); ok {
		_spec.SetField(employees.FieldOfficeName, field.TypeString, value)
	}
	if value, ok := eu.mutation.OfficeVerified(); ok {
		_spec.SetField(employees.FieldOfficeVerified, field.TypeBool, value)
	}
	if value, ok := eu.mutation.OfficeRemStatus(); ok {
		_spec.SetField(employees.FieldOfficeRemStatus, field.TypeBool, value)
	}
	if value, ok := eu.mutation.OfficeRemarks(); ok {
		_spec.SetField(employees.FieldOfficeRemarks, field.TypeString, value)
	}
	if eu.mutation.OfficeRemarksCleared() {
		_spec.ClearField(employees.FieldOfficeRemarks, field.TypeString)
	}
	if value, ok := eu.mutation.Role(); ok {
		_spec.SetField(employees.FieldRole, field.TypeString, value)
	}
	if value, ok := eu.mutation.RoleVerified(); ok {
		_spec.SetField(employees.FieldRoleVerified, field.TypeBool, value)
	}
	if value, ok := eu.mutation.RoleRemStatus(); ok {
		_spec.SetField(employees.FieldRoleRemStatus, field.TypeBool, value)
	}
	if value, ok := eu.mutation.RoleRemarks(); ok {
		_spec.SetField(employees.FieldRoleRemarks, field.TypeString, value)
	}
	if value, ok := eu.mutation.DCCS(); ok {
		_spec.SetField(employees.FieldDCCS, field.TypeTime, value)
	}
	if value, ok := eu.mutation.DCCSVerified(); ok {
		_spec.SetField(employees.FieldDCCSVerified, field.TypeBool, value)
	}
	if value, ok := eu.mutation.DCCSRemStatus(); ok {
		_spec.SetField(employees.FieldDCCSRemStatus, field.TypeBool, value)
	}
	if value, ok := eu.mutation.DCCSRemarks(); ok {
		_spec.SetField(employees.FieldDCCSRemarks, field.TypeString, value)
	}
	if eu.mutation.DCCSRemarksCleared() {
		_spec.ClearField(employees.FieldDCCSRemarks, field.TypeString)
	}
	if value, ok := eu.mutation.DCInPresentCadre(); ok {
		_spec.SetField(employees.FieldDCInPresentCadre, field.TypeTime, value)
	}
	if value, ok := eu.mutation.DCInPresentCadreVerified(); ok {
		_spec.SetField(employees.FieldDCInPresentCadreVerified, field.TypeBool, value)
	}
	if value, ok := eu.mutation.DCInPresentCadreRemStatus(); ok {
		_spec.SetField(employees.FieldDCInPresentCadreRemStatus, field.TypeBool, value)
	}
	if value, ok := eu.mutation.DCInPresentCadreRemarks(); ok {
		_spec.SetField(employees.FieldDCInPresentCadreRemarks, field.TypeString, value)
	}
	if eu.mutation.DCInPresentCadreRemarksCleared() {
		_spec.ClearField(employees.FieldDCInPresentCadreRemarks, field.TypeString)
	}
	if value, ok := eu.mutation.APSWorking(); ok {
		_spec.SetField(employees.FieldAPSWorking, field.TypeBool, value)
	}
	if eu.mutation.APSWorkingCleared() {
		_spec.ClearField(employees.FieldAPSWorking, field.TypeBool)
	}
	if value, ok := eu.mutation.APSWorkingVerified(); ok {
		_spec.SetField(employees.FieldAPSWorkingVerified, field.TypeBool, value)
	}
	if value, ok := eu.mutation.APSWorkingRemStatus(); ok {
		_spec.SetField(employees.FieldAPSWorkingRemStatus, field.TypeBool, value)
	}
	if value, ok := eu.mutation.APSWorkingRemarks(); ok {
		_spec.SetField(employees.FieldAPSWorkingRemarks, field.TypeString, value)
	}
	if eu.mutation.APSWorkingRemarksCleared() {
		_spec.ClearField(employees.FieldAPSWorkingRemarks, field.TypeString)
	}
	if value, ok := eu.mutation.Profilestatus(); ok {
		_spec.SetField(employees.FieldProfilestatus, field.TypeBool, value)
	}
	if value, ok := eu.mutation.RoleUserCode(); ok {
		_spec.SetField(employees.FieldRoleUserCode, field.TypeInt32, value)
	}
	if value, ok := eu.mutation.AddedRoleUserCode(); ok {
		_spec.AddField(employees.FieldRoleUserCode, field.TypeInt32, value)
	}
	if eu.mutation.RoleUserCodeCleared() {
		_spec.ClearField(employees.FieldRoleUserCode, field.TypeInt32)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, eu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{employees.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	eu.mutation.done = true
	return n, nil
}

// EmployeesUpdateOne is the builder for updating a single Employees entity.
type EmployeesUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *EmployeesMutation
}

// SetEmployeedID sets the "EmployeedID" field.
func (euo *EmployeesUpdateOne) SetEmployeedID(i int32) *EmployeesUpdateOne {
	euo.mutation.ResetEmployeedID()
	euo.mutation.SetEmployeedID(i)
	return euo
}

// AddEmployeedID adds i to the "EmployeedID" field.
func (euo *EmployeesUpdateOne) AddEmployeedID(i int32) *EmployeesUpdateOne {
	euo.mutation.AddEmployeedID(i)
	return euo
}

// SetIDVerified sets the "IDVerified" field.
func (euo *EmployeesUpdateOne) SetIDVerified(b bool) *EmployeesUpdateOne {
	euo.mutation.SetIDVerified(b)
	return euo
}

// SetNillableIDVerified sets the "IDVerified" field if the given value is not nil.
func (euo *EmployeesUpdateOne) SetNillableIDVerified(b *bool) *EmployeesUpdateOne {
	if b != nil {
		euo.SetIDVerified(*b)
	}
	return euo
}

// SetIDRemStatus sets the "IDRemStatus" field.
func (euo *EmployeesUpdateOne) SetIDRemStatus(b bool) *EmployeesUpdateOne {
	euo.mutation.SetIDRemStatus(b)
	return euo
}

// SetNillableIDRemStatus sets the "IDRemStatus" field if the given value is not nil.
func (euo *EmployeesUpdateOne) SetNillableIDRemStatus(b *bool) *EmployeesUpdateOne {
	if b != nil {
		euo.SetIDRemStatus(*b)
	}
	return euo
}

// SetIDRemarks sets the "IDRemarks" field.
func (euo *EmployeesUpdateOne) SetIDRemarks(s string) *EmployeesUpdateOne {
	euo.mutation.SetIDRemarks(s)
	return euo
}

// SetNillableIDRemarks sets the "IDRemarks" field if the given value is not nil.
func (euo *EmployeesUpdateOne) SetNillableIDRemarks(s *string) *EmployeesUpdateOne {
	if s != nil {
		euo.SetIDRemarks(*s)
	}
	return euo
}

// ClearIDRemarks clears the value of the "IDRemarks" field.
func (euo *EmployeesUpdateOne) ClearIDRemarks() *EmployeesUpdateOne {
	euo.mutation.ClearIDRemarks()
	return euo
}

// SetEmployeeName sets the "EmployeeName" field.
func (euo *EmployeesUpdateOne) SetEmployeeName(s string) *EmployeesUpdateOne {
	euo.mutation.SetEmployeeName(s)
	return euo
}

// SetNameVerified sets the "nameVerified" field.
func (euo *EmployeesUpdateOne) SetNameVerified(b bool) *EmployeesUpdateOne {
	euo.mutation.SetNameVerified(b)
	return euo
}

// SetNillableNameVerified sets the "nameVerified" field if the given value is not nil.
func (euo *EmployeesUpdateOne) SetNillableNameVerified(b *bool) *EmployeesUpdateOne {
	if b != nil {
		euo.SetNameVerified(*b)
	}
	return euo
}

// SetNameRemStatus sets the "nameRemStatus" field.
func (euo *EmployeesUpdateOne) SetNameRemStatus(b bool) *EmployeesUpdateOne {
	euo.mutation.SetNameRemStatus(b)
	return euo
}

// SetNillableNameRemStatus sets the "nameRemStatus" field if the given value is not nil.
func (euo *EmployeesUpdateOne) SetNillableNameRemStatus(b *bool) *EmployeesUpdateOne {
	if b != nil {
		euo.SetNameRemStatus(*b)
	}
	return euo
}

// SetNameRemarks sets the "nameRemarks" field.
func (euo *EmployeesUpdateOne) SetNameRemarks(s string) *EmployeesUpdateOne {
	euo.mutation.SetNameRemarks(s)
	return euo
}

// SetNillableNameRemarks sets the "nameRemarks" field if the given value is not nil.
func (euo *EmployeesUpdateOne) SetNillableNameRemarks(s *string) *EmployeesUpdateOne {
	if s != nil {
		euo.SetNameRemarks(*s)
	}
	return euo
}

// ClearNameRemarks clears the value of the "nameRemarks" field.
func (euo *EmployeesUpdateOne) ClearNameRemarks() *EmployeesUpdateOne {
	euo.mutation.ClearNameRemarks()
	return euo
}

// SetEmployeeFathersName sets the "EmployeeFathersName" field.
func (euo *EmployeesUpdateOne) SetEmployeeFathersName(s string) *EmployeesUpdateOne {
	euo.mutation.SetEmployeeFathersName(s)
	return euo
}

// SetFathersNameVerified sets the "FathersNameVerified" field.
func (euo *EmployeesUpdateOne) SetFathersNameVerified(b bool) *EmployeesUpdateOne {
	euo.mutation.SetFathersNameVerified(b)
	return euo
}

// SetNillableFathersNameVerified sets the "FathersNameVerified" field if the given value is not nil.
func (euo *EmployeesUpdateOne) SetNillableFathersNameVerified(b *bool) *EmployeesUpdateOne {
	if b != nil {
		euo.SetFathersNameVerified(*b)
	}
	return euo
}

// SetFathersNameRemStatus sets the "FathersNameRemStatus" field.
func (euo *EmployeesUpdateOne) SetFathersNameRemStatus(b bool) *EmployeesUpdateOne {
	euo.mutation.SetFathersNameRemStatus(b)
	return euo
}

// SetNillableFathersNameRemStatus sets the "FathersNameRemStatus" field if the given value is not nil.
func (euo *EmployeesUpdateOne) SetNillableFathersNameRemStatus(b *bool) *EmployeesUpdateOne {
	if b != nil {
		euo.SetFathersNameRemStatus(*b)
	}
	return euo
}

// SetFathersNameRemarks sets the "FathersNameRemarks" field.
func (euo *EmployeesUpdateOne) SetFathersNameRemarks(s string) *EmployeesUpdateOne {
	euo.mutation.SetFathersNameRemarks(s)
	return euo
}

// SetNillableFathersNameRemarks sets the "FathersNameRemarks" field if the given value is not nil.
func (euo *EmployeesUpdateOne) SetNillableFathersNameRemarks(s *string) *EmployeesUpdateOne {
	if s != nil {
		euo.SetFathersNameRemarks(*s)
	}
	return euo
}

// ClearFathersNameRemarks clears the value of the "FathersNameRemarks" field.
func (euo *EmployeesUpdateOne) ClearFathersNameRemarks() *EmployeesUpdateOne {
	euo.mutation.ClearFathersNameRemarks()
	return euo
}

// SetDOB sets the "DOB" field.
func (euo *EmployeesUpdateOne) SetDOB(t time.Time) *EmployeesUpdateOne {
	euo.mutation.SetDOB(t)
	return euo
}

// SetDOBVerified sets the "DOBVerified" field.
func (euo *EmployeesUpdateOne) SetDOBVerified(b bool) *EmployeesUpdateOne {
	euo.mutation.SetDOBVerified(b)
	return euo
}

// SetNillableDOBVerified sets the "DOBVerified" field if the given value is not nil.
func (euo *EmployeesUpdateOne) SetNillableDOBVerified(b *bool) *EmployeesUpdateOne {
	if b != nil {
		euo.SetDOBVerified(*b)
	}
	return euo
}

// SetDOBRemStatus sets the "DOBRemStatus" field.
func (euo *EmployeesUpdateOne) SetDOBRemStatus(b bool) *EmployeesUpdateOne {
	euo.mutation.SetDOBRemStatus(b)
	return euo
}

// SetNillableDOBRemStatus sets the "DOBRemStatus" field if the given value is not nil.
func (euo *EmployeesUpdateOne) SetNillableDOBRemStatus(b *bool) *EmployeesUpdateOne {
	if b != nil {
		euo.SetDOBRemStatus(*b)
	}
	return euo
}

// SetDOBRemarks sets the "DOBRemarks" field.
func (euo *EmployeesUpdateOne) SetDOBRemarks(s string) *EmployeesUpdateOne {
	euo.mutation.SetDOBRemarks(s)
	return euo
}

// SetNillableDOBRemarks sets the "DOBRemarks" field if the given value is not nil.
func (euo *EmployeesUpdateOne) SetNillableDOBRemarks(s *string) *EmployeesUpdateOne {
	if s != nil {
		euo.SetDOBRemarks(*s)
	}
	return euo
}

// ClearDOBRemarks clears the value of the "DOBRemarks" field.
func (euo *EmployeesUpdateOne) ClearDOBRemarks() *EmployeesUpdateOne {
	euo.mutation.ClearDOBRemarks()
	return euo
}

// SetGender sets the "Gender" field.
func (euo *EmployeesUpdateOne) SetGender(e employees.Gender) *EmployeesUpdateOne {
	euo.mutation.SetGender(e)
	return euo
}

// SetGenderVerified sets the "genderVerified" field.
func (euo *EmployeesUpdateOne) SetGenderVerified(b bool) *EmployeesUpdateOne {
	euo.mutation.SetGenderVerified(b)
	return euo
}

// SetNillableGenderVerified sets the "genderVerified" field if the given value is not nil.
func (euo *EmployeesUpdateOne) SetNillableGenderVerified(b *bool) *EmployeesUpdateOne {
	if b != nil {
		euo.SetGenderVerified(*b)
	}
	return euo
}

// SetGenderRemStatus sets the "genderRemStatus" field.
func (euo *EmployeesUpdateOne) SetGenderRemStatus(b bool) *EmployeesUpdateOne {
	euo.mutation.SetGenderRemStatus(b)
	return euo
}

// SetNillableGenderRemStatus sets the "genderRemStatus" field if the given value is not nil.
func (euo *EmployeesUpdateOne) SetNillableGenderRemStatus(b *bool) *EmployeesUpdateOne {
	if b != nil {
		euo.SetGenderRemStatus(*b)
	}
	return euo
}

// SetGenderRemarks sets the "genderRemarks" field.
func (euo *EmployeesUpdateOne) SetGenderRemarks(s string) *EmployeesUpdateOne {
	euo.mutation.SetGenderRemarks(s)
	return euo
}

// SetNillableGenderRemarks sets the "genderRemarks" field if the given value is not nil.
func (euo *EmployeesUpdateOne) SetNillableGenderRemarks(s *string) *EmployeesUpdateOne {
	if s != nil {
		euo.SetGenderRemarks(*s)
	}
	return euo
}

// ClearGenderRemarks clears the value of the "genderRemarks" field.
func (euo *EmployeesUpdateOne) ClearGenderRemarks() *EmployeesUpdateOne {
	euo.mutation.ClearGenderRemarks()
	return euo
}

// SetMobileNumber sets the "MobileNumber" field.
func (euo *EmployeesUpdateOne) SetMobileNumber(i int64) *EmployeesUpdateOne {
	euo.mutation.ResetMobileNumber()
	euo.mutation.SetMobileNumber(i)
	return euo
}

// SetNillableMobileNumber sets the "MobileNumber" field if the given value is not nil.
func (euo *EmployeesUpdateOne) SetNillableMobileNumber(i *int64) *EmployeesUpdateOne {
	if i != nil {
		euo.SetMobileNumber(*i)
	}
	return euo
}

// AddMobileNumber adds i to the "MobileNumber" field.
func (euo *EmployeesUpdateOne) AddMobileNumber(i int64) *EmployeesUpdateOne {
	euo.mutation.AddMobileNumber(i)
	return euo
}

// ClearMobileNumber clears the value of the "MobileNumber" field.
func (euo *EmployeesUpdateOne) ClearMobileNumber() *EmployeesUpdateOne {
	euo.mutation.ClearMobileNumber()
	return euo
}

// SetMobileNumberVerified sets the "MobileNumberVerified" field.
func (euo *EmployeesUpdateOne) SetMobileNumberVerified(b bool) *EmployeesUpdateOne {
	euo.mutation.SetMobileNumberVerified(b)
	return euo
}

// SetNillableMobileNumberVerified sets the "MobileNumberVerified" field if the given value is not nil.
func (euo *EmployeesUpdateOne) SetNillableMobileNumberVerified(b *bool) *EmployeesUpdateOne {
	if b != nil {
		euo.SetMobileNumberVerified(*b)
	}
	return euo
}

// SetMobileNumberRemStatus sets the "MobileNumberRemStatus" field.
func (euo *EmployeesUpdateOne) SetMobileNumberRemStatus(b bool) *EmployeesUpdateOne {
	euo.mutation.SetMobileNumberRemStatus(b)
	return euo
}

// SetNillableMobileNumberRemStatus sets the "MobileNumberRemStatus" field if the given value is not nil.
func (euo *EmployeesUpdateOne) SetNillableMobileNumberRemStatus(b *bool) *EmployeesUpdateOne {
	if b != nil {
		euo.SetMobileNumberRemStatus(*b)
	}
	return euo
}

// SetMobileNumberRemarks sets the "MobileNumberRemarks" field.
func (euo *EmployeesUpdateOne) SetMobileNumberRemarks(s string) *EmployeesUpdateOne {
	euo.mutation.SetMobileNumberRemarks(s)
	return euo
}

// SetNillableMobileNumberRemarks sets the "MobileNumberRemarks" field if the given value is not nil.
func (euo *EmployeesUpdateOne) SetNillableMobileNumberRemarks(s *string) *EmployeesUpdateOne {
	if s != nil {
		euo.SetMobileNumberRemarks(*s)
	}
	return euo
}

// ClearMobileNumberRemarks clears the value of the "MobileNumberRemarks" field.
func (euo *EmployeesUpdateOne) ClearMobileNumberRemarks() *EmployeesUpdateOne {
	euo.mutation.ClearMobileNumberRemarks()
	return euo
}

// SetEmailID sets the "EmailID" field.
func (euo *EmployeesUpdateOne) SetEmailID(s string) *EmployeesUpdateOne {
	euo.mutation.SetEmailID(s)
	return euo
}

// SetNillableEmailID sets the "EmailID" field if the given value is not nil.
func (euo *EmployeesUpdateOne) SetNillableEmailID(s *string) *EmployeesUpdateOne {
	if s != nil {
		euo.SetEmailID(*s)
	}
	return euo
}

// ClearEmailID clears the value of the "EmailID" field.
func (euo *EmployeesUpdateOne) ClearEmailID() *EmployeesUpdateOne {
	euo.mutation.ClearEmailID()
	return euo
}

// SetEmailIDVerified sets the "EmailIDVerified" field.
func (euo *EmployeesUpdateOne) SetEmailIDVerified(b bool) *EmployeesUpdateOne {
	euo.mutation.SetEmailIDVerified(b)
	return euo
}

// SetNillableEmailIDVerified sets the "EmailIDVerified" field if the given value is not nil.
func (euo *EmployeesUpdateOne) SetNillableEmailIDVerified(b *bool) *EmployeesUpdateOne {
	if b != nil {
		euo.SetEmailIDVerified(*b)
	}
	return euo
}

// SetEmailIDRemStatus sets the "EmailIDRemStatus" field.
func (euo *EmployeesUpdateOne) SetEmailIDRemStatus(b bool) *EmployeesUpdateOne {
	euo.mutation.SetEmailIDRemStatus(b)
	return euo
}

// SetNillableEmailIDRemStatus sets the "EmailIDRemStatus" field if the given value is not nil.
func (euo *EmployeesUpdateOne) SetNillableEmailIDRemStatus(b *bool) *EmployeesUpdateOne {
	if b != nil {
		euo.SetEmailIDRemStatus(*b)
	}
	return euo
}

// SetEmailIDRemarks sets the "EmailIDRemarks" field.
func (euo *EmployeesUpdateOne) SetEmailIDRemarks(s string) *EmployeesUpdateOne {
	euo.mutation.SetEmailIDRemarks(s)
	return euo
}

// SetNillableEmailIDRemarks sets the "EmailIDRemarks" field if the given value is not nil.
func (euo *EmployeesUpdateOne) SetNillableEmailIDRemarks(s *string) *EmployeesUpdateOne {
	if s != nil {
		euo.SetEmailIDRemarks(*s)
	}
	return euo
}

// ClearEmailIDRemarks clears the value of the "EmailIDRemarks" field.
func (euo *EmployeesUpdateOne) ClearEmailIDRemarks() *EmployeesUpdateOne {
	euo.mutation.ClearEmailIDRemarks()
	return euo
}

// SetCategoryid sets the "Categoryid" field.
func (euo *EmployeesUpdateOne) SetCategoryid(i int32) *EmployeesUpdateOne {
	euo.mutation.ResetCategoryid()
	euo.mutation.SetCategoryid(i)
	return euo
}

// SetNillableCategoryid sets the "Categoryid" field if the given value is not nil.
func (euo *EmployeesUpdateOne) SetNillableCategoryid(i *int32) *EmployeesUpdateOne {
	if i != nil {
		euo.SetCategoryid(*i)
	}
	return euo
}

// AddCategoryid adds i to the "Categoryid" field.
func (euo *EmployeesUpdateOne) AddCategoryid(i int32) *EmployeesUpdateOne {
	euo.mutation.AddCategoryid(i)
	return euo
}

// ClearCategoryid clears the value of the "Categoryid" field.
func (euo *EmployeesUpdateOne) ClearCategoryid() *EmployeesUpdateOne {
	euo.mutation.ClearCategoryid()
	return euo
}

// SetEmployeeCategoryCode sets the "EmployeeCategoryCode" field.
func (euo *EmployeesUpdateOne) SetEmployeeCategoryCode(s string) *EmployeesUpdateOne {
	euo.mutation.SetEmployeeCategoryCode(s)
	return euo
}

// SetNillableEmployeeCategoryCode sets the "EmployeeCategoryCode" field if the given value is not nil.
func (euo *EmployeesUpdateOne) SetNillableEmployeeCategoryCode(s *string) *EmployeesUpdateOne {
	if s != nil {
		euo.SetEmployeeCategoryCode(*s)
	}
	return euo
}

// ClearEmployeeCategoryCode clears the value of the "EmployeeCategoryCode" field.
func (euo *EmployeesUpdateOne) ClearEmployeeCategoryCode() *EmployeesUpdateOne {
	euo.mutation.ClearEmployeeCategoryCode()
	return euo
}

// SetEmployeeCategory sets the "EmployeeCategory" field.
func (euo *EmployeesUpdateOne) SetEmployeeCategory(s string) *EmployeesUpdateOne {
	euo.mutation.SetEmployeeCategory(s)
	return euo
}

// SetEmployeeCategoryCodeVerified sets the "EmployeeCategoryCodeVerified" field.
func (euo *EmployeesUpdateOne) SetEmployeeCategoryCodeVerified(b bool) *EmployeesUpdateOne {
	euo.mutation.SetEmployeeCategoryCodeVerified(b)
	return euo
}

// SetNillableEmployeeCategoryCodeVerified sets the "EmployeeCategoryCodeVerified" field if the given value is not nil.
func (euo *EmployeesUpdateOne) SetNillableEmployeeCategoryCodeVerified(b *bool) *EmployeesUpdateOne {
	if b != nil {
		euo.SetEmployeeCategoryCodeVerified(*b)
	}
	return euo
}

// SetEmployeeCategoryCodeRemStatus sets the "EmployeeCategoryCodeRemStatus" field.
func (euo *EmployeesUpdateOne) SetEmployeeCategoryCodeRemStatus(b bool) *EmployeesUpdateOne {
	euo.mutation.SetEmployeeCategoryCodeRemStatus(b)
	return euo
}

// SetNillableEmployeeCategoryCodeRemStatus sets the "EmployeeCategoryCodeRemStatus" field if the given value is not nil.
func (euo *EmployeesUpdateOne) SetNillableEmployeeCategoryCodeRemStatus(b *bool) *EmployeesUpdateOne {
	if b != nil {
		euo.SetEmployeeCategoryCodeRemStatus(*b)
	}
	return euo
}

// SetEmployeeCategoryCodeRemarks sets the "EmployeeCategoryCodeRemarks" field.
func (euo *EmployeesUpdateOne) SetEmployeeCategoryCodeRemarks(s string) *EmployeesUpdateOne {
	euo.mutation.SetEmployeeCategoryCodeRemarks(s)
	return euo
}

// SetNillableEmployeeCategoryCodeRemarks sets the "EmployeeCategoryCodeRemarks" field if the given value is not nil.
func (euo *EmployeesUpdateOne) SetNillableEmployeeCategoryCodeRemarks(s *string) *EmployeesUpdateOne {
	if s != nil {
		euo.SetEmployeeCategoryCodeRemarks(*s)
	}
	return euo
}

// ClearEmployeeCategoryCodeRemarks clears the value of the "EmployeeCategoryCodeRemarks" field.
func (euo *EmployeesUpdateOne) ClearEmployeeCategoryCodeRemarks() *EmployeesUpdateOne {
	euo.mutation.ClearEmployeeCategoryCodeRemarks()
	return euo
}

// SetWithDisability sets the "WithDisability" field.
func (euo *EmployeesUpdateOne) SetWithDisability(s string) *EmployeesUpdateOne {
	euo.mutation.SetWithDisability(s)
	return euo
}

// SetWithDisabilityVerified sets the "WithDisabilityVerified" field.
func (euo *EmployeesUpdateOne) SetWithDisabilityVerified(b bool) *EmployeesUpdateOne {
	euo.mutation.SetWithDisabilityVerified(b)
	return euo
}

// SetNillableWithDisabilityVerified sets the "WithDisabilityVerified" field if the given value is not nil.
func (euo *EmployeesUpdateOne) SetNillableWithDisabilityVerified(b *bool) *EmployeesUpdateOne {
	if b != nil {
		euo.SetWithDisabilityVerified(*b)
	}
	return euo
}

// SetWithDisabilityRemStatus sets the "WithDisabilityRemStatus" field.
func (euo *EmployeesUpdateOne) SetWithDisabilityRemStatus(b bool) *EmployeesUpdateOne {
	euo.mutation.SetWithDisabilityRemStatus(b)
	return euo
}

// SetNillableWithDisabilityRemStatus sets the "WithDisabilityRemStatus" field if the given value is not nil.
func (euo *EmployeesUpdateOne) SetNillableWithDisabilityRemStatus(b *bool) *EmployeesUpdateOne {
	if b != nil {
		euo.SetWithDisabilityRemStatus(*b)
	}
	return euo
}

// SetWithDisabilityRemarks sets the "WithDisabilityRemarks" field.
func (euo *EmployeesUpdateOne) SetWithDisabilityRemarks(b bool) *EmployeesUpdateOne {
	euo.mutation.SetWithDisabilityRemarks(b)
	return euo
}

// SetNillableWithDisabilityRemarks sets the "WithDisabilityRemarks" field if the given value is not nil.
func (euo *EmployeesUpdateOne) SetNillableWithDisabilityRemarks(b *bool) *EmployeesUpdateOne {
	if b != nil {
		euo.SetWithDisabilityRemarks(*b)
	}
	return euo
}

// ClearWithDisabilityRemarks clears the value of the "WithDisabilityRemarks" field.
func (euo *EmployeesUpdateOne) ClearWithDisabilityRemarks() *EmployeesUpdateOne {
	euo.mutation.ClearWithDisabilityRemarks()
	return euo
}

// SetDisabilityType sets the "DisabilityType" field.
func (euo *EmployeesUpdateOne) SetDisabilityType(s string) *EmployeesUpdateOne {
	euo.mutation.SetDisabilityType(s)
	return euo
}

// SetNillableDisabilityType sets the "DisabilityType" field if the given value is not nil.
func (euo *EmployeesUpdateOne) SetNillableDisabilityType(s *string) *EmployeesUpdateOne {
	if s != nil {
		euo.SetDisabilityType(*s)
	}
	return euo
}

// ClearDisabilityType clears the value of the "DisabilityType" field.
func (euo *EmployeesUpdateOne) ClearDisabilityType() *EmployeesUpdateOne {
	euo.mutation.ClearDisabilityType()
	return euo
}

// SetDisabilityTypeVerified sets the "DisabilityTypeVerified" field.
func (euo *EmployeesUpdateOne) SetDisabilityTypeVerified(b bool) *EmployeesUpdateOne {
	euo.mutation.SetDisabilityTypeVerified(b)
	return euo
}

// SetNillableDisabilityTypeVerified sets the "DisabilityTypeVerified" field if the given value is not nil.
func (euo *EmployeesUpdateOne) SetNillableDisabilityTypeVerified(b *bool) *EmployeesUpdateOne {
	if b != nil {
		euo.SetDisabilityTypeVerified(*b)
	}
	return euo
}

// SetDisabilityTypeRemStatus sets the "DisabilityTypeRemStatus" field.
func (euo *EmployeesUpdateOne) SetDisabilityTypeRemStatus(b bool) *EmployeesUpdateOne {
	euo.mutation.SetDisabilityTypeRemStatus(b)
	return euo
}

// SetNillableDisabilityTypeRemStatus sets the "DisabilityTypeRemStatus" field if the given value is not nil.
func (euo *EmployeesUpdateOne) SetNillableDisabilityTypeRemStatus(b *bool) *EmployeesUpdateOne {
	if b != nil {
		euo.SetDisabilityTypeRemStatus(*b)
	}
	return euo
}

// SetDisabilityTypeRemarks sets the "DisabilityTypeRemarks" field.
func (euo *EmployeesUpdateOne) SetDisabilityTypeRemarks(s string) *EmployeesUpdateOne {
	euo.mutation.SetDisabilityTypeRemarks(s)
	return euo
}

// SetNillableDisabilityTypeRemarks sets the "DisabilityTypeRemarks" field if the given value is not nil.
func (euo *EmployeesUpdateOne) SetNillableDisabilityTypeRemarks(s *string) *EmployeesUpdateOne {
	if s != nil {
		euo.SetDisabilityTypeRemarks(*s)
	}
	return euo
}

// ClearDisabilityTypeRemarks clears the value of the "DisabilityTypeRemarks" field.
func (euo *EmployeesUpdateOne) ClearDisabilityTypeRemarks() *EmployeesUpdateOne {
	euo.mutation.ClearDisabilityTypeRemarks()
	return euo
}

// SetDisabilityPercentage sets the "DisabilityPercentage" field.
func (euo *EmployeesUpdateOne) SetDisabilityPercentage(i int32) *EmployeesUpdateOne {
	euo.mutation.ResetDisabilityPercentage()
	euo.mutation.SetDisabilityPercentage(i)
	return euo
}

// SetNillableDisabilityPercentage sets the "DisabilityPercentage" field if the given value is not nil.
func (euo *EmployeesUpdateOne) SetNillableDisabilityPercentage(i *int32) *EmployeesUpdateOne {
	if i != nil {
		euo.SetDisabilityPercentage(*i)
	}
	return euo
}

// AddDisabilityPercentage adds i to the "DisabilityPercentage" field.
func (euo *EmployeesUpdateOne) AddDisabilityPercentage(i int32) *EmployeesUpdateOne {
	euo.mutation.AddDisabilityPercentage(i)
	return euo
}

// ClearDisabilityPercentage clears the value of the "DisabilityPercentage" field.
func (euo *EmployeesUpdateOne) ClearDisabilityPercentage() *EmployeesUpdateOne {
	euo.mutation.ClearDisabilityPercentage()
	return euo
}

// SetDisabilityPercentageVerified sets the "DisabilityPercentageVerified" field.
func (euo *EmployeesUpdateOne) SetDisabilityPercentageVerified(b bool) *EmployeesUpdateOne {
	euo.mutation.SetDisabilityPercentageVerified(b)
	return euo
}

// SetNillableDisabilityPercentageVerified sets the "DisabilityPercentageVerified" field if the given value is not nil.
func (euo *EmployeesUpdateOne) SetNillableDisabilityPercentageVerified(b *bool) *EmployeesUpdateOne {
	if b != nil {
		euo.SetDisabilityPercentageVerified(*b)
	}
	return euo
}

// SetDisabilityPercentageRemStatus sets the "DisabilityPercentageRemStatus" field.
func (euo *EmployeesUpdateOne) SetDisabilityPercentageRemStatus(b bool) *EmployeesUpdateOne {
	euo.mutation.SetDisabilityPercentageRemStatus(b)
	return euo
}

// SetNillableDisabilityPercentageRemStatus sets the "DisabilityPercentageRemStatus" field if the given value is not nil.
func (euo *EmployeesUpdateOne) SetNillableDisabilityPercentageRemStatus(b *bool) *EmployeesUpdateOne {
	if b != nil {
		euo.SetDisabilityPercentageRemStatus(*b)
	}
	return euo
}

// SetDisabilityPercentageRemarks sets the "DisabilityPercentageRemarks" field.
func (euo *EmployeesUpdateOne) SetDisabilityPercentageRemarks(s string) *EmployeesUpdateOne {
	euo.mutation.SetDisabilityPercentageRemarks(s)
	return euo
}

// SetNillableDisabilityPercentageRemarks sets the "DisabilityPercentageRemarks" field if the given value is not nil.
func (euo *EmployeesUpdateOne) SetNillableDisabilityPercentageRemarks(s *string) *EmployeesUpdateOne {
	if s != nil {
		euo.SetDisabilityPercentageRemarks(*s)
	}
	return euo
}

// ClearDisabilityPercentageRemarks clears the value of the "DisabilityPercentageRemarks" field.
func (euo *EmployeesUpdateOne) ClearDisabilityPercentageRemarks() *EmployeesUpdateOne {
	euo.mutation.ClearDisabilityPercentageRemarks()
	return euo
}

// SetSignature sets the "Signature" field.
func (euo *EmployeesUpdateOne) SetSignature(s string) *EmployeesUpdateOne {
	euo.mutation.SetSignature(s)
	return euo
}

// SetSignatureVerified sets the "SignatureVerified" field.
func (euo *EmployeesUpdateOne) SetSignatureVerified(b bool) *EmployeesUpdateOne {
	euo.mutation.SetSignatureVerified(b)
	return euo
}

// SetNillableSignatureVerified sets the "SignatureVerified" field if the given value is not nil.
func (euo *EmployeesUpdateOne) SetNillableSignatureVerified(b *bool) *EmployeesUpdateOne {
	if b != nil {
		euo.SetSignatureVerified(*b)
	}
	return euo
}

// SetSignatureRemStatus sets the "SignatureRemStatus" field.
func (euo *EmployeesUpdateOne) SetSignatureRemStatus(b bool) *EmployeesUpdateOne {
	euo.mutation.SetSignatureRemStatus(b)
	return euo
}

// SetNillableSignatureRemStatus sets the "SignatureRemStatus" field if the given value is not nil.
func (euo *EmployeesUpdateOne) SetNillableSignatureRemStatus(b *bool) *EmployeesUpdateOne {
	if b != nil {
		euo.SetSignatureRemStatus(*b)
	}
	return euo
}

// SetSignatureRemarks sets the "SignatureRemarks" field.
func (euo *EmployeesUpdateOne) SetSignatureRemarks(s string) *EmployeesUpdateOne {
	euo.mutation.SetSignatureRemarks(s)
	return euo
}

// SetNillableSignatureRemarks sets the "SignatureRemarks" field if the given value is not nil.
func (euo *EmployeesUpdateOne) SetNillableSignatureRemarks(s *string) *EmployeesUpdateOne {
	if s != nil {
		euo.SetSignatureRemarks(*s)
	}
	return euo
}

// ClearSignatureRemarks clears the value of the "SignatureRemarks" field.
func (euo *EmployeesUpdateOne) ClearSignatureRemarks() *EmployeesUpdateOne {
	euo.mutation.ClearSignatureRemarks()
	return euo
}

// SetPhoto sets the "Photo" field.
func (euo *EmployeesUpdateOne) SetPhoto(s string) *EmployeesUpdateOne {
	euo.mutation.SetPhoto(s)
	return euo
}

// SetPhotoVerified sets the "PhotoVerified" field.
func (euo *EmployeesUpdateOne) SetPhotoVerified(b bool) *EmployeesUpdateOne {
	euo.mutation.SetPhotoVerified(b)
	return euo
}

// SetNillablePhotoVerified sets the "PhotoVerified" field if the given value is not nil.
func (euo *EmployeesUpdateOne) SetNillablePhotoVerified(b *bool) *EmployeesUpdateOne {
	if b != nil {
		euo.SetPhotoVerified(*b)
	}
	return euo
}

// SetPhotoRemStatus sets the "PhotoRemStatus" field.
func (euo *EmployeesUpdateOne) SetPhotoRemStatus(b bool) *EmployeesUpdateOne {
	euo.mutation.SetPhotoRemStatus(b)
	return euo
}

// SetNillablePhotoRemStatus sets the "PhotoRemStatus" field if the given value is not nil.
func (euo *EmployeesUpdateOne) SetNillablePhotoRemStatus(b *bool) *EmployeesUpdateOne {
	if b != nil {
		euo.SetPhotoRemStatus(*b)
	}
	return euo
}

// SetPhotoRemarks sets the "PhotoRemarks" field.
func (euo *EmployeesUpdateOne) SetPhotoRemarks(s string) *EmployeesUpdateOne {
	euo.mutation.SetPhotoRemarks(s)
	return euo
}

// SetNillablePhotoRemarks sets the "PhotoRemarks" field if the given value is not nil.
func (euo *EmployeesUpdateOne) SetNillablePhotoRemarks(s *string) *EmployeesUpdateOne {
	if s != nil {
		euo.SetPhotoRemarks(*s)
	}
	return euo
}

// ClearPhotoRemarks clears the value of the "PhotoRemarks" field.
func (euo *EmployeesUpdateOne) ClearPhotoRemarks() *EmployeesUpdateOne {
	euo.mutation.ClearPhotoRemarks()
	return euo
}

// SetPostID sets the "PostID" field.
func (euo *EmployeesUpdateOne) SetPostID(i int32) *EmployeesUpdateOne {
	euo.mutation.ResetPostID()
	euo.mutation.SetPostID(i)
	return euo
}

// SetNillablePostID sets the "PostID" field if the given value is not nil.
func (euo *EmployeesUpdateOne) SetNillablePostID(i *int32) *EmployeesUpdateOne {
	if i != nil {
		euo.SetPostID(*i)
	}
	return euo
}

// AddPostID adds i to the "PostID" field.
func (euo *EmployeesUpdateOne) AddPostID(i int32) *EmployeesUpdateOne {
	euo.mutation.AddPostID(i)
	return euo
}

// ClearPostID clears the value of the "PostID" field.
func (euo *EmployeesUpdateOne) ClearPostID() *EmployeesUpdateOne {
	euo.mutation.ClearPostID()
	return euo
}

// SetPostCode sets the "PostCode" field.
func (euo *EmployeesUpdateOne) SetPostCode(s string) *EmployeesUpdateOne {
	euo.mutation.SetPostCode(s)
	return euo
}

// SetNillablePostCode sets the "PostCode" field if the given value is not nil.
func (euo *EmployeesUpdateOne) SetNillablePostCode(s *string) *EmployeesUpdateOne {
	if s != nil {
		euo.SetPostCode(*s)
	}
	return euo
}

// ClearPostCode clears the value of the "PostCode" field.
func (euo *EmployeesUpdateOne) ClearPostCode() *EmployeesUpdateOne {
	euo.mutation.ClearPostCode()
	return euo
}

// SetEmployeePost sets the "EmployeePost" field.
func (euo *EmployeesUpdateOne) SetEmployeePost(s string) *EmployeesUpdateOne {
	euo.mutation.SetEmployeePost(s)
	return euo
}

// SetEmployeePostVerified sets the "EmployeePostVerified" field.
func (euo *EmployeesUpdateOne) SetEmployeePostVerified(b bool) *EmployeesUpdateOne {
	euo.mutation.SetEmployeePostVerified(b)
	return euo
}

// SetNillableEmployeePostVerified sets the "EmployeePostVerified" field if the given value is not nil.
func (euo *EmployeesUpdateOne) SetNillableEmployeePostVerified(b *bool) *EmployeesUpdateOne {
	if b != nil {
		euo.SetEmployeePostVerified(*b)
	}
	return euo
}

// SetEmployeePostRemStatus sets the "EmployeePostRemStatus" field.
func (euo *EmployeesUpdateOne) SetEmployeePostRemStatus(b bool) *EmployeesUpdateOne {
	euo.mutation.SetEmployeePostRemStatus(b)
	return euo
}

// SetNillableEmployeePostRemStatus sets the "EmployeePostRemStatus" field if the given value is not nil.
func (euo *EmployeesUpdateOne) SetNillableEmployeePostRemStatus(b *bool) *EmployeesUpdateOne {
	if b != nil {
		euo.SetEmployeePostRemStatus(*b)
	}
	return euo
}

// SetEmployeePostRemarks sets the "EmployeePostRemarks" field.
func (euo *EmployeesUpdateOne) SetEmployeePostRemarks(s string) *EmployeesUpdateOne {
	euo.mutation.SetEmployeePostRemarks(s)
	return euo
}

// SetNillableEmployeePostRemarks sets the "EmployeePostRemarks" field if the given value is not nil.
func (euo *EmployeesUpdateOne) SetNillableEmployeePostRemarks(s *string) *EmployeesUpdateOne {
	if s != nil {
		euo.SetEmployeePostRemarks(*s)
	}
	return euo
}

// ClearEmployeePostRemarks clears the value of the "EmployeePostRemarks" field.
func (euo *EmployeesUpdateOne) ClearEmployeePostRemarks() *EmployeesUpdateOne {
	euo.mutation.ClearEmployeePostRemarks()
	return euo
}

// SetDesignationID sets the "DesignationID" field.
func (euo *EmployeesUpdateOne) SetDesignationID(i int32) *EmployeesUpdateOne {
	euo.mutation.ResetDesignationID()
	euo.mutation.SetDesignationID(i)
	return euo
}

// SetNillableDesignationID sets the "DesignationID" field if the given value is not nil.
func (euo *EmployeesUpdateOne) SetNillableDesignationID(i *int32) *EmployeesUpdateOne {
	if i != nil {
		euo.SetDesignationID(*i)
	}
	return euo
}

// AddDesignationID adds i to the "DesignationID" field.
func (euo *EmployeesUpdateOne) AddDesignationID(i int32) *EmployeesUpdateOne {
	euo.mutation.AddDesignationID(i)
	return euo
}

// ClearDesignationID clears the value of the "DesignationID" field.
func (euo *EmployeesUpdateOne) ClearDesignationID() *EmployeesUpdateOne {
	euo.mutation.ClearDesignationID()
	return euo
}

// SetEmployeeDesignation sets the "EmployeeDesignation" field.
func (euo *EmployeesUpdateOne) SetEmployeeDesignation(s string) *EmployeesUpdateOne {
	euo.mutation.SetEmployeeDesignation(s)
	return euo
}

// SetEmployeeDesignationVerified sets the "EmployeeDesignationVerified" field.
func (euo *EmployeesUpdateOne) SetEmployeeDesignationVerified(b bool) *EmployeesUpdateOne {
	euo.mutation.SetEmployeeDesignationVerified(b)
	return euo
}

// SetNillableEmployeeDesignationVerified sets the "EmployeeDesignationVerified" field if the given value is not nil.
func (euo *EmployeesUpdateOne) SetNillableEmployeeDesignationVerified(b *bool) *EmployeesUpdateOne {
	if b != nil {
		euo.SetEmployeeDesignationVerified(*b)
	}
	return euo
}

// SetEmployeeDesignationRemStatus sets the "EmployeeDesignationRemStatus" field.
func (euo *EmployeesUpdateOne) SetEmployeeDesignationRemStatus(b bool) *EmployeesUpdateOne {
	euo.mutation.SetEmployeeDesignationRemStatus(b)
	return euo
}

// SetNillableEmployeeDesignationRemStatus sets the "EmployeeDesignationRemStatus" field if the given value is not nil.
func (euo *EmployeesUpdateOne) SetNillableEmployeeDesignationRemStatus(b *bool) *EmployeesUpdateOne {
	if b != nil {
		euo.SetEmployeeDesignationRemStatus(*b)
	}
	return euo
}

// SetEmployeeDesignationRemarks sets the "EmployeeDesignationRemarks" field.
func (euo *EmployeesUpdateOne) SetEmployeeDesignationRemarks(s string) *EmployeesUpdateOne {
	euo.mutation.SetEmployeeDesignationRemarks(s)
	return euo
}

// SetNillableEmployeeDesignationRemarks sets the "EmployeeDesignationRemarks" field if the given value is not nil.
func (euo *EmployeesUpdateOne) SetNillableEmployeeDesignationRemarks(s *string) *EmployeesUpdateOne {
	if s != nil {
		euo.SetEmployeeDesignationRemarks(*s)
	}
	return euo
}

// ClearEmployeeDesignationRemarks clears the value of the "EmployeeDesignationRemarks" field.
func (euo *EmployeesUpdateOne) ClearEmployeeDesignationRemarks() *EmployeesUpdateOne {
	euo.mutation.ClearEmployeeDesignationRemarks()
	return euo
}

// SetCircleID sets the "CircleID" field.
func (euo *EmployeesUpdateOne) SetCircleID(i int32) *EmployeesUpdateOne {
	euo.mutation.ResetCircleID()
	euo.mutation.SetCircleID(i)
	return euo
}

// SetNillableCircleID sets the "CircleID" field if the given value is not nil.
func (euo *EmployeesUpdateOne) SetNillableCircleID(i *int32) *EmployeesUpdateOne {
	if i != nil {
		euo.SetCircleID(*i)
	}
	return euo
}

// AddCircleID adds i to the "CircleID" field.
func (euo *EmployeesUpdateOne) AddCircleID(i int32) *EmployeesUpdateOne {
	euo.mutation.AddCircleID(i)
	return euo
}

// ClearCircleID clears the value of the "CircleID" field.
func (euo *EmployeesUpdateOne) ClearCircleID() *EmployeesUpdateOne {
	euo.mutation.ClearCircleID()
	return euo
}

// SetCircleName sets the "CircleName" field.
func (euo *EmployeesUpdateOne) SetCircleName(s string) *EmployeesUpdateOne {
	euo.mutation.SetCircleName(s)
	return euo
}

// SetCircleVerified sets the "CircleVerified" field.
func (euo *EmployeesUpdateOne) SetCircleVerified(b bool) *EmployeesUpdateOne {
	euo.mutation.SetCircleVerified(b)
	return euo
}

// SetNillableCircleVerified sets the "CircleVerified" field if the given value is not nil.
func (euo *EmployeesUpdateOne) SetNillableCircleVerified(b *bool) *EmployeesUpdateOne {
	if b != nil {
		euo.SetCircleVerified(*b)
	}
	return euo
}

// SetCircleRemStatus sets the "CircleRemStatus" field.
func (euo *EmployeesUpdateOne) SetCircleRemStatus(b bool) *EmployeesUpdateOne {
	euo.mutation.SetCircleRemStatus(b)
	return euo
}

// SetNillableCircleRemStatus sets the "CircleRemStatus" field if the given value is not nil.
func (euo *EmployeesUpdateOne) SetNillableCircleRemStatus(b *bool) *EmployeesUpdateOne {
	if b != nil {
		euo.SetCircleRemStatus(*b)
	}
	return euo
}

// SetCircleRemarks sets the "CircleRemarks" field.
func (euo *EmployeesUpdateOne) SetCircleRemarks(s string) *EmployeesUpdateOne {
	euo.mutation.SetCircleRemarks(s)
	return euo
}

// SetNillableCircleRemarks sets the "CircleRemarks" field if the given value is not nil.
func (euo *EmployeesUpdateOne) SetNillableCircleRemarks(s *string) *EmployeesUpdateOne {
	if s != nil {
		euo.SetCircleRemarks(*s)
	}
	return euo
}

// ClearCircleRemarks clears the value of the "CircleRemarks" field.
func (euo *EmployeesUpdateOne) ClearCircleRemarks() *EmployeesUpdateOne {
	euo.mutation.ClearCircleRemarks()
	return euo
}

// SetRegionID sets the "RegionID" field.
func (euo *EmployeesUpdateOne) SetRegionID(i int32) *EmployeesUpdateOne {
	euo.mutation.ResetRegionID()
	euo.mutation.SetRegionID(i)
	return euo
}

// SetNillableRegionID sets the "RegionID" field if the given value is not nil.
func (euo *EmployeesUpdateOne) SetNillableRegionID(i *int32) *EmployeesUpdateOne {
	if i != nil {
		euo.SetRegionID(*i)
	}
	return euo
}

// AddRegionID adds i to the "RegionID" field.
func (euo *EmployeesUpdateOne) AddRegionID(i int32) *EmployeesUpdateOne {
	euo.mutation.AddRegionID(i)
	return euo
}

// ClearRegionID clears the value of the "RegionID" field.
func (euo *EmployeesUpdateOne) ClearRegionID() *EmployeesUpdateOne {
	euo.mutation.ClearRegionID()
	return euo
}

// SetRegionName sets the "RegionName" field.
func (euo *EmployeesUpdateOne) SetRegionName(s string) *EmployeesUpdateOne {
	euo.mutation.SetRegionName(s)
	return euo
}

// SetNillableRegionName sets the "RegionName" field if the given value is not nil.
func (euo *EmployeesUpdateOne) SetNillableRegionName(s *string) *EmployeesUpdateOne {
	if s != nil {
		euo.SetRegionName(*s)
	}
	return euo
}

// ClearRegionName clears the value of the "RegionName" field.
func (euo *EmployeesUpdateOne) ClearRegionName() *EmployeesUpdateOne {
	euo.mutation.ClearRegionName()
	return euo
}

// SetRegionVerified sets the "RegionVerified" field.
func (euo *EmployeesUpdateOne) SetRegionVerified(b bool) *EmployeesUpdateOne {
	euo.mutation.SetRegionVerified(b)
	return euo
}

// SetNillableRegionVerified sets the "RegionVerified" field if the given value is not nil.
func (euo *EmployeesUpdateOne) SetNillableRegionVerified(b *bool) *EmployeesUpdateOne {
	if b != nil {
		euo.SetRegionVerified(*b)
	}
	return euo
}

// SetRegionRemStatus sets the "RegionRemStatus" field.
func (euo *EmployeesUpdateOne) SetRegionRemStatus(b bool) *EmployeesUpdateOne {
	euo.mutation.SetRegionRemStatus(b)
	return euo
}

// SetNillableRegionRemStatus sets the "RegionRemStatus" field if the given value is not nil.
func (euo *EmployeesUpdateOne) SetNillableRegionRemStatus(b *bool) *EmployeesUpdateOne {
	if b != nil {
		euo.SetRegionRemStatus(*b)
	}
	return euo
}

// SetRegionRemarks sets the "RegionRemarks" field.
func (euo *EmployeesUpdateOne) SetRegionRemarks(s string) *EmployeesUpdateOne {
	euo.mutation.SetRegionRemarks(s)
	return euo
}

// SetNillableRegionRemarks sets the "RegionRemarks" field if the given value is not nil.
func (euo *EmployeesUpdateOne) SetNillableRegionRemarks(s *string) *EmployeesUpdateOne {
	if s != nil {
		euo.SetRegionRemarks(*s)
	}
	return euo
}

// ClearRegionRemarks clears the value of the "RegionRemarks" field.
func (euo *EmployeesUpdateOne) ClearRegionRemarks() *EmployeesUpdateOne {
	euo.mutation.ClearRegionRemarks()
	return euo
}

// SetDivisionID sets the "DivisionID" field.
func (euo *EmployeesUpdateOne) SetDivisionID(i int32) *EmployeesUpdateOne {
	euo.mutation.ResetDivisionID()
	euo.mutation.SetDivisionID(i)
	return euo
}

// SetNillableDivisionID sets the "DivisionID" field if the given value is not nil.
func (euo *EmployeesUpdateOne) SetNillableDivisionID(i *int32) *EmployeesUpdateOne {
	if i != nil {
		euo.SetDivisionID(*i)
	}
	return euo
}

// AddDivisionID adds i to the "DivisionID" field.
func (euo *EmployeesUpdateOne) AddDivisionID(i int32) *EmployeesUpdateOne {
	euo.mutation.AddDivisionID(i)
	return euo
}

// ClearDivisionID clears the value of the "DivisionID" field.
func (euo *EmployeesUpdateOne) ClearDivisionID() *EmployeesUpdateOne {
	euo.mutation.ClearDivisionID()
	return euo
}

// SetDivisionName sets the "DivisionName" field.
func (euo *EmployeesUpdateOne) SetDivisionName(s string) *EmployeesUpdateOne {
	euo.mutation.SetDivisionName(s)
	return euo
}

// SetNillableDivisionName sets the "DivisionName" field if the given value is not nil.
func (euo *EmployeesUpdateOne) SetNillableDivisionName(s *string) *EmployeesUpdateOne {
	if s != nil {
		euo.SetDivisionName(*s)
	}
	return euo
}

// ClearDivisionName clears the value of the "DivisionName" field.
func (euo *EmployeesUpdateOne) ClearDivisionName() *EmployeesUpdateOne {
	euo.mutation.ClearDivisionName()
	return euo
}

// SetDivisionVerified sets the "DivisionVerified" field.
func (euo *EmployeesUpdateOne) SetDivisionVerified(b bool) *EmployeesUpdateOne {
	euo.mutation.SetDivisionVerified(b)
	return euo
}

// SetNillableDivisionVerified sets the "DivisionVerified" field if the given value is not nil.
func (euo *EmployeesUpdateOne) SetNillableDivisionVerified(b *bool) *EmployeesUpdateOne {
	if b != nil {
		euo.SetDivisionVerified(*b)
	}
	return euo
}

// SetDivisionRemStatus sets the "DivisionRemStatus" field.
func (euo *EmployeesUpdateOne) SetDivisionRemStatus(b bool) *EmployeesUpdateOne {
	euo.mutation.SetDivisionRemStatus(b)
	return euo
}

// SetNillableDivisionRemStatus sets the "DivisionRemStatus" field if the given value is not nil.
func (euo *EmployeesUpdateOne) SetNillableDivisionRemStatus(b *bool) *EmployeesUpdateOne {
	if b != nil {
		euo.SetDivisionRemStatus(*b)
	}
	return euo
}

// SetDivisionRemarks sets the "DivisionRemarks" field.
func (euo *EmployeesUpdateOne) SetDivisionRemarks(s string) *EmployeesUpdateOne {
	euo.mutation.SetDivisionRemarks(s)
	return euo
}

// SetOfficeID sets the "OfficeID" field.
func (euo *EmployeesUpdateOne) SetOfficeID(i int32) *EmployeesUpdateOne {
	euo.mutation.ResetOfficeID()
	euo.mutation.SetOfficeID(i)
	return euo
}

// SetNillableOfficeID sets the "OfficeID" field if the given value is not nil.
func (euo *EmployeesUpdateOne) SetNillableOfficeID(i *int32) *EmployeesUpdateOne {
	if i != nil {
		euo.SetOfficeID(*i)
	}
	return euo
}

// AddOfficeID adds i to the "OfficeID" field.
func (euo *EmployeesUpdateOne) AddOfficeID(i int32) *EmployeesUpdateOne {
	euo.mutation.AddOfficeID(i)
	return euo
}

// ClearOfficeID clears the value of the "OfficeID" field.
func (euo *EmployeesUpdateOne) ClearOfficeID() *EmployeesUpdateOne {
	euo.mutation.ClearOfficeID()
	return euo
}

// SetOfficeName sets the "OfficeName" field.
func (euo *EmployeesUpdateOne) SetOfficeName(s string) *EmployeesUpdateOne {
	euo.mutation.SetOfficeName(s)
	return euo
}

// SetOfficeVerified sets the "OfficeVerified" field.
func (euo *EmployeesUpdateOne) SetOfficeVerified(b bool) *EmployeesUpdateOne {
	euo.mutation.SetOfficeVerified(b)
	return euo
}

// SetNillableOfficeVerified sets the "OfficeVerified" field if the given value is not nil.
func (euo *EmployeesUpdateOne) SetNillableOfficeVerified(b *bool) *EmployeesUpdateOne {
	if b != nil {
		euo.SetOfficeVerified(*b)
	}
	return euo
}

// SetOfficeRemStatus sets the "OfficeRemStatus" field.
func (euo *EmployeesUpdateOne) SetOfficeRemStatus(b bool) *EmployeesUpdateOne {
	euo.mutation.SetOfficeRemStatus(b)
	return euo
}

// SetNillableOfficeRemStatus sets the "OfficeRemStatus" field if the given value is not nil.
func (euo *EmployeesUpdateOne) SetNillableOfficeRemStatus(b *bool) *EmployeesUpdateOne {
	if b != nil {
		euo.SetOfficeRemStatus(*b)
	}
	return euo
}

// SetOfficeRemarks sets the "OfficeRemarks" field.
func (euo *EmployeesUpdateOne) SetOfficeRemarks(s string) *EmployeesUpdateOne {
	euo.mutation.SetOfficeRemarks(s)
	return euo
}

// SetNillableOfficeRemarks sets the "OfficeRemarks" field if the given value is not nil.
func (euo *EmployeesUpdateOne) SetNillableOfficeRemarks(s *string) *EmployeesUpdateOne {
	if s != nil {
		euo.SetOfficeRemarks(*s)
	}
	return euo
}

// ClearOfficeRemarks clears the value of the "OfficeRemarks" field.
func (euo *EmployeesUpdateOne) ClearOfficeRemarks() *EmployeesUpdateOne {
	euo.mutation.ClearOfficeRemarks()
	return euo
}

// SetRole sets the "Role" field.
func (euo *EmployeesUpdateOne) SetRole(s string) *EmployeesUpdateOne {
	euo.mutation.SetRole(s)
	return euo
}

// SetRoleVerified sets the "RoleVerified" field.
func (euo *EmployeesUpdateOne) SetRoleVerified(b bool) *EmployeesUpdateOne {
	euo.mutation.SetRoleVerified(b)
	return euo
}

// SetNillableRoleVerified sets the "RoleVerified" field if the given value is not nil.
func (euo *EmployeesUpdateOne) SetNillableRoleVerified(b *bool) *EmployeesUpdateOne {
	if b != nil {
		euo.SetRoleVerified(*b)
	}
	return euo
}

// SetRoleRemStatus sets the "RoleRemStatus" field.
func (euo *EmployeesUpdateOne) SetRoleRemStatus(b bool) *EmployeesUpdateOne {
	euo.mutation.SetRoleRemStatus(b)
	return euo
}

// SetNillableRoleRemStatus sets the "RoleRemStatus" field if the given value is not nil.
func (euo *EmployeesUpdateOne) SetNillableRoleRemStatus(b *bool) *EmployeesUpdateOne {
	if b != nil {
		euo.SetRoleRemStatus(*b)
	}
	return euo
}

// SetRoleRemarks sets the "RoleRemarks" field.
func (euo *EmployeesUpdateOne) SetRoleRemarks(s string) *EmployeesUpdateOne {
	euo.mutation.SetRoleRemarks(s)
	return euo
}

// SetDCCS sets the "DCCS" field.
func (euo *EmployeesUpdateOne) SetDCCS(t time.Time) *EmployeesUpdateOne {
	euo.mutation.SetDCCS(t)
	return euo
}

// SetDCCSVerified sets the "DCCSVerified" field.
func (euo *EmployeesUpdateOne) SetDCCSVerified(b bool) *EmployeesUpdateOne {
	euo.mutation.SetDCCSVerified(b)
	return euo
}

// SetNillableDCCSVerified sets the "DCCSVerified" field if the given value is not nil.
func (euo *EmployeesUpdateOne) SetNillableDCCSVerified(b *bool) *EmployeesUpdateOne {
	if b != nil {
		euo.SetDCCSVerified(*b)
	}
	return euo
}

// SetDCCSRemStatus sets the "DCCSRemStatus" field.
func (euo *EmployeesUpdateOne) SetDCCSRemStatus(b bool) *EmployeesUpdateOne {
	euo.mutation.SetDCCSRemStatus(b)
	return euo
}

// SetNillableDCCSRemStatus sets the "DCCSRemStatus" field if the given value is not nil.
func (euo *EmployeesUpdateOne) SetNillableDCCSRemStatus(b *bool) *EmployeesUpdateOne {
	if b != nil {
		euo.SetDCCSRemStatus(*b)
	}
	return euo
}

// SetDCCSRemarks sets the "DCCSRemarks" field.
func (euo *EmployeesUpdateOne) SetDCCSRemarks(s string) *EmployeesUpdateOne {
	euo.mutation.SetDCCSRemarks(s)
	return euo
}

// SetNillableDCCSRemarks sets the "DCCSRemarks" field if the given value is not nil.
func (euo *EmployeesUpdateOne) SetNillableDCCSRemarks(s *string) *EmployeesUpdateOne {
	if s != nil {
		euo.SetDCCSRemarks(*s)
	}
	return euo
}

// ClearDCCSRemarks clears the value of the "DCCSRemarks" field.
func (euo *EmployeesUpdateOne) ClearDCCSRemarks() *EmployeesUpdateOne {
	euo.mutation.ClearDCCSRemarks()
	return euo
}

// SetDCInPresentCadre sets the "DCInPresentCadre" field.
func (euo *EmployeesUpdateOne) SetDCInPresentCadre(t time.Time) *EmployeesUpdateOne {
	euo.mutation.SetDCInPresentCadre(t)
	return euo
}

// SetDCInPresentCadreVerified sets the "DCInPresentCadreVerified" field.
func (euo *EmployeesUpdateOne) SetDCInPresentCadreVerified(b bool) *EmployeesUpdateOne {
	euo.mutation.SetDCInPresentCadreVerified(b)
	return euo
}

// SetNillableDCInPresentCadreVerified sets the "DCInPresentCadreVerified" field if the given value is not nil.
func (euo *EmployeesUpdateOne) SetNillableDCInPresentCadreVerified(b *bool) *EmployeesUpdateOne {
	if b != nil {
		euo.SetDCInPresentCadreVerified(*b)
	}
	return euo
}

// SetDCInPresentCadreRemStatus sets the "DCInPresentCadreRemStatus" field.
func (euo *EmployeesUpdateOne) SetDCInPresentCadreRemStatus(b bool) *EmployeesUpdateOne {
	euo.mutation.SetDCInPresentCadreRemStatus(b)
	return euo
}

// SetNillableDCInPresentCadreRemStatus sets the "DCInPresentCadreRemStatus" field if the given value is not nil.
func (euo *EmployeesUpdateOne) SetNillableDCInPresentCadreRemStatus(b *bool) *EmployeesUpdateOne {
	if b != nil {
		euo.SetDCInPresentCadreRemStatus(*b)
	}
	return euo
}

// SetDCInPresentCadreRemarks sets the "DCInPresentCadreRemarks" field.
func (euo *EmployeesUpdateOne) SetDCInPresentCadreRemarks(s string) *EmployeesUpdateOne {
	euo.mutation.SetDCInPresentCadreRemarks(s)
	return euo
}

// SetNillableDCInPresentCadreRemarks sets the "DCInPresentCadreRemarks" field if the given value is not nil.
func (euo *EmployeesUpdateOne) SetNillableDCInPresentCadreRemarks(s *string) *EmployeesUpdateOne {
	if s != nil {
		euo.SetDCInPresentCadreRemarks(*s)
	}
	return euo
}

// ClearDCInPresentCadreRemarks clears the value of the "DCInPresentCadreRemarks" field.
func (euo *EmployeesUpdateOne) ClearDCInPresentCadreRemarks() *EmployeesUpdateOne {
	euo.mutation.ClearDCInPresentCadreRemarks()
	return euo
}

// SetAPSWorking sets the "APSWorking" field.
func (euo *EmployeesUpdateOne) SetAPSWorking(b bool) *EmployeesUpdateOne {
	euo.mutation.SetAPSWorking(b)
	return euo
}

// SetNillableAPSWorking sets the "APSWorking" field if the given value is not nil.
func (euo *EmployeesUpdateOne) SetNillableAPSWorking(b *bool) *EmployeesUpdateOne {
	if b != nil {
		euo.SetAPSWorking(*b)
	}
	return euo
}

// ClearAPSWorking clears the value of the "APSWorking" field.
func (euo *EmployeesUpdateOne) ClearAPSWorking() *EmployeesUpdateOne {
	euo.mutation.ClearAPSWorking()
	return euo
}

// SetAPSWorkingVerified sets the "APSWorkingVerified" field.
func (euo *EmployeesUpdateOne) SetAPSWorkingVerified(b bool) *EmployeesUpdateOne {
	euo.mutation.SetAPSWorkingVerified(b)
	return euo
}

// SetNillableAPSWorkingVerified sets the "APSWorkingVerified" field if the given value is not nil.
func (euo *EmployeesUpdateOne) SetNillableAPSWorkingVerified(b *bool) *EmployeesUpdateOne {
	if b != nil {
		euo.SetAPSWorkingVerified(*b)
	}
	return euo
}

// SetAPSWorkingRemStatus sets the "APSWorkingRemStatus" field.
func (euo *EmployeesUpdateOne) SetAPSWorkingRemStatus(b bool) *EmployeesUpdateOne {
	euo.mutation.SetAPSWorkingRemStatus(b)
	return euo
}

// SetNillableAPSWorkingRemStatus sets the "APSWorkingRemStatus" field if the given value is not nil.
func (euo *EmployeesUpdateOne) SetNillableAPSWorkingRemStatus(b *bool) *EmployeesUpdateOne {
	if b != nil {
		euo.SetAPSWorkingRemStatus(*b)
	}
	return euo
}

// SetAPSWorkingRemarks sets the "APSWorkingRemarks" field.
func (euo *EmployeesUpdateOne) SetAPSWorkingRemarks(s string) *EmployeesUpdateOne {
	euo.mutation.SetAPSWorkingRemarks(s)
	return euo
}

// SetNillableAPSWorkingRemarks sets the "APSWorkingRemarks" field if the given value is not nil.
func (euo *EmployeesUpdateOne) SetNillableAPSWorkingRemarks(s *string) *EmployeesUpdateOne {
	if s != nil {
		euo.SetAPSWorkingRemarks(*s)
	}
	return euo
}

// ClearAPSWorkingRemarks clears the value of the "APSWorkingRemarks" field.
func (euo *EmployeesUpdateOne) ClearAPSWorkingRemarks() *EmployeesUpdateOne {
	euo.mutation.ClearAPSWorkingRemarks()
	return euo
}

// SetProfilestatus sets the "profilestatus" field.
func (euo *EmployeesUpdateOne) SetProfilestatus(b bool) *EmployeesUpdateOne {
	euo.mutation.SetProfilestatus(b)
	return euo
}

// SetNillableProfilestatus sets the "profilestatus" field if the given value is not nil.
func (euo *EmployeesUpdateOne) SetNillableProfilestatus(b *bool) *EmployeesUpdateOne {
	if b != nil {
		euo.SetProfilestatus(*b)
	}
	return euo
}

// SetRoleUserCode sets the "RoleUserCode" field.
func (euo *EmployeesUpdateOne) SetRoleUserCode(i int32) *EmployeesUpdateOne {
	euo.mutation.ResetRoleUserCode()
	euo.mutation.SetRoleUserCode(i)
	return euo
}

// SetNillableRoleUserCode sets the "RoleUserCode" field if the given value is not nil.
func (euo *EmployeesUpdateOne) SetNillableRoleUserCode(i *int32) *EmployeesUpdateOne {
	if i != nil {
		euo.SetRoleUserCode(*i)
	}
	return euo
}

// AddRoleUserCode adds i to the "RoleUserCode" field.
func (euo *EmployeesUpdateOne) AddRoleUserCode(i int32) *EmployeesUpdateOne {
	euo.mutation.AddRoleUserCode(i)
	return euo
}

// ClearRoleUserCode clears the value of the "RoleUserCode" field.
func (euo *EmployeesUpdateOne) ClearRoleUserCode() *EmployeesUpdateOne {
	euo.mutation.ClearRoleUserCode()
	return euo
}

// Mutation returns the EmployeesMutation object of the builder.
func (euo *EmployeesUpdateOne) Mutation() *EmployeesMutation {
	return euo.mutation
}

// Where appends a list predicates to the EmployeesUpdate builder.
func (euo *EmployeesUpdateOne) Where(ps ...predicate.Employees) *EmployeesUpdateOne {
	euo.mutation.Where(ps...)
	return euo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (euo *EmployeesUpdateOne) Select(field string, fields ...string) *EmployeesUpdateOne {
	euo.fields = append([]string{field}, fields...)
	return euo
}

// Save executes the query and returns the updated Employees entity.
func (euo *EmployeesUpdateOne) Save(ctx context.Context) (*Employees, error) {
	return withHooks(ctx, euo.sqlSave, euo.mutation, euo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (euo *EmployeesUpdateOne) SaveX(ctx context.Context) *Employees {
	node, err := euo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (euo *EmployeesUpdateOne) Exec(ctx context.Context) error {
	_, err := euo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (euo *EmployeesUpdateOne) ExecX(ctx context.Context) {
	if err := euo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (euo *EmployeesUpdateOne) check() error {
	if v, ok := euo.mutation.Gender(); ok {
		if err := employees.GenderValidator(v); err != nil {
			return &ValidationError{Name: "Gender", err: fmt.Errorf(`ent: validator failed for field "Employees.Gender": %w`, err)}
		}
	}
	return nil
}

func (euo *EmployeesUpdateOne) sqlSave(ctx context.Context) (_node *Employees, err error) {
	if err := euo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(employees.Table, employees.Columns, sqlgraph.NewFieldSpec(employees.FieldID, field.TypeInt32))
	id, ok := euo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Employees.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := euo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, employees.FieldID)
		for _, f := range fields {
			if !employees.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != employees.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := euo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := euo.mutation.EmployeedID(); ok {
		_spec.SetField(employees.FieldEmployeedID, field.TypeInt32, value)
	}
	if value, ok := euo.mutation.AddedEmployeedID(); ok {
		_spec.AddField(employees.FieldEmployeedID, field.TypeInt32, value)
	}
	if value, ok := euo.mutation.IDVerified(); ok {
		_spec.SetField(employees.FieldIDVerified, field.TypeBool, value)
	}
	if value, ok := euo.mutation.IDRemStatus(); ok {
		_spec.SetField(employees.FieldIDRemStatus, field.TypeBool, value)
	}
	if value, ok := euo.mutation.IDRemarks(); ok {
		_spec.SetField(employees.FieldIDRemarks, field.TypeString, value)
	}
	if euo.mutation.IDRemarksCleared() {
		_spec.ClearField(employees.FieldIDRemarks, field.TypeString)
	}
	if value, ok := euo.mutation.EmployeeName(); ok {
		_spec.SetField(employees.FieldEmployeeName, field.TypeString, value)
	}
	if value, ok := euo.mutation.NameVerified(); ok {
		_spec.SetField(employees.FieldNameVerified, field.TypeBool, value)
	}
	if value, ok := euo.mutation.NameRemStatus(); ok {
		_spec.SetField(employees.FieldNameRemStatus, field.TypeBool, value)
	}
	if value, ok := euo.mutation.NameRemarks(); ok {
		_spec.SetField(employees.FieldNameRemarks, field.TypeString, value)
	}
	if euo.mutation.NameRemarksCleared() {
		_spec.ClearField(employees.FieldNameRemarks, field.TypeString)
	}
	if value, ok := euo.mutation.EmployeeFathersName(); ok {
		_spec.SetField(employees.FieldEmployeeFathersName, field.TypeString, value)
	}
	if value, ok := euo.mutation.FathersNameVerified(); ok {
		_spec.SetField(employees.FieldFathersNameVerified, field.TypeBool, value)
	}
	if value, ok := euo.mutation.FathersNameRemStatus(); ok {
		_spec.SetField(employees.FieldFathersNameRemStatus, field.TypeBool, value)
	}
	if value, ok := euo.mutation.FathersNameRemarks(); ok {
		_spec.SetField(employees.FieldFathersNameRemarks, field.TypeString, value)
	}
	if euo.mutation.FathersNameRemarksCleared() {
		_spec.ClearField(employees.FieldFathersNameRemarks, field.TypeString)
	}
	if value, ok := euo.mutation.DOB(); ok {
		_spec.SetField(employees.FieldDOB, field.TypeTime, value)
	}
	if value, ok := euo.mutation.DOBVerified(); ok {
		_spec.SetField(employees.FieldDOBVerified, field.TypeBool, value)
	}
	if value, ok := euo.mutation.DOBRemStatus(); ok {
		_spec.SetField(employees.FieldDOBRemStatus, field.TypeBool, value)
	}
	if value, ok := euo.mutation.DOBRemarks(); ok {
		_spec.SetField(employees.FieldDOBRemarks, field.TypeString, value)
	}
	if euo.mutation.DOBRemarksCleared() {
		_spec.ClearField(employees.FieldDOBRemarks, field.TypeString)
	}
	if value, ok := euo.mutation.Gender(); ok {
		_spec.SetField(employees.FieldGender, field.TypeEnum, value)
	}
	if value, ok := euo.mutation.GenderVerified(); ok {
		_spec.SetField(employees.FieldGenderVerified, field.TypeBool, value)
	}
	if value, ok := euo.mutation.GenderRemStatus(); ok {
		_spec.SetField(employees.FieldGenderRemStatus, field.TypeBool, value)
	}
	if value, ok := euo.mutation.GenderRemarks(); ok {
		_spec.SetField(employees.FieldGenderRemarks, field.TypeString, value)
	}
	if euo.mutation.GenderRemarksCleared() {
		_spec.ClearField(employees.FieldGenderRemarks, field.TypeString)
	}
	if value, ok := euo.mutation.MobileNumber(); ok {
		_spec.SetField(employees.FieldMobileNumber, field.TypeInt64, value)
	}
	if value, ok := euo.mutation.AddedMobileNumber(); ok {
		_spec.AddField(employees.FieldMobileNumber, field.TypeInt64, value)
	}
	if euo.mutation.MobileNumberCleared() {
		_spec.ClearField(employees.FieldMobileNumber, field.TypeInt64)
	}
	if value, ok := euo.mutation.MobileNumberVerified(); ok {
		_spec.SetField(employees.FieldMobileNumberVerified, field.TypeBool, value)
	}
	if value, ok := euo.mutation.MobileNumberRemStatus(); ok {
		_spec.SetField(employees.FieldMobileNumberRemStatus, field.TypeBool, value)
	}
	if value, ok := euo.mutation.MobileNumberRemarks(); ok {
		_spec.SetField(employees.FieldMobileNumberRemarks, field.TypeString, value)
	}
	if euo.mutation.MobileNumberRemarksCleared() {
		_spec.ClearField(employees.FieldMobileNumberRemarks, field.TypeString)
	}
	if value, ok := euo.mutation.EmailID(); ok {
		_spec.SetField(employees.FieldEmailID, field.TypeString, value)
	}
	if euo.mutation.EmailIDCleared() {
		_spec.ClearField(employees.FieldEmailID, field.TypeString)
	}
	if value, ok := euo.mutation.EmailIDVerified(); ok {
		_spec.SetField(employees.FieldEmailIDVerified, field.TypeBool, value)
	}
	if value, ok := euo.mutation.EmailIDRemStatus(); ok {
		_spec.SetField(employees.FieldEmailIDRemStatus, field.TypeBool, value)
	}
	if value, ok := euo.mutation.EmailIDRemarks(); ok {
		_spec.SetField(employees.FieldEmailIDRemarks, field.TypeString, value)
	}
	if euo.mutation.EmailIDRemarksCleared() {
		_spec.ClearField(employees.FieldEmailIDRemarks, field.TypeString)
	}
	if value, ok := euo.mutation.Categoryid(); ok {
		_spec.SetField(employees.FieldCategoryid, field.TypeInt32, value)
	}
	if value, ok := euo.mutation.AddedCategoryid(); ok {
		_spec.AddField(employees.FieldCategoryid, field.TypeInt32, value)
	}
	if euo.mutation.CategoryidCleared() {
		_spec.ClearField(employees.FieldCategoryid, field.TypeInt32)
	}
	if value, ok := euo.mutation.EmployeeCategoryCode(); ok {
		_spec.SetField(employees.FieldEmployeeCategoryCode, field.TypeString, value)
	}
	if euo.mutation.EmployeeCategoryCodeCleared() {
		_spec.ClearField(employees.FieldEmployeeCategoryCode, field.TypeString)
	}
	if value, ok := euo.mutation.EmployeeCategory(); ok {
		_spec.SetField(employees.FieldEmployeeCategory, field.TypeString, value)
	}
	if value, ok := euo.mutation.EmployeeCategoryCodeVerified(); ok {
		_spec.SetField(employees.FieldEmployeeCategoryCodeVerified, field.TypeBool, value)
	}
	if value, ok := euo.mutation.EmployeeCategoryCodeRemStatus(); ok {
		_spec.SetField(employees.FieldEmployeeCategoryCodeRemStatus, field.TypeBool, value)
	}
	if value, ok := euo.mutation.EmployeeCategoryCodeRemarks(); ok {
		_spec.SetField(employees.FieldEmployeeCategoryCodeRemarks, field.TypeString, value)
	}
	if euo.mutation.EmployeeCategoryCodeRemarksCleared() {
		_spec.ClearField(employees.FieldEmployeeCategoryCodeRemarks, field.TypeString)
	}
	if value, ok := euo.mutation.WithDisability(); ok {
		_spec.SetField(employees.FieldWithDisability, field.TypeString, value)
	}
	if value, ok := euo.mutation.WithDisabilityVerified(); ok {
		_spec.SetField(employees.FieldWithDisabilityVerified, field.TypeBool, value)
	}
	if value, ok := euo.mutation.WithDisabilityRemStatus(); ok {
		_spec.SetField(employees.FieldWithDisabilityRemStatus, field.TypeBool, value)
	}
	if value, ok := euo.mutation.WithDisabilityRemarks(); ok {
		_spec.SetField(employees.FieldWithDisabilityRemarks, field.TypeBool, value)
	}
	if euo.mutation.WithDisabilityRemarksCleared() {
		_spec.ClearField(employees.FieldWithDisabilityRemarks, field.TypeBool)
	}
	if value, ok := euo.mutation.DisabilityType(); ok {
		_spec.SetField(employees.FieldDisabilityType, field.TypeString, value)
	}
	if euo.mutation.DisabilityTypeCleared() {
		_spec.ClearField(employees.FieldDisabilityType, field.TypeString)
	}
	if value, ok := euo.mutation.DisabilityTypeVerified(); ok {
		_spec.SetField(employees.FieldDisabilityTypeVerified, field.TypeBool, value)
	}
	if value, ok := euo.mutation.DisabilityTypeRemStatus(); ok {
		_spec.SetField(employees.FieldDisabilityTypeRemStatus, field.TypeBool, value)
	}
	if value, ok := euo.mutation.DisabilityTypeRemarks(); ok {
		_spec.SetField(employees.FieldDisabilityTypeRemarks, field.TypeString, value)
	}
	if euo.mutation.DisabilityTypeRemarksCleared() {
		_spec.ClearField(employees.FieldDisabilityTypeRemarks, field.TypeString)
	}
	if value, ok := euo.mutation.DisabilityPercentage(); ok {
		_spec.SetField(employees.FieldDisabilityPercentage, field.TypeInt32, value)
	}
	if value, ok := euo.mutation.AddedDisabilityPercentage(); ok {
		_spec.AddField(employees.FieldDisabilityPercentage, field.TypeInt32, value)
	}
	if euo.mutation.DisabilityPercentageCleared() {
		_spec.ClearField(employees.FieldDisabilityPercentage, field.TypeInt32)
	}
	if value, ok := euo.mutation.DisabilityPercentageVerified(); ok {
		_spec.SetField(employees.FieldDisabilityPercentageVerified, field.TypeBool, value)
	}
	if value, ok := euo.mutation.DisabilityPercentageRemStatus(); ok {
		_spec.SetField(employees.FieldDisabilityPercentageRemStatus, field.TypeBool, value)
	}
	if value, ok := euo.mutation.DisabilityPercentageRemarks(); ok {
		_spec.SetField(employees.FieldDisabilityPercentageRemarks, field.TypeString, value)
	}
	if euo.mutation.DisabilityPercentageRemarksCleared() {
		_spec.ClearField(employees.FieldDisabilityPercentageRemarks, field.TypeString)
	}
	if value, ok := euo.mutation.Signature(); ok {
		_spec.SetField(employees.FieldSignature, field.TypeString, value)
	}
	if value, ok := euo.mutation.SignatureVerified(); ok {
		_spec.SetField(employees.FieldSignatureVerified, field.TypeBool, value)
	}
	if value, ok := euo.mutation.SignatureRemStatus(); ok {
		_spec.SetField(employees.FieldSignatureRemStatus, field.TypeBool, value)
	}
	if value, ok := euo.mutation.SignatureRemarks(); ok {
		_spec.SetField(employees.FieldSignatureRemarks, field.TypeString, value)
	}
	if euo.mutation.SignatureRemarksCleared() {
		_spec.ClearField(employees.FieldSignatureRemarks, field.TypeString)
	}
	if value, ok := euo.mutation.Photo(); ok {
		_spec.SetField(employees.FieldPhoto, field.TypeString, value)
	}
	if value, ok := euo.mutation.PhotoVerified(); ok {
		_spec.SetField(employees.FieldPhotoVerified, field.TypeBool, value)
	}
	if value, ok := euo.mutation.PhotoRemStatus(); ok {
		_spec.SetField(employees.FieldPhotoRemStatus, field.TypeBool, value)
	}
	if value, ok := euo.mutation.PhotoRemarks(); ok {
		_spec.SetField(employees.FieldPhotoRemarks, field.TypeString, value)
	}
	if euo.mutation.PhotoRemarksCleared() {
		_spec.ClearField(employees.FieldPhotoRemarks, field.TypeString)
	}
	if value, ok := euo.mutation.PostID(); ok {
		_spec.SetField(employees.FieldPostID, field.TypeInt32, value)
	}
	if value, ok := euo.mutation.AddedPostID(); ok {
		_spec.AddField(employees.FieldPostID, field.TypeInt32, value)
	}
	if euo.mutation.PostIDCleared() {
		_spec.ClearField(employees.FieldPostID, field.TypeInt32)
	}
	if value, ok := euo.mutation.PostCode(); ok {
		_spec.SetField(employees.FieldPostCode, field.TypeString, value)
	}
	if euo.mutation.PostCodeCleared() {
		_spec.ClearField(employees.FieldPostCode, field.TypeString)
	}
	if value, ok := euo.mutation.EmployeePost(); ok {
		_spec.SetField(employees.FieldEmployeePost, field.TypeString, value)
	}
	if value, ok := euo.mutation.EmployeePostVerified(); ok {
		_spec.SetField(employees.FieldEmployeePostVerified, field.TypeBool, value)
	}
	if value, ok := euo.mutation.EmployeePostRemStatus(); ok {
		_spec.SetField(employees.FieldEmployeePostRemStatus, field.TypeBool, value)
	}
	if value, ok := euo.mutation.EmployeePostRemarks(); ok {
		_spec.SetField(employees.FieldEmployeePostRemarks, field.TypeString, value)
	}
	if euo.mutation.EmployeePostRemarksCleared() {
		_spec.ClearField(employees.FieldEmployeePostRemarks, field.TypeString)
	}
	if value, ok := euo.mutation.DesignationID(); ok {
		_spec.SetField(employees.FieldDesignationID, field.TypeInt32, value)
	}
	if value, ok := euo.mutation.AddedDesignationID(); ok {
		_spec.AddField(employees.FieldDesignationID, field.TypeInt32, value)
	}
	if euo.mutation.DesignationIDCleared() {
		_spec.ClearField(employees.FieldDesignationID, field.TypeInt32)
	}
	if value, ok := euo.mutation.EmployeeDesignation(); ok {
		_spec.SetField(employees.FieldEmployeeDesignation, field.TypeString, value)
	}
	if value, ok := euo.mutation.EmployeeDesignationVerified(); ok {
		_spec.SetField(employees.FieldEmployeeDesignationVerified, field.TypeBool, value)
	}
	if value, ok := euo.mutation.EmployeeDesignationRemStatus(); ok {
		_spec.SetField(employees.FieldEmployeeDesignationRemStatus, field.TypeBool, value)
	}
	if value, ok := euo.mutation.EmployeeDesignationRemarks(); ok {
		_spec.SetField(employees.FieldEmployeeDesignationRemarks, field.TypeString, value)
	}
	if euo.mutation.EmployeeDesignationRemarksCleared() {
		_spec.ClearField(employees.FieldEmployeeDesignationRemarks, field.TypeString)
	}
	if value, ok := euo.mutation.CircleID(); ok {
		_spec.SetField(employees.FieldCircleID, field.TypeInt32, value)
	}
	if value, ok := euo.mutation.AddedCircleID(); ok {
		_spec.AddField(employees.FieldCircleID, field.TypeInt32, value)
	}
	if euo.mutation.CircleIDCleared() {
		_spec.ClearField(employees.FieldCircleID, field.TypeInt32)
	}
	if value, ok := euo.mutation.CircleName(); ok {
		_spec.SetField(employees.FieldCircleName, field.TypeString, value)
	}
	if value, ok := euo.mutation.CircleVerified(); ok {
		_spec.SetField(employees.FieldCircleVerified, field.TypeBool, value)
	}
	if value, ok := euo.mutation.CircleRemStatus(); ok {
		_spec.SetField(employees.FieldCircleRemStatus, field.TypeBool, value)
	}
	if value, ok := euo.mutation.CircleRemarks(); ok {
		_spec.SetField(employees.FieldCircleRemarks, field.TypeString, value)
	}
	if euo.mutation.CircleRemarksCleared() {
		_spec.ClearField(employees.FieldCircleRemarks, field.TypeString)
	}
	if value, ok := euo.mutation.RegionID(); ok {
		_spec.SetField(employees.FieldRegionID, field.TypeInt32, value)
	}
	if value, ok := euo.mutation.AddedRegionID(); ok {
		_spec.AddField(employees.FieldRegionID, field.TypeInt32, value)
	}
	if euo.mutation.RegionIDCleared() {
		_spec.ClearField(employees.FieldRegionID, field.TypeInt32)
	}
	if value, ok := euo.mutation.RegionName(); ok {
		_spec.SetField(employees.FieldRegionName, field.TypeString, value)
	}
	if euo.mutation.RegionNameCleared() {
		_spec.ClearField(employees.FieldRegionName, field.TypeString)
	}
	if value, ok := euo.mutation.RegionVerified(); ok {
		_spec.SetField(employees.FieldRegionVerified, field.TypeBool, value)
	}
	if value, ok := euo.mutation.RegionRemStatus(); ok {
		_spec.SetField(employees.FieldRegionRemStatus, field.TypeBool, value)
	}
	if value, ok := euo.mutation.RegionRemarks(); ok {
		_spec.SetField(employees.FieldRegionRemarks, field.TypeString, value)
	}
	if euo.mutation.RegionRemarksCleared() {
		_spec.ClearField(employees.FieldRegionRemarks, field.TypeString)
	}
	if value, ok := euo.mutation.DivisionID(); ok {
		_spec.SetField(employees.FieldDivisionID, field.TypeInt32, value)
	}
	if value, ok := euo.mutation.AddedDivisionID(); ok {
		_spec.AddField(employees.FieldDivisionID, field.TypeInt32, value)
	}
	if euo.mutation.DivisionIDCleared() {
		_spec.ClearField(employees.FieldDivisionID, field.TypeInt32)
	}
	if value, ok := euo.mutation.DivisionName(); ok {
		_spec.SetField(employees.FieldDivisionName, field.TypeString, value)
	}
	if euo.mutation.DivisionNameCleared() {
		_spec.ClearField(employees.FieldDivisionName, field.TypeString)
	}
	if value, ok := euo.mutation.DivisionVerified(); ok {
		_spec.SetField(employees.FieldDivisionVerified, field.TypeBool, value)
	}
	if value, ok := euo.mutation.DivisionRemStatus(); ok {
		_spec.SetField(employees.FieldDivisionRemStatus, field.TypeBool, value)
	}
	if value, ok := euo.mutation.DivisionRemarks(); ok {
		_spec.SetField(employees.FieldDivisionRemarks, field.TypeString, value)
	}
	if value, ok := euo.mutation.OfficeID(); ok {
		_spec.SetField(employees.FieldOfficeID, field.TypeInt32, value)
	}
	if value, ok := euo.mutation.AddedOfficeID(); ok {
		_spec.AddField(employees.FieldOfficeID, field.TypeInt32, value)
	}
	if euo.mutation.OfficeIDCleared() {
		_spec.ClearField(employees.FieldOfficeID, field.TypeInt32)
	}
	if value, ok := euo.mutation.OfficeName(); ok {
		_spec.SetField(employees.FieldOfficeName, field.TypeString, value)
	}
	if value, ok := euo.mutation.OfficeVerified(); ok {
		_spec.SetField(employees.FieldOfficeVerified, field.TypeBool, value)
	}
	if value, ok := euo.mutation.OfficeRemStatus(); ok {
		_spec.SetField(employees.FieldOfficeRemStatus, field.TypeBool, value)
	}
	if value, ok := euo.mutation.OfficeRemarks(); ok {
		_spec.SetField(employees.FieldOfficeRemarks, field.TypeString, value)
	}
	if euo.mutation.OfficeRemarksCleared() {
		_spec.ClearField(employees.FieldOfficeRemarks, field.TypeString)
	}
	if value, ok := euo.mutation.Role(); ok {
		_spec.SetField(employees.FieldRole, field.TypeString, value)
	}
	if value, ok := euo.mutation.RoleVerified(); ok {
		_spec.SetField(employees.FieldRoleVerified, field.TypeBool, value)
	}
	if value, ok := euo.mutation.RoleRemStatus(); ok {
		_spec.SetField(employees.FieldRoleRemStatus, field.TypeBool, value)
	}
	if value, ok := euo.mutation.RoleRemarks(); ok {
		_spec.SetField(employees.FieldRoleRemarks, field.TypeString, value)
	}
	if value, ok := euo.mutation.DCCS(); ok {
		_spec.SetField(employees.FieldDCCS, field.TypeTime, value)
	}
	if value, ok := euo.mutation.DCCSVerified(); ok {
		_spec.SetField(employees.FieldDCCSVerified, field.TypeBool, value)
	}
	if value, ok := euo.mutation.DCCSRemStatus(); ok {
		_spec.SetField(employees.FieldDCCSRemStatus, field.TypeBool, value)
	}
	if value, ok := euo.mutation.DCCSRemarks(); ok {
		_spec.SetField(employees.FieldDCCSRemarks, field.TypeString, value)
	}
	if euo.mutation.DCCSRemarksCleared() {
		_spec.ClearField(employees.FieldDCCSRemarks, field.TypeString)
	}
	if value, ok := euo.mutation.DCInPresentCadre(); ok {
		_spec.SetField(employees.FieldDCInPresentCadre, field.TypeTime, value)
	}
	if value, ok := euo.mutation.DCInPresentCadreVerified(); ok {
		_spec.SetField(employees.FieldDCInPresentCadreVerified, field.TypeBool, value)
	}
	if value, ok := euo.mutation.DCInPresentCadreRemStatus(); ok {
		_spec.SetField(employees.FieldDCInPresentCadreRemStatus, field.TypeBool, value)
	}
	if value, ok := euo.mutation.DCInPresentCadreRemarks(); ok {
		_spec.SetField(employees.FieldDCInPresentCadreRemarks, field.TypeString, value)
	}
	if euo.mutation.DCInPresentCadreRemarksCleared() {
		_spec.ClearField(employees.FieldDCInPresentCadreRemarks, field.TypeString)
	}
	if value, ok := euo.mutation.APSWorking(); ok {
		_spec.SetField(employees.FieldAPSWorking, field.TypeBool, value)
	}
	if euo.mutation.APSWorkingCleared() {
		_spec.ClearField(employees.FieldAPSWorking, field.TypeBool)
	}
	if value, ok := euo.mutation.APSWorkingVerified(); ok {
		_spec.SetField(employees.FieldAPSWorkingVerified, field.TypeBool, value)
	}
	if value, ok := euo.mutation.APSWorkingRemStatus(); ok {
		_spec.SetField(employees.FieldAPSWorkingRemStatus, field.TypeBool, value)
	}
	if value, ok := euo.mutation.APSWorkingRemarks(); ok {
		_spec.SetField(employees.FieldAPSWorkingRemarks, field.TypeString, value)
	}
	if euo.mutation.APSWorkingRemarksCleared() {
		_spec.ClearField(employees.FieldAPSWorkingRemarks, field.TypeString)
	}
	if value, ok := euo.mutation.Profilestatus(); ok {
		_spec.SetField(employees.FieldProfilestatus, field.TypeBool, value)
	}
	if value, ok := euo.mutation.RoleUserCode(); ok {
		_spec.SetField(employees.FieldRoleUserCode, field.TypeInt32, value)
	}
	if value, ok := euo.mutation.AddedRoleUserCode(); ok {
		_spec.AddField(employees.FieldRoleUserCode, field.TypeInt32, value)
	}
	if euo.mutation.RoleUserCodeCleared() {
		_spec.ClearField(employees.FieldRoleUserCode, field.TypeInt32)
	}
	_node = &Employees{config: euo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, euo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{employees.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	euo.mutation.done = true
	return _node, nil
}
