// Code generated by ent, DO NOT EDIT.

package cadreeligibleconfiguration

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the cadreeligibleconfiguration type in the database.
	Label = "cadre_eligible_configuration"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "cadreEligibleCode"
	// FieldExamCode holds the string denoting the examcode field in the database.
	FieldExamCode = "exam_code"
	// FieldExamName holds the string denoting the examname field in the database.
	FieldExamName = "exam_name"
	// FieldExamShortName holds the string denoting the examshortname field in the database.
	FieldExamShortName = "exam_short_name"
	// FieldPostID holds the string denoting the postid field in the database.
	FieldPostID = "post_id"
	// FieldPostCode holds the string denoting the postcode field in the database.
	FieldPostCode = "post_code"
	// FieldPostDescription holds the string denoting the postdescription field in the database.
	FieldPostDescription = "post_description"
	// FieldGdsService holds the string denoting the gdsservice field in the database.
	FieldGdsService = "gds_service"
	// FieldCategoryCode holds the string denoting the categorycode field in the database.
	FieldCategoryCode = "category_code"
	// FieldAgeCriteria holds the string denoting the agecriteria field in the database.
	FieldAgeCriteria = "age_criteria"
	// FieldServiceCriteria holds the string denoting the servicecriteria field in the database.
	FieldServiceCriteria = "service_criteria"
	// FieldDrivingLicenceCriteria holds the string denoting the drivinglicencecriteria field in the database.
	FieldDrivingLicenceCriteria = "driving_licence_criteria"
	// FieldComputerKnowledge holds the string denoting the computerknowledge field in the database.
	FieldComputerKnowledge = "computer_knowledge"
	// FieldEligibilityBasedOnLevelOfPayMatrix holds the string denoting the eligibilitybasedonlevelofpaymatrix field in the database.
	FieldEligibilityBasedOnLevelOfPayMatrix = "eligibility_based_on_level_of_pay_matrix"
	// FieldEducationCode holds the string denoting the educationcode field in the database.
	FieldEducationCode = "education_code"
	// FieldEducationDescription holds the string denoting the educationdescription field in the database.
	FieldEducationDescription = "education_description"
	// FieldOrderNumber holds the string denoting the ordernumber field in the database.
	FieldOrderNumber = "order_number"
	// FieldCreatedById holds the string denoting the createdbyid field in the database.
	FieldCreatedById = "created_by_id"
	// FieldCreatedByUserName holds the string denoting the createdbyusername field in the database.
	FieldCreatedByUserName = "created_by_user_name"
	// FieldCreatedByEmpId holds the string denoting the createdbyempid field in the database.
	FieldCreatedByEmpId = "created_by_emp_id"
	// FieldCreatedByDesignation holds the string denoting the createdbydesignation field in the database.
	FieldCreatedByDesignation = "created_by_designation"
	// FieldCreatedDate holds the string denoting the createddate field in the database.
	FieldCreatedDate = "created_date"
	// FieldVerifiedbyid holds the string denoting the verifiedbyid field in the database.
	FieldVerifiedbyid = "verifiedbyid"
	// FieldVerifiedbyusername holds the string denoting the verifiedbyusername field in the database.
	FieldVerifiedbyusername = "verifiedbyusername"
	// FieldVerifiedbyEmployeeid holds the string denoting the verifiedbyemployeeid field in the database.
	FieldVerifiedbyEmployeeid = "verifiedby_employeeid"
	// FieldVerifiedbyDesignation holds the string denoting the verifiedbydesignation field in the database.
	FieldVerifiedbyDesignation = "verifiedby_designation"
	// FieldVerifiedDate holds the string denoting the verifieddate field in the database.
	FieldVerifiedDate = "verified_date"
	// FieldStatuss holds the string denoting the statuss field in the database.
	FieldStatuss = "statuss"
	// FieldDeletedbyid holds the string denoting the deletedbyid field in the database.
	FieldDeletedbyid = "deletedbyid"
	// FieldDeletedbyusername holds the string denoting the deletedbyusername field in the database.
	FieldDeletedbyusername = "deletedbyusername"
	// FieldDeletedbyEmployeeid holds the string denoting the deletedbyemployeeid field in the database.
	FieldDeletedbyEmployeeid = "deletedby_employeeid"
	// FieldDeletedbyDesignation holds the string denoting the deletedbydesignation field in the database.
	FieldDeletedbyDesignation = "deletedby_designation"
	// FieldDeletedDate holds the string denoting the deleteddate field in the database.
	FieldDeletedDate = "deleted_date"
	// EdgeLogData holds the string denoting the logdata edge name in mutations.
	EdgeLogData = "LogData"
	// LogsFieldID holds the string denoting the ID field of the Logs.
	LogsFieldID = "ID"
	// Table holds the table name of the cadreeligibleconfiguration in the database.
	Table = "CadreEligibleConfiguration"
	// LogDataTable is the table that holds the LogData relation/edge.
	LogDataTable = "LogsTable"
	// LogDataInverseTable is the table name for the Logs entity.
	// It exists in this package in order to avoid circular dependency with the "logs" package.
	LogDataInverseTable = "LogsTable"
	// LogDataColumn is the table column denoting the LogData relation/edge.
	LogDataColumn = "cadre_eligible_configuration_log_data"
)

// Columns holds all SQL columns for cadreeligibleconfiguration fields.
var Columns = []string{
	FieldID,
	FieldExamCode,
	FieldExamName,
	FieldExamShortName,
	FieldPostID,
	FieldPostCode,
	FieldPostDescription,
	FieldGdsService,
	FieldCategoryCode,
	FieldAgeCriteria,
	FieldServiceCriteria,
	FieldDrivingLicenceCriteria,
	FieldComputerKnowledge,
	FieldEligibilityBasedOnLevelOfPayMatrix,
	FieldEducationCode,
	FieldEducationDescription,
	FieldOrderNumber,
	FieldCreatedById,
	FieldCreatedByUserName,
	FieldCreatedByEmpId,
	FieldCreatedByDesignation,
	FieldCreatedDate,
	FieldVerifiedbyid,
	FieldVerifiedbyusername,
	FieldVerifiedbyEmployeeid,
	FieldVerifiedbyDesignation,
	FieldVerifiedDate,
	FieldStatuss,
	FieldDeletedbyid,
	FieldDeletedbyusername,
	FieldDeletedbyEmployeeid,
	FieldDeletedbyDesignation,
	FieldDeletedDate,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedDate holds the default value on creation for the "CreatedDate" field.
	DefaultCreatedDate func() time.Time
	// DefaultVerifiedDate holds the default value on creation for the "verifiedDate" field.
	DefaultVerifiedDate func() time.Time
	// DefaultStatuss holds the default value on creation for the "Statuss" field.
	DefaultStatuss string
	// DefaultDeletedDate holds the default value on creation for the "deletedDate" field.
	DefaultDeletedDate func() time.Time
)

// OrderOption defines the ordering options for the CadreEligibleConfiguration queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByExamCode orders the results by the ExamCode field.
func ByExamCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExamCode, opts...).ToFunc()
}

// ByExamName orders the results by the ExamName field.
func ByExamName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExamName, opts...).ToFunc()
}

// ByExamShortName orders the results by the ExamShortName field.
func ByExamShortName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExamShortName, opts...).ToFunc()
}

// ByPostID orders the results by the PostID field.
func ByPostID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPostID, opts...).ToFunc()
}

// ByPostCode orders the results by the PostCode field.
func ByPostCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPostCode, opts...).ToFunc()
}

// ByPostDescription orders the results by the PostDescription field.
func ByPostDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPostDescription, opts...).ToFunc()
}

// ByGdsService orders the results by the gdsService field.
func ByGdsService(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGdsService, opts...).ToFunc()
}

// ByCategoryCode orders the results by the CategoryCode field.
func ByCategoryCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCategoryCode, opts...).ToFunc()
}

// ByAgeCriteria orders the results by the ageCriteria field.
func ByAgeCriteria(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAgeCriteria, opts...).ToFunc()
}

// ByServiceCriteria orders the results by the serviceCriteria field.
func ByServiceCriteria(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldServiceCriteria, opts...).ToFunc()
}

// ByDrivingLicenceCriteria orders the results by the drivingLicenceCriteria field.
func ByDrivingLicenceCriteria(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDrivingLicenceCriteria, opts...).ToFunc()
}

// ByComputerKnowledge orders the results by the computerKnowledge field.
func ByComputerKnowledge(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldComputerKnowledge, opts...).ToFunc()
}

// ByEligibilityBasedOnLevelOfPayMatrix orders the results by the eligibilityBasedOnLevelOfPayMatrix field.
func ByEligibilityBasedOnLevelOfPayMatrix(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEligibilityBasedOnLevelOfPayMatrix, opts...).ToFunc()
}

// ByEducationCode orders the results by the educationCode field.
func ByEducationCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEducationCode, opts...).ToFunc()
}

// ByEducationDescription orders the results by the educationDescription field.
func ByEducationDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEducationDescription, opts...).ToFunc()
}

// ByOrderNumber orders the results by the OrderNumber field.
func ByOrderNumber(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOrderNumber, opts...).ToFunc()
}

// ByCreatedById orders the results by the CreatedById field.
func ByCreatedById(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedById, opts...).ToFunc()
}

// ByCreatedByUserName orders the results by the CreatedByUserName field.
func ByCreatedByUserName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedByUserName, opts...).ToFunc()
}

// ByCreatedByEmpId orders the results by the CreatedByEmpId field.
func ByCreatedByEmpId(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedByEmpId, opts...).ToFunc()
}

// ByCreatedByDesignation orders the results by the CreatedByDesignation field.
func ByCreatedByDesignation(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedByDesignation, opts...).ToFunc()
}

// ByCreatedDate orders the results by the CreatedDate field.
func ByCreatedDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedDate, opts...).ToFunc()
}

// ByVerifiedbyid orders the results by the verifiedbyid field.
func ByVerifiedbyid(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVerifiedbyid, opts...).ToFunc()
}

// ByVerifiedbyusername orders the results by the verifiedbyusername field.
func ByVerifiedbyusername(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVerifiedbyusername, opts...).ToFunc()
}

// ByVerifiedbyEmployeeid orders the results by the verifiedbyEmployeeid field.
func ByVerifiedbyEmployeeid(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVerifiedbyEmployeeid, opts...).ToFunc()
}

// ByVerifiedbyDesignation orders the results by the verifiedbyDesignation field.
func ByVerifiedbyDesignation(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVerifiedbyDesignation, opts...).ToFunc()
}

// ByVerifiedDate orders the results by the verifiedDate field.
func ByVerifiedDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVerifiedDate, opts...).ToFunc()
}

// ByStatuss orders the results by the Statuss field.
func ByStatuss(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatuss, opts...).ToFunc()
}

// ByDeletedbyid orders the results by the deletedbyid field.
func ByDeletedbyid(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedbyid, opts...).ToFunc()
}

// ByDeletedbyusername orders the results by the deletedbyusername field.
func ByDeletedbyusername(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedbyusername, opts...).ToFunc()
}

// ByDeletedbyEmployeeid orders the results by the deletedbyEmployeeid field.
func ByDeletedbyEmployeeid(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedbyEmployeeid, opts...).ToFunc()
}

// ByDeletedbyDesignation orders the results by the deletedbyDesignation field.
func ByDeletedbyDesignation(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedbyDesignation, opts...).ToFunc()
}

// ByDeletedDate orders the results by the deletedDate field.
func ByDeletedDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedDate, opts...).ToFunc()
}

// ByLogDataCount orders the results by LogData count.
func ByLogDataCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newLogDataStep(), opts...)
	}
}

// ByLogData orders the results by LogData terms.
func ByLogData(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newLogDataStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newLogDataStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(LogDataInverseTable, LogsFieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, LogDataTable, LogDataColumn),
	)
}
