// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"recruit/ent/exam_applications_pmpa"
	"recruit/ent/predicate"
	"recruit/ent/recommendationspmpaapplications"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// RecommendationsPMPAApplicationsUpdate is the builder for updating RecommendationsPMPAApplications entities.
type RecommendationsPMPAApplicationsUpdate struct {
	config
	hooks    []Hook
	mutation *RecommendationsPMPAApplicationsMutation
}

// Where appends a list predicates to the RecommendationsPMPAApplicationsUpdate builder.
func (rpau *RecommendationsPMPAApplicationsUpdate) Where(ps ...predicate.RecommendationsPMPAApplications) *RecommendationsPMPAApplicationsUpdate {
	rpau.mutation.Where(ps...)
	return rpau
}

// SetApplicationID sets the "ApplicationID" field.
func (rpau *RecommendationsPMPAApplicationsUpdate) SetApplicationID(i int64) *RecommendationsPMPAApplicationsUpdate {
	rpau.mutation.ResetApplicationID()
	rpau.mutation.SetApplicationID(i)
	return rpau
}

// SetNillableApplicationID sets the "ApplicationID" field if the given value is not nil.
func (rpau *RecommendationsPMPAApplicationsUpdate) SetNillableApplicationID(i *int64) *RecommendationsPMPAApplicationsUpdate {
	if i != nil {
		rpau.SetApplicationID(*i)
	}
	return rpau
}

// AddApplicationID adds i to the "ApplicationID" field.
func (rpau *RecommendationsPMPAApplicationsUpdate) AddApplicationID(i int64) *RecommendationsPMPAApplicationsUpdate {
	rpau.mutation.AddApplicationID(i)
	return rpau
}

// ClearApplicationID clears the value of the "ApplicationID" field.
func (rpau *RecommendationsPMPAApplicationsUpdate) ClearApplicationID() *RecommendationsPMPAApplicationsUpdate {
	rpau.mutation.ClearApplicationID()
	return rpau
}

// SetEmployeeID sets the "EmployeeID" field.
func (rpau *RecommendationsPMPAApplicationsUpdate) SetEmployeeID(i int64) *RecommendationsPMPAApplicationsUpdate {
	rpau.mutation.ResetEmployeeID()
	rpau.mutation.SetEmployeeID(i)
	return rpau
}

// SetNillableEmployeeID sets the "EmployeeID" field if the given value is not nil.
func (rpau *RecommendationsPMPAApplicationsUpdate) SetNillableEmployeeID(i *int64) *RecommendationsPMPAApplicationsUpdate {
	if i != nil {
		rpau.SetEmployeeID(*i)
	}
	return rpau
}

// AddEmployeeID adds i to the "EmployeeID" field.
func (rpau *RecommendationsPMPAApplicationsUpdate) AddEmployeeID(i int64) *RecommendationsPMPAApplicationsUpdate {
	rpau.mutation.AddEmployeeID(i)
	return rpau
}

// ClearEmployeeID clears the value of the "EmployeeID" field.
func (rpau *RecommendationsPMPAApplicationsUpdate) ClearEmployeeID() *RecommendationsPMPAApplicationsUpdate {
	rpau.mutation.ClearEmployeeID()
	return rpau
}

// SetExamNameCode sets the "ExamNameCode" field.
func (rpau *RecommendationsPMPAApplicationsUpdate) SetExamNameCode(s string) *RecommendationsPMPAApplicationsUpdate {
	rpau.mutation.SetExamNameCode(s)
	return rpau
}

// SetNillableExamNameCode sets the "ExamNameCode" field if the given value is not nil.
func (rpau *RecommendationsPMPAApplicationsUpdate) SetNillableExamNameCode(s *string) *RecommendationsPMPAApplicationsUpdate {
	if s != nil {
		rpau.SetExamNameCode(*s)
	}
	return rpau
}

// ClearExamNameCode clears the value of the "ExamNameCode" field.
func (rpau *RecommendationsPMPAApplicationsUpdate) ClearExamNameCode() *RecommendationsPMPAApplicationsUpdate {
	rpau.mutation.ClearExamNameCode()
	return rpau
}

// SetExamYear sets the "ExamYear" field.
func (rpau *RecommendationsPMPAApplicationsUpdate) SetExamYear(s string) *RecommendationsPMPAApplicationsUpdate {
	rpau.mutation.SetExamYear(s)
	return rpau
}

// SetNillableExamYear sets the "ExamYear" field if the given value is not nil.
func (rpau *RecommendationsPMPAApplicationsUpdate) SetNillableExamYear(s *string) *RecommendationsPMPAApplicationsUpdate {
	if s != nil {
		rpau.SetExamYear(*s)
	}
	return rpau
}

// ClearExamYear clears the value of the "ExamYear" field.
func (rpau *RecommendationsPMPAApplicationsUpdate) ClearExamYear() *RecommendationsPMPAApplicationsUpdate {
	rpau.mutation.ClearExamYear()
	return rpau
}

// SetVacancyYear sets the "VacancyYear" field.
func (rpau *RecommendationsPMPAApplicationsUpdate) SetVacancyYear(i int32) *RecommendationsPMPAApplicationsUpdate {
	rpau.mutation.ResetVacancyYear()
	rpau.mutation.SetVacancyYear(i)
	return rpau
}

// SetNillableVacancyYear sets the "VacancyYear" field if the given value is not nil.
func (rpau *RecommendationsPMPAApplicationsUpdate) SetNillableVacancyYear(i *int32) *RecommendationsPMPAApplicationsUpdate {
	if i != nil {
		rpau.SetVacancyYear(*i)
	}
	return rpau
}

// AddVacancyYear adds i to the "VacancyYear" field.
func (rpau *RecommendationsPMPAApplicationsUpdate) AddVacancyYear(i int32) *RecommendationsPMPAApplicationsUpdate {
	rpau.mutation.AddVacancyYear(i)
	return rpau
}

// ClearVacancyYear clears the value of the "VacancyYear" field.
func (rpau *RecommendationsPMPAApplicationsUpdate) ClearVacancyYear() *RecommendationsPMPAApplicationsUpdate {
	rpau.mutation.ClearVacancyYear()
	return rpau
}

// SetCARecommendations sets the "CA_Recommendations" field.
func (rpau *RecommendationsPMPAApplicationsUpdate) SetCARecommendations(s string) *RecommendationsPMPAApplicationsUpdate {
	rpau.mutation.SetCARecommendations(s)
	return rpau
}

// SetNillableCARecommendations sets the "CA_Recommendations" field if the given value is not nil.
func (rpau *RecommendationsPMPAApplicationsUpdate) SetNillableCARecommendations(s *string) *RecommendationsPMPAApplicationsUpdate {
	if s != nil {
		rpau.SetCARecommendations(*s)
	}
	return rpau
}

// ClearCARecommendations clears the value of the "CA_Recommendations" field.
func (rpau *RecommendationsPMPAApplicationsUpdate) ClearCARecommendations() *RecommendationsPMPAApplicationsUpdate {
	rpau.mutation.ClearCARecommendations()
	return rpau
}

// SetCAUpdatedAt sets the "CA_UpdatedAt" field.
func (rpau *RecommendationsPMPAApplicationsUpdate) SetCAUpdatedAt(t time.Time) *RecommendationsPMPAApplicationsUpdate {
	rpau.mutation.SetCAUpdatedAt(t)
	return rpau
}

// SetNillableCAUpdatedAt sets the "CA_UpdatedAt" field if the given value is not nil.
func (rpau *RecommendationsPMPAApplicationsUpdate) SetNillableCAUpdatedAt(t *time.Time) *RecommendationsPMPAApplicationsUpdate {
	if t != nil {
		rpau.SetCAUpdatedAt(*t)
	}
	return rpau
}

// ClearCAUpdatedAt clears the value of the "CA_UpdatedAt" field.
func (rpau *RecommendationsPMPAApplicationsUpdate) ClearCAUpdatedAt() *RecommendationsPMPAApplicationsUpdate {
	rpau.mutation.ClearCAUpdatedAt()
	return rpau
}

// SetCAUserName sets the "CA_UserName" field.
func (rpau *RecommendationsPMPAApplicationsUpdate) SetCAUserName(s string) *RecommendationsPMPAApplicationsUpdate {
	rpau.mutation.SetCAUserName(s)
	return rpau
}

// SetNillableCAUserName sets the "CA_UserName" field if the given value is not nil.
func (rpau *RecommendationsPMPAApplicationsUpdate) SetNillableCAUserName(s *string) *RecommendationsPMPAApplicationsUpdate {
	if s != nil {
		rpau.SetCAUserName(*s)
	}
	return rpau
}

// ClearCAUserName clears the value of the "CA_UserName" field.
func (rpau *RecommendationsPMPAApplicationsUpdate) ClearCAUserName() *RecommendationsPMPAApplicationsUpdate {
	rpau.mutation.ClearCAUserName()
	return rpau
}

// SetCARemarks sets the "CA_Remarks" field.
func (rpau *RecommendationsPMPAApplicationsUpdate) SetCARemarks(s string) *RecommendationsPMPAApplicationsUpdate {
	rpau.mutation.SetCARemarks(s)
	return rpau
}

// SetNillableCARemarks sets the "CA_Remarks" field if the given value is not nil.
func (rpau *RecommendationsPMPAApplicationsUpdate) SetNillableCARemarks(s *string) *RecommendationsPMPAApplicationsUpdate {
	if s != nil {
		rpau.SetCARemarks(*s)
	}
	return rpau
}

// ClearCARemarks clears the value of the "CA_Remarks" field.
func (rpau *RecommendationsPMPAApplicationsUpdate) ClearCARemarks() *RecommendationsPMPAApplicationsUpdate {
	rpau.mutation.ClearCARemarks()
	return rpau
}

// SetNORecommendations sets the "NO_Recommendations" field.
func (rpau *RecommendationsPMPAApplicationsUpdate) SetNORecommendations(s string) *RecommendationsPMPAApplicationsUpdate {
	rpau.mutation.SetNORecommendations(s)
	return rpau
}

// SetNillableNORecommendations sets the "NO_Recommendations" field if the given value is not nil.
func (rpau *RecommendationsPMPAApplicationsUpdate) SetNillableNORecommendations(s *string) *RecommendationsPMPAApplicationsUpdate {
	if s != nil {
		rpau.SetNORecommendations(*s)
	}
	return rpau
}

// ClearNORecommendations clears the value of the "NO_Recommendations" field.
func (rpau *RecommendationsPMPAApplicationsUpdate) ClearNORecommendations() *RecommendationsPMPAApplicationsUpdate {
	rpau.mutation.ClearNORecommendations()
	return rpau
}

// SetNOUpdatedAt sets the "NO_UpdatedAt" field.
func (rpau *RecommendationsPMPAApplicationsUpdate) SetNOUpdatedAt(t time.Time) *RecommendationsPMPAApplicationsUpdate {
	rpau.mutation.SetNOUpdatedAt(t)
	return rpau
}

// SetNillableNOUpdatedAt sets the "NO_UpdatedAt" field if the given value is not nil.
func (rpau *RecommendationsPMPAApplicationsUpdate) SetNillableNOUpdatedAt(t *time.Time) *RecommendationsPMPAApplicationsUpdate {
	if t != nil {
		rpau.SetNOUpdatedAt(*t)
	}
	return rpau
}

// ClearNOUpdatedAt clears the value of the "NO_UpdatedAt" field.
func (rpau *RecommendationsPMPAApplicationsUpdate) ClearNOUpdatedAt() *RecommendationsPMPAApplicationsUpdate {
	rpau.mutation.ClearNOUpdatedAt()
	return rpau
}

// SetNOUserName sets the "NO_UserName" field.
func (rpau *RecommendationsPMPAApplicationsUpdate) SetNOUserName(s string) *RecommendationsPMPAApplicationsUpdate {
	rpau.mutation.SetNOUserName(s)
	return rpau
}

// SetNillableNOUserName sets the "NO_UserName" field if the given value is not nil.
func (rpau *RecommendationsPMPAApplicationsUpdate) SetNillableNOUserName(s *string) *RecommendationsPMPAApplicationsUpdate {
	if s != nil {
		rpau.SetNOUserName(*s)
	}
	return rpau
}

// ClearNOUserName clears the value of the "NO_UserName" field.
func (rpau *RecommendationsPMPAApplicationsUpdate) ClearNOUserName() *RecommendationsPMPAApplicationsUpdate {
	rpau.mutation.ClearNOUserName()
	return rpau
}

// SetNORemarks sets the "NO_Remarks" field.
func (rpau *RecommendationsPMPAApplicationsUpdate) SetNORemarks(s string) *RecommendationsPMPAApplicationsUpdate {
	rpau.mutation.SetNORemarks(s)
	return rpau
}

// SetNillableNORemarks sets the "NO_Remarks" field if the given value is not nil.
func (rpau *RecommendationsPMPAApplicationsUpdate) SetNillableNORemarks(s *string) *RecommendationsPMPAApplicationsUpdate {
	if s != nil {
		rpau.SetNORemarks(*s)
	}
	return rpau
}

// ClearNORemarks clears the value of the "NO_Remarks" field.
func (rpau *RecommendationsPMPAApplicationsUpdate) ClearNORemarks() *RecommendationsPMPAApplicationsUpdate {
	rpau.mutation.ClearNORemarks()
	return rpau
}

// SetApplicationStatus sets the "ApplicationStatus" field.
func (rpau *RecommendationsPMPAApplicationsUpdate) SetApplicationStatus(s string) *RecommendationsPMPAApplicationsUpdate {
	rpau.mutation.SetApplicationStatus(s)
	return rpau
}

// SetNillableApplicationStatus sets the "ApplicationStatus" field if the given value is not nil.
func (rpau *RecommendationsPMPAApplicationsUpdate) SetNillableApplicationStatus(s *string) *RecommendationsPMPAApplicationsUpdate {
	if s != nil {
		rpau.SetApplicationStatus(*s)
	}
	return rpau
}

// ClearApplicationStatus clears the value of the "ApplicationStatus" field.
func (rpau *RecommendationsPMPAApplicationsUpdate) ClearApplicationStatus() *RecommendationsPMPAApplicationsUpdate {
	rpau.mutation.ClearApplicationStatus()
	return rpau
}

// SetUpdatedAt sets the "UpdatedAt" field.
func (rpau *RecommendationsPMPAApplicationsUpdate) SetUpdatedAt(t time.Time) *RecommendationsPMPAApplicationsUpdate {
	rpau.mutation.SetUpdatedAt(t)
	return rpau
}

// SetNillableUpdatedAt sets the "UpdatedAt" field if the given value is not nil.
func (rpau *RecommendationsPMPAApplicationsUpdate) SetNillableUpdatedAt(t *time.Time) *RecommendationsPMPAApplicationsUpdate {
	if t != nil {
		rpau.SetUpdatedAt(*t)
	}
	return rpau
}

// ClearUpdatedAt clears the value of the "UpdatedAt" field.
func (rpau *RecommendationsPMPAApplicationsUpdate) ClearUpdatedAt() *RecommendationsPMPAApplicationsUpdate {
	rpau.mutation.ClearUpdatedAt()
	return rpau
}

// SetUpdatedBy sets the "UpdatedBy" field.
func (rpau *RecommendationsPMPAApplicationsUpdate) SetUpdatedBy(s string) *RecommendationsPMPAApplicationsUpdate {
	rpau.mutation.SetUpdatedBy(s)
	return rpau
}

// SetNillableUpdatedBy sets the "UpdatedBy" field if the given value is not nil.
func (rpau *RecommendationsPMPAApplicationsUpdate) SetNillableUpdatedBy(s *string) *RecommendationsPMPAApplicationsUpdate {
	if s != nil {
		rpau.SetUpdatedBy(*s)
	}
	return rpau
}

// ClearUpdatedBy clears the value of the "UpdatedBy" field.
func (rpau *RecommendationsPMPAApplicationsUpdate) ClearUpdatedBy() *RecommendationsPMPAApplicationsUpdate {
	rpau.mutation.ClearUpdatedBy()
	return rpau
}

// SetGenerateHallTicketFlag sets the "GenerateHallTicketFlag" field.
func (rpau *RecommendationsPMPAApplicationsUpdate) SetGenerateHallTicketFlag(b bool) *RecommendationsPMPAApplicationsUpdate {
	rpau.mutation.SetGenerateHallTicketFlag(b)
	return rpau
}

// SetNillableGenerateHallTicketFlag sets the "GenerateHallTicketFlag" field if the given value is not nil.
func (rpau *RecommendationsPMPAApplicationsUpdate) SetNillableGenerateHallTicketFlag(b *bool) *RecommendationsPMPAApplicationsUpdate {
	if b != nil {
		rpau.SetGenerateHallTicketFlag(*b)
	}
	return rpau
}

// ClearGenerateHallTicketFlag clears the value of the "GenerateHallTicketFlag" field.
func (rpau *RecommendationsPMPAApplicationsUpdate) ClearGenerateHallTicketFlag() *RecommendationsPMPAApplicationsUpdate {
	rpau.mutation.ClearGenerateHallTicketFlag()
	return rpau
}

// SetApplnRefID sets the "ApplnRef" edge to the Exam_Applications_PMPA entity by ID.
func (rpau *RecommendationsPMPAApplicationsUpdate) SetApplnRefID(id int64) *RecommendationsPMPAApplicationsUpdate {
	rpau.mutation.SetApplnRefID(id)
	return rpau
}

// SetNillableApplnRefID sets the "ApplnRef" edge to the Exam_Applications_PMPA entity by ID if the given value is not nil.
func (rpau *RecommendationsPMPAApplicationsUpdate) SetNillableApplnRefID(id *int64) *RecommendationsPMPAApplicationsUpdate {
	if id != nil {
		rpau = rpau.SetApplnRefID(*id)
	}
	return rpau
}

// SetApplnRef sets the "ApplnRef" edge to the Exam_Applications_PMPA entity.
func (rpau *RecommendationsPMPAApplicationsUpdate) SetApplnRef(e *Exam_Applications_PMPA) *RecommendationsPMPAApplicationsUpdate {
	return rpau.SetApplnRefID(e.ID)
}

// Mutation returns the RecommendationsPMPAApplicationsMutation object of the builder.
func (rpau *RecommendationsPMPAApplicationsUpdate) Mutation() *RecommendationsPMPAApplicationsMutation {
	return rpau.mutation
}

// ClearApplnRef clears the "ApplnRef" edge to the Exam_Applications_PMPA entity.
func (rpau *RecommendationsPMPAApplicationsUpdate) ClearApplnRef() *RecommendationsPMPAApplicationsUpdate {
	rpau.mutation.ClearApplnRef()
	return rpau
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (rpau *RecommendationsPMPAApplicationsUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, rpau.sqlSave, rpau.mutation, rpau.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rpau *RecommendationsPMPAApplicationsUpdate) SaveX(ctx context.Context) int {
	affected, err := rpau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (rpau *RecommendationsPMPAApplicationsUpdate) Exec(ctx context.Context) error {
	_, err := rpau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rpau *RecommendationsPMPAApplicationsUpdate) ExecX(ctx context.Context) {
	if err := rpau.Exec(ctx); err != nil {
		panic(err)
	}
}

func (rpau *RecommendationsPMPAApplicationsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(recommendationspmpaapplications.Table, recommendationspmpaapplications.Columns, sqlgraph.NewFieldSpec(recommendationspmpaapplications.FieldID, field.TypeInt64))
	if ps := rpau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rpau.mutation.ApplicationID(); ok {
		_spec.SetField(recommendationspmpaapplications.FieldApplicationID, field.TypeInt64, value)
	}
	if value, ok := rpau.mutation.AddedApplicationID(); ok {
		_spec.AddField(recommendationspmpaapplications.FieldApplicationID, field.TypeInt64, value)
	}
	if rpau.mutation.ApplicationIDCleared() {
		_spec.ClearField(recommendationspmpaapplications.FieldApplicationID, field.TypeInt64)
	}
	if value, ok := rpau.mutation.EmployeeID(); ok {
		_spec.SetField(recommendationspmpaapplications.FieldEmployeeID, field.TypeInt64, value)
	}
	if value, ok := rpau.mutation.AddedEmployeeID(); ok {
		_spec.AddField(recommendationspmpaapplications.FieldEmployeeID, field.TypeInt64, value)
	}
	if rpau.mutation.EmployeeIDCleared() {
		_spec.ClearField(recommendationspmpaapplications.FieldEmployeeID, field.TypeInt64)
	}
	if value, ok := rpau.mutation.ExamNameCode(); ok {
		_spec.SetField(recommendationspmpaapplications.FieldExamNameCode, field.TypeString, value)
	}
	if rpau.mutation.ExamNameCodeCleared() {
		_spec.ClearField(recommendationspmpaapplications.FieldExamNameCode, field.TypeString)
	}
	if value, ok := rpau.mutation.ExamYear(); ok {
		_spec.SetField(recommendationspmpaapplications.FieldExamYear, field.TypeString, value)
	}
	if rpau.mutation.ExamYearCleared() {
		_spec.ClearField(recommendationspmpaapplications.FieldExamYear, field.TypeString)
	}
	if value, ok := rpau.mutation.VacancyYear(); ok {
		_spec.SetField(recommendationspmpaapplications.FieldVacancyYear, field.TypeInt32, value)
	}
	if value, ok := rpau.mutation.AddedVacancyYear(); ok {
		_spec.AddField(recommendationspmpaapplications.FieldVacancyYear, field.TypeInt32, value)
	}
	if rpau.mutation.VacancyYearCleared() {
		_spec.ClearField(recommendationspmpaapplications.FieldVacancyYear, field.TypeInt32)
	}
	if value, ok := rpau.mutation.CARecommendations(); ok {
		_spec.SetField(recommendationspmpaapplications.FieldCARecommendations, field.TypeString, value)
	}
	if rpau.mutation.CARecommendationsCleared() {
		_spec.ClearField(recommendationspmpaapplications.FieldCARecommendations, field.TypeString)
	}
	if value, ok := rpau.mutation.CAUpdatedAt(); ok {
		_spec.SetField(recommendationspmpaapplications.FieldCAUpdatedAt, field.TypeTime, value)
	}
	if rpau.mutation.CAUpdatedAtCleared() {
		_spec.ClearField(recommendationspmpaapplications.FieldCAUpdatedAt, field.TypeTime)
	}
	if value, ok := rpau.mutation.CAUserName(); ok {
		_spec.SetField(recommendationspmpaapplications.FieldCAUserName, field.TypeString, value)
	}
	if rpau.mutation.CAUserNameCleared() {
		_spec.ClearField(recommendationspmpaapplications.FieldCAUserName, field.TypeString)
	}
	if value, ok := rpau.mutation.CARemarks(); ok {
		_spec.SetField(recommendationspmpaapplications.FieldCARemarks, field.TypeString, value)
	}
	if rpau.mutation.CARemarksCleared() {
		_spec.ClearField(recommendationspmpaapplications.FieldCARemarks, field.TypeString)
	}
	if value, ok := rpau.mutation.NORecommendations(); ok {
		_spec.SetField(recommendationspmpaapplications.FieldNORecommendations, field.TypeString, value)
	}
	if rpau.mutation.NORecommendationsCleared() {
		_spec.ClearField(recommendationspmpaapplications.FieldNORecommendations, field.TypeString)
	}
	if value, ok := rpau.mutation.NOUpdatedAt(); ok {
		_spec.SetField(recommendationspmpaapplications.FieldNOUpdatedAt, field.TypeTime, value)
	}
	if rpau.mutation.NOUpdatedAtCleared() {
		_spec.ClearField(recommendationspmpaapplications.FieldNOUpdatedAt, field.TypeTime)
	}
	if value, ok := rpau.mutation.NOUserName(); ok {
		_spec.SetField(recommendationspmpaapplications.FieldNOUserName, field.TypeString, value)
	}
	if rpau.mutation.NOUserNameCleared() {
		_spec.ClearField(recommendationspmpaapplications.FieldNOUserName, field.TypeString)
	}
	if value, ok := rpau.mutation.NORemarks(); ok {
		_spec.SetField(recommendationspmpaapplications.FieldNORemarks, field.TypeString, value)
	}
	if rpau.mutation.NORemarksCleared() {
		_spec.ClearField(recommendationspmpaapplications.FieldNORemarks, field.TypeString)
	}
	if value, ok := rpau.mutation.ApplicationStatus(); ok {
		_spec.SetField(recommendationspmpaapplications.FieldApplicationStatus, field.TypeString, value)
	}
	if rpau.mutation.ApplicationStatusCleared() {
		_spec.ClearField(recommendationspmpaapplications.FieldApplicationStatus, field.TypeString)
	}
	if value, ok := rpau.mutation.UpdatedAt(); ok {
		_spec.SetField(recommendationspmpaapplications.FieldUpdatedAt, field.TypeTime, value)
	}
	if rpau.mutation.UpdatedAtCleared() {
		_spec.ClearField(recommendationspmpaapplications.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := rpau.mutation.UpdatedBy(); ok {
		_spec.SetField(recommendationspmpaapplications.FieldUpdatedBy, field.TypeString, value)
	}
	if rpau.mutation.UpdatedByCleared() {
		_spec.ClearField(recommendationspmpaapplications.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := rpau.mutation.GenerateHallTicketFlag(); ok {
		_spec.SetField(recommendationspmpaapplications.FieldGenerateHallTicketFlag, field.TypeBool, value)
	}
	if rpau.mutation.GenerateHallTicketFlagCleared() {
		_spec.ClearField(recommendationspmpaapplications.FieldGenerateHallTicketFlag, field.TypeBool)
	}
	if rpau.mutation.ApplnRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   recommendationspmpaapplications.ApplnRefTable,
			Columns: []string{recommendationspmpaapplications.ApplnRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_pmpa.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rpau.mutation.ApplnRefIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   recommendationspmpaapplications.ApplnRefTable,
			Columns: []string{recommendationspmpaapplications.ApplnRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_pmpa.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, rpau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{recommendationspmpaapplications.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	rpau.mutation.done = true
	return n, nil
}

// RecommendationsPMPAApplicationsUpdateOne is the builder for updating a single RecommendationsPMPAApplications entity.
type RecommendationsPMPAApplicationsUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *RecommendationsPMPAApplicationsMutation
}

// SetApplicationID sets the "ApplicationID" field.
func (rpauo *RecommendationsPMPAApplicationsUpdateOne) SetApplicationID(i int64) *RecommendationsPMPAApplicationsUpdateOne {
	rpauo.mutation.ResetApplicationID()
	rpauo.mutation.SetApplicationID(i)
	return rpauo
}

// SetNillableApplicationID sets the "ApplicationID" field if the given value is not nil.
func (rpauo *RecommendationsPMPAApplicationsUpdateOne) SetNillableApplicationID(i *int64) *RecommendationsPMPAApplicationsUpdateOne {
	if i != nil {
		rpauo.SetApplicationID(*i)
	}
	return rpauo
}

// AddApplicationID adds i to the "ApplicationID" field.
func (rpauo *RecommendationsPMPAApplicationsUpdateOne) AddApplicationID(i int64) *RecommendationsPMPAApplicationsUpdateOne {
	rpauo.mutation.AddApplicationID(i)
	return rpauo
}

// ClearApplicationID clears the value of the "ApplicationID" field.
func (rpauo *RecommendationsPMPAApplicationsUpdateOne) ClearApplicationID() *RecommendationsPMPAApplicationsUpdateOne {
	rpauo.mutation.ClearApplicationID()
	return rpauo
}

// SetEmployeeID sets the "EmployeeID" field.
func (rpauo *RecommendationsPMPAApplicationsUpdateOne) SetEmployeeID(i int64) *RecommendationsPMPAApplicationsUpdateOne {
	rpauo.mutation.ResetEmployeeID()
	rpauo.mutation.SetEmployeeID(i)
	return rpauo
}

// SetNillableEmployeeID sets the "EmployeeID" field if the given value is not nil.
func (rpauo *RecommendationsPMPAApplicationsUpdateOne) SetNillableEmployeeID(i *int64) *RecommendationsPMPAApplicationsUpdateOne {
	if i != nil {
		rpauo.SetEmployeeID(*i)
	}
	return rpauo
}

// AddEmployeeID adds i to the "EmployeeID" field.
func (rpauo *RecommendationsPMPAApplicationsUpdateOne) AddEmployeeID(i int64) *RecommendationsPMPAApplicationsUpdateOne {
	rpauo.mutation.AddEmployeeID(i)
	return rpauo
}

// ClearEmployeeID clears the value of the "EmployeeID" field.
func (rpauo *RecommendationsPMPAApplicationsUpdateOne) ClearEmployeeID() *RecommendationsPMPAApplicationsUpdateOne {
	rpauo.mutation.ClearEmployeeID()
	return rpauo
}

// SetExamNameCode sets the "ExamNameCode" field.
func (rpauo *RecommendationsPMPAApplicationsUpdateOne) SetExamNameCode(s string) *RecommendationsPMPAApplicationsUpdateOne {
	rpauo.mutation.SetExamNameCode(s)
	return rpauo
}

// SetNillableExamNameCode sets the "ExamNameCode" field if the given value is not nil.
func (rpauo *RecommendationsPMPAApplicationsUpdateOne) SetNillableExamNameCode(s *string) *RecommendationsPMPAApplicationsUpdateOne {
	if s != nil {
		rpauo.SetExamNameCode(*s)
	}
	return rpauo
}

// ClearExamNameCode clears the value of the "ExamNameCode" field.
func (rpauo *RecommendationsPMPAApplicationsUpdateOne) ClearExamNameCode() *RecommendationsPMPAApplicationsUpdateOne {
	rpauo.mutation.ClearExamNameCode()
	return rpauo
}

// SetExamYear sets the "ExamYear" field.
func (rpauo *RecommendationsPMPAApplicationsUpdateOne) SetExamYear(s string) *RecommendationsPMPAApplicationsUpdateOne {
	rpauo.mutation.SetExamYear(s)
	return rpauo
}

// SetNillableExamYear sets the "ExamYear" field if the given value is not nil.
func (rpauo *RecommendationsPMPAApplicationsUpdateOne) SetNillableExamYear(s *string) *RecommendationsPMPAApplicationsUpdateOne {
	if s != nil {
		rpauo.SetExamYear(*s)
	}
	return rpauo
}

// ClearExamYear clears the value of the "ExamYear" field.
func (rpauo *RecommendationsPMPAApplicationsUpdateOne) ClearExamYear() *RecommendationsPMPAApplicationsUpdateOne {
	rpauo.mutation.ClearExamYear()
	return rpauo
}

// SetVacancyYear sets the "VacancyYear" field.
func (rpauo *RecommendationsPMPAApplicationsUpdateOne) SetVacancyYear(i int32) *RecommendationsPMPAApplicationsUpdateOne {
	rpauo.mutation.ResetVacancyYear()
	rpauo.mutation.SetVacancyYear(i)
	return rpauo
}

// SetNillableVacancyYear sets the "VacancyYear" field if the given value is not nil.
func (rpauo *RecommendationsPMPAApplicationsUpdateOne) SetNillableVacancyYear(i *int32) *RecommendationsPMPAApplicationsUpdateOne {
	if i != nil {
		rpauo.SetVacancyYear(*i)
	}
	return rpauo
}

// AddVacancyYear adds i to the "VacancyYear" field.
func (rpauo *RecommendationsPMPAApplicationsUpdateOne) AddVacancyYear(i int32) *RecommendationsPMPAApplicationsUpdateOne {
	rpauo.mutation.AddVacancyYear(i)
	return rpauo
}

// ClearVacancyYear clears the value of the "VacancyYear" field.
func (rpauo *RecommendationsPMPAApplicationsUpdateOne) ClearVacancyYear() *RecommendationsPMPAApplicationsUpdateOne {
	rpauo.mutation.ClearVacancyYear()
	return rpauo
}

// SetCARecommendations sets the "CA_Recommendations" field.
func (rpauo *RecommendationsPMPAApplicationsUpdateOne) SetCARecommendations(s string) *RecommendationsPMPAApplicationsUpdateOne {
	rpauo.mutation.SetCARecommendations(s)
	return rpauo
}

// SetNillableCARecommendations sets the "CA_Recommendations" field if the given value is not nil.
func (rpauo *RecommendationsPMPAApplicationsUpdateOne) SetNillableCARecommendations(s *string) *RecommendationsPMPAApplicationsUpdateOne {
	if s != nil {
		rpauo.SetCARecommendations(*s)
	}
	return rpauo
}

// ClearCARecommendations clears the value of the "CA_Recommendations" field.
func (rpauo *RecommendationsPMPAApplicationsUpdateOne) ClearCARecommendations() *RecommendationsPMPAApplicationsUpdateOne {
	rpauo.mutation.ClearCARecommendations()
	return rpauo
}

// SetCAUpdatedAt sets the "CA_UpdatedAt" field.
func (rpauo *RecommendationsPMPAApplicationsUpdateOne) SetCAUpdatedAt(t time.Time) *RecommendationsPMPAApplicationsUpdateOne {
	rpauo.mutation.SetCAUpdatedAt(t)
	return rpauo
}

// SetNillableCAUpdatedAt sets the "CA_UpdatedAt" field if the given value is not nil.
func (rpauo *RecommendationsPMPAApplicationsUpdateOne) SetNillableCAUpdatedAt(t *time.Time) *RecommendationsPMPAApplicationsUpdateOne {
	if t != nil {
		rpauo.SetCAUpdatedAt(*t)
	}
	return rpauo
}

// ClearCAUpdatedAt clears the value of the "CA_UpdatedAt" field.
func (rpauo *RecommendationsPMPAApplicationsUpdateOne) ClearCAUpdatedAt() *RecommendationsPMPAApplicationsUpdateOne {
	rpauo.mutation.ClearCAUpdatedAt()
	return rpauo
}

// SetCAUserName sets the "CA_UserName" field.
func (rpauo *RecommendationsPMPAApplicationsUpdateOne) SetCAUserName(s string) *RecommendationsPMPAApplicationsUpdateOne {
	rpauo.mutation.SetCAUserName(s)
	return rpauo
}

// SetNillableCAUserName sets the "CA_UserName" field if the given value is not nil.
func (rpauo *RecommendationsPMPAApplicationsUpdateOne) SetNillableCAUserName(s *string) *RecommendationsPMPAApplicationsUpdateOne {
	if s != nil {
		rpauo.SetCAUserName(*s)
	}
	return rpauo
}

// ClearCAUserName clears the value of the "CA_UserName" field.
func (rpauo *RecommendationsPMPAApplicationsUpdateOne) ClearCAUserName() *RecommendationsPMPAApplicationsUpdateOne {
	rpauo.mutation.ClearCAUserName()
	return rpauo
}

// SetCARemarks sets the "CA_Remarks" field.
func (rpauo *RecommendationsPMPAApplicationsUpdateOne) SetCARemarks(s string) *RecommendationsPMPAApplicationsUpdateOne {
	rpauo.mutation.SetCARemarks(s)
	return rpauo
}

// SetNillableCARemarks sets the "CA_Remarks" field if the given value is not nil.
func (rpauo *RecommendationsPMPAApplicationsUpdateOne) SetNillableCARemarks(s *string) *RecommendationsPMPAApplicationsUpdateOne {
	if s != nil {
		rpauo.SetCARemarks(*s)
	}
	return rpauo
}

// ClearCARemarks clears the value of the "CA_Remarks" field.
func (rpauo *RecommendationsPMPAApplicationsUpdateOne) ClearCARemarks() *RecommendationsPMPAApplicationsUpdateOne {
	rpauo.mutation.ClearCARemarks()
	return rpauo
}

// SetNORecommendations sets the "NO_Recommendations" field.
func (rpauo *RecommendationsPMPAApplicationsUpdateOne) SetNORecommendations(s string) *RecommendationsPMPAApplicationsUpdateOne {
	rpauo.mutation.SetNORecommendations(s)
	return rpauo
}

// SetNillableNORecommendations sets the "NO_Recommendations" field if the given value is not nil.
func (rpauo *RecommendationsPMPAApplicationsUpdateOne) SetNillableNORecommendations(s *string) *RecommendationsPMPAApplicationsUpdateOne {
	if s != nil {
		rpauo.SetNORecommendations(*s)
	}
	return rpauo
}

// ClearNORecommendations clears the value of the "NO_Recommendations" field.
func (rpauo *RecommendationsPMPAApplicationsUpdateOne) ClearNORecommendations() *RecommendationsPMPAApplicationsUpdateOne {
	rpauo.mutation.ClearNORecommendations()
	return rpauo
}

// SetNOUpdatedAt sets the "NO_UpdatedAt" field.
func (rpauo *RecommendationsPMPAApplicationsUpdateOne) SetNOUpdatedAt(t time.Time) *RecommendationsPMPAApplicationsUpdateOne {
	rpauo.mutation.SetNOUpdatedAt(t)
	return rpauo
}

// SetNillableNOUpdatedAt sets the "NO_UpdatedAt" field if the given value is not nil.
func (rpauo *RecommendationsPMPAApplicationsUpdateOne) SetNillableNOUpdatedAt(t *time.Time) *RecommendationsPMPAApplicationsUpdateOne {
	if t != nil {
		rpauo.SetNOUpdatedAt(*t)
	}
	return rpauo
}

// ClearNOUpdatedAt clears the value of the "NO_UpdatedAt" field.
func (rpauo *RecommendationsPMPAApplicationsUpdateOne) ClearNOUpdatedAt() *RecommendationsPMPAApplicationsUpdateOne {
	rpauo.mutation.ClearNOUpdatedAt()
	return rpauo
}

// SetNOUserName sets the "NO_UserName" field.
func (rpauo *RecommendationsPMPAApplicationsUpdateOne) SetNOUserName(s string) *RecommendationsPMPAApplicationsUpdateOne {
	rpauo.mutation.SetNOUserName(s)
	return rpauo
}

// SetNillableNOUserName sets the "NO_UserName" field if the given value is not nil.
func (rpauo *RecommendationsPMPAApplicationsUpdateOne) SetNillableNOUserName(s *string) *RecommendationsPMPAApplicationsUpdateOne {
	if s != nil {
		rpauo.SetNOUserName(*s)
	}
	return rpauo
}

// ClearNOUserName clears the value of the "NO_UserName" field.
func (rpauo *RecommendationsPMPAApplicationsUpdateOne) ClearNOUserName() *RecommendationsPMPAApplicationsUpdateOne {
	rpauo.mutation.ClearNOUserName()
	return rpauo
}

// SetNORemarks sets the "NO_Remarks" field.
func (rpauo *RecommendationsPMPAApplicationsUpdateOne) SetNORemarks(s string) *RecommendationsPMPAApplicationsUpdateOne {
	rpauo.mutation.SetNORemarks(s)
	return rpauo
}

// SetNillableNORemarks sets the "NO_Remarks" field if the given value is not nil.
func (rpauo *RecommendationsPMPAApplicationsUpdateOne) SetNillableNORemarks(s *string) *RecommendationsPMPAApplicationsUpdateOne {
	if s != nil {
		rpauo.SetNORemarks(*s)
	}
	return rpauo
}

// ClearNORemarks clears the value of the "NO_Remarks" field.
func (rpauo *RecommendationsPMPAApplicationsUpdateOne) ClearNORemarks() *RecommendationsPMPAApplicationsUpdateOne {
	rpauo.mutation.ClearNORemarks()
	return rpauo
}

// SetApplicationStatus sets the "ApplicationStatus" field.
func (rpauo *RecommendationsPMPAApplicationsUpdateOne) SetApplicationStatus(s string) *RecommendationsPMPAApplicationsUpdateOne {
	rpauo.mutation.SetApplicationStatus(s)
	return rpauo
}

// SetNillableApplicationStatus sets the "ApplicationStatus" field if the given value is not nil.
func (rpauo *RecommendationsPMPAApplicationsUpdateOne) SetNillableApplicationStatus(s *string) *RecommendationsPMPAApplicationsUpdateOne {
	if s != nil {
		rpauo.SetApplicationStatus(*s)
	}
	return rpauo
}

// ClearApplicationStatus clears the value of the "ApplicationStatus" field.
func (rpauo *RecommendationsPMPAApplicationsUpdateOne) ClearApplicationStatus() *RecommendationsPMPAApplicationsUpdateOne {
	rpauo.mutation.ClearApplicationStatus()
	return rpauo
}

// SetUpdatedAt sets the "UpdatedAt" field.
func (rpauo *RecommendationsPMPAApplicationsUpdateOne) SetUpdatedAt(t time.Time) *RecommendationsPMPAApplicationsUpdateOne {
	rpauo.mutation.SetUpdatedAt(t)
	return rpauo
}

// SetNillableUpdatedAt sets the "UpdatedAt" field if the given value is not nil.
func (rpauo *RecommendationsPMPAApplicationsUpdateOne) SetNillableUpdatedAt(t *time.Time) *RecommendationsPMPAApplicationsUpdateOne {
	if t != nil {
		rpauo.SetUpdatedAt(*t)
	}
	return rpauo
}

// ClearUpdatedAt clears the value of the "UpdatedAt" field.
func (rpauo *RecommendationsPMPAApplicationsUpdateOne) ClearUpdatedAt() *RecommendationsPMPAApplicationsUpdateOne {
	rpauo.mutation.ClearUpdatedAt()
	return rpauo
}

// SetUpdatedBy sets the "UpdatedBy" field.
func (rpauo *RecommendationsPMPAApplicationsUpdateOne) SetUpdatedBy(s string) *RecommendationsPMPAApplicationsUpdateOne {
	rpauo.mutation.SetUpdatedBy(s)
	return rpauo
}

// SetNillableUpdatedBy sets the "UpdatedBy" field if the given value is not nil.
func (rpauo *RecommendationsPMPAApplicationsUpdateOne) SetNillableUpdatedBy(s *string) *RecommendationsPMPAApplicationsUpdateOne {
	if s != nil {
		rpauo.SetUpdatedBy(*s)
	}
	return rpauo
}

// ClearUpdatedBy clears the value of the "UpdatedBy" field.
func (rpauo *RecommendationsPMPAApplicationsUpdateOne) ClearUpdatedBy() *RecommendationsPMPAApplicationsUpdateOne {
	rpauo.mutation.ClearUpdatedBy()
	return rpauo
}

// SetGenerateHallTicketFlag sets the "GenerateHallTicketFlag" field.
func (rpauo *RecommendationsPMPAApplicationsUpdateOne) SetGenerateHallTicketFlag(b bool) *RecommendationsPMPAApplicationsUpdateOne {
	rpauo.mutation.SetGenerateHallTicketFlag(b)
	return rpauo
}

// SetNillableGenerateHallTicketFlag sets the "GenerateHallTicketFlag" field if the given value is not nil.
func (rpauo *RecommendationsPMPAApplicationsUpdateOne) SetNillableGenerateHallTicketFlag(b *bool) *RecommendationsPMPAApplicationsUpdateOne {
	if b != nil {
		rpauo.SetGenerateHallTicketFlag(*b)
	}
	return rpauo
}

// ClearGenerateHallTicketFlag clears the value of the "GenerateHallTicketFlag" field.
func (rpauo *RecommendationsPMPAApplicationsUpdateOne) ClearGenerateHallTicketFlag() *RecommendationsPMPAApplicationsUpdateOne {
	rpauo.mutation.ClearGenerateHallTicketFlag()
	return rpauo
}

// SetApplnRefID sets the "ApplnRef" edge to the Exam_Applications_PMPA entity by ID.
func (rpauo *RecommendationsPMPAApplicationsUpdateOne) SetApplnRefID(id int64) *RecommendationsPMPAApplicationsUpdateOne {
	rpauo.mutation.SetApplnRefID(id)
	return rpauo
}

// SetNillableApplnRefID sets the "ApplnRef" edge to the Exam_Applications_PMPA entity by ID if the given value is not nil.
func (rpauo *RecommendationsPMPAApplicationsUpdateOne) SetNillableApplnRefID(id *int64) *RecommendationsPMPAApplicationsUpdateOne {
	if id != nil {
		rpauo = rpauo.SetApplnRefID(*id)
	}
	return rpauo
}

// SetApplnRef sets the "ApplnRef" edge to the Exam_Applications_PMPA entity.
func (rpauo *RecommendationsPMPAApplicationsUpdateOne) SetApplnRef(e *Exam_Applications_PMPA) *RecommendationsPMPAApplicationsUpdateOne {
	return rpauo.SetApplnRefID(e.ID)
}

// Mutation returns the RecommendationsPMPAApplicationsMutation object of the builder.
func (rpauo *RecommendationsPMPAApplicationsUpdateOne) Mutation() *RecommendationsPMPAApplicationsMutation {
	return rpauo.mutation
}

// ClearApplnRef clears the "ApplnRef" edge to the Exam_Applications_PMPA entity.
func (rpauo *RecommendationsPMPAApplicationsUpdateOne) ClearApplnRef() *RecommendationsPMPAApplicationsUpdateOne {
	rpauo.mutation.ClearApplnRef()
	return rpauo
}

// Where appends a list predicates to the RecommendationsPMPAApplicationsUpdate builder.
func (rpauo *RecommendationsPMPAApplicationsUpdateOne) Where(ps ...predicate.RecommendationsPMPAApplications) *RecommendationsPMPAApplicationsUpdateOne {
	rpauo.mutation.Where(ps...)
	return rpauo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (rpauo *RecommendationsPMPAApplicationsUpdateOne) Select(field string, fields ...string) *RecommendationsPMPAApplicationsUpdateOne {
	rpauo.fields = append([]string{field}, fields...)
	return rpauo
}

// Save executes the query and returns the updated RecommendationsPMPAApplications entity.
func (rpauo *RecommendationsPMPAApplicationsUpdateOne) Save(ctx context.Context) (*RecommendationsPMPAApplications, error) {
	return withHooks(ctx, rpauo.sqlSave, rpauo.mutation, rpauo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rpauo *RecommendationsPMPAApplicationsUpdateOne) SaveX(ctx context.Context) *RecommendationsPMPAApplications {
	node, err := rpauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (rpauo *RecommendationsPMPAApplicationsUpdateOne) Exec(ctx context.Context) error {
	_, err := rpauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rpauo *RecommendationsPMPAApplicationsUpdateOne) ExecX(ctx context.Context) {
	if err := rpauo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (rpauo *RecommendationsPMPAApplicationsUpdateOne) sqlSave(ctx context.Context) (_node *RecommendationsPMPAApplications, err error) {
	_spec := sqlgraph.NewUpdateSpec(recommendationspmpaapplications.Table, recommendationspmpaapplications.Columns, sqlgraph.NewFieldSpec(recommendationspmpaapplications.FieldID, field.TypeInt64))
	id, ok := rpauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "RecommendationsPMPAApplications.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := rpauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, recommendationspmpaapplications.FieldID)
		for _, f := range fields {
			if !recommendationspmpaapplications.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != recommendationspmpaapplications.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := rpauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rpauo.mutation.ApplicationID(); ok {
		_spec.SetField(recommendationspmpaapplications.FieldApplicationID, field.TypeInt64, value)
	}
	if value, ok := rpauo.mutation.AddedApplicationID(); ok {
		_spec.AddField(recommendationspmpaapplications.FieldApplicationID, field.TypeInt64, value)
	}
	if rpauo.mutation.ApplicationIDCleared() {
		_spec.ClearField(recommendationspmpaapplications.FieldApplicationID, field.TypeInt64)
	}
	if value, ok := rpauo.mutation.EmployeeID(); ok {
		_spec.SetField(recommendationspmpaapplications.FieldEmployeeID, field.TypeInt64, value)
	}
	if value, ok := rpauo.mutation.AddedEmployeeID(); ok {
		_spec.AddField(recommendationspmpaapplications.FieldEmployeeID, field.TypeInt64, value)
	}
	if rpauo.mutation.EmployeeIDCleared() {
		_spec.ClearField(recommendationspmpaapplications.FieldEmployeeID, field.TypeInt64)
	}
	if value, ok := rpauo.mutation.ExamNameCode(); ok {
		_spec.SetField(recommendationspmpaapplications.FieldExamNameCode, field.TypeString, value)
	}
	if rpauo.mutation.ExamNameCodeCleared() {
		_spec.ClearField(recommendationspmpaapplications.FieldExamNameCode, field.TypeString)
	}
	if value, ok := rpauo.mutation.ExamYear(); ok {
		_spec.SetField(recommendationspmpaapplications.FieldExamYear, field.TypeString, value)
	}
	if rpauo.mutation.ExamYearCleared() {
		_spec.ClearField(recommendationspmpaapplications.FieldExamYear, field.TypeString)
	}
	if value, ok := rpauo.mutation.VacancyYear(); ok {
		_spec.SetField(recommendationspmpaapplications.FieldVacancyYear, field.TypeInt32, value)
	}
	if value, ok := rpauo.mutation.AddedVacancyYear(); ok {
		_spec.AddField(recommendationspmpaapplications.FieldVacancyYear, field.TypeInt32, value)
	}
	if rpauo.mutation.VacancyYearCleared() {
		_spec.ClearField(recommendationspmpaapplications.FieldVacancyYear, field.TypeInt32)
	}
	if value, ok := rpauo.mutation.CARecommendations(); ok {
		_spec.SetField(recommendationspmpaapplications.FieldCARecommendations, field.TypeString, value)
	}
	if rpauo.mutation.CARecommendationsCleared() {
		_spec.ClearField(recommendationspmpaapplications.FieldCARecommendations, field.TypeString)
	}
	if value, ok := rpauo.mutation.CAUpdatedAt(); ok {
		_spec.SetField(recommendationspmpaapplications.FieldCAUpdatedAt, field.TypeTime, value)
	}
	if rpauo.mutation.CAUpdatedAtCleared() {
		_spec.ClearField(recommendationspmpaapplications.FieldCAUpdatedAt, field.TypeTime)
	}
	if value, ok := rpauo.mutation.CAUserName(); ok {
		_spec.SetField(recommendationspmpaapplications.FieldCAUserName, field.TypeString, value)
	}
	if rpauo.mutation.CAUserNameCleared() {
		_spec.ClearField(recommendationspmpaapplications.FieldCAUserName, field.TypeString)
	}
	if value, ok := rpauo.mutation.CARemarks(); ok {
		_spec.SetField(recommendationspmpaapplications.FieldCARemarks, field.TypeString, value)
	}
	if rpauo.mutation.CARemarksCleared() {
		_spec.ClearField(recommendationspmpaapplications.FieldCARemarks, field.TypeString)
	}
	if value, ok := rpauo.mutation.NORecommendations(); ok {
		_spec.SetField(recommendationspmpaapplications.FieldNORecommendations, field.TypeString, value)
	}
	if rpauo.mutation.NORecommendationsCleared() {
		_spec.ClearField(recommendationspmpaapplications.FieldNORecommendations, field.TypeString)
	}
	if value, ok := rpauo.mutation.NOUpdatedAt(); ok {
		_spec.SetField(recommendationspmpaapplications.FieldNOUpdatedAt, field.TypeTime, value)
	}
	if rpauo.mutation.NOUpdatedAtCleared() {
		_spec.ClearField(recommendationspmpaapplications.FieldNOUpdatedAt, field.TypeTime)
	}
	if value, ok := rpauo.mutation.NOUserName(); ok {
		_spec.SetField(recommendationspmpaapplications.FieldNOUserName, field.TypeString, value)
	}
	if rpauo.mutation.NOUserNameCleared() {
		_spec.ClearField(recommendationspmpaapplications.FieldNOUserName, field.TypeString)
	}
	if value, ok := rpauo.mutation.NORemarks(); ok {
		_spec.SetField(recommendationspmpaapplications.FieldNORemarks, field.TypeString, value)
	}
	if rpauo.mutation.NORemarksCleared() {
		_spec.ClearField(recommendationspmpaapplications.FieldNORemarks, field.TypeString)
	}
	if value, ok := rpauo.mutation.ApplicationStatus(); ok {
		_spec.SetField(recommendationspmpaapplications.FieldApplicationStatus, field.TypeString, value)
	}
	if rpauo.mutation.ApplicationStatusCleared() {
		_spec.ClearField(recommendationspmpaapplications.FieldApplicationStatus, field.TypeString)
	}
	if value, ok := rpauo.mutation.UpdatedAt(); ok {
		_spec.SetField(recommendationspmpaapplications.FieldUpdatedAt, field.TypeTime, value)
	}
	if rpauo.mutation.UpdatedAtCleared() {
		_spec.ClearField(recommendationspmpaapplications.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := rpauo.mutation.UpdatedBy(); ok {
		_spec.SetField(recommendationspmpaapplications.FieldUpdatedBy, field.TypeString, value)
	}
	if rpauo.mutation.UpdatedByCleared() {
		_spec.ClearField(recommendationspmpaapplications.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := rpauo.mutation.GenerateHallTicketFlag(); ok {
		_spec.SetField(recommendationspmpaapplications.FieldGenerateHallTicketFlag, field.TypeBool, value)
	}
	if rpauo.mutation.GenerateHallTicketFlagCleared() {
		_spec.ClearField(recommendationspmpaapplications.FieldGenerateHallTicketFlag, field.TypeBool)
	}
	if rpauo.mutation.ApplnRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   recommendationspmpaapplications.ApplnRefTable,
			Columns: []string{recommendationspmpaapplications.ApplnRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_pmpa.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rpauo.mutation.ApplnRefIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   recommendationspmpaapplications.ApplnRefTable,
			Columns: []string{recommendationspmpaapplications.ApplnRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_pmpa.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &RecommendationsPMPAApplications{config: rpauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, rpauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{recommendationspmpaapplications.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	rpauo.mutation.done = true
	return _node, nil
}
