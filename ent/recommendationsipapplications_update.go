// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"recruit/ent/exam_applications_ip"
	"recruit/ent/predicate"
	"recruit/ent/recommendationsipapplications"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// RecommendationsIPApplicationsUpdate is the builder for updating RecommendationsIPApplications entities.
type RecommendationsIPApplicationsUpdate struct {
	config
	hooks    []Hook
	mutation *RecommendationsIPApplicationsMutation
}

// Where appends a list predicates to the RecommendationsIPApplicationsUpdate builder.
func (riau *RecommendationsIPApplicationsUpdate) Where(ps ...predicate.RecommendationsIPApplications) *RecommendationsIPApplicationsUpdate {
	riau.mutation.Where(ps...)
	return riau
}

// SetApplicationID sets the "ApplicationID" field.
func (riau *RecommendationsIPApplicationsUpdate) SetApplicationID(i int64) *RecommendationsIPApplicationsUpdate {
	riau.mutation.ResetApplicationID()
	riau.mutation.SetApplicationID(i)
	return riau
}

// SetNillableApplicationID sets the "ApplicationID" field if the given value is not nil.
func (riau *RecommendationsIPApplicationsUpdate) SetNillableApplicationID(i *int64) *RecommendationsIPApplicationsUpdate {
	if i != nil {
		riau.SetApplicationID(*i)
	}
	return riau
}

// AddApplicationID adds i to the "ApplicationID" field.
func (riau *RecommendationsIPApplicationsUpdate) AddApplicationID(i int64) *RecommendationsIPApplicationsUpdate {
	riau.mutation.AddApplicationID(i)
	return riau
}

// ClearApplicationID clears the value of the "ApplicationID" field.
func (riau *RecommendationsIPApplicationsUpdate) ClearApplicationID() *RecommendationsIPApplicationsUpdate {
	riau.mutation.ClearApplicationID()
	return riau
}

// SetEmployeeID sets the "EmployeeID" field.
func (riau *RecommendationsIPApplicationsUpdate) SetEmployeeID(i int64) *RecommendationsIPApplicationsUpdate {
	riau.mutation.ResetEmployeeID()
	riau.mutation.SetEmployeeID(i)
	return riau
}

// SetNillableEmployeeID sets the "EmployeeID" field if the given value is not nil.
func (riau *RecommendationsIPApplicationsUpdate) SetNillableEmployeeID(i *int64) *RecommendationsIPApplicationsUpdate {
	if i != nil {
		riau.SetEmployeeID(*i)
	}
	return riau
}

// AddEmployeeID adds i to the "EmployeeID" field.
func (riau *RecommendationsIPApplicationsUpdate) AddEmployeeID(i int64) *RecommendationsIPApplicationsUpdate {
	riau.mutation.AddEmployeeID(i)
	return riau
}

// ClearEmployeeID clears the value of the "EmployeeID" field.
func (riau *RecommendationsIPApplicationsUpdate) ClearEmployeeID() *RecommendationsIPApplicationsUpdate {
	riau.mutation.ClearEmployeeID()
	return riau
}

// SetExamNameCode sets the "ExamNameCode" field.
func (riau *RecommendationsIPApplicationsUpdate) SetExamNameCode(s string) *RecommendationsIPApplicationsUpdate {
	riau.mutation.SetExamNameCode(s)
	return riau
}

// SetNillableExamNameCode sets the "ExamNameCode" field if the given value is not nil.
func (riau *RecommendationsIPApplicationsUpdate) SetNillableExamNameCode(s *string) *RecommendationsIPApplicationsUpdate {
	if s != nil {
		riau.SetExamNameCode(*s)
	}
	return riau
}

// ClearExamNameCode clears the value of the "ExamNameCode" field.
func (riau *RecommendationsIPApplicationsUpdate) ClearExamNameCode() *RecommendationsIPApplicationsUpdate {
	riau.mutation.ClearExamNameCode()
	return riau
}

// SetExamYear sets the "ExamYear" field.
func (riau *RecommendationsIPApplicationsUpdate) SetExamYear(s string) *RecommendationsIPApplicationsUpdate {
	riau.mutation.SetExamYear(s)
	return riau
}

// SetNillableExamYear sets the "ExamYear" field if the given value is not nil.
func (riau *RecommendationsIPApplicationsUpdate) SetNillableExamYear(s *string) *RecommendationsIPApplicationsUpdate {
	if s != nil {
		riau.SetExamYear(*s)
	}
	return riau
}

// ClearExamYear clears the value of the "ExamYear" field.
func (riau *RecommendationsIPApplicationsUpdate) ClearExamYear() *RecommendationsIPApplicationsUpdate {
	riau.mutation.ClearExamYear()
	return riau
}

// SetVacancyYear sets the "VacancyYear" field.
func (riau *RecommendationsIPApplicationsUpdate) SetVacancyYear(i int32) *RecommendationsIPApplicationsUpdate {
	riau.mutation.ResetVacancyYear()
	riau.mutation.SetVacancyYear(i)
	return riau
}

// SetNillableVacancyYear sets the "VacancyYear" field if the given value is not nil.
func (riau *RecommendationsIPApplicationsUpdate) SetNillableVacancyYear(i *int32) *RecommendationsIPApplicationsUpdate {
	if i != nil {
		riau.SetVacancyYear(*i)
	}
	return riau
}

// AddVacancyYear adds i to the "VacancyYear" field.
func (riau *RecommendationsIPApplicationsUpdate) AddVacancyYear(i int32) *RecommendationsIPApplicationsUpdate {
	riau.mutation.AddVacancyYear(i)
	return riau
}

// ClearVacancyYear clears the value of the "VacancyYear" field.
func (riau *RecommendationsIPApplicationsUpdate) ClearVacancyYear() *RecommendationsIPApplicationsUpdate {
	riau.mutation.ClearVacancyYear()
	return riau
}

// SetCARecommendations sets the "CA_Recommendations" field.
func (riau *RecommendationsIPApplicationsUpdate) SetCARecommendations(s string) *RecommendationsIPApplicationsUpdate {
	riau.mutation.SetCARecommendations(s)
	return riau
}

// SetNillableCARecommendations sets the "CA_Recommendations" field if the given value is not nil.
func (riau *RecommendationsIPApplicationsUpdate) SetNillableCARecommendations(s *string) *RecommendationsIPApplicationsUpdate {
	if s != nil {
		riau.SetCARecommendations(*s)
	}
	return riau
}

// ClearCARecommendations clears the value of the "CA_Recommendations" field.
func (riau *RecommendationsIPApplicationsUpdate) ClearCARecommendations() *RecommendationsIPApplicationsUpdate {
	riau.mutation.ClearCARecommendations()
	return riau
}

// SetCAUpdatedAt sets the "CA_UpdatedAt" field.
func (riau *RecommendationsIPApplicationsUpdate) SetCAUpdatedAt(t time.Time) *RecommendationsIPApplicationsUpdate {
	riau.mutation.SetCAUpdatedAt(t)
	return riau
}

// SetNillableCAUpdatedAt sets the "CA_UpdatedAt" field if the given value is not nil.
func (riau *RecommendationsIPApplicationsUpdate) SetNillableCAUpdatedAt(t *time.Time) *RecommendationsIPApplicationsUpdate {
	if t != nil {
		riau.SetCAUpdatedAt(*t)
	}
	return riau
}

// ClearCAUpdatedAt clears the value of the "CA_UpdatedAt" field.
func (riau *RecommendationsIPApplicationsUpdate) ClearCAUpdatedAt() *RecommendationsIPApplicationsUpdate {
	riau.mutation.ClearCAUpdatedAt()
	return riau
}

// SetCAUserName sets the "CA_UserName" field.
func (riau *RecommendationsIPApplicationsUpdate) SetCAUserName(s string) *RecommendationsIPApplicationsUpdate {
	riau.mutation.SetCAUserName(s)
	return riau
}

// SetNillableCAUserName sets the "CA_UserName" field if the given value is not nil.
func (riau *RecommendationsIPApplicationsUpdate) SetNillableCAUserName(s *string) *RecommendationsIPApplicationsUpdate {
	if s != nil {
		riau.SetCAUserName(*s)
	}
	return riau
}

// ClearCAUserName clears the value of the "CA_UserName" field.
func (riau *RecommendationsIPApplicationsUpdate) ClearCAUserName() *RecommendationsIPApplicationsUpdate {
	riau.mutation.ClearCAUserName()
	return riau
}

// SetCARemarks sets the "CA_Remarks" field.
func (riau *RecommendationsIPApplicationsUpdate) SetCARemarks(s string) *RecommendationsIPApplicationsUpdate {
	riau.mutation.SetCARemarks(s)
	return riau
}

// SetNillableCARemarks sets the "CA_Remarks" field if the given value is not nil.
func (riau *RecommendationsIPApplicationsUpdate) SetNillableCARemarks(s *string) *RecommendationsIPApplicationsUpdate {
	if s != nil {
		riau.SetCARemarks(*s)
	}
	return riau
}

// ClearCARemarks clears the value of the "CA_Remarks" field.
func (riau *RecommendationsIPApplicationsUpdate) ClearCARemarks() *RecommendationsIPApplicationsUpdate {
	riau.mutation.ClearCARemarks()
	return riau
}

// SetNORecommendations sets the "NO_Recommendations" field.
func (riau *RecommendationsIPApplicationsUpdate) SetNORecommendations(s string) *RecommendationsIPApplicationsUpdate {
	riau.mutation.SetNORecommendations(s)
	return riau
}

// SetNillableNORecommendations sets the "NO_Recommendations" field if the given value is not nil.
func (riau *RecommendationsIPApplicationsUpdate) SetNillableNORecommendations(s *string) *RecommendationsIPApplicationsUpdate {
	if s != nil {
		riau.SetNORecommendations(*s)
	}
	return riau
}

// ClearNORecommendations clears the value of the "NO_Recommendations" field.
func (riau *RecommendationsIPApplicationsUpdate) ClearNORecommendations() *RecommendationsIPApplicationsUpdate {
	riau.mutation.ClearNORecommendations()
	return riau
}

// SetNOUpdatedAt sets the "NO_UpdatedAt" field.
func (riau *RecommendationsIPApplicationsUpdate) SetNOUpdatedAt(t time.Time) *RecommendationsIPApplicationsUpdate {
	riau.mutation.SetNOUpdatedAt(t)
	return riau
}

// SetNillableNOUpdatedAt sets the "NO_UpdatedAt" field if the given value is not nil.
func (riau *RecommendationsIPApplicationsUpdate) SetNillableNOUpdatedAt(t *time.Time) *RecommendationsIPApplicationsUpdate {
	if t != nil {
		riau.SetNOUpdatedAt(*t)
	}
	return riau
}

// ClearNOUpdatedAt clears the value of the "NO_UpdatedAt" field.
func (riau *RecommendationsIPApplicationsUpdate) ClearNOUpdatedAt() *RecommendationsIPApplicationsUpdate {
	riau.mutation.ClearNOUpdatedAt()
	return riau
}

// SetNOUserName sets the "NO_UserName" field.
func (riau *RecommendationsIPApplicationsUpdate) SetNOUserName(s string) *RecommendationsIPApplicationsUpdate {
	riau.mutation.SetNOUserName(s)
	return riau
}

// SetNillableNOUserName sets the "NO_UserName" field if the given value is not nil.
func (riau *RecommendationsIPApplicationsUpdate) SetNillableNOUserName(s *string) *RecommendationsIPApplicationsUpdate {
	if s != nil {
		riau.SetNOUserName(*s)
	}
	return riau
}

// ClearNOUserName clears the value of the "NO_UserName" field.
func (riau *RecommendationsIPApplicationsUpdate) ClearNOUserName() *RecommendationsIPApplicationsUpdate {
	riau.mutation.ClearNOUserName()
	return riau
}

// SetNORemarks sets the "NO_Remarks" field.
func (riau *RecommendationsIPApplicationsUpdate) SetNORemarks(s string) *RecommendationsIPApplicationsUpdate {
	riau.mutation.SetNORemarks(s)
	return riau
}

// SetNillableNORemarks sets the "NO_Remarks" field if the given value is not nil.
func (riau *RecommendationsIPApplicationsUpdate) SetNillableNORemarks(s *string) *RecommendationsIPApplicationsUpdate {
	if s != nil {
		riau.SetNORemarks(*s)
	}
	return riau
}

// ClearNORemarks clears the value of the "NO_Remarks" field.
func (riau *RecommendationsIPApplicationsUpdate) ClearNORemarks() *RecommendationsIPApplicationsUpdate {
	riau.mutation.ClearNORemarks()
	return riau
}

// SetApplicationStatus sets the "ApplicationStatus" field.
func (riau *RecommendationsIPApplicationsUpdate) SetApplicationStatus(s string) *RecommendationsIPApplicationsUpdate {
	riau.mutation.SetApplicationStatus(s)
	return riau
}

// SetNillableApplicationStatus sets the "ApplicationStatus" field if the given value is not nil.
func (riau *RecommendationsIPApplicationsUpdate) SetNillableApplicationStatus(s *string) *RecommendationsIPApplicationsUpdate {
	if s != nil {
		riau.SetApplicationStatus(*s)
	}
	return riau
}

// ClearApplicationStatus clears the value of the "ApplicationStatus" field.
func (riau *RecommendationsIPApplicationsUpdate) ClearApplicationStatus() *RecommendationsIPApplicationsUpdate {
	riau.mutation.ClearApplicationStatus()
	return riau
}

// SetUpdatedAt sets the "UpdatedAt" field.
func (riau *RecommendationsIPApplicationsUpdate) SetUpdatedAt(t time.Time) *RecommendationsIPApplicationsUpdate {
	riau.mutation.SetUpdatedAt(t)
	return riau
}

// SetNillableUpdatedAt sets the "UpdatedAt" field if the given value is not nil.
func (riau *RecommendationsIPApplicationsUpdate) SetNillableUpdatedAt(t *time.Time) *RecommendationsIPApplicationsUpdate {
	if t != nil {
		riau.SetUpdatedAt(*t)
	}
	return riau
}

// ClearUpdatedAt clears the value of the "UpdatedAt" field.
func (riau *RecommendationsIPApplicationsUpdate) ClearUpdatedAt() *RecommendationsIPApplicationsUpdate {
	riau.mutation.ClearUpdatedAt()
	return riau
}

// SetUpdatedBy sets the "UpdatedBy" field.
func (riau *RecommendationsIPApplicationsUpdate) SetUpdatedBy(s string) *RecommendationsIPApplicationsUpdate {
	riau.mutation.SetUpdatedBy(s)
	return riau
}

// SetNillableUpdatedBy sets the "UpdatedBy" field if the given value is not nil.
func (riau *RecommendationsIPApplicationsUpdate) SetNillableUpdatedBy(s *string) *RecommendationsIPApplicationsUpdate {
	if s != nil {
		riau.SetUpdatedBy(*s)
	}
	return riau
}

// ClearUpdatedBy clears the value of the "UpdatedBy" field.
func (riau *RecommendationsIPApplicationsUpdate) ClearUpdatedBy() *RecommendationsIPApplicationsUpdate {
	riau.mutation.ClearUpdatedBy()
	return riau
}

// SetGenerateHallTicketFlag sets the "GenerateHallTicketFlag" field.
func (riau *RecommendationsIPApplicationsUpdate) SetGenerateHallTicketFlag(b bool) *RecommendationsIPApplicationsUpdate {
	riau.mutation.SetGenerateHallTicketFlag(b)
	return riau
}

// SetNillableGenerateHallTicketFlag sets the "GenerateHallTicketFlag" field if the given value is not nil.
func (riau *RecommendationsIPApplicationsUpdate) SetNillableGenerateHallTicketFlag(b *bool) *RecommendationsIPApplicationsUpdate {
	if b != nil {
		riau.SetGenerateHallTicketFlag(*b)
	}
	return riau
}

// ClearGenerateHallTicketFlag clears the value of the "GenerateHallTicketFlag" field.
func (riau *RecommendationsIPApplicationsUpdate) ClearGenerateHallTicketFlag() *RecommendationsIPApplicationsUpdate {
	riau.mutation.ClearGenerateHallTicketFlag()
	return riau
}

// SetApplnRefID sets the "ApplnRef" edge to the Exam_Applications_IP entity by ID.
func (riau *RecommendationsIPApplicationsUpdate) SetApplnRefID(id int64) *RecommendationsIPApplicationsUpdate {
	riau.mutation.SetApplnRefID(id)
	return riau
}

// SetNillableApplnRefID sets the "ApplnRef" edge to the Exam_Applications_IP entity by ID if the given value is not nil.
func (riau *RecommendationsIPApplicationsUpdate) SetNillableApplnRefID(id *int64) *RecommendationsIPApplicationsUpdate {
	if id != nil {
		riau = riau.SetApplnRefID(*id)
	}
	return riau
}

// SetApplnRef sets the "ApplnRef" edge to the Exam_Applications_IP entity.
func (riau *RecommendationsIPApplicationsUpdate) SetApplnRef(e *Exam_Applications_IP) *RecommendationsIPApplicationsUpdate {
	return riau.SetApplnRefID(e.ID)
}

// Mutation returns the RecommendationsIPApplicationsMutation object of the builder.
func (riau *RecommendationsIPApplicationsUpdate) Mutation() *RecommendationsIPApplicationsMutation {
	return riau.mutation
}

// ClearApplnRef clears the "ApplnRef" edge to the Exam_Applications_IP entity.
func (riau *RecommendationsIPApplicationsUpdate) ClearApplnRef() *RecommendationsIPApplicationsUpdate {
	riau.mutation.ClearApplnRef()
	return riau
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (riau *RecommendationsIPApplicationsUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, riau.sqlSave, riau.mutation, riau.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (riau *RecommendationsIPApplicationsUpdate) SaveX(ctx context.Context) int {
	affected, err := riau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (riau *RecommendationsIPApplicationsUpdate) Exec(ctx context.Context) error {
	_, err := riau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (riau *RecommendationsIPApplicationsUpdate) ExecX(ctx context.Context) {
	if err := riau.Exec(ctx); err != nil {
		panic(err)
	}
}

func (riau *RecommendationsIPApplicationsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(recommendationsipapplications.Table, recommendationsipapplications.Columns, sqlgraph.NewFieldSpec(recommendationsipapplications.FieldID, field.TypeInt64))
	if ps := riau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := riau.mutation.ApplicationID(); ok {
		_spec.SetField(recommendationsipapplications.FieldApplicationID, field.TypeInt64, value)
	}
	if value, ok := riau.mutation.AddedApplicationID(); ok {
		_spec.AddField(recommendationsipapplications.FieldApplicationID, field.TypeInt64, value)
	}
	if riau.mutation.ApplicationIDCleared() {
		_spec.ClearField(recommendationsipapplications.FieldApplicationID, field.TypeInt64)
	}
	if value, ok := riau.mutation.EmployeeID(); ok {
		_spec.SetField(recommendationsipapplications.FieldEmployeeID, field.TypeInt64, value)
	}
	if value, ok := riau.mutation.AddedEmployeeID(); ok {
		_spec.AddField(recommendationsipapplications.FieldEmployeeID, field.TypeInt64, value)
	}
	if riau.mutation.EmployeeIDCleared() {
		_spec.ClearField(recommendationsipapplications.FieldEmployeeID, field.TypeInt64)
	}
	if value, ok := riau.mutation.ExamNameCode(); ok {
		_spec.SetField(recommendationsipapplications.FieldExamNameCode, field.TypeString, value)
	}
	if riau.mutation.ExamNameCodeCleared() {
		_spec.ClearField(recommendationsipapplications.FieldExamNameCode, field.TypeString)
	}
	if value, ok := riau.mutation.ExamYear(); ok {
		_spec.SetField(recommendationsipapplications.FieldExamYear, field.TypeString, value)
	}
	if riau.mutation.ExamYearCleared() {
		_spec.ClearField(recommendationsipapplications.FieldExamYear, field.TypeString)
	}
	if value, ok := riau.mutation.VacancyYear(); ok {
		_spec.SetField(recommendationsipapplications.FieldVacancyYear, field.TypeInt32, value)
	}
	if value, ok := riau.mutation.AddedVacancyYear(); ok {
		_spec.AddField(recommendationsipapplications.FieldVacancyYear, field.TypeInt32, value)
	}
	if riau.mutation.VacancyYearCleared() {
		_spec.ClearField(recommendationsipapplications.FieldVacancyYear, field.TypeInt32)
	}
	if value, ok := riau.mutation.CARecommendations(); ok {
		_spec.SetField(recommendationsipapplications.FieldCARecommendations, field.TypeString, value)
	}
	if riau.mutation.CARecommendationsCleared() {
		_spec.ClearField(recommendationsipapplications.FieldCARecommendations, field.TypeString)
	}
	if value, ok := riau.mutation.CAUpdatedAt(); ok {
		_spec.SetField(recommendationsipapplications.FieldCAUpdatedAt, field.TypeTime, value)
	}
	if riau.mutation.CAUpdatedAtCleared() {
		_spec.ClearField(recommendationsipapplications.FieldCAUpdatedAt, field.TypeTime)
	}
	if value, ok := riau.mutation.CAUserName(); ok {
		_spec.SetField(recommendationsipapplications.FieldCAUserName, field.TypeString, value)
	}
	if riau.mutation.CAUserNameCleared() {
		_spec.ClearField(recommendationsipapplications.FieldCAUserName, field.TypeString)
	}
	if value, ok := riau.mutation.CARemarks(); ok {
		_spec.SetField(recommendationsipapplications.FieldCARemarks, field.TypeString, value)
	}
	if riau.mutation.CARemarksCleared() {
		_spec.ClearField(recommendationsipapplications.FieldCARemarks, field.TypeString)
	}
	if value, ok := riau.mutation.NORecommendations(); ok {
		_spec.SetField(recommendationsipapplications.FieldNORecommendations, field.TypeString, value)
	}
	if riau.mutation.NORecommendationsCleared() {
		_spec.ClearField(recommendationsipapplications.FieldNORecommendations, field.TypeString)
	}
	if value, ok := riau.mutation.NOUpdatedAt(); ok {
		_spec.SetField(recommendationsipapplications.FieldNOUpdatedAt, field.TypeTime, value)
	}
	if riau.mutation.NOUpdatedAtCleared() {
		_spec.ClearField(recommendationsipapplications.FieldNOUpdatedAt, field.TypeTime)
	}
	if value, ok := riau.mutation.NOUserName(); ok {
		_spec.SetField(recommendationsipapplications.FieldNOUserName, field.TypeString, value)
	}
	if riau.mutation.NOUserNameCleared() {
		_spec.ClearField(recommendationsipapplications.FieldNOUserName, field.TypeString)
	}
	if value, ok := riau.mutation.NORemarks(); ok {
		_spec.SetField(recommendationsipapplications.FieldNORemarks, field.TypeString, value)
	}
	if riau.mutation.NORemarksCleared() {
		_spec.ClearField(recommendationsipapplications.FieldNORemarks, field.TypeString)
	}
	if value, ok := riau.mutation.ApplicationStatus(); ok {
		_spec.SetField(recommendationsipapplications.FieldApplicationStatus, field.TypeString, value)
	}
	if riau.mutation.ApplicationStatusCleared() {
		_spec.ClearField(recommendationsipapplications.FieldApplicationStatus, field.TypeString)
	}
	if value, ok := riau.mutation.UpdatedAt(); ok {
		_spec.SetField(recommendationsipapplications.FieldUpdatedAt, field.TypeTime, value)
	}
	if riau.mutation.UpdatedAtCleared() {
		_spec.ClearField(recommendationsipapplications.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := riau.mutation.UpdatedBy(); ok {
		_spec.SetField(recommendationsipapplications.FieldUpdatedBy, field.TypeString, value)
	}
	if riau.mutation.UpdatedByCleared() {
		_spec.ClearField(recommendationsipapplications.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := riau.mutation.GenerateHallTicketFlag(); ok {
		_spec.SetField(recommendationsipapplications.FieldGenerateHallTicketFlag, field.TypeBool, value)
	}
	if riau.mutation.GenerateHallTicketFlagCleared() {
		_spec.ClearField(recommendationsipapplications.FieldGenerateHallTicketFlag, field.TypeBool)
	}
	if riau.mutation.ApplnRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   recommendationsipapplications.ApplnRefTable,
			Columns: []string{recommendationsipapplications.ApplnRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_ip.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := riau.mutation.ApplnRefIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   recommendationsipapplications.ApplnRefTable,
			Columns: []string{recommendationsipapplications.ApplnRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_ip.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, riau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{recommendationsipapplications.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	riau.mutation.done = true
	return n, nil
}

// RecommendationsIPApplicationsUpdateOne is the builder for updating a single RecommendationsIPApplications entity.
type RecommendationsIPApplicationsUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *RecommendationsIPApplicationsMutation
}

// SetApplicationID sets the "ApplicationID" field.
func (riauo *RecommendationsIPApplicationsUpdateOne) SetApplicationID(i int64) *RecommendationsIPApplicationsUpdateOne {
	riauo.mutation.ResetApplicationID()
	riauo.mutation.SetApplicationID(i)
	return riauo
}

// SetNillableApplicationID sets the "ApplicationID" field if the given value is not nil.
func (riauo *RecommendationsIPApplicationsUpdateOne) SetNillableApplicationID(i *int64) *RecommendationsIPApplicationsUpdateOne {
	if i != nil {
		riauo.SetApplicationID(*i)
	}
	return riauo
}

// AddApplicationID adds i to the "ApplicationID" field.
func (riauo *RecommendationsIPApplicationsUpdateOne) AddApplicationID(i int64) *RecommendationsIPApplicationsUpdateOne {
	riauo.mutation.AddApplicationID(i)
	return riauo
}

// ClearApplicationID clears the value of the "ApplicationID" field.
func (riauo *RecommendationsIPApplicationsUpdateOne) ClearApplicationID() *RecommendationsIPApplicationsUpdateOne {
	riauo.mutation.ClearApplicationID()
	return riauo
}

// SetEmployeeID sets the "EmployeeID" field.
func (riauo *RecommendationsIPApplicationsUpdateOne) SetEmployeeID(i int64) *RecommendationsIPApplicationsUpdateOne {
	riauo.mutation.ResetEmployeeID()
	riauo.mutation.SetEmployeeID(i)
	return riauo
}

// SetNillableEmployeeID sets the "EmployeeID" field if the given value is not nil.
func (riauo *RecommendationsIPApplicationsUpdateOne) SetNillableEmployeeID(i *int64) *RecommendationsIPApplicationsUpdateOne {
	if i != nil {
		riauo.SetEmployeeID(*i)
	}
	return riauo
}

// AddEmployeeID adds i to the "EmployeeID" field.
func (riauo *RecommendationsIPApplicationsUpdateOne) AddEmployeeID(i int64) *RecommendationsIPApplicationsUpdateOne {
	riauo.mutation.AddEmployeeID(i)
	return riauo
}

// ClearEmployeeID clears the value of the "EmployeeID" field.
func (riauo *RecommendationsIPApplicationsUpdateOne) ClearEmployeeID() *RecommendationsIPApplicationsUpdateOne {
	riauo.mutation.ClearEmployeeID()
	return riauo
}

// SetExamNameCode sets the "ExamNameCode" field.
func (riauo *RecommendationsIPApplicationsUpdateOne) SetExamNameCode(s string) *RecommendationsIPApplicationsUpdateOne {
	riauo.mutation.SetExamNameCode(s)
	return riauo
}

// SetNillableExamNameCode sets the "ExamNameCode" field if the given value is not nil.
func (riauo *RecommendationsIPApplicationsUpdateOne) SetNillableExamNameCode(s *string) *RecommendationsIPApplicationsUpdateOne {
	if s != nil {
		riauo.SetExamNameCode(*s)
	}
	return riauo
}

// ClearExamNameCode clears the value of the "ExamNameCode" field.
func (riauo *RecommendationsIPApplicationsUpdateOne) ClearExamNameCode() *RecommendationsIPApplicationsUpdateOne {
	riauo.mutation.ClearExamNameCode()
	return riauo
}

// SetExamYear sets the "ExamYear" field.
func (riauo *RecommendationsIPApplicationsUpdateOne) SetExamYear(s string) *RecommendationsIPApplicationsUpdateOne {
	riauo.mutation.SetExamYear(s)
	return riauo
}

// SetNillableExamYear sets the "ExamYear" field if the given value is not nil.
func (riauo *RecommendationsIPApplicationsUpdateOne) SetNillableExamYear(s *string) *RecommendationsIPApplicationsUpdateOne {
	if s != nil {
		riauo.SetExamYear(*s)
	}
	return riauo
}

// ClearExamYear clears the value of the "ExamYear" field.
func (riauo *RecommendationsIPApplicationsUpdateOne) ClearExamYear() *RecommendationsIPApplicationsUpdateOne {
	riauo.mutation.ClearExamYear()
	return riauo
}

// SetVacancyYear sets the "VacancyYear" field.
func (riauo *RecommendationsIPApplicationsUpdateOne) SetVacancyYear(i int32) *RecommendationsIPApplicationsUpdateOne {
	riauo.mutation.ResetVacancyYear()
	riauo.mutation.SetVacancyYear(i)
	return riauo
}

// SetNillableVacancyYear sets the "VacancyYear" field if the given value is not nil.
func (riauo *RecommendationsIPApplicationsUpdateOne) SetNillableVacancyYear(i *int32) *RecommendationsIPApplicationsUpdateOne {
	if i != nil {
		riauo.SetVacancyYear(*i)
	}
	return riauo
}

// AddVacancyYear adds i to the "VacancyYear" field.
func (riauo *RecommendationsIPApplicationsUpdateOne) AddVacancyYear(i int32) *RecommendationsIPApplicationsUpdateOne {
	riauo.mutation.AddVacancyYear(i)
	return riauo
}

// ClearVacancyYear clears the value of the "VacancyYear" field.
func (riauo *RecommendationsIPApplicationsUpdateOne) ClearVacancyYear() *RecommendationsIPApplicationsUpdateOne {
	riauo.mutation.ClearVacancyYear()
	return riauo
}

// SetCARecommendations sets the "CA_Recommendations" field.
func (riauo *RecommendationsIPApplicationsUpdateOne) SetCARecommendations(s string) *RecommendationsIPApplicationsUpdateOne {
	riauo.mutation.SetCARecommendations(s)
	return riauo
}

// SetNillableCARecommendations sets the "CA_Recommendations" field if the given value is not nil.
func (riauo *RecommendationsIPApplicationsUpdateOne) SetNillableCARecommendations(s *string) *RecommendationsIPApplicationsUpdateOne {
	if s != nil {
		riauo.SetCARecommendations(*s)
	}
	return riauo
}

// ClearCARecommendations clears the value of the "CA_Recommendations" field.
func (riauo *RecommendationsIPApplicationsUpdateOne) ClearCARecommendations() *RecommendationsIPApplicationsUpdateOne {
	riauo.mutation.ClearCARecommendations()
	return riauo
}

// SetCAUpdatedAt sets the "CA_UpdatedAt" field.
func (riauo *RecommendationsIPApplicationsUpdateOne) SetCAUpdatedAt(t time.Time) *RecommendationsIPApplicationsUpdateOne {
	riauo.mutation.SetCAUpdatedAt(t)
	return riauo
}

// SetNillableCAUpdatedAt sets the "CA_UpdatedAt" field if the given value is not nil.
func (riauo *RecommendationsIPApplicationsUpdateOne) SetNillableCAUpdatedAt(t *time.Time) *RecommendationsIPApplicationsUpdateOne {
	if t != nil {
		riauo.SetCAUpdatedAt(*t)
	}
	return riauo
}

// ClearCAUpdatedAt clears the value of the "CA_UpdatedAt" field.
func (riauo *RecommendationsIPApplicationsUpdateOne) ClearCAUpdatedAt() *RecommendationsIPApplicationsUpdateOne {
	riauo.mutation.ClearCAUpdatedAt()
	return riauo
}

// SetCAUserName sets the "CA_UserName" field.
func (riauo *RecommendationsIPApplicationsUpdateOne) SetCAUserName(s string) *RecommendationsIPApplicationsUpdateOne {
	riauo.mutation.SetCAUserName(s)
	return riauo
}

// SetNillableCAUserName sets the "CA_UserName" field if the given value is not nil.
func (riauo *RecommendationsIPApplicationsUpdateOne) SetNillableCAUserName(s *string) *RecommendationsIPApplicationsUpdateOne {
	if s != nil {
		riauo.SetCAUserName(*s)
	}
	return riauo
}

// ClearCAUserName clears the value of the "CA_UserName" field.
func (riauo *RecommendationsIPApplicationsUpdateOne) ClearCAUserName() *RecommendationsIPApplicationsUpdateOne {
	riauo.mutation.ClearCAUserName()
	return riauo
}

// SetCARemarks sets the "CA_Remarks" field.
func (riauo *RecommendationsIPApplicationsUpdateOne) SetCARemarks(s string) *RecommendationsIPApplicationsUpdateOne {
	riauo.mutation.SetCARemarks(s)
	return riauo
}

// SetNillableCARemarks sets the "CA_Remarks" field if the given value is not nil.
func (riauo *RecommendationsIPApplicationsUpdateOne) SetNillableCARemarks(s *string) *RecommendationsIPApplicationsUpdateOne {
	if s != nil {
		riauo.SetCARemarks(*s)
	}
	return riauo
}

// ClearCARemarks clears the value of the "CA_Remarks" field.
func (riauo *RecommendationsIPApplicationsUpdateOne) ClearCARemarks() *RecommendationsIPApplicationsUpdateOne {
	riauo.mutation.ClearCARemarks()
	return riauo
}

// SetNORecommendations sets the "NO_Recommendations" field.
func (riauo *RecommendationsIPApplicationsUpdateOne) SetNORecommendations(s string) *RecommendationsIPApplicationsUpdateOne {
	riauo.mutation.SetNORecommendations(s)
	return riauo
}

// SetNillableNORecommendations sets the "NO_Recommendations" field if the given value is not nil.
func (riauo *RecommendationsIPApplicationsUpdateOne) SetNillableNORecommendations(s *string) *RecommendationsIPApplicationsUpdateOne {
	if s != nil {
		riauo.SetNORecommendations(*s)
	}
	return riauo
}

// ClearNORecommendations clears the value of the "NO_Recommendations" field.
func (riauo *RecommendationsIPApplicationsUpdateOne) ClearNORecommendations() *RecommendationsIPApplicationsUpdateOne {
	riauo.mutation.ClearNORecommendations()
	return riauo
}

// SetNOUpdatedAt sets the "NO_UpdatedAt" field.
func (riauo *RecommendationsIPApplicationsUpdateOne) SetNOUpdatedAt(t time.Time) *RecommendationsIPApplicationsUpdateOne {
	riauo.mutation.SetNOUpdatedAt(t)
	return riauo
}

// SetNillableNOUpdatedAt sets the "NO_UpdatedAt" field if the given value is not nil.
func (riauo *RecommendationsIPApplicationsUpdateOne) SetNillableNOUpdatedAt(t *time.Time) *RecommendationsIPApplicationsUpdateOne {
	if t != nil {
		riauo.SetNOUpdatedAt(*t)
	}
	return riauo
}

// ClearNOUpdatedAt clears the value of the "NO_UpdatedAt" field.
func (riauo *RecommendationsIPApplicationsUpdateOne) ClearNOUpdatedAt() *RecommendationsIPApplicationsUpdateOne {
	riauo.mutation.ClearNOUpdatedAt()
	return riauo
}

// SetNOUserName sets the "NO_UserName" field.
func (riauo *RecommendationsIPApplicationsUpdateOne) SetNOUserName(s string) *RecommendationsIPApplicationsUpdateOne {
	riauo.mutation.SetNOUserName(s)
	return riauo
}

// SetNillableNOUserName sets the "NO_UserName" field if the given value is not nil.
func (riauo *RecommendationsIPApplicationsUpdateOne) SetNillableNOUserName(s *string) *RecommendationsIPApplicationsUpdateOne {
	if s != nil {
		riauo.SetNOUserName(*s)
	}
	return riauo
}

// ClearNOUserName clears the value of the "NO_UserName" field.
func (riauo *RecommendationsIPApplicationsUpdateOne) ClearNOUserName() *RecommendationsIPApplicationsUpdateOne {
	riauo.mutation.ClearNOUserName()
	return riauo
}

// SetNORemarks sets the "NO_Remarks" field.
func (riauo *RecommendationsIPApplicationsUpdateOne) SetNORemarks(s string) *RecommendationsIPApplicationsUpdateOne {
	riauo.mutation.SetNORemarks(s)
	return riauo
}

// SetNillableNORemarks sets the "NO_Remarks" field if the given value is not nil.
func (riauo *RecommendationsIPApplicationsUpdateOne) SetNillableNORemarks(s *string) *RecommendationsIPApplicationsUpdateOne {
	if s != nil {
		riauo.SetNORemarks(*s)
	}
	return riauo
}

// ClearNORemarks clears the value of the "NO_Remarks" field.
func (riauo *RecommendationsIPApplicationsUpdateOne) ClearNORemarks() *RecommendationsIPApplicationsUpdateOne {
	riauo.mutation.ClearNORemarks()
	return riauo
}

// SetApplicationStatus sets the "ApplicationStatus" field.
func (riauo *RecommendationsIPApplicationsUpdateOne) SetApplicationStatus(s string) *RecommendationsIPApplicationsUpdateOne {
	riauo.mutation.SetApplicationStatus(s)
	return riauo
}

// SetNillableApplicationStatus sets the "ApplicationStatus" field if the given value is not nil.
func (riauo *RecommendationsIPApplicationsUpdateOne) SetNillableApplicationStatus(s *string) *RecommendationsIPApplicationsUpdateOne {
	if s != nil {
		riauo.SetApplicationStatus(*s)
	}
	return riauo
}

// ClearApplicationStatus clears the value of the "ApplicationStatus" field.
func (riauo *RecommendationsIPApplicationsUpdateOne) ClearApplicationStatus() *RecommendationsIPApplicationsUpdateOne {
	riauo.mutation.ClearApplicationStatus()
	return riauo
}

// SetUpdatedAt sets the "UpdatedAt" field.
func (riauo *RecommendationsIPApplicationsUpdateOne) SetUpdatedAt(t time.Time) *RecommendationsIPApplicationsUpdateOne {
	riauo.mutation.SetUpdatedAt(t)
	return riauo
}

// SetNillableUpdatedAt sets the "UpdatedAt" field if the given value is not nil.
func (riauo *RecommendationsIPApplicationsUpdateOne) SetNillableUpdatedAt(t *time.Time) *RecommendationsIPApplicationsUpdateOne {
	if t != nil {
		riauo.SetUpdatedAt(*t)
	}
	return riauo
}

// ClearUpdatedAt clears the value of the "UpdatedAt" field.
func (riauo *RecommendationsIPApplicationsUpdateOne) ClearUpdatedAt() *RecommendationsIPApplicationsUpdateOne {
	riauo.mutation.ClearUpdatedAt()
	return riauo
}

// SetUpdatedBy sets the "UpdatedBy" field.
func (riauo *RecommendationsIPApplicationsUpdateOne) SetUpdatedBy(s string) *RecommendationsIPApplicationsUpdateOne {
	riauo.mutation.SetUpdatedBy(s)
	return riauo
}

// SetNillableUpdatedBy sets the "UpdatedBy" field if the given value is not nil.
func (riauo *RecommendationsIPApplicationsUpdateOne) SetNillableUpdatedBy(s *string) *RecommendationsIPApplicationsUpdateOne {
	if s != nil {
		riauo.SetUpdatedBy(*s)
	}
	return riauo
}

// ClearUpdatedBy clears the value of the "UpdatedBy" field.
func (riauo *RecommendationsIPApplicationsUpdateOne) ClearUpdatedBy() *RecommendationsIPApplicationsUpdateOne {
	riauo.mutation.ClearUpdatedBy()
	return riauo
}

// SetGenerateHallTicketFlag sets the "GenerateHallTicketFlag" field.
func (riauo *RecommendationsIPApplicationsUpdateOne) SetGenerateHallTicketFlag(b bool) *RecommendationsIPApplicationsUpdateOne {
	riauo.mutation.SetGenerateHallTicketFlag(b)
	return riauo
}

// SetNillableGenerateHallTicketFlag sets the "GenerateHallTicketFlag" field if the given value is not nil.
func (riauo *RecommendationsIPApplicationsUpdateOne) SetNillableGenerateHallTicketFlag(b *bool) *RecommendationsIPApplicationsUpdateOne {
	if b != nil {
		riauo.SetGenerateHallTicketFlag(*b)
	}
	return riauo
}

// ClearGenerateHallTicketFlag clears the value of the "GenerateHallTicketFlag" field.
func (riauo *RecommendationsIPApplicationsUpdateOne) ClearGenerateHallTicketFlag() *RecommendationsIPApplicationsUpdateOne {
	riauo.mutation.ClearGenerateHallTicketFlag()
	return riauo
}

// SetApplnRefID sets the "ApplnRef" edge to the Exam_Applications_IP entity by ID.
func (riauo *RecommendationsIPApplicationsUpdateOne) SetApplnRefID(id int64) *RecommendationsIPApplicationsUpdateOne {
	riauo.mutation.SetApplnRefID(id)
	return riauo
}

// SetNillableApplnRefID sets the "ApplnRef" edge to the Exam_Applications_IP entity by ID if the given value is not nil.
func (riauo *RecommendationsIPApplicationsUpdateOne) SetNillableApplnRefID(id *int64) *RecommendationsIPApplicationsUpdateOne {
	if id != nil {
		riauo = riauo.SetApplnRefID(*id)
	}
	return riauo
}

// SetApplnRef sets the "ApplnRef" edge to the Exam_Applications_IP entity.
func (riauo *RecommendationsIPApplicationsUpdateOne) SetApplnRef(e *Exam_Applications_IP) *RecommendationsIPApplicationsUpdateOne {
	return riauo.SetApplnRefID(e.ID)
}

// Mutation returns the RecommendationsIPApplicationsMutation object of the builder.
func (riauo *RecommendationsIPApplicationsUpdateOne) Mutation() *RecommendationsIPApplicationsMutation {
	return riauo.mutation
}

// ClearApplnRef clears the "ApplnRef" edge to the Exam_Applications_IP entity.
func (riauo *RecommendationsIPApplicationsUpdateOne) ClearApplnRef() *RecommendationsIPApplicationsUpdateOne {
	riauo.mutation.ClearApplnRef()
	return riauo
}

// Where appends a list predicates to the RecommendationsIPApplicationsUpdate builder.
func (riauo *RecommendationsIPApplicationsUpdateOne) Where(ps ...predicate.RecommendationsIPApplications) *RecommendationsIPApplicationsUpdateOne {
	riauo.mutation.Where(ps...)
	return riauo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (riauo *RecommendationsIPApplicationsUpdateOne) Select(field string, fields ...string) *RecommendationsIPApplicationsUpdateOne {
	riauo.fields = append([]string{field}, fields...)
	return riauo
}

// Save executes the query and returns the updated RecommendationsIPApplications entity.
func (riauo *RecommendationsIPApplicationsUpdateOne) Save(ctx context.Context) (*RecommendationsIPApplications, error) {
	return withHooks(ctx, riauo.sqlSave, riauo.mutation, riauo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (riauo *RecommendationsIPApplicationsUpdateOne) SaveX(ctx context.Context) *RecommendationsIPApplications {
	node, err := riauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (riauo *RecommendationsIPApplicationsUpdateOne) Exec(ctx context.Context) error {
	_, err := riauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (riauo *RecommendationsIPApplicationsUpdateOne) ExecX(ctx context.Context) {
	if err := riauo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (riauo *RecommendationsIPApplicationsUpdateOne) sqlSave(ctx context.Context) (_node *RecommendationsIPApplications, err error) {
	_spec := sqlgraph.NewUpdateSpec(recommendationsipapplications.Table, recommendationsipapplications.Columns, sqlgraph.NewFieldSpec(recommendationsipapplications.FieldID, field.TypeInt64))
	id, ok := riauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "RecommendationsIPApplications.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := riauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, recommendationsipapplications.FieldID)
		for _, f := range fields {
			if !recommendationsipapplications.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != recommendationsipapplications.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := riauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := riauo.mutation.ApplicationID(); ok {
		_spec.SetField(recommendationsipapplications.FieldApplicationID, field.TypeInt64, value)
	}
	if value, ok := riauo.mutation.AddedApplicationID(); ok {
		_spec.AddField(recommendationsipapplications.FieldApplicationID, field.TypeInt64, value)
	}
	if riauo.mutation.ApplicationIDCleared() {
		_spec.ClearField(recommendationsipapplications.FieldApplicationID, field.TypeInt64)
	}
	if value, ok := riauo.mutation.EmployeeID(); ok {
		_spec.SetField(recommendationsipapplications.FieldEmployeeID, field.TypeInt64, value)
	}
	if value, ok := riauo.mutation.AddedEmployeeID(); ok {
		_spec.AddField(recommendationsipapplications.FieldEmployeeID, field.TypeInt64, value)
	}
	if riauo.mutation.EmployeeIDCleared() {
		_spec.ClearField(recommendationsipapplications.FieldEmployeeID, field.TypeInt64)
	}
	if value, ok := riauo.mutation.ExamNameCode(); ok {
		_spec.SetField(recommendationsipapplications.FieldExamNameCode, field.TypeString, value)
	}
	if riauo.mutation.ExamNameCodeCleared() {
		_spec.ClearField(recommendationsipapplications.FieldExamNameCode, field.TypeString)
	}
	if value, ok := riauo.mutation.ExamYear(); ok {
		_spec.SetField(recommendationsipapplications.FieldExamYear, field.TypeString, value)
	}
	if riauo.mutation.ExamYearCleared() {
		_spec.ClearField(recommendationsipapplications.FieldExamYear, field.TypeString)
	}
	if value, ok := riauo.mutation.VacancyYear(); ok {
		_spec.SetField(recommendationsipapplications.FieldVacancyYear, field.TypeInt32, value)
	}
	if value, ok := riauo.mutation.AddedVacancyYear(); ok {
		_spec.AddField(recommendationsipapplications.FieldVacancyYear, field.TypeInt32, value)
	}
	if riauo.mutation.VacancyYearCleared() {
		_spec.ClearField(recommendationsipapplications.FieldVacancyYear, field.TypeInt32)
	}
	if value, ok := riauo.mutation.CARecommendations(); ok {
		_spec.SetField(recommendationsipapplications.FieldCARecommendations, field.TypeString, value)
	}
	if riauo.mutation.CARecommendationsCleared() {
		_spec.ClearField(recommendationsipapplications.FieldCARecommendations, field.TypeString)
	}
	if value, ok := riauo.mutation.CAUpdatedAt(); ok {
		_spec.SetField(recommendationsipapplications.FieldCAUpdatedAt, field.TypeTime, value)
	}
	if riauo.mutation.CAUpdatedAtCleared() {
		_spec.ClearField(recommendationsipapplications.FieldCAUpdatedAt, field.TypeTime)
	}
	if value, ok := riauo.mutation.CAUserName(); ok {
		_spec.SetField(recommendationsipapplications.FieldCAUserName, field.TypeString, value)
	}
	if riauo.mutation.CAUserNameCleared() {
		_spec.ClearField(recommendationsipapplications.FieldCAUserName, field.TypeString)
	}
	if value, ok := riauo.mutation.CARemarks(); ok {
		_spec.SetField(recommendationsipapplications.FieldCARemarks, field.TypeString, value)
	}
	if riauo.mutation.CARemarksCleared() {
		_spec.ClearField(recommendationsipapplications.FieldCARemarks, field.TypeString)
	}
	if value, ok := riauo.mutation.NORecommendations(); ok {
		_spec.SetField(recommendationsipapplications.FieldNORecommendations, field.TypeString, value)
	}
	if riauo.mutation.NORecommendationsCleared() {
		_spec.ClearField(recommendationsipapplications.FieldNORecommendations, field.TypeString)
	}
	if value, ok := riauo.mutation.NOUpdatedAt(); ok {
		_spec.SetField(recommendationsipapplications.FieldNOUpdatedAt, field.TypeTime, value)
	}
	if riauo.mutation.NOUpdatedAtCleared() {
		_spec.ClearField(recommendationsipapplications.FieldNOUpdatedAt, field.TypeTime)
	}
	if value, ok := riauo.mutation.NOUserName(); ok {
		_spec.SetField(recommendationsipapplications.FieldNOUserName, field.TypeString, value)
	}
	if riauo.mutation.NOUserNameCleared() {
		_spec.ClearField(recommendationsipapplications.FieldNOUserName, field.TypeString)
	}
	if value, ok := riauo.mutation.NORemarks(); ok {
		_spec.SetField(recommendationsipapplications.FieldNORemarks, field.TypeString, value)
	}
	if riauo.mutation.NORemarksCleared() {
		_spec.ClearField(recommendationsipapplications.FieldNORemarks, field.TypeString)
	}
	if value, ok := riauo.mutation.ApplicationStatus(); ok {
		_spec.SetField(recommendationsipapplications.FieldApplicationStatus, field.TypeString, value)
	}
	if riauo.mutation.ApplicationStatusCleared() {
		_spec.ClearField(recommendationsipapplications.FieldApplicationStatus, field.TypeString)
	}
	if value, ok := riauo.mutation.UpdatedAt(); ok {
		_spec.SetField(recommendationsipapplications.FieldUpdatedAt, field.TypeTime, value)
	}
	if riauo.mutation.UpdatedAtCleared() {
		_spec.ClearField(recommendationsipapplications.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := riauo.mutation.UpdatedBy(); ok {
		_spec.SetField(recommendationsipapplications.FieldUpdatedBy, field.TypeString, value)
	}
	if riauo.mutation.UpdatedByCleared() {
		_spec.ClearField(recommendationsipapplications.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := riauo.mutation.GenerateHallTicketFlag(); ok {
		_spec.SetField(recommendationsipapplications.FieldGenerateHallTicketFlag, field.TypeBool, value)
	}
	if riauo.mutation.GenerateHallTicketFlagCleared() {
		_spec.ClearField(recommendationsipapplications.FieldGenerateHallTicketFlag, field.TypeBool)
	}
	if riauo.mutation.ApplnRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   recommendationsipapplications.ApplnRefTable,
			Columns: []string{recommendationsipapplications.ApplnRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_ip.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := riauo.mutation.ApplnRefIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   recommendationsipapplications.ApplnRefTable,
			Columns: []string{recommendationsipapplications.ApplnRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_ip.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &RecommendationsIPApplications{config: riauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, riauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{recommendationsipapplications.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	riauo.mutation.done = true
	return _node, nil
}
