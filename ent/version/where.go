// Code generated by ent, DO NOT EDIT.

package version

import (
	"recruit/ent/predicate"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Version {
	return predicate.Version(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Version {
	return predicate.Version(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Version {
	return predicate.Version(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Version {
	return predicate.Version(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Version {
	return predicate.Version(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Version {
	return predicate.Version(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Version {
	return predicate.Version(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Version {
	return predicate.Version(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Version {
	return predicate.Version(sql.FieldLTE(FieldID, id))
}

// UiVersion applies equality check predicate on the "UiVersion" field. It's identical to UiVersionEQ.
func UiVersion(v string) predicate.Version {
	return predicate.Version(sql.FieldEQ(FieldUiVersion, v))
}

// ApiVersion applies equality check predicate on the "ApiVersion" field. It's identical to ApiVersionEQ.
func ApiVersion(v string) predicate.Version {
	return predicate.Version(sql.FieldEQ(FieldApiVersion, v))
}

// ApiType applies equality check predicate on the "ApiType" field. It's identical to ApiTypeEQ.
func ApiType(v int32) predicate.Version {
	return predicate.Version(sql.FieldEQ(FieldApiType, v))
}

// UiVersionEQ applies the EQ predicate on the "UiVersion" field.
func UiVersionEQ(v string) predicate.Version {
	return predicate.Version(sql.FieldEQ(FieldUiVersion, v))
}

// UiVersionNEQ applies the NEQ predicate on the "UiVersion" field.
func UiVersionNEQ(v string) predicate.Version {
	return predicate.Version(sql.FieldNEQ(FieldUiVersion, v))
}

// UiVersionIn applies the In predicate on the "UiVersion" field.
func UiVersionIn(vs ...string) predicate.Version {
	return predicate.Version(sql.FieldIn(FieldUiVersion, vs...))
}

// UiVersionNotIn applies the NotIn predicate on the "UiVersion" field.
func UiVersionNotIn(vs ...string) predicate.Version {
	return predicate.Version(sql.FieldNotIn(FieldUiVersion, vs...))
}

// UiVersionGT applies the GT predicate on the "UiVersion" field.
func UiVersionGT(v string) predicate.Version {
	return predicate.Version(sql.FieldGT(FieldUiVersion, v))
}

// UiVersionGTE applies the GTE predicate on the "UiVersion" field.
func UiVersionGTE(v string) predicate.Version {
	return predicate.Version(sql.FieldGTE(FieldUiVersion, v))
}

// UiVersionLT applies the LT predicate on the "UiVersion" field.
func UiVersionLT(v string) predicate.Version {
	return predicate.Version(sql.FieldLT(FieldUiVersion, v))
}

// UiVersionLTE applies the LTE predicate on the "UiVersion" field.
func UiVersionLTE(v string) predicate.Version {
	return predicate.Version(sql.FieldLTE(FieldUiVersion, v))
}

// UiVersionContains applies the Contains predicate on the "UiVersion" field.
func UiVersionContains(v string) predicate.Version {
	return predicate.Version(sql.FieldContains(FieldUiVersion, v))
}

// UiVersionHasPrefix applies the HasPrefix predicate on the "UiVersion" field.
func UiVersionHasPrefix(v string) predicate.Version {
	return predicate.Version(sql.FieldHasPrefix(FieldUiVersion, v))
}

// UiVersionHasSuffix applies the HasSuffix predicate on the "UiVersion" field.
func UiVersionHasSuffix(v string) predicate.Version {
	return predicate.Version(sql.FieldHasSuffix(FieldUiVersion, v))
}

// UiVersionIsNil applies the IsNil predicate on the "UiVersion" field.
func UiVersionIsNil() predicate.Version {
	return predicate.Version(sql.FieldIsNull(FieldUiVersion))
}

// UiVersionNotNil applies the NotNil predicate on the "UiVersion" field.
func UiVersionNotNil() predicate.Version {
	return predicate.Version(sql.FieldNotNull(FieldUiVersion))
}

// UiVersionEqualFold applies the EqualFold predicate on the "UiVersion" field.
func UiVersionEqualFold(v string) predicate.Version {
	return predicate.Version(sql.FieldEqualFold(FieldUiVersion, v))
}

// UiVersionContainsFold applies the ContainsFold predicate on the "UiVersion" field.
func UiVersionContainsFold(v string) predicate.Version {
	return predicate.Version(sql.FieldContainsFold(FieldUiVersion, v))
}

// ApiVersionEQ applies the EQ predicate on the "ApiVersion" field.
func ApiVersionEQ(v string) predicate.Version {
	return predicate.Version(sql.FieldEQ(FieldApiVersion, v))
}

// ApiVersionNEQ applies the NEQ predicate on the "ApiVersion" field.
func ApiVersionNEQ(v string) predicate.Version {
	return predicate.Version(sql.FieldNEQ(FieldApiVersion, v))
}

// ApiVersionIn applies the In predicate on the "ApiVersion" field.
func ApiVersionIn(vs ...string) predicate.Version {
	return predicate.Version(sql.FieldIn(FieldApiVersion, vs...))
}

// ApiVersionNotIn applies the NotIn predicate on the "ApiVersion" field.
func ApiVersionNotIn(vs ...string) predicate.Version {
	return predicate.Version(sql.FieldNotIn(FieldApiVersion, vs...))
}

// ApiVersionGT applies the GT predicate on the "ApiVersion" field.
func ApiVersionGT(v string) predicate.Version {
	return predicate.Version(sql.FieldGT(FieldApiVersion, v))
}

// ApiVersionGTE applies the GTE predicate on the "ApiVersion" field.
func ApiVersionGTE(v string) predicate.Version {
	return predicate.Version(sql.FieldGTE(FieldApiVersion, v))
}

// ApiVersionLT applies the LT predicate on the "ApiVersion" field.
func ApiVersionLT(v string) predicate.Version {
	return predicate.Version(sql.FieldLT(FieldApiVersion, v))
}

// ApiVersionLTE applies the LTE predicate on the "ApiVersion" field.
func ApiVersionLTE(v string) predicate.Version {
	return predicate.Version(sql.FieldLTE(FieldApiVersion, v))
}

// ApiVersionContains applies the Contains predicate on the "ApiVersion" field.
func ApiVersionContains(v string) predicate.Version {
	return predicate.Version(sql.FieldContains(FieldApiVersion, v))
}

// ApiVersionHasPrefix applies the HasPrefix predicate on the "ApiVersion" field.
func ApiVersionHasPrefix(v string) predicate.Version {
	return predicate.Version(sql.FieldHasPrefix(FieldApiVersion, v))
}

// ApiVersionHasSuffix applies the HasSuffix predicate on the "ApiVersion" field.
func ApiVersionHasSuffix(v string) predicate.Version {
	return predicate.Version(sql.FieldHasSuffix(FieldApiVersion, v))
}

// ApiVersionIsNil applies the IsNil predicate on the "ApiVersion" field.
func ApiVersionIsNil() predicate.Version {
	return predicate.Version(sql.FieldIsNull(FieldApiVersion))
}

// ApiVersionNotNil applies the NotNil predicate on the "ApiVersion" field.
func ApiVersionNotNil() predicate.Version {
	return predicate.Version(sql.FieldNotNull(FieldApiVersion))
}

// ApiVersionEqualFold applies the EqualFold predicate on the "ApiVersion" field.
func ApiVersionEqualFold(v string) predicate.Version {
	return predicate.Version(sql.FieldEqualFold(FieldApiVersion, v))
}

// ApiVersionContainsFold applies the ContainsFold predicate on the "ApiVersion" field.
func ApiVersionContainsFold(v string) predicate.Version {
	return predicate.Version(sql.FieldContainsFold(FieldApiVersion, v))
}

// ApiTypeEQ applies the EQ predicate on the "ApiType" field.
func ApiTypeEQ(v int32) predicate.Version {
	return predicate.Version(sql.FieldEQ(FieldApiType, v))
}

// ApiTypeNEQ applies the NEQ predicate on the "ApiType" field.
func ApiTypeNEQ(v int32) predicate.Version {
	return predicate.Version(sql.FieldNEQ(FieldApiType, v))
}

// ApiTypeIn applies the In predicate on the "ApiType" field.
func ApiTypeIn(vs ...int32) predicate.Version {
	return predicate.Version(sql.FieldIn(FieldApiType, vs...))
}

// ApiTypeNotIn applies the NotIn predicate on the "ApiType" field.
func ApiTypeNotIn(vs ...int32) predicate.Version {
	return predicate.Version(sql.FieldNotIn(FieldApiType, vs...))
}

// ApiTypeGT applies the GT predicate on the "ApiType" field.
func ApiTypeGT(v int32) predicate.Version {
	return predicate.Version(sql.FieldGT(FieldApiType, v))
}

// ApiTypeGTE applies the GTE predicate on the "ApiType" field.
func ApiTypeGTE(v int32) predicate.Version {
	return predicate.Version(sql.FieldGTE(FieldApiType, v))
}

// ApiTypeLT applies the LT predicate on the "ApiType" field.
func ApiTypeLT(v int32) predicate.Version {
	return predicate.Version(sql.FieldLT(FieldApiType, v))
}

// ApiTypeLTE applies the LTE predicate on the "ApiType" field.
func ApiTypeLTE(v int32) predicate.Version {
	return predicate.Version(sql.FieldLTE(FieldApiType, v))
}

// ApiTypeIsNil applies the IsNil predicate on the "ApiType" field.
func ApiTypeIsNil() predicate.Version {
	return predicate.Version(sql.FieldIsNull(FieldApiType))
}

// ApiTypeNotNil applies the NotNil predicate on the "ApiType" field.
func ApiTypeNotNil() predicate.Version {
	return predicate.Version(sql.FieldNotNull(FieldApiType))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Version) predicate.Version {
	return predicate.Version(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Version) predicate.Version {
	return predicate.Version(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Version) predicate.Version {
	return predicate.Version(func(s *sql.Selector) {
		p(s.Not())
	})
}
