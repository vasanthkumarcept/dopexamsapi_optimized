// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"recruit/ent/predicate"
	"recruit/ent/reversal_application_ip"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ReversalApplicationIPDelete is the builder for deleting a Reversal_Application_IP entity.
type ReversalApplicationIPDelete struct {
	config
	hooks    []Hook
	mutation *ReversalApplicationIPMutation
}

// Where appends a list predicates to the ReversalApplicationIPDelete builder.
func (raid *ReversalApplicationIPDelete) Where(ps ...predicate.Reversal_Application_IP) *ReversalApplicationIPDelete {
	raid.mutation.Where(ps...)
	return raid
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (raid *ReversalApplicationIPDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, raid.sqlExec, raid.mutation, raid.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (raid *ReversalApplicationIPDelete) ExecX(ctx context.Context) int {
	n, err := raid.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (raid *ReversalApplicationIPDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(reversal_application_ip.Table, sqlgraph.NewFieldSpec(reversal_application_ip.FieldID, field.TypeInt64))
	if ps := raid.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, raid.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	raid.mutation.done = true
	return affected, err
}

// ReversalApplicationIPDeleteOne is the builder for deleting a single Reversal_Application_IP entity.
type ReversalApplicationIPDeleteOne struct {
	raid *ReversalApplicationIPDelete
}

// Where appends a list predicates to the ReversalApplicationIPDelete builder.
func (raido *ReversalApplicationIPDeleteOne) Where(ps ...predicate.Reversal_Application_IP) *ReversalApplicationIPDeleteOne {
	raido.raid.mutation.Where(ps...)
	return raido
}

// Exec executes the deletion query.
func (raido *ReversalApplicationIPDeleteOne) Exec(ctx context.Context) error {
	n, err := raido.raid.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{reversal_application_ip.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (raido *ReversalApplicationIPDeleteOne) ExecX(ctx context.Context) {
	if err := raido.Exec(ctx); err != nil {
		panic(err)
	}
}
