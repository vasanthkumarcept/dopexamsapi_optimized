// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"recruit/ent/vacancyyear"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// VacancyYear is the model entity for the VacancyYear schema.
type VacancyYear struct {
	config `json:"-"`
	// ID of the ent.
	ID int32 `json:"id,omitempty"`
	// FromDate holds the value of the "FromDate" field.
	FromDate time.Time `json:"FromDate,omitempty"`
	// ToDate holds the value of the "ToDate" field.
	ToDate time.Time `json:"ToDate,omitempty"`
	// NotifyCode holds the value of the "NotifyCode" field.
	NotifyCode int32 `json:"NotifyCode,omitempty"`
	// VacancyYear holds the value of the "VacancyYear" field.
	VacancyYear string `json:"VacancyYear,omitempty"`
	// CalendarCode holds the value of the "CalendarCode" field.
	CalendarCode int32 `json:"CalendarCode,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the VacancyYearQuery when eager-loading is set.
	Edges                      VacancyYearEdges `json:"edges"`
	notification_vacancy_years *int32
	selectValues               sql.SelectValues
}

// VacancyYearEdges holds the relations/edges for other nodes in the graph.
type VacancyYearEdges struct {
	// VacancyRef holds the value of the vacancy_ref edge.
	VacancyRef []*ExamCalendar `json:"vacancy_ref,omitempty"`
	// Exams holds the value of the exams edge.
	Exams []*Exam `json:"exams,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// VacancyRefOrErr returns the VacancyRef value or an error if the edge
// was not loaded in eager-loading.
func (e VacancyYearEdges) VacancyRefOrErr() ([]*ExamCalendar, error) {
	if e.loadedTypes[0] {
		return e.VacancyRef, nil
	}
	return nil, &NotLoadedError{edge: "vacancy_ref"}
}

// ExamsOrErr returns the Exams value or an error if the edge
// was not loaded in eager-loading.
func (e VacancyYearEdges) ExamsOrErr() ([]*Exam, error) {
	if e.loadedTypes[1] {
		return e.Exams, nil
	}
	return nil, &NotLoadedError{edge: "exams"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*VacancyYear) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case vacancyyear.FieldID, vacancyyear.FieldNotifyCode, vacancyyear.FieldCalendarCode:
			values[i] = new(sql.NullInt64)
		case vacancyyear.FieldVacancyYear:
			values[i] = new(sql.NullString)
		case vacancyyear.FieldFromDate, vacancyyear.FieldToDate:
			values[i] = new(sql.NullTime)
		case vacancyyear.ForeignKeys[0]: // notification_vacancy_years
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the VacancyYear fields.
func (vy *VacancyYear) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case vacancyyear.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			vy.ID = int32(value.Int64)
		case vacancyyear.FieldFromDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field FromDate", values[i])
			} else if value.Valid {
				vy.FromDate = value.Time
			}
		case vacancyyear.FieldToDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field ToDate", values[i])
			} else if value.Valid {
				vy.ToDate = value.Time
			}
		case vacancyyear.FieldNotifyCode:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field NotifyCode", values[i])
			} else if value.Valid {
				vy.NotifyCode = int32(value.Int64)
			}
		case vacancyyear.FieldVacancyYear:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field VacancyYear", values[i])
			} else if value.Valid {
				vy.VacancyYear = value.String
			}
		case vacancyyear.FieldCalendarCode:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field CalendarCode", values[i])
			} else if value.Valid {
				vy.CalendarCode = int32(value.Int64)
			}
		case vacancyyear.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field notification_vacancy_years", value)
			} else if value.Valid {
				vy.notification_vacancy_years = new(int32)
				*vy.notification_vacancy_years = int32(value.Int64)
			}
		default:
			vy.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the VacancyYear.
// This includes values selected through modifiers, order, etc.
func (vy *VacancyYear) Value(name string) (ent.Value, error) {
	return vy.selectValues.Get(name)
}

// QueryVacancyRef queries the "vacancy_ref" edge of the VacancyYear entity.
func (vy *VacancyYear) QueryVacancyRef() *ExamCalendarQuery {
	return NewVacancyYearClient(vy.config).QueryVacancyRef(vy)
}

// QueryExams queries the "exams" edge of the VacancyYear entity.
func (vy *VacancyYear) QueryExams() *ExamQuery {
	return NewVacancyYearClient(vy.config).QueryExams(vy)
}

// Update returns a builder for updating this VacancyYear.
// Note that you need to call VacancyYear.Unwrap() before calling this method if this VacancyYear
// was returned from a transaction, and the transaction was committed or rolled back.
func (vy *VacancyYear) Update() *VacancyYearUpdateOne {
	return NewVacancyYearClient(vy.config).UpdateOne(vy)
}

// Unwrap unwraps the VacancyYear entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (vy *VacancyYear) Unwrap() *VacancyYear {
	_tx, ok := vy.config.driver.(*txDriver)
	if !ok {
		panic("ent: VacancyYear is not a transactional entity")
	}
	vy.config.driver = _tx.drv
	return vy
}

// String implements the fmt.Stringer.
func (vy *VacancyYear) String() string {
	var builder strings.Builder
	builder.WriteString("VacancyYear(")
	builder.WriteString(fmt.Sprintf("id=%v, ", vy.ID))
	builder.WriteString("FromDate=")
	builder.WriteString(vy.FromDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("ToDate=")
	builder.WriteString(vy.ToDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("NotifyCode=")
	builder.WriteString(fmt.Sprintf("%v", vy.NotifyCode))
	builder.WriteString(", ")
	builder.WriteString("VacancyYear=")
	builder.WriteString(vy.VacancyYear)
	builder.WriteString(", ")
	builder.WriteString("CalendarCode=")
	builder.WriteString(fmt.Sprintf("%v", vy.CalendarCode))
	builder.WriteByte(')')
	return builder.String()
}

// VacancyYears is a parsable slice of VacancyYear.
type VacancyYears []*VacancyYear
