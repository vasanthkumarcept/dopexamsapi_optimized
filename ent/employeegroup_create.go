// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"recruit/ent/employeegroup"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// EmployeeGroupCreate is the builder for creating a EmployeeGroup entity.
type EmployeeGroupCreate struct {
	config
	mutation *EmployeeGroupMutation
	hooks    []Hook
}

// SetGroupCode sets the "GroupCode" field.
func (egc *EmployeeGroupCreate) SetGroupCode(s string) *EmployeeGroupCreate {
	egc.mutation.SetGroupCode(s)
	return egc
}

// SetNillableGroupCode sets the "GroupCode" field if the given value is not nil.
func (egc *EmployeeGroupCreate) SetNillableGroupCode(s *string) *EmployeeGroupCreate {
	if s != nil {
		egc.SetGroupCode(*s)
	}
	return egc
}

// SetGroupDescription sets the "GroupDescription" field.
func (egc *EmployeeGroupCreate) SetGroupDescription(s string) *EmployeeGroupCreate {
	egc.mutation.SetGroupDescription(s)
	return egc
}

// SetNillableGroupDescription sets the "GroupDescription" field if the given value is not nil.
func (egc *EmployeeGroupCreate) SetNillableGroupDescription(s *string) *EmployeeGroupCreate {
	if s != nil {
		egc.SetGroupDescription(*s)
	}
	return egc
}

// SetOrderNumber sets the "OrderNumber" field.
func (egc *EmployeeGroupCreate) SetOrderNumber(s string) *EmployeeGroupCreate {
	egc.mutation.SetOrderNumber(s)
	return egc
}

// SetNillableOrderNumber sets the "OrderNumber" field if the given value is not nil.
func (egc *EmployeeGroupCreate) SetNillableOrderNumber(s *string) *EmployeeGroupCreate {
	if s != nil {
		egc.SetOrderNumber(*s)
	}
	return egc
}

// SetStatus sets the "Status" field.
func (egc *EmployeeGroupCreate) SetStatus(s string) *EmployeeGroupCreate {
	egc.mutation.SetStatus(s)
	return egc
}

// SetNillableStatus sets the "Status" field if the given value is not nil.
func (egc *EmployeeGroupCreate) SetNillableStatus(s *string) *EmployeeGroupCreate {
	if s != nil {
		egc.SetStatus(*s)
	}
	return egc
}

// SetCreatedById sets the "CreatedById" field.
func (egc *EmployeeGroupCreate) SetCreatedById(i int32) *EmployeeGroupCreate {
	egc.mutation.SetCreatedById(i)
	return egc
}

// SetNillableCreatedById sets the "CreatedById" field if the given value is not nil.
func (egc *EmployeeGroupCreate) SetNillableCreatedById(i *int32) *EmployeeGroupCreate {
	if i != nil {
		egc.SetCreatedById(*i)
	}
	return egc
}

// SetCreatedByUserName sets the "CreatedByUserName" field.
func (egc *EmployeeGroupCreate) SetCreatedByUserName(s string) *EmployeeGroupCreate {
	egc.mutation.SetCreatedByUserName(s)
	return egc
}

// SetNillableCreatedByUserName sets the "CreatedByUserName" field if the given value is not nil.
func (egc *EmployeeGroupCreate) SetNillableCreatedByUserName(s *string) *EmployeeGroupCreate {
	if s != nil {
		egc.SetCreatedByUserName(*s)
	}
	return egc
}

// SetCreatedByEmployeeId sets the "CreatedByEmployeeId" field.
func (egc *EmployeeGroupCreate) SetCreatedByEmployeeId(s string) *EmployeeGroupCreate {
	egc.mutation.SetCreatedByEmployeeId(s)
	return egc
}

// SetNillableCreatedByEmployeeId sets the "CreatedByEmployeeId" field if the given value is not nil.
func (egc *EmployeeGroupCreate) SetNillableCreatedByEmployeeId(s *string) *EmployeeGroupCreate {
	if s != nil {
		egc.SetCreatedByEmployeeId(*s)
	}
	return egc
}

// SetCreatedByDesignation sets the "CreatedByDesignation" field.
func (egc *EmployeeGroupCreate) SetCreatedByDesignation(s string) *EmployeeGroupCreate {
	egc.mutation.SetCreatedByDesignation(s)
	return egc
}

// SetNillableCreatedByDesignation sets the "CreatedByDesignation" field if the given value is not nil.
func (egc *EmployeeGroupCreate) SetNillableCreatedByDesignation(s *string) *EmployeeGroupCreate {
	if s != nil {
		egc.SetCreatedByDesignation(*s)
	}
	return egc
}

// SetCreatedDate sets the "CreatedDate" field.
func (egc *EmployeeGroupCreate) SetCreatedDate(t time.Time) *EmployeeGroupCreate {
	egc.mutation.SetCreatedDate(t)
	return egc
}

// SetNillableCreatedDate sets the "CreatedDate" field if the given value is not nil.
func (egc *EmployeeGroupCreate) SetNillableCreatedDate(t *time.Time) *EmployeeGroupCreate {
	if t != nil {
		egc.SetCreatedDate(*t)
	}
	return egc
}

// SetVerifiedById sets the "VerifiedById" field.
func (egc *EmployeeGroupCreate) SetVerifiedById(i int64) *EmployeeGroupCreate {
	egc.mutation.SetVerifiedById(i)
	return egc
}

// SetNillableVerifiedById sets the "VerifiedById" field if the given value is not nil.
func (egc *EmployeeGroupCreate) SetNillableVerifiedById(i *int64) *EmployeeGroupCreate {
	if i != nil {
		egc.SetVerifiedById(*i)
	}
	return egc
}

// SetVerifiedByUserName sets the "VerifiedByUserName" field.
func (egc *EmployeeGroupCreate) SetVerifiedByUserName(s string) *EmployeeGroupCreate {
	egc.mutation.SetVerifiedByUserName(s)
	return egc
}

// SetNillableVerifiedByUserName sets the "VerifiedByUserName" field if the given value is not nil.
func (egc *EmployeeGroupCreate) SetNillableVerifiedByUserName(s *string) *EmployeeGroupCreate {
	if s != nil {
		egc.SetVerifiedByUserName(*s)
	}
	return egc
}

// SetVerifiedByEmployeeId sets the "VerifiedByEmployeeId" field.
func (egc *EmployeeGroupCreate) SetVerifiedByEmployeeId(s string) *EmployeeGroupCreate {
	egc.mutation.SetVerifiedByEmployeeId(s)
	return egc
}

// SetNillableVerifiedByEmployeeId sets the "VerifiedByEmployeeId" field if the given value is not nil.
func (egc *EmployeeGroupCreate) SetNillableVerifiedByEmployeeId(s *string) *EmployeeGroupCreate {
	if s != nil {
		egc.SetVerifiedByEmployeeId(*s)
	}
	return egc
}

// SetVerifiedByDesignation sets the "VerifiedByDesignation" field.
func (egc *EmployeeGroupCreate) SetVerifiedByDesignation(s string) *EmployeeGroupCreate {
	egc.mutation.SetVerifiedByDesignation(s)
	return egc
}

// SetNillableVerifiedByDesignation sets the "VerifiedByDesignation" field if the given value is not nil.
func (egc *EmployeeGroupCreate) SetNillableVerifiedByDesignation(s *string) *EmployeeGroupCreate {
	if s != nil {
		egc.SetVerifiedByDesignation(*s)
	}
	return egc
}

// SetVerifiedDate sets the "VerifiedDate" field.
func (egc *EmployeeGroupCreate) SetVerifiedDate(t time.Time) *EmployeeGroupCreate {
	egc.mutation.SetVerifiedDate(t)
	return egc
}

// SetNillableVerifiedDate sets the "VerifiedDate" field if the given value is not nil.
func (egc *EmployeeGroupCreate) SetNillableVerifiedDate(t *time.Time) *EmployeeGroupCreate {
	if t != nil {
		egc.SetVerifiedDate(*t)
	}
	return egc
}

// SetDeletedById sets the "DeletedById" field.
func (egc *EmployeeGroupCreate) SetDeletedById(i int64) *EmployeeGroupCreate {
	egc.mutation.SetDeletedById(i)
	return egc
}

// SetNillableDeletedById sets the "DeletedById" field if the given value is not nil.
func (egc *EmployeeGroupCreate) SetNillableDeletedById(i *int64) *EmployeeGroupCreate {
	if i != nil {
		egc.SetDeletedById(*i)
	}
	return egc
}

// SetDeletedByUserName sets the "DeletedByUserName" field.
func (egc *EmployeeGroupCreate) SetDeletedByUserName(s string) *EmployeeGroupCreate {
	egc.mutation.SetDeletedByUserName(s)
	return egc
}

// SetNillableDeletedByUserName sets the "DeletedByUserName" field if the given value is not nil.
func (egc *EmployeeGroupCreate) SetNillableDeletedByUserName(s *string) *EmployeeGroupCreate {
	if s != nil {
		egc.SetDeletedByUserName(*s)
	}
	return egc
}

// SetDeletedByEmployeeId sets the "DeletedByEmployeeId" field.
func (egc *EmployeeGroupCreate) SetDeletedByEmployeeId(s string) *EmployeeGroupCreate {
	egc.mutation.SetDeletedByEmployeeId(s)
	return egc
}

// SetNillableDeletedByEmployeeId sets the "DeletedByEmployeeId" field if the given value is not nil.
func (egc *EmployeeGroupCreate) SetNillableDeletedByEmployeeId(s *string) *EmployeeGroupCreate {
	if s != nil {
		egc.SetDeletedByEmployeeId(*s)
	}
	return egc
}

// SetDeletedByDesignation sets the "DeletedByDesignation" field.
func (egc *EmployeeGroupCreate) SetDeletedByDesignation(s string) *EmployeeGroupCreate {
	egc.mutation.SetDeletedByDesignation(s)
	return egc
}

// SetNillableDeletedByDesignation sets the "DeletedByDesignation" field if the given value is not nil.
func (egc *EmployeeGroupCreate) SetNillableDeletedByDesignation(s *string) *EmployeeGroupCreate {
	if s != nil {
		egc.SetDeletedByDesignation(*s)
	}
	return egc
}

// SetDeletedDate sets the "DeletedDate" field.
func (egc *EmployeeGroupCreate) SetDeletedDate(t time.Time) *EmployeeGroupCreate {
	egc.mutation.SetDeletedDate(t)
	return egc
}

// SetNillableDeletedDate sets the "DeletedDate" field if the given value is not nil.
func (egc *EmployeeGroupCreate) SetNillableDeletedDate(t *time.Time) *EmployeeGroupCreate {
	if t != nil {
		egc.SetDeletedDate(*t)
	}
	return egc
}

// SetID sets the "id" field.
func (egc *EmployeeGroupCreate) SetID(i int32) *EmployeeGroupCreate {
	egc.mutation.SetID(i)
	return egc
}

// Mutation returns the EmployeeGroupMutation object of the builder.
func (egc *EmployeeGroupCreate) Mutation() *EmployeeGroupMutation {
	return egc.mutation
}

// Save creates the EmployeeGroup in the database.
func (egc *EmployeeGroupCreate) Save(ctx context.Context) (*EmployeeGroup, error) {
	return withHooks(ctx, egc.sqlSave, egc.mutation, egc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (egc *EmployeeGroupCreate) SaveX(ctx context.Context) *EmployeeGroup {
	v, err := egc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (egc *EmployeeGroupCreate) Exec(ctx context.Context) error {
	_, err := egc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (egc *EmployeeGroupCreate) ExecX(ctx context.Context) {
	if err := egc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (egc *EmployeeGroupCreate) check() error {
	return nil
}

func (egc *EmployeeGroupCreate) sqlSave(ctx context.Context) (*EmployeeGroup, error) {
	if err := egc.check(); err != nil {
		return nil, err
	}
	_node, _spec := egc.createSpec()
	if err := sqlgraph.CreateNode(ctx, egc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int32(id)
	}
	egc.mutation.id = &_node.ID
	egc.mutation.done = true
	return _node, nil
}

func (egc *EmployeeGroupCreate) createSpec() (*EmployeeGroup, *sqlgraph.CreateSpec) {
	var (
		_node = &EmployeeGroup{config: egc.config}
		_spec = sqlgraph.NewCreateSpec(employeegroup.Table, sqlgraph.NewFieldSpec(employeegroup.FieldID, field.TypeInt32))
	)
	if id, ok := egc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := egc.mutation.GroupCode(); ok {
		_spec.SetField(employeegroup.FieldGroupCode, field.TypeString, value)
		_node.GroupCode = value
	}
	if value, ok := egc.mutation.GroupDescription(); ok {
		_spec.SetField(employeegroup.FieldGroupDescription, field.TypeString, value)
		_node.GroupDescription = value
	}
	if value, ok := egc.mutation.OrderNumber(); ok {
		_spec.SetField(employeegroup.FieldOrderNumber, field.TypeString, value)
		_node.OrderNumber = value
	}
	if value, ok := egc.mutation.Status(); ok {
		_spec.SetField(employeegroup.FieldStatus, field.TypeString, value)
		_node.Status = value
	}
	if value, ok := egc.mutation.CreatedById(); ok {
		_spec.SetField(employeegroup.FieldCreatedById, field.TypeInt32, value)
		_node.CreatedById = value
	}
	if value, ok := egc.mutation.CreatedByUserName(); ok {
		_spec.SetField(employeegroup.FieldCreatedByUserName, field.TypeString, value)
		_node.CreatedByUserName = value
	}
	if value, ok := egc.mutation.CreatedByEmployeeId(); ok {
		_spec.SetField(employeegroup.FieldCreatedByEmployeeId, field.TypeString, value)
		_node.CreatedByEmployeeId = value
	}
	if value, ok := egc.mutation.CreatedByDesignation(); ok {
		_spec.SetField(employeegroup.FieldCreatedByDesignation, field.TypeString, value)
		_node.CreatedByDesignation = value
	}
	if value, ok := egc.mutation.CreatedDate(); ok {
		_spec.SetField(employeegroup.FieldCreatedDate, field.TypeTime, value)
		_node.CreatedDate = value
	}
	if value, ok := egc.mutation.VerifiedById(); ok {
		_spec.SetField(employeegroup.FieldVerifiedById, field.TypeInt64, value)
		_node.VerifiedById = value
	}
	if value, ok := egc.mutation.VerifiedByUserName(); ok {
		_spec.SetField(employeegroup.FieldVerifiedByUserName, field.TypeString, value)
		_node.VerifiedByUserName = value
	}
	if value, ok := egc.mutation.VerifiedByEmployeeId(); ok {
		_spec.SetField(employeegroup.FieldVerifiedByEmployeeId, field.TypeString, value)
		_node.VerifiedByEmployeeId = value
	}
	if value, ok := egc.mutation.VerifiedByDesignation(); ok {
		_spec.SetField(employeegroup.FieldVerifiedByDesignation, field.TypeString, value)
		_node.VerifiedByDesignation = value
	}
	if value, ok := egc.mutation.VerifiedDate(); ok {
		_spec.SetField(employeegroup.FieldVerifiedDate, field.TypeTime, value)
		_node.VerifiedDate = value
	}
	if value, ok := egc.mutation.DeletedById(); ok {
		_spec.SetField(employeegroup.FieldDeletedById, field.TypeInt64, value)
		_node.DeletedById = value
	}
	if value, ok := egc.mutation.DeletedByUserName(); ok {
		_spec.SetField(employeegroup.FieldDeletedByUserName, field.TypeString, value)
		_node.DeletedByUserName = value
	}
	if value, ok := egc.mutation.DeletedByEmployeeId(); ok {
		_spec.SetField(employeegroup.FieldDeletedByEmployeeId, field.TypeString, value)
		_node.DeletedByEmployeeId = value
	}
	if value, ok := egc.mutation.DeletedByDesignation(); ok {
		_spec.SetField(employeegroup.FieldDeletedByDesignation, field.TypeString, value)
		_node.DeletedByDesignation = value
	}
	if value, ok := egc.mutation.DeletedDate(); ok {
		_spec.SetField(employeegroup.FieldDeletedDate, field.TypeTime, value)
		_node.DeletedDate = value
	}
	return _node, _spec
}

// EmployeeGroupCreateBulk is the builder for creating many EmployeeGroup entities in bulk.
type EmployeeGroupCreateBulk struct {
	config
	builders []*EmployeeGroupCreate
}

// Save creates the EmployeeGroup entities in the database.
func (egcb *EmployeeGroupCreateBulk) Save(ctx context.Context) ([]*EmployeeGroup, error) {
	specs := make([]*sqlgraph.CreateSpec, len(egcb.builders))
	nodes := make([]*EmployeeGroup, len(egcb.builders))
	mutators := make([]Mutator, len(egcb.builders))
	for i := range egcb.builders {
		func(i int, root context.Context) {
			builder := egcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*EmployeeGroupMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, egcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, egcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, egcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (egcb *EmployeeGroupCreateBulk) SaveX(ctx context.Context) []*EmployeeGroup {
	v, err := egcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (egcb *EmployeeGroupCreateBulk) Exec(ctx context.Context) error {
	_, err := egcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (egcb *EmployeeGroupCreateBulk) ExecX(ctx context.Context) {
	if err := egcb.Exec(ctx); err != nil {
		panic(err)
	}
}
