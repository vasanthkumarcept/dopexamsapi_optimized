// Code generated by ent, DO NOT EDIT.

package exam_applications_gdspa

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the exam_applications_gdspa type in the database.
	Label = "exam_applications_gdspa"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "ApplicationID"
	// FieldApplicationNumber holds the string denoting the applicationnumber field in the database.
	FieldApplicationNumber = "application_number"
	// FieldApplnSubmittedDate holds the string denoting the applnsubmitteddate field in the database.
	FieldApplnSubmittedDate = "appln_submitted_date"
	// FieldExamCode holds the string denoting the examcode field in the database.
	FieldExamCode = "exam_code"
	// FieldExamShortName holds the string denoting the examshortname field in the database.
	FieldExamShortName = "exam_short_name"
	// FieldExamName holds the string denoting the examname field in the database.
	FieldExamName = "exam_name"
	// FieldSmsExamShortName holds the string denoting the smsexamshortname field in the database.
	FieldSmsExamShortName = "sms_exam_short_name"
	// FieldExamYear holds the string denoting the examyear field in the database.
	FieldExamYear = "exam_year"
	// FieldUserID holds the string denoting the userid field in the database.
	FieldUserID = "user_id"
	// FieldEmployeeID holds the string denoting the employeeid field in the database.
	FieldEmployeeID = "employee_id"
	// FieldEmployeeName holds the string denoting the employeename field in the database.
	FieldEmployeeName = "employee_name"
	// FieldDOB holds the string denoting the dob field in the database.
	FieldDOB = "dob"
	// FieldGender holds the string denoting the gender field in the database.
	FieldGender = "gender"
	// FieldMobileNumber holds the string denoting the mobilenumber field in the database.
	FieldMobileNumber = "mobile_number"
	// FieldEmailID holds the string denoting the emailid field in the database.
	FieldEmailID = "email_id"
	// FieldCategoryCode holds the string denoting the categorycode field in the database.
	FieldCategoryCode = "category_code"
	// FieldCategoryDescription holds the string denoting the categorydescription field in the database.
	FieldCategoryDescription = "category_description"
	// FieldDisabilityTypeID holds the string denoting the disabilitytypeid field in the database.
	FieldDisabilityTypeID = "disability_type_id"
	// FieldDisabilityTypeCode holds the string denoting the disabilitytypecode field in the database.
	FieldDisabilityTypeCode = "disability_type_code"
	// FieldDisabilityTypeDescription holds the string denoting the disabilitytypedescription field in the database.
	FieldDisabilityTypeDescription = "disability_type_description"
	// FieldDisabilityPercentage holds the string denoting the disabilitypercentage field in the database.
	FieldDisabilityPercentage = "disability_percentage"
	// FieldDCCS holds the string denoting the dccs field in the database.
	FieldDCCS = "dccs"
	// FieldEntryPostCode holds the string denoting the entrypostcode field in the database.
	FieldEntryPostCode = "entry_post_code"
	// FieldEntryPostDescription holds the string denoting the entrypostdescription field in the database.
	FieldEntryPostDescription = "entry_post_description"
	// FieldPresentPostCode holds the string denoting the presentpostcode field in the database.
	FieldPresentPostCode = "present_post_code"
	// FieldPresentPostDescription holds the string denoting the presentpostdescription field in the database.
	FieldPresentPostDescription = "present_post_description"
	// FieldFeederPostCode holds the string denoting the feederpostcode field in the database.
	FieldFeederPostCode = "feeder_post_code"
	// FieldFeederPostDescription holds the string denoting the feederpostdescription field in the database.
	FieldFeederPostDescription = "feeder_post_description"
	// FieldFeederPostJoiningDate holds the string denoting the feederpostjoiningdate field in the database.
	FieldFeederPostJoiningDate = "feeder_post_joining_date"
	// FieldPresentDesignation holds the string denoting the presentdesignation field in the database.
	FieldPresentDesignation = "present_designation"
	// FieldEducationCode holds the string denoting the educationcode field in the database.
	FieldEducationCode = "education_code"
	// FieldEducationDescription holds the string denoting the educationdescription field in the database.
	FieldEducationDescription = "education_description"
	// FieldFacilityUniqueID holds the string denoting the facilityuniqueid field in the database.
	FieldFacilityUniqueID = "facility_unique_id"
	// FieldWorkingOfficePincode holds the string denoting the workingofficepincode field in the database.
	FieldWorkingOfficePincode = "working_office_pincode"
	// FieldWorkingOfficeFacilityID holds the string denoting the workingofficefacilityid field in the database.
	FieldWorkingOfficeFacilityID = "working_office_facility_id"
	// FieldWorkingOfficeName holds the string denoting the workingofficename field in the database.
	FieldWorkingOfficeName = "working_office_name"
	// FieldWorkingOfficeCircleFacilityID holds the string denoting the workingofficecirclefacilityid field in the database.
	FieldWorkingOfficeCircleFacilityID = "working_office_circle_facility_id"
	// FieldWorkingOfficeCircleName holds the string denoting the workingofficecirclename field in the database.
	FieldWorkingOfficeCircleName = "working_office_circle_name"
	// FieldWorkingOfficeRegionFacilityID holds the string denoting the workingofficeregionfacilityid field in the database.
	FieldWorkingOfficeRegionFacilityID = "working_office_region_facility_id"
	// FieldWorkingOfficeRegionName holds the string denoting the workingofficeregionname field in the database.
	FieldWorkingOfficeRegionName = "working_office_region_name"
	// FieldWorkingOfficeDivisionFacilityID holds the string denoting the workingofficedivisionfacilityid field in the database.
	FieldWorkingOfficeDivisionFacilityID = "working_office_division_facility_id"
	// FieldWorkingOfficeDivisionName holds the string denoting the workingofficedivisionname field in the database.
	FieldWorkingOfficeDivisionName = "working_office_division_name"
	// FieldReportingOfficeFacilityID holds the string denoting the reportingofficefacilityid field in the database.
	FieldReportingOfficeFacilityID = "reporting_office_facility_id"
	// FieldReportingOfficeName holds the string denoting the reportingofficename field in the database.
	FieldReportingOfficeName = "reporting_office_name"
	// FieldLienControllingOfficeID holds the string denoting the liencontrollingofficeid field in the database.
	FieldLienControllingOfficeID = "lien_controlling_office_id"
	// FieldLienControllingOfficeName holds the string denoting the liencontrollingofficename field in the database.
	FieldLienControllingOfficeName = "lien_controlling_office_name"
	// FieldInDeputation holds the string denoting the indeputation field in the database.
	FieldInDeputation = "in_deputation"
	// FieldDeputationType holds the string denoting the deputationtype field in the database.
	FieldDeputationType = "deputation_type"
	// FieldDeputationOfficeUniqueId holds the string denoting the deputationofficeuniqueid field in the database.
	FieldDeputationOfficeUniqueId = "deputation_office_unique_id"
	// FieldDeputationOfficeFacilityID holds the string denoting the deputationofficefacilityid field in the database.
	FieldDeputationOfficeFacilityID = "deputation_office_facility_id"
	// FieldDeputationOfficeName holds the string denoting the deputationofficename field in the database.
	FieldDeputationOfficeName = "deputation_office_name"
	// FieldDeputationControllingOfficeID holds the string denoting the deputationcontrollingofficeid field in the database.
	FieldDeputationControllingOfficeID = "deputation_controlling_office_id"
	// FieldDeputationControllingOfficeName holds the string denoting the deputationcontrollingofficename field in the database.
	FieldDeputationControllingOfficeName = "deputation_controlling_office_name"
	// FieldControllingOfficeFacilityID holds the string denoting the controllingofficefacilityid field in the database.
	FieldControllingOfficeFacilityID = "controlling_office_facility_id"
	// FieldControllingOfficeName holds the string denoting the controllingofficename field in the database.
	FieldControllingOfficeName = "controlling_office_name"
	// FieldSubdivisionOfficeFacilityID holds the string denoting the subdivisionofficefacilityid field in the database.
	FieldSubdivisionOfficeFacilityID = "subdivision_office_facility_id"
	// FieldSubdivisionOfficeName holds the string denoting the subdivisionofficename field in the database.
	FieldSubdivisionOfficeName = "subdivision_office_name"
	// FieldNodalOfficeFacilityID holds the string denoting the nodalofficefacilityid field in the database.
	FieldNodalOfficeFacilityID = "nodal_office_facility_id"
	// FieldNodalOfficeName holds the string denoting the nodalofficename field in the database.
	FieldNodalOfficeName = "nodal_office_name"
	// FieldExamCityCenterCode holds the string denoting the examcitycentercode field in the database.
	FieldExamCityCenterCode = "exam_city_center_code"
	// FieldCenterFacilityId holds the string denoting the centerfacilityid field in the database.
	FieldCenterFacilityId = "center_facility_id"
	// FieldCentrePreference holds the string denoting the centrepreference field in the database.
	FieldCentrePreference = "centre_preference"
	// FieldSignature holds the string denoting the signature field in the database.
	FieldSignature = "signature"
	// FieldPhoto holds the string denoting the photo field in the database.
	FieldPhoto = "photo"
	// FieldSignaturePath holds the string denoting the signaturepath field in the database.
	FieldSignaturePath = "signature_path"
	// FieldPhotoPath holds the string denoting the photopath field in the database.
	FieldPhotoPath = "photo_path"
	// FieldCandidatePhoto holds the string denoting the candidatephoto field in the database.
	FieldCandidatePhoto = "candidate_photo"
	// FieldCandidateSignature holds the string denoting the candidatesignature field in the database.
	FieldCandidateSignature = "candidate_signature"
	// FieldTempHallTicket holds the string denoting the temphallticket field in the database.
	FieldTempHallTicket = "temp_hall_ticket"
	// FieldCandidateRemarks holds the string denoting the candidateremarks field in the database.
	FieldCandidateRemarks = "candidate_remarks"
	// FieldVAGeneralRemarks holds the string denoting the vageneralremarks field in the database.
	FieldVAGeneralRemarks = "va_general_remarks"
	// FieldCAGeneralRemarks holds the string denoting the cageneralremarks field in the database.
	FieldCAGeneralRemarks = "ca_general_remarks"
	// FieldNAGeneralRemarks holds the string denoting the nageneralremarks field in the database.
	FieldNAGeneralRemarks = "na_general_remarks"
	// FieldApplicationStatus holds the string denoting the applicationstatus field in the database.
	FieldApplicationStatus = "application_status"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldRecommendedStatus holds the string denoting the recommendedstatus field in the database.
	FieldRecommendedStatus = "recommended_status"
	// FieldDesignationID holds the string denoting the designationid field in the database.
	FieldDesignationID = "designation_id"
	// FieldVAUserId holds the string denoting the va_userid field in the database.
	FieldVAUserId = "va_user_id"
	// FieldVAUserName holds the string denoting the va_username field in the database.
	FieldVAUserName = "va_user_name"
	// FieldVAEmployeeID holds the string denoting the va_employeeid field in the database.
	FieldVAEmployeeID = "va_employee_id"
	// FieldVAEmployeeDesignation holds the string denoting the va_employeedesignation field in the database.
	FieldVAEmployeeDesignation = "va_employee_designation"
	// FieldVARemarks holds the string denoting the va_remarks field in the database.
	FieldVARemarks = "va_remarks"
	// FieldVADate holds the string denoting the va_date field in the database.
	FieldVADate = "va_date"
	// FieldCAUserId holds the string denoting the ca_userid field in the database.
	FieldCAUserId = "ca_user_id"
	// FieldCAUserName holds the string denoting the ca_username field in the database.
	FieldCAUserName = "ca_user_name"
	// FieldCAEmployeeID holds the string denoting the ca_employeeid field in the database.
	FieldCAEmployeeID = "ca_employee_id"
	// FieldCAEmployeeDesignation holds the string denoting the ca_employeedesignation field in the database.
	FieldCAEmployeeDesignation = "ca_employee_designation"
	// FieldCARemarks holds the string denoting the ca_remarks field in the database.
	FieldCARemarks = "ca_remarks"
	// FieldCADate holds the string denoting the ca_date field in the database.
	FieldCADate = "ca_date"
	// FieldNAUserId holds the string denoting the na_userid field in the database.
	FieldNAUserId = "na_user_id"
	// FieldNAUserName holds the string denoting the na_username field in the database.
	FieldNAUserName = "na_user_name"
	// FieldNAEmployeeID holds the string denoting the na_employeeid field in the database.
	FieldNAEmployeeID = "na_employee_id"
	// FieldNAEmployeeDesignation holds the string denoting the na_employeedesignation field in the database.
	FieldNAEmployeeDesignation = "na_employee_designation"
	// FieldNARemarks holds the string denoting the na_remarks field in the database.
	FieldNARemarks = "na_remarks"
	// FieldNADate holds the string denoting the na_date field in the database.
	FieldNADate = "na_date"
	// FieldAppliactionRemarks holds the string denoting the appliactionremarks field in the database.
	FieldAppliactionRemarks = "appliaction_remarks"
	// FieldCadrePreferences holds the string denoting the cadrepreferences field in the database.
	FieldCadrePreferences = "cadre_preferences"
	// FieldCAPreviousRemarks holds the string denoting the capreviousremarks field in the database.
	FieldCAPreviousRemarks = "ca_previous_remarks"
	// FieldGenerateHallTicketFlag holds the string denoting the generatehallticketflag field in the database.
	FieldGenerateHallTicketFlag = "generate_hall_ticket_flag"
	// FieldPunishmentStatus holds the string denoting the punishmentstatus field in the database.
	FieldPunishmentStatus = "punishment_status"
	// FieldDisciplinaryCaseStatus holds the string denoting the disciplinarycasestatus field in the database.
	FieldDisciplinaryCaseStatus = "disciplinary_case_status"
	// FieldHallTicketNumber holds the string denoting the hallticketnumber field in the database.
	FieldHallTicketNumber = "hall_ticket_number"
	// FieldHallTicketGeneratedFlag holds the string denoting the hallticketgeneratedflag field in the database.
	FieldHallTicketGeneratedFlag = "hall_ticket_generated_flag"
	// FieldGenerateHallTicketFlagByNO holds the string denoting the generatehallticketflagbyno field in the database.
	FieldGenerateHallTicketFlagByNO = "generate_hall_ticket_flag_by_no"
	// FieldHallTicketGeneratedDate holds the string denoting the hallticketgenerateddate field in the database.
	FieldHallTicketGeneratedDate = "hall_ticket_generated_date"
	// FieldTemporaryHallTicket holds the string denoting the temporaryhallticket field in the database.
	FieldTemporaryHallTicket = "temporary_hall_ticket"
	// FieldOptionUsed holds the string denoting the optionused field in the database.
	FieldOptionUsed = "option_used"
	// FieldRemarks holds the string denoting the remarks field in the database.
	FieldRemarks = "remarks"
	// FieldCadre holds the string denoting the cadre field in the database.
	FieldCadre = "cadre"
	// FieldEmployeePost holds the string denoting the employeepost field in the database.
	FieldEmployeePost = "employee_post"
	// FieldDOJInEligiblePost holds the string denoting the dojineligiblepost field in the database.
	FieldDOJInEligiblePost = "doj_in_eligible_post"
	// FieldDivisionPreferences holds the string denoting the divisionpreferences field in the database.
	FieldDivisionPreferences = "division_preferences"
	// FieldRoleUserCode holds the string denoting the roleusercode field in the database.
	FieldRoleUserCode = "role_user_code"
	// FieldCircleSID holds the string denoting the circlesid field in the database.
	FieldCircleSID = "circle_sid"
	// FieldServiceLength holds the string denoting the servicelength field in the database.
	FieldServiceLength = "service_length"
	// FieldNonQualifyingService holds the string denoting the nonqualifyingservice field in the database.
	FieldNonQualifyingService = "non_qualifying_service"
	// FieldDCInPresentCadre holds the string denoting the dcinpresentcadre field in the database.
	FieldDCInPresentCadre = "dc_in_present_cadre"
	// FieldReportingOfficeID holds the string denoting the reportingofficeid field in the database.
	FieldReportingOfficeID = "reporting_office_id"
	// FieldPostPreferences holds the string denoting the postpreferences field in the database.
	FieldPostPreferences = "post_preferences"
	// FieldUnitPreferences holds the string denoting the unitpreferences field in the database.
	FieldUnitPreferences = "unit_preferences"
	// FieldCenterId holds the string denoting the centerid field in the database.
	FieldCenterId = "center_id"
	// FieldCenterCode holds the string denoting the centercode field in the database.
	FieldCenterCode = "center_code"
	// FieldClaimingQualifyingService holds the string denoting the claimingqualifyingservice field in the database.
	FieldClaimingQualifyingService = "claiming_qualifying_service"
	// FieldDeputationOfficePincode holds the string denoting the deputationofficepincode field in the database.
	FieldDeputationOfficePincode = "deputation_office_pincode"
	// FieldUpdatedAt holds the string denoting the updatedat field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldUpdatedBy holds the string denoting the updatedby field in the database.
	FieldUpdatedBy = "updated_by"
	// FieldApplicationWdlDate holds the string denoting the applicationwdldate field in the database.
	FieldApplicationWdlDate = "application_wdl_date"
	// FieldExamCenterHall holds the string denoting the examcenterhall field in the database.
	FieldExamCenterHall = "exam_center_hall"
	// FieldHallName holds the string denoting the hallname field in the database.
	FieldHallName = "hall_name"
	// FieldFacilityName holds the string denoting the facilityname field in the database.
	FieldFacilityName = "facility_name"
	// EdgeUsersGDSPARef holds the string denoting the usersgdsparef edge name in mutations.
	EdgeUsersGDSPARef = "UsersGDSPARef"
	// EdgeExamcitycenter holds the string denoting the examcitycenter edge name in mutations.
	EdgeExamcitycenter = "examcitycenter"
	// EdgeGDSPAExamCentres holds the string denoting the gdspaexamcentres edge name in mutations.
	EdgeGDSPAExamCentres = "GDSPAExamCentres"
	// EdgeRoleusers holds the string denoting the roleusers edge name in mutations.
	EdgeRoleusers = "roleusers"
	// EdgeCadrePrefRef holds the string denoting the cadrepref_ref edge name in mutations.
	EdgeCadrePrefRef = "CadrePref_Ref"
	// EdgeCirclePrefRefGDSPA holds the string denoting the circleprefrefgdspa edge name in mutations.
	EdgeCirclePrefRefGDSPA = "CirclePrefRefGDSPA"
	// EdgeGDSPAApplicationsRef holds the string denoting the gdspaapplicationsref edge name in mutations.
	EdgeGDSPAApplicationsRef = "GDSPAApplicationsRef"
	// EdgeExams holds the string denoting the exams edge name in mutations.
	EdgeExams = "Exams"
	// EdgeCircleRefsGDSPA holds the string denoting the circlerefsgdspa edge name in mutations.
	EdgeCircleRefsGDSPA = "CircleRefsGDSPA"
	// EdgeLogData holds the string denoting the logdata edge name in mutations.
	EdgeLogData = "LogData"
	// UserMasterFieldID holds the string denoting the ID field of the UserMaster.
	UserMasterFieldID = "UserID"
	// ExamCityCenterFieldID holds the string denoting the ID field of the ExamCityCenter.
	ExamCityCenterFieldID = "ExamCityCentreCode"
	// CenterFieldID holds the string denoting the ID field of the Center.
	CenterFieldID = "CenterCode"
	// RoleMasterFieldID holds the string denoting the ID field of the RoleMaster.
	RoleMasterFieldID = "RoleUserCode"
	// Cadre_Choice_PAFieldID holds the string denoting the ID field of the Cadre_Choice_PA.
	Cadre_Choice_PAFieldID = "CadrePrefId"
	// Division_Choice_PAFieldID holds the string denoting the ID field of the Division_Choice_PA.
	Division_Choice_PAFieldID = "CadrePrefId"
	// RecommendationsGDSPAApplicationsFieldID holds the string denoting the ID field of the RecommendationsGDSPAApplications.
	RecommendationsGDSPAApplicationsFieldID = "RecommendationId"
	// ExamFieldID holds the string denoting the ID field of the Exam.
	ExamFieldID = "UniqueID"
	// CircleSummaryForNOFieldID holds the string denoting the ID field of the CircleSummaryForNO.
	CircleSummaryForNOFieldID = "CircleSID"
	// LogsFieldID holds the string denoting the ID field of the Logs.
	LogsFieldID = "ID"
	// Table holds the table name of the exam_applications_gdspa in the database.
	Table = "Exam_Applications_GDSPA"
	// UsersGDSPARefTable is the table that holds the UsersGDSPARef relation/edge.
	UsersGDSPARefTable = "UserMaster"
	// UsersGDSPARefInverseTable is the table name for the UserMaster entity.
	// It exists in this package in order to avoid circular dependency with the "usermaster" package.
	UsersGDSPARefInverseTable = "UserMaster"
	// UsersGDSPARefColumn is the table column denoting the UsersGDSPARef relation/edge.
	UsersGDSPARefColumn = "exam_applications_gdspa_users_gdspa_ref"
	// ExamcitycenterTable is the table that holds the examcitycenter relation/edge.
	ExamcitycenterTable = "Exam_Applications_GDSPA"
	// ExamcitycenterInverseTable is the table name for the ExamCityCenter entity.
	// It exists in this package in order to avoid circular dependency with the "examcitycenter" package.
	ExamcitycenterInverseTable = "ExamCityCenter"
	// ExamcitycenterColumn is the table column denoting the examcitycenter relation/edge.
	ExamcitycenterColumn = "exam_city_center_code"
	// GDSPAExamCentresTable is the table that holds the GDSPAExamCentres relation/edge.
	GDSPAExamCentresTable = "Exam_Applications_GDSPA"
	// GDSPAExamCentresInverseTable is the table name for the Center entity.
	// It exists in this package in order to avoid circular dependency with the "center" package.
	GDSPAExamCentresInverseTable = "Center"
	// GDSPAExamCentresColumn is the table column denoting the GDSPAExamCentres relation/edge.
	GDSPAExamCentresColumn = "center_code"
	// RoleusersTable is the table that holds the roleusers relation/edge.
	RoleusersTable = "Exam_Applications_GDSPA"
	// RoleusersInverseTable is the table name for the RoleMaster entity.
	// It exists in this package in order to avoid circular dependency with the "rolemaster" package.
	RoleusersInverseTable = "RoleMaster"
	// RoleusersColumn is the table column denoting the roleusers relation/edge.
	RoleusersColumn = "role_user_code"
	// CadrePrefRefTable is the table that holds the CadrePref_Ref relation/edge.
	CadrePrefRefTable = "Cadre_Choice_PA"
	// CadrePrefRefInverseTable is the table name for the Cadre_Choice_PA entity.
	// It exists in this package in order to avoid circular dependency with the "cadre_choice_pa" package.
	CadrePrefRefInverseTable = "Cadre_Choice_PA"
	// CadrePrefRefColumn is the table column denoting the CadrePref_Ref relation/edge.
	CadrePrefRefColumn = "application_id"
	// CirclePrefRefGDSPATable is the table that holds the CirclePrefRefGDSPA relation/edge.
	CirclePrefRefGDSPATable = "Division_Choice_PA"
	// CirclePrefRefGDSPAInverseTable is the table name for the Division_Choice_PA entity.
	// It exists in this package in order to avoid circular dependency with the "division_choice_pa" package.
	CirclePrefRefGDSPAInverseTable = "Division_Choice_PA"
	// CirclePrefRefGDSPAColumn is the table column denoting the CirclePrefRefGDSPA relation/edge.
	CirclePrefRefGDSPAColumn = "application_id"
	// GDSPAApplicationsRefTable is the table that holds the GDSPAApplicationsRef relation/edge.
	GDSPAApplicationsRefTable = "RecommendationsGDSPAApplications"
	// GDSPAApplicationsRefInverseTable is the table name for the RecommendationsGDSPAApplications entity.
	// It exists in this package in order to avoid circular dependency with the "recommendationsgdspaapplications" package.
	GDSPAApplicationsRefInverseTable = "RecommendationsGDSPAApplications"
	// GDSPAApplicationsRefColumn is the table column denoting the GDSPAApplicationsRef relation/edge.
	GDSPAApplicationsRefColumn = "application_id"
	// ExamsTable is the table that holds the Exams relation/edge.
	ExamsTable = "Exam_Applications_GDSPA"
	// ExamsInverseTable is the table name for the Exam entity.
	// It exists in this package in order to avoid circular dependency with the "exam" package.
	ExamsInverseTable = "Exam"
	// ExamsColumn is the table column denoting the Exams relation/edge.
	ExamsColumn = "exam_code"
	// CircleRefsGDSPATable is the table that holds the CircleRefsGDSPA relation/edge.
	CircleRefsGDSPATable = "Exam_Applications_GDSPA"
	// CircleRefsGDSPAInverseTable is the table name for the CircleSummaryForNO entity.
	// It exists in this package in order to avoid circular dependency with the "circlesummaryforno" package.
	CircleRefsGDSPAInverseTable = "CircleSummaryForNO"
	// CircleRefsGDSPAColumn is the table column denoting the CircleRefsGDSPA relation/edge.
	CircleRefsGDSPAColumn = "circle_sid"
	// LogDataTable is the table that holds the LogData relation/edge.
	LogDataTable = "LogsTable"
	// LogDataInverseTable is the table name for the Logs entity.
	// It exists in this package in order to avoid circular dependency with the "logs" package.
	LogDataInverseTable = "LogsTable"
	// LogDataColumn is the table column denoting the LogData relation/edge.
	LogDataColumn = "exam_applications_gdspa_log_data"
)

// Columns holds all SQL columns for exam_applications_gdspa fields.
var Columns = []string{
	FieldID,
	FieldApplicationNumber,
	FieldApplnSubmittedDate,
	FieldExamCode,
	FieldExamShortName,
	FieldExamName,
	FieldSmsExamShortName,
	FieldExamYear,
	FieldUserID,
	FieldEmployeeID,
	FieldEmployeeName,
	FieldDOB,
	FieldGender,
	FieldMobileNumber,
	FieldEmailID,
	FieldCategoryCode,
	FieldCategoryDescription,
	FieldDisabilityTypeID,
	FieldDisabilityTypeCode,
	FieldDisabilityTypeDescription,
	FieldDisabilityPercentage,
	FieldDCCS,
	FieldEntryPostCode,
	FieldEntryPostDescription,
	FieldPresentPostCode,
	FieldPresentPostDescription,
	FieldFeederPostCode,
	FieldFeederPostDescription,
	FieldFeederPostJoiningDate,
	FieldPresentDesignation,
	FieldEducationCode,
	FieldEducationDescription,
	FieldFacilityUniqueID,
	FieldWorkingOfficePincode,
	FieldWorkingOfficeFacilityID,
	FieldWorkingOfficeName,
	FieldWorkingOfficeCircleFacilityID,
	FieldWorkingOfficeCircleName,
	FieldWorkingOfficeRegionFacilityID,
	FieldWorkingOfficeRegionName,
	FieldWorkingOfficeDivisionFacilityID,
	FieldWorkingOfficeDivisionName,
	FieldReportingOfficeFacilityID,
	FieldReportingOfficeName,
	FieldLienControllingOfficeID,
	FieldLienControllingOfficeName,
	FieldInDeputation,
	FieldDeputationType,
	FieldDeputationOfficeUniqueId,
	FieldDeputationOfficeFacilityID,
	FieldDeputationOfficeName,
	FieldDeputationControllingOfficeID,
	FieldDeputationControllingOfficeName,
	FieldControllingOfficeFacilityID,
	FieldControllingOfficeName,
	FieldSubdivisionOfficeFacilityID,
	FieldSubdivisionOfficeName,
	FieldNodalOfficeFacilityID,
	FieldNodalOfficeName,
	FieldExamCityCenterCode,
	FieldCenterFacilityId,
	FieldCentrePreference,
	FieldSignature,
	FieldPhoto,
	FieldSignaturePath,
	FieldPhotoPath,
	FieldCandidatePhoto,
	FieldCandidateSignature,
	FieldTempHallTicket,
	FieldCandidateRemarks,
	FieldVAGeneralRemarks,
	FieldCAGeneralRemarks,
	FieldNAGeneralRemarks,
	FieldApplicationStatus,
	FieldStatus,
	FieldRecommendedStatus,
	FieldDesignationID,
	FieldVAUserId,
	FieldVAUserName,
	FieldVAEmployeeID,
	FieldVAEmployeeDesignation,
	FieldVARemarks,
	FieldVADate,
	FieldCAUserId,
	FieldCAUserName,
	FieldCAEmployeeID,
	FieldCAEmployeeDesignation,
	FieldCARemarks,
	FieldCADate,
	FieldNAUserId,
	FieldNAUserName,
	FieldNAEmployeeID,
	FieldNAEmployeeDesignation,
	FieldNARemarks,
	FieldNADate,
	FieldAppliactionRemarks,
	FieldCadrePreferences,
	FieldCAPreviousRemarks,
	FieldGenerateHallTicketFlag,
	FieldPunishmentStatus,
	FieldDisciplinaryCaseStatus,
	FieldHallTicketNumber,
	FieldHallTicketGeneratedFlag,
	FieldGenerateHallTicketFlagByNO,
	FieldHallTicketGeneratedDate,
	FieldTemporaryHallTicket,
	FieldOptionUsed,
	FieldRemarks,
	FieldCadre,
	FieldEmployeePost,
	FieldDOJInEligiblePost,
	FieldDivisionPreferences,
	FieldRoleUserCode,
	FieldCircleSID,
	FieldServiceLength,
	FieldNonQualifyingService,
	FieldDCInPresentCadre,
	FieldReportingOfficeID,
	FieldPostPreferences,
	FieldUnitPreferences,
	FieldCenterId,
	FieldCenterCode,
	FieldClaimingQualifyingService,
	FieldDeputationOfficePincode,
	FieldUpdatedAt,
	FieldUpdatedBy,
	FieldApplicationWdlDate,
	FieldExamCenterHall,
	FieldHallName,
	FieldFacilityName,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "Exam_Applications_GDSPA"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"user_master_users_gdspa_ref",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultApplnSubmittedDate holds the default value on creation for the "ApplnSubmittedDate" field.
	DefaultApplnSubmittedDate func() time.Time
	// DefaultExamCityCenterCode holds the default value on creation for the "ExamCityCenterCode" field.
	DefaultExamCityCenterCode int32
	// DefaultStatus holds the default value on creation for the "Status" field.
	DefaultStatus string
	// DefaultPunishmentStatus holds the default value on creation for the "PunishmentStatus" field.
	DefaultPunishmentStatus bool
	// DefaultDisciplinaryCaseStatus holds the default value on creation for the "DisciplinaryCaseStatus" field.
	DefaultDisciplinaryCaseStatus bool
	// DefaultHallTicketNumber holds the default value on creation for the "HallTicketNumber" field.
	DefaultHallTicketNumber string
	// DefaultHallTicketGeneratedFlag holds the default value on creation for the "HallTicketGeneratedFlag" field.
	DefaultHallTicketGeneratedFlag bool
	// DefaultUpdatedAt holds the default value on creation for the "UpdatedAt" field.
	DefaultUpdatedAt func() time.Time
	// DefaultUpdatedBy holds the default value on creation for the "UpdatedBy" field.
	DefaultUpdatedBy string
)

// OrderOption defines the ordering options for the Exam_Applications_GDSPA queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByApplicationNumber orders the results by the ApplicationNumber field.
func ByApplicationNumber(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldApplicationNumber, opts...).ToFunc()
}

// ByApplnSubmittedDate orders the results by the ApplnSubmittedDate field.
func ByApplnSubmittedDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldApplnSubmittedDate, opts...).ToFunc()
}

// ByExamCode orders the results by the ExamCode field.
func ByExamCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExamCode, opts...).ToFunc()
}

// ByExamShortName orders the results by the ExamShortName field.
func ByExamShortName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExamShortName, opts...).ToFunc()
}

// ByExamName orders the results by the ExamName field.
func ByExamName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExamName, opts...).ToFunc()
}

// BySmsExamShortName orders the results by the SmsExamShortName field.
func BySmsExamShortName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSmsExamShortName, opts...).ToFunc()
}

// ByExamYear orders the results by the ExamYear field.
func ByExamYear(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExamYear, opts...).ToFunc()
}

// ByUserID orders the results by the UserID field.
func ByUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserID, opts...).ToFunc()
}

// ByEmployeeID orders the results by the EmployeeID field.
func ByEmployeeID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmployeeID, opts...).ToFunc()
}

// ByEmployeeName orders the results by the EmployeeName field.
func ByEmployeeName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmployeeName, opts...).ToFunc()
}

// ByDOB orders the results by the DOB field.
func ByDOB(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDOB, opts...).ToFunc()
}

// ByGender orders the results by the Gender field.
func ByGender(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGender, opts...).ToFunc()
}

// ByMobileNumber orders the results by the MobileNumber field.
func ByMobileNumber(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMobileNumber, opts...).ToFunc()
}

// ByEmailID orders the results by the EmailID field.
func ByEmailID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmailID, opts...).ToFunc()
}

// ByCategoryCode orders the results by the CategoryCode field.
func ByCategoryCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCategoryCode, opts...).ToFunc()
}

// ByCategoryDescription orders the results by the CategoryDescription field.
func ByCategoryDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCategoryDescription, opts...).ToFunc()
}

// ByDisabilityTypeID orders the results by the DisabilityTypeID field.
func ByDisabilityTypeID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDisabilityTypeID, opts...).ToFunc()
}

// ByDisabilityTypeCode orders the results by the DisabilityTypeCode field.
func ByDisabilityTypeCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDisabilityTypeCode, opts...).ToFunc()
}

// ByDisabilityTypeDescription orders the results by the DisabilityTypeDescription field.
func ByDisabilityTypeDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDisabilityTypeDescription, opts...).ToFunc()
}

// ByDisabilityPercentage orders the results by the DisabilityPercentage field.
func ByDisabilityPercentage(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDisabilityPercentage, opts...).ToFunc()
}

// ByDCCS orders the results by the DCCS field.
func ByDCCS(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDCCS, opts...).ToFunc()
}

// ByEntryPostCode orders the results by the EntryPostCode field.
func ByEntryPostCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEntryPostCode, opts...).ToFunc()
}

// ByEntryPostDescription orders the results by the EntryPostDescription field.
func ByEntryPostDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEntryPostDescription, opts...).ToFunc()
}

// ByPresentPostCode orders the results by the PresentPostCode field.
func ByPresentPostCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPresentPostCode, opts...).ToFunc()
}

// ByPresentPostDescription orders the results by the PresentPostDescription field.
func ByPresentPostDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPresentPostDescription, opts...).ToFunc()
}

// ByFeederPostCode orders the results by the FeederPostCode field.
func ByFeederPostCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFeederPostCode, opts...).ToFunc()
}

// ByFeederPostDescription orders the results by the FeederPostDescription field.
func ByFeederPostDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFeederPostDescription, opts...).ToFunc()
}

// ByFeederPostJoiningDate orders the results by the FeederPostJoiningDate field.
func ByFeederPostJoiningDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFeederPostJoiningDate, opts...).ToFunc()
}

// ByPresentDesignation orders the results by the PresentDesignation field.
func ByPresentDesignation(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPresentDesignation, opts...).ToFunc()
}

// ByEducationCode orders the results by the EducationCode field.
func ByEducationCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEducationCode, opts...).ToFunc()
}

// ByEducationDescription orders the results by the EducationDescription field.
func ByEducationDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEducationDescription, opts...).ToFunc()
}

// ByFacilityUniqueID orders the results by the FacilityUniqueID field.
func ByFacilityUniqueID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFacilityUniqueID, opts...).ToFunc()
}

// ByWorkingOfficePincode orders the results by the WorkingOfficePincode field.
func ByWorkingOfficePincode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWorkingOfficePincode, opts...).ToFunc()
}

// ByWorkingOfficeFacilityID orders the results by the WorkingOfficeFacilityID field.
func ByWorkingOfficeFacilityID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWorkingOfficeFacilityID, opts...).ToFunc()
}

// ByWorkingOfficeName orders the results by the WorkingOfficeName field.
func ByWorkingOfficeName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWorkingOfficeName, opts...).ToFunc()
}

// ByWorkingOfficeCircleFacilityID orders the results by the WorkingOfficeCircleFacilityID field.
func ByWorkingOfficeCircleFacilityID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWorkingOfficeCircleFacilityID, opts...).ToFunc()
}

// ByWorkingOfficeCircleName orders the results by the WorkingOfficeCircleName field.
func ByWorkingOfficeCircleName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWorkingOfficeCircleName, opts...).ToFunc()
}

// ByWorkingOfficeRegionFacilityID orders the results by the WorkingOfficeRegionFacilityID field.
func ByWorkingOfficeRegionFacilityID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWorkingOfficeRegionFacilityID, opts...).ToFunc()
}

// ByWorkingOfficeRegionName orders the results by the WorkingOfficeRegionName field.
func ByWorkingOfficeRegionName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWorkingOfficeRegionName, opts...).ToFunc()
}

// ByWorkingOfficeDivisionFacilityID orders the results by the WorkingOfficeDivisionFacilityID field.
func ByWorkingOfficeDivisionFacilityID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWorkingOfficeDivisionFacilityID, opts...).ToFunc()
}

// ByWorkingOfficeDivisionName orders the results by the WorkingOfficeDivisionName field.
func ByWorkingOfficeDivisionName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWorkingOfficeDivisionName, opts...).ToFunc()
}

// ByReportingOfficeFacilityID orders the results by the ReportingOfficeFacilityID field.
func ByReportingOfficeFacilityID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldReportingOfficeFacilityID, opts...).ToFunc()
}

// ByReportingOfficeName orders the results by the ReportingOfficeName field.
func ByReportingOfficeName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldReportingOfficeName, opts...).ToFunc()
}

// ByLienControllingOfficeID orders the results by the LienControllingOfficeID field.
func ByLienControllingOfficeID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLienControllingOfficeID, opts...).ToFunc()
}

// ByLienControllingOfficeName orders the results by the LienControllingOfficeName field.
func ByLienControllingOfficeName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLienControllingOfficeName, opts...).ToFunc()
}

// ByInDeputation orders the results by the InDeputation field.
func ByInDeputation(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldInDeputation, opts...).ToFunc()
}

// ByDeputationType orders the results by the DeputationType field.
func ByDeputationType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeputationType, opts...).ToFunc()
}

// ByDeputationOfficeUniqueId orders the results by the DeputationOfficeUniqueId field.
func ByDeputationOfficeUniqueId(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeputationOfficeUniqueId, opts...).ToFunc()
}

// ByDeputationOfficeFacilityID orders the results by the DeputationOfficeFacilityID field.
func ByDeputationOfficeFacilityID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeputationOfficeFacilityID, opts...).ToFunc()
}

// ByDeputationOfficeName orders the results by the DeputationOfficeName field.
func ByDeputationOfficeName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeputationOfficeName, opts...).ToFunc()
}

// ByDeputationControllingOfficeID orders the results by the DeputationControllingOfficeID field.
func ByDeputationControllingOfficeID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeputationControllingOfficeID, opts...).ToFunc()
}

// ByDeputationControllingOfficeName orders the results by the DeputationControllingOfficeName field.
func ByDeputationControllingOfficeName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeputationControllingOfficeName, opts...).ToFunc()
}

// ByControllingOfficeFacilityID orders the results by the ControllingOfficeFacilityID field.
func ByControllingOfficeFacilityID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldControllingOfficeFacilityID, opts...).ToFunc()
}

// ByControllingOfficeName orders the results by the ControllingOfficeName field.
func ByControllingOfficeName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldControllingOfficeName, opts...).ToFunc()
}

// BySubdivisionOfficeFacilityID orders the results by the SubdivisionOfficeFacilityID field.
func BySubdivisionOfficeFacilityID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSubdivisionOfficeFacilityID, opts...).ToFunc()
}

// BySubdivisionOfficeName orders the results by the SubdivisionOfficeName field.
func BySubdivisionOfficeName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSubdivisionOfficeName, opts...).ToFunc()
}

// ByNodalOfficeFacilityID orders the results by the NodalOfficeFacilityID field.
func ByNodalOfficeFacilityID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNodalOfficeFacilityID, opts...).ToFunc()
}

// ByNodalOfficeName orders the results by the NodalOfficeName field.
func ByNodalOfficeName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNodalOfficeName, opts...).ToFunc()
}

// ByExamCityCenterCode orders the results by the ExamCityCenterCode field.
func ByExamCityCenterCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExamCityCenterCode, opts...).ToFunc()
}

// ByCenterFacilityId orders the results by the CenterFacilityId field.
func ByCenterFacilityId(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCenterFacilityId, opts...).ToFunc()
}

// ByCentrePreference orders the results by the CentrePreference field.
func ByCentrePreference(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCentrePreference, opts...).ToFunc()
}

// BySignature orders the results by the Signature field.
func BySignature(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSignature, opts...).ToFunc()
}

// ByPhoto orders the results by the Photo field.
func ByPhoto(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPhoto, opts...).ToFunc()
}

// BySignaturePath orders the results by the SignaturePath field.
func BySignaturePath(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSignaturePath, opts...).ToFunc()
}

// ByPhotoPath orders the results by the PhotoPath field.
func ByPhotoPath(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPhotoPath, opts...).ToFunc()
}

// ByTempHallTicket orders the results by the TempHallTicket field.
func ByTempHallTicket(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTempHallTicket, opts...).ToFunc()
}

// ByCandidateRemarks orders the results by the CandidateRemarks field.
func ByCandidateRemarks(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCandidateRemarks, opts...).ToFunc()
}

// ByVAGeneralRemarks orders the results by the VAGeneralRemarks field.
func ByVAGeneralRemarks(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVAGeneralRemarks, opts...).ToFunc()
}

// ByCAGeneralRemarks orders the results by the CAGeneralRemarks field.
func ByCAGeneralRemarks(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCAGeneralRemarks, opts...).ToFunc()
}

// ByNAGeneralRemarks orders the results by the NAGeneralRemarks field.
func ByNAGeneralRemarks(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNAGeneralRemarks, opts...).ToFunc()
}

// ByApplicationStatus orders the results by the ApplicationStatus field.
func ByApplicationStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldApplicationStatus, opts...).ToFunc()
}

// ByStatus orders the results by the Status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByRecommendedStatus orders the results by the RecommendedStatus field.
func ByRecommendedStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRecommendedStatus, opts...).ToFunc()
}

// ByDesignationID orders the results by the DesignationID field.
func ByDesignationID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDesignationID, opts...).ToFunc()
}

// ByVAUserId orders the results by the VA_UserId field.
func ByVAUserId(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVAUserId, opts...).ToFunc()
}

// ByVAUserName orders the results by the VA_UserName field.
func ByVAUserName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVAUserName, opts...).ToFunc()
}

// ByVAEmployeeID orders the results by the VA_EmployeeID field.
func ByVAEmployeeID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVAEmployeeID, opts...).ToFunc()
}

// ByVAEmployeeDesignation orders the results by the VA_EmployeeDesignation field.
func ByVAEmployeeDesignation(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVAEmployeeDesignation, opts...).ToFunc()
}

// ByVARemarks orders the results by the VA_Remarks field.
func ByVARemarks(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVARemarks, opts...).ToFunc()
}

// ByVADate orders the results by the VA_Date field.
func ByVADate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVADate, opts...).ToFunc()
}

// ByCAUserId orders the results by the CA_UserId field.
func ByCAUserId(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCAUserId, opts...).ToFunc()
}

// ByCAUserName orders the results by the CA_UserName field.
func ByCAUserName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCAUserName, opts...).ToFunc()
}

// ByCAEmployeeID orders the results by the CA_EmployeeID field.
func ByCAEmployeeID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCAEmployeeID, opts...).ToFunc()
}

// ByCAEmployeeDesignation orders the results by the CA_EmployeeDesignation field.
func ByCAEmployeeDesignation(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCAEmployeeDesignation, opts...).ToFunc()
}

// ByCARemarks orders the results by the CA_Remarks field.
func ByCARemarks(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCARemarks, opts...).ToFunc()
}

// ByCADate orders the results by the CA_Date field.
func ByCADate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCADate, opts...).ToFunc()
}

// ByNAUserId orders the results by the NA_UserId field.
func ByNAUserId(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNAUserId, opts...).ToFunc()
}

// ByNAUserName orders the results by the NA_UserName field.
func ByNAUserName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNAUserName, opts...).ToFunc()
}

// ByNAEmployeeID orders the results by the NA_EmployeeID field.
func ByNAEmployeeID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNAEmployeeID, opts...).ToFunc()
}

// ByNAEmployeeDesignation orders the results by the NA_EmployeeDesignation field.
func ByNAEmployeeDesignation(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNAEmployeeDesignation, opts...).ToFunc()
}

// ByNARemarks orders the results by the NA_Remarks field.
func ByNARemarks(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNARemarks, opts...).ToFunc()
}

// ByNADate orders the results by the NA_Date field.
func ByNADate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNADate, opts...).ToFunc()
}

// ByAppliactionRemarks orders the results by the AppliactionRemarks field.
func ByAppliactionRemarks(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAppliactionRemarks, opts...).ToFunc()
}

// ByCAPreviousRemarks orders the results by the CAPreviousRemarks field.
func ByCAPreviousRemarks(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCAPreviousRemarks, opts...).ToFunc()
}

// ByGenerateHallTicketFlag orders the results by the GenerateHallTicketFlag field.
func ByGenerateHallTicketFlag(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGenerateHallTicketFlag, opts...).ToFunc()
}

// ByPunishmentStatus orders the results by the PunishmentStatus field.
func ByPunishmentStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPunishmentStatus, opts...).ToFunc()
}

// ByDisciplinaryCaseStatus orders the results by the DisciplinaryCaseStatus field.
func ByDisciplinaryCaseStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDisciplinaryCaseStatus, opts...).ToFunc()
}

// ByHallTicketNumber orders the results by the HallTicketNumber field.
func ByHallTicketNumber(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHallTicketNumber, opts...).ToFunc()
}

// ByHallTicketGeneratedFlag orders the results by the HallTicketGeneratedFlag field.
func ByHallTicketGeneratedFlag(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHallTicketGeneratedFlag, opts...).ToFunc()
}

// ByGenerateHallTicketFlagByNO orders the results by the GenerateHallTicketFlagByNO field.
func ByGenerateHallTicketFlagByNO(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGenerateHallTicketFlagByNO, opts...).ToFunc()
}

// ByHallTicketGeneratedDate orders the results by the HallTicketGeneratedDate field.
func ByHallTicketGeneratedDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHallTicketGeneratedDate, opts...).ToFunc()
}

// ByTemporaryHallTicket orders the results by the TemporaryHallTicket field.
func ByTemporaryHallTicket(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTemporaryHallTicket, opts...).ToFunc()
}

// ByOptionUsed orders the results by the OptionUsed field.
func ByOptionUsed(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOptionUsed, opts...).ToFunc()
}

// ByRemarks orders the results by the Remarks field.
func ByRemarks(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRemarks, opts...).ToFunc()
}

// ByCadre orders the results by the Cadre field.
func ByCadre(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCadre, opts...).ToFunc()
}

// ByEmployeePost orders the results by the EmployeePost field.
func ByEmployeePost(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmployeePost, opts...).ToFunc()
}

// ByDOJInEligiblePost orders the results by the DOJInEligiblePost field.
func ByDOJInEligiblePost(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDOJInEligiblePost, opts...).ToFunc()
}

// ByRoleUserCode orders the results by the RoleUserCode field.
func ByRoleUserCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRoleUserCode, opts...).ToFunc()
}

// ByCircleSID orders the results by the CircleSID field.
func ByCircleSID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCircleSID, opts...).ToFunc()
}

// ByDCInPresentCadre orders the results by the DCInPresentCadre field.
func ByDCInPresentCadre(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDCInPresentCadre, opts...).ToFunc()
}

// ByReportingOfficeID orders the results by the ReportingOfficeID field.
func ByReportingOfficeID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldReportingOfficeID, opts...).ToFunc()
}

// ByCenterId orders the results by the CenterId field.
func ByCenterId(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCenterId, opts...).ToFunc()
}

// ByCenterCode orders the results by the CenterCode field.
func ByCenterCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCenterCode, opts...).ToFunc()
}

// ByClaimingQualifyingService orders the results by the ClaimingQualifyingService field.
func ByClaimingQualifyingService(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldClaimingQualifyingService, opts...).ToFunc()
}

// ByDeputationOfficePincode orders the results by the DeputationOfficePincode field.
func ByDeputationOfficePincode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeputationOfficePincode, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the UpdatedAt field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByUpdatedBy orders the results by the UpdatedBy field.
func ByUpdatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedBy, opts...).ToFunc()
}

// ByApplicationWdlDate orders the results by the ApplicationWdlDate field.
func ByApplicationWdlDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldApplicationWdlDate, opts...).ToFunc()
}

// ByExamCenterHall orders the results by the ExamCenterHall field.
func ByExamCenterHall(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExamCenterHall, opts...).ToFunc()
}

// ByHallName orders the results by the HallName field.
func ByHallName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHallName, opts...).ToFunc()
}

// ByFacilityName orders the results by the FacilityName field.
func ByFacilityName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFacilityName, opts...).ToFunc()
}

// ByUsersGDSPARefCount orders the results by UsersGDSPARef count.
func ByUsersGDSPARefCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newUsersGDSPARefStep(), opts...)
	}
}

// ByUsersGDSPARef orders the results by UsersGDSPARef terms.
func ByUsersGDSPARef(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUsersGDSPARefStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByExamcitycenterField orders the results by examcitycenter field.
func ByExamcitycenterField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newExamcitycenterStep(), sql.OrderByField(field, opts...))
	}
}

// ByGDSPAExamCentresField orders the results by GDSPAExamCentres field.
func ByGDSPAExamCentresField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newGDSPAExamCentresStep(), sql.OrderByField(field, opts...))
	}
}

// ByRoleusersField orders the results by roleusers field.
func ByRoleusersField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRoleusersStep(), sql.OrderByField(field, opts...))
	}
}

// ByCadrePrefRefCount orders the results by CadrePref_Ref count.
func ByCadrePrefRefCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCadrePrefRefStep(), opts...)
	}
}

// ByCadrePrefRef orders the results by CadrePref_Ref terms.
func ByCadrePrefRef(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCadrePrefRefStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByCirclePrefRefGDSPACount orders the results by CirclePrefRefGDSPA count.
func ByCirclePrefRefGDSPACount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCirclePrefRefGDSPAStep(), opts...)
	}
}

// ByCirclePrefRefGDSPA orders the results by CirclePrefRefGDSPA terms.
func ByCirclePrefRefGDSPA(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCirclePrefRefGDSPAStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByGDSPAApplicationsRefCount orders the results by GDSPAApplicationsRef count.
func ByGDSPAApplicationsRefCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newGDSPAApplicationsRefStep(), opts...)
	}
}

// ByGDSPAApplicationsRef orders the results by GDSPAApplicationsRef terms.
func ByGDSPAApplicationsRef(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newGDSPAApplicationsRefStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByExamsField orders the results by Exams field.
func ByExamsField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newExamsStep(), sql.OrderByField(field, opts...))
	}
}

// ByCircleRefsGDSPAField orders the results by CircleRefsGDSPA field.
func ByCircleRefsGDSPAField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCircleRefsGDSPAStep(), sql.OrderByField(field, opts...))
	}
}

// ByLogDataCount orders the results by LogData count.
func ByLogDataCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newLogDataStep(), opts...)
	}
}

// ByLogData orders the results by LogData terms.
func ByLogData(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newLogDataStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newUsersGDSPARefStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UsersGDSPARefInverseTable, UserMasterFieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, UsersGDSPARefTable, UsersGDSPARefColumn),
	)
}
func newExamcitycenterStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ExamcitycenterInverseTable, ExamCityCenterFieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ExamcitycenterTable, ExamcitycenterColumn),
	)
}
func newGDSPAExamCentresStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(GDSPAExamCentresInverseTable, CenterFieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, GDSPAExamCentresTable, GDSPAExamCentresColumn),
	)
}
func newRoleusersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RoleusersInverseTable, RoleMasterFieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, RoleusersTable, RoleusersColumn),
	)
}
func newCadrePrefRefStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CadrePrefRefInverseTable, Cadre_Choice_PAFieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, CadrePrefRefTable, CadrePrefRefColumn),
	)
}
func newCirclePrefRefGDSPAStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CirclePrefRefGDSPAInverseTable, Division_Choice_PAFieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, CirclePrefRefGDSPATable, CirclePrefRefGDSPAColumn),
	)
}
func newGDSPAApplicationsRefStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(GDSPAApplicationsRefInverseTable, RecommendationsGDSPAApplicationsFieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, GDSPAApplicationsRefTable, GDSPAApplicationsRefColumn),
	)
}
func newExamsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ExamsInverseTable, ExamFieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ExamsTable, ExamsColumn),
	)
}
func newCircleRefsGDSPAStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CircleRefsGDSPAInverseTable, CircleSummaryForNOFieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, CircleRefsGDSPATable, CircleRefsGDSPAColumn),
	)
}
func newLogDataStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(LogDataInverseTable, LogsFieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, LogDataTable, LogDataColumn),
	)
}
