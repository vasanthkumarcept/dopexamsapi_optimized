// Code generated by ent, DO NOT EDIT.

package circlesummaryforno

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the circlesummaryforno type in the database.
	Label = "circle_summary_for_no"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "CircleSID"
	// FieldCircleOfficeId holds the string denoting the circleofficeid field in the database.
	FieldCircleOfficeId = "circle_office_id"
	// FieldCircleOfficeName holds the string denoting the circleofficename field in the database.
	FieldCircleOfficeName = "circle_office_name"
	// FieldApproveHallTicketGenrationIP holds the string denoting the approvehallticketgenrationip field in the database.
	FieldApproveHallTicketGenrationIP = "approve_hall_ticket_genration_ip"
	// FieldApproveHallTicketGenrationPS holds the string denoting the approvehallticketgenrationps field in the database.
	FieldApproveHallTicketGenrationPS = "approve_hall_ticket_genration_ps"
	// FieldApproveHallTicketGenrationPM holds the string denoting the approvehallticketgenrationpm field in the database.
	FieldApproveHallTicketGenrationPM = "approve_hall_ticket_genration_pm"
	// FieldApproveHallTicketGenrationPA holds the string denoting the approvehallticketgenrationpa field in the database.
	FieldApproveHallTicketGenrationPA = "approve_hall_ticket_genration_pa"
	// EdgeCircleusers holds the string denoting the circleusers edge name in mutations.
	EdgeCircleusers = "circleusers"
	// EdgeCircleRefsForHallTicketIP holds the string denoting the circlerefsforhallticketip edge name in mutations.
	EdgeCircleRefsForHallTicketIP = "CircleRefsForHallTicketIP"
	// EdgeCircleRefsForHallTicketPS holds the string denoting the circlerefsforhallticketps edge name in mutations.
	EdgeCircleRefsForHallTicketPS = "CircleRefsForHallTicketPS"
	// EdgeCircleRefsForHallTicketGDSPA holds the string denoting the circlerefsforhallticketgdspa edge name in mutations.
	EdgeCircleRefsForHallTicketGDSPA = "CircleRefsForHallTicketGDSPA"
	// EdgeCircleRefsForHallTicketGDSPM holds the string denoting the circlerefsforhallticketgdspm edge name in mutations.
	EdgeCircleRefsForHallTicketGDSPM = "CircleRefsForHallTicketGDSPM"
	// EdgeCircleRefsForHallTicketPMPA holds the string denoting the circlerefsforhallticketpmpa edge name in mutations.
	EdgeCircleRefsForHallTicketPMPA = "CircleRefsForHallTicketPMPA"
	// EdgeCircleRefsForHallTicketMTSPMMG holds the string denoting the circlerefsforhallticketmtspmmg edge name in mutations.
	EdgeCircleRefsForHallTicketMTSPMMG = "CircleRefsForHallTicketMTSPMMG"
	// UserMasterFieldID holds the string denoting the ID field of the UserMaster.
	UserMasterFieldID = "UserID"
	// Exam_Applications_IPFieldID holds the string denoting the ID field of the Exam_Applications_IP.
	Exam_Applications_IPFieldID = "ApplicationID"
	// Exam_Applications_PSFieldID holds the string denoting the ID field of the Exam_Applications_PS.
	Exam_Applications_PSFieldID = "ApplicationID"
	// Exam_Applications_GDSPAFieldID holds the string denoting the ID field of the Exam_Applications_GDSPA.
	Exam_Applications_GDSPAFieldID = "ApplicationID"
	// Exam_Applications_GDSPMFieldID holds the string denoting the ID field of the Exam_Applications_GDSPM.
	Exam_Applications_GDSPMFieldID = "ApplicationID"
	// Exam_Applications_PMPAFieldID holds the string denoting the ID field of the Exam_Applications_PMPA.
	Exam_Applications_PMPAFieldID = "ApplicationID"
	// Exam_Application_MTSPMMGFieldID holds the string denoting the ID field of the Exam_Application_MTSPMMG.
	Exam_Application_MTSPMMGFieldID = "ApplicationID"
	// Table holds the table name of the circlesummaryforno in the database.
	Table = "CircleSummaryForNO"
	// CircleusersTable is the table that holds the circleusers relation/edge.
	CircleusersTable = "UserMaster"
	// CircleusersInverseTable is the table name for the UserMaster entity.
	// It exists in this package in order to avoid circular dependency with the "usermaster" package.
	CircleusersInverseTable = "UserMaster"
	// CircleusersColumn is the table column denoting the circleusers relation/edge.
	CircleusersColumn = "circle_summary_for_no_circleusers"
	// CircleRefsForHallTicketIPTable is the table that holds the CircleRefsForHallTicketIP relation/edge.
	CircleRefsForHallTicketIPTable = "Exam_Applications_IP"
	// CircleRefsForHallTicketIPInverseTable is the table name for the Exam_Applications_IP entity.
	// It exists in this package in order to avoid circular dependency with the "exam_applications_ip" package.
	CircleRefsForHallTicketIPInverseTable = "Exam_Applications_IP"
	// CircleRefsForHallTicketIPColumn is the table column denoting the CircleRefsForHallTicketIP relation/edge.
	CircleRefsForHallTicketIPColumn = "circle_sid"
	// CircleRefsForHallTicketPSTable is the table that holds the CircleRefsForHallTicketPS relation/edge.
	CircleRefsForHallTicketPSTable = "Exam_Applications_PS"
	// CircleRefsForHallTicketPSInverseTable is the table name for the Exam_Applications_PS entity.
	// It exists in this package in order to avoid circular dependency with the "exam_applications_ps" package.
	CircleRefsForHallTicketPSInverseTable = "Exam_Applications_PS"
	// CircleRefsForHallTicketPSColumn is the table column denoting the CircleRefsForHallTicketPS relation/edge.
	CircleRefsForHallTicketPSColumn = "circle_sid"
	// CircleRefsForHallTicketGDSPATable is the table that holds the CircleRefsForHallTicketGDSPA relation/edge.
	CircleRefsForHallTicketGDSPATable = "Exam_Applications_GDSPA"
	// CircleRefsForHallTicketGDSPAInverseTable is the table name for the Exam_Applications_GDSPA entity.
	// It exists in this package in order to avoid circular dependency with the "exam_applications_gdspa" package.
	CircleRefsForHallTicketGDSPAInverseTable = "Exam_Applications_GDSPA"
	// CircleRefsForHallTicketGDSPAColumn is the table column denoting the CircleRefsForHallTicketGDSPA relation/edge.
	CircleRefsForHallTicketGDSPAColumn = "circle_sid"
	// CircleRefsForHallTicketGDSPMTable is the table that holds the CircleRefsForHallTicketGDSPM relation/edge.
	CircleRefsForHallTicketGDSPMTable = "Exam_Applications_GDSPM"
	// CircleRefsForHallTicketGDSPMInverseTable is the table name for the Exam_Applications_GDSPM entity.
	// It exists in this package in order to avoid circular dependency with the "exam_applications_gdspm" package.
	CircleRefsForHallTicketGDSPMInverseTable = "Exam_Applications_GDSPM"
	// CircleRefsForHallTicketGDSPMColumn is the table column denoting the CircleRefsForHallTicketGDSPM relation/edge.
	CircleRefsForHallTicketGDSPMColumn = "circle_sid"
	// CircleRefsForHallTicketPMPATable is the table that holds the CircleRefsForHallTicketPMPA relation/edge.
	CircleRefsForHallTicketPMPATable = "Exam_Applications_PMPA"
	// CircleRefsForHallTicketPMPAInverseTable is the table name for the Exam_Applications_PMPA entity.
	// It exists in this package in order to avoid circular dependency with the "exam_applications_pmpa" package.
	CircleRefsForHallTicketPMPAInverseTable = "Exam_Applications_PMPA"
	// CircleRefsForHallTicketPMPAColumn is the table column denoting the CircleRefsForHallTicketPMPA relation/edge.
	CircleRefsForHallTicketPMPAColumn = "circle_sid"
	// CircleRefsForHallTicketMTSPMMGTable is the table that holds the CircleRefsForHallTicketMTSPMMG relation/edge.
	CircleRefsForHallTicketMTSPMMGTable = "Exam_Application_MTSPMMG"
	// CircleRefsForHallTicketMTSPMMGInverseTable is the table name for the Exam_Application_MTSPMMG entity.
	// It exists in this package in order to avoid circular dependency with the "exam_application_mtspmmg" package.
	CircleRefsForHallTicketMTSPMMGInverseTable = "Exam_Application_MTSPMMG"
	// CircleRefsForHallTicketMTSPMMGColumn is the table column denoting the CircleRefsForHallTicketMTSPMMG relation/edge.
	CircleRefsForHallTicketMTSPMMGColumn = "circle_sid"
)

// Columns holds all SQL columns for circlesummaryforno fields.
var Columns = []string{
	FieldID,
	FieldCircleOfficeId,
	FieldCircleOfficeName,
	FieldApproveHallTicketGenrationIP,
	FieldApproveHallTicketGenrationPS,
	FieldApproveHallTicketGenrationPM,
	FieldApproveHallTicketGenrationPA,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the CircleSummaryForNO queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCircleOfficeId orders the results by the CircleOfficeId field.
func ByCircleOfficeId(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCircleOfficeId, opts...).ToFunc()
}

// ByCircleOfficeName orders the results by the CircleOfficeName field.
func ByCircleOfficeName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCircleOfficeName, opts...).ToFunc()
}

// ByApproveHallTicketGenrationIP orders the results by the ApproveHallTicketGenrationIP field.
func ByApproveHallTicketGenrationIP(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldApproveHallTicketGenrationIP, opts...).ToFunc()
}

// ByApproveHallTicketGenrationPS orders the results by the ApproveHallTicketGenrationPS field.
func ByApproveHallTicketGenrationPS(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldApproveHallTicketGenrationPS, opts...).ToFunc()
}

// ByApproveHallTicketGenrationPM orders the results by the ApproveHallTicketGenrationPM field.
func ByApproveHallTicketGenrationPM(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldApproveHallTicketGenrationPM, opts...).ToFunc()
}

// ByApproveHallTicketGenrationPA orders the results by the ApproveHallTicketGenrationPA field.
func ByApproveHallTicketGenrationPA(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldApproveHallTicketGenrationPA, opts...).ToFunc()
}

// ByCircleusersCount orders the results by circleusers count.
func ByCircleusersCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCircleusersStep(), opts...)
	}
}

// ByCircleusers orders the results by circleusers terms.
func ByCircleusers(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCircleusersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByCircleRefsForHallTicketIPCount orders the results by CircleRefsForHallTicketIP count.
func ByCircleRefsForHallTicketIPCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCircleRefsForHallTicketIPStep(), opts...)
	}
}

// ByCircleRefsForHallTicketIP orders the results by CircleRefsForHallTicketIP terms.
func ByCircleRefsForHallTicketIP(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCircleRefsForHallTicketIPStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByCircleRefsForHallTicketPSCount orders the results by CircleRefsForHallTicketPS count.
func ByCircleRefsForHallTicketPSCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCircleRefsForHallTicketPSStep(), opts...)
	}
}

// ByCircleRefsForHallTicketPS orders the results by CircleRefsForHallTicketPS terms.
func ByCircleRefsForHallTicketPS(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCircleRefsForHallTicketPSStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByCircleRefsForHallTicketGDSPACount orders the results by CircleRefsForHallTicketGDSPA count.
func ByCircleRefsForHallTicketGDSPACount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCircleRefsForHallTicketGDSPAStep(), opts...)
	}
}

// ByCircleRefsForHallTicketGDSPA orders the results by CircleRefsForHallTicketGDSPA terms.
func ByCircleRefsForHallTicketGDSPA(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCircleRefsForHallTicketGDSPAStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByCircleRefsForHallTicketGDSPMCount orders the results by CircleRefsForHallTicketGDSPM count.
func ByCircleRefsForHallTicketGDSPMCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCircleRefsForHallTicketGDSPMStep(), opts...)
	}
}

// ByCircleRefsForHallTicketGDSPM orders the results by CircleRefsForHallTicketGDSPM terms.
func ByCircleRefsForHallTicketGDSPM(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCircleRefsForHallTicketGDSPMStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByCircleRefsForHallTicketPMPACount orders the results by CircleRefsForHallTicketPMPA count.
func ByCircleRefsForHallTicketPMPACount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCircleRefsForHallTicketPMPAStep(), opts...)
	}
}

// ByCircleRefsForHallTicketPMPA orders the results by CircleRefsForHallTicketPMPA terms.
func ByCircleRefsForHallTicketPMPA(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCircleRefsForHallTicketPMPAStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByCircleRefsForHallTicketMTSPMMGCount orders the results by CircleRefsForHallTicketMTSPMMG count.
func ByCircleRefsForHallTicketMTSPMMGCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCircleRefsForHallTicketMTSPMMGStep(), opts...)
	}
}

// ByCircleRefsForHallTicketMTSPMMG orders the results by CircleRefsForHallTicketMTSPMMG terms.
func ByCircleRefsForHallTicketMTSPMMG(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCircleRefsForHallTicketMTSPMMGStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newCircleusersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CircleusersInverseTable, UserMasterFieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, CircleusersTable, CircleusersColumn),
	)
}
func newCircleRefsForHallTicketIPStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CircleRefsForHallTicketIPInverseTable, Exam_Applications_IPFieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, CircleRefsForHallTicketIPTable, CircleRefsForHallTicketIPColumn),
	)
}
func newCircleRefsForHallTicketPSStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CircleRefsForHallTicketPSInverseTable, Exam_Applications_PSFieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, CircleRefsForHallTicketPSTable, CircleRefsForHallTicketPSColumn),
	)
}
func newCircleRefsForHallTicketGDSPAStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CircleRefsForHallTicketGDSPAInverseTable, Exam_Applications_GDSPAFieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, CircleRefsForHallTicketGDSPATable, CircleRefsForHallTicketGDSPAColumn),
	)
}
func newCircleRefsForHallTicketGDSPMStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CircleRefsForHallTicketGDSPMInverseTable, Exam_Applications_GDSPMFieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, CircleRefsForHallTicketGDSPMTable, CircleRefsForHallTicketGDSPMColumn),
	)
}
func newCircleRefsForHallTicketPMPAStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CircleRefsForHallTicketPMPAInverseTable, Exam_Applications_PMPAFieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, CircleRefsForHallTicketPMPATable, CircleRefsForHallTicketPMPAColumn),
	)
}
func newCircleRefsForHallTicketMTSPMMGStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CircleRefsForHallTicketMTSPMMGInverseTable, Exam_Application_MTSPMMGFieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, CircleRefsForHallTicketMTSPMMGTable, CircleRefsForHallTicketMTSPMMGColumn),
	)
}
