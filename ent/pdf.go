// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"recruit/ent/pdf"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// PDF is the model entity for the PDF schema.
type PDF struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Path holds the value of the "path" field.
	Path string `json:"path,omitempty"`
	// Filename holds the value of the "filename" field.
	Filename string `json:"filename,omitempty"`
	// Eventtime holds the value of the "eventtime" field.
	Eventtime time.Time `json:"eventtime,omitempty"`
	// Examcode holds the value of the "examcode" field.
	Examcode int `json:"examcode,omitempty"`
	// Year holds the value of the "year" field.
	Year         int `json:"year,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*PDF) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case pdf.FieldID, pdf.FieldExamcode, pdf.FieldYear:
			values[i] = new(sql.NullInt64)
		case pdf.FieldPath, pdf.FieldFilename:
			values[i] = new(sql.NullString)
		case pdf.FieldEventtime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the PDF fields.
func (pd *PDF) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case pdf.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pd.ID = int(value.Int64)
		case pdf.FieldPath:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field path", values[i])
			} else if value.Valid {
				pd.Path = value.String
			}
		case pdf.FieldFilename:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field filename", values[i])
			} else if value.Valid {
				pd.Filename = value.String
			}
		case pdf.FieldEventtime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field eventtime", values[i])
			} else if value.Valid {
				pd.Eventtime = value.Time
			}
		case pdf.FieldExamcode:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field examcode", values[i])
			} else if value.Valid {
				pd.Examcode = int(value.Int64)
			}
		case pdf.FieldYear:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field year", values[i])
			} else if value.Valid {
				pd.Year = int(value.Int64)
			}
		default:
			pd.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the PDF.
// This includes values selected through modifiers, order, etc.
func (pd *PDF) Value(name string) (ent.Value, error) {
	return pd.selectValues.Get(name)
}

// Update returns a builder for updating this PDF.
// Note that you need to call PDF.Unwrap() before calling this method if this PDF
// was returned from a transaction, and the transaction was committed or rolled back.
func (pd *PDF) Update() *PDFUpdateOne {
	return NewPDFClient(pd.config).UpdateOne(pd)
}

// Unwrap unwraps the PDF entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pd *PDF) Unwrap() *PDF {
	_tx, ok := pd.config.driver.(*txDriver)
	if !ok {
		panic("ent: PDF is not a transactional entity")
	}
	pd.config.driver = _tx.drv
	return pd
}

// String implements the fmt.Stringer.
func (pd *PDF) String() string {
	var builder strings.Builder
	builder.WriteString("PDF(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pd.ID))
	builder.WriteString("path=")
	builder.WriteString(pd.Path)
	builder.WriteString(", ")
	builder.WriteString("filename=")
	builder.WriteString(pd.Filename)
	builder.WriteString(", ")
	builder.WriteString("eventtime=")
	builder.WriteString(pd.Eventtime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("examcode=")
	builder.WriteString(fmt.Sprintf("%v", pd.Examcode))
	builder.WriteString(", ")
	builder.WriteString("year=")
	builder.WriteString(fmt.Sprintf("%v", pd.Year))
	builder.WriteByte(')')
	return builder.String()
}

// PDFs is a parsable slice of PDF.
type PDFs []*PDF
