// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"recruit/ent/exam_application_mtspmmg"
	"recruit/ent/exam_applications_gdspa"
	"recruit/ent/exam_applications_gdspm"
	"recruit/ent/exam_applications_ip"
	"recruit/ent/exam_applications_pmpa"
	"recruit/ent/exam_applications_ps"
	"recruit/ent/examcitycenter"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ExamCityCenterCreate is the builder for creating a ExamCityCenter entity.
type ExamCityCenterCreate struct {
	config
	mutation *ExamCityCenterMutation
	hooks    []Hook
}

// SetExamCode sets the "ExamCode" field.
func (eccc *ExamCityCenterCreate) SetExamCode(i int32) *ExamCityCenterCreate {
	eccc.mutation.SetExamCode(i)
	return eccc
}

// SetNillableExamCode sets the "ExamCode" field if the given value is not nil.
func (eccc *ExamCityCenterCreate) SetNillableExamCode(i *int32) *ExamCityCenterCreate {
	if i != nil {
		eccc.SetExamCode(*i)
	}
	return eccc
}

// SetExamName sets the "ExamName" field.
func (eccc *ExamCityCenterCreate) SetExamName(s string) *ExamCityCenterCreate {
	eccc.mutation.SetExamName(s)
	return eccc
}

// SetNillableExamName sets the "ExamName" field if the given value is not nil.
func (eccc *ExamCityCenterCreate) SetNillableExamName(s *string) *ExamCityCenterCreate {
	if s != nil {
		eccc.SetExamName(*s)
	}
	return eccc
}

// SetExamShortName sets the "ExamShortName" field.
func (eccc *ExamCityCenterCreate) SetExamShortName(s string) *ExamCityCenterCreate {
	eccc.mutation.SetExamShortName(s)
	return eccc
}

// SetNillableExamShortName sets the "ExamShortName" field if the given value is not nil.
func (eccc *ExamCityCenterCreate) SetNillableExamShortName(s *string) *ExamCityCenterCreate {
	if s != nil {
		eccc.SetExamShortName(*s)
	}
	return eccc
}

// SetExamYear sets the "ExamYear" field.
func (eccc *ExamCityCenterCreate) SetExamYear(i int32) *ExamCityCenterCreate {
	eccc.mutation.SetExamYear(i)
	return eccc
}

// SetNillableExamYear sets the "ExamYear" field if the given value is not nil.
func (eccc *ExamCityCenterCreate) SetNillableExamYear(i *int32) *ExamCityCenterCreate {
	if i != nil {
		eccc.SetExamYear(*i)
	}
	return eccc
}

// SetConductedBy sets the "ConductedBy" field.
func (eccc *ExamCityCenterCreate) SetConductedBy(s string) *ExamCityCenterCreate {
	eccc.mutation.SetConductedBy(s)
	return eccc
}

// SetNillableConductedBy sets the "ConductedBy" field if the given value is not nil.
func (eccc *ExamCityCenterCreate) SetNillableConductedBy(s *string) *ExamCityCenterCreate {
	if s != nil {
		eccc.SetConductedBy(*s)
	}
	return eccc
}

// SetNodalOfficeFacilityID sets the "NodalOfficeFacilityID" field.
func (eccc *ExamCityCenterCreate) SetNodalOfficeFacilityID(s string) *ExamCityCenterCreate {
	eccc.mutation.SetNodalOfficeFacilityID(s)
	return eccc
}

// SetNillableNodalOfficeFacilityID sets the "NodalOfficeFacilityID" field if the given value is not nil.
func (eccc *ExamCityCenterCreate) SetNillableNodalOfficeFacilityID(s *string) *ExamCityCenterCreate {
	if s != nil {
		eccc.SetNodalOfficeFacilityID(*s)
	}
	return eccc
}

// SetNodalOfficeName sets the "NodalOfficeName" field.
func (eccc *ExamCityCenterCreate) SetNodalOfficeName(s string) *ExamCityCenterCreate {
	eccc.mutation.SetNodalOfficeName(s)
	return eccc
}

// SetNillableNodalOfficeName sets the "NodalOfficeName" field if the given value is not nil.
func (eccc *ExamCityCenterCreate) SetNillableNodalOfficeName(s *string) *ExamCityCenterCreate {
	if s != nil {
		eccc.SetNodalOfficeName(*s)
	}
	return eccc
}

// SetNotificationCode sets the "NotificationCode" field.
func (eccc *ExamCityCenterCreate) SetNotificationCode(i int32) *ExamCityCenterCreate {
	eccc.mutation.SetNotificationCode(i)
	return eccc
}

// SetNillableNotificationCode sets the "NotificationCode" field if the given value is not nil.
func (eccc *ExamCityCenterCreate) SetNillableNotificationCode(i *int32) *ExamCityCenterCreate {
	if i != nil {
		eccc.SetNotificationCode(*i)
	}
	return eccc
}

// SetNotificationNumber sets the "NotificationNumber" field.
func (eccc *ExamCityCenterCreate) SetNotificationNumber(s string) *ExamCityCenterCreate {
	eccc.mutation.SetNotificationNumber(s)
	return eccc
}

// SetNillableNotificationNumber sets the "NotificationNumber" field if the given value is not nil.
func (eccc *ExamCityCenterCreate) SetNillableNotificationNumber(s *string) *ExamCityCenterCreate {
	if s != nil {
		eccc.SetNotificationNumber(*s)
	}
	return eccc
}

// SetCenterCityName sets the "CenterCityName" field.
func (eccc *ExamCityCenterCreate) SetCenterCityName(s string) *ExamCityCenterCreate {
	eccc.mutation.SetCenterCityName(s)
	return eccc
}

// SetNillableCenterCityName sets the "CenterCityName" field if the given value is not nil.
func (eccc *ExamCityCenterCreate) SetNillableCenterCityName(s *string) *ExamCityCenterCreate {
	if s != nil {
		eccc.SetCenterCityName(*s)
	}
	return eccc
}

// SetCreatedById sets the "CreatedById" field.
func (eccc *ExamCityCenterCreate) SetCreatedById(i int64) *ExamCityCenterCreate {
	eccc.mutation.SetCreatedById(i)
	return eccc
}

// SetNillableCreatedById sets the "CreatedById" field if the given value is not nil.
func (eccc *ExamCityCenterCreate) SetNillableCreatedById(i *int64) *ExamCityCenterCreate {
	if i != nil {
		eccc.SetCreatedById(*i)
	}
	return eccc
}

// SetCreatedByUserName sets the "CreatedByUserName" field.
func (eccc *ExamCityCenterCreate) SetCreatedByUserName(s string) *ExamCityCenterCreate {
	eccc.mutation.SetCreatedByUserName(s)
	return eccc
}

// SetNillableCreatedByUserName sets the "CreatedByUserName" field if the given value is not nil.
func (eccc *ExamCityCenterCreate) SetNillableCreatedByUserName(s *string) *ExamCityCenterCreate {
	if s != nil {
		eccc.SetCreatedByUserName(*s)
	}
	return eccc
}

// SetCreatedByEmpId sets the "CreatedByEmpId" field.
func (eccc *ExamCityCenterCreate) SetCreatedByEmpId(i int64) *ExamCityCenterCreate {
	eccc.mutation.SetCreatedByEmpId(i)
	return eccc
}

// SetNillableCreatedByEmpId sets the "CreatedByEmpId" field if the given value is not nil.
func (eccc *ExamCityCenterCreate) SetNillableCreatedByEmpId(i *int64) *ExamCityCenterCreate {
	if i != nil {
		eccc.SetCreatedByEmpId(*i)
	}
	return eccc
}

// SetCreatedByDesignation sets the "CreatedByDesignation" field.
func (eccc *ExamCityCenterCreate) SetCreatedByDesignation(s string) *ExamCityCenterCreate {
	eccc.mutation.SetCreatedByDesignation(s)
	return eccc
}

// SetNillableCreatedByDesignation sets the "CreatedByDesignation" field if the given value is not nil.
func (eccc *ExamCityCenterCreate) SetNillableCreatedByDesignation(s *string) *ExamCityCenterCreate {
	if s != nil {
		eccc.SetCreatedByDesignation(*s)
	}
	return eccc
}

// SetCreatedDate sets the "CreatedDate" field.
func (eccc *ExamCityCenterCreate) SetCreatedDate(t time.Time) *ExamCityCenterCreate {
	eccc.mutation.SetCreatedDate(t)
	return eccc
}

// SetNillableCreatedDate sets the "CreatedDate" field if the given value is not nil.
func (eccc *ExamCityCenterCreate) SetNillableCreatedDate(t *time.Time) *ExamCityCenterCreate {
	if t != nil {
		eccc.SetCreatedDate(*t)
	}
	return eccc
}

// SetStatus sets the "Status" field.
func (eccc *ExamCityCenterCreate) SetStatus(s string) *ExamCityCenterCreate {
	eccc.mutation.SetStatus(s)
	return eccc
}

// SetNillableStatus sets the "Status" field if the given value is not nil.
func (eccc *ExamCityCenterCreate) SetNillableStatus(s *string) *ExamCityCenterCreate {
	if s != nil {
		eccc.SetStatus(*s)
	}
	return eccc
}

// SetDeletedbyid sets the "deletedbyid" field.
func (eccc *ExamCityCenterCreate) SetDeletedbyid(i int64) *ExamCityCenterCreate {
	eccc.mutation.SetDeletedbyid(i)
	return eccc
}

// SetNillableDeletedbyid sets the "deletedbyid" field if the given value is not nil.
func (eccc *ExamCityCenterCreate) SetNillableDeletedbyid(i *int64) *ExamCityCenterCreate {
	if i != nil {
		eccc.SetDeletedbyid(*i)
	}
	return eccc
}

// SetDeletedbyusername sets the "deletedbyusername" field.
func (eccc *ExamCityCenterCreate) SetDeletedbyusername(s string) *ExamCityCenterCreate {
	eccc.mutation.SetDeletedbyusername(s)
	return eccc
}

// SetNillableDeletedbyusername sets the "deletedbyusername" field if the given value is not nil.
func (eccc *ExamCityCenterCreate) SetNillableDeletedbyusername(s *string) *ExamCityCenterCreate {
	if s != nil {
		eccc.SetDeletedbyusername(*s)
	}
	return eccc
}

// SetDeletedbyEmployeeid sets the "deletedbyEmployeeid" field.
func (eccc *ExamCityCenterCreate) SetDeletedbyEmployeeid(i int64) *ExamCityCenterCreate {
	eccc.mutation.SetDeletedbyEmployeeid(i)
	return eccc
}

// SetNillableDeletedbyEmployeeid sets the "deletedbyEmployeeid" field if the given value is not nil.
func (eccc *ExamCityCenterCreate) SetNillableDeletedbyEmployeeid(i *int64) *ExamCityCenterCreate {
	if i != nil {
		eccc.SetDeletedbyEmployeeid(*i)
	}
	return eccc
}

// SetDeletedbyDesignation sets the "deletedbyDesignation" field.
func (eccc *ExamCityCenterCreate) SetDeletedbyDesignation(s string) *ExamCityCenterCreate {
	eccc.mutation.SetDeletedbyDesignation(s)
	return eccc
}

// SetNillableDeletedbyDesignation sets the "deletedbyDesignation" field if the given value is not nil.
func (eccc *ExamCityCenterCreate) SetNillableDeletedbyDesignation(s *string) *ExamCityCenterCreate {
	if s != nil {
		eccc.SetDeletedbyDesignation(*s)
	}
	return eccc
}

// SetDeletedDate sets the "deletedDate" field.
func (eccc *ExamCityCenterCreate) SetDeletedDate(t time.Time) *ExamCityCenterCreate {
	eccc.mutation.SetDeletedDate(t)
	return eccc
}

// SetNillableDeletedDate sets the "deletedDate" field if the given value is not nil.
func (eccc *ExamCityCenterCreate) SetNillableDeletedDate(t *time.Time) *ExamCityCenterCreate {
	if t != nil {
		eccc.SetDeletedDate(*t)
	}
	return eccc
}

// SetCircleCityName sets the "CircleCityName" field.
func (eccc *ExamCityCenterCreate) SetCircleCityName(s string) *ExamCityCenterCreate {
	eccc.mutation.SetCircleCityName(s)
	return eccc
}

// SetNillableCircleCityName sets the "CircleCityName" field if the given value is not nil.
func (eccc *ExamCityCenterCreate) SetNillableCircleCityName(s *string) *ExamCityCenterCreate {
	if s != nil {
		eccc.SetCircleCityName(*s)
	}
	return eccc
}

// SetDivisionCode sets the "DivisionCode" field.
func (eccc *ExamCityCenterCreate) SetDivisionCode(i int32) *ExamCityCenterCreate {
	eccc.mutation.SetDivisionCode(i)
	return eccc
}

// SetNillableDivisionCode sets the "DivisionCode" field if the given value is not nil.
func (eccc *ExamCityCenterCreate) SetNillableDivisionCode(i *int32) *ExamCityCenterCreate {
	if i != nil {
		eccc.SetDivisionCode(*i)
	}
	return eccc
}

// SetRegionCode sets the "RegionCode" field.
func (eccc *ExamCityCenterCreate) SetRegionCode(i int32) *ExamCityCenterCreate {
	eccc.mutation.SetRegionCode(i)
	return eccc
}

// SetNillableRegionCode sets the "RegionCode" field if the given value is not nil.
func (eccc *ExamCityCenterCreate) SetNillableRegionCode(i *int32) *ExamCityCenterCreate {
	if i != nil {
		eccc.SetRegionCode(*i)
	}
	return eccc
}

// SetDivisionName sets the "DivisionName" field.
func (eccc *ExamCityCenterCreate) SetDivisionName(s string) *ExamCityCenterCreate {
	eccc.mutation.SetDivisionName(s)
	return eccc
}

// SetNillableDivisionName sets the "DivisionName" field if the given value is not nil.
func (eccc *ExamCityCenterCreate) SetNillableDivisionName(s *string) *ExamCityCenterCreate {
	if s != nil {
		eccc.SetDivisionName(*s)
	}
	return eccc
}

// SetRegionID sets the "RegionID" field.
func (eccc *ExamCityCenterCreate) SetRegionID(i int32) *ExamCityCenterCreate {
	eccc.mutation.SetRegionID(i)
	return eccc
}

// SetNillableRegionID sets the "RegionID" field if the given value is not nil.
func (eccc *ExamCityCenterCreate) SetNillableRegionID(i *int32) *ExamCityCenterCreate {
	if i != nil {
		eccc.SetRegionID(*i)
	}
	return eccc
}

// SetRegionName sets the "RegionName" field.
func (eccc *ExamCityCenterCreate) SetRegionName(s string) *ExamCityCenterCreate {
	eccc.mutation.SetRegionName(s)
	return eccc
}

// SetNillableRegionName sets the "RegionName" field if the given value is not nil.
func (eccc *ExamCityCenterCreate) SetNillableRegionName(s *string) *ExamCityCenterCreate {
	if s != nil {
		eccc.SetRegionName(*s)
	}
	return eccc
}

// SetRegionCityName sets the "RegionCityName" field.
func (eccc *ExamCityCenterCreate) SetRegionCityName(s string) *ExamCityCenterCreate {
	eccc.mutation.SetRegionCityName(s)
	return eccc
}

// SetNillableRegionCityName sets the "RegionCityName" field if the given value is not nil.
func (eccc *ExamCityCenterCreate) SetNillableRegionCityName(s *string) *ExamCityCenterCreate {
	if s != nil {
		eccc.SetRegionCityName(*s)
	}
	return eccc
}

// SetCentreCityName sets the "CentreCityName" field.
func (eccc *ExamCityCenterCreate) SetCentreCityName(s string) *ExamCityCenterCreate {
	eccc.mutation.SetCentreCityName(s)
	return eccc
}

// SetNillableCentreCityName sets the "CentreCityName" field if the given value is not nil.
func (eccc *ExamCityCenterCreate) SetNillableCentreCityName(s *string) *ExamCityCenterCreate {
	if s != nil {
		eccc.SetCentreCityName(*s)
	}
	return eccc
}

// SetRemarks sets the "Remarks" field.
func (eccc *ExamCityCenterCreate) SetRemarks(s string) *ExamCityCenterCreate {
	eccc.mutation.SetRemarks(s)
	return eccc
}

// SetNillableRemarks sets the "Remarks" field if the given value is not nil.
func (eccc *ExamCityCenterCreate) SetNillableRemarks(s *string) *ExamCityCenterCreate {
	if s != nil {
		eccc.SetRemarks(*s)
	}
	return eccc
}

// SetUpdatedAt sets the "UpdatedAt" field.
func (eccc *ExamCityCenterCreate) SetUpdatedAt(t time.Time) *ExamCityCenterCreate {
	eccc.mutation.SetUpdatedAt(t)
	return eccc
}

// SetNillableUpdatedAt sets the "UpdatedAt" field if the given value is not nil.
func (eccc *ExamCityCenterCreate) SetNillableUpdatedAt(t *time.Time) *ExamCityCenterCreate {
	if t != nil {
		eccc.SetUpdatedAt(*t)
	}
	return eccc
}

// SetUpdatedBy sets the "UpdatedBy" field.
func (eccc *ExamCityCenterCreate) SetUpdatedBy(s string) *ExamCityCenterCreate {
	eccc.mutation.SetUpdatedBy(s)
	return eccc
}

// SetNillableUpdatedBy sets the "UpdatedBy" field if the given value is not nil.
func (eccc *ExamCityCenterCreate) SetNillableUpdatedBy(s *string) *ExamCityCenterCreate {
	if s != nil {
		eccc.SetUpdatedBy(*s)
	}
	return eccc
}

// SetCentreCode sets the "CentreCode" field.
func (eccc *ExamCityCenterCreate) SetCentreCode(i int32) *ExamCityCenterCreate {
	eccc.mutation.SetCentreCode(i)
	return eccc
}

// SetNillableCentreCode sets the "CentreCode" field if the given value is not nil.
func (eccc *ExamCityCenterCreate) SetNillableCentreCode(i *int32) *ExamCityCenterCreate {
	if i != nil {
		eccc.SetCentreCode(*i)
	}
	return eccc
}

// SetCircleID sets the "CircleID" field.
func (eccc *ExamCityCenterCreate) SetCircleID(i int32) *ExamCityCenterCreate {
	eccc.mutation.SetCircleID(i)
	return eccc
}

// SetNillableCircleID sets the "CircleID" field if the given value is not nil.
func (eccc *ExamCityCenterCreate) SetNillableCircleID(i *int32) *ExamCityCenterCreate {
	if i != nil {
		eccc.SetCircleID(*i)
	}
	return eccc
}

// SetID sets the "id" field.
func (eccc *ExamCityCenterCreate) SetID(i int32) *ExamCityCenterCreate {
	eccc.mutation.SetID(i)
	return eccc
}

// AddExamCityCenterRefIDs adds the "ExamCityCenterRef" edge to the Exam_Applications_IP entity by IDs.
func (eccc *ExamCityCenterCreate) AddExamCityCenterRefIDs(ids ...int64) *ExamCityCenterCreate {
	eccc.mutation.AddExamCityCenterRefIDs(ids...)
	return eccc
}

// AddExamCityCenterRef adds the "ExamCityCenterRef" edges to the Exam_Applications_IP entity.
func (eccc *ExamCityCenterCreate) AddExamCityCenterRef(e ...*Exam_Applications_IP) *ExamCityCenterCreate {
	ids := make([]int64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return eccc.AddExamCityCenterRefIDs(ids...)
}

// AddExamCityCenterMTSPMMGRefIDs adds the "ExamCityCenterMTSPMMGRef" edge to the Exam_Application_MTSPMMG entity by IDs.
func (eccc *ExamCityCenterCreate) AddExamCityCenterMTSPMMGRefIDs(ids ...int64) *ExamCityCenterCreate {
	eccc.mutation.AddExamCityCenterMTSPMMGRefIDs(ids...)
	return eccc
}

// AddExamCityCenterMTSPMMGRef adds the "ExamCityCenterMTSPMMGRef" edges to the Exam_Application_MTSPMMG entity.
func (eccc *ExamCityCenterCreate) AddExamCityCenterMTSPMMGRef(e ...*Exam_Application_MTSPMMG) *ExamCityCenterCreate {
	ids := make([]int64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return eccc.AddExamCityCenterMTSPMMGRefIDs(ids...)
}

// AddExamCityCenterGDSPARefIDs adds the "ExamCityCenterGDSPARef" edge to the Exam_Applications_GDSPA entity by IDs.
func (eccc *ExamCityCenterCreate) AddExamCityCenterGDSPARefIDs(ids ...int64) *ExamCityCenterCreate {
	eccc.mutation.AddExamCityCenterGDSPARefIDs(ids...)
	return eccc
}

// AddExamCityCenterGDSPARef adds the "ExamCityCenterGDSPARef" edges to the Exam_Applications_GDSPA entity.
func (eccc *ExamCityCenterCreate) AddExamCityCenterGDSPARef(e ...*Exam_Applications_GDSPA) *ExamCityCenterCreate {
	ids := make([]int64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return eccc.AddExamCityCenterGDSPARefIDs(ids...)
}

// AddExamCityCenterGDSPMRefIDs adds the "ExamCityCenterGDSPMRef" edge to the Exam_Applications_GDSPM entity by IDs.
func (eccc *ExamCityCenterCreate) AddExamCityCenterGDSPMRefIDs(ids ...int64) *ExamCityCenterCreate {
	eccc.mutation.AddExamCityCenterGDSPMRefIDs(ids...)
	return eccc
}

// AddExamCityCenterGDSPMRef adds the "ExamCityCenterGDSPMRef" edges to the Exam_Applications_GDSPM entity.
func (eccc *ExamCityCenterCreate) AddExamCityCenterGDSPMRef(e ...*Exam_Applications_GDSPM) *ExamCityCenterCreate {
	ids := make([]int64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return eccc.AddExamCityCenterGDSPMRefIDs(ids...)
}

// AddExamCityCenterPMPARefIDs adds the "ExamCityCenterPMPARef" edge to the Exam_Applications_PMPA entity by IDs.
func (eccc *ExamCityCenterCreate) AddExamCityCenterPMPARefIDs(ids ...int64) *ExamCityCenterCreate {
	eccc.mutation.AddExamCityCenterPMPARefIDs(ids...)
	return eccc
}

// AddExamCityCenterPMPARef adds the "ExamCityCenterPMPARef" edges to the Exam_Applications_PMPA entity.
func (eccc *ExamCityCenterCreate) AddExamCityCenterPMPARef(e ...*Exam_Applications_PMPA) *ExamCityCenterCreate {
	ids := make([]int64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return eccc.AddExamCityCenterPMPARefIDs(ids...)
}

// AddExamCityCenterPSRefIDs adds the "ExamCityCenterPSRef" edge to the Exam_Applications_PS entity by IDs.
func (eccc *ExamCityCenterCreate) AddExamCityCenterPSRefIDs(ids ...int64) *ExamCityCenterCreate {
	eccc.mutation.AddExamCityCenterPSRefIDs(ids...)
	return eccc
}

// AddExamCityCenterPSRef adds the "ExamCityCenterPSRef" edges to the Exam_Applications_PS entity.
func (eccc *ExamCityCenterCreate) AddExamCityCenterPSRef(e ...*Exam_Applications_PS) *ExamCityCenterCreate {
	ids := make([]int64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return eccc.AddExamCityCenterPSRefIDs(ids...)
}

// Mutation returns the ExamCityCenterMutation object of the builder.
func (eccc *ExamCityCenterCreate) Mutation() *ExamCityCenterMutation {
	return eccc.mutation
}

// Save creates the ExamCityCenter in the database.
func (eccc *ExamCityCenterCreate) Save(ctx context.Context) (*ExamCityCenter, error) {
	eccc.defaults()
	return withHooks(ctx, eccc.sqlSave, eccc.mutation, eccc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (eccc *ExamCityCenterCreate) SaveX(ctx context.Context) *ExamCityCenter {
	v, err := eccc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (eccc *ExamCityCenterCreate) Exec(ctx context.Context) error {
	_, err := eccc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eccc *ExamCityCenterCreate) ExecX(ctx context.Context) {
	if err := eccc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (eccc *ExamCityCenterCreate) defaults() {
	if _, ok := eccc.mutation.ExamCode(); !ok {
		v := examcitycenter.DefaultExamCode
		eccc.mutation.SetExamCode(v)
	}
	if _, ok := eccc.mutation.ExamYear(); !ok {
		v := examcitycenter.DefaultExamYear
		eccc.mutation.SetExamYear(v)
	}
	if _, ok := eccc.mutation.NotificationCode(); !ok {
		v := examcitycenter.DefaultNotificationCode
		eccc.mutation.SetNotificationCode(v)
	}
	if _, ok := eccc.mutation.CreatedById(); !ok {
		v := examcitycenter.DefaultCreatedById
		eccc.mutation.SetCreatedById(v)
	}
	if _, ok := eccc.mutation.CreatedByEmpId(); !ok {
		v := examcitycenter.DefaultCreatedByEmpId
		eccc.mutation.SetCreatedByEmpId(v)
	}
	if _, ok := eccc.mutation.Deletedbyid(); !ok {
		v := examcitycenter.DefaultDeletedbyid
		eccc.mutation.SetDeletedbyid(v)
	}
	if _, ok := eccc.mutation.DeletedbyEmployeeid(); !ok {
		v := examcitycenter.DefaultDeletedbyEmployeeid
		eccc.mutation.SetDeletedbyEmployeeid(v)
	}
	if _, ok := eccc.mutation.DivisionCode(); !ok {
		v := examcitycenter.DefaultDivisionCode
		eccc.mutation.SetDivisionCode(v)
	}
	if _, ok := eccc.mutation.RegionCode(); !ok {
		v := examcitycenter.DefaultRegionCode
		eccc.mutation.SetRegionCode(v)
	}
	if _, ok := eccc.mutation.CentreCode(); !ok {
		v := examcitycenter.DefaultCentreCode
		eccc.mutation.SetCentreCode(v)
	}
	if _, ok := eccc.mutation.CircleID(); !ok {
		v := examcitycenter.DefaultCircleID
		eccc.mutation.SetCircleID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (eccc *ExamCityCenterCreate) check() error {
	return nil
}

func (eccc *ExamCityCenterCreate) sqlSave(ctx context.Context) (*ExamCityCenter, error) {
	if err := eccc.check(); err != nil {
		return nil, err
	}
	_node, _spec := eccc.createSpec()
	if err := sqlgraph.CreateNode(ctx, eccc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int32(id)
	}
	eccc.mutation.id = &_node.ID
	eccc.mutation.done = true
	return _node, nil
}

func (eccc *ExamCityCenterCreate) createSpec() (*ExamCityCenter, *sqlgraph.CreateSpec) {
	var (
		_node = &ExamCityCenter{config: eccc.config}
		_spec = sqlgraph.NewCreateSpec(examcitycenter.Table, sqlgraph.NewFieldSpec(examcitycenter.FieldID, field.TypeInt32))
	)
	if id, ok := eccc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := eccc.mutation.ExamCode(); ok {
		_spec.SetField(examcitycenter.FieldExamCode, field.TypeInt32, value)
		_node.ExamCode = value
	}
	if value, ok := eccc.mutation.ExamName(); ok {
		_spec.SetField(examcitycenter.FieldExamName, field.TypeString, value)
		_node.ExamName = value
	}
	if value, ok := eccc.mutation.ExamShortName(); ok {
		_spec.SetField(examcitycenter.FieldExamShortName, field.TypeString, value)
		_node.ExamShortName = value
	}
	if value, ok := eccc.mutation.ExamYear(); ok {
		_spec.SetField(examcitycenter.FieldExamYear, field.TypeInt32, value)
		_node.ExamYear = value
	}
	if value, ok := eccc.mutation.ConductedBy(); ok {
		_spec.SetField(examcitycenter.FieldConductedBy, field.TypeString, value)
		_node.ConductedBy = value
	}
	if value, ok := eccc.mutation.NodalOfficeFacilityID(); ok {
		_spec.SetField(examcitycenter.FieldNodalOfficeFacilityID, field.TypeString, value)
		_node.NodalOfficeFacilityID = value
	}
	if value, ok := eccc.mutation.NodalOfficeName(); ok {
		_spec.SetField(examcitycenter.FieldNodalOfficeName, field.TypeString, value)
		_node.NodalOfficeName = value
	}
	if value, ok := eccc.mutation.NotificationCode(); ok {
		_spec.SetField(examcitycenter.FieldNotificationCode, field.TypeInt32, value)
		_node.NotificationCode = value
	}
	if value, ok := eccc.mutation.NotificationNumber(); ok {
		_spec.SetField(examcitycenter.FieldNotificationNumber, field.TypeString, value)
		_node.NotificationNumber = value
	}
	if value, ok := eccc.mutation.CenterCityName(); ok {
		_spec.SetField(examcitycenter.FieldCenterCityName, field.TypeString, value)
		_node.CenterCityName = value
	}
	if value, ok := eccc.mutation.CreatedById(); ok {
		_spec.SetField(examcitycenter.FieldCreatedById, field.TypeInt64, value)
		_node.CreatedById = value
	}
	if value, ok := eccc.mutation.CreatedByUserName(); ok {
		_spec.SetField(examcitycenter.FieldCreatedByUserName, field.TypeString, value)
		_node.CreatedByUserName = value
	}
	if value, ok := eccc.mutation.CreatedByEmpId(); ok {
		_spec.SetField(examcitycenter.FieldCreatedByEmpId, field.TypeInt64, value)
		_node.CreatedByEmpId = value
	}
	if value, ok := eccc.mutation.CreatedByDesignation(); ok {
		_spec.SetField(examcitycenter.FieldCreatedByDesignation, field.TypeString, value)
		_node.CreatedByDesignation = value
	}
	if value, ok := eccc.mutation.CreatedDate(); ok {
		_spec.SetField(examcitycenter.FieldCreatedDate, field.TypeTime, value)
		_node.CreatedDate = value
	}
	if value, ok := eccc.mutation.Status(); ok {
		_spec.SetField(examcitycenter.FieldStatus, field.TypeString, value)
		_node.Status = value
	}
	if value, ok := eccc.mutation.Deletedbyid(); ok {
		_spec.SetField(examcitycenter.FieldDeletedbyid, field.TypeInt64, value)
		_node.Deletedbyid = value
	}
	if value, ok := eccc.mutation.Deletedbyusername(); ok {
		_spec.SetField(examcitycenter.FieldDeletedbyusername, field.TypeString, value)
		_node.Deletedbyusername = value
	}
	if value, ok := eccc.mutation.DeletedbyEmployeeid(); ok {
		_spec.SetField(examcitycenter.FieldDeletedbyEmployeeid, field.TypeInt64, value)
		_node.DeletedbyEmployeeid = value
	}
	if value, ok := eccc.mutation.DeletedbyDesignation(); ok {
		_spec.SetField(examcitycenter.FieldDeletedbyDesignation, field.TypeString, value)
		_node.DeletedbyDesignation = value
	}
	if value, ok := eccc.mutation.DeletedDate(); ok {
		_spec.SetField(examcitycenter.FieldDeletedDate, field.TypeTime, value)
		_node.DeletedDate = value
	}
	if value, ok := eccc.mutation.CircleCityName(); ok {
		_spec.SetField(examcitycenter.FieldCircleCityName, field.TypeString, value)
		_node.CircleCityName = value
	}
	if value, ok := eccc.mutation.DivisionCode(); ok {
		_spec.SetField(examcitycenter.FieldDivisionCode, field.TypeInt32, value)
		_node.DivisionCode = value
	}
	if value, ok := eccc.mutation.RegionCode(); ok {
		_spec.SetField(examcitycenter.FieldRegionCode, field.TypeInt32, value)
		_node.RegionCode = value
	}
	if value, ok := eccc.mutation.DivisionName(); ok {
		_spec.SetField(examcitycenter.FieldDivisionName, field.TypeString, value)
		_node.DivisionName = value
	}
	if value, ok := eccc.mutation.RegionID(); ok {
		_spec.SetField(examcitycenter.FieldRegionID, field.TypeInt32, value)
		_node.RegionID = value
	}
	if value, ok := eccc.mutation.RegionName(); ok {
		_spec.SetField(examcitycenter.FieldRegionName, field.TypeString, value)
		_node.RegionName = value
	}
	if value, ok := eccc.mutation.RegionCityName(); ok {
		_spec.SetField(examcitycenter.FieldRegionCityName, field.TypeString, value)
		_node.RegionCityName = value
	}
	if value, ok := eccc.mutation.CentreCityName(); ok {
		_spec.SetField(examcitycenter.FieldCentreCityName, field.TypeString, value)
		_node.CentreCityName = value
	}
	if value, ok := eccc.mutation.Remarks(); ok {
		_spec.SetField(examcitycenter.FieldRemarks, field.TypeString, value)
		_node.Remarks = value
	}
	if value, ok := eccc.mutation.UpdatedAt(); ok {
		_spec.SetField(examcitycenter.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := eccc.mutation.UpdatedBy(); ok {
		_spec.SetField(examcitycenter.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if value, ok := eccc.mutation.CentreCode(); ok {
		_spec.SetField(examcitycenter.FieldCentreCode, field.TypeInt32, value)
		_node.CentreCode = value
	}
	if value, ok := eccc.mutation.CircleID(); ok {
		_spec.SetField(examcitycenter.FieldCircleID, field.TypeInt32, value)
		_node.CircleID = value
	}
	if nodes := eccc.mutation.ExamCityCenterRefIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   examcitycenter.ExamCityCenterRefTable,
			Columns: []string{examcitycenter.ExamCityCenterRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_ip.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := eccc.mutation.ExamCityCenterMTSPMMGRefIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   examcitycenter.ExamCityCenterMTSPMMGRefTable,
			Columns: []string{examcitycenter.ExamCityCenterMTSPMMGRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_application_mtspmmg.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := eccc.mutation.ExamCityCenterGDSPARefIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   examcitycenter.ExamCityCenterGDSPARefTable,
			Columns: []string{examcitycenter.ExamCityCenterGDSPARefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_gdspa.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := eccc.mutation.ExamCityCenterGDSPMRefIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   examcitycenter.ExamCityCenterGDSPMRefTable,
			Columns: []string{examcitycenter.ExamCityCenterGDSPMRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_gdspm.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := eccc.mutation.ExamCityCenterPMPARefIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   examcitycenter.ExamCityCenterPMPARefTable,
			Columns: []string{examcitycenter.ExamCityCenterPMPARefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_pmpa.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := eccc.mutation.ExamCityCenterPSRefIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   examcitycenter.ExamCityCenterPSRefTable,
			Columns: []string{examcitycenter.ExamCityCenterPSRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_ps.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ExamCityCenterCreateBulk is the builder for creating many ExamCityCenter entities in bulk.
type ExamCityCenterCreateBulk struct {
	config
	builders []*ExamCityCenterCreate
}

// Save creates the ExamCityCenter entities in the database.
func (ecccb *ExamCityCenterCreateBulk) Save(ctx context.Context) ([]*ExamCityCenter, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ecccb.builders))
	nodes := make([]*ExamCityCenter, len(ecccb.builders))
	mutators := make([]Mutator, len(ecccb.builders))
	for i := range ecccb.builders {
		func(i int, root context.Context) {
			builder := ecccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ExamCityCenterMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ecccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ecccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ecccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ecccb *ExamCityCenterCreateBulk) SaveX(ctx context.Context) []*ExamCityCenter {
	v, err := ecccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ecccb *ExamCityCenterCreateBulk) Exec(ctx context.Context) error {
	_, err := ecccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ecccb *ExamCityCenterCreateBulk) ExecX(ctx context.Context) {
	if err := ecccb.Exec(ctx); err != nil {
		panic(err)
	}
}
