// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"recruit/ent/predicate"
	"recruit/ent/servicerequest"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ServiceRequestUpdate is the builder for updating ServiceRequest entities.
type ServiceRequestUpdate struct {
	config
	hooks    []Hook
	mutation *ServiceRequestMutation
}

// Where appends a list predicates to the ServiceRequestUpdate builder.
func (sru *ServiceRequestUpdate) Where(ps ...predicate.ServiceRequest) *ServiceRequestUpdate {
	sru.mutation.Where(ps...)
	return sru
}

// SetRemarks sets the "remarks" field.
func (sru *ServiceRequestUpdate) SetRemarks(s string) *ServiceRequestUpdate {
	sru.mutation.SetRemarks(s)
	return sru
}

// SetNillableRemarks sets the "remarks" field if the given value is not nil.
func (sru *ServiceRequestUpdate) SetNillableRemarks(s *string) *ServiceRequestUpdate {
	if s != nil {
		sru.SetRemarks(*s)
	}
	return sru
}

// ClearRemarks clears the value of the "remarks" field.
func (sru *ServiceRequestUpdate) ClearRemarks() *ServiceRequestUpdate {
	sru.mutation.ClearRemarks()
	return sru
}

// SetAction sets the "action" field.
func (sru *ServiceRequestUpdate) SetAction(s string) *ServiceRequestUpdate {
	sru.mutation.SetAction(s)
	return sru
}

// SetNillableAction sets the "action" field if the given value is not nil.
func (sru *ServiceRequestUpdate) SetNillableAction(s *string) *ServiceRequestUpdate {
	if s != nil {
		sru.SetAction(*s)
	}
	return sru
}

// ClearAction clears the value of the "action" field.
func (sru *ServiceRequestUpdate) ClearAction() *ServiceRequestUpdate {
	sru.mutation.ClearAction()
	return sru
}

// SetPushedTime sets the "PushedTime" field.
func (sru *ServiceRequestUpdate) SetPushedTime(t time.Time) *ServiceRequestUpdate {
	sru.mutation.SetPushedTime(t)
	return sru
}

// SetNillablePushedTime sets the "PushedTime" field if the given value is not nil.
func (sru *ServiceRequestUpdate) SetNillablePushedTime(t *time.Time) *ServiceRequestUpdate {
	if t != nil {
		sru.SetPushedTime(*t)
	}
	return sru
}

// ClearPushedTime clears the value of the "PushedTime" field.
func (sru *ServiceRequestUpdate) ClearPushedTime() *ServiceRequestUpdate {
	sru.mutation.ClearPushedTime()
	return sru
}

// SetUpdatedBy sets the "UpdatedBy" field.
func (sru *ServiceRequestUpdate) SetUpdatedBy(s string) *ServiceRequestUpdate {
	sru.mutation.SetUpdatedBy(s)
	return sru
}

// SetNillableUpdatedBy sets the "UpdatedBy" field if the given value is not nil.
func (sru *ServiceRequestUpdate) SetNillableUpdatedBy(s *string) *ServiceRequestUpdate {
	if s != nil {
		sru.SetUpdatedBy(*s)
	}
	return sru
}

// ClearUpdatedBy clears the value of the "UpdatedBy" field.
func (sru *ServiceRequestUpdate) ClearUpdatedBy() *ServiceRequestUpdate {
	sru.mutation.ClearUpdatedBy()
	return sru
}

// SetUpdatedTime sets the "UpdatedTime" field.
func (sru *ServiceRequestUpdate) SetUpdatedTime(t time.Time) *ServiceRequestUpdate {
	sru.mutation.SetUpdatedTime(t)
	return sru
}

// SetNillableUpdatedTime sets the "UpdatedTime" field if the given value is not nil.
func (sru *ServiceRequestUpdate) SetNillableUpdatedTime(t *time.Time) *ServiceRequestUpdate {
	if t != nil {
		sru.SetUpdatedTime(*t)
	}
	return sru
}

// ClearUpdatedTime clears the value of the "UpdatedTime" field.
func (sru *ServiceRequestUpdate) ClearUpdatedTime() *ServiceRequestUpdate {
	sru.mutation.ClearUpdatedTime()
	return sru
}

// SetAssignedTo sets the "AssignedTo" field.
func (sru *ServiceRequestUpdate) SetAssignedTo(s string) *ServiceRequestUpdate {
	sru.mutation.SetAssignedTo(s)
	return sru
}

// SetNillableAssignedTo sets the "AssignedTo" field if the given value is not nil.
func (sru *ServiceRequestUpdate) SetNillableAssignedTo(s *string) *ServiceRequestUpdate {
	if s != nil {
		sru.SetAssignedTo(*s)
	}
	return sru
}

// ClearAssignedTo clears the value of the "AssignedTo" field.
func (sru *ServiceRequestUpdate) ClearAssignedTo() *ServiceRequestUpdate {
	sru.mutation.ClearAssignedTo()
	return sru
}

// SetRemarksNew sets the "RemarksNew" field.
func (sru *ServiceRequestUpdate) SetRemarksNew(s string) *ServiceRequestUpdate {
	sru.mutation.SetRemarksNew(s)
	return sru
}

// SetNillableRemarksNew sets the "RemarksNew" field if the given value is not nil.
func (sru *ServiceRequestUpdate) SetNillableRemarksNew(s *string) *ServiceRequestUpdate {
	if s != nil {
		sru.SetRemarksNew(*s)
	}
	return sru
}

// ClearRemarksNew clears the value of the "RemarksNew" field.
func (sru *ServiceRequestUpdate) ClearRemarksNew() *ServiceRequestUpdate {
	sru.mutation.ClearRemarksNew()
	return sru
}

// SetStatus sets the "Status" field.
func (sru *ServiceRequestUpdate) SetStatus(s string) *ServiceRequestUpdate {
	sru.mutation.SetStatus(s)
	return sru
}

// SetNillableStatus sets the "Status" field if the given value is not nil.
func (sru *ServiceRequestUpdate) SetNillableStatus(s *string) *ServiceRequestUpdate {
	if s != nil {
		sru.SetStatus(*s)
	}
	return sru
}

// ClearStatus clears the value of the "Status" field.
func (sru *ServiceRequestUpdate) ClearStatus() *ServiceRequestUpdate {
	sru.mutation.ClearStatus()
	return sru
}

// SetClosedOn sets the "ClosedOn" field.
func (sru *ServiceRequestUpdate) SetClosedOn(t time.Time) *ServiceRequestUpdate {
	sru.mutation.SetClosedOn(t)
	return sru
}

// SetNillableClosedOn sets the "ClosedOn" field if the given value is not nil.
func (sru *ServiceRequestUpdate) SetNillableClosedOn(t *time.Time) *ServiceRequestUpdate {
	if t != nil {
		sru.SetClosedOn(*t)
	}
	return sru
}

// ClearClosedOn clears the value of the "ClosedOn" field.
func (sru *ServiceRequestUpdate) ClearClosedOn() *ServiceRequestUpdate {
	sru.mutation.ClearClosedOn()
	return sru
}

// Mutation returns the ServiceRequestMutation object of the builder.
func (sru *ServiceRequestUpdate) Mutation() *ServiceRequestMutation {
	return sru.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (sru *ServiceRequestUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, sru.sqlSave, sru.mutation, sru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (sru *ServiceRequestUpdate) SaveX(ctx context.Context) int {
	affected, err := sru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (sru *ServiceRequestUpdate) Exec(ctx context.Context) error {
	_, err := sru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sru *ServiceRequestUpdate) ExecX(ctx context.Context) {
	if err := sru.Exec(ctx); err != nil {
		panic(err)
	}
}

func (sru *ServiceRequestUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(servicerequest.Table, servicerequest.Columns, sqlgraph.NewFieldSpec(servicerequest.FieldID, field.TypeInt64))
	if ps := sru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sru.mutation.Remarks(); ok {
		_spec.SetField(servicerequest.FieldRemarks, field.TypeString, value)
	}
	if sru.mutation.RemarksCleared() {
		_spec.ClearField(servicerequest.FieldRemarks, field.TypeString)
	}
	if value, ok := sru.mutation.Action(); ok {
		_spec.SetField(servicerequest.FieldAction, field.TypeString, value)
	}
	if sru.mutation.ActionCleared() {
		_spec.ClearField(servicerequest.FieldAction, field.TypeString)
	}
	if value, ok := sru.mutation.PushedTime(); ok {
		_spec.SetField(servicerequest.FieldPushedTime, field.TypeTime, value)
	}
	if sru.mutation.PushedTimeCleared() {
		_spec.ClearField(servicerequest.FieldPushedTime, field.TypeTime)
	}
	if value, ok := sru.mutation.UpdatedBy(); ok {
		_spec.SetField(servicerequest.FieldUpdatedBy, field.TypeString, value)
	}
	if sru.mutation.UpdatedByCleared() {
		_spec.ClearField(servicerequest.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := sru.mutation.UpdatedTime(); ok {
		_spec.SetField(servicerequest.FieldUpdatedTime, field.TypeTime, value)
	}
	if sru.mutation.UpdatedTimeCleared() {
		_spec.ClearField(servicerequest.FieldUpdatedTime, field.TypeTime)
	}
	if value, ok := sru.mutation.AssignedTo(); ok {
		_spec.SetField(servicerequest.FieldAssignedTo, field.TypeString, value)
	}
	if sru.mutation.AssignedToCleared() {
		_spec.ClearField(servicerequest.FieldAssignedTo, field.TypeString)
	}
	if value, ok := sru.mutation.RemarksNew(); ok {
		_spec.SetField(servicerequest.FieldRemarksNew, field.TypeString, value)
	}
	if sru.mutation.RemarksNewCleared() {
		_spec.ClearField(servicerequest.FieldRemarksNew, field.TypeString)
	}
	if value, ok := sru.mutation.Status(); ok {
		_spec.SetField(servicerequest.FieldStatus, field.TypeString, value)
	}
	if sru.mutation.StatusCleared() {
		_spec.ClearField(servicerequest.FieldStatus, field.TypeString)
	}
	if value, ok := sru.mutation.ClosedOn(); ok {
		_spec.SetField(servicerequest.FieldClosedOn, field.TypeTime, value)
	}
	if sru.mutation.ClosedOnCleared() {
		_spec.ClearField(servicerequest.FieldClosedOn, field.TypeTime)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, sru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{servicerequest.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	sru.mutation.done = true
	return n, nil
}

// ServiceRequestUpdateOne is the builder for updating a single ServiceRequest entity.
type ServiceRequestUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ServiceRequestMutation
}

// SetRemarks sets the "remarks" field.
func (sruo *ServiceRequestUpdateOne) SetRemarks(s string) *ServiceRequestUpdateOne {
	sruo.mutation.SetRemarks(s)
	return sruo
}

// SetNillableRemarks sets the "remarks" field if the given value is not nil.
func (sruo *ServiceRequestUpdateOne) SetNillableRemarks(s *string) *ServiceRequestUpdateOne {
	if s != nil {
		sruo.SetRemarks(*s)
	}
	return sruo
}

// ClearRemarks clears the value of the "remarks" field.
func (sruo *ServiceRequestUpdateOne) ClearRemarks() *ServiceRequestUpdateOne {
	sruo.mutation.ClearRemarks()
	return sruo
}

// SetAction sets the "action" field.
func (sruo *ServiceRequestUpdateOne) SetAction(s string) *ServiceRequestUpdateOne {
	sruo.mutation.SetAction(s)
	return sruo
}

// SetNillableAction sets the "action" field if the given value is not nil.
func (sruo *ServiceRequestUpdateOne) SetNillableAction(s *string) *ServiceRequestUpdateOne {
	if s != nil {
		sruo.SetAction(*s)
	}
	return sruo
}

// ClearAction clears the value of the "action" field.
func (sruo *ServiceRequestUpdateOne) ClearAction() *ServiceRequestUpdateOne {
	sruo.mutation.ClearAction()
	return sruo
}

// SetPushedTime sets the "PushedTime" field.
func (sruo *ServiceRequestUpdateOne) SetPushedTime(t time.Time) *ServiceRequestUpdateOne {
	sruo.mutation.SetPushedTime(t)
	return sruo
}

// SetNillablePushedTime sets the "PushedTime" field if the given value is not nil.
func (sruo *ServiceRequestUpdateOne) SetNillablePushedTime(t *time.Time) *ServiceRequestUpdateOne {
	if t != nil {
		sruo.SetPushedTime(*t)
	}
	return sruo
}

// ClearPushedTime clears the value of the "PushedTime" field.
func (sruo *ServiceRequestUpdateOne) ClearPushedTime() *ServiceRequestUpdateOne {
	sruo.mutation.ClearPushedTime()
	return sruo
}

// SetUpdatedBy sets the "UpdatedBy" field.
func (sruo *ServiceRequestUpdateOne) SetUpdatedBy(s string) *ServiceRequestUpdateOne {
	sruo.mutation.SetUpdatedBy(s)
	return sruo
}

// SetNillableUpdatedBy sets the "UpdatedBy" field if the given value is not nil.
func (sruo *ServiceRequestUpdateOne) SetNillableUpdatedBy(s *string) *ServiceRequestUpdateOne {
	if s != nil {
		sruo.SetUpdatedBy(*s)
	}
	return sruo
}

// ClearUpdatedBy clears the value of the "UpdatedBy" field.
func (sruo *ServiceRequestUpdateOne) ClearUpdatedBy() *ServiceRequestUpdateOne {
	sruo.mutation.ClearUpdatedBy()
	return sruo
}

// SetUpdatedTime sets the "UpdatedTime" field.
func (sruo *ServiceRequestUpdateOne) SetUpdatedTime(t time.Time) *ServiceRequestUpdateOne {
	sruo.mutation.SetUpdatedTime(t)
	return sruo
}

// SetNillableUpdatedTime sets the "UpdatedTime" field if the given value is not nil.
func (sruo *ServiceRequestUpdateOne) SetNillableUpdatedTime(t *time.Time) *ServiceRequestUpdateOne {
	if t != nil {
		sruo.SetUpdatedTime(*t)
	}
	return sruo
}

// ClearUpdatedTime clears the value of the "UpdatedTime" field.
func (sruo *ServiceRequestUpdateOne) ClearUpdatedTime() *ServiceRequestUpdateOne {
	sruo.mutation.ClearUpdatedTime()
	return sruo
}

// SetAssignedTo sets the "AssignedTo" field.
func (sruo *ServiceRequestUpdateOne) SetAssignedTo(s string) *ServiceRequestUpdateOne {
	sruo.mutation.SetAssignedTo(s)
	return sruo
}

// SetNillableAssignedTo sets the "AssignedTo" field if the given value is not nil.
func (sruo *ServiceRequestUpdateOne) SetNillableAssignedTo(s *string) *ServiceRequestUpdateOne {
	if s != nil {
		sruo.SetAssignedTo(*s)
	}
	return sruo
}

// ClearAssignedTo clears the value of the "AssignedTo" field.
func (sruo *ServiceRequestUpdateOne) ClearAssignedTo() *ServiceRequestUpdateOne {
	sruo.mutation.ClearAssignedTo()
	return sruo
}

// SetRemarksNew sets the "RemarksNew" field.
func (sruo *ServiceRequestUpdateOne) SetRemarksNew(s string) *ServiceRequestUpdateOne {
	sruo.mutation.SetRemarksNew(s)
	return sruo
}

// SetNillableRemarksNew sets the "RemarksNew" field if the given value is not nil.
func (sruo *ServiceRequestUpdateOne) SetNillableRemarksNew(s *string) *ServiceRequestUpdateOne {
	if s != nil {
		sruo.SetRemarksNew(*s)
	}
	return sruo
}

// ClearRemarksNew clears the value of the "RemarksNew" field.
func (sruo *ServiceRequestUpdateOne) ClearRemarksNew() *ServiceRequestUpdateOne {
	sruo.mutation.ClearRemarksNew()
	return sruo
}

// SetStatus sets the "Status" field.
func (sruo *ServiceRequestUpdateOne) SetStatus(s string) *ServiceRequestUpdateOne {
	sruo.mutation.SetStatus(s)
	return sruo
}

// SetNillableStatus sets the "Status" field if the given value is not nil.
func (sruo *ServiceRequestUpdateOne) SetNillableStatus(s *string) *ServiceRequestUpdateOne {
	if s != nil {
		sruo.SetStatus(*s)
	}
	return sruo
}

// ClearStatus clears the value of the "Status" field.
func (sruo *ServiceRequestUpdateOne) ClearStatus() *ServiceRequestUpdateOne {
	sruo.mutation.ClearStatus()
	return sruo
}

// SetClosedOn sets the "ClosedOn" field.
func (sruo *ServiceRequestUpdateOne) SetClosedOn(t time.Time) *ServiceRequestUpdateOne {
	sruo.mutation.SetClosedOn(t)
	return sruo
}

// SetNillableClosedOn sets the "ClosedOn" field if the given value is not nil.
func (sruo *ServiceRequestUpdateOne) SetNillableClosedOn(t *time.Time) *ServiceRequestUpdateOne {
	if t != nil {
		sruo.SetClosedOn(*t)
	}
	return sruo
}

// ClearClosedOn clears the value of the "ClosedOn" field.
func (sruo *ServiceRequestUpdateOne) ClearClosedOn() *ServiceRequestUpdateOne {
	sruo.mutation.ClearClosedOn()
	return sruo
}

// Mutation returns the ServiceRequestMutation object of the builder.
func (sruo *ServiceRequestUpdateOne) Mutation() *ServiceRequestMutation {
	return sruo.mutation
}

// Where appends a list predicates to the ServiceRequestUpdate builder.
func (sruo *ServiceRequestUpdateOne) Where(ps ...predicate.ServiceRequest) *ServiceRequestUpdateOne {
	sruo.mutation.Where(ps...)
	return sruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (sruo *ServiceRequestUpdateOne) Select(field string, fields ...string) *ServiceRequestUpdateOne {
	sruo.fields = append([]string{field}, fields...)
	return sruo
}

// Save executes the query and returns the updated ServiceRequest entity.
func (sruo *ServiceRequestUpdateOne) Save(ctx context.Context) (*ServiceRequest, error) {
	return withHooks(ctx, sruo.sqlSave, sruo.mutation, sruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (sruo *ServiceRequestUpdateOne) SaveX(ctx context.Context) *ServiceRequest {
	node, err := sruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (sruo *ServiceRequestUpdateOne) Exec(ctx context.Context) error {
	_, err := sruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sruo *ServiceRequestUpdateOne) ExecX(ctx context.Context) {
	if err := sruo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (sruo *ServiceRequestUpdateOne) sqlSave(ctx context.Context) (_node *ServiceRequest, err error) {
	_spec := sqlgraph.NewUpdateSpec(servicerequest.Table, servicerequest.Columns, sqlgraph.NewFieldSpec(servicerequest.FieldID, field.TypeInt64))
	id, ok := sruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ServiceRequest.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := sruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, servicerequest.FieldID)
		for _, f := range fields {
			if !servicerequest.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != servicerequest.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := sruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sruo.mutation.Remarks(); ok {
		_spec.SetField(servicerequest.FieldRemarks, field.TypeString, value)
	}
	if sruo.mutation.RemarksCleared() {
		_spec.ClearField(servicerequest.FieldRemarks, field.TypeString)
	}
	if value, ok := sruo.mutation.Action(); ok {
		_spec.SetField(servicerequest.FieldAction, field.TypeString, value)
	}
	if sruo.mutation.ActionCleared() {
		_spec.ClearField(servicerequest.FieldAction, field.TypeString)
	}
	if value, ok := sruo.mutation.PushedTime(); ok {
		_spec.SetField(servicerequest.FieldPushedTime, field.TypeTime, value)
	}
	if sruo.mutation.PushedTimeCleared() {
		_spec.ClearField(servicerequest.FieldPushedTime, field.TypeTime)
	}
	if value, ok := sruo.mutation.UpdatedBy(); ok {
		_spec.SetField(servicerequest.FieldUpdatedBy, field.TypeString, value)
	}
	if sruo.mutation.UpdatedByCleared() {
		_spec.ClearField(servicerequest.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := sruo.mutation.UpdatedTime(); ok {
		_spec.SetField(servicerequest.FieldUpdatedTime, field.TypeTime, value)
	}
	if sruo.mutation.UpdatedTimeCleared() {
		_spec.ClearField(servicerequest.FieldUpdatedTime, field.TypeTime)
	}
	if value, ok := sruo.mutation.AssignedTo(); ok {
		_spec.SetField(servicerequest.FieldAssignedTo, field.TypeString, value)
	}
	if sruo.mutation.AssignedToCleared() {
		_spec.ClearField(servicerequest.FieldAssignedTo, field.TypeString)
	}
	if value, ok := sruo.mutation.RemarksNew(); ok {
		_spec.SetField(servicerequest.FieldRemarksNew, field.TypeString, value)
	}
	if sruo.mutation.RemarksNewCleared() {
		_spec.ClearField(servicerequest.FieldRemarksNew, field.TypeString)
	}
	if value, ok := sruo.mutation.Status(); ok {
		_spec.SetField(servicerequest.FieldStatus, field.TypeString, value)
	}
	if sruo.mutation.StatusCleared() {
		_spec.ClearField(servicerequest.FieldStatus, field.TypeString)
	}
	if value, ok := sruo.mutation.ClosedOn(); ok {
		_spec.SetField(servicerequest.FieldClosedOn, field.TypeTime, value)
	}
	if sruo.mutation.ClosedOnCleared() {
		_spec.ClearField(servicerequest.FieldClosedOn, field.TypeTime)
	}
	_node = &ServiceRequest{config: sruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, sruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{servicerequest.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	sruo.mutation.done = true
	return _node, nil
}
