// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"recruit/ent/facilitymasters"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// FacilityMasters is the model entity for the FacilityMasters schema.
type FacilityMasters struct {
	config `json:"-"`
	// ID of the ent.
	ID int32 `json:"id,omitempty"`
	// FacilityID holds the value of the "FacilityID" field.
	FacilityID string `json:"FacilityID,omitempty"`
	// UUID holds the value of the "UUID" field.
	UUID int64 `json:"UUID,omitempty"`
	// FacilityType holds the value of the "FacilityType" field.
	FacilityType string `json:"FacilityType,omitempty"`
	// FacilityIDDescription holds the value of the "FacilityIDDescription" field.
	FacilityIDDescription string `json:"FacilityIDDescription,omitempty"`
	// ReportingOfficeFacilityID holds the value of the "ReportingOfficeFacilityID" field.
	ReportingOfficeFacilityID string `json:"ReportingOfficeFacilityID,omitempty"`
	// ReportingOfficeFacilityName holds the value of the "ReportingOfficeFacilityName" field.
	ReportingOfficeFacilityName string `json:"ReportingOfficeFacilityName,omitempty"`
	// HOFacilityID holds the value of the "HOFacilityID" field.
	HOFacilityID string `json:"HOFacilityID,omitempty"`
	// HOFacilityName holds the value of the "HOFacilityName" field.
	HOFacilityName string `json:"HOFacilityName,omitempty"`
	// SubDivisionFacilityID holds the value of the "SubDivisionFacilityID" field.
	SubDivisionFacilityID string `json:"SubDivisionFacilityID,omitempty"`
	// SubDivisionFacilityName holds the value of the "SubDivisionFacilityName" field.
	SubDivisionFacilityName string `json:"SubDivisionFacilityName,omitempty"`
	// DivisionFacilityID holds the value of the "DivisionFacilityID" field.
	DivisionFacilityID string `json:"DivisionFacilityID,omitempty"`
	// DivisionFacilityName holds the value of the "DivisionFacilityName" field.
	DivisionFacilityName string `json:"DivisionFacilityName,omitempty"`
	// RegionFacilityID holds the value of the "RegionFacilityID" field.
	RegionFacilityID string `json:"RegionFacilityID,omitempty"`
	// RegionFacilityName holds the value of the "RegionFacilityName" field.
	RegionFacilityName string `json:"RegionFacilityName,omitempty"`
	// CircleFacilityID holds the value of the "CircleFacilityID" field.
	CircleFacilityID string `json:"CircleFacilityID,omitempty"`
	// CircleFacilityName holds the value of the "CircleFacilityName" field.
	CircleFacilityName string `json:"CircleFacilityName,omitempty"`
	// Pincode holds the value of the "Pincode" field.
	Pincode string `json:"Pincode,omitempty"`
	// ControllingAuthorityFacilityID holds the value of the "ControllingAuthorityFacilityID" field.
	ControllingAuthorityFacilityID string `json:"ControllingAuthorityFacilityID,omitempty"`
	// ControllingAuthorityFacilityName holds the value of the "ControllingAuthorityFacilityName" field.
	ControllingAuthorityFacilityName string `json:"ControllingAuthorityFacilityName,omitempty"`
	// NodalOfficerFacilityID holds the value of the "NodalOfficerFacilityID" field.
	NodalOfficerFacilityID string `json:"NodalOfficerFacilityID,omitempty"`
	// NodalOfficerFacilityName holds the value of the "NodalOfficerFacilityName" field.
	NodalOfficerFacilityName string `json:"NodalOfficerFacilityName,omitempty"`
	// CityName holds the value of the "CityName" field.
	CityName string `json:"CityName,omitempty"`
	// HallCircleCode holds the value of the "HallCircleCode" field.
	HallCircleCode string `json:"HallCircleCode,omitempty"`
	// DeliveryNonDeliveryOffice holds the value of the "DeliveryNonDeliveryOffice" field.
	DeliveryNonDeliveryOffice string `json:"DeliveryNonDeliveryOffice,omitempty"`
	// CreatedID holds the value of the "CreatedID" field.
	CreatedID string `json:"CreatedID,omitempty"`
	// CreatedBy holds the value of the "CreatedBy" field.
	CreatedBy string `json:"CreatedBy,omitempty"`
	// CreatedByName holds the value of the "CreatedByName" field.
	CreatedByName string `json:"CreatedByName,omitempty"`
	// CreatedByEmpID holds the value of the "CreatedByEmpID" field.
	CreatedByEmpID string `json:"CreatedByEmpID,omitempty"`
	// CircleCode holds the value of the "CircleCode" field.
	CircleCode string `json:"CircleCode,omitempty"`
	// Status holds the value of the "Status" field.
	Status string `json:"Status,omitempty"`
	// EventTime holds the value of the "EventTime" field.
	EventTime    time.Time `json:"EventTime,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*FacilityMasters) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case facilitymasters.FieldID, facilitymasters.FieldUUID:
			values[i] = new(sql.NullInt64)
		case facilitymasters.FieldFacilityID, facilitymasters.FieldFacilityType, facilitymasters.FieldFacilityIDDescription, facilitymasters.FieldReportingOfficeFacilityID, facilitymasters.FieldReportingOfficeFacilityName, facilitymasters.FieldHOFacilityID, facilitymasters.FieldHOFacilityName, facilitymasters.FieldSubDivisionFacilityID, facilitymasters.FieldSubDivisionFacilityName, facilitymasters.FieldDivisionFacilityID, facilitymasters.FieldDivisionFacilityName, facilitymasters.FieldRegionFacilityID, facilitymasters.FieldRegionFacilityName, facilitymasters.FieldCircleFacilityID, facilitymasters.FieldCircleFacilityName, facilitymasters.FieldPincode, facilitymasters.FieldControllingAuthorityFacilityID, facilitymasters.FieldControllingAuthorityFacilityName, facilitymasters.FieldNodalOfficerFacilityID, facilitymasters.FieldNodalOfficerFacilityName, facilitymasters.FieldCityName, facilitymasters.FieldHallCircleCode, facilitymasters.FieldDeliveryNonDeliveryOffice, facilitymasters.FieldCreatedID, facilitymasters.FieldCreatedBy, facilitymasters.FieldCreatedByName, facilitymasters.FieldCreatedByEmpID, facilitymasters.FieldCircleCode, facilitymasters.FieldStatus:
			values[i] = new(sql.NullString)
		case facilitymasters.FieldEventTime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the FacilityMasters fields.
func (fm *FacilityMasters) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case facilitymasters.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			fm.ID = int32(value.Int64)
		case facilitymasters.FieldFacilityID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field FacilityID", values[i])
			} else if value.Valid {
				fm.FacilityID = value.String
			}
		case facilitymasters.FieldUUID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field UUID", values[i])
			} else if value.Valid {
				fm.UUID = value.Int64
			}
		case facilitymasters.FieldFacilityType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field FacilityType", values[i])
			} else if value.Valid {
				fm.FacilityType = value.String
			}
		case facilitymasters.FieldFacilityIDDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field FacilityIDDescription", values[i])
			} else if value.Valid {
				fm.FacilityIDDescription = value.String
			}
		case facilitymasters.FieldReportingOfficeFacilityID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ReportingOfficeFacilityID", values[i])
			} else if value.Valid {
				fm.ReportingOfficeFacilityID = value.String
			}
		case facilitymasters.FieldReportingOfficeFacilityName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ReportingOfficeFacilityName", values[i])
			} else if value.Valid {
				fm.ReportingOfficeFacilityName = value.String
			}
		case facilitymasters.FieldHOFacilityID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field HOFacilityID", values[i])
			} else if value.Valid {
				fm.HOFacilityID = value.String
			}
		case facilitymasters.FieldHOFacilityName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field HOFacilityName", values[i])
			} else if value.Valid {
				fm.HOFacilityName = value.String
			}
		case facilitymasters.FieldSubDivisionFacilityID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field SubDivisionFacilityID", values[i])
			} else if value.Valid {
				fm.SubDivisionFacilityID = value.String
			}
		case facilitymasters.FieldSubDivisionFacilityName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field SubDivisionFacilityName", values[i])
			} else if value.Valid {
				fm.SubDivisionFacilityName = value.String
			}
		case facilitymasters.FieldDivisionFacilityID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field DivisionFacilityID", values[i])
			} else if value.Valid {
				fm.DivisionFacilityID = value.String
			}
		case facilitymasters.FieldDivisionFacilityName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field DivisionFacilityName", values[i])
			} else if value.Valid {
				fm.DivisionFacilityName = value.String
			}
		case facilitymasters.FieldRegionFacilityID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field RegionFacilityID", values[i])
			} else if value.Valid {
				fm.RegionFacilityID = value.String
			}
		case facilitymasters.FieldRegionFacilityName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field RegionFacilityName", values[i])
			} else if value.Valid {
				fm.RegionFacilityName = value.String
			}
		case facilitymasters.FieldCircleFacilityID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field CircleFacilityID", values[i])
			} else if value.Valid {
				fm.CircleFacilityID = value.String
			}
		case facilitymasters.FieldCircleFacilityName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field CircleFacilityName", values[i])
			} else if value.Valid {
				fm.CircleFacilityName = value.String
			}
		case facilitymasters.FieldPincode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Pincode", values[i])
			} else if value.Valid {
				fm.Pincode = value.String
			}
		case facilitymasters.FieldControllingAuthorityFacilityID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ControllingAuthorityFacilityID", values[i])
			} else if value.Valid {
				fm.ControllingAuthorityFacilityID = value.String
			}
		case facilitymasters.FieldControllingAuthorityFacilityName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ControllingAuthorityFacilityName", values[i])
			} else if value.Valid {
				fm.ControllingAuthorityFacilityName = value.String
			}
		case facilitymasters.FieldNodalOfficerFacilityID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field NodalOfficerFacilityID", values[i])
			} else if value.Valid {
				fm.NodalOfficerFacilityID = value.String
			}
		case facilitymasters.FieldNodalOfficerFacilityName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field NodalOfficerFacilityName", values[i])
			} else if value.Valid {
				fm.NodalOfficerFacilityName = value.String
			}
		case facilitymasters.FieldCityName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field CityName", values[i])
			} else if value.Valid {
				fm.CityName = value.String
			}
		case facilitymasters.FieldHallCircleCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field HallCircleCode", values[i])
			} else if value.Valid {
				fm.HallCircleCode = value.String
			}
		case facilitymasters.FieldDeliveryNonDeliveryOffice:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field DeliveryNonDeliveryOffice", values[i])
			} else if value.Valid {
				fm.DeliveryNonDeliveryOffice = value.String
			}
		case facilitymasters.FieldCreatedID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field CreatedID", values[i])
			} else if value.Valid {
				fm.CreatedID = value.String
			}
		case facilitymasters.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field CreatedBy", values[i])
			} else if value.Valid {
				fm.CreatedBy = value.String
			}
		case facilitymasters.FieldCreatedByName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field CreatedByName", values[i])
			} else if value.Valid {
				fm.CreatedByName = value.String
			}
		case facilitymasters.FieldCreatedByEmpID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field CreatedByEmpID", values[i])
			} else if value.Valid {
				fm.CreatedByEmpID = value.String
			}
		case facilitymasters.FieldCircleCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field CircleCode", values[i])
			} else if value.Valid {
				fm.CircleCode = value.String
			}
		case facilitymasters.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Status", values[i])
			} else if value.Valid {
				fm.Status = value.String
			}
		case facilitymasters.FieldEventTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field EventTime", values[i])
			} else if value.Valid {
				fm.EventTime = value.Time
			}
		default:
			fm.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the FacilityMasters.
// This includes values selected through modifiers, order, etc.
func (fm *FacilityMasters) Value(name string) (ent.Value, error) {
	return fm.selectValues.Get(name)
}

// Update returns a builder for updating this FacilityMasters.
// Note that you need to call FacilityMasters.Unwrap() before calling this method if this FacilityMasters
// was returned from a transaction, and the transaction was committed or rolled back.
func (fm *FacilityMasters) Update() *FacilityMastersUpdateOne {
	return NewFacilityMastersClient(fm.config).UpdateOne(fm)
}

// Unwrap unwraps the FacilityMasters entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (fm *FacilityMasters) Unwrap() *FacilityMasters {
	_tx, ok := fm.config.driver.(*txDriver)
	if !ok {
		panic("ent: FacilityMasters is not a transactional entity")
	}
	fm.config.driver = _tx.drv
	return fm
}

// String implements the fmt.Stringer.
func (fm *FacilityMasters) String() string {
	var builder strings.Builder
	builder.WriteString("FacilityMasters(")
	builder.WriteString(fmt.Sprintf("id=%v, ", fm.ID))
	builder.WriteString("FacilityID=")
	builder.WriteString(fm.FacilityID)
	builder.WriteString(", ")
	builder.WriteString("UUID=")
	builder.WriteString(fmt.Sprintf("%v", fm.UUID))
	builder.WriteString(", ")
	builder.WriteString("FacilityType=")
	builder.WriteString(fm.FacilityType)
	builder.WriteString(", ")
	builder.WriteString("FacilityIDDescription=")
	builder.WriteString(fm.FacilityIDDescription)
	builder.WriteString(", ")
	builder.WriteString("ReportingOfficeFacilityID=")
	builder.WriteString(fm.ReportingOfficeFacilityID)
	builder.WriteString(", ")
	builder.WriteString("ReportingOfficeFacilityName=")
	builder.WriteString(fm.ReportingOfficeFacilityName)
	builder.WriteString(", ")
	builder.WriteString("HOFacilityID=")
	builder.WriteString(fm.HOFacilityID)
	builder.WriteString(", ")
	builder.WriteString("HOFacilityName=")
	builder.WriteString(fm.HOFacilityName)
	builder.WriteString(", ")
	builder.WriteString("SubDivisionFacilityID=")
	builder.WriteString(fm.SubDivisionFacilityID)
	builder.WriteString(", ")
	builder.WriteString("SubDivisionFacilityName=")
	builder.WriteString(fm.SubDivisionFacilityName)
	builder.WriteString(", ")
	builder.WriteString("DivisionFacilityID=")
	builder.WriteString(fm.DivisionFacilityID)
	builder.WriteString(", ")
	builder.WriteString("DivisionFacilityName=")
	builder.WriteString(fm.DivisionFacilityName)
	builder.WriteString(", ")
	builder.WriteString("RegionFacilityID=")
	builder.WriteString(fm.RegionFacilityID)
	builder.WriteString(", ")
	builder.WriteString("RegionFacilityName=")
	builder.WriteString(fm.RegionFacilityName)
	builder.WriteString(", ")
	builder.WriteString("CircleFacilityID=")
	builder.WriteString(fm.CircleFacilityID)
	builder.WriteString(", ")
	builder.WriteString("CircleFacilityName=")
	builder.WriteString(fm.CircleFacilityName)
	builder.WriteString(", ")
	builder.WriteString("Pincode=")
	builder.WriteString(fm.Pincode)
	builder.WriteString(", ")
	builder.WriteString("ControllingAuthorityFacilityID=")
	builder.WriteString(fm.ControllingAuthorityFacilityID)
	builder.WriteString(", ")
	builder.WriteString("ControllingAuthorityFacilityName=")
	builder.WriteString(fm.ControllingAuthorityFacilityName)
	builder.WriteString(", ")
	builder.WriteString("NodalOfficerFacilityID=")
	builder.WriteString(fm.NodalOfficerFacilityID)
	builder.WriteString(", ")
	builder.WriteString("NodalOfficerFacilityName=")
	builder.WriteString(fm.NodalOfficerFacilityName)
	builder.WriteString(", ")
	builder.WriteString("CityName=")
	builder.WriteString(fm.CityName)
	builder.WriteString(", ")
	builder.WriteString("HallCircleCode=")
	builder.WriteString(fm.HallCircleCode)
	builder.WriteString(", ")
	builder.WriteString("DeliveryNonDeliveryOffice=")
	builder.WriteString(fm.DeliveryNonDeliveryOffice)
	builder.WriteString(", ")
	builder.WriteString("CreatedID=")
	builder.WriteString(fm.CreatedID)
	builder.WriteString(", ")
	builder.WriteString("CreatedBy=")
	builder.WriteString(fm.CreatedBy)
	builder.WriteString(", ")
	builder.WriteString("CreatedByName=")
	builder.WriteString(fm.CreatedByName)
	builder.WriteString(", ")
	builder.WriteString("CreatedByEmpID=")
	builder.WriteString(fm.CreatedByEmpID)
	builder.WriteString(", ")
	builder.WriteString("CircleCode=")
	builder.WriteString(fm.CircleCode)
	builder.WriteString(", ")
	builder.WriteString("Status=")
	builder.WriteString(fm.Status)
	builder.WriteString(", ")
	builder.WriteString("EventTime=")
	builder.WriteString(fm.EventTime.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// FacilityMastersSlice is a parsable slice of FacilityMasters.
type FacilityMastersSlice []*FacilityMasters
