// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"
	"recruit/ent/circlesummaryforno"
	"recruit/ent/exam_application_mtspmmg"
	"recruit/ent/exam_applications_gdspa"
	"recruit/ent/exam_applications_gdspm"
	"recruit/ent/exam_applications_ip"
	"recruit/ent/exam_applications_pmpa"
	"recruit/ent/exam_applications_ps"
	"recruit/ent/predicate"
	"recruit/ent/usermaster"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CircleSummaryForNOQuery is the builder for querying CircleSummaryForNO entities.
type CircleSummaryForNOQuery struct {
	config
	ctx                                *QueryContext
	order                              []circlesummaryforno.OrderOption
	inters                             []Interceptor
	predicates                         []predicate.CircleSummaryForNO
	withCircleusers                    *UserMasterQuery
	withCircleRefsForHallTicketIP      *ExamApplicationsIPQuery
	withCircleRefsForHallTicketPS      *ExamApplicationsPSQuery
	withCircleRefsForHallTicketGDSPA   *ExamApplicationsGDSPAQuery
	withCircleRefsForHallTicketGDSPM   *ExamApplicationsGDSPMQuery
	withCircleRefsForHallTicketPMPA    *ExamApplicationsPMPAQuery
	withCircleRefsForHallTicketMTSPMMG *ExamApplicationMTSPMMGQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the CircleSummaryForNOQuery builder.
func (csfnq *CircleSummaryForNOQuery) Where(ps ...predicate.CircleSummaryForNO) *CircleSummaryForNOQuery {
	csfnq.predicates = append(csfnq.predicates, ps...)
	return csfnq
}

// Limit the number of records to be returned by this query.
func (csfnq *CircleSummaryForNOQuery) Limit(limit int) *CircleSummaryForNOQuery {
	csfnq.ctx.Limit = &limit
	return csfnq
}

// Offset to start from.
func (csfnq *CircleSummaryForNOQuery) Offset(offset int) *CircleSummaryForNOQuery {
	csfnq.ctx.Offset = &offset
	return csfnq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (csfnq *CircleSummaryForNOQuery) Unique(unique bool) *CircleSummaryForNOQuery {
	csfnq.ctx.Unique = &unique
	return csfnq
}

// Order specifies how the records should be ordered.
func (csfnq *CircleSummaryForNOQuery) Order(o ...circlesummaryforno.OrderOption) *CircleSummaryForNOQuery {
	csfnq.order = append(csfnq.order, o...)
	return csfnq
}

// QueryCircleusers chains the current query on the "circleusers" edge.
func (csfnq *CircleSummaryForNOQuery) QueryCircleusers() *UserMasterQuery {
	query := (&UserMasterClient{config: csfnq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := csfnq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := csfnq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(circlesummaryforno.Table, circlesummaryforno.FieldID, selector),
			sqlgraph.To(usermaster.Table, usermaster.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, circlesummaryforno.CircleusersTable, circlesummaryforno.CircleusersColumn),
		)
		fromU = sqlgraph.SetNeighbors(csfnq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCircleRefsForHallTicketIP chains the current query on the "CircleRefsForHallTicketIP" edge.
func (csfnq *CircleSummaryForNOQuery) QueryCircleRefsForHallTicketIP() *ExamApplicationsIPQuery {
	query := (&ExamApplicationsIPClient{config: csfnq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := csfnq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := csfnq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(circlesummaryforno.Table, circlesummaryforno.FieldID, selector),
			sqlgraph.To(exam_applications_ip.Table, exam_applications_ip.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, circlesummaryforno.CircleRefsForHallTicketIPTable, circlesummaryforno.CircleRefsForHallTicketIPColumn),
		)
		fromU = sqlgraph.SetNeighbors(csfnq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCircleRefsForHallTicketPS chains the current query on the "CircleRefsForHallTicketPS" edge.
func (csfnq *CircleSummaryForNOQuery) QueryCircleRefsForHallTicketPS() *ExamApplicationsPSQuery {
	query := (&ExamApplicationsPSClient{config: csfnq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := csfnq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := csfnq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(circlesummaryforno.Table, circlesummaryforno.FieldID, selector),
			sqlgraph.To(exam_applications_ps.Table, exam_applications_ps.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, circlesummaryforno.CircleRefsForHallTicketPSTable, circlesummaryforno.CircleRefsForHallTicketPSColumn),
		)
		fromU = sqlgraph.SetNeighbors(csfnq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCircleRefsForHallTicketGDSPA chains the current query on the "CircleRefsForHallTicketGDSPA" edge.
func (csfnq *CircleSummaryForNOQuery) QueryCircleRefsForHallTicketGDSPA() *ExamApplicationsGDSPAQuery {
	query := (&ExamApplicationsGDSPAClient{config: csfnq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := csfnq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := csfnq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(circlesummaryforno.Table, circlesummaryforno.FieldID, selector),
			sqlgraph.To(exam_applications_gdspa.Table, exam_applications_gdspa.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, circlesummaryforno.CircleRefsForHallTicketGDSPATable, circlesummaryforno.CircleRefsForHallTicketGDSPAColumn),
		)
		fromU = sqlgraph.SetNeighbors(csfnq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCircleRefsForHallTicketGDSPM chains the current query on the "CircleRefsForHallTicketGDSPM" edge.
func (csfnq *CircleSummaryForNOQuery) QueryCircleRefsForHallTicketGDSPM() *ExamApplicationsGDSPMQuery {
	query := (&ExamApplicationsGDSPMClient{config: csfnq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := csfnq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := csfnq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(circlesummaryforno.Table, circlesummaryforno.FieldID, selector),
			sqlgraph.To(exam_applications_gdspm.Table, exam_applications_gdspm.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, circlesummaryforno.CircleRefsForHallTicketGDSPMTable, circlesummaryforno.CircleRefsForHallTicketGDSPMColumn),
		)
		fromU = sqlgraph.SetNeighbors(csfnq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCircleRefsForHallTicketPMPA chains the current query on the "CircleRefsForHallTicketPMPA" edge.
func (csfnq *CircleSummaryForNOQuery) QueryCircleRefsForHallTicketPMPA() *ExamApplicationsPMPAQuery {
	query := (&ExamApplicationsPMPAClient{config: csfnq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := csfnq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := csfnq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(circlesummaryforno.Table, circlesummaryforno.FieldID, selector),
			sqlgraph.To(exam_applications_pmpa.Table, exam_applications_pmpa.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, circlesummaryforno.CircleRefsForHallTicketPMPATable, circlesummaryforno.CircleRefsForHallTicketPMPAColumn),
		)
		fromU = sqlgraph.SetNeighbors(csfnq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCircleRefsForHallTicketMTSPMMG chains the current query on the "CircleRefsForHallTicketMTSPMMG" edge.
func (csfnq *CircleSummaryForNOQuery) QueryCircleRefsForHallTicketMTSPMMG() *ExamApplicationMTSPMMGQuery {
	query := (&ExamApplicationMTSPMMGClient{config: csfnq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := csfnq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := csfnq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(circlesummaryforno.Table, circlesummaryforno.FieldID, selector),
			sqlgraph.To(exam_application_mtspmmg.Table, exam_application_mtspmmg.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, circlesummaryforno.CircleRefsForHallTicketMTSPMMGTable, circlesummaryforno.CircleRefsForHallTicketMTSPMMGColumn),
		)
		fromU = sqlgraph.SetNeighbors(csfnq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first CircleSummaryForNO entity from the query.
// Returns a *NotFoundError when no CircleSummaryForNO was found.
func (csfnq *CircleSummaryForNOQuery) First(ctx context.Context) (*CircleSummaryForNO, error) {
	nodes, err := csfnq.Limit(1).All(setContextOp(ctx, csfnq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{circlesummaryforno.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (csfnq *CircleSummaryForNOQuery) FirstX(ctx context.Context) *CircleSummaryForNO {
	node, err := csfnq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first CircleSummaryForNO ID from the query.
// Returns a *NotFoundError when no CircleSummaryForNO ID was found.
func (csfnq *CircleSummaryForNOQuery) FirstID(ctx context.Context) (id int32, err error) {
	var ids []int32
	if ids, err = csfnq.Limit(1).IDs(setContextOp(ctx, csfnq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{circlesummaryforno.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (csfnq *CircleSummaryForNOQuery) FirstIDX(ctx context.Context) int32 {
	id, err := csfnq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single CircleSummaryForNO entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one CircleSummaryForNO entity is found.
// Returns a *NotFoundError when no CircleSummaryForNO entities are found.
func (csfnq *CircleSummaryForNOQuery) Only(ctx context.Context) (*CircleSummaryForNO, error) {
	nodes, err := csfnq.Limit(2).All(setContextOp(ctx, csfnq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{circlesummaryforno.Label}
	default:
		return nil, &NotSingularError{circlesummaryforno.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (csfnq *CircleSummaryForNOQuery) OnlyX(ctx context.Context) *CircleSummaryForNO {
	node, err := csfnq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only CircleSummaryForNO ID in the query.
// Returns a *NotSingularError when more than one CircleSummaryForNO ID is found.
// Returns a *NotFoundError when no entities are found.
func (csfnq *CircleSummaryForNOQuery) OnlyID(ctx context.Context) (id int32, err error) {
	var ids []int32
	if ids, err = csfnq.Limit(2).IDs(setContextOp(ctx, csfnq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{circlesummaryforno.Label}
	default:
		err = &NotSingularError{circlesummaryforno.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (csfnq *CircleSummaryForNOQuery) OnlyIDX(ctx context.Context) int32 {
	id, err := csfnq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of CircleSummaryForNOs.
func (csfnq *CircleSummaryForNOQuery) All(ctx context.Context) ([]*CircleSummaryForNO, error) {
	ctx = setContextOp(ctx, csfnq.ctx, "All")
	if err := csfnq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*CircleSummaryForNO, *CircleSummaryForNOQuery]()
	return withInterceptors[[]*CircleSummaryForNO](ctx, csfnq, qr, csfnq.inters)
}

// AllX is like All, but panics if an error occurs.
func (csfnq *CircleSummaryForNOQuery) AllX(ctx context.Context) []*CircleSummaryForNO {
	nodes, err := csfnq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of CircleSummaryForNO IDs.
func (csfnq *CircleSummaryForNOQuery) IDs(ctx context.Context) (ids []int32, err error) {
	if csfnq.ctx.Unique == nil && csfnq.path != nil {
		csfnq.Unique(true)
	}
	ctx = setContextOp(ctx, csfnq.ctx, "IDs")
	if err = csfnq.Select(circlesummaryforno.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (csfnq *CircleSummaryForNOQuery) IDsX(ctx context.Context) []int32 {
	ids, err := csfnq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (csfnq *CircleSummaryForNOQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, csfnq.ctx, "Count")
	if err := csfnq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, csfnq, querierCount[*CircleSummaryForNOQuery](), csfnq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (csfnq *CircleSummaryForNOQuery) CountX(ctx context.Context) int {
	count, err := csfnq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (csfnq *CircleSummaryForNOQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, csfnq.ctx, "Exist")
	switch _, err := csfnq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (csfnq *CircleSummaryForNOQuery) ExistX(ctx context.Context) bool {
	exist, err := csfnq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the CircleSummaryForNOQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (csfnq *CircleSummaryForNOQuery) Clone() *CircleSummaryForNOQuery {
	if csfnq == nil {
		return nil
	}
	return &CircleSummaryForNOQuery{
		config:                             csfnq.config,
		ctx:                                csfnq.ctx.Clone(),
		order:                              append([]circlesummaryforno.OrderOption{}, csfnq.order...),
		inters:                             append([]Interceptor{}, csfnq.inters...),
		predicates:                         append([]predicate.CircleSummaryForNO{}, csfnq.predicates...),
		withCircleusers:                    csfnq.withCircleusers.Clone(),
		withCircleRefsForHallTicketIP:      csfnq.withCircleRefsForHallTicketIP.Clone(),
		withCircleRefsForHallTicketPS:      csfnq.withCircleRefsForHallTicketPS.Clone(),
		withCircleRefsForHallTicketGDSPA:   csfnq.withCircleRefsForHallTicketGDSPA.Clone(),
		withCircleRefsForHallTicketGDSPM:   csfnq.withCircleRefsForHallTicketGDSPM.Clone(),
		withCircleRefsForHallTicketPMPA:    csfnq.withCircleRefsForHallTicketPMPA.Clone(),
		withCircleRefsForHallTicketMTSPMMG: csfnq.withCircleRefsForHallTicketMTSPMMG.Clone(),
		// clone intermediate query.
		sql:  csfnq.sql.Clone(),
		path: csfnq.path,
	}
}

// WithCircleusers tells the query-builder to eager-load the nodes that are connected to
// the "circleusers" edge. The optional arguments are used to configure the query builder of the edge.
func (csfnq *CircleSummaryForNOQuery) WithCircleusers(opts ...func(*UserMasterQuery)) *CircleSummaryForNOQuery {
	query := (&UserMasterClient{config: csfnq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	csfnq.withCircleusers = query
	return csfnq
}

// WithCircleRefsForHallTicketIP tells the query-builder to eager-load the nodes that are connected to
// the "CircleRefsForHallTicketIP" edge. The optional arguments are used to configure the query builder of the edge.
func (csfnq *CircleSummaryForNOQuery) WithCircleRefsForHallTicketIP(opts ...func(*ExamApplicationsIPQuery)) *CircleSummaryForNOQuery {
	query := (&ExamApplicationsIPClient{config: csfnq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	csfnq.withCircleRefsForHallTicketIP = query
	return csfnq
}

// WithCircleRefsForHallTicketPS tells the query-builder to eager-load the nodes that are connected to
// the "CircleRefsForHallTicketPS" edge. The optional arguments are used to configure the query builder of the edge.
func (csfnq *CircleSummaryForNOQuery) WithCircleRefsForHallTicketPS(opts ...func(*ExamApplicationsPSQuery)) *CircleSummaryForNOQuery {
	query := (&ExamApplicationsPSClient{config: csfnq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	csfnq.withCircleRefsForHallTicketPS = query
	return csfnq
}

// WithCircleRefsForHallTicketGDSPA tells the query-builder to eager-load the nodes that are connected to
// the "CircleRefsForHallTicketGDSPA" edge. The optional arguments are used to configure the query builder of the edge.
func (csfnq *CircleSummaryForNOQuery) WithCircleRefsForHallTicketGDSPA(opts ...func(*ExamApplicationsGDSPAQuery)) *CircleSummaryForNOQuery {
	query := (&ExamApplicationsGDSPAClient{config: csfnq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	csfnq.withCircleRefsForHallTicketGDSPA = query
	return csfnq
}

// WithCircleRefsForHallTicketGDSPM tells the query-builder to eager-load the nodes that are connected to
// the "CircleRefsForHallTicketGDSPM" edge. The optional arguments are used to configure the query builder of the edge.
func (csfnq *CircleSummaryForNOQuery) WithCircleRefsForHallTicketGDSPM(opts ...func(*ExamApplicationsGDSPMQuery)) *CircleSummaryForNOQuery {
	query := (&ExamApplicationsGDSPMClient{config: csfnq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	csfnq.withCircleRefsForHallTicketGDSPM = query
	return csfnq
}

// WithCircleRefsForHallTicketPMPA tells the query-builder to eager-load the nodes that are connected to
// the "CircleRefsForHallTicketPMPA" edge. The optional arguments are used to configure the query builder of the edge.
func (csfnq *CircleSummaryForNOQuery) WithCircleRefsForHallTicketPMPA(opts ...func(*ExamApplicationsPMPAQuery)) *CircleSummaryForNOQuery {
	query := (&ExamApplicationsPMPAClient{config: csfnq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	csfnq.withCircleRefsForHallTicketPMPA = query
	return csfnq
}

// WithCircleRefsForHallTicketMTSPMMG tells the query-builder to eager-load the nodes that are connected to
// the "CircleRefsForHallTicketMTSPMMG" edge. The optional arguments are used to configure the query builder of the edge.
func (csfnq *CircleSummaryForNOQuery) WithCircleRefsForHallTicketMTSPMMG(opts ...func(*ExamApplicationMTSPMMGQuery)) *CircleSummaryForNOQuery {
	query := (&ExamApplicationMTSPMMGClient{config: csfnq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	csfnq.withCircleRefsForHallTicketMTSPMMG = query
	return csfnq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CircleOfficeId string `json:"CircleOfficeId,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.CircleSummaryForNO.Query().
//		GroupBy(circlesummaryforno.FieldCircleOfficeId).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (csfnq *CircleSummaryForNOQuery) GroupBy(field string, fields ...string) *CircleSummaryForNOGroupBy {
	csfnq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &CircleSummaryForNOGroupBy{build: csfnq}
	grbuild.flds = &csfnq.ctx.Fields
	grbuild.label = circlesummaryforno.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CircleOfficeId string `json:"CircleOfficeId,omitempty"`
//	}
//
//	client.CircleSummaryForNO.Query().
//		Select(circlesummaryforno.FieldCircleOfficeId).
//		Scan(ctx, &v)
func (csfnq *CircleSummaryForNOQuery) Select(fields ...string) *CircleSummaryForNOSelect {
	csfnq.ctx.Fields = append(csfnq.ctx.Fields, fields...)
	sbuild := &CircleSummaryForNOSelect{CircleSummaryForNOQuery: csfnq}
	sbuild.label = circlesummaryforno.Label
	sbuild.flds, sbuild.scan = &csfnq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a CircleSummaryForNOSelect configured with the given aggregations.
func (csfnq *CircleSummaryForNOQuery) Aggregate(fns ...AggregateFunc) *CircleSummaryForNOSelect {
	return csfnq.Select().Aggregate(fns...)
}

func (csfnq *CircleSummaryForNOQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range csfnq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, csfnq); err != nil {
				return err
			}
		}
	}
	for _, f := range csfnq.ctx.Fields {
		if !circlesummaryforno.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if csfnq.path != nil {
		prev, err := csfnq.path(ctx)
		if err != nil {
			return err
		}
		csfnq.sql = prev
	}
	return nil
}

func (csfnq *CircleSummaryForNOQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*CircleSummaryForNO, error) {
	var (
		nodes       = []*CircleSummaryForNO{}
		_spec       = csfnq.querySpec()
		loadedTypes = [7]bool{
			csfnq.withCircleusers != nil,
			csfnq.withCircleRefsForHallTicketIP != nil,
			csfnq.withCircleRefsForHallTicketPS != nil,
			csfnq.withCircleRefsForHallTicketGDSPA != nil,
			csfnq.withCircleRefsForHallTicketGDSPM != nil,
			csfnq.withCircleRefsForHallTicketPMPA != nil,
			csfnq.withCircleRefsForHallTicketMTSPMMG != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*CircleSummaryForNO).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &CircleSummaryForNO{config: csfnq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, csfnq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := csfnq.withCircleusers; query != nil {
		if err := csfnq.loadCircleusers(ctx, query, nodes,
			func(n *CircleSummaryForNO) { n.Edges.Circleusers = []*UserMaster{} },
			func(n *CircleSummaryForNO, e *UserMaster) { n.Edges.Circleusers = append(n.Edges.Circleusers, e) }); err != nil {
			return nil, err
		}
	}
	if query := csfnq.withCircleRefsForHallTicketIP; query != nil {
		if err := csfnq.loadCircleRefsForHallTicketIP(ctx, query, nodes,
			func(n *CircleSummaryForNO) { n.Edges.CircleRefsForHallTicketIP = []*Exam_Applications_IP{} },
			func(n *CircleSummaryForNO, e *Exam_Applications_IP) {
				n.Edges.CircleRefsForHallTicketIP = append(n.Edges.CircleRefsForHallTicketIP, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := csfnq.withCircleRefsForHallTicketPS; query != nil {
		if err := csfnq.loadCircleRefsForHallTicketPS(ctx, query, nodes,
			func(n *CircleSummaryForNO) { n.Edges.CircleRefsForHallTicketPS = []*Exam_Applications_PS{} },
			func(n *CircleSummaryForNO, e *Exam_Applications_PS) {
				n.Edges.CircleRefsForHallTicketPS = append(n.Edges.CircleRefsForHallTicketPS, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := csfnq.withCircleRefsForHallTicketGDSPA; query != nil {
		if err := csfnq.loadCircleRefsForHallTicketGDSPA(ctx, query, nodes,
			func(n *CircleSummaryForNO) { n.Edges.CircleRefsForHallTicketGDSPA = []*Exam_Applications_GDSPA{} },
			func(n *CircleSummaryForNO, e *Exam_Applications_GDSPA) {
				n.Edges.CircleRefsForHallTicketGDSPA = append(n.Edges.CircleRefsForHallTicketGDSPA, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := csfnq.withCircleRefsForHallTicketGDSPM; query != nil {
		if err := csfnq.loadCircleRefsForHallTicketGDSPM(ctx, query, nodes,
			func(n *CircleSummaryForNO) { n.Edges.CircleRefsForHallTicketGDSPM = []*Exam_Applications_GDSPM{} },
			func(n *CircleSummaryForNO, e *Exam_Applications_GDSPM) {
				n.Edges.CircleRefsForHallTicketGDSPM = append(n.Edges.CircleRefsForHallTicketGDSPM, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := csfnq.withCircleRefsForHallTicketPMPA; query != nil {
		if err := csfnq.loadCircleRefsForHallTicketPMPA(ctx, query, nodes,
			func(n *CircleSummaryForNO) { n.Edges.CircleRefsForHallTicketPMPA = []*Exam_Applications_PMPA{} },
			func(n *CircleSummaryForNO, e *Exam_Applications_PMPA) {
				n.Edges.CircleRefsForHallTicketPMPA = append(n.Edges.CircleRefsForHallTicketPMPA, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := csfnq.withCircleRefsForHallTicketMTSPMMG; query != nil {
		if err := csfnq.loadCircleRefsForHallTicketMTSPMMG(ctx, query, nodes,
			func(n *CircleSummaryForNO) { n.Edges.CircleRefsForHallTicketMTSPMMG = []*Exam_Application_MTSPMMG{} },
			func(n *CircleSummaryForNO, e *Exam_Application_MTSPMMG) {
				n.Edges.CircleRefsForHallTicketMTSPMMG = append(n.Edges.CircleRefsForHallTicketMTSPMMG, e)
			}); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (csfnq *CircleSummaryForNOQuery) loadCircleusers(ctx context.Context, query *UserMasterQuery, nodes []*CircleSummaryForNO, init func(*CircleSummaryForNO), assign func(*CircleSummaryForNO, *UserMaster)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int32]*CircleSummaryForNO)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.UserMaster(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(circlesummaryforno.CircleusersColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.circle_summary_for_no_circleusers
		if fk == nil {
			return fmt.Errorf(`foreign-key "circle_summary_for_no_circleusers" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "circle_summary_for_no_circleusers" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (csfnq *CircleSummaryForNOQuery) loadCircleRefsForHallTicketIP(ctx context.Context, query *ExamApplicationsIPQuery, nodes []*CircleSummaryForNO, init func(*CircleSummaryForNO), assign func(*CircleSummaryForNO, *Exam_Applications_IP)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int32]*CircleSummaryForNO)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(exam_applications_ip.FieldCircleSID)
	}
	query.Where(predicate.Exam_Applications_IP(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(circlesummaryforno.CircleRefsForHallTicketIPColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.CircleSID
		if fk == nil {
			return fmt.Errorf(`foreign-key "CircleSID" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "CircleSID" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (csfnq *CircleSummaryForNOQuery) loadCircleRefsForHallTicketPS(ctx context.Context, query *ExamApplicationsPSQuery, nodes []*CircleSummaryForNO, init func(*CircleSummaryForNO), assign func(*CircleSummaryForNO, *Exam_Applications_PS)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int32]*CircleSummaryForNO)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(exam_applications_ps.FieldCircleSID)
	}
	query.Where(predicate.Exam_Applications_PS(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(circlesummaryforno.CircleRefsForHallTicketPSColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.CircleSID
		if fk == nil {
			return fmt.Errorf(`foreign-key "CircleSID" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "CircleSID" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (csfnq *CircleSummaryForNOQuery) loadCircleRefsForHallTicketGDSPA(ctx context.Context, query *ExamApplicationsGDSPAQuery, nodes []*CircleSummaryForNO, init func(*CircleSummaryForNO), assign func(*CircleSummaryForNO, *Exam_Applications_GDSPA)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int32]*CircleSummaryForNO)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(exam_applications_gdspa.FieldCircleSID)
	}
	query.Where(predicate.Exam_Applications_GDSPA(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(circlesummaryforno.CircleRefsForHallTicketGDSPAColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.CircleSID
		if fk == nil {
			return fmt.Errorf(`foreign-key "CircleSID" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "CircleSID" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (csfnq *CircleSummaryForNOQuery) loadCircleRefsForHallTicketGDSPM(ctx context.Context, query *ExamApplicationsGDSPMQuery, nodes []*CircleSummaryForNO, init func(*CircleSummaryForNO), assign func(*CircleSummaryForNO, *Exam_Applications_GDSPM)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int32]*CircleSummaryForNO)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(exam_applications_gdspm.FieldCircleSID)
	}
	query.Where(predicate.Exam_Applications_GDSPM(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(circlesummaryforno.CircleRefsForHallTicketGDSPMColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.CircleSID
		if fk == nil {
			return fmt.Errorf(`foreign-key "CircleSID" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "CircleSID" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (csfnq *CircleSummaryForNOQuery) loadCircleRefsForHallTicketPMPA(ctx context.Context, query *ExamApplicationsPMPAQuery, nodes []*CircleSummaryForNO, init func(*CircleSummaryForNO), assign func(*CircleSummaryForNO, *Exam_Applications_PMPA)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int32]*CircleSummaryForNO)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(exam_applications_pmpa.FieldCircleSID)
	}
	query.Where(predicate.Exam_Applications_PMPA(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(circlesummaryforno.CircleRefsForHallTicketPMPAColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.CircleSID
		if fk == nil {
			return fmt.Errorf(`foreign-key "CircleSID" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "CircleSID" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (csfnq *CircleSummaryForNOQuery) loadCircleRefsForHallTicketMTSPMMG(ctx context.Context, query *ExamApplicationMTSPMMGQuery, nodes []*CircleSummaryForNO, init func(*CircleSummaryForNO), assign func(*CircleSummaryForNO, *Exam_Application_MTSPMMG)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int32]*CircleSummaryForNO)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(exam_application_mtspmmg.FieldCircleSID)
	}
	query.Where(predicate.Exam_Application_MTSPMMG(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(circlesummaryforno.CircleRefsForHallTicketMTSPMMGColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.CircleSID
		if fk == nil {
			return fmt.Errorf(`foreign-key "CircleSID" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "CircleSID" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (csfnq *CircleSummaryForNOQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := csfnq.querySpec()
	_spec.Node.Columns = csfnq.ctx.Fields
	if len(csfnq.ctx.Fields) > 0 {
		_spec.Unique = csfnq.ctx.Unique != nil && *csfnq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, csfnq.driver, _spec)
}

func (csfnq *CircleSummaryForNOQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(circlesummaryforno.Table, circlesummaryforno.Columns, sqlgraph.NewFieldSpec(circlesummaryforno.FieldID, field.TypeInt32))
	_spec.From = csfnq.sql
	if unique := csfnq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if csfnq.path != nil {
		_spec.Unique = true
	}
	if fields := csfnq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, circlesummaryforno.FieldID)
		for i := range fields {
			if fields[i] != circlesummaryforno.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := csfnq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := csfnq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := csfnq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := csfnq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (csfnq *CircleSummaryForNOQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(csfnq.driver.Dialect())
	t1 := builder.Table(circlesummaryforno.Table)
	columns := csfnq.ctx.Fields
	if len(columns) == 0 {
		columns = circlesummaryforno.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if csfnq.sql != nil {
		selector = csfnq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if csfnq.ctx.Unique != nil && *csfnq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range csfnq.predicates {
		p(selector)
	}
	for _, p := range csfnq.order {
		p(selector)
	}
	if offset := csfnq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := csfnq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// CircleSummaryForNOGroupBy is the group-by builder for CircleSummaryForNO entities.
type CircleSummaryForNOGroupBy struct {
	selector
	build *CircleSummaryForNOQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (csfngb *CircleSummaryForNOGroupBy) Aggregate(fns ...AggregateFunc) *CircleSummaryForNOGroupBy {
	csfngb.fns = append(csfngb.fns, fns...)
	return csfngb
}

// Scan applies the selector query and scans the result into the given value.
func (csfngb *CircleSummaryForNOGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, csfngb.build.ctx, "GroupBy")
	if err := csfngb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*CircleSummaryForNOQuery, *CircleSummaryForNOGroupBy](ctx, csfngb.build, csfngb, csfngb.build.inters, v)
}

func (csfngb *CircleSummaryForNOGroupBy) sqlScan(ctx context.Context, root *CircleSummaryForNOQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(csfngb.fns))
	for _, fn := range csfngb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*csfngb.flds)+len(csfngb.fns))
		for _, f := range *csfngb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*csfngb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := csfngb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// CircleSummaryForNOSelect is the builder for selecting fields of CircleSummaryForNO entities.
type CircleSummaryForNOSelect struct {
	*CircleSummaryForNOQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (csfns *CircleSummaryForNOSelect) Aggregate(fns ...AggregateFunc) *CircleSummaryForNOSelect {
	csfns.fns = append(csfns.fns, fns...)
	return csfns
}

// Scan applies the selector query and scans the result into the given value.
func (csfns *CircleSummaryForNOSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, csfns.ctx, "Select")
	if err := csfns.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*CircleSummaryForNOQuery, *CircleSummaryForNOSelect](ctx, csfns.CircleSummaryForNOQuery, csfns, csfns.inters, v)
}

func (csfns *CircleSummaryForNOSelect) sqlScan(ctx context.Context, root *CircleSummaryForNOQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(csfns.fns))
	for _, fn := range csfns.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*csfns.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := csfns.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
