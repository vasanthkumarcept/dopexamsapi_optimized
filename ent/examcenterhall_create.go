// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"recruit/ent/center"
	"recruit/ent/examcenterhall"
	"recruit/ent/schema"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ExamCenterHallCreate is the builder for creating a ExamCenterHall entity.
type ExamCenterHallCreate struct {
	config
	mutation *ExamCenterHallMutation
	hooks    []Hook
}

// SetCenterCode sets the "CenterCode" field.
func (echc *ExamCenterHallCreate) SetCenterCode(i int32) *ExamCenterHallCreate {
	echc.mutation.SetCenterCode(i)
	return echc
}

// SetNillableCenterCode sets the "CenterCode" field if the given value is not nil.
func (echc *ExamCenterHallCreate) SetNillableCenterCode(i *int32) *ExamCenterHallCreate {
	if i != nil {
		echc.SetCenterCode(*i)
	}
	return echc
}

// SetCityID sets the "CityID" field.
func (echc *ExamCenterHallCreate) SetCityID(i int32) *ExamCenterHallCreate {
	echc.mutation.SetCityID(i)
	return echc
}

// SetNillableCityID sets the "CityID" field if the given value is not nil.
func (echc *ExamCenterHallCreate) SetNillableCityID(i *int32) *ExamCenterHallCreate {
	if i != nil {
		echc.SetCityID(*i)
	}
	return echc
}

// SetExamCenterName sets the "ExamCenterName" field.
func (echc *ExamCenterHallCreate) SetExamCenterName(s string) *ExamCenterHallCreate {
	echc.mutation.SetExamCenterName(s)
	return echc
}

// SetNillableExamCenterName sets the "ExamCenterName" field if the given value is not nil.
func (echc *ExamCenterHallCreate) SetNillableExamCenterName(s *string) *ExamCenterHallCreate {
	if s != nil {
		echc.SetExamCenterName(*s)
	}
	return echc
}

// SetExamYear sets the "ExamYear" field.
func (echc *ExamCenterHallCreate) SetExamYear(s string) *ExamCenterHallCreate {
	echc.mutation.SetExamYear(s)
	return echc
}

// SetNillableExamYear sets the "ExamYear" field if the given value is not nil.
func (echc *ExamCenterHallCreate) SetNillableExamYear(s *string) *ExamCenterHallCreate {
	if s != nil {
		echc.SetExamYear(*s)
	}
	return echc
}

// SetExamCode sets the "ExamCode" field.
func (echc *ExamCenterHallCreate) SetExamCode(i int32) *ExamCenterHallCreate {
	echc.mutation.SetExamCode(i)
	return echc
}

// SetNillableExamCode sets the "ExamCode" field if the given value is not nil.
func (echc *ExamCenterHallCreate) SetNillableExamCode(i *int32) *ExamCenterHallCreate {
	if i != nil {
		echc.SetExamCode(*i)
	}
	return echc
}

// SetExamName sets the "ExamName" field.
func (echc *ExamCenterHallCreate) SetExamName(s string) *ExamCenterHallCreate {
	echc.mutation.SetExamName(s)
	return echc
}

// SetNillableExamName sets the "ExamName" field if the given value is not nil.
func (echc *ExamCenterHallCreate) SetNillableExamName(s *string) *ExamCenterHallCreate {
	if s != nil {
		echc.SetExamName(*s)
	}
	return echc
}

// SetCenterCityName sets the "CenterCityName" field.
func (echc *ExamCenterHallCreate) SetCenterCityName(s string) *ExamCenterHallCreate {
	echc.mutation.SetCenterCityName(s)
	return echc
}

// SetNillableCenterCityName sets the "CenterCityName" field if the given value is not nil.
func (echc *ExamCenterHallCreate) SetNillableCenterCityName(s *string) *ExamCenterHallCreate {
	if s != nil {
		echc.SetCenterCityName(*s)
	}
	return echc
}

// SetConductedByFacilityID sets the "ConductedByFacilityID" field.
func (echc *ExamCenterHallCreate) SetConductedByFacilityID(s string) *ExamCenterHallCreate {
	echc.mutation.SetConductedByFacilityID(s)
	return echc
}

// SetNillableConductedByFacilityID sets the "ConductedByFacilityID" field if the given value is not nil.
func (echc *ExamCenterHallCreate) SetNillableConductedByFacilityID(s *string) *ExamCenterHallCreate {
	if s != nil {
		echc.SetConductedByFacilityID(*s)
	}
	return echc
}

// SetConductedBy sets the "ConductedBy" field.
func (echc *ExamCenterHallCreate) SetConductedBy(s string) *ExamCenterHallCreate {
	echc.mutation.SetConductedBy(s)
	return echc
}

// SetNillableConductedBy sets the "ConductedBy" field if the given value is not nil.
func (echc *ExamCenterHallCreate) SetNillableConductedBy(s *string) *ExamCenterHallCreate {
	if s != nil {
		echc.SetConductedBy(*s)
	}
	return echc
}

// SetHallName sets the "HallName" field.
func (echc *ExamCenterHallCreate) SetHallName(s string) *ExamCenterHallCreate {
	echc.mutation.SetHallName(s)
	return echc
}

// SetNillableHallName sets the "HallName" field if the given value is not nil.
func (echc *ExamCenterHallCreate) SetNillableHallName(s *string) *ExamCenterHallCreate {
	if s != nil {
		echc.SetHallName(*s)
	}
	return echc
}

// SetAdminCircleOfficeID sets the "AdminCircleOfficeID" field.
func (echc *ExamCenterHallCreate) SetAdminCircleOfficeID(s string) *ExamCenterHallCreate {
	echc.mutation.SetAdminCircleOfficeID(s)
	return echc
}

// SetNillableAdminCircleOfficeID sets the "AdminCircleOfficeID" field if the given value is not nil.
func (echc *ExamCenterHallCreate) SetNillableAdminCircleOfficeID(s *string) *ExamCenterHallCreate {
	if s != nil {
		echc.SetAdminCircleOfficeID(*s)
	}
	return echc
}

// SetMappingIdentificationNumber sets the "MappingIdentificationNumber" field.
func (echc *ExamCenterHallCreate) SetMappingIdentificationNumber(smin []schema.StrucMappingIdentificationNumber) *ExamCenterHallCreate {
	echc.mutation.SetMappingIdentificationNumber(smin)
	return echc
}

// SetStatus sets the "Status" field.
func (echc *ExamCenterHallCreate) SetStatus(s string) *ExamCenterHallCreate {
	echc.mutation.SetStatus(s)
	return echc
}

// SetNillableStatus sets the "Status" field if the given value is not nil.
func (echc *ExamCenterHallCreate) SetNillableStatus(s *string) *ExamCenterHallCreate {
	if s != nil {
		echc.SetStatus(*s)
	}
	return echc
}

// SetCreatedById sets the "CreatedById" field.
func (echc *ExamCenterHallCreate) SetCreatedById(i int64) *ExamCenterHallCreate {
	echc.mutation.SetCreatedById(i)
	return echc
}

// SetNillableCreatedById sets the "CreatedById" field if the given value is not nil.
func (echc *ExamCenterHallCreate) SetNillableCreatedById(i *int64) *ExamCenterHallCreate {
	if i != nil {
		echc.SetCreatedById(*i)
	}
	return echc
}

// SetCreatedByUserName sets the "CreatedByUserName" field.
func (echc *ExamCenterHallCreate) SetCreatedByUserName(s string) *ExamCenterHallCreate {
	echc.mutation.SetCreatedByUserName(s)
	return echc
}

// SetNillableCreatedByUserName sets the "CreatedByUserName" field if the given value is not nil.
func (echc *ExamCenterHallCreate) SetNillableCreatedByUserName(s *string) *ExamCenterHallCreate {
	if s != nil {
		echc.SetCreatedByUserName(*s)
	}
	return echc
}

// SetCreatedByEmpId sets the "CreatedByEmpId" field.
func (echc *ExamCenterHallCreate) SetCreatedByEmpId(i int64) *ExamCenterHallCreate {
	echc.mutation.SetCreatedByEmpId(i)
	return echc
}

// SetNillableCreatedByEmpId sets the "CreatedByEmpId" field if the given value is not nil.
func (echc *ExamCenterHallCreate) SetNillableCreatedByEmpId(i *int64) *ExamCenterHallCreate {
	if i != nil {
		echc.SetCreatedByEmpId(*i)
	}
	return echc
}

// SetCreatedByDesignation sets the "CreatedByDesignation" field.
func (echc *ExamCenterHallCreate) SetCreatedByDesignation(s string) *ExamCenterHallCreate {
	echc.mutation.SetCreatedByDesignation(s)
	return echc
}

// SetNillableCreatedByDesignation sets the "CreatedByDesignation" field if the given value is not nil.
func (echc *ExamCenterHallCreate) SetNillableCreatedByDesignation(s *string) *ExamCenterHallCreate {
	if s != nil {
		echc.SetCreatedByDesignation(*s)
	}
	return echc
}

// SetCreatedDate sets the "CreatedDate" field.
func (echc *ExamCenterHallCreate) SetCreatedDate(t time.Time) *ExamCenterHallCreate {
	echc.mutation.SetCreatedDate(t)
	return echc
}

// SetNillableCreatedDate sets the "CreatedDate" field if the given value is not nil.
func (echc *ExamCenterHallCreate) SetNillableCreatedDate(t *time.Time) *ExamCenterHallCreate {
	if t != nil {
		echc.SetCreatedDate(*t)
	}
	return echc
}

// SetModifiedById sets the "ModifiedById" field.
func (echc *ExamCenterHallCreate) SetModifiedById(i int64) *ExamCenterHallCreate {
	echc.mutation.SetModifiedById(i)
	return echc
}

// SetNillableModifiedById sets the "ModifiedById" field if the given value is not nil.
func (echc *ExamCenterHallCreate) SetNillableModifiedById(i *int64) *ExamCenterHallCreate {
	if i != nil {
		echc.SetModifiedById(*i)
	}
	return echc
}

// SetModifiedByUserName sets the "ModifiedByUserName" field.
func (echc *ExamCenterHallCreate) SetModifiedByUserName(s string) *ExamCenterHallCreate {
	echc.mutation.SetModifiedByUserName(s)
	return echc
}

// SetNillableModifiedByUserName sets the "ModifiedByUserName" field if the given value is not nil.
func (echc *ExamCenterHallCreate) SetNillableModifiedByUserName(s *string) *ExamCenterHallCreate {
	if s != nil {
		echc.SetModifiedByUserName(*s)
	}
	return echc
}

// SetModifiedByEmpId sets the "ModifiedByEmpId" field.
func (echc *ExamCenterHallCreate) SetModifiedByEmpId(i int64) *ExamCenterHallCreate {
	echc.mutation.SetModifiedByEmpId(i)
	return echc
}

// SetNillableModifiedByEmpId sets the "ModifiedByEmpId" field if the given value is not nil.
func (echc *ExamCenterHallCreate) SetNillableModifiedByEmpId(i *int64) *ExamCenterHallCreate {
	if i != nil {
		echc.SetModifiedByEmpId(*i)
	}
	return echc
}

// SetModifiedByDesignantion sets the "ModifiedByDesignantion" field.
func (echc *ExamCenterHallCreate) SetModifiedByDesignantion(s string) *ExamCenterHallCreate {
	echc.mutation.SetModifiedByDesignantion(s)
	return echc
}

// SetNillableModifiedByDesignantion sets the "ModifiedByDesignantion" field if the given value is not nil.
func (echc *ExamCenterHallCreate) SetNillableModifiedByDesignantion(s *string) *ExamCenterHallCreate {
	if s != nil {
		echc.SetModifiedByDesignantion(*s)
	}
	return echc
}

// SetModifiedDate sets the "ModifiedDate" field.
func (echc *ExamCenterHallCreate) SetModifiedDate(t time.Time) *ExamCenterHallCreate {
	echc.mutation.SetModifiedDate(t)
	return echc
}

// SetNillableModifiedDate sets the "ModifiedDate" field if the given value is not nil.
func (echc *ExamCenterHallCreate) SetNillableModifiedDate(t *time.Time) *ExamCenterHallCreate {
	if t != nil {
		echc.SetModifiedDate(*t)
	}
	return echc
}

// SetDeletedById sets the "DeletedById" field.
func (echc *ExamCenterHallCreate) SetDeletedById(i int64) *ExamCenterHallCreate {
	echc.mutation.SetDeletedById(i)
	return echc
}

// SetNillableDeletedById sets the "DeletedById" field if the given value is not nil.
func (echc *ExamCenterHallCreate) SetNillableDeletedById(i *int64) *ExamCenterHallCreate {
	if i != nil {
		echc.SetDeletedById(*i)
	}
	return echc
}

// SetDeletedByUserName sets the "DeletedByUserName" field.
func (echc *ExamCenterHallCreate) SetDeletedByUserName(s string) *ExamCenterHallCreate {
	echc.mutation.SetDeletedByUserName(s)
	return echc
}

// SetNillableDeletedByUserName sets the "DeletedByUserName" field if the given value is not nil.
func (echc *ExamCenterHallCreate) SetNillableDeletedByUserName(s *string) *ExamCenterHallCreate {
	if s != nil {
		echc.SetDeletedByUserName(*s)
	}
	return echc
}

// SetDeletedByEmpId sets the "DeletedByEmpId" field.
func (echc *ExamCenterHallCreate) SetDeletedByEmpId(i int64) *ExamCenterHallCreate {
	echc.mutation.SetDeletedByEmpId(i)
	return echc
}

// SetNillableDeletedByEmpId sets the "DeletedByEmpId" field if the given value is not nil.
func (echc *ExamCenterHallCreate) SetNillableDeletedByEmpId(i *int64) *ExamCenterHallCreate {
	if i != nil {
		echc.SetDeletedByEmpId(*i)
	}
	return echc
}

// SetDeletedByDesignation sets the "DeletedByDesignation" field.
func (echc *ExamCenterHallCreate) SetDeletedByDesignation(s string) *ExamCenterHallCreate {
	echc.mutation.SetDeletedByDesignation(s)
	return echc
}

// SetNillableDeletedByDesignation sets the "DeletedByDesignation" field if the given value is not nil.
func (echc *ExamCenterHallCreate) SetNillableDeletedByDesignation(s *string) *ExamCenterHallCreate {
	if s != nil {
		echc.SetDeletedByDesignation(*s)
	}
	return echc
}

// SetDeletedDate sets the "DeletedDate" field.
func (echc *ExamCenterHallCreate) SetDeletedDate(t time.Time) *ExamCenterHallCreate {
	echc.mutation.SetDeletedDate(t)
	return echc
}

// SetNillableDeletedDate sets the "DeletedDate" field if the given value is not nil.
func (echc *ExamCenterHallCreate) SetNillableDeletedDate(t *time.Time) *ExamCenterHallCreate {
	if t != nil {
		echc.SetDeletedDate(*t)
	}
	return echc
}

// SetUpdatedAt sets the "UpdatedAt" field.
func (echc *ExamCenterHallCreate) SetUpdatedAt(t time.Time) *ExamCenterHallCreate {
	echc.mutation.SetUpdatedAt(t)
	return echc
}

// SetNillableUpdatedAt sets the "UpdatedAt" field if the given value is not nil.
func (echc *ExamCenterHallCreate) SetNillableUpdatedAt(t *time.Time) *ExamCenterHallCreate {
	if t != nil {
		echc.SetUpdatedAt(*t)
	}
	return echc
}

// SetNoSeats sets the "NoSeats" field.
func (echc *ExamCenterHallCreate) SetNoSeats(i int32) *ExamCenterHallCreate {
	echc.mutation.SetNoSeats(i)
	return echc
}

// SetNillableNoSeats sets the "NoSeats" field if the given value is not nil.
func (echc *ExamCenterHallCreate) SetNillableNoSeats(i *int32) *ExamCenterHallCreate {
	if i != nil {
		echc.SetNoSeats(*i)
	}
	return echc
}

// SetID sets the "id" field.
func (echc *ExamCenterHallCreate) SetID(i int32) *ExamCenterHallCreate {
	echc.mutation.SetID(i)
	return echc
}

// SetExaCenterHallID sets the "ExaCenterHall" edge to the Center entity by ID.
func (echc *ExamCenterHallCreate) SetExaCenterHallID(id int32) *ExamCenterHallCreate {
	echc.mutation.SetExaCenterHallID(id)
	return echc
}

// SetNillableExaCenterHallID sets the "ExaCenterHall" edge to the Center entity by ID if the given value is not nil.
func (echc *ExamCenterHallCreate) SetNillableExaCenterHallID(id *int32) *ExamCenterHallCreate {
	if id != nil {
		echc = echc.SetExaCenterHallID(*id)
	}
	return echc
}

// SetExaCenterHall sets the "ExaCenterHall" edge to the Center entity.
func (echc *ExamCenterHallCreate) SetExaCenterHall(c *Center) *ExamCenterHallCreate {
	return echc.SetExaCenterHallID(c.ID)
}

// Mutation returns the ExamCenterHallMutation object of the builder.
func (echc *ExamCenterHallCreate) Mutation() *ExamCenterHallMutation {
	return echc.mutation
}

// Save creates the ExamCenterHall in the database.
func (echc *ExamCenterHallCreate) Save(ctx context.Context) (*ExamCenterHall, error) {
	echc.defaults()
	return withHooks(ctx, echc.sqlSave, echc.mutation, echc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (echc *ExamCenterHallCreate) SaveX(ctx context.Context) *ExamCenterHall {
	v, err := echc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (echc *ExamCenterHallCreate) Exec(ctx context.Context) error {
	_, err := echc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (echc *ExamCenterHallCreate) ExecX(ctx context.Context) {
	if err := echc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (echc *ExamCenterHallCreate) defaults() {
	if _, ok := echc.mutation.CenterCode(); !ok {
		v := examcenterhall.DefaultCenterCode
		echc.mutation.SetCenterCode(v)
	}
	if _, ok := echc.mutation.CityID(); !ok {
		v := examcenterhall.DefaultCityID
		echc.mutation.SetCityID(v)
	}
	if _, ok := echc.mutation.ExamCode(); !ok {
		v := examcenterhall.DefaultExamCode
		echc.mutation.SetExamCode(v)
	}
	if _, ok := echc.mutation.Status(); !ok {
		v := examcenterhall.DefaultStatus
		echc.mutation.SetStatus(v)
	}
	if _, ok := echc.mutation.CreatedById(); !ok {
		v := examcenterhall.DefaultCreatedById
		echc.mutation.SetCreatedById(v)
	}
	if _, ok := echc.mutation.CreatedByEmpId(); !ok {
		v := examcenterhall.DefaultCreatedByEmpId
		echc.mutation.SetCreatedByEmpId(v)
	}
	if _, ok := echc.mutation.CreatedDate(); !ok {
		v := examcenterhall.DefaultCreatedDate()
		echc.mutation.SetCreatedDate(v)
	}
	if _, ok := echc.mutation.ModifiedById(); !ok {
		v := examcenterhall.DefaultModifiedById
		echc.mutation.SetModifiedById(v)
	}
	if _, ok := echc.mutation.ModifiedByEmpId(); !ok {
		v := examcenterhall.DefaultModifiedByEmpId
		echc.mutation.SetModifiedByEmpId(v)
	}
	if _, ok := echc.mutation.ModifiedDate(); !ok {
		v := examcenterhall.DefaultModifiedDate()
		echc.mutation.SetModifiedDate(v)
	}
	if _, ok := echc.mutation.DeletedById(); !ok {
		v := examcenterhall.DefaultDeletedById
		echc.mutation.SetDeletedById(v)
	}
	if _, ok := echc.mutation.DeletedByEmpId(); !ok {
		v := examcenterhall.DefaultDeletedByEmpId
		echc.mutation.SetDeletedByEmpId(v)
	}
	if _, ok := echc.mutation.DeletedDate(); !ok {
		v := examcenterhall.DefaultDeletedDate()
		echc.mutation.SetDeletedDate(v)
	}
	if _, ok := echc.mutation.NoSeats(); !ok {
		v := examcenterhall.DefaultNoSeats
		echc.mutation.SetNoSeats(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (echc *ExamCenterHallCreate) check() error {
	return nil
}

func (echc *ExamCenterHallCreate) sqlSave(ctx context.Context) (*ExamCenterHall, error) {
	if err := echc.check(); err != nil {
		return nil, err
	}
	_node, _spec := echc.createSpec()
	if err := sqlgraph.CreateNode(ctx, echc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int32(id)
	}
	echc.mutation.id = &_node.ID
	echc.mutation.done = true
	return _node, nil
}

func (echc *ExamCenterHallCreate) createSpec() (*ExamCenterHall, *sqlgraph.CreateSpec) {
	var (
		_node = &ExamCenterHall{config: echc.config}
		_spec = sqlgraph.NewCreateSpec(examcenterhall.Table, sqlgraph.NewFieldSpec(examcenterhall.FieldID, field.TypeInt32))
	)
	if id, ok := echc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := echc.mutation.CityID(); ok {
		_spec.SetField(examcenterhall.FieldCityID, field.TypeInt32, value)
		_node.CityID = value
	}
	if value, ok := echc.mutation.ExamCenterName(); ok {
		_spec.SetField(examcenterhall.FieldExamCenterName, field.TypeString, value)
		_node.ExamCenterName = value
	}
	if value, ok := echc.mutation.ExamYear(); ok {
		_spec.SetField(examcenterhall.FieldExamYear, field.TypeString, value)
		_node.ExamYear = value
	}
	if value, ok := echc.mutation.ExamCode(); ok {
		_spec.SetField(examcenterhall.FieldExamCode, field.TypeInt32, value)
		_node.ExamCode = value
	}
	if value, ok := echc.mutation.ExamName(); ok {
		_spec.SetField(examcenterhall.FieldExamName, field.TypeString, value)
		_node.ExamName = value
	}
	if value, ok := echc.mutation.CenterCityName(); ok {
		_spec.SetField(examcenterhall.FieldCenterCityName, field.TypeString, value)
		_node.CenterCityName = value
	}
	if value, ok := echc.mutation.ConductedByFacilityID(); ok {
		_spec.SetField(examcenterhall.FieldConductedByFacilityID, field.TypeString, value)
		_node.ConductedByFacilityID = value
	}
	if value, ok := echc.mutation.ConductedBy(); ok {
		_spec.SetField(examcenterhall.FieldConductedBy, field.TypeString, value)
		_node.ConductedBy = value
	}
	if value, ok := echc.mutation.HallName(); ok {
		_spec.SetField(examcenterhall.FieldHallName, field.TypeString, value)
		_node.HallName = value
	}
	if value, ok := echc.mutation.AdminCircleOfficeID(); ok {
		_spec.SetField(examcenterhall.FieldAdminCircleOfficeID, field.TypeString, value)
		_node.AdminCircleOfficeID = value
	}
	if value, ok := echc.mutation.MappingIdentificationNumber(); ok {
		_spec.SetField(examcenterhall.FieldMappingIdentificationNumber, field.TypeJSON, value)
		_node.MappingIdentificationNumber = value
	}
	if value, ok := echc.mutation.Status(); ok {
		_spec.SetField(examcenterhall.FieldStatus, field.TypeString, value)
		_node.Status = value
	}
	if value, ok := echc.mutation.CreatedById(); ok {
		_spec.SetField(examcenterhall.FieldCreatedById, field.TypeInt64, value)
		_node.CreatedById = value
	}
	if value, ok := echc.mutation.CreatedByUserName(); ok {
		_spec.SetField(examcenterhall.FieldCreatedByUserName, field.TypeString, value)
		_node.CreatedByUserName = value
	}
	if value, ok := echc.mutation.CreatedByEmpId(); ok {
		_spec.SetField(examcenterhall.FieldCreatedByEmpId, field.TypeInt64, value)
		_node.CreatedByEmpId = value
	}
	if value, ok := echc.mutation.CreatedByDesignation(); ok {
		_spec.SetField(examcenterhall.FieldCreatedByDesignation, field.TypeString, value)
		_node.CreatedByDesignation = value
	}
	if value, ok := echc.mutation.CreatedDate(); ok {
		_spec.SetField(examcenterhall.FieldCreatedDate, field.TypeTime, value)
		_node.CreatedDate = value
	}
	if value, ok := echc.mutation.ModifiedById(); ok {
		_spec.SetField(examcenterhall.FieldModifiedById, field.TypeInt64, value)
		_node.ModifiedById = value
	}
	if value, ok := echc.mutation.ModifiedByUserName(); ok {
		_spec.SetField(examcenterhall.FieldModifiedByUserName, field.TypeString, value)
		_node.ModifiedByUserName = value
	}
	if value, ok := echc.mutation.ModifiedByEmpId(); ok {
		_spec.SetField(examcenterhall.FieldModifiedByEmpId, field.TypeInt64, value)
		_node.ModifiedByEmpId = value
	}
	if value, ok := echc.mutation.ModifiedByDesignantion(); ok {
		_spec.SetField(examcenterhall.FieldModifiedByDesignantion, field.TypeString, value)
		_node.ModifiedByDesignantion = value
	}
	if value, ok := echc.mutation.ModifiedDate(); ok {
		_spec.SetField(examcenterhall.FieldModifiedDate, field.TypeTime, value)
		_node.ModifiedDate = value
	}
	if value, ok := echc.mutation.DeletedById(); ok {
		_spec.SetField(examcenterhall.FieldDeletedById, field.TypeInt64, value)
		_node.DeletedById = value
	}
	if value, ok := echc.mutation.DeletedByUserName(); ok {
		_spec.SetField(examcenterhall.FieldDeletedByUserName, field.TypeString, value)
		_node.DeletedByUserName = value
	}
	if value, ok := echc.mutation.DeletedByEmpId(); ok {
		_spec.SetField(examcenterhall.FieldDeletedByEmpId, field.TypeInt64, value)
		_node.DeletedByEmpId = value
	}
	if value, ok := echc.mutation.DeletedByDesignation(); ok {
		_spec.SetField(examcenterhall.FieldDeletedByDesignation, field.TypeString, value)
		_node.DeletedByDesignation = value
	}
	if value, ok := echc.mutation.DeletedDate(); ok {
		_spec.SetField(examcenterhall.FieldDeletedDate, field.TypeTime, value)
		_node.DeletedDate = value
	}
	if value, ok := echc.mutation.UpdatedAt(); ok {
		_spec.SetField(examcenterhall.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := echc.mutation.NoSeats(); ok {
		_spec.SetField(examcenterhall.FieldNoSeats, field.TypeInt32, value)
		_node.NoSeats = value
	}
	if nodes := echc.mutation.ExaCenterHallIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   examcenterhall.ExaCenterHallTable,
			Columns: []string{examcenterhall.ExaCenterHallColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(center.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CenterCode = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ExamCenterHallCreateBulk is the builder for creating many ExamCenterHall entities in bulk.
type ExamCenterHallCreateBulk struct {
	config
	builders []*ExamCenterHallCreate
}

// Save creates the ExamCenterHall entities in the database.
func (echcb *ExamCenterHallCreateBulk) Save(ctx context.Context) ([]*ExamCenterHall, error) {
	specs := make([]*sqlgraph.CreateSpec, len(echcb.builders))
	nodes := make([]*ExamCenterHall, len(echcb.builders))
	mutators := make([]Mutator, len(echcb.builders))
	for i := range echcb.builders {
		func(i int, root context.Context) {
			builder := echcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ExamCenterHallMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, echcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, echcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, echcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (echcb *ExamCenterHallCreateBulk) SaveX(ctx context.Context) []*ExamCenterHall {
	v, err := echcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (echcb *ExamCenterHallCreateBulk) Exec(ctx context.Context) error {
	_, err := echcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (echcb *ExamCenterHallCreateBulk) ExecX(ctx context.Context) {
	if err := echcb.Exec(ctx); err != nil {
		panic(err)
	}
}
