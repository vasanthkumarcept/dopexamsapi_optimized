// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"recruit/ent/eligibilitymaster"
	"recruit/ent/employeecategory"
	"recruit/ent/employeeposts"
	"recruit/ent/exam"
	"recruit/ent/exampapers"
	"recruit/ent/notification"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// EligibilityMasterCreate is the builder for creating a EligibilityMaster entity.
type EligibilityMasterCreate struct {
	config
	mutation *EligibilityMasterMutation
	hooks    []Hook
}

// SetExamCode sets the "ExamCode" field.
func (emc *EligibilityMasterCreate) SetExamCode(i int32) *EligibilityMasterCreate {
	emc.mutation.SetExamCode(i)
	return emc
}

// SetNillableExamCode sets the "ExamCode" field if the given value is not nil.
func (emc *EligibilityMasterCreate) SetNillableExamCode(i *int32) *EligibilityMasterCreate {
	if i != nil {
		emc.SetExamCode(*i)
	}
	return emc
}

// SetExamName sets the "ExamName" field.
func (emc *EligibilityMasterCreate) SetExamName(s string) *EligibilityMasterCreate {
	emc.mutation.SetExamName(s)
	return emc
}

// SetPostCode sets the "PostCode" field.
func (emc *EligibilityMasterCreate) SetPostCode(s string) *EligibilityMasterCreate {
	emc.mutation.SetPostCode(s)
	return emc
}

// SetNillablePostCode sets the "PostCode" field if the given value is not nil.
func (emc *EligibilityMasterCreate) SetNillablePostCode(s *string) *EligibilityMasterCreate {
	if s != nil {
		emc.SetPostCode(*s)
	}
	return emc
}

// SetGdsService sets the "gdsService" field.
func (emc *EligibilityMasterCreate) SetGdsService(b bool) *EligibilityMasterCreate {
	emc.mutation.SetGdsService(b)
	return emc
}

// SetNillableGdsService sets the "gdsService" field if the given value is not nil.
func (emc *EligibilityMasterCreate) SetNillableGdsService(b *bool) *EligibilityMasterCreate {
	if b != nil {
		emc.SetGdsService(*b)
	}
	return emc
}

// SetAgeCriteria sets the "AgeCriteria" field.
func (emc *EligibilityMasterCreate) SetAgeCriteria(i int32) *EligibilityMasterCreate {
	emc.mutation.SetAgeCriteria(i)
	return emc
}

// SetNillableAgeCriteria sets the "AgeCriteria" field if the given value is not nil.
func (emc *EligibilityMasterCreate) SetNillableAgeCriteria(i *int32) *EligibilityMasterCreate {
	if i != nil {
		emc.SetAgeCriteria(*i)
	}
	return emc
}

// SetServiceCriteria sets the "ServiceCriteria" field.
func (emc *EligibilityMasterCreate) SetServiceCriteria(i int32) *EligibilityMasterCreate {
	emc.mutation.SetServiceCriteria(i)
	return emc
}

// SetNillableServiceCriteria sets the "ServiceCriteria" field if the given value is not nil.
func (emc *EligibilityMasterCreate) SetNillableServiceCriteria(i *int32) *EligibilityMasterCreate {
	if i != nil {
		emc.SetServiceCriteria(*i)
	}
	return emc
}

// SetDrivingLicenseCriteria sets the "DrivingLicenseCriteria" field.
func (emc *EligibilityMasterCreate) SetDrivingLicenseCriteria(b bool) *EligibilityMasterCreate {
	emc.mutation.SetDrivingLicenseCriteria(b)
	return emc
}

// SetNillableDrivingLicenseCriteria sets the "DrivingLicenseCriteria" field if the given value is not nil.
func (emc *EligibilityMasterCreate) SetNillableDrivingLicenseCriteria(b *bool) *EligibilityMasterCreate {
	if b != nil {
		emc.SetDrivingLicenseCriteria(*b)
	}
	return emc
}

// SetComputerKnowledge sets the "ComputerKnowledge" field.
func (emc *EligibilityMasterCreate) SetComputerKnowledge(b bool) *EligibilityMasterCreate {
	emc.mutation.SetComputerKnowledge(b)
	return emc
}

// SetNillableComputerKnowledge sets the "ComputerKnowledge" field if the given value is not nil.
func (emc *EligibilityMasterCreate) SetNillableComputerKnowledge(b *bool) *EligibilityMasterCreate {
	if b != nil {
		emc.SetComputerKnowledge(*b)
	}
	return emc
}

// SetLevelOfPayMatrixEligibility sets the "LevelOfPayMatrixEligibility" field.
func (emc *EligibilityMasterCreate) SetLevelOfPayMatrixEligibility(b bool) *EligibilityMasterCreate {
	emc.mutation.SetLevelOfPayMatrixEligibility(b)
	return emc
}

// SetNillableLevelOfPayMatrixEligibility sets the "LevelOfPayMatrixEligibility" field if the given value is not nil.
func (emc *EligibilityMasterCreate) SetNillableLevelOfPayMatrixEligibility(b *bool) *EligibilityMasterCreate {
	if b != nil {
		emc.SetLevelOfPayMatrixEligibility(*b)
	}
	return emc
}

// SetEducation sets the "Education" field.
func (emc *EligibilityMasterCreate) SetEducation(s string) *EligibilityMasterCreate {
	emc.mutation.SetEducation(s)
	return emc
}

// SetNotifyCode sets the "NotifyCode" field.
func (emc *EligibilityMasterCreate) SetNotifyCode(i int32) *EligibilityMasterCreate {
	emc.mutation.SetNotifyCode(i)
	return emc
}

// SetNillableNotifyCode sets the "NotifyCode" field if the given value is not nil.
func (emc *EligibilityMasterCreate) SetNillableNotifyCode(i *int32) *EligibilityMasterCreate {
	if i != nil {
		emc.SetNotifyCode(*i)
	}
	return emc
}

// SetCategoryCode sets the "CategoryCode" field.
func (emc *EligibilityMasterCreate) SetCategoryCode(s string) *EligibilityMasterCreate {
	emc.mutation.SetCategoryCode(s)
	return emc
}

// SetNillableCategoryCode sets the "CategoryCode" field if the given value is not nil.
func (emc *EligibilityMasterCreate) SetNillableCategoryCode(s *string) *EligibilityMasterCreate {
	if s != nil {
		emc.SetCategoryCode(*s)
	}
	return emc
}

// SetPaperCode sets the "PaperCode" field.
func (emc *EligibilityMasterCreate) SetPaperCode(i int32) *EligibilityMasterCreate {
	emc.mutation.SetPaperCode(i)
	return emc
}

// SetNillablePaperCode sets the "PaperCode" field if the given value is not nil.
func (emc *EligibilityMasterCreate) SetNillablePaperCode(i *int32) *EligibilityMasterCreate {
	if i != nil {
		emc.SetPaperCode(*i)
	}
	return emc
}

// SetPaperDescription sets the "PaperDescription" field.
func (emc *EligibilityMasterCreate) SetPaperDescription(s string) *EligibilityMasterCreate {
	emc.mutation.SetPaperDescription(s)
	return emc
}

// SetMinimumMarks sets the "MinimumMarks" field.
func (emc *EligibilityMasterCreate) SetMinimumMarks(i int32) *EligibilityMasterCreate {
	emc.mutation.SetMinimumMarks(i)
	return emc
}

// SetOrderNumber sets the "OrderNumber" field.
func (emc *EligibilityMasterCreate) SetOrderNumber(s string) *EligibilityMasterCreate {
	emc.mutation.SetOrderNumber(s)
	return emc
}

// SetNillableOrderNumber sets the "OrderNumber" field if the given value is not nil.
func (emc *EligibilityMasterCreate) SetNillableOrderNumber(s *string) *EligibilityMasterCreate {
	if s != nil {
		emc.SetOrderNumber(*s)
	}
	return emc
}

// SetStatus sets the "Status" field.
func (emc *EligibilityMasterCreate) SetStatus(s string) *EligibilityMasterCreate {
	emc.mutation.SetStatus(s)
	return emc
}

// SetNillableStatus sets the "Status" field if the given value is not nil.
func (emc *EligibilityMasterCreate) SetNillableStatus(s *string) *EligibilityMasterCreate {
	if s != nil {
		emc.SetStatus(*s)
	}
	return emc
}

// SetCreatedById sets the "CreatedById" field.
func (emc *EligibilityMasterCreate) SetCreatedById(i int32) *EligibilityMasterCreate {
	emc.mutation.SetCreatedById(i)
	return emc
}

// SetNillableCreatedById sets the "CreatedById" field if the given value is not nil.
func (emc *EligibilityMasterCreate) SetNillableCreatedById(i *int32) *EligibilityMasterCreate {
	if i != nil {
		emc.SetCreatedById(*i)
	}
	return emc
}

// SetCreatedByUserName sets the "CreatedByUserName" field.
func (emc *EligibilityMasterCreate) SetCreatedByUserName(s string) *EligibilityMasterCreate {
	emc.mutation.SetCreatedByUserName(s)
	return emc
}

// SetNillableCreatedByUserName sets the "CreatedByUserName" field if the given value is not nil.
func (emc *EligibilityMasterCreate) SetNillableCreatedByUserName(s *string) *EligibilityMasterCreate {
	if s != nil {
		emc.SetCreatedByUserName(*s)
	}
	return emc
}

// SetCreatedByEmployeeId sets the "CreatedByEmployeeId" field.
func (emc *EligibilityMasterCreate) SetCreatedByEmployeeId(s string) *EligibilityMasterCreate {
	emc.mutation.SetCreatedByEmployeeId(s)
	return emc
}

// SetNillableCreatedByEmployeeId sets the "CreatedByEmployeeId" field if the given value is not nil.
func (emc *EligibilityMasterCreate) SetNillableCreatedByEmployeeId(s *string) *EligibilityMasterCreate {
	if s != nil {
		emc.SetCreatedByEmployeeId(*s)
	}
	return emc
}

// SetCreatedByDesignation sets the "CreatedByDesignation" field.
func (emc *EligibilityMasterCreate) SetCreatedByDesignation(s string) *EligibilityMasterCreate {
	emc.mutation.SetCreatedByDesignation(s)
	return emc
}

// SetNillableCreatedByDesignation sets the "CreatedByDesignation" field if the given value is not nil.
func (emc *EligibilityMasterCreate) SetNillableCreatedByDesignation(s *string) *EligibilityMasterCreate {
	if s != nil {
		emc.SetCreatedByDesignation(*s)
	}
	return emc
}

// SetCreatedDate sets the "CreatedDate" field.
func (emc *EligibilityMasterCreate) SetCreatedDate(t time.Time) *EligibilityMasterCreate {
	emc.mutation.SetCreatedDate(t)
	return emc
}

// SetNillableCreatedDate sets the "CreatedDate" field if the given value is not nil.
func (emc *EligibilityMasterCreate) SetNillableCreatedDate(t *time.Time) *EligibilityMasterCreate {
	if t != nil {
		emc.SetCreatedDate(*t)
	}
	return emc
}

// SetVerifiedById sets the "VerifiedById" field.
func (emc *EligibilityMasterCreate) SetVerifiedById(i int64) *EligibilityMasterCreate {
	emc.mutation.SetVerifiedById(i)
	return emc
}

// SetNillableVerifiedById sets the "VerifiedById" field if the given value is not nil.
func (emc *EligibilityMasterCreate) SetNillableVerifiedById(i *int64) *EligibilityMasterCreate {
	if i != nil {
		emc.SetVerifiedById(*i)
	}
	return emc
}

// SetVerifiedByUserName sets the "VerifiedByUserName" field.
func (emc *EligibilityMasterCreate) SetVerifiedByUserName(s string) *EligibilityMasterCreate {
	emc.mutation.SetVerifiedByUserName(s)
	return emc
}

// SetNillableVerifiedByUserName sets the "VerifiedByUserName" field if the given value is not nil.
func (emc *EligibilityMasterCreate) SetNillableVerifiedByUserName(s *string) *EligibilityMasterCreate {
	if s != nil {
		emc.SetVerifiedByUserName(*s)
	}
	return emc
}

// SetVerifiedByEmployeeId sets the "VerifiedByEmployeeId" field.
func (emc *EligibilityMasterCreate) SetVerifiedByEmployeeId(s string) *EligibilityMasterCreate {
	emc.mutation.SetVerifiedByEmployeeId(s)
	return emc
}

// SetNillableVerifiedByEmployeeId sets the "VerifiedByEmployeeId" field if the given value is not nil.
func (emc *EligibilityMasterCreate) SetNillableVerifiedByEmployeeId(s *string) *EligibilityMasterCreate {
	if s != nil {
		emc.SetVerifiedByEmployeeId(*s)
	}
	return emc
}

// SetVerifiedByDesignation sets the "VerifiedByDesignation" field.
func (emc *EligibilityMasterCreate) SetVerifiedByDesignation(s string) *EligibilityMasterCreate {
	emc.mutation.SetVerifiedByDesignation(s)
	return emc
}

// SetNillableVerifiedByDesignation sets the "VerifiedByDesignation" field if the given value is not nil.
func (emc *EligibilityMasterCreate) SetNillableVerifiedByDesignation(s *string) *EligibilityMasterCreate {
	if s != nil {
		emc.SetVerifiedByDesignation(*s)
	}
	return emc
}

// SetVerifiedDate sets the "VerifiedDate" field.
func (emc *EligibilityMasterCreate) SetVerifiedDate(t time.Time) *EligibilityMasterCreate {
	emc.mutation.SetVerifiedDate(t)
	return emc
}

// SetNillableVerifiedDate sets the "VerifiedDate" field if the given value is not nil.
func (emc *EligibilityMasterCreate) SetNillableVerifiedDate(t *time.Time) *EligibilityMasterCreate {
	if t != nil {
		emc.SetVerifiedDate(*t)
	}
	return emc
}

// SetDeletedById sets the "DeletedById" field.
func (emc *EligibilityMasterCreate) SetDeletedById(i int64) *EligibilityMasterCreate {
	emc.mutation.SetDeletedById(i)
	return emc
}

// SetNillableDeletedById sets the "DeletedById" field if the given value is not nil.
func (emc *EligibilityMasterCreate) SetNillableDeletedById(i *int64) *EligibilityMasterCreate {
	if i != nil {
		emc.SetDeletedById(*i)
	}
	return emc
}

// SetDeletedByUserName sets the "DeletedByUserName" field.
func (emc *EligibilityMasterCreate) SetDeletedByUserName(s string) *EligibilityMasterCreate {
	emc.mutation.SetDeletedByUserName(s)
	return emc
}

// SetNillableDeletedByUserName sets the "DeletedByUserName" field if the given value is not nil.
func (emc *EligibilityMasterCreate) SetNillableDeletedByUserName(s *string) *EligibilityMasterCreate {
	if s != nil {
		emc.SetDeletedByUserName(*s)
	}
	return emc
}

// SetDeletedByEmployeeId sets the "DeletedByEmployeeId" field.
func (emc *EligibilityMasterCreate) SetDeletedByEmployeeId(s string) *EligibilityMasterCreate {
	emc.mutation.SetDeletedByEmployeeId(s)
	return emc
}

// SetNillableDeletedByEmployeeId sets the "DeletedByEmployeeId" field if the given value is not nil.
func (emc *EligibilityMasterCreate) SetNillableDeletedByEmployeeId(s *string) *EligibilityMasterCreate {
	if s != nil {
		emc.SetDeletedByEmployeeId(*s)
	}
	return emc
}

// SetDeletedByDesignation sets the "DeletedByDesignation" field.
func (emc *EligibilityMasterCreate) SetDeletedByDesignation(s string) *EligibilityMasterCreate {
	emc.mutation.SetDeletedByDesignation(s)
	return emc
}

// SetNillableDeletedByDesignation sets the "DeletedByDesignation" field if the given value is not nil.
func (emc *EligibilityMasterCreate) SetNillableDeletedByDesignation(s *string) *EligibilityMasterCreate {
	if s != nil {
		emc.SetDeletedByDesignation(*s)
	}
	return emc
}

// SetDeletedDate sets the "DeletedDate" field.
func (emc *EligibilityMasterCreate) SetDeletedDate(t time.Time) *EligibilityMasterCreate {
	emc.mutation.SetDeletedDate(t)
	return emc
}

// SetNillableDeletedDate sets the "DeletedDate" field if the given value is not nil.
func (emc *EligibilityMasterCreate) SetNillableDeletedDate(t *time.Time) *EligibilityMasterCreate {
	if t != nil {
		emc.SetDeletedDate(*t)
	}
	return emc
}

// SetID sets the "id" field.
func (emc *EligibilityMasterCreate) SetID(i int32) *EligibilityMasterCreate {
	emc.mutation.SetID(i)
	return emc
}

// AddNotificationIDs adds the "Notifications" edge to the Notification entity by IDs.
func (emc *EligibilityMasterCreate) AddNotificationIDs(ids ...int32) *EligibilityMasterCreate {
	emc.mutation.AddNotificationIDs(ids...)
	return emc
}

// AddNotifications adds the "Notifications" edges to the Notification entity.
func (emc *EligibilityMasterCreate) AddNotifications(n ...*Notification) *EligibilityMasterCreate {
	ids := make([]int32, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return emc.AddNotificationIDs(ids...)
}

// AddCategoryEligibilityIDs adds the "CategoryEligibility" edge to the EmployeeCategory entity by IDs.
func (emc *EligibilityMasterCreate) AddCategoryEligibilityIDs(ids ...int32) *EligibilityMasterCreate {
	emc.mutation.AddCategoryEligibilityIDs(ids...)
	return emc
}

// AddCategoryEligibility adds the "CategoryEligibility" edges to the EmployeeCategory entity.
func (emc *EligibilityMasterCreate) AddCategoryEligibility(e ...*EmployeeCategory) *EligibilityMasterCreate {
	ids := make([]int32, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return emc.AddCategoryEligibilityIDs(ids...)
}

// AddPostEligibilityIDs adds the "PostEligibility" edge to the EmployeePosts entity by IDs.
func (emc *EligibilityMasterCreate) AddPostEligibilityIDs(ids ...int32) *EligibilityMasterCreate {
	emc.mutation.AddPostEligibilityIDs(ids...)
	return emc
}

// AddPostEligibility adds the "PostEligibility" edges to the EmployeePosts entity.
func (emc *EligibilityMasterCreate) AddPostEligibility(e ...*EmployeePosts) *EligibilityMasterCreate {
	ids := make([]int32, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return emc.AddPostEligibilityIDs(ids...)
}

// SetExamPaperEligibilityID sets the "ExamPaper_Eligibility" edge to the ExamPapers entity by ID.
func (emc *EligibilityMasterCreate) SetExamPaperEligibilityID(id int32) *EligibilityMasterCreate {
	emc.mutation.SetExamPaperEligibilityID(id)
	return emc
}

// SetNillableExamPaperEligibilityID sets the "ExamPaper_Eligibility" edge to the ExamPapers entity by ID if the given value is not nil.
func (emc *EligibilityMasterCreate) SetNillableExamPaperEligibilityID(id *int32) *EligibilityMasterCreate {
	if id != nil {
		emc = emc.SetExamPaperEligibilityID(*id)
	}
	return emc
}

// SetExamPaperEligibility sets the "ExamPaper_Eligibility" edge to the ExamPapers entity.
func (emc *EligibilityMasterCreate) SetExamPaperEligibility(e *ExamPapers) *EligibilityMasterCreate {
	return emc.SetExamPaperEligibilityID(e.ID)
}

// SetExamEligibilityID sets the "Exam_Eligibility" edge to the Exam entity by ID.
func (emc *EligibilityMasterCreate) SetExamEligibilityID(id int32) *EligibilityMasterCreate {
	emc.mutation.SetExamEligibilityID(id)
	return emc
}

// SetNillableExamEligibilityID sets the "Exam_Eligibility" edge to the Exam entity by ID if the given value is not nil.
func (emc *EligibilityMasterCreate) SetNillableExamEligibilityID(id *int32) *EligibilityMasterCreate {
	if id != nil {
		emc = emc.SetExamEligibilityID(*id)
	}
	return emc
}

// SetExamEligibility sets the "Exam_Eligibility" edge to the Exam entity.
func (emc *EligibilityMasterCreate) SetExamEligibility(e *Exam) *EligibilityMasterCreate {
	return emc.SetExamEligibilityID(e.ID)
}

// Mutation returns the EligibilityMasterMutation object of the builder.
func (emc *EligibilityMasterCreate) Mutation() *EligibilityMasterMutation {
	return emc.mutation
}

// Save creates the EligibilityMaster in the database.
func (emc *EligibilityMasterCreate) Save(ctx context.Context) (*EligibilityMaster, error) {
	emc.defaults()
	return withHooks(ctx, emc.sqlSave, emc.mutation, emc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (emc *EligibilityMasterCreate) SaveX(ctx context.Context) *EligibilityMaster {
	v, err := emc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (emc *EligibilityMasterCreate) Exec(ctx context.Context) error {
	_, err := emc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (emc *EligibilityMasterCreate) ExecX(ctx context.Context) {
	if err := emc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (emc *EligibilityMasterCreate) defaults() {
	if _, ok := emc.mutation.GdsService(); !ok {
		v := eligibilitymaster.DefaultGdsService
		emc.mutation.SetGdsService(v)
	}
	if _, ok := emc.mutation.DrivingLicenseCriteria(); !ok {
		v := eligibilitymaster.DefaultDrivingLicenseCriteria
		emc.mutation.SetDrivingLicenseCriteria(v)
	}
	if _, ok := emc.mutation.ComputerKnowledge(); !ok {
		v := eligibilitymaster.DefaultComputerKnowledge
		emc.mutation.SetComputerKnowledge(v)
	}
	if _, ok := emc.mutation.LevelOfPayMatrixEligibility(); !ok {
		v := eligibilitymaster.DefaultLevelOfPayMatrixEligibility
		emc.mutation.SetLevelOfPayMatrixEligibility(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (emc *EligibilityMasterCreate) check() error {
	if _, ok := emc.mutation.ExamName(); !ok {
		return &ValidationError{Name: "ExamName", err: errors.New(`ent: missing required field "EligibilityMaster.ExamName"`)}
	}
	if _, ok := emc.mutation.GdsService(); !ok {
		return &ValidationError{Name: "gdsService", err: errors.New(`ent: missing required field "EligibilityMaster.gdsService"`)}
	}
	if _, ok := emc.mutation.DrivingLicenseCriteria(); !ok {
		return &ValidationError{Name: "DrivingLicenseCriteria", err: errors.New(`ent: missing required field "EligibilityMaster.DrivingLicenseCriteria"`)}
	}
	if _, ok := emc.mutation.ComputerKnowledge(); !ok {
		return &ValidationError{Name: "ComputerKnowledge", err: errors.New(`ent: missing required field "EligibilityMaster.ComputerKnowledge"`)}
	}
	if _, ok := emc.mutation.LevelOfPayMatrixEligibility(); !ok {
		return &ValidationError{Name: "LevelOfPayMatrixEligibility", err: errors.New(`ent: missing required field "EligibilityMaster.LevelOfPayMatrixEligibility"`)}
	}
	if _, ok := emc.mutation.Education(); !ok {
		return &ValidationError{Name: "Education", err: errors.New(`ent: missing required field "EligibilityMaster.Education"`)}
	}
	if _, ok := emc.mutation.PaperDescription(); !ok {
		return &ValidationError{Name: "PaperDescription", err: errors.New(`ent: missing required field "EligibilityMaster.PaperDescription"`)}
	}
	if _, ok := emc.mutation.MinimumMarks(); !ok {
		return &ValidationError{Name: "MinimumMarks", err: errors.New(`ent: missing required field "EligibilityMaster.MinimumMarks"`)}
	}
	return nil
}

func (emc *EligibilityMasterCreate) sqlSave(ctx context.Context) (*EligibilityMaster, error) {
	if err := emc.check(); err != nil {
		return nil, err
	}
	_node, _spec := emc.createSpec()
	if err := sqlgraph.CreateNode(ctx, emc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int32(id)
	}
	emc.mutation.id = &_node.ID
	emc.mutation.done = true
	return _node, nil
}

func (emc *EligibilityMasterCreate) createSpec() (*EligibilityMaster, *sqlgraph.CreateSpec) {
	var (
		_node = &EligibilityMaster{config: emc.config}
		_spec = sqlgraph.NewCreateSpec(eligibilitymaster.Table, sqlgraph.NewFieldSpec(eligibilitymaster.FieldID, field.TypeInt32))
	)
	if id, ok := emc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := emc.mutation.ExamName(); ok {
		_spec.SetField(eligibilitymaster.FieldExamName, field.TypeString, value)
		_node.ExamName = value
	}
	if value, ok := emc.mutation.PostCode(); ok {
		_spec.SetField(eligibilitymaster.FieldPostCode, field.TypeString, value)
		_node.PostCode = value
	}
	if value, ok := emc.mutation.GdsService(); ok {
		_spec.SetField(eligibilitymaster.FieldGdsService, field.TypeBool, value)
		_node.GdsService = value
	}
	if value, ok := emc.mutation.AgeCriteria(); ok {
		_spec.SetField(eligibilitymaster.FieldAgeCriteria, field.TypeInt32, value)
		_node.AgeCriteria = value
	}
	if value, ok := emc.mutation.ServiceCriteria(); ok {
		_spec.SetField(eligibilitymaster.FieldServiceCriteria, field.TypeInt32, value)
		_node.ServiceCriteria = value
	}
	if value, ok := emc.mutation.DrivingLicenseCriteria(); ok {
		_spec.SetField(eligibilitymaster.FieldDrivingLicenseCriteria, field.TypeBool, value)
		_node.DrivingLicenseCriteria = value
	}
	if value, ok := emc.mutation.ComputerKnowledge(); ok {
		_spec.SetField(eligibilitymaster.FieldComputerKnowledge, field.TypeBool, value)
		_node.ComputerKnowledge = value
	}
	if value, ok := emc.mutation.LevelOfPayMatrixEligibility(); ok {
		_spec.SetField(eligibilitymaster.FieldLevelOfPayMatrixEligibility, field.TypeBool, value)
		_node.LevelOfPayMatrixEligibility = value
	}
	if value, ok := emc.mutation.Education(); ok {
		_spec.SetField(eligibilitymaster.FieldEducation, field.TypeString, value)
		_node.Education = value
	}
	if value, ok := emc.mutation.NotifyCode(); ok {
		_spec.SetField(eligibilitymaster.FieldNotifyCode, field.TypeInt32, value)
		_node.NotifyCode = value
	}
	if value, ok := emc.mutation.CategoryCode(); ok {
		_spec.SetField(eligibilitymaster.FieldCategoryCode, field.TypeString, value)
		_node.CategoryCode = value
	}
	if value, ok := emc.mutation.PaperDescription(); ok {
		_spec.SetField(eligibilitymaster.FieldPaperDescription, field.TypeString, value)
		_node.PaperDescription = value
	}
	if value, ok := emc.mutation.MinimumMarks(); ok {
		_spec.SetField(eligibilitymaster.FieldMinimumMarks, field.TypeInt32, value)
		_node.MinimumMarks = value
	}
	if value, ok := emc.mutation.OrderNumber(); ok {
		_spec.SetField(eligibilitymaster.FieldOrderNumber, field.TypeString, value)
		_node.OrderNumber = value
	}
	if value, ok := emc.mutation.Status(); ok {
		_spec.SetField(eligibilitymaster.FieldStatus, field.TypeString, value)
		_node.Status = value
	}
	if value, ok := emc.mutation.CreatedById(); ok {
		_spec.SetField(eligibilitymaster.FieldCreatedById, field.TypeInt32, value)
		_node.CreatedById = value
	}
	if value, ok := emc.mutation.CreatedByUserName(); ok {
		_spec.SetField(eligibilitymaster.FieldCreatedByUserName, field.TypeString, value)
		_node.CreatedByUserName = value
	}
	if value, ok := emc.mutation.CreatedByEmployeeId(); ok {
		_spec.SetField(eligibilitymaster.FieldCreatedByEmployeeId, field.TypeString, value)
		_node.CreatedByEmployeeId = value
	}
	if value, ok := emc.mutation.CreatedByDesignation(); ok {
		_spec.SetField(eligibilitymaster.FieldCreatedByDesignation, field.TypeString, value)
		_node.CreatedByDesignation = value
	}
	if value, ok := emc.mutation.CreatedDate(); ok {
		_spec.SetField(eligibilitymaster.FieldCreatedDate, field.TypeTime, value)
		_node.CreatedDate = value
	}
	if value, ok := emc.mutation.VerifiedById(); ok {
		_spec.SetField(eligibilitymaster.FieldVerifiedById, field.TypeInt64, value)
		_node.VerifiedById = value
	}
	if value, ok := emc.mutation.VerifiedByUserName(); ok {
		_spec.SetField(eligibilitymaster.FieldVerifiedByUserName, field.TypeString, value)
		_node.VerifiedByUserName = value
	}
	if value, ok := emc.mutation.VerifiedByEmployeeId(); ok {
		_spec.SetField(eligibilitymaster.FieldVerifiedByEmployeeId, field.TypeString, value)
		_node.VerifiedByEmployeeId = value
	}
	if value, ok := emc.mutation.VerifiedByDesignation(); ok {
		_spec.SetField(eligibilitymaster.FieldVerifiedByDesignation, field.TypeString, value)
		_node.VerifiedByDesignation = value
	}
	if value, ok := emc.mutation.VerifiedDate(); ok {
		_spec.SetField(eligibilitymaster.FieldVerifiedDate, field.TypeTime, value)
		_node.VerifiedDate = value
	}
	if value, ok := emc.mutation.DeletedById(); ok {
		_spec.SetField(eligibilitymaster.FieldDeletedById, field.TypeInt64, value)
		_node.DeletedById = value
	}
	if value, ok := emc.mutation.DeletedByUserName(); ok {
		_spec.SetField(eligibilitymaster.FieldDeletedByUserName, field.TypeString, value)
		_node.DeletedByUserName = value
	}
	if value, ok := emc.mutation.DeletedByEmployeeId(); ok {
		_spec.SetField(eligibilitymaster.FieldDeletedByEmployeeId, field.TypeString, value)
		_node.DeletedByEmployeeId = value
	}
	if value, ok := emc.mutation.DeletedByDesignation(); ok {
		_spec.SetField(eligibilitymaster.FieldDeletedByDesignation, field.TypeString, value)
		_node.DeletedByDesignation = value
	}
	if value, ok := emc.mutation.DeletedDate(); ok {
		_spec.SetField(eligibilitymaster.FieldDeletedDate, field.TypeTime, value)
		_node.DeletedDate = value
	}
	if nodes := emc.mutation.NotificationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   eligibilitymaster.NotificationsTable,
			Columns: []string{eligibilitymaster.NotificationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notification.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := emc.mutation.CategoryEligibilityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   eligibilitymaster.CategoryEligibilityTable,
			Columns: []string{eligibilitymaster.CategoryEligibilityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employeecategory.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := emc.mutation.PostEligibilityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   eligibilitymaster.PostEligibilityTable,
			Columns: []string{eligibilitymaster.PostEligibilityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employeeposts.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := emc.mutation.ExamPaperEligibilityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   eligibilitymaster.ExamPaperEligibilityTable,
			Columns: []string{eligibilitymaster.ExamPaperEligibilityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exampapers.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.PaperCode = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := emc.mutation.ExamEligibilityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   eligibilitymaster.ExamEligibilityTable,
			Columns: []string{eligibilitymaster.ExamEligibilityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ExamCode = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// EligibilityMasterCreateBulk is the builder for creating many EligibilityMaster entities in bulk.
type EligibilityMasterCreateBulk struct {
	config
	builders []*EligibilityMasterCreate
}

// Save creates the EligibilityMaster entities in the database.
func (emcb *EligibilityMasterCreateBulk) Save(ctx context.Context) ([]*EligibilityMaster, error) {
	specs := make([]*sqlgraph.CreateSpec, len(emcb.builders))
	nodes := make([]*EligibilityMaster, len(emcb.builders))
	mutators := make([]Mutator, len(emcb.builders))
	for i := range emcb.builders {
		func(i int, root context.Context) {
			builder := emcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*EligibilityMasterMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, emcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, emcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, emcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (emcb *EligibilityMasterCreateBulk) SaveX(ctx context.Context) []*EligibilityMaster {
	v, err := emcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (emcb *EligibilityMasterCreateBulk) Exec(ctx context.Context) error {
	_, err := emcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (emcb *EligibilityMasterCreateBulk) ExecX(ctx context.Context) {
	if err := emcb.Exec(ctx); err != nil {
		panic(err)
	}
}
