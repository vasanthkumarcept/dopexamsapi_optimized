// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"recruit/ent/exampapers"
	"recruit/ent/papertypes"
	"recruit/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PaperTypesUpdate is the builder for updating PaperTypes entities.
type PaperTypesUpdate struct {
	config
	hooks    []Hook
	mutation *PaperTypesMutation
}

// Where appends a list predicates to the PaperTypesUpdate builder.
func (ptu *PaperTypesUpdate) Where(ps ...predicate.PaperTypes) *PaperTypesUpdate {
	ptu.mutation.Where(ps...)
	return ptu
}

// SetPaperTypeDescription sets the "PaperTypeDescription" field.
func (ptu *PaperTypesUpdate) SetPaperTypeDescription(s string) *PaperTypesUpdate {
	ptu.mutation.SetPaperTypeDescription(s)
	return ptu
}

// SetSequenceNumber sets the "SequenceNumber" field.
func (ptu *PaperTypesUpdate) SetSequenceNumber(i int32) *PaperTypesUpdate {
	ptu.mutation.ResetSequenceNumber()
	ptu.mutation.SetSequenceNumber(i)
	return ptu
}

// SetNillableSequenceNumber sets the "SequenceNumber" field if the given value is not nil.
func (ptu *PaperTypesUpdate) SetNillableSequenceNumber(i *int32) *PaperTypesUpdate {
	if i != nil {
		ptu.SetSequenceNumber(*i)
	}
	return ptu
}

// AddSequenceNumber adds i to the "SequenceNumber" field.
func (ptu *PaperTypesUpdate) AddSequenceNumber(i int32) *PaperTypesUpdate {
	ptu.mutation.AddSequenceNumber(i)
	return ptu
}

// ClearSequenceNumber clears the value of the "SequenceNumber" field.
func (ptu *PaperTypesUpdate) ClearSequenceNumber() *PaperTypesUpdate {
	ptu.mutation.ClearSequenceNumber()
	return ptu
}

// SetOrderNumber sets the "OrderNumber" field.
func (ptu *PaperTypesUpdate) SetOrderNumber(s string) *PaperTypesUpdate {
	ptu.mutation.SetOrderNumber(s)
	return ptu
}

// SetNillableOrderNumber sets the "OrderNumber" field if the given value is not nil.
func (ptu *PaperTypesUpdate) SetNillableOrderNumber(s *string) *PaperTypesUpdate {
	if s != nil {
		ptu.SetOrderNumber(*s)
	}
	return ptu
}

// ClearOrderNumber clears the value of the "OrderNumber" field.
func (ptu *PaperTypesUpdate) ClearOrderNumber() *PaperTypesUpdate {
	ptu.mutation.ClearOrderNumber()
	return ptu
}

// SetCreatedById sets the "CreatedById" field.
func (ptu *PaperTypesUpdate) SetCreatedById(i int64) *PaperTypesUpdate {
	ptu.mutation.ResetCreatedById()
	ptu.mutation.SetCreatedById(i)
	return ptu
}

// SetNillableCreatedById sets the "CreatedById" field if the given value is not nil.
func (ptu *PaperTypesUpdate) SetNillableCreatedById(i *int64) *PaperTypesUpdate {
	if i != nil {
		ptu.SetCreatedById(*i)
	}
	return ptu
}

// AddCreatedById adds i to the "CreatedById" field.
func (ptu *PaperTypesUpdate) AddCreatedById(i int64) *PaperTypesUpdate {
	ptu.mutation.AddCreatedById(i)
	return ptu
}

// ClearCreatedById clears the value of the "CreatedById" field.
func (ptu *PaperTypesUpdate) ClearCreatedById() *PaperTypesUpdate {
	ptu.mutation.ClearCreatedById()
	return ptu
}

// SetCreatedByUserName sets the "CreatedByUserName" field.
func (ptu *PaperTypesUpdate) SetCreatedByUserName(s string) *PaperTypesUpdate {
	ptu.mutation.SetCreatedByUserName(s)
	return ptu
}

// SetNillableCreatedByUserName sets the "CreatedByUserName" field if the given value is not nil.
func (ptu *PaperTypesUpdate) SetNillableCreatedByUserName(s *string) *PaperTypesUpdate {
	if s != nil {
		ptu.SetCreatedByUserName(*s)
	}
	return ptu
}

// ClearCreatedByUserName clears the value of the "CreatedByUserName" field.
func (ptu *PaperTypesUpdate) ClearCreatedByUserName() *PaperTypesUpdate {
	ptu.mutation.ClearCreatedByUserName()
	return ptu
}

// SetCreatedByEmployeeId sets the "CreatedByEmployeeId" field.
func (ptu *PaperTypesUpdate) SetCreatedByEmployeeId(s string) *PaperTypesUpdate {
	ptu.mutation.SetCreatedByEmployeeId(s)
	return ptu
}

// SetNillableCreatedByEmployeeId sets the "CreatedByEmployeeId" field if the given value is not nil.
func (ptu *PaperTypesUpdate) SetNillableCreatedByEmployeeId(s *string) *PaperTypesUpdate {
	if s != nil {
		ptu.SetCreatedByEmployeeId(*s)
	}
	return ptu
}

// ClearCreatedByEmployeeId clears the value of the "CreatedByEmployeeId" field.
func (ptu *PaperTypesUpdate) ClearCreatedByEmployeeId() *PaperTypesUpdate {
	ptu.mutation.ClearCreatedByEmployeeId()
	return ptu
}

// SetCreatedByDesignation sets the "CreatedByDesignation" field.
func (ptu *PaperTypesUpdate) SetCreatedByDesignation(s string) *PaperTypesUpdate {
	ptu.mutation.SetCreatedByDesignation(s)
	return ptu
}

// SetNillableCreatedByDesignation sets the "CreatedByDesignation" field if the given value is not nil.
func (ptu *PaperTypesUpdate) SetNillableCreatedByDesignation(s *string) *PaperTypesUpdate {
	if s != nil {
		ptu.SetCreatedByDesignation(*s)
	}
	return ptu
}

// ClearCreatedByDesignation clears the value of the "CreatedByDesignation" field.
func (ptu *PaperTypesUpdate) ClearCreatedByDesignation() *PaperTypesUpdate {
	ptu.mutation.ClearCreatedByDesignation()
	return ptu
}

// SetCreatedDate sets the "CreatedDate" field.
func (ptu *PaperTypesUpdate) SetCreatedDate(t time.Time) *PaperTypesUpdate {
	ptu.mutation.SetCreatedDate(t)
	return ptu
}

// SetNillableCreatedDate sets the "CreatedDate" field if the given value is not nil.
func (ptu *PaperTypesUpdate) SetNillableCreatedDate(t *time.Time) *PaperTypesUpdate {
	if t != nil {
		ptu.SetCreatedDate(*t)
	}
	return ptu
}

// ClearCreatedDate clears the value of the "CreatedDate" field.
func (ptu *PaperTypesUpdate) ClearCreatedDate() *PaperTypesUpdate {
	ptu.mutation.ClearCreatedDate()
	return ptu
}

// SetVerifiedById sets the "VerifiedById" field.
func (ptu *PaperTypesUpdate) SetVerifiedById(i int64) *PaperTypesUpdate {
	ptu.mutation.ResetVerifiedById()
	ptu.mutation.SetVerifiedById(i)
	return ptu
}

// SetNillableVerifiedById sets the "VerifiedById" field if the given value is not nil.
func (ptu *PaperTypesUpdate) SetNillableVerifiedById(i *int64) *PaperTypesUpdate {
	if i != nil {
		ptu.SetVerifiedById(*i)
	}
	return ptu
}

// AddVerifiedById adds i to the "VerifiedById" field.
func (ptu *PaperTypesUpdate) AddVerifiedById(i int64) *PaperTypesUpdate {
	ptu.mutation.AddVerifiedById(i)
	return ptu
}

// ClearVerifiedById clears the value of the "VerifiedById" field.
func (ptu *PaperTypesUpdate) ClearVerifiedById() *PaperTypesUpdate {
	ptu.mutation.ClearVerifiedById()
	return ptu
}

// SetVerifiedByUserName sets the "VerifiedByUserName" field.
func (ptu *PaperTypesUpdate) SetVerifiedByUserName(s string) *PaperTypesUpdate {
	ptu.mutation.SetVerifiedByUserName(s)
	return ptu
}

// SetNillableVerifiedByUserName sets the "VerifiedByUserName" field if the given value is not nil.
func (ptu *PaperTypesUpdate) SetNillableVerifiedByUserName(s *string) *PaperTypesUpdate {
	if s != nil {
		ptu.SetVerifiedByUserName(*s)
	}
	return ptu
}

// ClearVerifiedByUserName clears the value of the "VerifiedByUserName" field.
func (ptu *PaperTypesUpdate) ClearVerifiedByUserName() *PaperTypesUpdate {
	ptu.mutation.ClearVerifiedByUserName()
	return ptu
}

// SetVerifiedByEmployeeId sets the "VerifiedByEmployeeId" field.
func (ptu *PaperTypesUpdate) SetVerifiedByEmployeeId(s string) *PaperTypesUpdate {
	ptu.mutation.SetVerifiedByEmployeeId(s)
	return ptu
}

// SetNillableVerifiedByEmployeeId sets the "VerifiedByEmployeeId" field if the given value is not nil.
func (ptu *PaperTypesUpdate) SetNillableVerifiedByEmployeeId(s *string) *PaperTypesUpdate {
	if s != nil {
		ptu.SetVerifiedByEmployeeId(*s)
	}
	return ptu
}

// ClearVerifiedByEmployeeId clears the value of the "VerifiedByEmployeeId" field.
func (ptu *PaperTypesUpdate) ClearVerifiedByEmployeeId() *PaperTypesUpdate {
	ptu.mutation.ClearVerifiedByEmployeeId()
	return ptu
}

// SetVerifiedByDesignation sets the "VerifiedByDesignation" field.
func (ptu *PaperTypesUpdate) SetVerifiedByDesignation(s string) *PaperTypesUpdate {
	ptu.mutation.SetVerifiedByDesignation(s)
	return ptu
}

// SetNillableVerifiedByDesignation sets the "VerifiedByDesignation" field if the given value is not nil.
func (ptu *PaperTypesUpdate) SetNillableVerifiedByDesignation(s *string) *PaperTypesUpdate {
	if s != nil {
		ptu.SetVerifiedByDesignation(*s)
	}
	return ptu
}

// ClearVerifiedByDesignation clears the value of the "VerifiedByDesignation" field.
func (ptu *PaperTypesUpdate) ClearVerifiedByDesignation() *PaperTypesUpdate {
	ptu.mutation.ClearVerifiedByDesignation()
	return ptu
}

// SetVerifiedDate sets the "VerifiedDate" field.
func (ptu *PaperTypesUpdate) SetVerifiedDate(t time.Time) *PaperTypesUpdate {
	ptu.mutation.SetVerifiedDate(t)
	return ptu
}

// SetNillableVerifiedDate sets the "VerifiedDate" field if the given value is not nil.
func (ptu *PaperTypesUpdate) SetNillableVerifiedDate(t *time.Time) *PaperTypesUpdate {
	if t != nil {
		ptu.SetVerifiedDate(*t)
	}
	return ptu
}

// ClearVerifiedDate clears the value of the "VerifiedDate" field.
func (ptu *PaperTypesUpdate) ClearVerifiedDate() *PaperTypesUpdate {
	ptu.mutation.ClearVerifiedDate()
	return ptu
}

// SetStatus sets the "Status" field.
func (ptu *PaperTypesUpdate) SetStatus(s string) *PaperTypesUpdate {
	ptu.mutation.SetStatus(s)
	return ptu
}

// SetDeletedById sets the "DeletedById" field.
func (ptu *PaperTypesUpdate) SetDeletedById(i int64) *PaperTypesUpdate {
	ptu.mutation.ResetDeletedById()
	ptu.mutation.SetDeletedById(i)
	return ptu
}

// SetNillableDeletedById sets the "DeletedById" field if the given value is not nil.
func (ptu *PaperTypesUpdate) SetNillableDeletedById(i *int64) *PaperTypesUpdate {
	if i != nil {
		ptu.SetDeletedById(*i)
	}
	return ptu
}

// AddDeletedById adds i to the "DeletedById" field.
func (ptu *PaperTypesUpdate) AddDeletedById(i int64) *PaperTypesUpdate {
	ptu.mutation.AddDeletedById(i)
	return ptu
}

// ClearDeletedById clears the value of the "DeletedById" field.
func (ptu *PaperTypesUpdate) ClearDeletedById() *PaperTypesUpdate {
	ptu.mutation.ClearDeletedById()
	return ptu
}

// SetDeletedByUserName sets the "DeletedByUserName" field.
func (ptu *PaperTypesUpdate) SetDeletedByUserName(s string) *PaperTypesUpdate {
	ptu.mutation.SetDeletedByUserName(s)
	return ptu
}

// SetNillableDeletedByUserName sets the "DeletedByUserName" field if the given value is not nil.
func (ptu *PaperTypesUpdate) SetNillableDeletedByUserName(s *string) *PaperTypesUpdate {
	if s != nil {
		ptu.SetDeletedByUserName(*s)
	}
	return ptu
}

// ClearDeletedByUserName clears the value of the "DeletedByUserName" field.
func (ptu *PaperTypesUpdate) ClearDeletedByUserName() *PaperTypesUpdate {
	ptu.mutation.ClearDeletedByUserName()
	return ptu
}

// SetDeletedByEmployeeId sets the "DeletedByEmployeeId" field.
func (ptu *PaperTypesUpdate) SetDeletedByEmployeeId(s string) *PaperTypesUpdate {
	ptu.mutation.SetDeletedByEmployeeId(s)
	return ptu
}

// SetNillableDeletedByEmployeeId sets the "DeletedByEmployeeId" field if the given value is not nil.
func (ptu *PaperTypesUpdate) SetNillableDeletedByEmployeeId(s *string) *PaperTypesUpdate {
	if s != nil {
		ptu.SetDeletedByEmployeeId(*s)
	}
	return ptu
}

// ClearDeletedByEmployeeId clears the value of the "DeletedByEmployeeId" field.
func (ptu *PaperTypesUpdate) ClearDeletedByEmployeeId() *PaperTypesUpdate {
	ptu.mutation.ClearDeletedByEmployeeId()
	return ptu
}

// SetDeletedByDesignation sets the "DeletedByDesignation" field.
func (ptu *PaperTypesUpdate) SetDeletedByDesignation(s string) *PaperTypesUpdate {
	ptu.mutation.SetDeletedByDesignation(s)
	return ptu
}

// SetNillableDeletedByDesignation sets the "DeletedByDesignation" field if the given value is not nil.
func (ptu *PaperTypesUpdate) SetNillableDeletedByDesignation(s *string) *PaperTypesUpdate {
	if s != nil {
		ptu.SetDeletedByDesignation(*s)
	}
	return ptu
}

// ClearDeletedByDesignation clears the value of the "DeletedByDesignation" field.
func (ptu *PaperTypesUpdate) ClearDeletedByDesignation() *PaperTypesUpdate {
	ptu.mutation.ClearDeletedByDesignation()
	return ptu
}

// SetDeletedDate sets the "DeletedDate" field.
func (ptu *PaperTypesUpdate) SetDeletedDate(t time.Time) *PaperTypesUpdate {
	ptu.mutation.SetDeletedDate(t)
	return ptu
}

// SetNillableDeletedDate sets the "DeletedDate" field if the given value is not nil.
func (ptu *PaperTypesUpdate) SetNillableDeletedDate(t *time.Time) *PaperTypesUpdate {
	if t != nil {
		ptu.SetDeletedDate(*t)
	}
	return ptu
}

// ClearDeletedDate clears the value of the "DeletedDate" field.
func (ptu *PaperTypesUpdate) ClearDeletedDate() *PaperTypesUpdate {
	ptu.mutation.ClearDeletedDate()
	return ptu
}

// SetPaperCode sets the "PaperCode" field.
func (ptu *PaperTypesUpdate) SetPaperCode(i int32) *PaperTypesUpdate {
	ptu.mutation.SetPaperCode(i)
	return ptu
}

// SetNillablePaperCode sets the "PaperCode" field if the given value is not nil.
func (ptu *PaperTypesUpdate) SetNillablePaperCode(i *int32) *PaperTypesUpdate {
	if i != nil {
		ptu.SetPaperCode(*i)
	}
	return ptu
}

// ClearPaperCode clears the value of the "PaperCode" field.
func (ptu *PaperTypesUpdate) ClearPaperCode() *PaperTypesUpdate {
	ptu.mutation.ClearPaperCode()
	return ptu
}

// SetPapercodeID sets the "papercode" edge to the ExamPapers entity by ID.
func (ptu *PaperTypesUpdate) SetPapercodeID(id int32) *PaperTypesUpdate {
	ptu.mutation.SetPapercodeID(id)
	return ptu
}

// SetNillablePapercodeID sets the "papercode" edge to the ExamPapers entity by ID if the given value is not nil.
func (ptu *PaperTypesUpdate) SetNillablePapercodeID(id *int32) *PaperTypesUpdate {
	if id != nil {
		ptu = ptu.SetPapercodeID(*id)
	}
	return ptu
}

// SetPapercode sets the "papercode" edge to the ExamPapers entity.
func (ptu *PaperTypesUpdate) SetPapercode(e *ExamPapers) *PaperTypesUpdate {
	return ptu.SetPapercodeID(e.ID)
}

// Mutation returns the PaperTypesMutation object of the builder.
func (ptu *PaperTypesUpdate) Mutation() *PaperTypesMutation {
	return ptu.mutation
}

// ClearPapercode clears the "papercode" edge to the ExamPapers entity.
func (ptu *PaperTypesUpdate) ClearPapercode() *PaperTypesUpdate {
	ptu.mutation.ClearPapercode()
	return ptu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ptu *PaperTypesUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ptu.sqlSave, ptu.mutation, ptu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ptu *PaperTypesUpdate) SaveX(ctx context.Context) int {
	affected, err := ptu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ptu *PaperTypesUpdate) Exec(ctx context.Context) error {
	_, err := ptu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ptu *PaperTypesUpdate) ExecX(ctx context.Context) {
	if err := ptu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ptu *PaperTypesUpdate) check() error {
	if v, ok := ptu.mutation.PaperTypeDescription(); ok {
		if err := papertypes.PaperTypeDescriptionValidator(v); err != nil {
			return &ValidationError{Name: "PaperTypeDescription", err: fmt.Errorf(`ent: validator failed for field "PaperTypes.PaperTypeDescription": %w`, err)}
		}
	}
	return nil
}

func (ptu *PaperTypesUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ptu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(papertypes.Table, papertypes.Columns, sqlgraph.NewFieldSpec(papertypes.FieldID, field.TypeInt32))
	if ps := ptu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ptu.mutation.PaperTypeDescription(); ok {
		_spec.SetField(papertypes.FieldPaperTypeDescription, field.TypeString, value)
	}
	if value, ok := ptu.mutation.SequenceNumber(); ok {
		_spec.SetField(papertypes.FieldSequenceNumber, field.TypeInt32, value)
	}
	if value, ok := ptu.mutation.AddedSequenceNumber(); ok {
		_spec.AddField(papertypes.FieldSequenceNumber, field.TypeInt32, value)
	}
	if ptu.mutation.SequenceNumberCleared() {
		_spec.ClearField(papertypes.FieldSequenceNumber, field.TypeInt32)
	}
	if value, ok := ptu.mutation.OrderNumber(); ok {
		_spec.SetField(papertypes.FieldOrderNumber, field.TypeString, value)
	}
	if ptu.mutation.OrderNumberCleared() {
		_spec.ClearField(papertypes.FieldOrderNumber, field.TypeString)
	}
	if value, ok := ptu.mutation.CreatedById(); ok {
		_spec.SetField(papertypes.FieldCreatedById, field.TypeInt64, value)
	}
	if value, ok := ptu.mutation.AddedCreatedById(); ok {
		_spec.AddField(papertypes.FieldCreatedById, field.TypeInt64, value)
	}
	if ptu.mutation.CreatedByIdCleared() {
		_spec.ClearField(papertypes.FieldCreatedById, field.TypeInt64)
	}
	if value, ok := ptu.mutation.CreatedByUserName(); ok {
		_spec.SetField(papertypes.FieldCreatedByUserName, field.TypeString, value)
	}
	if ptu.mutation.CreatedByUserNameCleared() {
		_spec.ClearField(papertypes.FieldCreatedByUserName, field.TypeString)
	}
	if value, ok := ptu.mutation.CreatedByEmployeeId(); ok {
		_spec.SetField(papertypes.FieldCreatedByEmployeeId, field.TypeString, value)
	}
	if ptu.mutation.CreatedByEmployeeIdCleared() {
		_spec.ClearField(papertypes.FieldCreatedByEmployeeId, field.TypeString)
	}
	if value, ok := ptu.mutation.CreatedByDesignation(); ok {
		_spec.SetField(papertypes.FieldCreatedByDesignation, field.TypeString, value)
	}
	if ptu.mutation.CreatedByDesignationCleared() {
		_spec.ClearField(papertypes.FieldCreatedByDesignation, field.TypeString)
	}
	if value, ok := ptu.mutation.CreatedDate(); ok {
		_spec.SetField(papertypes.FieldCreatedDate, field.TypeTime, value)
	}
	if ptu.mutation.CreatedDateCleared() {
		_spec.ClearField(papertypes.FieldCreatedDate, field.TypeTime)
	}
	if value, ok := ptu.mutation.VerifiedById(); ok {
		_spec.SetField(papertypes.FieldVerifiedById, field.TypeInt64, value)
	}
	if value, ok := ptu.mutation.AddedVerifiedById(); ok {
		_spec.AddField(papertypes.FieldVerifiedById, field.TypeInt64, value)
	}
	if ptu.mutation.VerifiedByIdCleared() {
		_spec.ClearField(papertypes.FieldVerifiedById, field.TypeInt64)
	}
	if value, ok := ptu.mutation.VerifiedByUserName(); ok {
		_spec.SetField(papertypes.FieldVerifiedByUserName, field.TypeString, value)
	}
	if ptu.mutation.VerifiedByUserNameCleared() {
		_spec.ClearField(papertypes.FieldVerifiedByUserName, field.TypeString)
	}
	if value, ok := ptu.mutation.VerifiedByEmployeeId(); ok {
		_spec.SetField(papertypes.FieldVerifiedByEmployeeId, field.TypeString, value)
	}
	if ptu.mutation.VerifiedByEmployeeIdCleared() {
		_spec.ClearField(papertypes.FieldVerifiedByEmployeeId, field.TypeString)
	}
	if value, ok := ptu.mutation.VerifiedByDesignation(); ok {
		_spec.SetField(papertypes.FieldVerifiedByDesignation, field.TypeString, value)
	}
	if ptu.mutation.VerifiedByDesignationCleared() {
		_spec.ClearField(papertypes.FieldVerifiedByDesignation, field.TypeString)
	}
	if value, ok := ptu.mutation.VerifiedDate(); ok {
		_spec.SetField(papertypes.FieldVerifiedDate, field.TypeTime, value)
	}
	if ptu.mutation.VerifiedDateCleared() {
		_spec.ClearField(papertypes.FieldVerifiedDate, field.TypeTime)
	}
	if value, ok := ptu.mutation.Status(); ok {
		_spec.SetField(papertypes.FieldStatus, field.TypeString, value)
	}
	if value, ok := ptu.mutation.DeletedById(); ok {
		_spec.SetField(papertypes.FieldDeletedById, field.TypeInt64, value)
	}
	if value, ok := ptu.mutation.AddedDeletedById(); ok {
		_spec.AddField(papertypes.FieldDeletedById, field.TypeInt64, value)
	}
	if ptu.mutation.DeletedByIdCleared() {
		_spec.ClearField(papertypes.FieldDeletedById, field.TypeInt64)
	}
	if value, ok := ptu.mutation.DeletedByUserName(); ok {
		_spec.SetField(papertypes.FieldDeletedByUserName, field.TypeString, value)
	}
	if ptu.mutation.DeletedByUserNameCleared() {
		_spec.ClearField(papertypes.FieldDeletedByUserName, field.TypeString)
	}
	if value, ok := ptu.mutation.DeletedByEmployeeId(); ok {
		_spec.SetField(papertypes.FieldDeletedByEmployeeId, field.TypeString, value)
	}
	if ptu.mutation.DeletedByEmployeeIdCleared() {
		_spec.ClearField(papertypes.FieldDeletedByEmployeeId, field.TypeString)
	}
	if value, ok := ptu.mutation.DeletedByDesignation(); ok {
		_spec.SetField(papertypes.FieldDeletedByDesignation, field.TypeString, value)
	}
	if ptu.mutation.DeletedByDesignationCleared() {
		_spec.ClearField(papertypes.FieldDeletedByDesignation, field.TypeString)
	}
	if value, ok := ptu.mutation.DeletedDate(); ok {
		_spec.SetField(papertypes.FieldDeletedDate, field.TypeTime, value)
	}
	if ptu.mutation.DeletedDateCleared() {
		_spec.ClearField(papertypes.FieldDeletedDate, field.TypeTime)
	}
	if ptu.mutation.PapercodeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   papertypes.PapercodeTable,
			Columns: []string{papertypes.PapercodeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exampapers.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ptu.mutation.PapercodeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   papertypes.PapercodeTable,
			Columns: []string{papertypes.PapercodeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exampapers.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ptu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{papertypes.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ptu.mutation.done = true
	return n, nil
}

// PaperTypesUpdateOne is the builder for updating a single PaperTypes entity.
type PaperTypesUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PaperTypesMutation
}

// SetPaperTypeDescription sets the "PaperTypeDescription" field.
func (ptuo *PaperTypesUpdateOne) SetPaperTypeDescription(s string) *PaperTypesUpdateOne {
	ptuo.mutation.SetPaperTypeDescription(s)
	return ptuo
}

// SetSequenceNumber sets the "SequenceNumber" field.
func (ptuo *PaperTypesUpdateOne) SetSequenceNumber(i int32) *PaperTypesUpdateOne {
	ptuo.mutation.ResetSequenceNumber()
	ptuo.mutation.SetSequenceNumber(i)
	return ptuo
}

// SetNillableSequenceNumber sets the "SequenceNumber" field if the given value is not nil.
func (ptuo *PaperTypesUpdateOne) SetNillableSequenceNumber(i *int32) *PaperTypesUpdateOne {
	if i != nil {
		ptuo.SetSequenceNumber(*i)
	}
	return ptuo
}

// AddSequenceNumber adds i to the "SequenceNumber" field.
func (ptuo *PaperTypesUpdateOne) AddSequenceNumber(i int32) *PaperTypesUpdateOne {
	ptuo.mutation.AddSequenceNumber(i)
	return ptuo
}

// ClearSequenceNumber clears the value of the "SequenceNumber" field.
func (ptuo *PaperTypesUpdateOne) ClearSequenceNumber() *PaperTypesUpdateOne {
	ptuo.mutation.ClearSequenceNumber()
	return ptuo
}

// SetOrderNumber sets the "OrderNumber" field.
func (ptuo *PaperTypesUpdateOne) SetOrderNumber(s string) *PaperTypesUpdateOne {
	ptuo.mutation.SetOrderNumber(s)
	return ptuo
}

// SetNillableOrderNumber sets the "OrderNumber" field if the given value is not nil.
func (ptuo *PaperTypesUpdateOne) SetNillableOrderNumber(s *string) *PaperTypesUpdateOne {
	if s != nil {
		ptuo.SetOrderNumber(*s)
	}
	return ptuo
}

// ClearOrderNumber clears the value of the "OrderNumber" field.
func (ptuo *PaperTypesUpdateOne) ClearOrderNumber() *PaperTypesUpdateOne {
	ptuo.mutation.ClearOrderNumber()
	return ptuo
}

// SetCreatedById sets the "CreatedById" field.
func (ptuo *PaperTypesUpdateOne) SetCreatedById(i int64) *PaperTypesUpdateOne {
	ptuo.mutation.ResetCreatedById()
	ptuo.mutation.SetCreatedById(i)
	return ptuo
}

// SetNillableCreatedById sets the "CreatedById" field if the given value is not nil.
func (ptuo *PaperTypesUpdateOne) SetNillableCreatedById(i *int64) *PaperTypesUpdateOne {
	if i != nil {
		ptuo.SetCreatedById(*i)
	}
	return ptuo
}

// AddCreatedById adds i to the "CreatedById" field.
func (ptuo *PaperTypesUpdateOne) AddCreatedById(i int64) *PaperTypesUpdateOne {
	ptuo.mutation.AddCreatedById(i)
	return ptuo
}

// ClearCreatedById clears the value of the "CreatedById" field.
func (ptuo *PaperTypesUpdateOne) ClearCreatedById() *PaperTypesUpdateOne {
	ptuo.mutation.ClearCreatedById()
	return ptuo
}

// SetCreatedByUserName sets the "CreatedByUserName" field.
func (ptuo *PaperTypesUpdateOne) SetCreatedByUserName(s string) *PaperTypesUpdateOne {
	ptuo.mutation.SetCreatedByUserName(s)
	return ptuo
}

// SetNillableCreatedByUserName sets the "CreatedByUserName" field if the given value is not nil.
func (ptuo *PaperTypesUpdateOne) SetNillableCreatedByUserName(s *string) *PaperTypesUpdateOne {
	if s != nil {
		ptuo.SetCreatedByUserName(*s)
	}
	return ptuo
}

// ClearCreatedByUserName clears the value of the "CreatedByUserName" field.
func (ptuo *PaperTypesUpdateOne) ClearCreatedByUserName() *PaperTypesUpdateOne {
	ptuo.mutation.ClearCreatedByUserName()
	return ptuo
}

// SetCreatedByEmployeeId sets the "CreatedByEmployeeId" field.
func (ptuo *PaperTypesUpdateOne) SetCreatedByEmployeeId(s string) *PaperTypesUpdateOne {
	ptuo.mutation.SetCreatedByEmployeeId(s)
	return ptuo
}

// SetNillableCreatedByEmployeeId sets the "CreatedByEmployeeId" field if the given value is not nil.
func (ptuo *PaperTypesUpdateOne) SetNillableCreatedByEmployeeId(s *string) *PaperTypesUpdateOne {
	if s != nil {
		ptuo.SetCreatedByEmployeeId(*s)
	}
	return ptuo
}

// ClearCreatedByEmployeeId clears the value of the "CreatedByEmployeeId" field.
func (ptuo *PaperTypesUpdateOne) ClearCreatedByEmployeeId() *PaperTypesUpdateOne {
	ptuo.mutation.ClearCreatedByEmployeeId()
	return ptuo
}

// SetCreatedByDesignation sets the "CreatedByDesignation" field.
func (ptuo *PaperTypesUpdateOne) SetCreatedByDesignation(s string) *PaperTypesUpdateOne {
	ptuo.mutation.SetCreatedByDesignation(s)
	return ptuo
}

// SetNillableCreatedByDesignation sets the "CreatedByDesignation" field if the given value is not nil.
func (ptuo *PaperTypesUpdateOne) SetNillableCreatedByDesignation(s *string) *PaperTypesUpdateOne {
	if s != nil {
		ptuo.SetCreatedByDesignation(*s)
	}
	return ptuo
}

// ClearCreatedByDesignation clears the value of the "CreatedByDesignation" field.
func (ptuo *PaperTypesUpdateOne) ClearCreatedByDesignation() *PaperTypesUpdateOne {
	ptuo.mutation.ClearCreatedByDesignation()
	return ptuo
}

// SetCreatedDate sets the "CreatedDate" field.
func (ptuo *PaperTypesUpdateOne) SetCreatedDate(t time.Time) *PaperTypesUpdateOne {
	ptuo.mutation.SetCreatedDate(t)
	return ptuo
}

// SetNillableCreatedDate sets the "CreatedDate" field if the given value is not nil.
func (ptuo *PaperTypesUpdateOne) SetNillableCreatedDate(t *time.Time) *PaperTypesUpdateOne {
	if t != nil {
		ptuo.SetCreatedDate(*t)
	}
	return ptuo
}

// ClearCreatedDate clears the value of the "CreatedDate" field.
func (ptuo *PaperTypesUpdateOne) ClearCreatedDate() *PaperTypesUpdateOne {
	ptuo.mutation.ClearCreatedDate()
	return ptuo
}

// SetVerifiedById sets the "VerifiedById" field.
func (ptuo *PaperTypesUpdateOne) SetVerifiedById(i int64) *PaperTypesUpdateOne {
	ptuo.mutation.ResetVerifiedById()
	ptuo.mutation.SetVerifiedById(i)
	return ptuo
}

// SetNillableVerifiedById sets the "VerifiedById" field if the given value is not nil.
func (ptuo *PaperTypesUpdateOne) SetNillableVerifiedById(i *int64) *PaperTypesUpdateOne {
	if i != nil {
		ptuo.SetVerifiedById(*i)
	}
	return ptuo
}

// AddVerifiedById adds i to the "VerifiedById" field.
func (ptuo *PaperTypesUpdateOne) AddVerifiedById(i int64) *PaperTypesUpdateOne {
	ptuo.mutation.AddVerifiedById(i)
	return ptuo
}

// ClearVerifiedById clears the value of the "VerifiedById" field.
func (ptuo *PaperTypesUpdateOne) ClearVerifiedById() *PaperTypesUpdateOne {
	ptuo.mutation.ClearVerifiedById()
	return ptuo
}

// SetVerifiedByUserName sets the "VerifiedByUserName" field.
func (ptuo *PaperTypesUpdateOne) SetVerifiedByUserName(s string) *PaperTypesUpdateOne {
	ptuo.mutation.SetVerifiedByUserName(s)
	return ptuo
}

// SetNillableVerifiedByUserName sets the "VerifiedByUserName" field if the given value is not nil.
func (ptuo *PaperTypesUpdateOne) SetNillableVerifiedByUserName(s *string) *PaperTypesUpdateOne {
	if s != nil {
		ptuo.SetVerifiedByUserName(*s)
	}
	return ptuo
}

// ClearVerifiedByUserName clears the value of the "VerifiedByUserName" field.
func (ptuo *PaperTypesUpdateOne) ClearVerifiedByUserName() *PaperTypesUpdateOne {
	ptuo.mutation.ClearVerifiedByUserName()
	return ptuo
}

// SetVerifiedByEmployeeId sets the "VerifiedByEmployeeId" field.
func (ptuo *PaperTypesUpdateOne) SetVerifiedByEmployeeId(s string) *PaperTypesUpdateOne {
	ptuo.mutation.SetVerifiedByEmployeeId(s)
	return ptuo
}

// SetNillableVerifiedByEmployeeId sets the "VerifiedByEmployeeId" field if the given value is not nil.
func (ptuo *PaperTypesUpdateOne) SetNillableVerifiedByEmployeeId(s *string) *PaperTypesUpdateOne {
	if s != nil {
		ptuo.SetVerifiedByEmployeeId(*s)
	}
	return ptuo
}

// ClearVerifiedByEmployeeId clears the value of the "VerifiedByEmployeeId" field.
func (ptuo *PaperTypesUpdateOne) ClearVerifiedByEmployeeId() *PaperTypesUpdateOne {
	ptuo.mutation.ClearVerifiedByEmployeeId()
	return ptuo
}

// SetVerifiedByDesignation sets the "VerifiedByDesignation" field.
func (ptuo *PaperTypesUpdateOne) SetVerifiedByDesignation(s string) *PaperTypesUpdateOne {
	ptuo.mutation.SetVerifiedByDesignation(s)
	return ptuo
}

// SetNillableVerifiedByDesignation sets the "VerifiedByDesignation" field if the given value is not nil.
func (ptuo *PaperTypesUpdateOne) SetNillableVerifiedByDesignation(s *string) *PaperTypesUpdateOne {
	if s != nil {
		ptuo.SetVerifiedByDesignation(*s)
	}
	return ptuo
}

// ClearVerifiedByDesignation clears the value of the "VerifiedByDesignation" field.
func (ptuo *PaperTypesUpdateOne) ClearVerifiedByDesignation() *PaperTypesUpdateOne {
	ptuo.mutation.ClearVerifiedByDesignation()
	return ptuo
}

// SetVerifiedDate sets the "VerifiedDate" field.
func (ptuo *PaperTypesUpdateOne) SetVerifiedDate(t time.Time) *PaperTypesUpdateOne {
	ptuo.mutation.SetVerifiedDate(t)
	return ptuo
}

// SetNillableVerifiedDate sets the "VerifiedDate" field if the given value is not nil.
func (ptuo *PaperTypesUpdateOne) SetNillableVerifiedDate(t *time.Time) *PaperTypesUpdateOne {
	if t != nil {
		ptuo.SetVerifiedDate(*t)
	}
	return ptuo
}

// ClearVerifiedDate clears the value of the "VerifiedDate" field.
func (ptuo *PaperTypesUpdateOne) ClearVerifiedDate() *PaperTypesUpdateOne {
	ptuo.mutation.ClearVerifiedDate()
	return ptuo
}

// SetStatus sets the "Status" field.
func (ptuo *PaperTypesUpdateOne) SetStatus(s string) *PaperTypesUpdateOne {
	ptuo.mutation.SetStatus(s)
	return ptuo
}

// SetDeletedById sets the "DeletedById" field.
func (ptuo *PaperTypesUpdateOne) SetDeletedById(i int64) *PaperTypesUpdateOne {
	ptuo.mutation.ResetDeletedById()
	ptuo.mutation.SetDeletedById(i)
	return ptuo
}

// SetNillableDeletedById sets the "DeletedById" field if the given value is not nil.
func (ptuo *PaperTypesUpdateOne) SetNillableDeletedById(i *int64) *PaperTypesUpdateOne {
	if i != nil {
		ptuo.SetDeletedById(*i)
	}
	return ptuo
}

// AddDeletedById adds i to the "DeletedById" field.
func (ptuo *PaperTypesUpdateOne) AddDeletedById(i int64) *PaperTypesUpdateOne {
	ptuo.mutation.AddDeletedById(i)
	return ptuo
}

// ClearDeletedById clears the value of the "DeletedById" field.
func (ptuo *PaperTypesUpdateOne) ClearDeletedById() *PaperTypesUpdateOne {
	ptuo.mutation.ClearDeletedById()
	return ptuo
}

// SetDeletedByUserName sets the "DeletedByUserName" field.
func (ptuo *PaperTypesUpdateOne) SetDeletedByUserName(s string) *PaperTypesUpdateOne {
	ptuo.mutation.SetDeletedByUserName(s)
	return ptuo
}

// SetNillableDeletedByUserName sets the "DeletedByUserName" field if the given value is not nil.
func (ptuo *PaperTypesUpdateOne) SetNillableDeletedByUserName(s *string) *PaperTypesUpdateOne {
	if s != nil {
		ptuo.SetDeletedByUserName(*s)
	}
	return ptuo
}

// ClearDeletedByUserName clears the value of the "DeletedByUserName" field.
func (ptuo *PaperTypesUpdateOne) ClearDeletedByUserName() *PaperTypesUpdateOne {
	ptuo.mutation.ClearDeletedByUserName()
	return ptuo
}

// SetDeletedByEmployeeId sets the "DeletedByEmployeeId" field.
func (ptuo *PaperTypesUpdateOne) SetDeletedByEmployeeId(s string) *PaperTypesUpdateOne {
	ptuo.mutation.SetDeletedByEmployeeId(s)
	return ptuo
}

// SetNillableDeletedByEmployeeId sets the "DeletedByEmployeeId" field if the given value is not nil.
func (ptuo *PaperTypesUpdateOne) SetNillableDeletedByEmployeeId(s *string) *PaperTypesUpdateOne {
	if s != nil {
		ptuo.SetDeletedByEmployeeId(*s)
	}
	return ptuo
}

// ClearDeletedByEmployeeId clears the value of the "DeletedByEmployeeId" field.
func (ptuo *PaperTypesUpdateOne) ClearDeletedByEmployeeId() *PaperTypesUpdateOne {
	ptuo.mutation.ClearDeletedByEmployeeId()
	return ptuo
}

// SetDeletedByDesignation sets the "DeletedByDesignation" field.
func (ptuo *PaperTypesUpdateOne) SetDeletedByDesignation(s string) *PaperTypesUpdateOne {
	ptuo.mutation.SetDeletedByDesignation(s)
	return ptuo
}

// SetNillableDeletedByDesignation sets the "DeletedByDesignation" field if the given value is not nil.
func (ptuo *PaperTypesUpdateOne) SetNillableDeletedByDesignation(s *string) *PaperTypesUpdateOne {
	if s != nil {
		ptuo.SetDeletedByDesignation(*s)
	}
	return ptuo
}

// ClearDeletedByDesignation clears the value of the "DeletedByDesignation" field.
func (ptuo *PaperTypesUpdateOne) ClearDeletedByDesignation() *PaperTypesUpdateOne {
	ptuo.mutation.ClearDeletedByDesignation()
	return ptuo
}

// SetDeletedDate sets the "DeletedDate" field.
func (ptuo *PaperTypesUpdateOne) SetDeletedDate(t time.Time) *PaperTypesUpdateOne {
	ptuo.mutation.SetDeletedDate(t)
	return ptuo
}

// SetNillableDeletedDate sets the "DeletedDate" field if the given value is not nil.
func (ptuo *PaperTypesUpdateOne) SetNillableDeletedDate(t *time.Time) *PaperTypesUpdateOne {
	if t != nil {
		ptuo.SetDeletedDate(*t)
	}
	return ptuo
}

// ClearDeletedDate clears the value of the "DeletedDate" field.
func (ptuo *PaperTypesUpdateOne) ClearDeletedDate() *PaperTypesUpdateOne {
	ptuo.mutation.ClearDeletedDate()
	return ptuo
}

// SetPaperCode sets the "PaperCode" field.
func (ptuo *PaperTypesUpdateOne) SetPaperCode(i int32) *PaperTypesUpdateOne {
	ptuo.mutation.SetPaperCode(i)
	return ptuo
}

// SetNillablePaperCode sets the "PaperCode" field if the given value is not nil.
func (ptuo *PaperTypesUpdateOne) SetNillablePaperCode(i *int32) *PaperTypesUpdateOne {
	if i != nil {
		ptuo.SetPaperCode(*i)
	}
	return ptuo
}

// ClearPaperCode clears the value of the "PaperCode" field.
func (ptuo *PaperTypesUpdateOne) ClearPaperCode() *PaperTypesUpdateOne {
	ptuo.mutation.ClearPaperCode()
	return ptuo
}

// SetPapercodeID sets the "papercode" edge to the ExamPapers entity by ID.
func (ptuo *PaperTypesUpdateOne) SetPapercodeID(id int32) *PaperTypesUpdateOne {
	ptuo.mutation.SetPapercodeID(id)
	return ptuo
}

// SetNillablePapercodeID sets the "papercode" edge to the ExamPapers entity by ID if the given value is not nil.
func (ptuo *PaperTypesUpdateOne) SetNillablePapercodeID(id *int32) *PaperTypesUpdateOne {
	if id != nil {
		ptuo = ptuo.SetPapercodeID(*id)
	}
	return ptuo
}

// SetPapercode sets the "papercode" edge to the ExamPapers entity.
func (ptuo *PaperTypesUpdateOne) SetPapercode(e *ExamPapers) *PaperTypesUpdateOne {
	return ptuo.SetPapercodeID(e.ID)
}

// Mutation returns the PaperTypesMutation object of the builder.
func (ptuo *PaperTypesUpdateOne) Mutation() *PaperTypesMutation {
	return ptuo.mutation
}

// ClearPapercode clears the "papercode" edge to the ExamPapers entity.
func (ptuo *PaperTypesUpdateOne) ClearPapercode() *PaperTypesUpdateOne {
	ptuo.mutation.ClearPapercode()
	return ptuo
}

// Where appends a list predicates to the PaperTypesUpdate builder.
func (ptuo *PaperTypesUpdateOne) Where(ps ...predicate.PaperTypes) *PaperTypesUpdateOne {
	ptuo.mutation.Where(ps...)
	return ptuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ptuo *PaperTypesUpdateOne) Select(field string, fields ...string) *PaperTypesUpdateOne {
	ptuo.fields = append([]string{field}, fields...)
	return ptuo
}

// Save executes the query and returns the updated PaperTypes entity.
func (ptuo *PaperTypesUpdateOne) Save(ctx context.Context) (*PaperTypes, error) {
	return withHooks(ctx, ptuo.sqlSave, ptuo.mutation, ptuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ptuo *PaperTypesUpdateOne) SaveX(ctx context.Context) *PaperTypes {
	node, err := ptuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ptuo *PaperTypesUpdateOne) Exec(ctx context.Context) error {
	_, err := ptuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ptuo *PaperTypesUpdateOne) ExecX(ctx context.Context) {
	if err := ptuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ptuo *PaperTypesUpdateOne) check() error {
	if v, ok := ptuo.mutation.PaperTypeDescription(); ok {
		if err := papertypes.PaperTypeDescriptionValidator(v); err != nil {
			return &ValidationError{Name: "PaperTypeDescription", err: fmt.Errorf(`ent: validator failed for field "PaperTypes.PaperTypeDescription": %w`, err)}
		}
	}
	return nil
}

func (ptuo *PaperTypesUpdateOne) sqlSave(ctx context.Context) (_node *PaperTypes, err error) {
	if err := ptuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(papertypes.Table, papertypes.Columns, sqlgraph.NewFieldSpec(papertypes.FieldID, field.TypeInt32))
	id, ok := ptuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "PaperTypes.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ptuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, papertypes.FieldID)
		for _, f := range fields {
			if !papertypes.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != papertypes.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ptuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ptuo.mutation.PaperTypeDescription(); ok {
		_spec.SetField(papertypes.FieldPaperTypeDescription, field.TypeString, value)
	}
	if value, ok := ptuo.mutation.SequenceNumber(); ok {
		_spec.SetField(papertypes.FieldSequenceNumber, field.TypeInt32, value)
	}
	if value, ok := ptuo.mutation.AddedSequenceNumber(); ok {
		_spec.AddField(papertypes.FieldSequenceNumber, field.TypeInt32, value)
	}
	if ptuo.mutation.SequenceNumberCleared() {
		_spec.ClearField(papertypes.FieldSequenceNumber, field.TypeInt32)
	}
	if value, ok := ptuo.mutation.OrderNumber(); ok {
		_spec.SetField(papertypes.FieldOrderNumber, field.TypeString, value)
	}
	if ptuo.mutation.OrderNumberCleared() {
		_spec.ClearField(papertypes.FieldOrderNumber, field.TypeString)
	}
	if value, ok := ptuo.mutation.CreatedById(); ok {
		_spec.SetField(papertypes.FieldCreatedById, field.TypeInt64, value)
	}
	if value, ok := ptuo.mutation.AddedCreatedById(); ok {
		_spec.AddField(papertypes.FieldCreatedById, field.TypeInt64, value)
	}
	if ptuo.mutation.CreatedByIdCleared() {
		_spec.ClearField(papertypes.FieldCreatedById, field.TypeInt64)
	}
	if value, ok := ptuo.mutation.CreatedByUserName(); ok {
		_spec.SetField(papertypes.FieldCreatedByUserName, field.TypeString, value)
	}
	if ptuo.mutation.CreatedByUserNameCleared() {
		_spec.ClearField(papertypes.FieldCreatedByUserName, field.TypeString)
	}
	if value, ok := ptuo.mutation.CreatedByEmployeeId(); ok {
		_spec.SetField(papertypes.FieldCreatedByEmployeeId, field.TypeString, value)
	}
	if ptuo.mutation.CreatedByEmployeeIdCleared() {
		_spec.ClearField(papertypes.FieldCreatedByEmployeeId, field.TypeString)
	}
	if value, ok := ptuo.mutation.CreatedByDesignation(); ok {
		_spec.SetField(papertypes.FieldCreatedByDesignation, field.TypeString, value)
	}
	if ptuo.mutation.CreatedByDesignationCleared() {
		_spec.ClearField(papertypes.FieldCreatedByDesignation, field.TypeString)
	}
	if value, ok := ptuo.mutation.CreatedDate(); ok {
		_spec.SetField(papertypes.FieldCreatedDate, field.TypeTime, value)
	}
	if ptuo.mutation.CreatedDateCleared() {
		_spec.ClearField(papertypes.FieldCreatedDate, field.TypeTime)
	}
	if value, ok := ptuo.mutation.VerifiedById(); ok {
		_spec.SetField(papertypes.FieldVerifiedById, field.TypeInt64, value)
	}
	if value, ok := ptuo.mutation.AddedVerifiedById(); ok {
		_spec.AddField(papertypes.FieldVerifiedById, field.TypeInt64, value)
	}
	if ptuo.mutation.VerifiedByIdCleared() {
		_spec.ClearField(papertypes.FieldVerifiedById, field.TypeInt64)
	}
	if value, ok := ptuo.mutation.VerifiedByUserName(); ok {
		_spec.SetField(papertypes.FieldVerifiedByUserName, field.TypeString, value)
	}
	if ptuo.mutation.VerifiedByUserNameCleared() {
		_spec.ClearField(papertypes.FieldVerifiedByUserName, field.TypeString)
	}
	if value, ok := ptuo.mutation.VerifiedByEmployeeId(); ok {
		_spec.SetField(papertypes.FieldVerifiedByEmployeeId, field.TypeString, value)
	}
	if ptuo.mutation.VerifiedByEmployeeIdCleared() {
		_spec.ClearField(papertypes.FieldVerifiedByEmployeeId, field.TypeString)
	}
	if value, ok := ptuo.mutation.VerifiedByDesignation(); ok {
		_spec.SetField(papertypes.FieldVerifiedByDesignation, field.TypeString, value)
	}
	if ptuo.mutation.VerifiedByDesignationCleared() {
		_spec.ClearField(papertypes.FieldVerifiedByDesignation, field.TypeString)
	}
	if value, ok := ptuo.mutation.VerifiedDate(); ok {
		_spec.SetField(papertypes.FieldVerifiedDate, field.TypeTime, value)
	}
	if ptuo.mutation.VerifiedDateCleared() {
		_spec.ClearField(papertypes.FieldVerifiedDate, field.TypeTime)
	}
	if value, ok := ptuo.mutation.Status(); ok {
		_spec.SetField(papertypes.FieldStatus, field.TypeString, value)
	}
	if value, ok := ptuo.mutation.DeletedById(); ok {
		_spec.SetField(papertypes.FieldDeletedById, field.TypeInt64, value)
	}
	if value, ok := ptuo.mutation.AddedDeletedById(); ok {
		_spec.AddField(papertypes.FieldDeletedById, field.TypeInt64, value)
	}
	if ptuo.mutation.DeletedByIdCleared() {
		_spec.ClearField(papertypes.FieldDeletedById, field.TypeInt64)
	}
	if value, ok := ptuo.mutation.DeletedByUserName(); ok {
		_spec.SetField(papertypes.FieldDeletedByUserName, field.TypeString, value)
	}
	if ptuo.mutation.DeletedByUserNameCleared() {
		_spec.ClearField(papertypes.FieldDeletedByUserName, field.TypeString)
	}
	if value, ok := ptuo.mutation.DeletedByEmployeeId(); ok {
		_spec.SetField(papertypes.FieldDeletedByEmployeeId, field.TypeString, value)
	}
	if ptuo.mutation.DeletedByEmployeeIdCleared() {
		_spec.ClearField(papertypes.FieldDeletedByEmployeeId, field.TypeString)
	}
	if value, ok := ptuo.mutation.DeletedByDesignation(); ok {
		_spec.SetField(papertypes.FieldDeletedByDesignation, field.TypeString, value)
	}
	if ptuo.mutation.DeletedByDesignationCleared() {
		_spec.ClearField(papertypes.FieldDeletedByDesignation, field.TypeString)
	}
	if value, ok := ptuo.mutation.DeletedDate(); ok {
		_spec.SetField(papertypes.FieldDeletedDate, field.TypeTime, value)
	}
	if ptuo.mutation.DeletedDateCleared() {
		_spec.ClearField(papertypes.FieldDeletedDate, field.TypeTime)
	}
	if ptuo.mutation.PapercodeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   papertypes.PapercodeTable,
			Columns: []string{papertypes.PapercodeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exampapers.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ptuo.mutation.PapercodeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   papertypes.PapercodeTable,
			Columns: []string{papertypes.PapercodeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exampapers.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &PaperTypes{config: ptuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ptuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{papertypes.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ptuo.mutation.done = true
	return _node, nil
}
