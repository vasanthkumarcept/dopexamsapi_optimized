// Code generated by ent, DO NOT EDIT.

package examcategorydisabilitymapping

import (
	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the examcategorydisabilitymapping type in the database.
	Label = "exam_category_disability_mapping"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "UniqueID"
	// FieldExamCode holds the string denoting the examcode field in the database.
	FieldExamCode = "exam_code"
	// FieldExamShortName holds the string denoting the examshortname field in the database.
	FieldExamShortName = "exam_short_name"
	// FieldCategoryDisability holds the string denoting the categorydisability field in the database.
	FieldCategoryDisability = "category_disability"
	// FieldCategoryDisabilityCode holds the string denoting the categorydisabilitycode field in the database.
	FieldCategoryDisabilityCode = "category_disability_code"
	// FieldCategoryDisabilityDescription holds the string denoting the categorydisabilitydescription field in the database.
	FieldCategoryDisabilityDescription = "category_disability_description"
	// FieldAgeException holds the string denoting the ageexception field in the database.
	FieldAgeException = "age_exception"
	// FieldServiceException holds the string denoting the serviceexception field in the database.
	FieldServiceException = "service_exception"
	// FieldDrivingLicense holds the string denoting the drivinglicense field in the database.
	FieldDrivingLicense = "driving_license"
	// FieldOrderNumber holds the string denoting the ordernumber field in the database.
	FieldOrderNumber = "order_number"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldCreatedById holds the string denoting the createdbyid field in the database.
	FieldCreatedById = "created_by_id"
	// FieldCreatedByUserName holds the string denoting the createdbyusername field in the database.
	FieldCreatedByUserName = "created_by_user_name"
	// FieldCreatedByEmployeeId holds the string denoting the createdbyemployeeid field in the database.
	FieldCreatedByEmployeeId = "created_by_employee_id"
	// FieldCreatedByDesignation holds the string denoting the createdbydesignation field in the database.
	FieldCreatedByDesignation = "created_by_designation"
	// FieldCreatedDate holds the string denoting the createddate field in the database.
	FieldCreatedDate = "created_date"
	// FieldVerifiedById holds the string denoting the verifiedbyid field in the database.
	FieldVerifiedById = "verified_by_id"
	// FieldVerifiedByUserName holds the string denoting the verifiedbyusername field in the database.
	FieldVerifiedByUserName = "verified_by_user_name"
	// FieldVerifiedByEmployeeId holds the string denoting the verifiedbyemployeeid field in the database.
	FieldVerifiedByEmployeeId = "verified_by_employee_id"
	// FieldVerifiedByDesignation holds the string denoting the verifiedbydesignation field in the database.
	FieldVerifiedByDesignation = "verified_by_designation"
	// FieldVerifiedDate holds the string denoting the verifieddate field in the database.
	FieldVerifiedDate = "verified_date"
	// FieldDeletedById holds the string denoting the deletedbyid field in the database.
	FieldDeletedById = "deleted_by_id"
	// FieldDeletedByUserName holds the string denoting the deletedbyusername field in the database.
	FieldDeletedByUserName = "deleted_by_user_name"
	// FieldDeletedByEmployeeId holds the string denoting the deletedbyemployeeid field in the database.
	FieldDeletedByEmployeeId = "deleted_by_employee_id"
	// FieldDeletedByDesignation holds the string denoting the deletedbydesignation field in the database.
	FieldDeletedByDesignation = "deleted_by_designation"
	// FieldDeletedDate holds the string denoting the deleteddate field in the database.
	FieldDeletedDate = "deleted_date"
	// Table holds the table name of the examcategorydisabilitymapping in the database.
	Table = "ExamCategoryDisabilityMapping"
)

// Columns holds all SQL columns for examcategorydisabilitymapping fields.
var Columns = []string{
	FieldID,
	FieldExamCode,
	FieldExamShortName,
	FieldCategoryDisability,
	FieldCategoryDisabilityCode,
	FieldCategoryDisabilityDescription,
	FieldAgeException,
	FieldServiceException,
	FieldDrivingLicense,
	FieldOrderNumber,
	FieldStatus,
	FieldCreatedById,
	FieldCreatedByUserName,
	FieldCreatedByEmployeeId,
	FieldCreatedByDesignation,
	FieldCreatedDate,
	FieldVerifiedById,
	FieldVerifiedByUserName,
	FieldVerifiedByEmployeeId,
	FieldVerifiedByDesignation,
	FieldVerifiedDate,
	FieldDeletedById,
	FieldDeletedByUserName,
	FieldDeletedByEmployeeId,
	FieldDeletedByDesignation,
	FieldDeletedDate,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultExamCode holds the default value on creation for the "ExamCode" field.
	DefaultExamCode int64
	// DefaultAgeException holds the default value on creation for the "AgeException" field.
	DefaultAgeException int32
	// DefaultServiceException holds the default value on creation for the "ServiceException" field.
	DefaultServiceException int32
	// DefaultCreatedById holds the default value on creation for the "CreatedById" field.
	DefaultCreatedById int32
	// DefaultVerifiedById holds the default value on creation for the "VerifiedById" field.
	DefaultVerifiedById int64
	// DefaultDeletedById holds the default value on creation for the "DeletedById" field.
	DefaultDeletedById int64
)

// OrderOption defines the ordering options for the ExamCategoryDisabilityMapping queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByExamCode orders the results by the ExamCode field.
func ByExamCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExamCode, opts...).ToFunc()
}

// ByExamShortName orders the results by the ExamShortName field.
func ByExamShortName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExamShortName, opts...).ToFunc()
}

// ByCategoryDisability orders the results by the CategoryDisability field.
func ByCategoryDisability(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCategoryDisability, opts...).ToFunc()
}

// ByCategoryDisabilityCode orders the results by the CategoryDisabilityCode field.
func ByCategoryDisabilityCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCategoryDisabilityCode, opts...).ToFunc()
}

// ByCategoryDisabilityDescription orders the results by the CategoryDisabilityDescription field.
func ByCategoryDisabilityDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCategoryDisabilityDescription, opts...).ToFunc()
}

// ByAgeException orders the results by the AgeException field.
func ByAgeException(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAgeException, opts...).ToFunc()
}

// ByServiceException orders the results by the ServiceException field.
func ByServiceException(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldServiceException, opts...).ToFunc()
}

// ByDrivingLicense orders the results by the DrivingLicense field.
func ByDrivingLicense(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDrivingLicense, opts...).ToFunc()
}

// ByOrderNumber orders the results by the OrderNumber field.
func ByOrderNumber(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOrderNumber, opts...).ToFunc()
}

// ByStatus orders the results by the Status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByCreatedById orders the results by the CreatedById field.
func ByCreatedById(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedById, opts...).ToFunc()
}

// ByCreatedByUserName orders the results by the CreatedByUserName field.
func ByCreatedByUserName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedByUserName, opts...).ToFunc()
}

// ByCreatedByEmployeeId orders the results by the CreatedByEmployeeId field.
func ByCreatedByEmployeeId(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedByEmployeeId, opts...).ToFunc()
}

// ByCreatedByDesignation orders the results by the CreatedByDesignation field.
func ByCreatedByDesignation(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedByDesignation, opts...).ToFunc()
}

// ByCreatedDate orders the results by the CreatedDate field.
func ByCreatedDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedDate, opts...).ToFunc()
}

// ByVerifiedById orders the results by the VerifiedById field.
func ByVerifiedById(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVerifiedById, opts...).ToFunc()
}

// ByVerifiedByUserName orders the results by the VerifiedByUserName field.
func ByVerifiedByUserName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVerifiedByUserName, opts...).ToFunc()
}

// ByVerifiedByEmployeeId orders the results by the VerifiedByEmployeeId field.
func ByVerifiedByEmployeeId(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVerifiedByEmployeeId, opts...).ToFunc()
}

// ByVerifiedByDesignation orders the results by the VerifiedByDesignation field.
func ByVerifiedByDesignation(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVerifiedByDesignation, opts...).ToFunc()
}

// ByVerifiedDate orders the results by the VerifiedDate field.
func ByVerifiedDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVerifiedDate, opts...).ToFunc()
}

// ByDeletedById orders the results by the DeletedById field.
func ByDeletedById(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedById, opts...).ToFunc()
}

// ByDeletedByUserName orders the results by the DeletedByUserName field.
func ByDeletedByUserName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedByUserName, opts...).ToFunc()
}

// ByDeletedByEmployeeId orders the results by the DeletedByEmployeeId field.
func ByDeletedByEmployeeId(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedByEmployeeId, opts...).ToFunc()
}

// ByDeletedByDesignation orders the results by the DeletedByDesignation field.
func ByDeletedByDesignation(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedByDesignation, opts...).ToFunc()
}

// ByDeletedDate orders the results by the DeletedDate field.
func ByDeletedDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedDate, opts...).ToFunc()
}
