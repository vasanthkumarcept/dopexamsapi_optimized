// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"recruit/ent/smsemaillog"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// SmsEmailLog is the model entity for the SmsEmailLog schema.
type SmsEmailLog struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// Type holds the value of the "Type" field.
	Type string `json:"Type,omitempty"`
	// MobileEmail holds the value of the "MobileEmail" field.
	MobileEmail string `json:"MobileEmail,omitempty"`
	// UserName holds the value of the "UserName" field.
	UserName string `json:"UserName,omitempty"`
	// EventCode holds the value of the "EventCode" field.
	EventCode string `json:"EventCode,omitempty"`
	// EventDescription holds the value of the "EventDescription" field.
	EventDescription string `json:"EventDescription,omitempty"`
	// ApiResponse holds the value of the "ApiResponse" field.
	ApiResponse string `json:"ApiResponse,omitempty"`
	// ApiResponseDescription holds the value of the "ApiResponseDescription" field.
	ApiResponseDescription string `json:"ApiResponseDescription,omitempty"`
	// Eventtime holds the value of the "eventtime" field.
	Eventtime    time.Time `json:"eventtime,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SmsEmailLog) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case smsemaillog.FieldID:
			values[i] = new(sql.NullInt64)
		case smsemaillog.FieldType, smsemaillog.FieldMobileEmail, smsemaillog.FieldUserName, smsemaillog.FieldEventCode, smsemaillog.FieldEventDescription, smsemaillog.FieldApiResponse, smsemaillog.FieldApiResponseDescription:
			values[i] = new(sql.NullString)
		case smsemaillog.FieldEventtime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SmsEmailLog fields.
func (sel *SmsEmailLog) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case smsemaillog.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			sel.ID = int64(value.Int64)
		case smsemaillog.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Type", values[i])
			} else if value.Valid {
				sel.Type = value.String
			}
		case smsemaillog.FieldMobileEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field MobileEmail", values[i])
			} else if value.Valid {
				sel.MobileEmail = value.String
			}
		case smsemaillog.FieldUserName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field UserName", values[i])
			} else if value.Valid {
				sel.UserName = value.String
			}
		case smsemaillog.FieldEventCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field EventCode", values[i])
			} else if value.Valid {
				sel.EventCode = value.String
			}
		case smsemaillog.FieldEventDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field EventDescription", values[i])
			} else if value.Valid {
				sel.EventDescription = value.String
			}
		case smsemaillog.FieldApiResponse:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ApiResponse", values[i])
			} else if value.Valid {
				sel.ApiResponse = value.String
			}
		case smsemaillog.FieldApiResponseDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ApiResponseDescription", values[i])
			} else if value.Valid {
				sel.ApiResponseDescription = value.String
			}
		case smsemaillog.FieldEventtime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field eventtime", values[i])
			} else if value.Valid {
				sel.Eventtime = value.Time
			}
		default:
			sel.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the SmsEmailLog.
// This includes values selected through modifiers, order, etc.
func (sel *SmsEmailLog) Value(name string) (ent.Value, error) {
	return sel.selectValues.Get(name)
}

// Update returns a builder for updating this SmsEmailLog.
// Note that you need to call SmsEmailLog.Unwrap() before calling this method if this SmsEmailLog
// was returned from a transaction, and the transaction was committed or rolled back.
func (sel *SmsEmailLog) Update() *SmsEmailLogUpdateOne {
	return NewSmsEmailLogClient(sel.config).UpdateOne(sel)
}

// Unwrap unwraps the SmsEmailLog entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sel *SmsEmailLog) Unwrap() *SmsEmailLog {
	_tx, ok := sel.config.driver.(*txDriver)
	if !ok {
		panic("ent: SmsEmailLog is not a transactional entity")
	}
	sel.config.driver = _tx.drv
	return sel
}

// String implements the fmt.Stringer.
func (sel *SmsEmailLog) String() string {
	var builder strings.Builder
	builder.WriteString("SmsEmailLog(")
	builder.WriteString(fmt.Sprintf("id=%v, ", sel.ID))
	builder.WriteString("Type=")
	builder.WriteString(sel.Type)
	builder.WriteString(", ")
	builder.WriteString("MobileEmail=")
	builder.WriteString(sel.MobileEmail)
	builder.WriteString(", ")
	builder.WriteString("UserName=")
	builder.WriteString(sel.UserName)
	builder.WriteString(", ")
	builder.WriteString("EventCode=")
	builder.WriteString(sel.EventCode)
	builder.WriteString(", ")
	builder.WriteString("EventDescription=")
	builder.WriteString(sel.EventDescription)
	builder.WriteString(", ")
	builder.WriteString("ApiResponse=")
	builder.WriteString(sel.ApiResponse)
	builder.WriteString(", ")
	builder.WriteString("ApiResponseDescription=")
	builder.WriteString(sel.ApiResponseDescription)
	builder.WriteString(", ")
	builder.WriteString("eventtime=")
	builder.WriteString(sel.Eventtime.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// SmsEmailLogs is a parsable slice of SmsEmailLog.
type SmsEmailLogs []*SmsEmailLog
