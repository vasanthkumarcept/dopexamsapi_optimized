// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"recruit/ent/employees"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// EmployeesCreate is the builder for creating a Employees entity.
type EmployeesCreate struct {
	config
	mutation *EmployeesMutation
	hooks    []Hook
}

// SetEmployeedID sets the "EmployeedID" field.
func (ec *EmployeesCreate) SetEmployeedID(i int32) *EmployeesCreate {
	ec.mutation.SetEmployeedID(i)
	return ec
}

// SetIDVerified sets the "IDVerified" field.
func (ec *EmployeesCreate) SetIDVerified(b bool) *EmployeesCreate {
	ec.mutation.SetIDVerified(b)
	return ec
}

// SetNillableIDVerified sets the "IDVerified" field if the given value is not nil.
func (ec *EmployeesCreate) SetNillableIDVerified(b *bool) *EmployeesCreate {
	if b != nil {
		ec.SetIDVerified(*b)
	}
	return ec
}

// SetIDRemStatus sets the "IDRemStatus" field.
func (ec *EmployeesCreate) SetIDRemStatus(b bool) *EmployeesCreate {
	ec.mutation.SetIDRemStatus(b)
	return ec
}

// SetNillableIDRemStatus sets the "IDRemStatus" field if the given value is not nil.
func (ec *EmployeesCreate) SetNillableIDRemStatus(b *bool) *EmployeesCreate {
	if b != nil {
		ec.SetIDRemStatus(*b)
	}
	return ec
}

// SetIDRemarks sets the "IDRemarks" field.
func (ec *EmployeesCreate) SetIDRemarks(s string) *EmployeesCreate {
	ec.mutation.SetIDRemarks(s)
	return ec
}

// SetNillableIDRemarks sets the "IDRemarks" field if the given value is not nil.
func (ec *EmployeesCreate) SetNillableIDRemarks(s *string) *EmployeesCreate {
	if s != nil {
		ec.SetIDRemarks(*s)
	}
	return ec
}

// SetEmployeeName sets the "EmployeeName" field.
func (ec *EmployeesCreate) SetEmployeeName(s string) *EmployeesCreate {
	ec.mutation.SetEmployeeName(s)
	return ec
}

// SetNameVerified sets the "nameVerified" field.
func (ec *EmployeesCreate) SetNameVerified(b bool) *EmployeesCreate {
	ec.mutation.SetNameVerified(b)
	return ec
}

// SetNillableNameVerified sets the "nameVerified" field if the given value is not nil.
func (ec *EmployeesCreate) SetNillableNameVerified(b *bool) *EmployeesCreate {
	if b != nil {
		ec.SetNameVerified(*b)
	}
	return ec
}

// SetNameRemStatus sets the "nameRemStatus" field.
func (ec *EmployeesCreate) SetNameRemStatus(b bool) *EmployeesCreate {
	ec.mutation.SetNameRemStatus(b)
	return ec
}

// SetNillableNameRemStatus sets the "nameRemStatus" field if the given value is not nil.
func (ec *EmployeesCreate) SetNillableNameRemStatus(b *bool) *EmployeesCreate {
	if b != nil {
		ec.SetNameRemStatus(*b)
	}
	return ec
}

// SetNameRemarks sets the "nameRemarks" field.
func (ec *EmployeesCreate) SetNameRemarks(s string) *EmployeesCreate {
	ec.mutation.SetNameRemarks(s)
	return ec
}

// SetNillableNameRemarks sets the "nameRemarks" field if the given value is not nil.
func (ec *EmployeesCreate) SetNillableNameRemarks(s *string) *EmployeesCreate {
	if s != nil {
		ec.SetNameRemarks(*s)
	}
	return ec
}

// SetEmployeeFathersName sets the "EmployeeFathersName" field.
func (ec *EmployeesCreate) SetEmployeeFathersName(s string) *EmployeesCreate {
	ec.mutation.SetEmployeeFathersName(s)
	return ec
}

// SetFathersNameVerified sets the "FathersNameVerified" field.
func (ec *EmployeesCreate) SetFathersNameVerified(b bool) *EmployeesCreate {
	ec.mutation.SetFathersNameVerified(b)
	return ec
}

// SetNillableFathersNameVerified sets the "FathersNameVerified" field if the given value is not nil.
func (ec *EmployeesCreate) SetNillableFathersNameVerified(b *bool) *EmployeesCreate {
	if b != nil {
		ec.SetFathersNameVerified(*b)
	}
	return ec
}

// SetFathersNameRemStatus sets the "FathersNameRemStatus" field.
func (ec *EmployeesCreate) SetFathersNameRemStatus(b bool) *EmployeesCreate {
	ec.mutation.SetFathersNameRemStatus(b)
	return ec
}

// SetNillableFathersNameRemStatus sets the "FathersNameRemStatus" field if the given value is not nil.
func (ec *EmployeesCreate) SetNillableFathersNameRemStatus(b *bool) *EmployeesCreate {
	if b != nil {
		ec.SetFathersNameRemStatus(*b)
	}
	return ec
}

// SetFathersNameRemarks sets the "FathersNameRemarks" field.
func (ec *EmployeesCreate) SetFathersNameRemarks(s string) *EmployeesCreate {
	ec.mutation.SetFathersNameRemarks(s)
	return ec
}

// SetNillableFathersNameRemarks sets the "FathersNameRemarks" field if the given value is not nil.
func (ec *EmployeesCreate) SetNillableFathersNameRemarks(s *string) *EmployeesCreate {
	if s != nil {
		ec.SetFathersNameRemarks(*s)
	}
	return ec
}

// SetDOB sets the "DOB" field.
func (ec *EmployeesCreate) SetDOB(t time.Time) *EmployeesCreate {
	ec.mutation.SetDOB(t)
	return ec
}

// SetDOBVerified sets the "DOBVerified" field.
func (ec *EmployeesCreate) SetDOBVerified(b bool) *EmployeesCreate {
	ec.mutation.SetDOBVerified(b)
	return ec
}

// SetNillableDOBVerified sets the "DOBVerified" field if the given value is not nil.
func (ec *EmployeesCreate) SetNillableDOBVerified(b *bool) *EmployeesCreate {
	if b != nil {
		ec.SetDOBVerified(*b)
	}
	return ec
}

// SetDOBRemStatus sets the "DOBRemStatus" field.
func (ec *EmployeesCreate) SetDOBRemStatus(b bool) *EmployeesCreate {
	ec.mutation.SetDOBRemStatus(b)
	return ec
}

// SetNillableDOBRemStatus sets the "DOBRemStatus" field if the given value is not nil.
func (ec *EmployeesCreate) SetNillableDOBRemStatus(b *bool) *EmployeesCreate {
	if b != nil {
		ec.SetDOBRemStatus(*b)
	}
	return ec
}

// SetDOBRemarks sets the "DOBRemarks" field.
func (ec *EmployeesCreate) SetDOBRemarks(s string) *EmployeesCreate {
	ec.mutation.SetDOBRemarks(s)
	return ec
}

// SetNillableDOBRemarks sets the "DOBRemarks" field if the given value is not nil.
func (ec *EmployeesCreate) SetNillableDOBRemarks(s *string) *EmployeesCreate {
	if s != nil {
		ec.SetDOBRemarks(*s)
	}
	return ec
}

// SetGender sets the "Gender" field.
func (ec *EmployeesCreate) SetGender(e employees.Gender) *EmployeesCreate {
	ec.mutation.SetGender(e)
	return ec
}

// SetGenderVerified sets the "genderVerified" field.
func (ec *EmployeesCreate) SetGenderVerified(b bool) *EmployeesCreate {
	ec.mutation.SetGenderVerified(b)
	return ec
}

// SetNillableGenderVerified sets the "genderVerified" field if the given value is not nil.
func (ec *EmployeesCreate) SetNillableGenderVerified(b *bool) *EmployeesCreate {
	if b != nil {
		ec.SetGenderVerified(*b)
	}
	return ec
}

// SetGenderRemStatus sets the "genderRemStatus" field.
func (ec *EmployeesCreate) SetGenderRemStatus(b bool) *EmployeesCreate {
	ec.mutation.SetGenderRemStatus(b)
	return ec
}

// SetNillableGenderRemStatus sets the "genderRemStatus" field if the given value is not nil.
func (ec *EmployeesCreate) SetNillableGenderRemStatus(b *bool) *EmployeesCreate {
	if b != nil {
		ec.SetGenderRemStatus(*b)
	}
	return ec
}

// SetGenderRemarks sets the "genderRemarks" field.
func (ec *EmployeesCreate) SetGenderRemarks(s string) *EmployeesCreate {
	ec.mutation.SetGenderRemarks(s)
	return ec
}

// SetNillableGenderRemarks sets the "genderRemarks" field if the given value is not nil.
func (ec *EmployeesCreate) SetNillableGenderRemarks(s *string) *EmployeesCreate {
	if s != nil {
		ec.SetGenderRemarks(*s)
	}
	return ec
}

// SetMobileNumber sets the "MobileNumber" field.
func (ec *EmployeesCreate) SetMobileNumber(i int64) *EmployeesCreate {
	ec.mutation.SetMobileNumber(i)
	return ec
}

// SetNillableMobileNumber sets the "MobileNumber" field if the given value is not nil.
func (ec *EmployeesCreate) SetNillableMobileNumber(i *int64) *EmployeesCreate {
	if i != nil {
		ec.SetMobileNumber(*i)
	}
	return ec
}

// SetMobileNumberVerified sets the "MobileNumberVerified" field.
func (ec *EmployeesCreate) SetMobileNumberVerified(b bool) *EmployeesCreate {
	ec.mutation.SetMobileNumberVerified(b)
	return ec
}

// SetNillableMobileNumberVerified sets the "MobileNumberVerified" field if the given value is not nil.
func (ec *EmployeesCreate) SetNillableMobileNumberVerified(b *bool) *EmployeesCreate {
	if b != nil {
		ec.SetMobileNumberVerified(*b)
	}
	return ec
}

// SetMobileNumberRemStatus sets the "MobileNumberRemStatus" field.
func (ec *EmployeesCreate) SetMobileNumberRemStatus(b bool) *EmployeesCreate {
	ec.mutation.SetMobileNumberRemStatus(b)
	return ec
}

// SetNillableMobileNumberRemStatus sets the "MobileNumberRemStatus" field if the given value is not nil.
func (ec *EmployeesCreate) SetNillableMobileNumberRemStatus(b *bool) *EmployeesCreate {
	if b != nil {
		ec.SetMobileNumberRemStatus(*b)
	}
	return ec
}

// SetMobileNumberRemarks sets the "MobileNumberRemarks" field.
func (ec *EmployeesCreate) SetMobileNumberRemarks(s string) *EmployeesCreate {
	ec.mutation.SetMobileNumberRemarks(s)
	return ec
}

// SetNillableMobileNumberRemarks sets the "MobileNumberRemarks" field if the given value is not nil.
func (ec *EmployeesCreate) SetNillableMobileNumberRemarks(s *string) *EmployeesCreate {
	if s != nil {
		ec.SetMobileNumberRemarks(*s)
	}
	return ec
}

// SetEmailID sets the "EmailID" field.
func (ec *EmployeesCreate) SetEmailID(s string) *EmployeesCreate {
	ec.mutation.SetEmailID(s)
	return ec
}

// SetNillableEmailID sets the "EmailID" field if the given value is not nil.
func (ec *EmployeesCreate) SetNillableEmailID(s *string) *EmployeesCreate {
	if s != nil {
		ec.SetEmailID(*s)
	}
	return ec
}

// SetEmailIDVerified sets the "EmailIDVerified" field.
func (ec *EmployeesCreate) SetEmailIDVerified(b bool) *EmployeesCreate {
	ec.mutation.SetEmailIDVerified(b)
	return ec
}

// SetNillableEmailIDVerified sets the "EmailIDVerified" field if the given value is not nil.
func (ec *EmployeesCreate) SetNillableEmailIDVerified(b *bool) *EmployeesCreate {
	if b != nil {
		ec.SetEmailIDVerified(*b)
	}
	return ec
}

// SetEmailIDRemStatus sets the "EmailIDRemStatus" field.
func (ec *EmployeesCreate) SetEmailIDRemStatus(b bool) *EmployeesCreate {
	ec.mutation.SetEmailIDRemStatus(b)
	return ec
}

// SetNillableEmailIDRemStatus sets the "EmailIDRemStatus" field if the given value is not nil.
func (ec *EmployeesCreate) SetNillableEmailIDRemStatus(b *bool) *EmployeesCreate {
	if b != nil {
		ec.SetEmailIDRemStatus(*b)
	}
	return ec
}

// SetEmailIDRemarks sets the "EmailIDRemarks" field.
func (ec *EmployeesCreate) SetEmailIDRemarks(s string) *EmployeesCreate {
	ec.mutation.SetEmailIDRemarks(s)
	return ec
}

// SetNillableEmailIDRemarks sets the "EmailIDRemarks" field if the given value is not nil.
func (ec *EmployeesCreate) SetNillableEmailIDRemarks(s *string) *EmployeesCreate {
	if s != nil {
		ec.SetEmailIDRemarks(*s)
	}
	return ec
}

// SetCategoryid sets the "Categoryid" field.
func (ec *EmployeesCreate) SetCategoryid(i int32) *EmployeesCreate {
	ec.mutation.SetCategoryid(i)
	return ec
}

// SetNillableCategoryid sets the "Categoryid" field if the given value is not nil.
func (ec *EmployeesCreate) SetNillableCategoryid(i *int32) *EmployeesCreate {
	if i != nil {
		ec.SetCategoryid(*i)
	}
	return ec
}

// SetEmployeeCategoryCode sets the "EmployeeCategoryCode" field.
func (ec *EmployeesCreate) SetEmployeeCategoryCode(s string) *EmployeesCreate {
	ec.mutation.SetEmployeeCategoryCode(s)
	return ec
}

// SetNillableEmployeeCategoryCode sets the "EmployeeCategoryCode" field if the given value is not nil.
func (ec *EmployeesCreate) SetNillableEmployeeCategoryCode(s *string) *EmployeesCreate {
	if s != nil {
		ec.SetEmployeeCategoryCode(*s)
	}
	return ec
}

// SetEmployeeCategory sets the "EmployeeCategory" field.
func (ec *EmployeesCreate) SetEmployeeCategory(s string) *EmployeesCreate {
	ec.mutation.SetEmployeeCategory(s)
	return ec
}

// SetEmployeeCategoryCodeVerified sets the "EmployeeCategoryCodeVerified" field.
func (ec *EmployeesCreate) SetEmployeeCategoryCodeVerified(b bool) *EmployeesCreate {
	ec.mutation.SetEmployeeCategoryCodeVerified(b)
	return ec
}

// SetNillableEmployeeCategoryCodeVerified sets the "EmployeeCategoryCodeVerified" field if the given value is not nil.
func (ec *EmployeesCreate) SetNillableEmployeeCategoryCodeVerified(b *bool) *EmployeesCreate {
	if b != nil {
		ec.SetEmployeeCategoryCodeVerified(*b)
	}
	return ec
}

// SetEmployeeCategoryCodeRemStatus sets the "EmployeeCategoryCodeRemStatus" field.
func (ec *EmployeesCreate) SetEmployeeCategoryCodeRemStatus(b bool) *EmployeesCreate {
	ec.mutation.SetEmployeeCategoryCodeRemStatus(b)
	return ec
}

// SetNillableEmployeeCategoryCodeRemStatus sets the "EmployeeCategoryCodeRemStatus" field if the given value is not nil.
func (ec *EmployeesCreate) SetNillableEmployeeCategoryCodeRemStatus(b *bool) *EmployeesCreate {
	if b != nil {
		ec.SetEmployeeCategoryCodeRemStatus(*b)
	}
	return ec
}

// SetEmployeeCategoryCodeRemarks sets the "EmployeeCategoryCodeRemarks" field.
func (ec *EmployeesCreate) SetEmployeeCategoryCodeRemarks(s string) *EmployeesCreate {
	ec.mutation.SetEmployeeCategoryCodeRemarks(s)
	return ec
}

// SetNillableEmployeeCategoryCodeRemarks sets the "EmployeeCategoryCodeRemarks" field if the given value is not nil.
func (ec *EmployeesCreate) SetNillableEmployeeCategoryCodeRemarks(s *string) *EmployeesCreate {
	if s != nil {
		ec.SetEmployeeCategoryCodeRemarks(*s)
	}
	return ec
}

// SetWithDisability sets the "WithDisability" field.
func (ec *EmployeesCreate) SetWithDisability(s string) *EmployeesCreate {
	ec.mutation.SetWithDisability(s)
	return ec
}

// SetWithDisabilityVerified sets the "WithDisabilityVerified" field.
func (ec *EmployeesCreate) SetWithDisabilityVerified(b bool) *EmployeesCreate {
	ec.mutation.SetWithDisabilityVerified(b)
	return ec
}

// SetNillableWithDisabilityVerified sets the "WithDisabilityVerified" field if the given value is not nil.
func (ec *EmployeesCreate) SetNillableWithDisabilityVerified(b *bool) *EmployeesCreate {
	if b != nil {
		ec.SetWithDisabilityVerified(*b)
	}
	return ec
}

// SetWithDisabilityRemStatus sets the "WithDisabilityRemStatus" field.
func (ec *EmployeesCreate) SetWithDisabilityRemStatus(b bool) *EmployeesCreate {
	ec.mutation.SetWithDisabilityRemStatus(b)
	return ec
}

// SetNillableWithDisabilityRemStatus sets the "WithDisabilityRemStatus" field if the given value is not nil.
func (ec *EmployeesCreate) SetNillableWithDisabilityRemStatus(b *bool) *EmployeesCreate {
	if b != nil {
		ec.SetWithDisabilityRemStatus(*b)
	}
	return ec
}

// SetWithDisabilityRemarks sets the "WithDisabilityRemarks" field.
func (ec *EmployeesCreate) SetWithDisabilityRemarks(b bool) *EmployeesCreate {
	ec.mutation.SetWithDisabilityRemarks(b)
	return ec
}

// SetNillableWithDisabilityRemarks sets the "WithDisabilityRemarks" field if the given value is not nil.
func (ec *EmployeesCreate) SetNillableWithDisabilityRemarks(b *bool) *EmployeesCreate {
	if b != nil {
		ec.SetWithDisabilityRemarks(*b)
	}
	return ec
}

// SetDisabilityType sets the "DisabilityType" field.
func (ec *EmployeesCreate) SetDisabilityType(s string) *EmployeesCreate {
	ec.mutation.SetDisabilityType(s)
	return ec
}

// SetNillableDisabilityType sets the "DisabilityType" field if the given value is not nil.
func (ec *EmployeesCreate) SetNillableDisabilityType(s *string) *EmployeesCreate {
	if s != nil {
		ec.SetDisabilityType(*s)
	}
	return ec
}

// SetDisabilityTypeVerified sets the "DisabilityTypeVerified" field.
func (ec *EmployeesCreate) SetDisabilityTypeVerified(b bool) *EmployeesCreate {
	ec.mutation.SetDisabilityTypeVerified(b)
	return ec
}

// SetNillableDisabilityTypeVerified sets the "DisabilityTypeVerified" field if the given value is not nil.
func (ec *EmployeesCreate) SetNillableDisabilityTypeVerified(b *bool) *EmployeesCreate {
	if b != nil {
		ec.SetDisabilityTypeVerified(*b)
	}
	return ec
}

// SetDisabilityTypeRemStatus sets the "DisabilityTypeRemStatus" field.
func (ec *EmployeesCreate) SetDisabilityTypeRemStatus(b bool) *EmployeesCreate {
	ec.mutation.SetDisabilityTypeRemStatus(b)
	return ec
}

// SetNillableDisabilityTypeRemStatus sets the "DisabilityTypeRemStatus" field if the given value is not nil.
func (ec *EmployeesCreate) SetNillableDisabilityTypeRemStatus(b *bool) *EmployeesCreate {
	if b != nil {
		ec.SetDisabilityTypeRemStatus(*b)
	}
	return ec
}

// SetDisabilityTypeRemarks sets the "DisabilityTypeRemarks" field.
func (ec *EmployeesCreate) SetDisabilityTypeRemarks(s string) *EmployeesCreate {
	ec.mutation.SetDisabilityTypeRemarks(s)
	return ec
}

// SetNillableDisabilityTypeRemarks sets the "DisabilityTypeRemarks" field if the given value is not nil.
func (ec *EmployeesCreate) SetNillableDisabilityTypeRemarks(s *string) *EmployeesCreate {
	if s != nil {
		ec.SetDisabilityTypeRemarks(*s)
	}
	return ec
}

// SetDisabilityPercentage sets the "DisabilityPercentage" field.
func (ec *EmployeesCreate) SetDisabilityPercentage(i int32) *EmployeesCreate {
	ec.mutation.SetDisabilityPercentage(i)
	return ec
}

// SetNillableDisabilityPercentage sets the "DisabilityPercentage" field if the given value is not nil.
func (ec *EmployeesCreate) SetNillableDisabilityPercentage(i *int32) *EmployeesCreate {
	if i != nil {
		ec.SetDisabilityPercentage(*i)
	}
	return ec
}

// SetDisabilityPercentageVerified sets the "DisabilityPercentageVerified" field.
func (ec *EmployeesCreate) SetDisabilityPercentageVerified(b bool) *EmployeesCreate {
	ec.mutation.SetDisabilityPercentageVerified(b)
	return ec
}

// SetNillableDisabilityPercentageVerified sets the "DisabilityPercentageVerified" field if the given value is not nil.
func (ec *EmployeesCreate) SetNillableDisabilityPercentageVerified(b *bool) *EmployeesCreate {
	if b != nil {
		ec.SetDisabilityPercentageVerified(*b)
	}
	return ec
}

// SetDisabilityPercentageRemStatus sets the "DisabilityPercentageRemStatus" field.
func (ec *EmployeesCreate) SetDisabilityPercentageRemStatus(b bool) *EmployeesCreate {
	ec.mutation.SetDisabilityPercentageRemStatus(b)
	return ec
}

// SetNillableDisabilityPercentageRemStatus sets the "DisabilityPercentageRemStatus" field if the given value is not nil.
func (ec *EmployeesCreate) SetNillableDisabilityPercentageRemStatus(b *bool) *EmployeesCreate {
	if b != nil {
		ec.SetDisabilityPercentageRemStatus(*b)
	}
	return ec
}

// SetDisabilityPercentageRemarks sets the "DisabilityPercentageRemarks" field.
func (ec *EmployeesCreate) SetDisabilityPercentageRemarks(s string) *EmployeesCreate {
	ec.mutation.SetDisabilityPercentageRemarks(s)
	return ec
}

// SetNillableDisabilityPercentageRemarks sets the "DisabilityPercentageRemarks" field if the given value is not nil.
func (ec *EmployeesCreate) SetNillableDisabilityPercentageRemarks(s *string) *EmployeesCreate {
	if s != nil {
		ec.SetDisabilityPercentageRemarks(*s)
	}
	return ec
}

// SetSignature sets the "Signature" field.
func (ec *EmployeesCreate) SetSignature(s string) *EmployeesCreate {
	ec.mutation.SetSignature(s)
	return ec
}

// SetSignatureVerified sets the "SignatureVerified" field.
func (ec *EmployeesCreate) SetSignatureVerified(b bool) *EmployeesCreate {
	ec.mutation.SetSignatureVerified(b)
	return ec
}

// SetNillableSignatureVerified sets the "SignatureVerified" field if the given value is not nil.
func (ec *EmployeesCreate) SetNillableSignatureVerified(b *bool) *EmployeesCreate {
	if b != nil {
		ec.SetSignatureVerified(*b)
	}
	return ec
}

// SetSignatureRemStatus sets the "SignatureRemStatus" field.
func (ec *EmployeesCreate) SetSignatureRemStatus(b bool) *EmployeesCreate {
	ec.mutation.SetSignatureRemStatus(b)
	return ec
}

// SetNillableSignatureRemStatus sets the "SignatureRemStatus" field if the given value is not nil.
func (ec *EmployeesCreate) SetNillableSignatureRemStatus(b *bool) *EmployeesCreate {
	if b != nil {
		ec.SetSignatureRemStatus(*b)
	}
	return ec
}

// SetSignatureRemarks sets the "SignatureRemarks" field.
func (ec *EmployeesCreate) SetSignatureRemarks(s string) *EmployeesCreate {
	ec.mutation.SetSignatureRemarks(s)
	return ec
}

// SetNillableSignatureRemarks sets the "SignatureRemarks" field if the given value is not nil.
func (ec *EmployeesCreate) SetNillableSignatureRemarks(s *string) *EmployeesCreate {
	if s != nil {
		ec.SetSignatureRemarks(*s)
	}
	return ec
}

// SetPhoto sets the "Photo" field.
func (ec *EmployeesCreate) SetPhoto(s string) *EmployeesCreate {
	ec.mutation.SetPhoto(s)
	return ec
}

// SetPhotoVerified sets the "PhotoVerified" field.
func (ec *EmployeesCreate) SetPhotoVerified(b bool) *EmployeesCreate {
	ec.mutation.SetPhotoVerified(b)
	return ec
}

// SetNillablePhotoVerified sets the "PhotoVerified" field if the given value is not nil.
func (ec *EmployeesCreate) SetNillablePhotoVerified(b *bool) *EmployeesCreate {
	if b != nil {
		ec.SetPhotoVerified(*b)
	}
	return ec
}

// SetPhotoRemStatus sets the "PhotoRemStatus" field.
func (ec *EmployeesCreate) SetPhotoRemStatus(b bool) *EmployeesCreate {
	ec.mutation.SetPhotoRemStatus(b)
	return ec
}

// SetNillablePhotoRemStatus sets the "PhotoRemStatus" field if the given value is not nil.
func (ec *EmployeesCreate) SetNillablePhotoRemStatus(b *bool) *EmployeesCreate {
	if b != nil {
		ec.SetPhotoRemStatus(*b)
	}
	return ec
}

// SetPhotoRemarks sets the "PhotoRemarks" field.
func (ec *EmployeesCreate) SetPhotoRemarks(s string) *EmployeesCreate {
	ec.mutation.SetPhotoRemarks(s)
	return ec
}

// SetNillablePhotoRemarks sets the "PhotoRemarks" field if the given value is not nil.
func (ec *EmployeesCreate) SetNillablePhotoRemarks(s *string) *EmployeesCreate {
	if s != nil {
		ec.SetPhotoRemarks(*s)
	}
	return ec
}

// SetPostID sets the "PostID" field.
func (ec *EmployeesCreate) SetPostID(i int32) *EmployeesCreate {
	ec.mutation.SetPostID(i)
	return ec
}

// SetNillablePostID sets the "PostID" field if the given value is not nil.
func (ec *EmployeesCreate) SetNillablePostID(i *int32) *EmployeesCreate {
	if i != nil {
		ec.SetPostID(*i)
	}
	return ec
}

// SetPostCode sets the "PostCode" field.
func (ec *EmployeesCreate) SetPostCode(s string) *EmployeesCreate {
	ec.mutation.SetPostCode(s)
	return ec
}

// SetNillablePostCode sets the "PostCode" field if the given value is not nil.
func (ec *EmployeesCreate) SetNillablePostCode(s *string) *EmployeesCreate {
	if s != nil {
		ec.SetPostCode(*s)
	}
	return ec
}

// SetEmployeePost sets the "EmployeePost" field.
func (ec *EmployeesCreate) SetEmployeePost(s string) *EmployeesCreate {
	ec.mutation.SetEmployeePost(s)
	return ec
}

// SetEmployeePostVerified sets the "EmployeePostVerified" field.
func (ec *EmployeesCreate) SetEmployeePostVerified(b bool) *EmployeesCreate {
	ec.mutation.SetEmployeePostVerified(b)
	return ec
}

// SetNillableEmployeePostVerified sets the "EmployeePostVerified" field if the given value is not nil.
func (ec *EmployeesCreate) SetNillableEmployeePostVerified(b *bool) *EmployeesCreate {
	if b != nil {
		ec.SetEmployeePostVerified(*b)
	}
	return ec
}

// SetEmployeePostRemStatus sets the "EmployeePostRemStatus" field.
func (ec *EmployeesCreate) SetEmployeePostRemStatus(b bool) *EmployeesCreate {
	ec.mutation.SetEmployeePostRemStatus(b)
	return ec
}

// SetNillableEmployeePostRemStatus sets the "EmployeePostRemStatus" field if the given value is not nil.
func (ec *EmployeesCreate) SetNillableEmployeePostRemStatus(b *bool) *EmployeesCreate {
	if b != nil {
		ec.SetEmployeePostRemStatus(*b)
	}
	return ec
}

// SetEmployeePostRemarks sets the "EmployeePostRemarks" field.
func (ec *EmployeesCreate) SetEmployeePostRemarks(s string) *EmployeesCreate {
	ec.mutation.SetEmployeePostRemarks(s)
	return ec
}

// SetNillableEmployeePostRemarks sets the "EmployeePostRemarks" field if the given value is not nil.
func (ec *EmployeesCreate) SetNillableEmployeePostRemarks(s *string) *EmployeesCreate {
	if s != nil {
		ec.SetEmployeePostRemarks(*s)
	}
	return ec
}

// SetDesignationID sets the "DesignationID" field.
func (ec *EmployeesCreate) SetDesignationID(i int32) *EmployeesCreate {
	ec.mutation.SetDesignationID(i)
	return ec
}

// SetNillableDesignationID sets the "DesignationID" field if the given value is not nil.
func (ec *EmployeesCreate) SetNillableDesignationID(i *int32) *EmployeesCreate {
	if i != nil {
		ec.SetDesignationID(*i)
	}
	return ec
}

// SetEmployeeDesignation sets the "EmployeeDesignation" field.
func (ec *EmployeesCreate) SetEmployeeDesignation(s string) *EmployeesCreate {
	ec.mutation.SetEmployeeDesignation(s)
	return ec
}

// SetEmployeeDesignationVerified sets the "EmployeeDesignationVerified" field.
func (ec *EmployeesCreate) SetEmployeeDesignationVerified(b bool) *EmployeesCreate {
	ec.mutation.SetEmployeeDesignationVerified(b)
	return ec
}

// SetNillableEmployeeDesignationVerified sets the "EmployeeDesignationVerified" field if the given value is not nil.
func (ec *EmployeesCreate) SetNillableEmployeeDesignationVerified(b *bool) *EmployeesCreate {
	if b != nil {
		ec.SetEmployeeDesignationVerified(*b)
	}
	return ec
}

// SetEmployeeDesignationRemStatus sets the "EmployeeDesignationRemStatus" field.
func (ec *EmployeesCreate) SetEmployeeDesignationRemStatus(b bool) *EmployeesCreate {
	ec.mutation.SetEmployeeDesignationRemStatus(b)
	return ec
}

// SetNillableEmployeeDesignationRemStatus sets the "EmployeeDesignationRemStatus" field if the given value is not nil.
func (ec *EmployeesCreate) SetNillableEmployeeDesignationRemStatus(b *bool) *EmployeesCreate {
	if b != nil {
		ec.SetEmployeeDesignationRemStatus(*b)
	}
	return ec
}

// SetEmployeeDesignationRemarks sets the "EmployeeDesignationRemarks" field.
func (ec *EmployeesCreate) SetEmployeeDesignationRemarks(s string) *EmployeesCreate {
	ec.mutation.SetEmployeeDesignationRemarks(s)
	return ec
}

// SetNillableEmployeeDesignationRemarks sets the "EmployeeDesignationRemarks" field if the given value is not nil.
func (ec *EmployeesCreate) SetNillableEmployeeDesignationRemarks(s *string) *EmployeesCreate {
	if s != nil {
		ec.SetEmployeeDesignationRemarks(*s)
	}
	return ec
}

// SetCircleID sets the "CircleID" field.
func (ec *EmployeesCreate) SetCircleID(i int32) *EmployeesCreate {
	ec.mutation.SetCircleID(i)
	return ec
}

// SetNillableCircleID sets the "CircleID" field if the given value is not nil.
func (ec *EmployeesCreate) SetNillableCircleID(i *int32) *EmployeesCreate {
	if i != nil {
		ec.SetCircleID(*i)
	}
	return ec
}

// SetCircleName sets the "CircleName" field.
func (ec *EmployeesCreate) SetCircleName(s string) *EmployeesCreate {
	ec.mutation.SetCircleName(s)
	return ec
}

// SetCircleVerified sets the "CircleVerified" field.
func (ec *EmployeesCreate) SetCircleVerified(b bool) *EmployeesCreate {
	ec.mutation.SetCircleVerified(b)
	return ec
}

// SetNillableCircleVerified sets the "CircleVerified" field if the given value is not nil.
func (ec *EmployeesCreate) SetNillableCircleVerified(b *bool) *EmployeesCreate {
	if b != nil {
		ec.SetCircleVerified(*b)
	}
	return ec
}

// SetCircleRemStatus sets the "CircleRemStatus" field.
func (ec *EmployeesCreate) SetCircleRemStatus(b bool) *EmployeesCreate {
	ec.mutation.SetCircleRemStatus(b)
	return ec
}

// SetNillableCircleRemStatus sets the "CircleRemStatus" field if the given value is not nil.
func (ec *EmployeesCreate) SetNillableCircleRemStatus(b *bool) *EmployeesCreate {
	if b != nil {
		ec.SetCircleRemStatus(*b)
	}
	return ec
}

// SetCircleRemarks sets the "CircleRemarks" field.
func (ec *EmployeesCreate) SetCircleRemarks(s string) *EmployeesCreate {
	ec.mutation.SetCircleRemarks(s)
	return ec
}

// SetNillableCircleRemarks sets the "CircleRemarks" field if the given value is not nil.
func (ec *EmployeesCreate) SetNillableCircleRemarks(s *string) *EmployeesCreate {
	if s != nil {
		ec.SetCircleRemarks(*s)
	}
	return ec
}

// SetRegionID sets the "RegionID" field.
func (ec *EmployeesCreate) SetRegionID(i int32) *EmployeesCreate {
	ec.mutation.SetRegionID(i)
	return ec
}

// SetNillableRegionID sets the "RegionID" field if the given value is not nil.
func (ec *EmployeesCreate) SetNillableRegionID(i *int32) *EmployeesCreate {
	if i != nil {
		ec.SetRegionID(*i)
	}
	return ec
}

// SetRegionName sets the "RegionName" field.
func (ec *EmployeesCreate) SetRegionName(s string) *EmployeesCreate {
	ec.mutation.SetRegionName(s)
	return ec
}

// SetNillableRegionName sets the "RegionName" field if the given value is not nil.
func (ec *EmployeesCreate) SetNillableRegionName(s *string) *EmployeesCreate {
	if s != nil {
		ec.SetRegionName(*s)
	}
	return ec
}

// SetRegionVerified sets the "RegionVerified" field.
func (ec *EmployeesCreate) SetRegionVerified(b bool) *EmployeesCreate {
	ec.mutation.SetRegionVerified(b)
	return ec
}

// SetNillableRegionVerified sets the "RegionVerified" field if the given value is not nil.
func (ec *EmployeesCreate) SetNillableRegionVerified(b *bool) *EmployeesCreate {
	if b != nil {
		ec.SetRegionVerified(*b)
	}
	return ec
}

// SetRegionRemStatus sets the "RegionRemStatus" field.
func (ec *EmployeesCreate) SetRegionRemStatus(b bool) *EmployeesCreate {
	ec.mutation.SetRegionRemStatus(b)
	return ec
}

// SetNillableRegionRemStatus sets the "RegionRemStatus" field if the given value is not nil.
func (ec *EmployeesCreate) SetNillableRegionRemStatus(b *bool) *EmployeesCreate {
	if b != nil {
		ec.SetRegionRemStatus(*b)
	}
	return ec
}

// SetRegionRemarks sets the "RegionRemarks" field.
func (ec *EmployeesCreate) SetRegionRemarks(s string) *EmployeesCreate {
	ec.mutation.SetRegionRemarks(s)
	return ec
}

// SetNillableRegionRemarks sets the "RegionRemarks" field if the given value is not nil.
func (ec *EmployeesCreate) SetNillableRegionRemarks(s *string) *EmployeesCreate {
	if s != nil {
		ec.SetRegionRemarks(*s)
	}
	return ec
}

// SetDivisionID sets the "DivisionID" field.
func (ec *EmployeesCreate) SetDivisionID(i int32) *EmployeesCreate {
	ec.mutation.SetDivisionID(i)
	return ec
}

// SetNillableDivisionID sets the "DivisionID" field if the given value is not nil.
func (ec *EmployeesCreate) SetNillableDivisionID(i *int32) *EmployeesCreate {
	if i != nil {
		ec.SetDivisionID(*i)
	}
	return ec
}

// SetDivisionName sets the "DivisionName" field.
func (ec *EmployeesCreate) SetDivisionName(s string) *EmployeesCreate {
	ec.mutation.SetDivisionName(s)
	return ec
}

// SetNillableDivisionName sets the "DivisionName" field if the given value is not nil.
func (ec *EmployeesCreate) SetNillableDivisionName(s *string) *EmployeesCreate {
	if s != nil {
		ec.SetDivisionName(*s)
	}
	return ec
}

// SetDivisionVerified sets the "DivisionVerified" field.
func (ec *EmployeesCreate) SetDivisionVerified(b bool) *EmployeesCreate {
	ec.mutation.SetDivisionVerified(b)
	return ec
}

// SetNillableDivisionVerified sets the "DivisionVerified" field if the given value is not nil.
func (ec *EmployeesCreate) SetNillableDivisionVerified(b *bool) *EmployeesCreate {
	if b != nil {
		ec.SetDivisionVerified(*b)
	}
	return ec
}

// SetDivisionRemStatus sets the "DivisionRemStatus" field.
func (ec *EmployeesCreate) SetDivisionRemStatus(b bool) *EmployeesCreate {
	ec.mutation.SetDivisionRemStatus(b)
	return ec
}

// SetNillableDivisionRemStatus sets the "DivisionRemStatus" field if the given value is not nil.
func (ec *EmployeesCreate) SetNillableDivisionRemStatus(b *bool) *EmployeesCreate {
	if b != nil {
		ec.SetDivisionRemStatus(*b)
	}
	return ec
}

// SetDivisionRemarks sets the "DivisionRemarks" field.
func (ec *EmployeesCreate) SetDivisionRemarks(s string) *EmployeesCreate {
	ec.mutation.SetDivisionRemarks(s)
	return ec
}

// SetOfficeID sets the "OfficeID" field.
func (ec *EmployeesCreate) SetOfficeID(i int32) *EmployeesCreate {
	ec.mutation.SetOfficeID(i)
	return ec
}

// SetNillableOfficeID sets the "OfficeID" field if the given value is not nil.
func (ec *EmployeesCreate) SetNillableOfficeID(i *int32) *EmployeesCreate {
	if i != nil {
		ec.SetOfficeID(*i)
	}
	return ec
}

// SetOfficeName sets the "OfficeName" field.
func (ec *EmployeesCreate) SetOfficeName(s string) *EmployeesCreate {
	ec.mutation.SetOfficeName(s)
	return ec
}

// SetOfficeVerified sets the "OfficeVerified" field.
func (ec *EmployeesCreate) SetOfficeVerified(b bool) *EmployeesCreate {
	ec.mutation.SetOfficeVerified(b)
	return ec
}

// SetNillableOfficeVerified sets the "OfficeVerified" field if the given value is not nil.
func (ec *EmployeesCreate) SetNillableOfficeVerified(b *bool) *EmployeesCreate {
	if b != nil {
		ec.SetOfficeVerified(*b)
	}
	return ec
}

// SetOfficeRemStatus sets the "OfficeRemStatus" field.
func (ec *EmployeesCreate) SetOfficeRemStatus(b bool) *EmployeesCreate {
	ec.mutation.SetOfficeRemStatus(b)
	return ec
}

// SetNillableOfficeRemStatus sets the "OfficeRemStatus" field if the given value is not nil.
func (ec *EmployeesCreate) SetNillableOfficeRemStatus(b *bool) *EmployeesCreate {
	if b != nil {
		ec.SetOfficeRemStatus(*b)
	}
	return ec
}

// SetOfficeRemarks sets the "OfficeRemarks" field.
func (ec *EmployeesCreate) SetOfficeRemarks(s string) *EmployeesCreate {
	ec.mutation.SetOfficeRemarks(s)
	return ec
}

// SetNillableOfficeRemarks sets the "OfficeRemarks" field if the given value is not nil.
func (ec *EmployeesCreate) SetNillableOfficeRemarks(s *string) *EmployeesCreate {
	if s != nil {
		ec.SetOfficeRemarks(*s)
	}
	return ec
}

// SetRole sets the "Role" field.
func (ec *EmployeesCreate) SetRole(s string) *EmployeesCreate {
	ec.mutation.SetRole(s)
	return ec
}

// SetRoleVerified sets the "RoleVerified" field.
func (ec *EmployeesCreate) SetRoleVerified(b bool) *EmployeesCreate {
	ec.mutation.SetRoleVerified(b)
	return ec
}

// SetNillableRoleVerified sets the "RoleVerified" field if the given value is not nil.
func (ec *EmployeesCreate) SetNillableRoleVerified(b *bool) *EmployeesCreate {
	if b != nil {
		ec.SetRoleVerified(*b)
	}
	return ec
}

// SetRoleRemStatus sets the "RoleRemStatus" field.
func (ec *EmployeesCreate) SetRoleRemStatus(b bool) *EmployeesCreate {
	ec.mutation.SetRoleRemStatus(b)
	return ec
}

// SetNillableRoleRemStatus sets the "RoleRemStatus" field if the given value is not nil.
func (ec *EmployeesCreate) SetNillableRoleRemStatus(b *bool) *EmployeesCreate {
	if b != nil {
		ec.SetRoleRemStatus(*b)
	}
	return ec
}

// SetRoleRemarks sets the "RoleRemarks" field.
func (ec *EmployeesCreate) SetRoleRemarks(s string) *EmployeesCreate {
	ec.mutation.SetRoleRemarks(s)
	return ec
}

// SetDCCS sets the "DCCS" field.
func (ec *EmployeesCreate) SetDCCS(t time.Time) *EmployeesCreate {
	ec.mutation.SetDCCS(t)
	return ec
}

// SetDCCSVerified sets the "DCCSVerified" field.
func (ec *EmployeesCreate) SetDCCSVerified(b bool) *EmployeesCreate {
	ec.mutation.SetDCCSVerified(b)
	return ec
}

// SetNillableDCCSVerified sets the "DCCSVerified" field if the given value is not nil.
func (ec *EmployeesCreate) SetNillableDCCSVerified(b *bool) *EmployeesCreate {
	if b != nil {
		ec.SetDCCSVerified(*b)
	}
	return ec
}

// SetDCCSRemStatus sets the "DCCSRemStatus" field.
func (ec *EmployeesCreate) SetDCCSRemStatus(b bool) *EmployeesCreate {
	ec.mutation.SetDCCSRemStatus(b)
	return ec
}

// SetNillableDCCSRemStatus sets the "DCCSRemStatus" field if the given value is not nil.
func (ec *EmployeesCreate) SetNillableDCCSRemStatus(b *bool) *EmployeesCreate {
	if b != nil {
		ec.SetDCCSRemStatus(*b)
	}
	return ec
}

// SetDCCSRemarks sets the "DCCSRemarks" field.
func (ec *EmployeesCreate) SetDCCSRemarks(s string) *EmployeesCreate {
	ec.mutation.SetDCCSRemarks(s)
	return ec
}

// SetNillableDCCSRemarks sets the "DCCSRemarks" field if the given value is not nil.
func (ec *EmployeesCreate) SetNillableDCCSRemarks(s *string) *EmployeesCreate {
	if s != nil {
		ec.SetDCCSRemarks(*s)
	}
	return ec
}

// SetDCInPresentCadre sets the "DCInPresentCadre" field.
func (ec *EmployeesCreate) SetDCInPresentCadre(t time.Time) *EmployeesCreate {
	ec.mutation.SetDCInPresentCadre(t)
	return ec
}

// SetDCInPresentCadreVerified sets the "DCInPresentCadreVerified" field.
func (ec *EmployeesCreate) SetDCInPresentCadreVerified(b bool) *EmployeesCreate {
	ec.mutation.SetDCInPresentCadreVerified(b)
	return ec
}

// SetNillableDCInPresentCadreVerified sets the "DCInPresentCadreVerified" field if the given value is not nil.
func (ec *EmployeesCreate) SetNillableDCInPresentCadreVerified(b *bool) *EmployeesCreate {
	if b != nil {
		ec.SetDCInPresentCadreVerified(*b)
	}
	return ec
}

// SetDCInPresentCadreRemStatus sets the "DCInPresentCadreRemStatus" field.
func (ec *EmployeesCreate) SetDCInPresentCadreRemStatus(b bool) *EmployeesCreate {
	ec.mutation.SetDCInPresentCadreRemStatus(b)
	return ec
}

// SetNillableDCInPresentCadreRemStatus sets the "DCInPresentCadreRemStatus" field if the given value is not nil.
func (ec *EmployeesCreate) SetNillableDCInPresentCadreRemStatus(b *bool) *EmployeesCreate {
	if b != nil {
		ec.SetDCInPresentCadreRemStatus(*b)
	}
	return ec
}

// SetDCInPresentCadreRemarks sets the "DCInPresentCadreRemarks" field.
func (ec *EmployeesCreate) SetDCInPresentCadreRemarks(s string) *EmployeesCreate {
	ec.mutation.SetDCInPresentCadreRemarks(s)
	return ec
}

// SetNillableDCInPresentCadreRemarks sets the "DCInPresentCadreRemarks" field if the given value is not nil.
func (ec *EmployeesCreate) SetNillableDCInPresentCadreRemarks(s *string) *EmployeesCreate {
	if s != nil {
		ec.SetDCInPresentCadreRemarks(*s)
	}
	return ec
}

// SetAPSWorking sets the "APSWorking" field.
func (ec *EmployeesCreate) SetAPSWorking(b bool) *EmployeesCreate {
	ec.mutation.SetAPSWorking(b)
	return ec
}

// SetNillableAPSWorking sets the "APSWorking" field if the given value is not nil.
func (ec *EmployeesCreate) SetNillableAPSWorking(b *bool) *EmployeesCreate {
	if b != nil {
		ec.SetAPSWorking(*b)
	}
	return ec
}

// SetAPSWorkingVerified sets the "APSWorkingVerified" field.
func (ec *EmployeesCreate) SetAPSWorkingVerified(b bool) *EmployeesCreate {
	ec.mutation.SetAPSWorkingVerified(b)
	return ec
}

// SetNillableAPSWorkingVerified sets the "APSWorkingVerified" field if the given value is not nil.
func (ec *EmployeesCreate) SetNillableAPSWorkingVerified(b *bool) *EmployeesCreate {
	if b != nil {
		ec.SetAPSWorkingVerified(*b)
	}
	return ec
}

// SetAPSWorkingRemStatus sets the "APSWorkingRemStatus" field.
func (ec *EmployeesCreate) SetAPSWorkingRemStatus(b bool) *EmployeesCreate {
	ec.mutation.SetAPSWorkingRemStatus(b)
	return ec
}

// SetNillableAPSWorkingRemStatus sets the "APSWorkingRemStatus" field if the given value is not nil.
func (ec *EmployeesCreate) SetNillableAPSWorkingRemStatus(b *bool) *EmployeesCreate {
	if b != nil {
		ec.SetAPSWorkingRemStatus(*b)
	}
	return ec
}

// SetAPSWorkingRemarks sets the "APSWorkingRemarks" field.
func (ec *EmployeesCreate) SetAPSWorkingRemarks(s string) *EmployeesCreate {
	ec.mutation.SetAPSWorkingRemarks(s)
	return ec
}

// SetNillableAPSWorkingRemarks sets the "APSWorkingRemarks" field if the given value is not nil.
func (ec *EmployeesCreate) SetNillableAPSWorkingRemarks(s *string) *EmployeesCreate {
	if s != nil {
		ec.SetAPSWorkingRemarks(*s)
	}
	return ec
}

// SetProfilestatus sets the "profilestatus" field.
func (ec *EmployeesCreate) SetProfilestatus(b bool) *EmployeesCreate {
	ec.mutation.SetProfilestatus(b)
	return ec
}

// SetNillableProfilestatus sets the "profilestatus" field if the given value is not nil.
func (ec *EmployeesCreate) SetNillableProfilestatus(b *bool) *EmployeesCreate {
	if b != nil {
		ec.SetProfilestatus(*b)
	}
	return ec
}

// SetRoleUserCode sets the "RoleUserCode" field.
func (ec *EmployeesCreate) SetRoleUserCode(i int32) *EmployeesCreate {
	ec.mutation.SetRoleUserCode(i)
	return ec
}

// SetNillableRoleUserCode sets the "RoleUserCode" field if the given value is not nil.
func (ec *EmployeesCreate) SetNillableRoleUserCode(i *int32) *EmployeesCreate {
	if i != nil {
		ec.SetRoleUserCode(*i)
	}
	return ec
}

// SetID sets the "id" field.
func (ec *EmployeesCreate) SetID(i int32) *EmployeesCreate {
	ec.mutation.SetID(i)
	return ec
}

// Mutation returns the EmployeesMutation object of the builder.
func (ec *EmployeesCreate) Mutation() *EmployeesMutation {
	return ec.mutation
}

// Save creates the Employees in the database.
func (ec *EmployeesCreate) Save(ctx context.Context) (*Employees, error) {
	ec.defaults()
	return withHooks(ctx, ec.sqlSave, ec.mutation, ec.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ec *EmployeesCreate) SaveX(ctx context.Context) *Employees {
	v, err := ec.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ec *EmployeesCreate) Exec(ctx context.Context) error {
	_, err := ec.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ec *EmployeesCreate) ExecX(ctx context.Context) {
	if err := ec.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ec *EmployeesCreate) defaults() {
	if _, ok := ec.mutation.IDVerified(); !ok {
		v := employees.DefaultIDVerified
		ec.mutation.SetIDVerified(v)
	}
	if _, ok := ec.mutation.IDRemStatus(); !ok {
		v := employees.DefaultIDRemStatus
		ec.mutation.SetIDRemStatus(v)
	}
	if _, ok := ec.mutation.NameVerified(); !ok {
		v := employees.DefaultNameVerified
		ec.mutation.SetNameVerified(v)
	}
	if _, ok := ec.mutation.NameRemStatus(); !ok {
		v := employees.DefaultNameRemStatus
		ec.mutation.SetNameRemStatus(v)
	}
	if _, ok := ec.mutation.FathersNameVerified(); !ok {
		v := employees.DefaultFathersNameVerified
		ec.mutation.SetFathersNameVerified(v)
	}
	if _, ok := ec.mutation.FathersNameRemStatus(); !ok {
		v := employees.DefaultFathersNameRemStatus
		ec.mutation.SetFathersNameRemStatus(v)
	}
	if _, ok := ec.mutation.DOBVerified(); !ok {
		v := employees.DefaultDOBVerified
		ec.mutation.SetDOBVerified(v)
	}
	if _, ok := ec.mutation.DOBRemStatus(); !ok {
		v := employees.DefaultDOBRemStatus
		ec.mutation.SetDOBRemStatus(v)
	}
	if _, ok := ec.mutation.GenderVerified(); !ok {
		v := employees.DefaultGenderVerified
		ec.mutation.SetGenderVerified(v)
	}
	if _, ok := ec.mutation.GenderRemStatus(); !ok {
		v := employees.DefaultGenderRemStatus
		ec.mutation.SetGenderRemStatus(v)
	}
	if _, ok := ec.mutation.MobileNumberVerified(); !ok {
		v := employees.DefaultMobileNumberVerified
		ec.mutation.SetMobileNumberVerified(v)
	}
	if _, ok := ec.mutation.MobileNumberRemStatus(); !ok {
		v := employees.DefaultMobileNumberRemStatus
		ec.mutation.SetMobileNumberRemStatus(v)
	}
	if _, ok := ec.mutation.EmailIDVerified(); !ok {
		v := employees.DefaultEmailIDVerified
		ec.mutation.SetEmailIDVerified(v)
	}
	if _, ok := ec.mutation.EmailIDRemStatus(); !ok {
		v := employees.DefaultEmailIDRemStatus
		ec.mutation.SetEmailIDRemStatus(v)
	}
	if _, ok := ec.mutation.EmployeeCategoryCodeVerified(); !ok {
		v := employees.DefaultEmployeeCategoryCodeVerified
		ec.mutation.SetEmployeeCategoryCodeVerified(v)
	}
	if _, ok := ec.mutation.EmployeeCategoryCodeRemStatus(); !ok {
		v := employees.DefaultEmployeeCategoryCodeRemStatus
		ec.mutation.SetEmployeeCategoryCodeRemStatus(v)
	}
	if _, ok := ec.mutation.WithDisabilityVerified(); !ok {
		v := employees.DefaultWithDisabilityVerified
		ec.mutation.SetWithDisabilityVerified(v)
	}
	if _, ok := ec.mutation.WithDisabilityRemStatus(); !ok {
		v := employees.DefaultWithDisabilityRemStatus
		ec.mutation.SetWithDisabilityRemStatus(v)
	}
	if _, ok := ec.mutation.DisabilityTypeVerified(); !ok {
		v := employees.DefaultDisabilityTypeVerified
		ec.mutation.SetDisabilityTypeVerified(v)
	}
	if _, ok := ec.mutation.DisabilityTypeRemStatus(); !ok {
		v := employees.DefaultDisabilityTypeRemStatus
		ec.mutation.SetDisabilityTypeRemStatus(v)
	}
	if _, ok := ec.mutation.DisabilityPercentageVerified(); !ok {
		v := employees.DefaultDisabilityPercentageVerified
		ec.mutation.SetDisabilityPercentageVerified(v)
	}
	if _, ok := ec.mutation.DisabilityPercentageRemStatus(); !ok {
		v := employees.DefaultDisabilityPercentageRemStatus
		ec.mutation.SetDisabilityPercentageRemStatus(v)
	}
	if _, ok := ec.mutation.SignatureVerified(); !ok {
		v := employees.DefaultSignatureVerified
		ec.mutation.SetSignatureVerified(v)
	}
	if _, ok := ec.mutation.SignatureRemStatus(); !ok {
		v := employees.DefaultSignatureRemStatus
		ec.mutation.SetSignatureRemStatus(v)
	}
	if _, ok := ec.mutation.PhotoVerified(); !ok {
		v := employees.DefaultPhotoVerified
		ec.mutation.SetPhotoVerified(v)
	}
	if _, ok := ec.mutation.PhotoRemStatus(); !ok {
		v := employees.DefaultPhotoRemStatus
		ec.mutation.SetPhotoRemStatus(v)
	}
	if _, ok := ec.mutation.EmployeePostVerified(); !ok {
		v := employees.DefaultEmployeePostVerified
		ec.mutation.SetEmployeePostVerified(v)
	}
	if _, ok := ec.mutation.EmployeePostRemStatus(); !ok {
		v := employees.DefaultEmployeePostRemStatus
		ec.mutation.SetEmployeePostRemStatus(v)
	}
	if _, ok := ec.mutation.EmployeeDesignationVerified(); !ok {
		v := employees.DefaultEmployeeDesignationVerified
		ec.mutation.SetEmployeeDesignationVerified(v)
	}
	if _, ok := ec.mutation.EmployeeDesignationRemStatus(); !ok {
		v := employees.DefaultEmployeeDesignationRemStatus
		ec.mutation.SetEmployeeDesignationRemStatus(v)
	}
	if _, ok := ec.mutation.CircleVerified(); !ok {
		v := employees.DefaultCircleVerified
		ec.mutation.SetCircleVerified(v)
	}
	if _, ok := ec.mutation.CircleRemStatus(); !ok {
		v := employees.DefaultCircleRemStatus
		ec.mutation.SetCircleRemStatus(v)
	}
	if _, ok := ec.mutation.RegionVerified(); !ok {
		v := employees.DefaultRegionVerified
		ec.mutation.SetRegionVerified(v)
	}
	if _, ok := ec.mutation.RegionRemStatus(); !ok {
		v := employees.DefaultRegionRemStatus
		ec.mutation.SetRegionRemStatus(v)
	}
	if _, ok := ec.mutation.DivisionVerified(); !ok {
		v := employees.DefaultDivisionVerified
		ec.mutation.SetDivisionVerified(v)
	}
	if _, ok := ec.mutation.DivisionRemStatus(); !ok {
		v := employees.DefaultDivisionRemStatus
		ec.mutation.SetDivisionRemStatus(v)
	}
	if _, ok := ec.mutation.OfficeVerified(); !ok {
		v := employees.DefaultOfficeVerified
		ec.mutation.SetOfficeVerified(v)
	}
	if _, ok := ec.mutation.OfficeRemStatus(); !ok {
		v := employees.DefaultOfficeRemStatus
		ec.mutation.SetOfficeRemStatus(v)
	}
	if _, ok := ec.mutation.RoleVerified(); !ok {
		v := employees.DefaultRoleVerified
		ec.mutation.SetRoleVerified(v)
	}
	if _, ok := ec.mutation.RoleRemStatus(); !ok {
		v := employees.DefaultRoleRemStatus
		ec.mutation.SetRoleRemStatus(v)
	}
	if _, ok := ec.mutation.DCCSVerified(); !ok {
		v := employees.DefaultDCCSVerified
		ec.mutation.SetDCCSVerified(v)
	}
	if _, ok := ec.mutation.DCCSRemStatus(); !ok {
		v := employees.DefaultDCCSRemStatus
		ec.mutation.SetDCCSRemStatus(v)
	}
	if _, ok := ec.mutation.DCInPresentCadreVerified(); !ok {
		v := employees.DefaultDCInPresentCadreVerified
		ec.mutation.SetDCInPresentCadreVerified(v)
	}
	if _, ok := ec.mutation.DCInPresentCadreRemStatus(); !ok {
		v := employees.DefaultDCInPresentCadreRemStatus
		ec.mutation.SetDCInPresentCadreRemStatus(v)
	}
	if _, ok := ec.mutation.APSWorkingVerified(); !ok {
		v := employees.DefaultAPSWorkingVerified
		ec.mutation.SetAPSWorkingVerified(v)
	}
	if _, ok := ec.mutation.APSWorkingRemStatus(); !ok {
		v := employees.DefaultAPSWorkingRemStatus
		ec.mutation.SetAPSWorkingRemStatus(v)
	}
	if _, ok := ec.mutation.Profilestatus(); !ok {
		v := employees.DefaultProfilestatus
		ec.mutation.SetProfilestatus(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ec *EmployeesCreate) check() error {
	if _, ok := ec.mutation.EmployeedID(); !ok {
		return &ValidationError{Name: "EmployeedID", err: errors.New(`ent: missing required field "Employees.EmployeedID"`)}
	}
	if _, ok := ec.mutation.IDVerified(); !ok {
		return &ValidationError{Name: "IDVerified", err: errors.New(`ent: missing required field "Employees.IDVerified"`)}
	}
	if _, ok := ec.mutation.IDRemStatus(); !ok {
		return &ValidationError{Name: "IDRemStatus", err: errors.New(`ent: missing required field "Employees.IDRemStatus"`)}
	}
	if _, ok := ec.mutation.EmployeeName(); !ok {
		return &ValidationError{Name: "EmployeeName", err: errors.New(`ent: missing required field "Employees.EmployeeName"`)}
	}
	if _, ok := ec.mutation.NameVerified(); !ok {
		return &ValidationError{Name: "nameVerified", err: errors.New(`ent: missing required field "Employees.nameVerified"`)}
	}
	if _, ok := ec.mutation.NameRemStatus(); !ok {
		return &ValidationError{Name: "nameRemStatus", err: errors.New(`ent: missing required field "Employees.nameRemStatus"`)}
	}
	if _, ok := ec.mutation.EmployeeFathersName(); !ok {
		return &ValidationError{Name: "EmployeeFathersName", err: errors.New(`ent: missing required field "Employees.EmployeeFathersName"`)}
	}
	if _, ok := ec.mutation.FathersNameVerified(); !ok {
		return &ValidationError{Name: "FathersNameVerified", err: errors.New(`ent: missing required field "Employees.FathersNameVerified"`)}
	}
	if _, ok := ec.mutation.FathersNameRemStatus(); !ok {
		return &ValidationError{Name: "FathersNameRemStatus", err: errors.New(`ent: missing required field "Employees.FathersNameRemStatus"`)}
	}
	if _, ok := ec.mutation.DOB(); !ok {
		return &ValidationError{Name: "DOB", err: errors.New(`ent: missing required field "Employees.DOB"`)}
	}
	if _, ok := ec.mutation.DOBVerified(); !ok {
		return &ValidationError{Name: "DOBVerified", err: errors.New(`ent: missing required field "Employees.DOBVerified"`)}
	}
	if _, ok := ec.mutation.DOBRemStatus(); !ok {
		return &ValidationError{Name: "DOBRemStatus", err: errors.New(`ent: missing required field "Employees.DOBRemStatus"`)}
	}
	if _, ok := ec.mutation.Gender(); !ok {
		return &ValidationError{Name: "Gender", err: errors.New(`ent: missing required field "Employees.Gender"`)}
	}
	if v, ok := ec.mutation.Gender(); ok {
		if err := employees.GenderValidator(v); err != nil {
			return &ValidationError{Name: "Gender", err: fmt.Errorf(`ent: validator failed for field "Employees.Gender": %w`, err)}
		}
	}
	if _, ok := ec.mutation.GenderVerified(); !ok {
		return &ValidationError{Name: "genderVerified", err: errors.New(`ent: missing required field "Employees.genderVerified"`)}
	}
	if _, ok := ec.mutation.GenderRemStatus(); !ok {
		return &ValidationError{Name: "genderRemStatus", err: errors.New(`ent: missing required field "Employees.genderRemStatus"`)}
	}
	if _, ok := ec.mutation.MobileNumberVerified(); !ok {
		return &ValidationError{Name: "MobileNumberVerified", err: errors.New(`ent: missing required field "Employees.MobileNumberVerified"`)}
	}
	if _, ok := ec.mutation.MobileNumberRemStatus(); !ok {
		return &ValidationError{Name: "MobileNumberRemStatus", err: errors.New(`ent: missing required field "Employees.MobileNumberRemStatus"`)}
	}
	if _, ok := ec.mutation.EmailIDVerified(); !ok {
		return &ValidationError{Name: "EmailIDVerified", err: errors.New(`ent: missing required field "Employees.EmailIDVerified"`)}
	}
	if _, ok := ec.mutation.EmailIDRemStatus(); !ok {
		return &ValidationError{Name: "EmailIDRemStatus", err: errors.New(`ent: missing required field "Employees.EmailIDRemStatus"`)}
	}
	if _, ok := ec.mutation.EmployeeCategory(); !ok {
		return &ValidationError{Name: "EmployeeCategory", err: errors.New(`ent: missing required field "Employees.EmployeeCategory"`)}
	}
	if _, ok := ec.mutation.EmployeeCategoryCodeVerified(); !ok {
		return &ValidationError{Name: "EmployeeCategoryCodeVerified", err: errors.New(`ent: missing required field "Employees.EmployeeCategoryCodeVerified"`)}
	}
	if _, ok := ec.mutation.EmployeeCategoryCodeRemStatus(); !ok {
		return &ValidationError{Name: "EmployeeCategoryCodeRemStatus", err: errors.New(`ent: missing required field "Employees.EmployeeCategoryCodeRemStatus"`)}
	}
	if _, ok := ec.mutation.WithDisability(); !ok {
		return &ValidationError{Name: "WithDisability", err: errors.New(`ent: missing required field "Employees.WithDisability"`)}
	}
	if _, ok := ec.mutation.WithDisabilityVerified(); !ok {
		return &ValidationError{Name: "WithDisabilityVerified", err: errors.New(`ent: missing required field "Employees.WithDisabilityVerified"`)}
	}
	if _, ok := ec.mutation.WithDisabilityRemStatus(); !ok {
		return &ValidationError{Name: "WithDisabilityRemStatus", err: errors.New(`ent: missing required field "Employees.WithDisabilityRemStatus"`)}
	}
	if _, ok := ec.mutation.DisabilityTypeVerified(); !ok {
		return &ValidationError{Name: "DisabilityTypeVerified", err: errors.New(`ent: missing required field "Employees.DisabilityTypeVerified"`)}
	}
	if _, ok := ec.mutation.DisabilityTypeRemStatus(); !ok {
		return &ValidationError{Name: "DisabilityTypeRemStatus", err: errors.New(`ent: missing required field "Employees.DisabilityTypeRemStatus"`)}
	}
	if _, ok := ec.mutation.DisabilityPercentageVerified(); !ok {
		return &ValidationError{Name: "DisabilityPercentageVerified", err: errors.New(`ent: missing required field "Employees.DisabilityPercentageVerified"`)}
	}
	if _, ok := ec.mutation.DisabilityPercentageRemStatus(); !ok {
		return &ValidationError{Name: "DisabilityPercentageRemStatus", err: errors.New(`ent: missing required field "Employees.DisabilityPercentageRemStatus"`)}
	}
	if _, ok := ec.mutation.Signature(); !ok {
		return &ValidationError{Name: "Signature", err: errors.New(`ent: missing required field "Employees.Signature"`)}
	}
	if _, ok := ec.mutation.SignatureVerified(); !ok {
		return &ValidationError{Name: "SignatureVerified", err: errors.New(`ent: missing required field "Employees.SignatureVerified"`)}
	}
	if _, ok := ec.mutation.SignatureRemStatus(); !ok {
		return &ValidationError{Name: "SignatureRemStatus", err: errors.New(`ent: missing required field "Employees.SignatureRemStatus"`)}
	}
	if _, ok := ec.mutation.Photo(); !ok {
		return &ValidationError{Name: "Photo", err: errors.New(`ent: missing required field "Employees.Photo"`)}
	}
	if _, ok := ec.mutation.PhotoVerified(); !ok {
		return &ValidationError{Name: "PhotoVerified", err: errors.New(`ent: missing required field "Employees.PhotoVerified"`)}
	}
	if _, ok := ec.mutation.PhotoRemStatus(); !ok {
		return &ValidationError{Name: "PhotoRemStatus", err: errors.New(`ent: missing required field "Employees.PhotoRemStatus"`)}
	}
	if _, ok := ec.mutation.EmployeePost(); !ok {
		return &ValidationError{Name: "EmployeePost", err: errors.New(`ent: missing required field "Employees.EmployeePost"`)}
	}
	if _, ok := ec.mutation.EmployeePostVerified(); !ok {
		return &ValidationError{Name: "EmployeePostVerified", err: errors.New(`ent: missing required field "Employees.EmployeePostVerified"`)}
	}
	if _, ok := ec.mutation.EmployeePostRemStatus(); !ok {
		return &ValidationError{Name: "EmployeePostRemStatus", err: errors.New(`ent: missing required field "Employees.EmployeePostRemStatus"`)}
	}
	if _, ok := ec.mutation.EmployeeDesignation(); !ok {
		return &ValidationError{Name: "EmployeeDesignation", err: errors.New(`ent: missing required field "Employees.EmployeeDesignation"`)}
	}
	if _, ok := ec.mutation.EmployeeDesignationVerified(); !ok {
		return &ValidationError{Name: "EmployeeDesignationVerified", err: errors.New(`ent: missing required field "Employees.EmployeeDesignationVerified"`)}
	}
	if _, ok := ec.mutation.EmployeeDesignationRemStatus(); !ok {
		return &ValidationError{Name: "EmployeeDesignationRemStatus", err: errors.New(`ent: missing required field "Employees.EmployeeDesignationRemStatus"`)}
	}
	if _, ok := ec.mutation.CircleName(); !ok {
		return &ValidationError{Name: "CircleName", err: errors.New(`ent: missing required field "Employees.CircleName"`)}
	}
	if _, ok := ec.mutation.CircleVerified(); !ok {
		return &ValidationError{Name: "CircleVerified", err: errors.New(`ent: missing required field "Employees.CircleVerified"`)}
	}
	if _, ok := ec.mutation.CircleRemStatus(); !ok {
		return &ValidationError{Name: "CircleRemStatus", err: errors.New(`ent: missing required field "Employees.CircleRemStatus"`)}
	}
	if _, ok := ec.mutation.RegionVerified(); !ok {
		return &ValidationError{Name: "RegionVerified", err: errors.New(`ent: missing required field "Employees.RegionVerified"`)}
	}
	if _, ok := ec.mutation.RegionRemStatus(); !ok {
		return &ValidationError{Name: "RegionRemStatus", err: errors.New(`ent: missing required field "Employees.RegionRemStatus"`)}
	}
	if _, ok := ec.mutation.DivisionVerified(); !ok {
		return &ValidationError{Name: "DivisionVerified", err: errors.New(`ent: missing required field "Employees.DivisionVerified"`)}
	}
	if _, ok := ec.mutation.DivisionRemStatus(); !ok {
		return &ValidationError{Name: "DivisionRemStatus", err: errors.New(`ent: missing required field "Employees.DivisionRemStatus"`)}
	}
	if _, ok := ec.mutation.DivisionRemarks(); !ok {
		return &ValidationError{Name: "DivisionRemarks", err: errors.New(`ent: missing required field "Employees.DivisionRemarks"`)}
	}
	if _, ok := ec.mutation.OfficeName(); !ok {
		return &ValidationError{Name: "OfficeName", err: errors.New(`ent: missing required field "Employees.OfficeName"`)}
	}
	if _, ok := ec.mutation.OfficeVerified(); !ok {
		return &ValidationError{Name: "OfficeVerified", err: errors.New(`ent: missing required field "Employees.OfficeVerified"`)}
	}
	if _, ok := ec.mutation.OfficeRemStatus(); !ok {
		return &ValidationError{Name: "OfficeRemStatus", err: errors.New(`ent: missing required field "Employees.OfficeRemStatus"`)}
	}
	if _, ok := ec.mutation.Role(); !ok {
		return &ValidationError{Name: "Role", err: errors.New(`ent: missing required field "Employees.Role"`)}
	}
	if _, ok := ec.mutation.RoleVerified(); !ok {
		return &ValidationError{Name: "RoleVerified", err: errors.New(`ent: missing required field "Employees.RoleVerified"`)}
	}
	if _, ok := ec.mutation.RoleRemStatus(); !ok {
		return &ValidationError{Name: "RoleRemStatus", err: errors.New(`ent: missing required field "Employees.RoleRemStatus"`)}
	}
	if _, ok := ec.mutation.RoleRemarks(); !ok {
		return &ValidationError{Name: "RoleRemarks", err: errors.New(`ent: missing required field "Employees.RoleRemarks"`)}
	}
	if _, ok := ec.mutation.DCCS(); !ok {
		return &ValidationError{Name: "DCCS", err: errors.New(`ent: missing required field "Employees.DCCS"`)}
	}
	if _, ok := ec.mutation.DCCSVerified(); !ok {
		return &ValidationError{Name: "DCCSVerified", err: errors.New(`ent: missing required field "Employees.DCCSVerified"`)}
	}
	if _, ok := ec.mutation.DCCSRemStatus(); !ok {
		return &ValidationError{Name: "DCCSRemStatus", err: errors.New(`ent: missing required field "Employees.DCCSRemStatus"`)}
	}
	if _, ok := ec.mutation.DCInPresentCadre(); !ok {
		return &ValidationError{Name: "DCInPresentCadre", err: errors.New(`ent: missing required field "Employees.DCInPresentCadre"`)}
	}
	if _, ok := ec.mutation.DCInPresentCadreVerified(); !ok {
		return &ValidationError{Name: "DCInPresentCadreVerified", err: errors.New(`ent: missing required field "Employees.DCInPresentCadreVerified"`)}
	}
	if _, ok := ec.mutation.DCInPresentCadreRemStatus(); !ok {
		return &ValidationError{Name: "DCInPresentCadreRemStatus", err: errors.New(`ent: missing required field "Employees.DCInPresentCadreRemStatus"`)}
	}
	if _, ok := ec.mutation.APSWorkingVerified(); !ok {
		return &ValidationError{Name: "APSWorkingVerified", err: errors.New(`ent: missing required field "Employees.APSWorkingVerified"`)}
	}
	if _, ok := ec.mutation.APSWorkingRemStatus(); !ok {
		return &ValidationError{Name: "APSWorkingRemStatus", err: errors.New(`ent: missing required field "Employees.APSWorkingRemStatus"`)}
	}
	if _, ok := ec.mutation.Profilestatus(); !ok {
		return &ValidationError{Name: "profilestatus", err: errors.New(`ent: missing required field "Employees.profilestatus"`)}
	}
	return nil
}

func (ec *EmployeesCreate) sqlSave(ctx context.Context) (*Employees, error) {
	if err := ec.check(); err != nil {
		return nil, err
	}
	_node, _spec := ec.createSpec()
	if err := sqlgraph.CreateNode(ctx, ec.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int32(id)
	}
	ec.mutation.id = &_node.ID
	ec.mutation.done = true
	return _node, nil
}

func (ec *EmployeesCreate) createSpec() (*Employees, *sqlgraph.CreateSpec) {
	var (
		_node = &Employees{config: ec.config}
		_spec = sqlgraph.NewCreateSpec(employees.Table, sqlgraph.NewFieldSpec(employees.FieldID, field.TypeInt32))
	)
	if id, ok := ec.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ec.mutation.EmployeedID(); ok {
		_spec.SetField(employees.FieldEmployeedID, field.TypeInt32, value)
		_node.EmployeedID = value
	}
	if value, ok := ec.mutation.IDVerified(); ok {
		_spec.SetField(employees.FieldIDVerified, field.TypeBool, value)
		_node.IDVerified = value
	}
	if value, ok := ec.mutation.IDRemStatus(); ok {
		_spec.SetField(employees.FieldIDRemStatus, field.TypeBool, value)
		_node.IDRemStatus = value
	}
	if value, ok := ec.mutation.IDRemarks(); ok {
		_spec.SetField(employees.FieldIDRemarks, field.TypeString, value)
		_node.IDRemarks = value
	}
	if value, ok := ec.mutation.EmployeeName(); ok {
		_spec.SetField(employees.FieldEmployeeName, field.TypeString, value)
		_node.EmployeeName = value
	}
	if value, ok := ec.mutation.NameVerified(); ok {
		_spec.SetField(employees.FieldNameVerified, field.TypeBool, value)
		_node.NameVerified = value
	}
	if value, ok := ec.mutation.NameRemStatus(); ok {
		_spec.SetField(employees.FieldNameRemStatus, field.TypeBool, value)
		_node.NameRemStatus = value
	}
	if value, ok := ec.mutation.NameRemarks(); ok {
		_spec.SetField(employees.FieldNameRemarks, field.TypeString, value)
		_node.NameRemarks = value
	}
	if value, ok := ec.mutation.EmployeeFathersName(); ok {
		_spec.SetField(employees.FieldEmployeeFathersName, field.TypeString, value)
		_node.EmployeeFathersName = value
	}
	if value, ok := ec.mutation.FathersNameVerified(); ok {
		_spec.SetField(employees.FieldFathersNameVerified, field.TypeBool, value)
		_node.FathersNameVerified = value
	}
	if value, ok := ec.mutation.FathersNameRemStatus(); ok {
		_spec.SetField(employees.FieldFathersNameRemStatus, field.TypeBool, value)
		_node.FathersNameRemStatus = value
	}
	if value, ok := ec.mutation.FathersNameRemarks(); ok {
		_spec.SetField(employees.FieldFathersNameRemarks, field.TypeString, value)
		_node.FathersNameRemarks = value
	}
	if value, ok := ec.mutation.DOB(); ok {
		_spec.SetField(employees.FieldDOB, field.TypeTime, value)
		_node.DOB = value
	}
	if value, ok := ec.mutation.DOBVerified(); ok {
		_spec.SetField(employees.FieldDOBVerified, field.TypeBool, value)
		_node.DOBVerified = value
	}
	if value, ok := ec.mutation.DOBRemStatus(); ok {
		_spec.SetField(employees.FieldDOBRemStatus, field.TypeBool, value)
		_node.DOBRemStatus = value
	}
	if value, ok := ec.mutation.DOBRemarks(); ok {
		_spec.SetField(employees.FieldDOBRemarks, field.TypeString, value)
		_node.DOBRemarks = value
	}
	if value, ok := ec.mutation.Gender(); ok {
		_spec.SetField(employees.FieldGender, field.TypeEnum, value)
		_node.Gender = value
	}
	if value, ok := ec.mutation.GenderVerified(); ok {
		_spec.SetField(employees.FieldGenderVerified, field.TypeBool, value)
		_node.GenderVerified = value
	}
	if value, ok := ec.mutation.GenderRemStatus(); ok {
		_spec.SetField(employees.FieldGenderRemStatus, field.TypeBool, value)
		_node.GenderRemStatus = value
	}
	if value, ok := ec.mutation.GenderRemarks(); ok {
		_spec.SetField(employees.FieldGenderRemarks, field.TypeString, value)
		_node.GenderRemarks = value
	}
	if value, ok := ec.mutation.MobileNumber(); ok {
		_spec.SetField(employees.FieldMobileNumber, field.TypeInt64, value)
		_node.MobileNumber = value
	}
	if value, ok := ec.mutation.MobileNumberVerified(); ok {
		_spec.SetField(employees.FieldMobileNumberVerified, field.TypeBool, value)
		_node.MobileNumberVerified = value
	}
	if value, ok := ec.mutation.MobileNumberRemStatus(); ok {
		_spec.SetField(employees.FieldMobileNumberRemStatus, field.TypeBool, value)
		_node.MobileNumberRemStatus = value
	}
	if value, ok := ec.mutation.MobileNumberRemarks(); ok {
		_spec.SetField(employees.FieldMobileNumberRemarks, field.TypeString, value)
		_node.MobileNumberRemarks = value
	}
	if value, ok := ec.mutation.EmailID(); ok {
		_spec.SetField(employees.FieldEmailID, field.TypeString, value)
		_node.EmailID = value
	}
	if value, ok := ec.mutation.EmailIDVerified(); ok {
		_spec.SetField(employees.FieldEmailIDVerified, field.TypeBool, value)
		_node.EmailIDVerified = value
	}
	if value, ok := ec.mutation.EmailIDRemStatus(); ok {
		_spec.SetField(employees.FieldEmailIDRemStatus, field.TypeBool, value)
		_node.EmailIDRemStatus = value
	}
	if value, ok := ec.mutation.EmailIDRemarks(); ok {
		_spec.SetField(employees.FieldEmailIDRemarks, field.TypeString, value)
		_node.EmailIDRemarks = value
	}
	if value, ok := ec.mutation.Categoryid(); ok {
		_spec.SetField(employees.FieldCategoryid, field.TypeInt32, value)
		_node.Categoryid = value
	}
	if value, ok := ec.mutation.EmployeeCategoryCode(); ok {
		_spec.SetField(employees.FieldEmployeeCategoryCode, field.TypeString, value)
		_node.EmployeeCategoryCode = value
	}
	if value, ok := ec.mutation.EmployeeCategory(); ok {
		_spec.SetField(employees.FieldEmployeeCategory, field.TypeString, value)
		_node.EmployeeCategory = value
	}
	if value, ok := ec.mutation.EmployeeCategoryCodeVerified(); ok {
		_spec.SetField(employees.FieldEmployeeCategoryCodeVerified, field.TypeBool, value)
		_node.EmployeeCategoryCodeVerified = value
	}
	if value, ok := ec.mutation.EmployeeCategoryCodeRemStatus(); ok {
		_spec.SetField(employees.FieldEmployeeCategoryCodeRemStatus, field.TypeBool, value)
		_node.EmployeeCategoryCodeRemStatus = value
	}
	if value, ok := ec.mutation.EmployeeCategoryCodeRemarks(); ok {
		_spec.SetField(employees.FieldEmployeeCategoryCodeRemarks, field.TypeString, value)
		_node.EmployeeCategoryCodeRemarks = value
	}
	if value, ok := ec.mutation.WithDisability(); ok {
		_spec.SetField(employees.FieldWithDisability, field.TypeString, value)
		_node.WithDisability = value
	}
	if value, ok := ec.mutation.WithDisabilityVerified(); ok {
		_spec.SetField(employees.FieldWithDisabilityVerified, field.TypeBool, value)
		_node.WithDisabilityVerified = value
	}
	if value, ok := ec.mutation.WithDisabilityRemStatus(); ok {
		_spec.SetField(employees.FieldWithDisabilityRemStatus, field.TypeBool, value)
		_node.WithDisabilityRemStatus = value
	}
	if value, ok := ec.mutation.WithDisabilityRemarks(); ok {
		_spec.SetField(employees.FieldWithDisabilityRemarks, field.TypeBool, value)
		_node.WithDisabilityRemarks = value
	}
	if value, ok := ec.mutation.DisabilityType(); ok {
		_spec.SetField(employees.FieldDisabilityType, field.TypeString, value)
		_node.DisabilityType = value
	}
	if value, ok := ec.mutation.DisabilityTypeVerified(); ok {
		_spec.SetField(employees.FieldDisabilityTypeVerified, field.TypeBool, value)
		_node.DisabilityTypeVerified = value
	}
	if value, ok := ec.mutation.DisabilityTypeRemStatus(); ok {
		_spec.SetField(employees.FieldDisabilityTypeRemStatus, field.TypeBool, value)
		_node.DisabilityTypeRemStatus = value
	}
	if value, ok := ec.mutation.DisabilityTypeRemarks(); ok {
		_spec.SetField(employees.FieldDisabilityTypeRemarks, field.TypeString, value)
		_node.DisabilityTypeRemarks = value
	}
	if value, ok := ec.mutation.DisabilityPercentage(); ok {
		_spec.SetField(employees.FieldDisabilityPercentage, field.TypeInt32, value)
		_node.DisabilityPercentage = value
	}
	if value, ok := ec.mutation.DisabilityPercentageVerified(); ok {
		_spec.SetField(employees.FieldDisabilityPercentageVerified, field.TypeBool, value)
		_node.DisabilityPercentageVerified = value
	}
	if value, ok := ec.mutation.DisabilityPercentageRemStatus(); ok {
		_spec.SetField(employees.FieldDisabilityPercentageRemStatus, field.TypeBool, value)
		_node.DisabilityPercentageRemStatus = value
	}
	if value, ok := ec.mutation.DisabilityPercentageRemarks(); ok {
		_spec.SetField(employees.FieldDisabilityPercentageRemarks, field.TypeString, value)
		_node.DisabilityPercentageRemarks = value
	}
	if value, ok := ec.mutation.Signature(); ok {
		_spec.SetField(employees.FieldSignature, field.TypeString, value)
		_node.Signature = value
	}
	if value, ok := ec.mutation.SignatureVerified(); ok {
		_spec.SetField(employees.FieldSignatureVerified, field.TypeBool, value)
		_node.SignatureVerified = value
	}
	if value, ok := ec.mutation.SignatureRemStatus(); ok {
		_spec.SetField(employees.FieldSignatureRemStatus, field.TypeBool, value)
		_node.SignatureRemStatus = value
	}
	if value, ok := ec.mutation.SignatureRemarks(); ok {
		_spec.SetField(employees.FieldSignatureRemarks, field.TypeString, value)
		_node.SignatureRemarks = value
	}
	if value, ok := ec.mutation.Photo(); ok {
		_spec.SetField(employees.FieldPhoto, field.TypeString, value)
		_node.Photo = value
	}
	if value, ok := ec.mutation.PhotoVerified(); ok {
		_spec.SetField(employees.FieldPhotoVerified, field.TypeBool, value)
		_node.PhotoVerified = value
	}
	if value, ok := ec.mutation.PhotoRemStatus(); ok {
		_spec.SetField(employees.FieldPhotoRemStatus, field.TypeBool, value)
		_node.PhotoRemStatus = value
	}
	if value, ok := ec.mutation.PhotoRemarks(); ok {
		_spec.SetField(employees.FieldPhotoRemarks, field.TypeString, value)
		_node.PhotoRemarks = value
	}
	if value, ok := ec.mutation.PostID(); ok {
		_spec.SetField(employees.FieldPostID, field.TypeInt32, value)
		_node.PostID = value
	}
	if value, ok := ec.mutation.PostCode(); ok {
		_spec.SetField(employees.FieldPostCode, field.TypeString, value)
		_node.PostCode = value
	}
	if value, ok := ec.mutation.EmployeePost(); ok {
		_spec.SetField(employees.FieldEmployeePost, field.TypeString, value)
		_node.EmployeePost = value
	}
	if value, ok := ec.mutation.EmployeePostVerified(); ok {
		_spec.SetField(employees.FieldEmployeePostVerified, field.TypeBool, value)
		_node.EmployeePostVerified = value
	}
	if value, ok := ec.mutation.EmployeePostRemStatus(); ok {
		_spec.SetField(employees.FieldEmployeePostRemStatus, field.TypeBool, value)
		_node.EmployeePostRemStatus = value
	}
	if value, ok := ec.mutation.EmployeePostRemarks(); ok {
		_spec.SetField(employees.FieldEmployeePostRemarks, field.TypeString, value)
		_node.EmployeePostRemarks = value
	}
	if value, ok := ec.mutation.DesignationID(); ok {
		_spec.SetField(employees.FieldDesignationID, field.TypeInt32, value)
		_node.DesignationID = value
	}
	if value, ok := ec.mutation.EmployeeDesignation(); ok {
		_spec.SetField(employees.FieldEmployeeDesignation, field.TypeString, value)
		_node.EmployeeDesignation = value
	}
	if value, ok := ec.mutation.EmployeeDesignationVerified(); ok {
		_spec.SetField(employees.FieldEmployeeDesignationVerified, field.TypeBool, value)
		_node.EmployeeDesignationVerified = value
	}
	if value, ok := ec.mutation.EmployeeDesignationRemStatus(); ok {
		_spec.SetField(employees.FieldEmployeeDesignationRemStatus, field.TypeBool, value)
		_node.EmployeeDesignationRemStatus = value
	}
	if value, ok := ec.mutation.EmployeeDesignationRemarks(); ok {
		_spec.SetField(employees.FieldEmployeeDesignationRemarks, field.TypeString, value)
		_node.EmployeeDesignationRemarks = value
	}
	if value, ok := ec.mutation.CircleID(); ok {
		_spec.SetField(employees.FieldCircleID, field.TypeInt32, value)
		_node.CircleID = value
	}
	if value, ok := ec.mutation.CircleName(); ok {
		_spec.SetField(employees.FieldCircleName, field.TypeString, value)
		_node.CircleName = value
	}
	if value, ok := ec.mutation.CircleVerified(); ok {
		_spec.SetField(employees.FieldCircleVerified, field.TypeBool, value)
		_node.CircleVerified = value
	}
	if value, ok := ec.mutation.CircleRemStatus(); ok {
		_spec.SetField(employees.FieldCircleRemStatus, field.TypeBool, value)
		_node.CircleRemStatus = value
	}
	if value, ok := ec.mutation.CircleRemarks(); ok {
		_spec.SetField(employees.FieldCircleRemarks, field.TypeString, value)
		_node.CircleRemarks = value
	}
	if value, ok := ec.mutation.RegionID(); ok {
		_spec.SetField(employees.FieldRegionID, field.TypeInt32, value)
		_node.RegionID = value
	}
	if value, ok := ec.mutation.RegionName(); ok {
		_spec.SetField(employees.FieldRegionName, field.TypeString, value)
		_node.RegionName = value
	}
	if value, ok := ec.mutation.RegionVerified(); ok {
		_spec.SetField(employees.FieldRegionVerified, field.TypeBool, value)
		_node.RegionVerified = value
	}
	if value, ok := ec.mutation.RegionRemStatus(); ok {
		_spec.SetField(employees.FieldRegionRemStatus, field.TypeBool, value)
		_node.RegionRemStatus = value
	}
	if value, ok := ec.mutation.RegionRemarks(); ok {
		_spec.SetField(employees.FieldRegionRemarks, field.TypeString, value)
		_node.RegionRemarks = value
	}
	if value, ok := ec.mutation.DivisionID(); ok {
		_spec.SetField(employees.FieldDivisionID, field.TypeInt32, value)
		_node.DivisionID = value
	}
	if value, ok := ec.mutation.DivisionName(); ok {
		_spec.SetField(employees.FieldDivisionName, field.TypeString, value)
		_node.DivisionName = value
	}
	if value, ok := ec.mutation.DivisionVerified(); ok {
		_spec.SetField(employees.FieldDivisionVerified, field.TypeBool, value)
		_node.DivisionVerified = value
	}
	if value, ok := ec.mutation.DivisionRemStatus(); ok {
		_spec.SetField(employees.FieldDivisionRemStatus, field.TypeBool, value)
		_node.DivisionRemStatus = value
	}
	if value, ok := ec.mutation.DivisionRemarks(); ok {
		_spec.SetField(employees.FieldDivisionRemarks, field.TypeString, value)
		_node.DivisionRemarks = value
	}
	if value, ok := ec.mutation.OfficeID(); ok {
		_spec.SetField(employees.FieldOfficeID, field.TypeInt32, value)
		_node.OfficeID = value
	}
	if value, ok := ec.mutation.OfficeName(); ok {
		_spec.SetField(employees.FieldOfficeName, field.TypeString, value)
		_node.OfficeName = value
	}
	if value, ok := ec.mutation.OfficeVerified(); ok {
		_spec.SetField(employees.FieldOfficeVerified, field.TypeBool, value)
		_node.OfficeVerified = value
	}
	if value, ok := ec.mutation.OfficeRemStatus(); ok {
		_spec.SetField(employees.FieldOfficeRemStatus, field.TypeBool, value)
		_node.OfficeRemStatus = value
	}
	if value, ok := ec.mutation.OfficeRemarks(); ok {
		_spec.SetField(employees.FieldOfficeRemarks, field.TypeString, value)
		_node.OfficeRemarks = value
	}
	if value, ok := ec.mutation.Role(); ok {
		_spec.SetField(employees.FieldRole, field.TypeString, value)
		_node.Role = value
	}
	if value, ok := ec.mutation.RoleVerified(); ok {
		_spec.SetField(employees.FieldRoleVerified, field.TypeBool, value)
		_node.RoleVerified = value
	}
	if value, ok := ec.mutation.RoleRemStatus(); ok {
		_spec.SetField(employees.FieldRoleRemStatus, field.TypeBool, value)
		_node.RoleRemStatus = value
	}
	if value, ok := ec.mutation.RoleRemarks(); ok {
		_spec.SetField(employees.FieldRoleRemarks, field.TypeString, value)
		_node.RoleRemarks = value
	}
	if value, ok := ec.mutation.DCCS(); ok {
		_spec.SetField(employees.FieldDCCS, field.TypeTime, value)
		_node.DCCS = value
	}
	if value, ok := ec.mutation.DCCSVerified(); ok {
		_spec.SetField(employees.FieldDCCSVerified, field.TypeBool, value)
		_node.DCCSVerified = value
	}
	if value, ok := ec.mutation.DCCSRemStatus(); ok {
		_spec.SetField(employees.FieldDCCSRemStatus, field.TypeBool, value)
		_node.DCCSRemStatus = value
	}
	if value, ok := ec.mutation.DCCSRemarks(); ok {
		_spec.SetField(employees.FieldDCCSRemarks, field.TypeString, value)
		_node.DCCSRemarks = value
	}
	if value, ok := ec.mutation.DCInPresentCadre(); ok {
		_spec.SetField(employees.FieldDCInPresentCadre, field.TypeTime, value)
		_node.DCInPresentCadre = value
	}
	if value, ok := ec.mutation.DCInPresentCadreVerified(); ok {
		_spec.SetField(employees.FieldDCInPresentCadreVerified, field.TypeBool, value)
		_node.DCInPresentCadreVerified = value
	}
	if value, ok := ec.mutation.DCInPresentCadreRemStatus(); ok {
		_spec.SetField(employees.FieldDCInPresentCadreRemStatus, field.TypeBool, value)
		_node.DCInPresentCadreRemStatus = value
	}
	if value, ok := ec.mutation.DCInPresentCadreRemarks(); ok {
		_spec.SetField(employees.FieldDCInPresentCadreRemarks, field.TypeString, value)
		_node.DCInPresentCadreRemarks = value
	}
	if value, ok := ec.mutation.APSWorking(); ok {
		_spec.SetField(employees.FieldAPSWorking, field.TypeBool, value)
		_node.APSWorking = value
	}
	if value, ok := ec.mutation.APSWorkingVerified(); ok {
		_spec.SetField(employees.FieldAPSWorkingVerified, field.TypeBool, value)
		_node.APSWorkingVerified = value
	}
	if value, ok := ec.mutation.APSWorkingRemStatus(); ok {
		_spec.SetField(employees.FieldAPSWorkingRemStatus, field.TypeBool, value)
		_node.APSWorkingRemStatus = value
	}
	if value, ok := ec.mutation.APSWorkingRemarks(); ok {
		_spec.SetField(employees.FieldAPSWorkingRemarks, field.TypeString, value)
		_node.APSWorkingRemarks = value
	}
	if value, ok := ec.mutation.Profilestatus(); ok {
		_spec.SetField(employees.FieldProfilestatus, field.TypeBool, value)
		_node.Profilestatus = value
	}
	if value, ok := ec.mutation.RoleUserCode(); ok {
		_spec.SetField(employees.FieldRoleUserCode, field.TypeInt32, value)
		_node.RoleUserCode = value
	}
	return _node, _spec
}

// EmployeesCreateBulk is the builder for creating many Employees entities in bulk.
type EmployeesCreateBulk struct {
	config
	builders []*EmployeesCreate
}

// Save creates the Employees entities in the database.
func (ecb *EmployeesCreateBulk) Save(ctx context.Context) ([]*Employees, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ecb.builders))
	nodes := make([]*Employees, len(ecb.builders))
	mutators := make([]Mutator, len(ecb.builders))
	for i := range ecb.builders {
		func(i int, root context.Context) {
			builder := ecb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*EmployeesMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ecb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ecb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ecb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ecb *EmployeesCreateBulk) SaveX(ctx context.Context) []*Employees {
	v, err := ecb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ecb *EmployeesCreateBulk) Exec(ctx context.Context) error {
	_, err := ecb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ecb *EmployeesCreateBulk) ExecX(ctx context.Context) {
	if err := ecb.Exec(ctx); err != nil {
		panic(err)
	}
}
