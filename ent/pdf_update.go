// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"recruit/ent/pdf"
	"recruit/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PDFUpdate is the builder for updating PDF entities.
type PDFUpdate struct {
	config
	hooks    []Hook
	mutation *PDFMutation
}

// Where appends a list predicates to the PDFUpdate builder.
func (pu *PDFUpdate) Where(ps ...predicate.PDF) *PDFUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetPath sets the "path" field.
func (pu *PDFUpdate) SetPath(s string) *PDFUpdate {
	pu.mutation.SetPath(s)
	return pu
}

// SetNillablePath sets the "path" field if the given value is not nil.
func (pu *PDFUpdate) SetNillablePath(s *string) *PDFUpdate {
	if s != nil {
		pu.SetPath(*s)
	}
	return pu
}

// ClearPath clears the value of the "path" field.
func (pu *PDFUpdate) ClearPath() *PDFUpdate {
	pu.mutation.ClearPath()
	return pu
}

// SetFilename sets the "filename" field.
func (pu *PDFUpdate) SetFilename(s string) *PDFUpdate {
	pu.mutation.SetFilename(s)
	return pu
}

// SetNillableFilename sets the "filename" field if the given value is not nil.
func (pu *PDFUpdate) SetNillableFilename(s *string) *PDFUpdate {
	if s != nil {
		pu.SetFilename(*s)
	}
	return pu
}

// ClearFilename clears the value of the "filename" field.
func (pu *PDFUpdate) ClearFilename() *PDFUpdate {
	pu.mutation.ClearFilename()
	return pu
}

// SetEventtime sets the "eventtime" field.
func (pu *PDFUpdate) SetEventtime(t time.Time) *PDFUpdate {
	pu.mutation.SetEventtime(t)
	return pu
}

// SetNillableEventtime sets the "eventtime" field if the given value is not nil.
func (pu *PDFUpdate) SetNillableEventtime(t *time.Time) *PDFUpdate {
	if t != nil {
		pu.SetEventtime(*t)
	}
	return pu
}

// ClearEventtime clears the value of the "eventtime" field.
func (pu *PDFUpdate) ClearEventtime() *PDFUpdate {
	pu.mutation.ClearEventtime()
	return pu
}

// SetExamcode sets the "examcode" field.
func (pu *PDFUpdate) SetExamcode(i int) *PDFUpdate {
	pu.mutation.ResetExamcode()
	pu.mutation.SetExamcode(i)
	return pu
}

// SetNillableExamcode sets the "examcode" field if the given value is not nil.
func (pu *PDFUpdate) SetNillableExamcode(i *int) *PDFUpdate {
	if i != nil {
		pu.SetExamcode(*i)
	}
	return pu
}

// AddExamcode adds i to the "examcode" field.
func (pu *PDFUpdate) AddExamcode(i int) *PDFUpdate {
	pu.mutation.AddExamcode(i)
	return pu
}

// ClearExamcode clears the value of the "examcode" field.
func (pu *PDFUpdate) ClearExamcode() *PDFUpdate {
	pu.mutation.ClearExamcode()
	return pu
}

// SetYear sets the "year" field.
func (pu *PDFUpdate) SetYear(i int) *PDFUpdate {
	pu.mutation.ResetYear()
	pu.mutation.SetYear(i)
	return pu
}

// SetNillableYear sets the "year" field if the given value is not nil.
func (pu *PDFUpdate) SetNillableYear(i *int) *PDFUpdate {
	if i != nil {
		pu.SetYear(*i)
	}
	return pu
}

// AddYear adds i to the "year" field.
func (pu *PDFUpdate) AddYear(i int) *PDFUpdate {
	pu.mutation.AddYear(i)
	return pu
}

// ClearYear clears the value of the "year" field.
func (pu *PDFUpdate) ClearYear() *PDFUpdate {
	pu.mutation.ClearYear()
	return pu
}

// Mutation returns the PDFMutation object of the builder.
func (pu *PDFUpdate) Mutation() *PDFMutation {
	return pu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *PDFUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, pu.sqlSave, pu.mutation, pu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PDFUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PDFUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PDFUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (pu *PDFUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(pdf.Table, pdf.Columns, sqlgraph.NewFieldSpec(pdf.FieldID, field.TypeInt))
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.Path(); ok {
		_spec.SetField(pdf.FieldPath, field.TypeString, value)
	}
	if pu.mutation.PathCleared() {
		_spec.ClearField(pdf.FieldPath, field.TypeString)
	}
	if value, ok := pu.mutation.Filename(); ok {
		_spec.SetField(pdf.FieldFilename, field.TypeString, value)
	}
	if pu.mutation.FilenameCleared() {
		_spec.ClearField(pdf.FieldFilename, field.TypeString)
	}
	if value, ok := pu.mutation.Eventtime(); ok {
		_spec.SetField(pdf.FieldEventtime, field.TypeTime, value)
	}
	if pu.mutation.EventtimeCleared() {
		_spec.ClearField(pdf.FieldEventtime, field.TypeTime)
	}
	if value, ok := pu.mutation.Examcode(); ok {
		_spec.SetField(pdf.FieldExamcode, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AddedExamcode(); ok {
		_spec.AddField(pdf.FieldExamcode, field.TypeInt, value)
	}
	if pu.mutation.ExamcodeCleared() {
		_spec.ClearField(pdf.FieldExamcode, field.TypeInt)
	}
	if value, ok := pu.mutation.Year(); ok {
		_spec.SetField(pdf.FieldYear, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AddedYear(); ok {
		_spec.AddField(pdf.FieldYear, field.TypeInt, value)
	}
	if pu.mutation.YearCleared() {
		_spec.ClearField(pdf.FieldYear, field.TypeInt)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{pdf.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pu.mutation.done = true
	return n, nil
}

// PDFUpdateOne is the builder for updating a single PDF entity.
type PDFUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PDFMutation
}

// SetPath sets the "path" field.
func (puo *PDFUpdateOne) SetPath(s string) *PDFUpdateOne {
	puo.mutation.SetPath(s)
	return puo
}

// SetNillablePath sets the "path" field if the given value is not nil.
func (puo *PDFUpdateOne) SetNillablePath(s *string) *PDFUpdateOne {
	if s != nil {
		puo.SetPath(*s)
	}
	return puo
}

// ClearPath clears the value of the "path" field.
func (puo *PDFUpdateOne) ClearPath() *PDFUpdateOne {
	puo.mutation.ClearPath()
	return puo
}

// SetFilename sets the "filename" field.
func (puo *PDFUpdateOne) SetFilename(s string) *PDFUpdateOne {
	puo.mutation.SetFilename(s)
	return puo
}

// SetNillableFilename sets the "filename" field if the given value is not nil.
func (puo *PDFUpdateOne) SetNillableFilename(s *string) *PDFUpdateOne {
	if s != nil {
		puo.SetFilename(*s)
	}
	return puo
}

// ClearFilename clears the value of the "filename" field.
func (puo *PDFUpdateOne) ClearFilename() *PDFUpdateOne {
	puo.mutation.ClearFilename()
	return puo
}

// SetEventtime sets the "eventtime" field.
func (puo *PDFUpdateOne) SetEventtime(t time.Time) *PDFUpdateOne {
	puo.mutation.SetEventtime(t)
	return puo
}

// SetNillableEventtime sets the "eventtime" field if the given value is not nil.
func (puo *PDFUpdateOne) SetNillableEventtime(t *time.Time) *PDFUpdateOne {
	if t != nil {
		puo.SetEventtime(*t)
	}
	return puo
}

// ClearEventtime clears the value of the "eventtime" field.
func (puo *PDFUpdateOne) ClearEventtime() *PDFUpdateOne {
	puo.mutation.ClearEventtime()
	return puo
}

// SetExamcode sets the "examcode" field.
func (puo *PDFUpdateOne) SetExamcode(i int) *PDFUpdateOne {
	puo.mutation.ResetExamcode()
	puo.mutation.SetExamcode(i)
	return puo
}

// SetNillableExamcode sets the "examcode" field if the given value is not nil.
func (puo *PDFUpdateOne) SetNillableExamcode(i *int) *PDFUpdateOne {
	if i != nil {
		puo.SetExamcode(*i)
	}
	return puo
}

// AddExamcode adds i to the "examcode" field.
func (puo *PDFUpdateOne) AddExamcode(i int) *PDFUpdateOne {
	puo.mutation.AddExamcode(i)
	return puo
}

// ClearExamcode clears the value of the "examcode" field.
func (puo *PDFUpdateOne) ClearExamcode() *PDFUpdateOne {
	puo.mutation.ClearExamcode()
	return puo
}

// SetYear sets the "year" field.
func (puo *PDFUpdateOne) SetYear(i int) *PDFUpdateOne {
	puo.mutation.ResetYear()
	puo.mutation.SetYear(i)
	return puo
}

// SetNillableYear sets the "year" field if the given value is not nil.
func (puo *PDFUpdateOne) SetNillableYear(i *int) *PDFUpdateOne {
	if i != nil {
		puo.SetYear(*i)
	}
	return puo
}

// AddYear adds i to the "year" field.
func (puo *PDFUpdateOne) AddYear(i int) *PDFUpdateOne {
	puo.mutation.AddYear(i)
	return puo
}

// ClearYear clears the value of the "year" field.
func (puo *PDFUpdateOne) ClearYear() *PDFUpdateOne {
	puo.mutation.ClearYear()
	return puo
}

// Mutation returns the PDFMutation object of the builder.
func (puo *PDFUpdateOne) Mutation() *PDFMutation {
	return puo.mutation
}

// Where appends a list predicates to the PDFUpdate builder.
func (puo *PDFUpdateOne) Where(ps ...predicate.PDF) *PDFUpdateOne {
	puo.mutation.Where(ps...)
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *PDFUpdateOne) Select(field string, fields ...string) *PDFUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated PDF entity.
func (puo *PDFUpdateOne) Save(ctx context.Context) (*PDF, error) {
	return withHooks(ctx, puo.sqlSave, puo.mutation, puo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PDFUpdateOne) SaveX(ctx context.Context) *PDF {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *PDFUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PDFUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (puo *PDFUpdateOne) sqlSave(ctx context.Context) (_node *PDF, err error) {
	_spec := sqlgraph.NewUpdateSpec(pdf.Table, pdf.Columns, sqlgraph.NewFieldSpec(pdf.FieldID, field.TypeInt))
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "PDF.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, pdf.FieldID)
		for _, f := range fields {
			if !pdf.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != pdf.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.Path(); ok {
		_spec.SetField(pdf.FieldPath, field.TypeString, value)
	}
	if puo.mutation.PathCleared() {
		_spec.ClearField(pdf.FieldPath, field.TypeString)
	}
	if value, ok := puo.mutation.Filename(); ok {
		_spec.SetField(pdf.FieldFilename, field.TypeString, value)
	}
	if puo.mutation.FilenameCleared() {
		_spec.ClearField(pdf.FieldFilename, field.TypeString)
	}
	if value, ok := puo.mutation.Eventtime(); ok {
		_spec.SetField(pdf.FieldEventtime, field.TypeTime, value)
	}
	if puo.mutation.EventtimeCleared() {
		_spec.ClearField(pdf.FieldEventtime, field.TypeTime)
	}
	if value, ok := puo.mutation.Examcode(); ok {
		_spec.SetField(pdf.FieldExamcode, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AddedExamcode(); ok {
		_spec.AddField(pdf.FieldExamcode, field.TypeInt, value)
	}
	if puo.mutation.ExamcodeCleared() {
		_spec.ClearField(pdf.FieldExamcode, field.TypeInt)
	}
	if value, ok := puo.mutation.Year(); ok {
		_spec.SetField(pdf.FieldYear, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AddedYear(); ok {
		_spec.AddField(pdf.FieldYear, field.TypeInt, value)
	}
	if puo.mutation.YearCleared() {
		_spec.ClearField(pdf.FieldYear, field.TypeInt)
	}
	_node = &PDF{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{pdf.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puo.mutation.done = true
	return _node, nil
}
