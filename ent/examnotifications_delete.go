// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"recruit/ent/examnotifications"
	"recruit/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ExamNotificationsDelete is the builder for deleting a ExamNotifications entity.
type ExamNotificationsDelete struct {
	config
	hooks    []Hook
	mutation *ExamNotificationsMutation
}

// Where appends a list predicates to the ExamNotificationsDelete builder.
func (end *ExamNotificationsDelete) Where(ps ...predicate.ExamNotifications) *ExamNotificationsDelete {
	end.mutation.Where(ps...)
	return end
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (end *ExamNotificationsDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, end.sqlExec, end.mutation, end.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (end *ExamNotificationsDelete) ExecX(ctx context.Context) int {
	n, err := end.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (end *ExamNotificationsDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(examnotifications.Table, sqlgraph.NewFieldSpec(examnotifications.FieldID, field.TypeInt32))
	if ps := end.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, end.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	end.mutation.done = true
	return affected, err
}

// ExamNotificationsDeleteOne is the builder for deleting a single ExamNotifications entity.
type ExamNotificationsDeleteOne struct {
	end *ExamNotificationsDelete
}

// Where appends a list predicates to the ExamNotificationsDelete builder.
func (endo *ExamNotificationsDeleteOne) Where(ps ...predicate.ExamNotifications) *ExamNotificationsDeleteOne {
	endo.end.mutation.Where(ps...)
	return endo
}

// Exec executes the deletion query.
func (endo *ExamNotificationsDeleteOne) Exec(ctx context.Context) error {
	n, err := endo.end.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{examnotifications.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (endo *ExamNotificationsDeleteOne) ExecX(ctx context.Context) {
	if err := endo.Exec(ctx); err != nil {
		panic(err)
	}
}
