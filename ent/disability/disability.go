// Code generated by ent, DO NOT EDIT.

package disability

import (
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the disability type in the database.
	Label = "disability"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "DisabilityTypeID"
	// FieldDisabilityTypeCode holds the string denoting the disabilitytypecode field in the database.
	FieldDisabilityTypeCode = "disability_type_code"
	// FieldDisabilityTypeDescription holds the string denoting the disabilitytypedescription field in the database.
	FieldDisabilityTypeDescription = "disability_type_description"
	// FieldDisabilityPercentage holds the string denoting the disabilitypercentage field in the database.
	FieldDisabilityPercentage = "disability_percentage"
	// FieldDisabilityFlag holds the string denoting the disabilityflag field in the database.
	FieldDisabilityFlag = "disability_flag"
	// FieldHallCategoryCode holds the string denoting the hallcategorycode field in the database.
	FieldHallCategoryCode = "hall_category_code"
	// FieldOrderNumber holds the string denoting the ordernumber field in the database.
	FieldOrderNumber = "order_number"
	// FieldCreatedById holds the string denoting the createdbyid field in the database.
	FieldCreatedById = "created_by_id"
	// FieldCreatedByUserName holds the string denoting the createdbyusername field in the database.
	FieldCreatedByUserName = "created_by_user_name"
	// FieldCreatedByEmployeeId holds the string denoting the createdbyemployeeid field in the database.
	FieldCreatedByEmployeeId = "created_by_employee_id"
	// FieldCreatedByDesignation holds the string denoting the createdbydesignation field in the database.
	FieldCreatedByDesignation = "created_by_designation"
	// FieldCreatedDate holds the string denoting the createddate field in the database.
	FieldCreatedDate = "created_date"
	// FieldVerifiedById holds the string denoting the verifiedbyid field in the database.
	FieldVerifiedById = "verified_by_id"
	// FieldVerifiedByUserName holds the string denoting the verifiedbyusername field in the database.
	FieldVerifiedByUserName = "verified_by_user_name"
	// FieldVerifiedByEmployeeId holds the string denoting the verifiedbyemployeeid field in the database.
	FieldVerifiedByEmployeeId = "verified_by_employee_id"
	// FieldVerifiedByDesignation holds the string denoting the verifiedbydesignation field in the database.
	FieldVerifiedByDesignation = "verified_by_designation"
	// FieldVerifiedDate holds the string denoting the verifieddate field in the database.
	FieldVerifiedDate = "verified_date"
	// FieldStatuss holds the string denoting the statuss field in the database.
	FieldStatuss = "statuss"
	// FieldDeletedById holds the string denoting the deletedbyid field in the database.
	FieldDeletedById = "deleted_by_id"
	// FieldDeletedByUserName holds the string denoting the deletedbyusername field in the database.
	FieldDeletedByUserName = "deleted_by_user_name"
	// FieldDeletedByEmployeeId holds the string denoting the deletedbyemployeeid field in the database.
	FieldDeletedByEmployeeId = "deleted_by_employee_id"
	// FieldDeletedByDesignation holds the string denoting the deletedbydesignation field in the database.
	FieldDeletedByDesignation = "deleted_by_designation"
	// FieldDeletedDate holds the string denoting the deleteddate field in the database.
	FieldDeletedDate = "deleted_date"
	// EdgeDisRef holds the string denoting the dis_ref edge name in mutations.
	EdgeDisRef = "dis_ref"
	// ExamPapersFieldID holds the string denoting the ID field of the ExamPapers.
	ExamPapersFieldID = "PaperCode"
	// Table holds the table name of the disability in the database.
	Table = "Disability"
	// DisRefTable is the table that holds the dis_ref relation/edge.
	DisRefTable = "exam_papers"
	// DisRefInverseTable is the table name for the ExamPapers entity.
	// It exists in this package in order to avoid circular dependency with the "exampapers" package.
	DisRefInverseTable = "exam_papers"
	// DisRefColumn is the table column denoting the dis_ref relation/edge.
	DisRefColumn = "disability_dis_ref"
)

// Columns holds all SQL columns for disability fields.
var Columns = []string{
	FieldID,
	FieldDisabilityTypeCode,
	FieldDisabilityTypeDescription,
	FieldDisabilityPercentage,
	FieldDisabilityFlag,
	FieldHallCategoryCode,
	FieldOrderNumber,
	FieldCreatedById,
	FieldCreatedByUserName,
	FieldCreatedByEmployeeId,
	FieldCreatedByDesignation,
	FieldCreatedDate,
	FieldVerifiedById,
	FieldVerifiedByUserName,
	FieldVerifiedByEmployeeId,
	FieldVerifiedByDesignation,
	FieldVerifiedDate,
	FieldStatuss,
	FieldDeletedById,
	FieldDeletedByUserName,
	FieldDeletedByEmployeeId,
	FieldDeletedByDesignation,
	FieldDeletedDate,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "Disability"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"exam_papers_dis_ref",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// DisabilityFlag defines the type for the "DisabilityFlag" enum field.
type DisabilityFlag string

// DisabilityFlag values.
const (
	DisabilityFlagTemporary DisabilityFlag = "Temporary"
	DisabilityFlagPermanent DisabilityFlag = "Permanent"
)

func (_disabilityflag DisabilityFlag) String() string {
	return string(_disabilityflag)
}

// DisabilityFlagValidator is a validator for the "DisabilityFlag" field enum values. It is called by the builders before save.
func DisabilityFlagValidator(_disabilityflag DisabilityFlag) error {
	switch _disabilityflag {
	case DisabilityFlagTemporary, DisabilityFlagPermanent:
		return nil
	default:
		return fmt.Errorf("disability: invalid enum value for DisabilityFlag field: %q", _disabilityflag)
	}
}

// OrderOption defines the ordering options for the Disability queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByDisabilityTypeCode orders the results by the DisabilityTypeCode field.
func ByDisabilityTypeCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDisabilityTypeCode, opts...).ToFunc()
}

// ByDisabilityTypeDescription orders the results by the DisabilityTypeDescription field.
func ByDisabilityTypeDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDisabilityTypeDescription, opts...).ToFunc()
}

// ByDisabilityPercentage orders the results by the DisabilityPercentage field.
func ByDisabilityPercentage(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDisabilityPercentage, opts...).ToFunc()
}

// ByDisabilityFlag orders the results by the DisabilityFlag field.
func ByDisabilityFlag(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDisabilityFlag, opts...).ToFunc()
}

// ByHallCategoryCode orders the results by the HallCategoryCode field.
func ByHallCategoryCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHallCategoryCode, opts...).ToFunc()
}

// ByOrderNumber orders the results by the OrderNumber field.
func ByOrderNumber(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOrderNumber, opts...).ToFunc()
}

// ByCreatedById orders the results by the CreatedById field.
func ByCreatedById(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedById, opts...).ToFunc()
}

// ByCreatedByUserName orders the results by the CreatedByUserName field.
func ByCreatedByUserName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedByUserName, opts...).ToFunc()
}

// ByCreatedByEmployeeId orders the results by the CreatedByEmployeeId field.
func ByCreatedByEmployeeId(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedByEmployeeId, opts...).ToFunc()
}

// ByCreatedByDesignation orders the results by the CreatedByDesignation field.
func ByCreatedByDesignation(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedByDesignation, opts...).ToFunc()
}

// ByCreatedDate orders the results by the CreatedDate field.
func ByCreatedDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedDate, opts...).ToFunc()
}

// ByVerifiedById orders the results by the VerifiedById field.
func ByVerifiedById(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVerifiedById, opts...).ToFunc()
}

// ByVerifiedByUserName orders the results by the VerifiedByUserName field.
func ByVerifiedByUserName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVerifiedByUserName, opts...).ToFunc()
}

// ByVerifiedByEmployeeId orders the results by the VerifiedByEmployeeId field.
func ByVerifiedByEmployeeId(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVerifiedByEmployeeId, opts...).ToFunc()
}

// ByVerifiedByDesignation orders the results by the VerifiedByDesignation field.
func ByVerifiedByDesignation(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVerifiedByDesignation, opts...).ToFunc()
}

// ByVerifiedDate orders the results by the VerifiedDate field.
func ByVerifiedDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVerifiedDate, opts...).ToFunc()
}

// ByStatuss orders the results by the Statuss field.
func ByStatuss(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatuss, opts...).ToFunc()
}

// ByDeletedById orders the results by the DeletedById field.
func ByDeletedById(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedById, opts...).ToFunc()
}

// ByDeletedByUserName orders the results by the DeletedByUserName field.
func ByDeletedByUserName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedByUserName, opts...).ToFunc()
}

// ByDeletedByEmployeeId orders the results by the DeletedByEmployeeId field.
func ByDeletedByEmployeeId(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedByEmployeeId, opts...).ToFunc()
}

// ByDeletedByDesignation orders the results by the DeletedByDesignation field.
func ByDeletedByDesignation(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedByDesignation, opts...).ToFunc()
}

// ByDeletedDate orders the results by the DeletedDate field.
func ByDeletedDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedDate, opts...).ToFunc()
}

// ByDisRefCount orders the results by dis_ref count.
func ByDisRefCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newDisRefStep(), opts...)
	}
}

// ByDisRef orders the results by dis_ref terms.
func ByDisRef(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDisRefStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newDisRefStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DisRefInverseTable, ExamPapersFieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, DisRefTable, DisRefColumn),
	)
}
