// Code generated by ent, DO NOT EDIT.

package categorymininummarkmapping

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the categorymininummarkmapping type in the database.
	Label = "category_mininum_mark_mapping"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "categoryMininumMarkCode"
	// FieldExamCode holds the string denoting the examcode field in the database.
	FieldExamCode = "exam_code"
	// FieldExamName holds the string denoting the examname field in the database.
	FieldExamName = "exam_name"
	// FieldExamShortName holds the string denoting the examshortname field in the database.
	FieldExamShortName = "exam_short_name"
	// FieldPaperCode holds the string denoting the papercode field in the database.
	FieldPaperCode = "paper_code"
	// FieldPaperDescription holds the string denoting the paperdescription field in the database.
	FieldPaperDescription = "paper_description"
	// FieldDisabilityTypeID holds the string denoting the disabilitytypeid field in the database.
	FieldDisabilityTypeID = "disability_type_id"
	// FieldDisabilityTypeCode holds the string denoting the disabilitytypecode field in the database.
	FieldDisabilityTypeCode = "disability_type_code"
	// FieldDisabilityTypeDescription holds the string denoting the disabilitytypedescription field in the database.
	FieldDisabilityTypeDescription = "disability_type_description"
	// FieldMinimumMarks holds the string denoting the minimummarks field in the database.
	FieldMinimumMarks = "minimum_marks"
	// FieldOrderNumber holds the string denoting the ordernumber field in the database.
	FieldOrderNumber = "order_number"
	// FieldCreatedById holds the string denoting the createdbyid field in the database.
	FieldCreatedById = "created_by_id"
	// FieldCreatedByUserName holds the string denoting the createdbyusername field in the database.
	FieldCreatedByUserName = "created_by_user_name"
	// FieldCreatedByEmpId holds the string denoting the createdbyempid field in the database.
	FieldCreatedByEmpId = "created_by_emp_id"
	// FieldCreatedByDesignation holds the string denoting the createdbydesignation field in the database.
	FieldCreatedByDesignation = "created_by_designation"
	// FieldCreatedDate holds the string denoting the createddate field in the database.
	FieldCreatedDate = "created_date"
	// FieldVerifiedbyid holds the string denoting the verifiedbyid field in the database.
	FieldVerifiedbyid = "verifiedbyid"
	// FieldVerifiedbyusername holds the string denoting the verifiedbyusername field in the database.
	FieldVerifiedbyusername = "verifiedbyusername"
	// FieldVerifiedbyEmployeeid holds the string denoting the verifiedbyemployeeid field in the database.
	FieldVerifiedbyEmployeeid = "verifiedby_employeeid"
	// FieldVerifiedbyDesignation holds the string denoting the verifiedbydesignation field in the database.
	FieldVerifiedbyDesignation = "verifiedby_designation"
	// FieldVerifiedDate holds the string denoting the verifieddate field in the database.
	FieldVerifiedDate = "verified_date"
	// FieldStatuss holds the string denoting the statuss field in the database.
	FieldStatuss = "statuss"
	// FieldDeletedbyid holds the string denoting the deletedbyid field in the database.
	FieldDeletedbyid = "deletedbyid"
	// FieldDeletedbyusername holds the string denoting the deletedbyusername field in the database.
	FieldDeletedbyusername = "deletedbyusername"
	// FieldDeletedbyEmployeeid holds the string denoting the deletedbyemployeeid field in the database.
	FieldDeletedbyEmployeeid = "deletedby_employeeid"
	// FieldDeletedbyDesignation holds the string denoting the deletedbydesignation field in the database.
	FieldDeletedbyDesignation = "deletedby_designation"
	// FieldDeletedDate holds the string denoting the deleteddate field in the database.
	FieldDeletedDate = "deleted_date"
	// EdgeLogData holds the string denoting the logdata edge name in mutations.
	EdgeLogData = "LogData"
	// LogsFieldID holds the string denoting the ID field of the Logs.
	LogsFieldID = "ID"
	// Table holds the table name of the categorymininummarkmapping in the database.
	Table = "CategoryMininumMarkMapping"
	// LogDataTable is the table that holds the LogData relation/edge.
	LogDataTable = "LogsTable"
	// LogDataInverseTable is the table name for the Logs entity.
	// It exists in this package in order to avoid circular dependency with the "logs" package.
	LogDataInverseTable = "LogsTable"
	// LogDataColumn is the table column denoting the LogData relation/edge.
	LogDataColumn = "category_mininum_mark_mapping_log_data"
)

// Columns holds all SQL columns for categorymininummarkmapping fields.
var Columns = []string{
	FieldID,
	FieldExamCode,
	FieldExamName,
	FieldExamShortName,
	FieldPaperCode,
	FieldPaperDescription,
	FieldDisabilityTypeID,
	FieldDisabilityTypeCode,
	FieldDisabilityTypeDescription,
	FieldMinimumMarks,
	FieldOrderNumber,
	FieldCreatedById,
	FieldCreatedByUserName,
	FieldCreatedByEmpId,
	FieldCreatedByDesignation,
	FieldCreatedDate,
	FieldVerifiedbyid,
	FieldVerifiedbyusername,
	FieldVerifiedbyEmployeeid,
	FieldVerifiedbyDesignation,
	FieldVerifiedDate,
	FieldStatuss,
	FieldDeletedbyid,
	FieldDeletedbyusername,
	FieldDeletedbyEmployeeid,
	FieldDeletedbyDesignation,
	FieldDeletedDate,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedDate holds the default value on creation for the "CreatedDate" field.
	DefaultCreatedDate func() time.Time
	// DefaultVerifiedDate holds the default value on creation for the "verifiedDate" field.
	DefaultVerifiedDate func() time.Time
	// DefaultStatuss holds the default value on creation for the "Statuss" field.
	DefaultStatuss string
	// DefaultDeletedDate holds the default value on creation for the "deletedDate" field.
	DefaultDeletedDate func() time.Time
)

// OrderOption defines the ordering options for the CategoryMininumMarkMapping queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByExamCode orders the results by the ExamCode field.
func ByExamCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExamCode, opts...).ToFunc()
}

// ByExamName orders the results by the ExamName field.
func ByExamName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExamName, opts...).ToFunc()
}

// ByExamShortName orders the results by the ExamShortName field.
func ByExamShortName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExamShortName, opts...).ToFunc()
}

// ByPaperCode orders the results by the PaperCode field.
func ByPaperCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPaperCode, opts...).ToFunc()
}

// ByPaperDescription orders the results by the PaperDescription field.
func ByPaperDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPaperDescription, opts...).ToFunc()
}

// ByDisabilityTypeID orders the results by the DisabilityTypeID field.
func ByDisabilityTypeID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDisabilityTypeID, opts...).ToFunc()
}

// ByDisabilityTypeCode orders the results by the DisabilityTypeCode field.
func ByDisabilityTypeCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDisabilityTypeCode, opts...).ToFunc()
}

// ByDisabilityTypeDescription orders the results by the DisabilityTypeDescription field.
func ByDisabilityTypeDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDisabilityTypeDescription, opts...).ToFunc()
}

// ByMinimumMarks orders the results by the minimumMarks field.
func ByMinimumMarks(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMinimumMarks, opts...).ToFunc()
}

// ByOrderNumber orders the results by the OrderNumber field.
func ByOrderNumber(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOrderNumber, opts...).ToFunc()
}

// ByCreatedById orders the results by the CreatedById field.
func ByCreatedById(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedById, opts...).ToFunc()
}

// ByCreatedByUserName orders the results by the CreatedByUserName field.
func ByCreatedByUserName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedByUserName, opts...).ToFunc()
}

// ByCreatedByEmpId orders the results by the CreatedByEmpId field.
func ByCreatedByEmpId(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedByEmpId, opts...).ToFunc()
}

// ByCreatedByDesignation orders the results by the CreatedByDesignation field.
func ByCreatedByDesignation(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedByDesignation, opts...).ToFunc()
}

// ByCreatedDate orders the results by the CreatedDate field.
func ByCreatedDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedDate, opts...).ToFunc()
}

// ByVerifiedbyid orders the results by the verifiedbyid field.
func ByVerifiedbyid(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVerifiedbyid, opts...).ToFunc()
}

// ByVerifiedbyusername orders the results by the verifiedbyusername field.
func ByVerifiedbyusername(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVerifiedbyusername, opts...).ToFunc()
}

// ByVerifiedbyEmployeeid orders the results by the verifiedbyEmployeeid field.
func ByVerifiedbyEmployeeid(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVerifiedbyEmployeeid, opts...).ToFunc()
}

// ByVerifiedbyDesignation orders the results by the verifiedbyDesignation field.
func ByVerifiedbyDesignation(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVerifiedbyDesignation, opts...).ToFunc()
}

// ByVerifiedDate orders the results by the verifiedDate field.
func ByVerifiedDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVerifiedDate, opts...).ToFunc()
}

// ByStatuss orders the results by the Statuss field.
func ByStatuss(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatuss, opts...).ToFunc()
}

// ByDeletedbyid orders the results by the deletedbyid field.
func ByDeletedbyid(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedbyid, opts...).ToFunc()
}

// ByDeletedbyusername orders the results by the deletedbyusername field.
func ByDeletedbyusername(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedbyusername, opts...).ToFunc()
}

// ByDeletedbyEmployeeid orders the results by the deletedbyEmployeeid field.
func ByDeletedbyEmployeeid(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedbyEmployeeid, opts...).ToFunc()
}

// ByDeletedbyDesignation orders the results by the deletedbyDesignation field.
func ByDeletedbyDesignation(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedbyDesignation, opts...).ToFunc()
}

// ByDeletedDate orders the results by the deletedDate field.
func ByDeletedDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedDate, opts...).ToFunc()
}

// ByLogDataCount orders the results by LogData count.
func ByLogDataCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newLogDataStep(), opts...)
	}
}

// ByLogData orders the results by LogData terms.
func ByLogData(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newLogDataStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newLogDataStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(LogDataInverseTable, LogsFieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, LogDataTable, LogDataColumn),
	)
}
