// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"recruit/ent/login"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// Login is the model entity for the Login schema.
type Login struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// LoginID holds the value of the "loginID" field.
	LoginID uuid.UUID `json:"loginID,omitempty"`
	// Username holds the value of the "username" field.
	Username string `json:"username,omitempty"`
	// Password holds the value of the "password" field.
	Password string `json:"password,omitempty"`
	// EmployeedID holds the value of the "EmployeedID" field.
	EmployeedID int32 `json:"EmployeedID,omitempty"`
	// ExpireminsToken holds the value of the "expiremins_token" field.
	ExpireminsToken int32 `json:"expiremins_token,omitempty"`
	// ExpireminsRefreshToken holds the value of the "expiremins_refresh_token" field.
	ExpireminsRefreshToken int32 `json:"expiremins_refresh_token,omitempty"`
	// Role holds the value of the "role" field.
	Role int32 `json:"role,omitempty"`
	// Token holds the value of the "token" field.
	Token string `json:"token,omitempty"`
	// VerifyRemarks holds the value of the "VerifyRemarks" field.
	VerifyRemarks string `json:"VerifyRemarks,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the LoginQuery when eager-loading is set.
	Edges        LoginEdges `json:"edges"`
	selectValues sql.SelectValues
}

// LoginEdges holds the relations/edges for other nodes in the graph.
type LoginEdges struct {
	// LogData holds the value of the LogData edge.
	LogData []*Logs `json:"LogData,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// LogDataOrErr returns the LogData value or an error if the edge
// was not loaded in eager-loading.
func (e LoginEdges) LogDataOrErr() ([]*Logs, error) {
	if e.loadedTypes[0] {
		return e.LogData, nil
	}
	return nil, &NotLoadedError{edge: "LogData"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Login) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case login.FieldID, login.FieldEmployeedID, login.FieldExpireminsToken, login.FieldExpireminsRefreshToken, login.FieldRole:
			values[i] = new(sql.NullInt64)
		case login.FieldUsername, login.FieldPassword, login.FieldToken, login.FieldVerifyRemarks:
			values[i] = new(sql.NullString)
		case login.FieldLoginID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Login fields.
func (l *Login) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case login.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			l.ID = int(value.Int64)
		case login.FieldLoginID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field loginID", values[i])
			} else if value != nil {
				l.LoginID = *value
			}
		case login.FieldUsername:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field username", values[i])
			} else if value.Valid {
				l.Username = value.String
			}
		case login.FieldPassword:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field password", values[i])
			} else if value.Valid {
				l.Password = value.String
			}
		case login.FieldEmployeedID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field EmployeedID", values[i])
			} else if value.Valid {
				l.EmployeedID = int32(value.Int64)
			}
		case login.FieldExpireminsToken:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field expiremins_token", values[i])
			} else if value.Valid {
				l.ExpireminsToken = int32(value.Int64)
			}
		case login.FieldExpireminsRefreshToken:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field expiremins_refresh_token", values[i])
			} else if value.Valid {
				l.ExpireminsRefreshToken = int32(value.Int64)
			}
		case login.FieldRole:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field role", values[i])
			} else if value.Valid {
				l.Role = int32(value.Int64)
			}
		case login.FieldToken:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field token", values[i])
			} else if value.Valid {
				l.Token = value.String
			}
		case login.FieldVerifyRemarks:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field VerifyRemarks", values[i])
			} else if value.Valid {
				l.VerifyRemarks = value.String
			}
		default:
			l.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Login.
// This includes values selected through modifiers, order, etc.
func (l *Login) Value(name string) (ent.Value, error) {
	return l.selectValues.Get(name)
}

// QueryLogData queries the "LogData" edge of the Login entity.
func (l *Login) QueryLogData() *LogsQuery {
	return NewLoginClient(l.config).QueryLogData(l)
}

// Update returns a builder for updating this Login.
// Note that you need to call Login.Unwrap() before calling this method if this Login
// was returned from a transaction, and the transaction was committed or rolled back.
func (l *Login) Update() *LoginUpdateOne {
	return NewLoginClient(l.config).UpdateOne(l)
}

// Unwrap unwraps the Login entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (l *Login) Unwrap() *Login {
	_tx, ok := l.config.driver.(*txDriver)
	if !ok {
		panic("ent: Login is not a transactional entity")
	}
	l.config.driver = _tx.drv
	return l
}

// String implements the fmt.Stringer.
func (l *Login) String() string {
	var builder strings.Builder
	builder.WriteString("Login(")
	builder.WriteString(fmt.Sprintf("id=%v, ", l.ID))
	builder.WriteString("loginID=")
	builder.WriteString(fmt.Sprintf("%v", l.LoginID))
	builder.WriteString(", ")
	builder.WriteString("username=")
	builder.WriteString(l.Username)
	builder.WriteString(", ")
	builder.WriteString("password=")
	builder.WriteString(l.Password)
	builder.WriteString(", ")
	builder.WriteString("EmployeedID=")
	builder.WriteString(fmt.Sprintf("%v", l.EmployeedID))
	builder.WriteString(", ")
	builder.WriteString("expiremins_token=")
	builder.WriteString(fmt.Sprintf("%v", l.ExpireminsToken))
	builder.WriteString(", ")
	builder.WriteString("expiremins_refresh_token=")
	builder.WriteString(fmt.Sprintf("%v", l.ExpireminsRefreshToken))
	builder.WriteString(", ")
	builder.WriteString("role=")
	builder.WriteString(fmt.Sprintf("%v", l.Role))
	builder.WriteString(", ")
	builder.WriteString("token=")
	builder.WriteString(l.Token)
	builder.WriteString(", ")
	builder.WriteString("VerifyRemarks=")
	builder.WriteString(l.VerifyRemarks)
	builder.WriteByte(')')
	return builder.String()
}

// Logins is a parsable slice of Login.
type Logins []*Login
