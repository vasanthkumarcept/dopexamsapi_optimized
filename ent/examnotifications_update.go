// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"recruit/ent/examnotifications"
	"recruit/ent/logs"
	"recruit/ent/predicate"
	"recruit/ent/usermaster"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
)

// ExamNotificationsUpdate is the builder for updating ExamNotifications entities.
type ExamNotificationsUpdate struct {
	config
	hooks    []Hook
	mutation *ExamNotificationsMutation
}

// Where appends a list predicates to the ExamNotificationsUpdate builder.
func (enu *ExamNotificationsUpdate) Where(ps ...predicate.ExamNotifications) *ExamNotificationsUpdate {
	enu.mutation.Where(ps...)
	return enu
}

// SetUserName sets the "UserName" field.
func (enu *ExamNotificationsUpdate) SetUserName(s string) *ExamNotificationsUpdate {
	enu.mutation.SetUserName(s)
	return enu
}

// SetNillableUserName sets the "UserName" field if the given value is not nil.
func (enu *ExamNotificationsUpdate) SetNillableUserName(s *string) *ExamNotificationsUpdate {
	if s != nil {
		enu.SetUserName(*s)
	}
	return enu
}

// ClearUserName clears the value of the "UserName" field.
func (enu *ExamNotificationsUpdate) ClearUserName() *ExamNotificationsUpdate {
	enu.mutation.ClearUserName()
	return enu
}

// SetExamYear sets the "ExamYear" field.
func (enu *ExamNotificationsUpdate) SetExamYear(i int32) *ExamNotificationsUpdate {
	enu.mutation.ResetExamYear()
	enu.mutation.SetExamYear(i)
	return enu
}

// SetNillableExamYear sets the "ExamYear" field if the given value is not nil.
func (enu *ExamNotificationsUpdate) SetNillableExamYear(i *int32) *ExamNotificationsUpdate {
	if i != nil {
		enu.SetExamYear(*i)
	}
	return enu
}

// AddExamYear adds i to the "ExamYear" field.
func (enu *ExamNotificationsUpdate) AddExamYear(i int32) *ExamNotificationsUpdate {
	enu.mutation.AddExamYear(i)
	return enu
}

// ClearExamYear clears the value of the "ExamYear" field.
func (enu *ExamNotificationsUpdate) ClearExamYear() *ExamNotificationsUpdate {
	enu.mutation.ClearExamYear()
	return enu
}

// SetEmployeeMasterRequestLastDate sets the "EmployeeMasterRequestLastDate" field.
func (enu *ExamNotificationsUpdate) SetEmployeeMasterRequestLastDate(t time.Time) *ExamNotificationsUpdate {
	enu.mutation.SetEmployeeMasterRequestLastDate(t)
	return enu
}

// SetNillableEmployeeMasterRequestLastDate sets the "EmployeeMasterRequestLastDate" field if the given value is not nil.
func (enu *ExamNotificationsUpdate) SetNillableEmployeeMasterRequestLastDate(t *time.Time) *ExamNotificationsUpdate {
	if t != nil {
		enu.SetEmployeeMasterRequestLastDate(*t)
	}
	return enu
}

// ClearEmployeeMasterRequestLastDate clears the value of the "EmployeeMasterRequestLastDate" field.
func (enu *ExamNotificationsUpdate) ClearEmployeeMasterRequestLastDate() *ExamNotificationsUpdate {
	enu.mutation.ClearEmployeeMasterRequestLastDate()
	return enu
}

// SetEmployeeMasterRequestApprovalLastDate sets the "EmployeeMasterRequestApprovalLastDate" field.
func (enu *ExamNotificationsUpdate) SetEmployeeMasterRequestApprovalLastDate(t time.Time) *ExamNotificationsUpdate {
	enu.mutation.SetEmployeeMasterRequestApprovalLastDate(t)
	return enu
}

// SetNillableEmployeeMasterRequestApprovalLastDate sets the "EmployeeMasterRequestApprovalLastDate" field if the given value is not nil.
func (enu *ExamNotificationsUpdate) SetNillableEmployeeMasterRequestApprovalLastDate(t *time.Time) *ExamNotificationsUpdate {
	if t != nil {
		enu.SetEmployeeMasterRequestApprovalLastDate(*t)
	}
	return enu
}

// ClearEmployeeMasterRequestApprovalLastDate clears the value of the "EmployeeMasterRequestApprovalLastDate" field.
func (enu *ExamNotificationsUpdate) ClearEmployeeMasterRequestApprovalLastDate() *ExamNotificationsUpdate {
	enu.mutation.ClearEmployeeMasterRequestApprovalLastDate()
	return enu
}

// SetExamRegisterLastDate sets the "ExamRegisterLastDate" field.
func (enu *ExamNotificationsUpdate) SetExamRegisterLastDate(t time.Time) *ExamNotificationsUpdate {
	enu.mutation.SetExamRegisterLastDate(t)
	return enu
}

// SetNillableExamRegisterLastDate sets the "ExamRegisterLastDate" field if the given value is not nil.
func (enu *ExamNotificationsUpdate) SetNillableExamRegisterLastDate(t *time.Time) *ExamNotificationsUpdate {
	if t != nil {
		enu.SetExamRegisterLastDate(*t)
	}
	return enu
}

// ClearExamRegisterLastDate clears the value of the "ExamRegisterLastDate" field.
func (enu *ExamNotificationsUpdate) ClearExamRegisterLastDate() *ExamNotificationsUpdate {
	enu.mutation.ClearExamRegisterLastDate()
	return enu
}

// SetApplicationStartDate sets the "ApplicationStartDate" field.
func (enu *ExamNotificationsUpdate) SetApplicationStartDate(t time.Time) *ExamNotificationsUpdate {
	enu.mutation.SetApplicationStartDate(t)
	return enu
}

// SetNillableApplicationStartDate sets the "ApplicationStartDate" field if the given value is not nil.
func (enu *ExamNotificationsUpdate) SetNillableApplicationStartDate(t *time.Time) *ExamNotificationsUpdate {
	if t != nil {
		enu.SetApplicationStartDate(*t)
	}
	return enu
}

// ClearApplicationStartDate clears the value of the "ApplicationStartDate" field.
func (enu *ExamNotificationsUpdate) ClearApplicationStartDate() *ExamNotificationsUpdate {
	enu.mutation.ClearApplicationStartDate()
	return enu
}

// SetApplicationEndDate sets the "ApplicationEndDate" field.
func (enu *ExamNotificationsUpdate) SetApplicationEndDate(t time.Time) *ExamNotificationsUpdate {
	enu.mutation.SetApplicationEndDate(t)
	return enu
}

// SetNillableApplicationEndDate sets the "ApplicationEndDate" field if the given value is not nil.
func (enu *ExamNotificationsUpdate) SetNillableApplicationEndDate(t *time.Time) *ExamNotificationsUpdate {
	if t != nil {
		enu.SetApplicationEndDate(*t)
	}
	return enu
}

// ClearApplicationEndDate clears the value of the "ApplicationEndDate" field.
func (enu *ExamNotificationsUpdate) ClearApplicationEndDate() *ExamNotificationsUpdate {
	enu.mutation.ClearApplicationEndDate()
	return enu
}

// SetApplicationCorrectionStartDate sets the "ApplicationCorrectionStartDate" field.
func (enu *ExamNotificationsUpdate) SetApplicationCorrectionStartDate(t time.Time) *ExamNotificationsUpdate {
	enu.mutation.SetApplicationCorrectionStartDate(t)
	return enu
}

// SetNillableApplicationCorrectionStartDate sets the "ApplicationCorrectionStartDate" field if the given value is not nil.
func (enu *ExamNotificationsUpdate) SetNillableApplicationCorrectionStartDate(t *time.Time) *ExamNotificationsUpdate {
	if t != nil {
		enu.SetApplicationCorrectionStartDate(*t)
	}
	return enu
}

// ClearApplicationCorrectionStartDate clears the value of the "ApplicationCorrectionStartDate" field.
func (enu *ExamNotificationsUpdate) ClearApplicationCorrectionStartDate() *ExamNotificationsUpdate {
	enu.mutation.ClearApplicationCorrectionStartDate()
	return enu
}

// SetApplicationCorrectionLastDate sets the "ApplicationCorrectionLastDate" field.
func (enu *ExamNotificationsUpdate) SetApplicationCorrectionLastDate(t time.Time) *ExamNotificationsUpdate {
	enu.mutation.SetApplicationCorrectionLastDate(t)
	return enu
}

// SetNillableApplicationCorrectionLastDate sets the "ApplicationCorrectionLastDate" field if the given value is not nil.
func (enu *ExamNotificationsUpdate) SetNillableApplicationCorrectionLastDate(t *time.Time) *ExamNotificationsUpdate {
	if t != nil {
		enu.SetApplicationCorrectionLastDate(*t)
	}
	return enu
}

// ClearApplicationCorrectionLastDate clears the value of the "ApplicationCorrectionLastDate" field.
func (enu *ExamNotificationsUpdate) ClearApplicationCorrectionLastDate() *ExamNotificationsUpdate {
	enu.mutation.ClearApplicationCorrectionLastDate()
	return enu
}

// SetApplicationVerificationLastDate sets the "ApplicationVerificationLastDate" field.
func (enu *ExamNotificationsUpdate) SetApplicationVerificationLastDate(t time.Time) *ExamNotificationsUpdate {
	enu.mutation.SetApplicationVerificationLastDate(t)
	return enu
}

// SetNillableApplicationVerificationLastDate sets the "ApplicationVerificationLastDate" field if the given value is not nil.
func (enu *ExamNotificationsUpdate) SetNillableApplicationVerificationLastDate(t *time.Time) *ExamNotificationsUpdate {
	if t != nil {
		enu.SetApplicationVerificationLastDate(*t)
	}
	return enu
}

// ClearApplicationVerificationLastDate clears the value of the "ApplicationVerificationLastDate" field.
func (enu *ExamNotificationsUpdate) ClearApplicationVerificationLastDate() *ExamNotificationsUpdate {
	enu.mutation.ClearApplicationVerificationLastDate()
	return enu
}

// SetCenterAllotmentEndDate sets the "CenterAllotmentEndDate" field.
func (enu *ExamNotificationsUpdate) SetCenterAllotmentEndDate(t time.Time) *ExamNotificationsUpdate {
	enu.mutation.SetCenterAllotmentEndDate(t)
	return enu
}

// SetNillableCenterAllotmentEndDate sets the "CenterAllotmentEndDate" field if the given value is not nil.
func (enu *ExamNotificationsUpdate) SetNillableCenterAllotmentEndDate(t *time.Time) *ExamNotificationsUpdate {
	if t != nil {
		enu.SetCenterAllotmentEndDate(*t)
	}
	return enu
}

// ClearCenterAllotmentEndDate clears the value of the "CenterAllotmentEndDate" field.
func (enu *ExamNotificationsUpdate) ClearCenterAllotmentEndDate() *ExamNotificationsUpdate {
	enu.mutation.ClearCenterAllotmentEndDate()
	return enu
}

// SetNodalOfficerApprovalDate sets the "NodalOfficerApprovalDate" field.
func (enu *ExamNotificationsUpdate) SetNodalOfficerApprovalDate(t time.Time) *ExamNotificationsUpdate {
	enu.mutation.SetNodalOfficerApprovalDate(t)
	return enu
}

// SetNillableNodalOfficerApprovalDate sets the "NodalOfficerApprovalDate" field if the given value is not nil.
func (enu *ExamNotificationsUpdate) SetNillableNodalOfficerApprovalDate(t *time.Time) *ExamNotificationsUpdate {
	if t != nil {
		enu.SetNodalOfficerApprovalDate(*t)
	}
	return enu
}

// ClearNodalOfficerApprovalDate clears the value of the "NodalOfficerApprovalDate" field.
func (enu *ExamNotificationsUpdate) ClearNodalOfficerApprovalDate() *ExamNotificationsUpdate {
	enu.mutation.ClearNodalOfficerApprovalDate()
	return enu
}

// SetAdmitCardDate sets the "AdmitCardDate" field.
func (enu *ExamNotificationsUpdate) SetAdmitCardDate(t time.Time) *ExamNotificationsUpdate {
	enu.mutation.SetAdmitCardDate(t)
	return enu
}

// SetNillableAdmitCardDate sets the "AdmitCardDate" field if the given value is not nil.
func (enu *ExamNotificationsUpdate) SetNillableAdmitCardDate(t *time.Time) *ExamNotificationsUpdate {
	if t != nil {
		enu.SetAdmitCardDate(*t)
	}
	return enu
}

// ClearAdmitCardDate clears the value of the "AdmitCardDate" field.
func (enu *ExamNotificationsUpdate) ClearAdmitCardDate() *ExamNotificationsUpdate {
	enu.mutation.ClearAdmitCardDate()
	return enu
}

// SetUpdatedAt sets the "UpdatedAt" field.
func (enu *ExamNotificationsUpdate) SetUpdatedAt(t time.Time) *ExamNotificationsUpdate {
	enu.mutation.SetUpdatedAt(t)
	return enu
}

// SetNillableUpdatedAt sets the "UpdatedAt" field if the given value is not nil.
func (enu *ExamNotificationsUpdate) SetNillableUpdatedAt(t *time.Time) *ExamNotificationsUpdate {
	if t != nil {
		enu.SetUpdatedAt(*t)
	}
	return enu
}

// ClearUpdatedAt clears the value of the "UpdatedAt" field.
func (enu *ExamNotificationsUpdate) ClearUpdatedAt() *ExamNotificationsUpdate {
	enu.mutation.ClearUpdatedAt()
	return enu
}

// SetUpdatedBy sets the "UpdatedBy" field.
func (enu *ExamNotificationsUpdate) SetUpdatedBy(s string) *ExamNotificationsUpdate {
	enu.mutation.SetUpdatedBy(s)
	return enu
}

// SetNillableUpdatedBy sets the "UpdatedBy" field if the given value is not nil.
func (enu *ExamNotificationsUpdate) SetNillableUpdatedBy(s *string) *ExamNotificationsUpdate {
	if s != nil {
		enu.SetUpdatedBy(*s)
	}
	return enu
}

// ClearUpdatedBy clears the value of the "UpdatedBy" field.
func (enu *ExamNotificationsUpdate) ClearUpdatedBy() *ExamNotificationsUpdate {
	enu.mutation.ClearUpdatedBy()
	return enu
}

// SetCrucialDate sets the "CrucialDate" field.
func (enu *ExamNotificationsUpdate) SetCrucialDate(i []interface{}) *ExamNotificationsUpdate {
	enu.mutation.SetCrucialDate(i)
	return enu
}

// AppendCrucialDate appends i to the "CrucialDate" field.
func (enu *ExamNotificationsUpdate) AppendCrucialDate(i []interface{}) *ExamNotificationsUpdate {
	enu.mutation.AppendCrucialDate(i)
	return enu
}

// ClearCrucialDate clears the value of the "CrucialDate" field.
func (enu *ExamNotificationsUpdate) ClearCrucialDate() *ExamNotificationsUpdate {
	enu.mutation.ClearCrucialDate()
	return enu
}

// SetDesignation sets the "Designation" field.
func (enu *ExamNotificationsUpdate) SetDesignation(s string) *ExamNotificationsUpdate {
	enu.mutation.SetDesignation(s)
	return enu
}

// SetNillableDesignation sets the "Designation" field if the given value is not nil.
func (enu *ExamNotificationsUpdate) SetNillableDesignation(s *string) *ExamNotificationsUpdate {
	if s != nil {
		enu.SetDesignation(*s)
	}
	return enu
}

// ClearDesignation clears the value of the "Designation" field.
func (enu *ExamNotificationsUpdate) ClearDesignation() *ExamNotificationsUpdate {
	enu.mutation.ClearDesignation()
	return enu
}

// SetOfficerName sets the "OfficerName" field.
func (enu *ExamNotificationsUpdate) SetOfficerName(s string) *ExamNotificationsUpdate {
	enu.mutation.SetOfficerName(s)
	return enu
}

// SetNillableOfficerName sets the "OfficerName" field if the given value is not nil.
func (enu *ExamNotificationsUpdate) SetNillableOfficerName(s *string) *ExamNotificationsUpdate {
	if s != nil {
		enu.SetOfficerName(*s)
	}
	return enu
}

// ClearOfficerName clears the value of the "OfficerName" field.
func (enu *ExamNotificationsUpdate) ClearOfficerName() *ExamNotificationsUpdate {
	enu.mutation.ClearOfficerName()
	return enu
}

// SetNotificationOrderNumber sets the "NotificationOrderNumber" field.
func (enu *ExamNotificationsUpdate) SetNotificationOrderNumber(s string) *ExamNotificationsUpdate {
	enu.mutation.SetNotificationOrderNumber(s)
	return enu
}

// SetNillableNotificationOrderNumber sets the "NotificationOrderNumber" field if the given value is not nil.
func (enu *ExamNotificationsUpdate) SetNillableNotificationOrderNumber(s *string) *ExamNotificationsUpdate {
	if s != nil {
		enu.SetNotificationOrderNumber(*s)
	}
	return enu
}

// ClearNotificationOrderNumber clears the value of the "NotificationOrderNumber" field.
func (enu *ExamNotificationsUpdate) ClearNotificationOrderNumber() *ExamNotificationsUpdate {
	enu.mutation.ClearNotificationOrderNumber()
	return enu
}

// SetNotesheetScannedCopy sets the "NotesheetScannedCopy" field.
func (enu *ExamNotificationsUpdate) SetNotesheetScannedCopy(s string) *ExamNotificationsUpdate {
	enu.mutation.SetNotesheetScannedCopy(s)
	return enu
}

// SetNillableNotesheetScannedCopy sets the "NotesheetScannedCopy" field if the given value is not nil.
func (enu *ExamNotificationsUpdate) SetNillableNotesheetScannedCopy(s *string) *ExamNotificationsUpdate {
	if s != nil {
		enu.SetNotesheetScannedCopy(*s)
	}
	return enu
}

// ClearNotesheetScannedCopy clears the value of the "NotesheetScannedCopy" field.
func (enu *ExamNotificationsUpdate) ClearNotesheetScannedCopy() *ExamNotificationsUpdate {
	enu.mutation.ClearNotesheetScannedCopy()
	return enu
}

// SetNotificationNumber sets the "NotificationNumber" field.
func (enu *ExamNotificationsUpdate) SetNotificationNumber(s string) *ExamNotificationsUpdate {
	enu.mutation.SetNotificationNumber(s)
	return enu
}

// SetNillableNotificationNumber sets the "NotificationNumber" field if the given value is not nil.
func (enu *ExamNotificationsUpdate) SetNillableNotificationNumber(s *string) *ExamNotificationsUpdate {
	if s != nil {
		enu.SetNotificationNumber(*s)
	}
	return enu
}

// ClearNotificationNumber clears the value of the "NotificationNumber" field.
func (enu *ExamNotificationsUpdate) ClearNotificationNumber() *ExamNotificationsUpdate {
	enu.mutation.ClearNotificationNumber()
	return enu
}

// SetFlag sets the "Flag" field.
func (enu *ExamNotificationsUpdate) SetFlag(b bool) *ExamNotificationsUpdate {
	enu.mutation.SetFlag(b)
	return enu
}

// SetNillableFlag sets the "Flag" field if the given value is not nil.
func (enu *ExamNotificationsUpdate) SetNillableFlag(b *bool) *ExamNotificationsUpdate {
	if b != nil {
		enu.SetFlag(*b)
	}
	return enu
}

// ClearFlag clears the value of the "Flag" field.
func (enu *ExamNotificationsUpdate) ClearFlag() *ExamNotificationsUpdate {
	enu.mutation.ClearFlag()
	return enu
}

// SetExamShortName sets the "ExamShortName" field.
func (enu *ExamNotificationsUpdate) SetExamShortName(s string) *ExamNotificationsUpdate {
	enu.mutation.SetExamShortName(s)
	return enu
}

// SetNillableExamShortName sets the "ExamShortName" field if the given value is not nil.
func (enu *ExamNotificationsUpdate) SetNillableExamShortName(s *string) *ExamNotificationsUpdate {
	if s != nil {
		enu.SetExamShortName(*s)
	}
	return enu
}

// ClearExamShortName clears the value of the "ExamShortName" field.
func (enu *ExamNotificationsUpdate) ClearExamShortName() *ExamNotificationsUpdate {
	enu.mutation.ClearExamShortName()
	return enu
}

// SetCircleOfficeFacilityId sets the "CircleOfficeFacilityId" field.
func (enu *ExamNotificationsUpdate) SetCircleOfficeFacilityId(s string) *ExamNotificationsUpdate {
	enu.mutation.SetCircleOfficeFacilityId(s)
	return enu
}

// SetNillableCircleOfficeFacilityId sets the "CircleOfficeFacilityId" field if the given value is not nil.
func (enu *ExamNotificationsUpdate) SetNillableCircleOfficeFacilityId(s *string) *ExamNotificationsUpdate {
	if s != nil {
		enu.SetCircleOfficeFacilityId(*s)
	}
	return enu
}

// ClearCircleOfficeFacilityId clears the value of the "CircleOfficeFacilityId" field.
func (enu *ExamNotificationsUpdate) ClearCircleOfficeFacilityId() *ExamNotificationsUpdate {
	enu.mutation.ClearCircleOfficeFacilityId()
	return enu
}

// SetCircleOfficeName sets the "CircleOfficeName" field.
func (enu *ExamNotificationsUpdate) SetCircleOfficeName(s string) *ExamNotificationsUpdate {
	enu.mutation.SetCircleOfficeName(s)
	return enu
}

// SetNillableCircleOfficeName sets the "CircleOfficeName" field if the given value is not nil.
func (enu *ExamNotificationsUpdate) SetNillableCircleOfficeName(s *string) *ExamNotificationsUpdate {
	if s != nil {
		enu.SetCircleOfficeName(*s)
	}
	return enu
}

// ClearCircleOfficeName clears the value of the "CircleOfficeName" field.
func (enu *ExamNotificationsUpdate) ClearCircleOfficeName() *ExamNotificationsUpdate {
	enu.mutation.ClearCircleOfficeName()
	return enu
}

// SetIssuedBy sets the "IssuedBy" field.
func (enu *ExamNotificationsUpdate) SetIssuedBy(s string) *ExamNotificationsUpdate {
	enu.mutation.SetIssuedBy(s)
	return enu
}

// SetNillableIssuedBy sets the "IssuedBy" field if the given value is not nil.
func (enu *ExamNotificationsUpdate) SetNillableIssuedBy(s *string) *ExamNotificationsUpdate {
	if s != nil {
		enu.SetIssuedBy(*s)
	}
	return enu
}

// ClearIssuedBy clears the value of the "IssuedBy" field.
func (enu *ExamNotificationsUpdate) ClearIssuedBy() *ExamNotificationsUpdate {
	enu.mutation.ClearIssuedBy()
	return enu
}

// SetOrderDate sets the "OrderDate" field.
func (enu *ExamNotificationsUpdate) SetOrderDate(t time.Time) *ExamNotificationsUpdate {
	enu.mutation.SetOrderDate(t)
	return enu
}

// SetNillableOrderDate sets the "OrderDate" field if the given value is not nil.
func (enu *ExamNotificationsUpdate) SetNillableOrderDate(t *time.Time) *ExamNotificationsUpdate {
	if t != nil {
		enu.SetOrderDate(*t)
	}
	return enu
}

// ClearOrderDate clears the value of the "OrderDate" field.
func (enu *ExamNotificationsUpdate) ClearOrderDate() *ExamNotificationsUpdate {
	enu.mutation.ClearOrderDate()
	return enu
}

// SetCreatedBy sets the "CreatedBy" field.
func (enu *ExamNotificationsUpdate) SetCreatedBy(s string) *ExamNotificationsUpdate {
	enu.mutation.SetCreatedBy(s)
	return enu
}

// SetNillableCreatedBy sets the "CreatedBy" field if the given value is not nil.
func (enu *ExamNotificationsUpdate) SetNillableCreatedBy(s *string) *ExamNotificationsUpdate {
	if s != nil {
		enu.SetCreatedBy(*s)
	}
	return enu
}

// ClearCreatedBy clears the value of the "CreatedBy" field.
func (enu *ExamNotificationsUpdate) ClearCreatedBy() *ExamNotificationsUpdate {
	enu.mutation.ClearCreatedBy()
	return enu
}

// SetCreatedById sets the "CreatedById" field.
func (enu *ExamNotificationsUpdate) SetCreatedById(i int64) *ExamNotificationsUpdate {
	enu.mutation.ResetCreatedById()
	enu.mutation.SetCreatedById(i)
	return enu
}

// SetNillableCreatedById sets the "CreatedById" field if the given value is not nil.
func (enu *ExamNotificationsUpdate) SetNillableCreatedById(i *int64) *ExamNotificationsUpdate {
	if i != nil {
		enu.SetCreatedById(*i)
	}
	return enu
}

// AddCreatedById adds i to the "CreatedById" field.
func (enu *ExamNotificationsUpdate) AddCreatedById(i int64) *ExamNotificationsUpdate {
	enu.mutation.AddCreatedById(i)
	return enu
}

// ClearCreatedById clears the value of the "CreatedById" field.
func (enu *ExamNotificationsUpdate) ClearCreatedById() *ExamNotificationsUpdate {
	enu.mutation.ClearCreatedById()
	return enu
}

// SetCreatedByName sets the "CreatedByName" field.
func (enu *ExamNotificationsUpdate) SetCreatedByName(s string) *ExamNotificationsUpdate {
	enu.mutation.SetCreatedByName(s)
	return enu
}

// SetNillableCreatedByName sets the "CreatedByName" field if the given value is not nil.
func (enu *ExamNotificationsUpdate) SetNillableCreatedByName(s *string) *ExamNotificationsUpdate {
	if s != nil {
		enu.SetCreatedByName(*s)
	}
	return enu
}

// ClearCreatedByName clears the value of the "CreatedByName" field.
func (enu *ExamNotificationsUpdate) ClearCreatedByName() *ExamNotificationsUpdate {
	enu.mutation.ClearCreatedByName()
	return enu
}

// SetCreatedByDesignation sets the "CreatedByDesignation" field.
func (enu *ExamNotificationsUpdate) SetCreatedByDesignation(s string) *ExamNotificationsUpdate {
	enu.mutation.SetCreatedByDesignation(s)
	return enu
}

// SetNillableCreatedByDesignation sets the "CreatedByDesignation" field if the given value is not nil.
func (enu *ExamNotificationsUpdate) SetNillableCreatedByDesignation(s *string) *ExamNotificationsUpdate {
	if s != nil {
		enu.SetCreatedByDesignation(*s)
	}
	return enu
}

// ClearCreatedByDesignation clears the value of the "CreatedByDesignation" field.
func (enu *ExamNotificationsUpdate) ClearCreatedByDesignation() *ExamNotificationsUpdate {
	enu.mutation.ClearCreatedByDesignation()
	return enu
}

// SetApprovedBy sets the "ApprovedBy" field.
func (enu *ExamNotificationsUpdate) SetApprovedBy(s string) *ExamNotificationsUpdate {
	enu.mutation.SetApprovedBy(s)
	return enu
}

// SetNillableApprovedBy sets the "ApprovedBy" field if the given value is not nil.
func (enu *ExamNotificationsUpdate) SetNillableApprovedBy(s *string) *ExamNotificationsUpdate {
	if s != nil {
		enu.SetApprovedBy(*s)
	}
	return enu
}

// ClearApprovedBy clears the value of the "ApprovedBy" field.
func (enu *ExamNotificationsUpdate) ClearApprovedBy() *ExamNotificationsUpdate {
	enu.mutation.ClearApprovedBy()
	return enu
}

// SetApprovedById sets the "ApprovedById" field.
func (enu *ExamNotificationsUpdate) SetApprovedById(i int64) *ExamNotificationsUpdate {
	enu.mutation.ResetApprovedById()
	enu.mutation.SetApprovedById(i)
	return enu
}

// SetNillableApprovedById sets the "ApprovedById" field if the given value is not nil.
func (enu *ExamNotificationsUpdate) SetNillableApprovedById(i *int64) *ExamNotificationsUpdate {
	if i != nil {
		enu.SetApprovedById(*i)
	}
	return enu
}

// AddApprovedById adds i to the "ApprovedById" field.
func (enu *ExamNotificationsUpdate) AddApprovedById(i int64) *ExamNotificationsUpdate {
	enu.mutation.AddApprovedById(i)
	return enu
}

// ClearApprovedById clears the value of the "ApprovedById" field.
func (enu *ExamNotificationsUpdate) ClearApprovedById() *ExamNotificationsUpdate {
	enu.mutation.ClearApprovedById()
	return enu
}

// SetApprovedByName sets the "ApprovedByName" field.
func (enu *ExamNotificationsUpdate) SetApprovedByName(s string) *ExamNotificationsUpdate {
	enu.mutation.SetApprovedByName(s)
	return enu
}

// SetNillableApprovedByName sets the "ApprovedByName" field if the given value is not nil.
func (enu *ExamNotificationsUpdate) SetNillableApprovedByName(s *string) *ExamNotificationsUpdate {
	if s != nil {
		enu.SetApprovedByName(*s)
	}
	return enu
}

// ClearApprovedByName clears the value of the "ApprovedByName" field.
func (enu *ExamNotificationsUpdate) ClearApprovedByName() *ExamNotificationsUpdate {
	enu.mutation.ClearApprovedByName()
	return enu
}

// SetApprovedByDesignation sets the "ApprovedByDesignation" field.
func (enu *ExamNotificationsUpdate) SetApprovedByDesignation(s string) *ExamNotificationsUpdate {
	enu.mutation.SetApprovedByDesignation(s)
	return enu
}

// SetNillableApprovedByDesignation sets the "ApprovedByDesignation" field if the given value is not nil.
func (enu *ExamNotificationsUpdate) SetNillableApprovedByDesignation(s *string) *ExamNotificationsUpdate {
	if s != nil {
		enu.SetApprovedByDesignation(*s)
	}
	return enu
}

// ClearApprovedByDesignation clears the value of the "ApprovedByDesignation" field.
func (enu *ExamNotificationsUpdate) ClearApprovedByDesignation() *ExamNotificationsUpdate {
	enu.mutation.ClearApprovedByDesignation()
	return enu
}

// SetResubmittedApplicationVerificationDate sets the "ResubmittedApplicationVerificationDate" field.
func (enu *ExamNotificationsUpdate) SetResubmittedApplicationVerificationDate(t time.Time) *ExamNotificationsUpdate {
	enu.mutation.SetResubmittedApplicationVerificationDate(t)
	return enu
}

// SetNillableResubmittedApplicationVerificationDate sets the "ResubmittedApplicationVerificationDate" field if the given value is not nil.
func (enu *ExamNotificationsUpdate) SetNillableResubmittedApplicationVerificationDate(t *time.Time) *ExamNotificationsUpdate {
	if t != nil {
		enu.SetResubmittedApplicationVerificationDate(*t)
	}
	return enu
}

// ClearResubmittedApplicationVerificationDate clears the value of the "ResubmittedApplicationVerificationDate" field.
func (enu *ExamNotificationsUpdate) ClearResubmittedApplicationVerificationDate() *ExamNotificationsUpdate {
	enu.mutation.ClearResubmittedApplicationVerificationDate()
	return enu
}

// SetPapers sets the "Papers" field.
func (enu *ExamNotificationsUpdate) SetPapers(i []interface{}) *ExamNotificationsUpdate {
	enu.mutation.SetPapers(i)
	return enu
}

// AppendPapers appends i to the "Papers" field.
func (enu *ExamNotificationsUpdate) AppendPapers(i []interface{}) *ExamNotificationsUpdate {
	enu.mutation.AppendPapers(i)
	return enu
}

// ClearPapers clears the value of the "Papers" field.
func (enu *ExamNotificationsUpdate) ClearPapers() *ExamNotificationsUpdate {
	enu.mutation.ClearPapers()
	return enu
}

// SetNotificationStatus sets the "NotificationStatus" field.
func (enu *ExamNotificationsUpdate) SetNotificationStatus(s string) *ExamNotificationsUpdate {
	enu.mutation.SetNotificationStatus(s)
	return enu
}

// SetNillableNotificationStatus sets the "NotificationStatus" field if the given value is not nil.
func (enu *ExamNotificationsUpdate) SetNillableNotificationStatus(s *string) *ExamNotificationsUpdate {
	if s != nil {
		enu.SetNotificationStatus(*s)
	}
	return enu
}

// ClearNotificationStatus clears the value of the "NotificationStatus" field.
func (enu *ExamNotificationsUpdate) ClearNotificationStatus() *ExamNotificationsUpdate {
	enu.mutation.ClearNotificationStatus()
	return enu
}

// SetStatus sets the "Status" field.
func (enu *ExamNotificationsUpdate) SetStatus(s string) *ExamNotificationsUpdate {
	enu.mutation.SetStatus(s)
	return enu
}

// SetNillableStatus sets the "Status" field if the given value is not nil.
func (enu *ExamNotificationsUpdate) SetNillableStatus(s *string) *ExamNotificationsUpdate {
	if s != nil {
		enu.SetStatus(*s)
	}
	return enu
}

// ClearStatus clears the value of the "Status" field.
func (enu *ExamNotificationsUpdate) ClearStatus() *ExamNotificationsUpdate {
	enu.mutation.ClearStatus()
	return enu
}

// SetNotificationReIssueStatus sets the "NotificationReIssueStatus" field.
func (enu *ExamNotificationsUpdate) SetNotificationReIssueStatus(b bool) *ExamNotificationsUpdate {
	enu.mutation.SetNotificationReIssueStatus(b)
	return enu
}

// SetNillableNotificationReIssueStatus sets the "NotificationReIssueStatus" field if the given value is not nil.
func (enu *ExamNotificationsUpdate) SetNillableNotificationReIssueStatus(b *bool) *ExamNotificationsUpdate {
	if b != nil {
		enu.SetNotificationReIssueStatus(*b)
	}
	return enu
}

// ClearNotificationReIssueStatus clears the value of the "NotificationReIssueStatus" field.
func (enu *ExamNotificationsUpdate) ClearNotificationReIssueStatus() *ExamNotificationsUpdate {
	enu.mutation.ClearNotificationReIssueStatus()
	return enu
}

// SetEditFlagStatus sets the "EditFlagStatus" field.
func (enu *ExamNotificationsUpdate) SetEditFlagStatus(b bool) *ExamNotificationsUpdate {
	enu.mutation.SetEditFlagStatus(b)
	return enu
}

// SetNillableEditFlagStatus sets the "EditFlagStatus" field if the given value is not nil.
func (enu *ExamNotificationsUpdate) SetNillableEditFlagStatus(b *bool) *ExamNotificationsUpdate {
	if b != nil {
		enu.SetEditFlagStatus(*b)
	}
	return enu
}

// ClearEditFlagStatus clears the value of the "EditFlagStatus" field.
func (enu *ExamNotificationsUpdate) ClearEditFlagStatus() *ExamNotificationsUpdate {
	enu.mutation.ClearEditFlagStatus()
	return enu
}

// SetExamCode sets the "ExamCode" field.
func (enu *ExamNotificationsUpdate) SetExamCode(i int32) *ExamNotificationsUpdate {
	enu.mutation.ResetExamCode()
	enu.mutation.SetExamCode(i)
	return enu
}

// SetNillableExamCode sets the "ExamCode" field if the given value is not nil.
func (enu *ExamNotificationsUpdate) SetNillableExamCode(i *int32) *ExamNotificationsUpdate {
	if i != nil {
		enu.SetExamCode(*i)
	}
	return enu
}

// AddExamCode adds i to the "ExamCode" field.
func (enu *ExamNotificationsUpdate) AddExamCode(i int32) *ExamNotificationsUpdate {
	enu.mutation.AddExamCode(i)
	return enu
}

// ClearExamCode clears the value of the "ExamCode" field.
func (enu *ExamNotificationsUpdate) ClearExamCode() *ExamNotificationsUpdate {
	enu.mutation.ClearExamCode()
	return enu
}

// SetExamName sets the "ExamName" field.
func (enu *ExamNotificationsUpdate) SetExamName(s string) *ExamNotificationsUpdate {
	enu.mutation.SetExamName(s)
	return enu
}

// SetNillableExamName sets the "ExamName" field if the given value is not nil.
func (enu *ExamNotificationsUpdate) SetNillableExamName(s *string) *ExamNotificationsUpdate {
	if s != nil {
		enu.SetExamName(*s)
	}
	return enu
}

// ClearExamName clears the value of the "ExamName" field.
func (enu *ExamNotificationsUpdate) ClearExamName() *ExamNotificationsUpdate {
	enu.mutation.ClearExamName()
	return enu
}

// SetUserID sets the "UserID" field.
func (enu *ExamNotificationsUpdate) SetUserID(i int64) *ExamNotificationsUpdate {
	enu.mutation.SetUserID(i)
	return enu
}

// SetNillableUserID sets the "UserID" field if the given value is not nil.
func (enu *ExamNotificationsUpdate) SetNillableUserID(i *int64) *ExamNotificationsUpdate {
	if i != nil {
		enu.SetUserID(*i)
	}
	return enu
}

// ClearUserID clears the value of the "UserID" field.
func (enu *ExamNotificationsUpdate) ClearUserID() *ExamNotificationsUpdate {
	enu.mutation.ClearUserID()
	return enu
}

// SetNotificationRemarks sets the "NotificationRemarks" field.
func (enu *ExamNotificationsUpdate) SetNotificationRemarks(s string) *ExamNotificationsUpdate {
	enu.mutation.SetNotificationRemarks(s)
	return enu
}

// SetNillableNotificationRemarks sets the "NotificationRemarks" field if the given value is not nil.
func (enu *ExamNotificationsUpdate) SetNillableNotificationRemarks(s *string) *ExamNotificationsUpdate {
	if s != nil {
		enu.SetNotificationRemarks(*s)
	}
	return enu
}

// ClearNotificationRemarks clears the value of the "NotificationRemarks" field.
func (enu *ExamNotificationsUpdate) ClearNotificationRemarks() *ExamNotificationsUpdate {
	enu.mutation.ClearNotificationRemarks()
	return enu
}

// SetSmsExamShortName sets the "SmsExamShortName" field.
func (enu *ExamNotificationsUpdate) SetSmsExamShortName(s string) *ExamNotificationsUpdate {
	enu.mutation.SetSmsExamShortName(s)
	return enu
}

// SetNillableSmsExamShortName sets the "SmsExamShortName" field if the given value is not nil.
func (enu *ExamNotificationsUpdate) SetNillableSmsExamShortName(s *string) *ExamNotificationsUpdate {
	if s != nil {
		enu.SetSmsExamShortName(*s)
	}
	return enu
}

// ClearSmsExamShortName clears the value of the "SmsExamShortName" field.
func (enu *ExamNotificationsUpdate) ClearSmsExamShortName() *ExamNotificationsUpdate {
	enu.mutation.ClearSmsExamShortName()
	return enu
}

// SetUserIDrefID sets the "UserIDref" edge to the UserMaster entity by ID.
func (enu *ExamNotificationsUpdate) SetUserIDrefID(id int64) *ExamNotificationsUpdate {
	enu.mutation.SetUserIDrefID(id)
	return enu
}

// SetNillableUserIDrefID sets the "UserIDref" edge to the UserMaster entity by ID if the given value is not nil.
func (enu *ExamNotificationsUpdate) SetNillableUserIDrefID(id *int64) *ExamNotificationsUpdate {
	if id != nil {
		enu = enu.SetUserIDrefID(*id)
	}
	return enu
}

// SetUserIDref sets the "UserIDref" edge to the UserMaster entity.
func (enu *ExamNotificationsUpdate) SetUserIDref(u *UserMaster) *ExamNotificationsUpdate {
	return enu.SetUserIDrefID(u.ID)
}

// AddLogDatumIDs adds the "LogData" edge to the Logs entity by IDs.
func (enu *ExamNotificationsUpdate) AddLogDatumIDs(ids ...int64) *ExamNotificationsUpdate {
	enu.mutation.AddLogDatumIDs(ids...)
	return enu
}

// AddLogData adds the "LogData" edges to the Logs entity.
func (enu *ExamNotificationsUpdate) AddLogData(l ...*Logs) *ExamNotificationsUpdate {
	ids := make([]int64, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return enu.AddLogDatumIDs(ids...)
}

// Mutation returns the ExamNotificationsMutation object of the builder.
func (enu *ExamNotificationsUpdate) Mutation() *ExamNotificationsMutation {
	return enu.mutation
}

// ClearUserIDref clears the "UserIDref" edge to the UserMaster entity.
func (enu *ExamNotificationsUpdate) ClearUserIDref() *ExamNotificationsUpdate {
	enu.mutation.ClearUserIDref()
	return enu
}

// ClearLogData clears all "LogData" edges to the Logs entity.
func (enu *ExamNotificationsUpdate) ClearLogData() *ExamNotificationsUpdate {
	enu.mutation.ClearLogData()
	return enu
}

// RemoveLogDatumIDs removes the "LogData" edge to Logs entities by IDs.
func (enu *ExamNotificationsUpdate) RemoveLogDatumIDs(ids ...int64) *ExamNotificationsUpdate {
	enu.mutation.RemoveLogDatumIDs(ids...)
	return enu
}

// RemoveLogData removes "LogData" edges to Logs entities.
func (enu *ExamNotificationsUpdate) RemoveLogData(l ...*Logs) *ExamNotificationsUpdate {
	ids := make([]int64, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return enu.RemoveLogDatumIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (enu *ExamNotificationsUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, enu.sqlSave, enu.mutation, enu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (enu *ExamNotificationsUpdate) SaveX(ctx context.Context) int {
	affected, err := enu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (enu *ExamNotificationsUpdate) Exec(ctx context.Context) error {
	_, err := enu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (enu *ExamNotificationsUpdate) ExecX(ctx context.Context) {
	if err := enu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (enu *ExamNotificationsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(examnotifications.Table, examnotifications.Columns, sqlgraph.NewFieldSpec(examnotifications.FieldID, field.TypeInt32))
	if ps := enu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := enu.mutation.UserName(); ok {
		_spec.SetField(examnotifications.FieldUserName, field.TypeString, value)
	}
	if enu.mutation.UserNameCleared() {
		_spec.ClearField(examnotifications.FieldUserName, field.TypeString)
	}
	if value, ok := enu.mutation.ExamYear(); ok {
		_spec.SetField(examnotifications.FieldExamYear, field.TypeInt32, value)
	}
	if value, ok := enu.mutation.AddedExamYear(); ok {
		_spec.AddField(examnotifications.FieldExamYear, field.TypeInt32, value)
	}
	if enu.mutation.ExamYearCleared() {
		_spec.ClearField(examnotifications.FieldExamYear, field.TypeInt32)
	}
	if value, ok := enu.mutation.EmployeeMasterRequestLastDate(); ok {
		_spec.SetField(examnotifications.FieldEmployeeMasterRequestLastDate, field.TypeTime, value)
	}
	if enu.mutation.EmployeeMasterRequestLastDateCleared() {
		_spec.ClearField(examnotifications.FieldEmployeeMasterRequestLastDate, field.TypeTime)
	}
	if value, ok := enu.mutation.EmployeeMasterRequestApprovalLastDate(); ok {
		_spec.SetField(examnotifications.FieldEmployeeMasterRequestApprovalLastDate, field.TypeTime, value)
	}
	if enu.mutation.EmployeeMasterRequestApprovalLastDateCleared() {
		_spec.ClearField(examnotifications.FieldEmployeeMasterRequestApprovalLastDate, field.TypeTime)
	}
	if value, ok := enu.mutation.ExamRegisterLastDate(); ok {
		_spec.SetField(examnotifications.FieldExamRegisterLastDate, field.TypeTime, value)
	}
	if enu.mutation.ExamRegisterLastDateCleared() {
		_spec.ClearField(examnotifications.FieldExamRegisterLastDate, field.TypeTime)
	}
	if value, ok := enu.mutation.ApplicationStartDate(); ok {
		_spec.SetField(examnotifications.FieldApplicationStartDate, field.TypeTime, value)
	}
	if enu.mutation.ApplicationStartDateCleared() {
		_spec.ClearField(examnotifications.FieldApplicationStartDate, field.TypeTime)
	}
	if value, ok := enu.mutation.ApplicationEndDate(); ok {
		_spec.SetField(examnotifications.FieldApplicationEndDate, field.TypeTime, value)
	}
	if enu.mutation.ApplicationEndDateCleared() {
		_spec.ClearField(examnotifications.FieldApplicationEndDate, field.TypeTime)
	}
	if value, ok := enu.mutation.ApplicationCorrectionStartDate(); ok {
		_spec.SetField(examnotifications.FieldApplicationCorrectionStartDate, field.TypeTime, value)
	}
	if enu.mutation.ApplicationCorrectionStartDateCleared() {
		_spec.ClearField(examnotifications.FieldApplicationCorrectionStartDate, field.TypeTime)
	}
	if value, ok := enu.mutation.ApplicationCorrectionLastDate(); ok {
		_spec.SetField(examnotifications.FieldApplicationCorrectionLastDate, field.TypeTime, value)
	}
	if enu.mutation.ApplicationCorrectionLastDateCleared() {
		_spec.ClearField(examnotifications.FieldApplicationCorrectionLastDate, field.TypeTime)
	}
	if value, ok := enu.mutation.ApplicationVerificationLastDate(); ok {
		_spec.SetField(examnotifications.FieldApplicationVerificationLastDate, field.TypeTime, value)
	}
	if enu.mutation.ApplicationVerificationLastDateCleared() {
		_spec.ClearField(examnotifications.FieldApplicationVerificationLastDate, field.TypeTime)
	}
	if value, ok := enu.mutation.CenterAllotmentEndDate(); ok {
		_spec.SetField(examnotifications.FieldCenterAllotmentEndDate, field.TypeTime, value)
	}
	if enu.mutation.CenterAllotmentEndDateCleared() {
		_spec.ClearField(examnotifications.FieldCenterAllotmentEndDate, field.TypeTime)
	}
	if value, ok := enu.mutation.NodalOfficerApprovalDate(); ok {
		_spec.SetField(examnotifications.FieldNodalOfficerApprovalDate, field.TypeTime, value)
	}
	if enu.mutation.NodalOfficerApprovalDateCleared() {
		_spec.ClearField(examnotifications.FieldNodalOfficerApprovalDate, field.TypeTime)
	}
	if value, ok := enu.mutation.AdmitCardDate(); ok {
		_spec.SetField(examnotifications.FieldAdmitCardDate, field.TypeTime, value)
	}
	if enu.mutation.AdmitCardDateCleared() {
		_spec.ClearField(examnotifications.FieldAdmitCardDate, field.TypeTime)
	}
	if value, ok := enu.mutation.UpdatedAt(); ok {
		_spec.SetField(examnotifications.FieldUpdatedAt, field.TypeTime, value)
	}
	if enu.mutation.UpdatedAtCleared() {
		_spec.ClearField(examnotifications.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := enu.mutation.UpdatedBy(); ok {
		_spec.SetField(examnotifications.FieldUpdatedBy, field.TypeString, value)
	}
	if enu.mutation.UpdatedByCleared() {
		_spec.ClearField(examnotifications.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := enu.mutation.CrucialDate(); ok {
		_spec.SetField(examnotifications.FieldCrucialDate, field.TypeJSON, value)
	}
	if value, ok := enu.mutation.AppendedCrucialDate(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, examnotifications.FieldCrucialDate, value)
		})
	}
	if enu.mutation.CrucialDateCleared() {
		_spec.ClearField(examnotifications.FieldCrucialDate, field.TypeJSON)
	}
	if value, ok := enu.mutation.Designation(); ok {
		_spec.SetField(examnotifications.FieldDesignation, field.TypeString, value)
	}
	if enu.mutation.DesignationCleared() {
		_spec.ClearField(examnotifications.FieldDesignation, field.TypeString)
	}
	if value, ok := enu.mutation.OfficerName(); ok {
		_spec.SetField(examnotifications.FieldOfficerName, field.TypeString, value)
	}
	if enu.mutation.OfficerNameCleared() {
		_spec.ClearField(examnotifications.FieldOfficerName, field.TypeString)
	}
	if value, ok := enu.mutation.NotificationOrderNumber(); ok {
		_spec.SetField(examnotifications.FieldNotificationOrderNumber, field.TypeString, value)
	}
	if enu.mutation.NotificationOrderNumberCleared() {
		_spec.ClearField(examnotifications.FieldNotificationOrderNumber, field.TypeString)
	}
	if value, ok := enu.mutation.NotesheetScannedCopy(); ok {
		_spec.SetField(examnotifications.FieldNotesheetScannedCopy, field.TypeString, value)
	}
	if enu.mutation.NotesheetScannedCopyCleared() {
		_spec.ClearField(examnotifications.FieldNotesheetScannedCopy, field.TypeString)
	}
	if value, ok := enu.mutation.NotificationNumber(); ok {
		_spec.SetField(examnotifications.FieldNotificationNumber, field.TypeString, value)
	}
	if enu.mutation.NotificationNumberCleared() {
		_spec.ClearField(examnotifications.FieldNotificationNumber, field.TypeString)
	}
	if value, ok := enu.mutation.Flag(); ok {
		_spec.SetField(examnotifications.FieldFlag, field.TypeBool, value)
	}
	if enu.mutation.FlagCleared() {
		_spec.ClearField(examnotifications.FieldFlag, field.TypeBool)
	}
	if value, ok := enu.mutation.ExamShortName(); ok {
		_spec.SetField(examnotifications.FieldExamShortName, field.TypeString, value)
	}
	if enu.mutation.ExamShortNameCleared() {
		_spec.ClearField(examnotifications.FieldExamShortName, field.TypeString)
	}
	if value, ok := enu.mutation.CircleOfficeFacilityId(); ok {
		_spec.SetField(examnotifications.FieldCircleOfficeFacilityId, field.TypeString, value)
	}
	if enu.mutation.CircleOfficeFacilityIdCleared() {
		_spec.ClearField(examnotifications.FieldCircleOfficeFacilityId, field.TypeString)
	}
	if value, ok := enu.mutation.CircleOfficeName(); ok {
		_spec.SetField(examnotifications.FieldCircleOfficeName, field.TypeString, value)
	}
	if enu.mutation.CircleOfficeNameCleared() {
		_spec.ClearField(examnotifications.FieldCircleOfficeName, field.TypeString)
	}
	if value, ok := enu.mutation.IssuedBy(); ok {
		_spec.SetField(examnotifications.FieldIssuedBy, field.TypeString, value)
	}
	if enu.mutation.IssuedByCleared() {
		_spec.ClearField(examnotifications.FieldIssuedBy, field.TypeString)
	}
	if value, ok := enu.mutation.OrderDate(); ok {
		_spec.SetField(examnotifications.FieldOrderDate, field.TypeTime, value)
	}
	if enu.mutation.OrderDateCleared() {
		_spec.ClearField(examnotifications.FieldOrderDate, field.TypeTime)
	}
	if value, ok := enu.mutation.CreatedBy(); ok {
		_spec.SetField(examnotifications.FieldCreatedBy, field.TypeString, value)
	}
	if enu.mutation.CreatedByCleared() {
		_spec.ClearField(examnotifications.FieldCreatedBy, field.TypeString)
	}
	if value, ok := enu.mutation.CreatedById(); ok {
		_spec.SetField(examnotifications.FieldCreatedById, field.TypeInt64, value)
	}
	if value, ok := enu.mutation.AddedCreatedById(); ok {
		_spec.AddField(examnotifications.FieldCreatedById, field.TypeInt64, value)
	}
	if enu.mutation.CreatedByIdCleared() {
		_spec.ClearField(examnotifications.FieldCreatedById, field.TypeInt64)
	}
	if value, ok := enu.mutation.CreatedByName(); ok {
		_spec.SetField(examnotifications.FieldCreatedByName, field.TypeString, value)
	}
	if enu.mutation.CreatedByNameCleared() {
		_spec.ClearField(examnotifications.FieldCreatedByName, field.TypeString)
	}
	if value, ok := enu.mutation.CreatedByDesignation(); ok {
		_spec.SetField(examnotifications.FieldCreatedByDesignation, field.TypeString, value)
	}
	if enu.mutation.CreatedByDesignationCleared() {
		_spec.ClearField(examnotifications.FieldCreatedByDesignation, field.TypeString)
	}
	if value, ok := enu.mutation.ApprovedBy(); ok {
		_spec.SetField(examnotifications.FieldApprovedBy, field.TypeString, value)
	}
	if enu.mutation.ApprovedByCleared() {
		_spec.ClearField(examnotifications.FieldApprovedBy, field.TypeString)
	}
	if value, ok := enu.mutation.ApprovedById(); ok {
		_spec.SetField(examnotifications.FieldApprovedById, field.TypeInt64, value)
	}
	if value, ok := enu.mutation.AddedApprovedById(); ok {
		_spec.AddField(examnotifications.FieldApprovedById, field.TypeInt64, value)
	}
	if enu.mutation.ApprovedByIdCleared() {
		_spec.ClearField(examnotifications.FieldApprovedById, field.TypeInt64)
	}
	if value, ok := enu.mutation.ApprovedByName(); ok {
		_spec.SetField(examnotifications.FieldApprovedByName, field.TypeString, value)
	}
	if enu.mutation.ApprovedByNameCleared() {
		_spec.ClearField(examnotifications.FieldApprovedByName, field.TypeString)
	}
	if value, ok := enu.mutation.ApprovedByDesignation(); ok {
		_spec.SetField(examnotifications.FieldApprovedByDesignation, field.TypeString, value)
	}
	if enu.mutation.ApprovedByDesignationCleared() {
		_spec.ClearField(examnotifications.FieldApprovedByDesignation, field.TypeString)
	}
	if value, ok := enu.mutation.ResubmittedApplicationVerificationDate(); ok {
		_spec.SetField(examnotifications.FieldResubmittedApplicationVerificationDate, field.TypeTime, value)
	}
	if enu.mutation.ResubmittedApplicationVerificationDateCleared() {
		_spec.ClearField(examnotifications.FieldResubmittedApplicationVerificationDate, field.TypeTime)
	}
	if value, ok := enu.mutation.Papers(); ok {
		_spec.SetField(examnotifications.FieldPapers, field.TypeJSON, value)
	}
	if value, ok := enu.mutation.AppendedPapers(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, examnotifications.FieldPapers, value)
		})
	}
	if enu.mutation.PapersCleared() {
		_spec.ClearField(examnotifications.FieldPapers, field.TypeJSON)
	}
	if value, ok := enu.mutation.NotificationStatus(); ok {
		_spec.SetField(examnotifications.FieldNotificationStatus, field.TypeString, value)
	}
	if enu.mutation.NotificationStatusCleared() {
		_spec.ClearField(examnotifications.FieldNotificationStatus, field.TypeString)
	}
	if value, ok := enu.mutation.Status(); ok {
		_spec.SetField(examnotifications.FieldStatus, field.TypeString, value)
	}
	if enu.mutation.StatusCleared() {
		_spec.ClearField(examnotifications.FieldStatus, field.TypeString)
	}
	if value, ok := enu.mutation.NotificationReIssueStatus(); ok {
		_spec.SetField(examnotifications.FieldNotificationReIssueStatus, field.TypeBool, value)
	}
	if enu.mutation.NotificationReIssueStatusCleared() {
		_spec.ClearField(examnotifications.FieldNotificationReIssueStatus, field.TypeBool)
	}
	if value, ok := enu.mutation.EditFlagStatus(); ok {
		_spec.SetField(examnotifications.FieldEditFlagStatus, field.TypeBool, value)
	}
	if enu.mutation.EditFlagStatusCleared() {
		_spec.ClearField(examnotifications.FieldEditFlagStatus, field.TypeBool)
	}
	if value, ok := enu.mutation.ExamCode(); ok {
		_spec.SetField(examnotifications.FieldExamCode, field.TypeInt32, value)
	}
	if value, ok := enu.mutation.AddedExamCode(); ok {
		_spec.AddField(examnotifications.FieldExamCode, field.TypeInt32, value)
	}
	if enu.mutation.ExamCodeCleared() {
		_spec.ClearField(examnotifications.FieldExamCode, field.TypeInt32)
	}
	if value, ok := enu.mutation.ExamName(); ok {
		_spec.SetField(examnotifications.FieldExamName, field.TypeString, value)
	}
	if enu.mutation.ExamNameCleared() {
		_spec.ClearField(examnotifications.FieldExamName, field.TypeString)
	}
	if value, ok := enu.mutation.NotificationRemarks(); ok {
		_spec.SetField(examnotifications.FieldNotificationRemarks, field.TypeString, value)
	}
	if enu.mutation.NotificationRemarksCleared() {
		_spec.ClearField(examnotifications.FieldNotificationRemarks, field.TypeString)
	}
	if value, ok := enu.mutation.SmsExamShortName(); ok {
		_spec.SetField(examnotifications.FieldSmsExamShortName, field.TypeString, value)
	}
	if enu.mutation.SmsExamShortNameCleared() {
		_spec.ClearField(examnotifications.FieldSmsExamShortName, field.TypeString)
	}
	if enu.mutation.UserIDrefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   examnotifications.UserIDrefTable,
			Columns: []string{examnotifications.UserIDrefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usermaster.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := enu.mutation.UserIDrefIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   examnotifications.UserIDrefTable,
			Columns: []string{examnotifications.UserIDrefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usermaster.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if enu.mutation.LogDataCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   examnotifications.LogDataTable,
			Columns: []string{examnotifications.LogDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(logs.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := enu.mutation.RemovedLogDataIDs(); len(nodes) > 0 && !enu.mutation.LogDataCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   examnotifications.LogDataTable,
			Columns: []string{examnotifications.LogDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(logs.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := enu.mutation.LogDataIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   examnotifications.LogDataTable,
			Columns: []string{examnotifications.LogDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(logs.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, enu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{examnotifications.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	enu.mutation.done = true
	return n, nil
}

// ExamNotificationsUpdateOne is the builder for updating a single ExamNotifications entity.
type ExamNotificationsUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ExamNotificationsMutation
}

// SetUserName sets the "UserName" field.
func (enuo *ExamNotificationsUpdateOne) SetUserName(s string) *ExamNotificationsUpdateOne {
	enuo.mutation.SetUserName(s)
	return enuo
}

// SetNillableUserName sets the "UserName" field if the given value is not nil.
func (enuo *ExamNotificationsUpdateOne) SetNillableUserName(s *string) *ExamNotificationsUpdateOne {
	if s != nil {
		enuo.SetUserName(*s)
	}
	return enuo
}

// ClearUserName clears the value of the "UserName" field.
func (enuo *ExamNotificationsUpdateOne) ClearUserName() *ExamNotificationsUpdateOne {
	enuo.mutation.ClearUserName()
	return enuo
}

// SetExamYear sets the "ExamYear" field.
func (enuo *ExamNotificationsUpdateOne) SetExamYear(i int32) *ExamNotificationsUpdateOne {
	enuo.mutation.ResetExamYear()
	enuo.mutation.SetExamYear(i)
	return enuo
}

// SetNillableExamYear sets the "ExamYear" field if the given value is not nil.
func (enuo *ExamNotificationsUpdateOne) SetNillableExamYear(i *int32) *ExamNotificationsUpdateOne {
	if i != nil {
		enuo.SetExamYear(*i)
	}
	return enuo
}

// AddExamYear adds i to the "ExamYear" field.
func (enuo *ExamNotificationsUpdateOne) AddExamYear(i int32) *ExamNotificationsUpdateOne {
	enuo.mutation.AddExamYear(i)
	return enuo
}

// ClearExamYear clears the value of the "ExamYear" field.
func (enuo *ExamNotificationsUpdateOne) ClearExamYear() *ExamNotificationsUpdateOne {
	enuo.mutation.ClearExamYear()
	return enuo
}

// SetEmployeeMasterRequestLastDate sets the "EmployeeMasterRequestLastDate" field.
func (enuo *ExamNotificationsUpdateOne) SetEmployeeMasterRequestLastDate(t time.Time) *ExamNotificationsUpdateOne {
	enuo.mutation.SetEmployeeMasterRequestLastDate(t)
	return enuo
}

// SetNillableEmployeeMasterRequestLastDate sets the "EmployeeMasterRequestLastDate" field if the given value is not nil.
func (enuo *ExamNotificationsUpdateOne) SetNillableEmployeeMasterRequestLastDate(t *time.Time) *ExamNotificationsUpdateOne {
	if t != nil {
		enuo.SetEmployeeMasterRequestLastDate(*t)
	}
	return enuo
}

// ClearEmployeeMasterRequestLastDate clears the value of the "EmployeeMasterRequestLastDate" field.
func (enuo *ExamNotificationsUpdateOne) ClearEmployeeMasterRequestLastDate() *ExamNotificationsUpdateOne {
	enuo.mutation.ClearEmployeeMasterRequestLastDate()
	return enuo
}

// SetEmployeeMasterRequestApprovalLastDate sets the "EmployeeMasterRequestApprovalLastDate" field.
func (enuo *ExamNotificationsUpdateOne) SetEmployeeMasterRequestApprovalLastDate(t time.Time) *ExamNotificationsUpdateOne {
	enuo.mutation.SetEmployeeMasterRequestApprovalLastDate(t)
	return enuo
}

// SetNillableEmployeeMasterRequestApprovalLastDate sets the "EmployeeMasterRequestApprovalLastDate" field if the given value is not nil.
func (enuo *ExamNotificationsUpdateOne) SetNillableEmployeeMasterRequestApprovalLastDate(t *time.Time) *ExamNotificationsUpdateOne {
	if t != nil {
		enuo.SetEmployeeMasterRequestApprovalLastDate(*t)
	}
	return enuo
}

// ClearEmployeeMasterRequestApprovalLastDate clears the value of the "EmployeeMasterRequestApprovalLastDate" field.
func (enuo *ExamNotificationsUpdateOne) ClearEmployeeMasterRequestApprovalLastDate() *ExamNotificationsUpdateOne {
	enuo.mutation.ClearEmployeeMasterRequestApprovalLastDate()
	return enuo
}

// SetExamRegisterLastDate sets the "ExamRegisterLastDate" field.
func (enuo *ExamNotificationsUpdateOne) SetExamRegisterLastDate(t time.Time) *ExamNotificationsUpdateOne {
	enuo.mutation.SetExamRegisterLastDate(t)
	return enuo
}

// SetNillableExamRegisterLastDate sets the "ExamRegisterLastDate" field if the given value is not nil.
func (enuo *ExamNotificationsUpdateOne) SetNillableExamRegisterLastDate(t *time.Time) *ExamNotificationsUpdateOne {
	if t != nil {
		enuo.SetExamRegisterLastDate(*t)
	}
	return enuo
}

// ClearExamRegisterLastDate clears the value of the "ExamRegisterLastDate" field.
func (enuo *ExamNotificationsUpdateOne) ClearExamRegisterLastDate() *ExamNotificationsUpdateOne {
	enuo.mutation.ClearExamRegisterLastDate()
	return enuo
}

// SetApplicationStartDate sets the "ApplicationStartDate" field.
func (enuo *ExamNotificationsUpdateOne) SetApplicationStartDate(t time.Time) *ExamNotificationsUpdateOne {
	enuo.mutation.SetApplicationStartDate(t)
	return enuo
}

// SetNillableApplicationStartDate sets the "ApplicationStartDate" field if the given value is not nil.
func (enuo *ExamNotificationsUpdateOne) SetNillableApplicationStartDate(t *time.Time) *ExamNotificationsUpdateOne {
	if t != nil {
		enuo.SetApplicationStartDate(*t)
	}
	return enuo
}

// ClearApplicationStartDate clears the value of the "ApplicationStartDate" field.
func (enuo *ExamNotificationsUpdateOne) ClearApplicationStartDate() *ExamNotificationsUpdateOne {
	enuo.mutation.ClearApplicationStartDate()
	return enuo
}

// SetApplicationEndDate sets the "ApplicationEndDate" field.
func (enuo *ExamNotificationsUpdateOne) SetApplicationEndDate(t time.Time) *ExamNotificationsUpdateOne {
	enuo.mutation.SetApplicationEndDate(t)
	return enuo
}

// SetNillableApplicationEndDate sets the "ApplicationEndDate" field if the given value is not nil.
func (enuo *ExamNotificationsUpdateOne) SetNillableApplicationEndDate(t *time.Time) *ExamNotificationsUpdateOne {
	if t != nil {
		enuo.SetApplicationEndDate(*t)
	}
	return enuo
}

// ClearApplicationEndDate clears the value of the "ApplicationEndDate" field.
func (enuo *ExamNotificationsUpdateOne) ClearApplicationEndDate() *ExamNotificationsUpdateOne {
	enuo.mutation.ClearApplicationEndDate()
	return enuo
}

// SetApplicationCorrectionStartDate sets the "ApplicationCorrectionStartDate" field.
func (enuo *ExamNotificationsUpdateOne) SetApplicationCorrectionStartDate(t time.Time) *ExamNotificationsUpdateOne {
	enuo.mutation.SetApplicationCorrectionStartDate(t)
	return enuo
}

// SetNillableApplicationCorrectionStartDate sets the "ApplicationCorrectionStartDate" field if the given value is not nil.
func (enuo *ExamNotificationsUpdateOne) SetNillableApplicationCorrectionStartDate(t *time.Time) *ExamNotificationsUpdateOne {
	if t != nil {
		enuo.SetApplicationCorrectionStartDate(*t)
	}
	return enuo
}

// ClearApplicationCorrectionStartDate clears the value of the "ApplicationCorrectionStartDate" field.
func (enuo *ExamNotificationsUpdateOne) ClearApplicationCorrectionStartDate() *ExamNotificationsUpdateOne {
	enuo.mutation.ClearApplicationCorrectionStartDate()
	return enuo
}

// SetApplicationCorrectionLastDate sets the "ApplicationCorrectionLastDate" field.
func (enuo *ExamNotificationsUpdateOne) SetApplicationCorrectionLastDate(t time.Time) *ExamNotificationsUpdateOne {
	enuo.mutation.SetApplicationCorrectionLastDate(t)
	return enuo
}

// SetNillableApplicationCorrectionLastDate sets the "ApplicationCorrectionLastDate" field if the given value is not nil.
func (enuo *ExamNotificationsUpdateOne) SetNillableApplicationCorrectionLastDate(t *time.Time) *ExamNotificationsUpdateOne {
	if t != nil {
		enuo.SetApplicationCorrectionLastDate(*t)
	}
	return enuo
}

// ClearApplicationCorrectionLastDate clears the value of the "ApplicationCorrectionLastDate" field.
func (enuo *ExamNotificationsUpdateOne) ClearApplicationCorrectionLastDate() *ExamNotificationsUpdateOne {
	enuo.mutation.ClearApplicationCorrectionLastDate()
	return enuo
}

// SetApplicationVerificationLastDate sets the "ApplicationVerificationLastDate" field.
func (enuo *ExamNotificationsUpdateOne) SetApplicationVerificationLastDate(t time.Time) *ExamNotificationsUpdateOne {
	enuo.mutation.SetApplicationVerificationLastDate(t)
	return enuo
}

// SetNillableApplicationVerificationLastDate sets the "ApplicationVerificationLastDate" field if the given value is not nil.
func (enuo *ExamNotificationsUpdateOne) SetNillableApplicationVerificationLastDate(t *time.Time) *ExamNotificationsUpdateOne {
	if t != nil {
		enuo.SetApplicationVerificationLastDate(*t)
	}
	return enuo
}

// ClearApplicationVerificationLastDate clears the value of the "ApplicationVerificationLastDate" field.
func (enuo *ExamNotificationsUpdateOne) ClearApplicationVerificationLastDate() *ExamNotificationsUpdateOne {
	enuo.mutation.ClearApplicationVerificationLastDate()
	return enuo
}

// SetCenterAllotmentEndDate sets the "CenterAllotmentEndDate" field.
func (enuo *ExamNotificationsUpdateOne) SetCenterAllotmentEndDate(t time.Time) *ExamNotificationsUpdateOne {
	enuo.mutation.SetCenterAllotmentEndDate(t)
	return enuo
}

// SetNillableCenterAllotmentEndDate sets the "CenterAllotmentEndDate" field if the given value is not nil.
func (enuo *ExamNotificationsUpdateOne) SetNillableCenterAllotmentEndDate(t *time.Time) *ExamNotificationsUpdateOne {
	if t != nil {
		enuo.SetCenterAllotmentEndDate(*t)
	}
	return enuo
}

// ClearCenterAllotmentEndDate clears the value of the "CenterAllotmentEndDate" field.
func (enuo *ExamNotificationsUpdateOne) ClearCenterAllotmentEndDate() *ExamNotificationsUpdateOne {
	enuo.mutation.ClearCenterAllotmentEndDate()
	return enuo
}

// SetNodalOfficerApprovalDate sets the "NodalOfficerApprovalDate" field.
func (enuo *ExamNotificationsUpdateOne) SetNodalOfficerApprovalDate(t time.Time) *ExamNotificationsUpdateOne {
	enuo.mutation.SetNodalOfficerApprovalDate(t)
	return enuo
}

// SetNillableNodalOfficerApprovalDate sets the "NodalOfficerApprovalDate" field if the given value is not nil.
func (enuo *ExamNotificationsUpdateOne) SetNillableNodalOfficerApprovalDate(t *time.Time) *ExamNotificationsUpdateOne {
	if t != nil {
		enuo.SetNodalOfficerApprovalDate(*t)
	}
	return enuo
}

// ClearNodalOfficerApprovalDate clears the value of the "NodalOfficerApprovalDate" field.
func (enuo *ExamNotificationsUpdateOne) ClearNodalOfficerApprovalDate() *ExamNotificationsUpdateOne {
	enuo.mutation.ClearNodalOfficerApprovalDate()
	return enuo
}

// SetAdmitCardDate sets the "AdmitCardDate" field.
func (enuo *ExamNotificationsUpdateOne) SetAdmitCardDate(t time.Time) *ExamNotificationsUpdateOne {
	enuo.mutation.SetAdmitCardDate(t)
	return enuo
}

// SetNillableAdmitCardDate sets the "AdmitCardDate" field if the given value is not nil.
func (enuo *ExamNotificationsUpdateOne) SetNillableAdmitCardDate(t *time.Time) *ExamNotificationsUpdateOne {
	if t != nil {
		enuo.SetAdmitCardDate(*t)
	}
	return enuo
}

// ClearAdmitCardDate clears the value of the "AdmitCardDate" field.
func (enuo *ExamNotificationsUpdateOne) ClearAdmitCardDate() *ExamNotificationsUpdateOne {
	enuo.mutation.ClearAdmitCardDate()
	return enuo
}

// SetUpdatedAt sets the "UpdatedAt" field.
func (enuo *ExamNotificationsUpdateOne) SetUpdatedAt(t time.Time) *ExamNotificationsUpdateOne {
	enuo.mutation.SetUpdatedAt(t)
	return enuo
}

// SetNillableUpdatedAt sets the "UpdatedAt" field if the given value is not nil.
func (enuo *ExamNotificationsUpdateOne) SetNillableUpdatedAt(t *time.Time) *ExamNotificationsUpdateOne {
	if t != nil {
		enuo.SetUpdatedAt(*t)
	}
	return enuo
}

// ClearUpdatedAt clears the value of the "UpdatedAt" field.
func (enuo *ExamNotificationsUpdateOne) ClearUpdatedAt() *ExamNotificationsUpdateOne {
	enuo.mutation.ClearUpdatedAt()
	return enuo
}

// SetUpdatedBy sets the "UpdatedBy" field.
func (enuo *ExamNotificationsUpdateOne) SetUpdatedBy(s string) *ExamNotificationsUpdateOne {
	enuo.mutation.SetUpdatedBy(s)
	return enuo
}

// SetNillableUpdatedBy sets the "UpdatedBy" field if the given value is not nil.
func (enuo *ExamNotificationsUpdateOne) SetNillableUpdatedBy(s *string) *ExamNotificationsUpdateOne {
	if s != nil {
		enuo.SetUpdatedBy(*s)
	}
	return enuo
}

// ClearUpdatedBy clears the value of the "UpdatedBy" field.
func (enuo *ExamNotificationsUpdateOne) ClearUpdatedBy() *ExamNotificationsUpdateOne {
	enuo.mutation.ClearUpdatedBy()
	return enuo
}

// SetCrucialDate sets the "CrucialDate" field.
func (enuo *ExamNotificationsUpdateOne) SetCrucialDate(i []interface{}) *ExamNotificationsUpdateOne {
	enuo.mutation.SetCrucialDate(i)
	return enuo
}

// AppendCrucialDate appends i to the "CrucialDate" field.
func (enuo *ExamNotificationsUpdateOne) AppendCrucialDate(i []interface{}) *ExamNotificationsUpdateOne {
	enuo.mutation.AppendCrucialDate(i)
	return enuo
}

// ClearCrucialDate clears the value of the "CrucialDate" field.
func (enuo *ExamNotificationsUpdateOne) ClearCrucialDate() *ExamNotificationsUpdateOne {
	enuo.mutation.ClearCrucialDate()
	return enuo
}

// SetDesignation sets the "Designation" field.
func (enuo *ExamNotificationsUpdateOne) SetDesignation(s string) *ExamNotificationsUpdateOne {
	enuo.mutation.SetDesignation(s)
	return enuo
}

// SetNillableDesignation sets the "Designation" field if the given value is not nil.
func (enuo *ExamNotificationsUpdateOne) SetNillableDesignation(s *string) *ExamNotificationsUpdateOne {
	if s != nil {
		enuo.SetDesignation(*s)
	}
	return enuo
}

// ClearDesignation clears the value of the "Designation" field.
func (enuo *ExamNotificationsUpdateOne) ClearDesignation() *ExamNotificationsUpdateOne {
	enuo.mutation.ClearDesignation()
	return enuo
}

// SetOfficerName sets the "OfficerName" field.
func (enuo *ExamNotificationsUpdateOne) SetOfficerName(s string) *ExamNotificationsUpdateOne {
	enuo.mutation.SetOfficerName(s)
	return enuo
}

// SetNillableOfficerName sets the "OfficerName" field if the given value is not nil.
func (enuo *ExamNotificationsUpdateOne) SetNillableOfficerName(s *string) *ExamNotificationsUpdateOne {
	if s != nil {
		enuo.SetOfficerName(*s)
	}
	return enuo
}

// ClearOfficerName clears the value of the "OfficerName" field.
func (enuo *ExamNotificationsUpdateOne) ClearOfficerName() *ExamNotificationsUpdateOne {
	enuo.mutation.ClearOfficerName()
	return enuo
}

// SetNotificationOrderNumber sets the "NotificationOrderNumber" field.
func (enuo *ExamNotificationsUpdateOne) SetNotificationOrderNumber(s string) *ExamNotificationsUpdateOne {
	enuo.mutation.SetNotificationOrderNumber(s)
	return enuo
}

// SetNillableNotificationOrderNumber sets the "NotificationOrderNumber" field if the given value is not nil.
func (enuo *ExamNotificationsUpdateOne) SetNillableNotificationOrderNumber(s *string) *ExamNotificationsUpdateOne {
	if s != nil {
		enuo.SetNotificationOrderNumber(*s)
	}
	return enuo
}

// ClearNotificationOrderNumber clears the value of the "NotificationOrderNumber" field.
func (enuo *ExamNotificationsUpdateOne) ClearNotificationOrderNumber() *ExamNotificationsUpdateOne {
	enuo.mutation.ClearNotificationOrderNumber()
	return enuo
}

// SetNotesheetScannedCopy sets the "NotesheetScannedCopy" field.
func (enuo *ExamNotificationsUpdateOne) SetNotesheetScannedCopy(s string) *ExamNotificationsUpdateOne {
	enuo.mutation.SetNotesheetScannedCopy(s)
	return enuo
}

// SetNillableNotesheetScannedCopy sets the "NotesheetScannedCopy" field if the given value is not nil.
func (enuo *ExamNotificationsUpdateOne) SetNillableNotesheetScannedCopy(s *string) *ExamNotificationsUpdateOne {
	if s != nil {
		enuo.SetNotesheetScannedCopy(*s)
	}
	return enuo
}

// ClearNotesheetScannedCopy clears the value of the "NotesheetScannedCopy" field.
func (enuo *ExamNotificationsUpdateOne) ClearNotesheetScannedCopy() *ExamNotificationsUpdateOne {
	enuo.mutation.ClearNotesheetScannedCopy()
	return enuo
}

// SetNotificationNumber sets the "NotificationNumber" field.
func (enuo *ExamNotificationsUpdateOne) SetNotificationNumber(s string) *ExamNotificationsUpdateOne {
	enuo.mutation.SetNotificationNumber(s)
	return enuo
}

// SetNillableNotificationNumber sets the "NotificationNumber" field if the given value is not nil.
func (enuo *ExamNotificationsUpdateOne) SetNillableNotificationNumber(s *string) *ExamNotificationsUpdateOne {
	if s != nil {
		enuo.SetNotificationNumber(*s)
	}
	return enuo
}

// ClearNotificationNumber clears the value of the "NotificationNumber" field.
func (enuo *ExamNotificationsUpdateOne) ClearNotificationNumber() *ExamNotificationsUpdateOne {
	enuo.mutation.ClearNotificationNumber()
	return enuo
}

// SetFlag sets the "Flag" field.
func (enuo *ExamNotificationsUpdateOne) SetFlag(b bool) *ExamNotificationsUpdateOne {
	enuo.mutation.SetFlag(b)
	return enuo
}

// SetNillableFlag sets the "Flag" field if the given value is not nil.
func (enuo *ExamNotificationsUpdateOne) SetNillableFlag(b *bool) *ExamNotificationsUpdateOne {
	if b != nil {
		enuo.SetFlag(*b)
	}
	return enuo
}

// ClearFlag clears the value of the "Flag" field.
func (enuo *ExamNotificationsUpdateOne) ClearFlag() *ExamNotificationsUpdateOne {
	enuo.mutation.ClearFlag()
	return enuo
}

// SetExamShortName sets the "ExamShortName" field.
func (enuo *ExamNotificationsUpdateOne) SetExamShortName(s string) *ExamNotificationsUpdateOne {
	enuo.mutation.SetExamShortName(s)
	return enuo
}

// SetNillableExamShortName sets the "ExamShortName" field if the given value is not nil.
func (enuo *ExamNotificationsUpdateOne) SetNillableExamShortName(s *string) *ExamNotificationsUpdateOne {
	if s != nil {
		enuo.SetExamShortName(*s)
	}
	return enuo
}

// ClearExamShortName clears the value of the "ExamShortName" field.
func (enuo *ExamNotificationsUpdateOne) ClearExamShortName() *ExamNotificationsUpdateOne {
	enuo.mutation.ClearExamShortName()
	return enuo
}

// SetCircleOfficeFacilityId sets the "CircleOfficeFacilityId" field.
func (enuo *ExamNotificationsUpdateOne) SetCircleOfficeFacilityId(s string) *ExamNotificationsUpdateOne {
	enuo.mutation.SetCircleOfficeFacilityId(s)
	return enuo
}

// SetNillableCircleOfficeFacilityId sets the "CircleOfficeFacilityId" field if the given value is not nil.
func (enuo *ExamNotificationsUpdateOne) SetNillableCircleOfficeFacilityId(s *string) *ExamNotificationsUpdateOne {
	if s != nil {
		enuo.SetCircleOfficeFacilityId(*s)
	}
	return enuo
}

// ClearCircleOfficeFacilityId clears the value of the "CircleOfficeFacilityId" field.
func (enuo *ExamNotificationsUpdateOne) ClearCircleOfficeFacilityId() *ExamNotificationsUpdateOne {
	enuo.mutation.ClearCircleOfficeFacilityId()
	return enuo
}

// SetCircleOfficeName sets the "CircleOfficeName" field.
func (enuo *ExamNotificationsUpdateOne) SetCircleOfficeName(s string) *ExamNotificationsUpdateOne {
	enuo.mutation.SetCircleOfficeName(s)
	return enuo
}

// SetNillableCircleOfficeName sets the "CircleOfficeName" field if the given value is not nil.
func (enuo *ExamNotificationsUpdateOne) SetNillableCircleOfficeName(s *string) *ExamNotificationsUpdateOne {
	if s != nil {
		enuo.SetCircleOfficeName(*s)
	}
	return enuo
}

// ClearCircleOfficeName clears the value of the "CircleOfficeName" field.
func (enuo *ExamNotificationsUpdateOne) ClearCircleOfficeName() *ExamNotificationsUpdateOne {
	enuo.mutation.ClearCircleOfficeName()
	return enuo
}

// SetIssuedBy sets the "IssuedBy" field.
func (enuo *ExamNotificationsUpdateOne) SetIssuedBy(s string) *ExamNotificationsUpdateOne {
	enuo.mutation.SetIssuedBy(s)
	return enuo
}

// SetNillableIssuedBy sets the "IssuedBy" field if the given value is not nil.
func (enuo *ExamNotificationsUpdateOne) SetNillableIssuedBy(s *string) *ExamNotificationsUpdateOne {
	if s != nil {
		enuo.SetIssuedBy(*s)
	}
	return enuo
}

// ClearIssuedBy clears the value of the "IssuedBy" field.
func (enuo *ExamNotificationsUpdateOne) ClearIssuedBy() *ExamNotificationsUpdateOne {
	enuo.mutation.ClearIssuedBy()
	return enuo
}

// SetOrderDate sets the "OrderDate" field.
func (enuo *ExamNotificationsUpdateOne) SetOrderDate(t time.Time) *ExamNotificationsUpdateOne {
	enuo.mutation.SetOrderDate(t)
	return enuo
}

// SetNillableOrderDate sets the "OrderDate" field if the given value is not nil.
func (enuo *ExamNotificationsUpdateOne) SetNillableOrderDate(t *time.Time) *ExamNotificationsUpdateOne {
	if t != nil {
		enuo.SetOrderDate(*t)
	}
	return enuo
}

// ClearOrderDate clears the value of the "OrderDate" field.
func (enuo *ExamNotificationsUpdateOne) ClearOrderDate() *ExamNotificationsUpdateOne {
	enuo.mutation.ClearOrderDate()
	return enuo
}

// SetCreatedBy sets the "CreatedBy" field.
func (enuo *ExamNotificationsUpdateOne) SetCreatedBy(s string) *ExamNotificationsUpdateOne {
	enuo.mutation.SetCreatedBy(s)
	return enuo
}

// SetNillableCreatedBy sets the "CreatedBy" field if the given value is not nil.
func (enuo *ExamNotificationsUpdateOne) SetNillableCreatedBy(s *string) *ExamNotificationsUpdateOne {
	if s != nil {
		enuo.SetCreatedBy(*s)
	}
	return enuo
}

// ClearCreatedBy clears the value of the "CreatedBy" field.
func (enuo *ExamNotificationsUpdateOne) ClearCreatedBy() *ExamNotificationsUpdateOne {
	enuo.mutation.ClearCreatedBy()
	return enuo
}

// SetCreatedById sets the "CreatedById" field.
func (enuo *ExamNotificationsUpdateOne) SetCreatedById(i int64) *ExamNotificationsUpdateOne {
	enuo.mutation.ResetCreatedById()
	enuo.mutation.SetCreatedById(i)
	return enuo
}

// SetNillableCreatedById sets the "CreatedById" field if the given value is not nil.
func (enuo *ExamNotificationsUpdateOne) SetNillableCreatedById(i *int64) *ExamNotificationsUpdateOne {
	if i != nil {
		enuo.SetCreatedById(*i)
	}
	return enuo
}

// AddCreatedById adds i to the "CreatedById" field.
func (enuo *ExamNotificationsUpdateOne) AddCreatedById(i int64) *ExamNotificationsUpdateOne {
	enuo.mutation.AddCreatedById(i)
	return enuo
}

// ClearCreatedById clears the value of the "CreatedById" field.
func (enuo *ExamNotificationsUpdateOne) ClearCreatedById() *ExamNotificationsUpdateOne {
	enuo.mutation.ClearCreatedById()
	return enuo
}

// SetCreatedByName sets the "CreatedByName" field.
func (enuo *ExamNotificationsUpdateOne) SetCreatedByName(s string) *ExamNotificationsUpdateOne {
	enuo.mutation.SetCreatedByName(s)
	return enuo
}

// SetNillableCreatedByName sets the "CreatedByName" field if the given value is not nil.
func (enuo *ExamNotificationsUpdateOne) SetNillableCreatedByName(s *string) *ExamNotificationsUpdateOne {
	if s != nil {
		enuo.SetCreatedByName(*s)
	}
	return enuo
}

// ClearCreatedByName clears the value of the "CreatedByName" field.
func (enuo *ExamNotificationsUpdateOne) ClearCreatedByName() *ExamNotificationsUpdateOne {
	enuo.mutation.ClearCreatedByName()
	return enuo
}

// SetCreatedByDesignation sets the "CreatedByDesignation" field.
func (enuo *ExamNotificationsUpdateOne) SetCreatedByDesignation(s string) *ExamNotificationsUpdateOne {
	enuo.mutation.SetCreatedByDesignation(s)
	return enuo
}

// SetNillableCreatedByDesignation sets the "CreatedByDesignation" field if the given value is not nil.
func (enuo *ExamNotificationsUpdateOne) SetNillableCreatedByDesignation(s *string) *ExamNotificationsUpdateOne {
	if s != nil {
		enuo.SetCreatedByDesignation(*s)
	}
	return enuo
}

// ClearCreatedByDesignation clears the value of the "CreatedByDesignation" field.
func (enuo *ExamNotificationsUpdateOne) ClearCreatedByDesignation() *ExamNotificationsUpdateOne {
	enuo.mutation.ClearCreatedByDesignation()
	return enuo
}

// SetApprovedBy sets the "ApprovedBy" field.
func (enuo *ExamNotificationsUpdateOne) SetApprovedBy(s string) *ExamNotificationsUpdateOne {
	enuo.mutation.SetApprovedBy(s)
	return enuo
}

// SetNillableApprovedBy sets the "ApprovedBy" field if the given value is not nil.
func (enuo *ExamNotificationsUpdateOne) SetNillableApprovedBy(s *string) *ExamNotificationsUpdateOne {
	if s != nil {
		enuo.SetApprovedBy(*s)
	}
	return enuo
}

// ClearApprovedBy clears the value of the "ApprovedBy" field.
func (enuo *ExamNotificationsUpdateOne) ClearApprovedBy() *ExamNotificationsUpdateOne {
	enuo.mutation.ClearApprovedBy()
	return enuo
}

// SetApprovedById sets the "ApprovedById" field.
func (enuo *ExamNotificationsUpdateOne) SetApprovedById(i int64) *ExamNotificationsUpdateOne {
	enuo.mutation.ResetApprovedById()
	enuo.mutation.SetApprovedById(i)
	return enuo
}

// SetNillableApprovedById sets the "ApprovedById" field if the given value is not nil.
func (enuo *ExamNotificationsUpdateOne) SetNillableApprovedById(i *int64) *ExamNotificationsUpdateOne {
	if i != nil {
		enuo.SetApprovedById(*i)
	}
	return enuo
}

// AddApprovedById adds i to the "ApprovedById" field.
func (enuo *ExamNotificationsUpdateOne) AddApprovedById(i int64) *ExamNotificationsUpdateOne {
	enuo.mutation.AddApprovedById(i)
	return enuo
}

// ClearApprovedById clears the value of the "ApprovedById" field.
func (enuo *ExamNotificationsUpdateOne) ClearApprovedById() *ExamNotificationsUpdateOne {
	enuo.mutation.ClearApprovedById()
	return enuo
}

// SetApprovedByName sets the "ApprovedByName" field.
func (enuo *ExamNotificationsUpdateOne) SetApprovedByName(s string) *ExamNotificationsUpdateOne {
	enuo.mutation.SetApprovedByName(s)
	return enuo
}

// SetNillableApprovedByName sets the "ApprovedByName" field if the given value is not nil.
func (enuo *ExamNotificationsUpdateOne) SetNillableApprovedByName(s *string) *ExamNotificationsUpdateOne {
	if s != nil {
		enuo.SetApprovedByName(*s)
	}
	return enuo
}

// ClearApprovedByName clears the value of the "ApprovedByName" field.
func (enuo *ExamNotificationsUpdateOne) ClearApprovedByName() *ExamNotificationsUpdateOne {
	enuo.mutation.ClearApprovedByName()
	return enuo
}

// SetApprovedByDesignation sets the "ApprovedByDesignation" field.
func (enuo *ExamNotificationsUpdateOne) SetApprovedByDesignation(s string) *ExamNotificationsUpdateOne {
	enuo.mutation.SetApprovedByDesignation(s)
	return enuo
}

// SetNillableApprovedByDesignation sets the "ApprovedByDesignation" field if the given value is not nil.
func (enuo *ExamNotificationsUpdateOne) SetNillableApprovedByDesignation(s *string) *ExamNotificationsUpdateOne {
	if s != nil {
		enuo.SetApprovedByDesignation(*s)
	}
	return enuo
}

// ClearApprovedByDesignation clears the value of the "ApprovedByDesignation" field.
func (enuo *ExamNotificationsUpdateOne) ClearApprovedByDesignation() *ExamNotificationsUpdateOne {
	enuo.mutation.ClearApprovedByDesignation()
	return enuo
}

// SetResubmittedApplicationVerificationDate sets the "ResubmittedApplicationVerificationDate" field.
func (enuo *ExamNotificationsUpdateOne) SetResubmittedApplicationVerificationDate(t time.Time) *ExamNotificationsUpdateOne {
	enuo.mutation.SetResubmittedApplicationVerificationDate(t)
	return enuo
}

// SetNillableResubmittedApplicationVerificationDate sets the "ResubmittedApplicationVerificationDate" field if the given value is not nil.
func (enuo *ExamNotificationsUpdateOne) SetNillableResubmittedApplicationVerificationDate(t *time.Time) *ExamNotificationsUpdateOne {
	if t != nil {
		enuo.SetResubmittedApplicationVerificationDate(*t)
	}
	return enuo
}

// ClearResubmittedApplicationVerificationDate clears the value of the "ResubmittedApplicationVerificationDate" field.
func (enuo *ExamNotificationsUpdateOne) ClearResubmittedApplicationVerificationDate() *ExamNotificationsUpdateOne {
	enuo.mutation.ClearResubmittedApplicationVerificationDate()
	return enuo
}

// SetPapers sets the "Papers" field.
func (enuo *ExamNotificationsUpdateOne) SetPapers(i []interface{}) *ExamNotificationsUpdateOne {
	enuo.mutation.SetPapers(i)
	return enuo
}

// AppendPapers appends i to the "Papers" field.
func (enuo *ExamNotificationsUpdateOne) AppendPapers(i []interface{}) *ExamNotificationsUpdateOne {
	enuo.mutation.AppendPapers(i)
	return enuo
}

// ClearPapers clears the value of the "Papers" field.
func (enuo *ExamNotificationsUpdateOne) ClearPapers() *ExamNotificationsUpdateOne {
	enuo.mutation.ClearPapers()
	return enuo
}

// SetNotificationStatus sets the "NotificationStatus" field.
func (enuo *ExamNotificationsUpdateOne) SetNotificationStatus(s string) *ExamNotificationsUpdateOne {
	enuo.mutation.SetNotificationStatus(s)
	return enuo
}

// SetNillableNotificationStatus sets the "NotificationStatus" field if the given value is not nil.
func (enuo *ExamNotificationsUpdateOne) SetNillableNotificationStatus(s *string) *ExamNotificationsUpdateOne {
	if s != nil {
		enuo.SetNotificationStatus(*s)
	}
	return enuo
}

// ClearNotificationStatus clears the value of the "NotificationStatus" field.
func (enuo *ExamNotificationsUpdateOne) ClearNotificationStatus() *ExamNotificationsUpdateOne {
	enuo.mutation.ClearNotificationStatus()
	return enuo
}

// SetStatus sets the "Status" field.
func (enuo *ExamNotificationsUpdateOne) SetStatus(s string) *ExamNotificationsUpdateOne {
	enuo.mutation.SetStatus(s)
	return enuo
}

// SetNillableStatus sets the "Status" field if the given value is not nil.
func (enuo *ExamNotificationsUpdateOne) SetNillableStatus(s *string) *ExamNotificationsUpdateOne {
	if s != nil {
		enuo.SetStatus(*s)
	}
	return enuo
}

// ClearStatus clears the value of the "Status" field.
func (enuo *ExamNotificationsUpdateOne) ClearStatus() *ExamNotificationsUpdateOne {
	enuo.mutation.ClearStatus()
	return enuo
}

// SetNotificationReIssueStatus sets the "NotificationReIssueStatus" field.
func (enuo *ExamNotificationsUpdateOne) SetNotificationReIssueStatus(b bool) *ExamNotificationsUpdateOne {
	enuo.mutation.SetNotificationReIssueStatus(b)
	return enuo
}

// SetNillableNotificationReIssueStatus sets the "NotificationReIssueStatus" field if the given value is not nil.
func (enuo *ExamNotificationsUpdateOne) SetNillableNotificationReIssueStatus(b *bool) *ExamNotificationsUpdateOne {
	if b != nil {
		enuo.SetNotificationReIssueStatus(*b)
	}
	return enuo
}

// ClearNotificationReIssueStatus clears the value of the "NotificationReIssueStatus" field.
func (enuo *ExamNotificationsUpdateOne) ClearNotificationReIssueStatus() *ExamNotificationsUpdateOne {
	enuo.mutation.ClearNotificationReIssueStatus()
	return enuo
}

// SetEditFlagStatus sets the "EditFlagStatus" field.
func (enuo *ExamNotificationsUpdateOne) SetEditFlagStatus(b bool) *ExamNotificationsUpdateOne {
	enuo.mutation.SetEditFlagStatus(b)
	return enuo
}

// SetNillableEditFlagStatus sets the "EditFlagStatus" field if the given value is not nil.
func (enuo *ExamNotificationsUpdateOne) SetNillableEditFlagStatus(b *bool) *ExamNotificationsUpdateOne {
	if b != nil {
		enuo.SetEditFlagStatus(*b)
	}
	return enuo
}

// ClearEditFlagStatus clears the value of the "EditFlagStatus" field.
func (enuo *ExamNotificationsUpdateOne) ClearEditFlagStatus() *ExamNotificationsUpdateOne {
	enuo.mutation.ClearEditFlagStatus()
	return enuo
}

// SetExamCode sets the "ExamCode" field.
func (enuo *ExamNotificationsUpdateOne) SetExamCode(i int32) *ExamNotificationsUpdateOne {
	enuo.mutation.ResetExamCode()
	enuo.mutation.SetExamCode(i)
	return enuo
}

// SetNillableExamCode sets the "ExamCode" field if the given value is not nil.
func (enuo *ExamNotificationsUpdateOne) SetNillableExamCode(i *int32) *ExamNotificationsUpdateOne {
	if i != nil {
		enuo.SetExamCode(*i)
	}
	return enuo
}

// AddExamCode adds i to the "ExamCode" field.
func (enuo *ExamNotificationsUpdateOne) AddExamCode(i int32) *ExamNotificationsUpdateOne {
	enuo.mutation.AddExamCode(i)
	return enuo
}

// ClearExamCode clears the value of the "ExamCode" field.
func (enuo *ExamNotificationsUpdateOne) ClearExamCode() *ExamNotificationsUpdateOne {
	enuo.mutation.ClearExamCode()
	return enuo
}

// SetExamName sets the "ExamName" field.
func (enuo *ExamNotificationsUpdateOne) SetExamName(s string) *ExamNotificationsUpdateOne {
	enuo.mutation.SetExamName(s)
	return enuo
}

// SetNillableExamName sets the "ExamName" field if the given value is not nil.
func (enuo *ExamNotificationsUpdateOne) SetNillableExamName(s *string) *ExamNotificationsUpdateOne {
	if s != nil {
		enuo.SetExamName(*s)
	}
	return enuo
}

// ClearExamName clears the value of the "ExamName" field.
func (enuo *ExamNotificationsUpdateOne) ClearExamName() *ExamNotificationsUpdateOne {
	enuo.mutation.ClearExamName()
	return enuo
}

// SetUserID sets the "UserID" field.
func (enuo *ExamNotificationsUpdateOne) SetUserID(i int64) *ExamNotificationsUpdateOne {
	enuo.mutation.SetUserID(i)
	return enuo
}

// SetNillableUserID sets the "UserID" field if the given value is not nil.
func (enuo *ExamNotificationsUpdateOne) SetNillableUserID(i *int64) *ExamNotificationsUpdateOne {
	if i != nil {
		enuo.SetUserID(*i)
	}
	return enuo
}

// ClearUserID clears the value of the "UserID" field.
func (enuo *ExamNotificationsUpdateOne) ClearUserID() *ExamNotificationsUpdateOne {
	enuo.mutation.ClearUserID()
	return enuo
}

// SetNotificationRemarks sets the "NotificationRemarks" field.
func (enuo *ExamNotificationsUpdateOne) SetNotificationRemarks(s string) *ExamNotificationsUpdateOne {
	enuo.mutation.SetNotificationRemarks(s)
	return enuo
}

// SetNillableNotificationRemarks sets the "NotificationRemarks" field if the given value is not nil.
func (enuo *ExamNotificationsUpdateOne) SetNillableNotificationRemarks(s *string) *ExamNotificationsUpdateOne {
	if s != nil {
		enuo.SetNotificationRemarks(*s)
	}
	return enuo
}

// ClearNotificationRemarks clears the value of the "NotificationRemarks" field.
func (enuo *ExamNotificationsUpdateOne) ClearNotificationRemarks() *ExamNotificationsUpdateOne {
	enuo.mutation.ClearNotificationRemarks()
	return enuo
}

// SetSmsExamShortName sets the "SmsExamShortName" field.
func (enuo *ExamNotificationsUpdateOne) SetSmsExamShortName(s string) *ExamNotificationsUpdateOne {
	enuo.mutation.SetSmsExamShortName(s)
	return enuo
}

// SetNillableSmsExamShortName sets the "SmsExamShortName" field if the given value is not nil.
func (enuo *ExamNotificationsUpdateOne) SetNillableSmsExamShortName(s *string) *ExamNotificationsUpdateOne {
	if s != nil {
		enuo.SetSmsExamShortName(*s)
	}
	return enuo
}

// ClearSmsExamShortName clears the value of the "SmsExamShortName" field.
func (enuo *ExamNotificationsUpdateOne) ClearSmsExamShortName() *ExamNotificationsUpdateOne {
	enuo.mutation.ClearSmsExamShortName()
	return enuo
}

// SetUserIDrefID sets the "UserIDref" edge to the UserMaster entity by ID.
func (enuo *ExamNotificationsUpdateOne) SetUserIDrefID(id int64) *ExamNotificationsUpdateOne {
	enuo.mutation.SetUserIDrefID(id)
	return enuo
}

// SetNillableUserIDrefID sets the "UserIDref" edge to the UserMaster entity by ID if the given value is not nil.
func (enuo *ExamNotificationsUpdateOne) SetNillableUserIDrefID(id *int64) *ExamNotificationsUpdateOne {
	if id != nil {
		enuo = enuo.SetUserIDrefID(*id)
	}
	return enuo
}

// SetUserIDref sets the "UserIDref" edge to the UserMaster entity.
func (enuo *ExamNotificationsUpdateOne) SetUserIDref(u *UserMaster) *ExamNotificationsUpdateOne {
	return enuo.SetUserIDrefID(u.ID)
}

// AddLogDatumIDs adds the "LogData" edge to the Logs entity by IDs.
func (enuo *ExamNotificationsUpdateOne) AddLogDatumIDs(ids ...int64) *ExamNotificationsUpdateOne {
	enuo.mutation.AddLogDatumIDs(ids...)
	return enuo
}

// AddLogData adds the "LogData" edges to the Logs entity.
func (enuo *ExamNotificationsUpdateOne) AddLogData(l ...*Logs) *ExamNotificationsUpdateOne {
	ids := make([]int64, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return enuo.AddLogDatumIDs(ids...)
}

// Mutation returns the ExamNotificationsMutation object of the builder.
func (enuo *ExamNotificationsUpdateOne) Mutation() *ExamNotificationsMutation {
	return enuo.mutation
}

// ClearUserIDref clears the "UserIDref" edge to the UserMaster entity.
func (enuo *ExamNotificationsUpdateOne) ClearUserIDref() *ExamNotificationsUpdateOne {
	enuo.mutation.ClearUserIDref()
	return enuo
}

// ClearLogData clears all "LogData" edges to the Logs entity.
func (enuo *ExamNotificationsUpdateOne) ClearLogData() *ExamNotificationsUpdateOne {
	enuo.mutation.ClearLogData()
	return enuo
}

// RemoveLogDatumIDs removes the "LogData" edge to Logs entities by IDs.
func (enuo *ExamNotificationsUpdateOne) RemoveLogDatumIDs(ids ...int64) *ExamNotificationsUpdateOne {
	enuo.mutation.RemoveLogDatumIDs(ids...)
	return enuo
}

// RemoveLogData removes "LogData" edges to Logs entities.
func (enuo *ExamNotificationsUpdateOne) RemoveLogData(l ...*Logs) *ExamNotificationsUpdateOne {
	ids := make([]int64, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return enuo.RemoveLogDatumIDs(ids...)
}

// Where appends a list predicates to the ExamNotificationsUpdate builder.
func (enuo *ExamNotificationsUpdateOne) Where(ps ...predicate.ExamNotifications) *ExamNotificationsUpdateOne {
	enuo.mutation.Where(ps...)
	return enuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (enuo *ExamNotificationsUpdateOne) Select(field string, fields ...string) *ExamNotificationsUpdateOne {
	enuo.fields = append([]string{field}, fields...)
	return enuo
}

// Save executes the query and returns the updated ExamNotifications entity.
func (enuo *ExamNotificationsUpdateOne) Save(ctx context.Context) (*ExamNotifications, error) {
	return withHooks(ctx, enuo.sqlSave, enuo.mutation, enuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (enuo *ExamNotificationsUpdateOne) SaveX(ctx context.Context) *ExamNotifications {
	node, err := enuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (enuo *ExamNotificationsUpdateOne) Exec(ctx context.Context) error {
	_, err := enuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (enuo *ExamNotificationsUpdateOne) ExecX(ctx context.Context) {
	if err := enuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (enuo *ExamNotificationsUpdateOne) sqlSave(ctx context.Context) (_node *ExamNotifications, err error) {
	_spec := sqlgraph.NewUpdateSpec(examnotifications.Table, examnotifications.Columns, sqlgraph.NewFieldSpec(examnotifications.FieldID, field.TypeInt32))
	id, ok := enuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ExamNotifications.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := enuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, examnotifications.FieldID)
		for _, f := range fields {
			if !examnotifications.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != examnotifications.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := enuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := enuo.mutation.UserName(); ok {
		_spec.SetField(examnotifications.FieldUserName, field.TypeString, value)
	}
	if enuo.mutation.UserNameCleared() {
		_spec.ClearField(examnotifications.FieldUserName, field.TypeString)
	}
	if value, ok := enuo.mutation.ExamYear(); ok {
		_spec.SetField(examnotifications.FieldExamYear, field.TypeInt32, value)
	}
	if value, ok := enuo.mutation.AddedExamYear(); ok {
		_spec.AddField(examnotifications.FieldExamYear, field.TypeInt32, value)
	}
	if enuo.mutation.ExamYearCleared() {
		_spec.ClearField(examnotifications.FieldExamYear, field.TypeInt32)
	}
	if value, ok := enuo.mutation.EmployeeMasterRequestLastDate(); ok {
		_spec.SetField(examnotifications.FieldEmployeeMasterRequestLastDate, field.TypeTime, value)
	}
	if enuo.mutation.EmployeeMasterRequestLastDateCleared() {
		_spec.ClearField(examnotifications.FieldEmployeeMasterRequestLastDate, field.TypeTime)
	}
	if value, ok := enuo.mutation.EmployeeMasterRequestApprovalLastDate(); ok {
		_spec.SetField(examnotifications.FieldEmployeeMasterRequestApprovalLastDate, field.TypeTime, value)
	}
	if enuo.mutation.EmployeeMasterRequestApprovalLastDateCleared() {
		_spec.ClearField(examnotifications.FieldEmployeeMasterRequestApprovalLastDate, field.TypeTime)
	}
	if value, ok := enuo.mutation.ExamRegisterLastDate(); ok {
		_spec.SetField(examnotifications.FieldExamRegisterLastDate, field.TypeTime, value)
	}
	if enuo.mutation.ExamRegisterLastDateCleared() {
		_spec.ClearField(examnotifications.FieldExamRegisterLastDate, field.TypeTime)
	}
	if value, ok := enuo.mutation.ApplicationStartDate(); ok {
		_spec.SetField(examnotifications.FieldApplicationStartDate, field.TypeTime, value)
	}
	if enuo.mutation.ApplicationStartDateCleared() {
		_spec.ClearField(examnotifications.FieldApplicationStartDate, field.TypeTime)
	}
	if value, ok := enuo.mutation.ApplicationEndDate(); ok {
		_spec.SetField(examnotifications.FieldApplicationEndDate, field.TypeTime, value)
	}
	if enuo.mutation.ApplicationEndDateCleared() {
		_spec.ClearField(examnotifications.FieldApplicationEndDate, field.TypeTime)
	}
	if value, ok := enuo.mutation.ApplicationCorrectionStartDate(); ok {
		_spec.SetField(examnotifications.FieldApplicationCorrectionStartDate, field.TypeTime, value)
	}
	if enuo.mutation.ApplicationCorrectionStartDateCleared() {
		_spec.ClearField(examnotifications.FieldApplicationCorrectionStartDate, field.TypeTime)
	}
	if value, ok := enuo.mutation.ApplicationCorrectionLastDate(); ok {
		_spec.SetField(examnotifications.FieldApplicationCorrectionLastDate, field.TypeTime, value)
	}
	if enuo.mutation.ApplicationCorrectionLastDateCleared() {
		_spec.ClearField(examnotifications.FieldApplicationCorrectionLastDate, field.TypeTime)
	}
	if value, ok := enuo.mutation.ApplicationVerificationLastDate(); ok {
		_spec.SetField(examnotifications.FieldApplicationVerificationLastDate, field.TypeTime, value)
	}
	if enuo.mutation.ApplicationVerificationLastDateCleared() {
		_spec.ClearField(examnotifications.FieldApplicationVerificationLastDate, field.TypeTime)
	}
	if value, ok := enuo.mutation.CenterAllotmentEndDate(); ok {
		_spec.SetField(examnotifications.FieldCenterAllotmentEndDate, field.TypeTime, value)
	}
	if enuo.mutation.CenterAllotmentEndDateCleared() {
		_spec.ClearField(examnotifications.FieldCenterAllotmentEndDate, field.TypeTime)
	}
	if value, ok := enuo.mutation.NodalOfficerApprovalDate(); ok {
		_spec.SetField(examnotifications.FieldNodalOfficerApprovalDate, field.TypeTime, value)
	}
	if enuo.mutation.NodalOfficerApprovalDateCleared() {
		_spec.ClearField(examnotifications.FieldNodalOfficerApprovalDate, field.TypeTime)
	}
	if value, ok := enuo.mutation.AdmitCardDate(); ok {
		_spec.SetField(examnotifications.FieldAdmitCardDate, field.TypeTime, value)
	}
	if enuo.mutation.AdmitCardDateCleared() {
		_spec.ClearField(examnotifications.FieldAdmitCardDate, field.TypeTime)
	}
	if value, ok := enuo.mutation.UpdatedAt(); ok {
		_spec.SetField(examnotifications.FieldUpdatedAt, field.TypeTime, value)
	}
	if enuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(examnotifications.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := enuo.mutation.UpdatedBy(); ok {
		_spec.SetField(examnotifications.FieldUpdatedBy, field.TypeString, value)
	}
	if enuo.mutation.UpdatedByCleared() {
		_spec.ClearField(examnotifications.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := enuo.mutation.CrucialDate(); ok {
		_spec.SetField(examnotifications.FieldCrucialDate, field.TypeJSON, value)
	}
	if value, ok := enuo.mutation.AppendedCrucialDate(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, examnotifications.FieldCrucialDate, value)
		})
	}
	if enuo.mutation.CrucialDateCleared() {
		_spec.ClearField(examnotifications.FieldCrucialDate, field.TypeJSON)
	}
	if value, ok := enuo.mutation.Designation(); ok {
		_spec.SetField(examnotifications.FieldDesignation, field.TypeString, value)
	}
	if enuo.mutation.DesignationCleared() {
		_spec.ClearField(examnotifications.FieldDesignation, field.TypeString)
	}
	if value, ok := enuo.mutation.OfficerName(); ok {
		_spec.SetField(examnotifications.FieldOfficerName, field.TypeString, value)
	}
	if enuo.mutation.OfficerNameCleared() {
		_spec.ClearField(examnotifications.FieldOfficerName, field.TypeString)
	}
	if value, ok := enuo.mutation.NotificationOrderNumber(); ok {
		_spec.SetField(examnotifications.FieldNotificationOrderNumber, field.TypeString, value)
	}
	if enuo.mutation.NotificationOrderNumberCleared() {
		_spec.ClearField(examnotifications.FieldNotificationOrderNumber, field.TypeString)
	}
	if value, ok := enuo.mutation.NotesheetScannedCopy(); ok {
		_spec.SetField(examnotifications.FieldNotesheetScannedCopy, field.TypeString, value)
	}
	if enuo.mutation.NotesheetScannedCopyCleared() {
		_spec.ClearField(examnotifications.FieldNotesheetScannedCopy, field.TypeString)
	}
	if value, ok := enuo.mutation.NotificationNumber(); ok {
		_spec.SetField(examnotifications.FieldNotificationNumber, field.TypeString, value)
	}
	if enuo.mutation.NotificationNumberCleared() {
		_spec.ClearField(examnotifications.FieldNotificationNumber, field.TypeString)
	}
	if value, ok := enuo.mutation.Flag(); ok {
		_spec.SetField(examnotifications.FieldFlag, field.TypeBool, value)
	}
	if enuo.mutation.FlagCleared() {
		_spec.ClearField(examnotifications.FieldFlag, field.TypeBool)
	}
	if value, ok := enuo.mutation.ExamShortName(); ok {
		_spec.SetField(examnotifications.FieldExamShortName, field.TypeString, value)
	}
	if enuo.mutation.ExamShortNameCleared() {
		_spec.ClearField(examnotifications.FieldExamShortName, field.TypeString)
	}
	if value, ok := enuo.mutation.CircleOfficeFacilityId(); ok {
		_spec.SetField(examnotifications.FieldCircleOfficeFacilityId, field.TypeString, value)
	}
	if enuo.mutation.CircleOfficeFacilityIdCleared() {
		_spec.ClearField(examnotifications.FieldCircleOfficeFacilityId, field.TypeString)
	}
	if value, ok := enuo.mutation.CircleOfficeName(); ok {
		_spec.SetField(examnotifications.FieldCircleOfficeName, field.TypeString, value)
	}
	if enuo.mutation.CircleOfficeNameCleared() {
		_spec.ClearField(examnotifications.FieldCircleOfficeName, field.TypeString)
	}
	if value, ok := enuo.mutation.IssuedBy(); ok {
		_spec.SetField(examnotifications.FieldIssuedBy, field.TypeString, value)
	}
	if enuo.mutation.IssuedByCleared() {
		_spec.ClearField(examnotifications.FieldIssuedBy, field.TypeString)
	}
	if value, ok := enuo.mutation.OrderDate(); ok {
		_spec.SetField(examnotifications.FieldOrderDate, field.TypeTime, value)
	}
	if enuo.mutation.OrderDateCleared() {
		_spec.ClearField(examnotifications.FieldOrderDate, field.TypeTime)
	}
	if value, ok := enuo.mutation.CreatedBy(); ok {
		_spec.SetField(examnotifications.FieldCreatedBy, field.TypeString, value)
	}
	if enuo.mutation.CreatedByCleared() {
		_spec.ClearField(examnotifications.FieldCreatedBy, field.TypeString)
	}
	if value, ok := enuo.mutation.CreatedById(); ok {
		_spec.SetField(examnotifications.FieldCreatedById, field.TypeInt64, value)
	}
	if value, ok := enuo.mutation.AddedCreatedById(); ok {
		_spec.AddField(examnotifications.FieldCreatedById, field.TypeInt64, value)
	}
	if enuo.mutation.CreatedByIdCleared() {
		_spec.ClearField(examnotifications.FieldCreatedById, field.TypeInt64)
	}
	if value, ok := enuo.mutation.CreatedByName(); ok {
		_spec.SetField(examnotifications.FieldCreatedByName, field.TypeString, value)
	}
	if enuo.mutation.CreatedByNameCleared() {
		_spec.ClearField(examnotifications.FieldCreatedByName, field.TypeString)
	}
	if value, ok := enuo.mutation.CreatedByDesignation(); ok {
		_spec.SetField(examnotifications.FieldCreatedByDesignation, field.TypeString, value)
	}
	if enuo.mutation.CreatedByDesignationCleared() {
		_spec.ClearField(examnotifications.FieldCreatedByDesignation, field.TypeString)
	}
	if value, ok := enuo.mutation.ApprovedBy(); ok {
		_spec.SetField(examnotifications.FieldApprovedBy, field.TypeString, value)
	}
	if enuo.mutation.ApprovedByCleared() {
		_spec.ClearField(examnotifications.FieldApprovedBy, field.TypeString)
	}
	if value, ok := enuo.mutation.ApprovedById(); ok {
		_spec.SetField(examnotifications.FieldApprovedById, field.TypeInt64, value)
	}
	if value, ok := enuo.mutation.AddedApprovedById(); ok {
		_spec.AddField(examnotifications.FieldApprovedById, field.TypeInt64, value)
	}
	if enuo.mutation.ApprovedByIdCleared() {
		_spec.ClearField(examnotifications.FieldApprovedById, field.TypeInt64)
	}
	if value, ok := enuo.mutation.ApprovedByName(); ok {
		_spec.SetField(examnotifications.FieldApprovedByName, field.TypeString, value)
	}
	if enuo.mutation.ApprovedByNameCleared() {
		_spec.ClearField(examnotifications.FieldApprovedByName, field.TypeString)
	}
	if value, ok := enuo.mutation.ApprovedByDesignation(); ok {
		_spec.SetField(examnotifications.FieldApprovedByDesignation, field.TypeString, value)
	}
	if enuo.mutation.ApprovedByDesignationCleared() {
		_spec.ClearField(examnotifications.FieldApprovedByDesignation, field.TypeString)
	}
	if value, ok := enuo.mutation.ResubmittedApplicationVerificationDate(); ok {
		_spec.SetField(examnotifications.FieldResubmittedApplicationVerificationDate, field.TypeTime, value)
	}
	if enuo.mutation.ResubmittedApplicationVerificationDateCleared() {
		_spec.ClearField(examnotifications.FieldResubmittedApplicationVerificationDate, field.TypeTime)
	}
	if value, ok := enuo.mutation.Papers(); ok {
		_spec.SetField(examnotifications.FieldPapers, field.TypeJSON, value)
	}
	if value, ok := enuo.mutation.AppendedPapers(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, examnotifications.FieldPapers, value)
		})
	}
	if enuo.mutation.PapersCleared() {
		_spec.ClearField(examnotifications.FieldPapers, field.TypeJSON)
	}
	if value, ok := enuo.mutation.NotificationStatus(); ok {
		_spec.SetField(examnotifications.FieldNotificationStatus, field.TypeString, value)
	}
	if enuo.mutation.NotificationStatusCleared() {
		_spec.ClearField(examnotifications.FieldNotificationStatus, field.TypeString)
	}
	if value, ok := enuo.mutation.Status(); ok {
		_spec.SetField(examnotifications.FieldStatus, field.TypeString, value)
	}
	if enuo.mutation.StatusCleared() {
		_spec.ClearField(examnotifications.FieldStatus, field.TypeString)
	}
	if value, ok := enuo.mutation.NotificationReIssueStatus(); ok {
		_spec.SetField(examnotifications.FieldNotificationReIssueStatus, field.TypeBool, value)
	}
	if enuo.mutation.NotificationReIssueStatusCleared() {
		_spec.ClearField(examnotifications.FieldNotificationReIssueStatus, field.TypeBool)
	}
	if value, ok := enuo.mutation.EditFlagStatus(); ok {
		_spec.SetField(examnotifications.FieldEditFlagStatus, field.TypeBool, value)
	}
	if enuo.mutation.EditFlagStatusCleared() {
		_spec.ClearField(examnotifications.FieldEditFlagStatus, field.TypeBool)
	}
	if value, ok := enuo.mutation.ExamCode(); ok {
		_spec.SetField(examnotifications.FieldExamCode, field.TypeInt32, value)
	}
	if value, ok := enuo.mutation.AddedExamCode(); ok {
		_spec.AddField(examnotifications.FieldExamCode, field.TypeInt32, value)
	}
	if enuo.mutation.ExamCodeCleared() {
		_spec.ClearField(examnotifications.FieldExamCode, field.TypeInt32)
	}
	if value, ok := enuo.mutation.ExamName(); ok {
		_spec.SetField(examnotifications.FieldExamName, field.TypeString, value)
	}
	if enuo.mutation.ExamNameCleared() {
		_spec.ClearField(examnotifications.FieldExamName, field.TypeString)
	}
	if value, ok := enuo.mutation.NotificationRemarks(); ok {
		_spec.SetField(examnotifications.FieldNotificationRemarks, field.TypeString, value)
	}
	if enuo.mutation.NotificationRemarksCleared() {
		_spec.ClearField(examnotifications.FieldNotificationRemarks, field.TypeString)
	}
	if value, ok := enuo.mutation.SmsExamShortName(); ok {
		_spec.SetField(examnotifications.FieldSmsExamShortName, field.TypeString, value)
	}
	if enuo.mutation.SmsExamShortNameCleared() {
		_spec.ClearField(examnotifications.FieldSmsExamShortName, field.TypeString)
	}
	if enuo.mutation.UserIDrefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   examnotifications.UserIDrefTable,
			Columns: []string{examnotifications.UserIDrefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usermaster.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := enuo.mutation.UserIDrefIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   examnotifications.UserIDrefTable,
			Columns: []string{examnotifications.UserIDrefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usermaster.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if enuo.mutation.LogDataCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   examnotifications.LogDataTable,
			Columns: []string{examnotifications.LogDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(logs.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := enuo.mutation.RemovedLogDataIDs(); len(nodes) > 0 && !enuo.mutation.LogDataCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   examnotifications.LogDataTable,
			Columns: []string{examnotifications.LogDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(logs.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := enuo.mutation.LogDataIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   examnotifications.LogDataTable,
			Columns: []string{examnotifications.LogDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(logs.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ExamNotifications{config: enuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, enuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{examnotifications.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	enuo.mutation.done = true
	return _node, nil
}
