// Code generated by ent, DO NOT EDIT.

package division_choice_mtspmmg

import (
	"recruit/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int32) predicate.Division_Choice_MTSPMMG {
	return predicate.Division_Choice_MTSPMMG(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int32) predicate.Division_Choice_MTSPMMG {
	return predicate.Division_Choice_MTSPMMG(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int32) predicate.Division_Choice_MTSPMMG {
	return predicate.Division_Choice_MTSPMMG(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int32) predicate.Division_Choice_MTSPMMG {
	return predicate.Division_Choice_MTSPMMG(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int32) predicate.Division_Choice_MTSPMMG {
	return predicate.Division_Choice_MTSPMMG(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int32) predicate.Division_Choice_MTSPMMG {
	return predicate.Division_Choice_MTSPMMG(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int32) predicate.Division_Choice_MTSPMMG {
	return predicate.Division_Choice_MTSPMMG(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int32) predicate.Division_Choice_MTSPMMG {
	return predicate.Division_Choice_MTSPMMG(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int32) predicate.Division_Choice_MTSPMMG {
	return predicate.Division_Choice_MTSPMMG(sql.FieldLTE(FieldID, id))
}

// ApplicationID applies equality check predicate on the "ApplicationID" field. It's identical to ApplicationIDEQ.
func ApplicationID(v int64) predicate.Division_Choice_MTSPMMG {
	return predicate.Division_Choice_MTSPMMG(sql.FieldEQ(FieldApplicationID, v))
}

// Group applies equality check predicate on the "Group" field. It's identical to GroupEQ.
func Group(v string) predicate.Division_Choice_MTSPMMG {
	return predicate.Division_Choice_MTSPMMG(sql.FieldEQ(FieldGroup, v))
}

// CadrePrefNo applies equality check predicate on the "CadrePrefNo" field. It's identical to CadrePrefNoEQ.
func CadrePrefNo(v int64) predicate.Division_Choice_MTSPMMG {
	return predicate.Division_Choice_MTSPMMG(sql.FieldEQ(FieldCadrePrefNo, v))
}

// Cadre applies equality check predicate on the "Cadre" field. It's identical to CadreEQ.
func Cadre(v string) predicate.Division_Choice_MTSPMMG {
	return predicate.Division_Choice_MTSPMMG(sql.FieldEQ(FieldCadre, v))
}

// PlacePrefNo applies equality check predicate on the "PlacePrefNo" field. It's identical to PlacePrefNoEQ.
func PlacePrefNo(v int64) predicate.Division_Choice_MTSPMMG {
	return predicate.Division_Choice_MTSPMMG(sql.FieldEQ(FieldPlacePrefNo, v))
}

// PlacePrefValue applies equality check predicate on the "PlacePrefValue" field. It's identical to PlacePrefValueEQ.
func PlacePrefValue(v string) predicate.Division_Choice_MTSPMMG {
	return predicate.Division_Choice_MTSPMMG(sql.FieldEQ(FieldPlacePrefValue, v))
}

// PostPrefNo applies equality check predicate on the "PostPrefNo" field. It's identical to PostPrefNoEQ.
func PostPrefNo(v int64) predicate.Division_Choice_MTSPMMG {
	return predicate.Division_Choice_MTSPMMG(sql.FieldEQ(FieldPostPrefNo, v))
}

// PostingPrefValue applies equality check predicate on the "PostingPrefValue" field. It's identical to PostingPrefValueEQ.
func PostingPrefValue(v string) predicate.Division_Choice_MTSPMMG {
	return predicate.Division_Choice_MTSPMMG(sql.FieldEQ(FieldPostingPrefValue, v))
}

// EmployeeID applies equality check predicate on the "EmployeeID" field. It's identical to EmployeeIDEQ.
func EmployeeID(v int64) predicate.Division_Choice_MTSPMMG {
	return predicate.Division_Choice_MTSPMMG(sql.FieldEQ(FieldEmployeeID, v))
}

// UpdatedAt applies equality check predicate on the "UpdatedAt" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Division_Choice_MTSPMMG {
	return predicate.Division_Choice_MTSPMMG(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedBy applies equality check predicate on the "UpdatedBy" field. It's identical to UpdatedByEQ.
func UpdatedBy(v string) predicate.Division_Choice_MTSPMMG {
	return predicate.Division_Choice_MTSPMMG(sql.FieldEQ(FieldUpdatedBy, v))
}

// ApplicationIDEQ applies the EQ predicate on the "ApplicationID" field.
func ApplicationIDEQ(v int64) predicate.Division_Choice_MTSPMMG {
	return predicate.Division_Choice_MTSPMMG(sql.FieldEQ(FieldApplicationID, v))
}

// ApplicationIDNEQ applies the NEQ predicate on the "ApplicationID" field.
func ApplicationIDNEQ(v int64) predicate.Division_Choice_MTSPMMG {
	return predicate.Division_Choice_MTSPMMG(sql.FieldNEQ(FieldApplicationID, v))
}

// ApplicationIDIn applies the In predicate on the "ApplicationID" field.
func ApplicationIDIn(vs ...int64) predicate.Division_Choice_MTSPMMG {
	return predicate.Division_Choice_MTSPMMG(sql.FieldIn(FieldApplicationID, vs...))
}

// ApplicationIDNotIn applies the NotIn predicate on the "ApplicationID" field.
func ApplicationIDNotIn(vs ...int64) predicate.Division_Choice_MTSPMMG {
	return predicate.Division_Choice_MTSPMMG(sql.FieldNotIn(FieldApplicationID, vs...))
}

// ApplicationIDIsNil applies the IsNil predicate on the "ApplicationID" field.
func ApplicationIDIsNil() predicate.Division_Choice_MTSPMMG {
	return predicate.Division_Choice_MTSPMMG(sql.FieldIsNull(FieldApplicationID))
}

// ApplicationIDNotNil applies the NotNil predicate on the "ApplicationID" field.
func ApplicationIDNotNil() predicate.Division_Choice_MTSPMMG {
	return predicate.Division_Choice_MTSPMMG(sql.FieldNotNull(FieldApplicationID))
}

// GroupEQ applies the EQ predicate on the "Group" field.
func GroupEQ(v string) predicate.Division_Choice_MTSPMMG {
	return predicate.Division_Choice_MTSPMMG(sql.FieldEQ(FieldGroup, v))
}

// GroupNEQ applies the NEQ predicate on the "Group" field.
func GroupNEQ(v string) predicate.Division_Choice_MTSPMMG {
	return predicate.Division_Choice_MTSPMMG(sql.FieldNEQ(FieldGroup, v))
}

// GroupIn applies the In predicate on the "Group" field.
func GroupIn(vs ...string) predicate.Division_Choice_MTSPMMG {
	return predicate.Division_Choice_MTSPMMG(sql.FieldIn(FieldGroup, vs...))
}

// GroupNotIn applies the NotIn predicate on the "Group" field.
func GroupNotIn(vs ...string) predicate.Division_Choice_MTSPMMG {
	return predicate.Division_Choice_MTSPMMG(sql.FieldNotIn(FieldGroup, vs...))
}

// GroupGT applies the GT predicate on the "Group" field.
func GroupGT(v string) predicate.Division_Choice_MTSPMMG {
	return predicate.Division_Choice_MTSPMMG(sql.FieldGT(FieldGroup, v))
}

// GroupGTE applies the GTE predicate on the "Group" field.
func GroupGTE(v string) predicate.Division_Choice_MTSPMMG {
	return predicate.Division_Choice_MTSPMMG(sql.FieldGTE(FieldGroup, v))
}

// GroupLT applies the LT predicate on the "Group" field.
func GroupLT(v string) predicate.Division_Choice_MTSPMMG {
	return predicate.Division_Choice_MTSPMMG(sql.FieldLT(FieldGroup, v))
}

// GroupLTE applies the LTE predicate on the "Group" field.
func GroupLTE(v string) predicate.Division_Choice_MTSPMMG {
	return predicate.Division_Choice_MTSPMMG(sql.FieldLTE(FieldGroup, v))
}

// GroupContains applies the Contains predicate on the "Group" field.
func GroupContains(v string) predicate.Division_Choice_MTSPMMG {
	return predicate.Division_Choice_MTSPMMG(sql.FieldContains(FieldGroup, v))
}

// GroupHasPrefix applies the HasPrefix predicate on the "Group" field.
func GroupHasPrefix(v string) predicate.Division_Choice_MTSPMMG {
	return predicate.Division_Choice_MTSPMMG(sql.FieldHasPrefix(FieldGroup, v))
}

// GroupHasSuffix applies the HasSuffix predicate on the "Group" field.
func GroupHasSuffix(v string) predicate.Division_Choice_MTSPMMG {
	return predicate.Division_Choice_MTSPMMG(sql.FieldHasSuffix(FieldGroup, v))
}

// GroupIsNil applies the IsNil predicate on the "Group" field.
func GroupIsNil() predicate.Division_Choice_MTSPMMG {
	return predicate.Division_Choice_MTSPMMG(sql.FieldIsNull(FieldGroup))
}

// GroupNotNil applies the NotNil predicate on the "Group" field.
func GroupNotNil() predicate.Division_Choice_MTSPMMG {
	return predicate.Division_Choice_MTSPMMG(sql.FieldNotNull(FieldGroup))
}

// GroupEqualFold applies the EqualFold predicate on the "Group" field.
func GroupEqualFold(v string) predicate.Division_Choice_MTSPMMG {
	return predicate.Division_Choice_MTSPMMG(sql.FieldEqualFold(FieldGroup, v))
}

// GroupContainsFold applies the ContainsFold predicate on the "Group" field.
func GroupContainsFold(v string) predicate.Division_Choice_MTSPMMG {
	return predicate.Division_Choice_MTSPMMG(sql.FieldContainsFold(FieldGroup, v))
}

// CadrePrefNoEQ applies the EQ predicate on the "CadrePrefNo" field.
func CadrePrefNoEQ(v int64) predicate.Division_Choice_MTSPMMG {
	return predicate.Division_Choice_MTSPMMG(sql.FieldEQ(FieldCadrePrefNo, v))
}

// CadrePrefNoNEQ applies the NEQ predicate on the "CadrePrefNo" field.
func CadrePrefNoNEQ(v int64) predicate.Division_Choice_MTSPMMG {
	return predicate.Division_Choice_MTSPMMG(sql.FieldNEQ(FieldCadrePrefNo, v))
}

// CadrePrefNoIn applies the In predicate on the "CadrePrefNo" field.
func CadrePrefNoIn(vs ...int64) predicate.Division_Choice_MTSPMMG {
	return predicate.Division_Choice_MTSPMMG(sql.FieldIn(FieldCadrePrefNo, vs...))
}

// CadrePrefNoNotIn applies the NotIn predicate on the "CadrePrefNo" field.
func CadrePrefNoNotIn(vs ...int64) predicate.Division_Choice_MTSPMMG {
	return predicate.Division_Choice_MTSPMMG(sql.FieldNotIn(FieldCadrePrefNo, vs...))
}

// CadrePrefNoGT applies the GT predicate on the "CadrePrefNo" field.
func CadrePrefNoGT(v int64) predicate.Division_Choice_MTSPMMG {
	return predicate.Division_Choice_MTSPMMG(sql.FieldGT(FieldCadrePrefNo, v))
}

// CadrePrefNoGTE applies the GTE predicate on the "CadrePrefNo" field.
func CadrePrefNoGTE(v int64) predicate.Division_Choice_MTSPMMG {
	return predicate.Division_Choice_MTSPMMG(sql.FieldGTE(FieldCadrePrefNo, v))
}

// CadrePrefNoLT applies the LT predicate on the "CadrePrefNo" field.
func CadrePrefNoLT(v int64) predicate.Division_Choice_MTSPMMG {
	return predicate.Division_Choice_MTSPMMG(sql.FieldLT(FieldCadrePrefNo, v))
}

// CadrePrefNoLTE applies the LTE predicate on the "CadrePrefNo" field.
func CadrePrefNoLTE(v int64) predicate.Division_Choice_MTSPMMG {
	return predicate.Division_Choice_MTSPMMG(sql.FieldLTE(FieldCadrePrefNo, v))
}

// CadrePrefNoIsNil applies the IsNil predicate on the "CadrePrefNo" field.
func CadrePrefNoIsNil() predicate.Division_Choice_MTSPMMG {
	return predicate.Division_Choice_MTSPMMG(sql.FieldIsNull(FieldCadrePrefNo))
}

// CadrePrefNoNotNil applies the NotNil predicate on the "CadrePrefNo" field.
func CadrePrefNoNotNil() predicate.Division_Choice_MTSPMMG {
	return predicate.Division_Choice_MTSPMMG(sql.FieldNotNull(FieldCadrePrefNo))
}

// CadreEQ applies the EQ predicate on the "Cadre" field.
func CadreEQ(v string) predicate.Division_Choice_MTSPMMG {
	return predicate.Division_Choice_MTSPMMG(sql.FieldEQ(FieldCadre, v))
}

// CadreNEQ applies the NEQ predicate on the "Cadre" field.
func CadreNEQ(v string) predicate.Division_Choice_MTSPMMG {
	return predicate.Division_Choice_MTSPMMG(sql.FieldNEQ(FieldCadre, v))
}

// CadreIn applies the In predicate on the "Cadre" field.
func CadreIn(vs ...string) predicate.Division_Choice_MTSPMMG {
	return predicate.Division_Choice_MTSPMMG(sql.FieldIn(FieldCadre, vs...))
}

// CadreNotIn applies the NotIn predicate on the "Cadre" field.
func CadreNotIn(vs ...string) predicate.Division_Choice_MTSPMMG {
	return predicate.Division_Choice_MTSPMMG(sql.FieldNotIn(FieldCadre, vs...))
}

// CadreGT applies the GT predicate on the "Cadre" field.
func CadreGT(v string) predicate.Division_Choice_MTSPMMG {
	return predicate.Division_Choice_MTSPMMG(sql.FieldGT(FieldCadre, v))
}

// CadreGTE applies the GTE predicate on the "Cadre" field.
func CadreGTE(v string) predicate.Division_Choice_MTSPMMG {
	return predicate.Division_Choice_MTSPMMG(sql.FieldGTE(FieldCadre, v))
}

// CadreLT applies the LT predicate on the "Cadre" field.
func CadreLT(v string) predicate.Division_Choice_MTSPMMG {
	return predicate.Division_Choice_MTSPMMG(sql.FieldLT(FieldCadre, v))
}

// CadreLTE applies the LTE predicate on the "Cadre" field.
func CadreLTE(v string) predicate.Division_Choice_MTSPMMG {
	return predicate.Division_Choice_MTSPMMG(sql.FieldLTE(FieldCadre, v))
}

// CadreContains applies the Contains predicate on the "Cadre" field.
func CadreContains(v string) predicate.Division_Choice_MTSPMMG {
	return predicate.Division_Choice_MTSPMMG(sql.FieldContains(FieldCadre, v))
}

// CadreHasPrefix applies the HasPrefix predicate on the "Cadre" field.
func CadreHasPrefix(v string) predicate.Division_Choice_MTSPMMG {
	return predicate.Division_Choice_MTSPMMG(sql.FieldHasPrefix(FieldCadre, v))
}

// CadreHasSuffix applies the HasSuffix predicate on the "Cadre" field.
func CadreHasSuffix(v string) predicate.Division_Choice_MTSPMMG {
	return predicate.Division_Choice_MTSPMMG(sql.FieldHasSuffix(FieldCadre, v))
}

// CadreIsNil applies the IsNil predicate on the "Cadre" field.
func CadreIsNil() predicate.Division_Choice_MTSPMMG {
	return predicate.Division_Choice_MTSPMMG(sql.FieldIsNull(FieldCadre))
}

// CadreNotNil applies the NotNil predicate on the "Cadre" field.
func CadreNotNil() predicate.Division_Choice_MTSPMMG {
	return predicate.Division_Choice_MTSPMMG(sql.FieldNotNull(FieldCadre))
}

// CadreEqualFold applies the EqualFold predicate on the "Cadre" field.
func CadreEqualFold(v string) predicate.Division_Choice_MTSPMMG {
	return predicate.Division_Choice_MTSPMMG(sql.FieldEqualFold(FieldCadre, v))
}

// CadreContainsFold applies the ContainsFold predicate on the "Cadre" field.
func CadreContainsFold(v string) predicate.Division_Choice_MTSPMMG {
	return predicate.Division_Choice_MTSPMMG(sql.FieldContainsFold(FieldCadre, v))
}

// PlacePrefNoEQ applies the EQ predicate on the "PlacePrefNo" field.
func PlacePrefNoEQ(v int64) predicate.Division_Choice_MTSPMMG {
	return predicate.Division_Choice_MTSPMMG(sql.FieldEQ(FieldPlacePrefNo, v))
}

// PlacePrefNoNEQ applies the NEQ predicate on the "PlacePrefNo" field.
func PlacePrefNoNEQ(v int64) predicate.Division_Choice_MTSPMMG {
	return predicate.Division_Choice_MTSPMMG(sql.FieldNEQ(FieldPlacePrefNo, v))
}

// PlacePrefNoIn applies the In predicate on the "PlacePrefNo" field.
func PlacePrefNoIn(vs ...int64) predicate.Division_Choice_MTSPMMG {
	return predicate.Division_Choice_MTSPMMG(sql.FieldIn(FieldPlacePrefNo, vs...))
}

// PlacePrefNoNotIn applies the NotIn predicate on the "PlacePrefNo" field.
func PlacePrefNoNotIn(vs ...int64) predicate.Division_Choice_MTSPMMG {
	return predicate.Division_Choice_MTSPMMG(sql.FieldNotIn(FieldPlacePrefNo, vs...))
}

// PlacePrefNoGT applies the GT predicate on the "PlacePrefNo" field.
func PlacePrefNoGT(v int64) predicate.Division_Choice_MTSPMMG {
	return predicate.Division_Choice_MTSPMMG(sql.FieldGT(FieldPlacePrefNo, v))
}

// PlacePrefNoGTE applies the GTE predicate on the "PlacePrefNo" field.
func PlacePrefNoGTE(v int64) predicate.Division_Choice_MTSPMMG {
	return predicate.Division_Choice_MTSPMMG(sql.FieldGTE(FieldPlacePrefNo, v))
}

// PlacePrefNoLT applies the LT predicate on the "PlacePrefNo" field.
func PlacePrefNoLT(v int64) predicate.Division_Choice_MTSPMMG {
	return predicate.Division_Choice_MTSPMMG(sql.FieldLT(FieldPlacePrefNo, v))
}

// PlacePrefNoLTE applies the LTE predicate on the "PlacePrefNo" field.
func PlacePrefNoLTE(v int64) predicate.Division_Choice_MTSPMMG {
	return predicate.Division_Choice_MTSPMMG(sql.FieldLTE(FieldPlacePrefNo, v))
}

// PlacePrefNoIsNil applies the IsNil predicate on the "PlacePrefNo" field.
func PlacePrefNoIsNil() predicate.Division_Choice_MTSPMMG {
	return predicate.Division_Choice_MTSPMMG(sql.FieldIsNull(FieldPlacePrefNo))
}

// PlacePrefNoNotNil applies the NotNil predicate on the "PlacePrefNo" field.
func PlacePrefNoNotNil() predicate.Division_Choice_MTSPMMG {
	return predicate.Division_Choice_MTSPMMG(sql.FieldNotNull(FieldPlacePrefNo))
}

// PlacePrefValueEQ applies the EQ predicate on the "PlacePrefValue" field.
func PlacePrefValueEQ(v string) predicate.Division_Choice_MTSPMMG {
	return predicate.Division_Choice_MTSPMMG(sql.FieldEQ(FieldPlacePrefValue, v))
}

// PlacePrefValueNEQ applies the NEQ predicate on the "PlacePrefValue" field.
func PlacePrefValueNEQ(v string) predicate.Division_Choice_MTSPMMG {
	return predicate.Division_Choice_MTSPMMG(sql.FieldNEQ(FieldPlacePrefValue, v))
}

// PlacePrefValueIn applies the In predicate on the "PlacePrefValue" field.
func PlacePrefValueIn(vs ...string) predicate.Division_Choice_MTSPMMG {
	return predicate.Division_Choice_MTSPMMG(sql.FieldIn(FieldPlacePrefValue, vs...))
}

// PlacePrefValueNotIn applies the NotIn predicate on the "PlacePrefValue" field.
func PlacePrefValueNotIn(vs ...string) predicate.Division_Choice_MTSPMMG {
	return predicate.Division_Choice_MTSPMMG(sql.FieldNotIn(FieldPlacePrefValue, vs...))
}

// PlacePrefValueGT applies the GT predicate on the "PlacePrefValue" field.
func PlacePrefValueGT(v string) predicate.Division_Choice_MTSPMMG {
	return predicate.Division_Choice_MTSPMMG(sql.FieldGT(FieldPlacePrefValue, v))
}

// PlacePrefValueGTE applies the GTE predicate on the "PlacePrefValue" field.
func PlacePrefValueGTE(v string) predicate.Division_Choice_MTSPMMG {
	return predicate.Division_Choice_MTSPMMG(sql.FieldGTE(FieldPlacePrefValue, v))
}

// PlacePrefValueLT applies the LT predicate on the "PlacePrefValue" field.
func PlacePrefValueLT(v string) predicate.Division_Choice_MTSPMMG {
	return predicate.Division_Choice_MTSPMMG(sql.FieldLT(FieldPlacePrefValue, v))
}

// PlacePrefValueLTE applies the LTE predicate on the "PlacePrefValue" field.
func PlacePrefValueLTE(v string) predicate.Division_Choice_MTSPMMG {
	return predicate.Division_Choice_MTSPMMG(sql.FieldLTE(FieldPlacePrefValue, v))
}

// PlacePrefValueContains applies the Contains predicate on the "PlacePrefValue" field.
func PlacePrefValueContains(v string) predicate.Division_Choice_MTSPMMG {
	return predicate.Division_Choice_MTSPMMG(sql.FieldContains(FieldPlacePrefValue, v))
}

// PlacePrefValueHasPrefix applies the HasPrefix predicate on the "PlacePrefValue" field.
func PlacePrefValueHasPrefix(v string) predicate.Division_Choice_MTSPMMG {
	return predicate.Division_Choice_MTSPMMG(sql.FieldHasPrefix(FieldPlacePrefValue, v))
}

// PlacePrefValueHasSuffix applies the HasSuffix predicate on the "PlacePrefValue" field.
func PlacePrefValueHasSuffix(v string) predicate.Division_Choice_MTSPMMG {
	return predicate.Division_Choice_MTSPMMG(sql.FieldHasSuffix(FieldPlacePrefValue, v))
}

// PlacePrefValueIsNil applies the IsNil predicate on the "PlacePrefValue" field.
func PlacePrefValueIsNil() predicate.Division_Choice_MTSPMMG {
	return predicate.Division_Choice_MTSPMMG(sql.FieldIsNull(FieldPlacePrefValue))
}

// PlacePrefValueNotNil applies the NotNil predicate on the "PlacePrefValue" field.
func PlacePrefValueNotNil() predicate.Division_Choice_MTSPMMG {
	return predicate.Division_Choice_MTSPMMG(sql.FieldNotNull(FieldPlacePrefValue))
}

// PlacePrefValueEqualFold applies the EqualFold predicate on the "PlacePrefValue" field.
func PlacePrefValueEqualFold(v string) predicate.Division_Choice_MTSPMMG {
	return predicate.Division_Choice_MTSPMMG(sql.FieldEqualFold(FieldPlacePrefValue, v))
}

// PlacePrefValueContainsFold applies the ContainsFold predicate on the "PlacePrefValue" field.
func PlacePrefValueContainsFold(v string) predicate.Division_Choice_MTSPMMG {
	return predicate.Division_Choice_MTSPMMG(sql.FieldContainsFold(FieldPlacePrefValue, v))
}

// PostPrefNoEQ applies the EQ predicate on the "PostPrefNo" field.
func PostPrefNoEQ(v int64) predicate.Division_Choice_MTSPMMG {
	return predicate.Division_Choice_MTSPMMG(sql.FieldEQ(FieldPostPrefNo, v))
}

// PostPrefNoNEQ applies the NEQ predicate on the "PostPrefNo" field.
func PostPrefNoNEQ(v int64) predicate.Division_Choice_MTSPMMG {
	return predicate.Division_Choice_MTSPMMG(sql.FieldNEQ(FieldPostPrefNo, v))
}

// PostPrefNoIn applies the In predicate on the "PostPrefNo" field.
func PostPrefNoIn(vs ...int64) predicate.Division_Choice_MTSPMMG {
	return predicate.Division_Choice_MTSPMMG(sql.FieldIn(FieldPostPrefNo, vs...))
}

// PostPrefNoNotIn applies the NotIn predicate on the "PostPrefNo" field.
func PostPrefNoNotIn(vs ...int64) predicate.Division_Choice_MTSPMMG {
	return predicate.Division_Choice_MTSPMMG(sql.FieldNotIn(FieldPostPrefNo, vs...))
}

// PostPrefNoGT applies the GT predicate on the "PostPrefNo" field.
func PostPrefNoGT(v int64) predicate.Division_Choice_MTSPMMG {
	return predicate.Division_Choice_MTSPMMG(sql.FieldGT(FieldPostPrefNo, v))
}

// PostPrefNoGTE applies the GTE predicate on the "PostPrefNo" field.
func PostPrefNoGTE(v int64) predicate.Division_Choice_MTSPMMG {
	return predicate.Division_Choice_MTSPMMG(sql.FieldGTE(FieldPostPrefNo, v))
}

// PostPrefNoLT applies the LT predicate on the "PostPrefNo" field.
func PostPrefNoLT(v int64) predicate.Division_Choice_MTSPMMG {
	return predicate.Division_Choice_MTSPMMG(sql.FieldLT(FieldPostPrefNo, v))
}

// PostPrefNoLTE applies the LTE predicate on the "PostPrefNo" field.
func PostPrefNoLTE(v int64) predicate.Division_Choice_MTSPMMG {
	return predicate.Division_Choice_MTSPMMG(sql.FieldLTE(FieldPostPrefNo, v))
}

// PostPrefNoIsNil applies the IsNil predicate on the "PostPrefNo" field.
func PostPrefNoIsNil() predicate.Division_Choice_MTSPMMG {
	return predicate.Division_Choice_MTSPMMG(sql.FieldIsNull(FieldPostPrefNo))
}

// PostPrefNoNotNil applies the NotNil predicate on the "PostPrefNo" field.
func PostPrefNoNotNil() predicate.Division_Choice_MTSPMMG {
	return predicate.Division_Choice_MTSPMMG(sql.FieldNotNull(FieldPostPrefNo))
}

// PostingPrefValueEQ applies the EQ predicate on the "PostingPrefValue" field.
func PostingPrefValueEQ(v string) predicate.Division_Choice_MTSPMMG {
	return predicate.Division_Choice_MTSPMMG(sql.FieldEQ(FieldPostingPrefValue, v))
}

// PostingPrefValueNEQ applies the NEQ predicate on the "PostingPrefValue" field.
func PostingPrefValueNEQ(v string) predicate.Division_Choice_MTSPMMG {
	return predicate.Division_Choice_MTSPMMG(sql.FieldNEQ(FieldPostingPrefValue, v))
}

// PostingPrefValueIn applies the In predicate on the "PostingPrefValue" field.
func PostingPrefValueIn(vs ...string) predicate.Division_Choice_MTSPMMG {
	return predicate.Division_Choice_MTSPMMG(sql.FieldIn(FieldPostingPrefValue, vs...))
}

// PostingPrefValueNotIn applies the NotIn predicate on the "PostingPrefValue" field.
func PostingPrefValueNotIn(vs ...string) predicate.Division_Choice_MTSPMMG {
	return predicate.Division_Choice_MTSPMMG(sql.FieldNotIn(FieldPostingPrefValue, vs...))
}

// PostingPrefValueGT applies the GT predicate on the "PostingPrefValue" field.
func PostingPrefValueGT(v string) predicate.Division_Choice_MTSPMMG {
	return predicate.Division_Choice_MTSPMMG(sql.FieldGT(FieldPostingPrefValue, v))
}

// PostingPrefValueGTE applies the GTE predicate on the "PostingPrefValue" field.
func PostingPrefValueGTE(v string) predicate.Division_Choice_MTSPMMG {
	return predicate.Division_Choice_MTSPMMG(sql.FieldGTE(FieldPostingPrefValue, v))
}

// PostingPrefValueLT applies the LT predicate on the "PostingPrefValue" field.
func PostingPrefValueLT(v string) predicate.Division_Choice_MTSPMMG {
	return predicate.Division_Choice_MTSPMMG(sql.FieldLT(FieldPostingPrefValue, v))
}

// PostingPrefValueLTE applies the LTE predicate on the "PostingPrefValue" field.
func PostingPrefValueLTE(v string) predicate.Division_Choice_MTSPMMG {
	return predicate.Division_Choice_MTSPMMG(sql.FieldLTE(FieldPostingPrefValue, v))
}

// PostingPrefValueContains applies the Contains predicate on the "PostingPrefValue" field.
func PostingPrefValueContains(v string) predicate.Division_Choice_MTSPMMG {
	return predicate.Division_Choice_MTSPMMG(sql.FieldContains(FieldPostingPrefValue, v))
}

// PostingPrefValueHasPrefix applies the HasPrefix predicate on the "PostingPrefValue" field.
func PostingPrefValueHasPrefix(v string) predicate.Division_Choice_MTSPMMG {
	return predicate.Division_Choice_MTSPMMG(sql.FieldHasPrefix(FieldPostingPrefValue, v))
}

// PostingPrefValueHasSuffix applies the HasSuffix predicate on the "PostingPrefValue" field.
func PostingPrefValueHasSuffix(v string) predicate.Division_Choice_MTSPMMG {
	return predicate.Division_Choice_MTSPMMG(sql.FieldHasSuffix(FieldPostingPrefValue, v))
}

// PostingPrefValueIsNil applies the IsNil predicate on the "PostingPrefValue" field.
func PostingPrefValueIsNil() predicate.Division_Choice_MTSPMMG {
	return predicate.Division_Choice_MTSPMMG(sql.FieldIsNull(FieldPostingPrefValue))
}

// PostingPrefValueNotNil applies the NotNil predicate on the "PostingPrefValue" field.
func PostingPrefValueNotNil() predicate.Division_Choice_MTSPMMG {
	return predicate.Division_Choice_MTSPMMG(sql.FieldNotNull(FieldPostingPrefValue))
}

// PostingPrefValueEqualFold applies the EqualFold predicate on the "PostingPrefValue" field.
func PostingPrefValueEqualFold(v string) predicate.Division_Choice_MTSPMMG {
	return predicate.Division_Choice_MTSPMMG(sql.FieldEqualFold(FieldPostingPrefValue, v))
}

// PostingPrefValueContainsFold applies the ContainsFold predicate on the "PostingPrefValue" field.
func PostingPrefValueContainsFold(v string) predicate.Division_Choice_MTSPMMG {
	return predicate.Division_Choice_MTSPMMG(sql.FieldContainsFold(FieldPostingPrefValue, v))
}

// EmployeeIDEQ applies the EQ predicate on the "EmployeeID" field.
func EmployeeIDEQ(v int64) predicate.Division_Choice_MTSPMMG {
	return predicate.Division_Choice_MTSPMMG(sql.FieldEQ(FieldEmployeeID, v))
}

// EmployeeIDNEQ applies the NEQ predicate on the "EmployeeID" field.
func EmployeeIDNEQ(v int64) predicate.Division_Choice_MTSPMMG {
	return predicate.Division_Choice_MTSPMMG(sql.FieldNEQ(FieldEmployeeID, v))
}

// EmployeeIDIn applies the In predicate on the "EmployeeID" field.
func EmployeeIDIn(vs ...int64) predicate.Division_Choice_MTSPMMG {
	return predicate.Division_Choice_MTSPMMG(sql.FieldIn(FieldEmployeeID, vs...))
}

// EmployeeIDNotIn applies the NotIn predicate on the "EmployeeID" field.
func EmployeeIDNotIn(vs ...int64) predicate.Division_Choice_MTSPMMG {
	return predicate.Division_Choice_MTSPMMG(sql.FieldNotIn(FieldEmployeeID, vs...))
}

// EmployeeIDGT applies the GT predicate on the "EmployeeID" field.
func EmployeeIDGT(v int64) predicate.Division_Choice_MTSPMMG {
	return predicate.Division_Choice_MTSPMMG(sql.FieldGT(FieldEmployeeID, v))
}

// EmployeeIDGTE applies the GTE predicate on the "EmployeeID" field.
func EmployeeIDGTE(v int64) predicate.Division_Choice_MTSPMMG {
	return predicate.Division_Choice_MTSPMMG(sql.FieldGTE(FieldEmployeeID, v))
}

// EmployeeIDLT applies the LT predicate on the "EmployeeID" field.
func EmployeeIDLT(v int64) predicate.Division_Choice_MTSPMMG {
	return predicate.Division_Choice_MTSPMMG(sql.FieldLT(FieldEmployeeID, v))
}

// EmployeeIDLTE applies the LTE predicate on the "EmployeeID" field.
func EmployeeIDLTE(v int64) predicate.Division_Choice_MTSPMMG {
	return predicate.Division_Choice_MTSPMMG(sql.FieldLTE(FieldEmployeeID, v))
}

// EmployeeIDIsNil applies the IsNil predicate on the "EmployeeID" field.
func EmployeeIDIsNil() predicate.Division_Choice_MTSPMMG {
	return predicate.Division_Choice_MTSPMMG(sql.FieldIsNull(FieldEmployeeID))
}

// EmployeeIDNotNil applies the NotNil predicate on the "EmployeeID" field.
func EmployeeIDNotNil() predicate.Division_Choice_MTSPMMG {
	return predicate.Division_Choice_MTSPMMG(sql.FieldNotNull(FieldEmployeeID))
}

// UpdatedAtEQ applies the EQ predicate on the "UpdatedAt" field.
func UpdatedAtEQ(v time.Time) predicate.Division_Choice_MTSPMMG {
	return predicate.Division_Choice_MTSPMMG(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "UpdatedAt" field.
func UpdatedAtNEQ(v time.Time) predicate.Division_Choice_MTSPMMG {
	return predicate.Division_Choice_MTSPMMG(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "UpdatedAt" field.
func UpdatedAtIn(vs ...time.Time) predicate.Division_Choice_MTSPMMG {
	return predicate.Division_Choice_MTSPMMG(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "UpdatedAt" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Division_Choice_MTSPMMG {
	return predicate.Division_Choice_MTSPMMG(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "UpdatedAt" field.
func UpdatedAtGT(v time.Time) predicate.Division_Choice_MTSPMMG {
	return predicate.Division_Choice_MTSPMMG(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "UpdatedAt" field.
func UpdatedAtGTE(v time.Time) predicate.Division_Choice_MTSPMMG {
	return predicate.Division_Choice_MTSPMMG(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "UpdatedAt" field.
func UpdatedAtLT(v time.Time) predicate.Division_Choice_MTSPMMG {
	return predicate.Division_Choice_MTSPMMG(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "UpdatedAt" field.
func UpdatedAtLTE(v time.Time) predicate.Division_Choice_MTSPMMG {
	return predicate.Division_Choice_MTSPMMG(sql.FieldLTE(FieldUpdatedAt, v))
}

// UpdatedAtIsNil applies the IsNil predicate on the "UpdatedAt" field.
func UpdatedAtIsNil() predicate.Division_Choice_MTSPMMG {
	return predicate.Division_Choice_MTSPMMG(sql.FieldIsNull(FieldUpdatedAt))
}

// UpdatedAtNotNil applies the NotNil predicate on the "UpdatedAt" field.
func UpdatedAtNotNil() predicate.Division_Choice_MTSPMMG {
	return predicate.Division_Choice_MTSPMMG(sql.FieldNotNull(FieldUpdatedAt))
}

// UpdatedByEQ applies the EQ predicate on the "UpdatedBy" field.
func UpdatedByEQ(v string) predicate.Division_Choice_MTSPMMG {
	return predicate.Division_Choice_MTSPMMG(sql.FieldEQ(FieldUpdatedBy, v))
}

// UpdatedByNEQ applies the NEQ predicate on the "UpdatedBy" field.
func UpdatedByNEQ(v string) predicate.Division_Choice_MTSPMMG {
	return predicate.Division_Choice_MTSPMMG(sql.FieldNEQ(FieldUpdatedBy, v))
}

// UpdatedByIn applies the In predicate on the "UpdatedBy" field.
func UpdatedByIn(vs ...string) predicate.Division_Choice_MTSPMMG {
	return predicate.Division_Choice_MTSPMMG(sql.FieldIn(FieldUpdatedBy, vs...))
}

// UpdatedByNotIn applies the NotIn predicate on the "UpdatedBy" field.
func UpdatedByNotIn(vs ...string) predicate.Division_Choice_MTSPMMG {
	return predicate.Division_Choice_MTSPMMG(sql.FieldNotIn(FieldUpdatedBy, vs...))
}

// UpdatedByGT applies the GT predicate on the "UpdatedBy" field.
func UpdatedByGT(v string) predicate.Division_Choice_MTSPMMG {
	return predicate.Division_Choice_MTSPMMG(sql.FieldGT(FieldUpdatedBy, v))
}

// UpdatedByGTE applies the GTE predicate on the "UpdatedBy" field.
func UpdatedByGTE(v string) predicate.Division_Choice_MTSPMMG {
	return predicate.Division_Choice_MTSPMMG(sql.FieldGTE(FieldUpdatedBy, v))
}

// UpdatedByLT applies the LT predicate on the "UpdatedBy" field.
func UpdatedByLT(v string) predicate.Division_Choice_MTSPMMG {
	return predicate.Division_Choice_MTSPMMG(sql.FieldLT(FieldUpdatedBy, v))
}

// UpdatedByLTE applies the LTE predicate on the "UpdatedBy" field.
func UpdatedByLTE(v string) predicate.Division_Choice_MTSPMMG {
	return predicate.Division_Choice_MTSPMMG(sql.FieldLTE(FieldUpdatedBy, v))
}

// UpdatedByContains applies the Contains predicate on the "UpdatedBy" field.
func UpdatedByContains(v string) predicate.Division_Choice_MTSPMMG {
	return predicate.Division_Choice_MTSPMMG(sql.FieldContains(FieldUpdatedBy, v))
}

// UpdatedByHasPrefix applies the HasPrefix predicate on the "UpdatedBy" field.
func UpdatedByHasPrefix(v string) predicate.Division_Choice_MTSPMMG {
	return predicate.Division_Choice_MTSPMMG(sql.FieldHasPrefix(FieldUpdatedBy, v))
}

// UpdatedByHasSuffix applies the HasSuffix predicate on the "UpdatedBy" field.
func UpdatedByHasSuffix(v string) predicate.Division_Choice_MTSPMMG {
	return predicate.Division_Choice_MTSPMMG(sql.FieldHasSuffix(FieldUpdatedBy, v))
}

// UpdatedByIsNil applies the IsNil predicate on the "UpdatedBy" field.
func UpdatedByIsNil() predicate.Division_Choice_MTSPMMG {
	return predicate.Division_Choice_MTSPMMG(sql.FieldIsNull(FieldUpdatedBy))
}

// UpdatedByNotNil applies the NotNil predicate on the "UpdatedBy" field.
func UpdatedByNotNil() predicate.Division_Choice_MTSPMMG {
	return predicate.Division_Choice_MTSPMMG(sql.FieldNotNull(FieldUpdatedBy))
}

// UpdatedByEqualFold applies the EqualFold predicate on the "UpdatedBy" field.
func UpdatedByEqualFold(v string) predicate.Division_Choice_MTSPMMG {
	return predicate.Division_Choice_MTSPMMG(sql.FieldEqualFold(FieldUpdatedBy, v))
}

// UpdatedByContainsFold applies the ContainsFold predicate on the "UpdatedBy" field.
func UpdatedByContainsFold(v string) predicate.Division_Choice_MTSPMMG {
	return predicate.Division_Choice_MTSPMMG(sql.FieldContainsFold(FieldUpdatedBy, v))
}

// HasApplnMTSPMMGRef applies the HasEdge predicate on the "ApplnMTSPMMG_Ref" edge.
func HasApplnMTSPMMGRef() predicate.Division_Choice_MTSPMMG {
	return predicate.Division_Choice_MTSPMMG(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ApplnMTSPMMGRefTable, ApplnMTSPMMGRefColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasApplnMTSPMMGRefWith applies the HasEdge predicate on the "ApplnMTSPMMG_Ref" edge with a given conditions (other predicates).
func HasApplnMTSPMMGRefWith(preds ...predicate.Exam_Application_MTSPMMG) predicate.Division_Choice_MTSPMMG {
	return predicate.Division_Choice_MTSPMMG(func(s *sql.Selector) {
		step := newApplnMTSPMMGRefStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Division_Choice_MTSPMMG) predicate.Division_Choice_MTSPMMG {
	return predicate.Division_Choice_MTSPMMG(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Division_Choice_MTSPMMG) predicate.Division_Choice_MTSPMMG {
	return predicate.Division_Choice_MTSPMMG(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Division_Choice_MTSPMMG) predicate.Division_Choice_MTSPMMG {
	return predicate.Division_Choice_MTSPMMG(func(s *sql.Selector) {
		p(s.Not())
	})
}
