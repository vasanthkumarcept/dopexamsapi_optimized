// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"recruit/ent/circlesummaryforno"
	"recruit/ent/exam_application_mtspmmg"
	"recruit/ent/exam_applications_gdspa"
	"recruit/ent/exam_applications_gdspm"
	"recruit/ent/exam_applications_ip"
	"recruit/ent/exam_applications_pmpa"
	"recruit/ent/exam_applications_ps"
	"recruit/ent/predicate"
	"recruit/ent/usermaster"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CircleSummaryForNOUpdate is the builder for updating CircleSummaryForNO entities.
type CircleSummaryForNOUpdate struct {
	config
	hooks    []Hook
	mutation *CircleSummaryForNOMutation
}

// Where appends a list predicates to the CircleSummaryForNOUpdate builder.
func (csfnu *CircleSummaryForNOUpdate) Where(ps ...predicate.CircleSummaryForNO) *CircleSummaryForNOUpdate {
	csfnu.mutation.Where(ps...)
	return csfnu
}

// SetCircleOfficeId sets the "CircleOfficeId" field.
func (csfnu *CircleSummaryForNOUpdate) SetCircleOfficeId(s string) *CircleSummaryForNOUpdate {
	csfnu.mutation.SetCircleOfficeId(s)
	return csfnu
}

// SetCircleOfficeName sets the "CircleOfficeName" field.
func (csfnu *CircleSummaryForNOUpdate) SetCircleOfficeName(s string) *CircleSummaryForNOUpdate {
	csfnu.mutation.SetCircleOfficeName(s)
	return csfnu
}

// SetApproveHallTicketGenrationIP sets the "ApproveHallTicketGenrationIP" field.
func (csfnu *CircleSummaryForNOUpdate) SetApproveHallTicketGenrationIP(b bool) *CircleSummaryForNOUpdate {
	csfnu.mutation.SetApproveHallTicketGenrationIP(b)
	return csfnu
}

// SetNillableApproveHallTicketGenrationIP sets the "ApproveHallTicketGenrationIP" field if the given value is not nil.
func (csfnu *CircleSummaryForNOUpdate) SetNillableApproveHallTicketGenrationIP(b *bool) *CircleSummaryForNOUpdate {
	if b != nil {
		csfnu.SetApproveHallTicketGenrationIP(*b)
	}
	return csfnu
}

// ClearApproveHallTicketGenrationIP clears the value of the "ApproveHallTicketGenrationIP" field.
func (csfnu *CircleSummaryForNOUpdate) ClearApproveHallTicketGenrationIP() *CircleSummaryForNOUpdate {
	csfnu.mutation.ClearApproveHallTicketGenrationIP()
	return csfnu
}

// SetApproveHallTicketGenrationPS sets the "ApproveHallTicketGenrationPS" field.
func (csfnu *CircleSummaryForNOUpdate) SetApproveHallTicketGenrationPS(b bool) *CircleSummaryForNOUpdate {
	csfnu.mutation.SetApproveHallTicketGenrationPS(b)
	return csfnu
}

// SetNillableApproveHallTicketGenrationPS sets the "ApproveHallTicketGenrationPS" field if the given value is not nil.
func (csfnu *CircleSummaryForNOUpdate) SetNillableApproveHallTicketGenrationPS(b *bool) *CircleSummaryForNOUpdate {
	if b != nil {
		csfnu.SetApproveHallTicketGenrationPS(*b)
	}
	return csfnu
}

// ClearApproveHallTicketGenrationPS clears the value of the "ApproveHallTicketGenrationPS" field.
func (csfnu *CircleSummaryForNOUpdate) ClearApproveHallTicketGenrationPS() *CircleSummaryForNOUpdate {
	csfnu.mutation.ClearApproveHallTicketGenrationPS()
	return csfnu
}

// SetApproveHallTicketGenrationPM sets the "ApproveHallTicketGenrationPM" field.
func (csfnu *CircleSummaryForNOUpdate) SetApproveHallTicketGenrationPM(b bool) *CircleSummaryForNOUpdate {
	csfnu.mutation.SetApproveHallTicketGenrationPM(b)
	return csfnu
}

// SetNillableApproveHallTicketGenrationPM sets the "ApproveHallTicketGenrationPM" field if the given value is not nil.
func (csfnu *CircleSummaryForNOUpdate) SetNillableApproveHallTicketGenrationPM(b *bool) *CircleSummaryForNOUpdate {
	if b != nil {
		csfnu.SetApproveHallTicketGenrationPM(*b)
	}
	return csfnu
}

// ClearApproveHallTicketGenrationPM clears the value of the "ApproveHallTicketGenrationPM" field.
func (csfnu *CircleSummaryForNOUpdate) ClearApproveHallTicketGenrationPM() *CircleSummaryForNOUpdate {
	csfnu.mutation.ClearApproveHallTicketGenrationPM()
	return csfnu
}

// SetApproveHallTicketGenrationPA sets the "ApproveHallTicketGenrationPA" field.
func (csfnu *CircleSummaryForNOUpdate) SetApproveHallTicketGenrationPA(b bool) *CircleSummaryForNOUpdate {
	csfnu.mutation.SetApproveHallTicketGenrationPA(b)
	return csfnu
}

// SetNillableApproveHallTicketGenrationPA sets the "ApproveHallTicketGenrationPA" field if the given value is not nil.
func (csfnu *CircleSummaryForNOUpdate) SetNillableApproveHallTicketGenrationPA(b *bool) *CircleSummaryForNOUpdate {
	if b != nil {
		csfnu.SetApproveHallTicketGenrationPA(*b)
	}
	return csfnu
}

// ClearApproveHallTicketGenrationPA clears the value of the "ApproveHallTicketGenrationPA" field.
func (csfnu *CircleSummaryForNOUpdate) ClearApproveHallTicketGenrationPA() *CircleSummaryForNOUpdate {
	csfnu.mutation.ClearApproveHallTicketGenrationPA()
	return csfnu
}

// AddCircleuserIDs adds the "circleusers" edge to the UserMaster entity by IDs.
func (csfnu *CircleSummaryForNOUpdate) AddCircleuserIDs(ids ...int64) *CircleSummaryForNOUpdate {
	csfnu.mutation.AddCircleuserIDs(ids...)
	return csfnu
}

// AddCircleusers adds the "circleusers" edges to the UserMaster entity.
func (csfnu *CircleSummaryForNOUpdate) AddCircleusers(u ...*UserMaster) *CircleSummaryForNOUpdate {
	ids := make([]int64, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return csfnu.AddCircleuserIDs(ids...)
}

// AddCircleRefsForHallTicketIPIDs adds the "CircleRefsForHallTicketIP" edge to the Exam_Applications_IP entity by IDs.
func (csfnu *CircleSummaryForNOUpdate) AddCircleRefsForHallTicketIPIDs(ids ...int64) *CircleSummaryForNOUpdate {
	csfnu.mutation.AddCircleRefsForHallTicketIPIDs(ids...)
	return csfnu
}

// AddCircleRefsForHallTicketIP adds the "CircleRefsForHallTicketIP" edges to the Exam_Applications_IP entity.
func (csfnu *CircleSummaryForNOUpdate) AddCircleRefsForHallTicketIP(e ...*Exam_Applications_IP) *CircleSummaryForNOUpdate {
	ids := make([]int64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return csfnu.AddCircleRefsForHallTicketIPIDs(ids...)
}

// AddCircleRefsForHallTicketPSIDs adds the "CircleRefsForHallTicketPS" edge to the Exam_Applications_PS entity by IDs.
func (csfnu *CircleSummaryForNOUpdate) AddCircleRefsForHallTicketPSIDs(ids ...int64) *CircleSummaryForNOUpdate {
	csfnu.mutation.AddCircleRefsForHallTicketPSIDs(ids...)
	return csfnu
}

// AddCircleRefsForHallTicketPS adds the "CircleRefsForHallTicketPS" edges to the Exam_Applications_PS entity.
func (csfnu *CircleSummaryForNOUpdate) AddCircleRefsForHallTicketPS(e ...*Exam_Applications_PS) *CircleSummaryForNOUpdate {
	ids := make([]int64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return csfnu.AddCircleRefsForHallTicketPSIDs(ids...)
}

// AddCircleRefsForHallTicketGDSPAIDs adds the "CircleRefsForHallTicketGDSPA" edge to the Exam_Applications_GDSPA entity by IDs.
func (csfnu *CircleSummaryForNOUpdate) AddCircleRefsForHallTicketGDSPAIDs(ids ...int64) *CircleSummaryForNOUpdate {
	csfnu.mutation.AddCircleRefsForHallTicketGDSPAIDs(ids...)
	return csfnu
}

// AddCircleRefsForHallTicketGDSPA adds the "CircleRefsForHallTicketGDSPA" edges to the Exam_Applications_GDSPA entity.
func (csfnu *CircleSummaryForNOUpdate) AddCircleRefsForHallTicketGDSPA(e ...*Exam_Applications_GDSPA) *CircleSummaryForNOUpdate {
	ids := make([]int64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return csfnu.AddCircleRefsForHallTicketGDSPAIDs(ids...)
}

// AddCircleRefsForHallTicketGDSPMIDs adds the "CircleRefsForHallTicketGDSPM" edge to the Exam_Applications_GDSPM entity by IDs.
func (csfnu *CircleSummaryForNOUpdate) AddCircleRefsForHallTicketGDSPMIDs(ids ...int64) *CircleSummaryForNOUpdate {
	csfnu.mutation.AddCircleRefsForHallTicketGDSPMIDs(ids...)
	return csfnu
}

// AddCircleRefsForHallTicketGDSPM adds the "CircleRefsForHallTicketGDSPM" edges to the Exam_Applications_GDSPM entity.
func (csfnu *CircleSummaryForNOUpdate) AddCircleRefsForHallTicketGDSPM(e ...*Exam_Applications_GDSPM) *CircleSummaryForNOUpdate {
	ids := make([]int64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return csfnu.AddCircleRefsForHallTicketGDSPMIDs(ids...)
}

// AddCircleRefsForHallTicketPMPAIDs adds the "CircleRefsForHallTicketPMPA" edge to the Exam_Applications_PMPA entity by IDs.
func (csfnu *CircleSummaryForNOUpdate) AddCircleRefsForHallTicketPMPAIDs(ids ...int64) *CircleSummaryForNOUpdate {
	csfnu.mutation.AddCircleRefsForHallTicketPMPAIDs(ids...)
	return csfnu
}

// AddCircleRefsForHallTicketPMPA adds the "CircleRefsForHallTicketPMPA" edges to the Exam_Applications_PMPA entity.
func (csfnu *CircleSummaryForNOUpdate) AddCircleRefsForHallTicketPMPA(e ...*Exam_Applications_PMPA) *CircleSummaryForNOUpdate {
	ids := make([]int64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return csfnu.AddCircleRefsForHallTicketPMPAIDs(ids...)
}

// AddCircleRefsForHallTicketMTSPMMGIDs adds the "CircleRefsForHallTicketMTSPMMG" edge to the Exam_Application_MTSPMMG entity by IDs.
func (csfnu *CircleSummaryForNOUpdate) AddCircleRefsForHallTicketMTSPMMGIDs(ids ...int64) *CircleSummaryForNOUpdate {
	csfnu.mutation.AddCircleRefsForHallTicketMTSPMMGIDs(ids...)
	return csfnu
}

// AddCircleRefsForHallTicketMTSPMMG adds the "CircleRefsForHallTicketMTSPMMG" edges to the Exam_Application_MTSPMMG entity.
func (csfnu *CircleSummaryForNOUpdate) AddCircleRefsForHallTicketMTSPMMG(e ...*Exam_Application_MTSPMMG) *CircleSummaryForNOUpdate {
	ids := make([]int64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return csfnu.AddCircleRefsForHallTicketMTSPMMGIDs(ids...)
}

// Mutation returns the CircleSummaryForNOMutation object of the builder.
func (csfnu *CircleSummaryForNOUpdate) Mutation() *CircleSummaryForNOMutation {
	return csfnu.mutation
}

// ClearCircleusers clears all "circleusers" edges to the UserMaster entity.
func (csfnu *CircleSummaryForNOUpdate) ClearCircleusers() *CircleSummaryForNOUpdate {
	csfnu.mutation.ClearCircleusers()
	return csfnu
}

// RemoveCircleuserIDs removes the "circleusers" edge to UserMaster entities by IDs.
func (csfnu *CircleSummaryForNOUpdate) RemoveCircleuserIDs(ids ...int64) *CircleSummaryForNOUpdate {
	csfnu.mutation.RemoveCircleuserIDs(ids...)
	return csfnu
}

// RemoveCircleusers removes "circleusers" edges to UserMaster entities.
func (csfnu *CircleSummaryForNOUpdate) RemoveCircleusers(u ...*UserMaster) *CircleSummaryForNOUpdate {
	ids := make([]int64, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return csfnu.RemoveCircleuserIDs(ids...)
}

// ClearCircleRefsForHallTicketIP clears all "CircleRefsForHallTicketIP" edges to the Exam_Applications_IP entity.
func (csfnu *CircleSummaryForNOUpdate) ClearCircleRefsForHallTicketIP() *CircleSummaryForNOUpdate {
	csfnu.mutation.ClearCircleRefsForHallTicketIP()
	return csfnu
}

// RemoveCircleRefsForHallTicketIPIDs removes the "CircleRefsForHallTicketIP" edge to Exam_Applications_IP entities by IDs.
func (csfnu *CircleSummaryForNOUpdate) RemoveCircleRefsForHallTicketIPIDs(ids ...int64) *CircleSummaryForNOUpdate {
	csfnu.mutation.RemoveCircleRefsForHallTicketIPIDs(ids...)
	return csfnu
}

// RemoveCircleRefsForHallTicketIP removes "CircleRefsForHallTicketIP" edges to Exam_Applications_IP entities.
func (csfnu *CircleSummaryForNOUpdate) RemoveCircleRefsForHallTicketIP(e ...*Exam_Applications_IP) *CircleSummaryForNOUpdate {
	ids := make([]int64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return csfnu.RemoveCircleRefsForHallTicketIPIDs(ids...)
}

// ClearCircleRefsForHallTicketPS clears all "CircleRefsForHallTicketPS" edges to the Exam_Applications_PS entity.
func (csfnu *CircleSummaryForNOUpdate) ClearCircleRefsForHallTicketPS() *CircleSummaryForNOUpdate {
	csfnu.mutation.ClearCircleRefsForHallTicketPS()
	return csfnu
}

// RemoveCircleRefsForHallTicketPSIDs removes the "CircleRefsForHallTicketPS" edge to Exam_Applications_PS entities by IDs.
func (csfnu *CircleSummaryForNOUpdate) RemoveCircleRefsForHallTicketPSIDs(ids ...int64) *CircleSummaryForNOUpdate {
	csfnu.mutation.RemoveCircleRefsForHallTicketPSIDs(ids...)
	return csfnu
}

// RemoveCircleRefsForHallTicketPS removes "CircleRefsForHallTicketPS" edges to Exam_Applications_PS entities.
func (csfnu *CircleSummaryForNOUpdate) RemoveCircleRefsForHallTicketPS(e ...*Exam_Applications_PS) *CircleSummaryForNOUpdate {
	ids := make([]int64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return csfnu.RemoveCircleRefsForHallTicketPSIDs(ids...)
}

// ClearCircleRefsForHallTicketGDSPA clears all "CircleRefsForHallTicketGDSPA" edges to the Exam_Applications_GDSPA entity.
func (csfnu *CircleSummaryForNOUpdate) ClearCircleRefsForHallTicketGDSPA() *CircleSummaryForNOUpdate {
	csfnu.mutation.ClearCircleRefsForHallTicketGDSPA()
	return csfnu
}

// RemoveCircleRefsForHallTicketGDSPAIDs removes the "CircleRefsForHallTicketGDSPA" edge to Exam_Applications_GDSPA entities by IDs.
func (csfnu *CircleSummaryForNOUpdate) RemoveCircleRefsForHallTicketGDSPAIDs(ids ...int64) *CircleSummaryForNOUpdate {
	csfnu.mutation.RemoveCircleRefsForHallTicketGDSPAIDs(ids...)
	return csfnu
}

// RemoveCircleRefsForHallTicketGDSPA removes "CircleRefsForHallTicketGDSPA" edges to Exam_Applications_GDSPA entities.
func (csfnu *CircleSummaryForNOUpdate) RemoveCircleRefsForHallTicketGDSPA(e ...*Exam_Applications_GDSPA) *CircleSummaryForNOUpdate {
	ids := make([]int64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return csfnu.RemoveCircleRefsForHallTicketGDSPAIDs(ids...)
}

// ClearCircleRefsForHallTicketGDSPM clears all "CircleRefsForHallTicketGDSPM" edges to the Exam_Applications_GDSPM entity.
func (csfnu *CircleSummaryForNOUpdate) ClearCircleRefsForHallTicketGDSPM() *CircleSummaryForNOUpdate {
	csfnu.mutation.ClearCircleRefsForHallTicketGDSPM()
	return csfnu
}

// RemoveCircleRefsForHallTicketGDSPMIDs removes the "CircleRefsForHallTicketGDSPM" edge to Exam_Applications_GDSPM entities by IDs.
func (csfnu *CircleSummaryForNOUpdate) RemoveCircleRefsForHallTicketGDSPMIDs(ids ...int64) *CircleSummaryForNOUpdate {
	csfnu.mutation.RemoveCircleRefsForHallTicketGDSPMIDs(ids...)
	return csfnu
}

// RemoveCircleRefsForHallTicketGDSPM removes "CircleRefsForHallTicketGDSPM" edges to Exam_Applications_GDSPM entities.
func (csfnu *CircleSummaryForNOUpdate) RemoveCircleRefsForHallTicketGDSPM(e ...*Exam_Applications_GDSPM) *CircleSummaryForNOUpdate {
	ids := make([]int64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return csfnu.RemoveCircleRefsForHallTicketGDSPMIDs(ids...)
}

// ClearCircleRefsForHallTicketPMPA clears all "CircleRefsForHallTicketPMPA" edges to the Exam_Applications_PMPA entity.
func (csfnu *CircleSummaryForNOUpdate) ClearCircleRefsForHallTicketPMPA() *CircleSummaryForNOUpdate {
	csfnu.mutation.ClearCircleRefsForHallTicketPMPA()
	return csfnu
}

// RemoveCircleRefsForHallTicketPMPAIDs removes the "CircleRefsForHallTicketPMPA" edge to Exam_Applications_PMPA entities by IDs.
func (csfnu *CircleSummaryForNOUpdate) RemoveCircleRefsForHallTicketPMPAIDs(ids ...int64) *CircleSummaryForNOUpdate {
	csfnu.mutation.RemoveCircleRefsForHallTicketPMPAIDs(ids...)
	return csfnu
}

// RemoveCircleRefsForHallTicketPMPA removes "CircleRefsForHallTicketPMPA" edges to Exam_Applications_PMPA entities.
func (csfnu *CircleSummaryForNOUpdate) RemoveCircleRefsForHallTicketPMPA(e ...*Exam_Applications_PMPA) *CircleSummaryForNOUpdate {
	ids := make([]int64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return csfnu.RemoveCircleRefsForHallTicketPMPAIDs(ids...)
}

// ClearCircleRefsForHallTicketMTSPMMG clears all "CircleRefsForHallTicketMTSPMMG" edges to the Exam_Application_MTSPMMG entity.
func (csfnu *CircleSummaryForNOUpdate) ClearCircleRefsForHallTicketMTSPMMG() *CircleSummaryForNOUpdate {
	csfnu.mutation.ClearCircleRefsForHallTicketMTSPMMG()
	return csfnu
}

// RemoveCircleRefsForHallTicketMTSPMMGIDs removes the "CircleRefsForHallTicketMTSPMMG" edge to Exam_Application_MTSPMMG entities by IDs.
func (csfnu *CircleSummaryForNOUpdate) RemoveCircleRefsForHallTicketMTSPMMGIDs(ids ...int64) *CircleSummaryForNOUpdate {
	csfnu.mutation.RemoveCircleRefsForHallTicketMTSPMMGIDs(ids...)
	return csfnu
}

// RemoveCircleRefsForHallTicketMTSPMMG removes "CircleRefsForHallTicketMTSPMMG" edges to Exam_Application_MTSPMMG entities.
func (csfnu *CircleSummaryForNOUpdate) RemoveCircleRefsForHallTicketMTSPMMG(e ...*Exam_Application_MTSPMMG) *CircleSummaryForNOUpdate {
	ids := make([]int64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return csfnu.RemoveCircleRefsForHallTicketMTSPMMGIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (csfnu *CircleSummaryForNOUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, csfnu.sqlSave, csfnu.mutation, csfnu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (csfnu *CircleSummaryForNOUpdate) SaveX(ctx context.Context) int {
	affected, err := csfnu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (csfnu *CircleSummaryForNOUpdate) Exec(ctx context.Context) error {
	_, err := csfnu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (csfnu *CircleSummaryForNOUpdate) ExecX(ctx context.Context) {
	if err := csfnu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (csfnu *CircleSummaryForNOUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(circlesummaryforno.Table, circlesummaryforno.Columns, sqlgraph.NewFieldSpec(circlesummaryforno.FieldID, field.TypeInt32))
	if ps := csfnu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := csfnu.mutation.CircleOfficeId(); ok {
		_spec.SetField(circlesummaryforno.FieldCircleOfficeId, field.TypeString, value)
	}
	if value, ok := csfnu.mutation.CircleOfficeName(); ok {
		_spec.SetField(circlesummaryforno.FieldCircleOfficeName, field.TypeString, value)
	}
	if value, ok := csfnu.mutation.ApproveHallTicketGenrationIP(); ok {
		_spec.SetField(circlesummaryforno.FieldApproveHallTicketGenrationIP, field.TypeBool, value)
	}
	if csfnu.mutation.ApproveHallTicketGenrationIPCleared() {
		_spec.ClearField(circlesummaryforno.FieldApproveHallTicketGenrationIP, field.TypeBool)
	}
	if value, ok := csfnu.mutation.ApproveHallTicketGenrationPS(); ok {
		_spec.SetField(circlesummaryforno.FieldApproveHallTicketGenrationPS, field.TypeBool, value)
	}
	if csfnu.mutation.ApproveHallTicketGenrationPSCleared() {
		_spec.ClearField(circlesummaryforno.FieldApproveHallTicketGenrationPS, field.TypeBool)
	}
	if value, ok := csfnu.mutation.ApproveHallTicketGenrationPM(); ok {
		_spec.SetField(circlesummaryforno.FieldApproveHallTicketGenrationPM, field.TypeBool, value)
	}
	if csfnu.mutation.ApproveHallTicketGenrationPMCleared() {
		_spec.ClearField(circlesummaryforno.FieldApproveHallTicketGenrationPM, field.TypeBool)
	}
	if value, ok := csfnu.mutation.ApproveHallTicketGenrationPA(); ok {
		_spec.SetField(circlesummaryforno.FieldApproveHallTicketGenrationPA, field.TypeBool, value)
	}
	if csfnu.mutation.ApproveHallTicketGenrationPACleared() {
		_spec.ClearField(circlesummaryforno.FieldApproveHallTicketGenrationPA, field.TypeBool)
	}
	if csfnu.mutation.CircleusersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   circlesummaryforno.CircleusersTable,
			Columns: []string{circlesummaryforno.CircleusersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usermaster.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := csfnu.mutation.RemovedCircleusersIDs(); len(nodes) > 0 && !csfnu.mutation.CircleusersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   circlesummaryforno.CircleusersTable,
			Columns: []string{circlesummaryforno.CircleusersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usermaster.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := csfnu.mutation.CircleusersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   circlesummaryforno.CircleusersTable,
			Columns: []string{circlesummaryforno.CircleusersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usermaster.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if csfnu.mutation.CircleRefsForHallTicketIPCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   circlesummaryforno.CircleRefsForHallTicketIPTable,
			Columns: []string{circlesummaryforno.CircleRefsForHallTicketIPColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_ip.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := csfnu.mutation.RemovedCircleRefsForHallTicketIPIDs(); len(nodes) > 0 && !csfnu.mutation.CircleRefsForHallTicketIPCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   circlesummaryforno.CircleRefsForHallTicketIPTable,
			Columns: []string{circlesummaryforno.CircleRefsForHallTicketIPColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_ip.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := csfnu.mutation.CircleRefsForHallTicketIPIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   circlesummaryforno.CircleRefsForHallTicketIPTable,
			Columns: []string{circlesummaryforno.CircleRefsForHallTicketIPColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_ip.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if csfnu.mutation.CircleRefsForHallTicketPSCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   circlesummaryforno.CircleRefsForHallTicketPSTable,
			Columns: []string{circlesummaryforno.CircleRefsForHallTicketPSColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_ps.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := csfnu.mutation.RemovedCircleRefsForHallTicketPSIDs(); len(nodes) > 0 && !csfnu.mutation.CircleRefsForHallTicketPSCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   circlesummaryforno.CircleRefsForHallTicketPSTable,
			Columns: []string{circlesummaryforno.CircleRefsForHallTicketPSColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_ps.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := csfnu.mutation.CircleRefsForHallTicketPSIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   circlesummaryforno.CircleRefsForHallTicketPSTable,
			Columns: []string{circlesummaryforno.CircleRefsForHallTicketPSColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_ps.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if csfnu.mutation.CircleRefsForHallTicketGDSPACleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   circlesummaryforno.CircleRefsForHallTicketGDSPATable,
			Columns: []string{circlesummaryforno.CircleRefsForHallTicketGDSPAColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_gdspa.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := csfnu.mutation.RemovedCircleRefsForHallTicketGDSPAIDs(); len(nodes) > 0 && !csfnu.mutation.CircleRefsForHallTicketGDSPACleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   circlesummaryforno.CircleRefsForHallTicketGDSPATable,
			Columns: []string{circlesummaryforno.CircleRefsForHallTicketGDSPAColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_gdspa.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := csfnu.mutation.CircleRefsForHallTicketGDSPAIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   circlesummaryforno.CircleRefsForHallTicketGDSPATable,
			Columns: []string{circlesummaryforno.CircleRefsForHallTicketGDSPAColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_gdspa.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if csfnu.mutation.CircleRefsForHallTicketGDSPMCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   circlesummaryforno.CircleRefsForHallTicketGDSPMTable,
			Columns: []string{circlesummaryforno.CircleRefsForHallTicketGDSPMColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_gdspm.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := csfnu.mutation.RemovedCircleRefsForHallTicketGDSPMIDs(); len(nodes) > 0 && !csfnu.mutation.CircleRefsForHallTicketGDSPMCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   circlesummaryforno.CircleRefsForHallTicketGDSPMTable,
			Columns: []string{circlesummaryforno.CircleRefsForHallTicketGDSPMColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_gdspm.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := csfnu.mutation.CircleRefsForHallTicketGDSPMIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   circlesummaryforno.CircleRefsForHallTicketGDSPMTable,
			Columns: []string{circlesummaryforno.CircleRefsForHallTicketGDSPMColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_gdspm.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if csfnu.mutation.CircleRefsForHallTicketPMPACleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   circlesummaryforno.CircleRefsForHallTicketPMPATable,
			Columns: []string{circlesummaryforno.CircleRefsForHallTicketPMPAColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_pmpa.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := csfnu.mutation.RemovedCircleRefsForHallTicketPMPAIDs(); len(nodes) > 0 && !csfnu.mutation.CircleRefsForHallTicketPMPACleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   circlesummaryforno.CircleRefsForHallTicketPMPATable,
			Columns: []string{circlesummaryforno.CircleRefsForHallTicketPMPAColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_pmpa.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := csfnu.mutation.CircleRefsForHallTicketPMPAIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   circlesummaryforno.CircleRefsForHallTicketPMPATable,
			Columns: []string{circlesummaryforno.CircleRefsForHallTicketPMPAColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_pmpa.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if csfnu.mutation.CircleRefsForHallTicketMTSPMMGCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   circlesummaryforno.CircleRefsForHallTicketMTSPMMGTable,
			Columns: []string{circlesummaryforno.CircleRefsForHallTicketMTSPMMGColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_application_mtspmmg.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := csfnu.mutation.RemovedCircleRefsForHallTicketMTSPMMGIDs(); len(nodes) > 0 && !csfnu.mutation.CircleRefsForHallTicketMTSPMMGCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   circlesummaryforno.CircleRefsForHallTicketMTSPMMGTable,
			Columns: []string{circlesummaryforno.CircleRefsForHallTicketMTSPMMGColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_application_mtspmmg.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := csfnu.mutation.CircleRefsForHallTicketMTSPMMGIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   circlesummaryforno.CircleRefsForHallTicketMTSPMMGTable,
			Columns: []string{circlesummaryforno.CircleRefsForHallTicketMTSPMMGColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_application_mtspmmg.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, csfnu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{circlesummaryforno.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	csfnu.mutation.done = true
	return n, nil
}

// CircleSummaryForNOUpdateOne is the builder for updating a single CircleSummaryForNO entity.
type CircleSummaryForNOUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CircleSummaryForNOMutation
}

// SetCircleOfficeId sets the "CircleOfficeId" field.
func (csfnuo *CircleSummaryForNOUpdateOne) SetCircleOfficeId(s string) *CircleSummaryForNOUpdateOne {
	csfnuo.mutation.SetCircleOfficeId(s)
	return csfnuo
}

// SetCircleOfficeName sets the "CircleOfficeName" field.
func (csfnuo *CircleSummaryForNOUpdateOne) SetCircleOfficeName(s string) *CircleSummaryForNOUpdateOne {
	csfnuo.mutation.SetCircleOfficeName(s)
	return csfnuo
}

// SetApproveHallTicketGenrationIP sets the "ApproveHallTicketGenrationIP" field.
func (csfnuo *CircleSummaryForNOUpdateOne) SetApproveHallTicketGenrationIP(b bool) *CircleSummaryForNOUpdateOne {
	csfnuo.mutation.SetApproveHallTicketGenrationIP(b)
	return csfnuo
}

// SetNillableApproveHallTicketGenrationIP sets the "ApproveHallTicketGenrationIP" field if the given value is not nil.
func (csfnuo *CircleSummaryForNOUpdateOne) SetNillableApproveHallTicketGenrationIP(b *bool) *CircleSummaryForNOUpdateOne {
	if b != nil {
		csfnuo.SetApproveHallTicketGenrationIP(*b)
	}
	return csfnuo
}

// ClearApproveHallTicketGenrationIP clears the value of the "ApproveHallTicketGenrationIP" field.
func (csfnuo *CircleSummaryForNOUpdateOne) ClearApproveHallTicketGenrationIP() *CircleSummaryForNOUpdateOne {
	csfnuo.mutation.ClearApproveHallTicketGenrationIP()
	return csfnuo
}

// SetApproveHallTicketGenrationPS sets the "ApproveHallTicketGenrationPS" field.
func (csfnuo *CircleSummaryForNOUpdateOne) SetApproveHallTicketGenrationPS(b bool) *CircleSummaryForNOUpdateOne {
	csfnuo.mutation.SetApproveHallTicketGenrationPS(b)
	return csfnuo
}

// SetNillableApproveHallTicketGenrationPS sets the "ApproveHallTicketGenrationPS" field if the given value is not nil.
func (csfnuo *CircleSummaryForNOUpdateOne) SetNillableApproveHallTicketGenrationPS(b *bool) *CircleSummaryForNOUpdateOne {
	if b != nil {
		csfnuo.SetApproveHallTicketGenrationPS(*b)
	}
	return csfnuo
}

// ClearApproveHallTicketGenrationPS clears the value of the "ApproveHallTicketGenrationPS" field.
func (csfnuo *CircleSummaryForNOUpdateOne) ClearApproveHallTicketGenrationPS() *CircleSummaryForNOUpdateOne {
	csfnuo.mutation.ClearApproveHallTicketGenrationPS()
	return csfnuo
}

// SetApproveHallTicketGenrationPM sets the "ApproveHallTicketGenrationPM" field.
func (csfnuo *CircleSummaryForNOUpdateOne) SetApproveHallTicketGenrationPM(b bool) *CircleSummaryForNOUpdateOne {
	csfnuo.mutation.SetApproveHallTicketGenrationPM(b)
	return csfnuo
}

// SetNillableApproveHallTicketGenrationPM sets the "ApproveHallTicketGenrationPM" field if the given value is not nil.
func (csfnuo *CircleSummaryForNOUpdateOne) SetNillableApproveHallTicketGenrationPM(b *bool) *CircleSummaryForNOUpdateOne {
	if b != nil {
		csfnuo.SetApproveHallTicketGenrationPM(*b)
	}
	return csfnuo
}

// ClearApproveHallTicketGenrationPM clears the value of the "ApproveHallTicketGenrationPM" field.
func (csfnuo *CircleSummaryForNOUpdateOne) ClearApproveHallTicketGenrationPM() *CircleSummaryForNOUpdateOne {
	csfnuo.mutation.ClearApproveHallTicketGenrationPM()
	return csfnuo
}

// SetApproveHallTicketGenrationPA sets the "ApproveHallTicketGenrationPA" field.
func (csfnuo *CircleSummaryForNOUpdateOne) SetApproveHallTicketGenrationPA(b bool) *CircleSummaryForNOUpdateOne {
	csfnuo.mutation.SetApproveHallTicketGenrationPA(b)
	return csfnuo
}

// SetNillableApproveHallTicketGenrationPA sets the "ApproveHallTicketGenrationPA" field if the given value is not nil.
func (csfnuo *CircleSummaryForNOUpdateOne) SetNillableApproveHallTicketGenrationPA(b *bool) *CircleSummaryForNOUpdateOne {
	if b != nil {
		csfnuo.SetApproveHallTicketGenrationPA(*b)
	}
	return csfnuo
}

// ClearApproveHallTicketGenrationPA clears the value of the "ApproveHallTicketGenrationPA" field.
func (csfnuo *CircleSummaryForNOUpdateOne) ClearApproveHallTicketGenrationPA() *CircleSummaryForNOUpdateOne {
	csfnuo.mutation.ClearApproveHallTicketGenrationPA()
	return csfnuo
}

// AddCircleuserIDs adds the "circleusers" edge to the UserMaster entity by IDs.
func (csfnuo *CircleSummaryForNOUpdateOne) AddCircleuserIDs(ids ...int64) *CircleSummaryForNOUpdateOne {
	csfnuo.mutation.AddCircleuserIDs(ids...)
	return csfnuo
}

// AddCircleusers adds the "circleusers" edges to the UserMaster entity.
func (csfnuo *CircleSummaryForNOUpdateOne) AddCircleusers(u ...*UserMaster) *CircleSummaryForNOUpdateOne {
	ids := make([]int64, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return csfnuo.AddCircleuserIDs(ids...)
}

// AddCircleRefsForHallTicketIPIDs adds the "CircleRefsForHallTicketIP" edge to the Exam_Applications_IP entity by IDs.
func (csfnuo *CircleSummaryForNOUpdateOne) AddCircleRefsForHallTicketIPIDs(ids ...int64) *CircleSummaryForNOUpdateOne {
	csfnuo.mutation.AddCircleRefsForHallTicketIPIDs(ids...)
	return csfnuo
}

// AddCircleRefsForHallTicketIP adds the "CircleRefsForHallTicketIP" edges to the Exam_Applications_IP entity.
func (csfnuo *CircleSummaryForNOUpdateOne) AddCircleRefsForHallTicketIP(e ...*Exam_Applications_IP) *CircleSummaryForNOUpdateOne {
	ids := make([]int64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return csfnuo.AddCircleRefsForHallTicketIPIDs(ids...)
}

// AddCircleRefsForHallTicketPSIDs adds the "CircleRefsForHallTicketPS" edge to the Exam_Applications_PS entity by IDs.
func (csfnuo *CircleSummaryForNOUpdateOne) AddCircleRefsForHallTicketPSIDs(ids ...int64) *CircleSummaryForNOUpdateOne {
	csfnuo.mutation.AddCircleRefsForHallTicketPSIDs(ids...)
	return csfnuo
}

// AddCircleRefsForHallTicketPS adds the "CircleRefsForHallTicketPS" edges to the Exam_Applications_PS entity.
func (csfnuo *CircleSummaryForNOUpdateOne) AddCircleRefsForHallTicketPS(e ...*Exam_Applications_PS) *CircleSummaryForNOUpdateOne {
	ids := make([]int64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return csfnuo.AddCircleRefsForHallTicketPSIDs(ids...)
}

// AddCircleRefsForHallTicketGDSPAIDs adds the "CircleRefsForHallTicketGDSPA" edge to the Exam_Applications_GDSPA entity by IDs.
func (csfnuo *CircleSummaryForNOUpdateOne) AddCircleRefsForHallTicketGDSPAIDs(ids ...int64) *CircleSummaryForNOUpdateOne {
	csfnuo.mutation.AddCircleRefsForHallTicketGDSPAIDs(ids...)
	return csfnuo
}

// AddCircleRefsForHallTicketGDSPA adds the "CircleRefsForHallTicketGDSPA" edges to the Exam_Applications_GDSPA entity.
func (csfnuo *CircleSummaryForNOUpdateOne) AddCircleRefsForHallTicketGDSPA(e ...*Exam_Applications_GDSPA) *CircleSummaryForNOUpdateOne {
	ids := make([]int64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return csfnuo.AddCircleRefsForHallTicketGDSPAIDs(ids...)
}

// AddCircleRefsForHallTicketGDSPMIDs adds the "CircleRefsForHallTicketGDSPM" edge to the Exam_Applications_GDSPM entity by IDs.
func (csfnuo *CircleSummaryForNOUpdateOne) AddCircleRefsForHallTicketGDSPMIDs(ids ...int64) *CircleSummaryForNOUpdateOne {
	csfnuo.mutation.AddCircleRefsForHallTicketGDSPMIDs(ids...)
	return csfnuo
}

// AddCircleRefsForHallTicketGDSPM adds the "CircleRefsForHallTicketGDSPM" edges to the Exam_Applications_GDSPM entity.
func (csfnuo *CircleSummaryForNOUpdateOne) AddCircleRefsForHallTicketGDSPM(e ...*Exam_Applications_GDSPM) *CircleSummaryForNOUpdateOne {
	ids := make([]int64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return csfnuo.AddCircleRefsForHallTicketGDSPMIDs(ids...)
}

// AddCircleRefsForHallTicketPMPAIDs adds the "CircleRefsForHallTicketPMPA" edge to the Exam_Applications_PMPA entity by IDs.
func (csfnuo *CircleSummaryForNOUpdateOne) AddCircleRefsForHallTicketPMPAIDs(ids ...int64) *CircleSummaryForNOUpdateOne {
	csfnuo.mutation.AddCircleRefsForHallTicketPMPAIDs(ids...)
	return csfnuo
}

// AddCircleRefsForHallTicketPMPA adds the "CircleRefsForHallTicketPMPA" edges to the Exam_Applications_PMPA entity.
func (csfnuo *CircleSummaryForNOUpdateOne) AddCircleRefsForHallTicketPMPA(e ...*Exam_Applications_PMPA) *CircleSummaryForNOUpdateOne {
	ids := make([]int64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return csfnuo.AddCircleRefsForHallTicketPMPAIDs(ids...)
}

// AddCircleRefsForHallTicketMTSPMMGIDs adds the "CircleRefsForHallTicketMTSPMMG" edge to the Exam_Application_MTSPMMG entity by IDs.
func (csfnuo *CircleSummaryForNOUpdateOne) AddCircleRefsForHallTicketMTSPMMGIDs(ids ...int64) *CircleSummaryForNOUpdateOne {
	csfnuo.mutation.AddCircleRefsForHallTicketMTSPMMGIDs(ids...)
	return csfnuo
}

// AddCircleRefsForHallTicketMTSPMMG adds the "CircleRefsForHallTicketMTSPMMG" edges to the Exam_Application_MTSPMMG entity.
func (csfnuo *CircleSummaryForNOUpdateOne) AddCircleRefsForHallTicketMTSPMMG(e ...*Exam_Application_MTSPMMG) *CircleSummaryForNOUpdateOne {
	ids := make([]int64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return csfnuo.AddCircleRefsForHallTicketMTSPMMGIDs(ids...)
}

// Mutation returns the CircleSummaryForNOMutation object of the builder.
func (csfnuo *CircleSummaryForNOUpdateOne) Mutation() *CircleSummaryForNOMutation {
	return csfnuo.mutation
}

// ClearCircleusers clears all "circleusers" edges to the UserMaster entity.
func (csfnuo *CircleSummaryForNOUpdateOne) ClearCircleusers() *CircleSummaryForNOUpdateOne {
	csfnuo.mutation.ClearCircleusers()
	return csfnuo
}

// RemoveCircleuserIDs removes the "circleusers" edge to UserMaster entities by IDs.
func (csfnuo *CircleSummaryForNOUpdateOne) RemoveCircleuserIDs(ids ...int64) *CircleSummaryForNOUpdateOne {
	csfnuo.mutation.RemoveCircleuserIDs(ids...)
	return csfnuo
}

// RemoveCircleusers removes "circleusers" edges to UserMaster entities.
func (csfnuo *CircleSummaryForNOUpdateOne) RemoveCircleusers(u ...*UserMaster) *CircleSummaryForNOUpdateOne {
	ids := make([]int64, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return csfnuo.RemoveCircleuserIDs(ids...)
}

// ClearCircleRefsForHallTicketIP clears all "CircleRefsForHallTicketIP" edges to the Exam_Applications_IP entity.
func (csfnuo *CircleSummaryForNOUpdateOne) ClearCircleRefsForHallTicketIP() *CircleSummaryForNOUpdateOne {
	csfnuo.mutation.ClearCircleRefsForHallTicketIP()
	return csfnuo
}

// RemoveCircleRefsForHallTicketIPIDs removes the "CircleRefsForHallTicketIP" edge to Exam_Applications_IP entities by IDs.
func (csfnuo *CircleSummaryForNOUpdateOne) RemoveCircleRefsForHallTicketIPIDs(ids ...int64) *CircleSummaryForNOUpdateOne {
	csfnuo.mutation.RemoveCircleRefsForHallTicketIPIDs(ids...)
	return csfnuo
}

// RemoveCircleRefsForHallTicketIP removes "CircleRefsForHallTicketIP" edges to Exam_Applications_IP entities.
func (csfnuo *CircleSummaryForNOUpdateOne) RemoveCircleRefsForHallTicketIP(e ...*Exam_Applications_IP) *CircleSummaryForNOUpdateOne {
	ids := make([]int64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return csfnuo.RemoveCircleRefsForHallTicketIPIDs(ids...)
}

// ClearCircleRefsForHallTicketPS clears all "CircleRefsForHallTicketPS" edges to the Exam_Applications_PS entity.
func (csfnuo *CircleSummaryForNOUpdateOne) ClearCircleRefsForHallTicketPS() *CircleSummaryForNOUpdateOne {
	csfnuo.mutation.ClearCircleRefsForHallTicketPS()
	return csfnuo
}

// RemoveCircleRefsForHallTicketPSIDs removes the "CircleRefsForHallTicketPS" edge to Exam_Applications_PS entities by IDs.
func (csfnuo *CircleSummaryForNOUpdateOne) RemoveCircleRefsForHallTicketPSIDs(ids ...int64) *CircleSummaryForNOUpdateOne {
	csfnuo.mutation.RemoveCircleRefsForHallTicketPSIDs(ids...)
	return csfnuo
}

// RemoveCircleRefsForHallTicketPS removes "CircleRefsForHallTicketPS" edges to Exam_Applications_PS entities.
func (csfnuo *CircleSummaryForNOUpdateOne) RemoveCircleRefsForHallTicketPS(e ...*Exam_Applications_PS) *CircleSummaryForNOUpdateOne {
	ids := make([]int64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return csfnuo.RemoveCircleRefsForHallTicketPSIDs(ids...)
}

// ClearCircleRefsForHallTicketGDSPA clears all "CircleRefsForHallTicketGDSPA" edges to the Exam_Applications_GDSPA entity.
func (csfnuo *CircleSummaryForNOUpdateOne) ClearCircleRefsForHallTicketGDSPA() *CircleSummaryForNOUpdateOne {
	csfnuo.mutation.ClearCircleRefsForHallTicketGDSPA()
	return csfnuo
}

// RemoveCircleRefsForHallTicketGDSPAIDs removes the "CircleRefsForHallTicketGDSPA" edge to Exam_Applications_GDSPA entities by IDs.
func (csfnuo *CircleSummaryForNOUpdateOne) RemoveCircleRefsForHallTicketGDSPAIDs(ids ...int64) *CircleSummaryForNOUpdateOne {
	csfnuo.mutation.RemoveCircleRefsForHallTicketGDSPAIDs(ids...)
	return csfnuo
}

// RemoveCircleRefsForHallTicketGDSPA removes "CircleRefsForHallTicketGDSPA" edges to Exam_Applications_GDSPA entities.
func (csfnuo *CircleSummaryForNOUpdateOne) RemoveCircleRefsForHallTicketGDSPA(e ...*Exam_Applications_GDSPA) *CircleSummaryForNOUpdateOne {
	ids := make([]int64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return csfnuo.RemoveCircleRefsForHallTicketGDSPAIDs(ids...)
}

// ClearCircleRefsForHallTicketGDSPM clears all "CircleRefsForHallTicketGDSPM" edges to the Exam_Applications_GDSPM entity.
func (csfnuo *CircleSummaryForNOUpdateOne) ClearCircleRefsForHallTicketGDSPM() *CircleSummaryForNOUpdateOne {
	csfnuo.mutation.ClearCircleRefsForHallTicketGDSPM()
	return csfnuo
}

// RemoveCircleRefsForHallTicketGDSPMIDs removes the "CircleRefsForHallTicketGDSPM" edge to Exam_Applications_GDSPM entities by IDs.
func (csfnuo *CircleSummaryForNOUpdateOne) RemoveCircleRefsForHallTicketGDSPMIDs(ids ...int64) *CircleSummaryForNOUpdateOne {
	csfnuo.mutation.RemoveCircleRefsForHallTicketGDSPMIDs(ids...)
	return csfnuo
}

// RemoveCircleRefsForHallTicketGDSPM removes "CircleRefsForHallTicketGDSPM" edges to Exam_Applications_GDSPM entities.
func (csfnuo *CircleSummaryForNOUpdateOne) RemoveCircleRefsForHallTicketGDSPM(e ...*Exam_Applications_GDSPM) *CircleSummaryForNOUpdateOne {
	ids := make([]int64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return csfnuo.RemoveCircleRefsForHallTicketGDSPMIDs(ids...)
}

// ClearCircleRefsForHallTicketPMPA clears all "CircleRefsForHallTicketPMPA" edges to the Exam_Applications_PMPA entity.
func (csfnuo *CircleSummaryForNOUpdateOne) ClearCircleRefsForHallTicketPMPA() *CircleSummaryForNOUpdateOne {
	csfnuo.mutation.ClearCircleRefsForHallTicketPMPA()
	return csfnuo
}

// RemoveCircleRefsForHallTicketPMPAIDs removes the "CircleRefsForHallTicketPMPA" edge to Exam_Applications_PMPA entities by IDs.
func (csfnuo *CircleSummaryForNOUpdateOne) RemoveCircleRefsForHallTicketPMPAIDs(ids ...int64) *CircleSummaryForNOUpdateOne {
	csfnuo.mutation.RemoveCircleRefsForHallTicketPMPAIDs(ids...)
	return csfnuo
}

// RemoveCircleRefsForHallTicketPMPA removes "CircleRefsForHallTicketPMPA" edges to Exam_Applications_PMPA entities.
func (csfnuo *CircleSummaryForNOUpdateOne) RemoveCircleRefsForHallTicketPMPA(e ...*Exam_Applications_PMPA) *CircleSummaryForNOUpdateOne {
	ids := make([]int64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return csfnuo.RemoveCircleRefsForHallTicketPMPAIDs(ids...)
}

// ClearCircleRefsForHallTicketMTSPMMG clears all "CircleRefsForHallTicketMTSPMMG" edges to the Exam_Application_MTSPMMG entity.
func (csfnuo *CircleSummaryForNOUpdateOne) ClearCircleRefsForHallTicketMTSPMMG() *CircleSummaryForNOUpdateOne {
	csfnuo.mutation.ClearCircleRefsForHallTicketMTSPMMG()
	return csfnuo
}

// RemoveCircleRefsForHallTicketMTSPMMGIDs removes the "CircleRefsForHallTicketMTSPMMG" edge to Exam_Application_MTSPMMG entities by IDs.
func (csfnuo *CircleSummaryForNOUpdateOne) RemoveCircleRefsForHallTicketMTSPMMGIDs(ids ...int64) *CircleSummaryForNOUpdateOne {
	csfnuo.mutation.RemoveCircleRefsForHallTicketMTSPMMGIDs(ids...)
	return csfnuo
}

// RemoveCircleRefsForHallTicketMTSPMMG removes "CircleRefsForHallTicketMTSPMMG" edges to Exam_Application_MTSPMMG entities.
func (csfnuo *CircleSummaryForNOUpdateOne) RemoveCircleRefsForHallTicketMTSPMMG(e ...*Exam_Application_MTSPMMG) *CircleSummaryForNOUpdateOne {
	ids := make([]int64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return csfnuo.RemoveCircleRefsForHallTicketMTSPMMGIDs(ids...)
}

// Where appends a list predicates to the CircleSummaryForNOUpdate builder.
func (csfnuo *CircleSummaryForNOUpdateOne) Where(ps ...predicate.CircleSummaryForNO) *CircleSummaryForNOUpdateOne {
	csfnuo.mutation.Where(ps...)
	return csfnuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (csfnuo *CircleSummaryForNOUpdateOne) Select(field string, fields ...string) *CircleSummaryForNOUpdateOne {
	csfnuo.fields = append([]string{field}, fields...)
	return csfnuo
}

// Save executes the query and returns the updated CircleSummaryForNO entity.
func (csfnuo *CircleSummaryForNOUpdateOne) Save(ctx context.Context) (*CircleSummaryForNO, error) {
	return withHooks(ctx, csfnuo.sqlSave, csfnuo.mutation, csfnuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (csfnuo *CircleSummaryForNOUpdateOne) SaveX(ctx context.Context) *CircleSummaryForNO {
	node, err := csfnuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (csfnuo *CircleSummaryForNOUpdateOne) Exec(ctx context.Context) error {
	_, err := csfnuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (csfnuo *CircleSummaryForNOUpdateOne) ExecX(ctx context.Context) {
	if err := csfnuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (csfnuo *CircleSummaryForNOUpdateOne) sqlSave(ctx context.Context) (_node *CircleSummaryForNO, err error) {
	_spec := sqlgraph.NewUpdateSpec(circlesummaryforno.Table, circlesummaryforno.Columns, sqlgraph.NewFieldSpec(circlesummaryforno.FieldID, field.TypeInt32))
	id, ok := csfnuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "CircleSummaryForNO.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := csfnuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, circlesummaryforno.FieldID)
		for _, f := range fields {
			if !circlesummaryforno.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != circlesummaryforno.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := csfnuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := csfnuo.mutation.CircleOfficeId(); ok {
		_spec.SetField(circlesummaryforno.FieldCircleOfficeId, field.TypeString, value)
	}
	if value, ok := csfnuo.mutation.CircleOfficeName(); ok {
		_spec.SetField(circlesummaryforno.FieldCircleOfficeName, field.TypeString, value)
	}
	if value, ok := csfnuo.mutation.ApproveHallTicketGenrationIP(); ok {
		_spec.SetField(circlesummaryforno.FieldApproveHallTicketGenrationIP, field.TypeBool, value)
	}
	if csfnuo.mutation.ApproveHallTicketGenrationIPCleared() {
		_spec.ClearField(circlesummaryforno.FieldApproveHallTicketGenrationIP, field.TypeBool)
	}
	if value, ok := csfnuo.mutation.ApproveHallTicketGenrationPS(); ok {
		_spec.SetField(circlesummaryforno.FieldApproveHallTicketGenrationPS, field.TypeBool, value)
	}
	if csfnuo.mutation.ApproveHallTicketGenrationPSCleared() {
		_spec.ClearField(circlesummaryforno.FieldApproveHallTicketGenrationPS, field.TypeBool)
	}
	if value, ok := csfnuo.mutation.ApproveHallTicketGenrationPM(); ok {
		_spec.SetField(circlesummaryforno.FieldApproveHallTicketGenrationPM, field.TypeBool, value)
	}
	if csfnuo.mutation.ApproveHallTicketGenrationPMCleared() {
		_spec.ClearField(circlesummaryforno.FieldApproveHallTicketGenrationPM, field.TypeBool)
	}
	if value, ok := csfnuo.mutation.ApproveHallTicketGenrationPA(); ok {
		_spec.SetField(circlesummaryforno.FieldApproveHallTicketGenrationPA, field.TypeBool, value)
	}
	if csfnuo.mutation.ApproveHallTicketGenrationPACleared() {
		_spec.ClearField(circlesummaryforno.FieldApproveHallTicketGenrationPA, field.TypeBool)
	}
	if csfnuo.mutation.CircleusersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   circlesummaryforno.CircleusersTable,
			Columns: []string{circlesummaryforno.CircleusersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usermaster.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := csfnuo.mutation.RemovedCircleusersIDs(); len(nodes) > 0 && !csfnuo.mutation.CircleusersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   circlesummaryforno.CircleusersTable,
			Columns: []string{circlesummaryforno.CircleusersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usermaster.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := csfnuo.mutation.CircleusersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   circlesummaryforno.CircleusersTable,
			Columns: []string{circlesummaryforno.CircleusersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usermaster.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if csfnuo.mutation.CircleRefsForHallTicketIPCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   circlesummaryforno.CircleRefsForHallTicketIPTable,
			Columns: []string{circlesummaryforno.CircleRefsForHallTicketIPColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_ip.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := csfnuo.mutation.RemovedCircleRefsForHallTicketIPIDs(); len(nodes) > 0 && !csfnuo.mutation.CircleRefsForHallTicketIPCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   circlesummaryforno.CircleRefsForHallTicketIPTable,
			Columns: []string{circlesummaryforno.CircleRefsForHallTicketIPColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_ip.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := csfnuo.mutation.CircleRefsForHallTicketIPIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   circlesummaryforno.CircleRefsForHallTicketIPTable,
			Columns: []string{circlesummaryforno.CircleRefsForHallTicketIPColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_ip.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if csfnuo.mutation.CircleRefsForHallTicketPSCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   circlesummaryforno.CircleRefsForHallTicketPSTable,
			Columns: []string{circlesummaryforno.CircleRefsForHallTicketPSColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_ps.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := csfnuo.mutation.RemovedCircleRefsForHallTicketPSIDs(); len(nodes) > 0 && !csfnuo.mutation.CircleRefsForHallTicketPSCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   circlesummaryforno.CircleRefsForHallTicketPSTable,
			Columns: []string{circlesummaryforno.CircleRefsForHallTicketPSColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_ps.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := csfnuo.mutation.CircleRefsForHallTicketPSIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   circlesummaryforno.CircleRefsForHallTicketPSTable,
			Columns: []string{circlesummaryforno.CircleRefsForHallTicketPSColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_ps.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if csfnuo.mutation.CircleRefsForHallTicketGDSPACleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   circlesummaryforno.CircleRefsForHallTicketGDSPATable,
			Columns: []string{circlesummaryforno.CircleRefsForHallTicketGDSPAColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_gdspa.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := csfnuo.mutation.RemovedCircleRefsForHallTicketGDSPAIDs(); len(nodes) > 0 && !csfnuo.mutation.CircleRefsForHallTicketGDSPACleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   circlesummaryforno.CircleRefsForHallTicketGDSPATable,
			Columns: []string{circlesummaryforno.CircleRefsForHallTicketGDSPAColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_gdspa.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := csfnuo.mutation.CircleRefsForHallTicketGDSPAIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   circlesummaryforno.CircleRefsForHallTicketGDSPATable,
			Columns: []string{circlesummaryforno.CircleRefsForHallTicketGDSPAColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_gdspa.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if csfnuo.mutation.CircleRefsForHallTicketGDSPMCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   circlesummaryforno.CircleRefsForHallTicketGDSPMTable,
			Columns: []string{circlesummaryforno.CircleRefsForHallTicketGDSPMColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_gdspm.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := csfnuo.mutation.RemovedCircleRefsForHallTicketGDSPMIDs(); len(nodes) > 0 && !csfnuo.mutation.CircleRefsForHallTicketGDSPMCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   circlesummaryforno.CircleRefsForHallTicketGDSPMTable,
			Columns: []string{circlesummaryforno.CircleRefsForHallTicketGDSPMColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_gdspm.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := csfnuo.mutation.CircleRefsForHallTicketGDSPMIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   circlesummaryforno.CircleRefsForHallTicketGDSPMTable,
			Columns: []string{circlesummaryforno.CircleRefsForHallTicketGDSPMColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_gdspm.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if csfnuo.mutation.CircleRefsForHallTicketPMPACleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   circlesummaryforno.CircleRefsForHallTicketPMPATable,
			Columns: []string{circlesummaryforno.CircleRefsForHallTicketPMPAColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_pmpa.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := csfnuo.mutation.RemovedCircleRefsForHallTicketPMPAIDs(); len(nodes) > 0 && !csfnuo.mutation.CircleRefsForHallTicketPMPACleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   circlesummaryforno.CircleRefsForHallTicketPMPATable,
			Columns: []string{circlesummaryforno.CircleRefsForHallTicketPMPAColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_pmpa.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := csfnuo.mutation.CircleRefsForHallTicketPMPAIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   circlesummaryforno.CircleRefsForHallTicketPMPATable,
			Columns: []string{circlesummaryforno.CircleRefsForHallTicketPMPAColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_pmpa.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if csfnuo.mutation.CircleRefsForHallTicketMTSPMMGCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   circlesummaryforno.CircleRefsForHallTicketMTSPMMGTable,
			Columns: []string{circlesummaryforno.CircleRefsForHallTicketMTSPMMGColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_application_mtspmmg.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := csfnuo.mutation.RemovedCircleRefsForHallTicketMTSPMMGIDs(); len(nodes) > 0 && !csfnuo.mutation.CircleRefsForHallTicketMTSPMMGCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   circlesummaryforno.CircleRefsForHallTicketMTSPMMGTable,
			Columns: []string{circlesummaryforno.CircleRefsForHallTicketMTSPMMGColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_application_mtspmmg.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := csfnuo.mutation.CircleRefsForHallTicketMTSPMMGIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   circlesummaryforno.CircleRefsForHallTicketMTSPMMGTable,
			Columns: []string{circlesummaryforno.CircleRefsForHallTicketMTSPMMGColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_application_mtspmmg.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &CircleSummaryForNO{config: csfnuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, csfnuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{circlesummaryforno.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	csfnuo.mutation.done = true
	return _node, nil
}
