// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"recruit/ent/errorlogs"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ErrorLogsCreate is the builder for creating a ErrorLogs entity.
type ErrorLogsCreate struct {
	config
	mutation *ErrorLogsMutation
	hooks    []Hook
}

// SetUserid sets the "userid" field.
func (elc *ErrorLogsCreate) SetUserid(s string) *ErrorLogsCreate {
	elc.mutation.SetUserid(s)
	return elc
}

// SetNillableUserid sets the "userid" field if the given value is not nil.
func (elc *ErrorLogsCreate) SetNillableUserid(s *string) *ErrorLogsCreate {
	if s != nil {
		elc.SetUserid(*s)
	}
	return elc
}

// SetUniqueid sets the "uniqueid" field.
func (elc *ErrorLogsCreate) SetUniqueid(i int64) *ErrorLogsCreate {
	elc.mutation.SetUniqueid(i)
	return elc
}

// SetNillableUniqueid sets the "uniqueid" field if the given value is not nil.
func (elc *ErrorLogsCreate) SetNillableUniqueid(i *int64) *ErrorLogsCreate {
	if i != nil {
		elc.SetUniqueid(*i)
	}
	return elc
}

// SetUsertype sets the "usertype" field.
func (elc *ErrorLogsCreate) SetUsertype(s string) *ErrorLogsCreate {
	elc.mutation.SetUsertype(s)
	return elc
}

// SetNillableUsertype sets the "usertype" field if the given value is not nil.
func (elc *ErrorLogsCreate) SetNillableUsertype(s *string) *ErrorLogsCreate {
	if s != nil {
		elc.SetUsertype(*s)
	}
	return elc
}

// SetUserdetails sets the "userdetails" field.
func (elc *ErrorLogsCreate) SetUserdetails(s string) *ErrorLogsCreate {
	elc.mutation.SetUserdetails(s)
	return elc
}

// SetNillableUserdetails sets the "userdetails" field if the given value is not nil.
func (elc *ErrorLogsCreate) SetNillableUserdetails(s *string) *ErrorLogsCreate {
	if s != nil {
		elc.SetUserdetails(*s)
	}
	return elc
}

// SetRemarks sets the "remarks" field.
func (elc *ErrorLogsCreate) SetRemarks(s string) *ErrorLogsCreate {
	elc.mutation.SetRemarks(s)
	return elc
}

// SetNillableRemarks sets the "remarks" field if the given value is not nil.
func (elc *ErrorLogsCreate) SetNillableRemarks(s *string) *ErrorLogsCreate {
	if s != nil {
		elc.SetRemarks(*s)
	}
	return elc
}

// SetAction sets the "action" field.
func (elc *ErrorLogsCreate) SetAction(s string) *ErrorLogsCreate {
	elc.mutation.SetAction(s)
	return elc
}

// SetNillableAction sets the "action" field if the given value is not nil.
func (elc *ErrorLogsCreate) SetNillableAction(s *string) *ErrorLogsCreate {
	if s != nil {
		elc.SetAction(*s)
	}
	return elc
}

// SetIpaddress sets the "ipaddress" field.
func (elc *ErrorLogsCreate) SetIpaddress(s string) *ErrorLogsCreate {
	elc.mutation.SetIpaddress(s)
	return elc
}

// SetNillableIpaddress sets the "ipaddress" field if the given value is not nil.
func (elc *ErrorLogsCreate) SetNillableIpaddress(s *string) *ErrorLogsCreate {
	if s != nil {
		elc.SetIpaddress(*s)
	}
	return elc
}

// SetDevicetype sets the "devicetype" field.
func (elc *ErrorLogsCreate) SetDevicetype(s string) *ErrorLogsCreate {
	elc.mutation.SetDevicetype(s)
	return elc
}

// SetNillableDevicetype sets the "devicetype" field if the given value is not nil.
func (elc *ErrorLogsCreate) SetNillableDevicetype(s *string) *ErrorLogsCreate {
	if s != nil {
		elc.SetDevicetype(*s)
	}
	return elc
}

// SetOs sets the "os" field.
func (elc *ErrorLogsCreate) SetOs(s string) *ErrorLogsCreate {
	elc.mutation.SetOs(s)
	return elc
}

// SetNillableOs sets the "os" field if the given value is not nil.
func (elc *ErrorLogsCreate) SetNillableOs(s *string) *ErrorLogsCreate {
	if s != nil {
		elc.SetOs(*s)
	}
	return elc
}

// SetBrowser sets the "browser" field.
func (elc *ErrorLogsCreate) SetBrowser(s string) *ErrorLogsCreate {
	elc.mutation.SetBrowser(s)
	return elc
}

// SetNillableBrowser sets the "browser" field if the given value is not nil.
func (elc *ErrorLogsCreate) SetNillableBrowser(s *string) *ErrorLogsCreate {
	if s != nil {
		elc.SetBrowser(*s)
	}
	return elc
}

// SetLatitude sets the "latitude" field.
func (elc *ErrorLogsCreate) SetLatitude(f float64) *ErrorLogsCreate {
	elc.mutation.SetLatitude(f)
	return elc
}

// SetNillableLatitude sets the "latitude" field if the given value is not nil.
func (elc *ErrorLogsCreate) SetNillableLatitude(f *float64) *ErrorLogsCreate {
	if f != nil {
		elc.SetLatitude(*f)
	}
	return elc
}

// SetLongitude sets the "longitude" field.
func (elc *ErrorLogsCreate) SetLongitude(f float64) *ErrorLogsCreate {
	elc.mutation.SetLongitude(f)
	return elc
}

// SetNillableLongitude sets the "longitude" field if the given value is not nil.
func (elc *ErrorLogsCreate) SetNillableLongitude(f *float64) *ErrorLogsCreate {
	if f != nil {
		elc.SetLongitude(*f)
	}
	return elc
}

// SetEventtime sets the "eventtime" field.
func (elc *ErrorLogsCreate) SetEventtime(t time.Time) *ErrorLogsCreate {
	elc.mutation.SetEventtime(t)
	return elc
}

// SetNillableEventtime sets the "eventtime" field if the given value is not nil.
func (elc *ErrorLogsCreate) SetNillableEventtime(t *time.Time) *ErrorLogsCreate {
	if t != nil {
		elc.SetEventtime(*t)
	}
	return elc
}

// SetUpdatedBy sets the "UpdatedBy" field.
func (elc *ErrorLogsCreate) SetUpdatedBy(s string) *ErrorLogsCreate {
	elc.mutation.SetUpdatedBy(s)
	return elc
}

// SetNillableUpdatedBy sets the "UpdatedBy" field if the given value is not nil.
func (elc *ErrorLogsCreate) SetNillableUpdatedBy(s *string) *ErrorLogsCreate {
	if s != nil {
		elc.SetUpdatedBy(*s)
	}
	return elc
}

// SetUpdatedTime sets the "UpdatedTime" field.
func (elc *ErrorLogsCreate) SetUpdatedTime(t time.Time) *ErrorLogsCreate {
	elc.mutation.SetUpdatedTime(t)
	return elc
}

// SetNillableUpdatedTime sets the "UpdatedTime" field if the given value is not nil.
func (elc *ErrorLogsCreate) SetNillableUpdatedTime(t *time.Time) *ErrorLogsCreate {
	if t != nil {
		elc.SetUpdatedTime(*t)
	}
	return elc
}

// SetAssignedTo sets the "AssignedTo" field.
func (elc *ErrorLogsCreate) SetAssignedTo(s string) *ErrorLogsCreate {
	elc.mutation.SetAssignedTo(s)
	return elc
}

// SetNillableAssignedTo sets the "AssignedTo" field if the given value is not nil.
func (elc *ErrorLogsCreate) SetNillableAssignedTo(s *string) *ErrorLogsCreate {
	if s != nil {
		elc.SetAssignedTo(*s)
	}
	return elc
}

// SetRemarksNew sets the "RemarksNew" field.
func (elc *ErrorLogsCreate) SetRemarksNew(s string) *ErrorLogsCreate {
	elc.mutation.SetRemarksNew(s)
	return elc
}

// SetNillableRemarksNew sets the "RemarksNew" field if the given value is not nil.
func (elc *ErrorLogsCreate) SetNillableRemarksNew(s *string) *ErrorLogsCreate {
	if s != nil {
		elc.SetRemarksNew(*s)
	}
	return elc
}

// SetStatus sets the "Status" field.
func (elc *ErrorLogsCreate) SetStatus(s string) *ErrorLogsCreate {
	elc.mutation.SetStatus(s)
	return elc
}

// SetNillableStatus sets the "Status" field if the given value is not nil.
func (elc *ErrorLogsCreate) SetNillableStatus(s *string) *ErrorLogsCreate {
	if s != nil {
		elc.SetStatus(*s)
	}
	return elc
}

// SetClosedOn sets the "ClosedOn" field.
func (elc *ErrorLogsCreate) SetClosedOn(t time.Time) *ErrorLogsCreate {
	elc.mutation.SetClosedOn(t)
	return elc
}

// SetNillableClosedOn sets the "ClosedOn" field if the given value is not nil.
func (elc *ErrorLogsCreate) SetNillableClosedOn(t *time.Time) *ErrorLogsCreate {
	if t != nil {
		elc.SetClosedOn(*t)
	}
	return elc
}

// SetID sets the "id" field.
func (elc *ErrorLogsCreate) SetID(i int64) *ErrorLogsCreate {
	elc.mutation.SetID(i)
	return elc
}

// Mutation returns the ErrorLogsMutation object of the builder.
func (elc *ErrorLogsCreate) Mutation() *ErrorLogsMutation {
	return elc.mutation
}

// Save creates the ErrorLogs in the database.
func (elc *ErrorLogsCreate) Save(ctx context.Context) (*ErrorLogs, error) {
	elc.defaults()
	return withHooks(ctx, elc.sqlSave, elc.mutation, elc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (elc *ErrorLogsCreate) SaveX(ctx context.Context) *ErrorLogs {
	v, err := elc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (elc *ErrorLogsCreate) Exec(ctx context.Context) error {
	_, err := elc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (elc *ErrorLogsCreate) ExecX(ctx context.Context) {
	if err := elc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (elc *ErrorLogsCreate) defaults() {
	if _, ok := elc.mutation.Uniqueid(); !ok {
		v := errorlogs.DefaultUniqueid
		elc.mutation.SetUniqueid(v)
	}
	if _, ok := elc.mutation.Latitude(); !ok {
		v := errorlogs.DefaultLatitude
		elc.mutation.SetLatitude(v)
	}
	if _, ok := elc.mutation.Longitude(); !ok {
		v := errorlogs.DefaultLongitude
		elc.mutation.SetLongitude(v)
	}
	if _, ok := elc.mutation.Eventtime(); !ok {
		v := errorlogs.DefaultEventtime()
		elc.mutation.SetEventtime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (elc *ErrorLogsCreate) check() error {
	if _, ok := elc.mutation.Eventtime(); !ok {
		return &ValidationError{Name: "eventtime", err: errors.New(`ent: missing required field "ErrorLogs.eventtime"`)}
	}
	return nil
}

func (elc *ErrorLogsCreate) sqlSave(ctx context.Context) (*ErrorLogs, error) {
	if err := elc.check(); err != nil {
		return nil, err
	}
	_node, _spec := elc.createSpec()
	if err := sqlgraph.CreateNode(ctx, elc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	elc.mutation.id = &_node.ID
	elc.mutation.done = true
	return _node, nil
}

func (elc *ErrorLogsCreate) createSpec() (*ErrorLogs, *sqlgraph.CreateSpec) {
	var (
		_node = &ErrorLogs{config: elc.config}
		_spec = sqlgraph.NewCreateSpec(errorlogs.Table, sqlgraph.NewFieldSpec(errorlogs.FieldID, field.TypeInt64))
	)
	if id, ok := elc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := elc.mutation.Userid(); ok {
		_spec.SetField(errorlogs.FieldUserid, field.TypeString, value)
		_node.Userid = value
	}
	if value, ok := elc.mutation.Uniqueid(); ok {
		_spec.SetField(errorlogs.FieldUniqueid, field.TypeInt64, value)
		_node.Uniqueid = value
	}
	if value, ok := elc.mutation.Usertype(); ok {
		_spec.SetField(errorlogs.FieldUsertype, field.TypeString, value)
		_node.Usertype = value
	}
	if value, ok := elc.mutation.Userdetails(); ok {
		_spec.SetField(errorlogs.FieldUserdetails, field.TypeString, value)
		_node.Userdetails = value
	}
	if value, ok := elc.mutation.Remarks(); ok {
		_spec.SetField(errorlogs.FieldRemarks, field.TypeString, value)
		_node.Remarks = value
	}
	if value, ok := elc.mutation.Action(); ok {
		_spec.SetField(errorlogs.FieldAction, field.TypeString, value)
		_node.Action = value
	}
	if value, ok := elc.mutation.Ipaddress(); ok {
		_spec.SetField(errorlogs.FieldIpaddress, field.TypeString, value)
		_node.Ipaddress = value
	}
	if value, ok := elc.mutation.Devicetype(); ok {
		_spec.SetField(errorlogs.FieldDevicetype, field.TypeString, value)
		_node.Devicetype = value
	}
	if value, ok := elc.mutation.Os(); ok {
		_spec.SetField(errorlogs.FieldOs, field.TypeString, value)
		_node.Os = value
	}
	if value, ok := elc.mutation.Browser(); ok {
		_spec.SetField(errorlogs.FieldBrowser, field.TypeString, value)
		_node.Browser = value
	}
	if value, ok := elc.mutation.Latitude(); ok {
		_spec.SetField(errorlogs.FieldLatitude, field.TypeFloat64, value)
		_node.Latitude = value
	}
	if value, ok := elc.mutation.Longitude(); ok {
		_spec.SetField(errorlogs.FieldLongitude, field.TypeFloat64, value)
		_node.Longitude = value
	}
	if value, ok := elc.mutation.Eventtime(); ok {
		_spec.SetField(errorlogs.FieldEventtime, field.TypeTime, value)
		_node.Eventtime = value
	}
	if value, ok := elc.mutation.UpdatedBy(); ok {
		_spec.SetField(errorlogs.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if value, ok := elc.mutation.UpdatedTime(); ok {
		_spec.SetField(errorlogs.FieldUpdatedTime, field.TypeTime, value)
		_node.UpdatedTime = value
	}
	if value, ok := elc.mutation.AssignedTo(); ok {
		_spec.SetField(errorlogs.FieldAssignedTo, field.TypeString, value)
		_node.AssignedTo = value
	}
	if value, ok := elc.mutation.RemarksNew(); ok {
		_spec.SetField(errorlogs.FieldRemarksNew, field.TypeString, value)
		_node.RemarksNew = value
	}
	if value, ok := elc.mutation.Status(); ok {
		_spec.SetField(errorlogs.FieldStatus, field.TypeString, value)
		_node.Status = value
	}
	if value, ok := elc.mutation.ClosedOn(); ok {
		_spec.SetField(errorlogs.FieldClosedOn, field.TypeTime, value)
		_node.ClosedOn = value
	}
	return _node, _spec
}

// ErrorLogsCreateBulk is the builder for creating many ErrorLogs entities in bulk.
type ErrorLogsCreateBulk struct {
	config
	builders []*ErrorLogsCreate
}

// Save creates the ErrorLogs entities in the database.
func (elcb *ErrorLogsCreateBulk) Save(ctx context.Context) ([]*ErrorLogs, error) {
	specs := make([]*sqlgraph.CreateSpec, len(elcb.builders))
	nodes := make([]*ErrorLogs, len(elcb.builders))
	mutators := make([]Mutator, len(elcb.builders))
	for i := range elcb.builders {
		func(i int, root context.Context) {
			builder := elcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ErrorLogsMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, elcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, elcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, elcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (elcb *ErrorLogsCreateBulk) SaveX(ctx context.Context) []*ErrorLogs {
	v, err := elcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (elcb *ErrorLogsCreateBulk) Exec(ctx context.Context) error {
	_, err := elcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (elcb *ErrorLogsCreateBulk) ExecX(ctx context.Context) {
	if err := elcb.Exec(ctx); err != nil {
		panic(err)
	}
}
