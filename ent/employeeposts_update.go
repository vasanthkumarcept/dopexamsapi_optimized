// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"recruit/ent/eligibilitymaster"
	"recruit/ent/employeeposts"
	"recruit/ent/employees"
	"recruit/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// EmployeePostsUpdate is the builder for updating EmployeePosts entities.
type EmployeePostsUpdate struct {
	config
	hooks    []Hook
	mutation *EmployeePostsMutation
}

// Where appends a list predicates to the EmployeePostsUpdate builder.
func (epu *EmployeePostsUpdate) Where(ps ...predicate.EmployeePosts) *EmployeePostsUpdate {
	epu.mutation.Where(ps...)
	return epu
}

// SetPostCode sets the "PostCode" field.
func (epu *EmployeePostsUpdate) SetPostCode(s string) *EmployeePostsUpdate {
	epu.mutation.SetPostCode(s)
	return epu
}

// SetPostDescription sets the "PostDescription" field.
func (epu *EmployeePostsUpdate) SetPostDescription(s string) *EmployeePostsUpdate {
	epu.mutation.SetPostDescription(s)
	return epu
}

// SetNillablePostDescription sets the "PostDescription" field if the given value is not nil.
func (epu *EmployeePostsUpdate) SetNillablePostDescription(s *string) *EmployeePostsUpdate {
	if s != nil {
		epu.SetPostDescription(*s)
	}
	return epu
}

// ClearPostDescription clears the value of the "PostDescription" field.
func (epu *EmployeePostsUpdate) ClearPostDescription() *EmployeePostsUpdate {
	epu.mutation.ClearPostDescription()
	return epu
}

// SetGroup sets the "Group" field.
func (epu *EmployeePostsUpdate) SetGroup(s string) *EmployeePostsUpdate {
	epu.mutation.SetGroup(s)
	return epu
}

// SetNillableGroup sets the "Group" field if the given value is not nil.
func (epu *EmployeePostsUpdate) SetNillableGroup(s *string) *EmployeePostsUpdate {
	if s != nil {
		epu.SetGroup(*s)
	}
	return epu
}

// ClearGroup clears the value of the "Group" field.
func (epu *EmployeePostsUpdate) ClearGroup() *EmployeePostsUpdate {
	epu.mutation.ClearGroup()
	return epu
}

// SetPayLevel sets the "PayLevel" field.
func (epu *EmployeePostsUpdate) SetPayLevel(s string) *EmployeePostsUpdate {
	epu.mutation.SetPayLevel(s)
	return epu
}

// SetNillablePayLevel sets the "PayLevel" field if the given value is not nil.
func (epu *EmployeePostsUpdate) SetNillablePayLevel(s *string) *EmployeePostsUpdate {
	if s != nil {
		epu.SetPayLevel(*s)
	}
	return epu
}

// ClearPayLevel clears the value of the "PayLevel" field.
func (epu *EmployeePostsUpdate) ClearPayLevel() *EmployeePostsUpdate {
	epu.mutation.ClearPayLevel()
	return epu
}

// SetScale sets the "Scale" field.
func (epu *EmployeePostsUpdate) SetScale(s string) *EmployeePostsUpdate {
	epu.mutation.SetScale(s)
	return epu
}

// SetNillableScale sets the "Scale" field if the given value is not nil.
func (epu *EmployeePostsUpdate) SetNillableScale(s *string) *EmployeePostsUpdate {
	if s != nil {
		epu.SetScale(*s)
	}
	return epu
}

// ClearScale clears the value of the "Scale" field.
func (epu *EmployeePostsUpdate) ClearScale() *EmployeePostsUpdate {
	epu.mutation.ClearScale()
	return epu
}

// SetBaseCadreFlag sets the "BaseCadreFlag" field.
func (epu *EmployeePostsUpdate) SetBaseCadreFlag(b bool) *EmployeePostsUpdate {
	epu.mutation.SetBaseCadreFlag(b)
	return epu
}

// SetNillableBaseCadreFlag sets the "BaseCadreFlag" field if the given value is not nil.
func (epu *EmployeePostsUpdate) SetNillableBaseCadreFlag(b *bool) *EmployeePostsUpdate {
	if b != nil {
		epu.SetBaseCadreFlag(*b)
	}
	return epu
}

// ClearBaseCadreFlag clears the value of the "BaseCadreFlag" field.
func (epu *EmployeePostsUpdate) ClearBaseCadreFlag() *EmployeePostsUpdate {
	epu.mutation.ClearBaseCadreFlag()
	return epu
}

// SetOrderNumber sets the "OrderNumber" field.
func (epu *EmployeePostsUpdate) SetOrderNumber(s string) *EmployeePostsUpdate {
	epu.mutation.SetOrderNumber(s)
	return epu
}

// SetNillableOrderNumber sets the "OrderNumber" field if the given value is not nil.
func (epu *EmployeePostsUpdate) SetNillableOrderNumber(s *string) *EmployeePostsUpdate {
	if s != nil {
		epu.SetOrderNumber(*s)
	}
	return epu
}

// ClearOrderNumber clears the value of the "OrderNumber" field.
func (epu *EmployeePostsUpdate) ClearOrderNumber() *EmployeePostsUpdate {
	epu.mutation.ClearOrderNumber()
	return epu
}

// SetStatus sets the "Status" field.
func (epu *EmployeePostsUpdate) SetStatus(s string) *EmployeePostsUpdate {
	epu.mutation.SetStatus(s)
	return epu
}

// SetNillableStatus sets the "Status" field if the given value is not nil.
func (epu *EmployeePostsUpdate) SetNillableStatus(s *string) *EmployeePostsUpdate {
	if s != nil {
		epu.SetStatus(*s)
	}
	return epu
}

// ClearStatus clears the value of the "Status" field.
func (epu *EmployeePostsUpdate) ClearStatus() *EmployeePostsUpdate {
	epu.mutation.ClearStatus()
	return epu
}

// SetCreatedById sets the "CreatedById" field.
func (epu *EmployeePostsUpdate) SetCreatedById(i int32) *EmployeePostsUpdate {
	epu.mutation.ResetCreatedById()
	epu.mutation.SetCreatedById(i)
	return epu
}

// SetNillableCreatedById sets the "CreatedById" field if the given value is not nil.
func (epu *EmployeePostsUpdate) SetNillableCreatedById(i *int32) *EmployeePostsUpdate {
	if i != nil {
		epu.SetCreatedById(*i)
	}
	return epu
}

// AddCreatedById adds i to the "CreatedById" field.
func (epu *EmployeePostsUpdate) AddCreatedById(i int32) *EmployeePostsUpdate {
	epu.mutation.AddCreatedById(i)
	return epu
}

// ClearCreatedById clears the value of the "CreatedById" field.
func (epu *EmployeePostsUpdate) ClearCreatedById() *EmployeePostsUpdate {
	epu.mutation.ClearCreatedById()
	return epu
}

// SetCreatedByUserName sets the "CreatedByUserName" field.
func (epu *EmployeePostsUpdate) SetCreatedByUserName(s string) *EmployeePostsUpdate {
	epu.mutation.SetCreatedByUserName(s)
	return epu
}

// SetNillableCreatedByUserName sets the "CreatedByUserName" field if the given value is not nil.
func (epu *EmployeePostsUpdate) SetNillableCreatedByUserName(s *string) *EmployeePostsUpdate {
	if s != nil {
		epu.SetCreatedByUserName(*s)
	}
	return epu
}

// ClearCreatedByUserName clears the value of the "CreatedByUserName" field.
func (epu *EmployeePostsUpdate) ClearCreatedByUserName() *EmployeePostsUpdate {
	epu.mutation.ClearCreatedByUserName()
	return epu
}

// SetCreatedByEmployeeId sets the "CreatedByEmployeeId" field.
func (epu *EmployeePostsUpdate) SetCreatedByEmployeeId(s string) *EmployeePostsUpdate {
	epu.mutation.SetCreatedByEmployeeId(s)
	return epu
}

// SetNillableCreatedByEmployeeId sets the "CreatedByEmployeeId" field if the given value is not nil.
func (epu *EmployeePostsUpdate) SetNillableCreatedByEmployeeId(s *string) *EmployeePostsUpdate {
	if s != nil {
		epu.SetCreatedByEmployeeId(*s)
	}
	return epu
}

// ClearCreatedByEmployeeId clears the value of the "CreatedByEmployeeId" field.
func (epu *EmployeePostsUpdate) ClearCreatedByEmployeeId() *EmployeePostsUpdate {
	epu.mutation.ClearCreatedByEmployeeId()
	return epu
}

// SetCreatedByDesignation sets the "CreatedByDesignation" field.
func (epu *EmployeePostsUpdate) SetCreatedByDesignation(s string) *EmployeePostsUpdate {
	epu.mutation.SetCreatedByDesignation(s)
	return epu
}

// SetNillableCreatedByDesignation sets the "CreatedByDesignation" field if the given value is not nil.
func (epu *EmployeePostsUpdate) SetNillableCreatedByDesignation(s *string) *EmployeePostsUpdate {
	if s != nil {
		epu.SetCreatedByDesignation(*s)
	}
	return epu
}

// ClearCreatedByDesignation clears the value of the "CreatedByDesignation" field.
func (epu *EmployeePostsUpdate) ClearCreatedByDesignation() *EmployeePostsUpdate {
	epu.mutation.ClearCreatedByDesignation()
	return epu
}

// SetCreatedDate sets the "CreatedDate" field.
func (epu *EmployeePostsUpdate) SetCreatedDate(t time.Time) *EmployeePostsUpdate {
	epu.mutation.SetCreatedDate(t)
	return epu
}

// SetNillableCreatedDate sets the "CreatedDate" field if the given value is not nil.
func (epu *EmployeePostsUpdate) SetNillableCreatedDate(t *time.Time) *EmployeePostsUpdate {
	if t != nil {
		epu.SetCreatedDate(*t)
	}
	return epu
}

// ClearCreatedDate clears the value of the "CreatedDate" field.
func (epu *EmployeePostsUpdate) ClearCreatedDate() *EmployeePostsUpdate {
	epu.mutation.ClearCreatedDate()
	return epu
}

// SetVerifiedById sets the "VerifiedById" field.
func (epu *EmployeePostsUpdate) SetVerifiedById(i int64) *EmployeePostsUpdate {
	epu.mutation.ResetVerifiedById()
	epu.mutation.SetVerifiedById(i)
	return epu
}

// SetNillableVerifiedById sets the "VerifiedById" field if the given value is not nil.
func (epu *EmployeePostsUpdate) SetNillableVerifiedById(i *int64) *EmployeePostsUpdate {
	if i != nil {
		epu.SetVerifiedById(*i)
	}
	return epu
}

// AddVerifiedById adds i to the "VerifiedById" field.
func (epu *EmployeePostsUpdate) AddVerifiedById(i int64) *EmployeePostsUpdate {
	epu.mutation.AddVerifiedById(i)
	return epu
}

// ClearVerifiedById clears the value of the "VerifiedById" field.
func (epu *EmployeePostsUpdate) ClearVerifiedById() *EmployeePostsUpdate {
	epu.mutation.ClearVerifiedById()
	return epu
}

// SetVerifiedByUserName sets the "VerifiedByUserName" field.
func (epu *EmployeePostsUpdate) SetVerifiedByUserName(s string) *EmployeePostsUpdate {
	epu.mutation.SetVerifiedByUserName(s)
	return epu
}

// SetNillableVerifiedByUserName sets the "VerifiedByUserName" field if the given value is not nil.
func (epu *EmployeePostsUpdate) SetNillableVerifiedByUserName(s *string) *EmployeePostsUpdate {
	if s != nil {
		epu.SetVerifiedByUserName(*s)
	}
	return epu
}

// ClearVerifiedByUserName clears the value of the "VerifiedByUserName" field.
func (epu *EmployeePostsUpdate) ClearVerifiedByUserName() *EmployeePostsUpdate {
	epu.mutation.ClearVerifiedByUserName()
	return epu
}

// SetVerifiedByEmployeeId sets the "VerifiedByEmployeeId" field.
func (epu *EmployeePostsUpdate) SetVerifiedByEmployeeId(s string) *EmployeePostsUpdate {
	epu.mutation.SetVerifiedByEmployeeId(s)
	return epu
}

// SetNillableVerifiedByEmployeeId sets the "VerifiedByEmployeeId" field if the given value is not nil.
func (epu *EmployeePostsUpdate) SetNillableVerifiedByEmployeeId(s *string) *EmployeePostsUpdate {
	if s != nil {
		epu.SetVerifiedByEmployeeId(*s)
	}
	return epu
}

// ClearVerifiedByEmployeeId clears the value of the "VerifiedByEmployeeId" field.
func (epu *EmployeePostsUpdate) ClearVerifiedByEmployeeId() *EmployeePostsUpdate {
	epu.mutation.ClearVerifiedByEmployeeId()
	return epu
}

// SetVerifiedByDesignation sets the "VerifiedByDesignation" field.
func (epu *EmployeePostsUpdate) SetVerifiedByDesignation(s string) *EmployeePostsUpdate {
	epu.mutation.SetVerifiedByDesignation(s)
	return epu
}

// SetNillableVerifiedByDesignation sets the "VerifiedByDesignation" field if the given value is not nil.
func (epu *EmployeePostsUpdate) SetNillableVerifiedByDesignation(s *string) *EmployeePostsUpdate {
	if s != nil {
		epu.SetVerifiedByDesignation(*s)
	}
	return epu
}

// ClearVerifiedByDesignation clears the value of the "VerifiedByDesignation" field.
func (epu *EmployeePostsUpdate) ClearVerifiedByDesignation() *EmployeePostsUpdate {
	epu.mutation.ClearVerifiedByDesignation()
	return epu
}

// SetVerifiedDate sets the "VerifiedDate" field.
func (epu *EmployeePostsUpdate) SetVerifiedDate(t time.Time) *EmployeePostsUpdate {
	epu.mutation.SetVerifiedDate(t)
	return epu
}

// SetNillableVerifiedDate sets the "VerifiedDate" field if the given value is not nil.
func (epu *EmployeePostsUpdate) SetNillableVerifiedDate(t *time.Time) *EmployeePostsUpdate {
	if t != nil {
		epu.SetVerifiedDate(*t)
	}
	return epu
}

// ClearVerifiedDate clears the value of the "VerifiedDate" field.
func (epu *EmployeePostsUpdate) ClearVerifiedDate() *EmployeePostsUpdate {
	epu.mutation.ClearVerifiedDate()
	return epu
}

// SetDeletedById sets the "DeletedById" field.
func (epu *EmployeePostsUpdate) SetDeletedById(i int64) *EmployeePostsUpdate {
	epu.mutation.ResetDeletedById()
	epu.mutation.SetDeletedById(i)
	return epu
}

// SetNillableDeletedById sets the "DeletedById" field if the given value is not nil.
func (epu *EmployeePostsUpdate) SetNillableDeletedById(i *int64) *EmployeePostsUpdate {
	if i != nil {
		epu.SetDeletedById(*i)
	}
	return epu
}

// AddDeletedById adds i to the "DeletedById" field.
func (epu *EmployeePostsUpdate) AddDeletedById(i int64) *EmployeePostsUpdate {
	epu.mutation.AddDeletedById(i)
	return epu
}

// ClearDeletedById clears the value of the "DeletedById" field.
func (epu *EmployeePostsUpdate) ClearDeletedById() *EmployeePostsUpdate {
	epu.mutation.ClearDeletedById()
	return epu
}

// SetDeletedByUserName sets the "DeletedByUserName" field.
func (epu *EmployeePostsUpdate) SetDeletedByUserName(s string) *EmployeePostsUpdate {
	epu.mutation.SetDeletedByUserName(s)
	return epu
}

// SetNillableDeletedByUserName sets the "DeletedByUserName" field if the given value is not nil.
func (epu *EmployeePostsUpdate) SetNillableDeletedByUserName(s *string) *EmployeePostsUpdate {
	if s != nil {
		epu.SetDeletedByUserName(*s)
	}
	return epu
}

// ClearDeletedByUserName clears the value of the "DeletedByUserName" field.
func (epu *EmployeePostsUpdate) ClearDeletedByUserName() *EmployeePostsUpdate {
	epu.mutation.ClearDeletedByUserName()
	return epu
}

// SetDeletedByEmployeeId sets the "DeletedByEmployeeId" field.
func (epu *EmployeePostsUpdate) SetDeletedByEmployeeId(s string) *EmployeePostsUpdate {
	epu.mutation.SetDeletedByEmployeeId(s)
	return epu
}

// SetNillableDeletedByEmployeeId sets the "DeletedByEmployeeId" field if the given value is not nil.
func (epu *EmployeePostsUpdate) SetNillableDeletedByEmployeeId(s *string) *EmployeePostsUpdate {
	if s != nil {
		epu.SetDeletedByEmployeeId(*s)
	}
	return epu
}

// ClearDeletedByEmployeeId clears the value of the "DeletedByEmployeeId" field.
func (epu *EmployeePostsUpdate) ClearDeletedByEmployeeId() *EmployeePostsUpdate {
	epu.mutation.ClearDeletedByEmployeeId()
	return epu
}

// SetDeletedByDesignation sets the "DeletedByDesignation" field.
func (epu *EmployeePostsUpdate) SetDeletedByDesignation(s string) *EmployeePostsUpdate {
	epu.mutation.SetDeletedByDesignation(s)
	return epu
}

// SetNillableDeletedByDesignation sets the "DeletedByDesignation" field if the given value is not nil.
func (epu *EmployeePostsUpdate) SetNillableDeletedByDesignation(s *string) *EmployeePostsUpdate {
	if s != nil {
		epu.SetDeletedByDesignation(*s)
	}
	return epu
}

// ClearDeletedByDesignation clears the value of the "DeletedByDesignation" field.
func (epu *EmployeePostsUpdate) ClearDeletedByDesignation() *EmployeePostsUpdate {
	epu.mutation.ClearDeletedByDesignation()
	return epu
}

// SetDeletedDate sets the "DeletedDate" field.
func (epu *EmployeePostsUpdate) SetDeletedDate(t time.Time) *EmployeePostsUpdate {
	epu.mutation.SetDeletedDate(t)
	return epu
}

// SetNillableDeletedDate sets the "DeletedDate" field if the given value is not nil.
func (epu *EmployeePostsUpdate) SetNillableDeletedDate(t *time.Time) *EmployeePostsUpdate {
	if t != nil {
		epu.SetDeletedDate(*t)
	}
	return epu
}

// ClearDeletedDate clears the value of the "DeletedDate" field.
func (epu *EmployeePostsUpdate) ClearDeletedDate() *EmployeePostsUpdate {
	epu.mutation.ClearDeletedDate()
	return epu
}

// SetGroupDescription sets the "GroupDescription" field.
func (epu *EmployeePostsUpdate) SetGroupDescription(s string) *EmployeePostsUpdate {
	epu.mutation.SetGroupDescription(s)
	return epu
}

// SetNillableGroupDescription sets the "GroupDescription" field if the given value is not nil.
func (epu *EmployeePostsUpdate) SetNillableGroupDescription(s *string) *EmployeePostsUpdate {
	if s != nil {
		epu.SetGroupDescription(*s)
	}
	return epu
}

// ClearGroupDescription clears the value of the "GroupDescription" field.
func (epu *EmployeePostsUpdate) ClearGroupDescription() *EmployeePostsUpdate {
	epu.mutation.ClearGroupDescription()
	return epu
}

// AddEmpPostIDs adds the "emp_posts" edge to the Employees entity by IDs.
func (epu *EmployeePostsUpdate) AddEmpPostIDs(ids ...int32) *EmployeePostsUpdate {
	epu.mutation.AddEmpPostIDs(ids...)
	return epu
}

// AddEmpPosts adds the "emp_posts" edges to the Employees entity.
func (epu *EmployeePostsUpdate) AddEmpPosts(e ...*Employees) *EmployeePostsUpdate {
	ids := make([]int32, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return epu.AddEmpPostIDs(ids...)
}

// AddPostEligibilityIDs adds the "PostEligibility" edge to the EligibilityMaster entity by IDs.
func (epu *EmployeePostsUpdate) AddPostEligibilityIDs(ids ...int32) *EmployeePostsUpdate {
	epu.mutation.AddPostEligibilityIDs(ids...)
	return epu
}

// AddPostEligibility adds the "PostEligibility" edges to the EligibilityMaster entity.
func (epu *EmployeePostsUpdate) AddPostEligibility(e ...*EligibilityMaster) *EmployeePostsUpdate {
	ids := make([]int32, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return epu.AddPostEligibilityIDs(ids...)
}

// Mutation returns the EmployeePostsMutation object of the builder.
func (epu *EmployeePostsUpdate) Mutation() *EmployeePostsMutation {
	return epu.mutation
}

// ClearEmpPosts clears all "emp_posts" edges to the Employees entity.
func (epu *EmployeePostsUpdate) ClearEmpPosts() *EmployeePostsUpdate {
	epu.mutation.ClearEmpPosts()
	return epu
}

// RemoveEmpPostIDs removes the "emp_posts" edge to Employees entities by IDs.
func (epu *EmployeePostsUpdate) RemoveEmpPostIDs(ids ...int32) *EmployeePostsUpdate {
	epu.mutation.RemoveEmpPostIDs(ids...)
	return epu
}

// RemoveEmpPosts removes "emp_posts" edges to Employees entities.
func (epu *EmployeePostsUpdate) RemoveEmpPosts(e ...*Employees) *EmployeePostsUpdate {
	ids := make([]int32, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return epu.RemoveEmpPostIDs(ids...)
}

// ClearPostEligibility clears all "PostEligibility" edges to the EligibilityMaster entity.
func (epu *EmployeePostsUpdate) ClearPostEligibility() *EmployeePostsUpdate {
	epu.mutation.ClearPostEligibility()
	return epu
}

// RemovePostEligibilityIDs removes the "PostEligibility" edge to EligibilityMaster entities by IDs.
func (epu *EmployeePostsUpdate) RemovePostEligibilityIDs(ids ...int32) *EmployeePostsUpdate {
	epu.mutation.RemovePostEligibilityIDs(ids...)
	return epu
}

// RemovePostEligibility removes "PostEligibility" edges to EligibilityMaster entities.
func (epu *EmployeePostsUpdate) RemovePostEligibility(e ...*EligibilityMaster) *EmployeePostsUpdate {
	ids := make([]int32, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return epu.RemovePostEligibilityIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (epu *EmployeePostsUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, epu.sqlSave, epu.mutation, epu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (epu *EmployeePostsUpdate) SaveX(ctx context.Context) int {
	affected, err := epu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (epu *EmployeePostsUpdate) Exec(ctx context.Context) error {
	_, err := epu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (epu *EmployeePostsUpdate) ExecX(ctx context.Context) {
	if err := epu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (epu *EmployeePostsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(employeeposts.Table, employeeposts.Columns, sqlgraph.NewFieldSpec(employeeposts.FieldID, field.TypeInt32))
	if ps := epu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := epu.mutation.PostCode(); ok {
		_spec.SetField(employeeposts.FieldPostCode, field.TypeString, value)
	}
	if value, ok := epu.mutation.PostDescription(); ok {
		_spec.SetField(employeeposts.FieldPostDescription, field.TypeString, value)
	}
	if epu.mutation.PostDescriptionCleared() {
		_spec.ClearField(employeeposts.FieldPostDescription, field.TypeString)
	}
	if value, ok := epu.mutation.Group(); ok {
		_spec.SetField(employeeposts.FieldGroup, field.TypeString, value)
	}
	if epu.mutation.GroupCleared() {
		_spec.ClearField(employeeposts.FieldGroup, field.TypeString)
	}
	if value, ok := epu.mutation.PayLevel(); ok {
		_spec.SetField(employeeposts.FieldPayLevel, field.TypeString, value)
	}
	if epu.mutation.PayLevelCleared() {
		_spec.ClearField(employeeposts.FieldPayLevel, field.TypeString)
	}
	if value, ok := epu.mutation.Scale(); ok {
		_spec.SetField(employeeposts.FieldScale, field.TypeString, value)
	}
	if epu.mutation.ScaleCleared() {
		_spec.ClearField(employeeposts.FieldScale, field.TypeString)
	}
	if value, ok := epu.mutation.BaseCadreFlag(); ok {
		_spec.SetField(employeeposts.FieldBaseCadreFlag, field.TypeBool, value)
	}
	if epu.mutation.BaseCadreFlagCleared() {
		_spec.ClearField(employeeposts.FieldBaseCadreFlag, field.TypeBool)
	}
	if value, ok := epu.mutation.OrderNumber(); ok {
		_spec.SetField(employeeposts.FieldOrderNumber, field.TypeString, value)
	}
	if epu.mutation.OrderNumberCleared() {
		_spec.ClearField(employeeposts.FieldOrderNumber, field.TypeString)
	}
	if value, ok := epu.mutation.Status(); ok {
		_spec.SetField(employeeposts.FieldStatus, field.TypeString, value)
	}
	if epu.mutation.StatusCleared() {
		_spec.ClearField(employeeposts.FieldStatus, field.TypeString)
	}
	if value, ok := epu.mutation.CreatedById(); ok {
		_spec.SetField(employeeposts.FieldCreatedById, field.TypeInt32, value)
	}
	if value, ok := epu.mutation.AddedCreatedById(); ok {
		_spec.AddField(employeeposts.FieldCreatedById, field.TypeInt32, value)
	}
	if epu.mutation.CreatedByIdCleared() {
		_spec.ClearField(employeeposts.FieldCreatedById, field.TypeInt32)
	}
	if value, ok := epu.mutation.CreatedByUserName(); ok {
		_spec.SetField(employeeposts.FieldCreatedByUserName, field.TypeString, value)
	}
	if epu.mutation.CreatedByUserNameCleared() {
		_spec.ClearField(employeeposts.FieldCreatedByUserName, field.TypeString)
	}
	if value, ok := epu.mutation.CreatedByEmployeeId(); ok {
		_spec.SetField(employeeposts.FieldCreatedByEmployeeId, field.TypeString, value)
	}
	if epu.mutation.CreatedByEmployeeIdCleared() {
		_spec.ClearField(employeeposts.FieldCreatedByEmployeeId, field.TypeString)
	}
	if value, ok := epu.mutation.CreatedByDesignation(); ok {
		_spec.SetField(employeeposts.FieldCreatedByDesignation, field.TypeString, value)
	}
	if epu.mutation.CreatedByDesignationCleared() {
		_spec.ClearField(employeeposts.FieldCreatedByDesignation, field.TypeString)
	}
	if value, ok := epu.mutation.CreatedDate(); ok {
		_spec.SetField(employeeposts.FieldCreatedDate, field.TypeTime, value)
	}
	if epu.mutation.CreatedDateCleared() {
		_spec.ClearField(employeeposts.FieldCreatedDate, field.TypeTime)
	}
	if value, ok := epu.mutation.VerifiedById(); ok {
		_spec.SetField(employeeposts.FieldVerifiedById, field.TypeInt64, value)
	}
	if value, ok := epu.mutation.AddedVerifiedById(); ok {
		_spec.AddField(employeeposts.FieldVerifiedById, field.TypeInt64, value)
	}
	if epu.mutation.VerifiedByIdCleared() {
		_spec.ClearField(employeeposts.FieldVerifiedById, field.TypeInt64)
	}
	if value, ok := epu.mutation.VerifiedByUserName(); ok {
		_spec.SetField(employeeposts.FieldVerifiedByUserName, field.TypeString, value)
	}
	if epu.mutation.VerifiedByUserNameCleared() {
		_spec.ClearField(employeeposts.FieldVerifiedByUserName, field.TypeString)
	}
	if value, ok := epu.mutation.VerifiedByEmployeeId(); ok {
		_spec.SetField(employeeposts.FieldVerifiedByEmployeeId, field.TypeString, value)
	}
	if epu.mutation.VerifiedByEmployeeIdCleared() {
		_spec.ClearField(employeeposts.FieldVerifiedByEmployeeId, field.TypeString)
	}
	if value, ok := epu.mutation.VerifiedByDesignation(); ok {
		_spec.SetField(employeeposts.FieldVerifiedByDesignation, field.TypeString, value)
	}
	if epu.mutation.VerifiedByDesignationCleared() {
		_spec.ClearField(employeeposts.FieldVerifiedByDesignation, field.TypeString)
	}
	if value, ok := epu.mutation.VerifiedDate(); ok {
		_spec.SetField(employeeposts.FieldVerifiedDate, field.TypeTime, value)
	}
	if epu.mutation.VerifiedDateCleared() {
		_spec.ClearField(employeeposts.FieldVerifiedDate, field.TypeTime)
	}
	if value, ok := epu.mutation.DeletedById(); ok {
		_spec.SetField(employeeposts.FieldDeletedById, field.TypeInt64, value)
	}
	if value, ok := epu.mutation.AddedDeletedById(); ok {
		_spec.AddField(employeeposts.FieldDeletedById, field.TypeInt64, value)
	}
	if epu.mutation.DeletedByIdCleared() {
		_spec.ClearField(employeeposts.FieldDeletedById, field.TypeInt64)
	}
	if value, ok := epu.mutation.DeletedByUserName(); ok {
		_spec.SetField(employeeposts.FieldDeletedByUserName, field.TypeString, value)
	}
	if epu.mutation.DeletedByUserNameCleared() {
		_spec.ClearField(employeeposts.FieldDeletedByUserName, field.TypeString)
	}
	if value, ok := epu.mutation.DeletedByEmployeeId(); ok {
		_spec.SetField(employeeposts.FieldDeletedByEmployeeId, field.TypeString, value)
	}
	if epu.mutation.DeletedByEmployeeIdCleared() {
		_spec.ClearField(employeeposts.FieldDeletedByEmployeeId, field.TypeString)
	}
	if value, ok := epu.mutation.DeletedByDesignation(); ok {
		_spec.SetField(employeeposts.FieldDeletedByDesignation, field.TypeString, value)
	}
	if epu.mutation.DeletedByDesignationCleared() {
		_spec.ClearField(employeeposts.FieldDeletedByDesignation, field.TypeString)
	}
	if value, ok := epu.mutation.DeletedDate(); ok {
		_spec.SetField(employeeposts.FieldDeletedDate, field.TypeTime, value)
	}
	if epu.mutation.DeletedDateCleared() {
		_spec.ClearField(employeeposts.FieldDeletedDate, field.TypeTime)
	}
	if value, ok := epu.mutation.GroupDescription(); ok {
		_spec.SetField(employeeposts.FieldGroupDescription, field.TypeString, value)
	}
	if epu.mutation.GroupDescriptionCleared() {
		_spec.ClearField(employeeposts.FieldGroupDescription, field.TypeString)
	}
	if epu.mutation.EmpPostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employeeposts.EmpPostsTable,
			Columns: []string{employeeposts.EmpPostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employees.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := epu.mutation.RemovedEmpPostsIDs(); len(nodes) > 0 && !epu.mutation.EmpPostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employeeposts.EmpPostsTable,
			Columns: []string{employeeposts.EmpPostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employees.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := epu.mutation.EmpPostsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employeeposts.EmpPostsTable,
			Columns: []string{employeeposts.EmpPostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employees.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if epu.mutation.PostEligibilityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employeeposts.PostEligibilityTable,
			Columns: []string{employeeposts.PostEligibilityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(eligibilitymaster.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := epu.mutation.RemovedPostEligibilityIDs(); len(nodes) > 0 && !epu.mutation.PostEligibilityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employeeposts.PostEligibilityTable,
			Columns: []string{employeeposts.PostEligibilityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(eligibilitymaster.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := epu.mutation.PostEligibilityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employeeposts.PostEligibilityTable,
			Columns: []string{employeeposts.PostEligibilityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(eligibilitymaster.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, epu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{employeeposts.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	epu.mutation.done = true
	return n, nil
}

// EmployeePostsUpdateOne is the builder for updating a single EmployeePosts entity.
type EmployeePostsUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *EmployeePostsMutation
}

// SetPostCode sets the "PostCode" field.
func (epuo *EmployeePostsUpdateOne) SetPostCode(s string) *EmployeePostsUpdateOne {
	epuo.mutation.SetPostCode(s)
	return epuo
}

// SetPostDescription sets the "PostDescription" field.
func (epuo *EmployeePostsUpdateOne) SetPostDescription(s string) *EmployeePostsUpdateOne {
	epuo.mutation.SetPostDescription(s)
	return epuo
}

// SetNillablePostDescription sets the "PostDescription" field if the given value is not nil.
func (epuo *EmployeePostsUpdateOne) SetNillablePostDescription(s *string) *EmployeePostsUpdateOne {
	if s != nil {
		epuo.SetPostDescription(*s)
	}
	return epuo
}

// ClearPostDescription clears the value of the "PostDescription" field.
func (epuo *EmployeePostsUpdateOne) ClearPostDescription() *EmployeePostsUpdateOne {
	epuo.mutation.ClearPostDescription()
	return epuo
}

// SetGroup sets the "Group" field.
func (epuo *EmployeePostsUpdateOne) SetGroup(s string) *EmployeePostsUpdateOne {
	epuo.mutation.SetGroup(s)
	return epuo
}

// SetNillableGroup sets the "Group" field if the given value is not nil.
func (epuo *EmployeePostsUpdateOne) SetNillableGroup(s *string) *EmployeePostsUpdateOne {
	if s != nil {
		epuo.SetGroup(*s)
	}
	return epuo
}

// ClearGroup clears the value of the "Group" field.
func (epuo *EmployeePostsUpdateOne) ClearGroup() *EmployeePostsUpdateOne {
	epuo.mutation.ClearGroup()
	return epuo
}

// SetPayLevel sets the "PayLevel" field.
func (epuo *EmployeePostsUpdateOne) SetPayLevel(s string) *EmployeePostsUpdateOne {
	epuo.mutation.SetPayLevel(s)
	return epuo
}

// SetNillablePayLevel sets the "PayLevel" field if the given value is not nil.
func (epuo *EmployeePostsUpdateOne) SetNillablePayLevel(s *string) *EmployeePostsUpdateOne {
	if s != nil {
		epuo.SetPayLevel(*s)
	}
	return epuo
}

// ClearPayLevel clears the value of the "PayLevel" field.
func (epuo *EmployeePostsUpdateOne) ClearPayLevel() *EmployeePostsUpdateOne {
	epuo.mutation.ClearPayLevel()
	return epuo
}

// SetScale sets the "Scale" field.
func (epuo *EmployeePostsUpdateOne) SetScale(s string) *EmployeePostsUpdateOne {
	epuo.mutation.SetScale(s)
	return epuo
}

// SetNillableScale sets the "Scale" field if the given value is not nil.
func (epuo *EmployeePostsUpdateOne) SetNillableScale(s *string) *EmployeePostsUpdateOne {
	if s != nil {
		epuo.SetScale(*s)
	}
	return epuo
}

// ClearScale clears the value of the "Scale" field.
func (epuo *EmployeePostsUpdateOne) ClearScale() *EmployeePostsUpdateOne {
	epuo.mutation.ClearScale()
	return epuo
}

// SetBaseCadreFlag sets the "BaseCadreFlag" field.
func (epuo *EmployeePostsUpdateOne) SetBaseCadreFlag(b bool) *EmployeePostsUpdateOne {
	epuo.mutation.SetBaseCadreFlag(b)
	return epuo
}

// SetNillableBaseCadreFlag sets the "BaseCadreFlag" field if the given value is not nil.
func (epuo *EmployeePostsUpdateOne) SetNillableBaseCadreFlag(b *bool) *EmployeePostsUpdateOne {
	if b != nil {
		epuo.SetBaseCadreFlag(*b)
	}
	return epuo
}

// ClearBaseCadreFlag clears the value of the "BaseCadreFlag" field.
func (epuo *EmployeePostsUpdateOne) ClearBaseCadreFlag() *EmployeePostsUpdateOne {
	epuo.mutation.ClearBaseCadreFlag()
	return epuo
}

// SetOrderNumber sets the "OrderNumber" field.
func (epuo *EmployeePostsUpdateOne) SetOrderNumber(s string) *EmployeePostsUpdateOne {
	epuo.mutation.SetOrderNumber(s)
	return epuo
}

// SetNillableOrderNumber sets the "OrderNumber" field if the given value is not nil.
func (epuo *EmployeePostsUpdateOne) SetNillableOrderNumber(s *string) *EmployeePostsUpdateOne {
	if s != nil {
		epuo.SetOrderNumber(*s)
	}
	return epuo
}

// ClearOrderNumber clears the value of the "OrderNumber" field.
func (epuo *EmployeePostsUpdateOne) ClearOrderNumber() *EmployeePostsUpdateOne {
	epuo.mutation.ClearOrderNumber()
	return epuo
}

// SetStatus sets the "Status" field.
func (epuo *EmployeePostsUpdateOne) SetStatus(s string) *EmployeePostsUpdateOne {
	epuo.mutation.SetStatus(s)
	return epuo
}

// SetNillableStatus sets the "Status" field if the given value is not nil.
func (epuo *EmployeePostsUpdateOne) SetNillableStatus(s *string) *EmployeePostsUpdateOne {
	if s != nil {
		epuo.SetStatus(*s)
	}
	return epuo
}

// ClearStatus clears the value of the "Status" field.
func (epuo *EmployeePostsUpdateOne) ClearStatus() *EmployeePostsUpdateOne {
	epuo.mutation.ClearStatus()
	return epuo
}

// SetCreatedById sets the "CreatedById" field.
func (epuo *EmployeePostsUpdateOne) SetCreatedById(i int32) *EmployeePostsUpdateOne {
	epuo.mutation.ResetCreatedById()
	epuo.mutation.SetCreatedById(i)
	return epuo
}

// SetNillableCreatedById sets the "CreatedById" field if the given value is not nil.
func (epuo *EmployeePostsUpdateOne) SetNillableCreatedById(i *int32) *EmployeePostsUpdateOne {
	if i != nil {
		epuo.SetCreatedById(*i)
	}
	return epuo
}

// AddCreatedById adds i to the "CreatedById" field.
func (epuo *EmployeePostsUpdateOne) AddCreatedById(i int32) *EmployeePostsUpdateOne {
	epuo.mutation.AddCreatedById(i)
	return epuo
}

// ClearCreatedById clears the value of the "CreatedById" field.
func (epuo *EmployeePostsUpdateOne) ClearCreatedById() *EmployeePostsUpdateOne {
	epuo.mutation.ClearCreatedById()
	return epuo
}

// SetCreatedByUserName sets the "CreatedByUserName" field.
func (epuo *EmployeePostsUpdateOne) SetCreatedByUserName(s string) *EmployeePostsUpdateOne {
	epuo.mutation.SetCreatedByUserName(s)
	return epuo
}

// SetNillableCreatedByUserName sets the "CreatedByUserName" field if the given value is not nil.
func (epuo *EmployeePostsUpdateOne) SetNillableCreatedByUserName(s *string) *EmployeePostsUpdateOne {
	if s != nil {
		epuo.SetCreatedByUserName(*s)
	}
	return epuo
}

// ClearCreatedByUserName clears the value of the "CreatedByUserName" field.
func (epuo *EmployeePostsUpdateOne) ClearCreatedByUserName() *EmployeePostsUpdateOne {
	epuo.mutation.ClearCreatedByUserName()
	return epuo
}

// SetCreatedByEmployeeId sets the "CreatedByEmployeeId" field.
func (epuo *EmployeePostsUpdateOne) SetCreatedByEmployeeId(s string) *EmployeePostsUpdateOne {
	epuo.mutation.SetCreatedByEmployeeId(s)
	return epuo
}

// SetNillableCreatedByEmployeeId sets the "CreatedByEmployeeId" field if the given value is not nil.
func (epuo *EmployeePostsUpdateOne) SetNillableCreatedByEmployeeId(s *string) *EmployeePostsUpdateOne {
	if s != nil {
		epuo.SetCreatedByEmployeeId(*s)
	}
	return epuo
}

// ClearCreatedByEmployeeId clears the value of the "CreatedByEmployeeId" field.
func (epuo *EmployeePostsUpdateOne) ClearCreatedByEmployeeId() *EmployeePostsUpdateOne {
	epuo.mutation.ClearCreatedByEmployeeId()
	return epuo
}

// SetCreatedByDesignation sets the "CreatedByDesignation" field.
func (epuo *EmployeePostsUpdateOne) SetCreatedByDesignation(s string) *EmployeePostsUpdateOne {
	epuo.mutation.SetCreatedByDesignation(s)
	return epuo
}

// SetNillableCreatedByDesignation sets the "CreatedByDesignation" field if the given value is not nil.
func (epuo *EmployeePostsUpdateOne) SetNillableCreatedByDesignation(s *string) *EmployeePostsUpdateOne {
	if s != nil {
		epuo.SetCreatedByDesignation(*s)
	}
	return epuo
}

// ClearCreatedByDesignation clears the value of the "CreatedByDesignation" field.
func (epuo *EmployeePostsUpdateOne) ClearCreatedByDesignation() *EmployeePostsUpdateOne {
	epuo.mutation.ClearCreatedByDesignation()
	return epuo
}

// SetCreatedDate sets the "CreatedDate" field.
func (epuo *EmployeePostsUpdateOne) SetCreatedDate(t time.Time) *EmployeePostsUpdateOne {
	epuo.mutation.SetCreatedDate(t)
	return epuo
}

// SetNillableCreatedDate sets the "CreatedDate" field if the given value is not nil.
func (epuo *EmployeePostsUpdateOne) SetNillableCreatedDate(t *time.Time) *EmployeePostsUpdateOne {
	if t != nil {
		epuo.SetCreatedDate(*t)
	}
	return epuo
}

// ClearCreatedDate clears the value of the "CreatedDate" field.
func (epuo *EmployeePostsUpdateOne) ClearCreatedDate() *EmployeePostsUpdateOne {
	epuo.mutation.ClearCreatedDate()
	return epuo
}

// SetVerifiedById sets the "VerifiedById" field.
func (epuo *EmployeePostsUpdateOne) SetVerifiedById(i int64) *EmployeePostsUpdateOne {
	epuo.mutation.ResetVerifiedById()
	epuo.mutation.SetVerifiedById(i)
	return epuo
}

// SetNillableVerifiedById sets the "VerifiedById" field if the given value is not nil.
func (epuo *EmployeePostsUpdateOne) SetNillableVerifiedById(i *int64) *EmployeePostsUpdateOne {
	if i != nil {
		epuo.SetVerifiedById(*i)
	}
	return epuo
}

// AddVerifiedById adds i to the "VerifiedById" field.
func (epuo *EmployeePostsUpdateOne) AddVerifiedById(i int64) *EmployeePostsUpdateOne {
	epuo.mutation.AddVerifiedById(i)
	return epuo
}

// ClearVerifiedById clears the value of the "VerifiedById" field.
func (epuo *EmployeePostsUpdateOne) ClearVerifiedById() *EmployeePostsUpdateOne {
	epuo.mutation.ClearVerifiedById()
	return epuo
}

// SetVerifiedByUserName sets the "VerifiedByUserName" field.
func (epuo *EmployeePostsUpdateOne) SetVerifiedByUserName(s string) *EmployeePostsUpdateOne {
	epuo.mutation.SetVerifiedByUserName(s)
	return epuo
}

// SetNillableVerifiedByUserName sets the "VerifiedByUserName" field if the given value is not nil.
func (epuo *EmployeePostsUpdateOne) SetNillableVerifiedByUserName(s *string) *EmployeePostsUpdateOne {
	if s != nil {
		epuo.SetVerifiedByUserName(*s)
	}
	return epuo
}

// ClearVerifiedByUserName clears the value of the "VerifiedByUserName" field.
func (epuo *EmployeePostsUpdateOne) ClearVerifiedByUserName() *EmployeePostsUpdateOne {
	epuo.mutation.ClearVerifiedByUserName()
	return epuo
}

// SetVerifiedByEmployeeId sets the "VerifiedByEmployeeId" field.
func (epuo *EmployeePostsUpdateOne) SetVerifiedByEmployeeId(s string) *EmployeePostsUpdateOne {
	epuo.mutation.SetVerifiedByEmployeeId(s)
	return epuo
}

// SetNillableVerifiedByEmployeeId sets the "VerifiedByEmployeeId" field if the given value is not nil.
func (epuo *EmployeePostsUpdateOne) SetNillableVerifiedByEmployeeId(s *string) *EmployeePostsUpdateOne {
	if s != nil {
		epuo.SetVerifiedByEmployeeId(*s)
	}
	return epuo
}

// ClearVerifiedByEmployeeId clears the value of the "VerifiedByEmployeeId" field.
func (epuo *EmployeePostsUpdateOne) ClearVerifiedByEmployeeId() *EmployeePostsUpdateOne {
	epuo.mutation.ClearVerifiedByEmployeeId()
	return epuo
}

// SetVerifiedByDesignation sets the "VerifiedByDesignation" field.
func (epuo *EmployeePostsUpdateOne) SetVerifiedByDesignation(s string) *EmployeePostsUpdateOne {
	epuo.mutation.SetVerifiedByDesignation(s)
	return epuo
}

// SetNillableVerifiedByDesignation sets the "VerifiedByDesignation" field if the given value is not nil.
func (epuo *EmployeePostsUpdateOne) SetNillableVerifiedByDesignation(s *string) *EmployeePostsUpdateOne {
	if s != nil {
		epuo.SetVerifiedByDesignation(*s)
	}
	return epuo
}

// ClearVerifiedByDesignation clears the value of the "VerifiedByDesignation" field.
func (epuo *EmployeePostsUpdateOne) ClearVerifiedByDesignation() *EmployeePostsUpdateOne {
	epuo.mutation.ClearVerifiedByDesignation()
	return epuo
}

// SetVerifiedDate sets the "VerifiedDate" field.
func (epuo *EmployeePostsUpdateOne) SetVerifiedDate(t time.Time) *EmployeePostsUpdateOne {
	epuo.mutation.SetVerifiedDate(t)
	return epuo
}

// SetNillableVerifiedDate sets the "VerifiedDate" field if the given value is not nil.
func (epuo *EmployeePostsUpdateOne) SetNillableVerifiedDate(t *time.Time) *EmployeePostsUpdateOne {
	if t != nil {
		epuo.SetVerifiedDate(*t)
	}
	return epuo
}

// ClearVerifiedDate clears the value of the "VerifiedDate" field.
func (epuo *EmployeePostsUpdateOne) ClearVerifiedDate() *EmployeePostsUpdateOne {
	epuo.mutation.ClearVerifiedDate()
	return epuo
}

// SetDeletedById sets the "DeletedById" field.
func (epuo *EmployeePostsUpdateOne) SetDeletedById(i int64) *EmployeePostsUpdateOne {
	epuo.mutation.ResetDeletedById()
	epuo.mutation.SetDeletedById(i)
	return epuo
}

// SetNillableDeletedById sets the "DeletedById" field if the given value is not nil.
func (epuo *EmployeePostsUpdateOne) SetNillableDeletedById(i *int64) *EmployeePostsUpdateOne {
	if i != nil {
		epuo.SetDeletedById(*i)
	}
	return epuo
}

// AddDeletedById adds i to the "DeletedById" field.
func (epuo *EmployeePostsUpdateOne) AddDeletedById(i int64) *EmployeePostsUpdateOne {
	epuo.mutation.AddDeletedById(i)
	return epuo
}

// ClearDeletedById clears the value of the "DeletedById" field.
func (epuo *EmployeePostsUpdateOne) ClearDeletedById() *EmployeePostsUpdateOne {
	epuo.mutation.ClearDeletedById()
	return epuo
}

// SetDeletedByUserName sets the "DeletedByUserName" field.
func (epuo *EmployeePostsUpdateOne) SetDeletedByUserName(s string) *EmployeePostsUpdateOne {
	epuo.mutation.SetDeletedByUserName(s)
	return epuo
}

// SetNillableDeletedByUserName sets the "DeletedByUserName" field if the given value is not nil.
func (epuo *EmployeePostsUpdateOne) SetNillableDeletedByUserName(s *string) *EmployeePostsUpdateOne {
	if s != nil {
		epuo.SetDeletedByUserName(*s)
	}
	return epuo
}

// ClearDeletedByUserName clears the value of the "DeletedByUserName" field.
func (epuo *EmployeePostsUpdateOne) ClearDeletedByUserName() *EmployeePostsUpdateOne {
	epuo.mutation.ClearDeletedByUserName()
	return epuo
}

// SetDeletedByEmployeeId sets the "DeletedByEmployeeId" field.
func (epuo *EmployeePostsUpdateOne) SetDeletedByEmployeeId(s string) *EmployeePostsUpdateOne {
	epuo.mutation.SetDeletedByEmployeeId(s)
	return epuo
}

// SetNillableDeletedByEmployeeId sets the "DeletedByEmployeeId" field if the given value is not nil.
func (epuo *EmployeePostsUpdateOne) SetNillableDeletedByEmployeeId(s *string) *EmployeePostsUpdateOne {
	if s != nil {
		epuo.SetDeletedByEmployeeId(*s)
	}
	return epuo
}

// ClearDeletedByEmployeeId clears the value of the "DeletedByEmployeeId" field.
func (epuo *EmployeePostsUpdateOne) ClearDeletedByEmployeeId() *EmployeePostsUpdateOne {
	epuo.mutation.ClearDeletedByEmployeeId()
	return epuo
}

// SetDeletedByDesignation sets the "DeletedByDesignation" field.
func (epuo *EmployeePostsUpdateOne) SetDeletedByDesignation(s string) *EmployeePostsUpdateOne {
	epuo.mutation.SetDeletedByDesignation(s)
	return epuo
}

// SetNillableDeletedByDesignation sets the "DeletedByDesignation" field if the given value is not nil.
func (epuo *EmployeePostsUpdateOne) SetNillableDeletedByDesignation(s *string) *EmployeePostsUpdateOne {
	if s != nil {
		epuo.SetDeletedByDesignation(*s)
	}
	return epuo
}

// ClearDeletedByDesignation clears the value of the "DeletedByDesignation" field.
func (epuo *EmployeePostsUpdateOne) ClearDeletedByDesignation() *EmployeePostsUpdateOne {
	epuo.mutation.ClearDeletedByDesignation()
	return epuo
}

// SetDeletedDate sets the "DeletedDate" field.
func (epuo *EmployeePostsUpdateOne) SetDeletedDate(t time.Time) *EmployeePostsUpdateOne {
	epuo.mutation.SetDeletedDate(t)
	return epuo
}

// SetNillableDeletedDate sets the "DeletedDate" field if the given value is not nil.
func (epuo *EmployeePostsUpdateOne) SetNillableDeletedDate(t *time.Time) *EmployeePostsUpdateOne {
	if t != nil {
		epuo.SetDeletedDate(*t)
	}
	return epuo
}

// ClearDeletedDate clears the value of the "DeletedDate" field.
func (epuo *EmployeePostsUpdateOne) ClearDeletedDate() *EmployeePostsUpdateOne {
	epuo.mutation.ClearDeletedDate()
	return epuo
}

// SetGroupDescription sets the "GroupDescription" field.
func (epuo *EmployeePostsUpdateOne) SetGroupDescription(s string) *EmployeePostsUpdateOne {
	epuo.mutation.SetGroupDescription(s)
	return epuo
}

// SetNillableGroupDescription sets the "GroupDescription" field if the given value is not nil.
func (epuo *EmployeePostsUpdateOne) SetNillableGroupDescription(s *string) *EmployeePostsUpdateOne {
	if s != nil {
		epuo.SetGroupDescription(*s)
	}
	return epuo
}

// ClearGroupDescription clears the value of the "GroupDescription" field.
func (epuo *EmployeePostsUpdateOne) ClearGroupDescription() *EmployeePostsUpdateOne {
	epuo.mutation.ClearGroupDescription()
	return epuo
}

// AddEmpPostIDs adds the "emp_posts" edge to the Employees entity by IDs.
func (epuo *EmployeePostsUpdateOne) AddEmpPostIDs(ids ...int32) *EmployeePostsUpdateOne {
	epuo.mutation.AddEmpPostIDs(ids...)
	return epuo
}

// AddEmpPosts adds the "emp_posts" edges to the Employees entity.
func (epuo *EmployeePostsUpdateOne) AddEmpPosts(e ...*Employees) *EmployeePostsUpdateOne {
	ids := make([]int32, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return epuo.AddEmpPostIDs(ids...)
}

// AddPostEligibilityIDs adds the "PostEligibility" edge to the EligibilityMaster entity by IDs.
func (epuo *EmployeePostsUpdateOne) AddPostEligibilityIDs(ids ...int32) *EmployeePostsUpdateOne {
	epuo.mutation.AddPostEligibilityIDs(ids...)
	return epuo
}

// AddPostEligibility adds the "PostEligibility" edges to the EligibilityMaster entity.
func (epuo *EmployeePostsUpdateOne) AddPostEligibility(e ...*EligibilityMaster) *EmployeePostsUpdateOne {
	ids := make([]int32, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return epuo.AddPostEligibilityIDs(ids...)
}

// Mutation returns the EmployeePostsMutation object of the builder.
func (epuo *EmployeePostsUpdateOne) Mutation() *EmployeePostsMutation {
	return epuo.mutation
}

// ClearEmpPosts clears all "emp_posts" edges to the Employees entity.
func (epuo *EmployeePostsUpdateOne) ClearEmpPosts() *EmployeePostsUpdateOne {
	epuo.mutation.ClearEmpPosts()
	return epuo
}

// RemoveEmpPostIDs removes the "emp_posts" edge to Employees entities by IDs.
func (epuo *EmployeePostsUpdateOne) RemoveEmpPostIDs(ids ...int32) *EmployeePostsUpdateOne {
	epuo.mutation.RemoveEmpPostIDs(ids...)
	return epuo
}

// RemoveEmpPosts removes "emp_posts" edges to Employees entities.
func (epuo *EmployeePostsUpdateOne) RemoveEmpPosts(e ...*Employees) *EmployeePostsUpdateOne {
	ids := make([]int32, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return epuo.RemoveEmpPostIDs(ids...)
}

// ClearPostEligibility clears all "PostEligibility" edges to the EligibilityMaster entity.
func (epuo *EmployeePostsUpdateOne) ClearPostEligibility() *EmployeePostsUpdateOne {
	epuo.mutation.ClearPostEligibility()
	return epuo
}

// RemovePostEligibilityIDs removes the "PostEligibility" edge to EligibilityMaster entities by IDs.
func (epuo *EmployeePostsUpdateOne) RemovePostEligibilityIDs(ids ...int32) *EmployeePostsUpdateOne {
	epuo.mutation.RemovePostEligibilityIDs(ids...)
	return epuo
}

// RemovePostEligibility removes "PostEligibility" edges to EligibilityMaster entities.
func (epuo *EmployeePostsUpdateOne) RemovePostEligibility(e ...*EligibilityMaster) *EmployeePostsUpdateOne {
	ids := make([]int32, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return epuo.RemovePostEligibilityIDs(ids...)
}

// Where appends a list predicates to the EmployeePostsUpdate builder.
func (epuo *EmployeePostsUpdateOne) Where(ps ...predicate.EmployeePosts) *EmployeePostsUpdateOne {
	epuo.mutation.Where(ps...)
	return epuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (epuo *EmployeePostsUpdateOne) Select(field string, fields ...string) *EmployeePostsUpdateOne {
	epuo.fields = append([]string{field}, fields...)
	return epuo
}

// Save executes the query and returns the updated EmployeePosts entity.
func (epuo *EmployeePostsUpdateOne) Save(ctx context.Context) (*EmployeePosts, error) {
	return withHooks(ctx, epuo.sqlSave, epuo.mutation, epuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (epuo *EmployeePostsUpdateOne) SaveX(ctx context.Context) *EmployeePosts {
	node, err := epuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (epuo *EmployeePostsUpdateOne) Exec(ctx context.Context) error {
	_, err := epuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (epuo *EmployeePostsUpdateOne) ExecX(ctx context.Context) {
	if err := epuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (epuo *EmployeePostsUpdateOne) sqlSave(ctx context.Context) (_node *EmployeePosts, err error) {
	_spec := sqlgraph.NewUpdateSpec(employeeposts.Table, employeeposts.Columns, sqlgraph.NewFieldSpec(employeeposts.FieldID, field.TypeInt32))
	id, ok := epuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "EmployeePosts.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := epuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, employeeposts.FieldID)
		for _, f := range fields {
			if !employeeposts.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != employeeposts.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := epuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := epuo.mutation.PostCode(); ok {
		_spec.SetField(employeeposts.FieldPostCode, field.TypeString, value)
	}
	if value, ok := epuo.mutation.PostDescription(); ok {
		_spec.SetField(employeeposts.FieldPostDescription, field.TypeString, value)
	}
	if epuo.mutation.PostDescriptionCleared() {
		_spec.ClearField(employeeposts.FieldPostDescription, field.TypeString)
	}
	if value, ok := epuo.mutation.Group(); ok {
		_spec.SetField(employeeposts.FieldGroup, field.TypeString, value)
	}
	if epuo.mutation.GroupCleared() {
		_spec.ClearField(employeeposts.FieldGroup, field.TypeString)
	}
	if value, ok := epuo.mutation.PayLevel(); ok {
		_spec.SetField(employeeposts.FieldPayLevel, field.TypeString, value)
	}
	if epuo.mutation.PayLevelCleared() {
		_spec.ClearField(employeeposts.FieldPayLevel, field.TypeString)
	}
	if value, ok := epuo.mutation.Scale(); ok {
		_spec.SetField(employeeposts.FieldScale, field.TypeString, value)
	}
	if epuo.mutation.ScaleCleared() {
		_spec.ClearField(employeeposts.FieldScale, field.TypeString)
	}
	if value, ok := epuo.mutation.BaseCadreFlag(); ok {
		_spec.SetField(employeeposts.FieldBaseCadreFlag, field.TypeBool, value)
	}
	if epuo.mutation.BaseCadreFlagCleared() {
		_spec.ClearField(employeeposts.FieldBaseCadreFlag, field.TypeBool)
	}
	if value, ok := epuo.mutation.OrderNumber(); ok {
		_spec.SetField(employeeposts.FieldOrderNumber, field.TypeString, value)
	}
	if epuo.mutation.OrderNumberCleared() {
		_spec.ClearField(employeeposts.FieldOrderNumber, field.TypeString)
	}
	if value, ok := epuo.mutation.Status(); ok {
		_spec.SetField(employeeposts.FieldStatus, field.TypeString, value)
	}
	if epuo.mutation.StatusCleared() {
		_spec.ClearField(employeeposts.FieldStatus, field.TypeString)
	}
	if value, ok := epuo.mutation.CreatedById(); ok {
		_spec.SetField(employeeposts.FieldCreatedById, field.TypeInt32, value)
	}
	if value, ok := epuo.mutation.AddedCreatedById(); ok {
		_spec.AddField(employeeposts.FieldCreatedById, field.TypeInt32, value)
	}
	if epuo.mutation.CreatedByIdCleared() {
		_spec.ClearField(employeeposts.FieldCreatedById, field.TypeInt32)
	}
	if value, ok := epuo.mutation.CreatedByUserName(); ok {
		_spec.SetField(employeeposts.FieldCreatedByUserName, field.TypeString, value)
	}
	if epuo.mutation.CreatedByUserNameCleared() {
		_spec.ClearField(employeeposts.FieldCreatedByUserName, field.TypeString)
	}
	if value, ok := epuo.mutation.CreatedByEmployeeId(); ok {
		_spec.SetField(employeeposts.FieldCreatedByEmployeeId, field.TypeString, value)
	}
	if epuo.mutation.CreatedByEmployeeIdCleared() {
		_spec.ClearField(employeeposts.FieldCreatedByEmployeeId, field.TypeString)
	}
	if value, ok := epuo.mutation.CreatedByDesignation(); ok {
		_spec.SetField(employeeposts.FieldCreatedByDesignation, field.TypeString, value)
	}
	if epuo.mutation.CreatedByDesignationCleared() {
		_spec.ClearField(employeeposts.FieldCreatedByDesignation, field.TypeString)
	}
	if value, ok := epuo.mutation.CreatedDate(); ok {
		_spec.SetField(employeeposts.FieldCreatedDate, field.TypeTime, value)
	}
	if epuo.mutation.CreatedDateCleared() {
		_spec.ClearField(employeeposts.FieldCreatedDate, field.TypeTime)
	}
	if value, ok := epuo.mutation.VerifiedById(); ok {
		_spec.SetField(employeeposts.FieldVerifiedById, field.TypeInt64, value)
	}
	if value, ok := epuo.mutation.AddedVerifiedById(); ok {
		_spec.AddField(employeeposts.FieldVerifiedById, field.TypeInt64, value)
	}
	if epuo.mutation.VerifiedByIdCleared() {
		_spec.ClearField(employeeposts.FieldVerifiedById, field.TypeInt64)
	}
	if value, ok := epuo.mutation.VerifiedByUserName(); ok {
		_spec.SetField(employeeposts.FieldVerifiedByUserName, field.TypeString, value)
	}
	if epuo.mutation.VerifiedByUserNameCleared() {
		_spec.ClearField(employeeposts.FieldVerifiedByUserName, field.TypeString)
	}
	if value, ok := epuo.mutation.VerifiedByEmployeeId(); ok {
		_spec.SetField(employeeposts.FieldVerifiedByEmployeeId, field.TypeString, value)
	}
	if epuo.mutation.VerifiedByEmployeeIdCleared() {
		_spec.ClearField(employeeposts.FieldVerifiedByEmployeeId, field.TypeString)
	}
	if value, ok := epuo.mutation.VerifiedByDesignation(); ok {
		_spec.SetField(employeeposts.FieldVerifiedByDesignation, field.TypeString, value)
	}
	if epuo.mutation.VerifiedByDesignationCleared() {
		_spec.ClearField(employeeposts.FieldVerifiedByDesignation, field.TypeString)
	}
	if value, ok := epuo.mutation.VerifiedDate(); ok {
		_spec.SetField(employeeposts.FieldVerifiedDate, field.TypeTime, value)
	}
	if epuo.mutation.VerifiedDateCleared() {
		_spec.ClearField(employeeposts.FieldVerifiedDate, field.TypeTime)
	}
	if value, ok := epuo.mutation.DeletedById(); ok {
		_spec.SetField(employeeposts.FieldDeletedById, field.TypeInt64, value)
	}
	if value, ok := epuo.mutation.AddedDeletedById(); ok {
		_spec.AddField(employeeposts.FieldDeletedById, field.TypeInt64, value)
	}
	if epuo.mutation.DeletedByIdCleared() {
		_spec.ClearField(employeeposts.FieldDeletedById, field.TypeInt64)
	}
	if value, ok := epuo.mutation.DeletedByUserName(); ok {
		_spec.SetField(employeeposts.FieldDeletedByUserName, field.TypeString, value)
	}
	if epuo.mutation.DeletedByUserNameCleared() {
		_spec.ClearField(employeeposts.FieldDeletedByUserName, field.TypeString)
	}
	if value, ok := epuo.mutation.DeletedByEmployeeId(); ok {
		_spec.SetField(employeeposts.FieldDeletedByEmployeeId, field.TypeString, value)
	}
	if epuo.mutation.DeletedByEmployeeIdCleared() {
		_spec.ClearField(employeeposts.FieldDeletedByEmployeeId, field.TypeString)
	}
	if value, ok := epuo.mutation.DeletedByDesignation(); ok {
		_spec.SetField(employeeposts.FieldDeletedByDesignation, field.TypeString, value)
	}
	if epuo.mutation.DeletedByDesignationCleared() {
		_spec.ClearField(employeeposts.FieldDeletedByDesignation, field.TypeString)
	}
	if value, ok := epuo.mutation.DeletedDate(); ok {
		_spec.SetField(employeeposts.FieldDeletedDate, field.TypeTime, value)
	}
	if epuo.mutation.DeletedDateCleared() {
		_spec.ClearField(employeeposts.FieldDeletedDate, field.TypeTime)
	}
	if value, ok := epuo.mutation.GroupDescription(); ok {
		_spec.SetField(employeeposts.FieldGroupDescription, field.TypeString, value)
	}
	if epuo.mutation.GroupDescriptionCleared() {
		_spec.ClearField(employeeposts.FieldGroupDescription, field.TypeString)
	}
	if epuo.mutation.EmpPostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employeeposts.EmpPostsTable,
			Columns: []string{employeeposts.EmpPostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employees.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := epuo.mutation.RemovedEmpPostsIDs(); len(nodes) > 0 && !epuo.mutation.EmpPostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employeeposts.EmpPostsTable,
			Columns: []string{employeeposts.EmpPostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employees.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := epuo.mutation.EmpPostsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employeeposts.EmpPostsTable,
			Columns: []string{employeeposts.EmpPostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employees.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if epuo.mutation.PostEligibilityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employeeposts.PostEligibilityTable,
			Columns: []string{employeeposts.PostEligibilityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(eligibilitymaster.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := epuo.mutation.RemovedPostEligibilityIDs(); len(nodes) > 0 && !epuo.mutation.PostEligibilityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employeeposts.PostEligibilityTable,
			Columns: []string{employeeposts.PostEligibilityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(eligibilitymaster.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := epuo.mutation.PostEligibilityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employeeposts.PostEligibilityTable,
			Columns: []string{employeeposts.PostEligibilityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(eligibilitymaster.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &EmployeePosts{config: epuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, epuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{employeeposts.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	epuo.mutation.done = true
	return _node, nil
}
