// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"recruit/ent/cadre_choice_mtspmmg"
	"recruit/ent/exam_application_mtspmmg"
	"recruit/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CadreChoiceMTSPMMGUpdate is the builder for updating Cadre_Choice_MTSPMMG entities.
type CadreChoiceMTSPMMGUpdate struct {
	config
	hooks    []Hook
	mutation *CadreChoiceMTSPMMGMutation
}

// Where appends a list predicates to the CadreChoiceMTSPMMGUpdate builder.
func (ccmu *CadreChoiceMTSPMMGUpdate) Where(ps ...predicate.Cadre_Choice_MTSPMMG) *CadreChoiceMTSPMMGUpdate {
	ccmu.mutation.Where(ps...)
	return ccmu
}

// SetApplicationID sets the "ApplicationID" field.
func (ccmu *CadreChoiceMTSPMMGUpdate) SetApplicationID(i int64) *CadreChoiceMTSPMMGUpdate {
	ccmu.mutation.SetApplicationID(i)
	return ccmu
}

// SetNillableApplicationID sets the "ApplicationID" field if the given value is not nil.
func (ccmu *CadreChoiceMTSPMMGUpdate) SetNillableApplicationID(i *int64) *CadreChoiceMTSPMMGUpdate {
	if i != nil {
		ccmu.SetApplicationID(*i)
	}
	return ccmu
}

// ClearApplicationID clears the value of the "ApplicationID" field.
func (ccmu *CadreChoiceMTSPMMGUpdate) ClearApplicationID() *CadreChoiceMTSPMMGUpdate {
	ccmu.mutation.ClearApplicationID()
	return ccmu
}

// SetPlacePrefNo sets the "PlacePrefNo" field.
func (ccmu *CadreChoiceMTSPMMGUpdate) SetPlacePrefNo(i int64) *CadreChoiceMTSPMMGUpdate {
	ccmu.mutation.ResetPlacePrefNo()
	ccmu.mutation.SetPlacePrefNo(i)
	return ccmu
}

// AddPlacePrefNo adds i to the "PlacePrefNo" field.
func (ccmu *CadreChoiceMTSPMMGUpdate) AddPlacePrefNo(i int64) *CadreChoiceMTSPMMGUpdate {
	ccmu.mutation.AddPlacePrefNo(i)
	return ccmu
}

// SetPlacePrefValue sets the "PlacePrefValue" field.
func (ccmu *CadreChoiceMTSPMMGUpdate) SetPlacePrefValue(s string) *CadreChoiceMTSPMMGUpdate {
	ccmu.mutation.SetPlacePrefValue(s)
	return ccmu
}

// SetFeederCader sets the "FeederCader" field.
func (ccmu *CadreChoiceMTSPMMGUpdate) SetFeederCader(s string) *CadreChoiceMTSPMMGUpdate {
	ccmu.mutation.SetFeederCader(s)
	return ccmu
}

// SetNillableFeederCader sets the "FeederCader" field if the given value is not nil.
func (ccmu *CadreChoiceMTSPMMGUpdate) SetNillableFeederCader(s *string) *CadreChoiceMTSPMMGUpdate {
	if s != nil {
		ccmu.SetFeederCader(*s)
	}
	return ccmu
}

// ClearFeederCader clears the value of the "FeederCader" field.
func (ccmu *CadreChoiceMTSPMMGUpdate) ClearFeederCader() *CadreChoiceMTSPMMGUpdate {
	ccmu.mutation.ClearFeederCader()
	return ccmu
}

// SetFeederCaderDateOfJoining sets the "FeederCaderDateOfJoining" field.
func (ccmu *CadreChoiceMTSPMMGUpdate) SetFeederCaderDateOfJoining(s string) *CadreChoiceMTSPMMGUpdate {
	ccmu.mutation.SetFeederCaderDateOfJoining(s)
	return ccmu
}

// SetNillableFeederCaderDateOfJoining sets the "FeederCaderDateOfJoining" field if the given value is not nil.
func (ccmu *CadreChoiceMTSPMMGUpdate) SetNillableFeederCaderDateOfJoining(s *string) *CadreChoiceMTSPMMGUpdate {
	if s != nil {
		ccmu.SetFeederCaderDateOfJoining(*s)
	}
	return ccmu
}

// ClearFeederCaderDateOfJoining clears the value of the "FeederCaderDateOfJoining" field.
func (ccmu *CadreChoiceMTSPMMGUpdate) ClearFeederCaderDateOfJoining() *CadreChoiceMTSPMMGUpdate {
	ccmu.mutation.ClearFeederCaderDateOfJoining()
	return ccmu
}

// SetEmployeeID sets the "EmployeeID" field.
func (ccmu *CadreChoiceMTSPMMGUpdate) SetEmployeeID(i int64) *CadreChoiceMTSPMMGUpdate {
	ccmu.mutation.ResetEmployeeID()
	ccmu.mutation.SetEmployeeID(i)
	return ccmu
}

// SetNillableEmployeeID sets the "EmployeeID" field if the given value is not nil.
func (ccmu *CadreChoiceMTSPMMGUpdate) SetNillableEmployeeID(i *int64) *CadreChoiceMTSPMMGUpdate {
	if i != nil {
		ccmu.SetEmployeeID(*i)
	}
	return ccmu
}

// AddEmployeeID adds i to the "EmployeeID" field.
func (ccmu *CadreChoiceMTSPMMGUpdate) AddEmployeeID(i int64) *CadreChoiceMTSPMMGUpdate {
	ccmu.mutation.AddEmployeeID(i)
	return ccmu
}

// ClearEmployeeID clears the value of the "EmployeeID" field.
func (ccmu *CadreChoiceMTSPMMGUpdate) ClearEmployeeID() *CadreChoiceMTSPMMGUpdate {
	ccmu.mutation.ClearEmployeeID()
	return ccmu
}

// SetUpdatedAt sets the "UpdatedAt" field.
func (ccmu *CadreChoiceMTSPMMGUpdate) SetUpdatedAt(t time.Time) *CadreChoiceMTSPMMGUpdate {
	ccmu.mutation.SetUpdatedAt(t)
	return ccmu
}

// SetNillableUpdatedAt sets the "UpdatedAt" field if the given value is not nil.
func (ccmu *CadreChoiceMTSPMMGUpdate) SetNillableUpdatedAt(t *time.Time) *CadreChoiceMTSPMMGUpdate {
	if t != nil {
		ccmu.SetUpdatedAt(*t)
	}
	return ccmu
}

// ClearUpdatedAt clears the value of the "UpdatedAt" field.
func (ccmu *CadreChoiceMTSPMMGUpdate) ClearUpdatedAt() *CadreChoiceMTSPMMGUpdate {
	ccmu.mutation.ClearUpdatedAt()
	return ccmu
}

// SetUpdatedBy sets the "UpdatedBy" field.
func (ccmu *CadreChoiceMTSPMMGUpdate) SetUpdatedBy(s string) *CadreChoiceMTSPMMGUpdate {
	ccmu.mutation.SetUpdatedBy(s)
	return ccmu
}

// SetNillableUpdatedBy sets the "UpdatedBy" field if the given value is not nil.
func (ccmu *CadreChoiceMTSPMMGUpdate) SetNillableUpdatedBy(s *string) *CadreChoiceMTSPMMGUpdate {
	if s != nil {
		ccmu.SetUpdatedBy(*s)
	}
	return ccmu
}

// ClearUpdatedBy clears the value of the "UpdatedBy" field.
func (ccmu *CadreChoiceMTSPMMGUpdate) ClearUpdatedBy() *CadreChoiceMTSPMMGUpdate {
	ccmu.mutation.ClearUpdatedBy()
	return ccmu
}

// SetApplnMTSPMMGRefID sets the "ApplnMTSPMMG_Ref" edge to the Exam_Application_MTSPMMG entity by ID.
func (ccmu *CadreChoiceMTSPMMGUpdate) SetApplnMTSPMMGRefID(id int64) *CadreChoiceMTSPMMGUpdate {
	ccmu.mutation.SetApplnMTSPMMGRefID(id)
	return ccmu
}

// SetNillableApplnMTSPMMGRefID sets the "ApplnMTSPMMG_Ref" edge to the Exam_Application_MTSPMMG entity by ID if the given value is not nil.
func (ccmu *CadreChoiceMTSPMMGUpdate) SetNillableApplnMTSPMMGRefID(id *int64) *CadreChoiceMTSPMMGUpdate {
	if id != nil {
		ccmu = ccmu.SetApplnMTSPMMGRefID(*id)
	}
	return ccmu
}

// SetApplnMTSPMMGRef sets the "ApplnMTSPMMG_Ref" edge to the Exam_Application_MTSPMMG entity.
func (ccmu *CadreChoiceMTSPMMGUpdate) SetApplnMTSPMMGRef(e *Exam_Application_MTSPMMG) *CadreChoiceMTSPMMGUpdate {
	return ccmu.SetApplnMTSPMMGRefID(e.ID)
}

// Mutation returns the CadreChoiceMTSPMMGMutation object of the builder.
func (ccmu *CadreChoiceMTSPMMGUpdate) Mutation() *CadreChoiceMTSPMMGMutation {
	return ccmu.mutation
}

// ClearApplnMTSPMMGRef clears the "ApplnMTSPMMG_Ref" edge to the Exam_Application_MTSPMMG entity.
func (ccmu *CadreChoiceMTSPMMGUpdate) ClearApplnMTSPMMGRef() *CadreChoiceMTSPMMGUpdate {
	ccmu.mutation.ClearApplnMTSPMMGRef()
	return ccmu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ccmu *CadreChoiceMTSPMMGUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ccmu.sqlSave, ccmu.mutation, ccmu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ccmu *CadreChoiceMTSPMMGUpdate) SaveX(ctx context.Context) int {
	affected, err := ccmu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ccmu *CadreChoiceMTSPMMGUpdate) Exec(ctx context.Context) error {
	_, err := ccmu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccmu *CadreChoiceMTSPMMGUpdate) ExecX(ctx context.Context) {
	if err := ccmu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ccmu *CadreChoiceMTSPMMGUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(cadre_choice_mtspmmg.Table, cadre_choice_mtspmmg.Columns, sqlgraph.NewFieldSpec(cadre_choice_mtspmmg.FieldID, field.TypeInt32))
	if ps := ccmu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ccmu.mutation.PlacePrefNo(); ok {
		_spec.SetField(cadre_choice_mtspmmg.FieldPlacePrefNo, field.TypeInt64, value)
	}
	if value, ok := ccmu.mutation.AddedPlacePrefNo(); ok {
		_spec.AddField(cadre_choice_mtspmmg.FieldPlacePrefNo, field.TypeInt64, value)
	}
	if value, ok := ccmu.mutation.PlacePrefValue(); ok {
		_spec.SetField(cadre_choice_mtspmmg.FieldPlacePrefValue, field.TypeString, value)
	}
	if value, ok := ccmu.mutation.FeederCader(); ok {
		_spec.SetField(cadre_choice_mtspmmg.FieldFeederCader, field.TypeString, value)
	}
	if ccmu.mutation.FeederCaderCleared() {
		_spec.ClearField(cadre_choice_mtspmmg.FieldFeederCader, field.TypeString)
	}
	if value, ok := ccmu.mutation.FeederCaderDateOfJoining(); ok {
		_spec.SetField(cadre_choice_mtspmmg.FieldFeederCaderDateOfJoining, field.TypeString, value)
	}
	if ccmu.mutation.FeederCaderDateOfJoiningCleared() {
		_spec.ClearField(cadre_choice_mtspmmg.FieldFeederCaderDateOfJoining, field.TypeString)
	}
	if value, ok := ccmu.mutation.EmployeeID(); ok {
		_spec.SetField(cadre_choice_mtspmmg.FieldEmployeeID, field.TypeInt64, value)
	}
	if value, ok := ccmu.mutation.AddedEmployeeID(); ok {
		_spec.AddField(cadre_choice_mtspmmg.FieldEmployeeID, field.TypeInt64, value)
	}
	if ccmu.mutation.EmployeeIDCleared() {
		_spec.ClearField(cadre_choice_mtspmmg.FieldEmployeeID, field.TypeInt64)
	}
	if value, ok := ccmu.mutation.UpdatedAt(); ok {
		_spec.SetField(cadre_choice_mtspmmg.FieldUpdatedAt, field.TypeTime, value)
	}
	if ccmu.mutation.UpdatedAtCleared() {
		_spec.ClearField(cadre_choice_mtspmmg.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := ccmu.mutation.UpdatedBy(); ok {
		_spec.SetField(cadre_choice_mtspmmg.FieldUpdatedBy, field.TypeString, value)
	}
	if ccmu.mutation.UpdatedByCleared() {
		_spec.ClearField(cadre_choice_mtspmmg.FieldUpdatedBy, field.TypeString)
	}
	if ccmu.mutation.ApplnMTSPMMGRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   cadre_choice_mtspmmg.ApplnMTSPMMGRefTable,
			Columns: []string{cadre_choice_mtspmmg.ApplnMTSPMMGRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_application_mtspmmg.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ccmu.mutation.ApplnMTSPMMGRefIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   cadre_choice_mtspmmg.ApplnMTSPMMGRefTable,
			Columns: []string{cadre_choice_mtspmmg.ApplnMTSPMMGRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_application_mtspmmg.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ccmu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{cadre_choice_mtspmmg.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ccmu.mutation.done = true
	return n, nil
}

// CadreChoiceMTSPMMGUpdateOne is the builder for updating a single Cadre_Choice_MTSPMMG entity.
type CadreChoiceMTSPMMGUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CadreChoiceMTSPMMGMutation
}

// SetApplicationID sets the "ApplicationID" field.
func (ccmuo *CadreChoiceMTSPMMGUpdateOne) SetApplicationID(i int64) *CadreChoiceMTSPMMGUpdateOne {
	ccmuo.mutation.SetApplicationID(i)
	return ccmuo
}

// SetNillableApplicationID sets the "ApplicationID" field if the given value is not nil.
func (ccmuo *CadreChoiceMTSPMMGUpdateOne) SetNillableApplicationID(i *int64) *CadreChoiceMTSPMMGUpdateOne {
	if i != nil {
		ccmuo.SetApplicationID(*i)
	}
	return ccmuo
}

// ClearApplicationID clears the value of the "ApplicationID" field.
func (ccmuo *CadreChoiceMTSPMMGUpdateOne) ClearApplicationID() *CadreChoiceMTSPMMGUpdateOne {
	ccmuo.mutation.ClearApplicationID()
	return ccmuo
}

// SetPlacePrefNo sets the "PlacePrefNo" field.
func (ccmuo *CadreChoiceMTSPMMGUpdateOne) SetPlacePrefNo(i int64) *CadreChoiceMTSPMMGUpdateOne {
	ccmuo.mutation.ResetPlacePrefNo()
	ccmuo.mutation.SetPlacePrefNo(i)
	return ccmuo
}

// AddPlacePrefNo adds i to the "PlacePrefNo" field.
func (ccmuo *CadreChoiceMTSPMMGUpdateOne) AddPlacePrefNo(i int64) *CadreChoiceMTSPMMGUpdateOne {
	ccmuo.mutation.AddPlacePrefNo(i)
	return ccmuo
}

// SetPlacePrefValue sets the "PlacePrefValue" field.
func (ccmuo *CadreChoiceMTSPMMGUpdateOne) SetPlacePrefValue(s string) *CadreChoiceMTSPMMGUpdateOne {
	ccmuo.mutation.SetPlacePrefValue(s)
	return ccmuo
}

// SetFeederCader sets the "FeederCader" field.
func (ccmuo *CadreChoiceMTSPMMGUpdateOne) SetFeederCader(s string) *CadreChoiceMTSPMMGUpdateOne {
	ccmuo.mutation.SetFeederCader(s)
	return ccmuo
}

// SetNillableFeederCader sets the "FeederCader" field if the given value is not nil.
func (ccmuo *CadreChoiceMTSPMMGUpdateOne) SetNillableFeederCader(s *string) *CadreChoiceMTSPMMGUpdateOne {
	if s != nil {
		ccmuo.SetFeederCader(*s)
	}
	return ccmuo
}

// ClearFeederCader clears the value of the "FeederCader" field.
func (ccmuo *CadreChoiceMTSPMMGUpdateOne) ClearFeederCader() *CadreChoiceMTSPMMGUpdateOne {
	ccmuo.mutation.ClearFeederCader()
	return ccmuo
}

// SetFeederCaderDateOfJoining sets the "FeederCaderDateOfJoining" field.
func (ccmuo *CadreChoiceMTSPMMGUpdateOne) SetFeederCaderDateOfJoining(s string) *CadreChoiceMTSPMMGUpdateOne {
	ccmuo.mutation.SetFeederCaderDateOfJoining(s)
	return ccmuo
}

// SetNillableFeederCaderDateOfJoining sets the "FeederCaderDateOfJoining" field if the given value is not nil.
func (ccmuo *CadreChoiceMTSPMMGUpdateOne) SetNillableFeederCaderDateOfJoining(s *string) *CadreChoiceMTSPMMGUpdateOne {
	if s != nil {
		ccmuo.SetFeederCaderDateOfJoining(*s)
	}
	return ccmuo
}

// ClearFeederCaderDateOfJoining clears the value of the "FeederCaderDateOfJoining" field.
func (ccmuo *CadreChoiceMTSPMMGUpdateOne) ClearFeederCaderDateOfJoining() *CadreChoiceMTSPMMGUpdateOne {
	ccmuo.mutation.ClearFeederCaderDateOfJoining()
	return ccmuo
}

// SetEmployeeID sets the "EmployeeID" field.
func (ccmuo *CadreChoiceMTSPMMGUpdateOne) SetEmployeeID(i int64) *CadreChoiceMTSPMMGUpdateOne {
	ccmuo.mutation.ResetEmployeeID()
	ccmuo.mutation.SetEmployeeID(i)
	return ccmuo
}

// SetNillableEmployeeID sets the "EmployeeID" field if the given value is not nil.
func (ccmuo *CadreChoiceMTSPMMGUpdateOne) SetNillableEmployeeID(i *int64) *CadreChoiceMTSPMMGUpdateOne {
	if i != nil {
		ccmuo.SetEmployeeID(*i)
	}
	return ccmuo
}

// AddEmployeeID adds i to the "EmployeeID" field.
func (ccmuo *CadreChoiceMTSPMMGUpdateOne) AddEmployeeID(i int64) *CadreChoiceMTSPMMGUpdateOne {
	ccmuo.mutation.AddEmployeeID(i)
	return ccmuo
}

// ClearEmployeeID clears the value of the "EmployeeID" field.
func (ccmuo *CadreChoiceMTSPMMGUpdateOne) ClearEmployeeID() *CadreChoiceMTSPMMGUpdateOne {
	ccmuo.mutation.ClearEmployeeID()
	return ccmuo
}

// SetUpdatedAt sets the "UpdatedAt" field.
func (ccmuo *CadreChoiceMTSPMMGUpdateOne) SetUpdatedAt(t time.Time) *CadreChoiceMTSPMMGUpdateOne {
	ccmuo.mutation.SetUpdatedAt(t)
	return ccmuo
}

// SetNillableUpdatedAt sets the "UpdatedAt" field if the given value is not nil.
func (ccmuo *CadreChoiceMTSPMMGUpdateOne) SetNillableUpdatedAt(t *time.Time) *CadreChoiceMTSPMMGUpdateOne {
	if t != nil {
		ccmuo.SetUpdatedAt(*t)
	}
	return ccmuo
}

// ClearUpdatedAt clears the value of the "UpdatedAt" field.
func (ccmuo *CadreChoiceMTSPMMGUpdateOne) ClearUpdatedAt() *CadreChoiceMTSPMMGUpdateOne {
	ccmuo.mutation.ClearUpdatedAt()
	return ccmuo
}

// SetUpdatedBy sets the "UpdatedBy" field.
func (ccmuo *CadreChoiceMTSPMMGUpdateOne) SetUpdatedBy(s string) *CadreChoiceMTSPMMGUpdateOne {
	ccmuo.mutation.SetUpdatedBy(s)
	return ccmuo
}

// SetNillableUpdatedBy sets the "UpdatedBy" field if the given value is not nil.
func (ccmuo *CadreChoiceMTSPMMGUpdateOne) SetNillableUpdatedBy(s *string) *CadreChoiceMTSPMMGUpdateOne {
	if s != nil {
		ccmuo.SetUpdatedBy(*s)
	}
	return ccmuo
}

// ClearUpdatedBy clears the value of the "UpdatedBy" field.
func (ccmuo *CadreChoiceMTSPMMGUpdateOne) ClearUpdatedBy() *CadreChoiceMTSPMMGUpdateOne {
	ccmuo.mutation.ClearUpdatedBy()
	return ccmuo
}

// SetApplnMTSPMMGRefID sets the "ApplnMTSPMMG_Ref" edge to the Exam_Application_MTSPMMG entity by ID.
func (ccmuo *CadreChoiceMTSPMMGUpdateOne) SetApplnMTSPMMGRefID(id int64) *CadreChoiceMTSPMMGUpdateOne {
	ccmuo.mutation.SetApplnMTSPMMGRefID(id)
	return ccmuo
}

// SetNillableApplnMTSPMMGRefID sets the "ApplnMTSPMMG_Ref" edge to the Exam_Application_MTSPMMG entity by ID if the given value is not nil.
func (ccmuo *CadreChoiceMTSPMMGUpdateOne) SetNillableApplnMTSPMMGRefID(id *int64) *CadreChoiceMTSPMMGUpdateOne {
	if id != nil {
		ccmuo = ccmuo.SetApplnMTSPMMGRefID(*id)
	}
	return ccmuo
}

// SetApplnMTSPMMGRef sets the "ApplnMTSPMMG_Ref" edge to the Exam_Application_MTSPMMG entity.
func (ccmuo *CadreChoiceMTSPMMGUpdateOne) SetApplnMTSPMMGRef(e *Exam_Application_MTSPMMG) *CadreChoiceMTSPMMGUpdateOne {
	return ccmuo.SetApplnMTSPMMGRefID(e.ID)
}

// Mutation returns the CadreChoiceMTSPMMGMutation object of the builder.
func (ccmuo *CadreChoiceMTSPMMGUpdateOne) Mutation() *CadreChoiceMTSPMMGMutation {
	return ccmuo.mutation
}

// ClearApplnMTSPMMGRef clears the "ApplnMTSPMMG_Ref" edge to the Exam_Application_MTSPMMG entity.
func (ccmuo *CadreChoiceMTSPMMGUpdateOne) ClearApplnMTSPMMGRef() *CadreChoiceMTSPMMGUpdateOne {
	ccmuo.mutation.ClearApplnMTSPMMGRef()
	return ccmuo
}

// Where appends a list predicates to the CadreChoiceMTSPMMGUpdate builder.
func (ccmuo *CadreChoiceMTSPMMGUpdateOne) Where(ps ...predicate.Cadre_Choice_MTSPMMG) *CadreChoiceMTSPMMGUpdateOne {
	ccmuo.mutation.Where(ps...)
	return ccmuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ccmuo *CadreChoiceMTSPMMGUpdateOne) Select(field string, fields ...string) *CadreChoiceMTSPMMGUpdateOne {
	ccmuo.fields = append([]string{field}, fields...)
	return ccmuo
}

// Save executes the query and returns the updated Cadre_Choice_MTSPMMG entity.
func (ccmuo *CadreChoiceMTSPMMGUpdateOne) Save(ctx context.Context) (*Cadre_Choice_MTSPMMG, error) {
	return withHooks(ctx, ccmuo.sqlSave, ccmuo.mutation, ccmuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ccmuo *CadreChoiceMTSPMMGUpdateOne) SaveX(ctx context.Context) *Cadre_Choice_MTSPMMG {
	node, err := ccmuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ccmuo *CadreChoiceMTSPMMGUpdateOne) Exec(ctx context.Context) error {
	_, err := ccmuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccmuo *CadreChoiceMTSPMMGUpdateOne) ExecX(ctx context.Context) {
	if err := ccmuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ccmuo *CadreChoiceMTSPMMGUpdateOne) sqlSave(ctx context.Context) (_node *Cadre_Choice_MTSPMMG, err error) {
	_spec := sqlgraph.NewUpdateSpec(cadre_choice_mtspmmg.Table, cadre_choice_mtspmmg.Columns, sqlgraph.NewFieldSpec(cadre_choice_mtspmmg.FieldID, field.TypeInt32))
	id, ok := ccmuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Cadre_Choice_MTSPMMG.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ccmuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, cadre_choice_mtspmmg.FieldID)
		for _, f := range fields {
			if !cadre_choice_mtspmmg.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != cadre_choice_mtspmmg.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ccmuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ccmuo.mutation.PlacePrefNo(); ok {
		_spec.SetField(cadre_choice_mtspmmg.FieldPlacePrefNo, field.TypeInt64, value)
	}
	if value, ok := ccmuo.mutation.AddedPlacePrefNo(); ok {
		_spec.AddField(cadre_choice_mtspmmg.FieldPlacePrefNo, field.TypeInt64, value)
	}
	if value, ok := ccmuo.mutation.PlacePrefValue(); ok {
		_spec.SetField(cadre_choice_mtspmmg.FieldPlacePrefValue, field.TypeString, value)
	}
	if value, ok := ccmuo.mutation.FeederCader(); ok {
		_spec.SetField(cadre_choice_mtspmmg.FieldFeederCader, field.TypeString, value)
	}
	if ccmuo.mutation.FeederCaderCleared() {
		_spec.ClearField(cadre_choice_mtspmmg.FieldFeederCader, field.TypeString)
	}
	if value, ok := ccmuo.mutation.FeederCaderDateOfJoining(); ok {
		_spec.SetField(cadre_choice_mtspmmg.FieldFeederCaderDateOfJoining, field.TypeString, value)
	}
	if ccmuo.mutation.FeederCaderDateOfJoiningCleared() {
		_spec.ClearField(cadre_choice_mtspmmg.FieldFeederCaderDateOfJoining, field.TypeString)
	}
	if value, ok := ccmuo.mutation.EmployeeID(); ok {
		_spec.SetField(cadre_choice_mtspmmg.FieldEmployeeID, field.TypeInt64, value)
	}
	if value, ok := ccmuo.mutation.AddedEmployeeID(); ok {
		_spec.AddField(cadre_choice_mtspmmg.FieldEmployeeID, field.TypeInt64, value)
	}
	if ccmuo.mutation.EmployeeIDCleared() {
		_spec.ClearField(cadre_choice_mtspmmg.FieldEmployeeID, field.TypeInt64)
	}
	if value, ok := ccmuo.mutation.UpdatedAt(); ok {
		_spec.SetField(cadre_choice_mtspmmg.FieldUpdatedAt, field.TypeTime, value)
	}
	if ccmuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(cadre_choice_mtspmmg.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := ccmuo.mutation.UpdatedBy(); ok {
		_spec.SetField(cadre_choice_mtspmmg.FieldUpdatedBy, field.TypeString, value)
	}
	if ccmuo.mutation.UpdatedByCleared() {
		_spec.ClearField(cadre_choice_mtspmmg.FieldUpdatedBy, field.TypeString)
	}
	if ccmuo.mutation.ApplnMTSPMMGRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   cadre_choice_mtspmmg.ApplnMTSPMMGRefTable,
			Columns: []string{cadre_choice_mtspmmg.ApplnMTSPMMGRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_application_mtspmmg.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ccmuo.mutation.ApplnMTSPMMGRefIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   cadre_choice_mtspmmg.ApplnMTSPMMGRefTable,
			Columns: []string{cadre_choice_mtspmmg.ApplnMTSPMMGRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_application_mtspmmg.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Cadre_Choice_MTSPMMG{config: ccmuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ccmuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{cadre_choice_mtspmmg.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ccmuo.mutation.done = true
	return _node, nil
}
