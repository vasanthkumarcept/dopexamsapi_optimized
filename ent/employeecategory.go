// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"recruit/ent/employeecategory"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// EmployeeCategory is the model entity for the EmployeeCategory schema.
type EmployeeCategory struct {
	config `json:"-"`
	// ID of the ent.
	ID int32 `json:"id,omitempty"`
	// CategoryCode holds the value of the "CategoryCode" field.
	CategoryCode string `json:"CategoryCode,omitempty"`
	// CategoryDescription holds the value of the "CategoryDescription" field.
	CategoryDescription string `json:"CategoryDescription,omitempty"`
	// MinimumMarks holds the value of the "MinimumMarks" field.
	MinimumMarks int32 `json:"MinimumMarks,omitempty"`
	// HallCategoryCode holds the value of the "HallCategoryCode" field.
	HallCategoryCode string `json:"HallCategoryCode,omitempty"`
	// OrderNumber holds the value of the "OrderNumber" field.
	OrderNumber string `json:"OrderNumber,omitempty"`
	// CreatedById holds the value of the "CreatedById" field.
	CreatedById int64 `json:"CreatedById,omitempty"`
	// CreatedByUserName holds the value of the "CreatedByUserName" field.
	CreatedByUserName string `json:"CreatedByUserName,omitempty"`
	// CreatedByEmployeeId holds the value of the "CreatedByEmployeeId" field.
	CreatedByEmployeeId string `json:"CreatedByEmployeeId,omitempty"`
	// CreatedByDesignation holds the value of the "CreatedByDesignation" field.
	CreatedByDesignation string `json:"CreatedByDesignation,omitempty"`
	// CreatedDate holds the value of the "CreatedDate" field.
	CreatedDate time.Time `json:"CreatedDate,omitempty"`
	// VerifiedById holds the value of the "VerifiedById" field.
	VerifiedById int64 `json:"VerifiedById,omitempty"`
	// VerifiedByUserName holds the value of the "VerifiedByUserName" field.
	VerifiedByUserName string `json:"VerifiedByUserName,omitempty"`
	// VerifiedByEmployeeId holds the value of the "VerifiedByEmployeeId" field.
	VerifiedByEmployeeId string `json:"VerifiedByEmployeeId,omitempty"`
	// VerifiedByDesignation holds the value of the "VerifiedByDesignation" field.
	VerifiedByDesignation string `json:"VerifiedByDesignation,omitempty"`
	// VerifiedDate holds the value of the "VerifiedDate" field.
	VerifiedDate time.Time `json:"VerifiedDate,omitempty"`
	// Status holds the value of the "Status" field.
	Status string `json:"Status,omitempty"`
	// DeletedById holds the value of the "DeletedById" field.
	DeletedById int64 `json:"DeletedById,omitempty"`
	// DeletedByUserName holds the value of the "DeletedByUserName" field.
	DeletedByUserName string `json:"DeletedByUserName,omitempty"`
	// DeletedByEmployeeId holds the value of the "DeletedByEmployeeId" field.
	DeletedByEmployeeId string `json:"DeletedByEmployeeId,omitempty"`
	// DeletedByDesignation holds the value of the "DeletedByDesignation" field.
	DeletedByDesignation string `json:"DeletedByDesignation,omitempty"`
	// DeletedDate holds the value of the "DeletedDate" field.
	DeletedDate time.Time `json:"DeletedDate,omitempty"`
	// ExamconfigurationExamcode holds the value of the "ExamconfigurationExamcode" field.
	ExamconfigurationExamcode int32 `json:"ExamconfigurationExamcode,omitempty"`
	// ExamShortDescription holds the value of the "ExamShortDescription" field.
	ExamShortDescription string `json:"ExamShortDescription,omitempty"`
	// ExamLongDescription holds the value of the "ExamLongDescription" field.
	ExamLongDescription string `json:"ExamLongDescription,omitempty"`
	// ExamPaperCodePaperCode holds the value of the "ExamPaperCode_paperCode" field.
	ExamPaperCodePaperCode int32 `json:"ExamPaperCode_paperCode,omitempty"`
	// EmployeeCategoryCategoryID holds the value of the "EmployeeCategory_categoryID" field.
	EmployeeCategoryCategoryID              int32 `json:"EmployeeCategory_categoryID,omitempty"`
	eligibility_master_category_eligibility *int32
	selectValues                            sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*EmployeeCategory) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case employeecategory.FieldID, employeecategory.FieldMinimumMarks, employeecategory.FieldCreatedById, employeecategory.FieldVerifiedById, employeecategory.FieldDeletedById, employeecategory.FieldExamconfigurationExamcode, employeecategory.FieldExamPaperCodePaperCode, employeecategory.FieldEmployeeCategoryCategoryID:
			values[i] = new(sql.NullInt64)
		case employeecategory.FieldCategoryCode, employeecategory.FieldCategoryDescription, employeecategory.FieldHallCategoryCode, employeecategory.FieldOrderNumber, employeecategory.FieldCreatedByUserName, employeecategory.FieldCreatedByEmployeeId, employeecategory.FieldCreatedByDesignation, employeecategory.FieldVerifiedByUserName, employeecategory.FieldVerifiedByEmployeeId, employeecategory.FieldVerifiedByDesignation, employeecategory.FieldStatus, employeecategory.FieldDeletedByUserName, employeecategory.FieldDeletedByEmployeeId, employeecategory.FieldDeletedByDesignation, employeecategory.FieldExamShortDescription, employeecategory.FieldExamLongDescription:
			values[i] = new(sql.NullString)
		case employeecategory.FieldCreatedDate, employeecategory.FieldVerifiedDate, employeecategory.FieldDeletedDate:
			values[i] = new(sql.NullTime)
		case employeecategory.ForeignKeys[0]: // eligibility_master_category_eligibility
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the EmployeeCategory fields.
func (ec *EmployeeCategory) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case employeecategory.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ec.ID = int32(value.Int64)
		case employeecategory.FieldCategoryCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field CategoryCode", values[i])
			} else if value.Valid {
				ec.CategoryCode = value.String
			}
		case employeecategory.FieldCategoryDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field CategoryDescription", values[i])
			} else if value.Valid {
				ec.CategoryDescription = value.String
			}
		case employeecategory.FieldMinimumMarks:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field MinimumMarks", values[i])
			} else if value.Valid {
				ec.MinimumMarks = int32(value.Int64)
			}
		case employeecategory.FieldHallCategoryCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field HallCategoryCode", values[i])
			} else if value.Valid {
				ec.HallCategoryCode = value.String
			}
		case employeecategory.FieldOrderNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field OrderNumber", values[i])
			} else if value.Valid {
				ec.OrderNumber = value.String
			}
		case employeecategory.FieldCreatedById:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field CreatedById", values[i])
			} else if value.Valid {
				ec.CreatedById = value.Int64
			}
		case employeecategory.FieldCreatedByUserName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field CreatedByUserName", values[i])
			} else if value.Valid {
				ec.CreatedByUserName = value.String
			}
		case employeecategory.FieldCreatedByEmployeeId:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field CreatedByEmployeeId", values[i])
			} else if value.Valid {
				ec.CreatedByEmployeeId = value.String
			}
		case employeecategory.FieldCreatedByDesignation:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field CreatedByDesignation", values[i])
			} else if value.Valid {
				ec.CreatedByDesignation = value.String
			}
		case employeecategory.FieldCreatedDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field CreatedDate", values[i])
			} else if value.Valid {
				ec.CreatedDate = value.Time
			}
		case employeecategory.FieldVerifiedById:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field VerifiedById", values[i])
			} else if value.Valid {
				ec.VerifiedById = value.Int64
			}
		case employeecategory.FieldVerifiedByUserName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field VerifiedByUserName", values[i])
			} else if value.Valid {
				ec.VerifiedByUserName = value.String
			}
		case employeecategory.FieldVerifiedByEmployeeId:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field VerifiedByEmployeeId", values[i])
			} else if value.Valid {
				ec.VerifiedByEmployeeId = value.String
			}
		case employeecategory.FieldVerifiedByDesignation:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field VerifiedByDesignation", values[i])
			} else if value.Valid {
				ec.VerifiedByDesignation = value.String
			}
		case employeecategory.FieldVerifiedDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field VerifiedDate", values[i])
			} else if value.Valid {
				ec.VerifiedDate = value.Time
			}
		case employeecategory.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Status", values[i])
			} else if value.Valid {
				ec.Status = value.String
			}
		case employeecategory.FieldDeletedById:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field DeletedById", values[i])
			} else if value.Valid {
				ec.DeletedById = value.Int64
			}
		case employeecategory.FieldDeletedByUserName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field DeletedByUserName", values[i])
			} else if value.Valid {
				ec.DeletedByUserName = value.String
			}
		case employeecategory.FieldDeletedByEmployeeId:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field DeletedByEmployeeId", values[i])
			} else if value.Valid {
				ec.DeletedByEmployeeId = value.String
			}
		case employeecategory.FieldDeletedByDesignation:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field DeletedByDesignation", values[i])
			} else if value.Valid {
				ec.DeletedByDesignation = value.String
			}
		case employeecategory.FieldDeletedDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field DeletedDate", values[i])
			} else if value.Valid {
				ec.DeletedDate = value.Time
			}
		case employeecategory.FieldExamconfigurationExamcode:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field ExamconfigurationExamcode", values[i])
			} else if value.Valid {
				ec.ExamconfigurationExamcode = int32(value.Int64)
			}
		case employeecategory.FieldExamShortDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ExamShortDescription", values[i])
			} else if value.Valid {
				ec.ExamShortDescription = value.String
			}
		case employeecategory.FieldExamLongDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ExamLongDescription", values[i])
			} else if value.Valid {
				ec.ExamLongDescription = value.String
			}
		case employeecategory.FieldExamPaperCodePaperCode:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field ExamPaperCode_paperCode", values[i])
			} else if value.Valid {
				ec.ExamPaperCodePaperCode = int32(value.Int64)
			}
		case employeecategory.FieldEmployeeCategoryCategoryID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field EmployeeCategory_categoryID", values[i])
			} else if value.Valid {
				ec.EmployeeCategoryCategoryID = int32(value.Int64)
			}
		case employeecategory.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field eligibility_master_category_eligibility", value)
			} else if value.Valid {
				ec.eligibility_master_category_eligibility = new(int32)
				*ec.eligibility_master_category_eligibility = int32(value.Int64)
			}
		default:
			ec.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the EmployeeCategory.
// This includes values selected through modifiers, order, etc.
func (ec *EmployeeCategory) Value(name string) (ent.Value, error) {
	return ec.selectValues.Get(name)
}

// Update returns a builder for updating this EmployeeCategory.
// Note that you need to call EmployeeCategory.Unwrap() before calling this method if this EmployeeCategory
// was returned from a transaction, and the transaction was committed or rolled back.
func (ec *EmployeeCategory) Update() *EmployeeCategoryUpdateOne {
	return NewEmployeeCategoryClient(ec.config).UpdateOne(ec)
}

// Unwrap unwraps the EmployeeCategory entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ec *EmployeeCategory) Unwrap() *EmployeeCategory {
	_tx, ok := ec.config.driver.(*txDriver)
	if !ok {
		panic("ent: EmployeeCategory is not a transactional entity")
	}
	ec.config.driver = _tx.drv
	return ec
}

// String implements the fmt.Stringer.
func (ec *EmployeeCategory) String() string {
	var builder strings.Builder
	builder.WriteString("EmployeeCategory(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ec.ID))
	builder.WriteString("CategoryCode=")
	builder.WriteString(ec.CategoryCode)
	builder.WriteString(", ")
	builder.WriteString("CategoryDescription=")
	builder.WriteString(ec.CategoryDescription)
	builder.WriteString(", ")
	builder.WriteString("MinimumMarks=")
	builder.WriteString(fmt.Sprintf("%v", ec.MinimumMarks))
	builder.WriteString(", ")
	builder.WriteString("HallCategoryCode=")
	builder.WriteString(ec.HallCategoryCode)
	builder.WriteString(", ")
	builder.WriteString("OrderNumber=")
	builder.WriteString(ec.OrderNumber)
	builder.WriteString(", ")
	builder.WriteString("CreatedById=")
	builder.WriteString(fmt.Sprintf("%v", ec.CreatedById))
	builder.WriteString(", ")
	builder.WriteString("CreatedByUserName=")
	builder.WriteString(ec.CreatedByUserName)
	builder.WriteString(", ")
	builder.WriteString("CreatedByEmployeeId=")
	builder.WriteString(ec.CreatedByEmployeeId)
	builder.WriteString(", ")
	builder.WriteString("CreatedByDesignation=")
	builder.WriteString(ec.CreatedByDesignation)
	builder.WriteString(", ")
	builder.WriteString("CreatedDate=")
	builder.WriteString(ec.CreatedDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("VerifiedById=")
	builder.WriteString(fmt.Sprintf("%v", ec.VerifiedById))
	builder.WriteString(", ")
	builder.WriteString("VerifiedByUserName=")
	builder.WriteString(ec.VerifiedByUserName)
	builder.WriteString(", ")
	builder.WriteString("VerifiedByEmployeeId=")
	builder.WriteString(ec.VerifiedByEmployeeId)
	builder.WriteString(", ")
	builder.WriteString("VerifiedByDesignation=")
	builder.WriteString(ec.VerifiedByDesignation)
	builder.WriteString(", ")
	builder.WriteString("VerifiedDate=")
	builder.WriteString(ec.VerifiedDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("Status=")
	builder.WriteString(ec.Status)
	builder.WriteString(", ")
	builder.WriteString("DeletedById=")
	builder.WriteString(fmt.Sprintf("%v", ec.DeletedById))
	builder.WriteString(", ")
	builder.WriteString("DeletedByUserName=")
	builder.WriteString(ec.DeletedByUserName)
	builder.WriteString(", ")
	builder.WriteString("DeletedByEmployeeId=")
	builder.WriteString(ec.DeletedByEmployeeId)
	builder.WriteString(", ")
	builder.WriteString("DeletedByDesignation=")
	builder.WriteString(ec.DeletedByDesignation)
	builder.WriteString(", ")
	builder.WriteString("DeletedDate=")
	builder.WriteString(ec.DeletedDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("ExamconfigurationExamcode=")
	builder.WriteString(fmt.Sprintf("%v", ec.ExamconfigurationExamcode))
	builder.WriteString(", ")
	builder.WriteString("ExamShortDescription=")
	builder.WriteString(ec.ExamShortDescription)
	builder.WriteString(", ")
	builder.WriteString("ExamLongDescription=")
	builder.WriteString(ec.ExamLongDescription)
	builder.WriteString(", ")
	builder.WriteString("ExamPaperCode_paperCode=")
	builder.WriteString(fmt.Sprintf("%v", ec.ExamPaperCodePaperCode))
	builder.WriteString(", ")
	builder.WriteString("EmployeeCategory_categoryID=")
	builder.WriteString(fmt.Sprintf("%v", ec.EmployeeCategoryCategoryID))
	builder.WriteByte(')')
	return builder.String()
}

// EmployeeCategories is a parsable slice of EmployeeCategory.
type EmployeeCategories []*EmployeeCategory
