// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"recruit/ent/placeofpreferenceip"
	"recruit/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PlaceOfPreferenceIPDelete is the builder for deleting a PlaceOfPreferenceIP entity.
type PlaceOfPreferenceIPDelete struct {
	config
	hooks    []Hook
	mutation *PlaceOfPreferenceIPMutation
}

// Where appends a list predicates to the PlaceOfPreferenceIPDelete builder.
func (popid *PlaceOfPreferenceIPDelete) Where(ps ...predicate.PlaceOfPreferenceIP) *PlaceOfPreferenceIPDelete {
	popid.mutation.Where(ps...)
	return popid
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (popid *PlaceOfPreferenceIPDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, popid.sqlExec, popid.mutation, popid.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (popid *PlaceOfPreferenceIPDelete) ExecX(ctx context.Context) int {
	n, err := popid.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (popid *PlaceOfPreferenceIPDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(placeofpreferenceip.Table, sqlgraph.NewFieldSpec(placeofpreferenceip.FieldID, field.TypeInt32))
	if ps := popid.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, popid.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	popid.mutation.done = true
	return affected, err
}

// PlaceOfPreferenceIPDeleteOne is the builder for deleting a single PlaceOfPreferenceIP entity.
type PlaceOfPreferenceIPDeleteOne struct {
	popid *PlaceOfPreferenceIPDelete
}

// Where appends a list predicates to the PlaceOfPreferenceIPDelete builder.
func (popido *PlaceOfPreferenceIPDeleteOne) Where(ps ...predicate.PlaceOfPreferenceIP) *PlaceOfPreferenceIPDeleteOne {
	popido.popid.mutation.Where(ps...)
	return popido
}

// Exec executes the deletion query.
func (popido *PlaceOfPreferenceIPDeleteOne) Exec(ctx context.Context) error {
	n, err := popido.popid.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{placeofpreferenceip.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (popido *PlaceOfPreferenceIPDeleteOne) ExecX(ctx context.Context) {
	if err := popido.Exec(ctx); err != nil {
		panic(err)
	}
}
