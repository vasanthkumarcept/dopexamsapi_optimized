// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"recruit/ent/adminmaster"
	"recruit/ent/logs"
	"recruit/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AdminMasterUpdate is the builder for updating AdminMaster entities.
type AdminMasterUpdate struct {
	config
	hooks    []Hook
	mutation *AdminMasterMutation
}

// Where appends a list predicates to the AdminMasterUpdate builder.
func (amu *AdminMasterUpdate) Where(ps ...predicate.AdminMaster) *AdminMasterUpdate {
	amu.mutation.Where(ps...)
	return amu
}

// SetEmployeeId sets the "EmployeeId" field.
func (amu *AdminMasterUpdate) SetEmployeeId(i int64) *AdminMasterUpdate {
	amu.mutation.ResetEmployeeId()
	amu.mutation.SetEmployeeId(i)
	return amu
}

// SetNillableEmployeeId sets the "EmployeeId" field if the given value is not nil.
func (amu *AdminMasterUpdate) SetNillableEmployeeId(i *int64) *AdminMasterUpdate {
	if i != nil {
		amu.SetEmployeeId(*i)
	}
	return amu
}

// AddEmployeeId adds i to the "EmployeeId" field.
func (amu *AdminMasterUpdate) AddEmployeeId(i int64) *AdminMasterUpdate {
	amu.mutation.AddEmployeeId(i)
	return amu
}

// ClearEmployeeId clears the value of the "EmployeeId" field.
func (amu *AdminMasterUpdate) ClearEmployeeId() *AdminMasterUpdate {
	amu.mutation.ClearEmployeeId()
	return amu
}

// SetEmployeeName sets the "EmployeeName" field.
func (amu *AdminMasterUpdate) SetEmployeeName(s string) *AdminMasterUpdate {
	amu.mutation.SetEmployeeName(s)
	return amu
}

// SetNillableEmployeeName sets the "EmployeeName" field if the given value is not nil.
func (amu *AdminMasterUpdate) SetNillableEmployeeName(s *string) *AdminMasterUpdate {
	if s != nil {
		amu.SetEmployeeName(*s)
	}
	return amu
}

// ClearEmployeeName clears the value of the "EmployeeName" field.
func (amu *AdminMasterUpdate) ClearEmployeeName() *AdminMasterUpdate {
	amu.mutation.ClearEmployeeName()
	return amu
}

// SetDesignation sets the "Designation" field.
func (amu *AdminMasterUpdate) SetDesignation(s string) *AdminMasterUpdate {
	amu.mutation.SetDesignation(s)
	return amu
}

// SetNillableDesignation sets the "Designation" field if the given value is not nil.
func (amu *AdminMasterUpdate) SetNillableDesignation(s *string) *AdminMasterUpdate {
	if s != nil {
		amu.SetDesignation(*s)
	}
	return amu
}

// ClearDesignation clears the value of the "Designation" field.
func (amu *AdminMasterUpdate) ClearDesignation() *AdminMasterUpdate {
	amu.mutation.ClearDesignation()
	return amu
}

// SetRoleUserCode sets the "RoleUserCode" field.
func (amu *AdminMasterUpdate) SetRoleUserCode(i int32) *AdminMasterUpdate {
	amu.mutation.ResetRoleUserCode()
	amu.mutation.SetRoleUserCode(i)
	return amu
}

// SetNillableRoleUserCode sets the "RoleUserCode" field if the given value is not nil.
func (amu *AdminMasterUpdate) SetNillableRoleUserCode(i *int32) *AdminMasterUpdate {
	if i != nil {
		amu.SetRoleUserCode(*i)
	}
	return amu
}

// AddRoleUserCode adds i to the "RoleUserCode" field.
func (amu *AdminMasterUpdate) AddRoleUserCode(i int32) *AdminMasterUpdate {
	amu.mutation.AddRoleUserCode(i)
	return amu
}

// ClearRoleUserCode clears the value of the "RoleUserCode" field.
func (amu *AdminMasterUpdate) ClearRoleUserCode() *AdminMasterUpdate {
	amu.mutation.ClearRoleUserCode()
	return amu
}

// SetRoleUserDescription sets the "RoleUserDescription" field.
func (amu *AdminMasterUpdate) SetRoleUserDescription(s string) *AdminMasterUpdate {
	amu.mutation.SetRoleUserDescription(s)
	return amu
}

// SetNillableRoleUserDescription sets the "RoleUserDescription" field if the given value is not nil.
func (amu *AdminMasterUpdate) SetNillableRoleUserDescription(s *string) *AdminMasterUpdate {
	if s != nil {
		amu.SetRoleUserDescription(*s)
	}
	return amu
}

// ClearRoleUserDescription clears the value of the "RoleUserDescription" field.
func (amu *AdminMasterUpdate) ClearRoleUserDescription() *AdminMasterUpdate {
	amu.mutation.ClearRoleUserDescription()
	return amu
}

// SetMobile sets the "Mobile" field.
func (amu *AdminMasterUpdate) SetMobile(s string) *AdminMasterUpdate {
	amu.mutation.SetMobile(s)
	return amu
}

// SetNillableMobile sets the "Mobile" field if the given value is not nil.
func (amu *AdminMasterUpdate) SetNillableMobile(s *string) *AdminMasterUpdate {
	if s != nil {
		amu.SetMobile(*s)
	}
	return amu
}

// ClearMobile clears the value of the "Mobile" field.
func (amu *AdminMasterUpdate) ClearMobile() *AdminMasterUpdate {
	amu.mutation.ClearMobile()
	return amu
}

// SetEmailID sets the "EmailID" field.
func (amu *AdminMasterUpdate) SetEmailID(s string) *AdminMasterUpdate {
	amu.mutation.SetEmailID(s)
	return amu
}

// SetNillableEmailID sets the "EmailID" field if the given value is not nil.
func (amu *AdminMasterUpdate) SetNillableEmailID(s *string) *AdminMasterUpdate {
	if s != nil {
		amu.SetEmailID(*s)
	}
	return amu
}

// ClearEmailID clears the value of the "EmailID" field.
func (amu *AdminMasterUpdate) ClearEmailID() *AdminMasterUpdate {
	amu.mutation.ClearEmailID()
	return amu
}

// SetUserName sets the "UserName" field.
func (amu *AdminMasterUpdate) SetUserName(s string) *AdminMasterUpdate {
	amu.mutation.SetUserName(s)
	return amu
}

// SetNillableUserName sets the "UserName" field if the given value is not nil.
func (amu *AdminMasterUpdate) SetNillableUserName(s *string) *AdminMasterUpdate {
	if s != nil {
		amu.SetUserName(*s)
	}
	return amu
}

// ClearUserName clears the value of the "UserName" field.
func (amu *AdminMasterUpdate) ClearUserName() *AdminMasterUpdate {
	amu.mutation.ClearUserName()
	return amu
}

// SetPassword sets the "Password" field.
func (amu *AdminMasterUpdate) SetPassword(s string) *AdminMasterUpdate {
	amu.mutation.SetPassword(s)
	return amu
}

// SetNillablePassword sets the "Password" field if the given value is not nil.
func (amu *AdminMasterUpdate) SetNillablePassword(s *string) *AdminMasterUpdate {
	if s != nil {
		amu.SetPassword(*s)
	}
	return amu
}

// ClearPassword clears the value of the "Password" field.
func (amu *AdminMasterUpdate) ClearPassword() *AdminMasterUpdate {
	amu.mutation.ClearPassword()
	return amu
}

// SetFacilityIDUniqueid sets the "FacilityIDUniqueid" field.
func (amu *AdminMasterUpdate) SetFacilityIDUniqueid(i int64) *AdminMasterUpdate {
	amu.mutation.ResetFacilityIDUniqueid()
	amu.mutation.SetFacilityIDUniqueid(i)
	return amu
}

// SetNillableFacilityIDUniqueid sets the "FacilityIDUniqueid" field if the given value is not nil.
func (amu *AdminMasterUpdate) SetNillableFacilityIDUniqueid(i *int64) *AdminMasterUpdate {
	if i != nil {
		amu.SetFacilityIDUniqueid(*i)
	}
	return amu
}

// AddFacilityIDUniqueid adds i to the "FacilityIDUniqueid" field.
func (amu *AdminMasterUpdate) AddFacilityIDUniqueid(i int64) *AdminMasterUpdate {
	amu.mutation.AddFacilityIDUniqueid(i)
	return amu
}

// ClearFacilityIDUniqueid clears the value of the "FacilityIDUniqueid" field.
func (amu *AdminMasterUpdate) ClearFacilityIDUniqueid() *AdminMasterUpdate {
	amu.mutation.ClearFacilityIDUniqueid()
	return amu
}

// SetFacilityID sets the "FacilityID" field.
func (amu *AdminMasterUpdate) SetFacilityID(s string) *AdminMasterUpdate {
	amu.mutation.SetFacilityID(s)
	return amu
}

// SetNillableFacilityID sets the "FacilityID" field if the given value is not nil.
func (amu *AdminMasterUpdate) SetNillableFacilityID(s *string) *AdminMasterUpdate {
	if s != nil {
		amu.SetFacilityID(*s)
	}
	return amu
}

// ClearFacilityID clears the value of the "FacilityID" field.
func (amu *AdminMasterUpdate) ClearFacilityID() *AdminMasterUpdate {
	amu.mutation.ClearFacilityID()
	return amu
}

// SetAuthorityFacilityName sets the "AuthorityFacilityName" field.
func (amu *AdminMasterUpdate) SetAuthorityFacilityName(s string) *AdminMasterUpdate {
	amu.mutation.SetAuthorityFacilityName(s)
	return amu
}

// SetNillableAuthorityFacilityName sets the "AuthorityFacilityName" field if the given value is not nil.
func (amu *AdminMasterUpdate) SetNillableAuthorityFacilityName(s *string) *AdminMasterUpdate {
	if s != nil {
		amu.SetAuthorityFacilityName(*s)
	}
	return amu
}

// ClearAuthorityFacilityName clears the value of the "AuthorityFacilityName" field.
func (amu *AdminMasterUpdate) ClearAuthorityFacilityName() *AdminMasterUpdate {
	amu.mutation.ClearAuthorityFacilityName()
	return amu
}

// SetFacilityType sets the "FacilityType" field.
func (amu *AdminMasterUpdate) SetFacilityType(s string) *AdminMasterUpdate {
	amu.mutation.SetFacilityType(s)
	return amu
}

// SetNillableFacilityType sets the "FacilityType" field if the given value is not nil.
func (amu *AdminMasterUpdate) SetNillableFacilityType(s *string) *AdminMasterUpdate {
	if s != nil {
		amu.SetFacilityType(*s)
	}
	return amu
}

// ClearFacilityType clears the value of the "FacilityType" field.
func (amu *AdminMasterUpdate) ClearFacilityType() *AdminMasterUpdate {
	amu.mutation.ClearFacilityType()
	return amu
}

// SetReportingOfficeFacilityId sets the "ReportingOfficeFacilityId" field.
func (amu *AdminMasterUpdate) SetReportingOfficeFacilityId(s string) *AdminMasterUpdate {
	amu.mutation.SetReportingOfficeFacilityId(s)
	return amu
}

// SetNillableReportingOfficeFacilityId sets the "ReportingOfficeFacilityId" field if the given value is not nil.
func (amu *AdminMasterUpdate) SetNillableReportingOfficeFacilityId(s *string) *AdminMasterUpdate {
	if s != nil {
		amu.SetReportingOfficeFacilityId(*s)
	}
	return amu
}

// ClearReportingOfficeFacilityId clears the value of the "ReportingOfficeFacilityId" field.
func (amu *AdminMasterUpdate) ClearReportingOfficeFacilityId() *AdminMasterUpdate {
	amu.mutation.ClearReportingOfficeFacilityId()
	return amu
}

// SetReportingOfficeFacilityName sets the "ReportingOfficeFacilityName" field.
func (amu *AdminMasterUpdate) SetReportingOfficeFacilityName(s string) *AdminMasterUpdate {
	amu.mutation.SetReportingOfficeFacilityName(s)
	return amu
}

// SetNillableReportingOfficeFacilityName sets the "ReportingOfficeFacilityName" field if the given value is not nil.
func (amu *AdminMasterUpdate) SetNillableReportingOfficeFacilityName(s *string) *AdminMasterUpdate {
	if s != nil {
		amu.SetReportingOfficeFacilityName(*s)
	}
	return amu
}

// ClearReportingOfficeFacilityName clears the value of the "ReportingOfficeFacilityName" field.
func (amu *AdminMasterUpdate) ClearReportingOfficeFacilityName() *AdminMasterUpdate {
	amu.mutation.ClearReportingOfficeFacilityName()
	return amu
}

// SetCircleOfficeFacilityId sets the "CircleOfficeFacilityId" field.
func (amu *AdminMasterUpdate) SetCircleOfficeFacilityId(s string) *AdminMasterUpdate {
	amu.mutation.SetCircleOfficeFacilityId(s)
	return amu
}

// SetNillableCircleOfficeFacilityId sets the "CircleOfficeFacilityId" field if the given value is not nil.
func (amu *AdminMasterUpdate) SetNillableCircleOfficeFacilityId(s *string) *AdminMasterUpdate {
	if s != nil {
		amu.SetCircleOfficeFacilityId(*s)
	}
	return amu
}

// ClearCircleOfficeFacilityId clears the value of the "CircleOfficeFacilityId" field.
func (amu *AdminMasterUpdate) ClearCircleOfficeFacilityId() *AdminMasterUpdate {
	amu.mutation.ClearCircleOfficeFacilityId()
	return amu
}

// SetCircleOfficeName sets the "CircleOfficeName" field.
func (amu *AdminMasterUpdate) SetCircleOfficeName(s string) *AdminMasterUpdate {
	amu.mutation.SetCircleOfficeName(s)
	return amu
}

// SetNillableCircleOfficeName sets the "CircleOfficeName" field if the given value is not nil.
func (amu *AdminMasterUpdate) SetNillableCircleOfficeName(s *string) *AdminMasterUpdate {
	if s != nil {
		amu.SetCircleOfficeName(*s)
	}
	return amu
}

// ClearCircleOfficeName clears the value of the "CircleOfficeName" field.
func (amu *AdminMasterUpdate) ClearCircleOfficeName() *AdminMasterUpdate {
	amu.mutation.ClearCircleOfficeName()
	return amu
}

// SetUidToken sets the "UidToken" field.
func (amu *AdminMasterUpdate) SetUidToken(s string) *AdminMasterUpdate {
	amu.mutation.SetUidToken(s)
	return amu
}

// SetNillableUidToken sets the "UidToken" field if the given value is not nil.
func (amu *AdminMasterUpdate) SetNillableUidToken(s *string) *AdminMasterUpdate {
	if s != nil {
		amu.SetUidToken(*s)
	}
	return amu
}

// ClearUidToken clears the value of the "UidToken" field.
func (amu *AdminMasterUpdate) ClearUidToken() *AdminMasterUpdate {
	amu.mutation.ClearUidToken()
	return amu
}

// SetStatuss sets the "Statuss" field.
func (amu *AdminMasterUpdate) SetStatuss(s string) *AdminMasterUpdate {
	amu.mutation.SetStatuss(s)
	return amu
}

// SetNillableStatuss sets the "Statuss" field if the given value is not nil.
func (amu *AdminMasterUpdate) SetNillableStatuss(s *string) *AdminMasterUpdate {
	if s != nil {
		amu.SetStatuss(*s)
	}
	return amu
}

// ClearStatuss clears the value of the "Statuss" field.
func (amu *AdminMasterUpdate) ClearStatuss() *AdminMasterUpdate {
	amu.mutation.ClearStatuss()
	return amu
}

// SetOTP sets the "OTP" field.
func (amu *AdminMasterUpdate) SetOTP(i int32) *AdminMasterUpdate {
	amu.mutation.ResetOTP()
	amu.mutation.SetOTP(i)
	return amu
}

// SetNillableOTP sets the "OTP" field if the given value is not nil.
func (amu *AdminMasterUpdate) SetNillableOTP(i *int32) *AdminMasterUpdate {
	if i != nil {
		amu.SetOTP(*i)
	}
	return amu
}

// AddOTP adds i to the "OTP" field.
func (amu *AdminMasterUpdate) AddOTP(i int32) *AdminMasterUpdate {
	amu.mutation.AddOTP(i)
	return amu
}

// ClearOTP clears the value of the "OTP" field.
func (amu *AdminMasterUpdate) ClearOTP() *AdminMasterUpdate {
	amu.mutation.ClearOTP()
	return amu
}

// SetOTPSavedTime sets the "OTPSavedTime" field.
func (amu *AdminMasterUpdate) SetOTPSavedTime(t time.Time) *AdminMasterUpdate {
	amu.mutation.SetOTPSavedTime(t)
	return amu
}

// SetNillableOTPSavedTime sets the "OTPSavedTime" field if the given value is not nil.
func (amu *AdminMasterUpdate) SetNillableOTPSavedTime(t *time.Time) *AdminMasterUpdate {
	if t != nil {
		amu.SetOTPSavedTime(*t)
	}
	return amu
}

// ClearOTPSavedTime clears the value of the "OTPSavedTime" field.
func (amu *AdminMasterUpdate) ClearOTPSavedTime() *AdminMasterUpdate {
	amu.mutation.ClearOTPSavedTime()
	return amu
}

// SetOTPTriggeredTime sets the "OTPTriggeredTime" field.
func (amu *AdminMasterUpdate) SetOTPTriggeredTime(t time.Time) *AdminMasterUpdate {
	amu.mutation.SetOTPTriggeredTime(t)
	return amu
}

// SetNillableOTPTriggeredTime sets the "OTPTriggeredTime" field if the given value is not nil.
func (amu *AdminMasterUpdate) SetNillableOTPTriggeredTime(t *time.Time) *AdminMasterUpdate {
	if t != nil {
		amu.SetOTPTriggeredTime(*t)
	}
	return amu
}

// ClearOTPTriggeredTime clears the value of the "OTPTriggeredTime" field.
func (amu *AdminMasterUpdate) ClearOTPTriggeredTime() *AdminMasterUpdate {
	amu.mutation.ClearOTPTriggeredTime()
	return amu
}

// SetOTPExpiryTime sets the "OTPExpiryTime" field.
func (amu *AdminMasterUpdate) SetOTPExpiryTime(t time.Time) *AdminMasterUpdate {
	amu.mutation.SetOTPExpiryTime(t)
	return amu
}

// SetNillableOTPExpiryTime sets the "OTPExpiryTime" field if the given value is not nil.
func (amu *AdminMasterUpdate) SetNillableOTPExpiryTime(t *time.Time) *AdminMasterUpdate {
	if t != nil {
		amu.SetOTPExpiryTime(*t)
	}
	return amu
}

// ClearOTPExpiryTime clears the value of the "OTPExpiryTime" field.
func (amu *AdminMasterUpdate) ClearOTPExpiryTime() *AdminMasterUpdate {
	amu.mutation.ClearOTPExpiryTime()
	return amu
}

// SetOTPRemarks sets the "OTPRemarks" field.
func (amu *AdminMasterUpdate) SetOTPRemarks(s string) *AdminMasterUpdate {
	amu.mutation.SetOTPRemarks(s)
	return amu
}

// SetNillableOTPRemarks sets the "OTPRemarks" field if the given value is not nil.
func (amu *AdminMasterUpdate) SetNillableOTPRemarks(s *string) *AdminMasterUpdate {
	if s != nil {
		amu.SetOTPRemarks(*s)
	}
	return amu
}

// ClearOTPRemarks clears the value of the "OTPRemarks" field.
func (amu *AdminMasterUpdate) ClearOTPRemarks() *AdminMasterUpdate {
	amu.mutation.ClearOTPRemarks()
	return amu
}

// SetCreatedById sets the "CreatedById" field.
func (amu *AdminMasterUpdate) SetCreatedById(i int64) *AdminMasterUpdate {
	amu.mutation.ResetCreatedById()
	amu.mutation.SetCreatedById(i)
	return amu
}

// SetNillableCreatedById sets the "CreatedById" field if the given value is not nil.
func (amu *AdminMasterUpdate) SetNillableCreatedById(i *int64) *AdminMasterUpdate {
	if i != nil {
		amu.SetCreatedById(*i)
	}
	return amu
}

// AddCreatedById adds i to the "CreatedById" field.
func (amu *AdminMasterUpdate) AddCreatedById(i int64) *AdminMasterUpdate {
	amu.mutation.AddCreatedById(i)
	return amu
}

// ClearCreatedById clears the value of the "CreatedById" field.
func (amu *AdminMasterUpdate) ClearCreatedById() *AdminMasterUpdate {
	amu.mutation.ClearCreatedById()
	return amu
}

// SetCreatedByUserName sets the "CreatedByUserName" field.
func (amu *AdminMasterUpdate) SetCreatedByUserName(s string) *AdminMasterUpdate {
	amu.mutation.SetCreatedByUserName(s)
	return amu
}

// SetNillableCreatedByUserName sets the "CreatedByUserName" field if the given value is not nil.
func (amu *AdminMasterUpdate) SetNillableCreatedByUserName(s *string) *AdminMasterUpdate {
	if s != nil {
		amu.SetCreatedByUserName(*s)
	}
	return amu
}

// ClearCreatedByUserName clears the value of the "CreatedByUserName" field.
func (amu *AdminMasterUpdate) ClearCreatedByUserName() *AdminMasterUpdate {
	amu.mutation.ClearCreatedByUserName()
	return amu
}

// SetCreatedByEmpId sets the "CreatedByEmpId" field.
func (amu *AdminMasterUpdate) SetCreatedByEmpId(i int64) *AdminMasterUpdate {
	amu.mutation.ResetCreatedByEmpId()
	amu.mutation.SetCreatedByEmpId(i)
	return amu
}

// SetNillableCreatedByEmpId sets the "CreatedByEmpId" field if the given value is not nil.
func (amu *AdminMasterUpdate) SetNillableCreatedByEmpId(i *int64) *AdminMasterUpdate {
	if i != nil {
		amu.SetCreatedByEmpId(*i)
	}
	return amu
}

// AddCreatedByEmpId adds i to the "CreatedByEmpId" field.
func (amu *AdminMasterUpdate) AddCreatedByEmpId(i int64) *AdminMasterUpdate {
	amu.mutation.AddCreatedByEmpId(i)
	return amu
}

// ClearCreatedByEmpId clears the value of the "CreatedByEmpId" field.
func (amu *AdminMasterUpdate) ClearCreatedByEmpId() *AdminMasterUpdate {
	amu.mutation.ClearCreatedByEmpId()
	return amu
}

// SetCreatedByDesignation sets the "CreatedByDesignation" field.
func (amu *AdminMasterUpdate) SetCreatedByDesignation(s string) *AdminMasterUpdate {
	amu.mutation.SetCreatedByDesignation(s)
	return amu
}

// SetNillableCreatedByDesignation sets the "CreatedByDesignation" field if the given value is not nil.
func (amu *AdminMasterUpdate) SetNillableCreatedByDesignation(s *string) *AdminMasterUpdate {
	if s != nil {
		amu.SetCreatedByDesignation(*s)
	}
	return amu
}

// ClearCreatedByDesignation clears the value of the "CreatedByDesignation" field.
func (amu *AdminMasterUpdate) ClearCreatedByDesignation() *AdminMasterUpdate {
	amu.mutation.ClearCreatedByDesignation()
	return amu
}

// SetCreatedDate sets the "CreatedDate" field.
func (amu *AdminMasterUpdate) SetCreatedDate(t time.Time) *AdminMasterUpdate {
	amu.mutation.SetCreatedDate(t)
	return amu
}

// SetNillableCreatedDate sets the "CreatedDate" field if the given value is not nil.
func (amu *AdminMasterUpdate) SetNillableCreatedDate(t *time.Time) *AdminMasterUpdate {
	if t != nil {
		amu.SetCreatedDate(*t)
	}
	return amu
}

// ClearCreatedDate clears the value of the "CreatedDate" field.
func (amu *AdminMasterUpdate) ClearCreatedDate() *AdminMasterUpdate {
	amu.mutation.ClearCreatedDate()
	return amu
}

// SetDeletedById sets the "DeletedById" field.
func (amu *AdminMasterUpdate) SetDeletedById(i int64) *AdminMasterUpdate {
	amu.mutation.ResetDeletedById()
	amu.mutation.SetDeletedById(i)
	return amu
}

// SetNillableDeletedById sets the "DeletedById" field if the given value is not nil.
func (amu *AdminMasterUpdate) SetNillableDeletedById(i *int64) *AdminMasterUpdate {
	if i != nil {
		amu.SetDeletedById(*i)
	}
	return amu
}

// AddDeletedById adds i to the "DeletedById" field.
func (amu *AdminMasterUpdate) AddDeletedById(i int64) *AdminMasterUpdate {
	amu.mutation.AddDeletedById(i)
	return amu
}

// ClearDeletedById clears the value of the "DeletedById" field.
func (amu *AdminMasterUpdate) ClearDeletedById() *AdminMasterUpdate {
	amu.mutation.ClearDeletedById()
	return amu
}

// SetDeletedByUserName sets the "DeletedByUserName" field.
func (amu *AdminMasterUpdate) SetDeletedByUserName(s string) *AdminMasterUpdate {
	amu.mutation.SetDeletedByUserName(s)
	return amu
}

// SetNillableDeletedByUserName sets the "DeletedByUserName" field if the given value is not nil.
func (amu *AdminMasterUpdate) SetNillableDeletedByUserName(s *string) *AdminMasterUpdate {
	if s != nil {
		amu.SetDeletedByUserName(*s)
	}
	return amu
}

// ClearDeletedByUserName clears the value of the "DeletedByUserName" field.
func (amu *AdminMasterUpdate) ClearDeletedByUserName() *AdminMasterUpdate {
	amu.mutation.ClearDeletedByUserName()
	return amu
}

// SetDeletedByEmpId sets the "DeletedByEmpId" field.
func (amu *AdminMasterUpdate) SetDeletedByEmpId(i int64) *AdminMasterUpdate {
	amu.mutation.ResetDeletedByEmpId()
	amu.mutation.SetDeletedByEmpId(i)
	return amu
}

// SetNillableDeletedByEmpId sets the "DeletedByEmpId" field if the given value is not nil.
func (amu *AdminMasterUpdate) SetNillableDeletedByEmpId(i *int64) *AdminMasterUpdate {
	if i != nil {
		amu.SetDeletedByEmpId(*i)
	}
	return amu
}

// AddDeletedByEmpId adds i to the "DeletedByEmpId" field.
func (amu *AdminMasterUpdate) AddDeletedByEmpId(i int64) *AdminMasterUpdate {
	amu.mutation.AddDeletedByEmpId(i)
	return amu
}

// ClearDeletedByEmpId clears the value of the "DeletedByEmpId" field.
func (amu *AdminMasterUpdate) ClearDeletedByEmpId() *AdminMasterUpdate {
	amu.mutation.ClearDeletedByEmpId()
	return amu
}

// SetDeletedByDesignation sets the "DeletedByDesignation" field.
func (amu *AdminMasterUpdate) SetDeletedByDesignation(s string) *AdminMasterUpdate {
	amu.mutation.SetDeletedByDesignation(s)
	return amu
}

// SetNillableDeletedByDesignation sets the "DeletedByDesignation" field if the given value is not nil.
func (amu *AdminMasterUpdate) SetNillableDeletedByDesignation(s *string) *AdminMasterUpdate {
	if s != nil {
		amu.SetDeletedByDesignation(*s)
	}
	return amu
}

// ClearDeletedByDesignation clears the value of the "DeletedByDesignation" field.
func (amu *AdminMasterUpdate) ClearDeletedByDesignation() *AdminMasterUpdate {
	amu.mutation.ClearDeletedByDesignation()
	return amu
}

// SetDeletedDate sets the "DeletedDate" field.
func (amu *AdminMasterUpdate) SetDeletedDate(t time.Time) *AdminMasterUpdate {
	amu.mutation.SetDeletedDate(t)
	return amu
}

// SetNillableDeletedDate sets the "DeletedDate" field if the given value is not nil.
func (amu *AdminMasterUpdate) SetNillableDeletedDate(t *time.Time) *AdminMasterUpdate {
	if t != nil {
		amu.SetDeletedDate(*t)
	}
	return amu
}

// ClearDeletedDate clears the value of the "DeletedDate" field.
func (amu *AdminMasterUpdate) ClearDeletedDate() *AdminMasterUpdate {
	amu.mutation.ClearDeletedDate()
	return amu
}

// SetModifiedById sets the "ModifiedById" field.
func (amu *AdminMasterUpdate) SetModifiedById(i int) *AdminMasterUpdate {
	amu.mutation.ResetModifiedById()
	amu.mutation.SetModifiedById(i)
	return amu
}

// SetNillableModifiedById sets the "ModifiedById" field if the given value is not nil.
func (amu *AdminMasterUpdate) SetNillableModifiedById(i *int) *AdminMasterUpdate {
	if i != nil {
		amu.SetModifiedById(*i)
	}
	return amu
}

// AddModifiedById adds i to the "ModifiedById" field.
func (amu *AdminMasterUpdate) AddModifiedById(i int) *AdminMasterUpdate {
	amu.mutation.AddModifiedById(i)
	return amu
}

// ClearModifiedById clears the value of the "ModifiedById" field.
func (amu *AdminMasterUpdate) ClearModifiedById() *AdminMasterUpdate {
	amu.mutation.ClearModifiedById()
	return amu
}

// SetModifiedByUserName sets the "ModifiedByUserName" field.
func (amu *AdminMasterUpdate) SetModifiedByUserName(s string) *AdminMasterUpdate {
	amu.mutation.SetModifiedByUserName(s)
	return amu
}

// SetNillableModifiedByUserName sets the "ModifiedByUserName" field if the given value is not nil.
func (amu *AdminMasterUpdate) SetNillableModifiedByUserName(s *string) *AdminMasterUpdate {
	if s != nil {
		amu.SetModifiedByUserName(*s)
	}
	return amu
}

// ClearModifiedByUserName clears the value of the "ModifiedByUserName" field.
func (amu *AdminMasterUpdate) ClearModifiedByUserName() *AdminMasterUpdate {
	amu.mutation.ClearModifiedByUserName()
	return amu
}

// SetModifiedByEmpId sets the "ModifiedByEmpId" field.
func (amu *AdminMasterUpdate) SetModifiedByEmpId(i int64) *AdminMasterUpdate {
	amu.mutation.ResetModifiedByEmpId()
	amu.mutation.SetModifiedByEmpId(i)
	return amu
}

// SetNillableModifiedByEmpId sets the "ModifiedByEmpId" field if the given value is not nil.
func (amu *AdminMasterUpdate) SetNillableModifiedByEmpId(i *int64) *AdminMasterUpdate {
	if i != nil {
		amu.SetModifiedByEmpId(*i)
	}
	return amu
}

// AddModifiedByEmpId adds i to the "ModifiedByEmpId" field.
func (amu *AdminMasterUpdate) AddModifiedByEmpId(i int64) *AdminMasterUpdate {
	amu.mutation.AddModifiedByEmpId(i)
	return amu
}

// ClearModifiedByEmpId clears the value of the "ModifiedByEmpId" field.
func (amu *AdminMasterUpdate) ClearModifiedByEmpId() *AdminMasterUpdate {
	amu.mutation.ClearModifiedByEmpId()
	return amu
}

// SetModifiedByDesignantion sets the "ModifiedByDesignantion" field.
func (amu *AdminMasterUpdate) SetModifiedByDesignantion(s string) *AdminMasterUpdate {
	amu.mutation.SetModifiedByDesignantion(s)
	return amu
}

// SetNillableModifiedByDesignantion sets the "ModifiedByDesignantion" field if the given value is not nil.
func (amu *AdminMasterUpdate) SetNillableModifiedByDesignantion(s *string) *AdminMasterUpdate {
	if s != nil {
		amu.SetModifiedByDesignantion(*s)
	}
	return amu
}

// ClearModifiedByDesignantion clears the value of the "ModifiedByDesignantion" field.
func (amu *AdminMasterUpdate) ClearModifiedByDesignantion() *AdminMasterUpdate {
	amu.mutation.ClearModifiedByDesignantion()
	return amu
}

// SetModifiedDate sets the "ModifiedDate" field.
func (amu *AdminMasterUpdate) SetModifiedDate(t time.Time) *AdminMasterUpdate {
	amu.mutation.SetModifiedDate(t)
	return amu
}

// SetNillableModifiedDate sets the "ModifiedDate" field if the given value is not nil.
func (amu *AdminMasterUpdate) SetNillableModifiedDate(t *time.Time) *AdminMasterUpdate {
	if t != nil {
		amu.SetModifiedDate(*t)
	}
	return amu
}

// ClearModifiedDate clears the value of the "ModifiedDate" field.
func (amu *AdminMasterUpdate) ClearModifiedDate() *AdminMasterUpdate {
	amu.mutation.ClearModifiedDate()
	return amu
}

// SetDeletedBy sets the "DeletedBy" field.
func (amu *AdminMasterUpdate) SetDeletedBy(s string) *AdminMasterUpdate {
	amu.mutation.SetDeletedBy(s)
	return amu
}

// SetNillableDeletedBy sets the "DeletedBy" field if the given value is not nil.
func (amu *AdminMasterUpdate) SetNillableDeletedBy(s *string) *AdminMasterUpdate {
	if s != nil {
		amu.SetDeletedBy(*s)
	}
	return amu
}

// ClearDeletedBy clears the value of the "DeletedBy" field.
func (amu *AdminMasterUpdate) ClearDeletedBy() *AdminMasterUpdate {
	amu.mutation.ClearDeletedBy()
	return amu
}

// SetDeletedbyid sets the "Deletedbyid" field.
func (amu *AdminMasterUpdate) SetDeletedbyid(s string) *AdminMasterUpdate {
	amu.mutation.SetDeletedbyid(s)
	return amu
}

// SetNillableDeletedbyid sets the "Deletedbyid" field if the given value is not nil.
func (amu *AdminMasterUpdate) SetNillableDeletedbyid(s *string) *AdminMasterUpdate {
	if s != nil {
		amu.SetDeletedbyid(*s)
	}
	return amu
}

// ClearDeletedbyid clears the value of the "Deletedbyid" field.
func (amu *AdminMasterUpdate) ClearDeletedbyid() *AdminMasterUpdate {
	amu.mutation.ClearDeletedbyid()
	return amu
}

// SetNewPasswordRequest sets the "NewPasswordRequest" field.
func (amu *AdminMasterUpdate) SetNewPasswordRequest(b bool) *AdminMasterUpdate {
	amu.mutation.SetNewPasswordRequest(b)
	return amu
}

// SetNillableNewPasswordRequest sets the "NewPasswordRequest" field if the given value is not nil.
func (amu *AdminMasterUpdate) SetNillableNewPasswordRequest(b *bool) *AdminMasterUpdate {
	if b != nil {
		amu.SetNewPasswordRequest(*b)
	}
	return amu
}

// ClearNewPasswordRequest clears the value of the "NewPasswordRequest" field.
func (amu *AdminMasterUpdate) ClearNewPasswordRequest() *AdminMasterUpdate {
	amu.mutation.ClearNewPasswordRequest()
	return amu
}

// SetEventTime sets the "EventTime" field.
func (amu *AdminMasterUpdate) SetEventTime(t time.Time) *AdminMasterUpdate {
	amu.mutation.SetEventTime(t)
	return amu
}

// SetNillableEventTime sets the "EventTime" field if the given value is not nil.
func (amu *AdminMasterUpdate) SetNillableEventTime(t *time.Time) *AdminMasterUpdate {
	if t != nil {
		amu.SetEventTime(*t)
	}
	return amu
}

// ClearEventTime clears the value of the "EventTime" field.
func (amu *AdminMasterUpdate) ClearEventTime() *AdminMasterUpdate {
	amu.mutation.ClearEventTime()
	return amu
}

// SetUUID sets the "UUID" field.
func (amu *AdminMasterUpdate) SetUUID(i int64) *AdminMasterUpdate {
	amu.mutation.ResetUUID()
	amu.mutation.SetUUID(i)
	return amu
}

// SetNillableUUID sets the "UUID" field if the given value is not nil.
func (amu *AdminMasterUpdate) SetNillableUUID(i *int64) *AdminMasterUpdate {
	if i != nil {
		amu.SetUUID(*i)
	}
	return amu
}

// AddUUID adds i to the "UUID" field.
func (amu *AdminMasterUpdate) AddUUID(i int64) *AdminMasterUpdate {
	amu.mutation.AddUUID(i)
	return amu
}

// ClearUUID clears the value of the "UUID" field.
func (amu *AdminMasterUpdate) ClearUUID() *AdminMasterUpdate {
	amu.mutation.ClearUUID()
	return amu
}

// SetUpdatedby sets the "Updatedby" field.
func (amu *AdminMasterUpdate) SetUpdatedby(s string) *AdminMasterUpdate {
	amu.mutation.SetUpdatedby(s)
	return amu
}

// SetNillableUpdatedby sets the "Updatedby" field if the given value is not nil.
func (amu *AdminMasterUpdate) SetNillableUpdatedby(s *string) *AdminMasterUpdate {
	if s != nil {
		amu.SetUpdatedby(*s)
	}
	return amu
}

// ClearUpdatedby clears the value of the "Updatedby" field.
func (amu *AdminMasterUpdate) ClearUpdatedby() *AdminMasterUpdate {
	amu.mutation.ClearUpdatedby()
	return amu
}

// SetUpdatedDate sets the "updatedDate" field.
func (amu *AdminMasterUpdate) SetUpdatedDate(t time.Time) *AdminMasterUpdate {
	amu.mutation.SetUpdatedDate(t)
	return amu
}

// SetNillableUpdatedDate sets the "updatedDate" field if the given value is not nil.
func (amu *AdminMasterUpdate) SetNillableUpdatedDate(t *time.Time) *AdminMasterUpdate {
	if t != nil {
		amu.SetUpdatedDate(*t)
	}
	return amu
}

// ClearUpdatedDate clears the value of the "updatedDate" field.
func (amu *AdminMasterUpdate) ClearUpdatedDate() *AdminMasterUpdate {
	amu.mutation.ClearUpdatedDate()
	return amu
}

// AddLogDatumIDs adds the "LogData" edge to the Logs entity by IDs.
func (amu *AdminMasterUpdate) AddLogDatumIDs(ids ...int64) *AdminMasterUpdate {
	amu.mutation.AddLogDatumIDs(ids...)
	return amu
}

// AddLogData adds the "LogData" edges to the Logs entity.
func (amu *AdminMasterUpdate) AddLogData(l ...*Logs) *AdminMasterUpdate {
	ids := make([]int64, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return amu.AddLogDatumIDs(ids...)
}

// Mutation returns the AdminMasterMutation object of the builder.
func (amu *AdminMasterUpdate) Mutation() *AdminMasterMutation {
	return amu.mutation
}

// ClearLogData clears all "LogData" edges to the Logs entity.
func (amu *AdminMasterUpdate) ClearLogData() *AdminMasterUpdate {
	amu.mutation.ClearLogData()
	return amu
}

// RemoveLogDatumIDs removes the "LogData" edge to Logs entities by IDs.
func (amu *AdminMasterUpdate) RemoveLogDatumIDs(ids ...int64) *AdminMasterUpdate {
	amu.mutation.RemoveLogDatumIDs(ids...)
	return amu
}

// RemoveLogData removes "LogData" edges to Logs entities.
func (amu *AdminMasterUpdate) RemoveLogData(l ...*Logs) *AdminMasterUpdate {
	ids := make([]int64, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return amu.RemoveLogDatumIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (amu *AdminMasterUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, amu.sqlSave, amu.mutation, amu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (amu *AdminMasterUpdate) SaveX(ctx context.Context) int {
	affected, err := amu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (amu *AdminMasterUpdate) Exec(ctx context.Context) error {
	_, err := amu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (amu *AdminMasterUpdate) ExecX(ctx context.Context) {
	if err := amu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (amu *AdminMasterUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(adminmaster.Table, adminmaster.Columns, sqlgraph.NewFieldSpec(adminmaster.FieldID, field.TypeInt64))
	if ps := amu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := amu.mutation.EmployeeId(); ok {
		_spec.SetField(adminmaster.FieldEmployeeId, field.TypeInt64, value)
	}
	if value, ok := amu.mutation.AddedEmployeeId(); ok {
		_spec.AddField(adminmaster.FieldEmployeeId, field.TypeInt64, value)
	}
	if amu.mutation.EmployeeIdCleared() {
		_spec.ClearField(adminmaster.FieldEmployeeId, field.TypeInt64)
	}
	if value, ok := amu.mutation.EmployeeName(); ok {
		_spec.SetField(adminmaster.FieldEmployeeName, field.TypeString, value)
	}
	if amu.mutation.EmployeeNameCleared() {
		_spec.ClearField(adminmaster.FieldEmployeeName, field.TypeString)
	}
	if value, ok := amu.mutation.Designation(); ok {
		_spec.SetField(adminmaster.FieldDesignation, field.TypeString, value)
	}
	if amu.mutation.DesignationCleared() {
		_spec.ClearField(adminmaster.FieldDesignation, field.TypeString)
	}
	if value, ok := amu.mutation.RoleUserCode(); ok {
		_spec.SetField(adminmaster.FieldRoleUserCode, field.TypeInt32, value)
	}
	if value, ok := amu.mutation.AddedRoleUserCode(); ok {
		_spec.AddField(adminmaster.FieldRoleUserCode, field.TypeInt32, value)
	}
	if amu.mutation.RoleUserCodeCleared() {
		_spec.ClearField(adminmaster.FieldRoleUserCode, field.TypeInt32)
	}
	if value, ok := amu.mutation.RoleUserDescription(); ok {
		_spec.SetField(adminmaster.FieldRoleUserDescription, field.TypeString, value)
	}
	if amu.mutation.RoleUserDescriptionCleared() {
		_spec.ClearField(adminmaster.FieldRoleUserDescription, field.TypeString)
	}
	if value, ok := amu.mutation.Mobile(); ok {
		_spec.SetField(adminmaster.FieldMobile, field.TypeString, value)
	}
	if amu.mutation.MobileCleared() {
		_spec.ClearField(adminmaster.FieldMobile, field.TypeString)
	}
	if value, ok := amu.mutation.EmailID(); ok {
		_spec.SetField(adminmaster.FieldEmailID, field.TypeString, value)
	}
	if amu.mutation.EmailIDCleared() {
		_spec.ClearField(adminmaster.FieldEmailID, field.TypeString)
	}
	if value, ok := amu.mutation.UserName(); ok {
		_spec.SetField(adminmaster.FieldUserName, field.TypeString, value)
	}
	if amu.mutation.UserNameCleared() {
		_spec.ClearField(adminmaster.FieldUserName, field.TypeString)
	}
	if value, ok := amu.mutation.Password(); ok {
		_spec.SetField(adminmaster.FieldPassword, field.TypeString, value)
	}
	if amu.mutation.PasswordCleared() {
		_spec.ClearField(adminmaster.FieldPassword, field.TypeString)
	}
	if value, ok := amu.mutation.FacilityIDUniqueid(); ok {
		_spec.SetField(adminmaster.FieldFacilityIDUniqueid, field.TypeInt64, value)
	}
	if value, ok := amu.mutation.AddedFacilityIDUniqueid(); ok {
		_spec.AddField(adminmaster.FieldFacilityIDUniqueid, field.TypeInt64, value)
	}
	if amu.mutation.FacilityIDUniqueidCleared() {
		_spec.ClearField(adminmaster.FieldFacilityIDUniqueid, field.TypeInt64)
	}
	if value, ok := amu.mutation.FacilityID(); ok {
		_spec.SetField(adminmaster.FieldFacilityID, field.TypeString, value)
	}
	if amu.mutation.FacilityIDCleared() {
		_spec.ClearField(adminmaster.FieldFacilityID, field.TypeString)
	}
	if value, ok := amu.mutation.AuthorityFacilityName(); ok {
		_spec.SetField(adminmaster.FieldAuthorityFacilityName, field.TypeString, value)
	}
	if amu.mutation.AuthorityFacilityNameCleared() {
		_spec.ClearField(adminmaster.FieldAuthorityFacilityName, field.TypeString)
	}
	if value, ok := amu.mutation.FacilityType(); ok {
		_spec.SetField(adminmaster.FieldFacilityType, field.TypeString, value)
	}
	if amu.mutation.FacilityTypeCleared() {
		_spec.ClearField(adminmaster.FieldFacilityType, field.TypeString)
	}
	if value, ok := amu.mutation.ReportingOfficeFacilityId(); ok {
		_spec.SetField(adminmaster.FieldReportingOfficeFacilityId, field.TypeString, value)
	}
	if amu.mutation.ReportingOfficeFacilityIdCleared() {
		_spec.ClearField(adminmaster.FieldReportingOfficeFacilityId, field.TypeString)
	}
	if value, ok := amu.mutation.ReportingOfficeFacilityName(); ok {
		_spec.SetField(adminmaster.FieldReportingOfficeFacilityName, field.TypeString, value)
	}
	if amu.mutation.ReportingOfficeFacilityNameCleared() {
		_spec.ClearField(adminmaster.FieldReportingOfficeFacilityName, field.TypeString)
	}
	if value, ok := amu.mutation.CircleOfficeFacilityId(); ok {
		_spec.SetField(adminmaster.FieldCircleOfficeFacilityId, field.TypeString, value)
	}
	if amu.mutation.CircleOfficeFacilityIdCleared() {
		_spec.ClearField(adminmaster.FieldCircleOfficeFacilityId, field.TypeString)
	}
	if value, ok := amu.mutation.CircleOfficeName(); ok {
		_spec.SetField(adminmaster.FieldCircleOfficeName, field.TypeString, value)
	}
	if amu.mutation.CircleOfficeNameCleared() {
		_spec.ClearField(adminmaster.FieldCircleOfficeName, field.TypeString)
	}
	if value, ok := amu.mutation.UidToken(); ok {
		_spec.SetField(adminmaster.FieldUidToken, field.TypeString, value)
	}
	if amu.mutation.UidTokenCleared() {
		_spec.ClearField(adminmaster.FieldUidToken, field.TypeString)
	}
	if value, ok := amu.mutation.Statuss(); ok {
		_spec.SetField(adminmaster.FieldStatuss, field.TypeString, value)
	}
	if amu.mutation.StatussCleared() {
		_spec.ClearField(adminmaster.FieldStatuss, field.TypeString)
	}
	if value, ok := amu.mutation.OTP(); ok {
		_spec.SetField(adminmaster.FieldOTP, field.TypeInt32, value)
	}
	if value, ok := amu.mutation.AddedOTP(); ok {
		_spec.AddField(adminmaster.FieldOTP, field.TypeInt32, value)
	}
	if amu.mutation.OTPCleared() {
		_spec.ClearField(adminmaster.FieldOTP, field.TypeInt32)
	}
	if value, ok := amu.mutation.OTPSavedTime(); ok {
		_spec.SetField(adminmaster.FieldOTPSavedTime, field.TypeTime, value)
	}
	if amu.mutation.OTPSavedTimeCleared() {
		_spec.ClearField(adminmaster.FieldOTPSavedTime, field.TypeTime)
	}
	if value, ok := amu.mutation.OTPTriggeredTime(); ok {
		_spec.SetField(adminmaster.FieldOTPTriggeredTime, field.TypeTime, value)
	}
	if amu.mutation.OTPTriggeredTimeCleared() {
		_spec.ClearField(adminmaster.FieldOTPTriggeredTime, field.TypeTime)
	}
	if value, ok := amu.mutation.OTPExpiryTime(); ok {
		_spec.SetField(adminmaster.FieldOTPExpiryTime, field.TypeTime, value)
	}
	if amu.mutation.OTPExpiryTimeCleared() {
		_spec.ClearField(adminmaster.FieldOTPExpiryTime, field.TypeTime)
	}
	if value, ok := amu.mutation.OTPRemarks(); ok {
		_spec.SetField(adminmaster.FieldOTPRemarks, field.TypeString, value)
	}
	if amu.mutation.OTPRemarksCleared() {
		_spec.ClearField(adminmaster.FieldOTPRemarks, field.TypeString)
	}
	if value, ok := amu.mutation.CreatedById(); ok {
		_spec.SetField(adminmaster.FieldCreatedById, field.TypeInt64, value)
	}
	if value, ok := amu.mutation.AddedCreatedById(); ok {
		_spec.AddField(adminmaster.FieldCreatedById, field.TypeInt64, value)
	}
	if amu.mutation.CreatedByIdCleared() {
		_spec.ClearField(adminmaster.FieldCreatedById, field.TypeInt64)
	}
	if value, ok := amu.mutation.CreatedByUserName(); ok {
		_spec.SetField(adminmaster.FieldCreatedByUserName, field.TypeString, value)
	}
	if amu.mutation.CreatedByUserNameCleared() {
		_spec.ClearField(adminmaster.FieldCreatedByUserName, field.TypeString)
	}
	if value, ok := amu.mutation.CreatedByEmpId(); ok {
		_spec.SetField(adminmaster.FieldCreatedByEmpId, field.TypeInt64, value)
	}
	if value, ok := amu.mutation.AddedCreatedByEmpId(); ok {
		_spec.AddField(adminmaster.FieldCreatedByEmpId, field.TypeInt64, value)
	}
	if amu.mutation.CreatedByEmpIdCleared() {
		_spec.ClearField(adminmaster.FieldCreatedByEmpId, field.TypeInt64)
	}
	if value, ok := amu.mutation.CreatedByDesignation(); ok {
		_spec.SetField(adminmaster.FieldCreatedByDesignation, field.TypeString, value)
	}
	if amu.mutation.CreatedByDesignationCleared() {
		_spec.ClearField(adminmaster.FieldCreatedByDesignation, field.TypeString)
	}
	if value, ok := amu.mutation.CreatedDate(); ok {
		_spec.SetField(adminmaster.FieldCreatedDate, field.TypeTime, value)
	}
	if amu.mutation.CreatedDateCleared() {
		_spec.ClearField(adminmaster.FieldCreatedDate, field.TypeTime)
	}
	if value, ok := amu.mutation.DeletedById(); ok {
		_spec.SetField(adminmaster.FieldDeletedById, field.TypeInt64, value)
	}
	if value, ok := amu.mutation.AddedDeletedById(); ok {
		_spec.AddField(adminmaster.FieldDeletedById, field.TypeInt64, value)
	}
	if amu.mutation.DeletedByIdCleared() {
		_spec.ClearField(adminmaster.FieldDeletedById, field.TypeInt64)
	}
	if value, ok := amu.mutation.DeletedByUserName(); ok {
		_spec.SetField(adminmaster.FieldDeletedByUserName, field.TypeString, value)
	}
	if amu.mutation.DeletedByUserNameCleared() {
		_spec.ClearField(adminmaster.FieldDeletedByUserName, field.TypeString)
	}
	if value, ok := amu.mutation.DeletedByEmpId(); ok {
		_spec.SetField(adminmaster.FieldDeletedByEmpId, field.TypeInt64, value)
	}
	if value, ok := amu.mutation.AddedDeletedByEmpId(); ok {
		_spec.AddField(adminmaster.FieldDeletedByEmpId, field.TypeInt64, value)
	}
	if amu.mutation.DeletedByEmpIdCleared() {
		_spec.ClearField(adminmaster.FieldDeletedByEmpId, field.TypeInt64)
	}
	if value, ok := amu.mutation.DeletedByDesignation(); ok {
		_spec.SetField(adminmaster.FieldDeletedByDesignation, field.TypeString, value)
	}
	if amu.mutation.DeletedByDesignationCleared() {
		_spec.ClearField(adminmaster.FieldDeletedByDesignation, field.TypeString)
	}
	if value, ok := amu.mutation.DeletedDate(); ok {
		_spec.SetField(adminmaster.FieldDeletedDate, field.TypeTime, value)
	}
	if amu.mutation.DeletedDateCleared() {
		_spec.ClearField(adminmaster.FieldDeletedDate, field.TypeTime)
	}
	if value, ok := amu.mutation.ModifiedById(); ok {
		_spec.SetField(adminmaster.FieldModifiedById, field.TypeInt, value)
	}
	if value, ok := amu.mutation.AddedModifiedById(); ok {
		_spec.AddField(adminmaster.FieldModifiedById, field.TypeInt, value)
	}
	if amu.mutation.ModifiedByIdCleared() {
		_spec.ClearField(adminmaster.FieldModifiedById, field.TypeInt)
	}
	if value, ok := amu.mutation.ModifiedByUserName(); ok {
		_spec.SetField(adminmaster.FieldModifiedByUserName, field.TypeString, value)
	}
	if amu.mutation.ModifiedByUserNameCleared() {
		_spec.ClearField(adminmaster.FieldModifiedByUserName, field.TypeString)
	}
	if value, ok := amu.mutation.ModifiedByEmpId(); ok {
		_spec.SetField(adminmaster.FieldModifiedByEmpId, field.TypeInt64, value)
	}
	if value, ok := amu.mutation.AddedModifiedByEmpId(); ok {
		_spec.AddField(adminmaster.FieldModifiedByEmpId, field.TypeInt64, value)
	}
	if amu.mutation.ModifiedByEmpIdCleared() {
		_spec.ClearField(adminmaster.FieldModifiedByEmpId, field.TypeInt64)
	}
	if value, ok := amu.mutation.ModifiedByDesignantion(); ok {
		_spec.SetField(adminmaster.FieldModifiedByDesignantion, field.TypeString, value)
	}
	if amu.mutation.ModifiedByDesignantionCleared() {
		_spec.ClearField(adminmaster.FieldModifiedByDesignantion, field.TypeString)
	}
	if value, ok := amu.mutation.ModifiedDate(); ok {
		_spec.SetField(adminmaster.FieldModifiedDate, field.TypeTime, value)
	}
	if amu.mutation.ModifiedDateCleared() {
		_spec.ClearField(adminmaster.FieldModifiedDate, field.TypeTime)
	}
	if value, ok := amu.mutation.DeletedBy(); ok {
		_spec.SetField(adminmaster.FieldDeletedBy, field.TypeString, value)
	}
	if amu.mutation.DeletedByCleared() {
		_spec.ClearField(adminmaster.FieldDeletedBy, field.TypeString)
	}
	if value, ok := amu.mutation.Deletedbyid(); ok {
		_spec.SetField(adminmaster.FieldDeletedbyid, field.TypeString, value)
	}
	if amu.mutation.DeletedbyidCleared() {
		_spec.ClearField(adminmaster.FieldDeletedbyid, field.TypeString)
	}
	if value, ok := amu.mutation.NewPasswordRequest(); ok {
		_spec.SetField(adminmaster.FieldNewPasswordRequest, field.TypeBool, value)
	}
	if amu.mutation.NewPasswordRequestCleared() {
		_spec.ClearField(adminmaster.FieldNewPasswordRequest, field.TypeBool)
	}
	if value, ok := amu.mutation.EventTime(); ok {
		_spec.SetField(adminmaster.FieldEventTime, field.TypeTime, value)
	}
	if amu.mutation.EventTimeCleared() {
		_spec.ClearField(adminmaster.FieldEventTime, field.TypeTime)
	}
	if value, ok := amu.mutation.UUID(); ok {
		_spec.SetField(adminmaster.FieldUUID, field.TypeInt64, value)
	}
	if value, ok := amu.mutation.AddedUUID(); ok {
		_spec.AddField(adminmaster.FieldUUID, field.TypeInt64, value)
	}
	if amu.mutation.UUIDCleared() {
		_spec.ClearField(adminmaster.FieldUUID, field.TypeInt64)
	}
	if value, ok := amu.mutation.Updatedby(); ok {
		_spec.SetField(adminmaster.FieldUpdatedby, field.TypeString, value)
	}
	if amu.mutation.UpdatedbyCleared() {
		_spec.ClearField(adminmaster.FieldUpdatedby, field.TypeString)
	}
	if value, ok := amu.mutation.UpdatedDate(); ok {
		_spec.SetField(adminmaster.FieldUpdatedDate, field.TypeTime, value)
	}
	if amu.mutation.UpdatedDateCleared() {
		_spec.ClearField(adminmaster.FieldUpdatedDate, field.TypeTime)
	}
	if amu.mutation.LogDataCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   adminmaster.LogDataTable,
			Columns: []string{adminmaster.LogDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(logs.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := amu.mutation.RemovedLogDataIDs(); len(nodes) > 0 && !amu.mutation.LogDataCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   adminmaster.LogDataTable,
			Columns: []string{adminmaster.LogDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(logs.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := amu.mutation.LogDataIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   adminmaster.LogDataTable,
			Columns: []string{adminmaster.LogDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(logs.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, amu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{adminmaster.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	amu.mutation.done = true
	return n, nil
}

// AdminMasterUpdateOne is the builder for updating a single AdminMaster entity.
type AdminMasterUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AdminMasterMutation
}

// SetEmployeeId sets the "EmployeeId" field.
func (amuo *AdminMasterUpdateOne) SetEmployeeId(i int64) *AdminMasterUpdateOne {
	amuo.mutation.ResetEmployeeId()
	amuo.mutation.SetEmployeeId(i)
	return amuo
}

// SetNillableEmployeeId sets the "EmployeeId" field if the given value is not nil.
func (amuo *AdminMasterUpdateOne) SetNillableEmployeeId(i *int64) *AdminMasterUpdateOne {
	if i != nil {
		amuo.SetEmployeeId(*i)
	}
	return amuo
}

// AddEmployeeId adds i to the "EmployeeId" field.
func (amuo *AdminMasterUpdateOne) AddEmployeeId(i int64) *AdminMasterUpdateOne {
	amuo.mutation.AddEmployeeId(i)
	return amuo
}

// ClearEmployeeId clears the value of the "EmployeeId" field.
func (amuo *AdminMasterUpdateOne) ClearEmployeeId() *AdminMasterUpdateOne {
	amuo.mutation.ClearEmployeeId()
	return amuo
}

// SetEmployeeName sets the "EmployeeName" field.
func (amuo *AdminMasterUpdateOne) SetEmployeeName(s string) *AdminMasterUpdateOne {
	amuo.mutation.SetEmployeeName(s)
	return amuo
}

// SetNillableEmployeeName sets the "EmployeeName" field if the given value is not nil.
func (amuo *AdminMasterUpdateOne) SetNillableEmployeeName(s *string) *AdminMasterUpdateOne {
	if s != nil {
		amuo.SetEmployeeName(*s)
	}
	return amuo
}

// ClearEmployeeName clears the value of the "EmployeeName" field.
func (amuo *AdminMasterUpdateOne) ClearEmployeeName() *AdminMasterUpdateOne {
	amuo.mutation.ClearEmployeeName()
	return amuo
}

// SetDesignation sets the "Designation" field.
func (amuo *AdminMasterUpdateOne) SetDesignation(s string) *AdminMasterUpdateOne {
	amuo.mutation.SetDesignation(s)
	return amuo
}

// SetNillableDesignation sets the "Designation" field if the given value is not nil.
func (amuo *AdminMasterUpdateOne) SetNillableDesignation(s *string) *AdminMasterUpdateOne {
	if s != nil {
		amuo.SetDesignation(*s)
	}
	return amuo
}

// ClearDesignation clears the value of the "Designation" field.
func (amuo *AdminMasterUpdateOne) ClearDesignation() *AdminMasterUpdateOne {
	amuo.mutation.ClearDesignation()
	return amuo
}

// SetRoleUserCode sets the "RoleUserCode" field.
func (amuo *AdminMasterUpdateOne) SetRoleUserCode(i int32) *AdminMasterUpdateOne {
	amuo.mutation.ResetRoleUserCode()
	amuo.mutation.SetRoleUserCode(i)
	return amuo
}

// SetNillableRoleUserCode sets the "RoleUserCode" field if the given value is not nil.
func (amuo *AdminMasterUpdateOne) SetNillableRoleUserCode(i *int32) *AdminMasterUpdateOne {
	if i != nil {
		amuo.SetRoleUserCode(*i)
	}
	return amuo
}

// AddRoleUserCode adds i to the "RoleUserCode" field.
func (amuo *AdminMasterUpdateOne) AddRoleUserCode(i int32) *AdminMasterUpdateOne {
	amuo.mutation.AddRoleUserCode(i)
	return amuo
}

// ClearRoleUserCode clears the value of the "RoleUserCode" field.
func (amuo *AdminMasterUpdateOne) ClearRoleUserCode() *AdminMasterUpdateOne {
	amuo.mutation.ClearRoleUserCode()
	return amuo
}

// SetRoleUserDescription sets the "RoleUserDescription" field.
func (amuo *AdminMasterUpdateOne) SetRoleUserDescription(s string) *AdminMasterUpdateOne {
	amuo.mutation.SetRoleUserDescription(s)
	return amuo
}

// SetNillableRoleUserDescription sets the "RoleUserDescription" field if the given value is not nil.
func (amuo *AdminMasterUpdateOne) SetNillableRoleUserDescription(s *string) *AdminMasterUpdateOne {
	if s != nil {
		amuo.SetRoleUserDescription(*s)
	}
	return amuo
}

// ClearRoleUserDescription clears the value of the "RoleUserDescription" field.
func (amuo *AdminMasterUpdateOne) ClearRoleUserDescription() *AdminMasterUpdateOne {
	amuo.mutation.ClearRoleUserDescription()
	return amuo
}

// SetMobile sets the "Mobile" field.
func (amuo *AdminMasterUpdateOne) SetMobile(s string) *AdminMasterUpdateOne {
	amuo.mutation.SetMobile(s)
	return amuo
}

// SetNillableMobile sets the "Mobile" field if the given value is not nil.
func (amuo *AdminMasterUpdateOne) SetNillableMobile(s *string) *AdminMasterUpdateOne {
	if s != nil {
		amuo.SetMobile(*s)
	}
	return amuo
}

// ClearMobile clears the value of the "Mobile" field.
func (amuo *AdminMasterUpdateOne) ClearMobile() *AdminMasterUpdateOne {
	amuo.mutation.ClearMobile()
	return amuo
}

// SetEmailID sets the "EmailID" field.
func (amuo *AdminMasterUpdateOne) SetEmailID(s string) *AdminMasterUpdateOne {
	amuo.mutation.SetEmailID(s)
	return amuo
}

// SetNillableEmailID sets the "EmailID" field if the given value is not nil.
func (amuo *AdminMasterUpdateOne) SetNillableEmailID(s *string) *AdminMasterUpdateOne {
	if s != nil {
		amuo.SetEmailID(*s)
	}
	return amuo
}

// ClearEmailID clears the value of the "EmailID" field.
func (amuo *AdminMasterUpdateOne) ClearEmailID() *AdminMasterUpdateOne {
	amuo.mutation.ClearEmailID()
	return amuo
}

// SetUserName sets the "UserName" field.
func (amuo *AdminMasterUpdateOne) SetUserName(s string) *AdminMasterUpdateOne {
	amuo.mutation.SetUserName(s)
	return amuo
}

// SetNillableUserName sets the "UserName" field if the given value is not nil.
func (amuo *AdminMasterUpdateOne) SetNillableUserName(s *string) *AdminMasterUpdateOne {
	if s != nil {
		amuo.SetUserName(*s)
	}
	return amuo
}

// ClearUserName clears the value of the "UserName" field.
func (amuo *AdminMasterUpdateOne) ClearUserName() *AdminMasterUpdateOne {
	amuo.mutation.ClearUserName()
	return amuo
}

// SetPassword sets the "Password" field.
func (amuo *AdminMasterUpdateOne) SetPassword(s string) *AdminMasterUpdateOne {
	amuo.mutation.SetPassword(s)
	return amuo
}

// SetNillablePassword sets the "Password" field if the given value is not nil.
func (amuo *AdminMasterUpdateOne) SetNillablePassword(s *string) *AdminMasterUpdateOne {
	if s != nil {
		amuo.SetPassword(*s)
	}
	return amuo
}

// ClearPassword clears the value of the "Password" field.
func (amuo *AdminMasterUpdateOne) ClearPassword() *AdminMasterUpdateOne {
	amuo.mutation.ClearPassword()
	return amuo
}

// SetFacilityIDUniqueid sets the "FacilityIDUniqueid" field.
func (amuo *AdminMasterUpdateOne) SetFacilityIDUniqueid(i int64) *AdminMasterUpdateOne {
	amuo.mutation.ResetFacilityIDUniqueid()
	amuo.mutation.SetFacilityIDUniqueid(i)
	return amuo
}

// SetNillableFacilityIDUniqueid sets the "FacilityIDUniqueid" field if the given value is not nil.
func (amuo *AdminMasterUpdateOne) SetNillableFacilityIDUniqueid(i *int64) *AdminMasterUpdateOne {
	if i != nil {
		amuo.SetFacilityIDUniqueid(*i)
	}
	return amuo
}

// AddFacilityIDUniqueid adds i to the "FacilityIDUniqueid" field.
func (amuo *AdminMasterUpdateOne) AddFacilityIDUniqueid(i int64) *AdminMasterUpdateOne {
	amuo.mutation.AddFacilityIDUniqueid(i)
	return amuo
}

// ClearFacilityIDUniqueid clears the value of the "FacilityIDUniqueid" field.
func (amuo *AdminMasterUpdateOne) ClearFacilityIDUniqueid() *AdminMasterUpdateOne {
	amuo.mutation.ClearFacilityIDUniqueid()
	return amuo
}

// SetFacilityID sets the "FacilityID" field.
func (amuo *AdminMasterUpdateOne) SetFacilityID(s string) *AdminMasterUpdateOne {
	amuo.mutation.SetFacilityID(s)
	return amuo
}

// SetNillableFacilityID sets the "FacilityID" field if the given value is not nil.
func (amuo *AdminMasterUpdateOne) SetNillableFacilityID(s *string) *AdminMasterUpdateOne {
	if s != nil {
		amuo.SetFacilityID(*s)
	}
	return amuo
}

// ClearFacilityID clears the value of the "FacilityID" field.
func (amuo *AdminMasterUpdateOne) ClearFacilityID() *AdminMasterUpdateOne {
	amuo.mutation.ClearFacilityID()
	return amuo
}

// SetAuthorityFacilityName sets the "AuthorityFacilityName" field.
func (amuo *AdminMasterUpdateOne) SetAuthorityFacilityName(s string) *AdminMasterUpdateOne {
	amuo.mutation.SetAuthorityFacilityName(s)
	return amuo
}

// SetNillableAuthorityFacilityName sets the "AuthorityFacilityName" field if the given value is not nil.
func (amuo *AdminMasterUpdateOne) SetNillableAuthorityFacilityName(s *string) *AdminMasterUpdateOne {
	if s != nil {
		amuo.SetAuthorityFacilityName(*s)
	}
	return amuo
}

// ClearAuthorityFacilityName clears the value of the "AuthorityFacilityName" field.
func (amuo *AdminMasterUpdateOne) ClearAuthorityFacilityName() *AdminMasterUpdateOne {
	amuo.mutation.ClearAuthorityFacilityName()
	return amuo
}

// SetFacilityType sets the "FacilityType" field.
func (amuo *AdminMasterUpdateOne) SetFacilityType(s string) *AdminMasterUpdateOne {
	amuo.mutation.SetFacilityType(s)
	return amuo
}

// SetNillableFacilityType sets the "FacilityType" field if the given value is not nil.
func (amuo *AdminMasterUpdateOne) SetNillableFacilityType(s *string) *AdminMasterUpdateOne {
	if s != nil {
		amuo.SetFacilityType(*s)
	}
	return amuo
}

// ClearFacilityType clears the value of the "FacilityType" field.
func (amuo *AdminMasterUpdateOne) ClearFacilityType() *AdminMasterUpdateOne {
	amuo.mutation.ClearFacilityType()
	return amuo
}

// SetReportingOfficeFacilityId sets the "ReportingOfficeFacilityId" field.
func (amuo *AdminMasterUpdateOne) SetReportingOfficeFacilityId(s string) *AdminMasterUpdateOne {
	amuo.mutation.SetReportingOfficeFacilityId(s)
	return amuo
}

// SetNillableReportingOfficeFacilityId sets the "ReportingOfficeFacilityId" field if the given value is not nil.
func (amuo *AdminMasterUpdateOne) SetNillableReportingOfficeFacilityId(s *string) *AdminMasterUpdateOne {
	if s != nil {
		amuo.SetReportingOfficeFacilityId(*s)
	}
	return amuo
}

// ClearReportingOfficeFacilityId clears the value of the "ReportingOfficeFacilityId" field.
func (amuo *AdminMasterUpdateOne) ClearReportingOfficeFacilityId() *AdminMasterUpdateOne {
	amuo.mutation.ClearReportingOfficeFacilityId()
	return amuo
}

// SetReportingOfficeFacilityName sets the "ReportingOfficeFacilityName" field.
func (amuo *AdminMasterUpdateOne) SetReportingOfficeFacilityName(s string) *AdminMasterUpdateOne {
	amuo.mutation.SetReportingOfficeFacilityName(s)
	return amuo
}

// SetNillableReportingOfficeFacilityName sets the "ReportingOfficeFacilityName" field if the given value is not nil.
func (amuo *AdminMasterUpdateOne) SetNillableReportingOfficeFacilityName(s *string) *AdminMasterUpdateOne {
	if s != nil {
		amuo.SetReportingOfficeFacilityName(*s)
	}
	return amuo
}

// ClearReportingOfficeFacilityName clears the value of the "ReportingOfficeFacilityName" field.
func (amuo *AdminMasterUpdateOne) ClearReportingOfficeFacilityName() *AdminMasterUpdateOne {
	amuo.mutation.ClearReportingOfficeFacilityName()
	return amuo
}

// SetCircleOfficeFacilityId sets the "CircleOfficeFacilityId" field.
func (amuo *AdminMasterUpdateOne) SetCircleOfficeFacilityId(s string) *AdminMasterUpdateOne {
	amuo.mutation.SetCircleOfficeFacilityId(s)
	return amuo
}

// SetNillableCircleOfficeFacilityId sets the "CircleOfficeFacilityId" field if the given value is not nil.
func (amuo *AdminMasterUpdateOne) SetNillableCircleOfficeFacilityId(s *string) *AdminMasterUpdateOne {
	if s != nil {
		amuo.SetCircleOfficeFacilityId(*s)
	}
	return amuo
}

// ClearCircleOfficeFacilityId clears the value of the "CircleOfficeFacilityId" field.
func (amuo *AdminMasterUpdateOne) ClearCircleOfficeFacilityId() *AdminMasterUpdateOne {
	amuo.mutation.ClearCircleOfficeFacilityId()
	return amuo
}

// SetCircleOfficeName sets the "CircleOfficeName" field.
func (amuo *AdminMasterUpdateOne) SetCircleOfficeName(s string) *AdminMasterUpdateOne {
	amuo.mutation.SetCircleOfficeName(s)
	return amuo
}

// SetNillableCircleOfficeName sets the "CircleOfficeName" field if the given value is not nil.
func (amuo *AdminMasterUpdateOne) SetNillableCircleOfficeName(s *string) *AdminMasterUpdateOne {
	if s != nil {
		amuo.SetCircleOfficeName(*s)
	}
	return amuo
}

// ClearCircleOfficeName clears the value of the "CircleOfficeName" field.
func (amuo *AdminMasterUpdateOne) ClearCircleOfficeName() *AdminMasterUpdateOne {
	amuo.mutation.ClearCircleOfficeName()
	return amuo
}

// SetUidToken sets the "UidToken" field.
func (amuo *AdminMasterUpdateOne) SetUidToken(s string) *AdminMasterUpdateOne {
	amuo.mutation.SetUidToken(s)
	return amuo
}

// SetNillableUidToken sets the "UidToken" field if the given value is not nil.
func (amuo *AdminMasterUpdateOne) SetNillableUidToken(s *string) *AdminMasterUpdateOne {
	if s != nil {
		amuo.SetUidToken(*s)
	}
	return amuo
}

// ClearUidToken clears the value of the "UidToken" field.
func (amuo *AdminMasterUpdateOne) ClearUidToken() *AdminMasterUpdateOne {
	amuo.mutation.ClearUidToken()
	return amuo
}

// SetStatuss sets the "Statuss" field.
func (amuo *AdminMasterUpdateOne) SetStatuss(s string) *AdminMasterUpdateOne {
	amuo.mutation.SetStatuss(s)
	return amuo
}

// SetNillableStatuss sets the "Statuss" field if the given value is not nil.
func (amuo *AdminMasterUpdateOne) SetNillableStatuss(s *string) *AdminMasterUpdateOne {
	if s != nil {
		amuo.SetStatuss(*s)
	}
	return amuo
}

// ClearStatuss clears the value of the "Statuss" field.
func (amuo *AdminMasterUpdateOne) ClearStatuss() *AdminMasterUpdateOne {
	amuo.mutation.ClearStatuss()
	return amuo
}

// SetOTP sets the "OTP" field.
func (amuo *AdminMasterUpdateOne) SetOTP(i int32) *AdminMasterUpdateOne {
	amuo.mutation.ResetOTP()
	amuo.mutation.SetOTP(i)
	return amuo
}

// SetNillableOTP sets the "OTP" field if the given value is not nil.
func (amuo *AdminMasterUpdateOne) SetNillableOTP(i *int32) *AdminMasterUpdateOne {
	if i != nil {
		amuo.SetOTP(*i)
	}
	return amuo
}

// AddOTP adds i to the "OTP" field.
func (amuo *AdminMasterUpdateOne) AddOTP(i int32) *AdminMasterUpdateOne {
	amuo.mutation.AddOTP(i)
	return amuo
}

// ClearOTP clears the value of the "OTP" field.
func (amuo *AdminMasterUpdateOne) ClearOTP() *AdminMasterUpdateOne {
	amuo.mutation.ClearOTP()
	return amuo
}

// SetOTPSavedTime sets the "OTPSavedTime" field.
func (amuo *AdminMasterUpdateOne) SetOTPSavedTime(t time.Time) *AdminMasterUpdateOne {
	amuo.mutation.SetOTPSavedTime(t)
	return amuo
}

// SetNillableOTPSavedTime sets the "OTPSavedTime" field if the given value is not nil.
func (amuo *AdminMasterUpdateOne) SetNillableOTPSavedTime(t *time.Time) *AdminMasterUpdateOne {
	if t != nil {
		amuo.SetOTPSavedTime(*t)
	}
	return amuo
}

// ClearOTPSavedTime clears the value of the "OTPSavedTime" field.
func (amuo *AdminMasterUpdateOne) ClearOTPSavedTime() *AdminMasterUpdateOne {
	amuo.mutation.ClearOTPSavedTime()
	return amuo
}

// SetOTPTriggeredTime sets the "OTPTriggeredTime" field.
func (amuo *AdminMasterUpdateOne) SetOTPTriggeredTime(t time.Time) *AdminMasterUpdateOne {
	amuo.mutation.SetOTPTriggeredTime(t)
	return amuo
}

// SetNillableOTPTriggeredTime sets the "OTPTriggeredTime" field if the given value is not nil.
func (amuo *AdminMasterUpdateOne) SetNillableOTPTriggeredTime(t *time.Time) *AdminMasterUpdateOne {
	if t != nil {
		amuo.SetOTPTriggeredTime(*t)
	}
	return amuo
}

// ClearOTPTriggeredTime clears the value of the "OTPTriggeredTime" field.
func (amuo *AdminMasterUpdateOne) ClearOTPTriggeredTime() *AdminMasterUpdateOne {
	amuo.mutation.ClearOTPTriggeredTime()
	return amuo
}

// SetOTPExpiryTime sets the "OTPExpiryTime" field.
func (amuo *AdminMasterUpdateOne) SetOTPExpiryTime(t time.Time) *AdminMasterUpdateOne {
	amuo.mutation.SetOTPExpiryTime(t)
	return amuo
}

// SetNillableOTPExpiryTime sets the "OTPExpiryTime" field if the given value is not nil.
func (amuo *AdminMasterUpdateOne) SetNillableOTPExpiryTime(t *time.Time) *AdminMasterUpdateOne {
	if t != nil {
		amuo.SetOTPExpiryTime(*t)
	}
	return amuo
}

// ClearOTPExpiryTime clears the value of the "OTPExpiryTime" field.
func (amuo *AdminMasterUpdateOne) ClearOTPExpiryTime() *AdminMasterUpdateOne {
	amuo.mutation.ClearOTPExpiryTime()
	return amuo
}

// SetOTPRemarks sets the "OTPRemarks" field.
func (amuo *AdminMasterUpdateOne) SetOTPRemarks(s string) *AdminMasterUpdateOne {
	amuo.mutation.SetOTPRemarks(s)
	return amuo
}

// SetNillableOTPRemarks sets the "OTPRemarks" field if the given value is not nil.
func (amuo *AdminMasterUpdateOne) SetNillableOTPRemarks(s *string) *AdminMasterUpdateOne {
	if s != nil {
		amuo.SetOTPRemarks(*s)
	}
	return amuo
}

// ClearOTPRemarks clears the value of the "OTPRemarks" field.
func (amuo *AdminMasterUpdateOne) ClearOTPRemarks() *AdminMasterUpdateOne {
	amuo.mutation.ClearOTPRemarks()
	return amuo
}

// SetCreatedById sets the "CreatedById" field.
func (amuo *AdminMasterUpdateOne) SetCreatedById(i int64) *AdminMasterUpdateOne {
	amuo.mutation.ResetCreatedById()
	amuo.mutation.SetCreatedById(i)
	return amuo
}

// SetNillableCreatedById sets the "CreatedById" field if the given value is not nil.
func (amuo *AdminMasterUpdateOne) SetNillableCreatedById(i *int64) *AdminMasterUpdateOne {
	if i != nil {
		amuo.SetCreatedById(*i)
	}
	return amuo
}

// AddCreatedById adds i to the "CreatedById" field.
func (amuo *AdminMasterUpdateOne) AddCreatedById(i int64) *AdminMasterUpdateOne {
	amuo.mutation.AddCreatedById(i)
	return amuo
}

// ClearCreatedById clears the value of the "CreatedById" field.
func (amuo *AdminMasterUpdateOne) ClearCreatedById() *AdminMasterUpdateOne {
	amuo.mutation.ClearCreatedById()
	return amuo
}

// SetCreatedByUserName sets the "CreatedByUserName" field.
func (amuo *AdminMasterUpdateOne) SetCreatedByUserName(s string) *AdminMasterUpdateOne {
	amuo.mutation.SetCreatedByUserName(s)
	return amuo
}

// SetNillableCreatedByUserName sets the "CreatedByUserName" field if the given value is not nil.
func (amuo *AdminMasterUpdateOne) SetNillableCreatedByUserName(s *string) *AdminMasterUpdateOne {
	if s != nil {
		amuo.SetCreatedByUserName(*s)
	}
	return amuo
}

// ClearCreatedByUserName clears the value of the "CreatedByUserName" field.
func (amuo *AdminMasterUpdateOne) ClearCreatedByUserName() *AdminMasterUpdateOne {
	amuo.mutation.ClearCreatedByUserName()
	return amuo
}

// SetCreatedByEmpId sets the "CreatedByEmpId" field.
func (amuo *AdminMasterUpdateOne) SetCreatedByEmpId(i int64) *AdminMasterUpdateOne {
	amuo.mutation.ResetCreatedByEmpId()
	amuo.mutation.SetCreatedByEmpId(i)
	return amuo
}

// SetNillableCreatedByEmpId sets the "CreatedByEmpId" field if the given value is not nil.
func (amuo *AdminMasterUpdateOne) SetNillableCreatedByEmpId(i *int64) *AdminMasterUpdateOne {
	if i != nil {
		amuo.SetCreatedByEmpId(*i)
	}
	return amuo
}

// AddCreatedByEmpId adds i to the "CreatedByEmpId" field.
func (amuo *AdminMasterUpdateOne) AddCreatedByEmpId(i int64) *AdminMasterUpdateOne {
	amuo.mutation.AddCreatedByEmpId(i)
	return amuo
}

// ClearCreatedByEmpId clears the value of the "CreatedByEmpId" field.
func (amuo *AdminMasterUpdateOne) ClearCreatedByEmpId() *AdminMasterUpdateOne {
	amuo.mutation.ClearCreatedByEmpId()
	return amuo
}

// SetCreatedByDesignation sets the "CreatedByDesignation" field.
func (amuo *AdminMasterUpdateOne) SetCreatedByDesignation(s string) *AdminMasterUpdateOne {
	amuo.mutation.SetCreatedByDesignation(s)
	return amuo
}

// SetNillableCreatedByDesignation sets the "CreatedByDesignation" field if the given value is not nil.
func (amuo *AdminMasterUpdateOne) SetNillableCreatedByDesignation(s *string) *AdminMasterUpdateOne {
	if s != nil {
		amuo.SetCreatedByDesignation(*s)
	}
	return amuo
}

// ClearCreatedByDesignation clears the value of the "CreatedByDesignation" field.
func (amuo *AdminMasterUpdateOne) ClearCreatedByDesignation() *AdminMasterUpdateOne {
	amuo.mutation.ClearCreatedByDesignation()
	return amuo
}

// SetCreatedDate sets the "CreatedDate" field.
func (amuo *AdminMasterUpdateOne) SetCreatedDate(t time.Time) *AdminMasterUpdateOne {
	amuo.mutation.SetCreatedDate(t)
	return amuo
}

// SetNillableCreatedDate sets the "CreatedDate" field if the given value is not nil.
func (amuo *AdminMasterUpdateOne) SetNillableCreatedDate(t *time.Time) *AdminMasterUpdateOne {
	if t != nil {
		amuo.SetCreatedDate(*t)
	}
	return amuo
}

// ClearCreatedDate clears the value of the "CreatedDate" field.
func (amuo *AdminMasterUpdateOne) ClearCreatedDate() *AdminMasterUpdateOne {
	amuo.mutation.ClearCreatedDate()
	return amuo
}

// SetDeletedById sets the "DeletedById" field.
func (amuo *AdminMasterUpdateOne) SetDeletedById(i int64) *AdminMasterUpdateOne {
	amuo.mutation.ResetDeletedById()
	amuo.mutation.SetDeletedById(i)
	return amuo
}

// SetNillableDeletedById sets the "DeletedById" field if the given value is not nil.
func (amuo *AdminMasterUpdateOne) SetNillableDeletedById(i *int64) *AdminMasterUpdateOne {
	if i != nil {
		amuo.SetDeletedById(*i)
	}
	return amuo
}

// AddDeletedById adds i to the "DeletedById" field.
func (amuo *AdminMasterUpdateOne) AddDeletedById(i int64) *AdminMasterUpdateOne {
	amuo.mutation.AddDeletedById(i)
	return amuo
}

// ClearDeletedById clears the value of the "DeletedById" field.
func (amuo *AdminMasterUpdateOne) ClearDeletedById() *AdminMasterUpdateOne {
	amuo.mutation.ClearDeletedById()
	return amuo
}

// SetDeletedByUserName sets the "DeletedByUserName" field.
func (amuo *AdminMasterUpdateOne) SetDeletedByUserName(s string) *AdminMasterUpdateOne {
	amuo.mutation.SetDeletedByUserName(s)
	return amuo
}

// SetNillableDeletedByUserName sets the "DeletedByUserName" field if the given value is not nil.
func (amuo *AdminMasterUpdateOne) SetNillableDeletedByUserName(s *string) *AdminMasterUpdateOne {
	if s != nil {
		amuo.SetDeletedByUserName(*s)
	}
	return amuo
}

// ClearDeletedByUserName clears the value of the "DeletedByUserName" field.
func (amuo *AdminMasterUpdateOne) ClearDeletedByUserName() *AdminMasterUpdateOne {
	amuo.mutation.ClearDeletedByUserName()
	return amuo
}

// SetDeletedByEmpId sets the "DeletedByEmpId" field.
func (amuo *AdminMasterUpdateOne) SetDeletedByEmpId(i int64) *AdminMasterUpdateOne {
	amuo.mutation.ResetDeletedByEmpId()
	amuo.mutation.SetDeletedByEmpId(i)
	return amuo
}

// SetNillableDeletedByEmpId sets the "DeletedByEmpId" field if the given value is not nil.
func (amuo *AdminMasterUpdateOne) SetNillableDeletedByEmpId(i *int64) *AdminMasterUpdateOne {
	if i != nil {
		amuo.SetDeletedByEmpId(*i)
	}
	return amuo
}

// AddDeletedByEmpId adds i to the "DeletedByEmpId" field.
func (amuo *AdminMasterUpdateOne) AddDeletedByEmpId(i int64) *AdminMasterUpdateOne {
	amuo.mutation.AddDeletedByEmpId(i)
	return amuo
}

// ClearDeletedByEmpId clears the value of the "DeletedByEmpId" field.
func (amuo *AdminMasterUpdateOne) ClearDeletedByEmpId() *AdminMasterUpdateOne {
	amuo.mutation.ClearDeletedByEmpId()
	return amuo
}

// SetDeletedByDesignation sets the "DeletedByDesignation" field.
func (amuo *AdminMasterUpdateOne) SetDeletedByDesignation(s string) *AdminMasterUpdateOne {
	amuo.mutation.SetDeletedByDesignation(s)
	return amuo
}

// SetNillableDeletedByDesignation sets the "DeletedByDesignation" field if the given value is not nil.
func (amuo *AdminMasterUpdateOne) SetNillableDeletedByDesignation(s *string) *AdminMasterUpdateOne {
	if s != nil {
		amuo.SetDeletedByDesignation(*s)
	}
	return amuo
}

// ClearDeletedByDesignation clears the value of the "DeletedByDesignation" field.
func (amuo *AdminMasterUpdateOne) ClearDeletedByDesignation() *AdminMasterUpdateOne {
	amuo.mutation.ClearDeletedByDesignation()
	return amuo
}

// SetDeletedDate sets the "DeletedDate" field.
func (amuo *AdminMasterUpdateOne) SetDeletedDate(t time.Time) *AdminMasterUpdateOne {
	amuo.mutation.SetDeletedDate(t)
	return amuo
}

// SetNillableDeletedDate sets the "DeletedDate" field if the given value is not nil.
func (amuo *AdminMasterUpdateOne) SetNillableDeletedDate(t *time.Time) *AdminMasterUpdateOne {
	if t != nil {
		amuo.SetDeletedDate(*t)
	}
	return amuo
}

// ClearDeletedDate clears the value of the "DeletedDate" field.
func (amuo *AdminMasterUpdateOne) ClearDeletedDate() *AdminMasterUpdateOne {
	amuo.mutation.ClearDeletedDate()
	return amuo
}

// SetModifiedById sets the "ModifiedById" field.
func (amuo *AdminMasterUpdateOne) SetModifiedById(i int) *AdminMasterUpdateOne {
	amuo.mutation.ResetModifiedById()
	amuo.mutation.SetModifiedById(i)
	return amuo
}

// SetNillableModifiedById sets the "ModifiedById" field if the given value is not nil.
func (amuo *AdminMasterUpdateOne) SetNillableModifiedById(i *int) *AdminMasterUpdateOne {
	if i != nil {
		amuo.SetModifiedById(*i)
	}
	return amuo
}

// AddModifiedById adds i to the "ModifiedById" field.
func (amuo *AdminMasterUpdateOne) AddModifiedById(i int) *AdminMasterUpdateOne {
	amuo.mutation.AddModifiedById(i)
	return amuo
}

// ClearModifiedById clears the value of the "ModifiedById" field.
func (amuo *AdminMasterUpdateOne) ClearModifiedById() *AdminMasterUpdateOne {
	amuo.mutation.ClearModifiedById()
	return amuo
}

// SetModifiedByUserName sets the "ModifiedByUserName" field.
func (amuo *AdminMasterUpdateOne) SetModifiedByUserName(s string) *AdminMasterUpdateOne {
	amuo.mutation.SetModifiedByUserName(s)
	return amuo
}

// SetNillableModifiedByUserName sets the "ModifiedByUserName" field if the given value is not nil.
func (amuo *AdminMasterUpdateOne) SetNillableModifiedByUserName(s *string) *AdminMasterUpdateOne {
	if s != nil {
		amuo.SetModifiedByUserName(*s)
	}
	return amuo
}

// ClearModifiedByUserName clears the value of the "ModifiedByUserName" field.
func (amuo *AdminMasterUpdateOne) ClearModifiedByUserName() *AdminMasterUpdateOne {
	amuo.mutation.ClearModifiedByUserName()
	return amuo
}

// SetModifiedByEmpId sets the "ModifiedByEmpId" field.
func (amuo *AdminMasterUpdateOne) SetModifiedByEmpId(i int64) *AdminMasterUpdateOne {
	amuo.mutation.ResetModifiedByEmpId()
	amuo.mutation.SetModifiedByEmpId(i)
	return amuo
}

// SetNillableModifiedByEmpId sets the "ModifiedByEmpId" field if the given value is not nil.
func (amuo *AdminMasterUpdateOne) SetNillableModifiedByEmpId(i *int64) *AdminMasterUpdateOne {
	if i != nil {
		amuo.SetModifiedByEmpId(*i)
	}
	return amuo
}

// AddModifiedByEmpId adds i to the "ModifiedByEmpId" field.
func (amuo *AdminMasterUpdateOne) AddModifiedByEmpId(i int64) *AdminMasterUpdateOne {
	amuo.mutation.AddModifiedByEmpId(i)
	return amuo
}

// ClearModifiedByEmpId clears the value of the "ModifiedByEmpId" field.
func (amuo *AdminMasterUpdateOne) ClearModifiedByEmpId() *AdminMasterUpdateOne {
	amuo.mutation.ClearModifiedByEmpId()
	return amuo
}

// SetModifiedByDesignantion sets the "ModifiedByDesignantion" field.
func (amuo *AdminMasterUpdateOne) SetModifiedByDesignantion(s string) *AdminMasterUpdateOne {
	amuo.mutation.SetModifiedByDesignantion(s)
	return amuo
}

// SetNillableModifiedByDesignantion sets the "ModifiedByDesignantion" field if the given value is not nil.
func (amuo *AdminMasterUpdateOne) SetNillableModifiedByDesignantion(s *string) *AdminMasterUpdateOne {
	if s != nil {
		amuo.SetModifiedByDesignantion(*s)
	}
	return amuo
}

// ClearModifiedByDesignantion clears the value of the "ModifiedByDesignantion" field.
func (amuo *AdminMasterUpdateOne) ClearModifiedByDesignantion() *AdminMasterUpdateOne {
	amuo.mutation.ClearModifiedByDesignantion()
	return amuo
}

// SetModifiedDate sets the "ModifiedDate" field.
func (amuo *AdminMasterUpdateOne) SetModifiedDate(t time.Time) *AdminMasterUpdateOne {
	amuo.mutation.SetModifiedDate(t)
	return amuo
}

// SetNillableModifiedDate sets the "ModifiedDate" field if the given value is not nil.
func (amuo *AdminMasterUpdateOne) SetNillableModifiedDate(t *time.Time) *AdminMasterUpdateOne {
	if t != nil {
		amuo.SetModifiedDate(*t)
	}
	return amuo
}

// ClearModifiedDate clears the value of the "ModifiedDate" field.
func (amuo *AdminMasterUpdateOne) ClearModifiedDate() *AdminMasterUpdateOne {
	amuo.mutation.ClearModifiedDate()
	return amuo
}

// SetDeletedBy sets the "DeletedBy" field.
func (amuo *AdminMasterUpdateOne) SetDeletedBy(s string) *AdminMasterUpdateOne {
	amuo.mutation.SetDeletedBy(s)
	return amuo
}

// SetNillableDeletedBy sets the "DeletedBy" field if the given value is not nil.
func (amuo *AdminMasterUpdateOne) SetNillableDeletedBy(s *string) *AdminMasterUpdateOne {
	if s != nil {
		amuo.SetDeletedBy(*s)
	}
	return amuo
}

// ClearDeletedBy clears the value of the "DeletedBy" field.
func (amuo *AdminMasterUpdateOne) ClearDeletedBy() *AdminMasterUpdateOne {
	amuo.mutation.ClearDeletedBy()
	return amuo
}

// SetDeletedbyid sets the "Deletedbyid" field.
func (amuo *AdminMasterUpdateOne) SetDeletedbyid(s string) *AdminMasterUpdateOne {
	amuo.mutation.SetDeletedbyid(s)
	return amuo
}

// SetNillableDeletedbyid sets the "Deletedbyid" field if the given value is not nil.
func (amuo *AdminMasterUpdateOne) SetNillableDeletedbyid(s *string) *AdminMasterUpdateOne {
	if s != nil {
		amuo.SetDeletedbyid(*s)
	}
	return amuo
}

// ClearDeletedbyid clears the value of the "Deletedbyid" field.
func (amuo *AdminMasterUpdateOne) ClearDeletedbyid() *AdminMasterUpdateOne {
	amuo.mutation.ClearDeletedbyid()
	return amuo
}

// SetNewPasswordRequest sets the "NewPasswordRequest" field.
func (amuo *AdminMasterUpdateOne) SetNewPasswordRequest(b bool) *AdminMasterUpdateOne {
	amuo.mutation.SetNewPasswordRequest(b)
	return amuo
}

// SetNillableNewPasswordRequest sets the "NewPasswordRequest" field if the given value is not nil.
func (amuo *AdminMasterUpdateOne) SetNillableNewPasswordRequest(b *bool) *AdminMasterUpdateOne {
	if b != nil {
		amuo.SetNewPasswordRequest(*b)
	}
	return amuo
}

// ClearNewPasswordRequest clears the value of the "NewPasswordRequest" field.
func (amuo *AdminMasterUpdateOne) ClearNewPasswordRequest() *AdminMasterUpdateOne {
	amuo.mutation.ClearNewPasswordRequest()
	return amuo
}

// SetEventTime sets the "EventTime" field.
func (amuo *AdminMasterUpdateOne) SetEventTime(t time.Time) *AdminMasterUpdateOne {
	amuo.mutation.SetEventTime(t)
	return amuo
}

// SetNillableEventTime sets the "EventTime" field if the given value is not nil.
func (amuo *AdminMasterUpdateOne) SetNillableEventTime(t *time.Time) *AdminMasterUpdateOne {
	if t != nil {
		amuo.SetEventTime(*t)
	}
	return amuo
}

// ClearEventTime clears the value of the "EventTime" field.
func (amuo *AdminMasterUpdateOne) ClearEventTime() *AdminMasterUpdateOne {
	amuo.mutation.ClearEventTime()
	return amuo
}

// SetUUID sets the "UUID" field.
func (amuo *AdminMasterUpdateOne) SetUUID(i int64) *AdminMasterUpdateOne {
	amuo.mutation.ResetUUID()
	amuo.mutation.SetUUID(i)
	return amuo
}

// SetNillableUUID sets the "UUID" field if the given value is not nil.
func (amuo *AdminMasterUpdateOne) SetNillableUUID(i *int64) *AdminMasterUpdateOne {
	if i != nil {
		amuo.SetUUID(*i)
	}
	return amuo
}

// AddUUID adds i to the "UUID" field.
func (amuo *AdminMasterUpdateOne) AddUUID(i int64) *AdminMasterUpdateOne {
	amuo.mutation.AddUUID(i)
	return amuo
}

// ClearUUID clears the value of the "UUID" field.
func (amuo *AdminMasterUpdateOne) ClearUUID() *AdminMasterUpdateOne {
	amuo.mutation.ClearUUID()
	return amuo
}

// SetUpdatedby sets the "Updatedby" field.
func (amuo *AdminMasterUpdateOne) SetUpdatedby(s string) *AdminMasterUpdateOne {
	amuo.mutation.SetUpdatedby(s)
	return amuo
}

// SetNillableUpdatedby sets the "Updatedby" field if the given value is not nil.
func (amuo *AdminMasterUpdateOne) SetNillableUpdatedby(s *string) *AdminMasterUpdateOne {
	if s != nil {
		amuo.SetUpdatedby(*s)
	}
	return amuo
}

// ClearUpdatedby clears the value of the "Updatedby" field.
func (amuo *AdminMasterUpdateOne) ClearUpdatedby() *AdminMasterUpdateOne {
	amuo.mutation.ClearUpdatedby()
	return amuo
}

// SetUpdatedDate sets the "updatedDate" field.
func (amuo *AdminMasterUpdateOne) SetUpdatedDate(t time.Time) *AdminMasterUpdateOne {
	amuo.mutation.SetUpdatedDate(t)
	return amuo
}

// SetNillableUpdatedDate sets the "updatedDate" field if the given value is not nil.
func (amuo *AdminMasterUpdateOne) SetNillableUpdatedDate(t *time.Time) *AdminMasterUpdateOne {
	if t != nil {
		amuo.SetUpdatedDate(*t)
	}
	return amuo
}

// ClearUpdatedDate clears the value of the "updatedDate" field.
func (amuo *AdminMasterUpdateOne) ClearUpdatedDate() *AdminMasterUpdateOne {
	amuo.mutation.ClearUpdatedDate()
	return amuo
}

// AddLogDatumIDs adds the "LogData" edge to the Logs entity by IDs.
func (amuo *AdminMasterUpdateOne) AddLogDatumIDs(ids ...int64) *AdminMasterUpdateOne {
	amuo.mutation.AddLogDatumIDs(ids...)
	return amuo
}

// AddLogData adds the "LogData" edges to the Logs entity.
func (amuo *AdminMasterUpdateOne) AddLogData(l ...*Logs) *AdminMasterUpdateOne {
	ids := make([]int64, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return amuo.AddLogDatumIDs(ids...)
}

// Mutation returns the AdminMasterMutation object of the builder.
func (amuo *AdminMasterUpdateOne) Mutation() *AdminMasterMutation {
	return amuo.mutation
}

// ClearLogData clears all "LogData" edges to the Logs entity.
func (amuo *AdminMasterUpdateOne) ClearLogData() *AdminMasterUpdateOne {
	amuo.mutation.ClearLogData()
	return amuo
}

// RemoveLogDatumIDs removes the "LogData" edge to Logs entities by IDs.
func (amuo *AdminMasterUpdateOne) RemoveLogDatumIDs(ids ...int64) *AdminMasterUpdateOne {
	amuo.mutation.RemoveLogDatumIDs(ids...)
	return amuo
}

// RemoveLogData removes "LogData" edges to Logs entities.
func (amuo *AdminMasterUpdateOne) RemoveLogData(l ...*Logs) *AdminMasterUpdateOne {
	ids := make([]int64, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return amuo.RemoveLogDatumIDs(ids...)
}

// Where appends a list predicates to the AdminMasterUpdate builder.
func (amuo *AdminMasterUpdateOne) Where(ps ...predicate.AdminMaster) *AdminMasterUpdateOne {
	amuo.mutation.Where(ps...)
	return amuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (amuo *AdminMasterUpdateOne) Select(field string, fields ...string) *AdminMasterUpdateOne {
	amuo.fields = append([]string{field}, fields...)
	return amuo
}

// Save executes the query and returns the updated AdminMaster entity.
func (amuo *AdminMasterUpdateOne) Save(ctx context.Context) (*AdminMaster, error) {
	return withHooks(ctx, amuo.sqlSave, amuo.mutation, amuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (amuo *AdminMasterUpdateOne) SaveX(ctx context.Context) *AdminMaster {
	node, err := amuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (amuo *AdminMasterUpdateOne) Exec(ctx context.Context) error {
	_, err := amuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (amuo *AdminMasterUpdateOne) ExecX(ctx context.Context) {
	if err := amuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (amuo *AdminMasterUpdateOne) sqlSave(ctx context.Context) (_node *AdminMaster, err error) {
	_spec := sqlgraph.NewUpdateSpec(adminmaster.Table, adminmaster.Columns, sqlgraph.NewFieldSpec(adminmaster.FieldID, field.TypeInt64))
	id, ok := amuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "AdminMaster.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := amuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, adminmaster.FieldID)
		for _, f := range fields {
			if !adminmaster.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != adminmaster.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := amuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := amuo.mutation.EmployeeId(); ok {
		_spec.SetField(adminmaster.FieldEmployeeId, field.TypeInt64, value)
	}
	if value, ok := amuo.mutation.AddedEmployeeId(); ok {
		_spec.AddField(adminmaster.FieldEmployeeId, field.TypeInt64, value)
	}
	if amuo.mutation.EmployeeIdCleared() {
		_spec.ClearField(adminmaster.FieldEmployeeId, field.TypeInt64)
	}
	if value, ok := amuo.mutation.EmployeeName(); ok {
		_spec.SetField(adminmaster.FieldEmployeeName, field.TypeString, value)
	}
	if amuo.mutation.EmployeeNameCleared() {
		_spec.ClearField(adminmaster.FieldEmployeeName, field.TypeString)
	}
	if value, ok := amuo.mutation.Designation(); ok {
		_spec.SetField(adminmaster.FieldDesignation, field.TypeString, value)
	}
	if amuo.mutation.DesignationCleared() {
		_spec.ClearField(adminmaster.FieldDesignation, field.TypeString)
	}
	if value, ok := amuo.mutation.RoleUserCode(); ok {
		_spec.SetField(adminmaster.FieldRoleUserCode, field.TypeInt32, value)
	}
	if value, ok := amuo.mutation.AddedRoleUserCode(); ok {
		_spec.AddField(adminmaster.FieldRoleUserCode, field.TypeInt32, value)
	}
	if amuo.mutation.RoleUserCodeCleared() {
		_spec.ClearField(adminmaster.FieldRoleUserCode, field.TypeInt32)
	}
	if value, ok := amuo.mutation.RoleUserDescription(); ok {
		_spec.SetField(adminmaster.FieldRoleUserDescription, field.TypeString, value)
	}
	if amuo.mutation.RoleUserDescriptionCleared() {
		_spec.ClearField(adminmaster.FieldRoleUserDescription, field.TypeString)
	}
	if value, ok := amuo.mutation.Mobile(); ok {
		_spec.SetField(adminmaster.FieldMobile, field.TypeString, value)
	}
	if amuo.mutation.MobileCleared() {
		_spec.ClearField(adminmaster.FieldMobile, field.TypeString)
	}
	if value, ok := amuo.mutation.EmailID(); ok {
		_spec.SetField(adminmaster.FieldEmailID, field.TypeString, value)
	}
	if amuo.mutation.EmailIDCleared() {
		_spec.ClearField(adminmaster.FieldEmailID, field.TypeString)
	}
	if value, ok := amuo.mutation.UserName(); ok {
		_spec.SetField(adminmaster.FieldUserName, field.TypeString, value)
	}
	if amuo.mutation.UserNameCleared() {
		_spec.ClearField(adminmaster.FieldUserName, field.TypeString)
	}
	if value, ok := amuo.mutation.Password(); ok {
		_spec.SetField(adminmaster.FieldPassword, field.TypeString, value)
	}
	if amuo.mutation.PasswordCleared() {
		_spec.ClearField(adminmaster.FieldPassword, field.TypeString)
	}
	if value, ok := amuo.mutation.FacilityIDUniqueid(); ok {
		_spec.SetField(adminmaster.FieldFacilityIDUniqueid, field.TypeInt64, value)
	}
	if value, ok := amuo.mutation.AddedFacilityIDUniqueid(); ok {
		_spec.AddField(adminmaster.FieldFacilityIDUniqueid, field.TypeInt64, value)
	}
	if amuo.mutation.FacilityIDUniqueidCleared() {
		_spec.ClearField(adminmaster.FieldFacilityIDUniqueid, field.TypeInt64)
	}
	if value, ok := amuo.mutation.FacilityID(); ok {
		_spec.SetField(adminmaster.FieldFacilityID, field.TypeString, value)
	}
	if amuo.mutation.FacilityIDCleared() {
		_spec.ClearField(adminmaster.FieldFacilityID, field.TypeString)
	}
	if value, ok := amuo.mutation.AuthorityFacilityName(); ok {
		_spec.SetField(adminmaster.FieldAuthorityFacilityName, field.TypeString, value)
	}
	if amuo.mutation.AuthorityFacilityNameCleared() {
		_spec.ClearField(adminmaster.FieldAuthorityFacilityName, field.TypeString)
	}
	if value, ok := amuo.mutation.FacilityType(); ok {
		_spec.SetField(adminmaster.FieldFacilityType, field.TypeString, value)
	}
	if amuo.mutation.FacilityTypeCleared() {
		_spec.ClearField(adminmaster.FieldFacilityType, field.TypeString)
	}
	if value, ok := amuo.mutation.ReportingOfficeFacilityId(); ok {
		_spec.SetField(adminmaster.FieldReportingOfficeFacilityId, field.TypeString, value)
	}
	if amuo.mutation.ReportingOfficeFacilityIdCleared() {
		_spec.ClearField(adminmaster.FieldReportingOfficeFacilityId, field.TypeString)
	}
	if value, ok := amuo.mutation.ReportingOfficeFacilityName(); ok {
		_spec.SetField(adminmaster.FieldReportingOfficeFacilityName, field.TypeString, value)
	}
	if amuo.mutation.ReportingOfficeFacilityNameCleared() {
		_spec.ClearField(adminmaster.FieldReportingOfficeFacilityName, field.TypeString)
	}
	if value, ok := amuo.mutation.CircleOfficeFacilityId(); ok {
		_spec.SetField(adminmaster.FieldCircleOfficeFacilityId, field.TypeString, value)
	}
	if amuo.mutation.CircleOfficeFacilityIdCleared() {
		_spec.ClearField(adminmaster.FieldCircleOfficeFacilityId, field.TypeString)
	}
	if value, ok := amuo.mutation.CircleOfficeName(); ok {
		_spec.SetField(adminmaster.FieldCircleOfficeName, field.TypeString, value)
	}
	if amuo.mutation.CircleOfficeNameCleared() {
		_spec.ClearField(adminmaster.FieldCircleOfficeName, field.TypeString)
	}
	if value, ok := amuo.mutation.UidToken(); ok {
		_spec.SetField(adminmaster.FieldUidToken, field.TypeString, value)
	}
	if amuo.mutation.UidTokenCleared() {
		_spec.ClearField(adminmaster.FieldUidToken, field.TypeString)
	}
	if value, ok := amuo.mutation.Statuss(); ok {
		_spec.SetField(adminmaster.FieldStatuss, field.TypeString, value)
	}
	if amuo.mutation.StatussCleared() {
		_spec.ClearField(adminmaster.FieldStatuss, field.TypeString)
	}
	if value, ok := amuo.mutation.OTP(); ok {
		_spec.SetField(adminmaster.FieldOTP, field.TypeInt32, value)
	}
	if value, ok := amuo.mutation.AddedOTP(); ok {
		_spec.AddField(adminmaster.FieldOTP, field.TypeInt32, value)
	}
	if amuo.mutation.OTPCleared() {
		_spec.ClearField(adminmaster.FieldOTP, field.TypeInt32)
	}
	if value, ok := amuo.mutation.OTPSavedTime(); ok {
		_spec.SetField(adminmaster.FieldOTPSavedTime, field.TypeTime, value)
	}
	if amuo.mutation.OTPSavedTimeCleared() {
		_spec.ClearField(adminmaster.FieldOTPSavedTime, field.TypeTime)
	}
	if value, ok := amuo.mutation.OTPTriggeredTime(); ok {
		_spec.SetField(adminmaster.FieldOTPTriggeredTime, field.TypeTime, value)
	}
	if amuo.mutation.OTPTriggeredTimeCleared() {
		_spec.ClearField(adminmaster.FieldOTPTriggeredTime, field.TypeTime)
	}
	if value, ok := amuo.mutation.OTPExpiryTime(); ok {
		_spec.SetField(adminmaster.FieldOTPExpiryTime, field.TypeTime, value)
	}
	if amuo.mutation.OTPExpiryTimeCleared() {
		_spec.ClearField(adminmaster.FieldOTPExpiryTime, field.TypeTime)
	}
	if value, ok := amuo.mutation.OTPRemarks(); ok {
		_spec.SetField(adminmaster.FieldOTPRemarks, field.TypeString, value)
	}
	if amuo.mutation.OTPRemarksCleared() {
		_spec.ClearField(adminmaster.FieldOTPRemarks, field.TypeString)
	}
	if value, ok := amuo.mutation.CreatedById(); ok {
		_spec.SetField(adminmaster.FieldCreatedById, field.TypeInt64, value)
	}
	if value, ok := amuo.mutation.AddedCreatedById(); ok {
		_spec.AddField(adminmaster.FieldCreatedById, field.TypeInt64, value)
	}
	if amuo.mutation.CreatedByIdCleared() {
		_spec.ClearField(adminmaster.FieldCreatedById, field.TypeInt64)
	}
	if value, ok := amuo.mutation.CreatedByUserName(); ok {
		_spec.SetField(adminmaster.FieldCreatedByUserName, field.TypeString, value)
	}
	if amuo.mutation.CreatedByUserNameCleared() {
		_spec.ClearField(adminmaster.FieldCreatedByUserName, field.TypeString)
	}
	if value, ok := amuo.mutation.CreatedByEmpId(); ok {
		_spec.SetField(adminmaster.FieldCreatedByEmpId, field.TypeInt64, value)
	}
	if value, ok := amuo.mutation.AddedCreatedByEmpId(); ok {
		_spec.AddField(adminmaster.FieldCreatedByEmpId, field.TypeInt64, value)
	}
	if amuo.mutation.CreatedByEmpIdCleared() {
		_spec.ClearField(adminmaster.FieldCreatedByEmpId, field.TypeInt64)
	}
	if value, ok := amuo.mutation.CreatedByDesignation(); ok {
		_spec.SetField(adminmaster.FieldCreatedByDesignation, field.TypeString, value)
	}
	if amuo.mutation.CreatedByDesignationCleared() {
		_spec.ClearField(adminmaster.FieldCreatedByDesignation, field.TypeString)
	}
	if value, ok := amuo.mutation.CreatedDate(); ok {
		_spec.SetField(adminmaster.FieldCreatedDate, field.TypeTime, value)
	}
	if amuo.mutation.CreatedDateCleared() {
		_spec.ClearField(adminmaster.FieldCreatedDate, field.TypeTime)
	}
	if value, ok := amuo.mutation.DeletedById(); ok {
		_spec.SetField(adminmaster.FieldDeletedById, field.TypeInt64, value)
	}
	if value, ok := amuo.mutation.AddedDeletedById(); ok {
		_spec.AddField(adminmaster.FieldDeletedById, field.TypeInt64, value)
	}
	if amuo.mutation.DeletedByIdCleared() {
		_spec.ClearField(adminmaster.FieldDeletedById, field.TypeInt64)
	}
	if value, ok := amuo.mutation.DeletedByUserName(); ok {
		_spec.SetField(adminmaster.FieldDeletedByUserName, field.TypeString, value)
	}
	if amuo.mutation.DeletedByUserNameCleared() {
		_spec.ClearField(adminmaster.FieldDeletedByUserName, field.TypeString)
	}
	if value, ok := amuo.mutation.DeletedByEmpId(); ok {
		_spec.SetField(adminmaster.FieldDeletedByEmpId, field.TypeInt64, value)
	}
	if value, ok := amuo.mutation.AddedDeletedByEmpId(); ok {
		_spec.AddField(adminmaster.FieldDeletedByEmpId, field.TypeInt64, value)
	}
	if amuo.mutation.DeletedByEmpIdCleared() {
		_spec.ClearField(adminmaster.FieldDeletedByEmpId, field.TypeInt64)
	}
	if value, ok := amuo.mutation.DeletedByDesignation(); ok {
		_spec.SetField(adminmaster.FieldDeletedByDesignation, field.TypeString, value)
	}
	if amuo.mutation.DeletedByDesignationCleared() {
		_spec.ClearField(adminmaster.FieldDeletedByDesignation, field.TypeString)
	}
	if value, ok := amuo.mutation.DeletedDate(); ok {
		_spec.SetField(adminmaster.FieldDeletedDate, field.TypeTime, value)
	}
	if amuo.mutation.DeletedDateCleared() {
		_spec.ClearField(adminmaster.FieldDeletedDate, field.TypeTime)
	}
	if value, ok := amuo.mutation.ModifiedById(); ok {
		_spec.SetField(adminmaster.FieldModifiedById, field.TypeInt, value)
	}
	if value, ok := amuo.mutation.AddedModifiedById(); ok {
		_spec.AddField(adminmaster.FieldModifiedById, field.TypeInt, value)
	}
	if amuo.mutation.ModifiedByIdCleared() {
		_spec.ClearField(adminmaster.FieldModifiedById, field.TypeInt)
	}
	if value, ok := amuo.mutation.ModifiedByUserName(); ok {
		_spec.SetField(adminmaster.FieldModifiedByUserName, field.TypeString, value)
	}
	if amuo.mutation.ModifiedByUserNameCleared() {
		_spec.ClearField(adminmaster.FieldModifiedByUserName, field.TypeString)
	}
	if value, ok := amuo.mutation.ModifiedByEmpId(); ok {
		_spec.SetField(adminmaster.FieldModifiedByEmpId, field.TypeInt64, value)
	}
	if value, ok := amuo.mutation.AddedModifiedByEmpId(); ok {
		_spec.AddField(adminmaster.FieldModifiedByEmpId, field.TypeInt64, value)
	}
	if amuo.mutation.ModifiedByEmpIdCleared() {
		_spec.ClearField(adminmaster.FieldModifiedByEmpId, field.TypeInt64)
	}
	if value, ok := amuo.mutation.ModifiedByDesignantion(); ok {
		_spec.SetField(adminmaster.FieldModifiedByDesignantion, field.TypeString, value)
	}
	if amuo.mutation.ModifiedByDesignantionCleared() {
		_spec.ClearField(adminmaster.FieldModifiedByDesignantion, field.TypeString)
	}
	if value, ok := amuo.mutation.ModifiedDate(); ok {
		_spec.SetField(adminmaster.FieldModifiedDate, field.TypeTime, value)
	}
	if amuo.mutation.ModifiedDateCleared() {
		_spec.ClearField(adminmaster.FieldModifiedDate, field.TypeTime)
	}
	if value, ok := amuo.mutation.DeletedBy(); ok {
		_spec.SetField(adminmaster.FieldDeletedBy, field.TypeString, value)
	}
	if amuo.mutation.DeletedByCleared() {
		_spec.ClearField(adminmaster.FieldDeletedBy, field.TypeString)
	}
	if value, ok := amuo.mutation.Deletedbyid(); ok {
		_spec.SetField(adminmaster.FieldDeletedbyid, field.TypeString, value)
	}
	if amuo.mutation.DeletedbyidCleared() {
		_spec.ClearField(adminmaster.FieldDeletedbyid, field.TypeString)
	}
	if value, ok := amuo.mutation.NewPasswordRequest(); ok {
		_spec.SetField(adminmaster.FieldNewPasswordRequest, field.TypeBool, value)
	}
	if amuo.mutation.NewPasswordRequestCleared() {
		_spec.ClearField(adminmaster.FieldNewPasswordRequest, field.TypeBool)
	}
	if value, ok := amuo.mutation.EventTime(); ok {
		_spec.SetField(adminmaster.FieldEventTime, field.TypeTime, value)
	}
	if amuo.mutation.EventTimeCleared() {
		_spec.ClearField(adminmaster.FieldEventTime, field.TypeTime)
	}
	if value, ok := amuo.mutation.UUID(); ok {
		_spec.SetField(adminmaster.FieldUUID, field.TypeInt64, value)
	}
	if value, ok := amuo.mutation.AddedUUID(); ok {
		_spec.AddField(adminmaster.FieldUUID, field.TypeInt64, value)
	}
	if amuo.mutation.UUIDCleared() {
		_spec.ClearField(adminmaster.FieldUUID, field.TypeInt64)
	}
	if value, ok := amuo.mutation.Updatedby(); ok {
		_spec.SetField(adminmaster.FieldUpdatedby, field.TypeString, value)
	}
	if amuo.mutation.UpdatedbyCleared() {
		_spec.ClearField(adminmaster.FieldUpdatedby, field.TypeString)
	}
	if value, ok := amuo.mutation.UpdatedDate(); ok {
		_spec.SetField(adminmaster.FieldUpdatedDate, field.TypeTime, value)
	}
	if amuo.mutation.UpdatedDateCleared() {
		_spec.ClearField(adminmaster.FieldUpdatedDate, field.TypeTime)
	}
	if amuo.mutation.LogDataCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   adminmaster.LogDataTable,
			Columns: []string{adminmaster.LogDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(logs.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := amuo.mutation.RemovedLogDataIDs(); len(nodes) > 0 && !amuo.mutation.LogDataCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   adminmaster.LogDataTable,
			Columns: []string{adminmaster.LogDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(logs.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := amuo.mutation.LogDataIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   adminmaster.LogDataTable,
			Columns: []string{adminmaster.LogDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(logs.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &AdminMaster{config: amuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, amuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{adminmaster.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	amuo.mutation.done = true
	return _node, nil
}
