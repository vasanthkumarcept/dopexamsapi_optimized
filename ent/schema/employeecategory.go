// Code generated by entimport, DO NOT EDIT.

package schema

import (
	"entgo.io/ent"
	"entgo.io/ent/dialect/entsql"
	"entgo.io/ent/dialect"
	"entgo.io/ent/schema"
	//"entgo.io/ent/schema/edge"
	
	"entgo.io/ent/schema/field"
)
type EmployeeCategory struct {
	ent.Schema
}

func (EmployeeCategory) Fields() []ent.Field {
	return []ent.Field{field.Int32("id").StorageKey("UniqueID"),
	 
	 field.String("CategoryCode").Optional(),
	 field.String("CategoryDescription").Optional(),
	 field.Int32("MinimumMarks").Optional(),
	 field.String("HallCategoryCode").Optional(),
	 field.String("OrderNumber").Optional(),
		
	 field.Int64("CreatedById").Optional(),
	 field.String("CreatedByUserName").Optional(),
	 field.String("CreatedByEmployeeId").Optional(),
	 field.String("CreatedByDesignation").Optional(),
	 field.Time("CreatedDate").SchemaType(map[string]string{
		 dialect.Postgres: "timestamp",
	 }).Optional(),
	 field.Int64("VerifiedById").Optional(),
field.String("VerifiedByUserName").Optional(),
field.String("VerifiedByEmployeeId").Optional(),
field.String("VerifiedByDesignation").Optional(),
field.Time("VerifiedDate").SchemaType(map[string]string{
 dialect.Postgres: "timestamp",
}).Optional(),
field.String("Status").Optional(),
field.Int64("DeletedById").Optional(),
field.String("DeletedByUserName").Optional(),
field.String("DeletedByEmployeeId").Optional(),
field.String("DeletedByDesignation").Optional(),
field.Time("DeletedDate").SchemaType(map[string]string{
 dialect.Postgres: "timestamp",
}).Optional(),


	 field.Int32("ExamconfigurationExamcode").Optional(),
	 field.String("ExamShortDescription").Optional(),
	 field.String("ExamLongDescription").Optional(),
	 field.Int32("ExamPaperCode_paperCode").Optional(),
	 field.Int32("EmployeeCategory_categoryID").Optional(),
	// field.String("OrderNumbar").Optional(),
	//field.String("CategoryCode").Optional(),

	
	 
	//  Additional Fields
	
	
	//field.String("OrderNumber").Optional(),
	//field.String("Status").Optional(),
	//field.Int32("CreatedById").Optional(),
	// field.String("CreatedByUserName").Optional(),
	//	field.String("CreatedByEmployeeId").Optional(),
		//field.String("CreatedByDesignation").Optional(),
		//field.Time("CreatedDate").SchemaType(map[string]string{
		// 	dialect.Postgres: "timestamp",
		// }).Optional(),
// 		field.Int64("VerifiedById").Optional(),
// field.String("VerifiedByUserName").Optional(),
// field.String("VerifiedByEmployeeId").Optional(),
// field.String("VerifiedByDesignation").Optional(),
// field.Time("VerifiedDate").SchemaType(map[string]string{
//     dialect.Postgres: "timestamp",
// }).Optional(),
// field.Int64("DeletedById").Optional(),
// field.String("DeletedByUserName").Optional(),
// field.String("DeletedByEmployeeId").Optional(),
// field.String("DeletedByDesignation").Optional(),
// field.Time("DeletedDate").SchemaType(map[string]string{
//     dialect.Postgres: "timestamp",
// }).Optional(),


	// //  field.String("Status").Optional(),
	// 	field.String("CreatedByID").Optional(),
	// 	field.String("CreatedByUserName").Optional(),
	// 	field.String("CreatedByEmpID").Optional(),
	// 	field.String("CreatedByDesignation").Optional(),
	// 	field.Time("CreatedDate").Optional(),
	// 	field.String("VerifiedByID").Optional(),
	// 	field.String("VerifiedByUserName").Optional(),
	// 	field.String("VerifiedByEmpID").Optional(),
	// 	field.String("VerifiedByDesignation").Optional(),

	// 	field.Time("VerifiedDate").Optional(),
	// 	field.String("DeletedByID").Optional(),
	// 	field.String("DeletedByUserName").Optional(),

	// 	field.String("DeletedByEmpID").Optional(),
	// 	field.String("DeletedByDesignation").Optional(),

	// 	field.Time("DeletedDate").Optional(),
	}
}
func (EmployeeCategory) Edges() []ent.Edge {
// 	return []ent.Edge{
		
// 	edge.To("ExpCatRefs" , Exam_Applications_IP.Type),
// 	edge.To("ExpCatRefsGDSPA" , Exam_Applications_GDSPA.Type),
// 	edge.To("ExpCatRefsMTSPMMG" , Exam_Application_MTSPMMG.Type),
// 	edge.To("ExpCatRefsPMPA" , Exam_Applications_PMPA.Type),
// 	edge.To("ExpCatRefsGDSPM" , Exam_Applications_GDSPM.Type),
// 	edge.To("ExpCatPSRefs" , Exam_Applications_PS.Type),
// }
return nil
}


func (EmployeeCategory) Annotations() []schema.Annotation {
	return []schema.Annotation{entsql.Annotation{Table: "EmployeeCategory"}}
}
