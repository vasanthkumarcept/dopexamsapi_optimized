// Code generated by ent, DO NOT EDIT.

package examtype

import (
	"recruit/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int32) predicate.ExamType {
	return predicate.ExamType(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int32) predicate.ExamType {
	return predicate.ExamType(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int32) predicate.ExamType {
	return predicate.ExamType(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int32) predicate.ExamType {
	return predicate.ExamType(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int32) predicate.ExamType {
	return predicate.ExamType(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int32) predicate.ExamType {
	return predicate.ExamType(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int32) predicate.ExamType {
	return predicate.ExamType(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int32) predicate.ExamType {
	return predicate.ExamType(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int32) predicate.ExamType {
	return predicate.ExamType(sql.FieldLTE(FieldID, id))
}

// ExamType applies equality check predicate on the "ExamType" field. It's identical to ExamTypeEQ.
func ExamType(v string) predicate.ExamType {
	return predicate.ExamType(sql.FieldEQ(FieldExamType, v))
}

// Status applies equality check predicate on the "Status" field. It's identical to StatusEQ.
func Status(v string) predicate.ExamType {
	return predicate.ExamType(sql.FieldEQ(FieldStatus, v))
}

// ExamCode applies equality check predicate on the "ExamCode" field. It's identical to ExamCodeEQ.
func ExamCode(v int32) predicate.ExamType {
	return predicate.ExamType(sql.FieldEQ(FieldExamCode, v))
}

// ExamTypeEQ applies the EQ predicate on the "ExamType" field.
func ExamTypeEQ(v string) predicate.ExamType {
	return predicate.ExamType(sql.FieldEQ(FieldExamType, v))
}

// ExamTypeNEQ applies the NEQ predicate on the "ExamType" field.
func ExamTypeNEQ(v string) predicate.ExamType {
	return predicate.ExamType(sql.FieldNEQ(FieldExamType, v))
}

// ExamTypeIn applies the In predicate on the "ExamType" field.
func ExamTypeIn(vs ...string) predicate.ExamType {
	return predicate.ExamType(sql.FieldIn(FieldExamType, vs...))
}

// ExamTypeNotIn applies the NotIn predicate on the "ExamType" field.
func ExamTypeNotIn(vs ...string) predicate.ExamType {
	return predicate.ExamType(sql.FieldNotIn(FieldExamType, vs...))
}

// ExamTypeGT applies the GT predicate on the "ExamType" field.
func ExamTypeGT(v string) predicate.ExamType {
	return predicate.ExamType(sql.FieldGT(FieldExamType, v))
}

// ExamTypeGTE applies the GTE predicate on the "ExamType" field.
func ExamTypeGTE(v string) predicate.ExamType {
	return predicate.ExamType(sql.FieldGTE(FieldExamType, v))
}

// ExamTypeLT applies the LT predicate on the "ExamType" field.
func ExamTypeLT(v string) predicate.ExamType {
	return predicate.ExamType(sql.FieldLT(FieldExamType, v))
}

// ExamTypeLTE applies the LTE predicate on the "ExamType" field.
func ExamTypeLTE(v string) predicate.ExamType {
	return predicate.ExamType(sql.FieldLTE(FieldExamType, v))
}

// ExamTypeContains applies the Contains predicate on the "ExamType" field.
func ExamTypeContains(v string) predicate.ExamType {
	return predicate.ExamType(sql.FieldContains(FieldExamType, v))
}

// ExamTypeHasPrefix applies the HasPrefix predicate on the "ExamType" field.
func ExamTypeHasPrefix(v string) predicate.ExamType {
	return predicate.ExamType(sql.FieldHasPrefix(FieldExamType, v))
}

// ExamTypeHasSuffix applies the HasSuffix predicate on the "ExamType" field.
func ExamTypeHasSuffix(v string) predicate.ExamType {
	return predicate.ExamType(sql.FieldHasSuffix(FieldExamType, v))
}

// ExamTypeEqualFold applies the EqualFold predicate on the "ExamType" field.
func ExamTypeEqualFold(v string) predicate.ExamType {
	return predicate.ExamType(sql.FieldEqualFold(FieldExamType, v))
}

// ExamTypeContainsFold applies the ContainsFold predicate on the "ExamType" field.
func ExamTypeContainsFold(v string) predicate.ExamType {
	return predicate.ExamType(sql.FieldContainsFold(FieldExamType, v))
}

// StatusEQ applies the EQ predicate on the "Status" field.
func StatusEQ(v string) predicate.ExamType {
	return predicate.ExamType(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "Status" field.
func StatusNEQ(v string) predicate.ExamType {
	return predicate.ExamType(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "Status" field.
func StatusIn(vs ...string) predicate.ExamType {
	return predicate.ExamType(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "Status" field.
func StatusNotIn(vs ...string) predicate.ExamType {
	return predicate.ExamType(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "Status" field.
func StatusGT(v string) predicate.ExamType {
	return predicate.ExamType(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "Status" field.
func StatusGTE(v string) predicate.ExamType {
	return predicate.ExamType(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "Status" field.
func StatusLT(v string) predicate.ExamType {
	return predicate.ExamType(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "Status" field.
func StatusLTE(v string) predicate.ExamType {
	return predicate.ExamType(sql.FieldLTE(FieldStatus, v))
}

// StatusContains applies the Contains predicate on the "Status" field.
func StatusContains(v string) predicate.ExamType {
	return predicate.ExamType(sql.FieldContains(FieldStatus, v))
}

// StatusHasPrefix applies the HasPrefix predicate on the "Status" field.
func StatusHasPrefix(v string) predicate.ExamType {
	return predicate.ExamType(sql.FieldHasPrefix(FieldStatus, v))
}

// StatusHasSuffix applies the HasSuffix predicate on the "Status" field.
func StatusHasSuffix(v string) predicate.ExamType {
	return predicate.ExamType(sql.FieldHasSuffix(FieldStatus, v))
}

// StatusEqualFold applies the EqualFold predicate on the "Status" field.
func StatusEqualFold(v string) predicate.ExamType {
	return predicate.ExamType(sql.FieldEqualFold(FieldStatus, v))
}

// StatusContainsFold applies the ContainsFold predicate on the "Status" field.
func StatusContainsFold(v string) predicate.ExamType {
	return predicate.ExamType(sql.FieldContainsFold(FieldStatus, v))
}

// ExamCodeEQ applies the EQ predicate on the "ExamCode" field.
func ExamCodeEQ(v int32) predicate.ExamType {
	return predicate.ExamType(sql.FieldEQ(FieldExamCode, v))
}

// ExamCodeNEQ applies the NEQ predicate on the "ExamCode" field.
func ExamCodeNEQ(v int32) predicate.ExamType {
	return predicate.ExamType(sql.FieldNEQ(FieldExamCode, v))
}

// ExamCodeIn applies the In predicate on the "ExamCode" field.
func ExamCodeIn(vs ...int32) predicate.ExamType {
	return predicate.ExamType(sql.FieldIn(FieldExamCode, vs...))
}

// ExamCodeNotIn applies the NotIn predicate on the "ExamCode" field.
func ExamCodeNotIn(vs ...int32) predicate.ExamType {
	return predicate.ExamType(sql.FieldNotIn(FieldExamCode, vs...))
}

// ExamCodeIsNil applies the IsNil predicate on the "ExamCode" field.
func ExamCodeIsNil() predicate.ExamType {
	return predicate.ExamType(sql.FieldIsNull(FieldExamCode))
}

// ExamCodeNotNil applies the NotNil predicate on the "ExamCode" field.
func ExamCodeNotNil() predicate.ExamType {
	return predicate.ExamType(sql.FieldNotNull(FieldExamCode))
}

// HasExam applies the HasEdge predicate on the "exam" edge.
func HasExam() predicate.ExamType {
	return predicate.ExamType(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ExamTable, ExamColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasExamWith applies the HasEdge predicate on the "exam" edge with a given conditions (other predicates).
func HasExamWith(preds ...predicate.Exam) predicate.ExamType {
	return predicate.ExamType(func(s *sql.Selector) {
		step := newExamStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ExamType) predicate.ExamType {
	return predicate.ExamType(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ExamType) predicate.ExamType {
	return predicate.ExamType(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ExamType) predicate.ExamType {
	return predicate.ExamType(func(s *sql.Selector) {
		p(s.Not())
	})
}
