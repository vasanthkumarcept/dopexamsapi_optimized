// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"recruit/ent/exam_applications_ps"
	"recruit/ent/predicate"
	"recruit/ent/recommendationspsapplications"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// RecommendationsPSApplicationsUpdate is the builder for updating RecommendationsPSApplications entities.
type RecommendationsPSApplicationsUpdate struct {
	config
	hooks    []Hook
	mutation *RecommendationsPSApplicationsMutation
}

// Where appends a list predicates to the RecommendationsPSApplicationsUpdate builder.
func (rpau *RecommendationsPSApplicationsUpdate) Where(ps ...predicate.RecommendationsPSApplications) *RecommendationsPSApplicationsUpdate {
	rpau.mutation.Where(ps...)
	return rpau
}

// SetApplicationID sets the "ApplicationID" field.
func (rpau *RecommendationsPSApplicationsUpdate) SetApplicationID(i int64) *RecommendationsPSApplicationsUpdate {
	rpau.mutation.ResetApplicationID()
	rpau.mutation.SetApplicationID(i)
	return rpau
}

// SetNillableApplicationID sets the "ApplicationID" field if the given value is not nil.
func (rpau *RecommendationsPSApplicationsUpdate) SetNillableApplicationID(i *int64) *RecommendationsPSApplicationsUpdate {
	if i != nil {
		rpau.SetApplicationID(*i)
	}
	return rpau
}

// AddApplicationID adds i to the "ApplicationID" field.
func (rpau *RecommendationsPSApplicationsUpdate) AddApplicationID(i int64) *RecommendationsPSApplicationsUpdate {
	rpau.mutation.AddApplicationID(i)
	return rpau
}

// ClearApplicationID clears the value of the "ApplicationID" field.
func (rpau *RecommendationsPSApplicationsUpdate) ClearApplicationID() *RecommendationsPSApplicationsUpdate {
	rpau.mutation.ClearApplicationID()
	return rpau
}

// SetEmployeeID sets the "EmployeeID" field.
func (rpau *RecommendationsPSApplicationsUpdate) SetEmployeeID(i int64) *RecommendationsPSApplicationsUpdate {
	rpau.mutation.ResetEmployeeID()
	rpau.mutation.SetEmployeeID(i)
	return rpau
}

// SetNillableEmployeeID sets the "EmployeeID" field if the given value is not nil.
func (rpau *RecommendationsPSApplicationsUpdate) SetNillableEmployeeID(i *int64) *RecommendationsPSApplicationsUpdate {
	if i != nil {
		rpau.SetEmployeeID(*i)
	}
	return rpau
}

// AddEmployeeID adds i to the "EmployeeID" field.
func (rpau *RecommendationsPSApplicationsUpdate) AddEmployeeID(i int64) *RecommendationsPSApplicationsUpdate {
	rpau.mutation.AddEmployeeID(i)
	return rpau
}

// ClearEmployeeID clears the value of the "EmployeeID" field.
func (rpau *RecommendationsPSApplicationsUpdate) ClearEmployeeID() *RecommendationsPSApplicationsUpdate {
	rpau.mutation.ClearEmployeeID()
	return rpau
}

// SetExamNameCode sets the "ExamNameCode" field.
func (rpau *RecommendationsPSApplicationsUpdate) SetExamNameCode(s string) *RecommendationsPSApplicationsUpdate {
	rpau.mutation.SetExamNameCode(s)
	return rpau
}

// SetNillableExamNameCode sets the "ExamNameCode" field if the given value is not nil.
func (rpau *RecommendationsPSApplicationsUpdate) SetNillableExamNameCode(s *string) *RecommendationsPSApplicationsUpdate {
	if s != nil {
		rpau.SetExamNameCode(*s)
	}
	return rpau
}

// ClearExamNameCode clears the value of the "ExamNameCode" field.
func (rpau *RecommendationsPSApplicationsUpdate) ClearExamNameCode() *RecommendationsPSApplicationsUpdate {
	rpau.mutation.ClearExamNameCode()
	return rpau
}

// SetExamYear sets the "ExamYear" field.
func (rpau *RecommendationsPSApplicationsUpdate) SetExamYear(s string) *RecommendationsPSApplicationsUpdate {
	rpau.mutation.SetExamYear(s)
	return rpau
}

// SetNillableExamYear sets the "ExamYear" field if the given value is not nil.
func (rpau *RecommendationsPSApplicationsUpdate) SetNillableExamYear(s *string) *RecommendationsPSApplicationsUpdate {
	if s != nil {
		rpau.SetExamYear(*s)
	}
	return rpau
}

// ClearExamYear clears the value of the "ExamYear" field.
func (rpau *RecommendationsPSApplicationsUpdate) ClearExamYear() *RecommendationsPSApplicationsUpdate {
	rpau.mutation.ClearExamYear()
	return rpau
}

// SetVacancyYear sets the "VacancyYear" field.
func (rpau *RecommendationsPSApplicationsUpdate) SetVacancyYear(i int32) *RecommendationsPSApplicationsUpdate {
	rpau.mutation.ResetVacancyYear()
	rpau.mutation.SetVacancyYear(i)
	return rpau
}

// SetNillableVacancyYear sets the "VacancyYear" field if the given value is not nil.
func (rpau *RecommendationsPSApplicationsUpdate) SetNillableVacancyYear(i *int32) *RecommendationsPSApplicationsUpdate {
	if i != nil {
		rpau.SetVacancyYear(*i)
	}
	return rpau
}

// AddVacancyYear adds i to the "VacancyYear" field.
func (rpau *RecommendationsPSApplicationsUpdate) AddVacancyYear(i int32) *RecommendationsPSApplicationsUpdate {
	rpau.mutation.AddVacancyYear(i)
	return rpau
}

// ClearVacancyYear clears the value of the "VacancyYear" field.
func (rpau *RecommendationsPSApplicationsUpdate) ClearVacancyYear() *RecommendationsPSApplicationsUpdate {
	rpau.mutation.ClearVacancyYear()
	return rpau
}

// SetCARecommendations sets the "CA_Recommendations" field.
func (rpau *RecommendationsPSApplicationsUpdate) SetCARecommendations(s string) *RecommendationsPSApplicationsUpdate {
	rpau.mutation.SetCARecommendations(s)
	return rpau
}

// SetNillableCARecommendations sets the "CA_Recommendations" field if the given value is not nil.
func (rpau *RecommendationsPSApplicationsUpdate) SetNillableCARecommendations(s *string) *RecommendationsPSApplicationsUpdate {
	if s != nil {
		rpau.SetCARecommendations(*s)
	}
	return rpau
}

// ClearCARecommendations clears the value of the "CA_Recommendations" field.
func (rpau *RecommendationsPSApplicationsUpdate) ClearCARecommendations() *RecommendationsPSApplicationsUpdate {
	rpau.mutation.ClearCARecommendations()
	return rpau
}

// SetCAUpdatedAt sets the "CA_UpdatedAt" field.
func (rpau *RecommendationsPSApplicationsUpdate) SetCAUpdatedAt(t time.Time) *RecommendationsPSApplicationsUpdate {
	rpau.mutation.SetCAUpdatedAt(t)
	return rpau
}

// SetNillableCAUpdatedAt sets the "CA_UpdatedAt" field if the given value is not nil.
func (rpau *RecommendationsPSApplicationsUpdate) SetNillableCAUpdatedAt(t *time.Time) *RecommendationsPSApplicationsUpdate {
	if t != nil {
		rpau.SetCAUpdatedAt(*t)
	}
	return rpau
}

// ClearCAUpdatedAt clears the value of the "CA_UpdatedAt" field.
func (rpau *RecommendationsPSApplicationsUpdate) ClearCAUpdatedAt() *RecommendationsPSApplicationsUpdate {
	rpau.mutation.ClearCAUpdatedAt()
	return rpau
}

// SetCAUserName sets the "CA_UserName" field.
func (rpau *RecommendationsPSApplicationsUpdate) SetCAUserName(s string) *RecommendationsPSApplicationsUpdate {
	rpau.mutation.SetCAUserName(s)
	return rpau
}

// SetNillableCAUserName sets the "CA_UserName" field if the given value is not nil.
func (rpau *RecommendationsPSApplicationsUpdate) SetNillableCAUserName(s *string) *RecommendationsPSApplicationsUpdate {
	if s != nil {
		rpau.SetCAUserName(*s)
	}
	return rpau
}

// ClearCAUserName clears the value of the "CA_UserName" field.
func (rpau *RecommendationsPSApplicationsUpdate) ClearCAUserName() *RecommendationsPSApplicationsUpdate {
	rpau.mutation.ClearCAUserName()
	return rpau
}

// SetCARemarks sets the "CA_Remarks" field.
func (rpau *RecommendationsPSApplicationsUpdate) SetCARemarks(s string) *RecommendationsPSApplicationsUpdate {
	rpau.mutation.SetCARemarks(s)
	return rpau
}

// SetNillableCARemarks sets the "CA_Remarks" field if the given value is not nil.
func (rpau *RecommendationsPSApplicationsUpdate) SetNillableCARemarks(s *string) *RecommendationsPSApplicationsUpdate {
	if s != nil {
		rpau.SetCARemarks(*s)
	}
	return rpau
}

// ClearCARemarks clears the value of the "CA_Remarks" field.
func (rpau *RecommendationsPSApplicationsUpdate) ClearCARemarks() *RecommendationsPSApplicationsUpdate {
	rpau.mutation.ClearCARemarks()
	return rpau
}

// SetNORecommendations sets the "NO_Recommendations" field.
func (rpau *RecommendationsPSApplicationsUpdate) SetNORecommendations(s string) *RecommendationsPSApplicationsUpdate {
	rpau.mutation.SetNORecommendations(s)
	return rpau
}

// SetNillableNORecommendations sets the "NO_Recommendations" field if the given value is not nil.
func (rpau *RecommendationsPSApplicationsUpdate) SetNillableNORecommendations(s *string) *RecommendationsPSApplicationsUpdate {
	if s != nil {
		rpau.SetNORecommendations(*s)
	}
	return rpau
}

// ClearNORecommendations clears the value of the "NO_Recommendations" field.
func (rpau *RecommendationsPSApplicationsUpdate) ClearNORecommendations() *RecommendationsPSApplicationsUpdate {
	rpau.mutation.ClearNORecommendations()
	return rpau
}

// SetNOUpdatedAt sets the "NO_UpdatedAt" field.
func (rpau *RecommendationsPSApplicationsUpdate) SetNOUpdatedAt(t time.Time) *RecommendationsPSApplicationsUpdate {
	rpau.mutation.SetNOUpdatedAt(t)
	return rpau
}

// SetNillableNOUpdatedAt sets the "NO_UpdatedAt" field if the given value is not nil.
func (rpau *RecommendationsPSApplicationsUpdate) SetNillableNOUpdatedAt(t *time.Time) *RecommendationsPSApplicationsUpdate {
	if t != nil {
		rpau.SetNOUpdatedAt(*t)
	}
	return rpau
}

// ClearNOUpdatedAt clears the value of the "NO_UpdatedAt" field.
func (rpau *RecommendationsPSApplicationsUpdate) ClearNOUpdatedAt() *RecommendationsPSApplicationsUpdate {
	rpau.mutation.ClearNOUpdatedAt()
	return rpau
}

// SetNOUserName sets the "NO_UserName" field.
func (rpau *RecommendationsPSApplicationsUpdate) SetNOUserName(s string) *RecommendationsPSApplicationsUpdate {
	rpau.mutation.SetNOUserName(s)
	return rpau
}

// SetNillableNOUserName sets the "NO_UserName" field if the given value is not nil.
func (rpau *RecommendationsPSApplicationsUpdate) SetNillableNOUserName(s *string) *RecommendationsPSApplicationsUpdate {
	if s != nil {
		rpau.SetNOUserName(*s)
	}
	return rpau
}

// ClearNOUserName clears the value of the "NO_UserName" field.
func (rpau *RecommendationsPSApplicationsUpdate) ClearNOUserName() *RecommendationsPSApplicationsUpdate {
	rpau.mutation.ClearNOUserName()
	return rpau
}

// SetNORemarks sets the "NO_Remarks" field.
func (rpau *RecommendationsPSApplicationsUpdate) SetNORemarks(s string) *RecommendationsPSApplicationsUpdate {
	rpau.mutation.SetNORemarks(s)
	return rpau
}

// SetNillableNORemarks sets the "NO_Remarks" field if the given value is not nil.
func (rpau *RecommendationsPSApplicationsUpdate) SetNillableNORemarks(s *string) *RecommendationsPSApplicationsUpdate {
	if s != nil {
		rpau.SetNORemarks(*s)
	}
	return rpau
}

// ClearNORemarks clears the value of the "NO_Remarks" field.
func (rpau *RecommendationsPSApplicationsUpdate) ClearNORemarks() *RecommendationsPSApplicationsUpdate {
	rpau.mutation.ClearNORemarks()
	return rpau
}

// SetApplicationStatus sets the "ApplicationStatus" field.
func (rpau *RecommendationsPSApplicationsUpdate) SetApplicationStatus(s string) *RecommendationsPSApplicationsUpdate {
	rpau.mutation.SetApplicationStatus(s)
	return rpau
}

// SetNillableApplicationStatus sets the "ApplicationStatus" field if the given value is not nil.
func (rpau *RecommendationsPSApplicationsUpdate) SetNillableApplicationStatus(s *string) *RecommendationsPSApplicationsUpdate {
	if s != nil {
		rpau.SetApplicationStatus(*s)
	}
	return rpau
}

// ClearApplicationStatus clears the value of the "ApplicationStatus" field.
func (rpau *RecommendationsPSApplicationsUpdate) ClearApplicationStatus() *RecommendationsPSApplicationsUpdate {
	rpau.mutation.ClearApplicationStatus()
	return rpau
}

// SetUpdatedAt sets the "UpdatedAt" field.
func (rpau *RecommendationsPSApplicationsUpdate) SetUpdatedAt(t time.Time) *RecommendationsPSApplicationsUpdate {
	rpau.mutation.SetUpdatedAt(t)
	return rpau
}

// SetNillableUpdatedAt sets the "UpdatedAt" field if the given value is not nil.
func (rpau *RecommendationsPSApplicationsUpdate) SetNillableUpdatedAt(t *time.Time) *RecommendationsPSApplicationsUpdate {
	if t != nil {
		rpau.SetUpdatedAt(*t)
	}
	return rpau
}

// ClearUpdatedAt clears the value of the "UpdatedAt" field.
func (rpau *RecommendationsPSApplicationsUpdate) ClearUpdatedAt() *RecommendationsPSApplicationsUpdate {
	rpau.mutation.ClearUpdatedAt()
	return rpau
}

// SetUpdatedBy sets the "UpdatedBy" field.
func (rpau *RecommendationsPSApplicationsUpdate) SetUpdatedBy(s string) *RecommendationsPSApplicationsUpdate {
	rpau.mutation.SetUpdatedBy(s)
	return rpau
}

// SetNillableUpdatedBy sets the "UpdatedBy" field if the given value is not nil.
func (rpau *RecommendationsPSApplicationsUpdate) SetNillableUpdatedBy(s *string) *RecommendationsPSApplicationsUpdate {
	if s != nil {
		rpau.SetUpdatedBy(*s)
	}
	return rpau
}

// ClearUpdatedBy clears the value of the "UpdatedBy" field.
func (rpau *RecommendationsPSApplicationsUpdate) ClearUpdatedBy() *RecommendationsPSApplicationsUpdate {
	rpau.mutation.ClearUpdatedBy()
	return rpau
}

// SetGenerateHallTicketFlag sets the "GenerateHallTicketFlag" field.
func (rpau *RecommendationsPSApplicationsUpdate) SetGenerateHallTicketFlag(b bool) *RecommendationsPSApplicationsUpdate {
	rpau.mutation.SetGenerateHallTicketFlag(b)
	return rpau
}

// SetNillableGenerateHallTicketFlag sets the "GenerateHallTicketFlag" field if the given value is not nil.
func (rpau *RecommendationsPSApplicationsUpdate) SetNillableGenerateHallTicketFlag(b *bool) *RecommendationsPSApplicationsUpdate {
	if b != nil {
		rpau.SetGenerateHallTicketFlag(*b)
	}
	return rpau
}

// ClearGenerateHallTicketFlag clears the value of the "GenerateHallTicketFlag" field.
func (rpau *RecommendationsPSApplicationsUpdate) ClearGenerateHallTicketFlag() *RecommendationsPSApplicationsUpdate {
	rpau.mutation.ClearGenerateHallTicketFlag()
	return rpau
}

// SetApplnRefPSID sets the "ApplnRefPS" edge to the Exam_Applications_PS entity by ID.
func (rpau *RecommendationsPSApplicationsUpdate) SetApplnRefPSID(id int64) *RecommendationsPSApplicationsUpdate {
	rpau.mutation.SetApplnRefPSID(id)
	return rpau
}

// SetNillableApplnRefPSID sets the "ApplnRefPS" edge to the Exam_Applications_PS entity by ID if the given value is not nil.
func (rpau *RecommendationsPSApplicationsUpdate) SetNillableApplnRefPSID(id *int64) *RecommendationsPSApplicationsUpdate {
	if id != nil {
		rpau = rpau.SetApplnRefPSID(*id)
	}
	return rpau
}

// SetApplnRefPS sets the "ApplnRefPS" edge to the Exam_Applications_PS entity.
func (rpau *RecommendationsPSApplicationsUpdate) SetApplnRefPS(e *Exam_Applications_PS) *RecommendationsPSApplicationsUpdate {
	return rpau.SetApplnRefPSID(e.ID)
}

// Mutation returns the RecommendationsPSApplicationsMutation object of the builder.
func (rpau *RecommendationsPSApplicationsUpdate) Mutation() *RecommendationsPSApplicationsMutation {
	return rpau.mutation
}

// ClearApplnRefPS clears the "ApplnRefPS" edge to the Exam_Applications_PS entity.
func (rpau *RecommendationsPSApplicationsUpdate) ClearApplnRefPS() *RecommendationsPSApplicationsUpdate {
	rpau.mutation.ClearApplnRefPS()
	return rpau
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (rpau *RecommendationsPSApplicationsUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, rpau.sqlSave, rpau.mutation, rpau.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rpau *RecommendationsPSApplicationsUpdate) SaveX(ctx context.Context) int {
	affected, err := rpau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (rpau *RecommendationsPSApplicationsUpdate) Exec(ctx context.Context) error {
	_, err := rpau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rpau *RecommendationsPSApplicationsUpdate) ExecX(ctx context.Context) {
	if err := rpau.Exec(ctx); err != nil {
		panic(err)
	}
}

func (rpau *RecommendationsPSApplicationsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(recommendationspsapplications.Table, recommendationspsapplications.Columns, sqlgraph.NewFieldSpec(recommendationspsapplications.FieldID, field.TypeInt64))
	if ps := rpau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rpau.mutation.ApplicationID(); ok {
		_spec.SetField(recommendationspsapplications.FieldApplicationID, field.TypeInt64, value)
	}
	if value, ok := rpau.mutation.AddedApplicationID(); ok {
		_spec.AddField(recommendationspsapplications.FieldApplicationID, field.TypeInt64, value)
	}
	if rpau.mutation.ApplicationIDCleared() {
		_spec.ClearField(recommendationspsapplications.FieldApplicationID, field.TypeInt64)
	}
	if value, ok := rpau.mutation.EmployeeID(); ok {
		_spec.SetField(recommendationspsapplications.FieldEmployeeID, field.TypeInt64, value)
	}
	if value, ok := rpau.mutation.AddedEmployeeID(); ok {
		_spec.AddField(recommendationspsapplications.FieldEmployeeID, field.TypeInt64, value)
	}
	if rpau.mutation.EmployeeIDCleared() {
		_spec.ClearField(recommendationspsapplications.FieldEmployeeID, field.TypeInt64)
	}
	if value, ok := rpau.mutation.ExamNameCode(); ok {
		_spec.SetField(recommendationspsapplications.FieldExamNameCode, field.TypeString, value)
	}
	if rpau.mutation.ExamNameCodeCleared() {
		_spec.ClearField(recommendationspsapplications.FieldExamNameCode, field.TypeString)
	}
	if value, ok := rpau.mutation.ExamYear(); ok {
		_spec.SetField(recommendationspsapplications.FieldExamYear, field.TypeString, value)
	}
	if rpau.mutation.ExamYearCleared() {
		_spec.ClearField(recommendationspsapplications.FieldExamYear, field.TypeString)
	}
	if value, ok := rpau.mutation.VacancyYear(); ok {
		_spec.SetField(recommendationspsapplications.FieldVacancyYear, field.TypeInt32, value)
	}
	if value, ok := rpau.mutation.AddedVacancyYear(); ok {
		_spec.AddField(recommendationspsapplications.FieldVacancyYear, field.TypeInt32, value)
	}
	if rpau.mutation.VacancyYearCleared() {
		_spec.ClearField(recommendationspsapplications.FieldVacancyYear, field.TypeInt32)
	}
	if value, ok := rpau.mutation.CARecommendations(); ok {
		_spec.SetField(recommendationspsapplications.FieldCARecommendations, field.TypeString, value)
	}
	if rpau.mutation.CARecommendationsCleared() {
		_spec.ClearField(recommendationspsapplications.FieldCARecommendations, field.TypeString)
	}
	if value, ok := rpau.mutation.CAUpdatedAt(); ok {
		_spec.SetField(recommendationspsapplications.FieldCAUpdatedAt, field.TypeTime, value)
	}
	if rpau.mutation.CAUpdatedAtCleared() {
		_spec.ClearField(recommendationspsapplications.FieldCAUpdatedAt, field.TypeTime)
	}
	if value, ok := rpau.mutation.CAUserName(); ok {
		_spec.SetField(recommendationspsapplications.FieldCAUserName, field.TypeString, value)
	}
	if rpau.mutation.CAUserNameCleared() {
		_spec.ClearField(recommendationspsapplications.FieldCAUserName, field.TypeString)
	}
	if value, ok := rpau.mutation.CARemarks(); ok {
		_spec.SetField(recommendationspsapplications.FieldCARemarks, field.TypeString, value)
	}
	if rpau.mutation.CARemarksCleared() {
		_spec.ClearField(recommendationspsapplications.FieldCARemarks, field.TypeString)
	}
	if value, ok := rpau.mutation.NORecommendations(); ok {
		_spec.SetField(recommendationspsapplications.FieldNORecommendations, field.TypeString, value)
	}
	if rpau.mutation.NORecommendationsCleared() {
		_spec.ClearField(recommendationspsapplications.FieldNORecommendations, field.TypeString)
	}
	if value, ok := rpau.mutation.NOUpdatedAt(); ok {
		_spec.SetField(recommendationspsapplications.FieldNOUpdatedAt, field.TypeTime, value)
	}
	if rpau.mutation.NOUpdatedAtCleared() {
		_spec.ClearField(recommendationspsapplications.FieldNOUpdatedAt, field.TypeTime)
	}
	if value, ok := rpau.mutation.NOUserName(); ok {
		_spec.SetField(recommendationspsapplications.FieldNOUserName, field.TypeString, value)
	}
	if rpau.mutation.NOUserNameCleared() {
		_spec.ClearField(recommendationspsapplications.FieldNOUserName, field.TypeString)
	}
	if value, ok := rpau.mutation.NORemarks(); ok {
		_spec.SetField(recommendationspsapplications.FieldNORemarks, field.TypeString, value)
	}
	if rpau.mutation.NORemarksCleared() {
		_spec.ClearField(recommendationspsapplications.FieldNORemarks, field.TypeString)
	}
	if value, ok := rpau.mutation.ApplicationStatus(); ok {
		_spec.SetField(recommendationspsapplications.FieldApplicationStatus, field.TypeString, value)
	}
	if rpau.mutation.ApplicationStatusCleared() {
		_spec.ClearField(recommendationspsapplications.FieldApplicationStatus, field.TypeString)
	}
	if value, ok := rpau.mutation.UpdatedAt(); ok {
		_spec.SetField(recommendationspsapplications.FieldUpdatedAt, field.TypeTime, value)
	}
	if rpau.mutation.UpdatedAtCleared() {
		_spec.ClearField(recommendationspsapplications.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := rpau.mutation.UpdatedBy(); ok {
		_spec.SetField(recommendationspsapplications.FieldUpdatedBy, field.TypeString, value)
	}
	if rpau.mutation.UpdatedByCleared() {
		_spec.ClearField(recommendationspsapplications.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := rpau.mutation.GenerateHallTicketFlag(); ok {
		_spec.SetField(recommendationspsapplications.FieldGenerateHallTicketFlag, field.TypeBool, value)
	}
	if rpau.mutation.GenerateHallTicketFlagCleared() {
		_spec.ClearField(recommendationspsapplications.FieldGenerateHallTicketFlag, field.TypeBool)
	}
	if rpau.mutation.ApplnRefPSCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   recommendationspsapplications.ApplnRefPSTable,
			Columns: []string{recommendationspsapplications.ApplnRefPSColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_ps.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rpau.mutation.ApplnRefPSIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   recommendationspsapplications.ApplnRefPSTable,
			Columns: []string{recommendationspsapplications.ApplnRefPSColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_ps.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, rpau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{recommendationspsapplications.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	rpau.mutation.done = true
	return n, nil
}

// RecommendationsPSApplicationsUpdateOne is the builder for updating a single RecommendationsPSApplications entity.
type RecommendationsPSApplicationsUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *RecommendationsPSApplicationsMutation
}

// SetApplicationID sets the "ApplicationID" field.
func (rpauo *RecommendationsPSApplicationsUpdateOne) SetApplicationID(i int64) *RecommendationsPSApplicationsUpdateOne {
	rpauo.mutation.ResetApplicationID()
	rpauo.mutation.SetApplicationID(i)
	return rpauo
}

// SetNillableApplicationID sets the "ApplicationID" field if the given value is not nil.
func (rpauo *RecommendationsPSApplicationsUpdateOne) SetNillableApplicationID(i *int64) *RecommendationsPSApplicationsUpdateOne {
	if i != nil {
		rpauo.SetApplicationID(*i)
	}
	return rpauo
}

// AddApplicationID adds i to the "ApplicationID" field.
func (rpauo *RecommendationsPSApplicationsUpdateOne) AddApplicationID(i int64) *RecommendationsPSApplicationsUpdateOne {
	rpauo.mutation.AddApplicationID(i)
	return rpauo
}

// ClearApplicationID clears the value of the "ApplicationID" field.
func (rpauo *RecommendationsPSApplicationsUpdateOne) ClearApplicationID() *RecommendationsPSApplicationsUpdateOne {
	rpauo.mutation.ClearApplicationID()
	return rpauo
}

// SetEmployeeID sets the "EmployeeID" field.
func (rpauo *RecommendationsPSApplicationsUpdateOne) SetEmployeeID(i int64) *RecommendationsPSApplicationsUpdateOne {
	rpauo.mutation.ResetEmployeeID()
	rpauo.mutation.SetEmployeeID(i)
	return rpauo
}

// SetNillableEmployeeID sets the "EmployeeID" field if the given value is not nil.
func (rpauo *RecommendationsPSApplicationsUpdateOne) SetNillableEmployeeID(i *int64) *RecommendationsPSApplicationsUpdateOne {
	if i != nil {
		rpauo.SetEmployeeID(*i)
	}
	return rpauo
}

// AddEmployeeID adds i to the "EmployeeID" field.
func (rpauo *RecommendationsPSApplicationsUpdateOne) AddEmployeeID(i int64) *RecommendationsPSApplicationsUpdateOne {
	rpauo.mutation.AddEmployeeID(i)
	return rpauo
}

// ClearEmployeeID clears the value of the "EmployeeID" field.
func (rpauo *RecommendationsPSApplicationsUpdateOne) ClearEmployeeID() *RecommendationsPSApplicationsUpdateOne {
	rpauo.mutation.ClearEmployeeID()
	return rpauo
}

// SetExamNameCode sets the "ExamNameCode" field.
func (rpauo *RecommendationsPSApplicationsUpdateOne) SetExamNameCode(s string) *RecommendationsPSApplicationsUpdateOne {
	rpauo.mutation.SetExamNameCode(s)
	return rpauo
}

// SetNillableExamNameCode sets the "ExamNameCode" field if the given value is not nil.
func (rpauo *RecommendationsPSApplicationsUpdateOne) SetNillableExamNameCode(s *string) *RecommendationsPSApplicationsUpdateOne {
	if s != nil {
		rpauo.SetExamNameCode(*s)
	}
	return rpauo
}

// ClearExamNameCode clears the value of the "ExamNameCode" field.
func (rpauo *RecommendationsPSApplicationsUpdateOne) ClearExamNameCode() *RecommendationsPSApplicationsUpdateOne {
	rpauo.mutation.ClearExamNameCode()
	return rpauo
}

// SetExamYear sets the "ExamYear" field.
func (rpauo *RecommendationsPSApplicationsUpdateOne) SetExamYear(s string) *RecommendationsPSApplicationsUpdateOne {
	rpauo.mutation.SetExamYear(s)
	return rpauo
}

// SetNillableExamYear sets the "ExamYear" field if the given value is not nil.
func (rpauo *RecommendationsPSApplicationsUpdateOne) SetNillableExamYear(s *string) *RecommendationsPSApplicationsUpdateOne {
	if s != nil {
		rpauo.SetExamYear(*s)
	}
	return rpauo
}

// ClearExamYear clears the value of the "ExamYear" field.
func (rpauo *RecommendationsPSApplicationsUpdateOne) ClearExamYear() *RecommendationsPSApplicationsUpdateOne {
	rpauo.mutation.ClearExamYear()
	return rpauo
}

// SetVacancyYear sets the "VacancyYear" field.
func (rpauo *RecommendationsPSApplicationsUpdateOne) SetVacancyYear(i int32) *RecommendationsPSApplicationsUpdateOne {
	rpauo.mutation.ResetVacancyYear()
	rpauo.mutation.SetVacancyYear(i)
	return rpauo
}

// SetNillableVacancyYear sets the "VacancyYear" field if the given value is not nil.
func (rpauo *RecommendationsPSApplicationsUpdateOne) SetNillableVacancyYear(i *int32) *RecommendationsPSApplicationsUpdateOne {
	if i != nil {
		rpauo.SetVacancyYear(*i)
	}
	return rpauo
}

// AddVacancyYear adds i to the "VacancyYear" field.
func (rpauo *RecommendationsPSApplicationsUpdateOne) AddVacancyYear(i int32) *RecommendationsPSApplicationsUpdateOne {
	rpauo.mutation.AddVacancyYear(i)
	return rpauo
}

// ClearVacancyYear clears the value of the "VacancyYear" field.
func (rpauo *RecommendationsPSApplicationsUpdateOne) ClearVacancyYear() *RecommendationsPSApplicationsUpdateOne {
	rpauo.mutation.ClearVacancyYear()
	return rpauo
}

// SetCARecommendations sets the "CA_Recommendations" field.
func (rpauo *RecommendationsPSApplicationsUpdateOne) SetCARecommendations(s string) *RecommendationsPSApplicationsUpdateOne {
	rpauo.mutation.SetCARecommendations(s)
	return rpauo
}

// SetNillableCARecommendations sets the "CA_Recommendations" field if the given value is not nil.
func (rpauo *RecommendationsPSApplicationsUpdateOne) SetNillableCARecommendations(s *string) *RecommendationsPSApplicationsUpdateOne {
	if s != nil {
		rpauo.SetCARecommendations(*s)
	}
	return rpauo
}

// ClearCARecommendations clears the value of the "CA_Recommendations" field.
func (rpauo *RecommendationsPSApplicationsUpdateOne) ClearCARecommendations() *RecommendationsPSApplicationsUpdateOne {
	rpauo.mutation.ClearCARecommendations()
	return rpauo
}

// SetCAUpdatedAt sets the "CA_UpdatedAt" field.
func (rpauo *RecommendationsPSApplicationsUpdateOne) SetCAUpdatedAt(t time.Time) *RecommendationsPSApplicationsUpdateOne {
	rpauo.mutation.SetCAUpdatedAt(t)
	return rpauo
}

// SetNillableCAUpdatedAt sets the "CA_UpdatedAt" field if the given value is not nil.
func (rpauo *RecommendationsPSApplicationsUpdateOne) SetNillableCAUpdatedAt(t *time.Time) *RecommendationsPSApplicationsUpdateOne {
	if t != nil {
		rpauo.SetCAUpdatedAt(*t)
	}
	return rpauo
}

// ClearCAUpdatedAt clears the value of the "CA_UpdatedAt" field.
func (rpauo *RecommendationsPSApplicationsUpdateOne) ClearCAUpdatedAt() *RecommendationsPSApplicationsUpdateOne {
	rpauo.mutation.ClearCAUpdatedAt()
	return rpauo
}

// SetCAUserName sets the "CA_UserName" field.
func (rpauo *RecommendationsPSApplicationsUpdateOne) SetCAUserName(s string) *RecommendationsPSApplicationsUpdateOne {
	rpauo.mutation.SetCAUserName(s)
	return rpauo
}

// SetNillableCAUserName sets the "CA_UserName" field if the given value is not nil.
func (rpauo *RecommendationsPSApplicationsUpdateOne) SetNillableCAUserName(s *string) *RecommendationsPSApplicationsUpdateOne {
	if s != nil {
		rpauo.SetCAUserName(*s)
	}
	return rpauo
}

// ClearCAUserName clears the value of the "CA_UserName" field.
func (rpauo *RecommendationsPSApplicationsUpdateOne) ClearCAUserName() *RecommendationsPSApplicationsUpdateOne {
	rpauo.mutation.ClearCAUserName()
	return rpauo
}

// SetCARemarks sets the "CA_Remarks" field.
func (rpauo *RecommendationsPSApplicationsUpdateOne) SetCARemarks(s string) *RecommendationsPSApplicationsUpdateOne {
	rpauo.mutation.SetCARemarks(s)
	return rpauo
}

// SetNillableCARemarks sets the "CA_Remarks" field if the given value is not nil.
func (rpauo *RecommendationsPSApplicationsUpdateOne) SetNillableCARemarks(s *string) *RecommendationsPSApplicationsUpdateOne {
	if s != nil {
		rpauo.SetCARemarks(*s)
	}
	return rpauo
}

// ClearCARemarks clears the value of the "CA_Remarks" field.
func (rpauo *RecommendationsPSApplicationsUpdateOne) ClearCARemarks() *RecommendationsPSApplicationsUpdateOne {
	rpauo.mutation.ClearCARemarks()
	return rpauo
}

// SetNORecommendations sets the "NO_Recommendations" field.
func (rpauo *RecommendationsPSApplicationsUpdateOne) SetNORecommendations(s string) *RecommendationsPSApplicationsUpdateOne {
	rpauo.mutation.SetNORecommendations(s)
	return rpauo
}

// SetNillableNORecommendations sets the "NO_Recommendations" field if the given value is not nil.
func (rpauo *RecommendationsPSApplicationsUpdateOne) SetNillableNORecommendations(s *string) *RecommendationsPSApplicationsUpdateOne {
	if s != nil {
		rpauo.SetNORecommendations(*s)
	}
	return rpauo
}

// ClearNORecommendations clears the value of the "NO_Recommendations" field.
func (rpauo *RecommendationsPSApplicationsUpdateOne) ClearNORecommendations() *RecommendationsPSApplicationsUpdateOne {
	rpauo.mutation.ClearNORecommendations()
	return rpauo
}

// SetNOUpdatedAt sets the "NO_UpdatedAt" field.
func (rpauo *RecommendationsPSApplicationsUpdateOne) SetNOUpdatedAt(t time.Time) *RecommendationsPSApplicationsUpdateOne {
	rpauo.mutation.SetNOUpdatedAt(t)
	return rpauo
}

// SetNillableNOUpdatedAt sets the "NO_UpdatedAt" field if the given value is not nil.
func (rpauo *RecommendationsPSApplicationsUpdateOne) SetNillableNOUpdatedAt(t *time.Time) *RecommendationsPSApplicationsUpdateOne {
	if t != nil {
		rpauo.SetNOUpdatedAt(*t)
	}
	return rpauo
}

// ClearNOUpdatedAt clears the value of the "NO_UpdatedAt" field.
func (rpauo *RecommendationsPSApplicationsUpdateOne) ClearNOUpdatedAt() *RecommendationsPSApplicationsUpdateOne {
	rpauo.mutation.ClearNOUpdatedAt()
	return rpauo
}

// SetNOUserName sets the "NO_UserName" field.
func (rpauo *RecommendationsPSApplicationsUpdateOne) SetNOUserName(s string) *RecommendationsPSApplicationsUpdateOne {
	rpauo.mutation.SetNOUserName(s)
	return rpauo
}

// SetNillableNOUserName sets the "NO_UserName" field if the given value is not nil.
func (rpauo *RecommendationsPSApplicationsUpdateOne) SetNillableNOUserName(s *string) *RecommendationsPSApplicationsUpdateOne {
	if s != nil {
		rpauo.SetNOUserName(*s)
	}
	return rpauo
}

// ClearNOUserName clears the value of the "NO_UserName" field.
func (rpauo *RecommendationsPSApplicationsUpdateOne) ClearNOUserName() *RecommendationsPSApplicationsUpdateOne {
	rpauo.mutation.ClearNOUserName()
	return rpauo
}

// SetNORemarks sets the "NO_Remarks" field.
func (rpauo *RecommendationsPSApplicationsUpdateOne) SetNORemarks(s string) *RecommendationsPSApplicationsUpdateOne {
	rpauo.mutation.SetNORemarks(s)
	return rpauo
}

// SetNillableNORemarks sets the "NO_Remarks" field if the given value is not nil.
func (rpauo *RecommendationsPSApplicationsUpdateOne) SetNillableNORemarks(s *string) *RecommendationsPSApplicationsUpdateOne {
	if s != nil {
		rpauo.SetNORemarks(*s)
	}
	return rpauo
}

// ClearNORemarks clears the value of the "NO_Remarks" field.
func (rpauo *RecommendationsPSApplicationsUpdateOne) ClearNORemarks() *RecommendationsPSApplicationsUpdateOne {
	rpauo.mutation.ClearNORemarks()
	return rpauo
}

// SetApplicationStatus sets the "ApplicationStatus" field.
func (rpauo *RecommendationsPSApplicationsUpdateOne) SetApplicationStatus(s string) *RecommendationsPSApplicationsUpdateOne {
	rpauo.mutation.SetApplicationStatus(s)
	return rpauo
}

// SetNillableApplicationStatus sets the "ApplicationStatus" field if the given value is not nil.
func (rpauo *RecommendationsPSApplicationsUpdateOne) SetNillableApplicationStatus(s *string) *RecommendationsPSApplicationsUpdateOne {
	if s != nil {
		rpauo.SetApplicationStatus(*s)
	}
	return rpauo
}

// ClearApplicationStatus clears the value of the "ApplicationStatus" field.
func (rpauo *RecommendationsPSApplicationsUpdateOne) ClearApplicationStatus() *RecommendationsPSApplicationsUpdateOne {
	rpauo.mutation.ClearApplicationStatus()
	return rpauo
}

// SetUpdatedAt sets the "UpdatedAt" field.
func (rpauo *RecommendationsPSApplicationsUpdateOne) SetUpdatedAt(t time.Time) *RecommendationsPSApplicationsUpdateOne {
	rpauo.mutation.SetUpdatedAt(t)
	return rpauo
}

// SetNillableUpdatedAt sets the "UpdatedAt" field if the given value is not nil.
func (rpauo *RecommendationsPSApplicationsUpdateOne) SetNillableUpdatedAt(t *time.Time) *RecommendationsPSApplicationsUpdateOne {
	if t != nil {
		rpauo.SetUpdatedAt(*t)
	}
	return rpauo
}

// ClearUpdatedAt clears the value of the "UpdatedAt" field.
func (rpauo *RecommendationsPSApplicationsUpdateOne) ClearUpdatedAt() *RecommendationsPSApplicationsUpdateOne {
	rpauo.mutation.ClearUpdatedAt()
	return rpauo
}

// SetUpdatedBy sets the "UpdatedBy" field.
func (rpauo *RecommendationsPSApplicationsUpdateOne) SetUpdatedBy(s string) *RecommendationsPSApplicationsUpdateOne {
	rpauo.mutation.SetUpdatedBy(s)
	return rpauo
}

// SetNillableUpdatedBy sets the "UpdatedBy" field if the given value is not nil.
func (rpauo *RecommendationsPSApplicationsUpdateOne) SetNillableUpdatedBy(s *string) *RecommendationsPSApplicationsUpdateOne {
	if s != nil {
		rpauo.SetUpdatedBy(*s)
	}
	return rpauo
}

// ClearUpdatedBy clears the value of the "UpdatedBy" field.
func (rpauo *RecommendationsPSApplicationsUpdateOne) ClearUpdatedBy() *RecommendationsPSApplicationsUpdateOne {
	rpauo.mutation.ClearUpdatedBy()
	return rpauo
}

// SetGenerateHallTicketFlag sets the "GenerateHallTicketFlag" field.
func (rpauo *RecommendationsPSApplicationsUpdateOne) SetGenerateHallTicketFlag(b bool) *RecommendationsPSApplicationsUpdateOne {
	rpauo.mutation.SetGenerateHallTicketFlag(b)
	return rpauo
}

// SetNillableGenerateHallTicketFlag sets the "GenerateHallTicketFlag" field if the given value is not nil.
func (rpauo *RecommendationsPSApplicationsUpdateOne) SetNillableGenerateHallTicketFlag(b *bool) *RecommendationsPSApplicationsUpdateOne {
	if b != nil {
		rpauo.SetGenerateHallTicketFlag(*b)
	}
	return rpauo
}

// ClearGenerateHallTicketFlag clears the value of the "GenerateHallTicketFlag" field.
func (rpauo *RecommendationsPSApplicationsUpdateOne) ClearGenerateHallTicketFlag() *RecommendationsPSApplicationsUpdateOne {
	rpauo.mutation.ClearGenerateHallTicketFlag()
	return rpauo
}

// SetApplnRefPSID sets the "ApplnRefPS" edge to the Exam_Applications_PS entity by ID.
func (rpauo *RecommendationsPSApplicationsUpdateOne) SetApplnRefPSID(id int64) *RecommendationsPSApplicationsUpdateOne {
	rpauo.mutation.SetApplnRefPSID(id)
	return rpauo
}

// SetNillableApplnRefPSID sets the "ApplnRefPS" edge to the Exam_Applications_PS entity by ID if the given value is not nil.
func (rpauo *RecommendationsPSApplicationsUpdateOne) SetNillableApplnRefPSID(id *int64) *RecommendationsPSApplicationsUpdateOne {
	if id != nil {
		rpauo = rpauo.SetApplnRefPSID(*id)
	}
	return rpauo
}

// SetApplnRefPS sets the "ApplnRefPS" edge to the Exam_Applications_PS entity.
func (rpauo *RecommendationsPSApplicationsUpdateOne) SetApplnRefPS(e *Exam_Applications_PS) *RecommendationsPSApplicationsUpdateOne {
	return rpauo.SetApplnRefPSID(e.ID)
}

// Mutation returns the RecommendationsPSApplicationsMutation object of the builder.
func (rpauo *RecommendationsPSApplicationsUpdateOne) Mutation() *RecommendationsPSApplicationsMutation {
	return rpauo.mutation
}

// ClearApplnRefPS clears the "ApplnRefPS" edge to the Exam_Applications_PS entity.
func (rpauo *RecommendationsPSApplicationsUpdateOne) ClearApplnRefPS() *RecommendationsPSApplicationsUpdateOne {
	rpauo.mutation.ClearApplnRefPS()
	return rpauo
}

// Where appends a list predicates to the RecommendationsPSApplicationsUpdate builder.
func (rpauo *RecommendationsPSApplicationsUpdateOne) Where(ps ...predicate.RecommendationsPSApplications) *RecommendationsPSApplicationsUpdateOne {
	rpauo.mutation.Where(ps...)
	return rpauo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (rpauo *RecommendationsPSApplicationsUpdateOne) Select(field string, fields ...string) *RecommendationsPSApplicationsUpdateOne {
	rpauo.fields = append([]string{field}, fields...)
	return rpauo
}

// Save executes the query and returns the updated RecommendationsPSApplications entity.
func (rpauo *RecommendationsPSApplicationsUpdateOne) Save(ctx context.Context) (*RecommendationsPSApplications, error) {
	return withHooks(ctx, rpauo.sqlSave, rpauo.mutation, rpauo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rpauo *RecommendationsPSApplicationsUpdateOne) SaveX(ctx context.Context) *RecommendationsPSApplications {
	node, err := rpauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (rpauo *RecommendationsPSApplicationsUpdateOne) Exec(ctx context.Context) error {
	_, err := rpauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rpauo *RecommendationsPSApplicationsUpdateOne) ExecX(ctx context.Context) {
	if err := rpauo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (rpauo *RecommendationsPSApplicationsUpdateOne) sqlSave(ctx context.Context) (_node *RecommendationsPSApplications, err error) {
	_spec := sqlgraph.NewUpdateSpec(recommendationspsapplications.Table, recommendationspsapplications.Columns, sqlgraph.NewFieldSpec(recommendationspsapplications.FieldID, field.TypeInt64))
	id, ok := rpauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "RecommendationsPSApplications.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := rpauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, recommendationspsapplications.FieldID)
		for _, f := range fields {
			if !recommendationspsapplications.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != recommendationspsapplications.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := rpauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rpauo.mutation.ApplicationID(); ok {
		_spec.SetField(recommendationspsapplications.FieldApplicationID, field.TypeInt64, value)
	}
	if value, ok := rpauo.mutation.AddedApplicationID(); ok {
		_spec.AddField(recommendationspsapplications.FieldApplicationID, field.TypeInt64, value)
	}
	if rpauo.mutation.ApplicationIDCleared() {
		_spec.ClearField(recommendationspsapplications.FieldApplicationID, field.TypeInt64)
	}
	if value, ok := rpauo.mutation.EmployeeID(); ok {
		_spec.SetField(recommendationspsapplications.FieldEmployeeID, field.TypeInt64, value)
	}
	if value, ok := rpauo.mutation.AddedEmployeeID(); ok {
		_spec.AddField(recommendationspsapplications.FieldEmployeeID, field.TypeInt64, value)
	}
	if rpauo.mutation.EmployeeIDCleared() {
		_spec.ClearField(recommendationspsapplications.FieldEmployeeID, field.TypeInt64)
	}
	if value, ok := rpauo.mutation.ExamNameCode(); ok {
		_spec.SetField(recommendationspsapplications.FieldExamNameCode, field.TypeString, value)
	}
	if rpauo.mutation.ExamNameCodeCleared() {
		_spec.ClearField(recommendationspsapplications.FieldExamNameCode, field.TypeString)
	}
	if value, ok := rpauo.mutation.ExamYear(); ok {
		_spec.SetField(recommendationspsapplications.FieldExamYear, field.TypeString, value)
	}
	if rpauo.mutation.ExamYearCleared() {
		_spec.ClearField(recommendationspsapplications.FieldExamYear, field.TypeString)
	}
	if value, ok := rpauo.mutation.VacancyYear(); ok {
		_spec.SetField(recommendationspsapplications.FieldVacancyYear, field.TypeInt32, value)
	}
	if value, ok := rpauo.mutation.AddedVacancyYear(); ok {
		_spec.AddField(recommendationspsapplications.FieldVacancyYear, field.TypeInt32, value)
	}
	if rpauo.mutation.VacancyYearCleared() {
		_spec.ClearField(recommendationspsapplications.FieldVacancyYear, field.TypeInt32)
	}
	if value, ok := rpauo.mutation.CARecommendations(); ok {
		_spec.SetField(recommendationspsapplications.FieldCARecommendations, field.TypeString, value)
	}
	if rpauo.mutation.CARecommendationsCleared() {
		_spec.ClearField(recommendationspsapplications.FieldCARecommendations, field.TypeString)
	}
	if value, ok := rpauo.mutation.CAUpdatedAt(); ok {
		_spec.SetField(recommendationspsapplications.FieldCAUpdatedAt, field.TypeTime, value)
	}
	if rpauo.mutation.CAUpdatedAtCleared() {
		_spec.ClearField(recommendationspsapplications.FieldCAUpdatedAt, field.TypeTime)
	}
	if value, ok := rpauo.mutation.CAUserName(); ok {
		_spec.SetField(recommendationspsapplications.FieldCAUserName, field.TypeString, value)
	}
	if rpauo.mutation.CAUserNameCleared() {
		_spec.ClearField(recommendationspsapplications.FieldCAUserName, field.TypeString)
	}
	if value, ok := rpauo.mutation.CARemarks(); ok {
		_spec.SetField(recommendationspsapplications.FieldCARemarks, field.TypeString, value)
	}
	if rpauo.mutation.CARemarksCleared() {
		_spec.ClearField(recommendationspsapplications.FieldCARemarks, field.TypeString)
	}
	if value, ok := rpauo.mutation.NORecommendations(); ok {
		_spec.SetField(recommendationspsapplications.FieldNORecommendations, field.TypeString, value)
	}
	if rpauo.mutation.NORecommendationsCleared() {
		_spec.ClearField(recommendationspsapplications.FieldNORecommendations, field.TypeString)
	}
	if value, ok := rpauo.mutation.NOUpdatedAt(); ok {
		_spec.SetField(recommendationspsapplications.FieldNOUpdatedAt, field.TypeTime, value)
	}
	if rpauo.mutation.NOUpdatedAtCleared() {
		_spec.ClearField(recommendationspsapplications.FieldNOUpdatedAt, field.TypeTime)
	}
	if value, ok := rpauo.mutation.NOUserName(); ok {
		_spec.SetField(recommendationspsapplications.FieldNOUserName, field.TypeString, value)
	}
	if rpauo.mutation.NOUserNameCleared() {
		_spec.ClearField(recommendationspsapplications.FieldNOUserName, field.TypeString)
	}
	if value, ok := rpauo.mutation.NORemarks(); ok {
		_spec.SetField(recommendationspsapplications.FieldNORemarks, field.TypeString, value)
	}
	if rpauo.mutation.NORemarksCleared() {
		_spec.ClearField(recommendationspsapplications.FieldNORemarks, field.TypeString)
	}
	if value, ok := rpauo.mutation.ApplicationStatus(); ok {
		_spec.SetField(recommendationspsapplications.FieldApplicationStatus, field.TypeString, value)
	}
	if rpauo.mutation.ApplicationStatusCleared() {
		_spec.ClearField(recommendationspsapplications.FieldApplicationStatus, field.TypeString)
	}
	if value, ok := rpauo.mutation.UpdatedAt(); ok {
		_spec.SetField(recommendationspsapplications.FieldUpdatedAt, field.TypeTime, value)
	}
	if rpauo.mutation.UpdatedAtCleared() {
		_spec.ClearField(recommendationspsapplications.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := rpauo.mutation.UpdatedBy(); ok {
		_spec.SetField(recommendationspsapplications.FieldUpdatedBy, field.TypeString, value)
	}
	if rpauo.mutation.UpdatedByCleared() {
		_spec.ClearField(recommendationspsapplications.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := rpauo.mutation.GenerateHallTicketFlag(); ok {
		_spec.SetField(recommendationspsapplications.FieldGenerateHallTicketFlag, field.TypeBool, value)
	}
	if rpauo.mutation.GenerateHallTicketFlagCleared() {
		_spec.ClearField(recommendationspsapplications.FieldGenerateHallTicketFlag, field.TypeBool)
	}
	if rpauo.mutation.ApplnRefPSCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   recommendationspsapplications.ApplnRefPSTable,
			Columns: []string{recommendationspsapplications.ApplnRefPSColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_ps.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rpauo.mutation.ApplnRefPSIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   recommendationspsapplications.ApplnRefPSTable,
			Columns: []string{recommendationspsapplications.ApplnRefPSColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_ps.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &RecommendationsPSApplications{config: rpauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, rpauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{recommendationspsapplications.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	rpauo.mutation.done = true
	return _node, nil
}
