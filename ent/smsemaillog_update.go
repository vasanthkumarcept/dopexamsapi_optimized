// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"recruit/ent/predicate"
	"recruit/ent/smsemaillog"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SmsEmailLogUpdate is the builder for updating SmsEmailLog entities.
type SmsEmailLogUpdate struct {
	config
	hooks    []Hook
	mutation *SmsEmailLogMutation
}

// Where appends a list predicates to the SmsEmailLogUpdate builder.
func (selu *SmsEmailLogUpdate) Where(ps ...predicate.SmsEmailLog) *SmsEmailLogUpdate {
	selu.mutation.Where(ps...)
	return selu
}

// SetType sets the "Type" field.
func (selu *SmsEmailLogUpdate) SetType(s string) *SmsEmailLogUpdate {
	selu.mutation.SetType(s)
	return selu
}

// SetNillableType sets the "Type" field if the given value is not nil.
func (selu *SmsEmailLogUpdate) SetNillableType(s *string) *SmsEmailLogUpdate {
	if s != nil {
		selu.SetType(*s)
	}
	return selu
}

// ClearType clears the value of the "Type" field.
func (selu *SmsEmailLogUpdate) ClearType() *SmsEmailLogUpdate {
	selu.mutation.ClearType()
	return selu
}

// SetMobileEmail sets the "MobileEmail" field.
func (selu *SmsEmailLogUpdate) SetMobileEmail(s string) *SmsEmailLogUpdate {
	selu.mutation.SetMobileEmail(s)
	return selu
}

// SetNillableMobileEmail sets the "MobileEmail" field if the given value is not nil.
func (selu *SmsEmailLogUpdate) SetNillableMobileEmail(s *string) *SmsEmailLogUpdate {
	if s != nil {
		selu.SetMobileEmail(*s)
	}
	return selu
}

// ClearMobileEmail clears the value of the "MobileEmail" field.
func (selu *SmsEmailLogUpdate) ClearMobileEmail() *SmsEmailLogUpdate {
	selu.mutation.ClearMobileEmail()
	return selu
}

// SetUserName sets the "UserName" field.
func (selu *SmsEmailLogUpdate) SetUserName(s string) *SmsEmailLogUpdate {
	selu.mutation.SetUserName(s)
	return selu
}

// SetNillableUserName sets the "UserName" field if the given value is not nil.
func (selu *SmsEmailLogUpdate) SetNillableUserName(s *string) *SmsEmailLogUpdate {
	if s != nil {
		selu.SetUserName(*s)
	}
	return selu
}

// ClearUserName clears the value of the "UserName" field.
func (selu *SmsEmailLogUpdate) ClearUserName() *SmsEmailLogUpdate {
	selu.mutation.ClearUserName()
	return selu
}

// SetEventCode sets the "EventCode" field.
func (selu *SmsEmailLogUpdate) SetEventCode(s string) *SmsEmailLogUpdate {
	selu.mutation.SetEventCode(s)
	return selu
}

// SetNillableEventCode sets the "EventCode" field if the given value is not nil.
func (selu *SmsEmailLogUpdate) SetNillableEventCode(s *string) *SmsEmailLogUpdate {
	if s != nil {
		selu.SetEventCode(*s)
	}
	return selu
}

// ClearEventCode clears the value of the "EventCode" field.
func (selu *SmsEmailLogUpdate) ClearEventCode() *SmsEmailLogUpdate {
	selu.mutation.ClearEventCode()
	return selu
}

// SetEventDescription sets the "EventDescription" field.
func (selu *SmsEmailLogUpdate) SetEventDescription(s string) *SmsEmailLogUpdate {
	selu.mutation.SetEventDescription(s)
	return selu
}

// SetNillableEventDescription sets the "EventDescription" field if the given value is not nil.
func (selu *SmsEmailLogUpdate) SetNillableEventDescription(s *string) *SmsEmailLogUpdate {
	if s != nil {
		selu.SetEventDescription(*s)
	}
	return selu
}

// ClearEventDescription clears the value of the "EventDescription" field.
func (selu *SmsEmailLogUpdate) ClearEventDescription() *SmsEmailLogUpdate {
	selu.mutation.ClearEventDescription()
	return selu
}

// SetApiResponse sets the "ApiResponse" field.
func (selu *SmsEmailLogUpdate) SetApiResponse(s string) *SmsEmailLogUpdate {
	selu.mutation.SetApiResponse(s)
	return selu
}

// SetNillableApiResponse sets the "ApiResponse" field if the given value is not nil.
func (selu *SmsEmailLogUpdate) SetNillableApiResponse(s *string) *SmsEmailLogUpdate {
	if s != nil {
		selu.SetApiResponse(*s)
	}
	return selu
}

// ClearApiResponse clears the value of the "ApiResponse" field.
func (selu *SmsEmailLogUpdate) ClearApiResponse() *SmsEmailLogUpdate {
	selu.mutation.ClearApiResponse()
	return selu
}

// SetApiResponseDescription sets the "ApiResponseDescription" field.
func (selu *SmsEmailLogUpdate) SetApiResponseDescription(s string) *SmsEmailLogUpdate {
	selu.mutation.SetApiResponseDescription(s)
	return selu
}

// SetNillableApiResponseDescription sets the "ApiResponseDescription" field if the given value is not nil.
func (selu *SmsEmailLogUpdate) SetNillableApiResponseDescription(s *string) *SmsEmailLogUpdate {
	if s != nil {
		selu.SetApiResponseDescription(*s)
	}
	return selu
}

// ClearApiResponseDescription clears the value of the "ApiResponseDescription" field.
func (selu *SmsEmailLogUpdate) ClearApiResponseDescription() *SmsEmailLogUpdate {
	selu.mutation.ClearApiResponseDescription()
	return selu
}

// SetEventtime sets the "eventtime" field.
func (selu *SmsEmailLogUpdate) SetEventtime(t time.Time) *SmsEmailLogUpdate {
	selu.mutation.SetEventtime(t)
	return selu
}

// SetNillableEventtime sets the "eventtime" field if the given value is not nil.
func (selu *SmsEmailLogUpdate) SetNillableEventtime(t *time.Time) *SmsEmailLogUpdate {
	if t != nil {
		selu.SetEventtime(*t)
	}
	return selu
}

// ClearEventtime clears the value of the "eventtime" field.
func (selu *SmsEmailLogUpdate) ClearEventtime() *SmsEmailLogUpdate {
	selu.mutation.ClearEventtime()
	return selu
}

// Mutation returns the SmsEmailLogMutation object of the builder.
func (selu *SmsEmailLogUpdate) Mutation() *SmsEmailLogMutation {
	return selu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (selu *SmsEmailLogUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, selu.sqlSave, selu.mutation, selu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (selu *SmsEmailLogUpdate) SaveX(ctx context.Context) int {
	affected, err := selu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (selu *SmsEmailLogUpdate) Exec(ctx context.Context) error {
	_, err := selu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (selu *SmsEmailLogUpdate) ExecX(ctx context.Context) {
	if err := selu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (selu *SmsEmailLogUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(smsemaillog.Table, smsemaillog.Columns, sqlgraph.NewFieldSpec(smsemaillog.FieldID, field.TypeInt64))
	if ps := selu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := selu.mutation.GetType(); ok {
		_spec.SetField(smsemaillog.FieldType, field.TypeString, value)
	}
	if selu.mutation.TypeCleared() {
		_spec.ClearField(smsemaillog.FieldType, field.TypeString)
	}
	if value, ok := selu.mutation.MobileEmail(); ok {
		_spec.SetField(smsemaillog.FieldMobileEmail, field.TypeString, value)
	}
	if selu.mutation.MobileEmailCleared() {
		_spec.ClearField(smsemaillog.FieldMobileEmail, field.TypeString)
	}
	if value, ok := selu.mutation.UserName(); ok {
		_spec.SetField(smsemaillog.FieldUserName, field.TypeString, value)
	}
	if selu.mutation.UserNameCleared() {
		_spec.ClearField(smsemaillog.FieldUserName, field.TypeString)
	}
	if value, ok := selu.mutation.EventCode(); ok {
		_spec.SetField(smsemaillog.FieldEventCode, field.TypeString, value)
	}
	if selu.mutation.EventCodeCleared() {
		_spec.ClearField(smsemaillog.FieldEventCode, field.TypeString)
	}
	if value, ok := selu.mutation.EventDescription(); ok {
		_spec.SetField(smsemaillog.FieldEventDescription, field.TypeString, value)
	}
	if selu.mutation.EventDescriptionCleared() {
		_spec.ClearField(smsemaillog.FieldEventDescription, field.TypeString)
	}
	if value, ok := selu.mutation.ApiResponse(); ok {
		_spec.SetField(smsemaillog.FieldApiResponse, field.TypeString, value)
	}
	if selu.mutation.ApiResponseCleared() {
		_spec.ClearField(smsemaillog.FieldApiResponse, field.TypeString)
	}
	if value, ok := selu.mutation.ApiResponseDescription(); ok {
		_spec.SetField(smsemaillog.FieldApiResponseDescription, field.TypeString, value)
	}
	if selu.mutation.ApiResponseDescriptionCleared() {
		_spec.ClearField(smsemaillog.FieldApiResponseDescription, field.TypeString)
	}
	if value, ok := selu.mutation.Eventtime(); ok {
		_spec.SetField(smsemaillog.FieldEventtime, field.TypeTime, value)
	}
	if selu.mutation.EventtimeCleared() {
		_spec.ClearField(smsemaillog.FieldEventtime, field.TypeTime)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, selu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{smsemaillog.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	selu.mutation.done = true
	return n, nil
}

// SmsEmailLogUpdateOne is the builder for updating a single SmsEmailLog entity.
type SmsEmailLogUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SmsEmailLogMutation
}

// SetType sets the "Type" field.
func (seluo *SmsEmailLogUpdateOne) SetType(s string) *SmsEmailLogUpdateOne {
	seluo.mutation.SetType(s)
	return seluo
}

// SetNillableType sets the "Type" field if the given value is not nil.
func (seluo *SmsEmailLogUpdateOne) SetNillableType(s *string) *SmsEmailLogUpdateOne {
	if s != nil {
		seluo.SetType(*s)
	}
	return seluo
}

// ClearType clears the value of the "Type" field.
func (seluo *SmsEmailLogUpdateOne) ClearType() *SmsEmailLogUpdateOne {
	seluo.mutation.ClearType()
	return seluo
}

// SetMobileEmail sets the "MobileEmail" field.
func (seluo *SmsEmailLogUpdateOne) SetMobileEmail(s string) *SmsEmailLogUpdateOne {
	seluo.mutation.SetMobileEmail(s)
	return seluo
}

// SetNillableMobileEmail sets the "MobileEmail" field if the given value is not nil.
func (seluo *SmsEmailLogUpdateOne) SetNillableMobileEmail(s *string) *SmsEmailLogUpdateOne {
	if s != nil {
		seluo.SetMobileEmail(*s)
	}
	return seluo
}

// ClearMobileEmail clears the value of the "MobileEmail" field.
func (seluo *SmsEmailLogUpdateOne) ClearMobileEmail() *SmsEmailLogUpdateOne {
	seluo.mutation.ClearMobileEmail()
	return seluo
}

// SetUserName sets the "UserName" field.
func (seluo *SmsEmailLogUpdateOne) SetUserName(s string) *SmsEmailLogUpdateOne {
	seluo.mutation.SetUserName(s)
	return seluo
}

// SetNillableUserName sets the "UserName" field if the given value is not nil.
func (seluo *SmsEmailLogUpdateOne) SetNillableUserName(s *string) *SmsEmailLogUpdateOne {
	if s != nil {
		seluo.SetUserName(*s)
	}
	return seluo
}

// ClearUserName clears the value of the "UserName" field.
func (seluo *SmsEmailLogUpdateOne) ClearUserName() *SmsEmailLogUpdateOne {
	seluo.mutation.ClearUserName()
	return seluo
}

// SetEventCode sets the "EventCode" field.
func (seluo *SmsEmailLogUpdateOne) SetEventCode(s string) *SmsEmailLogUpdateOne {
	seluo.mutation.SetEventCode(s)
	return seluo
}

// SetNillableEventCode sets the "EventCode" field if the given value is not nil.
func (seluo *SmsEmailLogUpdateOne) SetNillableEventCode(s *string) *SmsEmailLogUpdateOne {
	if s != nil {
		seluo.SetEventCode(*s)
	}
	return seluo
}

// ClearEventCode clears the value of the "EventCode" field.
func (seluo *SmsEmailLogUpdateOne) ClearEventCode() *SmsEmailLogUpdateOne {
	seluo.mutation.ClearEventCode()
	return seluo
}

// SetEventDescription sets the "EventDescription" field.
func (seluo *SmsEmailLogUpdateOne) SetEventDescription(s string) *SmsEmailLogUpdateOne {
	seluo.mutation.SetEventDescription(s)
	return seluo
}

// SetNillableEventDescription sets the "EventDescription" field if the given value is not nil.
func (seluo *SmsEmailLogUpdateOne) SetNillableEventDescription(s *string) *SmsEmailLogUpdateOne {
	if s != nil {
		seluo.SetEventDescription(*s)
	}
	return seluo
}

// ClearEventDescription clears the value of the "EventDescription" field.
func (seluo *SmsEmailLogUpdateOne) ClearEventDescription() *SmsEmailLogUpdateOne {
	seluo.mutation.ClearEventDescription()
	return seluo
}

// SetApiResponse sets the "ApiResponse" field.
func (seluo *SmsEmailLogUpdateOne) SetApiResponse(s string) *SmsEmailLogUpdateOne {
	seluo.mutation.SetApiResponse(s)
	return seluo
}

// SetNillableApiResponse sets the "ApiResponse" field if the given value is not nil.
func (seluo *SmsEmailLogUpdateOne) SetNillableApiResponse(s *string) *SmsEmailLogUpdateOne {
	if s != nil {
		seluo.SetApiResponse(*s)
	}
	return seluo
}

// ClearApiResponse clears the value of the "ApiResponse" field.
func (seluo *SmsEmailLogUpdateOne) ClearApiResponse() *SmsEmailLogUpdateOne {
	seluo.mutation.ClearApiResponse()
	return seluo
}

// SetApiResponseDescription sets the "ApiResponseDescription" field.
func (seluo *SmsEmailLogUpdateOne) SetApiResponseDescription(s string) *SmsEmailLogUpdateOne {
	seluo.mutation.SetApiResponseDescription(s)
	return seluo
}

// SetNillableApiResponseDescription sets the "ApiResponseDescription" field if the given value is not nil.
func (seluo *SmsEmailLogUpdateOne) SetNillableApiResponseDescription(s *string) *SmsEmailLogUpdateOne {
	if s != nil {
		seluo.SetApiResponseDescription(*s)
	}
	return seluo
}

// ClearApiResponseDescription clears the value of the "ApiResponseDescription" field.
func (seluo *SmsEmailLogUpdateOne) ClearApiResponseDescription() *SmsEmailLogUpdateOne {
	seluo.mutation.ClearApiResponseDescription()
	return seluo
}

// SetEventtime sets the "eventtime" field.
func (seluo *SmsEmailLogUpdateOne) SetEventtime(t time.Time) *SmsEmailLogUpdateOne {
	seluo.mutation.SetEventtime(t)
	return seluo
}

// SetNillableEventtime sets the "eventtime" field if the given value is not nil.
func (seluo *SmsEmailLogUpdateOne) SetNillableEventtime(t *time.Time) *SmsEmailLogUpdateOne {
	if t != nil {
		seluo.SetEventtime(*t)
	}
	return seluo
}

// ClearEventtime clears the value of the "eventtime" field.
func (seluo *SmsEmailLogUpdateOne) ClearEventtime() *SmsEmailLogUpdateOne {
	seluo.mutation.ClearEventtime()
	return seluo
}

// Mutation returns the SmsEmailLogMutation object of the builder.
func (seluo *SmsEmailLogUpdateOne) Mutation() *SmsEmailLogMutation {
	return seluo.mutation
}

// Where appends a list predicates to the SmsEmailLogUpdate builder.
func (seluo *SmsEmailLogUpdateOne) Where(ps ...predicate.SmsEmailLog) *SmsEmailLogUpdateOne {
	seluo.mutation.Where(ps...)
	return seluo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (seluo *SmsEmailLogUpdateOne) Select(field string, fields ...string) *SmsEmailLogUpdateOne {
	seluo.fields = append([]string{field}, fields...)
	return seluo
}

// Save executes the query and returns the updated SmsEmailLog entity.
func (seluo *SmsEmailLogUpdateOne) Save(ctx context.Context) (*SmsEmailLog, error) {
	return withHooks(ctx, seluo.sqlSave, seluo.mutation, seluo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (seluo *SmsEmailLogUpdateOne) SaveX(ctx context.Context) *SmsEmailLog {
	node, err := seluo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (seluo *SmsEmailLogUpdateOne) Exec(ctx context.Context) error {
	_, err := seluo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (seluo *SmsEmailLogUpdateOne) ExecX(ctx context.Context) {
	if err := seluo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (seluo *SmsEmailLogUpdateOne) sqlSave(ctx context.Context) (_node *SmsEmailLog, err error) {
	_spec := sqlgraph.NewUpdateSpec(smsemaillog.Table, smsemaillog.Columns, sqlgraph.NewFieldSpec(smsemaillog.FieldID, field.TypeInt64))
	id, ok := seluo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "SmsEmailLog.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := seluo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, smsemaillog.FieldID)
		for _, f := range fields {
			if !smsemaillog.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != smsemaillog.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := seluo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := seluo.mutation.GetType(); ok {
		_spec.SetField(smsemaillog.FieldType, field.TypeString, value)
	}
	if seluo.mutation.TypeCleared() {
		_spec.ClearField(smsemaillog.FieldType, field.TypeString)
	}
	if value, ok := seluo.mutation.MobileEmail(); ok {
		_spec.SetField(smsemaillog.FieldMobileEmail, field.TypeString, value)
	}
	if seluo.mutation.MobileEmailCleared() {
		_spec.ClearField(smsemaillog.FieldMobileEmail, field.TypeString)
	}
	if value, ok := seluo.mutation.UserName(); ok {
		_spec.SetField(smsemaillog.FieldUserName, field.TypeString, value)
	}
	if seluo.mutation.UserNameCleared() {
		_spec.ClearField(smsemaillog.FieldUserName, field.TypeString)
	}
	if value, ok := seluo.mutation.EventCode(); ok {
		_spec.SetField(smsemaillog.FieldEventCode, field.TypeString, value)
	}
	if seluo.mutation.EventCodeCleared() {
		_spec.ClearField(smsemaillog.FieldEventCode, field.TypeString)
	}
	if value, ok := seluo.mutation.EventDescription(); ok {
		_spec.SetField(smsemaillog.FieldEventDescription, field.TypeString, value)
	}
	if seluo.mutation.EventDescriptionCleared() {
		_spec.ClearField(smsemaillog.FieldEventDescription, field.TypeString)
	}
	if value, ok := seluo.mutation.ApiResponse(); ok {
		_spec.SetField(smsemaillog.FieldApiResponse, field.TypeString, value)
	}
	if seluo.mutation.ApiResponseCleared() {
		_spec.ClearField(smsemaillog.FieldApiResponse, field.TypeString)
	}
	if value, ok := seluo.mutation.ApiResponseDescription(); ok {
		_spec.SetField(smsemaillog.FieldApiResponseDescription, field.TypeString, value)
	}
	if seluo.mutation.ApiResponseDescriptionCleared() {
		_spec.ClearField(smsemaillog.FieldApiResponseDescription, field.TypeString)
	}
	if value, ok := seluo.mutation.Eventtime(); ok {
		_spec.SetField(smsemaillog.FieldEventtime, field.TypeTime, value)
	}
	if seluo.mutation.EventtimeCleared() {
		_spec.ClearField(smsemaillog.FieldEventtime, field.TypeTime)
	}
	_node = &SmsEmailLog{config: seluo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, seluo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{smsemaillog.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	seluo.mutation.done = true
	return _node, nil
}
