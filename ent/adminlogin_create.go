// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"recruit/ent/adminlogin"
	"recruit/ent/logs"
	"recruit/ent/rolemaster"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AdminLoginCreate is the builder for creating a AdminLogin entity.
type AdminLoginCreate struct {
	config
	mutation *AdminLoginMutation
	hooks    []Hook
}

// SetRoleUserCode sets the "RoleUserCode" field.
func (alc *AdminLoginCreate) SetRoleUserCode(i int32) *AdminLoginCreate {
	alc.mutation.SetRoleUserCode(i)
	return alc
}

// SetNillableRoleUserCode sets the "RoleUserCode" field if the given value is not nil.
func (alc *AdminLoginCreate) SetNillableRoleUserCode(i *int32) *AdminLoginCreate {
	if i != nil {
		alc.SetRoleUserCode(*i)
	}
	return alc
}

// SetRoleName sets the "RoleName" field.
func (alc *AdminLoginCreate) SetRoleName(s string) *AdminLoginCreate {
	alc.mutation.SetRoleName(s)
	return alc
}

// SetNillableRoleName sets the "RoleName" field if the given value is not nil.
func (alc *AdminLoginCreate) SetNillableRoleName(s *string) *AdminLoginCreate {
	if s != nil {
		alc.SetRoleName(*s)
	}
	return alc
}

// SetCreatedDate sets the "CreatedDate" field.
func (alc *AdminLoginCreate) SetCreatedDate(t time.Time) *AdminLoginCreate {
	alc.mutation.SetCreatedDate(t)
	return alc
}

// SetNillableCreatedDate sets the "CreatedDate" field if the given value is not nil.
func (alc *AdminLoginCreate) SetNillableCreatedDate(t *time.Time) *AdminLoginCreate {
	if t != nil {
		alc.SetCreatedDate(*t)
	}
	return alc
}

// SetStatus sets the "Status" field.
func (alc *AdminLoginCreate) SetStatus(s string) *AdminLoginCreate {
	alc.mutation.SetStatus(s)
	return alc
}

// SetNillableStatus sets the "Status" field if the given value is not nil.
func (alc *AdminLoginCreate) SetNillableStatus(s *string) *AdminLoginCreate {
	if s != nil {
		alc.SetStatus(*s)
	}
	return alc
}

// SetEmployeedID sets the "EmployeedID" field.
func (alc *AdminLoginCreate) SetEmployeedID(i int32) *AdminLoginCreate {
	alc.mutation.SetEmployeedID(i)
	return alc
}

// SetNillableEmployeedID sets the "EmployeedID" field if the given value is not nil.
func (alc *AdminLoginCreate) SetNillableEmployeedID(i *int32) *AdminLoginCreate {
	if i != nil {
		alc.SetEmployeedID(*i)
	}
	return alc
}

// SetEmployeeName sets the "EmployeeName" field.
func (alc *AdminLoginCreate) SetEmployeeName(s string) *AdminLoginCreate {
	alc.mutation.SetEmployeeName(s)
	return alc
}

// SetNillableEmployeeName sets the "EmployeeName" field if the given value is not nil.
func (alc *AdminLoginCreate) SetNillableEmployeeName(s *string) *AdminLoginCreate {
	if s != nil {
		alc.SetEmployeeName(*s)
	}
	return alc
}

// SetEmailid sets the "Emailid" field.
func (alc *AdminLoginCreate) SetEmailid(s string) *AdminLoginCreate {
	alc.mutation.SetEmailid(s)
	return alc
}

// SetNillableEmailid sets the "Emailid" field if the given value is not nil.
func (alc *AdminLoginCreate) SetNillableEmailid(s *string) *AdminLoginCreate {
	if s != nil {
		alc.SetEmailid(*s)
	}
	return alc
}

// SetMobileNumber sets the "MobileNumber" field.
func (alc *AdminLoginCreate) SetMobileNumber(i int64) *AdminLoginCreate {
	alc.mutation.SetMobileNumber(i)
	return alc
}

// SetNillableMobileNumber sets the "MobileNumber" field if the given value is not nil.
func (alc *AdminLoginCreate) SetNillableMobileNumber(i *int64) *AdminLoginCreate {
	if i != nil {
		alc.SetMobileNumber(*i)
	}
	return alc
}

// SetUsername sets the "Username" field.
func (alc *AdminLoginCreate) SetUsername(s string) *AdminLoginCreate {
	alc.mutation.SetUsername(s)
	return alc
}

// SetOTP sets the "OTP" field.
func (alc *AdminLoginCreate) SetOTP(i int32) *AdminLoginCreate {
	alc.mutation.SetOTP(i)
	return alc
}

// SetNillableOTP sets the "OTP" field if the given value is not nil.
func (alc *AdminLoginCreate) SetNillableOTP(i *int32) *AdminLoginCreate {
	if i != nil {
		alc.SetOTP(*i)
	}
	return alc
}

// SetPassword sets the "Password" field.
func (alc *AdminLoginCreate) SetPassword(s string) *AdminLoginCreate {
	alc.mutation.SetPassword(s)
	return alc
}

// SetVerifyRemarks sets the "VerifyRemarks" field.
func (alc *AdminLoginCreate) SetVerifyRemarks(s string) *AdminLoginCreate {
	alc.mutation.SetVerifyRemarks(s)
	return alc
}

// SetNillableVerifyRemarks sets the "VerifyRemarks" field if the given value is not nil.
func (alc *AdminLoginCreate) SetNillableVerifyRemarks(s *string) *AdminLoginCreate {
	if s != nil {
		alc.SetVerifyRemarks(*s)
	}
	return alc
}

// SetID sets the "id" field.
func (alc *AdminLoginCreate) SetID(i int32) *AdminLoginCreate {
	alc.mutation.SetID(i)
	return alc
}

// SetRoleMasterID sets the "role_master" edge to the RoleMaster entity by ID.
func (alc *AdminLoginCreate) SetRoleMasterID(id int32) *AdminLoginCreate {
	alc.mutation.SetRoleMasterID(id)
	return alc
}

// SetNillableRoleMasterID sets the "role_master" edge to the RoleMaster entity by ID if the given value is not nil.
func (alc *AdminLoginCreate) SetNillableRoleMasterID(id *int32) *AdminLoginCreate {
	if id != nil {
		alc = alc.SetRoleMasterID(*id)
	}
	return alc
}

// SetRoleMaster sets the "role_master" edge to the RoleMaster entity.
func (alc *AdminLoginCreate) SetRoleMaster(r *RoleMaster) *AdminLoginCreate {
	return alc.SetRoleMasterID(r.ID)
}

// AddLogDatumIDs adds the "LogData" edge to the Logs entity by IDs.
func (alc *AdminLoginCreate) AddLogDatumIDs(ids ...int64) *AdminLoginCreate {
	alc.mutation.AddLogDatumIDs(ids...)
	return alc
}

// AddLogData adds the "LogData" edges to the Logs entity.
func (alc *AdminLoginCreate) AddLogData(l ...*Logs) *AdminLoginCreate {
	ids := make([]int64, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return alc.AddLogDatumIDs(ids...)
}

// Mutation returns the AdminLoginMutation object of the builder.
func (alc *AdminLoginCreate) Mutation() *AdminLoginMutation {
	return alc.mutation
}

// Save creates the AdminLogin in the database.
func (alc *AdminLoginCreate) Save(ctx context.Context) (*AdminLogin, error) {
	return withHooks(ctx, alc.sqlSave, alc.mutation, alc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (alc *AdminLoginCreate) SaveX(ctx context.Context) *AdminLogin {
	v, err := alc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (alc *AdminLoginCreate) Exec(ctx context.Context) error {
	_, err := alc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (alc *AdminLoginCreate) ExecX(ctx context.Context) {
	if err := alc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (alc *AdminLoginCreate) check() error {
	if _, ok := alc.mutation.Username(); !ok {
		return &ValidationError{Name: "Username", err: errors.New(`ent: missing required field "AdminLogin.Username"`)}
	}
	if _, ok := alc.mutation.Password(); !ok {
		return &ValidationError{Name: "Password", err: errors.New(`ent: missing required field "AdminLogin.Password"`)}
	}
	return nil
}

func (alc *AdminLoginCreate) sqlSave(ctx context.Context) (*AdminLogin, error) {
	if err := alc.check(); err != nil {
		return nil, err
	}
	_node, _spec := alc.createSpec()
	if err := sqlgraph.CreateNode(ctx, alc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int32(id)
	}
	alc.mutation.id = &_node.ID
	alc.mutation.done = true
	return _node, nil
}

func (alc *AdminLoginCreate) createSpec() (*AdminLogin, *sqlgraph.CreateSpec) {
	var (
		_node = &AdminLogin{config: alc.config}
		_spec = sqlgraph.NewCreateSpec(adminlogin.Table, sqlgraph.NewFieldSpec(adminlogin.FieldID, field.TypeInt32))
	)
	if id, ok := alc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := alc.mutation.RoleName(); ok {
		_spec.SetField(adminlogin.FieldRoleName, field.TypeString, value)
		_node.RoleName = value
	}
	if value, ok := alc.mutation.CreatedDate(); ok {
		_spec.SetField(adminlogin.FieldCreatedDate, field.TypeTime, value)
		_node.CreatedDate = value
	}
	if value, ok := alc.mutation.Status(); ok {
		_spec.SetField(adminlogin.FieldStatus, field.TypeString, value)
		_node.Status = value
	}
	if value, ok := alc.mutation.EmployeedID(); ok {
		_spec.SetField(adminlogin.FieldEmployeedID, field.TypeInt32, value)
		_node.EmployeedID = value
	}
	if value, ok := alc.mutation.EmployeeName(); ok {
		_spec.SetField(adminlogin.FieldEmployeeName, field.TypeString, value)
		_node.EmployeeName = value
	}
	if value, ok := alc.mutation.Emailid(); ok {
		_spec.SetField(adminlogin.FieldEmailid, field.TypeString, value)
		_node.Emailid = value
	}
	if value, ok := alc.mutation.MobileNumber(); ok {
		_spec.SetField(adminlogin.FieldMobileNumber, field.TypeInt64, value)
		_node.MobileNumber = value
	}
	if value, ok := alc.mutation.Username(); ok {
		_spec.SetField(adminlogin.FieldUsername, field.TypeString, value)
		_node.Username = value
	}
	if value, ok := alc.mutation.OTP(); ok {
		_spec.SetField(adminlogin.FieldOTP, field.TypeInt32, value)
		_node.OTP = value
	}
	if value, ok := alc.mutation.Password(); ok {
		_spec.SetField(adminlogin.FieldPassword, field.TypeString, value)
		_node.Password = value
	}
	if value, ok := alc.mutation.VerifyRemarks(); ok {
		_spec.SetField(adminlogin.FieldVerifyRemarks, field.TypeString, value)
		_node.VerifyRemarks = &value
	}
	if nodes := alc.mutation.RoleMasterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   adminlogin.RoleMasterTable,
			Columns: []string{adminlogin.RoleMasterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rolemaster.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.RoleUserCode = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := alc.mutation.LogDataIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   adminlogin.LogDataTable,
			Columns: []string{adminlogin.LogDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(logs.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// AdminLoginCreateBulk is the builder for creating many AdminLogin entities in bulk.
type AdminLoginCreateBulk struct {
	config
	builders []*AdminLoginCreate
}

// Save creates the AdminLogin entities in the database.
func (alcb *AdminLoginCreateBulk) Save(ctx context.Context) ([]*AdminLogin, error) {
	specs := make([]*sqlgraph.CreateSpec, len(alcb.builders))
	nodes := make([]*AdminLogin, len(alcb.builders))
	mutators := make([]Mutator, len(alcb.builders))
	for i := range alcb.builders {
		func(i int, root context.Context) {
			builder := alcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AdminLoginMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, alcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, alcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, alcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (alcb *AdminLoginCreateBulk) SaveX(ctx context.Context) []*AdminLogin {
	v, err := alcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (alcb *AdminLoginCreateBulk) Exec(ctx context.Context) error {
	_, err := alcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (alcb *AdminLoginCreateBulk) ExecX(ctx context.Context) {
	if err := alcb.Exec(ctx); err != nil {
		panic(err)
	}
}
