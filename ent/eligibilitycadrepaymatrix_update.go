// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"recruit/ent/eligibilitycadrepaymatrix"
	"recruit/ent/logs"
	"recruit/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// EligibilityCadrePayMatrixUpdate is the builder for updating EligibilityCadrePayMatrix entities.
type EligibilityCadrePayMatrixUpdate struct {
	config
	hooks    []Hook
	mutation *EligibilityCadrePayMatrixMutation
}

// Where appends a list predicates to the EligibilityCadrePayMatrixUpdate builder.
func (ecpmu *EligibilityCadrePayMatrixUpdate) Where(ps ...predicate.EligibilityCadrePayMatrix) *EligibilityCadrePayMatrixUpdate {
	ecpmu.mutation.Where(ps...)
	return ecpmu
}

// SetCadreEligibleConfigurationCadreEligibleCode sets the "cadreEligibleConfiguration_cadreEligibleCode" field.
func (ecpmu *EligibilityCadrePayMatrixUpdate) SetCadreEligibleConfigurationCadreEligibleCode(i int64) *EligibilityCadrePayMatrixUpdate {
	ecpmu.mutation.ResetCadreEligibleConfigurationCadreEligibleCode()
	ecpmu.mutation.SetCadreEligibleConfigurationCadreEligibleCode(i)
	return ecpmu
}

// SetNillableCadreEligibleConfigurationCadreEligibleCode sets the "cadreEligibleConfiguration_cadreEligibleCode" field if the given value is not nil.
func (ecpmu *EligibilityCadrePayMatrixUpdate) SetNillableCadreEligibleConfigurationCadreEligibleCode(i *int64) *EligibilityCadrePayMatrixUpdate {
	if i != nil {
		ecpmu.SetCadreEligibleConfigurationCadreEligibleCode(*i)
	}
	return ecpmu
}

// AddCadreEligibleConfigurationCadreEligibleCode adds i to the "cadreEligibleConfiguration_cadreEligibleCode" field.
func (ecpmu *EligibilityCadrePayMatrixUpdate) AddCadreEligibleConfigurationCadreEligibleCode(i int64) *EligibilityCadrePayMatrixUpdate {
	ecpmu.mutation.AddCadreEligibleConfigurationCadreEligibleCode(i)
	return ecpmu
}

// ClearCadreEligibleConfigurationCadreEligibleCode clears the value of the "cadreEligibleConfiguration_cadreEligibleCode" field.
func (ecpmu *EligibilityCadrePayMatrixUpdate) ClearCadreEligibleConfigurationCadreEligibleCode() *EligibilityCadrePayMatrixUpdate {
	ecpmu.mutation.ClearCadreEligibleConfigurationCadreEligibleCode()
	return ecpmu
}

// SetPostId sets the "PostId" field.
func (ecpmu *EligibilityCadrePayMatrixUpdate) SetPostId(i int64) *EligibilityCadrePayMatrixUpdate {
	ecpmu.mutation.ResetPostId()
	ecpmu.mutation.SetPostId(i)
	return ecpmu
}

// SetNillablePostId sets the "PostId" field if the given value is not nil.
func (ecpmu *EligibilityCadrePayMatrixUpdate) SetNillablePostId(i *int64) *EligibilityCadrePayMatrixUpdate {
	if i != nil {
		ecpmu.SetPostId(*i)
	}
	return ecpmu
}

// AddPostId adds i to the "PostId" field.
func (ecpmu *EligibilityCadrePayMatrixUpdate) AddPostId(i int64) *EligibilityCadrePayMatrixUpdate {
	ecpmu.mutation.AddPostId(i)
	return ecpmu
}

// ClearPostId clears the value of the "PostId" field.
func (ecpmu *EligibilityCadrePayMatrixUpdate) ClearPostId() *EligibilityCadrePayMatrixUpdate {
	ecpmu.mutation.ClearPostId()
	return ecpmu
}

// SetPostCode sets the "PostCode" field.
func (ecpmu *EligibilityCadrePayMatrixUpdate) SetPostCode(s string) *EligibilityCadrePayMatrixUpdate {
	ecpmu.mutation.SetPostCode(s)
	return ecpmu
}

// SetNillablePostCode sets the "PostCode" field if the given value is not nil.
func (ecpmu *EligibilityCadrePayMatrixUpdate) SetNillablePostCode(s *string) *EligibilityCadrePayMatrixUpdate {
	if s != nil {
		ecpmu.SetPostCode(*s)
	}
	return ecpmu
}

// ClearPostCode clears the value of the "PostCode" field.
func (ecpmu *EligibilityCadrePayMatrixUpdate) ClearPostCode() *EligibilityCadrePayMatrixUpdate {
	ecpmu.mutation.ClearPostCode()
	return ecpmu
}

// SetPostDescription sets the "PostDescription" field.
func (ecpmu *EligibilityCadrePayMatrixUpdate) SetPostDescription(s string) *EligibilityCadrePayMatrixUpdate {
	ecpmu.mutation.SetPostDescription(s)
	return ecpmu
}

// SetNillablePostDescription sets the "PostDescription" field if the given value is not nil.
func (ecpmu *EligibilityCadrePayMatrixUpdate) SetNillablePostDescription(s *string) *EligibilityCadrePayMatrixUpdate {
	if s != nil {
		ecpmu.SetPostDescription(*s)
	}
	return ecpmu
}

// ClearPostDescription clears the value of the "PostDescription" field.
func (ecpmu *EligibilityCadrePayMatrixUpdate) ClearPostDescription() *EligibilityCadrePayMatrixUpdate {
	ecpmu.mutation.ClearPostDescription()
	return ecpmu
}

// SetOrderNumber sets the "OrderNumber" field.
func (ecpmu *EligibilityCadrePayMatrixUpdate) SetOrderNumber(s string) *EligibilityCadrePayMatrixUpdate {
	ecpmu.mutation.SetOrderNumber(s)
	return ecpmu
}

// SetNillableOrderNumber sets the "OrderNumber" field if the given value is not nil.
func (ecpmu *EligibilityCadrePayMatrixUpdate) SetNillableOrderNumber(s *string) *EligibilityCadrePayMatrixUpdate {
	if s != nil {
		ecpmu.SetOrderNumber(*s)
	}
	return ecpmu
}

// ClearOrderNumber clears the value of the "OrderNumber" field.
func (ecpmu *EligibilityCadrePayMatrixUpdate) ClearOrderNumber() *EligibilityCadrePayMatrixUpdate {
	ecpmu.mutation.ClearOrderNumber()
	return ecpmu
}

// SetCreatedById sets the "CreatedById" field.
func (ecpmu *EligibilityCadrePayMatrixUpdate) SetCreatedById(i int64) *EligibilityCadrePayMatrixUpdate {
	ecpmu.mutation.ResetCreatedById()
	ecpmu.mutation.SetCreatedById(i)
	return ecpmu
}

// SetNillableCreatedById sets the "CreatedById" field if the given value is not nil.
func (ecpmu *EligibilityCadrePayMatrixUpdate) SetNillableCreatedById(i *int64) *EligibilityCadrePayMatrixUpdate {
	if i != nil {
		ecpmu.SetCreatedById(*i)
	}
	return ecpmu
}

// AddCreatedById adds i to the "CreatedById" field.
func (ecpmu *EligibilityCadrePayMatrixUpdate) AddCreatedById(i int64) *EligibilityCadrePayMatrixUpdate {
	ecpmu.mutation.AddCreatedById(i)
	return ecpmu
}

// ClearCreatedById clears the value of the "CreatedById" field.
func (ecpmu *EligibilityCadrePayMatrixUpdate) ClearCreatedById() *EligibilityCadrePayMatrixUpdate {
	ecpmu.mutation.ClearCreatedById()
	return ecpmu
}

// SetCreatedByUserName sets the "CreatedByUserName" field.
func (ecpmu *EligibilityCadrePayMatrixUpdate) SetCreatedByUserName(s string) *EligibilityCadrePayMatrixUpdate {
	ecpmu.mutation.SetCreatedByUserName(s)
	return ecpmu
}

// SetNillableCreatedByUserName sets the "CreatedByUserName" field if the given value is not nil.
func (ecpmu *EligibilityCadrePayMatrixUpdate) SetNillableCreatedByUserName(s *string) *EligibilityCadrePayMatrixUpdate {
	if s != nil {
		ecpmu.SetCreatedByUserName(*s)
	}
	return ecpmu
}

// ClearCreatedByUserName clears the value of the "CreatedByUserName" field.
func (ecpmu *EligibilityCadrePayMatrixUpdate) ClearCreatedByUserName() *EligibilityCadrePayMatrixUpdate {
	ecpmu.mutation.ClearCreatedByUserName()
	return ecpmu
}

// SetCreatedByEmpId sets the "CreatedByEmpId" field.
func (ecpmu *EligibilityCadrePayMatrixUpdate) SetCreatedByEmpId(i int64) *EligibilityCadrePayMatrixUpdate {
	ecpmu.mutation.ResetCreatedByEmpId()
	ecpmu.mutation.SetCreatedByEmpId(i)
	return ecpmu
}

// SetNillableCreatedByEmpId sets the "CreatedByEmpId" field if the given value is not nil.
func (ecpmu *EligibilityCadrePayMatrixUpdate) SetNillableCreatedByEmpId(i *int64) *EligibilityCadrePayMatrixUpdate {
	if i != nil {
		ecpmu.SetCreatedByEmpId(*i)
	}
	return ecpmu
}

// AddCreatedByEmpId adds i to the "CreatedByEmpId" field.
func (ecpmu *EligibilityCadrePayMatrixUpdate) AddCreatedByEmpId(i int64) *EligibilityCadrePayMatrixUpdate {
	ecpmu.mutation.AddCreatedByEmpId(i)
	return ecpmu
}

// ClearCreatedByEmpId clears the value of the "CreatedByEmpId" field.
func (ecpmu *EligibilityCadrePayMatrixUpdate) ClearCreatedByEmpId() *EligibilityCadrePayMatrixUpdate {
	ecpmu.mutation.ClearCreatedByEmpId()
	return ecpmu
}

// SetCreatedByDesignation sets the "CreatedByDesignation" field.
func (ecpmu *EligibilityCadrePayMatrixUpdate) SetCreatedByDesignation(s string) *EligibilityCadrePayMatrixUpdate {
	ecpmu.mutation.SetCreatedByDesignation(s)
	return ecpmu
}

// SetNillableCreatedByDesignation sets the "CreatedByDesignation" field if the given value is not nil.
func (ecpmu *EligibilityCadrePayMatrixUpdate) SetNillableCreatedByDesignation(s *string) *EligibilityCadrePayMatrixUpdate {
	if s != nil {
		ecpmu.SetCreatedByDesignation(*s)
	}
	return ecpmu
}

// ClearCreatedByDesignation clears the value of the "CreatedByDesignation" field.
func (ecpmu *EligibilityCadrePayMatrixUpdate) ClearCreatedByDesignation() *EligibilityCadrePayMatrixUpdate {
	ecpmu.mutation.ClearCreatedByDesignation()
	return ecpmu
}

// SetCreatedDate sets the "CreatedDate" field.
func (ecpmu *EligibilityCadrePayMatrixUpdate) SetCreatedDate(t time.Time) *EligibilityCadrePayMatrixUpdate {
	ecpmu.mutation.SetCreatedDate(t)
	return ecpmu
}

// SetNillableCreatedDate sets the "CreatedDate" field if the given value is not nil.
func (ecpmu *EligibilityCadrePayMatrixUpdate) SetNillableCreatedDate(t *time.Time) *EligibilityCadrePayMatrixUpdate {
	if t != nil {
		ecpmu.SetCreatedDate(*t)
	}
	return ecpmu
}

// ClearCreatedDate clears the value of the "CreatedDate" field.
func (ecpmu *EligibilityCadrePayMatrixUpdate) ClearCreatedDate() *EligibilityCadrePayMatrixUpdate {
	ecpmu.mutation.ClearCreatedDate()
	return ecpmu
}

// SetVerifiedbyid sets the "verifiedbyid" field.
func (ecpmu *EligibilityCadrePayMatrixUpdate) SetVerifiedbyid(i int64) *EligibilityCadrePayMatrixUpdate {
	ecpmu.mutation.ResetVerifiedbyid()
	ecpmu.mutation.SetVerifiedbyid(i)
	return ecpmu
}

// SetNillableVerifiedbyid sets the "verifiedbyid" field if the given value is not nil.
func (ecpmu *EligibilityCadrePayMatrixUpdate) SetNillableVerifiedbyid(i *int64) *EligibilityCadrePayMatrixUpdate {
	if i != nil {
		ecpmu.SetVerifiedbyid(*i)
	}
	return ecpmu
}

// AddVerifiedbyid adds i to the "verifiedbyid" field.
func (ecpmu *EligibilityCadrePayMatrixUpdate) AddVerifiedbyid(i int64) *EligibilityCadrePayMatrixUpdate {
	ecpmu.mutation.AddVerifiedbyid(i)
	return ecpmu
}

// ClearVerifiedbyid clears the value of the "verifiedbyid" field.
func (ecpmu *EligibilityCadrePayMatrixUpdate) ClearVerifiedbyid() *EligibilityCadrePayMatrixUpdate {
	ecpmu.mutation.ClearVerifiedbyid()
	return ecpmu
}

// SetVerifiedbyusername sets the "verifiedbyusername" field.
func (ecpmu *EligibilityCadrePayMatrixUpdate) SetVerifiedbyusername(s string) *EligibilityCadrePayMatrixUpdate {
	ecpmu.mutation.SetVerifiedbyusername(s)
	return ecpmu
}

// SetNillableVerifiedbyusername sets the "verifiedbyusername" field if the given value is not nil.
func (ecpmu *EligibilityCadrePayMatrixUpdate) SetNillableVerifiedbyusername(s *string) *EligibilityCadrePayMatrixUpdate {
	if s != nil {
		ecpmu.SetVerifiedbyusername(*s)
	}
	return ecpmu
}

// ClearVerifiedbyusername clears the value of the "verifiedbyusername" field.
func (ecpmu *EligibilityCadrePayMatrixUpdate) ClearVerifiedbyusername() *EligibilityCadrePayMatrixUpdate {
	ecpmu.mutation.ClearVerifiedbyusername()
	return ecpmu
}

// SetVerifiedbyEmployeeid sets the "verifiedbyEmployeeid" field.
func (ecpmu *EligibilityCadrePayMatrixUpdate) SetVerifiedbyEmployeeid(i int64) *EligibilityCadrePayMatrixUpdate {
	ecpmu.mutation.ResetVerifiedbyEmployeeid()
	ecpmu.mutation.SetVerifiedbyEmployeeid(i)
	return ecpmu
}

// SetNillableVerifiedbyEmployeeid sets the "verifiedbyEmployeeid" field if the given value is not nil.
func (ecpmu *EligibilityCadrePayMatrixUpdate) SetNillableVerifiedbyEmployeeid(i *int64) *EligibilityCadrePayMatrixUpdate {
	if i != nil {
		ecpmu.SetVerifiedbyEmployeeid(*i)
	}
	return ecpmu
}

// AddVerifiedbyEmployeeid adds i to the "verifiedbyEmployeeid" field.
func (ecpmu *EligibilityCadrePayMatrixUpdate) AddVerifiedbyEmployeeid(i int64) *EligibilityCadrePayMatrixUpdate {
	ecpmu.mutation.AddVerifiedbyEmployeeid(i)
	return ecpmu
}

// ClearVerifiedbyEmployeeid clears the value of the "verifiedbyEmployeeid" field.
func (ecpmu *EligibilityCadrePayMatrixUpdate) ClearVerifiedbyEmployeeid() *EligibilityCadrePayMatrixUpdate {
	ecpmu.mutation.ClearVerifiedbyEmployeeid()
	return ecpmu
}

// SetVerifiedbyDesignation sets the "verifiedbyDesignation" field.
func (ecpmu *EligibilityCadrePayMatrixUpdate) SetVerifiedbyDesignation(s string) *EligibilityCadrePayMatrixUpdate {
	ecpmu.mutation.SetVerifiedbyDesignation(s)
	return ecpmu
}

// SetNillableVerifiedbyDesignation sets the "verifiedbyDesignation" field if the given value is not nil.
func (ecpmu *EligibilityCadrePayMatrixUpdate) SetNillableVerifiedbyDesignation(s *string) *EligibilityCadrePayMatrixUpdate {
	if s != nil {
		ecpmu.SetVerifiedbyDesignation(*s)
	}
	return ecpmu
}

// ClearVerifiedbyDesignation clears the value of the "verifiedbyDesignation" field.
func (ecpmu *EligibilityCadrePayMatrixUpdate) ClearVerifiedbyDesignation() *EligibilityCadrePayMatrixUpdate {
	ecpmu.mutation.ClearVerifiedbyDesignation()
	return ecpmu
}

// SetVerifiedDate sets the "verifiedDate" field.
func (ecpmu *EligibilityCadrePayMatrixUpdate) SetVerifiedDate(t time.Time) *EligibilityCadrePayMatrixUpdate {
	ecpmu.mutation.SetVerifiedDate(t)
	return ecpmu
}

// SetNillableVerifiedDate sets the "verifiedDate" field if the given value is not nil.
func (ecpmu *EligibilityCadrePayMatrixUpdate) SetNillableVerifiedDate(t *time.Time) *EligibilityCadrePayMatrixUpdate {
	if t != nil {
		ecpmu.SetVerifiedDate(*t)
	}
	return ecpmu
}

// ClearVerifiedDate clears the value of the "verifiedDate" field.
func (ecpmu *EligibilityCadrePayMatrixUpdate) ClearVerifiedDate() *EligibilityCadrePayMatrixUpdate {
	ecpmu.mutation.ClearVerifiedDate()
	return ecpmu
}

// SetStatuss sets the "Statuss" field.
func (ecpmu *EligibilityCadrePayMatrixUpdate) SetStatuss(s string) *EligibilityCadrePayMatrixUpdate {
	ecpmu.mutation.SetStatuss(s)
	return ecpmu
}

// SetNillableStatuss sets the "Statuss" field if the given value is not nil.
func (ecpmu *EligibilityCadrePayMatrixUpdate) SetNillableStatuss(s *string) *EligibilityCadrePayMatrixUpdate {
	if s != nil {
		ecpmu.SetStatuss(*s)
	}
	return ecpmu
}

// ClearStatuss clears the value of the "Statuss" field.
func (ecpmu *EligibilityCadrePayMatrixUpdate) ClearStatuss() *EligibilityCadrePayMatrixUpdate {
	ecpmu.mutation.ClearStatuss()
	return ecpmu
}

// SetDeletedbyid sets the "deletedbyid" field.
func (ecpmu *EligibilityCadrePayMatrixUpdate) SetDeletedbyid(i int64) *EligibilityCadrePayMatrixUpdate {
	ecpmu.mutation.ResetDeletedbyid()
	ecpmu.mutation.SetDeletedbyid(i)
	return ecpmu
}

// SetNillableDeletedbyid sets the "deletedbyid" field if the given value is not nil.
func (ecpmu *EligibilityCadrePayMatrixUpdate) SetNillableDeletedbyid(i *int64) *EligibilityCadrePayMatrixUpdate {
	if i != nil {
		ecpmu.SetDeletedbyid(*i)
	}
	return ecpmu
}

// AddDeletedbyid adds i to the "deletedbyid" field.
func (ecpmu *EligibilityCadrePayMatrixUpdate) AddDeletedbyid(i int64) *EligibilityCadrePayMatrixUpdate {
	ecpmu.mutation.AddDeletedbyid(i)
	return ecpmu
}

// ClearDeletedbyid clears the value of the "deletedbyid" field.
func (ecpmu *EligibilityCadrePayMatrixUpdate) ClearDeletedbyid() *EligibilityCadrePayMatrixUpdate {
	ecpmu.mutation.ClearDeletedbyid()
	return ecpmu
}

// SetDeletedbyusername sets the "deletedbyusername" field.
func (ecpmu *EligibilityCadrePayMatrixUpdate) SetDeletedbyusername(s string) *EligibilityCadrePayMatrixUpdate {
	ecpmu.mutation.SetDeletedbyusername(s)
	return ecpmu
}

// SetNillableDeletedbyusername sets the "deletedbyusername" field if the given value is not nil.
func (ecpmu *EligibilityCadrePayMatrixUpdate) SetNillableDeletedbyusername(s *string) *EligibilityCadrePayMatrixUpdate {
	if s != nil {
		ecpmu.SetDeletedbyusername(*s)
	}
	return ecpmu
}

// ClearDeletedbyusername clears the value of the "deletedbyusername" field.
func (ecpmu *EligibilityCadrePayMatrixUpdate) ClearDeletedbyusername() *EligibilityCadrePayMatrixUpdate {
	ecpmu.mutation.ClearDeletedbyusername()
	return ecpmu
}

// SetDeletedbyEmployeeid sets the "deletedbyEmployeeid" field.
func (ecpmu *EligibilityCadrePayMatrixUpdate) SetDeletedbyEmployeeid(i int64) *EligibilityCadrePayMatrixUpdate {
	ecpmu.mutation.ResetDeletedbyEmployeeid()
	ecpmu.mutation.SetDeletedbyEmployeeid(i)
	return ecpmu
}

// SetNillableDeletedbyEmployeeid sets the "deletedbyEmployeeid" field if the given value is not nil.
func (ecpmu *EligibilityCadrePayMatrixUpdate) SetNillableDeletedbyEmployeeid(i *int64) *EligibilityCadrePayMatrixUpdate {
	if i != nil {
		ecpmu.SetDeletedbyEmployeeid(*i)
	}
	return ecpmu
}

// AddDeletedbyEmployeeid adds i to the "deletedbyEmployeeid" field.
func (ecpmu *EligibilityCadrePayMatrixUpdate) AddDeletedbyEmployeeid(i int64) *EligibilityCadrePayMatrixUpdate {
	ecpmu.mutation.AddDeletedbyEmployeeid(i)
	return ecpmu
}

// ClearDeletedbyEmployeeid clears the value of the "deletedbyEmployeeid" field.
func (ecpmu *EligibilityCadrePayMatrixUpdate) ClearDeletedbyEmployeeid() *EligibilityCadrePayMatrixUpdate {
	ecpmu.mutation.ClearDeletedbyEmployeeid()
	return ecpmu
}

// SetDeletedbyDesignation sets the "deletedbyDesignation" field.
func (ecpmu *EligibilityCadrePayMatrixUpdate) SetDeletedbyDesignation(s string) *EligibilityCadrePayMatrixUpdate {
	ecpmu.mutation.SetDeletedbyDesignation(s)
	return ecpmu
}

// SetNillableDeletedbyDesignation sets the "deletedbyDesignation" field if the given value is not nil.
func (ecpmu *EligibilityCadrePayMatrixUpdate) SetNillableDeletedbyDesignation(s *string) *EligibilityCadrePayMatrixUpdate {
	if s != nil {
		ecpmu.SetDeletedbyDesignation(*s)
	}
	return ecpmu
}

// ClearDeletedbyDesignation clears the value of the "deletedbyDesignation" field.
func (ecpmu *EligibilityCadrePayMatrixUpdate) ClearDeletedbyDesignation() *EligibilityCadrePayMatrixUpdate {
	ecpmu.mutation.ClearDeletedbyDesignation()
	return ecpmu
}

// SetDeletedDate sets the "deletedDate" field.
func (ecpmu *EligibilityCadrePayMatrixUpdate) SetDeletedDate(t time.Time) *EligibilityCadrePayMatrixUpdate {
	ecpmu.mutation.SetDeletedDate(t)
	return ecpmu
}

// SetNillableDeletedDate sets the "deletedDate" field if the given value is not nil.
func (ecpmu *EligibilityCadrePayMatrixUpdate) SetNillableDeletedDate(t *time.Time) *EligibilityCadrePayMatrixUpdate {
	if t != nil {
		ecpmu.SetDeletedDate(*t)
	}
	return ecpmu
}

// ClearDeletedDate clears the value of the "deletedDate" field.
func (ecpmu *EligibilityCadrePayMatrixUpdate) ClearDeletedDate() *EligibilityCadrePayMatrixUpdate {
	ecpmu.mutation.ClearDeletedDate()
	return ecpmu
}

// AddLogDatumIDs adds the "LogData" edge to the Logs entity by IDs.
func (ecpmu *EligibilityCadrePayMatrixUpdate) AddLogDatumIDs(ids ...int64) *EligibilityCadrePayMatrixUpdate {
	ecpmu.mutation.AddLogDatumIDs(ids...)
	return ecpmu
}

// AddLogData adds the "LogData" edges to the Logs entity.
func (ecpmu *EligibilityCadrePayMatrixUpdate) AddLogData(l ...*Logs) *EligibilityCadrePayMatrixUpdate {
	ids := make([]int64, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return ecpmu.AddLogDatumIDs(ids...)
}

// Mutation returns the EligibilityCadrePayMatrixMutation object of the builder.
func (ecpmu *EligibilityCadrePayMatrixUpdate) Mutation() *EligibilityCadrePayMatrixMutation {
	return ecpmu.mutation
}

// ClearLogData clears all "LogData" edges to the Logs entity.
func (ecpmu *EligibilityCadrePayMatrixUpdate) ClearLogData() *EligibilityCadrePayMatrixUpdate {
	ecpmu.mutation.ClearLogData()
	return ecpmu
}

// RemoveLogDatumIDs removes the "LogData" edge to Logs entities by IDs.
func (ecpmu *EligibilityCadrePayMatrixUpdate) RemoveLogDatumIDs(ids ...int64) *EligibilityCadrePayMatrixUpdate {
	ecpmu.mutation.RemoveLogDatumIDs(ids...)
	return ecpmu
}

// RemoveLogData removes "LogData" edges to Logs entities.
func (ecpmu *EligibilityCadrePayMatrixUpdate) RemoveLogData(l ...*Logs) *EligibilityCadrePayMatrixUpdate {
	ids := make([]int64, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return ecpmu.RemoveLogDatumIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ecpmu *EligibilityCadrePayMatrixUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ecpmu.sqlSave, ecpmu.mutation, ecpmu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ecpmu *EligibilityCadrePayMatrixUpdate) SaveX(ctx context.Context) int {
	affected, err := ecpmu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ecpmu *EligibilityCadrePayMatrixUpdate) Exec(ctx context.Context) error {
	_, err := ecpmu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ecpmu *EligibilityCadrePayMatrixUpdate) ExecX(ctx context.Context) {
	if err := ecpmu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ecpmu *EligibilityCadrePayMatrixUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(eligibilitycadrepaymatrix.Table, eligibilitycadrepaymatrix.Columns, sqlgraph.NewFieldSpec(eligibilitycadrepaymatrix.FieldID, field.TypeInt64))
	if ps := ecpmu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ecpmu.mutation.CadreEligibleConfigurationCadreEligibleCode(); ok {
		_spec.SetField(eligibilitycadrepaymatrix.FieldCadreEligibleConfigurationCadreEligibleCode, field.TypeInt64, value)
	}
	if value, ok := ecpmu.mutation.AddedCadreEligibleConfigurationCadreEligibleCode(); ok {
		_spec.AddField(eligibilitycadrepaymatrix.FieldCadreEligibleConfigurationCadreEligibleCode, field.TypeInt64, value)
	}
	if ecpmu.mutation.CadreEligibleConfigurationCadreEligibleCodeCleared() {
		_spec.ClearField(eligibilitycadrepaymatrix.FieldCadreEligibleConfigurationCadreEligibleCode, field.TypeInt64)
	}
	if value, ok := ecpmu.mutation.PostId(); ok {
		_spec.SetField(eligibilitycadrepaymatrix.FieldPostId, field.TypeInt64, value)
	}
	if value, ok := ecpmu.mutation.AddedPostId(); ok {
		_spec.AddField(eligibilitycadrepaymatrix.FieldPostId, field.TypeInt64, value)
	}
	if ecpmu.mutation.PostIdCleared() {
		_spec.ClearField(eligibilitycadrepaymatrix.FieldPostId, field.TypeInt64)
	}
	if value, ok := ecpmu.mutation.PostCode(); ok {
		_spec.SetField(eligibilitycadrepaymatrix.FieldPostCode, field.TypeString, value)
	}
	if ecpmu.mutation.PostCodeCleared() {
		_spec.ClearField(eligibilitycadrepaymatrix.FieldPostCode, field.TypeString)
	}
	if value, ok := ecpmu.mutation.PostDescription(); ok {
		_spec.SetField(eligibilitycadrepaymatrix.FieldPostDescription, field.TypeString, value)
	}
	if ecpmu.mutation.PostDescriptionCleared() {
		_spec.ClearField(eligibilitycadrepaymatrix.FieldPostDescription, field.TypeString)
	}
	if value, ok := ecpmu.mutation.OrderNumber(); ok {
		_spec.SetField(eligibilitycadrepaymatrix.FieldOrderNumber, field.TypeString, value)
	}
	if ecpmu.mutation.OrderNumberCleared() {
		_spec.ClearField(eligibilitycadrepaymatrix.FieldOrderNumber, field.TypeString)
	}
	if value, ok := ecpmu.mutation.CreatedById(); ok {
		_spec.SetField(eligibilitycadrepaymatrix.FieldCreatedById, field.TypeInt64, value)
	}
	if value, ok := ecpmu.mutation.AddedCreatedById(); ok {
		_spec.AddField(eligibilitycadrepaymatrix.FieldCreatedById, field.TypeInt64, value)
	}
	if ecpmu.mutation.CreatedByIdCleared() {
		_spec.ClearField(eligibilitycadrepaymatrix.FieldCreatedById, field.TypeInt64)
	}
	if value, ok := ecpmu.mutation.CreatedByUserName(); ok {
		_spec.SetField(eligibilitycadrepaymatrix.FieldCreatedByUserName, field.TypeString, value)
	}
	if ecpmu.mutation.CreatedByUserNameCleared() {
		_spec.ClearField(eligibilitycadrepaymatrix.FieldCreatedByUserName, field.TypeString)
	}
	if value, ok := ecpmu.mutation.CreatedByEmpId(); ok {
		_spec.SetField(eligibilitycadrepaymatrix.FieldCreatedByEmpId, field.TypeInt64, value)
	}
	if value, ok := ecpmu.mutation.AddedCreatedByEmpId(); ok {
		_spec.AddField(eligibilitycadrepaymatrix.FieldCreatedByEmpId, field.TypeInt64, value)
	}
	if ecpmu.mutation.CreatedByEmpIdCleared() {
		_spec.ClearField(eligibilitycadrepaymatrix.FieldCreatedByEmpId, field.TypeInt64)
	}
	if value, ok := ecpmu.mutation.CreatedByDesignation(); ok {
		_spec.SetField(eligibilitycadrepaymatrix.FieldCreatedByDesignation, field.TypeString, value)
	}
	if ecpmu.mutation.CreatedByDesignationCleared() {
		_spec.ClearField(eligibilitycadrepaymatrix.FieldCreatedByDesignation, field.TypeString)
	}
	if value, ok := ecpmu.mutation.CreatedDate(); ok {
		_spec.SetField(eligibilitycadrepaymatrix.FieldCreatedDate, field.TypeTime, value)
	}
	if ecpmu.mutation.CreatedDateCleared() {
		_spec.ClearField(eligibilitycadrepaymatrix.FieldCreatedDate, field.TypeTime)
	}
	if value, ok := ecpmu.mutation.Verifiedbyid(); ok {
		_spec.SetField(eligibilitycadrepaymatrix.FieldVerifiedbyid, field.TypeInt64, value)
	}
	if value, ok := ecpmu.mutation.AddedVerifiedbyid(); ok {
		_spec.AddField(eligibilitycadrepaymatrix.FieldVerifiedbyid, field.TypeInt64, value)
	}
	if ecpmu.mutation.VerifiedbyidCleared() {
		_spec.ClearField(eligibilitycadrepaymatrix.FieldVerifiedbyid, field.TypeInt64)
	}
	if value, ok := ecpmu.mutation.Verifiedbyusername(); ok {
		_spec.SetField(eligibilitycadrepaymatrix.FieldVerifiedbyusername, field.TypeString, value)
	}
	if ecpmu.mutation.VerifiedbyusernameCleared() {
		_spec.ClearField(eligibilitycadrepaymatrix.FieldVerifiedbyusername, field.TypeString)
	}
	if value, ok := ecpmu.mutation.VerifiedbyEmployeeid(); ok {
		_spec.SetField(eligibilitycadrepaymatrix.FieldVerifiedbyEmployeeid, field.TypeInt64, value)
	}
	if value, ok := ecpmu.mutation.AddedVerifiedbyEmployeeid(); ok {
		_spec.AddField(eligibilitycadrepaymatrix.FieldVerifiedbyEmployeeid, field.TypeInt64, value)
	}
	if ecpmu.mutation.VerifiedbyEmployeeidCleared() {
		_spec.ClearField(eligibilitycadrepaymatrix.FieldVerifiedbyEmployeeid, field.TypeInt64)
	}
	if value, ok := ecpmu.mutation.VerifiedbyDesignation(); ok {
		_spec.SetField(eligibilitycadrepaymatrix.FieldVerifiedbyDesignation, field.TypeString, value)
	}
	if ecpmu.mutation.VerifiedbyDesignationCleared() {
		_spec.ClearField(eligibilitycadrepaymatrix.FieldVerifiedbyDesignation, field.TypeString)
	}
	if value, ok := ecpmu.mutation.VerifiedDate(); ok {
		_spec.SetField(eligibilitycadrepaymatrix.FieldVerifiedDate, field.TypeTime, value)
	}
	if ecpmu.mutation.VerifiedDateCleared() {
		_spec.ClearField(eligibilitycadrepaymatrix.FieldVerifiedDate, field.TypeTime)
	}
	if value, ok := ecpmu.mutation.Statuss(); ok {
		_spec.SetField(eligibilitycadrepaymatrix.FieldStatuss, field.TypeString, value)
	}
	if ecpmu.mutation.StatussCleared() {
		_spec.ClearField(eligibilitycadrepaymatrix.FieldStatuss, field.TypeString)
	}
	if value, ok := ecpmu.mutation.Deletedbyid(); ok {
		_spec.SetField(eligibilitycadrepaymatrix.FieldDeletedbyid, field.TypeInt64, value)
	}
	if value, ok := ecpmu.mutation.AddedDeletedbyid(); ok {
		_spec.AddField(eligibilitycadrepaymatrix.FieldDeletedbyid, field.TypeInt64, value)
	}
	if ecpmu.mutation.DeletedbyidCleared() {
		_spec.ClearField(eligibilitycadrepaymatrix.FieldDeletedbyid, field.TypeInt64)
	}
	if value, ok := ecpmu.mutation.Deletedbyusername(); ok {
		_spec.SetField(eligibilitycadrepaymatrix.FieldDeletedbyusername, field.TypeString, value)
	}
	if ecpmu.mutation.DeletedbyusernameCleared() {
		_spec.ClearField(eligibilitycadrepaymatrix.FieldDeletedbyusername, field.TypeString)
	}
	if value, ok := ecpmu.mutation.DeletedbyEmployeeid(); ok {
		_spec.SetField(eligibilitycadrepaymatrix.FieldDeletedbyEmployeeid, field.TypeInt64, value)
	}
	if value, ok := ecpmu.mutation.AddedDeletedbyEmployeeid(); ok {
		_spec.AddField(eligibilitycadrepaymatrix.FieldDeletedbyEmployeeid, field.TypeInt64, value)
	}
	if ecpmu.mutation.DeletedbyEmployeeidCleared() {
		_spec.ClearField(eligibilitycadrepaymatrix.FieldDeletedbyEmployeeid, field.TypeInt64)
	}
	if value, ok := ecpmu.mutation.DeletedbyDesignation(); ok {
		_spec.SetField(eligibilitycadrepaymatrix.FieldDeletedbyDesignation, field.TypeString, value)
	}
	if ecpmu.mutation.DeletedbyDesignationCleared() {
		_spec.ClearField(eligibilitycadrepaymatrix.FieldDeletedbyDesignation, field.TypeString)
	}
	if value, ok := ecpmu.mutation.DeletedDate(); ok {
		_spec.SetField(eligibilitycadrepaymatrix.FieldDeletedDate, field.TypeTime, value)
	}
	if ecpmu.mutation.DeletedDateCleared() {
		_spec.ClearField(eligibilitycadrepaymatrix.FieldDeletedDate, field.TypeTime)
	}
	if ecpmu.mutation.LogDataCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   eligibilitycadrepaymatrix.LogDataTable,
			Columns: []string{eligibilitycadrepaymatrix.LogDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(logs.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ecpmu.mutation.RemovedLogDataIDs(); len(nodes) > 0 && !ecpmu.mutation.LogDataCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   eligibilitycadrepaymatrix.LogDataTable,
			Columns: []string{eligibilitycadrepaymatrix.LogDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(logs.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ecpmu.mutation.LogDataIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   eligibilitycadrepaymatrix.LogDataTable,
			Columns: []string{eligibilitycadrepaymatrix.LogDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(logs.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ecpmu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{eligibilitycadrepaymatrix.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ecpmu.mutation.done = true
	return n, nil
}

// EligibilityCadrePayMatrixUpdateOne is the builder for updating a single EligibilityCadrePayMatrix entity.
type EligibilityCadrePayMatrixUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *EligibilityCadrePayMatrixMutation
}

// SetCadreEligibleConfigurationCadreEligibleCode sets the "cadreEligibleConfiguration_cadreEligibleCode" field.
func (ecpmuo *EligibilityCadrePayMatrixUpdateOne) SetCadreEligibleConfigurationCadreEligibleCode(i int64) *EligibilityCadrePayMatrixUpdateOne {
	ecpmuo.mutation.ResetCadreEligibleConfigurationCadreEligibleCode()
	ecpmuo.mutation.SetCadreEligibleConfigurationCadreEligibleCode(i)
	return ecpmuo
}

// SetNillableCadreEligibleConfigurationCadreEligibleCode sets the "cadreEligibleConfiguration_cadreEligibleCode" field if the given value is not nil.
func (ecpmuo *EligibilityCadrePayMatrixUpdateOne) SetNillableCadreEligibleConfigurationCadreEligibleCode(i *int64) *EligibilityCadrePayMatrixUpdateOne {
	if i != nil {
		ecpmuo.SetCadreEligibleConfigurationCadreEligibleCode(*i)
	}
	return ecpmuo
}

// AddCadreEligibleConfigurationCadreEligibleCode adds i to the "cadreEligibleConfiguration_cadreEligibleCode" field.
func (ecpmuo *EligibilityCadrePayMatrixUpdateOne) AddCadreEligibleConfigurationCadreEligibleCode(i int64) *EligibilityCadrePayMatrixUpdateOne {
	ecpmuo.mutation.AddCadreEligibleConfigurationCadreEligibleCode(i)
	return ecpmuo
}

// ClearCadreEligibleConfigurationCadreEligibleCode clears the value of the "cadreEligibleConfiguration_cadreEligibleCode" field.
func (ecpmuo *EligibilityCadrePayMatrixUpdateOne) ClearCadreEligibleConfigurationCadreEligibleCode() *EligibilityCadrePayMatrixUpdateOne {
	ecpmuo.mutation.ClearCadreEligibleConfigurationCadreEligibleCode()
	return ecpmuo
}

// SetPostId sets the "PostId" field.
func (ecpmuo *EligibilityCadrePayMatrixUpdateOne) SetPostId(i int64) *EligibilityCadrePayMatrixUpdateOne {
	ecpmuo.mutation.ResetPostId()
	ecpmuo.mutation.SetPostId(i)
	return ecpmuo
}

// SetNillablePostId sets the "PostId" field if the given value is not nil.
func (ecpmuo *EligibilityCadrePayMatrixUpdateOne) SetNillablePostId(i *int64) *EligibilityCadrePayMatrixUpdateOne {
	if i != nil {
		ecpmuo.SetPostId(*i)
	}
	return ecpmuo
}

// AddPostId adds i to the "PostId" field.
func (ecpmuo *EligibilityCadrePayMatrixUpdateOne) AddPostId(i int64) *EligibilityCadrePayMatrixUpdateOne {
	ecpmuo.mutation.AddPostId(i)
	return ecpmuo
}

// ClearPostId clears the value of the "PostId" field.
func (ecpmuo *EligibilityCadrePayMatrixUpdateOne) ClearPostId() *EligibilityCadrePayMatrixUpdateOne {
	ecpmuo.mutation.ClearPostId()
	return ecpmuo
}

// SetPostCode sets the "PostCode" field.
func (ecpmuo *EligibilityCadrePayMatrixUpdateOne) SetPostCode(s string) *EligibilityCadrePayMatrixUpdateOne {
	ecpmuo.mutation.SetPostCode(s)
	return ecpmuo
}

// SetNillablePostCode sets the "PostCode" field if the given value is not nil.
func (ecpmuo *EligibilityCadrePayMatrixUpdateOne) SetNillablePostCode(s *string) *EligibilityCadrePayMatrixUpdateOne {
	if s != nil {
		ecpmuo.SetPostCode(*s)
	}
	return ecpmuo
}

// ClearPostCode clears the value of the "PostCode" field.
func (ecpmuo *EligibilityCadrePayMatrixUpdateOne) ClearPostCode() *EligibilityCadrePayMatrixUpdateOne {
	ecpmuo.mutation.ClearPostCode()
	return ecpmuo
}

// SetPostDescription sets the "PostDescription" field.
func (ecpmuo *EligibilityCadrePayMatrixUpdateOne) SetPostDescription(s string) *EligibilityCadrePayMatrixUpdateOne {
	ecpmuo.mutation.SetPostDescription(s)
	return ecpmuo
}

// SetNillablePostDescription sets the "PostDescription" field if the given value is not nil.
func (ecpmuo *EligibilityCadrePayMatrixUpdateOne) SetNillablePostDescription(s *string) *EligibilityCadrePayMatrixUpdateOne {
	if s != nil {
		ecpmuo.SetPostDescription(*s)
	}
	return ecpmuo
}

// ClearPostDescription clears the value of the "PostDescription" field.
func (ecpmuo *EligibilityCadrePayMatrixUpdateOne) ClearPostDescription() *EligibilityCadrePayMatrixUpdateOne {
	ecpmuo.mutation.ClearPostDescription()
	return ecpmuo
}

// SetOrderNumber sets the "OrderNumber" field.
func (ecpmuo *EligibilityCadrePayMatrixUpdateOne) SetOrderNumber(s string) *EligibilityCadrePayMatrixUpdateOne {
	ecpmuo.mutation.SetOrderNumber(s)
	return ecpmuo
}

// SetNillableOrderNumber sets the "OrderNumber" field if the given value is not nil.
func (ecpmuo *EligibilityCadrePayMatrixUpdateOne) SetNillableOrderNumber(s *string) *EligibilityCadrePayMatrixUpdateOne {
	if s != nil {
		ecpmuo.SetOrderNumber(*s)
	}
	return ecpmuo
}

// ClearOrderNumber clears the value of the "OrderNumber" field.
func (ecpmuo *EligibilityCadrePayMatrixUpdateOne) ClearOrderNumber() *EligibilityCadrePayMatrixUpdateOne {
	ecpmuo.mutation.ClearOrderNumber()
	return ecpmuo
}

// SetCreatedById sets the "CreatedById" field.
func (ecpmuo *EligibilityCadrePayMatrixUpdateOne) SetCreatedById(i int64) *EligibilityCadrePayMatrixUpdateOne {
	ecpmuo.mutation.ResetCreatedById()
	ecpmuo.mutation.SetCreatedById(i)
	return ecpmuo
}

// SetNillableCreatedById sets the "CreatedById" field if the given value is not nil.
func (ecpmuo *EligibilityCadrePayMatrixUpdateOne) SetNillableCreatedById(i *int64) *EligibilityCadrePayMatrixUpdateOne {
	if i != nil {
		ecpmuo.SetCreatedById(*i)
	}
	return ecpmuo
}

// AddCreatedById adds i to the "CreatedById" field.
func (ecpmuo *EligibilityCadrePayMatrixUpdateOne) AddCreatedById(i int64) *EligibilityCadrePayMatrixUpdateOne {
	ecpmuo.mutation.AddCreatedById(i)
	return ecpmuo
}

// ClearCreatedById clears the value of the "CreatedById" field.
func (ecpmuo *EligibilityCadrePayMatrixUpdateOne) ClearCreatedById() *EligibilityCadrePayMatrixUpdateOne {
	ecpmuo.mutation.ClearCreatedById()
	return ecpmuo
}

// SetCreatedByUserName sets the "CreatedByUserName" field.
func (ecpmuo *EligibilityCadrePayMatrixUpdateOne) SetCreatedByUserName(s string) *EligibilityCadrePayMatrixUpdateOne {
	ecpmuo.mutation.SetCreatedByUserName(s)
	return ecpmuo
}

// SetNillableCreatedByUserName sets the "CreatedByUserName" field if the given value is not nil.
func (ecpmuo *EligibilityCadrePayMatrixUpdateOne) SetNillableCreatedByUserName(s *string) *EligibilityCadrePayMatrixUpdateOne {
	if s != nil {
		ecpmuo.SetCreatedByUserName(*s)
	}
	return ecpmuo
}

// ClearCreatedByUserName clears the value of the "CreatedByUserName" field.
func (ecpmuo *EligibilityCadrePayMatrixUpdateOne) ClearCreatedByUserName() *EligibilityCadrePayMatrixUpdateOne {
	ecpmuo.mutation.ClearCreatedByUserName()
	return ecpmuo
}

// SetCreatedByEmpId sets the "CreatedByEmpId" field.
func (ecpmuo *EligibilityCadrePayMatrixUpdateOne) SetCreatedByEmpId(i int64) *EligibilityCadrePayMatrixUpdateOne {
	ecpmuo.mutation.ResetCreatedByEmpId()
	ecpmuo.mutation.SetCreatedByEmpId(i)
	return ecpmuo
}

// SetNillableCreatedByEmpId sets the "CreatedByEmpId" field if the given value is not nil.
func (ecpmuo *EligibilityCadrePayMatrixUpdateOne) SetNillableCreatedByEmpId(i *int64) *EligibilityCadrePayMatrixUpdateOne {
	if i != nil {
		ecpmuo.SetCreatedByEmpId(*i)
	}
	return ecpmuo
}

// AddCreatedByEmpId adds i to the "CreatedByEmpId" field.
func (ecpmuo *EligibilityCadrePayMatrixUpdateOne) AddCreatedByEmpId(i int64) *EligibilityCadrePayMatrixUpdateOne {
	ecpmuo.mutation.AddCreatedByEmpId(i)
	return ecpmuo
}

// ClearCreatedByEmpId clears the value of the "CreatedByEmpId" field.
func (ecpmuo *EligibilityCadrePayMatrixUpdateOne) ClearCreatedByEmpId() *EligibilityCadrePayMatrixUpdateOne {
	ecpmuo.mutation.ClearCreatedByEmpId()
	return ecpmuo
}

// SetCreatedByDesignation sets the "CreatedByDesignation" field.
func (ecpmuo *EligibilityCadrePayMatrixUpdateOne) SetCreatedByDesignation(s string) *EligibilityCadrePayMatrixUpdateOne {
	ecpmuo.mutation.SetCreatedByDesignation(s)
	return ecpmuo
}

// SetNillableCreatedByDesignation sets the "CreatedByDesignation" field if the given value is not nil.
func (ecpmuo *EligibilityCadrePayMatrixUpdateOne) SetNillableCreatedByDesignation(s *string) *EligibilityCadrePayMatrixUpdateOne {
	if s != nil {
		ecpmuo.SetCreatedByDesignation(*s)
	}
	return ecpmuo
}

// ClearCreatedByDesignation clears the value of the "CreatedByDesignation" field.
func (ecpmuo *EligibilityCadrePayMatrixUpdateOne) ClearCreatedByDesignation() *EligibilityCadrePayMatrixUpdateOne {
	ecpmuo.mutation.ClearCreatedByDesignation()
	return ecpmuo
}

// SetCreatedDate sets the "CreatedDate" field.
func (ecpmuo *EligibilityCadrePayMatrixUpdateOne) SetCreatedDate(t time.Time) *EligibilityCadrePayMatrixUpdateOne {
	ecpmuo.mutation.SetCreatedDate(t)
	return ecpmuo
}

// SetNillableCreatedDate sets the "CreatedDate" field if the given value is not nil.
func (ecpmuo *EligibilityCadrePayMatrixUpdateOne) SetNillableCreatedDate(t *time.Time) *EligibilityCadrePayMatrixUpdateOne {
	if t != nil {
		ecpmuo.SetCreatedDate(*t)
	}
	return ecpmuo
}

// ClearCreatedDate clears the value of the "CreatedDate" field.
func (ecpmuo *EligibilityCadrePayMatrixUpdateOne) ClearCreatedDate() *EligibilityCadrePayMatrixUpdateOne {
	ecpmuo.mutation.ClearCreatedDate()
	return ecpmuo
}

// SetVerifiedbyid sets the "verifiedbyid" field.
func (ecpmuo *EligibilityCadrePayMatrixUpdateOne) SetVerifiedbyid(i int64) *EligibilityCadrePayMatrixUpdateOne {
	ecpmuo.mutation.ResetVerifiedbyid()
	ecpmuo.mutation.SetVerifiedbyid(i)
	return ecpmuo
}

// SetNillableVerifiedbyid sets the "verifiedbyid" field if the given value is not nil.
func (ecpmuo *EligibilityCadrePayMatrixUpdateOne) SetNillableVerifiedbyid(i *int64) *EligibilityCadrePayMatrixUpdateOne {
	if i != nil {
		ecpmuo.SetVerifiedbyid(*i)
	}
	return ecpmuo
}

// AddVerifiedbyid adds i to the "verifiedbyid" field.
func (ecpmuo *EligibilityCadrePayMatrixUpdateOne) AddVerifiedbyid(i int64) *EligibilityCadrePayMatrixUpdateOne {
	ecpmuo.mutation.AddVerifiedbyid(i)
	return ecpmuo
}

// ClearVerifiedbyid clears the value of the "verifiedbyid" field.
func (ecpmuo *EligibilityCadrePayMatrixUpdateOne) ClearVerifiedbyid() *EligibilityCadrePayMatrixUpdateOne {
	ecpmuo.mutation.ClearVerifiedbyid()
	return ecpmuo
}

// SetVerifiedbyusername sets the "verifiedbyusername" field.
func (ecpmuo *EligibilityCadrePayMatrixUpdateOne) SetVerifiedbyusername(s string) *EligibilityCadrePayMatrixUpdateOne {
	ecpmuo.mutation.SetVerifiedbyusername(s)
	return ecpmuo
}

// SetNillableVerifiedbyusername sets the "verifiedbyusername" field if the given value is not nil.
func (ecpmuo *EligibilityCadrePayMatrixUpdateOne) SetNillableVerifiedbyusername(s *string) *EligibilityCadrePayMatrixUpdateOne {
	if s != nil {
		ecpmuo.SetVerifiedbyusername(*s)
	}
	return ecpmuo
}

// ClearVerifiedbyusername clears the value of the "verifiedbyusername" field.
func (ecpmuo *EligibilityCadrePayMatrixUpdateOne) ClearVerifiedbyusername() *EligibilityCadrePayMatrixUpdateOne {
	ecpmuo.mutation.ClearVerifiedbyusername()
	return ecpmuo
}

// SetVerifiedbyEmployeeid sets the "verifiedbyEmployeeid" field.
func (ecpmuo *EligibilityCadrePayMatrixUpdateOne) SetVerifiedbyEmployeeid(i int64) *EligibilityCadrePayMatrixUpdateOne {
	ecpmuo.mutation.ResetVerifiedbyEmployeeid()
	ecpmuo.mutation.SetVerifiedbyEmployeeid(i)
	return ecpmuo
}

// SetNillableVerifiedbyEmployeeid sets the "verifiedbyEmployeeid" field if the given value is not nil.
func (ecpmuo *EligibilityCadrePayMatrixUpdateOne) SetNillableVerifiedbyEmployeeid(i *int64) *EligibilityCadrePayMatrixUpdateOne {
	if i != nil {
		ecpmuo.SetVerifiedbyEmployeeid(*i)
	}
	return ecpmuo
}

// AddVerifiedbyEmployeeid adds i to the "verifiedbyEmployeeid" field.
func (ecpmuo *EligibilityCadrePayMatrixUpdateOne) AddVerifiedbyEmployeeid(i int64) *EligibilityCadrePayMatrixUpdateOne {
	ecpmuo.mutation.AddVerifiedbyEmployeeid(i)
	return ecpmuo
}

// ClearVerifiedbyEmployeeid clears the value of the "verifiedbyEmployeeid" field.
func (ecpmuo *EligibilityCadrePayMatrixUpdateOne) ClearVerifiedbyEmployeeid() *EligibilityCadrePayMatrixUpdateOne {
	ecpmuo.mutation.ClearVerifiedbyEmployeeid()
	return ecpmuo
}

// SetVerifiedbyDesignation sets the "verifiedbyDesignation" field.
func (ecpmuo *EligibilityCadrePayMatrixUpdateOne) SetVerifiedbyDesignation(s string) *EligibilityCadrePayMatrixUpdateOne {
	ecpmuo.mutation.SetVerifiedbyDesignation(s)
	return ecpmuo
}

// SetNillableVerifiedbyDesignation sets the "verifiedbyDesignation" field if the given value is not nil.
func (ecpmuo *EligibilityCadrePayMatrixUpdateOne) SetNillableVerifiedbyDesignation(s *string) *EligibilityCadrePayMatrixUpdateOne {
	if s != nil {
		ecpmuo.SetVerifiedbyDesignation(*s)
	}
	return ecpmuo
}

// ClearVerifiedbyDesignation clears the value of the "verifiedbyDesignation" field.
func (ecpmuo *EligibilityCadrePayMatrixUpdateOne) ClearVerifiedbyDesignation() *EligibilityCadrePayMatrixUpdateOne {
	ecpmuo.mutation.ClearVerifiedbyDesignation()
	return ecpmuo
}

// SetVerifiedDate sets the "verifiedDate" field.
func (ecpmuo *EligibilityCadrePayMatrixUpdateOne) SetVerifiedDate(t time.Time) *EligibilityCadrePayMatrixUpdateOne {
	ecpmuo.mutation.SetVerifiedDate(t)
	return ecpmuo
}

// SetNillableVerifiedDate sets the "verifiedDate" field if the given value is not nil.
func (ecpmuo *EligibilityCadrePayMatrixUpdateOne) SetNillableVerifiedDate(t *time.Time) *EligibilityCadrePayMatrixUpdateOne {
	if t != nil {
		ecpmuo.SetVerifiedDate(*t)
	}
	return ecpmuo
}

// ClearVerifiedDate clears the value of the "verifiedDate" field.
func (ecpmuo *EligibilityCadrePayMatrixUpdateOne) ClearVerifiedDate() *EligibilityCadrePayMatrixUpdateOne {
	ecpmuo.mutation.ClearVerifiedDate()
	return ecpmuo
}

// SetStatuss sets the "Statuss" field.
func (ecpmuo *EligibilityCadrePayMatrixUpdateOne) SetStatuss(s string) *EligibilityCadrePayMatrixUpdateOne {
	ecpmuo.mutation.SetStatuss(s)
	return ecpmuo
}

// SetNillableStatuss sets the "Statuss" field if the given value is not nil.
func (ecpmuo *EligibilityCadrePayMatrixUpdateOne) SetNillableStatuss(s *string) *EligibilityCadrePayMatrixUpdateOne {
	if s != nil {
		ecpmuo.SetStatuss(*s)
	}
	return ecpmuo
}

// ClearStatuss clears the value of the "Statuss" field.
func (ecpmuo *EligibilityCadrePayMatrixUpdateOne) ClearStatuss() *EligibilityCadrePayMatrixUpdateOne {
	ecpmuo.mutation.ClearStatuss()
	return ecpmuo
}

// SetDeletedbyid sets the "deletedbyid" field.
func (ecpmuo *EligibilityCadrePayMatrixUpdateOne) SetDeletedbyid(i int64) *EligibilityCadrePayMatrixUpdateOne {
	ecpmuo.mutation.ResetDeletedbyid()
	ecpmuo.mutation.SetDeletedbyid(i)
	return ecpmuo
}

// SetNillableDeletedbyid sets the "deletedbyid" field if the given value is not nil.
func (ecpmuo *EligibilityCadrePayMatrixUpdateOne) SetNillableDeletedbyid(i *int64) *EligibilityCadrePayMatrixUpdateOne {
	if i != nil {
		ecpmuo.SetDeletedbyid(*i)
	}
	return ecpmuo
}

// AddDeletedbyid adds i to the "deletedbyid" field.
func (ecpmuo *EligibilityCadrePayMatrixUpdateOne) AddDeletedbyid(i int64) *EligibilityCadrePayMatrixUpdateOne {
	ecpmuo.mutation.AddDeletedbyid(i)
	return ecpmuo
}

// ClearDeletedbyid clears the value of the "deletedbyid" field.
func (ecpmuo *EligibilityCadrePayMatrixUpdateOne) ClearDeletedbyid() *EligibilityCadrePayMatrixUpdateOne {
	ecpmuo.mutation.ClearDeletedbyid()
	return ecpmuo
}

// SetDeletedbyusername sets the "deletedbyusername" field.
func (ecpmuo *EligibilityCadrePayMatrixUpdateOne) SetDeletedbyusername(s string) *EligibilityCadrePayMatrixUpdateOne {
	ecpmuo.mutation.SetDeletedbyusername(s)
	return ecpmuo
}

// SetNillableDeletedbyusername sets the "deletedbyusername" field if the given value is not nil.
func (ecpmuo *EligibilityCadrePayMatrixUpdateOne) SetNillableDeletedbyusername(s *string) *EligibilityCadrePayMatrixUpdateOne {
	if s != nil {
		ecpmuo.SetDeletedbyusername(*s)
	}
	return ecpmuo
}

// ClearDeletedbyusername clears the value of the "deletedbyusername" field.
func (ecpmuo *EligibilityCadrePayMatrixUpdateOne) ClearDeletedbyusername() *EligibilityCadrePayMatrixUpdateOne {
	ecpmuo.mutation.ClearDeletedbyusername()
	return ecpmuo
}

// SetDeletedbyEmployeeid sets the "deletedbyEmployeeid" field.
func (ecpmuo *EligibilityCadrePayMatrixUpdateOne) SetDeletedbyEmployeeid(i int64) *EligibilityCadrePayMatrixUpdateOne {
	ecpmuo.mutation.ResetDeletedbyEmployeeid()
	ecpmuo.mutation.SetDeletedbyEmployeeid(i)
	return ecpmuo
}

// SetNillableDeletedbyEmployeeid sets the "deletedbyEmployeeid" field if the given value is not nil.
func (ecpmuo *EligibilityCadrePayMatrixUpdateOne) SetNillableDeletedbyEmployeeid(i *int64) *EligibilityCadrePayMatrixUpdateOne {
	if i != nil {
		ecpmuo.SetDeletedbyEmployeeid(*i)
	}
	return ecpmuo
}

// AddDeletedbyEmployeeid adds i to the "deletedbyEmployeeid" field.
func (ecpmuo *EligibilityCadrePayMatrixUpdateOne) AddDeletedbyEmployeeid(i int64) *EligibilityCadrePayMatrixUpdateOne {
	ecpmuo.mutation.AddDeletedbyEmployeeid(i)
	return ecpmuo
}

// ClearDeletedbyEmployeeid clears the value of the "deletedbyEmployeeid" field.
func (ecpmuo *EligibilityCadrePayMatrixUpdateOne) ClearDeletedbyEmployeeid() *EligibilityCadrePayMatrixUpdateOne {
	ecpmuo.mutation.ClearDeletedbyEmployeeid()
	return ecpmuo
}

// SetDeletedbyDesignation sets the "deletedbyDesignation" field.
func (ecpmuo *EligibilityCadrePayMatrixUpdateOne) SetDeletedbyDesignation(s string) *EligibilityCadrePayMatrixUpdateOne {
	ecpmuo.mutation.SetDeletedbyDesignation(s)
	return ecpmuo
}

// SetNillableDeletedbyDesignation sets the "deletedbyDesignation" field if the given value is not nil.
func (ecpmuo *EligibilityCadrePayMatrixUpdateOne) SetNillableDeletedbyDesignation(s *string) *EligibilityCadrePayMatrixUpdateOne {
	if s != nil {
		ecpmuo.SetDeletedbyDesignation(*s)
	}
	return ecpmuo
}

// ClearDeletedbyDesignation clears the value of the "deletedbyDesignation" field.
func (ecpmuo *EligibilityCadrePayMatrixUpdateOne) ClearDeletedbyDesignation() *EligibilityCadrePayMatrixUpdateOne {
	ecpmuo.mutation.ClearDeletedbyDesignation()
	return ecpmuo
}

// SetDeletedDate sets the "deletedDate" field.
func (ecpmuo *EligibilityCadrePayMatrixUpdateOne) SetDeletedDate(t time.Time) *EligibilityCadrePayMatrixUpdateOne {
	ecpmuo.mutation.SetDeletedDate(t)
	return ecpmuo
}

// SetNillableDeletedDate sets the "deletedDate" field if the given value is not nil.
func (ecpmuo *EligibilityCadrePayMatrixUpdateOne) SetNillableDeletedDate(t *time.Time) *EligibilityCadrePayMatrixUpdateOne {
	if t != nil {
		ecpmuo.SetDeletedDate(*t)
	}
	return ecpmuo
}

// ClearDeletedDate clears the value of the "deletedDate" field.
func (ecpmuo *EligibilityCadrePayMatrixUpdateOne) ClearDeletedDate() *EligibilityCadrePayMatrixUpdateOne {
	ecpmuo.mutation.ClearDeletedDate()
	return ecpmuo
}

// AddLogDatumIDs adds the "LogData" edge to the Logs entity by IDs.
func (ecpmuo *EligibilityCadrePayMatrixUpdateOne) AddLogDatumIDs(ids ...int64) *EligibilityCadrePayMatrixUpdateOne {
	ecpmuo.mutation.AddLogDatumIDs(ids...)
	return ecpmuo
}

// AddLogData adds the "LogData" edges to the Logs entity.
func (ecpmuo *EligibilityCadrePayMatrixUpdateOne) AddLogData(l ...*Logs) *EligibilityCadrePayMatrixUpdateOne {
	ids := make([]int64, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return ecpmuo.AddLogDatumIDs(ids...)
}

// Mutation returns the EligibilityCadrePayMatrixMutation object of the builder.
func (ecpmuo *EligibilityCadrePayMatrixUpdateOne) Mutation() *EligibilityCadrePayMatrixMutation {
	return ecpmuo.mutation
}

// ClearLogData clears all "LogData" edges to the Logs entity.
func (ecpmuo *EligibilityCadrePayMatrixUpdateOne) ClearLogData() *EligibilityCadrePayMatrixUpdateOne {
	ecpmuo.mutation.ClearLogData()
	return ecpmuo
}

// RemoveLogDatumIDs removes the "LogData" edge to Logs entities by IDs.
func (ecpmuo *EligibilityCadrePayMatrixUpdateOne) RemoveLogDatumIDs(ids ...int64) *EligibilityCadrePayMatrixUpdateOne {
	ecpmuo.mutation.RemoveLogDatumIDs(ids...)
	return ecpmuo
}

// RemoveLogData removes "LogData" edges to Logs entities.
func (ecpmuo *EligibilityCadrePayMatrixUpdateOne) RemoveLogData(l ...*Logs) *EligibilityCadrePayMatrixUpdateOne {
	ids := make([]int64, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return ecpmuo.RemoveLogDatumIDs(ids...)
}

// Where appends a list predicates to the EligibilityCadrePayMatrixUpdate builder.
func (ecpmuo *EligibilityCadrePayMatrixUpdateOne) Where(ps ...predicate.EligibilityCadrePayMatrix) *EligibilityCadrePayMatrixUpdateOne {
	ecpmuo.mutation.Where(ps...)
	return ecpmuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ecpmuo *EligibilityCadrePayMatrixUpdateOne) Select(field string, fields ...string) *EligibilityCadrePayMatrixUpdateOne {
	ecpmuo.fields = append([]string{field}, fields...)
	return ecpmuo
}

// Save executes the query and returns the updated EligibilityCadrePayMatrix entity.
func (ecpmuo *EligibilityCadrePayMatrixUpdateOne) Save(ctx context.Context) (*EligibilityCadrePayMatrix, error) {
	return withHooks(ctx, ecpmuo.sqlSave, ecpmuo.mutation, ecpmuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ecpmuo *EligibilityCadrePayMatrixUpdateOne) SaveX(ctx context.Context) *EligibilityCadrePayMatrix {
	node, err := ecpmuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ecpmuo *EligibilityCadrePayMatrixUpdateOne) Exec(ctx context.Context) error {
	_, err := ecpmuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ecpmuo *EligibilityCadrePayMatrixUpdateOne) ExecX(ctx context.Context) {
	if err := ecpmuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ecpmuo *EligibilityCadrePayMatrixUpdateOne) sqlSave(ctx context.Context) (_node *EligibilityCadrePayMatrix, err error) {
	_spec := sqlgraph.NewUpdateSpec(eligibilitycadrepaymatrix.Table, eligibilitycadrepaymatrix.Columns, sqlgraph.NewFieldSpec(eligibilitycadrepaymatrix.FieldID, field.TypeInt64))
	id, ok := ecpmuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "EligibilityCadrePayMatrix.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ecpmuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, eligibilitycadrepaymatrix.FieldID)
		for _, f := range fields {
			if !eligibilitycadrepaymatrix.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != eligibilitycadrepaymatrix.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ecpmuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ecpmuo.mutation.CadreEligibleConfigurationCadreEligibleCode(); ok {
		_spec.SetField(eligibilitycadrepaymatrix.FieldCadreEligibleConfigurationCadreEligibleCode, field.TypeInt64, value)
	}
	if value, ok := ecpmuo.mutation.AddedCadreEligibleConfigurationCadreEligibleCode(); ok {
		_spec.AddField(eligibilitycadrepaymatrix.FieldCadreEligibleConfigurationCadreEligibleCode, field.TypeInt64, value)
	}
	if ecpmuo.mutation.CadreEligibleConfigurationCadreEligibleCodeCleared() {
		_spec.ClearField(eligibilitycadrepaymatrix.FieldCadreEligibleConfigurationCadreEligibleCode, field.TypeInt64)
	}
	if value, ok := ecpmuo.mutation.PostId(); ok {
		_spec.SetField(eligibilitycadrepaymatrix.FieldPostId, field.TypeInt64, value)
	}
	if value, ok := ecpmuo.mutation.AddedPostId(); ok {
		_spec.AddField(eligibilitycadrepaymatrix.FieldPostId, field.TypeInt64, value)
	}
	if ecpmuo.mutation.PostIdCleared() {
		_spec.ClearField(eligibilitycadrepaymatrix.FieldPostId, field.TypeInt64)
	}
	if value, ok := ecpmuo.mutation.PostCode(); ok {
		_spec.SetField(eligibilitycadrepaymatrix.FieldPostCode, field.TypeString, value)
	}
	if ecpmuo.mutation.PostCodeCleared() {
		_spec.ClearField(eligibilitycadrepaymatrix.FieldPostCode, field.TypeString)
	}
	if value, ok := ecpmuo.mutation.PostDescription(); ok {
		_spec.SetField(eligibilitycadrepaymatrix.FieldPostDescription, field.TypeString, value)
	}
	if ecpmuo.mutation.PostDescriptionCleared() {
		_spec.ClearField(eligibilitycadrepaymatrix.FieldPostDescription, field.TypeString)
	}
	if value, ok := ecpmuo.mutation.OrderNumber(); ok {
		_spec.SetField(eligibilitycadrepaymatrix.FieldOrderNumber, field.TypeString, value)
	}
	if ecpmuo.mutation.OrderNumberCleared() {
		_spec.ClearField(eligibilitycadrepaymatrix.FieldOrderNumber, field.TypeString)
	}
	if value, ok := ecpmuo.mutation.CreatedById(); ok {
		_spec.SetField(eligibilitycadrepaymatrix.FieldCreatedById, field.TypeInt64, value)
	}
	if value, ok := ecpmuo.mutation.AddedCreatedById(); ok {
		_spec.AddField(eligibilitycadrepaymatrix.FieldCreatedById, field.TypeInt64, value)
	}
	if ecpmuo.mutation.CreatedByIdCleared() {
		_spec.ClearField(eligibilitycadrepaymatrix.FieldCreatedById, field.TypeInt64)
	}
	if value, ok := ecpmuo.mutation.CreatedByUserName(); ok {
		_spec.SetField(eligibilitycadrepaymatrix.FieldCreatedByUserName, field.TypeString, value)
	}
	if ecpmuo.mutation.CreatedByUserNameCleared() {
		_spec.ClearField(eligibilitycadrepaymatrix.FieldCreatedByUserName, field.TypeString)
	}
	if value, ok := ecpmuo.mutation.CreatedByEmpId(); ok {
		_spec.SetField(eligibilitycadrepaymatrix.FieldCreatedByEmpId, field.TypeInt64, value)
	}
	if value, ok := ecpmuo.mutation.AddedCreatedByEmpId(); ok {
		_spec.AddField(eligibilitycadrepaymatrix.FieldCreatedByEmpId, field.TypeInt64, value)
	}
	if ecpmuo.mutation.CreatedByEmpIdCleared() {
		_spec.ClearField(eligibilitycadrepaymatrix.FieldCreatedByEmpId, field.TypeInt64)
	}
	if value, ok := ecpmuo.mutation.CreatedByDesignation(); ok {
		_spec.SetField(eligibilitycadrepaymatrix.FieldCreatedByDesignation, field.TypeString, value)
	}
	if ecpmuo.mutation.CreatedByDesignationCleared() {
		_spec.ClearField(eligibilitycadrepaymatrix.FieldCreatedByDesignation, field.TypeString)
	}
	if value, ok := ecpmuo.mutation.CreatedDate(); ok {
		_spec.SetField(eligibilitycadrepaymatrix.FieldCreatedDate, field.TypeTime, value)
	}
	if ecpmuo.mutation.CreatedDateCleared() {
		_spec.ClearField(eligibilitycadrepaymatrix.FieldCreatedDate, field.TypeTime)
	}
	if value, ok := ecpmuo.mutation.Verifiedbyid(); ok {
		_spec.SetField(eligibilitycadrepaymatrix.FieldVerifiedbyid, field.TypeInt64, value)
	}
	if value, ok := ecpmuo.mutation.AddedVerifiedbyid(); ok {
		_spec.AddField(eligibilitycadrepaymatrix.FieldVerifiedbyid, field.TypeInt64, value)
	}
	if ecpmuo.mutation.VerifiedbyidCleared() {
		_spec.ClearField(eligibilitycadrepaymatrix.FieldVerifiedbyid, field.TypeInt64)
	}
	if value, ok := ecpmuo.mutation.Verifiedbyusername(); ok {
		_spec.SetField(eligibilitycadrepaymatrix.FieldVerifiedbyusername, field.TypeString, value)
	}
	if ecpmuo.mutation.VerifiedbyusernameCleared() {
		_spec.ClearField(eligibilitycadrepaymatrix.FieldVerifiedbyusername, field.TypeString)
	}
	if value, ok := ecpmuo.mutation.VerifiedbyEmployeeid(); ok {
		_spec.SetField(eligibilitycadrepaymatrix.FieldVerifiedbyEmployeeid, field.TypeInt64, value)
	}
	if value, ok := ecpmuo.mutation.AddedVerifiedbyEmployeeid(); ok {
		_spec.AddField(eligibilitycadrepaymatrix.FieldVerifiedbyEmployeeid, field.TypeInt64, value)
	}
	if ecpmuo.mutation.VerifiedbyEmployeeidCleared() {
		_spec.ClearField(eligibilitycadrepaymatrix.FieldVerifiedbyEmployeeid, field.TypeInt64)
	}
	if value, ok := ecpmuo.mutation.VerifiedbyDesignation(); ok {
		_spec.SetField(eligibilitycadrepaymatrix.FieldVerifiedbyDesignation, field.TypeString, value)
	}
	if ecpmuo.mutation.VerifiedbyDesignationCleared() {
		_spec.ClearField(eligibilitycadrepaymatrix.FieldVerifiedbyDesignation, field.TypeString)
	}
	if value, ok := ecpmuo.mutation.VerifiedDate(); ok {
		_spec.SetField(eligibilitycadrepaymatrix.FieldVerifiedDate, field.TypeTime, value)
	}
	if ecpmuo.mutation.VerifiedDateCleared() {
		_spec.ClearField(eligibilitycadrepaymatrix.FieldVerifiedDate, field.TypeTime)
	}
	if value, ok := ecpmuo.mutation.Statuss(); ok {
		_spec.SetField(eligibilitycadrepaymatrix.FieldStatuss, field.TypeString, value)
	}
	if ecpmuo.mutation.StatussCleared() {
		_spec.ClearField(eligibilitycadrepaymatrix.FieldStatuss, field.TypeString)
	}
	if value, ok := ecpmuo.mutation.Deletedbyid(); ok {
		_spec.SetField(eligibilitycadrepaymatrix.FieldDeletedbyid, field.TypeInt64, value)
	}
	if value, ok := ecpmuo.mutation.AddedDeletedbyid(); ok {
		_spec.AddField(eligibilitycadrepaymatrix.FieldDeletedbyid, field.TypeInt64, value)
	}
	if ecpmuo.mutation.DeletedbyidCleared() {
		_spec.ClearField(eligibilitycadrepaymatrix.FieldDeletedbyid, field.TypeInt64)
	}
	if value, ok := ecpmuo.mutation.Deletedbyusername(); ok {
		_spec.SetField(eligibilitycadrepaymatrix.FieldDeletedbyusername, field.TypeString, value)
	}
	if ecpmuo.mutation.DeletedbyusernameCleared() {
		_spec.ClearField(eligibilitycadrepaymatrix.FieldDeletedbyusername, field.TypeString)
	}
	if value, ok := ecpmuo.mutation.DeletedbyEmployeeid(); ok {
		_spec.SetField(eligibilitycadrepaymatrix.FieldDeletedbyEmployeeid, field.TypeInt64, value)
	}
	if value, ok := ecpmuo.mutation.AddedDeletedbyEmployeeid(); ok {
		_spec.AddField(eligibilitycadrepaymatrix.FieldDeletedbyEmployeeid, field.TypeInt64, value)
	}
	if ecpmuo.mutation.DeletedbyEmployeeidCleared() {
		_spec.ClearField(eligibilitycadrepaymatrix.FieldDeletedbyEmployeeid, field.TypeInt64)
	}
	if value, ok := ecpmuo.mutation.DeletedbyDesignation(); ok {
		_spec.SetField(eligibilitycadrepaymatrix.FieldDeletedbyDesignation, field.TypeString, value)
	}
	if ecpmuo.mutation.DeletedbyDesignationCleared() {
		_spec.ClearField(eligibilitycadrepaymatrix.FieldDeletedbyDesignation, field.TypeString)
	}
	if value, ok := ecpmuo.mutation.DeletedDate(); ok {
		_spec.SetField(eligibilitycadrepaymatrix.FieldDeletedDate, field.TypeTime, value)
	}
	if ecpmuo.mutation.DeletedDateCleared() {
		_spec.ClearField(eligibilitycadrepaymatrix.FieldDeletedDate, field.TypeTime)
	}
	if ecpmuo.mutation.LogDataCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   eligibilitycadrepaymatrix.LogDataTable,
			Columns: []string{eligibilitycadrepaymatrix.LogDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(logs.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ecpmuo.mutation.RemovedLogDataIDs(); len(nodes) > 0 && !ecpmuo.mutation.LogDataCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   eligibilitycadrepaymatrix.LogDataTable,
			Columns: []string{eligibilitycadrepaymatrix.LogDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(logs.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ecpmuo.mutation.LogDataIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   eligibilitycadrepaymatrix.LogDataTable,
			Columns: []string{eligibilitycadrepaymatrix.LogDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(logs.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &EligibilityCadrePayMatrix{config: ecpmuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ecpmuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{eligibilitycadrepaymatrix.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ecpmuo.mutation.done = true
	return _node, nil
}
