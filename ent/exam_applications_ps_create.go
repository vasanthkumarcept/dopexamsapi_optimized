// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"recruit/ent/cadre_choice_ps"
	"recruit/ent/center"
	"recruit/ent/circlesummaryforno"
	"recruit/ent/exam"
	"recruit/ent/exam_applications_ps"
	"recruit/ent/examcitycenter"
	"recruit/ent/logs"
	"recruit/ent/placeofpreferenceps"
	"recruit/ent/recommendationspsapplications"
	"recruit/ent/rolemaster"
	"recruit/ent/usermaster"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ExamApplicationsPSCreate is the builder for creating a Exam_Applications_PS entity.
type ExamApplicationsPSCreate struct {
	config
	mutation *ExamApplicationsPSMutation
	hooks    []Hook
}

// SetApplicationNumber sets the "ApplicationNumber" field.
func (eapc *ExamApplicationsPSCreate) SetApplicationNumber(s string) *ExamApplicationsPSCreate {
	eapc.mutation.SetApplicationNumber(s)
	return eapc
}

// SetNillableApplicationNumber sets the "ApplicationNumber" field if the given value is not nil.
func (eapc *ExamApplicationsPSCreate) SetNillableApplicationNumber(s *string) *ExamApplicationsPSCreate {
	if s != nil {
		eapc.SetApplicationNumber(*s)
	}
	return eapc
}

// SetApplnSubmittedDate sets the "ApplnSubmittedDate" field.
func (eapc *ExamApplicationsPSCreate) SetApplnSubmittedDate(t time.Time) *ExamApplicationsPSCreate {
	eapc.mutation.SetApplnSubmittedDate(t)
	return eapc
}

// SetNillableApplnSubmittedDate sets the "ApplnSubmittedDate" field if the given value is not nil.
func (eapc *ExamApplicationsPSCreate) SetNillableApplnSubmittedDate(t *time.Time) *ExamApplicationsPSCreate {
	if t != nil {
		eapc.SetApplnSubmittedDate(*t)
	}
	return eapc
}

// SetExamCode sets the "ExamCode" field.
func (eapc *ExamApplicationsPSCreate) SetExamCode(i int32) *ExamApplicationsPSCreate {
	eapc.mutation.SetExamCode(i)
	return eapc
}

// SetNillableExamCode sets the "ExamCode" field if the given value is not nil.
func (eapc *ExamApplicationsPSCreate) SetNillableExamCode(i *int32) *ExamApplicationsPSCreate {
	if i != nil {
		eapc.SetExamCode(*i)
	}
	return eapc
}

// SetExamShortName sets the "ExamShortName" field.
func (eapc *ExamApplicationsPSCreate) SetExamShortName(s string) *ExamApplicationsPSCreate {
	eapc.mutation.SetExamShortName(s)
	return eapc
}

// SetNillableExamShortName sets the "ExamShortName" field if the given value is not nil.
func (eapc *ExamApplicationsPSCreate) SetNillableExamShortName(s *string) *ExamApplicationsPSCreate {
	if s != nil {
		eapc.SetExamShortName(*s)
	}
	return eapc
}

// SetExamName sets the "ExamName" field.
func (eapc *ExamApplicationsPSCreate) SetExamName(s string) *ExamApplicationsPSCreate {
	eapc.mutation.SetExamName(s)
	return eapc
}

// SetNillableExamName sets the "ExamName" field if the given value is not nil.
func (eapc *ExamApplicationsPSCreate) SetNillableExamName(s *string) *ExamApplicationsPSCreate {
	if s != nil {
		eapc.SetExamName(*s)
	}
	return eapc
}

// SetSmsExamShortName sets the "SmsExamShortName" field.
func (eapc *ExamApplicationsPSCreate) SetSmsExamShortName(s string) *ExamApplicationsPSCreate {
	eapc.mutation.SetSmsExamShortName(s)
	return eapc
}

// SetNillableSmsExamShortName sets the "SmsExamShortName" field if the given value is not nil.
func (eapc *ExamApplicationsPSCreate) SetNillableSmsExamShortName(s *string) *ExamApplicationsPSCreate {
	if s != nil {
		eapc.SetSmsExamShortName(*s)
	}
	return eapc
}

// SetExamYear sets the "ExamYear" field.
func (eapc *ExamApplicationsPSCreate) SetExamYear(s string) *ExamApplicationsPSCreate {
	eapc.mutation.SetExamYear(s)
	return eapc
}

// SetNillableExamYear sets the "ExamYear" field if the given value is not nil.
func (eapc *ExamApplicationsPSCreate) SetNillableExamYear(s *string) *ExamApplicationsPSCreate {
	if s != nil {
		eapc.SetExamYear(*s)
	}
	return eapc
}

// SetUserID sets the "UserID" field.
func (eapc *ExamApplicationsPSCreate) SetUserID(i int32) *ExamApplicationsPSCreate {
	eapc.mutation.SetUserID(i)
	return eapc
}

// SetNillableUserID sets the "UserID" field if the given value is not nil.
func (eapc *ExamApplicationsPSCreate) SetNillableUserID(i *int32) *ExamApplicationsPSCreate {
	if i != nil {
		eapc.SetUserID(*i)
	}
	return eapc
}

// SetEmployeeID sets the "EmployeeID" field.
func (eapc *ExamApplicationsPSCreate) SetEmployeeID(i int64) *ExamApplicationsPSCreate {
	eapc.mutation.SetEmployeeID(i)
	return eapc
}

// SetNillableEmployeeID sets the "EmployeeID" field if the given value is not nil.
func (eapc *ExamApplicationsPSCreate) SetNillableEmployeeID(i *int64) *ExamApplicationsPSCreate {
	if i != nil {
		eapc.SetEmployeeID(*i)
	}
	return eapc
}

// SetEmployeeName sets the "EmployeeName" field.
func (eapc *ExamApplicationsPSCreate) SetEmployeeName(s string) *ExamApplicationsPSCreate {
	eapc.mutation.SetEmployeeName(s)
	return eapc
}

// SetNillableEmployeeName sets the "EmployeeName" field if the given value is not nil.
func (eapc *ExamApplicationsPSCreate) SetNillableEmployeeName(s *string) *ExamApplicationsPSCreate {
	if s != nil {
		eapc.SetEmployeeName(*s)
	}
	return eapc
}

// SetDOB sets the "DOB" field.
func (eapc *ExamApplicationsPSCreate) SetDOB(s string) *ExamApplicationsPSCreate {
	eapc.mutation.SetDOB(s)
	return eapc
}

// SetNillableDOB sets the "DOB" field if the given value is not nil.
func (eapc *ExamApplicationsPSCreate) SetNillableDOB(s *string) *ExamApplicationsPSCreate {
	if s != nil {
		eapc.SetDOB(*s)
	}
	return eapc
}

// SetGender sets the "Gender" field.
func (eapc *ExamApplicationsPSCreate) SetGender(s string) *ExamApplicationsPSCreate {
	eapc.mutation.SetGender(s)
	return eapc
}

// SetNillableGender sets the "Gender" field if the given value is not nil.
func (eapc *ExamApplicationsPSCreate) SetNillableGender(s *string) *ExamApplicationsPSCreate {
	if s != nil {
		eapc.SetGender(*s)
	}
	return eapc
}

// SetMobileNumber sets the "MobileNumber" field.
func (eapc *ExamApplicationsPSCreate) SetMobileNumber(s string) *ExamApplicationsPSCreate {
	eapc.mutation.SetMobileNumber(s)
	return eapc
}

// SetNillableMobileNumber sets the "MobileNumber" field if the given value is not nil.
func (eapc *ExamApplicationsPSCreate) SetNillableMobileNumber(s *string) *ExamApplicationsPSCreate {
	if s != nil {
		eapc.SetMobileNumber(*s)
	}
	return eapc
}

// SetEmailID sets the "EmailID" field.
func (eapc *ExamApplicationsPSCreate) SetEmailID(s string) *ExamApplicationsPSCreate {
	eapc.mutation.SetEmailID(s)
	return eapc
}

// SetNillableEmailID sets the "EmailID" field if the given value is not nil.
func (eapc *ExamApplicationsPSCreate) SetNillableEmailID(s *string) *ExamApplicationsPSCreate {
	if s != nil {
		eapc.SetEmailID(*s)
	}
	return eapc
}

// SetCategoryCode sets the "CategoryCode" field.
func (eapc *ExamApplicationsPSCreate) SetCategoryCode(s string) *ExamApplicationsPSCreate {
	eapc.mutation.SetCategoryCode(s)
	return eapc
}

// SetNillableCategoryCode sets the "CategoryCode" field if the given value is not nil.
func (eapc *ExamApplicationsPSCreate) SetNillableCategoryCode(s *string) *ExamApplicationsPSCreate {
	if s != nil {
		eapc.SetCategoryCode(*s)
	}
	return eapc
}

// SetCategoryDescription sets the "CategoryDescription" field.
func (eapc *ExamApplicationsPSCreate) SetCategoryDescription(s string) *ExamApplicationsPSCreate {
	eapc.mutation.SetCategoryDescription(s)
	return eapc
}

// SetNillableCategoryDescription sets the "CategoryDescription" field if the given value is not nil.
func (eapc *ExamApplicationsPSCreate) SetNillableCategoryDescription(s *string) *ExamApplicationsPSCreate {
	if s != nil {
		eapc.SetCategoryDescription(*s)
	}
	return eapc
}

// SetDisabilityTypeID sets the "DisabilityTypeID" field.
func (eapc *ExamApplicationsPSCreate) SetDisabilityTypeID(s string) *ExamApplicationsPSCreate {
	eapc.mutation.SetDisabilityTypeID(s)
	return eapc
}

// SetNillableDisabilityTypeID sets the "DisabilityTypeID" field if the given value is not nil.
func (eapc *ExamApplicationsPSCreate) SetNillableDisabilityTypeID(s *string) *ExamApplicationsPSCreate {
	if s != nil {
		eapc.SetDisabilityTypeID(*s)
	}
	return eapc
}

// SetDisabilityTypeCode sets the "DisabilityTypeCode" field.
func (eapc *ExamApplicationsPSCreate) SetDisabilityTypeCode(s string) *ExamApplicationsPSCreate {
	eapc.mutation.SetDisabilityTypeCode(s)
	return eapc
}

// SetNillableDisabilityTypeCode sets the "DisabilityTypeCode" field if the given value is not nil.
func (eapc *ExamApplicationsPSCreate) SetNillableDisabilityTypeCode(s *string) *ExamApplicationsPSCreate {
	if s != nil {
		eapc.SetDisabilityTypeCode(*s)
	}
	return eapc
}

// SetDisabilityTypeDescription sets the "DisabilityTypeDescription" field.
func (eapc *ExamApplicationsPSCreate) SetDisabilityTypeDescription(s string) *ExamApplicationsPSCreate {
	eapc.mutation.SetDisabilityTypeDescription(s)
	return eapc
}

// SetNillableDisabilityTypeDescription sets the "DisabilityTypeDescription" field if the given value is not nil.
func (eapc *ExamApplicationsPSCreate) SetNillableDisabilityTypeDescription(s *string) *ExamApplicationsPSCreate {
	if s != nil {
		eapc.SetDisabilityTypeDescription(*s)
	}
	return eapc
}

// SetDisabilityPercentage sets the "DisabilityPercentage" field.
func (eapc *ExamApplicationsPSCreate) SetDisabilityPercentage(i int32) *ExamApplicationsPSCreate {
	eapc.mutation.SetDisabilityPercentage(i)
	return eapc
}

// SetNillableDisabilityPercentage sets the "DisabilityPercentage" field if the given value is not nil.
func (eapc *ExamApplicationsPSCreate) SetNillableDisabilityPercentage(i *int32) *ExamApplicationsPSCreate {
	if i != nil {
		eapc.SetDisabilityPercentage(*i)
	}
	return eapc
}

// SetDCCS sets the "DCCS" field.
func (eapc *ExamApplicationsPSCreate) SetDCCS(s string) *ExamApplicationsPSCreate {
	eapc.mutation.SetDCCS(s)
	return eapc
}

// SetNillableDCCS sets the "DCCS" field if the given value is not nil.
func (eapc *ExamApplicationsPSCreate) SetNillableDCCS(s *string) *ExamApplicationsPSCreate {
	if s != nil {
		eapc.SetDCCS(*s)
	}
	return eapc
}

// SetEntryPostCode sets the "EntryPostCode" field.
func (eapc *ExamApplicationsPSCreate) SetEntryPostCode(s string) *ExamApplicationsPSCreate {
	eapc.mutation.SetEntryPostCode(s)
	return eapc
}

// SetNillableEntryPostCode sets the "EntryPostCode" field if the given value is not nil.
func (eapc *ExamApplicationsPSCreate) SetNillableEntryPostCode(s *string) *ExamApplicationsPSCreate {
	if s != nil {
		eapc.SetEntryPostCode(*s)
	}
	return eapc
}

// SetEntryPostDescription sets the "EntryPostDescription" field.
func (eapc *ExamApplicationsPSCreate) SetEntryPostDescription(s string) *ExamApplicationsPSCreate {
	eapc.mutation.SetEntryPostDescription(s)
	return eapc
}

// SetNillableEntryPostDescription sets the "EntryPostDescription" field if the given value is not nil.
func (eapc *ExamApplicationsPSCreate) SetNillableEntryPostDescription(s *string) *ExamApplicationsPSCreate {
	if s != nil {
		eapc.SetEntryPostDescription(*s)
	}
	return eapc
}

// SetPresentPostCode sets the "PresentPostCode" field.
func (eapc *ExamApplicationsPSCreate) SetPresentPostCode(s string) *ExamApplicationsPSCreate {
	eapc.mutation.SetPresentPostCode(s)
	return eapc
}

// SetNillablePresentPostCode sets the "PresentPostCode" field if the given value is not nil.
func (eapc *ExamApplicationsPSCreate) SetNillablePresentPostCode(s *string) *ExamApplicationsPSCreate {
	if s != nil {
		eapc.SetPresentPostCode(*s)
	}
	return eapc
}

// SetPresentPostDescription sets the "PresentPostDescription" field.
func (eapc *ExamApplicationsPSCreate) SetPresentPostDescription(s string) *ExamApplicationsPSCreate {
	eapc.mutation.SetPresentPostDescription(s)
	return eapc
}

// SetNillablePresentPostDescription sets the "PresentPostDescription" field if the given value is not nil.
func (eapc *ExamApplicationsPSCreate) SetNillablePresentPostDescription(s *string) *ExamApplicationsPSCreate {
	if s != nil {
		eapc.SetPresentPostDescription(*s)
	}
	return eapc
}

// SetFeederPostCode sets the "FeederPostCode" field.
func (eapc *ExamApplicationsPSCreate) SetFeederPostCode(s string) *ExamApplicationsPSCreate {
	eapc.mutation.SetFeederPostCode(s)
	return eapc
}

// SetNillableFeederPostCode sets the "FeederPostCode" field if the given value is not nil.
func (eapc *ExamApplicationsPSCreate) SetNillableFeederPostCode(s *string) *ExamApplicationsPSCreate {
	if s != nil {
		eapc.SetFeederPostCode(*s)
	}
	return eapc
}

// SetFeederPostDescription sets the "FeederPostDescription" field.
func (eapc *ExamApplicationsPSCreate) SetFeederPostDescription(s string) *ExamApplicationsPSCreate {
	eapc.mutation.SetFeederPostDescription(s)
	return eapc
}

// SetNillableFeederPostDescription sets the "FeederPostDescription" field if the given value is not nil.
func (eapc *ExamApplicationsPSCreate) SetNillableFeederPostDescription(s *string) *ExamApplicationsPSCreate {
	if s != nil {
		eapc.SetFeederPostDescription(*s)
	}
	return eapc
}

// SetFeederPostJoiningDate sets the "FeederPostJoiningDate" field.
func (eapc *ExamApplicationsPSCreate) SetFeederPostJoiningDate(s string) *ExamApplicationsPSCreate {
	eapc.mutation.SetFeederPostJoiningDate(s)
	return eapc
}

// SetNillableFeederPostJoiningDate sets the "FeederPostJoiningDate" field if the given value is not nil.
func (eapc *ExamApplicationsPSCreate) SetNillableFeederPostJoiningDate(s *string) *ExamApplicationsPSCreate {
	if s != nil {
		eapc.SetFeederPostJoiningDate(*s)
	}
	return eapc
}

// SetDesignationID sets the "DesignationID" field.
func (eapc *ExamApplicationsPSCreate) SetDesignationID(s string) *ExamApplicationsPSCreate {
	eapc.mutation.SetDesignationID(s)
	return eapc
}

// SetNillableDesignationID sets the "DesignationID" field if the given value is not nil.
func (eapc *ExamApplicationsPSCreate) SetNillableDesignationID(s *string) *ExamApplicationsPSCreate {
	if s != nil {
		eapc.SetDesignationID(*s)
	}
	return eapc
}

// SetPresentDesignation sets the "PresentDesignation" field.
func (eapc *ExamApplicationsPSCreate) SetPresentDesignation(s string) *ExamApplicationsPSCreate {
	eapc.mutation.SetPresentDesignation(s)
	return eapc
}

// SetNillablePresentDesignation sets the "PresentDesignation" field if the given value is not nil.
func (eapc *ExamApplicationsPSCreate) SetNillablePresentDesignation(s *string) *ExamApplicationsPSCreate {
	if s != nil {
		eapc.SetPresentDesignation(*s)
	}
	return eapc
}

// SetEducationCode sets the "EducationCode" field.
func (eapc *ExamApplicationsPSCreate) SetEducationCode(s string) *ExamApplicationsPSCreate {
	eapc.mutation.SetEducationCode(s)
	return eapc
}

// SetNillableEducationCode sets the "EducationCode" field if the given value is not nil.
func (eapc *ExamApplicationsPSCreate) SetNillableEducationCode(s *string) *ExamApplicationsPSCreate {
	if s != nil {
		eapc.SetEducationCode(*s)
	}
	return eapc
}

// SetEducationDescription sets the "EducationDescription" field.
func (eapc *ExamApplicationsPSCreate) SetEducationDescription(s string) *ExamApplicationsPSCreate {
	eapc.mutation.SetEducationDescription(s)
	return eapc
}

// SetNillableEducationDescription sets the "EducationDescription" field if the given value is not nil.
func (eapc *ExamApplicationsPSCreate) SetNillableEducationDescription(s *string) *ExamApplicationsPSCreate {
	if s != nil {
		eapc.SetEducationDescription(*s)
	}
	return eapc
}

// SetFacilityUniqueID sets the "FacilityUniqueID" field.
func (eapc *ExamApplicationsPSCreate) SetFacilityUniqueID(s string) *ExamApplicationsPSCreate {
	eapc.mutation.SetFacilityUniqueID(s)
	return eapc
}

// SetNillableFacilityUniqueID sets the "FacilityUniqueID" field if the given value is not nil.
func (eapc *ExamApplicationsPSCreate) SetNillableFacilityUniqueID(s *string) *ExamApplicationsPSCreate {
	if s != nil {
		eapc.SetFacilityUniqueID(*s)
	}
	return eapc
}

// SetWorkingOfficePincode sets the "WorkingOfficePincode" field.
func (eapc *ExamApplicationsPSCreate) SetWorkingOfficePincode(i int32) *ExamApplicationsPSCreate {
	eapc.mutation.SetWorkingOfficePincode(i)
	return eapc
}

// SetNillableWorkingOfficePincode sets the "WorkingOfficePincode" field if the given value is not nil.
func (eapc *ExamApplicationsPSCreate) SetNillableWorkingOfficePincode(i *int32) *ExamApplicationsPSCreate {
	if i != nil {
		eapc.SetWorkingOfficePincode(*i)
	}
	return eapc
}

// SetWorkingOfficeFacilityID sets the "WorkingOfficeFacilityID" field.
func (eapc *ExamApplicationsPSCreate) SetWorkingOfficeFacilityID(s string) *ExamApplicationsPSCreate {
	eapc.mutation.SetWorkingOfficeFacilityID(s)
	return eapc
}

// SetNillableWorkingOfficeFacilityID sets the "WorkingOfficeFacilityID" field if the given value is not nil.
func (eapc *ExamApplicationsPSCreate) SetNillableWorkingOfficeFacilityID(s *string) *ExamApplicationsPSCreate {
	if s != nil {
		eapc.SetWorkingOfficeFacilityID(*s)
	}
	return eapc
}

// SetWorkingOfficeName sets the "WorkingOfficeName" field.
func (eapc *ExamApplicationsPSCreate) SetWorkingOfficeName(s string) *ExamApplicationsPSCreate {
	eapc.mutation.SetWorkingOfficeName(s)
	return eapc
}

// SetNillableWorkingOfficeName sets the "WorkingOfficeName" field if the given value is not nil.
func (eapc *ExamApplicationsPSCreate) SetNillableWorkingOfficeName(s *string) *ExamApplicationsPSCreate {
	if s != nil {
		eapc.SetWorkingOfficeName(*s)
	}
	return eapc
}

// SetWorkingOfficeCircleFacilityID sets the "WorkingOfficeCircleFacilityID" field.
func (eapc *ExamApplicationsPSCreate) SetWorkingOfficeCircleFacilityID(s string) *ExamApplicationsPSCreate {
	eapc.mutation.SetWorkingOfficeCircleFacilityID(s)
	return eapc
}

// SetNillableWorkingOfficeCircleFacilityID sets the "WorkingOfficeCircleFacilityID" field if the given value is not nil.
func (eapc *ExamApplicationsPSCreate) SetNillableWorkingOfficeCircleFacilityID(s *string) *ExamApplicationsPSCreate {
	if s != nil {
		eapc.SetWorkingOfficeCircleFacilityID(*s)
	}
	return eapc
}

// SetWorkingOfficeCircleName sets the "WorkingOfficeCircleName" field.
func (eapc *ExamApplicationsPSCreate) SetWorkingOfficeCircleName(s string) *ExamApplicationsPSCreate {
	eapc.mutation.SetWorkingOfficeCircleName(s)
	return eapc
}

// SetNillableWorkingOfficeCircleName sets the "WorkingOfficeCircleName" field if the given value is not nil.
func (eapc *ExamApplicationsPSCreate) SetNillableWorkingOfficeCircleName(s *string) *ExamApplicationsPSCreate {
	if s != nil {
		eapc.SetWorkingOfficeCircleName(*s)
	}
	return eapc
}

// SetWorkingOfficeRegionFacilityID sets the "WorkingOfficeRegionFacilityID" field.
func (eapc *ExamApplicationsPSCreate) SetWorkingOfficeRegionFacilityID(s string) *ExamApplicationsPSCreate {
	eapc.mutation.SetWorkingOfficeRegionFacilityID(s)
	return eapc
}

// SetNillableWorkingOfficeRegionFacilityID sets the "WorkingOfficeRegionFacilityID" field if the given value is not nil.
func (eapc *ExamApplicationsPSCreate) SetNillableWorkingOfficeRegionFacilityID(s *string) *ExamApplicationsPSCreate {
	if s != nil {
		eapc.SetWorkingOfficeRegionFacilityID(*s)
	}
	return eapc
}

// SetWorkingOfficeRegionName sets the "WorkingOfficeRegionName" field.
func (eapc *ExamApplicationsPSCreate) SetWorkingOfficeRegionName(s string) *ExamApplicationsPSCreate {
	eapc.mutation.SetWorkingOfficeRegionName(s)
	return eapc
}

// SetNillableWorkingOfficeRegionName sets the "WorkingOfficeRegionName" field if the given value is not nil.
func (eapc *ExamApplicationsPSCreate) SetNillableWorkingOfficeRegionName(s *string) *ExamApplicationsPSCreate {
	if s != nil {
		eapc.SetWorkingOfficeRegionName(*s)
	}
	return eapc
}

// SetWorkingOfficeDivisionFacilityID sets the "WorkingOfficeDivisionFacilityID" field.
func (eapc *ExamApplicationsPSCreate) SetWorkingOfficeDivisionFacilityID(s string) *ExamApplicationsPSCreate {
	eapc.mutation.SetWorkingOfficeDivisionFacilityID(s)
	return eapc
}

// SetNillableWorkingOfficeDivisionFacilityID sets the "WorkingOfficeDivisionFacilityID" field if the given value is not nil.
func (eapc *ExamApplicationsPSCreate) SetNillableWorkingOfficeDivisionFacilityID(s *string) *ExamApplicationsPSCreate {
	if s != nil {
		eapc.SetWorkingOfficeDivisionFacilityID(*s)
	}
	return eapc
}

// SetWorkingOfficeDivisionName sets the "WorkingOfficeDivisionName" field.
func (eapc *ExamApplicationsPSCreate) SetWorkingOfficeDivisionName(s string) *ExamApplicationsPSCreate {
	eapc.mutation.SetWorkingOfficeDivisionName(s)
	return eapc
}

// SetNillableWorkingOfficeDivisionName sets the "WorkingOfficeDivisionName" field if the given value is not nil.
func (eapc *ExamApplicationsPSCreate) SetNillableWorkingOfficeDivisionName(s *string) *ExamApplicationsPSCreate {
	if s != nil {
		eapc.SetWorkingOfficeDivisionName(*s)
	}
	return eapc
}

// SetReportingOfficeFacilityID sets the "ReportingOfficeFacilityID" field.
func (eapc *ExamApplicationsPSCreate) SetReportingOfficeFacilityID(s string) *ExamApplicationsPSCreate {
	eapc.mutation.SetReportingOfficeFacilityID(s)
	return eapc
}

// SetNillableReportingOfficeFacilityID sets the "ReportingOfficeFacilityID" field if the given value is not nil.
func (eapc *ExamApplicationsPSCreate) SetNillableReportingOfficeFacilityID(s *string) *ExamApplicationsPSCreate {
	if s != nil {
		eapc.SetReportingOfficeFacilityID(*s)
	}
	return eapc
}

// SetReportingOfficeName sets the "ReportingOfficeName" field.
func (eapc *ExamApplicationsPSCreate) SetReportingOfficeName(s string) *ExamApplicationsPSCreate {
	eapc.mutation.SetReportingOfficeName(s)
	return eapc
}

// SetNillableReportingOfficeName sets the "ReportingOfficeName" field if the given value is not nil.
func (eapc *ExamApplicationsPSCreate) SetNillableReportingOfficeName(s *string) *ExamApplicationsPSCreate {
	if s != nil {
		eapc.SetReportingOfficeName(*s)
	}
	return eapc
}

// SetLienControllingOfficeID sets the "LienControllingOfficeID" field.
func (eapc *ExamApplicationsPSCreate) SetLienControllingOfficeID(s string) *ExamApplicationsPSCreate {
	eapc.mutation.SetLienControllingOfficeID(s)
	return eapc
}

// SetNillableLienControllingOfficeID sets the "LienControllingOfficeID" field if the given value is not nil.
func (eapc *ExamApplicationsPSCreate) SetNillableLienControllingOfficeID(s *string) *ExamApplicationsPSCreate {
	if s != nil {
		eapc.SetLienControllingOfficeID(*s)
	}
	return eapc
}

// SetLienControllingOfficeName sets the "LienControllingOfficeName" field.
func (eapc *ExamApplicationsPSCreate) SetLienControllingOfficeName(s string) *ExamApplicationsPSCreate {
	eapc.mutation.SetLienControllingOfficeName(s)
	return eapc
}

// SetNillableLienControllingOfficeName sets the "LienControllingOfficeName" field if the given value is not nil.
func (eapc *ExamApplicationsPSCreate) SetNillableLienControllingOfficeName(s *string) *ExamApplicationsPSCreate {
	if s != nil {
		eapc.SetLienControllingOfficeName(*s)
	}
	return eapc
}

// SetInDeputation sets the "InDeputation" field.
func (eapc *ExamApplicationsPSCreate) SetInDeputation(s string) *ExamApplicationsPSCreate {
	eapc.mutation.SetInDeputation(s)
	return eapc
}

// SetNillableInDeputation sets the "InDeputation" field if the given value is not nil.
func (eapc *ExamApplicationsPSCreate) SetNillableInDeputation(s *string) *ExamApplicationsPSCreate {
	if s != nil {
		eapc.SetInDeputation(*s)
	}
	return eapc
}

// SetDeputationType sets the "DeputationType" field.
func (eapc *ExamApplicationsPSCreate) SetDeputationType(s string) *ExamApplicationsPSCreate {
	eapc.mutation.SetDeputationType(s)
	return eapc
}

// SetNillableDeputationType sets the "DeputationType" field if the given value is not nil.
func (eapc *ExamApplicationsPSCreate) SetNillableDeputationType(s *string) *ExamApplicationsPSCreate {
	if s != nil {
		eapc.SetDeputationType(*s)
	}
	return eapc
}

// SetDeputationOfficeUniqueId sets the "DeputationOfficeUniqueId" field.
func (eapc *ExamApplicationsPSCreate) SetDeputationOfficeUniqueId(s string) *ExamApplicationsPSCreate {
	eapc.mutation.SetDeputationOfficeUniqueId(s)
	return eapc
}

// SetNillableDeputationOfficeUniqueId sets the "DeputationOfficeUniqueId" field if the given value is not nil.
func (eapc *ExamApplicationsPSCreate) SetNillableDeputationOfficeUniqueId(s *string) *ExamApplicationsPSCreate {
	if s != nil {
		eapc.SetDeputationOfficeUniqueId(*s)
	}
	return eapc
}

// SetDeputationOfficeFacilityID sets the "DeputationOfficeFacilityID" field.
func (eapc *ExamApplicationsPSCreate) SetDeputationOfficeFacilityID(s string) *ExamApplicationsPSCreate {
	eapc.mutation.SetDeputationOfficeFacilityID(s)
	return eapc
}

// SetNillableDeputationOfficeFacilityID sets the "DeputationOfficeFacilityID" field if the given value is not nil.
func (eapc *ExamApplicationsPSCreate) SetNillableDeputationOfficeFacilityID(s *string) *ExamApplicationsPSCreate {
	if s != nil {
		eapc.SetDeputationOfficeFacilityID(*s)
	}
	return eapc
}

// SetDeputationOfficeName sets the "DeputationOfficeName" field.
func (eapc *ExamApplicationsPSCreate) SetDeputationOfficeName(s string) *ExamApplicationsPSCreate {
	eapc.mutation.SetDeputationOfficeName(s)
	return eapc
}

// SetNillableDeputationOfficeName sets the "DeputationOfficeName" field if the given value is not nil.
func (eapc *ExamApplicationsPSCreate) SetNillableDeputationOfficeName(s *string) *ExamApplicationsPSCreate {
	if s != nil {
		eapc.SetDeputationOfficeName(*s)
	}
	return eapc
}

// SetDeputationControllingOfficeID sets the "DeputationControllingOfficeID" field.
func (eapc *ExamApplicationsPSCreate) SetDeputationControllingOfficeID(s string) *ExamApplicationsPSCreate {
	eapc.mutation.SetDeputationControllingOfficeID(s)
	return eapc
}

// SetNillableDeputationControllingOfficeID sets the "DeputationControllingOfficeID" field if the given value is not nil.
func (eapc *ExamApplicationsPSCreate) SetNillableDeputationControllingOfficeID(s *string) *ExamApplicationsPSCreate {
	if s != nil {
		eapc.SetDeputationControllingOfficeID(*s)
	}
	return eapc
}

// SetDeputationControllingOfficeName sets the "DeputationControllingOfficeName" field.
func (eapc *ExamApplicationsPSCreate) SetDeputationControllingOfficeName(s string) *ExamApplicationsPSCreate {
	eapc.mutation.SetDeputationControllingOfficeName(s)
	return eapc
}

// SetNillableDeputationControllingOfficeName sets the "DeputationControllingOfficeName" field if the given value is not nil.
func (eapc *ExamApplicationsPSCreate) SetNillableDeputationControllingOfficeName(s *string) *ExamApplicationsPSCreate {
	if s != nil {
		eapc.SetDeputationControllingOfficeName(*s)
	}
	return eapc
}

// SetControllingOfficeFacilityID sets the "ControllingOfficeFacilityID" field.
func (eapc *ExamApplicationsPSCreate) SetControllingOfficeFacilityID(s string) *ExamApplicationsPSCreate {
	eapc.mutation.SetControllingOfficeFacilityID(s)
	return eapc
}

// SetNillableControllingOfficeFacilityID sets the "ControllingOfficeFacilityID" field if the given value is not nil.
func (eapc *ExamApplicationsPSCreate) SetNillableControllingOfficeFacilityID(s *string) *ExamApplicationsPSCreate {
	if s != nil {
		eapc.SetControllingOfficeFacilityID(*s)
	}
	return eapc
}

// SetControllingOfficeName sets the "ControllingOfficeName" field.
func (eapc *ExamApplicationsPSCreate) SetControllingOfficeName(s string) *ExamApplicationsPSCreate {
	eapc.mutation.SetControllingOfficeName(s)
	return eapc
}

// SetNillableControllingOfficeName sets the "ControllingOfficeName" field if the given value is not nil.
func (eapc *ExamApplicationsPSCreate) SetNillableControllingOfficeName(s *string) *ExamApplicationsPSCreate {
	if s != nil {
		eapc.SetControllingOfficeName(*s)
	}
	return eapc
}

// SetNodalOfficeFacilityID sets the "NodalOfficeFacilityID" field.
func (eapc *ExamApplicationsPSCreate) SetNodalOfficeFacilityID(s string) *ExamApplicationsPSCreate {
	eapc.mutation.SetNodalOfficeFacilityID(s)
	return eapc
}

// SetNillableNodalOfficeFacilityID sets the "NodalOfficeFacilityID" field if the given value is not nil.
func (eapc *ExamApplicationsPSCreate) SetNillableNodalOfficeFacilityID(s *string) *ExamApplicationsPSCreate {
	if s != nil {
		eapc.SetNodalOfficeFacilityID(*s)
	}
	return eapc
}

// SetNodalOfficeName sets the "NodalOfficeName" field.
func (eapc *ExamApplicationsPSCreate) SetNodalOfficeName(s string) *ExamApplicationsPSCreate {
	eapc.mutation.SetNodalOfficeName(s)
	return eapc
}

// SetNillableNodalOfficeName sets the "NodalOfficeName" field if the given value is not nil.
func (eapc *ExamApplicationsPSCreate) SetNillableNodalOfficeName(s *string) *ExamApplicationsPSCreate {
	if s != nil {
		eapc.SetNodalOfficeName(*s)
	}
	return eapc
}

// SetExamCityCenterCode sets the "ExamCityCenterCode" field.
func (eapc *ExamApplicationsPSCreate) SetExamCityCenterCode(i int32) *ExamApplicationsPSCreate {
	eapc.mutation.SetExamCityCenterCode(i)
	return eapc
}

// SetNillableExamCityCenterCode sets the "ExamCityCenterCode" field if the given value is not nil.
func (eapc *ExamApplicationsPSCreate) SetNillableExamCityCenterCode(i *int32) *ExamApplicationsPSCreate {
	if i != nil {
		eapc.SetExamCityCenterCode(*i)
	}
	return eapc
}

// SetCenterFacilityId sets the "CenterFacilityId" field.
func (eapc *ExamApplicationsPSCreate) SetCenterFacilityId(s string) *ExamApplicationsPSCreate {
	eapc.mutation.SetCenterFacilityId(s)
	return eapc
}

// SetNillableCenterFacilityId sets the "CenterFacilityId" field if the given value is not nil.
func (eapc *ExamApplicationsPSCreate) SetNillableCenterFacilityId(s *string) *ExamApplicationsPSCreate {
	if s != nil {
		eapc.SetCenterFacilityId(*s)
	}
	return eapc
}

// SetCentrePreference sets the "CentrePreference" field.
func (eapc *ExamApplicationsPSCreate) SetCentrePreference(s string) *ExamApplicationsPSCreate {
	eapc.mutation.SetCentrePreference(s)
	return eapc
}

// SetNillableCentrePreference sets the "CentrePreference" field if the given value is not nil.
func (eapc *ExamApplicationsPSCreate) SetNillableCentrePreference(s *string) *ExamApplicationsPSCreate {
	if s != nil {
		eapc.SetCentrePreference(*s)
	}
	return eapc
}

// SetSignature sets the "Signature" field.
func (eapc *ExamApplicationsPSCreate) SetSignature(s string) *ExamApplicationsPSCreate {
	eapc.mutation.SetSignature(s)
	return eapc
}

// SetNillableSignature sets the "Signature" field if the given value is not nil.
func (eapc *ExamApplicationsPSCreate) SetNillableSignature(s *string) *ExamApplicationsPSCreate {
	if s != nil {
		eapc.SetSignature(*s)
	}
	return eapc
}

// SetPhoto sets the "Photo" field.
func (eapc *ExamApplicationsPSCreate) SetPhoto(s string) *ExamApplicationsPSCreate {
	eapc.mutation.SetPhoto(s)
	return eapc
}

// SetNillablePhoto sets the "Photo" field if the given value is not nil.
func (eapc *ExamApplicationsPSCreate) SetNillablePhoto(s *string) *ExamApplicationsPSCreate {
	if s != nil {
		eapc.SetPhoto(*s)
	}
	return eapc
}

// SetSignaturePath sets the "SignaturePath" field.
func (eapc *ExamApplicationsPSCreate) SetSignaturePath(s string) *ExamApplicationsPSCreate {
	eapc.mutation.SetSignaturePath(s)
	return eapc
}

// SetNillableSignaturePath sets the "SignaturePath" field if the given value is not nil.
func (eapc *ExamApplicationsPSCreate) SetNillableSignaturePath(s *string) *ExamApplicationsPSCreate {
	if s != nil {
		eapc.SetSignaturePath(*s)
	}
	return eapc
}

// SetPhotoPath sets the "PhotoPath" field.
func (eapc *ExamApplicationsPSCreate) SetPhotoPath(s string) *ExamApplicationsPSCreate {
	eapc.mutation.SetPhotoPath(s)
	return eapc
}

// SetNillablePhotoPath sets the "PhotoPath" field if the given value is not nil.
func (eapc *ExamApplicationsPSCreate) SetNillablePhotoPath(s *string) *ExamApplicationsPSCreate {
	if s != nil {
		eapc.SetPhotoPath(*s)
	}
	return eapc
}

// SetTempHallTicket sets the "TempHallTicket" field.
func (eapc *ExamApplicationsPSCreate) SetTempHallTicket(s string) *ExamApplicationsPSCreate {
	eapc.mutation.SetTempHallTicket(s)
	return eapc
}

// SetNillableTempHallTicket sets the "TempHallTicket" field if the given value is not nil.
func (eapc *ExamApplicationsPSCreate) SetNillableTempHallTicket(s *string) *ExamApplicationsPSCreate {
	if s != nil {
		eapc.SetTempHallTicket(*s)
	}
	return eapc
}

// SetCandidateRemarks sets the "CandidateRemarks" field.
func (eapc *ExamApplicationsPSCreate) SetCandidateRemarks(s string) *ExamApplicationsPSCreate {
	eapc.mutation.SetCandidateRemarks(s)
	return eapc
}

// SetNillableCandidateRemarks sets the "CandidateRemarks" field if the given value is not nil.
func (eapc *ExamApplicationsPSCreate) SetNillableCandidateRemarks(s *string) *ExamApplicationsPSCreate {
	if s != nil {
		eapc.SetCandidateRemarks(*s)
	}
	return eapc
}

// SetVAGeneralRemarks sets the "VAGeneralRemarks" field.
func (eapc *ExamApplicationsPSCreate) SetVAGeneralRemarks(s string) *ExamApplicationsPSCreate {
	eapc.mutation.SetVAGeneralRemarks(s)
	return eapc
}

// SetNillableVAGeneralRemarks sets the "VAGeneralRemarks" field if the given value is not nil.
func (eapc *ExamApplicationsPSCreate) SetNillableVAGeneralRemarks(s *string) *ExamApplicationsPSCreate {
	if s != nil {
		eapc.SetVAGeneralRemarks(*s)
	}
	return eapc
}

// SetCAGeneralRemarks sets the "CAGeneralRemarks" field.
func (eapc *ExamApplicationsPSCreate) SetCAGeneralRemarks(s string) *ExamApplicationsPSCreate {
	eapc.mutation.SetCAGeneralRemarks(s)
	return eapc
}

// SetNillableCAGeneralRemarks sets the "CAGeneralRemarks" field if the given value is not nil.
func (eapc *ExamApplicationsPSCreate) SetNillableCAGeneralRemarks(s *string) *ExamApplicationsPSCreate {
	if s != nil {
		eapc.SetCAGeneralRemarks(*s)
	}
	return eapc
}

// SetNAGeneralRemarks sets the "NAGeneralRemarks" field.
func (eapc *ExamApplicationsPSCreate) SetNAGeneralRemarks(s string) *ExamApplicationsPSCreate {
	eapc.mutation.SetNAGeneralRemarks(s)
	return eapc
}

// SetNillableNAGeneralRemarks sets the "NAGeneralRemarks" field if the given value is not nil.
func (eapc *ExamApplicationsPSCreate) SetNillableNAGeneralRemarks(s *string) *ExamApplicationsPSCreate {
	if s != nil {
		eapc.SetNAGeneralRemarks(*s)
	}
	return eapc
}

// SetApplicationStatus sets the "ApplicationStatus" field.
func (eapc *ExamApplicationsPSCreate) SetApplicationStatus(s string) *ExamApplicationsPSCreate {
	eapc.mutation.SetApplicationStatus(s)
	return eapc
}

// SetNillableApplicationStatus sets the "ApplicationStatus" field if the given value is not nil.
func (eapc *ExamApplicationsPSCreate) SetNillableApplicationStatus(s *string) *ExamApplicationsPSCreate {
	if s != nil {
		eapc.SetApplicationStatus(*s)
	}
	return eapc
}

// SetStatus sets the "Status" field.
func (eapc *ExamApplicationsPSCreate) SetStatus(s string) *ExamApplicationsPSCreate {
	eapc.mutation.SetStatus(s)
	return eapc
}

// SetNillableStatus sets the "Status" field if the given value is not nil.
func (eapc *ExamApplicationsPSCreate) SetNillableStatus(s *string) *ExamApplicationsPSCreate {
	if s != nil {
		eapc.SetStatus(*s)
	}
	return eapc
}

// SetVAUserId sets the "VA_UserId" field.
func (eapc *ExamApplicationsPSCreate) SetVAUserId(i int32) *ExamApplicationsPSCreate {
	eapc.mutation.SetVAUserId(i)
	return eapc
}

// SetNillableVAUserId sets the "VA_UserId" field if the given value is not nil.
func (eapc *ExamApplicationsPSCreate) SetNillableVAUserId(i *int32) *ExamApplicationsPSCreate {
	if i != nil {
		eapc.SetVAUserId(*i)
	}
	return eapc
}

// SetVAUserName sets the "VA_UserName" field.
func (eapc *ExamApplicationsPSCreate) SetVAUserName(s string) *ExamApplicationsPSCreate {
	eapc.mutation.SetVAUserName(s)
	return eapc
}

// SetNillableVAUserName sets the "VA_UserName" field if the given value is not nil.
func (eapc *ExamApplicationsPSCreate) SetNillableVAUserName(s *string) *ExamApplicationsPSCreate {
	if s != nil {
		eapc.SetVAUserName(*s)
	}
	return eapc
}

// SetVAEmployeeID sets the "VA_EmployeeID" field.
func (eapc *ExamApplicationsPSCreate) SetVAEmployeeID(s string) *ExamApplicationsPSCreate {
	eapc.mutation.SetVAEmployeeID(s)
	return eapc
}

// SetNillableVAEmployeeID sets the "VA_EmployeeID" field if the given value is not nil.
func (eapc *ExamApplicationsPSCreate) SetNillableVAEmployeeID(s *string) *ExamApplicationsPSCreate {
	if s != nil {
		eapc.SetVAEmployeeID(*s)
	}
	return eapc
}

// SetVAEmployeeDesignation sets the "VA_EmployeeDesignation" field.
func (eapc *ExamApplicationsPSCreate) SetVAEmployeeDesignation(s string) *ExamApplicationsPSCreate {
	eapc.mutation.SetVAEmployeeDesignation(s)
	return eapc
}

// SetNillableVAEmployeeDesignation sets the "VA_EmployeeDesignation" field if the given value is not nil.
func (eapc *ExamApplicationsPSCreate) SetNillableVAEmployeeDesignation(s *string) *ExamApplicationsPSCreate {
	if s != nil {
		eapc.SetVAEmployeeDesignation(*s)
	}
	return eapc
}

// SetVARemarks sets the "VA_Remarks" field.
func (eapc *ExamApplicationsPSCreate) SetVARemarks(s string) *ExamApplicationsPSCreate {
	eapc.mutation.SetVARemarks(s)
	return eapc
}

// SetNillableVARemarks sets the "VA_Remarks" field if the given value is not nil.
func (eapc *ExamApplicationsPSCreate) SetNillableVARemarks(s *string) *ExamApplicationsPSCreate {
	if s != nil {
		eapc.SetVARemarks(*s)
	}
	return eapc
}

// SetVADate sets the "VA_Date" field.
func (eapc *ExamApplicationsPSCreate) SetVADate(t time.Time) *ExamApplicationsPSCreate {
	eapc.mutation.SetVADate(t)
	return eapc
}

// SetNillableVADate sets the "VA_Date" field if the given value is not nil.
func (eapc *ExamApplicationsPSCreate) SetNillableVADate(t *time.Time) *ExamApplicationsPSCreate {
	if t != nil {
		eapc.SetVADate(*t)
	}
	return eapc
}

// SetCAUserId sets the "CA_UserId" field.
func (eapc *ExamApplicationsPSCreate) SetCAUserId(i int32) *ExamApplicationsPSCreate {
	eapc.mutation.SetCAUserId(i)
	return eapc
}

// SetNillableCAUserId sets the "CA_UserId" field if the given value is not nil.
func (eapc *ExamApplicationsPSCreate) SetNillableCAUserId(i *int32) *ExamApplicationsPSCreate {
	if i != nil {
		eapc.SetCAUserId(*i)
	}
	return eapc
}

// SetCAUserName sets the "CA_UserName" field.
func (eapc *ExamApplicationsPSCreate) SetCAUserName(s string) *ExamApplicationsPSCreate {
	eapc.mutation.SetCAUserName(s)
	return eapc
}

// SetNillableCAUserName sets the "CA_UserName" field if the given value is not nil.
func (eapc *ExamApplicationsPSCreate) SetNillableCAUserName(s *string) *ExamApplicationsPSCreate {
	if s != nil {
		eapc.SetCAUserName(*s)
	}
	return eapc
}

// SetCAEmployeeID sets the "CA_EmployeeID" field.
func (eapc *ExamApplicationsPSCreate) SetCAEmployeeID(s string) *ExamApplicationsPSCreate {
	eapc.mutation.SetCAEmployeeID(s)
	return eapc
}

// SetNillableCAEmployeeID sets the "CA_EmployeeID" field if the given value is not nil.
func (eapc *ExamApplicationsPSCreate) SetNillableCAEmployeeID(s *string) *ExamApplicationsPSCreate {
	if s != nil {
		eapc.SetCAEmployeeID(*s)
	}
	return eapc
}

// SetCAEmployeeDesignation sets the "CA_EmployeeDesignation" field.
func (eapc *ExamApplicationsPSCreate) SetCAEmployeeDesignation(s string) *ExamApplicationsPSCreate {
	eapc.mutation.SetCAEmployeeDesignation(s)
	return eapc
}

// SetNillableCAEmployeeDesignation sets the "CA_EmployeeDesignation" field if the given value is not nil.
func (eapc *ExamApplicationsPSCreate) SetNillableCAEmployeeDesignation(s *string) *ExamApplicationsPSCreate {
	if s != nil {
		eapc.SetCAEmployeeDesignation(*s)
	}
	return eapc
}

// SetCARemarks sets the "CA_Remarks" field.
func (eapc *ExamApplicationsPSCreate) SetCARemarks(s string) *ExamApplicationsPSCreate {
	eapc.mutation.SetCARemarks(s)
	return eapc
}

// SetNillableCARemarks sets the "CA_Remarks" field if the given value is not nil.
func (eapc *ExamApplicationsPSCreate) SetNillableCARemarks(s *string) *ExamApplicationsPSCreate {
	if s != nil {
		eapc.SetCARemarks(*s)
	}
	return eapc
}

// SetCADate sets the "CA_Date" field.
func (eapc *ExamApplicationsPSCreate) SetCADate(t time.Time) *ExamApplicationsPSCreate {
	eapc.mutation.SetCADate(t)
	return eapc
}

// SetNillableCADate sets the "CA_Date" field if the given value is not nil.
func (eapc *ExamApplicationsPSCreate) SetNillableCADate(t *time.Time) *ExamApplicationsPSCreate {
	if t != nil {
		eapc.SetCADate(*t)
	}
	return eapc
}

// SetNAUserId sets the "NA_UserId" field.
func (eapc *ExamApplicationsPSCreate) SetNAUserId(i int32) *ExamApplicationsPSCreate {
	eapc.mutation.SetNAUserId(i)
	return eapc
}

// SetNillableNAUserId sets the "NA_UserId" field if the given value is not nil.
func (eapc *ExamApplicationsPSCreate) SetNillableNAUserId(i *int32) *ExamApplicationsPSCreate {
	if i != nil {
		eapc.SetNAUserId(*i)
	}
	return eapc
}

// SetNAUserName sets the "NA_UserName" field.
func (eapc *ExamApplicationsPSCreate) SetNAUserName(s string) *ExamApplicationsPSCreate {
	eapc.mutation.SetNAUserName(s)
	return eapc
}

// SetNillableNAUserName sets the "NA_UserName" field if the given value is not nil.
func (eapc *ExamApplicationsPSCreate) SetNillableNAUserName(s *string) *ExamApplicationsPSCreate {
	if s != nil {
		eapc.SetNAUserName(*s)
	}
	return eapc
}

// SetNAEmployeeID sets the "NA_EmployeeID" field.
func (eapc *ExamApplicationsPSCreate) SetNAEmployeeID(s string) *ExamApplicationsPSCreate {
	eapc.mutation.SetNAEmployeeID(s)
	return eapc
}

// SetNillableNAEmployeeID sets the "NA_EmployeeID" field if the given value is not nil.
func (eapc *ExamApplicationsPSCreate) SetNillableNAEmployeeID(s *string) *ExamApplicationsPSCreate {
	if s != nil {
		eapc.SetNAEmployeeID(*s)
	}
	return eapc
}

// SetNAEmployeeDesignation sets the "NA_EmployeeDesignation" field.
func (eapc *ExamApplicationsPSCreate) SetNAEmployeeDesignation(s string) *ExamApplicationsPSCreate {
	eapc.mutation.SetNAEmployeeDesignation(s)
	return eapc
}

// SetNillableNAEmployeeDesignation sets the "NA_EmployeeDesignation" field if the given value is not nil.
func (eapc *ExamApplicationsPSCreate) SetNillableNAEmployeeDesignation(s *string) *ExamApplicationsPSCreate {
	if s != nil {
		eapc.SetNAEmployeeDesignation(*s)
	}
	return eapc
}

// SetNARemarks sets the "NA_Remarks" field.
func (eapc *ExamApplicationsPSCreate) SetNARemarks(s string) *ExamApplicationsPSCreate {
	eapc.mutation.SetNARemarks(s)
	return eapc
}

// SetNillableNARemarks sets the "NA_Remarks" field if the given value is not nil.
func (eapc *ExamApplicationsPSCreate) SetNillableNARemarks(s *string) *ExamApplicationsPSCreate {
	if s != nil {
		eapc.SetNARemarks(*s)
	}
	return eapc
}

// SetNADate sets the "NA_Date" field.
func (eapc *ExamApplicationsPSCreate) SetNADate(t time.Time) *ExamApplicationsPSCreate {
	eapc.mutation.SetNADate(t)
	return eapc
}

// SetNillableNADate sets the "NA_Date" field if the given value is not nil.
func (eapc *ExamApplicationsPSCreate) SetNillableNADate(t *time.Time) *ExamApplicationsPSCreate {
	if t != nil {
		eapc.SetNADate(*t)
	}
	return eapc
}

// SetAppliactionRemarks sets the "AppliactionRemarks" field.
func (eapc *ExamApplicationsPSCreate) SetAppliactionRemarks(s string) *ExamApplicationsPSCreate {
	eapc.mutation.SetAppliactionRemarks(s)
	return eapc
}

// SetNillableAppliactionRemarks sets the "AppliactionRemarks" field if the given value is not nil.
func (eapc *ExamApplicationsPSCreate) SetNillableAppliactionRemarks(s *string) *ExamApplicationsPSCreate {
	if s != nil {
		eapc.SetAppliactionRemarks(*s)
	}
	return eapc
}

// SetCadrePreferences sets the "CadrePreferences" field.
func (eapc *ExamApplicationsPSCreate) SetCadrePreferences(i []interface{}) *ExamApplicationsPSCreate {
	eapc.mutation.SetCadrePreferences(i)
	return eapc
}

// SetCAPreviousRemarks sets the "CAPreviousRemarks" field.
func (eapc *ExamApplicationsPSCreate) SetCAPreviousRemarks(s string) *ExamApplicationsPSCreate {
	eapc.mutation.SetCAPreviousRemarks(s)
	return eapc
}

// SetNillableCAPreviousRemarks sets the "CAPreviousRemarks" field if the given value is not nil.
func (eapc *ExamApplicationsPSCreate) SetNillableCAPreviousRemarks(s *string) *ExamApplicationsPSCreate {
	if s != nil {
		eapc.SetCAPreviousRemarks(*s)
	}
	return eapc
}

// SetPunishmentStatus sets the "PunishmentStatus" field.
func (eapc *ExamApplicationsPSCreate) SetPunishmentStatus(b bool) *ExamApplicationsPSCreate {
	eapc.mutation.SetPunishmentStatus(b)
	return eapc
}

// SetNillablePunishmentStatus sets the "PunishmentStatus" field if the given value is not nil.
func (eapc *ExamApplicationsPSCreate) SetNillablePunishmentStatus(b *bool) *ExamApplicationsPSCreate {
	if b != nil {
		eapc.SetPunishmentStatus(*b)
	}
	return eapc
}

// SetDisciplinaryCaseStatus sets the "DisciplinaryCaseStatus" field.
func (eapc *ExamApplicationsPSCreate) SetDisciplinaryCaseStatus(b bool) *ExamApplicationsPSCreate {
	eapc.mutation.SetDisciplinaryCaseStatus(b)
	return eapc
}

// SetNillableDisciplinaryCaseStatus sets the "DisciplinaryCaseStatus" field if the given value is not nil.
func (eapc *ExamApplicationsPSCreate) SetNillableDisciplinaryCaseStatus(b *bool) *ExamApplicationsPSCreate {
	if b != nil {
		eapc.SetDisciplinaryCaseStatus(*b)
	}
	return eapc
}

// SetGenerateHallTicketFlag sets the "GenerateHallTicketFlag" field.
func (eapc *ExamApplicationsPSCreate) SetGenerateHallTicketFlag(b bool) *ExamApplicationsPSCreate {
	eapc.mutation.SetGenerateHallTicketFlag(b)
	return eapc
}

// SetNillableGenerateHallTicketFlag sets the "GenerateHallTicketFlag" field if the given value is not nil.
func (eapc *ExamApplicationsPSCreate) SetNillableGenerateHallTicketFlag(b *bool) *ExamApplicationsPSCreate {
	if b != nil {
		eapc.SetGenerateHallTicketFlag(*b)
	}
	return eapc
}

// SetHallTicketNumber sets the "HallTicketNumber" field.
func (eapc *ExamApplicationsPSCreate) SetHallTicketNumber(s string) *ExamApplicationsPSCreate {
	eapc.mutation.SetHallTicketNumber(s)
	return eapc
}

// SetNillableHallTicketNumber sets the "HallTicketNumber" field if the given value is not nil.
func (eapc *ExamApplicationsPSCreate) SetNillableHallTicketNumber(s *string) *ExamApplicationsPSCreate {
	if s != nil {
		eapc.SetHallTicketNumber(*s)
	}
	return eapc
}

// SetHallTicketGeneratedFlag sets the "HallTicketGeneratedFlag" field.
func (eapc *ExamApplicationsPSCreate) SetHallTicketGeneratedFlag(b bool) *ExamApplicationsPSCreate {
	eapc.mutation.SetHallTicketGeneratedFlag(b)
	return eapc
}

// SetNillableHallTicketGeneratedFlag sets the "HallTicketGeneratedFlag" field if the given value is not nil.
func (eapc *ExamApplicationsPSCreate) SetNillableHallTicketGeneratedFlag(b *bool) *ExamApplicationsPSCreate {
	if b != nil {
		eapc.SetHallTicketGeneratedFlag(*b)
	}
	return eapc
}

// SetGenerateHallTicketFlagByNO sets the "GenerateHallTicketFlagByNO" field.
func (eapc *ExamApplicationsPSCreate) SetGenerateHallTicketFlagByNO(b bool) *ExamApplicationsPSCreate {
	eapc.mutation.SetGenerateHallTicketFlagByNO(b)
	return eapc
}

// SetNillableGenerateHallTicketFlagByNO sets the "GenerateHallTicketFlagByNO" field if the given value is not nil.
func (eapc *ExamApplicationsPSCreate) SetNillableGenerateHallTicketFlagByNO(b *bool) *ExamApplicationsPSCreate {
	if b != nil {
		eapc.SetGenerateHallTicketFlagByNO(*b)
	}
	return eapc
}

// SetHallTicketGeneratedDate sets the "HallTicketGeneratedDate" field.
func (eapc *ExamApplicationsPSCreate) SetHallTicketGeneratedDate(t time.Time) *ExamApplicationsPSCreate {
	eapc.mutation.SetHallTicketGeneratedDate(t)
	return eapc
}

// SetNillableHallTicketGeneratedDate sets the "HallTicketGeneratedDate" field if the given value is not nil.
func (eapc *ExamApplicationsPSCreate) SetNillableHallTicketGeneratedDate(t *time.Time) *ExamApplicationsPSCreate {
	if t != nil {
		eapc.SetHallTicketGeneratedDate(*t)
	}
	return eapc
}

// SetTemporaryHallTicket sets the "TemporaryHallTicket" field.
func (eapc *ExamApplicationsPSCreate) SetTemporaryHallTicket(s string) *ExamApplicationsPSCreate {
	eapc.mutation.SetTemporaryHallTicket(s)
	return eapc
}

// SetNillableTemporaryHallTicket sets the "TemporaryHallTicket" field if the given value is not nil.
func (eapc *ExamApplicationsPSCreate) SetNillableTemporaryHallTicket(s *string) *ExamApplicationsPSCreate {
	if s != nil {
		eapc.SetTemporaryHallTicket(*s)
	}
	return eapc
}

// SetOptionUsed sets the "OptionUsed" field.
func (eapc *ExamApplicationsPSCreate) SetOptionUsed(s string) *ExamApplicationsPSCreate {
	eapc.mutation.SetOptionUsed(s)
	return eapc
}

// SetNillableOptionUsed sets the "OptionUsed" field if the given value is not nil.
func (eapc *ExamApplicationsPSCreate) SetNillableOptionUsed(s *string) *ExamApplicationsPSCreate {
	if s != nil {
		eapc.SetOptionUsed(*s)
	}
	return eapc
}

// SetRemarks sets the "Remarks" field.
func (eapc *ExamApplicationsPSCreate) SetRemarks(s string) *ExamApplicationsPSCreate {
	eapc.mutation.SetRemarks(s)
	return eapc
}

// SetNillableRemarks sets the "Remarks" field if the given value is not nil.
func (eapc *ExamApplicationsPSCreate) SetNillableRemarks(s *string) *ExamApplicationsPSCreate {
	if s != nil {
		eapc.SetRemarks(*s)
	}
	return eapc
}

// SetCadre sets the "Cadre" field.
func (eapc *ExamApplicationsPSCreate) SetCadre(s string) *ExamApplicationsPSCreate {
	eapc.mutation.SetCadre(s)
	return eapc
}

// SetNillableCadre sets the "Cadre" field if the given value is not nil.
func (eapc *ExamApplicationsPSCreate) SetNillableCadre(s *string) *ExamApplicationsPSCreate {
	if s != nil {
		eapc.SetCadre(*s)
	}
	return eapc
}

// SetEmployeePost sets the "EmployeePost" field.
func (eapc *ExamApplicationsPSCreate) SetEmployeePost(s string) *ExamApplicationsPSCreate {
	eapc.mutation.SetEmployeePost(s)
	return eapc
}

// SetNillableEmployeePost sets the "EmployeePost" field if the given value is not nil.
func (eapc *ExamApplicationsPSCreate) SetNillableEmployeePost(s *string) *ExamApplicationsPSCreate {
	if s != nil {
		eapc.SetEmployeePost(*s)
	}
	return eapc
}

// SetDOJInEligiblePost sets the "DOJInEligiblePost" field.
func (eapc *ExamApplicationsPSCreate) SetDOJInEligiblePost(s string) *ExamApplicationsPSCreate {
	eapc.mutation.SetDOJInEligiblePost(s)
	return eapc
}

// SetNillableDOJInEligiblePost sets the "DOJInEligiblePost" field if the given value is not nil.
func (eapc *ExamApplicationsPSCreate) SetNillableDOJInEligiblePost(s *string) *ExamApplicationsPSCreate {
	if s != nil {
		eapc.SetDOJInEligiblePost(*s)
	}
	return eapc
}

// SetDivisionPreferences sets the "DivisionPreferences" field.
func (eapc *ExamApplicationsPSCreate) SetDivisionPreferences(i []interface{}) *ExamApplicationsPSCreate {
	eapc.mutation.SetDivisionPreferences(i)
	return eapc
}

// SetRoleUserCode sets the "RoleUserCode" field.
func (eapc *ExamApplicationsPSCreate) SetRoleUserCode(i int32) *ExamApplicationsPSCreate {
	eapc.mutation.SetRoleUserCode(i)
	return eapc
}

// SetNillableRoleUserCode sets the "RoleUserCode" field if the given value is not nil.
func (eapc *ExamApplicationsPSCreate) SetNillableRoleUserCode(i *int32) *ExamApplicationsPSCreate {
	if i != nil {
		eapc.SetRoleUserCode(*i)
	}
	return eapc
}

// SetCircleSID sets the "CircleSID" field.
func (eapc *ExamApplicationsPSCreate) SetCircleSID(i int32) *ExamApplicationsPSCreate {
	eapc.mutation.SetCircleSID(i)
	return eapc
}

// SetNillableCircleSID sets the "CircleSID" field if the given value is not nil.
func (eapc *ExamApplicationsPSCreate) SetNillableCircleSID(i *int32) *ExamApplicationsPSCreate {
	if i != nil {
		eapc.SetCircleSID(*i)
	}
	return eapc
}

// SetFacilityName sets the "FacilityName" field.
func (eapc *ExamApplicationsPSCreate) SetFacilityName(s string) *ExamApplicationsPSCreate {
	eapc.mutation.SetFacilityName(s)
	return eapc
}

// SetNillableFacilityName sets the "FacilityName" field if the given value is not nil.
func (eapc *ExamApplicationsPSCreate) SetNillableFacilityName(s *string) *ExamApplicationsPSCreate {
	if s != nil {
		eapc.SetFacilityName(*s)
	}
	return eapc
}

// SetServiceLength sets the "ServiceLength" field.
func (eapc *ExamApplicationsPSCreate) SetServiceLength(i []interface{}) *ExamApplicationsPSCreate {
	eapc.mutation.SetServiceLength(i)
	return eapc
}

// SetNonQualifyingService sets the "NonQualifyingService" field.
func (eapc *ExamApplicationsPSCreate) SetNonQualifyingService(i []interface{}) *ExamApplicationsPSCreate {
	eapc.mutation.SetNonQualifyingService(i)
	return eapc
}

// SetDCInPresentCadre sets the "DCInPresentCadre" field.
func (eapc *ExamApplicationsPSCreate) SetDCInPresentCadre(s string) *ExamApplicationsPSCreate {
	eapc.mutation.SetDCInPresentCadre(s)
	return eapc
}

// SetNillableDCInPresentCadre sets the "DCInPresentCadre" field if the given value is not nil.
func (eapc *ExamApplicationsPSCreate) SetNillableDCInPresentCadre(s *string) *ExamApplicationsPSCreate {
	if s != nil {
		eapc.SetDCInPresentCadre(*s)
	}
	return eapc
}

// SetCenterId sets the "CenterId" field.
func (eapc *ExamApplicationsPSCreate) SetCenterId(i int32) *ExamApplicationsPSCreate {
	eapc.mutation.SetCenterId(i)
	return eapc
}

// SetNillableCenterId sets the "CenterId" field if the given value is not nil.
func (eapc *ExamApplicationsPSCreate) SetNillableCenterId(i *int32) *ExamApplicationsPSCreate {
	if i != nil {
		eapc.SetCenterId(*i)
	}
	return eapc
}

// SetCenterCode sets the "CenterCode" field.
func (eapc *ExamApplicationsPSCreate) SetCenterCode(i int32) *ExamApplicationsPSCreate {
	eapc.mutation.SetCenterCode(i)
	return eapc
}

// SetNillableCenterCode sets the "CenterCode" field if the given value is not nil.
func (eapc *ExamApplicationsPSCreate) SetNillableCenterCode(i *int32) *ExamApplicationsPSCreate {
	if i != nil {
		eapc.SetCenterCode(*i)
	}
	return eapc
}

// SetClaimingQualifyingService sets the "ClaimingQualifyingService" field.
func (eapc *ExamApplicationsPSCreate) SetClaimingQualifyingService(s string) *ExamApplicationsPSCreate {
	eapc.mutation.SetClaimingQualifyingService(s)
	return eapc
}

// SetNillableClaimingQualifyingService sets the "ClaimingQualifyingService" field if the given value is not nil.
func (eapc *ExamApplicationsPSCreate) SetNillableClaimingQualifyingService(s *string) *ExamApplicationsPSCreate {
	if s != nil {
		eapc.SetClaimingQualifyingService(*s)
	}
	return eapc
}

// SetDeputationOfficePincode sets the "DeputationOfficePincode" field.
func (eapc *ExamApplicationsPSCreate) SetDeputationOfficePincode(s string) *ExamApplicationsPSCreate {
	eapc.mutation.SetDeputationOfficePincode(s)
	return eapc
}

// SetNillableDeputationOfficePincode sets the "DeputationOfficePincode" field if the given value is not nil.
func (eapc *ExamApplicationsPSCreate) SetNillableDeputationOfficePincode(s *string) *ExamApplicationsPSCreate {
	if s != nil {
		eapc.SetDeputationOfficePincode(*s)
	}
	return eapc
}

// SetRecommendedStatus sets the "RecommendedStatus" field.
func (eapc *ExamApplicationsPSCreate) SetRecommendedStatus(s string) *ExamApplicationsPSCreate {
	eapc.mutation.SetRecommendedStatus(s)
	return eapc
}

// SetNillableRecommendedStatus sets the "RecommendedStatus" field if the given value is not nil.
func (eapc *ExamApplicationsPSCreate) SetNillableRecommendedStatus(s *string) *ExamApplicationsPSCreate {
	if s != nil {
		eapc.SetRecommendedStatus(*s)
	}
	return eapc
}

// SetUpdatedAt sets the "UpdatedAt" field.
func (eapc *ExamApplicationsPSCreate) SetUpdatedAt(t time.Time) *ExamApplicationsPSCreate {
	eapc.mutation.SetUpdatedAt(t)
	return eapc
}

// SetNillableUpdatedAt sets the "UpdatedAt" field if the given value is not nil.
func (eapc *ExamApplicationsPSCreate) SetNillableUpdatedAt(t *time.Time) *ExamApplicationsPSCreate {
	if t != nil {
		eapc.SetUpdatedAt(*t)
	}
	return eapc
}

// SetUpdatedBy sets the "UpdatedBy" field.
func (eapc *ExamApplicationsPSCreate) SetUpdatedBy(s string) *ExamApplicationsPSCreate {
	eapc.mutation.SetUpdatedBy(s)
	return eapc
}

// SetNillableUpdatedBy sets the "UpdatedBy" field if the given value is not nil.
func (eapc *ExamApplicationsPSCreate) SetNillableUpdatedBy(s *string) *ExamApplicationsPSCreate {
	if s != nil {
		eapc.SetUpdatedBy(*s)
	}
	return eapc
}

// SetApplicationWdlDate sets the "ApplicationWdlDate" field.
func (eapc *ExamApplicationsPSCreate) SetApplicationWdlDate(t time.Time) *ExamApplicationsPSCreate {
	eapc.mutation.SetApplicationWdlDate(t)
	return eapc
}

// SetNillableApplicationWdlDate sets the "ApplicationWdlDate" field if the given value is not nil.
func (eapc *ExamApplicationsPSCreate) SetNillableApplicationWdlDate(t *time.Time) *ExamApplicationsPSCreate {
	if t != nil {
		eapc.SetApplicationWdlDate(*t)
	}
	return eapc
}

// SetExamCenterHall sets the "ExamCenterHall" field.
func (eapc *ExamApplicationsPSCreate) SetExamCenterHall(i int32) *ExamApplicationsPSCreate {
	eapc.mutation.SetExamCenterHall(i)
	return eapc
}

// SetNillableExamCenterHall sets the "ExamCenterHall" field if the given value is not nil.
func (eapc *ExamApplicationsPSCreate) SetNillableExamCenterHall(i *int32) *ExamApplicationsPSCreate {
	if i != nil {
		eapc.SetExamCenterHall(*i)
	}
	return eapc
}

// SetHallName sets the "HallName" field.
func (eapc *ExamApplicationsPSCreate) SetHallName(s string) *ExamApplicationsPSCreate {
	eapc.mutation.SetHallName(s)
	return eapc
}

// SetNillableHallName sets the "HallName" field if the given value is not nil.
func (eapc *ExamApplicationsPSCreate) SetNillableHallName(s *string) *ExamApplicationsPSCreate {
	if s != nil {
		eapc.SetHallName(*s)
	}
	return eapc
}

// SetReportingOfficeID sets the "ReportingOfficeID" field.
func (eapc *ExamApplicationsPSCreate) SetReportingOfficeID(s string) *ExamApplicationsPSCreate {
	eapc.mutation.SetReportingOfficeID(s)
	return eapc
}

// SetNillableReportingOfficeID sets the "ReportingOfficeID" field if the given value is not nil.
func (eapc *ExamApplicationsPSCreate) SetNillableReportingOfficeID(s *string) *ExamApplicationsPSCreate {
	if s != nil {
		eapc.SetReportingOfficeID(*s)
	}
	return eapc
}

// SetID sets the "id" field.
func (eapc *ExamApplicationsPSCreate) SetID(i int64) *ExamApplicationsPSCreate {
	eapc.mutation.SetID(i)
	return eapc
}

// AddUsersPSRefIDs adds the "UsersPSRef" edge to the UserMaster entity by IDs.
func (eapc *ExamApplicationsPSCreate) AddUsersPSRefIDs(ids ...int64) *ExamApplicationsPSCreate {
	eapc.mutation.AddUsersPSRefIDs(ids...)
	return eapc
}

// AddUsersPSRef adds the "UsersPSRef" edges to the UserMaster entity.
func (eapc *ExamApplicationsPSCreate) AddUsersPSRef(u ...*UserMaster) *ExamApplicationsPSCreate {
	ids := make([]int64, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return eapc.AddUsersPSRefIDs(ids...)
}

// AddCadrePrefPSRefIDs adds the "CadrePrefPS_Ref" edge to the Cadre_Choice_PS entity by IDs.
func (eapc *ExamApplicationsPSCreate) AddCadrePrefPSRefIDs(ids ...int32) *ExamApplicationsPSCreate {
	eapc.mutation.AddCadrePrefPSRefIDs(ids...)
	return eapc
}

// AddCadrePrefPSRef adds the "CadrePrefPS_Ref" edges to the Cadre_Choice_PS entity.
func (eapc *ExamApplicationsPSCreate) AddCadrePrefPSRef(c ...*Cadre_Choice_PS) *ExamApplicationsPSCreate {
	ids := make([]int32, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return eapc.AddCadrePrefPSRefIDs(ids...)
}

// AddCirclePrefRefPSIDs adds the "CirclePrefRefPS" edge to the PlaceOfPreferencePS entity by IDs.
func (eapc *ExamApplicationsPSCreate) AddCirclePrefRefPSIDs(ids ...int32) *ExamApplicationsPSCreate {
	eapc.mutation.AddCirclePrefRefPSIDs(ids...)
	return eapc
}

// AddCirclePrefRefPS adds the "CirclePrefRefPS" edges to the PlaceOfPreferencePS entity.
func (eapc *ExamApplicationsPSCreate) AddCirclePrefRefPS(p ...*PlaceOfPreferencePS) *ExamApplicationsPSCreate {
	ids := make([]int32, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return eapc.AddCirclePrefRefPSIDs(ids...)
}

// AddPSApplicationsRefIDs adds the "PSApplicationsRef" edge to the RecommendationsPSApplications entity by IDs.
func (eapc *ExamApplicationsPSCreate) AddPSApplicationsRefIDs(ids ...int64) *ExamApplicationsPSCreate {
	eapc.mutation.AddPSApplicationsRefIDs(ids...)
	return eapc
}

// AddPSApplicationsRef adds the "PSApplicationsRef" edges to the RecommendationsPSApplications entity.
func (eapc *ExamApplicationsPSCreate) AddPSApplicationsRef(r ...*RecommendationsPSApplications) *ExamApplicationsPSCreate {
	ids := make([]int64, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return eapc.AddPSApplicationsRefIDs(ids...)
}

// SetExamsPSID sets the "ExamsPS" edge to the Exam entity by ID.
func (eapc *ExamApplicationsPSCreate) SetExamsPSID(id int32) *ExamApplicationsPSCreate {
	eapc.mutation.SetExamsPSID(id)
	return eapc
}

// SetNillableExamsPSID sets the "ExamsPS" edge to the Exam entity by ID if the given value is not nil.
func (eapc *ExamApplicationsPSCreate) SetNillableExamsPSID(id *int32) *ExamApplicationsPSCreate {
	if id != nil {
		eapc = eapc.SetExamsPSID(*id)
	}
	return eapc
}

// SetExamsPS sets the "ExamsPS" edge to the Exam entity.
func (eapc *ExamApplicationsPSCreate) SetExamsPS(e *Exam) *ExamApplicationsPSCreate {
	return eapc.SetExamsPSID(e.ID)
}

// SetRoleusersID sets the "roleusers" edge to the RoleMaster entity by ID.
func (eapc *ExamApplicationsPSCreate) SetRoleusersID(id int32) *ExamApplicationsPSCreate {
	eapc.mutation.SetRoleusersID(id)
	return eapc
}

// SetNillableRoleusersID sets the "roleusers" edge to the RoleMaster entity by ID if the given value is not nil.
func (eapc *ExamApplicationsPSCreate) SetNillableRoleusersID(id *int32) *ExamApplicationsPSCreate {
	if id != nil {
		eapc = eapc.SetRoleusersID(*id)
	}
	return eapc
}

// SetRoleusers sets the "roleusers" edge to the RoleMaster entity.
func (eapc *ExamApplicationsPSCreate) SetRoleusers(r *RoleMaster) *ExamApplicationsPSCreate {
	return eapc.SetRoleusersID(r.ID)
}

// SetExamcitycenterID sets the "examcitycenter" edge to the ExamCityCenter entity by ID.
func (eapc *ExamApplicationsPSCreate) SetExamcitycenterID(id int32) *ExamApplicationsPSCreate {
	eapc.mutation.SetExamcitycenterID(id)
	return eapc
}

// SetNillableExamcitycenterID sets the "examcitycenter" edge to the ExamCityCenter entity by ID if the given value is not nil.
func (eapc *ExamApplicationsPSCreate) SetNillableExamcitycenterID(id *int32) *ExamApplicationsPSCreate {
	if id != nil {
		eapc = eapc.SetExamcitycenterID(*id)
	}
	return eapc
}

// SetExamcitycenter sets the "examcitycenter" edge to the ExamCityCenter entity.
func (eapc *ExamApplicationsPSCreate) SetExamcitycenter(e *ExamCityCenter) *ExamApplicationsPSCreate {
	return eapc.SetExamcitycenterID(e.ID)
}

// SetPSExamCentresID sets the "PSExamCentres" edge to the Center entity by ID.
func (eapc *ExamApplicationsPSCreate) SetPSExamCentresID(id int32) *ExamApplicationsPSCreate {
	eapc.mutation.SetPSExamCentresID(id)
	return eapc
}

// SetNillablePSExamCentresID sets the "PSExamCentres" edge to the Center entity by ID if the given value is not nil.
func (eapc *ExamApplicationsPSCreate) SetNillablePSExamCentresID(id *int32) *ExamApplicationsPSCreate {
	if id != nil {
		eapc = eapc.SetPSExamCentresID(*id)
	}
	return eapc
}

// SetPSExamCentres sets the "PSExamCentres" edge to the Center entity.
func (eapc *ExamApplicationsPSCreate) SetPSExamCentres(c *Center) *ExamApplicationsPSCreate {
	return eapc.SetPSExamCentresID(c.ID)
}

// SetCircleRefsID sets the "CircleRefs" edge to the CircleSummaryForNO entity by ID.
func (eapc *ExamApplicationsPSCreate) SetCircleRefsID(id int32) *ExamApplicationsPSCreate {
	eapc.mutation.SetCircleRefsID(id)
	return eapc
}

// SetNillableCircleRefsID sets the "CircleRefs" edge to the CircleSummaryForNO entity by ID if the given value is not nil.
func (eapc *ExamApplicationsPSCreate) SetNillableCircleRefsID(id *int32) *ExamApplicationsPSCreate {
	if id != nil {
		eapc = eapc.SetCircleRefsID(*id)
	}
	return eapc
}

// SetCircleRefs sets the "CircleRefs" edge to the CircleSummaryForNO entity.
func (eapc *ExamApplicationsPSCreate) SetCircleRefs(c *CircleSummaryForNO) *ExamApplicationsPSCreate {
	return eapc.SetCircleRefsID(c.ID)
}

// AddLogDatumIDs adds the "LogData" edge to the Logs entity by IDs.
func (eapc *ExamApplicationsPSCreate) AddLogDatumIDs(ids ...int64) *ExamApplicationsPSCreate {
	eapc.mutation.AddLogDatumIDs(ids...)
	return eapc
}

// AddLogData adds the "LogData" edges to the Logs entity.
func (eapc *ExamApplicationsPSCreate) AddLogData(l ...*Logs) *ExamApplicationsPSCreate {
	ids := make([]int64, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return eapc.AddLogDatumIDs(ids...)
}

// Mutation returns the ExamApplicationsPSMutation object of the builder.
func (eapc *ExamApplicationsPSCreate) Mutation() *ExamApplicationsPSMutation {
	return eapc.mutation
}

// Save creates the Exam_Applications_PS in the database.
func (eapc *ExamApplicationsPSCreate) Save(ctx context.Context) (*Exam_Applications_PS, error) {
	eapc.defaults()
	return withHooks(ctx, eapc.sqlSave, eapc.mutation, eapc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (eapc *ExamApplicationsPSCreate) SaveX(ctx context.Context) *Exam_Applications_PS {
	v, err := eapc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (eapc *ExamApplicationsPSCreate) Exec(ctx context.Context) error {
	_, err := eapc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eapc *ExamApplicationsPSCreate) ExecX(ctx context.Context) {
	if err := eapc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (eapc *ExamApplicationsPSCreate) defaults() {
	if _, ok := eapc.mutation.ExamCityCenterCode(); !ok {
		v := exam_applications_ps.DefaultExamCityCenterCode
		eapc.mutation.SetExamCityCenterCode(v)
	}
	if _, ok := eapc.mutation.Status(); !ok {
		v := exam_applications_ps.DefaultStatus
		eapc.mutation.SetStatus(v)
	}
	if _, ok := eapc.mutation.PunishmentStatus(); !ok {
		v := exam_applications_ps.DefaultPunishmentStatus
		eapc.mutation.SetPunishmentStatus(v)
	}
	if _, ok := eapc.mutation.DisciplinaryCaseStatus(); !ok {
		v := exam_applications_ps.DefaultDisciplinaryCaseStatus
		eapc.mutation.SetDisciplinaryCaseStatus(v)
	}
	if _, ok := eapc.mutation.HallTicketNumber(); !ok {
		v := exam_applications_ps.DefaultHallTicketNumber
		eapc.mutation.SetHallTicketNumber(v)
	}
	if _, ok := eapc.mutation.HallTicketGeneratedFlag(); !ok {
		v := exam_applications_ps.DefaultHallTicketGeneratedFlag
		eapc.mutation.SetHallTicketGeneratedFlag(v)
	}
	if _, ok := eapc.mutation.UpdatedAt(); !ok {
		v := exam_applications_ps.DefaultUpdatedAt()
		eapc.mutation.SetUpdatedAt(v)
	}
	if _, ok := eapc.mutation.UpdatedBy(); !ok {
		v := exam_applications_ps.DefaultUpdatedBy
		eapc.mutation.SetUpdatedBy(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (eapc *ExamApplicationsPSCreate) check() error {
	return nil
}

func (eapc *ExamApplicationsPSCreate) sqlSave(ctx context.Context) (*Exam_Applications_PS, error) {
	if err := eapc.check(); err != nil {
		return nil, err
	}
	_node, _spec := eapc.createSpec()
	if err := sqlgraph.CreateNode(ctx, eapc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	eapc.mutation.id = &_node.ID
	eapc.mutation.done = true
	return _node, nil
}

func (eapc *ExamApplicationsPSCreate) createSpec() (*Exam_Applications_PS, *sqlgraph.CreateSpec) {
	var (
		_node = &Exam_Applications_PS{config: eapc.config}
		_spec = sqlgraph.NewCreateSpec(exam_applications_ps.Table, sqlgraph.NewFieldSpec(exam_applications_ps.FieldID, field.TypeInt64))
	)
	if id, ok := eapc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := eapc.mutation.ApplicationNumber(); ok {
		_spec.SetField(exam_applications_ps.FieldApplicationNumber, field.TypeString, value)
		_node.ApplicationNumber = value
	}
	if value, ok := eapc.mutation.ApplnSubmittedDate(); ok {
		_spec.SetField(exam_applications_ps.FieldApplnSubmittedDate, field.TypeTime, value)
		_node.ApplnSubmittedDate = value
	}
	if value, ok := eapc.mutation.ExamShortName(); ok {
		_spec.SetField(exam_applications_ps.FieldExamShortName, field.TypeString, value)
		_node.ExamShortName = value
	}
	if value, ok := eapc.mutation.ExamName(); ok {
		_spec.SetField(exam_applications_ps.FieldExamName, field.TypeString, value)
		_node.ExamName = value
	}
	if value, ok := eapc.mutation.SmsExamShortName(); ok {
		_spec.SetField(exam_applications_ps.FieldSmsExamShortName, field.TypeString, value)
		_node.SmsExamShortName = value
	}
	if value, ok := eapc.mutation.ExamYear(); ok {
		_spec.SetField(exam_applications_ps.FieldExamYear, field.TypeString, value)
		_node.ExamYear = value
	}
	if value, ok := eapc.mutation.UserID(); ok {
		_spec.SetField(exam_applications_ps.FieldUserID, field.TypeInt32, value)
		_node.UserID = value
	}
	if value, ok := eapc.mutation.EmployeeID(); ok {
		_spec.SetField(exam_applications_ps.FieldEmployeeID, field.TypeInt64, value)
		_node.EmployeeID = value
	}
	if value, ok := eapc.mutation.EmployeeName(); ok {
		_spec.SetField(exam_applications_ps.FieldEmployeeName, field.TypeString, value)
		_node.EmployeeName = value
	}
	if value, ok := eapc.mutation.DOB(); ok {
		_spec.SetField(exam_applications_ps.FieldDOB, field.TypeString, value)
		_node.DOB = value
	}
	if value, ok := eapc.mutation.Gender(); ok {
		_spec.SetField(exam_applications_ps.FieldGender, field.TypeString, value)
		_node.Gender = value
	}
	if value, ok := eapc.mutation.MobileNumber(); ok {
		_spec.SetField(exam_applications_ps.FieldMobileNumber, field.TypeString, value)
		_node.MobileNumber = value
	}
	if value, ok := eapc.mutation.EmailID(); ok {
		_spec.SetField(exam_applications_ps.FieldEmailID, field.TypeString, value)
		_node.EmailID = value
	}
	if value, ok := eapc.mutation.CategoryCode(); ok {
		_spec.SetField(exam_applications_ps.FieldCategoryCode, field.TypeString, value)
		_node.CategoryCode = value
	}
	if value, ok := eapc.mutation.CategoryDescription(); ok {
		_spec.SetField(exam_applications_ps.FieldCategoryDescription, field.TypeString, value)
		_node.CategoryDescription = value
	}
	if value, ok := eapc.mutation.DisabilityTypeID(); ok {
		_spec.SetField(exam_applications_ps.FieldDisabilityTypeID, field.TypeString, value)
		_node.DisabilityTypeID = value
	}
	if value, ok := eapc.mutation.DisabilityTypeCode(); ok {
		_spec.SetField(exam_applications_ps.FieldDisabilityTypeCode, field.TypeString, value)
		_node.DisabilityTypeCode = value
	}
	if value, ok := eapc.mutation.DisabilityTypeDescription(); ok {
		_spec.SetField(exam_applications_ps.FieldDisabilityTypeDescription, field.TypeString, value)
		_node.DisabilityTypeDescription = value
	}
	if value, ok := eapc.mutation.DisabilityPercentage(); ok {
		_spec.SetField(exam_applications_ps.FieldDisabilityPercentage, field.TypeInt32, value)
		_node.DisabilityPercentage = value
	}
	if value, ok := eapc.mutation.DCCS(); ok {
		_spec.SetField(exam_applications_ps.FieldDCCS, field.TypeString, value)
		_node.DCCS = value
	}
	if value, ok := eapc.mutation.EntryPostCode(); ok {
		_spec.SetField(exam_applications_ps.FieldEntryPostCode, field.TypeString, value)
		_node.EntryPostCode = value
	}
	if value, ok := eapc.mutation.EntryPostDescription(); ok {
		_spec.SetField(exam_applications_ps.FieldEntryPostDescription, field.TypeString, value)
		_node.EntryPostDescription = value
	}
	if value, ok := eapc.mutation.PresentPostCode(); ok {
		_spec.SetField(exam_applications_ps.FieldPresentPostCode, field.TypeString, value)
		_node.PresentPostCode = value
	}
	if value, ok := eapc.mutation.PresentPostDescription(); ok {
		_spec.SetField(exam_applications_ps.FieldPresentPostDescription, field.TypeString, value)
		_node.PresentPostDescription = value
	}
	if value, ok := eapc.mutation.FeederPostCode(); ok {
		_spec.SetField(exam_applications_ps.FieldFeederPostCode, field.TypeString, value)
		_node.FeederPostCode = value
	}
	if value, ok := eapc.mutation.FeederPostDescription(); ok {
		_spec.SetField(exam_applications_ps.FieldFeederPostDescription, field.TypeString, value)
		_node.FeederPostDescription = value
	}
	if value, ok := eapc.mutation.FeederPostJoiningDate(); ok {
		_spec.SetField(exam_applications_ps.FieldFeederPostJoiningDate, field.TypeString, value)
		_node.FeederPostJoiningDate = value
	}
	if value, ok := eapc.mutation.DesignationID(); ok {
		_spec.SetField(exam_applications_ps.FieldDesignationID, field.TypeString, value)
		_node.DesignationID = value
	}
	if value, ok := eapc.mutation.PresentDesignation(); ok {
		_spec.SetField(exam_applications_ps.FieldPresentDesignation, field.TypeString, value)
		_node.PresentDesignation = value
	}
	if value, ok := eapc.mutation.EducationCode(); ok {
		_spec.SetField(exam_applications_ps.FieldEducationCode, field.TypeString, value)
		_node.EducationCode = value
	}
	if value, ok := eapc.mutation.EducationDescription(); ok {
		_spec.SetField(exam_applications_ps.FieldEducationDescription, field.TypeString, value)
		_node.EducationDescription = value
	}
	if value, ok := eapc.mutation.FacilityUniqueID(); ok {
		_spec.SetField(exam_applications_ps.FieldFacilityUniqueID, field.TypeString, value)
		_node.FacilityUniqueID = value
	}
	if value, ok := eapc.mutation.WorkingOfficePincode(); ok {
		_spec.SetField(exam_applications_ps.FieldWorkingOfficePincode, field.TypeInt32, value)
		_node.WorkingOfficePincode = value
	}
	if value, ok := eapc.mutation.WorkingOfficeFacilityID(); ok {
		_spec.SetField(exam_applications_ps.FieldWorkingOfficeFacilityID, field.TypeString, value)
		_node.WorkingOfficeFacilityID = value
	}
	if value, ok := eapc.mutation.WorkingOfficeName(); ok {
		_spec.SetField(exam_applications_ps.FieldWorkingOfficeName, field.TypeString, value)
		_node.WorkingOfficeName = value
	}
	if value, ok := eapc.mutation.WorkingOfficeCircleFacilityID(); ok {
		_spec.SetField(exam_applications_ps.FieldWorkingOfficeCircleFacilityID, field.TypeString, value)
		_node.WorkingOfficeCircleFacilityID = value
	}
	if value, ok := eapc.mutation.WorkingOfficeCircleName(); ok {
		_spec.SetField(exam_applications_ps.FieldWorkingOfficeCircleName, field.TypeString, value)
		_node.WorkingOfficeCircleName = value
	}
	if value, ok := eapc.mutation.WorkingOfficeRegionFacilityID(); ok {
		_spec.SetField(exam_applications_ps.FieldWorkingOfficeRegionFacilityID, field.TypeString, value)
		_node.WorkingOfficeRegionFacilityID = value
	}
	if value, ok := eapc.mutation.WorkingOfficeRegionName(); ok {
		_spec.SetField(exam_applications_ps.FieldWorkingOfficeRegionName, field.TypeString, value)
		_node.WorkingOfficeRegionName = value
	}
	if value, ok := eapc.mutation.WorkingOfficeDivisionFacilityID(); ok {
		_spec.SetField(exam_applications_ps.FieldWorkingOfficeDivisionFacilityID, field.TypeString, value)
		_node.WorkingOfficeDivisionFacilityID = value
	}
	if value, ok := eapc.mutation.WorkingOfficeDivisionName(); ok {
		_spec.SetField(exam_applications_ps.FieldWorkingOfficeDivisionName, field.TypeString, value)
		_node.WorkingOfficeDivisionName = value
	}
	if value, ok := eapc.mutation.ReportingOfficeFacilityID(); ok {
		_spec.SetField(exam_applications_ps.FieldReportingOfficeFacilityID, field.TypeString, value)
		_node.ReportingOfficeFacilityID = value
	}
	if value, ok := eapc.mutation.ReportingOfficeName(); ok {
		_spec.SetField(exam_applications_ps.FieldReportingOfficeName, field.TypeString, value)
		_node.ReportingOfficeName = value
	}
	if value, ok := eapc.mutation.LienControllingOfficeID(); ok {
		_spec.SetField(exam_applications_ps.FieldLienControllingOfficeID, field.TypeString, value)
		_node.LienControllingOfficeID = value
	}
	if value, ok := eapc.mutation.LienControllingOfficeName(); ok {
		_spec.SetField(exam_applications_ps.FieldLienControllingOfficeName, field.TypeString, value)
		_node.LienControllingOfficeName = value
	}
	if value, ok := eapc.mutation.InDeputation(); ok {
		_spec.SetField(exam_applications_ps.FieldInDeputation, field.TypeString, value)
		_node.InDeputation = value
	}
	if value, ok := eapc.mutation.DeputationType(); ok {
		_spec.SetField(exam_applications_ps.FieldDeputationType, field.TypeString, value)
		_node.DeputationType = value
	}
	if value, ok := eapc.mutation.DeputationOfficeUniqueId(); ok {
		_spec.SetField(exam_applications_ps.FieldDeputationOfficeUniqueId, field.TypeString, value)
		_node.DeputationOfficeUniqueId = value
	}
	if value, ok := eapc.mutation.DeputationOfficeFacilityID(); ok {
		_spec.SetField(exam_applications_ps.FieldDeputationOfficeFacilityID, field.TypeString, value)
		_node.DeputationOfficeFacilityID = value
	}
	if value, ok := eapc.mutation.DeputationOfficeName(); ok {
		_spec.SetField(exam_applications_ps.FieldDeputationOfficeName, field.TypeString, value)
		_node.DeputationOfficeName = value
	}
	if value, ok := eapc.mutation.DeputationControllingOfficeID(); ok {
		_spec.SetField(exam_applications_ps.FieldDeputationControllingOfficeID, field.TypeString, value)
		_node.DeputationControllingOfficeID = value
	}
	if value, ok := eapc.mutation.DeputationControllingOfficeName(); ok {
		_spec.SetField(exam_applications_ps.FieldDeputationControllingOfficeName, field.TypeString, value)
		_node.DeputationControllingOfficeName = value
	}
	if value, ok := eapc.mutation.ControllingOfficeFacilityID(); ok {
		_spec.SetField(exam_applications_ps.FieldControllingOfficeFacilityID, field.TypeString, value)
		_node.ControllingOfficeFacilityID = value
	}
	if value, ok := eapc.mutation.ControllingOfficeName(); ok {
		_spec.SetField(exam_applications_ps.FieldControllingOfficeName, field.TypeString, value)
		_node.ControllingOfficeName = value
	}
	if value, ok := eapc.mutation.NodalOfficeFacilityID(); ok {
		_spec.SetField(exam_applications_ps.FieldNodalOfficeFacilityID, field.TypeString, value)
		_node.NodalOfficeFacilityID = value
	}
	if value, ok := eapc.mutation.NodalOfficeName(); ok {
		_spec.SetField(exam_applications_ps.FieldNodalOfficeName, field.TypeString, value)
		_node.NodalOfficeName = value
	}
	if value, ok := eapc.mutation.CenterFacilityId(); ok {
		_spec.SetField(exam_applications_ps.FieldCenterFacilityId, field.TypeString, value)
		_node.CenterFacilityId = value
	}
	if value, ok := eapc.mutation.CentrePreference(); ok {
		_spec.SetField(exam_applications_ps.FieldCentrePreference, field.TypeString, value)
		_node.CentrePreference = value
	}
	if value, ok := eapc.mutation.Signature(); ok {
		_spec.SetField(exam_applications_ps.FieldSignature, field.TypeString, value)
		_node.Signature = value
	}
	if value, ok := eapc.mutation.Photo(); ok {
		_spec.SetField(exam_applications_ps.FieldPhoto, field.TypeString, value)
		_node.Photo = value
	}
	if value, ok := eapc.mutation.SignaturePath(); ok {
		_spec.SetField(exam_applications_ps.FieldSignaturePath, field.TypeString, value)
		_node.SignaturePath = value
	}
	if value, ok := eapc.mutation.PhotoPath(); ok {
		_spec.SetField(exam_applications_ps.FieldPhotoPath, field.TypeString, value)
		_node.PhotoPath = value
	}
	if value, ok := eapc.mutation.TempHallTicket(); ok {
		_spec.SetField(exam_applications_ps.FieldTempHallTicket, field.TypeString, value)
		_node.TempHallTicket = value
	}
	if value, ok := eapc.mutation.CandidateRemarks(); ok {
		_spec.SetField(exam_applications_ps.FieldCandidateRemarks, field.TypeString, value)
		_node.CandidateRemarks = value
	}
	if value, ok := eapc.mutation.VAGeneralRemarks(); ok {
		_spec.SetField(exam_applications_ps.FieldVAGeneralRemarks, field.TypeString, value)
		_node.VAGeneralRemarks = value
	}
	if value, ok := eapc.mutation.CAGeneralRemarks(); ok {
		_spec.SetField(exam_applications_ps.FieldCAGeneralRemarks, field.TypeString, value)
		_node.CAGeneralRemarks = value
	}
	if value, ok := eapc.mutation.NAGeneralRemarks(); ok {
		_spec.SetField(exam_applications_ps.FieldNAGeneralRemarks, field.TypeString, value)
		_node.NAGeneralRemarks = value
	}
	if value, ok := eapc.mutation.ApplicationStatus(); ok {
		_spec.SetField(exam_applications_ps.FieldApplicationStatus, field.TypeString, value)
		_node.ApplicationStatus = value
	}
	if value, ok := eapc.mutation.Status(); ok {
		_spec.SetField(exam_applications_ps.FieldStatus, field.TypeString, value)
		_node.Status = value
	}
	if value, ok := eapc.mutation.VAUserId(); ok {
		_spec.SetField(exam_applications_ps.FieldVAUserId, field.TypeInt32, value)
		_node.VAUserId = value
	}
	if value, ok := eapc.mutation.VAUserName(); ok {
		_spec.SetField(exam_applications_ps.FieldVAUserName, field.TypeString, value)
		_node.VAUserName = value
	}
	if value, ok := eapc.mutation.VAEmployeeID(); ok {
		_spec.SetField(exam_applications_ps.FieldVAEmployeeID, field.TypeString, value)
		_node.VAEmployeeID = value
	}
	if value, ok := eapc.mutation.VAEmployeeDesignation(); ok {
		_spec.SetField(exam_applications_ps.FieldVAEmployeeDesignation, field.TypeString, value)
		_node.VAEmployeeDesignation = value
	}
	if value, ok := eapc.mutation.VARemarks(); ok {
		_spec.SetField(exam_applications_ps.FieldVARemarks, field.TypeString, value)
		_node.VARemarks = value
	}
	if value, ok := eapc.mutation.VADate(); ok {
		_spec.SetField(exam_applications_ps.FieldVADate, field.TypeTime, value)
		_node.VADate = value
	}
	if value, ok := eapc.mutation.CAUserId(); ok {
		_spec.SetField(exam_applications_ps.FieldCAUserId, field.TypeInt32, value)
		_node.CAUserId = value
	}
	if value, ok := eapc.mutation.CAUserName(); ok {
		_spec.SetField(exam_applications_ps.FieldCAUserName, field.TypeString, value)
		_node.CAUserName = value
	}
	if value, ok := eapc.mutation.CAEmployeeID(); ok {
		_spec.SetField(exam_applications_ps.FieldCAEmployeeID, field.TypeString, value)
		_node.CAEmployeeID = value
	}
	if value, ok := eapc.mutation.CAEmployeeDesignation(); ok {
		_spec.SetField(exam_applications_ps.FieldCAEmployeeDesignation, field.TypeString, value)
		_node.CAEmployeeDesignation = value
	}
	if value, ok := eapc.mutation.CARemarks(); ok {
		_spec.SetField(exam_applications_ps.FieldCARemarks, field.TypeString, value)
		_node.CARemarks = value
	}
	if value, ok := eapc.mutation.CADate(); ok {
		_spec.SetField(exam_applications_ps.FieldCADate, field.TypeTime, value)
		_node.CADate = value
	}
	if value, ok := eapc.mutation.NAUserId(); ok {
		_spec.SetField(exam_applications_ps.FieldNAUserId, field.TypeInt32, value)
		_node.NAUserId = value
	}
	if value, ok := eapc.mutation.NAUserName(); ok {
		_spec.SetField(exam_applications_ps.FieldNAUserName, field.TypeString, value)
		_node.NAUserName = value
	}
	if value, ok := eapc.mutation.NAEmployeeID(); ok {
		_spec.SetField(exam_applications_ps.FieldNAEmployeeID, field.TypeString, value)
		_node.NAEmployeeID = value
	}
	if value, ok := eapc.mutation.NAEmployeeDesignation(); ok {
		_spec.SetField(exam_applications_ps.FieldNAEmployeeDesignation, field.TypeString, value)
		_node.NAEmployeeDesignation = value
	}
	if value, ok := eapc.mutation.NARemarks(); ok {
		_spec.SetField(exam_applications_ps.FieldNARemarks, field.TypeString, value)
		_node.NARemarks = value
	}
	if value, ok := eapc.mutation.NADate(); ok {
		_spec.SetField(exam_applications_ps.FieldNADate, field.TypeTime, value)
		_node.NADate = value
	}
	if value, ok := eapc.mutation.AppliactionRemarks(); ok {
		_spec.SetField(exam_applications_ps.FieldAppliactionRemarks, field.TypeString, value)
		_node.AppliactionRemarks = value
	}
	if value, ok := eapc.mutation.CadrePreferences(); ok {
		_spec.SetField(exam_applications_ps.FieldCadrePreferences, field.TypeJSON, value)
		_node.CadrePreferences = value
	}
	if value, ok := eapc.mutation.CAPreviousRemarks(); ok {
		_spec.SetField(exam_applications_ps.FieldCAPreviousRemarks, field.TypeString, value)
		_node.CAPreviousRemarks = value
	}
	if value, ok := eapc.mutation.PunishmentStatus(); ok {
		_spec.SetField(exam_applications_ps.FieldPunishmentStatus, field.TypeBool, value)
		_node.PunishmentStatus = value
	}
	if value, ok := eapc.mutation.DisciplinaryCaseStatus(); ok {
		_spec.SetField(exam_applications_ps.FieldDisciplinaryCaseStatus, field.TypeBool, value)
		_node.DisciplinaryCaseStatus = value
	}
	if value, ok := eapc.mutation.GenerateHallTicketFlag(); ok {
		_spec.SetField(exam_applications_ps.FieldGenerateHallTicketFlag, field.TypeBool, value)
		_node.GenerateHallTicketFlag = &value
	}
	if value, ok := eapc.mutation.HallTicketNumber(); ok {
		_spec.SetField(exam_applications_ps.FieldHallTicketNumber, field.TypeString, value)
		_node.HallTicketNumber = value
	}
	if value, ok := eapc.mutation.HallTicketGeneratedFlag(); ok {
		_spec.SetField(exam_applications_ps.FieldHallTicketGeneratedFlag, field.TypeBool, value)
		_node.HallTicketGeneratedFlag = value
	}
	if value, ok := eapc.mutation.GenerateHallTicketFlagByNO(); ok {
		_spec.SetField(exam_applications_ps.FieldGenerateHallTicketFlagByNO, field.TypeBool, value)
		_node.GenerateHallTicketFlagByNO = &value
	}
	if value, ok := eapc.mutation.HallTicketGeneratedDate(); ok {
		_spec.SetField(exam_applications_ps.FieldHallTicketGeneratedDate, field.TypeTime, value)
		_node.HallTicketGeneratedDate = value
	}
	if value, ok := eapc.mutation.TemporaryHallTicket(); ok {
		_spec.SetField(exam_applications_ps.FieldTemporaryHallTicket, field.TypeString, value)
		_node.TemporaryHallTicket = value
	}
	if value, ok := eapc.mutation.OptionUsed(); ok {
		_spec.SetField(exam_applications_ps.FieldOptionUsed, field.TypeString, value)
		_node.OptionUsed = value
	}
	if value, ok := eapc.mutation.Remarks(); ok {
		_spec.SetField(exam_applications_ps.FieldRemarks, field.TypeString, value)
		_node.Remarks = value
	}
	if value, ok := eapc.mutation.Cadre(); ok {
		_spec.SetField(exam_applications_ps.FieldCadre, field.TypeString, value)
		_node.Cadre = value
	}
	if value, ok := eapc.mutation.EmployeePost(); ok {
		_spec.SetField(exam_applications_ps.FieldEmployeePost, field.TypeString, value)
		_node.EmployeePost = value
	}
	if value, ok := eapc.mutation.DOJInEligiblePost(); ok {
		_spec.SetField(exam_applications_ps.FieldDOJInEligiblePost, field.TypeString, value)
		_node.DOJInEligiblePost = value
	}
	if value, ok := eapc.mutation.DivisionPreferences(); ok {
		_spec.SetField(exam_applications_ps.FieldDivisionPreferences, field.TypeJSON, value)
		_node.DivisionPreferences = value
	}
	if value, ok := eapc.mutation.FacilityName(); ok {
		_spec.SetField(exam_applications_ps.FieldFacilityName, field.TypeString, value)
		_node.FacilityName = value
	}
	if value, ok := eapc.mutation.ServiceLength(); ok {
		_spec.SetField(exam_applications_ps.FieldServiceLength, field.TypeJSON, value)
		_node.ServiceLength = value
	}
	if value, ok := eapc.mutation.NonQualifyingService(); ok {
		_spec.SetField(exam_applications_ps.FieldNonQualifyingService, field.TypeJSON, value)
		_node.NonQualifyingService = value
	}
	if value, ok := eapc.mutation.DCInPresentCadre(); ok {
		_spec.SetField(exam_applications_ps.FieldDCInPresentCadre, field.TypeString, value)
		_node.DCInPresentCadre = value
	}
	if value, ok := eapc.mutation.CenterId(); ok {
		_spec.SetField(exam_applications_ps.FieldCenterId, field.TypeInt32, value)
		_node.CenterId = value
	}
	if value, ok := eapc.mutation.ClaimingQualifyingService(); ok {
		_spec.SetField(exam_applications_ps.FieldClaimingQualifyingService, field.TypeString, value)
		_node.ClaimingQualifyingService = value
	}
	if value, ok := eapc.mutation.DeputationOfficePincode(); ok {
		_spec.SetField(exam_applications_ps.FieldDeputationOfficePincode, field.TypeString, value)
		_node.DeputationOfficePincode = value
	}
	if value, ok := eapc.mutation.RecommendedStatus(); ok {
		_spec.SetField(exam_applications_ps.FieldRecommendedStatus, field.TypeString, value)
		_node.RecommendedStatus = value
	}
	if value, ok := eapc.mutation.UpdatedAt(); ok {
		_spec.SetField(exam_applications_ps.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := eapc.mutation.UpdatedBy(); ok {
		_spec.SetField(exam_applications_ps.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if value, ok := eapc.mutation.ApplicationWdlDate(); ok {
		_spec.SetField(exam_applications_ps.FieldApplicationWdlDate, field.TypeTime, value)
		_node.ApplicationWdlDate = value
	}
	if value, ok := eapc.mutation.ExamCenterHall(); ok {
		_spec.SetField(exam_applications_ps.FieldExamCenterHall, field.TypeInt32, value)
		_node.ExamCenterHall = value
	}
	if value, ok := eapc.mutation.HallName(); ok {
		_spec.SetField(exam_applications_ps.FieldHallName, field.TypeString, value)
		_node.HallName = value
	}
	if value, ok := eapc.mutation.ReportingOfficeID(); ok {
		_spec.SetField(exam_applications_ps.FieldReportingOfficeID, field.TypeString, value)
		_node.ReportingOfficeID = value
	}
	if nodes := eapc.mutation.UsersPSRefIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_applications_ps.UsersPSRefTable,
			Columns: []string{exam_applications_ps.UsersPSRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usermaster.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := eapc.mutation.CadrePrefPSRefIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_applications_ps.CadrePrefPSRefTable,
			Columns: []string{exam_applications_ps.CadrePrefPSRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cadre_choice_ps.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := eapc.mutation.CirclePrefRefPSIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_applications_ps.CirclePrefRefPSTable,
			Columns: []string{exam_applications_ps.CirclePrefRefPSColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(placeofpreferenceps.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := eapc.mutation.PSApplicationsRefIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_applications_ps.PSApplicationsRefTable,
			Columns: []string{exam_applications_ps.PSApplicationsRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(recommendationspsapplications.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := eapc.mutation.ExamsPSIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   exam_applications_ps.ExamsPSTable,
			Columns: []string{exam_applications_ps.ExamsPSColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ExamCode = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := eapc.mutation.RoleusersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   exam_applications_ps.RoleusersTable,
			Columns: []string{exam_applications_ps.RoleusersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rolemaster.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.RoleUserCode = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := eapc.mutation.ExamcitycenterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   exam_applications_ps.ExamcitycenterTable,
			Columns: []string{exam_applications_ps.ExamcitycenterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(examcitycenter.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ExamCityCenterCode = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := eapc.mutation.PSExamCentresIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   exam_applications_ps.PSExamCentresTable,
			Columns: []string{exam_applications_ps.PSExamCentresColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(center.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CenterCode = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := eapc.mutation.CircleRefsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   exam_applications_ps.CircleRefsTable,
			Columns: []string{exam_applications_ps.CircleRefsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(circlesummaryforno.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CircleSID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := eapc.mutation.LogDataIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_applications_ps.LogDataTable,
			Columns: []string{exam_applications_ps.LogDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(logs.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ExamApplicationsPSCreateBulk is the builder for creating many Exam_Applications_PS entities in bulk.
type ExamApplicationsPSCreateBulk struct {
	config
	builders []*ExamApplicationsPSCreate
}

// Save creates the Exam_Applications_PS entities in the database.
func (eapcb *ExamApplicationsPSCreateBulk) Save(ctx context.Context) ([]*Exam_Applications_PS, error) {
	specs := make([]*sqlgraph.CreateSpec, len(eapcb.builders))
	nodes := make([]*Exam_Applications_PS, len(eapcb.builders))
	mutators := make([]Mutator, len(eapcb.builders))
	for i := range eapcb.builders {
		func(i int, root context.Context) {
			builder := eapcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ExamApplicationsPSMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, eapcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, eapcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, eapcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (eapcb *ExamApplicationsPSCreateBulk) SaveX(ctx context.Context) []*Exam_Applications_PS {
	v, err := eapcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (eapcb *ExamApplicationsPSCreateBulk) Exec(ctx context.Context) error {
	_, err := eapcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eapcb *ExamApplicationsPSCreateBulk) ExecX(ctx context.Context) {
	if err := eapcb.Exec(ctx); err != nil {
		panic(err)
	}
}
