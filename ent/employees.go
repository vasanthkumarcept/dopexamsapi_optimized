// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"recruit/ent/employees"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Employees is the model entity for the Employees schema.
type Employees struct {
	config `json:"-"`
	// ID of the ent.
	ID int32 `json:"id,omitempty"`
	// EmployeedID holds the value of the "EmployeedID" field.
	EmployeedID int32 `json:"EmployeedID,omitempty"`
	// IDVerified holds the value of the "IDVerified" field.
	IDVerified bool `json:"IDVerified,omitempty"`
	// IDRemStatus holds the value of the "IDRemStatus" field.
	IDRemStatus bool `json:"IDRemStatus,omitempty"`
	// IDRemarks holds the value of the "IDRemarks" field.
	IDRemarks string `json:"IDRemarks,omitempty"`
	// EmployeeName holds the value of the "EmployeeName" field.
	EmployeeName string `json:"EmployeeName,omitempty"`
	// NameVerified holds the value of the "nameVerified" field.
	NameVerified bool `json:"nameVerified,omitempty"`
	// NameRemStatus holds the value of the "nameRemStatus" field.
	NameRemStatus bool `json:"nameRemStatus,omitempty"`
	// NameRemarks holds the value of the "nameRemarks" field.
	NameRemarks string `json:"nameRemarks,omitempty"`
	// EmployeeFathersName holds the value of the "EmployeeFathersName" field.
	EmployeeFathersName string `json:"EmployeeFathersName,omitempty"`
	// FathersNameVerified holds the value of the "FathersNameVerified" field.
	FathersNameVerified bool `json:"FathersNameVerified,omitempty"`
	// FathersNameRemStatus holds the value of the "FathersNameRemStatus" field.
	FathersNameRemStatus bool `json:"FathersNameRemStatus,omitempty"`
	// FathersNameRemarks holds the value of the "FathersNameRemarks" field.
	FathersNameRemarks string `json:"FathersNameRemarks,omitempty"`
	// DOB holds the value of the "DOB" field.
	DOB time.Time `json:"DOB,omitempty"`
	// DOBVerified holds the value of the "DOBVerified" field.
	DOBVerified bool `json:"DOBVerified,omitempty"`
	// DOBRemStatus holds the value of the "DOBRemStatus" field.
	DOBRemStatus bool `json:"DOBRemStatus,omitempty"`
	// DOBRemarks holds the value of the "DOBRemarks" field.
	DOBRemarks string `json:"DOBRemarks,omitempty"`
	// Gender holds the value of the "Gender" field.
	Gender employees.Gender `json:"Gender,omitempty"`
	// GenderVerified holds the value of the "genderVerified" field.
	GenderVerified bool `json:"genderVerified,omitempty"`
	// GenderRemStatus holds the value of the "genderRemStatus" field.
	GenderRemStatus bool `json:"genderRemStatus,omitempty"`
	// GenderRemarks holds the value of the "genderRemarks" field.
	GenderRemarks string `json:"genderRemarks,omitempty"`
	// MobileNumber holds the value of the "MobileNumber" field.
	MobileNumber int64 `json:"MobileNumber,omitempty"`
	// MobileNumberVerified holds the value of the "MobileNumberVerified" field.
	MobileNumberVerified bool `json:"MobileNumberVerified,omitempty"`
	// MobileNumberRemStatus holds the value of the "MobileNumberRemStatus" field.
	MobileNumberRemStatus bool `json:"MobileNumberRemStatus,omitempty"`
	// MobileNumberRemarks holds the value of the "MobileNumberRemarks" field.
	MobileNumberRemarks string `json:"MobileNumberRemarks,omitempty"`
	// EmailID holds the value of the "EmailID" field.
	EmailID string `json:"EmailID,omitempty"`
	// EmailIDVerified holds the value of the "EmailIDVerified" field.
	EmailIDVerified bool `json:"EmailIDVerified,omitempty"`
	// EmailIDRemStatus holds the value of the "EmailIDRemStatus" field.
	EmailIDRemStatus bool `json:"EmailIDRemStatus,omitempty"`
	// EmailIDRemarks holds the value of the "EmailIDRemarks" field.
	EmailIDRemarks string `json:"EmailIDRemarks,omitempty"`
	// Categoryid holds the value of the "Categoryid" field.
	Categoryid int32 `json:"Categoryid,omitempty"`
	// EmployeeCategoryCode holds the value of the "EmployeeCategoryCode" field.
	EmployeeCategoryCode string `json:"EmployeeCategoryCode,omitempty"`
	// EmployeeCategory holds the value of the "EmployeeCategory" field.
	EmployeeCategory string `json:"EmployeeCategory,omitempty"`
	// EmployeeCategoryCodeVerified holds the value of the "EmployeeCategoryCodeVerified" field.
	EmployeeCategoryCodeVerified bool `json:"EmployeeCategoryCodeVerified,omitempty"`
	// EmployeeCategoryCodeRemStatus holds the value of the "EmployeeCategoryCodeRemStatus" field.
	EmployeeCategoryCodeRemStatus bool `json:"EmployeeCategoryCodeRemStatus,omitempty"`
	// EmployeeCategoryCodeRemarks holds the value of the "EmployeeCategoryCodeRemarks" field.
	EmployeeCategoryCodeRemarks string `json:"EmployeeCategoryCodeRemarks,omitempty"`
	// WithDisability holds the value of the "WithDisability" field.
	WithDisability string `json:"WithDisability,omitempty"`
	// WithDisabilityVerified holds the value of the "WithDisabilityVerified" field.
	WithDisabilityVerified bool `json:"WithDisabilityVerified,omitempty"`
	// WithDisabilityRemStatus holds the value of the "WithDisabilityRemStatus" field.
	WithDisabilityRemStatus bool `json:"WithDisabilityRemStatus,omitempty"`
	// WithDisabilityRemarks holds the value of the "WithDisabilityRemarks" field.
	WithDisabilityRemarks bool `json:"WithDisabilityRemarks,omitempty"`
	// DisabilityType holds the value of the "DisabilityType" field.
	DisabilityType string `json:"DisabilityType,omitempty"`
	// DisabilityTypeVerified holds the value of the "DisabilityTypeVerified" field.
	DisabilityTypeVerified bool `json:"DisabilityTypeVerified,omitempty"`
	// DisabilityTypeRemStatus holds the value of the "DisabilityTypeRemStatus" field.
	DisabilityTypeRemStatus bool `json:"DisabilityTypeRemStatus,omitempty"`
	// DisabilityTypeRemarks holds the value of the "DisabilityTypeRemarks" field.
	DisabilityTypeRemarks string `json:"DisabilityTypeRemarks,omitempty"`
	// DisabilityPercentage holds the value of the "DisabilityPercentage" field.
	DisabilityPercentage int32 `json:"DisabilityPercentage,omitempty"`
	// DisabilityPercentageVerified holds the value of the "DisabilityPercentageVerified" field.
	DisabilityPercentageVerified bool `json:"DisabilityPercentageVerified,omitempty"`
	// DisabilityPercentageRemStatus holds the value of the "DisabilityPercentageRemStatus" field.
	DisabilityPercentageRemStatus bool `json:"DisabilityPercentageRemStatus,omitempty"`
	// DisabilityPercentageRemarks holds the value of the "DisabilityPercentageRemarks" field.
	DisabilityPercentageRemarks string `json:"DisabilityPercentageRemarks,omitempty"`
	// Signature holds the value of the "Signature" field.
	Signature string `json:"Signature,omitempty"`
	// SignatureVerified holds the value of the "SignatureVerified" field.
	SignatureVerified bool `json:"SignatureVerified,omitempty"`
	// SignatureRemStatus holds the value of the "SignatureRemStatus" field.
	SignatureRemStatus bool `json:"SignatureRemStatus,omitempty"`
	// SignatureRemarks holds the value of the "SignatureRemarks" field.
	SignatureRemarks string `json:"SignatureRemarks,omitempty"`
	// Photo holds the value of the "Photo" field.
	Photo string `json:"Photo,omitempty"`
	// PhotoVerified holds the value of the "PhotoVerified" field.
	PhotoVerified bool `json:"PhotoVerified,omitempty"`
	// PhotoRemStatus holds the value of the "PhotoRemStatus" field.
	PhotoRemStatus bool `json:"PhotoRemStatus,omitempty"`
	// PhotoRemarks holds the value of the "PhotoRemarks" field.
	PhotoRemarks string `json:"PhotoRemarks,omitempty"`
	// PostID holds the value of the "PostID" field.
	PostID int32 `json:"PostID,omitempty"`
	// PostCode holds the value of the "PostCode" field.
	PostCode string `json:"PostCode,omitempty"`
	// EmployeePost holds the value of the "EmployeePost" field.
	EmployeePost string `json:"EmployeePost,omitempty"`
	// EmployeePostVerified holds the value of the "EmployeePostVerified" field.
	EmployeePostVerified bool `json:"EmployeePostVerified,omitempty"`
	// EmployeePostRemStatus holds the value of the "EmployeePostRemStatus" field.
	EmployeePostRemStatus bool `json:"EmployeePostRemStatus,omitempty"`
	// EmployeePostRemarks holds the value of the "EmployeePostRemarks" field.
	EmployeePostRemarks string `json:"EmployeePostRemarks,omitempty"`
	// DesignationID holds the value of the "DesignationID" field.
	DesignationID int32 `json:"DesignationID,omitempty"`
	// EmployeeDesignation holds the value of the "EmployeeDesignation" field.
	EmployeeDesignation string `json:"EmployeeDesignation,omitempty"`
	// EmployeeDesignationVerified holds the value of the "EmployeeDesignationVerified" field.
	EmployeeDesignationVerified bool `json:"EmployeeDesignationVerified,omitempty"`
	// EmployeeDesignationRemStatus holds the value of the "EmployeeDesignationRemStatus" field.
	EmployeeDesignationRemStatus bool `json:"EmployeeDesignationRemStatus,omitempty"`
	// EmployeeDesignationRemarks holds the value of the "EmployeeDesignationRemarks" field.
	EmployeeDesignationRemarks string `json:"EmployeeDesignationRemarks,omitempty"`
	// CircleID holds the value of the "CircleID" field.
	CircleID int32 `json:"CircleID,omitempty"`
	// CircleName holds the value of the "CircleName" field.
	CircleName string `json:"CircleName,omitempty"`
	// CircleVerified holds the value of the "CircleVerified" field.
	CircleVerified bool `json:"CircleVerified,omitempty"`
	// CircleRemStatus holds the value of the "CircleRemStatus" field.
	CircleRemStatus bool `json:"CircleRemStatus,omitempty"`
	// CircleRemarks holds the value of the "CircleRemarks" field.
	CircleRemarks string `json:"CircleRemarks,omitempty"`
	// RegionID holds the value of the "RegionID" field.
	RegionID int32 `json:"RegionID,omitempty"`
	// RegionName holds the value of the "RegionName" field.
	RegionName string `json:"RegionName,omitempty"`
	// RegionVerified holds the value of the "RegionVerified" field.
	RegionVerified bool `json:"RegionVerified,omitempty"`
	// RegionRemStatus holds the value of the "RegionRemStatus" field.
	RegionRemStatus bool `json:"RegionRemStatus,omitempty"`
	// RegionRemarks holds the value of the "RegionRemarks" field.
	RegionRemarks string `json:"RegionRemarks,omitempty"`
	// DivisionID holds the value of the "DivisionID" field.
	DivisionID int32 `json:"DivisionID,omitempty"`
	// DivisionName holds the value of the "DivisionName" field.
	DivisionName string `json:"DivisionName,omitempty"`
	// DivisionVerified holds the value of the "DivisionVerified" field.
	DivisionVerified bool `json:"DivisionVerified,omitempty"`
	// DivisionRemStatus holds the value of the "DivisionRemStatus" field.
	DivisionRemStatus bool `json:"DivisionRemStatus,omitempty"`
	// DivisionRemarks holds the value of the "DivisionRemarks" field.
	DivisionRemarks string `json:"DivisionRemarks,omitempty"`
	// OfficeID holds the value of the "OfficeID" field.
	OfficeID int32 `json:"OfficeID,omitempty"`
	// OfficeName holds the value of the "OfficeName" field.
	OfficeName string `json:"OfficeName,omitempty"`
	// OfficeVerified holds the value of the "OfficeVerified" field.
	OfficeVerified bool `json:"OfficeVerified,omitempty"`
	// OfficeRemStatus holds the value of the "OfficeRemStatus" field.
	OfficeRemStatus bool `json:"OfficeRemStatus,omitempty"`
	// OfficeRemarks holds the value of the "OfficeRemarks" field.
	OfficeRemarks string `json:"OfficeRemarks,omitempty"`
	// Role holds the value of the "Role" field.
	Role string `json:"Role,omitempty"`
	// RoleVerified holds the value of the "RoleVerified" field.
	RoleVerified bool `json:"RoleVerified,omitempty"`
	// RoleRemStatus holds the value of the "RoleRemStatus" field.
	RoleRemStatus bool `json:"RoleRemStatus,omitempty"`
	// RoleRemarks holds the value of the "RoleRemarks" field.
	RoleRemarks string `json:"RoleRemarks,omitempty"`
	// DCCS holds the value of the "DCCS" field.
	DCCS time.Time `json:"DCCS,omitempty"`
	// DCCSVerified holds the value of the "DCCSVerified" field.
	DCCSVerified bool `json:"DCCSVerified,omitempty"`
	// DCCSRemStatus holds the value of the "DCCSRemStatus" field.
	DCCSRemStatus bool `json:"DCCSRemStatus,omitempty"`
	// DCCSRemarks holds the value of the "DCCSRemarks" field.
	DCCSRemarks string `json:"DCCSRemarks,omitempty"`
	// DCInPresentCadre holds the value of the "DCInPresentCadre" field.
	DCInPresentCadre time.Time `json:"DCInPresentCadre,omitempty"`
	// DCInPresentCadreVerified holds the value of the "DCInPresentCadreVerified" field.
	DCInPresentCadreVerified bool `json:"DCInPresentCadreVerified,omitempty"`
	// DCInPresentCadreRemStatus holds the value of the "DCInPresentCadreRemStatus" field.
	DCInPresentCadreRemStatus bool `json:"DCInPresentCadreRemStatus,omitempty"`
	// DCInPresentCadreRemarks holds the value of the "DCInPresentCadreRemarks" field.
	DCInPresentCadreRemarks string `json:"DCInPresentCadreRemarks,omitempty"`
	// APSWorking holds the value of the "APSWorking" field.
	APSWorking bool `json:"APSWorking,omitempty"`
	// APSWorkingVerified holds the value of the "APSWorkingVerified" field.
	APSWorkingVerified bool `json:"APSWorkingVerified,omitempty"`
	// APSWorkingRemStatus holds the value of the "APSWorkingRemStatus" field.
	APSWorkingRemStatus bool `json:"APSWorkingRemStatus,omitempty"`
	// APSWorkingRemarks holds the value of the "APSWorkingRemarks" field.
	APSWorkingRemarks string `json:"APSWorkingRemarks,omitempty"`
	// Profilestatus holds the value of the "profilestatus" field.
	Profilestatus bool `json:"profilestatus,omitempty"`
	// RoleUserCode holds the value of the "RoleUserCode" field.
	RoleUserCode                    int32 `json:"RoleUserCode,omitempty"`
	directorate_users_employee_user *int32
	employee_posts_emp_posts        *int32
	selectValues                    sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Employees) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case employees.FieldIDVerified, employees.FieldIDRemStatus, employees.FieldNameVerified, employees.FieldNameRemStatus, employees.FieldFathersNameVerified, employees.FieldFathersNameRemStatus, employees.FieldDOBVerified, employees.FieldDOBRemStatus, employees.FieldGenderVerified, employees.FieldGenderRemStatus, employees.FieldMobileNumberVerified, employees.FieldMobileNumberRemStatus, employees.FieldEmailIDVerified, employees.FieldEmailIDRemStatus, employees.FieldEmployeeCategoryCodeVerified, employees.FieldEmployeeCategoryCodeRemStatus, employees.FieldWithDisabilityVerified, employees.FieldWithDisabilityRemStatus, employees.FieldWithDisabilityRemarks, employees.FieldDisabilityTypeVerified, employees.FieldDisabilityTypeRemStatus, employees.FieldDisabilityPercentageVerified, employees.FieldDisabilityPercentageRemStatus, employees.FieldSignatureVerified, employees.FieldSignatureRemStatus, employees.FieldPhotoVerified, employees.FieldPhotoRemStatus, employees.FieldEmployeePostVerified, employees.FieldEmployeePostRemStatus, employees.FieldEmployeeDesignationVerified, employees.FieldEmployeeDesignationRemStatus, employees.FieldCircleVerified, employees.FieldCircleRemStatus, employees.FieldRegionVerified, employees.FieldRegionRemStatus, employees.FieldDivisionVerified, employees.FieldDivisionRemStatus, employees.FieldOfficeVerified, employees.FieldOfficeRemStatus, employees.FieldRoleVerified, employees.FieldRoleRemStatus, employees.FieldDCCSVerified, employees.FieldDCCSRemStatus, employees.FieldDCInPresentCadreVerified, employees.FieldDCInPresentCadreRemStatus, employees.FieldAPSWorking, employees.FieldAPSWorkingVerified, employees.FieldAPSWorkingRemStatus, employees.FieldProfilestatus:
			values[i] = new(sql.NullBool)
		case employees.FieldID, employees.FieldEmployeedID, employees.FieldMobileNumber, employees.FieldCategoryid, employees.FieldDisabilityPercentage, employees.FieldPostID, employees.FieldDesignationID, employees.FieldCircleID, employees.FieldRegionID, employees.FieldDivisionID, employees.FieldOfficeID, employees.FieldRoleUserCode:
			values[i] = new(sql.NullInt64)
		case employees.FieldIDRemarks, employees.FieldEmployeeName, employees.FieldNameRemarks, employees.FieldEmployeeFathersName, employees.FieldFathersNameRemarks, employees.FieldDOBRemarks, employees.FieldGender, employees.FieldGenderRemarks, employees.FieldMobileNumberRemarks, employees.FieldEmailID, employees.FieldEmailIDRemarks, employees.FieldEmployeeCategoryCode, employees.FieldEmployeeCategory, employees.FieldEmployeeCategoryCodeRemarks, employees.FieldWithDisability, employees.FieldDisabilityType, employees.FieldDisabilityTypeRemarks, employees.FieldDisabilityPercentageRemarks, employees.FieldSignature, employees.FieldSignatureRemarks, employees.FieldPhoto, employees.FieldPhotoRemarks, employees.FieldPostCode, employees.FieldEmployeePost, employees.FieldEmployeePostRemarks, employees.FieldEmployeeDesignation, employees.FieldEmployeeDesignationRemarks, employees.FieldCircleName, employees.FieldCircleRemarks, employees.FieldRegionName, employees.FieldRegionRemarks, employees.FieldDivisionName, employees.FieldDivisionRemarks, employees.FieldOfficeName, employees.FieldOfficeRemarks, employees.FieldRole, employees.FieldRoleRemarks, employees.FieldDCCSRemarks, employees.FieldDCInPresentCadreRemarks, employees.FieldAPSWorkingRemarks:
			values[i] = new(sql.NullString)
		case employees.FieldDOB, employees.FieldDCCS, employees.FieldDCInPresentCadre:
			values[i] = new(sql.NullTime)
		case employees.ForeignKeys[0]: // directorate_users_employee_user
			values[i] = new(sql.NullInt64)
		case employees.ForeignKeys[1]: // employee_posts_emp_posts
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Employees fields.
func (e *Employees) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case employees.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			e.ID = int32(value.Int64)
		case employees.FieldEmployeedID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field EmployeedID", values[i])
			} else if value.Valid {
				e.EmployeedID = int32(value.Int64)
			}
		case employees.FieldIDVerified:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field IDVerified", values[i])
			} else if value.Valid {
				e.IDVerified = value.Bool
			}
		case employees.FieldIDRemStatus:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field IDRemStatus", values[i])
			} else if value.Valid {
				e.IDRemStatus = value.Bool
			}
		case employees.FieldIDRemarks:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field IDRemarks", values[i])
			} else if value.Valid {
				e.IDRemarks = value.String
			}
		case employees.FieldEmployeeName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field EmployeeName", values[i])
			} else if value.Valid {
				e.EmployeeName = value.String
			}
		case employees.FieldNameVerified:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field nameVerified", values[i])
			} else if value.Valid {
				e.NameVerified = value.Bool
			}
		case employees.FieldNameRemStatus:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field nameRemStatus", values[i])
			} else if value.Valid {
				e.NameRemStatus = value.Bool
			}
		case employees.FieldNameRemarks:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field nameRemarks", values[i])
			} else if value.Valid {
				e.NameRemarks = value.String
			}
		case employees.FieldEmployeeFathersName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field EmployeeFathersName", values[i])
			} else if value.Valid {
				e.EmployeeFathersName = value.String
			}
		case employees.FieldFathersNameVerified:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field FathersNameVerified", values[i])
			} else if value.Valid {
				e.FathersNameVerified = value.Bool
			}
		case employees.FieldFathersNameRemStatus:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field FathersNameRemStatus", values[i])
			} else if value.Valid {
				e.FathersNameRemStatus = value.Bool
			}
		case employees.FieldFathersNameRemarks:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field FathersNameRemarks", values[i])
			} else if value.Valid {
				e.FathersNameRemarks = value.String
			}
		case employees.FieldDOB:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field DOB", values[i])
			} else if value.Valid {
				e.DOB = value.Time
			}
		case employees.FieldDOBVerified:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field DOBVerified", values[i])
			} else if value.Valid {
				e.DOBVerified = value.Bool
			}
		case employees.FieldDOBRemStatus:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field DOBRemStatus", values[i])
			} else if value.Valid {
				e.DOBRemStatus = value.Bool
			}
		case employees.FieldDOBRemarks:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field DOBRemarks", values[i])
			} else if value.Valid {
				e.DOBRemarks = value.String
			}
		case employees.FieldGender:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Gender", values[i])
			} else if value.Valid {
				e.Gender = employees.Gender(value.String)
			}
		case employees.FieldGenderVerified:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field genderVerified", values[i])
			} else if value.Valid {
				e.GenderVerified = value.Bool
			}
		case employees.FieldGenderRemStatus:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field genderRemStatus", values[i])
			} else if value.Valid {
				e.GenderRemStatus = value.Bool
			}
		case employees.FieldGenderRemarks:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field genderRemarks", values[i])
			} else if value.Valid {
				e.GenderRemarks = value.String
			}
		case employees.FieldMobileNumber:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field MobileNumber", values[i])
			} else if value.Valid {
				e.MobileNumber = value.Int64
			}
		case employees.FieldMobileNumberVerified:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field MobileNumberVerified", values[i])
			} else if value.Valid {
				e.MobileNumberVerified = value.Bool
			}
		case employees.FieldMobileNumberRemStatus:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field MobileNumberRemStatus", values[i])
			} else if value.Valid {
				e.MobileNumberRemStatus = value.Bool
			}
		case employees.FieldMobileNumberRemarks:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field MobileNumberRemarks", values[i])
			} else if value.Valid {
				e.MobileNumberRemarks = value.String
			}
		case employees.FieldEmailID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field EmailID", values[i])
			} else if value.Valid {
				e.EmailID = value.String
			}
		case employees.FieldEmailIDVerified:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field EmailIDVerified", values[i])
			} else if value.Valid {
				e.EmailIDVerified = value.Bool
			}
		case employees.FieldEmailIDRemStatus:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field EmailIDRemStatus", values[i])
			} else if value.Valid {
				e.EmailIDRemStatus = value.Bool
			}
		case employees.FieldEmailIDRemarks:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field EmailIDRemarks", values[i])
			} else if value.Valid {
				e.EmailIDRemarks = value.String
			}
		case employees.FieldCategoryid:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field Categoryid", values[i])
			} else if value.Valid {
				e.Categoryid = int32(value.Int64)
			}
		case employees.FieldEmployeeCategoryCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field EmployeeCategoryCode", values[i])
			} else if value.Valid {
				e.EmployeeCategoryCode = value.String
			}
		case employees.FieldEmployeeCategory:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field EmployeeCategory", values[i])
			} else if value.Valid {
				e.EmployeeCategory = value.String
			}
		case employees.FieldEmployeeCategoryCodeVerified:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field EmployeeCategoryCodeVerified", values[i])
			} else if value.Valid {
				e.EmployeeCategoryCodeVerified = value.Bool
			}
		case employees.FieldEmployeeCategoryCodeRemStatus:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field EmployeeCategoryCodeRemStatus", values[i])
			} else if value.Valid {
				e.EmployeeCategoryCodeRemStatus = value.Bool
			}
		case employees.FieldEmployeeCategoryCodeRemarks:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field EmployeeCategoryCodeRemarks", values[i])
			} else if value.Valid {
				e.EmployeeCategoryCodeRemarks = value.String
			}
		case employees.FieldWithDisability:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field WithDisability", values[i])
			} else if value.Valid {
				e.WithDisability = value.String
			}
		case employees.FieldWithDisabilityVerified:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field WithDisabilityVerified", values[i])
			} else if value.Valid {
				e.WithDisabilityVerified = value.Bool
			}
		case employees.FieldWithDisabilityRemStatus:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field WithDisabilityRemStatus", values[i])
			} else if value.Valid {
				e.WithDisabilityRemStatus = value.Bool
			}
		case employees.FieldWithDisabilityRemarks:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field WithDisabilityRemarks", values[i])
			} else if value.Valid {
				e.WithDisabilityRemarks = value.Bool
			}
		case employees.FieldDisabilityType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field DisabilityType", values[i])
			} else if value.Valid {
				e.DisabilityType = value.String
			}
		case employees.FieldDisabilityTypeVerified:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field DisabilityTypeVerified", values[i])
			} else if value.Valid {
				e.DisabilityTypeVerified = value.Bool
			}
		case employees.FieldDisabilityTypeRemStatus:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field DisabilityTypeRemStatus", values[i])
			} else if value.Valid {
				e.DisabilityTypeRemStatus = value.Bool
			}
		case employees.FieldDisabilityTypeRemarks:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field DisabilityTypeRemarks", values[i])
			} else if value.Valid {
				e.DisabilityTypeRemarks = value.String
			}
		case employees.FieldDisabilityPercentage:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field DisabilityPercentage", values[i])
			} else if value.Valid {
				e.DisabilityPercentage = int32(value.Int64)
			}
		case employees.FieldDisabilityPercentageVerified:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field DisabilityPercentageVerified", values[i])
			} else if value.Valid {
				e.DisabilityPercentageVerified = value.Bool
			}
		case employees.FieldDisabilityPercentageRemStatus:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field DisabilityPercentageRemStatus", values[i])
			} else if value.Valid {
				e.DisabilityPercentageRemStatus = value.Bool
			}
		case employees.FieldDisabilityPercentageRemarks:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field DisabilityPercentageRemarks", values[i])
			} else if value.Valid {
				e.DisabilityPercentageRemarks = value.String
			}
		case employees.FieldSignature:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Signature", values[i])
			} else if value.Valid {
				e.Signature = value.String
			}
		case employees.FieldSignatureVerified:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field SignatureVerified", values[i])
			} else if value.Valid {
				e.SignatureVerified = value.Bool
			}
		case employees.FieldSignatureRemStatus:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field SignatureRemStatus", values[i])
			} else if value.Valid {
				e.SignatureRemStatus = value.Bool
			}
		case employees.FieldSignatureRemarks:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field SignatureRemarks", values[i])
			} else if value.Valid {
				e.SignatureRemarks = value.String
			}
		case employees.FieldPhoto:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Photo", values[i])
			} else if value.Valid {
				e.Photo = value.String
			}
		case employees.FieldPhotoVerified:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field PhotoVerified", values[i])
			} else if value.Valid {
				e.PhotoVerified = value.Bool
			}
		case employees.FieldPhotoRemStatus:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field PhotoRemStatus", values[i])
			} else if value.Valid {
				e.PhotoRemStatus = value.Bool
			}
		case employees.FieldPhotoRemarks:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field PhotoRemarks", values[i])
			} else if value.Valid {
				e.PhotoRemarks = value.String
			}
		case employees.FieldPostID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field PostID", values[i])
			} else if value.Valid {
				e.PostID = int32(value.Int64)
			}
		case employees.FieldPostCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field PostCode", values[i])
			} else if value.Valid {
				e.PostCode = value.String
			}
		case employees.FieldEmployeePost:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field EmployeePost", values[i])
			} else if value.Valid {
				e.EmployeePost = value.String
			}
		case employees.FieldEmployeePostVerified:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field EmployeePostVerified", values[i])
			} else if value.Valid {
				e.EmployeePostVerified = value.Bool
			}
		case employees.FieldEmployeePostRemStatus:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field EmployeePostRemStatus", values[i])
			} else if value.Valid {
				e.EmployeePostRemStatus = value.Bool
			}
		case employees.FieldEmployeePostRemarks:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field EmployeePostRemarks", values[i])
			} else if value.Valid {
				e.EmployeePostRemarks = value.String
			}
		case employees.FieldDesignationID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field DesignationID", values[i])
			} else if value.Valid {
				e.DesignationID = int32(value.Int64)
			}
		case employees.FieldEmployeeDesignation:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field EmployeeDesignation", values[i])
			} else if value.Valid {
				e.EmployeeDesignation = value.String
			}
		case employees.FieldEmployeeDesignationVerified:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field EmployeeDesignationVerified", values[i])
			} else if value.Valid {
				e.EmployeeDesignationVerified = value.Bool
			}
		case employees.FieldEmployeeDesignationRemStatus:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field EmployeeDesignationRemStatus", values[i])
			} else if value.Valid {
				e.EmployeeDesignationRemStatus = value.Bool
			}
		case employees.FieldEmployeeDesignationRemarks:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field EmployeeDesignationRemarks", values[i])
			} else if value.Valid {
				e.EmployeeDesignationRemarks = value.String
			}
		case employees.FieldCircleID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field CircleID", values[i])
			} else if value.Valid {
				e.CircleID = int32(value.Int64)
			}
		case employees.FieldCircleName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field CircleName", values[i])
			} else if value.Valid {
				e.CircleName = value.String
			}
		case employees.FieldCircleVerified:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field CircleVerified", values[i])
			} else if value.Valid {
				e.CircleVerified = value.Bool
			}
		case employees.FieldCircleRemStatus:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field CircleRemStatus", values[i])
			} else if value.Valid {
				e.CircleRemStatus = value.Bool
			}
		case employees.FieldCircleRemarks:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field CircleRemarks", values[i])
			} else if value.Valid {
				e.CircleRemarks = value.String
			}
		case employees.FieldRegionID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field RegionID", values[i])
			} else if value.Valid {
				e.RegionID = int32(value.Int64)
			}
		case employees.FieldRegionName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field RegionName", values[i])
			} else if value.Valid {
				e.RegionName = value.String
			}
		case employees.FieldRegionVerified:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field RegionVerified", values[i])
			} else if value.Valid {
				e.RegionVerified = value.Bool
			}
		case employees.FieldRegionRemStatus:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field RegionRemStatus", values[i])
			} else if value.Valid {
				e.RegionRemStatus = value.Bool
			}
		case employees.FieldRegionRemarks:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field RegionRemarks", values[i])
			} else if value.Valid {
				e.RegionRemarks = value.String
			}
		case employees.FieldDivisionID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field DivisionID", values[i])
			} else if value.Valid {
				e.DivisionID = int32(value.Int64)
			}
		case employees.FieldDivisionName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field DivisionName", values[i])
			} else if value.Valid {
				e.DivisionName = value.String
			}
		case employees.FieldDivisionVerified:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field DivisionVerified", values[i])
			} else if value.Valid {
				e.DivisionVerified = value.Bool
			}
		case employees.FieldDivisionRemStatus:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field DivisionRemStatus", values[i])
			} else if value.Valid {
				e.DivisionRemStatus = value.Bool
			}
		case employees.FieldDivisionRemarks:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field DivisionRemarks", values[i])
			} else if value.Valid {
				e.DivisionRemarks = value.String
			}
		case employees.FieldOfficeID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field OfficeID", values[i])
			} else if value.Valid {
				e.OfficeID = int32(value.Int64)
			}
		case employees.FieldOfficeName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field OfficeName", values[i])
			} else if value.Valid {
				e.OfficeName = value.String
			}
		case employees.FieldOfficeVerified:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field OfficeVerified", values[i])
			} else if value.Valid {
				e.OfficeVerified = value.Bool
			}
		case employees.FieldOfficeRemStatus:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field OfficeRemStatus", values[i])
			} else if value.Valid {
				e.OfficeRemStatus = value.Bool
			}
		case employees.FieldOfficeRemarks:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field OfficeRemarks", values[i])
			} else if value.Valid {
				e.OfficeRemarks = value.String
			}
		case employees.FieldRole:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Role", values[i])
			} else if value.Valid {
				e.Role = value.String
			}
		case employees.FieldRoleVerified:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field RoleVerified", values[i])
			} else if value.Valid {
				e.RoleVerified = value.Bool
			}
		case employees.FieldRoleRemStatus:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field RoleRemStatus", values[i])
			} else if value.Valid {
				e.RoleRemStatus = value.Bool
			}
		case employees.FieldRoleRemarks:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field RoleRemarks", values[i])
			} else if value.Valid {
				e.RoleRemarks = value.String
			}
		case employees.FieldDCCS:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field DCCS", values[i])
			} else if value.Valid {
				e.DCCS = value.Time
			}
		case employees.FieldDCCSVerified:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field DCCSVerified", values[i])
			} else if value.Valid {
				e.DCCSVerified = value.Bool
			}
		case employees.FieldDCCSRemStatus:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field DCCSRemStatus", values[i])
			} else if value.Valid {
				e.DCCSRemStatus = value.Bool
			}
		case employees.FieldDCCSRemarks:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field DCCSRemarks", values[i])
			} else if value.Valid {
				e.DCCSRemarks = value.String
			}
		case employees.FieldDCInPresentCadre:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field DCInPresentCadre", values[i])
			} else if value.Valid {
				e.DCInPresentCadre = value.Time
			}
		case employees.FieldDCInPresentCadreVerified:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field DCInPresentCadreVerified", values[i])
			} else if value.Valid {
				e.DCInPresentCadreVerified = value.Bool
			}
		case employees.FieldDCInPresentCadreRemStatus:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field DCInPresentCadreRemStatus", values[i])
			} else if value.Valid {
				e.DCInPresentCadreRemStatus = value.Bool
			}
		case employees.FieldDCInPresentCadreRemarks:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field DCInPresentCadreRemarks", values[i])
			} else if value.Valid {
				e.DCInPresentCadreRemarks = value.String
			}
		case employees.FieldAPSWorking:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field APSWorking", values[i])
			} else if value.Valid {
				e.APSWorking = value.Bool
			}
		case employees.FieldAPSWorkingVerified:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field APSWorkingVerified", values[i])
			} else if value.Valid {
				e.APSWorkingVerified = value.Bool
			}
		case employees.FieldAPSWorkingRemStatus:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field APSWorkingRemStatus", values[i])
			} else if value.Valid {
				e.APSWorkingRemStatus = value.Bool
			}
		case employees.FieldAPSWorkingRemarks:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field APSWorkingRemarks", values[i])
			} else if value.Valid {
				e.APSWorkingRemarks = value.String
			}
		case employees.FieldProfilestatus:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field profilestatus", values[i])
			} else if value.Valid {
				e.Profilestatus = value.Bool
			}
		case employees.FieldRoleUserCode:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field RoleUserCode", values[i])
			} else if value.Valid {
				e.RoleUserCode = int32(value.Int64)
			}
		case employees.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field directorate_users_employee_user", value)
			} else if value.Valid {
				e.directorate_users_employee_user = new(int32)
				*e.directorate_users_employee_user = int32(value.Int64)
			}
		case employees.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field employee_posts_emp_posts", value)
			} else if value.Valid {
				e.employee_posts_emp_posts = new(int32)
				*e.employee_posts_emp_posts = int32(value.Int64)
			}
		default:
			e.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Employees.
// This includes values selected through modifiers, order, etc.
func (e *Employees) Value(name string) (ent.Value, error) {
	return e.selectValues.Get(name)
}

// Update returns a builder for updating this Employees.
// Note that you need to call Employees.Unwrap() before calling this method if this Employees
// was returned from a transaction, and the transaction was committed or rolled back.
func (e *Employees) Update() *EmployeesUpdateOne {
	return NewEmployeesClient(e.config).UpdateOne(e)
}

// Unwrap unwraps the Employees entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (e *Employees) Unwrap() *Employees {
	_tx, ok := e.config.driver.(*txDriver)
	if !ok {
		panic("ent: Employees is not a transactional entity")
	}
	e.config.driver = _tx.drv
	return e
}

// String implements the fmt.Stringer.
func (e *Employees) String() string {
	var builder strings.Builder
	builder.WriteString("Employees(")
	builder.WriteString(fmt.Sprintf("id=%v, ", e.ID))
	builder.WriteString("EmployeedID=")
	builder.WriteString(fmt.Sprintf("%v", e.EmployeedID))
	builder.WriteString(", ")
	builder.WriteString("IDVerified=")
	builder.WriteString(fmt.Sprintf("%v", e.IDVerified))
	builder.WriteString(", ")
	builder.WriteString("IDRemStatus=")
	builder.WriteString(fmt.Sprintf("%v", e.IDRemStatus))
	builder.WriteString(", ")
	builder.WriteString("IDRemarks=")
	builder.WriteString(e.IDRemarks)
	builder.WriteString(", ")
	builder.WriteString("EmployeeName=")
	builder.WriteString(e.EmployeeName)
	builder.WriteString(", ")
	builder.WriteString("nameVerified=")
	builder.WriteString(fmt.Sprintf("%v", e.NameVerified))
	builder.WriteString(", ")
	builder.WriteString("nameRemStatus=")
	builder.WriteString(fmt.Sprintf("%v", e.NameRemStatus))
	builder.WriteString(", ")
	builder.WriteString("nameRemarks=")
	builder.WriteString(e.NameRemarks)
	builder.WriteString(", ")
	builder.WriteString("EmployeeFathersName=")
	builder.WriteString(e.EmployeeFathersName)
	builder.WriteString(", ")
	builder.WriteString("FathersNameVerified=")
	builder.WriteString(fmt.Sprintf("%v", e.FathersNameVerified))
	builder.WriteString(", ")
	builder.WriteString("FathersNameRemStatus=")
	builder.WriteString(fmt.Sprintf("%v", e.FathersNameRemStatus))
	builder.WriteString(", ")
	builder.WriteString("FathersNameRemarks=")
	builder.WriteString(e.FathersNameRemarks)
	builder.WriteString(", ")
	builder.WriteString("DOB=")
	builder.WriteString(e.DOB.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("DOBVerified=")
	builder.WriteString(fmt.Sprintf("%v", e.DOBVerified))
	builder.WriteString(", ")
	builder.WriteString("DOBRemStatus=")
	builder.WriteString(fmt.Sprintf("%v", e.DOBRemStatus))
	builder.WriteString(", ")
	builder.WriteString("DOBRemarks=")
	builder.WriteString(e.DOBRemarks)
	builder.WriteString(", ")
	builder.WriteString("Gender=")
	builder.WriteString(fmt.Sprintf("%v", e.Gender))
	builder.WriteString(", ")
	builder.WriteString("genderVerified=")
	builder.WriteString(fmt.Sprintf("%v", e.GenderVerified))
	builder.WriteString(", ")
	builder.WriteString("genderRemStatus=")
	builder.WriteString(fmt.Sprintf("%v", e.GenderRemStatus))
	builder.WriteString(", ")
	builder.WriteString("genderRemarks=")
	builder.WriteString(e.GenderRemarks)
	builder.WriteString(", ")
	builder.WriteString("MobileNumber=")
	builder.WriteString(fmt.Sprintf("%v", e.MobileNumber))
	builder.WriteString(", ")
	builder.WriteString("MobileNumberVerified=")
	builder.WriteString(fmt.Sprintf("%v", e.MobileNumberVerified))
	builder.WriteString(", ")
	builder.WriteString("MobileNumberRemStatus=")
	builder.WriteString(fmt.Sprintf("%v", e.MobileNumberRemStatus))
	builder.WriteString(", ")
	builder.WriteString("MobileNumberRemarks=")
	builder.WriteString(e.MobileNumberRemarks)
	builder.WriteString(", ")
	builder.WriteString("EmailID=")
	builder.WriteString(e.EmailID)
	builder.WriteString(", ")
	builder.WriteString("EmailIDVerified=")
	builder.WriteString(fmt.Sprintf("%v", e.EmailIDVerified))
	builder.WriteString(", ")
	builder.WriteString("EmailIDRemStatus=")
	builder.WriteString(fmt.Sprintf("%v", e.EmailIDRemStatus))
	builder.WriteString(", ")
	builder.WriteString("EmailIDRemarks=")
	builder.WriteString(e.EmailIDRemarks)
	builder.WriteString(", ")
	builder.WriteString("Categoryid=")
	builder.WriteString(fmt.Sprintf("%v", e.Categoryid))
	builder.WriteString(", ")
	builder.WriteString("EmployeeCategoryCode=")
	builder.WriteString(e.EmployeeCategoryCode)
	builder.WriteString(", ")
	builder.WriteString("EmployeeCategory=")
	builder.WriteString(e.EmployeeCategory)
	builder.WriteString(", ")
	builder.WriteString("EmployeeCategoryCodeVerified=")
	builder.WriteString(fmt.Sprintf("%v", e.EmployeeCategoryCodeVerified))
	builder.WriteString(", ")
	builder.WriteString("EmployeeCategoryCodeRemStatus=")
	builder.WriteString(fmt.Sprintf("%v", e.EmployeeCategoryCodeRemStatus))
	builder.WriteString(", ")
	builder.WriteString("EmployeeCategoryCodeRemarks=")
	builder.WriteString(e.EmployeeCategoryCodeRemarks)
	builder.WriteString(", ")
	builder.WriteString("WithDisability=")
	builder.WriteString(e.WithDisability)
	builder.WriteString(", ")
	builder.WriteString("WithDisabilityVerified=")
	builder.WriteString(fmt.Sprintf("%v", e.WithDisabilityVerified))
	builder.WriteString(", ")
	builder.WriteString("WithDisabilityRemStatus=")
	builder.WriteString(fmt.Sprintf("%v", e.WithDisabilityRemStatus))
	builder.WriteString(", ")
	builder.WriteString("WithDisabilityRemarks=")
	builder.WriteString(fmt.Sprintf("%v", e.WithDisabilityRemarks))
	builder.WriteString(", ")
	builder.WriteString("DisabilityType=")
	builder.WriteString(e.DisabilityType)
	builder.WriteString(", ")
	builder.WriteString("DisabilityTypeVerified=")
	builder.WriteString(fmt.Sprintf("%v", e.DisabilityTypeVerified))
	builder.WriteString(", ")
	builder.WriteString("DisabilityTypeRemStatus=")
	builder.WriteString(fmt.Sprintf("%v", e.DisabilityTypeRemStatus))
	builder.WriteString(", ")
	builder.WriteString("DisabilityTypeRemarks=")
	builder.WriteString(e.DisabilityTypeRemarks)
	builder.WriteString(", ")
	builder.WriteString("DisabilityPercentage=")
	builder.WriteString(fmt.Sprintf("%v", e.DisabilityPercentage))
	builder.WriteString(", ")
	builder.WriteString("DisabilityPercentageVerified=")
	builder.WriteString(fmt.Sprintf("%v", e.DisabilityPercentageVerified))
	builder.WriteString(", ")
	builder.WriteString("DisabilityPercentageRemStatus=")
	builder.WriteString(fmt.Sprintf("%v", e.DisabilityPercentageRemStatus))
	builder.WriteString(", ")
	builder.WriteString("DisabilityPercentageRemarks=")
	builder.WriteString(e.DisabilityPercentageRemarks)
	builder.WriteString(", ")
	builder.WriteString("Signature=")
	builder.WriteString(e.Signature)
	builder.WriteString(", ")
	builder.WriteString("SignatureVerified=")
	builder.WriteString(fmt.Sprintf("%v", e.SignatureVerified))
	builder.WriteString(", ")
	builder.WriteString("SignatureRemStatus=")
	builder.WriteString(fmt.Sprintf("%v", e.SignatureRemStatus))
	builder.WriteString(", ")
	builder.WriteString("SignatureRemarks=")
	builder.WriteString(e.SignatureRemarks)
	builder.WriteString(", ")
	builder.WriteString("Photo=")
	builder.WriteString(e.Photo)
	builder.WriteString(", ")
	builder.WriteString("PhotoVerified=")
	builder.WriteString(fmt.Sprintf("%v", e.PhotoVerified))
	builder.WriteString(", ")
	builder.WriteString("PhotoRemStatus=")
	builder.WriteString(fmt.Sprintf("%v", e.PhotoRemStatus))
	builder.WriteString(", ")
	builder.WriteString("PhotoRemarks=")
	builder.WriteString(e.PhotoRemarks)
	builder.WriteString(", ")
	builder.WriteString("PostID=")
	builder.WriteString(fmt.Sprintf("%v", e.PostID))
	builder.WriteString(", ")
	builder.WriteString("PostCode=")
	builder.WriteString(e.PostCode)
	builder.WriteString(", ")
	builder.WriteString("EmployeePost=")
	builder.WriteString(e.EmployeePost)
	builder.WriteString(", ")
	builder.WriteString("EmployeePostVerified=")
	builder.WriteString(fmt.Sprintf("%v", e.EmployeePostVerified))
	builder.WriteString(", ")
	builder.WriteString("EmployeePostRemStatus=")
	builder.WriteString(fmt.Sprintf("%v", e.EmployeePostRemStatus))
	builder.WriteString(", ")
	builder.WriteString("EmployeePostRemarks=")
	builder.WriteString(e.EmployeePostRemarks)
	builder.WriteString(", ")
	builder.WriteString("DesignationID=")
	builder.WriteString(fmt.Sprintf("%v", e.DesignationID))
	builder.WriteString(", ")
	builder.WriteString("EmployeeDesignation=")
	builder.WriteString(e.EmployeeDesignation)
	builder.WriteString(", ")
	builder.WriteString("EmployeeDesignationVerified=")
	builder.WriteString(fmt.Sprintf("%v", e.EmployeeDesignationVerified))
	builder.WriteString(", ")
	builder.WriteString("EmployeeDesignationRemStatus=")
	builder.WriteString(fmt.Sprintf("%v", e.EmployeeDesignationRemStatus))
	builder.WriteString(", ")
	builder.WriteString("EmployeeDesignationRemarks=")
	builder.WriteString(e.EmployeeDesignationRemarks)
	builder.WriteString(", ")
	builder.WriteString("CircleID=")
	builder.WriteString(fmt.Sprintf("%v", e.CircleID))
	builder.WriteString(", ")
	builder.WriteString("CircleName=")
	builder.WriteString(e.CircleName)
	builder.WriteString(", ")
	builder.WriteString("CircleVerified=")
	builder.WriteString(fmt.Sprintf("%v", e.CircleVerified))
	builder.WriteString(", ")
	builder.WriteString("CircleRemStatus=")
	builder.WriteString(fmt.Sprintf("%v", e.CircleRemStatus))
	builder.WriteString(", ")
	builder.WriteString("CircleRemarks=")
	builder.WriteString(e.CircleRemarks)
	builder.WriteString(", ")
	builder.WriteString("RegionID=")
	builder.WriteString(fmt.Sprintf("%v", e.RegionID))
	builder.WriteString(", ")
	builder.WriteString("RegionName=")
	builder.WriteString(e.RegionName)
	builder.WriteString(", ")
	builder.WriteString("RegionVerified=")
	builder.WriteString(fmt.Sprintf("%v", e.RegionVerified))
	builder.WriteString(", ")
	builder.WriteString("RegionRemStatus=")
	builder.WriteString(fmt.Sprintf("%v", e.RegionRemStatus))
	builder.WriteString(", ")
	builder.WriteString("RegionRemarks=")
	builder.WriteString(e.RegionRemarks)
	builder.WriteString(", ")
	builder.WriteString("DivisionID=")
	builder.WriteString(fmt.Sprintf("%v", e.DivisionID))
	builder.WriteString(", ")
	builder.WriteString("DivisionName=")
	builder.WriteString(e.DivisionName)
	builder.WriteString(", ")
	builder.WriteString("DivisionVerified=")
	builder.WriteString(fmt.Sprintf("%v", e.DivisionVerified))
	builder.WriteString(", ")
	builder.WriteString("DivisionRemStatus=")
	builder.WriteString(fmt.Sprintf("%v", e.DivisionRemStatus))
	builder.WriteString(", ")
	builder.WriteString("DivisionRemarks=")
	builder.WriteString(e.DivisionRemarks)
	builder.WriteString(", ")
	builder.WriteString("OfficeID=")
	builder.WriteString(fmt.Sprintf("%v", e.OfficeID))
	builder.WriteString(", ")
	builder.WriteString("OfficeName=")
	builder.WriteString(e.OfficeName)
	builder.WriteString(", ")
	builder.WriteString("OfficeVerified=")
	builder.WriteString(fmt.Sprintf("%v", e.OfficeVerified))
	builder.WriteString(", ")
	builder.WriteString("OfficeRemStatus=")
	builder.WriteString(fmt.Sprintf("%v", e.OfficeRemStatus))
	builder.WriteString(", ")
	builder.WriteString("OfficeRemarks=")
	builder.WriteString(e.OfficeRemarks)
	builder.WriteString(", ")
	builder.WriteString("Role=")
	builder.WriteString(e.Role)
	builder.WriteString(", ")
	builder.WriteString("RoleVerified=")
	builder.WriteString(fmt.Sprintf("%v", e.RoleVerified))
	builder.WriteString(", ")
	builder.WriteString("RoleRemStatus=")
	builder.WriteString(fmt.Sprintf("%v", e.RoleRemStatus))
	builder.WriteString(", ")
	builder.WriteString("RoleRemarks=")
	builder.WriteString(e.RoleRemarks)
	builder.WriteString(", ")
	builder.WriteString("DCCS=")
	builder.WriteString(e.DCCS.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("DCCSVerified=")
	builder.WriteString(fmt.Sprintf("%v", e.DCCSVerified))
	builder.WriteString(", ")
	builder.WriteString("DCCSRemStatus=")
	builder.WriteString(fmt.Sprintf("%v", e.DCCSRemStatus))
	builder.WriteString(", ")
	builder.WriteString("DCCSRemarks=")
	builder.WriteString(e.DCCSRemarks)
	builder.WriteString(", ")
	builder.WriteString("DCInPresentCadre=")
	builder.WriteString(e.DCInPresentCadre.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("DCInPresentCadreVerified=")
	builder.WriteString(fmt.Sprintf("%v", e.DCInPresentCadreVerified))
	builder.WriteString(", ")
	builder.WriteString("DCInPresentCadreRemStatus=")
	builder.WriteString(fmt.Sprintf("%v", e.DCInPresentCadreRemStatus))
	builder.WriteString(", ")
	builder.WriteString("DCInPresentCadreRemarks=")
	builder.WriteString(e.DCInPresentCadreRemarks)
	builder.WriteString(", ")
	builder.WriteString("APSWorking=")
	builder.WriteString(fmt.Sprintf("%v", e.APSWorking))
	builder.WriteString(", ")
	builder.WriteString("APSWorkingVerified=")
	builder.WriteString(fmt.Sprintf("%v", e.APSWorkingVerified))
	builder.WriteString(", ")
	builder.WriteString("APSWorkingRemStatus=")
	builder.WriteString(fmt.Sprintf("%v", e.APSWorkingRemStatus))
	builder.WriteString(", ")
	builder.WriteString("APSWorkingRemarks=")
	builder.WriteString(e.APSWorkingRemarks)
	builder.WriteString(", ")
	builder.WriteString("profilestatus=")
	builder.WriteString(fmt.Sprintf("%v", e.Profilestatus))
	builder.WriteString(", ")
	builder.WriteString("RoleUserCode=")
	builder.WriteString(fmt.Sprintf("%v", e.RoleUserCode))
	builder.WriteByte(')')
	return builder.String()
}

// EmployeesSlice is a parsable slice of Employees.
type EmployeesSlice []*Employees
