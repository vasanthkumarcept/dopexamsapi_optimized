// Code generated by ent, DO NOT EDIT.

package exampostmapping

import (
	"recruit/ent/predicate"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldLTE(FieldID, id))
}

// ExamCode applies equality check predicate on the "ExamCode" field. It's identical to ExamCodeEQ.
func ExamCode(v int64) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldEQ(FieldExamCode, v))
}

// ExamShortDescription applies equality check predicate on the "ExamShortDescription" field. It's identical to ExamShortDescriptionEQ.
func ExamShortDescription(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldEQ(FieldExamShortDescription, v))
}

// PostType applies equality check predicate on the "PostType" field. It's identical to PostTypeEQ.
func PostType(v int) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldEQ(FieldPostType, v))
}

// PostTypeDescription applies equality check predicate on the "PostTypeDescription" field. It's identical to PostTypeDescriptionEQ.
func PostTypeDescription(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldEQ(FieldPostTypeDescription, v))
}

// FromPostCode applies equality check predicate on the "FromPostCode" field. It's identical to FromPostCodeEQ.
func FromPostCode(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldEQ(FieldFromPostCode, v))
}

// FromPostDescription applies equality check predicate on the "FromPostDescription" field. It's identical to FromPostDescriptionEQ.
func FromPostDescription(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldEQ(FieldFromPostDescription, v))
}

// ToPostCode applies equality check predicate on the "ToPostCode" field. It's identical to ToPostCodeEQ.
func ToPostCode(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldEQ(FieldToPostCode, v))
}

// ToPostDescription applies equality check predicate on the "ToPostDescription" field. It's identical to ToPostDescriptionEQ.
func ToPostDescription(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldEQ(FieldToPostDescription, v))
}

// AgeCriteria applies equality check predicate on the "AgeCriteria" field. It's identical to AgeCriteriaEQ.
func AgeCriteria(v int) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldEQ(FieldAgeCriteria, v))
}

// ServiceCriteria applies equality check predicate on the "ServiceCriteria" field. It's identical to ServiceCriteriaEQ.
func ServiceCriteria(v int) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldEQ(FieldServiceCriteria, v))
}

// EducationCode applies equality check predicate on the "EducationCode" field. It's identical to EducationCodeEQ.
func EducationCode(v int32) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldEQ(FieldEducationCode, v))
}

// EducationDescription applies equality check predicate on the "EducationDescription" field. It's identical to EducationDescriptionEQ.
func EducationDescription(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldEQ(FieldEducationDescription, v))
}

// OrderNumber applies equality check predicate on the "OrderNumber" field. It's identical to OrderNumberEQ.
func OrderNumber(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldEQ(FieldOrderNumber, v))
}

// CreatedById applies equality check predicate on the "CreatedById" field. It's identical to CreatedByIdEQ.
func CreatedById(v int64) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldEQ(FieldCreatedById, v))
}

// CreatedByUserName applies equality check predicate on the "CreatedByUserName" field. It's identical to CreatedByUserNameEQ.
func CreatedByUserName(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldEQ(FieldCreatedByUserName, v))
}

// CreatedByEmployeeId applies equality check predicate on the "CreatedByEmployeeId" field. It's identical to CreatedByEmployeeIdEQ.
func CreatedByEmployeeId(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldEQ(FieldCreatedByEmployeeId, v))
}

// CreatedByDesignation applies equality check predicate on the "CreatedByDesignation" field. It's identical to CreatedByDesignationEQ.
func CreatedByDesignation(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldEQ(FieldCreatedByDesignation, v))
}

// CreatedDate applies equality check predicate on the "CreatedDate" field. It's identical to CreatedDateEQ.
func CreatedDate(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldEQ(FieldCreatedDate, v))
}

// VerifiedById applies equality check predicate on the "VerifiedById" field. It's identical to VerifiedByIdEQ.
func VerifiedById(v int64) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldEQ(FieldVerifiedById, v))
}

// VerifiedByUserName applies equality check predicate on the "VerifiedByUserName" field. It's identical to VerifiedByUserNameEQ.
func VerifiedByUserName(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldEQ(FieldVerifiedByUserName, v))
}

// VerifiedByEmployeeId applies equality check predicate on the "VerifiedByEmployeeId" field. It's identical to VerifiedByEmployeeIdEQ.
func VerifiedByEmployeeId(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldEQ(FieldVerifiedByEmployeeId, v))
}

// VerifiedByDesignation applies equality check predicate on the "VerifiedByDesignation" field. It's identical to VerifiedByDesignationEQ.
func VerifiedByDesignation(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldEQ(FieldVerifiedByDesignation, v))
}

// VerifiedDate applies equality check predicate on the "VerifiedDate" field. It's identical to VerifiedDateEQ.
func VerifiedDate(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldEQ(FieldVerifiedDate, v))
}

// Status applies equality check predicate on the "Status" field. It's identical to StatusEQ.
func Status(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldEQ(FieldStatus, v))
}

// DeletedById applies equality check predicate on the "DeletedById" field. It's identical to DeletedByIdEQ.
func DeletedById(v int64) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldEQ(FieldDeletedById, v))
}

// DeletedByUserName applies equality check predicate on the "DeletedByUserName" field. It's identical to DeletedByUserNameEQ.
func DeletedByUserName(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldEQ(FieldDeletedByUserName, v))
}

// DeletedByEmployeeId applies equality check predicate on the "DeletedByEmployeeId" field. It's identical to DeletedByEmployeeIdEQ.
func DeletedByEmployeeId(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldEQ(FieldDeletedByEmployeeId, v))
}

// DeletedByDesignation applies equality check predicate on the "DeletedByDesignation" field. It's identical to DeletedByDesignationEQ.
func DeletedByDesignation(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldEQ(FieldDeletedByDesignation, v))
}

// DeletedDate applies equality check predicate on the "DeletedDate" field. It's identical to DeletedDateEQ.
func DeletedDate(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldEQ(FieldDeletedDate, v))
}

// ExamCodeEQ applies the EQ predicate on the "ExamCode" field.
func ExamCodeEQ(v int64) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldEQ(FieldExamCode, v))
}

// ExamCodeNEQ applies the NEQ predicate on the "ExamCode" field.
func ExamCodeNEQ(v int64) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldNEQ(FieldExamCode, v))
}

// ExamCodeIn applies the In predicate on the "ExamCode" field.
func ExamCodeIn(vs ...int64) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldIn(FieldExamCode, vs...))
}

// ExamCodeNotIn applies the NotIn predicate on the "ExamCode" field.
func ExamCodeNotIn(vs ...int64) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldNotIn(FieldExamCode, vs...))
}

// ExamCodeGT applies the GT predicate on the "ExamCode" field.
func ExamCodeGT(v int64) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldGT(FieldExamCode, v))
}

// ExamCodeGTE applies the GTE predicate on the "ExamCode" field.
func ExamCodeGTE(v int64) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldGTE(FieldExamCode, v))
}

// ExamCodeLT applies the LT predicate on the "ExamCode" field.
func ExamCodeLT(v int64) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldLT(FieldExamCode, v))
}

// ExamCodeLTE applies the LTE predicate on the "ExamCode" field.
func ExamCodeLTE(v int64) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldLTE(FieldExamCode, v))
}

// ExamCodeIsNil applies the IsNil predicate on the "ExamCode" field.
func ExamCodeIsNil() predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldIsNull(FieldExamCode))
}

// ExamCodeNotNil applies the NotNil predicate on the "ExamCode" field.
func ExamCodeNotNil() predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldNotNull(FieldExamCode))
}

// ExamShortDescriptionEQ applies the EQ predicate on the "ExamShortDescription" field.
func ExamShortDescriptionEQ(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldEQ(FieldExamShortDescription, v))
}

// ExamShortDescriptionNEQ applies the NEQ predicate on the "ExamShortDescription" field.
func ExamShortDescriptionNEQ(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldNEQ(FieldExamShortDescription, v))
}

// ExamShortDescriptionIn applies the In predicate on the "ExamShortDescription" field.
func ExamShortDescriptionIn(vs ...string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldIn(FieldExamShortDescription, vs...))
}

// ExamShortDescriptionNotIn applies the NotIn predicate on the "ExamShortDescription" field.
func ExamShortDescriptionNotIn(vs ...string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldNotIn(FieldExamShortDescription, vs...))
}

// ExamShortDescriptionGT applies the GT predicate on the "ExamShortDescription" field.
func ExamShortDescriptionGT(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldGT(FieldExamShortDescription, v))
}

// ExamShortDescriptionGTE applies the GTE predicate on the "ExamShortDescription" field.
func ExamShortDescriptionGTE(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldGTE(FieldExamShortDescription, v))
}

// ExamShortDescriptionLT applies the LT predicate on the "ExamShortDescription" field.
func ExamShortDescriptionLT(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldLT(FieldExamShortDescription, v))
}

// ExamShortDescriptionLTE applies the LTE predicate on the "ExamShortDescription" field.
func ExamShortDescriptionLTE(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldLTE(FieldExamShortDescription, v))
}

// ExamShortDescriptionContains applies the Contains predicate on the "ExamShortDescription" field.
func ExamShortDescriptionContains(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldContains(FieldExamShortDescription, v))
}

// ExamShortDescriptionHasPrefix applies the HasPrefix predicate on the "ExamShortDescription" field.
func ExamShortDescriptionHasPrefix(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldHasPrefix(FieldExamShortDescription, v))
}

// ExamShortDescriptionHasSuffix applies the HasSuffix predicate on the "ExamShortDescription" field.
func ExamShortDescriptionHasSuffix(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldHasSuffix(FieldExamShortDescription, v))
}

// ExamShortDescriptionIsNil applies the IsNil predicate on the "ExamShortDescription" field.
func ExamShortDescriptionIsNil() predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldIsNull(FieldExamShortDescription))
}

// ExamShortDescriptionNotNil applies the NotNil predicate on the "ExamShortDescription" field.
func ExamShortDescriptionNotNil() predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldNotNull(FieldExamShortDescription))
}

// ExamShortDescriptionEqualFold applies the EqualFold predicate on the "ExamShortDescription" field.
func ExamShortDescriptionEqualFold(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldEqualFold(FieldExamShortDescription, v))
}

// ExamShortDescriptionContainsFold applies the ContainsFold predicate on the "ExamShortDescription" field.
func ExamShortDescriptionContainsFold(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldContainsFold(FieldExamShortDescription, v))
}

// PostTypeEQ applies the EQ predicate on the "PostType" field.
func PostTypeEQ(v int) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldEQ(FieldPostType, v))
}

// PostTypeNEQ applies the NEQ predicate on the "PostType" field.
func PostTypeNEQ(v int) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldNEQ(FieldPostType, v))
}

// PostTypeIn applies the In predicate on the "PostType" field.
func PostTypeIn(vs ...int) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldIn(FieldPostType, vs...))
}

// PostTypeNotIn applies the NotIn predicate on the "PostType" field.
func PostTypeNotIn(vs ...int) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldNotIn(FieldPostType, vs...))
}

// PostTypeGT applies the GT predicate on the "PostType" field.
func PostTypeGT(v int) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldGT(FieldPostType, v))
}

// PostTypeGTE applies the GTE predicate on the "PostType" field.
func PostTypeGTE(v int) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldGTE(FieldPostType, v))
}

// PostTypeLT applies the LT predicate on the "PostType" field.
func PostTypeLT(v int) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldLT(FieldPostType, v))
}

// PostTypeLTE applies the LTE predicate on the "PostType" field.
func PostTypeLTE(v int) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldLTE(FieldPostType, v))
}

// PostTypeIsNil applies the IsNil predicate on the "PostType" field.
func PostTypeIsNil() predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldIsNull(FieldPostType))
}

// PostTypeNotNil applies the NotNil predicate on the "PostType" field.
func PostTypeNotNil() predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldNotNull(FieldPostType))
}

// PostTypeDescriptionEQ applies the EQ predicate on the "PostTypeDescription" field.
func PostTypeDescriptionEQ(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldEQ(FieldPostTypeDescription, v))
}

// PostTypeDescriptionNEQ applies the NEQ predicate on the "PostTypeDescription" field.
func PostTypeDescriptionNEQ(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldNEQ(FieldPostTypeDescription, v))
}

// PostTypeDescriptionIn applies the In predicate on the "PostTypeDescription" field.
func PostTypeDescriptionIn(vs ...string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldIn(FieldPostTypeDescription, vs...))
}

// PostTypeDescriptionNotIn applies the NotIn predicate on the "PostTypeDescription" field.
func PostTypeDescriptionNotIn(vs ...string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldNotIn(FieldPostTypeDescription, vs...))
}

// PostTypeDescriptionGT applies the GT predicate on the "PostTypeDescription" field.
func PostTypeDescriptionGT(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldGT(FieldPostTypeDescription, v))
}

// PostTypeDescriptionGTE applies the GTE predicate on the "PostTypeDescription" field.
func PostTypeDescriptionGTE(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldGTE(FieldPostTypeDescription, v))
}

// PostTypeDescriptionLT applies the LT predicate on the "PostTypeDescription" field.
func PostTypeDescriptionLT(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldLT(FieldPostTypeDescription, v))
}

// PostTypeDescriptionLTE applies the LTE predicate on the "PostTypeDescription" field.
func PostTypeDescriptionLTE(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldLTE(FieldPostTypeDescription, v))
}

// PostTypeDescriptionContains applies the Contains predicate on the "PostTypeDescription" field.
func PostTypeDescriptionContains(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldContains(FieldPostTypeDescription, v))
}

// PostTypeDescriptionHasPrefix applies the HasPrefix predicate on the "PostTypeDescription" field.
func PostTypeDescriptionHasPrefix(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldHasPrefix(FieldPostTypeDescription, v))
}

// PostTypeDescriptionHasSuffix applies the HasSuffix predicate on the "PostTypeDescription" field.
func PostTypeDescriptionHasSuffix(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldHasSuffix(FieldPostTypeDescription, v))
}

// PostTypeDescriptionIsNil applies the IsNil predicate on the "PostTypeDescription" field.
func PostTypeDescriptionIsNil() predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldIsNull(FieldPostTypeDescription))
}

// PostTypeDescriptionNotNil applies the NotNil predicate on the "PostTypeDescription" field.
func PostTypeDescriptionNotNil() predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldNotNull(FieldPostTypeDescription))
}

// PostTypeDescriptionEqualFold applies the EqualFold predicate on the "PostTypeDescription" field.
func PostTypeDescriptionEqualFold(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldEqualFold(FieldPostTypeDescription, v))
}

// PostTypeDescriptionContainsFold applies the ContainsFold predicate on the "PostTypeDescription" field.
func PostTypeDescriptionContainsFold(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldContainsFold(FieldPostTypeDescription, v))
}

// FromPostCodeEQ applies the EQ predicate on the "FromPostCode" field.
func FromPostCodeEQ(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldEQ(FieldFromPostCode, v))
}

// FromPostCodeNEQ applies the NEQ predicate on the "FromPostCode" field.
func FromPostCodeNEQ(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldNEQ(FieldFromPostCode, v))
}

// FromPostCodeIn applies the In predicate on the "FromPostCode" field.
func FromPostCodeIn(vs ...string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldIn(FieldFromPostCode, vs...))
}

// FromPostCodeNotIn applies the NotIn predicate on the "FromPostCode" field.
func FromPostCodeNotIn(vs ...string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldNotIn(FieldFromPostCode, vs...))
}

// FromPostCodeGT applies the GT predicate on the "FromPostCode" field.
func FromPostCodeGT(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldGT(FieldFromPostCode, v))
}

// FromPostCodeGTE applies the GTE predicate on the "FromPostCode" field.
func FromPostCodeGTE(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldGTE(FieldFromPostCode, v))
}

// FromPostCodeLT applies the LT predicate on the "FromPostCode" field.
func FromPostCodeLT(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldLT(FieldFromPostCode, v))
}

// FromPostCodeLTE applies the LTE predicate on the "FromPostCode" field.
func FromPostCodeLTE(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldLTE(FieldFromPostCode, v))
}

// FromPostCodeContains applies the Contains predicate on the "FromPostCode" field.
func FromPostCodeContains(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldContains(FieldFromPostCode, v))
}

// FromPostCodeHasPrefix applies the HasPrefix predicate on the "FromPostCode" field.
func FromPostCodeHasPrefix(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldHasPrefix(FieldFromPostCode, v))
}

// FromPostCodeHasSuffix applies the HasSuffix predicate on the "FromPostCode" field.
func FromPostCodeHasSuffix(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldHasSuffix(FieldFromPostCode, v))
}

// FromPostCodeIsNil applies the IsNil predicate on the "FromPostCode" field.
func FromPostCodeIsNil() predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldIsNull(FieldFromPostCode))
}

// FromPostCodeNotNil applies the NotNil predicate on the "FromPostCode" field.
func FromPostCodeNotNil() predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldNotNull(FieldFromPostCode))
}

// FromPostCodeEqualFold applies the EqualFold predicate on the "FromPostCode" field.
func FromPostCodeEqualFold(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldEqualFold(FieldFromPostCode, v))
}

// FromPostCodeContainsFold applies the ContainsFold predicate on the "FromPostCode" field.
func FromPostCodeContainsFold(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldContainsFold(FieldFromPostCode, v))
}

// FromPostDescriptionEQ applies the EQ predicate on the "FromPostDescription" field.
func FromPostDescriptionEQ(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldEQ(FieldFromPostDescription, v))
}

// FromPostDescriptionNEQ applies the NEQ predicate on the "FromPostDescription" field.
func FromPostDescriptionNEQ(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldNEQ(FieldFromPostDescription, v))
}

// FromPostDescriptionIn applies the In predicate on the "FromPostDescription" field.
func FromPostDescriptionIn(vs ...string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldIn(FieldFromPostDescription, vs...))
}

// FromPostDescriptionNotIn applies the NotIn predicate on the "FromPostDescription" field.
func FromPostDescriptionNotIn(vs ...string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldNotIn(FieldFromPostDescription, vs...))
}

// FromPostDescriptionGT applies the GT predicate on the "FromPostDescription" field.
func FromPostDescriptionGT(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldGT(FieldFromPostDescription, v))
}

// FromPostDescriptionGTE applies the GTE predicate on the "FromPostDescription" field.
func FromPostDescriptionGTE(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldGTE(FieldFromPostDescription, v))
}

// FromPostDescriptionLT applies the LT predicate on the "FromPostDescription" field.
func FromPostDescriptionLT(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldLT(FieldFromPostDescription, v))
}

// FromPostDescriptionLTE applies the LTE predicate on the "FromPostDescription" field.
func FromPostDescriptionLTE(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldLTE(FieldFromPostDescription, v))
}

// FromPostDescriptionContains applies the Contains predicate on the "FromPostDescription" field.
func FromPostDescriptionContains(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldContains(FieldFromPostDescription, v))
}

// FromPostDescriptionHasPrefix applies the HasPrefix predicate on the "FromPostDescription" field.
func FromPostDescriptionHasPrefix(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldHasPrefix(FieldFromPostDescription, v))
}

// FromPostDescriptionHasSuffix applies the HasSuffix predicate on the "FromPostDescription" field.
func FromPostDescriptionHasSuffix(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldHasSuffix(FieldFromPostDescription, v))
}

// FromPostDescriptionIsNil applies the IsNil predicate on the "FromPostDescription" field.
func FromPostDescriptionIsNil() predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldIsNull(FieldFromPostDescription))
}

// FromPostDescriptionNotNil applies the NotNil predicate on the "FromPostDescription" field.
func FromPostDescriptionNotNil() predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldNotNull(FieldFromPostDescription))
}

// FromPostDescriptionEqualFold applies the EqualFold predicate on the "FromPostDescription" field.
func FromPostDescriptionEqualFold(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldEqualFold(FieldFromPostDescription, v))
}

// FromPostDescriptionContainsFold applies the ContainsFold predicate on the "FromPostDescription" field.
func FromPostDescriptionContainsFold(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldContainsFold(FieldFromPostDescription, v))
}

// ToPostCodeEQ applies the EQ predicate on the "ToPostCode" field.
func ToPostCodeEQ(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldEQ(FieldToPostCode, v))
}

// ToPostCodeNEQ applies the NEQ predicate on the "ToPostCode" field.
func ToPostCodeNEQ(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldNEQ(FieldToPostCode, v))
}

// ToPostCodeIn applies the In predicate on the "ToPostCode" field.
func ToPostCodeIn(vs ...string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldIn(FieldToPostCode, vs...))
}

// ToPostCodeNotIn applies the NotIn predicate on the "ToPostCode" field.
func ToPostCodeNotIn(vs ...string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldNotIn(FieldToPostCode, vs...))
}

// ToPostCodeGT applies the GT predicate on the "ToPostCode" field.
func ToPostCodeGT(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldGT(FieldToPostCode, v))
}

// ToPostCodeGTE applies the GTE predicate on the "ToPostCode" field.
func ToPostCodeGTE(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldGTE(FieldToPostCode, v))
}

// ToPostCodeLT applies the LT predicate on the "ToPostCode" field.
func ToPostCodeLT(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldLT(FieldToPostCode, v))
}

// ToPostCodeLTE applies the LTE predicate on the "ToPostCode" field.
func ToPostCodeLTE(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldLTE(FieldToPostCode, v))
}

// ToPostCodeContains applies the Contains predicate on the "ToPostCode" field.
func ToPostCodeContains(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldContains(FieldToPostCode, v))
}

// ToPostCodeHasPrefix applies the HasPrefix predicate on the "ToPostCode" field.
func ToPostCodeHasPrefix(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldHasPrefix(FieldToPostCode, v))
}

// ToPostCodeHasSuffix applies the HasSuffix predicate on the "ToPostCode" field.
func ToPostCodeHasSuffix(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldHasSuffix(FieldToPostCode, v))
}

// ToPostCodeIsNil applies the IsNil predicate on the "ToPostCode" field.
func ToPostCodeIsNil() predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldIsNull(FieldToPostCode))
}

// ToPostCodeNotNil applies the NotNil predicate on the "ToPostCode" field.
func ToPostCodeNotNil() predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldNotNull(FieldToPostCode))
}

// ToPostCodeEqualFold applies the EqualFold predicate on the "ToPostCode" field.
func ToPostCodeEqualFold(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldEqualFold(FieldToPostCode, v))
}

// ToPostCodeContainsFold applies the ContainsFold predicate on the "ToPostCode" field.
func ToPostCodeContainsFold(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldContainsFold(FieldToPostCode, v))
}

// ToPostDescriptionEQ applies the EQ predicate on the "ToPostDescription" field.
func ToPostDescriptionEQ(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldEQ(FieldToPostDescription, v))
}

// ToPostDescriptionNEQ applies the NEQ predicate on the "ToPostDescription" field.
func ToPostDescriptionNEQ(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldNEQ(FieldToPostDescription, v))
}

// ToPostDescriptionIn applies the In predicate on the "ToPostDescription" field.
func ToPostDescriptionIn(vs ...string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldIn(FieldToPostDescription, vs...))
}

// ToPostDescriptionNotIn applies the NotIn predicate on the "ToPostDescription" field.
func ToPostDescriptionNotIn(vs ...string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldNotIn(FieldToPostDescription, vs...))
}

// ToPostDescriptionGT applies the GT predicate on the "ToPostDescription" field.
func ToPostDescriptionGT(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldGT(FieldToPostDescription, v))
}

// ToPostDescriptionGTE applies the GTE predicate on the "ToPostDescription" field.
func ToPostDescriptionGTE(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldGTE(FieldToPostDescription, v))
}

// ToPostDescriptionLT applies the LT predicate on the "ToPostDescription" field.
func ToPostDescriptionLT(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldLT(FieldToPostDescription, v))
}

// ToPostDescriptionLTE applies the LTE predicate on the "ToPostDescription" field.
func ToPostDescriptionLTE(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldLTE(FieldToPostDescription, v))
}

// ToPostDescriptionContains applies the Contains predicate on the "ToPostDescription" field.
func ToPostDescriptionContains(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldContains(FieldToPostDescription, v))
}

// ToPostDescriptionHasPrefix applies the HasPrefix predicate on the "ToPostDescription" field.
func ToPostDescriptionHasPrefix(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldHasPrefix(FieldToPostDescription, v))
}

// ToPostDescriptionHasSuffix applies the HasSuffix predicate on the "ToPostDescription" field.
func ToPostDescriptionHasSuffix(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldHasSuffix(FieldToPostDescription, v))
}

// ToPostDescriptionIsNil applies the IsNil predicate on the "ToPostDescription" field.
func ToPostDescriptionIsNil() predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldIsNull(FieldToPostDescription))
}

// ToPostDescriptionNotNil applies the NotNil predicate on the "ToPostDescription" field.
func ToPostDescriptionNotNil() predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldNotNull(FieldToPostDescription))
}

// ToPostDescriptionEqualFold applies the EqualFold predicate on the "ToPostDescription" field.
func ToPostDescriptionEqualFold(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldEqualFold(FieldToPostDescription, v))
}

// ToPostDescriptionContainsFold applies the ContainsFold predicate on the "ToPostDescription" field.
func ToPostDescriptionContainsFold(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldContainsFold(FieldToPostDescription, v))
}

// AgeCriteriaEQ applies the EQ predicate on the "AgeCriteria" field.
func AgeCriteriaEQ(v int) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldEQ(FieldAgeCriteria, v))
}

// AgeCriteriaNEQ applies the NEQ predicate on the "AgeCriteria" field.
func AgeCriteriaNEQ(v int) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldNEQ(FieldAgeCriteria, v))
}

// AgeCriteriaIn applies the In predicate on the "AgeCriteria" field.
func AgeCriteriaIn(vs ...int) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldIn(FieldAgeCriteria, vs...))
}

// AgeCriteriaNotIn applies the NotIn predicate on the "AgeCriteria" field.
func AgeCriteriaNotIn(vs ...int) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldNotIn(FieldAgeCriteria, vs...))
}

// AgeCriteriaGT applies the GT predicate on the "AgeCriteria" field.
func AgeCriteriaGT(v int) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldGT(FieldAgeCriteria, v))
}

// AgeCriteriaGTE applies the GTE predicate on the "AgeCriteria" field.
func AgeCriteriaGTE(v int) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldGTE(FieldAgeCriteria, v))
}

// AgeCriteriaLT applies the LT predicate on the "AgeCriteria" field.
func AgeCriteriaLT(v int) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldLT(FieldAgeCriteria, v))
}

// AgeCriteriaLTE applies the LTE predicate on the "AgeCriteria" field.
func AgeCriteriaLTE(v int) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldLTE(FieldAgeCriteria, v))
}

// AgeCriteriaIsNil applies the IsNil predicate on the "AgeCriteria" field.
func AgeCriteriaIsNil() predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldIsNull(FieldAgeCriteria))
}

// AgeCriteriaNotNil applies the NotNil predicate on the "AgeCriteria" field.
func AgeCriteriaNotNil() predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldNotNull(FieldAgeCriteria))
}

// ServiceCriteriaEQ applies the EQ predicate on the "ServiceCriteria" field.
func ServiceCriteriaEQ(v int) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldEQ(FieldServiceCriteria, v))
}

// ServiceCriteriaNEQ applies the NEQ predicate on the "ServiceCriteria" field.
func ServiceCriteriaNEQ(v int) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldNEQ(FieldServiceCriteria, v))
}

// ServiceCriteriaIn applies the In predicate on the "ServiceCriteria" field.
func ServiceCriteriaIn(vs ...int) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldIn(FieldServiceCriteria, vs...))
}

// ServiceCriteriaNotIn applies the NotIn predicate on the "ServiceCriteria" field.
func ServiceCriteriaNotIn(vs ...int) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldNotIn(FieldServiceCriteria, vs...))
}

// ServiceCriteriaGT applies the GT predicate on the "ServiceCriteria" field.
func ServiceCriteriaGT(v int) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldGT(FieldServiceCriteria, v))
}

// ServiceCriteriaGTE applies the GTE predicate on the "ServiceCriteria" field.
func ServiceCriteriaGTE(v int) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldGTE(FieldServiceCriteria, v))
}

// ServiceCriteriaLT applies the LT predicate on the "ServiceCriteria" field.
func ServiceCriteriaLT(v int) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldLT(FieldServiceCriteria, v))
}

// ServiceCriteriaLTE applies the LTE predicate on the "ServiceCriteria" field.
func ServiceCriteriaLTE(v int) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldLTE(FieldServiceCriteria, v))
}

// ServiceCriteriaIsNil applies the IsNil predicate on the "ServiceCriteria" field.
func ServiceCriteriaIsNil() predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldIsNull(FieldServiceCriteria))
}

// ServiceCriteriaNotNil applies the NotNil predicate on the "ServiceCriteria" field.
func ServiceCriteriaNotNil() predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldNotNull(FieldServiceCriteria))
}

// EducationCodeEQ applies the EQ predicate on the "EducationCode" field.
func EducationCodeEQ(v int32) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldEQ(FieldEducationCode, v))
}

// EducationCodeNEQ applies the NEQ predicate on the "EducationCode" field.
func EducationCodeNEQ(v int32) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldNEQ(FieldEducationCode, v))
}

// EducationCodeIn applies the In predicate on the "EducationCode" field.
func EducationCodeIn(vs ...int32) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldIn(FieldEducationCode, vs...))
}

// EducationCodeNotIn applies the NotIn predicate on the "EducationCode" field.
func EducationCodeNotIn(vs ...int32) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldNotIn(FieldEducationCode, vs...))
}

// EducationCodeGT applies the GT predicate on the "EducationCode" field.
func EducationCodeGT(v int32) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldGT(FieldEducationCode, v))
}

// EducationCodeGTE applies the GTE predicate on the "EducationCode" field.
func EducationCodeGTE(v int32) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldGTE(FieldEducationCode, v))
}

// EducationCodeLT applies the LT predicate on the "EducationCode" field.
func EducationCodeLT(v int32) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldLT(FieldEducationCode, v))
}

// EducationCodeLTE applies the LTE predicate on the "EducationCode" field.
func EducationCodeLTE(v int32) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldLTE(FieldEducationCode, v))
}

// EducationCodeIsNil applies the IsNil predicate on the "EducationCode" field.
func EducationCodeIsNil() predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldIsNull(FieldEducationCode))
}

// EducationCodeNotNil applies the NotNil predicate on the "EducationCode" field.
func EducationCodeNotNil() predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldNotNull(FieldEducationCode))
}

// EducationDescriptionEQ applies the EQ predicate on the "EducationDescription" field.
func EducationDescriptionEQ(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldEQ(FieldEducationDescription, v))
}

// EducationDescriptionNEQ applies the NEQ predicate on the "EducationDescription" field.
func EducationDescriptionNEQ(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldNEQ(FieldEducationDescription, v))
}

// EducationDescriptionIn applies the In predicate on the "EducationDescription" field.
func EducationDescriptionIn(vs ...string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldIn(FieldEducationDescription, vs...))
}

// EducationDescriptionNotIn applies the NotIn predicate on the "EducationDescription" field.
func EducationDescriptionNotIn(vs ...string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldNotIn(FieldEducationDescription, vs...))
}

// EducationDescriptionGT applies the GT predicate on the "EducationDescription" field.
func EducationDescriptionGT(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldGT(FieldEducationDescription, v))
}

// EducationDescriptionGTE applies the GTE predicate on the "EducationDescription" field.
func EducationDescriptionGTE(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldGTE(FieldEducationDescription, v))
}

// EducationDescriptionLT applies the LT predicate on the "EducationDescription" field.
func EducationDescriptionLT(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldLT(FieldEducationDescription, v))
}

// EducationDescriptionLTE applies the LTE predicate on the "EducationDescription" field.
func EducationDescriptionLTE(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldLTE(FieldEducationDescription, v))
}

// EducationDescriptionContains applies the Contains predicate on the "EducationDescription" field.
func EducationDescriptionContains(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldContains(FieldEducationDescription, v))
}

// EducationDescriptionHasPrefix applies the HasPrefix predicate on the "EducationDescription" field.
func EducationDescriptionHasPrefix(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldHasPrefix(FieldEducationDescription, v))
}

// EducationDescriptionHasSuffix applies the HasSuffix predicate on the "EducationDescription" field.
func EducationDescriptionHasSuffix(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldHasSuffix(FieldEducationDescription, v))
}

// EducationDescriptionIsNil applies the IsNil predicate on the "EducationDescription" field.
func EducationDescriptionIsNil() predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldIsNull(FieldEducationDescription))
}

// EducationDescriptionNotNil applies the NotNil predicate on the "EducationDescription" field.
func EducationDescriptionNotNil() predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldNotNull(FieldEducationDescription))
}

// EducationDescriptionEqualFold applies the EqualFold predicate on the "EducationDescription" field.
func EducationDescriptionEqualFold(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldEqualFold(FieldEducationDescription, v))
}

// EducationDescriptionContainsFold applies the ContainsFold predicate on the "EducationDescription" field.
func EducationDescriptionContainsFold(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldContainsFold(FieldEducationDescription, v))
}

// OrderNumberEQ applies the EQ predicate on the "OrderNumber" field.
func OrderNumberEQ(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldEQ(FieldOrderNumber, v))
}

// OrderNumberNEQ applies the NEQ predicate on the "OrderNumber" field.
func OrderNumberNEQ(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldNEQ(FieldOrderNumber, v))
}

// OrderNumberIn applies the In predicate on the "OrderNumber" field.
func OrderNumberIn(vs ...string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldIn(FieldOrderNumber, vs...))
}

// OrderNumberNotIn applies the NotIn predicate on the "OrderNumber" field.
func OrderNumberNotIn(vs ...string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldNotIn(FieldOrderNumber, vs...))
}

// OrderNumberGT applies the GT predicate on the "OrderNumber" field.
func OrderNumberGT(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldGT(FieldOrderNumber, v))
}

// OrderNumberGTE applies the GTE predicate on the "OrderNumber" field.
func OrderNumberGTE(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldGTE(FieldOrderNumber, v))
}

// OrderNumberLT applies the LT predicate on the "OrderNumber" field.
func OrderNumberLT(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldLT(FieldOrderNumber, v))
}

// OrderNumberLTE applies the LTE predicate on the "OrderNumber" field.
func OrderNumberLTE(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldLTE(FieldOrderNumber, v))
}

// OrderNumberContains applies the Contains predicate on the "OrderNumber" field.
func OrderNumberContains(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldContains(FieldOrderNumber, v))
}

// OrderNumberHasPrefix applies the HasPrefix predicate on the "OrderNumber" field.
func OrderNumberHasPrefix(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldHasPrefix(FieldOrderNumber, v))
}

// OrderNumberHasSuffix applies the HasSuffix predicate on the "OrderNumber" field.
func OrderNumberHasSuffix(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldHasSuffix(FieldOrderNumber, v))
}

// OrderNumberIsNil applies the IsNil predicate on the "OrderNumber" field.
func OrderNumberIsNil() predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldIsNull(FieldOrderNumber))
}

// OrderNumberNotNil applies the NotNil predicate on the "OrderNumber" field.
func OrderNumberNotNil() predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldNotNull(FieldOrderNumber))
}

// OrderNumberEqualFold applies the EqualFold predicate on the "OrderNumber" field.
func OrderNumberEqualFold(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldEqualFold(FieldOrderNumber, v))
}

// OrderNumberContainsFold applies the ContainsFold predicate on the "OrderNumber" field.
func OrderNumberContainsFold(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldContainsFold(FieldOrderNumber, v))
}

// CreatedByIdEQ applies the EQ predicate on the "CreatedById" field.
func CreatedByIdEQ(v int64) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldEQ(FieldCreatedById, v))
}

// CreatedByIdNEQ applies the NEQ predicate on the "CreatedById" field.
func CreatedByIdNEQ(v int64) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldNEQ(FieldCreatedById, v))
}

// CreatedByIdIn applies the In predicate on the "CreatedById" field.
func CreatedByIdIn(vs ...int64) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldIn(FieldCreatedById, vs...))
}

// CreatedByIdNotIn applies the NotIn predicate on the "CreatedById" field.
func CreatedByIdNotIn(vs ...int64) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldNotIn(FieldCreatedById, vs...))
}

// CreatedByIdGT applies the GT predicate on the "CreatedById" field.
func CreatedByIdGT(v int64) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldGT(FieldCreatedById, v))
}

// CreatedByIdGTE applies the GTE predicate on the "CreatedById" field.
func CreatedByIdGTE(v int64) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldGTE(FieldCreatedById, v))
}

// CreatedByIdLT applies the LT predicate on the "CreatedById" field.
func CreatedByIdLT(v int64) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldLT(FieldCreatedById, v))
}

// CreatedByIdLTE applies the LTE predicate on the "CreatedById" field.
func CreatedByIdLTE(v int64) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldLTE(FieldCreatedById, v))
}

// CreatedByIdIsNil applies the IsNil predicate on the "CreatedById" field.
func CreatedByIdIsNil() predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldIsNull(FieldCreatedById))
}

// CreatedByIdNotNil applies the NotNil predicate on the "CreatedById" field.
func CreatedByIdNotNil() predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldNotNull(FieldCreatedById))
}

// CreatedByUserNameEQ applies the EQ predicate on the "CreatedByUserName" field.
func CreatedByUserNameEQ(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldEQ(FieldCreatedByUserName, v))
}

// CreatedByUserNameNEQ applies the NEQ predicate on the "CreatedByUserName" field.
func CreatedByUserNameNEQ(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldNEQ(FieldCreatedByUserName, v))
}

// CreatedByUserNameIn applies the In predicate on the "CreatedByUserName" field.
func CreatedByUserNameIn(vs ...string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldIn(FieldCreatedByUserName, vs...))
}

// CreatedByUserNameNotIn applies the NotIn predicate on the "CreatedByUserName" field.
func CreatedByUserNameNotIn(vs ...string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldNotIn(FieldCreatedByUserName, vs...))
}

// CreatedByUserNameGT applies the GT predicate on the "CreatedByUserName" field.
func CreatedByUserNameGT(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldGT(FieldCreatedByUserName, v))
}

// CreatedByUserNameGTE applies the GTE predicate on the "CreatedByUserName" field.
func CreatedByUserNameGTE(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldGTE(FieldCreatedByUserName, v))
}

// CreatedByUserNameLT applies the LT predicate on the "CreatedByUserName" field.
func CreatedByUserNameLT(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldLT(FieldCreatedByUserName, v))
}

// CreatedByUserNameLTE applies the LTE predicate on the "CreatedByUserName" field.
func CreatedByUserNameLTE(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldLTE(FieldCreatedByUserName, v))
}

// CreatedByUserNameContains applies the Contains predicate on the "CreatedByUserName" field.
func CreatedByUserNameContains(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldContains(FieldCreatedByUserName, v))
}

// CreatedByUserNameHasPrefix applies the HasPrefix predicate on the "CreatedByUserName" field.
func CreatedByUserNameHasPrefix(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldHasPrefix(FieldCreatedByUserName, v))
}

// CreatedByUserNameHasSuffix applies the HasSuffix predicate on the "CreatedByUserName" field.
func CreatedByUserNameHasSuffix(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldHasSuffix(FieldCreatedByUserName, v))
}

// CreatedByUserNameIsNil applies the IsNil predicate on the "CreatedByUserName" field.
func CreatedByUserNameIsNil() predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldIsNull(FieldCreatedByUserName))
}

// CreatedByUserNameNotNil applies the NotNil predicate on the "CreatedByUserName" field.
func CreatedByUserNameNotNil() predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldNotNull(FieldCreatedByUserName))
}

// CreatedByUserNameEqualFold applies the EqualFold predicate on the "CreatedByUserName" field.
func CreatedByUserNameEqualFold(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldEqualFold(FieldCreatedByUserName, v))
}

// CreatedByUserNameContainsFold applies the ContainsFold predicate on the "CreatedByUserName" field.
func CreatedByUserNameContainsFold(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldContainsFold(FieldCreatedByUserName, v))
}

// CreatedByEmployeeIdEQ applies the EQ predicate on the "CreatedByEmployeeId" field.
func CreatedByEmployeeIdEQ(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldEQ(FieldCreatedByEmployeeId, v))
}

// CreatedByEmployeeIdNEQ applies the NEQ predicate on the "CreatedByEmployeeId" field.
func CreatedByEmployeeIdNEQ(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldNEQ(FieldCreatedByEmployeeId, v))
}

// CreatedByEmployeeIdIn applies the In predicate on the "CreatedByEmployeeId" field.
func CreatedByEmployeeIdIn(vs ...string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldIn(FieldCreatedByEmployeeId, vs...))
}

// CreatedByEmployeeIdNotIn applies the NotIn predicate on the "CreatedByEmployeeId" field.
func CreatedByEmployeeIdNotIn(vs ...string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldNotIn(FieldCreatedByEmployeeId, vs...))
}

// CreatedByEmployeeIdGT applies the GT predicate on the "CreatedByEmployeeId" field.
func CreatedByEmployeeIdGT(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldGT(FieldCreatedByEmployeeId, v))
}

// CreatedByEmployeeIdGTE applies the GTE predicate on the "CreatedByEmployeeId" field.
func CreatedByEmployeeIdGTE(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldGTE(FieldCreatedByEmployeeId, v))
}

// CreatedByEmployeeIdLT applies the LT predicate on the "CreatedByEmployeeId" field.
func CreatedByEmployeeIdLT(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldLT(FieldCreatedByEmployeeId, v))
}

// CreatedByEmployeeIdLTE applies the LTE predicate on the "CreatedByEmployeeId" field.
func CreatedByEmployeeIdLTE(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldLTE(FieldCreatedByEmployeeId, v))
}

// CreatedByEmployeeIdContains applies the Contains predicate on the "CreatedByEmployeeId" field.
func CreatedByEmployeeIdContains(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldContains(FieldCreatedByEmployeeId, v))
}

// CreatedByEmployeeIdHasPrefix applies the HasPrefix predicate on the "CreatedByEmployeeId" field.
func CreatedByEmployeeIdHasPrefix(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldHasPrefix(FieldCreatedByEmployeeId, v))
}

// CreatedByEmployeeIdHasSuffix applies the HasSuffix predicate on the "CreatedByEmployeeId" field.
func CreatedByEmployeeIdHasSuffix(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldHasSuffix(FieldCreatedByEmployeeId, v))
}

// CreatedByEmployeeIdIsNil applies the IsNil predicate on the "CreatedByEmployeeId" field.
func CreatedByEmployeeIdIsNil() predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldIsNull(FieldCreatedByEmployeeId))
}

// CreatedByEmployeeIdNotNil applies the NotNil predicate on the "CreatedByEmployeeId" field.
func CreatedByEmployeeIdNotNil() predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldNotNull(FieldCreatedByEmployeeId))
}

// CreatedByEmployeeIdEqualFold applies the EqualFold predicate on the "CreatedByEmployeeId" field.
func CreatedByEmployeeIdEqualFold(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldEqualFold(FieldCreatedByEmployeeId, v))
}

// CreatedByEmployeeIdContainsFold applies the ContainsFold predicate on the "CreatedByEmployeeId" field.
func CreatedByEmployeeIdContainsFold(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldContainsFold(FieldCreatedByEmployeeId, v))
}

// CreatedByDesignationEQ applies the EQ predicate on the "CreatedByDesignation" field.
func CreatedByDesignationEQ(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldEQ(FieldCreatedByDesignation, v))
}

// CreatedByDesignationNEQ applies the NEQ predicate on the "CreatedByDesignation" field.
func CreatedByDesignationNEQ(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldNEQ(FieldCreatedByDesignation, v))
}

// CreatedByDesignationIn applies the In predicate on the "CreatedByDesignation" field.
func CreatedByDesignationIn(vs ...string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldIn(FieldCreatedByDesignation, vs...))
}

// CreatedByDesignationNotIn applies the NotIn predicate on the "CreatedByDesignation" field.
func CreatedByDesignationNotIn(vs ...string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldNotIn(FieldCreatedByDesignation, vs...))
}

// CreatedByDesignationGT applies the GT predicate on the "CreatedByDesignation" field.
func CreatedByDesignationGT(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldGT(FieldCreatedByDesignation, v))
}

// CreatedByDesignationGTE applies the GTE predicate on the "CreatedByDesignation" field.
func CreatedByDesignationGTE(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldGTE(FieldCreatedByDesignation, v))
}

// CreatedByDesignationLT applies the LT predicate on the "CreatedByDesignation" field.
func CreatedByDesignationLT(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldLT(FieldCreatedByDesignation, v))
}

// CreatedByDesignationLTE applies the LTE predicate on the "CreatedByDesignation" field.
func CreatedByDesignationLTE(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldLTE(FieldCreatedByDesignation, v))
}

// CreatedByDesignationContains applies the Contains predicate on the "CreatedByDesignation" field.
func CreatedByDesignationContains(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldContains(FieldCreatedByDesignation, v))
}

// CreatedByDesignationHasPrefix applies the HasPrefix predicate on the "CreatedByDesignation" field.
func CreatedByDesignationHasPrefix(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldHasPrefix(FieldCreatedByDesignation, v))
}

// CreatedByDesignationHasSuffix applies the HasSuffix predicate on the "CreatedByDesignation" field.
func CreatedByDesignationHasSuffix(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldHasSuffix(FieldCreatedByDesignation, v))
}

// CreatedByDesignationIsNil applies the IsNil predicate on the "CreatedByDesignation" field.
func CreatedByDesignationIsNil() predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldIsNull(FieldCreatedByDesignation))
}

// CreatedByDesignationNotNil applies the NotNil predicate on the "CreatedByDesignation" field.
func CreatedByDesignationNotNil() predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldNotNull(FieldCreatedByDesignation))
}

// CreatedByDesignationEqualFold applies the EqualFold predicate on the "CreatedByDesignation" field.
func CreatedByDesignationEqualFold(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldEqualFold(FieldCreatedByDesignation, v))
}

// CreatedByDesignationContainsFold applies the ContainsFold predicate on the "CreatedByDesignation" field.
func CreatedByDesignationContainsFold(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldContainsFold(FieldCreatedByDesignation, v))
}

// CreatedDateEQ applies the EQ predicate on the "CreatedDate" field.
func CreatedDateEQ(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldEQ(FieldCreatedDate, v))
}

// CreatedDateNEQ applies the NEQ predicate on the "CreatedDate" field.
func CreatedDateNEQ(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldNEQ(FieldCreatedDate, v))
}

// CreatedDateIn applies the In predicate on the "CreatedDate" field.
func CreatedDateIn(vs ...string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldIn(FieldCreatedDate, vs...))
}

// CreatedDateNotIn applies the NotIn predicate on the "CreatedDate" field.
func CreatedDateNotIn(vs ...string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldNotIn(FieldCreatedDate, vs...))
}

// CreatedDateGT applies the GT predicate on the "CreatedDate" field.
func CreatedDateGT(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldGT(FieldCreatedDate, v))
}

// CreatedDateGTE applies the GTE predicate on the "CreatedDate" field.
func CreatedDateGTE(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldGTE(FieldCreatedDate, v))
}

// CreatedDateLT applies the LT predicate on the "CreatedDate" field.
func CreatedDateLT(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldLT(FieldCreatedDate, v))
}

// CreatedDateLTE applies the LTE predicate on the "CreatedDate" field.
func CreatedDateLTE(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldLTE(FieldCreatedDate, v))
}

// CreatedDateContains applies the Contains predicate on the "CreatedDate" field.
func CreatedDateContains(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldContains(FieldCreatedDate, v))
}

// CreatedDateHasPrefix applies the HasPrefix predicate on the "CreatedDate" field.
func CreatedDateHasPrefix(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldHasPrefix(FieldCreatedDate, v))
}

// CreatedDateHasSuffix applies the HasSuffix predicate on the "CreatedDate" field.
func CreatedDateHasSuffix(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldHasSuffix(FieldCreatedDate, v))
}

// CreatedDateIsNil applies the IsNil predicate on the "CreatedDate" field.
func CreatedDateIsNil() predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldIsNull(FieldCreatedDate))
}

// CreatedDateNotNil applies the NotNil predicate on the "CreatedDate" field.
func CreatedDateNotNil() predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldNotNull(FieldCreatedDate))
}

// CreatedDateEqualFold applies the EqualFold predicate on the "CreatedDate" field.
func CreatedDateEqualFold(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldEqualFold(FieldCreatedDate, v))
}

// CreatedDateContainsFold applies the ContainsFold predicate on the "CreatedDate" field.
func CreatedDateContainsFold(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldContainsFold(FieldCreatedDate, v))
}

// VerifiedByIdEQ applies the EQ predicate on the "VerifiedById" field.
func VerifiedByIdEQ(v int64) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldEQ(FieldVerifiedById, v))
}

// VerifiedByIdNEQ applies the NEQ predicate on the "VerifiedById" field.
func VerifiedByIdNEQ(v int64) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldNEQ(FieldVerifiedById, v))
}

// VerifiedByIdIn applies the In predicate on the "VerifiedById" field.
func VerifiedByIdIn(vs ...int64) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldIn(FieldVerifiedById, vs...))
}

// VerifiedByIdNotIn applies the NotIn predicate on the "VerifiedById" field.
func VerifiedByIdNotIn(vs ...int64) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldNotIn(FieldVerifiedById, vs...))
}

// VerifiedByIdGT applies the GT predicate on the "VerifiedById" field.
func VerifiedByIdGT(v int64) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldGT(FieldVerifiedById, v))
}

// VerifiedByIdGTE applies the GTE predicate on the "VerifiedById" field.
func VerifiedByIdGTE(v int64) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldGTE(FieldVerifiedById, v))
}

// VerifiedByIdLT applies the LT predicate on the "VerifiedById" field.
func VerifiedByIdLT(v int64) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldLT(FieldVerifiedById, v))
}

// VerifiedByIdLTE applies the LTE predicate on the "VerifiedById" field.
func VerifiedByIdLTE(v int64) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldLTE(FieldVerifiedById, v))
}

// VerifiedByIdIsNil applies the IsNil predicate on the "VerifiedById" field.
func VerifiedByIdIsNil() predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldIsNull(FieldVerifiedById))
}

// VerifiedByIdNotNil applies the NotNil predicate on the "VerifiedById" field.
func VerifiedByIdNotNil() predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldNotNull(FieldVerifiedById))
}

// VerifiedByUserNameEQ applies the EQ predicate on the "VerifiedByUserName" field.
func VerifiedByUserNameEQ(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldEQ(FieldVerifiedByUserName, v))
}

// VerifiedByUserNameNEQ applies the NEQ predicate on the "VerifiedByUserName" field.
func VerifiedByUserNameNEQ(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldNEQ(FieldVerifiedByUserName, v))
}

// VerifiedByUserNameIn applies the In predicate on the "VerifiedByUserName" field.
func VerifiedByUserNameIn(vs ...string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldIn(FieldVerifiedByUserName, vs...))
}

// VerifiedByUserNameNotIn applies the NotIn predicate on the "VerifiedByUserName" field.
func VerifiedByUserNameNotIn(vs ...string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldNotIn(FieldVerifiedByUserName, vs...))
}

// VerifiedByUserNameGT applies the GT predicate on the "VerifiedByUserName" field.
func VerifiedByUserNameGT(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldGT(FieldVerifiedByUserName, v))
}

// VerifiedByUserNameGTE applies the GTE predicate on the "VerifiedByUserName" field.
func VerifiedByUserNameGTE(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldGTE(FieldVerifiedByUserName, v))
}

// VerifiedByUserNameLT applies the LT predicate on the "VerifiedByUserName" field.
func VerifiedByUserNameLT(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldLT(FieldVerifiedByUserName, v))
}

// VerifiedByUserNameLTE applies the LTE predicate on the "VerifiedByUserName" field.
func VerifiedByUserNameLTE(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldLTE(FieldVerifiedByUserName, v))
}

// VerifiedByUserNameContains applies the Contains predicate on the "VerifiedByUserName" field.
func VerifiedByUserNameContains(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldContains(FieldVerifiedByUserName, v))
}

// VerifiedByUserNameHasPrefix applies the HasPrefix predicate on the "VerifiedByUserName" field.
func VerifiedByUserNameHasPrefix(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldHasPrefix(FieldVerifiedByUserName, v))
}

// VerifiedByUserNameHasSuffix applies the HasSuffix predicate on the "VerifiedByUserName" field.
func VerifiedByUserNameHasSuffix(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldHasSuffix(FieldVerifiedByUserName, v))
}

// VerifiedByUserNameIsNil applies the IsNil predicate on the "VerifiedByUserName" field.
func VerifiedByUserNameIsNil() predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldIsNull(FieldVerifiedByUserName))
}

// VerifiedByUserNameNotNil applies the NotNil predicate on the "VerifiedByUserName" field.
func VerifiedByUserNameNotNil() predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldNotNull(FieldVerifiedByUserName))
}

// VerifiedByUserNameEqualFold applies the EqualFold predicate on the "VerifiedByUserName" field.
func VerifiedByUserNameEqualFold(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldEqualFold(FieldVerifiedByUserName, v))
}

// VerifiedByUserNameContainsFold applies the ContainsFold predicate on the "VerifiedByUserName" field.
func VerifiedByUserNameContainsFold(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldContainsFold(FieldVerifiedByUserName, v))
}

// VerifiedByEmployeeIdEQ applies the EQ predicate on the "VerifiedByEmployeeId" field.
func VerifiedByEmployeeIdEQ(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldEQ(FieldVerifiedByEmployeeId, v))
}

// VerifiedByEmployeeIdNEQ applies the NEQ predicate on the "VerifiedByEmployeeId" field.
func VerifiedByEmployeeIdNEQ(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldNEQ(FieldVerifiedByEmployeeId, v))
}

// VerifiedByEmployeeIdIn applies the In predicate on the "VerifiedByEmployeeId" field.
func VerifiedByEmployeeIdIn(vs ...string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldIn(FieldVerifiedByEmployeeId, vs...))
}

// VerifiedByEmployeeIdNotIn applies the NotIn predicate on the "VerifiedByEmployeeId" field.
func VerifiedByEmployeeIdNotIn(vs ...string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldNotIn(FieldVerifiedByEmployeeId, vs...))
}

// VerifiedByEmployeeIdGT applies the GT predicate on the "VerifiedByEmployeeId" field.
func VerifiedByEmployeeIdGT(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldGT(FieldVerifiedByEmployeeId, v))
}

// VerifiedByEmployeeIdGTE applies the GTE predicate on the "VerifiedByEmployeeId" field.
func VerifiedByEmployeeIdGTE(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldGTE(FieldVerifiedByEmployeeId, v))
}

// VerifiedByEmployeeIdLT applies the LT predicate on the "VerifiedByEmployeeId" field.
func VerifiedByEmployeeIdLT(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldLT(FieldVerifiedByEmployeeId, v))
}

// VerifiedByEmployeeIdLTE applies the LTE predicate on the "VerifiedByEmployeeId" field.
func VerifiedByEmployeeIdLTE(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldLTE(FieldVerifiedByEmployeeId, v))
}

// VerifiedByEmployeeIdContains applies the Contains predicate on the "VerifiedByEmployeeId" field.
func VerifiedByEmployeeIdContains(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldContains(FieldVerifiedByEmployeeId, v))
}

// VerifiedByEmployeeIdHasPrefix applies the HasPrefix predicate on the "VerifiedByEmployeeId" field.
func VerifiedByEmployeeIdHasPrefix(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldHasPrefix(FieldVerifiedByEmployeeId, v))
}

// VerifiedByEmployeeIdHasSuffix applies the HasSuffix predicate on the "VerifiedByEmployeeId" field.
func VerifiedByEmployeeIdHasSuffix(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldHasSuffix(FieldVerifiedByEmployeeId, v))
}

// VerifiedByEmployeeIdIsNil applies the IsNil predicate on the "VerifiedByEmployeeId" field.
func VerifiedByEmployeeIdIsNil() predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldIsNull(FieldVerifiedByEmployeeId))
}

// VerifiedByEmployeeIdNotNil applies the NotNil predicate on the "VerifiedByEmployeeId" field.
func VerifiedByEmployeeIdNotNil() predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldNotNull(FieldVerifiedByEmployeeId))
}

// VerifiedByEmployeeIdEqualFold applies the EqualFold predicate on the "VerifiedByEmployeeId" field.
func VerifiedByEmployeeIdEqualFold(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldEqualFold(FieldVerifiedByEmployeeId, v))
}

// VerifiedByEmployeeIdContainsFold applies the ContainsFold predicate on the "VerifiedByEmployeeId" field.
func VerifiedByEmployeeIdContainsFold(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldContainsFold(FieldVerifiedByEmployeeId, v))
}

// VerifiedByDesignationEQ applies the EQ predicate on the "VerifiedByDesignation" field.
func VerifiedByDesignationEQ(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldEQ(FieldVerifiedByDesignation, v))
}

// VerifiedByDesignationNEQ applies the NEQ predicate on the "VerifiedByDesignation" field.
func VerifiedByDesignationNEQ(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldNEQ(FieldVerifiedByDesignation, v))
}

// VerifiedByDesignationIn applies the In predicate on the "VerifiedByDesignation" field.
func VerifiedByDesignationIn(vs ...string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldIn(FieldVerifiedByDesignation, vs...))
}

// VerifiedByDesignationNotIn applies the NotIn predicate on the "VerifiedByDesignation" field.
func VerifiedByDesignationNotIn(vs ...string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldNotIn(FieldVerifiedByDesignation, vs...))
}

// VerifiedByDesignationGT applies the GT predicate on the "VerifiedByDesignation" field.
func VerifiedByDesignationGT(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldGT(FieldVerifiedByDesignation, v))
}

// VerifiedByDesignationGTE applies the GTE predicate on the "VerifiedByDesignation" field.
func VerifiedByDesignationGTE(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldGTE(FieldVerifiedByDesignation, v))
}

// VerifiedByDesignationLT applies the LT predicate on the "VerifiedByDesignation" field.
func VerifiedByDesignationLT(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldLT(FieldVerifiedByDesignation, v))
}

// VerifiedByDesignationLTE applies the LTE predicate on the "VerifiedByDesignation" field.
func VerifiedByDesignationLTE(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldLTE(FieldVerifiedByDesignation, v))
}

// VerifiedByDesignationContains applies the Contains predicate on the "VerifiedByDesignation" field.
func VerifiedByDesignationContains(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldContains(FieldVerifiedByDesignation, v))
}

// VerifiedByDesignationHasPrefix applies the HasPrefix predicate on the "VerifiedByDesignation" field.
func VerifiedByDesignationHasPrefix(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldHasPrefix(FieldVerifiedByDesignation, v))
}

// VerifiedByDesignationHasSuffix applies the HasSuffix predicate on the "VerifiedByDesignation" field.
func VerifiedByDesignationHasSuffix(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldHasSuffix(FieldVerifiedByDesignation, v))
}

// VerifiedByDesignationIsNil applies the IsNil predicate on the "VerifiedByDesignation" field.
func VerifiedByDesignationIsNil() predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldIsNull(FieldVerifiedByDesignation))
}

// VerifiedByDesignationNotNil applies the NotNil predicate on the "VerifiedByDesignation" field.
func VerifiedByDesignationNotNil() predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldNotNull(FieldVerifiedByDesignation))
}

// VerifiedByDesignationEqualFold applies the EqualFold predicate on the "VerifiedByDesignation" field.
func VerifiedByDesignationEqualFold(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldEqualFold(FieldVerifiedByDesignation, v))
}

// VerifiedByDesignationContainsFold applies the ContainsFold predicate on the "VerifiedByDesignation" field.
func VerifiedByDesignationContainsFold(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldContainsFold(FieldVerifiedByDesignation, v))
}

// VerifiedDateEQ applies the EQ predicate on the "VerifiedDate" field.
func VerifiedDateEQ(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldEQ(FieldVerifiedDate, v))
}

// VerifiedDateNEQ applies the NEQ predicate on the "VerifiedDate" field.
func VerifiedDateNEQ(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldNEQ(FieldVerifiedDate, v))
}

// VerifiedDateIn applies the In predicate on the "VerifiedDate" field.
func VerifiedDateIn(vs ...string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldIn(FieldVerifiedDate, vs...))
}

// VerifiedDateNotIn applies the NotIn predicate on the "VerifiedDate" field.
func VerifiedDateNotIn(vs ...string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldNotIn(FieldVerifiedDate, vs...))
}

// VerifiedDateGT applies the GT predicate on the "VerifiedDate" field.
func VerifiedDateGT(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldGT(FieldVerifiedDate, v))
}

// VerifiedDateGTE applies the GTE predicate on the "VerifiedDate" field.
func VerifiedDateGTE(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldGTE(FieldVerifiedDate, v))
}

// VerifiedDateLT applies the LT predicate on the "VerifiedDate" field.
func VerifiedDateLT(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldLT(FieldVerifiedDate, v))
}

// VerifiedDateLTE applies the LTE predicate on the "VerifiedDate" field.
func VerifiedDateLTE(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldLTE(FieldVerifiedDate, v))
}

// VerifiedDateContains applies the Contains predicate on the "VerifiedDate" field.
func VerifiedDateContains(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldContains(FieldVerifiedDate, v))
}

// VerifiedDateHasPrefix applies the HasPrefix predicate on the "VerifiedDate" field.
func VerifiedDateHasPrefix(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldHasPrefix(FieldVerifiedDate, v))
}

// VerifiedDateHasSuffix applies the HasSuffix predicate on the "VerifiedDate" field.
func VerifiedDateHasSuffix(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldHasSuffix(FieldVerifiedDate, v))
}

// VerifiedDateIsNil applies the IsNil predicate on the "VerifiedDate" field.
func VerifiedDateIsNil() predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldIsNull(FieldVerifiedDate))
}

// VerifiedDateNotNil applies the NotNil predicate on the "VerifiedDate" field.
func VerifiedDateNotNil() predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldNotNull(FieldVerifiedDate))
}

// VerifiedDateEqualFold applies the EqualFold predicate on the "VerifiedDate" field.
func VerifiedDateEqualFold(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldEqualFold(FieldVerifiedDate, v))
}

// VerifiedDateContainsFold applies the ContainsFold predicate on the "VerifiedDate" field.
func VerifiedDateContainsFold(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldContainsFold(FieldVerifiedDate, v))
}

// StatusEQ applies the EQ predicate on the "Status" field.
func StatusEQ(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "Status" field.
func StatusNEQ(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "Status" field.
func StatusIn(vs ...string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "Status" field.
func StatusNotIn(vs ...string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "Status" field.
func StatusGT(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "Status" field.
func StatusGTE(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "Status" field.
func StatusLT(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "Status" field.
func StatusLTE(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldLTE(FieldStatus, v))
}

// StatusContains applies the Contains predicate on the "Status" field.
func StatusContains(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldContains(FieldStatus, v))
}

// StatusHasPrefix applies the HasPrefix predicate on the "Status" field.
func StatusHasPrefix(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldHasPrefix(FieldStatus, v))
}

// StatusHasSuffix applies the HasSuffix predicate on the "Status" field.
func StatusHasSuffix(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldHasSuffix(FieldStatus, v))
}

// StatusIsNil applies the IsNil predicate on the "Status" field.
func StatusIsNil() predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldIsNull(FieldStatus))
}

// StatusNotNil applies the NotNil predicate on the "Status" field.
func StatusNotNil() predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldNotNull(FieldStatus))
}

// StatusEqualFold applies the EqualFold predicate on the "Status" field.
func StatusEqualFold(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldEqualFold(FieldStatus, v))
}

// StatusContainsFold applies the ContainsFold predicate on the "Status" field.
func StatusContainsFold(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldContainsFold(FieldStatus, v))
}

// DeletedByIdEQ applies the EQ predicate on the "DeletedById" field.
func DeletedByIdEQ(v int64) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldEQ(FieldDeletedById, v))
}

// DeletedByIdNEQ applies the NEQ predicate on the "DeletedById" field.
func DeletedByIdNEQ(v int64) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldNEQ(FieldDeletedById, v))
}

// DeletedByIdIn applies the In predicate on the "DeletedById" field.
func DeletedByIdIn(vs ...int64) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldIn(FieldDeletedById, vs...))
}

// DeletedByIdNotIn applies the NotIn predicate on the "DeletedById" field.
func DeletedByIdNotIn(vs ...int64) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldNotIn(FieldDeletedById, vs...))
}

// DeletedByIdGT applies the GT predicate on the "DeletedById" field.
func DeletedByIdGT(v int64) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldGT(FieldDeletedById, v))
}

// DeletedByIdGTE applies the GTE predicate on the "DeletedById" field.
func DeletedByIdGTE(v int64) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldGTE(FieldDeletedById, v))
}

// DeletedByIdLT applies the LT predicate on the "DeletedById" field.
func DeletedByIdLT(v int64) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldLT(FieldDeletedById, v))
}

// DeletedByIdLTE applies the LTE predicate on the "DeletedById" field.
func DeletedByIdLTE(v int64) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldLTE(FieldDeletedById, v))
}

// DeletedByIdIsNil applies the IsNil predicate on the "DeletedById" field.
func DeletedByIdIsNil() predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldIsNull(FieldDeletedById))
}

// DeletedByIdNotNil applies the NotNil predicate on the "DeletedById" field.
func DeletedByIdNotNil() predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldNotNull(FieldDeletedById))
}

// DeletedByUserNameEQ applies the EQ predicate on the "DeletedByUserName" field.
func DeletedByUserNameEQ(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldEQ(FieldDeletedByUserName, v))
}

// DeletedByUserNameNEQ applies the NEQ predicate on the "DeletedByUserName" field.
func DeletedByUserNameNEQ(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldNEQ(FieldDeletedByUserName, v))
}

// DeletedByUserNameIn applies the In predicate on the "DeletedByUserName" field.
func DeletedByUserNameIn(vs ...string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldIn(FieldDeletedByUserName, vs...))
}

// DeletedByUserNameNotIn applies the NotIn predicate on the "DeletedByUserName" field.
func DeletedByUserNameNotIn(vs ...string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldNotIn(FieldDeletedByUserName, vs...))
}

// DeletedByUserNameGT applies the GT predicate on the "DeletedByUserName" field.
func DeletedByUserNameGT(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldGT(FieldDeletedByUserName, v))
}

// DeletedByUserNameGTE applies the GTE predicate on the "DeletedByUserName" field.
func DeletedByUserNameGTE(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldGTE(FieldDeletedByUserName, v))
}

// DeletedByUserNameLT applies the LT predicate on the "DeletedByUserName" field.
func DeletedByUserNameLT(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldLT(FieldDeletedByUserName, v))
}

// DeletedByUserNameLTE applies the LTE predicate on the "DeletedByUserName" field.
func DeletedByUserNameLTE(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldLTE(FieldDeletedByUserName, v))
}

// DeletedByUserNameContains applies the Contains predicate on the "DeletedByUserName" field.
func DeletedByUserNameContains(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldContains(FieldDeletedByUserName, v))
}

// DeletedByUserNameHasPrefix applies the HasPrefix predicate on the "DeletedByUserName" field.
func DeletedByUserNameHasPrefix(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldHasPrefix(FieldDeletedByUserName, v))
}

// DeletedByUserNameHasSuffix applies the HasSuffix predicate on the "DeletedByUserName" field.
func DeletedByUserNameHasSuffix(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldHasSuffix(FieldDeletedByUserName, v))
}

// DeletedByUserNameIsNil applies the IsNil predicate on the "DeletedByUserName" field.
func DeletedByUserNameIsNil() predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldIsNull(FieldDeletedByUserName))
}

// DeletedByUserNameNotNil applies the NotNil predicate on the "DeletedByUserName" field.
func DeletedByUserNameNotNil() predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldNotNull(FieldDeletedByUserName))
}

// DeletedByUserNameEqualFold applies the EqualFold predicate on the "DeletedByUserName" field.
func DeletedByUserNameEqualFold(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldEqualFold(FieldDeletedByUserName, v))
}

// DeletedByUserNameContainsFold applies the ContainsFold predicate on the "DeletedByUserName" field.
func DeletedByUserNameContainsFold(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldContainsFold(FieldDeletedByUserName, v))
}

// DeletedByEmployeeIdEQ applies the EQ predicate on the "DeletedByEmployeeId" field.
func DeletedByEmployeeIdEQ(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldEQ(FieldDeletedByEmployeeId, v))
}

// DeletedByEmployeeIdNEQ applies the NEQ predicate on the "DeletedByEmployeeId" field.
func DeletedByEmployeeIdNEQ(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldNEQ(FieldDeletedByEmployeeId, v))
}

// DeletedByEmployeeIdIn applies the In predicate on the "DeletedByEmployeeId" field.
func DeletedByEmployeeIdIn(vs ...string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldIn(FieldDeletedByEmployeeId, vs...))
}

// DeletedByEmployeeIdNotIn applies the NotIn predicate on the "DeletedByEmployeeId" field.
func DeletedByEmployeeIdNotIn(vs ...string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldNotIn(FieldDeletedByEmployeeId, vs...))
}

// DeletedByEmployeeIdGT applies the GT predicate on the "DeletedByEmployeeId" field.
func DeletedByEmployeeIdGT(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldGT(FieldDeletedByEmployeeId, v))
}

// DeletedByEmployeeIdGTE applies the GTE predicate on the "DeletedByEmployeeId" field.
func DeletedByEmployeeIdGTE(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldGTE(FieldDeletedByEmployeeId, v))
}

// DeletedByEmployeeIdLT applies the LT predicate on the "DeletedByEmployeeId" field.
func DeletedByEmployeeIdLT(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldLT(FieldDeletedByEmployeeId, v))
}

// DeletedByEmployeeIdLTE applies the LTE predicate on the "DeletedByEmployeeId" field.
func DeletedByEmployeeIdLTE(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldLTE(FieldDeletedByEmployeeId, v))
}

// DeletedByEmployeeIdContains applies the Contains predicate on the "DeletedByEmployeeId" field.
func DeletedByEmployeeIdContains(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldContains(FieldDeletedByEmployeeId, v))
}

// DeletedByEmployeeIdHasPrefix applies the HasPrefix predicate on the "DeletedByEmployeeId" field.
func DeletedByEmployeeIdHasPrefix(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldHasPrefix(FieldDeletedByEmployeeId, v))
}

// DeletedByEmployeeIdHasSuffix applies the HasSuffix predicate on the "DeletedByEmployeeId" field.
func DeletedByEmployeeIdHasSuffix(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldHasSuffix(FieldDeletedByEmployeeId, v))
}

// DeletedByEmployeeIdIsNil applies the IsNil predicate on the "DeletedByEmployeeId" field.
func DeletedByEmployeeIdIsNil() predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldIsNull(FieldDeletedByEmployeeId))
}

// DeletedByEmployeeIdNotNil applies the NotNil predicate on the "DeletedByEmployeeId" field.
func DeletedByEmployeeIdNotNil() predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldNotNull(FieldDeletedByEmployeeId))
}

// DeletedByEmployeeIdEqualFold applies the EqualFold predicate on the "DeletedByEmployeeId" field.
func DeletedByEmployeeIdEqualFold(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldEqualFold(FieldDeletedByEmployeeId, v))
}

// DeletedByEmployeeIdContainsFold applies the ContainsFold predicate on the "DeletedByEmployeeId" field.
func DeletedByEmployeeIdContainsFold(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldContainsFold(FieldDeletedByEmployeeId, v))
}

// DeletedByDesignationEQ applies the EQ predicate on the "DeletedByDesignation" field.
func DeletedByDesignationEQ(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldEQ(FieldDeletedByDesignation, v))
}

// DeletedByDesignationNEQ applies the NEQ predicate on the "DeletedByDesignation" field.
func DeletedByDesignationNEQ(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldNEQ(FieldDeletedByDesignation, v))
}

// DeletedByDesignationIn applies the In predicate on the "DeletedByDesignation" field.
func DeletedByDesignationIn(vs ...string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldIn(FieldDeletedByDesignation, vs...))
}

// DeletedByDesignationNotIn applies the NotIn predicate on the "DeletedByDesignation" field.
func DeletedByDesignationNotIn(vs ...string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldNotIn(FieldDeletedByDesignation, vs...))
}

// DeletedByDesignationGT applies the GT predicate on the "DeletedByDesignation" field.
func DeletedByDesignationGT(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldGT(FieldDeletedByDesignation, v))
}

// DeletedByDesignationGTE applies the GTE predicate on the "DeletedByDesignation" field.
func DeletedByDesignationGTE(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldGTE(FieldDeletedByDesignation, v))
}

// DeletedByDesignationLT applies the LT predicate on the "DeletedByDesignation" field.
func DeletedByDesignationLT(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldLT(FieldDeletedByDesignation, v))
}

// DeletedByDesignationLTE applies the LTE predicate on the "DeletedByDesignation" field.
func DeletedByDesignationLTE(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldLTE(FieldDeletedByDesignation, v))
}

// DeletedByDesignationContains applies the Contains predicate on the "DeletedByDesignation" field.
func DeletedByDesignationContains(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldContains(FieldDeletedByDesignation, v))
}

// DeletedByDesignationHasPrefix applies the HasPrefix predicate on the "DeletedByDesignation" field.
func DeletedByDesignationHasPrefix(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldHasPrefix(FieldDeletedByDesignation, v))
}

// DeletedByDesignationHasSuffix applies the HasSuffix predicate on the "DeletedByDesignation" field.
func DeletedByDesignationHasSuffix(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldHasSuffix(FieldDeletedByDesignation, v))
}

// DeletedByDesignationIsNil applies the IsNil predicate on the "DeletedByDesignation" field.
func DeletedByDesignationIsNil() predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldIsNull(FieldDeletedByDesignation))
}

// DeletedByDesignationNotNil applies the NotNil predicate on the "DeletedByDesignation" field.
func DeletedByDesignationNotNil() predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldNotNull(FieldDeletedByDesignation))
}

// DeletedByDesignationEqualFold applies the EqualFold predicate on the "DeletedByDesignation" field.
func DeletedByDesignationEqualFold(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldEqualFold(FieldDeletedByDesignation, v))
}

// DeletedByDesignationContainsFold applies the ContainsFold predicate on the "DeletedByDesignation" field.
func DeletedByDesignationContainsFold(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldContainsFold(FieldDeletedByDesignation, v))
}

// DeletedDateEQ applies the EQ predicate on the "DeletedDate" field.
func DeletedDateEQ(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldEQ(FieldDeletedDate, v))
}

// DeletedDateNEQ applies the NEQ predicate on the "DeletedDate" field.
func DeletedDateNEQ(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldNEQ(FieldDeletedDate, v))
}

// DeletedDateIn applies the In predicate on the "DeletedDate" field.
func DeletedDateIn(vs ...string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldIn(FieldDeletedDate, vs...))
}

// DeletedDateNotIn applies the NotIn predicate on the "DeletedDate" field.
func DeletedDateNotIn(vs ...string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldNotIn(FieldDeletedDate, vs...))
}

// DeletedDateGT applies the GT predicate on the "DeletedDate" field.
func DeletedDateGT(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldGT(FieldDeletedDate, v))
}

// DeletedDateGTE applies the GTE predicate on the "DeletedDate" field.
func DeletedDateGTE(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldGTE(FieldDeletedDate, v))
}

// DeletedDateLT applies the LT predicate on the "DeletedDate" field.
func DeletedDateLT(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldLT(FieldDeletedDate, v))
}

// DeletedDateLTE applies the LTE predicate on the "DeletedDate" field.
func DeletedDateLTE(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldLTE(FieldDeletedDate, v))
}

// DeletedDateContains applies the Contains predicate on the "DeletedDate" field.
func DeletedDateContains(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldContains(FieldDeletedDate, v))
}

// DeletedDateHasPrefix applies the HasPrefix predicate on the "DeletedDate" field.
func DeletedDateHasPrefix(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldHasPrefix(FieldDeletedDate, v))
}

// DeletedDateHasSuffix applies the HasSuffix predicate on the "DeletedDate" field.
func DeletedDateHasSuffix(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldHasSuffix(FieldDeletedDate, v))
}

// DeletedDateIsNil applies the IsNil predicate on the "DeletedDate" field.
func DeletedDateIsNil() predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldIsNull(FieldDeletedDate))
}

// DeletedDateNotNil applies the NotNil predicate on the "DeletedDate" field.
func DeletedDateNotNil() predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldNotNull(FieldDeletedDate))
}

// DeletedDateEqualFold applies the EqualFold predicate on the "DeletedDate" field.
func DeletedDateEqualFold(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldEqualFold(FieldDeletedDate, v))
}

// DeletedDateContainsFold applies the ContainsFold predicate on the "DeletedDate" field.
func DeletedDateContainsFold(v string) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(sql.FieldContainsFold(FieldDeletedDate, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ExamPostMapping) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ExamPostMapping) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ExamPostMapping) predicate.ExamPostMapping {
	return predicate.ExamPostMapping(func(s *sql.Selector) {
		p(s.Not())
	})
}
