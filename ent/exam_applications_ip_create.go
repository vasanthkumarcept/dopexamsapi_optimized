// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"recruit/ent/cadre_choice_ip"
	"recruit/ent/center"
	"recruit/ent/circlesummaryforno"
	"recruit/ent/exam_applications_ip"
	"recruit/ent/examcitycenter"
	"recruit/ent/logs"
	"recruit/ent/placeofpreferenceip"
	"recruit/ent/recommendationsipapplications"
	"recruit/ent/rolemaster"
	"recruit/ent/usermaster"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ExamApplicationsIPCreate is the builder for creating a Exam_Applications_IP entity.
type ExamApplicationsIPCreate struct {
	config
	mutation *ExamApplicationsIPMutation
	hooks    []Hook
}

// SetApplicationNumber sets the "ApplicationNumber" field.
func (eaic *ExamApplicationsIPCreate) SetApplicationNumber(s string) *ExamApplicationsIPCreate {
	eaic.mutation.SetApplicationNumber(s)
	return eaic
}

// SetNillableApplicationNumber sets the "ApplicationNumber" field if the given value is not nil.
func (eaic *ExamApplicationsIPCreate) SetNillableApplicationNumber(s *string) *ExamApplicationsIPCreate {
	if s != nil {
		eaic.SetApplicationNumber(*s)
	}
	return eaic
}

// SetApplnSubmittedDate sets the "ApplnSubmittedDate" field.
func (eaic *ExamApplicationsIPCreate) SetApplnSubmittedDate(t time.Time) *ExamApplicationsIPCreate {
	eaic.mutation.SetApplnSubmittedDate(t)
	return eaic
}

// SetNillableApplnSubmittedDate sets the "ApplnSubmittedDate" field if the given value is not nil.
func (eaic *ExamApplicationsIPCreate) SetNillableApplnSubmittedDate(t *time.Time) *ExamApplicationsIPCreate {
	if t != nil {
		eaic.SetApplnSubmittedDate(*t)
	}
	return eaic
}

// SetExamCode sets the "ExamCode" field.
func (eaic *ExamApplicationsIPCreate) SetExamCode(i int32) *ExamApplicationsIPCreate {
	eaic.mutation.SetExamCode(i)
	return eaic
}

// SetNillableExamCode sets the "ExamCode" field if the given value is not nil.
func (eaic *ExamApplicationsIPCreate) SetNillableExamCode(i *int32) *ExamApplicationsIPCreate {
	if i != nil {
		eaic.SetExamCode(*i)
	}
	return eaic
}

// SetExamShortName sets the "ExamShortName" field.
func (eaic *ExamApplicationsIPCreate) SetExamShortName(s string) *ExamApplicationsIPCreate {
	eaic.mutation.SetExamShortName(s)
	return eaic
}

// SetNillableExamShortName sets the "ExamShortName" field if the given value is not nil.
func (eaic *ExamApplicationsIPCreate) SetNillableExamShortName(s *string) *ExamApplicationsIPCreate {
	if s != nil {
		eaic.SetExamShortName(*s)
	}
	return eaic
}

// SetExamName sets the "ExamName" field.
func (eaic *ExamApplicationsIPCreate) SetExamName(s string) *ExamApplicationsIPCreate {
	eaic.mutation.SetExamName(s)
	return eaic
}

// SetNillableExamName sets the "ExamName" field if the given value is not nil.
func (eaic *ExamApplicationsIPCreate) SetNillableExamName(s *string) *ExamApplicationsIPCreate {
	if s != nil {
		eaic.SetExamName(*s)
	}
	return eaic
}

// SetSmsExamShortName sets the "SmsExamShortName" field.
func (eaic *ExamApplicationsIPCreate) SetSmsExamShortName(s string) *ExamApplicationsIPCreate {
	eaic.mutation.SetSmsExamShortName(s)
	return eaic
}

// SetNillableSmsExamShortName sets the "SmsExamShortName" field if the given value is not nil.
func (eaic *ExamApplicationsIPCreate) SetNillableSmsExamShortName(s *string) *ExamApplicationsIPCreate {
	if s != nil {
		eaic.SetSmsExamShortName(*s)
	}
	return eaic
}

// SetExamYear sets the "ExamYear" field.
func (eaic *ExamApplicationsIPCreate) SetExamYear(s string) *ExamApplicationsIPCreate {
	eaic.mutation.SetExamYear(s)
	return eaic
}

// SetNillableExamYear sets the "ExamYear" field if the given value is not nil.
func (eaic *ExamApplicationsIPCreate) SetNillableExamYear(s *string) *ExamApplicationsIPCreate {
	if s != nil {
		eaic.SetExamYear(*s)
	}
	return eaic
}

// SetUserID sets the "UserID" field.
func (eaic *ExamApplicationsIPCreate) SetUserID(i int32) *ExamApplicationsIPCreate {
	eaic.mutation.SetUserID(i)
	return eaic
}

// SetNillableUserID sets the "UserID" field if the given value is not nil.
func (eaic *ExamApplicationsIPCreate) SetNillableUserID(i *int32) *ExamApplicationsIPCreate {
	if i != nil {
		eaic.SetUserID(*i)
	}
	return eaic
}

// SetEmployeeID sets the "EmployeeID" field.
func (eaic *ExamApplicationsIPCreate) SetEmployeeID(i int64) *ExamApplicationsIPCreate {
	eaic.mutation.SetEmployeeID(i)
	return eaic
}

// SetNillableEmployeeID sets the "EmployeeID" field if the given value is not nil.
func (eaic *ExamApplicationsIPCreate) SetNillableEmployeeID(i *int64) *ExamApplicationsIPCreate {
	if i != nil {
		eaic.SetEmployeeID(*i)
	}
	return eaic
}

// SetEmployeeName sets the "EmployeeName" field.
func (eaic *ExamApplicationsIPCreate) SetEmployeeName(s string) *ExamApplicationsIPCreate {
	eaic.mutation.SetEmployeeName(s)
	return eaic
}

// SetNillableEmployeeName sets the "EmployeeName" field if the given value is not nil.
func (eaic *ExamApplicationsIPCreate) SetNillableEmployeeName(s *string) *ExamApplicationsIPCreate {
	if s != nil {
		eaic.SetEmployeeName(*s)
	}
	return eaic
}

// SetDOB sets the "DOB" field.
func (eaic *ExamApplicationsIPCreate) SetDOB(s string) *ExamApplicationsIPCreate {
	eaic.mutation.SetDOB(s)
	return eaic
}

// SetNillableDOB sets the "DOB" field if the given value is not nil.
func (eaic *ExamApplicationsIPCreate) SetNillableDOB(s *string) *ExamApplicationsIPCreate {
	if s != nil {
		eaic.SetDOB(*s)
	}
	return eaic
}

// SetGender sets the "Gender" field.
func (eaic *ExamApplicationsIPCreate) SetGender(s string) *ExamApplicationsIPCreate {
	eaic.mutation.SetGender(s)
	return eaic
}

// SetNillableGender sets the "Gender" field if the given value is not nil.
func (eaic *ExamApplicationsIPCreate) SetNillableGender(s *string) *ExamApplicationsIPCreate {
	if s != nil {
		eaic.SetGender(*s)
	}
	return eaic
}

// SetMobileNumber sets the "MobileNumber" field.
func (eaic *ExamApplicationsIPCreate) SetMobileNumber(s string) *ExamApplicationsIPCreate {
	eaic.mutation.SetMobileNumber(s)
	return eaic
}

// SetNillableMobileNumber sets the "MobileNumber" field if the given value is not nil.
func (eaic *ExamApplicationsIPCreate) SetNillableMobileNumber(s *string) *ExamApplicationsIPCreate {
	if s != nil {
		eaic.SetMobileNumber(*s)
	}
	return eaic
}

// SetEmailID sets the "EmailID" field.
func (eaic *ExamApplicationsIPCreate) SetEmailID(s string) *ExamApplicationsIPCreate {
	eaic.mutation.SetEmailID(s)
	return eaic
}

// SetNillableEmailID sets the "EmailID" field if the given value is not nil.
func (eaic *ExamApplicationsIPCreate) SetNillableEmailID(s *string) *ExamApplicationsIPCreate {
	if s != nil {
		eaic.SetEmailID(*s)
	}
	return eaic
}

// SetCategoryCode sets the "CategoryCode" field.
func (eaic *ExamApplicationsIPCreate) SetCategoryCode(s string) *ExamApplicationsIPCreate {
	eaic.mutation.SetCategoryCode(s)
	return eaic
}

// SetNillableCategoryCode sets the "CategoryCode" field if the given value is not nil.
func (eaic *ExamApplicationsIPCreate) SetNillableCategoryCode(s *string) *ExamApplicationsIPCreate {
	if s != nil {
		eaic.SetCategoryCode(*s)
	}
	return eaic
}

// SetCategoryDescription sets the "CategoryDescription" field.
func (eaic *ExamApplicationsIPCreate) SetCategoryDescription(s string) *ExamApplicationsIPCreate {
	eaic.mutation.SetCategoryDescription(s)
	return eaic
}

// SetNillableCategoryDescription sets the "CategoryDescription" field if the given value is not nil.
func (eaic *ExamApplicationsIPCreate) SetNillableCategoryDescription(s *string) *ExamApplicationsIPCreate {
	if s != nil {
		eaic.SetCategoryDescription(*s)
	}
	return eaic
}

// SetDisabilityTypeID sets the "DisabilityTypeID" field.
func (eaic *ExamApplicationsIPCreate) SetDisabilityTypeID(s string) *ExamApplicationsIPCreate {
	eaic.mutation.SetDisabilityTypeID(s)
	return eaic
}

// SetNillableDisabilityTypeID sets the "DisabilityTypeID" field if the given value is not nil.
func (eaic *ExamApplicationsIPCreate) SetNillableDisabilityTypeID(s *string) *ExamApplicationsIPCreate {
	if s != nil {
		eaic.SetDisabilityTypeID(*s)
	}
	return eaic
}

// SetDisabilityTypeCode sets the "DisabilityTypeCode" field.
func (eaic *ExamApplicationsIPCreate) SetDisabilityTypeCode(s string) *ExamApplicationsIPCreate {
	eaic.mutation.SetDisabilityTypeCode(s)
	return eaic
}

// SetNillableDisabilityTypeCode sets the "DisabilityTypeCode" field if the given value is not nil.
func (eaic *ExamApplicationsIPCreate) SetNillableDisabilityTypeCode(s *string) *ExamApplicationsIPCreate {
	if s != nil {
		eaic.SetDisabilityTypeCode(*s)
	}
	return eaic
}

// SetDisabilityTypeDescription sets the "DisabilityTypeDescription" field.
func (eaic *ExamApplicationsIPCreate) SetDisabilityTypeDescription(s string) *ExamApplicationsIPCreate {
	eaic.mutation.SetDisabilityTypeDescription(s)
	return eaic
}

// SetNillableDisabilityTypeDescription sets the "DisabilityTypeDescription" field if the given value is not nil.
func (eaic *ExamApplicationsIPCreate) SetNillableDisabilityTypeDescription(s *string) *ExamApplicationsIPCreate {
	if s != nil {
		eaic.SetDisabilityTypeDescription(*s)
	}
	return eaic
}

// SetDisabilityPercentage sets the "DisabilityPercentage" field.
func (eaic *ExamApplicationsIPCreate) SetDisabilityPercentage(i int32) *ExamApplicationsIPCreate {
	eaic.mutation.SetDisabilityPercentage(i)
	return eaic
}

// SetNillableDisabilityPercentage sets the "DisabilityPercentage" field if the given value is not nil.
func (eaic *ExamApplicationsIPCreate) SetNillableDisabilityPercentage(i *int32) *ExamApplicationsIPCreate {
	if i != nil {
		eaic.SetDisabilityPercentage(*i)
	}
	return eaic
}

// SetDCCS sets the "DCCS" field.
func (eaic *ExamApplicationsIPCreate) SetDCCS(s string) *ExamApplicationsIPCreate {
	eaic.mutation.SetDCCS(s)
	return eaic
}

// SetNillableDCCS sets the "DCCS" field if the given value is not nil.
func (eaic *ExamApplicationsIPCreate) SetNillableDCCS(s *string) *ExamApplicationsIPCreate {
	if s != nil {
		eaic.SetDCCS(*s)
	}
	return eaic
}

// SetEntryPostCode sets the "EntryPostCode" field.
func (eaic *ExamApplicationsIPCreate) SetEntryPostCode(s string) *ExamApplicationsIPCreate {
	eaic.mutation.SetEntryPostCode(s)
	return eaic
}

// SetNillableEntryPostCode sets the "EntryPostCode" field if the given value is not nil.
func (eaic *ExamApplicationsIPCreate) SetNillableEntryPostCode(s *string) *ExamApplicationsIPCreate {
	if s != nil {
		eaic.SetEntryPostCode(*s)
	}
	return eaic
}

// SetEntryPostDescription sets the "EntryPostDescription" field.
func (eaic *ExamApplicationsIPCreate) SetEntryPostDescription(s string) *ExamApplicationsIPCreate {
	eaic.mutation.SetEntryPostDescription(s)
	return eaic
}

// SetNillableEntryPostDescription sets the "EntryPostDescription" field if the given value is not nil.
func (eaic *ExamApplicationsIPCreate) SetNillableEntryPostDescription(s *string) *ExamApplicationsIPCreate {
	if s != nil {
		eaic.SetEntryPostDescription(*s)
	}
	return eaic
}

// SetPresentPostCode sets the "PresentPostCode" field.
func (eaic *ExamApplicationsIPCreate) SetPresentPostCode(s string) *ExamApplicationsIPCreate {
	eaic.mutation.SetPresentPostCode(s)
	return eaic
}

// SetNillablePresentPostCode sets the "PresentPostCode" field if the given value is not nil.
func (eaic *ExamApplicationsIPCreate) SetNillablePresentPostCode(s *string) *ExamApplicationsIPCreate {
	if s != nil {
		eaic.SetPresentPostCode(*s)
	}
	return eaic
}

// SetPresentPostDescription sets the "PresentPostDescription" field.
func (eaic *ExamApplicationsIPCreate) SetPresentPostDescription(s string) *ExamApplicationsIPCreate {
	eaic.mutation.SetPresentPostDescription(s)
	return eaic
}

// SetNillablePresentPostDescription sets the "PresentPostDescription" field if the given value is not nil.
func (eaic *ExamApplicationsIPCreate) SetNillablePresentPostDescription(s *string) *ExamApplicationsIPCreate {
	if s != nil {
		eaic.SetPresentPostDescription(*s)
	}
	return eaic
}

// SetFeederPostCode sets the "FeederPostCode" field.
func (eaic *ExamApplicationsIPCreate) SetFeederPostCode(s string) *ExamApplicationsIPCreate {
	eaic.mutation.SetFeederPostCode(s)
	return eaic
}

// SetNillableFeederPostCode sets the "FeederPostCode" field if the given value is not nil.
func (eaic *ExamApplicationsIPCreate) SetNillableFeederPostCode(s *string) *ExamApplicationsIPCreate {
	if s != nil {
		eaic.SetFeederPostCode(*s)
	}
	return eaic
}

// SetFeederPostDescription sets the "FeederPostDescription" field.
func (eaic *ExamApplicationsIPCreate) SetFeederPostDescription(s string) *ExamApplicationsIPCreate {
	eaic.mutation.SetFeederPostDescription(s)
	return eaic
}

// SetNillableFeederPostDescription sets the "FeederPostDescription" field if the given value is not nil.
func (eaic *ExamApplicationsIPCreate) SetNillableFeederPostDescription(s *string) *ExamApplicationsIPCreate {
	if s != nil {
		eaic.SetFeederPostDescription(*s)
	}
	return eaic
}

// SetFeederPostJoiningDate sets the "FeederPostJoiningDate" field.
func (eaic *ExamApplicationsIPCreate) SetFeederPostJoiningDate(s string) *ExamApplicationsIPCreate {
	eaic.mutation.SetFeederPostJoiningDate(s)
	return eaic
}

// SetNillableFeederPostJoiningDate sets the "FeederPostJoiningDate" field if the given value is not nil.
func (eaic *ExamApplicationsIPCreate) SetNillableFeederPostJoiningDate(s *string) *ExamApplicationsIPCreate {
	if s != nil {
		eaic.SetFeederPostJoiningDate(*s)
	}
	return eaic
}

// SetDesignationID sets the "DesignationID" field.
func (eaic *ExamApplicationsIPCreate) SetDesignationID(s string) *ExamApplicationsIPCreate {
	eaic.mutation.SetDesignationID(s)
	return eaic
}

// SetNillableDesignationID sets the "DesignationID" field if the given value is not nil.
func (eaic *ExamApplicationsIPCreate) SetNillableDesignationID(s *string) *ExamApplicationsIPCreate {
	if s != nil {
		eaic.SetDesignationID(*s)
	}
	return eaic
}

// SetPresentDesignation sets the "PresentDesignation" field.
func (eaic *ExamApplicationsIPCreate) SetPresentDesignation(s string) *ExamApplicationsIPCreate {
	eaic.mutation.SetPresentDesignation(s)
	return eaic
}

// SetNillablePresentDesignation sets the "PresentDesignation" field if the given value is not nil.
func (eaic *ExamApplicationsIPCreate) SetNillablePresentDesignation(s *string) *ExamApplicationsIPCreate {
	if s != nil {
		eaic.SetPresentDesignation(*s)
	}
	return eaic
}

// SetEducationCode sets the "EducationCode" field.
func (eaic *ExamApplicationsIPCreate) SetEducationCode(s string) *ExamApplicationsIPCreate {
	eaic.mutation.SetEducationCode(s)
	return eaic
}

// SetNillableEducationCode sets the "EducationCode" field if the given value is not nil.
func (eaic *ExamApplicationsIPCreate) SetNillableEducationCode(s *string) *ExamApplicationsIPCreate {
	if s != nil {
		eaic.SetEducationCode(*s)
	}
	return eaic
}

// SetEducationDescription sets the "EducationDescription" field.
func (eaic *ExamApplicationsIPCreate) SetEducationDescription(s string) *ExamApplicationsIPCreate {
	eaic.mutation.SetEducationDescription(s)
	return eaic
}

// SetNillableEducationDescription sets the "EducationDescription" field if the given value is not nil.
func (eaic *ExamApplicationsIPCreate) SetNillableEducationDescription(s *string) *ExamApplicationsIPCreate {
	if s != nil {
		eaic.SetEducationDescription(*s)
	}
	return eaic
}

// SetFacilityUniqueID sets the "FacilityUniqueID" field.
func (eaic *ExamApplicationsIPCreate) SetFacilityUniqueID(s string) *ExamApplicationsIPCreate {
	eaic.mutation.SetFacilityUniqueID(s)
	return eaic
}

// SetNillableFacilityUniqueID sets the "FacilityUniqueID" field if the given value is not nil.
func (eaic *ExamApplicationsIPCreate) SetNillableFacilityUniqueID(s *string) *ExamApplicationsIPCreate {
	if s != nil {
		eaic.SetFacilityUniqueID(*s)
	}
	return eaic
}

// SetWorkingOfficePincode sets the "WorkingOfficePincode" field.
func (eaic *ExamApplicationsIPCreate) SetWorkingOfficePincode(i int32) *ExamApplicationsIPCreate {
	eaic.mutation.SetWorkingOfficePincode(i)
	return eaic
}

// SetNillableWorkingOfficePincode sets the "WorkingOfficePincode" field if the given value is not nil.
func (eaic *ExamApplicationsIPCreate) SetNillableWorkingOfficePincode(i *int32) *ExamApplicationsIPCreate {
	if i != nil {
		eaic.SetWorkingOfficePincode(*i)
	}
	return eaic
}

// SetWorkingOfficeFacilityID sets the "WorkingOfficeFacilityID" field.
func (eaic *ExamApplicationsIPCreate) SetWorkingOfficeFacilityID(s string) *ExamApplicationsIPCreate {
	eaic.mutation.SetWorkingOfficeFacilityID(s)
	return eaic
}

// SetNillableWorkingOfficeFacilityID sets the "WorkingOfficeFacilityID" field if the given value is not nil.
func (eaic *ExamApplicationsIPCreate) SetNillableWorkingOfficeFacilityID(s *string) *ExamApplicationsIPCreate {
	if s != nil {
		eaic.SetWorkingOfficeFacilityID(*s)
	}
	return eaic
}

// SetWorkingOfficeName sets the "WorkingOfficeName" field.
func (eaic *ExamApplicationsIPCreate) SetWorkingOfficeName(s string) *ExamApplicationsIPCreate {
	eaic.mutation.SetWorkingOfficeName(s)
	return eaic
}

// SetNillableWorkingOfficeName sets the "WorkingOfficeName" field if the given value is not nil.
func (eaic *ExamApplicationsIPCreate) SetNillableWorkingOfficeName(s *string) *ExamApplicationsIPCreate {
	if s != nil {
		eaic.SetWorkingOfficeName(*s)
	}
	return eaic
}

// SetWorkingOfficeCircleFacilityID sets the "WorkingOfficeCircleFacilityID" field.
func (eaic *ExamApplicationsIPCreate) SetWorkingOfficeCircleFacilityID(s string) *ExamApplicationsIPCreate {
	eaic.mutation.SetWorkingOfficeCircleFacilityID(s)
	return eaic
}

// SetNillableWorkingOfficeCircleFacilityID sets the "WorkingOfficeCircleFacilityID" field if the given value is not nil.
func (eaic *ExamApplicationsIPCreate) SetNillableWorkingOfficeCircleFacilityID(s *string) *ExamApplicationsIPCreate {
	if s != nil {
		eaic.SetWorkingOfficeCircleFacilityID(*s)
	}
	return eaic
}

// SetWorkingOfficeCircleName sets the "WorkingOfficeCircleName" field.
func (eaic *ExamApplicationsIPCreate) SetWorkingOfficeCircleName(s string) *ExamApplicationsIPCreate {
	eaic.mutation.SetWorkingOfficeCircleName(s)
	return eaic
}

// SetNillableWorkingOfficeCircleName sets the "WorkingOfficeCircleName" field if the given value is not nil.
func (eaic *ExamApplicationsIPCreate) SetNillableWorkingOfficeCircleName(s *string) *ExamApplicationsIPCreate {
	if s != nil {
		eaic.SetWorkingOfficeCircleName(*s)
	}
	return eaic
}

// SetWorkingOfficeRegionFacilityID sets the "WorkingOfficeRegionFacilityID" field.
func (eaic *ExamApplicationsIPCreate) SetWorkingOfficeRegionFacilityID(s string) *ExamApplicationsIPCreate {
	eaic.mutation.SetWorkingOfficeRegionFacilityID(s)
	return eaic
}

// SetNillableWorkingOfficeRegionFacilityID sets the "WorkingOfficeRegionFacilityID" field if the given value is not nil.
func (eaic *ExamApplicationsIPCreate) SetNillableWorkingOfficeRegionFacilityID(s *string) *ExamApplicationsIPCreate {
	if s != nil {
		eaic.SetWorkingOfficeRegionFacilityID(*s)
	}
	return eaic
}

// SetWorkingOfficeRegionName sets the "WorkingOfficeRegionName" field.
func (eaic *ExamApplicationsIPCreate) SetWorkingOfficeRegionName(s string) *ExamApplicationsIPCreate {
	eaic.mutation.SetWorkingOfficeRegionName(s)
	return eaic
}

// SetNillableWorkingOfficeRegionName sets the "WorkingOfficeRegionName" field if the given value is not nil.
func (eaic *ExamApplicationsIPCreate) SetNillableWorkingOfficeRegionName(s *string) *ExamApplicationsIPCreate {
	if s != nil {
		eaic.SetWorkingOfficeRegionName(*s)
	}
	return eaic
}

// SetWorkingOfficeDivisionFacilityID sets the "WorkingOfficeDivisionFacilityID" field.
func (eaic *ExamApplicationsIPCreate) SetWorkingOfficeDivisionFacilityID(s string) *ExamApplicationsIPCreate {
	eaic.mutation.SetWorkingOfficeDivisionFacilityID(s)
	return eaic
}

// SetNillableWorkingOfficeDivisionFacilityID sets the "WorkingOfficeDivisionFacilityID" field if the given value is not nil.
func (eaic *ExamApplicationsIPCreate) SetNillableWorkingOfficeDivisionFacilityID(s *string) *ExamApplicationsIPCreate {
	if s != nil {
		eaic.SetWorkingOfficeDivisionFacilityID(*s)
	}
	return eaic
}

// SetWorkingOfficeDivisionName sets the "WorkingOfficeDivisionName" field.
func (eaic *ExamApplicationsIPCreate) SetWorkingOfficeDivisionName(s string) *ExamApplicationsIPCreate {
	eaic.mutation.SetWorkingOfficeDivisionName(s)
	return eaic
}

// SetNillableWorkingOfficeDivisionName sets the "WorkingOfficeDivisionName" field if the given value is not nil.
func (eaic *ExamApplicationsIPCreate) SetNillableWorkingOfficeDivisionName(s *string) *ExamApplicationsIPCreate {
	if s != nil {
		eaic.SetWorkingOfficeDivisionName(*s)
	}
	return eaic
}

// SetReportingOfficeFacilityID sets the "ReportingOfficeFacilityID" field.
func (eaic *ExamApplicationsIPCreate) SetReportingOfficeFacilityID(s string) *ExamApplicationsIPCreate {
	eaic.mutation.SetReportingOfficeFacilityID(s)
	return eaic
}

// SetNillableReportingOfficeFacilityID sets the "ReportingOfficeFacilityID" field if the given value is not nil.
func (eaic *ExamApplicationsIPCreate) SetNillableReportingOfficeFacilityID(s *string) *ExamApplicationsIPCreate {
	if s != nil {
		eaic.SetReportingOfficeFacilityID(*s)
	}
	return eaic
}

// SetReportingOfficeName sets the "ReportingOfficeName" field.
func (eaic *ExamApplicationsIPCreate) SetReportingOfficeName(s string) *ExamApplicationsIPCreate {
	eaic.mutation.SetReportingOfficeName(s)
	return eaic
}

// SetNillableReportingOfficeName sets the "ReportingOfficeName" field if the given value is not nil.
func (eaic *ExamApplicationsIPCreate) SetNillableReportingOfficeName(s *string) *ExamApplicationsIPCreate {
	if s != nil {
		eaic.SetReportingOfficeName(*s)
	}
	return eaic
}

// SetLienControllingOfficeID sets the "LienControllingOfficeID" field.
func (eaic *ExamApplicationsIPCreate) SetLienControllingOfficeID(s string) *ExamApplicationsIPCreate {
	eaic.mutation.SetLienControllingOfficeID(s)
	return eaic
}

// SetNillableLienControllingOfficeID sets the "LienControllingOfficeID" field if the given value is not nil.
func (eaic *ExamApplicationsIPCreate) SetNillableLienControllingOfficeID(s *string) *ExamApplicationsIPCreate {
	if s != nil {
		eaic.SetLienControllingOfficeID(*s)
	}
	return eaic
}

// SetLienControllingOfficeName sets the "LienControllingOfficeName" field.
func (eaic *ExamApplicationsIPCreate) SetLienControllingOfficeName(s string) *ExamApplicationsIPCreate {
	eaic.mutation.SetLienControllingOfficeName(s)
	return eaic
}

// SetNillableLienControllingOfficeName sets the "LienControllingOfficeName" field if the given value is not nil.
func (eaic *ExamApplicationsIPCreate) SetNillableLienControllingOfficeName(s *string) *ExamApplicationsIPCreate {
	if s != nil {
		eaic.SetLienControllingOfficeName(*s)
	}
	return eaic
}

// SetInDeputation sets the "InDeputation" field.
func (eaic *ExamApplicationsIPCreate) SetInDeputation(s string) *ExamApplicationsIPCreate {
	eaic.mutation.SetInDeputation(s)
	return eaic
}

// SetNillableInDeputation sets the "InDeputation" field if the given value is not nil.
func (eaic *ExamApplicationsIPCreate) SetNillableInDeputation(s *string) *ExamApplicationsIPCreate {
	if s != nil {
		eaic.SetInDeputation(*s)
	}
	return eaic
}

// SetDeputationType sets the "DeputationType" field.
func (eaic *ExamApplicationsIPCreate) SetDeputationType(s string) *ExamApplicationsIPCreate {
	eaic.mutation.SetDeputationType(s)
	return eaic
}

// SetNillableDeputationType sets the "DeputationType" field if the given value is not nil.
func (eaic *ExamApplicationsIPCreate) SetNillableDeputationType(s *string) *ExamApplicationsIPCreate {
	if s != nil {
		eaic.SetDeputationType(*s)
	}
	return eaic
}

// SetDeputationOfficeUniqueId sets the "DeputationOfficeUniqueId" field.
func (eaic *ExamApplicationsIPCreate) SetDeputationOfficeUniqueId(s string) *ExamApplicationsIPCreate {
	eaic.mutation.SetDeputationOfficeUniqueId(s)
	return eaic
}

// SetNillableDeputationOfficeUniqueId sets the "DeputationOfficeUniqueId" field if the given value is not nil.
func (eaic *ExamApplicationsIPCreate) SetNillableDeputationOfficeUniqueId(s *string) *ExamApplicationsIPCreate {
	if s != nil {
		eaic.SetDeputationOfficeUniqueId(*s)
	}
	return eaic
}

// SetDeputationOfficeFacilityID sets the "DeputationOfficeFacilityID" field.
func (eaic *ExamApplicationsIPCreate) SetDeputationOfficeFacilityID(s string) *ExamApplicationsIPCreate {
	eaic.mutation.SetDeputationOfficeFacilityID(s)
	return eaic
}

// SetNillableDeputationOfficeFacilityID sets the "DeputationOfficeFacilityID" field if the given value is not nil.
func (eaic *ExamApplicationsIPCreate) SetNillableDeputationOfficeFacilityID(s *string) *ExamApplicationsIPCreate {
	if s != nil {
		eaic.SetDeputationOfficeFacilityID(*s)
	}
	return eaic
}

// SetDeputationOfficeName sets the "DeputationOfficeName" field.
func (eaic *ExamApplicationsIPCreate) SetDeputationOfficeName(s string) *ExamApplicationsIPCreate {
	eaic.mutation.SetDeputationOfficeName(s)
	return eaic
}

// SetNillableDeputationOfficeName sets the "DeputationOfficeName" field if the given value is not nil.
func (eaic *ExamApplicationsIPCreate) SetNillableDeputationOfficeName(s *string) *ExamApplicationsIPCreate {
	if s != nil {
		eaic.SetDeputationOfficeName(*s)
	}
	return eaic
}

// SetDeputationControllingOfficeID sets the "DeputationControllingOfficeID" field.
func (eaic *ExamApplicationsIPCreate) SetDeputationControllingOfficeID(s string) *ExamApplicationsIPCreate {
	eaic.mutation.SetDeputationControllingOfficeID(s)
	return eaic
}

// SetNillableDeputationControllingOfficeID sets the "DeputationControllingOfficeID" field if the given value is not nil.
func (eaic *ExamApplicationsIPCreate) SetNillableDeputationControllingOfficeID(s *string) *ExamApplicationsIPCreate {
	if s != nil {
		eaic.SetDeputationControllingOfficeID(*s)
	}
	return eaic
}

// SetDeputationControllingOfficeName sets the "DeputationControllingOfficeName" field.
func (eaic *ExamApplicationsIPCreate) SetDeputationControllingOfficeName(s string) *ExamApplicationsIPCreate {
	eaic.mutation.SetDeputationControllingOfficeName(s)
	return eaic
}

// SetNillableDeputationControllingOfficeName sets the "DeputationControllingOfficeName" field if the given value is not nil.
func (eaic *ExamApplicationsIPCreate) SetNillableDeputationControllingOfficeName(s *string) *ExamApplicationsIPCreate {
	if s != nil {
		eaic.SetDeputationControllingOfficeName(*s)
	}
	return eaic
}

// SetControllingOfficeFacilityID sets the "ControllingOfficeFacilityID" field.
func (eaic *ExamApplicationsIPCreate) SetControllingOfficeFacilityID(s string) *ExamApplicationsIPCreate {
	eaic.mutation.SetControllingOfficeFacilityID(s)
	return eaic
}

// SetNillableControllingOfficeFacilityID sets the "ControllingOfficeFacilityID" field if the given value is not nil.
func (eaic *ExamApplicationsIPCreate) SetNillableControllingOfficeFacilityID(s *string) *ExamApplicationsIPCreate {
	if s != nil {
		eaic.SetControllingOfficeFacilityID(*s)
	}
	return eaic
}

// SetControllingOfficeName sets the "ControllingOfficeName" field.
func (eaic *ExamApplicationsIPCreate) SetControllingOfficeName(s string) *ExamApplicationsIPCreate {
	eaic.mutation.SetControllingOfficeName(s)
	return eaic
}

// SetNillableControllingOfficeName sets the "ControllingOfficeName" field if the given value is not nil.
func (eaic *ExamApplicationsIPCreate) SetNillableControllingOfficeName(s *string) *ExamApplicationsIPCreate {
	if s != nil {
		eaic.SetControllingOfficeName(*s)
	}
	return eaic
}

// SetNodalOfficeFacilityID sets the "NodalOfficeFacilityID" field.
func (eaic *ExamApplicationsIPCreate) SetNodalOfficeFacilityID(s string) *ExamApplicationsIPCreate {
	eaic.mutation.SetNodalOfficeFacilityID(s)
	return eaic
}

// SetNillableNodalOfficeFacilityID sets the "NodalOfficeFacilityID" field if the given value is not nil.
func (eaic *ExamApplicationsIPCreate) SetNillableNodalOfficeFacilityID(s *string) *ExamApplicationsIPCreate {
	if s != nil {
		eaic.SetNodalOfficeFacilityID(*s)
	}
	return eaic
}

// SetNodalOfficeName sets the "NodalOfficeName" field.
func (eaic *ExamApplicationsIPCreate) SetNodalOfficeName(s string) *ExamApplicationsIPCreate {
	eaic.mutation.SetNodalOfficeName(s)
	return eaic
}

// SetNillableNodalOfficeName sets the "NodalOfficeName" field if the given value is not nil.
func (eaic *ExamApplicationsIPCreate) SetNillableNodalOfficeName(s *string) *ExamApplicationsIPCreate {
	if s != nil {
		eaic.SetNodalOfficeName(*s)
	}
	return eaic
}

// SetExamCityCenterCode sets the "ExamCityCenterCode" field.
func (eaic *ExamApplicationsIPCreate) SetExamCityCenterCode(i int32) *ExamApplicationsIPCreate {
	eaic.mutation.SetExamCityCenterCode(i)
	return eaic
}

// SetNillableExamCityCenterCode sets the "ExamCityCenterCode" field if the given value is not nil.
func (eaic *ExamApplicationsIPCreate) SetNillableExamCityCenterCode(i *int32) *ExamApplicationsIPCreate {
	if i != nil {
		eaic.SetExamCityCenterCode(*i)
	}
	return eaic
}

// SetCenterFacilityId sets the "CenterFacilityId" field.
func (eaic *ExamApplicationsIPCreate) SetCenterFacilityId(s string) *ExamApplicationsIPCreate {
	eaic.mutation.SetCenterFacilityId(s)
	return eaic
}

// SetNillableCenterFacilityId sets the "CenterFacilityId" field if the given value is not nil.
func (eaic *ExamApplicationsIPCreate) SetNillableCenterFacilityId(s *string) *ExamApplicationsIPCreate {
	if s != nil {
		eaic.SetCenterFacilityId(*s)
	}
	return eaic
}

// SetCentrePreference sets the "CentrePreference" field.
func (eaic *ExamApplicationsIPCreate) SetCentrePreference(s string) *ExamApplicationsIPCreate {
	eaic.mutation.SetCentrePreference(s)
	return eaic
}

// SetNillableCentrePreference sets the "CentrePreference" field if the given value is not nil.
func (eaic *ExamApplicationsIPCreate) SetNillableCentrePreference(s *string) *ExamApplicationsIPCreate {
	if s != nil {
		eaic.SetCentrePreference(*s)
	}
	return eaic
}

// SetSignature sets the "Signature" field.
func (eaic *ExamApplicationsIPCreate) SetSignature(s string) *ExamApplicationsIPCreate {
	eaic.mutation.SetSignature(s)
	return eaic
}

// SetNillableSignature sets the "Signature" field if the given value is not nil.
func (eaic *ExamApplicationsIPCreate) SetNillableSignature(s *string) *ExamApplicationsIPCreate {
	if s != nil {
		eaic.SetSignature(*s)
	}
	return eaic
}

// SetPhoto sets the "Photo" field.
func (eaic *ExamApplicationsIPCreate) SetPhoto(s string) *ExamApplicationsIPCreate {
	eaic.mutation.SetPhoto(s)
	return eaic
}

// SetNillablePhoto sets the "Photo" field if the given value is not nil.
func (eaic *ExamApplicationsIPCreate) SetNillablePhoto(s *string) *ExamApplicationsIPCreate {
	if s != nil {
		eaic.SetPhoto(*s)
	}
	return eaic
}

// SetSignaturePath sets the "SignaturePath" field.
func (eaic *ExamApplicationsIPCreate) SetSignaturePath(s string) *ExamApplicationsIPCreate {
	eaic.mutation.SetSignaturePath(s)
	return eaic
}

// SetNillableSignaturePath sets the "SignaturePath" field if the given value is not nil.
func (eaic *ExamApplicationsIPCreate) SetNillableSignaturePath(s *string) *ExamApplicationsIPCreate {
	if s != nil {
		eaic.SetSignaturePath(*s)
	}
	return eaic
}

// SetPhotoPath sets the "PhotoPath" field.
func (eaic *ExamApplicationsIPCreate) SetPhotoPath(s string) *ExamApplicationsIPCreate {
	eaic.mutation.SetPhotoPath(s)
	return eaic
}

// SetNillablePhotoPath sets the "PhotoPath" field if the given value is not nil.
func (eaic *ExamApplicationsIPCreate) SetNillablePhotoPath(s *string) *ExamApplicationsIPCreate {
	if s != nil {
		eaic.SetPhotoPath(*s)
	}
	return eaic
}

// SetCandidatePhoto sets the "CandidatePhoto" field.
func (eaic *ExamApplicationsIPCreate) SetCandidatePhoto(b []byte) *ExamApplicationsIPCreate {
	eaic.mutation.SetCandidatePhoto(b)
	return eaic
}

// SetCandidateSignature sets the "CandidateSignature" field.
func (eaic *ExamApplicationsIPCreate) SetCandidateSignature(b []byte) *ExamApplicationsIPCreate {
	eaic.mutation.SetCandidateSignature(b)
	return eaic
}

// SetTempHallTicket sets the "TempHallTicket" field.
func (eaic *ExamApplicationsIPCreate) SetTempHallTicket(s string) *ExamApplicationsIPCreate {
	eaic.mutation.SetTempHallTicket(s)
	return eaic
}

// SetNillableTempHallTicket sets the "TempHallTicket" field if the given value is not nil.
func (eaic *ExamApplicationsIPCreate) SetNillableTempHallTicket(s *string) *ExamApplicationsIPCreate {
	if s != nil {
		eaic.SetTempHallTicket(*s)
	}
	return eaic
}

// SetCandidateRemarks sets the "CandidateRemarks" field.
func (eaic *ExamApplicationsIPCreate) SetCandidateRemarks(s string) *ExamApplicationsIPCreate {
	eaic.mutation.SetCandidateRemarks(s)
	return eaic
}

// SetNillableCandidateRemarks sets the "CandidateRemarks" field if the given value is not nil.
func (eaic *ExamApplicationsIPCreate) SetNillableCandidateRemarks(s *string) *ExamApplicationsIPCreate {
	if s != nil {
		eaic.SetCandidateRemarks(*s)
	}
	return eaic
}

// SetVAGeneralRemarks sets the "VAGeneralRemarks" field.
func (eaic *ExamApplicationsIPCreate) SetVAGeneralRemarks(s string) *ExamApplicationsIPCreate {
	eaic.mutation.SetVAGeneralRemarks(s)
	return eaic
}

// SetNillableVAGeneralRemarks sets the "VAGeneralRemarks" field if the given value is not nil.
func (eaic *ExamApplicationsIPCreate) SetNillableVAGeneralRemarks(s *string) *ExamApplicationsIPCreate {
	if s != nil {
		eaic.SetVAGeneralRemarks(*s)
	}
	return eaic
}

// SetCAGeneralRemarks sets the "CAGeneralRemarks" field.
func (eaic *ExamApplicationsIPCreate) SetCAGeneralRemarks(s string) *ExamApplicationsIPCreate {
	eaic.mutation.SetCAGeneralRemarks(s)
	return eaic
}

// SetNillableCAGeneralRemarks sets the "CAGeneralRemarks" field if the given value is not nil.
func (eaic *ExamApplicationsIPCreate) SetNillableCAGeneralRemarks(s *string) *ExamApplicationsIPCreate {
	if s != nil {
		eaic.SetCAGeneralRemarks(*s)
	}
	return eaic
}

// SetNAGeneralRemarks sets the "NAGeneralRemarks" field.
func (eaic *ExamApplicationsIPCreate) SetNAGeneralRemarks(s string) *ExamApplicationsIPCreate {
	eaic.mutation.SetNAGeneralRemarks(s)
	return eaic
}

// SetNillableNAGeneralRemarks sets the "NAGeneralRemarks" field if the given value is not nil.
func (eaic *ExamApplicationsIPCreate) SetNillableNAGeneralRemarks(s *string) *ExamApplicationsIPCreate {
	if s != nil {
		eaic.SetNAGeneralRemarks(*s)
	}
	return eaic
}

// SetApplicationStatus sets the "ApplicationStatus" field.
func (eaic *ExamApplicationsIPCreate) SetApplicationStatus(s string) *ExamApplicationsIPCreate {
	eaic.mutation.SetApplicationStatus(s)
	return eaic
}

// SetNillableApplicationStatus sets the "ApplicationStatus" field if the given value is not nil.
func (eaic *ExamApplicationsIPCreate) SetNillableApplicationStatus(s *string) *ExamApplicationsIPCreate {
	if s != nil {
		eaic.SetApplicationStatus(*s)
	}
	return eaic
}

// SetStatus sets the "Status" field.
func (eaic *ExamApplicationsIPCreate) SetStatus(s string) *ExamApplicationsIPCreate {
	eaic.mutation.SetStatus(s)
	return eaic
}

// SetNillableStatus sets the "Status" field if the given value is not nil.
func (eaic *ExamApplicationsIPCreate) SetNillableStatus(s *string) *ExamApplicationsIPCreate {
	if s != nil {
		eaic.SetStatus(*s)
	}
	return eaic
}

// SetVAUserId sets the "VA_UserId" field.
func (eaic *ExamApplicationsIPCreate) SetVAUserId(i int32) *ExamApplicationsIPCreate {
	eaic.mutation.SetVAUserId(i)
	return eaic
}

// SetNillableVAUserId sets the "VA_UserId" field if the given value is not nil.
func (eaic *ExamApplicationsIPCreate) SetNillableVAUserId(i *int32) *ExamApplicationsIPCreate {
	if i != nil {
		eaic.SetVAUserId(*i)
	}
	return eaic
}

// SetVAUserName sets the "VA_UserName" field.
func (eaic *ExamApplicationsIPCreate) SetVAUserName(s string) *ExamApplicationsIPCreate {
	eaic.mutation.SetVAUserName(s)
	return eaic
}

// SetNillableVAUserName sets the "VA_UserName" field if the given value is not nil.
func (eaic *ExamApplicationsIPCreate) SetNillableVAUserName(s *string) *ExamApplicationsIPCreate {
	if s != nil {
		eaic.SetVAUserName(*s)
	}
	return eaic
}

// SetVAEmployeeID sets the "VA_EmployeeID" field.
func (eaic *ExamApplicationsIPCreate) SetVAEmployeeID(s string) *ExamApplicationsIPCreate {
	eaic.mutation.SetVAEmployeeID(s)
	return eaic
}

// SetNillableVAEmployeeID sets the "VA_EmployeeID" field if the given value is not nil.
func (eaic *ExamApplicationsIPCreate) SetNillableVAEmployeeID(s *string) *ExamApplicationsIPCreate {
	if s != nil {
		eaic.SetVAEmployeeID(*s)
	}
	return eaic
}

// SetVAEmployeeDesignation sets the "VA_EmployeeDesignation" field.
func (eaic *ExamApplicationsIPCreate) SetVAEmployeeDesignation(s string) *ExamApplicationsIPCreate {
	eaic.mutation.SetVAEmployeeDesignation(s)
	return eaic
}

// SetNillableVAEmployeeDesignation sets the "VA_EmployeeDesignation" field if the given value is not nil.
func (eaic *ExamApplicationsIPCreate) SetNillableVAEmployeeDesignation(s *string) *ExamApplicationsIPCreate {
	if s != nil {
		eaic.SetVAEmployeeDesignation(*s)
	}
	return eaic
}

// SetVARemarks sets the "VA_Remarks" field.
func (eaic *ExamApplicationsIPCreate) SetVARemarks(s string) *ExamApplicationsIPCreate {
	eaic.mutation.SetVARemarks(s)
	return eaic
}

// SetNillableVARemarks sets the "VA_Remarks" field if the given value is not nil.
func (eaic *ExamApplicationsIPCreate) SetNillableVARemarks(s *string) *ExamApplicationsIPCreate {
	if s != nil {
		eaic.SetVARemarks(*s)
	}
	return eaic
}

// SetVADate sets the "VA_Date" field.
func (eaic *ExamApplicationsIPCreate) SetVADate(t time.Time) *ExamApplicationsIPCreate {
	eaic.mutation.SetVADate(t)
	return eaic
}

// SetNillableVADate sets the "VA_Date" field if the given value is not nil.
func (eaic *ExamApplicationsIPCreate) SetNillableVADate(t *time.Time) *ExamApplicationsIPCreate {
	if t != nil {
		eaic.SetVADate(*t)
	}
	return eaic
}

// SetCAUserId sets the "CA_UserId" field.
func (eaic *ExamApplicationsIPCreate) SetCAUserId(i int32) *ExamApplicationsIPCreate {
	eaic.mutation.SetCAUserId(i)
	return eaic
}

// SetNillableCAUserId sets the "CA_UserId" field if the given value is not nil.
func (eaic *ExamApplicationsIPCreate) SetNillableCAUserId(i *int32) *ExamApplicationsIPCreate {
	if i != nil {
		eaic.SetCAUserId(*i)
	}
	return eaic
}

// SetCAUserName sets the "CA_UserName" field.
func (eaic *ExamApplicationsIPCreate) SetCAUserName(s string) *ExamApplicationsIPCreate {
	eaic.mutation.SetCAUserName(s)
	return eaic
}

// SetNillableCAUserName sets the "CA_UserName" field if the given value is not nil.
func (eaic *ExamApplicationsIPCreate) SetNillableCAUserName(s *string) *ExamApplicationsIPCreate {
	if s != nil {
		eaic.SetCAUserName(*s)
	}
	return eaic
}

// SetCAEmployeeID sets the "CA_EmployeeID" field.
func (eaic *ExamApplicationsIPCreate) SetCAEmployeeID(s string) *ExamApplicationsIPCreate {
	eaic.mutation.SetCAEmployeeID(s)
	return eaic
}

// SetNillableCAEmployeeID sets the "CA_EmployeeID" field if the given value is not nil.
func (eaic *ExamApplicationsIPCreate) SetNillableCAEmployeeID(s *string) *ExamApplicationsIPCreate {
	if s != nil {
		eaic.SetCAEmployeeID(*s)
	}
	return eaic
}

// SetCAEmployeeDesignation sets the "CA_EmployeeDesignation" field.
func (eaic *ExamApplicationsIPCreate) SetCAEmployeeDesignation(s string) *ExamApplicationsIPCreate {
	eaic.mutation.SetCAEmployeeDesignation(s)
	return eaic
}

// SetNillableCAEmployeeDesignation sets the "CA_EmployeeDesignation" field if the given value is not nil.
func (eaic *ExamApplicationsIPCreate) SetNillableCAEmployeeDesignation(s *string) *ExamApplicationsIPCreate {
	if s != nil {
		eaic.SetCAEmployeeDesignation(*s)
	}
	return eaic
}

// SetCARemarks sets the "CA_Remarks" field.
func (eaic *ExamApplicationsIPCreate) SetCARemarks(s string) *ExamApplicationsIPCreate {
	eaic.mutation.SetCARemarks(s)
	return eaic
}

// SetNillableCARemarks sets the "CA_Remarks" field if the given value is not nil.
func (eaic *ExamApplicationsIPCreate) SetNillableCARemarks(s *string) *ExamApplicationsIPCreate {
	if s != nil {
		eaic.SetCARemarks(*s)
	}
	return eaic
}

// SetCADate sets the "CA_Date" field.
func (eaic *ExamApplicationsIPCreate) SetCADate(t time.Time) *ExamApplicationsIPCreate {
	eaic.mutation.SetCADate(t)
	return eaic
}

// SetNillableCADate sets the "CA_Date" field if the given value is not nil.
func (eaic *ExamApplicationsIPCreate) SetNillableCADate(t *time.Time) *ExamApplicationsIPCreate {
	if t != nil {
		eaic.SetCADate(*t)
	}
	return eaic
}

// SetNAUserId sets the "NA_UserId" field.
func (eaic *ExamApplicationsIPCreate) SetNAUserId(i int32) *ExamApplicationsIPCreate {
	eaic.mutation.SetNAUserId(i)
	return eaic
}

// SetNillableNAUserId sets the "NA_UserId" field if the given value is not nil.
func (eaic *ExamApplicationsIPCreate) SetNillableNAUserId(i *int32) *ExamApplicationsIPCreate {
	if i != nil {
		eaic.SetNAUserId(*i)
	}
	return eaic
}

// SetNAUserName sets the "NA_UserName" field.
func (eaic *ExamApplicationsIPCreate) SetNAUserName(s string) *ExamApplicationsIPCreate {
	eaic.mutation.SetNAUserName(s)
	return eaic
}

// SetNillableNAUserName sets the "NA_UserName" field if the given value is not nil.
func (eaic *ExamApplicationsIPCreate) SetNillableNAUserName(s *string) *ExamApplicationsIPCreate {
	if s != nil {
		eaic.SetNAUserName(*s)
	}
	return eaic
}

// SetNAEmployeeID sets the "NA_EmployeeID" field.
func (eaic *ExamApplicationsIPCreate) SetNAEmployeeID(s string) *ExamApplicationsIPCreate {
	eaic.mutation.SetNAEmployeeID(s)
	return eaic
}

// SetNillableNAEmployeeID sets the "NA_EmployeeID" field if the given value is not nil.
func (eaic *ExamApplicationsIPCreate) SetNillableNAEmployeeID(s *string) *ExamApplicationsIPCreate {
	if s != nil {
		eaic.SetNAEmployeeID(*s)
	}
	return eaic
}

// SetNAEmployeeDesignation sets the "NA_EmployeeDesignation" field.
func (eaic *ExamApplicationsIPCreate) SetNAEmployeeDesignation(s string) *ExamApplicationsIPCreate {
	eaic.mutation.SetNAEmployeeDesignation(s)
	return eaic
}

// SetNillableNAEmployeeDesignation sets the "NA_EmployeeDesignation" field if the given value is not nil.
func (eaic *ExamApplicationsIPCreate) SetNillableNAEmployeeDesignation(s *string) *ExamApplicationsIPCreate {
	if s != nil {
		eaic.SetNAEmployeeDesignation(*s)
	}
	return eaic
}

// SetNARemarks sets the "NA_Remarks" field.
func (eaic *ExamApplicationsIPCreate) SetNARemarks(s string) *ExamApplicationsIPCreate {
	eaic.mutation.SetNARemarks(s)
	return eaic
}

// SetNillableNARemarks sets the "NA_Remarks" field if the given value is not nil.
func (eaic *ExamApplicationsIPCreate) SetNillableNARemarks(s *string) *ExamApplicationsIPCreate {
	if s != nil {
		eaic.SetNARemarks(*s)
	}
	return eaic
}

// SetNADate sets the "NA_Date" field.
func (eaic *ExamApplicationsIPCreate) SetNADate(t time.Time) *ExamApplicationsIPCreate {
	eaic.mutation.SetNADate(t)
	return eaic
}

// SetNillableNADate sets the "NA_Date" field if the given value is not nil.
func (eaic *ExamApplicationsIPCreate) SetNillableNADate(t *time.Time) *ExamApplicationsIPCreate {
	if t != nil {
		eaic.SetNADate(*t)
	}
	return eaic
}

// SetAppliactionRemarks sets the "AppliactionRemarks" field.
func (eaic *ExamApplicationsIPCreate) SetAppliactionRemarks(s string) *ExamApplicationsIPCreate {
	eaic.mutation.SetAppliactionRemarks(s)
	return eaic
}

// SetNillableAppliactionRemarks sets the "AppliactionRemarks" field if the given value is not nil.
func (eaic *ExamApplicationsIPCreate) SetNillableAppliactionRemarks(s *string) *ExamApplicationsIPCreate {
	if s != nil {
		eaic.SetAppliactionRemarks(*s)
	}
	return eaic
}

// SetCadrePreferences sets the "CadrePreferences" field.
func (eaic *ExamApplicationsIPCreate) SetCadrePreferences(i []interface{}) *ExamApplicationsIPCreate {
	eaic.mutation.SetCadrePreferences(i)
	return eaic
}

// SetCAPreviousRemarks sets the "CAPreviousRemarks" field.
func (eaic *ExamApplicationsIPCreate) SetCAPreviousRemarks(s string) *ExamApplicationsIPCreate {
	eaic.mutation.SetCAPreviousRemarks(s)
	return eaic
}

// SetNillableCAPreviousRemarks sets the "CAPreviousRemarks" field if the given value is not nil.
func (eaic *ExamApplicationsIPCreate) SetNillableCAPreviousRemarks(s *string) *ExamApplicationsIPCreate {
	if s != nil {
		eaic.SetCAPreviousRemarks(*s)
	}
	return eaic
}

// SetPunishmentStatus sets the "PunishmentStatus" field.
func (eaic *ExamApplicationsIPCreate) SetPunishmentStatus(b bool) *ExamApplicationsIPCreate {
	eaic.mutation.SetPunishmentStatus(b)
	return eaic
}

// SetNillablePunishmentStatus sets the "PunishmentStatus" field if the given value is not nil.
func (eaic *ExamApplicationsIPCreate) SetNillablePunishmentStatus(b *bool) *ExamApplicationsIPCreate {
	if b != nil {
		eaic.SetPunishmentStatus(*b)
	}
	return eaic
}

// SetDisciplinaryCaseStatus sets the "DisciplinaryCaseStatus" field.
func (eaic *ExamApplicationsIPCreate) SetDisciplinaryCaseStatus(b bool) *ExamApplicationsIPCreate {
	eaic.mutation.SetDisciplinaryCaseStatus(b)
	return eaic
}

// SetNillableDisciplinaryCaseStatus sets the "DisciplinaryCaseStatus" field if the given value is not nil.
func (eaic *ExamApplicationsIPCreate) SetNillableDisciplinaryCaseStatus(b *bool) *ExamApplicationsIPCreate {
	if b != nil {
		eaic.SetDisciplinaryCaseStatus(*b)
	}
	return eaic
}

// SetGenerateHallTicketFlag sets the "GenerateHallTicketFlag" field.
func (eaic *ExamApplicationsIPCreate) SetGenerateHallTicketFlag(b bool) *ExamApplicationsIPCreate {
	eaic.mutation.SetGenerateHallTicketFlag(b)
	return eaic
}

// SetNillableGenerateHallTicketFlag sets the "GenerateHallTicketFlag" field if the given value is not nil.
func (eaic *ExamApplicationsIPCreate) SetNillableGenerateHallTicketFlag(b *bool) *ExamApplicationsIPCreate {
	if b != nil {
		eaic.SetGenerateHallTicketFlag(*b)
	}
	return eaic
}

// SetHallTicketNumber sets the "HallTicketNumber" field.
func (eaic *ExamApplicationsIPCreate) SetHallTicketNumber(s string) *ExamApplicationsIPCreate {
	eaic.mutation.SetHallTicketNumber(s)
	return eaic
}

// SetNillableHallTicketNumber sets the "HallTicketNumber" field if the given value is not nil.
func (eaic *ExamApplicationsIPCreate) SetNillableHallTicketNumber(s *string) *ExamApplicationsIPCreate {
	if s != nil {
		eaic.SetHallTicketNumber(*s)
	}
	return eaic
}

// SetHallTicketGeneratedFlag sets the "HallTicketGeneratedFlag" field.
func (eaic *ExamApplicationsIPCreate) SetHallTicketGeneratedFlag(b bool) *ExamApplicationsIPCreate {
	eaic.mutation.SetHallTicketGeneratedFlag(b)
	return eaic
}

// SetNillableHallTicketGeneratedFlag sets the "HallTicketGeneratedFlag" field if the given value is not nil.
func (eaic *ExamApplicationsIPCreate) SetNillableHallTicketGeneratedFlag(b *bool) *ExamApplicationsIPCreate {
	if b != nil {
		eaic.SetHallTicketGeneratedFlag(*b)
	}
	return eaic
}

// SetGenerateHallTicketFlagByNO sets the "GenerateHallTicketFlagByNO" field.
func (eaic *ExamApplicationsIPCreate) SetGenerateHallTicketFlagByNO(b bool) *ExamApplicationsIPCreate {
	eaic.mutation.SetGenerateHallTicketFlagByNO(b)
	return eaic
}

// SetNillableGenerateHallTicketFlagByNO sets the "GenerateHallTicketFlagByNO" field if the given value is not nil.
func (eaic *ExamApplicationsIPCreate) SetNillableGenerateHallTicketFlagByNO(b *bool) *ExamApplicationsIPCreate {
	if b != nil {
		eaic.SetGenerateHallTicketFlagByNO(*b)
	}
	return eaic
}

// SetHallTicketGeneratedDate sets the "HallTicketGeneratedDate" field.
func (eaic *ExamApplicationsIPCreate) SetHallTicketGeneratedDate(t time.Time) *ExamApplicationsIPCreate {
	eaic.mutation.SetHallTicketGeneratedDate(t)
	return eaic
}

// SetNillableHallTicketGeneratedDate sets the "HallTicketGeneratedDate" field if the given value is not nil.
func (eaic *ExamApplicationsIPCreate) SetNillableHallTicketGeneratedDate(t *time.Time) *ExamApplicationsIPCreate {
	if t != nil {
		eaic.SetHallTicketGeneratedDate(*t)
	}
	return eaic
}

// SetTemporaryHallTicket sets the "TemporaryHallTicket" field.
func (eaic *ExamApplicationsIPCreate) SetTemporaryHallTicket(s string) *ExamApplicationsIPCreate {
	eaic.mutation.SetTemporaryHallTicket(s)
	return eaic
}

// SetNillableTemporaryHallTicket sets the "TemporaryHallTicket" field if the given value is not nil.
func (eaic *ExamApplicationsIPCreate) SetNillableTemporaryHallTicket(s *string) *ExamApplicationsIPCreate {
	if s != nil {
		eaic.SetTemporaryHallTicket(*s)
	}
	return eaic
}

// SetOptionUsed sets the "OptionUsed" field.
func (eaic *ExamApplicationsIPCreate) SetOptionUsed(s string) *ExamApplicationsIPCreate {
	eaic.mutation.SetOptionUsed(s)
	return eaic
}

// SetNillableOptionUsed sets the "OptionUsed" field if the given value is not nil.
func (eaic *ExamApplicationsIPCreate) SetNillableOptionUsed(s *string) *ExamApplicationsIPCreate {
	if s != nil {
		eaic.SetOptionUsed(*s)
	}
	return eaic
}

// SetRemarks sets the "Remarks" field.
func (eaic *ExamApplicationsIPCreate) SetRemarks(s string) *ExamApplicationsIPCreate {
	eaic.mutation.SetRemarks(s)
	return eaic
}

// SetNillableRemarks sets the "Remarks" field if the given value is not nil.
func (eaic *ExamApplicationsIPCreate) SetNillableRemarks(s *string) *ExamApplicationsIPCreate {
	if s != nil {
		eaic.SetRemarks(*s)
	}
	return eaic
}

// SetCadre sets the "Cadre" field.
func (eaic *ExamApplicationsIPCreate) SetCadre(s string) *ExamApplicationsIPCreate {
	eaic.mutation.SetCadre(s)
	return eaic
}

// SetNillableCadre sets the "Cadre" field if the given value is not nil.
func (eaic *ExamApplicationsIPCreate) SetNillableCadre(s *string) *ExamApplicationsIPCreate {
	if s != nil {
		eaic.SetCadre(*s)
	}
	return eaic
}

// SetEmployeePost sets the "EmployeePost" field.
func (eaic *ExamApplicationsIPCreate) SetEmployeePost(s string) *ExamApplicationsIPCreate {
	eaic.mutation.SetEmployeePost(s)
	return eaic
}

// SetNillableEmployeePost sets the "EmployeePost" field if the given value is not nil.
func (eaic *ExamApplicationsIPCreate) SetNillableEmployeePost(s *string) *ExamApplicationsIPCreate {
	if s != nil {
		eaic.SetEmployeePost(*s)
	}
	return eaic
}

// SetDOJInEligiblePost sets the "DOJInEligiblePost" field.
func (eaic *ExamApplicationsIPCreate) SetDOJInEligiblePost(s string) *ExamApplicationsIPCreate {
	eaic.mutation.SetDOJInEligiblePost(s)
	return eaic
}

// SetNillableDOJInEligiblePost sets the "DOJInEligiblePost" field if the given value is not nil.
func (eaic *ExamApplicationsIPCreate) SetNillableDOJInEligiblePost(s *string) *ExamApplicationsIPCreate {
	if s != nil {
		eaic.SetDOJInEligiblePost(*s)
	}
	return eaic
}

// SetDivisionPreferences sets the "DivisionPreferences" field.
func (eaic *ExamApplicationsIPCreate) SetDivisionPreferences(i []interface{}) *ExamApplicationsIPCreate {
	eaic.mutation.SetDivisionPreferences(i)
	return eaic
}

// SetRoleUserCode sets the "RoleUserCode" field.
func (eaic *ExamApplicationsIPCreate) SetRoleUserCode(i int32) *ExamApplicationsIPCreate {
	eaic.mutation.SetRoleUserCode(i)
	return eaic
}

// SetNillableRoleUserCode sets the "RoleUserCode" field if the given value is not nil.
func (eaic *ExamApplicationsIPCreate) SetNillableRoleUserCode(i *int32) *ExamApplicationsIPCreate {
	if i != nil {
		eaic.SetRoleUserCode(*i)
	}
	return eaic
}

// SetCircleSID sets the "CircleSID" field.
func (eaic *ExamApplicationsIPCreate) SetCircleSID(i int32) *ExamApplicationsIPCreate {
	eaic.mutation.SetCircleSID(i)
	return eaic
}

// SetNillableCircleSID sets the "CircleSID" field if the given value is not nil.
func (eaic *ExamApplicationsIPCreate) SetNillableCircleSID(i *int32) *ExamApplicationsIPCreate {
	if i != nil {
		eaic.SetCircleSID(*i)
	}
	return eaic
}

// SetFacilityName sets the "FacilityName" field.
func (eaic *ExamApplicationsIPCreate) SetFacilityName(s string) *ExamApplicationsIPCreate {
	eaic.mutation.SetFacilityName(s)
	return eaic
}

// SetNillableFacilityName sets the "FacilityName" field if the given value is not nil.
func (eaic *ExamApplicationsIPCreate) SetNillableFacilityName(s *string) *ExamApplicationsIPCreate {
	if s != nil {
		eaic.SetFacilityName(*s)
	}
	return eaic
}

// SetServiceLength sets the "ServiceLength" field.
func (eaic *ExamApplicationsIPCreate) SetServiceLength(i []interface{}) *ExamApplicationsIPCreate {
	eaic.mutation.SetServiceLength(i)
	return eaic
}

// SetNonQualifyingService sets the "NonQualifyingService" field.
func (eaic *ExamApplicationsIPCreate) SetNonQualifyingService(i []interface{}) *ExamApplicationsIPCreate {
	eaic.mutation.SetNonQualifyingService(i)
	return eaic
}

// SetDCInPresentCadre sets the "DCInPresentCadre" field.
func (eaic *ExamApplicationsIPCreate) SetDCInPresentCadre(s string) *ExamApplicationsIPCreate {
	eaic.mutation.SetDCInPresentCadre(s)
	return eaic
}

// SetNillableDCInPresentCadre sets the "DCInPresentCadre" field if the given value is not nil.
func (eaic *ExamApplicationsIPCreate) SetNillableDCInPresentCadre(s *string) *ExamApplicationsIPCreate {
	if s != nil {
		eaic.SetDCInPresentCadre(*s)
	}
	return eaic
}

// SetCenterId sets the "CenterId" field.
func (eaic *ExamApplicationsIPCreate) SetCenterId(i int32) *ExamApplicationsIPCreate {
	eaic.mutation.SetCenterId(i)
	return eaic
}

// SetNillableCenterId sets the "CenterId" field if the given value is not nil.
func (eaic *ExamApplicationsIPCreate) SetNillableCenterId(i *int32) *ExamApplicationsIPCreate {
	if i != nil {
		eaic.SetCenterId(*i)
	}
	return eaic
}

// SetCenterCode sets the "CenterCode" field.
func (eaic *ExamApplicationsIPCreate) SetCenterCode(i int32) *ExamApplicationsIPCreate {
	eaic.mutation.SetCenterCode(i)
	return eaic
}

// SetNillableCenterCode sets the "CenterCode" field if the given value is not nil.
func (eaic *ExamApplicationsIPCreate) SetNillableCenterCode(i *int32) *ExamApplicationsIPCreate {
	if i != nil {
		eaic.SetCenterCode(*i)
	}
	return eaic
}

// SetClaimingQualifyingService sets the "ClaimingQualifyingService" field.
func (eaic *ExamApplicationsIPCreate) SetClaimingQualifyingService(s string) *ExamApplicationsIPCreate {
	eaic.mutation.SetClaimingQualifyingService(s)
	return eaic
}

// SetNillableClaimingQualifyingService sets the "ClaimingQualifyingService" field if the given value is not nil.
func (eaic *ExamApplicationsIPCreate) SetNillableClaimingQualifyingService(s *string) *ExamApplicationsIPCreate {
	if s != nil {
		eaic.SetClaimingQualifyingService(*s)
	}
	return eaic
}

// SetDeputationOfficePincode sets the "DeputationOfficePincode" field.
func (eaic *ExamApplicationsIPCreate) SetDeputationOfficePincode(s string) *ExamApplicationsIPCreate {
	eaic.mutation.SetDeputationOfficePincode(s)
	return eaic
}

// SetNillableDeputationOfficePincode sets the "DeputationOfficePincode" field if the given value is not nil.
func (eaic *ExamApplicationsIPCreate) SetNillableDeputationOfficePincode(s *string) *ExamApplicationsIPCreate {
	if s != nil {
		eaic.SetDeputationOfficePincode(*s)
	}
	return eaic
}

// SetRecommendedStatus sets the "RecommendedStatus" field.
func (eaic *ExamApplicationsIPCreate) SetRecommendedStatus(s string) *ExamApplicationsIPCreate {
	eaic.mutation.SetRecommendedStatus(s)
	return eaic
}

// SetNillableRecommendedStatus sets the "RecommendedStatus" field if the given value is not nil.
func (eaic *ExamApplicationsIPCreate) SetNillableRecommendedStatus(s *string) *ExamApplicationsIPCreate {
	if s != nil {
		eaic.SetRecommendedStatus(*s)
	}
	return eaic
}

// SetApplicationWdlDate sets the "ApplicationWdlDate" field.
func (eaic *ExamApplicationsIPCreate) SetApplicationWdlDate(t time.Time) *ExamApplicationsIPCreate {
	eaic.mutation.SetApplicationWdlDate(t)
	return eaic
}

// SetNillableApplicationWdlDate sets the "ApplicationWdlDate" field if the given value is not nil.
func (eaic *ExamApplicationsIPCreate) SetNillableApplicationWdlDate(t *time.Time) *ExamApplicationsIPCreate {
	if t != nil {
		eaic.SetApplicationWdlDate(*t)
	}
	return eaic
}

// SetUpdatedAt sets the "UpdatedAt" field.
func (eaic *ExamApplicationsIPCreate) SetUpdatedAt(t time.Time) *ExamApplicationsIPCreate {
	eaic.mutation.SetUpdatedAt(t)
	return eaic
}

// SetNillableUpdatedAt sets the "UpdatedAt" field if the given value is not nil.
func (eaic *ExamApplicationsIPCreate) SetNillableUpdatedAt(t *time.Time) *ExamApplicationsIPCreate {
	if t != nil {
		eaic.SetUpdatedAt(*t)
	}
	return eaic
}

// SetUpdatedBy sets the "UpdatedBy" field.
func (eaic *ExamApplicationsIPCreate) SetUpdatedBy(s string) *ExamApplicationsIPCreate {
	eaic.mutation.SetUpdatedBy(s)
	return eaic
}

// SetNillableUpdatedBy sets the "UpdatedBy" field if the given value is not nil.
func (eaic *ExamApplicationsIPCreate) SetNillableUpdatedBy(s *string) *ExamApplicationsIPCreate {
	if s != nil {
		eaic.SetUpdatedBy(*s)
	}
	return eaic
}

// SetHallIdentificationNumber sets the "HallIdentificationNumber" field.
func (eaic *ExamApplicationsIPCreate) SetHallIdentificationNumber(i int32) *ExamApplicationsIPCreate {
	eaic.mutation.SetHallIdentificationNumber(i)
	return eaic
}

// SetNillableHallIdentificationNumber sets the "HallIdentificationNumber" field if the given value is not nil.
func (eaic *ExamApplicationsIPCreate) SetNillableHallIdentificationNumber(i *int32) *ExamApplicationsIPCreate {
	if i != nil {
		eaic.SetHallIdentificationNumber(*i)
	}
	return eaic
}

// SetExamCenterHall sets the "ExamCenterHall" field.
func (eaic *ExamApplicationsIPCreate) SetExamCenterHall(i int32) *ExamApplicationsIPCreate {
	eaic.mutation.SetExamCenterHall(i)
	return eaic
}

// SetNillableExamCenterHall sets the "ExamCenterHall" field if the given value is not nil.
func (eaic *ExamApplicationsIPCreate) SetNillableExamCenterHall(i *int32) *ExamApplicationsIPCreate {
	if i != nil {
		eaic.SetExamCenterHall(*i)
	}
	return eaic
}

// SetHallName sets the "HallName" field.
func (eaic *ExamApplicationsIPCreate) SetHallName(s string) *ExamApplicationsIPCreate {
	eaic.mutation.SetHallName(s)
	return eaic
}

// SetNillableHallName sets the "HallName" field if the given value is not nil.
func (eaic *ExamApplicationsIPCreate) SetNillableHallName(s *string) *ExamApplicationsIPCreate {
	if s != nil {
		eaic.SetHallName(*s)
	}
	return eaic
}

// SetReportingOfficeID sets the "ReportingOfficeID" field.
func (eaic *ExamApplicationsIPCreate) SetReportingOfficeID(s string) *ExamApplicationsIPCreate {
	eaic.mutation.SetReportingOfficeID(s)
	return eaic
}

// SetNillableReportingOfficeID sets the "ReportingOfficeID" field if the given value is not nil.
func (eaic *ExamApplicationsIPCreate) SetNillableReportingOfficeID(s *string) *ExamApplicationsIPCreate {
	if s != nil {
		eaic.SetReportingOfficeID(*s)
	}
	return eaic
}

// SetCACorrected sets the "CACorrected" field.
func (eaic *ExamApplicationsIPCreate) SetCACorrected(s string) *ExamApplicationsIPCreate {
	eaic.mutation.SetCACorrected(s)
	return eaic
}

// SetNillableCACorrected sets the "CACorrected" field if the given value is not nil.
func (eaic *ExamApplicationsIPCreate) SetNillableCACorrected(s *string) *ExamApplicationsIPCreate {
	if s != nil {
		eaic.SetCACorrected(*s)
	}
	return eaic
}

// SetCACorrectedDate sets the "CACorrectedDate" field.
func (eaic *ExamApplicationsIPCreate) SetCACorrectedDate(t time.Time) *ExamApplicationsIPCreate {
	eaic.mutation.SetCACorrectedDate(t)
	return eaic
}

// SetNillableCACorrectedDate sets the "CACorrectedDate" field if the given value is not nil.
func (eaic *ExamApplicationsIPCreate) SetNillableCACorrectedDate(t *time.Time) *ExamApplicationsIPCreate {
	if t != nil {
		eaic.SetCACorrectedDate(*t)
	}
	return eaic
}

// SetID sets the "id" field.
func (eaic *ExamApplicationsIPCreate) SetID(i int64) *ExamApplicationsIPCreate {
	eaic.mutation.SetID(i)
	return eaic
}

// AddUsersIPRefIDs adds the "UsersIPRef" edge to the UserMaster entity by IDs.
func (eaic *ExamApplicationsIPCreate) AddUsersIPRefIDs(ids ...int64) *ExamApplicationsIPCreate {
	eaic.mutation.AddUsersIPRefIDs(ids...)
	return eaic
}

// AddUsersIPRef adds the "UsersIPRef" edges to the UserMaster entity.
func (eaic *ExamApplicationsIPCreate) AddUsersIPRef(u ...*UserMaster) *ExamApplicationsIPCreate {
	ids := make([]int64, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return eaic.AddUsersIPRefIDs(ids...)
}

// AddCadrePrefRefIDs adds the "CadrePref_Ref" edge to the Cadre_Choice_IP entity by IDs.
func (eaic *ExamApplicationsIPCreate) AddCadrePrefRefIDs(ids ...int32) *ExamApplicationsIPCreate {
	eaic.mutation.AddCadrePrefRefIDs(ids...)
	return eaic
}

// AddCadrePrefRef adds the "CadrePref_Ref" edges to the Cadre_Choice_IP entity.
func (eaic *ExamApplicationsIPCreate) AddCadrePrefRef(c ...*Cadre_Choice_IP) *ExamApplicationsIPCreate {
	ids := make([]int32, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return eaic.AddCadrePrefRefIDs(ids...)
}

// AddCirclePrefRefIDs adds the "CirclePrefRef" edge to the PlaceOfPreferenceIP entity by IDs.
func (eaic *ExamApplicationsIPCreate) AddCirclePrefRefIDs(ids ...int32) *ExamApplicationsIPCreate {
	eaic.mutation.AddCirclePrefRefIDs(ids...)
	return eaic
}

// AddCirclePrefRef adds the "CirclePrefRef" edges to the PlaceOfPreferenceIP entity.
func (eaic *ExamApplicationsIPCreate) AddCirclePrefRef(p ...*PlaceOfPreferenceIP) *ExamApplicationsIPCreate {
	ids := make([]int32, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return eaic.AddCirclePrefRefIDs(ids...)
}

// AddIPApplicationsRefIDs adds the "IPApplicationsRef" edge to the RecommendationsIPApplications entity by IDs.
func (eaic *ExamApplicationsIPCreate) AddIPApplicationsRefIDs(ids ...int64) *ExamApplicationsIPCreate {
	eaic.mutation.AddIPApplicationsRefIDs(ids...)
	return eaic
}

// AddIPApplicationsRef adds the "IPApplicationsRef" edges to the RecommendationsIPApplications entity.
func (eaic *ExamApplicationsIPCreate) AddIPApplicationsRef(r ...*RecommendationsIPApplications) *ExamApplicationsIPCreate {
	ids := make([]int64, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return eaic.AddIPApplicationsRefIDs(ids...)
}

// AddLogDatumIDs adds the "LogData" edge to the Logs entity by IDs.
func (eaic *ExamApplicationsIPCreate) AddLogDatumIDs(ids ...int64) *ExamApplicationsIPCreate {
	eaic.mutation.AddLogDatumIDs(ids...)
	return eaic
}

// AddLogData adds the "LogData" edges to the Logs entity.
func (eaic *ExamApplicationsIPCreate) AddLogData(l ...*Logs) *ExamApplicationsIPCreate {
	ids := make([]int64, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return eaic.AddLogDatumIDs(ids...)
}

// SetExamCentresID sets the "ExamCentres" edge to the Center entity by ID.
func (eaic *ExamApplicationsIPCreate) SetExamCentresID(id int32) *ExamApplicationsIPCreate {
	eaic.mutation.SetExamCentresID(id)
	return eaic
}

// SetNillableExamCentresID sets the "ExamCentres" edge to the Center entity by ID if the given value is not nil.
func (eaic *ExamApplicationsIPCreate) SetNillableExamCentresID(id *int32) *ExamApplicationsIPCreate {
	if id != nil {
		eaic = eaic.SetExamCentresID(*id)
	}
	return eaic
}

// SetExamCentres sets the "ExamCentres" edge to the Center entity.
func (eaic *ExamApplicationsIPCreate) SetExamCentres(c *Center) *ExamApplicationsIPCreate {
	return eaic.SetExamCentresID(c.ID)
}

// SetExamcitycenterID sets the "examcitycenter" edge to the ExamCityCenter entity by ID.
func (eaic *ExamApplicationsIPCreate) SetExamcitycenterID(id int32) *ExamApplicationsIPCreate {
	eaic.mutation.SetExamcitycenterID(id)
	return eaic
}

// SetNillableExamcitycenterID sets the "examcitycenter" edge to the ExamCityCenter entity by ID if the given value is not nil.
func (eaic *ExamApplicationsIPCreate) SetNillableExamcitycenterID(id *int32) *ExamApplicationsIPCreate {
	if id != nil {
		eaic = eaic.SetExamcitycenterID(*id)
	}
	return eaic
}

// SetExamcitycenter sets the "examcitycenter" edge to the ExamCityCenter entity.
func (eaic *ExamApplicationsIPCreate) SetExamcitycenter(e *ExamCityCenter) *ExamApplicationsIPCreate {
	return eaic.SetExamcitycenterID(e.ID)
}

// SetRoleusersID sets the "roleusers" edge to the RoleMaster entity by ID.
func (eaic *ExamApplicationsIPCreate) SetRoleusersID(id int32) *ExamApplicationsIPCreate {
	eaic.mutation.SetRoleusersID(id)
	return eaic
}

// SetNillableRoleusersID sets the "roleusers" edge to the RoleMaster entity by ID if the given value is not nil.
func (eaic *ExamApplicationsIPCreate) SetNillableRoleusersID(id *int32) *ExamApplicationsIPCreate {
	if id != nil {
		eaic = eaic.SetRoleusersID(*id)
	}
	return eaic
}

// SetRoleusers sets the "roleusers" edge to the RoleMaster entity.
func (eaic *ExamApplicationsIPCreate) SetRoleusers(r *RoleMaster) *ExamApplicationsIPCreate {
	return eaic.SetRoleusersID(r.ID)
}

// SetCircleRefsID sets the "CircleRefs" edge to the CircleSummaryForNO entity by ID.
func (eaic *ExamApplicationsIPCreate) SetCircleRefsID(id int32) *ExamApplicationsIPCreate {
	eaic.mutation.SetCircleRefsID(id)
	return eaic
}

// SetNillableCircleRefsID sets the "CircleRefs" edge to the CircleSummaryForNO entity by ID if the given value is not nil.
func (eaic *ExamApplicationsIPCreate) SetNillableCircleRefsID(id *int32) *ExamApplicationsIPCreate {
	if id != nil {
		eaic = eaic.SetCircleRefsID(*id)
	}
	return eaic
}

// SetCircleRefs sets the "CircleRefs" edge to the CircleSummaryForNO entity.
func (eaic *ExamApplicationsIPCreate) SetCircleRefs(c *CircleSummaryForNO) *ExamApplicationsIPCreate {
	return eaic.SetCircleRefsID(c.ID)
}

// Mutation returns the ExamApplicationsIPMutation object of the builder.
func (eaic *ExamApplicationsIPCreate) Mutation() *ExamApplicationsIPMutation {
	return eaic.mutation
}

// Save creates the Exam_Applications_IP in the database.
func (eaic *ExamApplicationsIPCreate) Save(ctx context.Context) (*Exam_Applications_IP, error) {
	eaic.defaults()
	return withHooks(ctx, eaic.sqlSave, eaic.mutation, eaic.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (eaic *ExamApplicationsIPCreate) SaveX(ctx context.Context) *Exam_Applications_IP {
	v, err := eaic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (eaic *ExamApplicationsIPCreate) Exec(ctx context.Context) error {
	_, err := eaic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eaic *ExamApplicationsIPCreate) ExecX(ctx context.Context) {
	if err := eaic.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (eaic *ExamApplicationsIPCreate) defaults() {
	if _, ok := eaic.mutation.ApplnSubmittedDate(); !ok {
		v := exam_applications_ip.DefaultApplnSubmittedDate()
		eaic.mutation.SetApplnSubmittedDate(v)
	}
	if _, ok := eaic.mutation.ExamCityCenterCode(); !ok {
		v := exam_applications_ip.DefaultExamCityCenterCode
		eaic.mutation.SetExamCityCenterCode(v)
	}
	if _, ok := eaic.mutation.Status(); !ok {
		v := exam_applications_ip.DefaultStatus
		eaic.mutation.SetStatus(v)
	}
	if _, ok := eaic.mutation.PunishmentStatus(); !ok {
		v := exam_applications_ip.DefaultPunishmentStatus
		eaic.mutation.SetPunishmentStatus(v)
	}
	if _, ok := eaic.mutation.DisciplinaryCaseStatus(); !ok {
		v := exam_applications_ip.DefaultDisciplinaryCaseStatus
		eaic.mutation.SetDisciplinaryCaseStatus(v)
	}
	if _, ok := eaic.mutation.HallTicketNumber(); !ok {
		v := exam_applications_ip.DefaultHallTicketNumber
		eaic.mutation.SetHallTicketNumber(v)
	}
	if _, ok := eaic.mutation.HallTicketGeneratedFlag(); !ok {
		v := exam_applications_ip.DefaultHallTicketGeneratedFlag
		eaic.mutation.SetHallTicketGeneratedFlag(v)
	}
	if _, ok := eaic.mutation.UpdatedAt(); !ok {
		v := exam_applications_ip.DefaultUpdatedAt()
		eaic.mutation.SetUpdatedAt(v)
	}
	if _, ok := eaic.mutation.UpdatedBy(); !ok {
		v := exam_applications_ip.DefaultUpdatedBy
		eaic.mutation.SetUpdatedBy(v)
	}
	if _, ok := eaic.mutation.HallIdentificationNumber(); !ok {
		v := exam_applications_ip.DefaultHallIdentificationNumber
		eaic.mutation.SetHallIdentificationNumber(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (eaic *ExamApplicationsIPCreate) check() error {
	return nil
}

func (eaic *ExamApplicationsIPCreate) sqlSave(ctx context.Context) (*Exam_Applications_IP, error) {
	if err := eaic.check(); err != nil {
		return nil, err
	}
	_node, _spec := eaic.createSpec()
	if err := sqlgraph.CreateNode(ctx, eaic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	eaic.mutation.id = &_node.ID
	eaic.mutation.done = true
	return _node, nil
}

func (eaic *ExamApplicationsIPCreate) createSpec() (*Exam_Applications_IP, *sqlgraph.CreateSpec) {
	var (
		_node = &Exam_Applications_IP{config: eaic.config}
		_spec = sqlgraph.NewCreateSpec(exam_applications_ip.Table, sqlgraph.NewFieldSpec(exam_applications_ip.FieldID, field.TypeInt64))
	)
	if id, ok := eaic.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := eaic.mutation.ApplicationNumber(); ok {
		_spec.SetField(exam_applications_ip.FieldApplicationNumber, field.TypeString, value)
		_node.ApplicationNumber = value
	}
	if value, ok := eaic.mutation.ApplnSubmittedDate(); ok {
		_spec.SetField(exam_applications_ip.FieldApplnSubmittedDate, field.TypeTime, value)
		_node.ApplnSubmittedDate = value
	}
	if value, ok := eaic.mutation.ExamCode(); ok {
		_spec.SetField(exam_applications_ip.FieldExamCode, field.TypeInt32, value)
		_node.ExamCode = value
	}
	if value, ok := eaic.mutation.ExamShortName(); ok {
		_spec.SetField(exam_applications_ip.FieldExamShortName, field.TypeString, value)
		_node.ExamShortName = value
	}
	if value, ok := eaic.mutation.ExamName(); ok {
		_spec.SetField(exam_applications_ip.FieldExamName, field.TypeString, value)
		_node.ExamName = value
	}
	if value, ok := eaic.mutation.SmsExamShortName(); ok {
		_spec.SetField(exam_applications_ip.FieldSmsExamShortName, field.TypeString, value)
		_node.SmsExamShortName = value
	}
	if value, ok := eaic.mutation.ExamYear(); ok {
		_spec.SetField(exam_applications_ip.FieldExamYear, field.TypeString, value)
		_node.ExamYear = value
	}
	if value, ok := eaic.mutation.UserID(); ok {
		_spec.SetField(exam_applications_ip.FieldUserID, field.TypeInt32, value)
		_node.UserID = value
	}
	if value, ok := eaic.mutation.EmployeeID(); ok {
		_spec.SetField(exam_applications_ip.FieldEmployeeID, field.TypeInt64, value)
		_node.EmployeeID = value
	}
	if value, ok := eaic.mutation.EmployeeName(); ok {
		_spec.SetField(exam_applications_ip.FieldEmployeeName, field.TypeString, value)
		_node.EmployeeName = value
	}
	if value, ok := eaic.mutation.DOB(); ok {
		_spec.SetField(exam_applications_ip.FieldDOB, field.TypeString, value)
		_node.DOB = value
	}
	if value, ok := eaic.mutation.Gender(); ok {
		_spec.SetField(exam_applications_ip.FieldGender, field.TypeString, value)
		_node.Gender = value
	}
	if value, ok := eaic.mutation.MobileNumber(); ok {
		_spec.SetField(exam_applications_ip.FieldMobileNumber, field.TypeString, value)
		_node.MobileNumber = value
	}
	if value, ok := eaic.mutation.EmailID(); ok {
		_spec.SetField(exam_applications_ip.FieldEmailID, field.TypeString, value)
		_node.EmailID = value
	}
	if value, ok := eaic.mutation.CategoryCode(); ok {
		_spec.SetField(exam_applications_ip.FieldCategoryCode, field.TypeString, value)
		_node.CategoryCode = value
	}
	if value, ok := eaic.mutation.CategoryDescription(); ok {
		_spec.SetField(exam_applications_ip.FieldCategoryDescription, field.TypeString, value)
		_node.CategoryDescription = value
	}
	if value, ok := eaic.mutation.DisabilityTypeID(); ok {
		_spec.SetField(exam_applications_ip.FieldDisabilityTypeID, field.TypeString, value)
		_node.DisabilityTypeID = value
	}
	if value, ok := eaic.mutation.DisabilityTypeCode(); ok {
		_spec.SetField(exam_applications_ip.FieldDisabilityTypeCode, field.TypeString, value)
		_node.DisabilityTypeCode = value
	}
	if value, ok := eaic.mutation.DisabilityTypeDescription(); ok {
		_spec.SetField(exam_applications_ip.FieldDisabilityTypeDescription, field.TypeString, value)
		_node.DisabilityTypeDescription = value
	}
	if value, ok := eaic.mutation.DisabilityPercentage(); ok {
		_spec.SetField(exam_applications_ip.FieldDisabilityPercentage, field.TypeInt32, value)
		_node.DisabilityPercentage = value
	}
	if value, ok := eaic.mutation.DCCS(); ok {
		_spec.SetField(exam_applications_ip.FieldDCCS, field.TypeString, value)
		_node.DCCS = value
	}
	if value, ok := eaic.mutation.EntryPostCode(); ok {
		_spec.SetField(exam_applications_ip.FieldEntryPostCode, field.TypeString, value)
		_node.EntryPostCode = value
	}
	if value, ok := eaic.mutation.EntryPostDescription(); ok {
		_spec.SetField(exam_applications_ip.FieldEntryPostDescription, field.TypeString, value)
		_node.EntryPostDescription = value
	}
	if value, ok := eaic.mutation.PresentPostCode(); ok {
		_spec.SetField(exam_applications_ip.FieldPresentPostCode, field.TypeString, value)
		_node.PresentPostCode = value
	}
	if value, ok := eaic.mutation.PresentPostDescription(); ok {
		_spec.SetField(exam_applications_ip.FieldPresentPostDescription, field.TypeString, value)
		_node.PresentPostDescription = value
	}
	if value, ok := eaic.mutation.FeederPostCode(); ok {
		_spec.SetField(exam_applications_ip.FieldFeederPostCode, field.TypeString, value)
		_node.FeederPostCode = value
	}
	if value, ok := eaic.mutation.FeederPostDescription(); ok {
		_spec.SetField(exam_applications_ip.FieldFeederPostDescription, field.TypeString, value)
		_node.FeederPostDescription = value
	}
	if value, ok := eaic.mutation.FeederPostJoiningDate(); ok {
		_spec.SetField(exam_applications_ip.FieldFeederPostJoiningDate, field.TypeString, value)
		_node.FeederPostJoiningDate = value
	}
	if value, ok := eaic.mutation.DesignationID(); ok {
		_spec.SetField(exam_applications_ip.FieldDesignationID, field.TypeString, value)
		_node.DesignationID = value
	}
	if value, ok := eaic.mutation.PresentDesignation(); ok {
		_spec.SetField(exam_applications_ip.FieldPresentDesignation, field.TypeString, value)
		_node.PresentDesignation = value
	}
	if value, ok := eaic.mutation.EducationCode(); ok {
		_spec.SetField(exam_applications_ip.FieldEducationCode, field.TypeString, value)
		_node.EducationCode = value
	}
	if value, ok := eaic.mutation.EducationDescription(); ok {
		_spec.SetField(exam_applications_ip.FieldEducationDescription, field.TypeString, value)
		_node.EducationDescription = value
	}
	if value, ok := eaic.mutation.FacilityUniqueID(); ok {
		_spec.SetField(exam_applications_ip.FieldFacilityUniqueID, field.TypeString, value)
		_node.FacilityUniqueID = value
	}
	if value, ok := eaic.mutation.WorkingOfficePincode(); ok {
		_spec.SetField(exam_applications_ip.FieldWorkingOfficePincode, field.TypeInt32, value)
		_node.WorkingOfficePincode = value
	}
	if value, ok := eaic.mutation.WorkingOfficeFacilityID(); ok {
		_spec.SetField(exam_applications_ip.FieldWorkingOfficeFacilityID, field.TypeString, value)
		_node.WorkingOfficeFacilityID = value
	}
	if value, ok := eaic.mutation.WorkingOfficeName(); ok {
		_spec.SetField(exam_applications_ip.FieldWorkingOfficeName, field.TypeString, value)
		_node.WorkingOfficeName = value
	}
	if value, ok := eaic.mutation.WorkingOfficeCircleFacilityID(); ok {
		_spec.SetField(exam_applications_ip.FieldWorkingOfficeCircleFacilityID, field.TypeString, value)
		_node.WorkingOfficeCircleFacilityID = value
	}
	if value, ok := eaic.mutation.WorkingOfficeCircleName(); ok {
		_spec.SetField(exam_applications_ip.FieldWorkingOfficeCircleName, field.TypeString, value)
		_node.WorkingOfficeCircleName = value
	}
	if value, ok := eaic.mutation.WorkingOfficeRegionFacilityID(); ok {
		_spec.SetField(exam_applications_ip.FieldWorkingOfficeRegionFacilityID, field.TypeString, value)
		_node.WorkingOfficeRegionFacilityID = value
	}
	if value, ok := eaic.mutation.WorkingOfficeRegionName(); ok {
		_spec.SetField(exam_applications_ip.FieldWorkingOfficeRegionName, field.TypeString, value)
		_node.WorkingOfficeRegionName = value
	}
	if value, ok := eaic.mutation.WorkingOfficeDivisionFacilityID(); ok {
		_spec.SetField(exam_applications_ip.FieldWorkingOfficeDivisionFacilityID, field.TypeString, value)
		_node.WorkingOfficeDivisionFacilityID = value
	}
	if value, ok := eaic.mutation.WorkingOfficeDivisionName(); ok {
		_spec.SetField(exam_applications_ip.FieldWorkingOfficeDivisionName, field.TypeString, value)
		_node.WorkingOfficeDivisionName = value
	}
	if value, ok := eaic.mutation.ReportingOfficeFacilityID(); ok {
		_spec.SetField(exam_applications_ip.FieldReportingOfficeFacilityID, field.TypeString, value)
		_node.ReportingOfficeFacilityID = value
	}
	if value, ok := eaic.mutation.ReportingOfficeName(); ok {
		_spec.SetField(exam_applications_ip.FieldReportingOfficeName, field.TypeString, value)
		_node.ReportingOfficeName = value
	}
	if value, ok := eaic.mutation.LienControllingOfficeID(); ok {
		_spec.SetField(exam_applications_ip.FieldLienControllingOfficeID, field.TypeString, value)
		_node.LienControllingOfficeID = value
	}
	if value, ok := eaic.mutation.LienControllingOfficeName(); ok {
		_spec.SetField(exam_applications_ip.FieldLienControllingOfficeName, field.TypeString, value)
		_node.LienControllingOfficeName = value
	}
	if value, ok := eaic.mutation.InDeputation(); ok {
		_spec.SetField(exam_applications_ip.FieldInDeputation, field.TypeString, value)
		_node.InDeputation = value
	}
	if value, ok := eaic.mutation.DeputationType(); ok {
		_spec.SetField(exam_applications_ip.FieldDeputationType, field.TypeString, value)
		_node.DeputationType = value
	}
	if value, ok := eaic.mutation.DeputationOfficeUniqueId(); ok {
		_spec.SetField(exam_applications_ip.FieldDeputationOfficeUniqueId, field.TypeString, value)
		_node.DeputationOfficeUniqueId = value
	}
	if value, ok := eaic.mutation.DeputationOfficeFacilityID(); ok {
		_spec.SetField(exam_applications_ip.FieldDeputationOfficeFacilityID, field.TypeString, value)
		_node.DeputationOfficeFacilityID = value
	}
	if value, ok := eaic.mutation.DeputationOfficeName(); ok {
		_spec.SetField(exam_applications_ip.FieldDeputationOfficeName, field.TypeString, value)
		_node.DeputationOfficeName = value
	}
	if value, ok := eaic.mutation.DeputationControllingOfficeID(); ok {
		_spec.SetField(exam_applications_ip.FieldDeputationControllingOfficeID, field.TypeString, value)
		_node.DeputationControllingOfficeID = value
	}
	if value, ok := eaic.mutation.DeputationControllingOfficeName(); ok {
		_spec.SetField(exam_applications_ip.FieldDeputationControllingOfficeName, field.TypeString, value)
		_node.DeputationControllingOfficeName = value
	}
	if value, ok := eaic.mutation.ControllingOfficeFacilityID(); ok {
		_spec.SetField(exam_applications_ip.FieldControllingOfficeFacilityID, field.TypeString, value)
		_node.ControllingOfficeFacilityID = value
	}
	if value, ok := eaic.mutation.ControllingOfficeName(); ok {
		_spec.SetField(exam_applications_ip.FieldControllingOfficeName, field.TypeString, value)
		_node.ControllingOfficeName = value
	}
	if value, ok := eaic.mutation.NodalOfficeFacilityID(); ok {
		_spec.SetField(exam_applications_ip.FieldNodalOfficeFacilityID, field.TypeString, value)
		_node.NodalOfficeFacilityID = value
	}
	if value, ok := eaic.mutation.NodalOfficeName(); ok {
		_spec.SetField(exam_applications_ip.FieldNodalOfficeName, field.TypeString, value)
		_node.NodalOfficeName = value
	}
	if value, ok := eaic.mutation.CenterFacilityId(); ok {
		_spec.SetField(exam_applications_ip.FieldCenterFacilityId, field.TypeString, value)
		_node.CenterFacilityId = value
	}
	if value, ok := eaic.mutation.CentrePreference(); ok {
		_spec.SetField(exam_applications_ip.FieldCentrePreference, field.TypeString, value)
		_node.CentrePreference = value
	}
	if value, ok := eaic.mutation.Signature(); ok {
		_spec.SetField(exam_applications_ip.FieldSignature, field.TypeString, value)
		_node.Signature = value
	}
	if value, ok := eaic.mutation.Photo(); ok {
		_spec.SetField(exam_applications_ip.FieldPhoto, field.TypeString, value)
		_node.Photo = value
	}
	if value, ok := eaic.mutation.SignaturePath(); ok {
		_spec.SetField(exam_applications_ip.FieldSignaturePath, field.TypeString, value)
		_node.SignaturePath = value
	}
	if value, ok := eaic.mutation.PhotoPath(); ok {
		_spec.SetField(exam_applications_ip.FieldPhotoPath, field.TypeString, value)
		_node.PhotoPath = value
	}
	if value, ok := eaic.mutation.CandidatePhoto(); ok {
		_spec.SetField(exam_applications_ip.FieldCandidatePhoto, field.TypeBytes, value)
		_node.CandidatePhoto = value
	}
	if value, ok := eaic.mutation.CandidateSignature(); ok {
		_spec.SetField(exam_applications_ip.FieldCandidateSignature, field.TypeBytes, value)
		_node.CandidateSignature = value
	}
	if value, ok := eaic.mutation.TempHallTicket(); ok {
		_spec.SetField(exam_applications_ip.FieldTempHallTicket, field.TypeString, value)
		_node.TempHallTicket = value
	}
	if value, ok := eaic.mutation.CandidateRemarks(); ok {
		_spec.SetField(exam_applications_ip.FieldCandidateRemarks, field.TypeString, value)
		_node.CandidateRemarks = value
	}
	if value, ok := eaic.mutation.VAGeneralRemarks(); ok {
		_spec.SetField(exam_applications_ip.FieldVAGeneralRemarks, field.TypeString, value)
		_node.VAGeneralRemarks = value
	}
	if value, ok := eaic.mutation.CAGeneralRemarks(); ok {
		_spec.SetField(exam_applications_ip.FieldCAGeneralRemarks, field.TypeString, value)
		_node.CAGeneralRemarks = value
	}
	if value, ok := eaic.mutation.NAGeneralRemarks(); ok {
		_spec.SetField(exam_applications_ip.FieldNAGeneralRemarks, field.TypeString, value)
		_node.NAGeneralRemarks = value
	}
	if value, ok := eaic.mutation.ApplicationStatus(); ok {
		_spec.SetField(exam_applications_ip.FieldApplicationStatus, field.TypeString, value)
		_node.ApplicationStatus = value
	}
	if value, ok := eaic.mutation.Status(); ok {
		_spec.SetField(exam_applications_ip.FieldStatus, field.TypeString, value)
		_node.Status = value
	}
	if value, ok := eaic.mutation.VAUserId(); ok {
		_spec.SetField(exam_applications_ip.FieldVAUserId, field.TypeInt32, value)
		_node.VAUserId = value
	}
	if value, ok := eaic.mutation.VAUserName(); ok {
		_spec.SetField(exam_applications_ip.FieldVAUserName, field.TypeString, value)
		_node.VAUserName = value
	}
	if value, ok := eaic.mutation.VAEmployeeID(); ok {
		_spec.SetField(exam_applications_ip.FieldVAEmployeeID, field.TypeString, value)
		_node.VAEmployeeID = value
	}
	if value, ok := eaic.mutation.VAEmployeeDesignation(); ok {
		_spec.SetField(exam_applications_ip.FieldVAEmployeeDesignation, field.TypeString, value)
		_node.VAEmployeeDesignation = value
	}
	if value, ok := eaic.mutation.VARemarks(); ok {
		_spec.SetField(exam_applications_ip.FieldVARemarks, field.TypeString, value)
		_node.VARemarks = value
	}
	if value, ok := eaic.mutation.VADate(); ok {
		_spec.SetField(exam_applications_ip.FieldVADate, field.TypeTime, value)
		_node.VADate = value
	}
	if value, ok := eaic.mutation.CAUserId(); ok {
		_spec.SetField(exam_applications_ip.FieldCAUserId, field.TypeInt32, value)
		_node.CAUserId = value
	}
	if value, ok := eaic.mutation.CAUserName(); ok {
		_spec.SetField(exam_applications_ip.FieldCAUserName, field.TypeString, value)
		_node.CAUserName = value
	}
	if value, ok := eaic.mutation.CAEmployeeID(); ok {
		_spec.SetField(exam_applications_ip.FieldCAEmployeeID, field.TypeString, value)
		_node.CAEmployeeID = value
	}
	if value, ok := eaic.mutation.CAEmployeeDesignation(); ok {
		_spec.SetField(exam_applications_ip.FieldCAEmployeeDesignation, field.TypeString, value)
		_node.CAEmployeeDesignation = value
	}
	if value, ok := eaic.mutation.CARemarks(); ok {
		_spec.SetField(exam_applications_ip.FieldCARemarks, field.TypeString, value)
		_node.CARemarks = value
	}
	if value, ok := eaic.mutation.CADate(); ok {
		_spec.SetField(exam_applications_ip.FieldCADate, field.TypeTime, value)
		_node.CADate = value
	}
	if value, ok := eaic.mutation.NAUserId(); ok {
		_spec.SetField(exam_applications_ip.FieldNAUserId, field.TypeInt32, value)
		_node.NAUserId = value
	}
	if value, ok := eaic.mutation.NAUserName(); ok {
		_spec.SetField(exam_applications_ip.FieldNAUserName, field.TypeString, value)
		_node.NAUserName = value
	}
	if value, ok := eaic.mutation.NAEmployeeID(); ok {
		_spec.SetField(exam_applications_ip.FieldNAEmployeeID, field.TypeString, value)
		_node.NAEmployeeID = value
	}
	if value, ok := eaic.mutation.NAEmployeeDesignation(); ok {
		_spec.SetField(exam_applications_ip.FieldNAEmployeeDesignation, field.TypeString, value)
		_node.NAEmployeeDesignation = value
	}
	if value, ok := eaic.mutation.NARemarks(); ok {
		_spec.SetField(exam_applications_ip.FieldNARemarks, field.TypeString, value)
		_node.NARemarks = value
	}
	if value, ok := eaic.mutation.NADate(); ok {
		_spec.SetField(exam_applications_ip.FieldNADate, field.TypeTime, value)
		_node.NADate = value
	}
	if value, ok := eaic.mutation.AppliactionRemarks(); ok {
		_spec.SetField(exam_applications_ip.FieldAppliactionRemarks, field.TypeString, value)
		_node.AppliactionRemarks = value
	}
	if value, ok := eaic.mutation.CadrePreferences(); ok {
		_spec.SetField(exam_applications_ip.FieldCadrePreferences, field.TypeJSON, value)
		_node.CadrePreferences = value
	}
	if value, ok := eaic.mutation.CAPreviousRemarks(); ok {
		_spec.SetField(exam_applications_ip.FieldCAPreviousRemarks, field.TypeString, value)
		_node.CAPreviousRemarks = value
	}
	if value, ok := eaic.mutation.PunishmentStatus(); ok {
		_spec.SetField(exam_applications_ip.FieldPunishmentStatus, field.TypeBool, value)
		_node.PunishmentStatus = value
	}
	if value, ok := eaic.mutation.DisciplinaryCaseStatus(); ok {
		_spec.SetField(exam_applications_ip.FieldDisciplinaryCaseStatus, field.TypeBool, value)
		_node.DisciplinaryCaseStatus = value
	}
	if value, ok := eaic.mutation.GenerateHallTicketFlag(); ok {
		_spec.SetField(exam_applications_ip.FieldGenerateHallTicketFlag, field.TypeBool, value)
		_node.GenerateHallTicketFlag = &value
	}
	if value, ok := eaic.mutation.HallTicketNumber(); ok {
		_spec.SetField(exam_applications_ip.FieldHallTicketNumber, field.TypeString, value)
		_node.HallTicketNumber = value
	}
	if value, ok := eaic.mutation.HallTicketGeneratedFlag(); ok {
		_spec.SetField(exam_applications_ip.FieldHallTicketGeneratedFlag, field.TypeBool, value)
		_node.HallTicketGeneratedFlag = value
	}
	if value, ok := eaic.mutation.GenerateHallTicketFlagByNO(); ok {
		_spec.SetField(exam_applications_ip.FieldGenerateHallTicketFlagByNO, field.TypeBool, value)
		_node.GenerateHallTicketFlagByNO = &value
	}
	if value, ok := eaic.mutation.HallTicketGeneratedDate(); ok {
		_spec.SetField(exam_applications_ip.FieldHallTicketGeneratedDate, field.TypeTime, value)
		_node.HallTicketGeneratedDate = value
	}
	if value, ok := eaic.mutation.TemporaryHallTicket(); ok {
		_spec.SetField(exam_applications_ip.FieldTemporaryHallTicket, field.TypeString, value)
		_node.TemporaryHallTicket = value
	}
	if value, ok := eaic.mutation.OptionUsed(); ok {
		_spec.SetField(exam_applications_ip.FieldOptionUsed, field.TypeString, value)
		_node.OptionUsed = value
	}
	if value, ok := eaic.mutation.Remarks(); ok {
		_spec.SetField(exam_applications_ip.FieldRemarks, field.TypeString, value)
		_node.Remarks = value
	}
	if value, ok := eaic.mutation.Cadre(); ok {
		_spec.SetField(exam_applications_ip.FieldCadre, field.TypeString, value)
		_node.Cadre = value
	}
	if value, ok := eaic.mutation.EmployeePost(); ok {
		_spec.SetField(exam_applications_ip.FieldEmployeePost, field.TypeString, value)
		_node.EmployeePost = value
	}
	if value, ok := eaic.mutation.DOJInEligiblePost(); ok {
		_spec.SetField(exam_applications_ip.FieldDOJInEligiblePost, field.TypeString, value)
		_node.DOJInEligiblePost = value
	}
	if value, ok := eaic.mutation.DivisionPreferences(); ok {
		_spec.SetField(exam_applications_ip.FieldDivisionPreferences, field.TypeJSON, value)
		_node.DivisionPreferences = value
	}
	if value, ok := eaic.mutation.FacilityName(); ok {
		_spec.SetField(exam_applications_ip.FieldFacilityName, field.TypeString, value)
		_node.FacilityName = value
	}
	if value, ok := eaic.mutation.ServiceLength(); ok {
		_spec.SetField(exam_applications_ip.FieldServiceLength, field.TypeJSON, value)
		_node.ServiceLength = value
	}
	if value, ok := eaic.mutation.NonQualifyingService(); ok {
		_spec.SetField(exam_applications_ip.FieldNonQualifyingService, field.TypeJSON, value)
		_node.NonQualifyingService = value
	}
	if value, ok := eaic.mutation.DCInPresentCadre(); ok {
		_spec.SetField(exam_applications_ip.FieldDCInPresentCadre, field.TypeString, value)
		_node.DCInPresentCadre = value
	}
	if value, ok := eaic.mutation.CenterId(); ok {
		_spec.SetField(exam_applications_ip.FieldCenterId, field.TypeInt32, value)
		_node.CenterId = value
	}
	if value, ok := eaic.mutation.ClaimingQualifyingService(); ok {
		_spec.SetField(exam_applications_ip.FieldClaimingQualifyingService, field.TypeString, value)
		_node.ClaimingQualifyingService = value
	}
	if value, ok := eaic.mutation.DeputationOfficePincode(); ok {
		_spec.SetField(exam_applications_ip.FieldDeputationOfficePincode, field.TypeString, value)
		_node.DeputationOfficePincode = value
	}
	if value, ok := eaic.mutation.RecommendedStatus(); ok {
		_spec.SetField(exam_applications_ip.FieldRecommendedStatus, field.TypeString, value)
		_node.RecommendedStatus = value
	}
	if value, ok := eaic.mutation.ApplicationWdlDate(); ok {
		_spec.SetField(exam_applications_ip.FieldApplicationWdlDate, field.TypeTime, value)
		_node.ApplicationWdlDate = value
	}
	if value, ok := eaic.mutation.UpdatedAt(); ok {
		_spec.SetField(exam_applications_ip.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := eaic.mutation.UpdatedBy(); ok {
		_spec.SetField(exam_applications_ip.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if value, ok := eaic.mutation.HallIdentificationNumber(); ok {
		_spec.SetField(exam_applications_ip.FieldHallIdentificationNumber, field.TypeInt32, value)
		_node.HallIdentificationNumber = value
	}
	if value, ok := eaic.mutation.ExamCenterHall(); ok {
		_spec.SetField(exam_applications_ip.FieldExamCenterHall, field.TypeInt32, value)
		_node.ExamCenterHall = value
	}
	if value, ok := eaic.mutation.HallName(); ok {
		_spec.SetField(exam_applications_ip.FieldHallName, field.TypeString, value)
		_node.HallName = value
	}
	if value, ok := eaic.mutation.ReportingOfficeID(); ok {
		_spec.SetField(exam_applications_ip.FieldReportingOfficeID, field.TypeString, value)
		_node.ReportingOfficeID = value
	}
	if value, ok := eaic.mutation.CACorrected(); ok {
		_spec.SetField(exam_applications_ip.FieldCACorrected, field.TypeString, value)
		_node.CACorrected = value
	}
	if value, ok := eaic.mutation.CACorrectedDate(); ok {
		_spec.SetField(exam_applications_ip.FieldCACorrectedDate, field.TypeTime, value)
		_node.CACorrectedDate = value
	}
	if nodes := eaic.mutation.UsersIPRefIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_applications_ip.UsersIPRefTable,
			Columns: []string{exam_applications_ip.UsersIPRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usermaster.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := eaic.mutation.CadrePrefRefIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_applications_ip.CadrePrefRefTable,
			Columns: []string{exam_applications_ip.CadrePrefRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cadre_choice_ip.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := eaic.mutation.CirclePrefRefIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_applications_ip.CirclePrefRefTable,
			Columns: []string{exam_applications_ip.CirclePrefRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(placeofpreferenceip.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := eaic.mutation.IPApplicationsRefIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_applications_ip.IPApplicationsRefTable,
			Columns: []string{exam_applications_ip.IPApplicationsRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(recommendationsipapplications.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := eaic.mutation.LogDataIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_applications_ip.LogDataTable,
			Columns: []string{exam_applications_ip.LogDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(logs.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := eaic.mutation.ExamCentresIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   exam_applications_ip.ExamCentresTable,
			Columns: []string{exam_applications_ip.ExamCentresColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(center.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CenterCode = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := eaic.mutation.ExamcitycenterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   exam_applications_ip.ExamcitycenterTable,
			Columns: []string{exam_applications_ip.ExamcitycenterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(examcitycenter.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ExamCityCenterCode = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := eaic.mutation.RoleusersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   exam_applications_ip.RoleusersTable,
			Columns: []string{exam_applications_ip.RoleusersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rolemaster.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.RoleUserCode = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := eaic.mutation.CircleRefsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   exam_applications_ip.CircleRefsTable,
			Columns: []string{exam_applications_ip.CircleRefsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(circlesummaryforno.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CircleSID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ExamApplicationsIPCreateBulk is the builder for creating many Exam_Applications_IP entities in bulk.
type ExamApplicationsIPCreateBulk struct {
	config
	builders []*ExamApplicationsIPCreate
}

// Save creates the Exam_Applications_IP entities in the database.
func (eaicb *ExamApplicationsIPCreateBulk) Save(ctx context.Context) ([]*Exam_Applications_IP, error) {
	specs := make([]*sqlgraph.CreateSpec, len(eaicb.builders))
	nodes := make([]*Exam_Applications_IP, len(eaicb.builders))
	mutators := make([]Mutator, len(eaicb.builders))
	for i := range eaicb.builders {
		func(i int, root context.Context) {
			builder := eaicb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ExamApplicationsIPMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, eaicb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, eaicb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, eaicb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (eaicb *ExamApplicationsIPCreateBulk) SaveX(ctx context.Context) []*Exam_Applications_IP {
	v, err := eaicb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (eaicb *ExamApplicationsIPCreateBulk) Exec(ctx context.Context) error {
	_, err := eaicb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eaicb *ExamApplicationsIPCreateBulk) ExecX(ctx context.Context) {
	if err := eaicb.Exec(ctx); err != nil {
		panic(err)
	}
}
