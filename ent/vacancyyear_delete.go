// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"recruit/ent/predicate"
	"recruit/ent/vacancyyear"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// VacancyYearDelete is the builder for deleting a VacancyYear entity.
type VacancyYearDelete struct {
	config
	hooks    []Hook
	mutation *VacancyYearMutation
}

// Where appends a list predicates to the VacancyYearDelete builder.
func (vyd *VacancyYearDelete) Where(ps ...predicate.VacancyYear) *VacancyYearDelete {
	vyd.mutation.Where(ps...)
	return vyd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (vyd *VacancyYearDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, vyd.sqlExec, vyd.mutation, vyd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (vyd *VacancyYearDelete) ExecX(ctx context.Context) int {
	n, err := vyd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (vyd *VacancyYearDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(vacancyyear.Table, sqlgraph.NewFieldSpec(vacancyyear.FieldID, field.TypeInt32))
	if ps := vyd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, vyd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	vyd.mutation.done = true
	return affected, err
}

// VacancyYearDeleteOne is the builder for deleting a single VacancyYear entity.
type VacancyYearDeleteOne struct {
	vyd *VacancyYearDelete
}

// Where appends a list predicates to the VacancyYearDelete builder.
func (vydo *VacancyYearDeleteOne) Where(ps ...predicate.VacancyYear) *VacancyYearDeleteOne {
	vydo.vyd.mutation.Where(ps...)
	return vydo
}

// Exec executes the deletion query.
func (vydo *VacancyYearDeleteOne) Exec(ctx context.Context) error {
	n, err := vydo.vyd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{vacancyyear.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (vydo *VacancyYearDeleteOne) ExecX(ctx context.Context) {
	if err := vydo.Exec(ctx); err != nil {
		panic(err)
	}
}
