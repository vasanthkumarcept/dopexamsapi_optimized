// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"recruit/ent/employeemaster"
	"recruit/ent/exam_applications_ps"
	"recruit/ent/logs"
	"recruit/ent/usermaster"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// EmployeeMasterCreate is the builder for creating a EmployeeMaster entity.
type EmployeeMasterCreate struct {
	config
	mutation *EmployeeMasterMutation
	hooks    []Hook
}

// SetEmployeeID sets the "EmployeeID" field.
func (emc *EmployeeMasterCreate) SetEmployeeID(i int64) *EmployeeMasterCreate {
	emc.mutation.SetEmployeeID(i)
	return emc
}

// SetNillableEmployeeID sets the "EmployeeID" field if the given value is not nil.
func (emc *EmployeeMasterCreate) SetNillableEmployeeID(i *int64) *EmployeeMasterCreate {
	if i != nil {
		emc.SetEmployeeID(*i)
	}
	return emc
}

// SetEmployeeName sets the "EmployeeName" field.
func (emc *EmployeeMasterCreate) SetEmployeeName(s string) *EmployeeMasterCreate {
	emc.mutation.SetEmployeeName(s)
	return emc
}

// SetNillableEmployeeName sets the "EmployeeName" field if the given value is not nil.
func (emc *EmployeeMasterCreate) SetNillableEmployeeName(s *string) *EmployeeMasterCreate {
	if s != nil {
		emc.SetEmployeeName(*s)
	}
	return emc
}

// SetDOB sets the "DOB" field.
func (emc *EmployeeMasterCreate) SetDOB(s string) *EmployeeMasterCreate {
	emc.mutation.SetDOB(s)
	return emc
}

// SetNillableDOB sets the "DOB" field if the given value is not nil.
func (emc *EmployeeMasterCreate) SetNillableDOB(s *string) *EmployeeMasterCreate {
	if s != nil {
		emc.SetDOB(*s)
	}
	return emc
}

// SetGender sets the "Gender" field.
func (emc *EmployeeMasterCreate) SetGender(s string) *EmployeeMasterCreate {
	emc.mutation.SetGender(s)
	return emc
}

// SetNillableGender sets the "Gender" field if the given value is not nil.
func (emc *EmployeeMasterCreate) SetNillableGender(s *string) *EmployeeMasterCreate {
	if s != nil {
		emc.SetGender(*s)
	}
	return emc
}

// SetMobileNumber sets the "MobileNumber" field.
func (emc *EmployeeMasterCreate) SetMobileNumber(s string) *EmployeeMasterCreate {
	emc.mutation.SetMobileNumber(s)
	return emc
}

// SetNillableMobileNumber sets the "MobileNumber" field if the given value is not nil.
func (emc *EmployeeMasterCreate) SetNillableMobileNumber(s *string) *EmployeeMasterCreate {
	if s != nil {
		emc.SetMobileNumber(*s)
	}
	return emc
}

// SetEmailID sets the "EmailID" field.
func (emc *EmployeeMasterCreate) SetEmailID(s string) *EmployeeMasterCreate {
	emc.mutation.SetEmailID(s)
	return emc
}

// SetNillableEmailID sets the "EmailID" field if the given value is not nil.
func (emc *EmployeeMasterCreate) SetNillableEmailID(s *string) *EmployeeMasterCreate {
	if s != nil {
		emc.SetEmailID(*s)
	}
	return emc
}

// SetEmployeeCategoryCode sets the "EmployeeCategoryCode" field.
func (emc *EmployeeMasterCreate) SetEmployeeCategoryCode(s string) *EmployeeMasterCreate {
	emc.mutation.SetEmployeeCategoryCode(s)
	return emc
}

// SetNillableEmployeeCategoryCode sets the "EmployeeCategoryCode" field if the given value is not nil.
func (emc *EmployeeMasterCreate) SetNillableEmployeeCategoryCode(s *string) *EmployeeMasterCreate {
	if s != nil {
		emc.SetEmployeeCategoryCode(*s)
	}
	return emc
}

// SetEmployeeCategory sets the "EmployeeCategory" field.
func (emc *EmployeeMasterCreate) SetEmployeeCategory(s string) *EmployeeMasterCreate {
	emc.mutation.SetEmployeeCategory(s)
	return emc
}

// SetNillableEmployeeCategory sets the "EmployeeCategory" field if the given value is not nil.
func (emc *EmployeeMasterCreate) SetNillableEmployeeCategory(s *string) *EmployeeMasterCreate {
	if s != nil {
		emc.SetEmployeeCategory(*s)
	}
	return emc
}

// SetPostCode sets the "PostCode" field.
func (emc *EmployeeMasterCreate) SetPostCode(s string) *EmployeeMasterCreate {
	emc.mutation.SetPostCode(s)
	return emc
}

// SetNillablePostCode sets the "PostCode" field if the given value is not nil.
func (emc *EmployeeMasterCreate) SetNillablePostCode(s *string) *EmployeeMasterCreate {
	if s != nil {
		emc.SetPostCode(*s)
	}
	return emc
}

// SetEmployeePost sets the "EmployeePost" field.
func (emc *EmployeeMasterCreate) SetEmployeePost(s string) *EmployeeMasterCreate {
	emc.mutation.SetEmployeePost(s)
	return emc
}

// SetNillableEmployeePost sets the "EmployeePost" field if the given value is not nil.
func (emc *EmployeeMasterCreate) SetNillableEmployeePost(s *string) *EmployeeMasterCreate {
	if s != nil {
		emc.SetEmployeePost(*s)
	}
	return emc
}

// SetFacilityID sets the "FacilityID" field.
func (emc *EmployeeMasterCreate) SetFacilityID(s string) *EmployeeMasterCreate {
	emc.mutation.SetFacilityID(s)
	return emc
}

// SetNillableFacilityID sets the "FacilityID" field if the given value is not nil.
func (emc *EmployeeMasterCreate) SetNillableFacilityID(s *string) *EmployeeMasterCreate {
	if s != nil {
		emc.SetFacilityID(*s)
	}
	return emc
}

// SetOfficeName sets the "OfficeName" field.
func (emc *EmployeeMasterCreate) SetOfficeName(s string) *EmployeeMasterCreate {
	emc.mutation.SetOfficeName(s)
	return emc
}

// SetNillableOfficeName sets the "OfficeName" field if the given value is not nil.
func (emc *EmployeeMasterCreate) SetNillableOfficeName(s *string) *EmployeeMasterCreate {
	if s != nil {
		emc.SetOfficeName(*s)
	}
	return emc
}

// SetControllingAuthorityFacilityId sets the "ControllingAuthorityFacilityId" field.
func (emc *EmployeeMasterCreate) SetControllingAuthorityFacilityId(s string) *EmployeeMasterCreate {
	emc.mutation.SetControllingAuthorityFacilityId(s)
	return emc
}

// SetNillableControllingAuthorityFacilityId sets the "ControllingAuthorityFacilityId" field if the given value is not nil.
func (emc *EmployeeMasterCreate) SetNillableControllingAuthorityFacilityId(s *string) *EmployeeMasterCreate {
	if s != nil {
		emc.SetControllingAuthorityFacilityId(*s)
	}
	return emc
}

// SetControllingAuthorityName sets the "ControllingAuthorityName" field.
func (emc *EmployeeMasterCreate) SetControllingAuthorityName(s string) *EmployeeMasterCreate {
	emc.mutation.SetControllingAuthorityName(s)
	return emc
}

// SetNillableControllingAuthorityName sets the "ControllingAuthorityName" field if the given value is not nil.
func (emc *EmployeeMasterCreate) SetNillableControllingAuthorityName(s *string) *EmployeeMasterCreate {
	if s != nil {
		emc.SetControllingAuthorityName(*s)
	}
	return emc
}

// SetNodalAuthorityFaciliyId sets the "NodalAuthorityFaciliyId" field.
func (emc *EmployeeMasterCreate) SetNodalAuthorityFaciliyId(s string) *EmployeeMasterCreate {
	emc.mutation.SetNodalAuthorityFaciliyId(s)
	return emc
}

// SetNillableNodalAuthorityFaciliyId sets the "NodalAuthorityFaciliyId" field if the given value is not nil.
func (emc *EmployeeMasterCreate) SetNillableNodalAuthorityFaciliyId(s *string) *EmployeeMasterCreate {
	if s != nil {
		emc.SetNodalAuthorityFaciliyId(*s)
	}
	return emc
}

// SetNodalAuthorityName sets the "NodalAuthorityName" field.
func (emc *EmployeeMasterCreate) SetNodalAuthorityName(s string) *EmployeeMasterCreate {
	emc.mutation.SetNodalAuthorityName(s)
	return emc
}

// SetNillableNodalAuthorityName sets the "NodalAuthorityName" field if the given value is not nil.
func (emc *EmployeeMasterCreate) SetNillableNodalAuthorityName(s *string) *EmployeeMasterCreate {
	if s != nil {
		emc.SetNodalAuthorityName(*s)
	}
	return emc
}

// SetPincode sets the "Pincode" field.
func (emc *EmployeeMasterCreate) SetPincode(s string) *EmployeeMasterCreate {
	emc.mutation.SetPincode(s)
	return emc
}

// SetNillablePincode sets the "Pincode" field if the given value is not nil.
func (emc *EmployeeMasterCreate) SetNillablePincode(s *string) *EmployeeMasterCreate {
	if s != nil {
		emc.SetPincode(*s)
	}
	return emc
}

// SetCircleFacilityID sets the "CircleFacilityID" field.
func (emc *EmployeeMasterCreate) SetCircleFacilityID(s string) *EmployeeMasterCreate {
	emc.mutation.SetCircleFacilityID(s)
	return emc
}

// SetNillableCircleFacilityID sets the "CircleFacilityID" field if the given value is not nil.
func (emc *EmployeeMasterCreate) SetNillableCircleFacilityID(s *string) *EmployeeMasterCreate {
	if s != nil {
		emc.SetCircleFacilityID(*s)
	}
	return emc
}

// SetStatuss sets the "Statuss" field.
func (emc *EmployeeMasterCreate) SetStatuss(s string) *EmployeeMasterCreate {
	emc.mutation.SetStatuss(s)
	return emc
}

// SetNillableStatuss sets the "Statuss" field if the given value is not nil.
func (emc *EmployeeMasterCreate) SetNillableStatuss(s *string) *EmployeeMasterCreate {
	if s != nil {
		emc.SetStatuss(*s)
	}
	return emc
}

// SetVerifyStatus sets the "VerifyStatus" field.
func (emc *EmployeeMasterCreate) SetVerifyStatus(b bool) *EmployeeMasterCreate {
	emc.mutation.SetVerifyStatus(b)
	return emc
}

// SetNillableVerifyStatus sets the "VerifyStatus" field if the given value is not nil.
func (emc *EmployeeMasterCreate) SetNillableVerifyStatus(b *bool) *EmployeeMasterCreate {
	if b != nil {
		emc.SetVerifyStatus(*b)
	}
	return emc
}

// SetUidToken sets the "UidToken" field.
func (emc *EmployeeMasterCreate) SetUidToken(s string) *EmployeeMasterCreate {
	emc.mutation.SetUidToken(s)
	return emc
}

// SetNillableUidToken sets the "UidToken" field if the given value is not nil.
func (emc *EmployeeMasterCreate) SetNillableUidToken(s *string) *EmployeeMasterCreate {
	if s != nil {
		emc.SetUidToken(*s)
	}
	return emc
}

// SetCreatedby sets the "Createdby" field.
func (emc *EmployeeMasterCreate) SetCreatedby(s string) *EmployeeMasterCreate {
	emc.mutation.SetCreatedby(s)
	return emc
}

// SetNillableCreatedby sets the "Createdby" field if the given value is not nil.
func (emc *EmployeeMasterCreate) SetNillableCreatedby(s *string) *EmployeeMasterCreate {
	if s != nil {
		emc.SetCreatedby(*s)
	}
	return emc
}

// SetDCCS sets the "DCCS" field.
func (emc *EmployeeMasterCreate) SetDCCS(s string) *EmployeeMasterCreate {
	emc.mutation.SetDCCS(s)
	return emc
}

// SetNillableDCCS sets the "DCCS" field if the given value is not nil.
func (emc *EmployeeMasterCreate) SetNillableDCCS(s *string) *EmployeeMasterCreate {
	if s != nil {
		emc.SetDCCS(*s)
	}
	return emc
}

// SetCreatedById sets the "CreatedById" field.
func (emc *EmployeeMasterCreate) SetCreatedById(i int64) *EmployeeMasterCreate {
	emc.mutation.SetCreatedById(i)
	return emc
}

// SetNillableCreatedById sets the "CreatedById" field if the given value is not nil.
func (emc *EmployeeMasterCreate) SetNillableCreatedById(i *int64) *EmployeeMasterCreate {
	if i != nil {
		emc.SetCreatedById(*i)
	}
	return emc
}

// SetCreatedByUserName sets the "CreatedByUserName" field.
func (emc *EmployeeMasterCreate) SetCreatedByUserName(s string) *EmployeeMasterCreate {
	emc.mutation.SetCreatedByUserName(s)
	return emc
}

// SetNillableCreatedByUserName sets the "CreatedByUserName" field if the given value is not nil.
func (emc *EmployeeMasterCreate) SetNillableCreatedByUserName(s *string) *EmployeeMasterCreate {
	if s != nil {
		emc.SetCreatedByUserName(*s)
	}
	return emc
}

// SetCreatedByEmpId sets the "CreatedByEmpId" field.
func (emc *EmployeeMasterCreate) SetCreatedByEmpId(i int64) *EmployeeMasterCreate {
	emc.mutation.SetCreatedByEmpId(i)
	return emc
}

// SetNillableCreatedByEmpId sets the "CreatedByEmpId" field if the given value is not nil.
func (emc *EmployeeMasterCreate) SetNillableCreatedByEmpId(i *int64) *EmployeeMasterCreate {
	if i != nil {
		emc.SetCreatedByEmpId(*i)
	}
	return emc
}

// SetCreatedByDesignation sets the "CreatedByDesignation" field.
func (emc *EmployeeMasterCreate) SetCreatedByDesignation(s string) *EmployeeMasterCreate {
	emc.mutation.SetCreatedByDesignation(s)
	return emc
}

// SetNillableCreatedByDesignation sets the "CreatedByDesignation" field if the given value is not nil.
func (emc *EmployeeMasterCreate) SetNillableCreatedByDesignation(s *string) *EmployeeMasterCreate {
	if s != nil {
		emc.SetCreatedByDesignation(*s)
	}
	return emc
}

// SetCreatedDate sets the "CreatedDate" field.
func (emc *EmployeeMasterCreate) SetCreatedDate(t time.Time) *EmployeeMasterCreate {
	emc.mutation.SetCreatedDate(t)
	return emc
}

// SetNillableCreatedDate sets the "CreatedDate" field if the given value is not nil.
func (emc *EmployeeMasterCreate) SetNillableCreatedDate(t *time.Time) *EmployeeMasterCreate {
	if t != nil {
		emc.SetCreatedDate(*t)
	}
	return emc
}

// SetModifiedById sets the "ModifiedById" field.
func (emc *EmployeeMasterCreate) SetModifiedById(i int64) *EmployeeMasterCreate {
	emc.mutation.SetModifiedById(i)
	return emc
}

// SetNillableModifiedById sets the "ModifiedById" field if the given value is not nil.
func (emc *EmployeeMasterCreate) SetNillableModifiedById(i *int64) *EmployeeMasterCreate {
	if i != nil {
		emc.SetModifiedById(*i)
	}
	return emc
}

// SetModifiedByUserName sets the "ModifiedByUserName" field.
func (emc *EmployeeMasterCreate) SetModifiedByUserName(s string) *EmployeeMasterCreate {
	emc.mutation.SetModifiedByUserName(s)
	return emc
}

// SetNillableModifiedByUserName sets the "ModifiedByUserName" field if the given value is not nil.
func (emc *EmployeeMasterCreate) SetNillableModifiedByUserName(s *string) *EmployeeMasterCreate {
	if s != nil {
		emc.SetModifiedByUserName(*s)
	}
	return emc
}

// SetModifiedByEmpId sets the "ModifiedByEmpId" field.
func (emc *EmployeeMasterCreate) SetModifiedByEmpId(i int64) *EmployeeMasterCreate {
	emc.mutation.SetModifiedByEmpId(i)
	return emc
}

// SetNillableModifiedByEmpId sets the "ModifiedByEmpId" field if the given value is not nil.
func (emc *EmployeeMasterCreate) SetNillableModifiedByEmpId(i *int64) *EmployeeMasterCreate {
	if i != nil {
		emc.SetModifiedByEmpId(*i)
	}
	return emc
}

// SetModifiedByDesignantion sets the "ModifiedByDesignantion" field.
func (emc *EmployeeMasterCreate) SetModifiedByDesignantion(s string) *EmployeeMasterCreate {
	emc.mutation.SetModifiedByDesignantion(s)
	return emc
}

// SetNillableModifiedByDesignantion sets the "ModifiedByDesignantion" field if the given value is not nil.
func (emc *EmployeeMasterCreate) SetNillableModifiedByDesignantion(s *string) *EmployeeMasterCreate {
	if s != nil {
		emc.SetModifiedByDesignantion(*s)
	}
	return emc
}

// SetModifiedDate sets the "ModifiedDate" field.
func (emc *EmployeeMasterCreate) SetModifiedDate(t time.Time) *EmployeeMasterCreate {
	emc.mutation.SetModifiedDate(t)
	return emc
}

// SetNillableModifiedDate sets the "ModifiedDate" field if the given value is not nil.
func (emc *EmployeeMasterCreate) SetNillableModifiedDate(t *time.Time) *EmployeeMasterCreate {
	if t != nil {
		emc.SetModifiedDate(*t)
	}
	return emc
}

// SetDeletedById sets the "DeletedById" field.
func (emc *EmployeeMasterCreate) SetDeletedById(i int64) *EmployeeMasterCreate {
	emc.mutation.SetDeletedById(i)
	return emc
}

// SetNillableDeletedById sets the "DeletedById" field if the given value is not nil.
func (emc *EmployeeMasterCreate) SetNillableDeletedById(i *int64) *EmployeeMasterCreate {
	if i != nil {
		emc.SetDeletedById(*i)
	}
	return emc
}

// SetDeletedByUserName sets the "DeletedByUserName" field.
func (emc *EmployeeMasterCreate) SetDeletedByUserName(s string) *EmployeeMasterCreate {
	emc.mutation.SetDeletedByUserName(s)
	return emc
}

// SetNillableDeletedByUserName sets the "DeletedByUserName" field if the given value is not nil.
func (emc *EmployeeMasterCreate) SetNillableDeletedByUserName(s *string) *EmployeeMasterCreate {
	if s != nil {
		emc.SetDeletedByUserName(*s)
	}
	return emc
}

// SetDeletedByEmpId sets the "DeletedByEmpId" field.
func (emc *EmployeeMasterCreate) SetDeletedByEmpId(i int64) *EmployeeMasterCreate {
	emc.mutation.SetDeletedByEmpId(i)
	return emc
}

// SetNillableDeletedByEmpId sets the "DeletedByEmpId" field if the given value is not nil.
func (emc *EmployeeMasterCreate) SetNillableDeletedByEmpId(i *int64) *EmployeeMasterCreate {
	if i != nil {
		emc.SetDeletedByEmpId(*i)
	}
	return emc
}

// SetDeletedByDesignation sets the "DeletedByDesignation" field.
func (emc *EmployeeMasterCreate) SetDeletedByDesignation(s string) *EmployeeMasterCreate {
	emc.mutation.SetDeletedByDesignation(s)
	return emc
}

// SetNillableDeletedByDesignation sets the "DeletedByDesignation" field if the given value is not nil.
func (emc *EmployeeMasterCreate) SetNillableDeletedByDesignation(s *string) *EmployeeMasterCreate {
	if s != nil {
		emc.SetDeletedByDesignation(*s)
	}
	return emc
}

// SetDeletedDate sets the "DeletedDate" field.
func (emc *EmployeeMasterCreate) SetDeletedDate(t time.Time) *EmployeeMasterCreate {
	emc.mutation.SetDeletedDate(t)
	return emc
}

// SetNillableDeletedDate sets the "DeletedDate" field if the given value is not nil.
func (emc *EmployeeMasterCreate) SetNillableDeletedDate(t *time.Time) *EmployeeMasterCreate {
	if t != nil {
		emc.SetDeletedDate(*t)
	}
	return emc
}

// SetUpdatedAt sets the "UpdatedAt" field.
func (emc *EmployeeMasterCreate) SetUpdatedAt(t time.Time) *EmployeeMasterCreate {
	emc.mutation.SetUpdatedAt(t)
	return emc
}

// SetNillableUpdatedAt sets the "UpdatedAt" field if the given value is not nil.
func (emc *EmployeeMasterCreate) SetNillableUpdatedAt(t *time.Time) *EmployeeMasterCreate {
	if t != nil {
		emc.SetUpdatedAt(*t)
	}
	return emc
}

// SetUpdatedBy sets the "UpdatedBy" field.
func (emc *EmployeeMasterCreate) SetUpdatedBy(s string) *EmployeeMasterCreate {
	emc.mutation.SetUpdatedBy(s)
	return emc
}

// SetNillableUpdatedBy sets the "UpdatedBy" field if the given value is not nil.
func (emc *EmployeeMasterCreate) SetNillableUpdatedBy(s *string) *EmployeeMasterCreate {
	if s != nil {
		emc.SetUpdatedBy(*s)
	}
	return emc
}

// SetSmsOtp sets the "SmsOtp" field.
func (emc *EmployeeMasterCreate) SetSmsOtp(i int64) *EmployeeMasterCreate {
	emc.mutation.SetSmsOtp(i)
	return emc
}

// SetNillableSmsOtp sets the "SmsOtp" field if the given value is not nil.
func (emc *EmployeeMasterCreate) SetNillableSmsOtp(i *int64) *EmployeeMasterCreate {
	if i != nil {
		emc.SetSmsOtp(*i)
	}
	return emc
}

// SetSmsTriggeredTime sets the "SmsTriggeredTime" field.
func (emc *EmployeeMasterCreate) SetSmsTriggeredTime(t time.Time) *EmployeeMasterCreate {
	emc.mutation.SetSmsTriggeredTime(t)
	return emc
}

// SetNillableSmsTriggeredTime sets the "SmsTriggeredTime" field if the given value is not nil.
func (emc *EmployeeMasterCreate) SetNillableSmsTriggeredTime(t *time.Time) *EmployeeMasterCreate {
	if t != nil {
		emc.SetSmsTriggeredTime(*t)
	}
	return emc
}

// SetSmsVerifyStatus sets the "SmsVerifyStatus" field.
func (emc *EmployeeMasterCreate) SetSmsVerifyStatus(b bool) *EmployeeMasterCreate {
	emc.mutation.SetSmsVerifyStatus(b)
	return emc
}

// SetNillableSmsVerifyStatus sets the "SmsVerifyStatus" field if the given value is not nil.
func (emc *EmployeeMasterCreate) SetNillableSmsVerifyStatus(b *bool) *EmployeeMasterCreate {
	if b != nil {
		emc.SetSmsVerifyStatus(*b)
	}
	return emc
}

// SetEmailOtp sets the "EmailOtp" field.
func (emc *EmployeeMasterCreate) SetEmailOtp(i int64) *EmployeeMasterCreate {
	emc.mutation.SetEmailOtp(i)
	return emc
}

// SetNillableEmailOtp sets the "EmailOtp" field if the given value is not nil.
func (emc *EmployeeMasterCreate) SetNillableEmailOtp(i *int64) *EmployeeMasterCreate {
	if i != nil {
		emc.SetEmailOtp(*i)
	}
	return emc
}

// SetEmailTriggeredTime sets the "EmailTriggeredTime" field.
func (emc *EmployeeMasterCreate) SetEmailTriggeredTime(t time.Time) *EmployeeMasterCreate {
	emc.mutation.SetEmailTriggeredTime(t)
	return emc
}

// SetNillableEmailTriggeredTime sets the "EmailTriggeredTime" field if the given value is not nil.
func (emc *EmployeeMasterCreate) SetNillableEmailTriggeredTime(t *time.Time) *EmployeeMasterCreate {
	if t != nil {
		emc.SetEmailTriggeredTime(*t)
	}
	return emc
}

// SetEmailVerifyStatus sets the "EmailVerifyStatus" field.
func (emc *EmployeeMasterCreate) SetEmailVerifyStatus(b bool) *EmployeeMasterCreate {
	emc.mutation.SetEmailVerifyStatus(b)
	return emc
}

// SetNillableEmailVerifyStatus sets the "EmailVerifyStatus" field if the given value is not nil.
func (emc *EmployeeMasterCreate) SetNillableEmailVerifyStatus(b *bool) *EmployeeMasterCreate {
	if b != nil {
		emc.SetEmailVerifyStatus(*b)
	}
	return emc
}

// SetFinalSubmitStatus sets the "FinalSubmitStatus" field.
func (emc *EmployeeMasterCreate) SetFinalSubmitStatus(b bool) *EmployeeMasterCreate {
	emc.mutation.SetFinalSubmitStatus(b)
	return emc
}

// SetNillableFinalSubmitStatus sets the "FinalSubmitStatus" field if the given value is not nil.
func (emc *EmployeeMasterCreate) SetNillableFinalSubmitStatus(b *bool) *EmployeeMasterCreate {
	if b != nil {
		emc.SetFinalSubmitStatus(*b)
	}
	return emc
}

// SetDCInPresentCadre sets the "DCInPresentCadre" field.
func (emc *EmployeeMasterCreate) SetDCInPresentCadre(s string) *EmployeeMasterCreate {
	emc.mutation.SetDCInPresentCadre(s)
	return emc
}

// SetNillableDCInPresentCadre sets the "DCInPresentCadre" field if the given value is not nil.
func (emc *EmployeeMasterCreate) SetNillableDCInPresentCadre(s *string) *EmployeeMasterCreate {
	if s != nil {
		emc.SetDCInPresentCadre(*s)
	}
	return emc
}

// SetCadre sets the "Cadre" field.
func (emc *EmployeeMasterCreate) SetCadre(s string) *EmployeeMasterCreate {
	emc.mutation.SetCadre(s)
	return emc
}

// SetNillableCadre sets the "Cadre" field if the given value is not nil.
func (emc *EmployeeMasterCreate) SetNillableCadre(s *string) *EmployeeMasterCreate {
	if s != nil {
		emc.SetCadre(*s)
	}
	return emc
}

// SetID sets the "id" field.
func (emc *EmployeeMasterCreate) SetID(i int64) *EmployeeMasterCreate {
	emc.mutation.SetID(i)
	return emc
}

// AddUsermasterRefIDs adds the "UsermasterRef" edge to the UserMaster entity by IDs.
func (emc *EmployeeMasterCreate) AddUsermasterRefIDs(ids ...int64) *EmployeeMasterCreate {
	emc.mutation.AddUsermasterRefIDs(ids...)
	return emc
}

// AddUsermasterRef adds the "UsermasterRef" edges to the UserMaster entity.
func (emc *EmployeeMasterCreate) AddUsermasterRef(u ...*UserMaster) *EmployeeMasterCreate {
	ids := make([]int64, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return emc.AddUsermasterRefIDs(ids...)
}

// AddEmpRefIDs adds the "Emp_Ref" edge to the Exam_Applications_PS entity by IDs.
func (emc *EmployeeMasterCreate) AddEmpRefIDs(ids ...int64) *EmployeeMasterCreate {
	emc.mutation.AddEmpRefIDs(ids...)
	return emc
}

// AddEmpRef adds the "Emp_Ref" edges to the Exam_Applications_PS entity.
func (emc *EmployeeMasterCreate) AddEmpRef(e ...*Exam_Applications_PS) *EmployeeMasterCreate {
	ids := make([]int64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return emc.AddEmpRefIDs(ids...)
}

// AddLogDatumIDs adds the "LogData" edge to the Logs entity by IDs.
func (emc *EmployeeMasterCreate) AddLogDatumIDs(ids ...int64) *EmployeeMasterCreate {
	emc.mutation.AddLogDatumIDs(ids...)
	return emc
}

// AddLogData adds the "LogData" edges to the Logs entity.
func (emc *EmployeeMasterCreate) AddLogData(l ...*Logs) *EmployeeMasterCreate {
	ids := make([]int64, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return emc.AddLogDatumIDs(ids...)
}

// Mutation returns the EmployeeMasterMutation object of the builder.
func (emc *EmployeeMasterCreate) Mutation() *EmployeeMasterMutation {
	return emc.mutation
}

// Save creates the EmployeeMaster in the database.
func (emc *EmployeeMasterCreate) Save(ctx context.Context) (*EmployeeMaster, error) {
	emc.defaults()
	return withHooks(ctx, emc.sqlSave, emc.mutation, emc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (emc *EmployeeMasterCreate) SaveX(ctx context.Context) *EmployeeMaster {
	v, err := emc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (emc *EmployeeMasterCreate) Exec(ctx context.Context) error {
	_, err := emc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (emc *EmployeeMasterCreate) ExecX(ctx context.Context) {
	if err := emc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (emc *EmployeeMasterCreate) defaults() {
	if _, ok := emc.mutation.EmployeeID(); !ok {
		v := employeemaster.DefaultEmployeeID
		emc.mutation.SetEmployeeID(v)
	}
	if _, ok := emc.mutation.Statuss(); !ok {
		v := employeemaster.DefaultStatuss
		emc.mutation.SetStatuss(v)
	}
	if _, ok := emc.mutation.VerifyStatus(); !ok {
		v := employeemaster.DefaultVerifyStatus
		emc.mutation.SetVerifyStatus(v)
	}
	if _, ok := emc.mutation.CreatedById(); !ok {
		v := employeemaster.DefaultCreatedById
		emc.mutation.SetCreatedById(v)
	}
	if _, ok := emc.mutation.CreatedByEmpId(); !ok {
		v := employeemaster.DefaultCreatedByEmpId
		emc.mutation.SetCreatedByEmpId(v)
	}
	if _, ok := emc.mutation.ModifiedById(); !ok {
		v := employeemaster.DefaultModifiedById
		emc.mutation.SetModifiedById(v)
	}
	if _, ok := emc.mutation.ModifiedByEmpId(); !ok {
		v := employeemaster.DefaultModifiedByEmpId
		emc.mutation.SetModifiedByEmpId(v)
	}
	if _, ok := emc.mutation.DeletedById(); !ok {
		v := employeemaster.DefaultDeletedById
		emc.mutation.SetDeletedById(v)
	}
	if _, ok := emc.mutation.DeletedByEmpId(); !ok {
		v := employeemaster.DefaultDeletedByEmpId
		emc.mutation.SetDeletedByEmpId(v)
	}
	if _, ok := emc.mutation.UpdatedBy(); !ok {
		v := employeemaster.DefaultUpdatedBy
		emc.mutation.SetUpdatedBy(v)
	}
	if _, ok := emc.mutation.SmsOtp(); !ok {
		v := employeemaster.DefaultSmsOtp
		emc.mutation.SetSmsOtp(v)
	}
	if _, ok := emc.mutation.SmsVerifyStatus(); !ok {
		v := employeemaster.DefaultSmsVerifyStatus
		emc.mutation.SetSmsVerifyStatus(v)
	}
	if _, ok := emc.mutation.EmailOtp(); !ok {
		v := employeemaster.DefaultEmailOtp
		emc.mutation.SetEmailOtp(v)
	}
	if _, ok := emc.mutation.EmailVerifyStatus(); !ok {
		v := employeemaster.DefaultEmailVerifyStatus
		emc.mutation.SetEmailVerifyStatus(v)
	}
	if _, ok := emc.mutation.FinalSubmitStatus(); !ok {
		v := employeemaster.DefaultFinalSubmitStatus
		emc.mutation.SetFinalSubmitStatus(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (emc *EmployeeMasterCreate) check() error {
	if _, ok := emc.mutation.VerifyStatus(); !ok {
		return &ValidationError{Name: "VerifyStatus", err: errors.New(`ent: missing required field "EmployeeMaster.VerifyStatus"`)}
	}
	if _, ok := emc.mutation.SmsVerifyStatus(); !ok {
		return &ValidationError{Name: "SmsVerifyStatus", err: errors.New(`ent: missing required field "EmployeeMaster.SmsVerifyStatus"`)}
	}
	if _, ok := emc.mutation.EmailVerifyStatus(); !ok {
		return &ValidationError{Name: "EmailVerifyStatus", err: errors.New(`ent: missing required field "EmployeeMaster.EmailVerifyStatus"`)}
	}
	if _, ok := emc.mutation.FinalSubmitStatus(); !ok {
		return &ValidationError{Name: "FinalSubmitStatus", err: errors.New(`ent: missing required field "EmployeeMaster.FinalSubmitStatus"`)}
	}
	return nil
}

func (emc *EmployeeMasterCreate) sqlSave(ctx context.Context) (*EmployeeMaster, error) {
	if err := emc.check(); err != nil {
		return nil, err
	}
	_node, _spec := emc.createSpec()
	if err := sqlgraph.CreateNode(ctx, emc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	emc.mutation.id = &_node.ID
	emc.mutation.done = true
	return _node, nil
}

func (emc *EmployeeMasterCreate) createSpec() (*EmployeeMaster, *sqlgraph.CreateSpec) {
	var (
		_node = &EmployeeMaster{config: emc.config}
		_spec = sqlgraph.NewCreateSpec(employeemaster.Table, sqlgraph.NewFieldSpec(employeemaster.FieldID, field.TypeInt64))
	)
	if id, ok := emc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := emc.mutation.EmployeeID(); ok {
		_spec.SetField(employeemaster.FieldEmployeeID, field.TypeInt64, value)
		_node.EmployeeID = value
	}
	if value, ok := emc.mutation.EmployeeName(); ok {
		_spec.SetField(employeemaster.FieldEmployeeName, field.TypeString, value)
		_node.EmployeeName = value
	}
	if value, ok := emc.mutation.DOB(); ok {
		_spec.SetField(employeemaster.FieldDOB, field.TypeString, value)
		_node.DOB = value
	}
	if value, ok := emc.mutation.Gender(); ok {
		_spec.SetField(employeemaster.FieldGender, field.TypeString, value)
		_node.Gender = value
	}
	if value, ok := emc.mutation.MobileNumber(); ok {
		_spec.SetField(employeemaster.FieldMobileNumber, field.TypeString, value)
		_node.MobileNumber = value
	}
	if value, ok := emc.mutation.EmailID(); ok {
		_spec.SetField(employeemaster.FieldEmailID, field.TypeString, value)
		_node.EmailID = value
	}
	if value, ok := emc.mutation.EmployeeCategoryCode(); ok {
		_spec.SetField(employeemaster.FieldEmployeeCategoryCode, field.TypeString, value)
		_node.EmployeeCategoryCode = value
	}
	if value, ok := emc.mutation.EmployeeCategory(); ok {
		_spec.SetField(employeemaster.FieldEmployeeCategory, field.TypeString, value)
		_node.EmployeeCategory = value
	}
	if value, ok := emc.mutation.PostCode(); ok {
		_spec.SetField(employeemaster.FieldPostCode, field.TypeString, value)
		_node.PostCode = value
	}
	if value, ok := emc.mutation.EmployeePost(); ok {
		_spec.SetField(employeemaster.FieldEmployeePost, field.TypeString, value)
		_node.EmployeePost = value
	}
	if value, ok := emc.mutation.FacilityID(); ok {
		_spec.SetField(employeemaster.FieldFacilityID, field.TypeString, value)
		_node.FacilityID = value
	}
	if value, ok := emc.mutation.OfficeName(); ok {
		_spec.SetField(employeemaster.FieldOfficeName, field.TypeString, value)
		_node.OfficeName = value
	}
	if value, ok := emc.mutation.ControllingAuthorityFacilityId(); ok {
		_spec.SetField(employeemaster.FieldControllingAuthorityFacilityId, field.TypeString, value)
		_node.ControllingAuthorityFacilityId = value
	}
	if value, ok := emc.mutation.ControllingAuthorityName(); ok {
		_spec.SetField(employeemaster.FieldControllingAuthorityName, field.TypeString, value)
		_node.ControllingAuthorityName = value
	}
	if value, ok := emc.mutation.NodalAuthorityFaciliyId(); ok {
		_spec.SetField(employeemaster.FieldNodalAuthorityFaciliyId, field.TypeString, value)
		_node.NodalAuthorityFaciliyId = value
	}
	if value, ok := emc.mutation.NodalAuthorityName(); ok {
		_spec.SetField(employeemaster.FieldNodalAuthorityName, field.TypeString, value)
		_node.NodalAuthorityName = value
	}
	if value, ok := emc.mutation.Pincode(); ok {
		_spec.SetField(employeemaster.FieldPincode, field.TypeString, value)
		_node.Pincode = value
	}
	if value, ok := emc.mutation.CircleFacilityID(); ok {
		_spec.SetField(employeemaster.FieldCircleFacilityID, field.TypeString, value)
		_node.CircleFacilityID = value
	}
	if value, ok := emc.mutation.Statuss(); ok {
		_spec.SetField(employeemaster.FieldStatuss, field.TypeString, value)
		_node.Statuss = value
	}
	if value, ok := emc.mutation.VerifyStatus(); ok {
		_spec.SetField(employeemaster.FieldVerifyStatus, field.TypeBool, value)
		_node.VerifyStatus = value
	}
	if value, ok := emc.mutation.UidToken(); ok {
		_spec.SetField(employeemaster.FieldUidToken, field.TypeString, value)
		_node.UidToken = value
	}
	if value, ok := emc.mutation.Createdby(); ok {
		_spec.SetField(employeemaster.FieldCreatedby, field.TypeString, value)
		_node.Createdby = value
	}
	if value, ok := emc.mutation.DCCS(); ok {
		_spec.SetField(employeemaster.FieldDCCS, field.TypeString, value)
		_node.DCCS = value
	}
	if value, ok := emc.mutation.CreatedById(); ok {
		_spec.SetField(employeemaster.FieldCreatedById, field.TypeInt64, value)
		_node.CreatedById = value
	}
	if value, ok := emc.mutation.CreatedByUserName(); ok {
		_spec.SetField(employeemaster.FieldCreatedByUserName, field.TypeString, value)
		_node.CreatedByUserName = value
	}
	if value, ok := emc.mutation.CreatedByEmpId(); ok {
		_spec.SetField(employeemaster.FieldCreatedByEmpId, field.TypeInt64, value)
		_node.CreatedByEmpId = value
	}
	if value, ok := emc.mutation.CreatedByDesignation(); ok {
		_spec.SetField(employeemaster.FieldCreatedByDesignation, field.TypeString, value)
		_node.CreatedByDesignation = value
	}
	if value, ok := emc.mutation.CreatedDate(); ok {
		_spec.SetField(employeemaster.FieldCreatedDate, field.TypeTime, value)
		_node.CreatedDate = value
	}
	if value, ok := emc.mutation.ModifiedById(); ok {
		_spec.SetField(employeemaster.FieldModifiedById, field.TypeInt64, value)
		_node.ModifiedById = value
	}
	if value, ok := emc.mutation.ModifiedByUserName(); ok {
		_spec.SetField(employeemaster.FieldModifiedByUserName, field.TypeString, value)
		_node.ModifiedByUserName = value
	}
	if value, ok := emc.mutation.ModifiedByEmpId(); ok {
		_spec.SetField(employeemaster.FieldModifiedByEmpId, field.TypeInt64, value)
		_node.ModifiedByEmpId = value
	}
	if value, ok := emc.mutation.ModifiedByDesignantion(); ok {
		_spec.SetField(employeemaster.FieldModifiedByDesignantion, field.TypeString, value)
		_node.ModifiedByDesignantion = value
	}
	if value, ok := emc.mutation.ModifiedDate(); ok {
		_spec.SetField(employeemaster.FieldModifiedDate, field.TypeTime, value)
		_node.ModifiedDate = value
	}
	if value, ok := emc.mutation.DeletedById(); ok {
		_spec.SetField(employeemaster.FieldDeletedById, field.TypeInt64, value)
		_node.DeletedById = value
	}
	if value, ok := emc.mutation.DeletedByUserName(); ok {
		_spec.SetField(employeemaster.FieldDeletedByUserName, field.TypeString, value)
		_node.DeletedByUserName = value
	}
	if value, ok := emc.mutation.DeletedByEmpId(); ok {
		_spec.SetField(employeemaster.FieldDeletedByEmpId, field.TypeInt64, value)
		_node.DeletedByEmpId = value
	}
	if value, ok := emc.mutation.DeletedByDesignation(); ok {
		_spec.SetField(employeemaster.FieldDeletedByDesignation, field.TypeString, value)
		_node.DeletedByDesignation = value
	}
	if value, ok := emc.mutation.DeletedDate(); ok {
		_spec.SetField(employeemaster.FieldDeletedDate, field.TypeTime, value)
		_node.DeletedDate = value
	}
	if value, ok := emc.mutation.UpdatedAt(); ok {
		_spec.SetField(employeemaster.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := emc.mutation.UpdatedBy(); ok {
		_spec.SetField(employeemaster.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if value, ok := emc.mutation.SmsOtp(); ok {
		_spec.SetField(employeemaster.FieldSmsOtp, field.TypeInt64, value)
		_node.SmsOtp = value
	}
	if value, ok := emc.mutation.SmsTriggeredTime(); ok {
		_spec.SetField(employeemaster.FieldSmsTriggeredTime, field.TypeTime, value)
		_node.SmsTriggeredTime = value
	}
	if value, ok := emc.mutation.SmsVerifyStatus(); ok {
		_spec.SetField(employeemaster.FieldSmsVerifyStatus, field.TypeBool, value)
		_node.SmsVerifyStatus = value
	}
	if value, ok := emc.mutation.EmailOtp(); ok {
		_spec.SetField(employeemaster.FieldEmailOtp, field.TypeInt64, value)
		_node.EmailOtp = value
	}
	if value, ok := emc.mutation.EmailTriggeredTime(); ok {
		_spec.SetField(employeemaster.FieldEmailTriggeredTime, field.TypeTime, value)
		_node.EmailTriggeredTime = value
	}
	if value, ok := emc.mutation.EmailVerifyStatus(); ok {
		_spec.SetField(employeemaster.FieldEmailVerifyStatus, field.TypeBool, value)
		_node.EmailVerifyStatus = value
	}
	if value, ok := emc.mutation.FinalSubmitStatus(); ok {
		_spec.SetField(employeemaster.FieldFinalSubmitStatus, field.TypeBool, value)
		_node.FinalSubmitStatus = value
	}
	if value, ok := emc.mutation.DCInPresentCadre(); ok {
		_spec.SetField(employeemaster.FieldDCInPresentCadre, field.TypeString, value)
		_node.DCInPresentCadre = value
	}
	if value, ok := emc.mutation.Cadre(); ok {
		_spec.SetField(employeemaster.FieldCadre, field.TypeString, value)
		_node.Cadre = value
	}
	if nodes := emc.mutation.UsermasterRefIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employeemaster.UsermasterRefTable,
			Columns: []string{employeemaster.UsermasterRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usermaster.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := emc.mutation.EmpRefIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employeemaster.EmpRefTable,
			Columns: []string{employeemaster.EmpRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_ps.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := emc.mutation.LogDataIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employeemaster.LogDataTable,
			Columns: []string{employeemaster.LogDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(logs.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// EmployeeMasterCreateBulk is the builder for creating many EmployeeMaster entities in bulk.
type EmployeeMasterCreateBulk struct {
	config
	builders []*EmployeeMasterCreate
}

// Save creates the EmployeeMaster entities in the database.
func (emcb *EmployeeMasterCreateBulk) Save(ctx context.Context) ([]*EmployeeMaster, error) {
	specs := make([]*sqlgraph.CreateSpec, len(emcb.builders))
	nodes := make([]*EmployeeMaster, len(emcb.builders))
	mutators := make([]Mutator, len(emcb.builders))
	for i := range emcb.builders {
		func(i int, root context.Context) {
			builder := emcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*EmployeeMasterMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, emcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, emcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, emcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (emcb *EmployeeMasterCreateBulk) SaveX(ctx context.Context) []*EmployeeMaster {
	v, err := emcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (emcb *EmployeeMasterCreateBulk) Exec(ctx context.Context) error {
	_, err := emcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (emcb *EmployeeMasterCreateBulk) ExecX(ctx context.Context) {
	if err := emcb.Exec(ctx); err != nil {
		panic(err)
	}
}
