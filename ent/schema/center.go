// Code generated by entimport, DO NOT EDIT.

package schema

import (
	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/entsql"
	"entgo.io/ent/schema"
	"entgo.io/ent/schema/edge"
	"entgo.io/ent/schema/field"
)

type Center struct {
	ent.Schema
}

func (Center) Fields() []ent.Field {
	return []ent.Field{field.Int32("id").StorageKey("CenterCode"),
	field.Int32("CityID").Optional().Default(0), 
	field.Int32("NodalOfficerCode").Optional().Default(0), 
	field.String("ExamCenterName").Optional(), 
	field.Int32("ExamCode").Optional().Default(0),
	field.Int32("RegionID").Optional().Default(0),
	field.Int32("CircleID").Optional().Default(0),
	field.Int32("DivisionID").Optional().Default(0),
	field.Int32("FacilityID").Optional().Default(0),
	field.String("ExamNameCode").Optional(),
	field.String("ExamName").Optional(),
	field.String("NAUserName").Optional(), 
	field.String("NodalOfficeFacilityId").Optional(), 
	field.String("AdminCircleOfficeID").Optional(),
	field.String("Address").Optional(),
	field.String("Landmark").Optional(),
	field.String("CenterCityName").Optional(),
	field.Int32("Pincode").Optional().Default(0),
	field.Int32("MaxSeats").Optional().Default(0),
	field.Int32("NoAlloted").Optional().Default(0),
	field.Int32("PendingSeats").Optional().Default(0),
	field.Bool("Status").Optional(),
	field.String("ExamYear").Optional(),
	field.String("ConductedBy").Optional(),
	field.String("ConductedByFacilityID").Optional(),
	field.Time("UpdatedAt").SchemaType(map[string]string{
		dialect.Postgres: "timestamp",
	}).Optional(),
	field.String("UpdatedBy").Optional(),
	field.JSON("Papers", []interface{}{}).
		Optional(),

}
}
func (Center) Edges() []ent.Edge {
	return []ent.Edge{edge.To("applications", Application.Type), 
	edge.To("ExamCentresRef", Exam_Applications_IP.Type),
	edge.To("ExamCentresRefPS", Exam_Applications_PS.Type),
	edge.To("ExamCentresRefGDSPA", Exam_Applications_GDSPA.Type),
	edge.To("ExamCentresRefPMPA", Exam_Applications_PMPA.Type),
	edge.To("ExamCentresRefGDSPM", Exam_Applications_GDSPM.Type),
	edge.To("Examscentres", ExamCityCenter.Type),
	edge.To("ExamCentresRefMTSPMMG",Exam_Application_MTSPMMG.Type),
	edge.To("ExaCenterHallRef", ExamCenterHall.Type),
	edge.From("centresip", Exam.Type).Ref("examcentresip").Unique().Field("ExamCode"),

	edge.To("LogData", Logs.Type),
}
}
func (Center) Annotations() []schema.Annotation {
	return []schema.Annotation{entsql.Annotation{Table: "Center"}}
}
