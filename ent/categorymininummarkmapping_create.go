// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"recruit/ent/categorymininummarkmapping"
	"recruit/ent/logs"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CategoryMininumMarkMappingCreate is the builder for creating a CategoryMininumMarkMapping entity.
type CategoryMininumMarkMappingCreate struct {
	config
	mutation *CategoryMininumMarkMappingMutation
	hooks    []Hook
}

// SetExamCode sets the "ExamCode" field.
func (cmmmc *CategoryMininumMarkMappingCreate) SetExamCode(i int64) *CategoryMininumMarkMappingCreate {
	cmmmc.mutation.SetExamCode(i)
	return cmmmc
}

// SetNillableExamCode sets the "ExamCode" field if the given value is not nil.
func (cmmmc *CategoryMininumMarkMappingCreate) SetNillableExamCode(i *int64) *CategoryMininumMarkMappingCreate {
	if i != nil {
		cmmmc.SetExamCode(*i)
	}
	return cmmmc
}

// SetExamName sets the "ExamName" field.
func (cmmmc *CategoryMininumMarkMappingCreate) SetExamName(s string) *CategoryMininumMarkMappingCreate {
	cmmmc.mutation.SetExamName(s)
	return cmmmc
}

// SetNillableExamName sets the "ExamName" field if the given value is not nil.
func (cmmmc *CategoryMininumMarkMappingCreate) SetNillableExamName(s *string) *CategoryMininumMarkMappingCreate {
	if s != nil {
		cmmmc.SetExamName(*s)
	}
	return cmmmc
}

// SetExamShortName sets the "ExamShortName" field.
func (cmmmc *CategoryMininumMarkMappingCreate) SetExamShortName(s string) *CategoryMininumMarkMappingCreate {
	cmmmc.mutation.SetExamShortName(s)
	return cmmmc
}

// SetNillableExamShortName sets the "ExamShortName" field if the given value is not nil.
func (cmmmc *CategoryMininumMarkMappingCreate) SetNillableExamShortName(s *string) *CategoryMininumMarkMappingCreate {
	if s != nil {
		cmmmc.SetExamShortName(*s)
	}
	return cmmmc
}

// SetPaperCode sets the "PaperCode" field.
func (cmmmc *CategoryMininumMarkMappingCreate) SetPaperCode(i int64) *CategoryMininumMarkMappingCreate {
	cmmmc.mutation.SetPaperCode(i)
	return cmmmc
}

// SetNillablePaperCode sets the "PaperCode" field if the given value is not nil.
func (cmmmc *CategoryMininumMarkMappingCreate) SetNillablePaperCode(i *int64) *CategoryMininumMarkMappingCreate {
	if i != nil {
		cmmmc.SetPaperCode(*i)
	}
	return cmmmc
}

// SetPaperDescription sets the "PaperDescription" field.
func (cmmmc *CategoryMininumMarkMappingCreate) SetPaperDescription(s string) *CategoryMininumMarkMappingCreate {
	cmmmc.mutation.SetPaperDescription(s)
	return cmmmc
}

// SetNillablePaperDescription sets the "PaperDescription" field if the given value is not nil.
func (cmmmc *CategoryMininumMarkMappingCreate) SetNillablePaperDescription(s *string) *CategoryMininumMarkMappingCreate {
	if s != nil {
		cmmmc.SetPaperDescription(*s)
	}
	return cmmmc
}

// SetDisabilityTypeID sets the "DisabilityTypeID" field.
func (cmmmc *CategoryMininumMarkMappingCreate) SetDisabilityTypeID(i int64) *CategoryMininumMarkMappingCreate {
	cmmmc.mutation.SetDisabilityTypeID(i)
	return cmmmc
}

// SetNillableDisabilityTypeID sets the "DisabilityTypeID" field if the given value is not nil.
func (cmmmc *CategoryMininumMarkMappingCreate) SetNillableDisabilityTypeID(i *int64) *CategoryMininumMarkMappingCreate {
	if i != nil {
		cmmmc.SetDisabilityTypeID(*i)
	}
	return cmmmc
}

// SetDisabilityTypeCode sets the "DisabilityTypeCode" field.
func (cmmmc *CategoryMininumMarkMappingCreate) SetDisabilityTypeCode(s string) *CategoryMininumMarkMappingCreate {
	cmmmc.mutation.SetDisabilityTypeCode(s)
	return cmmmc
}

// SetNillableDisabilityTypeCode sets the "DisabilityTypeCode" field if the given value is not nil.
func (cmmmc *CategoryMininumMarkMappingCreate) SetNillableDisabilityTypeCode(s *string) *CategoryMininumMarkMappingCreate {
	if s != nil {
		cmmmc.SetDisabilityTypeCode(*s)
	}
	return cmmmc
}

// SetDisabilityTypeDescription sets the "DisabilityTypeDescription" field.
func (cmmmc *CategoryMininumMarkMappingCreate) SetDisabilityTypeDescription(s string) *CategoryMininumMarkMappingCreate {
	cmmmc.mutation.SetDisabilityTypeDescription(s)
	return cmmmc
}

// SetNillableDisabilityTypeDescription sets the "DisabilityTypeDescription" field if the given value is not nil.
func (cmmmc *CategoryMininumMarkMappingCreate) SetNillableDisabilityTypeDescription(s *string) *CategoryMininumMarkMappingCreate {
	if s != nil {
		cmmmc.SetDisabilityTypeDescription(*s)
	}
	return cmmmc
}

// SetMinimumMarks sets the "minimumMarks" field.
func (cmmmc *CategoryMininumMarkMappingCreate) SetMinimumMarks(i int64) *CategoryMininumMarkMappingCreate {
	cmmmc.mutation.SetMinimumMarks(i)
	return cmmmc
}

// SetNillableMinimumMarks sets the "minimumMarks" field if the given value is not nil.
func (cmmmc *CategoryMininumMarkMappingCreate) SetNillableMinimumMarks(i *int64) *CategoryMininumMarkMappingCreate {
	if i != nil {
		cmmmc.SetMinimumMarks(*i)
	}
	return cmmmc
}

// SetOrderNumber sets the "OrderNumber" field.
func (cmmmc *CategoryMininumMarkMappingCreate) SetOrderNumber(s string) *CategoryMininumMarkMappingCreate {
	cmmmc.mutation.SetOrderNumber(s)
	return cmmmc
}

// SetNillableOrderNumber sets the "OrderNumber" field if the given value is not nil.
func (cmmmc *CategoryMininumMarkMappingCreate) SetNillableOrderNumber(s *string) *CategoryMininumMarkMappingCreate {
	if s != nil {
		cmmmc.SetOrderNumber(*s)
	}
	return cmmmc
}

// SetCreatedById sets the "CreatedById" field.
func (cmmmc *CategoryMininumMarkMappingCreate) SetCreatedById(i int64) *CategoryMininumMarkMappingCreate {
	cmmmc.mutation.SetCreatedById(i)
	return cmmmc
}

// SetNillableCreatedById sets the "CreatedById" field if the given value is not nil.
func (cmmmc *CategoryMininumMarkMappingCreate) SetNillableCreatedById(i *int64) *CategoryMininumMarkMappingCreate {
	if i != nil {
		cmmmc.SetCreatedById(*i)
	}
	return cmmmc
}

// SetCreatedByUserName sets the "CreatedByUserName" field.
func (cmmmc *CategoryMininumMarkMappingCreate) SetCreatedByUserName(s string) *CategoryMininumMarkMappingCreate {
	cmmmc.mutation.SetCreatedByUserName(s)
	return cmmmc
}

// SetNillableCreatedByUserName sets the "CreatedByUserName" field if the given value is not nil.
func (cmmmc *CategoryMininumMarkMappingCreate) SetNillableCreatedByUserName(s *string) *CategoryMininumMarkMappingCreate {
	if s != nil {
		cmmmc.SetCreatedByUserName(*s)
	}
	return cmmmc
}

// SetCreatedByEmpId sets the "CreatedByEmpId" field.
func (cmmmc *CategoryMininumMarkMappingCreate) SetCreatedByEmpId(i int64) *CategoryMininumMarkMappingCreate {
	cmmmc.mutation.SetCreatedByEmpId(i)
	return cmmmc
}

// SetNillableCreatedByEmpId sets the "CreatedByEmpId" field if the given value is not nil.
func (cmmmc *CategoryMininumMarkMappingCreate) SetNillableCreatedByEmpId(i *int64) *CategoryMininumMarkMappingCreate {
	if i != nil {
		cmmmc.SetCreatedByEmpId(*i)
	}
	return cmmmc
}

// SetCreatedByDesignation sets the "CreatedByDesignation" field.
func (cmmmc *CategoryMininumMarkMappingCreate) SetCreatedByDesignation(s string) *CategoryMininumMarkMappingCreate {
	cmmmc.mutation.SetCreatedByDesignation(s)
	return cmmmc
}

// SetNillableCreatedByDesignation sets the "CreatedByDesignation" field if the given value is not nil.
func (cmmmc *CategoryMininumMarkMappingCreate) SetNillableCreatedByDesignation(s *string) *CategoryMininumMarkMappingCreate {
	if s != nil {
		cmmmc.SetCreatedByDesignation(*s)
	}
	return cmmmc
}

// SetCreatedDate sets the "CreatedDate" field.
func (cmmmc *CategoryMininumMarkMappingCreate) SetCreatedDate(t time.Time) *CategoryMininumMarkMappingCreate {
	cmmmc.mutation.SetCreatedDate(t)
	return cmmmc
}

// SetNillableCreatedDate sets the "CreatedDate" field if the given value is not nil.
func (cmmmc *CategoryMininumMarkMappingCreate) SetNillableCreatedDate(t *time.Time) *CategoryMininumMarkMappingCreate {
	if t != nil {
		cmmmc.SetCreatedDate(*t)
	}
	return cmmmc
}

// SetVerifiedbyid sets the "verifiedbyid" field.
func (cmmmc *CategoryMininumMarkMappingCreate) SetVerifiedbyid(i int64) *CategoryMininumMarkMappingCreate {
	cmmmc.mutation.SetVerifiedbyid(i)
	return cmmmc
}

// SetNillableVerifiedbyid sets the "verifiedbyid" field if the given value is not nil.
func (cmmmc *CategoryMininumMarkMappingCreate) SetNillableVerifiedbyid(i *int64) *CategoryMininumMarkMappingCreate {
	if i != nil {
		cmmmc.SetVerifiedbyid(*i)
	}
	return cmmmc
}

// SetVerifiedbyusername sets the "verifiedbyusername" field.
func (cmmmc *CategoryMininumMarkMappingCreate) SetVerifiedbyusername(s string) *CategoryMininumMarkMappingCreate {
	cmmmc.mutation.SetVerifiedbyusername(s)
	return cmmmc
}

// SetNillableVerifiedbyusername sets the "verifiedbyusername" field if the given value is not nil.
func (cmmmc *CategoryMininumMarkMappingCreate) SetNillableVerifiedbyusername(s *string) *CategoryMininumMarkMappingCreate {
	if s != nil {
		cmmmc.SetVerifiedbyusername(*s)
	}
	return cmmmc
}

// SetVerifiedbyEmployeeid sets the "verifiedbyEmployeeid" field.
func (cmmmc *CategoryMininumMarkMappingCreate) SetVerifiedbyEmployeeid(i int64) *CategoryMininumMarkMappingCreate {
	cmmmc.mutation.SetVerifiedbyEmployeeid(i)
	return cmmmc
}

// SetNillableVerifiedbyEmployeeid sets the "verifiedbyEmployeeid" field if the given value is not nil.
func (cmmmc *CategoryMininumMarkMappingCreate) SetNillableVerifiedbyEmployeeid(i *int64) *CategoryMininumMarkMappingCreate {
	if i != nil {
		cmmmc.SetVerifiedbyEmployeeid(*i)
	}
	return cmmmc
}

// SetVerifiedbyDesignation sets the "verifiedbyDesignation" field.
func (cmmmc *CategoryMininumMarkMappingCreate) SetVerifiedbyDesignation(s string) *CategoryMininumMarkMappingCreate {
	cmmmc.mutation.SetVerifiedbyDesignation(s)
	return cmmmc
}

// SetNillableVerifiedbyDesignation sets the "verifiedbyDesignation" field if the given value is not nil.
func (cmmmc *CategoryMininumMarkMappingCreate) SetNillableVerifiedbyDesignation(s *string) *CategoryMininumMarkMappingCreate {
	if s != nil {
		cmmmc.SetVerifiedbyDesignation(*s)
	}
	return cmmmc
}

// SetVerifiedDate sets the "verifiedDate" field.
func (cmmmc *CategoryMininumMarkMappingCreate) SetVerifiedDate(t time.Time) *CategoryMininumMarkMappingCreate {
	cmmmc.mutation.SetVerifiedDate(t)
	return cmmmc
}

// SetNillableVerifiedDate sets the "verifiedDate" field if the given value is not nil.
func (cmmmc *CategoryMininumMarkMappingCreate) SetNillableVerifiedDate(t *time.Time) *CategoryMininumMarkMappingCreate {
	if t != nil {
		cmmmc.SetVerifiedDate(*t)
	}
	return cmmmc
}

// SetStatuss sets the "Statuss" field.
func (cmmmc *CategoryMininumMarkMappingCreate) SetStatuss(s string) *CategoryMininumMarkMappingCreate {
	cmmmc.mutation.SetStatuss(s)
	return cmmmc
}

// SetNillableStatuss sets the "Statuss" field if the given value is not nil.
func (cmmmc *CategoryMininumMarkMappingCreate) SetNillableStatuss(s *string) *CategoryMininumMarkMappingCreate {
	if s != nil {
		cmmmc.SetStatuss(*s)
	}
	return cmmmc
}

// SetDeletedbyid sets the "deletedbyid" field.
func (cmmmc *CategoryMininumMarkMappingCreate) SetDeletedbyid(i int64) *CategoryMininumMarkMappingCreate {
	cmmmc.mutation.SetDeletedbyid(i)
	return cmmmc
}

// SetNillableDeletedbyid sets the "deletedbyid" field if the given value is not nil.
func (cmmmc *CategoryMininumMarkMappingCreate) SetNillableDeletedbyid(i *int64) *CategoryMininumMarkMappingCreate {
	if i != nil {
		cmmmc.SetDeletedbyid(*i)
	}
	return cmmmc
}

// SetDeletedbyusername sets the "deletedbyusername" field.
func (cmmmc *CategoryMininumMarkMappingCreate) SetDeletedbyusername(s string) *CategoryMininumMarkMappingCreate {
	cmmmc.mutation.SetDeletedbyusername(s)
	return cmmmc
}

// SetNillableDeletedbyusername sets the "deletedbyusername" field if the given value is not nil.
func (cmmmc *CategoryMininumMarkMappingCreate) SetNillableDeletedbyusername(s *string) *CategoryMininumMarkMappingCreate {
	if s != nil {
		cmmmc.SetDeletedbyusername(*s)
	}
	return cmmmc
}

// SetDeletedbyEmployeeid sets the "deletedbyEmployeeid" field.
func (cmmmc *CategoryMininumMarkMappingCreate) SetDeletedbyEmployeeid(i int64) *CategoryMininumMarkMappingCreate {
	cmmmc.mutation.SetDeletedbyEmployeeid(i)
	return cmmmc
}

// SetNillableDeletedbyEmployeeid sets the "deletedbyEmployeeid" field if the given value is not nil.
func (cmmmc *CategoryMininumMarkMappingCreate) SetNillableDeletedbyEmployeeid(i *int64) *CategoryMininumMarkMappingCreate {
	if i != nil {
		cmmmc.SetDeletedbyEmployeeid(*i)
	}
	return cmmmc
}

// SetDeletedbyDesignation sets the "deletedbyDesignation" field.
func (cmmmc *CategoryMininumMarkMappingCreate) SetDeletedbyDesignation(s string) *CategoryMininumMarkMappingCreate {
	cmmmc.mutation.SetDeletedbyDesignation(s)
	return cmmmc
}

// SetNillableDeletedbyDesignation sets the "deletedbyDesignation" field if the given value is not nil.
func (cmmmc *CategoryMininumMarkMappingCreate) SetNillableDeletedbyDesignation(s *string) *CategoryMininumMarkMappingCreate {
	if s != nil {
		cmmmc.SetDeletedbyDesignation(*s)
	}
	return cmmmc
}

// SetDeletedDate sets the "deletedDate" field.
func (cmmmc *CategoryMininumMarkMappingCreate) SetDeletedDate(t time.Time) *CategoryMininumMarkMappingCreate {
	cmmmc.mutation.SetDeletedDate(t)
	return cmmmc
}

// SetNillableDeletedDate sets the "deletedDate" field if the given value is not nil.
func (cmmmc *CategoryMininumMarkMappingCreate) SetNillableDeletedDate(t *time.Time) *CategoryMininumMarkMappingCreate {
	if t != nil {
		cmmmc.SetDeletedDate(*t)
	}
	return cmmmc
}

// SetID sets the "id" field.
func (cmmmc *CategoryMininumMarkMappingCreate) SetID(i int64) *CategoryMininumMarkMappingCreate {
	cmmmc.mutation.SetID(i)
	return cmmmc
}

// AddLogDatumIDs adds the "LogData" edge to the Logs entity by IDs.
func (cmmmc *CategoryMininumMarkMappingCreate) AddLogDatumIDs(ids ...int64) *CategoryMininumMarkMappingCreate {
	cmmmc.mutation.AddLogDatumIDs(ids...)
	return cmmmc
}

// AddLogData adds the "LogData" edges to the Logs entity.
func (cmmmc *CategoryMininumMarkMappingCreate) AddLogData(l ...*Logs) *CategoryMininumMarkMappingCreate {
	ids := make([]int64, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return cmmmc.AddLogDatumIDs(ids...)
}

// Mutation returns the CategoryMininumMarkMappingMutation object of the builder.
func (cmmmc *CategoryMininumMarkMappingCreate) Mutation() *CategoryMininumMarkMappingMutation {
	return cmmmc.mutation
}

// Save creates the CategoryMininumMarkMapping in the database.
func (cmmmc *CategoryMininumMarkMappingCreate) Save(ctx context.Context) (*CategoryMininumMarkMapping, error) {
	cmmmc.defaults()
	return withHooks(ctx, cmmmc.sqlSave, cmmmc.mutation, cmmmc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cmmmc *CategoryMininumMarkMappingCreate) SaveX(ctx context.Context) *CategoryMininumMarkMapping {
	v, err := cmmmc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cmmmc *CategoryMininumMarkMappingCreate) Exec(ctx context.Context) error {
	_, err := cmmmc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cmmmc *CategoryMininumMarkMappingCreate) ExecX(ctx context.Context) {
	if err := cmmmc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cmmmc *CategoryMininumMarkMappingCreate) defaults() {
	if _, ok := cmmmc.mutation.CreatedDate(); !ok {
		v := categorymininummarkmapping.DefaultCreatedDate()
		cmmmc.mutation.SetCreatedDate(v)
	}
	if _, ok := cmmmc.mutation.VerifiedDate(); !ok {
		v := categorymininummarkmapping.DefaultVerifiedDate()
		cmmmc.mutation.SetVerifiedDate(v)
	}
	if _, ok := cmmmc.mutation.Statuss(); !ok {
		v := categorymininummarkmapping.DefaultStatuss
		cmmmc.mutation.SetStatuss(v)
	}
	if _, ok := cmmmc.mutation.DeletedDate(); !ok {
		v := categorymininummarkmapping.DefaultDeletedDate()
		cmmmc.mutation.SetDeletedDate(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cmmmc *CategoryMininumMarkMappingCreate) check() error {
	return nil
}

func (cmmmc *CategoryMininumMarkMappingCreate) sqlSave(ctx context.Context) (*CategoryMininumMarkMapping, error) {
	if err := cmmmc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cmmmc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cmmmc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	cmmmc.mutation.id = &_node.ID
	cmmmc.mutation.done = true
	return _node, nil
}

func (cmmmc *CategoryMininumMarkMappingCreate) createSpec() (*CategoryMininumMarkMapping, *sqlgraph.CreateSpec) {
	var (
		_node = &CategoryMininumMarkMapping{config: cmmmc.config}
		_spec = sqlgraph.NewCreateSpec(categorymininummarkmapping.Table, sqlgraph.NewFieldSpec(categorymininummarkmapping.FieldID, field.TypeInt64))
	)
	if id, ok := cmmmc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := cmmmc.mutation.ExamCode(); ok {
		_spec.SetField(categorymininummarkmapping.FieldExamCode, field.TypeInt64, value)
		_node.ExamCode = value
	}
	if value, ok := cmmmc.mutation.ExamName(); ok {
		_spec.SetField(categorymininummarkmapping.FieldExamName, field.TypeString, value)
		_node.ExamName = value
	}
	if value, ok := cmmmc.mutation.ExamShortName(); ok {
		_spec.SetField(categorymininummarkmapping.FieldExamShortName, field.TypeString, value)
		_node.ExamShortName = value
	}
	if value, ok := cmmmc.mutation.PaperCode(); ok {
		_spec.SetField(categorymininummarkmapping.FieldPaperCode, field.TypeInt64, value)
		_node.PaperCode = value
	}
	if value, ok := cmmmc.mutation.PaperDescription(); ok {
		_spec.SetField(categorymininummarkmapping.FieldPaperDescription, field.TypeString, value)
		_node.PaperDescription = value
	}
	if value, ok := cmmmc.mutation.DisabilityTypeID(); ok {
		_spec.SetField(categorymininummarkmapping.FieldDisabilityTypeID, field.TypeInt64, value)
		_node.DisabilityTypeID = value
	}
	if value, ok := cmmmc.mutation.DisabilityTypeCode(); ok {
		_spec.SetField(categorymininummarkmapping.FieldDisabilityTypeCode, field.TypeString, value)
		_node.DisabilityTypeCode = value
	}
	if value, ok := cmmmc.mutation.DisabilityTypeDescription(); ok {
		_spec.SetField(categorymininummarkmapping.FieldDisabilityTypeDescription, field.TypeString, value)
		_node.DisabilityTypeDescription = value
	}
	if value, ok := cmmmc.mutation.MinimumMarks(); ok {
		_spec.SetField(categorymininummarkmapping.FieldMinimumMarks, field.TypeInt64, value)
		_node.MinimumMarks = value
	}
	if value, ok := cmmmc.mutation.OrderNumber(); ok {
		_spec.SetField(categorymininummarkmapping.FieldOrderNumber, field.TypeString, value)
		_node.OrderNumber = value
	}
	if value, ok := cmmmc.mutation.CreatedById(); ok {
		_spec.SetField(categorymininummarkmapping.FieldCreatedById, field.TypeInt64, value)
		_node.CreatedById = value
	}
	if value, ok := cmmmc.mutation.CreatedByUserName(); ok {
		_spec.SetField(categorymininummarkmapping.FieldCreatedByUserName, field.TypeString, value)
		_node.CreatedByUserName = value
	}
	if value, ok := cmmmc.mutation.CreatedByEmpId(); ok {
		_spec.SetField(categorymininummarkmapping.FieldCreatedByEmpId, field.TypeInt64, value)
		_node.CreatedByEmpId = value
	}
	if value, ok := cmmmc.mutation.CreatedByDesignation(); ok {
		_spec.SetField(categorymininummarkmapping.FieldCreatedByDesignation, field.TypeString, value)
		_node.CreatedByDesignation = value
	}
	if value, ok := cmmmc.mutation.CreatedDate(); ok {
		_spec.SetField(categorymininummarkmapping.FieldCreatedDate, field.TypeTime, value)
		_node.CreatedDate = value
	}
	if value, ok := cmmmc.mutation.Verifiedbyid(); ok {
		_spec.SetField(categorymininummarkmapping.FieldVerifiedbyid, field.TypeInt64, value)
		_node.Verifiedbyid = value
	}
	if value, ok := cmmmc.mutation.Verifiedbyusername(); ok {
		_spec.SetField(categorymininummarkmapping.FieldVerifiedbyusername, field.TypeString, value)
		_node.Verifiedbyusername = value
	}
	if value, ok := cmmmc.mutation.VerifiedbyEmployeeid(); ok {
		_spec.SetField(categorymininummarkmapping.FieldVerifiedbyEmployeeid, field.TypeInt64, value)
		_node.VerifiedbyEmployeeid = value
	}
	if value, ok := cmmmc.mutation.VerifiedbyDesignation(); ok {
		_spec.SetField(categorymininummarkmapping.FieldVerifiedbyDesignation, field.TypeString, value)
		_node.VerifiedbyDesignation = value
	}
	if value, ok := cmmmc.mutation.VerifiedDate(); ok {
		_spec.SetField(categorymininummarkmapping.FieldVerifiedDate, field.TypeTime, value)
		_node.VerifiedDate = value
	}
	if value, ok := cmmmc.mutation.Statuss(); ok {
		_spec.SetField(categorymininummarkmapping.FieldStatuss, field.TypeString, value)
		_node.Statuss = value
	}
	if value, ok := cmmmc.mutation.Deletedbyid(); ok {
		_spec.SetField(categorymininummarkmapping.FieldDeletedbyid, field.TypeInt64, value)
		_node.Deletedbyid = value
	}
	if value, ok := cmmmc.mutation.Deletedbyusername(); ok {
		_spec.SetField(categorymininummarkmapping.FieldDeletedbyusername, field.TypeString, value)
		_node.Deletedbyusername = value
	}
	if value, ok := cmmmc.mutation.DeletedbyEmployeeid(); ok {
		_spec.SetField(categorymininummarkmapping.FieldDeletedbyEmployeeid, field.TypeInt64, value)
		_node.DeletedbyEmployeeid = value
	}
	if value, ok := cmmmc.mutation.DeletedbyDesignation(); ok {
		_spec.SetField(categorymininummarkmapping.FieldDeletedbyDesignation, field.TypeString, value)
		_node.DeletedbyDesignation = value
	}
	if value, ok := cmmmc.mutation.DeletedDate(); ok {
		_spec.SetField(categorymininummarkmapping.FieldDeletedDate, field.TypeTime, value)
		_node.DeletedDate = value
	}
	if nodes := cmmmc.mutation.LogDataIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   categorymininummarkmapping.LogDataTable,
			Columns: []string{categorymininummarkmapping.LogDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(logs.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// CategoryMininumMarkMappingCreateBulk is the builder for creating many CategoryMininumMarkMapping entities in bulk.
type CategoryMininumMarkMappingCreateBulk struct {
	config
	builders []*CategoryMininumMarkMappingCreate
}

// Save creates the CategoryMininumMarkMapping entities in the database.
func (cmmmcb *CategoryMininumMarkMappingCreateBulk) Save(ctx context.Context) ([]*CategoryMininumMarkMapping, error) {
	specs := make([]*sqlgraph.CreateSpec, len(cmmmcb.builders))
	nodes := make([]*CategoryMininumMarkMapping, len(cmmmcb.builders))
	mutators := make([]Mutator, len(cmmmcb.builders))
	for i := range cmmmcb.builders {
		func(i int, root context.Context) {
			builder := cmmmcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CategoryMininumMarkMappingMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, cmmmcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, cmmmcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, cmmmcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (cmmmcb *CategoryMininumMarkMappingCreateBulk) SaveX(ctx context.Context) []*CategoryMininumMarkMapping {
	v, err := cmmmcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cmmmcb *CategoryMininumMarkMappingCreateBulk) Exec(ctx context.Context) error {
	_, err := cmmmcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cmmmcb *CategoryMininumMarkMappingCreateBulk) ExecX(ctx context.Context) {
	if err := cmmmcb.Exec(ctx); err != nil {
		panic(err)
	}
}
