// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"recruit/ent/employeedesignation"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// EmployeeDesignation is the model entity for the EmployeeDesignation schema.
type EmployeeDesignation struct {
	config `json:"-"`
	// ID of the ent.
	ID int32 `json:"id,omitempty"`
	// PostID holds the value of the "PostID" field.
	PostID int32 `json:"PostID,omitempty"`
	// PostCode holds the value of the "PostCode" field.
	PostCode string `json:"PostCode,omitempty"`
	// PostDescription holds the value of the "PostDescription" field.
	PostDescription string `json:"PostDescription,omitempty"`
	// DesignationCode holds the value of the "DesignationCode" field.
	DesignationCode string `json:"DesignationCode,omitempty"`
	// DesignationDescription holds the value of the "DesignationDescription" field.
	DesignationDescription string `json:"DesignationDescription,omitempty"`
	// OrderNumber holds the value of the "OrderNumber" field.
	OrderNumber string `json:"OrderNumber,omitempty"`
	// CreatedById holds the value of the "CreatedById" field.
	CreatedById int64 `json:"CreatedById,omitempty"`
	// CreatedByUserName holds the value of the "CreatedByUserName" field.
	CreatedByUserName string `json:"CreatedByUserName,omitempty"`
	// CreatedByEmpId holds the value of the "CreatedByEmpId" field.
	CreatedByEmpId int64 `json:"CreatedByEmpId,omitempty"`
	// CreatedByDesignation holds the value of the "CreatedByDesignation" field.
	CreatedByDesignation string `json:"CreatedByDesignation,omitempty"`
	// CreatedDate holds the value of the "CreatedDate" field.
	CreatedDate time.Time `json:"CreatedDate,omitempty"`
	// Verifiedbyid holds the value of the "verifiedbyid" field.
	Verifiedbyid int64 `json:"verifiedbyid,omitempty"`
	// Verifiedbyusername holds the value of the "verifiedbyusername" field.
	Verifiedbyusername string `json:"verifiedbyusername,omitempty"`
	// VerifiedbyEmployeeid holds the value of the "verifiedbyEmployeeid" field.
	VerifiedbyEmployeeid int64 `json:"verifiedbyEmployeeid,omitempty"`
	// VerifiedbyDesignation holds the value of the "verifiedbyDesignation" field.
	VerifiedbyDesignation string `json:"verifiedbyDesignation,omitempty"`
	// VerifiedDate holds the value of the "verifiedDate" field.
	VerifiedDate time.Time `json:"verifiedDate,omitempty"`
	// Statuss holds the value of the "Statuss" field.
	Statuss string `json:"Statuss,omitempty"`
	// Deletedbyid holds the value of the "deletedbyid" field.
	Deletedbyid int64 `json:"deletedbyid,omitempty"`
	// Deletedbyusername holds the value of the "deletedbyusername" field.
	Deletedbyusername string `json:"deletedbyusername,omitempty"`
	// DeletedbyEmployeeid holds the value of the "deletedbyEmployeeid" field.
	DeletedbyEmployeeid int64 `json:"deletedbyEmployeeid,omitempty"`
	// DeletedbyDesignation holds the value of the "deletedbyDesignation" field.
	DeletedbyDesignation string `json:"deletedbyDesignation,omitempty"`
	// DeletedDate holds the value of the "deletedDate" field.
	DeletedDate time.Time `json:"deletedDate,omitempty"`
	// PaperStatus holds the value of the "PaperStatus" field.
	PaperStatus string `json:"PaperStatus,omitempty"`
	// CalendarCode holds the value of the "CalendarCode" field.
	CalendarCode int32 `json:"CalendarCode,omitempty"`
	// ExamCodePS holds the value of the "ExamCodePS" field.
	ExamCodePS int32 `json:"ExamCodePS,omitempty"`
	// CreatedByEmployeeId holds the value of the "CreatedByEmployeeId" field.
	CreatedByEmployeeId string `json:"CreatedByEmployeeId,omitempty"`
	selectValues        sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*EmployeeDesignation) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case employeedesignation.FieldID, employeedesignation.FieldPostID, employeedesignation.FieldCreatedById, employeedesignation.FieldCreatedByEmpId, employeedesignation.FieldVerifiedbyid, employeedesignation.FieldVerifiedbyEmployeeid, employeedesignation.FieldDeletedbyid, employeedesignation.FieldDeletedbyEmployeeid, employeedesignation.FieldCalendarCode, employeedesignation.FieldExamCodePS:
			values[i] = new(sql.NullInt64)
		case employeedesignation.FieldPostCode, employeedesignation.FieldPostDescription, employeedesignation.FieldDesignationCode, employeedesignation.FieldDesignationDescription, employeedesignation.FieldOrderNumber, employeedesignation.FieldCreatedByUserName, employeedesignation.FieldCreatedByDesignation, employeedesignation.FieldVerifiedbyusername, employeedesignation.FieldVerifiedbyDesignation, employeedesignation.FieldStatuss, employeedesignation.FieldDeletedbyusername, employeedesignation.FieldDeletedbyDesignation, employeedesignation.FieldPaperStatus, employeedesignation.FieldCreatedByEmployeeId:
			values[i] = new(sql.NullString)
		case employeedesignation.FieldCreatedDate, employeedesignation.FieldVerifiedDate, employeedesignation.FieldDeletedDate:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the EmployeeDesignation fields.
func (ed *EmployeeDesignation) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case employeedesignation.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ed.ID = int32(value.Int64)
		case employeedesignation.FieldPostID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field PostID", values[i])
			} else if value.Valid {
				ed.PostID = int32(value.Int64)
			}
		case employeedesignation.FieldPostCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field PostCode", values[i])
			} else if value.Valid {
				ed.PostCode = value.String
			}
		case employeedesignation.FieldPostDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field PostDescription", values[i])
			} else if value.Valid {
				ed.PostDescription = value.String
			}
		case employeedesignation.FieldDesignationCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field DesignationCode", values[i])
			} else if value.Valid {
				ed.DesignationCode = value.String
			}
		case employeedesignation.FieldDesignationDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field DesignationDescription", values[i])
			} else if value.Valid {
				ed.DesignationDescription = value.String
			}
		case employeedesignation.FieldOrderNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field OrderNumber", values[i])
			} else if value.Valid {
				ed.OrderNumber = value.String
			}
		case employeedesignation.FieldCreatedById:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field CreatedById", values[i])
			} else if value.Valid {
				ed.CreatedById = value.Int64
			}
		case employeedesignation.FieldCreatedByUserName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field CreatedByUserName", values[i])
			} else if value.Valid {
				ed.CreatedByUserName = value.String
			}
		case employeedesignation.FieldCreatedByEmpId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field CreatedByEmpId", values[i])
			} else if value.Valid {
				ed.CreatedByEmpId = value.Int64
			}
		case employeedesignation.FieldCreatedByDesignation:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field CreatedByDesignation", values[i])
			} else if value.Valid {
				ed.CreatedByDesignation = value.String
			}
		case employeedesignation.FieldCreatedDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field CreatedDate", values[i])
			} else if value.Valid {
				ed.CreatedDate = value.Time
			}
		case employeedesignation.FieldVerifiedbyid:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field verifiedbyid", values[i])
			} else if value.Valid {
				ed.Verifiedbyid = value.Int64
			}
		case employeedesignation.FieldVerifiedbyusername:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field verifiedbyusername", values[i])
			} else if value.Valid {
				ed.Verifiedbyusername = value.String
			}
		case employeedesignation.FieldVerifiedbyEmployeeid:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field verifiedbyEmployeeid", values[i])
			} else if value.Valid {
				ed.VerifiedbyEmployeeid = value.Int64
			}
		case employeedesignation.FieldVerifiedbyDesignation:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field verifiedbyDesignation", values[i])
			} else if value.Valid {
				ed.VerifiedbyDesignation = value.String
			}
		case employeedesignation.FieldVerifiedDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field verifiedDate", values[i])
			} else if value.Valid {
				ed.VerifiedDate = value.Time
			}
		case employeedesignation.FieldStatuss:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Statuss", values[i])
			} else if value.Valid {
				ed.Statuss = value.String
			}
		case employeedesignation.FieldDeletedbyid:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deletedbyid", values[i])
			} else if value.Valid {
				ed.Deletedbyid = value.Int64
			}
		case employeedesignation.FieldDeletedbyusername:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field deletedbyusername", values[i])
			} else if value.Valid {
				ed.Deletedbyusername = value.String
			}
		case employeedesignation.FieldDeletedbyEmployeeid:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deletedbyEmployeeid", values[i])
			} else if value.Valid {
				ed.DeletedbyEmployeeid = value.Int64
			}
		case employeedesignation.FieldDeletedbyDesignation:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field deletedbyDesignation", values[i])
			} else if value.Valid {
				ed.DeletedbyDesignation = value.String
			}
		case employeedesignation.FieldDeletedDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deletedDate", values[i])
			} else if value.Valid {
				ed.DeletedDate = value.Time
			}
		case employeedesignation.FieldPaperStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field PaperStatus", values[i])
			} else if value.Valid {
				ed.PaperStatus = value.String
			}
		case employeedesignation.FieldCalendarCode:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field CalendarCode", values[i])
			} else if value.Valid {
				ed.CalendarCode = int32(value.Int64)
			}
		case employeedesignation.FieldExamCodePS:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field ExamCodePS", values[i])
			} else if value.Valid {
				ed.ExamCodePS = int32(value.Int64)
			}
		case employeedesignation.FieldCreatedByEmployeeId:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field CreatedByEmployeeId", values[i])
			} else if value.Valid {
				ed.CreatedByEmployeeId = value.String
			}
		default:
			ed.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the EmployeeDesignation.
// This includes values selected through modifiers, order, etc.
func (ed *EmployeeDesignation) Value(name string) (ent.Value, error) {
	return ed.selectValues.Get(name)
}

// Update returns a builder for updating this EmployeeDesignation.
// Note that you need to call EmployeeDesignation.Unwrap() before calling this method if this EmployeeDesignation
// was returned from a transaction, and the transaction was committed or rolled back.
func (ed *EmployeeDesignation) Update() *EmployeeDesignationUpdateOne {
	return NewEmployeeDesignationClient(ed.config).UpdateOne(ed)
}

// Unwrap unwraps the EmployeeDesignation entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ed *EmployeeDesignation) Unwrap() *EmployeeDesignation {
	_tx, ok := ed.config.driver.(*txDriver)
	if !ok {
		panic("ent: EmployeeDesignation is not a transactional entity")
	}
	ed.config.driver = _tx.drv
	return ed
}

// String implements the fmt.Stringer.
func (ed *EmployeeDesignation) String() string {
	var builder strings.Builder
	builder.WriteString("EmployeeDesignation(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ed.ID))
	builder.WriteString("PostID=")
	builder.WriteString(fmt.Sprintf("%v", ed.PostID))
	builder.WriteString(", ")
	builder.WriteString("PostCode=")
	builder.WriteString(ed.PostCode)
	builder.WriteString(", ")
	builder.WriteString("PostDescription=")
	builder.WriteString(ed.PostDescription)
	builder.WriteString(", ")
	builder.WriteString("DesignationCode=")
	builder.WriteString(ed.DesignationCode)
	builder.WriteString(", ")
	builder.WriteString("DesignationDescription=")
	builder.WriteString(ed.DesignationDescription)
	builder.WriteString(", ")
	builder.WriteString("OrderNumber=")
	builder.WriteString(ed.OrderNumber)
	builder.WriteString(", ")
	builder.WriteString("CreatedById=")
	builder.WriteString(fmt.Sprintf("%v", ed.CreatedById))
	builder.WriteString(", ")
	builder.WriteString("CreatedByUserName=")
	builder.WriteString(ed.CreatedByUserName)
	builder.WriteString(", ")
	builder.WriteString("CreatedByEmpId=")
	builder.WriteString(fmt.Sprintf("%v", ed.CreatedByEmpId))
	builder.WriteString(", ")
	builder.WriteString("CreatedByDesignation=")
	builder.WriteString(ed.CreatedByDesignation)
	builder.WriteString(", ")
	builder.WriteString("CreatedDate=")
	builder.WriteString(ed.CreatedDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("verifiedbyid=")
	builder.WriteString(fmt.Sprintf("%v", ed.Verifiedbyid))
	builder.WriteString(", ")
	builder.WriteString("verifiedbyusername=")
	builder.WriteString(ed.Verifiedbyusername)
	builder.WriteString(", ")
	builder.WriteString("verifiedbyEmployeeid=")
	builder.WriteString(fmt.Sprintf("%v", ed.VerifiedbyEmployeeid))
	builder.WriteString(", ")
	builder.WriteString("verifiedbyDesignation=")
	builder.WriteString(ed.VerifiedbyDesignation)
	builder.WriteString(", ")
	builder.WriteString("verifiedDate=")
	builder.WriteString(ed.VerifiedDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("Statuss=")
	builder.WriteString(ed.Statuss)
	builder.WriteString(", ")
	builder.WriteString("deletedbyid=")
	builder.WriteString(fmt.Sprintf("%v", ed.Deletedbyid))
	builder.WriteString(", ")
	builder.WriteString("deletedbyusername=")
	builder.WriteString(ed.Deletedbyusername)
	builder.WriteString(", ")
	builder.WriteString("deletedbyEmployeeid=")
	builder.WriteString(fmt.Sprintf("%v", ed.DeletedbyEmployeeid))
	builder.WriteString(", ")
	builder.WriteString("deletedbyDesignation=")
	builder.WriteString(ed.DeletedbyDesignation)
	builder.WriteString(", ")
	builder.WriteString("deletedDate=")
	builder.WriteString(ed.DeletedDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("PaperStatus=")
	builder.WriteString(ed.PaperStatus)
	builder.WriteString(", ")
	builder.WriteString("CalendarCode=")
	builder.WriteString(fmt.Sprintf("%v", ed.CalendarCode))
	builder.WriteString(", ")
	builder.WriteString("ExamCodePS=")
	builder.WriteString(fmt.Sprintf("%v", ed.ExamCodePS))
	builder.WriteString(", ")
	builder.WriteString("CreatedByEmployeeId=")
	builder.WriteString(ed.CreatedByEmployeeId)
	builder.WriteByte(')')
	return builder.String()
}

// EmployeeDesignations is a parsable slice of EmployeeDesignation.
type EmployeeDesignations []*EmployeeDesignation
