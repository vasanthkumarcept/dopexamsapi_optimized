// Code generated by ent, DO NOT EDIT.

package adminlogin

import (
	"recruit/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int32) predicate.AdminLogin {
	return predicate.AdminLogin(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int32) predicate.AdminLogin {
	return predicate.AdminLogin(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int32) predicate.AdminLogin {
	return predicate.AdminLogin(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int32) predicate.AdminLogin {
	return predicate.AdminLogin(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int32) predicate.AdminLogin {
	return predicate.AdminLogin(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int32) predicate.AdminLogin {
	return predicate.AdminLogin(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int32) predicate.AdminLogin {
	return predicate.AdminLogin(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int32) predicate.AdminLogin {
	return predicate.AdminLogin(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int32) predicate.AdminLogin {
	return predicate.AdminLogin(sql.FieldLTE(FieldID, id))
}

// RoleUserCode applies equality check predicate on the "RoleUserCode" field. It's identical to RoleUserCodeEQ.
func RoleUserCode(v int32) predicate.AdminLogin {
	return predicate.AdminLogin(sql.FieldEQ(FieldRoleUserCode, v))
}

// RoleName applies equality check predicate on the "RoleName" field. It's identical to RoleNameEQ.
func RoleName(v string) predicate.AdminLogin {
	return predicate.AdminLogin(sql.FieldEQ(FieldRoleName, v))
}

// CreatedDate applies equality check predicate on the "CreatedDate" field. It's identical to CreatedDateEQ.
func CreatedDate(v time.Time) predicate.AdminLogin {
	return predicate.AdminLogin(sql.FieldEQ(FieldCreatedDate, v))
}

// Status applies equality check predicate on the "Status" field. It's identical to StatusEQ.
func Status(v string) predicate.AdminLogin {
	return predicate.AdminLogin(sql.FieldEQ(FieldStatus, v))
}

// EmployeedID applies equality check predicate on the "EmployeedID" field. It's identical to EmployeedIDEQ.
func EmployeedID(v int32) predicate.AdminLogin {
	return predicate.AdminLogin(sql.FieldEQ(FieldEmployeedID, v))
}

// EmployeeName applies equality check predicate on the "EmployeeName" field. It's identical to EmployeeNameEQ.
func EmployeeName(v string) predicate.AdminLogin {
	return predicate.AdminLogin(sql.FieldEQ(FieldEmployeeName, v))
}

// Emailid applies equality check predicate on the "Emailid" field. It's identical to EmailidEQ.
func Emailid(v string) predicate.AdminLogin {
	return predicate.AdminLogin(sql.FieldEQ(FieldEmailid, v))
}

// MobileNumber applies equality check predicate on the "MobileNumber" field. It's identical to MobileNumberEQ.
func MobileNumber(v int64) predicate.AdminLogin {
	return predicate.AdminLogin(sql.FieldEQ(FieldMobileNumber, v))
}

// Username applies equality check predicate on the "Username" field. It's identical to UsernameEQ.
func Username(v string) predicate.AdminLogin {
	return predicate.AdminLogin(sql.FieldEQ(FieldUsername, v))
}

// OTP applies equality check predicate on the "OTP" field. It's identical to OTPEQ.
func OTP(v int32) predicate.AdminLogin {
	return predicate.AdminLogin(sql.FieldEQ(FieldOTP, v))
}

// Password applies equality check predicate on the "Password" field. It's identical to PasswordEQ.
func Password(v string) predicate.AdminLogin {
	return predicate.AdminLogin(sql.FieldEQ(FieldPassword, v))
}

// VerifyRemarks applies equality check predicate on the "VerifyRemarks" field. It's identical to VerifyRemarksEQ.
func VerifyRemarks(v string) predicate.AdminLogin {
	return predicate.AdminLogin(sql.FieldEQ(FieldVerifyRemarks, v))
}

// RoleUserCodeEQ applies the EQ predicate on the "RoleUserCode" field.
func RoleUserCodeEQ(v int32) predicate.AdminLogin {
	return predicate.AdminLogin(sql.FieldEQ(FieldRoleUserCode, v))
}

// RoleUserCodeNEQ applies the NEQ predicate on the "RoleUserCode" field.
func RoleUserCodeNEQ(v int32) predicate.AdminLogin {
	return predicate.AdminLogin(sql.FieldNEQ(FieldRoleUserCode, v))
}

// RoleUserCodeIn applies the In predicate on the "RoleUserCode" field.
func RoleUserCodeIn(vs ...int32) predicate.AdminLogin {
	return predicate.AdminLogin(sql.FieldIn(FieldRoleUserCode, vs...))
}

// RoleUserCodeNotIn applies the NotIn predicate on the "RoleUserCode" field.
func RoleUserCodeNotIn(vs ...int32) predicate.AdminLogin {
	return predicate.AdminLogin(sql.FieldNotIn(FieldRoleUserCode, vs...))
}

// RoleUserCodeIsNil applies the IsNil predicate on the "RoleUserCode" field.
func RoleUserCodeIsNil() predicate.AdminLogin {
	return predicate.AdminLogin(sql.FieldIsNull(FieldRoleUserCode))
}

// RoleUserCodeNotNil applies the NotNil predicate on the "RoleUserCode" field.
func RoleUserCodeNotNil() predicate.AdminLogin {
	return predicate.AdminLogin(sql.FieldNotNull(FieldRoleUserCode))
}

// RoleNameEQ applies the EQ predicate on the "RoleName" field.
func RoleNameEQ(v string) predicate.AdminLogin {
	return predicate.AdminLogin(sql.FieldEQ(FieldRoleName, v))
}

// RoleNameNEQ applies the NEQ predicate on the "RoleName" field.
func RoleNameNEQ(v string) predicate.AdminLogin {
	return predicate.AdminLogin(sql.FieldNEQ(FieldRoleName, v))
}

// RoleNameIn applies the In predicate on the "RoleName" field.
func RoleNameIn(vs ...string) predicate.AdminLogin {
	return predicate.AdminLogin(sql.FieldIn(FieldRoleName, vs...))
}

// RoleNameNotIn applies the NotIn predicate on the "RoleName" field.
func RoleNameNotIn(vs ...string) predicate.AdminLogin {
	return predicate.AdminLogin(sql.FieldNotIn(FieldRoleName, vs...))
}

// RoleNameGT applies the GT predicate on the "RoleName" field.
func RoleNameGT(v string) predicate.AdminLogin {
	return predicate.AdminLogin(sql.FieldGT(FieldRoleName, v))
}

// RoleNameGTE applies the GTE predicate on the "RoleName" field.
func RoleNameGTE(v string) predicate.AdminLogin {
	return predicate.AdminLogin(sql.FieldGTE(FieldRoleName, v))
}

// RoleNameLT applies the LT predicate on the "RoleName" field.
func RoleNameLT(v string) predicate.AdminLogin {
	return predicate.AdminLogin(sql.FieldLT(FieldRoleName, v))
}

// RoleNameLTE applies the LTE predicate on the "RoleName" field.
func RoleNameLTE(v string) predicate.AdminLogin {
	return predicate.AdminLogin(sql.FieldLTE(FieldRoleName, v))
}

// RoleNameContains applies the Contains predicate on the "RoleName" field.
func RoleNameContains(v string) predicate.AdminLogin {
	return predicate.AdminLogin(sql.FieldContains(FieldRoleName, v))
}

// RoleNameHasPrefix applies the HasPrefix predicate on the "RoleName" field.
func RoleNameHasPrefix(v string) predicate.AdminLogin {
	return predicate.AdminLogin(sql.FieldHasPrefix(FieldRoleName, v))
}

// RoleNameHasSuffix applies the HasSuffix predicate on the "RoleName" field.
func RoleNameHasSuffix(v string) predicate.AdminLogin {
	return predicate.AdminLogin(sql.FieldHasSuffix(FieldRoleName, v))
}

// RoleNameIsNil applies the IsNil predicate on the "RoleName" field.
func RoleNameIsNil() predicate.AdminLogin {
	return predicate.AdminLogin(sql.FieldIsNull(FieldRoleName))
}

// RoleNameNotNil applies the NotNil predicate on the "RoleName" field.
func RoleNameNotNil() predicate.AdminLogin {
	return predicate.AdminLogin(sql.FieldNotNull(FieldRoleName))
}

// RoleNameEqualFold applies the EqualFold predicate on the "RoleName" field.
func RoleNameEqualFold(v string) predicate.AdminLogin {
	return predicate.AdminLogin(sql.FieldEqualFold(FieldRoleName, v))
}

// RoleNameContainsFold applies the ContainsFold predicate on the "RoleName" field.
func RoleNameContainsFold(v string) predicate.AdminLogin {
	return predicate.AdminLogin(sql.FieldContainsFold(FieldRoleName, v))
}

// CreatedDateEQ applies the EQ predicate on the "CreatedDate" field.
func CreatedDateEQ(v time.Time) predicate.AdminLogin {
	return predicate.AdminLogin(sql.FieldEQ(FieldCreatedDate, v))
}

// CreatedDateNEQ applies the NEQ predicate on the "CreatedDate" field.
func CreatedDateNEQ(v time.Time) predicate.AdminLogin {
	return predicate.AdminLogin(sql.FieldNEQ(FieldCreatedDate, v))
}

// CreatedDateIn applies the In predicate on the "CreatedDate" field.
func CreatedDateIn(vs ...time.Time) predicate.AdminLogin {
	return predicate.AdminLogin(sql.FieldIn(FieldCreatedDate, vs...))
}

// CreatedDateNotIn applies the NotIn predicate on the "CreatedDate" field.
func CreatedDateNotIn(vs ...time.Time) predicate.AdminLogin {
	return predicate.AdminLogin(sql.FieldNotIn(FieldCreatedDate, vs...))
}

// CreatedDateGT applies the GT predicate on the "CreatedDate" field.
func CreatedDateGT(v time.Time) predicate.AdminLogin {
	return predicate.AdminLogin(sql.FieldGT(FieldCreatedDate, v))
}

// CreatedDateGTE applies the GTE predicate on the "CreatedDate" field.
func CreatedDateGTE(v time.Time) predicate.AdminLogin {
	return predicate.AdminLogin(sql.FieldGTE(FieldCreatedDate, v))
}

// CreatedDateLT applies the LT predicate on the "CreatedDate" field.
func CreatedDateLT(v time.Time) predicate.AdminLogin {
	return predicate.AdminLogin(sql.FieldLT(FieldCreatedDate, v))
}

// CreatedDateLTE applies the LTE predicate on the "CreatedDate" field.
func CreatedDateLTE(v time.Time) predicate.AdminLogin {
	return predicate.AdminLogin(sql.FieldLTE(FieldCreatedDate, v))
}

// CreatedDateIsNil applies the IsNil predicate on the "CreatedDate" field.
func CreatedDateIsNil() predicate.AdminLogin {
	return predicate.AdminLogin(sql.FieldIsNull(FieldCreatedDate))
}

// CreatedDateNotNil applies the NotNil predicate on the "CreatedDate" field.
func CreatedDateNotNil() predicate.AdminLogin {
	return predicate.AdminLogin(sql.FieldNotNull(FieldCreatedDate))
}

// StatusEQ applies the EQ predicate on the "Status" field.
func StatusEQ(v string) predicate.AdminLogin {
	return predicate.AdminLogin(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "Status" field.
func StatusNEQ(v string) predicate.AdminLogin {
	return predicate.AdminLogin(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "Status" field.
func StatusIn(vs ...string) predicate.AdminLogin {
	return predicate.AdminLogin(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "Status" field.
func StatusNotIn(vs ...string) predicate.AdminLogin {
	return predicate.AdminLogin(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "Status" field.
func StatusGT(v string) predicate.AdminLogin {
	return predicate.AdminLogin(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "Status" field.
func StatusGTE(v string) predicate.AdminLogin {
	return predicate.AdminLogin(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "Status" field.
func StatusLT(v string) predicate.AdminLogin {
	return predicate.AdminLogin(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "Status" field.
func StatusLTE(v string) predicate.AdminLogin {
	return predicate.AdminLogin(sql.FieldLTE(FieldStatus, v))
}

// StatusContains applies the Contains predicate on the "Status" field.
func StatusContains(v string) predicate.AdminLogin {
	return predicate.AdminLogin(sql.FieldContains(FieldStatus, v))
}

// StatusHasPrefix applies the HasPrefix predicate on the "Status" field.
func StatusHasPrefix(v string) predicate.AdminLogin {
	return predicate.AdminLogin(sql.FieldHasPrefix(FieldStatus, v))
}

// StatusHasSuffix applies the HasSuffix predicate on the "Status" field.
func StatusHasSuffix(v string) predicate.AdminLogin {
	return predicate.AdminLogin(sql.FieldHasSuffix(FieldStatus, v))
}

// StatusIsNil applies the IsNil predicate on the "Status" field.
func StatusIsNil() predicate.AdminLogin {
	return predicate.AdminLogin(sql.FieldIsNull(FieldStatus))
}

// StatusNotNil applies the NotNil predicate on the "Status" field.
func StatusNotNil() predicate.AdminLogin {
	return predicate.AdminLogin(sql.FieldNotNull(FieldStatus))
}

// StatusEqualFold applies the EqualFold predicate on the "Status" field.
func StatusEqualFold(v string) predicate.AdminLogin {
	return predicate.AdminLogin(sql.FieldEqualFold(FieldStatus, v))
}

// StatusContainsFold applies the ContainsFold predicate on the "Status" field.
func StatusContainsFold(v string) predicate.AdminLogin {
	return predicate.AdminLogin(sql.FieldContainsFold(FieldStatus, v))
}

// EmployeedIDEQ applies the EQ predicate on the "EmployeedID" field.
func EmployeedIDEQ(v int32) predicate.AdminLogin {
	return predicate.AdminLogin(sql.FieldEQ(FieldEmployeedID, v))
}

// EmployeedIDNEQ applies the NEQ predicate on the "EmployeedID" field.
func EmployeedIDNEQ(v int32) predicate.AdminLogin {
	return predicate.AdminLogin(sql.FieldNEQ(FieldEmployeedID, v))
}

// EmployeedIDIn applies the In predicate on the "EmployeedID" field.
func EmployeedIDIn(vs ...int32) predicate.AdminLogin {
	return predicate.AdminLogin(sql.FieldIn(FieldEmployeedID, vs...))
}

// EmployeedIDNotIn applies the NotIn predicate on the "EmployeedID" field.
func EmployeedIDNotIn(vs ...int32) predicate.AdminLogin {
	return predicate.AdminLogin(sql.FieldNotIn(FieldEmployeedID, vs...))
}

// EmployeedIDGT applies the GT predicate on the "EmployeedID" field.
func EmployeedIDGT(v int32) predicate.AdminLogin {
	return predicate.AdminLogin(sql.FieldGT(FieldEmployeedID, v))
}

// EmployeedIDGTE applies the GTE predicate on the "EmployeedID" field.
func EmployeedIDGTE(v int32) predicate.AdminLogin {
	return predicate.AdminLogin(sql.FieldGTE(FieldEmployeedID, v))
}

// EmployeedIDLT applies the LT predicate on the "EmployeedID" field.
func EmployeedIDLT(v int32) predicate.AdminLogin {
	return predicate.AdminLogin(sql.FieldLT(FieldEmployeedID, v))
}

// EmployeedIDLTE applies the LTE predicate on the "EmployeedID" field.
func EmployeedIDLTE(v int32) predicate.AdminLogin {
	return predicate.AdminLogin(sql.FieldLTE(FieldEmployeedID, v))
}

// EmployeedIDIsNil applies the IsNil predicate on the "EmployeedID" field.
func EmployeedIDIsNil() predicate.AdminLogin {
	return predicate.AdminLogin(sql.FieldIsNull(FieldEmployeedID))
}

// EmployeedIDNotNil applies the NotNil predicate on the "EmployeedID" field.
func EmployeedIDNotNil() predicate.AdminLogin {
	return predicate.AdminLogin(sql.FieldNotNull(FieldEmployeedID))
}

// EmployeeNameEQ applies the EQ predicate on the "EmployeeName" field.
func EmployeeNameEQ(v string) predicate.AdminLogin {
	return predicate.AdminLogin(sql.FieldEQ(FieldEmployeeName, v))
}

// EmployeeNameNEQ applies the NEQ predicate on the "EmployeeName" field.
func EmployeeNameNEQ(v string) predicate.AdminLogin {
	return predicate.AdminLogin(sql.FieldNEQ(FieldEmployeeName, v))
}

// EmployeeNameIn applies the In predicate on the "EmployeeName" field.
func EmployeeNameIn(vs ...string) predicate.AdminLogin {
	return predicate.AdminLogin(sql.FieldIn(FieldEmployeeName, vs...))
}

// EmployeeNameNotIn applies the NotIn predicate on the "EmployeeName" field.
func EmployeeNameNotIn(vs ...string) predicate.AdminLogin {
	return predicate.AdminLogin(sql.FieldNotIn(FieldEmployeeName, vs...))
}

// EmployeeNameGT applies the GT predicate on the "EmployeeName" field.
func EmployeeNameGT(v string) predicate.AdminLogin {
	return predicate.AdminLogin(sql.FieldGT(FieldEmployeeName, v))
}

// EmployeeNameGTE applies the GTE predicate on the "EmployeeName" field.
func EmployeeNameGTE(v string) predicate.AdminLogin {
	return predicate.AdminLogin(sql.FieldGTE(FieldEmployeeName, v))
}

// EmployeeNameLT applies the LT predicate on the "EmployeeName" field.
func EmployeeNameLT(v string) predicate.AdminLogin {
	return predicate.AdminLogin(sql.FieldLT(FieldEmployeeName, v))
}

// EmployeeNameLTE applies the LTE predicate on the "EmployeeName" field.
func EmployeeNameLTE(v string) predicate.AdminLogin {
	return predicate.AdminLogin(sql.FieldLTE(FieldEmployeeName, v))
}

// EmployeeNameContains applies the Contains predicate on the "EmployeeName" field.
func EmployeeNameContains(v string) predicate.AdminLogin {
	return predicate.AdminLogin(sql.FieldContains(FieldEmployeeName, v))
}

// EmployeeNameHasPrefix applies the HasPrefix predicate on the "EmployeeName" field.
func EmployeeNameHasPrefix(v string) predicate.AdminLogin {
	return predicate.AdminLogin(sql.FieldHasPrefix(FieldEmployeeName, v))
}

// EmployeeNameHasSuffix applies the HasSuffix predicate on the "EmployeeName" field.
func EmployeeNameHasSuffix(v string) predicate.AdminLogin {
	return predicate.AdminLogin(sql.FieldHasSuffix(FieldEmployeeName, v))
}

// EmployeeNameIsNil applies the IsNil predicate on the "EmployeeName" field.
func EmployeeNameIsNil() predicate.AdminLogin {
	return predicate.AdminLogin(sql.FieldIsNull(FieldEmployeeName))
}

// EmployeeNameNotNil applies the NotNil predicate on the "EmployeeName" field.
func EmployeeNameNotNil() predicate.AdminLogin {
	return predicate.AdminLogin(sql.FieldNotNull(FieldEmployeeName))
}

// EmployeeNameEqualFold applies the EqualFold predicate on the "EmployeeName" field.
func EmployeeNameEqualFold(v string) predicate.AdminLogin {
	return predicate.AdminLogin(sql.FieldEqualFold(FieldEmployeeName, v))
}

// EmployeeNameContainsFold applies the ContainsFold predicate on the "EmployeeName" field.
func EmployeeNameContainsFold(v string) predicate.AdminLogin {
	return predicate.AdminLogin(sql.FieldContainsFold(FieldEmployeeName, v))
}

// EmailidEQ applies the EQ predicate on the "Emailid" field.
func EmailidEQ(v string) predicate.AdminLogin {
	return predicate.AdminLogin(sql.FieldEQ(FieldEmailid, v))
}

// EmailidNEQ applies the NEQ predicate on the "Emailid" field.
func EmailidNEQ(v string) predicate.AdminLogin {
	return predicate.AdminLogin(sql.FieldNEQ(FieldEmailid, v))
}

// EmailidIn applies the In predicate on the "Emailid" field.
func EmailidIn(vs ...string) predicate.AdminLogin {
	return predicate.AdminLogin(sql.FieldIn(FieldEmailid, vs...))
}

// EmailidNotIn applies the NotIn predicate on the "Emailid" field.
func EmailidNotIn(vs ...string) predicate.AdminLogin {
	return predicate.AdminLogin(sql.FieldNotIn(FieldEmailid, vs...))
}

// EmailidGT applies the GT predicate on the "Emailid" field.
func EmailidGT(v string) predicate.AdminLogin {
	return predicate.AdminLogin(sql.FieldGT(FieldEmailid, v))
}

// EmailidGTE applies the GTE predicate on the "Emailid" field.
func EmailidGTE(v string) predicate.AdminLogin {
	return predicate.AdminLogin(sql.FieldGTE(FieldEmailid, v))
}

// EmailidLT applies the LT predicate on the "Emailid" field.
func EmailidLT(v string) predicate.AdminLogin {
	return predicate.AdminLogin(sql.FieldLT(FieldEmailid, v))
}

// EmailidLTE applies the LTE predicate on the "Emailid" field.
func EmailidLTE(v string) predicate.AdminLogin {
	return predicate.AdminLogin(sql.FieldLTE(FieldEmailid, v))
}

// EmailidContains applies the Contains predicate on the "Emailid" field.
func EmailidContains(v string) predicate.AdminLogin {
	return predicate.AdminLogin(sql.FieldContains(FieldEmailid, v))
}

// EmailidHasPrefix applies the HasPrefix predicate on the "Emailid" field.
func EmailidHasPrefix(v string) predicate.AdminLogin {
	return predicate.AdminLogin(sql.FieldHasPrefix(FieldEmailid, v))
}

// EmailidHasSuffix applies the HasSuffix predicate on the "Emailid" field.
func EmailidHasSuffix(v string) predicate.AdminLogin {
	return predicate.AdminLogin(sql.FieldHasSuffix(FieldEmailid, v))
}

// EmailidIsNil applies the IsNil predicate on the "Emailid" field.
func EmailidIsNil() predicate.AdminLogin {
	return predicate.AdminLogin(sql.FieldIsNull(FieldEmailid))
}

// EmailidNotNil applies the NotNil predicate on the "Emailid" field.
func EmailidNotNil() predicate.AdminLogin {
	return predicate.AdminLogin(sql.FieldNotNull(FieldEmailid))
}

// EmailidEqualFold applies the EqualFold predicate on the "Emailid" field.
func EmailidEqualFold(v string) predicate.AdminLogin {
	return predicate.AdminLogin(sql.FieldEqualFold(FieldEmailid, v))
}

// EmailidContainsFold applies the ContainsFold predicate on the "Emailid" field.
func EmailidContainsFold(v string) predicate.AdminLogin {
	return predicate.AdminLogin(sql.FieldContainsFold(FieldEmailid, v))
}

// MobileNumberEQ applies the EQ predicate on the "MobileNumber" field.
func MobileNumberEQ(v int64) predicate.AdminLogin {
	return predicate.AdminLogin(sql.FieldEQ(FieldMobileNumber, v))
}

// MobileNumberNEQ applies the NEQ predicate on the "MobileNumber" field.
func MobileNumberNEQ(v int64) predicate.AdminLogin {
	return predicate.AdminLogin(sql.FieldNEQ(FieldMobileNumber, v))
}

// MobileNumberIn applies the In predicate on the "MobileNumber" field.
func MobileNumberIn(vs ...int64) predicate.AdminLogin {
	return predicate.AdminLogin(sql.FieldIn(FieldMobileNumber, vs...))
}

// MobileNumberNotIn applies the NotIn predicate on the "MobileNumber" field.
func MobileNumberNotIn(vs ...int64) predicate.AdminLogin {
	return predicate.AdminLogin(sql.FieldNotIn(FieldMobileNumber, vs...))
}

// MobileNumberGT applies the GT predicate on the "MobileNumber" field.
func MobileNumberGT(v int64) predicate.AdminLogin {
	return predicate.AdminLogin(sql.FieldGT(FieldMobileNumber, v))
}

// MobileNumberGTE applies the GTE predicate on the "MobileNumber" field.
func MobileNumberGTE(v int64) predicate.AdminLogin {
	return predicate.AdminLogin(sql.FieldGTE(FieldMobileNumber, v))
}

// MobileNumberLT applies the LT predicate on the "MobileNumber" field.
func MobileNumberLT(v int64) predicate.AdminLogin {
	return predicate.AdminLogin(sql.FieldLT(FieldMobileNumber, v))
}

// MobileNumberLTE applies the LTE predicate on the "MobileNumber" field.
func MobileNumberLTE(v int64) predicate.AdminLogin {
	return predicate.AdminLogin(sql.FieldLTE(FieldMobileNumber, v))
}

// MobileNumberIsNil applies the IsNil predicate on the "MobileNumber" field.
func MobileNumberIsNil() predicate.AdminLogin {
	return predicate.AdminLogin(sql.FieldIsNull(FieldMobileNumber))
}

// MobileNumberNotNil applies the NotNil predicate on the "MobileNumber" field.
func MobileNumberNotNil() predicate.AdminLogin {
	return predicate.AdminLogin(sql.FieldNotNull(FieldMobileNumber))
}

// UsernameEQ applies the EQ predicate on the "Username" field.
func UsernameEQ(v string) predicate.AdminLogin {
	return predicate.AdminLogin(sql.FieldEQ(FieldUsername, v))
}

// UsernameNEQ applies the NEQ predicate on the "Username" field.
func UsernameNEQ(v string) predicate.AdminLogin {
	return predicate.AdminLogin(sql.FieldNEQ(FieldUsername, v))
}

// UsernameIn applies the In predicate on the "Username" field.
func UsernameIn(vs ...string) predicate.AdminLogin {
	return predicate.AdminLogin(sql.FieldIn(FieldUsername, vs...))
}

// UsernameNotIn applies the NotIn predicate on the "Username" field.
func UsernameNotIn(vs ...string) predicate.AdminLogin {
	return predicate.AdminLogin(sql.FieldNotIn(FieldUsername, vs...))
}

// UsernameGT applies the GT predicate on the "Username" field.
func UsernameGT(v string) predicate.AdminLogin {
	return predicate.AdminLogin(sql.FieldGT(FieldUsername, v))
}

// UsernameGTE applies the GTE predicate on the "Username" field.
func UsernameGTE(v string) predicate.AdminLogin {
	return predicate.AdminLogin(sql.FieldGTE(FieldUsername, v))
}

// UsernameLT applies the LT predicate on the "Username" field.
func UsernameLT(v string) predicate.AdminLogin {
	return predicate.AdminLogin(sql.FieldLT(FieldUsername, v))
}

// UsernameLTE applies the LTE predicate on the "Username" field.
func UsernameLTE(v string) predicate.AdminLogin {
	return predicate.AdminLogin(sql.FieldLTE(FieldUsername, v))
}

// UsernameContains applies the Contains predicate on the "Username" field.
func UsernameContains(v string) predicate.AdminLogin {
	return predicate.AdminLogin(sql.FieldContains(FieldUsername, v))
}

// UsernameHasPrefix applies the HasPrefix predicate on the "Username" field.
func UsernameHasPrefix(v string) predicate.AdminLogin {
	return predicate.AdminLogin(sql.FieldHasPrefix(FieldUsername, v))
}

// UsernameHasSuffix applies the HasSuffix predicate on the "Username" field.
func UsernameHasSuffix(v string) predicate.AdminLogin {
	return predicate.AdminLogin(sql.FieldHasSuffix(FieldUsername, v))
}

// UsernameEqualFold applies the EqualFold predicate on the "Username" field.
func UsernameEqualFold(v string) predicate.AdminLogin {
	return predicate.AdminLogin(sql.FieldEqualFold(FieldUsername, v))
}

// UsernameContainsFold applies the ContainsFold predicate on the "Username" field.
func UsernameContainsFold(v string) predicate.AdminLogin {
	return predicate.AdminLogin(sql.FieldContainsFold(FieldUsername, v))
}

// OTPEQ applies the EQ predicate on the "OTP" field.
func OTPEQ(v int32) predicate.AdminLogin {
	return predicate.AdminLogin(sql.FieldEQ(FieldOTP, v))
}

// OTPNEQ applies the NEQ predicate on the "OTP" field.
func OTPNEQ(v int32) predicate.AdminLogin {
	return predicate.AdminLogin(sql.FieldNEQ(FieldOTP, v))
}

// OTPIn applies the In predicate on the "OTP" field.
func OTPIn(vs ...int32) predicate.AdminLogin {
	return predicate.AdminLogin(sql.FieldIn(FieldOTP, vs...))
}

// OTPNotIn applies the NotIn predicate on the "OTP" field.
func OTPNotIn(vs ...int32) predicate.AdminLogin {
	return predicate.AdminLogin(sql.FieldNotIn(FieldOTP, vs...))
}

// OTPGT applies the GT predicate on the "OTP" field.
func OTPGT(v int32) predicate.AdminLogin {
	return predicate.AdminLogin(sql.FieldGT(FieldOTP, v))
}

// OTPGTE applies the GTE predicate on the "OTP" field.
func OTPGTE(v int32) predicate.AdminLogin {
	return predicate.AdminLogin(sql.FieldGTE(FieldOTP, v))
}

// OTPLT applies the LT predicate on the "OTP" field.
func OTPLT(v int32) predicate.AdminLogin {
	return predicate.AdminLogin(sql.FieldLT(FieldOTP, v))
}

// OTPLTE applies the LTE predicate on the "OTP" field.
func OTPLTE(v int32) predicate.AdminLogin {
	return predicate.AdminLogin(sql.FieldLTE(FieldOTP, v))
}

// OTPIsNil applies the IsNil predicate on the "OTP" field.
func OTPIsNil() predicate.AdminLogin {
	return predicate.AdminLogin(sql.FieldIsNull(FieldOTP))
}

// OTPNotNil applies the NotNil predicate on the "OTP" field.
func OTPNotNil() predicate.AdminLogin {
	return predicate.AdminLogin(sql.FieldNotNull(FieldOTP))
}

// PasswordEQ applies the EQ predicate on the "Password" field.
func PasswordEQ(v string) predicate.AdminLogin {
	return predicate.AdminLogin(sql.FieldEQ(FieldPassword, v))
}

// PasswordNEQ applies the NEQ predicate on the "Password" field.
func PasswordNEQ(v string) predicate.AdminLogin {
	return predicate.AdminLogin(sql.FieldNEQ(FieldPassword, v))
}

// PasswordIn applies the In predicate on the "Password" field.
func PasswordIn(vs ...string) predicate.AdminLogin {
	return predicate.AdminLogin(sql.FieldIn(FieldPassword, vs...))
}

// PasswordNotIn applies the NotIn predicate on the "Password" field.
func PasswordNotIn(vs ...string) predicate.AdminLogin {
	return predicate.AdminLogin(sql.FieldNotIn(FieldPassword, vs...))
}

// PasswordGT applies the GT predicate on the "Password" field.
func PasswordGT(v string) predicate.AdminLogin {
	return predicate.AdminLogin(sql.FieldGT(FieldPassword, v))
}

// PasswordGTE applies the GTE predicate on the "Password" field.
func PasswordGTE(v string) predicate.AdminLogin {
	return predicate.AdminLogin(sql.FieldGTE(FieldPassword, v))
}

// PasswordLT applies the LT predicate on the "Password" field.
func PasswordLT(v string) predicate.AdminLogin {
	return predicate.AdminLogin(sql.FieldLT(FieldPassword, v))
}

// PasswordLTE applies the LTE predicate on the "Password" field.
func PasswordLTE(v string) predicate.AdminLogin {
	return predicate.AdminLogin(sql.FieldLTE(FieldPassword, v))
}

// PasswordContains applies the Contains predicate on the "Password" field.
func PasswordContains(v string) predicate.AdminLogin {
	return predicate.AdminLogin(sql.FieldContains(FieldPassword, v))
}

// PasswordHasPrefix applies the HasPrefix predicate on the "Password" field.
func PasswordHasPrefix(v string) predicate.AdminLogin {
	return predicate.AdminLogin(sql.FieldHasPrefix(FieldPassword, v))
}

// PasswordHasSuffix applies the HasSuffix predicate on the "Password" field.
func PasswordHasSuffix(v string) predicate.AdminLogin {
	return predicate.AdminLogin(sql.FieldHasSuffix(FieldPassword, v))
}

// PasswordEqualFold applies the EqualFold predicate on the "Password" field.
func PasswordEqualFold(v string) predicate.AdminLogin {
	return predicate.AdminLogin(sql.FieldEqualFold(FieldPassword, v))
}

// PasswordContainsFold applies the ContainsFold predicate on the "Password" field.
func PasswordContainsFold(v string) predicate.AdminLogin {
	return predicate.AdminLogin(sql.FieldContainsFold(FieldPassword, v))
}

// VerifyRemarksEQ applies the EQ predicate on the "VerifyRemarks" field.
func VerifyRemarksEQ(v string) predicate.AdminLogin {
	return predicate.AdminLogin(sql.FieldEQ(FieldVerifyRemarks, v))
}

// VerifyRemarksNEQ applies the NEQ predicate on the "VerifyRemarks" field.
func VerifyRemarksNEQ(v string) predicate.AdminLogin {
	return predicate.AdminLogin(sql.FieldNEQ(FieldVerifyRemarks, v))
}

// VerifyRemarksIn applies the In predicate on the "VerifyRemarks" field.
func VerifyRemarksIn(vs ...string) predicate.AdminLogin {
	return predicate.AdminLogin(sql.FieldIn(FieldVerifyRemarks, vs...))
}

// VerifyRemarksNotIn applies the NotIn predicate on the "VerifyRemarks" field.
func VerifyRemarksNotIn(vs ...string) predicate.AdminLogin {
	return predicate.AdminLogin(sql.FieldNotIn(FieldVerifyRemarks, vs...))
}

// VerifyRemarksGT applies the GT predicate on the "VerifyRemarks" field.
func VerifyRemarksGT(v string) predicate.AdminLogin {
	return predicate.AdminLogin(sql.FieldGT(FieldVerifyRemarks, v))
}

// VerifyRemarksGTE applies the GTE predicate on the "VerifyRemarks" field.
func VerifyRemarksGTE(v string) predicate.AdminLogin {
	return predicate.AdminLogin(sql.FieldGTE(FieldVerifyRemarks, v))
}

// VerifyRemarksLT applies the LT predicate on the "VerifyRemarks" field.
func VerifyRemarksLT(v string) predicate.AdminLogin {
	return predicate.AdminLogin(sql.FieldLT(FieldVerifyRemarks, v))
}

// VerifyRemarksLTE applies the LTE predicate on the "VerifyRemarks" field.
func VerifyRemarksLTE(v string) predicate.AdminLogin {
	return predicate.AdminLogin(sql.FieldLTE(FieldVerifyRemarks, v))
}

// VerifyRemarksContains applies the Contains predicate on the "VerifyRemarks" field.
func VerifyRemarksContains(v string) predicate.AdminLogin {
	return predicate.AdminLogin(sql.FieldContains(FieldVerifyRemarks, v))
}

// VerifyRemarksHasPrefix applies the HasPrefix predicate on the "VerifyRemarks" field.
func VerifyRemarksHasPrefix(v string) predicate.AdminLogin {
	return predicate.AdminLogin(sql.FieldHasPrefix(FieldVerifyRemarks, v))
}

// VerifyRemarksHasSuffix applies the HasSuffix predicate on the "VerifyRemarks" field.
func VerifyRemarksHasSuffix(v string) predicate.AdminLogin {
	return predicate.AdminLogin(sql.FieldHasSuffix(FieldVerifyRemarks, v))
}

// VerifyRemarksIsNil applies the IsNil predicate on the "VerifyRemarks" field.
func VerifyRemarksIsNil() predicate.AdminLogin {
	return predicate.AdminLogin(sql.FieldIsNull(FieldVerifyRemarks))
}

// VerifyRemarksNotNil applies the NotNil predicate on the "VerifyRemarks" field.
func VerifyRemarksNotNil() predicate.AdminLogin {
	return predicate.AdminLogin(sql.FieldNotNull(FieldVerifyRemarks))
}

// VerifyRemarksEqualFold applies the EqualFold predicate on the "VerifyRemarks" field.
func VerifyRemarksEqualFold(v string) predicate.AdminLogin {
	return predicate.AdminLogin(sql.FieldEqualFold(FieldVerifyRemarks, v))
}

// VerifyRemarksContainsFold applies the ContainsFold predicate on the "VerifyRemarks" field.
func VerifyRemarksContainsFold(v string) predicate.AdminLogin {
	return predicate.AdminLogin(sql.FieldContainsFold(FieldVerifyRemarks, v))
}

// HasRoleMaster applies the HasEdge predicate on the "role_master" edge.
func HasRoleMaster() predicate.AdminLogin {
	return predicate.AdminLogin(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, RoleMasterTable, RoleMasterColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRoleMasterWith applies the HasEdge predicate on the "role_master" edge with a given conditions (other predicates).
func HasRoleMasterWith(preds ...predicate.RoleMaster) predicate.AdminLogin {
	return predicate.AdminLogin(func(s *sql.Selector) {
		step := newRoleMasterStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasLogData applies the HasEdge predicate on the "LogData" edge.
func HasLogData() predicate.AdminLogin {
	return predicate.AdminLogin(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, LogDataTable, LogDataColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasLogDataWith applies the HasEdge predicate on the "LogData" edge with a given conditions (other predicates).
func HasLogDataWith(preds ...predicate.Logs) predicate.AdminLogin {
	return predicate.AdminLogin(func(s *sql.Selector) {
		step := newLogDataStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.AdminLogin) predicate.AdminLogin {
	return predicate.AdminLogin(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.AdminLogin) predicate.AdminLogin {
	return predicate.AdminLogin(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.AdminLogin) predicate.AdminLogin {
	return predicate.AdminLogin(func(s *sql.Selector) {
		p(s.Not())
	})
}
