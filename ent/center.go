// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"recruit/ent/center"
	"recruit/ent/exam"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Center is the model entity for the Center schema.
type Center struct {
	config `json:"-"`
	// ID of the ent.
	ID int32 `json:"id,omitempty"`
	// CityID holds the value of the "CityID" field.
	CityID int32 `json:"CityID,omitempty"`
	// NodalOfficerCode holds the value of the "NodalOfficerCode" field.
	NodalOfficerCode int32 `json:"NodalOfficerCode,omitempty"`
	// ExamCenterName holds the value of the "ExamCenterName" field.
	ExamCenterName string `json:"ExamCenterName,omitempty"`
	// ExamCode holds the value of the "ExamCode" field.
	ExamCode int32 `json:"ExamCode,omitempty"`
	// RegionID holds the value of the "RegionID" field.
	RegionID int32 `json:"RegionID,omitempty"`
	// CircleID holds the value of the "CircleID" field.
	CircleID int32 `json:"CircleID,omitempty"`
	// DivisionID holds the value of the "DivisionID" field.
	DivisionID int32 `json:"DivisionID,omitempty"`
	// FacilityID holds the value of the "FacilityID" field.
	FacilityID int32 `json:"FacilityID,omitempty"`
	// ExamNameCode holds the value of the "ExamNameCode" field.
	ExamNameCode string `json:"ExamNameCode,omitempty"`
	// ExamName holds the value of the "ExamName" field.
	ExamName string `json:"ExamName,omitempty"`
	// NAUserName holds the value of the "NAUserName" field.
	NAUserName string `json:"NAUserName,omitempty"`
	// NodalOfficeFacilityId holds the value of the "NodalOfficeFacilityId" field.
	NodalOfficeFacilityId string `json:"NodalOfficeFacilityId,omitempty"`
	// AdminCircleOfficeID holds the value of the "AdminCircleOfficeID" field.
	AdminCircleOfficeID string `json:"AdminCircleOfficeID,omitempty"`
	// Address holds the value of the "Address" field.
	Address string `json:"Address,omitempty"`
	// Landmark holds the value of the "Landmark" field.
	Landmark string `json:"Landmark,omitempty"`
	// CenterCityName holds the value of the "CenterCityName" field.
	CenterCityName string `json:"CenterCityName,omitempty"`
	// Pincode holds the value of the "Pincode" field.
	Pincode int32 `json:"Pincode,omitempty"`
	// MaxSeats holds the value of the "MaxSeats" field.
	MaxSeats int32 `json:"MaxSeats,omitempty"`
	// NoAlloted holds the value of the "NoAlloted" field.
	NoAlloted int32 `json:"NoAlloted,omitempty"`
	// PendingSeats holds the value of the "PendingSeats" field.
	PendingSeats int32 `json:"PendingSeats,omitempty"`
	// Status holds the value of the "Status" field.
	Status bool `json:"Status,omitempty"`
	// ExamYear holds the value of the "ExamYear" field.
	ExamYear string `json:"ExamYear,omitempty"`
	// ConductedBy holds the value of the "ConductedBy" field.
	ConductedBy string `json:"ConductedBy,omitempty"`
	// ConductedByFacilityID holds the value of the "ConductedByFacilityID" field.
	ConductedByFacilityID string `json:"ConductedByFacilityID,omitempty"`
	// UpdatedAt holds the value of the "UpdatedAt" field.
	UpdatedAt time.Time `json:"UpdatedAt,omitempty"`
	// UpdatedBy holds the value of the "UpdatedBy" field.
	UpdatedBy string `json:"UpdatedBy,omitempty"`
	// Papers holds the value of the "Papers" field.
	Papers []interface{} `json:"Papers,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CenterQuery when eager-loading is set.
	Edges               CenterEdges `json:"edges"`
	exam_papers_centers *int32
	selectValues        sql.SelectValues
}

// CenterEdges holds the relations/edges for other nodes in the graph.
type CenterEdges struct {
	// Applications holds the value of the applications edge.
	Applications []*Application `json:"applications,omitempty"`
	// ExamCentresRef holds the value of the ExamCentresRef edge.
	ExamCentresRef []*Exam_Applications_IP `json:"ExamCentresRef,omitempty"`
	// ExamCentresRefPS holds the value of the ExamCentresRefPS edge.
	ExamCentresRefPS []*Exam_Applications_PS `json:"ExamCentresRefPS,omitempty"`
	// ExamCentresRefGDSPA holds the value of the ExamCentresRefGDSPA edge.
	ExamCentresRefGDSPA []*Exam_Applications_GDSPA `json:"ExamCentresRefGDSPA,omitempty"`
	// ExamCentresRefPMPA holds the value of the ExamCentresRefPMPA edge.
	ExamCentresRefPMPA []*Exam_Applications_PMPA `json:"ExamCentresRefPMPA,omitempty"`
	// ExamCentresRefGDSPM holds the value of the ExamCentresRefGDSPM edge.
	ExamCentresRefGDSPM []*Exam_Applications_GDSPM `json:"ExamCentresRefGDSPM,omitempty"`
	// Examscentres holds the value of the Examscentres edge.
	Examscentres []*ExamCityCenter `json:"Examscentres,omitempty"`
	// ExamCentresRefMTSPMMG holds the value of the ExamCentresRefMTSPMMG edge.
	ExamCentresRefMTSPMMG []*Exam_Application_MTSPMMG `json:"ExamCentresRefMTSPMMG,omitempty"`
	// ExaCenterHallRef holds the value of the ExaCenterHallRef edge.
	ExaCenterHallRef []*ExamCenterHall `json:"ExaCenterHallRef,omitempty"`
	// Centresip holds the value of the centresip edge.
	Centresip *Exam `json:"centresip,omitempty"`
	// LogData holds the value of the LogData edge.
	LogData []*Logs `json:"LogData,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [11]bool
}

// ApplicationsOrErr returns the Applications value or an error if the edge
// was not loaded in eager-loading.
func (e CenterEdges) ApplicationsOrErr() ([]*Application, error) {
	if e.loadedTypes[0] {
		return e.Applications, nil
	}
	return nil, &NotLoadedError{edge: "applications"}
}

// ExamCentresRefOrErr returns the ExamCentresRef value or an error if the edge
// was not loaded in eager-loading.
func (e CenterEdges) ExamCentresRefOrErr() ([]*Exam_Applications_IP, error) {
	if e.loadedTypes[1] {
		return e.ExamCentresRef, nil
	}
	return nil, &NotLoadedError{edge: "ExamCentresRef"}
}

// ExamCentresRefPSOrErr returns the ExamCentresRefPS value or an error if the edge
// was not loaded in eager-loading.
func (e CenterEdges) ExamCentresRefPSOrErr() ([]*Exam_Applications_PS, error) {
	if e.loadedTypes[2] {
		return e.ExamCentresRefPS, nil
	}
	return nil, &NotLoadedError{edge: "ExamCentresRefPS"}
}

// ExamCentresRefGDSPAOrErr returns the ExamCentresRefGDSPA value or an error if the edge
// was not loaded in eager-loading.
func (e CenterEdges) ExamCentresRefGDSPAOrErr() ([]*Exam_Applications_GDSPA, error) {
	if e.loadedTypes[3] {
		return e.ExamCentresRefGDSPA, nil
	}
	return nil, &NotLoadedError{edge: "ExamCentresRefGDSPA"}
}

// ExamCentresRefPMPAOrErr returns the ExamCentresRefPMPA value or an error if the edge
// was not loaded in eager-loading.
func (e CenterEdges) ExamCentresRefPMPAOrErr() ([]*Exam_Applications_PMPA, error) {
	if e.loadedTypes[4] {
		return e.ExamCentresRefPMPA, nil
	}
	return nil, &NotLoadedError{edge: "ExamCentresRefPMPA"}
}

// ExamCentresRefGDSPMOrErr returns the ExamCentresRefGDSPM value or an error if the edge
// was not loaded in eager-loading.
func (e CenterEdges) ExamCentresRefGDSPMOrErr() ([]*Exam_Applications_GDSPM, error) {
	if e.loadedTypes[5] {
		return e.ExamCentresRefGDSPM, nil
	}
	return nil, &NotLoadedError{edge: "ExamCentresRefGDSPM"}
}

// ExamscentresOrErr returns the Examscentres value or an error if the edge
// was not loaded in eager-loading.
func (e CenterEdges) ExamscentresOrErr() ([]*ExamCityCenter, error) {
	if e.loadedTypes[6] {
		return e.Examscentres, nil
	}
	return nil, &NotLoadedError{edge: "Examscentres"}
}

// ExamCentresRefMTSPMMGOrErr returns the ExamCentresRefMTSPMMG value or an error if the edge
// was not loaded in eager-loading.
func (e CenterEdges) ExamCentresRefMTSPMMGOrErr() ([]*Exam_Application_MTSPMMG, error) {
	if e.loadedTypes[7] {
		return e.ExamCentresRefMTSPMMG, nil
	}
	return nil, &NotLoadedError{edge: "ExamCentresRefMTSPMMG"}
}

// ExaCenterHallRefOrErr returns the ExaCenterHallRef value or an error if the edge
// was not loaded in eager-loading.
func (e CenterEdges) ExaCenterHallRefOrErr() ([]*ExamCenterHall, error) {
	if e.loadedTypes[8] {
		return e.ExaCenterHallRef, nil
	}
	return nil, &NotLoadedError{edge: "ExaCenterHallRef"}
}

// CentresipOrErr returns the Centresip value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CenterEdges) CentresipOrErr() (*Exam, error) {
	if e.loadedTypes[9] {
		if e.Centresip == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: exam.Label}
		}
		return e.Centresip, nil
	}
	return nil, &NotLoadedError{edge: "centresip"}
}

// LogDataOrErr returns the LogData value or an error if the edge
// was not loaded in eager-loading.
func (e CenterEdges) LogDataOrErr() ([]*Logs, error) {
	if e.loadedTypes[10] {
		return e.LogData, nil
	}
	return nil, &NotLoadedError{edge: "LogData"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Center) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case center.FieldPapers:
			values[i] = new([]byte)
		case center.FieldStatus:
			values[i] = new(sql.NullBool)
		case center.FieldID, center.FieldCityID, center.FieldNodalOfficerCode, center.FieldExamCode, center.FieldRegionID, center.FieldCircleID, center.FieldDivisionID, center.FieldFacilityID, center.FieldPincode, center.FieldMaxSeats, center.FieldNoAlloted, center.FieldPendingSeats:
			values[i] = new(sql.NullInt64)
		case center.FieldExamCenterName, center.FieldExamNameCode, center.FieldExamName, center.FieldNAUserName, center.FieldNodalOfficeFacilityId, center.FieldAdminCircleOfficeID, center.FieldAddress, center.FieldLandmark, center.FieldCenterCityName, center.FieldExamYear, center.FieldConductedBy, center.FieldConductedByFacilityID, center.FieldUpdatedBy:
			values[i] = new(sql.NullString)
		case center.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case center.ForeignKeys[0]: // exam_papers_centers
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Center fields.
func (c *Center) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case center.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			c.ID = int32(value.Int64)
		case center.FieldCityID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field CityID", values[i])
			} else if value.Valid {
				c.CityID = int32(value.Int64)
			}
		case center.FieldNodalOfficerCode:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field NodalOfficerCode", values[i])
			} else if value.Valid {
				c.NodalOfficerCode = int32(value.Int64)
			}
		case center.FieldExamCenterName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ExamCenterName", values[i])
			} else if value.Valid {
				c.ExamCenterName = value.String
			}
		case center.FieldExamCode:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field ExamCode", values[i])
			} else if value.Valid {
				c.ExamCode = int32(value.Int64)
			}
		case center.FieldRegionID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field RegionID", values[i])
			} else if value.Valid {
				c.RegionID = int32(value.Int64)
			}
		case center.FieldCircleID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field CircleID", values[i])
			} else if value.Valid {
				c.CircleID = int32(value.Int64)
			}
		case center.FieldDivisionID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field DivisionID", values[i])
			} else if value.Valid {
				c.DivisionID = int32(value.Int64)
			}
		case center.FieldFacilityID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field FacilityID", values[i])
			} else if value.Valid {
				c.FacilityID = int32(value.Int64)
			}
		case center.FieldExamNameCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ExamNameCode", values[i])
			} else if value.Valid {
				c.ExamNameCode = value.String
			}
		case center.FieldExamName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ExamName", values[i])
			} else if value.Valid {
				c.ExamName = value.String
			}
		case center.FieldNAUserName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field NAUserName", values[i])
			} else if value.Valid {
				c.NAUserName = value.String
			}
		case center.FieldNodalOfficeFacilityId:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field NodalOfficeFacilityId", values[i])
			} else if value.Valid {
				c.NodalOfficeFacilityId = value.String
			}
		case center.FieldAdminCircleOfficeID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field AdminCircleOfficeID", values[i])
			} else if value.Valid {
				c.AdminCircleOfficeID = value.String
			}
		case center.FieldAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Address", values[i])
			} else if value.Valid {
				c.Address = value.String
			}
		case center.FieldLandmark:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Landmark", values[i])
			} else if value.Valid {
				c.Landmark = value.String
			}
		case center.FieldCenterCityName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field CenterCityName", values[i])
			} else if value.Valid {
				c.CenterCityName = value.String
			}
		case center.FieldPincode:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field Pincode", values[i])
			} else if value.Valid {
				c.Pincode = int32(value.Int64)
			}
		case center.FieldMaxSeats:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field MaxSeats", values[i])
			} else if value.Valid {
				c.MaxSeats = int32(value.Int64)
			}
		case center.FieldNoAlloted:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field NoAlloted", values[i])
			} else if value.Valid {
				c.NoAlloted = int32(value.Int64)
			}
		case center.FieldPendingSeats:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field PendingSeats", values[i])
			} else if value.Valid {
				c.PendingSeats = int32(value.Int64)
			}
		case center.FieldStatus:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field Status", values[i])
			} else if value.Valid {
				c.Status = value.Bool
			}
		case center.FieldExamYear:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ExamYear", values[i])
			} else if value.Valid {
				c.ExamYear = value.String
			}
		case center.FieldConductedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ConductedBy", values[i])
			} else if value.Valid {
				c.ConductedBy = value.String
			}
		case center.FieldConductedByFacilityID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ConductedByFacilityID", values[i])
			} else if value.Valid {
				c.ConductedByFacilityID = value.String
			}
		case center.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field UpdatedAt", values[i])
			} else if value.Valid {
				c.UpdatedAt = value.Time
			}
		case center.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field UpdatedBy", values[i])
			} else if value.Valid {
				c.UpdatedBy = value.String
			}
		case center.FieldPapers:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field Papers", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &c.Papers); err != nil {
					return fmt.Errorf("unmarshal field Papers: %w", err)
				}
			}
		case center.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field exam_papers_centers", value)
			} else if value.Valid {
				c.exam_papers_centers = new(int32)
				*c.exam_papers_centers = int32(value.Int64)
			}
		default:
			c.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Center.
// This includes values selected through modifiers, order, etc.
func (c *Center) Value(name string) (ent.Value, error) {
	return c.selectValues.Get(name)
}

// QueryApplications queries the "applications" edge of the Center entity.
func (c *Center) QueryApplications() *ApplicationQuery {
	return NewCenterClient(c.config).QueryApplications(c)
}

// QueryExamCentresRef queries the "ExamCentresRef" edge of the Center entity.
func (c *Center) QueryExamCentresRef() *ExamApplicationsIPQuery {
	return NewCenterClient(c.config).QueryExamCentresRef(c)
}

// QueryExamCentresRefPS queries the "ExamCentresRefPS" edge of the Center entity.
func (c *Center) QueryExamCentresRefPS() *ExamApplicationsPSQuery {
	return NewCenterClient(c.config).QueryExamCentresRefPS(c)
}

// QueryExamCentresRefGDSPA queries the "ExamCentresRefGDSPA" edge of the Center entity.
func (c *Center) QueryExamCentresRefGDSPA() *ExamApplicationsGDSPAQuery {
	return NewCenterClient(c.config).QueryExamCentresRefGDSPA(c)
}

// QueryExamCentresRefPMPA queries the "ExamCentresRefPMPA" edge of the Center entity.
func (c *Center) QueryExamCentresRefPMPA() *ExamApplicationsPMPAQuery {
	return NewCenterClient(c.config).QueryExamCentresRefPMPA(c)
}

// QueryExamCentresRefGDSPM queries the "ExamCentresRefGDSPM" edge of the Center entity.
func (c *Center) QueryExamCentresRefGDSPM() *ExamApplicationsGDSPMQuery {
	return NewCenterClient(c.config).QueryExamCentresRefGDSPM(c)
}

// QueryExamscentres queries the "Examscentres" edge of the Center entity.
func (c *Center) QueryExamscentres() *ExamCityCenterQuery {
	return NewCenterClient(c.config).QueryExamscentres(c)
}

// QueryExamCentresRefMTSPMMG queries the "ExamCentresRefMTSPMMG" edge of the Center entity.
func (c *Center) QueryExamCentresRefMTSPMMG() *ExamApplicationMTSPMMGQuery {
	return NewCenterClient(c.config).QueryExamCentresRefMTSPMMG(c)
}

// QueryExaCenterHallRef queries the "ExaCenterHallRef" edge of the Center entity.
func (c *Center) QueryExaCenterHallRef() *ExamCenterHallQuery {
	return NewCenterClient(c.config).QueryExaCenterHallRef(c)
}

// QueryCentresip queries the "centresip" edge of the Center entity.
func (c *Center) QueryCentresip() *ExamQuery {
	return NewCenterClient(c.config).QueryCentresip(c)
}

// QueryLogData queries the "LogData" edge of the Center entity.
func (c *Center) QueryLogData() *LogsQuery {
	return NewCenterClient(c.config).QueryLogData(c)
}

// Update returns a builder for updating this Center.
// Note that you need to call Center.Unwrap() before calling this method if this Center
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Center) Update() *CenterUpdateOne {
	return NewCenterClient(c.config).UpdateOne(c)
}

// Unwrap unwraps the Center entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *Center) Unwrap() *Center {
	_tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Center is not a transactional entity")
	}
	c.config.driver = _tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Center) String() string {
	var builder strings.Builder
	builder.WriteString("Center(")
	builder.WriteString(fmt.Sprintf("id=%v, ", c.ID))
	builder.WriteString("CityID=")
	builder.WriteString(fmt.Sprintf("%v", c.CityID))
	builder.WriteString(", ")
	builder.WriteString("NodalOfficerCode=")
	builder.WriteString(fmt.Sprintf("%v", c.NodalOfficerCode))
	builder.WriteString(", ")
	builder.WriteString("ExamCenterName=")
	builder.WriteString(c.ExamCenterName)
	builder.WriteString(", ")
	builder.WriteString("ExamCode=")
	builder.WriteString(fmt.Sprintf("%v", c.ExamCode))
	builder.WriteString(", ")
	builder.WriteString("RegionID=")
	builder.WriteString(fmt.Sprintf("%v", c.RegionID))
	builder.WriteString(", ")
	builder.WriteString("CircleID=")
	builder.WriteString(fmt.Sprintf("%v", c.CircleID))
	builder.WriteString(", ")
	builder.WriteString("DivisionID=")
	builder.WriteString(fmt.Sprintf("%v", c.DivisionID))
	builder.WriteString(", ")
	builder.WriteString("FacilityID=")
	builder.WriteString(fmt.Sprintf("%v", c.FacilityID))
	builder.WriteString(", ")
	builder.WriteString("ExamNameCode=")
	builder.WriteString(c.ExamNameCode)
	builder.WriteString(", ")
	builder.WriteString("ExamName=")
	builder.WriteString(c.ExamName)
	builder.WriteString(", ")
	builder.WriteString("NAUserName=")
	builder.WriteString(c.NAUserName)
	builder.WriteString(", ")
	builder.WriteString("NodalOfficeFacilityId=")
	builder.WriteString(c.NodalOfficeFacilityId)
	builder.WriteString(", ")
	builder.WriteString("AdminCircleOfficeID=")
	builder.WriteString(c.AdminCircleOfficeID)
	builder.WriteString(", ")
	builder.WriteString("Address=")
	builder.WriteString(c.Address)
	builder.WriteString(", ")
	builder.WriteString("Landmark=")
	builder.WriteString(c.Landmark)
	builder.WriteString(", ")
	builder.WriteString("CenterCityName=")
	builder.WriteString(c.CenterCityName)
	builder.WriteString(", ")
	builder.WriteString("Pincode=")
	builder.WriteString(fmt.Sprintf("%v", c.Pincode))
	builder.WriteString(", ")
	builder.WriteString("MaxSeats=")
	builder.WriteString(fmt.Sprintf("%v", c.MaxSeats))
	builder.WriteString(", ")
	builder.WriteString("NoAlloted=")
	builder.WriteString(fmt.Sprintf("%v", c.NoAlloted))
	builder.WriteString(", ")
	builder.WriteString("PendingSeats=")
	builder.WriteString(fmt.Sprintf("%v", c.PendingSeats))
	builder.WriteString(", ")
	builder.WriteString("Status=")
	builder.WriteString(fmt.Sprintf("%v", c.Status))
	builder.WriteString(", ")
	builder.WriteString("ExamYear=")
	builder.WriteString(c.ExamYear)
	builder.WriteString(", ")
	builder.WriteString("ConductedBy=")
	builder.WriteString(c.ConductedBy)
	builder.WriteString(", ")
	builder.WriteString("ConductedByFacilityID=")
	builder.WriteString(c.ConductedByFacilityID)
	builder.WriteString(", ")
	builder.WriteString("UpdatedAt=")
	builder.WriteString(c.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("UpdatedBy=")
	builder.WriteString(c.UpdatedBy)
	builder.WriteString(", ")
	builder.WriteString("Papers=")
	builder.WriteString(fmt.Sprintf("%v", c.Papers))
	builder.WriteByte(')')
	return builder.String()
}

// Centers is a parsable slice of Center.
type Centers []*Center
