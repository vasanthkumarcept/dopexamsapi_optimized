// Code generated by ent, DO NOT EDIT.

package employees

import (
	"fmt"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the employees type in the database.
	Label = "employees"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "RegistrationID"
	// FieldEmployeedID holds the string denoting the employeedid field in the database.
	FieldEmployeedID = "employeed_id"
	// FieldIDVerified holds the string denoting the idverified field in the database.
	FieldIDVerified = "id_verified"
	// FieldIDRemStatus holds the string denoting the idremstatus field in the database.
	FieldIDRemStatus = "id_rem_status"
	// FieldIDRemarks holds the string denoting the idremarks field in the database.
	FieldIDRemarks = "id_remarks"
	// FieldEmployeeName holds the string denoting the employeename field in the database.
	FieldEmployeeName = "employee_name"
	// FieldNameVerified holds the string denoting the nameverified field in the database.
	FieldNameVerified = "name_verified"
	// FieldNameRemStatus holds the string denoting the nameremstatus field in the database.
	FieldNameRemStatus = "name_rem_status"
	// FieldNameRemarks holds the string denoting the nameremarks field in the database.
	FieldNameRemarks = "name_remarks"
	// FieldEmployeeFathersName holds the string denoting the employeefathersname field in the database.
	FieldEmployeeFathersName = "employee_fathers_name"
	// FieldFathersNameVerified holds the string denoting the fathersnameverified field in the database.
	FieldFathersNameVerified = "fathers_name_verified"
	// FieldFathersNameRemStatus holds the string denoting the fathersnameremstatus field in the database.
	FieldFathersNameRemStatus = "fathers_name_rem_status"
	// FieldFathersNameRemarks holds the string denoting the fathersnameremarks field in the database.
	FieldFathersNameRemarks = "fathers_name_remarks"
	// FieldDOB holds the string denoting the dob field in the database.
	FieldDOB = "dob"
	// FieldDOBVerified holds the string denoting the dobverified field in the database.
	FieldDOBVerified = "dob_verified"
	// FieldDOBRemStatus holds the string denoting the dobremstatus field in the database.
	FieldDOBRemStatus = "dob_rem_status"
	// FieldDOBRemarks holds the string denoting the dobremarks field in the database.
	FieldDOBRemarks = "dob_remarks"
	// FieldGender holds the string denoting the gender field in the database.
	FieldGender = "gender"
	// FieldGenderVerified holds the string denoting the genderverified field in the database.
	FieldGenderVerified = "gender_verified"
	// FieldGenderRemStatus holds the string denoting the genderremstatus field in the database.
	FieldGenderRemStatus = "gender_rem_status"
	// FieldGenderRemarks holds the string denoting the genderremarks field in the database.
	FieldGenderRemarks = "gender_remarks"
	// FieldMobileNumber holds the string denoting the mobilenumber field in the database.
	FieldMobileNumber = "mobile_number"
	// FieldMobileNumberVerified holds the string denoting the mobilenumberverified field in the database.
	FieldMobileNumberVerified = "mobile_number_verified"
	// FieldMobileNumberRemStatus holds the string denoting the mobilenumberremstatus field in the database.
	FieldMobileNumberRemStatus = "mobile_number_rem_status"
	// FieldMobileNumberRemarks holds the string denoting the mobilenumberremarks field in the database.
	FieldMobileNumberRemarks = "mobile_number_remarks"
	// FieldEmailID holds the string denoting the emailid field in the database.
	FieldEmailID = "email_id"
	// FieldEmailIDVerified holds the string denoting the emailidverified field in the database.
	FieldEmailIDVerified = "email_id_verified"
	// FieldEmailIDRemStatus holds the string denoting the emailidremstatus field in the database.
	FieldEmailIDRemStatus = "email_id_rem_status"
	// FieldEmailIDRemarks holds the string denoting the emailidremarks field in the database.
	FieldEmailIDRemarks = "email_id_remarks"
	// FieldCategoryid holds the string denoting the categoryid field in the database.
	FieldCategoryid = "categoryid"
	// FieldEmployeeCategoryCode holds the string denoting the employeecategorycode field in the database.
	FieldEmployeeCategoryCode = "employee_category_code"
	// FieldEmployeeCategory holds the string denoting the employeecategory field in the database.
	FieldEmployeeCategory = "employee_category"
	// FieldEmployeeCategoryCodeVerified holds the string denoting the employeecategorycodeverified field in the database.
	FieldEmployeeCategoryCodeVerified = "employee_category_code_verified"
	// FieldEmployeeCategoryCodeRemStatus holds the string denoting the employeecategorycoderemstatus field in the database.
	FieldEmployeeCategoryCodeRemStatus = "employee_category_code_rem_status"
	// FieldEmployeeCategoryCodeRemarks holds the string denoting the employeecategorycoderemarks field in the database.
	FieldEmployeeCategoryCodeRemarks = "employee_category_code_remarks"
	// FieldWithDisability holds the string denoting the withdisability field in the database.
	FieldWithDisability = "with_disability"
	// FieldWithDisabilityVerified holds the string denoting the withdisabilityverified field in the database.
	FieldWithDisabilityVerified = "with_disability_verified"
	// FieldWithDisabilityRemStatus holds the string denoting the withdisabilityremstatus field in the database.
	FieldWithDisabilityRemStatus = "with_disability_rem_status"
	// FieldWithDisabilityRemarks holds the string denoting the withdisabilityremarks field in the database.
	FieldWithDisabilityRemarks = "with_disability_remarks"
	// FieldDisabilityType holds the string denoting the disabilitytype field in the database.
	FieldDisabilityType = "disability_type"
	// FieldDisabilityTypeVerified holds the string denoting the disabilitytypeverified field in the database.
	FieldDisabilityTypeVerified = "disability_type_verified"
	// FieldDisabilityTypeRemStatus holds the string denoting the disabilitytyperemstatus field in the database.
	FieldDisabilityTypeRemStatus = "disability_type_rem_status"
	// FieldDisabilityTypeRemarks holds the string denoting the disabilitytyperemarks field in the database.
	FieldDisabilityTypeRemarks = "disability_type_remarks"
	// FieldDisabilityPercentage holds the string denoting the disabilitypercentage field in the database.
	FieldDisabilityPercentage = "disability_percentage"
	// FieldDisabilityPercentageVerified holds the string denoting the disabilitypercentageverified field in the database.
	FieldDisabilityPercentageVerified = "disability_percentage_verified"
	// FieldDisabilityPercentageRemStatus holds the string denoting the disabilitypercentageremstatus field in the database.
	FieldDisabilityPercentageRemStatus = "disability_percentage_rem_status"
	// FieldDisabilityPercentageRemarks holds the string denoting the disabilitypercentageremarks field in the database.
	FieldDisabilityPercentageRemarks = "disability_percentage_remarks"
	// FieldSignature holds the string denoting the signature field in the database.
	FieldSignature = "signature"
	// FieldSignatureVerified holds the string denoting the signatureverified field in the database.
	FieldSignatureVerified = "signature_verified"
	// FieldSignatureRemStatus holds the string denoting the signatureremstatus field in the database.
	FieldSignatureRemStatus = "signature_rem_status"
	// FieldSignatureRemarks holds the string denoting the signatureremarks field in the database.
	FieldSignatureRemarks = "signature_remarks"
	// FieldPhoto holds the string denoting the photo field in the database.
	FieldPhoto = "photo"
	// FieldPhotoVerified holds the string denoting the photoverified field in the database.
	FieldPhotoVerified = "photo_verified"
	// FieldPhotoRemStatus holds the string denoting the photoremstatus field in the database.
	FieldPhotoRemStatus = "photo_rem_status"
	// FieldPhotoRemarks holds the string denoting the photoremarks field in the database.
	FieldPhotoRemarks = "photo_remarks"
	// FieldPostID holds the string denoting the postid field in the database.
	FieldPostID = "post_id"
	// FieldPostCode holds the string denoting the postcode field in the database.
	FieldPostCode = "post_code"
	// FieldEmployeePost holds the string denoting the employeepost field in the database.
	FieldEmployeePost = "employee_post"
	// FieldEmployeePostVerified holds the string denoting the employeepostverified field in the database.
	FieldEmployeePostVerified = "employee_post_verified"
	// FieldEmployeePostRemStatus holds the string denoting the employeepostremstatus field in the database.
	FieldEmployeePostRemStatus = "employee_post_rem_status"
	// FieldEmployeePostRemarks holds the string denoting the employeepostremarks field in the database.
	FieldEmployeePostRemarks = "employee_post_remarks"
	// FieldDesignationID holds the string denoting the designationid field in the database.
	FieldDesignationID = "designation_id"
	// FieldEmployeeDesignation holds the string denoting the employeedesignation field in the database.
	FieldEmployeeDesignation = "employee_designation"
	// FieldEmployeeDesignationVerified holds the string denoting the employeedesignationverified field in the database.
	FieldEmployeeDesignationVerified = "employee_designation_verified"
	// FieldEmployeeDesignationRemStatus holds the string denoting the employeedesignationremstatus field in the database.
	FieldEmployeeDesignationRemStatus = "employee_designation_rem_status"
	// FieldEmployeeDesignationRemarks holds the string denoting the employeedesignationremarks field in the database.
	FieldEmployeeDesignationRemarks = "employee_designation_remarks"
	// FieldCircleID holds the string denoting the circleid field in the database.
	FieldCircleID = "circle_id"
	// FieldCircleName holds the string denoting the circlename field in the database.
	FieldCircleName = "circle_name"
	// FieldCircleVerified holds the string denoting the circleverified field in the database.
	FieldCircleVerified = "circle_verified"
	// FieldCircleRemStatus holds the string denoting the circleremstatus field in the database.
	FieldCircleRemStatus = "circle_rem_status"
	// FieldCircleRemarks holds the string denoting the circleremarks field in the database.
	FieldCircleRemarks = "circle_remarks"
	// FieldRegionID holds the string denoting the regionid field in the database.
	FieldRegionID = "region_id"
	// FieldRegionName holds the string denoting the regionname field in the database.
	FieldRegionName = "region_name"
	// FieldRegionVerified holds the string denoting the regionverified field in the database.
	FieldRegionVerified = "region_verified"
	// FieldRegionRemStatus holds the string denoting the regionremstatus field in the database.
	FieldRegionRemStatus = "region_rem_status"
	// FieldRegionRemarks holds the string denoting the regionremarks field in the database.
	FieldRegionRemarks = "region_remarks"
	// FieldDivisionID holds the string denoting the divisionid field in the database.
	FieldDivisionID = "division_id"
	// FieldDivisionName holds the string denoting the divisionname field in the database.
	FieldDivisionName = "division_name"
	// FieldDivisionVerified holds the string denoting the divisionverified field in the database.
	FieldDivisionVerified = "division_verified"
	// FieldDivisionRemStatus holds the string denoting the divisionremstatus field in the database.
	FieldDivisionRemStatus = "division_rem_status"
	// FieldDivisionRemarks holds the string denoting the divisionremarks field in the database.
	FieldDivisionRemarks = "division_remarks"
	// FieldOfficeID holds the string denoting the officeid field in the database.
	FieldOfficeID = "office_id"
	// FieldOfficeName holds the string denoting the officename field in the database.
	FieldOfficeName = "office_name"
	// FieldOfficeVerified holds the string denoting the officeverified field in the database.
	FieldOfficeVerified = "office_verified"
	// FieldOfficeRemStatus holds the string denoting the officeremstatus field in the database.
	FieldOfficeRemStatus = "office_rem_status"
	// FieldOfficeRemarks holds the string denoting the officeremarks field in the database.
	FieldOfficeRemarks = "office_remarks"
	// FieldRole holds the string denoting the role field in the database.
	FieldRole = "role"
	// FieldRoleVerified holds the string denoting the roleverified field in the database.
	FieldRoleVerified = "role_verified"
	// FieldRoleRemStatus holds the string denoting the roleremstatus field in the database.
	FieldRoleRemStatus = "role_rem_status"
	// FieldRoleRemarks holds the string denoting the roleremarks field in the database.
	FieldRoleRemarks = "role_remarks"
	// FieldDCCS holds the string denoting the dccs field in the database.
	FieldDCCS = "dccs"
	// FieldDCCSVerified holds the string denoting the dccsverified field in the database.
	FieldDCCSVerified = "dccs_verified"
	// FieldDCCSRemStatus holds the string denoting the dccsremstatus field in the database.
	FieldDCCSRemStatus = "dccs_rem_status"
	// FieldDCCSRemarks holds the string denoting the dccsremarks field in the database.
	FieldDCCSRemarks = "dccs_remarks"
	// FieldDCInPresentCadre holds the string denoting the dcinpresentcadre field in the database.
	FieldDCInPresentCadre = "dc_in_present_cadre"
	// FieldDCInPresentCadreVerified holds the string denoting the dcinpresentcadreverified field in the database.
	FieldDCInPresentCadreVerified = "dc_in_present_cadre_verified"
	// FieldDCInPresentCadreRemStatus holds the string denoting the dcinpresentcadreremstatus field in the database.
	FieldDCInPresentCadreRemStatus = "dc_in_present_cadre_rem_status"
	// FieldDCInPresentCadreRemarks holds the string denoting the dcinpresentcadreremarks field in the database.
	FieldDCInPresentCadreRemarks = "dc_in_present_cadre_remarks"
	// FieldAPSWorking holds the string denoting the apsworking field in the database.
	FieldAPSWorking = "aps_working"
	// FieldAPSWorkingVerified holds the string denoting the apsworkingverified field in the database.
	FieldAPSWorkingVerified = "aps_working_verified"
	// FieldAPSWorkingRemStatus holds the string denoting the apsworkingremstatus field in the database.
	FieldAPSWorkingRemStatus = "aps_working_rem_status"
	// FieldAPSWorkingRemarks holds the string denoting the apsworkingremarks field in the database.
	FieldAPSWorkingRemarks = "aps_working_remarks"
	// FieldProfilestatus holds the string denoting the profilestatus field in the database.
	FieldProfilestatus = "profilestatus"
	// FieldRoleUserCode holds the string denoting the roleusercode field in the database.
	FieldRoleUserCode = "role_user_code"
	// Table holds the table name of the employees in the database.
	Table = "Employees"
)

// Columns holds all SQL columns for employees fields.
var Columns = []string{
	FieldID,
	FieldEmployeedID,
	FieldIDVerified,
	FieldIDRemStatus,
	FieldIDRemarks,
	FieldEmployeeName,
	FieldNameVerified,
	FieldNameRemStatus,
	FieldNameRemarks,
	FieldEmployeeFathersName,
	FieldFathersNameVerified,
	FieldFathersNameRemStatus,
	FieldFathersNameRemarks,
	FieldDOB,
	FieldDOBVerified,
	FieldDOBRemStatus,
	FieldDOBRemarks,
	FieldGender,
	FieldGenderVerified,
	FieldGenderRemStatus,
	FieldGenderRemarks,
	FieldMobileNumber,
	FieldMobileNumberVerified,
	FieldMobileNumberRemStatus,
	FieldMobileNumberRemarks,
	FieldEmailID,
	FieldEmailIDVerified,
	FieldEmailIDRemStatus,
	FieldEmailIDRemarks,
	FieldCategoryid,
	FieldEmployeeCategoryCode,
	FieldEmployeeCategory,
	FieldEmployeeCategoryCodeVerified,
	FieldEmployeeCategoryCodeRemStatus,
	FieldEmployeeCategoryCodeRemarks,
	FieldWithDisability,
	FieldWithDisabilityVerified,
	FieldWithDisabilityRemStatus,
	FieldWithDisabilityRemarks,
	FieldDisabilityType,
	FieldDisabilityTypeVerified,
	FieldDisabilityTypeRemStatus,
	FieldDisabilityTypeRemarks,
	FieldDisabilityPercentage,
	FieldDisabilityPercentageVerified,
	FieldDisabilityPercentageRemStatus,
	FieldDisabilityPercentageRemarks,
	FieldSignature,
	FieldSignatureVerified,
	FieldSignatureRemStatus,
	FieldSignatureRemarks,
	FieldPhoto,
	FieldPhotoVerified,
	FieldPhotoRemStatus,
	FieldPhotoRemarks,
	FieldPostID,
	FieldPostCode,
	FieldEmployeePost,
	FieldEmployeePostVerified,
	FieldEmployeePostRemStatus,
	FieldEmployeePostRemarks,
	FieldDesignationID,
	FieldEmployeeDesignation,
	FieldEmployeeDesignationVerified,
	FieldEmployeeDesignationRemStatus,
	FieldEmployeeDesignationRemarks,
	FieldCircleID,
	FieldCircleName,
	FieldCircleVerified,
	FieldCircleRemStatus,
	FieldCircleRemarks,
	FieldRegionID,
	FieldRegionName,
	FieldRegionVerified,
	FieldRegionRemStatus,
	FieldRegionRemarks,
	FieldDivisionID,
	FieldDivisionName,
	FieldDivisionVerified,
	FieldDivisionRemStatus,
	FieldDivisionRemarks,
	FieldOfficeID,
	FieldOfficeName,
	FieldOfficeVerified,
	FieldOfficeRemStatus,
	FieldOfficeRemarks,
	FieldRole,
	FieldRoleVerified,
	FieldRoleRemStatus,
	FieldRoleRemarks,
	FieldDCCS,
	FieldDCCSVerified,
	FieldDCCSRemStatus,
	FieldDCCSRemarks,
	FieldDCInPresentCadre,
	FieldDCInPresentCadreVerified,
	FieldDCInPresentCadreRemStatus,
	FieldDCInPresentCadreRemarks,
	FieldAPSWorking,
	FieldAPSWorkingVerified,
	FieldAPSWorkingRemStatus,
	FieldAPSWorkingRemarks,
	FieldProfilestatus,
	FieldRoleUserCode,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "Employees"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"directorate_users_employee_user",
	"employee_posts_emp_posts",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultIDVerified holds the default value on creation for the "IDVerified" field.
	DefaultIDVerified bool
	// DefaultIDRemStatus holds the default value on creation for the "IDRemStatus" field.
	DefaultIDRemStatus bool
	// DefaultNameVerified holds the default value on creation for the "nameVerified" field.
	DefaultNameVerified bool
	// DefaultNameRemStatus holds the default value on creation for the "nameRemStatus" field.
	DefaultNameRemStatus bool
	// DefaultFathersNameVerified holds the default value on creation for the "FathersNameVerified" field.
	DefaultFathersNameVerified bool
	// DefaultFathersNameRemStatus holds the default value on creation for the "FathersNameRemStatus" field.
	DefaultFathersNameRemStatus bool
	// DefaultDOBVerified holds the default value on creation for the "DOBVerified" field.
	DefaultDOBVerified bool
	// DefaultDOBRemStatus holds the default value on creation for the "DOBRemStatus" field.
	DefaultDOBRemStatus bool
	// DefaultGenderVerified holds the default value on creation for the "genderVerified" field.
	DefaultGenderVerified bool
	// DefaultGenderRemStatus holds the default value on creation for the "genderRemStatus" field.
	DefaultGenderRemStatus bool
	// DefaultMobileNumberVerified holds the default value on creation for the "MobileNumberVerified" field.
	DefaultMobileNumberVerified bool
	// DefaultMobileNumberRemStatus holds the default value on creation for the "MobileNumberRemStatus" field.
	DefaultMobileNumberRemStatus bool
	// DefaultEmailIDVerified holds the default value on creation for the "EmailIDVerified" field.
	DefaultEmailIDVerified bool
	// DefaultEmailIDRemStatus holds the default value on creation for the "EmailIDRemStatus" field.
	DefaultEmailIDRemStatus bool
	// DefaultEmployeeCategoryCodeVerified holds the default value on creation for the "EmployeeCategoryCodeVerified" field.
	DefaultEmployeeCategoryCodeVerified bool
	// DefaultEmployeeCategoryCodeRemStatus holds the default value on creation for the "EmployeeCategoryCodeRemStatus" field.
	DefaultEmployeeCategoryCodeRemStatus bool
	// DefaultWithDisabilityVerified holds the default value on creation for the "WithDisabilityVerified" field.
	DefaultWithDisabilityVerified bool
	// DefaultWithDisabilityRemStatus holds the default value on creation for the "WithDisabilityRemStatus" field.
	DefaultWithDisabilityRemStatus bool
	// DefaultDisabilityTypeVerified holds the default value on creation for the "DisabilityTypeVerified" field.
	DefaultDisabilityTypeVerified bool
	// DefaultDisabilityTypeRemStatus holds the default value on creation for the "DisabilityTypeRemStatus" field.
	DefaultDisabilityTypeRemStatus bool
	// DefaultDisabilityPercentageVerified holds the default value on creation for the "DisabilityPercentageVerified" field.
	DefaultDisabilityPercentageVerified bool
	// DefaultDisabilityPercentageRemStatus holds the default value on creation for the "DisabilityPercentageRemStatus" field.
	DefaultDisabilityPercentageRemStatus bool
	// DefaultSignatureVerified holds the default value on creation for the "SignatureVerified" field.
	DefaultSignatureVerified bool
	// DefaultSignatureRemStatus holds the default value on creation for the "SignatureRemStatus" field.
	DefaultSignatureRemStatus bool
	// DefaultPhotoVerified holds the default value on creation for the "PhotoVerified" field.
	DefaultPhotoVerified bool
	// DefaultPhotoRemStatus holds the default value on creation for the "PhotoRemStatus" field.
	DefaultPhotoRemStatus bool
	// DefaultEmployeePostVerified holds the default value on creation for the "EmployeePostVerified" field.
	DefaultEmployeePostVerified bool
	// DefaultEmployeePostRemStatus holds the default value on creation for the "EmployeePostRemStatus" field.
	DefaultEmployeePostRemStatus bool
	// DefaultEmployeeDesignationVerified holds the default value on creation for the "EmployeeDesignationVerified" field.
	DefaultEmployeeDesignationVerified bool
	// DefaultEmployeeDesignationRemStatus holds the default value on creation for the "EmployeeDesignationRemStatus" field.
	DefaultEmployeeDesignationRemStatus bool
	// DefaultCircleVerified holds the default value on creation for the "CircleVerified" field.
	DefaultCircleVerified bool
	// DefaultCircleRemStatus holds the default value on creation for the "CircleRemStatus" field.
	DefaultCircleRemStatus bool
	// DefaultRegionVerified holds the default value on creation for the "RegionVerified" field.
	DefaultRegionVerified bool
	// DefaultRegionRemStatus holds the default value on creation for the "RegionRemStatus" field.
	DefaultRegionRemStatus bool
	// DefaultDivisionVerified holds the default value on creation for the "DivisionVerified" field.
	DefaultDivisionVerified bool
	// DefaultDivisionRemStatus holds the default value on creation for the "DivisionRemStatus" field.
	DefaultDivisionRemStatus bool
	// DefaultOfficeVerified holds the default value on creation for the "OfficeVerified" field.
	DefaultOfficeVerified bool
	// DefaultOfficeRemStatus holds the default value on creation for the "OfficeRemStatus" field.
	DefaultOfficeRemStatus bool
	// DefaultRoleVerified holds the default value on creation for the "RoleVerified" field.
	DefaultRoleVerified bool
	// DefaultRoleRemStatus holds the default value on creation for the "RoleRemStatus" field.
	DefaultRoleRemStatus bool
	// DefaultDCCSVerified holds the default value on creation for the "DCCSVerified" field.
	DefaultDCCSVerified bool
	// DefaultDCCSRemStatus holds the default value on creation for the "DCCSRemStatus" field.
	DefaultDCCSRemStatus bool
	// DefaultDCInPresentCadreVerified holds the default value on creation for the "DCInPresentCadreVerified" field.
	DefaultDCInPresentCadreVerified bool
	// DefaultDCInPresentCadreRemStatus holds the default value on creation for the "DCInPresentCadreRemStatus" field.
	DefaultDCInPresentCadreRemStatus bool
	// DefaultAPSWorkingVerified holds the default value on creation for the "APSWorkingVerified" field.
	DefaultAPSWorkingVerified bool
	// DefaultAPSWorkingRemStatus holds the default value on creation for the "APSWorkingRemStatus" field.
	DefaultAPSWorkingRemStatus bool
	// DefaultProfilestatus holds the default value on creation for the "profilestatus" field.
	DefaultProfilestatus bool
)

// Gender defines the type for the "Gender" enum field.
type Gender string

// Gender values.
const (
	GenderMale   Gender = "Male"
	GenderFemale Gender = "Female"
)

func (_gender Gender) String() string {
	return string(_gender)
}

// GenderValidator is a validator for the "Gender" field enum values. It is called by the builders before save.
func GenderValidator(_gender Gender) error {
	switch _gender {
	case GenderMale, GenderFemale:
		return nil
	default:
		return fmt.Errorf("employees: invalid enum value for Gender field: %q", _gender)
	}
}

// OrderOption defines the ordering options for the Employees queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByEmployeedID orders the results by the EmployeedID field.
func ByEmployeedID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmployeedID, opts...).ToFunc()
}

// ByIDVerified orders the results by the IDVerified field.
func ByIDVerified(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIDVerified, opts...).ToFunc()
}

// ByIDRemStatus orders the results by the IDRemStatus field.
func ByIDRemStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIDRemStatus, opts...).ToFunc()
}

// ByIDRemarks orders the results by the IDRemarks field.
func ByIDRemarks(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIDRemarks, opts...).ToFunc()
}

// ByEmployeeName orders the results by the EmployeeName field.
func ByEmployeeName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmployeeName, opts...).ToFunc()
}

// ByNameVerified orders the results by the nameVerified field.
func ByNameVerified(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNameVerified, opts...).ToFunc()
}

// ByNameRemStatus orders the results by the nameRemStatus field.
func ByNameRemStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNameRemStatus, opts...).ToFunc()
}

// ByNameRemarks orders the results by the nameRemarks field.
func ByNameRemarks(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNameRemarks, opts...).ToFunc()
}

// ByEmployeeFathersName orders the results by the EmployeeFathersName field.
func ByEmployeeFathersName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmployeeFathersName, opts...).ToFunc()
}

// ByFathersNameVerified orders the results by the FathersNameVerified field.
func ByFathersNameVerified(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFathersNameVerified, opts...).ToFunc()
}

// ByFathersNameRemStatus orders the results by the FathersNameRemStatus field.
func ByFathersNameRemStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFathersNameRemStatus, opts...).ToFunc()
}

// ByFathersNameRemarks orders the results by the FathersNameRemarks field.
func ByFathersNameRemarks(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFathersNameRemarks, opts...).ToFunc()
}

// ByDOB orders the results by the DOB field.
func ByDOB(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDOB, opts...).ToFunc()
}

// ByDOBVerified orders the results by the DOBVerified field.
func ByDOBVerified(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDOBVerified, opts...).ToFunc()
}

// ByDOBRemStatus orders the results by the DOBRemStatus field.
func ByDOBRemStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDOBRemStatus, opts...).ToFunc()
}

// ByDOBRemarks orders the results by the DOBRemarks field.
func ByDOBRemarks(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDOBRemarks, opts...).ToFunc()
}

// ByGender orders the results by the Gender field.
func ByGender(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGender, opts...).ToFunc()
}

// ByGenderVerified orders the results by the genderVerified field.
func ByGenderVerified(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGenderVerified, opts...).ToFunc()
}

// ByGenderRemStatus orders the results by the genderRemStatus field.
func ByGenderRemStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGenderRemStatus, opts...).ToFunc()
}

// ByGenderRemarks orders the results by the genderRemarks field.
func ByGenderRemarks(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGenderRemarks, opts...).ToFunc()
}

// ByMobileNumber orders the results by the MobileNumber field.
func ByMobileNumber(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMobileNumber, opts...).ToFunc()
}

// ByMobileNumberVerified orders the results by the MobileNumberVerified field.
func ByMobileNumberVerified(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMobileNumberVerified, opts...).ToFunc()
}

// ByMobileNumberRemStatus orders the results by the MobileNumberRemStatus field.
func ByMobileNumberRemStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMobileNumberRemStatus, opts...).ToFunc()
}

// ByMobileNumberRemarks orders the results by the MobileNumberRemarks field.
func ByMobileNumberRemarks(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMobileNumberRemarks, opts...).ToFunc()
}

// ByEmailID orders the results by the EmailID field.
func ByEmailID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmailID, opts...).ToFunc()
}

// ByEmailIDVerified orders the results by the EmailIDVerified field.
func ByEmailIDVerified(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmailIDVerified, opts...).ToFunc()
}

// ByEmailIDRemStatus orders the results by the EmailIDRemStatus field.
func ByEmailIDRemStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmailIDRemStatus, opts...).ToFunc()
}

// ByEmailIDRemarks orders the results by the EmailIDRemarks field.
func ByEmailIDRemarks(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmailIDRemarks, opts...).ToFunc()
}

// ByCategoryid orders the results by the Categoryid field.
func ByCategoryid(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCategoryid, opts...).ToFunc()
}

// ByEmployeeCategoryCode orders the results by the EmployeeCategoryCode field.
func ByEmployeeCategoryCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmployeeCategoryCode, opts...).ToFunc()
}

// ByEmployeeCategory orders the results by the EmployeeCategory field.
func ByEmployeeCategory(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmployeeCategory, opts...).ToFunc()
}

// ByEmployeeCategoryCodeVerified orders the results by the EmployeeCategoryCodeVerified field.
func ByEmployeeCategoryCodeVerified(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmployeeCategoryCodeVerified, opts...).ToFunc()
}

// ByEmployeeCategoryCodeRemStatus orders the results by the EmployeeCategoryCodeRemStatus field.
func ByEmployeeCategoryCodeRemStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmployeeCategoryCodeRemStatus, opts...).ToFunc()
}

// ByEmployeeCategoryCodeRemarks orders the results by the EmployeeCategoryCodeRemarks field.
func ByEmployeeCategoryCodeRemarks(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmployeeCategoryCodeRemarks, opts...).ToFunc()
}

// ByWithDisability orders the results by the WithDisability field.
func ByWithDisability(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWithDisability, opts...).ToFunc()
}

// ByWithDisabilityVerified orders the results by the WithDisabilityVerified field.
func ByWithDisabilityVerified(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWithDisabilityVerified, opts...).ToFunc()
}

// ByWithDisabilityRemStatus orders the results by the WithDisabilityRemStatus field.
func ByWithDisabilityRemStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWithDisabilityRemStatus, opts...).ToFunc()
}

// ByWithDisabilityRemarks orders the results by the WithDisabilityRemarks field.
func ByWithDisabilityRemarks(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWithDisabilityRemarks, opts...).ToFunc()
}

// ByDisabilityType orders the results by the DisabilityType field.
func ByDisabilityType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDisabilityType, opts...).ToFunc()
}

// ByDisabilityTypeVerified orders the results by the DisabilityTypeVerified field.
func ByDisabilityTypeVerified(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDisabilityTypeVerified, opts...).ToFunc()
}

// ByDisabilityTypeRemStatus orders the results by the DisabilityTypeRemStatus field.
func ByDisabilityTypeRemStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDisabilityTypeRemStatus, opts...).ToFunc()
}

// ByDisabilityTypeRemarks orders the results by the DisabilityTypeRemarks field.
func ByDisabilityTypeRemarks(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDisabilityTypeRemarks, opts...).ToFunc()
}

// ByDisabilityPercentage orders the results by the DisabilityPercentage field.
func ByDisabilityPercentage(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDisabilityPercentage, opts...).ToFunc()
}

// ByDisabilityPercentageVerified orders the results by the DisabilityPercentageVerified field.
func ByDisabilityPercentageVerified(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDisabilityPercentageVerified, opts...).ToFunc()
}

// ByDisabilityPercentageRemStatus orders the results by the DisabilityPercentageRemStatus field.
func ByDisabilityPercentageRemStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDisabilityPercentageRemStatus, opts...).ToFunc()
}

// ByDisabilityPercentageRemarks orders the results by the DisabilityPercentageRemarks field.
func ByDisabilityPercentageRemarks(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDisabilityPercentageRemarks, opts...).ToFunc()
}

// BySignature orders the results by the Signature field.
func BySignature(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSignature, opts...).ToFunc()
}

// BySignatureVerified orders the results by the SignatureVerified field.
func BySignatureVerified(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSignatureVerified, opts...).ToFunc()
}

// BySignatureRemStatus orders the results by the SignatureRemStatus field.
func BySignatureRemStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSignatureRemStatus, opts...).ToFunc()
}

// BySignatureRemarks orders the results by the SignatureRemarks field.
func BySignatureRemarks(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSignatureRemarks, opts...).ToFunc()
}

// ByPhoto orders the results by the Photo field.
func ByPhoto(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPhoto, opts...).ToFunc()
}

// ByPhotoVerified orders the results by the PhotoVerified field.
func ByPhotoVerified(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPhotoVerified, opts...).ToFunc()
}

// ByPhotoRemStatus orders the results by the PhotoRemStatus field.
func ByPhotoRemStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPhotoRemStatus, opts...).ToFunc()
}

// ByPhotoRemarks orders the results by the PhotoRemarks field.
func ByPhotoRemarks(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPhotoRemarks, opts...).ToFunc()
}

// ByPostID orders the results by the PostID field.
func ByPostID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPostID, opts...).ToFunc()
}

// ByPostCode orders the results by the PostCode field.
func ByPostCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPostCode, opts...).ToFunc()
}

// ByEmployeePost orders the results by the EmployeePost field.
func ByEmployeePost(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmployeePost, opts...).ToFunc()
}

// ByEmployeePostVerified orders the results by the EmployeePostVerified field.
func ByEmployeePostVerified(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmployeePostVerified, opts...).ToFunc()
}

// ByEmployeePostRemStatus orders the results by the EmployeePostRemStatus field.
func ByEmployeePostRemStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmployeePostRemStatus, opts...).ToFunc()
}

// ByEmployeePostRemarks orders the results by the EmployeePostRemarks field.
func ByEmployeePostRemarks(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmployeePostRemarks, opts...).ToFunc()
}

// ByDesignationID orders the results by the DesignationID field.
func ByDesignationID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDesignationID, opts...).ToFunc()
}

// ByEmployeeDesignation orders the results by the EmployeeDesignation field.
func ByEmployeeDesignation(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmployeeDesignation, opts...).ToFunc()
}

// ByEmployeeDesignationVerified orders the results by the EmployeeDesignationVerified field.
func ByEmployeeDesignationVerified(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmployeeDesignationVerified, opts...).ToFunc()
}

// ByEmployeeDesignationRemStatus orders the results by the EmployeeDesignationRemStatus field.
func ByEmployeeDesignationRemStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmployeeDesignationRemStatus, opts...).ToFunc()
}

// ByEmployeeDesignationRemarks orders the results by the EmployeeDesignationRemarks field.
func ByEmployeeDesignationRemarks(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmployeeDesignationRemarks, opts...).ToFunc()
}

// ByCircleID orders the results by the CircleID field.
func ByCircleID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCircleID, opts...).ToFunc()
}

// ByCircleName orders the results by the CircleName field.
func ByCircleName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCircleName, opts...).ToFunc()
}

// ByCircleVerified orders the results by the CircleVerified field.
func ByCircleVerified(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCircleVerified, opts...).ToFunc()
}

// ByCircleRemStatus orders the results by the CircleRemStatus field.
func ByCircleRemStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCircleRemStatus, opts...).ToFunc()
}

// ByCircleRemarks orders the results by the CircleRemarks field.
func ByCircleRemarks(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCircleRemarks, opts...).ToFunc()
}

// ByRegionID orders the results by the RegionID field.
func ByRegionID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRegionID, opts...).ToFunc()
}

// ByRegionName orders the results by the RegionName field.
func ByRegionName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRegionName, opts...).ToFunc()
}

// ByRegionVerified orders the results by the RegionVerified field.
func ByRegionVerified(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRegionVerified, opts...).ToFunc()
}

// ByRegionRemStatus orders the results by the RegionRemStatus field.
func ByRegionRemStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRegionRemStatus, opts...).ToFunc()
}

// ByRegionRemarks orders the results by the RegionRemarks field.
func ByRegionRemarks(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRegionRemarks, opts...).ToFunc()
}

// ByDivisionID orders the results by the DivisionID field.
func ByDivisionID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDivisionID, opts...).ToFunc()
}

// ByDivisionName orders the results by the DivisionName field.
func ByDivisionName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDivisionName, opts...).ToFunc()
}

// ByDivisionVerified orders the results by the DivisionVerified field.
func ByDivisionVerified(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDivisionVerified, opts...).ToFunc()
}

// ByDivisionRemStatus orders the results by the DivisionRemStatus field.
func ByDivisionRemStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDivisionRemStatus, opts...).ToFunc()
}

// ByDivisionRemarks orders the results by the DivisionRemarks field.
func ByDivisionRemarks(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDivisionRemarks, opts...).ToFunc()
}

// ByOfficeID orders the results by the OfficeID field.
func ByOfficeID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOfficeID, opts...).ToFunc()
}

// ByOfficeName orders the results by the OfficeName field.
func ByOfficeName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOfficeName, opts...).ToFunc()
}

// ByOfficeVerified orders the results by the OfficeVerified field.
func ByOfficeVerified(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOfficeVerified, opts...).ToFunc()
}

// ByOfficeRemStatus orders the results by the OfficeRemStatus field.
func ByOfficeRemStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOfficeRemStatus, opts...).ToFunc()
}

// ByOfficeRemarks orders the results by the OfficeRemarks field.
func ByOfficeRemarks(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOfficeRemarks, opts...).ToFunc()
}

// ByRole orders the results by the Role field.
func ByRole(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRole, opts...).ToFunc()
}

// ByRoleVerified orders the results by the RoleVerified field.
func ByRoleVerified(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRoleVerified, opts...).ToFunc()
}

// ByRoleRemStatus orders the results by the RoleRemStatus field.
func ByRoleRemStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRoleRemStatus, opts...).ToFunc()
}

// ByRoleRemarks orders the results by the RoleRemarks field.
func ByRoleRemarks(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRoleRemarks, opts...).ToFunc()
}

// ByDCCS orders the results by the DCCS field.
func ByDCCS(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDCCS, opts...).ToFunc()
}

// ByDCCSVerified orders the results by the DCCSVerified field.
func ByDCCSVerified(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDCCSVerified, opts...).ToFunc()
}

// ByDCCSRemStatus orders the results by the DCCSRemStatus field.
func ByDCCSRemStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDCCSRemStatus, opts...).ToFunc()
}

// ByDCCSRemarks orders the results by the DCCSRemarks field.
func ByDCCSRemarks(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDCCSRemarks, opts...).ToFunc()
}

// ByDCInPresentCadre orders the results by the DCInPresentCadre field.
func ByDCInPresentCadre(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDCInPresentCadre, opts...).ToFunc()
}

// ByDCInPresentCadreVerified orders the results by the DCInPresentCadreVerified field.
func ByDCInPresentCadreVerified(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDCInPresentCadreVerified, opts...).ToFunc()
}

// ByDCInPresentCadreRemStatus orders the results by the DCInPresentCadreRemStatus field.
func ByDCInPresentCadreRemStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDCInPresentCadreRemStatus, opts...).ToFunc()
}

// ByDCInPresentCadreRemarks orders the results by the DCInPresentCadreRemarks field.
func ByDCInPresentCadreRemarks(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDCInPresentCadreRemarks, opts...).ToFunc()
}

// ByAPSWorking orders the results by the APSWorking field.
func ByAPSWorking(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAPSWorking, opts...).ToFunc()
}

// ByAPSWorkingVerified orders the results by the APSWorkingVerified field.
func ByAPSWorkingVerified(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAPSWorkingVerified, opts...).ToFunc()
}

// ByAPSWorkingRemStatus orders the results by the APSWorkingRemStatus field.
func ByAPSWorkingRemStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAPSWorkingRemStatus, opts...).ToFunc()
}

// ByAPSWorkingRemarks orders the results by the APSWorkingRemarks field.
func ByAPSWorkingRemarks(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAPSWorkingRemarks, opts...).ToFunc()
}

// ByProfilestatus orders the results by the profilestatus field.
func ByProfilestatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProfilestatus, opts...).ToFunc()
}

// ByRoleUserCode orders the results by the RoleUserCode field.
func ByRoleUserCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRoleUserCode, opts...).ToFunc()
}
