// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"recruit/ent/cadreeligibleconfiguration"
	"recruit/ent/logs"
	"recruit/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CadreEligibleConfigurationUpdate is the builder for updating CadreEligibleConfiguration entities.
type CadreEligibleConfigurationUpdate struct {
	config
	hooks    []Hook
	mutation *CadreEligibleConfigurationMutation
}

// Where appends a list predicates to the CadreEligibleConfigurationUpdate builder.
func (cecu *CadreEligibleConfigurationUpdate) Where(ps ...predicate.CadreEligibleConfiguration) *CadreEligibleConfigurationUpdate {
	cecu.mutation.Where(ps...)
	return cecu
}

// SetExamCode sets the "ExamCode" field.
func (cecu *CadreEligibleConfigurationUpdate) SetExamCode(i int64) *CadreEligibleConfigurationUpdate {
	cecu.mutation.ResetExamCode()
	cecu.mutation.SetExamCode(i)
	return cecu
}

// SetNillableExamCode sets the "ExamCode" field if the given value is not nil.
func (cecu *CadreEligibleConfigurationUpdate) SetNillableExamCode(i *int64) *CadreEligibleConfigurationUpdate {
	if i != nil {
		cecu.SetExamCode(*i)
	}
	return cecu
}

// AddExamCode adds i to the "ExamCode" field.
func (cecu *CadreEligibleConfigurationUpdate) AddExamCode(i int64) *CadreEligibleConfigurationUpdate {
	cecu.mutation.AddExamCode(i)
	return cecu
}

// ClearExamCode clears the value of the "ExamCode" field.
func (cecu *CadreEligibleConfigurationUpdate) ClearExamCode() *CadreEligibleConfigurationUpdate {
	cecu.mutation.ClearExamCode()
	return cecu
}

// SetExamName sets the "ExamName" field.
func (cecu *CadreEligibleConfigurationUpdate) SetExamName(s string) *CadreEligibleConfigurationUpdate {
	cecu.mutation.SetExamName(s)
	return cecu
}

// SetNillableExamName sets the "ExamName" field if the given value is not nil.
func (cecu *CadreEligibleConfigurationUpdate) SetNillableExamName(s *string) *CadreEligibleConfigurationUpdate {
	if s != nil {
		cecu.SetExamName(*s)
	}
	return cecu
}

// ClearExamName clears the value of the "ExamName" field.
func (cecu *CadreEligibleConfigurationUpdate) ClearExamName() *CadreEligibleConfigurationUpdate {
	cecu.mutation.ClearExamName()
	return cecu
}

// SetExamShortName sets the "ExamShortName" field.
func (cecu *CadreEligibleConfigurationUpdate) SetExamShortName(s string) *CadreEligibleConfigurationUpdate {
	cecu.mutation.SetExamShortName(s)
	return cecu
}

// SetNillableExamShortName sets the "ExamShortName" field if the given value is not nil.
func (cecu *CadreEligibleConfigurationUpdate) SetNillableExamShortName(s *string) *CadreEligibleConfigurationUpdate {
	if s != nil {
		cecu.SetExamShortName(*s)
	}
	return cecu
}

// ClearExamShortName clears the value of the "ExamShortName" field.
func (cecu *CadreEligibleConfigurationUpdate) ClearExamShortName() *CadreEligibleConfigurationUpdate {
	cecu.mutation.ClearExamShortName()
	return cecu
}

// SetPostID sets the "PostID" field.
func (cecu *CadreEligibleConfigurationUpdate) SetPostID(i int64) *CadreEligibleConfigurationUpdate {
	cecu.mutation.ResetPostID()
	cecu.mutation.SetPostID(i)
	return cecu
}

// SetNillablePostID sets the "PostID" field if the given value is not nil.
func (cecu *CadreEligibleConfigurationUpdate) SetNillablePostID(i *int64) *CadreEligibleConfigurationUpdate {
	if i != nil {
		cecu.SetPostID(*i)
	}
	return cecu
}

// AddPostID adds i to the "PostID" field.
func (cecu *CadreEligibleConfigurationUpdate) AddPostID(i int64) *CadreEligibleConfigurationUpdate {
	cecu.mutation.AddPostID(i)
	return cecu
}

// ClearPostID clears the value of the "PostID" field.
func (cecu *CadreEligibleConfigurationUpdate) ClearPostID() *CadreEligibleConfigurationUpdate {
	cecu.mutation.ClearPostID()
	return cecu
}

// SetPostCode sets the "PostCode" field.
func (cecu *CadreEligibleConfigurationUpdate) SetPostCode(s string) *CadreEligibleConfigurationUpdate {
	cecu.mutation.SetPostCode(s)
	return cecu
}

// SetNillablePostCode sets the "PostCode" field if the given value is not nil.
func (cecu *CadreEligibleConfigurationUpdate) SetNillablePostCode(s *string) *CadreEligibleConfigurationUpdate {
	if s != nil {
		cecu.SetPostCode(*s)
	}
	return cecu
}

// ClearPostCode clears the value of the "PostCode" field.
func (cecu *CadreEligibleConfigurationUpdate) ClearPostCode() *CadreEligibleConfigurationUpdate {
	cecu.mutation.ClearPostCode()
	return cecu
}

// SetPostDescription sets the "PostDescription" field.
func (cecu *CadreEligibleConfigurationUpdate) SetPostDescription(s string) *CadreEligibleConfigurationUpdate {
	cecu.mutation.SetPostDescription(s)
	return cecu
}

// SetNillablePostDescription sets the "PostDescription" field if the given value is not nil.
func (cecu *CadreEligibleConfigurationUpdate) SetNillablePostDescription(s *string) *CadreEligibleConfigurationUpdate {
	if s != nil {
		cecu.SetPostDescription(*s)
	}
	return cecu
}

// ClearPostDescription clears the value of the "PostDescription" field.
func (cecu *CadreEligibleConfigurationUpdate) ClearPostDescription() *CadreEligibleConfigurationUpdate {
	cecu.mutation.ClearPostDescription()
	return cecu
}

// SetGdsService sets the "gdsService" field.
func (cecu *CadreEligibleConfigurationUpdate) SetGdsService(i int64) *CadreEligibleConfigurationUpdate {
	cecu.mutation.ResetGdsService()
	cecu.mutation.SetGdsService(i)
	return cecu
}

// SetNillableGdsService sets the "gdsService" field if the given value is not nil.
func (cecu *CadreEligibleConfigurationUpdate) SetNillableGdsService(i *int64) *CadreEligibleConfigurationUpdate {
	if i != nil {
		cecu.SetGdsService(*i)
	}
	return cecu
}

// AddGdsService adds i to the "gdsService" field.
func (cecu *CadreEligibleConfigurationUpdate) AddGdsService(i int64) *CadreEligibleConfigurationUpdate {
	cecu.mutation.AddGdsService(i)
	return cecu
}

// ClearGdsService clears the value of the "gdsService" field.
func (cecu *CadreEligibleConfigurationUpdate) ClearGdsService() *CadreEligibleConfigurationUpdate {
	cecu.mutation.ClearGdsService()
	return cecu
}

// SetCategoryCode sets the "CategoryCode" field.
func (cecu *CadreEligibleConfigurationUpdate) SetCategoryCode(s string) *CadreEligibleConfigurationUpdate {
	cecu.mutation.SetCategoryCode(s)
	return cecu
}

// SetNillableCategoryCode sets the "CategoryCode" field if the given value is not nil.
func (cecu *CadreEligibleConfigurationUpdate) SetNillableCategoryCode(s *string) *CadreEligibleConfigurationUpdate {
	if s != nil {
		cecu.SetCategoryCode(*s)
	}
	return cecu
}

// ClearCategoryCode clears the value of the "CategoryCode" field.
func (cecu *CadreEligibleConfigurationUpdate) ClearCategoryCode() *CadreEligibleConfigurationUpdate {
	cecu.mutation.ClearCategoryCode()
	return cecu
}

// SetAgeCriteria sets the "ageCriteria" field.
func (cecu *CadreEligibleConfigurationUpdate) SetAgeCriteria(i int64) *CadreEligibleConfigurationUpdate {
	cecu.mutation.ResetAgeCriteria()
	cecu.mutation.SetAgeCriteria(i)
	return cecu
}

// SetNillableAgeCriteria sets the "ageCriteria" field if the given value is not nil.
func (cecu *CadreEligibleConfigurationUpdate) SetNillableAgeCriteria(i *int64) *CadreEligibleConfigurationUpdate {
	if i != nil {
		cecu.SetAgeCriteria(*i)
	}
	return cecu
}

// AddAgeCriteria adds i to the "ageCriteria" field.
func (cecu *CadreEligibleConfigurationUpdate) AddAgeCriteria(i int64) *CadreEligibleConfigurationUpdate {
	cecu.mutation.AddAgeCriteria(i)
	return cecu
}

// ClearAgeCriteria clears the value of the "ageCriteria" field.
func (cecu *CadreEligibleConfigurationUpdate) ClearAgeCriteria() *CadreEligibleConfigurationUpdate {
	cecu.mutation.ClearAgeCriteria()
	return cecu
}

// SetServiceCriteria sets the "serviceCriteria" field.
func (cecu *CadreEligibleConfigurationUpdate) SetServiceCriteria(i int64) *CadreEligibleConfigurationUpdate {
	cecu.mutation.ResetServiceCriteria()
	cecu.mutation.SetServiceCriteria(i)
	return cecu
}

// SetNillableServiceCriteria sets the "serviceCriteria" field if the given value is not nil.
func (cecu *CadreEligibleConfigurationUpdate) SetNillableServiceCriteria(i *int64) *CadreEligibleConfigurationUpdate {
	if i != nil {
		cecu.SetServiceCriteria(*i)
	}
	return cecu
}

// AddServiceCriteria adds i to the "serviceCriteria" field.
func (cecu *CadreEligibleConfigurationUpdate) AddServiceCriteria(i int64) *CadreEligibleConfigurationUpdate {
	cecu.mutation.AddServiceCriteria(i)
	return cecu
}

// ClearServiceCriteria clears the value of the "serviceCriteria" field.
func (cecu *CadreEligibleConfigurationUpdate) ClearServiceCriteria() *CadreEligibleConfigurationUpdate {
	cecu.mutation.ClearServiceCriteria()
	return cecu
}

// SetDrivingLicenceCriteria sets the "drivingLicenceCriteria" field.
func (cecu *CadreEligibleConfigurationUpdate) SetDrivingLicenceCriteria(i int64) *CadreEligibleConfigurationUpdate {
	cecu.mutation.ResetDrivingLicenceCriteria()
	cecu.mutation.SetDrivingLicenceCriteria(i)
	return cecu
}

// SetNillableDrivingLicenceCriteria sets the "drivingLicenceCriteria" field if the given value is not nil.
func (cecu *CadreEligibleConfigurationUpdate) SetNillableDrivingLicenceCriteria(i *int64) *CadreEligibleConfigurationUpdate {
	if i != nil {
		cecu.SetDrivingLicenceCriteria(*i)
	}
	return cecu
}

// AddDrivingLicenceCriteria adds i to the "drivingLicenceCriteria" field.
func (cecu *CadreEligibleConfigurationUpdate) AddDrivingLicenceCriteria(i int64) *CadreEligibleConfigurationUpdate {
	cecu.mutation.AddDrivingLicenceCriteria(i)
	return cecu
}

// ClearDrivingLicenceCriteria clears the value of the "drivingLicenceCriteria" field.
func (cecu *CadreEligibleConfigurationUpdate) ClearDrivingLicenceCriteria() *CadreEligibleConfigurationUpdate {
	cecu.mutation.ClearDrivingLicenceCriteria()
	return cecu
}

// SetComputerKnowledge sets the "computerKnowledge" field.
func (cecu *CadreEligibleConfigurationUpdate) SetComputerKnowledge(i int64) *CadreEligibleConfigurationUpdate {
	cecu.mutation.ResetComputerKnowledge()
	cecu.mutation.SetComputerKnowledge(i)
	return cecu
}

// SetNillableComputerKnowledge sets the "computerKnowledge" field if the given value is not nil.
func (cecu *CadreEligibleConfigurationUpdate) SetNillableComputerKnowledge(i *int64) *CadreEligibleConfigurationUpdate {
	if i != nil {
		cecu.SetComputerKnowledge(*i)
	}
	return cecu
}

// AddComputerKnowledge adds i to the "computerKnowledge" field.
func (cecu *CadreEligibleConfigurationUpdate) AddComputerKnowledge(i int64) *CadreEligibleConfigurationUpdate {
	cecu.mutation.AddComputerKnowledge(i)
	return cecu
}

// ClearComputerKnowledge clears the value of the "computerKnowledge" field.
func (cecu *CadreEligibleConfigurationUpdate) ClearComputerKnowledge() *CadreEligibleConfigurationUpdate {
	cecu.mutation.ClearComputerKnowledge()
	return cecu
}

// SetEligibilityBasedOnLevelOfPayMatrix sets the "eligibilityBasedOnLevelOfPayMatrix" field.
func (cecu *CadreEligibleConfigurationUpdate) SetEligibilityBasedOnLevelOfPayMatrix(i int64) *CadreEligibleConfigurationUpdate {
	cecu.mutation.ResetEligibilityBasedOnLevelOfPayMatrix()
	cecu.mutation.SetEligibilityBasedOnLevelOfPayMatrix(i)
	return cecu
}

// SetNillableEligibilityBasedOnLevelOfPayMatrix sets the "eligibilityBasedOnLevelOfPayMatrix" field if the given value is not nil.
func (cecu *CadreEligibleConfigurationUpdate) SetNillableEligibilityBasedOnLevelOfPayMatrix(i *int64) *CadreEligibleConfigurationUpdate {
	if i != nil {
		cecu.SetEligibilityBasedOnLevelOfPayMatrix(*i)
	}
	return cecu
}

// AddEligibilityBasedOnLevelOfPayMatrix adds i to the "eligibilityBasedOnLevelOfPayMatrix" field.
func (cecu *CadreEligibleConfigurationUpdate) AddEligibilityBasedOnLevelOfPayMatrix(i int64) *CadreEligibleConfigurationUpdate {
	cecu.mutation.AddEligibilityBasedOnLevelOfPayMatrix(i)
	return cecu
}

// ClearEligibilityBasedOnLevelOfPayMatrix clears the value of the "eligibilityBasedOnLevelOfPayMatrix" field.
func (cecu *CadreEligibleConfigurationUpdate) ClearEligibilityBasedOnLevelOfPayMatrix() *CadreEligibleConfigurationUpdate {
	cecu.mutation.ClearEligibilityBasedOnLevelOfPayMatrix()
	return cecu
}

// SetEducationCode sets the "educationCode" field.
func (cecu *CadreEligibleConfigurationUpdate) SetEducationCode(i int64) *CadreEligibleConfigurationUpdate {
	cecu.mutation.ResetEducationCode()
	cecu.mutation.SetEducationCode(i)
	return cecu
}

// SetNillableEducationCode sets the "educationCode" field if the given value is not nil.
func (cecu *CadreEligibleConfigurationUpdate) SetNillableEducationCode(i *int64) *CadreEligibleConfigurationUpdate {
	if i != nil {
		cecu.SetEducationCode(*i)
	}
	return cecu
}

// AddEducationCode adds i to the "educationCode" field.
func (cecu *CadreEligibleConfigurationUpdate) AddEducationCode(i int64) *CadreEligibleConfigurationUpdate {
	cecu.mutation.AddEducationCode(i)
	return cecu
}

// ClearEducationCode clears the value of the "educationCode" field.
func (cecu *CadreEligibleConfigurationUpdate) ClearEducationCode() *CadreEligibleConfigurationUpdate {
	cecu.mutation.ClearEducationCode()
	return cecu
}

// SetEducationDescription sets the "educationDescription" field.
func (cecu *CadreEligibleConfigurationUpdate) SetEducationDescription(s string) *CadreEligibleConfigurationUpdate {
	cecu.mutation.SetEducationDescription(s)
	return cecu
}

// SetNillableEducationDescription sets the "educationDescription" field if the given value is not nil.
func (cecu *CadreEligibleConfigurationUpdate) SetNillableEducationDescription(s *string) *CadreEligibleConfigurationUpdate {
	if s != nil {
		cecu.SetEducationDescription(*s)
	}
	return cecu
}

// ClearEducationDescription clears the value of the "educationDescription" field.
func (cecu *CadreEligibleConfigurationUpdate) ClearEducationDescription() *CadreEligibleConfigurationUpdate {
	cecu.mutation.ClearEducationDescription()
	return cecu
}

// SetOrderNumber sets the "OrderNumber" field.
func (cecu *CadreEligibleConfigurationUpdate) SetOrderNumber(s string) *CadreEligibleConfigurationUpdate {
	cecu.mutation.SetOrderNumber(s)
	return cecu
}

// SetNillableOrderNumber sets the "OrderNumber" field if the given value is not nil.
func (cecu *CadreEligibleConfigurationUpdate) SetNillableOrderNumber(s *string) *CadreEligibleConfigurationUpdate {
	if s != nil {
		cecu.SetOrderNumber(*s)
	}
	return cecu
}

// ClearOrderNumber clears the value of the "OrderNumber" field.
func (cecu *CadreEligibleConfigurationUpdate) ClearOrderNumber() *CadreEligibleConfigurationUpdate {
	cecu.mutation.ClearOrderNumber()
	return cecu
}

// SetCreatedById sets the "CreatedById" field.
func (cecu *CadreEligibleConfigurationUpdate) SetCreatedById(i int64) *CadreEligibleConfigurationUpdate {
	cecu.mutation.ResetCreatedById()
	cecu.mutation.SetCreatedById(i)
	return cecu
}

// SetNillableCreatedById sets the "CreatedById" field if the given value is not nil.
func (cecu *CadreEligibleConfigurationUpdate) SetNillableCreatedById(i *int64) *CadreEligibleConfigurationUpdate {
	if i != nil {
		cecu.SetCreatedById(*i)
	}
	return cecu
}

// AddCreatedById adds i to the "CreatedById" field.
func (cecu *CadreEligibleConfigurationUpdate) AddCreatedById(i int64) *CadreEligibleConfigurationUpdate {
	cecu.mutation.AddCreatedById(i)
	return cecu
}

// ClearCreatedById clears the value of the "CreatedById" field.
func (cecu *CadreEligibleConfigurationUpdate) ClearCreatedById() *CadreEligibleConfigurationUpdate {
	cecu.mutation.ClearCreatedById()
	return cecu
}

// SetCreatedByUserName sets the "CreatedByUserName" field.
func (cecu *CadreEligibleConfigurationUpdate) SetCreatedByUserName(s string) *CadreEligibleConfigurationUpdate {
	cecu.mutation.SetCreatedByUserName(s)
	return cecu
}

// SetNillableCreatedByUserName sets the "CreatedByUserName" field if the given value is not nil.
func (cecu *CadreEligibleConfigurationUpdate) SetNillableCreatedByUserName(s *string) *CadreEligibleConfigurationUpdate {
	if s != nil {
		cecu.SetCreatedByUserName(*s)
	}
	return cecu
}

// ClearCreatedByUserName clears the value of the "CreatedByUserName" field.
func (cecu *CadreEligibleConfigurationUpdate) ClearCreatedByUserName() *CadreEligibleConfigurationUpdate {
	cecu.mutation.ClearCreatedByUserName()
	return cecu
}

// SetCreatedByEmpId sets the "CreatedByEmpId" field.
func (cecu *CadreEligibleConfigurationUpdate) SetCreatedByEmpId(i int64) *CadreEligibleConfigurationUpdate {
	cecu.mutation.ResetCreatedByEmpId()
	cecu.mutation.SetCreatedByEmpId(i)
	return cecu
}

// SetNillableCreatedByEmpId sets the "CreatedByEmpId" field if the given value is not nil.
func (cecu *CadreEligibleConfigurationUpdate) SetNillableCreatedByEmpId(i *int64) *CadreEligibleConfigurationUpdate {
	if i != nil {
		cecu.SetCreatedByEmpId(*i)
	}
	return cecu
}

// AddCreatedByEmpId adds i to the "CreatedByEmpId" field.
func (cecu *CadreEligibleConfigurationUpdate) AddCreatedByEmpId(i int64) *CadreEligibleConfigurationUpdate {
	cecu.mutation.AddCreatedByEmpId(i)
	return cecu
}

// ClearCreatedByEmpId clears the value of the "CreatedByEmpId" field.
func (cecu *CadreEligibleConfigurationUpdate) ClearCreatedByEmpId() *CadreEligibleConfigurationUpdate {
	cecu.mutation.ClearCreatedByEmpId()
	return cecu
}

// SetCreatedByDesignation sets the "CreatedByDesignation" field.
func (cecu *CadreEligibleConfigurationUpdate) SetCreatedByDesignation(s string) *CadreEligibleConfigurationUpdate {
	cecu.mutation.SetCreatedByDesignation(s)
	return cecu
}

// SetNillableCreatedByDesignation sets the "CreatedByDesignation" field if the given value is not nil.
func (cecu *CadreEligibleConfigurationUpdate) SetNillableCreatedByDesignation(s *string) *CadreEligibleConfigurationUpdate {
	if s != nil {
		cecu.SetCreatedByDesignation(*s)
	}
	return cecu
}

// ClearCreatedByDesignation clears the value of the "CreatedByDesignation" field.
func (cecu *CadreEligibleConfigurationUpdate) ClearCreatedByDesignation() *CadreEligibleConfigurationUpdate {
	cecu.mutation.ClearCreatedByDesignation()
	return cecu
}

// SetCreatedDate sets the "CreatedDate" field.
func (cecu *CadreEligibleConfigurationUpdate) SetCreatedDate(t time.Time) *CadreEligibleConfigurationUpdate {
	cecu.mutation.SetCreatedDate(t)
	return cecu
}

// SetNillableCreatedDate sets the "CreatedDate" field if the given value is not nil.
func (cecu *CadreEligibleConfigurationUpdate) SetNillableCreatedDate(t *time.Time) *CadreEligibleConfigurationUpdate {
	if t != nil {
		cecu.SetCreatedDate(*t)
	}
	return cecu
}

// ClearCreatedDate clears the value of the "CreatedDate" field.
func (cecu *CadreEligibleConfigurationUpdate) ClearCreatedDate() *CadreEligibleConfigurationUpdate {
	cecu.mutation.ClearCreatedDate()
	return cecu
}

// SetVerifiedbyid sets the "verifiedbyid" field.
func (cecu *CadreEligibleConfigurationUpdate) SetVerifiedbyid(i int64) *CadreEligibleConfigurationUpdate {
	cecu.mutation.ResetVerifiedbyid()
	cecu.mutation.SetVerifiedbyid(i)
	return cecu
}

// SetNillableVerifiedbyid sets the "verifiedbyid" field if the given value is not nil.
func (cecu *CadreEligibleConfigurationUpdate) SetNillableVerifiedbyid(i *int64) *CadreEligibleConfigurationUpdate {
	if i != nil {
		cecu.SetVerifiedbyid(*i)
	}
	return cecu
}

// AddVerifiedbyid adds i to the "verifiedbyid" field.
func (cecu *CadreEligibleConfigurationUpdate) AddVerifiedbyid(i int64) *CadreEligibleConfigurationUpdate {
	cecu.mutation.AddVerifiedbyid(i)
	return cecu
}

// ClearVerifiedbyid clears the value of the "verifiedbyid" field.
func (cecu *CadreEligibleConfigurationUpdate) ClearVerifiedbyid() *CadreEligibleConfigurationUpdate {
	cecu.mutation.ClearVerifiedbyid()
	return cecu
}

// SetVerifiedbyusername sets the "verifiedbyusername" field.
func (cecu *CadreEligibleConfigurationUpdate) SetVerifiedbyusername(s string) *CadreEligibleConfigurationUpdate {
	cecu.mutation.SetVerifiedbyusername(s)
	return cecu
}

// SetNillableVerifiedbyusername sets the "verifiedbyusername" field if the given value is not nil.
func (cecu *CadreEligibleConfigurationUpdate) SetNillableVerifiedbyusername(s *string) *CadreEligibleConfigurationUpdate {
	if s != nil {
		cecu.SetVerifiedbyusername(*s)
	}
	return cecu
}

// ClearVerifiedbyusername clears the value of the "verifiedbyusername" field.
func (cecu *CadreEligibleConfigurationUpdate) ClearVerifiedbyusername() *CadreEligibleConfigurationUpdate {
	cecu.mutation.ClearVerifiedbyusername()
	return cecu
}

// SetVerifiedbyEmployeeid sets the "verifiedbyEmployeeid" field.
func (cecu *CadreEligibleConfigurationUpdate) SetVerifiedbyEmployeeid(i int64) *CadreEligibleConfigurationUpdate {
	cecu.mutation.ResetVerifiedbyEmployeeid()
	cecu.mutation.SetVerifiedbyEmployeeid(i)
	return cecu
}

// SetNillableVerifiedbyEmployeeid sets the "verifiedbyEmployeeid" field if the given value is not nil.
func (cecu *CadreEligibleConfigurationUpdate) SetNillableVerifiedbyEmployeeid(i *int64) *CadreEligibleConfigurationUpdate {
	if i != nil {
		cecu.SetVerifiedbyEmployeeid(*i)
	}
	return cecu
}

// AddVerifiedbyEmployeeid adds i to the "verifiedbyEmployeeid" field.
func (cecu *CadreEligibleConfigurationUpdate) AddVerifiedbyEmployeeid(i int64) *CadreEligibleConfigurationUpdate {
	cecu.mutation.AddVerifiedbyEmployeeid(i)
	return cecu
}

// ClearVerifiedbyEmployeeid clears the value of the "verifiedbyEmployeeid" field.
func (cecu *CadreEligibleConfigurationUpdate) ClearVerifiedbyEmployeeid() *CadreEligibleConfigurationUpdate {
	cecu.mutation.ClearVerifiedbyEmployeeid()
	return cecu
}

// SetVerifiedbyDesignation sets the "verifiedbyDesignation" field.
func (cecu *CadreEligibleConfigurationUpdate) SetVerifiedbyDesignation(s string) *CadreEligibleConfigurationUpdate {
	cecu.mutation.SetVerifiedbyDesignation(s)
	return cecu
}

// SetNillableVerifiedbyDesignation sets the "verifiedbyDesignation" field if the given value is not nil.
func (cecu *CadreEligibleConfigurationUpdate) SetNillableVerifiedbyDesignation(s *string) *CadreEligibleConfigurationUpdate {
	if s != nil {
		cecu.SetVerifiedbyDesignation(*s)
	}
	return cecu
}

// ClearVerifiedbyDesignation clears the value of the "verifiedbyDesignation" field.
func (cecu *CadreEligibleConfigurationUpdate) ClearVerifiedbyDesignation() *CadreEligibleConfigurationUpdate {
	cecu.mutation.ClearVerifiedbyDesignation()
	return cecu
}

// SetVerifiedDate sets the "verifiedDate" field.
func (cecu *CadreEligibleConfigurationUpdate) SetVerifiedDate(t time.Time) *CadreEligibleConfigurationUpdate {
	cecu.mutation.SetVerifiedDate(t)
	return cecu
}

// SetNillableVerifiedDate sets the "verifiedDate" field if the given value is not nil.
func (cecu *CadreEligibleConfigurationUpdate) SetNillableVerifiedDate(t *time.Time) *CadreEligibleConfigurationUpdate {
	if t != nil {
		cecu.SetVerifiedDate(*t)
	}
	return cecu
}

// ClearVerifiedDate clears the value of the "verifiedDate" field.
func (cecu *CadreEligibleConfigurationUpdate) ClearVerifiedDate() *CadreEligibleConfigurationUpdate {
	cecu.mutation.ClearVerifiedDate()
	return cecu
}

// SetStatuss sets the "Statuss" field.
func (cecu *CadreEligibleConfigurationUpdate) SetStatuss(s string) *CadreEligibleConfigurationUpdate {
	cecu.mutation.SetStatuss(s)
	return cecu
}

// SetNillableStatuss sets the "Statuss" field if the given value is not nil.
func (cecu *CadreEligibleConfigurationUpdate) SetNillableStatuss(s *string) *CadreEligibleConfigurationUpdate {
	if s != nil {
		cecu.SetStatuss(*s)
	}
	return cecu
}

// ClearStatuss clears the value of the "Statuss" field.
func (cecu *CadreEligibleConfigurationUpdate) ClearStatuss() *CadreEligibleConfigurationUpdate {
	cecu.mutation.ClearStatuss()
	return cecu
}

// SetDeletedbyid sets the "deletedbyid" field.
func (cecu *CadreEligibleConfigurationUpdate) SetDeletedbyid(i int64) *CadreEligibleConfigurationUpdate {
	cecu.mutation.ResetDeletedbyid()
	cecu.mutation.SetDeletedbyid(i)
	return cecu
}

// SetNillableDeletedbyid sets the "deletedbyid" field if the given value is not nil.
func (cecu *CadreEligibleConfigurationUpdate) SetNillableDeletedbyid(i *int64) *CadreEligibleConfigurationUpdate {
	if i != nil {
		cecu.SetDeletedbyid(*i)
	}
	return cecu
}

// AddDeletedbyid adds i to the "deletedbyid" field.
func (cecu *CadreEligibleConfigurationUpdate) AddDeletedbyid(i int64) *CadreEligibleConfigurationUpdate {
	cecu.mutation.AddDeletedbyid(i)
	return cecu
}

// ClearDeletedbyid clears the value of the "deletedbyid" field.
func (cecu *CadreEligibleConfigurationUpdate) ClearDeletedbyid() *CadreEligibleConfigurationUpdate {
	cecu.mutation.ClearDeletedbyid()
	return cecu
}

// SetDeletedbyusername sets the "deletedbyusername" field.
func (cecu *CadreEligibleConfigurationUpdate) SetDeletedbyusername(s string) *CadreEligibleConfigurationUpdate {
	cecu.mutation.SetDeletedbyusername(s)
	return cecu
}

// SetNillableDeletedbyusername sets the "deletedbyusername" field if the given value is not nil.
func (cecu *CadreEligibleConfigurationUpdate) SetNillableDeletedbyusername(s *string) *CadreEligibleConfigurationUpdate {
	if s != nil {
		cecu.SetDeletedbyusername(*s)
	}
	return cecu
}

// ClearDeletedbyusername clears the value of the "deletedbyusername" field.
func (cecu *CadreEligibleConfigurationUpdate) ClearDeletedbyusername() *CadreEligibleConfigurationUpdate {
	cecu.mutation.ClearDeletedbyusername()
	return cecu
}

// SetDeletedbyEmployeeid sets the "deletedbyEmployeeid" field.
func (cecu *CadreEligibleConfigurationUpdate) SetDeletedbyEmployeeid(i int64) *CadreEligibleConfigurationUpdate {
	cecu.mutation.ResetDeletedbyEmployeeid()
	cecu.mutation.SetDeletedbyEmployeeid(i)
	return cecu
}

// SetNillableDeletedbyEmployeeid sets the "deletedbyEmployeeid" field if the given value is not nil.
func (cecu *CadreEligibleConfigurationUpdate) SetNillableDeletedbyEmployeeid(i *int64) *CadreEligibleConfigurationUpdate {
	if i != nil {
		cecu.SetDeletedbyEmployeeid(*i)
	}
	return cecu
}

// AddDeletedbyEmployeeid adds i to the "deletedbyEmployeeid" field.
func (cecu *CadreEligibleConfigurationUpdate) AddDeletedbyEmployeeid(i int64) *CadreEligibleConfigurationUpdate {
	cecu.mutation.AddDeletedbyEmployeeid(i)
	return cecu
}

// ClearDeletedbyEmployeeid clears the value of the "deletedbyEmployeeid" field.
func (cecu *CadreEligibleConfigurationUpdate) ClearDeletedbyEmployeeid() *CadreEligibleConfigurationUpdate {
	cecu.mutation.ClearDeletedbyEmployeeid()
	return cecu
}

// SetDeletedbyDesignation sets the "deletedbyDesignation" field.
func (cecu *CadreEligibleConfigurationUpdate) SetDeletedbyDesignation(s string) *CadreEligibleConfigurationUpdate {
	cecu.mutation.SetDeletedbyDesignation(s)
	return cecu
}

// SetNillableDeletedbyDesignation sets the "deletedbyDesignation" field if the given value is not nil.
func (cecu *CadreEligibleConfigurationUpdate) SetNillableDeletedbyDesignation(s *string) *CadreEligibleConfigurationUpdate {
	if s != nil {
		cecu.SetDeletedbyDesignation(*s)
	}
	return cecu
}

// ClearDeletedbyDesignation clears the value of the "deletedbyDesignation" field.
func (cecu *CadreEligibleConfigurationUpdate) ClearDeletedbyDesignation() *CadreEligibleConfigurationUpdate {
	cecu.mutation.ClearDeletedbyDesignation()
	return cecu
}

// SetDeletedDate sets the "deletedDate" field.
func (cecu *CadreEligibleConfigurationUpdate) SetDeletedDate(t time.Time) *CadreEligibleConfigurationUpdate {
	cecu.mutation.SetDeletedDate(t)
	return cecu
}

// SetNillableDeletedDate sets the "deletedDate" field if the given value is not nil.
func (cecu *CadreEligibleConfigurationUpdate) SetNillableDeletedDate(t *time.Time) *CadreEligibleConfigurationUpdate {
	if t != nil {
		cecu.SetDeletedDate(*t)
	}
	return cecu
}

// ClearDeletedDate clears the value of the "deletedDate" field.
func (cecu *CadreEligibleConfigurationUpdate) ClearDeletedDate() *CadreEligibleConfigurationUpdate {
	cecu.mutation.ClearDeletedDate()
	return cecu
}

// AddLogDatumIDs adds the "LogData" edge to the Logs entity by IDs.
func (cecu *CadreEligibleConfigurationUpdate) AddLogDatumIDs(ids ...int64) *CadreEligibleConfigurationUpdate {
	cecu.mutation.AddLogDatumIDs(ids...)
	return cecu
}

// AddLogData adds the "LogData" edges to the Logs entity.
func (cecu *CadreEligibleConfigurationUpdate) AddLogData(l ...*Logs) *CadreEligibleConfigurationUpdate {
	ids := make([]int64, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return cecu.AddLogDatumIDs(ids...)
}

// Mutation returns the CadreEligibleConfigurationMutation object of the builder.
func (cecu *CadreEligibleConfigurationUpdate) Mutation() *CadreEligibleConfigurationMutation {
	return cecu.mutation
}

// ClearLogData clears all "LogData" edges to the Logs entity.
func (cecu *CadreEligibleConfigurationUpdate) ClearLogData() *CadreEligibleConfigurationUpdate {
	cecu.mutation.ClearLogData()
	return cecu
}

// RemoveLogDatumIDs removes the "LogData" edge to Logs entities by IDs.
func (cecu *CadreEligibleConfigurationUpdate) RemoveLogDatumIDs(ids ...int64) *CadreEligibleConfigurationUpdate {
	cecu.mutation.RemoveLogDatumIDs(ids...)
	return cecu
}

// RemoveLogData removes "LogData" edges to Logs entities.
func (cecu *CadreEligibleConfigurationUpdate) RemoveLogData(l ...*Logs) *CadreEligibleConfigurationUpdate {
	ids := make([]int64, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return cecu.RemoveLogDatumIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cecu *CadreEligibleConfigurationUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, cecu.sqlSave, cecu.mutation, cecu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cecu *CadreEligibleConfigurationUpdate) SaveX(ctx context.Context) int {
	affected, err := cecu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cecu *CadreEligibleConfigurationUpdate) Exec(ctx context.Context) error {
	_, err := cecu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cecu *CadreEligibleConfigurationUpdate) ExecX(ctx context.Context) {
	if err := cecu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cecu *CadreEligibleConfigurationUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(cadreeligibleconfiguration.Table, cadreeligibleconfiguration.Columns, sqlgraph.NewFieldSpec(cadreeligibleconfiguration.FieldID, field.TypeInt64))
	if ps := cecu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cecu.mutation.ExamCode(); ok {
		_spec.SetField(cadreeligibleconfiguration.FieldExamCode, field.TypeInt64, value)
	}
	if value, ok := cecu.mutation.AddedExamCode(); ok {
		_spec.AddField(cadreeligibleconfiguration.FieldExamCode, field.TypeInt64, value)
	}
	if cecu.mutation.ExamCodeCleared() {
		_spec.ClearField(cadreeligibleconfiguration.FieldExamCode, field.TypeInt64)
	}
	if value, ok := cecu.mutation.ExamName(); ok {
		_spec.SetField(cadreeligibleconfiguration.FieldExamName, field.TypeString, value)
	}
	if cecu.mutation.ExamNameCleared() {
		_spec.ClearField(cadreeligibleconfiguration.FieldExamName, field.TypeString)
	}
	if value, ok := cecu.mutation.ExamShortName(); ok {
		_spec.SetField(cadreeligibleconfiguration.FieldExamShortName, field.TypeString, value)
	}
	if cecu.mutation.ExamShortNameCleared() {
		_spec.ClearField(cadreeligibleconfiguration.FieldExamShortName, field.TypeString)
	}
	if value, ok := cecu.mutation.PostID(); ok {
		_spec.SetField(cadreeligibleconfiguration.FieldPostID, field.TypeInt64, value)
	}
	if value, ok := cecu.mutation.AddedPostID(); ok {
		_spec.AddField(cadreeligibleconfiguration.FieldPostID, field.TypeInt64, value)
	}
	if cecu.mutation.PostIDCleared() {
		_spec.ClearField(cadreeligibleconfiguration.FieldPostID, field.TypeInt64)
	}
	if value, ok := cecu.mutation.PostCode(); ok {
		_spec.SetField(cadreeligibleconfiguration.FieldPostCode, field.TypeString, value)
	}
	if cecu.mutation.PostCodeCleared() {
		_spec.ClearField(cadreeligibleconfiguration.FieldPostCode, field.TypeString)
	}
	if value, ok := cecu.mutation.PostDescription(); ok {
		_spec.SetField(cadreeligibleconfiguration.FieldPostDescription, field.TypeString, value)
	}
	if cecu.mutation.PostDescriptionCleared() {
		_spec.ClearField(cadreeligibleconfiguration.FieldPostDescription, field.TypeString)
	}
	if value, ok := cecu.mutation.GdsService(); ok {
		_spec.SetField(cadreeligibleconfiguration.FieldGdsService, field.TypeInt64, value)
	}
	if value, ok := cecu.mutation.AddedGdsService(); ok {
		_spec.AddField(cadreeligibleconfiguration.FieldGdsService, field.TypeInt64, value)
	}
	if cecu.mutation.GdsServiceCleared() {
		_spec.ClearField(cadreeligibleconfiguration.FieldGdsService, field.TypeInt64)
	}
	if value, ok := cecu.mutation.CategoryCode(); ok {
		_spec.SetField(cadreeligibleconfiguration.FieldCategoryCode, field.TypeString, value)
	}
	if cecu.mutation.CategoryCodeCleared() {
		_spec.ClearField(cadreeligibleconfiguration.FieldCategoryCode, field.TypeString)
	}
	if value, ok := cecu.mutation.AgeCriteria(); ok {
		_spec.SetField(cadreeligibleconfiguration.FieldAgeCriteria, field.TypeInt64, value)
	}
	if value, ok := cecu.mutation.AddedAgeCriteria(); ok {
		_spec.AddField(cadreeligibleconfiguration.FieldAgeCriteria, field.TypeInt64, value)
	}
	if cecu.mutation.AgeCriteriaCleared() {
		_spec.ClearField(cadreeligibleconfiguration.FieldAgeCriteria, field.TypeInt64)
	}
	if value, ok := cecu.mutation.ServiceCriteria(); ok {
		_spec.SetField(cadreeligibleconfiguration.FieldServiceCriteria, field.TypeInt64, value)
	}
	if value, ok := cecu.mutation.AddedServiceCriteria(); ok {
		_spec.AddField(cadreeligibleconfiguration.FieldServiceCriteria, field.TypeInt64, value)
	}
	if cecu.mutation.ServiceCriteriaCleared() {
		_spec.ClearField(cadreeligibleconfiguration.FieldServiceCriteria, field.TypeInt64)
	}
	if value, ok := cecu.mutation.DrivingLicenceCriteria(); ok {
		_spec.SetField(cadreeligibleconfiguration.FieldDrivingLicenceCriteria, field.TypeInt64, value)
	}
	if value, ok := cecu.mutation.AddedDrivingLicenceCriteria(); ok {
		_spec.AddField(cadreeligibleconfiguration.FieldDrivingLicenceCriteria, field.TypeInt64, value)
	}
	if cecu.mutation.DrivingLicenceCriteriaCleared() {
		_spec.ClearField(cadreeligibleconfiguration.FieldDrivingLicenceCriteria, field.TypeInt64)
	}
	if value, ok := cecu.mutation.ComputerKnowledge(); ok {
		_spec.SetField(cadreeligibleconfiguration.FieldComputerKnowledge, field.TypeInt64, value)
	}
	if value, ok := cecu.mutation.AddedComputerKnowledge(); ok {
		_spec.AddField(cadreeligibleconfiguration.FieldComputerKnowledge, field.TypeInt64, value)
	}
	if cecu.mutation.ComputerKnowledgeCleared() {
		_spec.ClearField(cadreeligibleconfiguration.FieldComputerKnowledge, field.TypeInt64)
	}
	if value, ok := cecu.mutation.EligibilityBasedOnLevelOfPayMatrix(); ok {
		_spec.SetField(cadreeligibleconfiguration.FieldEligibilityBasedOnLevelOfPayMatrix, field.TypeInt64, value)
	}
	if value, ok := cecu.mutation.AddedEligibilityBasedOnLevelOfPayMatrix(); ok {
		_spec.AddField(cadreeligibleconfiguration.FieldEligibilityBasedOnLevelOfPayMatrix, field.TypeInt64, value)
	}
	if cecu.mutation.EligibilityBasedOnLevelOfPayMatrixCleared() {
		_spec.ClearField(cadreeligibleconfiguration.FieldEligibilityBasedOnLevelOfPayMatrix, field.TypeInt64)
	}
	if value, ok := cecu.mutation.EducationCode(); ok {
		_spec.SetField(cadreeligibleconfiguration.FieldEducationCode, field.TypeInt64, value)
	}
	if value, ok := cecu.mutation.AddedEducationCode(); ok {
		_spec.AddField(cadreeligibleconfiguration.FieldEducationCode, field.TypeInt64, value)
	}
	if cecu.mutation.EducationCodeCleared() {
		_spec.ClearField(cadreeligibleconfiguration.FieldEducationCode, field.TypeInt64)
	}
	if value, ok := cecu.mutation.EducationDescription(); ok {
		_spec.SetField(cadreeligibleconfiguration.FieldEducationDescription, field.TypeString, value)
	}
	if cecu.mutation.EducationDescriptionCleared() {
		_spec.ClearField(cadreeligibleconfiguration.FieldEducationDescription, field.TypeString)
	}
	if value, ok := cecu.mutation.OrderNumber(); ok {
		_spec.SetField(cadreeligibleconfiguration.FieldOrderNumber, field.TypeString, value)
	}
	if cecu.mutation.OrderNumberCleared() {
		_spec.ClearField(cadreeligibleconfiguration.FieldOrderNumber, field.TypeString)
	}
	if value, ok := cecu.mutation.CreatedById(); ok {
		_spec.SetField(cadreeligibleconfiguration.FieldCreatedById, field.TypeInt64, value)
	}
	if value, ok := cecu.mutation.AddedCreatedById(); ok {
		_spec.AddField(cadreeligibleconfiguration.FieldCreatedById, field.TypeInt64, value)
	}
	if cecu.mutation.CreatedByIdCleared() {
		_spec.ClearField(cadreeligibleconfiguration.FieldCreatedById, field.TypeInt64)
	}
	if value, ok := cecu.mutation.CreatedByUserName(); ok {
		_spec.SetField(cadreeligibleconfiguration.FieldCreatedByUserName, field.TypeString, value)
	}
	if cecu.mutation.CreatedByUserNameCleared() {
		_spec.ClearField(cadreeligibleconfiguration.FieldCreatedByUserName, field.TypeString)
	}
	if value, ok := cecu.mutation.CreatedByEmpId(); ok {
		_spec.SetField(cadreeligibleconfiguration.FieldCreatedByEmpId, field.TypeInt64, value)
	}
	if value, ok := cecu.mutation.AddedCreatedByEmpId(); ok {
		_spec.AddField(cadreeligibleconfiguration.FieldCreatedByEmpId, field.TypeInt64, value)
	}
	if cecu.mutation.CreatedByEmpIdCleared() {
		_spec.ClearField(cadreeligibleconfiguration.FieldCreatedByEmpId, field.TypeInt64)
	}
	if value, ok := cecu.mutation.CreatedByDesignation(); ok {
		_spec.SetField(cadreeligibleconfiguration.FieldCreatedByDesignation, field.TypeString, value)
	}
	if cecu.mutation.CreatedByDesignationCleared() {
		_spec.ClearField(cadreeligibleconfiguration.FieldCreatedByDesignation, field.TypeString)
	}
	if value, ok := cecu.mutation.CreatedDate(); ok {
		_spec.SetField(cadreeligibleconfiguration.FieldCreatedDate, field.TypeTime, value)
	}
	if cecu.mutation.CreatedDateCleared() {
		_spec.ClearField(cadreeligibleconfiguration.FieldCreatedDate, field.TypeTime)
	}
	if value, ok := cecu.mutation.Verifiedbyid(); ok {
		_spec.SetField(cadreeligibleconfiguration.FieldVerifiedbyid, field.TypeInt64, value)
	}
	if value, ok := cecu.mutation.AddedVerifiedbyid(); ok {
		_spec.AddField(cadreeligibleconfiguration.FieldVerifiedbyid, field.TypeInt64, value)
	}
	if cecu.mutation.VerifiedbyidCleared() {
		_spec.ClearField(cadreeligibleconfiguration.FieldVerifiedbyid, field.TypeInt64)
	}
	if value, ok := cecu.mutation.Verifiedbyusername(); ok {
		_spec.SetField(cadreeligibleconfiguration.FieldVerifiedbyusername, field.TypeString, value)
	}
	if cecu.mutation.VerifiedbyusernameCleared() {
		_spec.ClearField(cadreeligibleconfiguration.FieldVerifiedbyusername, field.TypeString)
	}
	if value, ok := cecu.mutation.VerifiedbyEmployeeid(); ok {
		_spec.SetField(cadreeligibleconfiguration.FieldVerifiedbyEmployeeid, field.TypeInt64, value)
	}
	if value, ok := cecu.mutation.AddedVerifiedbyEmployeeid(); ok {
		_spec.AddField(cadreeligibleconfiguration.FieldVerifiedbyEmployeeid, field.TypeInt64, value)
	}
	if cecu.mutation.VerifiedbyEmployeeidCleared() {
		_spec.ClearField(cadreeligibleconfiguration.FieldVerifiedbyEmployeeid, field.TypeInt64)
	}
	if value, ok := cecu.mutation.VerifiedbyDesignation(); ok {
		_spec.SetField(cadreeligibleconfiguration.FieldVerifiedbyDesignation, field.TypeString, value)
	}
	if cecu.mutation.VerifiedbyDesignationCleared() {
		_spec.ClearField(cadreeligibleconfiguration.FieldVerifiedbyDesignation, field.TypeString)
	}
	if value, ok := cecu.mutation.VerifiedDate(); ok {
		_spec.SetField(cadreeligibleconfiguration.FieldVerifiedDate, field.TypeTime, value)
	}
	if cecu.mutation.VerifiedDateCleared() {
		_spec.ClearField(cadreeligibleconfiguration.FieldVerifiedDate, field.TypeTime)
	}
	if value, ok := cecu.mutation.Statuss(); ok {
		_spec.SetField(cadreeligibleconfiguration.FieldStatuss, field.TypeString, value)
	}
	if cecu.mutation.StatussCleared() {
		_spec.ClearField(cadreeligibleconfiguration.FieldStatuss, field.TypeString)
	}
	if value, ok := cecu.mutation.Deletedbyid(); ok {
		_spec.SetField(cadreeligibleconfiguration.FieldDeletedbyid, field.TypeInt64, value)
	}
	if value, ok := cecu.mutation.AddedDeletedbyid(); ok {
		_spec.AddField(cadreeligibleconfiguration.FieldDeletedbyid, field.TypeInt64, value)
	}
	if cecu.mutation.DeletedbyidCleared() {
		_spec.ClearField(cadreeligibleconfiguration.FieldDeletedbyid, field.TypeInt64)
	}
	if value, ok := cecu.mutation.Deletedbyusername(); ok {
		_spec.SetField(cadreeligibleconfiguration.FieldDeletedbyusername, field.TypeString, value)
	}
	if cecu.mutation.DeletedbyusernameCleared() {
		_spec.ClearField(cadreeligibleconfiguration.FieldDeletedbyusername, field.TypeString)
	}
	if value, ok := cecu.mutation.DeletedbyEmployeeid(); ok {
		_spec.SetField(cadreeligibleconfiguration.FieldDeletedbyEmployeeid, field.TypeInt64, value)
	}
	if value, ok := cecu.mutation.AddedDeletedbyEmployeeid(); ok {
		_spec.AddField(cadreeligibleconfiguration.FieldDeletedbyEmployeeid, field.TypeInt64, value)
	}
	if cecu.mutation.DeletedbyEmployeeidCleared() {
		_spec.ClearField(cadreeligibleconfiguration.FieldDeletedbyEmployeeid, field.TypeInt64)
	}
	if value, ok := cecu.mutation.DeletedbyDesignation(); ok {
		_spec.SetField(cadreeligibleconfiguration.FieldDeletedbyDesignation, field.TypeString, value)
	}
	if cecu.mutation.DeletedbyDesignationCleared() {
		_spec.ClearField(cadreeligibleconfiguration.FieldDeletedbyDesignation, field.TypeString)
	}
	if value, ok := cecu.mutation.DeletedDate(); ok {
		_spec.SetField(cadreeligibleconfiguration.FieldDeletedDate, field.TypeTime, value)
	}
	if cecu.mutation.DeletedDateCleared() {
		_spec.ClearField(cadreeligibleconfiguration.FieldDeletedDate, field.TypeTime)
	}
	if cecu.mutation.LogDataCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   cadreeligibleconfiguration.LogDataTable,
			Columns: []string{cadreeligibleconfiguration.LogDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(logs.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cecu.mutation.RemovedLogDataIDs(); len(nodes) > 0 && !cecu.mutation.LogDataCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   cadreeligibleconfiguration.LogDataTable,
			Columns: []string{cadreeligibleconfiguration.LogDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(logs.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cecu.mutation.LogDataIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   cadreeligibleconfiguration.LogDataTable,
			Columns: []string{cadreeligibleconfiguration.LogDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(logs.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cecu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{cadreeligibleconfiguration.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cecu.mutation.done = true
	return n, nil
}

// CadreEligibleConfigurationUpdateOne is the builder for updating a single CadreEligibleConfiguration entity.
type CadreEligibleConfigurationUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CadreEligibleConfigurationMutation
}

// SetExamCode sets the "ExamCode" field.
func (cecuo *CadreEligibleConfigurationUpdateOne) SetExamCode(i int64) *CadreEligibleConfigurationUpdateOne {
	cecuo.mutation.ResetExamCode()
	cecuo.mutation.SetExamCode(i)
	return cecuo
}

// SetNillableExamCode sets the "ExamCode" field if the given value is not nil.
func (cecuo *CadreEligibleConfigurationUpdateOne) SetNillableExamCode(i *int64) *CadreEligibleConfigurationUpdateOne {
	if i != nil {
		cecuo.SetExamCode(*i)
	}
	return cecuo
}

// AddExamCode adds i to the "ExamCode" field.
func (cecuo *CadreEligibleConfigurationUpdateOne) AddExamCode(i int64) *CadreEligibleConfigurationUpdateOne {
	cecuo.mutation.AddExamCode(i)
	return cecuo
}

// ClearExamCode clears the value of the "ExamCode" field.
func (cecuo *CadreEligibleConfigurationUpdateOne) ClearExamCode() *CadreEligibleConfigurationUpdateOne {
	cecuo.mutation.ClearExamCode()
	return cecuo
}

// SetExamName sets the "ExamName" field.
func (cecuo *CadreEligibleConfigurationUpdateOne) SetExamName(s string) *CadreEligibleConfigurationUpdateOne {
	cecuo.mutation.SetExamName(s)
	return cecuo
}

// SetNillableExamName sets the "ExamName" field if the given value is not nil.
func (cecuo *CadreEligibleConfigurationUpdateOne) SetNillableExamName(s *string) *CadreEligibleConfigurationUpdateOne {
	if s != nil {
		cecuo.SetExamName(*s)
	}
	return cecuo
}

// ClearExamName clears the value of the "ExamName" field.
func (cecuo *CadreEligibleConfigurationUpdateOne) ClearExamName() *CadreEligibleConfigurationUpdateOne {
	cecuo.mutation.ClearExamName()
	return cecuo
}

// SetExamShortName sets the "ExamShortName" field.
func (cecuo *CadreEligibleConfigurationUpdateOne) SetExamShortName(s string) *CadreEligibleConfigurationUpdateOne {
	cecuo.mutation.SetExamShortName(s)
	return cecuo
}

// SetNillableExamShortName sets the "ExamShortName" field if the given value is not nil.
func (cecuo *CadreEligibleConfigurationUpdateOne) SetNillableExamShortName(s *string) *CadreEligibleConfigurationUpdateOne {
	if s != nil {
		cecuo.SetExamShortName(*s)
	}
	return cecuo
}

// ClearExamShortName clears the value of the "ExamShortName" field.
func (cecuo *CadreEligibleConfigurationUpdateOne) ClearExamShortName() *CadreEligibleConfigurationUpdateOne {
	cecuo.mutation.ClearExamShortName()
	return cecuo
}

// SetPostID sets the "PostID" field.
func (cecuo *CadreEligibleConfigurationUpdateOne) SetPostID(i int64) *CadreEligibleConfigurationUpdateOne {
	cecuo.mutation.ResetPostID()
	cecuo.mutation.SetPostID(i)
	return cecuo
}

// SetNillablePostID sets the "PostID" field if the given value is not nil.
func (cecuo *CadreEligibleConfigurationUpdateOne) SetNillablePostID(i *int64) *CadreEligibleConfigurationUpdateOne {
	if i != nil {
		cecuo.SetPostID(*i)
	}
	return cecuo
}

// AddPostID adds i to the "PostID" field.
func (cecuo *CadreEligibleConfigurationUpdateOne) AddPostID(i int64) *CadreEligibleConfigurationUpdateOne {
	cecuo.mutation.AddPostID(i)
	return cecuo
}

// ClearPostID clears the value of the "PostID" field.
func (cecuo *CadreEligibleConfigurationUpdateOne) ClearPostID() *CadreEligibleConfigurationUpdateOne {
	cecuo.mutation.ClearPostID()
	return cecuo
}

// SetPostCode sets the "PostCode" field.
func (cecuo *CadreEligibleConfigurationUpdateOne) SetPostCode(s string) *CadreEligibleConfigurationUpdateOne {
	cecuo.mutation.SetPostCode(s)
	return cecuo
}

// SetNillablePostCode sets the "PostCode" field if the given value is not nil.
func (cecuo *CadreEligibleConfigurationUpdateOne) SetNillablePostCode(s *string) *CadreEligibleConfigurationUpdateOne {
	if s != nil {
		cecuo.SetPostCode(*s)
	}
	return cecuo
}

// ClearPostCode clears the value of the "PostCode" field.
func (cecuo *CadreEligibleConfigurationUpdateOne) ClearPostCode() *CadreEligibleConfigurationUpdateOne {
	cecuo.mutation.ClearPostCode()
	return cecuo
}

// SetPostDescription sets the "PostDescription" field.
func (cecuo *CadreEligibleConfigurationUpdateOne) SetPostDescription(s string) *CadreEligibleConfigurationUpdateOne {
	cecuo.mutation.SetPostDescription(s)
	return cecuo
}

// SetNillablePostDescription sets the "PostDescription" field if the given value is not nil.
func (cecuo *CadreEligibleConfigurationUpdateOne) SetNillablePostDescription(s *string) *CadreEligibleConfigurationUpdateOne {
	if s != nil {
		cecuo.SetPostDescription(*s)
	}
	return cecuo
}

// ClearPostDescription clears the value of the "PostDescription" field.
func (cecuo *CadreEligibleConfigurationUpdateOne) ClearPostDescription() *CadreEligibleConfigurationUpdateOne {
	cecuo.mutation.ClearPostDescription()
	return cecuo
}

// SetGdsService sets the "gdsService" field.
func (cecuo *CadreEligibleConfigurationUpdateOne) SetGdsService(i int64) *CadreEligibleConfigurationUpdateOne {
	cecuo.mutation.ResetGdsService()
	cecuo.mutation.SetGdsService(i)
	return cecuo
}

// SetNillableGdsService sets the "gdsService" field if the given value is not nil.
func (cecuo *CadreEligibleConfigurationUpdateOne) SetNillableGdsService(i *int64) *CadreEligibleConfigurationUpdateOne {
	if i != nil {
		cecuo.SetGdsService(*i)
	}
	return cecuo
}

// AddGdsService adds i to the "gdsService" field.
func (cecuo *CadreEligibleConfigurationUpdateOne) AddGdsService(i int64) *CadreEligibleConfigurationUpdateOne {
	cecuo.mutation.AddGdsService(i)
	return cecuo
}

// ClearGdsService clears the value of the "gdsService" field.
func (cecuo *CadreEligibleConfigurationUpdateOne) ClearGdsService() *CadreEligibleConfigurationUpdateOne {
	cecuo.mutation.ClearGdsService()
	return cecuo
}

// SetCategoryCode sets the "CategoryCode" field.
func (cecuo *CadreEligibleConfigurationUpdateOne) SetCategoryCode(s string) *CadreEligibleConfigurationUpdateOne {
	cecuo.mutation.SetCategoryCode(s)
	return cecuo
}

// SetNillableCategoryCode sets the "CategoryCode" field if the given value is not nil.
func (cecuo *CadreEligibleConfigurationUpdateOne) SetNillableCategoryCode(s *string) *CadreEligibleConfigurationUpdateOne {
	if s != nil {
		cecuo.SetCategoryCode(*s)
	}
	return cecuo
}

// ClearCategoryCode clears the value of the "CategoryCode" field.
func (cecuo *CadreEligibleConfigurationUpdateOne) ClearCategoryCode() *CadreEligibleConfigurationUpdateOne {
	cecuo.mutation.ClearCategoryCode()
	return cecuo
}

// SetAgeCriteria sets the "ageCriteria" field.
func (cecuo *CadreEligibleConfigurationUpdateOne) SetAgeCriteria(i int64) *CadreEligibleConfigurationUpdateOne {
	cecuo.mutation.ResetAgeCriteria()
	cecuo.mutation.SetAgeCriteria(i)
	return cecuo
}

// SetNillableAgeCriteria sets the "ageCriteria" field if the given value is not nil.
func (cecuo *CadreEligibleConfigurationUpdateOne) SetNillableAgeCriteria(i *int64) *CadreEligibleConfigurationUpdateOne {
	if i != nil {
		cecuo.SetAgeCriteria(*i)
	}
	return cecuo
}

// AddAgeCriteria adds i to the "ageCriteria" field.
func (cecuo *CadreEligibleConfigurationUpdateOne) AddAgeCriteria(i int64) *CadreEligibleConfigurationUpdateOne {
	cecuo.mutation.AddAgeCriteria(i)
	return cecuo
}

// ClearAgeCriteria clears the value of the "ageCriteria" field.
func (cecuo *CadreEligibleConfigurationUpdateOne) ClearAgeCriteria() *CadreEligibleConfigurationUpdateOne {
	cecuo.mutation.ClearAgeCriteria()
	return cecuo
}

// SetServiceCriteria sets the "serviceCriteria" field.
func (cecuo *CadreEligibleConfigurationUpdateOne) SetServiceCriteria(i int64) *CadreEligibleConfigurationUpdateOne {
	cecuo.mutation.ResetServiceCriteria()
	cecuo.mutation.SetServiceCriteria(i)
	return cecuo
}

// SetNillableServiceCriteria sets the "serviceCriteria" field if the given value is not nil.
func (cecuo *CadreEligibleConfigurationUpdateOne) SetNillableServiceCriteria(i *int64) *CadreEligibleConfigurationUpdateOne {
	if i != nil {
		cecuo.SetServiceCriteria(*i)
	}
	return cecuo
}

// AddServiceCriteria adds i to the "serviceCriteria" field.
func (cecuo *CadreEligibleConfigurationUpdateOne) AddServiceCriteria(i int64) *CadreEligibleConfigurationUpdateOne {
	cecuo.mutation.AddServiceCriteria(i)
	return cecuo
}

// ClearServiceCriteria clears the value of the "serviceCriteria" field.
func (cecuo *CadreEligibleConfigurationUpdateOne) ClearServiceCriteria() *CadreEligibleConfigurationUpdateOne {
	cecuo.mutation.ClearServiceCriteria()
	return cecuo
}

// SetDrivingLicenceCriteria sets the "drivingLicenceCriteria" field.
func (cecuo *CadreEligibleConfigurationUpdateOne) SetDrivingLicenceCriteria(i int64) *CadreEligibleConfigurationUpdateOne {
	cecuo.mutation.ResetDrivingLicenceCriteria()
	cecuo.mutation.SetDrivingLicenceCriteria(i)
	return cecuo
}

// SetNillableDrivingLicenceCriteria sets the "drivingLicenceCriteria" field if the given value is not nil.
func (cecuo *CadreEligibleConfigurationUpdateOne) SetNillableDrivingLicenceCriteria(i *int64) *CadreEligibleConfigurationUpdateOne {
	if i != nil {
		cecuo.SetDrivingLicenceCriteria(*i)
	}
	return cecuo
}

// AddDrivingLicenceCriteria adds i to the "drivingLicenceCriteria" field.
func (cecuo *CadreEligibleConfigurationUpdateOne) AddDrivingLicenceCriteria(i int64) *CadreEligibleConfigurationUpdateOne {
	cecuo.mutation.AddDrivingLicenceCriteria(i)
	return cecuo
}

// ClearDrivingLicenceCriteria clears the value of the "drivingLicenceCriteria" field.
func (cecuo *CadreEligibleConfigurationUpdateOne) ClearDrivingLicenceCriteria() *CadreEligibleConfigurationUpdateOne {
	cecuo.mutation.ClearDrivingLicenceCriteria()
	return cecuo
}

// SetComputerKnowledge sets the "computerKnowledge" field.
func (cecuo *CadreEligibleConfigurationUpdateOne) SetComputerKnowledge(i int64) *CadreEligibleConfigurationUpdateOne {
	cecuo.mutation.ResetComputerKnowledge()
	cecuo.mutation.SetComputerKnowledge(i)
	return cecuo
}

// SetNillableComputerKnowledge sets the "computerKnowledge" field if the given value is not nil.
func (cecuo *CadreEligibleConfigurationUpdateOne) SetNillableComputerKnowledge(i *int64) *CadreEligibleConfigurationUpdateOne {
	if i != nil {
		cecuo.SetComputerKnowledge(*i)
	}
	return cecuo
}

// AddComputerKnowledge adds i to the "computerKnowledge" field.
func (cecuo *CadreEligibleConfigurationUpdateOne) AddComputerKnowledge(i int64) *CadreEligibleConfigurationUpdateOne {
	cecuo.mutation.AddComputerKnowledge(i)
	return cecuo
}

// ClearComputerKnowledge clears the value of the "computerKnowledge" field.
func (cecuo *CadreEligibleConfigurationUpdateOne) ClearComputerKnowledge() *CadreEligibleConfigurationUpdateOne {
	cecuo.mutation.ClearComputerKnowledge()
	return cecuo
}

// SetEligibilityBasedOnLevelOfPayMatrix sets the "eligibilityBasedOnLevelOfPayMatrix" field.
func (cecuo *CadreEligibleConfigurationUpdateOne) SetEligibilityBasedOnLevelOfPayMatrix(i int64) *CadreEligibleConfigurationUpdateOne {
	cecuo.mutation.ResetEligibilityBasedOnLevelOfPayMatrix()
	cecuo.mutation.SetEligibilityBasedOnLevelOfPayMatrix(i)
	return cecuo
}

// SetNillableEligibilityBasedOnLevelOfPayMatrix sets the "eligibilityBasedOnLevelOfPayMatrix" field if the given value is not nil.
func (cecuo *CadreEligibleConfigurationUpdateOne) SetNillableEligibilityBasedOnLevelOfPayMatrix(i *int64) *CadreEligibleConfigurationUpdateOne {
	if i != nil {
		cecuo.SetEligibilityBasedOnLevelOfPayMatrix(*i)
	}
	return cecuo
}

// AddEligibilityBasedOnLevelOfPayMatrix adds i to the "eligibilityBasedOnLevelOfPayMatrix" field.
func (cecuo *CadreEligibleConfigurationUpdateOne) AddEligibilityBasedOnLevelOfPayMatrix(i int64) *CadreEligibleConfigurationUpdateOne {
	cecuo.mutation.AddEligibilityBasedOnLevelOfPayMatrix(i)
	return cecuo
}

// ClearEligibilityBasedOnLevelOfPayMatrix clears the value of the "eligibilityBasedOnLevelOfPayMatrix" field.
func (cecuo *CadreEligibleConfigurationUpdateOne) ClearEligibilityBasedOnLevelOfPayMatrix() *CadreEligibleConfigurationUpdateOne {
	cecuo.mutation.ClearEligibilityBasedOnLevelOfPayMatrix()
	return cecuo
}

// SetEducationCode sets the "educationCode" field.
func (cecuo *CadreEligibleConfigurationUpdateOne) SetEducationCode(i int64) *CadreEligibleConfigurationUpdateOne {
	cecuo.mutation.ResetEducationCode()
	cecuo.mutation.SetEducationCode(i)
	return cecuo
}

// SetNillableEducationCode sets the "educationCode" field if the given value is not nil.
func (cecuo *CadreEligibleConfigurationUpdateOne) SetNillableEducationCode(i *int64) *CadreEligibleConfigurationUpdateOne {
	if i != nil {
		cecuo.SetEducationCode(*i)
	}
	return cecuo
}

// AddEducationCode adds i to the "educationCode" field.
func (cecuo *CadreEligibleConfigurationUpdateOne) AddEducationCode(i int64) *CadreEligibleConfigurationUpdateOne {
	cecuo.mutation.AddEducationCode(i)
	return cecuo
}

// ClearEducationCode clears the value of the "educationCode" field.
func (cecuo *CadreEligibleConfigurationUpdateOne) ClearEducationCode() *CadreEligibleConfigurationUpdateOne {
	cecuo.mutation.ClearEducationCode()
	return cecuo
}

// SetEducationDescription sets the "educationDescription" field.
func (cecuo *CadreEligibleConfigurationUpdateOne) SetEducationDescription(s string) *CadreEligibleConfigurationUpdateOne {
	cecuo.mutation.SetEducationDescription(s)
	return cecuo
}

// SetNillableEducationDescription sets the "educationDescription" field if the given value is not nil.
func (cecuo *CadreEligibleConfigurationUpdateOne) SetNillableEducationDescription(s *string) *CadreEligibleConfigurationUpdateOne {
	if s != nil {
		cecuo.SetEducationDescription(*s)
	}
	return cecuo
}

// ClearEducationDescription clears the value of the "educationDescription" field.
func (cecuo *CadreEligibleConfigurationUpdateOne) ClearEducationDescription() *CadreEligibleConfigurationUpdateOne {
	cecuo.mutation.ClearEducationDescription()
	return cecuo
}

// SetOrderNumber sets the "OrderNumber" field.
func (cecuo *CadreEligibleConfigurationUpdateOne) SetOrderNumber(s string) *CadreEligibleConfigurationUpdateOne {
	cecuo.mutation.SetOrderNumber(s)
	return cecuo
}

// SetNillableOrderNumber sets the "OrderNumber" field if the given value is not nil.
func (cecuo *CadreEligibleConfigurationUpdateOne) SetNillableOrderNumber(s *string) *CadreEligibleConfigurationUpdateOne {
	if s != nil {
		cecuo.SetOrderNumber(*s)
	}
	return cecuo
}

// ClearOrderNumber clears the value of the "OrderNumber" field.
func (cecuo *CadreEligibleConfigurationUpdateOne) ClearOrderNumber() *CadreEligibleConfigurationUpdateOne {
	cecuo.mutation.ClearOrderNumber()
	return cecuo
}

// SetCreatedById sets the "CreatedById" field.
func (cecuo *CadreEligibleConfigurationUpdateOne) SetCreatedById(i int64) *CadreEligibleConfigurationUpdateOne {
	cecuo.mutation.ResetCreatedById()
	cecuo.mutation.SetCreatedById(i)
	return cecuo
}

// SetNillableCreatedById sets the "CreatedById" field if the given value is not nil.
func (cecuo *CadreEligibleConfigurationUpdateOne) SetNillableCreatedById(i *int64) *CadreEligibleConfigurationUpdateOne {
	if i != nil {
		cecuo.SetCreatedById(*i)
	}
	return cecuo
}

// AddCreatedById adds i to the "CreatedById" field.
func (cecuo *CadreEligibleConfigurationUpdateOne) AddCreatedById(i int64) *CadreEligibleConfigurationUpdateOne {
	cecuo.mutation.AddCreatedById(i)
	return cecuo
}

// ClearCreatedById clears the value of the "CreatedById" field.
func (cecuo *CadreEligibleConfigurationUpdateOne) ClearCreatedById() *CadreEligibleConfigurationUpdateOne {
	cecuo.mutation.ClearCreatedById()
	return cecuo
}

// SetCreatedByUserName sets the "CreatedByUserName" field.
func (cecuo *CadreEligibleConfigurationUpdateOne) SetCreatedByUserName(s string) *CadreEligibleConfigurationUpdateOne {
	cecuo.mutation.SetCreatedByUserName(s)
	return cecuo
}

// SetNillableCreatedByUserName sets the "CreatedByUserName" field if the given value is not nil.
func (cecuo *CadreEligibleConfigurationUpdateOne) SetNillableCreatedByUserName(s *string) *CadreEligibleConfigurationUpdateOne {
	if s != nil {
		cecuo.SetCreatedByUserName(*s)
	}
	return cecuo
}

// ClearCreatedByUserName clears the value of the "CreatedByUserName" field.
func (cecuo *CadreEligibleConfigurationUpdateOne) ClearCreatedByUserName() *CadreEligibleConfigurationUpdateOne {
	cecuo.mutation.ClearCreatedByUserName()
	return cecuo
}

// SetCreatedByEmpId sets the "CreatedByEmpId" field.
func (cecuo *CadreEligibleConfigurationUpdateOne) SetCreatedByEmpId(i int64) *CadreEligibleConfigurationUpdateOne {
	cecuo.mutation.ResetCreatedByEmpId()
	cecuo.mutation.SetCreatedByEmpId(i)
	return cecuo
}

// SetNillableCreatedByEmpId sets the "CreatedByEmpId" field if the given value is not nil.
func (cecuo *CadreEligibleConfigurationUpdateOne) SetNillableCreatedByEmpId(i *int64) *CadreEligibleConfigurationUpdateOne {
	if i != nil {
		cecuo.SetCreatedByEmpId(*i)
	}
	return cecuo
}

// AddCreatedByEmpId adds i to the "CreatedByEmpId" field.
func (cecuo *CadreEligibleConfigurationUpdateOne) AddCreatedByEmpId(i int64) *CadreEligibleConfigurationUpdateOne {
	cecuo.mutation.AddCreatedByEmpId(i)
	return cecuo
}

// ClearCreatedByEmpId clears the value of the "CreatedByEmpId" field.
func (cecuo *CadreEligibleConfigurationUpdateOne) ClearCreatedByEmpId() *CadreEligibleConfigurationUpdateOne {
	cecuo.mutation.ClearCreatedByEmpId()
	return cecuo
}

// SetCreatedByDesignation sets the "CreatedByDesignation" field.
func (cecuo *CadreEligibleConfigurationUpdateOne) SetCreatedByDesignation(s string) *CadreEligibleConfigurationUpdateOne {
	cecuo.mutation.SetCreatedByDesignation(s)
	return cecuo
}

// SetNillableCreatedByDesignation sets the "CreatedByDesignation" field if the given value is not nil.
func (cecuo *CadreEligibleConfigurationUpdateOne) SetNillableCreatedByDesignation(s *string) *CadreEligibleConfigurationUpdateOne {
	if s != nil {
		cecuo.SetCreatedByDesignation(*s)
	}
	return cecuo
}

// ClearCreatedByDesignation clears the value of the "CreatedByDesignation" field.
func (cecuo *CadreEligibleConfigurationUpdateOne) ClearCreatedByDesignation() *CadreEligibleConfigurationUpdateOne {
	cecuo.mutation.ClearCreatedByDesignation()
	return cecuo
}

// SetCreatedDate sets the "CreatedDate" field.
func (cecuo *CadreEligibleConfigurationUpdateOne) SetCreatedDate(t time.Time) *CadreEligibleConfigurationUpdateOne {
	cecuo.mutation.SetCreatedDate(t)
	return cecuo
}

// SetNillableCreatedDate sets the "CreatedDate" field if the given value is not nil.
func (cecuo *CadreEligibleConfigurationUpdateOne) SetNillableCreatedDate(t *time.Time) *CadreEligibleConfigurationUpdateOne {
	if t != nil {
		cecuo.SetCreatedDate(*t)
	}
	return cecuo
}

// ClearCreatedDate clears the value of the "CreatedDate" field.
func (cecuo *CadreEligibleConfigurationUpdateOne) ClearCreatedDate() *CadreEligibleConfigurationUpdateOne {
	cecuo.mutation.ClearCreatedDate()
	return cecuo
}

// SetVerifiedbyid sets the "verifiedbyid" field.
func (cecuo *CadreEligibleConfigurationUpdateOne) SetVerifiedbyid(i int64) *CadreEligibleConfigurationUpdateOne {
	cecuo.mutation.ResetVerifiedbyid()
	cecuo.mutation.SetVerifiedbyid(i)
	return cecuo
}

// SetNillableVerifiedbyid sets the "verifiedbyid" field if the given value is not nil.
func (cecuo *CadreEligibleConfigurationUpdateOne) SetNillableVerifiedbyid(i *int64) *CadreEligibleConfigurationUpdateOne {
	if i != nil {
		cecuo.SetVerifiedbyid(*i)
	}
	return cecuo
}

// AddVerifiedbyid adds i to the "verifiedbyid" field.
func (cecuo *CadreEligibleConfigurationUpdateOne) AddVerifiedbyid(i int64) *CadreEligibleConfigurationUpdateOne {
	cecuo.mutation.AddVerifiedbyid(i)
	return cecuo
}

// ClearVerifiedbyid clears the value of the "verifiedbyid" field.
func (cecuo *CadreEligibleConfigurationUpdateOne) ClearVerifiedbyid() *CadreEligibleConfigurationUpdateOne {
	cecuo.mutation.ClearVerifiedbyid()
	return cecuo
}

// SetVerifiedbyusername sets the "verifiedbyusername" field.
func (cecuo *CadreEligibleConfigurationUpdateOne) SetVerifiedbyusername(s string) *CadreEligibleConfigurationUpdateOne {
	cecuo.mutation.SetVerifiedbyusername(s)
	return cecuo
}

// SetNillableVerifiedbyusername sets the "verifiedbyusername" field if the given value is not nil.
func (cecuo *CadreEligibleConfigurationUpdateOne) SetNillableVerifiedbyusername(s *string) *CadreEligibleConfigurationUpdateOne {
	if s != nil {
		cecuo.SetVerifiedbyusername(*s)
	}
	return cecuo
}

// ClearVerifiedbyusername clears the value of the "verifiedbyusername" field.
func (cecuo *CadreEligibleConfigurationUpdateOne) ClearVerifiedbyusername() *CadreEligibleConfigurationUpdateOne {
	cecuo.mutation.ClearVerifiedbyusername()
	return cecuo
}

// SetVerifiedbyEmployeeid sets the "verifiedbyEmployeeid" field.
func (cecuo *CadreEligibleConfigurationUpdateOne) SetVerifiedbyEmployeeid(i int64) *CadreEligibleConfigurationUpdateOne {
	cecuo.mutation.ResetVerifiedbyEmployeeid()
	cecuo.mutation.SetVerifiedbyEmployeeid(i)
	return cecuo
}

// SetNillableVerifiedbyEmployeeid sets the "verifiedbyEmployeeid" field if the given value is not nil.
func (cecuo *CadreEligibleConfigurationUpdateOne) SetNillableVerifiedbyEmployeeid(i *int64) *CadreEligibleConfigurationUpdateOne {
	if i != nil {
		cecuo.SetVerifiedbyEmployeeid(*i)
	}
	return cecuo
}

// AddVerifiedbyEmployeeid adds i to the "verifiedbyEmployeeid" field.
func (cecuo *CadreEligibleConfigurationUpdateOne) AddVerifiedbyEmployeeid(i int64) *CadreEligibleConfigurationUpdateOne {
	cecuo.mutation.AddVerifiedbyEmployeeid(i)
	return cecuo
}

// ClearVerifiedbyEmployeeid clears the value of the "verifiedbyEmployeeid" field.
func (cecuo *CadreEligibleConfigurationUpdateOne) ClearVerifiedbyEmployeeid() *CadreEligibleConfigurationUpdateOne {
	cecuo.mutation.ClearVerifiedbyEmployeeid()
	return cecuo
}

// SetVerifiedbyDesignation sets the "verifiedbyDesignation" field.
func (cecuo *CadreEligibleConfigurationUpdateOne) SetVerifiedbyDesignation(s string) *CadreEligibleConfigurationUpdateOne {
	cecuo.mutation.SetVerifiedbyDesignation(s)
	return cecuo
}

// SetNillableVerifiedbyDesignation sets the "verifiedbyDesignation" field if the given value is not nil.
func (cecuo *CadreEligibleConfigurationUpdateOne) SetNillableVerifiedbyDesignation(s *string) *CadreEligibleConfigurationUpdateOne {
	if s != nil {
		cecuo.SetVerifiedbyDesignation(*s)
	}
	return cecuo
}

// ClearVerifiedbyDesignation clears the value of the "verifiedbyDesignation" field.
func (cecuo *CadreEligibleConfigurationUpdateOne) ClearVerifiedbyDesignation() *CadreEligibleConfigurationUpdateOne {
	cecuo.mutation.ClearVerifiedbyDesignation()
	return cecuo
}

// SetVerifiedDate sets the "verifiedDate" field.
func (cecuo *CadreEligibleConfigurationUpdateOne) SetVerifiedDate(t time.Time) *CadreEligibleConfigurationUpdateOne {
	cecuo.mutation.SetVerifiedDate(t)
	return cecuo
}

// SetNillableVerifiedDate sets the "verifiedDate" field if the given value is not nil.
func (cecuo *CadreEligibleConfigurationUpdateOne) SetNillableVerifiedDate(t *time.Time) *CadreEligibleConfigurationUpdateOne {
	if t != nil {
		cecuo.SetVerifiedDate(*t)
	}
	return cecuo
}

// ClearVerifiedDate clears the value of the "verifiedDate" field.
func (cecuo *CadreEligibleConfigurationUpdateOne) ClearVerifiedDate() *CadreEligibleConfigurationUpdateOne {
	cecuo.mutation.ClearVerifiedDate()
	return cecuo
}

// SetStatuss sets the "Statuss" field.
func (cecuo *CadreEligibleConfigurationUpdateOne) SetStatuss(s string) *CadreEligibleConfigurationUpdateOne {
	cecuo.mutation.SetStatuss(s)
	return cecuo
}

// SetNillableStatuss sets the "Statuss" field if the given value is not nil.
func (cecuo *CadreEligibleConfigurationUpdateOne) SetNillableStatuss(s *string) *CadreEligibleConfigurationUpdateOne {
	if s != nil {
		cecuo.SetStatuss(*s)
	}
	return cecuo
}

// ClearStatuss clears the value of the "Statuss" field.
func (cecuo *CadreEligibleConfigurationUpdateOne) ClearStatuss() *CadreEligibleConfigurationUpdateOne {
	cecuo.mutation.ClearStatuss()
	return cecuo
}

// SetDeletedbyid sets the "deletedbyid" field.
func (cecuo *CadreEligibleConfigurationUpdateOne) SetDeletedbyid(i int64) *CadreEligibleConfigurationUpdateOne {
	cecuo.mutation.ResetDeletedbyid()
	cecuo.mutation.SetDeletedbyid(i)
	return cecuo
}

// SetNillableDeletedbyid sets the "deletedbyid" field if the given value is not nil.
func (cecuo *CadreEligibleConfigurationUpdateOne) SetNillableDeletedbyid(i *int64) *CadreEligibleConfigurationUpdateOne {
	if i != nil {
		cecuo.SetDeletedbyid(*i)
	}
	return cecuo
}

// AddDeletedbyid adds i to the "deletedbyid" field.
func (cecuo *CadreEligibleConfigurationUpdateOne) AddDeletedbyid(i int64) *CadreEligibleConfigurationUpdateOne {
	cecuo.mutation.AddDeletedbyid(i)
	return cecuo
}

// ClearDeletedbyid clears the value of the "deletedbyid" field.
func (cecuo *CadreEligibleConfigurationUpdateOne) ClearDeletedbyid() *CadreEligibleConfigurationUpdateOne {
	cecuo.mutation.ClearDeletedbyid()
	return cecuo
}

// SetDeletedbyusername sets the "deletedbyusername" field.
func (cecuo *CadreEligibleConfigurationUpdateOne) SetDeletedbyusername(s string) *CadreEligibleConfigurationUpdateOne {
	cecuo.mutation.SetDeletedbyusername(s)
	return cecuo
}

// SetNillableDeletedbyusername sets the "deletedbyusername" field if the given value is not nil.
func (cecuo *CadreEligibleConfigurationUpdateOne) SetNillableDeletedbyusername(s *string) *CadreEligibleConfigurationUpdateOne {
	if s != nil {
		cecuo.SetDeletedbyusername(*s)
	}
	return cecuo
}

// ClearDeletedbyusername clears the value of the "deletedbyusername" field.
func (cecuo *CadreEligibleConfigurationUpdateOne) ClearDeletedbyusername() *CadreEligibleConfigurationUpdateOne {
	cecuo.mutation.ClearDeletedbyusername()
	return cecuo
}

// SetDeletedbyEmployeeid sets the "deletedbyEmployeeid" field.
func (cecuo *CadreEligibleConfigurationUpdateOne) SetDeletedbyEmployeeid(i int64) *CadreEligibleConfigurationUpdateOne {
	cecuo.mutation.ResetDeletedbyEmployeeid()
	cecuo.mutation.SetDeletedbyEmployeeid(i)
	return cecuo
}

// SetNillableDeletedbyEmployeeid sets the "deletedbyEmployeeid" field if the given value is not nil.
func (cecuo *CadreEligibleConfigurationUpdateOne) SetNillableDeletedbyEmployeeid(i *int64) *CadreEligibleConfigurationUpdateOne {
	if i != nil {
		cecuo.SetDeletedbyEmployeeid(*i)
	}
	return cecuo
}

// AddDeletedbyEmployeeid adds i to the "deletedbyEmployeeid" field.
func (cecuo *CadreEligibleConfigurationUpdateOne) AddDeletedbyEmployeeid(i int64) *CadreEligibleConfigurationUpdateOne {
	cecuo.mutation.AddDeletedbyEmployeeid(i)
	return cecuo
}

// ClearDeletedbyEmployeeid clears the value of the "deletedbyEmployeeid" field.
func (cecuo *CadreEligibleConfigurationUpdateOne) ClearDeletedbyEmployeeid() *CadreEligibleConfigurationUpdateOne {
	cecuo.mutation.ClearDeletedbyEmployeeid()
	return cecuo
}

// SetDeletedbyDesignation sets the "deletedbyDesignation" field.
func (cecuo *CadreEligibleConfigurationUpdateOne) SetDeletedbyDesignation(s string) *CadreEligibleConfigurationUpdateOne {
	cecuo.mutation.SetDeletedbyDesignation(s)
	return cecuo
}

// SetNillableDeletedbyDesignation sets the "deletedbyDesignation" field if the given value is not nil.
func (cecuo *CadreEligibleConfigurationUpdateOne) SetNillableDeletedbyDesignation(s *string) *CadreEligibleConfigurationUpdateOne {
	if s != nil {
		cecuo.SetDeletedbyDesignation(*s)
	}
	return cecuo
}

// ClearDeletedbyDesignation clears the value of the "deletedbyDesignation" field.
func (cecuo *CadreEligibleConfigurationUpdateOne) ClearDeletedbyDesignation() *CadreEligibleConfigurationUpdateOne {
	cecuo.mutation.ClearDeletedbyDesignation()
	return cecuo
}

// SetDeletedDate sets the "deletedDate" field.
func (cecuo *CadreEligibleConfigurationUpdateOne) SetDeletedDate(t time.Time) *CadreEligibleConfigurationUpdateOne {
	cecuo.mutation.SetDeletedDate(t)
	return cecuo
}

// SetNillableDeletedDate sets the "deletedDate" field if the given value is not nil.
func (cecuo *CadreEligibleConfigurationUpdateOne) SetNillableDeletedDate(t *time.Time) *CadreEligibleConfigurationUpdateOne {
	if t != nil {
		cecuo.SetDeletedDate(*t)
	}
	return cecuo
}

// ClearDeletedDate clears the value of the "deletedDate" field.
func (cecuo *CadreEligibleConfigurationUpdateOne) ClearDeletedDate() *CadreEligibleConfigurationUpdateOne {
	cecuo.mutation.ClearDeletedDate()
	return cecuo
}

// AddLogDatumIDs adds the "LogData" edge to the Logs entity by IDs.
func (cecuo *CadreEligibleConfigurationUpdateOne) AddLogDatumIDs(ids ...int64) *CadreEligibleConfigurationUpdateOne {
	cecuo.mutation.AddLogDatumIDs(ids...)
	return cecuo
}

// AddLogData adds the "LogData" edges to the Logs entity.
func (cecuo *CadreEligibleConfigurationUpdateOne) AddLogData(l ...*Logs) *CadreEligibleConfigurationUpdateOne {
	ids := make([]int64, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return cecuo.AddLogDatumIDs(ids...)
}

// Mutation returns the CadreEligibleConfigurationMutation object of the builder.
func (cecuo *CadreEligibleConfigurationUpdateOne) Mutation() *CadreEligibleConfigurationMutation {
	return cecuo.mutation
}

// ClearLogData clears all "LogData" edges to the Logs entity.
func (cecuo *CadreEligibleConfigurationUpdateOne) ClearLogData() *CadreEligibleConfigurationUpdateOne {
	cecuo.mutation.ClearLogData()
	return cecuo
}

// RemoveLogDatumIDs removes the "LogData" edge to Logs entities by IDs.
func (cecuo *CadreEligibleConfigurationUpdateOne) RemoveLogDatumIDs(ids ...int64) *CadreEligibleConfigurationUpdateOne {
	cecuo.mutation.RemoveLogDatumIDs(ids...)
	return cecuo
}

// RemoveLogData removes "LogData" edges to Logs entities.
func (cecuo *CadreEligibleConfigurationUpdateOne) RemoveLogData(l ...*Logs) *CadreEligibleConfigurationUpdateOne {
	ids := make([]int64, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return cecuo.RemoveLogDatumIDs(ids...)
}

// Where appends a list predicates to the CadreEligibleConfigurationUpdate builder.
func (cecuo *CadreEligibleConfigurationUpdateOne) Where(ps ...predicate.CadreEligibleConfiguration) *CadreEligibleConfigurationUpdateOne {
	cecuo.mutation.Where(ps...)
	return cecuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cecuo *CadreEligibleConfigurationUpdateOne) Select(field string, fields ...string) *CadreEligibleConfigurationUpdateOne {
	cecuo.fields = append([]string{field}, fields...)
	return cecuo
}

// Save executes the query and returns the updated CadreEligibleConfiguration entity.
func (cecuo *CadreEligibleConfigurationUpdateOne) Save(ctx context.Context) (*CadreEligibleConfiguration, error) {
	return withHooks(ctx, cecuo.sqlSave, cecuo.mutation, cecuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cecuo *CadreEligibleConfigurationUpdateOne) SaveX(ctx context.Context) *CadreEligibleConfiguration {
	node, err := cecuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cecuo *CadreEligibleConfigurationUpdateOne) Exec(ctx context.Context) error {
	_, err := cecuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cecuo *CadreEligibleConfigurationUpdateOne) ExecX(ctx context.Context) {
	if err := cecuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cecuo *CadreEligibleConfigurationUpdateOne) sqlSave(ctx context.Context) (_node *CadreEligibleConfiguration, err error) {
	_spec := sqlgraph.NewUpdateSpec(cadreeligibleconfiguration.Table, cadreeligibleconfiguration.Columns, sqlgraph.NewFieldSpec(cadreeligibleconfiguration.FieldID, field.TypeInt64))
	id, ok := cecuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "CadreEligibleConfiguration.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cecuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, cadreeligibleconfiguration.FieldID)
		for _, f := range fields {
			if !cadreeligibleconfiguration.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != cadreeligibleconfiguration.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cecuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cecuo.mutation.ExamCode(); ok {
		_spec.SetField(cadreeligibleconfiguration.FieldExamCode, field.TypeInt64, value)
	}
	if value, ok := cecuo.mutation.AddedExamCode(); ok {
		_spec.AddField(cadreeligibleconfiguration.FieldExamCode, field.TypeInt64, value)
	}
	if cecuo.mutation.ExamCodeCleared() {
		_spec.ClearField(cadreeligibleconfiguration.FieldExamCode, field.TypeInt64)
	}
	if value, ok := cecuo.mutation.ExamName(); ok {
		_spec.SetField(cadreeligibleconfiguration.FieldExamName, field.TypeString, value)
	}
	if cecuo.mutation.ExamNameCleared() {
		_spec.ClearField(cadreeligibleconfiguration.FieldExamName, field.TypeString)
	}
	if value, ok := cecuo.mutation.ExamShortName(); ok {
		_spec.SetField(cadreeligibleconfiguration.FieldExamShortName, field.TypeString, value)
	}
	if cecuo.mutation.ExamShortNameCleared() {
		_spec.ClearField(cadreeligibleconfiguration.FieldExamShortName, field.TypeString)
	}
	if value, ok := cecuo.mutation.PostID(); ok {
		_spec.SetField(cadreeligibleconfiguration.FieldPostID, field.TypeInt64, value)
	}
	if value, ok := cecuo.mutation.AddedPostID(); ok {
		_spec.AddField(cadreeligibleconfiguration.FieldPostID, field.TypeInt64, value)
	}
	if cecuo.mutation.PostIDCleared() {
		_spec.ClearField(cadreeligibleconfiguration.FieldPostID, field.TypeInt64)
	}
	if value, ok := cecuo.mutation.PostCode(); ok {
		_spec.SetField(cadreeligibleconfiguration.FieldPostCode, field.TypeString, value)
	}
	if cecuo.mutation.PostCodeCleared() {
		_spec.ClearField(cadreeligibleconfiguration.FieldPostCode, field.TypeString)
	}
	if value, ok := cecuo.mutation.PostDescription(); ok {
		_spec.SetField(cadreeligibleconfiguration.FieldPostDescription, field.TypeString, value)
	}
	if cecuo.mutation.PostDescriptionCleared() {
		_spec.ClearField(cadreeligibleconfiguration.FieldPostDescription, field.TypeString)
	}
	if value, ok := cecuo.mutation.GdsService(); ok {
		_spec.SetField(cadreeligibleconfiguration.FieldGdsService, field.TypeInt64, value)
	}
	if value, ok := cecuo.mutation.AddedGdsService(); ok {
		_spec.AddField(cadreeligibleconfiguration.FieldGdsService, field.TypeInt64, value)
	}
	if cecuo.mutation.GdsServiceCleared() {
		_spec.ClearField(cadreeligibleconfiguration.FieldGdsService, field.TypeInt64)
	}
	if value, ok := cecuo.mutation.CategoryCode(); ok {
		_spec.SetField(cadreeligibleconfiguration.FieldCategoryCode, field.TypeString, value)
	}
	if cecuo.mutation.CategoryCodeCleared() {
		_spec.ClearField(cadreeligibleconfiguration.FieldCategoryCode, field.TypeString)
	}
	if value, ok := cecuo.mutation.AgeCriteria(); ok {
		_spec.SetField(cadreeligibleconfiguration.FieldAgeCriteria, field.TypeInt64, value)
	}
	if value, ok := cecuo.mutation.AddedAgeCriteria(); ok {
		_spec.AddField(cadreeligibleconfiguration.FieldAgeCriteria, field.TypeInt64, value)
	}
	if cecuo.mutation.AgeCriteriaCleared() {
		_spec.ClearField(cadreeligibleconfiguration.FieldAgeCriteria, field.TypeInt64)
	}
	if value, ok := cecuo.mutation.ServiceCriteria(); ok {
		_spec.SetField(cadreeligibleconfiguration.FieldServiceCriteria, field.TypeInt64, value)
	}
	if value, ok := cecuo.mutation.AddedServiceCriteria(); ok {
		_spec.AddField(cadreeligibleconfiguration.FieldServiceCriteria, field.TypeInt64, value)
	}
	if cecuo.mutation.ServiceCriteriaCleared() {
		_spec.ClearField(cadreeligibleconfiguration.FieldServiceCriteria, field.TypeInt64)
	}
	if value, ok := cecuo.mutation.DrivingLicenceCriteria(); ok {
		_spec.SetField(cadreeligibleconfiguration.FieldDrivingLicenceCriteria, field.TypeInt64, value)
	}
	if value, ok := cecuo.mutation.AddedDrivingLicenceCriteria(); ok {
		_spec.AddField(cadreeligibleconfiguration.FieldDrivingLicenceCriteria, field.TypeInt64, value)
	}
	if cecuo.mutation.DrivingLicenceCriteriaCleared() {
		_spec.ClearField(cadreeligibleconfiguration.FieldDrivingLicenceCriteria, field.TypeInt64)
	}
	if value, ok := cecuo.mutation.ComputerKnowledge(); ok {
		_spec.SetField(cadreeligibleconfiguration.FieldComputerKnowledge, field.TypeInt64, value)
	}
	if value, ok := cecuo.mutation.AddedComputerKnowledge(); ok {
		_spec.AddField(cadreeligibleconfiguration.FieldComputerKnowledge, field.TypeInt64, value)
	}
	if cecuo.mutation.ComputerKnowledgeCleared() {
		_spec.ClearField(cadreeligibleconfiguration.FieldComputerKnowledge, field.TypeInt64)
	}
	if value, ok := cecuo.mutation.EligibilityBasedOnLevelOfPayMatrix(); ok {
		_spec.SetField(cadreeligibleconfiguration.FieldEligibilityBasedOnLevelOfPayMatrix, field.TypeInt64, value)
	}
	if value, ok := cecuo.mutation.AddedEligibilityBasedOnLevelOfPayMatrix(); ok {
		_spec.AddField(cadreeligibleconfiguration.FieldEligibilityBasedOnLevelOfPayMatrix, field.TypeInt64, value)
	}
	if cecuo.mutation.EligibilityBasedOnLevelOfPayMatrixCleared() {
		_spec.ClearField(cadreeligibleconfiguration.FieldEligibilityBasedOnLevelOfPayMatrix, field.TypeInt64)
	}
	if value, ok := cecuo.mutation.EducationCode(); ok {
		_spec.SetField(cadreeligibleconfiguration.FieldEducationCode, field.TypeInt64, value)
	}
	if value, ok := cecuo.mutation.AddedEducationCode(); ok {
		_spec.AddField(cadreeligibleconfiguration.FieldEducationCode, field.TypeInt64, value)
	}
	if cecuo.mutation.EducationCodeCleared() {
		_spec.ClearField(cadreeligibleconfiguration.FieldEducationCode, field.TypeInt64)
	}
	if value, ok := cecuo.mutation.EducationDescription(); ok {
		_spec.SetField(cadreeligibleconfiguration.FieldEducationDescription, field.TypeString, value)
	}
	if cecuo.mutation.EducationDescriptionCleared() {
		_spec.ClearField(cadreeligibleconfiguration.FieldEducationDescription, field.TypeString)
	}
	if value, ok := cecuo.mutation.OrderNumber(); ok {
		_spec.SetField(cadreeligibleconfiguration.FieldOrderNumber, field.TypeString, value)
	}
	if cecuo.mutation.OrderNumberCleared() {
		_spec.ClearField(cadreeligibleconfiguration.FieldOrderNumber, field.TypeString)
	}
	if value, ok := cecuo.mutation.CreatedById(); ok {
		_spec.SetField(cadreeligibleconfiguration.FieldCreatedById, field.TypeInt64, value)
	}
	if value, ok := cecuo.mutation.AddedCreatedById(); ok {
		_spec.AddField(cadreeligibleconfiguration.FieldCreatedById, field.TypeInt64, value)
	}
	if cecuo.mutation.CreatedByIdCleared() {
		_spec.ClearField(cadreeligibleconfiguration.FieldCreatedById, field.TypeInt64)
	}
	if value, ok := cecuo.mutation.CreatedByUserName(); ok {
		_spec.SetField(cadreeligibleconfiguration.FieldCreatedByUserName, field.TypeString, value)
	}
	if cecuo.mutation.CreatedByUserNameCleared() {
		_spec.ClearField(cadreeligibleconfiguration.FieldCreatedByUserName, field.TypeString)
	}
	if value, ok := cecuo.mutation.CreatedByEmpId(); ok {
		_spec.SetField(cadreeligibleconfiguration.FieldCreatedByEmpId, field.TypeInt64, value)
	}
	if value, ok := cecuo.mutation.AddedCreatedByEmpId(); ok {
		_spec.AddField(cadreeligibleconfiguration.FieldCreatedByEmpId, field.TypeInt64, value)
	}
	if cecuo.mutation.CreatedByEmpIdCleared() {
		_spec.ClearField(cadreeligibleconfiguration.FieldCreatedByEmpId, field.TypeInt64)
	}
	if value, ok := cecuo.mutation.CreatedByDesignation(); ok {
		_spec.SetField(cadreeligibleconfiguration.FieldCreatedByDesignation, field.TypeString, value)
	}
	if cecuo.mutation.CreatedByDesignationCleared() {
		_spec.ClearField(cadreeligibleconfiguration.FieldCreatedByDesignation, field.TypeString)
	}
	if value, ok := cecuo.mutation.CreatedDate(); ok {
		_spec.SetField(cadreeligibleconfiguration.FieldCreatedDate, field.TypeTime, value)
	}
	if cecuo.mutation.CreatedDateCleared() {
		_spec.ClearField(cadreeligibleconfiguration.FieldCreatedDate, field.TypeTime)
	}
	if value, ok := cecuo.mutation.Verifiedbyid(); ok {
		_spec.SetField(cadreeligibleconfiguration.FieldVerifiedbyid, field.TypeInt64, value)
	}
	if value, ok := cecuo.mutation.AddedVerifiedbyid(); ok {
		_spec.AddField(cadreeligibleconfiguration.FieldVerifiedbyid, field.TypeInt64, value)
	}
	if cecuo.mutation.VerifiedbyidCleared() {
		_spec.ClearField(cadreeligibleconfiguration.FieldVerifiedbyid, field.TypeInt64)
	}
	if value, ok := cecuo.mutation.Verifiedbyusername(); ok {
		_spec.SetField(cadreeligibleconfiguration.FieldVerifiedbyusername, field.TypeString, value)
	}
	if cecuo.mutation.VerifiedbyusernameCleared() {
		_spec.ClearField(cadreeligibleconfiguration.FieldVerifiedbyusername, field.TypeString)
	}
	if value, ok := cecuo.mutation.VerifiedbyEmployeeid(); ok {
		_spec.SetField(cadreeligibleconfiguration.FieldVerifiedbyEmployeeid, field.TypeInt64, value)
	}
	if value, ok := cecuo.mutation.AddedVerifiedbyEmployeeid(); ok {
		_spec.AddField(cadreeligibleconfiguration.FieldVerifiedbyEmployeeid, field.TypeInt64, value)
	}
	if cecuo.mutation.VerifiedbyEmployeeidCleared() {
		_spec.ClearField(cadreeligibleconfiguration.FieldVerifiedbyEmployeeid, field.TypeInt64)
	}
	if value, ok := cecuo.mutation.VerifiedbyDesignation(); ok {
		_spec.SetField(cadreeligibleconfiguration.FieldVerifiedbyDesignation, field.TypeString, value)
	}
	if cecuo.mutation.VerifiedbyDesignationCleared() {
		_spec.ClearField(cadreeligibleconfiguration.FieldVerifiedbyDesignation, field.TypeString)
	}
	if value, ok := cecuo.mutation.VerifiedDate(); ok {
		_spec.SetField(cadreeligibleconfiguration.FieldVerifiedDate, field.TypeTime, value)
	}
	if cecuo.mutation.VerifiedDateCleared() {
		_spec.ClearField(cadreeligibleconfiguration.FieldVerifiedDate, field.TypeTime)
	}
	if value, ok := cecuo.mutation.Statuss(); ok {
		_spec.SetField(cadreeligibleconfiguration.FieldStatuss, field.TypeString, value)
	}
	if cecuo.mutation.StatussCleared() {
		_spec.ClearField(cadreeligibleconfiguration.FieldStatuss, field.TypeString)
	}
	if value, ok := cecuo.mutation.Deletedbyid(); ok {
		_spec.SetField(cadreeligibleconfiguration.FieldDeletedbyid, field.TypeInt64, value)
	}
	if value, ok := cecuo.mutation.AddedDeletedbyid(); ok {
		_spec.AddField(cadreeligibleconfiguration.FieldDeletedbyid, field.TypeInt64, value)
	}
	if cecuo.mutation.DeletedbyidCleared() {
		_spec.ClearField(cadreeligibleconfiguration.FieldDeletedbyid, field.TypeInt64)
	}
	if value, ok := cecuo.mutation.Deletedbyusername(); ok {
		_spec.SetField(cadreeligibleconfiguration.FieldDeletedbyusername, field.TypeString, value)
	}
	if cecuo.mutation.DeletedbyusernameCleared() {
		_spec.ClearField(cadreeligibleconfiguration.FieldDeletedbyusername, field.TypeString)
	}
	if value, ok := cecuo.mutation.DeletedbyEmployeeid(); ok {
		_spec.SetField(cadreeligibleconfiguration.FieldDeletedbyEmployeeid, field.TypeInt64, value)
	}
	if value, ok := cecuo.mutation.AddedDeletedbyEmployeeid(); ok {
		_spec.AddField(cadreeligibleconfiguration.FieldDeletedbyEmployeeid, field.TypeInt64, value)
	}
	if cecuo.mutation.DeletedbyEmployeeidCleared() {
		_spec.ClearField(cadreeligibleconfiguration.FieldDeletedbyEmployeeid, field.TypeInt64)
	}
	if value, ok := cecuo.mutation.DeletedbyDesignation(); ok {
		_spec.SetField(cadreeligibleconfiguration.FieldDeletedbyDesignation, field.TypeString, value)
	}
	if cecuo.mutation.DeletedbyDesignationCleared() {
		_spec.ClearField(cadreeligibleconfiguration.FieldDeletedbyDesignation, field.TypeString)
	}
	if value, ok := cecuo.mutation.DeletedDate(); ok {
		_spec.SetField(cadreeligibleconfiguration.FieldDeletedDate, field.TypeTime, value)
	}
	if cecuo.mutation.DeletedDateCleared() {
		_spec.ClearField(cadreeligibleconfiguration.FieldDeletedDate, field.TypeTime)
	}
	if cecuo.mutation.LogDataCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   cadreeligibleconfiguration.LogDataTable,
			Columns: []string{cadreeligibleconfiguration.LogDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(logs.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cecuo.mutation.RemovedLogDataIDs(); len(nodes) > 0 && !cecuo.mutation.LogDataCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   cadreeligibleconfiguration.LogDataTable,
			Columns: []string{cadreeligibleconfiguration.LogDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(logs.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cecuo.mutation.LogDataIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   cadreeligibleconfiguration.LogDataTable,
			Columns: []string{cadreeligibleconfiguration.LogDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(logs.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &CadreEligibleConfiguration{config: cecuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cecuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{cadreeligibleconfiguration.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cecuo.mutation.done = true
	return _node, nil
}
