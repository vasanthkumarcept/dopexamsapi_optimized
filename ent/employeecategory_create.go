// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"recruit/ent/employeecategory"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// EmployeeCategoryCreate is the builder for creating a EmployeeCategory entity.
type EmployeeCategoryCreate struct {
	config
	mutation *EmployeeCategoryMutation
	hooks    []Hook
}

// SetCategoryCode sets the "CategoryCode" field.
func (ecc *EmployeeCategoryCreate) SetCategoryCode(s string) *EmployeeCategoryCreate {
	ecc.mutation.SetCategoryCode(s)
	return ecc
}

// SetNillableCategoryCode sets the "CategoryCode" field if the given value is not nil.
func (ecc *EmployeeCategoryCreate) SetNillableCategoryCode(s *string) *EmployeeCategoryCreate {
	if s != nil {
		ecc.SetCategoryCode(*s)
	}
	return ecc
}

// SetCategoryDescription sets the "CategoryDescription" field.
func (ecc *EmployeeCategoryCreate) SetCategoryDescription(s string) *EmployeeCategoryCreate {
	ecc.mutation.SetCategoryDescription(s)
	return ecc
}

// SetNillableCategoryDescription sets the "CategoryDescription" field if the given value is not nil.
func (ecc *EmployeeCategoryCreate) SetNillableCategoryDescription(s *string) *EmployeeCategoryCreate {
	if s != nil {
		ecc.SetCategoryDescription(*s)
	}
	return ecc
}

// SetMinimumMarks sets the "MinimumMarks" field.
func (ecc *EmployeeCategoryCreate) SetMinimumMarks(i int32) *EmployeeCategoryCreate {
	ecc.mutation.SetMinimumMarks(i)
	return ecc
}

// SetNillableMinimumMarks sets the "MinimumMarks" field if the given value is not nil.
func (ecc *EmployeeCategoryCreate) SetNillableMinimumMarks(i *int32) *EmployeeCategoryCreate {
	if i != nil {
		ecc.SetMinimumMarks(*i)
	}
	return ecc
}

// SetHallCategoryCode sets the "HallCategoryCode" field.
func (ecc *EmployeeCategoryCreate) SetHallCategoryCode(s string) *EmployeeCategoryCreate {
	ecc.mutation.SetHallCategoryCode(s)
	return ecc
}

// SetNillableHallCategoryCode sets the "HallCategoryCode" field if the given value is not nil.
func (ecc *EmployeeCategoryCreate) SetNillableHallCategoryCode(s *string) *EmployeeCategoryCreate {
	if s != nil {
		ecc.SetHallCategoryCode(*s)
	}
	return ecc
}

// SetOrderNumber sets the "OrderNumber" field.
func (ecc *EmployeeCategoryCreate) SetOrderNumber(s string) *EmployeeCategoryCreate {
	ecc.mutation.SetOrderNumber(s)
	return ecc
}

// SetNillableOrderNumber sets the "OrderNumber" field if the given value is not nil.
func (ecc *EmployeeCategoryCreate) SetNillableOrderNumber(s *string) *EmployeeCategoryCreate {
	if s != nil {
		ecc.SetOrderNumber(*s)
	}
	return ecc
}

// SetCreatedById sets the "CreatedById" field.
func (ecc *EmployeeCategoryCreate) SetCreatedById(i int64) *EmployeeCategoryCreate {
	ecc.mutation.SetCreatedById(i)
	return ecc
}

// SetNillableCreatedById sets the "CreatedById" field if the given value is not nil.
func (ecc *EmployeeCategoryCreate) SetNillableCreatedById(i *int64) *EmployeeCategoryCreate {
	if i != nil {
		ecc.SetCreatedById(*i)
	}
	return ecc
}

// SetCreatedByUserName sets the "CreatedByUserName" field.
func (ecc *EmployeeCategoryCreate) SetCreatedByUserName(s string) *EmployeeCategoryCreate {
	ecc.mutation.SetCreatedByUserName(s)
	return ecc
}

// SetNillableCreatedByUserName sets the "CreatedByUserName" field if the given value is not nil.
func (ecc *EmployeeCategoryCreate) SetNillableCreatedByUserName(s *string) *EmployeeCategoryCreate {
	if s != nil {
		ecc.SetCreatedByUserName(*s)
	}
	return ecc
}

// SetCreatedByEmployeeId sets the "CreatedByEmployeeId" field.
func (ecc *EmployeeCategoryCreate) SetCreatedByEmployeeId(s string) *EmployeeCategoryCreate {
	ecc.mutation.SetCreatedByEmployeeId(s)
	return ecc
}

// SetNillableCreatedByEmployeeId sets the "CreatedByEmployeeId" field if the given value is not nil.
func (ecc *EmployeeCategoryCreate) SetNillableCreatedByEmployeeId(s *string) *EmployeeCategoryCreate {
	if s != nil {
		ecc.SetCreatedByEmployeeId(*s)
	}
	return ecc
}

// SetCreatedByDesignation sets the "CreatedByDesignation" field.
func (ecc *EmployeeCategoryCreate) SetCreatedByDesignation(s string) *EmployeeCategoryCreate {
	ecc.mutation.SetCreatedByDesignation(s)
	return ecc
}

// SetNillableCreatedByDesignation sets the "CreatedByDesignation" field if the given value is not nil.
func (ecc *EmployeeCategoryCreate) SetNillableCreatedByDesignation(s *string) *EmployeeCategoryCreate {
	if s != nil {
		ecc.SetCreatedByDesignation(*s)
	}
	return ecc
}

// SetCreatedDate sets the "CreatedDate" field.
func (ecc *EmployeeCategoryCreate) SetCreatedDate(t time.Time) *EmployeeCategoryCreate {
	ecc.mutation.SetCreatedDate(t)
	return ecc
}

// SetNillableCreatedDate sets the "CreatedDate" field if the given value is not nil.
func (ecc *EmployeeCategoryCreate) SetNillableCreatedDate(t *time.Time) *EmployeeCategoryCreate {
	if t != nil {
		ecc.SetCreatedDate(*t)
	}
	return ecc
}

// SetVerifiedById sets the "VerifiedById" field.
func (ecc *EmployeeCategoryCreate) SetVerifiedById(i int64) *EmployeeCategoryCreate {
	ecc.mutation.SetVerifiedById(i)
	return ecc
}

// SetNillableVerifiedById sets the "VerifiedById" field if the given value is not nil.
func (ecc *EmployeeCategoryCreate) SetNillableVerifiedById(i *int64) *EmployeeCategoryCreate {
	if i != nil {
		ecc.SetVerifiedById(*i)
	}
	return ecc
}

// SetVerifiedByUserName sets the "VerifiedByUserName" field.
func (ecc *EmployeeCategoryCreate) SetVerifiedByUserName(s string) *EmployeeCategoryCreate {
	ecc.mutation.SetVerifiedByUserName(s)
	return ecc
}

// SetNillableVerifiedByUserName sets the "VerifiedByUserName" field if the given value is not nil.
func (ecc *EmployeeCategoryCreate) SetNillableVerifiedByUserName(s *string) *EmployeeCategoryCreate {
	if s != nil {
		ecc.SetVerifiedByUserName(*s)
	}
	return ecc
}

// SetVerifiedByEmployeeId sets the "VerifiedByEmployeeId" field.
func (ecc *EmployeeCategoryCreate) SetVerifiedByEmployeeId(s string) *EmployeeCategoryCreate {
	ecc.mutation.SetVerifiedByEmployeeId(s)
	return ecc
}

// SetNillableVerifiedByEmployeeId sets the "VerifiedByEmployeeId" field if the given value is not nil.
func (ecc *EmployeeCategoryCreate) SetNillableVerifiedByEmployeeId(s *string) *EmployeeCategoryCreate {
	if s != nil {
		ecc.SetVerifiedByEmployeeId(*s)
	}
	return ecc
}

// SetVerifiedByDesignation sets the "VerifiedByDesignation" field.
func (ecc *EmployeeCategoryCreate) SetVerifiedByDesignation(s string) *EmployeeCategoryCreate {
	ecc.mutation.SetVerifiedByDesignation(s)
	return ecc
}

// SetNillableVerifiedByDesignation sets the "VerifiedByDesignation" field if the given value is not nil.
func (ecc *EmployeeCategoryCreate) SetNillableVerifiedByDesignation(s *string) *EmployeeCategoryCreate {
	if s != nil {
		ecc.SetVerifiedByDesignation(*s)
	}
	return ecc
}

// SetVerifiedDate sets the "VerifiedDate" field.
func (ecc *EmployeeCategoryCreate) SetVerifiedDate(t time.Time) *EmployeeCategoryCreate {
	ecc.mutation.SetVerifiedDate(t)
	return ecc
}

// SetNillableVerifiedDate sets the "VerifiedDate" field if the given value is not nil.
func (ecc *EmployeeCategoryCreate) SetNillableVerifiedDate(t *time.Time) *EmployeeCategoryCreate {
	if t != nil {
		ecc.SetVerifiedDate(*t)
	}
	return ecc
}

// SetStatus sets the "Status" field.
func (ecc *EmployeeCategoryCreate) SetStatus(s string) *EmployeeCategoryCreate {
	ecc.mutation.SetStatus(s)
	return ecc
}

// SetNillableStatus sets the "Status" field if the given value is not nil.
func (ecc *EmployeeCategoryCreate) SetNillableStatus(s *string) *EmployeeCategoryCreate {
	if s != nil {
		ecc.SetStatus(*s)
	}
	return ecc
}

// SetDeletedById sets the "DeletedById" field.
func (ecc *EmployeeCategoryCreate) SetDeletedById(i int64) *EmployeeCategoryCreate {
	ecc.mutation.SetDeletedById(i)
	return ecc
}

// SetNillableDeletedById sets the "DeletedById" field if the given value is not nil.
func (ecc *EmployeeCategoryCreate) SetNillableDeletedById(i *int64) *EmployeeCategoryCreate {
	if i != nil {
		ecc.SetDeletedById(*i)
	}
	return ecc
}

// SetDeletedByUserName sets the "DeletedByUserName" field.
func (ecc *EmployeeCategoryCreate) SetDeletedByUserName(s string) *EmployeeCategoryCreate {
	ecc.mutation.SetDeletedByUserName(s)
	return ecc
}

// SetNillableDeletedByUserName sets the "DeletedByUserName" field if the given value is not nil.
func (ecc *EmployeeCategoryCreate) SetNillableDeletedByUserName(s *string) *EmployeeCategoryCreate {
	if s != nil {
		ecc.SetDeletedByUserName(*s)
	}
	return ecc
}

// SetDeletedByEmployeeId sets the "DeletedByEmployeeId" field.
func (ecc *EmployeeCategoryCreate) SetDeletedByEmployeeId(s string) *EmployeeCategoryCreate {
	ecc.mutation.SetDeletedByEmployeeId(s)
	return ecc
}

// SetNillableDeletedByEmployeeId sets the "DeletedByEmployeeId" field if the given value is not nil.
func (ecc *EmployeeCategoryCreate) SetNillableDeletedByEmployeeId(s *string) *EmployeeCategoryCreate {
	if s != nil {
		ecc.SetDeletedByEmployeeId(*s)
	}
	return ecc
}

// SetDeletedByDesignation sets the "DeletedByDesignation" field.
func (ecc *EmployeeCategoryCreate) SetDeletedByDesignation(s string) *EmployeeCategoryCreate {
	ecc.mutation.SetDeletedByDesignation(s)
	return ecc
}

// SetNillableDeletedByDesignation sets the "DeletedByDesignation" field if the given value is not nil.
func (ecc *EmployeeCategoryCreate) SetNillableDeletedByDesignation(s *string) *EmployeeCategoryCreate {
	if s != nil {
		ecc.SetDeletedByDesignation(*s)
	}
	return ecc
}

// SetDeletedDate sets the "DeletedDate" field.
func (ecc *EmployeeCategoryCreate) SetDeletedDate(t time.Time) *EmployeeCategoryCreate {
	ecc.mutation.SetDeletedDate(t)
	return ecc
}

// SetNillableDeletedDate sets the "DeletedDate" field if the given value is not nil.
func (ecc *EmployeeCategoryCreate) SetNillableDeletedDate(t *time.Time) *EmployeeCategoryCreate {
	if t != nil {
		ecc.SetDeletedDate(*t)
	}
	return ecc
}

// SetExamconfigurationExamcode sets the "ExamconfigurationExamcode" field.
func (ecc *EmployeeCategoryCreate) SetExamconfigurationExamcode(i int32) *EmployeeCategoryCreate {
	ecc.mutation.SetExamconfigurationExamcode(i)
	return ecc
}

// SetNillableExamconfigurationExamcode sets the "ExamconfigurationExamcode" field if the given value is not nil.
func (ecc *EmployeeCategoryCreate) SetNillableExamconfigurationExamcode(i *int32) *EmployeeCategoryCreate {
	if i != nil {
		ecc.SetExamconfigurationExamcode(*i)
	}
	return ecc
}

// SetExamShortDescription sets the "ExamShortDescription" field.
func (ecc *EmployeeCategoryCreate) SetExamShortDescription(s string) *EmployeeCategoryCreate {
	ecc.mutation.SetExamShortDescription(s)
	return ecc
}

// SetNillableExamShortDescription sets the "ExamShortDescription" field if the given value is not nil.
func (ecc *EmployeeCategoryCreate) SetNillableExamShortDescription(s *string) *EmployeeCategoryCreate {
	if s != nil {
		ecc.SetExamShortDescription(*s)
	}
	return ecc
}

// SetExamLongDescription sets the "ExamLongDescription" field.
func (ecc *EmployeeCategoryCreate) SetExamLongDescription(s string) *EmployeeCategoryCreate {
	ecc.mutation.SetExamLongDescription(s)
	return ecc
}

// SetNillableExamLongDescription sets the "ExamLongDescription" field if the given value is not nil.
func (ecc *EmployeeCategoryCreate) SetNillableExamLongDescription(s *string) *EmployeeCategoryCreate {
	if s != nil {
		ecc.SetExamLongDescription(*s)
	}
	return ecc
}

// SetExamPaperCodePaperCode sets the "ExamPaperCode_paperCode" field.
func (ecc *EmployeeCategoryCreate) SetExamPaperCodePaperCode(i int32) *EmployeeCategoryCreate {
	ecc.mutation.SetExamPaperCodePaperCode(i)
	return ecc
}

// SetNillableExamPaperCodePaperCode sets the "ExamPaperCode_paperCode" field if the given value is not nil.
func (ecc *EmployeeCategoryCreate) SetNillableExamPaperCodePaperCode(i *int32) *EmployeeCategoryCreate {
	if i != nil {
		ecc.SetExamPaperCodePaperCode(*i)
	}
	return ecc
}

// SetEmployeeCategoryCategoryID sets the "EmployeeCategory_categoryID" field.
func (ecc *EmployeeCategoryCreate) SetEmployeeCategoryCategoryID(i int32) *EmployeeCategoryCreate {
	ecc.mutation.SetEmployeeCategoryCategoryID(i)
	return ecc
}

// SetNillableEmployeeCategoryCategoryID sets the "EmployeeCategory_categoryID" field if the given value is not nil.
func (ecc *EmployeeCategoryCreate) SetNillableEmployeeCategoryCategoryID(i *int32) *EmployeeCategoryCreate {
	if i != nil {
		ecc.SetEmployeeCategoryCategoryID(*i)
	}
	return ecc
}

// SetID sets the "id" field.
func (ecc *EmployeeCategoryCreate) SetID(i int32) *EmployeeCategoryCreate {
	ecc.mutation.SetID(i)
	return ecc
}

// Mutation returns the EmployeeCategoryMutation object of the builder.
func (ecc *EmployeeCategoryCreate) Mutation() *EmployeeCategoryMutation {
	return ecc.mutation
}

// Save creates the EmployeeCategory in the database.
func (ecc *EmployeeCategoryCreate) Save(ctx context.Context) (*EmployeeCategory, error) {
	return withHooks(ctx, ecc.sqlSave, ecc.mutation, ecc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ecc *EmployeeCategoryCreate) SaveX(ctx context.Context) *EmployeeCategory {
	v, err := ecc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ecc *EmployeeCategoryCreate) Exec(ctx context.Context) error {
	_, err := ecc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ecc *EmployeeCategoryCreate) ExecX(ctx context.Context) {
	if err := ecc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ecc *EmployeeCategoryCreate) check() error {
	return nil
}

func (ecc *EmployeeCategoryCreate) sqlSave(ctx context.Context) (*EmployeeCategory, error) {
	if err := ecc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ecc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ecc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int32(id)
	}
	ecc.mutation.id = &_node.ID
	ecc.mutation.done = true
	return _node, nil
}

func (ecc *EmployeeCategoryCreate) createSpec() (*EmployeeCategory, *sqlgraph.CreateSpec) {
	var (
		_node = &EmployeeCategory{config: ecc.config}
		_spec = sqlgraph.NewCreateSpec(employeecategory.Table, sqlgraph.NewFieldSpec(employeecategory.FieldID, field.TypeInt32))
	)
	if id, ok := ecc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ecc.mutation.CategoryCode(); ok {
		_spec.SetField(employeecategory.FieldCategoryCode, field.TypeString, value)
		_node.CategoryCode = value
	}
	if value, ok := ecc.mutation.CategoryDescription(); ok {
		_spec.SetField(employeecategory.FieldCategoryDescription, field.TypeString, value)
		_node.CategoryDescription = value
	}
	if value, ok := ecc.mutation.MinimumMarks(); ok {
		_spec.SetField(employeecategory.FieldMinimumMarks, field.TypeInt32, value)
		_node.MinimumMarks = value
	}
	if value, ok := ecc.mutation.HallCategoryCode(); ok {
		_spec.SetField(employeecategory.FieldHallCategoryCode, field.TypeString, value)
		_node.HallCategoryCode = value
	}
	if value, ok := ecc.mutation.OrderNumber(); ok {
		_spec.SetField(employeecategory.FieldOrderNumber, field.TypeString, value)
		_node.OrderNumber = value
	}
	if value, ok := ecc.mutation.CreatedById(); ok {
		_spec.SetField(employeecategory.FieldCreatedById, field.TypeInt64, value)
		_node.CreatedById = value
	}
	if value, ok := ecc.mutation.CreatedByUserName(); ok {
		_spec.SetField(employeecategory.FieldCreatedByUserName, field.TypeString, value)
		_node.CreatedByUserName = value
	}
	if value, ok := ecc.mutation.CreatedByEmployeeId(); ok {
		_spec.SetField(employeecategory.FieldCreatedByEmployeeId, field.TypeString, value)
		_node.CreatedByEmployeeId = value
	}
	if value, ok := ecc.mutation.CreatedByDesignation(); ok {
		_spec.SetField(employeecategory.FieldCreatedByDesignation, field.TypeString, value)
		_node.CreatedByDesignation = value
	}
	if value, ok := ecc.mutation.CreatedDate(); ok {
		_spec.SetField(employeecategory.FieldCreatedDate, field.TypeTime, value)
		_node.CreatedDate = value
	}
	if value, ok := ecc.mutation.VerifiedById(); ok {
		_spec.SetField(employeecategory.FieldVerifiedById, field.TypeInt64, value)
		_node.VerifiedById = value
	}
	if value, ok := ecc.mutation.VerifiedByUserName(); ok {
		_spec.SetField(employeecategory.FieldVerifiedByUserName, field.TypeString, value)
		_node.VerifiedByUserName = value
	}
	if value, ok := ecc.mutation.VerifiedByEmployeeId(); ok {
		_spec.SetField(employeecategory.FieldVerifiedByEmployeeId, field.TypeString, value)
		_node.VerifiedByEmployeeId = value
	}
	if value, ok := ecc.mutation.VerifiedByDesignation(); ok {
		_spec.SetField(employeecategory.FieldVerifiedByDesignation, field.TypeString, value)
		_node.VerifiedByDesignation = value
	}
	if value, ok := ecc.mutation.VerifiedDate(); ok {
		_spec.SetField(employeecategory.FieldVerifiedDate, field.TypeTime, value)
		_node.VerifiedDate = value
	}
	if value, ok := ecc.mutation.Status(); ok {
		_spec.SetField(employeecategory.FieldStatus, field.TypeString, value)
		_node.Status = value
	}
	if value, ok := ecc.mutation.DeletedById(); ok {
		_spec.SetField(employeecategory.FieldDeletedById, field.TypeInt64, value)
		_node.DeletedById = value
	}
	if value, ok := ecc.mutation.DeletedByUserName(); ok {
		_spec.SetField(employeecategory.FieldDeletedByUserName, field.TypeString, value)
		_node.DeletedByUserName = value
	}
	if value, ok := ecc.mutation.DeletedByEmployeeId(); ok {
		_spec.SetField(employeecategory.FieldDeletedByEmployeeId, field.TypeString, value)
		_node.DeletedByEmployeeId = value
	}
	if value, ok := ecc.mutation.DeletedByDesignation(); ok {
		_spec.SetField(employeecategory.FieldDeletedByDesignation, field.TypeString, value)
		_node.DeletedByDesignation = value
	}
	if value, ok := ecc.mutation.DeletedDate(); ok {
		_spec.SetField(employeecategory.FieldDeletedDate, field.TypeTime, value)
		_node.DeletedDate = value
	}
	if value, ok := ecc.mutation.ExamconfigurationExamcode(); ok {
		_spec.SetField(employeecategory.FieldExamconfigurationExamcode, field.TypeInt32, value)
		_node.ExamconfigurationExamcode = value
	}
	if value, ok := ecc.mutation.ExamShortDescription(); ok {
		_spec.SetField(employeecategory.FieldExamShortDescription, field.TypeString, value)
		_node.ExamShortDescription = value
	}
	if value, ok := ecc.mutation.ExamLongDescription(); ok {
		_spec.SetField(employeecategory.FieldExamLongDescription, field.TypeString, value)
		_node.ExamLongDescription = value
	}
	if value, ok := ecc.mutation.ExamPaperCodePaperCode(); ok {
		_spec.SetField(employeecategory.FieldExamPaperCodePaperCode, field.TypeInt32, value)
		_node.ExamPaperCodePaperCode = value
	}
	if value, ok := ecc.mutation.EmployeeCategoryCategoryID(); ok {
		_spec.SetField(employeecategory.FieldEmployeeCategoryCategoryID, field.TypeInt32, value)
		_node.EmployeeCategoryCategoryID = value
	}
	return _node, _spec
}

// EmployeeCategoryCreateBulk is the builder for creating many EmployeeCategory entities in bulk.
type EmployeeCategoryCreateBulk struct {
	config
	builders []*EmployeeCategoryCreate
}

// Save creates the EmployeeCategory entities in the database.
func (eccb *EmployeeCategoryCreateBulk) Save(ctx context.Context) ([]*EmployeeCategory, error) {
	specs := make([]*sqlgraph.CreateSpec, len(eccb.builders))
	nodes := make([]*EmployeeCategory, len(eccb.builders))
	mutators := make([]Mutator, len(eccb.builders))
	for i := range eccb.builders {
		func(i int, root context.Context) {
			builder := eccb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*EmployeeCategoryMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, eccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, eccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, eccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (eccb *EmployeeCategoryCreateBulk) SaveX(ctx context.Context) []*EmployeeCategory {
	v, err := eccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (eccb *EmployeeCategoryCreateBulk) Exec(ctx context.Context) error {
	_, err := eccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eccb *EmployeeCategoryCreateBulk) ExecX(ctx context.Context) {
	if err := eccb.Exec(ctx); err != nil {
		panic(err)
	}
}
