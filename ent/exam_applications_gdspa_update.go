// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"recruit/ent/cadre_choice_pa"
	"recruit/ent/center"
	"recruit/ent/circlesummaryforno"
	"recruit/ent/division_choice_pa"
	"recruit/ent/exam"
	"recruit/ent/exam_applications_gdspa"
	"recruit/ent/examcitycenter"
	"recruit/ent/logs"
	"recruit/ent/predicate"
	"recruit/ent/recommendationsgdspaapplications"
	"recruit/ent/rolemaster"
	"recruit/ent/usermaster"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
)

// ExamApplicationsGDSPAUpdate is the builder for updating Exam_Applications_GDSPA entities.
type ExamApplicationsGDSPAUpdate struct {
	config
	hooks    []Hook
	mutation *ExamApplicationsGDSPAMutation
}

// Where appends a list predicates to the ExamApplicationsGDSPAUpdate builder.
func (eagu *ExamApplicationsGDSPAUpdate) Where(ps ...predicate.Exam_Applications_GDSPA) *ExamApplicationsGDSPAUpdate {
	eagu.mutation.Where(ps...)
	return eagu
}

// SetApplicationNumber sets the "ApplicationNumber" field.
func (eagu *ExamApplicationsGDSPAUpdate) SetApplicationNumber(s string) *ExamApplicationsGDSPAUpdate {
	eagu.mutation.SetApplicationNumber(s)
	return eagu
}

// SetNillableApplicationNumber sets the "ApplicationNumber" field if the given value is not nil.
func (eagu *ExamApplicationsGDSPAUpdate) SetNillableApplicationNumber(s *string) *ExamApplicationsGDSPAUpdate {
	if s != nil {
		eagu.SetApplicationNumber(*s)
	}
	return eagu
}

// ClearApplicationNumber clears the value of the "ApplicationNumber" field.
func (eagu *ExamApplicationsGDSPAUpdate) ClearApplicationNumber() *ExamApplicationsGDSPAUpdate {
	eagu.mutation.ClearApplicationNumber()
	return eagu
}

// SetApplnSubmittedDate sets the "ApplnSubmittedDate" field.
func (eagu *ExamApplicationsGDSPAUpdate) SetApplnSubmittedDate(t time.Time) *ExamApplicationsGDSPAUpdate {
	eagu.mutation.SetApplnSubmittedDate(t)
	return eagu
}

// SetNillableApplnSubmittedDate sets the "ApplnSubmittedDate" field if the given value is not nil.
func (eagu *ExamApplicationsGDSPAUpdate) SetNillableApplnSubmittedDate(t *time.Time) *ExamApplicationsGDSPAUpdate {
	if t != nil {
		eagu.SetApplnSubmittedDate(*t)
	}
	return eagu
}

// ClearApplnSubmittedDate clears the value of the "ApplnSubmittedDate" field.
func (eagu *ExamApplicationsGDSPAUpdate) ClearApplnSubmittedDate() *ExamApplicationsGDSPAUpdate {
	eagu.mutation.ClearApplnSubmittedDate()
	return eagu
}

// SetExamCode sets the "ExamCode" field.
func (eagu *ExamApplicationsGDSPAUpdate) SetExamCode(i int32) *ExamApplicationsGDSPAUpdate {
	eagu.mutation.SetExamCode(i)
	return eagu
}

// SetNillableExamCode sets the "ExamCode" field if the given value is not nil.
func (eagu *ExamApplicationsGDSPAUpdate) SetNillableExamCode(i *int32) *ExamApplicationsGDSPAUpdate {
	if i != nil {
		eagu.SetExamCode(*i)
	}
	return eagu
}

// ClearExamCode clears the value of the "ExamCode" field.
func (eagu *ExamApplicationsGDSPAUpdate) ClearExamCode() *ExamApplicationsGDSPAUpdate {
	eagu.mutation.ClearExamCode()
	return eagu
}

// SetExamShortName sets the "ExamShortName" field.
func (eagu *ExamApplicationsGDSPAUpdate) SetExamShortName(s string) *ExamApplicationsGDSPAUpdate {
	eagu.mutation.SetExamShortName(s)
	return eagu
}

// SetNillableExamShortName sets the "ExamShortName" field if the given value is not nil.
func (eagu *ExamApplicationsGDSPAUpdate) SetNillableExamShortName(s *string) *ExamApplicationsGDSPAUpdate {
	if s != nil {
		eagu.SetExamShortName(*s)
	}
	return eagu
}

// ClearExamShortName clears the value of the "ExamShortName" field.
func (eagu *ExamApplicationsGDSPAUpdate) ClearExamShortName() *ExamApplicationsGDSPAUpdate {
	eagu.mutation.ClearExamShortName()
	return eagu
}

// SetExamName sets the "ExamName" field.
func (eagu *ExamApplicationsGDSPAUpdate) SetExamName(s string) *ExamApplicationsGDSPAUpdate {
	eagu.mutation.SetExamName(s)
	return eagu
}

// SetNillableExamName sets the "ExamName" field if the given value is not nil.
func (eagu *ExamApplicationsGDSPAUpdate) SetNillableExamName(s *string) *ExamApplicationsGDSPAUpdate {
	if s != nil {
		eagu.SetExamName(*s)
	}
	return eagu
}

// ClearExamName clears the value of the "ExamName" field.
func (eagu *ExamApplicationsGDSPAUpdate) ClearExamName() *ExamApplicationsGDSPAUpdate {
	eagu.mutation.ClearExamName()
	return eagu
}

// SetSmsExamShortName sets the "SmsExamShortName" field.
func (eagu *ExamApplicationsGDSPAUpdate) SetSmsExamShortName(s string) *ExamApplicationsGDSPAUpdate {
	eagu.mutation.SetSmsExamShortName(s)
	return eagu
}

// SetNillableSmsExamShortName sets the "SmsExamShortName" field if the given value is not nil.
func (eagu *ExamApplicationsGDSPAUpdate) SetNillableSmsExamShortName(s *string) *ExamApplicationsGDSPAUpdate {
	if s != nil {
		eagu.SetSmsExamShortName(*s)
	}
	return eagu
}

// ClearSmsExamShortName clears the value of the "SmsExamShortName" field.
func (eagu *ExamApplicationsGDSPAUpdate) ClearSmsExamShortName() *ExamApplicationsGDSPAUpdate {
	eagu.mutation.ClearSmsExamShortName()
	return eagu
}

// SetExamYear sets the "ExamYear" field.
func (eagu *ExamApplicationsGDSPAUpdate) SetExamYear(s string) *ExamApplicationsGDSPAUpdate {
	eagu.mutation.SetExamYear(s)
	return eagu
}

// SetNillableExamYear sets the "ExamYear" field if the given value is not nil.
func (eagu *ExamApplicationsGDSPAUpdate) SetNillableExamYear(s *string) *ExamApplicationsGDSPAUpdate {
	if s != nil {
		eagu.SetExamYear(*s)
	}
	return eagu
}

// ClearExamYear clears the value of the "ExamYear" field.
func (eagu *ExamApplicationsGDSPAUpdate) ClearExamYear() *ExamApplicationsGDSPAUpdate {
	eagu.mutation.ClearExamYear()
	return eagu
}

// SetUserID sets the "UserID" field.
func (eagu *ExamApplicationsGDSPAUpdate) SetUserID(i int32) *ExamApplicationsGDSPAUpdate {
	eagu.mutation.ResetUserID()
	eagu.mutation.SetUserID(i)
	return eagu
}

// SetNillableUserID sets the "UserID" field if the given value is not nil.
func (eagu *ExamApplicationsGDSPAUpdate) SetNillableUserID(i *int32) *ExamApplicationsGDSPAUpdate {
	if i != nil {
		eagu.SetUserID(*i)
	}
	return eagu
}

// AddUserID adds i to the "UserID" field.
func (eagu *ExamApplicationsGDSPAUpdate) AddUserID(i int32) *ExamApplicationsGDSPAUpdate {
	eagu.mutation.AddUserID(i)
	return eagu
}

// ClearUserID clears the value of the "UserID" field.
func (eagu *ExamApplicationsGDSPAUpdate) ClearUserID() *ExamApplicationsGDSPAUpdate {
	eagu.mutation.ClearUserID()
	return eagu
}

// SetEmployeeID sets the "EmployeeID" field.
func (eagu *ExamApplicationsGDSPAUpdate) SetEmployeeID(i int64) *ExamApplicationsGDSPAUpdate {
	eagu.mutation.ResetEmployeeID()
	eagu.mutation.SetEmployeeID(i)
	return eagu
}

// SetNillableEmployeeID sets the "EmployeeID" field if the given value is not nil.
func (eagu *ExamApplicationsGDSPAUpdate) SetNillableEmployeeID(i *int64) *ExamApplicationsGDSPAUpdate {
	if i != nil {
		eagu.SetEmployeeID(*i)
	}
	return eagu
}

// AddEmployeeID adds i to the "EmployeeID" field.
func (eagu *ExamApplicationsGDSPAUpdate) AddEmployeeID(i int64) *ExamApplicationsGDSPAUpdate {
	eagu.mutation.AddEmployeeID(i)
	return eagu
}

// ClearEmployeeID clears the value of the "EmployeeID" field.
func (eagu *ExamApplicationsGDSPAUpdate) ClearEmployeeID() *ExamApplicationsGDSPAUpdate {
	eagu.mutation.ClearEmployeeID()
	return eagu
}

// SetEmployeeName sets the "EmployeeName" field.
func (eagu *ExamApplicationsGDSPAUpdate) SetEmployeeName(s string) *ExamApplicationsGDSPAUpdate {
	eagu.mutation.SetEmployeeName(s)
	return eagu
}

// SetNillableEmployeeName sets the "EmployeeName" field if the given value is not nil.
func (eagu *ExamApplicationsGDSPAUpdate) SetNillableEmployeeName(s *string) *ExamApplicationsGDSPAUpdate {
	if s != nil {
		eagu.SetEmployeeName(*s)
	}
	return eagu
}

// ClearEmployeeName clears the value of the "EmployeeName" field.
func (eagu *ExamApplicationsGDSPAUpdate) ClearEmployeeName() *ExamApplicationsGDSPAUpdate {
	eagu.mutation.ClearEmployeeName()
	return eagu
}

// SetDOB sets the "DOB" field.
func (eagu *ExamApplicationsGDSPAUpdate) SetDOB(s string) *ExamApplicationsGDSPAUpdate {
	eagu.mutation.SetDOB(s)
	return eagu
}

// SetNillableDOB sets the "DOB" field if the given value is not nil.
func (eagu *ExamApplicationsGDSPAUpdate) SetNillableDOB(s *string) *ExamApplicationsGDSPAUpdate {
	if s != nil {
		eagu.SetDOB(*s)
	}
	return eagu
}

// ClearDOB clears the value of the "DOB" field.
func (eagu *ExamApplicationsGDSPAUpdate) ClearDOB() *ExamApplicationsGDSPAUpdate {
	eagu.mutation.ClearDOB()
	return eagu
}

// SetGender sets the "Gender" field.
func (eagu *ExamApplicationsGDSPAUpdate) SetGender(s string) *ExamApplicationsGDSPAUpdate {
	eagu.mutation.SetGender(s)
	return eagu
}

// SetNillableGender sets the "Gender" field if the given value is not nil.
func (eagu *ExamApplicationsGDSPAUpdate) SetNillableGender(s *string) *ExamApplicationsGDSPAUpdate {
	if s != nil {
		eagu.SetGender(*s)
	}
	return eagu
}

// ClearGender clears the value of the "Gender" field.
func (eagu *ExamApplicationsGDSPAUpdate) ClearGender() *ExamApplicationsGDSPAUpdate {
	eagu.mutation.ClearGender()
	return eagu
}

// SetMobileNumber sets the "MobileNumber" field.
func (eagu *ExamApplicationsGDSPAUpdate) SetMobileNumber(s string) *ExamApplicationsGDSPAUpdate {
	eagu.mutation.SetMobileNumber(s)
	return eagu
}

// SetNillableMobileNumber sets the "MobileNumber" field if the given value is not nil.
func (eagu *ExamApplicationsGDSPAUpdate) SetNillableMobileNumber(s *string) *ExamApplicationsGDSPAUpdate {
	if s != nil {
		eagu.SetMobileNumber(*s)
	}
	return eagu
}

// ClearMobileNumber clears the value of the "MobileNumber" field.
func (eagu *ExamApplicationsGDSPAUpdate) ClearMobileNumber() *ExamApplicationsGDSPAUpdate {
	eagu.mutation.ClearMobileNumber()
	return eagu
}

// SetEmailID sets the "EmailID" field.
func (eagu *ExamApplicationsGDSPAUpdate) SetEmailID(s string) *ExamApplicationsGDSPAUpdate {
	eagu.mutation.SetEmailID(s)
	return eagu
}

// SetNillableEmailID sets the "EmailID" field if the given value is not nil.
func (eagu *ExamApplicationsGDSPAUpdate) SetNillableEmailID(s *string) *ExamApplicationsGDSPAUpdate {
	if s != nil {
		eagu.SetEmailID(*s)
	}
	return eagu
}

// ClearEmailID clears the value of the "EmailID" field.
func (eagu *ExamApplicationsGDSPAUpdate) ClearEmailID() *ExamApplicationsGDSPAUpdate {
	eagu.mutation.ClearEmailID()
	return eagu
}

// SetCategoryCode sets the "CategoryCode" field.
func (eagu *ExamApplicationsGDSPAUpdate) SetCategoryCode(s string) *ExamApplicationsGDSPAUpdate {
	eagu.mutation.SetCategoryCode(s)
	return eagu
}

// SetNillableCategoryCode sets the "CategoryCode" field if the given value is not nil.
func (eagu *ExamApplicationsGDSPAUpdate) SetNillableCategoryCode(s *string) *ExamApplicationsGDSPAUpdate {
	if s != nil {
		eagu.SetCategoryCode(*s)
	}
	return eagu
}

// ClearCategoryCode clears the value of the "CategoryCode" field.
func (eagu *ExamApplicationsGDSPAUpdate) ClearCategoryCode() *ExamApplicationsGDSPAUpdate {
	eagu.mutation.ClearCategoryCode()
	return eagu
}

// SetCategoryDescription sets the "CategoryDescription" field.
func (eagu *ExamApplicationsGDSPAUpdate) SetCategoryDescription(s string) *ExamApplicationsGDSPAUpdate {
	eagu.mutation.SetCategoryDescription(s)
	return eagu
}

// SetNillableCategoryDescription sets the "CategoryDescription" field if the given value is not nil.
func (eagu *ExamApplicationsGDSPAUpdate) SetNillableCategoryDescription(s *string) *ExamApplicationsGDSPAUpdate {
	if s != nil {
		eagu.SetCategoryDescription(*s)
	}
	return eagu
}

// ClearCategoryDescription clears the value of the "CategoryDescription" field.
func (eagu *ExamApplicationsGDSPAUpdate) ClearCategoryDescription() *ExamApplicationsGDSPAUpdate {
	eagu.mutation.ClearCategoryDescription()
	return eagu
}

// SetDisabilityTypeID sets the "DisabilityTypeID" field.
func (eagu *ExamApplicationsGDSPAUpdate) SetDisabilityTypeID(s string) *ExamApplicationsGDSPAUpdate {
	eagu.mutation.SetDisabilityTypeID(s)
	return eagu
}

// SetNillableDisabilityTypeID sets the "DisabilityTypeID" field if the given value is not nil.
func (eagu *ExamApplicationsGDSPAUpdate) SetNillableDisabilityTypeID(s *string) *ExamApplicationsGDSPAUpdate {
	if s != nil {
		eagu.SetDisabilityTypeID(*s)
	}
	return eagu
}

// ClearDisabilityTypeID clears the value of the "DisabilityTypeID" field.
func (eagu *ExamApplicationsGDSPAUpdate) ClearDisabilityTypeID() *ExamApplicationsGDSPAUpdate {
	eagu.mutation.ClearDisabilityTypeID()
	return eagu
}

// SetDisabilityTypeCode sets the "DisabilityTypeCode" field.
func (eagu *ExamApplicationsGDSPAUpdate) SetDisabilityTypeCode(s string) *ExamApplicationsGDSPAUpdate {
	eagu.mutation.SetDisabilityTypeCode(s)
	return eagu
}

// SetNillableDisabilityTypeCode sets the "DisabilityTypeCode" field if the given value is not nil.
func (eagu *ExamApplicationsGDSPAUpdate) SetNillableDisabilityTypeCode(s *string) *ExamApplicationsGDSPAUpdate {
	if s != nil {
		eagu.SetDisabilityTypeCode(*s)
	}
	return eagu
}

// ClearDisabilityTypeCode clears the value of the "DisabilityTypeCode" field.
func (eagu *ExamApplicationsGDSPAUpdate) ClearDisabilityTypeCode() *ExamApplicationsGDSPAUpdate {
	eagu.mutation.ClearDisabilityTypeCode()
	return eagu
}

// SetDisabilityTypeDescription sets the "DisabilityTypeDescription" field.
func (eagu *ExamApplicationsGDSPAUpdate) SetDisabilityTypeDescription(s string) *ExamApplicationsGDSPAUpdate {
	eagu.mutation.SetDisabilityTypeDescription(s)
	return eagu
}

// SetNillableDisabilityTypeDescription sets the "DisabilityTypeDescription" field if the given value is not nil.
func (eagu *ExamApplicationsGDSPAUpdate) SetNillableDisabilityTypeDescription(s *string) *ExamApplicationsGDSPAUpdate {
	if s != nil {
		eagu.SetDisabilityTypeDescription(*s)
	}
	return eagu
}

// ClearDisabilityTypeDescription clears the value of the "DisabilityTypeDescription" field.
func (eagu *ExamApplicationsGDSPAUpdate) ClearDisabilityTypeDescription() *ExamApplicationsGDSPAUpdate {
	eagu.mutation.ClearDisabilityTypeDescription()
	return eagu
}

// SetDisabilityPercentage sets the "DisabilityPercentage" field.
func (eagu *ExamApplicationsGDSPAUpdate) SetDisabilityPercentage(i int32) *ExamApplicationsGDSPAUpdate {
	eagu.mutation.ResetDisabilityPercentage()
	eagu.mutation.SetDisabilityPercentage(i)
	return eagu
}

// SetNillableDisabilityPercentage sets the "DisabilityPercentage" field if the given value is not nil.
func (eagu *ExamApplicationsGDSPAUpdate) SetNillableDisabilityPercentage(i *int32) *ExamApplicationsGDSPAUpdate {
	if i != nil {
		eagu.SetDisabilityPercentage(*i)
	}
	return eagu
}

// AddDisabilityPercentage adds i to the "DisabilityPercentage" field.
func (eagu *ExamApplicationsGDSPAUpdate) AddDisabilityPercentage(i int32) *ExamApplicationsGDSPAUpdate {
	eagu.mutation.AddDisabilityPercentage(i)
	return eagu
}

// ClearDisabilityPercentage clears the value of the "DisabilityPercentage" field.
func (eagu *ExamApplicationsGDSPAUpdate) ClearDisabilityPercentage() *ExamApplicationsGDSPAUpdate {
	eagu.mutation.ClearDisabilityPercentage()
	return eagu
}

// SetDCCS sets the "DCCS" field.
func (eagu *ExamApplicationsGDSPAUpdate) SetDCCS(s string) *ExamApplicationsGDSPAUpdate {
	eagu.mutation.SetDCCS(s)
	return eagu
}

// SetNillableDCCS sets the "DCCS" field if the given value is not nil.
func (eagu *ExamApplicationsGDSPAUpdate) SetNillableDCCS(s *string) *ExamApplicationsGDSPAUpdate {
	if s != nil {
		eagu.SetDCCS(*s)
	}
	return eagu
}

// ClearDCCS clears the value of the "DCCS" field.
func (eagu *ExamApplicationsGDSPAUpdate) ClearDCCS() *ExamApplicationsGDSPAUpdate {
	eagu.mutation.ClearDCCS()
	return eagu
}

// SetEntryPostCode sets the "EntryPostCode" field.
func (eagu *ExamApplicationsGDSPAUpdate) SetEntryPostCode(s string) *ExamApplicationsGDSPAUpdate {
	eagu.mutation.SetEntryPostCode(s)
	return eagu
}

// SetNillableEntryPostCode sets the "EntryPostCode" field if the given value is not nil.
func (eagu *ExamApplicationsGDSPAUpdate) SetNillableEntryPostCode(s *string) *ExamApplicationsGDSPAUpdate {
	if s != nil {
		eagu.SetEntryPostCode(*s)
	}
	return eagu
}

// ClearEntryPostCode clears the value of the "EntryPostCode" field.
func (eagu *ExamApplicationsGDSPAUpdate) ClearEntryPostCode() *ExamApplicationsGDSPAUpdate {
	eagu.mutation.ClearEntryPostCode()
	return eagu
}

// SetEntryPostDescription sets the "EntryPostDescription" field.
func (eagu *ExamApplicationsGDSPAUpdate) SetEntryPostDescription(s string) *ExamApplicationsGDSPAUpdate {
	eagu.mutation.SetEntryPostDescription(s)
	return eagu
}

// SetNillableEntryPostDescription sets the "EntryPostDescription" field if the given value is not nil.
func (eagu *ExamApplicationsGDSPAUpdate) SetNillableEntryPostDescription(s *string) *ExamApplicationsGDSPAUpdate {
	if s != nil {
		eagu.SetEntryPostDescription(*s)
	}
	return eagu
}

// ClearEntryPostDescription clears the value of the "EntryPostDescription" field.
func (eagu *ExamApplicationsGDSPAUpdate) ClearEntryPostDescription() *ExamApplicationsGDSPAUpdate {
	eagu.mutation.ClearEntryPostDescription()
	return eagu
}

// SetPresentPostCode sets the "PresentPostCode" field.
func (eagu *ExamApplicationsGDSPAUpdate) SetPresentPostCode(s string) *ExamApplicationsGDSPAUpdate {
	eagu.mutation.SetPresentPostCode(s)
	return eagu
}

// SetNillablePresentPostCode sets the "PresentPostCode" field if the given value is not nil.
func (eagu *ExamApplicationsGDSPAUpdate) SetNillablePresentPostCode(s *string) *ExamApplicationsGDSPAUpdate {
	if s != nil {
		eagu.SetPresentPostCode(*s)
	}
	return eagu
}

// ClearPresentPostCode clears the value of the "PresentPostCode" field.
func (eagu *ExamApplicationsGDSPAUpdate) ClearPresentPostCode() *ExamApplicationsGDSPAUpdate {
	eagu.mutation.ClearPresentPostCode()
	return eagu
}

// SetPresentPostDescription sets the "PresentPostDescription" field.
func (eagu *ExamApplicationsGDSPAUpdate) SetPresentPostDescription(s string) *ExamApplicationsGDSPAUpdate {
	eagu.mutation.SetPresentPostDescription(s)
	return eagu
}

// SetNillablePresentPostDescription sets the "PresentPostDescription" field if the given value is not nil.
func (eagu *ExamApplicationsGDSPAUpdate) SetNillablePresentPostDescription(s *string) *ExamApplicationsGDSPAUpdate {
	if s != nil {
		eagu.SetPresentPostDescription(*s)
	}
	return eagu
}

// ClearPresentPostDescription clears the value of the "PresentPostDescription" field.
func (eagu *ExamApplicationsGDSPAUpdate) ClearPresentPostDescription() *ExamApplicationsGDSPAUpdate {
	eagu.mutation.ClearPresentPostDescription()
	return eagu
}

// SetFeederPostCode sets the "FeederPostCode" field.
func (eagu *ExamApplicationsGDSPAUpdate) SetFeederPostCode(s string) *ExamApplicationsGDSPAUpdate {
	eagu.mutation.SetFeederPostCode(s)
	return eagu
}

// SetNillableFeederPostCode sets the "FeederPostCode" field if the given value is not nil.
func (eagu *ExamApplicationsGDSPAUpdate) SetNillableFeederPostCode(s *string) *ExamApplicationsGDSPAUpdate {
	if s != nil {
		eagu.SetFeederPostCode(*s)
	}
	return eagu
}

// ClearFeederPostCode clears the value of the "FeederPostCode" field.
func (eagu *ExamApplicationsGDSPAUpdate) ClearFeederPostCode() *ExamApplicationsGDSPAUpdate {
	eagu.mutation.ClearFeederPostCode()
	return eagu
}

// SetFeederPostDescription sets the "FeederPostDescription" field.
func (eagu *ExamApplicationsGDSPAUpdate) SetFeederPostDescription(s string) *ExamApplicationsGDSPAUpdate {
	eagu.mutation.SetFeederPostDescription(s)
	return eagu
}

// SetNillableFeederPostDescription sets the "FeederPostDescription" field if the given value is not nil.
func (eagu *ExamApplicationsGDSPAUpdate) SetNillableFeederPostDescription(s *string) *ExamApplicationsGDSPAUpdate {
	if s != nil {
		eagu.SetFeederPostDescription(*s)
	}
	return eagu
}

// ClearFeederPostDescription clears the value of the "FeederPostDescription" field.
func (eagu *ExamApplicationsGDSPAUpdate) ClearFeederPostDescription() *ExamApplicationsGDSPAUpdate {
	eagu.mutation.ClearFeederPostDescription()
	return eagu
}

// SetFeederPostJoiningDate sets the "FeederPostJoiningDate" field.
func (eagu *ExamApplicationsGDSPAUpdate) SetFeederPostJoiningDate(s string) *ExamApplicationsGDSPAUpdate {
	eagu.mutation.SetFeederPostJoiningDate(s)
	return eagu
}

// SetNillableFeederPostJoiningDate sets the "FeederPostJoiningDate" field if the given value is not nil.
func (eagu *ExamApplicationsGDSPAUpdate) SetNillableFeederPostJoiningDate(s *string) *ExamApplicationsGDSPAUpdate {
	if s != nil {
		eagu.SetFeederPostJoiningDate(*s)
	}
	return eagu
}

// ClearFeederPostJoiningDate clears the value of the "FeederPostJoiningDate" field.
func (eagu *ExamApplicationsGDSPAUpdate) ClearFeederPostJoiningDate() *ExamApplicationsGDSPAUpdate {
	eagu.mutation.ClearFeederPostJoiningDate()
	return eagu
}

// SetPresentDesignation sets the "PresentDesignation" field.
func (eagu *ExamApplicationsGDSPAUpdate) SetPresentDesignation(s string) *ExamApplicationsGDSPAUpdate {
	eagu.mutation.SetPresentDesignation(s)
	return eagu
}

// SetNillablePresentDesignation sets the "PresentDesignation" field if the given value is not nil.
func (eagu *ExamApplicationsGDSPAUpdate) SetNillablePresentDesignation(s *string) *ExamApplicationsGDSPAUpdate {
	if s != nil {
		eagu.SetPresentDesignation(*s)
	}
	return eagu
}

// ClearPresentDesignation clears the value of the "PresentDesignation" field.
func (eagu *ExamApplicationsGDSPAUpdate) ClearPresentDesignation() *ExamApplicationsGDSPAUpdate {
	eagu.mutation.ClearPresentDesignation()
	return eagu
}

// SetEducationCode sets the "EducationCode" field.
func (eagu *ExamApplicationsGDSPAUpdate) SetEducationCode(s string) *ExamApplicationsGDSPAUpdate {
	eagu.mutation.SetEducationCode(s)
	return eagu
}

// SetNillableEducationCode sets the "EducationCode" field if the given value is not nil.
func (eagu *ExamApplicationsGDSPAUpdate) SetNillableEducationCode(s *string) *ExamApplicationsGDSPAUpdate {
	if s != nil {
		eagu.SetEducationCode(*s)
	}
	return eagu
}

// ClearEducationCode clears the value of the "EducationCode" field.
func (eagu *ExamApplicationsGDSPAUpdate) ClearEducationCode() *ExamApplicationsGDSPAUpdate {
	eagu.mutation.ClearEducationCode()
	return eagu
}

// SetEducationDescription sets the "EducationDescription" field.
func (eagu *ExamApplicationsGDSPAUpdate) SetEducationDescription(s string) *ExamApplicationsGDSPAUpdate {
	eagu.mutation.SetEducationDescription(s)
	return eagu
}

// SetNillableEducationDescription sets the "EducationDescription" field if the given value is not nil.
func (eagu *ExamApplicationsGDSPAUpdate) SetNillableEducationDescription(s *string) *ExamApplicationsGDSPAUpdate {
	if s != nil {
		eagu.SetEducationDescription(*s)
	}
	return eagu
}

// ClearEducationDescription clears the value of the "EducationDescription" field.
func (eagu *ExamApplicationsGDSPAUpdate) ClearEducationDescription() *ExamApplicationsGDSPAUpdate {
	eagu.mutation.ClearEducationDescription()
	return eagu
}

// SetFacilityUniqueID sets the "FacilityUniqueID" field.
func (eagu *ExamApplicationsGDSPAUpdate) SetFacilityUniqueID(s string) *ExamApplicationsGDSPAUpdate {
	eagu.mutation.SetFacilityUniqueID(s)
	return eagu
}

// SetNillableFacilityUniqueID sets the "FacilityUniqueID" field if the given value is not nil.
func (eagu *ExamApplicationsGDSPAUpdate) SetNillableFacilityUniqueID(s *string) *ExamApplicationsGDSPAUpdate {
	if s != nil {
		eagu.SetFacilityUniqueID(*s)
	}
	return eagu
}

// ClearFacilityUniqueID clears the value of the "FacilityUniqueID" field.
func (eagu *ExamApplicationsGDSPAUpdate) ClearFacilityUniqueID() *ExamApplicationsGDSPAUpdate {
	eagu.mutation.ClearFacilityUniqueID()
	return eagu
}

// SetWorkingOfficePincode sets the "WorkingOfficePincode" field.
func (eagu *ExamApplicationsGDSPAUpdate) SetWorkingOfficePincode(i int32) *ExamApplicationsGDSPAUpdate {
	eagu.mutation.ResetWorkingOfficePincode()
	eagu.mutation.SetWorkingOfficePincode(i)
	return eagu
}

// SetNillableWorkingOfficePincode sets the "WorkingOfficePincode" field if the given value is not nil.
func (eagu *ExamApplicationsGDSPAUpdate) SetNillableWorkingOfficePincode(i *int32) *ExamApplicationsGDSPAUpdate {
	if i != nil {
		eagu.SetWorkingOfficePincode(*i)
	}
	return eagu
}

// AddWorkingOfficePincode adds i to the "WorkingOfficePincode" field.
func (eagu *ExamApplicationsGDSPAUpdate) AddWorkingOfficePincode(i int32) *ExamApplicationsGDSPAUpdate {
	eagu.mutation.AddWorkingOfficePincode(i)
	return eagu
}

// ClearWorkingOfficePincode clears the value of the "WorkingOfficePincode" field.
func (eagu *ExamApplicationsGDSPAUpdate) ClearWorkingOfficePincode() *ExamApplicationsGDSPAUpdate {
	eagu.mutation.ClearWorkingOfficePincode()
	return eagu
}

// SetWorkingOfficeFacilityID sets the "WorkingOfficeFacilityID" field.
func (eagu *ExamApplicationsGDSPAUpdate) SetWorkingOfficeFacilityID(s string) *ExamApplicationsGDSPAUpdate {
	eagu.mutation.SetWorkingOfficeFacilityID(s)
	return eagu
}

// SetNillableWorkingOfficeFacilityID sets the "WorkingOfficeFacilityID" field if the given value is not nil.
func (eagu *ExamApplicationsGDSPAUpdate) SetNillableWorkingOfficeFacilityID(s *string) *ExamApplicationsGDSPAUpdate {
	if s != nil {
		eagu.SetWorkingOfficeFacilityID(*s)
	}
	return eagu
}

// ClearWorkingOfficeFacilityID clears the value of the "WorkingOfficeFacilityID" field.
func (eagu *ExamApplicationsGDSPAUpdate) ClearWorkingOfficeFacilityID() *ExamApplicationsGDSPAUpdate {
	eagu.mutation.ClearWorkingOfficeFacilityID()
	return eagu
}

// SetWorkingOfficeName sets the "WorkingOfficeName" field.
func (eagu *ExamApplicationsGDSPAUpdate) SetWorkingOfficeName(s string) *ExamApplicationsGDSPAUpdate {
	eagu.mutation.SetWorkingOfficeName(s)
	return eagu
}

// SetNillableWorkingOfficeName sets the "WorkingOfficeName" field if the given value is not nil.
func (eagu *ExamApplicationsGDSPAUpdate) SetNillableWorkingOfficeName(s *string) *ExamApplicationsGDSPAUpdate {
	if s != nil {
		eagu.SetWorkingOfficeName(*s)
	}
	return eagu
}

// ClearWorkingOfficeName clears the value of the "WorkingOfficeName" field.
func (eagu *ExamApplicationsGDSPAUpdate) ClearWorkingOfficeName() *ExamApplicationsGDSPAUpdate {
	eagu.mutation.ClearWorkingOfficeName()
	return eagu
}

// SetWorkingOfficeCircleFacilityID sets the "WorkingOfficeCircleFacilityID" field.
func (eagu *ExamApplicationsGDSPAUpdate) SetWorkingOfficeCircleFacilityID(s string) *ExamApplicationsGDSPAUpdate {
	eagu.mutation.SetWorkingOfficeCircleFacilityID(s)
	return eagu
}

// SetNillableWorkingOfficeCircleFacilityID sets the "WorkingOfficeCircleFacilityID" field if the given value is not nil.
func (eagu *ExamApplicationsGDSPAUpdate) SetNillableWorkingOfficeCircleFacilityID(s *string) *ExamApplicationsGDSPAUpdate {
	if s != nil {
		eagu.SetWorkingOfficeCircleFacilityID(*s)
	}
	return eagu
}

// ClearWorkingOfficeCircleFacilityID clears the value of the "WorkingOfficeCircleFacilityID" field.
func (eagu *ExamApplicationsGDSPAUpdate) ClearWorkingOfficeCircleFacilityID() *ExamApplicationsGDSPAUpdate {
	eagu.mutation.ClearWorkingOfficeCircleFacilityID()
	return eagu
}

// SetWorkingOfficeCircleName sets the "WorkingOfficeCircleName" field.
func (eagu *ExamApplicationsGDSPAUpdate) SetWorkingOfficeCircleName(s string) *ExamApplicationsGDSPAUpdate {
	eagu.mutation.SetWorkingOfficeCircleName(s)
	return eagu
}

// SetNillableWorkingOfficeCircleName sets the "WorkingOfficeCircleName" field if the given value is not nil.
func (eagu *ExamApplicationsGDSPAUpdate) SetNillableWorkingOfficeCircleName(s *string) *ExamApplicationsGDSPAUpdate {
	if s != nil {
		eagu.SetWorkingOfficeCircleName(*s)
	}
	return eagu
}

// ClearWorkingOfficeCircleName clears the value of the "WorkingOfficeCircleName" field.
func (eagu *ExamApplicationsGDSPAUpdate) ClearWorkingOfficeCircleName() *ExamApplicationsGDSPAUpdate {
	eagu.mutation.ClearWorkingOfficeCircleName()
	return eagu
}

// SetWorkingOfficeRegionFacilityID sets the "WorkingOfficeRegionFacilityID" field.
func (eagu *ExamApplicationsGDSPAUpdate) SetWorkingOfficeRegionFacilityID(s string) *ExamApplicationsGDSPAUpdate {
	eagu.mutation.SetWorkingOfficeRegionFacilityID(s)
	return eagu
}

// SetNillableWorkingOfficeRegionFacilityID sets the "WorkingOfficeRegionFacilityID" field if the given value is not nil.
func (eagu *ExamApplicationsGDSPAUpdate) SetNillableWorkingOfficeRegionFacilityID(s *string) *ExamApplicationsGDSPAUpdate {
	if s != nil {
		eagu.SetWorkingOfficeRegionFacilityID(*s)
	}
	return eagu
}

// ClearWorkingOfficeRegionFacilityID clears the value of the "WorkingOfficeRegionFacilityID" field.
func (eagu *ExamApplicationsGDSPAUpdate) ClearWorkingOfficeRegionFacilityID() *ExamApplicationsGDSPAUpdate {
	eagu.mutation.ClearWorkingOfficeRegionFacilityID()
	return eagu
}

// SetWorkingOfficeRegionName sets the "WorkingOfficeRegionName" field.
func (eagu *ExamApplicationsGDSPAUpdate) SetWorkingOfficeRegionName(s string) *ExamApplicationsGDSPAUpdate {
	eagu.mutation.SetWorkingOfficeRegionName(s)
	return eagu
}

// SetNillableWorkingOfficeRegionName sets the "WorkingOfficeRegionName" field if the given value is not nil.
func (eagu *ExamApplicationsGDSPAUpdate) SetNillableWorkingOfficeRegionName(s *string) *ExamApplicationsGDSPAUpdate {
	if s != nil {
		eagu.SetWorkingOfficeRegionName(*s)
	}
	return eagu
}

// ClearWorkingOfficeRegionName clears the value of the "WorkingOfficeRegionName" field.
func (eagu *ExamApplicationsGDSPAUpdate) ClearWorkingOfficeRegionName() *ExamApplicationsGDSPAUpdate {
	eagu.mutation.ClearWorkingOfficeRegionName()
	return eagu
}

// SetWorkingOfficeDivisionFacilityID sets the "WorkingOfficeDivisionFacilityID" field.
func (eagu *ExamApplicationsGDSPAUpdate) SetWorkingOfficeDivisionFacilityID(s string) *ExamApplicationsGDSPAUpdate {
	eagu.mutation.SetWorkingOfficeDivisionFacilityID(s)
	return eagu
}

// SetNillableWorkingOfficeDivisionFacilityID sets the "WorkingOfficeDivisionFacilityID" field if the given value is not nil.
func (eagu *ExamApplicationsGDSPAUpdate) SetNillableWorkingOfficeDivisionFacilityID(s *string) *ExamApplicationsGDSPAUpdate {
	if s != nil {
		eagu.SetWorkingOfficeDivisionFacilityID(*s)
	}
	return eagu
}

// ClearWorkingOfficeDivisionFacilityID clears the value of the "WorkingOfficeDivisionFacilityID" field.
func (eagu *ExamApplicationsGDSPAUpdate) ClearWorkingOfficeDivisionFacilityID() *ExamApplicationsGDSPAUpdate {
	eagu.mutation.ClearWorkingOfficeDivisionFacilityID()
	return eagu
}

// SetWorkingOfficeDivisionName sets the "WorkingOfficeDivisionName" field.
func (eagu *ExamApplicationsGDSPAUpdate) SetWorkingOfficeDivisionName(s string) *ExamApplicationsGDSPAUpdate {
	eagu.mutation.SetWorkingOfficeDivisionName(s)
	return eagu
}

// SetNillableWorkingOfficeDivisionName sets the "WorkingOfficeDivisionName" field if the given value is not nil.
func (eagu *ExamApplicationsGDSPAUpdate) SetNillableWorkingOfficeDivisionName(s *string) *ExamApplicationsGDSPAUpdate {
	if s != nil {
		eagu.SetWorkingOfficeDivisionName(*s)
	}
	return eagu
}

// ClearWorkingOfficeDivisionName clears the value of the "WorkingOfficeDivisionName" field.
func (eagu *ExamApplicationsGDSPAUpdate) ClearWorkingOfficeDivisionName() *ExamApplicationsGDSPAUpdate {
	eagu.mutation.ClearWorkingOfficeDivisionName()
	return eagu
}

// SetReportingOfficeFacilityID sets the "ReportingOfficeFacilityID" field.
func (eagu *ExamApplicationsGDSPAUpdate) SetReportingOfficeFacilityID(s string) *ExamApplicationsGDSPAUpdate {
	eagu.mutation.SetReportingOfficeFacilityID(s)
	return eagu
}

// SetNillableReportingOfficeFacilityID sets the "ReportingOfficeFacilityID" field if the given value is not nil.
func (eagu *ExamApplicationsGDSPAUpdate) SetNillableReportingOfficeFacilityID(s *string) *ExamApplicationsGDSPAUpdate {
	if s != nil {
		eagu.SetReportingOfficeFacilityID(*s)
	}
	return eagu
}

// ClearReportingOfficeFacilityID clears the value of the "ReportingOfficeFacilityID" field.
func (eagu *ExamApplicationsGDSPAUpdate) ClearReportingOfficeFacilityID() *ExamApplicationsGDSPAUpdate {
	eagu.mutation.ClearReportingOfficeFacilityID()
	return eagu
}

// SetReportingOfficeName sets the "ReportingOfficeName" field.
func (eagu *ExamApplicationsGDSPAUpdate) SetReportingOfficeName(s string) *ExamApplicationsGDSPAUpdate {
	eagu.mutation.SetReportingOfficeName(s)
	return eagu
}

// SetNillableReportingOfficeName sets the "ReportingOfficeName" field if the given value is not nil.
func (eagu *ExamApplicationsGDSPAUpdate) SetNillableReportingOfficeName(s *string) *ExamApplicationsGDSPAUpdate {
	if s != nil {
		eagu.SetReportingOfficeName(*s)
	}
	return eagu
}

// ClearReportingOfficeName clears the value of the "ReportingOfficeName" field.
func (eagu *ExamApplicationsGDSPAUpdate) ClearReportingOfficeName() *ExamApplicationsGDSPAUpdate {
	eagu.mutation.ClearReportingOfficeName()
	return eagu
}

// SetLienControllingOfficeID sets the "LienControllingOfficeID" field.
func (eagu *ExamApplicationsGDSPAUpdate) SetLienControllingOfficeID(s string) *ExamApplicationsGDSPAUpdate {
	eagu.mutation.SetLienControllingOfficeID(s)
	return eagu
}

// SetNillableLienControllingOfficeID sets the "LienControllingOfficeID" field if the given value is not nil.
func (eagu *ExamApplicationsGDSPAUpdate) SetNillableLienControllingOfficeID(s *string) *ExamApplicationsGDSPAUpdate {
	if s != nil {
		eagu.SetLienControllingOfficeID(*s)
	}
	return eagu
}

// ClearLienControllingOfficeID clears the value of the "LienControllingOfficeID" field.
func (eagu *ExamApplicationsGDSPAUpdate) ClearLienControllingOfficeID() *ExamApplicationsGDSPAUpdate {
	eagu.mutation.ClearLienControllingOfficeID()
	return eagu
}

// SetLienControllingOfficeName sets the "LienControllingOfficeName" field.
func (eagu *ExamApplicationsGDSPAUpdate) SetLienControllingOfficeName(s string) *ExamApplicationsGDSPAUpdate {
	eagu.mutation.SetLienControllingOfficeName(s)
	return eagu
}

// SetNillableLienControllingOfficeName sets the "LienControllingOfficeName" field if the given value is not nil.
func (eagu *ExamApplicationsGDSPAUpdate) SetNillableLienControllingOfficeName(s *string) *ExamApplicationsGDSPAUpdate {
	if s != nil {
		eagu.SetLienControllingOfficeName(*s)
	}
	return eagu
}

// ClearLienControllingOfficeName clears the value of the "LienControllingOfficeName" field.
func (eagu *ExamApplicationsGDSPAUpdate) ClearLienControllingOfficeName() *ExamApplicationsGDSPAUpdate {
	eagu.mutation.ClearLienControllingOfficeName()
	return eagu
}

// SetInDeputation sets the "InDeputation" field.
func (eagu *ExamApplicationsGDSPAUpdate) SetInDeputation(s string) *ExamApplicationsGDSPAUpdate {
	eagu.mutation.SetInDeputation(s)
	return eagu
}

// SetNillableInDeputation sets the "InDeputation" field if the given value is not nil.
func (eagu *ExamApplicationsGDSPAUpdate) SetNillableInDeputation(s *string) *ExamApplicationsGDSPAUpdate {
	if s != nil {
		eagu.SetInDeputation(*s)
	}
	return eagu
}

// ClearInDeputation clears the value of the "InDeputation" field.
func (eagu *ExamApplicationsGDSPAUpdate) ClearInDeputation() *ExamApplicationsGDSPAUpdate {
	eagu.mutation.ClearInDeputation()
	return eagu
}

// SetDeputationType sets the "DeputationType" field.
func (eagu *ExamApplicationsGDSPAUpdate) SetDeputationType(s string) *ExamApplicationsGDSPAUpdate {
	eagu.mutation.SetDeputationType(s)
	return eagu
}

// SetNillableDeputationType sets the "DeputationType" field if the given value is not nil.
func (eagu *ExamApplicationsGDSPAUpdate) SetNillableDeputationType(s *string) *ExamApplicationsGDSPAUpdate {
	if s != nil {
		eagu.SetDeputationType(*s)
	}
	return eagu
}

// ClearDeputationType clears the value of the "DeputationType" field.
func (eagu *ExamApplicationsGDSPAUpdate) ClearDeputationType() *ExamApplicationsGDSPAUpdate {
	eagu.mutation.ClearDeputationType()
	return eagu
}

// SetDeputationOfficeUniqueId sets the "DeputationOfficeUniqueId" field.
func (eagu *ExamApplicationsGDSPAUpdate) SetDeputationOfficeUniqueId(s string) *ExamApplicationsGDSPAUpdate {
	eagu.mutation.SetDeputationOfficeUniqueId(s)
	return eagu
}

// SetNillableDeputationOfficeUniqueId sets the "DeputationOfficeUniqueId" field if the given value is not nil.
func (eagu *ExamApplicationsGDSPAUpdate) SetNillableDeputationOfficeUniqueId(s *string) *ExamApplicationsGDSPAUpdate {
	if s != nil {
		eagu.SetDeputationOfficeUniqueId(*s)
	}
	return eagu
}

// ClearDeputationOfficeUniqueId clears the value of the "DeputationOfficeUniqueId" field.
func (eagu *ExamApplicationsGDSPAUpdate) ClearDeputationOfficeUniqueId() *ExamApplicationsGDSPAUpdate {
	eagu.mutation.ClearDeputationOfficeUniqueId()
	return eagu
}

// SetDeputationOfficeFacilityID sets the "DeputationOfficeFacilityID" field.
func (eagu *ExamApplicationsGDSPAUpdate) SetDeputationOfficeFacilityID(s string) *ExamApplicationsGDSPAUpdate {
	eagu.mutation.SetDeputationOfficeFacilityID(s)
	return eagu
}

// SetNillableDeputationOfficeFacilityID sets the "DeputationOfficeFacilityID" field if the given value is not nil.
func (eagu *ExamApplicationsGDSPAUpdate) SetNillableDeputationOfficeFacilityID(s *string) *ExamApplicationsGDSPAUpdate {
	if s != nil {
		eagu.SetDeputationOfficeFacilityID(*s)
	}
	return eagu
}

// ClearDeputationOfficeFacilityID clears the value of the "DeputationOfficeFacilityID" field.
func (eagu *ExamApplicationsGDSPAUpdate) ClearDeputationOfficeFacilityID() *ExamApplicationsGDSPAUpdate {
	eagu.mutation.ClearDeputationOfficeFacilityID()
	return eagu
}

// SetDeputationOfficeName sets the "DeputationOfficeName" field.
func (eagu *ExamApplicationsGDSPAUpdate) SetDeputationOfficeName(s string) *ExamApplicationsGDSPAUpdate {
	eagu.mutation.SetDeputationOfficeName(s)
	return eagu
}

// SetNillableDeputationOfficeName sets the "DeputationOfficeName" field if the given value is not nil.
func (eagu *ExamApplicationsGDSPAUpdate) SetNillableDeputationOfficeName(s *string) *ExamApplicationsGDSPAUpdate {
	if s != nil {
		eagu.SetDeputationOfficeName(*s)
	}
	return eagu
}

// ClearDeputationOfficeName clears the value of the "DeputationOfficeName" field.
func (eagu *ExamApplicationsGDSPAUpdate) ClearDeputationOfficeName() *ExamApplicationsGDSPAUpdate {
	eagu.mutation.ClearDeputationOfficeName()
	return eagu
}

// SetDeputationControllingOfficeID sets the "DeputationControllingOfficeID" field.
func (eagu *ExamApplicationsGDSPAUpdate) SetDeputationControllingOfficeID(s string) *ExamApplicationsGDSPAUpdate {
	eagu.mutation.SetDeputationControllingOfficeID(s)
	return eagu
}

// SetNillableDeputationControllingOfficeID sets the "DeputationControllingOfficeID" field if the given value is not nil.
func (eagu *ExamApplicationsGDSPAUpdate) SetNillableDeputationControllingOfficeID(s *string) *ExamApplicationsGDSPAUpdate {
	if s != nil {
		eagu.SetDeputationControllingOfficeID(*s)
	}
	return eagu
}

// ClearDeputationControllingOfficeID clears the value of the "DeputationControllingOfficeID" field.
func (eagu *ExamApplicationsGDSPAUpdate) ClearDeputationControllingOfficeID() *ExamApplicationsGDSPAUpdate {
	eagu.mutation.ClearDeputationControllingOfficeID()
	return eagu
}

// SetDeputationControllingOfficeName sets the "DeputationControllingOfficeName" field.
func (eagu *ExamApplicationsGDSPAUpdate) SetDeputationControllingOfficeName(s string) *ExamApplicationsGDSPAUpdate {
	eagu.mutation.SetDeputationControllingOfficeName(s)
	return eagu
}

// SetNillableDeputationControllingOfficeName sets the "DeputationControllingOfficeName" field if the given value is not nil.
func (eagu *ExamApplicationsGDSPAUpdate) SetNillableDeputationControllingOfficeName(s *string) *ExamApplicationsGDSPAUpdate {
	if s != nil {
		eagu.SetDeputationControllingOfficeName(*s)
	}
	return eagu
}

// ClearDeputationControllingOfficeName clears the value of the "DeputationControllingOfficeName" field.
func (eagu *ExamApplicationsGDSPAUpdate) ClearDeputationControllingOfficeName() *ExamApplicationsGDSPAUpdate {
	eagu.mutation.ClearDeputationControllingOfficeName()
	return eagu
}

// SetControllingOfficeFacilityID sets the "ControllingOfficeFacilityID" field.
func (eagu *ExamApplicationsGDSPAUpdate) SetControllingOfficeFacilityID(s string) *ExamApplicationsGDSPAUpdate {
	eagu.mutation.SetControllingOfficeFacilityID(s)
	return eagu
}

// SetNillableControllingOfficeFacilityID sets the "ControllingOfficeFacilityID" field if the given value is not nil.
func (eagu *ExamApplicationsGDSPAUpdate) SetNillableControllingOfficeFacilityID(s *string) *ExamApplicationsGDSPAUpdate {
	if s != nil {
		eagu.SetControllingOfficeFacilityID(*s)
	}
	return eagu
}

// ClearControllingOfficeFacilityID clears the value of the "ControllingOfficeFacilityID" field.
func (eagu *ExamApplicationsGDSPAUpdate) ClearControllingOfficeFacilityID() *ExamApplicationsGDSPAUpdate {
	eagu.mutation.ClearControllingOfficeFacilityID()
	return eagu
}

// SetControllingOfficeName sets the "ControllingOfficeName" field.
func (eagu *ExamApplicationsGDSPAUpdate) SetControllingOfficeName(s string) *ExamApplicationsGDSPAUpdate {
	eagu.mutation.SetControllingOfficeName(s)
	return eagu
}

// SetNillableControllingOfficeName sets the "ControllingOfficeName" field if the given value is not nil.
func (eagu *ExamApplicationsGDSPAUpdate) SetNillableControllingOfficeName(s *string) *ExamApplicationsGDSPAUpdate {
	if s != nil {
		eagu.SetControllingOfficeName(*s)
	}
	return eagu
}

// ClearControllingOfficeName clears the value of the "ControllingOfficeName" field.
func (eagu *ExamApplicationsGDSPAUpdate) ClearControllingOfficeName() *ExamApplicationsGDSPAUpdate {
	eagu.mutation.ClearControllingOfficeName()
	return eagu
}

// SetSubdivisionOfficeFacilityID sets the "SubdivisionOfficeFacilityID" field.
func (eagu *ExamApplicationsGDSPAUpdate) SetSubdivisionOfficeFacilityID(s string) *ExamApplicationsGDSPAUpdate {
	eagu.mutation.SetSubdivisionOfficeFacilityID(s)
	return eagu
}

// SetNillableSubdivisionOfficeFacilityID sets the "SubdivisionOfficeFacilityID" field if the given value is not nil.
func (eagu *ExamApplicationsGDSPAUpdate) SetNillableSubdivisionOfficeFacilityID(s *string) *ExamApplicationsGDSPAUpdate {
	if s != nil {
		eagu.SetSubdivisionOfficeFacilityID(*s)
	}
	return eagu
}

// ClearSubdivisionOfficeFacilityID clears the value of the "SubdivisionOfficeFacilityID" field.
func (eagu *ExamApplicationsGDSPAUpdate) ClearSubdivisionOfficeFacilityID() *ExamApplicationsGDSPAUpdate {
	eagu.mutation.ClearSubdivisionOfficeFacilityID()
	return eagu
}

// SetSubdivisionOfficeName sets the "SubdivisionOfficeName" field.
func (eagu *ExamApplicationsGDSPAUpdate) SetSubdivisionOfficeName(s string) *ExamApplicationsGDSPAUpdate {
	eagu.mutation.SetSubdivisionOfficeName(s)
	return eagu
}

// SetNillableSubdivisionOfficeName sets the "SubdivisionOfficeName" field if the given value is not nil.
func (eagu *ExamApplicationsGDSPAUpdate) SetNillableSubdivisionOfficeName(s *string) *ExamApplicationsGDSPAUpdate {
	if s != nil {
		eagu.SetSubdivisionOfficeName(*s)
	}
	return eagu
}

// ClearSubdivisionOfficeName clears the value of the "SubdivisionOfficeName" field.
func (eagu *ExamApplicationsGDSPAUpdate) ClearSubdivisionOfficeName() *ExamApplicationsGDSPAUpdate {
	eagu.mutation.ClearSubdivisionOfficeName()
	return eagu
}

// SetNodalOfficeFacilityID sets the "NodalOfficeFacilityID" field.
func (eagu *ExamApplicationsGDSPAUpdate) SetNodalOfficeFacilityID(s string) *ExamApplicationsGDSPAUpdate {
	eagu.mutation.SetNodalOfficeFacilityID(s)
	return eagu
}

// SetNillableNodalOfficeFacilityID sets the "NodalOfficeFacilityID" field if the given value is not nil.
func (eagu *ExamApplicationsGDSPAUpdate) SetNillableNodalOfficeFacilityID(s *string) *ExamApplicationsGDSPAUpdate {
	if s != nil {
		eagu.SetNodalOfficeFacilityID(*s)
	}
	return eagu
}

// ClearNodalOfficeFacilityID clears the value of the "NodalOfficeFacilityID" field.
func (eagu *ExamApplicationsGDSPAUpdate) ClearNodalOfficeFacilityID() *ExamApplicationsGDSPAUpdate {
	eagu.mutation.ClearNodalOfficeFacilityID()
	return eagu
}

// SetNodalOfficeName sets the "NodalOfficeName" field.
func (eagu *ExamApplicationsGDSPAUpdate) SetNodalOfficeName(s string) *ExamApplicationsGDSPAUpdate {
	eagu.mutation.SetNodalOfficeName(s)
	return eagu
}

// SetNillableNodalOfficeName sets the "NodalOfficeName" field if the given value is not nil.
func (eagu *ExamApplicationsGDSPAUpdate) SetNillableNodalOfficeName(s *string) *ExamApplicationsGDSPAUpdate {
	if s != nil {
		eagu.SetNodalOfficeName(*s)
	}
	return eagu
}

// ClearNodalOfficeName clears the value of the "NodalOfficeName" field.
func (eagu *ExamApplicationsGDSPAUpdate) ClearNodalOfficeName() *ExamApplicationsGDSPAUpdate {
	eagu.mutation.ClearNodalOfficeName()
	return eagu
}

// SetExamCityCenterCode sets the "ExamCityCenterCode" field.
func (eagu *ExamApplicationsGDSPAUpdate) SetExamCityCenterCode(i int32) *ExamApplicationsGDSPAUpdate {
	eagu.mutation.SetExamCityCenterCode(i)
	return eagu
}

// SetNillableExamCityCenterCode sets the "ExamCityCenterCode" field if the given value is not nil.
func (eagu *ExamApplicationsGDSPAUpdate) SetNillableExamCityCenterCode(i *int32) *ExamApplicationsGDSPAUpdate {
	if i != nil {
		eagu.SetExamCityCenterCode(*i)
	}
	return eagu
}

// ClearExamCityCenterCode clears the value of the "ExamCityCenterCode" field.
func (eagu *ExamApplicationsGDSPAUpdate) ClearExamCityCenterCode() *ExamApplicationsGDSPAUpdate {
	eagu.mutation.ClearExamCityCenterCode()
	return eagu
}

// SetCenterFacilityId sets the "CenterFacilityId" field.
func (eagu *ExamApplicationsGDSPAUpdate) SetCenterFacilityId(s string) *ExamApplicationsGDSPAUpdate {
	eagu.mutation.SetCenterFacilityId(s)
	return eagu
}

// SetNillableCenterFacilityId sets the "CenterFacilityId" field if the given value is not nil.
func (eagu *ExamApplicationsGDSPAUpdate) SetNillableCenterFacilityId(s *string) *ExamApplicationsGDSPAUpdate {
	if s != nil {
		eagu.SetCenterFacilityId(*s)
	}
	return eagu
}

// ClearCenterFacilityId clears the value of the "CenterFacilityId" field.
func (eagu *ExamApplicationsGDSPAUpdate) ClearCenterFacilityId() *ExamApplicationsGDSPAUpdate {
	eagu.mutation.ClearCenterFacilityId()
	return eagu
}

// SetCentrePreference sets the "CentrePreference" field.
func (eagu *ExamApplicationsGDSPAUpdate) SetCentrePreference(s string) *ExamApplicationsGDSPAUpdate {
	eagu.mutation.SetCentrePreference(s)
	return eagu
}

// SetNillableCentrePreference sets the "CentrePreference" field if the given value is not nil.
func (eagu *ExamApplicationsGDSPAUpdate) SetNillableCentrePreference(s *string) *ExamApplicationsGDSPAUpdate {
	if s != nil {
		eagu.SetCentrePreference(*s)
	}
	return eagu
}

// ClearCentrePreference clears the value of the "CentrePreference" field.
func (eagu *ExamApplicationsGDSPAUpdate) ClearCentrePreference() *ExamApplicationsGDSPAUpdate {
	eagu.mutation.ClearCentrePreference()
	return eagu
}

// SetSignature sets the "Signature" field.
func (eagu *ExamApplicationsGDSPAUpdate) SetSignature(s string) *ExamApplicationsGDSPAUpdate {
	eagu.mutation.SetSignature(s)
	return eagu
}

// SetNillableSignature sets the "Signature" field if the given value is not nil.
func (eagu *ExamApplicationsGDSPAUpdate) SetNillableSignature(s *string) *ExamApplicationsGDSPAUpdate {
	if s != nil {
		eagu.SetSignature(*s)
	}
	return eagu
}

// ClearSignature clears the value of the "Signature" field.
func (eagu *ExamApplicationsGDSPAUpdate) ClearSignature() *ExamApplicationsGDSPAUpdate {
	eagu.mutation.ClearSignature()
	return eagu
}

// SetPhoto sets the "Photo" field.
func (eagu *ExamApplicationsGDSPAUpdate) SetPhoto(s string) *ExamApplicationsGDSPAUpdate {
	eagu.mutation.SetPhoto(s)
	return eagu
}

// SetNillablePhoto sets the "Photo" field if the given value is not nil.
func (eagu *ExamApplicationsGDSPAUpdate) SetNillablePhoto(s *string) *ExamApplicationsGDSPAUpdate {
	if s != nil {
		eagu.SetPhoto(*s)
	}
	return eagu
}

// ClearPhoto clears the value of the "Photo" field.
func (eagu *ExamApplicationsGDSPAUpdate) ClearPhoto() *ExamApplicationsGDSPAUpdate {
	eagu.mutation.ClearPhoto()
	return eagu
}

// SetSignaturePath sets the "SignaturePath" field.
func (eagu *ExamApplicationsGDSPAUpdate) SetSignaturePath(s string) *ExamApplicationsGDSPAUpdate {
	eagu.mutation.SetSignaturePath(s)
	return eagu
}

// SetNillableSignaturePath sets the "SignaturePath" field if the given value is not nil.
func (eagu *ExamApplicationsGDSPAUpdate) SetNillableSignaturePath(s *string) *ExamApplicationsGDSPAUpdate {
	if s != nil {
		eagu.SetSignaturePath(*s)
	}
	return eagu
}

// ClearSignaturePath clears the value of the "SignaturePath" field.
func (eagu *ExamApplicationsGDSPAUpdate) ClearSignaturePath() *ExamApplicationsGDSPAUpdate {
	eagu.mutation.ClearSignaturePath()
	return eagu
}

// SetPhotoPath sets the "PhotoPath" field.
func (eagu *ExamApplicationsGDSPAUpdate) SetPhotoPath(s string) *ExamApplicationsGDSPAUpdate {
	eagu.mutation.SetPhotoPath(s)
	return eagu
}

// SetNillablePhotoPath sets the "PhotoPath" field if the given value is not nil.
func (eagu *ExamApplicationsGDSPAUpdate) SetNillablePhotoPath(s *string) *ExamApplicationsGDSPAUpdate {
	if s != nil {
		eagu.SetPhotoPath(*s)
	}
	return eagu
}

// ClearPhotoPath clears the value of the "PhotoPath" field.
func (eagu *ExamApplicationsGDSPAUpdate) ClearPhotoPath() *ExamApplicationsGDSPAUpdate {
	eagu.mutation.ClearPhotoPath()
	return eagu
}

// SetCandidatePhoto sets the "CandidatePhoto" field.
func (eagu *ExamApplicationsGDSPAUpdate) SetCandidatePhoto(b []byte) *ExamApplicationsGDSPAUpdate {
	eagu.mutation.SetCandidatePhoto(b)
	return eagu
}

// ClearCandidatePhoto clears the value of the "CandidatePhoto" field.
func (eagu *ExamApplicationsGDSPAUpdate) ClearCandidatePhoto() *ExamApplicationsGDSPAUpdate {
	eagu.mutation.ClearCandidatePhoto()
	return eagu
}

// SetCandidateSignature sets the "CandidateSignature" field.
func (eagu *ExamApplicationsGDSPAUpdate) SetCandidateSignature(b []byte) *ExamApplicationsGDSPAUpdate {
	eagu.mutation.SetCandidateSignature(b)
	return eagu
}

// ClearCandidateSignature clears the value of the "CandidateSignature" field.
func (eagu *ExamApplicationsGDSPAUpdate) ClearCandidateSignature() *ExamApplicationsGDSPAUpdate {
	eagu.mutation.ClearCandidateSignature()
	return eagu
}

// SetTempHallTicket sets the "TempHallTicket" field.
func (eagu *ExamApplicationsGDSPAUpdate) SetTempHallTicket(s string) *ExamApplicationsGDSPAUpdate {
	eagu.mutation.SetTempHallTicket(s)
	return eagu
}

// SetNillableTempHallTicket sets the "TempHallTicket" field if the given value is not nil.
func (eagu *ExamApplicationsGDSPAUpdate) SetNillableTempHallTicket(s *string) *ExamApplicationsGDSPAUpdate {
	if s != nil {
		eagu.SetTempHallTicket(*s)
	}
	return eagu
}

// ClearTempHallTicket clears the value of the "TempHallTicket" field.
func (eagu *ExamApplicationsGDSPAUpdate) ClearTempHallTicket() *ExamApplicationsGDSPAUpdate {
	eagu.mutation.ClearTempHallTicket()
	return eagu
}

// SetCandidateRemarks sets the "CandidateRemarks" field.
func (eagu *ExamApplicationsGDSPAUpdate) SetCandidateRemarks(s string) *ExamApplicationsGDSPAUpdate {
	eagu.mutation.SetCandidateRemarks(s)
	return eagu
}

// SetNillableCandidateRemarks sets the "CandidateRemarks" field if the given value is not nil.
func (eagu *ExamApplicationsGDSPAUpdate) SetNillableCandidateRemarks(s *string) *ExamApplicationsGDSPAUpdate {
	if s != nil {
		eagu.SetCandidateRemarks(*s)
	}
	return eagu
}

// ClearCandidateRemarks clears the value of the "CandidateRemarks" field.
func (eagu *ExamApplicationsGDSPAUpdate) ClearCandidateRemarks() *ExamApplicationsGDSPAUpdate {
	eagu.mutation.ClearCandidateRemarks()
	return eagu
}

// SetVAGeneralRemarks sets the "VAGeneralRemarks" field.
func (eagu *ExamApplicationsGDSPAUpdate) SetVAGeneralRemarks(s string) *ExamApplicationsGDSPAUpdate {
	eagu.mutation.SetVAGeneralRemarks(s)
	return eagu
}

// SetNillableVAGeneralRemarks sets the "VAGeneralRemarks" field if the given value is not nil.
func (eagu *ExamApplicationsGDSPAUpdate) SetNillableVAGeneralRemarks(s *string) *ExamApplicationsGDSPAUpdate {
	if s != nil {
		eagu.SetVAGeneralRemarks(*s)
	}
	return eagu
}

// ClearVAGeneralRemarks clears the value of the "VAGeneralRemarks" field.
func (eagu *ExamApplicationsGDSPAUpdate) ClearVAGeneralRemarks() *ExamApplicationsGDSPAUpdate {
	eagu.mutation.ClearVAGeneralRemarks()
	return eagu
}

// SetCAGeneralRemarks sets the "CAGeneralRemarks" field.
func (eagu *ExamApplicationsGDSPAUpdate) SetCAGeneralRemarks(s string) *ExamApplicationsGDSPAUpdate {
	eagu.mutation.SetCAGeneralRemarks(s)
	return eagu
}

// SetNillableCAGeneralRemarks sets the "CAGeneralRemarks" field if the given value is not nil.
func (eagu *ExamApplicationsGDSPAUpdate) SetNillableCAGeneralRemarks(s *string) *ExamApplicationsGDSPAUpdate {
	if s != nil {
		eagu.SetCAGeneralRemarks(*s)
	}
	return eagu
}

// ClearCAGeneralRemarks clears the value of the "CAGeneralRemarks" field.
func (eagu *ExamApplicationsGDSPAUpdate) ClearCAGeneralRemarks() *ExamApplicationsGDSPAUpdate {
	eagu.mutation.ClearCAGeneralRemarks()
	return eagu
}

// SetNAGeneralRemarks sets the "NAGeneralRemarks" field.
func (eagu *ExamApplicationsGDSPAUpdate) SetNAGeneralRemarks(s string) *ExamApplicationsGDSPAUpdate {
	eagu.mutation.SetNAGeneralRemarks(s)
	return eagu
}

// SetNillableNAGeneralRemarks sets the "NAGeneralRemarks" field if the given value is not nil.
func (eagu *ExamApplicationsGDSPAUpdate) SetNillableNAGeneralRemarks(s *string) *ExamApplicationsGDSPAUpdate {
	if s != nil {
		eagu.SetNAGeneralRemarks(*s)
	}
	return eagu
}

// ClearNAGeneralRemarks clears the value of the "NAGeneralRemarks" field.
func (eagu *ExamApplicationsGDSPAUpdate) ClearNAGeneralRemarks() *ExamApplicationsGDSPAUpdate {
	eagu.mutation.ClearNAGeneralRemarks()
	return eagu
}

// SetApplicationStatus sets the "ApplicationStatus" field.
func (eagu *ExamApplicationsGDSPAUpdate) SetApplicationStatus(s string) *ExamApplicationsGDSPAUpdate {
	eagu.mutation.SetApplicationStatus(s)
	return eagu
}

// SetNillableApplicationStatus sets the "ApplicationStatus" field if the given value is not nil.
func (eagu *ExamApplicationsGDSPAUpdate) SetNillableApplicationStatus(s *string) *ExamApplicationsGDSPAUpdate {
	if s != nil {
		eagu.SetApplicationStatus(*s)
	}
	return eagu
}

// ClearApplicationStatus clears the value of the "ApplicationStatus" field.
func (eagu *ExamApplicationsGDSPAUpdate) ClearApplicationStatus() *ExamApplicationsGDSPAUpdate {
	eagu.mutation.ClearApplicationStatus()
	return eagu
}

// SetStatus sets the "Status" field.
func (eagu *ExamApplicationsGDSPAUpdate) SetStatus(s string) *ExamApplicationsGDSPAUpdate {
	eagu.mutation.SetStatus(s)
	return eagu
}

// SetNillableStatus sets the "Status" field if the given value is not nil.
func (eagu *ExamApplicationsGDSPAUpdate) SetNillableStatus(s *string) *ExamApplicationsGDSPAUpdate {
	if s != nil {
		eagu.SetStatus(*s)
	}
	return eagu
}

// ClearStatus clears the value of the "Status" field.
func (eagu *ExamApplicationsGDSPAUpdate) ClearStatus() *ExamApplicationsGDSPAUpdate {
	eagu.mutation.ClearStatus()
	return eagu
}

// SetRecommendedStatus sets the "RecommendedStatus" field.
func (eagu *ExamApplicationsGDSPAUpdate) SetRecommendedStatus(s string) *ExamApplicationsGDSPAUpdate {
	eagu.mutation.SetRecommendedStatus(s)
	return eagu
}

// SetNillableRecommendedStatus sets the "RecommendedStatus" field if the given value is not nil.
func (eagu *ExamApplicationsGDSPAUpdate) SetNillableRecommendedStatus(s *string) *ExamApplicationsGDSPAUpdate {
	if s != nil {
		eagu.SetRecommendedStatus(*s)
	}
	return eagu
}

// ClearRecommendedStatus clears the value of the "RecommendedStatus" field.
func (eagu *ExamApplicationsGDSPAUpdate) ClearRecommendedStatus() *ExamApplicationsGDSPAUpdate {
	eagu.mutation.ClearRecommendedStatus()
	return eagu
}

// SetDesignationID sets the "DesignationID" field.
func (eagu *ExamApplicationsGDSPAUpdate) SetDesignationID(s string) *ExamApplicationsGDSPAUpdate {
	eagu.mutation.SetDesignationID(s)
	return eagu
}

// SetNillableDesignationID sets the "DesignationID" field if the given value is not nil.
func (eagu *ExamApplicationsGDSPAUpdate) SetNillableDesignationID(s *string) *ExamApplicationsGDSPAUpdate {
	if s != nil {
		eagu.SetDesignationID(*s)
	}
	return eagu
}

// ClearDesignationID clears the value of the "DesignationID" field.
func (eagu *ExamApplicationsGDSPAUpdate) ClearDesignationID() *ExamApplicationsGDSPAUpdate {
	eagu.mutation.ClearDesignationID()
	return eagu
}

// SetVAUserId sets the "VA_UserId" field.
func (eagu *ExamApplicationsGDSPAUpdate) SetVAUserId(i int32) *ExamApplicationsGDSPAUpdate {
	eagu.mutation.ResetVAUserId()
	eagu.mutation.SetVAUserId(i)
	return eagu
}

// SetNillableVAUserId sets the "VA_UserId" field if the given value is not nil.
func (eagu *ExamApplicationsGDSPAUpdate) SetNillableVAUserId(i *int32) *ExamApplicationsGDSPAUpdate {
	if i != nil {
		eagu.SetVAUserId(*i)
	}
	return eagu
}

// AddVAUserId adds i to the "VA_UserId" field.
func (eagu *ExamApplicationsGDSPAUpdate) AddVAUserId(i int32) *ExamApplicationsGDSPAUpdate {
	eagu.mutation.AddVAUserId(i)
	return eagu
}

// ClearVAUserId clears the value of the "VA_UserId" field.
func (eagu *ExamApplicationsGDSPAUpdate) ClearVAUserId() *ExamApplicationsGDSPAUpdate {
	eagu.mutation.ClearVAUserId()
	return eagu
}

// SetVAUserName sets the "VA_UserName" field.
func (eagu *ExamApplicationsGDSPAUpdate) SetVAUserName(s string) *ExamApplicationsGDSPAUpdate {
	eagu.mutation.SetVAUserName(s)
	return eagu
}

// SetNillableVAUserName sets the "VA_UserName" field if the given value is not nil.
func (eagu *ExamApplicationsGDSPAUpdate) SetNillableVAUserName(s *string) *ExamApplicationsGDSPAUpdate {
	if s != nil {
		eagu.SetVAUserName(*s)
	}
	return eagu
}

// ClearVAUserName clears the value of the "VA_UserName" field.
func (eagu *ExamApplicationsGDSPAUpdate) ClearVAUserName() *ExamApplicationsGDSPAUpdate {
	eagu.mutation.ClearVAUserName()
	return eagu
}

// SetVAEmployeeID sets the "VA_EmployeeID" field.
func (eagu *ExamApplicationsGDSPAUpdate) SetVAEmployeeID(s string) *ExamApplicationsGDSPAUpdate {
	eagu.mutation.SetVAEmployeeID(s)
	return eagu
}

// SetNillableVAEmployeeID sets the "VA_EmployeeID" field if the given value is not nil.
func (eagu *ExamApplicationsGDSPAUpdate) SetNillableVAEmployeeID(s *string) *ExamApplicationsGDSPAUpdate {
	if s != nil {
		eagu.SetVAEmployeeID(*s)
	}
	return eagu
}

// ClearVAEmployeeID clears the value of the "VA_EmployeeID" field.
func (eagu *ExamApplicationsGDSPAUpdate) ClearVAEmployeeID() *ExamApplicationsGDSPAUpdate {
	eagu.mutation.ClearVAEmployeeID()
	return eagu
}

// SetVAEmployeeDesignation sets the "VA_EmployeeDesignation" field.
func (eagu *ExamApplicationsGDSPAUpdate) SetVAEmployeeDesignation(s string) *ExamApplicationsGDSPAUpdate {
	eagu.mutation.SetVAEmployeeDesignation(s)
	return eagu
}

// SetNillableVAEmployeeDesignation sets the "VA_EmployeeDesignation" field if the given value is not nil.
func (eagu *ExamApplicationsGDSPAUpdate) SetNillableVAEmployeeDesignation(s *string) *ExamApplicationsGDSPAUpdate {
	if s != nil {
		eagu.SetVAEmployeeDesignation(*s)
	}
	return eagu
}

// ClearVAEmployeeDesignation clears the value of the "VA_EmployeeDesignation" field.
func (eagu *ExamApplicationsGDSPAUpdate) ClearVAEmployeeDesignation() *ExamApplicationsGDSPAUpdate {
	eagu.mutation.ClearVAEmployeeDesignation()
	return eagu
}

// SetVARemarks sets the "VA_Remarks" field.
func (eagu *ExamApplicationsGDSPAUpdate) SetVARemarks(s string) *ExamApplicationsGDSPAUpdate {
	eagu.mutation.SetVARemarks(s)
	return eagu
}

// SetNillableVARemarks sets the "VA_Remarks" field if the given value is not nil.
func (eagu *ExamApplicationsGDSPAUpdate) SetNillableVARemarks(s *string) *ExamApplicationsGDSPAUpdate {
	if s != nil {
		eagu.SetVARemarks(*s)
	}
	return eagu
}

// ClearVARemarks clears the value of the "VA_Remarks" field.
func (eagu *ExamApplicationsGDSPAUpdate) ClearVARemarks() *ExamApplicationsGDSPAUpdate {
	eagu.mutation.ClearVARemarks()
	return eagu
}

// SetVADate sets the "VA_Date" field.
func (eagu *ExamApplicationsGDSPAUpdate) SetVADate(t time.Time) *ExamApplicationsGDSPAUpdate {
	eagu.mutation.SetVADate(t)
	return eagu
}

// SetNillableVADate sets the "VA_Date" field if the given value is not nil.
func (eagu *ExamApplicationsGDSPAUpdate) SetNillableVADate(t *time.Time) *ExamApplicationsGDSPAUpdate {
	if t != nil {
		eagu.SetVADate(*t)
	}
	return eagu
}

// ClearVADate clears the value of the "VA_Date" field.
func (eagu *ExamApplicationsGDSPAUpdate) ClearVADate() *ExamApplicationsGDSPAUpdate {
	eagu.mutation.ClearVADate()
	return eagu
}

// SetCAUserId sets the "CA_UserId" field.
func (eagu *ExamApplicationsGDSPAUpdate) SetCAUserId(i int32) *ExamApplicationsGDSPAUpdate {
	eagu.mutation.ResetCAUserId()
	eagu.mutation.SetCAUserId(i)
	return eagu
}

// SetNillableCAUserId sets the "CA_UserId" field if the given value is not nil.
func (eagu *ExamApplicationsGDSPAUpdate) SetNillableCAUserId(i *int32) *ExamApplicationsGDSPAUpdate {
	if i != nil {
		eagu.SetCAUserId(*i)
	}
	return eagu
}

// AddCAUserId adds i to the "CA_UserId" field.
func (eagu *ExamApplicationsGDSPAUpdate) AddCAUserId(i int32) *ExamApplicationsGDSPAUpdate {
	eagu.mutation.AddCAUserId(i)
	return eagu
}

// ClearCAUserId clears the value of the "CA_UserId" field.
func (eagu *ExamApplicationsGDSPAUpdate) ClearCAUserId() *ExamApplicationsGDSPAUpdate {
	eagu.mutation.ClearCAUserId()
	return eagu
}

// SetCAUserName sets the "CA_UserName" field.
func (eagu *ExamApplicationsGDSPAUpdate) SetCAUserName(s string) *ExamApplicationsGDSPAUpdate {
	eagu.mutation.SetCAUserName(s)
	return eagu
}

// SetNillableCAUserName sets the "CA_UserName" field if the given value is not nil.
func (eagu *ExamApplicationsGDSPAUpdate) SetNillableCAUserName(s *string) *ExamApplicationsGDSPAUpdate {
	if s != nil {
		eagu.SetCAUserName(*s)
	}
	return eagu
}

// ClearCAUserName clears the value of the "CA_UserName" field.
func (eagu *ExamApplicationsGDSPAUpdate) ClearCAUserName() *ExamApplicationsGDSPAUpdate {
	eagu.mutation.ClearCAUserName()
	return eagu
}

// SetCAEmployeeID sets the "CA_EmployeeID" field.
func (eagu *ExamApplicationsGDSPAUpdate) SetCAEmployeeID(s string) *ExamApplicationsGDSPAUpdate {
	eagu.mutation.SetCAEmployeeID(s)
	return eagu
}

// SetNillableCAEmployeeID sets the "CA_EmployeeID" field if the given value is not nil.
func (eagu *ExamApplicationsGDSPAUpdate) SetNillableCAEmployeeID(s *string) *ExamApplicationsGDSPAUpdate {
	if s != nil {
		eagu.SetCAEmployeeID(*s)
	}
	return eagu
}

// ClearCAEmployeeID clears the value of the "CA_EmployeeID" field.
func (eagu *ExamApplicationsGDSPAUpdate) ClearCAEmployeeID() *ExamApplicationsGDSPAUpdate {
	eagu.mutation.ClearCAEmployeeID()
	return eagu
}

// SetCAEmployeeDesignation sets the "CA_EmployeeDesignation" field.
func (eagu *ExamApplicationsGDSPAUpdate) SetCAEmployeeDesignation(s string) *ExamApplicationsGDSPAUpdate {
	eagu.mutation.SetCAEmployeeDesignation(s)
	return eagu
}

// SetNillableCAEmployeeDesignation sets the "CA_EmployeeDesignation" field if the given value is not nil.
func (eagu *ExamApplicationsGDSPAUpdate) SetNillableCAEmployeeDesignation(s *string) *ExamApplicationsGDSPAUpdate {
	if s != nil {
		eagu.SetCAEmployeeDesignation(*s)
	}
	return eagu
}

// ClearCAEmployeeDesignation clears the value of the "CA_EmployeeDesignation" field.
func (eagu *ExamApplicationsGDSPAUpdate) ClearCAEmployeeDesignation() *ExamApplicationsGDSPAUpdate {
	eagu.mutation.ClearCAEmployeeDesignation()
	return eagu
}

// SetCARemarks sets the "CA_Remarks" field.
func (eagu *ExamApplicationsGDSPAUpdate) SetCARemarks(s string) *ExamApplicationsGDSPAUpdate {
	eagu.mutation.SetCARemarks(s)
	return eagu
}

// SetNillableCARemarks sets the "CA_Remarks" field if the given value is not nil.
func (eagu *ExamApplicationsGDSPAUpdate) SetNillableCARemarks(s *string) *ExamApplicationsGDSPAUpdate {
	if s != nil {
		eagu.SetCARemarks(*s)
	}
	return eagu
}

// ClearCARemarks clears the value of the "CA_Remarks" field.
func (eagu *ExamApplicationsGDSPAUpdate) ClearCARemarks() *ExamApplicationsGDSPAUpdate {
	eagu.mutation.ClearCARemarks()
	return eagu
}

// SetCADate sets the "CA_Date" field.
func (eagu *ExamApplicationsGDSPAUpdate) SetCADate(t time.Time) *ExamApplicationsGDSPAUpdate {
	eagu.mutation.SetCADate(t)
	return eagu
}

// SetNillableCADate sets the "CA_Date" field if the given value is not nil.
func (eagu *ExamApplicationsGDSPAUpdate) SetNillableCADate(t *time.Time) *ExamApplicationsGDSPAUpdate {
	if t != nil {
		eagu.SetCADate(*t)
	}
	return eagu
}

// ClearCADate clears the value of the "CA_Date" field.
func (eagu *ExamApplicationsGDSPAUpdate) ClearCADate() *ExamApplicationsGDSPAUpdate {
	eagu.mutation.ClearCADate()
	return eagu
}

// SetNAUserId sets the "NA_UserId" field.
func (eagu *ExamApplicationsGDSPAUpdate) SetNAUserId(i int32) *ExamApplicationsGDSPAUpdate {
	eagu.mutation.ResetNAUserId()
	eagu.mutation.SetNAUserId(i)
	return eagu
}

// SetNillableNAUserId sets the "NA_UserId" field if the given value is not nil.
func (eagu *ExamApplicationsGDSPAUpdate) SetNillableNAUserId(i *int32) *ExamApplicationsGDSPAUpdate {
	if i != nil {
		eagu.SetNAUserId(*i)
	}
	return eagu
}

// AddNAUserId adds i to the "NA_UserId" field.
func (eagu *ExamApplicationsGDSPAUpdate) AddNAUserId(i int32) *ExamApplicationsGDSPAUpdate {
	eagu.mutation.AddNAUserId(i)
	return eagu
}

// ClearNAUserId clears the value of the "NA_UserId" field.
func (eagu *ExamApplicationsGDSPAUpdate) ClearNAUserId() *ExamApplicationsGDSPAUpdate {
	eagu.mutation.ClearNAUserId()
	return eagu
}

// SetNAUserName sets the "NA_UserName" field.
func (eagu *ExamApplicationsGDSPAUpdate) SetNAUserName(s string) *ExamApplicationsGDSPAUpdate {
	eagu.mutation.SetNAUserName(s)
	return eagu
}

// SetNillableNAUserName sets the "NA_UserName" field if the given value is not nil.
func (eagu *ExamApplicationsGDSPAUpdate) SetNillableNAUserName(s *string) *ExamApplicationsGDSPAUpdate {
	if s != nil {
		eagu.SetNAUserName(*s)
	}
	return eagu
}

// ClearNAUserName clears the value of the "NA_UserName" field.
func (eagu *ExamApplicationsGDSPAUpdate) ClearNAUserName() *ExamApplicationsGDSPAUpdate {
	eagu.mutation.ClearNAUserName()
	return eagu
}

// SetNAEmployeeID sets the "NA_EmployeeID" field.
func (eagu *ExamApplicationsGDSPAUpdate) SetNAEmployeeID(s string) *ExamApplicationsGDSPAUpdate {
	eagu.mutation.SetNAEmployeeID(s)
	return eagu
}

// SetNillableNAEmployeeID sets the "NA_EmployeeID" field if the given value is not nil.
func (eagu *ExamApplicationsGDSPAUpdate) SetNillableNAEmployeeID(s *string) *ExamApplicationsGDSPAUpdate {
	if s != nil {
		eagu.SetNAEmployeeID(*s)
	}
	return eagu
}

// ClearNAEmployeeID clears the value of the "NA_EmployeeID" field.
func (eagu *ExamApplicationsGDSPAUpdate) ClearNAEmployeeID() *ExamApplicationsGDSPAUpdate {
	eagu.mutation.ClearNAEmployeeID()
	return eagu
}

// SetNAEmployeeDesignation sets the "NA_EmployeeDesignation" field.
func (eagu *ExamApplicationsGDSPAUpdate) SetNAEmployeeDesignation(s string) *ExamApplicationsGDSPAUpdate {
	eagu.mutation.SetNAEmployeeDesignation(s)
	return eagu
}

// SetNillableNAEmployeeDesignation sets the "NA_EmployeeDesignation" field if the given value is not nil.
func (eagu *ExamApplicationsGDSPAUpdate) SetNillableNAEmployeeDesignation(s *string) *ExamApplicationsGDSPAUpdate {
	if s != nil {
		eagu.SetNAEmployeeDesignation(*s)
	}
	return eagu
}

// ClearNAEmployeeDesignation clears the value of the "NA_EmployeeDesignation" field.
func (eagu *ExamApplicationsGDSPAUpdate) ClearNAEmployeeDesignation() *ExamApplicationsGDSPAUpdate {
	eagu.mutation.ClearNAEmployeeDesignation()
	return eagu
}

// SetNARemarks sets the "NA_Remarks" field.
func (eagu *ExamApplicationsGDSPAUpdate) SetNARemarks(s string) *ExamApplicationsGDSPAUpdate {
	eagu.mutation.SetNARemarks(s)
	return eagu
}

// SetNillableNARemarks sets the "NA_Remarks" field if the given value is not nil.
func (eagu *ExamApplicationsGDSPAUpdate) SetNillableNARemarks(s *string) *ExamApplicationsGDSPAUpdate {
	if s != nil {
		eagu.SetNARemarks(*s)
	}
	return eagu
}

// ClearNARemarks clears the value of the "NA_Remarks" field.
func (eagu *ExamApplicationsGDSPAUpdate) ClearNARemarks() *ExamApplicationsGDSPAUpdate {
	eagu.mutation.ClearNARemarks()
	return eagu
}

// SetNADate sets the "NA_Date" field.
func (eagu *ExamApplicationsGDSPAUpdate) SetNADate(t time.Time) *ExamApplicationsGDSPAUpdate {
	eagu.mutation.SetNADate(t)
	return eagu
}

// SetNillableNADate sets the "NA_Date" field if the given value is not nil.
func (eagu *ExamApplicationsGDSPAUpdate) SetNillableNADate(t *time.Time) *ExamApplicationsGDSPAUpdate {
	if t != nil {
		eagu.SetNADate(*t)
	}
	return eagu
}

// ClearNADate clears the value of the "NA_Date" field.
func (eagu *ExamApplicationsGDSPAUpdate) ClearNADate() *ExamApplicationsGDSPAUpdate {
	eagu.mutation.ClearNADate()
	return eagu
}

// SetAppliactionRemarks sets the "AppliactionRemarks" field.
func (eagu *ExamApplicationsGDSPAUpdate) SetAppliactionRemarks(s string) *ExamApplicationsGDSPAUpdate {
	eagu.mutation.SetAppliactionRemarks(s)
	return eagu
}

// SetNillableAppliactionRemarks sets the "AppliactionRemarks" field if the given value is not nil.
func (eagu *ExamApplicationsGDSPAUpdate) SetNillableAppliactionRemarks(s *string) *ExamApplicationsGDSPAUpdate {
	if s != nil {
		eagu.SetAppliactionRemarks(*s)
	}
	return eagu
}

// ClearAppliactionRemarks clears the value of the "AppliactionRemarks" field.
func (eagu *ExamApplicationsGDSPAUpdate) ClearAppliactionRemarks() *ExamApplicationsGDSPAUpdate {
	eagu.mutation.ClearAppliactionRemarks()
	return eagu
}

// SetCadrePreferences sets the "CadrePreferences" field.
func (eagu *ExamApplicationsGDSPAUpdate) SetCadrePreferences(i []interface{}) *ExamApplicationsGDSPAUpdate {
	eagu.mutation.SetCadrePreferences(i)
	return eagu
}

// AppendCadrePreferences appends i to the "CadrePreferences" field.
func (eagu *ExamApplicationsGDSPAUpdate) AppendCadrePreferences(i []interface{}) *ExamApplicationsGDSPAUpdate {
	eagu.mutation.AppendCadrePreferences(i)
	return eagu
}

// ClearCadrePreferences clears the value of the "CadrePreferences" field.
func (eagu *ExamApplicationsGDSPAUpdate) ClearCadrePreferences() *ExamApplicationsGDSPAUpdate {
	eagu.mutation.ClearCadrePreferences()
	return eagu
}

// SetCAPreviousRemarks sets the "CAPreviousRemarks" field.
func (eagu *ExamApplicationsGDSPAUpdate) SetCAPreviousRemarks(s string) *ExamApplicationsGDSPAUpdate {
	eagu.mutation.SetCAPreviousRemarks(s)
	return eagu
}

// SetNillableCAPreviousRemarks sets the "CAPreviousRemarks" field if the given value is not nil.
func (eagu *ExamApplicationsGDSPAUpdate) SetNillableCAPreviousRemarks(s *string) *ExamApplicationsGDSPAUpdate {
	if s != nil {
		eagu.SetCAPreviousRemarks(*s)
	}
	return eagu
}

// ClearCAPreviousRemarks clears the value of the "CAPreviousRemarks" field.
func (eagu *ExamApplicationsGDSPAUpdate) ClearCAPreviousRemarks() *ExamApplicationsGDSPAUpdate {
	eagu.mutation.ClearCAPreviousRemarks()
	return eagu
}

// SetGenerateHallTicketFlag sets the "GenerateHallTicketFlag" field.
func (eagu *ExamApplicationsGDSPAUpdate) SetGenerateHallTicketFlag(b bool) *ExamApplicationsGDSPAUpdate {
	eagu.mutation.SetGenerateHallTicketFlag(b)
	return eagu
}

// SetNillableGenerateHallTicketFlag sets the "GenerateHallTicketFlag" field if the given value is not nil.
func (eagu *ExamApplicationsGDSPAUpdate) SetNillableGenerateHallTicketFlag(b *bool) *ExamApplicationsGDSPAUpdate {
	if b != nil {
		eagu.SetGenerateHallTicketFlag(*b)
	}
	return eagu
}

// ClearGenerateHallTicketFlag clears the value of the "GenerateHallTicketFlag" field.
func (eagu *ExamApplicationsGDSPAUpdate) ClearGenerateHallTicketFlag() *ExamApplicationsGDSPAUpdate {
	eagu.mutation.ClearGenerateHallTicketFlag()
	return eagu
}

// SetPunishmentStatus sets the "PunishmentStatus" field.
func (eagu *ExamApplicationsGDSPAUpdate) SetPunishmentStatus(b bool) *ExamApplicationsGDSPAUpdate {
	eagu.mutation.SetPunishmentStatus(b)
	return eagu
}

// SetNillablePunishmentStatus sets the "PunishmentStatus" field if the given value is not nil.
func (eagu *ExamApplicationsGDSPAUpdate) SetNillablePunishmentStatus(b *bool) *ExamApplicationsGDSPAUpdate {
	if b != nil {
		eagu.SetPunishmentStatus(*b)
	}
	return eagu
}

// ClearPunishmentStatus clears the value of the "PunishmentStatus" field.
func (eagu *ExamApplicationsGDSPAUpdate) ClearPunishmentStatus() *ExamApplicationsGDSPAUpdate {
	eagu.mutation.ClearPunishmentStatus()
	return eagu
}

// SetDisciplinaryCaseStatus sets the "DisciplinaryCaseStatus" field.
func (eagu *ExamApplicationsGDSPAUpdate) SetDisciplinaryCaseStatus(b bool) *ExamApplicationsGDSPAUpdate {
	eagu.mutation.SetDisciplinaryCaseStatus(b)
	return eagu
}

// SetNillableDisciplinaryCaseStatus sets the "DisciplinaryCaseStatus" field if the given value is not nil.
func (eagu *ExamApplicationsGDSPAUpdate) SetNillableDisciplinaryCaseStatus(b *bool) *ExamApplicationsGDSPAUpdate {
	if b != nil {
		eagu.SetDisciplinaryCaseStatus(*b)
	}
	return eagu
}

// ClearDisciplinaryCaseStatus clears the value of the "DisciplinaryCaseStatus" field.
func (eagu *ExamApplicationsGDSPAUpdate) ClearDisciplinaryCaseStatus() *ExamApplicationsGDSPAUpdate {
	eagu.mutation.ClearDisciplinaryCaseStatus()
	return eagu
}

// SetHallTicketNumber sets the "HallTicketNumber" field.
func (eagu *ExamApplicationsGDSPAUpdate) SetHallTicketNumber(s string) *ExamApplicationsGDSPAUpdate {
	eagu.mutation.SetHallTicketNumber(s)
	return eagu
}

// SetNillableHallTicketNumber sets the "HallTicketNumber" field if the given value is not nil.
func (eagu *ExamApplicationsGDSPAUpdate) SetNillableHallTicketNumber(s *string) *ExamApplicationsGDSPAUpdate {
	if s != nil {
		eagu.SetHallTicketNumber(*s)
	}
	return eagu
}

// ClearHallTicketNumber clears the value of the "HallTicketNumber" field.
func (eagu *ExamApplicationsGDSPAUpdate) ClearHallTicketNumber() *ExamApplicationsGDSPAUpdate {
	eagu.mutation.ClearHallTicketNumber()
	return eagu
}

// SetHallTicketGeneratedFlag sets the "HallTicketGeneratedFlag" field.
func (eagu *ExamApplicationsGDSPAUpdate) SetHallTicketGeneratedFlag(b bool) *ExamApplicationsGDSPAUpdate {
	eagu.mutation.SetHallTicketGeneratedFlag(b)
	return eagu
}

// SetNillableHallTicketGeneratedFlag sets the "HallTicketGeneratedFlag" field if the given value is not nil.
func (eagu *ExamApplicationsGDSPAUpdate) SetNillableHallTicketGeneratedFlag(b *bool) *ExamApplicationsGDSPAUpdate {
	if b != nil {
		eagu.SetHallTicketGeneratedFlag(*b)
	}
	return eagu
}

// ClearHallTicketGeneratedFlag clears the value of the "HallTicketGeneratedFlag" field.
func (eagu *ExamApplicationsGDSPAUpdate) ClearHallTicketGeneratedFlag() *ExamApplicationsGDSPAUpdate {
	eagu.mutation.ClearHallTicketGeneratedFlag()
	return eagu
}

// SetGenerateHallTicketFlagByNO sets the "GenerateHallTicketFlagByNO" field.
func (eagu *ExamApplicationsGDSPAUpdate) SetGenerateHallTicketFlagByNO(b bool) *ExamApplicationsGDSPAUpdate {
	eagu.mutation.SetGenerateHallTicketFlagByNO(b)
	return eagu
}

// SetNillableGenerateHallTicketFlagByNO sets the "GenerateHallTicketFlagByNO" field if the given value is not nil.
func (eagu *ExamApplicationsGDSPAUpdate) SetNillableGenerateHallTicketFlagByNO(b *bool) *ExamApplicationsGDSPAUpdate {
	if b != nil {
		eagu.SetGenerateHallTicketFlagByNO(*b)
	}
	return eagu
}

// ClearGenerateHallTicketFlagByNO clears the value of the "GenerateHallTicketFlagByNO" field.
func (eagu *ExamApplicationsGDSPAUpdate) ClearGenerateHallTicketFlagByNO() *ExamApplicationsGDSPAUpdate {
	eagu.mutation.ClearGenerateHallTicketFlagByNO()
	return eagu
}

// SetHallTicketGeneratedDate sets the "HallTicketGeneratedDate" field.
func (eagu *ExamApplicationsGDSPAUpdate) SetHallTicketGeneratedDate(t time.Time) *ExamApplicationsGDSPAUpdate {
	eagu.mutation.SetHallTicketGeneratedDate(t)
	return eagu
}

// SetNillableHallTicketGeneratedDate sets the "HallTicketGeneratedDate" field if the given value is not nil.
func (eagu *ExamApplicationsGDSPAUpdate) SetNillableHallTicketGeneratedDate(t *time.Time) *ExamApplicationsGDSPAUpdate {
	if t != nil {
		eagu.SetHallTicketGeneratedDate(*t)
	}
	return eagu
}

// ClearHallTicketGeneratedDate clears the value of the "HallTicketGeneratedDate" field.
func (eagu *ExamApplicationsGDSPAUpdate) ClearHallTicketGeneratedDate() *ExamApplicationsGDSPAUpdate {
	eagu.mutation.ClearHallTicketGeneratedDate()
	return eagu
}

// SetTemporaryHallTicket sets the "TemporaryHallTicket" field.
func (eagu *ExamApplicationsGDSPAUpdate) SetTemporaryHallTicket(s string) *ExamApplicationsGDSPAUpdate {
	eagu.mutation.SetTemporaryHallTicket(s)
	return eagu
}

// SetNillableTemporaryHallTicket sets the "TemporaryHallTicket" field if the given value is not nil.
func (eagu *ExamApplicationsGDSPAUpdate) SetNillableTemporaryHallTicket(s *string) *ExamApplicationsGDSPAUpdate {
	if s != nil {
		eagu.SetTemporaryHallTicket(*s)
	}
	return eagu
}

// ClearTemporaryHallTicket clears the value of the "TemporaryHallTicket" field.
func (eagu *ExamApplicationsGDSPAUpdate) ClearTemporaryHallTicket() *ExamApplicationsGDSPAUpdate {
	eagu.mutation.ClearTemporaryHallTicket()
	return eagu
}

// SetOptionUsed sets the "OptionUsed" field.
func (eagu *ExamApplicationsGDSPAUpdate) SetOptionUsed(s string) *ExamApplicationsGDSPAUpdate {
	eagu.mutation.SetOptionUsed(s)
	return eagu
}

// SetNillableOptionUsed sets the "OptionUsed" field if the given value is not nil.
func (eagu *ExamApplicationsGDSPAUpdate) SetNillableOptionUsed(s *string) *ExamApplicationsGDSPAUpdate {
	if s != nil {
		eagu.SetOptionUsed(*s)
	}
	return eagu
}

// ClearOptionUsed clears the value of the "OptionUsed" field.
func (eagu *ExamApplicationsGDSPAUpdate) ClearOptionUsed() *ExamApplicationsGDSPAUpdate {
	eagu.mutation.ClearOptionUsed()
	return eagu
}

// SetRemarks sets the "Remarks" field.
func (eagu *ExamApplicationsGDSPAUpdate) SetRemarks(s string) *ExamApplicationsGDSPAUpdate {
	eagu.mutation.SetRemarks(s)
	return eagu
}

// SetNillableRemarks sets the "Remarks" field if the given value is not nil.
func (eagu *ExamApplicationsGDSPAUpdate) SetNillableRemarks(s *string) *ExamApplicationsGDSPAUpdate {
	if s != nil {
		eagu.SetRemarks(*s)
	}
	return eagu
}

// ClearRemarks clears the value of the "Remarks" field.
func (eagu *ExamApplicationsGDSPAUpdate) ClearRemarks() *ExamApplicationsGDSPAUpdate {
	eagu.mutation.ClearRemarks()
	return eagu
}

// SetCadre sets the "Cadre" field.
func (eagu *ExamApplicationsGDSPAUpdate) SetCadre(s string) *ExamApplicationsGDSPAUpdate {
	eagu.mutation.SetCadre(s)
	return eagu
}

// SetNillableCadre sets the "Cadre" field if the given value is not nil.
func (eagu *ExamApplicationsGDSPAUpdate) SetNillableCadre(s *string) *ExamApplicationsGDSPAUpdate {
	if s != nil {
		eagu.SetCadre(*s)
	}
	return eagu
}

// ClearCadre clears the value of the "Cadre" field.
func (eagu *ExamApplicationsGDSPAUpdate) ClearCadre() *ExamApplicationsGDSPAUpdate {
	eagu.mutation.ClearCadre()
	return eagu
}

// SetEmployeePost sets the "EmployeePost" field.
func (eagu *ExamApplicationsGDSPAUpdate) SetEmployeePost(s string) *ExamApplicationsGDSPAUpdate {
	eagu.mutation.SetEmployeePost(s)
	return eagu
}

// SetNillableEmployeePost sets the "EmployeePost" field if the given value is not nil.
func (eagu *ExamApplicationsGDSPAUpdate) SetNillableEmployeePost(s *string) *ExamApplicationsGDSPAUpdate {
	if s != nil {
		eagu.SetEmployeePost(*s)
	}
	return eagu
}

// ClearEmployeePost clears the value of the "EmployeePost" field.
func (eagu *ExamApplicationsGDSPAUpdate) ClearEmployeePost() *ExamApplicationsGDSPAUpdate {
	eagu.mutation.ClearEmployeePost()
	return eagu
}

// SetDOJInEligiblePost sets the "DOJInEligiblePost" field.
func (eagu *ExamApplicationsGDSPAUpdate) SetDOJInEligiblePost(s string) *ExamApplicationsGDSPAUpdate {
	eagu.mutation.SetDOJInEligiblePost(s)
	return eagu
}

// SetNillableDOJInEligiblePost sets the "DOJInEligiblePost" field if the given value is not nil.
func (eagu *ExamApplicationsGDSPAUpdate) SetNillableDOJInEligiblePost(s *string) *ExamApplicationsGDSPAUpdate {
	if s != nil {
		eagu.SetDOJInEligiblePost(*s)
	}
	return eagu
}

// ClearDOJInEligiblePost clears the value of the "DOJInEligiblePost" field.
func (eagu *ExamApplicationsGDSPAUpdate) ClearDOJInEligiblePost() *ExamApplicationsGDSPAUpdate {
	eagu.mutation.ClearDOJInEligiblePost()
	return eagu
}

// SetDivisionPreferences sets the "DivisionPreferences" field.
func (eagu *ExamApplicationsGDSPAUpdate) SetDivisionPreferences(i []interface{}) *ExamApplicationsGDSPAUpdate {
	eagu.mutation.SetDivisionPreferences(i)
	return eagu
}

// AppendDivisionPreferences appends i to the "DivisionPreferences" field.
func (eagu *ExamApplicationsGDSPAUpdate) AppendDivisionPreferences(i []interface{}) *ExamApplicationsGDSPAUpdate {
	eagu.mutation.AppendDivisionPreferences(i)
	return eagu
}

// ClearDivisionPreferences clears the value of the "DivisionPreferences" field.
func (eagu *ExamApplicationsGDSPAUpdate) ClearDivisionPreferences() *ExamApplicationsGDSPAUpdate {
	eagu.mutation.ClearDivisionPreferences()
	return eagu
}

// SetRoleUserCode sets the "RoleUserCode" field.
func (eagu *ExamApplicationsGDSPAUpdate) SetRoleUserCode(i int32) *ExamApplicationsGDSPAUpdate {
	eagu.mutation.SetRoleUserCode(i)
	return eagu
}

// SetNillableRoleUserCode sets the "RoleUserCode" field if the given value is not nil.
func (eagu *ExamApplicationsGDSPAUpdate) SetNillableRoleUserCode(i *int32) *ExamApplicationsGDSPAUpdate {
	if i != nil {
		eagu.SetRoleUserCode(*i)
	}
	return eagu
}

// ClearRoleUserCode clears the value of the "RoleUserCode" field.
func (eagu *ExamApplicationsGDSPAUpdate) ClearRoleUserCode() *ExamApplicationsGDSPAUpdate {
	eagu.mutation.ClearRoleUserCode()
	return eagu
}

// SetCircleSID sets the "CircleSID" field.
func (eagu *ExamApplicationsGDSPAUpdate) SetCircleSID(i int32) *ExamApplicationsGDSPAUpdate {
	eagu.mutation.SetCircleSID(i)
	return eagu
}

// SetNillableCircleSID sets the "CircleSID" field if the given value is not nil.
func (eagu *ExamApplicationsGDSPAUpdate) SetNillableCircleSID(i *int32) *ExamApplicationsGDSPAUpdate {
	if i != nil {
		eagu.SetCircleSID(*i)
	}
	return eagu
}

// ClearCircleSID clears the value of the "CircleSID" field.
func (eagu *ExamApplicationsGDSPAUpdate) ClearCircleSID() *ExamApplicationsGDSPAUpdate {
	eagu.mutation.ClearCircleSID()
	return eagu
}

// SetServiceLength sets the "ServiceLength" field.
func (eagu *ExamApplicationsGDSPAUpdate) SetServiceLength(i []interface{}) *ExamApplicationsGDSPAUpdate {
	eagu.mutation.SetServiceLength(i)
	return eagu
}

// AppendServiceLength appends i to the "ServiceLength" field.
func (eagu *ExamApplicationsGDSPAUpdate) AppendServiceLength(i []interface{}) *ExamApplicationsGDSPAUpdate {
	eagu.mutation.AppendServiceLength(i)
	return eagu
}

// ClearServiceLength clears the value of the "ServiceLength" field.
func (eagu *ExamApplicationsGDSPAUpdate) ClearServiceLength() *ExamApplicationsGDSPAUpdate {
	eagu.mutation.ClearServiceLength()
	return eagu
}

// SetNonQualifyingService sets the "NonQualifyingService" field.
func (eagu *ExamApplicationsGDSPAUpdate) SetNonQualifyingService(i []interface{}) *ExamApplicationsGDSPAUpdate {
	eagu.mutation.SetNonQualifyingService(i)
	return eagu
}

// AppendNonQualifyingService appends i to the "NonQualifyingService" field.
func (eagu *ExamApplicationsGDSPAUpdate) AppendNonQualifyingService(i []interface{}) *ExamApplicationsGDSPAUpdate {
	eagu.mutation.AppendNonQualifyingService(i)
	return eagu
}

// ClearNonQualifyingService clears the value of the "NonQualifyingService" field.
func (eagu *ExamApplicationsGDSPAUpdate) ClearNonQualifyingService() *ExamApplicationsGDSPAUpdate {
	eagu.mutation.ClearNonQualifyingService()
	return eagu
}

// SetDCInPresentCadre sets the "DCInPresentCadre" field.
func (eagu *ExamApplicationsGDSPAUpdate) SetDCInPresentCadre(s string) *ExamApplicationsGDSPAUpdate {
	eagu.mutation.SetDCInPresentCadre(s)
	return eagu
}

// SetNillableDCInPresentCadre sets the "DCInPresentCadre" field if the given value is not nil.
func (eagu *ExamApplicationsGDSPAUpdate) SetNillableDCInPresentCadre(s *string) *ExamApplicationsGDSPAUpdate {
	if s != nil {
		eagu.SetDCInPresentCadre(*s)
	}
	return eagu
}

// ClearDCInPresentCadre clears the value of the "DCInPresentCadre" field.
func (eagu *ExamApplicationsGDSPAUpdate) ClearDCInPresentCadre() *ExamApplicationsGDSPAUpdate {
	eagu.mutation.ClearDCInPresentCadre()
	return eagu
}

// SetReportingOfficeID sets the "ReportingOfficeID" field.
func (eagu *ExamApplicationsGDSPAUpdate) SetReportingOfficeID(s string) *ExamApplicationsGDSPAUpdate {
	eagu.mutation.SetReportingOfficeID(s)
	return eagu
}

// SetNillableReportingOfficeID sets the "ReportingOfficeID" field if the given value is not nil.
func (eagu *ExamApplicationsGDSPAUpdate) SetNillableReportingOfficeID(s *string) *ExamApplicationsGDSPAUpdate {
	if s != nil {
		eagu.SetReportingOfficeID(*s)
	}
	return eagu
}

// ClearReportingOfficeID clears the value of the "ReportingOfficeID" field.
func (eagu *ExamApplicationsGDSPAUpdate) ClearReportingOfficeID() *ExamApplicationsGDSPAUpdate {
	eagu.mutation.ClearReportingOfficeID()
	return eagu
}

// SetPostPreferences sets the "PostPreferences" field.
func (eagu *ExamApplicationsGDSPAUpdate) SetPostPreferences(i []interface{}) *ExamApplicationsGDSPAUpdate {
	eagu.mutation.SetPostPreferences(i)
	return eagu
}

// AppendPostPreferences appends i to the "PostPreferences" field.
func (eagu *ExamApplicationsGDSPAUpdate) AppendPostPreferences(i []interface{}) *ExamApplicationsGDSPAUpdate {
	eagu.mutation.AppendPostPreferences(i)
	return eagu
}

// ClearPostPreferences clears the value of the "PostPreferences" field.
func (eagu *ExamApplicationsGDSPAUpdate) ClearPostPreferences() *ExamApplicationsGDSPAUpdate {
	eagu.mutation.ClearPostPreferences()
	return eagu
}

// SetUnitPreferences sets the "UnitPreferences" field.
func (eagu *ExamApplicationsGDSPAUpdate) SetUnitPreferences(i []interface{}) *ExamApplicationsGDSPAUpdate {
	eagu.mutation.SetUnitPreferences(i)
	return eagu
}

// AppendUnitPreferences appends i to the "UnitPreferences" field.
func (eagu *ExamApplicationsGDSPAUpdate) AppendUnitPreferences(i []interface{}) *ExamApplicationsGDSPAUpdate {
	eagu.mutation.AppendUnitPreferences(i)
	return eagu
}

// ClearUnitPreferences clears the value of the "UnitPreferences" field.
func (eagu *ExamApplicationsGDSPAUpdate) ClearUnitPreferences() *ExamApplicationsGDSPAUpdate {
	eagu.mutation.ClearUnitPreferences()
	return eagu
}

// SetCenterId sets the "CenterId" field.
func (eagu *ExamApplicationsGDSPAUpdate) SetCenterId(i int32) *ExamApplicationsGDSPAUpdate {
	eagu.mutation.ResetCenterId()
	eagu.mutation.SetCenterId(i)
	return eagu
}

// SetNillableCenterId sets the "CenterId" field if the given value is not nil.
func (eagu *ExamApplicationsGDSPAUpdate) SetNillableCenterId(i *int32) *ExamApplicationsGDSPAUpdate {
	if i != nil {
		eagu.SetCenterId(*i)
	}
	return eagu
}

// AddCenterId adds i to the "CenterId" field.
func (eagu *ExamApplicationsGDSPAUpdate) AddCenterId(i int32) *ExamApplicationsGDSPAUpdate {
	eagu.mutation.AddCenterId(i)
	return eagu
}

// ClearCenterId clears the value of the "CenterId" field.
func (eagu *ExamApplicationsGDSPAUpdate) ClearCenterId() *ExamApplicationsGDSPAUpdate {
	eagu.mutation.ClearCenterId()
	return eagu
}

// SetCenterCode sets the "CenterCode" field.
func (eagu *ExamApplicationsGDSPAUpdate) SetCenterCode(i int32) *ExamApplicationsGDSPAUpdate {
	eagu.mutation.SetCenterCode(i)
	return eagu
}

// SetNillableCenterCode sets the "CenterCode" field if the given value is not nil.
func (eagu *ExamApplicationsGDSPAUpdate) SetNillableCenterCode(i *int32) *ExamApplicationsGDSPAUpdate {
	if i != nil {
		eagu.SetCenterCode(*i)
	}
	return eagu
}

// ClearCenterCode clears the value of the "CenterCode" field.
func (eagu *ExamApplicationsGDSPAUpdate) ClearCenterCode() *ExamApplicationsGDSPAUpdate {
	eagu.mutation.ClearCenterCode()
	return eagu
}

// SetClaimingQualifyingService sets the "ClaimingQualifyingService" field.
func (eagu *ExamApplicationsGDSPAUpdate) SetClaimingQualifyingService(s string) *ExamApplicationsGDSPAUpdate {
	eagu.mutation.SetClaimingQualifyingService(s)
	return eagu
}

// SetNillableClaimingQualifyingService sets the "ClaimingQualifyingService" field if the given value is not nil.
func (eagu *ExamApplicationsGDSPAUpdate) SetNillableClaimingQualifyingService(s *string) *ExamApplicationsGDSPAUpdate {
	if s != nil {
		eagu.SetClaimingQualifyingService(*s)
	}
	return eagu
}

// ClearClaimingQualifyingService clears the value of the "ClaimingQualifyingService" field.
func (eagu *ExamApplicationsGDSPAUpdate) ClearClaimingQualifyingService() *ExamApplicationsGDSPAUpdate {
	eagu.mutation.ClearClaimingQualifyingService()
	return eagu
}

// SetDeputationOfficePincode sets the "DeputationOfficePincode" field.
func (eagu *ExamApplicationsGDSPAUpdate) SetDeputationOfficePincode(s string) *ExamApplicationsGDSPAUpdate {
	eagu.mutation.SetDeputationOfficePincode(s)
	return eagu
}

// SetNillableDeputationOfficePincode sets the "DeputationOfficePincode" field if the given value is not nil.
func (eagu *ExamApplicationsGDSPAUpdate) SetNillableDeputationOfficePincode(s *string) *ExamApplicationsGDSPAUpdate {
	if s != nil {
		eagu.SetDeputationOfficePincode(*s)
	}
	return eagu
}

// ClearDeputationOfficePincode clears the value of the "DeputationOfficePincode" field.
func (eagu *ExamApplicationsGDSPAUpdate) ClearDeputationOfficePincode() *ExamApplicationsGDSPAUpdate {
	eagu.mutation.ClearDeputationOfficePincode()
	return eagu
}

// SetUpdatedAt sets the "UpdatedAt" field.
func (eagu *ExamApplicationsGDSPAUpdate) SetUpdatedAt(t time.Time) *ExamApplicationsGDSPAUpdate {
	eagu.mutation.SetUpdatedAt(t)
	return eagu
}

// SetNillableUpdatedAt sets the "UpdatedAt" field if the given value is not nil.
func (eagu *ExamApplicationsGDSPAUpdate) SetNillableUpdatedAt(t *time.Time) *ExamApplicationsGDSPAUpdate {
	if t != nil {
		eagu.SetUpdatedAt(*t)
	}
	return eagu
}

// ClearUpdatedAt clears the value of the "UpdatedAt" field.
func (eagu *ExamApplicationsGDSPAUpdate) ClearUpdatedAt() *ExamApplicationsGDSPAUpdate {
	eagu.mutation.ClearUpdatedAt()
	return eagu
}

// SetUpdatedBy sets the "UpdatedBy" field.
func (eagu *ExamApplicationsGDSPAUpdate) SetUpdatedBy(s string) *ExamApplicationsGDSPAUpdate {
	eagu.mutation.SetUpdatedBy(s)
	return eagu
}

// SetNillableUpdatedBy sets the "UpdatedBy" field if the given value is not nil.
func (eagu *ExamApplicationsGDSPAUpdate) SetNillableUpdatedBy(s *string) *ExamApplicationsGDSPAUpdate {
	if s != nil {
		eagu.SetUpdatedBy(*s)
	}
	return eagu
}

// ClearUpdatedBy clears the value of the "UpdatedBy" field.
func (eagu *ExamApplicationsGDSPAUpdate) ClearUpdatedBy() *ExamApplicationsGDSPAUpdate {
	eagu.mutation.ClearUpdatedBy()
	return eagu
}

// SetApplicationWdlDate sets the "ApplicationWdlDate" field.
func (eagu *ExamApplicationsGDSPAUpdate) SetApplicationWdlDate(t time.Time) *ExamApplicationsGDSPAUpdate {
	eagu.mutation.SetApplicationWdlDate(t)
	return eagu
}

// SetNillableApplicationWdlDate sets the "ApplicationWdlDate" field if the given value is not nil.
func (eagu *ExamApplicationsGDSPAUpdate) SetNillableApplicationWdlDate(t *time.Time) *ExamApplicationsGDSPAUpdate {
	if t != nil {
		eagu.SetApplicationWdlDate(*t)
	}
	return eagu
}

// ClearApplicationWdlDate clears the value of the "ApplicationWdlDate" field.
func (eagu *ExamApplicationsGDSPAUpdate) ClearApplicationWdlDate() *ExamApplicationsGDSPAUpdate {
	eagu.mutation.ClearApplicationWdlDate()
	return eagu
}

// SetExamCenterHall sets the "ExamCenterHall" field.
func (eagu *ExamApplicationsGDSPAUpdate) SetExamCenterHall(i int32) *ExamApplicationsGDSPAUpdate {
	eagu.mutation.ResetExamCenterHall()
	eagu.mutation.SetExamCenterHall(i)
	return eagu
}

// SetNillableExamCenterHall sets the "ExamCenterHall" field if the given value is not nil.
func (eagu *ExamApplicationsGDSPAUpdate) SetNillableExamCenterHall(i *int32) *ExamApplicationsGDSPAUpdate {
	if i != nil {
		eagu.SetExamCenterHall(*i)
	}
	return eagu
}

// AddExamCenterHall adds i to the "ExamCenterHall" field.
func (eagu *ExamApplicationsGDSPAUpdate) AddExamCenterHall(i int32) *ExamApplicationsGDSPAUpdate {
	eagu.mutation.AddExamCenterHall(i)
	return eagu
}

// ClearExamCenterHall clears the value of the "ExamCenterHall" field.
func (eagu *ExamApplicationsGDSPAUpdate) ClearExamCenterHall() *ExamApplicationsGDSPAUpdate {
	eagu.mutation.ClearExamCenterHall()
	return eagu
}

// SetHallName sets the "HallName" field.
func (eagu *ExamApplicationsGDSPAUpdate) SetHallName(s string) *ExamApplicationsGDSPAUpdate {
	eagu.mutation.SetHallName(s)
	return eagu
}

// SetNillableHallName sets the "HallName" field if the given value is not nil.
func (eagu *ExamApplicationsGDSPAUpdate) SetNillableHallName(s *string) *ExamApplicationsGDSPAUpdate {
	if s != nil {
		eagu.SetHallName(*s)
	}
	return eagu
}

// ClearHallName clears the value of the "HallName" field.
func (eagu *ExamApplicationsGDSPAUpdate) ClearHallName() *ExamApplicationsGDSPAUpdate {
	eagu.mutation.ClearHallName()
	return eagu
}

// SetFacilityName sets the "FacilityName" field.
func (eagu *ExamApplicationsGDSPAUpdate) SetFacilityName(s string) *ExamApplicationsGDSPAUpdate {
	eagu.mutation.SetFacilityName(s)
	return eagu
}

// SetNillableFacilityName sets the "FacilityName" field if the given value is not nil.
func (eagu *ExamApplicationsGDSPAUpdate) SetNillableFacilityName(s *string) *ExamApplicationsGDSPAUpdate {
	if s != nil {
		eagu.SetFacilityName(*s)
	}
	return eagu
}

// ClearFacilityName clears the value of the "FacilityName" field.
func (eagu *ExamApplicationsGDSPAUpdate) ClearFacilityName() *ExamApplicationsGDSPAUpdate {
	eagu.mutation.ClearFacilityName()
	return eagu
}

// AddUsersGDSPARefIDs adds the "UsersGDSPARef" edge to the UserMaster entity by IDs.
func (eagu *ExamApplicationsGDSPAUpdate) AddUsersGDSPARefIDs(ids ...int64) *ExamApplicationsGDSPAUpdate {
	eagu.mutation.AddUsersGDSPARefIDs(ids...)
	return eagu
}

// AddUsersGDSPARef adds the "UsersGDSPARef" edges to the UserMaster entity.
func (eagu *ExamApplicationsGDSPAUpdate) AddUsersGDSPARef(u ...*UserMaster) *ExamApplicationsGDSPAUpdate {
	ids := make([]int64, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return eagu.AddUsersGDSPARefIDs(ids...)
}

// SetExamcitycenterID sets the "examcitycenter" edge to the ExamCityCenter entity by ID.
func (eagu *ExamApplicationsGDSPAUpdate) SetExamcitycenterID(id int32) *ExamApplicationsGDSPAUpdate {
	eagu.mutation.SetExamcitycenterID(id)
	return eagu
}

// SetNillableExamcitycenterID sets the "examcitycenter" edge to the ExamCityCenter entity by ID if the given value is not nil.
func (eagu *ExamApplicationsGDSPAUpdate) SetNillableExamcitycenterID(id *int32) *ExamApplicationsGDSPAUpdate {
	if id != nil {
		eagu = eagu.SetExamcitycenterID(*id)
	}
	return eagu
}

// SetExamcitycenter sets the "examcitycenter" edge to the ExamCityCenter entity.
func (eagu *ExamApplicationsGDSPAUpdate) SetExamcitycenter(e *ExamCityCenter) *ExamApplicationsGDSPAUpdate {
	return eagu.SetExamcitycenterID(e.ID)
}

// SetGDSPAExamCentresID sets the "GDSPAExamCentres" edge to the Center entity by ID.
func (eagu *ExamApplicationsGDSPAUpdate) SetGDSPAExamCentresID(id int32) *ExamApplicationsGDSPAUpdate {
	eagu.mutation.SetGDSPAExamCentresID(id)
	return eagu
}

// SetNillableGDSPAExamCentresID sets the "GDSPAExamCentres" edge to the Center entity by ID if the given value is not nil.
func (eagu *ExamApplicationsGDSPAUpdate) SetNillableGDSPAExamCentresID(id *int32) *ExamApplicationsGDSPAUpdate {
	if id != nil {
		eagu = eagu.SetGDSPAExamCentresID(*id)
	}
	return eagu
}

// SetGDSPAExamCentres sets the "GDSPAExamCentres" edge to the Center entity.
func (eagu *ExamApplicationsGDSPAUpdate) SetGDSPAExamCentres(c *Center) *ExamApplicationsGDSPAUpdate {
	return eagu.SetGDSPAExamCentresID(c.ID)
}

// SetRoleusersID sets the "roleusers" edge to the RoleMaster entity by ID.
func (eagu *ExamApplicationsGDSPAUpdate) SetRoleusersID(id int32) *ExamApplicationsGDSPAUpdate {
	eagu.mutation.SetRoleusersID(id)
	return eagu
}

// SetNillableRoleusersID sets the "roleusers" edge to the RoleMaster entity by ID if the given value is not nil.
func (eagu *ExamApplicationsGDSPAUpdate) SetNillableRoleusersID(id *int32) *ExamApplicationsGDSPAUpdate {
	if id != nil {
		eagu = eagu.SetRoleusersID(*id)
	}
	return eagu
}

// SetRoleusers sets the "roleusers" edge to the RoleMaster entity.
func (eagu *ExamApplicationsGDSPAUpdate) SetRoleusers(r *RoleMaster) *ExamApplicationsGDSPAUpdate {
	return eagu.SetRoleusersID(r.ID)
}

// AddCadrePrefRefIDs adds the "CadrePref_Ref" edge to the Cadre_Choice_PA entity by IDs.
func (eagu *ExamApplicationsGDSPAUpdate) AddCadrePrefRefIDs(ids ...int32) *ExamApplicationsGDSPAUpdate {
	eagu.mutation.AddCadrePrefRefIDs(ids...)
	return eagu
}

// AddCadrePrefRef adds the "CadrePref_Ref" edges to the Cadre_Choice_PA entity.
func (eagu *ExamApplicationsGDSPAUpdate) AddCadrePrefRef(c ...*Cadre_Choice_PA) *ExamApplicationsGDSPAUpdate {
	ids := make([]int32, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return eagu.AddCadrePrefRefIDs(ids...)
}

// AddCirclePrefRefGDSPAIDs adds the "CirclePrefRefGDSPA" edge to the Division_Choice_PA entity by IDs.
func (eagu *ExamApplicationsGDSPAUpdate) AddCirclePrefRefGDSPAIDs(ids ...int32) *ExamApplicationsGDSPAUpdate {
	eagu.mutation.AddCirclePrefRefGDSPAIDs(ids...)
	return eagu
}

// AddCirclePrefRefGDSPA adds the "CirclePrefRefGDSPA" edges to the Division_Choice_PA entity.
func (eagu *ExamApplicationsGDSPAUpdate) AddCirclePrefRefGDSPA(d ...*Division_Choice_PA) *ExamApplicationsGDSPAUpdate {
	ids := make([]int32, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return eagu.AddCirclePrefRefGDSPAIDs(ids...)
}

// AddGDSPAApplicationsRefIDs adds the "GDSPAApplicationsRef" edge to the RecommendationsGDSPAApplications entity by IDs.
func (eagu *ExamApplicationsGDSPAUpdate) AddGDSPAApplicationsRefIDs(ids ...int64) *ExamApplicationsGDSPAUpdate {
	eagu.mutation.AddGDSPAApplicationsRefIDs(ids...)
	return eagu
}

// AddGDSPAApplicationsRef adds the "GDSPAApplicationsRef" edges to the RecommendationsGDSPAApplications entity.
func (eagu *ExamApplicationsGDSPAUpdate) AddGDSPAApplicationsRef(r ...*RecommendationsGDSPAApplications) *ExamApplicationsGDSPAUpdate {
	ids := make([]int64, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return eagu.AddGDSPAApplicationsRefIDs(ids...)
}

// SetExamsID sets the "Exams" edge to the Exam entity by ID.
func (eagu *ExamApplicationsGDSPAUpdate) SetExamsID(id int32) *ExamApplicationsGDSPAUpdate {
	eagu.mutation.SetExamsID(id)
	return eagu
}

// SetNillableExamsID sets the "Exams" edge to the Exam entity by ID if the given value is not nil.
func (eagu *ExamApplicationsGDSPAUpdate) SetNillableExamsID(id *int32) *ExamApplicationsGDSPAUpdate {
	if id != nil {
		eagu = eagu.SetExamsID(*id)
	}
	return eagu
}

// SetExams sets the "Exams" edge to the Exam entity.
func (eagu *ExamApplicationsGDSPAUpdate) SetExams(e *Exam) *ExamApplicationsGDSPAUpdate {
	return eagu.SetExamsID(e.ID)
}

// SetCircleRefsGDSPAID sets the "CircleRefsGDSPA" edge to the CircleSummaryForNO entity by ID.
func (eagu *ExamApplicationsGDSPAUpdate) SetCircleRefsGDSPAID(id int32) *ExamApplicationsGDSPAUpdate {
	eagu.mutation.SetCircleRefsGDSPAID(id)
	return eagu
}

// SetNillableCircleRefsGDSPAID sets the "CircleRefsGDSPA" edge to the CircleSummaryForNO entity by ID if the given value is not nil.
func (eagu *ExamApplicationsGDSPAUpdate) SetNillableCircleRefsGDSPAID(id *int32) *ExamApplicationsGDSPAUpdate {
	if id != nil {
		eagu = eagu.SetCircleRefsGDSPAID(*id)
	}
	return eagu
}

// SetCircleRefsGDSPA sets the "CircleRefsGDSPA" edge to the CircleSummaryForNO entity.
func (eagu *ExamApplicationsGDSPAUpdate) SetCircleRefsGDSPA(c *CircleSummaryForNO) *ExamApplicationsGDSPAUpdate {
	return eagu.SetCircleRefsGDSPAID(c.ID)
}

// AddLogDatumIDs adds the "LogData" edge to the Logs entity by IDs.
func (eagu *ExamApplicationsGDSPAUpdate) AddLogDatumIDs(ids ...int64) *ExamApplicationsGDSPAUpdate {
	eagu.mutation.AddLogDatumIDs(ids...)
	return eagu
}

// AddLogData adds the "LogData" edges to the Logs entity.
func (eagu *ExamApplicationsGDSPAUpdate) AddLogData(l ...*Logs) *ExamApplicationsGDSPAUpdate {
	ids := make([]int64, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return eagu.AddLogDatumIDs(ids...)
}

// Mutation returns the ExamApplicationsGDSPAMutation object of the builder.
func (eagu *ExamApplicationsGDSPAUpdate) Mutation() *ExamApplicationsGDSPAMutation {
	return eagu.mutation
}

// ClearUsersGDSPARef clears all "UsersGDSPARef" edges to the UserMaster entity.
func (eagu *ExamApplicationsGDSPAUpdate) ClearUsersGDSPARef() *ExamApplicationsGDSPAUpdate {
	eagu.mutation.ClearUsersGDSPARef()
	return eagu
}

// RemoveUsersGDSPARefIDs removes the "UsersGDSPARef" edge to UserMaster entities by IDs.
func (eagu *ExamApplicationsGDSPAUpdate) RemoveUsersGDSPARefIDs(ids ...int64) *ExamApplicationsGDSPAUpdate {
	eagu.mutation.RemoveUsersGDSPARefIDs(ids...)
	return eagu
}

// RemoveUsersGDSPARef removes "UsersGDSPARef" edges to UserMaster entities.
func (eagu *ExamApplicationsGDSPAUpdate) RemoveUsersGDSPARef(u ...*UserMaster) *ExamApplicationsGDSPAUpdate {
	ids := make([]int64, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return eagu.RemoveUsersGDSPARefIDs(ids...)
}

// ClearExamcitycenter clears the "examcitycenter" edge to the ExamCityCenter entity.
func (eagu *ExamApplicationsGDSPAUpdate) ClearExamcitycenter() *ExamApplicationsGDSPAUpdate {
	eagu.mutation.ClearExamcitycenter()
	return eagu
}

// ClearGDSPAExamCentres clears the "GDSPAExamCentres" edge to the Center entity.
func (eagu *ExamApplicationsGDSPAUpdate) ClearGDSPAExamCentres() *ExamApplicationsGDSPAUpdate {
	eagu.mutation.ClearGDSPAExamCentres()
	return eagu
}

// ClearRoleusers clears the "roleusers" edge to the RoleMaster entity.
func (eagu *ExamApplicationsGDSPAUpdate) ClearRoleusers() *ExamApplicationsGDSPAUpdate {
	eagu.mutation.ClearRoleusers()
	return eagu
}

// ClearCadrePrefRef clears all "CadrePref_Ref" edges to the Cadre_Choice_PA entity.
func (eagu *ExamApplicationsGDSPAUpdate) ClearCadrePrefRef() *ExamApplicationsGDSPAUpdate {
	eagu.mutation.ClearCadrePrefRef()
	return eagu
}

// RemoveCadrePrefRefIDs removes the "CadrePref_Ref" edge to Cadre_Choice_PA entities by IDs.
func (eagu *ExamApplicationsGDSPAUpdate) RemoveCadrePrefRefIDs(ids ...int32) *ExamApplicationsGDSPAUpdate {
	eagu.mutation.RemoveCadrePrefRefIDs(ids...)
	return eagu
}

// RemoveCadrePrefRef removes "CadrePref_Ref" edges to Cadre_Choice_PA entities.
func (eagu *ExamApplicationsGDSPAUpdate) RemoveCadrePrefRef(c ...*Cadre_Choice_PA) *ExamApplicationsGDSPAUpdate {
	ids := make([]int32, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return eagu.RemoveCadrePrefRefIDs(ids...)
}

// ClearCirclePrefRefGDSPA clears all "CirclePrefRefGDSPA" edges to the Division_Choice_PA entity.
func (eagu *ExamApplicationsGDSPAUpdate) ClearCirclePrefRefGDSPA() *ExamApplicationsGDSPAUpdate {
	eagu.mutation.ClearCirclePrefRefGDSPA()
	return eagu
}

// RemoveCirclePrefRefGDSPAIDs removes the "CirclePrefRefGDSPA" edge to Division_Choice_PA entities by IDs.
func (eagu *ExamApplicationsGDSPAUpdate) RemoveCirclePrefRefGDSPAIDs(ids ...int32) *ExamApplicationsGDSPAUpdate {
	eagu.mutation.RemoveCirclePrefRefGDSPAIDs(ids...)
	return eagu
}

// RemoveCirclePrefRefGDSPA removes "CirclePrefRefGDSPA" edges to Division_Choice_PA entities.
func (eagu *ExamApplicationsGDSPAUpdate) RemoveCirclePrefRefGDSPA(d ...*Division_Choice_PA) *ExamApplicationsGDSPAUpdate {
	ids := make([]int32, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return eagu.RemoveCirclePrefRefGDSPAIDs(ids...)
}

// ClearGDSPAApplicationsRef clears all "GDSPAApplicationsRef" edges to the RecommendationsGDSPAApplications entity.
func (eagu *ExamApplicationsGDSPAUpdate) ClearGDSPAApplicationsRef() *ExamApplicationsGDSPAUpdate {
	eagu.mutation.ClearGDSPAApplicationsRef()
	return eagu
}

// RemoveGDSPAApplicationsRefIDs removes the "GDSPAApplicationsRef" edge to RecommendationsGDSPAApplications entities by IDs.
func (eagu *ExamApplicationsGDSPAUpdate) RemoveGDSPAApplicationsRefIDs(ids ...int64) *ExamApplicationsGDSPAUpdate {
	eagu.mutation.RemoveGDSPAApplicationsRefIDs(ids...)
	return eagu
}

// RemoveGDSPAApplicationsRef removes "GDSPAApplicationsRef" edges to RecommendationsGDSPAApplications entities.
func (eagu *ExamApplicationsGDSPAUpdate) RemoveGDSPAApplicationsRef(r ...*RecommendationsGDSPAApplications) *ExamApplicationsGDSPAUpdate {
	ids := make([]int64, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return eagu.RemoveGDSPAApplicationsRefIDs(ids...)
}

// ClearExams clears the "Exams" edge to the Exam entity.
func (eagu *ExamApplicationsGDSPAUpdate) ClearExams() *ExamApplicationsGDSPAUpdate {
	eagu.mutation.ClearExams()
	return eagu
}

// ClearCircleRefsGDSPA clears the "CircleRefsGDSPA" edge to the CircleSummaryForNO entity.
func (eagu *ExamApplicationsGDSPAUpdate) ClearCircleRefsGDSPA() *ExamApplicationsGDSPAUpdate {
	eagu.mutation.ClearCircleRefsGDSPA()
	return eagu
}

// ClearLogData clears all "LogData" edges to the Logs entity.
func (eagu *ExamApplicationsGDSPAUpdate) ClearLogData() *ExamApplicationsGDSPAUpdate {
	eagu.mutation.ClearLogData()
	return eagu
}

// RemoveLogDatumIDs removes the "LogData" edge to Logs entities by IDs.
func (eagu *ExamApplicationsGDSPAUpdate) RemoveLogDatumIDs(ids ...int64) *ExamApplicationsGDSPAUpdate {
	eagu.mutation.RemoveLogDatumIDs(ids...)
	return eagu
}

// RemoveLogData removes "LogData" edges to Logs entities.
func (eagu *ExamApplicationsGDSPAUpdate) RemoveLogData(l ...*Logs) *ExamApplicationsGDSPAUpdate {
	ids := make([]int64, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return eagu.RemoveLogDatumIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (eagu *ExamApplicationsGDSPAUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, eagu.sqlSave, eagu.mutation, eagu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (eagu *ExamApplicationsGDSPAUpdate) SaveX(ctx context.Context) int {
	affected, err := eagu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (eagu *ExamApplicationsGDSPAUpdate) Exec(ctx context.Context) error {
	_, err := eagu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eagu *ExamApplicationsGDSPAUpdate) ExecX(ctx context.Context) {
	if err := eagu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (eagu *ExamApplicationsGDSPAUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(exam_applications_gdspa.Table, exam_applications_gdspa.Columns, sqlgraph.NewFieldSpec(exam_applications_gdspa.FieldID, field.TypeInt64))
	if ps := eagu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eagu.mutation.ApplicationNumber(); ok {
		_spec.SetField(exam_applications_gdspa.FieldApplicationNumber, field.TypeString, value)
	}
	if eagu.mutation.ApplicationNumberCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldApplicationNumber, field.TypeString)
	}
	if value, ok := eagu.mutation.ApplnSubmittedDate(); ok {
		_spec.SetField(exam_applications_gdspa.FieldApplnSubmittedDate, field.TypeTime, value)
	}
	if eagu.mutation.ApplnSubmittedDateCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldApplnSubmittedDate, field.TypeTime)
	}
	if value, ok := eagu.mutation.ExamShortName(); ok {
		_spec.SetField(exam_applications_gdspa.FieldExamShortName, field.TypeString, value)
	}
	if eagu.mutation.ExamShortNameCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldExamShortName, field.TypeString)
	}
	if value, ok := eagu.mutation.ExamName(); ok {
		_spec.SetField(exam_applications_gdspa.FieldExamName, field.TypeString, value)
	}
	if eagu.mutation.ExamNameCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldExamName, field.TypeString)
	}
	if value, ok := eagu.mutation.SmsExamShortName(); ok {
		_spec.SetField(exam_applications_gdspa.FieldSmsExamShortName, field.TypeString, value)
	}
	if eagu.mutation.SmsExamShortNameCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldSmsExamShortName, field.TypeString)
	}
	if value, ok := eagu.mutation.ExamYear(); ok {
		_spec.SetField(exam_applications_gdspa.FieldExamYear, field.TypeString, value)
	}
	if eagu.mutation.ExamYearCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldExamYear, field.TypeString)
	}
	if value, ok := eagu.mutation.UserID(); ok {
		_spec.SetField(exam_applications_gdspa.FieldUserID, field.TypeInt32, value)
	}
	if value, ok := eagu.mutation.AddedUserID(); ok {
		_spec.AddField(exam_applications_gdspa.FieldUserID, field.TypeInt32, value)
	}
	if eagu.mutation.UserIDCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldUserID, field.TypeInt32)
	}
	if value, ok := eagu.mutation.EmployeeID(); ok {
		_spec.SetField(exam_applications_gdspa.FieldEmployeeID, field.TypeInt64, value)
	}
	if value, ok := eagu.mutation.AddedEmployeeID(); ok {
		_spec.AddField(exam_applications_gdspa.FieldEmployeeID, field.TypeInt64, value)
	}
	if eagu.mutation.EmployeeIDCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldEmployeeID, field.TypeInt64)
	}
	if value, ok := eagu.mutation.EmployeeName(); ok {
		_spec.SetField(exam_applications_gdspa.FieldEmployeeName, field.TypeString, value)
	}
	if eagu.mutation.EmployeeNameCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldEmployeeName, field.TypeString)
	}
	if value, ok := eagu.mutation.DOB(); ok {
		_spec.SetField(exam_applications_gdspa.FieldDOB, field.TypeString, value)
	}
	if eagu.mutation.DOBCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldDOB, field.TypeString)
	}
	if value, ok := eagu.mutation.Gender(); ok {
		_spec.SetField(exam_applications_gdspa.FieldGender, field.TypeString, value)
	}
	if eagu.mutation.GenderCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldGender, field.TypeString)
	}
	if value, ok := eagu.mutation.MobileNumber(); ok {
		_spec.SetField(exam_applications_gdspa.FieldMobileNumber, field.TypeString, value)
	}
	if eagu.mutation.MobileNumberCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldMobileNumber, field.TypeString)
	}
	if value, ok := eagu.mutation.EmailID(); ok {
		_spec.SetField(exam_applications_gdspa.FieldEmailID, field.TypeString, value)
	}
	if eagu.mutation.EmailIDCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldEmailID, field.TypeString)
	}
	if value, ok := eagu.mutation.CategoryCode(); ok {
		_spec.SetField(exam_applications_gdspa.FieldCategoryCode, field.TypeString, value)
	}
	if eagu.mutation.CategoryCodeCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldCategoryCode, field.TypeString)
	}
	if value, ok := eagu.mutation.CategoryDescription(); ok {
		_spec.SetField(exam_applications_gdspa.FieldCategoryDescription, field.TypeString, value)
	}
	if eagu.mutation.CategoryDescriptionCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldCategoryDescription, field.TypeString)
	}
	if value, ok := eagu.mutation.DisabilityTypeID(); ok {
		_spec.SetField(exam_applications_gdspa.FieldDisabilityTypeID, field.TypeString, value)
	}
	if eagu.mutation.DisabilityTypeIDCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldDisabilityTypeID, field.TypeString)
	}
	if value, ok := eagu.mutation.DisabilityTypeCode(); ok {
		_spec.SetField(exam_applications_gdspa.FieldDisabilityTypeCode, field.TypeString, value)
	}
	if eagu.mutation.DisabilityTypeCodeCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldDisabilityTypeCode, field.TypeString)
	}
	if value, ok := eagu.mutation.DisabilityTypeDescription(); ok {
		_spec.SetField(exam_applications_gdspa.FieldDisabilityTypeDescription, field.TypeString, value)
	}
	if eagu.mutation.DisabilityTypeDescriptionCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldDisabilityTypeDescription, field.TypeString)
	}
	if value, ok := eagu.mutation.DisabilityPercentage(); ok {
		_spec.SetField(exam_applications_gdspa.FieldDisabilityPercentage, field.TypeInt32, value)
	}
	if value, ok := eagu.mutation.AddedDisabilityPercentage(); ok {
		_spec.AddField(exam_applications_gdspa.FieldDisabilityPercentage, field.TypeInt32, value)
	}
	if eagu.mutation.DisabilityPercentageCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldDisabilityPercentage, field.TypeInt32)
	}
	if value, ok := eagu.mutation.DCCS(); ok {
		_spec.SetField(exam_applications_gdspa.FieldDCCS, field.TypeString, value)
	}
	if eagu.mutation.DCCSCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldDCCS, field.TypeString)
	}
	if value, ok := eagu.mutation.EntryPostCode(); ok {
		_spec.SetField(exam_applications_gdspa.FieldEntryPostCode, field.TypeString, value)
	}
	if eagu.mutation.EntryPostCodeCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldEntryPostCode, field.TypeString)
	}
	if value, ok := eagu.mutation.EntryPostDescription(); ok {
		_spec.SetField(exam_applications_gdspa.FieldEntryPostDescription, field.TypeString, value)
	}
	if eagu.mutation.EntryPostDescriptionCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldEntryPostDescription, field.TypeString)
	}
	if value, ok := eagu.mutation.PresentPostCode(); ok {
		_spec.SetField(exam_applications_gdspa.FieldPresentPostCode, field.TypeString, value)
	}
	if eagu.mutation.PresentPostCodeCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldPresentPostCode, field.TypeString)
	}
	if value, ok := eagu.mutation.PresentPostDescription(); ok {
		_spec.SetField(exam_applications_gdspa.FieldPresentPostDescription, field.TypeString, value)
	}
	if eagu.mutation.PresentPostDescriptionCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldPresentPostDescription, field.TypeString)
	}
	if value, ok := eagu.mutation.FeederPostCode(); ok {
		_spec.SetField(exam_applications_gdspa.FieldFeederPostCode, field.TypeString, value)
	}
	if eagu.mutation.FeederPostCodeCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldFeederPostCode, field.TypeString)
	}
	if value, ok := eagu.mutation.FeederPostDescription(); ok {
		_spec.SetField(exam_applications_gdspa.FieldFeederPostDescription, field.TypeString, value)
	}
	if eagu.mutation.FeederPostDescriptionCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldFeederPostDescription, field.TypeString)
	}
	if value, ok := eagu.mutation.FeederPostJoiningDate(); ok {
		_spec.SetField(exam_applications_gdspa.FieldFeederPostJoiningDate, field.TypeString, value)
	}
	if eagu.mutation.FeederPostJoiningDateCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldFeederPostJoiningDate, field.TypeString)
	}
	if value, ok := eagu.mutation.PresentDesignation(); ok {
		_spec.SetField(exam_applications_gdspa.FieldPresentDesignation, field.TypeString, value)
	}
	if eagu.mutation.PresentDesignationCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldPresentDesignation, field.TypeString)
	}
	if value, ok := eagu.mutation.EducationCode(); ok {
		_spec.SetField(exam_applications_gdspa.FieldEducationCode, field.TypeString, value)
	}
	if eagu.mutation.EducationCodeCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldEducationCode, field.TypeString)
	}
	if value, ok := eagu.mutation.EducationDescription(); ok {
		_spec.SetField(exam_applications_gdspa.FieldEducationDescription, field.TypeString, value)
	}
	if eagu.mutation.EducationDescriptionCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldEducationDescription, field.TypeString)
	}
	if value, ok := eagu.mutation.FacilityUniqueID(); ok {
		_spec.SetField(exam_applications_gdspa.FieldFacilityUniqueID, field.TypeString, value)
	}
	if eagu.mutation.FacilityUniqueIDCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldFacilityUniqueID, field.TypeString)
	}
	if value, ok := eagu.mutation.WorkingOfficePincode(); ok {
		_spec.SetField(exam_applications_gdspa.FieldWorkingOfficePincode, field.TypeInt32, value)
	}
	if value, ok := eagu.mutation.AddedWorkingOfficePincode(); ok {
		_spec.AddField(exam_applications_gdspa.FieldWorkingOfficePincode, field.TypeInt32, value)
	}
	if eagu.mutation.WorkingOfficePincodeCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldWorkingOfficePincode, field.TypeInt32)
	}
	if value, ok := eagu.mutation.WorkingOfficeFacilityID(); ok {
		_spec.SetField(exam_applications_gdspa.FieldWorkingOfficeFacilityID, field.TypeString, value)
	}
	if eagu.mutation.WorkingOfficeFacilityIDCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldWorkingOfficeFacilityID, field.TypeString)
	}
	if value, ok := eagu.mutation.WorkingOfficeName(); ok {
		_spec.SetField(exam_applications_gdspa.FieldWorkingOfficeName, field.TypeString, value)
	}
	if eagu.mutation.WorkingOfficeNameCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldWorkingOfficeName, field.TypeString)
	}
	if value, ok := eagu.mutation.WorkingOfficeCircleFacilityID(); ok {
		_spec.SetField(exam_applications_gdspa.FieldWorkingOfficeCircleFacilityID, field.TypeString, value)
	}
	if eagu.mutation.WorkingOfficeCircleFacilityIDCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldWorkingOfficeCircleFacilityID, field.TypeString)
	}
	if value, ok := eagu.mutation.WorkingOfficeCircleName(); ok {
		_spec.SetField(exam_applications_gdspa.FieldWorkingOfficeCircleName, field.TypeString, value)
	}
	if eagu.mutation.WorkingOfficeCircleNameCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldWorkingOfficeCircleName, field.TypeString)
	}
	if value, ok := eagu.mutation.WorkingOfficeRegionFacilityID(); ok {
		_spec.SetField(exam_applications_gdspa.FieldWorkingOfficeRegionFacilityID, field.TypeString, value)
	}
	if eagu.mutation.WorkingOfficeRegionFacilityIDCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldWorkingOfficeRegionFacilityID, field.TypeString)
	}
	if value, ok := eagu.mutation.WorkingOfficeRegionName(); ok {
		_spec.SetField(exam_applications_gdspa.FieldWorkingOfficeRegionName, field.TypeString, value)
	}
	if eagu.mutation.WorkingOfficeRegionNameCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldWorkingOfficeRegionName, field.TypeString)
	}
	if value, ok := eagu.mutation.WorkingOfficeDivisionFacilityID(); ok {
		_spec.SetField(exam_applications_gdspa.FieldWorkingOfficeDivisionFacilityID, field.TypeString, value)
	}
	if eagu.mutation.WorkingOfficeDivisionFacilityIDCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldWorkingOfficeDivisionFacilityID, field.TypeString)
	}
	if value, ok := eagu.mutation.WorkingOfficeDivisionName(); ok {
		_spec.SetField(exam_applications_gdspa.FieldWorkingOfficeDivisionName, field.TypeString, value)
	}
	if eagu.mutation.WorkingOfficeDivisionNameCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldWorkingOfficeDivisionName, field.TypeString)
	}
	if value, ok := eagu.mutation.ReportingOfficeFacilityID(); ok {
		_spec.SetField(exam_applications_gdspa.FieldReportingOfficeFacilityID, field.TypeString, value)
	}
	if eagu.mutation.ReportingOfficeFacilityIDCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldReportingOfficeFacilityID, field.TypeString)
	}
	if value, ok := eagu.mutation.ReportingOfficeName(); ok {
		_spec.SetField(exam_applications_gdspa.FieldReportingOfficeName, field.TypeString, value)
	}
	if eagu.mutation.ReportingOfficeNameCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldReportingOfficeName, field.TypeString)
	}
	if value, ok := eagu.mutation.LienControllingOfficeID(); ok {
		_spec.SetField(exam_applications_gdspa.FieldLienControllingOfficeID, field.TypeString, value)
	}
	if eagu.mutation.LienControllingOfficeIDCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldLienControllingOfficeID, field.TypeString)
	}
	if value, ok := eagu.mutation.LienControllingOfficeName(); ok {
		_spec.SetField(exam_applications_gdspa.FieldLienControllingOfficeName, field.TypeString, value)
	}
	if eagu.mutation.LienControllingOfficeNameCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldLienControllingOfficeName, field.TypeString)
	}
	if value, ok := eagu.mutation.InDeputation(); ok {
		_spec.SetField(exam_applications_gdspa.FieldInDeputation, field.TypeString, value)
	}
	if eagu.mutation.InDeputationCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldInDeputation, field.TypeString)
	}
	if value, ok := eagu.mutation.DeputationType(); ok {
		_spec.SetField(exam_applications_gdspa.FieldDeputationType, field.TypeString, value)
	}
	if eagu.mutation.DeputationTypeCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldDeputationType, field.TypeString)
	}
	if value, ok := eagu.mutation.DeputationOfficeUniqueId(); ok {
		_spec.SetField(exam_applications_gdspa.FieldDeputationOfficeUniqueId, field.TypeString, value)
	}
	if eagu.mutation.DeputationOfficeUniqueIdCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldDeputationOfficeUniqueId, field.TypeString)
	}
	if value, ok := eagu.mutation.DeputationOfficeFacilityID(); ok {
		_spec.SetField(exam_applications_gdspa.FieldDeputationOfficeFacilityID, field.TypeString, value)
	}
	if eagu.mutation.DeputationOfficeFacilityIDCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldDeputationOfficeFacilityID, field.TypeString)
	}
	if value, ok := eagu.mutation.DeputationOfficeName(); ok {
		_spec.SetField(exam_applications_gdspa.FieldDeputationOfficeName, field.TypeString, value)
	}
	if eagu.mutation.DeputationOfficeNameCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldDeputationOfficeName, field.TypeString)
	}
	if value, ok := eagu.mutation.DeputationControllingOfficeID(); ok {
		_spec.SetField(exam_applications_gdspa.FieldDeputationControllingOfficeID, field.TypeString, value)
	}
	if eagu.mutation.DeputationControllingOfficeIDCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldDeputationControllingOfficeID, field.TypeString)
	}
	if value, ok := eagu.mutation.DeputationControllingOfficeName(); ok {
		_spec.SetField(exam_applications_gdspa.FieldDeputationControllingOfficeName, field.TypeString, value)
	}
	if eagu.mutation.DeputationControllingOfficeNameCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldDeputationControllingOfficeName, field.TypeString)
	}
	if value, ok := eagu.mutation.ControllingOfficeFacilityID(); ok {
		_spec.SetField(exam_applications_gdspa.FieldControllingOfficeFacilityID, field.TypeString, value)
	}
	if eagu.mutation.ControllingOfficeFacilityIDCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldControllingOfficeFacilityID, field.TypeString)
	}
	if value, ok := eagu.mutation.ControllingOfficeName(); ok {
		_spec.SetField(exam_applications_gdspa.FieldControllingOfficeName, field.TypeString, value)
	}
	if eagu.mutation.ControllingOfficeNameCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldControllingOfficeName, field.TypeString)
	}
	if value, ok := eagu.mutation.SubdivisionOfficeFacilityID(); ok {
		_spec.SetField(exam_applications_gdspa.FieldSubdivisionOfficeFacilityID, field.TypeString, value)
	}
	if eagu.mutation.SubdivisionOfficeFacilityIDCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldSubdivisionOfficeFacilityID, field.TypeString)
	}
	if value, ok := eagu.mutation.SubdivisionOfficeName(); ok {
		_spec.SetField(exam_applications_gdspa.FieldSubdivisionOfficeName, field.TypeString, value)
	}
	if eagu.mutation.SubdivisionOfficeNameCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldSubdivisionOfficeName, field.TypeString)
	}
	if value, ok := eagu.mutation.NodalOfficeFacilityID(); ok {
		_spec.SetField(exam_applications_gdspa.FieldNodalOfficeFacilityID, field.TypeString, value)
	}
	if eagu.mutation.NodalOfficeFacilityIDCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldNodalOfficeFacilityID, field.TypeString)
	}
	if value, ok := eagu.mutation.NodalOfficeName(); ok {
		_spec.SetField(exam_applications_gdspa.FieldNodalOfficeName, field.TypeString, value)
	}
	if eagu.mutation.NodalOfficeNameCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldNodalOfficeName, field.TypeString)
	}
	if value, ok := eagu.mutation.CenterFacilityId(); ok {
		_spec.SetField(exam_applications_gdspa.FieldCenterFacilityId, field.TypeString, value)
	}
	if eagu.mutation.CenterFacilityIdCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldCenterFacilityId, field.TypeString)
	}
	if value, ok := eagu.mutation.CentrePreference(); ok {
		_spec.SetField(exam_applications_gdspa.FieldCentrePreference, field.TypeString, value)
	}
	if eagu.mutation.CentrePreferenceCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldCentrePreference, field.TypeString)
	}
	if value, ok := eagu.mutation.Signature(); ok {
		_spec.SetField(exam_applications_gdspa.FieldSignature, field.TypeString, value)
	}
	if eagu.mutation.SignatureCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldSignature, field.TypeString)
	}
	if value, ok := eagu.mutation.Photo(); ok {
		_spec.SetField(exam_applications_gdspa.FieldPhoto, field.TypeString, value)
	}
	if eagu.mutation.PhotoCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldPhoto, field.TypeString)
	}
	if value, ok := eagu.mutation.SignaturePath(); ok {
		_spec.SetField(exam_applications_gdspa.FieldSignaturePath, field.TypeString, value)
	}
	if eagu.mutation.SignaturePathCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldSignaturePath, field.TypeString)
	}
	if value, ok := eagu.mutation.PhotoPath(); ok {
		_spec.SetField(exam_applications_gdspa.FieldPhotoPath, field.TypeString, value)
	}
	if eagu.mutation.PhotoPathCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldPhotoPath, field.TypeString)
	}
	if value, ok := eagu.mutation.CandidatePhoto(); ok {
		_spec.SetField(exam_applications_gdspa.FieldCandidatePhoto, field.TypeBytes, value)
	}
	if eagu.mutation.CandidatePhotoCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldCandidatePhoto, field.TypeBytes)
	}
	if value, ok := eagu.mutation.CandidateSignature(); ok {
		_spec.SetField(exam_applications_gdspa.FieldCandidateSignature, field.TypeBytes, value)
	}
	if eagu.mutation.CandidateSignatureCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldCandidateSignature, field.TypeBytes)
	}
	if value, ok := eagu.mutation.TempHallTicket(); ok {
		_spec.SetField(exam_applications_gdspa.FieldTempHallTicket, field.TypeString, value)
	}
	if eagu.mutation.TempHallTicketCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldTempHallTicket, field.TypeString)
	}
	if value, ok := eagu.mutation.CandidateRemarks(); ok {
		_spec.SetField(exam_applications_gdspa.FieldCandidateRemarks, field.TypeString, value)
	}
	if eagu.mutation.CandidateRemarksCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldCandidateRemarks, field.TypeString)
	}
	if value, ok := eagu.mutation.VAGeneralRemarks(); ok {
		_spec.SetField(exam_applications_gdspa.FieldVAGeneralRemarks, field.TypeString, value)
	}
	if eagu.mutation.VAGeneralRemarksCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldVAGeneralRemarks, field.TypeString)
	}
	if value, ok := eagu.mutation.CAGeneralRemarks(); ok {
		_spec.SetField(exam_applications_gdspa.FieldCAGeneralRemarks, field.TypeString, value)
	}
	if eagu.mutation.CAGeneralRemarksCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldCAGeneralRemarks, field.TypeString)
	}
	if value, ok := eagu.mutation.NAGeneralRemarks(); ok {
		_spec.SetField(exam_applications_gdspa.FieldNAGeneralRemarks, field.TypeString, value)
	}
	if eagu.mutation.NAGeneralRemarksCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldNAGeneralRemarks, field.TypeString)
	}
	if value, ok := eagu.mutation.ApplicationStatus(); ok {
		_spec.SetField(exam_applications_gdspa.FieldApplicationStatus, field.TypeString, value)
	}
	if eagu.mutation.ApplicationStatusCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldApplicationStatus, field.TypeString)
	}
	if value, ok := eagu.mutation.Status(); ok {
		_spec.SetField(exam_applications_gdspa.FieldStatus, field.TypeString, value)
	}
	if eagu.mutation.StatusCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldStatus, field.TypeString)
	}
	if value, ok := eagu.mutation.RecommendedStatus(); ok {
		_spec.SetField(exam_applications_gdspa.FieldRecommendedStatus, field.TypeString, value)
	}
	if eagu.mutation.RecommendedStatusCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldRecommendedStatus, field.TypeString)
	}
	if value, ok := eagu.mutation.DesignationID(); ok {
		_spec.SetField(exam_applications_gdspa.FieldDesignationID, field.TypeString, value)
	}
	if eagu.mutation.DesignationIDCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldDesignationID, field.TypeString)
	}
	if value, ok := eagu.mutation.VAUserId(); ok {
		_spec.SetField(exam_applications_gdspa.FieldVAUserId, field.TypeInt32, value)
	}
	if value, ok := eagu.mutation.AddedVAUserId(); ok {
		_spec.AddField(exam_applications_gdspa.FieldVAUserId, field.TypeInt32, value)
	}
	if eagu.mutation.VAUserIdCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldVAUserId, field.TypeInt32)
	}
	if value, ok := eagu.mutation.VAUserName(); ok {
		_spec.SetField(exam_applications_gdspa.FieldVAUserName, field.TypeString, value)
	}
	if eagu.mutation.VAUserNameCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldVAUserName, field.TypeString)
	}
	if value, ok := eagu.mutation.VAEmployeeID(); ok {
		_spec.SetField(exam_applications_gdspa.FieldVAEmployeeID, field.TypeString, value)
	}
	if eagu.mutation.VAEmployeeIDCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldVAEmployeeID, field.TypeString)
	}
	if value, ok := eagu.mutation.VAEmployeeDesignation(); ok {
		_spec.SetField(exam_applications_gdspa.FieldVAEmployeeDesignation, field.TypeString, value)
	}
	if eagu.mutation.VAEmployeeDesignationCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldVAEmployeeDesignation, field.TypeString)
	}
	if value, ok := eagu.mutation.VARemarks(); ok {
		_spec.SetField(exam_applications_gdspa.FieldVARemarks, field.TypeString, value)
	}
	if eagu.mutation.VARemarksCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldVARemarks, field.TypeString)
	}
	if value, ok := eagu.mutation.VADate(); ok {
		_spec.SetField(exam_applications_gdspa.FieldVADate, field.TypeTime, value)
	}
	if eagu.mutation.VADateCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldVADate, field.TypeTime)
	}
	if value, ok := eagu.mutation.CAUserId(); ok {
		_spec.SetField(exam_applications_gdspa.FieldCAUserId, field.TypeInt32, value)
	}
	if value, ok := eagu.mutation.AddedCAUserId(); ok {
		_spec.AddField(exam_applications_gdspa.FieldCAUserId, field.TypeInt32, value)
	}
	if eagu.mutation.CAUserIdCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldCAUserId, field.TypeInt32)
	}
	if value, ok := eagu.mutation.CAUserName(); ok {
		_spec.SetField(exam_applications_gdspa.FieldCAUserName, field.TypeString, value)
	}
	if eagu.mutation.CAUserNameCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldCAUserName, field.TypeString)
	}
	if value, ok := eagu.mutation.CAEmployeeID(); ok {
		_spec.SetField(exam_applications_gdspa.FieldCAEmployeeID, field.TypeString, value)
	}
	if eagu.mutation.CAEmployeeIDCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldCAEmployeeID, field.TypeString)
	}
	if value, ok := eagu.mutation.CAEmployeeDesignation(); ok {
		_spec.SetField(exam_applications_gdspa.FieldCAEmployeeDesignation, field.TypeString, value)
	}
	if eagu.mutation.CAEmployeeDesignationCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldCAEmployeeDesignation, field.TypeString)
	}
	if value, ok := eagu.mutation.CARemarks(); ok {
		_spec.SetField(exam_applications_gdspa.FieldCARemarks, field.TypeString, value)
	}
	if eagu.mutation.CARemarksCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldCARemarks, field.TypeString)
	}
	if value, ok := eagu.mutation.CADate(); ok {
		_spec.SetField(exam_applications_gdspa.FieldCADate, field.TypeTime, value)
	}
	if eagu.mutation.CADateCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldCADate, field.TypeTime)
	}
	if value, ok := eagu.mutation.NAUserId(); ok {
		_spec.SetField(exam_applications_gdspa.FieldNAUserId, field.TypeInt32, value)
	}
	if value, ok := eagu.mutation.AddedNAUserId(); ok {
		_spec.AddField(exam_applications_gdspa.FieldNAUserId, field.TypeInt32, value)
	}
	if eagu.mutation.NAUserIdCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldNAUserId, field.TypeInt32)
	}
	if value, ok := eagu.mutation.NAUserName(); ok {
		_spec.SetField(exam_applications_gdspa.FieldNAUserName, field.TypeString, value)
	}
	if eagu.mutation.NAUserNameCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldNAUserName, field.TypeString)
	}
	if value, ok := eagu.mutation.NAEmployeeID(); ok {
		_spec.SetField(exam_applications_gdspa.FieldNAEmployeeID, field.TypeString, value)
	}
	if eagu.mutation.NAEmployeeIDCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldNAEmployeeID, field.TypeString)
	}
	if value, ok := eagu.mutation.NAEmployeeDesignation(); ok {
		_spec.SetField(exam_applications_gdspa.FieldNAEmployeeDesignation, field.TypeString, value)
	}
	if eagu.mutation.NAEmployeeDesignationCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldNAEmployeeDesignation, field.TypeString)
	}
	if value, ok := eagu.mutation.NARemarks(); ok {
		_spec.SetField(exam_applications_gdspa.FieldNARemarks, field.TypeString, value)
	}
	if eagu.mutation.NARemarksCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldNARemarks, field.TypeString)
	}
	if value, ok := eagu.mutation.NADate(); ok {
		_spec.SetField(exam_applications_gdspa.FieldNADate, field.TypeTime, value)
	}
	if eagu.mutation.NADateCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldNADate, field.TypeTime)
	}
	if value, ok := eagu.mutation.AppliactionRemarks(); ok {
		_spec.SetField(exam_applications_gdspa.FieldAppliactionRemarks, field.TypeString, value)
	}
	if eagu.mutation.AppliactionRemarksCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldAppliactionRemarks, field.TypeString)
	}
	if value, ok := eagu.mutation.CadrePreferences(); ok {
		_spec.SetField(exam_applications_gdspa.FieldCadrePreferences, field.TypeJSON, value)
	}
	if value, ok := eagu.mutation.AppendedCadrePreferences(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, exam_applications_gdspa.FieldCadrePreferences, value)
		})
	}
	if eagu.mutation.CadrePreferencesCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldCadrePreferences, field.TypeJSON)
	}
	if value, ok := eagu.mutation.CAPreviousRemarks(); ok {
		_spec.SetField(exam_applications_gdspa.FieldCAPreviousRemarks, field.TypeString, value)
	}
	if eagu.mutation.CAPreviousRemarksCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldCAPreviousRemarks, field.TypeString)
	}
	if value, ok := eagu.mutation.GenerateHallTicketFlag(); ok {
		_spec.SetField(exam_applications_gdspa.FieldGenerateHallTicketFlag, field.TypeBool, value)
	}
	if eagu.mutation.GenerateHallTicketFlagCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldGenerateHallTicketFlag, field.TypeBool)
	}
	if value, ok := eagu.mutation.PunishmentStatus(); ok {
		_spec.SetField(exam_applications_gdspa.FieldPunishmentStatus, field.TypeBool, value)
	}
	if eagu.mutation.PunishmentStatusCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldPunishmentStatus, field.TypeBool)
	}
	if value, ok := eagu.mutation.DisciplinaryCaseStatus(); ok {
		_spec.SetField(exam_applications_gdspa.FieldDisciplinaryCaseStatus, field.TypeBool, value)
	}
	if eagu.mutation.DisciplinaryCaseStatusCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldDisciplinaryCaseStatus, field.TypeBool)
	}
	if value, ok := eagu.mutation.HallTicketNumber(); ok {
		_spec.SetField(exam_applications_gdspa.FieldHallTicketNumber, field.TypeString, value)
	}
	if eagu.mutation.HallTicketNumberCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldHallTicketNumber, field.TypeString)
	}
	if value, ok := eagu.mutation.HallTicketGeneratedFlag(); ok {
		_spec.SetField(exam_applications_gdspa.FieldHallTicketGeneratedFlag, field.TypeBool, value)
	}
	if eagu.mutation.HallTicketGeneratedFlagCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldHallTicketGeneratedFlag, field.TypeBool)
	}
	if value, ok := eagu.mutation.GenerateHallTicketFlagByNO(); ok {
		_spec.SetField(exam_applications_gdspa.FieldGenerateHallTicketFlagByNO, field.TypeBool, value)
	}
	if eagu.mutation.GenerateHallTicketFlagByNOCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldGenerateHallTicketFlagByNO, field.TypeBool)
	}
	if value, ok := eagu.mutation.HallTicketGeneratedDate(); ok {
		_spec.SetField(exam_applications_gdspa.FieldHallTicketGeneratedDate, field.TypeTime, value)
	}
	if eagu.mutation.HallTicketGeneratedDateCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldHallTicketGeneratedDate, field.TypeTime)
	}
	if value, ok := eagu.mutation.TemporaryHallTicket(); ok {
		_spec.SetField(exam_applications_gdspa.FieldTemporaryHallTicket, field.TypeString, value)
	}
	if eagu.mutation.TemporaryHallTicketCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldTemporaryHallTicket, field.TypeString)
	}
	if value, ok := eagu.mutation.OptionUsed(); ok {
		_spec.SetField(exam_applications_gdspa.FieldOptionUsed, field.TypeString, value)
	}
	if eagu.mutation.OptionUsedCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldOptionUsed, field.TypeString)
	}
	if value, ok := eagu.mutation.Remarks(); ok {
		_spec.SetField(exam_applications_gdspa.FieldRemarks, field.TypeString, value)
	}
	if eagu.mutation.RemarksCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldRemarks, field.TypeString)
	}
	if value, ok := eagu.mutation.Cadre(); ok {
		_spec.SetField(exam_applications_gdspa.FieldCadre, field.TypeString, value)
	}
	if eagu.mutation.CadreCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldCadre, field.TypeString)
	}
	if value, ok := eagu.mutation.EmployeePost(); ok {
		_spec.SetField(exam_applications_gdspa.FieldEmployeePost, field.TypeString, value)
	}
	if eagu.mutation.EmployeePostCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldEmployeePost, field.TypeString)
	}
	if value, ok := eagu.mutation.DOJInEligiblePost(); ok {
		_spec.SetField(exam_applications_gdspa.FieldDOJInEligiblePost, field.TypeString, value)
	}
	if eagu.mutation.DOJInEligiblePostCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldDOJInEligiblePost, field.TypeString)
	}
	if value, ok := eagu.mutation.DivisionPreferences(); ok {
		_spec.SetField(exam_applications_gdspa.FieldDivisionPreferences, field.TypeJSON, value)
	}
	if value, ok := eagu.mutation.AppendedDivisionPreferences(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, exam_applications_gdspa.FieldDivisionPreferences, value)
		})
	}
	if eagu.mutation.DivisionPreferencesCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldDivisionPreferences, field.TypeJSON)
	}
	if value, ok := eagu.mutation.ServiceLength(); ok {
		_spec.SetField(exam_applications_gdspa.FieldServiceLength, field.TypeJSON, value)
	}
	if value, ok := eagu.mutation.AppendedServiceLength(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, exam_applications_gdspa.FieldServiceLength, value)
		})
	}
	if eagu.mutation.ServiceLengthCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldServiceLength, field.TypeJSON)
	}
	if value, ok := eagu.mutation.NonQualifyingService(); ok {
		_spec.SetField(exam_applications_gdspa.FieldNonQualifyingService, field.TypeJSON, value)
	}
	if value, ok := eagu.mutation.AppendedNonQualifyingService(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, exam_applications_gdspa.FieldNonQualifyingService, value)
		})
	}
	if eagu.mutation.NonQualifyingServiceCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldNonQualifyingService, field.TypeJSON)
	}
	if value, ok := eagu.mutation.DCInPresentCadre(); ok {
		_spec.SetField(exam_applications_gdspa.FieldDCInPresentCadre, field.TypeString, value)
	}
	if eagu.mutation.DCInPresentCadreCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldDCInPresentCadre, field.TypeString)
	}
	if value, ok := eagu.mutation.ReportingOfficeID(); ok {
		_spec.SetField(exam_applications_gdspa.FieldReportingOfficeID, field.TypeString, value)
	}
	if eagu.mutation.ReportingOfficeIDCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldReportingOfficeID, field.TypeString)
	}
	if value, ok := eagu.mutation.PostPreferences(); ok {
		_spec.SetField(exam_applications_gdspa.FieldPostPreferences, field.TypeJSON, value)
	}
	if value, ok := eagu.mutation.AppendedPostPreferences(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, exam_applications_gdspa.FieldPostPreferences, value)
		})
	}
	if eagu.mutation.PostPreferencesCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldPostPreferences, field.TypeJSON)
	}
	if value, ok := eagu.mutation.UnitPreferences(); ok {
		_spec.SetField(exam_applications_gdspa.FieldUnitPreferences, field.TypeJSON, value)
	}
	if value, ok := eagu.mutation.AppendedUnitPreferences(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, exam_applications_gdspa.FieldUnitPreferences, value)
		})
	}
	if eagu.mutation.UnitPreferencesCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldUnitPreferences, field.TypeJSON)
	}
	if value, ok := eagu.mutation.CenterId(); ok {
		_spec.SetField(exam_applications_gdspa.FieldCenterId, field.TypeInt32, value)
	}
	if value, ok := eagu.mutation.AddedCenterId(); ok {
		_spec.AddField(exam_applications_gdspa.FieldCenterId, field.TypeInt32, value)
	}
	if eagu.mutation.CenterIdCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldCenterId, field.TypeInt32)
	}
	if value, ok := eagu.mutation.ClaimingQualifyingService(); ok {
		_spec.SetField(exam_applications_gdspa.FieldClaimingQualifyingService, field.TypeString, value)
	}
	if eagu.mutation.ClaimingQualifyingServiceCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldClaimingQualifyingService, field.TypeString)
	}
	if value, ok := eagu.mutation.DeputationOfficePincode(); ok {
		_spec.SetField(exam_applications_gdspa.FieldDeputationOfficePincode, field.TypeString, value)
	}
	if eagu.mutation.DeputationOfficePincodeCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldDeputationOfficePincode, field.TypeString)
	}
	if value, ok := eagu.mutation.UpdatedAt(); ok {
		_spec.SetField(exam_applications_gdspa.FieldUpdatedAt, field.TypeTime, value)
	}
	if eagu.mutation.UpdatedAtCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := eagu.mutation.UpdatedBy(); ok {
		_spec.SetField(exam_applications_gdspa.FieldUpdatedBy, field.TypeString, value)
	}
	if eagu.mutation.UpdatedByCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := eagu.mutation.ApplicationWdlDate(); ok {
		_spec.SetField(exam_applications_gdspa.FieldApplicationWdlDate, field.TypeTime, value)
	}
	if eagu.mutation.ApplicationWdlDateCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldApplicationWdlDate, field.TypeTime)
	}
	if value, ok := eagu.mutation.ExamCenterHall(); ok {
		_spec.SetField(exam_applications_gdspa.FieldExamCenterHall, field.TypeInt32, value)
	}
	if value, ok := eagu.mutation.AddedExamCenterHall(); ok {
		_spec.AddField(exam_applications_gdspa.FieldExamCenterHall, field.TypeInt32, value)
	}
	if eagu.mutation.ExamCenterHallCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldExamCenterHall, field.TypeInt32)
	}
	if value, ok := eagu.mutation.HallName(); ok {
		_spec.SetField(exam_applications_gdspa.FieldHallName, field.TypeString, value)
	}
	if eagu.mutation.HallNameCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldHallName, field.TypeString)
	}
	if value, ok := eagu.mutation.FacilityName(); ok {
		_spec.SetField(exam_applications_gdspa.FieldFacilityName, field.TypeString, value)
	}
	if eagu.mutation.FacilityNameCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldFacilityName, field.TypeString)
	}
	if eagu.mutation.UsersGDSPARefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_applications_gdspa.UsersGDSPARefTable,
			Columns: []string{exam_applications_gdspa.UsersGDSPARefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usermaster.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eagu.mutation.RemovedUsersGDSPARefIDs(); len(nodes) > 0 && !eagu.mutation.UsersGDSPARefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_applications_gdspa.UsersGDSPARefTable,
			Columns: []string{exam_applications_gdspa.UsersGDSPARefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usermaster.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eagu.mutation.UsersGDSPARefIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_applications_gdspa.UsersGDSPARefTable,
			Columns: []string{exam_applications_gdspa.UsersGDSPARefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usermaster.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eagu.mutation.ExamcitycenterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   exam_applications_gdspa.ExamcitycenterTable,
			Columns: []string{exam_applications_gdspa.ExamcitycenterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(examcitycenter.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eagu.mutation.ExamcitycenterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   exam_applications_gdspa.ExamcitycenterTable,
			Columns: []string{exam_applications_gdspa.ExamcitycenterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(examcitycenter.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eagu.mutation.GDSPAExamCentresCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   exam_applications_gdspa.GDSPAExamCentresTable,
			Columns: []string{exam_applications_gdspa.GDSPAExamCentresColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(center.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eagu.mutation.GDSPAExamCentresIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   exam_applications_gdspa.GDSPAExamCentresTable,
			Columns: []string{exam_applications_gdspa.GDSPAExamCentresColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(center.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eagu.mutation.RoleusersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   exam_applications_gdspa.RoleusersTable,
			Columns: []string{exam_applications_gdspa.RoleusersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rolemaster.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eagu.mutation.RoleusersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   exam_applications_gdspa.RoleusersTable,
			Columns: []string{exam_applications_gdspa.RoleusersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rolemaster.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eagu.mutation.CadrePrefRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_applications_gdspa.CadrePrefRefTable,
			Columns: []string{exam_applications_gdspa.CadrePrefRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cadre_choice_pa.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eagu.mutation.RemovedCadrePrefRefIDs(); len(nodes) > 0 && !eagu.mutation.CadrePrefRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_applications_gdspa.CadrePrefRefTable,
			Columns: []string{exam_applications_gdspa.CadrePrefRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cadre_choice_pa.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eagu.mutation.CadrePrefRefIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_applications_gdspa.CadrePrefRefTable,
			Columns: []string{exam_applications_gdspa.CadrePrefRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cadre_choice_pa.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eagu.mutation.CirclePrefRefGDSPACleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_applications_gdspa.CirclePrefRefGDSPATable,
			Columns: []string{exam_applications_gdspa.CirclePrefRefGDSPAColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(division_choice_pa.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eagu.mutation.RemovedCirclePrefRefGDSPAIDs(); len(nodes) > 0 && !eagu.mutation.CirclePrefRefGDSPACleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_applications_gdspa.CirclePrefRefGDSPATable,
			Columns: []string{exam_applications_gdspa.CirclePrefRefGDSPAColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(division_choice_pa.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eagu.mutation.CirclePrefRefGDSPAIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_applications_gdspa.CirclePrefRefGDSPATable,
			Columns: []string{exam_applications_gdspa.CirclePrefRefGDSPAColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(division_choice_pa.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eagu.mutation.GDSPAApplicationsRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_applications_gdspa.GDSPAApplicationsRefTable,
			Columns: []string{exam_applications_gdspa.GDSPAApplicationsRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(recommendationsgdspaapplications.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eagu.mutation.RemovedGDSPAApplicationsRefIDs(); len(nodes) > 0 && !eagu.mutation.GDSPAApplicationsRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_applications_gdspa.GDSPAApplicationsRefTable,
			Columns: []string{exam_applications_gdspa.GDSPAApplicationsRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(recommendationsgdspaapplications.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eagu.mutation.GDSPAApplicationsRefIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_applications_gdspa.GDSPAApplicationsRefTable,
			Columns: []string{exam_applications_gdspa.GDSPAApplicationsRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(recommendationsgdspaapplications.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eagu.mutation.ExamsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   exam_applications_gdspa.ExamsTable,
			Columns: []string{exam_applications_gdspa.ExamsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eagu.mutation.ExamsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   exam_applications_gdspa.ExamsTable,
			Columns: []string{exam_applications_gdspa.ExamsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eagu.mutation.CircleRefsGDSPACleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   exam_applications_gdspa.CircleRefsGDSPATable,
			Columns: []string{exam_applications_gdspa.CircleRefsGDSPAColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(circlesummaryforno.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eagu.mutation.CircleRefsGDSPAIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   exam_applications_gdspa.CircleRefsGDSPATable,
			Columns: []string{exam_applications_gdspa.CircleRefsGDSPAColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(circlesummaryforno.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eagu.mutation.LogDataCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_applications_gdspa.LogDataTable,
			Columns: []string{exam_applications_gdspa.LogDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(logs.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eagu.mutation.RemovedLogDataIDs(); len(nodes) > 0 && !eagu.mutation.LogDataCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_applications_gdspa.LogDataTable,
			Columns: []string{exam_applications_gdspa.LogDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(logs.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eagu.mutation.LogDataIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_applications_gdspa.LogDataTable,
			Columns: []string{exam_applications_gdspa.LogDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(logs.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, eagu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{exam_applications_gdspa.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	eagu.mutation.done = true
	return n, nil
}

// ExamApplicationsGDSPAUpdateOne is the builder for updating a single Exam_Applications_GDSPA entity.
type ExamApplicationsGDSPAUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ExamApplicationsGDSPAMutation
}

// SetApplicationNumber sets the "ApplicationNumber" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetApplicationNumber(s string) *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.SetApplicationNumber(s)
	return eaguo
}

// SetNillableApplicationNumber sets the "ApplicationNumber" field if the given value is not nil.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetNillableApplicationNumber(s *string) *ExamApplicationsGDSPAUpdateOne {
	if s != nil {
		eaguo.SetApplicationNumber(*s)
	}
	return eaguo
}

// ClearApplicationNumber clears the value of the "ApplicationNumber" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) ClearApplicationNumber() *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.ClearApplicationNumber()
	return eaguo
}

// SetApplnSubmittedDate sets the "ApplnSubmittedDate" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetApplnSubmittedDate(t time.Time) *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.SetApplnSubmittedDate(t)
	return eaguo
}

// SetNillableApplnSubmittedDate sets the "ApplnSubmittedDate" field if the given value is not nil.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetNillableApplnSubmittedDate(t *time.Time) *ExamApplicationsGDSPAUpdateOne {
	if t != nil {
		eaguo.SetApplnSubmittedDate(*t)
	}
	return eaguo
}

// ClearApplnSubmittedDate clears the value of the "ApplnSubmittedDate" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) ClearApplnSubmittedDate() *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.ClearApplnSubmittedDate()
	return eaguo
}

// SetExamCode sets the "ExamCode" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetExamCode(i int32) *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.SetExamCode(i)
	return eaguo
}

// SetNillableExamCode sets the "ExamCode" field if the given value is not nil.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetNillableExamCode(i *int32) *ExamApplicationsGDSPAUpdateOne {
	if i != nil {
		eaguo.SetExamCode(*i)
	}
	return eaguo
}

// ClearExamCode clears the value of the "ExamCode" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) ClearExamCode() *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.ClearExamCode()
	return eaguo
}

// SetExamShortName sets the "ExamShortName" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetExamShortName(s string) *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.SetExamShortName(s)
	return eaguo
}

// SetNillableExamShortName sets the "ExamShortName" field if the given value is not nil.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetNillableExamShortName(s *string) *ExamApplicationsGDSPAUpdateOne {
	if s != nil {
		eaguo.SetExamShortName(*s)
	}
	return eaguo
}

// ClearExamShortName clears the value of the "ExamShortName" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) ClearExamShortName() *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.ClearExamShortName()
	return eaguo
}

// SetExamName sets the "ExamName" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetExamName(s string) *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.SetExamName(s)
	return eaguo
}

// SetNillableExamName sets the "ExamName" field if the given value is not nil.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetNillableExamName(s *string) *ExamApplicationsGDSPAUpdateOne {
	if s != nil {
		eaguo.SetExamName(*s)
	}
	return eaguo
}

// ClearExamName clears the value of the "ExamName" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) ClearExamName() *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.ClearExamName()
	return eaguo
}

// SetSmsExamShortName sets the "SmsExamShortName" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetSmsExamShortName(s string) *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.SetSmsExamShortName(s)
	return eaguo
}

// SetNillableSmsExamShortName sets the "SmsExamShortName" field if the given value is not nil.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetNillableSmsExamShortName(s *string) *ExamApplicationsGDSPAUpdateOne {
	if s != nil {
		eaguo.SetSmsExamShortName(*s)
	}
	return eaguo
}

// ClearSmsExamShortName clears the value of the "SmsExamShortName" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) ClearSmsExamShortName() *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.ClearSmsExamShortName()
	return eaguo
}

// SetExamYear sets the "ExamYear" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetExamYear(s string) *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.SetExamYear(s)
	return eaguo
}

// SetNillableExamYear sets the "ExamYear" field if the given value is not nil.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetNillableExamYear(s *string) *ExamApplicationsGDSPAUpdateOne {
	if s != nil {
		eaguo.SetExamYear(*s)
	}
	return eaguo
}

// ClearExamYear clears the value of the "ExamYear" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) ClearExamYear() *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.ClearExamYear()
	return eaguo
}

// SetUserID sets the "UserID" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetUserID(i int32) *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.ResetUserID()
	eaguo.mutation.SetUserID(i)
	return eaguo
}

// SetNillableUserID sets the "UserID" field if the given value is not nil.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetNillableUserID(i *int32) *ExamApplicationsGDSPAUpdateOne {
	if i != nil {
		eaguo.SetUserID(*i)
	}
	return eaguo
}

// AddUserID adds i to the "UserID" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) AddUserID(i int32) *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.AddUserID(i)
	return eaguo
}

// ClearUserID clears the value of the "UserID" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) ClearUserID() *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.ClearUserID()
	return eaguo
}

// SetEmployeeID sets the "EmployeeID" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetEmployeeID(i int64) *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.ResetEmployeeID()
	eaguo.mutation.SetEmployeeID(i)
	return eaguo
}

// SetNillableEmployeeID sets the "EmployeeID" field if the given value is not nil.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetNillableEmployeeID(i *int64) *ExamApplicationsGDSPAUpdateOne {
	if i != nil {
		eaguo.SetEmployeeID(*i)
	}
	return eaguo
}

// AddEmployeeID adds i to the "EmployeeID" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) AddEmployeeID(i int64) *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.AddEmployeeID(i)
	return eaguo
}

// ClearEmployeeID clears the value of the "EmployeeID" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) ClearEmployeeID() *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.ClearEmployeeID()
	return eaguo
}

// SetEmployeeName sets the "EmployeeName" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetEmployeeName(s string) *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.SetEmployeeName(s)
	return eaguo
}

// SetNillableEmployeeName sets the "EmployeeName" field if the given value is not nil.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetNillableEmployeeName(s *string) *ExamApplicationsGDSPAUpdateOne {
	if s != nil {
		eaguo.SetEmployeeName(*s)
	}
	return eaguo
}

// ClearEmployeeName clears the value of the "EmployeeName" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) ClearEmployeeName() *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.ClearEmployeeName()
	return eaguo
}

// SetDOB sets the "DOB" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetDOB(s string) *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.SetDOB(s)
	return eaguo
}

// SetNillableDOB sets the "DOB" field if the given value is not nil.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetNillableDOB(s *string) *ExamApplicationsGDSPAUpdateOne {
	if s != nil {
		eaguo.SetDOB(*s)
	}
	return eaguo
}

// ClearDOB clears the value of the "DOB" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) ClearDOB() *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.ClearDOB()
	return eaguo
}

// SetGender sets the "Gender" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetGender(s string) *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.SetGender(s)
	return eaguo
}

// SetNillableGender sets the "Gender" field if the given value is not nil.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetNillableGender(s *string) *ExamApplicationsGDSPAUpdateOne {
	if s != nil {
		eaguo.SetGender(*s)
	}
	return eaguo
}

// ClearGender clears the value of the "Gender" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) ClearGender() *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.ClearGender()
	return eaguo
}

// SetMobileNumber sets the "MobileNumber" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetMobileNumber(s string) *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.SetMobileNumber(s)
	return eaguo
}

// SetNillableMobileNumber sets the "MobileNumber" field if the given value is not nil.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetNillableMobileNumber(s *string) *ExamApplicationsGDSPAUpdateOne {
	if s != nil {
		eaguo.SetMobileNumber(*s)
	}
	return eaguo
}

// ClearMobileNumber clears the value of the "MobileNumber" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) ClearMobileNumber() *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.ClearMobileNumber()
	return eaguo
}

// SetEmailID sets the "EmailID" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetEmailID(s string) *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.SetEmailID(s)
	return eaguo
}

// SetNillableEmailID sets the "EmailID" field if the given value is not nil.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetNillableEmailID(s *string) *ExamApplicationsGDSPAUpdateOne {
	if s != nil {
		eaguo.SetEmailID(*s)
	}
	return eaguo
}

// ClearEmailID clears the value of the "EmailID" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) ClearEmailID() *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.ClearEmailID()
	return eaguo
}

// SetCategoryCode sets the "CategoryCode" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetCategoryCode(s string) *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.SetCategoryCode(s)
	return eaguo
}

// SetNillableCategoryCode sets the "CategoryCode" field if the given value is not nil.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetNillableCategoryCode(s *string) *ExamApplicationsGDSPAUpdateOne {
	if s != nil {
		eaguo.SetCategoryCode(*s)
	}
	return eaguo
}

// ClearCategoryCode clears the value of the "CategoryCode" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) ClearCategoryCode() *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.ClearCategoryCode()
	return eaguo
}

// SetCategoryDescription sets the "CategoryDescription" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetCategoryDescription(s string) *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.SetCategoryDescription(s)
	return eaguo
}

// SetNillableCategoryDescription sets the "CategoryDescription" field if the given value is not nil.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetNillableCategoryDescription(s *string) *ExamApplicationsGDSPAUpdateOne {
	if s != nil {
		eaguo.SetCategoryDescription(*s)
	}
	return eaguo
}

// ClearCategoryDescription clears the value of the "CategoryDescription" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) ClearCategoryDescription() *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.ClearCategoryDescription()
	return eaguo
}

// SetDisabilityTypeID sets the "DisabilityTypeID" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetDisabilityTypeID(s string) *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.SetDisabilityTypeID(s)
	return eaguo
}

// SetNillableDisabilityTypeID sets the "DisabilityTypeID" field if the given value is not nil.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetNillableDisabilityTypeID(s *string) *ExamApplicationsGDSPAUpdateOne {
	if s != nil {
		eaguo.SetDisabilityTypeID(*s)
	}
	return eaguo
}

// ClearDisabilityTypeID clears the value of the "DisabilityTypeID" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) ClearDisabilityTypeID() *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.ClearDisabilityTypeID()
	return eaguo
}

// SetDisabilityTypeCode sets the "DisabilityTypeCode" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetDisabilityTypeCode(s string) *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.SetDisabilityTypeCode(s)
	return eaguo
}

// SetNillableDisabilityTypeCode sets the "DisabilityTypeCode" field if the given value is not nil.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetNillableDisabilityTypeCode(s *string) *ExamApplicationsGDSPAUpdateOne {
	if s != nil {
		eaguo.SetDisabilityTypeCode(*s)
	}
	return eaguo
}

// ClearDisabilityTypeCode clears the value of the "DisabilityTypeCode" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) ClearDisabilityTypeCode() *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.ClearDisabilityTypeCode()
	return eaguo
}

// SetDisabilityTypeDescription sets the "DisabilityTypeDescription" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetDisabilityTypeDescription(s string) *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.SetDisabilityTypeDescription(s)
	return eaguo
}

// SetNillableDisabilityTypeDescription sets the "DisabilityTypeDescription" field if the given value is not nil.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetNillableDisabilityTypeDescription(s *string) *ExamApplicationsGDSPAUpdateOne {
	if s != nil {
		eaguo.SetDisabilityTypeDescription(*s)
	}
	return eaguo
}

// ClearDisabilityTypeDescription clears the value of the "DisabilityTypeDescription" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) ClearDisabilityTypeDescription() *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.ClearDisabilityTypeDescription()
	return eaguo
}

// SetDisabilityPercentage sets the "DisabilityPercentage" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetDisabilityPercentage(i int32) *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.ResetDisabilityPercentage()
	eaguo.mutation.SetDisabilityPercentage(i)
	return eaguo
}

// SetNillableDisabilityPercentage sets the "DisabilityPercentage" field if the given value is not nil.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetNillableDisabilityPercentage(i *int32) *ExamApplicationsGDSPAUpdateOne {
	if i != nil {
		eaguo.SetDisabilityPercentage(*i)
	}
	return eaguo
}

// AddDisabilityPercentage adds i to the "DisabilityPercentage" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) AddDisabilityPercentage(i int32) *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.AddDisabilityPercentage(i)
	return eaguo
}

// ClearDisabilityPercentage clears the value of the "DisabilityPercentage" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) ClearDisabilityPercentage() *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.ClearDisabilityPercentage()
	return eaguo
}

// SetDCCS sets the "DCCS" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetDCCS(s string) *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.SetDCCS(s)
	return eaguo
}

// SetNillableDCCS sets the "DCCS" field if the given value is not nil.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetNillableDCCS(s *string) *ExamApplicationsGDSPAUpdateOne {
	if s != nil {
		eaguo.SetDCCS(*s)
	}
	return eaguo
}

// ClearDCCS clears the value of the "DCCS" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) ClearDCCS() *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.ClearDCCS()
	return eaguo
}

// SetEntryPostCode sets the "EntryPostCode" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetEntryPostCode(s string) *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.SetEntryPostCode(s)
	return eaguo
}

// SetNillableEntryPostCode sets the "EntryPostCode" field if the given value is not nil.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetNillableEntryPostCode(s *string) *ExamApplicationsGDSPAUpdateOne {
	if s != nil {
		eaguo.SetEntryPostCode(*s)
	}
	return eaguo
}

// ClearEntryPostCode clears the value of the "EntryPostCode" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) ClearEntryPostCode() *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.ClearEntryPostCode()
	return eaguo
}

// SetEntryPostDescription sets the "EntryPostDescription" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetEntryPostDescription(s string) *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.SetEntryPostDescription(s)
	return eaguo
}

// SetNillableEntryPostDescription sets the "EntryPostDescription" field if the given value is not nil.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetNillableEntryPostDescription(s *string) *ExamApplicationsGDSPAUpdateOne {
	if s != nil {
		eaguo.SetEntryPostDescription(*s)
	}
	return eaguo
}

// ClearEntryPostDescription clears the value of the "EntryPostDescription" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) ClearEntryPostDescription() *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.ClearEntryPostDescription()
	return eaguo
}

// SetPresentPostCode sets the "PresentPostCode" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetPresentPostCode(s string) *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.SetPresentPostCode(s)
	return eaguo
}

// SetNillablePresentPostCode sets the "PresentPostCode" field if the given value is not nil.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetNillablePresentPostCode(s *string) *ExamApplicationsGDSPAUpdateOne {
	if s != nil {
		eaguo.SetPresentPostCode(*s)
	}
	return eaguo
}

// ClearPresentPostCode clears the value of the "PresentPostCode" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) ClearPresentPostCode() *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.ClearPresentPostCode()
	return eaguo
}

// SetPresentPostDescription sets the "PresentPostDescription" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetPresentPostDescription(s string) *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.SetPresentPostDescription(s)
	return eaguo
}

// SetNillablePresentPostDescription sets the "PresentPostDescription" field if the given value is not nil.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetNillablePresentPostDescription(s *string) *ExamApplicationsGDSPAUpdateOne {
	if s != nil {
		eaguo.SetPresentPostDescription(*s)
	}
	return eaguo
}

// ClearPresentPostDescription clears the value of the "PresentPostDescription" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) ClearPresentPostDescription() *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.ClearPresentPostDescription()
	return eaguo
}

// SetFeederPostCode sets the "FeederPostCode" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetFeederPostCode(s string) *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.SetFeederPostCode(s)
	return eaguo
}

// SetNillableFeederPostCode sets the "FeederPostCode" field if the given value is not nil.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetNillableFeederPostCode(s *string) *ExamApplicationsGDSPAUpdateOne {
	if s != nil {
		eaguo.SetFeederPostCode(*s)
	}
	return eaguo
}

// ClearFeederPostCode clears the value of the "FeederPostCode" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) ClearFeederPostCode() *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.ClearFeederPostCode()
	return eaguo
}

// SetFeederPostDescription sets the "FeederPostDescription" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetFeederPostDescription(s string) *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.SetFeederPostDescription(s)
	return eaguo
}

// SetNillableFeederPostDescription sets the "FeederPostDescription" field if the given value is not nil.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetNillableFeederPostDescription(s *string) *ExamApplicationsGDSPAUpdateOne {
	if s != nil {
		eaguo.SetFeederPostDescription(*s)
	}
	return eaguo
}

// ClearFeederPostDescription clears the value of the "FeederPostDescription" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) ClearFeederPostDescription() *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.ClearFeederPostDescription()
	return eaguo
}

// SetFeederPostJoiningDate sets the "FeederPostJoiningDate" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetFeederPostJoiningDate(s string) *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.SetFeederPostJoiningDate(s)
	return eaguo
}

// SetNillableFeederPostJoiningDate sets the "FeederPostJoiningDate" field if the given value is not nil.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetNillableFeederPostJoiningDate(s *string) *ExamApplicationsGDSPAUpdateOne {
	if s != nil {
		eaguo.SetFeederPostJoiningDate(*s)
	}
	return eaguo
}

// ClearFeederPostJoiningDate clears the value of the "FeederPostJoiningDate" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) ClearFeederPostJoiningDate() *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.ClearFeederPostJoiningDate()
	return eaguo
}

// SetPresentDesignation sets the "PresentDesignation" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetPresentDesignation(s string) *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.SetPresentDesignation(s)
	return eaguo
}

// SetNillablePresentDesignation sets the "PresentDesignation" field if the given value is not nil.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetNillablePresentDesignation(s *string) *ExamApplicationsGDSPAUpdateOne {
	if s != nil {
		eaguo.SetPresentDesignation(*s)
	}
	return eaguo
}

// ClearPresentDesignation clears the value of the "PresentDesignation" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) ClearPresentDesignation() *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.ClearPresentDesignation()
	return eaguo
}

// SetEducationCode sets the "EducationCode" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetEducationCode(s string) *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.SetEducationCode(s)
	return eaguo
}

// SetNillableEducationCode sets the "EducationCode" field if the given value is not nil.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetNillableEducationCode(s *string) *ExamApplicationsGDSPAUpdateOne {
	if s != nil {
		eaguo.SetEducationCode(*s)
	}
	return eaguo
}

// ClearEducationCode clears the value of the "EducationCode" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) ClearEducationCode() *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.ClearEducationCode()
	return eaguo
}

// SetEducationDescription sets the "EducationDescription" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetEducationDescription(s string) *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.SetEducationDescription(s)
	return eaguo
}

// SetNillableEducationDescription sets the "EducationDescription" field if the given value is not nil.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetNillableEducationDescription(s *string) *ExamApplicationsGDSPAUpdateOne {
	if s != nil {
		eaguo.SetEducationDescription(*s)
	}
	return eaguo
}

// ClearEducationDescription clears the value of the "EducationDescription" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) ClearEducationDescription() *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.ClearEducationDescription()
	return eaguo
}

// SetFacilityUniqueID sets the "FacilityUniqueID" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetFacilityUniqueID(s string) *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.SetFacilityUniqueID(s)
	return eaguo
}

// SetNillableFacilityUniqueID sets the "FacilityUniqueID" field if the given value is not nil.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetNillableFacilityUniqueID(s *string) *ExamApplicationsGDSPAUpdateOne {
	if s != nil {
		eaguo.SetFacilityUniqueID(*s)
	}
	return eaguo
}

// ClearFacilityUniqueID clears the value of the "FacilityUniqueID" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) ClearFacilityUniqueID() *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.ClearFacilityUniqueID()
	return eaguo
}

// SetWorkingOfficePincode sets the "WorkingOfficePincode" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetWorkingOfficePincode(i int32) *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.ResetWorkingOfficePincode()
	eaguo.mutation.SetWorkingOfficePincode(i)
	return eaguo
}

// SetNillableWorkingOfficePincode sets the "WorkingOfficePincode" field if the given value is not nil.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetNillableWorkingOfficePincode(i *int32) *ExamApplicationsGDSPAUpdateOne {
	if i != nil {
		eaguo.SetWorkingOfficePincode(*i)
	}
	return eaguo
}

// AddWorkingOfficePincode adds i to the "WorkingOfficePincode" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) AddWorkingOfficePincode(i int32) *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.AddWorkingOfficePincode(i)
	return eaguo
}

// ClearWorkingOfficePincode clears the value of the "WorkingOfficePincode" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) ClearWorkingOfficePincode() *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.ClearWorkingOfficePincode()
	return eaguo
}

// SetWorkingOfficeFacilityID sets the "WorkingOfficeFacilityID" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetWorkingOfficeFacilityID(s string) *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.SetWorkingOfficeFacilityID(s)
	return eaguo
}

// SetNillableWorkingOfficeFacilityID sets the "WorkingOfficeFacilityID" field if the given value is not nil.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetNillableWorkingOfficeFacilityID(s *string) *ExamApplicationsGDSPAUpdateOne {
	if s != nil {
		eaguo.SetWorkingOfficeFacilityID(*s)
	}
	return eaguo
}

// ClearWorkingOfficeFacilityID clears the value of the "WorkingOfficeFacilityID" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) ClearWorkingOfficeFacilityID() *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.ClearWorkingOfficeFacilityID()
	return eaguo
}

// SetWorkingOfficeName sets the "WorkingOfficeName" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetWorkingOfficeName(s string) *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.SetWorkingOfficeName(s)
	return eaguo
}

// SetNillableWorkingOfficeName sets the "WorkingOfficeName" field if the given value is not nil.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetNillableWorkingOfficeName(s *string) *ExamApplicationsGDSPAUpdateOne {
	if s != nil {
		eaguo.SetWorkingOfficeName(*s)
	}
	return eaguo
}

// ClearWorkingOfficeName clears the value of the "WorkingOfficeName" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) ClearWorkingOfficeName() *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.ClearWorkingOfficeName()
	return eaguo
}

// SetWorkingOfficeCircleFacilityID sets the "WorkingOfficeCircleFacilityID" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetWorkingOfficeCircleFacilityID(s string) *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.SetWorkingOfficeCircleFacilityID(s)
	return eaguo
}

// SetNillableWorkingOfficeCircleFacilityID sets the "WorkingOfficeCircleFacilityID" field if the given value is not nil.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetNillableWorkingOfficeCircleFacilityID(s *string) *ExamApplicationsGDSPAUpdateOne {
	if s != nil {
		eaguo.SetWorkingOfficeCircleFacilityID(*s)
	}
	return eaguo
}

// ClearWorkingOfficeCircleFacilityID clears the value of the "WorkingOfficeCircleFacilityID" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) ClearWorkingOfficeCircleFacilityID() *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.ClearWorkingOfficeCircleFacilityID()
	return eaguo
}

// SetWorkingOfficeCircleName sets the "WorkingOfficeCircleName" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetWorkingOfficeCircleName(s string) *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.SetWorkingOfficeCircleName(s)
	return eaguo
}

// SetNillableWorkingOfficeCircleName sets the "WorkingOfficeCircleName" field if the given value is not nil.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetNillableWorkingOfficeCircleName(s *string) *ExamApplicationsGDSPAUpdateOne {
	if s != nil {
		eaguo.SetWorkingOfficeCircleName(*s)
	}
	return eaguo
}

// ClearWorkingOfficeCircleName clears the value of the "WorkingOfficeCircleName" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) ClearWorkingOfficeCircleName() *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.ClearWorkingOfficeCircleName()
	return eaguo
}

// SetWorkingOfficeRegionFacilityID sets the "WorkingOfficeRegionFacilityID" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetWorkingOfficeRegionFacilityID(s string) *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.SetWorkingOfficeRegionFacilityID(s)
	return eaguo
}

// SetNillableWorkingOfficeRegionFacilityID sets the "WorkingOfficeRegionFacilityID" field if the given value is not nil.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetNillableWorkingOfficeRegionFacilityID(s *string) *ExamApplicationsGDSPAUpdateOne {
	if s != nil {
		eaguo.SetWorkingOfficeRegionFacilityID(*s)
	}
	return eaguo
}

// ClearWorkingOfficeRegionFacilityID clears the value of the "WorkingOfficeRegionFacilityID" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) ClearWorkingOfficeRegionFacilityID() *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.ClearWorkingOfficeRegionFacilityID()
	return eaguo
}

// SetWorkingOfficeRegionName sets the "WorkingOfficeRegionName" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetWorkingOfficeRegionName(s string) *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.SetWorkingOfficeRegionName(s)
	return eaguo
}

// SetNillableWorkingOfficeRegionName sets the "WorkingOfficeRegionName" field if the given value is not nil.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetNillableWorkingOfficeRegionName(s *string) *ExamApplicationsGDSPAUpdateOne {
	if s != nil {
		eaguo.SetWorkingOfficeRegionName(*s)
	}
	return eaguo
}

// ClearWorkingOfficeRegionName clears the value of the "WorkingOfficeRegionName" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) ClearWorkingOfficeRegionName() *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.ClearWorkingOfficeRegionName()
	return eaguo
}

// SetWorkingOfficeDivisionFacilityID sets the "WorkingOfficeDivisionFacilityID" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetWorkingOfficeDivisionFacilityID(s string) *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.SetWorkingOfficeDivisionFacilityID(s)
	return eaguo
}

// SetNillableWorkingOfficeDivisionFacilityID sets the "WorkingOfficeDivisionFacilityID" field if the given value is not nil.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetNillableWorkingOfficeDivisionFacilityID(s *string) *ExamApplicationsGDSPAUpdateOne {
	if s != nil {
		eaguo.SetWorkingOfficeDivisionFacilityID(*s)
	}
	return eaguo
}

// ClearWorkingOfficeDivisionFacilityID clears the value of the "WorkingOfficeDivisionFacilityID" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) ClearWorkingOfficeDivisionFacilityID() *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.ClearWorkingOfficeDivisionFacilityID()
	return eaguo
}

// SetWorkingOfficeDivisionName sets the "WorkingOfficeDivisionName" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetWorkingOfficeDivisionName(s string) *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.SetWorkingOfficeDivisionName(s)
	return eaguo
}

// SetNillableWorkingOfficeDivisionName sets the "WorkingOfficeDivisionName" field if the given value is not nil.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetNillableWorkingOfficeDivisionName(s *string) *ExamApplicationsGDSPAUpdateOne {
	if s != nil {
		eaguo.SetWorkingOfficeDivisionName(*s)
	}
	return eaguo
}

// ClearWorkingOfficeDivisionName clears the value of the "WorkingOfficeDivisionName" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) ClearWorkingOfficeDivisionName() *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.ClearWorkingOfficeDivisionName()
	return eaguo
}

// SetReportingOfficeFacilityID sets the "ReportingOfficeFacilityID" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetReportingOfficeFacilityID(s string) *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.SetReportingOfficeFacilityID(s)
	return eaguo
}

// SetNillableReportingOfficeFacilityID sets the "ReportingOfficeFacilityID" field if the given value is not nil.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetNillableReportingOfficeFacilityID(s *string) *ExamApplicationsGDSPAUpdateOne {
	if s != nil {
		eaguo.SetReportingOfficeFacilityID(*s)
	}
	return eaguo
}

// ClearReportingOfficeFacilityID clears the value of the "ReportingOfficeFacilityID" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) ClearReportingOfficeFacilityID() *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.ClearReportingOfficeFacilityID()
	return eaguo
}

// SetReportingOfficeName sets the "ReportingOfficeName" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetReportingOfficeName(s string) *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.SetReportingOfficeName(s)
	return eaguo
}

// SetNillableReportingOfficeName sets the "ReportingOfficeName" field if the given value is not nil.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetNillableReportingOfficeName(s *string) *ExamApplicationsGDSPAUpdateOne {
	if s != nil {
		eaguo.SetReportingOfficeName(*s)
	}
	return eaguo
}

// ClearReportingOfficeName clears the value of the "ReportingOfficeName" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) ClearReportingOfficeName() *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.ClearReportingOfficeName()
	return eaguo
}

// SetLienControllingOfficeID sets the "LienControllingOfficeID" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetLienControllingOfficeID(s string) *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.SetLienControllingOfficeID(s)
	return eaguo
}

// SetNillableLienControllingOfficeID sets the "LienControllingOfficeID" field if the given value is not nil.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetNillableLienControllingOfficeID(s *string) *ExamApplicationsGDSPAUpdateOne {
	if s != nil {
		eaguo.SetLienControllingOfficeID(*s)
	}
	return eaguo
}

// ClearLienControllingOfficeID clears the value of the "LienControllingOfficeID" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) ClearLienControllingOfficeID() *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.ClearLienControllingOfficeID()
	return eaguo
}

// SetLienControllingOfficeName sets the "LienControllingOfficeName" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetLienControllingOfficeName(s string) *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.SetLienControllingOfficeName(s)
	return eaguo
}

// SetNillableLienControllingOfficeName sets the "LienControllingOfficeName" field if the given value is not nil.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetNillableLienControllingOfficeName(s *string) *ExamApplicationsGDSPAUpdateOne {
	if s != nil {
		eaguo.SetLienControllingOfficeName(*s)
	}
	return eaguo
}

// ClearLienControllingOfficeName clears the value of the "LienControllingOfficeName" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) ClearLienControllingOfficeName() *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.ClearLienControllingOfficeName()
	return eaguo
}

// SetInDeputation sets the "InDeputation" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetInDeputation(s string) *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.SetInDeputation(s)
	return eaguo
}

// SetNillableInDeputation sets the "InDeputation" field if the given value is not nil.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetNillableInDeputation(s *string) *ExamApplicationsGDSPAUpdateOne {
	if s != nil {
		eaguo.SetInDeputation(*s)
	}
	return eaguo
}

// ClearInDeputation clears the value of the "InDeputation" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) ClearInDeputation() *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.ClearInDeputation()
	return eaguo
}

// SetDeputationType sets the "DeputationType" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetDeputationType(s string) *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.SetDeputationType(s)
	return eaguo
}

// SetNillableDeputationType sets the "DeputationType" field if the given value is not nil.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetNillableDeputationType(s *string) *ExamApplicationsGDSPAUpdateOne {
	if s != nil {
		eaguo.SetDeputationType(*s)
	}
	return eaguo
}

// ClearDeputationType clears the value of the "DeputationType" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) ClearDeputationType() *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.ClearDeputationType()
	return eaguo
}

// SetDeputationOfficeUniqueId sets the "DeputationOfficeUniqueId" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetDeputationOfficeUniqueId(s string) *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.SetDeputationOfficeUniqueId(s)
	return eaguo
}

// SetNillableDeputationOfficeUniqueId sets the "DeputationOfficeUniqueId" field if the given value is not nil.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetNillableDeputationOfficeUniqueId(s *string) *ExamApplicationsGDSPAUpdateOne {
	if s != nil {
		eaguo.SetDeputationOfficeUniqueId(*s)
	}
	return eaguo
}

// ClearDeputationOfficeUniqueId clears the value of the "DeputationOfficeUniqueId" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) ClearDeputationOfficeUniqueId() *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.ClearDeputationOfficeUniqueId()
	return eaguo
}

// SetDeputationOfficeFacilityID sets the "DeputationOfficeFacilityID" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetDeputationOfficeFacilityID(s string) *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.SetDeputationOfficeFacilityID(s)
	return eaguo
}

// SetNillableDeputationOfficeFacilityID sets the "DeputationOfficeFacilityID" field if the given value is not nil.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetNillableDeputationOfficeFacilityID(s *string) *ExamApplicationsGDSPAUpdateOne {
	if s != nil {
		eaguo.SetDeputationOfficeFacilityID(*s)
	}
	return eaguo
}

// ClearDeputationOfficeFacilityID clears the value of the "DeputationOfficeFacilityID" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) ClearDeputationOfficeFacilityID() *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.ClearDeputationOfficeFacilityID()
	return eaguo
}

// SetDeputationOfficeName sets the "DeputationOfficeName" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetDeputationOfficeName(s string) *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.SetDeputationOfficeName(s)
	return eaguo
}

// SetNillableDeputationOfficeName sets the "DeputationOfficeName" field if the given value is not nil.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetNillableDeputationOfficeName(s *string) *ExamApplicationsGDSPAUpdateOne {
	if s != nil {
		eaguo.SetDeputationOfficeName(*s)
	}
	return eaguo
}

// ClearDeputationOfficeName clears the value of the "DeputationOfficeName" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) ClearDeputationOfficeName() *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.ClearDeputationOfficeName()
	return eaguo
}

// SetDeputationControllingOfficeID sets the "DeputationControllingOfficeID" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetDeputationControllingOfficeID(s string) *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.SetDeputationControllingOfficeID(s)
	return eaguo
}

// SetNillableDeputationControllingOfficeID sets the "DeputationControllingOfficeID" field if the given value is not nil.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetNillableDeputationControllingOfficeID(s *string) *ExamApplicationsGDSPAUpdateOne {
	if s != nil {
		eaguo.SetDeputationControllingOfficeID(*s)
	}
	return eaguo
}

// ClearDeputationControllingOfficeID clears the value of the "DeputationControllingOfficeID" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) ClearDeputationControllingOfficeID() *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.ClearDeputationControllingOfficeID()
	return eaguo
}

// SetDeputationControllingOfficeName sets the "DeputationControllingOfficeName" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetDeputationControllingOfficeName(s string) *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.SetDeputationControllingOfficeName(s)
	return eaguo
}

// SetNillableDeputationControllingOfficeName sets the "DeputationControllingOfficeName" field if the given value is not nil.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetNillableDeputationControllingOfficeName(s *string) *ExamApplicationsGDSPAUpdateOne {
	if s != nil {
		eaguo.SetDeputationControllingOfficeName(*s)
	}
	return eaguo
}

// ClearDeputationControllingOfficeName clears the value of the "DeputationControllingOfficeName" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) ClearDeputationControllingOfficeName() *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.ClearDeputationControllingOfficeName()
	return eaguo
}

// SetControllingOfficeFacilityID sets the "ControllingOfficeFacilityID" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetControllingOfficeFacilityID(s string) *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.SetControllingOfficeFacilityID(s)
	return eaguo
}

// SetNillableControllingOfficeFacilityID sets the "ControllingOfficeFacilityID" field if the given value is not nil.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetNillableControllingOfficeFacilityID(s *string) *ExamApplicationsGDSPAUpdateOne {
	if s != nil {
		eaguo.SetControllingOfficeFacilityID(*s)
	}
	return eaguo
}

// ClearControllingOfficeFacilityID clears the value of the "ControllingOfficeFacilityID" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) ClearControllingOfficeFacilityID() *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.ClearControllingOfficeFacilityID()
	return eaguo
}

// SetControllingOfficeName sets the "ControllingOfficeName" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetControllingOfficeName(s string) *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.SetControllingOfficeName(s)
	return eaguo
}

// SetNillableControllingOfficeName sets the "ControllingOfficeName" field if the given value is not nil.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetNillableControllingOfficeName(s *string) *ExamApplicationsGDSPAUpdateOne {
	if s != nil {
		eaguo.SetControllingOfficeName(*s)
	}
	return eaguo
}

// ClearControllingOfficeName clears the value of the "ControllingOfficeName" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) ClearControllingOfficeName() *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.ClearControllingOfficeName()
	return eaguo
}

// SetSubdivisionOfficeFacilityID sets the "SubdivisionOfficeFacilityID" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetSubdivisionOfficeFacilityID(s string) *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.SetSubdivisionOfficeFacilityID(s)
	return eaguo
}

// SetNillableSubdivisionOfficeFacilityID sets the "SubdivisionOfficeFacilityID" field if the given value is not nil.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetNillableSubdivisionOfficeFacilityID(s *string) *ExamApplicationsGDSPAUpdateOne {
	if s != nil {
		eaguo.SetSubdivisionOfficeFacilityID(*s)
	}
	return eaguo
}

// ClearSubdivisionOfficeFacilityID clears the value of the "SubdivisionOfficeFacilityID" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) ClearSubdivisionOfficeFacilityID() *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.ClearSubdivisionOfficeFacilityID()
	return eaguo
}

// SetSubdivisionOfficeName sets the "SubdivisionOfficeName" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetSubdivisionOfficeName(s string) *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.SetSubdivisionOfficeName(s)
	return eaguo
}

// SetNillableSubdivisionOfficeName sets the "SubdivisionOfficeName" field if the given value is not nil.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetNillableSubdivisionOfficeName(s *string) *ExamApplicationsGDSPAUpdateOne {
	if s != nil {
		eaguo.SetSubdivisionOfficeName(*s)
	}
	return eaguo
}

// ClearSubdivisionOfficeName clears the value of the "SubdivisionOfficeName" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) ClearSubdivisionOfficeName() *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.ClearSubdivisionOfficeName()
	return eaguo
}

// SetNodalOfficeFacilityID sets the "NodalOfficeFacilityID" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetNodalOfficeFacilityID(s string) *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.SetNodalOfficeFacilityID(s)
	return eaguo
}

// SetNillableNodalOfficeFacilityID sets the "NodalOfficeFacilityID" field if the given value is not nil.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetNillableNodalOfficeFacilityID(s *string) *ExamApplicationsGDSPAUpdateOne {
	if s != nil {
		eaguo.SetNodalOfficeFacilityID(*s)
	}
	return eaguo
}

// ClearNodalOfficeFacilityID clears the value of the "NodalOfficeFacilityID" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) ClearNodalOfficeFacilityID() *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.ClearNodalOfficeFacilityID()
	return eaguo
}

// SetNodalOfficeName sets the "NodalOfficeName" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetNodalOfficeName(s string) *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.SetNodalOfficeName(s)
	return eaguo
}

// SetNillableNodalOfficeName sets the "NodalOfficeName" field if the given value is not nil.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetNillableNodalOfficeName(s *string) *ExamApplicationsGDSPAUpdateOne {
	if s != nil {
		eaguo.SetNodalOfficeName(*s)
	}
	return eaguo
}

// ClearNodalOfficeName clears the value of the "NodalOfficeName" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) ClearNodalOfficeName() *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.ClearNodalOfficeName()
	return eaguo
}

// SetExamCityCenterCode sets the "ExamCityCenterCode" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetExamCityCenterCode(i int32) *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.SetExamCityCenterCode(i)
	return eaguo
}

// SetNillableExamCityCenterCode sets the "ExamCityCenterCode" field if the given value is not nil.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetNillableExamCityCenterCode(i *int32) *ExamApplicationsGDSPAUpdateOne {
	if i != nil {
		eaguo.SetExamCityCenterCode(*i)
	}
	return eaguo
}

// ClearExamCityCenterCode clears the value of the "ExamCityCenterCode" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) ClearExamCityCenterCode() *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.ClearExamCityCenterCode()
	return eaguo
}

// SetCenterFacilityId sets the "CenterFacilityId" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetCenterFacilityId(s string) *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.SetCenterFacilityId(s)
	return eaguo
}

// SetNillableCenterFacilityId sets the "CenterFacilityId" field if the given value is not nil.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetNillableCenterFacilityId(s *string) *ExamApplicationsGDSPAUpdateOne {
	if s != nil {
		eaguo.SetCenterFacilityId(*s)
	}
	return eaguo
}

// ClearCenterFacilityId clears the value of the "CenterFacilityId" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) ClearCenterFacilityId() *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.ClearCenterFacilityId()
	return eaguo
}

// SetCentrePreference sets the "CentrePreference" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetCentrePreference(s string) *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.SetCentrePreference(s)
	return eaguo
}

// SetNillableCentrePreference sets the "CentrePreference" field if the given value is not nil.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetNillableCentrePreference(s *string) *ExamApplicationsGDSPAUpdateOne {
	if s != nil {
		eaguo.SetCentrePreference(*s)
	}
	return eaguo
}

// ClearCentrePreference clears the value of the "CentrePreference" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) ClearCentrePreference() *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.ClearCentrePreference()
	return eaguo
}

// SetSignature sets the "Signature" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetSignature(s string) *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.SetSignature(s)
	return eaguo
}

// SetNillableSignature sets the "Signature" field if the given value is not nil.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetNillableSignature(s *string) *ExamApplicationsGDSPAUpdateOne {
	if s != nil {
		eaguo.SetSignature(*s)
	}
	return eaguo
}

// ClearSignature clears the value of the "Signature" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) ClearSignature() *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.ClearSignature()
	return eaguo
}

// SetPhoto sets the "Photo" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetPhoto(s string) *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.SetPhoto(s)
	return eaguo
}

// SetNillablePhoto sets the "Photo" field if the given value is not nil.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetNillablePhoto(s *string) *ExamApplicationsGDSPAUpdateOne {
	if s != nil {
		eaguo.SetPhoto(*s)
	}
	return eaguo
}

// ClearPhoto clears the value of the "Photo" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) ClearPhoto() *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.ClearPhoto()
	return eaguo
}

// SetSignaturePath sets the "SignaturePath" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetSignaturePath(s string) *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.SetSignaturePath(s)
	return eaguo
}

// SetNillableSignaturePath sets the "SignaturePath" field if the given value is not nil.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetNillableSignaturePath(s *string) *ExamApplicationsGDSPAUpdateOne {
	if s != nil {
		eaguo.SetSignaturePath(*s)
	}
	return eaguo
}

// ClearSignaturePath clears the value of the "SignaturePath" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) ClearSignaturePath() *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.ClearSignaturePath()
	return eaguo
}

// SetPhotoPath sets the "PhotoPath" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetPhotoPath(s string) *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.SetPhotoPath(s)
	return eaguo
}

// SetNillablePhotoPath sets the "PhotoPath" field if the given value is not nil.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetNillablePhotoPath(s *string) *ExamApplicationsGDSPAUpdateOne {
	if s != nil {
		eaguo.SetPhotoPath(*s)
	}
	return eaguo
}

// ClearPhotoPath clears the value of the "PhotoPath" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) ClearPhotoPath() *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.ClearPhotoPath()
	return eaguo
}

// SetCandidatePhoto sets the "CandidatePhoto" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetCandidatePhoto(b []byte) *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.SetCandidatePhoto(b)
	return eaguo
}

// ClearCandidatePhoto clears the value of the "CandidatePhoto" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) ClearCandidatePhoto() *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.ClearCandidatePhoto()
	return eaguo
}

// SetCandidateSignature sets the "CandidateSignature" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetCandidateSignature(b []byte) *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.SetCandidateSignature(b)
	return eaguo
}

// ClearCandidateSignature clears the value of the "CandidateSignature" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) ClearCandidateSignature() *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.ClearCandidateSignature()
	return eaguo
}

// SetTempHallTicket sets the "TempHallTicket" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetTempHallTicket(s string) *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.SetTempHallTicket(s)
	return eaguo
}

// SetNillableTempHallTicket sets the "TempHallTicket" field if the given value is not nil.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetNillableTempHallTicket(s *string) *ExamApplicationsGDSPAUpdateOne {
	if s != nil {
		eaguo.SetTempHallTicket(*s)
	}
	return eaguo
}

// ClearTempHallTicket clears the value of the "TempHallTicket" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) ClearTempHallTicket() *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.ClearTempHallTicket()
	return eaguo
}

// SetCandidateRemarks sets the "CandidateRemarks" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetCandidateRemarks(s string) *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.SetCandidateRemarks(s)
	return eaguo
}

// SetNillableCandidateRemarks sets the "CandidateRemarks" field if the given value is not nil.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetNillableCandidateRemarks(s *string) *ExamApplicationsGDSPAUpdateOne {
	if s != nil {
		eaguo.SetCandidateRemarks(*s)
	}
	return eaguo
}

// ClearCandidateRemarks clears the value of the "CandidateRemarks" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) ClearCandidateRemarks() *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.ClearCandidateRemarks()
	return eaguo
}

// SetVAGeneralRemarks sets the "VAGeneralRemarks" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetVAGeneralRemarks(s string) *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.SetVAGeneralRemarks(s)
	return eaguo
}

// SetNillableVAGeneralRemarks sets the "VAGeneralRemarks" field if the given value is not nil.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetNillableVAGeneralRemarks(s *string) *ExamApplicationsGDSPAUpdateOne {
	if s != nil {
		eaguo.SetVAGeneralRemarks(*s)
	}
	return eaguo
}

// ClearVAGeneralRemarks clears the value of the "VAGeneralRemarks" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) ClearVAGeneralRemarks() *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.ClearVAGeneralRemarks()
	return eaguo
}

// SetCAGeneralRemarks sets the "CAGeneralRemarks" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetCAGeneralRemarks(s string) *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.SetCAGeneralRemarks(s)
	return eaguo
}

// SetNillableCAGeneralRemarks sets the "CAGeneralRemarks" field if the given value is not nil.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetNillableCAGeneralRemarks(s *string) *ExamApplicationsGDSPAUpdateOne {
	if s != nil {
		eaguo.SetCAGeneralRemarks(*s)
	}
	return eaguo
}

// ClearCAGeneralRemarks clears the value of the "CAGeneralRemarks" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) ClearCAGeneralRemarks() *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.ClearCAGeneralRemarks()
	return eaguo
}

// SetNAGeneralRemarks sets the "NAGeneralRemarks" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetNAGeneralRemarks(s string) *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.SetNAGeneralRemarks(s)
	return eaguo
}

// SetNillableNAGeneralRemarks sets the "NAGeneralRemarks" field if the given value is not nil.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetNillableNAGeneralRemarks(s *string) *ExamApplicationsGDSPAUpdateOne {
	if s != nil {
		eaguo.SetNAGeneralRemarks(*s)
	}
	return eaguo
}

// ClearNAGeneralRemarks clears the value of the "NAGeneralRemarks" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) ClearNAGeneralRemarks() *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.ClearNAGeneralRemarks()
	return eaguo
}

// SetApplicationStatus sets the "ApplicationStatus" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetApplicationStatus(s string) *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.SetApplicationStatus(s)
	return eaguo
}

// SetNillableApplicationStatus sets the "ApplicationStatus" field if the given value is not nil.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetNillableApplicationStatus(s *string) *ExamApplicationsGDSPAUpdateOne {
	if s != nil {
		eaguo.SetApplicationStatus(*s)
	}
	return eaguo
}

// ClearApplicationStatus clears the value of the "ApplicationStatus" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) ClearApplicationStatus() *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.ClearApplicationStatus()
	return eaguo
}

// SetStatus sets the "Status" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetStatus(s string) *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.SetStatus(s)
	return eaguo
}

// SetNillableStatus sets the "Status" field if the given value is not nil.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetNillableStatus(s *string) *ExamApplicationsGDSPAUpdateOne {
	if s != nil {
		eaguo.SetStatus(*s)
	}
	return eaguo
}

// ClearStatus clears the value of the "Status" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) ClearStatus() *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.ClearStatus()
	return eaguo
}

// SetRecommendedStatus sets the "RecommendedStatus" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetRecommendedStatus(s string) *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.SetRecommendedStatus(s)
	return eaguo
}

// SetNillableRecommendedStatus sets the "RecommendedStatus" field if the given value is not nil.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetNillableRecommendedStatus(s *string) *ExamApplicationsGDSPAUpdateOne {
	if s != nil {
		eaguo.SetRecommendedStatus(*s)
	}
	return eaguo
}

// ClearRecommendedStatus clears the value of the "RecommendedStatus" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) ClearRecommendedStatus() *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.ClearRecommendedStatus()
	return eaguo
}

// SetDesignationID sets the "DesignationID" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetDesignationID(s string) *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.SetDesignationID(s)
	return eaguo
}

// SetNillableDesignationID sets the "DesignationID" field if the given value is not nil.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetNillableDesignationID(s *string) *ExamApplicationsGDSPAUpdateOne {
	if s != nil {
		eaguo.SetDesignationID(*s)
	}
	return eaguo
}

// ClearDesignationID clears the value of the "DesignationID" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) ClearDesignationID() *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.ClearDesignationID()
	return eaguo
}

// SetVAUserId sets the "VA_UserId" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetVAUserId(i int32) *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.ResetVAUserId()
	eaguo.mutation.SetVAUserId(i)
	return eaguo
}

// SetNillableVAUserId sets the "VA_UserId" field if the given value is not nil.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetNillableVAUserId(i *int32) *ExamApplicationsGDSPAUpdateOne {
	if i != nil {
		eaguo.SetVAUserId(*i)
	}
	return eaguo
}

// AddVAUserId adds i to the "VA_UserId" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) AddVAUserId(i int32) *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.AddVAUserId(i)
	return eaguo
}

// ClearVAUserId clears the value of the "VA_UserId" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) ClearVAUserId() *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.ClearVAUserId()
	return eaguo
}

// SetVAUserName sets the "VA_UserName" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetVAUserName(s string) *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.SetVAUserName(s)
	return eaguo
}

// SetNillableVAUserName sets the "VA_UserName" field if the given value is not nil.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetNillableVAUserName(s *string) *ExamApplicationsGDSPAUpdateOne {
	if s != nil {
		eaguo.SetVAUserName(*s)
	}
	return eaguo
}

// ClearVAUserName clears the value of the "VA_UserName" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) ClearVAUserName() *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.ClearVAUserName()
	return eaguo
}

// SetVAEmployeeID sets the "VA_EmployeeID" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetVAEmployeeID(s string) *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.SetVAEmployeeID(s)
	return eaguo
}

// SetNillableVAEmployeeID sets the "VA_EmployeeID" field if the given value is not nil.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetNillableVAEmployeeID(s *string) *ExamApplicationsGDSPAUpdateOne {
	if s != nil {
		eaguo.SetVAEmployeeID(*s)
	}
	return eaguo
}

// ClearVAEmployeeID clears the value of the "VA_EmployeeID" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) ClearVAEmployeeID() *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.ClearVAEmployeeID()
	return eaguo
}

// SetVAEmployeeDesignation sets the "VA_EmployeeDesignation" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetVAEmployeeDesignation(s string) *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.SetVAEmployeeDesignation(s)
	return eaguo
}

// SetNillableVAEmployeeDesignation sets the "VA_EmployeeDesignation" field if the given value is not nil.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetNillableVAEmployeeDesignation(s *string) *ExamApplicationsGDSPAUpdateOne {
	if s != nil {
		eaguo.SetVAEmployeeDesignation(*s)
	}
	return eaguo
}

// ClearVAEmployeeDesignation clears the value of the "VA_EmployeeDesignation" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) ClearVAEmployeeDesignation() *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.ClearVAEmployeeDesignation()
	return eaguo
}

// SetVARemarks sets the "VA_Remarks" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetVARemarks(s string) *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.SetVARemarks(s)
	return eaguo
}

// SetNillableVARemarks sets the "VA_Remarks" field if the given value is not nil.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetNillableVARemarks(s *string) *ExamApplicationsGDSPAUpdateOne {
	if s != nil {
		eaguo.SetVARemarks(*s)
	}
	return eaguo
}

// ClearVARemarks clears the value of the "VA_Remarks" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) ClearVARemarks() *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.ClearVARemarks()
	return eaguo
}

// SetVADate sets the "VA_Date" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetVADate(t time.Time) *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.SetVADate(t)
	return eaguo
}

// SetNillableVADate sets the "VA_Date" field if the given value is not nil.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetNillableVADate(t *time.Time) *ExamApplicationsGDSPAUpdateOne {
	if t != nil {
		eaguo.SetVADate(*t)
	}
	return eaguo
}

// ClearVADate clears the value of the "VA_Date" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) ClearVADate() *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.ClearVADate()
	return eaguo
}

// SetCAUserId sets the "CA_UserId" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetCAUserId(i int32) *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.ResetCAUserId()
	eaguo.mutation.SetCAUserId(i)
	return eaguo
}

// SetNillableCAUserId sets the "CA_UserId" field if the given value is not nil.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetNillableCAUserId(i *int32) *ExamApplicationsGDSPAUpdateOne {
	if i != nil {
		eaguo.SetCAUserId(*i)
	}
	return eaguo
}

// AddCAUserId adds i to the "CA_UserId" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) AddCAUserId(i int32) *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.AddCAUserId(i)
	return eaguo
}

// ClearCAUserId clears the value of the "CA_UserId" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) ClearCAUserId() *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.ClearCAUserId()
	return eaguo
}

// SetCAUserName sets the "CA_UserName" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetCAUserName(s string) *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.SetCAUserName(s)
	return eaguo
}

// SetNillableCAUserName sets the "CA_UserName" field if the given value is not nil.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetNillableCAUserName(s *string) *ExamApplicationsGDSPAUpdateOne {
	if s != nil {
		eaguo.SetCAUserName(*s)
	}
	return eaguo
}

// ClearCAUserName clears the value of the "CA_UserName" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) ClearCAUserName() *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.ClearCAUserName()
	return eaguo
}

// SetCAEmployeeID sets the "CA_EmployeeID" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetCAEmployeeID(s string) *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.SetCAEmployeeID(s)
	return eaguo
}

// SetNillableCAEmployeeID sets the "CA_EmployeeID" field if the given value is not nil.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetNillableCAEmployeeID(s *string) *ExamApplicationsGDSPAUpdateOne {
	if s != nil {
		eaguo.SetCAEmployeeID(*s)
	}
	return eaguo
}

// ClearCAEmployeeID clears the value of the "CA_EmployeeID" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) ClearCAEmployeeID() *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.ClearCAEmployeeID()
	return eaguo
}

// SetCAEmployeeDesignation sets the "CA_EmployeeDesignation" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetCAEmployeeDesignation(s string) *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.SetCAEmployeeDesignation(s)
	return eaguo
}

// SetNillableCAEmployeeDesignation sets the "CA_EmployeeDesignation" field if the given value is not nil.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetNillableCAEmployeeDesignation(s *string) *ExamApplicationsGDSPAUpdateOne {
	if s != nil {
		eaguo.SetCAEmployeeDesignation(*s)
	}
	return eaguo
}

// ClearCAEmployeeDesignation clears the value of the "CA_EmployeeDesignation" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) ClearCAEmployeeDesignation() *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.ClearCAEmployeeDesignation()
	return eaguo
}

// SetCARemarks sets the "CA_Remarks" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetCARemarks(s string) *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.SetCARemarks(s)
	return eaguo
}

// SetNillableCARemarks sets the "CA_Remarks" field if the given value is not nil.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetNillableCARemarks(s *string) *ExamApplicationsGDSPAUpdateOne {
	if s != nil {
		eaguo.SetCARemarks(*s)
	}
	return eaguo
}

// ClearCARemarks clears the value of the "CA_Remarks" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) ClearCARemarks() *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.ClearCARemarks()
	return eaguo
}

// SetCADate sets the "CA_Date" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetCADate(t time.Time) *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.SetCADate(t)
	return eaguo
}

// SetNillableCADate sets the "CA_Date" field if the given value is not nil.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetNillableCADate(t *time.Time) *ExamApplicationsGDSPAUpdateOne {
	if t != nil {
		eaguo.SetCADate(*t)
	}
	return eaguo
}

// ClearCADate clears the value of the "CA_Date" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) ClearCADate() *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.ClearCADate()
	return eaguo
}

// SetNAUserId sets the "NA_UserId" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetNAUserId(i int32) *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.ResetNAUserId()
	eaguo.mutation.SetNAUserId(i)
	return eaguo
}

// SetNillableNAUserId sets the "NA_UserId" field if the given value is not nil.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetNillableNAUserId(i *int32) *ExamApplicationsGDSPAUpdateOne {
	if i != nil {
		eaguo.SetNAUserId(*i)
	}
	return eaguo
}

// AddNAUserId adds i to the "NA_UserId" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) AddNAUserId(i int32) *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.AddNAUserId(i)
	return eaguo
}

// ClearNAUserId clears the value of the "NA_UserId" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) ClearNAUserId() *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.ClearNAUserId()
	return eaguo
}

// SetNAUserName sets the "NA_UserName" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetNAUserName(s string) *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.SetNAUserName(s)
	return eaguo
}

// SetNillableNAUserName sets the "NA_UserName" field if the given value is not nil.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetNillableNAUserName(s *string) *ExamApplicationsGDSPAUpdateOne {
	if s != nil {
		eaguo.SetNAUserName(*s)
	}
	return eaguo
}

// ClearNAUserName clears the value of the "NA_UserName" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) ClearNAUserName() *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.ClearNAUserName()
	return eaguo
}

// SetNAEmployeeID sets the "NA_EmployeeID" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetNAEmployeeID(s string) *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.SetNAEmployeeID(s)
	return eaguo
}

// SetNillableNAEmployeeID sets the "NA_EmployeeID" field if the given value is not nil.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetNillableNAEmployeeID(s *string) *ExamApplicationsGDSPAUpdateOne {
	if s != nil {
		eaguo.SetNAEmployeeID(*s)
	}
	return eaguo
}

// ClearNAEmployeeID clears the value of the "NA_EmployeeID" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) ClearNAEmployeeID() *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.ClearNAEmployeeID()
	return eaguo
}

// SetNAEmployeeDesignation sets the "NA_EmployeeDesignation" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetNAEmployeeDesignation(s string) *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.SetNAEmployeeDesignation(s)
	return eaguo
}

// SetNillableNAEmployeeDesignation sets the "NA_EmployeeDesignation" field if the given value is not nil.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetNillableNAEmployeeDesignation(s *string) *ExamApplicationsGDSPAUpdateOne {
	if s != nil {
		eaguo.SetNAEmployeeDesignation(*s)
	}
	return eaguo
}

// ClearNAEmployeeDesignation clears the value of the "NA_EmployeeDesignation" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) ClearNAEmployeeDesignation() *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.ClearNAEmployeeDesignation()
	return eaguo
}

// SetNARemarks sets the "NA_Remarks" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetNARemarks(s string) *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.SetNARemarks(s)
	return eaguo
}

// SetNillableNARemarks sets the "NA_Remarks" field if the given value is not nil.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetNillableNARemarks(s *string) *ExamApplicationsGDSPAUpdateOne {
	if s != nil {
		eaguo.SetNARemarks(*s)
	}
	return eaguo
}

// ClearNARemarks clears the value of the "NA_Remarks" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) ClearNARemarks() *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.ClearNARemarks()
	return eaguo
}

// SetNADate sets the "NA_Date" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetNADate(t time.Time) *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.SetNADate(t)
	return eaguo
}

// SetNillableNADate sets the "NA_Date" field if the given value is not nil.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetNillableNADate(t *time.Time) *ExamApplicationsGDSPAUpdateOne {
	if t != nil {
		eaguo.SetNADate(*t)
	}
	return eaguo
}

// ClearNADate clears the value of the "NA_Date" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) ClearNADate() *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.ClearNADate()
	return eaguo
}

// SetAppliactionRemarks sets the "AppliactionRemarks" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetAppliactionRemarks(s string) *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.SetAppliactionRemarks(s)
	return eaguo
}

// SetNillableAppliactionRemarks sets the "AppliactionRemarks" field if the given value is not nil.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetNillableAppliactionRemarks(s *string) *ExamApplicationsGDSPAUpdateOne {
	if s != nil {
		eaguo.SetAppliactionRemarks(*s)
	}
	return eaguo
}

// ClearAppliactionRemarks clears the value of the "AppliactionRemarks" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) ClearAppliactionRemarks() *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.ClearAppliactionRemarks()
	return eaguo
}

// SetCadrePreferences sets the "CadrePreferences" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetCadrePreferences(i []interface{}) *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.SetCadrePreferences(i)
	return eaguo
}

// AppendCadrePreferences appends i to the "CadrePreferences" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) AppendCadrePreferences(i []interface{}) *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.AppendCadrePreferences(i)
	return eaguo
}

// ClearCadrePreferences clears the value of the "CadrePreferences" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) ClearCadrePreferences() *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.ClearCadrePreferences()
	return eaguo
}

// SetCAPreviousRemarks sets the "CAPreviousRemarks" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetCAPreviousRemarks(s string) *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.SetCAPreviousRemarks(s)
	return eaguo
}

// SetNillableCAPreviousRemarks sets the "CAPreviousRemarks" field if the given value is not nil.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetNillableCAPreviousRemarks(s *string) *ExamApplicationsGDSPAUpdateOne {
	if s != nil {
		eaguo.SetCAPreviousRemarks(*s)
	}
	return eaguo
}

// ClearCAPreviousRemarks clears the value of the "CAPreviousRemarks" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) ClearCAPreviousRemarks() *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.ClearCAPreviousRemarks()
	return eaguo
}

// SetGenerateHallTicketFlag sets the "GenerateHallTicketFlag" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetGenerateHallTicketFlag(b bool) *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.SetGenerateHallTicketFlag(b)
	return eaguo
}

// SetNillableGenerateHallTicketFlag sets the "GenerateHallTicketFlag" field if the given value is not nil.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetNillableGenerateHallTicketFlag(b *bool) *ExamApplicationsGDSPAUpdateOne {
	if b != nil {
		eaguo.SetGenerateHallTicketFlag(*b)
	}
	return eaguo
}

// ClearGenerateHallTicketFlag clears the value of the "GenerateHallTicketFlag" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) ClearGenerateHallTicketFlag() *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.ClearGenerateHallTicketFlag()
	return eaguo
}

// SetPunishmentStatus sets the "PunishmentStatus" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetPunishmentStatus(b bool) *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.SetPunishmentStatus(b)
	return eaguo
}

// SetNillablePunishmentStatus sets the "PunishmentStatus" field if the given value is not nil.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetNillablePunishmentStatus(b *bool) *ExamApplicationsGDSPAUpdateOne {
	if b != nil {
		eaguo.SetPunishmentStatus(*b)
	}
	return eaguo
}

// ClearPunishmentStatus clears the value of the "PunishmentStatus" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) ClearPunishmentStatus() *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.ClearPunishmentStatus()
	return eaguo
}

// SetDisciplinaryCaseStatus sets the "DisciplinaryCaseStatus" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetDisciplinaryCaseStatus(b bool) *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.SetDisciplinaryCaseStatus(b)
	return eaguo
}

// SetNillableDisciplinaryCaseStatus sets the "DisciplinaryCaseStatus" field if the given value is not nil.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetNillableDisciplinaryCaseStatus(b *bool) *ExamApplicationsGDSPAUpdateOne {
	if b != nil {
		eaguo.SetDisciplinaryCaseStatus(*b)
	}
	return eaguo
}

// ClearDisciplinaryCaseStatus clears the value of the "DisciplinaryCaseStatus" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) ClearDisciplinaryCaseStatus() *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.ClearDisciplinaryCaseStatus()
	return eaguo
}

// SetHallTicketNumber sets the "HallTicketNumber" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetHallTicketNumber(s string) *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.SetHallTicketNumber(s)
	return eaguo
}

// SetNillableHallTicketNumber sets the "HallTicketNumber" field if the given value is not nil.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetNillableHallTicketNumber(s *string) *ExamApplicationsGDSPAUpdateOne {
	if s != nil {
		eaguo.SetHallTicketNumber(*s)
	}
	return eaguo
}

// ClearHallTicketNumber clears the value of the "HallTicketNumber" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) ClearHallTicketNumber() *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.ClearHallTicketNumber()
	return eaguo
}

// SetHallTicketGeneratedFlag sets the "HallTicketGeneratedFlag" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetHallTicketGeneratedFlag(b bool) *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.SetHallTicketGeneratedFlag(b)
	return eaguo
}

// SetNillableHallTicketGeneratedFlag sets the "HallTicketGeneratedFlag" field if the given value is not nil.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetNillableHallTicketGeneratedFlag(b *bool) *ExamApplicationsGDSPAUpdateOne {
	if b != nil {
		eaguo.SetHallTicketGeneratedFlag(*b)
	}
	return eaguo
}

// ClearHallTicketGeneratedFlag clears the value of the "HallTicketGeneratedFlag" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) ClearHallTicketGeneratedFlag() *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.ClearHallTicketGeneratedFlag()
	return eaguo
}

// SetGenerateHallTicketFlagByNO sets the "GenerateHallTicketFlagByNO" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetGenerateHallTicketFlagByNO(b bool) *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.SetGenerateHallTicketFlagByNO(b)
	return eaguo
}

// SetNillableGenerateHallTicketFlagByNO sets the "GenerateHallTicketFlagByNO" field if the given value is not nil.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetNillableGenerateHallTicketFlagByNO(b *bool) *ExamApplicationsGDSPAUpdateOne {
	if b != nil {
		eaguo.SetGenerateHallTicketFlagByNO(*b)
	}
	return eaguo
}

// ClearGenerateHallTicketFlagByNO clears the value of the "GenerateHallTicketFlagByNO" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) ClearGenerateHallTicketFlagByNO() *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.ClearGenerateHallTicketFlagByNO()
	return eaguo
}

// SetHallTicketGeneratedDate sets the "HallTicketGeneratedDate" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetHallTicketGeneratedDate(t time.Time) *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.SetHallTicketGeneratedDate(t)
	return eaguo
}

// SetNillableHallTicketGeneratedDate sets the "HallTicketGeneratedDate" field if the given value is not nil.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetNillableHallTicketGeneratedDate(t *time.Time) *ExamApplicationsGDSPAUpdateOne {
	if t != nil {
		eaguo.SetHallTicketGeneratedDate(*t)
	}
	return eaguo
}

// ClearHallTicketGeneratedDate clears the value of the "HallTicketGeneratedDate" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) ClearHallTicketGeneratedDate() *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.ClearHallTicketGeneratedDate()
	return eaguo
}

// SetTemporaryHallTicket sets the "TemporaryHallTicket" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetTemporaryHallTicket(s string) *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.SetTemporaryHallTicket(s)
	return eaguo
}

// SetNillableTemporaryHallTicket sets the "TemporaryHallTicket" field if the given value is not nil.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetNillableTemporaryHallTicket(s *string) *ExamApplicationsGDSPAUpdateOne {
	if s != nil {
		eaguo.SetTemporaryHallTicket(*s)
	}
	return eaguo
}

// ClearTemporaryHallTicket clears the value of the "TemporaryHallTicket" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) ClearTemporaryHallTicket() *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.ClearTemporaryHallTicket()
	return eaguo
}

// SetOptionUsed sets the "OptionUsed" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetOptionUsed(s string) *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.SetOptionUsed(s)
	return eaguo
}

// SetNillableOptionUsed sets the "OptionUsed" field if the given value is not nil.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetNillableOptionUsed(s *string) *ExamApplicationsGDSPAUpdateOne {
	if s != nil {
		eaguo.SetOptionUsed(*s)
	}
	return eaguo
}

// ClearOptionUsed clears the value of the "OptionUsed" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) ClearOptionUsed() *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.ClearOptionUsed()
	return eaguo
}

// SetRemarks sets the "Remarks" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetRemarks(s string) *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.SetRemarks(s)
	return eaguo
}

// SetNillableRemarks sets the "Remarks" field if the given value is not nil.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetNillableRemarks(s *string) *ExamApplicationsGDSPAUpdateOne {
	if s != nil {
		eaguo.SetRemarks(*s)
	}
	return eaguo
}

// ClearRemarks clears the value of the "Remarks" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) ClearRemarks() *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.ClearRemarks()
	return eaguo
}

// SetCadre sets the "Cadre" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetCadre(s string) *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.SetCadre(s)
	return eaguo
}

// SetNillableCadre sets the "Cadre" field if the given value is not nil.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetNillableCadre(s *string) *ExamApplicationsGDSPAUpdateOne {
	if s != nil {
		eaguo.SetCadre(*s)
	}
	return eaguo
}

// ClearCadre clears the value of the "Cadre" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) ClearCadre() *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.ClearCadre()
	return eaguo
}

// SetEmployeePost sets the "EmployeePost" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetEmployeePost(s string) *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.SetEmployeePost(s)
	return eaguo
}

// SetNillableEmployeePost sets the "EmployeePost" field if the given value is not nil.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetNillableEmployeePost(s *string) *ExamApplicationsGDSPAUpdateOne {
	if s != nil {
		eaguo.SetEmployeePost(*s)
	}
	return eaguo
}

// ClearEmployeePost clears the value of the "EmployeePost" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) ClearEmployeePost() *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.ClearEmployeePost()
	return eaguo
}

// SetDOJInEligiblePost sets the "DOJInEligiblePost" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetDOJInEligiblePost(s string) *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.SetDOJInEligiblePost(s)
	return eaguo
}

// SetNillableDOJInEligiblePost sets the "DOJInEligiblePost" field if the given value is not nil.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetNillableDOJInEligiblePost(s *string) *ExamApplicationsGDSPAUpdateOne {
	if s != nil {
		eaguo.SetDOJInEligiblePost(*s)
	}
	return eaguo
}

// ClearDOJInEligiblePost clears the value of the "DOJInEligiblePost" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) ClearDOJInEligiblePost() *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.ClearDOJInEligiblePost()
	return eaguo
}

// SetDivisionPreferences sets the "DivisionPreferences" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetDivisionPreferences(i []interface{}) *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.SetDivisionPreferences(i)
	return eaguo
}

// AppendDivisionPreferences appends i to the "DivisionPreferences" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) AppendDivisionPreferences(i []interface{}) *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.AppendDivisionPreferences(i)
	return eaguo
}

// ClearDivisionPreferences clears the value of the "DivisionPreferences" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) ClearDivisionPreferences() *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.ClearDivisionPreferences()
	return eaguo
}

// SetRoleUserCode sets the "RoleUserCode" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetRoleUserCode(i int32) *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.SetRoleUserCode(i)
	return eaguo
}

// SetNillableRoleUserCode sets the "RoleUserCode" field if the given value is not nil.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetNillableRoleUserCode(i *int32) *ExamApplicationsGDSPAUpdateOne {
	if i != nil {
		eaguo.SetRoleUserCode(*i)
	}
	return eaguo
}

// ClearRoleUserCode clears the value of the "RoleUserCode" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) ClearRoleUserCode() *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.ClearRoleUserCode()
	return eaguo
}

// SetCircleSID sets the "CircleSID" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetCircleSID(i int32) *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.SetCircleSID(i)
	return eaguo
}

// SetNillableCircleSID sets the "CircleSID" field if the given value is not nil.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetNillableCircleSID(i *int32) *ExamApplicationsGDSPAUpdateOne {
	if i != nil {
		eaguo.SetCircleSID(*i)
	}
	return eaguo
}

// ClearCircleSID clears the value of the "CircleSID" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) ClearCircleSID() *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.ClearCircleSID()
	return eaguo
}

// SetServiceLength sets the "ServiceLength" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetServiceLength(i []interface{}) *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.SetServiceLength(i)
	return eaguo
}

// AppendServiceLength appends i to the "ServiceLength" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) AppendServiceLength(i []interface{}) *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.AppendServiceLength(i)
	return eaguo
}

// ClearServiceLength clears the value of the "ServiceLength" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) ClearServiceLength() *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.ClearServiceLength()
	return eaguo
}

// SetNonQualifyingService sets the "NonQualifyingService" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetNonQualifyingService(i []interface{}) *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.SetNonQualifyingService(i)
	return eaguo
}

// AppendNonQualifyingService appends i to the "NonQualifyingService" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) AppendNonQualifyingService(i []interface{}) *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.AppendNonQualifyingService(i)
	return eaguo
}

// ClearNonQualifyingService clears the value of the "NonQualifyingService" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) ClearNonQualifyingService() *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.ClearNonQualifyingService()
	return eaguo
}

// SetDCInPresentCadre sets the "DCInPresentCadre" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetDCInPresentCadre(s string) *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.SetDCInPresentCadre(s)
	return eaguo
}

// SetNillableDCInPresentCadre sets the "DCInPresentCadre" field if the given value is not nil.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetNillableDCInPresentCadre(s *string) *ExamApplicationsGDSPAUpdateOne {
	if s != nil {
		eaguo.SetDCInPresentCadre(*s)
	}
	return eaguo
}

// ClearDCInPresentCadre clears the value of the "DCInPresentCadre" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) ClearDCInPresentCadre() *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.ClearDCInPresentCadre()
	return eaguo
}

// SetReportingOfficeID sets the "ReportingOfficeID" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetReportingOfficeID(s string) *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.SetReportingOfficeID(s)
	return eaguo
}

// SetNillableReportingOfficeID sets the "ReportingOfficeID" field if the given value is not nil.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetNillableReportingOfficeID(s *string) *ExamApplicationsGDSPAUpdateOne {
	if s != nil {
		eaguo.SetReportingOfficeID(*s)
	}
	return eaguo
}

// ClearReportingOfficeID clears the value of the "ReportingOfficeID" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) ClearReportingOfficeID() *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.ClearReportingOfficeID()
	return eaguo
}

// SetPostPreferences sets the "PostPreferences" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetPostPreferences(i []interface{}) *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.SetPostPreferences(i)
	return eaguo
}

// AppendPostPreferences appends i to the "PostPreferences" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) AppendPostPreferences(i []interface{}) *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.AppendPostPreferences(i)
	return eaguo
}

// ClearPostPreferences clears the value of the "PostPreferences" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) ClearPostPreferences() *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.ClearPostPreferences()
	return eaguo
}

// SetUnitPreferences sets the "UnitPreferences" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetUnitPreferences(i []interface{}) *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.SetUnitPreferences(i)
	return eaguo
}

// AppendUnitPreferences appends i to the "UnitPreferences" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) AppendUnitPreferences(i []interface{}) *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.AppendUnitPreferences(i)
	return eaguo
}

// ClearUnitPreferences clears the value of the "UnitPreferences" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) ClearUnitPreferences() *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.ClearUnitPreferences()
	return eaguo
}

// SetCenterId sets the "CenterId" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetCenterId(i int32) *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.ResetCenterId()
	eaguo.mutation.SetCenterId(i)
	return eaguo
}

// SetNillableCenterId sets the "CenterId" field if the given value is not nil.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetNillableCenterId(i *int32) *ExamApplicationsGDSPAUpdateOne {
	if i != nil {
		eaguo.SetCenterId(*i)
	}
	return eaguo
}

// AddCenterId adds i to the "CenterId" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) AddCenterId(i int32) *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.AddCenterId(i)
	return eaguo
}

// ClearCenterId clears the value of the "CenterId" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) ClearCenterId() *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.ClearCenterId()
	return eaguo
}

// SetCenterCode sets the "CenterCode" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetCenterCode(i int32) *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.SetCenterCode(i)
	return eaguo
}

// SetNillableCenterCode sets the "CenterCode" field if the given value is not nil.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetNillableCenterCode(i *int32) *ExamApplicationsGDSPAUpdateOne {
	if i != nil {
		eaguo.SetCenterCode(*i)
	}
	return eaguo
}

// ClearCenterCode clears the value of the "CenterCode" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) ClearCenterCode() *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.ClearCenterCode()
	return eaguo
}

// SetClaimingQualifyingService sets the "ClaimingQualifyingService" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetClaimingQualifyingService(s string) *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.SetClaimingQualifyingService(s)
	return eaguo
}

// SetNillableClaimingQualifyingService sets the "ClaimingQualifyingService" field if the given value is not nil.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetNillableClaimingQualifyingService(s *string) *ExamApplicationsGDSPAUpdateOne {
	if s != nil {
		eaguo.SetClaimingQualifyingService(*s)
	}
	return eaguo
}

// ClearClaimingQualifyingService clears the value of the "ClaimingQualifyingService" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) ClearClaimingQualifyingService() *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.ClearClaimingQualifyingService()
	return eaguo
}

// SetDeputationOfficePincode sets the "DeputationOfficePincode" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetDeputationOfficePincode(s string) *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.SetDeputationOfficePincode(s)
	return eaguo
}

// SetNillableDeputationOfficePincode sets the "DeputationOfficePincode" field if the given value is not nil.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetNillableDeputationOfficePincode(s *string) *ExamApplicationsGDSPAUpdateOne {
	if s != nil {
		eaguo.SetDeputationOfficePincode(*s)
	}
	return eaguo
}

// ClearDeputationOfficePincode clears the value of the "DeputationOfficePincode" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) ClearDeputationOfficePincode() *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.ClearDeputationOfficePincode()
	return eaguo
}

// SetUpdatedAt sets the "UpdatedAt" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetUpdatedAt(t time.Time) *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.SetUpdatedAt(t)
	return eaguo
}

// SetNillableUpdatedAt sets the "UpdatedAt" field if the given value is not nil.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetNillableUpdatedAt(t *time.Time) *ExamApplicationsGDSPAUpdateOne {
	if t != nil {
		eaguo.SetUpdatedAt(*t)
	}
	return eaguo
}

// ClearUpdatedAt clears the value of the "UpdatedAt" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) ClearUpdatedAt() *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.ClearUpdatedAt()
	return eaguo
}

// SetUpdatedBy sets the "UpdatedBy" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetUpdatedBy(s string) *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.SetUpdatedBy(s)
	return eaguo
}

// SetNillableUpdatedBy sets the "UpdatedBy" field if the given value is not nil.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetNillableUpdatedBy(s *string) *ExamApplicationsGDSPAUpdateOne {
	if s != nil {
		eaguo.SetUpdatedBy(*s)
	}
	return eaguo
}

// ClearUpdatedBy clears the value of the "UpdatedBy" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) ClearUpdatedBy() *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.ClearUpdatedBy()
	return eaguo
}

// SetApplicationWdlDate sets the "ApplicationWdlDate" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetApplicationWdlDate(t time.Time) *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.SetApplicationWdlDate(t)
	return eaguo
}

// SetNillableApplicationWdlDate sets the "ApplicationWdlDate" field if the given value is not nil.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetNillableApplicationWdlDate(t *time.Time) *ExamApplicationsGDSPAUpdateOne {
	if t != nil {
		eaguo.SetApplicationWdlDate(*t)
	}
	return eaguo
}

// ClearApplicationWdlDate clears the value of the "ApplicationWdlDate" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) ClearApplicationWdlDate() *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.ClearApplicationWdlDate()
	return eaguo
}

// SetExamCenterHall sets the "ExamCenterHall" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetExamCenterHall(i int32) *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.ResetExamCenterHall()
	eaguo.mutation.SetExamCenterHall(i)
	return eaguo
}

// SetNillableExamCenterHall sets the "ExamCenterHall" field if the given value is not nil.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetNillableExamCenterHall(i *int32) *ExamApplicationsGDSPAUpdateOne {
	if i != nil {
		eaguo.SetExamCenterHall(*i)
	}
	return eaguo
}

// AddExamCenterHall adds i to the "ExamCenterHall" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) AddExamCenterHall(i int32) *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.AddExamCenterHall(i)
	return eaguo
}

// ClearExamCenterHall clears the value of the "ExamCenterHall" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) ClearExamCenterHall() *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.ClearExamCenterHall()
	return eaguo
}

// SetHallName sets the "HallName" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetHallName(s string) *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.SetHallName(s)
	return eaguo
}

// SetNillableHallName sets the "HallName" field if the given value is not nil.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetNillableHallName(s *string) *ExamApplicationsGDSPAUpdateOne {
	if s != nil {
		eaguo.SetHallName(*s)
	}
	return eaguo
}

// ClearHallName clears the value of the "HallName" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) ClearHallName() *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.ClearHallName()
	return eaguo
}

// SetFacilityName sets the "FacilityName" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetFacilityName(s string) *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.SetFacilityName(s)
	return eaguo
}

// SetNillableFacilityName sets the "FacilityName" field if the given value is not nil.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetNillableFacilityName(s *string) *ExamApplicationsGDSPAUpdateOne {
	if s != nil {
		eaguo.SetFacilityName(*s)
	}
	return eaguo
}

// ClearFacilityName clears the value of the "FacilityName" field.
func (eaguo *ExamApplicationsGDSPAUpdateOne) ClearFacilityName() *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.ClearFacilityName()
	return eaguo
}

// AddUsersGDSPARefIDs adds the "UsersGDSPARef" edge to the UserMaster entity by IDs.
func (eaguo *ExamApplicationsGDSPAUpdateOne) AddUsersGDSPARefIDs(ids ...int64) *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.AddUsersGDSPARefIDs(ids...)
	return eaguo
}

// AddUsersGDSPARef adds the "UsersGDSPARef" edges to the UserMaster entity.
func (eaguo *ExamApplicationsGDSPAUpdateOne) AddUsersGDSPARef(u ...*UserMaster) *ExamApplicationsGDSPAUpdateOne {
	ids := make([]int64, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return eaguo.AddUsersGDSPARefIDs(ids...)
}

// SetExamcitycenterID sets the "examcitycenter" edge to the ExamCityCenter entity by ID.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetExamcitycenterID(id int32) *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.SetExamcitycenterID(id)
	return eaguo
}

// SetNillableExamcitycenterID sets the "examcitycenter" edge to the ExamCityCenter entity by ID if the given value is not nil.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetNillableExamcitycenterID(id *int32) *ExamApplicationsGDSPAUpdateOne {
	if id != nil {
		eaguo = eaguo.SetExamcitycenterID(*id)
	}
	return eaguo
}

// SetExamcitycenter sets the "examcitycenter" edge to the ExamCityCenter entity.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetExamcitycenter(e *ExamCityCenter) *ExamApplicationsGDSPAUpdateOne {
	return eaguo.SetExamcitycenterID(e.ID)
}

// SetGDSPAExamCentresID sets the "GDSPAExamCentres" edge to the Center entity by ID.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetGDSPAExamCentresID(id int32) *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.SetGDSPAExamCentresID(id)
	return eaguo
}

// SetNillableGDSPAExamCentresID sets the "GDSPAExamCentres" edge to the Center entity by ID if the given value is not nil.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetNillableGDSPAExamCentresID(id *int32) *ExamApplicationsGDSPAUpdateOne {
	if id != nil {
		eaguo = eaguo.SetGDSPAExamCentresID(*id)
	}
	return eaguo
}

// SetGDSPAExamCentres sets the "GDSPAExamCentres" edge to the Center entity.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetGDSPAExamCentres(c *Center) *ExamApplicationsGDSPAUpdateOne {
	return eaguo.SetGDSPAExamCentresID(c.ID)
}

// SetRoleusersID sets the "roleusers" edge to the RoleMaster entity by ID.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetRoleusersID(id int32) *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.SetRoleusersID(id)
	return eaguo
}

// SetNillableRoleusersID sets the "roleusers" edge to the RoleMaster entity by ID if the given value is not nil.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetNillableRoleusersID(id *int32) *ExamApplicationsGDSPAUpdateOne {
	if id != nil {
		eaguo = eaguo.SetRoleusersID(*id)
	}
	return eaguo
}

// SetRoleusers sets the "roleusers" edge to the RoleMaster entity.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetRoleusers(r *RoleMaster) *ExamApplicationsGDSPAUpdateOne {
	return eaguo.SetRoleusersID(r.ID)
}

// AddCadrePrefRefIDs adds the "CadrePref_Ref" edge to the Cadre_Choice_PA entity by IDs.
func (eaguo *ExamApplicationsGDSPAUpdateOne) AddCadrePrefRefIDs(ids ...int32) *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.AddCadrePrefRefIDs(ids...)
	return eaguo
}

// AddCadrePrefRef adds the "CadrePref_Ref" edges to the Cadre_Choice_PA entity.
func (eaguo *ExamApplicationsGDSPAUpdateOne) AddCadrePrefRef(c ...*Cadre_Choice_PA) *ExamApplicationsGDSPAUpdateOne {
	ids := make([]int32, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return eaguo.AddCadrePrefRefIDs(ids...)
}

// AddCirclePrefRefGDSPAIDs adds the "CirclePrefRefGDSPA" edge to the Division_Choice_PA entity by IDs.
func (eaguo *ExamApplicationsGDSPAUpdateOne) AddCirclePrefRefGDSPAIDs(ids ...int32) *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.AddCirclePrefRefGDSPAIDs(ids...)
	return eaguo
}

// AddCirclePrefRefGDSPA adds the "CirclePrefRefGDSPA" edges to the Division_Choice_PA entity.
func (eaguo *ExamApplicationsGDSPAUpdateOne) AddCirclePrefRefGDSPA(d ...*Division_Choice_PA) *ExamApplicationsGDSPAUpdateOne {
	ids := make([]int32, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return eaguo.AddCirclePrefRefGDSPAIDs(ids...)
}

// AddGDSPAApplicationsRefIDs adds the "GDSPAApplicationsRef" edge to the RecommendationsGDSPAApplications entity by IDs.
func (eaguo *ExamApplicationsGDSPAUpdateOne) AddGDSPAApplicationsRefIDs(ids ...int64) *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.AddGDSPAApplicationsRefIDs(ids...)
	return eaguo
}

// AddGDSPAApplicationsRef adds the "GDSPAApplicationsRef" edges to the RecommendationsGDSPAApplications entity.
func (eaguo *ExamApplicationsGDSPAUpdateOne) AddGDSPAApplicationsRef(r ...*RecommendationsGDSPAApplications) *ExamApplicationsGDSPAUpdateOne {
	ids := make([]int64, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return eaguo.AddGDSPAApplicationsRefIDs(ids...)
}

// SetExamsID sets the "Exams" edge to the Exam entity by ID.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetExamsID(id int32) *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.SetExamsID(id)
	return eaguo
}

// SetNillableExamsID sets the "Exams" edge to the Exam entity by ID if the given value is not nil.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetNillableExamsID(id *int32) *ExamApplicationsGDSPAUpdateOne {
	if id != nil {
		eaguo = eaguo.SetExamsID(*id)
	}
	return eaguo
}

// SetExams sets the "Exams" edge to the Exam entity.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetExams(e *Exam) *ExamApplicationsGDSPAUpdateOne {
	return eaguo.SetExamsID(e.ID)
}

// SetCircleRefsGDSPAID sets the "CircleRefsGDSPA" edge to the CircleSummaryForNO entity by ID.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetCircleRefsGDSPAID(id int32) *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.SetCircleRefsGDSPAID(id)
	return eaguo
}

// SetNillableCircleRefsGDSPAID sets the "CircleRefsGDSPA" edge to the CircleSummaryForNO entity by ID if the given value is not nil.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetNillableCircleRefsGDSPAID(id *int32) *ExamApplicationsGDSPAUpdateOne {
	if id != nil {
		eaguo = eaguo.SetCircleRefsGDSPAID(*id)
	}
	return eaguo
}

// SetCircleRefsGDSPA sets the "CircleRefsGDSPA" edge to the CircleSummaryForNO entity.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SetCircleRefsGDSPA(c *CircleSummaryForNO) *ExamApplicationsGDSPAUpdateOne {
	return eaguo.SetCircleRefsGDSPAID(c.ID)
}

// AddLogDatumIDs adds the "LogData" edge to the Logs entity by IDs.
func (eaguo *ExamApplicationsGDSPAUpdateOne) AddLogDatumIDs(ids ...int64) *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.AddLogDatumIDs(ids...)
	return eaguo
}

// AddLogData adds the "LogData" edges to the Logs entity.
func (eaguo *ExamApplicationsGDSPAUpdateOne) AddLogData(l ...*Logs) *ExamApplicationsGDSPAUpdateOne {
	ids := make([]int64, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return eaguo.AddLogDatumIDs(ids...)
}

// Mutation returns the ExamApplicationsGDSPAMutation object of the builder.
func (eaguo *ExamApplicationsGDSPAUpdateOne) Mutation() *ExamApplicationsGDSPAMutation {
	return eaguo.mutation
}

// ClearUsersGDSPARef clears all "UsersGDSPARef" edges to the UserMaster entity.
func (eaguo *ExamApplicationsGDSPAUpdateOne) ClearUsersGDSPARef() *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.ClearUsersGDSPARef()
	return eaguo
}

// RemoveUsersGDSPARefIDs removes the "UsersGDSPARef" edge to UserMaster entities by IDs.
func (eaguo *ExamApplicationsGDSPAUpdateOne) RemoveUsersGDSPARefIDs(ids ...int64) *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.RemoveUsersGDSPARefIDs(ids...)
	return eaguo
}

// RemoveUsersGDSPARef removes "UsersGDSPARef" edges to UserMaster entities.
func (eaguo *ExamApplicationsGDSPAUpdateOne) RemoveUsersGDSPARef(u ...*UserMaster) *ExamApplicationsGDSPAUpdateOne {
	ids := make([]int64, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return eaguo.RemoveUsersGDSPARefIDs(ids...)
}

// ClearExamcitycenter clears the "examcitycenter" edge to the ExamCityCenter entity.
func (eaguo *ExamApplicationsGDSPAUpdateOne) ClearExamcitycenter() *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.ClearExamcitycenter()
	return eaguo
}

// ClearGDSPAExamCentres clears the "GDSPAExamCentres" edge to the Center entity.
func (eaguo *ExamApplicationsGDSPAUpdateOne) ClearGDSPAExamCentres() *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.ClearGDSPAExamCentres()
	return eaguo
}

// ClearRoleusers clears the "roleusers" edge to the RoleMaster entity.
func (eaguo *ExamApplicationsGDSPAUpdateOne) ClearRoleusers() *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.ClearRoleusers()
	return eaguo
}

// ClearCadrePrefRef clears all "CadrePref_Ref" edges to the Cadre_Choice_PA entity.
func (eaguo *ExamApplicationsGDSPAUpdateOne) ClearCadrePrefRef() *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.ClearCadrePrefRef()
	return eaguo
}

// RemoveCadrePrefRefIDs removes the "CadrePref_Ref" edge to Cadre_Choice_PA entities by IDs.
func (eaguo *ExamApplicationsGDSPAUpdateOne) RemoveCadrePrefRefIDs(ids ...int32) *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.RemoveCadrePrefRefIDs(ids...)
	return eaguo
}

// RemoveCadrePrefRef removes "CadrePref_Ref" edges to Cadre_Choice_PA entities.
func (eaguo *ExamApplicationsGDSPAUpdateOne) RemoveCadrePrefRef(c ...*Cadre_Choice_PA) *ExamApplicationsGDSPAUpdateOne {
	ids := make([]int32, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return eaguo.RemoveCadrePrefRefIDs(ids...)
}

// ClearCirclePrefRefGDSPA clears all "CirclePrefRefGDSPA" edges to the Division_Choice_PA entity.
func (eaguo *ExamApplicationsGDSPAUpdateOne) ClearCirclePrefRefGDSPA() *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.ClearCirclePrefRefGDSPA()
	return eaguo
}

// RemoveCirclePrefRefGDSPAIDs removes the "CirclePrefRefGDSPA" edge to Division_Choice_PA entities by IDs.
func (eaguo *ExamApplicationsGDSPAUpdateOne) RemoveCirclePrefRefGDSPAIDs(ids ...int32) *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.RemoveCirclePrefRefGDSPAIDs(ids...)
	return eaguo
}

// RemoveCirclePrefRefGDSPA removes "CirclePrefRefGDSPA" edges to Division_Choice_PA entities.
func (eaguo *ExamApplicationsGDSPAUpdateOne) RemoveCirclePrefRefGDSPA(d ...*Division_Choice_PA) *ExamApplicationsGDSPAUpdateOne {
	ids := make([]int32, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return eaguo.RemoveCirclePrefRefGDSPAIDs(ids...)
}

// ClearGDSPAApplicationsRef clears all "GDSPAApplicationsRef" edges to the RecommendationsGDSPAApplications entity.
func (eaguo *ExamApplicationsGDSPAUpdateOne) ClearGDSPAApplicationsRef() *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.ClearGDSPAApplicationsRef()
	return eaguo
}

// RemoveGDSPAApplicationsRefIDs removes the "GDSPAApplicationsRef" edge to RecommendationsGDSPAApplications entities by IDs.
func (eaguo *ExamApplicationsGDSPAUpdateOne) RemoveGDSPAApplicationsRefIDs(ids ...int64) *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.RemoveGDSPAApplicationsRefIDs(ids...)
	return eaguo
}

// RemoveGDSPAApplicationsRef removes "GDSPAApplicationsRef" edges to RecommendationsGDSPAApplications entities.
func (eaguo *ExamApplicationsGDSPAUpdateOne) RemoveGDSPAApplicationsRef(r ...*RecommendationsGDSPAApplications) *ExamApplicationsGDSPAUpdateOne {
	ids := make([]int64, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return eaguo.RemoveGDSPAApplicationsRefIDs(ids...)
}

// ClearExams clears the "Exams" edge to the Exam entity.
func (eaguo *ExamApplicationsGDSPAUpdateOne) ClearExams() *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.ClearExams()
	return eaguo
}

// ClearCircleRefsGDSPA clears the "CircleRefsGDSPA" edge to the CircleSummaryForNO entity.
func (eaguo *ExamApplicationsGDSPAUpdateOne) ClearCircleRefsGDSPA() *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.ClearCircleRefsGDSPA()
	return eaguo
}

// ClearLogData clears all "LogData" edges to the Logs entity.
func (eaguo *ExamApplicationsGDSPAUpdateOne) ClearLogData() *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.ClearLogData()
	return eaguo
}

// RemoveLogDatumIDs removes the "LogData" edge to Logs entities by IDs.
func (eaguo *ExamApplicationsGDSPAUpdateOne) RemoveLogDatumIDs(ids ...int64) *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.RemoveLogDatumIDs(ids...)
	return eaguo
}

// RemoveLogData removes "LogData" edges to Logs entities.
func (eaguo *ExamApplicationsGDSPAUpdateOne) RemoveLogData(l ...*Logs) *ExamApplicationsGDSPAUpdateOne {
	ids := make([]int64, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return eaguo.RemoveLogDatumIDs(ids...)
}

// Where appends a list predicates to the ExamApplicationsGDSPAUpdate builder.
func (eaguo *ExamApplicationsGDSPAUpdateOne) Where(ps ...predicate.Exam_Applications_GDSPA) *ExamApplicationsGDSPAUpdateOne {
	eaguo.mutation.Where(ps...)
	return eaguo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (eaguo *ExamApplicationsGDSPAUpdateOne) Select(field string, fields ...string) *ExamApplicationsGDSPAUpdateOne {
	eaguo.fields = append([]string{field}, fields...)
	return eaguo
}

// Save executes the query and returns the updated Exam_Applications_GDSPA entity.
func (eaguo *ExamApplicationsGDSPAUpdateOne) Save(ctx context.Context) (*Exam_Applications_GDSPA, error) {
	return withHooks(ctx, eaguo.sqlSave, eaguo.mutation, eaguo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (eaguo *ExamApplicationsGDSPAUpdateOne) SaveX(ctx context.Context) *Exam_Applications_GDSPA {
	node, err := eaguo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (eaguo *ExamApplicationsGDSPAUpdateOne) Exec(ctx context.Context) error {
	_, err := eaguo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eaguo *ExamApplicationsGDSPAUpdateOne) ExecX(ctx context.Context) {
	if err := eaguo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (eaguo *ExamApplicationsGDSPAUpdateOne) sqlSave(ctx context.Context) (_node *Exam_Applications_GDSPA, err error) {
	_spec := sqlgraph.NewUpdateSpec(exam_applications_gdspa.Table, exam_applications_gdspa.Columns, sqlgraph.NewFieldSpec(exam_applications_gdspa.FieldID, field.TypeInt64))
	id, ok := eaguo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Exam_Applications_GDSPA.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := eaguo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, exam_applications_gdspa.FieldID)
		for _, f := range fields {
			if !exam_applications_gdspa.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != exam_applications_gdspa.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := eaguo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eaguo.mutation.ApplicationNumber(); ok {
		_spec.SetField(exam_applications_gdspa.FieldApplicationNumber, field.TypeString, value)
	}
	if eaguo.mutation.ApplicationNumberCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldApplicationNumber, field.TypeString)
	}
	if value, ok := eaguo.mutation.ApplnSubmittedDate(); ok {
		_spec.SetField(exam_applications_gdspa.FieldApplnSubmittedDate, field.TypeTime, value)
	}
	if eaguo.mutation.ApplnSubmittedDateCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldApplnSubmittedDate, field.TypeTime)
	}
	if value, ok := eaguo.mutation.ExamShortName(); ok {
		_spec.SetField(exam_applications_gdspa.FieldExamShortName, field.TypeString, value)
	}
	if eaguo.mutation.ExamShortNameCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldExamShortName, field.TypeString)
	}
	if value, ok := eaguo.mutation.ExamName(); ok {
		_spec.SetField(exam_applications_gdspa.FieldExamName, field.TypeString, value)
	}
	if eaguo.mutation.ExamNameCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldExamName, field.TypeString)
	}
	if value, ok := eaguo.mutation.SmsExamShortName(); ok {
		_spec.SetField(exam_applications_gdspa.FieldSmsExamShortName, field.TypeString, value)
	}
	if eaguo.mutation.SmsExamShortNameCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldSmsExamShortName, field.TypeString)
	}
	if value, ok := eaguo.mutation.ExamYear(); ok {
		_spec.SetField(exam_applications_gdspa.FieldExamYear, field.TypeString, value)
	}
	if eaguo.mutation.ExamYearCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldExamYear, field.TypeString)
	}
	if value, ok := eaguo.mutation.UserID(); ok {
		_spec.SetField(exam_applications_gdspa.FieldUserID, field.TypeInt32, value)
	}
	if value, ok := eaguo.mutation.AddedUserID(); ok {
		_spec.AddField(exam_applications_gdspa.FieldUserID, field.TypeInt32, value)
	}
	if eaguo.mutation.UserIDCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldUserID, field.TypeInt32)
	}
	if value, ok := eaguo.mutation.EmployeeID(); ok {
		_spec.SetField(exam_applications_gdspa.FieldEmployeeID, field.TypeInt64, value)
	}
	if value, ok := eaguo.mutation.AddedEmployeeID(); ok {
		_spec.AddField(exam_applications_gdspa.FieldEmployeeID, field.TypeInt64, value)
	}
	if eaguo.mutation.EmployeeIDCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldEmployeeID, field.TypeInt64)
	}
	if value, ok := eaguo.mutation.EmployeeName(); ok {
		_spec.SetField(exam_applications_gdspa.FieldEmployeeName, field.TypeString, value)
	}
	if eaguo.mutation.EmployeeNameCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldEmployeeName, field.TypeString)
	}
	if value, ok := eaguo.mutation.DOB(); ok {
		_spec.SetField(exam_applications_gdspa.FieldDOB, field.TypeString, value)
	}
	if eaguo.mutation.DOBCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldDOB, field.TypeString)
	}
	if value, ok := eaguo.mutation.Gender(); ok {
		_spec.SetField(exam_applications_gdspa.FieldGender, field.TypeString, value)
	}
	if eaguo.mutation.GenderCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldGender, field.TypeString)
	}
	if value, ok := eaguo.mutation.MobileNumber(); ok {
		_spec.SetField(exam_applications_gdspa.FieldMobileNumber, field.TypeString, value)
	}
	if eaguo.mutation.MobileNumberCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldMobileNumber, field.TypeString)
	}
	if value, ok := eaguo.mutation.EmailID(); ok {
		_spec.SetField(exam_applications_gdspa.FieldEmailID, field.TypeString, value)
	}
	if eaguo.mutation.EmailIDCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldEmailID, field.TypeString)
	}
	if value, ok := eaguo.mutation.CategoryCode(); ok {
		_spec.SetField(exam_applications_gdspa.FieldCategoryCode, field.TypeString, value)
	}
	if eaguo.mutation.CategoryCodeCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldCategoryCode, field.TypeString)
	}
	if value, ok := eaguo.mutation.CategoryDescription(); ok {
		_spec.SetField(exam_applications_gdspa.FieldCategoryDescription, field.TypeString, value)
	}
	if eaguo.mutation.CategoryDescriptionCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldCategoryDescription, field.TypeString)
	}
	if value, ok := eaguo.mutation.DisabilityTypeID(); ok {
		_spec.SetField(exam_applications_gdspa.FieldDisabilityTypeID, field.TypeString, value)
	}
	if eaguo.mutation.DisabilityTypeIDCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldDisabilityTypeID, field.TypeString)
	}
	if value, ok := eaguo.mutation.DisabilityTypeCode(); ok {
		_spec.SetField(exam_applications_gdspa.FieldDisabilityTypeCode, field.TypeString, value)
	}
	if eaguo.mutation.DisabilityTypeCodeCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldDisabilityTypeCode, field.TypeString)
	}
	if value, ok := eaguo.mutation.DisabilityTypeDescription(); ok {
		_spec.SetField(exam_applications_gdspa.FieldDisabilityTypeDescription, field.TypeString, value)
	}
	if eaguo.mutation.DisabilityTypeDescriptionCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldDisabilityTypeDescription, field.TypeString)
	}
	if value, ok := eaguo.mutation.DisabilityPercentage(); ok {
		_spec.SetField(exam_applications_gdspa.FieldDisabilityPercentage, field.TypeInt32, value)
	}
	if value, ok := eaguo.mutation.AddedDisabilityPercentage(); ok {
		_spec.AddField(exam_applications_gdspa.FieldDisabilityPercentage, field.TypeInt32, value)
	}
	if eaguo.mutation.DisabilityPercentageCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldDisabilityPercentage, field.TypeInt32)
	}
	if value, ok := eaguo.mutation.DCCS(); ok {
		_spec.SetField(exam_applications_gdspa.FieldDCCS, field.TypeString, value)
	}
	if eaguo.mutation.DCCSCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldDCCS, field.TypeString)
	}
	if value, ok := eaguo.mutation.EntryPostCode(); ok {
		_spec.SetField(exam_applications_gdspa.FieldEntryPostCode, field.TypeString, value)
	}
	if eaguo.mutation.EntryPostCodeCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldEntryPostCode, field.TypeString)
	}
	if value, ok := eaguo.mutation.EntryPostDescription(); ok {
		_spec.SetField(exam_applications_gdspa.FieldEntryPostDescription, field.TypeString, value)
	}
	if eaguo.mutation.EntryPostDescriptionCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldEntryPostDescription, field.TypeString)
	}
	if value, ok := eaguo.mutation.PresentPostCode(); ok {
		_spec.SetField(exam_applications_gdspa.FieldPresentPostCode, field.TypeString, value)
	}
	if eaguo.mutation.PresentPostCodeCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldPresentPostCode, field.TypeString)
	}
	if value, ok := eaguo.mutation.PresentPostDescription(); ok {
		_spec.SetField(exam_applications_gdspa.FieldPresentPostDescription, field.TypeString, value)
	}
	if eaguo.mutation.PresentPostDescriptionCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldPresentPostDescription, field.TypeString)
	}
	if value, ok := eaguo.mutation.FeederPostCode(); ok {
		_spec.SetField(exam_applications_gdspa.FieldFeederPostCode, field.TypeString, value)
	}
	if eaguo.mutation.FeederPostCodeCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldFeederPostCode, field.TypeString)
	}
	if value, ok := eaguo.mutation.FeederPostDescription(); ok {
		_spec.SetField(exam_applications_gdspa.FieldFeederPostDescription, field.TypeString, value)
	}
	if eaguo.mutation.FeederPostDescriptionCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldFeederPostDescription, field.TypeString)
	}
	if value, ok := eaguo.mutation.FeederPostJoiningDate(); ok {
		_spec.SetField(exam_applications_gdspa.FieldFeederPostJoiningDate, field.TypeString, value)
	}
	if eaguo.mutation.FeederPostJoiningDateCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldFeederPostJoiningDate, field.TypeString)
	}
	if value, ok := eaguo.mutation.PresentDesignation(); ok {
		_spec.SetField(exam_applications_gdspa.FieldPresentDesignation, field.TypeString, value)
	}
	if eaguo.mutation.PresentDesignationCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldPresentDesignation, field.TypeString)
	}
	if value, ok := eaguo.mutation.EducationCode(); ok {
		_spec.SetField(exam_applications_gdspa.FieldEducationCode, field.TypeString, value)
	}
	if eaguo.mutation.EducationCodeCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldEducationCode, field.TypeString)
	}
	if value, ok := eaguo.mutation.EducationDescription(); ok {
		_spec.SetField(exam_applications_gdspa.FieldEducationDescription, field.TypeString, value)
	}
	if eaguo.mutation.EducationDescriptionCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldEducationDescription, field.TypeString)
	}
	if value, ok := eaguo.mutation.FacilityUniqueID(); ok {
		_spec.SetField(exam_applications_gdspa.FieldFacilityUniqueID, field.TypeString, value)
	}
	if eaguo.mutation.FacilityUniqueIDCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldFacilityUniqueID, field.TypeString)
	}
	if value, ok := eaguo.mutation.WorkingOfficePincode(); ok {
		_spec.SetField(exam_applications_gdspa.FieldWorkingOfficePincode, field.TypeInt32, value)
	}
	if value, ok := eaguo.mutation.AddedWorkingOfficePincode(); ok {
		_spec.AddField(exam_applications_gdspa.FieldWorkingOfficePincode, field.TypeInt32, value)
	}
	if eaguo.mutation.WorkingOfficePincodeCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldWorkingOfficePincode, field.TypeInt32)
	}
	if value, ok := eaguo.mutation.WorkingOfficeFacilityID(); ok {
		_spec.SetField(exam_applications_gdspa.FieldWorkingOfficeFacilityID, field.TypeString, value)
	}
	if eaguo.mutation.WorkingOfficeFacilityIDCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldWorkingOfficeFacilityID, field.TypeString)
	}
	if value, ok := eaguo.mutation.WorkingOfficeName(); ok {
		_spec.SetField(exam_applications_gdspa.FieldWorkingOfficeName, field.TypeString, value)
	}
	if eaguo.mutation.WorkingOfficeNameCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldWorkingOfficeName, field.TypeString)
	}
	if value, ok := eaguo.mutation.WorkingOfficeCircleFacilityID(); ok {
		_spec.SetField(exam_applications_gdspa.FieldWorkingOfficeCircleFacilityID, field.TypeString, value)
	}
	if eaguo.mutation.WorkingOfficeCircleFacilityIDCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldWorkingOfficeCircleFacilityID, field.TypeString)
	}
	if value, ok := eaguo.mutation.WorkingOfficeCircleName(); ok {
		_spec.SetField(exam_applications_gdspa.FieldWorkingOfficeCircleName, field.TypeString, value)
	}
	if eaguo.mutation.WorkingOfficeCircleNameCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldWorkingOfficeCircleName, field.TypeString)
	}
	if value, ok := eaguo.mutation.WorkingOfficeRegionFacilityID(); ok {
		_spec.SetField(exam_applications_gdspa.FieldWorkingOfficeRegionFacilityID, field.TypeString, value)
	}
	if eaguo.mutation.WorkingOfficeRegionFacilityIDCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldWorkingOfficeRegionFacilityID, field.TypeString)
	}
	if value, ok := eaguo.mutation.WorkingOfficeRegionName(); ok {
		_spec.SetField(exam_applications_gdspa.FieldWorkingOfficeRegionName, field.TypeString, value)
	}
	if eaguo.mutation.WorkingOfficeRegionNameCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldWorkingOfficeRegionName, field.TypeString)
	}
	if value, ok := eaguo.mutation.WorkingOfficeDivisionFacilityID(); ok {
		_spec.SetField(exam_applications_gdspa.FieldWorkingOfficeDivisionFacilityID, field.TypeString, value)
	}
	if eaguo.mutation.WorkingOfficeDivisionFacilityIDCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldWorkingOfficeDivisionFacilityID, field.TypeString)
	}
	if value, ok := eaguo.mutation.WorkingOfficeDivisionName(); ok {
		_spec.SetField(exam_applications_gdspa.FieldWorkingOfficeDivisionName, field.TypeString, value)
	}
	if eaguo.mutation.WorkingOfficeDivisionNameCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldWorkingOfficeDivisionName, field.TypeString)
	}
	if value, ok := eaguo.mutation.ReportingOfficeFacilityID(); ok {
		_spec.SetField(exam_applications_gdspa.FieldReportingOfficeFacilityID, field.TypeString, value)
	}
	if eaguo.mutation.ReportingOfficeFacilityIDCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldReportingOfficeFacilityID, field.TypeString)
	}
	if value, ok := eaguo.mutation.ReportingOfficeName(); ok {
		_spec.SetField(exam_applications_gdspa.FieldReportingOfficeName, field.TypeString, value)
	}
	if eaguo.mutation.ReportingOfficeNameCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldReportingOfficeName, field.TypeString)
	}
	if value, ok := eaguo.mutation.LienControllingOfficeID(); ok {
		_spec.SetField(exam_applications_gdspa.FieldLienControllingOfficeID, field.TypeString, value)
	}
	if eaguo.mutation.LienControllingOfficeIDCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldLienControllingOfficeID, field.TypeString)
	}
	if value, ok := eaguo.mutation.LienControllingOfficeName(); ok {
		_spec.SetField(exam_applications_gdspa.FieldLienControllingOfficeName, field.TypeString, value)
	}
	if eaguo.mutation.LienControllingOfficeNameCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldLienControllingOfficeName, field.TypeString)
	}
	if value, ok := eaguo.mutation.InDeputation(); ok {
		_spec.SetField(exam_applications_gdspa.FieldInDeputation, field.TypeString, value)
	}
	if eaguo.mutation.InDeputationCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldInDeputation, field.TypeString)
	}
	if value, ok := eaguo.mutation.DeputationType(); ok {
		_spec.SetField(exam_applications_gdspa.FieldDeputationType, field.TypeString, value)
	}
	if eaguo.mutation.DeputationTypeCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldDeputationType, field.TypeString)
	}
	if value, ok := eaguo.mutation.DeputationOfficeUniqueId(); ok {
		_spec.SetField(exam_applications_gdspa.FieldDeputationOfficeUniqueId, field.TypeString, value)
	}
	if eaguo.mutation.DeputationOfficeUniqueIdCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldDeputationOfficeUniqueId, field.TypeString)
	}
	if value, ok := eaguo.mutation.DeputationOfficeFacilityID(); ok {
		_spec.SetField(exam_applications_gdspa.FieldDeputationOfficeFacilityID, field.TypeString, value)
	}
	if eaguo.mutation.DeputationOfficeFacilityIDCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldDeputationOfficeFacilityID, field.TypeString)
	}
	if value, ok := eaguo.mutation.DeputationOfficeName(); ok {
		_spec.SetField(exam_applications_gdspa.FieldDeputationOfficeName, field.TypeString, value)
	}
	if eaguo.mutation.DeputationOfficeNameCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldDeputationOfficeName, field.TypeString)
	}
	if value, ok := eaguo.mutation.DeputationControllingOfficeID(); ok {
		_spec.SetField(exam_applications_gdspa.FieldDeputationControllingOfficeID, field.TypeString, value)
	}
	if eaguo.mutation.DeputationControllingOfficeIDCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldDeputationControllingOfficeID, field.TypeString)
	}
	if value, ok := eaguo.mutation.DeputationControllingOfficeName(); ok {
		_spec.SetField(exam_applications_gdspa.FieldDeputationControllingOfficeName, field.TypeString, value)
	}
	if eaguo.mutation.DeputationControllingOfficeNameCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldDeputationControllingOfficeName, field.TypeString)
	}
	if value, ok := eaguo.mutation.ControllingOfficeFacilityID(); ok {
		_spec.SetField(exam_applications_gdspa.FieldControllingOfficeFacilityID, field.TypeString, value)
	}
	if eaguo.mutation.ControllingOfficeFacilityIDCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldControllingOfficeFacilityID, field.TypeString)
	}
	if value, ok := eaguo.mutation.ControllingOfficeName(); ok {
		_spec.SetField(exam_applications_gdspa.FieldControllingOfficeName, field.TypeString, value)
	}
	if eaguo.mutation.ControllingOfficeNameCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldControllingOfficeName, field.TypeString)
	}
	if value, ok := eaguo.mutation.SubdivisionOfficeFacilityID(); ok {
		_spec.SetField(exam_applications_gdspa.FieldSubdivisionOfficeFacilityID, field.TypeString, value)
	}
	if eaguo.mutation.SubdivisionOfficeFacilityIDCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldSubdivisionOfficeFacilityID, field.TypeString)
	}
	if value, ok := eaguo.mutation.SubdivisionOfficeName(); ok {
		_spec.SetField(exam_applications_gdspa.FieldSubdivisionOfficeName, field.TypeString, value)
	}
	if eaguo.mutation.SubdivisionOfficeNameCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldSubdivisionOfficeName, field.TypeString)
	}
	if value, ok := eaguo.mutation.NodalOfficeFacilityID(); ok {
		_spec.SetField(exam_applications_gdspa.FieldNodalOfficeFacilityID, field.TypeString, value)
	}
	if eaguo.mutation.NodalOfficeFacilityIDCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldNodalOfficeFacilityID, field.TypeString)
	}
	if value, ok := eaguo.mutation.NodalOfficeName(); ok {
		_spec.SetField(exam_applications_gdspa.FieldNodalOfficeName, field.TypeString, value)
	}
	if eaguo.mutation.NodalOfficeNameCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldNodalOfficeName, field.TypeString)
	}
	if value, ok := eaguo.mutation.CenterFacilityId(); ok {
		_spec.SetField(exam_applications_gdspa.FieldCenterFacilityId, field.TypeString, value)
	}
	if eaguo.mutation.CenterFacilityIdCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldCenterFacilityId, field.TypeString)
	}
	if value, ok := eaguo.mutation.CentrePreference(); ok {
		_spec.SetField(exam_applications_gdspa.FieldCentrePreference, field.TypeString, value)
	}
	if eaguo.mutation.CentrePreferenceCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldCentrePreference, field.TypeString)
	}
	if value, ok := eaguo.mutation.Signature(); ok {
		_spec.SetField(exam_applications_gdspa.FieldSignature, field.TypeString, value)
	}
	if eaguo.mutation.SignatureCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldSignature, field.TypeString)
	}
	if value, ok := eaguo.mutation.Photo(); ok {
		_spec.SetField(exam_applications_gdspa.FieldPhoto, field.TypeString, value)
	}
	if eaguo.mutation.PhotoCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldPhoto, field.TypeString)
	}
	if value, ok := eaguo.mutation.SignaturePath(); ok {
		_spec.SetField(exam_applications_gdspa.FieldSignaturePath, field.TypeString, value)
	}
	if eaguo.mutation.SignaturePathCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldSignaturePath, field.TypeString)
	}
	if value, ok := eaguo.mutation.PhotoPath(); ok {
		_spec.SetField(exam_applications_gdspa.FieldPhotoPath, field.TypeString, value)
	}
	if eaguo.mutation.PhotoPathCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldPhotoPath, field.TypeString)
	}
	if value, ok := eaguo.mutation.CandidatePhoto(); ok {
		_spec.SetField(exam_applications_gdspa.FieldCandidatePhoto, field.TypeBytes, value)
	}
	if eaguo.mutation.CandidatePhotoCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldCandidatePhoto, field.TypeBytes)
	}
	if value, ok := eaguo.mutation.CandidateSignature(); ok {
		_spec.SetField(exam_applications_gdspa.FieldCandidateSignature, field.TypeBytes, value)
	}
	if eaguo.mutation.CandidateSignatureCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldCandidateSignature, field.TypeBytes)
	}
	if value, ok := eaguo.mutation.TempHallTicket(); ok {
		_spec.SetField(exam_applications_gdspa.FieldTempHallTicket, field.TypeString, value)
	}
	if eaguo.mutation.TempHallTicketCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldTempHallTicket, field.TypeString)
	}
	if value, ok := eaguo.mutation.CandidateRemarks(); ok {
		_spec.SetField(exam_applications_gdspa.FieldCandidateRemarks, field.TypeString, value)
	}
	if eaguo.mutation.CandidateRemarksCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldCandidateRemarks, field.TypeString)
	}
	if value, ok := eaguo.mutation.VAGeneralRemarks(); ok {
		_spec.SetField(exam_applications_gdspa.FieldVAGeneralRemarks, field.TypeString, value)
	}
	if eaguo.mutation.VAGeneralRemarksCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldVAGeneralRemarks, field.TypeString)
	}
	if value, ok := eaguo.mutation.CAGeneralRemarks(); ok {
		_spec.SetField(exam_applications_gdspa.FieldCAGeneralRemarks, field.TypeString, value)
	}
	if eaguo.mutation.CAGeneralRemarksCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldCAGeneralRemarks, field.TypeString)
	}
	if value, ok := eaguo.mutation.NAGeneralRemarks(); ok {
		_spec.SetField(exam_applications_gdspa.FieldNAGeneralRemarks, field.TypeString, value)
	}
	if eaguo.mutation.NAGeneralRemarksCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldNAGeneralRemarks, field.TypeString)
	}
	if value, ok := eaguo.mutation.ApplicationStatus(); ok {
		_spec.SetField(exam_applications_gdspa.FieldApplicationStatus, field.TypeString, value)
	}
	if eaguo.mutation.ApplicationStatusCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldApplicationStatus, field.TypeString)
	}
	if value, ok := eaguo.mutation.Status(); ok {
		_spec.SetField(exam_applications_gdspa.FieldStatus, field.TypeString, value)
	}
	if eaguo.mutation.StatusCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldStatus, field.TypeString)
	}
	if value, ok := eaguo.mutation.RecommendedStatus(); ok {
		_spec.SetField(exam_applications_gdspa.FieldRecommendedStatus, field.TypeString, value)
	}
	if eaguo.mutation.RecommendedStatusCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldRecommendedStatus, field.TypeString)
	}
	if value, ok := eaguo.mutation.DesignationID(); ok {
		_spec.SetField(exam_applications_gdspa.FieldDesignationID, field.TypeString, value)
	}
	if eaguo.mutation.DesignationIDCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldDesignationID, field.TypeString)
	}
	if value, ok := eaguo.mutation.VAUserId(); ok {
		_spec.SetField(exam_applications_gdspa.FieldVAUserId, field.TypeInt32, value)
	}
	if value, ok := eaguo.mutation.AddedVAUserId(); ok {
		_spec.AddField(exam_applications_gdspa.FieldVAUserId, field.TypeInt32, value)
	}
	if eaguo.mutation.VAUserIdCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldVAUserId, field.TypeInt32)
	}
	if value, ok := eaguo.mutation.VAUserName(); ok {
		_spec.SetField(exam_applications_gdspa.FieldVAUserName, field.TypeString, value)
	}
	if eaguo.mutation.VAUserNameCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldVAUserName, field.TypeString)
	}
	if value, ok := eaguo.mutation.VAEmployeeID(); ok {
		_spec.SetField(exam_applications_gdspa.FieldVAEmployeeID, field.TypeString, value)
	}
	if eaguo.mutation.VAEmployeeIDCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldVAEmployeeID, field.TypeString)
	}
	if value, ok := eaguo.mutation.VAEmployeeDesignation(); ok {
		_spec.SetField(exam_applications_gdspa.FieldVAEmployeeDesignation, field.TypeString, value)
	}
	if eaguo.mutation.VAEmployeeDesignationCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldVAEmployeeDesignation, field.TypeString)
	}
	if value, ok := eaguo.mutation.VARemarks(); ok {
		_spec.SetField(exam_applications_gdspa.FieldVARemarks, field.TypeString, value)
	}
	if eaguo.mutation.VARemarksCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldVARemarks, field.TypeString)
	}
	if value, ok := eaguo.mutation.VADate(); ok {
		_spec.SetField(exam_applications_gdspa.FieldVADate, field.TypeTime, value)
	}
	if eaguo.mutation.VADateCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldVADate, field.TypeTime)
	}
	if value, ok := eaguo.mutation.CAUserId(); ok {
		_spec.SetField(exam_applications_gdspa.FieldCAUserId, field.TypeInt32, value)
	}
	if value, ok := eaguo.mutation.AddedCAUserId(); ok {
		_spec.AddField(exam_applications_gdspa.FieldCAUserId, field.TypeInt32, value)
	}
	if eaguo.mutation.CAUserIdCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldCAUserId, field.TypeInt32)
	}
	if value, ok := eaguo.mutation.CAUserName(); ok {
		_spec.SetField(exam_applications_gdspa.FieldCAUserName, field.TypeString, value)
	}
	if eaguo.mutation.CAUserNameCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldCAUserName, field.TypeString)
	}
	if value, ok := eaguo.mutation.CAEmployeeID(); ok {
		_spec.SetField(exam_applications_gdspa.FieldCAEmployeeID, field.TypeString, value)
	}
	if eaguo.mutation.CAEmployeeIDCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldCAEmployeeID, field.TypeString)
	}
	if value, ok := eaguo.mutation.CAEmployeeDesignation(); ok {
		_spec.SetField(exam_applications_gdspa.FieldCAEmployeeDesignation, field.TypeString, value)
	}
	if eaguo.mutation.CAEmployeeDesignationCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldCAEmployeeDesignation, field.TypeString)
	}
	if value, ok := eaguo.mutation.CARemarks(); ok {
		_spec.SetField(exam_applications_gdspa.FieldCARemarks, field.TypeString, value)
	}
	if eaguo.mutation.CARemarksCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldCARemarks, field.TypeString)
	}
	if value, ok := eaguo.mutation.CADate(); ok {
		_spec.SetField(exam_applications_gdspa.FieldCADate, field.TypeTime, value)
	}
	if eaguo.mutation.CADateCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldCADate, field.TypeTime)
	}
	if value, ok := eaguo.mutation.NAUserId(); ok {
		_spec.SetField(exam_applications_gdspa.FieldNAUserId, field.TypeInt32, value)
	}
	if value, ok := eaguo.mutation.AddedNAUserId(); ok {
		_spec.AddField(exam_applications_gdspa.FieldNAUserId, field.TypeInt32, value)
	}
	if eaguo.mutation.NAUserIdCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldNAUserId, field.TypeInt32)
	}
	if value, ok := eaguo.mutation.NAUserName(); ok {
		_spec.SetField(exam_applications_gdspa.FieldNAUserName, field.TypeString, value)
	}
	if eaguo.mutation.NAUserNameCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldNAUserName, field.TypeString)
	}
	if value, ok := eaguo.mutation.NAEmployeeID(); ok {
		_spec.SetField(exam_applications_gdspa.FieldNAEmployeeID, field.TypeString, value)
	}
	if eaguo.mutation.NAEmployeeIDCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldNAEmployeeID, field.TypeString)
	}
	if value, ok := eaguo.mutation.NAEmployeeDesignation(); ok {
		_spec.SetField(exam_applications_gdspa.FieldNAEmployeeDesignation, field.TypeString, value)
	}
	if eaguo.mutation.NAEmployeeDesignationCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldNAEmployeeDesignation, field.TypeString)
	}
	if value, ok := eaguo.mutation.NARemarks(); ok {
		_spec.SetField(exam_applications_gdspa.FieldNARemarks, field.TypeString, value)
	}
	if eaguo.mutation.NARemarksCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldNARemarks, field.TypeString)
	}
	if value, ok := eaguo.mutation.NADate(); ok {
		_spec.SetField(exam_applications_gdspa.FieldNADate, field.TypeTime, value)
	}
	if eaguo.mutation.NADateCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldNADate, field.TypeTime)
	}
	if value, ok := eaguo.mutation.AppliactionRemarks(); ok {
		_spec.SetField(exam_applications_gdspa.FieldAppliactionRemarks, field.TypeString, value)
	}
	if eaguo.mutation.AppliactionRemarksCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldAppliactionRemarks, field.TypeString)
	}
	if value, ok := eaguo.mutation.CadrePreferences(); ok {
		_spec.SetField(exam_applications_gdspa.FieldCadrePreferences, field.TypeJSON, value)
	}
	if value, ok := eaguo.mutation.AppendedCadrePreferences(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, exam_applications_gdspa.FieldCadrePreferences, value)
		})
	}
	if eaguo.mutation.CadrePreferencesCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldCadrePreferences, field.TypeJSON)
	}
	if value, ok := eaguo.mutation.CAPreviousRemarks(); ok {
		_spec.SetField(exam_applications_gdspa.FieldCAPreviousRemarks, field.TypeString, value)
	}
	if eaguo.mutation.CAPreviousRemarksCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldCAPreviousRemarks, field.TypeString)
	}
	if value, ok := eaguo.mutation.GenerateHallTicketFlag(); ok {
		_spec.SetField(exam_applications_gdspa.FieldGenerateHallTicketFlag, field.TypeBool, value)
	}
	if eaguo.mutation.GenerateHallTicketFlagCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldGenerateHallTicketFlag, field.TypeBool)
	}
	if value, ok := eaguo.mutation.PunishmentStatus(); ok {
		_spec.SetField(exam_applications_gdspa.FieldPunishmentStatus, field.TypeBool, value)
	}
	if eaguo.mutation.PunishmentStatusCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldPunishmentStatus, field.TypeBool)
	}
	if value, ok := eaguo.mutation.DisciplinaryCaseStatus(); ok {
		_spec.SetField(exam_applications_gdspa.FieldDisciplinaryCaseStatus, field.TypeBool, value)
	}
	if eaguo.mutation.DisciplinaryCaseStatusCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldDisciplinaryCaseStatus, field.TypeBool)
	}
	if value, ok := eaguo.mutation.HallTicketNumber(); ok {
		_spec.SetField(exam_applications_gdspa.FieldHallTicketNumber, field.TypeString, value)
	}
	if eaguo.mutation.HallTicketNumberCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldHallTicketNumber, field.TypeString)
	}
	if value, ok := eaguo.mutation.HallTicketGeneratedFlag(); ok {
		_spec.SetField(exam_applications_gdspa.FieldHallTicketGeneratedFlag, field.TypeBool, value)
	}
	if eaguo.mutation.HallTicketGeneratedFlagCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldHallTicketGeneratedFlag, field.TypeBool)
	}
	if value, ok := eaguo.mutation.GenerateHallTicketFlagByNO(); ok {
		_spec.SetField(exam_applications_gdspa.FieldGenerateHallTicketFlagByNO, field.TypeBool, value)
	}
	if eaguo.mutation.GenerateHallTicketFlagByNOCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldGenerateHallTicketFlagByNO, field.TypeBool)
	}
	if value, ok := eaguo.mutation.HallTicketGeneratedDate(); ok {
		_spec.SetField(exam_applications_gdspa.FieldHallTicketGeneratedDate, field.TypeTime, value)
	}
	if eaguo.mutation.HallTicketGeneratedDateCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldHallTicketGeneratedDate, field.TypeTime)
	}
	if value, ok := eaguo.mutation.TemporaryHallTicket(); ok {
		_spec.SetField(exam_applications_gdspa.FieldTemporaryHallTicket, field.TypeString, value)
	}
	if eaguo.mutation.TemporaryHallTicketCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldTemporaryHallTicket, field.TypeString)
	}
	if value, ok := eaguo.mutation.OptionUsed(); ok {
		_spec.SetField(exam_applications_gdspa.FieldOptionUsed, field.TypeString, value)
	}
	if eaguo.mutation.OptionUsedCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldOptionUsed, field.TypeString)
	}
	if value, ok := eaguo.mutation.Remarks(); ok {
		_spec.SetField(exam_applications_gdspa.FieldRemarks, field.TypeString, value)
	}
	if eaguo.mutation.RemarksCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldRemarks, field.TypeString)
	}
	if value, ok := eaguo.mutation.Cadre(); ok {
		_spec.SetField(exam_applications_gdspa.FieldCadre, field.TypeString, value)
	}
	if eaguo.mutation.CadreCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldCadre, field.TypeString)
	}
	if value, ok := eaguo.mutation.EmployeePost(); ok {
		_spec.SetField(exam_applications_gdspa.FieldEmployeePost, field.TypeString, value)
	}
	if eaguo.mutation.EmployeePostCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldEmployeePost, field.TypeString)
	}
	if value, ok := eaguo.mutation.DOJInEligiblePost(); ok {
		_spec.SetField(exam_applications_gdspa.FieldDOJInEligiblePost, field.TypeString, value)
	}
	if eaguo.mutation.DOJInEligiblePostCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldDOJInEligiblePost, field.TypeString)
	}
	if value, ok := eaguo.mutation.DivisionPreferences(); ok {
		_spec.SetField(exam_applications_gdspa.FieldDivisionPreferences, field.TypeJSON, value)
	}
	if value, ok := eaguo.mutation.AppendedDivisionPreferences(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, exam_applications_gdspa.FieldDivisionPreferences, value)
		})
	}
	if eaguo.mutation.DivisionPreferencesCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldDivisionPreferences, field.TypeJSON)
	}
	if value, ok := eaguo.mutation.ServiceLength(); ok {
		_spec.SetField(exam_applications_gdspa.FieldServiceLength, field.TypeJSON, value)
	}
	if value, ok := eaguo.mutation.AppendedServiceLength(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, exam_applications_gdspa.FieldServiceLength, value)
		})
	}
	if eaguo.mutation.ServiceLengthCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldServiceLength, field.TypeJSON)
	}
	if value, ok := eaguo.mutation.NonQualifyingService(); ok {
		_spec.SetField(exam_applications_gdspa.FieldNonQualifyingService, field.TypeJSON, value)
	}
	if value, ok := eaguo.mutation.AppendedNonQualifyingService(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, exam_applications_gdspa.FieldNonQualifyingService, value)
		})
	}
	if eaguo.mutation.NonQualifyingServiceCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldNonQualifyingService, field.TypeJSON)
	}
	if value, ok := eaguo.mutation.DCInPresentCadre(); ok {
		_spec.SetField(exam_applications_gdspa.FieldDCInPresentCadre, field.TypeString, value)
	}
	if eaguo.mutation.DCInPresentCadreCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldDCInPresentCadre, field.TypeString)
	}
	if value, ok := eaguo.mutation.ReportingOfficeID(); ok {
		_spec.SetField(exam_applications_gdspa.FieldReportingOfficeID, field.TypeString, value)
	}
	if eaguo.mutation.ReportingOfficeIDCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldReportingOfficeID, field.TypeString)
	}
	if value, ok := eaguo.mutation.PostPreferences(); ok {
		_spec.SetField(exam_applications_gdspa.FieldPostPreferences, field.TypeJSON, value)
	}
	if value, ok := eaguo.mutation.AppendedPostPreferences(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, exam_applications_gdspa.FieldPostPreferences, value)
		})
	}
	if eaguo.mutation.PostPreferencesCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldPostPreferences, field.TypeJSON)
	}
	if value, ok := eaguo.mutation.UnitPreferences(); ok {
		_spec.SetField(exam_applications_gdspa.FieldUnitPreferences, field.TypeJSON, value)
	}
	if value, ok := eaguo.mutation.AppendedUnitPreferences(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, exam_applications_gdspa.FieldUnitPreferences, value)
		})
	}
	if eaguo.mutation.UnitPreferencesCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldUnitPreferences, field.TypeJSON)
	}
	if value, ok := eaguo.mutation.CenterId(); ok {
		_spec.SetField(exam_applications_gdspa.FieldCenterId, field.TypeInt32, value)
	}
	if value, ok := eaguo.mutation.AddedCenterId(); ok {
		_spec.AddField(exam_applications_gdspa.FieldCenterId, field.TypeInt32, value)
	}
	if eaguo.mutation.CenterIdCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldCenterId, field.TypeInt32)
	}
	if value, ok := eaguo.mutation.ClaimingQualifyingService(); ok {
		_spec.SetField(exam_applications_gdspa.FieldClaimingQualifyingService, field.TypeString, value)
	}
	if eaguo.mutation.ClaimingQualifyingServiceCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldClaimingQualifyingService, field.TypeString)
	}
	if value, ok := eaguo.mutation.DeputationOfficePincode(); ok {
		_spec.SetField(exam_applications_gdspa.FieldDeputationOfficePincode, field.TypeString, value)
	}
	if eaguo.mutation.DeputationOfficePincodeCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldDeputationOfficePincode, field.TypeString)
	}
	if value, ok := eaguo.mutation.UpdatedAt(); ok {
		_spec.SetField(exam_applications_gdspa.FieldUpdatedAt, field.TypeTime, value)
	}
	if eaguo.mutation.UpdatedAtCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := eaguo.mutation.UpdatedBy(); ok {
		_spec.SetField(exam_applications_gdspa.FieldUpdatedBy, field.TypeString, value)
	}
	if eaguo.mutation.UpdatedByCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := eaguo.mutation.ApplicationWdlDate(); ok {
		_spec.SetField(exam_applications_gdspa.FieldApplicationWdlDate, field.TypeTime, value)
	}
	if eaguo.mutation.ApplicationWdlDateCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldApplicationWdlDate, field.TypeTime)
	}
	if value, ok := eaguo.mutation.ExamCenterHall(); ok {
		_spec.SetField(exam_applications_gdspa.FieldExamCenterHall, field.TypeInt32, value)
	}
	if value, ok := eaguo.mutation.AddedExamCenterHall(); ok {
		_spec.AddField(exam_applications_gdspa.FieldExamCenterHall, field.TypeInt32, value)
	}
	if eaguo.mutation.ExamCenterHallCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldExamCenterHall, field.TypeInt32)
	}
	if value, ok := eaguo.mutation.HallName(); ok {
		_spec.SetField(exam_applications_gdspa.FieldHallName, field.TypeString, value)
	}
	if eaguo.mutation.HallNameCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldHallName, field.TypeString)
	}
	if value, ok := eaguo.mutation.FacilityName(); ok {
		_spec.SetField(exam_applications_gdspa.FieldFacilityName, field.TypeString, value)
	}
	if eaguo.mutation.FacilityNameCleared() {
		_spec.ClearField(exam_applications_gdspa.FieldFacilityName, field.TypeString)
	}
	if eaguo.mutation.UsersGDSPARefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_applications_gdspa.UsersGDSPARefTable,
			Columns: []string{exam_applications_gdspa.UsersGDSPARefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usermaster.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eaguo.mutation.RemovedUsersGDSPARefIDs(); len(nodes) > 0 && !eaguo.mutation.UsersGDSPARefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_applications_gdspa.UsersGDSPARefTable,
			Columns: []string{exam_applications_gdspa.UsersGDSPARefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usermaster.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eaguo.mutation.UsersGDSPARefIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_applications_gdspa.UsersGDSPARefTable,
			Columns: []string{exam_applications_gdspa.UsersGDSPARefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usermaster.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eaguo.mutation.ExamcitycenterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   exam_applications_gdspa.ExamcitycenterTable,
			Columns: []string{exam_applications_gdspa.ExamcitycenterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(examcitycenter.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eaguo.mutation.ExamcitycenterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   exam_applications_gdspa.ExamcitycenterTable,
			Columns: []string{exam_applications_gdspa.ExamcitycenterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(examcitycenter.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eaguo.mutation.GDSPAExamCentresCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   exam_applications_gdspa.GDSPAExamCentresTable,
			Columns: []string{exam_applications_gdspa.GDSPAExamCentresColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(center.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eaguo.mutation.GDSPAExamCentresIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   exam_applications_gdspa.GDSPAExamCentresTable,
			Columns: []string{exam_applications_gdspa.GDSPAExamCentresColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(center.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eaguo.mutation.RoleusersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   exam_applications_gdspa.RoleusersTable,
			Columns: []string{exam_applications_gdspa.RoleusersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rolemaster.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eaguo.mutation.RoleusersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   exam_applications_gdspa.RoleusersTable,
			Columns: []string{exam_applications_gdspa.RoleusersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rolemaster.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eaguo.mutation.CadrePrefRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_applications_gdspa.CadrePrefRefTable,
			Columns: []string{exam_applications_gdspa.CadrePrefRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cadre_choice_pa.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eaguo.mutation.RemovedCadrePrefRefIDs(); len(nodes) > 0 && !eaguo.mutation.CadrePrefRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_applications_gdspa.CadrePrefRefTable,
			Columns: []string{exam_applications_gdspa.CadrePrefRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cadre_choice_pa.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eaguo.mutation.CadrePrefRefIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_applications_gdspa.CadrePrefRefTable,
			Columns: []string{exam_applications_gdspa.CadrePrefRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cadre_choice_pa.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eaguo.mutation.CirclePrefRefGDSPACleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_applications_gdspa.CirclePrefRefGDSPATable,
			Columns: []string{exam_applications_gdspa.CirclePrefRefGDSPAColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(division_choice_pa.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eaguo.mutation.RemovedCirclePrefRefGDSPAIDs(); len(nodes) > 0 && !eaguo.mutation.CirclePrefRefGDSPACleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_applications_gdspa.CirclePrefRefGDSPATable,
			Columns: []string{exam_applications_gdspa.CirclePrefRefGDSPAColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(division_choice_pa.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eaguo.mutation.CirclePrefRefGDSPAIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_applications_gdspa.CirclePrefRefGDSPATable,
			Columns: []string{exam_applications_gdspa.CirclePrefRefGDSPAColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(division_choice_pa.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eaguo.mutation.GDSPAApplicationsRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_applications_gdspa.GDSPAApplicationsRefTable,
			Columns: []string{exam_applications_gdspa.GDSPAApplicationsRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(recommendationsgdspaapplications.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eaguo.mutation.RemovedGDSPAApplicationsRefIDs(); len(nodes) > 0 && !eaguo.mutation.GDSPAApplicationsRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_applications_gdspa.GDSPAApplicationsRefTable,
			Columns: []string{exam_applications_gdspa.GDSPAApplicationsRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(recommendationsgdspaapplications.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eaguo.mutation.GDSPAApplicationsRefIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_applications_gdspa.GDSPAApplicationsRefTable,
			Columns: []string{exam_applications_gdspa.GDSPAApplicationsRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(recommendationsgdspaapplications.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eaguo.mutation.ExamsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   exam_applications_gdspa.ExamsTable,
			Columns: []string{exam_applications_gdspa.ExamsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eaguo.mutation.ExamsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   exam_applications_gdspa.ExamsTable,
			Columns: []string{exam_applications_gdspa.ExamsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eaguo.mutation.CircleRefsGDSPACleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   exam_applications_gdspa.CircleRefsGDSPATable,
			Columns: []string{exam_applications_gdspa.CircleRefsGDSPAColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(circlesummaryforno.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eaguo.mutation.CircleRefsGDSPAIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   exam_applications_gdspa.CircleRefsGDSPATable,
			Columns: []string{exam_applications_gdspa.CircleRefsGDSPAColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(circlesummaryforno.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eaguo.mutation.LogDataCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_applications_gdspa.LogDataTable,
			Columns: []string{exam_applications_gdspa.LogDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(logs.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eaguo.mutation.RemovedLogDataIDs(); len(nodes) > 0 && !eaguo.mutation.LogDataCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_applications_gdspa.LogDataTable,
			Columns: []string{exam_applications_gdspa.LogDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(logs.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eaguo.mutation.LogDataIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_applications_gdspa.LogDataTable,
			Columns: []string{exam_applications_gdspa.LogDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(logs.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Exam_Applications_GDSPA{config: eaguo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, eaguo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{exam_applications_gdspa.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	eaguo.mutation.done = true
	return _node, nil
}
