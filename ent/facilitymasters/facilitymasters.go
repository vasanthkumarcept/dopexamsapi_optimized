// Code generated by ent, DO NOT EDIT.

package facilitymasters

import (
	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the facilitymasters type in the database.
	Label = "facility_masters"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "uniqueid"
	// FieldFacilityID holds the string denoting the facilityid field in the database.
	FieldFacilityID = "facility_id"
	// FieldUUID holds the string denoting the uuid field in the database.
	FieldUUID = "uuid"
	// FieldFacilityType holds the string denoting the facilitytype field in the database.
	FieldFacilityType = "facility_type"
	// FieldFacilityIDDescription holds the string denoting the facilityiddescription field in the database.
	FieldFacilityIDDescription = "facility_id_description"
	// FieldReportingOfficeFacilityID holds the string denoting the reportingofficefacilityid field in the database.
	FieldReportingOfficeFacilityID = "reporting_office_facility_id"
	// FieldReportingOfficeFacilityName holds the string denoting the reportingofficefacilityname field in the database.
	FieldReportingOfficeFacilityName = "reporting_office_facility_name"
	// FieldHOFacilityID holds the string denoting the hofacilityid field in the database.
	FieldHOFacilityID = "ho_facility_id"
	// FieldHOFacilityName holds the string denoting the hofacilityname field in the database.
	FieldHOFacilityName = "ho_facility_name"
	// FieldSubDivisionFacilityID holds the string denoting the subdivisionfacilityid field in the database.
	FieldSubDivisionFacilityID = "sub_division_facility_id"
	// FieldSubDivisionFacilityName holds the string denoting the subdivisionfacilityname field in the database.
	FieldSubDivisionFacilityName = "sub_division_facility_name"
	// FieldDivisionFacilityID holds the string denoting the divisionfacilityid field in the database.
	FieldDivisionFacilityID = "division_facility_id"
	// FieldDivisionFacilityName holds the string denoting the divisionfacilityname field in the database.
	FieldDivisionFacilityName = "division_facility_name"
	// FieldRegionFacilityID holds the string denoting the regionfacilityid field in the database.
	FieldRegionFacilityID = "region_facility_id"
	// FieldRegionFacilityName holds the string denoting the regionfacilityname field in the database.
	FieldRegionFacilityName = "region_facility_name"
	// FieldCircleFacilityID holds the string denoting the circlefacilityid field in the database.
	FieldCircleFacilityID = "circle_facility_id"
	// FieldCircleFacilityName holds the string denoting the circlefacilityname field in the database.
	FieldCircleFacilityName = "circle_facility_name"
	// FieldPincode holds the string denoting the pincode field in the database.
	FieldPincode = "pincode"
	// FieldControllingAuthorityFacilityID holds the string denoting the controllingauthorityfacilityid field in the database.
	FieldControllingAuthorityFacilityID = "controlling_authority_facility_id"
	// FieldControllingAuthorityFacilityName holds the string denoting the controllingauthorityfacilityname field in the database.
	FieldControllingAuthorityFacilityName = "controlling_authority_facility_name"
	// FieldNodalOfficerFacilityID holds the string denoting the nodalofficerfacilityid field in the database.
	FieldNodalOfficerFacilityID = "nodal_officer_facility_id"
	// FieldNodalOfficerFacilityName holds the string denoting the nodalofficerfacilityname field in the database.
	FieldNodalOfficerFacilityName = "nodal_officer_facility_name"
	// FieldCityName holds the string denoting the cityname field in the database.
	FieldCityName = "city_name"
	// FieldHallCircleCode holds the string denoting the hallcirclecode field in the database.
	FieldHallCircleCode = "hall_circle_code"
	// FieldDeliveryNonDeliveryOffice holds the string denoting the deliverynondeliveryoffice field in the database.
	FieldDeliveryNonDeliveryOffice = "delivery_non_delivery_office"
	// FieldCreatedID holds the string denoting the createdid field in the database.
	FieldCreatedID = "created_id"
	// FieldCreatedBy holds the string denoting the createdby field in the database.
	FieldCreatedBy = "created_by"
	// FieldCreatedByName holds the string denoting the createdbyname field in the database.
	FieldCreatedByName = "created_by_name"
	// FieldCreatedByEmpID holds the string denoting the createdbyempid field in the database.
	FieldCreatedByEmpID = "created_by_emp_id"
	// FieldCircleCode holds the string denoting the circlecode field in the database.
	FieldCircleCode = "circle_code"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldEventTime holds the string denoting the eventtime field in the database.
	FieldEventTime = "event_time"
	// Table holds the table name of the facilitymasters in the database.
	Table = "FacilityMasters"
)

// Columns holds all SQL columns for facilitymasters fields.
var Columns = []string{
	FieldID,
	FieldFacilityID,
	FieldUUID,
	FieldFacilityType,
	FieldFacilityIDDescription,
	FieldReportingOfficeFacilityID,
	FieldReportingOfficeFacilityName,
	FieldHOFacilityID,
	FieldHOFacilityName,
	FieldSubDivisionFacilityID,
	FieldSubDivisionFacilityName,
	FieldDivisionFacilityID,
	FieldDivisionFacilityName,
	FieldRegionFacilityID,
	FieldRegionFacilityName,
	FieldCircleFacilityID,
	FieldCircleFacilityName,
	FieldPincode,
	FieldControllingAuthorityFacilityID,
	FieldControllingAuthorityFacilityName,
	FieldNodalOfficerFacilityID,
	FieldNodalOfficerFacilityName,
	FieldCityName,
	FieldHallCircleCode,
	FieldDeliveryNonDeliveryOffice,
	FieldCreatedID,
	FieldCreatedBy,
	FieldCreatedByName,
	FieldCreatedByEmpID,
	FieldCircleCode,
	FieldStatus,
	FieldEventTime,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultStatus holds the default value on creation for the "Status" field.
	DefaultStatus string
	// IDValidator is a validator for the "id" field. It is called by the builders before save.
	IDValidator func(int32) error
)

// OrderOption defines the ordering options for the FacilityMasters queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByFacilityID orders the results by the FacilityID field.
func ByFacilityID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFacilityID, opts...).ToFunc()
}

// ByUUID orders the results by the UUID field.
func ByUUID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUUID, opts...).ToFunc()
}

// ByFacilityType orders the results by the FacilityType field.
func ByFacilityType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFacilityType, opts...).ToFunc()
}

// ByFacilityIDDescription orders the results by the FacilityIDDescription field.
func ByFacilityIDDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFacilityIDDescription, opts...).ToFunc()
}

// ByReportingOfficeFacilityID orders the results by the ReportingOfficeFacilityID field.
func ByReportingOfficeFacilityID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldReportingOfficeFacilityID, opts...).ToFunc()
}

// ByReportingOfficeFacilityName orders the results by the ReportingOfficeFacilityName field.
func ByReportingOfficeFacilityName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldReportingOfficeFacilityName, opts...).ToFunc()
}

// ByHOFacilityID orders the results by the HOFacilityID field.
func ByHOFacilityID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHOFacilityID, opts...).ToFunc()
}

// ByHOFacilityName orders the results by the HOFacilityName field.
func ByHOFacilityName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHOFacilityName, opts...).ToFunc()
}

// BySubDivisionFacilityID orders the results by the SubDivisionFacilityID field.
func BySubDivisionFacilityID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSubDivisionFacilityID, opts...).ToFunc()
}

// BySubDivisionFacilityName orders the results by the SubDivisionFacilityName field.
func BySubDivisionFacilityName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSubDivisionFacilityName, opts...).ToFunc()
}

// ByDivisionFacilityID orders the results by the DivisionFacilityID field.
func ByDivisionFacilityID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDivisionFacilityID, opts...).ToFunc()
}

// ByDivisionFacilityName orders the results by the DivisionFacilityName field.
func ByDivisionFacilityName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDivisionFacilityName, opts...).ToFunc()
}

// ByRegionFacilityID orders the results by the RegionFacilityID field.
func ByRegionFacilityID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRegionFacilityID, opts...).ToFunc()
}

// ByRegionFacilityName orders the results by the RegionFacilityName field.
func ByRegionFacilityName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRegionFacilityName, opts...).ToFunc()
}

// ByCircleFacilityID orders the results by the CircleFacilityID field.
func ByCircleFacilityID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCircleFacilityID, opts...).ToFunc()
}

// ByCircleFacilityName orders the results by the CircleFacilityName field.
func ByCircleFacilityName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCircleFacilityName, opts...).ToFunc()
}

// ByPincode orders the results by the Pincode field.
func ByPincode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPincode, opts...).ToFunc()
}

// ByControllingAuthorityFacilityID orders the results by the ControllingAuthorityFacilityID field.
func ByControllingAuthorityFacilityID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldControllingAuthorityFacilityID, opts...).ToFunc()
}

// ByControllingAuthorityFacilityName orders the results by the ControllingAuthorityFacilityName field.
func ByControllingAuthorityFacilityName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldControllingAuthorityFacilityName, opts...).ToFunc()
}

// ByNodalOfficerFacilityID orders the results by the NodalOfficerFacilityID field.
func ByNodalOfficerFacilityID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNodalOfficerFacilityID, opts...).ToFunc()
}

// ByNodalOfficerFacilityName orders the results by the NodalOfficerFacilityName field.
func ByNodalOfficerFacilityName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNodalOfficerFacilityName, opts...).ToFunc()
}

// ByCityName orders the results by the CityName field.
func ByCityName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCityName, opts...).ToFunc()
}

// ByHallCircleCode orders the results by the HallCircleCode field.
func ByHallCircleCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHallCircleCode, opts...).ToFunc()
}

// ByDeliveryNonDeliveryOffice orders the results by the DeliveryNonDeliveryOffice field.
func ByDeliveryNonDeliveryOffice(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeliveryNonDeliveryOffice, opts...).ToFunc()
}

// ByCreatedID orders the results by the CreatedID field.
func ByCreatedID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedID, opts...).ToFunc()
}

// ByCreatedBy orders the results by the CreatedBy field.
func ByCreatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedBy, opts...).ToFunc()
}

// ByCreatedByName orders the results by the CreatedByName field.
func ByCreatedByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedByName, opts...).ToFunc()
}

// ByCreatedByEmpID orders the results by the CreatedByEmpID field.
func ByCreatedByEmpID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedByEmpID, opts...).ToFunc()
}

// ByCircleCode orders the results by the CircleCode field.
func ByCircleCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCircleCode, opts...).ToFunc()
}

// ByStatus orders the results by the Status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByEventTime orders the results by the EventTime field.
func ByEventTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEventTime, opts...).ToFunc()
}
