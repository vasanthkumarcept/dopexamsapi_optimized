// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"recruit/ent/circlesummaryforno"
	"recruit/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CircleSummaryForNODelete is the builder for deleting a CircleSummaryForNO entity.
type CircleSummaryForNODelete struct {
	config
	hooks    []Hook
	mutation *CircleSummaryForNOMutation
}

// Where appends a list predicates to the CircleSummaryForNODelete builder.
func (csfnd *CircleSummaryForNODelete) Where(ps ...predicate.CircleSummaryForNO) *CircleSummaryForNODelete {
	csfnd.mutation.Where(ps...)
	return csfnd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (csfnd *CircleSummaryForNODelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, csfnd.sqlExec, csfnd.mutation, csfnd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (csfnd *CircleSummaryForNODelete) ExecX(ctx context.Context) int {
	n, err := csfnd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (csfnd *CircleSummaryForNODelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(circlesummaryforno.Table, sqlgraph.NewFieldSpec(circlesummaryforno.FieldID, field.TypeInt32))
	if ps := csfnd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, csfnd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	csfnd.mutation.done = true
	return affected, err
}

// CircleSummaryForNODeleteOne is the builder for deleting a single CircleSummaryForNO entity.
type CircleSummaryForNODeleteOne struct {
	csfnd *CircleSummaryForNODelete
}

// Where appends a list predicates to the CircleSummaryForNODelete builder.
func (csfndo *CircleSummaryForNODeleteOne) Where(ps ...predicate.CircleSummaryForNO) *CircleSummaryForNODeleteOne {
	csfndo.csfnd.mutation.Where(ps...)
	return csfndo
}

// Exec executes the deletion query.
func (csfndo *CircleSummaryForNODeleteOne) Exec(ctx context.Context) error {
	n, err := csfndo.csfnd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{circlesummaryforno.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (csfndo *CircleSummaryForNODeleteOne) ExecX(ctx context.Context) {
	if err := csfndo.Exec(ctx); err != nil {
		panic(err)
	}
}
