// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"recruit/ent/rolemaster"
	"recruit/ent/usermaster"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// UserMaster is the model entity for the UserMaster schema.
type UserMaster struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// EmployeeID holds the value of the "EmployeeID" field.
	EmployeeID int64 `json:"EmployeeID,omitempty"`
	// EmployeeName holds the value of the "EmployeeName" field.
	EmployeeName string `json:"EmployeeName,omitempty"`
	// Mobile holds the value of the "Mobile" field.
	Mobile string `json:"Mobile,omitempty"`
	// EmailID holds the value of the "EmailID" field.
	EmailID string `json:"EmailID,omitempty"`
	// UserName holds the value of the "UserName" field.
	UserName string `json:"UserName,omitempty"`
	// Password holds the value of the "Password" field.
	Password string `json:"Password,omitempty"`
	// Status holds the value of the "Status" field.
	Status bool `json:"Status,omitempty"`
	// Statuss holds the value of the "Statuss" field.
	Statuss string `json:"Statuss,omitempty"`
	// OTP holds the value of the "OTP" field.
	OTP int32 `json:"OTP,omitempty"`
	// OTPNew holds the value of the "OTPNew" field.
	OTPNew int32 `json:"OTPNew,omitempty"`
	// EmailOTPNew holds the value of the "EmailOTPNew" field.
	EmailOTPNew int32 `json:"EmailOTPNew,omitempty"`
	// OTPRemarks holds the value of the "OTPRemarks" field.
	OTPRemarks string `json:"OTPRemarks,omitempty"`
	// CreatedAt holds the value of the "CreatedAt" field.
	CreatedAt time.Time `json:"CreatedAt,omitempty"`
	// OTPTriggeredTime holds the value of the "OTPTriggeredTime" field.
	OTPTriggeredTime time.Time `json:"OTPTriggeredTime,omitempty"`
	// OTPSavedTime holds the value of the "OTPSavedTime" field.
	OTPSavedTime time.Time `json:"OTPSavedTime,omitempty"`
	// OTPExpiryTime holds the value of the "OTPExpiryTime" field.
	OTPExpiryTime time.Time `json:"OTPExpiryTime,omitempty"`
	// NewPasswordRequest holds the value of the "NewPasswordRequest" field.
	NewPasswordRequest bool `json:"NewPasswordRequest,omitempty"`
	// EmailOTP holds the value of the "EmailOTP" field.
	EmailOTP int32 `json:"EmailOTP,omitempty"`
	// EmailOTPRemarks holds the value of the "EmailOTPRemarks" field.
	EmailOTPRemarks string `json:"EmailOTPRemarks,omitempty"`
	// EmailCreatedAt holds the value of the "EmailCreatedAt" field.
	EmailCreatedAt time.Time `json:"EmailCreatedAt,omitempty"`
	// EmailOTPTriggeredTime holds the value of the "EmailOTPTriggeredTime" field.
	EmailOTPTriggeredTime time.Time `json:"EmailOTPTriggeredTime,omitempty"`
	// EmailOTPSavedTime holds the value of the "EmailOTPSavedTime" field.
	EmailOTPSavedTime time.Time `json:"EmailOTPSavedTime,omitempty"`
	// EmailOTPExpiryTime holds the value of the "EmailOTPExpiryTime" field.
	EmailOTPExpiryTime time.Time `json:"EmailOTPExpiryTime,omitempty"`
	// EmailNewPasswordRequest holds the value of the "EmailNewPasswordRequest" field.
	EmailNewPasswordRequest bool `json:"EmailNewPasswordRequest,omitempty"`
	// UidToken holds the value of the "UidToken" field.
	UidToken string `json:"UidToken,omitempty"`
	// CreatedById holds the value of the "CreatedById" field.
	CreatedById int64 `json:"CreatedById,omitempty"`
	// CreatedByEmployeeId holds the value of the "CreatedByEmployeeId" field.
	CreatedByEmployeeId string `json:"CreatedByEmployeeId,omitempty"`
	// CreatedByUserName holds the value of the "CreatedByUserName" field.
	CreatedByUserName string `json:"CreatedByUserName,omitempty"`
	// CreatedByDesignation holds the value of the "CreatedByDesignation" field.
	CreatedByDesignation string `json:"CreatedByDesignation,omitempty"`
	// CreatedDate holds the value of the "CreatedDate" field.
	CreatedDate time.Time `json:"CreatedDate,omitempty"`
	// DeletedById holds the value of the "DeletedById" field.
	DeletedById int64 `json:"DeletedById,omitempty"`
	// DeletedByEmployeeId holds the value of the "DeletedByEmployeeId" field.
	DeletedByEmployeeId string `json:"DeletedByEmployeeId,omitempty"`
	// DeletedByUserName holds the value of the "DeletedByUserName" field.
	DeletedByUserName string `json:"DeletedByUserName,omitempty"`
	// DeletedByDesignation holds the value of the "DeletedByDesignation" field.
	DeletedByDesignation string `json:"DeletedByDesignation,omitempty"`
	// DeletedDate holds the value of the "DeletedDate" field.
	DeletedDate time.Time `json:"DeletedDate,omitempty"`
	// FacilityID holds the value of the "FacilityID" field.
	FacilityID string `json:"FacilityID,omitempty"`
	// CircleFacilityId holds the value of the "CircleFacilityId" field.
	CircleFacilityId string `json:"CircleFacilityId,omitempty"`
	// CircleFacilityName holds the value of the "CircleFacilityName" field.
	CircleFacilityName string `json:"CircleFacilityName,omitempty"`
	// Designation holds the value of the "Designation" field.
	Designation string `json:"Designation,omitempty"`
	// RoleUserCode holds the value of the "RoleUserCode" field.
	RoleUserCode int32 `json:"RoleUserCode,omitempty"`
	// Updatedby holds the value of the "Updatedby" field.
	Updatedby string `json:"Updatedby,omitempty"`
	// UpdatedDate holds the value of the "updatedDate" field.
	UpdatedDate time.Time `json:"updatedDate,omitempty"`
	// Modifiedby holds the value of the "Modifiedby" field.
	Modifiedby string `json:"Modifiedby,omitempty"`
	// ModifiedDate holds the value of the "ModifiedDate" field.
	ModifiedDate time.Time `json:"ModifiedDate,omitempty"`
	// Operationstatus holds the value of the "Operationstatus" field.
	Operationstatus string `json:"Operationstatus,omitempty"`
	// ExamCode holds the value of the "ExamCode" field.
	ExamCode int32 `json:"ExamCode,omitempty"`
	// ExamCodePS holds the value of the "ExamCodePS" field.
	ExamCodePS int32 `json:"ExamCodePS,omitempty"`
	// Gender holds the value of the "Gender" field.
	Gender usermaster.Gender `json:"Gender,omitempty"`
	// DOB holds the value of the "DOB" field.
	DOB string `json:"DOB,omitempty"`
	// CreatedBy holds the value of the "CreatedBy" field.
	CreatedBy string `json:"CreatedBy,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserMasterQuery when eager-loading is set.
	Edges                                      UserMasterEdges `json:"edges"`
	circle_summary_for_no_circleusers          *int32
	employee_master_usermaster_ref             *int64
	exam_application_mtspmmg_users_mtspmmg_ref *int64
	exam_applications_gdspa_users_gdspa_ref    *int64
	exam_applications_gdspm_users_gdspm_ref    *int64
	exam_applications_ip_users_ip_ref          *int64
	exam_applications_pmpa_users_pmpa_ref      *int64
	exam_applications_ps_users_ps_ref          *int64
	selectValues                               sql.SelectValues
}

// UserMasterEdges holds the relations/edges for other nodes in the graph.
type UserMasterEdges struct {
	// Roles holds the value of the roles edge.
	Roles *RoleMaster `json:"roles,omitempty"`
	// UsermasterRef holds the value of the UsermasterRef edge.
	UsermasterRef []*EmployeeMaster `json:"UsermasterRef,omitempty"`
	// UsersPSRef holds the value of the UsersPSRef edge.
	UsersPSRef []*Exam_Applications_PS `json:"UsersPSRef,omitempty"`
	// UsersIPRef holds the value of the UsersIPRef edge.
	UsersIPRef []*Exam_Applications_IP `json:"UsersIPRef,omitempty"`
	// UserIDRef holds the value of the User_ID_Ref edge.
	UserIDRef []*ExamNotifications `json:"User_ID_Ref,omitempty"`
	// UsersGDSPARef holds the value of the UsersGDSPARef edge.
	UsersGDSPARef []*Exam_Applications_GDSPA `json:"UsersGDSPARef,omitempty"`
	// UsersPMPARef holds the value of the UsersPMPARef edge.
	UsersPMPARef []*Exam_Applications_PMPA `json:"UsersPMPARef,omitempty"`
	// UsersGDSPMRef holds the value of the UsersGDSPMRef edge.
	UsersGDSPMRef []*Exam_Applications_GDSPM `json:"UsersGDSPMRef,omitempty"`
	// LogData holds the value of the LogData edge.
	LogData []*Logs `json:"LogData,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [9]bool
}

// RolesOrErr returns the Roles value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserMasterEdges) RolesOrErr() (*RoleMaster, error) {
	if e.loadedTypes[0] {
		if e.Roles == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: rolemaster.Label}
		}
		return e.Roles, nil
	}
	return nil, &NotLoadedError{edge: "roles"}
}

// UsermasterRefOrErr returns the UsermasterRef value or an error if the edge
// was not loaded in eager-loading.
func (e UserMasterEdges) UsermasterRefOrErr() ([]*EmployeeMaster, error) {
	if e.loadedTypes[1] {
		return e.UsermasterRef, nil
	}
	return nil, &NotLoadedError{edge: "UsermasterRef"}
}

// UsersPSRefOrErr returns the UsersPSRef value or an error if the edge
// was not loaded in eager-loading.
func (e UserMasterEdges) UsersPSRefOrErr() ([]*Exam_Applications_PS, error) {
	if e.loadedTypes[2] {
		return e.UsersPSRef, nil
	}
	return nil, &NotLoadedError{edge: "UsersPSRef"}
}

// UsersIPRefOrErr returns the UsersIPRef value or an error if the edge
// was not loaded in eager-loading.
func (e UserMasterEdges) UsersIPRefOrErr() ([]*Exam_Applications_IP, error) {
	if e.loadedTypes[3] {
		return e.UsersIPRef, nil
	}
	return nil, &NotLoadedError{edge: "UsersIPRef"}
}

// UserIDRefOrErr returns the UserIDRef value or an error if the edge
// was not loaded in eager-loading.
func (e UserMasterEdges) UserIDRefOrErr() ([]*ExamNotifications, error) {
	if e.loadedTypes[4] {
		return e.UserIDRef, nil
	}
	return nil, &NotLoadedError{edge: "User_ID_Ref"}
}

// UsersGDSPARefOrErr returns the UsersGDSPARef value or an error if the edge
// was not loaded in eager-loading.
func (e UserMasterEdges) UsersGDSPARefOrErr() ([]*Exam_Applications_GDSPA, error) {
	if e.loadedTypes[5] {
		return e.UsersGDSPARef, nil
	}
	return nil, &NotLoadedError{edge: "UsersGDSPARef"}
}

// UsersPMPARefOrErr returns the UsersPMPARef value or an error if the edge
// was not loaded in eager-loading.
func (e UserMasterEdges) UsersPMPARefOrErr() ([]*Exam_Applications_PMPA, error) {
	if e.loadedTypes[6] {
		return e.UsersPMPARef, nil
	}
	return nil, &NotLoadedError{edge: "UsersPMPARef"}
}

// UsersGDSPMRefOrErr returns the UsersGDSPMRef value or an error if the edge
// was not loaded in eager-loading.
func (e UserMasterEdges) UsersGDSPMRefOrErr() ([]*Exam_Applications_GDSPM, error) {
	if e.loadedTypes[7] {
		return e.UsersGDSPMRef, nil
	}
	return nil, &NotLoadedError{edge: "UsersGDSPMRef"}
}

// LogDataOrErr returns the LogData value or an error if the edge
// was not loaded in eager-loading.
func (e UserMasterEdges) LogDataOrErr() ([]*Logs, error) {
	if e.loadedTypes[8] {
		return e.LogData, nil
	}
	return nil, &NotLoadedError{edge: "LogData"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UserMaster) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case usermaster.FieldStatus, usermaster.FieldNewPasswordRequest, usermaster.FieldEmailNewPasswordRequest:
			values[i] = new(sql.NullBool)
		case usermaster.FieldID, usermaster.FieldEmployeeID, usermaster.FieldOTP, usermaster.FieldOTPNew, usermaster.FieldEmailOTPNew, usermaster.FieldEmailOTP, usermaster.FieldCreatedById, usermaster.FieldDeletedById, usermaster.FieldRoleUserCode, usermaster.FieldExamCode, usermaster.FieldExamCodePS:
			values[i] = new(sql.NullInt64)
		case usermaster.FieldEmployeeName, usermaster.FieldMobile, usermaster.FieldEmailID, usermaster.FieldUserName, usermaster.FieldPassword, usermaster.FieldStatuss, usermaster.FieldOTPRemarks, usermaster.FieldEmailOTPRemarks, usermaster.FieldUidToken, usermaster.FieldCreatedByEmployeeId, usermaster.FieldCreatedByUserName, usermaster.FieldCreatedByDesignation, usermaster.FieldDeletedByEmployeeId, usermaster.FieldDeletedByUserName, usermaster.FieldDeletedByDesignation, usermaster.FieldFacilityID, usermaster.FieldCircleFacilityId, usermaster.FieldCircleFacilityName, usermaster.FieldDesignation, usermaster.FieldUpdatedby, usermaster.FieldModifiedby, usermaster.FieldOperationstatus, usermaster.FieldGender, usermaster.FieldDOB, usermaster.FieldCreatedBy:
			values[i] = new(sql.NullString)
		case usermaster.FieldCreatedAt, usermaster.FieldOTPTriggeredTime, usermaster.FieldOTPSavedTime, usermaster.FieldOTPExpiryTime, usermaster.FieldEmailCreatedAt, usermaster.FieldEmailOTPTriggeredTime, usermaster.FieldEmailOTPSavedTime, usermaster.FieldEmailOTPExpiryTime, usermaster.FieldCreatedDate, usermaster.FieldDeletedDate, usermaster.FieldUpdatedDate, usermaster.FieldModifiedDate:
			values[i] = new(sql.NullTime)
		case usermaster.ForeignKeys[0]: // circle_summary_for_no_circleusers
			values[i] = new(sql.NullInt64)
		case usermaster.ForeignKeys[1]: // employee_master_usermaster_ref
			values[i] = new(sql.NullInt64)
		case usermaster.ForeignKeys[2]: // exam_application_mtspmmg_users_mtspmmg_ref
			values[i] = new(sql.NullInt64)
		case usermaster.ForeignKeys[3]: // exam_applications_gdspa_users_gdspa_ref
			values[i] = new(sql.NullInt64)
		case usermaster.ForeignKeys[4]: // exam_applications_gdspm_users_gdspm_ref
			values[i] = new(sql.NullInt64)
		case usermaster.ForeignKeys[5]: // exam_applications_ip_users_ip_ref
			values[i] = new(sql.NullInt64)
		case usermaster.ForeignKeys[6]: // exam_applications_pmpa_users_pmpa_ref
			values[i] = new(sql.NullInt64)
		case usermaster.ForeignKeys[7]: // exam_applications_ps_users_ps_ref
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UserMaster fields.
func (um *UserMaster) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case usermaster.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			um.ID = int64(value.Int64)
		case usermaster.FieldEmployeeID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field EmployeeID", values[i])
			} else if value.Valid {
				um.EmployeeID = value.Int64
			}
		case usermaster.FieldEmployeeName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field EmployeeName", values[i])
			} else if value.Valid {
				um.EmployeeName = value.String
			}
		case usermaster.FieldMobile:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Mobile", values[i])
			} else if value.Valid {
				um.Mobile = value.String
			}
		case usermaster.FieldEmailID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field EmailID", values[i])
			} else if value.Valid {
				um.EmailID = value.String
			}
		case usermaster.FieldUserName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field UserName", values[i])
			} else if value.Valid {
				um.UserName = value.String
			}
		case usermaster.FieldPassword:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Password", values[i])
			} else if value.Valid {
				um.Password = value.String
			}
		case usermaster.FieldStatus:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field Status", values[i])
			} else if value.Valid {
				um.Status = value.Bool
			}
		case usermaster.FieldStatuss:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Statuss", values[i])
			} else if value.Valid {
				um.Statuss = value.String
			}
		case usermaster.FieldOTP:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field OTP", values[i])
			} else if value.Valid {
				um.OTP = int32(value.Int64)
			}
		case usermaster.FieldOTPNew:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field OTPNew", values[i])
			} else if value.Valid {
				um.OTPNew = int32(value.Int64)
			}
		case usermaster.FieldEmailOTPNew:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field EmailOTPNew", values[i])
			} else if value.Valid {
				um.EmailOTPNew = int32(value.Int64)
			}
		case usermaster.FieldOTPRemarks:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field OTPRemarks", values[i])
			} else if value.Valid {
				um.OTPRemarks = value.String
			}
		case usermaster.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field CreatedAt", values[i])
			} else if value.Valid {
				um.CreatedAt = value.Time
			}
		case usermaster.FieldOTPTriggeredTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field OTPTriggeredTime", values[i])
			} else if value.Valid {
				um.OTPTriggeredTime = value.Time
			}
		case usermaster.FieldOTPSavedTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field OTPSavedTime", values[i])
			} else if value.Valid {
				um.OTPSavedTime = value.Time
			}
		case usermaster.FieldOTPExpiryTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field OTPExpiryTime", values[i])
			} else if value.Valid {
				um.OTPExpiryTime = value.Time
			}
		case usermaster.FieldNewPasswordRequest:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field NewPasswordRequest", values[i])
			} else if value.Valid {
				um.NewPasswordRequest = value.Bool
			}
		case usermaster.FieldEmailOTP:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field EmailOTP", values[i])
			} else if value.Valid {
				um.EmailOTP = int32(value.Int64)
			}
		case usermaster.FieldEmailOTPRemarks:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field EmailOTPRemarks", values[i])
			} else if value.Valid {
				um.EmailOTPRemarks = value.String
			}
		case usermaster.FieldEmailCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field EmailCreatedAt", values[i])
			} else if value.Valid {
				um.EmailCreatedAt = value.Time
			}
		case usermaster.FieldEmailOTPTriggeredTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field EmailOTPTriggeredTime", values[i])
			} else if value.Valid {
				um.EmailOTPTriggeredTime = value.Time
			}
		case usermaster.FieldEmailOTPSavedTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field EmailOTPSavedTime", values[i])
			} else if value.Valid {
				um.EmailOTPSavedTime = value.Time
			}
		case usermaster.FieldEmailOTPExpiryTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field EmailOTPExpiryTime", values[i])
			} else if value.Valid {
				um.EmailOTPExpiryTime = value.Time
			}
		case usermaster.FieldEmailNewPasswordRequest:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field EmailNewPasswordRequest", values[i])
			} else if value.Valid {
				um.EmailNewPasswordRequest = value.Bool
			}
		case usermaster.FieldUidToken:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field UidToken", values[i])
			} else if value.Valid {
				um.UidToken = value.String
			}
		case usermaster.FieldCreatedById:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field CreatedById", values[i])
			} else if value.Valid {
				um.CreatedById = value.Int64
			}
		case usermaster.FieldCreatedByEmployeeId:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field CreatedByEmployeeId", values[i])
			} else if value.Valid {
				um.CreatedByEmployeeId = value.String
			}
		case usermaster.FieldCreatedByUserName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field CreatedByUserName", values[i])
			} else if value.Valid {
				um.CreatedByUserName = value.String
			}
		case usermaster.FieldCreatedByDesignation:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field CreatedByDesignation", values[i])
			} else if value.Valid {
				um.CreatedByDesignation = value.String
			}
		case usermaster.FieldCreatedDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field CreatedDate", values[i])
			} else if value.Valid {
				um.CreatedDate = value.Time
			}
		case usermaster.FieldDeletedById:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field DeletedById", values[i])
			} else if value.Valid {
				um.DeletedById = value.Int64
			}
		case usermaster.FieldDeletedByEmployeeId:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field DeletedByEmployeeId", values[i])
			} else if value.Valid {
				um.DeletedByEmployeeId = value.String
			}
		case usermaster.FieldDeletedByUserName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field DeletedByUserName", values[i])
			} else if value.Valid {
				um.DeletedByUserName = value.String
			}
		case usermaster.FieldDeletedByDesignation:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field DeletedByDesignation", values[i])
			} else if value.Valid {
				um.DeletedByDesignation = value.String
			}
		case usermaster.FieldDeletedDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field DeletedDate", values[i])
			} else if value.Valid {
				um.DeletedDate = value.Time
			}
		case usermaster.FieldFacilityID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field FacilityID", values[i])
			} else if value.Valid {
				um.FacilityID = value.String
			}
		case usermaster.FieldCircleFacilityId:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field CircleFacilityId", values[i])
			} else if value.Valid {
				um.CircleFacilityId = value.String
			}
		case usermaster.FieldCircleFacilityName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field CircleFacilityName", values[i])
			} else if value.Valid {
				um.CircleFacilityName = value.String
			}
		case usermaster.FieldDesignation:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Designation", values[i])
			} else if value.Valid {
				um.Designation = value.String
			}
		case usermaster.FieldRoleUserCode:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field RoleUserCode", values[i])
			} else if value.Valid {
				um.RoleUserCode = int32(value.Int64)
			}
		case usermaster.FieldUpdatedby:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Updatedby", values[i])
			} else if value.Valid {
				um.Updatedby = value.String
			}
		case usermaster.FieldUpdatedDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updatedDate", values[i])
			} else if value.Valid {
				um.UpdatedDate = value.Time
			}
		case usermaster.FieldModifiedby:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Modifiedby", values[i])
			} else if value.Valid {
				um.Modifiedby = value.String
			}
		case usermaster.FieldModifiedDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field ModifiedDate", values[i])
			} else if value.Valid {
				um.ModifiedDate = value.Time
			}
		case usermaster.FieldOperationstatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Operationstatus", values[i])
			} else if value.Valid {
				um.Operationstatus = value.String
			}
		case usermaster.FieldExamCode:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field ExamCode", values[i])
			} else if value.Valid {
				um.ExamCode = int32(value.Int64)
			}
		case usermaster.FieldExamCodePS:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field ExamCodePS", values[i])
			} else if value.Valid {
				um.ExamCodePS = int32(value.Int64)
			}
		case usermaster.FieldGender:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Gender", values[i])
			} else if value.Valid {
				um.Gender = usermaster.Gender(value.String)
			}
		case usermaster.FieldDOB:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field DOB", values[i])
			} else if value.Valid {
				um.DOB = value.String
			}
		case usermaster.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field CreatedBy", values[i])
			} else if value.Valid {
				um.CreatedBy = value.String
			}
		case usermaster.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field circle_summary_for_no_circleusers", value)
			} else if value.Valid {
				um.circle_summary_for_no_circleusers = new(int32)
				*um.circle_summary_for_no_circleusers = int32(value.Int64)
			}
		case usermaster.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field employee_master_usermaster_ref", value)
			} else if value.Valid {
				um.employee_master_usermaster_ref = new(int64)
				*um.employee_master_usermaster_ref = int64(value.Int64)
			}
		case usermaster.ForeignKeys[2]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field exam_application_mtspmmg_users_mtspmmg_ref", value)
			} else if value.Valid {
				um.exam_application_mtspmmg_users_mtspmmg_ref = new(int64)
				*um.exam_application_mtspmmg_users_mtspmmg_ref = int64(value.Int64)
			}
		case usermaster.ForeignKeys[3]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field exam_applications_gdspa_users_gdspa_ref", value)
			} else if value.Valid {
				um.exam_applications_gdspa_users_gdspa_ref = new(int64)
				*um.exam_applications_gdspa_users_gdspa_ref = int64(value.Int64)
			}
		case usermaster.ForeignKeys[4]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field exam_applications_gdspm_users_gdspm_ref", value)
			} else if value.Valid {
				um.exam_applications_gdspm_users_gdspm_ref = new(int64)
				*um.exam_applications_gdspm_users_gdspm_ref = int64(value.Int64)
			}
		case usermaster.ForeignKeys[5]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field exam_applications_ip_users_ip_ref", value)
			} else if value.Valid {
				um.exam_applications_ip_users_ip_ref = new(int64)
				*um.exam_applications_ip_users_ip_ref = int64(value.Int64)
			}
		case usermaster.ForeignKeys[6]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field exam_applications_pmpa_users_pmpa_ref", value)
			} else if value.Valid {
				um.exam_applications_pmpa_users_pmpa_ref = new(int64)
				*um.exam_applications_pmpa_users_pmpa_ref = int64(value.Int64)
			}
		case usermaster.ForeignKeys[7]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field exam_applications_ps_users_ps_ref", value)
			} else if value.Valid {
				um.exam_applications_ps_users_ps_ref = new(int64)
				*um.exam_applications_ps_users_ps_ref = int64(value.Int64)
			}
		default:
			um.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the UserMaster.
// This includes values selected through modifiers, order, etc.
func (um *UserMaster) Value(name string) (ent.Value, error) {
	return um.selectValues.Get(name)
}

// QueryRoles queries the "roles" edge of the UserMaster entity.
func (um *UserMaster) QueryRoles() *RoleMasterQuery {
	return NewUserMasterClient(um.config).QueryRoles(um)
}

// QueryUsermasterRef queries the "UsermasterRef" edge of the UserMaster entity.
func (um *UserMaster) QueryUsermasterRef() *EmployeeMasterQuery {
	return NewUserMasterClient(um.config).QueryUsermasterRef(um)
}

// QueryUsersPSRef queries the "UsersPSRef" edge of the UserMaster entity.
func (um *UserMaster) QueryUsersPSRef() *ExamApplicationsPSQuery {
	return NewUserMasterClient(um.config).QueryUsersPSRef(um)
}

// QueryUsersIPRef queries the "UsersIPRef" edge of the UserMaster entity.
func (um *UserMaster) QueryUsersIPRef() *ExamApplicationsIPQuery {
	return NewUserMasterClient(um.config).QueryUsersIPRef(um)
}

// QueryUserIDRef queries the "User_ID_Ref" edge of the UserMaster entity.
func (um *UserMaster) QueryUserIDRef() *ExamNotificationsQuery {
	return NewUserMasterClient(um.config).QueryUserIDRef(um)
}

// QueryUsersGDSPARef queries the "UsersGDSPARef" edge of the UserMaster entity.
func (um *UserMaster) QueryUsersGDSPARef() *ExamApplicationsGDSPAQuery {
	return NewUserMasterClient(um.config).QueryUsersGDSPARef(um)
}

// QueryUsersPMPARef queries the "UsersPMPARef" edge of the UserMaster entity.
func (um *UserMaster) QueryUsersPMPARef() *ExamApplicationsPMPAQuery {
	return NewUserMasterClient(um.config).QueryUsersPMPARef(um)
}

// QueryUsersGDSPMRef queries the "UsersGDSPMRef" edge of the UserMaster entity.
func (um *UserMaster) QueryUsersGDSPMRef() *ExamApplicationsGDSPMQuery {
	return NewUserMasterClient(um.config).QueryUsersGDSPMRef(um)
}

// QueryLogData queries the "LogData" edge of the UserMaster entity.
func (um *UserMaster) QueryLogData() *LogsQuery {
	return NewUserMasterClient(um.config).QueryLogData(um)
}

// Update returns a builder for updating this UserMaster.
// Note that you need to call UserMaster.Unwrap() before calling this method if this UserMaster
// was returned from a transaction, and the transaction was committed or rolled back.
func (um *UserMaster) Update() *UserMasterUpdateOne {
	return NewUserMasterClient(um.config).UpdateOne(um)
}

// Unwrap unwraps the UserMaster entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (um *UserMaster) Unwrap() *UserMaster {
	_tx, ok := um.config.driver.(*txDriver)
	if !ok {
		panic("ent: UserMaster is not a transactional entity")
	}
	um.config.driver = _tx.drv
	return um
}

// String implements the fmt.Stringer.
func (um *UserMaster) String() string {
	var builder strings.Builder
	builder.WriteString("UserMaster(")
	builder.WriteString(fmt.Sprintf("id=%v, ", um.ID))
	builder.WriteString("EmployeeID=")
	builder.WriteString(fmt.Sprintf("%v", um.EmployeeID))
	builder.WriteString(", ")
	builder.WriteString("EmployeeName=")
	builder.WriteString(um.EmployeeName)
	builder.WriteString(", ")
	builder.WriteString("Mobile=")
	builder.WriteString(um.Mobile)
	builder.WriteString(", ")
	builder.WriteString("EmailID=")
	builder.WriteString(um.EmailID)
	builder.WriteString(", ")
	builder.WriteString("UserName=")
	builder.WriteString(um.UserName)
	builder.WriteString(", ")
	builder.WriteString("Password=")
	builder.WriteString(um.Password)
	builder.WriteString(", ")
	builder.WriteString("Status=")
	builder.WriteString(fmt.Sprintf("%v", um.Status))
	builder.WriteString(", ")
	builder.WriteString("Statuss=")
	builder.WriteString(um.Statuss)
	builder.WriteString(", ")
	builder.WriteString("OTP=")
	builder.WriteString(fmt.Sprintf("%v", um.OTP))
	builder.WriteString(", ")
	builder.WriteString("OTPNew=")
	builder.WriteString(fmt.Sprintf("%v", um.OTPNew))
	builder.WriteString(", ")
	builder.WriteString("EmailOTPNew=")
	builder.WriteString(fmt.Sprintf("%v", um.EmailOTPNew))
	builder.WriteString(", ")
	builder.WriteString("OTPRemarks=")
	builder.WriteString(um.OTPRemarks)
	builder.WriteString(", ")
	builder.WriteString("CreatedAt=")
	builder.WriteString(um.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("OTPTriggeredTime=")
	builder.WriteString(um.OTPTriggeredTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("OTPSavedTime=")
	builder.WriteString(um.OTPSavedTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("OTPExpiryTime=")
	builder.WriteString(um.OTPExpiryTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("NewPasswordRequest=")
	builder.WriteString(fmt.Sprintf("%v", um.NewPasswordRequest))
	builder.WriteString(", ")
	builder.WriteString("EmailOTP=")
	builder.WriteString(fmt.Sprintf("%v", um.EmailOTP))
	builder.WriteString(", ")
	builder.WriteString("EmailOTPRemarks=")
	builder.WriteString(um.EmailOTPRemarks)
	builder.WriteString(", ")
	builder.WriteString("EmailCreatedAt=")
	builder.WriteString(um.EmailCreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("EmailOTPTriggeredTime=")
	builder.WriteString(um.EmailOTPTriggeredTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("EmailOTPSavedTime=")
	builder.WriteString(um.EmailOTPSavedTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("EmailOTPExpiryTime=")
	builder.WriteString(um.EmailOTPExpiryTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("EmailNewPasswordRequest=")
	builder.WriteString(fmt.Sprintf("%v", um.EmailNewPasswordRequest))
	builder.WriteString(", ")
	builder.WriteString("UidToken=")
	builder.WriteString(um.UidToken)
	builder.WriteString(", ")
	builder.WriteString("CreatedById=")
	builder.WriteString(fmt.Sprintf("%v", um.CreatedById))
	builder.WriteString(", ")
	builder.WriteString("CreatedByEmployeeId=")
	builder.WriteString(um.CreatedByEmployeeId)
	builder.WriteString(", ")
	builder.WriteString("CreatedByUserName=")
	builder.WriteString(um.CreatedByUserName)
	builder.WriteString(", ")
	builder.WriteString("CreatedByDesignation=")
	builder.WriteString(um.CreatedByDesignation)
	builder.WriteString(", ")
	builder.WriteString("CreatedDate=")
	builder.WriteString(um.CreatedDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("DeletedById=")
	builder.WriteString(fmt.Sprintf("%v", um.DeletedById))
	builder.WriteString(", ")
	builder.WriteString("DeletedByEmployeeId=")
	builder.WriteString(um.DeletedByEmployeeId)
	builder.WriteString(", ")
	builder.WriteString("DeletedByUserName=")
	builder.WriteString(um.DeletedByUserName)
	builder.WriteString(", ")
	builder.WriteString("DeletedByDesignation=")
	builder.WriteString(um.DeletedByDesignation)
	builder.WriteString(", ")
	builder.WriteString("DeletedDate=")
	builder.WriteString(um.DeletedDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("FacilityID=")
	builder.WriteString(um.FacilityID)
	builder.WriteString(", ")
	builder.WriteString("CircleFacilityId=")
	builder.WriteString(um.CircleFacilityId)
	builder.WriteString(", ")
	builder.WriteString("CircleFacilityName=")
	builder.WriteString(um.CircleFacilityName)
	builder.WriteString(", ")
	builder.WriteString("Designation=")
	builder.WriteString(um.Designation)
	builder.WriteString(", ")
	builder.WriteString("RoleUserCode=")
	builder.WriteString(fmt.Sprintf("%v", um.RoleUserCode))
	builder.WriteString(", ")
	builder.WriteString("Updatedby=")
	builder.WriteString(um.Updatedby)
	builder.WriteString(", ")
	builder.WriteString("updatedDate=")
	builder.WriteString(um.UpdatedDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("Modifiedby=")
	builder.WriteString(um.Modifiedby)
	builder.WriteString(", ")
	builder.WriteString("ModifiedDate=")
	builder.WriteString(um.ModifiedDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("Operationstatus=")
	builder.WriteString(um.Operationstatus)
	builder.WriteString(", ")
	builder.WriteString("ExamCode=")
	builder.WriteString(fmt.Sprintf("%v", um.ExamCode))
	builder.WriteString(", ")
	builder.WriteString("ExamCodePS=")
	builder.WriteString(fmt.Sprintf("%v", um.ExamCodePS))
	builder.WriteString(", ")
	builder.WriteString("Gender=")
	builder.WriteString(fmt.Sprintf("%v", um.Gender))
	builder.WriteString(", ")
	builder.WriteString("DOB=")
	builder.WriteString(um.DOB)
	builder.WriteString(", ")
	builder.WriteString("CreatedBy=")
	builder.WriteString(um.CreatedBy)
	builder.WriteByte(')')
	return builder.String()
}

// UserMasters is a parsable slice of UserMaster.
type UserMasters []*UserMaster
