// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"recruit/ent/cadre_choice_ip"
	"recruit/ent/center"
	"recruit/ent/circlesummaryforno"
	"recruit/ent/exam_applications_ip"
	"recruit/ent/examcitycenter"
	"recruit/ent/logs"
	"recruit/ent/placeofpreferenceip"
	"recruit/ent/predicate"
	"recruit/ent/recommendationsipapplications"
	"recruit/ent/rolemaster"
	"recruit/ent/usermaster"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
)

// ExamApplicationsIPUpdate is the builder for updating Exam_Applications_IP entities.
type ExamApplicationsIPUpdate struct {
	config
	hooks    []Hook
	mutation *ExamApplicationsIPMutation
}

// Where appends a list predicates to the ExamApplicationsIPUpdate builder.
func (eaiu *ExamApplicationsIPUpdate) Where(ps ...predicate.Exam_Applications_IP) *ExamApplicationsIPUpdate {
	eaiu.mutation.Where(ps...)
	return eaiu
}

// SetApplicationNumber sets the "ApplicationNumber" field.
func (eaiu *ExamApplicationsIPUpdate) SetApplicationNumber(s string) *ExamApplicationsIPUpdate {
	eaiu.mutation.SetApplicationNumber(s)
	return eaiu
}

// SetNillableApplicationNumber sets the "ApplicationNumber" field if the given value is not nil.
func (eaiu *ExamApplicationsIPUpdate) SetNillableApplicationNumber(s *string) *ExamApplicationsIPUpdate {
	if s != nil {
		eaiu.SetApplicationNumber(*s)
	}
	return eaiu
}

// ClearApplicationNumber clears the value of the "ApplicationNumber" field.
func (eaiu *ExamApplicationsIPUpdate) ClearApplicationNumber() *ExamApplicationsIPUpdate {
	eaiu.mutation.ClearApplicationNumber()
	return eaiu
}

// SetApplnSubmittedDate sets the "ApplnSubmittedDate" field.
func (eaiu *ExamApplicationsIPUpdate) SetApplnSubmittedDate(t time.Time) *ExamApplicationsIPUpdate {
	eaiu.mutation.SetApplnSubmittedDate(t)
	return eaiu
}

// SetNillableApplnSubmittedDate sets the "ApplnSubmittedDate" field if the given value is not nil.
func (eaiu *ExamApplicationsIPUpdate) SetNillableApplnSubmittedDate(t *time.Time) *ExamApplicationsIPUpdate {
	if t != nil {
		eaiu.SetApplnSubmittedDate(*t)
	}
	return eaiu
}

// ClearApplnSubmittedDate clears the value of the "ApplnSubmittedDate" field.
func (eaiu *ExamApplicationsIPUpdate) ClearApplnSubmittedDate() *ExamApplicationsIPUpdate {
	eaiu.mutation.ClearApplnSubmittedDate()
	return eaiu
}

// SetExamCode sets the "ExamCode" field.
func (eaiu *ExamApplicationsIPUpdate) SetExamCode(i int32) *ExamApplicationsIPUpdate {
	eaiu.mutation.ResetExamCode()
	eaiu.mutation.SetExamCode(i)
	return eaiu
}

// SetNillableExamCode sets the "ExamCode" field if the given value is not nil.
func (eaiu *ExamApplicationsIPUpdate) SetNillableExamCode(i *int32) *ExamApplicationsIPUpdate {
	if i != nil {
		eaiu.SetExamCode(*i)
	}
	return eaiu
}

// AddExamCode adds i to the "ExamCode" field.
func (eaiu *ExamApplicationsIPUpdate) AddExamCode(i int32) *ExamApplicationsIPUpdate {
	eaiu.mutation.AddExamCode(i)
	return eaiu
}

// ClearExamCode clears the value of the "ExamCode" field.
func (eaiu *ExamApplicationsIPUpdate) ClearExamCode() *ExamApplicationsIPUpdate {
	eaiu.mutation.ClearExamCode()
	return eaiu
}

// SetExamShortName sets the "ExamShortName" field.
func (eaiu *ExamApplicationsIPUpdate) SetExamShortName(s string) *ExamApplicationsIPUpdate {
	eaiu.mutation.SetExamShortName(s)
	return eaiu
}

// SetNillableExamShortName sets the "ExamShortName" field if the given value is not nil.
func (eaiu *ExamApplicationsIPUpdate) SetNillableExamShortName(s *string) *ExamApplicationsIPUpdate {
	if s != nil {
		eaiu.SetExamShortName(*s)
	}
	return eaiu
}

// ClearExamShortName clears the value of the "ExamShortName" field.
func (eaiu *ExamApplicationsIPUpdate) ClearExamShortName() *ExamApplicationsIPUpdate {
	eaiu.mutation.ClearExamShortName()
	return eaiu
}

// SetExamName sets the "ExamName" field.
func (eaiu *ExamApplicationsIPUpdate) SetExamName(s string) *ExamApplicationsIPUpdate {
	eaiu.mutation.SetExamName(s)
	return eaiu
}

// SetNillableExamName sets the "ExamName" field if the given value is not nil.
func (eaiu *ExamApplicationsIPUpdate) SetNillableExamName(s *string) *ExamApplicationsIPUpdate {
	if s != nil {
		eaiu.SetExamName(*s)
	}
	return eaiu
}

// ClearExamName clears the value of the "ExamName" field.
func (eaiu *ExamApplicationsIPUpdate) ClearExamName() *ExamApplicationsIPUpdate {
	eaiu.mutation.ClearExamName()
	return eaiu
}

// SetSmsExamShortName sets the "SmsExamShortName" field.
func (eaiu *ExamApplicationsIPUpdate) SetSmsExamShortName(s string) *ExamApplicationsIPUpdate {
	eaiu.mutation.SetSmsExamShortName(s)
	return eaiu
}

// SetNillableSmsExamShortName sets the "SmsExamShortName" field if the given value is not nil.
func (eaiu *ExamApplicationsIPUpdate) SetNillableSmsExamShortName(s *string) *ExamApplicationsIPUpdate {
	if s != nil {
		eaiu.SetSmsExamShortName(*s)
	}
	return eaiu
}

// ClearSmsExamShortName clears the value of the "SmsExamShortName" field.
func (eaiu *ExamApplicationsIPUpdate) ClearSmsExamShortName() *ExamApplicationsIPUpdate {
	eaiu.mutation.ClearSmsExamShortName()
	return eaiu
}

// SetExamYear sets the "ExamYear" field.
func (eaiu *ExamApplicationsIPUpdate) SetExamYear(s string) *ExamApplicationsIPUpdate {
	eaiu.mutation.SetExamYear(s)
	return eaiu
}

// SetNillableExamYear sets the "ExamYear" field if the given value is not nil.
func (eaiu *ExamApplicationsIPUpdate) SetNillableExamYear(s *string) *ExamApplicationsIPUpdate {
	if s != nil {
		eaiu.SetExamYear(*s)
	}
	return eaiu
}

// ClearExamYear clears the value of the "ExamYear" field.
func (eaiu *ExamApplicationsIPUpdate) ClearExamYear() *ExamApplicationsIPUpdate {
	eaiu.mutation.ClearExamYear()
	return eaiu
}

// SetUserID sets the "UserID" field.
func (eaiu *ExamApplicationsIPUpdate) SetUserID(i int32) *ExamApplicationsIPUpdate {
	eaiu.mutation.ResetUserID()
	eaiu.mutation.SetUserID(i)
	return eaiu
}

// SetNillableUserID sets the "UserID" field if the given value is not nil.
func (eaiu *ExamApplicationsIPUpdate) SetNillableUserID(i *int32) *ExamApplicationsIPUpdate {
	if i != nil {
		eaiu.SetUserID(*i)
	}
	return eaiu
}

// AddUserID adds i to the "UserID" field.
func (eaiu *ExamApplicationsIPUpdate) AddUserID(i int32) *ExamApplicationsIPUpdate {
	eaiu.mutation.AddUserID(i)
	return eaiu
}

// ClearUserID clears the value of the "UserID" field.
func (eaiu *ExamApplicationsIPUpdate) ClearUserID() *ExamApplicationsIPUpdate {
	eaiu.mutation.ClearUserID()
	return eaiu
}

// SetEmployeeID sets the "EmployeeID" field.
func (eaiu *ExamApplicationsIPUpdate) SetEmployeeID(i int64) *ExamApplicationsIPUpdate {
	eaiu.mutation.ResetEmployeeID()
	eaiu.mutation.SetEmployeeID(i)
	return eaiu
}

// SetNillableEmployeeID sets the "EmployeeID" field if the given value is not nil.
func (eaiu *ExamApplicationsIPUpdate) SetNillableEmployeeID(i *int64) *ExamApplicationsIPUpdate {
	if i != nil {
		eaiu.SetEmployeeID(*i)
	}
	return eaiu
}

// AddEmployeeID adds i to the "EmployeeID" field.
func (eaiu *ExamApplicationsIPUpdate) AddEmployeeID(i int64) *ExamApplicationsIPUpdate {
	eaiu.mutation.AddEmployeeID(i)
	return eaiu
}

// ClearEmployeeID clears the value of the "EmployeeID" field.
func (eaiu *ExamApplicationsIPUpdate) ClearEmployeeID() *ExamApplicationsIPUpdate {
	eaiu.mutation.ClearEmployeeID()
	return eaiu
}

// SetEmployeeName sets the "EmployeeName" field.
func (eaiu *ExamApplicationsIPUpdate) SetEmployeeName(s string) *ExamApplicationsIPUpdate {
	eaiu.mutation.SetEmployeeName(s)
	return eaiu
}

// SetNillableEmployeeName sets the "EmployeeName" field if the given value is not nil.
func (eaiu *ExamApplicationsIPUpdate) SetNillableEmployeeName(s *string) *ExamApplicationsIPUpdate {
	if s != nil {
		eaiu.SetEmployeeName(*s)
	}
	return eaiu
}

// ClearEmployeeName clears the value of the "EmployeeName" field.
func (eaiu *ExamApplicationsIPUpdate) ClearEmployeeName() *ExamApplicationsIPUpdate {
	eaiu.mutation.ClearEmployeeName()
	return eaiu
}

// SetDOB sets the "DOB" field.
func (eaiu *ExamApplicationsIPUpdate) SetDOB(s string) *ExamApplicationsIPUpdate {
	eaiu.mutation.SetDOB(s)
	return eaiu
}

// SetNillableDOB sets the "DOB" field if the given value is not nil.
func (eaiu *ExamApplicationsIPUpdate) SetNillableDOB(s *string) *ExamApplicationsIPUpdate {
	if s != nil {
		eaiu.SetDOB(*s)
	}
	return eaiu
}

// ClearDOB clears the value of the "DOB" field.
func (eaiu *ExamApplicationsIPUpdate) ClearDOB() *ExamApplicationsIPUpdate {
	eaiu.mutation.ClearDOB()
	return eaiu
}

// SetGender sets the "Gender" field.
func (eaiu *ExamApplicationsIPUpdate) SetGender(s string) *ExamApplicationsIPUpdate {
	eaiu.mutation.SetGender(s)
	return eaiu
}

// SetNillableGender sets the "Gender" field if the given value is not nil.
func (eaiu *ExamApplicationsIPUpdate) SetNillableGender(s *string) *ExamApplicationsIPUpdate {
	if s != nil {
		eaiu.SetGender(*s)
	}
	return eaiu
}

// ClearGender clears the value of the "Gender" field.
func (eaiu *ExamApplicationsIPUpdate) ClearGender() *ExamApplicationsIPUpdate {
	eaiu.mutation.ClearGender()
	return eaiu
}

// SetMobileNumber sets the "MobileNumber" field.
func (eaiu *ExamApplicationsIPUpdate) SetMobileNumber(s string) *ExamApplicationsIPUpdate {
	eaiu.mutation.SetMobileNumber(s)
	return eaiu
}

// SetNillableMobileNumber sets the "MobileNumber" field if the given value is not nil.
func (eaiu *ExamApplicationsIPUpdate) SetNillableMobileNumber(s *string) *ExamApplicationsIPUpdate {
	if s != nil {
		eaiu.SetMobileNumber(*s)
	}
	return eaiu
}

// ClearMobileNumber clears the value of the "MobileNumber" field.
func (eaiu *ExamApplicationsIPUpdate) ClearMobileNumber() *ExamApplicationsIPUpdate {
	eaiu.mutation.ClearMobileNumber()
	return eaiu
}

// SetEmailID sets the "EmailID" field.
func (eaiu *ExamApplicationsIPUpdate) SetEmailID(s string) *ExamApplicationsIPUpdate {
	eaiu.mutation.SetEmailID(s)
	return eaiu
}

// SetNillableEmailID sets the "EmailID" field if the given value is not nil.
func (eaiu *ExamApplicationsIPUpdate) SetNillableEmailID(s *string) *ExamApplicationsIPUpdate {
	if s != nil {
		eaiu.SetEmailID(*s)
	}
	return eaiu
}

// ClearEmailID clears the value of the "EmailID" field.
func (eaiu *ExamApplicationsIPUpdate) ClearEmailID() *ExamApplicationsIPUpdate {
	eaiu.mutation.ClearEmailID()
	return eaiu
}

// SetCategoryCode sets the "CategoryCode" field.
func (eaiu *ExamApplicationsIPUpdate) SetCategoryCode(s string) *ExamApplicationsIPUpdate {
	eaiu.mutation.SetCategoryCode(s)
	return eaiu
}

// SetNillableCategoryCode sets the "CategoryCode" field if the given value is not nil.
func (eaiu *ExamApplicationsIPUpdate) SetNillableCategoryCode(s *string) *ExamApplicationsIPUpdate {
	if s != nil {
		eaiu.SetCategoryCode(*s)
	}
	return eaiu
}

// ClearCategoryCode clears the value of the "CategoryCode" field.
func (eaiu *ExamApplicationsIPUpdate) ClearCategoryCode() *ExamApplicationsIPUpdate {
	eaiu.mutation.ClearCategoryCode()
	return eaiu
}

// SetCategoryDescription sets the "CategoryDescription" field.
func (eaiu *ExamApplicationsIPUpdate) SetCategoryDescription(s string) *ExamApplicationsIPUpdate {
	eaiu.mutation.SetCategoryDescription(s)
	return eaiu
}

// SetNillableCategoryDescription sets the "CategoryDescription" field if the given value is not nil.
func (eaiu *ExamApplicationsIPUpdate) SetNillableCategoryDescription(s *string) *ExamApplicationsIPUpdate {
	if s != nil {
		eaiu.SetCategoryDescription(*s)
	}
	return eaiu
}

// ClearCategoryDescription clears the value of the "CategoryDescription" field.
func (eaiu *ExamApplicationsIPUpdate) ClearCategoryDescription() *ExamApplicationsIPUpdate {
	eaiu.mutation.ClearCategoryDescription()
	return eaiu
}

// SetDisabilityTypeID sets the "DisabilityTypeID" field.
func (eaiu *ExamApplicationsIPUpdate) SetDisabilityTypeID(s string) *ExamApplicationsIPUpdate {
	eaiu.mutation.SetDisabilityTypeID(s)
	return eaiu
}

// SetNillableDisabilityTypeID sets the "DisabilityTypeID" field if the given value is not nil.
func (eaiu *ExamApplicationsIPUpdate) SetNillableDisabilityTypeID(s *string) *ExamApplicationsIPUpdate {
	if s != nil {
		eaiu.SetDisabilityTypeID(*s)
	}
	return eaiu
}

// ClearDisabilityTypeID clears the value of the "DisabilityTypeID" field.
func (eaiu *ExamApplicationsIPUpdate) ClearDisabilityTypeID() *ExamApplicationsIPUpdate {
	eaiu.mutation.ClearDisabilityTypeID()
	return eaiu
}

// SetDisabilityTypeCode sets the "DisabilityTypeCode" field.
func (eaiu *ExamApplicationsIPUpdate) SetDisabilityTypeCode(s string) *ExamApplicationsIPUpdate {
	eaiu.mutation.SetDisabilityTypeCode(s)
	return eaiu
}

// SetNillableDisabilityTypeCode sets the "DisabilityTypeCode" field if the given value is not nil.
func (eaiu *ExamApplicationsIPUpdate) SetNillableDisabilityTypeCode(s *string) *ExamApplicationsIPUpdate {
	if s != nil {
		eaiu.SetDisabilityTypeCode(*s)
	}
	return eaiu
}

// ClearDisabilityTypeCode clears the value of the "DisabilityTypeCode" field.
func (eaiu *ExamApplicationsIPUpdate) ClearDisabilityTypeCode() *ExamApplicationsIPUpdate {
	eaiu.mutation.ClearDisabilityTypeCode()
	return eaiu
}

// SetDisabilityTypeDescription sets the "DisabilityTypeDescription" field.
func (eaiu *ExamApplicationsIPUpdate) SetDisabilityTypeDescription(s string) *ExamApplicationsIPUpdate {
	eaiu.mutation.SetDisabilityTypeDescription(s)
	return eaiu
}

// SetNillableDisabilityTypeDescription sets the "DisabilityTypeDescription" field if the given value is not nil.
func (eaiu *ExamApplicationsIPUpdate) SetNillableDisabilityTypeDescription(s *string) *ExamApplicationsIPUpdate {
	if s != nil {
		eaiu.SetDisabilityTypeDescription(*s)
	}
	return eaiu
}

// ClearDisabilityTypeDescription clears the value of the "DisabilityTypeDescription" field.
func (eaiu *ExamApplicationsIPUpdate) ClearDisabilityTypeDescription() *ExamApplicationsIPUpdate {
	eaiu.mutation.ClearDisabilityTypeDescription()
	return eaiu
}

// SetDisabilityPercentage sets the "DisabilityPercentage" field.
func (eaiu *ExamApplicationsIPUpdate) SetDisabilityPercentage(i int32) *ExamApplicationsIPUpdate {
	eaiu.mutation.ResetDisabilityPercentage()
	eaiu.mutation.SetDisabilityPercentage(i)
	return eaiu
}

// SetNillableDisabilityPercentage sets the "DisabilityPercentage" field if the given value is not nil.
func (eaiu *ExamApplicationsIPUpdate) SetNillableDisabilityPercentage(i *int32) *ExamApplicationsIPUpdate {
	if i != nil {
		eaiu.SetDisabilityPercentage(*i)
	}
	return eaiu
}

// AddDisabilityPercentage adds i to the "DisabilityPercentage" field.
func (eaiu *ExamApplicationsIPUpdate) AddDisabilityPercentage(i int32) *ExamApplicationsIPUpdate {
	eaiu.mutation.AddDisabilityPercentage(i)
	return eaiu
}

// ClearDisabilityPercentage clears the value of the "DisabilityPercentage" field.
func (eaiu *ExamApplicationsIPUpdate) ClearDisabilityPercentage() *ExamApplicationsIPUpdate {
	eaiu.mutation.ClearDisabilityPercentage()
	return eaiu
}

// SetDCCS sets the "DCCS" field.
func (eaiu *ExamApplicationsIPUpdate) SetDCCS(s string) *ExamApplicationsIPUpdate {
	eaiu.mutation.SetDCCS(s)
	return eaiu
}

// SetNillableDCCS sets the "DCCS" field if the given value is not nil.
func (eaiu *ExamApplicationsIPUpdate) SetNillableDCCS(s *string) *ExamApplicationsIPUpdate {
	if s != nil {
		eaiu.SetDCCS(*s)
	}
	return eaiu
}

// ClearDCCS clears the value of the "DCCS" field.
func (eaiu *ExamApplicationsIPUpdate) ClearDCCS() *ExamApplicationsIPUpdate {
	eaiu.mutation.ClearDCCS()
	return eaiu
}

// SetEntryPostCode sets the "EntryPostCode" field.
func (eaiu *ExamApplicationsIPUpdate) SetEntryPostCode(s string) *ExamApplicationsIPUpdate {
	eaiu.mutation.SetEntryPostCode(s)
	return eaiu
}

// SetNillableEntryPostCode sets the "EntryPostCode" field if the given value is not nil.
func (eaiu *ExamApplicationsIPUpdate) SetNillableEntryPostCode(s *string) *ExamApplicationsIPUpdate {
	if s != nil {
		eaiu.SetEntryPostCode(*s)
	}
	return eaiu
}

// ClearEntryPostCode clears the value of the "EntryPostCode" field.
func (eaiu *ExamApplicationsIPUpdate) ClearEntryPostCode() *ExamApplicationsIPUpdate {
	eaiu.mutation.ClearEntryPostCode()
	return eaiu
}

// SetEntryPostDescription sets the "EntryPostDescription" field.
func (eaiu *ExamApplicationsIPUpdate) SetEntryPostDescription(s string) *ExamApplicationsIPUpdate {
	eaiu.mutation.SetEntryPostDescription(s)
	return eaiu
}

// SetNillableEntryPostDescription sets the "EntryPostDescription" field if the given value is not nil.
func (eaiu *ExamApplicationsIPUpdate) SetNillableEntryPostDescription(s *string) *ExamApplicationsIPUpdate {
	if s != nil {
		eaiu.SetEntryPostDescription(*s)
	}
	return eaiu
}

// ClearEntryPostDescription clears the value of the "EntryPostDescription" field.
func (eaiu *ExamApplicationsIPUpdate) ClearEntryPostDescription() *ExamApplicationsIPUpdate {
	eaiu.mutation.ClearEntryPostDescription()
	return eaiu
}

// SetPresentPostCode sets the "PresentPostCode" field.
func (eaiu *ExamApplicationsIPUpdate) SetPresentPostCode(s string) *ExamApplicationsIPUpdate {
	eaiu.mutation.SetPresentPostCode(s)
	return eaiu
}

// SetNillablePresentPostCode sets the "PresentPostCode" field if the given value is not nil.
func (eaiu *ExamApplicationsIPUpdate) SetNillablePresentPostCode(s *string) *ExamApplicationsIPUpdate {
	if s != nil {
		eaiu.SetPresentPostCode(*s)
	}
	return eaiu
}

// ClearPresentPostCode clears the value of the "PresentPostCode" field.
func (eaiu *ExamApplicationsIPUpdate) ClearPresentPostCode() *ExamApplicationsIPUpdate {
	eaiu.mutation.ClearPresentPostCode()
	return eaiu
}

// SetPresentPostDescription sets the "PresentPostDescription" field.
func (eaiu *ExamApplicationsIPUpdate) SetPresentPostDescription(s string) *ExamApplicationsIPUpdate {
	eaiu.mutation.SetPresentPostDescription(s)
	return eaiu
}

// SetNillablePresentPostDescription sets the "PresentPostDescription" field if the given value is not nil.
func (eaiu *ExamApplicationsIPUpdate) SetNillablePresentPostDescription(s *string) *ExamApplicationsIPUpdate {
	if s != nil {
		eaiu.SetPresentPostDescription(*s)
	}
	return eaiu
}

// ClearPresentPostDescription clears the value of the "PresentPostDescription" field.
func (eaiu *ExamApplicationsIPUpdate) ClearPresentPostDescription() *ExamApplicationsIPUpdate {
	eaiu.mutation.ClearPresentPostDescription()
	return eaiu
}

// SetFeederPostCode sets the "FeederPostCode" field.
func (eaiu *ExamApplicationsIPUpdate) SetFeederPostCode(s string) *ExamApplicationsIPUpdate {
	eaiu.mutation.SetFeederPostCode(s)
	return eaiu
}

// SetNillableFeederPostCode sets the "FeederPostCode" field if the given value is not nil.
func (eaiu *ExamApplicationsIPUpdate) SetNillableFeederPostCode(s *string) *ExamApplicationsIPUpdate {
	if s != nil {
		eaiu.SetFeederPostCode(*s)
	}
	return eaiu
}

// ClearFeederPostCode clears the value of the "FeederPostCode" field.
func (eaiu *ExamApplicationsIPUpdate) ClearFeederPostCode() *ExamApplicationsIPUpdate {
	eaiu.mutation.ClearFeederPostCode()
	return eaiu
}

// SetFeederPostDescription sets the "FeederPostDescription" field.
func (eaiu *ExamApplicationsIPUpdate) SetFeederPostDescription(s string) *ExamApplicationsIPUpdate {
	eaiu.mutation.SetFeederPostDescription(s)
	return eaiu
}

// SetNillableFeederPostDescription sets the "FeederPostDescription" field if the given value is not nil.
func (eaiu *ExamApplicationsIPUpdate) SetNillableFeederPostDescription(s *string) *ExamApplicationsIPUpdate {
	if s != nil {
		eaiu.SetFeederPostDescription(*s)
	}
	return eaiu
}

// ClearFeederPostDescription clears the value of the "FeederPostDescription" field.
func (eaiu *ExamApplicationsIPUpdate) ClearFeederPostDescription() *ExamApplicationsIPUpdate {
	eaiu.mutation.ClearFeederPostDescription()
	return eaiu
}

// SetFeederPostJoiningDate sets the "FeederPostJoiningDate" field.
func (eaiu *ExamApplicationsIPUpdate) SetFeederPostJoiningDate(s string) *ExamApplicationsIPUpdate {
	eaiu.mutation.SetFeederPostJoiningDate(s)
	return eaiu
}

// SetNillableFeederPostJoiningDate sets the "FeederPostJoiningDate" field if the given value is not nil.
func (eaiu *ExamApplicationsIPUpdate) SetNillableFeederPostJoiningDate(s *string) *ExamApplicationsIPUpdate {
	if s != nil {
		eaiu.SetFeederPostJoiningDate(*s)
	}
	return eaiu
}

// ClearFeederPostJoiningDate clears the value of the "FeederPostJoiningDate" field.
func (eaiu *ExamApplicationsIPUpdate) ClearFeederPostJoiningDate() *ExamApplicationsIPUpdate {
	eaiu.mutation.ClearFeederPostJoiningDate()
	return eaiu
}

// SetDesignationID sets the "DesignationID" field.
func (eaiu *ExamApplicationsIPUpdate) SetDesignationID(s string) *ExamApplicationsIPUpdate {
	eaiu.mutation.SetDesignationID(s)
	return eaiu
}

// SetNillableDesignationID sets the "DesignationID" field if the given value is not nil.
func (eaiu *ExamApplicationsIPUpdate) SetNillableDesignationID(s *string) *ExamApplicationsIPUpdate {
	if s != nil {
		eaiu.SetDesignationID(*s)
	}
	return eaiu
}

// ClearDesignationID clears the value of the "DesignationID" field.
func (eaiu *ExamApplicationsIPUpdate) ClearDesignationID() *ExamApplicationsIPUpdate {
	eaiu.mutation.ClearDesignationID()
	return eaiu
}

// SetPresentDesignation sets the "PresentDesignation" field.
func (eaiu *ExamApplicationsIPUpdate) SetPresentDesignation(s string) *ExamApplicationsIPUpdate {
	eaiu.mutation.SetPresentDesignation(s)
	return eaiu
}

// SetNillablePresentDesignation sets the "PresentDesignation" field if the given value is not nil.
func (eaiu *ExamApplicationsIPUpdate) SetNillablePresentDesignation(s *string) *ExamApplicationsIPUpdate {
	if s != nil {
		eaiu.SetPresentDesignation(*s)
	}
	return eaiu
}

// ClearPresentDesignation clears the value of the "PresentDesignation" field.
func (eaiu *ExamApplicationsIPUpdate) ClearPresentDesignation() *ExamApplicationsIPUpdate {
	eaiu.mutation.ClearPresentDesignation()
	return eaiu
}

// SetEducationCode sets the "EducationCode" field.
func (eaiu *ExamApplicationsIPUpdate) SetEducationCode(s string) *ExamApplicationsIPUpdate {
	eaiu.mutation.SetEducationCode(s)
	return eaiu
}

// SetNillableEducationCode sets the "EducationCode" field if the given value is not nil.
func (eaiu *ExamApplicationsIPUpdate) SetNillableEducationCode(s *string) *ExamApplicationsIPUpdate {
	if s != nil {
		eaiu.SetEducationCode(*s)
	}
	return eaiu
}

// ClearEducationCode clears the value of the "EducationCode" field.
func (eaiu *ExamApplicationsIPUpdate) ClearEducationCode() *ExamApplicationsIPUpdate {
	eaiu.mutation.ClearEducationCode()
	return eaiu
}

// SetEducationDescription sets the "EducationDescription" field.
func (eaiu *ExamApplicationsIPUpdate) SetEducationDescription(s string) *ExamApplicationsIPUpdate {
	eaiu.mutation.SetEducationDescription(s)
	return eaiu
}

// SetNillableEducationDescription sets the "EducationDescription" field if the given value is not nil.
func (eaiu *ExamApplicationsIPUpdate) SetNillableEducationDescription(s *string) *ExamApplicationsIPUpdate {
	if s != nil {
		eaiu.SetEducationDescription(*s)
	}
	return eaiu
}

// ClearEducationDescription clears the value of the "EducationDescription" field.
func (eaiu *ExamApplicationsIPUpdate) ClearEducationDescription() *ExamApplicationsIPUpdate {
	eaiu.mutation.ClearEducationDescription()
	return eaiu
}

// SetFacilityUniqueID sets the "FacilityUniqueID" field.
func (eaiu *ExamApplicationsIPUpdate) SetFacilityUniqueID(s string) *ExamApplicationsIPUpdate {
	eaiu.mutation.SetFacilityUniqueID(s)
	return eaiu
}

// SetNillableFacilityUniqueID sets the "FacilityUniqueID" field if the given value is not nil.
func (eaiu *ExamApplicationsIPUpdate) SetNillableFacilityUniqueID(s *string) *ExamApplicationsIPUpdate {
	if s != nil {
		eaiu.SetFacilityUniqueID(*s)
	}
	return eaiu
}

// ClearFacilityUniqueID clears the value of the "FacilityUniqueID" field.
func (eaiu *ExamApplicationsIPUpdate) ClearFacilityUniqueID() *ExamApplicationsIPUpdate {
	eaiu.mutation.ClearFacilityUniqueID()
	return eaiu
}

// SetWorkingOfficePincode sets the "WorkingOfficePincode" field.
func (eaiu *ExamApplicationsIPUpdate) SetWorkingOfficePincode(i int32) *ExamApplicationsIPUpdate {
	eaiu.mutation.ResetWorkingOfficePincode()
	eaiu.mutation.SetWorkingOfficePincode(i)
	return eaiu
}

// SetNillableWorkingOfficePincode sets the "WorkingOfficePincode" field if the given value is not nil.
func (eaiu *ExamApplicationsIPUpdate) SetNillableWorkingOfficePincode(i *int32) *ExamApplicationsIPUpdate {
	if i != nil {
		eaiu.SetWorkingOfficePincode(*i)
	}
	return eaiu
}

// AddWorkingOfficePincode adds i to the "WorkingOfficePincode" field.
func (eaiu *ExamApplicationsIPUpdate) AddWorkingOfficePincode(i int32) *ExamApplicationsIPUpdate {
	eaiu.mutation.AddWorkingOfficePincode(i)
	return eaiu
}

// ClearWorkingOfficePincode clears the value of the "WorkingOfficePincode" field.
func (eaiu *ExamApplicationsIPUpdate) ClearWorkingOfficePincode() *ExamApplicationsIPUpdate {
	eaiu.mutation.ClearWorkingOfficePincode()
	return eaiu
}

// SetWorkingOfficeFacilityID sets the "WorkingOfficeFacilityID" field.
func (eaiu *ExamApplicationsIPUpdate) SetWorkingOfficeFacilityID(s string) *ExamApplicationsIPUpdate {
	eaiu.mutation.SetWorkingOfficeFacilityID(s)
	return eaiu
}

// SetNillableWorkingOfficeFacilityID sets the "WorkingOfficeFacilityID" field if the given value is not nil.
func (eaiu *ExamApplicationsIPUpdate) SetNillableWorkingOfficeFacilityID(s *string) *ExamApplicationsIPUpdate {
	if s != nil {
		eaiu.SetWorkingOfficeFacilityID(*s)
	}
	return eaiu
}

// ClearWorkingOfficeFacilityID clears the value of the "WorkingOfficeFacilityID" field.
func (eaiu *ExamApplicationsIPUpdate) ClearWorkingOfficeFacilityID() *ExamApplicationsIPUpdate {
	eaiu.mutation.ClearWorkingOfficeFacilityID()
	return eaiu
}

// SetWorkingOfficeName sets the "WorkingOfficeName" field.
func (eaiu *ExamApplicationsIPUpdate) SetWorkingOfficeName(s string) *ExamApplicationsIPUpdate {
	eaiu.mutation.SetWorkingOfficeName(s)
	return eaiu
}

// SetNillableWorkingOfficeName sets the "WorkingOfficeName" field if the given value is not nil.
func (eaiu *ExamApplicationsIPUpdate) SetNillableWorkingOfficeName(s *string) *ExamApplicationsIPUpdate {
	if s != nil {
		eaiu.SetWorkingOfficeName(*s)
	}
	return eaiu
}

// ClearWorkingOfficeName clears the value of the "WorkingOfficeName" field.
func (eaiu *ExamApplicationsIPUpdate) ClearWorkingOfficeName() *ExamApplicationsIPUpdate {
	eaiu.mutation.ClearWorkingOfficeName()
	return eaiu
}

// SetWorkingOfficeCircleFacilityID sets the "WorkingOfficeCircleFacilityID" field.
func (eaiu *ExamApplicationsIPUpdate) SetWorkingOfficeCircleFacilityID(s string) *ExamApplicationsIPUpdate {
	eaiu.mutation.SetWorkingOfficeCircleFacilityID(s)
	return eaiu
}

// SetNillableWorkingOfficeCircleFacilityID sets the "WorkingOfficeCircleFacilityID" field if the given value is not nil.
func (eaiu *ExamApplicationsIPUpdate) SetNillableWorkingOfficeCircleFacilityID(s *string) *ExamApplicationsIPUpdate {
	if s != nil {
		eaiu.SetWorkingOfficeCircleFacilityID(*s)
	}
	return eaiu
}

// ClearWorkingOfficeCircleFacilityID clears the value of the "WorkingOfficeCircleFacilityID" field.
func (eaiu *ExamApplicationsIPUpdate) ClearWorkingOfficeCircleFacilityID() *ExamApplicationsIPUpdate {
	eaiu.mutation.ClearWorkingOfficeCircleFacilityID()
	return eaiu
}

// SetWorkingOfficeCircleName sets the "WorkingOfficeCircleName" field.
func (eaiu *ExamApplicationsIPUpdate) SetWorkingOfficeCircleName(s string) *ExamApplicationsIPUpdate {
	eaiu.mutation.SetWorkingOfficeCircleName(s)
	return eaiu
}

// SetNillableWorkingOfficeCircleName sets the "WorkingOfficeCircleName" field if the given value is not nil.
func (eaiu *ExamApplicationsIPUpdate) SetNillableWorkingOfficeCircleName(s *string) *ExamApplicationsIPUpdate {
	if s != nil {
		eaiu.SetWorkingOfficeCircleName(*s)
	}
	return eaiu
}

// ClearWorkingOfficeCircleName clears the value of the "WorkingOfficeCircleName" field.
func (eaiu *ExamApplicationsIPUpdate) ClearWorkingOfficeCircleName() *ExamApplicationsIPUpdate {
	eaiu.mutation.ClearWorkingOfficeCircleName()
	return eaiu
}

// SetWorkingOfficeRegionFacilityID sets the "WorkingOfficeRegionFacilityID" field.
func (eaiu *ExamApplicationsIPUpdate) SetWorkingOfficeRegionFacilityID(s string) *ExamApplicationsIPUpdate {
	eaiu.mutation.SetWorkingOfficeRegionFacilityID(s)
	return eaiu
}

// SetNillableWorkingOfficeRegionFacilityID sets the "WorkingOfficeRegionFacilityID" field if the given value is not nil.
func (eaiu *ExamApplicationsIPUpdate) SetNillableWorkingOfficeRegionFacilityID(s *string) *ExamApplicationsIPUpdate {
	if s != nil {
		eaiu.SetWorkingOfficeRegionFacilityID(*s)
	}
	return eaiu
}

// ClearWorkingOfficeRegionFacilityID clears the value of the "WorkingOfficeRegionFacilityID" field.
func (eaiu *ExamApplicationsIPUpdate) ClearWorkingOfficeRegionFacilityID() *ExamApplicationsIPUpdate {
	eaiu.mutation.ClearWorkingOfficeRegionFacilityID()
	return eaiu
}

// SetWorkingOfficeRegionName sets the "WorkingOfficeRegionName" field.
func (eaiu *ExamApplicationsIPUpdate) SetWorkingOfficeRegionName(s string) *ExamApplicationsIPUpdate {
	eaiu.mutation.SetWorkingOfficeRegionName(s)
	return eaiu
}

// SetNillableWorkingOfficeRegionName sets the "WorkingOfficeRegionName" field if the given value is not nil.
func (eaiu *ExamApplicationsIPUpdate) SetNillableWorkingOfficeRegionName(s *string) *ExamApplicationsIPUpdate {
	if s != nil {
		eaiu.SetWorkingOfficeRegionName(*s)
	}
	return eaiu
}

// ClearWorkingOfficeRegionName clears the value of the "WorkingOfficeRegionName" field.
func (eaiu *ExamApplicationsIPUpdate) ClearWorkingOfficeRegionName() *ExamApplicationsIPUpdate {
	eaiu.mutation.ClearWorkingOfficeRegionName()
	return eaiu
}

// SetWorkingOfficeDivisionFacilityID sets the "WorkingOfficeDivisionFacilityID" field.
func (eaiu *ExamApplicationsIPUpdate) SetWorkingOfficeDivisionFacilityID(s string) *ExamApplicationsIPUpdate {
	eaiu.mutation.SetWorkingOfficeDivisionFacilityID(s)
	return eaiu
}

// SetNillableWorkingOfficeDivisionFacilityID sets the "WorkingOfficeDivisionFacilityID" field if the given value is not nil.
func (eaiu *ExamApplicationsIPUpdate) SetNillableWorkingOfficeDivisionFacilityID(s *string) *ExamApplicationsIPUpdate {
	if s != nil {
		eaiu.SetWorkingOfficeDivisionFacilityID(*s)
	}
	return eaiu
}

// ClearWorkingOfficeDivisionFacilityID clears the value of the "WorkingOfficeDivisionFacilityID" field.
func (eaiu *ExamApplicationsIPUpdate) ClearWorkingOfficeDivisionFacilityID() *ExamApplicationsIPUpdate {
	eaiu.mutation.ClearWorkingOfficeDivisionFacilityID()
	return eaiu
}

// SetWorkingOfficeDivisionName sets the "WorkingOfficeDivisionName" field.
func (eaiu *ExamApplicationsIPUpdate) SetWorkingOfficeDivisionName(s string) *ExamApplicationsIPUpdate {
	eaiu.mutation.SetWorkingOfficeDivisionName(s)
	return eaiu
}

// SetNillableWorkingOfficeDivisionName sets the "WorkingOfficeDivisionName" field if the given value is not nil.
func (eaiu *ExamApplicationsIPUpdate) SetNillableWorkingOfficeDivisionName(s *string) *ExamApplicationsIPUpdate {
	if s != nil {
		eaiu.SetWorkingOfficeDivisionName(*s)
	}
	return eaiu
}

// ClearWorkingOfficeDivisionName clears the value of the "WorkingOfficeDivisionName" field.
func (eaiu *ExamApplicationsIPUpdate) ClearWorkingOfficeDivisionName() *ExamApplicationsIPUpdate {
	eaiu.mutation.ClearWorkingOfficeDivisionName()
	return eaiu
}

// SetReportingOfficeFacilityID sets the "ReportingOfficeFacilityID" field.
func (eaiu *ExamApplicationsIPUpdate) SetReportingOfficeFacilityID(s string) *ExamApplicationsIPUpdate {
	eaiu.mutation.SetReportingOfficeFacilityID(s)
	return eaiu
}

// SetNillableReportingOfficeFacilityID sets the "ReportingOfficeFacilityID" field if the given value is not nil.
func (eaiu *ExamApplicationsIPUpdate) SetNillableReportingOfficeFacilityID(s *string) *ExamApplicationsIPUpdate {
	if s != nil {
		eaiu.SetReportingOfficeFacilityID(*s)
	}
	return eaiu
}

// ClearReportingOfficeFacilityID clears the value of the "ReportingOfficeFacilityID" field.
func (eaiu *ExamApplicationsIPUpdate) ClearReportingOfficeFacilityID() *ExamApplicationsIPUpdate {
	eaiu.mutation.ClearReportingOfficeFacilityID()
	return eaiu
}

// SetReportingOfficeName sets the "ReportingOfficeName" field.
func (eaiu *ExamApplicationsIPUpdate) SetReportingOfficeName(s string) *ExamApplicationsIPUpdate {
	eaiu.mutation.SetReportingOfficeName(s)
	return eaiu
}

// SetNillableReportingOfficeName sets the "ReportingOfficeName" field if the given value is not nil.
func (eaiu *ExamApplicationsIPUpdate) SetNillableReportingOfficeName(s *string) *ExamApplicationsIPUpdate {
	if s != nil {
		eaiu.SetReportingOfficeName(*s)
	}
	return eaiu
}

// ClearReportingOfficeName clears the value of the "ReportingOfficeName" field.
func (eaiu *ExamApplicationsIPUpdate) ClearReportingOfficeName() *ExamApplicationsIPUpdate {
	eaiu.mutation.ClearReportingOfficeName()
	return eaiu
}

// SetLienControllingOfficeID sets the "LienControllingOfficeID" field.
func (eaiu *ExamApplicationsIPUpdate) SetLienControllingOfficeID(s string) *ExamApplicationsIPUpdate {
	eaiu.mutation.SetLienControllingOfficeID(s)
	return eaiu
}

// SetNillableLienControllingOfficeID sets the "LienControllingOfficeID" field if the given value is not nil.
func (eaiu *ExamApplicationsIPUpdate) SetNillableLienControllingOfficeID(s *string) *ExamApplicationsIPUpdate {
	if s != nil {
		eaiu.SetLienControllingOfficeID(*s)
	}
	return eaiu
}

// ClearLienControllingOfficeID clears the value of the "LienControllingOfficeID" field.
func (eaiu *ExamApplicationsIPUpdate) ClearLienControllingOfficeID() *ExamApplicationsIPUpdate {
	eaiu.mutation.ClearLienControllingOfficeID()
	return eaiu
}

// SetLienControllingOfficeName sets the "LienControllingOfficeName" field.
func (eaiu *ExamApplicationsIPUpdate) SetLienControllingOfficeName(s string) *ExamApplicationsIPUpdate {
	eaiu.mutation.SetLienControllingOfficeName(s)
	return eaiu
}

// SetNillableLienControllingOfficeName sets the "LienControllingOfficeName" field if the given value is not nil.
func (eaiu *ExamApplicationsIPUpdate) SetNillableLienControllingOfficeName(s *string) *ExamApplicationsIPUpdate {
	if s != nil {
		eaiu.SetLienControllingOfficeName(*s)
	}
	return eaiu
}

// ClearLienControllingOfficeName clears the value of the "LienControllingOfficeName" field.
func (eaiu *ExamApplicationsIPUpdate) ClearLienControllingOfficeName() *ExamApplicationsIPUpdate {
	eaiu.mutation.ClearLienControllingOfficeName()
	return eaiu
}

// SetInDeputation sets the "InDeputation" field.
func (eaiu *ExamApplicationsIPUpdate) SetInDeputation(s string) *ExamApplicationsIPUpdate {
	eaiu.mutation.SetInDeputation(s)
	return eaiu
}

// SetNillableInDeputation sets the "InDeputation" field if the given value is not nil.
func (eaiu *ExamApplicationsIPUpdate) SetNillableInDeputation(s *string) *ExamApplicationsIPUpdate {
	if s != nil {
		eaiu.SetInDeputation(*s)
	}
	return eaiu
}

// ClearInDeputation clears the value of the "InDeputation" field.
func (eaiu *ExamApplicationsIPUpdate) ClearInDeputation() *ExamApplicationsIPUpdate {
	eaiu.mutation.ClearInDeputation()
	return eaiu
}

// SetDeputationType sets the "DeputationType" field.
func (eaiu *ExamApplicationsIPUpdate) SetDeputationType(s string) *ExamApplicationsIPUpdate {
	eaiu.mutation.SetDeputationType(s)
	return eaiu
}

// SetNillableDeputationType sets the "DeputationType" field if the given value is not nil.
func (eaiu *ExamApplicationsIPUpdate) SetNillableDeputationType(s *string) *ExamApplicationsIPUpdate {
	if s != nil {
		eaiu.SetDeputationType(*s)
	}
	return eaiu
}

// ClearDeputationType clears the value of the "DeputationType" field.
func (eaiu *ExamApplicationsIPUpdate) ClearDeputationType() *ExamApplicationsIPUpdate {
	eaiu.mutation.ClearDeputationType()
	return eaiu
}

// SetDeputationOfficeUniqueId sets the "DeputationOfficeUniqueId" field.
func (eaiu *ExamApplicationsIPUpdate) SetDeputationOfficeUniqueId(s string) *ExamApplicationsIPUpdate {
	eaiu.mutation.SetDeputationOfficeUniqueId(s)
	return eaiu
}

// SetNillableDeputationOfficeUniqueId sets the "DeputationOfficeUniqueId" field if the given value is not nil.
func (eaiu *ExamApplicationsIPUpdate) SetNillableDeputationOfficeUniqueId(s *string) *ExamApplicationsIPUpdate {
	if s != nil {
		eaiu.SetDeputationOfficeUniqueId(*s)
	}
	return eaiu
}

// ClearDeputationOfficeUniqueId clears the value of the "DeputationOfficeUniqueId" field.
func (eaiu *ExamApplicationsIPUpdate) ClearDeputationOfficeUniqueId() *ExamApplicationsIPUpdate {
	eaiu.mutation.ClearDeputationOfficeUniqueId()
	return eaiu
}

// SetDeputationOfficeFacilityID sets the "DeputationOfficeFacilityID" field.
func (eaiu *ExamApplicationsIPUpdate) SetDeputationOfficeFacilityID(s string) *ExamApplicationsIPUpdate {
	eaiu.mutation.SetDeputationOfficeFacilityID(s)
	return eaiu
}

// SetNillableDeputationOfficeFacilityID sets the "DeputationOfficeFacilityID" field if the given value is not nil.
func (eaiu *ExamApplicationsIPUpdate) SetNillableDeputationOfficeFacilityID(s *string) *ExamApplicationsIPUpdate {
	if s != nil {
		eaiu.SetDeputationOfficeFacilityID(*s)
	}
	return eaiu
}

// ClearDeputationOfficeFacilityID clears the value of the "DeputationOfficeFacilityID" field.
func (eaiu *ExamApplicationsIPUpdate) ClearDeputationOfficeFacilityID() *ExamApplicationsIPUpdate {
	eaiu.mutation.ClearDeputationOfficeFacilityID()
	return eaiu
}

// SetDeputationOfficeName sets the "DeputationOfficeName" field.
func (eaiu *ExamApplicationsIPUpdate) SetDeputationOfficeName(s string) *ExamApplicationsIPUpdate {
	eaiu.mutation.SetDeputationOfficeName(s)
	return eaiu
}

// SetNillableDeputationOfficeName sets the "DeputationOfficeName" field if the given value is not nil.
func (eaiu *ExamApplicationsIPUpdate) SetNillableDeputationOfficeName(s *string) *ExamApplicationsIPUpdate {
	if s != nil {
		eaiu.SetDeputationOfficeName(*s)
	}
	return eaiu
}

// ClearDeputationOfficeName clears the value of the "DeputationOfficeName" field.
func (eaiu *ExamApplicationsIPUpdate) ClearDeputationOfficeName() *ExamApplicationsIPUpdate {
	eaiu.mutation.ClearDeputationOfficeName()
	return eaiu
}

// SetDeputationControllingOfficeID sets the "DeputationControllingOfficeID" field.
func (eaiu *ExamApplicationsIPUpdate) SetDeputationControllingOfficeID(s string) *ExamApplicationsIPUpdate {
	eaiu.mutation.SetDeputationControllingOfficeID(s)
	return eaiu
}

// SetNillableDeputationControllingOfficeID sets the "DeputationControllingOfficeID" field if the given value is not nil.
func (eaiu *ExamApplicationsIPUpdate) SetNillableDeputationControllingOfficeID(s *string) *ExamApplicationsIPUpdate {
	if s != nil {
		eaiu.SetDeputationControllingOfficeID(*s)
	}
	return eaiu
}

// ClearDeputationControllingOfficeID clears the value of the "DeputationControllingOfficeID" field.
func (eaiu *ExamApplicationsIPUpdate) ClearDeputationControllingOfficeID() *ExamApplicationsIPUpdate {
	eaiu.mutation.ClearDeputationControllingOfficeID()
	return eaiu
}

// SetDeputationControllingOfficeName sets the "DeputationControllingOfficeName" field.
func (eaiu *ExamApplicationsIPUpdate) SetDeputationControllingOfficeName(s string) *ExamApplicationsIPUpdate {
	eaiu.mutation.SetDeputationControllingOfficeName(s)
	return eaiu
}

// SetNillableDeputationControllingOfficeName sets the "DeputationControllingOfficeName" field if the given value is not nil.
func (eaiu *ExamApplicationsIPUpdate) SetNillableDeputationControllingOfficeName(s *string) *ExamApplicationsIPUpdate {
	if s != nil {
		eaiu.SetDeputationControllingOfficeName(*s)
	}
	return eaiu
}

// ClearDeputationControllingOfficeName clears the value of the "DeputationControllingOfficeName" field.
func (eaiu *ExamApplicationsIPUpdate) ClearDeputationControllingOfficeName() *ExamApplicationsIPUpdate {
	eaiu.mutation.ClearDeputationControllingOfficeName()
	return eaiu
}

// SetControllingOfficeFacilityID sets the "ControllingOfficeFacilityID" field.
func (eaiu *ExamApplicationsIPUpdate) SetControllingOfficeFacilityID(s string) *ExamApplicationsIPUpdate {
	eaiu.mutation.SetControllingOfficeFacilityID(s)
	return eaiu
}

// SetNillableControllingOfficeFacilityID sets the "ControllingOfficeFacilityID" field if the given value is not nil.
func (eaiu *ExamApplicationsIPUpdate) SetNillableControllingOfficeFacilityID(s *string) *ExamApplicationsIPUpdate {
	if s != nil {
		eaiu.SetControllingOfficeFacilityID(*s)
	}
	return eaiu
}

// ClearControllingOfficeFacilityID clears the value of the "ControllingOfficeFacilityID" field.
func (eaiu *ExamApplicationsIPUpdate) ClearControllingOfficeFacilityID() *ExamApplicationsIPUpdate {
	eaiu.mutation.ClearControllingOfficeFacilityID()
	return eaiu
}

// SetControllingOfficeName sets the "ControllingOfficeName" field.
func (eaiu *ExamApplicationsIPUpdate) SetControllingOfficeName(s string) *ExamApplicationsIPUpdate {
	eaiu.mutation.SetControllingOfficeName(s)
	return eaiu
}

// SetNillableControllingOfficeName sets the "ControllingOfficeName" field if the given value is not nil.
func (eaiu *ExamApplicationsIPUpdate) SetNillableControllingOfficeName(s *string) *ExamApplicationsIPUpdate {
	if s != nil {
		eaiu.SetControllingOfficeName(*s)
	}
	return eaiu
}

// ClearControllingOfficeName clears the value of the "ControllingOfficeName" field.
func (eaiu *ExamApplicationsIPUpdate) ClearControllingOfficeName() *ExamApplicationsIPUpdate {
	eaiu.mutation.ClearControllingOfficeName()
	return eaiu
}

// SetNodalOfficeFacilityID sets the "NodalOfficeFacilityID" field.
func (eaiu *ExamApplicationsIPUpdate) SetNodalOfficeFacilityID(s string) *ExamApplicationsIPUpdate {
	eaiu.mutation.SetNodalOfficeFacilityID(s)
	return eaiu
}

// SetNillableNodalOfficeFacilityID sets the "NodalOfficeFacilityID" field if the given value is not nil.
func (eaiu *ExamApplicationsIPUpdate) SetNillableNodalOfficeFacilityID(s *string) *ExamApplicationsIPUpdate {
	if s != nil {
		eaiu.SetNodalOfficeFacilityID(*s)
	}
	return eaiu
}

// ClearNodalOfficeFacilityID clears the value of the "NodalOfficeFacilityID" field.
func (eaiu *ExamApplicationsIPUpdate) ClearNodalOfficeFacilityID() *ExamApplicationsIPUpdate {
	eaiu.mutation.ClearNodalOfficeFacilityID()
	return eaiu
}

// SetNodalOfficeName sets the "NodalOfficeName" field.
func (eaiu *ExamApplicationsIPUpdate) SetNodalOfficeName(s string) *ExamApplicationsIPUpdate {
	eaiu.mutation.SetNodalOfficeName(s)
	return eaiu
}

// SetNillableNodalOfficeName sets the "NodalOfficeName" field if the given value is not nil.
func (eaiu *ExamApplicationsIPUpdate) SetNillableNodalOfficeName(s *string) *ExamApplicationsIPUpdate {
	if s != nil {
		eaiu.SetNodalOfficeName(*s)
	}
	return eaiu
}

// ClearNodalOfficeName clears the value of the "NodalOfficeName" field.
func (eaiu *ExamApplicationsIPUpdate) ClearNodalOfficeName() *ExamApplicationsIPUpdate {
	eaiu.mutation.ClearNodalOfficeName()
	return eaiu
}

// SetExamCityCenterCode sets the "ExamCityCenterCode" field.
func (eaiu *ExamApplicationsIPUpdate) SetExamCityCenterCode(i int32) *ExamApplicationsIPUpdate {
	eaiu.mutation.SetExamCityCenterCode(i)
	return eaiu
}

// SetNillableExamCityCenterCode sets the "ExamCityCenterCode" field if the given value is not nil.
func (eaiu *ExamApplicationsIPUpdate) SetNillableExamCityCenterCode(i *int32) *ExamApplicationsIPUpdate {
	if i != nil {
		eaiu.SetExamCityCenterCode(*i)
	}
	return eaiu
}

// ClearExamCityCenterCode clears the value of the "ExamCityCenterCode" field.
func (eaiu *ExamApplicationsIPUpdate) ClearExamCityCenterCode() *ExamApplicationsIPUpdate {
	eaiu.mutation.ClearExamCityCenterCode()
	return eaiu
}

// SetCenterFacilityId sets the "CenterFacilityId" field.
func (eaiu *ExamApplicationsIPUpdate) SetCenterFacilityId(s string) *ExamApplicationsIPUpdate {
	eaiu.mutation.SetCenterFacilityId(s)
	return eaiu
}

// SetNillableCenterFacilityId sets the "CenterFacilityId" field if the given value is not nil.
func (eaiu *ExamApplicationsIPUpdate) SetNillableCenterFacilityId(s *string) *ExamApplicationsIPUpdate {
	if s != nil {
		eaiu.SetCenterFacilityId(*s)
	}
	return eaiu
}

// ClearCenterFacilityId clears the value of the "CenterFacilityId" field.
func (eaiu *ExamApplicationsIPUpdate) ClearCenterFacilityId() *ExamApplicationsIPUpdate {
	eaiu.mutation.ClearCenterFacilityId()
	return eaiu
}

// SetCentrePreference sets the "CentrePreference" field.
func (eaiu *ExamApplicationsIPUpdate) SetCentrePreference(s string) *ExamApplicationsIPUpdate {
	eaiu.mutation.SetCentrePreference(s)
	return eaiu
}

// SetNillableCentrePreference sets the "CentrePreference" field if the given value is not nil.
func (eaiu *ExamApplicationsIPUpdate) SetNillableCentrePreference(s *string) *ExamApplicationsIPUpdate {
	if s != nil {
		eaiu.SetCentrePreference(*s)
	}
	return eaiu
}

// ClearCentrePreference clears the value of the "CentrePreference" field.
func (eaiu *ExamApplicationsIPUpdate) ClearCentrePreference() *ExamApplicationsIPUpdate {
	eaiu.mutation.ClearCentrePreference()
	return eaiu
}

// SetSignature sets the "Signature" field.
func (eaiu *ExamApplicationsIPUpdate) SetSignature(s string) *ExamApplicationsIPUpdate {
	eaiu.mutation.SetSignature(s)
	return eaiu
}

// SetNillableSignature sets the "Signature" field if the given value is not nil.
func (eaiu *ExamApplicationsIPUpdate) SetNillableSignature(s *string) *ExamApplicationsIPUpdate {
	if s != nil {
		eaiu.SetSignature(*s)
	}
	return eaiu
}

// ClearSignature clears the value of the "Signature" field.
func (eaiu *ExamApplicationsIPUpdate) ClearSignature() *ExamApplicationsIPUpdate {
	eaiu.mutation.ClearSignature()
	return eaiu
}

// SetPhoto sets the "Photo" field.
func (eaiu *ExamApplicationsIPUpdate) SetPhoto(s string) *ExamApplicationsIPUpdate {
	eaiu.mutation.SetPhoto(s)
	return eaiu
}

// SetNillablePhoto sets the "Photo" field if the given value is not nil.
func (eaiu *ExamApplicationsIPUpdate) SetNillablePhoto(s *string) *ExamApplicationsIPUpdate {
	if s != nil {
		eaiu.SetPhoto(*s)
	}
	return eaiu
}

// ClearPhoto clears the value of the "Photo" field.
func (eaiu *ExamApplicationsIPUpdate) ClearPhoto() *ExamApplicationsIPUpdate {
	eaiu.mutation.ClearPhoto()
	return eaiu
}

// SetSignaturePath sets the "SignaturePath" field.
func (eaiu *ExamApplicationsIPUpdate) SetSignaturePath(s string) *ExamApplicationsIPUpdate {
	eaiu.mutation.SetSignaturePath(s)
	return eaiu
}

// SetNillableSignaturePath sets the "SignaturePath" field if the given value is not nil.
func (eaiu *ExamApplicationsIPUpdate) SetNillableSignaturePath(s *string) *ExamApplicationsIPUpdate {
	if s != nil {
		eaiu.SetSignaturePath(*s)
	}
	return eaiu
}

// ClearSignaturePath clears the value of the "SignaturePath" field.
func (eaiu *ExamApplicationsIPUpdate) ClearSignaturePath() *ExamApplicationsIPUpdate {
	eaiu.mutation.ClearSignaturePath()
	return eaiu
}

// SetPhotoPath sets the "PhotoPath" field.
func (eaiu *ExamApplicationsIPUpdate) SetPhotoPath(s string) *ExamApplicationsIPUpdate {
	eaiu.mutation.SetPhotoPath(s)
	return eaiu
}

// SetNillablePhotoPath sets the "PhotoPath" field if the given value is not nil.
func (eaiu *ExamApplicationsIPUpdate) SetNillablePhotoPath(s *string) *ExamApplicationsIPUpdate {
	if s != nil {
		eaiu.SetPhotoPath(*s)
	}
	return eaiu
}

// ClearPhotoPath clears the value of the "PhotoPath" field.
func (eaiu *ExamApplicationsIPUpdate) ClearPhotoPath() *ExamApplicationsIPUpdate {
	eaiu.mutation.ClearPhotoPath()
	return eaiu
}

// SetCandidatePhoto sets the "CandidatePhoto" field.
func (eaiu *ExamApplicationsIPUpdate) SetCandidatePhoto(b []byte) *ExamApplicationsIPUpdate {
	eaiu.mutation.SetCandidatePhoto(b)
	return eaiu
}

// ClearCandidatePhoto clears the value of the "CandidatePhoto" field.
func (eaiu *ExamApplicationsIPUpdate) ClearCandidatePhoto() *ExamApplicationsIPUpdate {
	eaiu.mutation.ClearCandidatePhoto()
	return eaiu
}

// SetCandidateSignature sets the "CandidateSignature" field.
func (eaiu *ExamApplicationsIPUpdate) SetCandidateSignature(b []byte) *ExamApplicationsIPUpdate {
	eaiu.mutation.SetCandidateSignature(b)
	return eaiu
}

// ClearCandidateSignature clears the value of the "CandidateSignature" field.
func (eaiu *ExamApplicationsIPUpdate) ClearCandidateSignature() *ExamApplicationsIPUpdate {
	eaiu.mutation.ClearCandidateSignature()
	return eaiu
}

// SetTempHallTicket sets the "TempHallTicket" field.
func (eaiu *ExamApplicationsIPUpdate) SetTempHallTicket(s string) *ExamApplicationsIPUpdate {
	eaiu.mutation.SetTempHallTicket(s)
	return eaiu
}

// SetNillableTempHallTicket sets the "TempHallTicket" field if the given value is not nil.
func (eaiu *ExamApplicationsIPUpdate) SetNillableTempHallTicket(s *string) *ExamApplicationsIPUpdate {
	if s != nil {
		eaiu.SetTempHallTicket(*s)
	}
	return eaiu
}

// ClearTempHallTicket clears the value of the "TempHallTicket" field.
func (eaiu *ExamApplicationsIPUpdate) ClearTempHallTicket() *ExamApplicationsIPUpdate {
	eaiu.mutation.ClearTempHallTicket()
	return eaiu
}

// SetCandidateRemarks sets the "CandidateRemarks" field.
func (eaiu *ExamApplicationsIPUpdate) SetCandidateRemarks(s string) *ExamApplicationsIPUpdate {
	eaiu.mutation.SetCandidateRemarks(s)
	return eaiu
}

// SetNillableCandidateRemarks sets the "CandidateRemarks" field if the given value is not nil.
func (eaiu *ExamApplicationsIPUpdate) SetNillableCandidateRemarks(s *string) *ExamApplicationsIPUpdate {
	if s != nil {
		eaiu.SetCandidateRemarks(*s)
	}
	return eaiu
}

// ClearCandidateRemarks clears the value of the "CandidateRemarks" field.
func (eaiu *ExamApplicationsIPUpdate) ClearCandidateRemarks() *ExamApplicationsIPUpdate {
	eaiu.mutation.ClearCandidateRemarks()
	return eaiu
}

// SetVAGeneralRemarks sets the "VAGeneralRemarks" field.
func (eaiu *ExamApplicationsIPUpdate) SetVAGeneralRemarks(s string) *ExamApplicationsIPUpdate {
	eaiu.mutation.SetVAGeneralRemarks(s)
	return eaiu
}

// SetNillableVAGeneralRemarks sets the "VAGeneralRemarks" field if the given value is not nil.
func (eaiu *ExamApplicationsIPUpdate) SetNillableVAGeneralRemarks(s *string) *ExamApplicationsIPUpdate {
	if s != nil {
		eaiu.SetVAGeneralRemarks(*s)
	}
	return eaiu
}

// ClearVAGeneralRemarks clears the value of the "VAGeneralRemarks" field.
func (eaiu *ExamApplicationsIPUpdate) ClearVAGeneralRemarks() *ExamApplicationsIPUpdate {
	eaiu.mutation.ClearVAGeneralRemarks()
	return eaiu
}

// SetCAGeneralRemarks sets the "CAGeneralRemarks" field.
func (eaiu *ExamApplicationsIPUpdate) SetCAGeneralRemarks(s string) *ExamApplicationsIPUpdate {
	eaiu.mutation.SetCAGeneralRemarks(s)
	return eaiu
}

// SetNillableCAGeneralRemarks sets the "CAGeneralRemarks" field if the given value is not nil.
func (eaiu *ExamApplicationsIPUpdate) SetNillableCAGeneralRemarks(s *string) *ExamApplicationsIPUpdate {
	if s != nil {
		eaiu.SetCAGeneralRemarks(*s)
	}
	return eaiu
}

// ClearCAGeneralRemarks clears the value of the "CAGeneralRemarks" field.
func (eaiu *ExamApplicationsIPUpdate) ClearCAGeneralRemarks() *ExamApplicationsIPUpdate {
	eaiu.mutation.ClearCAGeneralRemarks()
	return eaiu
}

// SetNAGeneralRemarks sets the "NAGeneralRemarks" field.
func (eaiu *ExamApplicationsIPUpdate) SetNAGeneralRemarks(s string) *ExamApplicationsIPUpdate {
	eaiu.mutation.SetNAGeneralRemarks(s)
	return eaiu
}

// SetNillableNAGeneralRemarks sets the "NAGeneralRemarks" field if the given value is not nil.
func (eaiu *ExamApplicationsIPUpdate) SetNillableNAGeneralRemarks(s *string) *ExamApplicationsIPUpdate {
	if s != nil {
		eaiu.SetNAGeneralRemarks(*s)
	}
	return eaiu
}

// ClearNAGeneralRemarks clears the value of the "NAGeneralRemarks" field.
func (eaiu *ExamApplicationsIPUpdate) ClearNAGeneralRemarks() *ExamApplicationsIPUpdate {
	eaiu.mutation.ClearNAGeneralRemarks()
	return eaiu
}

// SetApplicationStatus sets the "ApplicationStatus" field.
func (eaiu *ExamApplicationsIPUpdate) SetApplicationStatus(s string) *ExamApplicationsIPUpdate {
	eaiu.mutation.SetApplicationStatus(s)
	return eaiu
}

// SetNillableApplicationStatus sets the "ApplicationStatus" field if the given value is not nil.
func (eaiu *ExamApplicationsIPUpdate) SetNillableApplicationStatus(s *string) *ExamApplicationsIPUpdate {
	if s != nil {
		eaiu.SetApplicationStatus(*s)
	}
	return eaiu
}

// ClearApplicationStatus clears the value of the "ApplicationStatus" field.
func (eaiu *ExamApplicationsIPUpdate) ClearApplicationStatus() *ExamApplicationsIPUpdate {
	eaiu.mutation.ClearApplicationStatus()
	return eaiu
}

// SetStatus sets the "Status" field.
func (eaiu *ExamApplicationsIPUpdate) SetStatus(s string) *ExamApplicationsIPUpdate {
	eaiu.mutation.SetStatus(s)
	return eaiu
}

// SetNillableStatus sets the "Status" field if the given value is not nil.
func (eaiu *ExamApplicationsIPUpdate) SetNillableStatus(s *string) *ExamApplicationsIPUpdate {
	if s != nil {
		eaiu.SetStatus(*s)
	}
	return eaiu
}

// ClearStatus clears the value of the "Status" field.
func (eaiu *ExamApplicationsIPUpdate) ClearStatus() *ExamApplicationsIPUpdate {
	eaiu.mutation.ClearStatus()
	return eaiu
}

// SetVAUserId sets the "VA_UserId" field.
func (eaiu *ExamApplicationsIPUpdate) SetVAUserId(i int32) *ExamApplicationsIPUpdate {
	eaiu.mutation.ResetVAUserId()
	eaiu.mutation.SetVAUserId(i)
	return eaiu
}

// SetNillableVAUserId sets the "VA_UserId" field if the given value is not nil.
func (eaiu *ExamApplicationsIPUpdate) SetNillableVAUserId(i *int32) *ExamApplicationsIPUpdate {
	if i != nil {
		eaiu.SetVAUserId(*i)
	}
	return eaiu
}

// AddVAUserId adds i to the "VA_UserId" field.
func (eaiu *ExamApplicationsIPUpdate) AddVAUserId(i int32) *ExamApplicationsIPUpdate {
	eaiu.mutation.AddVAUserId(i)
	return eaiu
}

// ClearVAUserId clears the value of the "VA_UserId" field.
func (eaiu *ExamApplicationsIPUpdate) ClearVAUserId() *ExamApplicationsIPUpdate {
	eaiu.mutation.ClearVAUserId()
	return eaiu
}

// SetVAUserName sets the "VA_UserName" field.
func (eaiu *ExamApplicationsIPUpdate) SetVAUserName(s string) *ExamApplicationsIPUpdate {
	eaiu.mutation.SetVAUserName(s)
	return eaiu
}

// SetNillableVAUserName sets the "VA_UserName" field if the given value is not nil.
func (eaiu *ExamApplicationsIPUpdate) SetNillableVAUserName(s *string) *ExamApplicationsIPUpdate {
	if s != nil {
		eaiu.SetVAUserName(*s)
	}
	return eaiu
}

// ClearVAUserName clears the value of the "VA_UserName" field.
func (eaiu *ExamApplicationsIPUpdate) ClearVAUserName() *ExamApplicationsIPUpdate {
	eaiu.mutation.ClearVAUserName()
	return eaiu
}

// SetVAEmployeeID sets the "VA_EmployeeID" field.
func (eaiu *ExamApplicationsIPUpdate) SetVAEmployeeID(s string) *ExamApplicationsIPUpdate {
	eaiu.mutation.SetVAEmployeeID(s)
	return eaiu
}

// SetNillableVAEmployeeID sets the "VA_EmployeeID" field if the given value is not nil.
func (eaiu *ExamApplicationsIPUpdate) SetNillableVAEmployeeID(s *string) *ExamApplicationsIPUpdate {
	if s != nil {
		eaiu.SetVAEmployeeID(*s)
	}
	return eaiu
}

// ClearVAEmployeeID clears the value of the "VA_EmployeeID" field.
func (eaiu *ExamApplicationsIPUpdate) ClearVAEmployeeID() *ExamApplicationsIPUpdate {
	eaiu.mutation.ClearVAEmployeeID()
	return eaiu
}

// SetVAEmployeeDesignation sets the "VA_EmployeeDesignation" field.
func (eaiu *ExamApplicationsIPUpdate) SetVAEmployeeDesignation(s string) *ExamApplicationsIPUpdate {
	eaiu.mutation.SetVAEmployeeDesignation(s)
	return eaiu
}

// SetNillableVAEmployeeDesignation sets the "VA_EmployeeDesignation" field if the given value is not nil.
func (eaiu *ExamApplicationsIPUpdate) SetNillableVAEmployeeDesignation(s *string) *ExamApplicationsIPUpdate {
	if s != nil {
		eaiu.SetVAEmployeeDesignation(*s)
	}
	return eaiu
}

// ClearVAEmployeeDesignation clears the value of the "VA_EmployeeDesignation" field.
func (eaiu *ExamApplicationsIPUpdate) ClearVAEmployeeDesignation() *ExamApplicationsIPUpdate {
	eaiu.mutation.ClearVAEmployeeDesignation()
	return eaiu
}

// SetVARemarks sets the "VA_Remarks" field.
func (eaiu *ExamApplicationsIPUpdate) SetVARemarks(s string) *ExamApplicationsIPUpdate {
	eaiu.mutation.SetVARemarks(s)
	return eaiu
}

// SetNillableVARemarks sets the "VA_Remarks" field if the given value is not nil.
func (eaiu *ExamApplicationsIPUpdate) SetNillableVARemarks(s *string) *ExamApplicationsIPUpdate {
	if s != nil {
		eaiu.SetVARemarks(*s)
	}
	return eaiu
}

// ClearVARemarks clears the value of the "VA_Remarks" field.
func (eaiu *ExamApplicationsIPUpdate) ClearVARemarks() *ExamApplicationsIPUpdate {
	eaiu.mutation.ClearVARemarks()
	return eaiu
}

// SetVADate sets the "VA_Date" field.
func (eaiu *ExamApplicationsIPUpdate) SetVADate(t time.Time) *ExamApplicationsIPUpdate {
	eaiu.mutation.SetVADate(t)
	return eaiu
}

// SetNillableVADate sets the "VA_Date" field if the given value is not nil.
func (eaiu *ExamApplicationsIPUpdate) SetNillableVADate(t *time.Time) *ExamApplicationsIPUpdate {
	if t != nil {
		eaiu.SetVADate(*t)
	}
	return eaiu
}

// ClearVADate clears the value of the "VA_Date" field.
func (eaiu *ExamApplicationsIPUpdate) ClearVADate() *ExamApplicationsIPUpdate {
	eaiu.mutation.ClearVADate()
	return eaiu
}

// SetCAUserId sets the "CA_UserId" field.
func (eaiu *ExamApplicationsIPUpdate) SetCAUserId(i int32) *ExamApplicationsIPUpdate {
	eaiu.mutation.ResetCAUserId()
	eaiu.mutation.SetCAUserId(i)
	return eaiu
}

// SetNillableCAUserId sets the "CA_UserId" field if the given value is not nil.
func (eaiu *ExamApplicationsIPUpdate) SetNillableCAUserId(i *int32) *ExamApplicationsIPUpdate {
	if i != nil {
		eaiu.SetCAUserId(*i)
	}
	return eaiu
}

// AddCAUserId adds i to the "CA_UserId" field.
func (eaiu *ExamApplicationsIPUpdate) AddCAUserId(i int32) *ExamApplicationsIPUpdate {
	eaiu.mutation.AddCAUserId(i)
	return eaiu
}

// ClearCAUserId clears the value of the "CA_UserId" field.
func (eaiu *ExamApplicationsIPUpdate) ClearCAUserId() *ExamApplicationsIPUpdate {
	eaiu.mutation.ClearCAUserId()
	return eaiu
}

// SetCAUserName sets the "CA_UserName" field.
func (eaiu *ExamApplicationsIPUpdate) SetCAUserName(s string) *ExamApplicationsIPUpdate {
	eaiu.mutation.SetCAUserName(s)
	return eaiu
}

// SetNillableCAUserName sets the "CA_UserName" field if the given value is not nil.
func (eaiu *ExamApplicationsIPUpdate) SetNillableCAUserName(s *string) *ExamApplicationsIPUpdate {
	if s != nil {
		eaiu.SetCAUserName(*s)
	}
	return eaiu
}

// ClearCAUserName clears the value of the "CA_UserName" field.
func (eaiu *ExamApplicationsIPUpdate) ClearCAUserName() *ExamApplicationsIPUpdate {
	eaiu.mutation.ClearCAUserName()
	return eaiu
}

// SetCAEmployeeID sets the "CA_EmployeeID" field.
func (eaiu *ExamApplicationsIPUpdate) SetCAEmployeeID(s string) *ExamApplicationsIPUpdate {
	eaiu.mutation.SetCAEmployeeID(s)
	return eaiu
}

// SetNillableCAEmployeeID sets the "CA_EmployeeID" field if the given value is not nil.
func (eaiu *ExamApplicationsIPUpdate) SetNillableCAEmployeeID(s *string) *ExamApplicationsIPUpdate {
	if s != nil {
		eaiu.SetCAEmployeeID(*s)
	}
	return eaiu
}

// ClearCAEmployeeID clears the value of the "CA_EmployeeID" field.
func (eaiu *ExamApplicationsIPUpdate) ClearCAEmployeeID() *ExamApplicationsIPUpdate {
	eaiu.mutation.ClearCAEmployeeID()
	return eaiu
}

// SetCAEmployeeDesignation sets the "CA_EmployeeDesignation" field.
func (eaiu *ExamApplicationsIPUpdate) SetCAEmployeeDesignation(s string) *ExamApplicationsIPUpdate {
	eaiu.mutation.SetCAEmployeeDesignation(s)
	return eaiu
}

// SetNillableCAEmployeeDesignation sets the "CA_EmployeeDesignation" field if the given value is not nil.
func (eaiu *ExamApplicationsIPUpdate) SetNillableCAEmployeeDesignation(s *string) *ExamApplicationsIPUpdate {
	if s != nil {
		eaiu.SetCAEmployeeDesignation(*s)
	}
	return eaiu
}

// ClearCAEmployeeDesignation clears the value of the "CA_EmployeeDesignation" field.
func (eaiu *ExamApplicationsIPUpdate) ClearCAEmployeeDesignation() *ExamApplicationsIPUpdate {
	eaiu.mutation.ClearCAEmployeeDesignation()
	return eaiu
}

// SetCARemarks sets the "CA_Remarks" field.
func (eaiu *ExamApplicationsIPUpdate) SetCARemarks(s string) *ExamApplicationsIPUpdate {
	eaiu.mutation.SetCARemarks(s)
	return eaiu
}

// SetNillableCARemarks sets the "CA_Remarks" field if the given value is not nil.
func (eaiu *ExamApplicationsIPUpdate) SetNillableCARemarks(s *string) *ExamApplicationsIPUpdate {
	if s != nil {
		eaiu.SetCARemarks(*s)
	}
	return eaiu
}

// ClearCARemarks clears the value of the "CA_Remarks" field.
func (eaiu *ExamApplicationsIPUpdate) ClearCARemarks() *ExamApplicationsIPUpdate {
	eaiu.mutation.ClearCARemarks()
	return eaiu
}

// SetCADate sets the "CA_Date" field.
func (eaiu *ExamApplicationsIPUpdate) SetCADate(t time.Time) *ExamApplicationsIPUpdate {
	eaiu.mutation.SetCADate(t)
	return eaiu
}

// SetNillableCADate sets the "CA_Date" field if the given value is not nil.
func (eaiu *ExamApplicationsIPUpdate) SetNillableCADate(t *time.Time) *ExamApplicationsIPUpdate {
	if t != nil {
		eaiu.SetCADate(*t)
	}
	return eaiu
}

// ClearCADate clears the value of the "CA_Date" field.
func (eaiu *ExamApplicationsIPUpdate) ClearCADate() *ExamApplicationsIPUpdate {
	eaiu.mutation.ClearCADate()
	return eaiu
}

// SetNAUserId sets the "NA_UserId" field.
func (eaiu *ExamApplicationsIPUpdate) SetNAUserId(i int32) *ExamApplicationsIPUpdate {
	eaiu.mutation.ResetNAUserId()
	eaiu.mutation.SetNAUserId(i)
	return eaiu
}

// SetNillableNAUserId sets the "NA_UserId" field if the given value is not nil.
func (eaiu *ExamApplicationsIPUpdate) SetNillableNAUserId(i *int32) *ExamApplicationsIPUpdate {
	if i != nil {
		eaiu.SetNAUserId(*i)
	}
	return eaiu
}

// AddNAUserId adds i to the "NA_UserId" field.
func (eaiu *ExamApplicationsIPUpdate) AddNAUserId(i int32) *ExamApplicationsIPUpdate {
	eaiu.mutation.AddNAUserId(i)
	return eaiu
}

// ClearNAUserId clears the value of the "NA_UserId" field.
func (eaiu *ExamApplicationsIPUpdate) ClearNAUserId() *ExamApplicationsIPUpdate {
	eaiu.mutation.ClearNAUserId()
	return eaiu
}

// SetNAUserName sets the "NA_UserName" field.
func (eaiu *ExamApplicationsIPUpdate) SetNAUserName(s string) *ExamApplicationsIPUpdate {
	eaiu.mutation.SetNAUserName(s)
	return eaiu
}

// SetNillableNAUserName sets the "NA_UserName" field if the given value is not nil.
func (eaiu *ExamApplicationsIPUpdate) SetNillableNAUserName(s *string) *ExamApplicationsIPUpdate {
	if s != nil {
		eaiu.SetNAUserName(*s)
	}
	return eaiu
}

// ClearNAUserName clears the value of the "NA_UserName" field.
func (eaiu *ExamApplicationsIPUpdate) ClearNAUserName() *ExamApplicationsIPUpdate {
	eaiu.mutation.ClearNAUserName()
	return eaiu
}

// SetNAEmployeeID sets the "NA_EmployeeID" field.
func (eaiu *ExamApplicationsIPUpdate) SetNAEmployeeID(s string) *ExamApplicationsIPUpdate {
	eaiu.mutation.SetNAEmployeeID(s)
	return eaiu
}

// SetNillableNAEmployeeID sets the "NA_EmployeeID" field if the given value is not nil.
func (eaiu *ExamApplicationsIPUpdate) SetNillableNAEmployeeID(s *string) *ExamApplicationsIPUpdate {
	if s != nil {
		eaiu.SetNAEmployeeID(*s)
	}
	return eaiu
}

// ClearNAEmployeeID clears the value of the "NA_EmployeeID" field.
func (eaiu *ExamApplicationsIPUpdate) ClearNAEmployeeID() *ExamApplicationsIPUpdate {
	eaiu.mutation.ClearNAEmployeeID()
	return eaiu
}

// SetNAEmployeeDesignation sets the "NA_EmployeeDesignation" field.
func (eaiu *ExamApplicationsIPUpdate) SetNAEmployeeDesignation(s string) *ExamApplicationsIPUpdate {
	eaiu.mutation.SetNAEmployeeDesignation(s)
	return eaiu
}

// SetNillableNAEmployeeDesignation sets the "NA_EmployeeDesignation" field if the given value is not nil.
func (eaiu *ExamApplicationsIPUpdate) SetNillableNAEmployeeDesignation(s *string) *ExamApplicationsIPUpdate {
	if s != nil {
		eaiu.SetNAEmployeeDesignation(*s)
	}
	return eaiu
}

// ClearNAEmployeeDesignation clears the value of the "NA_EmployeeDesignation" field.
func (eaiu *ExamApplicationsIPUpdate) ClearNAEmployeeDesignation() *ExamApplicationsIPUpdate {
	eaiu.mutation.ClearNAEmployeeDesignation()
	return eaiu
}

// SetNARemarks sets the "NA_Remarks" field.
func (eaiu *ExamApplicationsIPUpdate) SetNARemarks(s string) *ExamApplicationsIPUpdate {
	eaiu.mutation.SetNARemarks(s)
	return eaiu
}

// SetNillableNARemarks sets the "NA_Remarks" field if the given value is not nil.
func (eaiu *ExamApplicationsIPUpdate) SetNillableNARemarks(s *string) *ExamApplicationsIPUpdate {
	if s != nil {
		eaiu.SetNARemarks(*s)
	}
	return eaiu
}

// ClearNARemarks clears the value of the "NA_Remarks" field.
func (eaiu *ExamApplicationsIPUpdate) ClearNARemarks() *ExamApplicationsIPUpdate {
	eaiu.mutation.ClearNARemarks()
	return eaiu
}

// SetNADate sets the "NA_Date" field.
func (eaiu *ExamApplicationsIPUpdate) SetNADate(t time.Time) *ExamApplicationsIPUpdate {
	eaiu.mutation.SetNADate(t)
	return eaiu
}

// SetNillableNADate sets the "NA_Date" field if the given value is not nil.
func (eaiu *ExamApplicationsIPUpdate) SetNillableNADate(t *time.Time) *ExamApplicationsIPUpdate {
	if t != nil {
		eaiu.SetNADate(*t)
	}
	return eaiu
}

// ClearNADate clears the value of the "NA_Date" field.
func (eaiu *ExamApplicationsIPUpdate) ClearNADate() *ExamApplicationsIPUpdate {
	eaiu.mutation.ClearNADate()
	return eaiu
}

// SetAppliactionRemarks sets the "AppliactionRemarks" field.
func (eaiu *ExamApplicationsIPUpdate) SetAppliactionRemarks(s string) *ExamApplicationsIPUpdate {
	eaiu.mutation.SetAppliactionRemarks(s)
	return eaiu
}

// SetNillableAppliactionRemarks sets the "AppliactionRemarks" field if the given value is not nil.
func (eaiu *ExamApplicationsIPUpdate) SetNillableAppliactionRemarks(s *string) *ExamApplicationsIPUpdate {
	if s != nil {
		eaiu.SetAppliactionRemarks(*s)
	}
	return eaiu
}

// ClearAppliactionRemarks clears the value of the "AppliactionRemarks" field.
func (eaiu *ExamApplicationsIPUpdate) ClearAppliactionRemarks() *ExamApplicationsIPUpdate {
	eaiu.mutation.ClearAppliactionRemarks()
	return eaiu
}

// SetCadrePreferences sets the "CadrePreferences" field.
func (eaiu *ExamApplicationsIPUpdate) SetCadrePreferences(i []interface{}) *ExamApplicationsIPUpdate {
	eaiu.mutation.SetCadrePreferences(i)
	return eaiu
}

// AppendCadrePreferences appends i to the "CadrePreferences" field.
func (eaiu *ExamApplicationsIPUpdate) AppendCadrePreferences(i []interface{}) *ExamApplicationsIPUpdate {
	eaiu.mutation.AppendCadrePreferences(i)
	return eaiu
}

// ClearCadrePreferences clears the value of the "CadrePreferences" field.
func (eaiu *ExamApplicationsIPUpdate) ClearCadrePreferences() *ExamApplicationsIPUpdate {
	eaiu.mutation.ClearCadrePreferences()
	return eaiu
}

// SetCAPreviousRemarks sets the "CAPreviousRemarks" field.
func (eaiu *ExamApplicationsIPUpdate) SetCAPreviousRemarks(s string) *ExamApplicationsIPUpdate {
	eaiu.mutation.SetCAPreviousRemarks(s)
	return eaiu
}

// SetNillableCAPreviousRemarks sets the "CAPreviousRemarks" field if the given value is not nil.
func (eaiu *ExamApplicationsIPUpdate) SetNillableCAPreviousRemarks(s *string) *ExamApplicationsIPUpdate {
	if s != nil {
		eaiu.SetCAPreviousRemarks(*s)
	}
	return eaiu
}

// ClearCAPreviousRemarks clears the value of the "CAPreviousRemarks" field.
func (eaiu *ExamApplicationsIPUpdate) ClearCAPreviousRemarks() *ExamApplicationsIPUpdate {
	eaiu.mutation.ClearCAPreviousRemarks()
	return eaiu
}

// SetPunishmentStatus sets the "PunishmentStatus" field.
func (eaiu *ExamApplicationsIPUpdate) SetPunishmentStatus(b bool) *ExamApplicationsIPUpdate {
	eaiu.mutation.SetPunishmentStatus(b)
	return eaiu
}

// SetNillablePunishmentStatus sets the "PunishmentStatus" field if the given value is not nil.
func (eaiu *ExamApplicationsIPUpdate) SetNillablePunishmentStatus(b *bool) *ExamApplicationsIPUpdate {
	if b != nil {
		eaiu.SetPunishmentStatus(*b)
	}
	return eaiu
}

// ClearPunishmentStatus clears the value of the "PunishmentStatus" field.
func (eaiu *ExamApplicationsIPUpdate) ClearPunishmentStatus() *ExamApplicationsIPUpdate {
	eaiu.mutation.ClearPunishmentStatus()
	return eaiu
}

// SetDisciplinaryCaseStatus sets the "DisciplinaryCaseStatus" field.
func (eaiu *ExamApplicationsIPUpdate) SetDisciplinaryCaseStatus(b bool) *ExamApplicationsIPUpdate {
	eaiu.mutation.SetDisciplinaryCaseStatus(b)
	return eaiu
}

// SetNillableDisciplinaryCaseStatus sets the "DisciplinaryCaseStatus" field if the given value is not nil.
func (eaiu *ExamApplicationsIPUpdate) SetNillableDisciplinaryCaseStatus(b *bool) *ExamApplicationsIPUpdate {
	if b != nil {
		eaiu.SetDisciplinaryCaseStatus(*b)
	}
	return eaiu
}

// ClearDisciplinaryCaseStatus clears the value of the "DisciplinaryCaseStatus" field.
func (eaiu *ExamApplicationsIPUpdate) ClearDisciplinaryCaseStatus() *ExamApplicationsIPUpdate {
	eaiu.mutation.ClearDisciplinaryCaseStatus()
	return eaiu
}

// SetGenerateHallTicketFlag sets the "GenerateHallTicketFlag" field.
func (eaiu *ExamApplicationsIPUpdate) SetGenerateHallTicketFlag(b bool) *ExamApplicationsIPUpdate {
	eaiu.mutation.SetGenerateHallTicketFlag(b)
	return eaiu
}

// SetNillableGenerateHallTicketFlag sets the "GenerateHallTicketFlag" field if the given value is not nil.
func (eaiu *ExamApplicationsIPUpdate) SetNillableGenerateHallTicketFlag(b *bool) *ExamApplicationsIPUpdate {
	if b != nil {
		eaiu.SetGenerateHallTicketFlag(*b)
	}
	return eaiu
}

// ClearGenerateHallTicketFlag clears the value of the "GenerateHallTicketFlag" field.
func (eaiu *ExamApplicationsIPUpdate) ClearGenerateHallTicketFlag() *ExamApplicationsIPUpdate {
	eaiu.mutation.ClearGenerateHallTicketFlag()
	return eaiu
}

// SetHallTicketNumber sets the "HallTicketNumber" field.
func (eaiu *ExamApplicationsIPUpdate) SetHallTicketNumber(s string) *ExamApplicationsIPUpdate {
	eaiu.mutation.SetHallTicketNumber(s)
	return eaiu
}

// SetNillableHallTicketNumber sets the "HallTicketNumber" field if the given value is not nil.
func (eaiu *ExamApplicationsIPUpdate) SetNillableHallTicketNumber(s *string) *ExamApplicationsIPUpdate {
	if s != nil {
		eaiu.SetHallTicketNumber(*s)
	}
	return eaiu
}

// ClearHallTicketNumber clears the value of the "HallTicketNumber" field.
func (eaiu *ExamApplicationsIPUpdate) ClearHallTicketNumber() *ExamApplicationsIPUpdate {
	eaiu.mutation.ClearHallTicketNumber()
	return eaiu
}

// SetHallTicketGeneratedFlag sets the "HallTicketGeneratedFlag" field.
func (eaiu *ExamApplicationsIPUpdate) SetHallTicketGeneratedFlag(b bool) *ExamApplicationsIPUpdate {
	eaiu.mutation.SetHallTicketGeneratedFlag(b)
	return eaiu
}

// SetNillableHallTicketGeneratedFlag sets the "HallTicketGeneratedFlag" field if the given value is not nil.
func (eaiu *ExamApplicationsIPUpdate) SetNillableHallTicketGeneratedFlag(b *bool) *ExamApplicationsIPUpdate {
	if b != nil {
		eaiu.SetHallTicketGeneratedFlag(*b)
	}
	return eaiu
}

// ClearHallTicketGeneratedFlag clears the value of the "HallTicketGeneratedFlag" field.
func (eaiu *ExamApplicationsIPUpdate) ClearHallTicketGeneratedFlag() *ExamApplicationsIPUpdate {
	eaiu.mutation.ClearHallTicketGeneratedFlag()
	return eaiu
}

// SetGenerateHallTicketFlagByNO sets the "GenerateHallTicketFlagByNO" field.
func (eaiu *ExamApplicationsIPUpdate) SetGenerateHallTicketFlagByNO(b bool) *ExamApplicationsIPUpdate {
	eaiu.mutation.SetGenerateHallTicketFlagByNO(b)
	return eaiu
}

// SetNillableGenerateHallTicketFlagByNO sets the "GenerateHallTicketFlagByNO" field if the given value is not nil.
func (eaiu *ExamApplicationsIPUpdate) SetNillableGenerateHallTicketFlagByNO(b *bool) *ExamApplicationsIPUpdate {
	if b != nil {
		eaiu.SetGenerateHallTicketFlagByNO(*b)
	}
	return eaiu
}

// ClearGenerateHallTicketFlagByNO clears the value of the "GenerateHallTicketFlagByNO" field.
func (eaiu *ExamApplicationsIPUpdate) ClearGenerateHallTicketFlagByNO() *ExamApplicationsIPUpdate {
	eaiu.mutation.ClearGenerateHallTicketFlagByNO()
	return eaiu
}

// SetHallTicketGeneratedDate sets the "HallTicketGeneratedDate" field.
func (eaiu *ExamApplicationsIPUpdate) SetHallTicketGeneratedDate(t time.Time) *ExamApplicationsIPUpdate {
	eaiu.mutation.SetHallTicketGeneratedDate(t)
	return eaiu
}

// SetNillableHallTicketGeneratedDate sets the "HallTicketGeneratedDate" field if the given value is not nil.
func (eaiu *ExamApplicationsIPUpdate) SetNillableHallTicketGeneratedDate(t *time.Time) *ExamApplicationsIPUpdate {
	if t != nil {
		eaiu.SetHallTicketGeneratedDate(*t)
	}
	return eaiu
}

// ClearHallTicketGeneratedDate clears the value of the "HallTicketGeneratedDate" field.
func (eaiu *ExamApplicationsIPUpdate) ClearHallTicketGeneratedDate() *ExamApplicationsIPUpdate {
	eaiu.mutation.ClearHallTicketGeneratedDate()
	return eaiu
}

// SetTemporaryHallTicket sets the "TemporaryHallTicket" field.
func (eaiu *ExamApplicationsIPUpdate) SetTemporaryHallTicket(s string) *ExamApplicationsIPUpdate {
	eaiu.mutation.SetTemporaryHallTicket(s)
	return eaiu
}

// SetNillableTemporaryHallTicket sets the "TemporaryHallTicket" field if the given value is not nil.
func (eaiu *ExamApplicationsIPUpdate) SetNillableTemporaryHallTicket(s *string) *ExamApplicationsIPUpdate {
	if s != nil {
		eaiu.SetTemporaryHallTicket(*s)
	}
	return eaiu
}

// ClearTemporaryHallTicket clears the value of the "TemporaryHallTicket" field.
func (eaiu *ExamApplicationsIPUpdate) ClearTemporaryHallTicket() *ExamApplicationsIPUpdate {
	eaiu.mutation.ClearTemporaryHallTicket()
	return eaiu
}

// SetOptionUsed sets the "OptionUsed" field.
func (eaiu *ExamApplicationsIPUpdate) SetOptionUsed(s string) *ExamApplicationsIPUpdate {
	eaiu.mutation.SetOptionUsed(s)
	return eaiu
}

// SetNillableOptionUsed sets the "OptionUsed" field if the given value is not nil.
func (eaiu *ExamApplicationsIPUpdate) SetNillableOptionUsed(s *string) *ExamApplicationsIPUpdate {
	if s != nil {
		eaiu.SetOptionUsed(*s)
	}
	return eaiu
}

// ClearOptionUsed clears the value of the "OptionUsed" field.
func (eaiu *ExamApplicationsIPUpdate) ClearOptionUsed() *ExamApplicationsIPUpdate {
	eaiu.mutation.ClearOptionUsed()
	return eaiu
}

// SetRemarks sets the "Remarks" field.
func (eaiu *ExamApplicationsIPUpdate) SetRemarks(s string) *ExamApplicationsIPUpdate {
	eaiu.mutation.SetRemarks(s)
	return eaiu
}

// SetNillableRemarks sets the "Remarks" field if the given value is not nil.
func (eaiu *ExamApplicationsIPUpdate) SetNillableRemarks(s *string) *ExamApplicationsIPUpdate {
	if s != nil {
		eaiu.SetRemarks(*s)
	}
	return eaiu
}

// ClearRemarks clears the value of the "Remarks" field.
func (eaiu *ExamApplicationsIPUpdate) ClearRemarks() *ExamApplicationsIPUpdate {
	eaiu.mutation.ClearRemarks()
	return eaiu
}

// SetCadre sets the "Cadre" field.
func (eaiu *ExamApplicationsIPUpdate) SetCadre(s string) *ExamApplicationsIPUpdate {
	eaiu.mutation.SetCadre(s)
	return eaiu
}

// SetNillableCadre sets the "Cadre" field if the given value is not nil.
func (eaiu *ExamApplicationsIPUpdate) SetNillableCadre(s *string) *ExamApplicationsIPUpdate {
	if s != nil {
		eaiu.SetCadre(*s)
	}
	return eaiu
}

// ClearCadre clears the value of the "Cadre" field.
func (eaiu *ExamApplicationsIPUpdate) ClearCadre() *ExamApplicationsIPUpdate {
	eaiu.mutation.ClearCadre()
	return eaiu
}

// SetEmployeePost sets the "EmployeePost" field.
func (eaiu *ExamApplicationsIPUpdate) SetEmployeePost(s string) *ExamApplicationsIPUpdate {
	eaiu.mutation.SetEmployeePost(s)
	return eaiu
}

// SetNillableEmployeePost sets the "EmployeePost" field if the given value is not nil.
func (eaiu *ExamApplicationsIPUpdate) SetNillableEmployeePost(s *string) *ExamApplicationsIPUpdate {
	if s != nil {
		eaiu.SetEmployeePost(*s)
	}
	return eaiu
}

// ClearEmployeePost clears the value of the "EmployeePost" field.
func (eaiu *ExamApplicationsIPUpdate) ClearEmployeePost() *ExamApplicationsIPUpdate {
	eaiu.mutation.ClearEmployeePost()
	return eaiu
}

// SetDOJInEligiblePost sets the "DOJInEligiblePost" field.
func (eaiu *ExamApplicationsIPUpdate) SetDOJInEligiblePost(s string) *ExamApplicationsIPUpdate {
	eaiu.mutation.SetDOJInEligiblePost(s)
	return eaiu
}

// SetNillableDOJInEligiblePost sets the "DOJInEligiblePost" field if the given value is not nil.
func (eaiu *ExamApplicationsIPUpdate) SetNillableDOJInEligiblePost(s *string) *ExamApplicationsIPUpdate {
	if s != nil {
		eaiu.SetDOJInEligiblePost(*s)
	}
	return eaiu
}

// ClearDOJInEligiblePost clears the value of the "DOJInEligiblePost" field.
func (eaiu *ExamApplicationsIPUpdate) ClearDOJInEligiblePost() *ExamApplicationsIPUpdate {
	eaiu.mutation.ClearDOJInEligiblePost()
	return eaiu
}

// SetDivisionPreferences sets the "DivisionPreferences" field.
func (eaiu *ExamApplicationsIPUpdate) SetDivisionPreferences(i []interface{}) *ExamApplicationsIPUpdate {
	eaiu.mutation.SetDivisionPreferences(i)
	return eaiu
}

// AppendDivisionPreferences appends i to the "DivisionPreferences" field.
func (eaiu *ExamApplicationsIPUpdate) AppendDivisionPreferences(i []interface{}) *ExamApplicationsIPUpdate {
	eaiu.mutation.AppendDivisionPreferences(i)
	return eaiu
}

// ClearDivisionPreferences clears the value of the "DivisionPreferences" field.
func (eaiu *ExamApplicationsIPUpdate) ClearDivisionPreferences() *ExamApplicationsIPUpdate {
	eaiu.mutation.ClearDivisionPreferences()
	return eaiu
}

// SetRoleUserCode sets the "RoleUserCode" field.
func (eaiu *ExamApplicationsIPUpdate) SetRoleUserCode(i int32) *ExamApplicationsIPUpdate {
	eaiu.mutation.SetRoleUserCode(i)
	return eaiu
}

// SetNillableRoleUserCode sets the "RoleUserCode" field if the given value is not nil.
func (eaiu *ExamApplicationsIPUpdate) SetNillableRoleUserCode(i *int32) *ExamApplicationsIPUpdate {
	if i != nil {
		eaiu.SetRoleUserCode(*i)
	}
	return eaiu
}

// ClearRoleUserCode clears the value of the "RoleUserCode" field.
func (eaiu *ExamApplicationsIPUpdate) ClearRoleUserCode() *ExamApplicationsIPUpdate {
	eaiu.mutation.ClearRoleUserCode()
	return eaiu
}

// SetCircleSID sets the "CircleSID" field.
func (eaiu *ExamApplicationsIPUpdate) SetCircleSID(i int32) *ExamApplicationsIPUpdate {
	eaiu.mutation.SetCircleSID(i)
	return eaiu
}

// SetNillableCircleSID sets the "CircleSID" field if the given value is not nil.
func (eaiu *ExamApplicationsIPUpdate) SetNillableCircleSID(i *int32) *ExamApplicationsIPUpdate {
	if i != nil {
		eaiu.SetCircleSID(*i)
	}
	return eaiu
}

// ClearCircleSID clears the value of the "CircleSID" field.
func (eaiu *ExamApplicationsIPUpdate) ClearCircleSID() *ExamApplicationsIPUpdate {
	eaiu.mutation.ClearCircleSID()
	return eaiu
}

// SetFacilityName sets the "FacilityName" field.
func (eaiu *ExamApplicationsIPUpdate) SetFacilityName(s string) *ExamApplicationsIPUpdate {
	eaiu.mutation.SetFacilityName(s)
	return eaiu
}

// SetNillableFacilityName sets the "FacilityName" field if the given value is not nil.
func (eaiu *ExamApplicationsIPUpdate) SetNillableFacilityName(s *string) *ExamApplicationsIPUpdate {
	if s != nil {
		eaiu.SetFacilityName(*s)
	}
	return eaiu
}

// ClearFacilityName clears the value of the "FacilityName" field.
func (eaiu *ExamApplicationsIPUpdate) ClearFacilityName() *ExamApplicationsIPUpdate {
	eaiu.mutation.ClearFacilityName()
	return eaiu
}

// SetServiceLength sets the "ServiceLength" field.
func (eaiu *ExamApplicationsIPUpdate) SetServiceLength(i []interface{}) *ExamApplicationsIPUpdate {
	eaiu.mutation.SetServiceLength(i)
	return eaiu
}

// AppendServiceLength appends i to the "ServiceLength" field.
func (eaiu *ExamApplicationsIPUpdate) AppendServiceLength(i []interface{}) *ExamApplicationsIPUpdate {
	eaiu.mutation.AppendServiceLength(i)
	return eaiu
}

// ClearServiceLength clears the value of the "ServiceLength" field.
func (eaiu *ExamApplicationsIPUpdate) ClearServiceLength() *ExamApplicationsIPUpdate {
	eaiu.mutation.ClearServiceLength()
	return eaiu
}

// SetNonQualifyingService sets the "NonQualifyingService" field.
func (eaiu *ExamApplicationsIPUpdate) SetNonQualifyingService(i []interface{}) *ExamApplicationsIPUpdate {
	eaiu.mutation.SetNonQualifyingService(i)
	return eaiu
}

// AppendNonQualifyingService appends i to the "NonQualifyingService" field.
func (eaiu *ExamApplicationsIPUpdate) AppendNonQualifyingService(i []interface{}) *ExamApplicationsIPUpdate {
	eaiu.mutation.AppendNonQualifyingService(i)
	return eaiu
}

// ClearNonQualifyingService clears the value of the "NonQualifyingService" field.
func (eaiu *ExamApplicationsIPUpdate) ClearNonQualifyingService() *ExamApplicationsIPUpdate {
	eaiu.mutation.ClearNonQualifyingService()
	return eaiu
}

// SetDCInPresentCadre sets the "DCInPresentCadre" field.
func (eaiu *ExamApplicationsIPUpdate) SetDCInPresentCadre(s string) *ExamApplicationsIPUpdate {
	eaiu.mutation.SetDCInPresentCadre(s)
	return eaiu
}

// SetNillableDCInPresentCadre sets the "DCInPresentCadre" field if the given value is not nil.
func (eaiu *ExamApplicationsIPUpdate) SetNillableDCInPresentCadre(s *string) *ExamApplicationsIPUpdate {
	if s != nil {
		eaiu.SetDCInPresentCadre(*s)
	}
	return eaiu
}

// ClearDCInPresentCadre clears the value of the "DCInPresentCadre" field.
func (eaiu *ExamApplicationsIPUpdate) ClearDCInPresentCadre() *ExamApplicationsIPUpdate {
	eaiu.mutation.ClearDCInPresentCadre()
	return eaiu
}

// SetCenterId sets the "CenterId" field.
func (eaiu *ExamApplicationsIPUpdate) SetCenterId(i int32) *ExamApplicationsIPUpdate {
	eaiu.mutation.ResetCenterId()
	eaiu.mutation.SetCenterId(i)
	return eaiu
}

// SetNillableCenterId sets the "CenterId" field if the given value is not nil.
func (eaiu *ExamApplicationsIPUpdate) SetNillableCenterId(i *int32) *ExamApplicationsIPUpdate {
	if i != nil {
		eaiu.SetCenterId(*i)
	}
	return eaiu
}

// AddCenterId adds i to the "CenterId" field.
func (eaiu *ExamApplicationsIPUpdate) AddCenterId(i int32) *ExamApplicationsIPUpdate {
	eaiu.mutation.AddCenterId(i)
	return eaiu
}

// ClearCenterId clears the value of the "CenterId" field.
func (eaiu *ExamApplicationsIPUpdate) ClearCenterId() *ExamApplicationsIPUpdate {
	eaiu.mutation.ClearCenterId()
	return eaiu
}

// SetCenterCode sets the "CenterCode" field.
func (eaiu *ExamApplicationsIPUpdate) SetCenterCode(i int32) *ExamApplicationsIPUpdate {
	eaiu.mutation.SetCenterCode(i)
	return eaiu
}

// SetNillableCenterCode sets the "CenterCode" field if the given value is not nil.
func (eaiu *ExamApplicationsIPUpdate) SetNillableCenterCode(i *int32) *ExamApplicationsIPUpdate {
	if i != nil {
		eaiu.SetCenterCode(*i)
	}
	return eaiu
}

// ClearCenterCode clears the value of the "CenterCode" field.
func (eaiu *ExamApplicationsIPUpdate) ClearCenterCode() *ExamApplicationsIPUpdate {
	eaiu.mutation.ClearCenterCode()
	return eaiu
}

// SetClaimingQualifyingService sets the "ClaimingQualifyingService" field.
func (eaiu *ExamApplicationsIPUpdate) SetClaimingQualifyingService(s string) *ExamApplicationsIPUpdate {
	eaiu.mutation.SetClaimingQualifyingService(s)
	return eaiu
}

// SetNillableClaimingQualifyingService sets the "ClaimingQualifyingService" field if the given value is not nil.
func (eaiu *ExamApplicationsIPUpdate) SetNillableClaimingQualifyingService(s *string) *ExamApplicationsIPUpdate {
	if s != nil {
		eaiu.SetClaimingQualifyingService(*s)
	}
	return eaiu
}

// ClearClaimingQualifyingService clears the value of the "ClaimingQualifyingService" field.
func (eaiu *ExamApplicationsIPUpdate) ClearClaimingQualifyingService() *ExamApplicationsIPUpdate {
	eaiu.mutation.ClearClaimingQualifyingService()
	return eaiu
}

// SetDeputationOfficePincode sets the "DeputationOfficePincode" field.
func (eaiu *ExamApplicationsIPUpdate) SetDeputationOfficePincode(s string) *ExamApplicationsIPUpdate {
	eaiu.mutation.SetDeputationOfficePincode(s)
	return eaiu
}

// SetNillableDeputationOfficePincode sets the "DeputationOfficePincode" field if the given value is not nil.
func (eaiu *ExamApplicationsIPUpdate) SetNillableDeputationOfficePincode(s *string) *ExamApplicationsIPUpdate {
	if s != nil {
		eaiu.SetDeputationOfficePincode(*s)
	}
	return eaiu
}

// ClearDeputationOfficePincode clears the value of the "DeputationOfficePincode" field.
func (eaiu *ExamApplicationsIPUpdate) ClearDeputationOfficePincode() *ExamApplicationsIPUpdate {
	eaiu.mutation.ClearDeputationOfficePincode()
	return eaiu
}

// SetRecommendedStatus sets the "RecommendedStatus" field.
func (eaiu *ExamApplicationsIPUpdate) SetRecommendedStatus(s string) *ExamApplicationsIPUpdate {
	eaiu.mutation.SetRecommendedStatus(s)
	return eaiu
}

// SetNillableRecommendedStatus sets the "RecommendedStatus" field if the given value is not nil.
func (eaiu *ExamApplicationsIPUpdate) SetNillableRecommendedStatus(s *string) *ExamApplicationsIPUpdate {
	if s != nil {
		eaiu.SetRecommendedStatus(*s)
	}
	return eaiu
}

// ClearRecommendedStatus clears the value of the "RecommendedStatus" field.
func (eaiu *ExamApplicationsIPUpdate) ClearRecommendedStatus() *ExamApplicationsIPUpdate {
	eaiu.mutation.ClearRecommendedStatus()
	return eaiu
}

// SetApplicationWdlDate sets the "ApplicationWdlDate" field.
func (eaiu *ExamApplicationsIPUpdate) SetApplicationWdlDate(t time.Time) *ExamApplicationsIPUpdate {
	eaiu.mutation.SetApplicationWdlDate(t)
	return eaiu
}

// SetNillableApplicationWdlDate sets the "ApplicationWdlDate" field if the given value is not nil.
func (eaiu *ExamApplicationsIPUpdate) SetNillableApplicationWdlDate(t *time.Time) *ExamApplicationsIPUpdate {
	if t != nil {
		eaiu.SetApplicationWdlDate(*t)
	}
	return eaiu
}

// ClearApplicationWdlDate clears the value of the "ApplicationWdlDate" field.
func (eaiu *ExamApplicationsIPUpdate) ClearApplicationWdlDate() *ExamApplicationsIPUpdate {
	eaiu.mutation.ClearApplicationWdlDate()
	return eaiu
}

// SetUpdatedAt sets the "UpdatedAt" field.
func (eaiu *ExamApplicationsIPUpdate) SetUpdatedAt(t time.Time) *ExamApplicationsIPUpdate {
	eaiu.mutation.SetUpdatedAt(t)
	return eaiu
}

// SetNillableUpdatedAt sets the "UpdatedAt" field if the given value is not nil.
func (eaiu *ExamApplicationsIPUpdate) SetNillableUpdatedAt(t *time.Time) *ExamApplicationsIPUpdate {
	if t != nil {
		eaiu.SetUpdatedAt(*t)
	}
	return eaiu
}

// ClearUpdatedAt clears the value of the "UpdatedAt" field.
func (eaiu *ExamApplicationsIPUpdate) ClearUpdatedAt() *ExamApplicationsIPUpdate {
	eaiu.mutation.ClearUpdatedAt()
	return eaiu
}

// SetUpdatedBy sets the "UpdatedBy" field.
func (eaiu *ExamApplicationsIPUpdate) SetUpdatedBy(s string) *ExamApplicationsIPUpdate {
	eaiu.mutation.SetUpdatedBy(s)
	return eaiu
}

// SetNillableUpdatedBy sets the "UpdatedBy" field if the given value is not nil.
func (eaiu *ExamApplicationsIPUpdate) SetNillableUpdatedBy(s *string) *ExamApplicationsIPUpdate {
	if s != nil {
		eaiu.SetUpdatedBy(*s)
	}
	return eaiu
}

// ClearUpdatedBy clears the value of the "UpdatedBy" field.
func (eaiu *ExamApplicationsIPUpdate) ClearUpdatedBy() *ExamApplicationsIPUpdate {
	eaiu.mutation.ClearUpdatedBy()
	return eaiu
}

// SetHallIdentificationNumber sets the "HallIdentificationNumber" field.
func (eaiu *ExamApplicationsIPUpdate) SetHallIdentificationNumber(i int32) *ExamApplicationsIPUpdate {
	eaiu.mutation.ResetHallIdentificationNumber()
	eaiu.mutation.SetHallIdentificationNumber(i)
	return eaiu
}

// SetNillableHallIdentificationNumber sets the "HallIdentificationNumber" field if the given value is not nil.
func (eaiu *ExamApplicationsIPUpdate) SetNillableHallIdentificationNumber(i *int32) *ExamApplicationsIPUpdate {
	if i != nil {
		eaiu.SetHallIdentificationNumber(*i)
	}
	return eaiu
}

// AddHallIdentificationNumber adds i to the "HallIdentificationNumber" field.
func (eaiu *ExamApplicationsIPUpdate) AddHallIdentificationNumber(i int32) *ExamApplicationsIPUpdate {
	eaiu.mutation.AddHallIdentificationNumber(i)
	return eaiu
}

// ClearHallIdentificationNumber clears the value of the "HallIdentificationNumber" field.
func (eaiu *ExamApplicationsIPUpdate) ClearHallIdentificationNumber() *ExamApplicationsIPUpdate {
	eaiu.mutation.ClearHallIdentificationNumber()
	return eaiu
}

// SetExamCenterHall sets the "ExamCenterHall" field.
func (eaiu *ExamApplicationsIPUpdate) SetExamCenterHall(i int32) *ExamApplicationsIPUpdate {
	eaiu.mutation.ResetExamCenterHall()
	eaiu.mutation.SetExamCenterHall(i)
	return eaiu
}

// SetNillableExamCenterHall sets the "ExamCenterHall" field if the given value is not nil.
func (eaiu *ExamApplicationsIPUpdate) SetNillableExamCenterHall(i *int32) *ExamApplicationsIPUpdate {
	if i != nil {
		eaiu.SetExamCenterHall(*i)
	}
	return eaiu
}

// AddExamCenterHall adds i to the "ExamCenterHall" field.
func (eaiu *ExamApplicationsIPUpdate) AddExamCenterHall(i int32) *ExamApplicationsIPUpdate {
	eaiu.mutation.AddExamCenterHall(i)
	return eaiu
}

// ClearExamCenterHall clears the value of the "ExamCenterHall" field.
func (eaiu *ExamApplicationsIPUpdate) ClearExamCenterHall() *ExamApplicationsIPUpdate {
	eaiu.mutation.ClearExamCenterHall()
	return eaiu
}

// SetHallName sets the "HallName" field.
func (eaiu *ExamApplicationsIPUpdate) SetHallName(s string) *ExamApplicationsIPUpdate {
	eaiu.mutation.SetHallName(s)
	return eaiu
}

// SetNillableHallName sets the "HallName" field if the given value is not nil.
func (eaiu *ExamApplicationsIPUpdate) SetNillableHallName(s *string) *ExamApplicationsIPUpdate {
	if s != nil {
		eaiu.SetHallName(*s)
	}
	return eaiu
}

// ClearHallName clears the value of the "HallName" field.
func (eaiu *ExamApplicationsIPUpdate) ClearHallName() *ExamApplicationsIPUpdate {
	eaiu.mutation.ClearHallName()
	return eaiu
}

// SetReportingOfficeID sets the "ReportingOfficeID" field.
func (eaiu *ExamApplicationsIPUpdate) SetReportingOfficeID(s string) *ExamApplicationsIPUpdate {
	eaiu.mutation.SetReportingOfficeID(s)
	return eaiu
}

// SetNillableReportingOfficeID sets the "ReportingOfficeID" field if the given value is not nil.
func (eaiu *ExamApplicationsIPUpdate) SetNillableReportingOfficeID(s *string) *ExamApplicationsIPUpdate {
	if s != nil {
		eaiu.SetReportingOfficeID(*s)
	}
	return eaiu
}

// ClearReportingOfficeID clears the value of the "ReportingOfficeID" field.
func (eaiu *ExamApplicationsIPUpdate) ClearReportingOfficeID() *ExamApplicationsIPUpdate {
	eaiu.mutation.ClearReportingOfficeID()
	return eaiu
}

// SetCACorrected sets the "CACorrected" field.
func (eaiu *ExamApplicationsIPUpdate) SetCACorrected(s string) *ExamApplicationsIPUpdate {
	eaiu.mutation.SetCACorrected(s)
	return eaiu
}

// SetNillableCACorrected sets the "CACorrected" field if the given value is not nil.
func (eaiu *ExamApplicationsIPUpdate) SetNillableCACorrected(s *string) *ExamApplicationsIPUpdate {
	if s != nil {
		eaiu.SetCACorrected(*s)
	}
	return eaiu
}

// ClearCACorrected clears the value of the "CACorrected" field.
func (eaiu *ExamApplicationsIPUpdate) ClearCACorrected() *ExamApplicationsIPUpdate {
	eaiu.mutation.ClearCACorrected()
	return eaiu
}

// SetCACorrectedDate sets the "CACorrectedDate" field.
func (eaiu *ExamApplicationsIPUpdate) SetCACorrectedDate(t time.Time) *ExamApplicationsIPUpdate {
	eaiu.mutation.SetCACorrectedDate(t)
	return eaiu
}

// SetNillableCACorrectedDate sets the "CACorrectedDate" field if the given value is not nil.
func (eaiu *ExamApplicationsIPUpdate) SetNillableCACorrectedDate(t *time.Time) *ExamApplicationsIPUpdate {
	if t != nil {
		eaiu.SetCACorrectedDate(*t)
	}
	return eaiu
}

// ClearCACorrectedDate clears the value of the "CACorrectedDate" field.
func (eaiu *ExamApplicationsIPUpdate) ClearCACorrectedDate() *ExamApplicationsIPUpdate {
	eaiu.mutation.ClearCACorrectedDate()
	return eaiu
}

// AddUsersIPRefIDs adds the "UsersIPRef" edge to the UserMaster entity by IDs.
func (eaiu *ExamApplicationsIPUpdate) AddUsersIPRefIDs(ids ...int64) *ExamApplicationsIPUpdate {
	eaiu.mutation.AddUsersIPRefIDs(ids...)
	return eaiu
}

// AddUsersIPRef adds the "UsersIPRef" edges to the UserMaster entity.
func (eaiu *ExamApplicationsIPUpdate) AddUsersIPRef(u ...*UserMaster) *ExamApplicationsIPUpdate {
	ids := make([]int64, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return eaiu.AddUsersIPRefIDs(ids...)
}

// AddCadrePrefRefIDs adds the "CadrePref_Ref" edge to the Cadre_Choice_IP entity by IDs.
func (eaiu *ExamApplicationsIPUpdate) AddCadrePrefRefIDs(ids ...int32) *ExamApplicationsIPUpdate {
	eaiu.mutation.AddCadrePrefRefIDs(ids...)
	return eaiu
}

// AddCadrePrefRef adds the "CadrePref_Ref" edges to the Cadre_Choice_IP entity.
func (eaiu *ExamApplicationsIPUpdate) AddCadrePrefRef(c ...*Cadre_Choice_IP) *ExamApplicationsIPUpdate {
	ids := make([]int32, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return eaiu.AddCadrePrefRefIDs(ids...)
}

// AddCirclePrefRefIDs adds the "CirclePrefRef" edge to the PlaceOfPreferenceIP entity by IDs.
func (eaiu *ExamApplicationsIPUpdate) AddCirclePrefRefIDs(ids ...int32) *ExamApplicationsIPUpdate {
	eaiu.mutation.AddCirclePrefRefIDs(ids...)
	return eaiu
}

// AddCirclePrefRef adds the "CirclePrefRef" edges to the PlaceOfPreferenceIP entity.
func (eaiu *ExamApplicationsIPUpdate) AddCirclePrefRef(p ...*PlaceOfPreferenceIP) *ExamApplicationsIPUpdate {
	ids := make([]int32, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return eaiu.AddCirclePrefRefIDs(ids...)
}

// AddIPApplicationsRefIDs adds the "IPApplicationsRef" edge to the RecommendationsIPApplications entity by IDs.
func (eaiu *ExamApplicationsIPUpdate) AddIPApplicationsRefIDs(ids ...int64) *ExamApplicationsIPUpdate {
	eaiu.mutation.AddIPApplicationsRefIDs(ids...)
	return eaiu
}

// AddIPApplicationsRef adds the "IPApplicationsRef" edges to the RecommendationsIPApplications entity.
func (eaiu *ExamApplicationsIPUpdate) AddIPApplicationsRef(r ...*RecommendationsIPApplications) *ExamApplicationsIPUpdate {
	ids := make([]int64, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return eaiu.AddIPApplicationsRefIDs(ids...)
}

// AddLogDatumIDs adds the "LogData" edge to the Logs entity by IDs.
func (eaiu *ExamApplicationsIPUpdate) AddLogDatumIDs(ids ...int64) *ExamApplicationsIPUpdate {
	eaiu.mutation.AddLogDatumIDs(ids...)
	return eaiu
}

// AddLogData adds the "LogData" edges to the Logs entity.
func (eaiu *ExamApplicationsIPUpdate) AddLogData(l ...*Logs) *ExamApplicationsIPUpdate {
	ids := make([]int64, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return eaiu.AddLogDatumIDs(ids...)
}

// SetExamCentresID sets the "ExamCentres" edge to the Center entity by ID.
func (eaiu *ExamApplicationsIPUpdate) SetExamCentresID(id int32) *ExamApplicationsIPUpdate {
	eaiu.mutation.SetExamCentresID(id)
	return eaiu
}

// SetNillableExamCentresID sets the "ExamCentres" edge to the Center entity by ID if the given value is not nil.
func (eaiu *ExamApplicationsIPUpdate) SetNillableExamCentresID(id *int32) *ExamApplicationsIPUpdate {
	if id != nil {
		eaiu = eaiu.SetExamCentresID(*id)
	}
	return eaiu
}

// SetExamCentres sets the "ExamCentres" edge to the Center entity.
func (eaiu *ExamApplicationsIPUpdate) SetExamCentres(c *Center) *ExamApplicationsIPUpdate {
	return eaiu.SetExamCentresID(c.ID)
}

// SetExamcitycenterID sets the "examcitycenter" edge to the ExamCityCenter entity by ID.
func (eaiu *ExamApplicationsIPUpdate) SetExamcitycenterID(id int32) *ExamApplicationsIPUpdate {
	eaiu.mutation.SetExamcitycenterID(id)
	return eaiu
}

// SetNillableExamcitycenterID sets the "examcitycenter" edge to the ExamCityCenter entity by ID if the given value is not nil.
func (eaiu *ExamApplicationsIPUpdate) SetNillableExamcitycenterID(id *int32) *ExamApplicationsIPUpdate {
	if id != nil {
		eaiu = eaiu.SetExamcitycenterID(*id)
	}
	return eaiu
}

// SetExamcitycenter sets the "examcitycenter" edge to the ExamCityCenter entity.
func (eaiu *ExamApplicationsIPUpdate) SetExamcitycenter(e *ExamCityCenter) *ExamApplicationsIPUpdate {
	return eaiu.SetExamcitycenterID(e.ID)
}

// SetRoleusersID sets the "roleusers" edge to the RoleMaster entity by ID.
func (eaiu *ExamApplicationsIPUpdate) SetRoleusersID(id int32) *ExamApplicationsIPUpdate {
	eaiu.mutation.SetRoleusersID(id)
	return eaiu
}

// SetNillableRoleusersID sets the "roleusers" edge to the RoleMaster entity by ID if the given value is not nil.
func (eaiu *ExamApplicationsIPUpdate) SetNillableRoleusersID(id *int32) *ExamApplicationsIPUpdate {
	if id != nil {
		eaiu = eaiu.SetRoleusersID(*id)
	}
	return eaiu
}

// SetRoleusers sets the "roleusers" edge to the RoleMaster entity.
func (eaiu *ExamApplicationsIPUpdate) SetRoleusers(r *RoleMaster) *ExamApplicationsIPUpdate {
	return eaiu.SetRoleusersID(r.ID)
}

// SetCircleRefsID sets the "CircleRefs" edge to the CircleSummaryForNO entity by ID.
func (eaiu *ExamApplicationsIPUpdate) SetCircleRefsID(id int32) *ExamApplicationsIPUpdate {
	eaiu.mutation.SetCircleRefsID(id)
	return eaiu
}

// SetNillableCircleRefsID sets the "CircleRefs" edge to the CircleSummaryForNO entity by ID if the given value is not nil.
func (eaiu *ExamApplicationsIPUpdate) SetNillableCircleRefsID(id *int32) *ExamApplicationsIPUpdate {
	if id != nil {
		eaiu = eaiu.SetCircleRefsID(*id)
	}
	return eaiu
}

// SetCircleRefs sets the "CircleRefs" edge to the CircleSummaryForNO entity.
func (eaiu *ExamApplicationsIPUpdate) SetCircleRefs(c *CircleSummaryForNO) *ExamApplicationsIPUpdate {
	return eaiu.SetCircleRefsID(c.ID)
}

// Mutation returns the ExamApplicationsIPMutation object of the builder.
func (eaiu *ExamApplicationsIPUpdate) Mutation() *ExamApplicationsIPMutation {
	return eaiu.mutation
}

// ClearUsersIPRef clears all "UsersIPRef" edges to the UserMaster entity.
func (eaiu *ExamApplicationsIPUpdate) ClearUsersIPRef() *ExamApplicationsIPUpdate {
	eaiu.mutation.ClearUsersIPRef()
	return eaiu
}

// RemoveUsersIPRefIDs removes the "UsersIPRef" edge to UserMaster entities by IDs.
func (eaiu *ExamApplicationsIPUpdate) RemoveUsersIPRefIDs(ids ...int64) *ExamApplicationsIPUpdate {
	eaiu.mutation.RemoveUsersIPRefIDs(ids...)
	return eaiu
}

// RemoveUsersIPRef removes "UsersIPRef" edges to UserMaster entities.
func (eaiu *ExamApplicationsIPUpdate) RemoveUsersIPRef(u ...*UserMaster) *ExamApplicationsIPUpdate {
	ids := make([]int64, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return eaiu.RemoveUsersIPRefIDs(ids...)
}

// ClearCadrePrefRef clears all "CadrePref_Ref" edges to the Cadre_Choice_IP entity.
func (eaiu *ExamApplicationsIPUpdate) ClearCadrePrefRef() *ExamApplicationsIPUpdate {
	eaiu.mutation.ClearCadrePrefRef()
	return eaiu
}

// RemoveCadrePrefRefIDs removes the "CadrePref_Ref" edge to Cadre_Choice_IP entities by IDs.
func (eaiu *ExamApplicationsIPUpdate) RemoveCadrePrefRefIDs(ids ...int32) *ExamApplicationsIPUpdate {
	eaiu.mutation.RemoveCadrePrefRefIDs(ids...)
	return eaiu
}

// RemoveCadrePrefRef removes "CadrePref_Ref" edges to Cadre_Choice_IP entities.
func (eaiu *ExamApplicationsIPUpdate) RemoveCadrePrefRef(c ...*Cadre_Choice_IP) *ExamApplicationsIPUpdate {
	ids := make([]int32, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return eaiu.RemoveCadrePrefRefIDs(ids...)
}

// ClearCirclePrefRef clears all "CirclePrefRef" edges to the PlaceOfPreferenceIP entity.
func (eaiu *ExamApplicationsIPUpdate) ClearCirclePrefRef() *ExamApplicationsIPUpdate {
	eaiu.mutation.ClearCirclePrefRef()
	return eaiu
}

// RemoveCirclePrefRefIDs removes the "CirclePrefRef" edge to PlaceOfPreferenceIP entities by IDs.
func (eaiu *ExamApplicationsIPUpdate) RemoveCirclePrefRefIDs(ids ...int32) *ExamApplicationsIPUpdate {
	eaiu.mutation.RemoveCirclePrefRefIDs(ids...)
	return eaiu
}

// RemoveCirclePrefRef removes "CirclePrefRef" edges to PlaceOfPreferenceIP entities.
func (eaiu *ExamApplicationsIPUpdate) RemoveCirclePrefRef(p ...*PlaceOfPreferenceIP) *ExamApplicationsIPUpdate {
	ids := make([]int32, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return eaiu.RemoveCirclePrefRefIDs(ids...)
}

// ClearIPApplicationsRef clears all "IPApplicationsRef" edges to the RecommendationsIPApplications entity.
func (eaiu *ExamApplicationsIPUpdate) ClearIPApplicationsRef() *ExamApplicationsIPUpdate {
	eaiu.mutation.ClearIPApplicationsRef()
	return eaiu
}

// RemoveIPApplicationsRefIDs removes the "IPApplicationsRef" edge to RecommendationsIPApplications entities by IDs.
func (eaiu *ExamApplicationsIPUpdate) RemoveIPApplicationsRefIDs(ids ...int64) *ExamApplicationsIPUpdate {
	eaiu.mutation.RemoveIPApplicationsRefIDs(ids...)
	return eaiu
}

// RemoveIPApplicationsRef removes "IPApplicationsRef" edges to RecommendationsIPApplications entities.
func (eaiu *ExamApplicationsIPUpdate) RemoveIPApplicationsRef(r ...*RecommendationsIPApplications) *ExamApplicationsIPUpdate {
	ids := make([]int64, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return eaiu.RemoveIPApplicationsRefIDs(ids...)
}

// ClearLogData clears all "LogData" edges to the Logs entity.
func (eaiu *ExamApplicationsIPUpdate) ClearLogData() *ExamApplicationsIPUpdate {
	eaiu.mutation.ClearLogData()
	return eaiu
}

// RemoveLogDatumIDs removes the "LogData" edge to Logs entities by IDs.
func (eaiu *ExamApplicationsIPUpdate) RemoveLogDatumIDs(ids ...int64) *ExamApplicationsIPUpdate {
	eaiu.mutation.RemoveLogDatumIDs(ids...)
	return eaiu
}

// RemoveLogData removes "LogData" edges to Logs entities.
func (eaiu *ExamApplicationsIPUpdate) RemoveLogData(l ...*Logs) *ExamApplicationsIPUpdate {
	ids := make([]int64, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return eaiu.RemoveLogDatumIDs(ids...)
}

// ClearExamCentres clears the "ExamCentres" edge to the Center entity.
func (eaiu *ExamApplicationsIPUpdate) ClearExamCentres() *ExamApplicationsIPUpdate {
	eaiu.mutation.ClearExamCentres()
	return eaiu
}

// ClearExamcitycenter clears the "examcitycenter" edge to the ExamCityCenter entity.
func (eaiu *ExamApplicationsIPUpdate) ClearExamcitycenter() *ExamApplicationsIPUpdate {
	eaiu.mutation.ClearExamcitycenter()
	return eaiu
}

// ClearRoleusers clears the "roleusers" edge to the RoleMaster entity.
func (eaiu *ExamApplicationsIPUpdate) ClearRoleusers() *ExamApplicationsIPUpdate {
	eaiu.mutation.ClearRoleusers()
	return eaiu
}

// ClearCircleRefs clears the "CircleRefs" edge to the CircleSummaryForNO entity.
func (eaiu *ExamApplicationsIPUpdate) ClearCircleRefs() *ExamApplicationsIPUpdate {
	eaiu.mutation.ClearCircleRefs()
	return eaiu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (eaiu *ExamApplicationsIPUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, eaiu.sqlSave, eaiu.mutation, eaiu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (eaiu *ExamApplicationsIPUpdate) SaveX(ctx context.Context) int {
	affected, err := eaiu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (eaiu *ExamApplicationsIPUpdate) Exec(ctx context.Context) error {
	_, err := eaiu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eaiu *ExamApplicationsIPUpdate) ExecX(ctx context.Context) {
	if err := eaiu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (eaiu *ExamApplicationsIPUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(exam_applications_ip.Table, exam_applications_ip.Columns, sqlgraph.NewFieldSpec(exam_applications_ip.FieldID, field.TypeInt64))
	if ps := eaiu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eaiu.mutation.ApplicationNumber(); ok {
		_spec.SetField(exam_applications_ip.FieldApplicationNumber, field.TypeString, value)
	}
	if eaiu.mutation.ApplicationNumberCleared() {
		_spec.ClearField(exam_applications_ip.FieldApplicationNumber, field.TypeString)
	}
	if value, ok := eaiu.mutation.ApplnSubmittedDate(); ok {
		_spec.SetField(exam_applications_ip.FieldApplnSubmittedDate, field.TypeTime, value)
	}
	if eaiu.mutation.ApplnSubmittedDateCleared() {
		_spec.ClearField(exam_applications_ip.FieldApplnSubmittedDate, field.TypeTime)
	}
	if value, ok := eaiu.mutation.ExamCode(); ok {
		_spec.SetField(exam_applications_ip.FieldExamCode, field.TypeInt32, value)
	}
	if value, ok := eaiu.mutation.AddedExamCode(); ok {
		_spec.AddField(exam_applications_ip.FieldExamCode, field.TypeInt32, value)
	}
	if eaiu.mutation.ExamCodeCleared() {
		_spec.ClearField(exam_applications_ip.FieldExamCode, field.TypeInt32)
	}
	if value, ok := eaiu.mutation.ExamShortName(); ok {
		_spec.SetField(exam_applications_ip.FieldExamShortName, field.TypeString, value)
	}
	if eaiu.mutation.ExamShortNameCleared() {
		_spec.ClearField(exam_applications_ip.FieldExamShortName, field.TypeString)
	}
	if value, ok := eaiu.mutation.ExamName(); ok {
		_spec.SetField(exam_applications_ip.FieldExamName, field.TypeString, value)
	}
	if eaiu.mutation.ExamNameCleared() {
		_spec.ClearField(exam_applications_ip.FieldExamName, field.TypeString)
	}
	if value, ok := eaiu.mutation.SmsExamShortName(); ok {
		_spec.SetField(exam_applications_ip.FieldSmsExamShortName, field.TypeString, value)
	}
	if eaiu.mutation.SmsExamShortNameCleared() {
		_spec.ClearField(exam_applications_ip.FieldSmsExamShortName, field.TypeString)
	}
	if value, ok := eaiu.mutation.ExamYear(); ok {
		_spec.SetField(exam_applications_ip.FieldExamYear, field.TypeString, value)
	}
	if eaiu.mutation.ExamYearCleared() {
		_spec.ClearField(exam_applications_ip.FieldExamYear, field.TypeString)
	}
	if value, ok := eaiu.mutation.UserID(); ok {
		_spec.SetField(exam_applications_ip.FieldUserID, field.TypeInt32, value)
	}
	if value, ok := eaiu.mutation.AddedUserID(); ok {
		_spec.AddField(exam_applications_ip.FieldUserID, field.TypeInt32, value)
	}
	if eaiu.mutation.UserIDCleared() {
		_spec.ClearField(exam_applications_ip.FieldUserID, field.TypeInt32)
	}
	if value, ok := eaiu.mutation.EmployeeID(); ok {
		_spec.SetField(exam_applications_ip.FieldEmployeeID, field.TypeInt64, value)
	}
	if value, ok := eaiu.mutation.AddedEmployeeID(); ok {
		_spec.AddField(exam_applications_ip.FieldEmployeeID, field.TypeInt64, value)
	}
	if eaiu.mutation.EmployeeIDCleared() {
		_spec.ClearField(exam_applications_ip.FieldEmployeeID, field.TypeInt64)
	}
	if value, ok := eaiu.mutation.EmployeeName(); ok {
		_spec.SetField(exam_applications_ip.FieldEmployeeName, field.TypeString, value)
	}
	if eaiu.mutation.EmployeeNameCleared() {
		_spec.ClearField(exam_applications_ip.FieldEmployeeName, field.TypeString)
	}
	if value, ok := eaiu.mutation.DOB(); ok {
		_spec.SetField(exam_applications_ip.FieldDOB, field.TypeString, value)
	}
	if eaiu.mutation.DOBCleared() {
		_spec.ClearField(exam_applications_ip.FieldDOB, field.TypeString)
	}
	if value, ok := eaiu.mutation.Gender(); ok {
		_spec.SetField(exam_applications_ip.FieldGender, field.TypeString, value)
	}
	if eaiu.mutation.GenderCleared() {
		_spec.ClearField(exam_applications_ip.FieldGender, field.TypeString)
	}
	if value, ok := eaiu.mutation.MobileNumber(); ok {
		_spec.SetField(exam_applications_ip.FieldMobileNumber, field.TypeString, value)
	}
	if eaiu.mutation.MobileNumberCleared() {
		_spec.ClearField(exam_applications_ip.FieldMobileNumber, field.TypeString)
	}
	if value, ok := eaiu.mutation.EmailID(); ok {
		_spec.SetField(exam_applications_ip.FieldEmailID, field.TypeString, value)
	}
	if eaiu.mutation.EmailIDCleared() {
		_spec.ClearField(exam_applications_ip.FieldEmailID, field.TypeString)
	}
	if value, ok := eaiu.mutation.CategoryCode(); ok {
		_spec.SetField(exam_applications_ip.FieldCategoryCode, field.TypeString, value)
	}
	if eaiu.mutation.CategoryCodeCleared() {
		_spec.ClearField(exam_applications_ip.FieldCategoryCode, field.TypeString)
	}
	if value, ok := eaiu.mutation.CategoryDescription(); ok {
		_spec.SetField(exam_applications_ip.FieldCategoryDescription, field.TypeString, value)
	}
	if eaiu.mutation.CategoryDescriptionCleared() {
		_spec.ClearField(exam_applications_ip.FieldCategoryDescription, field.TypeString)
	}
	if value, ok := eaiu.mutation.DisabilityTypeID(); ok {
		_spec.SetField(exam_applications_ip.FieldDisabilityTypeID, field.TypeString, value)
	}
	if eaiu.mutation.DisabilityTypeIDCleared() {
		_spec.ClearField(exam_applications_ip.FieldDisabilityTypeID, field.TypeString)
	}
	if value, ok := eaiu.mutation.DisabilityTypeCode(); ok {
		_spec.SetField(exam_applications_ip.FieldDisabilityTypeCode, field.TypeString, value)
	}
	if eaiu.mutation.DisabilityTypeCodeCleared() {
		_spec.ClearField(exam_applications_ip.FieldDisabilityTypeCode, field.TypeString)
	}
	if value, ok := eaiu.mutation.DisabilityTypeDescription(); ok {
		_spec.SetField(exam_applications_ip.FieldDisabilityTypeDescription, field.TypeString, value)
	}
	if eaiu.mutation.DisabilityTypeDescriptionCleared() {
		_spec.ClearField(exam_applications_ip.FieldDisabilityTypeDescription, field.TypeString)
	}
	if value, ok := eaiu.mutation.DisabilityPercentage(); ok {
		_spec.SetField(exam_applications_ip.FieldDisabilityPercentage, field.TypeInt32, value)
	}
	if value, ok := eaiu.mutation.AddedDisabilityPercentage(); ok {
		_spec.AddField(exam_applications_ip.FieldDisabilityPercentage, field.TypeInt32, value)
	}
	if eaiu.mutation.DisabilityPercentageCleared() {
		_spec.ClearField(exam_applications_ip.FieldDisabilityPercentage, field.TypeInt32)
	}
	if value, ok := eaiu.mutation.DCCS(); ok {
		_spec.SetField(exam_applications_ip.FieldDCCS, field.TypeString, value)
	}
	if eaiu.mutation.DCCSCleared() {
		_spec.ClearField(exam_applications_ip.FieldDCCS, field.TypeString)
	}
	if value, ok := eaiu.mutation.EntryPostCode(); ok {
		_spec.SetField(exam_applications_ip.FieldEntryPostCode, field.TypeString, value)
	}
	if eaiu.mutation.EntryPostCodeCleared() {
		_spec.ClearField(exam_applications_ip.FieldEntryPostCode, field.TypeString)
	}
	if value, ok := eaiu.mutation.EntryPostDescription(); ok {
		_spec.SetField(exam_applications_ip.FieldEntryPostDescription, field.TypeString, value)
	}
	if eaiu.mutation.EntryPostDescriptionCleared() {
		_spec.ClearField(exam_applications_ip.FieldEntryPostDescription, field.TypeString)
	}
	if value, ok := eaiu.mutation.PresentPostCode(); ok {
		_spec.SetField(exam_applications_ip.FieldPresentPostCode, field.TypeString, value)
	}
	if eaiu.mutation.PresentPostCodeCleared() {
		_spec.ClearField(exam_applications_ip.FieldPresentPostCode, field.TypeString)
	}
	if value, ok := eaiu.mutation.PresentPostDescription(); ok {
		_spec.SetField(exam_applications_ip.FieldPresentPostDescription, field.TypeString, value)
	}
	if eaiu.mutation.PresentPostDescriptionCleared() {
		_spec.ClearField(exam_applications_ip.FieldPresentPostDescription, field.TypeString)
	}
	if value, ok := eaiu.mutation.FeederPostCode(); ok {
		_spec.SetField(exam_applications_ip.FieldFeederPostCode, field.TypeString, value)
	}
	if eaiu.mutation.FeederPostCodeCleared() {
		_spec.ClearField(exam_applications_ip.FieldFeederPostCode, field.TypeString)
	}
	if value, ok := eaiu.mutation.FeederPostDescription(); ok {
		_spec.SetField(exam_applications_ip.FieldFeederPostDescription, field.TypeString, value)
	}
	if eaiu.mutation.FeederPostDescriptionCleared() {
		_spec.ClearField(exam_applications_ip.FieldFeederPostDescription, field.TypeString)
	}
	if value, ok := eaiu.mutation.FeederPostJoiningDate(); ok {
		_spec.SetField(exam_applications_ip.FieldFeederPostJoiningDate, field.TypeString, value)
	}
	if eaiu.mutation.FeederPostJoiningDateCleared() {
		_spec.ClearField(exam_applications_ip.FieldFeederPostJoiningDate, field.TypeString)
	}
	if value, ok := eaiu.mutation.DesignationID(); ok {
		_spec.SetField(exam_applications_ip.FieldDesignationID, field.TypeString, value)
	}
	if eaiu.mutation.DesignationIDCleared() {
		_spec.ClearField(exam_applications_ip.FieldDesignationID, field.TypeString)
	}
	if value, ok := eaiu.mutation.PresentDesignation(); ok {
		_spec.SetField(exam_applications_ip.FieldPresentDesignation, field.TypeString, value)
	}
	if eaiu.mutation.PresentDesignationCleared() {
		_spec.ClearField(exam_applications_ip.FieldPresentDesignation, field.TypeString)
	}
	if value, ok := eaiu.mutation.EducationCode(); ok {
		_spec.SetField(exam_applications_ip.FieldEducationCode, field.TypeString, value)
	}
	if eaiu.mutation.EducationCodeCleared() {
		_spec.ClearField(exam_applications_ip.FieldEducationCode, field.TypeString)
	}
	if value, ok := eaiu.mutation.EducationDescription(); ok {
		_spec.SetField(exam_applications_ip.FieldEducationDescription, field.TypeString, value)
	}
	if eaiu.mutation.EducationDescriptionCleared() {
		_spec.ClearField(exam_applications_ip.FieldEducationDescription, field.TypeString)
	}
	if value, ok := eaiu.mutation.FacilityUniqueID(); ok {
		_spec.SetField(exam_applications_ip.FieldFacilityUniqueID, field.TypeString, value)
	}
	if eaiu.mutation.FacilityUniqueIDCleared() {
		_spec.ClearField(exam_applications_ip.FieldFacilityUniqueID, field.TypeString)
	}
	if value, ok := eaiu.mutation.WorkingOfficePincode(); ok {
		_spec.SetField(exam_applications_ip.FieldWorkingOfficePincode, field.TypeInt32, value)
	}
	if value, ok := eaiu.mutation.AddedWorkingOfficePincode(); ok {
		_spec.AddField(exam_applications_ip.FieldWorkingOfficePincode, field.TypeInt32, value)
	}
	if eaiu.mutation.WorkingOfficePincodeCleared() {
		_spec.ClearField(exam_applications_ip.FieldWorkingOfficePincode, field.TypeInt32)
	}
	if value, ok := eaiu.mutation.WorkingOfficeFacilityID(); ok {
		_spec.SetField(exam_applications_ip.FieldWorkingOfficeFacilityID, field.TypeString, value)
	}
	if eaiu.mutation.WorkingOfficeFacilityIDCleared() {
		_spec.ClearField(exam_applications_ip.FieldWorkingOfficeFacilityID, field.TypeString)
	}
	if value, ok := eaiu.mutation.WorkingOfficeName(); ok {
		_spec.SetField(exam_applications_ip.FieldWorkingOfficeName, field.TypeString, value)
	}
	if eaiu.mutation.WorkingOfficeNameCleared() {
		_spec.ClearField(exam_applications_ip.FieldWorkingOfficeName, field.TypeString)
	}
	if value, ok := eaiu.mutation.WorkingOfficeCircleFacilityID(); ok {
		_spec.SetField(exam_applications_ip.FieldWorkingOfficeCircleFacilityID, field.TypeString, value)
	}
	if eaiu.mutation.WorkingOfficeCircleFacilityIDCleared() {
		_spec.ClearField(exam_applications_ip.FieldWorkingOfficeCircleFacilityID, field.TypeString)
	}
	if value, ok := eaiu.mutation.WorkingOfficeCircleName(); ok {
		_spec.SetField(exam_applications_ip.FieldWorkingOfficeCircleName, field.TypeString, value)
	}
	if eaiu.mutation.WorkingOfficeCircleNameCleared() {
		_spec.ClearField(exam_applications_ip.FieldWorkingOfficeCircleName, field.TypeString)
	}
	if value, ok := eaiu.mutation.WorkingOfficeRegionFacilityID(); ok {
		_spec.SetField(exam_applications_ip.FieldWorkingOfficeRegionFacilityID, field.TypeString, value)
	}
	if eaiu.mutation.WorkingOfficeRegionFacilityIDCleared() {
		_spec.ClearField(exam_applications_ip.FieldWorkingOfficeRegionFacilityID, field.TypeString)
	}
	if value, ok := eaiu.mutation.WorkingOfficeRegionName(); ok {
		_spec.SetField(exam_applications_ip.FieldWorkingOfficeRegionName, field.TypeString, value)
	}
	if eaiu.mutation.WorkingOfficeRegionNameCleared() {
		_spec.ClearField(exam_applications_ip.FieldWorkingOfficeRegionName, field.TypeString)
	}
	if value, ok := eaiu.mutation.WorkingOfficeDivisionFacilityID(); ok {
		_spec.SetField(exam_applications_ip.FieldWorkingOfficeDivisionFacilityID, field.TypeString, value)
	}
	if eaiu.mutation.WorkingOfficeDivisionFacilityIDCleared() {
		_spec.ClearField(exam_applications_ip.FieldWorkingOfficeDivisionFacilityID, field.TypeString)
	}
	if value, ok := eaiu.mutation.WorkingOfficeDivisionName(); ok {
		_spec.SetField(exam_applications_ip.FieldWorkingOfficeDivisionName, field.TypeString, value)
	}
	if eaiu.mutation.WorkingOfficeDivisionNameCleared() {
		_spec.ClearField(exam_applications_ip.FieldWorkingOfficeDivisionName, field.TypeString)
	}
	if value, ok := eaiu.mutation.ReportingOfficeFacilityID(); ok {
		_spec.SetField(exam_applications_ip.FieldReportingOfficeFacilityID, field.TypeString, value)
	}
	if eaiu.mutation.ReportingOfficeFacilityIDCleared() {
		_spec.ClearField(exam_applications_ip.FieldReportingOfficeFacilityID, field.TypeString)
	}
	if value, ok := eaiu.mutation.ReportingOfficeName(); ok {
		_spec.SetField(exam_applications_ip.FieldReportingOfficeName, field.TypeString, value)
	}
	if eaiu.mutation.ReportingOfficeNameCleared() {
		_spec.ClearField(exam_applications_ip.FieldReportingOfficeName, field.TypeString)
	}
	if value, ok := eaiu.mutation.LienControllingOfficeID(); ok {
		_spec.SetField(exam_applications_ip.FieldLienControllingOfficeID, field.TypeString, value)
	}
	if eaiu.mutation.LienControllingOfficeIDCleared() {
		_spec.ClearField(exam_applications_ip.FieldLienControllingOfficeID, field.TypeString)
	}
	if value, ok := eaiu.mutation.LienControllingOfficeName(); ok {
		_spec.SetField(exam_applications_ip.FieldLienControllingOfficeName, field.TypeString, value)
	}
	if eaiu.mutation.LienControllingOfficeNameCleared() {
		_spec.ClearField(exam_applications_ip.FieldLienControllingOfficeName, field.TypeString)
	}
	if value, ok := eaiu.mutation.InDeputation(); ok {
		_spec.SetField(exam_applications_ip.FieldInDeputation, field.TypeString, value)
	}
	if eaiu.mutation.InDeputationCleared() {
		_spec.ClearField(exam_applications_ip.FieldInDeputation, field.TypeString)
	}
	if value, ok := eaiu.mutation.DeputationType(); ok {
		_spec.SetField(exam_applications_ip.FieldDeputationType, field.TypeString, value)
	}
	if eaiu.mutation.DeputationTypeCleared() {
		_spec.ClearField(exam_applications_ip.FieldDeputationType, field.TypeString)
	}
	if value, ok := eaiu.mutation.DeputationOfficeUniqueId(); ok {
		_spec.SetField(exam_applications_ip.FieldDeputationOfficeUniqueId, field.TypeString, value)
	}
	if eaiu.mutation.DeputationOfficeUniqueIdCleared() {
		_spec.ClearField(exam_applications_ip.FieldDeputationOfficeUniqueId, field.TypeString)
	}
	if value, ok := eaiu.mutation.DeputationOfficeFacilityID(); ok {
		_spec.SetField(exam_applications_ip.FieldDeputationOfficeFacilityID, field.TypeString, value)
	}
	if eaiu.mutation.DeputationOfficeFacilityIDCleared() {
		_spec.ClearField(exam_applications_ip.FieldDeputationOfficeFacilityID, field.TypeString)
	}
	if value, ok := eaiu.mutation.DeputationOfficeName(); ok {
		_spec.SetField(exam_applications_ip.FieldDeputationOfficeName, field.TypeString, value)
	}
	if eaiu.mutation.DeputationOfficeNameCleared() {
		_spec.ClearField(exam_applications_ip.FieldDeputationOfficeName, field.TypeString)
	}
	if value, ok := eaiu.mutation.DeputationControllingOfficeID(); ok {
		_spec.SetField(exam_applications_ip.FieldDeputationControllingOfficeID, field.TypeString, value)
	}
	if eaiu.mutation.DeputationControllingOfficeIDCleared() {
		_spec.ClearField(exam_applications_ip.FieldDeputationControllingOfficeID, field.TypeString)
	}
	if value, ok := eaiu.mutation.DeputationControllingOfficeName(); ok {
		_spec.SetField(exam_applications_ip.FieldDeputationControllingOfficeName, field.TypeString, value)
	}
	if eaiu.mutation.DeputationControllingOfficeNameCleared() {
		_spec.ClearField(exam_applications_ip.FieldDeputationControllingOfficeName, field.TypeString)
	}
	if value, ok := eaiu.mutation.ControllingOfficeFacilityID(); ok {
		_spec.SetField(exam_applications_ip.FieldControllingOfficeFacilityID, field.TypeString, value)
	}
	if eaiu.mutation.ControllingOfficeFacilityIDCleared() {
		_spec.ClearField(exam_applications_ip.FieldControllingOfficeFacilityID, field.TypeString)
	}
	if value, ok := eaiu.mutation.ControllingOfficeName(); ok {
		_spec.SetField(exam_applications_ip.FieldControllingOfficeName, field.TypeString, value)
	}
	if eaiu.mutation.ControllingOfficeNameCleared() {
		_spec.ClearField(exam_applications_ip.FieldControllingOfficeName, field.TypeString)
	}
	if value, ok := eaiu.mutation.NodalOfficeFacilityID(); ok {
		_spec.SetField(exam_applications_ip.FieldNodalOfficeFacilityID, field.TypeString, value)
	}
	if eaiu.mutation.NodalOfficeFacilityIDCleared() {
		_spec.ClearField(exam_applications_ip.FieldNodalOfficeFacilityID, field.TypeString)
	}
	if value, ok := eaiu.mutation.NodalOfficeName(); ok {
		_spec.SetField(exam_applications_ip.FieldNodalOfficeName, field.TypeString, value)
	}
	if eaiu.mutation.NodalOfficeNameCleared() {
		_spec.ClearField(exam_applications_ip.FieldNodalOfficeName, field.TypeString)
	}
	if value, ok := eaiu.mutation.CenterFacilityId(); ok {
		_spec.SetField(exam_applications_ip.FieldCenterFacilityId, field.TypeString, value)
	}
	if eaiu.mutation.CenterFacilityIdCleared() {
		_spec.ClearField(exam_applications_ip.FieldCenterFacilityId, field.TypeString)
	}
	if value, ok := eaiu.mutation.CentrePreference(); ok {
		_spec.SetField(exam_applications_ip.FieldCentrePreference, field.TypeString, value)
	}
	if eaiu.mutation.CentrePreferenceCleared() {
		_spec.ClearField(exam_applications_ip.FieldCentrePreference, field.TypeString)
	}
	if value, ok := eaiu.mutation.Signature(); ok {
		_spec.SetField(exam_applications_ip.FieldSignature, field.TypeString, value)
	}
	if eaiu.mutation.SignatureCleared() {
		_spec.ClearField(exam_applications_ip.FieldSignature, field.TypeString)
	}
	if value, ok := eaiu.mutation.Photo(); ok {
		_spec.SetField(exam_applications_ip.FieldPhoto, field.TypeString, value)
	}
	if eaiu.mutation.PhotoCleared() {
		_spec.ClearField(exam_applications_ip.FieldPhoto, field.TypeString)
	}
	if value, ok := eaiu.mutation.SignaturePath(); ok {
		_spec.SetField(exam_applications_ip.FieldSignaturePath, field.TypeString, value)
	}
	if eaiu.mutation.SignaturePathCleared() {
		_spec.ClearField(exam_applications_ip.FieldSignaturePath, field.TypeString)
	}
	if value, ok := eaiu.mutation.PhotoPath(); ok {
		_spec.SetField(exam_applications_ip.FieldPhotoPath, field.TypeString, value)
	}
	if eaiu.mutation.PhotoPathCleared() {
		_spec.ClearField(exam_applications_ip.FieldPhotoPath, field.TypeString)
	}
	if value, ok := eaiu.mutation.CandidatePhoto(); ok {
		_spec.SetField(exam_applications_ip.FieldCandidatePhoto, field.TypeBytes, value)
	}
	if eaiu.mutation.CandidatePhotoCleared() {
		_spec.ClearField(exam_applications_ip.FieldCandidatePhoto, field.TypeBytes)
	}
	if value, ok := eaiu.mutation.CandidateSignature(); ok {
		_spec.SetField(exam_applications_ip.FieldCandidateSignature, field.TypeBytes, value)
	}
	if eaiu.mutation.CandidateSignatureCleared() {
		_spec.ClearField(exam_applications_ip.FieldCandidateSignature, field.TypeBytes)
	}
	if value, ok := eaiu.mutation.TempHallTicket(); ok {
		_spec.SetField(exam_applications_ip.FieldTempHallTicket, field.TypeString, value)
	}
	if eaiu.mutation.TempHallTicketCleared() {
		_spec.ClearField(exam_applications_ip.FieldTempHallTicket, field.TypeString)
	}
	if value, ok := eaiu.mutation.CandidateRemarks(); ok {
		_spec.SetField(exam_applications_ip.FieldCandidateRemarks, field.TypeString, value)
	}
	if eaiu.mutation.CandidateRemarksCleared() {
		_spec.ClearField(exam_applications_ip.FieldCandidateRemarks, field.TypeString)
	}
	if value, ok := eaiu.mutation.VAGeneralRemarks(); ok {
		_spec.SetField(exam_applications_ip.FieldVAGeneralRemarks, field.TypeString, value)
	}
	if eaiu.mutation.VAGeneralRemarksCleared() {
		_spec.ClearField(exam_applications_ip.FieldVAGeneralRemarks, field.TypeString)
	}
	if value, ok := eaiu.mutation.CAGeneralRemarks(); ok {
		_spec.SetField(exam_applications_ip.FieldCAGeneralRemarks, field.TypeString, value)
	}
	if eaiu.mutation.CAGeneralRemarksCleared() {
		_spec.ClearField(exam_applications_ip.FieldCAGeneralRemarks, field.TypeString)
	}
	if value, ok := eaiu.mutation.NAGeneralRemarks(); ok {
		_spec.SetField(exam_applications_ip.FieldNAGeneralRemarks, field.TypeString, value)
	}
	if eaiu.mutation.NAGeneralRemarksCleared() {
		_spec.ClearField(exam_applications_ip.FieldNAGeneralRemarks, field.TypeString)
	}
	if value, ok := eaiu.mutation.ApplicationStatus(); ok {
		_spec.SetField(exam_applications_ip.FieldApplicationStatus, field.TypeString, value)
	}
	if eaiu.mutation.ApplicationStatusCleared() {
		_spec.ClearField(exam_applications_ip.FieldApplicationStatus, field.TypeString)
	}
	if value, ok := eaiu.mutation.Status(); ok {
		_spec.SetField(exam_applications_ip.FieldStatus, field.TypeString, value)
	}
	if eaiu.mutation.StatusCleared() {
		_spec.ClearField(exam_applications_ip.FieldStatus, field.TypeString)
	}
	if value, ok := eaiu.mutation.VAUserId(); ok {
		_spec.SetField(exam_applications_ip.FieldVAUserId, field.TypeInt32, value)
	}
	if value, ok := eaiu.mutation.AddedVAUserId(); ok {
		_spec.AddField(exam_applications_ip.FieldVAUserId, field.TypeInt32, value)
	}
	if eaiu.mutation.VAUserIdCleared() {
		_spec.ClearField(exam_applications_ip.FieldVAUserId, field.TypeInt32)
	}
	if value, ok := eaiu.mutation.VAUserName(); ok {
		_spec.SetField(exam_applications_ip.FieldVAUserName, field.TypeString, value)
	}
	if eaiu.mutation.VAUserNameCleared() {
		_spec.ClearField(exam_applications_ip.FieldVAUserName, field.TypeString)
	}
	if value, ok := eaiu.mutation.VAEmployeeID(); ok {
		_spec.SetField(exam_applications_ip.FieldVAEmployeeID, field.TypeString, value)
	}
	if eaiu.mutation.VAEmployeeIDCleared() {
		_spec.ClearField(exam_applications_ip.FieldVAEmployeeID, field.TypeString)
	}
	if value, ok := eaiu.mutation.VAEmployeeDesignation(); ok {
		_spec.SetField(exam_applications_ip.FieldVAEmployeeDesignation, field.TypeString, value)
	}
	if eaiu.mutation.VAEmployeeDesignationCleared() {
		_spec.ClearField(exam_applications_ip.FieldVAEmployeeDesignation, field.TypeString)
	}
	if value, ok := eaiu.mutation.VARemarks(); ok {
		_spec.SetField(exam_applications_ip.FieldVARemarks, field.TypeString, value)
	}
	if eaiu.mutation.VARemarksCleared() {
		_spec.ClearField(exam_applications_ip.FieldVARemarks, field.TypeString)
	}
	if value, ok := eaiu.mutation.VADate(); ok {
		_spec.SetField(exam_applications_ip.FieldVADate, field.TypeTime, value)
	}
	if eaiu.mutation.VADateCleared() {
		_spec.ClearField(exam_applications_ip.FieldVADate, field.TypeTime)
	}
	if value, ok := eaiu.mutation.CAUserId(); ok {
		_spec.SetField(exam_applications_ip.FieldCAUserId, field.TypeInt32, value)
	}
	if value, ok := eaiu.mutation.AddedCAUserId(); ok {
		_spec.AddField(exam_applications_ip.FieldCAUserId, field.TypeInt32, value)
	}
	if eaiu.mutation.CAUserIdCleared() {
		_spec.ClearField(exam_applications_ip.FieldCAUserId, field.TypeInt32)
	}
	if value, ok := eaiu.mutation.CAUserName(); ok {
		_spec.SetField(exam_applications_ip.FieldCAUserName, field.TypeString, value)
	}
	if eaiu.mutation.CAUserNameCleared() {
		_spec.ClearField(exam_applications_ip.FieldCAUserName, field.TypeString)
	}
	if value, ok := eaiu.mutation.CAEmployeeID(); ok {
		_spec.SetField(exam_applications_ip.FieldCAEmployeeID, field.TypeString, value)
	}
	if eaiu.mutation.CAEmployeeIDCleared() {
		_spec.ClearField(exam_applications_ip.FieldCAEmployeeID, field.TypeString)
	}
	if value, ok := eaiu.mutation.CAEmployeeDesignation(); ok {
		_spec.SetField(exam_applications_ip.FieldCAEmployeeDesignation, field.TypeString, value)
	}
	if eaiu.mutation.CAEmployeeDesignationCleared() {
		_spec.ClearField(exam_applications_ip.FieldCAEmployeeDesignation, field.TypeString)
	}
	if value, ok := eaiu.mutation.CARemarks(); ok {
		_spec.SetField(exam_applications_ip.FieldCARemarks, field.TypeString, value)
	}
	if eaiu.mutation.CARemarksCleared() {
		_spec.ClearField(exam_applications_ip.FieldCARemarks, field.TypeString)
	}
	if value, ok := eaiu.mutation.CADate(); ok {
		_spec.SetField(exam_applications_ip.FieldCADate, field.TypeTime, value)
	}
	if eaiu.mutation.CADateCleared() {
		_spec.ClearField(exam_applications_ip.FieldCADate, field.TypeTime)
	}
	if value, ok := eaiu.mutation.NAUserId(); ok {
		_spec.SetField(exam_applications_ip.FieldNAUserId, field.TypeInt32, value)
	}
	if value, ok := eaiu.mutation.AddedNAUserId(); ok {
		_spec.AddField(exam_applications_ip.FieldNAUserId, field.TypeInt32, value)
	}
	if eaiu.mutation.NAUserIdCleared() {
		_spec.ClearField(exam_applications_ip.FieldNAUserId, field.TypeInt32)
	}
	if value, ok := eaiu.mutation.NAUserName(); ok {
		_spec.SetField(exam_applications_ip.FieldNAUserName, field.TypeString, value)
	}
	if eaiu.mutation.NAUserNameCleared() {
		_spec.ClearField(exam_applications_ip.FieldNAUserName, field.TypeString)
	}
	if value, ok := eaiu.mutation.NAEmployeeID(); ok {
		_spec.SetField(exam_applications_ip.FieldNAEmployeeID, field.TypeString, value)
	}
	if eaiu.mutation.NAEmployeeIDCleared() {
		_spec.ClearField(exam_applications_ip.FieldNAEmployeeID, field.TypeString)
	}
	if value, ok := eaiu.mutation.NAEmployeeDesignation(); ok {
		_spec.SetField(exam_applications_ip.FieldNAEmployeeDesignation, field.TypeString, value)
	}
	if eaiu.mutation.NAEmployeeDesignationCleared() {
		_spec.ClearField(exam_applications_ip.FieldNAEmployeeDesignation, field.TypeString)
	}
	if value, ok := eaiu.mutation.NARemarks(); ok {
		_spec.SetField(exam_applications_ip.FieldNARemarks, field.TypeString, value)
	}
	if eaiu.mutation.NARemarksCleared() {
		_spec.ClearField(exam_applications_ip.FieldNARemarks, field.TypeString)
	}
	if value, ok := eaiu.mutation.NADate(); ok {
		_spec.SetField(exam_applications_ip.FieldNADate, field.TypeTime, value)
	}
	if eaiu.mutation.NADateCleared() {
		_spec.ClearField(exam_applications_ip.FieldNADate, field.TypeTime)
	}
	if value, ok := eaiu.mutation.AppliactionRemarks(); ok {
		_spec.SetField(exam_applications_ip.FieldAppliactionRemarks, field.TypeString, value)
	}
	if eaiu.mutation.AppliactionRemarksCleared() {
		_spec.ClearField(exam_applications_ip.FieldAppliactionRemarks, field.TypeString)
	}
	if value, ok := eaiu.mutation.CadrePreferences(); ok {
		_spec.SetField(exam_applications_ip.FieldCadrePreferences, field.TypeJSON, value)
	}
	if value, ok := eaiu.mutation.AppendedCadrePreferences(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, exam_applications_ip.FieldCadrePreferences, value)
		})
	}
	if eaiu.mutation.CadrePreferencesCleared() {
		_spec.ClearField(exam_applications_ip.FieldCadrePreferences, field.TypeJSON)
	}
	if value, ok := eaiu.mutation.CAPreviousRemarks(); ok {
		_spec.SetField(exam_applications_ip.FieldCAPreviousRemarks, field.TypeString, value)
	}
	if eaiu.mutation.CAPreviousRemarksCleared() {
		_spec.ClearField(exam_applications_ip.FieldCAPreviousRemarks, field.TypeString)
	}
	if value, ok := eaiu.mutation.PunishmentStatus(); ok {
		_spec.SetField(exam_applications_ip.FieldPunishmentStatus, field.TypeBool, value)
	}
	if eaiu.mutation.PunishmentStatusCleared() {
		_spec.ClearField(exam_applications_ip.FieldPunishmentStatus, field.TypeBool)
	}
	if value, ok := eaiu.mutation.DisciplinaryCaseStatus(); ok {
		_spec.SetField(exam_applications_ip.FieldDisciplinaryCaseStatus, field.TypeBool, value)
	}
	if eaiu.mutation.DisciplinaryCaseStatusCleared() {
		_spec.ClearField(exam_applications_ip.FieldDisciplinaryCaseStatus, field.TypeBool)
	}
	if value, ok := eaiu.mutation.GenerateHallTicketFlag(); ok {
		_spec.SetField(exam_applications_ip.FieldGenerateHallTicketFlag, field.TypeBool, value)
	}
	if eaiu.mutation.GenerateHallTicketFlagCleared() {
		_spec.ClearField(exam_applications_ip.FieldGenerateHallTicketFlag, field.TypeBool)
	}
	if value, ok := eaiu.mutation.HallTicketNumber(); ok {
		_spec.SetField(exam_applications_ip.FieldHallTicketNumber, field.TypeString, value)
	}
	if eaiu.mutation.HallTicketNumberCleared() {
		_spec.ClearField(exam_applications_ip.FieldHallTicketNumber, field.TypeString)
	}
	if value, ok := eaiu.mutation.HallTicketGeneratedFlag(); ok {
		_spec.SetField(exam_applications_ip.FieldHallTicketGeneratedFlag, field.TypeBool, value)
	}
	if eaiu.mutation.HallTicketGeneratedFlagCleared() {
		_spec.ClearField(exam_applications_ip.FieldHallTicketGeneratedFlag, field.TypeBool)
	}
	if value, ok := eaiu.mutation.GenerateHallTicketFlagByNO(); ok {
		_spec.SetField(exam_applications_ip.FieldGenerateHallTicketFlagByNO, field.TypeBool, value)
	}
	if eaiu.mutation.GenerateHallTicketFlagByNOCleared() {
		_spec.ClearField(exam_applications_ip.FieldGenerateHallTicketFlagByNO, field.TypeBool)
	}
	if value, ok := eaiu.mutation.HallTicketGeneratedDate(); ok {
		_spec.SetField(exam_applications_ip.FieldHallTicketGeneratedDate, field.TypeTime, value)
	}
	if eaiu.mutation.HallTicketGeneratedDateCleared() {
		_spec.ClearField(exam_applications_ip.FieldHallTicketGeneratedDate, field.TypeTime)
	}
	if value, ok := eaiu.mutation.TemporaryHallTicket(); ok {
		_spec.SetField(exam_applications_ip.FieldTemporaryHallTicket, field.TypeString, value)
	}
	if eaiu.mutation.TemporaryHallTicketCleared() {
		_spec.ClearField(exam_applications_ip.FieldTemporaryHallTicket, field.TypeString)
	}
	if value, ok := eaiu.mutation.OptionUsed(); ok {
		_spec.SetField(exam_applications_ip.FieldOptionUsed, field.TypeString, value)
	}
	if eaiu.mutation.OptionUsedCleared() {
		_spec.ClearField(exam_applications_ip.FieldOptionUsed, field.TypeString)
	}
	if value, ok := eaiu.mutation.Remarks(); ok {
		_spec.SetField(exam_applications_ip.FieldRemarks, field.TypeString, value)
	}
	if eaiu.mutation.RemarksCleared() {
		_spec.ClearField(exam_applications_ip.FieldRemarks, field.TypeString)
	}
	if value, ok := eaiu.mutation.Cadre(); ok {
		_spec.SetField(exam_applications_ip.FieldCadre, field.TypeString, value)
	}
	if eaiu.mutation.CadreCleared() {
		_spec.ClearField(exam_applications_ip.FieldCadre, field.TypeString)
	}
	if value, ok := eaiu.mutation.EmployeePost(); ok {
		_spec.SetField(exam_applications_ip.FieldEmployeePost, field.TypeString, value)
	}
	if eaiu.mutation.EmployeePostCleared() {
		_spec.ClearField(exam_applications_ip.FieldEmployeePost, field.TypeString)
	}
	if value, ok := eaiu.mutation.DOJInEligiblePost(); ok {
		_spec.SetField(exam_applications_ip.FieldDOJInEligiblePost, field.TypeString, value)
	}
	if eaiu.mutation.DOJInEligiblePostCleared() {
		_spec.ClearField(exam_applications_ip.FieldDOJInEligiblePost, field.TypeString)
	}
	if value, ok := eaiu.mutation.DivisionPreferences(); ok {
		_spec.SetField(exam_applications_ip.FieldDivisionPreferences, field.TypeJSON, value)
	}
	if value, ok := eaiu.mutation.AppendedDivisionPreferences(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, exam_applications_ip.FieldDivisionPreferences, value)
		})
	}
	if eaiu.mutation.DivisionPreferencesCleared() {
		_spec.ClearField(exam_applications_ip.FieldDivisionPreferences, field.TypeJSON)
	}
	if value, ok := eaiu.mutation.FacilityName(); ok {
		_spec.SetField(exam_applications_ip.FieldFacilityName, field.TypeString, value)
	}
	if eaiu.mutation.FacilityNameCleared() {
		_spec.ClearField(exam_applications_ip.FieldFacilityName, field.TypeString)
	}
	if value, ok := eaiu.mutation.ServiceLength(); ok {
		_spec.SetField(exam_applications_ip.FieldServiceLength, field.TypeJSON, value)
	}
	if value, ok := eaiu.mutation.AppendedServiceLength(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, exam_applications_ip.FieldServiceLength, value)
		})
	}
	if eaiu.mutation.ServiceLengthCleared() {
		_spec.ClearField(exam_applications_ip.FieldServiceLength, field.TypeJSON)
	}
	if value, ok := eaiu.mutation.NonQualifyingService(); ok {
		_spec.SetField(exam_applications_ip.FieldNonQualifyingService, field.TypeJSON, value)
	}
	if value, ok := eaiu.mutation.AppendedNonQualifyingService(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, exam_applications_ip.FieldNonQualifyingService, value)
		})
	}
	if eaiu.mutation.NonQualifyingServiceCleared() {
		_spec.ClearField(exam_applications_ip.FieldNonQualifyingService, field.TypeJSON)
	}
	if value, ok := eaiu.mutation.DCInPresentCadre(); ok {
		_spec.SetField(exam_applications_ip.FieldDCInPresentCadre, field.TypeString, value)
	}
	if eaiu.mutation.DCInPresentCadreCleared() {
		_spec.ClearField(exam_applications_ip.FieldDCInPresentCadre, field.TypeString)
	}
	if value, ok := eaiu.mutation.CenterId(); ok {
		_spec.SetField(exam_applications_ip.FieldCenterId, field.TypeInt32, value)
	}
	if value, ok := eaiu.mutation.AddedCenterId(); ok {
		_spec.AddField(exam_applications_ip.FieldCenterId, field.TypeInt32, value)
	}
	if eaiu.mutation.CenterIdCleared() {
		_spec.ClearField(exam_applications_ip.FieldCenterId, field.TypeInt32)
	}
	if value, ok := eaiu.mutation.ClaimingQualifyingService(); ok {
		_spec.SetField(exam_applications_ip.FieldClaimingQualifyingService, field.TypeString, value)
	}
	if eaiu.mutation.ClaimingQualifyingServiceCleared() {
		_spec.ClearField(exam_applications_ip.FieldClaimingQualifyingService, field.TypeString)
	}
	if value, ok := eaiu.mutation.DeputationOfficePincode(); ok {
		_spec.SetField(exam_applications_ip.FieldDeputationOfficePincode, field.TypeString, value)
	}
	if eaiu.mutation.DeputationOfficePincodeCleared() {
		_spec.ClearField(exam_applications_ip.FieldDeputationOfficePincode, field.TypeString)
	}
	if value, ok := eaiu.mutation.RecommendedStatus(); ok {
		_spec.SetField(exam_applications_ip.FieldRecommendedStatus, field.TypeString, value)
	}
	if eaiu.mutation.RecommendedStatusCleared() {
		_spec.ClearField(exam_applications_ip.FieldRecommendedStatus, field.TypeString)
	}
	if value, ok := eaiu.mutation.ApplicationWdlDate(); ok {
		_spec.SetField(exam_applications_ip.FieldApplicationWdlDate, field.TypeTime, value)
	}
	if eaiu.mutation.ApplicationWdlDateCleared() {
		_spec.ClearField(exam_applications_ip.FieldApplicationWdlDate, field.TypeTime)
	}
	if value, ok := eaiu.mutation.UpdatedAt(); ok {
		_spec.SetField(exam_applications_ip.FieldUpdatedAt, field.TypeTime, value)
	}
	if eaiu.mutation.UpdatedAtCleared() {
		_spec.ClearField(exam_applications_ip.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := eaiu.mutation.UpdatedBy(); ok {
		_spec.SetField(exam_applications_ip.FieldUpdatedBy, field.TypeString, value)
	}
	if eaiu.mutation.UpdatedByCleared() {
		_spec.ClearField(exam_applications_ip.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := eaiu.mutation.HallIdentificationNumber(); ok {
		_spec.SetField(exam_applications_ip.FieldHallIdentificationNumber, field.TypeInt32, value)
	}
	if value, ok := eaiu.mutation.AddedHallIdentificationNumber(); ok {
		_spec.AddField(exam_applications_ip.FieldHallIdentificationNumber, field.TypeInt32, value)
	}
	if eaiu.mutation.HallIdentificationNumberCleared() {
		_spec.ClearField(exam_applications_ip.FieldHallIdentificationNumber, field.TypeInt32)
	}
	if value, ok := eaiu.mutation.ExamCenterHall(); ok {
		_spec.SetField(exam_applications_ip.FieldExamCenterHall, field.TypeInt32, value)
	}
	if value, ok := eaiu.mutation.AddedExamCenterHall(); ok {
		_spec.AddField(exam_applications_ip.FieldExamCenterHall, field.TypeInt32, value)
	}
	if eaiu.mutation.ExamCenterHallCleared() {
		_spec.ClearField(exam_applications_ip.FieldExamCenterHall, field.TypeInt32)
	}
	if value, ok := eaiu.mutation.HallName(); ok {
		_spec.SetField(exam_applications_ip.FieldHallName, field.TypeString, value)
	}
	if eaiu.mutation.HallNameCleared() {
		_spec.ClearField(exam_applications_ip.FieldHallName, field.TypeString)
	}
	if value, ok := eaiu.mutation.ReportingOfficeID(); ok {
		_spec.SetField(exam_applications_ip.FieldReportingOfficeID, field.TypeString, value)
	}
	if eaiu.mutation.ReportingOfficeIDCleared() {
		_spec.ClearField(exam_applications_ip.FieldReportingOfficeID, field.TypeString)
	}
	if value, ok := eaiu.mutation.CACorrected(); ok {
		_spec.SetField(exam_applications_ip.FieldCACorrected, field.TypeString, value)
	}
	if eaiu.mutation.CACorrectedCleared() {
		_spec.ClearField(exam_applications_ip.FieldCACorrected, field.TypeString)
	}
	if value, ok := eaiu.mutation.CACorrectedDate(); ok {
		_spec.SetField(exam_applications_ip.FieldCACorrectedDate, field.TypeTime, value)
	}
	if eaiu.mutation.CACorrectedDateCleared() {
		_spec.ClearField(exam_applications_ip.FieldCACorrectedDate, field.TypeTime)
	}
	if eaiu.mutation.UsersIPRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_applications_ip.UsersIPRefTable,
			Columns: []string{exam_applications_ip.UsersIPRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usermaster.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eaiu.mutation.RemovedUsersIPRefIDs(); len(nodes) > 0 && !eaiu.mutation.UsersIPRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_applications_ip.UsersIPRefTable,
			Columns: []string{exam_applications_ip.UsersIPRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usermaster.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eaiu.mutation.UsersIPRefIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_applications_ip.UsersIPRefTable,
			Columns: []string{exam_applications_ip.UsersIPRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usermaster.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eaiu.mutation.CadrePrefRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_applications_ip.CadrePrefRefTable,
			Columns: []string{exam_applications_ip.CadrePrefRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cadre_choice_ip.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eaiu.mutation.RemovedCadrePrefRefIDs(); len(nodes) > 0 && !eaiu.mutation.CadrePrefRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_applications_ip.CadrePrefRefTable,
			Columns: []string{exam_applications_ip.CadrePrefRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cadre_choice_ip.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eaiu.mutation.CadrePrefRefIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_applications_ip.CadrePrefRefTable,
			Columns: []string{exam_applications_ip.CadrePrefRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cadre_choice_ip.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eaiu.mutation.CirclePrefRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_applications_ip.CirclePrefRefTable,
			Columns: []string{exam_applications_ip.CirclePrefRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(placeofpreferenceip.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eaiu.mutation.RemovedCirclePrefRefIDs(); len(nodes) > 0 && !eaiu.mutation.CirclePrefRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_applications_ip.CirclePrefRefTable,
			Columns: []string{exam_applications_ip.CirclePrefRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(placeofpreferenceip.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eaiu.mutation.CirclePrefRefIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_applications_ip.CirclePrefRefTable,
			Columns: []string{exam_applications_ip.CirclePrefRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(placeofpreferenceip.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eaiu.mutation.IPApplicationsRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_applications_ip.IPApplicationsRefTable,
			Columns: []string{exam_applications_ip.IPApplicationsRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(recommendationsipapplications.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eaiu.mutation.RemovedIPApplicationsRefIDs(); len(nodes) > 0 && !eaiu.mutation.IPApplicationsRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_applications_ip.IPApplicationsRefTable,
			Columns: []string{exam_applications_ip.IPApplicationsRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(recommendationsipapplications.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eaiu.mutation.IPApplicationsRefIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_applications_ip.IPApplicationsRefTable,
			Columns: []string{exam_applications_ip.IPApplicationsRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(recommendationsipapplications.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eaiu.mutation.LogDataCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_applications_ip.LogDataTable,
			Columns: []string{exam_applications_ip.LogDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(logs.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eaiu.mutation.RemovedLogDataIDs(); len(nodes) > 0 && !eaiu.mutation.LogDataCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_applications_ip.LogDataTable,
			Columns: []string{exam_applications_ip.LogDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(logs.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eaiu.mutation.LogDataIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_applications_ip.LogDataTable,
			Columns: []string{exam_applications_ip.LogDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(logs.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eaiu.mutation.ExamCentresCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   exam_applications_ip.ExamCentresTable,
			Columns: []string{exam_applications_ip.ExamCentresColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(center.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eaiu.mutation.ExamCentresIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   exam_applications_ip.ExamCentresTable,
			Columns: []string{exam_applications_ip.ExamCentresColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(center.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eaiu.mutation.ExamcitycenterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   exam_applications_ip.ExamcitycenterTable,
			Columns: []string{exam_applications_ip.ExamcitycenterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(examcitycenter.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eaiu.mutation.ExamcitycenterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   exam_applications_ip.ExamcitycenterTable,
			Columns: []string{exam_applications_ip.ExamcitycenterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(examcitycenter.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eaiu.mutation.RoleusersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   exam_applications_ip.RoleusersTable,
			Columns: []string{exam_applications_ip.RoleusersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rolemaster.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eaiu.mutation.RoleusersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   exam_applications_ip.RoleusersTable,
			Columns: []string{exam_applications_ip.RoleusersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rolemaster.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eaiu.mutation.CircleRefsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   exam_applications_ip.CircleRefsTable,
			Columns: []string{exam_applications_ip.CircleRefsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(circlesummaryforno.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eaiu.mutation.CircleRefsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   exam_applications_ip.CircleRefsTable,
			Columns: []string{exam_applications_ip.CircleRefsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(circlesummaryforno.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, eaiu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{exam_applications_ip.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	eaiu.mutation.done = true
	return n, nil
}

// ExamApplicationsIPUpdateOne is the builder for updating a single Exam_Applications_IP entity.
type ExamApplicationsIPUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ExamApplicationsIPMutation
}

// SetApplicationNumber sets the "ApplicationNumber" field.
func (eaiuo *ExamApplicationsIPUpdateOne) SetApplicationNumber(s string) *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.SetApplicationNumber(s)
	return eaiuo
}

// SetNillableApplicationNumber sets the "ApplicationNumber" field if the given value is not nil.
func (eaiuo *ExamApplicationsIPUpdateOne) SetNillableApplicationNumber(s *string) *ExamApplicationsIPUpdateOne {
	if s != nil {
		eaiuo.SetApplicationNumber(*s)
	}
	return eaiuo
}

// ClearApplicationNumber clears the value of the "ApplicationNumber" field.
func (eaiuo *ExamApplicationsIPUpdateOne) ClearApplicationNumber() *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.ClearApplicationNumber()
	return eaiuo
}

// SetApplnSubmittedDate sets the "ApplnSubmittedDate" field.
func (eaiuo *ExamApplicationsIPUpdateOne) SetApplnSubmittedDate(t time.Time) *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.SetApplnSubmittedDate(t)
	return eaiuo
}

// SetNillableApplnSubmittedDate sets the "ApplnSubmittedDate" field if the given value is not nil.
func (eaiuo *ExamApplicationsIPUpdateOne) SetNillableApplnSubmittedDate(t *time.Time) *ExamApplicationsIPUpdateOne {
	if t != nil {
		eaiuo.SetApplnSubmittedDate(*t)
	}
	return eaiuo
}

// ClearApplnSubmittedDate clears the value of the "ApplnSubmittedDate" field.
func (eaiuo *ExamApplicationsIPUpdateOne) ClearApplnSubmittedDate() *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.ClearApplnSubmittedDate()
	return eaiuo
}

// SetExamCode sets the "ExamCode" field.
func (eaiuo *ExamApplicationsIPUpdateOne) SetExamCode(i int32) *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.ResetExamCode()
	eaiuo.mutation.SetExamCode(i)
	return eaiuo
}

// SetNillableExamCode sets the "ExamCode" field if the given value is not nil.
func (eaiuo *ExamApplicationsIPUpdateOne) SetNillableExamCode(i *int32) *ExamApplicationsIPUpdateOne {
	if i != nil {
		eaiuo.SetExamCode(*i)
	}
	return eaiuo
}

// AddExamCode adds i to the "ExamCode" field.
func (eaiuo *ExamApplicationsIPUpdateOne) AddExamCode(i int32) *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.AddExamCode(i)
	return eaiuo
}

// ClearExamCode clears the value of the "ExamCode" field.
func (eaiuo *ExamApplicationsIPUpdateOne) ClearExamCode() *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.ClearExamCode()
	return eaiuo
}

// SetExamShortName sets the "ExamShortName" field.
func (eaiuo *ExamApplicationsIPUpdateOne) SetExamShortName(s string) *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.SetExamShortName(s)
	return eaiuo
}

// SetNillableExamShortName sets the "ExamShortName" field if the given value is not nil.
func (eaiuo *ExamApplicationsIPUpdateOne) SetNillableExamShortName(s *string) *ExamApplicationsIPUpdateOne {
	if s != nil {
		eaiuo.SetExamShortName(*s)
	}
	return eaiuo
}

// ClearExamShortName clears the value of the "ExamShortName" field.
func (eaiuo *ExamApplicationsIPUpdateOne) ClearExamShortName() *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.ClearExamShortName()
	return eaiuo
}

// SetExamName sets the "ExamName" field.
func (eaiuo *ExamApplicationsIPUpdateOne) SetExamName(s string) *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.SetExamName(s)
	return eaiuo
}

// SetNillableExamName sets the "ExamName" field if the given value is not nil.
func (eaiuo *ExamApplicationsIPUpdateOne) SetNillableExamName(s *string) *ExamApplicationsIPUpdateOne {
	if s != nil {
		eaiuo.SetExamName(*s)
	}
	return eaiuo
}

// ClearExamName clears the value of the "ExamName" field.
func (eaiuo *ExamApplicationsIPUpdateOne) ClearExamName() *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.ClearExamName()
	return eaiuo
}

// SetSmsExamShortName sets the "SmsExamShortName" field.
func (eaiuo *ExamApplicationsIPUpdateOne) SetSmsExamShortName(s string) *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.SetSmsExamShortName(s)
	return eaiuo
}

// SetNillableSmsExamShortName sets the "SmsExamShortName" field if the given value is not nil.
func (eaiuo *ExamApplicationsIPUpdateOne) SetNillableSmsExamShortName(s *string) *ExamApplicationsIPUpdateOne {
	if s != nil {
		eaiuo.SetSmsExamShortName(*s)
	}
	return eaiuo
}

// ClearSmsExamShortName clears the value of the "SmsExamShortName" field.
func (eaiuo *ExamApplicationsIPUpdateOne) ClearSmsExamShortName() *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.ClearSmsExamShortName()
	return eaiuo
}

// SetExamYear sets the "ExamYear" field.
func (eaiuo *ExamApplicationsIPUpdateOne) SetExamYear(s string) *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.SetExamYear(s)
	return eaiuo
}

// SetNillableExamYear sets the "ExamYear" field if the given value is not nil.
func (eaiuo *ExamApplicationsIPUpdateOne) SetNillableExamYear(s *string) *ExamApplicationsIPUpdateOne {
	if s != nil {
		eaiuo.SetExamYear(*s)
	}
	return eaiuo
}

// ClearExamYear clears the value of the "ExamYear" field.
func (eaiuo *ExamApplicationsIPUpdateOne) ClearExamYear() *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.ClearExamYear()
	return eaiuo
}

// SetUserID sets the "UserID" field.
func (eaiuo *ExamApplicationsIPUpdateOne) SetUserID(i int32) *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.ResetUserID()
	eaiuo.mutation.SetUserID(i)
	return eaiuo
}

// SetNillableUserID sets the "UserID" field if the given value is not nil.
func (eaiuo *ExamApplicationsIPUpdateOne) SetNillableUserID(i *int32) *ExamApplicationsIPUpdateOne {
	if i != nil {
		eaiuo.SetUserID(*i)
	}
	return eaiuo
}

// AddUserID adds i to the "UserID" field.
func (eaiuo *ExamApplicationsIPUpdateOne) AddUserID(i int32) *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.AddUserID(i)
	return eaiuo
}

// ClearUserID clears the value of the "UserID" field.
func (eaiuo *ExamApplicationsIPUpdateOne) ClearUserID() *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.ClearUserID()
	return eaiuo
}

// SetEmployeeID sets the "EmployeeID" field.
func (eaiuo *ExamApplicationsIPUpdateOne) SetEmployeeID(i int64) *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.ResetEmployeeID()
	eaiuo.mutation.SetEmployeeID(i)
	return eaiuo
}

// SetNillableEmployeeID sets the "EmployeeID" field if the given value is not nil.
func (eaiuo *ExamApplicationsIPUpdateOne) SetNillableEmployeeID(i *int64) *ExamApplicationsIPUpdateOne {
	if i != nil {
		eaiuo.SetEmployeeID(*i)
	}
	return eaiuo
}

// AddEmployeeID adds i to the "EmployeeID" field.
func (eaiuo *ExamApplicationsIPUpdateOne) AddEmployeeID(i int64) *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.AddEmployeeID(i)
	return eaiuo
}

// ClearEmployeeID clears the value of the "EmployeeID" field.
func (eaiuo *ExamApplicationsIPUpdateOne) ClearEmployeeID() *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.ClearEmployeeID()
	return eaiuo
}

// SetEmployeeName sets the "EmployeeName" field.
func (eaiuo *ExamApplicationsIPUpdateOne) SetEmployeeName(s string) *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.SetEmployeeName(s)
	return eaiuo
}

// SetNillableEmployeeName sets the "EmployeeName" field if the given value is not nil.
func (eaiuo *ExamApplicationsIPUpdateOne) SetNillableEmployeeName(s *string) *ExamApplicationsIPUpdateOne {
	if s != nil {
		eaiuo.SetEmployeeName(*s)
	}
	return eaiuo
}

// ClearEmployeeName clears the value of the "EmployeeName" field.
func (eaiuo *ExamApplicationsIPUpdateOne) ClearEmployeeName() *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.ClearEmployeeName()
	return eaiuo
}

// SetDOB sets the "DOB" field.
func (eaiuo *ExamApplicationsIPUpdateOne) SetDOB(s string) *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.SetDOB(s)
	return eaiuo
}

// SetNillableDOB sets the "DOB" field if the given value is not nil.
func (eaiuo *ExamApplicationsIPUpdateOne) SetNillableDOB(s *string) *ExamApplicationsIPUpdateOne {
	if s != nil {
		eaiuo.SetDOB(*s)
	}
	return eaiuo
}

// ClearDOB clears the value of the "DOB" field.
func (eaiuo *ExamApplicationsIPUpdateOne) ClearDOB() *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.ClearDOB()
	return eaiuo
}

// SetGender sets the "Gender" field.
func (eaiuo *ExamApplicationsIPUpdateOne) SetGender(s string) *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.SetGender(s)
	return eaiuo
}

// SetNillableGender sets the "Gender" field if the given value is not nil.
func (eaiuo *ExamApplicationsIPUpdateOne) SetNillableGender(s *string) *ExamApplicationsIPUpdateOne {
	if s != nil {
		eaiuo.SetGender(*s)
	}
	return eaiuo
}

// ClearGender clears the value of the "Gender" field.
func (eaiuo *ExamApplicationsIPUpdateOne) ClearGender() *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.ClearGender()
	return eaiuo
}

// SetMobileNumber sets the "MobileNumber" field.
func (eaiuo *ExamApplicationsIPUpdateOne) SetMobileNumber(s string) *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.SetMobileNumber(s)
	return eaiuo
}

// SetNillableMobileNumber sets the "MobileNumber" field if the given value is not nil.
func (eaiuo *ExamApplicationsIPUpdateOne) SetNillableMobileNumber(s *string) *ExamApplicationsIPUpdateOne {
	if s != nil {
		eaiuo.SetMobileNumber(*s)
	}
	return eaiuo
}

// ClearMobileNumber clears the value of the "MobileNumber" field.
func (eaiuo *ExamApplicationsIPUpdateOne) ClearMobileNumber() *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.ClearMobileNumber()
	return eaiuo
}

// SetEmailID sets the "EmailID" field.
func (eaiuo *ExamApplicationsIPUpdateOne) SetEmailID(s string) *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.SetEmailID(s)
	return eaiuo
}

// SetNillableEmailID sets the "EmailID" field if the given value is not nil.
func (eaiuo *ExamApplicationsIPUpdateOne) SetNillableEmailID(s *string) *ExamApplicationsIPUpdateOne {
	if s != nil {
		eaiuo.SetEmailID(*s)
	}
	return eaiuo
}

// ClearEmailID clears the value of the "EmailID" field.
func (eaiuo *ExamApplicationsIPUpdateOne) ClearEmailID() *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.ClearEmailID()
	return eaiuo
}

// SetCategoryCode sets the "CategoryCode" field.
func (eaiuo *ExamApplicationsIPUpdateOne) SetCategoryCode(s string) *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.SetCategoryCode(s)
	return eaiuo
}

// SetNillableCategoryCode sets the "CategoryCode" field if the given value is not nil.
func (eaiuo *ExamApplicationsIPUpdateOne) SetNillableCategoryCode(s *string) *ExamApplicationsIPUpdateOne {
	if s != nil {
		eaiuo.SetCategoryCode(*s)
	}
	return eaiuo
}

// ClearCategoryCode clears the value of the "CategoryCode" field.
func (eaiuo *ExamApplicationsIPUpdateOne) ClearCategoryCode() *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.ClearCategoryCode()
	return eaiuo
}

// SetCategoryDescription sets the "CategoryDescription" field.
func (eaiuo *ExamApplicationsIPUpdateOne) SetCategoryDescription(s string) *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.SetCategoryDescription(s)
	return eaiuo
}

// SetNillableCategoryDescription sets the "CategoryDescription" field if the given value is not nil.
func (eaiuo *ExamApplicationsIPUpdateOne) SetNillableCategoryDescription(s *string) *ExamApplicationsIPUpdateOne {
	if s != nil {
		eaiuo.SetCategoryDescription(*s)
	}
	return eaiuo
}

// ClearCategoryDescription clears the value of the "CategoryDescription" field.
func (eaiuo *ExamApplicationsIPUpdateOne) ClearCategoryDescription() *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.ClearCategoryDescription()
	return eaiuo
}

// SetDisabilityTypeID sets the "DisabilityTypeID" field.
func (eaiuo *ExamApplicationsIPUpdateOne) SetDisabilityTypeID(s string) *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.SetDisabilityTypeID(s)
	return eaiuo
}

// SetNillableDisabilityTypeID sets the "DisabilityTypeID" field if the given value is not nil.
func (eaiuo *ExamApplicationsIPUpdateOne) SetNillableDisabilityTypeID(s *string) *ExamApplicationsIPUpdateOne {
	if s != nil {
		eaiuo.SetDisabilityTypeID(*s)
	}
	return eaiuo
}

// ClearDisabilityTypeID clears the value of the "DisabilityTypeID" field.
func (eaiuo *ExamApplicationsIPUpdateOne) ClearDisabilityTypeID() *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.ClearDisabilityTypeID()
	return eaiuo
}

// SetDisabilityTypeCode sets the "DisabilityTypeCode" field.
func (eaiuo *ExamApplicationsIPUpdateOne) SetDisabilityTypeCode(s string) *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.SetDisabilityTypeCode(s)
	return eaiuo
}

// SetNillableDisabilityTypeCode sets the "DisabilityTypeCode" field if the given value is not nil.
func (eaiuo *ExamApplicationsIPUpdateOne) SetNillableDisabilityTypeCode(s *string) *ExamApplicationsIPUpdateOne {
	if s != nil {
		eaiuo.SetDisabilityTypeCode(*s)
	}
	return eaiuo
}

// ClearDisabilityTypeCode clears the value of the "DisabilityTypeCode" field.
func (eaiuo *ExamApplicationsIPUpdateOne) ClearDisabilityTypeCode() *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.ClearDisabilityTypeCode()
	return eaiuo
}

// SetDisabilityTypeDescription sets the "DisabilityTypeDescription" field.
func (eaiuo *ExamApplicationsIPUpdateOne) SetDisabilityTypeDescription(s string) *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.SetDisabilityTypeDescription(s)
	return eaiuo
}

// SetNillableDisabilityTypeDescription sets the "DisabilityTypeDescription" field if the given value is not nil.
func (eaiuo *ExamApplicationsIPUpdateOne) SetNillableDisabilityTypeDescription(s *string) *ExamApplicationsIPUpdateOne {
	if s != nil {
		eaiuo.SetDisabilityTypeDescription(*s)
	}
	return eaiuo
}

// ClearDisabilityTypeDescription clears the value of the "DisabilityTypeDescription" field.
func (eaiuo *ExamApplicationsIPUpdateOne) ClearDisabilityTypeDescription() *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.ClearDisabilityTypeDescription()
	return eaiuo
}

// SetDisabilityPercentage sets the "DisabilityPercentage" field.
func (eaiuo *ExamApplicationsIPUpdateOne) SetDisabilityPercentage(i int32) *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.ResetDisabilityPercentage()
	eaiuo.mutation.SetDisabilityPercentage(i)
	return eaiuo
}

// SetNillableDisabilityPercentage sets the "DisabilityPercentage" field if the given value is not nil.
func (eaiuo *ExamApplicationsIPUpdateOne) SetNillableDisabilityPercentage(i *int32) *ExamApplicationsIPUpdateOne {
	if i != nil {
		eaiuo.SetDisabilityPercentage(*i)
	}
	return eaiuo
}

// AddDisabilityPercentage adds i to the "DisabilityPercentage" field.
func (eaiuo *ExamApplicationsIPUpdateOne) AddDisabilityPercentage(i int32) *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.AddDisabilityPercentage(i)
	return eaiuo
}

// ClearDisabilityPercentage clears the value of the "DisabilityPercentage" field.
func (eaiuo *ExamApplicationsIPUpdateOne) ClearDisabilityPercentage() *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.ClearDisabilityPercentage()
	return eaiuo
}

// SetDCCS sets the "DCCS" field.
func (eaiuo *ExamApplicationsIPUpdateOne) SetDCCS(s string) *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.SetDCCS(s)
	return eaiuo
}

// SetNillableDCCS sets the "DCCS" field if the given value is not nil.
func (eaiuo *ExamApplicationsIPUpdateOne) SetNillableDCCS(s *string) *ExamApplicationsIPUpdateOne {
	if s != nil {
		eaiuo.SetDCCS(*s)
	}
	return eaiuo
}

// ClearDCCS clears the value of the "DCCS" field.
func (eaiuo *ExamApplicationsIPUpdateOne) ClearDCCS() *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.ClearDCCS()
	return eaiuo
}

// SetEntryPostCode sets the "EntryPostCode" field.
func (eaiuo *ExamApplicationsIPUpdateOne) SetEntryPostCode(s string) *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.SetEntryPostCode(s)
	return eaiuo
}

// SetNillableEntryPostCode sets the "EntryPostCode" field if the given value is not nil.
func (eaiuo *ExamApplicationsIPUpdateOne) SetNillableEntryPostCode(s *string) *ExamApplicationsIPUpdateOne {
	if s != nil {
		eaiuo.SetEntryPostCode(*s)
	}
	return eaiuo
}

// ClearEntryPostCode clears the value of the "EntryPostCode" field.
func (eaiuo *ExamApplicationsIPUpdateOne) ClearEntryPostCode() *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.ClearEntryPostCode()
	return eaiuo
}

// SetEntryPostDescription sets the "EntryPostDescription" field.
func (eaiuo *ExamApplicationsIPUpdateOne) SetEntryPostDescription(s string) *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.SetEntryPostDescription(s)
	return eaiuo
}

// SetNillableEntryPostDescription sets the "EntryPostDescription" field if the given value is not nil.
func (eaiuo *ExamApplicationsIPUpdateOne) SetNillableEntryPostDescription(s *string) *ExamApplicationsIPUpdateOne {
	if s != nil {
		eaiuo.SetEntryPostDescription(*s)
	}
	return eaiuo
}

// ClearEntryPostDescription clears the value of the "EntryPostDescription" field.
func (eaiuo *ExamApplicationsIPUpdateOne) ClearEntryPostDescription() *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.ClearEntryPostDescription()
	return eaiuo
}

// SetPresentPostCode sets the "PresentPostCode" field.
func (eaiuo *ExamApplicationsIPUpdateOne) SetPresentPostCode(s string) *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.SetPresentPostCode(s)
	return eaiuo
}

// SetNillablePresentPostCode sets the "PresentPostCode" field if the given value is not nil.
func (eaiuo *ExamApplicationsIPUpdateOne) SetNillablePresentPostCode(s *string) *ExamApplicationsIPUpdateOne {
	if s != nil {
		eaiuo.SetPresentPostCode(*s)
	}
	return eaiuo
}

// ClearPresentPostCode clears the value of the "PresentPostCode" field.
func (eaiuo *ExamApplicationsIPUpdateOne) ClearPresentPostCode() *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.ClearPresentPostCode()
	return eaiuo
}

// SetPresentPostDescription sets the "PresentPostDescription" field.
func (eaiuo *ExamApplicationsIPUpdateOne) SetPresentPostDescription(s string) *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.SetPresentPostDescription(s)
	return eaiuo
}

// SetNillablePresentPostDescription sets the "PresentPostDescription" field if the given value is not nil.
func (eaiuo *ExamApplicationsIPUpdateOne) SetNillablePresentPostDescription(s *string) *ExamApplicationsIPUpdateOne {
	if s != nil {
		eaiuo.SetPresentPostDescription(*s)
	}
	return eaiuo
}

// ClearPresentPostDescription clears the value of the "PresentPostDescription" field.
func (eaiuo *ExamApplicationsIPUpdateOne) ClearPresentPostDescription() *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.ClearPresentPostDescription()
	return eaiuo
}

// SetFeederPostCode sets the "FeederPostCode" field.
func (eaiuo *ExamApplicationsIPUpdateOne) SetFeederPostCode(s string) *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.SetFeederPostCode(s)
	return eaiuo
}

// SetNillableFeederPostCode sets the "FeederPostCode" field if the given value is not nil.
func (eaiuo *ExamApplicationsIPUpdateOne) SetNillableFeederPostCode(s *string) *ExamApplicationsIPUpdateOne {
	if s != nil {
		eaiuo.SetFeederPostCode(*s)
	}
	return eaiuo
}

// ClearFeederPostCode clears the value of the "FeederPostCode" field.
func (eaiuo *ExamApplicationsIPUpdateOne) ClearFeederPostCode() *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.ClearFeederPostCode()
	return eaiuo
}

// SetFeederPostDescription sets the "FeederPostDescription" field.
func (eaiuo *ExamApplicationsIPUpdateOne) SetFeederPostDescription(s string) *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.SetFeederPostDescription(s)
	return eaiuo
}

// SetNillableFeederPostDescription sets the "FeederPostDescription" field if the given value is not nil.
func (eaiuo *ExamApplicationsIPUpdateOne) SetNillableFeederPostDescription(s *string) *ExamApplicationsIPUpdateOne {
	if s != nil {
		eaiuo.SetFeederPostDescription(*s)
	}
	return eaiuo
}

// ClearFeederPostDescription clears the value of the "FeederPostDescription" field.
func (eaiuo *ExamApplicationsIPUpdateOne) ClearFeederPostDescription() *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.ClearFeederPostDescription()
	return eaiuo
}

// SetFeederPostJoiningDate sets the "FeederPostJoiningDate" field.
func (eaiuo *ExamApplicationsIPUpdateOne) SetFeederPostJoiningDate(s string) *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.SetFeederPostJoiningDate(s)
	return eaiuo
}

// SetNillableFeederPostJoiningDate sets the "FeederPostJoiningDate" field if the given value is not nil.
func (eaiuo *ExamApplicationsIPUpdateOne) SetNillableFeederPostJoiningDate(s *string) *ExamApplicationsIPUpdateOne {
	if s != nil {
		eaiuo.SetFeederPostJoiningDate(*s)
	}
	return eaiuo
}

// ClearFeederPostJoiningDate clears the value of the "FeederPostJoiningDate" field.
func (eaiuo *ExamApplicationsIPUpdateOne) ClearFeederPostJoiningDate() *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.ClearFeederPostJoiningDate()
	return eaiuo
}

// SetDesignationID sets the "DesignationID" field.
func (eaiuo *ExamApplicationsIPUpdateOne) SetDesignationID(s string) *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.SetDesignationID(s)
	return eaiuo
}

// SetNillableDesignationID sets the "DesignationID" field if the given value is not nil.
func (eaiuo *ExamApplicationsIPUpdateOne) SetNillableDesignationID(s *string) *ExamApplicationsIPUpdateOne {
	if s != nil {
		eaiuo.SetDesignationID(*s)
	}
	return eaiuo
}

// ClearDesignationID clears the value of the "DesignationID" field.
func (eaiuo *ExamApplicationsIPUpdateOne) ClearDesignationID() *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.ClearDesignationID()
	return eaiuo
}

// SetPresentDesignation sets the "PresentDesignation" field.
func (eaiuo *ExamApplicationsIPUpdateOne) SetPresentDesignation(s string) *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.SetPresentDesignation(s)
	return eaiuo
}

// SetNillablePresentDesignation sets the "PresentDesignation" field if the given value is not nil.
func (eaiuo *ExamApplicationsIPUpdateOne) SetNillablePresentDesignation(s *string) *ExamApplicationsIPUpdateOne {
	if s != nil {
		eaiuo.SetPresentDesignation(*s)
	}
	return eaiuo
}

// ClearPresentDesignation clears the value of the "PresentDesignation" field.
func (eaiuo *ExamApplicationsIPUpdateOne) ClearPresentDesignation() *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.ClearPresentDesignation()
	return eaiuo
}

// SetEducationCode sets the "EducationCode" field.
func (eaiuo *ExamApplicationsIPUpdateOne) SetEducationCode(s string) *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.SetEducationCode(s)
	return eaiuo
}

// SetNillableEducationCode sets the "EducationCode" field if the given value is not nil.
func (eaiuo *ExamApplicationsIPUpdateOne) SetNillableEducationCode(s *string) *ExamApplicationsIPUpdateOne {
	if s != nil {
		eaiuo.SetEducationCode(*s)
	}
	return eaiuo
}

// ClearEducationCode clears the value of the "EducationCode" field.
func (eaiuo *ExamApplicationsIPUpdateOne) ClearEducationCode() *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.ClearEducationCode()
	return eaiuo
}

// SetEducationDescription sets the "EducationDescription" field.
func (eaiuo *ExamApplicationsIPUpdateOne) SetEducationDescription(s string) *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.SetEducationDescription(s)
	return eaiuo
}

// SetNillableEducationDescription sets the "EducationDescription" field if the given value is not nil.
func (eaiuo *ExamApplicationsIPUpdateOne) SetNillableEducationDescription(s *string) *ExamApplicationsIPUpdateOne {
	if s != nil {
		eaiuo.SetEducationDescription(*s)
	}
	return eaiuo
}

// ClearEducationDescription clears the value of the "EducationDescription" field.
func (eaiuo *ExamApplicationsIPUpdateOne) ClearEducationDescription() *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.ClearEducationDescription()
	return eaiuo
}

// SetFacilityUniqueID sets the "FacilityUniqueID" field.
func (eaiuo *ExamApplicationsIPUpdateOne) SetFacilityUniqueID(s string) *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.SetFacilityUniqueID(s)
	return eaiuo
}

// SetNillableFacilityUniqueID sets the "FacilityUniqueID" field if the given value is not nil.
func (eaiuo *ExamApplicationsIPUpdateOne) SetNillableFacilityUniqueID(s *string) *ExamApplicationsIPUpdateOne {
	if s != nil {
		eaiuo.SetFacilityUniqueID(*s)
	}
	return eaiuo
}

// ClearFacilityUniqueID clears the value of the "FacilityUniqueID" field.
func (eaiuo *ExamApplicationsIPUpdateOne) ClearFacilityUniqueID() *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.ClearFacilityUniqueID()
	return eaiuo
}

// SetWorkingOfficePincode sets the "WorkingOfficePincode" field.
func (eaiuo *ExamApplicationsIPUpdateOne) SetWorkingOfficePincode(i int32) *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.ResetWorkingOfficePincode()
	eaiuo.mutation.SetWorkingOfficePincode(i)
	return eaiuo
}

// SetNillableWorkingOfficePincode sets the "WorkingOfficePincode" field if the given value is not nil.
func (eaiuo *ExamApplicationsIPUpdateOne) SetNillableWorkingOfficePincode(i *int32) *ExamApplicationsIPUpdateOne {
	if i != nil {
		eaiuo.SetWorkingOfficePincode(*i)
	}
	return eaiuo
}

// AddWorkingOfficePincode adds i to the "WorkingOfficePincode" field.
func (eaiuo *ExamApplicationsIPUpdateOne) AddWorkingOfficePincode(i int32) *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.AddWorkingOfficePincode(i)
	return eaiuo
}

// ClearWorkingOfficePincode clears the value of the "WorkingOfficePincode" field.
func (eaiuo *ExamApplicationsIPUpdateOne) ClearWorkingOfficePincode() *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.ClearWorkingOfficePincode()
	return eaiuo
}

// SetWorkingOfficeFacilityID sets the "WorkingOfficeFacilityID" field.
func (eaiuo *ExamApplicationsIPUpdateOne) SetWorkingOfficeFacilityID(s string) *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.SetWorkingOfficeFacilityID(s)
	return eaiuo
}

// SetNillableWorkingOfficeFacilityID sets the "WorkingOfficeFacilityID" field if the given value is not nil.
func (eaiuo *ExamApplicationsIPUpdateOne) SetNillableWorkingOfficeFacilityID(s *string) *ExamApplicationsIPUpdateOne {
	if s != nil {
		eaiuo.SetWorkingOfficeFacilityID(*s)
	}
	return eaiuo
}

// ClearWorkingOfficeFacilityID clears the value of the "WorkingOfficeFacilityID" field.
func (eaiuo *ExamApplicationsIPUpdateOne) ClearWorkingOfficeFacilityID() *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.ClearWorkingOfficeFacilityID()
	return eaiuo
}

// SetWorkingOfficeName sets the "WorkingOfficeName" field.
func (eaiuo *ExamApplicationsIPUpdateOne) SetWorkingOfficeName(s string) *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.SetWorkingOfficeName(s)
	return eaiuo
}

// SetNillableWorkingOfficeName sets the "WorkingOfficeName" field if the given value is not nil.
func (eaiuo *ExamApplicationsIPUpdateOne) SetNillableWorkingOfficeName(s *string) *ExamApplicationsIPUpdateOne {
	if s != nil {
		eaiuo.SetWorkingOfficeName(*s)
	}
	return eaiuo
}

// ClearWorkingOfficeName clears the value of the "WorkingOfficeName" field.
func (eaiuo *ExamApplicationsIPUpdateOne) ClearWorkingOfficeName() *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.ClearWorkingOfficeName()
	return eaiuo
}

// SetWorkingOfficeCircleFacilityID sets the "WorkingOfficeCircleFacilityID" field.
func (eaiuo *ExamApplicationsIPUpdateOne) SetWorkingOfficeCircleFacilityID(s string) *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.SetWorkingOfficeCircleFacilityID(s)
	return eaiuo
}

// SetNillableWorkingOfficeCircleFacilityID sets the "WorkingOfficeCircleFacilityID" field if the given value is not nil.
func (eaiuo *ExamApplicationsIPUpdateOne) SetNillableWorkingOfficeCircleFacilityID(s *string) *ExamApplicationsIPUpdateOne {
	if s != nil {
		eaiuo.SetWorkingOfficeCircleFacilityID(*s)
	}
	return eaiuo
}

// ClearWorkingOfficeCircleFacilityID clears the value of the "WorkingOfficeCircleFacilityID" field.
func (eaiuo *ExamApplicationsIPUpdateOne) ClearWorkingOfficeCircleFacilityID() *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.ClearWorkingOfficeCircleFacilityID()
	return eaiuo
}

// SetWorkingOfficeCircleName sets the "WorkingOfficeCircleName" field.
func (eaiuo *ExamApplicationsIPUpdateOne) SetWorkingOfficeCircleName(s string) *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.SetWorkingOfficeCircleName(s)
	return eaiuo
}

// SetNillableWorkingOfficeCircleName sets the "WorkingOfficeCircleName" field if the given value is not nil.
func (eaiuo *ExamApplicationsIPUpdateOne) SetNillableWorkingOfficeCircleName(s *string) *ExamApplicationsIPUpdateOne {
	if s != nil {
		eaiuo.SetWorkingOfficeCircleName(*s)
	}
	return eaiuo
}

// ClearWorkingOfficeCircleName clears the value of the "WorkingOfficeCircleName" field.
func (eaiuo *ExamApplicationsIPUpdateOne) ClearWorkingOfficeCircleName() *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.ClearWorkingOfficeCircleName()
	return eaiuo
}

// SetWorkingOfficeRegionFacilityID sets the "WorkingOfficeRegionFacilityID" field.
func (eaiuo *ExamApplicationsIPUpdateOne) SetWorkingOfficeRegionFacilityID(s string) *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.SetWorkingOfficeRegionFacilityID(s)
	return eaiuo
}

// SetNillableWorkingOfficeRegionFacilityID sets the "WorkingOfficeRegionFacilityID" field if the given value is not nil.
func (eaiuo *ExamApplicationsIPUpdateOne) SetNillableWorkingOfficeRegionFacilityID(s *string) *ExamApplicationsIPUpdateOne {
	if s != nil {
		eaiuo.SetWorkingOfficeRegionFacilityID(*s)
	}
	return eaiuo
}

// ClearWorkingOfficeRegionFacilityID clears the value of the "WorkingOfficeRegionFacilityID" field.
func (eaiuo *ExamApplicationsIPUpdateOne) ClearWorkingOfficeRegionFacilityID() *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.ClearWorkingOfficeRegionFacilityID()
	return eaiuo
}

// SetWorkingOfficeRegionName sets the "WorkingOfficeRegionName" field.
func (eaiuo *ExamApplicationsIPUpdateOne) SetWorkingOfficeRegionName(s string) *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.SetWorkingOfficeRegionName(s)
	return eaiuo
}

// SetNillableWorkingOfficeRegionName sets the "WorkingOfficeRegionName" field if the given value is not nil.
func (eaiuo *ExamApplicationsIPUpdateOne) SetNillableWorkingOfficeRegionName(s *string) *ExamApplicationsIPUpdateOne {
	if s != nil {
		eaiuo.SetWorkingOfficeRegionName(*s)
	}
	return eaiuo
}

// ClearWorkingOfficeRegionName clears the value of the "WorkingOfficeRegionName" field.
func (eaiuo *ExamApplicationsIPUpdateOne) ClearWorkingOfficeRegionName() *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.ClearWorkingOfficeRegionName()
	return eaiuo
}

// SetWorkingOfficeDivisionFacilityID sets the "WorkingOfficeDivisionFacilityID" field.
func (eaiuo *ExamApplicationsIPUpdateOne) SetWorkingOfficeDivisionFacilityID(s string) *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.SetWorkingOfficeDivisionFacilityID(s)
	return eaiuo
}

// SetNillableWorkingOfficeDivisionFacilityID sets the "WorkingOfficeDivisionFacilityID" field if the given value is not nil.
func (eaiuo *ExamApplicationsIPUpdateOne) SetNillableWorkingOfficeDivisionFacilityID(s *string) *ExamApplicationsIPUpdateOne {
	if s != nil {
		eaiuo.SetWorkingOfficeDivisionFacilityID(*s)
	}
	return eaiuo
}

// ClearWorkingOfficeDivisionFacilityID clears the value of the "WorkingOfficeDivisionFacilityID" field.
func (eaiuo *ExamApplicationsIPUpdateOne) ClearWorkingOfficeDivisionFacilityID() *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.ClearWorkingOfficeDivisionFacilityID()
	return eaiuo
}

// SetWorkingOfficeDivisionName sets the "WorkingOfficeDivisionName" field.
func (eaiuo *ExamApplicationsIPUpdateOne) SetWorkingOfficeDivisionName(s string) *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.SetWorkingOfficeDivisionName(s)
	return eaiuo
}

// SetNillableWorkingOfficeDivisionName sets the "WorkingOfficeDivisionName" field if the given value is not nil.
func (eaiuo *ExamApplicationsIPUpdateOne) SetNillableWorkingOfficeDivisionName(s *string) *ExamApplicationsIPUpdateOne {
	if s != nil {
		eaiuo.SetWorkingOfficeDivisionName(*s)
	}
	return eaiuo
}

// ClearWorkingOfficeDivisionName clears the value of the "WorkingOfficeDivisionName" field.
func (eaiuo *ExamApplicationsIPUpdateOne) ClearWorkingOfficeDivisionName() *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.ClearWorkingOfficeDivisionName()
	return eaiuo
}

// SetReportingOfficeFacilityID sets the "ReportingOfficeFacilityID" field.
func (eaiuo *ExamApplicationsIPUpdateOne) SetReportingOfficeFacilityID(s string) *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.SetReportingOfficeFacilityID(s)
	return eaiuo
}

// SetNillableReportingOfficeFacilityID sets the "ReportingOfficeFacilityID" field if the given value is not nil.
func (eaiuo *ExamApplicationsIPUpdateOne) SetNillableReportingOfficeFacilityID(s *string) *ExamApplicationsIPUpdateOne {
	if s != nil {
		eaiuo.SetReportingOfficeFacilityID(*s)
	}
	return eaiuo
}

// ClearReportingOfficeFacilityID clears the value of the "ReportingOfficeFacilityID" field.
func (eaiuo *ExamApplicationsIPUpdateOne) ClearReportingOfficeFacilityID() *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.ClearReportingOfficeFacilityID()
	return eaiuo
}

// SetReportingOfficeName sets the "ReportingOfficeName" field.
func (eaiuo *ExamApplicationsIPUpdateOne) SetReportingOfficeName(s string) *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.SetReportingOfficeName(s)
	return eaiuo
}

// SetNillableReportingOfficeName sets the "ReportingOfficeName" field if the given value is not nil.
func (eaiuo *ExamApplicationsIPUpdateOne) SetNillableReportingOfficeName(s *string) *ExamApplicationsIPUpdateOne {
	if s != nil {
		eaiuo.SetReportingOfficeName(*s)
	}
	return eaiuo
}

// ClearReportingOfficeName clears the value of the "ReportingOfficeName" field.
func (eaiuo *ExamApplicationsIPUpdateOne) ClearReportingOfficeName() *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.ClearReportingOfficeName()
	return eaiuo
}

// SetLienControllingOfficeID sets the "LienControllingOfficeID" field.
func (eaiuo *ExamApplicationsIPUpdateOne) SetLienControllingOfficeID(s string) *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.SetLienControllingOfficeID(s)
	return eaiuo
}

// SetNillableLienControllingOfficeID sets the "LienControllingOfficeID" field if the given value is not nil.
func (eaiuo *ExamApplicationsIPUpdateOne) SetNillableLienControllingOfficeID(s *string) *ExamApplicationsIPUpdateOne {
	if s != nil {
		eaiuo.SetLienControllingOfficeID(*s)
	}
	return eaiuo
}

// ClearLienControllingOfficeID clears the value of the "LienControllingOfficeID" field.
func (eaiuo *ExamApplicationsIPUpdateOne) ClearLienControllingOfficeID() *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.ClearLienControllingOfficeID()
	return eaiuo
}

// SetLienControllingOfficeName sets the "LienControllingOfficeName" field.
func (eaiuo *ExamApplicationsIPUpdateOne) SetLienControllingOfficeName(s string) *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.SetLienControllingOfficeName(s)
	return eaiuo
}

// SetNillableLienControllingOfficeName sets the "LienControllingOfficeName" field if the given value is not nil.
func (eaiuo *ExamApplicationsIPUpdateOne) SetNillableLienControllingOfficeName(s *string) *ExamApplicationsIPUpdateOne {
	if s != nil {
		eaiuo.SetLienControllingOfficeName(*s)
	}
	return eaiuo
}

// ClearLienControllingOfficeName clears the value of the "LienControllingOfficeName" field.
func (eaiuo *ExamApplicationsIPUpdateOne) ClearLienControllingOfficeName() *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.ClearLienControllingOfficeName()
	return eaiuo
}

// SetInDeputation sets the "InDeputation" field.
func (eaiuo *ExamApplicationsIPUpdateOne) SetInDeputation(s string) *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.SetInDeputation(s)
	return eaiuo
}

// SetNillableInDeputation sets the "InDeputation" field if the given value is not nil.
func (eaiuo *ExamApplicationsIPUpdateOne) SetNillableInDeputation(s *string) *ExamApplicationsIPUpdateOne {
	if s != nil {
		eaiuo.SetInDeputation(*s)
	}
	return eaiuo
}

// ClearInDeputation clears the value of the "InDeputation" field.
func (eaiuo *ExamApplicationsIPUpdateOne) ClearInDeputation() *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.ClearInDeputation()
	return eaiuo
}

// SetDeputationType sets the "DeputationType" field.
func (eaiuo *ExamApplicationsIPUpdateOne) SetDeputationType(s string) *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.SetDeputationType(s)
	return eaiuo
}

// SetNillableDeputationType sets the "DeputationType" field if the given value is not nil.
func (eaiuo *ExamApplicationsIPUpdateOne) SetNillableDeputationType(s *string) *ExamApplicationsIPUpdateOne {
	if s != nil {
		eaiuo.SetDeputationType(*s)
	}
	return eaiuo
}

// ClearDeputationType clears the value of the "DeputationType" field.
func (eaiuo *ExamApplicationsIPUpdateOne) ClearDeputationType() *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.ClearDeputationType()
	return eaiuo
}

// SetDeputationOfficeUniqueId sets the "DeputationOfficeUniqueId" field.
func (eaiuo *ExamApplicationsIPUpdateOne) SetDeputationOfficeUniqueId(s string) *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.SetDeputationOfficeUniqueId(s)
	return eaiuo
}

// SetNillableDeputationOfficeUniqueId sets the "DeputationOfficeUniqueId" field if the given value is not nil.
func (eaiuo *ExamApplicationsIPUpdateOne) SetNillableDeputationOfficeUniqueId(s *string) *ExamApplicationsIPUpdateOne {
	if s != nil {
		eaiuo.SetDeputationOfficeUniqueId(*s)
	}
	return eaiuo
}

// ClearDeputationOfficeUniqueId clears the value of the "DeputationOfficeUniqueId" field.
func (eaiuo *ExamApplicationsIPUpdateOne) ClearDeputationOfficeUniqueId() *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.ClearDeputationOfficeUniqueId()
	return eaiuo
}

// SetDeputationOfficeFacilityID sets the "DeputationOfficeFacilityID" field.
func (eaiuo *ExamApplicationsIPUpdateOne) SetDeputationOfficeFacilityID(s string) *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.SetDeputationOfficeFacilityID(s)
	return eaiuo
}

// SetNillableDeputationOfficeFacilityID sets the "DeputationOfficeFacilityID" field if the given value is not nil.
func (eaiuo *ExamApplicationsIPUpdateOne) SetNillableDeputationOfficeFacilityID(s *string) *ExamApplicationsIPUpdateOne {
	if s != nil {
		eaiuo.SetDeputationOfficeFacilityID(*s)
	}
	return eaiuo
}

// ClearDeputationOfficeFacilityID clears the value of the "DeputationOfficeFacilityID" field.
func (eaiuo *ExamApplicationsIPUpdateOne) ClearDeputationOfficeFacilityID() *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.ClearDeputationOfficeFacilityID()
	return eaiuo
}

// SetDeputationOfficeName sets the "DeputationOfficeName" field.
func (eaiuo *ExamApplicationsIPUpdateOne) SetDeputationOfficeName(s string) *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.SetDeputationOfficeName(s)
	return eaiuo
}

// SetNillableDeputationOfficeName sets the "DeputationOfficeName" field if the given value is not nil.
func (eaiuo *ExamApplicationsIPUpdateOne) SetNillableDeputationOfficeName(s *string) *ExamApplicationsIPUpdateOne {
	if s != nil {
		eaiuo.SetDeputationOfficeName(*s)
	}
	return eaiuo
}

// ClearDeputationOfficeName clears the value of the "DeputationOfficeName" field.
func (eaiuo *ExamApplicationsIPUpdateOne) ClearDeputationOfficeName() *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.ClearDeputationOfficeName()
	return eaiuo
}

// SetDeputationControllingOfficeID sets the "DeputationControllingOfficeID" field.
func (eaiuo *ExamApplicationsIPUpdateOne) SetDeputationControllingOfficeID(s string) *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.SetDeputationControllingOfficeID(s)
	return eaiuo
}

// SetNillableDeputationControllingOfficeID sets the "DeputationControllingOfficeID" field if the given value is not nil.
func (eaiuo *ExamApplicationsIPUpdateOne) SetNillableDeputationControllingOfficeID(s *string) *ExamApplicationsIPUpdateOne {
	if s != nil {
		eaiuo.SetDeputationControllingOfficeID(*s)
	}
	return eaiuo
}

// ClearDeputationControllingOfficeID clears the value of the "DeputationControllingOfficeID" field.
func (eaiuo *ExamApplicationsIPUpdateOne) ClearDeputationControllingOfficeID() *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.ClearDeputationControllingOfficeID()
	return eaiuo
}

// SetDeputationControllingOfficeName sets the "DeputationControllingOfficeName" field.
func (eaiuo *ExamApplicationsIPUpdateOne) SetDeputationControllingOfficeName(s string) *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.SetDeputationControllingOfficeName(s)
	return eaiuo
}

// SetNillableDeputationControllingOfficeName sets the "DeputationControllingOfficeName" field if the given value is not nil.
func (eaiuo *ExamApplicationsIPUpdateOne) SetNillableDeputationControllingOfficeName(s *string) *ExamApplicationsIPUpdateOne {
	if s != nil {
		eaiuo.SetDeputationControllingOfficeName(*s)
	}
	return eaiuo
}

// ClearDeputationControllingOfficeName clears the value of the "DeputationControllingOfficeName" field.
func (eaiuo *ExamApplicationsIPUpdateOne) ClearDeputationControllingOfficeName() *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.ClearDeputationControllingOfficeName()
	return eaiuo
}

// SetControllingOfficeFacilityID sets the "ControllingOfficeFacilityID" field.
func (eaiuo *ExamApplicationsIPUpdateOne) SetControllingOfficeFacilityID(s string) *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.SetControllingOfficeFacilityID(s)
	return eaiuo
}

// SetNillableControllingOfficeFacilityID sets the "ControllingOfficeFacilityID" field if the given value is not nil.
func (eaiuo *ExamApplicationsIPUpdateOne) SetNillableControllingOfficeFacilityID(s *string) *ExamApplicationsIPUpdateOne {
	if s != nil {
		eaiuo.SetControllingOfficeFacilityID(*s)
	}
	return eaiuo
}

// ClearControllingOfficeFacilityID clears the value of the "ControllingOfficeFacilityID" field.
func (eaiuo *ExamApplicationsIPUpdateOne) ClearControllingOfficeFacilityID() *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.ClearControllingOfficeFacilityID()
	return eaiuo
}

// SetControllingOfficeName sets the "ControllingOfficeName" field.
func (eaiuo *ExamApplicationsIPUpdateOne) SetControllingOfficeName(s string) *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.SetControllingOfficeName(s)
	return eaiuo
}

// SetNillableControllingOfficeName sets the "ControllingOfficeName" field if the given value is not nil.
func (eaiuo *ExamApplicationsIPUpdateOne) SetNillableControllingOfficeName(s *string) *ExamApplicationsIPUpdateOne {
	if s != nil {
		eaiuo.SetControllingOfficeName(*s)
	}
	return eaiuo
}

// ClearControllingOfficeName clears the value of the "ControllingOfficeName" field.
func (eaiuo *ExamApplicationsIPUpdateOne) ClearControllingOfficeName() *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.ClearControllingOfficeName()
	return eaiuo
}

// SetNodalOfficeFacilityID sets the "NodalOfficeFacilityID" field.
func (eaiuo *ExamApplicationsIPUpdateOne) SetNodalOfficeFacilityID(s string) *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.SetNodalOfficeFacilityID(s)
	return eaiuo
}

// SetNillableNodalOfficeFacilityID sets the "NodalOfficeFacilityID" field if the given value is not nil.
func (eaiuo *ExamApplicationsIPUpdateOne) SetNillableNodalOfficeFacilityID(s *string) *ExamApplicationsIPUpdateOne {
	if s != nil {
		eaiuo.SetNodalOfficeFacilityID(*s)
	}
	return eaiuo
}

// ClearNodalOfficeFacilityID clears the value of the "NodalOfficeFacilityID" field.
func (eaiuo *ExamApplicationsIPUpdateOne) ClearNodalOfficeFacilityID() *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.ClearNodalOfficeFacilityID()
	return eaiuo
}

// SetNodalOfficeName sets the "NodalOfficeName" field.
func (eaiuo *ExamApplicationsIPUpdateOne) SetNodalOfficeName(s string) *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.SetNodalOfficeName(s)
	return eaiuo
}

// SetNillableNodalOfficeName sets the "NodalOfficeName" field if the given value is not nil.
func (eaiuo *ExamApplicationsIPUpdateOne) SetNillableNodalOfficeName(s *string) *ExamApplicationsIPUpdateOne {
	if s != nil {
		eaiuo.SetNodalOfficeName(*s)
	}
	return eaiuo
}

// ClearNodalOfficeName clears the value of the "NodalOfficeName" field.
func (eaiuo *ExamApplicationsIPUpdateOne) ClearNodalOfficeName() *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.ClearNodalOfficeName()
	return eaiuo
}

// SetExamCityCenterCode sets the "ExamCityCenterCode" field.
func (eaiuo *ExamApplicationsIPUpdateOne) SetExamCityCenterCode(i int32) *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.SetExamCityCenterCode(i)
	return eaiuo
}

// SetNillableExamCityCenterCode sets the "ExamCityCenterCode" field if the given value is not nil.
func (eaiuo *ExamApplicationsIPUpdateOne) SetNillableExamCityCenterCode(i *int32) *ExamApplicationsIPUpdateOne {
	if i != nil {
		eaiuo.SetExamCityCenterCode(*i)
	}
	return eaiuo
}

// ClearExamCityCenterCode clears the value of the "ExamCityCenterCode" field.
func (eaiuo *ExamApplicationsIPUpdateOne) ClearExamCityCenterCode() *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.ClearExamCityCenterCode()
	return eaiuo
}

// SetCenterFacilityId sets the "CenterFacilityId" field.
func (eaiuo *ExamApplicationsIPUpdateOne) SetCenterFacilityId(s string) *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.SetCenterFacilityId(s)
	return eaiuo
}

// SetNillableCenterFacilityId sets the "CenterFacilityId" field if the given value is not nil.
func (eaiuo *ExamApplicationsIPUpdateOne) SetNillableCenterFacilityId(s *string) *ExamApplicationsIPUpdateOne {
	if s != nil {
		eaiuo.SetCenterFacilityId(*s)
	}
	return eaiuo
}

// ClearCenterFacilityId clears the value of the "CenterFacilityId" field.
func (eaiuo *ExamApplicationsIPUpdateOne) ClearCenterFacilityId() *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.ClearCenterFacilityId()
	return eaiuo
}

// SetCentrePreference sets the "CentrePreference" field.
func (eaiuo *ExamApplicationsIPUpdateOne) SetCentrePreference(s string) *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.SetCentrePreference(s)
	return eaiuo
}

// SetNillableCentrePreference sets the "CentrePreference" field if the given value is not nil.
func (eaiuo *ExamApplicationsIPUpdateOne) SetNillableCentrePreference(s *string) *ExamApplicationsIPUpdateOne {
	if s != nil {
		eaiuo.SetCentrePreference(*s)
	}
	return eaiuo
}

// ClearCentrePreference clears the value of the "CentrePreference" field.
func (eaiuo *ExamApplicationsIPUpdateOne) ClearCentrePreference() *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.ClearCentrePreference()
	return eaiuo
}

// SetSignature sets the "Signature" field.
func (eaiuo *ExamApplicationsIPUpdateOne) SetSignature(s string) *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.SetSignature(s)
	return eaiuo
}

// SetNillableSignature sets the "Signature" field if the given value is not nil.
func (eaiuo *ExamApplicationsIPUpdateOne) SetNillableSignature(s *string) *ExamApplicationsIPUpdateOne {
	if s != nil {
		eaiuo.SetSignature(*s)
	}
	return eaiuo
}

// ClearSignature clears the value of the "Signature" field.
func (eaiuo *ExamApplicationsIPUpdateOne) ClearSignature() *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.ClearSignature()
	return eaiuo
}

// SetPhoto sets the "Photo" field.
func (eaiuo *ExamApplicationsIPUpdateOne) SetPhoto(s string) *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.SetPhoto(s)
	return eaiuo
}

// SetNillablePhoto sets the "Photo" field if the given value is not nil.
func (eaiuo *ExamApplicationsIPUpdateOne) SetNillablePhoto(s *string) *ExamApplicationsIPUpdateOne {
	if s != nil {
		eaiuo.SetPhoto(*s)
	}
	return eaiuo
}

// ClearPhoto clears the value of the "Photo" field.
func (eaiuo *ExamApplicationsIPUpdateOne) ClearPhoto() *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.ClearPhoto()
	return eaiuo
}

// SetSignaturePath sets the "SignaturePath" field.
func (eaiuo *ExamApplicationsIPUpdateOne) SetSignaturePath(s string) *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.SetSignaturePath(s)
	return eaiuo
}

// SetNillableSignaturePath sets the "SignaturePath" field if the given value is not nil.
func (eaiuo *ExamApplicationsIPUpdateOne) SetNillableSignaturePath(s *string) *ExamApplicationsIPUpdateOne {
	if s != nil {
		eaiuo.SetSignaturePath(*s)
	}
	return eaiuo
}

// ClearSignaturePath clears the value of the "SignaturePath" field.
func (eaiuo *ExamApplicationsIPUpdateOne) ClearSignaturePath() *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.ClearSignaturePath()
	return eaiuo
}

// SetPhotoPath sets the "PhotoPath" field.
func (eaiuo *ExamApplicationsIPUpdateOne) SetPhotoPath(s string) *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.SetPhotoPath(s)
	return eaiuo
}

// SetNillablePhotoPath sets the "PhotoPath" field if the given value is not nil.
func (eaiuo *ExamApplicationsIPUpdateOne) SetNillablePhotoPath(s *string) *ExamApplicationsIPUpdateOne {
	if s != nil {
		eaiuo.SetPhotoPath(*s)
	}
	return eaiuo
}

// ClearPhotoPath clears the value of the "PhotoPath" field.
func (eaiuo *ExamApplicationsIPUpdateOne) ClearPhotoPath() *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.ClearPhotoPath()
	return eaiuo
}

// SetCandidatePhoto sets the "CandidatePhoto" field.
func (eaiuo *ExamApplicationsIPUpdateOne) SetCandidatePhoto(b []byte) *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.SetCandidatePhoto(b)
	return eaiuo
}

// ClearCandidatePhoto clears the value of the "CandidatePhoto" field.
func (eaiuo *ExamApplicationsIPUpdateOne) ClearCandidatePhoto() *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.ClearCandidatePhoto()
	return eaiuo
}

// SetCandidateSignature sets the "CandidateSignature" field.
func (eaiuo *ExamApplicationsIPUpdateOne) SetCandidateSignature(b []byte) *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.SetCandidateSignature(b)
	return eaiuo
}

// ClearCandidateSignature clears the value of the "CandidateSignature" field.
func (eaiuo *ExamApplicationsIPUpdateOne) ClearCandidateSignature() *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.ClearCandidateSignature()
	return eaiuo
}

// SetTempHallTicket sets the "TempHallTicket" field.
func (eaiuo *ExamApplicationsIPUpdateOne) SetTempHallTicket(s string) *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.SetTempHallTicket(s)
	return eaiuo
}

// SetNillableTempHallTicket sets the "TempHallTicket" field if the given value is not nil.
func (eaiuo *ExamApplicationsIPUpdateOne) SetNillableTempHallTicket(s *string) *ExamApplicationsIPUpdateOne {
	if s != nil {
		eaiuo.SetTempHallTicket(*s)
	}
	return eaiuo
}

// ClearTempHallTicket clears the value of the "TempHallTicket" field.
func (eaiuo *ExamApplicationsIPUpdateOne) ClearTempHallTicket() *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.ClearTempHallTicket()
	return eaiuo
}

// SetCandidateRemarks sets the "CandidateRemarks" field.
func (eaiuo *ExamApplicationsIPUpdateOne) SetCandidateRemarks(s string) *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.SetCandidateRemarks(s)
	return eaiuo
}

// SetNillableCandidateRemarks sets the "CandidateRemarks" field if the given value is not nil.
func (eaiuo *ExamApplicationsIPUpdateOne) SetNillableCandidateRemarks(s *string) *ExamApplicationsIPUpdateOne {
	if s != nil {
		eaiuo.SetCandidateRemarks(*s)
	}
	return eaiuo
}

// ClearCandidateRemarks clears the value of the "CandidateRemarks" field.
func (eaiuo *ExamApplicationsIPUpdateOne) ClearCandidateRemarks() *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.ClearCandidateRemarks()
	return eaiuo
}

// SetVAGeneralRemarks sets the "VAGeneralRemarks" field.
func (eaiuo *ExamApplicationsIPUpdateOne) SetVAGeneralRemarks(s string) *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.SetVAGeneralRemarks(s)
	return eaiuo
}

// SetNillableVAGeneralRemarks sets the "VAGeneralRemarks" field if the given value is not nil.
func (eaiuo *ExamApplicationsIPUpdateOne) SetNillableVAGeneralRemarks(s *string) *ExamApplicationsIPUpdateOne {
	if s != nil {
		eaiuo.SetVAGeneralRemarks(*s)
	}
	return eaiuo
}

// ClearVAGeneralRemarks clears the value of the "VAGeneralRemarks" field.
func (eaiuo *ExamApplicationsIPUpdateOne) ClearVAGeneralRemarks() *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.ClearVAGeneralRemarks()
	return eaiuo
}

// SetCAGeneralRemarks sets the "CAGeneralRemarks" field.
func (eaiuo *ExamApplicationsIPUpdateOne) SetCAGeneralRemarks(s string) *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.SetCAGeneralRemarks(s)
	return eaiuo
}

// SetNillableCAGeneralRemarks sets the "CAGeneralRemarks" field if the given value is not nil.
func (eaiuo *ExamApplicationsIPUpdateOne) SetNillableCAGeneralRemarks(s *string) *ExamApplicationsIPUpdateOne {
	if s != nil {
		eaiuo.SetCAGeneralRemarks(*s)
	}
	return eaiuo
}

// ClearCAGeneralRemarks clears the value of the "CAGeneralRemarks" field.
func (eaiuo *ExamApplicationsIPUpdateOne) ClearCAGeneralRemarks() *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.ClearCAGeneralRemarks()
	return eaiuo
}

// SetNAGeneralRemarks sets the "NAGeneralRemarks" field.
func (eaiuo *ExamApplicationsIPUpdateOne) SetNAGeneralRemarks(s string) *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.SetNAGeneralRemarks(s)
	return eaiuo
}

// SetNillableNAGeneralRemarks sets the "NAGeneralRemarks" field if the given value is not nil.
func (eaiuo *ExamApplicationsIPUpdateOne) SetNillableNAGeneralRemarks(s *string) *ExamApplicationsIPUpdateOne {
	if s != nil {
		eaiuo.SetNAGeneralRemarks(*s)
	}
	return eaiuo
}

// ClearNAGeneralRemarks clears the value of the "NAGeneralRemarks" field.
func (eaiuo *ExamApplicationsIPUpdateOne) ClearNAGeneralRemarks() *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.ClearNAGeneralRemarks()
	return eaiuo
}

// SetApplicationStatus sets the "ApplicationStatus" field.
func (eaiuo *ExamApplicationsIPUpdateOne) SetApplicationStatus(s string) *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.SetApplicationStatus(s)
	return eaiuo
}

// SetNillableApplicationStatus sets the "ApplicationStatus" field if the given value is not nil.
func (eaiuo *ExamApplicationsIPUpdateOne) SetNillableApplicationStatus(s *string) *ExamApplicationsIPUpdateOne {
	if s != nil {
		eaiuo.SetApplicationStatus(*s)
	}
	return eaiuo
}

// ClearApplicationStatus clears the value of the "ApplicationStatus" field.
func (eaiuo *ExamApplicationsIPUpdateOne) ClearApplicationStatus() *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.ClearApplicationStatus()
	return eaiuo
}

// SetStatus sets the "Status" field.
func (eaiuo *ExamApplicationsIPUpdateOne) SetStatus(s string) *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.SetStatus(s)
	return eaiuo
}

// SetNillableStatus sets the "Status" field if the given value is not nil.
func (eaiuo *ExamApplicationsIPUpdateOne) SetNillableStatus(s *string) *ExamApplicationsIPUpdateOne {
	if s != nil {
		eaiuo.SetStatus(*s)
	}
	return eaiuo
}

// ClearStatus clears the value of the "Status" field.
func (eaiuo *ExamApplicationsIPUpdateOne) ClearStatus() *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.ClearStatus()
	return eaiuo
}

// SetVAUserId sets the "VA_UserId" field.
func (eaiuo *ExamApplicationsIPUpdateOne) SetVAUserId(i int32) *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.ResetVAUserId()
	eaiuo.mutation.SetVAUserId(i)
	return eaiuo
}

// SetNillableVAUserId sets the "VA_UserId" field if the given value is not nil.
func (eaiuo *ExamApplicationsIPUpdateOne) SetNillableVAUserId(i *int32) *ExamApplicationsIPUpdateOne {
	if i != nil {
		eaiuo.SetVAUserId(*i)
	}
	return eaiuo
}

// AddVAUserId adds i to the "VA_UserId" field.
func (eaiuo *ExamApplicationsIPUpdateOne) AddVAUserId(i int32) *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.AddVAUserId(i)
	return eaiuo
}

// ClearVAUserId clears the value of the "VA_UserId" field.
func (eaiuo *ExamApplicationsIPUpdateOne) ClearVAUserId() *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.ClearVAUserId()
	return eaiuo
}

// SetVAUserName sets the "VA_UserName" field.
func (eaiuo *ExamApplicationsIPUpdateOne) SetVAUserName(s string) *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.SetVAUserName(s)
	return eaiuo
}

// SetNillableVAUserName sets the "VA_UserName" field if the given value is not nil.
func (eaiuo *ExamApplicationsIPUpdateOne) SetNillableVAUserName(s *string) *ExamApplicationsIPUpdateOne {
	if s != nil {
		eaiuo.SetVAUserName(*s)
	}
	return eaiuo
}

// ClearVAUserName clears the value of the "VA_UserName" field.
func (eaiuo *ExamApplicationsIPUpdateOne) ClearVAUserName() *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.ClearVAUserName()
	return eaiuo
}

// SetVAEmployeeID sets the "VA_EmployeeID" field.
func (eaiuo *ExamApplicationsIPUpdateOne) SetVAEmployeeID(s string) *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.SetVAEmployeeID(s)
	return eaiuo
}

// SetNillableVAEmployeeID sets the "VA_EmployeeID" field if the given value is not nil.
func (eaiuo *ExamApplicationsIPUpdateOne) SetNillableVAEmployeeID(s *string) *ExamApplicationsIPUpdateOne {
	if s != nil {
		eaiuo.SetVAEmployeeID(*s)
	}
	return eaiuo
}

// ClearVAEmployeeID clears the value of the "VA_EmployeeID" field.
func (eaiuo *ExamApplicationsIPUpdateOne) ClearVAEmployeeID() *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.ClearVAEmployeeID()
	return eaiuo
}

// SetVAEmployeeDesignation sets the "VA_EmployeeDesignation" field.
func (eaiuo *ExamApplicationsIPUpdateOne) SetVAEmployeeDesignation(s string) *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.SetVAEmployeeDesignation(s)
	return eaiuo
}

// SetNillableVAEmployeeDesignation sets the "VA_EmployeeDesignation" field if the given value is not nil.
func (eaiuo *ExamApplicationsIPUpdateOne) SetNillableVAEmployeeDesignation(s *string) *ExamApplicationsIPUpdateOne {
	if s != nil {
		eaiuo.SetVAEmployeeDesignation(*s)
	}
	return eaiuo
}

// ClearVAEmployeeDesignation clears the value of the "VA_EmployeeDesignation" field.
func (eaiuo *ExamApplicationsIPUpdateOne) ClearVAEmployeeDesignation() *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.ClearVAEmployeeDesignation()
	return eaiuo
}

// SetVARemarks sets the "VA_Remarks" field.
func (eaiuo *ExamApplicationsIPUpdateOne) SetVARemarks(s string) *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.SetVARemarks(s)
	return eaiuo
}

// SetNillableVARemarks sets the "VA_Remarks" field if the given value is not nil.
func (eaiuo *ExamApplicationsIPUpdateOne) SetNillableVARemarks(s *string) *ExamApplicationsIPUpdateOne {
	if s != nil {
		eaiuo.SetVARemarks(*s)
	}
	return eaiuo
}

// ClearVARemarks clears the value of the "VA_Remarks" field.
func (eaiuo *ExamApplicationsIPUpdateOne) ClearVARemarks() *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.ClearVARemarks()
	return eaiuo
}

// SetVADate sets the "VA_Date" field.
func (eaiuo *ExamApplicationsIPUpdateOne) SetVADate(t time.Time) *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.SetVADate(t)
	return eaiuo
}

// SetNillableVADate sets the "VA_Date" field if the given value is not nil.
func (eaiuo *ExamApplicationsIPUpdateOne) SetNillableVADate(t *time.Time) *ExamApplicationsIPUpdateOne {
	if t != nil {
		eaiuo.SetVADate(*t)
	}
	return eaiuo
}

// ClearVADate clears the value of the "VA_Date" field.
func (eaiuo *ExamApplicationsIPUpdateOne) ClearVADate() *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.ClearVADate()
	return eaiuo
}

// SetCAUserId sets the "CA_UserId" field.
func (eaiuo *ExamApplicationsIPUpdateOne) SetCAUserId(i int32) *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.ResetCAUserId()
	eaiuo.mutation.SetCAUserId(i)
	return eaiuo
}

// SetNillableCAUserId sets the "CA_UserId" field if the given value is not nil.
func (eaiuo *ExamApplicationsIPUpdateOne) SetNillableCAUserId(i *int32) *ExamApplicationsIPUpdateOne {
	if i != nil {
		eaiuo.SetCAUserId(*i)
	}
	return eaiuo
}

// AddCAUserId adds i to the "CA_UserId" field.
func (eaiuo *ExamApplicationsIPUpdateOne) AddCAUserId(i int32) *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.AddCAUserId(i)
	return eaiuo
}

// ClearCAUserId clears the value of the "CA_UserId" field.
func (eaiuo *ExamApplicationsIPUpdateOne) ClearCAUserId() *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.ClearCAUserId()
	return eaiuo
}

// SetCAUserName sets the "CA_UserName" field.
func (eaiuo *ExamApplicationsIPUpdateOne) SetCAUserName(s string) *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.SetCAUserName(s)
	return eaiuo
}

// SetNillableCAUserName sets the "CA_UserName" field if the given value is not nil.
func (eaiuo *ExamApplicationsIPUpdateOne) SetNillableCAUserName(s *string) *ExamApplicationsIPUpdateOne {
	if s != nil {
		eaiuo.SetCAUserName(*s)
	}
	return eaiuo
}

// ClearCAUserName clears the value of the "CA_UserName" field.
func (eaiuo *ExamApplicationsIPUpdateOne) ClearCAUserName() *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.ClearCAUserName()
	return eaiuo
}

// SetCAEmployeeID sets the "CA_EmployeeID" field.
func (eaiuo *ExamApplicationsIPUpdateOne) SetCAEmployeeID(s string) *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.SetCAEmployeeID(s)
	return eaiuo
}

// SetNillableCAEmployeeID sets the "CA_EmployeeID" field if the given value is not nil.
func (eaiuo *ExamApplicationsIPUpdateOne) SetNillableCAEmployeeID(s *string) *ExamApplicationsIPUpdateOne {
	if s != nil {
		eaiuo.SetCAEmployeeID(*s)
	}
	return eaiuo
}

// ClearCAEmployeeID clears the value of the "CA_EmployeeID" field.
func (eaiuo *ExamApplicationsIPUpdateOne) ClearCAEmployeeID() *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.ClearCAEmployeeID()
	return eaiuo
}

// SetCAEmployeeDesignation sets the "CA_EmployeeDesignation" field.
func (eaiuo *ExamApplicationsIPUpdateOne) SetCAEmployeeDesignation(s string) *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.SetCAEmployeeDesignation(s)
	return eaiuo
}

// SetNillableCAEmployeeDesignation sets the "CA_EmployeeDesignation" field if the given value is not nil.
func (eaiuo *ExamApplicationsIPUpdateOne) SetNillableCAEmployeeDesignation(s *string) *ExamApplicationsIPUpdateOne {
	if s != nil {
		eaiuo.SetCAEmployeeDesignation(*s)
	}
	return eaiuo
}

// ClearCAEmployeeDesignation clears the value of the "CA_EmployeeDesignation" field.
func (eaiuo *ExamApplicationsIPUpdateOne) ClearCAEmployeeDesignation() *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.ClearCAEmployeeDesignation()
	return eaiuo
}

// SetCARemarks sets the "CA_Remarks" field.
func (eaiuo *ExamApplicationsIPUpdateOne) SetCARemarks(s string) *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.SetCARemarks(s)
	return eaiuo
}

// SetNillableCARemarks sets the "CA_Remarks" field if the given value is not nil.
func (eaiuo *ExamApplicationsIPUpdateOne) SetNillableCARemarks(s *string) *ExamApplicationsIPUpdateOne {
	if s != nil {
		eaiuo.SetCARemarks(*s)
	}
	return eaiuo
}

// ClearCARemarks clears the value of the "CA_Remarks" field.
func (eaiuo *ExamApplicationsIPUpdateOne) ClearCARemarks() *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.ClearCARemarks()
	return eaiuo
}

// SetCADate sets the "CA_Date" field.
func (eaiuo *ExamApplicationsIPUpdateOne) SetCADate(t time.Time) *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.SetCADate(t)
	return eaiuo
}

// SetNillableCADate sets the "CA_Date" field if the given value is not nil.
func (eaiuo *ExamApplicationsIPUpdateOne) SetNillableCADate(t *time.Time) *ExamApplicationsIPUpdateOne {
	if t != nil {
		eaiuo.SetCADate(*t)
	}
	return eaiuo
}

// ClearCADate clears the value of the "CA_Date" field.
func (eaiuo *ExamApplicationsIPUpdateOne) ClearCADate() *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.ClearCADate()
	return eaiuo
}

// SetNAUserId sets the "NA_UserId" field.
func (eaiuo *ExamApplicationsIPUpdateOne) SetNAUserId(i int32) *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.ResetNAUserId()
	eaiuo.mutation.SetNAUserId(i)
	return eaiuo
}

// SetNillableNAUserId sets the "NA_UserId" field if the given value is not nil.
func (eaiuo *ExamApplicationsIPUpdateOne) SetNillableNAUserId(i *int32) *ExamApplicationsIPUpdateOne {
	if i != nil {
		eaiuo.SetNAUserId(*i)
	}
	return eaiuo
}

// AddNAUserId adds i to the "NA_UserId" field.
func (eaiuo *ExamApplicationsIPUpdateOne) AddNAUserId(i int32) *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.AddNAUserId(i)
	return eaiuo
}

// ClearNAUserId clears the value of the "NA_UserId" field.
func (eaiuo *ExamApplicationsIPUpdateOne) ClearNAUserId() *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.ClearNAUserId()
	return eaiuo
}

// SetNAUserName sets the "NA_UserName" field.
func (eaiuo *ExamApplicationsIPUpdateOne) SetNAUserName(s string) *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.SetNAUserName(s)
	return eaiuo
}

// SetNillableNAUserName sets the "NA_UserName" field if the given value is not nil.
func (eaiuo *ExamApplicationsIPUpdateOne) SetNillableNAUserName(s *string) *ExamApplicationsIPUpdateOne {
	if s != nil {
		eaiuo.SetNAUserName(*s)
	}
	return eaiuo
}

// ClearNAUserName clears the value of the "NA_UserName" field.
func (eaiuo *ExamApplicationsIPUpdateOne) ClearNAUserName() *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.ClearNAUserName()
	return eaiuo
}

// SetNAEmployeeID sets the "NA_EmployeeID" field.
func (eaiuo *ExamApplicationsIPUpdateOne) SetNAEmployeeID(s string) *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.SetNAEmployeeID(s)
	return eaiuo
}

// SetNillableNAEmployeeID sets the "NA_EmployeeID" field if the given value is not nil.
func (eaiuo *ExamApplicationsIPUpdateOne) SetNillableNAEmployeeID(s *string) *ExamApplicationsIPUpdateOne {
	if s != nil {
		eaiuo.SetNAEmployeeID(*s)
	}
	return eaiuo
}

// ClearNAEmployeeID clears the value of the "NA_EmployeeID" field.
func (eaiuo *ExamApplicationsIPUpdateOne) ClearNAEmployeeID() *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.ClearNAEmployeeID()
	return eaiuo
}

// SetNAEmployeeDesignation sets the "NA_EmployeeDesignation" field.
func (eaiuo *ExamApplicationsIPUpdateOne) SetNAEmployeeDesignation(s string) *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.SetNAEmployeeDesignation(s)
	return eaiuo
}

// SetNillableNAEmployeeDesignation sets the "NA_EmployeeDesignation" field if the given value is not nil.
func (eaiuo *ExamApplicationsIPUpdateOne) SetNillableNAEmployeeDesignation(s *string) *ExamApplicationsIPUpdateOne {
	if s != nil {
		eaiuo.SetNAEmployeeDesignation(*s)
	}
	return eaiuo
}

// ClearNAEmployeeDesignation clears the value of the "NA_EmployeeDesignation" field.
func (eaiuo *ExamApplicationsIPUpdateOne) ClearNAEmployeeDesignation() *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.ClearNAEmployeeDesignation()
	return eaiuo
}

// SetNARemarks sets the "NA_Remarks" field.
func (eaiuo *ExamApplicationsIPUpdateOne) SetNARemarks(s string) *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.SetNARemarks(s)
	return eaiuo
}

// SetNillableNARemarks sets the "NA_Remarks" field if the given value is not nil.
func (eaiuo *ExamApplicationsIPUpdateOne) SetNillableNARemarks(s *string) *ExamApplicationsIPUpdateOne {
	if s != nil {
		eaiuo.SetNARemarks(*s)
	}
	return eaiuo
}

// ClearNARemarks clears the value of the "NA_Remarks" field.
func (eaiuo *ExamApplicationsIPUpdateOne) ClearNARemarks() *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.ClearNARemarks()
	return eaiuo
}

// SetNADate sets the "NA_Date" field.
func (eaiuo *ExamApplicationsIPUpdateOne) SetNADate(t time.Time) *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.SetNADate(t)
	return eaiuo
}

// SetNillableNADate sets the "NA_Date" field if the given value is not nil.
func (eaiuo *ExamApplicationsIPUpdateOne) SetNillableNADate(t *time.Time) *ExamApplicationsIPUpdateOne {
	if t != nil {
		eaiuo.SetNADate(*t)
	}
	return eaiuo
}

// ClearNADate clears the value of the "NA_Date" field.
func (eaiuo *ExamApplicationsIPUpdateOne) ClearNADate() *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.ClearNADate()
	return eaiuo
}

// SetAppliactionRemarks sets the "AppliactionRemarks" field.
func (eaiuo *ExamApplicationsIPUpdateOne) SetAppliactionRemarks(s string) *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.SetAppliactionRemarks(s)
	return eaiuo
}

// SetNillableAppliactionRemarks sets the "AppliactionRemarks" field if the given value is not nil.
func (eaiuo *ExamApplicationsIPUpdateOne) SetNillableAppliactionRemarks(s *string) *ExamApplicationsIPUpdateOne {
	if s != nil {
		eaiuo.SetAppliactionRemarks(*s)
	}
	return eaiuo
}

// ClearAppliactionRemarks clears the value of the "AppliactionRemarks" field.
func (eaiuo *ExamApplicationsIPUpdateOne) ClearAppliactionRemarks() *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.ClearAppliactionRemarks()
	return eaiuo
}

// SetCadrePreferences sets the "CadrePreferences" field.
func (eaiuo *ExamApplicationsIPUpdateOne) SetCadrePreferences(i []interface{}) *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.SetCadrePreferences(i)
	return eaiuo
}

// AppendCadrePreferences appends i to the "CadrePreferences" field.
func (eaiuo *ExamApplicationsIPUpdateOne) AppendCadrePreferences(i []interface{}) *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.AppendCadrePreferences(i)
	return eaiuo
}

// ClearCadrePreferences clears the value of the "CadrePreferences" field.
func (eaiuo *ExamApplicationsIPUpdateOne) ClearCadrePreferences() *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.ClearCadrePreferences()
	return eaiuo
}

// SetCAPreviousRemarks sets the "CAPreviousRemarks" field.
func (eaiuo *ExamApplicationsIPUpdateOne) SetCAPreviousRemarks(s string) *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.SetCAPreviousRemarks(s)
	return eaiuo
}

// SetNillableCAPreviousRemarks sets the "CAPreviousRemarks" field if the given value is not nil.
func (eaiuo *ExamApplicationsIPUpdateOne) SetNillableCAPreviousRemarks(s *string) *ExamApplicationsIPUpdateOne {
	if s != nil {
		eaiuo.SetCAPreviousRemarks(*s)
	}
	return eaiuo
}

// ClearCAPreviousRemarks clears the value of the "CAPreviousRemarks" field.
func (eaiuo *ExamApplicationsIPUpdateOne) ClearCAPreviousRemarks() *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.ClearCAPreviousRemarks()
	return eaiuo
}

// SetPunishmentStatus sets the "PunishmentStatus" field.
func (eaiuo *ExamApplicationsIPUpdateOne) SetPunishmentStatus(b bool) *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.SetPunishmentStatus(b)
	return eaiuo
}

// SetNillablePunishmentStatus sets the "PunishmentStatus" field if the given value is not nil.
func (eaiuo *ExamApplicationsIPUpdateOne) SetNillablePunishmentStatus(b *bool) *ExamApplicationsIPUpdateOne {
	if b != nil {
		eaiuo.SetPunishmentStatus(*b)
	}
	return eaiuo
}

// ClearPunishmentStatus clears the value of the "PunishmentStatus" field.
func (eaiuo *ExamApplicationsIPUpdateOne) ClearPunishmentStatus() *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.ClearPunishmentStatus()
	return eaiuo
}

// SetDisciplinaryCaseStatus sets the "DisciplinaryCaseStatus" field.
func (eaiuo *ExamApplicationsIPUpdateOne) SetDisciplinaryCaseStatus(b bool) *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.SetDisciplinaryCaseStatus(b)
	return eaiuo
}

// SetNillableDisciplinaryCaseStatus sets the "DisciplinaryCaseStatus" field if the given value is not nil.
func (eaiuo *ExamApplicationsIPUpdateOne) SetNillableDisciplinaryCaseStatus(b *bool) *ExamApplicationsIPUpdateOne {
	if b != nil {
		eaiuo.SetDisciplinaryCaseStatus(*b)
	}
	return eaiuo
}

// ClearDisciplinaryCaseStatus clears the value of the "DisciplinaryCaseStatus" field.
func (eaiuo *ExamApplicationsIPUpdateOne) ClearDisciplinaryCaseStatus() *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.ClearDisciplinaryCaseStatus()
	return eaiuo
}

// SetGenerateHallTicketFlag sets the "GenerateHallTicketFlag" field.
func (eaiuo *ExamApplicationsIPUpdateOne) SetGenerateHallTicketFlag(b bool) *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.SetGenerateHallTicketFlag(b)
	return eaiuo
}

// SetNillableGenerateHallTicketFlag sets the "GenerateHallTicketFlag" field if the given value is not nil.
func (eaiuo *ExamApplicationsIPUpdateOne) SetNillableGenerateHallTicketFlag(b *bool) *ExamApplicationsIPUpdateOne {
	if b != nil {
		eaiuo.SetGenerateHallTicketFlag(*b)
	}
	return eaiuo
}

// ClearGenerateHallTicketFlag clears the value of the "GenerateHallTicketFlag" field.
func (eaiuo *ExamApplicationsIPUpdateOne) ClearGenerateHallTicketFlag() *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.ClearGenerateHallTicketFlag()
	return eaiuo
}

// SetHallTicketNumber sets the "HallTicketNumber" field.
func (eaiuo *ExamApplicationsIPUpdateOne) SetHallTicketNumber(s string) *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.SetHallTicketNumber(s)
	return eaiuo
}

// SetNillableHallTicketNumber sets the "HallTicketNumber" field if the given value is not nil.
func (eaiuo *ExamApplicationsIPUpdateOne) SetNillableHallTicketNumber(s *string) *ExamApplicationsIPUpdateOne {
	if s != nil {
		eaiuo.SetHallTicketNumber(*s)
	}
	return eaiuo
}

// ClearHallTicketNumber clears the value of the "HallTicketNumber" field.
func (eaiuo *ExamApplicationsIPUpdateOne) ClearHallTicketNumber() *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.ClearHallTicketNumber()
	return eaiuo
}

// SetHallTicketGeneratedFlag sets the "HallTicketGeneratedFlag" field.
func (eaiuo *ExamApplicationsIPUpdateOne) SetHallTicketGeneratedFlag(b bool) *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.SetHallTicketGeneratedFlag(b)
	return eaiuo
}

// SetNillableHallTicketGeneratedFlag sets the "HallTicketGeneratedFlag" field if the given value is not nil.
func (eaiuo *ExamApplicationsIPUpdateOne) SetNillableHallTicketGeneratedFlag(b *bool) *ExamApplicationsIPUpdateOne {
	if b != nil {
		eaiuo.SetHallTicketGeneratedFlag(*b)
	}
	return eaiuo
}

// ClearHallTicketGeneratedFlag clears the value of the "HallTicketGeneratedFlag" field.
func (eaiuo *ExamApplicationsIPUpdateOne) ClearHallTicketGeneratedFlag() *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.ClearHallTicketGeneratedFlag()
	return eaiuo
}

// SetGenerateHallTicketFlagByNO sets the "GenerateHallTicketFlagByNO" field.
func (eaiuo *ExamApplicationsIPUpdateOne) SetGenerateHallTicketFlagByNO(b bool) *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.SetGenerateHallTicketFlagByNO(b)
	return eaiuo
}

// SetNillableGenerateHallTicketFlagByNO sets the "GenerateHallTicketFlagByNO" field if the given value is not nil.
func (eaiuo *ExamApplicationsIPUpdateOne) SetNillableGenerateHallTicketFlagByNO(b *bool) *ExamApplicationsIPUpdateOne {
	if b != nil {
		eaiuo.SetGenerateHallTicketFlagByNO(*b)
	}
	return eaiuo
}

// ClearGenerateHallTicketFlagByNO clears the value of the "GenerateHallTicketFlagByNO" field.
func (eaiuo *ExamApplicationsIPUpdateOne) ClearGenerateHallTicketFlagByNO() *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.ClearGenerateHallTicketFlagByNO()
	return eaiuo
}

// SetHallTicketGeneratedDate sets the "HallTicketGeneratedDate" field.
func (eaiuo *ExamApplicationsIPUpdateOne) SetHallTicketGeneratedDate(t time.Time) *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.SetHallTicketGeneratedDate(t)
	return eaiuo
}

// SetNillableHallTicketGeneratedDate sets the "HallTicketGeneratedDate" field if the given value is not nil.
func (eaiuo *ExamApplicationsIPUpdateOne) SetNillableHallTicketGeneratedDate(t *time.Time) *ExamApplicationsIPUpdateOne {
	if t != nil {
		eaiuo.SetHallTicketGeneratedDate(*t)
	}
	return eaiuo
}

// ClearHallTicketGeneratedDate clears the value of the "HallTicketGeneratedDate" field.
func (eaiuo *ExamApplicationsIPUpdateOne) ClearHallTicketGeneratedDate() *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.ClearHallTicketGeneratedDate()
	return eaiuo
}

// SetTemporaryHallTicket sets the "TemporaryHallTicket" field.
func (eaiuo *ExamApplicationsIPUpdateOne) SetTemporaryHallTicket(s string) *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.SetTemporaryHallTicket(s)
	return eaiuo
}

// SetNillableTemporaryHallTicket sets the "TemporaryHallTicket" field if the given value is not nil.
func (eaiuo *ExamApplicationsIPUpdateOne) SetNillableTemporaryHallTicket(s *string) *ExamApplicationsIPUpdateOne {
	if s != nil {
		eaiuo.SetTemporaryHallTicket(*s)
	}
	return eaiuo
}

// ClearTemporaryHallTicket clears the value of the "TemporaryHallTicket" field.
func (eaiuo *ExamApplicationsIPUpdateOne) ClearTemporaryHallTicket() *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.ClearTemporaryHallTicket()
	return eaiuo
}

// SetOptionUsed sets the "OptionUsed" field.
func (eaiuo *ExamApplicationsIPUpdateOne) SetOptionUsed(s string) *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.SetOptionUsed(s)
	return eaiuo
}

// SetNillableOptionUsed sets the "OptionUsed" field if the given value is not nil.
func (eaiuo *ExamApplicationsIPUpdateOne) SetNillableOptionUsed(s *string) *ExamApplicationsIPUpdateOne {
	if s != nil {
		eaiuo.SetOptionUsed(*s)
	}
	return eaiuo
}

// ClearOptionUsed clears the value of the "OptionUsed" field.
func (eaiuo *ExamApplicationsIPUpdateOne) ClearOptionUsed() *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.ClearOptionUsed()
	return eaiuo
}

// SetRemarks sets the "Remarks" field.
func (eaiuo *ExamApplicationsIPUpdateOne) SetRemarks(s string) *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.SetRemarks(s)
	return eaiuo
}

// SetNillableRemarks sets the "Remarks" field if the given value is not nil.
func (eaiuo *ExamApplicationsIPUpdateOne) SetNillableRemarks(s *string) *ExamApplicationsIPUpdateOne {
	if s != nil {
		eaiuo.SetRemarks(*s)
	}
	return eaiuo
}

// ClearRemarks clears the value of the "Remarks" field.
func (eaiuo *ExamApplicationsIPUpdateOne) ClearRemarks() *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.ClearRemarks()
	return eaiuo
}

// SetCadre sets the "Cadre" field.
func (eaiuo *ExamApplicationsIPUpdateOne) SetCadre(s string) *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.SetCadre(s)
	return eaiuo
}

// SetNillableCadre sets the "Cadre" field if the given value is not nil.
func (eaiuo *ExamApplicationsIPUpdateOne) SetNillableCadre(s *string) *ExamApplicationsIPUpdateOne {
	if s != nil {
		eaiuo.SetCadre(*s)
	}
	return eaiuo
}

// ClearCadre clears the value of the "Cadre" field.
func (eaiuo *ExamApplicationsIPUpdateOne) ClearCadre() *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.ClearCadre()
	return eaiuo
}

// SetEmployeePost sets the "EmployeePost" field.
func (eaiuo *ExamApplicationsIPUpdateOne) SetEmployeePost(s string) *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.SetEmployeePost(s)
	return eaiuo
}

// SetNillableEmployeePost sets the "EmployeePost" field if the given value is not nil.
func (eaiuo *ExamApplicationsIPUpdateOne) SetNillableEmployeePost(s *string) *ExamApplicationsIPUpdateOne {
	if s != nil {
		eaiuo.SetEmployeePost(*s)
	}
	return eaiuo
}

// ClearEmployeePost clears the value of the "EmployeePost" field.
func (eaiuo *ExamApplicationsIPUpdateOne) ClearEmployeePost() *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.ClearEmployeePost()
	return eaiuo
}

// SetDOJInEligiblePost sets the "DOJInEligiblePost" field.
func (eaiuo *ExamApplicationsIPUpdateOne) SetDOJInEligiblePost(s string) *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.SetDOJInEligiblePost(s)
	return eaiuo
}

// SetNillableDOJInEligiblePost sets the "DOJInEligiblePost" field if the given value is not nil.
func (eaiuo *ExamApplicationsIPUpdateOne) SetNillableDOJInEligiblePost(s *string) *ExamApplicationsIPUpdateOne {
	if s != nil {
		eaiuo.SetDOJInEligiblePost(*s)
	}
	return eaiuo
}

// ClearDOJInEligiblePost clears the value of the "DOJInEligiblePost" field.
func (eaiuo *ExamApplicationsIPUpdateOne) ClearDOJInEligiblePost() *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.ClearDOJInEligiblePost()
	return eaiuo
}

// SetDivisionPreferences sets the "DivisionPreferences" field.
func (eaiuo *ExamApplicationsIPUpdateOne) SetDivisionPreferences(i []interface{}) *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.SetDivisionPreferences(i)
	return eaiuo
}

// AppendDivisionPreferences appends i to the "DivisionPreferences" field.
func (eaiuo *ExamApplicationsIPUpdateOne) AppendDivisionPreferences(i []interface{}) *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.AppendDivisionPreferences(i)
	return eaiuo
}

// ClearDivisionPreferences clears the value of the "DivisionPreferences" field.
func (eaiuo *ExamApplicationsIPUpdateOne) ClearDivisionPreferences() *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.ClearDivisionPreferences()
	return eaiuo
}

// SetRoleUserCode sets the "RoleUserCode" field.
func (eaiuo *ExamApplicationsIPUpdateOne) SetRoleUserCode(i int32) *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.SetRoleUserCode(i)
	return eaiuo
}

// SetNillableRoleUserCode sets the "RoleUserCode" field if the given value is not nil.
func (eaiuo *ExamApplicationsIPUpdateOne) SetNillableRoleUserCode(i *int32) *ExamApplicationsIPUpdateOne {
	if i != nil {
		eaiuo.SetRoleUserCode(*i)
	}
	return eaiuo
}

// ClearRoleUserCode clears the value of the "RoleUserCode" field.
func (eaiuo *ExamApplicationsIPUpdateOne) ClearRoleUserCode() *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.ClearRoleUserCode()
	return eaiuo
}

// SetCircleSID sets the "CircleSID" field.
func (eaiuo *ExamApplicationsIPUpdateOne) SetCircleSID(i int32) *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.SetCircleSID(i)
	return eaiuo
}

// SetNillableCircleSID sets the "CircleSID" field if the given value is not nil.
func (eaiuo *ExamApplicationsIPUpdateOne) SetNillableCircleSID(i *int32) *ExamApplicationsIPUpdateOne {
	if i != nil {
		eaiuo.SetCircleSID(*i)
	}
	return eaiuo
}

// ClearCircleSID clears the value of the "CircleSID" field.
func (eaiuo *ExamApplicationsIPUpdateOne) ClearCircleSID() *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.ClearCircleSID()
	return eaiuo
}

// SetFacilityName sets the "FacilityName" field.
func (eaiuo *ExamApplicationsIPUpdateOne) SetFacilityName(s string) *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.SetFacilityName(s)
	return eaiuo
}

// SetNillableFacilityName sets the "FacilityName" field if the given value is not nil.
func (eaiuo *ExamApplicationsIPUpdateOne) SetNillableFacilityName(s *string) *ExamApplicationsIPUpdateOne {
	if s != nil {
		eaiuo.SetFacilityName(*s)
	}
	return eaiuo
}

// ClearFacilityName clears the value of the "FacilityName" field.
func (eaiuo *ExamApplicationsIPUpdateOne) ClearFacilityName() *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.ClearFacilityName()
	return eaiuo
}

// SetServiceLength sets the "ServiceLength" field.
func (eaiuo *ExamApplicationsIPUpdateOne) SetServiceLength(i []interface{}) *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.SetServiceLength(i)
	return eaiuo
}

// AppendServiceLength appends i to the "ServiceLength" field.
func (eaiuo *ExamApplicationsIPUpdateOne) AppendServiceLength(i []interface{}) *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.AppendServiceLength(i)
	return eaiuo
}

// ClearServiceLength clears the value of the "ServiceLength" field.
func (eaiuo *ExamApplicationsIPUpdateOne) ClearServiceLength() *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.ClearServiceLength()
	return eaiuo
}

// SetNonQualifyingService sets the "NonQualifyingService" field.
func (eaiuo *ExamApplicationsIPUpdateOne) SetNonQualifyingService(i []interface{}) *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.SetNonQualifyingService(i)
	return eaiuo
}

// AppendNonQualifyingService appends i to the "NonQualifyingService" field.
func (eaiuo *ExamApplicationsIPUpdateOne) AppendNonQualifyingService(i []interface{}) *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.AppendNonQualifyingService(i)
	return eaiuo
}

// ClearNonQualifyingService clears the value of the "NonQualifyingService" field.
func (eaiuo *ExamApplicationsIPUpdateOne) ClearNonQualifyingService() *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.ClearNonQualifyingService()
	return eaiuo
}

// SetDCInPresentCadre sets the "DCInPresentCadre" field.
func (eaiuo *ExamApplicationsIPUpdateOne) SetDCInPresentCadre(s string) *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.SetDCInPresentCadre(s)
	return eaiuo
}

// SetNillableDCInPresentCadre sets the "DCInPresentCadre" field if the given value is not nil.
func (eaiuo *ExamApplicationsIPUpdateOne) SetNillableDCInPresentCadre(s *string) *ExamApplicationsIPUpdateOne {
	if s != nil {
		eaiuo.SetDCInPresentCadre(*s)
	}
	return eaiuo
}

// ClearDCInPresentCadre clears the value of the "DCInPresentCadre" field.
func (eaiuo *ExamApplicationsIPUpdateOne) ClearDCInPresentCadre() *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.ClearDCInPresentCadre()
	return eaiuo
}

// SetCenterId sets the "CenterId" field.
func (eaiuo *ExamApplicationsIPUpdateOne) SetCenterId(i int32) *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.ResetCenterId()
	eaiuo.mutation.SetCenterId(i)
	return eaiuo
}

// SetNillableCenterId sets the "CenterId" field if the given value is not nil.
func (eaiuo *ExamApplicationsIPUpdateOne) SetNillableCenterId(i *int32) *ExamApplicationsIPUpdateOne {
	if i != nil {
		eaiuo.SetCenterId(*i)
	}
	return eaiuo
}

// AddCenterId adds i to the "CenterId" field.
func (eaiuo *ExamApplicationsIPUpdateOne) AddCenterId(i int32) *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.AddCenterId(i)
	return eaiuo
}

// ClearCenterId clears the value of the "CenterId" field.
func (eaiuo *ExamApplicationsIPUpdateOne) ClearCenterId() *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.ClearCenterId()
	return eaiuo
}

// SetCenterCode sets the "CenterCode" field.
func (eaiuo *ExamApplicationsIPUpdateOne) SetCenterCode(i int32) *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.SetCenterCode(i)
	return eaiuo
}

// SetNillableCenterCode sets the "CenterCode" field if the given value is not nil.
func (eaiuo *ExamApplicationsIPUpdateOne) SetNillableCenterCode(i *int32) *ExamApplicationsIPUpdateOne {
	if i != nil {
		eaiuo.SetCenterCode(*i)
	}
	return eaiuo
}

// ClearCenterCode clears the value of the "CenterCode" field.
func (eaiuo *ExamApplicationsIPUpdateOne) ClearCenterCode() *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.ClearCenterCode()
	return eaiuo
}

// SetClaimingQualifyingService sets the "ClaimingQualifyingService" field.
func (eaiuo *ExamApplicationsIPUpdateOne) SetClaimingQualifyingService(s string) *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.SetClaimingQualifyingService(s)
	return eaiuo
}

// SetNillableClaimingQualifyingService sets the "ClaimingQualifyingService" field if the given value is not nil.
func (eaiuo *ExamApplicationsIPUpdateOne) SetNillableClaimingQualifyingService(s *string) *ExamApplicationsIPUpdateOne {
	if s != nil {
		eaiuo.SetClaimingQualifyingService(*s)
	}
	return eaiuo
}

// ClearClaimingQualifyingService clears the value of the "ClaimingQualifyingService" field.
func (eaiuo *ExamApplicationsIPUpdateOne) ClearClaimingQualifyingService() *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.ClearClaimingQualifyingService()
	return eaiuo
}

// SetDeputationOfficePincode sets the "DeputationOfficePincode" field.
func (eaiuo *ExamApplicationsIPUpdateOne) SetDeputationOfficePincode(s string) *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.SetDeputationOfficePincode(s)
	return eaiuo
}

// SetNillableDeputationOfficePincode sets the "DeputationOfficePincode" field if the given value is not nil.
func (eaiuo *ExamApplicationsIPUpdateOne) SetNillableDeputationOfficePincode(s *string) *ExamApplicationsIPUpdateOne {
	if s != nil {
		eaiuo.SetDeputationOfficePincode(*s)
	}
	return eaiuo
}

// ClearDeputationOfficePincode clears the value of the "DeputationOfficePincode" field.
func (eaiuo *ExamApplicationsIPUpdateOne) ClearDeputationOfficePincode() *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.ClearDeputationOfficePincode()
	return eaiuo
}

// SetRecommendedStatus sets the "RecommendedStatus" field.
func (eaiuo *ExamApplicationsIPUpdateOne) SetRecommendedStatus(s string) *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.SetRecommendedStatus(s)
	return eaiuo
}

// SetNillableRecommendedStatus sets the "RecommendedStatus" field if the given value is not nil.
func (eaiuo *ExamApplicationsIPUpdateOne) SetNillableRecommendedStatus(s *string) *ExamApplicationsIPUpdateOne {
	if s != nil {
		eaiuo.SetRecommendedStatus(*s)
	}
	return eaiuo
}

// ClearRecommendedStatus clears the value of the "RecommendedStatus" field.
func (eaiuo *ExamApplicationsIPUpdateOne) ClearRecommendedStatus() *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.ClearRecommendedStatus()
	return eaiuo
}

// SetApplicationWdlDate sets the "ApplicationWdlDate" field.
func (eaiuo *ExamApplicationsIPUpdateOne) SetApplicationWdlDate(t time.Time) *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.SetApplicationWdlDate(t)
	return eaiuo
}

// SetNillableApplicationWdlDate sets the "ApplicationWdlDate" field if the given value is not nil.
func (eaiuo *ExamApplicationsIPUpdateOne) SetNillableApplicationWdlDate(t *time.Time) *ExamApplicationsIPUpdateOne {
	if t != nil {
		eaiuo.SetApplicationWdlDate(*t)
	}
	return eaiuo
}

// ClearApplicationWdlDate clears the value of the "ApplicationWdlDate" field.
func (eaiuo *ExamApplicationsIPUpdateOne) ClearApplicationWdlDate() *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.ClearApplicationWdlDate()
	return eaiuo
}

// SetUpdatedAt sets the "UpdatedAt" field.
func (eaiuo *ExamApplicationsIPUpdateOne) SetUpdatedAt(t time.Time) *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.SetUpdatedAt(t)
	return eaiuo
}

// SetNillableUpdatedAt sets the "UpdatedAt" field if the given value is not nil.
func (eaiuo *ExamApplicationsIPUpdateOne) SetNillableUpdatedAt(t *time.Time) *ExamApplicationsIPUpdateOne {
	if t != nil {
		eaiuo.SetUpdatedAt(*t)
	}
	return eaiuo
}

// ClearUpdatedAt clears the value of the "UpdatedAt" field.
func (eaiuo *ExamApplicationsIPUpdateOne) ClearUpdatedAt() *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.ClearUpdatedAt()
	return eaiuo
}

// SetUpdatedBy sets the "UpdatedBy" field.
func (eaiuo *ExamApplicationsIPUpdateOne) SetUpdatedBy(s string) *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.SetUpdatedBy(s)
	return eaiuo
}

// SetNillableUpdatedBy sets the "UpdatedBy" field if the given value is not nil.
func (eaiuo *ExamApplicationsIPUpdateOne) SetNillableUpdatedBy(s *string) *ExamApplicationsIPUpdateOne {
	if s != nil {
		eaiuo.SetUpdatedBy(*s)
	}
	return eaiuo
}

// ClearUpdatedBy clears the value of the "UpdatedBy" field.
func (eaiuo *ExamApplicationsIPUpdateOne) ClearUpdatedBy() *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.ClearUpdatedBy()
	return eaiuo
}

// SetHallIdentificationNumber sets the "HallIdentificationNumber" field.
func (eaiuo *ExamApplicationsIPUpdateOne) SetHallIdentificationNumber(i int32) *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.ResetHallIdentificationNumber()
	eaiuo.mutation.SetHallIdentificationNumber(i)
	return eaiuo
}

// SetNillableHallIdentificationNumber sets the "HallIdentificationNumber" field if the given value is not nil.
func (eaiuo *ExamApplicationsIPUpdateOne) SetNillableHallIdentificationNumber(i *int32) *ExamApplicationsIPUpdateOne {
	if i != nil {
		eaiuo.SetHallIdentificationNumber(*i)
	}
	return eaiuo
}

// AddHallIdentificationNumber adds i to the "HallIdentificationNumber" field.
func (eaiuo *ExamApplicationsIPUpdateOne) AddHallIdentificationNumber(i int32) *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.AddHallIdentificationNumber(i)
	return eaiuo
}

// ClearHallIdentificationNumber clears the value of the "HallIdentificationNumber" field.
func (eaiuo *ExamApplicationsIPUpdateOne) ClearHallIdentificationNumber() *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.ClearHallIdentificationNumber()
	return eaiuo
}

// SetExamCenterHall sets the "ExamCenterHall" field.
func (eaiuo *ExamApplicationsIPUpdateOne) SetExamCenterHall(i int32) *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.ResetExamCenterHall()
	eaiuo.mutation.SetExamCenterHall(i)
	return eaiuo
}

// SetNillableExamCenterHall sets the "ExamCenterHall" field if the given value is not nil.
func (eaiuo *ExamApplicationsIPUpdateOne) SetNillableExamCenterHall(i *int32) *ExamApplicationsIPUpdateOne {
	if i != nil {
		eaiuo.SetExamCenterHall(*i)
	}
	return eaiuo
}

// AddExamCenterHall adds i to the "ExamCenterHall" field.
func (eaiuo *ExamApplicationsIPUpdateOne) AddExamCenterHall(i int32) *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.AddExamCenterHall(i)
	return eaiuo
}

// ClearExamCenterHall clears the value of the "ExamCenterHall" field.
func (eaiuo *ExamApplicationsIPUpdateOne) ClearExamCenterHall() *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.ClearExamCenterHall()
	return eaiuo
}

// SetHallName sets the "HallName" field.
func (eaiuo *ExamApplicationsIPUpdateOne) SetHallName(s string) *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.SetHallName(s)
	return eaiuo
}

// SetNillableHallName sets the "HallName" field if the given value is not nil.
func (eaiuo *ExamApplicationsIPUpdateOne) SetNillableHallName(s *string) *ExamApplicationsIPUpdateOne {
	if s != nil {
		eaiuo.SetHallName(*s)
	}
	return eaiuo
}

// ClearHallName clears the value of the "HallName" field.
func (eaiuo *ExamApplicationsIPUpdateOne) ClearHallName() *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.ClearHallName()
	return eaiuo
}

// SetReportingOfficeID sets the "ReportingOfficeID" field.
func (eaiuo *ExamApplicationsIPUpdateOne) SetReportingOfficeID(s string) *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.SetReportingOfficeID(s)
	return eaiuo
}

// SetNillableReportingOfficeID sets the "ReportingOfficeID" field if the given value is not nil.
func (eaiuo *ExamApplicationsIPUpdateOne) SetNillableReportingOfficeID(s *string) *ExamApplicationsIPUpdateOne {
	if s != nil {
		eaiuo.SetReportingOfficeID(*s)
	}
	return eaiuo
}

// ClearReportingOfficeID clears the value of the "ReportingOfficeID" field.
func (eaiuo *ExamApplicationsIPUpdateOne) ClearReportingOfficeID() *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.ClearReportingOfficeID()
	return eaiuo
}

// SetCACorrected sets the "CACorrected" field.
func (eaiuo *ExamApplicationsIPUpdateOne) SetCACorrected(s string) *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.SetCACorrected(s)
	return eaiuo
}

// SetNillableCACorrected sets the "CACorrected" field if the given value is not nil.
func (eaiuo *ExamApplicationsIPUpdateOne) SetNillableCACorrected(s *string) *ExamApplicationsIPUpdateOne {
	if s != nil {
		eaiuo.SetCACorrected(*s)
	}
	return eaiuo
}

// ClearCACorrected clears the value of the "CACorrected" field.
func (eaiuo *ExamApplicationsIPUpdateOne) ClearCACorrected() *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.ClearCACorrected()
	return eaiuo
}

// SetCACorrectedDate sets the "CACorrectedDate" field.
func (eaiuo *ExamApplicationsIPUpdateOne) SetCACorrectedDate(t time.Time) *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.SetCACorrectedDate(t)
	return eaiuo
}

// SetNillableCACorrectedDate sets the "CACorrectedDate" field if the given value is not nil.
func (eaiuo *ExamApplicationsIPUpdateOne) SetNillableCACorrectedDate(t *time.Time) *ExamApplicationsIPUpdateOne {
	if t != nil {
		eaiuo.SetCACorrectedDate(*t)
	}
	return eaiuo
}

// ClearCACorrectedDate clears the value of the "CACorrectedDate" field.
func (eaiuo *ExamApplicationsIPUpdateOne) ClearCACorrectedDate() *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.ClearCACorrectedDate()
	return eaiuo
}

// AddUsersIPRefIDs adds the "UsersIPRef" edge to the UserMaster entity by IDs.
func (eaiuo *ExamApplicationsIPUpdateOne) AddUsersIPRefIDs(ids ...int64) *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.AddUsersIPRefIDs(ids...)
	return eaiuo
}

// AddUsersIPRef adds the "UsersIPRef" edges to the UserMaster entity.
func (eaiuo *ExamApplicationsIPUpdateOne) AddUsersIPRef(u ...*UserMaster) *ExamApplicationsIPUpdateOne {
	ids := make([]int64, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return eaiuo.AddUsersIPRefIDs(ids...)
}

// AddCadrePrefRefIDs adds the "CadrePref_Ref" edge to the Cadre_Choice_IP entity by IDs.
func (eaiuo *ExamApplicationsIPUpdateOne) AddCadrePrefRefIDs(ids ...int32) *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.AddCadrePrefRefIDs(ids...)
	return eaiuo
}

// AddCadrePrefRef adds the "CadrePref_Ref" edges to the Cadre_Choice_IP entity.
func (eaiuo *ExamApplicationsIPUpdateOne) AddCadrePrefRef(c ...*Cadre_Choice_IP) *ExamApplicationsIPUpdateOne {
	ids := make([]int32, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return eaiuo.AddCadrePrefRefIDs(ids...)
}

// AddCirclePrefRefIDs adds the "CirclePrefRef" edge to the PlaceOfPreferenceIP entity by IDs.
func (eaiuo *ExamApplicationsIPUpdateOne) AddCirclePrefRefIDs(ids ...int32) *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.AddCirclePrefRefIDs(ids...)
	return eaiuo
}

// AddCirclePrefRef adds the "CirclePrefRef" edges to the PlaceOfPreferenceIP entity.
func (eaiuo *ExamApplicationsIPUpdateOne) AddCirclePrefRef(p ...*PlaceOfPreferenceIP) *ExamApplicationsIPUpdateOne {
	ids := make([]int32, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return eaiuo.AddCirclePrefRefIDs(ids...)
}

// AddIPApplicationsRefIDs adds the "IPApplicationsRef" edge to the RecommendationsIPApplications entity by IDs.
func (eaiuo *ExamApplicationsIPUpdateOne) AddIPApplicationsRefIDs(ids ...int64) *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.AddIPApplicationsRefIDs(ids...)
	return eaiuo
}

// AddIPApplicationsRef adds the "IPApplicationsRef" edges to the RecommendationsIPApplications entity.
func (eaiuo *ExamApplicationsIPUpdateOne) AddIPApplicationsRef(r ...*RecommendationsIPApplications) *ExamApplicationsIPUpdateOne {
	ids := make([]int64, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return eaiuo.AddIPApplicationsRefIDs(ids...)
}

// AddLogDatumIDs adds the "LogData" edge to the Logs entity by IDs.
func (eaiuo *ExamApplicationsIPUpdateOne) AddLogDatumIDs(ids ...int64) *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.AddLogDatumIDs(ids...)
	return eaiuo
}

// AddLogData adds the "LogData" edges to the Logs entity.
func (eaiuo *ExamApplicationsIPUpdateOne) AddLogData(l ...*Logs) *ExamApplicationsIPUpdateOne {
	ids := make([]int64, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return eaiuo.AddLogDatumIDs(ids...)
}

// SetExamCentresID sets the "ExamCentres" edge to the Center entity by ID.
func (eaiuo *ExamApplicationsIPUpdateOne) SetExamCentresID(id int32) *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.SetExamCentresID(id)
	return eaiuo
}

// SetNillableExamCentresID sets the "ExamCentres" edge to the Center entity by ID if the given value is not nil.
func (eaiuo *ExamApplicationsIPUpdateOne) SetNillableExamCentresID(id *int32) *ExamApplicationsIPUpdateOne {
	if id != nil {
		eaiuo = eaiuo.SetExamCentresID(*id)
	}
	return eaiuo
}

// SetExamCentres sets the "ExamCentres" edge to the Center entity.
func (eaiuo *ExamApplicationsIPUpdateOne) SetExamCentres(c *Center) *ExamApplicationsIPUpdateOne {
	return eaiuo.SetExamCentresID(c.ID)
}

// SetExamcitycenterID sets the "examcitycenter" edge to the ExamCityCenter entity by ID.
func (eaiuo *ExamApplicationsIPUpdateOne) SetExamcitycenterID(id int32) *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.SetExamcitycenterID(id)
	return eaiuo
}

// SetNillableExamcitycenterID sets the "examcitycenter" edge to the ExamCityCenter entity by ID if the given value is not nil.
func (eaiuo *ExamApplicationsIPUpdateOne) SetNillableExamcitycenterID(id *int32) *ExamApplicationsIPUpdateOne {
	if id != nil {
		eaiuo = eaiuo.SetExamcitycenterID(*id)
	}
	return eaiuo
}

// SetExamcitycenter sets the "examcitycenter" edge to the ExamCityCenter entity.
func (eaiuo *ExamApplicationsIPUpdateOne) SetExamcitycenter(e *ExamCityCenter) *ExamApplicationsIPUpdateOne {
	return eaiuo.SetExamcitycenterID(e.ID)
}

// SetRoleusersID sets the "roleusers" edge to the RoleMaster entity by ID.
func (eaiuo *ExamApplicationsIPUpdateOne) SetRoleusersID(id int32) *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.SetRoleusersID(id)
	return eaiuo
}

// SetNillableRoleusersID sets the "roleusers" edge to the RoleMaster entity by ID if the given value is not nil.
func (eaiuo *ExamApplicationsIPUpdateOne) SetNillableRoleusersID(id *int32) *ExamApplicationsIPUpdateOne {
	if id != nil {
		eaiuo = eaiuo.SetRoleusersID(*id)
	}
	return eaiuo
}

// SetRoleusers sets the "roleusers" edge to the RoleMaster entity.
func (eaiuo *ExamApplicationsIPUpdateOne) SetRoleusers(r *RoleMaster) *ExamApplicationsIPUpdateOne {
	return eaiuo.SetRoleusersID(r.ID)
}

// SetCircleRefsID sets the "CircleRefs" edge to the CircleSummaryForNO entity by ID.
func (eaiuo *ExamApplicationsIPUpdateOne) SetCircleRefsID(id int32) *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.SetCircleRefsID(id)
	return eaiuo
}

// SetNillableCircleRefsID sets the "CircleRefs" edge to the CircleSummaryForNO entity by ID if the given value is not nil.
func (eaiuo *ExamApplicationsIPUpdateOne) SetNillableCircleRefsID(id *int32) *ExamApplicationsIPUpdateOne {
	if id != nil {
		eaiuo = eaiuo.SetCircleRefsID(*id)
	}
	return eaiuo
}

// SetCircleRefs sets the "CircleRefs" edge to the CircleSummaryForNO entity.
func (eaiuo *ExamApplicationsIPUpdateOne) SetCircleRefs(c *CircleSummaryForNO) *ExamApplicationsIPUpdateOne {
	return eaiuo.SetCircleRefsID(c.ID)
}

// Mutation returns the ExamApplicationsIPMutation object of the builder.
func (eaiuo *ExamApplicationsIPUpdateOne) Mutation() *ExamApplicationsIPMutation {
	return eaiuo.mutation
}

// ClearUsersIPRef clears all "UsersIPRef" edges to the UserMaster entity.
func (eaiuo *ExamApplicationsIPUpdateOne) ClearUsersIPRef() *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.ClearUsersIPRef()
	return eaiuo
}

// RemoveUsersIPRefIDs removes the "UsersIPRef" edge to UserMaster entities by IDs.
func (eaiuo *ExamApplicationsIPUpdateOne) RemoveUsersIPRefIDs(ids ...int64) *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.RemoveUsersIPRefIDs(ids...)
	return eaiuo
}

// RemoveUsersIPRef removes "UsersIPRef" edges to UserMaster entities.
func (eaiuo *ExamApplicationsIPUpdateOne) RemoveUsersIPRef(u ...*UserMaster) *ExamApplicationsIPUpdateOne {
	ids := make([]int64, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return eaiuo.RemoveUsersIPRefIDs(ids...)
}

// ClearCadrePrefRef clears all "CadrePref_Ref" edges to the Cadre_Choice_IP entity.
func (eaiuo *ExamApplicationsIPUpdateOne) ClearCadrePrefRef() *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.ClearCadrePrefRef()
	return eaiuo
}

// RemoveCadrePrefRefIDs removes the "CadrePref_Ref" edge to Cadre_Choice_IP entities by IDs.
func (eaiuo *ExamApplicationsIPUpdateOne) RemoveCadrePrefRefIDs(ids ...int32) *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.RemoveCadrePrefRefIDs(ids...)
	return eaiuo
}

// RemoveCadrePrefRef removes "CadrePref_Ref" edges to Cadre_Choice_IP entities.
func (eaiuo *ExamApplicationsIPUpdateOne) RemoveCadrePrefRef(c ...*Cadre_Choice_IP) *ExamApplicationsIPUpdateOne {
	ids := make([]int32, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return eaiuo.RemoveCadrePrefRefIDs(ids...)
}

// ClearCirclePrefRef clears all "CirclePrefRef" edges to the PlaceOfPreferenceIP entity.
func (eaiuo *ExamApplicationsIPUpdateOne) ClearCirclePrefRef() *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.ClearCirclePrefRef()
	return eaiuo
}

// RemoveCirclePrefRefIDs removes the "CirclePrefRef" edge to PlaceOfPreferenceIP entities by IDs.
func (eaiuo *ExamApplicationsIPUpdateOne) RemoveCirclePrefRefIDs(ids ...int32) *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.RemoveCirclePrefRefIDs(ids...)
	return eaiuo
}

// RemoveCirclePrefRef removes "CirclePrefRef" edges to PlaceOfPreferenceIP entities.
func (eaiuo *ExamApplicationsIPUpdateOne) RemoveCirclePrefRef(p ...*PlaceOfPreferenceIP) *ExamApplicationsIPUpdateOne {
	ids := make([]int32, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return eaiuo.RemoveCirclePrefRefIDs(ids...)
}

// ClearIPApplicationsRef clears all "IPApplicationsRef" edges to the RecommendationsIPApplications entity.
func (eaiuo *ExamApplicationsIPUpdateOne) ClearIPApplicationsRef() *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.ClearIPApplicationsRef()
	return eaiuo
}

// RemoveIPApplicationsRefIDs removes the "IPApplicationsRef" edge to RecommendationsIPApplications entities by IDs.
func (eaiuo *ExamApplicationsIPUpdateOne) RemoveIPApplicationsRefIDs(ids ...int64) *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.RemoveIPApplicationsRefIDs(ids...)
	return eaiuo
}

// RemoveIPApplicationsRef removes "IPApplicationsRef" edges to RecommendationsIPApplications entities.
func (eaiuo *ExamApplicationsIPUpdateOne) RemoveIPApplicationsRef(r ...*RecommendationsIPApplications) *ExamApplicationsIPUpdateOne {
	ids := make([]int64, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return eaiuo.RemoveIPApplicationsRefIDs(ids...)
}

// ClearLogData clears all "LogData" edges to the Logs entity.
func (eaiuo *ExamApplicationsIPUpdateOne) ClearLogData() *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.ClearLogData()
	return eaiuo
}

// RemoveLogDatumIDs removes the "LogData" edge to Logs entities by IDs.
func (eaiuo *ExamApplicationsIPUpdateOne) RemoveLogDatumIDs(ids ...int64) *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.RemoveLogDatumIDs(ids...)
	return eaiuo
}

// RemoveLogData removes "LogData" edges to Logs entities.
func (eaiuo *ExamApplicationsIPUpdateOne) RemoveLogData(l ...*Logs) *ExamApplicationsIPUpdateOne {
	ids := make([]int64, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return eaiuo.RemoveLogDatumIDs(ids...)
}

// ClearExamCentres clears the "ExamCentres" edge to the Center entity.
func (eaiuo *ExamApplicationsIPUpdateOne) ClearExamCentres() *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.ClearExamCentres()
	return eaiuo
}

// ClearExamcitycenter clears the "examcitycenter" edge to the ExamCityCenter entity.
func (eaiuo *ExamApplicationsIPUpdateOne) ClearExamcitycenter() *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.ClearExamcitycenter()
	return eaiuo
}

// ClearRoleusers clears the "roleusers" edge to the RoleMaster entity.
func (eaiuo *ExamApplicationsIPUpdateOne) ClearRoleusers() *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.ClearRoleusers()
	return eaiuo
}

// ClearCircleRefs clears the "CircleRefs" edge to the CircleSummaryForNO entity.
func (eaiuo *ExamApplicationsIPUpdateOne) ClearCircleRefs() *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.ClearCircleRefs()
	return eaiuo
}

// Where appends a list predicates to the ExamApplicationsIPUpdate builder.
func (eaiuo *ExamApplicationsIPUpdateOne) Where(ps ...predicate.Exam_Applications_IP) *ExamApplicationsIPUpdateOne {
	eaiuo.mutation.Where(ps...)
	return eaiuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (eaiuo *ExamApplicationsIPUpdateOne) Select(field string, fields ...string) *ExamApplicationsIPUpdateOne {
	eaiuo.fields = append([]string{field}, fields...)
	return eaiuo
}

// Save executes the query and returns the updated Exam_Applications_IP entity.
func (eaiuo *ExamApplicationsIPUpdateOne) Save(ctx context.Context) (*Exam_Applications_IP, error) {
	return withHooks(ctx, eaiuo.sqlSave, eaiuo.mutation, eaiuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (eaiuo *ExamApplicationsIPUpdateOne) SaveX(ctx context.Context) *Exam_Applications_IP {
	node, err := eaiuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (eaiuo *ExamApplicationsIPUpdateOne) Exec(ctx context.Context) error {
	_, err := eaiuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eaiuo *ExamApplicationsIPUpdateOne) ExecX(ctx context.Context) {
	if err := eaiuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (eaiuo *ExamApplicationsIPUpdateOne) sqlSave(ctx context.Context) (_node *Exam_Applications_IP, err error) {
	_spec := sqlgraph.NewUpdateSpec(exam_applications_ip.Table, exam_applications_ip.Columns, sqlgraph.NewFieldSpec(exam_applications_ip.FieldID, field.TypeInt64))
	id, ok := eaiuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Exam_Applications_IP.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := eaiuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, exam_applications_ip.FieldID)
		for _, f := range fields {
			if !exam_applications_ip.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != exam_applications_ip.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := eaiuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eaiuo.mutation.ApplicationNumber(); ok {
		_spec.SetField(exam_applications_ip.FieldApplicationNumber, field.TypeString, value)
	}
	if eaiuo.mutation.ApplicationNumberCleared() {
		_spec.ClearField(exam_applications_ip.FieldApplicationNumber, field.TypeString)
	}
	if value, ok := eaiuo.mutation.ApplnSubmittedDate(); ok {
		_spec.SetField(exam_applications_ip.FieldApplnSubmittedDate, field.TypeTime, value)
	}
	if eaiuo.mutation.ApplnSubmittedDateCleared() {
		_spec.ClearField(exam_applications_ip.FieldApplnSubmittedDate, field.TypeTime)
	}
	if value, ok := eaiuo.mutation.ExamCode(); ok {
		_spec.SetField(exam_applications_ip.FieldExamCode, field.TypeInt32, value)
	}
	if value, ok := eaiuo.mutation.AddedExamCode(); ok {
		_spec.AddField(exam_applications_ip.FieldExamCode, field.TypeInt32, value)
	}
	if eaiuo.mutation.ExamCodeCleared() {
		_spec.ClearField(exam_applications_ip.FieldExamCode, field.TypeInt32)
	}
	if value, ok := eaiuo.mutation.ExamShortName(); ok {
		_spec.SetField(exam_applications_ip.FieldExamShortName, field.TypeString, value)
	}
	if eaiuo.mutation.ExamShortNameCleared() {
		_spec.ClearField(exam_applications_ip.FieldExamShortName, field.TypeString)
	}
	if value, ok := eaiuo.mutation.ExamName(); ok {
		_spec.SetField(exam_applications_ip.FieldExamName, field.TypeString, value)
	}
	if eaiuo.mutation.ExamNameCleared() {
		_spec.ClearField(exam_applications_ip.FieldExamName, field.TypeString)
	}
	if value, ok := eaiuo.mutation.SmsExamShortName(); ok {
		_spec.SetField(exam_applications_ip.FieldSmsExamShortName, field.TypeString, value)
	}
	if eaiuo.mutation.SmsExamShortNameCleared() {
		_spec.ClearField(exam_applications_ip.FieldSmsExamShortName, field.TypeString)
	}
	if value, ok := eaiuo.mutation.ExamYear(); ok {
		_spec.SetField(exam_applications_ip.FieldExamYear, field.TypeString, value)
	}
	if eaiuo.mutation.ExamYearCleared() {
		_spec.ClearField(exam_applications_ip.FieldExamYear, field.TypeString)
	}
	if value, ok := eaiuo.mutation.UserID(); ok {
		_spec.SetField(exam_applications_ip.FieldUserID, field.TypeInt32, value)
	}
	if value, ok := eaiuo.mutation.AddedUserID(); ok {
		_spec.AddField(exam_applications_ip.FieldUserID, field.TypeInt32, value)
	}
	if eaiuo.mutation.UserIDCleared() {
		_spec.ClearField(exam_applications_ip.FieldUserID, field.TypeInt32)
	}
	if value, ok := eaiuo.mutation.EmployeeID(); ok {
		_spec.SetField(exam_applications_ip.FieldEmployeeID, field.TypeInt64, value)
	}
	if value, ok := eaiuo.mutation.AddedEmployeeID(); ok {
		_spec.AddField(exam_applications_ip.FieldEmployeeID, field.TypeInt64, value)
	}
	if eaiuo.mutation.EmployeeIDCleared() {
		_spec.ClearField(exam_applications_ip.FieldEmployeeID, field.TypeInt64)
	}
	if value, ok := eaiuo.mutation.EmployeeName(); ok {
		_spec.SetField(exam_applications_ip.FieldEmployeeName, field.TypeString, value)
	}
	if eaiuo.mutation.EmployeeNameCleared() {
		_spec.ClearField(exam_applications_ip.FieldEmployeeName, field.TypeString)
	}
	if value, ok := eaiuo.mutation.DOB(); ok {
		_spec.SetField(exam_applications_ip.FieldDOB, field.TypeString, value)
	}
	if eaiuo.mutation.DOBCleared() {
		_spec.ClearField(exam_applications_ip.FieldDOB, field.TypeString)
	}
	if value, ok := eaiuo.mutation.Gender(); ok {
		_spec.SetField(exam_applications_ip.FieldGender, field.TypeString, value)
	}
	if eaiuo.mutation.GenderCleared() {
		_spec.ClearField(exam_applications_ip.FieldGender, field.TypeString)
	}
	if value, ok := eaiuo.mutation.MobileNumber(); ok {
		_spec.SetField(exam_applications_ip.FieldMobileNumber, field.TypeString, value)
	}
	if eaiuo.mutation.MobileNumberCleared() {
		_spec.ClearField(exam_applications_ip.FieldMobileNumber, field.TypeString)
	}
	if value, ok := eaiuo.mutation.EmailID(); ok {
		_spec.SetField(exam_applications_ip.FieldEmailID, field.TypeString, value)
	}
	if eaiuo.mutation.EmailIDCleared() {
		_spec.ClearField(exam_applications_ip.FieldEmailID, field.TypeString)
	}
	if value, ok := eaiuo.mutation.CategoryCode(); ok {
		_spec.SetField(exam_applications_ip.FieldCategoryCode, field.TypeString, value)
	}
	if eaiuo.mutation.CategoryCodeCleared() {
		_spec.ClearField(exam_applications_ip.FieldCategoryCode, field.TypeString)
	}
	if value, ok := eaiuo.mutation.CategoryDescription(); ok {
		_spec.SetField(exam_applications_ip.FieldCategoryDescription, field.TypeString, value)
	}
	if eaiuo.mutation.CategoryDescriptionCleared() {
		_spec.ClearField(exam_applications_ip.FieldCategoryDescription, field.TypeString)
	}
	if value, ok := eaiuo.mutation.DisabilityTypeID(); ok {
		_spec.SetField(exam_applications_ip.FieldDisabilityTypeID, field.TypeString, value)
	}
	if eaiuo.mutation.DisabilityTypeIDCleared() {
		_spec.ClearField(exam_applications_ip.FieldDisabilityTypeID, field.TypeString)
	}
	if value, ok := eaiuo.mutation.DisabilityTypeCode(); ok {
		_spec.SetField(exam_applications_ip.FieldDisabilityTypeCode, field.TypeString, value)
	}
	if eaiuo.mutation.DisabilityTypeCodeCleared() {
		_spec.ClearField(exam_applications_ip.FieldDisabilityTypeCode, field.TypeString)
	}
	if value, ok := eaiuo.mutation.DisabilityTypeDescription(); ok {
		_spec.SetField(exam_applications_ip.FieldDisabilityTypeDescription, field.TypeString, value)
	}
	if eaiuo.mutation.DisabilityTypeDescriptionCleared() {
		_spec.ClearField(exam_applications_ip.FieldDisabilityTypeDescription, field.TypeString)
	}
	if value, ok := eaiuo.mutation.DisabilityPercentage(); ok {
		_spec.SetField(exam_applications_ip.FieldDisabilityPercentage, field.TypeInt32, value)
	}
	if value, ok := eaiuo.mutation.AddedDisabilityPercentage(); ok {
		_spec.AddField(exam_applications_ip.FieldDisabilityPercentage, field.TypeInt32, value)
	}
	if eaiuo.mutation.DisabilityPercentageCleared() {
		_spec.ClearField(exam_applications_ip.FieldDisabilityPercentage, field.TypeInt32)
	}
	if value, ok := eaiuo.mutation.DCCS(); ok {
		_spec.SetField(exam_applications_ip.FieldDCCS, field.TypeString, value)
	}
	if eaiuo.mutation.DCCSCleared() {
		_spec.ClearField(exam_applications_ip.FieldDCCS, field.TypeString)
	}
	if value, ok := eaiuo.mutation.EntryPostCode(); ok {
		_spec.SetField(exam_applications_ip.FieldEntryPostCode, field.TypeString, value)
	}
	if eaiuo.mutation.EntryPostCodeCleared() {
		_spec.ClearField(exam_applications_ip.FieldEntryPostCode, field.TypeString)
	}
	if value, ok := eaiuo.mutation.EntryPostDescription(); ok {
		_spec.SetField(exam_applications_ip.FieldEntryPostDescription, field.TypeString, value)
	}
	if eaiuo.mutation.EntryPostDescriptionCleared() {
		_spec.ClearField(exam_applications_ip.FieldEntryPostDescription, field.TypeString)
	}
	if value, ok := eaiuo.mutation.PresentPostCode(); ok {
		_spec.SetField(exam_applications_ip.FieldPresentPostCode, field.TypeString, value)
	}
	if eaiuo.mutation.PresentPostCodeCleared() {
		_spec.ClearField(exam_applications_ip.FieldPresentPostCode, field.TypeString)
	}
	if value, ok := eaiuo.mutation.PresentPostDescription(); ok {
		_spec.SetField(exam_applications_ip.FieldPresentPostDescription, field.TypeString, value)
	}
	if eaiuo.mutation.PresentPostDescriptionCleared() {
		_spec.ClearField(exam_applications_ip.FieldPresentPostDescription, field.TypeString)
	}
	if value, ok := eaiuo.mutation.FeederPostCode(); ok {
		_spec.SetField(exam_applications_ip.FieldFeederPostCode, field.TypeString, value)
	}
	if eaiuo.mutation.FeederPostCodeCleared() {
		_spec.ClearField(exam_applications_ip.FieldFeederPostCode, field.TypeString)
	}
	if value, ok := eaiuo.mutation.FeederPostDescription(); ok {
		_spec.SetField(exam_applications_ip.FieldFeederPostDescription, field.TypeString, value)
	}
	if eaiuo.mutation.FeederPostDescriptionCleared() {
		_spec.ClearField(exam_applications_ip.FieldFeederPostDescription, field.TypeString)
	}
	if value, ok := eaiuo.mutation.FeederPostJoiningDate(); ok {
		_spec.SetField(exam_applications_ip.FieldFeederPostJoiningDate, field.TypeString, value)
	}
	if eaiuo.mutation.FeederPostJoiningDateCleared() {
		_spec.ClearField(exam_applications_ip.FieldFeederPostJoiningDate, field.TypeString)
	}
	if value, ok := eaiuo.mutation.DesignationID(); ok {
		_spec.SetField(exam_applications_ip.FieldDesignationID, field.TypeString, value)
	}
	if eaiuo.mutation.DesignationIDCleared() {
		_spec.ClearField(exam_applications_ip.FieldDesignationID, field.TypeString)
	}
	if value, ok := eaiuo.mutation.PresentDesignation(); ok {
		_spec.SetField(exam_applications_ip.FieldPresentDesignation, field.TypeString, value)
	}
	if eaiuo.mutation.PresentDesignationCleared() {
		_spec.ClearField(exam_applications_ip.FieldPresentDesignation, field.TypeString)
	}
	if value, ok := eaiuo.mutation.EducationCode(); ok {
		_spec.SetField(exam_applications_ip.FieldEducationCode, field.TypeString, value)
	}
	if eaiuo.mutation.EducationCodeCleared() {
		_spec.ClearField(exam_applications_ip.FieldEducationCode, field.TypeString)
	}
	if value, ok := eaiuo.mutation.EducationDescription(); ok {
		_spec.SetField(exam_applications_ip.FieldEducationDescription, field.TypeString, value)
	}
	if eaiuo.mutation.EducationDescriptionCleared() {
		_spec.ClearField(exam_applications_ip.FieldEducationDescription, field.TypeString)
	}
	if value, ok := eaiuo.mutation.FacilityUniqueID(); ok {
		_spec.SetField(exam_applications_ip.FieldFacilityUniqueID, field.TypeString, value)
	}
	if eaiuo.mutation.FacilityUniqueIDCleared() {
		_spec.ClearField(exam_applications_ip.FieldFacilityUniqueID, field.TypeString)
	}
	if value, ok := eaiuo.mutation.WorkingOfficePincode(); ok {
		_spec.SetField(exam_applications_ip.FieldWorkingOfficePincode, field.TypeInt32, value)
	}
	if value, ok := eaiuo.mutation.AddedWorkingOfficePincode(); ok {
		_spec.AddField(exam_applications_ip.FieldWorkingOfficePincode, field.TypeInt32, value)
	}
	if eaiuo.mutation.WorkingOfficePincodeCleared() {
		_spec.ClearField(exam_applications_ip.FieldWorkingOfficePincode, field.TypeInt32)
	}
	if value, ok := eaiuo.mutation.WorkingOfficeFacilityID(); ok {
		_spec.SetField(exam_applications_ip.FieldWorkingOfficeFacilityID, field.TypeString, value)
	}
	if eaiuo.mutation.WorkingOfficeFacilityIDCleared() {
		_spec.ClearField(exam_applications_ip.FieldWorkingOfficeFacilityID, field.TypeString)
	}
	if value, ok := eaiuo.mutation.WorkingOfficeName(); ok {
		_spec.SetField(exam_applications_ip.FieldWorkingOfficeName, field.TypeString, value)
	}
	if eaiuo.mutation.WorkingOfficeNameCleared() {
		_spec.ClearField(exam_applications_ip.FieldWorkingOfficeName, field.TypeString)
	}
	if value, ok := eaiuo.mutation.WorkingOfficeCircleFacilityID(); ok {
		_spec.SetField(exam_applications_ip.FieldWorkingOfficeCircleFacilityID, field.TypeString, value)
	}
	if eaiuo.mutation.WorkingOfficeCircleFacilityIDCleared() {
		_spec.ClearField(exam_applications_ip.FieldWorkingOfficeCircleFacilityID, field.TypeString)
	}
	if value, ok := eaiuo.mutation.WorkingOfficeCircleName(); ok {
		_spec.SetField(exam_applications_ip.FieldWorkingOfficeCircleName, field.TypeString, value)
	}
	if eaiuo.mutation.WorkingOfficeCircleNameCleared() {
		_spec.ClearField(exam_applications_ip.FieldWorkingOfficeCircleName, field.TypeString)
	}
	if value, ok := eaiuo.mutation.WorkingOfficeRegionFacilityID(); ok {
		_spec.SetField(exam_applications_ip.FieldWorkingOfficeRegionFacilityID, field.TypeString, value)
	}
	if eaiuo.mutation.WorkingOfficeRegionFacilityIDCleared() {
		_spec.ClearField(exam_applications_ip.FieldWorkingOfficeRegionFacilityID, field.TypeString)
	}
	if value, ok := eaiuo.mutation.WorkingOfficeRegionName(); ok {
		_spec.SetField(exam_applications_ip.FieldWorkingOfficeRegionName, field.TypeString, value)
	}
	if eaiuo.mutation.WorkingOfficeRegionNameCleared() {
		_spec.ClearField(exam_applications_ip.FieldWorkingOfficeRegionName, field.TypeString)
	}
	if value, ok := eaiuo.mutation.WorkingOfficeDivisionFacilityID(); ok {
		_spec.SetField(exam_applications_ip.FieldWorkingOfficeDivisionFacilityID, field.TypeString, value)
	}
	if eaiuo.mutation.WorkingOfficeDivisionFacilityIDCleared() {
		_spec.ClearField(exam_applications_ip.FieldWorkingOfficeDivisionFacilityID, field.TypeString)
	}
	if value, ok := eaiuo.mutation.WorkingOfficeDivisionName(); ok {
		_spec.SetField(exam_applications_ip.FieldWorkingOfficeDivisionName, field.TypeString, value)
	}
	if eaiuo.mutation.WorkingOfficeDivisionNameCleared() {
		_spec.ClearField(exam_applications_ip.FieldWorkingOfficeDivisionName, field.TypeString)
	}
	if value, ok := eaiuo.mutation.ReportingOfficeFacilityID(); ok {
		_spec.SetField(exam_applications_ip.FieldReportingOfficeFacilityID, field.TypeString, value)
	}
	if eaiuo.mutation.ReportingOfficeFacilityIDCleared() {
		_spec.ClearField(exam_applications_ip.FieldReportingOfficeFacilityID, field.TypeString)
	}
	if value, ok := eaiuo.mutation.ReportingOfficeName(); ok {
		_spec.SetField(exam_applications_ip.FieldReportingOfficeName, field.TypeString, value)
	}
	if eaiuo.mutation.ReportingOfficeNameCleared() {
		_spec.ClearField(exam_applications_ip.FieldReportingOfficeName, field.TypeString)
	}
	if value, ok := eaiuo.mutation.LienControllingOfficeID(); ok {
		_spec.SetField(exam_applications_ip.FieldLienControllingOfficeID, field.TypeString, value)
	}
	if eaiuo.mutation.LienControllingOfficeIDCleared() {
		_spec.ClearField(exam_applications_ip.FieldLienControllingOfficeID, field.TypeString)
	}
	if value, ok := eaiuo.mutation.LienControllingOfficeName(); ok {
		_spec.SetField(exam_applications_ip.FieldLienControllingOfficeName, field.TypeString, value)
	}
	if eaiuo.mutation.LienControllingOfficeNameCleared() {
		_spec.ClearField(exam_applications_ip.FieldLienControllingOfficeName, field.TypeString)
	}
	if value, ok := eaiuo.mutation.InDeputation(); ok {
		_spec.SetField(exam_applications_ip.FieldInDeputation, field.TypeString, value)
	}
	if eaiuo.mutation.InDeputationCleared() {
		_spec.ClearField(exam_applications_ip.FieldInDeputation, field.TypeString)
	}
	if value, ok := eaiuo.mutation.DeputationType(); ok {
		_spec.SetField(exam_applications_ip.FieldDeputationType, field.TypeString, value)
	}
	if eaiuo.mutation.DeputationTypeCleared() {
		_spec.ClearField(exam_applications_ip.FieldDeputationType, field.TypeString)
	}
	if value, ok := eaiuo.mutation.DeputationOfficeUniqueId(); ok {
		_spec.SetField(exam_applications_ip.FieldDeputationOfficeUniqueId, field.TypeString, value)
	}
	if eaiuo.mutation.DeputationOfficeUniqueIdCleared() {
		_spec.ClearField(exam_applications_ip.FieldDeputationOfficeUniqueId, field.TypeString)
	}
	if value, ok := eaiuo.mutation.DeputationOfficeFacilityID(); ok {
		_spec.SetField(exam_applications_ip.FieldDeputationOfficeFacilityID, field.TypeString, value)
	}
	if eaiuo.mutation.DeputationOfficeFacilityIDCleared() {
		_spec.ClearField(exam_applications_ip.FieldDeputationOfficeFacilityID, field.TypeString)
	}
	if value, ok := eaiuo.mutation.DeputationOfficeName(); ok {
		_spec.SetField(exam_applications_ip.FieldDeputationOfficeName, field.TypeString, value)
	}
	if eaiuo.mutation.DeputationOfficeNameCleared() {
		_spec.ClearField(exam_applications_ip.FieldDeputationOfficeName, field.TypeString)
	}
	if value, ok := eaiuo.mutation.DeputationControllingOfficeID(); ok {
		_spec.SetField(exam_applications_ip.FieldDeputationControllingOfficeID, field.TypeString, value)
	}
	if eaiuo.mutation.DeputationControllingOfficeIDCleared() {
		_spec.ClearField(exam_applications_ip.FieldDeputationControllingOfficeID, field.TypeString)
	}
	if value, ok := eaiuo.mutation.DeputationControllingOfficeName(); ok {
		_spec.SetField(exam_applications_ip.FieldDeputationControllingOfficeName, field.TypeString, value)
	}
	if eaiuo.mutation.DeputationControllingOfficeNameCleared() {
		_spec.ClearField(exam_applications_ip.FieldDeputationControllingOfficeName, field.TypeString)
	}
	if value, ok := eaiuo.mutation.ControllingOfficeFacilityID(); ok {
		_spec.SetField(exam_applications_ip.FieldControllingOfficeFacilityID, field.TypeString, value)
	}
	if eaiuo.mutation.ControllingOfficeFacilityIDCleared() {
		_spec.ClearField(exam_applications_ip.FieldControllingOfficeFacilityID, field.TypeString)
	}
	if value, ok := eaiuo.mutation.ControllingOfficeName(); ok {
		_spec.SetField(exam_applications_ip.FieldControllingOfficeName, field.TypeString, value)
	}
	if eaiuo.mutation.ControllingOfficeNameCleared() {
		_spec.ClearField(exam_applications_ip.FieldControllingOfficeName, field.TypeString)
	}
	if value, ok := eaiuo.mutation.NodalOfficeFacilityID(); ok {
		_spec.SetField(exam_applications_ip.FieldNodalOfficeFacilityID, field.TypeString, value)
	}
	if eaiuo.mutation.NodalOfficeFacilityIDCleared() {
		_spec.ClearField(exam_applications_ip.FieldNodalOfficeFacilityID, field.TypeString)
	}
	if value, ok := eaiuo.mutation.NodalOfficeName(); ok {
		_spec.SetField(exam_applications_ip.FieldNodalOfficeName, field.TypeString, value)
	}
	if eaiuo.mutation.NodalOfficeNameCleared() {
		_spec.ClearField(exam_applications_ip.FieldNodalOfficeName, field.TypeString)
	}
	if value, ok := eaiuo.mutation.CenterFacilityId(); ok {
		_spec.SetField(exam_applications_ip.FieldCenterFacilityId, field.TypeString, value)
	}
	if eaiuo.mutation.CenterFacilityIdCleared() {
		_spec.ClearField(exam_applications_ip.FieldCenterFacilityId, field.TypeString)
	}
	if value, ok := eaiuo.mutation.CentrePreference(); ok {
		_spec.SetField(exam_applications_ip.FieldCentrePreference, field.TypeString, value)
	}
	if eaiuo.mutation.CentrePreferenceCleared() {
		_spec.ClearField(exam_applications_ip.FieldCentrePreference, field.TypeString)
	}
	if value, ok := eaiuo.mutation.Signature(); ok {
		_spec.SetField(exam_applications_ip.FieldSignature, field.TypeString, value)
	}
	if eaiuo.mutation.SignatureCleared() {
		_spec.ClearField(exam_applications_ip.FieldSignature, field.TypeString)
	}
	if value, ok := eaiuo.mutation.Photo(); ok {
		_spec.SetField(exam_applications_ip.FieldPhoto, field.TypeString, value)
	}
	if eaiuo.mutation.PhotoCleared() {
		_spec.ClearField(exam_applications_ip.FieldPhoto, field.TypeString)
	}
	if value, ok := eaiuo.mutation.SignaturePath(); ok {
		_spec.SetField(exam_applications_ip.FieldSignaturePath, field.TypeString, value)
	}
	if eaiuo.mutation.SignaturePathCleared() {
		_spec.ClearField(exam_applications_ip.FieldSignaturePath, field.TypeString)
	}
	if value, ok := eaiuo.mutation.PhotoPath(); ok {
		_spec.SetField(exam_applications_ip.FieldPhotoPath, field.TypeString, value)
	}
	if eaiuo.mutation.PhotoPathCleared() {
		_spec.ClearField(exam_applications_ip.FieldPhotoPath, field.TypeString)
	}
	if value, ok := eaiuo.mutation.CandidatePhoto(); ok {
		_spec.SetField(exam_applications_ip.FieldCandidatePhoto, field.TypeBytes, value)
	}
	if eaiuo.mutation.CandidatePhotoCleared() {
		_spec.ClearField(exam_applications_ip.FieldCandidatePhoto, field.TypeBytes)
	}
	if value, ok := eaiuo.mutation.CandidateSignature(); ok {
		_spec.SetField(exam_applications_ip.FieldCandidateSignature, field.TypeBytes, value)
	}
	if eaiuo.mutation.CandidateSignatureCleared() {
		_spec.ClearField(exam_applications_ip.FieldCandidateSignature, field.TypeBytes)
	}
	if value, ok := eaiuo.mutation.TempHallTicket(); ok {
		_spec.SetField(exam_applications_ip.FieldTempHallTicket, field.TypeString, value)
	}
	if eaiuo.mutation.TempHallTicketCleared() {
		_spec.ClearField(exam_applications_ip.FieldTempHallTicket, field.TypeString)
	}
	if value, ok := eaiuo.mutation.CandidateRemarks(); ok {
		_spec.SetField(exam_applications_ip.FieldCandidateRemarks, field.TypeString, value)
	}
	if eaiuo.mutation.CandidateRemarksCleared() {
		_spec.ClearField(exam_applications_ip.FieldCandidateRemarks, field.TypeString)
	}
	if value, ok := eaiuo.mutation.VAGeneralRemarks(); ok {
		_spec.SetField(exam_applications_ip.FieldVAGeneralRemarks, field.TypeString, value)
	}
	if eaiuo.mutation.VAGeneralRemarksCleared() {
		_spec.ClearField(exam_applications_ip.FieldVAGeneralRemarks, field.TypeString)
	}
	if value, ok := eaiuo.mutation.CAGeneralRemarks(); ok {
		_spec.SetField(exam_applications_ip.FieldCAGeneralRemarks, field.TypeString, value)
	}
	if eaiuo.mutation.CAGeneralRemarksCleared() {
		_spec.ClearField(exam_applications_ip.FieldCAGeneralRemarks, field.TypeString)
	}
	if value, ok := eaiuo.mutation.NAGeneralRemarks(); ok {
		_spec.SetField(exam_applications_ip.FieldNAGeneralRemarks, field.TypeString, value)
	}
	if eaiuo.mutation.NAGeneralRemarksCleared() {
		_spec.ClearField(exam_applications_ip.FieldNAGeneralRemarks, field.TypeString)
	}
	if value, ok := eaiuo.mutation.ApplicationStatus(); ok {
		_spec.SetField(exam_applications_ip.FieldApplicationStatus, field.TypeString, value)
	}
	if eaiuo.mutation.ApplicationStatusCleared() {
		_spec.ClearField(exam_applications_ip.FieldApplicationStatus, field.TypeString)
	}
	if value, ok := eaiuo.mutation.Status(); ok {
		_spec.SetField(exam_applications_ip.FieldStatus, field.TypeString, value)
	}
	if eaiuo.mutation.StatusCleared() {
		_spec.ClearField(exam_applications_ip.FieldStatus, field.TypeString)
	}
	if value, ok := eaiuo.mutation.VAUserId(); ok {
		_spec.SetField(exam_applications_ip.FieldVAUserId, field.TypeInt32, value)
	}
	if value, ok := eaiuo.mutation.AddedVAUserId(); ok {
		_spec.AddField(exam_applications_ip.FieldVAUserId, field.TypeInt32, value)
	}
	if eaiuo.mutation.VAUserIdCleared() {
		_spec.ClearField(exam_applications_ip.FieldVAUserId, field.TypeInt32)
	}
	if value, ok := eaiuo.mutation.VAUserName(); ok {
		_spec.SetField(exam_applications_ip.FieldVAUserName, field.TypeString, value)
	}
	if eaiuo.mutation.VAUserNameCleared() {
		_spec.ClearField(exam_applications_ip.FieldVAUserName, field.TypeString)
	}
	if value, ok := eaiuo.mutation.VAEmployeeID(); ok {
		_spec.SetField(exam_applications_ip.FieldVAEmployeeID, field.TypeString, value)
	}
	if eaiuo.mutation.VAEmployeeIDCleared() {
		_spec.ClearField(exam_applications_ip.FieldVAEmployeeID, field.TypeString)
	}
	if value, ok := eaiuo.mutation.VAEmployeeDesignation(); ok {
		_spec.SetField(exam_applications_ip.FieldVAEmployeeDesignation, field.TypeString, value)
	}
	if eaiuo.mutation.VAEmployeeDesignationCleared() {
		_spec.ClearField(exam_applications_ip.FieldVAEmployeeDesignation, field.TypeString)
	}
	if value, ok := eaiuo.mutation.VARemarks(); ok {
		_spec.SetField(exam_applications_ip.FieldVARemarks, field.TypeString, value)
	}
	if eaiuo.mutation.VARemarksCleared() {
		_spec.ClearField(exam_applications_ip.FieldVARemarks, field.TypeString)
	}
	if value, ok := eaiuo.mutation.VADate(); ok {
		_spec.SetField(exam_applications_ip.FieldVADate, field.TypeTime, value)
	}
	if eaiuo.mutation.VADateCleared() {
		_spec.ClearField(exam_applications_ip.FieldVADate, field.TypeTime)
	}
	if value, ok := eaiuo.mutation.CAUserId(); ok {
		_spec.SetField(exam_applications_ip.FieldCAUserId, field.TypeInt32, value)
	}
	if value, ok := eaiuo.mutation.AddedCAUserId(); ok {
		_spec.AddField(exam_applications_ip.FieldCAUserId, field.TypeInt32, value)
	}
	if eaiuo.mutation.CAUserIdCleared() {
		_spec.ClearField(exam_applications_ip.FieldCAUserId, field.TypeInt32)
	}
	if value, ok := eaiuo.mutation.CAUserName(); ok {
		_spec.SetField(exam_applications_ip.FieldCAUserName, field.TypeString, value)
	}
	if eaiuo.mutation.CAUserNameCleared() {
		_spec.ClearField(exam_applications_ip.FieldCAUserName, field.TypeString)
	}
	if value, ok := eaiuo.mutation.CAEmployeeID(); ok {
		_spec.SetField(exam_applications_ip.FieldCAEmployeeID, field.TypeString, value)
	}
	if eaiuo.mutation.CAEmployeeIDCleared() {
		_spec.ClearField(exam_applications_ip.FieldCAEmployeeID, field.TypeString)
	}
	if value, ok := eaiuo.mutation.CAEmployeeDesignation(); ok {
		_spec.SetField(exam_applications_ip.FieldCAEmployeeDesignation, field.TypeString, value)
	}
	if eaiuo.mutation.CAEmployeeDesignationCleared() {
		_spec.ClearField(exam_applications_ip.FieldCAEmployeeDesignation, field.TypeString)
	}
	if value, ok := eaiuo.mutation.CARemarks(); ok {
		_spec.SetField(exam_applications_ip.FieldCARemarks, field.TypeString, value)
	}
	if eaiuo.mutation.CARemarksCleared() {
		_spec.ClearField(exam_applications_ip.FieldCARemarks, field.TypeString)
	}
	if value, ok := eaiuo.mutation.CADate(); ok {
		_spec.SetField(exam_applications_ip.FieldCADate, field.TypeTime, value)
	}
	if eaiuo.mutation.CADateCleared() {
		_spec.ClearField(exam_applications_ip.FieldCADate, field.TypeTime)
	}
	if value, ok := eaiuo.mutation.NAUserId(); ok {
		_spec.SetField(exam_applications_ip.FieldNAUserId, field.TypeInt32, value)
	}
	if value, ok := eaiuo.mutation.AddedNAUserId(); ok {
		_spec.AddField(exam_applications_ip.FieldNAUserId, field.TypeInt32, value)
	}
	if eaiuo.mutation.NAUserIdCleared() {
		_spec.ClearField(exam_applications_ip.FieldNAUserId, field.TypeInt32)
	}
	if value, ok := eaiuo.mutation.NAUserName(); ok {
		_spec.SetField(exam_applications_ip.FieldNAUserName, field.TypeString, value)
	}
	if eaiuo.mutation.NAUserNameCleared() {
		_spec.ClearField(exam_applications_ip.FieldNAUserName, field.TypeString)
	}
	if value, ok := eaiuo.mutation.NAEmployeeID(); ok {
		_spec.SetField(exam_applications_ip.FieldNAEmployeeID, field.TypeString, value)
	}
	if eaiuo.mutation.NAEmployeeIDCleared() {
		_spec.ClearField(exam_applications_ip.FieldNAEmployeeID, field.TypeString)
	}
	if value, ok := eaiuo.mutation.NAEmployeeDesignation(); ok {
		_spec.SetField(exam_applications_ip.FieldNAEmployeeDesignation, field.TypeString, value)
	}
	if eaiuo.mutation.NAEmployeeDesignationCleared() {
		_spec.ClearField(exam_applications_ip.FieldNAEmployeeDesignation, field.TypeString)
	}
	if value, ok := eaiuo.mutation.NARemarks(); ok {
		_spec.SetField(exam_applications_ip.FieldNARemarks, field.TypeString, value)
	}
	if eaiuo.mutation.NARemarksCleared() {
		_spec.ClearField(exam_applications_ip.FieldNARemarks, field.TypeString)
	}
	if value, ok := eaiuo.mutation.NADate(); ok {
		_spec.SetField(exam_applications_ip.FieldNADate, field.TypeTime, value)
	}
	if eaiuo.mutation.NADateCleared() {
		_spec.ClearField(exam_applications_ip.FieldNADate, field.TypeTime)
	}
	if value, ok := eaiuo.mutation.AppliactionRemarks(); ok {
		_spec.SetField(exam_applications_ip.FieldAppliactionRemarks, field.TypeString, value)
	}
	if eaiuo.mutation.AppliactionRemarksCleared() {
		_spec.ClearField(exam_applications_ip.FieldAppliactionRemarks, field.TypeString)
	}
	if value, ok := eaiuo.mutation.CadrePreferences(); ok {
		_spec.SetField(exam_applications_ip.FieldCadrePreferences, field.TypeJSON, value)
	}
	if value, ok := eaiuo.mutation.AppendedCadrePreferences(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, exam_applications_ip.FieldCadrePreferences, value)
		})
	}
	if eaiuo.mutation.CadrePreferencesCleared() {
		_spec.ClearField(exam_applications_ip.FieldCadrePreferences, field.TypeJSON)
	}
	if value, ok := eaiuo.mutation.CAPreviousRemarks(); ok {
		_spec.SetField(exam_applications_ip.FieldCAPreviousRemarks, field.TypeString, value)
	}
	if eaiuo.mutation.CAPreviousRemarksCleared() {
		_spec.ClearField(exam_applications_ip.FieldCAPreviousRemarks, field.TypeString)
	}
	if value, ok := eaiuo.mutation.PunishmentStatus(); ok {
		_spec.SetField(exam_applications_ip.FieldPunishmentStatus, field.TypeBool, value)
	}
	if eaiuo.mutation.PunishmentStatusCleared() {
		_spec.ClearField(exam_applications_ip.FieldPunishmentStatus, field.TypeBool)
	}
	if value, ok := eaiuo.mutation.DisciplinaryCaseStatus(); ok {
		_spec.SetField(exam_applications_ip.FieldDisciplinaryCaseStatus, field.TypeBool, value)
	}
	if eaiuo.mutation.DisciplinaryCaseStatusCleared() {
		_spec.ClearField(exam_applications_ip.FieldDisciplinaryCaseStatus, field.TypeBool)
	}
	if value, ok := eaiuo.mutation.GenerateHallTicketFlag(); ok {
		_spec.SetField(exam_applications_ip.FieldGenerateHallTicketFlag, field.TypeBool, value)
	}
	if eaiuo.mutation.GenerateHallTicketFlagCleared() {
		_spec.ClearField(exam_applications_ip.FieldGenerateHallTicketFlag, field.TypeBool)
	}
	if value, ok := eaiuo.mutation.HallTicketNumber(); ok {
		_spec.SetField(exam_applications_ip.FieldHallTicketNumber, field.TypeString, value)
	}
	if eaiuo.mutation.HallTicketNumberCleared() {
		_spec.ClearField(exam_applications_ip.FieldHallTicketNumber, field.TypeString)
	}
	if value, ok := eaiuo.mutation.HallTicketGeneratedFlag(); ok {
		_spec.SetField(exam_applications_ip.FieldHallTicketGeneratedFlag, field.TypeBool, value)
	}
	if eaiuo.mutation.HallTicketGeneratedFlagCleared() {
		_spec.ClearField(exam_applications_ip.FieldHallTicketGeneratedFlag, field.TypeBool)
	}
	if value, ok := eaiuo.mutation.GenerateHallTicketFlagByNO(); ok {
		_spec.SetField(exam_applications_ip.FieldGenerateHallTicketFlagByNO, field.TypeBool, value)
	}
	if eaiuo.mutation.GenerateHallTicketFlagByNOCleared() {
		_spec.ClearField(exam_applications_ip.FieldGenerateHallTicketFlagByNO, field.TypeBool)
	}
	if value, ok := eaiuo.mutation.HallTicketGeneratedDate(); ok {
		_spec.SetField(exam_applications_ip.FieldHallTicketGeneratedDate, field.TypeTime, value)
	}
	if eaiuo.mutation.HallTicketGeneratedDateCleared() {
		_spec.ClearField(exam_applications_ip.FieldHallTicketGeneratedDate, field.TypeTime)
	}
	if value, ok := eaiuo.mutation.TemporaryHallTicket(); ok {
		_spec.SetField(exam_applications_ip.FieldTemporaryHallTicket, field.TypeString, value)
	}
	if eaiuo.mutation.TemporaryHallTicketCleared() {
		_spec.ClearField(exam_applications_ip.FieldTemporaryHallTicket, field.TypeString)
	}
	if value, ok := eaiuo.mutation.OptionUsed(); ok {
		_spec.SetField(exam_applications_ip.FieldOptionUsed, field.TypeString, value)
	}
	if eaiuo.mutation.OptionUsedCleared() {
		_spec.ClearField(exam_applications_ip.FieldOptionUsed, field.TypeString)
	}
	if value, ok := eaiuo.mutation.Remarks(); ok {
		_spec.SetField(exam_applications_ip.FieldRemarks, field.TypeString, value)
	}
	if eaiuo.mutation.RemarksCleared() {
		_spec.ClearField(exam_applications_ip.FieldRemarks, field.TypeString)
	}
	if value, ok := eaiuo.mutation.Cadre(); ok {
		_spec.SetField(exam_applications_ip.FieldCadre, field.TypeString, value)
	}
	if eaiuo.mutation.CadreCleared() {
		_spec.ClearField(exam_applications_ip.FieldCadre, field.TypeString)
	}
	if value, ok := eaiuo.mutation.EmployeePost(); ok {
		_spec.SetField(exam_applications_ip.FieldEmployeePost, field.TypeString, value)
	}
	if eaiuo.mutation.EmployeePostCleared() {
		_spec.ClearField(exam_applications_ip.FieldEmployeePost, field.TypeString)
	}
	if value, ok := eaiuo.mutation.DOJInEligiblePost(); ok {
		_spec.SetField(exam_applications_ip.FieldDOJInEligiblePost, field.TypeString, value)
	}
	if eaiuo.mutation.DOJInEligiblePostCleared() {
		_spec.ClearField(exam_applications_ip.FieldDOJInEligiblePost, field.TypeString)
	}
	if value, ok := eaiuo.mutation.DivisionPreferences(); ok {
		_spec.SetField(exam_applications_ip.FieldDivisionPreferences, field.TypeJSON, value)
	}
	if value, ok := eaiuo.mutation.AppendedDivisionPreferences(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, exam_applications_ip.FieldDivisionPreferences, value)
		})
	}
	if eaiuo.mutation.DivisionPreferencesCleared() {
		_spec.ClearField(exam_applications_ip.FieldDivisionPreferences, field.TypeJSON)
	}
	if value, ok := eaiuo.mutation.FacilityName(); ok {
		_spec.SetField(exam_applications_ip.FieldFacilityName, field.TypeString, value)
	}
	if eaiuo.mutation.FacilityNameCleared() {
		_spec.ClearField(exam_applications_ip.FieldFacilityName, field.TypeString)
	}
	if value, ok := eaiuo.mutation.ServiceLength(); ok {
		_spec.SetField(exam_applications_ip.FieldServiceLength, field.TypeJSON, value)
	}
	if value, ok := eaiuo.mutation.AppendedServiceLength(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, exam_applications_ip.FieldServiceLength, value)
		})
	}
	if eaiuo.mutation.ServiceLengthCleared() {
		_spec.ClearField(exam_applications_ip.FieldServiceLength, field.TypeJSON)
	}
	if value, ok := eaiuo.mutation.NonQualifyingService(); ok {
		_spec.SetField(exam_applications_ip.FieldNonQualifyingService, field.TypeJSON, value)
	}
	if value, ok := eaiuo.mutation.AppendedNonQualifyingService(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, exam_applications_ip.FieldNonQualifyingService, value)
		})
	}
	if eaiuo.mutation.NonQualifyingServiceCleared() {
		_spec.ClearField(exam_applications_ip.FieldNonQualifyingService, field.TypeJSON)
	}
	if value, ok := eaiuo.mutation.DCInPresentCadre(); ok {
		_spec.SetField(exam_applications_ip.FieldDCInPresentCadre, field.TypeString, value)
	}
	if eaiuo.mutation.DCInPresentCadreCleared() {
		_spec.ClearField(exam_applications_ip.FieldDCInPresentCadre, field.TypeString)
	}
	if value, ok := eaiuo.mutation.CenterId(); ok {
		_spec.SetField(exam_applications_ip.FieldCenterId, field.TypeInt32, value)
	}
	if value, ok := eaiuo.mutation.AddedCenterId(); ok {
		_spec.AddField(exam_applications_ip.FieldCenterId, field.TypeInt32, value)
	}
	if eaiuo.mutation.CenterIdCleared() {
		_spec.ClearField(exam_applications_ip.FieldCenterId, field.TypeInt32)
	}
	if value, ok := eaiuo.mutation.ClaimingQualifyingService(); ok {
		_spec.SetField(exam_applications_ip.FieldClaimingQualifyingService, field.TypeString, value)
	}
	if eaiuo.mutation.ClaimingQualifyingServiceCleared() {
		_spec.ClearField(exam_applications_ip.FieldClaimingQualifyingService, field.TypeString)
	}
	if value, ok := eaiuo.mutation.DeputationOfficePincode(); ok {
		_spec.SetField(exam_applications_ip.FieldDeputationOfficePincode, field.TypeString, value)
	}
	if eaiuo.mutation.DeputationOfficePincodeCleared() {
		_spec.ClearField(exam_applications_ip.FieldDeputationOfficePincode, field.TypeString)
	}
	if value, ok := eaiuo.mutation.RecommendedStatus(); ok {
		_spec.SetField(exam_applications_ip.FieldRecommendedStatus, field.TypeString, value)
	}
	if eaiuo.mutation.RecommendedStatusCleared() {
		_spec.ClearField(exam_applications_ip.FieldRecommendedStatus, field.TypeString)
	}
	if value, ok := eaiuo.mutation.ApplicationWdlDate(); ok {
		_spec.SetField(exam_applications_ip.FieldApplicationWdlDate, field.TypeTime, value)
	}
	if eaiuo.mutation.ApplicationWdlDateCleared() {
		_spec.ClearField(exam_applications_ip.FieldApplicationWdlDate, field.TypeTime)
	}
	if value, ok := eaiuo.mutation.UpdatedAt(); ok {
		_spec.SetField(exam_applications_ip.FieldUpdatedAt, field.TypeTime, value)
	}
	if eaiuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(exam_applications_ip.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := eaiuo.mutation.UpdatedBy(); ok {
		_spec.SetField(exam_applications_ip.FieldUpdatedBy, field.TypeString, value)
	}
	if eaiuo.mutation.UpdatedByCleared() {
		_spec.ClearField(exam_applications_ip.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := eaiuo.mutation.HallIdentificationNumber(); ok {
		_spec.SetField(exam_applications_ip.FieldHallIdentificationNumber, field.TypeInt32, value)
	}
	if value, ok := eaiuo.mutation.AddedHallIdentificationNumber(); ok {
		_spec.AddField(exam_applications_ip.FieldHallIdentificationNumber, field.TypeInt32, value)
	}
	if eaiuo.mutation.HallIdentificationNumberCleared() {
		_spec.ClearField(exam_applications_ip.FieldHallIdentificationNumber, field.TypeInt32)
	}
	if value, ok := eaiuo.mutation.ExamCenterHall(); ok {
		_spec.SetField(exam_applications_ip.FieldExamCenterHall, field.TypeInt32, value)
	}
	if value, ok := eaiuo.mutation.AddedExamCenterHall(); ok {
		_spec.AddField(exam_applications_ip.FieldExamCenterHall, field.TypeInt32, value)
	}
	if eaiuo.mutation.ExamCenterHallCleared() {
		_spec.ClearField(exam_applications_ip.FieldExamCenterHall, field.TypeInt32)
	}
	if value, ok := eaiuo.mutation.HallName(); ok {
		_spec.SetField(exam_applications_ip.FieldHallName, field.TypeString, value)
	}
	if eaiuo.mutation.HallNameCleared() {
		_spec.ClearField(exam_applications_ip.FieldHallName, field.TypeString)
	}
	if value, ok := eaiuo.mutation.ReportingOfficeID(); ok {
		_spec.SetField(exam_applications_ip.FieldReportingOfficeID, field.TypeString, value)
	}
	if eaiuo.mutation.ReportingOfficeIDCleared() {
		_spec.ClearField(exam_applications_ip.FieldReportingOfficeID, field.TypeString)
	}
	if value, ok := eaiuo.mutation.CACorrected(); ok {
		_spec.SetField(exam_applications_ip.FieldCACorrected, field.TypeString, value)
	}
	if eaiuo.mutation.CACorrectedCleared() {
		_spec.ClearField(exam_applications_ip.FieldCACorrected, field.TypeString)
	}
	if value, ok := eaiuo.mutation.CACorrectedDate(); ok {
		_spec.SetField(exam_applications_ip.FieldCACorrectedDate, field.TypeTime, value)
	}
	if eaiuo.mutation.CACorrectedDateCleared() {
		_spec.ClearField(exam_applications_ip.FieldCACorrectedDate, field.TypeTime)
	}
	if eaiuo.mutation.UsersIPRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_applications_ip.UsersIPRefTable,
			Columns: []string{exam_applications_ip.UsersIPRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usermaster.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eaiuo.mutation.RemovedUsersIPRefIDs(); len(nodes) > 0 && !eaiuo.mutation.UsersIPRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_applications_ip.UsersIPRefTable,
			Columns: []string{exam_applications_ip.UsersIPRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usermaster.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eaiuo.mutation.UsersIPRefIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_applications_ip.UsersIPRefTable,
			Columns: []string{exam_applications_ip.UsersIPRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usermaster.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eaiuo.mutation.CadrePrefRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_applications_ip.CadrePrefRefTable,
			Columns: []string{exam_applications_ip.CadrePrefRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cadre_choice_ip.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eaiuo.mutation.RemovedCadrePrefRefIDs(); len(nodes) > 0 && !eaiuo.mutation.CadrePrefRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_applications_ip.CadrePrefRefTable,
			Columns: []string{exam_applications_ip.CadrePrefRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cadre_choice_ip.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eaiuo.mutation.CadrePrefRefIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_applications_ip.CadrePrefRefTable,
			Columns: []string{exam_applications_ip.CadrePrefRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cadre_choice_ip.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eaiuo.mutation.CirclePrefRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_applications_ip.CirclePrefRefTable,
			Columns: []string{exam_applications_ip.CirclePrefRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(placeofpreferenceip.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eaiuo.mutation.RemovedCirclePrefRefIDs(); len(nodes) > 0 && !eaiuo.mutation.CirclePrefRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_applications_ip.CirclePrefRefTable,
			Columns: []string{exam_applications_ip.CirclePrefRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(placeofpreferenceip.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eaiuo.mutation.CirclePrefRefIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_applications_ip.CirclePrefRefTable,
			Columns: []string{exam_applications_ip.CirclePrefRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(placeofpreferenceip.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eaiuo.mutation.IPApplicationsRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_applications_ip.IPApplicationsRefTable,
			Columns: []string{exam_applications_ip.IPApplicationsRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(recommendationsipapplications.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eaiuo.mutation.RemovedIPApplicationsRefIDs(); len(nodes) > 0 && !eaiuo.mutation.IPApplicationsRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_applications_ip.IPApplicationsRefTable,
			Columns: []string{exam_applications_ip.IPApplicationsRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(recommendationsipapplications.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eaiuo.mutation.IPApplicationsRefIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_applications_ip.IPApplicationsRefTable,
			Columns: []string{exam_applications_ip.IPApplicationsRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(recommendationsipapplications.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eaiuo.mutation.LogDataCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_applications_ip.LogDataTable,
			Columns: []string{exam_applications_ip.LogDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(logs.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eaiuo.mutation.RemovedLogDataIDs(); len(nodes) > 0 && !eaiuo.mutation.LogDataCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_applications_ip.LogDataTable,
			Columns: []string{exam_applications_ip.LogDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(logs.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eaiuo.mutation.LogDataIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_applications_ip.LogDataTable,
			Columns: []string{exam_applications_ip.LogDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(logs.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eaiuo.mutation.ExamCentresCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   exam_applications_ip.ExamCentresTable,
			Columns: []string{exam_applications_ip.ExamCentresColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(center.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eaiuo.mutation.ExamCentresIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   exam_applications_ip.ExamCentresTable,
			Columns: []string{exam_applications_ip.ExamCentresColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(center.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eaiuo.mutation.ExamcitycenterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   exam_applications_ip.ExamcitycenterTable,
			Columns: []string{exam_applications_ip.ExamcitycenterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(examcitycenter.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eaiuo.mutation.ExamcitycenterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   exam_applications_ip.ExamcitycenterTable,
			Columns: []string{exam_applications_ip.ExamcitycenterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(examcitycenter.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eaiuo.mutation.RoleusersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   exam_applications_ip.RoleusersTable,
			Columns: []string{exam_applications_ip.RoleusersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rolemaster.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eaiuo.mutation.RoleusersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   exam_applications_ip.RoleusersTable,
			Columns: []string{exam_applications_ip.RoleusersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rolemaster.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eaiuo.mutation.CircleRefsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   exam_applications_ip.CircleRefsTable,
			Columns: []string{exam_applications_ip.CircleRefsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(circlesummaryforno.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eaiuo.mutation.CircleRefsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   exam_applications_ip.CircleRefsTable,
			Columns: []string{exam_applications_ip.CircleRefsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(circlesummaryforno.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Exam_Applications_IP{config: eaiuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, eaiuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{exam_applications_ip.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	eaiuo.mutation.done = true
	return _node, nil
}
