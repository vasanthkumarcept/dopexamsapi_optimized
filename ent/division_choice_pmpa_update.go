// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"recruit/ent/division_choice_pmpa"
	"recruit/ent/exam_applications_pmpa"
	"recruit/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// DivisionChoicePMPAUpdate is the builder for updating Division_Choice_PMPA entities.
type DivisionChoicePMPAUpdate struct {
	config
	hooks    []Hook
	mutation *DivisionChoicePMPAMutation
}

// Where appends a list predicates to the DivisionChoicePMPAUpdate builder.
func (dcpu *DivisionChoicePMPAUpdate) Where(ps ...predicate.Division_Choice_PMPA) *DivisionChoicePMPAUpdate {
	dcpu.mutation.Where(ps...)
	return dcpu
}

// SetApplicationID sets the "ApplicationID" field.
func (dcpu *DivisionChoicePMPAUpdate) SetApplicationID(i int64) *DivisionChoicePMPAUpdate {
	dcpu.mutation.ResetApplicationID()
	dcpu.mutation.SetApplicationID(i)
	return dcpu
}

// SetNillableApplicationID sets the "ApplicationID" field if the given value is not nil.
func (dcpu *DivisionChoicePMPAUpdate) SetNillableApplicationID(i *int64) *DivisionChoicePMPAUpdate {
	if i != nil {
		dcpu.SetApplicationID(*i)
	}
	return dcpu
}

// AddApplicationID adds i to the "ApplicationID" field.
func (dcpu *DivisionChoicePMPAUpdate) AddApplicationID(i int64) *DivisionChoicePMPAUpdate {
	dcpu.mutation.AddApplicationID(i)
	return dcpu
}

// ClearApplicationID clears the value of the "ApplicationID" field.
func (dcpu *DivisionChoicePMPAUpdate) ClearApplicationID() *DivisionChoicePMPAUpdate {
	dcpu.mutation.ClearApplicationID()
	return dcpu
}

// SetPlacePrefNo sets the "PlacePrefNo" field.
func (dcpu *DivisionChoicePMPAUpdate) SetPlacePrefNo(i int64) *DivisionChoicePMPAUpdate {
	dcpu.mutation.ResetPlacePrefNo()
	dcpu.mutation.SetPlacePrefNo(i)
	return dcpu
}

// SetNillablePlacePrefNo sets the "PlacePrefNo" field if the given value is not nil.
func (dcpu *DivisionChoicePMPAUpdate) SetNillablePlacePrefNo(i *int64) *DivisionChoicePMPAUpdate {
	if i != nil {
		dcpu.SetPlacePrefNo(*i)
	}
	return dcpu
}

// AddPlacePrefNo adds i to the "PlacePrefNo" field.
func (dcpu *DivisionChoicePMPAUpdate) AddPlacePrefNo(i int64) *DivisionChoicePMPAUpdate {
	dcpu.mutation.AddPlacePrefNo(i)
	return dcpu
}

// ClearPlacePrefNo clears the value of the "PlacePrefNo" field.
func (dcpu *DivisionChoicePMPAUpdate) ClearPlacePrefNo() *DivisionChoicePMPAUpdate {
	dcpu.mutation.ClearPlacePrefNo()
	return dcpu
}

// SetPlacePrefValue sets the "PlacePrefValue" field.
func (dcpu *DivisionChoicePMPAUpdate) SetPlacePrefValue(s string) *DivisionChoicePMPAUpdate {
	dcpu.mutation.SetPlacePrefValue(s)
	return dcpu
}

// SetNillablePlacePrefValue sets the "PlacePrefValue" field if the given value is not nil.
func (dcpu *DivisionChoicePMPAUpdate) SetNillablePlacePrefValue(s *string) *DivisionChoicePMPAUpdate {
	if s != nil {
		dcpu.SetPlacePrefValue(*s)
	}
	return dcpu
}

// ClearPlacePrefValue clears the value of the "PlacePrefValue" field.
func (dcpu *DivisionChoicePMPAUpdate) ClearPlacePrefValue() *DivisionChoicePMPAUpdate {
	dcpu.mutation.ClearPlacePrefValue()
	return dcpu
}

// SetEmployeeID sets the "EmployeeID" field.
func (dcpu *DivisionChoicePMPAUpdate) SetEmployeeID(i int64) *DivisionChoicePMPAUpdate {
	dcpu.mutation.ResetEmployeeID()
	dcpu.mutation.SetEmployeeID(i)
	return dcpu
}

// SetNillableEmployeeID sets the "EmployeeID" field if the given value is not nil.
func (dcpu *DivisionChoicePMPAUpdate) SetNillableEmployeeID(i *int64) *DivisionChoicePMPAUpdate {
	if i != nil {
		dcpu.SetEmployeeID(*i)
	}
	return dcpu
}

// AddEmployeeID adds i to the "EmployeeID" field.
func (dcpu *DivisionChoicePMPAUpdate) AddEmployeeID(i int64) *DivisionChoicePMPAUpdate {
	dcpu.mutation.AddEmployeeID(i)
	return dcpu
}

// ClearEmployeeID clears the value of the "EmployeeID" field.
func (dcpu *DivisionChoicePMPAUpdate) ClearEmployeeID() *DivisionChoicePMPAUpdate {
	dcpu.mutation.ClearEmployeeID()
	return dcpu
}

// SetUpdatedAt sets the "UpdatedAt" field.
func (dcpu *DivisionChoicePMPAUpdate) SetUpdatedAt(t time.Time) *DivisionChoicePMPAUpdate {
	dcpu.mutation.SetUpdatedAt(t)
	return dcpu
}

// SetNillableUpdatedAt sets the "UpdatedAt" field if the given value is not nil.
func (dcpu *DivisionChoicePMPAUpdate) SetNillableUpdatedAt(t *time.Time) *DivisionChoicePMPAUpdate {
	if t != nil {
		dcpu.SetUpdatedAt(*t)
	}
	return dcpu
}

// ClearUpdatedAt clears the value of the "UpdatedAt" field.
func (dcpu *DivisionChoicePMPAUpdate) ClearUpdatedAt() *DivisionChoicePMPAUpdate {
	dcpu.mutation.ClearUpdatedAt()
	return dcpu
}

// SetUpdatedBy sets the "UpdatedBy" field.
func (dcpu *DivisionChoicePMPAUpdate) SetUpdatedBy(s string) *DivisionChoicePMPAUpdate {
	dcpu.mutation.SetUpdatedBy(s)
	return dcpu
}

// SetNillableUpdatedBy sets the "UpdatedBy" field if the given value is not nil.
func (dcpu *DivisionChoicePMPAUpdate) SetNillableUpdatedBy(s *string) *DivisionChoicePMPAUpdate {
	if s != nil {
		dcpu.SetUpdatedBy(*s)
	}
	return dcpu
}

// ClearUpdatedBy clears the value of the "UpdatedBy" field.
func (dcpu *DivisionChoicePMPAUpdate) ClearUpdatedBy() *DivisionChoicePMPAUpdate {
	dcpu.mutation.ClearUpdatedBy()
	return dcpu
}

// SetApplnPMPARefID sets the "ApplnPMPA_Ref" edge to the Exam_Applications_PMPA entity by ID.
func (dcpu *DivisionChoicePMPAUpdate) SetApplnPMPARefID(id int64) *DivisionChoicePMPAUpdate {
	dcpu.mutation.SetApplnPMPARefID(id)
	return dcpu
}

// SetNillableApplnPMPARefID sets the "ApplnPMPA_Ref" edge to the Exam_Applications_PMPA entity by ID if the given value is not nil.
func (dcpu *DivisionChoicePMPAUpdate) SetNillableApplnPMPARefID(id *int64) *DivisionChoicePMPAUpdate {
	if id != nil {
		dcpu = dcpu.SetApplnPMPARefID(*id)
	}
	return dcpu
}

// SetApplnPMPARef sets the "ApplnPMPA_Ref" edge to the Exam_Applications_PMPA entity.
func (dcpu *DivisionChoicePMPAUpdate) SetApplnPMPARef(e *Exam_Applications_PMPA) *DivisionChoicePMPAUpdate {
	return dcpu.SetApplnPMPARefID(e.ID)
}

// Mutation returns the DivisionChoicePMPAMutation object of the builder.
func (dcpu *DivisionChoicePMPAUpdate) Mutation() *DivisionChoicePMPAMutation {
	return dcpu.mutation
}

// ClearApplnPMPARef clears the "ApplnPMPA_Ref" edge to the Exam_Applications_PMPA entity.
func (dcpu *DivisionChoicePMPAUpdate) ClearApplnPMPARef() *DivisionChoicePMPAUpdate {
	dcpu.mutation.ClearApplnPMPARef()
	return dcpu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (dcpu *DivisionChoicePMPAUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, dcpu.sqlSave, dcpu.mutation, dcpu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (dcpu *DivisionChoicePMPAUpdate) SaveX(ctx context.Context) int {
	affected, err := dcpu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (dcpu *DivisionChoicePMPAUpdate) Exec(ctx context.Context) error {
	_, err := dcpu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dcpu *DivisionChoicePMPAUpdate) ExecX(ctx context.Context) {
	if err := dcpu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (dcpu *DivisionChoicePMPAUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(division_choice_pmpa.Table, division_choice_pmpa.Columns, sqlgraph.NewFieldSpec(division_choice_pmpa.FieldID, field.TypeInt32))
	if ps := dcpu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := dcpu.mutation.ApplicationID(); ok {
		_spec.SetField(division_choice_pmpa.FieldApplicationID, field.TypeInt64, value)
	}
	if value, ok := dcpu.mutation.AddedApplicationID(); ok {
		_spec.AddField(division_choice_pmpa.FieldApplicationID, field.TypeInt64, value)
	}
	if dcpu.mutation.ApplicationIDCleared() {
		_spec.ClearField(division_choice_pmpa.FieldApplicationID, field.TypeInt64)
	}
	if value, ok := dcpu.mutation.PlacePrefNo(); ok {
		_spec.SetField(division_choice_pmpa.FieldPlacePrefNo, field.TypeInt64, value)
	}
	if value, ok := dcpu.mutation.AddedPlacePrefNo(); ok {
		_spec.AddField(division_choice_pmpa.FieldPlacePrefNo, field.TypeInt64, value)
	}
	if dcpu.mutation.PlacePrefNoCleared() {
		_spec.ClearField(division_choice_pmpa.FieldPlacePrefNo, field.TypeInt64)
	}
	if value, ok := dcpu.mutation.PlacePrefValue(); ok {
		_spec.SetField(division_choice_pmpa.FieldPlacePrefValue, field.TypeString, value)
	}
	if dcpu.mutation.PlacePrefValueCleared() {
		_spec.ClearField(division_choice_pmpa.FieldPlacePrefValue, field.TypeString)
	}
	if value, ok := dcpu.mutation.EmployeeID(); ok {
		_spec.SetField(division_choice_pmpa.FieldEmployeeID, field.TypeInt64, value)
	}
	if value, ok := dcpu.mutation.AddedEmployeeID(); ok {
		_spec.AddField(division_choice_pmpa.FieldEmployeeID, field.TypeInt64, value)
	}
	if dcpu.mutation.EmployeeIDCleared() {
		_spec.ClearField(division_choice_pmpa.FieldEmployeeID, field.TypeInt64)
	}
	if value, ok := dcpu.mutation.UpdatedAt(); ok {
		_spec.SetField(division_choice_pmpa.FieldUpdatedAt, field.TypeTime, value)
	}
	if dcpu.mutation.UpdatedAtCleared() {
		_spec.ClearField(division_choice_pmpa.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := dcpu.mutation.UpdatedBy(); ok {
		_spec.SetField(division_choice_pmpa.FieldUpdatedBy, field.TypeString, value)
	}
	if dcpu.mutation.UpdatedByCleared() {
		_spec.ClearField(division_choice_pmpa.FieldUpdatedBy, field.TypeString)
	}
	if dcpu.mutation.ApplnPMPARefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   division_choice_pmpa.ApplnPMPARefTable,
			Columns: []string{division_choice_pmpa.ApplnPMPARefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_pmpa.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dcpu.mutation.ApplnPMPARefIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   division_choice_pmpa.ApplnPMPARefTable,
			Columns: []string{division_choice_pmpa.ApplnPMPARefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_pmpa.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, dcpu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{division_choice_pmpa.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	dcpu.mutation.done = true
	return n, nil
}

// DivisionChoicePMPAUpdateOne is the builder for updating a single Division_Choice_PMPA entity.
type DivisionChoicePMPAUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DivisionChoicePMPAMutation
}

// SetApplicationID sets the "ApplicationID" field.
func (dcpuo *DivisionChoicePMPAUpdateOne) SetApplicationID(i int64) *DivisionChoicePMPAUpdateOne {
	dcpuo.mutation.ResetApplicationID()
	dcpuo.mutation.SetApplicationID(i)
	return dcpuo
}

// SetNillableApplicationID sets the "ApplicationID" field if the given value is not nil.
func (dcpuo *DivisionChoicePMPAUpdateOne) SetNillableApplicationID(i *int64) *DivisionChoicePMPAUpdateOne {
	if i != nil {
		dcpuo.SetApplicationID(*i)
	}
	return dcpuo
}

// AddApplicationID adds i to the "ApplicationID" field.
func (dcpuo *DivisionChoicePMPAUpdateOne) AddApplicationID(i int64) *DivisionChoicePMPAUpdateOne {
	dcpuo.mutation.AddApplicationID(i)
	return dcpuo
}

// ClearApplicationID clears the value of the "ApplicationID" field.
func (dcpuo *DivisionChoicePMPAUpdateOne) ClearApplicationID() *DivisionChoicePMPAUpdateOne {
	dcpuo.mutation.ClearApplicationID()
	return dcpuo
}

// SetPlacePrefNo sets the "PlacePrefNo" field.
func (dcpuo *DivisionChoicePMPAUpdateOne) SetPlacePrefNo(i int64) *DivisionChoicePMPAUpdateOne {
	dcpuo.mutation.ResetPlacePrefNo()
	dcpuo.mutation.SetPlacePrefNo(i)
	return dcpuo
}

// SetNillablePlacePrefNo sets the "PlacePrefNo" field if the given value is not nil.
func (dcpuo *DivisionChoicePMPAUpdateOne) SetNillablePlacePrefNo(i *int64) *DivisionChoicePMPAUpdateOne {
	if i != nil {
		dcpuo.SetPlacePrefNo(*i)
	}
	return dcpuo
}

// AddPlacePrefNo adds i to the "PlacePrefNo" field.
func (dcpuo *DivisionChoicePMPAUpdateOne) AddPlacePrefNo(i int64) *DivisionChoicePMPAUpdateOne {
	dcpuo.mutation.AddPlacePrefNo(i)
	return dcpuo
}

// ClearPlacePrefNo clears the value of the "PlacePrefNo" field.
func (dcpuo *DivisionChoicePMPAUpdateOne) ClearPlacePrefNo() *DivisionChoicePMPAUpdateOne {
	dcpuo.mutation.ClearPlacePrefNo()
	return dcpuo
}

// SetPlacePrefValue sets the "PlacePrefValue" field.
func (dcpuo *DivisionChoicePMPAUpdateOne) SetPlacePrefValue(s string) *DivisionChoicePMPAUpdateOne {
	dcpuo.mutation.SetPlacePrefValue(s)
	return dcpuo
}

// SetNillablePlacePrefValue sets the "PlacePrefValue" field if the given value is not nil.
func (dcpuo *DivisionChoicePMPAUpdateOne) SetNillablePlacePrefValue(s *string) *DivisionChoicePMPAUpdateOne {
	if s != nil {
		dcpuo.SetPlacePrefValue(*s)
	}
	return dcpuo
}

// ClearPlacePrefValue clears the value of the "PlacePrefValue" field.
func (dcpuo *DivisionChoicePMPAUpdateOne) ClearPlacePrefValue() *DivisionChoicePMPAUpdateOne {
	dcpuo.mutation.ClearPlacePrefValue()
	return dcpuo
}

// SetEmployeeID sets the "EmployeeID" field.
func (dcpuo *DivisionChoicePMPAUpdateOne) SetEmployeeID(i int64) *DivisionChoicePMPAUpdateOne {
	dcpuo.mutation.ResetEmployeeID()
	dcpuo.mutation.SetEmployeeID(i)
	return dcpuo
}

// SetNillableEmployeeID sets the "EmployeeID" field if the given value is not nil.
func (dcpuo *DivisionChoicePMPAUpdateOne) SetNillableEmployeeID(i *int64) *DivisionChoicePMPAUpdateOne {
	if i != nil {
		dcpuo.SetEmployeeID(*i)
	}
	return dcpuo
}

// AddEmployeeID adds i to the "EmployeeID" field.
func (dcpuo *DivisionChoicePMPAUpdateOne) AddEmployeeID(i int64) *DivisionChoicePMPAUpdateOne {
	dcpuo.mutation.AddEmployeeID(i)
	return dcpuo
}

// ClearEmployeeID clears the value of the "EmployeeID" field.
func (dcpuo *DivisionChoicePMPAUpdateOne) ClearEmployeeID() *DivisionChoicePMPAUpdateOne {
	dcpuo.mutation.ClearEmployeeID()
	return dcpuo
}

// SetUpdatedAt sets the "UpdatedAt" field.
func (dcpuo *DivisionChoicePMPAUpdateOne) SetUpdatedAt(t time.Time) *DivisionChoicePMPAUpdateOne {
	dcpuo.mutation.SetUpdatedAt(t)
	return dcpuo
}

// SetNillableUpdatedAt sets the "UpdatedAt" field if the given value is not nil.
func (dcpuo *DivisionChoicePMPAUpdateOne) SetNillableUpdatedAt(t *time.Time) *DivisionChoicePMPAUpdateOne {
	if t != nil {
		dcpuo.SetUpdatedAt(*t)
	}
	return dcpuo
}

// ClearUpdatedAt clears the value of the "UpdatedAt" field.
func (dcpuo *DivisionChoicePMPAUpdateOne) ClearUpdatedAt() *DivisionChoicePMPAUpdateOne {
	dcpuo.mutation.ClearUpdatedAt()
	return dcpuo
}

// SetUpdatedBy sets the "UpdatedBy" field.
func (dcpuo *DivisionChoicePMPAUpdateOne) SetUpdatedBy(s string) *DivisionChoicePMPAUpdateOne {
	dcpuo.mutation.SetUpdatedBy(s)
	return dcpuo
}

// SetNillableUpdatedBy sets the "UpdatedBy" field if the given value is not nil.
func (dcpuo *DivisionChoicePMPAUpdateOne) SetNillableUpdatedBy(s *string) *DivisionChoicePMPAUpdateOne {
	if s != nil {
		dcpuo.SetUpdatedBy(*s)
	}
	return dcpuo
}

// ClearUpdatedBy clears the value of the "UpdatedBy" field.
func (dcpuo *DivisionChoicePMPAUpdateOne) ClearUpdatedBy() *DivisionChoicePMPAUpdateOne {
	dcpuo.mutation.ClearUpdatedBy()
	return dcpuo
}

// SetApplnPMPARefID sets the "ApplnPMPA_Ref" edge to the Exam_Applications_PMPA entity by ID.
func (dcpuo *DivisionChoicePMPAUpdateOne) SetApplnPMPARefID(id int64) *DivisionChoicePMPAUpdateOne {
	dcpuo.mutation.SetApplnPMPARefID(id)
	return dcpuo
}

// SetNillableApplnPMPARefID sets the "ApplnPMPA_Ref" edge to the Exam_Applications_PMPA entity by ID if the given value is not nil.
func (dcpuo *DivisionChoicePMPAUpdateOne) SetNillableApplnPMPARefID(id *int64) *DivisionChoicePMPAUpdateOne {
	if id != nil {
		dcpuo = dcpuo.SetApplnPMPARefID(*id)
	}
	return dcpuo
}

// SetApplnPMPARef sets the "ApplnPMPA_Ref" edge to the Exam_Applications_PMPA entity.
func (dcpuo *DivisionChoicePMPAUpdateOne) SetApplnPMPARef(e *Exam_Applications_PMPA) *DivisionChoicePMPAUpdateOne {
	return dcpuo.SetApplnPMPARefID(e.ID)
}

// Mutation returns the DivisionChoicePMPAMutation object of the builder.
func (dcpuo *DivisionChoicePMPAUpdateOne) Mutation() *DivisionChoicePMPAMutation {
	return dcpuo.mutation
}

// ClearApplnPMPARef clears the "ApplnPMPA_Ref" edge to the Exam_Applications_PMPA entity.
func (dcpuo *DivisionChoicePMPAUpdateOne) ClearApplnPMPARef() *DivisionChoicePMPAUpdateOne {
	dcpuo.mutation.ClearApplnPMPARef()
	return dcpuo
}

// Where appends a list predicates to the DivisionChoicePMPAUpdate builder.
func (dcpuo *DivisionChoicePMPAUpdateOne) Where(ps ...predicate.Division_Choice_PMPA) *DivisionChoicePMPAUpdateOne {
	dcpuo.mutation.Where(ps...)
	return dcpuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (dcpuo *DivisionChoicePMPAUpdateOne) Select(field string, fields ...string) *DivisionChoicePMPAUpdateOne {
	dcpuo.fields = append([]string{field}, fields...)
	return dcpuo
}

// Save executes the query and returns the updated Division_Choice_PMPA entity.
func (dcpuo *DivisionChoicePMPAUpdateOne) Save(ctx context.Context) (*Division_Choice_PMPA, error) {
	return withHooks(ctx, dcpuo.sqlSave, dcpuo.mutation, dcpuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (dcpuo *DivisionChoicePMPAUpdateOne) SaveX(ctx context.Context) *Division_Choice_PMPA {
	node, err := dcpuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (dcpuo *DivisionChoicePMPAUpdateOne) Exec(ctx context.Context) error {
	_, err := dcpuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dcpuo *DivisionChoicePMPAUpdateOne) ExecX(ctx context.Context) {
	if err := dcpuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (dcpuo *DivisionChoicePMPAUpdateOne) sqlSave(ctx context.Context) (_node *Division_Choice_PMPA, err error) {
	_spec := sqlgraph.NewUpdateSpec(division_choice_pmpa.Table, division_choice_pmpa.Columns, sqlgraph.NewFieldSpec(division_choice_pmpa.FieldID, field.TypeInt32))
	id, ok := dcpuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Division_Choice_PMPA.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := dcpuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, division_choice_pmpa.FieldID)
		for _, f := range fields {
			if !division_choice_pmpa.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != division_choice_pmpa.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := dcpuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := dcpuo.mutation.ApplicationID(); ok {
		_spec.SetField(division_choice_pmpa.FieldApplicationID, field.TypeInt64, value)
	}
	if value, ok := dcpuo.mutation.AddedApplicationID(); ok {
		_spec.AddField(division_choice_pmpa.FieldApplicationID, field.TypeInt64, value)
	}
	if dcpuo.mutation.ApplicationIDCleared() {
		_spec.ClearField(division_choice_pmpa.FieldApplicationID, field.TypeInt64)
	}
	if value, ok := dcpuo.mutation.PlacePrefNo(); ok {
		_spec.SetField(division_choice_pmpa.FieldPlacePrefNo, field.TypeInt64, value)
	}
	if value, ok := dcpuo.mutation.AddedPlacePrefNo(); ok {
		_spec.AddField(division_choice_pmpa.FieldPlacePrefNo, field.TypeInt64, value)
	}
	if dcpuo.mutation.PlacePrefNoCleared() {
		_spec.ClearField(division_choice_pmpa.FieldPlacePrefNo, field.TypeInt64)
	}
	if value, ok := dcpuo.mutation.PlacePrefValue(); ok {
		_spec.SetField(division_choice_pmpa.FieldPlacePrefValue, field.TypeString, value)
	}
	if dcpuo.mutation.PlacePrefValueCleared() {
		_spec.ClearField(division_choice_pmpa.FieldPlacePrefValue, field.TypeString)
	}
	if value, ok := dcpuo.mutation.EmployeeID(); ok {
		_spec.SetField(division_choice_pmpa.FieldEmployeeID, field.TypeInt64, value)
	}
	if value, ok := dcpuo.mutation.AddedEmployeeID(); ok {
		_spec.AddField(division_choice_pmpa.FieldEmployeeID, field.TypeInt64, value)
	}
	if dcpuo.mutation.EmployeeIDCleared() {
		_spec.ClearField(division_choice_pmpa.FieldEmployeeID, field.TypeInt64)
	}
	if value, ok := dcpuo.mutation.UpdatedAt(); ok {
		_spec.SetField(division_choice_pmpa.FieldUpdatedAt, field.TypeTime, value)
	}
	if dcpuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(division_choice_pmpa.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := dcpuo.mutation.UpdatedBy(); ok {
		_spec.SetField(division_choice_pmpa.FieldUpdatedBy, field.TypeString, value)
	}
	if dcpuo.mutation.UpdatedByCleared() {
		_spec.ClearField(division_choice_pmpa.FieldUpdatedBy, field.TypeString)
	}
	if dcpuo.mutation.ApplnPMPARefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   division_choice_pmpa.ApplnPMPARefTable,
			Columns: []string{division_choice_pmpa.ApplnPMPARefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_pmpa.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dcpuo.mutation.ApplnPMPARefIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   division_choice_pmpa.ApplnPMPARefTable,
			Columns: []string{division_choice_pmpa.ApplnPMPARefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_pmpa.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Division_Choice_PMPA{config: dcpuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, dcpuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{division_choice_pmpa.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	dcpuo.mutation.done = true
	return _node, nil
}
