// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"recruit/ent/ageeligibility"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// AgeEligibility is the model entity for the AgeEligibility schema.
type AgeEligibility struct {
	config `json:"-"`
	// ID of the ent.
	ID int32 `json:"id,omitempty"`
	// EligibillityCode holds the value of the "EligibillityCode" field.
	EligibillityCode int32 `json:"EligibillityCode,omitempty"`
	// Age holds the value of the "Age" field.
	Age int32 `json:"Age,omitempty"`
	// CategoryID holds the value of the "CategoryID" field.
	CategoryID   int32 `json:"CategoryID,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AgeEligibility) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case ageeligibility.FieldID, ageeligibility.FieldEligibillityCode, ageeligibility.FieldAge, ageeligibility.FieldCategoryID:
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AgeEligibility fields.
func (ae *AgeEligibility) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case ageeligibility.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ae.ID = int32(value.Int64)
		case ageeligibility.FieldEligibillityCode:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field EligibillityCode", values[i])
			} else if value.Valid {
				ae.EligibillityCode = int32(value.Int64)
			}
		case ageeligibility.FieldAge:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field Age", values[i])
			} else if value.Valid {
				ae.Age = int32(value.Int64)
			}
		case ageeligibility.FieldCategoryID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field CategoryID", values[i])
			} else if value.Valid {
				ae.CategoryID = int32(value.Int64)
			}
		default:
			ae.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the AgeEligibility.
// This includes values selected through modifiers, order, etc.
func (ae *AgeEligibility) Value(name string) (ent.Value, error) {
	return ae.selectValues.Get(name)
}

// Update returns a builder for updating this AgeEligibility.
// Note that you need to call AgeEligibility.Unwrap() before calling this method if this AgeEligibility
// was returned from a transaction, and the transaction was committed or rolled back.
func (ae *AgeEligibility) Update() *AgeEligibilityUpdateOne {
	return NewAgeEligibilityClient(ae.config).UpdateOne(ae)
}

// Unwrap unwraps the AgeEligibility entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ae *AgeEligibility) Unwrap() *AgeEligibility {
	_tx, ok := ae.config.driver.(*txDriver)
	if !ok {
		panic("ent: AgeEligibility is not a transactional entity")
	}
	ae.config.driver = _tx.drv
	return ae
}

// String implements the fmt.Stringer.
func (ae *AgeEligibility) String() string {
	var builder strings.Builder
	builder.WriteString("AgeEligibility(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ae.ID))
	builder.WriteString("EligibillityCode=")
	builder.WriteString(fmt.Sprintf("%v", ae.EligibillityCode))
	builder.WriteString(", ")
	builder.WriteString("Age=")
	builder.WriteString(fmt.Sprintf("%v", ae.Age))
	builder.WriteString(", ")
	builder.WriteString("CategoryID=")
	builder.WriteString(fmt.Sprintf("%v", ae.CategoryID))
	builder.WriteByte(')')
	return builder.String()
}

// AgeEligibilities is a parsable slice of AgeEligibility.
type AgeEligibilities []*AgeEligibility
