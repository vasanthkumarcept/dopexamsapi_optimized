// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"
	"recruit/ent/exam_application_mtspmmg"
	"recruit/ent/predicate"
	"recruit/ent/recommendationsmtspmmgapplications"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// RecommendationsMTSPMMGApplicationsQuery is the builder for querying RecommendationsMTSPMMGApplications entities.
type RecommendationsMTSPMMGApplicationsQuery struct {
	config
	ctx          *QueryContext
	order        []recommendationsmtspmmgapplications.OrderOption
	inters       []Interceptor
	predicates   []predicate.RecommendationsMTSPMMGApplications
	withApplnRef *ExamApplicationMTSPMMGQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the RecommendationsMTSPMMGApplicationsQuery builder.
func (rmaq *RecommendationsMTSPMMGApplicationsQuery) Where(ps ...predicate.RecommendationsMTSPMMGApplications) *RecommendationsMTSPMMGApplicationsQuery {
	rmaq.predicates = append(rmaq.predicates, ps...)
	return rmaq
}

// Limit the number of records to be returned by this query.
func (rmaq *RecommendationsMTSPMMGApplicationsQuery) Limit(limit int) *RecommendationsMTSPMMGApplicationsQuery {
	rmaq.ctx.Limit = &limit
	return rmaq
}

// Offset to start from.
func (rmaq *RecommendationsMTSPMMGApplicationsQuery) Offset(offset int) *RecommendationsMTSPMMGApplicationsQuery {
	rmaq.ctx.Offset = &offset
	return rmaq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (rmaq *RecommendationsMTSPMMGApplicationsQuery) Unique(unique bool) *RecommendationsMTSPMMGApplicationsQuery {
	rmaq.ctx.Unique = &unique
	return rmaq
}

// Order specifies how the records should be ordered.
func (rmaq *RecommendationsMTSPMMGApplicationsQuery) Order(o ...recommendationsmtspmmgapplications.OrderOption) *RecommendationsMTSPMMGApplicationsQuery {
	rmaq.order = append(rmaq.order, o...)
	return rmaq
}

// QueryApplnRef chains the current query on the "ApplnRef" edge.
func (rmaq *RecommendationsMTSPMMGApplicationsQuery) QueryApplnRef() *ExamApplicationMTSPMMGQuery {
	query := (&ExamApplicationMTSPMMGClient{config: rmaq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := rmaq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := rmaq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(recommendationsmtspmmgapplications.Table, recommendationsmtspmmgapplications.FieldID, selector),
			sqlgraph.To(exam_application_mtspmmg.Table, exam_application_mtspmmg.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, recommendationsmtspmmgapplications.ApplnRefTable, recommendationsmtspmmgapplications.ApplnRefColumn),
		)
		fromU = sqlgraph.SetNeighbors(rmaq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first RecommendationsMTSPMMGApplications entity from the query.
// Returns a *NotFoundError when no RecommendationsMTSPMMGApplications was found.
func (rmaq *RecommendationsMTSPMMGApplicationsQuery) First(ctx context.Context) (*RecommendationsMTSPMMGApplications, error) {
	nodes, err := rmaq.Limit(1).All(setContextOp(ctx, rmaq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{recommendationsmtspmmgapplications.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (rmaq *RecommendationsMTSPMMGApplicationsQuery) FirstX(ctx context.Context) *RecommendationsMTSPMMGApplications {
	node, err := rmaq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first RecommendationsMTSPMMGApplications ID from the query.
// Returns a *NotFoundError when no RecommendationsMTSPMMGApplications ID was found.
func (rmaq *RecommendationsMTSPMMGApplicationsQuery) FirstID(ctx context.Context) (id int64, err error) {
	var ids []int64
	if ids, err = rmaq.Limit(1).IDs(setContextOp(ctx, rmaq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{recommendationsmtspmmgapplications.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (rmaq *RecommendationsMTSPMMGApplicationsQuery) FirstIDX(ctx context.Context) int64 {
	id, err := rmaq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single RecommendationsMTSPMMGApplications entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one RecommendationsMTSPMMGApplications entity is found.
// Returns a *NotFoundError when no RecommendationsMTSPMMGApplications entities are found.
func (rmaq *RecommendationsMTSPMMGApplicationsQuery) Only(ctx context.Context) (*RecommendationsMTSPMMGApplications, error) {
	nodes, err := rmaq.Limit(2).All(setContextOp(ctx, rmaq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{recommendationsmtspmmgapplications.Label}
	default:
		return nil, &NotSingularError{recommendationsmtspmmgapplications.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (rmaq *RecommendationsMTSPMMGApplicationsQuery) OnlyX(ctx context.Context) *RecommendationsMTSPMMGApplications {
	node, err := rmaq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only RecommendationsMTSPMMGApplications ID in the query.
// Returns a *NotSingularError when more than one RecommendationsMTSPMMGApplications ID is found.
// Returns a *NotFoundError when no entities are found.
func (rmaq *RecommendationsMTSPMMGApplicationsQuery) OnlyID(ctx context.Context) (id int64, err error) {
	var ids []int64
	if ids, err = rmaq.Limit(2).IDs(setContextOp(ctx, rmaq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{recommendationsmtspmmgapplications.Label}
	default:
		err = &NotSingularError{recommendationsmtspmmgapplications.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (rmaq *RecommendationsMTSPMMGApplicationsQuery) OnlyIDX(ctx context.Context) int64 {
	id, err := rmaq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of RecommendationsMTSPMMGApplicationsSlice.
func (rmaq *RecommendationsMTSPMMGApplicationsQuery) All(ctx context.Context) ([]*RecommendationsMTSPMMGApplications, error) {
	ctx = setContextOp(ctx, rmaq.ctx, "All")
	if err := rmaq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*RecommendationsMTSPMMGApplications, *RecommendationsMTSPMMGApplicationsQuery]()
	return withInterceptors[[]*RecommendationsMTSPMMGApplications](ctx, rmaq, qr, rmaq.inters)
}

// AllX is like All, but panics if an error occurs.
func (rmaq *RecommendationsMTSPMMGApplicationsQuery) AllX(ctx context.Context) []*RecommendationsMTSPMMGApplications {
	nodes, err := rmaq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of RecommendationsMTSPMMGApplications IDs.
func (rmaq *RecommendationsMTSPMMGApplicationsQuery) IDs(ctx context.Context) (ids []int64, err error) {
	if rmaq.ctx.Unique == nil && rmaq.path != nil {
		rmaq.Unique(true)
	}
	ctx = setContextOp(ctx, rmaq.ctx, "IDs")
	if err = rmaq.Select(recommendationsmtspmmgapplications.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (rmaq *RecommendationsMTSPMMGApplicationsQuery) IDsX(ctx context.Context) []int64 {
	ids, err := rmaq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (rmaq *RecommendationsMTSPMMGApplicationsQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, rmaq.ctx, "Count")
	if err := rmaq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, rmaq, querierCount[*RecommendationsMTSPMMGApplicationsQuery](), rmaq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (rmaq *RecommendationsMTSPMMGApplicationsQuery) CountX(ctx context.Context) int {
	count, err := rmaq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (rmaq *RecommendationsMTSPMMGApplicationsQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, rmaq.ctx, "Exist")
	switch _, err := rmaq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (rmaq *RecommendationsMTSPMMGApplicationsQuery) ExistX(ctx context.Context) bool {
	exist, err := rmaq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the RecommendationsMTSPMMGApplicationsQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (rmaq *RecommendationsMTSPMMGApplicationsQuery) Clone() *RecommendationsMTSPMMGApplicationsQuery {
	if rmaq == nil {
		return nil
	}
	return &RecommendationsMTSPMMGApplicationsQuery{
		config:       rmaq.config,
		ctx:          rmaq.ctx.Clone(),
		order:        append([]recommendationsmtspmmgapplications.OrderOption{}, rmaq.order...),
		inters:       append([]Interceptor{}, rmaq.inters...),
		predicates:   append([]predicate.RecommendationsMTSPMMGApplications{}, rmaq.predicates...),
		withApplnRef: rmaq.withApplnRef.Clone(),
		// clone intermediate query.
		sql:  rmaq.sql.Clone(),
		path: rmaq.path,
	}
}

// WithApplnRef tells the query-builder to eager-load the nodes that are connected to
// the "ApplnRef" edge. The optional arguments are used to configure the query builder of the edge.
func (rmaq *RecommendationsMTSPMMGApplicationsQuery) WithApplnRef(opts ...func(*ExamApplicationMTSPMMGQuery)) *RecommendationsMTSPMMGApplicationsQuery {
	query := (&ExamApplicationMTSPMMGClient{config: rmaq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	rmaq.withApplnRef = query
	return rmaq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		ApplicationID int64 `json:"ApplicationID,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.RecommendationsMTSPMMGApplications.Query().
//		GroupBy(recommendationsmtspmmgapplications.FieldApplicationID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (rmaq *RecommendationsMTSPMMGApplicationsQuery) GroupBy(field string, fields ...string) *RecommendationsMTSPMMGApplicationsGroupBy {
	rmaq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &RecommendationsMTSPMMGApplicationsGroupBy{build: rmaq}
	grbuild.flds = &rmaq.ctx.Fields
	grbuild.label = recommendationsmtspmmgapplications.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		ApplicationID int64 `json:"ApplicationID,omitempty"`
//	}
//
//	client.RecommendationsMTSPMMGApplications.Query().
//		Select(recommendationsmtspmmgapplications.FieldApplicationID).
//		Scan(ctx, &v)
func (rmaq *RecommendationsMTSPMMGApplicationsQuery) Select(fields ...string) *RecommendationsMTSPMMGApplicationsSelect {
	rmaq.ctx.Fields = append(rmaq.ctx.Fields, fields...)
	sbuild := &RecommendationsMTSPMMGApplicationsSelect{RecommendationsMTSPMMGApplicationsQuery: rmaq}
	sbuild.label = recommendationsmtspmmgapplications.Label
	sbuild.flds, sbuild.scan = &rmaq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a RecommendationsMTSPMMGApplicationsSelect configured with the given aggregations.
func (rmaq *RecommendationsMTSPMMGApplicationsQuery) Aggregate(fns ...AggregateFunc) *RecommendationsMTSPMMGApplicationsSelect {
	return rmaq.Select().Aggregate(fns...)
}

func (rmaq *RecommendationsMTSPMMGApplicationsQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range rmaq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, rmaq); err != nil {
				return err
			}
		}
	}
	for _, f := range rmaq.ctx.Fields {
		if !recommendationsmtspmmgapplications.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if rmaq.path != nil {
		prev, err := rmaq.path(ctx)
		if err != nil {
			return err
		}
		rmaq.sql = prev
	}
	return nil
}

func (rmaq *RecommendationsMTSPMMGApplicationsQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*RecommendationsMTSPMMGApplications, error) {
	var (
		nodes       = []*RecommendationsMTSPMMGApplications{}
		_spec       = rmaq.querySpec()
		loadedTypes = [1]bool{
			rmaq.withApplnRef != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*RecommendationsMTSPMMGApplications).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &RecommendationsMTSPMMGApplications{config: rmaq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, rmaq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := rmaq.withApplnRef; query != nil {
		if err := rmaq.loadApplnRef(ctx, query, nodes, nil,
			func(n *RecommendationsMTSPMMGApplications, e *Exam_Application_MTSPMMG) { n.Edges.ApplnRef = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (rmaq *RecommendationsMTSPMMGApplicationsQuery) loadApplnRef(ctx context.Context, query *ExamApplicationMTSPMMGQuery, nodes []*RecommendationsMTSPMMGApplications, init func(*RecommendationsMTSPMMGApplications), assign func(*RecommendationsMTSPMMGApplications, *Exam_Application_MTSPMMG)) error {
	ids := make([]int64, 0, len(nodes))
	nodeids := make(map[int64][]*RecommendationsMTSPMMGApplications)
	for i := range nodes {
		fk := nodes[i].ApplicationID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(exam_application_mtspmmg.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "ApplicationID" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (rmaq *RecommendationsMTSPMMGApplicationsQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := rmaq.querySpec()
	_spec.Node.Columns = rmaq.ctx.Fields
	if len(rmaq.ctx.Fields) > 0 {
		_spec.Unique = rmaq.ctx.Unique != nil && *rmaq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, rmaq.driver, _spec)
}

func (rmaq *RecommendationsMTSPMMGApplicationsQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(recommendationsmtspmmgapplications.Table, recommendationsmtspmmgapplications.Columns, sqlgraph.NewFieldSpec(recommendationsmtspmmgapplications.FieldID, field.TypeInt64))
	_spec.From = rmaq.sql
	if unique := rmaq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if rmaq.path != nil {
		_spec.Unique = true
	}
	if fields := rmaq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, recommendationsmtspmmgapplications.FieldID)
		for i := range fields {
			if fields[i] != recommendationsmtspmmgapplications.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if rmaq.withApplnRef != nil {
			_spec.Node.AddColumnOnce(recommendationsmtspmmgapplications.FieldApplicationID)
		}
	}
	if ps := rmaq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := rmaq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := rmaq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := rmaq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (rmaq *RecommendationsMTSPMMGApplicationsQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(rmaq.driver.Dialect())
	t1 := builder.Table(recommendationsmtspmmgapplications.Table)
	columns := rmaq.ctx.Fields
	if len(columns) == 0 {
		columns = recommendationsmtspmmgapplications.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if rmaq.sql != nil {
		selector = rmaq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if rmaq.ctx.Unique != nil && *rmaq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range rmaq.predicates {
		p(selector)
	}
	for _, p := range rmaq.order {
		p(selector)
	}
	if offset := rmaq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := rmaq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// RecommendationsMTSPMMGApplicationsGroupBy is the group-by builder for RecommendationsMTSPMMGApplications entities.
type RecommendationsMTSPMMGApplicationsGroupBy struct {
	selector
	build *RecommendationsMTSPMMGApplicationsQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (rmagb *RecommendationsMTSPMMGApplicationsGroupBy) Aggregate(fns ...AggregateFunc) *RecommendationsMTSPMMGApplicationsGroupBy {
	rmagb.fns = append(rmagb.fns, fns...)
	return rmagb
}

// Scan applies the selector query and scans the result into the given value.
func (rmagb *RecommendationsMTSPMMGApplicationsGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, rmagb.build.ctx, "GroupBy")
	if err := rmagb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*RecommendationsMTSPMMGApplicationsQuery, *RecommendationsMTSPMMGApplicationsGroupBy](ctx, rmagb.build, rmagb, rmagb.build.inters, v)
}

func (rmagb *RecommendationsMTSPMMGApplicationsGroupBy) sqlScan(ctx context.Context, root *RecommendationsMTSPMMGApplicationsQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(rmagb.fns))
	for _, fn := range rmagb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*rmagb.flds)+len(rmagb.fns))
		for _, f := range *rmagb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*rmagb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := rmagb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// RecommendationsMTSPMMGApplicationsSelect is the builder for selecting fields of RecommendationsMTSPMMGApplications entities.
type RecommendationsMTSPMMGApplicationsSelect struct {
	*RecommendationsMTSPMMGApplicationsQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (rmas *RecommendationsMTSPMMGApplicationsSelect) Aggregate(fns ...AggregateFunc) *RecommendationsMTSPMMGApplicationsSelect {
	rmas.fns = append(rmas.fns, fns...)
	return rmas
}

// Scan applies the selector query and scans the result into the given value.
func (rmas *RecommendationsMTSPMMGApplicationsSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, rmas.ctx, "Select")
	if err := rmas.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*RecommendationsMTSPMMGApplicationsQuery, *RecommendationsMTSPMMGApplicationsSelect](ctx, rmas.RecommendationsMTSPMMGApplicationsQuery, rmas, rmas.inters, v)
}

func (rmas *RecommendationsMTSPMMGApplicationsSelect) sqlScan(ctx context.Context, root *RecommendationsMTSPMMGApplicationsQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(rmas.fns))
	for _, fn := range rmas.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*rmas.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := rmas.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
