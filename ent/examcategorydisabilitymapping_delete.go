// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"recruit/ent/examcategorydisabilitymapping"
	"recruit/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ExamCategoryDisabilityMappingDelete is the builder for deleting a ExamCategoryDisabilityMapping entity.
type ExamCategoryDisabilityMappingDelete struct {
	config
	hooks    []Hook
	mutation *ExamCategoryDisabilityMappingMutation
}

// Where appends a list predicates to the ExamCategoryDisabilityMappingDelete builder.
func (ecdmd *ExamCategoryDisabilityMappingDelete) Where(ps ...predicate.ExamCategoryDisabilityMapping) *ExamCategoryDisabilityMappingDelete {
	ecdmd.mutation.Where(ps...)
	return ecdmd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (ecdmd *ExamCategoryDisabilityMappingDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, ecdmd.sqlExec, ecdmd.mutation, ecdmd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (ecdmd *ExamCategoryDisabilityMappingDelete) ExecX(ctx context.Context) int {
	n, err := ecdmd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (ecdmd *ExamCategoryDisabilityMappingDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(examcategorydisabilitymapping.Table, sqlgraph.NewFieldSpec(examcategorydisabilitymapping.FieldID, field.TypeInt32))
	if ps := ecdmd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, ecdmd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	ecdmd.mutation.done = true
	return affected, err
}

// ExamCategoryDisabilityMappingDeleteOne is the builder for deleting a single ExamCategoryDisabilityMapping entity.
type ExamCategoryDisabilityMappingDeleteOne struct {
	ecdmd *ExamCategoryDisabilityMappingDelete
}

// Where appends a list predicates to the ExamCategoryDisabilityMappingDelete builder.
func (ecdmdo *ExamCategoryDisabilityMappingDeleteOne) Where(ps ...predicate.ExamCategoryDisabilityMapping) *ExamCategoryDisabilityMappingDeleteOne {
	ecdmdo.ecdmd.mutation.Where(ps...)
	return ecdmdo
}

// Exec executes the deletion query.
func (ecdmdo *ExamCategoryDisabilityMappingDeleteOne) Exec(ctx context.Context) error {
	n, err := ecdmdo.ecdmd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{examcategorydisabilitymapping.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (ecdmdo *ExamCategoryDisabilityMappingDeleteOne) ExecX(ctx context.Context) {
	if err := ecdmdo.Exec(ctx); err != nil {
		panic(err)
	}
}
