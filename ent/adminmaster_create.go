// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"recruit/ent/adminmaster"
	"recruit/ent/logs"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AdminMasterCreate is the builder for creating a AdminMaster entity.
type AdminMasterCreate struct {
	config
	mutation *AdminMasterMutation
	hooks    []Hook
}

// SetEmployeeId sets the "EmployeeId" field.
func (amc *AdminMasterCreate) SetEmployeeId(i int64) *AdminMasterCreate {
	amc.mutation.SetEmployeeId(i)
	return amc
}

// SetNillableEmployeeId sets the "EmployeeId" field if the given value is not nil.
func (amc *AdminMasterCreate) SetNillableEmployeeId(i *int64) *AdminMasterCreate {
	if i != nil {
		amc.SetEmployeeId(*i)
	}
	return amc
}

// SetEmployeeName sets the "EmployeeName" field.
func (amc *AdminMasterCreate) SetEmployeeName(s string) *AdminMasterCreate {
	amc.mutation.SetEmployeeName(s)
	return amc
}

// SetNillableEmployeeName sets the "EmployeeName" field if the given value is not nil.
func (amc *AdminMasterCreate) SetNillableEmployeeName(s *string) *AdminMasterCreate {
	if s != nil {
		amc.SetEmployeeName(*s)
	}
	return amc
}

// SetDesignation sets the "Designation" field.
func (amc *AdminMasterCreate) SetDesignation(s string) *AdminMasterCreate {
	amc.mutation.SetDesignation(s)
	return amc
}

// SetNillableDesignation sets the "Designation" field if the given value is not nil.
func (amc *AdminMasterCreate) SetNillableDesignation(s *string) *AdminMasterCreate {
	if s != nil {
		amc.SetDesignation(*s)
	}
	return amc
}

// SetRoleUserCode sets the "RoleUserCode" field.
func (amc *AdminMasterCreate) SetRoleUserCode(i int32) *AdminMasterCreate {
	amc.mutation.SetRoleUserCode(i)
	return amc
}

// SetNillableRoleUserCode sets the "RoleUserCode" field if the given value is not nil.
func (amc *AdminMasterCreate) SetNillableRoleUserCode(i *int32) *AdminMasterCreate {
	if i != nil {
		amc.SetRoleUserCode(*i)
	}
	return amc
}

// SetRoleUserDescription sets the "RoleUserDescription" field.
func (amc *AdminMasterCreate) SetRoleUserDescription(s string) *AdminMasterCreate {
	amc.mutation.SetRoleUserDescription(s)
	return amc
}

// SetNillableRoleUserDescription sets the "RoleUserDescription" field if the given value is not nil.
func (amc *AdminMasterCreate) SetNillableRoleUserDescription(s *string) *AdminMasterCreate {
	if s != nil {
		amc.SetRoleUserDescription(*s)
	}
	return amc
}

// SetMobile sets the "Mobile" field.
func (amc *AdminMasterCreate) SetMobile(s string) *AdminMasterCreate {
	amc.mutation.SetMobile(s)
	return amc
}

// SetNillableMobile sets the "Mobile" field if the given value is not nil.
func (amc *AdminMasterCreate) SetNillableMobile(s *string) *AdminMasterCreate {
	if s != nil {
		amc.SetMobile(*s)
	}
	return amc
}

// SetEmailID sets the "EmailID" field.
func (amc *AdminMasterCreate) SetEmailID(s string) *AdminMasterCreate {
	amc.mutation.SetEmailID(s)
	return amc
}

// SetNillableEmailID sets the "EmailID" field if the given value is not nil.
func (amc *AdminMasterCreate) SetNillableEmailID(s *string) *AdminMasterCreate {
	if s != nil {
		amc.SetEmailID(*s)
	}
	return amc
}

// SetUserName sets the "UserName" field.
func (amc *AdminMasterCreate) SetUserName(s string) *AdminMasterCreate {
	amc.mutation.SetUserName(s)
	return amc
}

// SetNillableUserName sets the "UserName" field if the given value is not nil.
func (amc *AdminMasterCreate) SetNillableUserName(s *string) *AdminMasterCreate {
	if s != nil {
		amc.SetUserName(*s)
	}
	return amc
}

// SetPassword sets the "Password" field.
func (amc *AdminMasterCreate) SetPassword(s string) *AdminMasterCreate {
	amc.mutation.SetPassword(s)
	return amc
}

// SetNillablePassword sets the "Password" field if the given value is not nil.
func (amc *AdminMasterCreate) SetNillablePassword(s *string) *AdminMasterCreate {
	if s != nil {
		amc.SetPassword(*s)
	}
	return amc
}

// SetFacilityIDUniqueid sets the "FacilityIDUniqueid" field.
func (amc *AdminMasterCreate) SetFacilityIDUniqueid(i int64) *AdminMasterCreate {
	amc.mutation.SetFacilityIDUniqueid(i)
	return amc
}

// SetNillableFacilityIDUniqueid sets the "FacilityIDUniqueid" field if the given value is not nil.
func (amc *AdminMasterCreate) SetNillableFacilityIDUniqueid(i *int64) *AdminMasterCreate {
	if i != nil {
		amc.SetFacilityIDUniqueid(*i)
	}
	return amc
}

// SetFacilityID sets the "FacilityID" field.
func (amc *AdminMasterCreate) SetFacilityID(s string) *AdminMasterCreate {
	amc.mutation.SetFacilityID(s)
	return amc
}

// SetNillableFacilityID sets the "FacilityID" field if the given value is not nil.
func (amc *AdminMasterCreate) SetNillableFacilityID(s *string) *AdminMasterCreate {
	if s != nil {
		amc.SetFacilityID(*s)
	}
	return amc
}

// SetAuthorityFacilityName sets the "AuthorityFacilityName" field.
func (amc *AdminMasterCreate) SetAuthorityFacilityName(s string) *AdminMasterCreate {
	amc.mutation.SetAuthorityFacilityName(s)
	return amc
}

// SetNillableAuthorityFacilityName sets the "AuthorityFacilityName" field if the given value is not nil.
func (amc *AdminMasterCreate) SetNillableAuthorityFacilityName(s *string) *AdminMasterCreate {
	if s != nil {
		amc.SetAuthorityFacilityName(*s)
	}
	return amc
}

// SetFacilityType sets the "FacilityType" field.
func (amc *AdminMasterCreate) SetFacilityType(s string) *AdminMasterCreate {
	amc.mutation.SetFacilityType(s)
	return amc
}

// SetNillableFacilityType sets the "FacilityType" field if the given value is not nil.
func (amc *AdminMasterCreate) SetNillableFacilityType(s *string) *AdminMasterCreate {
	if s != nil {
		amc.SetFacilityType(*s)
	}
	return amc
}

// SetReportingOfficeFacilityId sets the "ReportingOfficeFacilityId" field.
func (amc *AdminMasterCreate) SetReportingOfficeFacilityId(s string) *AdminMasterCreate {
	amc.mutation.SetReportingOfficeFacilityId(s)
	return amc
}

// SetNillableReportingOfficeFacilityId sets the "ReportingOfficeFacilityId" field if the given value is not nil.
func (amc *AdminMasterCreate) SetNillableReportingOfficeFacilityId(s *string) *AdminMasterCreate {
	if s != nil {
		amc.SetReportingOfficeFacilityId(*s)
	}
	return amc
}

// SetReportingOfficeFacilityName sets the "ReportingOfficeFacilityName" field.
func (amc *AdminMasterCreate) SetReportingOfficeFacilityName(s string) *AdminMasterCreate {
	amc.mutation.SetReportingOfficeFacilityName(s)
	return amc
}

// SetNillableReportingOfficeFacilityName sets the "ReportingOfficeFacilityName" field if the given value is not nil.
func (amc *AdminMasterCreate) SetNillableReportingOfficeFacilityName(s *string) *AdminMasterCreate {
	if s != nil {
		amc.SetReportingOfficeFacilityName(*s)
	}
	return amc
}

// SetCircleOfficeFacilityId sets the "CircleOfficeFacilityId" field.
func (amc *AdminMasterCreate) SetCircleOfficeFacilityId(s string) *AdminMasterCreate {
	amc.mutation.SetCircleOfficeFacilityId(s)
	return amc
}

// SetNillableCircleOfficeFacilityId sets the "CircleOfficeFacilityId" field if the given value is not nil.
func (amc *AdminMasterCreate) SetNillableCircleOfficeFacilityId(s *string) *AdminMasterCreate {
	if s != nil {
		amc.SetCircleOfficeFacilityId(*s)
	}
	return amc
}

// SetCircleOfficeName sets the "CircleOfficeName" field.
func (amc *AdminMasterCreate) SetCircleOfficeName(s string) *AdminMasterCreate {
	amc.mutation.SetCircleOfficeName(s)
	return amc
}

// SetNillableCircleOfficeName sets the "CircleOfficeName" field if the given value is not nil.
func (amc *AdminMasterCreate) SetNillableCircleOfficeName(s *string) *AdminMasterCreate {
	if s != nil {
		amc.SetCircleOfficeName(*s)
	}
	return amc
}

// SetUidToken sets the "UidToken" field.
func (amc *AdminMasterCreate) SetUidToken(s string) *AdminMasterCreate {
	amc.mutation.SetUidToken(s)
	return amc
}

// SetNillableUidToken sets the "UidToken" field if the given value is not nil.
func (amc *AdminMasterCreate) SetNillableUidToken(s *string) *AdminMasterCreate {
	if s != nil {
		amc.SetUidToken(*s)
	}
	return amc
}

// SetStatuss sets the "Statuss" field.
func (amc *AdminMasterCreate) SetStatuss(s string) *AdminMasterCreate {
	amc.mutation.SetStatuss(s)
	return amc
}

// SetNillableStatuss sets the "Statuss" field if the given value is not nil.
func (amc *AdminMasterCreate) SetNillableStatuss(s *string) *AdminMasterCreate {
	if s != nil {
		amc.SetStatuss(*s)
	}
	return amc
}

// SetOTP sets the "OTP" field.
func (amc *AdminMasterCreate) SetOTP(i int32) *AdminMasterCreate {
	amc.mutation.SetOTP(i)
	return amc
}

// SetNillableOTP sets the "OTP" field if the given value is not nil.
func (amc *AdminMasterCreate) SetNillableOTP(i *int32) *AdminMasterCreate {
	if i != nil {
		amc.SetOTP(*i)
	}
	return amc
}

// SetOTPSavedTime sets the "OTPSavedTime" field.
func (amc *AdminMasterCreate) SetOTPSavedTime(t time.Time) *AdminMasterCreate {
	amc.mutation.SetOTPSavedTime(t)
	return amc
}

// SetNillableOTPSavedTime sets the "OTPSavedTime" field if the given value is not nil.
func (amc *AdminMasterCreate) SetNillableOTPSavedTime(t *time.Time) *AdminMasterCreate {
	if t != nil {
		amc.SetOTPSavedTime(*t)
	}
	return amc
}

// SetOTPTriggeredTime sets the "OTPTriggeredTime" field.
func (amc *AdminMasterCreate) SetOTPTriggeredTime(t time.Time) *AdminMasterCreate {
	amc.mutation.SetOTPTriggeredTime(t)
	return amc
}

// SetNillableOTPTriggeredTime sets the "OTPTriggeredTime" field if the given value is not nil.
func (amc *AdminMasterCreate) SetNillableOTPTriggeredTime(t *time.Time) *AdminMasterCreate {
	if t != nil {
		amc.SetOTPTriggeredTime(*t)
	}
	return amc
}

// SetOTPExpiryTime sets the "OTPExpiryTime" field.
func (amc *AdminMasterCreate) SetOTPExpiryTime(t time.Time) *AdminMasterCreate {
	amc.mutation.SetOTPExpiryTime(t)
	return amc
}

// SetNillableOTPExpiryTime sets the "OTPExpiryTime" field if the given value is not nil.
func (amc *AdminMasterCreate) SetNillableOTPExpiryTime(t *time.Time) *AdminMasterCreate {
	if t != nil {
		amc.SetOTPExpiryTime(*t)
	}
	return amc
}

// SetOTPRemarks sets the "OTPRemarks" field.
func (amc *AdminMasterCreate) SetOTPRemarks(s string) *AdminMasterCreate {
	amc.mutation.SetOTPRemarks(s)
	return amc
}

// SetNillableOTPRemarks sets the "OTPRemarks" field if the given value is not nil.
func (amc *AdminMasterCreate) SetNillableOTPRemarks(s *string) *AdminMasterCreate {
	if s != nil {
		amc.SetOTPRemarks(*s)
	}
	return amc
}

// SetCreatedById sets the "CreatedById" field.
func (amc *AdminMasterCreate) SetCreatedById(i int64) *AdminMasterCreate {
	amc.mutation.SetCreatedById(i)
	return amc
}

// SetNillableCreatedById sets the "CreatedById" field if the given value is not nil.
func (amc *AdminMasterCreate) SetNillableCreatedById(i *int64) *AdminMasterCreate {
	if i != nil {
		amc.SetCreatedById(*i)
	}
	return amc
}

// SetCreatedByUserName sets the "CreatedByUserName" field.
func (amc *AdminMasterCreate) SetCreatedByUserName(s string) *AdminMasterCreate {
	amc.mutation.SetCreatedByUserName(s)
	return amc
}

// SetNillableCreatedByUserName sets the "CreatedByUserName" field if the given value is not nil.
func (amc *AdminMasterCreate) SetNillableCreatedByUserName(s *string) *AdminMasterCreate {
	if s != nil {
		amc.SetCreatedByUserName(*s)
	}
	return amc
}

// SetCreatedByEmpId sets the "CreatedByEmpId" field.
func (amc *AdminMasterCreate) SetCreatedByEmpId(i int64) *AdminMasterCreate {
	amc.mutation.SetCreatedByEmpId(i)
	return amc
}

// SetNillableCreatedByEmpId sets the "CreatedByEmpId" field if the given value is not nil.
func (amc *AdminMasterCreate) SetNillableCreatedByEmpId(i *int64) *AdminMasterCreate {
	if i != nil {
		amc.SetCreatedByEmpId(*i)
	}
	return amc
}

// SetCreatedByDesignation sets the "CreatedByDesignation" field.
func (amc *AdminMasterCreate) SetCreatedByDesignation(s string) *AdminMasterCreate {
	amc.mutation.SetCreatedByDesignation(s)
	return amc
}

// SetNillableCreatedByDesignation sets the "CreatedByDesignation" field if the given value is not nil.
func (amc *AdminMasterCreate) SetNillableCreatedByDesignation(s *string) *AdminMasterCreate {
	if s != nil {
		amc.SetCreatedByDesignation(*s)
	}
	return amc
}

// SetCreatedDate sets the "CreatedDate" field.
func (amc *AdminMasterCreate) SetCreatedDate(t time.Time) *AdminMasterCreate {
	amc.mutation.SetCreatedDate(t)
	return amc
}

// SetNillableCreatedDate sets the "CreatedDate" field if the given value is not nil.
func (amc *AdminMasterCreate) SetNillableCreatedDate(t *time.Time) *AdminMasterCreate {
	if t != nil {
		amc.SetCreatedDate(*t)
	}
	return amc
}

// SetDeletedById sets the "DeletedById" field.
func (amc *AdminMasterCreate) SetDeletedById(i int64) *AdminMasterCreate {
	amc.mutation.SetDeletedById(i)
	return amc
}

// SetNillableDeletedById sets the "DeletedById" field if the given value is not nil.
func (amc *AdminMasterCreate) SetNillableDeletedById(i *int64) *AdminMasterCreate {
	if i != nil {
		amc.SetDeletedById(*i)
	}
	return amc
}

// SetDeletedByUserName sets the "DeletedByUserName" field.
func (amc *AdminMasterCreate) SetDeletedByUserName(s string) *AdminMasterCreate {
	amc.mutation.SetDeletedByUserName(s)
	return amc
}

// SetNillableDeletedByUserName sets the "DeletedByUserName" field if the given value is not nil.
func (amc *AdminMasterCreate) SetNillableDeletedByUserName(s *string) *AdminMasterCreate {
	if s != nil {
		amc.SetDeletedByUserName(*s)
	}
	return amc
}

// SetDeletedByEmpId sets the "DeletedByEmpId" field.
func (amc *AdminMasterCreate) SetDeletedByEmpId(i int64) *AdminMasterCreate {
	amc.mutation.SetDeletedByEmpId(i)
	return amc
}

// SetNillableDeletedByEmpId sets the "DeletedByEmpId" field if the given value is not nil.
func (amc *AdminMasterCreate) SetNillableDeletedByEmpId(i *int64) *AdminMasterCreate {
	if i != nil {
		amc.SetDeletedByEmpId(*i)
	}
	return amc
}

// SetDeletedByDesignation sets the "DeletedByDesignation" field.
func (amc *AdminMasterCreate) SetDeletedByDesignation(s string) *AdminMasterCreate {
	amc.mutation.SetDeletedByDesignation(s)
	return amc
}

// SetNillableDeletedByDesignation sets the "DeletedByDesignation" field if the given value is not nil.
func (amc *AdminMasterCreate) SetNillableDeletedByDesignation(s *string) *AdminMasterCreate {
	if s != nil {
		amc.SetDeletedByDesignation(*s)
	}
	return amc
}

// SetDeletedDate sets the "DeletedDate" field.
func (amc *AdminMasterCreate) SetDeletedDate(t time.Time) *AdminMasterCreate {
	amc.mutation.SetDeletedDate(t)
	return amc
}

// SetNillableDeletedDate sets the "DeletedDate" field if the given value is not nil.
func (amc *AdminMasterCreate) SetNillableDeletedDate(t *time.Time) *AdminMasterCreate {
	if t != nil {
		amc.SetDeletedDate(*t)
	}
	return amc
}

// SetModifiedById sets the "ModifiedById" field.
func (amc *AdminMasterCreate) SetModifiedById(i int) *AdminMasterCreate {
	amc.mutation.SetModifiedById(i)
	return amc
}

// SetNillableModifiedById sets the "ModifiedById" field if the given value is not nil.
func (amc *AdminMasterCreate) SetNillableModifiedById(i *int) *AdminMasterCreate {
	if i != nil {
		amc.SetModifiedById(*i)
	}
	return amc
}

// SetModifiedByUserName sets the "ModifiedByUserName" field.
func (amc *AdminMasterCreate) SetModifiedByUserName(s string) *AdminMasterCreate {
	amc.mutation.SetModifiedByUserName(s)
	return amc
}

// SetNillableModifiedByUserName sets the "ModifiedByUserName" field if the given value is not nil.
func (amc *AdminMasterCreate) SetNillableModifiedByUserName(s *string) *AdminMasterCreate {
	if s != nil {
		amc.SetModifiedByUserName(*s)
	}
	return amc
}

// SetModifiedByEmpId sets the "ModifiedByEmpId" field.
func (amc *AdminMasterCreate) SetModifiedByEmpId(i int64) *AdminMasterCreate {
	amc.mutation.SetModifiedByEmpId(i)
	return amc
}

// SetNillableModifiedByEmpId sets the "ModifiedByEmpId" field if the given value is not nil.
func (amc *AdminMasterCreate) SetNillableModifiedByEmpId(i *int64) *AdminMasterCreate {
	if i != nil {
		amc.SetModifiedByEmpId(*i)
	}
	return amc
}

// SetModifiedByDesignantion sets the "ModifiedByDesignantion" field.
func (amc *AdminMasterCreate) SetModifiedByDesignantion(s string) *AdminMasterCreate {
	amc.mutation.SetModifiedByDesignantion(s)
	return amc
}

// SetNillableModifiedByDesignantion sets the "ModifiedByDesignantion" field if the given value is not nil.
func (amc *AdminMasterCreate) SetNillableModifiedByDesignantion(s *string) *AdminMasterCreate {
	if s != nil {
		amc.SetModifiedByDesignantion(*s)
	}
	return amc
}

// SetModifiedDate sets the "ModifiedDate" field.
func (amc *AdminMasterCreate) SetModifiedDate(t time.Time) *AdminMasterCreate {
	amc.mutation.SetModifiedDate(t)
	return amc
}

// SetNillableModifiedDate sets the "ModifiedDate" field if the given value is not nil.
func (amc *AdminMasterCreate) SetNillableModifiedDate(t *time.Time) *AdminMasterCreate {
	if t != nil {
		amc.SetModifiedDate(*t)
	}
	return amc
}

// SetDeletedBy sets the "DeletedBy" field.
func (amc *AdminMasterCreate) SetDeletedBy(s string) *AdminMasterCreate {
	amc.mutation.SetDeletedBy(s)
	return amc
}

// SetNillableDeletedBy sets the "DeletedBy" field if the given value is not nil.
func (amc *AdminMasterCreate) SetNillableDeletedBy(s *string) *AdminMasterCreate {
	if s != nil {
		amc.SetDeletedBy(*s)
	}
	return amc
}

// SetDeletedbyid sets the "Deletedbyid" field.
func (amc *AdminMasterCreate) SetDeletedbyid(s string) *AdminMasterCreate {
	amc.mutation.SetDeletedbyid(s)
	return amc
}

// SetNillableDeletedbyid sets the "Deletedbyid" field if the given value is not nil.
func (amc *AdminMasterCreate) SetNillableDeletedbyid(s *string) *AdminMasterCreate {
	if s != nil {
		amc.SetDeletedbyid(*s)
	}
	return amc
}

// SetNewPasswordRequest sets the "NewPasswordRequest" field.
func (amc *AdminMasterCreate) SetNewPasswordRequest(b bool) *AdminMasterCreate {
	amc.mutation.SetNewPasswordRequest(b)
	return amc
}

// SetNillableNewPasswordRequest sets the "NewPasswordRequest" field if the given value is not nil.
func (amc *AdminMasterCreate) SetNillableNewPasswordRequest(b *bool) *AdminMasterCreate {
	if b != nil {
		amc.SetNewPasswordRequest(*b)
	}
	return amc
}

// SetEventTime sets the "EventTime" field.
func (amc *AdminMasterCreate) SetEventTime(t time.Time) *AdminMasterCreate {
	amc.mutation.SetEventTime(t)
	return amc
}

// SetNillableEventTime sets the "EventTime" field if the given value is not nil.
func (amc *AdminMasterCreate) SetNillableEventTime(t *time.Time) *AdminMasterCreate {
	if t != nil {
		amc.SetEventTime(*t)
	}
	return amc
}

// SetUUID sets the "UUID" field.
func (amc *AdminMasterCreate) SetUUID(i int64) *AdminMasterCreate {
	amc.mutation.SetUUID(i)
	return amc
}

// SetNillableUUID sets the "UUID" field if the given value is not nil.
func (amc *AdminMasterCreate) SetNillableUUID(i *int64) *AdminMasterCreate {
	if i != nil {
		amc.SetUUID(*i)
	}
	return amc
}

// SetUpdatedby sets the "Updatedby" field.
func (amc *AdminMasterCreate) SetUpdatedby(s string) *AdminMasterCreate {
	amc.mutation.SetUpdatedby(s)
	return amc
}

// SetNillableUpdatedby sets the "Updatedby" field if the given value is not nil.
func (amc *AdminMasterCreate) SetNillableUpdatedby(s *string) *AdminMasterCreate {
	if s != nil {
		amc.SetUpdatedby(*s)
	}
	return amc
}

// SetUpdatedDate sets the "updatedDate" field.
func (amc *AdminMasterCreate) SetUpdatedDate(t time.Time) *AdminMasterCreate {
	amc.mutation.SetUpdatedDate(t)
	return amc
}

// SetNillableUpdatedDate sets the "updatedDate" field if the given value is not nil.
func (amc *AdminMasterCreate) SetNillableUpdatedDate(t *time.Time) *AdminMasterCreate {
	if t != nil {
		amc.SetUpdatedDate(*t)
	}
	return amc
}

// SetID sets the "id" field.
func (amc *AdminMasterCreate) SetID(i int64) *AdminMasterCreate {
	amc.mutation.SetID(i)
	return amc
}

// AddLogDatumIDs adds the "LogData" edge to the Logs entity by IDs.
func (amc *AdminMasterCreate) AddLogDatumIDs(ids ...int64) *AdminMasterCreate {
	amc.mutation.AddLogDatumIDs(ids...)
	return amc
}

// AddLogData adds the "LogData" edges to the Logs entity.
func (amc *AdminMasterCreate) AddLogData(l ...*Logs) *AdminMasterCreate {
	ids := make([]int64, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return amc.AddLogDatumIDs(ids...)
}

// Mutation returns the AdminMasterMutation object of the builder.
func (amc *AdminMasterCreate) Mutation() *AdminMasterMutation {
	return amc.mutation
}

// Save creates the AdminMaster in the database.
func (amc *AdminMasterCreate) Save(ctx context.Context) (*AdminMaster, error) {
	amc.defaults()
	return withHooks(ctx, amc.sqlSave, amc.mutation, amc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (amc *AdminMasterCreate) SaveX(ctx context.Context) *AdminMaster {
	v, err := amc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (amc *AdminMasterCreate) Exec(ctx context.Context) error {
	_, err := amc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (amc *AdminMasterCreate) ExecX(ctx context.Context) {
	if err := amc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (amc *AdminMasterCreate) defaults() {
	if _, ok := amc.mutation.EmployeeId(); !ok {
		v := adminmaster.DefaultEmployeeId
		amc.mutation.SetEmployeeId(v)
	}
	if _, ok := amc.mutation.RoleUserCode(); !ok {
		v := adminmaster.DefaultRoleUserCode
		amc.mutation.SetRoleUserCode(v)
	}
	if _, ok := amc.mutation.Password(); !ok {
		v := adminmaster.DefaultPassword
		amc.mutation.SetPassword(v)
	}
	if _, ok := amc.mutation.FacilityIDUniqueid(); !ok {
		v := adminmaster.DefaultFacilityIDUniqueid
		amc.mutation.SetFacilityIDUniqueid(v)
	}
	if _, ok := amc.mutation.Statuss(); !ok {
		v := adminmaster.DefaultStatuss
		amc.mutation.SetStatuss(v)
	}
	if _, ok := amc.mutation.OTP(); !ok {
		v := adminmaster.DefaultOTP
		amc.mutation.SetOTP(v)
	}
	if _, ok := amc.mutation.OTPSavedTime(); !ok {
		v := adminmaster.DefaultOTPSavedTime()
		amc.mutation.SetOTPSavedTime(v)
	}
	if _, ok := amc.mutation.OTPTriggeredTime(); !ok {
		v := adminmaster.DefaultOTPTriggeredTime()
		amc.mutation.SetOTPTriggeredTime(v)
	}
	if _, ok := amc.mutation.OTPExpiryTime(); !ok {
		v := adminmaster.DefaultOTPExpiryTime()
		amc.mutation.SetOTPExpiryTime(v)
	}
	if _, ok := amc.mutation.CreatedById(); !ok {
		v := adminmaster.DefaultCreatedById
		amc.mutation.SetCreatedById(v)
	}
	if _, ok := amc.mutation.CreatedByEmpId(); !ok {
		v := adminmaster.DefaultCreatedByEmpId
		amc.mutation.SetCreatedByEmpId(v)
	}
	if _, ok := amc.mutation.CreatedDate(); !ok {
		v := adminmaster.DefaultCreatedDate()
		amc.mutation.SetCreatedDate(v)
	}
	if _, ok := amc.mutation.DeletedById(); !ok {
		v := adminmaster.DefaultDeletedById
		amc.mutation.SetDeletedById(v)
	}
	if _, ok := amc.mutation.DeletedByEmpId(); !ok {
		v := adminmaster.DefaultDeletedByEmpId
		amc.mutation.SetDeletedByEmpId(v)
	}
	if _, ok := amc.mutation.DeletedDate(); !ok {
		v := adminmaster.DefaultDeletedDate()
		amc.mutation.SetDeletedDate(v)
	}
	if _, ok := amc.mutation.ModifiedById(); !ok {
		v := adminmaster.DefaultModifiedById
		amc.mutation.SetModifiedById(v)
	}
	if _, ok := amc.mutation.ModifiedByEmpId(); !ok {
		v := adminmaster.DefaultModifiedByEmpId
		amc.mutation.SetModifiedByEmpId(v)
	}
	if _, ok := amc.mutation.ModifiedDate(); !ok {
		v := adminmaster.DefaultModifiedDate()
		amc.mutation.SetModifiedDate(v)
	}
	if _, ok := amc.mutation.EventTime(); !ok {
		v := adminmaster.DefaultEventTime()
		amc.mutation.SetEventTime(v)
	}
	if _, ok := amc.mutation.UUID(); !ok {
		v := adminmaster.DefaultUUID
		amc.mutation.SetUUID(v)
	}
	if _, ok := amc.mutation.UpdatedDate(); !ok {
		v := adminmaster.DefaultUpdatedDate()
		amc.mutation.SetUpdatedDate(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (amc *AdminMasterCreate) check() error {
	return nil
}

func (amc *AdminMasterCreate) sqlSave(ctx context.Context) (*AdminMaster, error) {
	if err := amc.check(); err != nil {
		return nil, err
	}
	_node, _spec := amc.createSpec()
	if err := sqlgraph.CreateNode(ctx, amc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	amc.mutation.id = &_node.ID
	amc.mutation.done = true
	return _node, nil
}

func (amc *AdminMasterCreate) createSpec() (*AdminMaster, *sqlgraph.CreateSpec) {
	var (
		_node = &AdminMaster{config: amc.config}
		_spec = sqlgraph.NewCreateSpec(adminmaster.Table, sqlgraph.NewFieldSpec(adminmaster.FieldID, field.TypeInt64))
	)
	if id, ok := amc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := amc.mutation.EmployeeId(); ok {
		_spec.SetField(adminmaster.FieldEmployeeId, field.TypeInt64, value)
		_node.EmployeeId = value
	}
	if value, ok := amc.mutation.EmployeeName(); ok {
		_spec.SetField(adminmaster.FieldEmployeeName, field.TypeString, value)
		_node.EmployeeName = value
	}
	if value, ok := amc.mutation.Designation(); ok {
		_spec.SetField(adminmaster.FieldDesignation, field.TypeString, value)
		_node.Designation = value
	}
	if value, ok := amc.mutation.RoleUserCode(); ok {
		_spec.SetField(adminmaster.FieldRoleUserCode, field.TypeInt32, value)
		_node.RoleUserCode = value
	}
	if value, ok := amc.mutation.RoleUserDescription(); ok {
		_spec.SetField(adminmaster.FieldRoleUserDescription, field.TypeString, value)
		_node.RoleUserDescription = value
	}
	if value, ok := amc.mutation.Mobile(); ok {
		_spec.SetField(adminmaster.FieldMobile, field.TypeString, value)
		_node.Mobile = value
	}
	if value, ok := amc.mutation.EmailID(); ok {
		_spec.SetField(adminmaster.FieldEmailID, field.TypeString, value)
		_node.EmailID = value
	}
	if value, ok := amc.mutation.UserName(); ok {
		_spec.SetField(adminmaster.FieldUserName, field.TypeString, value)
		_node.UserName = value
	}
	if value, ok := amc.mutation.Password(); ok {
		_spec.SetField(adminmaster.FieldPassword, field.TypeString, value)
		_node.Password = value
	}
	if value, ok := amc.mutation.FacilityIDUniqueid(); ok {
		_spec.SetField(adminmaster.FieldFacilityIDUniqueid, field.TypeInt64, value)
		_node.FacilityIDUniqueid = value
	}
	if value, ok := amc.mutation.FacilityID(); ok {
		_spec.SetField(adminmaster.FieldFacilityID, field.TypeString, value)
		_node.FacilityID = value
	}
	if value, ok := amc.mutation.AuthorityFacilityName(); ok {
		_spec.SetField(adminmaster.FieldAuthorityFacilityName, field.TypeString, value)
		_node.AuthorityFacilityName = value
	}
	if value, ok := amc.mutation.FacilityType(); ok {
		_spec.SetField(adminmaster.FieldFacilityType, field.TypeString, value)
		_node.FacilityType = value
	}
	if value, ok := amc.mutation.ReportingOfficeFacilityId(); ok {
		_spec.SetField(adminmaster.FieldReportingOfficeFacilityId, field.TypeString, value)
		_node.ReportingOfficeFacilityId = value
	}
	if value, ok := amc.mutation.ReportingOfficeFacilityName(); ok {
		_spec.SetField(adminmaster.FieldReportingOfficeFacilityName, field.TypeString, value)
		_node.ReportingOfficeFacilityName = value
	}
	if value, ok := amc.mutation.CircleOfficeFacilityId(); ok {
		_spec.SetField(adminmaster.FieldCircleOfficeFacilityId, field.TypeString, value)
		_node.CircleOfficeFacilityId = value
	}
	if value, ok := amc.mutation.CircleOfficeName(); ok {
		_spec.SetField(adminmaster.FieldCircleOfficeName, field.TypeString, value)
		_node.CircleOfficeName = value
	}
	if value, ok := amc.mutation.UidToken(); ok {
		_spec.SetField(adminmaster.FieldUidToken, field.TypeString, value)
		_node.UidToken = value
	}
	if value, ok := amc.mutation.Statuss(); ok {
		_spec.SetField(adminmaster.FieldStatuss, field.TypeString, value)
		_node.Statuss = value
	}
	if value, ok := amc.mutation.OTP(); ok {
		_spec.SetField(adminmaster.FieldOTP, field.TypeInt32, value)
		_node.OTP = value
	}
	if value, ok := amc.mutation.OTPSavedTime(); ok {
		_spec.SetField(adminmaster.FieldOTPSavedTime, field.TypeTime, value)
		_node.OTPSavedTime = value
	}
	if value, ok := amc.mutation.OTPTriggeredTime(); ok {
		_spec.SetField(adminmaster.FieldOTPTriggeredTime, field.TypeTime, value)
		_node.OTPTriggeredTime = value
	}
	if value, ok := amc.mutation.OTPExpiryTime(); ok {
		_spec.SetField(adminmaster.FieldOTPExpiryTime, field.TypeTime, value)
		_node.OTPExpiryTime = value
	}
	if value, ok := amc.mutation.OTPRemarks(); ok {
		_spec.SetField(adminmaster.FieldOTPRemarks, field.TypeString, value)
		_node.OTPRemarks = value
	}
	if value, ok := amc.mutation.CreatedById(); ok {
		_spec.SetField(adminmaster.FieldCreatedById, field.TypeInt64, value)
		_node.CreatedById = value
	}
	if value, ok := amc.mutation.CreatedByUserName(); ok {
		_spec.SetField(adminmaster.FieldCreatedByUserName, field.TypeString, value)
		_node.CreatedByUserName = value
	}
	if value, ok := amc.mutation.CreatedByEmpId(); ok {
		_spec.SetField(adminmaster.FieldCreatedByEmpId, field.TypeInt64, value)
		_node.CreatedByEmpId = value
	}
	if value, ok := amc.mutation.CreatedByDesignation(); ok {
		_spec.SetField(adminmaster.FieldCreatedByDesignation, field.TypeString, value)
		_node.CreatedByDesignation = value
	}
	if value, ok := amc.mutation.CreatedDate(); ok {
		_spec.SetField(adminmaster.FieldCreatedDate, field.TypeTime, value)
		_node.CreatedDate = value
	}
	if value, ok := amc.mutation.DeletedById(); ok {
		_spec.SetField(adminmaster.FieldDeletedById, field.TypeInt64, value)
		_node.DeletedById = value
	}
	if value, ok := amc.mutation.DeletedByUserName(); ok {
		_spec.SetField(adminmaster.FieldDeletedByUserName, field.TypeString, value)
		_node.DeletedByUserName = value
	}
	if value, ok := amc.mutation.DeletedByEmpId(); ok {
		_spec.SetField(adminmaster.FieldDeletedByEmpId, field.TypeInt64, value)
		_node.DeletedByEmpId = value
	}
	if value, ok := amc.mutation.DeletedByDesignation(); ok {
		_spec.SetField(adminmaster.FieldDeletedByDesignation, field.TypeString, value)
		_node.DeletedByDesignation = value
	}
	if value, ok := amc.mutation.DeletedDate(); ok {
		_spec.SetField(adminmaster.FieldDeletedDate, field.TypeTime, value)
		_node.DeletedDate = value
	}
	if value, ok := amc.mutation.ModifiedById(); ok {
		_spec.SetField(adminmaster.FieldModifiedById, field.TypeInt, value)
		_node.ModifiedById = value
	}
	if value, ok := amc.mutation.ModifiedByUserName(); ok {
		_spec.SetField(adminmaster.FieldModifiedByUserName, field.TypeString, value)
		_node.ModifiedByUserName = value
	}
	if value, ok := amc.mutation.ModifiedByEmpId(); ok {
		_spec.SetField(adminmaster.FieldModifiedByEmpId, field.TypeInt64, value)
		_node.ModifiedByEmpId = value
	}
	if value, ok := amc.mutation.ModifiedByDesignantion(); ok {
		_spec.SetField(adminmaster.FieldModifiedByDesignantion, field.TypeString, value)
		_node.ModifiedByDesignantion = value
	}
	if value, ok := amc.mutation.ModifiedDate(); ok {
		_spec.SetField(adminmaster.FieldModifiedDate, field.TypeTime, value)
		_node.ModifiedDate = value
	}
	if value, ok := amc.mutation.DeletedBy(); ok {
		_spec.SetField(adminmaster.FieldDeletedBy, field.TypeString, value)
		_node.DeletedBy = value
	}
	if value, ok := amc.mutation.Deletedbyid(); ok {
		_spec.SetField(adminmaster.FieldDeletedbyid, field.TypeString, value)
		_node.Deletedbyid = value
	}
	if value, ok := amc.mutation.NewPasswordRequest(); ok {
		_spec.SetField(adminmaster.FieldNewPasswordRequest, field.TypeBool, value)
		_node.NewPasswordRequest = value
	}
	if value, ok := amc.mutation.EventTime(); ok {
		_spec.SetField(adminmaster.FieldEventTime, field.TypeTime, value)
		_node.EventTime = value
	}
	if value, ok := amc.mutation.UUID(); ok {
		_spec.SetField(adminmaster.FieldUUID, field.TypeInt64, value)
		_node.UUID = value
	}
	if value, ok := amc.mutation.Updatedby(); ok {
		_spec.SetField(adminmaster.FieldUpdatedby, field.TypeString, value)
		_node.Updatedby = value
	}
	if value, ok := amc.mutation.UpdatedDate(); ok {
		_spec.SetField(adminmaster.FieldUpdatedDate, field.TypeTime, value)
		_node.UpdatedDate = value
	}
	if nodes := amc.mutation.LogDataIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   adminmaster.LogDataTable,
			Columns: []string{adminmaster.LogDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(logs.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// AdminMasterCreateBulk is the builder for creating many AdminMaster entities in bulk.
type AdminMasterCreateBulk struct {
	config
	builders []*AdminMasterCreate
}

// Save creates the AdminMaster entities in the database.
func (amcb *AdminMasterCreateBulk) Save(ctx context.Context) ([]*AdminMaster, error) {
	specs := make([]*sqlgraph.CreateSpec, len(amcb.builders))
	nodes := make([]*AdminMaster, len(amcb.builders))
	mutators := make([]Mutator, len(amcb.builders))
	for i := range amcb.builders {
		func(i int, root context.Context) {
			builder := amcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AdminMasterMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, amcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, amcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, amcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (amcb *AdminMasterCreateBulk) SaveX(ctx context.Context) []*AdminMaster {
	v, err := amcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (amcb *AdminMasterCreateBulk) Exec(ctx context.Context) error {
	_, err := amcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (amcb *AdminMasterCreateBulk) ExecX(ctx context.Context) {
	if err := amcb.Exec(ctx); err != nil {
		panic(err)
	}
}
