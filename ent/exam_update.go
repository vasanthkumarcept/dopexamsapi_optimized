// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"recruit/ent/center"
	"recruit/ent/eligibilitymaster"
	"recruit/ent/exam"
	"recruit/ent/exam_application_mtspmmg"
	"recruit/ent/exam_applications_gdspa"
	"recruit/ent/exam_applications_gdspm"
	"recruit/ent/exam_applications_ip"
	"recruit/ent/exam_applications_pmpa"
	"recruit/ent/exam_applications_ps"
	"recruit/ent/examcalendar"
	"recruit/ent/examnotifications"
	"recruit/ent/exampapers"
	"recruit/ent/examtype"
	"recruit/ent/logs"
	"recruit/ent/notification"
	"recruit/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ExamUpdate is the builder for updating Exam entities.
type ExamUpdate struct {
	config
	hooks    []Hook
	mutation *ExamMutation
}

// Where appends a list predicates to the ExamUpdate builder.
func (eu *ExamUpdate) Where(ps ...predicate.Exam) *ExamUpdate {
	eu.mutation.Where(ps...)
	return eu
}

// SetExamType sets the "ExamType" field.
func (eu *ExamUpdate) SetExamType(s string) *ExamUpdate {
	eu.mutation.SetExamType(s)
	return eu
}

// SetExamName sets the "ExamName" field.
func (eu *ExamUpdate) SetExamName(s string) *ExamUpdate {
	eu.mutation.SetExamName(s)
	return eu
}

// SetExamShortName sets the "ExamShortName" field.
func (eu *ExamUpdate) SetExamShortName(s string) *ExamUpdate {
	eu.mutation.SetExamShortName(s)
	return eu
}

// SetNillableExamShortName sets the "ExamShortName" field if the given value is not nil.
func (eu *ExamUpdate) SetNillableExamShortName(s *string) *ExamUpdate {
	if s != nil {
		eu.SetExamShortName(*s)
	}
	return eu
}

// ClearExamShortName clears the value of the "ExamShortName" field.
func (eu *ExamUpdate) ClearExamShortName() *ExamUpdate {
	eu.mutation.ClearExamShortName()
	return eu
}

// SetSmsExamShortName sets the "SmsExamShortName" field.
func (eu *ExamUpdate) SetSmsExamShortName(s string) *ExamUpdate {
	eu.mutation.SetSmsExamShortName(s)
	return eu
}

// SetNillableSmsExamShortName sets the "SmsExamShortName" field if the given value is not nil.
func (eu *ExamUpdate) SetNillableSmsExamShortName(s *string) *ExamUpdate {
	if s != nil {
		eu.SetSmsExamShortName(*s)
	}
	return eu
}

// ClearSmsExamShortName clears the value of the "SmsExamShortName" field.
func (eu *ExamUpdate) ClearSmsExamShortName() *ExamUpdate {
	eu.mutation.ClearSmsExamShortName()
	return eu
}

// SetExamCode sets the "ExamCode" field.
func (eu *ExamUpdate) SetExamCode(i int32) *ExamUpdate {
	eu.mutation.ResetExamCode()
	eu.mutation.SetExamCode(i)
	return eu
}

// SetNillableExamCode sets the "ExamCode" field if the given value is not nil.
func (eu *ExamUpdate) SetNillableExamCode(i *int32) *ExamUpdate {
	if i != nil {
		eu.SetExamCode(*i)
	}
	return eu
}

// AddExamCode adds i to the "ExamCode" field.
func (eu *ExamUpdate) AddExamCode(i int32) *ExamUpdate {
	eu.mutation.AddExamCode(i)
	return eu
}

// ClearExamCode clears the value of the "ExamCode" field.
func (eu *ExamUpdate) ClearExamCode() *ExamUpdate {
	eu.mutation.ClearExamCode()
	return eu
}

// SetCalenderIssuedBy sets the "CalenderIssuedBy" field.
func (eu *ExamUpdate) SetCalenderIssuedBy(s string) *ExamUpdate {
	eu.mutation.SetCalenderIssuedBy(s)
	return eu
}

// SetNillableCalenderIssuedBy sets the "CalenderIssuedBy" field if the given value is not nil.
func (eu *ExamUpdate) SetNillableCalenderIssuedBy(s *string) *ExamUpdate {
	if s != nil {
		eu.SetCalenderIssuedBy(*s)
	}
	return eu
}

// ClearCalenderIssuedBy clears the value of the "CalenderIssuedBy" field.
func (eu *ExamUpdate) ClearCalenderIssuedBy() *ExamUpdate {
	eu.mutation.ClearCalenderIssuedBy()
	return eu
}

// SetNotificationBy sets the "NotificationBy" field.
func (eu *ExamUpdate) SetNotificationBy(s string) *ExamUpdate {
	eu.mutation.SetNotificationBy(s)
	return eu
}

// SetConductedBy sets the "ConductedBy" field.
func (eu *ExamUpdate) SetConductedBy(s string) *ExamUpdate {
	eu.mutation.SetConductedBy(s)
	return eu
}

// SetNodalOfficerLevel sets the "NodalOfficerLevel" field.
func (eu *ExamUpdate) SetNodalOfficerLevel(s string) *ExamUpdate {
	eu.mutation.SetNodalOfficerLevel(s)
	return eu
}

// SetNillableNodalOfficerLevel sets the "NodalOfficerLevel" field if the given value is not nil.
func (eu *ExamUpdate) SetNillableNodalOfficerLevel(s *string) *ExamUpdate {
	if s != nil {
		eu.SetNodalOfficerLevel(*s)
	}
	return eu
}

// ClearNodalOfficerLevel clears the value of the "NodalOfficerLevel" field.
func (eu *ExamUpdate) ClearNodalOfficerLevel() *ExamUpdate {
	eu.mutation.ClearNodalOfficerLevel()
	return eu
}

// SetTentativeNotificationMandatoryDate sets the "TentativeNotificationMandatoryDate" field.
func (eu *ExamUpdate) SetTentativeNotificationMandatoryDate(b bool) *ExamUpdate {
	eu.mutation.SetTentativeNotificationMandatoryDate(b)
	return eu
}

// SetNillableTentativeNotificationMandatoryDate sets the "TentativeNotificationMandatoryDate" field if the given value is not nil.
func (eu *ExamUpdate) SetNillableTentativeNotificationMandatoryDate(b *bool) *ExamUpdate {
	if b != nil {
		eu.SetTentativeNotificationMandatoryDate(*b)
	}
	return eu
}

// SetLocalLanguage sets the "LocalLanguage" field.
func (eu *ExamUpdate) SetLocalLanguage(b bool) *ExamUpdate {
	eu.mutation.SetLocalLanguage(b)
	return eu
}

// SetNillableLocalLanguage sets the "LocalLanguage" field if the given value is not nil.
func (eu *ExamUpdate) SetNillableLocalLanguage(b *bool) *ExamUpdate {
	if b != nil {
		eu.SetLocalLanguage(*b)
	}
	return eu
}

// SetOptionForPost sets the "OptionForPost" field.
func (eu *ExamUpdate) SetOptionForPost(b bool) *ExamUpdate {
	eu.mutation.SetOptionForPost(b)
	return eu
}

// SetNillableOptionForPost sets the "OptionForPost" field if the given value is not nil.
func (eu *ExamUpdate) SetNillableOptionForPost(b *bool) *ExamUpdate {
	if b != nil {
		eu.SetOptionForPost(*b)
	}
	return eu
}

// SetOptionToWriteExamOtherThanParent sets the "OptionToWriteExamOtherThanParent" field.
func (eu *ExamUpdate) SetOptionToWriteExamOtherThanParent(b bool) *ExamUpdate {
	eu.mutation.SetOptionToWriteExamOtherThanParent(b)
	return eu
}

// SetNillableOptionToWriteExamOtherThanParent sets the "OptionToWriteExamOtherThanParent" field if the given value is not nil.
func (eu *ExamUpdate) SetNillableOptionToWriteExamOtherThanParent(b *bool) *ExamUpdate {
	if b != nil {
		eu.SetOptionToWriteExamOtherThanParent(*b)
	}
	return eu
}

// SetTableName sets the "TableName" field.
func (eu *ExamUpdate) SetTableName(s string) *ExamUpdate {
	eu.mutation.SetTableName(s)
	return eu
}

// SetNillableTableName sets the "TableName" field if the given value is not nil.
func (eu *ExamUpdate) SetNillableTableName(s *string) *ExamUpdate {
	if s != nil {
		eu.SetTableName(*s)
	}
	return eu
}

// ClearTableName clears the value of the "TableName" field.
func (eu *ExamUpdate) ClearTableName() *ExamUpdate {
	eu.mutation.ClearTableName()
	return eu
}

// SetOrderNumber sets the "OrderNumber" field.
func (eu *ExamUpdate) SetOrderNumber(s string) *ExamUpdate {
	eu.mutation.SetOrderNumber(s)
	return eu
}

// SetNillableOrderNumber sets the "OrderNumber" field if the given value is not nil.
func (eu *ExamUpdate) SetNillableOrderNumber(s *string) *ExamUpdate {
	if s != nil {
		eu.SetOrderNumber(*s)
	}
	return eu
}

// ClearOrderNumber clears the value of the "OrderNumber" field.
func (eu *ExamUpdate) ClearOrderNumber() *ExamUpdate {
	eu.mutation.ClearOrderNumber()
	return eu
}

// SetCreatedById sets the "CreatedById" field.
func (eu *ExamUpdate) SetCreatedById(i int64) *ExamUpdate {
	eu.mutation.ResetCreatedById()
	eu.mutation.SetCreatedById(i)
	return eu
}

// SetNillableCreatedById sets the "CreatedById" field if the given value is not nil.
func (eu *ExamUpdate) SetNillableCreatedById(i *int64) *ExamUpdate {
	if i != nil {
		eu.SetCreatedById(*i)
	}
	return eu
}

// AddCreatedById adds i to the "CreatedById" field.
func (eu *ExamUpdate) AddCreatedById(i int64) *ExamUpdate {
	eu.mutation.AddCreatedById(i)
	return eu
}

// ClearCreatedById clears the value of the "CreatedById" field.
func (eu *ExamUpdate) ClearCreatedById() *ExamUpdate {
	eu.mutation.ClearCreatedById()
	return eu
}

// SetCreatedByUserName sets the "CreatedByUserName" field.
func (eu *ExamUpdate) SetCreatedByUserName(s string) *ExamUpdate {
	eu.mutation.SetCreatedByUserName(s)
	return eu
}

// SetNillableCreatedByUserName sets the "CreatedByUserName" field if the given value is not nil.
func (eu *ExamUpdate) SetNillableCreatedByUserName(s *string) *ExamUpdate {
	if s != nil {
		eu.SetCreatedByUserName(*s)
	}
	return eu
}

// ClearCreatedByUserName clears the value of the "CreatedByUserName" field.
func (eu *ExamUpdate) ClearCreatedByUserName() *ExamUpdate {
	eu.mutation.ClearCreatedByUserName()
	return eu
}

// SetCreatedByEmpId sets the "CreatedByEmpId" field.
func (eu *ExamUpdate) SetCreatedByEmpId(i int64) *ExamUpdate {
	eu.mutation.ResetCreatedByEmpId()
	eu.mutation.SetCreatedByEmpId(i)
	return eu
}

// SetNillableCreatedByEmpId sets the "CreatedByEmpId" field if the given value is not nil.
func (eu *ExamUpdate) SetNillableCreatedByEmpId(i *int64) *ExamUpdate {
	if i != nil {
		eu.SetCreatedByEmpId(*i)
	}
	return eu
}

// AddCreatedByEmpId adds i to the "CreatedByEmpId" field.
func (eu *ExamUpdate) AddCreatedByEmpId(i int64) *ExamUpdate {
	eu.mutation.AddCreatedByEmpId(i)
	return eu
}

// ClearCreatedByEmpId clears the value of the "CreatedByEmpId" field.
func (eu *ExamUpdate) ClearCreatedByEmpId() *ExamUpdate {
	eu.mutation.ClearCreatedByEmpId()
	return eu
}

// SetCreatedByDesignation sets the "CreatedByDesignation" field.
func (eu *ExamUpdate) SetCreatedByDesignation(s string) *ExamUpdate {
	eu.mutation.SetCreatedByDesignation(s)
	return eu
}

// SetNillableCreatedByDesignation sets the "CreatedByDesignation" field if the given value is not nil.
func (eu *ExamUpdate) SetNillableCreatedByDesignation(s *string) *ExamUpdate {
	if s != nil {
		eu.SetCreatedByDesignation(*s)
	}
	return eu
}

// ClearCreatedByDesignation clears the value of the "CreatedByDesignation" field.
func (eu *ExamUpdate) ClearCreatedByDesignation() *ExamUpdate {
	eu.mutation.ClearCreatedByDesignation()
	return eu
}

// SetCreatedDate sets the "CreatedDate" field.
func (eu *ExamUpdate) SetCreatedDate(t time.Time) *ExamUpdate {
	eu.mutation.SetCreatedDate(t)
	return eu
}

// SetNillableCreatedDate sets the "CreatedDate" field if the given value is not nil.
func (eu *ExamUpdate) SetNillableCreatedDate(t *time.Time) *ExamUpdate {
	if t != nil {
		eu.SetCreatedDate(*t)
	}
	return eu
}

// ClearCreatedDate clears the value of the "CreatedDate" field.
func (eu *ExamUpdate) ClearCreatedDate() *ExamUpdate {
	eu.mutation.ClearCreatedDate()
	return eu
}

// SetVerifiedbyid sets the "verifiedbyid" field.
func (eu *ExamUpdate) SetVerifiedbyid(i int64) *ExamUpdate {
	eu.mutation.ResetVerifiedbyid()
	eu.mutation.SetVerifiedbyid(i)
	return eu
}

// SetNillableVerifiedbyid sets the "verifiedbyid" field if the given value is not nil.
func (eu *ExamUpdate) SetNillableVerifiedbyid(i *int64) *ExamUpdate {
	if i != nil {
		eu.SetVerifiedbyid(*i)
	}
	return eu
}

// AddVerifiedbyid adds i to the "verifiedbyid" field.
func (eu *ExamUpdate) AddVerifiedbyid(i int64) *ExamUpdate {
	eu.mutation.AddVerifiedbyid(i)
	return eu
}

// ClearVerifiedbyid clears the value of the "verifiedbyid" field.
func (eu *ExamUpdate) ClearVerifiedbyid() *ExamUpdate {
	eu.mutation.ClearVerifiedbyid()
	return eu
}

// SetVerifiedbyusername sets the "verifiedbyusername" field.
func (eu *ExamUpdate) SetVerifiedbyusername(s string) *ExamUpdate {
	eu.mutation.SetVerifiedbyusername(s)
	return eu
}

// SetNillableVerifiedbyusername sets the "verifiedbyusername" field if the given value is not nil.
func (eu *ExamUpdate) SetNillableVerifiedbyusername(s *string) *ExamUpdate {
	if s != nil {
		eu.SetVerifiedbyusername(*s)
	}
	return eu
}

// ClearVerifiedbyusername clears the value of the "verifiedbyusername" field.
func (eu *ExamUpdate) ClearVerifiedbyusername() *ExamUpdate {
	eu.mutation.ClearVerifiedbyusername()
	return eu
}

// SetVerifiedbyEmployeeid sets the "verifiedbyEmployeeid" field.
func (eu *ExamUpdate) SetVerifiedbyEmployeeid(i int64) *ExamUpdate {
	eu.mutation.ResetVerifiedbyEmployeeid()
	eu.mutation.SetVerifiedbyEmployeeid(i)
	return eu
}

// SetNillableVerifiedbyEmployeeid sets the "verifiedbyEmployeeid" field if the given value is not nil.
func (eu *ExamUpdate) SetNillableVerifiedbyEmployeeid(i *int64) *ExamUpdate {
	if i != nil {
		eu.SetVerifiedbyEmployeeid(*i)
	}
	return eu
}

// AddVerifiedbyEmployeeid adds i to the "verifiedbyEmployeeid" field.
func (eu *ExamUpdate) AddVerifiedbyEmployeeid(i int64) *ExamUpdate {
	eu.mutation.AddVerifiedbyEmployeeid(i)
	return eu
}

// ClearVerifiedbyEmployeeid clears the value of the "verifiedbyEmployeeid" field.
func (eu *ExamUpdate) ClearVerifiedbyEmployeeid() *ExamUpdate {
	eu.mutation.ClearVerifiedbyEmployeeid()
	return eu
}

// SetVerifiedbyDesignation sets the "verifiedbyDesignation" field.
func (eu *ExamUpdate) SetVerifiedbyDesignation(s string) *ExamUpdate {
	eu.mutation.SetVerifiedbyDesignation(s)
	return eu
}

// SetNillableVerifiedbyDesignation sets the "verifiedbyDesignation" field if the given value is not nil.
func (eu *ExamUpdate) SetNillableVerifiedbyDesignation(s *string) *ExamUpdate {
	if s != nil {
		eu.SetVerifiedbyDesignation(*s)
	}
	return eu
}

// ClearVerifiedbyDesignation clears the value of the "verifiedbyDesignation" field.
func (eu *ExamUpdate) ClearVerifiedbyDesignation() *ExamUpdate {
	eu.mutation.ClearVerifiedbyDesignation()
	return eu
}

// SetVerifiedDate sets the "verifiedDate" field.
func (eu *ExamUpdate) SetVerifiedDate(t time.Time) *ExamUpdate {
	eu.mutation.SetVerifiedDate(t)
	return eu
}

// SetNillableVerifiedDate sets the "verifiedDate" field if the given value is not nil.
func (eu *ExamUpdate) SetNillableVerifiedDate(t *time.Time) *ExamUpdate {
	if t != nil {
		eu.SetVerifiedDate(*t)
	}
	return eu
}

// ClearVerifiedDate clears the value of the "verifiedDate" field.
func (eu *ExamUpdate) ClearVerifiedDate() *ExamUpdate {
	eu.mutation.ClearVerifiedDate()
	return eu
}

// SetStatuss sets the "Statuss" field.
func (eu *ExamUpdate) SetStatuss(s string) *ExamUpdate {
	eu.mutation.SetStatuss(s)
	return eu
}

// SetNillableStatuss sets the "Statuss" field if the given value is not nil.
func (eu *ExamUpdate) SetNillableStatuss(s *string) *ExamUpdate {
	if s != nil {
		eu.SetStatuss(*s)
	}
	return eu
}

// ClearStatuss clears the value of the "Statuss" field.
func (eu *ExamUpdate) ClearStatuss() *ExamUpdate {
	eu.mutation.ClearStatuss()
	return eu
}

// SetDeletedbyid sets the "deletedbyid" field.
func (eu *ExamUpdate) SetDeletedbyid(i int64) *ExamUpdate {
	eu.mutation.ResetDeletedbyid()
	eu.mutation.SetDeletedbyid(i)
	return eu
}

// SetNillableDeletedbyid sets the "deletedbyid" field if the given value is not nil.
func (eu *ExamUpdate) SetNillableDeletedbyid(i *int64) *ExamUpdate {
	if i != nil {
		eu.SetDeletedbyid(*i)
	}
	return eu
}

// AddDeletedbyid adds i to the "deletedbyid" field.
func (eu *ExamUpdate) AddDeletedbyid(i int64) *ExamUpdate {
	eu.mutation.AddDeletedbyid(i)
	return eu
}

// ClearDeletedbyid clears the value of the "deletedbyid" field.
func (eu *ExamUpdate) ClearDeletedbyid() *ExamUpdate {
	eu.mutation.ClearDeletedbyid()
	return eu
}

// SetDeletedbyusername sets the "deletedbyusername" field.
func (eu *ExamUpdate) SetDeletedbyusername(s string) *ExamUpdate {
	eu.mutation.SetDeletedbyusername(s)
	return eu
}

// SetNillableDeletedbyusername sets the "deletedbyusername" field if the given value is not nil.
func (eu *ExamUpdate) SetNillableDeletedbyusername(s *string) *ExamUpdate {
	if s != nil {
		eu.SetDeletedbyusername(*s)
	}
	return eu
}

// ClearDeletedbyusername clears the value of the "deletedbyusername" field.
func (eu *ExamUpdate) ClearDeletedbyusername() *ExamUpdate {
	eu.mutation.ClearDeletedbyusername()
	return eu
}

// SetDeletedbyEmployeeid sets the "deletedbyEmployeeid" field.
func (eu *ExamUpdate) SetDeletedbyEmployeeid(i int64) *ExamUpdate {
	eu.mutation.ResetDeletedbyEmployeeid()
	eu.mutation.SetDeletedbyEmployeeid(i)
	return eu
}

// SetNillableDeletedbyEmployeeid sets the "deletedbyEmployeeid" field if the given value is not nil.
func (eu *ExamUpdate) SetNillableDeletedbyEmployeeid(i *int64) *ExamUpdate {
	if i != nil {
		eu.SetDeletedbyEmployeeid(*i)
	}
	return eu
}

// AddDeletedbyEmployeeid adds i to the "deletedbyEmployeeid" field.
func (eu *ExamUpdate) AddDeletedbyEmployeeid(i int64) *ExamUpdate {
	eu.mutation.AddDeletedbyEmployeeid(i)
	return eu
}

// ClearDeletedbyEmployeeid clears the value of the "deletedbyEmployeeid" field.
func (eu *ExamUpdate) ClearDeletedbyEmployeeid() *ExamUpdate {
	eu.mutation.ClearDeletedbyEmployeeid()
	return eu
}

// SetDeletedbyDesignation sets the "deletedbyDesignation" field.
func (eu *ExamUpdate) SetDeletedbyDesignation(s string) *ExamUpdate {
	eu.mutation.SetDeletedbyDesignation(s)
	return eu
}

// SetNillableDeletedbyDesignation sets the "deletedbyDesignation" field if the given value is not nil.
func (eu *ExamUpdate) SetNillableDeletedbyDesignation(s *string) *ExamUpdate {
	if s != nil {
		eu.SetDeletedbyDesignation(*s)
	}
	return eu
}

// ClearDeletedbyDesignation clears the value of the "deletedbyDesignation" field.
func (eu *ExamUpdate) ClearDeletedbyDesignation() *ExamUpdate {
	eu.mutation.ClearDeletedbyDesignation()
	return eu
}

// SetDeletedDate sets the "deletedDate" field.
func (eu *ExamUpdate) SetDeletedDate(t time.Time) *ExamUpdate {
	eu.mutation.SetDeletedDate(t)
	return eu
}

// SetNillableDeletedDate sets the "deletedDate" field if the given value is not nil.
func (eu *ExamUpdate) SetNillableDeletedDate(t *time.Time) *ExamUpdate {
	if t != nil {
		eu.SetDeletedDate(*t)
	}
	return eu
}

// ClearDeletedDate clears the value of the "deletedDate" field.
func (eu *ExamUpdate) ClearDeletedDate() *ExamUpdate {
	eu.mutation.ClearDeletedDate()
	return eu
}

// SetNumOfPapers sets the "NumOfPapers" field.
func (eu *ExamUpdate) SetNumOfPapers(i int32) *ExamUpdate {
	eu.mutation.ResetNumOfPapers()
	eu.mutation.SetNumOfPapers(i)
	return eu
}

// AddNumOfPapers adds i to the "NumOfPapers" field.
func (eu *ExamUpdate) AddNumOfPapers(i int32) *ExamUpdate {
	eu.mutation.AddNumOfPapers(i)
	return eu
}

// SetCalendarCode sets the "CalendarCode" field.
func (eu *ExamUpdate) SetCalendarCode(i int32) *ExamUpdate {
	eu.mutation.ResetCalendarCode()
	eu.mutation.SetCalendarCode(i)
	return eu
}

// SetNillableCalendarCode sets the "CalendarCode" field if the given value is not nil.
func (eu *ExamUpdate) SetNillableCalendarCode(i *int32) *ExamUpdate {
	if i != nil {
		eu.SetCalendarCode(*i)
	}
	return eu
}

// AddCalendarCode adds i to the "CalendarCode" field.
func (eu *ExamUpdate) AddCalendarCode(i int32) *ExamUpdate {
	eu.mutation.AddCalendarCode(i)
	return eu
}

// ClearCalendarCode clears the value of the "CalendarCode" field.
func (eu *ExamUpdate) ClearCalendarCode() *ExamUpdate {
	eu.mutation.ClearCalendarCode()
	return eu
}

// SetPaperCode sets the "PaperCode" field.
func (eu *ExamUpdate) SetPaperCode(i int32) *ExamUpdate {
	eu.mutation.ResetPaperCode()
	eu.mutation.SetPaperCode(i)
	return eu
}

// SetNillablePaperCode sets the "PaperCode" field if the given value is not nil.
func (eu *ExamUpdate) SetNillablePaperCode(i *int32) *ExamUpdate {
	if i != nil {
		eu.SetPaperCode(*i)
	}
	return eu
}

// AddPaperCode adds i to the "PaperCode" field.
func (eu *ExamUpdate) AddPaperCode(i int32) *ExamUpdate {
	eu.mutation.AddPaperCode(i)
	return eu
}

// ClearPaperCode clears the value of the "PaperCode" field.
func (eu *ExamUpdate) ClearPaperCode() *ExamUpdate {
	eu.mutation.ClearPaperCode()
	return eu
}

// SetStatus sets the "Status" field.
func (eu *ExamUpdate) SetStatus(s string) *ExamUpdate {
	eu.mutation.SetStatus(s)
	return eu
}

// SetExamTypeCode sets the "ExamTypeCode" field.
func (eu *ExamUpdate) SetExamTypeCode(i int32) *ExamUpdate {
	eu.mutation.ResetExamTypeCode()
	eu.mutation.SetExamTypeCode(i)
	return eu
}

// SetNillableExamTypeCode sets the "ExamTypeCode" field if the given value is not nil.
func (eu *ExamUpdate) SetNillableExamTypeCode(i *int32) *ExamUpdate {
	if i != nil {
		eu.SetExamTypeCode(*i)
	}
	return eu
}

// AddExamTypeCode adds i to the "ExamTypeCode" field.
func (eu *ExamUpdate) AddExamTypeCode(i int32) *ExamUpdate {
	eu.mutation.AddExamTypeCode(i)
	return eu
}

// ClearExamTypeCode clears the value of the "ExamTypeCode" field.
func (eu *ExamUpdate) ClearExamTypeCode() *ExamUpdate {
	eu.mutation.ClearExamTypeCode()
	return eu
}

// SetCreatedByEmployeeId sets the "CreatedByEmployeeId" field.
func (eu *ExamUpdate) SetCreatedByEmployeeId(s string) *ExamUpdate {
	eu.mutation.SetCreatedByEmployeeId(s)
	return eu
}

// SetNillableCreatedByEmployeeId sets the "CreatedByEmployeeId" field if the given value is not nil.
func (eu *ExamUpdate) SetNillableCreatedByEmployeeId(s *string) *ExamUpdate {
	if s != nil {
		eu.SetCreatedByEmployeeId(*s)
	}
	return eu
}

// ClearCreatedByEmployeeId clears the value of the "CreatedByEmployeeId" field.
func (eu *ExamUpdate) ClearCreatedByEmployeeId() *ExamUpdate {
	eu.mutation.ClearCreatedByEmployeeId()
	return eu
}

// AddNotificationIDs adds the "notifications" edge to the Notification entity by IDs.
func (eu *ExamUpdate) AddNotificationIDs(ids ...int32) *ExamUpdate {
	eu.mutation.AddNotificationIDs(ids...)
	return eu
}

// AddNotifications adds the "notifications" edges to the Notification entity.
func (eu *ExamUpdate) AddNotifications(n ...*Notification) *ExamUpdate {
	ids := make([]int32, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return eu.AddNotificationIDs(ids...)
}

// AddExamsRefIDs adds the "exams_ref" edge to the ExamCalendar entity by IDs.
func (eu *ExamUpdate) AddExamsRefIDs(ids ...int32) *ExamUpdate {
	eu.mutation.AddExamsRefIDs(ids...)
	return eu
}

// AddExamsRef adds the "exams_ref" edges to the ExamCalendar entity.
func (eu *ExamUpdate) AddExamsRef(e ...*ExamCalendar) *ExamUpdate {
	ids := make([]int32, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return eu.AddExamsRefIDs(ids...)
}

// AddPaperIDs adds the "papers" edge to the ExamPapers entity by IDs.
func (eu *ExamUpdate) AddPaperIDs(ids ...int32) *ExamUpdate {
	eu.mutation.AddPaperIDs(ids...)
	return eu
}

// AddPapers adds the "papers" edges to the ExamPapers entity.
func (eu *ExamUpdate) AddPapers(e ...*ExamPapers) *ExamUpdate {
	ids := make([]int32, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return eu.AddPaperIDs(ids...)
}

// AddExamEligibilityIDs adds the "ExamEligibility" edge to the EligibilityMaster entity by IDs.
func (eu *ExamUpdate) AddExamEligibilityIDs(ids ...int32) *ExamUpdate {
	eu.mutation.AddExamEligibilityIDs(ids...)
	return eu
}

// AddExamEligibility adds the "ExamEligibility" edges to the EligibilityMaster entity.
func (eu *ExamUpdate) AddExamEligibility(e ...*EligibilityMaster) *ExamUpdate {
	ids := make([]int32, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return eu.AddExamEligibilityIDs(ids...)
}

// AddExamsTypeIDs adds the "exams_type" edge to the ExamType entity by IDs.
func (eu *ExamUpdate) AddExamsTypeIDs(ids ...int32) *ExamUpdate {
	eu.mutation.AddExamsTypeIDs(ids...)
	return eu
}

// AddExamsType adds the "exams_type" edges to the ExamType entity.
func (eu *ExamUpdate) AddExamsType(e ...*ExamType) *ExamUpdate {
	ids := make([]int32, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return eu.AddExamsTypeIDs(ids...)
}

// AddExamcentresipIDs adds the "examcentresip" edge to the Center entity by IDs.
func (eu *ExamUpdate) AddExamcentresipIDs(ids ...int32) *ExamUpdate {
	eu.mutation.AddExamcentresipIDs(ids...)
	return eu
}

// AddExamcentresip adds the "examcentresip" edges to the Center entity.
func (eu *ExamUpdate) AddExamcentresip(c ...*Center) *ExamUpdate {
	ids := make([]int32, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return eu.AddExamcentresipIDs(ids...)
}

// AddExamMasterRefIDs adds the "ExamMasterRef" edge to the Exam_Applications_IP entity by IDs.
func (eu *ExamUpdate) AddExamMasterRefIDs(ids ...int64) *ExamUpdate {
	eu.mutation.AddExamMasterRefIDs(ids...)
	return eu
}

// AddExamMasterRef adds the "ExamMasterRef" edges to the Exam_Applications_IP entity.
func (eu *ExamUpdate) AddExamMasterRef(e ...*Exam_Applications_IP) *ExamUpdate {
	ids := make([]int64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return eu.AddExamMasterRefIDs(ids...)
}

// AddExamMasterRefPSIDs adds the "ExamMasterRefPS" edge to the Exam_Applications_PS entity by IDs.
func (eu *ExamUpdate) AddExamMasterRefPSIDs(ids ...int64) *ExamUpdate {
	eu.mutation.AddExamMasterRefPSIDs(ids...)
	return eu
}

// AddExamMasterRefPS adds the "ExamMasterRefPS" edges to the Exam_Applications_PS entity.
func (eu *ExamUpdate) AddExamMasterRefPS(e ...*Exam_Applications_PS) *ExamUpdate {
	ids := make([]int64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return eu.AddExamMasterRefPSIDs(ids...)
}

// AddExamNotificationsRefIDs adds the "Exam_Notifications_Ref" edge to the ExamNotifications entity by IDs.
func (eu *ExamUpdate) AddExamNotificationsRefIDs(ids ...int32) *ExamUpdate {
	eu.mutation.AddExamNotificationsRefIDs(ids...)
	return eu
}

// AddExamNotificationsRef adds the "Exam_Notifications_Ref" edges to the ExamNotifications entity.
func (eu *ExamUpdate) AddExamNotificationsRef(e ...*ExamNotifications) *ExamUpdate {
	ids := make([]int32, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return eu.AddExamNotificationsRefIDs(ids...)
}

// AddExamMasterRefGDSPAIDs adds the "ExamMasterRefGDSPA" edge to the Exam_Applications_GDSPA entity by IDs.
func (eu *ExamUpdate) AddExamMasterRefGDSPAIDs(ids ...int64) *ExamUpdate {
	eu.mutation.AddExamMasterRefGDSPAIDs(ids...)
	return eu
}

// AddExamMasterRefGDSPA adds the "ExamMasterRefGDSPA" edges to the Exam_Applications_GDSPA entity.
func (eu *ExamUpdate) AddExamMasterRefGDSPA(e ...*Exam_Applications_GDSPA) *ExamUpdate {
	ids := make([]int64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return eu.AddExamMasterRefGDSPAIDs(ids...)
}

// AddExamMasterRefGDSPMIDs adds the "ExamMasterRefGDSPM" edge to the Exam_Applications_GDSPM entity by IDs.
func (eu *ExamUpdate) AddExamMasterRefGDSPMIDs(ids ...int64) *ExamUpdate {
	eu.mutation.AddExamMasterRefGDSPMIDs(ids...)
	return eu
}

// AddExamMasterRefGDSPM adds the "ExamMasterRefGDSPM" edges to the Exam_Applications_GDSPM entity.
func (eu *ExamUpdate) AddExamMasterRefGDSPM(e ...*Exam_Applications_GDSPM) *ExamUpdate {
	ids := make([]int64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return eu.AddExamMasterRefGDSPMIDs(ids...)
}

// AddExamMasterRefPMPAIDs adds the "ExamMasterRefPMPA" edge to the Exam_Applications_PMPA entity by IDs.
func (eu *ExamUpdate) AddExamMasterRefPMPAIDs(ids ...int64) *ExamUpdate {
	eu.mutation.AddExamMasterRefPMPAIDs(ids...)
	return eu
}

// AddExamMasterRefPMPA adds the "ExamMasterRefPMPA" edges to the Exam_Applications_PMPA entity.
func (eu *ExamUpdate) AddExamMasterRefPMPA(e ...*Exam_Applications_PMPA) *ExamUpdate {
	ids := make([]int64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return eu.AddExamMasterRefPMPAIDs(ids...)
}

// AddExamMasterRefMTSPMMGIDs adds the "ExamMasterRefMTSPMMG" edge to the Exam_Application_MTSPMMG entity by IDs.
func (eu *ExamUpdate) AddExamMasterRefMTSPMMGIDs(ids ...int64) *ExamUpdate {
	eu.mutation.AddExamMasterRefMTSPMMGIDs(ids...)
	return eu
}

// AddExamMasterRefMTSPMMG adds the "ExamMasterRefMTSPMMG" edges to the Exam_Application_MTSPMMG entity.
func (eu *ExamUpdate) AddExamMasterRefMTSPMMG(e ...*Exam_Application_MTSPMMG) *ExamUpdate {
	ids := make([]int64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return eu.AddExamMasterRefMTSPMMGIDs(ids...)
}

// AddLogDatumIDs adds the "LogData" edge to the Logs entity by IDs.
func (eu *ExamUpdate) AddLogDatumIDs(ids ...int64) *ExamUpdate {
	eu.mutation.AddLogDatumIDs(ids...)
	return eu
}

// AddLogData adds the "LogData" edges to the Logs entity.
func (eu *ExamUpdate) AddLogData(l ...*Logs) *ExamUpdate {
	ids := make([]int64, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return eu.AddLogDatumIDs(ids...)
}

// Mutation returns the ExamMutation object of the builder.
func (eu *ExamUpdate) Mutation() *ExamMutation {
	return eu.mutation
}

// ClearNotifications clears all "notifications" edges to the Notification entity.
func (eu *ExamUpdate) ClearNotifications() *ExamUpdate {
	eu.mutation.ClearNotifications()
	return eu
}

// RemoveNotificationIDs removes the "notifications" edge to Notification entities by IDs.
func (eu *ExamUpdate) RemoveNotificationIDs(ids ...int32) *ExamUpdate {
	eu.mutation.RemoveNotificationIDs(ids...)
	return eu
}

// RemoveNotifications removes "notifications" edges to Notification entities.
func (eu *ExamUpdate) RemoveNotifications(n ...*Notification) *ExamUpdate {
	ids := make([]int32, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return eu.RemoveNotificationIDs(ids...)
}

// ClearExamsRef clears all "exams_ref" edges to the ExamCalendar entity.
func (eu *ExamUpdate) ClearExamsRef() *ExamUpdate {
	eu.mutation.ClearExamsRef()
	return eu
}

// RemoveExamsRefIDs removes the "exams_ref" edge to ExamCalendar entities by IDs.
func (eu *ExamUpdate) RemoveExamsRefIDs(ids ...int32) *ExamUpdate {
	eu.mutation.RemoveExamsRefIDs(ids...)
	return eu
}

// RemoveExamsRef removes "exams_ref" edges to ExamCalendar entities.
func (eu *ExamUpdate) RemoveExamsRef(e ...*ExamCalendar) *ExamUpdate {
	ids := make([]int32, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return eu.RemoveExamsRefIDs(ids...)
}

// ClearPapers clears all "papers" edges to the ExamPapers entity.
func (eu *ExamUpdate) ClearPapers() *ExamUpdate {
	eu.mutation.ClearPapers()
	return eu
}

// RemovePaperIDs removes the "papers" edge to ExamPapers entities by IDs.
func (eu *ExamUpdate) RemovePaperIDs(ids ...int32) *ExamUpdate {
	eu.mutation.RemovePaperIDs(ids...)
	return eu
}

// RemovePapers removes "papers" edges to ExamPapers entities.
func (eu *ExamUpdate) RemovePapers(e ...*ExamPapers) *ExamUpdate {
	ids := make([]int32, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return eu.RemovePaperIDs(ids...)
}

// ClearExamEligibility clears all "ExamEligibility" edges to the EligibilityMaster entity.
func (eu *ExamUpdate) ClearExamEligibility() *ExamUpdate {
	eu.mutation.ClearExamEligibility()
	return eu
}

// RemoveExamEligibilityIDs removes the "ExamEligibility" edge to EligibilityMaster entities by IDs.
func (eu *ExamUpdate) RemoveExamEligibilityIDs(ids ...int32) *ExamUpdate {
	eu.mutation.RemoveExamEligibilityIDs(ids...)
	return eu
}

// RemoveExamEligibility removes "ExamEligibility" edges to EligibilityMaster entities.
func (eu *ExamUpdate) RemoveExamEligibility(e ...*EligibilityMaster) *ExamUpdate {
	ids := make([]int32, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return eu.RemoveExamEligibilityIDs(ids...)
}

// ClearExamsType clears all "exams_type" edges to the ExamType entity.
func (eu *ExamUpdate) ClearExamsType() *ExamUpdate {
	eu.mutation.ClearExamsType()
	return eu
}

// RemoveExamsTypeIDs removes the "exams_type" edge to ExamType entities by IDs.
func (eu *ExamUpdate) RemoveExamsTypeIDs(ids ...int32) *ExamUpdate {
	eu.mutation.RemoveExamsTypeIDs(ids...)
	return eu
}

// RemoveExamsType removes "exams_type" edges to ExamType entities.
func (eu *ExamUpdate) RemoveExamsType(e ...*ExamType) *ExamUpdate {
	ids := make([]int32, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return eu.RemoveExamsTypeIDs(ids...)
}

// ClearExamcentresip clears all "examcentresip" edges to the Center entity.
func (eu *ExamUpdate) ClearExamcentresip() *ExamUpdate {
	eu.mutation.ClearExamcentresip()
	return eu
}

// RemoveExamcentresipIDs removes the "examcentresip" edge to Center entities by IDs.
func (eu *ExamUpdate) RemoveExamcentresipIDs(ids ...int32) *ExamUpdate {
	eu.mutation.RemoveExamcentresipIDs(ids...)
	return eu
}

// RemoveExamcentresip removes "examcentresip" edges to Center entities.
func (eu *ExamUpdate) RemoveExamcentresip(c ...*Center) *ExamUpdate {
	ids := make([]int32, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return eu.RemoveExamcentresipIDs(ids...)
}

// ClearExamMasterRef clears all "ExamMasterRef" edges to the Exam_Applications_IP entity.
func (eu *ExamUpdate) ClearExamMasterRef() *ExamUpdate {
	eu.mutation.ClearExamMasterRef()
	return eu
}

// RemoveExamMasterRefIDs removes the "ExamMasterRef" edge to Exam_Applications_IP entities by IDs.
func (eu *ExamUpdate) RemoveExamMasterRefIDs(ids ...int64) *ExamUpdate {
	eu.mutation.RemoveExamMasterRefIDs(ids...)
	return eu
}

// RemoveExamMasterRef removes "ExamMasterRef" edges to Exam_Applications_IP entities.
func (eu *ExamUpdate) RemoveExamMasterRef(e ...*Exam_Applications_IP) *ExamUpdate {
	ids := make([]int64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return eu.RemoveExamMasterRefIDs(ids...)
}

// ClearExamMasterRefPS clears all "ExamMasterRefPS" edges to the Exam_Applications_PS entity.
func (eu *ExamUpdate) ClearExamMasterRefPS() *ExamUpdate {
	eu.mutation.ClearExamMasterRefPS()
	return eu
}

// RemoveExamMasterRefPSIDs removes the "ExamMasterRefPS" edge to Exam_Applications_PS entities by IDs.
func (eu *ExamUpdate) RemoveExamMasterRefPSIDs(ids ...int64) *ExamUpdate {
	eu.mutation.RemoveExamMasterRefPSIDs(ids...)
	return eu
}

// RemoveExamMasterRefPS removes "ExamMasterRefPS" edges to Exam_Applications_PS entities.
func (eu *ExamUpdate) RemoveExamMasterRefPS(e ...*Exam_Applications_PS) *ExamUpdate {
	ids := make([]int64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return eu.RemoveExamMasterRefPSIDs(ids...)
}

// ClearExamNotificationsRef clears all "Exam_Notifications_Ref" edges to the ExamNotifications entity.
func (eu *ExamUpdate) ClearExamNotificationsRef() *ExamUpdate {
	eu.mutation.ClearExamNotificationsRef()
	return eu
}

// RemoveExamNotificationsRefIDs removes the "Exam_Notifications_Ref" edge to ExamNotifications entities by IDs.
func (eu *ExamUpdate) RemoveExamNotificationsRefIDs(ids ...int32) *ExamUpdate {
	eu.mutation.RemoveExamNotificationsRefIDs(ids...)
	return eu
}

// RemoveExamNotificationsRef removes "Exam_Notifications_Ref" edges to ExamNotifications entities.
func (eu *ExamUpdate) RemoveExamNotificationsRef(e ...*ExamNotifications) *ExamUpdate {
	ids := make([]int32, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return eu.RemoveExamNotificationsRefIDs(ids...)
}

// ClearExamMasterRefGDSPA clears all "ExamMasterRefGDSPA" edges to the Exam_Applications_GDSPA entity.
func (eu *ExamUpdate) ClearExamMasterRefGDSPA() *ExamUpdate {
	eu.mutation.ClearExamMasterRefGDSPA()
	return eu
}

// RemoveExamMasterRefGDSPAIDs removes the "ExamMasterRefGDSPA" edge to Exam_Applications_GDSPA entities by IDs.
func (eu *ExamUpdate) RemoveExamMasterRefGDSPAIDs(ids ...int64) *ExamUpdate {
	eu.mutation.RemoveExamMasterRefGDSPAIDs(ids...)
	return eu
}

// RemoveExamMasterRefGDSPA removes "ExamMasterRefGDSPA" edges to Exam_Applications_GDSPA entities.
func (eu *ExamUpdate) RemoveExamMasterRefGDSPA(e ...*Exam_Applications_GDSPA) *ExamUpdate {
	ids := make([]int64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return eu.RemoveExamMasterRefGDSPAIDs(ids...)
}

// ClearExamMasterRefGDSPM clears all "ExamMasterRefGDSPM" edges to the Exam_Applications_GDSPM entity.
func (eu *ExamUpdate) ClearExamMasterRefGDSPM() *ExamUpdate {
	eu.mutation.ClearExamMasterRefGDSPM()
	return eu
}

// RemoveExamMasterRefGDSPMIDs removes the "ExamMasterRefGDSPM" edge to Exam_Applications_GDSPM entities by IDs.
func (eu *ExamUpdate) RemoveExamMasterRefGDSPMIDs(ids ...int64) *ExamUpdate {
	eu.mutation.RemoveExamMasterRefGDSPMIDs(ids...)
	return eu
}

// RemoveExamMasterRefGDSPM removes "ExamMasterRefGDSPM" edges to Exam_Applications_GDSPM entities.
func (eu *ExamUpdate) RemoveExamMasterRefGDSPM(e ...*Exam_Applications_GDSPM) *ExamUpdate {
	ids := make([]int64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return eu.RemoveExamMasterRefGDSPMIDs(ids...)
}

// ClearExamMasterRefPMPA clears all "ExamMasterRefPMPA" edges to the Exam_Applications_PMPA entity.
func (eu *ExamUpdate) ClearExamMasterRefPMPA() *ExamUpdate {
	eu.mutation.ClearExamMasterRefPMPA()
	return eu
}

// RemoveExamMasterRefPMPAIDs removes the "ExamMasterRefPMPA" edge to Exam_Applications_PMPA entities by IDs.
func (eu *ExamUpdate) RemoveExamMasterRefPMPAIDs(ids ...int64) *ExamUpdate {
	eu.mutation.RemoveExamMasterRefPMPAIDs(ids...)
	return eu
}

// RemoveExamMasterRefPMPA removes "ExamMasterRefPMPA" edges to Exam_Applications_PMPA entities.
func (eu *ExamUpdate) RemoveExamMasterRefPMPA(e ...*Exam_Applications_PMPA) *ExamUpdate {
	ids := make([]int64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return eu.RemoveExamMasterRefPMPAIDs(ids...)
}

// ClearExamMasterRefMTSPMMG clears all "ExamMasterRefMTSPMMG" edges to the Exam_Application_MTSPMMG entity.
func (eu *ExamUpdate) ClearExamMasterRefMTSPMMG() *ExamUpdate {
	eu.mutation.ClearExamMasterRefMTSPMMG()
	return eu
}

// RemoveExamMasterRefMTSPMMGIDs removes the "ExamMasterRefMTSPMMG" edge to Exam_Application_MTSPMMG entities by IDs.
func (eu *ExamUpdate) RemoveExamMasterRefMTSPMMGIDs(ids ...int64) *ExamUpdate {
	eu.mutation.RemoveExamMasterRefMTSPMMGIDs(ids...)
	return eu
}

// RemoveExamMasterRefMTSPMMG removes "ExamMasterRefMTSPMMG" edges to Exam_Application_MTSPMMG entities.
func (eu *ExamUpdate) RemoveExamMasterRefMTSPMMG(e ...*Exam_Application_MTSPMMG) *ExamUpdate {
	ids := make([]int64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return eu.RemoveExamMasterRefMTSPMMGIDs(ids...)
}

// ClearLogData clears all "LogData" edges to the Logs entity.
func (eu *ExamUpdate) ClearLogData() *ExamUpdate {
	eu.mutation.ClearLogData()
	return eu
}

// RemoveLogDatumIDs removes the "LogData" edge to Logs entities by IDs.
func (eu *ExamUpdate) RemoveLogDatumIDs(ids ...int64) *ExamUpdate {
	eu.mutation.RemoveLogDatumIDs(ids...)
	return eu
}

// RemoveLogData removes "LogData" edges to Logs entities.
func (eu *ExamUpdate) RemoveLogData(l ...*Logs) *ExamUpdate {
	ids := make([]int64, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return eu.RemoveLogDatumIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (eu *ExamUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, eu.sqlSave, eu.mutation, eu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (eu *ExamUpdate) SaveX(ctx context.Context) int {
	affected, err := eu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (eu *ExamUpdate) Exec(ctx context.Context) error {
	_, err := eu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eu *ExamUpdate) ExecX(ctx context.Context) {
	if err := eu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (eu *ExamUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(exam.Table, exam.Columns, sqlgraph.NewFieldSpec(exam.FieldID, field.TypeInt32))
	if ps := eu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eu.mutation.ExamType(); ok {
		_spec.SetField(exam.FieldExamType, field.TypeString, value)
	}
	if value, ok := eu.mutation.ExamName(); ok {
		_spec.SetField(exam.FieldExamName, field.TypeString, value)
	}
	if value, ok := eu.mutation.ExamShortName(); ok {
		_spec.SetField(exam.FieldExamShortName, field.TypeString, value)
	}
	if eu.mutation.ExamShortNameCleared() {
		_spec.ClearField(exam.FieldExamShortName, field.TypeString)
	}
	if value, ok := eu.mutation.SmsExamShortName(); ok {
		_spec.SetField(exam.FieldSmsExamShortName, field.TypeString, value)
	}
	if eu.mutation.SmsExamShortNameCleared() {
		_spec.ClearField(exam.FieldSmsExamShortName, field.TypeString)
	}
	if value, ok := eu.mutation.ExamCode(); ok {
		_spec.SetField(exam.FieldExamCode, field.TypeInt32, value)
	}
	if value, ok := eu.mutation.AddedExamCode(); ok {
		_spec.AddField(exam.FieldExamCode, field.TypeInt32, value)
	}
	if eu.mutation.ExamCodeCleared() {
		_spec.ClearField(exam.FieldExamCode, field.TypeInt32)
	}
	if value, ok := eu.mutation.CalenderIssuedBy(); ok {
		_spec.SetField(exam.FieldCalenderIssuedBy, field.TypeString, value)
	}
	if eu.mutation.CalenderIssuedByCleared() {
		_spec.ClearField(exam.FieldCalenderIssuedBy, field.TypeString)
	}
	if value, ok := eu.mutation.NotificationBy(); ok {
		_spec.SetField(exam.FieldNotificationBy, field.TypeString, value)
	}
	if value, ok := eu.mutation.ConductedBy(); ok {
		_spec.SetField(exam.FieldConductedBy, field.TypeString, value)
	}
	if value, ok := eu.mutation.NodalOfficerLevel(); ok {
		_spec.SetField(exam.FieldNodalOfficerLevel, field.TypeString, value)
	}
	if eu.mutation.NodalOfficerLevelCleared() {
		_spec.ClearField(exam.FieldNodalOfficerLevel, field.TypeString)
	}
	if value, ok := eu.mutation.TentativeNotificationMandatoryDate(); ok {
		_spec.SetField(exam.FieldTentativeNotificationMandatoryDate, field.TypeBool, value)
	}
	if value, ok := eu.mutation.LocalLanguage(); ok {
		_spec.SetField(exam.FieldLocalLanguage, field.TypeBool, value)
	}
	if value, ok := eu.mutation.OptionForPost(); ok {
		_spec.SetField(exam.FieldOptionForPost, field.TypeBool, value)
	}
	if value, ok := eu.mutation.OptionToWriteExamOtherThanParent(); ok {
		_spec.SetField(exam.FieldOptionToWriteExamOtherThanParent, field.TypeBool, value)
	}
	if value, ok := eu.mutation.TableName(); ok {
		_spec.SetField(exam.FieldTableName, field.TypeString, value)
	}
	if eu.mutation.TableNameCleared() {
		_spec.ClearField(exam.FieldTableName, field.TypeString)
	}
	if value, ok := eu.mutation.OrderNumber(); ok {
		_spec.SetField(exam.FieldOrderNumber, field.TypeString, value)
	}
	if eu.mutation.OrderNumberCleared() {
		_spec.ClearField(exam.FieldOrderNumber, field.TypeString)
	}
	if value, ok := eu.mutation.CreatedById(); ok {
		_spec.SetField(exam.FieldCreatedById, field.TypeInt64, value)
	}
	if value, ok := eu.mutation.AddedCreatedById(); ok {
		_spec.AddField(exam.FieldCreatedById, field.TypeInt64, value)
	}
	if eu.mutation.CreatedByIdCleared() {
		_spec.ClearField(exam.FieldCreatedById, field.TypeInt64)
	}
	if value, ok := eu.mutation.CreatedByUserName(); ok {
		_spec.SetField(exam.FieldCreatedByUserName, field.TypeString, value)
	}
	if eu.mutation.CreatedByUserNameCleared() {
		_spec.ClearField(exam.FieldCreatedByUserName, field.TypeString)
	}
	if value, ok := eu.mutation.CreatedByEmpId(); ok {
		_spec.SetField(exam.FieldCreatedByEmpId, field.TypeInt64, value)
	}
	if value, ok := eu.mutation.AddedCreatedByEmpId(); ok {
		_spec.AddField(exam.FieldCreatedByEmpId, field.TypeInt64, value)
	}
	if eu.mutation.CreatedByEmpIdCleared() {
		_spec.ClearField(exam.FieldCreatedByEmpId, field.TypeInt64)
	}
	if value, ok := eu.mutation.CreatedByDesignation(); ok {
		_spec.SetField(exam.FieldCreatedByDesignation, field.TypeString, value)
	}
	if eu.mutation.CreatedByDesignationCleared() {
		_spec.ClearField(exam.FieldCreatedByDesignation, field.TypeString)
	}
	if value, ok := eu.mutation.CreatedDate(); ok {
		_spec.SetField(exam.FieldCreatedDate, field.TypeTime, value)
	}
	if eu.mutation.CreatedDateCleared() {
		_spec.ClearField(exam.FieldCreatedDate, field.TypeTime)
	}
	if value, ok := eu.mutation.Verifiedbyid(); ok {
		_spec.SetField(exam.FieldVerifiedbyid, field.TypeInt64, value)
	}
	if value, ok := eu.mutation.AddedVerifiedbyid(); ok {
		_spec.AddField(exam.FieldVerifiedbyid, field.TypeInt64, value)
	}
	if eu.mutation.VerifiedbyidCleared() {
		_spec.ClearField(exam.FieldVerifiedbyid, field.TypeInt64)
	}
	if value, ok := eu.mutation.Verifiedbyusername(); ok {
		_spec.SetField(exam.FieldVerifiedbyusername, field.TypeString, value)
	}
	if eu.mutation.VerifiedbyusernameCleared() {
		_spec.ClearField(exam.FieldVerifiedbyusername, field.TypeString)
	}
	if value, ok := eu.mutation.VerifiedbyEmployeeid(); ok {
		_spec.SetField(exam.FieldVerifiedbyEmployeeid, field.TypeInt64, value)
	}
	if value, ok := eu.mutation.AddedVerifiedbyEmployeeid(); ok {
		_spec.AddField(exam.FieldVerifiedbyEmployeeid, field.TypeInt64, value)
	}
	if eu.mutation.VerifiedbyEmployeeidCleared() {
		_spec.ClearField(exam.FieldVerifiedbyEmployeeid, field.TypeInt64)
	}
	if value, ok := eu.mutation.VerifiedbyDesignation(); ok {
		_spec.SetField(exam.FieldVerifiedbyDesignation, field.TypeString, value)
	}
	if eu.mutation.VerifiedbyDesignationCleared() {
		_spec.ClearField(exam.FieldVerifiedbyDesignation, field.TypeString)
	}
	if value, ok := eu.mutation.VerifiedDate(); ok {
		_spec.SetField(exam.FieldVerifiedDate, field.TypeTime, value)
	}
	if eu.mutation.VerifiedDateCleared() {
		_spec.ClearField(exam.FieldVerifiedDate, field.TypeTime)
	}
	if value, ok := eu.mutation.Statuss(); ok {
		_spec.SetField(exam.FieldStatuss, field.TypeString, value)
	}
	if eu.mutation.StatussCleared() {
		_spec.ClearField(exam.FieldStatuss, field.TypeString)
	}
	if value, ok := eu.mutation.Deletedbyid(); ok {
		_spec.SetField(exam.FieldDeletedbyid, field.TypeInt64, value)
	}
	if value, ok := eu.mutation.AddedDeletedbyid(); ok {
		_spec.AddField(exam.FieldDeletedbyid, field.TypeInt64, value)
	}
	if eu.mutation.DeletedbyidCleared() {
		_spec.ClearField(exam.FieldDeletedbyid, field.TypeInt64)
	}
	if value, ok := eu.mutation.Deletedbyusername(); ok {
		_spec.SetField(exam.FieldDeletedbyusername, field.TypeString, value)
	}
	if eu.mutation.DeletedbyusernameCleared() {
		_spec.ClearField(exam.FieldDeletedbyusername, field.TypeString)
	}
	if value, ok := eu.mutation.DeletedbyEmployeeid(); ok {
		_spec.SetField(exam.FieldDeletedbyEmployeeid, field.TypeInt64, value)
	}
	if value, ok := eu.mutation.AddedDeletedbyEmployeeid(); ok {
		_spec.AddField(exam.FieldDeletedbyEmployeeid, field.TypeInt64, value)
	}
	if eu.mutation.DeletedbyEmployeeidCleared() {
		_spec.ClearField(exam.FieldDeletedbyEmployeeid, field.TypeInt64)
	}
	if value, ok := eu.mutation.DeletedbyDesignation(); ok {
		_spec.SetField(exam.FieldDeletedbyDesignation, field.TypeString, value)
	}
	if eu.mutation.DeletedbyDesignationCleared() {
		_spec.ClearField(exam.FieldDeletedbyDesignation, field.TypeString)
	}
	if value, ok := eu.mutation.DeletedDate(); ok {
		_spec.SetField(exam.FieldDeletedDate, field.TypeTime, value)
	}
	if eu.mutation.DeletedDateCleared() {
		_spec.ClearField(exam.FieldDeletedDate, field.TypeTime)
	}
	if value, ok := eu.mutation.NumOfPapers(); ok {
		_spec.SetField(exam.FieldNumOfPapers, field.TypeInt32, value)
	}
	if value, ok := eu.mutation.AddedNumOfPapers(); ok {
		_spec.AddField(exam.FieldNumOfPapers, field.TypeInt32, value)
	}
	if value, ok := eu.mutation.CalendarCode(); ok {
		_spec.SetField(exam.FieldCalendarCode, field.TypeInt32, value)
	}
	if value, ok := eu.mutation.AddedCalendarCode(); ok {
		_spec.AddField(exam.FieldCalendarCode, field.TypeInt32, value)
	}
	if eu.mutation.CalendarCodeCleared() {
		_spec.ClearField(exam.FieldCalendarCode, field.TypeInt32)
	}
	if value, ok := eu.mutation.PaperCode(); ok {
		_spec.SetField(exam.FieldPaperCode, field.TypeInt32, value)
	}
	if value, ok := eu.mutation.AddedPaperCode(); ok {
		_spec.AddField(exam.FieldPaperCode, field.TypeInt32, value)
	}
	if eu.mutation.PaperCodeCleared() {
		_spec.ClearField(exam.FieldPaperCode, field.TypeInt32)
	}
	if value, ok := eu.mutation.Status(); ok {
		_spec.SetField(exam.FieldStatus, field.TypeString, value)
	}
	if value, ok := eu.mutation.ExamTypeCode(); ok {
		_spec.SetField(exam.FieldExamTypeCode, field.TypeInt32, value)
	}
	if value, ok := eu.mutation.AddedExamTypeCode(); ok {
		_spec.AddField(exam.FieldExamTypeCode, field.TypeInt32, value)
	}
	if eu.mutation.ExamTypeCodeCleared() {
		_spec.ClearField(exam.FieldExamTypeCode, field.TypeInt32)
	}
	if value, ok := eu.mutation.CreatedByEmployeeId(); ok {
		_spec.SetField(exam.FieldCreatedByEmployeeId, field.TypeString, value)
	}
	if eu.mutation.CreatedByEmployeeIdCleared() {
		_spec.ClearField(exam.FieldCreatedByEmployeeId, field.TypeString)
	}
	if eu.mutation.NotificationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam.NotificationsTable,
			Columns: []string{exam.NotificationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notification.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedNotificationsIDs(); len(nodes) > 0 && !eu.mutation.NotificationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam.NotificationsTable,
			Columns: []string{exam.NotificationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notification.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.NotificationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam.NotificationsTable,
			Columns: []string{exam.NotificationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notification.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.ExamsRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam.ExamsRefTable,
			Columns: []string{exam.ExamsRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(examcalendar.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedExamsRefIDs(); len(nodes) > 0 && !eu.mutation.ExamsRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam.ExamsRefTable,
			Columns: []string{exam.ExamsRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(examcalendar.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.ExamsRefIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam.ExamsRefTable,
			Columns: []string{exam.ExamsRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(examcalendar.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.PapersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam.PapersTable,
			Columns: []string{exam.PapersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exampapers.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedPapersIDs(); len(nodes) > 0 && !eu.mutation.PapersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam.PapersTable,
			Columns: []string{exam.PapersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exampapers.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.PapersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam.PapersTable,
			Columns: []string{exam.PapersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exampapers.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.ExamEligibilityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam.ExamEligibilityTable,
			Columns: []string{exam.ExamEligibilityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(eligibilitymaster.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedExamEligibilityIDs(); len(nodes) > 0 && !eu.mutation.ExamEligibilityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam.ExamEligibilityTable,
			Columns: []string{exam.ExamEligibilityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(eligibilitymaster.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.ExamEligibilityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam.ExamEligibilityTable,
			Columns: []string{exam.ExamEligibilityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(eligibilitymaster.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.ExamsTypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam.ExamsTypeTable,
			Columns: []string{exam.ExamsTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(examtype.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedExamsTypeIDs(); len(nodes) > 0 && !eu.mutation.ExamsTypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam.ExamsTypeTable,
			Columns: []string{exam.ExamsTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(examtype.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.ExamsTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam.ExamsTypeTable,
			Columns: []string{exam.ExamsTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(examtype.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.ExamcentresipCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam.ExamcentresipTable,
			Columns: []string{exam.ExamcentresipColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(center.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedExamcentresipIDs(); len(nodes) > 0 && !eu.mutation.ExamcentresipCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam.ExamcentresipTable,
			Columns: []string{exam.ExamcentresipColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(center.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.ExamcentresipIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam.ExamcentresipTable,
			Columns: []string{exam.ExamcentresipColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(center.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.ExamMasterRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam.ExamMasterRefTable,
			Columns: []string{exam.ExamMasterRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_ip.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedExamMasterRefIDs(); len(nodes) > 0 && !eu.mutation.ExamMasterRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam.ExamMasterRefTable,
			Columns: []string{exam.ExamMasterRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_ip.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.ExamMasterRefIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam.ExamMasterRefTable,
			Columns: []string{exam.ExamMasterRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_ip.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.ExamMasterRefPSCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam.ExamMasterRefPSTable,
			Columns: []string{exam.ExamMasterRefPSColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_ps.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedExamMasterRefPSIDs(); len(nodes) > 0 && !eu.mutation.ExamMasterRefPSCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam.ExamMasterRefPSTable,
			Columns: []string{exam.ExamMasterRefPSColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_ps.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.ExamMasterRefPSIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam.ExamMasterRefPSTable,
			Columns: []string{exam.ExamMasterRefPSColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_ps.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.ExamNotificationsRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam.ExamNotificationsRefTable,
			Columns: []string{exam.ExamNotificationsRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(examnotifications.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedExamNotificationsRefIDs(); len(nodes) > 0 && !eu.mutation.ExamNotificationsRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam.ExamNotificationsRefTable,
			Columns: []string{exam.ExamNotificationsRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(examnotifications.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.ExamNotificationsRefIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam.ExamNotificationsRefTable,
			Columns: []string{exam.ExamNotificationsRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(examnotifications.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.ExamMasterRefGDSPACleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam.ExamMasterRefGDSPATable,
			Columns: []string{exam.ExamMasterRefGDSPAColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_gdspa.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedExamMasterRefGDSPAIDs(); len(nodes) > 0 && !eu.mutation.ExamMasterRefGDSPACleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam.ExamMasterRefGDSPATable,
			Columns: []string{exam.ExamMasterRefGDSPAColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_gdspa.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.ExamMasterRefGDSPAIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam.ExamMasterRefGDSPATable,
			Columns: []string{exam.ExamMasterRefGDSPAColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_gdspa.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.ExamMasterRefGDSPMCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam.ExamMasterRefGDSPMTable,
			Columns: []string{exam.ExamMasterRefGDSPMColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_gdspm.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedExamMasterRefGDSPMIDs(); len(nodes) > 0 && !eu.mutation.ExamMasterRefGDSPMCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam.ExamMasterRefGDSPMTable,
			Columns: []string{exam.ExamMasterRefGDSPMColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_gdspm.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.ExamMasterRefGDSPMIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam.ExamMasterRefGDSPMTable,
			Columns: []string{exam.ExamMasterRefGDSPMColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_gdspm.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.ExamMasterRefPMPACleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam.ExamMasterRefPMPATable,
			Columns: []string{exam.ExamMasterRefPMPAColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_pmpa.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedExamMasterRefPMPAIDs(); len(nodes) > 0 && !eu.mutation.ExamMasterRefPMPACleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam.ExamMasterRefPMPATable,
			Columns: []string{exam.ExamMasterRefPMPAColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_pmpa.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.ExamMasterRefPMPAIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam.ExamMasterRefPMPATable,
			Columns: []string{exam.ExamMasterRefPMPAColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_pmpa.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.ExamMasterRefMTSPMMGCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam.ExamMasterRefMTSPMMGTable,
			Columns: []string{exam.ExamMasterRefMTSPMMGColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_application_mtspmmg.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedExamMasterRefMTSPMMGIDs(); len(nodes) > 0 && !eu.mutation.ExamMasterRefMTSPMMGCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam.ExamMasterRefMTSPMMGTable,
			Columns: []string{exam.ExamMasterRefMTSPMMGColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_application_mtspmmg.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.ExamMasterRefMTSPMMGIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam.ExamMasterRefMTSPMMGTable,
			Columns: []string{exam.ExamMasterRefMTSPMMGColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_application_mtspmmg.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.LogDataCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam.LogDataTable,
			Columns: []string{exam.LogDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(logs.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedLogDataIDs(); len(nodes) > 0 && !eu.mutation.LogDataCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam.LogDataTable,
			Columns: []string{exam.LogDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(logs.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.LogDataIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam.LogDataTable,
			Columns: []string{exam.LogDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(logs.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, eu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{exam.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	eu.mutation.done = true
	return n, nil
}

// ExamUpdateOne is the builder for updating a single Exam entity.
type ExamUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ExamMutation
}

// SetExamType sets the "ExamType" field.
func (euo *ExamUpdateOne) SetExamType(s string) *ExamUpdateOne {
	euo.mutation.SetExamType(s)
	return euo
}

// SetExamName sets the "ExamName" field.
func (euo *ExamUpdateOne) SetExamName(s string) *ExamUpdateOne {
	euo.mutation.SetExamName(s)
	return euo
}

// SetExamShortName sets the "ExamShortName" field.
func (euo *ExamUpdateOne) SetExamShortName(s string) *ExamUpdateOne {
	euo.mutation.SetExamShortName(s)
	return euo
}

// SetNillableExamShortName sets the "ExamShortName" field if the given value is not nil.
func (euo *ExamUpdateOne) SetNillableExamShortName(s *string) *ExamUpdateOne {
	if s != nil {
		euo.SetExamShortName(*s)
	}
	return euo
}

// ClearExamShortName clears the value of the "ExamShortName" field.
func (euo *ExamUpdateOne) ClearExamShortName() *ExamUpdateOne {
	euo.mutation.ClearExamShortName()
	return euo
}

// SetSmsExamShortName sets the "SmsExamShortName" field.
func (euo *ExamUpdateOne) SetSmsExamShortName(s string) *ExamUpdateOne {
	euo.mutation.SetSmsExamShortName(s)
	return euo
}

// SetNillableSmsExamShortName sets the "SmsExamShortName" field if the given value is not nil.
func (euo *ExamUpdateOne) SetNillableSmsExamShortName(s *string) *ExamUpdateOne {
	if s != nil {
		euo.SetSmsExamShortName(*s)
	}
	return euo
}

// ClearSmsExamShortName clears the value of the "SmsExamShortName" field.
func (euo *ExamUpdateOne) ClearSmsExamShortName() *ExamUpdateOne {
	euo.mutation.ClearSmsExamShortName()
	return euo
}

// SetExamCode sets the "ExamCode" field.
func (euo *ExamUpdateOne) SetExamCode(i int32) *ExamUpdateOne {
	euo.mutation.ResetExamCode()
	euo.mutation.SetExamCode(i)
	return euo
}

// SetNillableExamCode sets the "ExamCode" field if the given value is not nil.
func (euo *ExamUpdateOne) SetNillableExamCode(i *int32) *ExamUpdateOne {
	if i != nil {
		euo.SetExamCode(*i)
	}
	return euo
}

// AddExamCode adds i to the "ExamCode" field.
func (euo *ExamUpdateOne) AddExamCode(i int32) *ExamUpdateOne {
	euo.mutation.AddExamCode(i)
	return euo
}

// ClearExamCode clears the value of the "ExamCode" field.
func (euo *ExamUpdateOne) ClearExamCode() *ExamUpdateOne {
	euo.mutation.ClearExamCode()
	return euo
}

// SetCalenderIssuedBy sets the "CalenderIssuedBy" field.
func (euo *ExamUpdateOne) SetCalenderIssuedBy(s string) *ExamUpdateOne {
	euo.mutation.SetCalenderIssuedBy(s)
	return euo
}

// SetNillableCalenderIssuedBy sets the "CalenderIssuedBy" field if the given value is not nil.
func (euo *ExamUpdateOne) SetNillableCalenderIssuedBy(s *string) *ExamUpdateOne {
	if s != nil {
		euo.SetCalenderIssuedBy(*s)
	}
	return euo
}

// ClearCalenderIssuedBy clears the value of the "CalenderIssuedBy" field.
func (euo *ExamUpdateOne) ClearCalenderIssuedBy() *ExamUpdateOne {
	euo.mutation.ClearCalenderIssuedBy()
	return euo
}

// SetNotificationBy sets the "NotificationBy" field.
func (euo *ExamUpdateOne) SetNotificationBy(s string) *ExamUpdateOne {
	euo.mutation.SetNotificationBy(s)
	return euo
}

// SetConductedBy sets the "ConductedBy" field.
func (euo *ExamUpdateOne) SetConductedBy(s string) *ExamUpdateOne {
	euo.mutation.SetConductedBy(s)
	return euo
}

// SetNodalOfficerLevel sets the "NodalOfficerLevel" field.
func (euo *ExamUpdateOne) SetNodalOfficerLevel(s string) *ExamUpdateOne {
	euo.mutation.SetNodalOfficerLevel(s)
	return euo
}

// SetNillableNodalOfficerLevel sets the "NodalOfficerLevel" field if the given value is not nil.
func (euo *ExamUpdateOne) SetNillableNodalOfficerLevel(s *string) *ExamUpdateOne {
	if s != nil {
		euo.SetNodalOfficerLevel(*s)
	}
	return euo
}

// ClearNodalOfficerLevel clears the value of the "NodalOfficerLevel" field.
func (euo *ExamUpdateOne) ClearNodalOfficerLevel() *ExamUpdateOne {
	euo.mutation.ClearNodalOfficerLevel()
	return euo
}

// SetTentativeNotificationMandatoryDate sets the "TentativeNotificationMandatoryDate" field.
func (euo *ExamUpdateOne) SetTentativeNotificationMandatoryDate(b bool) *ExamUpdateOne {
	euo.mutation.SetTentativeNotificationMandatoryDate(b)
	return euo
}

// SetNillableTentativeNotificationMandatoryDate sets the "TentativeNotificationMandatoryDate" field if the given value is not nil.
func (euo *ExamUpdateOne) SetNillableTentativeNotificationMandatoryDate(b *bool) *ExamUpdateOne {
	if b != nil {
		euo.SetTentativeNotificationMandatoryDate(*b)
	}
	return euo
}

// SetLocalLanguage sets the "LocalLanguage" field.
func (euo *ExamUpdateOne) SetLocalLanguage(b bool) *ExamUpdateOne {
	euo.mutation.SetLocalLanguage(b)
	return euo
}

// SetNillableLocalLanguage sets the "LocalLanguage" field if the given value is not nil.
func (euo *ExamUpdateOne) SetNillableLocalLanguage(b *bool) *ExamUpdateOne {
	if b != nil {
		euo.SetLocalLanguage(*b)
	}
	return euo
}

// SetOptionForPost sets the "OptionForPost" field.
func (euo *ExamUpdateOne) SetOptionForPost(b bool) *ExamUpdateOne {
	euo.mutation.SetOptionForPost(b)
	return euo
}

// SetNillableOptionForPost sets the "OptionForPost" field if the given value is not nil.
func (euo *ExamUpdateOne) SetNillableOptionForPost(b *bool) *ExamUpdateOne {
	if b != nil {
		euo.SetOptionForPost(*b)
	}
	return euo
}

// SetOptionToWriteExamOtherThanParent sets the "OptionToWriteExamOtherThanParent" field.
func (euo *ExamUpdateOne) SetOptionToWriteExamOtherThanParent(b bool) *ExamUpdateOne {
	euo.mutation.SetOptionToWriteExamOtherThanParent(b)
	return euo
}

// SetNillableOptionToWriteExamOtherThanParent sets the "OptionToWriteExamOtherThanParent" field if the given value is not nil.
func (euo *ExamUpdateOne) SetNillableOptionToWriteExamOtherThanParent(b *bool) *ExamUpdateOne {
	if b != nil {
		euo.SetOptionToWriteExamOtherThanParent(*b)
	}
	return euo
}

// SetTableName sets the "TableName" field.
func (euo *ExamUpdateOne) SetTableName(s string) *ExamUpdateOne {
	euo.mutation.SetTableName(s)
	return euo
}

// SetNillableTableName sets the "TableName" field if the given value is not nil.
func (euo *ExamUpdateOne) SetNillableTableName(s *string) *ExamUpdateOne {
	if s != nil {
		euo.SetTableName(*s)
	}
	return euo
}

// ClearTableName clears the value of the "TableName" field.
func (euo *ExamUpdateOne) ClearTableName() *ExamUpdateOne {
	euo.mutation.ClearTableName()
	return euo
}

// SetOrderNumber sets the "OrderNumber" field.
func (euo *ExamUpdateOne) SetOrderNumber(s string) *ExamUpdateOne {
	euo.mutation.SetOrderNumber(s)
	return euo
}

// SetNillableOrderNumber sets the "OrderNumber" field if the given value is not nil.
func (euo *ExamUpdateOne) SetNillableOrderNumber(s *string) *ExamUpdateOne {
	if s != nil {
		euo.SetOrderNumber(*s)
	}
	return euo
}

// ClearOrderNumber clears the value of the "OrderNumber" field.
func (euo *ExamUpdateOne) ClearOrderNumber() *ExamUpdateOne {
	euo.mutation.ClearOrderNumber()
	return euo
}

// SetCreatedById sets the "CreatedById" field.
func (euo *ExamUpdateOne) SetCreatedById(i int64) *ExamUpdateOne {
	euo.mutation.ResetCreatedById()
	euo.mutation.SetCreatedById(i)
	return euo
}

// SetNillableCreatedById sets the "CreatedById" field if the given value is not nil.
func (euo *ExamUpdateOne) SetNillableCreatedById(i *int64) *ExamUpdateOne {
	if i != nil {
		euo.SetCreatedById(*i)
	}
	return euo
}

// AddCreatedById adds i to the "CreatedById" field.
func (euo *ExamUpdateOne) AddCreatedById(i int64) *ExamUpdateOne {
	euo.mutation.AddCreatedById(i)
	return euo
}

// ClearCreatedById clears the value of the "CreatedById" field.
func (euo *ExamUpdateOne) ClearCreatedById() *ExamUpdateOne {
	euo.mutation.ClearCreatedById()
	return euo
}

// SetCreatedByUserName sets the "CreatedByUserName" field.
func (euo *ExamUpdateOne) SetCreatedByUserName(s string) *ExamUpdateOne {
	euo.mutation.SetCreatedByUserName(s)
	return euo
}

// SetNillableCreatedByUserName sets the "CreatedByUserName" field if the given value is not nil.
func (euo *ExamUpdateOne) SetNillableCreatedByUserName(s *string) *ExamUpdateOne {
	if s != nil {
		euo.SetCreatedByUserName(*s)
	}
	return euo
}

// ClearCreatedByUserName clears the value of the "CreatedByUserName" field.
func (euo *ExamUpdateOne) ClearCreatedByUserName() *ExamUpdateOne {
	euo.mutation.ClearCreatedByUserName()
	return euo
}

// SetCreatedByEmpId sets the "CreatedByEmpId" field.
func (euo *ExamUpdateOne) SetCreatedByEmpId(i int64) *ExamUpdateOne {
	euo.mutation.ResetCreatedByEmpId()
	euo.mutation.SetCreatedByEmpId(i)
	return euo
}

// SetNillableCreatedByEmpId sets the "CreatedByEmpId" field if the given value is not nil.
func (euo *ExamUpdateOne) SetNillableCreatedByEmpId(i *int64) *ExamUpdateOne {
	if i != nil {
		euo.SetCreatedByEmpId(*i)
	}
	return euo
}

// AddCreatedByEmpId adds i to the "CreatedByEmpId" field.
func (euo *ExamUpdateOne) AddCreatedByEmpId(i int64) *ExamUpdateOne {
	euo.mutation.AddCreatedByEmpId(i)
	return euo
}

// ClearCreatedByEmpId clears the value of the "CreatedByEmpId" field.
func (euo *ExamUpdateOne) ClearCreatedByEmpId() *ExamUpdateOne {
	euo.mutation.ClearCreatedByEmpId()
	return euo
}

// SetCreatedByDesignation sets the "CreatedByDesignation" field.
func (euo *ExamUpdateOne) SetCreatedByDesignation(s string) *ExamUpdateOne {
	euo.mutation.SetCreatedByDesignation(s)
	return euo
}

// SetNillableCreatedByDesignation sets the "CreatedByDesignation" field if the given value is not nil.
func (euo *ExamUpdateOne) SetNillableCreatedByDesignation(s *string) *ExamUpdateOne {
	if s != nil {
		euo.SetCreatedByDesignation(*s)
	}
	return euo
}

// ClearCreatedByDesignation clears the value of the "CreatedByDesignation" field.
func (euo *ExamUpdateOne) ClearCreatedByDesignation() *ExamUpdateOne {
	euo.mutation.ClearCreatedByDesignation()
	return euo
}

// SetCreatedDate sets the "CreatedDate" field.
func (euo *ExamUpdateOne) SetCreatedDate(t time.Time) *ExamUpdateOne {
	euo.mutation.SetCreatedDate(t)
	return euo
}

// SetNillableCreatedDate sets the "CreatedDate" field if the given value is not nil.
func (euo *ExamUpdateOne) SetNillableCreatedDate(t *time.Time) *ExamUpdateOne {
	if t != nil {
		euo.SetCreatedDate(*t)
	}
	return euo
}

// ClearCreatedDate clears the value of the "CreatedDate" field.
func (euo *ExamUpdateOne) ClearCreatedDate() *ExamUpdateOne {
	euo.mutation.ClearCreatedDate()
	return euo
}

// SetVerifiedbyid sets the "verifiedbyid" field.
func (euo *ExamUpdateOne) SetVerifiedbyid(i int64) *ExamUpdateOne {
	euo.mutation.ResetVerifiedbyid()
	euo.mutation.SetVerifiedbyid(i)
	return euo
}

// SetNillableVerifiedbyid sets the "verifiedbyid" field if the given value is not nil.
func (euo *ExamUpdateOne) SetNillableVerifiedbyid(i *int64) *ExamUpdateOne {
	if i != nil {
		euo.SetVerifiedbyid(*i)
	}
	return euo
}

// AddVerifiedbyid adds i to the "verifiedbyid" field.
func (euo *ExamUpdateOne) AddVerifiedbyid(i int64) *ExamUpdateOne {
	euo.mutation.AddVerifiedbyid(i)
	return euo
}

// ClearVerifiedbyid clears the value of the "verifiedbyid" field.
func (euo *ExamUpdateOne) ClearVerifiedbyid() *ExamUpdateOne {
	euo.mutation.ClearVerifiedbyid()
	return euo
}

// SetVerifiedbyusername sets the "verifiedbyusername" field.
func (euo *ExamUpdateOne) SetVerifiedbyusername(s string) *ExamUpdateOne {
	euo.mutation.SetVerifiedbyusername(s)
	return euo
}

// SetNillableVerifiedbyusername sets the "verifiedbyusername" field if the given value is not nil.
func (euo *ExamUpdateOne) SetNillableVerifiedbyusername(s *string) *ExamUpdateOne {
	if s != nil {
		euo.SetVerifiedbyusername(*s)
	}
	return euo
}

// ClearVerifiedbyusername clears the value of the "verifiedbyusername" field.
func (euo *ExamUpdateOne) ClearVerifiedbyusername() *ExamUpdateOne {
	euo.mutation.ClearVerifiedbyusername()
	return euo
}

// SetVerifiedbyEmployeeid sets the "verifiedbyEmployeeid" field.
func (euo *ExamUpdateOne) SetVerifiedbyEmployeeid(i int64) *ExamUpdateOne {
	euo.mutation.ResetVerifiedbyEmployeeid()
	euo.mutation.SetVerifiedbyEmployeeid(i)
	return euo
}

// SetNillableVerifiedbyEmployeeid sets the "verifiedbyEmployeeid" field if the given value is not nil.
func (euo *ExamUpdateOne) SetNillableVerifiedbyEmployeeid(i *int64) *ExamUpdateOne {
	if i != nil {
		euo.SetVerifiedbyEmployeeid(*i)
	}
	return euo
}

// AddVerifiedbyEmployeeid adds i to the "verifiedbyEmployeeid" field.
func (euo *ExamUpdateOne) AddVerifiedbyEmployeeid(i int64) *ExamUpdateOne {
	euo.mutation.AddVerifiedbyEmployeeid(i)
	return euo
}

// ClearVerifiedbyEmployeeid clears the value of the "verifiedbyEmployeeid" field.
func (euo *ExamUpdateOne) ClearVerifiedbyEmployeeid() *ExamUpdateOne {
	euo.mutation.ClearVerifiedbyEmployeeid()
	return euo
}

// SetVerifiedbyDesignation sets the "verifiedbyDesignation" field.
func (euo *ExamUpdateOne) SetVerifiedbyDesignation(s string) *ExamUpdateOne {
	euo.mutation.SetVerifiedbyDesignation(s)
	return euo
}

// SetNillableVerifiedbyDesignation sets the "verifiedbyDesignation" field if the given value is not nil.
func (euo *ExamUpdateOne) SetNillableVerifiedbyDesignation(s *string) *ExamUpdateOne {
	if s != nil {
		euo.SetVerifiedbyDesignation(*s)
	}
	return euo
}

// ClearVerifiedbyDesignation clears the value of the "verifiedbyDesignation" field.
func (euo *ExamUpdateOne) ClearVerifiedbyDesignation() *ExamUpdateOne {
	euo.mutation.ClearVerifiedbyDesignation()
	return euo
}

// SetVerifiedDate sets the "verifiedDate" field.
func (euo *ExamUpdateOne) SetVerifiedDate(t time.Time) *ExamUpdateOne {
	euo.mutation.SetVerifiedDate(t)
	return euo
}

// SetNillableVerifiedDate sets the "verifiedDate" field if the given value is not nil.
func (euo *ExamUpdateOne) SetNillableVerifiedDate(t *time.Time) *ExamUpdateOne {
	if t != nil {
		euo.SetVerifiedDate(*t)
	}
	return euo
}

// ClearVerifiedDate clears the value of the "verifiedDate" field.
func (euo *ExamUpdateOne) ClearVerifiedDate() *ExamUpdateOne {
	euo.mutation.ClearVerifiedDate()
	return euo
}

// SetStatuss sets the "Statuss" field.
func (euo *ExamUpdateOne) SetStatuss(s string) *ExamUpdateOne {
	euo.mutation.SetStatuss(s)
	return euo
}

// SetNillableStatuss sets the "Statuss" field if the given value is not nil.
func (euo *ExamUpdateOne) SetNillableStatuss(s *string) *ExamUpdateOne {
	if s != nil {
		euo.SetStatuss(*s)
	}
	return euo
}

// ClearStatuss clears the value of the "Statuss" field.
func (euo *ExamUpdateOne) ClearStatuss() *ExamUpdateOne {
	euo.mutation.ClearStatuss()
	return euo
}

// SetDeletedbyid sets the "deletedbyid" field.
func (euo *ExamUpdateOne) SetDeletedbyid(i int64) *ExamUpdateOne {
	euo.mutation.ResetDeletedbyid()
	euo.mutation.SetDeletedbyid(i)
	return euo
}

// SetNillableDeletedbyid sets the "deletedbyid" field if the given value is not nil.
func (euo *ExamUpdateOne) SetNillableDeletedbyid(i *int64) *ExamUpdateOne {
	if i != nil {
		euo.SetDeletedbyid(*i)
	}
	return euo
}

// AddDeletedbyid adds i to the "deletedbyid" field.
func (euo *ExamUpdateOne) AddDeletedbyid(i int64) *ExamUpdateOne {
	euo.mutation.AddDeletedbyid(i)
	return euo
}

// ClearDeletedbyid clears the value of the "deletedbyid" field.
func (euo *ExamUpdateOne) ClearDeletedbyid() *ExamUpdateOne {
	euo.mutation.ClearDeletedbyid()
	return euo
}

// SetDeletedbyusername sets the "deletedbyusername" field.
func (euo *ExamUpdateOne) SetDeletedbyusername(s string) *ExamUpdateOne {
	euo.mutation.SetDeletedbyusername(s)
	return euo
}

// SetNillableDeletedbyusername sets the "deletedbyusername" field if the given value is not nil.
func (euo *ExamUpdateOne) SetNillableDeletedbyusername(s *string) *ExamUpdateOne {
	if s != nil {
		euo.SetDeletedbyusername(*s)
	}
	return euo
}

// ClearDeletedbyusername clears the value of the "deletedbyusername" field.
func (euo *ExamUpdateOne) ClearDeletedbyusername() *ExamUpdateOne {
	euo.mutation.ClearDeletedbyusername()
	return euo
}

// SetDeletedbyEmployeeid sets the "deletedbyEmployeeid" field.
func (euo *ExamUpdateOne) SetDeletedbyEmployeeid(i int64) *ExamUpdateOne {
	euo.mutation.ResetDeletedbyEmployeeid()
	euo.mutation.SetDeletedbyEmployeeid(i)
	return euo
}

// SetNillableDeletedbyEmployeeid sets the "deletedbyEmployeeid" field if the given value is not nil.
func (euo *ExamUpdateOne) SetNillableDeletedbyEmployeeid(i *int64) *ExamUpdateOne {
	if i != nil {
		euo.SetDeletedbyEmployeeid(*i)
	}
	return euo
}

// AddDeletedbyEmployeeid adds i to the "deletedbyEmployeeid" field.
func (euo *ExamUpdateOne) AddDeletedbyEmployeeid(i int64) *ExamUpdateOne {
	euo.mutation.AddDeletedbyEmployeeid(i)
	return euo
}

// ClearDeletedbyEmployeeid clears the value of the "deletedbyEmployeeid" field.
func (euo *ExamUpdateOne) ClearDeletedbyEmployeeid() *ExamUpdateOne {
	euo.mutation.ClearDeletedbyEmployeeid()
	return euo
}

// SetDeletedbyDesignation sets the "deletedbyDesignation" field.
func (euo *ExamUpdateOne) SetDeletedbyDesignation(s string) *ExamUpdateOne {
	euo.mutation.SetDeletedbyDesignation(s)
	return euo
}

// SetNillableDeletedbyDesignation sets the "deletedbyDesignation" field if the given value is not nil.
func (euo *ExamUpdateOne) SetNillableDeletedbyDesignation(s *string) *ExamUpdateOne {
	if s != nil {
		euo.SetDeletedbyDesignation(*s)
	}
	return euo
}

// ClearDeletedbyDesignation clears the value of the "deletedbyDesignation" field.
func (euo *ExamUpdateOne) ClearDeletedbyDesignation() *ExamUpdateOne {
	euo.mutation.ClearDeletedbyDesignation()
	return euo
}

// SetDeletedDate sets the "deletedDate" field.
func (euo *ExamUpdateOne) SetDeletedDate(t time.Time) *ExamUpdateOne {
	euo.mutation.SetDeletedDate(t)
	return euo
}

// SetNillableDeletedDate sets the "deletedDate" field if the given value is not nil.
func (euo *ExamUpdateOne) SetNillableDeletedDate(t *time.Time) *ExamUpdateOne {
	if t != nil {
		euo.SetDeletedDate(*t)
	}
	return euo
}

// ClearDeletedDate clears the value of the "deletedDate" field.
func (euo *ExamUpdateOne) ClearDeletedDate() *ExamUpdateOne {
	euo.mutation.ClearDeletedDate()
	return euo
}

// SetNumOfPapers sets the "NumOfPapers" field.
func (euo *ExamUpdateOne) SetNumOfPapers(i int32) *ExamUpdateOne {
	euo.mutation.ResetNumOfPapers()
	euo.mutation.SetNumOfPapers(i)
	return euo
}

// AddNumOfPapers adds i to the "NumOfPapers" field.
func (euo *ExamUpdateOne) AddNumOfPapers(i int32) *ExamUpdateOne {
	euo.mutation.AddNumOfPapers(i)
	return euo
}

// SetCalendarCode sets the "CalendarCode" field.
func (euo *ExamUpdateOne) SetCalendarCode(i int32) *ExamUpdateOne {
	euo.mutation.ResetCalendarCode()
	euo.mutation.SetCalendarCode(i)
	return euo
}

// SetNillableCalendarCode sets the "CalendarCode" field if the given value is not nil.
func (euo *ExamUpdateOne) SetNillableCalendarCode(i *int32) *ExamUpdateOne {
	if i != nil {
		euo.SetCalendarCode(*i)
	}
	return euo
}

// AddCalendarCode adds i to the "CalendarCode" field.
func (euo *ExamUpdateOne) AddCalendarCode(i int32) *ExamUpdateOne {
	euo.mutation.AddCalendarCode(i)
	return euo
}

// ClearCalendarCode clears the value of the "CalendarCode" field.
func (euo *ExamUpdateOne) ClearCalendarCode() *ExamUpdateOne {
	euo.mutation.ClearCalendarCode()
	return euo
}

// SetPaperCode sets the "PaperCode" field.
func (euo *ExamUpdateOne) SetPaperCode(i int32) *ExamUpdateOne {
	euo.mutation.ResetPaperCode()
	euo.mutation.SetPaperCode(i)
	return euo
}

// SetNillablePaperCode sets the "PaperCode" field if the given value is not nil.
func (euo *ExamUpdateOne) SetNillablePaperCode(i *int32) *ExamUpdateOne {
	if i != nil {
		euo.SetPaperCode(*i)
	}
	return euo
}

// AddPaperCode adds i to the "PaperCode" field.
func (euo *ExamUpdateOne) AddPaperCode(i int32) *ExamUpdateOne {
	euo.mutation.AddPaperCode(i)
	return euo
}

// ClearPaperCode clears the value of the "PaperCode" field.
func (euo *ExamUpdateOne) ClearPaperCode() *ExamUpdateOne {
	euo.mutation.ClearPaperCode()
	return euo
}

// SetStatus sets the "Status" field.
func (euo *ExamUpdateOne) SetStatus(s string) *ExamUpdateOne {
	euo.mutation.SetStatus(s)
	return euo
}

// SetExamTypeCode sets the "ExamTypeCode" field.
func (euo *ExamUpdateOne) SetExamTypeCode(i int32) *ExamUpdateOne {
	euo.mutation.ResetExamTypeCode()
	euo.mutation.SetExamTypeCode(i)
	return euo
}

// SetNillableExamTypeCode sets the "ExamTypeCode" field if the given value is not nil.
func (euo *ExamUpdateOne) SetNillableExamTypeCode(i *int32) *ExamUpdateOne {
	if i != nil {
		euo.SetExamTypeCode(*i)
	}
	return euo
}

// AddExamTypeCode adds i to the "ExamTypeCode" field.
func (euo *ExamUpdateOne) AddExamTypeCode(i int32) *ExamUpdateOne {
	euo.mutation.AddExamTypeCode(i)
	return euo
}

// ClearExamTypeCode clears the value of the "ExamTypeCode" field.
func (euo *ExamUpdateOne) ClearExamTypeCode() *ExamUpdateOne {
	euo.mutation.ClearExamTypeCode()
	return euo
}

// SetCreatedByEmployeeId sets the "CreatedByEmployeeId" field.
func (euo *ExamUpdateOne) SetCreatedByEmployeeId(s string) *ExamUpdateOne {
	euo.mutation.SetCreatedByEmployeeId(s)
	return euo
}

// SetNillableCreatedByEmployeeId sets the "CreatedByEmployeeId" field if the given value is not nil.
func (euo *ExamUpdateOne) SetNillableCreatedByEmployeeId(s *string) *ExamUpdateOne {
	if s != nil {
		euo.SetCreatedByEmployeeId(*s)
	}
	return euo
}

// ClearCreatedByEmployeeId clears the value of the "CreatedByEmployeeId" field.
func (euo *ExamUpdateOne) ClearCreatedByEmployeeId() *ExamUpdateOne {
	euo.mutation.ClearCreatedByEmployeeId()
	return euo
}

// AddNotificationIDs adds the "notifications" edge to the Notification entity by IDs.
func (euo *ExamUpdateOne) AddNotificationIDs(ids ...int32) *ExamUpdateOne {
	euo.mutation.AddNotificationIDs(ids...)
	return euo
}

// AddNotifications adds the "notifications" edges to the Notification entity.
func (euo *ExamUpdateOne) AddNotifications(n ...*Notification) *ExamUpdateOne {
	ids := make([]int32, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return euo.AddNotificationIDs(ids...)
}

// AddExamsRefIDs adds the "exams_ref" edge to the ExamCalendar entity by IDs.
func (euo *ExamUpdateOne) AddExamsRefIDs(ids ...int32) *ExamUpdateOne {
	euo.mutation.AddExamsRefIDs(ids...)
	return euo
}

// AddExamsRef adds the "exams_ref" edges to the ExamCalendar entity.
func (euo *ExamUpdateOne) AddExamsRef(e ...*ExamCalendar) *ExamUpdateOne {
	ids := make([]int32, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return euo.AddExamsRefIDs(ids...)
}

// AddPaperIDs adds the "papers" edge to the ExamPapers entity by IDs.
func (euo *ExamUpdateOne) AddPaperIDs(ids ...int32) *ExamUpdateOne {
	euo.mutation.AddPaperIDs(ids...)
	return euo
}

// AddPapers adds the "papers" edges to the ExamPapers entity.
func (euo *ExamUpdateOne) AddPapers(e ...*ExamPapers) *ExamUpdateOne {
	ids := make([]int32, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return euo.AddPaperIDs(ids...)
}

// AddExamEligibilityIDs adds the "ExamEligibility" edge to the EligibilityMaster entity by IDs.
func (euo *ExamUpdateOne) AddExamEligibilityIDs(ids ...int32) *ExamUpdateOne {
	euo.mutation.AddExamEligibilityIDs(ids...)
	return euo
}

// AddExamEligibility adds the "ExamEligibility" edges to the EligibilityMaster entity.
func (euo *ExamUpdateOne) AddExamEligibility(e ...*EligibilityMaster) *ExamUpdateOne {
	ids := make([]int32, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return euo.AddExamEligibilityIDs(ids...)
}

// AddExamsTypeIDs adds the "exams_type" edge to the ExamType entity by IDs.
func (euo *ExamUpdateOne) AddExamsTypeIDs(ids ...int32) *ExamUpdateOne {
	euo.mutation.AddExamsTypeIDs(ids...)
	return euo
}

// AddExamsType adds the "exams_type" edges to the ExamType entity.
func (euo *ExamUpdateOne) AddExamsType(e ...*ExamType) *ExamUpdateOne {
	ids := make([]int32, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return euo.AddExamsTypeIDs(ids...)
}

// AddExamcentresipIDs adds the "examcentresip" edge to the Center entity by IDs.
func (euo *ExamUpdateOne) AddExamcentresipIDs(ids ...int32) *ExamUpdateOne {
	euo.mutation.AddExamcentresipIDs(ids...)
	return euo
}

// AddExamcentresip adds the "examcentresip" edges to the Center entity.
func (euo *ExamUpdateOne) AddExamcentresip(c ...*Center) *ExamUpdateOne {
	ids := make([]int32, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return euo.AddExamcentresipIDs(ids...)
}

// AddExamMasterRefIDs adds the "ExamMasterRef" edge to the Exam_Applications_IP entity by IDs.
func (euo *ExamUpdateOne) AddExamMasterRefIDs(ids ...int64) *ExamUpdateOne {
	euo.mutation.AddExamMasterRefIDs(ids...)
	return euo
}

// AddExamMasterRef adds the "ExamMasterRef" edges to the Exam_Applications_IP entity.
func (euo *ExamUpdateOne) AddExamMasterRef(e ...*Exam_Applications_IP) *ExamUpdateOne {
	ids := make([]int64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return euo.AddExamMasterRefIDs(ids...)
}

// AddExamMasterRefPSIDs adds the "ExamMasterRefPS" edge to the Exam_Applications_PS entity by IDs.
func (euo *ExamUpdateOne) AddExamMasterRefPSIDs(ids ...int64) *ExamUpdateOne {
	euo.mutation.AddExamMasterRefPSIDs(ids...)
	return euo
}

// AddExamMasterRefPS adds the "ExamMasterRefPS" edges to the Exam_Applications_PS entity.
func (euo *ExamUpdateOne) AddExamMasterRefPS(e ...*Exam_Applications_PS) *ExamUpdateOne {
	ids := make([]int64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return euo.AddExamMasterRefPSIDs(ids...)
}

// AddExamNotificationsRefIDs adds the "Exam_Notifications_Ref" edge to the ExamNotifications entity by IDs.
func (euo *ExamUpdateOne) AddExamNotificationsRefIDs(ids ...int32) *ExamUpdateOne {
	euo.mutation.AddExamNotificationsRefIDs(ids...)
	return euo
}

// AddExamNotificationsRef adds the "Exam_Notifications_Ref" edges to the ExamNotifications entity.
func (euo *ExamUpdateOne) AddExamNotificationsRef(e ...*ExamNotifications) *ExamUpdateOne {
	ids := make([]int32, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return euo.AddExamNotificationsRefIDs(ids...)
}

// AddExamMasterRefGDSPAIDs adds the "ExamMasterRefGDSPA" edge to the Exam_Applications_GDSPA entity by IDs.
func (euo *ExamUpdateOne) AddExamMasterRefGDSPAIDs(ids ...int64) *ExamUpdateOne {
	euo.mutation.AddExamMasterRefGDSPAIDs(ids...)
	return euo
}

// AddExamMasterRefGDSPA adds the "ExamMasterRefGDSPA" edges to the Exam_Applications_GDSPA entity.
func (euo *ExamUpdateOne) AddExamMasterRefGDSPA(e ...*Exam_Applications_GDSPA) *ExamUpdateOne {
	ids := make([]int64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return euo.AddExamMasterRefGDSPAIDs(ids...)
}

// AddExamMasterRefGDSPMIDs adds the "ExamMasterRefGDSPM" edge to the Exam_Applications_GDSPM entity by IDs.
func (euo *ExamUpdateOne) AddExamMasterRefGDSPMIDs(ids ...int64) *ExamUpdateOne {
	euo.mutation.AddExamMasterRefGDSPMIDs(ids...)
	return euo
}

// AddExamMasterRefGDSPM adds the "ExamMasterRefGDSPM" edges to the Exam_Applications_GDSPM entity.
func (euo *ExamUpdateOne) AddExamMasterRefGDSPM(e ...*Exam_Applications_GDSPM) *ExamUpdateOne {
	ids := make([]int64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return euo.AddExamMasterRefGDSPMIDs(ids...)
}

// AddExamMasterRefPMPAIDs adds the "ExamMasterRefPMPA" edge to the Exam_Applications_PMPA entity by IDs.
func (euo *ExamUpdateOne) AddExamMasterRefPMPAIDs(ids ...int64) *ExamUpdateOne {
	euo.mutation.AddExamMasterRefPMPAIDs(ids...)
	return euo
}

// AddExamMasterRefPMPA adds the "ExamMasterRefPMPA" edges to the Exam_Applications_PMPA entity.
func (euo *ExamUpdateOne) AddExamMasterRefPMPA(e ...*Exam_Applications_PMPA) *ExamUpdateOne {
	ids := make([]int64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return euo.AddExamMasterRefPMPAIDs(ids...)
}

// AddExamMasterRefMTSPMMGIDs adds the "ExamMasterRefMTSPMMG" edge to the Exam_Application_MTSPMMG entity by IDs.
func (euo *ExamUpdateOne) AddExamMasterRefMTSPMMGIDs(ids ...int64) *ExamUpdateOne {
	euo.mutation.AddExamMasterRefMTSPMMGIDs(ids...)
	return euo
}

// AddExamMasterRefMTSPMMG adds the "ExamMasterRefMTSPMMG" edges to the Exam_Application_MTSPMMG entity.
func (euo *ExamUpdateOne) AddExamMasterRefMTSPMMG(e ...*Exam_Application_MTSPMMG) *ExamUpdateOne {
	ids := make([]int64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return euo.AddExamMasterRefMTSPMMGIDs(ids...)
}

// AddLogDatumIDs adds the "LogData" edge to the Logs entity by IDs.
func (euo *ExamUpdateOne) AddLogDatumIDs(ids ...int64) *ExamUpdateOne {
	euo.mutation.AddLogDatumIDs(ids...)
	return euo
}

// AddLogData adds the "LogData" edges to the Logs entity.
func (euo *ExamUpdateOne) AddLogData(l ...*Logs) *ExamUpdateOne {
	ids := make([]int64, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return euo.AddLogDatumIDs(ids...)
}

// Mutation returns the ExamMutation object of the builder.
func (euo *ExamUpdateOne) Mutation() *ExamMutation {
	return euo.mutation
}

// ClearNotifications clears all "notifications" edges to the Notification entity.
func (euo *ExamUpdateOne) ClearNotifications() *ExamUpdateOne {
	euo.mutation.ClearNotifications()
	return euo
}

// RemoveNotificationIDs removes the "notifications" edge to Notification entities by IDs.
func (euo *ExamUpdateOne) RemoveNotificationIDs(ids ...int32) *ExamUpdateOne {
	euo.mutation.RemoveNotificationIDs(ids...)
	return euo
}

// RemoveNotifications removes "notifications" edges to Notification entities.
func (euo *ExamUpdateOne) RemoveNotifications(n ...*Notification) *ExamUpdateOne {
	ids := make([]int32, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return euo.RemoveNotificationIDs(ids...)
}

// ClearExamsRef clears all "exams_ref" edges to the ExamCalendar entity.
func (euo *ExamUpdateOne) ClearExamsRef() *ExamUpdateOne {
	euo.mutation.ClearExamsRef()
	return euo
}

// RemoveExamsRefIDs removes the "exams_ref" edge to ExamCalendar entities by IDs.
func (euo *ExamUpdateOne) RemoveExamsRefIDs(ids ...int32) *ExamUpdateOne {
	euo.mutation.RemoveExamsRefIDs(ids...)
	return euo
}

// RemoveExamsRef removes "exams_ref" edges to ExamCalendar entities.
func (euo *ExamUpdateOne) RemoveExamsRef(e ...*ExamCalendar) *ExamUpdateOne {
	ids := make([]int32, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return euo.RemoveExamsRefIDs(ids...)
}

// ClearPapers clears all "papers" edges to the ExamPapers entity.
func (euo *ExamUpdateOne) ClearPapers() *ExamUpdateOne {
	euo.mutation.ClearPapers()
	return euo
}

// RemovePaperIDs removes the "papers" edge to ExamPapers entities by IDs.
func (euo *ExamUpdateOne) RemovePaperIDs(ids ...int32) *ExamUpdateOne {
	euo.mutation.RemovePaperIDs(ids...)
	return euo
}

// RemovePapers removes "papers" edges to ExamPapers entities.
func (euo *ExamUpdateOne) RemovePapers(e ...*ExamPapers) *ExamUpdateOne {
	ids := make([]int32, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return euo.RemovePaperIDs(ids...)
}

// ClearExamEligibility clears all "ExamEligibility" edges to the EligibilityMaster entity.
func (euo *ExamUpdateOne) ClearExamEligibility() *ExamUpdateOne {
	euo.mutation.ClearExamEligibility()
	return euo
}

// RemoveExamEligibilityIDs removes the "ExamEligibility" edge to EligibilityMaster entities by IDs.
func (euo *ExamUpdateOne) RemoveExamEligibilityIDs(ids ...int32) *ExamUpdateOne {
	euo.mutation.RemoveExamEligibilityIDs(ids...)
	return euo
}

// RemoveExamEligibility removes "ExamEligibility" edges to EligibilityMaster entities.
func (euo *ExamUpdateOne) RemoveExamEligibility(e ...*EligibilityMaster) *ExamUpdateOne {
	ids := make([]int32, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return euo.RemoveExamEligibilityIDs(ids...)
}

// ClearExamsType clears all "exams_type" edges to the ExamType entity.
func (euo *ExamUpdateOne) ClearExamsType() *ExamUpdateOne {
	euo.mutation.ClearExamsType()
	return euo
}

// RemoveExamsTypeIDs removes the "exams_type" edge to ExamType entities by IDs.
func (euo *ExamUpdateOne) RemoveExamsTypeIDs(ids ...int32) *ExamUpdateOne {
	euo.mutation.RemoveExamsTypeIDs(ids...)
	return euo
}

// RemoveExamsType removes "exams_type" edges to ExamType entities.
func (euo *ExamUpdateOne) RemoveExamsType(e ...*ExamType) *ExamUpdateOne {
	ids := make([]int32, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return euo.RemoveExamsTypeIDs(ids...)
}

// ClearExamcentresip clears all "examcentresip" edges to the Center entity.
func (euo *ExamUpdateOne) ClearExamcentresip() *ExamUpdateOne {
	euo.mutation.ClearExamcentresip()
	return euo
}

// RemoveExamcentresipIDs removes the "examcentresip" edge to Center entities by IDs.
func (euo *ExamUpdateOne) RemoveExamcentresipIDs(ids ...int32) *ExamUpdateOne {
	euo.mutation.RemoveExamcentresipIDs(ids...)
	return euo
}

// RemoveExamcentresip removes "examcentresip" edges to Center entities.
func (euo *ExamUpdateOne) RemoveExamcentresip(c ...*Center) *ExamUpdateOne {
	ids := make([]int32, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return euo.RemoveExamcentresipIDs(ids...)
}

// ClearExamMasterRef clears all "ExamMasterRef" edges to the Exam_Applications_IP entity.
func (euo *ExamUpdateOne) ClearExamMasterRef() *ExamUpdateOne {
	euo.mutation.ClearExamMasterRef()
	return euo
}

// RemoveExamMasterRefIDs removes the "ExamMasterRef" edge to Exam_Applications_IP entities by IDs.
func (euo *ExamUpdateOne) RemoveExamMasterRefIDs(ids ...int64) *ExamUpdateOne {
	euo.mutation.RemoveExamMasterRefIDs(ids...)
	return euo
}

// RemoveExamMasterRef removes "ExamMasterRef" edges to Exam_Applications_IP entities.
func (euo *ExamUpdateOne) RemoveExamMasterRef(e ...*Exam_Applications_IP) *ExamUpdateOne {
	ids := make([]int64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return euo.RemoveExamMasterRefIDs(ids...)
}

// ClearExamMasterRefPS clears all "ExamMasterRefPS" edges to the Exam_Applications_PS entity.
func (euo *ExamUpdateOne) ClearExamMasterRefPS() *ExamUpdateOne {
	euo.mutation.ClearExamMasterRefPS()
	return euo
}

// RemoveExamMasterRefPSIDs removes the "ExamMasterRefPS" edge to Exam_Applications_PS entities by IDs.
func (euo *ExamUpdateOne) RemoveExamMasterRefPSIDs(ids ...int64) *ExamUpdateOne {
	euo.mutation.RemoveExamMasterRefPSIDs(ids...)
	return euo
}

// RemoveExamMasterRefPS removes "ExamMasterRefPS" edges to Exam_Applications_PS entities.
func (euo *ExamUpdateOne) RemoveExamMasterRefPS(e ...*Exam_Applications_PS) *ExamUpdateOne {
	ids := make([]int64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return euo.RemoveExamMasterRefPSIDs(ids...)
}

// ClearExamNotificationsRef clears all "Exam_Notifications_Ref" edges to the ExamNotifications entity.
func (euo *ExamUpdateOne) ClearExamNotificationsRef() *ExamUpdateOne {
	euo.mutation.ClearExamNotificationsRef()
	return euo
}

// RemoveExamNotificationsRefIDs removes the "Exam_Notifications_Ref" edge to ExamNotifications entities by IDs.
func (euo *ExamUpdateOne) RemoveExamNotificationsRefIDs(ids ...int32) *ExamUpdateOne {
	euo.mutation.RemoveExamNotificationsRefIDs(ids...)
	return euo
}

// RemoveExamNotificationsRef removes "Exam_Notifications_Ref" edges to ExamNotifications entities.
func (euo *ExamUpdateOne) RemoveExamNotificationsRef(e ...*ExamNotifications) *ExamUpdateOne {
	ids := make([]int32, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return euo.RemoveExamNotificationsRefIDs(ids...)
}

// ClearExamMasterRefGDSPA clears all "ExamMasterRefGDSPA" edges to the Exam_Applications_GDSPA entity.
func (euo *ExamUpdateOne) ClearExamMasterRefGDSPA() *ExamUpdateOne {
	euo.mutation.ClearExamMasterRefGDSPA()
	return euo
}

// RemoveExamMasterRefGDSPAIDs removes the "ExamMasterRefGDSPA" edge to Exam_Applications_GDSPA entities by IDs.
func (euo *ExamUpdateOne) RemoveExamMasterRefGDSPAIDs(ids ...int64) *ExamUpdateOne {
	euo.mutation.RemoveExamMasterRefGDSPAIDs(ids...)
	return euo
}

// RemoveExamMasterRefGDSPA removes "ExamMasterRefGDSPA" edges to Exam_Applications_GDSPA entities.
func (euo *ExamUpdateOne) RemoveExamMasterRefGDSPA(e ...*Exam_Applications_GDSPA) *ExamUpdateOne {
	ids := make([]int64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return euo.RemoveExamMasterRefGDSPAIDs(ids...)
}

// ClearExamMasterRefGDSPM clears all "ExamMasterRefGDSPM" edges to the Exam_Applications_GDSPM entity.
func (euo *ExamUpdateOne) ClearExamMasterRefGDSPM() *ExamUpdateOne {
	euo.mutation.ClearExamMasterRefGDSPM()
	return euo
}

// RemoveExamMasterRefGDSPMIDs removes the "ExamMasterRefGDSPM" edge to Exam_Applications_GDSPM entities by IDs.
func (euo *ExamUpdateOne) RemoveExamMasterRefGDSPMIDs(ids ...int64) *ExamUpdateOne {
	euo.mutation.RemoveExamMasterRefGDSPMIDs(ids...)
	return euo
}

// RemoveExamMasterRefGDSPM removes "ExamMasterRefGDSPM" edges to Exam_Applications_GDSPM entities.
func (euo *ExamUpdateOne) RemoveExamMasterRefGDSPM(e ...*Exam_Applications_GDSPM) *ExamUpdateOne {
	ids := make([]int64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return euo.RemoveExamMasterRefGDSPMIDs(ids...)
}

// ClearExamMasterRefPMPA clears all "ExamMasterRefPMPA" edges to the Exam_Applications_PMPA entity.
func (euo *ExamUpdateOne) ClearExamMasterRefPMPA() *ExamUpdateOne {
	euo.mutation.ClearExamMasterRefPMPA()
	return euo
}

// RemoveExamMasterRefPMPAIDs removes the "ExamMasterRefPMPA" edge to Exam_Applications_PMPA entities by IDs.
func (euo *ExamUpdateOne) RemoveExamMasterRefPMPAIDs(ids ...int64) *ExamUpdateOne {
	euo.mutation.RemoveExamMasterRefPMPAIDs(ids...)
	return euo
}

// RemoveExamMasterRefPMPA removes "ExamMasterRefPMPA" edges to Exam_Applications_PMPA entities.
func (euo *ExamUpdateOne) RemoveExamMasterRefPMPA(e ...*Exam_Applications_PMPA) *ExamUpdateOne {
	ids := make([]int64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return euo.RemoveExamMasterRefPMPAIDs(ids...)
}

// ClearExamMasterRefMTSPMMG clears all "ExamMasterRefMTSPMMG" edges to the Exam_Application_MTSPMMG entity.
func (euo *ExamUpdateOne) ClearExamMasterRefMTSPMMG() *ExamUpdateOne {
	euo.mutation.ClearExamMasterRefMTSPMMG()
	return euo
}

// RemoveExamMasterRefMTSPMMGIDs removes the "ExamMasterRefMTSPMMG" edge to Exam_Application_MTSPMMG entities by IDs.
func (euo *ExamUpdateOne) RemoveExamMasterRefMTSPMMGIDs(ids ...int64) *ExamUpdateOne {
	euo.mutation.RemoveExamMasterRefMTSPMMGIDs(ids...)
	return euo
}

// RemoveExamMasterRefMTSPMMG removes "ExamMasterRefMTSPMMG" edges to Exam_Application_MTSPMMG entities.
func (euo *ExamUpdateOne) RemoveExamMasterRefMTSPMMG(e ...*Exam_Application_MTSPMMG) *ExamUpdateOne {
	ids := make([]int64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return euo.RemoveExamMasterRefMTSPMMGIDs(ids...)
}

// ClearLogData clears all "LogData" edges to the Logs entity.
func (euo *ExamUpdateOne) ClearLogData() *ExamUpdateOne {
	euo.mutation.ClearLogData()
	return euo
}

// RemoveLogDatumIDs removes the "LogData" edge to Logs entities by IDs.
func (euo *ExamUpdateOne) RemoveLogDatumIDs(ids ...int64) *ExamUpdateOne {
	euo.mutation.RemoveLogDatumIDs(ids...)
	return euo
}

// RemoveLogData removes "LogData" edges to Logs entities.
func (euo *ExamUpdateOne) RemoveLogData(l ...*Logs) *ExamUpdateOne {
	ids := make([]int64, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return euo.RemoveLogDatumIDs(ids...)
}

// Where appends a list predicates to the ExamUpdate builder.
func (euo *ExamUpdateOne) Where(ps ...predicate.Exam) *ExamUpdateOne {
	euo.mutation.Where(ps...)
	return euo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (euo *ExamUpdateOne) Select(field string, fields ...string) *ExamUpdateOne {
	euo.fields = append([]string{field}, fields...)
	return euo
}

// Save executes the query and returns the updated Exam entity.
func (euo *ExamUpdateOne) Save(ctx context.Context) (*Exam, error) {
	return withHooks(ctx, euo.sqlSave, euo.mutation, euo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (euo *ExamUpdateOne) SaveX(ctx context.Context) *Exam {
	node, err := euo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (euo *ExamUpdateOne) Exec(ctx context.Context) error {
	_, err := euo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (euo *ExamUpdateOne) ExecX(ctx context.Context) {
	if err := euo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (euo *ExamUpdateOne) sqlSave(ctx context.Context) (_node *Exam, err error) {
	_spec := sqlgraph.NewUpdateSpec(exam.Table, exam.Columns, sqlgraph.NewFieldSpec(exam.FieldID, field.TypeInt32))
	id, ok := euo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Exam.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := euo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, exam.FieldID)
		for _, f := range fields {
			if !exam.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != exam.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := euo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := euo.mutation.ExamType(); ok {
		_spec.SetField(exam.FieldExamType, field.TypeString, value)
	}
	if value, ok := euo.mutation.ExamName(); ok {
		_spec.SetField(exam.FieldExamName, field.TypeString, value)
	}
	if value, ok := euo.mutation.ExamShortName(); ok {
		_spec.SetField(exam.FieldExamShortName, field.TypeString, value)
	}
	if euo.mutation.ExamShortNameCleared() {
		_spec.ClearField(exam.FieldExamShortName, field.TypeString)
	}
	if value, ok := euo.mutation.SmsExamShortName(); ok {
		_spec.SetField(exam.FieldSmsExamShortName, field.TypeString, value)
	}
	if euo.mutation.SmsExamShortNameCleared() {
		_spec.ClearField(exam.FieldSmsExamShortName, field.TypeString)
	}
	if value, ok := euo.mutation.ExamCode(); ok {
		_spec.SetField(exam.FieldExamCode, field.TypeInt32, value)
	}
	if value, ok := euo.mutation.AddedExamCode(); ok {
		_spec.AddField(exam.FieldExamCode, field.TypeInt32, value)
	}
	if euo.mutation.ExamCodeCleared() {
		_spec.ClearField(exam.FieldExamCode, field.TypeInt32)
	}
	if value, ok := euo.mutation.CalenderIssuedBy(); ok {
		_spec.SetField(exam.FieldCalenderIssuedBy, field.TypeString, value)
	}
	if euo.mutation.CalenderIssuedByCleared() {
		_spec.ClearField(exam.FieldCalenderIssuedBy, field.TypeString)
	}
	if value, ok := euo.mutation.NotificationBy(); ok {
		_spec.SetField(exam.FieldNotificationBy, field.TypeString, value)
	}
	if value, ok := euo.mutation.ConductedBy(); ok {
		_spec.SetField(exam.FieldConductedBy, field.TypeString, value)
	}
	if value, ok := euo.mutation.NodalOfficerLevel(); ok {
		_spec.SetField(exam.FieldNodalOfficerLevel, field.TypeString, value)
	}
	if euo.mutation.NodalOfficerLevelCleared() {
		_spec.ClearField(exam.FieldNodalOfficerLevel, field.TypeString)
	}
	if value, ok := euo.mutation.TentativeNotificationMandatoryDate(); ok {
		_spec.SetField(exam.FieldTentativeNotificationMandatoryDate, field.TypeBool, value)
	}
	if value, ok := euo.mutation.LocalLanguage(); ok {
		_spec.SetField(exam.FieldLocalLanguage, field.TypeBool, value)
	}
	if value, ok := euo.mutation.OptionForPost(); ok {
		_spec.SetField(exam.FieldOptionForPost, field.TypeBool, value)
	}
	if value, ok := euo.mutation.OptionToWriteExamOtherThanParent(); ok {
		_spec.SetField(exam.FieldOptionToWriteExamOtherThanParent, field.TypeBool, value)
	}
	if value, ok := euo.mutation.TableName(); ok {
		_spec.SetField(exam.FieldTableName, field.TypeString, value)
	}
	if euo.mutation.TableNameCleared() {
		_spec.ClearField(exam.FieldTableName, field.TypeString)
	}
	if value, ok := euo.mutation.OrderNumber(); ok {
		_spec.SetField(exam.FieldOrderNumber, field.TypeString, value)
	}
	if euo.mutation.OrderNumberCleared() {
		_spec.ClearField(exam.FieldOrderNumber, field.TypeString)
	}
	if value, ok := euo.mutation.CreatedById(); ok {
		_spec.SetField(exam.FieldCreatedById, field.TypeInt64, value)
	}
	if value, ok := euo.mutation.AddedCreatedById(); ok {
		_spec.AddField(exam.FieldCreatedById, field.TypeInt64, value)
	}
	if euo.mutation.CreatedByIdCleared() {
		_spec.ClearField(exam.FieldCreatedById, field.TypeInt64)
	}
	if value, ok := euo.mutation.CreatedByUserName(); ok {
		_spec.SetField(exam.FieldCreatedByUserName, field.TypeString, value)
	}
	if euo.mutation.CreatedByUserNameCleared() {
		_spec.ClearField(exam.FieldCreatedByUserName, field.TypeString)
	}
	if value, ok := euo.mutation.CreatedByEmpId(); ok {
		_spec.SetField(exam.FieldCreatedByEmpId, field.TypeInt64, value)
	}
	if value, ok := euo.mutation.AddedCreatedByEmpId(); ok {
		_spec.AddField(exam.FieldCreatedByEmpId, field.TypeInt64, value)
	}
	if euo.mutation.CreatedByEmpIdCleared() {
		_spec.ClearField(exam.FieldCreatedByEmpId, field.TypeInt64)
	}
	if value, ok := euo.mutation.CreatedByDesignation(); ok {
		_spec.SetField(exam.FieldCreatedByDesignation, field.TypeString, value)
	}
	if euo.mutation.CreatedByDesignationCleared() {
		_spec.ClearField(exam.FieldCreatedByDesignation, field.TypeString)
	}
	if value, ok := euo.mutation.CreatedDate(); ok {
		_spec.SetField(exam.FieldCreatedDate, field.TypeTime, value)
	}
	if euo.mutation.CreatedDateCleared() {
		_spec.ClearField(exam.FieldCreatedDate, field.TypeTime)
	}
	if value, ok := euo.mutation.Verifiedbyid(); ok {
		_spec.SetField(exam.FieldVerifiedbyid, field.TypeInt64, value)
	}
	if value, ok := euo.mutation.AddedVerifiedbyid(); ok {
		_spec.AddField(exam.FieldVerifiedbyid, field.TypeInt64, value)
	}
	if euo.mutation.VerifiedbyidCleared() {
		_spec.ClearField(exam.FieldVerifiedbyid, field.TypeInt64)
	}
	if value, ok := euo.mutation.Verifiedbyusername(); ok {
		_spec.SetField(exam.FieldVerifiedbyusername, field.TypeString, value)
	}
	if euo.mutation.VerifiedbyusernameCleared() {
		_spec.ClearField(exam.FieldVerifiedbyusername, field.TypeString)
	}
	if value, ok := euo.mutation.VerifiedbyEmployeeid(); ok {
		_spec.SetField(exam.FieldVerifiedbyEmployeeid, field.TypeInt64, value)
	}
	if value, ok := euo.mutation.AddedVerifiedbyEmployeeid(); ok {
		_spec.AddField(exam.FieldVerifiedbyEmployeeid, field.TypeInt64, value)
	}
	if euo.mutation.VerifiedbyEmployeeidCleared() {
		_spec.ClearField(exam.FieldVerifiedbyEmployeeid, field.TypeInt64)
	}
	if value, ok := euo.mutation.VerifiedbyDesignation(); ok {
		_spec.SetField(exam.FieldVerifiedbyDesignation, field.TypeString, value)
	}
	if euo.mutation.VerifiedbyDesignationCleared() {
		_spec.ClearField(exam.FieldVerifiedbyDesignation, field.TypeString)
	}
	if value, ok := euo.mutation.VerifiedDate(); ok {
		_spec.SetField(exam.FieldVerifiedDate, field.TypeTime, value)
	}
	if euo.mutation.VerifiedDateCleared() {
		_spec.ClearField(exam.FieldVerifiedDate, field.TypeTime)
	}
	if value, ok := euo.mutation.Statuss(); ok {
		_spec.SetField(exam.FieldStatuss, field.TypeString, value)
	}
	if euo.mutation.StatussCleared() {
		_spec.ClearField(exam.FieldStatuss, field.TypeString)
	}
	if value, ok := euo.mutation.Deletedbyid(); ok {
		_spec.SetField(exam.FieldDeletedbyid, field.TypeInt64, value)
	}
	if value, ok := euo.mutation.AddedDeletedbyid(); ok {
		_spec.AddField(exam.FieldDeletedbyid, field.TypeInt64, value)
	}
	if euo.mutation.DeletedbyidCleared() {
		_spec.ClearField(exam.FieldDeletedbyid, field.TypeInt64)
	}
	if value, ok := euo.mutation.Deletedbyusername(); ok {
		_spec.SetField(exam.FieldDeletedbyusername, field.TypeString, value)
	}
	if euo.mutation.DeletedbyusernameCleared() {
		_spec.ClearField(exam.FieldDeletedbyusername, field.TypeString)
	}
	if value, ok := euo.mutation.DeletedbyEmployeeid(); ok {
		_spec.SetField(exam.FieldDeletedbyEmployeeid, field.TypeInt64, value)
	}
	if value, ok := euo.mutation.AddedDeletedbyEmployeeid(); ok {
		_spec.AddField(exam.FieldDeletedbyEmployeeid, field.TypeInt64, value)
	}
	if euo.mutation.DeletedbyEmployeeidCleared() {
		_spec.ClearField(exam.FieldDeletedbyEmployeeid, field.TypeInt64)
	}
	if value, ok := euo.mutation.DeletedbyDesignation(); ok {
		_spec.SetField(exam.FieldDeletedbyDesignation, field.TypeString, value)
	}
	if euo.mutation.DeletedbyDesignationCleared() {
		_spec.ClearField(exam.FieldDeletedbyDesignation, field.TypeString)
	}
	if value, ok := euo.mutation.DeletedDate(); ok {
		_spec.SetField(exam.FieldDeletedDate, field.TypeTime, value)
	}
	if euo.mutation.DeletedDateCleared() {
		_spec.ClearField(exam.FieldDeletedDate, field.TypeTime)
	}
	if value, ok := euo.mutation.NumOfPapers(); ok {
		_spec.SetField(exam.FieldNumOfPapers, field.TypeInt32, value)
	}
	if value, ok := euo.mutation.AddedNumOfPapers(); ok {
		_spec.AddField(exam.FieldNumOfPapers, field.TypeInt32, value)
	}
	if value, ok := euo.mutation.CalendarCode(); ok {
		_spec.SetField(exam.FieldCalendarCode, field.TypeInt32, value)
	}
	if value, ok := euo.mutation.AddedCalendarCode(); ok {
		_spec.AddField(exam.FieldCalendarCode, field.TypeInt32, value)
	}
	if euo.mutation.CalendarCodeCleared() {
		_spec.ClearField(exam.FieldCalendarCode, field.TypeInt32)
	}
	if value, ok := euo.mutation.PaperCode(); ok {
		_spec.SetField(exam.FieldPaperCode, field.TypeInt32, value)
	}
	if value, ok := euo.mutation.AddedPaperCode(); ok {
		_spec.AddField(exam.FieldPaperCode, field.TypeInt32, value)
	}
	if euo.mutation.PaperCodeCleared() {
		_spec.ClearField(exam.FieldPaperCode, field.TypeInt32)
	}
	if value, ok := euo.mutation.Status(); ok {
		_spec.SetField(exam.FieldStatus, field.TypeString, value)
	}
	if value, ok := euo.mutation.ExamTypeCode(); ok {
		_spec.SetField(exam.FieldExamTypeCode, field.TypeInt32, value)
	}
	if value, ok := euo.mutation.AddedExamTypeCode(); ok {
		_spec.AddField(exam.FieldExamTypeCode, field.TypeInt32, value)
	}
	if euo.mutation.ExamTypeCodeCleared() {
		_spec.ClearField(exam.FieldExamTypeCode, field.TypeInt32)
	}
	if value, ok := euo.mutation.CreatedByEmployeeId(); ok {
		_spec.SetField(exam.FieldCreatedByEmployeeId, field.TypeString, value)
	}
	if euo.mutation.CreatedByEmployeeIdCleared() {
		_spec.ClearField(exam.FieldCreatedByEmployeeId, field.TypeString)
	}
	if euo.mutation.NotificationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam.NotificationsTable,
			Columns: []string{exam.NotificationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notification.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedNotificationsIDs(); len(nodes) > 0 && !euo.mutation.NotificationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam.NotificationsTable,
			Columns: []string{exam.NotificationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notification.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.NotificationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam.NotificationsTable,
			Columns: []string{exam.NotificationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notification.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.ExamsRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam.ExamsRefTable,
			Columns: []string{exam.ExamsRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(examcalendar.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedExamsRefIDs(); len(nodes) > 0 && !euo.mutation.ExamsRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam.ExamsRefTable,
			Columns: []string{exam.ExamsRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(examcalendar.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.ExamsRefIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam.ExamsRefTable,
			Columns: []string{exam.ExamsRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(examcalendar.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.PapersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam.PapersTable,
			Columns: []string{exam.PapersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exampapers.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedPapersIDs(); len(nodes) > 0 && !euo.mutation.PapersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam.PapersTable,
			Columns: []string{exam.PapersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exampapers.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.PapersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam.PapersTable,
			Columns: []string{exam.PapersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exampapers.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.ExamEligibilityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam.ExamEligibilityTable,
			Columns: []string{exam.ExamEligibilityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(eligibilitymaster.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedExamEligibilityIDs(); len(nodes) > 0 && !euo.mutation.ExamEligibilityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam.ExamEligibilityTable,
			Columns: []string{exam.ExamEligibilityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(eligibilitymaster.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.ExamEligibilityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam.ExamEligibilityTable,
			Columns: []string{exam.ExamEligibilityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(eligibilitymaster.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.ExamsTypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam.ExamsTypeTable,
			Columns: []string{exam.ExamsTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(examtype.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedExamsTypeIDs(); len(nodes) > 0 && !euo.mutation.ExamsTypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam.ExamsTypeTable,
			Columns: []string{exam.ExamsTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(examtype.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.ExamsTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam.ExamsTypeTable,
			Columns: []string{exam.ExamsTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(examtype.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.ExamcentresipCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam.ExamcentresipTable,
			Columns: []string{exam.ExamcentresipColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(center.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedExamcentresipIDs(); len(nodes) > 0 && !euo.mutation.ExamcentresipCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam.ExamcentresipTable,
			Columns: []string{exam.ExamcentresipColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(center.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.ExamcentresipIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam.ExamcentresipTable,
			Columns: []string{exam.ExamcentresipColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(center.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.ExamMasterRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam.ExamMasterRefTable,
			Columns: []string{exam.ExamMasterRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_ip.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedExamMasterRefIDs(); len(nodes) > 0 && !euo.mutation.ExamMasterRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam.ExamMasterRefTable,
			Columns: []string{exam.ExamMasterRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_ip.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.ExamMasterRefIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam.ExamMasterRefTable,
			Columns: []string{exam.ExamMasterRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_ip.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.ExamMasterRefPSCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam.ExamMasterRefPSTable,
			Columns: []string{exam.ExamMasterRefPSColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_ps.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedExamMasterRefPSIDs(); len(nodes) > 0 && !euo.mutation.ExamMasterRefPSCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam.ExamMasterRefPSTable,
			Columns: []string{exam.ExamMasterRefPSColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_ps.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.ExamMasterRefPSIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam.ExamMasterRefPSTable,
			Columns: []string{exam.ExamMasterRefPSColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_ps.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.ExamNotificationsRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam.ExamNotificationsRefTable,
			Columns: []string{exam.ExamNotificationsRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(examnotifications.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedExamNotificationsRefIDs(); len(nodes) > 0 && !euo.mutation.ExamNotificationsRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam.ExamNotificationsRefTable,
			Columns: []string{exam.ExamNotificationsRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(examnotifications.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.ExamNotificationsRefIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam.ExamNotificationsRefTable,
			Columns: []string{exam.ExamNotificationsRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(examnotifications.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.ExamMasterRefGDSPACleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam.ExamMasterRefGDSPATable,
			Columns: []string{exam.ExamMasterRefGDSPAColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_gdspa.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedExamMasterRefGDSPAIDs(); len(nodes) > 0 && !euo.mutation.ExamMasterRefGDSPACleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam.ExamMasterRefGDSPATable,
			Columns: []string{exam.ExamMasterRefGDSPAColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_gdspa.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.ExamMasterRefGDSPAIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam.ExamMasterRefGDSPATable,
			Columns: []string{exam.ExamMasterRefGDSPAColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_gdspa.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.ExamMasterRefGDSPMCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam.ExamMasterRefGDSPMTable,
			Columns: []string{exam.ExamMasterRefGDSPMColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_gdspm.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedExamMasterRefGDSPMIDs(); len(nodes) > 0 && !euo.mutation.ExamMasterRefGDSPMCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam.ExamMasterRefGDSPMTable,
			Columns: []string{exam.ExamMasterRefGDSPMColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_gdspm.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.ExamMasterRefGDSPMIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam.ExamMasterRefGDSPMTable,
			Columns: []string{exam.ExamMasterRefGDSPMColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_gdspm.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.ExamMasterRefPMPACleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam.ExamMasterRefPMPATable,
			Columns: []string{exam.ExamMasterRefPMPAColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_pmpa.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedExamMasterRefPMPAIDs(); len(nodes) > 0 && !euo.mutation.ExamMasterRefPMPACleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam.ExamMasterRefPMPATable,
			Columns: []string{exam.ExamMasterRefPMPAColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_pmpa.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.ExamMasterRefPMPAIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam.ExamMasterRefPMPATable,
			Columns: []string{exam.ExamMasterRefPMPAColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_pmpa.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.ExamMasterRefMTSPMMGCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam.ExamMasterRefMTSPMMGTable,
			Columns: []string{exam.ExamMasterRefMTSPMMGColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_application_mtspmmg.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedExamMasterRefMTSPMMGIDs(); len(nodes) > 0 && !euo.mutation.ExamMasterRefMTSPMMGCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam.ExamMasterRefMTSPMMGTable,
			Columns: []string{exam.ExamMasterRefMTSPMMGColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_application_mtspmmg.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.ExamMasterRefMTSPMMGIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam.ExamMasterRefMTSPMMGTable,
			Columns: []string{exam.ExamMasterRefMTSPMMGColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_application_mtspmmg.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.LogDataCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam.LogDataTable,
			Columns: []string{exam.LogDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(logs.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedLogDataIDs(); len(nodes) > 0 && !euo.mutation.LogDataCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam.LogDataTable,
			Columns: []string{exam.LogDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(logs.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.LogDataIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam.LogDataTable,
			Columns: []string{exam.LogDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(logs.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Exam{config: euo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, euo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{exam.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	euo.mutation.done = true
	return _node, nil
}
