// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"
	"recruit/ent/cadre_choice_pa"
	"recruit/ent/center"
	"recruit/ent/circlesummaryforno"
	"recruit/ent/division_choice_pa"
	"recruit/ent/exam"
	"recruit/ent/exam_applications_gdspa"
	"recruit/ent/examcitycenter"
	"recruit/ent/logs"
	"recruit/ent/predicate"
	"recruit/ent/recommendationsgdspaapplications"
	"recruit/ent/rolemaster"
	"recruit/ent/usermaster"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ExamApplicationsGDSPAQuery is the builder for querying Exam_Applications_GDSPA entities.
type ExamApplicationsGDSPAQuery struct {
	config
	ctx                      *QueryContext
	order                    []exam_applications_gdspa.OrderOption
	inters                   []Interceptor
	predicates               []predicate.Exam_Applications_GDSPA
	withUsersGDSPARef        *UserMasterQuery
	withExamcitycenter       *ExamCityCenterQuery
	withGDSPAExamCentres     *CenterQuery
	withRoleusers            *RoleMasterQuery
	withCadrePrefRef         *CadreChoicePAQuery
	withCirclePrefRefGDSPA   *DivisionChoicePAQuery
	withGDSPAApplicationsRef *RecommendationsGDSPAApplicationsQuery
	withExams                *ExamQuery
	withCircleRefsGDSPA      *CircleSummaryForNOQuery
	withLogData              *LogsQuery
	withFKs                  bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the ExamApplicationsGDSPAQuery builder.
func (eagq *ExamApplicationsGDSPAQuery) Where(ps ...predicate.Exam_Applications_GDSPA) *ExamApplicationsGDSPAQuery {
	eagq.predicates = append(eagq.predicates, ps...)
	return eagq
}

// Limit the number of records to be returned by this query.
func (eagq *ExamApplicationsGDSPAQuery) Limit(limit int) *ExamApplicationsGDSPAQuery {
	eagq.ctx.Limit = &limit
	return eagq
}

// Offset to start from.
func (eagq *ExamApplicationsGDSPAQuery) Offset(offset int) *ExamApplicationsGDSPAQuery {
	eagq.ctx.Offset = &offset
	return eagq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (eagq *ExamApplicationsGDSPAQuery) Unique(unique bool) *ExamApplicationsGDSPAQuery {
	eagq.ctx.Unique = &unique
	return eagq
}

// Order specifies how the records should be ordered.
func (eagq *ExamApplicationsGDSPAQuery) Order(o ...exam_applications_gdspa.OrderOption) *ExamApplicationsGDSPAQuery {
	eagq.order = append(eagq.order, o...)
	return eagq
}

// QueryUsersGDSPARef chains the current query on the "UsersGDSPARef" edge.
func (eagq *ExamApplicationsGDSPAQuery) QueryUsersGDSPARef() *UserMasterQuery {
	query := (&UserMasterClient{config: eagq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eagq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eagq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(exam_applications_gdspa.Table, exam_applications_gdspa.FieldID, selector),
			sqlgraph.To(usermaster.Table, usermaster.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, exam_applications_gdspa.UsersGDSPARefTable, exam_applications_gdspa.UsersGDSPARefColumn),
		)
		fromU = sqlgraph.SetNeighbors(eagq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryExamcitycenter chains the current query on the "examcitycenter" edge.
func (eagq *ExamApplicationsGDSPAQuery) QueryExamcitycenter() *ExamCityCenterQuery {
	query := (&ExamCityCenterClient{config: eagq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eagq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eagq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(exam_applications_gdspa.Table, exam_applications_gdspa.FieldID, selector),
			sqlgraph.To(examcitycenter.Table, examcitycenter.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, exam_applications_gdspa.ExamcitycenterTable, exam_applications_gdspa.ExamcitycenterColumn),
		)
		fromU = sqlgraph.SetNeighbors(eagq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryGDSPAExamCentres chains the current query on the "GDSPAExamCentres" edge.
func (eagq *ExamApplicationsGDSPAQuery) QueryGDSPAExamCentres() *CenterQuery {
	query := (&CenterClient{config: eagq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eagq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eagq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(exam_applications_gdspa.Table, exam_applications_gdspa.FieldID, selector),
			sqlgraph.To(center.Table, center.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, exam_applications_gdspa.GDSPAExamCentresTable, exam_applications_gdspa.GDSPAExamCentresColumn),
		)
		fromU = sqlgraph.SetNeighbors(eagq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryRoleusers chains the current query on the "roleusers" edge.
func (eagq *ExamApplicationsGDSPAQuery) QueryRoleusers() *RoleMasterQuery {
	query := (&RoleMasterClient{config: eagq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eagq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eagq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(exam_applications_gdspa.Table, exam_applications_gdspa.FieldID, selector),
			sqlgraph.To(rolemaster.Table, rolemaster.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, exam_applications_gdspa.RoleusersTable, exam_applications_gdspa.RoleusersColumn),
		)
		fromU = sqlgraph.SetNeighbors(eagq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCadrePrefRef chains the current query on the "CadrePref_Ref" edge.
func (eagq *ExamApplicationsGDSPAQuery) QueryCadrePrefRef() *CadreChoicePAQuery {
	query := (&CadreChoicePAClient{config: eagq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eagq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eagq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(exam_applications_gdspa.Table, exam_applications_gdspa.FieldID, selector),
			sqlgraph.To(cadre_choice_pa.Table, cadre_choice_pa.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, exam_applications_gdspa.CadrePrefRefTable, exam_applications_gdspa.CadrePrefRefColumn),
		)
		fromU = sqlgraph.SetNeighbors(eagq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCirclePrefRefGDSPA chains the current query on the "CirclePrefRefGDSPA" edge.
func (eagq *ExamApplicationsGDSPAQuery) QueryCirclePrefRefGDSPA() *DivisionChoicePAQuery {
	query := (&DivisionChoicePAClient{config: eagq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eagq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eagq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(exam_applications_gdspa.Table, exam_applications_gdspa.FieldID, selector),
			sqlgraph.To(division_choice_pa.Table, division_choice_pa.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, exam_applications_gdspa.CirclePrefRefGDSPATable, exam_applications_gdspa.CirclePrefRefGDSPAColumn),
		)
		fromU = sqlgraph.SetNeighbors(eagq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryGDSPAApplicationsRef chains the current query on the "GDSPAApplicationsRef" edge.
func (eagq *ExamApplicationsGDSPAQuery) QueryGDSPAApplicationsRef() *RecommendationsGDSPAApplicationsQuery {
	query := (&RecommendationsGDSPAApplicationsClient{config: eagq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eagq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eagq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(exam_applications_gdspa.Table, exam_applications_gdspa.FieldID, selector),
			sqlgraph.To(recommendationsgdspaapplications.Table, recommendationsgdspaapplications.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, exam_applications_gdspa.GDSPAApplicationsRefTable, exam_applications_gdspa.GDSPAApplicationsRefColumn),
		)
		fromU = sqlgraph.SetNeighbors(eagq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryExams chains the current query on the "Exams" edge.
func (eagq *ExamApplicationsGDSPAQuery) QueryExams() *ExamQuery {
	query := (&ExamClient{config: eagq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eagq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eagq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(exam_applications_gdspa.Table, exam_applications_gdspa.FieldID, selector),
			sqlgraph.To(exam.Table, exam.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, exam_applications_gdspa.ExamsTable, exam_applications_gdspa.ExamsColumn),
		)
		fromU = sqlgraph.SetNeighbors(eagq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCircleRefsGDSPA chains the current query on the "CircleRefsGDSPA" edge.
func (eagq *ExamApplicationsGDSPAQuery) QueryCircleRefsGDSPA() *CircleSummaryForNOQuery {
	query := (&CircleSummaryForNOClient{config: eagq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eagq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eagq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(exam_applications_gdspa.Table, exam_applications_gdspa.FieldID, selector),
			sqlgraph.To(circlesummaryforno.Table, circlesummaryforno.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, exam_applications_gdspa.CircleRefsGDSPATable, exam_applications_gdspa.CircleRefsGDSPAColumn),
		)
		fromU = sqlgraph.SetNeighbors(eagq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryLogData chains the current query on the "LogData" edge.
func (eagq *ExamApplicationsGDSPAQuery) QueryLogData() *LogsQuery {
	query := (&LogsClient{config: eagq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eagq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eagq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(exam_applications_gdspa.Table, exam_applications_gdspa.FieldID, selector),
			sqlgraph.To(logs.Table, logs.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, exam_applications_gdspa.LogDataTable, exam_applications_gdspa.LogDataColumn),
		)
		fromU = sqlgraph.SetNeighbors(eagq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first Exam_Applications_GDSPA entity from the query.
// Returns a *NotFoundError when no Exam_Applications_GDSPA was found.
func (eagq *ExamApplicationsGDSPAQuery) First(ctx context.Context) (*Exam_Applications_GDSPA, error) {
	nodes, err := eagq.Limit(1).All(setContextOp(ctx, eagq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{exam_applications_gdspa.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (eagq *ExamApplicationsGDSPAQuery) FirstX(ctx context.Context) *Exam_Applications_GDSPA {
	node, err := eagq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first Exam_Applications_GDSPA ID from the query.
// Returns a *NotFoundError when no Exam_Applications_GDSPA ID was found.
func (eagq *ExamApplicationsGDSPAQuery) FirstID(ctx context.Context) (id int64, err error) {
	var ids []int64
	if ids, err = eagq.Limit(1).IDs(setContextOp(ctx, eagq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{exam_applications_gdspa.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (eagq *ExamApplicationsGDSPAQuery) FirstIDX(ctx context.Context) int64 {
	id, err := eagq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single Exam_Applications_GDSPA entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one Exam_Applications_GDSPA entity is found.
// Returns a *NotFoundError when no Exam_Applications_GDSPA entities are found.
func (eagq *ExamApplicationsGDSPAQuery) Only(ctx context.Context) (*Exam_Applications_GDSPA, error) {
	nodes, err := eagq.Limit(2).All(setContextOp(ctx, eagq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{exam_applications_gdspa.Label}
	default:
		return nil, &NotSingularError{exam_applications_gdspa.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (eagq *ExamApplicationsGDSPAQuery) OnlyX(ctx context.Context) *Exam_Applications_GDSPA {
	node, err := eagq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only Exam_Applications_GDSPA ID in the query.
// Returns a *NotSingularError when more than one Exam_Applications_GDSPA ID is found.
// Returns a *NotFoundError when no entities are found.
func (eagq *ExamApplicationsGDSPAQuery) OnlyID(ctx context.Context) (id int64, err error) {
	var ids []int64
	if ids, err = eagq.Limit(2).IDs(setContextOp(ctx, eagq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{exam_applications_gdspa.Label}
	default:
		err = &NotSingularError{exam_applications_gdspa.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (eagq *ExamApplicationsGDSPAQuery) OnlyIDX(ctx context.Context) int64 {
	id, err := eagq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Exam_Applications_GDSPAs.
func (eagq *ExamApplicationsGDSPAQuery) All(ctx context.Context) ([]*Exam_Applications_GDSPA, error) {
	ctx = setContextOp(ctx, eagq.ctx, "All")
	if err := eagq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*Exam_Applications_GDSPA, *ExamApplicationsGDSPAQuery]()
	return withInterceptors[[]*Exam_Applications_GDSPA](ctx, eagq, qr, eagq.inters)
}

// AllX is like All, but panics if an error occurs.
func (eagq *ExamApplicationsGDSPAQuery) AllX(ctx context.Context) []*Exam_Applications_GDSPA {
	nodes, err := eagq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of Exam_Applications_GDSPA IDs.
func (eagq *ExamApplicationsGDSPAQuery) IDs(ctx context.Context) (ids []int64, err error) {
	if eagq.ctx.Unique == nil && eagq.path != nil {
		eagq.Unique(true)
	}
	ctx = setContextOp(ctx, eagq.ctx, "IDs")
	if err = eagq.Select(exam_applications_gdspa.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (eagq *ExamApplicationsGDSPAQuery) IDsX(ctx context.Context) []int64 {
	ids, err := eagq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (eagq *ExamApplicationsGDSPAQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, eagq.ctx, "Count")
	if err := eagq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, eagq, querierCount[*ExamApplicationsGDSPAQuery](), eagq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (eagq *ExamApplicationsGDSPAQuery) CountX(ctx context.Context) int {
	count, err := eagq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (eagq *ExamApplicationsGDSPAQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, eagq.ctx, "Exist")
	switch _, err := eagq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (eagq *ExamApplicationsGDSPAQuery) ExistX(ctx context.Context) bool {
	exist, err := eagq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the ExamApplicationsGDSPAQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (eagq *ExamApplicationsGDSPAQuery) Clone() *ExamApplicationsGDSPAQuery {
	if eagq == nil {
		return nil
	}
	return &ExamApplicationsGDSPAQuery{
		config:                   eagq.config,
		ctx:                      eagq.ctx.Clone(),
		order:                    append([]exam_applications_gdspa.OrderOption{}, eagq.order...),
		inters:                   append([]Interceptor{}, eagq.inters...),
		predicates:               append([]predicate.Exam_Applications_GDSPA{}, eagq.predicates...),
		withUsersGDSPARef:        eagq.withUsersGDSPARef.Clone(),
		withExamcitycenter:       eagq.withExamcitycenter.Clone(),
		withGDSPAExamCentres:     eagq.withGDSPAExamCentres.Clone(),
		withRoleusers:            eagq.withRoleusers.Clone(),
		withCadrePrefRef:         eagq.withCadrePrefRef.Clone(),
		withCirclePrefRefGDSPA:   eagq.withCirclePrefRefGDSPA.Clone(),
		withGDSPAApplicationsRef: eagq.withGDSPAApplicationsRef.Clone(),
		withExams:                eagq.withExams.Clone(),
		withCircleRefsGDSPA:      eagq.withCircleRefsGDSPA.Clone(),
		withLogData:              eagq.withLogData.Clone(),
		// clone intermediate query.
		sql:  eagq.sql.Clone(),
		path: eagq.path,
	}
}

// WithUsersGDSPARef tells the query-builder to eager-load the nodes that are connected to
// the "UsersGDSPARef" edge. The optional arguments are used to configure the query builder of the edge.
func (eagq *ExamApplicationsGDSPAQuery) WithUsersGDSPARef(opts ...func(*UserMasterQuery)) *ExamApplicationsGDSPAQuery {
	query := (&UserMasterClient{config: eagq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	eagq.withUsersGDSPARef = query
	return eagq
}

// WithExamcitycenter tells the query-builder to eager-load the nodes that are connected to
// the "examcitycenter" edge. The optional arguments are used to configure the query builder of the edge.
func (eagq *ExamApplicationsGDSPAQuery) WithExamcitycenter(opts ...func(*ExamCityCenterQuery)) *ExamApplicationsGDSPAQuery {
	query := (&ExamCityCenterClient{config: eagq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	eagq.withExamcitycenter = query
	return eagq
}

// WithGDSPAExamCentres tells the query-builder to eager-load the nodes that are connected to
// the "GDSPAExamCentres" edge. The optional arguments are used to configure the query builder of the edge.
func (eagq *ExamApplicationsGDSPAQuery) WithGDSPAExamCentres(opts ...func(*CenterQuery)) *ExamApplicationsGDSPAQuery {
	query := (&CenterClient{config: eagq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	eagq.withGDSPAExamCentres = query
	return eagq
}

// WithRoleusers tells the query-builder to eager-load the nodes that are connected to
// the "roleusers" edge. The optional arguments are used to configure the query builder of the edge.
func (eagq *ExamApplicationsGDSPAQuery) WithRoleusers(opts ...func(*RoleMasterQuery)) *ExamApplicationsGDSPAQuery {
	query := (&RoleMasterClient{config: eagq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	eagq.withRoleusers = query
	return eagq
}

// WithCadrePrefRef tells the query-builder to eager-load the nodes that are connected to
// the "CadrePref_Ref" edge. The optional arguments are used to configure the query builder of the edge.
func (eagq *ExamApplicationsGDSPAQuery) WithCadrePrefRef(opts ...func(*CadreChoicePAQuery)) *ExamApplicationsGDSPAQuery {
	query := (&CadreChoicePAClient{config: eagq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	eagq.withCadrePrefRef = query
	return eagq
}

// WithCirclePrefRefGDSPA tells the query-builder to eager-load the nodes that are connected to
// the "CirclePrefRefGDSPA" edge. The optional arguments are used to configure the query builder of the edge.
func (eagq *ExamApplicationsGDSPAQuery) WithCirclePrefRefGDSPA(opts ...func(*DivisionChoicePAQuery)) *ExamApplicationsGDSPAQuery {
	query := (&DivisionChoicePAClient{config: eagq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	eagq.withCirclePrefRefGDSPA = query
	return eagq
}

// WithGDSPAApplicationsRef tells the query-builder to eager-load the nodes that are connected to
// the "GDSPAApplicationsRef" edge. The optional arguments are used to configure the query builder of the edge.
func (eagq *ExamApplicationsGDSPAQuery) WithGDSPAApplicationsRef(opts ...func(*RecommendationsGDSPAApplicationsQuery)) *ExamApplicationsGDSPAQuery {
	query := (&RecommendationsGDSPAApplicationsClient{config: eagq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	eagq.withGDSPAApplicationsRef = query
	return eagq
}

// WithExams tells the query-builder to eager-load the nodes that are connected to
// the "Exams" edge. The optional arguments are used to configure the query builder of the edge.
func (eagq *ExamApplicationsGDSPAQuery) WithExams(opts ...func(*ExamQuery)) *ExamApplicationsGDSPAQuery {
	query := (&ExamClient{config: eagq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	eagq.withExams = query
	return eagq
}

// WithCircleRefsGDSPA tells the query-builder to eager-load the nodes that are connected to
// the "CircleRefsGDSPA" edge. The optional arguments are used to configure the query builder of the edge.
func (eagq *ExamApplicationsGDSPAQuery) WithCircleRefsGDSPA(opts ...func(*CircleSummaryForNOQuery)) *ExamApplicationsGDSPAQuery {
	query := (&CircleSummaryForNOClient{config: eagq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	eagq.withCircleRefsGDSPA = query
	return eagq
}

// WithLogData tells the query-builder to eager-load the nodes that are connected to
// the "LogData" edge. The optional arguments are used to configure the query builder of the edge.
func (eagq *ExamApplicationsGDSPAQuery) WithLogData(opts ...func(*LogsQuery)) *ExamApplicationsGDSPAQuery {
	query := (&LogsClient{config: eagq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	eagq.withLogData = query
	return eagq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		ApplicationNumber string `json:"ApplicationNumber,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.ExamApplicationsGDSPA.Query().
//		GroupBy(exam_applications_gdspa.FieldApplicationNumber).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (eagq *ExamApplicationsGDSPAQuery) GroupBy(field string, fields ...string) *ExamApplicationsGDSPAGroupBy {
	eagq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &ExamApplicationsGDSPAGroupBy{build: eagq}
	grbuild.flds = &eagq.ctx.Fields
	grbuild.label = exam_applications_gdspa.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		ApplicationNumber string `json:"ApplicationNumber,omitempty"`
//	}
//
//	client.ExamApplicationsGDSPA.Query().
//		Select(exam_applications_gdspa.FieldApplicationNumber).
//		Scan(ctx, &v)
func (eagq *ExamApplicationsGDSPAQuery) Select(fields ...string) *ExamApplicationsGDSPASelect {
	eagq.ctx.Fields = append(eagq.ctx.Fields, fields...)
	sbuild := &ExamApplicationsGDSPASelect{ExamApplicationsGDSPAQuery: eagq}
	sbuild.label = exam_applications_gdspa.Label
	sbuild.flds, sbuild.scan = &eagq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a ExamApplicationsGDSPASelect configured with the given aggregations.
func (eagq *ExamApplicationsGDSPAQuery) Aggregate(fns ...AggregateFunc) *ExamApplicationsGDSPASelect {
	return eagq.Select().Aggregate(fns...)
}

func (eagq *ExamApplicationsGDSPAQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range eagq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, eagq); err != nil {
				return err
			}
		}
	}
	for _, f := range eagq.ctx.Fields {
		if !exam_applications_gdspa.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if eagq.path != nil {
		prev, err := eagq.path(ctx)
		if err != nil {
			return err
		}
		eagq.sql = prev
	}
	return nil
}

func (eagq *ExamApplicationsGDSPAQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*Exam_Applications_GDSPA, error) {
	var (
		nodes       = []*Exam_Applications_GDSPA{}
		withFKs     = eagq.withFKs
		_spec       = eagq.querySpec()
		loadedTypes = [10]bool{
			eagq.withUsersGDSPARef != nil,
			eagq.withExamcitycenter != nil,
			eagq.withGDSPAExamCentres != nil,
			eagq.withRoleusers != nil,
			eagq.withCadrePrefRef != nil,
			eagq.withCirclePrefRefGDSPA != nil,
			eagq.withGDSPAApplicationsRef != nil,
			eagq.withExams != nil,
			eagq.withCircleRefsGDSPA != nil,
			eagq.withLogData != nil,
		}
	)
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, exam_applications_gdspa.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*Exam_Applications_GDSPA).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &Exam_Applications_GDSPA{config: eagq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, eagq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := eagq.withUsersGDSPARef; query != nil {
		if err := eagq.loadUsersGDSPARef(ctx, query, nodes,
			func(n *Exam_Applications_GDSPA) { n.Edges.UsersGDSPARef = []*UserMaster{} },
			func(n *Exam_Applications_GDSPA, e *UserMaster) {
				n.Edges.UsersGDSPARef = append(n.Edges.UsersGDSPARef, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := eagq.withExamcitycenter; query != nil {
		if err := eagq.loadExamcitycenter(ctx, query, nodes, nil,
			func(n *Exam_Applications_GDSPA, e *ExamCityCenter) { n.Edges.Examcitycenter = e }); err != nil {
			return nil, err
		}
	}
	if query := eagq.withGDSPAExamCentres; query != nil {
		if err := eagq.loadGDSPAExamCentres(ctx, query, nodes, nil,
			func(n *Exam_Applications_GDSPA, e *Center) { n.Edges.GDSPAExamCentres = e }); err != nil {
			return nil, err
		}
	}
	if query := eagq.withRoleusers; query != nil {
		if err := eagq.loadRoleusers(ctx, query, nodes, nil,
			func(n *Exam_Applications_GDSPA, e *RoleMaster) { n.Edges.Roleusers = e }); err != nil {
			return nil, err
		}
	}
	if query := eagq.withCadrePrefRef; query != nil {
		if err := eagq.loadCadrePrefRef(ctx, query, nodes,
			func(n *Exam_Applications_GDSPA) { n.Edges.CadrePrefRef = []*Cadre_Choice_PA{} },
			func(n *Exam_Applications_GDSPA, e *Cadre_Choice_PA) {
				n.Edges.CadrePrefRef = append(n.Edges.CadrePrefRef, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := eagq.withCirclePrefRefGDSPA; query != nil {
		if err := eagq.loadCirclePrefRefGDSPA(ctx, query, nodes,
			func(n *Exam_Applications_GDSPA) { n.Edges.CirclePrefRefGDSPA = []*Division_Choice_PA{} },
			func(n *Exam_Applications_GDSPA, e *Division_Choice_PA) {
				n.Edges.CirclePrefRefGDSPA = append(n.Edges.CirclePrefRefGDSPA, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := eagq.withGDSPAApplicationsRef; query != nil {
		if err := eagq.loadGDSPAApplicationsRef(ctx, query, nodes,
			func(n *Exam_Applications_GDSPA) { n.Edges.GDSPAApplicationsRef = []*RecommendationsGDSPAApplications{} },
			func(n *Exam_Applications_GDSPA, e *RecommendationsGDSPAApplications) {
				n.Edges.GDSPAApplicationsRef = append(n.Edges.GDSPAApplicationsRef, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := eagq.withExams; query != nil {
		if err := eagq.loadExams(ctx, query, nodes, nil,
			func(n *Exam_Applications_GDSPA, e *Exam) { n.Edges.Exams = e }); err != nil {
			return nil, err
		}
	}
	if query := eagq.withCircleRefsGDSPA; query != nil {
		if err := eagq.loadCircleRefsGDSPA(ctx, query, nodes, nil,
			func(n *Exam_Applications_GDSPA, e *CircleSummaryForNO) { n.Edges.CircleRefsGDSPA = e }); err != nil {
			return nil, err
		}
	}
	if query := eagq.withLogData; query != nil {
		if err := eagq.loadLogData(ctx, query, nodes,
			func(n *Exam_Applications_GDSPA) { n.Edges.LogData = []*Logs{} },
			func(n *Exam_Applications_GDSPA, e *Logs) { n.Edges.LogData = append(n.Edges.LogData, e) }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (eagq *ExamApplicationsGDSPAQuery) loadUsersGDSPARef(ctx context.Context, query *UserMasterQuery, nodes []*Exam_Applications_GDSPA, init func(*Exam_Applications_GDSPA), assign func(*Exam_Applications_GDSPA, *UserMaster)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int64]*Exam_Applications_GDSPA)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.UserMaster(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(exam_applications_gdspa.UsersGDSPARefColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.exam_applications_gdspa_users_gdspa_ref
		if fk == nil {
			return fmt.Errorf(`foreign-key "exam_applications_gdspa_users_gdspa_ref" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "exam_applications_gdspa_users_gdspa_ref" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (eagq *ExamApplicationsGDSPAQuery) loadExamcitycenter(ctx context.Context, query *ExamCityCenterQuery, nodes []*Exam_Applications_GDSPA, init func(*Exam_Applications_GDSPA), assign func(*Exam_Applications_GDSPA, *ExamCityCenter)) error {
	ids := make([]int32, 0, len(nodes))
	nodeids := make(map[int32][]*Exam_Applications_GDSPA)
	for i := range nodes {
		fk := nodes[i].ExamCityCenterCode
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(examcitycenter.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "ExamCityCenterCode" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (eagq *ExamApplicationsGDSPAQuery) loadGDSPAExamCentres(ctx context.Context, query *CenterQuery, nodes []*Exam_Applications_GDSPA, init func(*Exam_Applications_GDSPA), assign func(*Exam_Applications_GDSPA, *Center)) error {
	ids := make([]int32, 0, len(nodes))
	nodeids := make(map[int32][]*Exam_Applications_GDSPA)
	for i := range nodes {
		fk := nodes[i].CenterCode
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(center.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "CenterCode" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (eagq *ExamApplicationsGDSPAQuery) loadRoleusers(ctx context.Context, query *RoleMasterQuery, nodes []*Exam_Applications_GDSPA, init func(*Exam_Applications_GDSPA), assign func(*Exam_Applications_GDSPA, *RoleMaster)) error {
	ids := make([]int32, 0, len(nodes))
	nodeids := make(map[int32][]*Exam_Applications_GDSPA)
	for i := range nodes {
		fk := nodes[i].RoleUserCode
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(rolemaster.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "RoleUserCode" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (eagq *ExamApplicationsGDSPAQuery) loadCadrePrefRef(ctx context.Context, query *CadreChoicePAQuery, nodes []*Exam_Applications_GDSPA, init func(*Exam_Applications_GDSPA), assign func(*Exam_Applications_GDSPA, *Cadre_Choice_PA)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int64]*Exam_Applications_GDSPA)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(cadre_choice_pa.FieldApplicationID)
	}
	query.Where(predicate.Cadre_Choice_PA(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(exam_applications_gdspa.CadrePrefRefColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.ApplicationID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "ApplicationID" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (eagq *ExamApplicationsGDSPAQuery) loadCirclePrefRefGDSPA(ctx context.Context, query *DivisionChoicePAQuery, nodes []*Exam_Applications_GDSPA, init func(*Exam_Applications_GDSPA), assign func(*Exam_Applications_GDSPA, *Division_Choice_PA)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int64]*Exam_Applications_GDSPA)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(division_choice_pa.FieldApplicationID)
	}
	query.Where(predicate.Division_Choice_PA(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(exam_applications_gdspa.CirclePrefRefGDSPAColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.ApplicationID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "ApplicationID" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (eagq *ExamApplicationsGDSPAQuery) loadGDSPAApplicationsRef(ctx context.Context, query *RecommendationsGDSPAApplicationsQuery, nodes []*Exam_Applications_GDSPA, init func(*Exam_Applications_GDSPA), assign func(*Exam_Applications_GDSPA, *RecommendationsGDSPAApplications)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int64]*Exam_Applications_GDSPA)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(recommendationsgdspaapplications.FieldApplicationID)
	}
	query.Where(predicate.RecommendationsGDSPAApplications(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(exam_applications_gdspa.GDSPAApplicationsRefColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.ApplicationID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "ApplicationID" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (eagq *ExamApplicationsGDSPAQuery) loadExams(ctx context.Context, query *ExamQuery, nodes []*Exam_Applications_GDSPA, init func(*Exam_Applications_GDSPA), assign func(*Exam_Applications_GDSPA, *Exam)) error {
	ids := make([]int32, 0, len(nodes))
	nodeids := make(map[int32][]*Exam_Applications_GDSPA)
	for i := range nodes {
		fk := nodes[i].ExamCode
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(exam.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "ExamCode" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (eagq *ExamApplicationsGDSPAQuery) loadCircleRefsGDSPA(ctx context.Context, query *CircleSummaryForNOQuery, nodes []*Exam_Applications_GDSPA, init func(*Exam_Applications_GDSPA), assign func(*Exam_Applications_GDSPA, *CircleSummaryForNO)) error {
	ids := make([]int32, 0, len(nodes))
	nodeids := make(map[int32][]*Exam_Applications_GDSPA)
	for i := range nodes {
		if nodes[i].CircleSID == nil {
			continue
		}
		fk := *nodes[i].CircleSID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(circlesummaryforno.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "CircleSID" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (eagq *ExamApplicationsGDSPAQuery) loadLogData(ctx context.Context, query *LogsQuery, nodes []*Exam_Applications_GDSPA, init func(*Exam_Applications_GDSPA), assign func(*Exam_Applications_GDSPA, *Logs)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int64]*Exam_Applications_GDSPA)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Logs(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(exam_applications_gdspa.LogDataColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.exam_applications_gdspa_log_data
		if fk == nil {
			return fmt.Errorf(`foreign-key "exam_applications_gdspa_log_data" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "exam_applications_gdspa_log_data" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (eagq *ExamApplicationsGDSPAQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := eagq.querySpec()
	_spec.Node.Columns = eagq.ctx.Fields
	if len(eagq.ctx.Fields) > 0 {
		_spec.Unique = eagq.ctx.Unique != nil && *eagq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, eagq.driver, _spec)
}

func (eagq *ExamApplicationsGDSPAQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(exam_applications_gdspa.Table, exam_applications_gdspa.Columns, sqlgraph.NewFieldSpec(exam_applications_gdspa.FieldID, field.TypeInt64))
	_spec.From = eagq.sql
	if unique := eagq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if eagq.path != nil {
		_spec.Unique = true
	}
	if fields := eagq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, exam_applications_gdspa.FieldID)
		for i := range fields {
			if fields[i] != exam_applications_gdspa.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if eagq.withExamcitycenter != nil {
			_spec.Node.AddColumnOnce(exam_applications_gdspa.FieldExamCityCenterCode)
		}
		if eagq.withGDSPAExamCentres != nil {
			_spec.Node.AddColumnOnce(exam_applications_gdspa.FieldCenterCode)
		}
		if eagq.withRoleusers != nil {
			_spec.Node.AddColumnOnce(exam_applications_gdspa.FieldRoleUserCode)
		}
		if eagq.withExams != nil {
			_spec.Node.AddColumnOnce(exam_applications_gdspa.FieldExamCode)
		}
		if eagq.withCircleRefsGDSPA != nil {
			_spec.Node.AddColumnOnce(exam_applications_gdspa.FieldCircleSID)
		}
	}
	if ps := eagq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := eagq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := eagq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := eagq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (eagq *ExamApplicationsGDSPAQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(eagq.driver.Dialect())
	t1 := builder.Table(exam_applications_gdspa.Table)
	columns := eagq.ctx.Fields
	if len(columns) == 0 {
		columns = exam_applications_gdspa.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if eagq.sql != nil {
		selector = eagq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if eagq.ctx.Unique != nil && *eagq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range eagq.predicates {
		p(selector)
	}
	for _, p := range eagq.order {
		p(selector)
	}
	if offset := eagq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := eagq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// ExamApplicationsGDSPAGroupBy is the group-by builder for Exam_Applications_GDSPA entities.
type ExamApplicationsGDSPAGroupBy struct {
	selector
	build *ExamApplicationsGDSPAQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (eaggb *ExamApplicationsGDSPAGroupBy) Aggregate(fns ...AggregateFunc) *ExamApplicationsGDSPAGroupBy {
	eaggb.fns = append(eaggb.fns, fns...)
	return eaggb
}

// Scan applies the selector query and scans the result into the given value.
func (eaggb *ExamApplicationsGDSPAGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, eaggb.build.ctx, "GroupBy")
	if err := eaggb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ExamApplicationsGDSPAQuery, *ExamApplicationsGDSPAGroupBy](ctx, eaggb.build, eaggb, eaggb.build.inters, v)
}

func (eaggb *ExamApplicationsGDSPAGroupBy) sqlScan(ctx context.Context, root *ExamApplicationsGDSPAQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(eaggb.fns))
	for _, fn := range eaggb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*eaggb.flds)+len(eaggb.fns))
		for _, f := range *eaggb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*eaggb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := eaggb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// ExamApplicationsGDSPASelect is the builder for selecting fields of ExamApplicationsGDSPA entities.
type ExamApplicationsGDSPASelect struct {
	*ExamApplicationsGDSPAQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (eags *ExamApplicationsGDSPASelect) Aggregate(fns ...AggregateFunc) *ExamApplicationsGDSPASelect {
	eags.fns = append(eags.fns, fns...)
	return eags
}

// Scan applies the selector query and scans the result into the given value.
func (eags *ExamApplicationsGDSPASelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, eags.ctx, "Select")
	if err := eags.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ExamApplicationsGDSPAQuery, *ExamApplicationsGDSPASelect](ctx, eags.ExamApplicationsGDSPAQuery, eags, eags.inters, v)
}

func (eags *ExamApplicationsGDSPASelect) sqlScan(ctx context.Context, root *ExamApplicationsGDSPAQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(eags.fns))
	for _, fn := range eags.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*eags.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := eags.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
