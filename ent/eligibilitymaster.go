// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"recruit/ent/eligibilitymaster"
	"recruit/ent/exam"
	"recruit/ent/exampapers"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// EligibilityMaster is the model entity for the EligibilityMaster schema.
type EligibilityMaster struct {
	config `json:"-"`
	// ID of the ent.
	ID int32 `json:"id,omitempty"`
	// ExamCode holds the value of the "ExamCode" field.
	ExamCode int32 `json:"ExamCode,omitempty"`
	// ExamName holds the value of the "ExamName" field.
	ExamName string `json:"ExamName,omitempty"`
	// PostCode holds the value of the "PostCode" field.
	PostCode string `json:"PostCode,omitempty"`
	// GdsService holds the value of the "gdsService" field.
	GdsService bool `json:"gdsService,omitempty"`
	// AgeCriteria holds the value of the "AgeCriteria" field.
	AgeCriteria int32 `json:"AgeCriteria,omitempty"`
	// ServiceCriteria holds the value of the "ServiceCriteria" field.
	ServiceCriteria int32 `json:"ServiceCriteria,omitempty"`
	// DrivingLicenseCriteria holds the value of the "DrivingLicenseCriteria" field.
	DrivingLicenseCriteria bool `json:"DrivingLicenseCriteria,omitempty"`
	// ComputerKnowledge holds the value of the "ComputerKnowledge" field.
	ComputerKnowledge bool `json:"ComputerKnowledge,omitempty"`
	// LevelOfPayMatrixEligibility holds the value of the "LevelOfPayMatrixEligibility" field.
	LevelOfPayMatrixEligibility bool `json:"LevelOfPayMatrixEligibility,omitempty"`
	// Education holds the value of the "Education" field.
	Education string `json:"Education,omitempty"`
	// NotifyCode holds the value of the "NotifyCode" field.
	NotifyCode int32 `json:"NotifyCode,omitempty"`
	// CategoryCode holds the value of the "CategoryCode" field.
	CategoryCode string `json:"CategoryCode,omitempty"`
	// PaperCode holds the value of the "PaperCode" field.
	PaperCode int32 `json:"PaperCode,omitempty"`
	// PaperDescription holds the value of the "PaperDescription" field.
	PaperDescription string `json:"PaperDescription,omitempty"`
	// MinimumMarks holds the value of the "MinimumMarks" field.
	MinimumMarks int32 `json:"MinimumMarks,omitempty"`
	// OrderNumber holds the value of the "OrderNumber" field.
	OrderNumber string `json:"OrderNumber,omitempty"`
	// Status holds the value of the "Status" field.
	Status string `json:"Status,omitempty"`
	// CreatedById holds the value of the "CreatedById" field.
	CreatedById int32 `json:"CreatedById,omitempty"`
	// CreatedByUserName holds the value of the "CreatedByUserName" field.
	CreatedByUserName string `json:"CreatedByUserName,omitempty"`
	// CreatedByEmployeeId holds the value of the "CreatedByEmployeeId" field.
	CreatedByEmployeeId string `json:"CreatedByEmployeeId,omitempty"`
	// CreatedByDesignation holds the value of the "CreatedByDesignation" field.
	CreatedByDesignation string `json:"CreatedByDesignation,omitempty"`
	// CreatedDate holds the value of the "CreatedDate" field.
	CreatedDate time.Time `json:"CreatedDate,omitempty"`
	// VerifiedById holds the value of the "VerifiedById" field.
	VerifiedById int64 `json:"VerifiedById,omitempty"`
	// VerifiedByUserName holds the value of the "VerifiedByUserName" field.
	VerifiedByUserName string `json:"VerifiedByUserName,omitempty"`
	// VerifiedByEmployeeId holds the value of the "VerifiedByEmployeeId" field.
	VerifiedByEmployeeId string `json:"VerifiedByEmployeeId,omitempty"`
	// VerifiedByDesignation holds the value of the "VerifiedByDesignation" field.
	VerifiedByDesignation string `json:"VerifiedByDesignation,omitempty"`
	// VerifiedDate holds the value of the "VerifiedDate" field.
	VerifiedDate time.Time `json:"VerifiedDate,omitempty"`
	// DeletedById holds the value of the "DeletedById" field.
	DeletedById int64 `json:"DeletedById,omitempty"`
	// DeletedByUserName holds the value of the "DeletedByUserName" field.
	DeletedByUserName string `json:"DeletedByUserName,omitempty"`
	// DeletedByEmployeeId holds the value of the "DeletedByEmployeeId" field.
	DeletedByEmployeeId string `json:"DeletedByEmployeeId,omitempty"`
	// DeletedByDesignation holds the value of the "DeletedByDesignation" field.
	DeletedByDesignation string `json:"DeletedByDesignation,omitempty"`
	// DeletedDate holds the value of the "DeletedDate" field.
	DeletedDate time.Time `json:"DeletedDate,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the EligibilityMasterQuery when eager-loading is set.
	Edges                           EligibilityMasterEdges `json:"edges"`
	employee_posts_post_eligibility *int32
	selectValues                    sql.SelectValues
}

// EligibilityMasterEdges holds the relations/edges for other nodes in the graph.
type EligibilityMasterEdges struct {
	// Notifications holds the value of the Notifications edge.
	Notifications []*Notification `json:"Notifications,omitempty"`
	// CategoryEligibility holds the value of the CategoryEligibility edge.
	CategoryEligibility []*EmployeeCategory `json:"CategoryEligibility,omitempty"`
	// PostEligibility holds the value of the PostEligibility edge.
	PostEligibility []*EmployeePosts `json:"PostEligibility,omitempty"`
	// ExamPaperEligibility holds the value of the ExamPaper_Eligibility edge.
	ExamPaperEligibility *ExamPapers `json:"ExamPaper_Eligibility,omitempty"`
	// ExamEligibility holds the value of the Exam_Eligibility edge.
	ExamEligibility *Exam `json:"Exam_Eligibility,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [5]bool
}

// NotificationsOrErr returns the Notifications value or an error if the edge
// was not loaded in eager-loading.
func (e EligibilityMasterEdges) NotificationsOrErr() ([]*Notification, error) {
	if e.loadedTypes[0] {
		return e.Notifications, nil
	}
	return nil, &NotLoadedError{edge: "Notifications"}
}

// CategoryEligibilityOrErr returns the CategoryEligibility value or an error if the edge
// was not loaded in eager-loading.
func (e EligibilityMasterEdges) CategoryEligibilityOrErr() ([]*EmployeeCategory, error) {
	if e.loadedTypes[1] {
		return e.CategoryEligibility, nil
	}
	return nil, &NotLoadedError{edge: "CategoryEligibility"}
}

// PostEligibilityOrErr returns the PostEligibility value or an error if the edge
// was not loaded in eager-loading.
func (e EligibilityMasterEdges) PostEligibilityOrErr() ([]*EmployeePosts, error) {
	if e.loadedTypes[2] {
		return e.PostEligibility, nil
	}
	return nil, &NotLoadedError{edge: "PostEligibility"}
}

// ExamPaperEligibilityOrErr returns the ExamPaperEligibility value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EligibilityMasterEdges) ExamPaperEligibilityOrErr() (*ExamPapers, error) {
	if e.loadedTypes[3] {
		if e.ExamPaperEligibility == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: exampapers.Label}
		}
		return e.ExamPaperEligibility, nil
	}
	return nil, &NotLoadedError{edge: "ExamPaper_Eligibility"}
}

// ExamEligibilityOrErr returns the ExamEligibility value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EligibilityMasterEdges) ExamEligibilityOrErr() (*Exam, error) {
	if e.loadedTypes[4] {
		if e.ExamEligibility == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: exam.Label}
		}
		return e.ExamEligibility, nil
	}
	return nil, &NotLoadedError{edge: "Exam_Eligibility"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*EligibilityMaster) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case eligibilitymaster.FieldGdsService, eligibilitymaster.FieldDrivingLicenseCriteria, eligibilitymaster.FieldComputerKnowledge, eligibilitymaster.FieldLevelOfPayMatrixEligibility:
			values[i] = new(sql.NullBool)
		case eligibilitymaster.FieldID, eligibilitymaster.FieldExamCode, eligibilitymaster.FieldAgeCriteria, eligibilitymaster.FieldServiceCriteria, eligibilitymaster.FieldNotifyCode, eligibilitymaster.FieldPaperCode, eligibilitymaster.FieldMinimumMarks, eligibilitymaster.FieldCreatedById, eligibilitymaster.FieldVerifiedById, eligibilitymaster.FieldDeletedById:
			values[i] = new(sql.NullInt64)
		case eligibilitymaster.FieldExamName, eligibilitymaster.FieldPostCode, eligibilitymaster.FieldEducation, eligibilitymaster.FieldCategoryCode, eligibilitymaster.FieldPaperDescription, eligibilitymaster.FieldOrderNumber, eligibilitymaster.FieldStatus, eligibilitymaster.FieldCreatedByUserName, eligibilitymaster.FieldCreatedByEmployeeId, eligibilitymaster.FieldCreatedByDesignation, eligibilitymaster.FieldVerifiedByUserName, eligibilitymaster.FieldVerifiedByEmployeeId, eligibilitymaster.FieldVerifiedByDesignation, eligibilitymaster.FieldDeletedByUserName, eligibilitymaster.FieldDeletedByEmployeeId, eligibilitymaster.FieldDeletedByDesignation:
			values[i] = new(sql.NullString)
		case eligibilitymaster.FieldCreatedDate, eligibilitymaster.FieldVerifiedDate, eligibilitymaster.FieldDeletedDate:
			values[i] = new(sql.NullTime)
		case eligibilitymaster.ForeignKeys[0]: // employee_posts_post_eligibility
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the EligibilityMaster fields.
func (em *EligibilityMaster) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case eligibilitymaster.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			em.ID = int32(value.Int64)
		case eligibilitymaster.FieldExamCode:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field ExamCode", values[i])
			} else if value.Valid {
				em.ExamCode = int32(value.Int64)
			}
		case eligibilitymaster.FieldExamName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ExamName", values[i])
			} else if value.Valid {
				em.ExamName = value.String
			}
		case eligibilitymaster.FieldPostCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field PostCode", values[i])
			} else if value.Valid {
				em.PostCode = value.String
			}
		case eligibilitymaster.FieldGdsService:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field gdsService", values[i])
			} else if value.Valid {
				em.GdsService = value.Bool
			}
		case eligibilitymaster.FieldAgeCriteria:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field AgeCriteria", values[i])
			} else if value.Valid {
				em.AgeCriteria = int32(value.Int64)
			}
		case eligibilitymaster.FieldServiceCriteria:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field ServiceCriteria", values[i])
			} else if value.Valid {
				em.ServiceCriteria = int32(value.Int64)
			}
		case eligibilitymaster.FieldDrivingLicenseCriteria:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field DrivingLicenseCriteria", values[i])
			} else if value.Valid {
				em.DrivingLicenseCriteria = value.Bool
			}
		case eligibilitymaster.FieldComputerKnowledge:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field ComputerKnowledge", values[i])
			} else if value.Valid {
				em.ComputerKnowledge = value.Bool
			}
		case eligibilitymaster.FieldLevelOfPayMatrixEligibility:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field LevelOfPayMatrixEligibility", values[i])
			} else if value.Valid {
				em.LevelOfPayMatrixEligibility = value.Bool
			}
		case eligibilitymaster.FieldEducation:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Education", values[i])
			} else if value.Valid {
				em.Education = value.String
			}
		case eligibilitymaster.FieldNotifyCode:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field NotifyCode", values[i])
			} else if value.Valid {
				em.NotifyCode = int32(value.Int64)
			}
		case eligibilitymaster.FieldCategoryCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field CategoryCode", values[i])
			} else if value.Valid {
				em.CategoryCode = value.String
			}
		case eligibilitymaster.FieldPaperCode:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field PaperCode", values[i])
			} else if value.Valid {
				em.PaperCode = int32(value.Int64)
			}
		case eligibilitymaster.FieldPaperDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field PaperDescription", values[i])
			} else if value.Valid {
				em.PaperDescription = value.String
			}
		case eligibilitymaster.FieldMinimumMarks:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field MinimumMarks", values[i])
			} else if value.Valid {
				em.MinimumMarks = int32(value.Int64)
			}
		case eligibilitymaster.FieldOrderNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field OrderNumber", values[i])
			} else if value.Valid {
				em.OrderNumber = value.String
			}
		case eligibilitymaster.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Status", values[i])
			} else if value.Valid {
				em.Status = value.String
			}
		case eligibilitymaster.FieldCreatedById:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field CreatedById", values[i])
			} else if value.Valid {
				em.CreatedById = int32(value.Int64)
			}
		case eligibilitymaster.FieldCreatedByUserName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field CreatedByUserName", values[i])
			} else if value.Valid {
				em.CreatedByUserName = value.String
			}
		case eligibilitymaster.FieldCreatedByEmployeeId:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field CreatedByEmployeeId", values[i])
			} else if value.Valid {
				em.CreatedByEmployeeId = value.String
			}
		case eligibilitymaster.FieldCreatedByDesignation:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field CreatedByDesignation", values[i])
			} else if value.Valid {
				em.CreatedByDesignation = value.String
			}
		case eligibilitymaster.FieldCreatedDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field CreatedDate", values[i])
			} else if value.Valid {
				em.CreatedDate = value.Time
			}
		case eligibilitymaster.FieldVerifiedById:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field VerifiedById", values[i])
			} else if value.Valid {
				em.VerifiedById = value.Int64
			}
		case eligibilitymaster.FieldVerifiedByUserName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field VerifiedByUserName", values[i])
			} else if value.Valid {
				em.VerifiedByUserName = value.String
			}
		case eligibilitymaster.FieldVerifiedByEmployeeId:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field VerifiedByEmployeeId", values[i])
			} else if value.Valid {
				em.VerifiedByEmployeeId = value.String
			}
		case eligibilitymaster.FieldVerifiedByDesignation:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field VerifiedByDesignation", values[i])
			} else if value.Valid {
				em.VerifiedByDesignation = value.String
			}
		case eligibilitymaster.FieldVerifiedDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field VerifiedDate", values[i])
			} else if value.Valid {
				em.VerifiedDate = value.Time
			}
		case eligibilitymaster.FieldDeletedById:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field DeletedById", values[i])
			} else if value.Valid {
				em.DeletedById = value.Int64
			}
		case eligibilitymaster.FieldDeletedByUserName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field DeletedByUserName", values[i])
			} else if value.Valid {
				em.DeletedByUserName = value.String
			}
		case eligibilitymaster.FieldDeletedByEmployeeId:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field DeletedByEmployeeId", values[i])
			} else if value.Valid {
				em.DeletedByEmployeeId = value.String
			}
		case eligibilitymaster.FieldDeletedByDesignation:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field DeletedByDesignation", values[i])
			} else if value.Valid {
				em.DeletedByDesignation = value.String
			}
		case eligibilitymaster.FieldDeletedDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field DeletedDate", values[i])
			} else if value.Valid {
				em.DeletedDate = value.Time
			}
		case eligibilitymaster.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field employee_posts_post_eligibility", value)
			} else if value.Valid {
				em.employee_posts_post_eligibility = new(int32)
				*em.employee_posts_post_eligibility = int32(value.Int64)
			}
		default:
			em.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the EligibilityMaster.
// This includes values selected through modifiers, order, etc.
func (em *EligibilityMaster) Value(name string) (ent.Value, error) {
	return em.selectValues.Get(name)
}

// QueryNotifications queries the "Notifications" edge of the EligibilityMaster entity.
func (em *EligibilityMaster) QueryNotifications() *NotificationQuery {
	return NewEligibilityMasterClient(em.config).QueryNotifications(em)
}

// QueryCategoryEligibility queries the "CategoryEligibility" edge of the EligibilityMaster entity.
func (em *EligibilityMaster) QueryCategoryEligibility() *EmployeeCategoryQuery {
	return NewEligibilityMasterClient(em.config).QueryCategoryEligibility(em)
}

// QueryPostEligibility queries the "PostEligibility" edge of the EligibilityMaster entity.
func (em *EligibilityMaster) QueryPostEligibility() *EmployeePostsQuery {
	return NewEligibilityMasterClient(em.config).QueryPostEligibility(em)
}

// QueryExamPaperEligibility queries the "ExamPaper_Eligibility" edge of the EligibilityMaster entity.
func (em *EligibilityMaster) QueryExamPaperEligibility() *ExamPapersQuery {
	return NewEligibilityMasterClient(em.config).QueryExamPaperEligibility(em)
}

// QueryExamEligibility queries the "Exam_Eligibility" edge of the EligibilityMaster entity.
func (em *EligibilityMaster) QueryExamEligibility() *ExamQuery {
	return NewEligibilityMasterClient(em.config).QueryExamEligibility(em)
}

// Update returns a builder for updating this EligibilityMaster.
// Note that you need to call EligibilityMaster.Unwrap() before calling this method if this EligibilityMaster
// was returned from a transaction, and the transaction was committed or rolled back.
func (em *EligibilityMaster) Update() *EligibilityMasterUpdateOne {
	return NewEligibilityMasterClient(em.config).UpdateOne(em)
}

// Unwrap unwraps the EligibilityMaster entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (em *EligibilityMaster) Unwrap() *EligibilityMaster {
	_tx, ok := em.config.driver.(*txDriver)
	if !ok {
		panic("ent: EligibilityMaster is not a transactional entity")
	}
	em.config.driver = _tx.drv
	return em
}

// String implements the fmt.Stringer.
func (em *EligibilityMaster) String() string {
	var builder strings.Builder
	builder.WriteString("EligibilityMaster(")
	builder.WriteString(fmt.Sprintf("id=%v, ", em.ID))
	builder.WriteString("ExamCode=")
	builder.WriteString(fmt.Sprintf("%v", em.ExamCode))
	builder.WriteString(", ")
	builder.WriteString("ExamName=")
	builder.WriteString(em.ExamName)
	builder.WriteString(", ")
	builder.WriteString("PostCode=")
	builder.WriteString(em.PostCode)
	builder.WriteString(", ")
	builder.WriteString("gdsService=")
	builder.WriteString(fmt.Sprintf("%v", em.GdsService))
	builder.WriteString(", ")
	builder.WriteString("AgeCriteria=")
	builder.WriteString(fmt.Sprintf("%v", em.AgeCriteria))
	builder.WriteString(", ")
	builder.WriteString("ServiceCriteria=")
	builder.WriteString(fmt.Sprintf("%v", em.ServiceCriteria))
	builder.WriteString(", ")
	builder.WriteString("DrivingLicenseCriteria=")
	builder.WriteString(fmt.Sprintf("%v", em.DrivingLicenseCriteria))
	builder.WriteString(", ")
	builder.WriteString("ComputerKnowledge=")
	builder.WriteString(fmt.Sprintf("%v", em.ComputerKnowledge))
	builder.WriteString(", ")
	builder.WriteString("LevelOfPayMatrixEligibility=")
	builder.WriteString(fmt.Sprintf("%v", em.LevelOfPayMatrixEligibility))
	builder.WriteString(", ")
	builder.WriteString("Education=")
	builder.WriteString(em.Education)
	builder.WriteString(", ")
	builder.WriteString("NotifyCode=")
	builder.WriteString(fmt.Sprintf("%v", em.NotifyCode))
	builder.WriteString(", ")
	builder.WriteString("CategoryCode=")
	builder.WriteString(em.CategoryCode)
	builder.WriteString(", ")
	builder.WriteString("PaperCode=")
	builder.WriteString(fmt.Sprintf("%v", em.PaperCode))
	builder.WriteString(", ")
	builder.WriteString("PaperDescription=")
	builder.WriteString(em.PaperDescription)
	builder.WriteString(", ")
	builder.WriteString("MinimumMarks=")
	builder.WriteString(fmt.Sprintf("%v", em.MinimumMarks))
	builder.WriteString(", ")
	builder.WriteString("OrderNumber=")
	builder.WriteString(em.OrderNumber)
	builder.WriteString(", ")
	builder.WriteString("Status=")
	builder.WriteString(em.Status)
	builder.WriteString(", ")
	builder.WriteString("CreatedById=")
	builder.WriteString(fmt.Sprintf("%v", em.CreatedById))
	builder.WriteString(", ")
	builder.WriteString("CreatedByUserName=")
	builder.WriteString(em.CreatedByUserName)
	builder.WriteString(", ")
	builder.WriteString("CreatedByEmployeeId=")
	builder.WriteString(em.CreatedByEmployeeId)
	builder.WriteString(", ")
	builder.WriteString("CreatedByDesignation=")
	builder.WriteString(em.CreatedByDesignation)
	builder.WriteString(", ")
	builder.WriteString("CreatedDate=")
	builder.WriteString(em.CreatedDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("VerifiedById=")
	builder.WriteString(fmt.Sprintf("%v", em.VerifiedById))
	builder.WriteString(", ")
	builder.WriteString("VerifiedByUserName=")
	builder.WriteString(em.VerifiedByUserName)
	builder.WriteString(", ")
	builder.WriteString("VerifiedByEmployeeId=")
	builder.WriteString(em.VerifiedByEmployeeId)
	builder.WriteString(", ")
	builder.WriteString("VerifiedByDesignation=")
	builder.WriteString(em.VerifiedByDesignation)
	builder.WriteString(", ")
	builder.WriteString("VerifiedDate=")
	builder.WriteString(em.VerifiedDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("DeletedById=")
	builder.WriteString(fmt.Sprintf("%v", em.DeletedById))
	builder.WriteString(", ")
	builder.WriteString("DeletedByUserName=")
	builder.WriteString(em.DeletedByUserName)
	builder.WriteString(", ")
	builder.WriteString("DeletedByEmployeeId=")
	builder.WriteString(em.DeletedByEmployeeId)
	builder.WriteString(", ")
	builder.WriteString("DeletedByDesignation=")
	builder.WriteString(em.DeletedByDesignation)
	builder.WriteString(", ")
	builder.WriteString("DeletedDate=")
	builder.WriteString(em.DeletedDate.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// EligibilityMasters is a parsable slice of EligibilityMaster.
type EligibilityMasters []*EligibilityMaster
