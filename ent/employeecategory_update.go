// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"recruit/ent/employeecategory"
	"recruit/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// EmployeeCategoryUpdate is the builder for updating EmployeeCategory entities.
type EmployeeCategoryUpdate struct {
	config
	hooks    []Hook
	mutation *EmployeeCategoryMutation
}

// Where appends a list predicates to the EmployeeCategoryUpdate builder.
func (ecu *EmployeeCategoryUpdate) Where(ps ...predicate.EmployeeCategory) *EmployeeCategoryUpdate {
	ecu.mutation.Where(ps...)
	return ecu
}

// SetCategoryCode sets the "CategoryCode" field.
func (ecu *EmployeeCategoryUpdate) SetCategoryCode(s string) *EmployeeCategoryUpdate {
	ecu.mutation.SetCategoryCode(s)
	return ecu
}

// SetNillableCategoryCode sets the "CategoryCode" field if the given value is not nil.
func (ecu *EmployeeCategoryUpdate) SetNillableCategoryCode(s *string) *EmployeeCategoryUpdate {
	if s != nil {
		ecu.SetCategoryCode(*s)
	}
	return ecu
}

// ClearCategoryCode clears the value of the "CategoryCode" field.
func (ecu *EmployeeCategoryUpdate) ClearCategoryCode() *EmployeeCategoryUpdate {
	ecu.mutation.ClearCategoryCode()
	return ecu
}

// SetCategoryDescription sets the "CategoryDescription" field.
func (ecu *EmployeeCategoryUpdate) SetCategoryDescription(s string) *EmployeeCategoryUpdate {
	ecu.mutation.SetCategoryDescription(s)
	return ecu
}

// SetNillableCategoryDescription sets the "CategoryDescription" field if the given value is not nil.
func (ecu *EmployeeCategoryUpdate) SetNillableCategoryDescription(s *string) *EmployeeCategoryUpdate {
	if s != nil {
		ecu.SetCategoryDescription(*s)
	}
	return ecu
}

// ClearCategoryDescription clears the value of the "CategoryDescription" field.
func (ecu *EmployeeCategoryUpdate) ClearCategoryDescription() *EmployeeCategoryUpdate {
	ecu.mutation.ClearCategoryDescription()
	return ecu
}

// SetMinimumMarks sets the "MinimumMarks" field.
func (ecu *EmployeeCategoryUpdate) SetMinimumMarks(i int32) *EmployeeCategoryUpdate {
	ecu.mutation.ResetMinimumMarks()
	ecu.mutation.SetMinimumMarks(i)
	return ecu
}

// SetNillableMinimumMarks sets the "MinimumMarks" field if the given value is not nil.
func (ecu *EmployeeCategoryUpdate) SetNillableMinimumMarks(i *int32) *EmployeeCategoryUpdate {
	if i != nil {
		ecu.SetMinimumMarks(*i)
	}
	return ecu
}

// AddMinimumMarks adds i to the "MinimumMarks" field.
func (ecu *EmployeeCategoryUpdate) AddMinimumMarks(i int32) *EmployeeCategoryUpdate {
	ecu.mutation.AddMinimumMarks(i)
	return ecu
}

// ClearMinimumMarks clears the value of the "MinimumMarks" field.
func (ecu *EmployeeCategoryUpdate) ClearMinimumMarks() *EmployeeCategoryUpdate {
	ecu.mutation.ClearMinimumMarks()
	return ecu
}

// SetHallCategoryCode sets the "HallCategoryCode" field.
func (ecu *EmployeeCategoryUpdate) SetHallCategoryCode(s string) *EmployeeCategoryUpdate {
	ecu.mutation.SetHallCategoryCode(s)
	return ecu
}

// SetNillableHallCategoryCode sets the "HallCategoryCode" field if the given value is not nil.
func (ecu *EmployeeCategoryUpdate) SetNillableHallCategoryCode(s *string) *EmployeeCategoryUpdate {
	if s != nil {
		ecu.SetHallCategoryCode(*s)
	}
	return ecu
}

// ClearHallCategoryCode clears the value of the "HallCategoryCode" field.
func (ecu *EmployeeCategoryUpdate) ClearHallCategoryCode() *EmployeeCategoryUpdate {
	ecu.mutation.ClearHallCategoryCode()
	return ecu
}

// SetOrderNumber sets the "OrderNumber" field.
func (ecu *EmployeeCategoryUpdate) SetOrderNumber(s string) *EmployeeCategoryUpdate {
	ecu.mutation.SetOrderNumber(s)
	return ecu
}

// SetNillableOrderNumber sets the "OrderNumber" field if the given value is not nil.
func (ecu *EmployeeCategoryUpdate) SetNillableOrderNumber(s *string) *EmployeeCategoryUpdate {
	if s != nil {
		ecu.SetOrderNumber(*s)
	}
	return ecu
}

// ClearOrderNumber clears the value of the "OrderNumber" field.
func (ecu *EmployeeCategoryUpdate) ClearOrderNumber() *EmployeeCategoryUpdate {
	ecu.mutation.ClearOrderNumber()
	return ecu
}

// SetCreatedById sets the "CreatedById" field.
func (ecu *EmployeeCategoryUpdate) SetCreatedById(i int64) *EmployeeCategoryUpdate {
	ecu.mutation.ResetCreatedById()
	ecu.mutation.SetCreatedById(i)
	return ecu
}

// SetNillableCreatedById sets the "CreatedById" field if the given value is not nil.
func (ecu *EmployeeCategoryUpdate) SetNillableCreatedById(i *int64) *EmployeeCategoryUpdate {
	if i != nil {
		ecu.SetCreatedById(*i)
	}
	return ecu
}

// AddCreatedById adds i to the "CreatedById" field.
func (ecu *EmployeeCategoryUpdate) AddCreatedById(i int64) *EmployeeCategoryUpdate {
	ecu.mutation.AddCreatedById(i)
	return ecu
}

// ClearCreatedById clears the value of the "CreatedById" field.
func (ecu *EmployeeCategoryUpdate) ClearCreatedById() *EmployeeCategoryUpdate {
	ecu.mutation.ClearCreatedById()
	return ecu
}

// SetCreatedByUserName sets the "CreatedByUserName" field.
func (ecu *EmployeeCategoryUpdate) SetCreatedByUserName(s string) *EmployeeCategoryUpdate {
	ecu.mutation.SetCreatedByUserName(s)
	return ecu
}

// SetNillableCreatedByUserName sets the "CreatedByUserName" field if the given value is not nil.
func (ecu *EmployeeCategoryUpdate) SetNillableCreatedByUserName(s *string) *EmployeeCategoryUpdate {
	if s != nil {
		ecu.SetCreatedByUserName(*s)
	}
	return ecu
}

// ClearCreatedByUserName clears the value of the "CreatedByUserName" field.
func (ecu *EmployeeCategoryUpdate) ClearCreatedByUserName() *EmployeeCategoryUpdate {
	ecu.mutation.ClearCreatedByUserName()
	return ecu
}

// SetCreatedByEmployeeId sets the "CreatedByEmployeeId" field.
func (ecu *EmployeeCategoryUpdate) SetCreatedByEmployeeId(s string) *EmployeeCategoryUpdate {
	ecu.mutation.SetCreatedByEmployeeId(s)
	return ecu
}

// SetNillableCreatedByEmployeeId sets the "CreatedByEmployeeId" field if the given value is not nil.
func (ecu *EmployeeCategoryUpdate) SetNillableCreatedByEmployeeId(s *string) *EmployeeCategoryUpdate {
	if s != nil {
		ecu.SetCreatedByEmployeeId(*s)
	}
	return ecu
}

// ClearCreatedByEmployeeId clears the value of the "CreatedByEmployeeId" field.
func (ecu *EmployeeCategoryUpdate) ClearCreatedByEmployeeId() *EmployeeCategoryUpdate {
	ecu.mutation.ClearCreatedByEmployeeId()
	return ecu
}

// SetCreatedByDesignation sets the "CreatedByDesignation" field.
func (ecu *EmployeeCategoryUpdate) SetCreatedByDesignation(s string) *EmployeeCategoryUpdate {
	ecu.mutation.SetCreatedByDesignation(s)
	return ecu
}

// SetNillableCreatedByDesignation sets the "CreatedByDesignation" field if the given value is not nil.
func (ecu *EmployeeCategoryUpdate) SetNillableCreatedByDesignation(s *string) *EmployeeCategoryUpdate {
	if s != nil {
		ecu.SetCreatedByDesignation(*s)
	}
	return ecu
}

// ClearCreatedByDesignation clears the value of the "CreatedByDesignation" field.
func (ecu *EmployeeCategoryUpdate) ClearCreatedByDesignation() *EmployeeCategoryUpdate {
	ecu.mutation.ClearCreatedByDesignation()
	return ecu
}

// SetCreatedDate sets the "CreatedDate" field.
func (ecu *EmployeeCategoryUpdate) SetCreatedDate(t time.Time) *EmployeeCategoryUpdate {
	ecu.mutation.SetCreatedDate(t)
	return ecu
}

// SetNillableCreatedDate sets the "CreatedDate" field if the given value is not nil.
func (ecu *EmployeeCategoryUpdate) SetNillableCreatedDate(t *time.Time) *EmployeeCategoryUpdate {
	if t != nil {
		ecu.SetCreatedDate(*t)
	}
	return ecu
}

// ClearCreatedDate clears the value of the "CreatedDate" field.
func (ecu *EmployeeCategoryUpdate) ClearCreatedDate() *EmployeeCategoryUpdate {
	ecu.mutation.ClearCreatedDate()
	return ecu
}

// SetVerifiedById sets the "VerifiedById" field.
func (ecu *EmployeeCategoryUpdate) SetVerifiedById(i int64) *EmployeeCategoryUpdate {
	ecu.mutation.ResetVerifiedById()
	ecu.mutation.SetVerifiedById(i)
	return ecu
}

// SetNillableVerifiedById sets the "VerifiedById" field if the given value is not nil.
func (ecu *EmployeeCategoryUpdate) SetNillableVerifiedById(i *int64) *EmployeeCategoryUpdate {
	if i != nil {
		ecu.SetVerifiedById(*i)
	}
	return ecu
}

// AddVerifiedById adds i to the "VerifiedById" field.
func (ecu *EmployeeCategoryUpdate) AddVerifiedById(i int64) *EmployeeCategoryUpdate {
	ecu.mutation.AddVerifiedById(i)
	return ecu
}

// ClearVerifiedById clears the value of the "VerifiedById" field.
func (ecu *EmployeeCategoryUpdate) ClearVerifiedById() *EmployeeCategoryUpdate {
	ecu.mutation.ClearVerifiedById()
	return ecu
}

// SetVerifiedByUserName sets the "VerifiedByUserName" field.
func (ecu *EmployeeCategoryUpdate) SetVerifiedByUserName(s string) *EmployeeCategoryUpdate {
	ecu.mutation.SetVerifiedByUserName(s)
	return ecu
}

// SetNillableVerifiedByUserName sets the "VerifiedByUserName" field if the given value is not nil.
func (ecu *EmployeeCategoryUpdate) SetNillableVerifiedByUserName(s *string) *EmployeeCategoryUpdate {
	if s != nil {
		ecu.SetVerifiedByUserName(*s)
	}
	return ecu
}

// ClearVerifiedByUserName clears the value of the "VerifiedByUserName" field.
func (ecu *EmployeeCategoryUpdate) ClearVerifiedByUserName() *EmployeeCategoryUpdate {
	ecu.mutation.ClearVerifiedByUserName()
	return ecu
}

// SetVerifiedByEmployeeId sets the "VerifiedByEmployeeId" field.
func (ecu *EmployeeCategoryUpdate) SetVerifiedByEmployeeId(s string) *EmployeeCategoryUpdate {
	ecu.mutation.SetVerifiedByEmployeeId(s)
	return ecu
}

// SetNillableVerifiedByEmployeeId sets the "VerifiedByEmployeeId" field if the given value is not nil.
func (ecu *EmployeeCategoryUpdate) SetNillableVerifiedByEmployeeId(s *string) *EmployeeCategoryUpdate {
	if s != nil {
		ecu.SetVerifiedByEmployeeId(*s)
	}
	return ecu
}

// ClearVerifiedByEmployeeId clears the value of the "VerifiedByEmployeeId" field.
func (ecu *EmployeeCategoryUpdate) ClearVerifiedByEmployeeId() *EmployeeCategoryUpdate {
	ecu.mutation.ClearVerifiedByEmployeeId()
	return ecu
}

// SetVerifiedByDesignation sets the "VerifiedByDesignation" field.
func (ecu *EmployeeCategoryUpdate) SetVerifiedByDesignation(s string) *EmployeeCategoryUpdate {
	ecu.mutation.SetVerifiedByDesignation(s)
	return ecu
}

// SetNillableVerifiedByDesignation sets the "VerifiedByDesignation" field if the given value is not nil.
func (ecu *EmployeeCategoryUpdate) SetNillableVerifiedByDesignation(s *string) *EmployeeCategoryUpdate {
	if s != nil {
		ecu.SetVerifiedByDesignation(*s)
	}
	return ecu
}

// ClearVerifiedByDesignation clears the value of the "VerifiedByDesignation" field.
func (ecu *EmployeeCategoryUpdate) ClearVerifiedByDesignation() *EmployeeCategoryUpdate {
	ecu.mutation.ClearVerifiedByDesignation()
	return ecu
}

// SetVerifiedDate sets the "VerifiedDate" field.
func (ecu *EmployeeCategoryUpdate) SetVerifiedDate(t time.Time) *EmployeeCategoryUpdate {
	ecu.mutation.SetVerifiedDate(t)
	return ecu
}

// SetNillableVerifiedDate sets the "VerifiedDate" field if the given value is not nil.
func (ecu *EmployeeCategoryUpdate) SetNillableVerifiedDate(t *time.Time) *EmployeeCategoryUpdate {
	if t != nil {
		ecu.SetVerifiedDate(*t)
	}
	return ecu
}

// ClearVerifiedDate clears the value of the "VerifiedDate" field.
func (ecu *EmployeeCategoryUpdate) ClearVerifiedDate() *EmployeeCategoryUpdate {
	ecu.mutation.ClearVerifiedDate()
	return ecu
}

// SetStatus sets the "Status" field.
func (ecu *EmployeeCategoryUpdate) SetStatus(s string) *EmployeeCategoryUpdate {
	ecu.mutation.SetStatus(s)
	return ecu
}

// SetNillableStatus sets the "Status" field if the given value is not nil.
func (ecu *EmployeeCategoryUpdate) SetNillableStatus(s *string) *EmployeeCategoryUpdate {
	if s != nil {
		ecu.SetStatus(*s)
	}
	return ecu
}

// ClearStatus clears the value of the "Status" field.
func (ecu *EmployeeCategoryUpdate) ClearStatus() *EmployeeCategoryUpdate {
	ecu.mutation.ClearStatus()
	return ecu
}

// SetDeletedById sets the "DeletedById" field.
func (ecu *EmployeeCategoryUpdate) SetDeletedById(i int64) *EmployeeCategoryUpdate {
	ecu.mutation.ResetDeletedById()
	ecu.mutation.SetDeletedById(i)
	return ecu
}

// SetNillableDeletedById sets the "DeletedById" field if the given value is not nil.
func (ecu *EmployeeCategoryUpdate) SetNillableDeletedById(i *int64) *EmployeeCategoryUpdate {
	if i != nil {
		ecu.SetDeletedById(*i)
	}
	return ecu
}

// AddDeletedById adds i to the "DeletedById" field.
func (ecu *EmployeeCategoryUpdate) AddDeletedById(i int64) *EmployeeCategoryUpdate {
	ecu.mutation.AddDeletedById(i)
	return ecu
}

// ClearDeletedById clears the value of the "DeletedById" field.
func (ecu *EmployeeCategoryUpdate) ClearDeletedById() *EmployeeCategoryUpdate {
	ecu.mutation.ClearDeletedById()
	return ecu
}

// SetDeletedByUserName sets the "DeletedByUserName" field.
func (ecu *EmployeeCategoryUpdate) SetDeletedByUserName(s string) *EmployeeCategoryUpdate {
	ecu.mutation.SetDeletedByUserName(s)
	return ecu
}

// SetNillableDeletedByUserName sets the "DeletedByUserName" field if the given value is not nil.
func (ecu *EmployeeCategoryUpdate) SetNillableDeletedByUserName(s *string) *EmployeeCategoryUpdate {
	if s != nil {
		ecu.SetDeletedByUserName(*s)
	}
	return ecu
}

// ClearDeletedByUserName clears the value of the "DeletedByUserName" field.
func (ecu *EmployeeCategoryUpdate) ClearDeletedByUserName() *EmployeeCategoryUpdate {
	ecu.mutation.ClearDeletedByUserName()
	return ecu
}

// SetDeletedByEmployeeId sets the "DeletedByEmployeeId" field.
func (ecu *EmployeeCategoryUpdate) SetDeletedByEmployeeId(s string) *EmployeeCategoryUpdate {
	ecu.mutation.SetDeletedByEmployeeId(s)
	return ecu
}

// SetNillableDeletedByEmployeeId sets the "DeletedByEmployeeId" field if the given value is not nil.
func (ecu *EmployeeCategoryUpdate) SetNillableDeletedByEmployeeId(s *string) *EmployeeCategoryUpdate {
	if s != nil {
		ecu.SetDeletedByEmployeeId(*s)
	}
	return ecu
}

// ClearDeletedByEmployeeId clears the value of the "DeletedByEmployeeId" field.
func (ecu *EmployeeCategoryUpdate) ClearDeletedByEmployeeId() *EmployeeCategoryUpdate {
	ecu.mutation.ClearDeletedByEmployeeId()
	return ecu
}

// SetDeletedByDesignation sets the "DeletedByDesignation" field.
func (ecu *EmployeeCategoryUpdate) SetDeletedByDesignation(s string) *EmployeeCategoryUpdate {
	ecu.mutation.SetDeletedByDesignation(s)
	return ecu
}

// SetNillableDeletedByDesignation sets the "DeletedByDesignation" field if the given value is not nil.
func (ecu *EmployeeCategoryUpdate) SetNillableDeletedByDesignation(s *string) *EmployeeCategoryUpdate {
	if s != nil {
		ecu.SetDeletedByDesignation(*s)
	}
	return ecu
}

// ClearDeletedByDesignation clears the value of the "DeletedByDesignation" field.
func (ecu *EmployeeCategoryUpdate) ClearDeletedByDesignation() *EmployeeCategoryUpdate {
	ecu.mutation.ClearDeletedByDesignation()
	return ecu
}

// SetDeletedDate sets the "DeletedDate" field.
func (ecu *EmployeeCategoryUpdate) SetDeletedDate(t time.Time) *EmployeeCategoryUpdate {
	ecu.mutation.SetDeletedDate(t)
	return ecu
}

// SetNillableDeletedDate sets the "DeletedDate" field if the given value is not nil.
func (ecu *EmployeeCategoryUpdate) SetNillableDeletedDate(t *time.Time) *EmployeeCategoryUpdate {
	if t != nil {
		ecu.SetDeletedDate(*t)
	}
	return ecu
}

// ClearDeletedDate clears the value of the "DeletedDate" field.
func (ecu *EmployeeCategoryUpdate) ClearDeletedDate() *EmployeeCategoryUpdate {
	ecu.mutation.ClearDeletedDate()
	return ecu
}

// SetExamconfigurationExamcode sets the "ExamconfigurationExamcode" field.
func (ecu *EmployeeCategoryUpdate) SetExamconfigurationExamcode(i int32) *EmployeeCategoryUpdate {
	ecu.mutation.ResetExamconfigurationExamcode()
	ecu.mutation.SetExamconfigurationExamcode(i)
	return ecu
}

// SetNillableExamconfigurationExamcode sets the "ExamconfigurationExamcode" field if the given value is not nil.
func (ecu *EmployeeCategoryUpdate) SetNillableExamconfigurationExamcode(i *int32) *EmployeeCategoryUpdate {
	if i != nil {
		ecu.SetExamconfigurationExamcode(*i)
	}
	return ecu
}

// AddExamconfigurationExamcode adds i to the "ExamconfigurationExamcode" field.
func (ecu *EmployeeCategoryUpdate) AddExamconfigurationExamcode(i int32) *EmployeeCategoryUpdate {
	ecu.mutation.AddExamconfigurationExamcode(i)
	return ecu
}

// ClearExamconfigurationExamcode clears the value of the "ExamconfigurationExamcode" field.
func (ecu *EmployeeCategoryUpdate) ClearExamconfigurationExamcode() *EmployeeCategoryUpdate {
	ecu.mutation.ClearExamconfigurationExamcode()
	return ecu
}

// SetExamShortDescription sets the "ExamShortDescription" field.
func (ecu *EmployeeCategoryUpdate) SetExamShortDescription(s string) *EmployeeCategoryUpdate {
	ecu.mutation.SetExamShortDescription(s)
	return ecu
}

// SetNillableExamShortDescription sets the "ExamShortDescription" field if the given value is not nil.
func (ecu *EmployeeCategoryUpdate) SetNillableExamShortDescription(s *string) *EmployeeCategoryUpdate {
	if s != nil {
		ecu.SetExamShortDescription(*s)
	}
	return ecu
}

// ClearExamShortDescription clears the value of the "ExamShortDescription" field.
func (ecu *EmployeeCategoryUpdate) ClearExamShortDescription() *EmployeeCategoryUpdate {
	ecu.mutation.ClearExamShortDescription()
	return ecu
}

// SetExamLongDescription sets the "ExamLongDescription" field.
func (ecu *EmployeeCategoryUpdate) SetExamLongDescription(s string) *EmployeeCategoryUpdate {
	ecu.mutation.SetExamLongDescription(s)
	return ecu
}

// SetNillableExamLongDescription sets the "ExamLongDescription" field if the given value is not nil.
func (ecu *EmployeeCategoryUpdate) SetNillableExamLongDescription(s *string) *EmployeeCategoryUpdate {
	if s != nil {
		ecu.SetExamLongDescription(*s)
	}
	return ecu
}

// ClearExamLongDescription clears the value of the "ExamLongDescription" field.
func (ecu *EmployeeCategoryUpdate) ClearExamLongDescription() *EmployeeCategoryUpdate {
	ecu.mutation.ClearExamLongDescription()
	return ecu
}

// SetExamPaperCodePaperCode sets the "ExamPaperCode_paperCode" field.
func (ecu *EmployeeCategoryUpdate) SetExamPaperCodePaperCode(i int32) *EmployeeCategoryUpdate {
	ecu.mutation.ResetExamPaperCodePaperCode()
	ecu.mutation.SetExamPaperCodePaperCode(i)
	return ecu
}

// SetNillableExamPaperCodePaperCode sets the "ExamPaperCode_paperCode" field if the given value is not nil.
func (ecu *EmployeeCategoryUpdate) SetNillableExamPaperCodePaperCode(i *int32) *EmployeeCategoryUpdate {
	if i != nil {
		ecu.SetExamPaperCodePaperCode(*i)
	}
	return ecu
}

// AddExamPaperCodePaperCode adds i to the "ExamPaperCode_paperCode" field.
func (ecu *EmployeeCategoryUpdate) AddExamPaperCodePaperCode(i int32) *EmployeeCategoryUpdate {
	ecu.mutation.AddExamPaperCodePaperCode(i)
	return ecu
}

// ClearExamPaperCodePaperCode clears the value of the "ExamPaperCode_paperCode" field.
func (ecu *EmployeeCategoryUpdate) ClearExamPaperCodePaperCode() *EmployeeCategoryUpdate {
	ecu.mutation.ClearExamPaperCodePaperCode()
	return ecu
}

// SetEmployeeCategoryCategoryID sets the "EmployeeCategory_categoryID" field.
func (ecu *EmployeeCategoryUpdate) SetEmployeeCategoryCategoryID(i int32) *EmployeeCategoryUpdate {
	ecu.mutation.ResetEmployeeCategoryCategoryID()
	ecu.mutation.SetEmployeeCategoryCategoryID(i)
	return ecu
}

// SetNillableEmployeeCategoryCategoryID sets the "EmployeeCategory_categoryID" field if the given value is not nil.
func (ecu *EmployeeCategoryUpdate) SetNillableEmployeeCategoryCategoryID(i *int32) *EmployeeCategoryUpdate {
	if i != nil {
		ecu.SetEmployeeCategoryCategoryID(*i)
	}
	return ecu
}

// AddEmployeeCategoryCategoryID adds i to the "EmployeeCategory_categoryID" field.
func (ecu *EmployeeCategoryUpdate) AddEmployeeCategoryCategoryID(i int32) *EmployeeCategoryUpdate {
	ecu.mutation.AddEmployeeCategoryCategoryID(i)
	return ecu
}

// ClearEmployeeCategoryCategoryID clears the value of the "EmployeeCategory_categoryID" field.
func (ecu *EmployeeCategoryUpdate) ClearEmployeeCategoryCategoryID() *EmployeeCategoryUpdate {
	ecu.mutation.ClearEmployeeCategoryCategoryID()
	return ecu
}

// Mutation returns the EmployeeCategoryMutation object of the builder.
func (ecu *EmployeeCategoryUpdate) Mutation() *EmployeeCategoryMutation {
	return ecu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ecu *EmployeeCategoryUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ecu.sqlSave, ecu.mutation, ecu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ecu *EmployeeCategoryUpdate) SaveX(ctx context.Context) int {
	affected, err := ecu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ecu *EmployeeCategoryUpdate) Exec(ctx context.Context) error {
	_, err := ecu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ecu *EmployeeCategoryUpdate) ExecX(ctx context.Context) {
	if err := ecu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ecu *EmployeeCategoryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(employeecategory.Table, employeecategory.Columns, sqlgraph.NewFieldSpec(employeecategory.FieldID, field.TypeInt32))
	if ps := ecu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ecu.mutation.CategoryCode(); ok {
		_spec.SetField(employeecategory.FieldCategoryCode, field.TypeString, value)
	}
	if ecu.mutation.CategoryCodeCleared() {
		_spec.ClearField(employeecategory.FieldCategoryCode, field.TypeString)
	}
	if value, ok := ecu.mutation.CategoryDescription(); ok {
		_spec.SetField(employeecategory.FieldCategoryDescription, field.TypeString, value)
	}
	if ecu.mutation.CategoryDescriptionCleared() {
		_spec.ClearField(employeecategory.FieldCategoryDescription, field.TypeString)
	}
	if value, ok := ecu.mutation.MinimumMarks(); ok {
		_spec.SetField(employeecategory.FieldMinimumMarks, field.TypeInt32, value)
	}
	if value, ok := ecu.mutation.AddedMinimumMarks(); ok {
		_spec.AddField(employeecategory.FieldMinimumMarks, field.TypeInt32, value)
	}
	if ecu.mutation.MinimumMarksCleared() {
		_spec.ClearField(employeecategory.FieldMinimumMarks, field.TypeInt32)
	}
	if value, ok := ecu.mutation.HallCategoryCode(); ok {
		_spec.SetField(employeecategory.FieldHallCategoryCode, field.TypeString, value)
	}
	if ecu.mutation.HallCategoryCodeCleared() {
		_spec.ClearField(employeecategory.FieldHallCategoryCode, field.TypeString)
	}
	if value, ok := ecu.mutation.OrderNumber(); ok {
		_spec.SetField(employeecategory.FieldOrderNumber, field.TypeString, value)
	}
	if ecu.mutation.OrderNumberCleared() {
		_spec.ClearField(employeecategory.FieldOrderNumber, field.TypeString)
	}
	if value, ok := ecu.mutation.CreatedById(); ok {
		_spec.SetField(employeecategory.FieldCreatedById, field.TypeInt64, value)
	}
	if value, ok := ecu.mutation.AddedCreatedById(); ok {
		_spec.AddField(employeecategory.FieldCreatedById, field.TypeInt64, value)
	}
	if ecu.mutation.CreatedByIdCleared() {
		_spec.ClearField(employeecategory.FieldCreatedById, field.TypeInt64)
	}
	if value, ok := ecu.mutation.CreatedByUserName(); ok {
		_spec.SetField(employeecategory.FieldCreatedByUserName, field.TypeString, value)
	}
	if ecu.mutation.CreatedByUserNameCleared() {
		_spec.ClearField(employeecategory.FieldCreatedByUserName, field.TypeString)
	}
	if value, ok := ecu.mutation.CreatedByEmployeeId(); ok {
		_spec.SetField(employeecategory.FieldCreatedByEmployeeId, field.TypeString, value)
	}
	if ecu.mutation.CreatedByEmployeeIdCleared() {
		_spec.ClearField(employeecategory.FieldCreatedByEmployeeId, field.TypeString)
	}
	if value, ok := ecu.mutation.CreatedByDesignation(); ok {
		_spec.SetField(employeecategory.FieldCreatedByDesignation, field.TypeString, value)
	}
	if ecu.mutation.CreatedByDesignationCleared() {
		_spec.ClearField(employeecategory.FieldCreatedByDesignation, field.TypeString)
	}
	if value, ok := ecu.mutation.CreatedDate(); ok {
		_spec.SetField(employeecategory.FieldCreatedDate, field.TypeTime, value)
	}
	if ecu.mutation.CreatedDateCleared() {
		_spec.ClearField(employeecategory.FieldCreatedDate, field.TypeTime)
	}
	if value, ok := ecu.mutation.VerifiedById(); ok {
		_spec.SetField(employeecategory.FieldVerifiedById, field.TypeInt64, value)
	}
	if value, ok := ecu.mutation.AddedVerifiedById(); ok {
		_spec.AddField(employeecategory.FieldVerifiedById, field.TypeInt64, value)
	}
	if ecu.mutation.VerifiedByIdCleared() {
		_spec.ClearField(employeecategory.FieldVerifiedById, field.TypeInt64)
	}
	if value, ok := ecu.mutation.VerifiedByUserName(); ok {
		_spec.SetField(employeecategory.FieldVerifiedByUserName, field.TypeString, value)
	}
	if ecu.mutation.VerifiedByUserNameCleared() {
		_spec.ClearField(employeecategory.FieldVerifiedByUserName, field.TypeString)
	}
	if value, ok := ecu.mutation.VerifiedByEmployeeId(); ok {
		_spec.SetField(employeecategory.FieldVerifiedByEmployeeId, field.TypeString, value)
	}
	if ecu.mutation.VerifiedByEmployeeIdCleared() {
		_spec.ClearField(employeecategory.FieldVerifiedByEmployeeId, field.TypeString)
	}
	if value, ok := ecu.mutation.VerifiedByDesignation(); ok {
		_spec.SetField(employeecategory.FieldVerifiedByDesignation, field.TypeString, value)
	}
	if ecu.mutation.VerifiedByDesignationCleared() {
		_spec.ClearField(employeecategory.FieldVerifiedByDesignation, field.TypeString)
	}
	if value, ok := ecu.mutation.VerifiedDate(); ok {
		_spec.SetField(employeecategory.FieldVerifiedDate, field.TypeTime, value)
	}
	if ecu.mutation.VerifiedDateCleared() {
		_spec.ClearField(employeecategory.FieldVerifiedDate, field.TypeTime)
	}
	if value, ok := ecu.mutation.Status(); ok {
		_spec.SetField(employeecategory.FieldStatus, field.TypeString, value)
	}
	if ecu.mutation.StatusCleared() {
		_spec.ClearField(employeecategory.FieldStatus, field.TypeString)
	}
	if value, ok := ecu.mutation.DeletedById(); ok {
		_spec.SetField(employeecategory.FieldDeletedById, field.TypeInt64, value)
	}
	if value, ok := ecu.mutation.AddedDeletedById(); ok {
		_spec.AddField(employeecategory.FieldDeletedById, field.TypeInt64, value)
	}
	if ecu.mutation.DeletedByIdCleared() {
		_spec.ClearField(employeecategory.FieldDeletedById, field.TypeInt64)
	}
	if value, ok := ecu.mutation.DeletedByUserName(); ok {
		_spec.SetField(employeecategory.FieldDeletedByUserName, field.TypeString, value)
	}
	if ecu.mutation.DeletedByUserNameCleared() {
		_spec.ClearField(employeecategory.FieldDeletedByUserName, field.TypeString)
	}
	if value, ok := ecu.mutation.DeletedByEmployeeId(); ok {
		_spec.SetField(employeecategory.FieldDeletedByEmployeeId, field.TypeString, value)
	}
	if ecu.mutation.DeletedByEmployeeIdCleared() {
		_spec.ClearField(employeecategory.FieldDeletedByEmployeeId, field.TypeString)
	}
	if value, ok := ecu.mutation.DeletedByDesignation(); ok {
		_spec.SetField(employeecategory.FieldDeletedByDesignation, field.TypeString, value)
	}
	if ecu.mutation.DeletedByDesignationCleared() {
		_spec.ClearField(employeecategory.FieldDeletedByDesignation, field.TypeString)
	}
	if value, ok := ecu.mutation.DeletedDate(); ok {
		_spec.SetField(employeecategory.FieldDeletedDate, field.TypeTime, value)
	}
	if ecu.mutation.DeletedDateCleared() {
		_spec.ClearField(employeecategory.FieldDeletedDate, field.TypeTime)
	}
	if value, ok := ecu.mutation.ExamconfigurationExamcode(); ok {
		_spec.SetField(employeecategory.FieldExamconfigurationExamcode, field.TypeInt32, value)
	}
	if value, ok := ecu.mutation.AddedExamconfigurationExamcode(); ok {
		_spec.AddField(employeecategory.FieldExamconfigurationExamcode, field.TypeInt32, value)
	}
	if ecu.mutation.ExamconfigurationExamcodeCleared() {
		_spec.ClearField(employeecategory.FieldExamconfigurationExamcode, field.TypeInt32)
	}
	if value, ok := ecu.mutation.ExamShortDescription(); ok {
		_spec.SetField(employeecategory.FieldExamShortDescription, field.TypeString, value)
	}
	if ecu.mutation.ExamShortDescriptionCleared() {
		_spec.ClearField(employeecategory.FieldExamShortDescription, field.TypeString)
	}
	if value, ok := ecu.mutation.ExamLongDescription(); ok {
		_spec.SetField(employeecategory.FieldExamLongDescription, field.TypeString, value)
	}
	if ecu.mutation.ExamLongDescriptionCleared() {
		_spec.ClearField(employeecategory.FieldExamLongDescription, field.TypeString)
	}
	if value, ok := ecu.mutation.ExamPaperCodePaperCode(); ok {
		_spec.SetField(employeecategory.FieldExamPaperCodePaperCode, field.TypeInt32, value)
	}
	if value, ok := ecu.mutation.AddedExamPaperCodePaperCode(); ok {
		_spec.AddField(employeecategory.FieldExamPaperCodePaperCode, field.TypeInt32, value)
	}
	if ecu.mutation.ExamPaperCodePaperCodeCleared() {
		_spec.ClearField(employeecategory.FieldExamPaperCodePaperCode, field.TypeInt32)
	}
	if value, ok := ecu.mutation.EmployeeCategoryCategoryID(); ok {
		_spec.SetField(employeecategory.FieldEmployeeCategoryCategoryID, field.TypeInt32, value)
	}
	if value, ok := ecu.mutation.AddedEmployeeCategoryCategoryID(); ok {
		_spec.AddField(employeecategory.FieldEmployeeCategoryCategoryID, field.TypeInt32, value)
	}
	if ecu.mutation.EmployeeCategoryCategoryIDCleared() {
		_spec.ClearField(employeecategory.FieldEmployeeCategoryCategoryID, field.TypeInt32)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ecu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{employeecategory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ecu.mutation.done = true
	return n, nil
}

// EmployeeCategoryUpdateOne is the builder for updating a single EmployeeCategory entity.
type EmployeeCategoryUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *EmployeeCategoryMutation
}

// SetCategoryCode sets the "CategoryCode" field.
func (ecuo *EmployeeCategoryUpdateOne) SetCategoryCode(s string) *EmployeeCategoryUpdateOne {
	ecuo.mutation.SetCategoryCode(s)
	return ecuo
}

// SetNillableCategoryCode sets the "CategoryCode" field if the given value is not nil.
func (ecuo *EmployeeCategoryUpdateOne) SetNillableCategoryCode(s *string) *EmployeeCategoryUpdateOne {
	if s != nil {
		ecuo.SetCategoryCode(*s)
	}
	return ecuo
}

// ClearCategoryCode clears the value of the "CategoryCode" field.
func (ecuo *EmployeeCategoryUpdateOne) ClearCategoryCode() *EmployeeCategoryUpdateOne {
	ecuo.mutation.ClearCategoryCode()
	return ecuo
}

// SetCategoryDescription sets the "CategoryDescription" field.
func (ecuo *EmployeeCategoryUpdateOne) SetCategoryDescription(s string) *EmployeeCategoryUpdateOne {
	ecuo.mutation.SetCategoryDescription(s)
	return ecuo
}

// SetNillableCategoryDescription sets the "CategoryDescription" field if the given value is not nil.
func (ecuo *EmployeeCategoryUpdateOne) SetNillableCategoryDescription(s *string) *EmployeeCategoryUpdateOne {
	if s != nil {
		ecuo.SetCategoryDescription(*s)
	}
	return ecuo
}

// ClearCategoryDescription clears the value of the "CategoryDescription" field.
func (ecuo *EmployeeCategoryUpdateOne) ClearCategoryDescription() *EmployeeCategoryUpdateOne {
	ecuo.mutation.ClearCategoryDescription()
	return ecuo
}

// SetMinimumMarks sets the "MinimumMarks" field.
func (ecuo *EmployeeCategoryUpdateOne) SetMinimumMarks(i int32) *EmployeeCategoryUpdateOne {
	ecuo.mutation.ResetMinimumMarks()
	ecuo.mutation.SetMinimumMarks(i)
	return ecuo
}

// SetNillableMinimumMarks sets the "MinimumMarks" field if the given value is not nil.
func (ecuo *EmployeeCategoryUpdateOne) SetNillableMinimumMarks(i *int32) *EmployeeCategoryUpdateOne {
	if i != nil {
		ecuo.SetMinimumMarks(*i)
	}
	return ecuo
}

// AddMinimumMarks adds i to the "MinimumMarks" field.
func (ecuo *EmployeeCategoryUpdateOne) AddMinimumMarks(i int32) *EmployeeCategoryUpdateOne {
	ecuo.mutation.AddMinimumMarks(i)
	return ecuo
}

// ClearMinimumMarks clears the value of the "MinimumMarks" field.
func (ecuo *EmployeeCategoryUpdateOne) ClearMinimumMarks() *EmployeeCategoryUpdateOne {
	ecuo.mutation.ClearMinimumMarks()
	return ecuo
}

// SetHallCategoryCode sets the "HallCategoryCode" field.
func (ecuo *EmployeeCategoryUpdateOne) SetHallCategoryCode(s string) *EmployeeCategoryUpdateOne {
	ecuo.mutation.SetHallCategoryCode(s)
	return ecuo
}

// SetNillableHallCategoryCode sets the "HallCategoryCode" field if the given value is not nil.
func (ecuo *EmployeeCategoryUpdateOne) SetNillableHallCategoryCode(s *string) *EmployeeCategoryUpdateOne {
	if s != nil {
		ecuo.SetHallCategoryCode(*s)
	}
	return ecuo
}

// ClearHallCategoryCode clears the value of the "HallCategoryCode" field.
func (ecuo *EmployeeCategoryUpdateOne) ClearHallCategoryCode() *EmployeeCategoryUpdateOne {
	ecuo.mutation.ClearHallCategoryCode()
	return ecuo
}

// SetOrderNumber sets the "OrderNumber" field.
func (ecuo *EmployeeCategoryUpdateOne) SetOrderNumber(s string) *EmployeeCategoryUpdateOne {
	ecuo.mutation.SetOrderNumber(s)
	return ecuo
}

// SetNillableOrderNumber sets the "OrderNumber" field if the given value is not nil.
func (ecuo *EmployeeCategoryUpdateOne) SetNillableOrderNumber(s *string) *EmployeeCategoryUpdateOne {
	if s != nil {
		ecuo.SetOrderNumber(*s)
	}
	return ecuo
}

// ClearOrderNumber clears the value of the "OrderNumber" field.
func (ecuo *EmployeeCategoryUpdateOne) ClearOrderNumber() *EmployeeCategoryUpdateOne {
	ecuo.mutation.ClearOrderNumber()
	return ecuo
}

// SetCreatedById sets the "CreatedById" field.
func (ecuo *EmployeeCategoryUpdateOne) SetCreatedById(i int64) *EmployeeCategoryUpdateOne {
	ecuo.mutation.ResetCreatedById()
	ecuo.mutation.SetCreatedById(i)
	return ecuo
}

// SetNillableCreatedById sets the "CreatedById" field if the given value is not nil.
func (ecuo *EmployeeCategoryUpdateOne) SetNillableCreatedById(i *int64) *EmployeeCategoryUpdateOne {
	if i != nil {
		ecuo.SetCreatedById(*i)
	}
	return ecuo
}

// AddCreatedById adds i to the "CreatedById" field.
func (ecuo *EmployeeCategoryUpdateOne) AddCreatedById(i int64) *EmployeeCategoryUpdateOne {
	ecuo.mutation.AddCreatedById(i)
	return ecuo
}

// ClearCreatedById clears the value of the "CreatedById" field.
func (ecuo *EmployeeCategoryUpdateOne) ClearCreatedById() *EmployeeCategoryUpdateOne {
	ecuo.mutation.ClearCreatedById()
	return ecuo
}

// SetCreatedByUserName sets the "CreatedByUserName" field.
func (ecuo *EmployeeCategoryUpdateOne) SetCreatedByUserName(s string) *EmployeeCategoryUpdateOne {
	ecuo.mutation.SetCreatedByUserName(s)
	return ecuo
}

// SetNillableCreatedByUserName sets the "CreatedByUserName" field if the given value is not nil.
func (ecuo *EmployeeCategoryUpdateOne) SetNillableCreatedByUserName(s *string) *EmployeeCategoryUpdateOne {
	if s != nil {
		ecuo.SetCreatedByUserName(*s)
	}
	return ecuo
}

// ClearCreatedByUserName clears the value of the "CreatedByUserName" field.
func (ecuo *EmployeeCategoryUpdateOne) ClearCreatedByUserName() *EmployeeCategoryUpdateOne {
	ecuo.mutation.ClearCreatedByUserName()
	return ecuo
}

// SetCreatedByEmployeeId sets the "CreatedByEmployeeId" field.
func (ecuo *EmployeeCategoryUpdateOne) SetCreatedByEmployeeId(s string) *EmployeeCategoryUpdateOne {
	ecuo.mutation.SetCreatedByEmployeeId(s)
	return ecuo
}

// SetNillableCreatedByEmployeeId sets the "CreatedByEmployeeId" field if the given value is not nil.
func (ecuo *EmployeeCategoryUpdateOne) SetNillableCreatedByEmployeeId(s *string) *EmployeeCategoryUpdateOne {
	if s != nil {
		ecuo.SetCreatedByEmployeeId(*s)
	}
	return ecuo
}

// ClearCreatedByEmployeeId clears the value of the "CreatedByEmployeeId" field.
func (ecuo *EmployeeCategoryUpdateOne) ClearCreatedByEmployeeId() *EmployeeCategoryUpdateOne {
	ecuo.mutation.ClearCreatedByEmployeeId()
	return ecuo
}

// SetCreatedByDesignation sets the "CreatedByDesignation" field.
func (ecuo *EmployeeCategoryUpdateOne) SetCreatedByDesignation(s string) *EmployeeCategoryUpdateOne {
	ecuo.mutation.SetCreatedByDesignation(s)
	return ecuo
}

// SetNillableCreatedByDesignation sets the "CreatedByDesignation" field if the given value is not nil.
func (ecuo *EmployeeCategoryUpdateOne) SetNillableCreatedByDesignation(s *string) *EmployeeCategoryUpdateOne {
	if s != nil {
		ecuo.SetCreatedByDesignation(*s)
	}
	return ecuo
}

// ClearCreatedByDesignation clears the value of the "CreatedByDesignation" field.
func (ecuo *EmployeeCategoryUpdateOne) ClearCreatedByDesignation() *EmployeeCategoryUpdateOne {
	ecuo.mutation.ClearCreatedByDesignation()
	return ecuo
}

// SetCreatedDate sets the "CreatedDate" field.
func (ecuo *EmployeeCategoryUpdateOne) SetCreatedDate(t time.Time) *EmployeeCategoryUpdateOne {
	ecuo.mutation.SetCreatedDate(t)
	return ecuo
}

// SetNillableCreatedDate sets the "CreatedDate" field if the given value is not nil.
func (ecuo *EmployeeCategoryUpdateOne) SetNillableCreatedDate(t *time.Time) *EmployeeCategoryUpdateOne {
	if t != nil {
		ecuo.SetCreatedDate(*t)
	}
	return ecuo
}

// ClearCreatedDate clears the value of the "CreatedDate" field.
func (ecuo *EmployeeCategoryUpdateOne) ClearCreatedDate() *EmployeeCategoryUpdateOne {
	ecuo.mutation.ClearCreatedDate()
	return ecuo
}

// SetVerifiedById sets the "VerifiedById" field.
func (ecuo *EmployeeCategoryUpdateOne) SetVerifiedById(i int64) *EmployeeCategoryUpdateOne {
	ecuo.mutation.ResetVerifiedById()
	ecuo.mutation.SetVerifiedById(i)
	return ecuo
}

// SetNillableVerifiedById sets the "VerifiedById" field if the given value is not nil.
func (ecuo *EmployeeCategoryUpdateOne) SetNillableVerifiedById(i *int64) *EmployeeCategoryUpdateOne {
	if i != nil {
		ecuo.SetVerifiedById(*i)
	}
	return ecuo
}

// AddVerifiedById adds i to the "VerifiedById" field.
func (ecuo *EmployeeCategoryUpdateOne) AddVerifiedById(i int64) *EmployeeCategoryUpdateOne {
	ecuo.mutation.AddVerifiedById(i)
	return ecuo
}

// ClearVerifiedById clears the value of the "VerifiedById" field.
func (ecuo *EmployeeCategoryUpdateOne) ClearVerifiedById() *EmployeeCategoryUpdateOne {
	ecuo.mutation.ClearVerifiedById()
	return ecuo
}

// SetVerifiedByUserName sets the "VerifiedByUserName" field.
func (ecuo *EmployeeCategoryUpdateOne) SetVerifiedByUserName(s string) *EmployeeCategoryUpdateOne {
	ecuo.mutation.SetVerifiedByUserName(s)
	return ecuo
}

// SetNillableVerifiedByUserName sets the "VerifiedByUserName" field if the given value is not nil.
func (ecuo *EmployeeCategoryUpdateOne) SetNillableVerifiedByUserName(s *string) *EmployeeCategoryUpdateOne {
	if s != nil {
		ecuo.SetVerifiedByUserName(*s)
	}
	return ecuo
}

// ClearVerifiedByUserName clears the value of the "VerifiedByUserName" field.
func (ecuo *EmployeeCategoryUpdateOne) ClearVerifiedByUserName() *EmployeeCategoryUpdateOne {
	ecuo.mutation.ClearVerifiedByUserName()
	return ecuo
}

// SetVerifiedByEmployeeId sets the "VerifiedByEmployeeId" field.
func (ecuo *EmployeeCategoryUpdateOne) SetVerifiedByEmployeeId(s string) *EmployeeCategoryUpdateOne {
	ecuo.mutation.SetVerifiedByEmployeeId(s)
	return ecuo
}

// SetNillableVerifiedByEmployeeId sets the "VerifiedByEmployeeId" field if the given value is not nil.
func (ecuo *EmployeeCategoryUpdateOne) SetNillableVerifiedByEmployeeId(s *string) *EmployeeCategoryUpdateOne {
	if s != nil {
		ecuo.SetVerifiedByEmployeeId(*s)
	}
	return ecuo
}

// ClearVerifiedByEmployeeId clears the value of the "VerifiedByEmployeeId" field.
func (ecuo *EmployeeCategoryUpdateOne) ClearVerifiedByEmployeeId() *EmployeeCategoryUpdateOne {
	ecuo.mutation.ClearVerifiedByEmployeeId()
	return ecuo
}

// SetVerifiedByDesignation sets the "VerifiedByDesignation" field.
func (ecuo *EmployeeCategoryUpdateOne) SetVerifiedByDesignation(s string) *EmployeeCategoryUpdateOne {
	ecuo.mutation.SetVerifiedByDesignation(s)
	return ecuo
}

// SetNillableVerifiedByDesignation sets the "VerifiedByDesignation" field if the given value is not nil.
func (ecuo *EmployeeCategoryUpdateOne) SetNillableVerifiedByDesignation(s *string) *EmployeeCategoryUpdateOne {
	if s != nil {
		ecuo.SetVerifiedByDesignation(*s)
	}
	return ecuo
}

// ClearVerifiedByDesignation clears the value of the "VerifiedByDesignation" field.
func (ecuo *EmployeeCategoryUpdateOne) ClearVerifiedByDesignation() *EmployeeCategoryUpdateOne {
	ecuo.mutation.ClearVerifiedByDesignation()
	return ecuo
}

// SetVerifiedDate sets the "VerifiedDate" field.
func (ecuo *EmployeeCategoryUpdateOne) SetVerifiedDate(t time.Time) *EmployeeCategoryUpdateOne {
	ecuo.mutation.SetVerifiedDate(t)
	return ecuo
}

// SetNillableVerifiedDate sets the "VerifiedDate" field if the given value is not nil.
func (ecuo *EmployeeCategoryUpdateOne) SetNillableVerifiedDate(t *time.Time) *EmployeeCategoryUpdateOne {
	if t != nil {
		ecuo.SetVerifiedDate(*t)
	}
	return ecuo
}

// ClearVerifiedDate clears the value of the "VerifiedDate" field.
func (ecuo *EmployeeCategoryUpdateOne) ClearVerifiedDate() *EmployeeCategoryUpdateOne {
	ecuo.mutation.ClearVerifiedDate()
	return ecuo
}

// SetStatus sets the "Status" field.
func (ecuo *EmployeeCategoryUpdateOne) SetStatus(s string) *EmployeeCategoryUpdateOne {
	ecuo.mutation.SetStatus(s)
	return ecuo
}

// SetNillableStatus sets the "Status" field if the given value is not nil.
func (ecuo *EmployeeCategoryUpdateOne) SetNillableStatus(s *string) *EmployeeCategoryUpdateOne {
	if s != nil {
		ecuo.SetStatus(*s)
	}
	return ecuo
}

// ClearStatus clears the value of the "Status" field.
func (ecuo *EmployeeCategoryUpdateOne) ClearStatus() *EmployeeCategoryUpdateOne {
	ecuo.mutation.ClearStatus()
	return ecuo
}

// SetDeletedById sets the "DeletedById" field.
func (ecuo *EmployeeCategoryUpdateOne) SetDeletedById(i int64) *EmployeeCategoryUpdateOne {
	ecuo.mutation.ResetDeletedById()
	ecuo.mutation.SetDeletedById(i)
	return ecuo
}

// SetNillableDeletedById sets the "DeletedById" field if the given value is not nil.
func (ecuo *EmployeeCategoryUpdateOne) SetNillableDeletedById(i *int64) *EmployeeCategoryUpdateOne {
	if i != nil {
		ecuo.SetDeletedById(*i)
	}
	return ecuo
}

// AddDeletedById adds i to the "DeletedById" field.
func (ecuo *EmployeeCategoryUpdateOne) AddDeletedById(i int64) *EmployeeCategoryUpdateOne {
	ecuo.mutation.AddDeletedById(i)
	return ecuo
}

// ClearDeletedById clears the value of the "DeletedById" field.
func (ecuo *EmployeeCategoryUpdateOne) ClearDeletedById() *EmployeeCategoryUpdateOne {
	ecuo.mutation.ClearDeletedById()
	return ecuo
}

// SetDeletedByUserName sets the "DeletedByUserName" field.
func (ecuo *EmployeeCategoryUpdateOne) SetDeletedByUserName(s string) *EmployeeCategoryUpdateOne {
	ecuo.mutation.SetDeletedByUserName(s)
	return ecuo
}

// SetNillableDeletedByUserName sets the "DeletedByUserName" field if the given value is not nil.
func (ecuo *EmployeeCategoryUpdateOne) SetNillableDeletedByUserName(s *string) *EmployeeCategoryUpdateOne {
	if s != nil {
		ecuo.SetDeletedByUserName(*s)
	}
	return ecuo
}

// ClearDeletedByUserName clears the value of the "DeletedByUserName" field.
func (ecuo *EmployeeCategoryUpdateOne) ClearDeletedByUserName() *EmployeeCategoryUpdateOne {
	ecuo.mutation.ClearDeletedByUserName()
	return ecuo
}

// SetDeletedByEmployeeId sets the "DeletedByEmployeeId" field.
func (ecuo *EmployeeCategoryUpdateOne) SetDeletedByEmployeeId(s string) *EmployeeCategoryUpdateOne {
	ecuo.mutation.SetDeletedByEmployeeId(s)
	return ecuo
}

// SetNillableDeletedByEmployeeId sets the "DeletedByEmployeeId" field if the given value is not nil.
func (ecuo *EmployeeCategoryUpdateOne) SetNillableDeletedByEmployeeId(s *string) *EmployeeCategoryUpdateOne {
	if s != nil {
		ecuo.SetDeletedByEmployeeId(*s)
	}
	return ecuo
}

// ClearDeletedByEmployeeId clears the value of the "DeletedByEmployeeId" field.
func (ecuo *EmployeeCategoryUpdateOne) ClearDeletedByEmployeeId() *EmployeeCategoryUpdateOne {
	ecuo.mutation.ClearDeletedByEmployeeId()
	return ecuo
}

// SetDeletedByDesignation sets the "DeletedByDesignation" field.
func (ecuo *EmployeeCategoryUpdateOne) SetDeletedByDesignation(s string) *EmployeeCategoryUpdateOne {
	ecuo.mutation.SetDeletedByDesignation(s)
	return ecuo
}

// SetNillableDeletedByDesignation sets the "DeletedByDesignation" field if the given value is not nil.
func (ecuo *EmployeeCategoryUpdateOne) SetNillableDeletedByDesignation(s *string) *EmployeeCategoryUpdateOne {
	if s != nil {
		ecuo.SetDeletedByDesignation(*s)
	}
	return ecuo
}

// ClearDeletedByDesignation clears the value of the "DeletedByDesignation" field.
func (ecuo *EmployeeCategoryUpdateOne) ClearDeletedByDesignation() *EmployeeCategoryUpdateOne {
	ecuo.mutation.ClearDeletedByDesignation()
	return ecuo
}

// SetDeletedDate sets the "DeletedDate" field.
func (ecuo *EmployeeCategoryUpdateOne) SetDeletedDate(t time.Time) *EmployeeCategoryUpdateOne {
	ecuo.mutation.SetDeletedDate(t)
	return ecuo
}

// SetNillableDeletedDate sets the "DeletedDate" field if the given value is not nil.
func (ecuo *EmployeeCategoryUpdateOne) SetNillableDeletedDate(t *time.Time) *EmployeeCategoryUpdateOne {
	if t != nil {
		ecuo.SetDeletedDate(*t)
	}
	return ecuo
}

// ClearDeletedDate clears the value of the "DeletedDate" field.
func (ecuo *EmployeeCategoryUpdateOne) ClearDeletedDate() *EmployeeCategoryUpdateOne {
	ecuo.mutation.ClearDeletedDate()
	return ecuo
}

// SetExamconfigurationExamcode sets the "ExamconfigurationExamcode" field.
func (ecuo *EmployeeCategoryUpdateOne) SetExamconfigurationExamcode(i int32) *EmployeeCategoryUpdateOne {
	ecuo.mutation.ResetExamconfigurationExamcode()
	ecuo.mutation.SetExamconfigurationExamcode(i)
	return ecuo
}

// SetNillableExamconfigurationExamcode sets the "ExamconfigurationExamcode" field if the given value is not nil.
func (ecuo *EmployeeCategoryUpdateOne) SetNillableExamconfigurationExamcode(i *int32) *EmployeeCategoryUpdateOne {
	if i != nil {
		ecuo.SetExamconfigurationExamcode(*i)
	}
	return ecuo
}

// AddExamconfigurationExamcode adds i to the "ExamconfigurationExamcode" field.
func (ecuo *EmployeeCategoryUpdateOne) AddExamconfigurationExamcode(i int32) *EmployeeCategoryUpdateOne {
	ecuo.mutation.AddExamconfigurationExamcode(i)
	return ecuo
}

// ClearExamconfigurationExamcode clears the value of the "ExamconfigurationExamcode" field.
func (ecuo *EmployeeCategoryUpdateOne) ClearExamconfigurationExamcode() *EmployeeCategoryUpdateOne {
	ecuo.mutation.ClearExamconfigurationExamcode()
	return ecuo
}

// SetExamShortDescription sets the "ExamShortDescription" field.
func (ecuo *EmployeeCategoryUpdateOne) SetExamShortDescription(s string) *EmployeeCategoryUpdateOne {
	ecuo.mutation.SetExamShortDescription(s)
	return ecuo
}

// SetNillableExamShortDescription sets the "ExamShortDescription" field if the given value is not nil.
func (ecuo *EmployeeCategoryUpdateOne) SetNillableExamShortDescription(s *string) *EmployeeCategoryUpdateOne {
	if s != nil {
		ecuo.SetExamShortDescription(*s)
	}
	return ecuo
}

// ClearExamShortDescription clears the value of the "ExamShortDescription" field.
func (ecuo *EmployeeCategoryUpdateOne) ClearExamShortDescription() *EmployeeCategoryUpdateOne {
	ecuo.mutation.ClearExamShortDescription()
	return ecuo
}

// SetExamLongDescription sets the "ExamLongDescription" field.
func (ecuo *EmployeeCategoryUpdateOne) SetExamLongDescription(s string) *EmployeeCategoryUpdateOne {
	ecuo.mutation.SetExamLongDescription(s)
	return ecuo
}

// SetNillableExamLongDescription sets the "ExamLongDescription" field if the given value is not nil.
func (ecuo *EmployeeCategoryUpdateOne) SetNillableExamLongDescription(s *string) *EmployeeCategoryUpdateOne {
	if s != nil {
		ecuo.SetExamLongDescription(*s)
	}
	return ecuo
}

// ClearExamLongDescription clears the value of the "ExamLongDescription" field.
func (ecuo *EmployeeCategoryUpdateOne) ClearExamLongDescription() *EmployeeCategoryUpdateOne {
	ecuo.mutation.ClearExamLongDescription()
	return ecuo
}

// SetExamPaperCodePaperCode sets the "ExamPaperCode_paperCode" field.
func (ecuo *EmployeeCategoryUpdateOne) SetExamPaperCodePaperCode(i int32) *EmployeeCategoryUpdateOne {
	ecuo.mutation.ResetExamPaperCodePaperCode()
	ecuo.mutation.SetExamPaperCodePaperCode(i)
	return ecuo
}

// SetNillableExamPaperCodePaperCode sets the "ExamPaperCode_paperCode" field if the given value is not nil.
func (ecuo *EmployeeCategoryUpdateOne) SetNillableExamPaperCodePaperCode(i *int32) *EmployeeCategoryUpdateOne {
	if i != nil {
		ecuo.SetExamPaperCodePaperCode(*i)
	}
	return ecuo
}

// AddExamPaperCodePaperCode adds i to the "ExamPaperCode_paperCode" field.
func (ecuo *EmployeeCategoryUpdateOne) AddExamPaperCodePaperCode(i int32) *EmployeeCategoryUpdateOne {
	ecuo.mutation.AddExamPaperCodePaperCode(i)
	return ecuo
}

// ClearExamPaperCodePaperCode clears the value of the "ExamPaperCode_paperCode" field.
func (ecuo *EmployeeCategoryUpdateOne) ClearExamPaperCodePaperCode() *EmployeeCategoryUpdateOne {
	ecuo.mutation.ClearExamPaperCodePaperCode()
	return ecuo
}

// SetEmployeeCategoryCategoryID sets the "EmployeeCategory_categoryID" field.
func (ecuo *EmployeeCategoryUpdateOne) SetEmployeeCategoryCategoryID(i int32) *EmployeeCategoryUpdateOne {
	ecuo.mutation.ResetEmployeeCategoryCategoryID()
	ecuo.mutation.SetEmployeeCategoryCategoryID(i)
	return ecuo
}

// SetNillableEmployeeCategoryCategoryID sets the "EmployeeCategory_categoryID" field if the given value is not nil.
func (ecuo *EmployeeCategoryUpdateOne) SetNillableEmployeeCategoryCategoryID(i *int32) *EmployeeCategoryUpdateOne {
	if i != nil {
		ecuo.SetEmployeeCategoryCategoryID(*i)
	}
	return ecuo
}

// AddEmployeeCategoryCategoryID adds i to the "EmployeeCategory_categoryID" field.
func (ecuo *EmployeeCategoryUpdateOne) AddEmployeeCategoryCategoryID(i int32) *EmployeeCategoryUpdateOne {
	ecuo.mutation.AddEmployeeCategoryCategoryID(i)
	return ecuo
}

// ClearEmployeeCategoryCategoryID clears the value of the "EmployeeCategory_categoryID" field.
func (ecuo *EmployeeCategoryUpdateOne) ClearEmployeeCategoryCategoryID() *EmployeeCategoryUpdateOne {
	ecuo.mutation.ClearEmployeeCategoryCategoryID()
	return ecuo
}

// Mutation returns the EmployeeCategoryMutation object of the builder.
func (ecuo *EmployeeCategoryUpdateOne) Mutation() *EmployeeCategoryMutation {
	return ecuo.mutation
}

// Where appends a list predicates to the EmployeeCategoryUpdate builder.
func (ecuo *EmployeeCategoryUpdateOne) Where(ps ...predicate.EmployeeCategory) *EmployeeCategoryUpdateOne {
	ecuo.mutation.Where(ps...)
	return ecuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ecuo *EmployeeCategoryUpdateOne) Select(field string, fields ...string) *EmployeeCategoryUpdateOne {
	ecuo.fields = append([]string{field}, fields...)
	return ecuo
}

// Save executes the query and returns the updated EmployeeCategory entity.
func (ecuo *EmployeeCategoryUpdateOne) Save(ctx context.Context) (*EmployeeCategory, error) {
	return withHooks(ctx, ecuo.sqlSave, ecuo.mutation, ecuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ecuo *EmployeeCategoryUpdateOne) SaveX(ctx context.Context) *EmployeeCategory {
	node, err := ecuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ecuo *EmployeeCategoryUpdateOne) Exec(ctx context.Context) error {
	_, err := ecuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ecuo *EmployeeCategoryUpdateOne) ExecX(ctx context.Context) {
	if err := ecuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ecuo *EmployeeCategoryUpdateOne) sqlSave(ctx context.Context) (_node *EmployeeCategory, err error) {
	_spec := sqlgraph.NewUpdateSpec(employeecategory.Table, employeecategory.Columns, sqlgraph.NewFieldSpec(employeecategory.FieldID, field.TypeInt32))
	id, ok := ecuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "EmployeeCategory.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ecuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, employeecategory.FieldID)
		for _, f := range fields {
			if !employeecategory.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != employeecategory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ecuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ecuo.mutation.CategoryCode(); ok {
		_spec.SetField(employeecategory.FieldCategoryCode, field.TypeString, value)
	}
	if ecuo.mutation.CategoryCodeCleared() {
		_spec.ClearField(employeecategory.FieldCategoryCode, field.TypeString)
	}
	if value, ok := ecuo.mutation.CategoryDescription(); ok {
		_spec.SetField(employeecategory.FieldCategoryDescription, field.TypeString, value)
	}
	if ecuo.mutation.CategoryDescriptionCleared() {
		_spec.ClearField(employeecategory.FieldCategoryDescription, field.TypeString)
	}
	if value, ok := ecuo.mutation.MinimumMarks(); ok {
		_spec.SetField(employeecategory.FieldMinimumMarks, field.TypeInt32, value)
	}
	if value, ok := ecuo.mutation.AddedMinimumMarks(); ok {
		_spec.AddField(employeecategory.FieldMinimumMarks, field.TypeInt32, value)
	}
	if ecuo.mutation.MinimumMarksCleared() {
		_spec.ClearField(employeecategory.FieldMinimumMarks, field.TypeInt32)
	}
	if value, ok := ecuo.mutation.HallCategoryCode(); ok {
		_spec.SetField(employeecategory.FieldHallCategoryCode, field.TypeString, value)
	}
	if ecuo.mutation.HallCategoryCodeCleared() {
		_spec.ClearField(employeecategory.FieldHallCategoryCode, field.TypeString)
	}
	if value, ok := ecuo.mutation.OrderNumber(); ok {
		_spec.SetField(employeecategory.FieldOrderNumber, field.TypeString, value)
	}
	if ecuo.mutation.OrderNumberCleared() {
		_spec.ClearField(employeecategory.FieldOrderNumber, field.TypeString)
	}
	if value, ok := ecuo.mutation.CreatedById(); ok {
		_spec.SetField(employeecategory.FieldCreatedById, field.TypeInt64, value)
	}
	if value, ok := ecuo.mutation.AddedCreatedById(); ok {
		_spec.AddField(employeecategory.FieldCreatedById, field.TypeInt64, value)
	}
	if ecuo.mutation.CreatedByIdCleared() {
		_spec.ClearField(employeecategory.FieldCreatedById, field.TypeInt64)
	}
	if value, ok := ecuo.mutation.CreatedByUserName(); ok {
		_spec.SetField(employeecategory.FieldCreatedByUserName, field.TypeString, value)
	}
	if ecuo.mutation.CreatedByUserNameCleared() {
		_spec.ClearField(employeecategory.FieldCreatedByUserName, field.TypeString)
	}
	if value, ok := ecuo.mutation.CreatedByEmployeeId(); ok {
		_spec.SetField(employeecategory.FieldCreatedByEmployeeId, field.TypeString, value)
	}
	if ecuo.mutation.CreatedByEmployeeIdCleared() {
		_spec.ClearField(employeecategory.FieldCreatedByEmployeeId, field.TypeString)
	}
	if value, ok := ecuo.mutation.CreatedByDesignation(); ok {
		_spec.SetField(employeecategory.FieldCreatedByDesignation, field.TypeString, value)
	}
	if ecuo.mutation.CreatedByDesignationCleared() {
		_spec.ClearField(employeecategory.FieldCreatedByDesignation, field.TypeString)
	}
	if value, ok := ecuo.mutation.CreatedDate(); ok {
		_spec.SetField(employeecategory.FieldCreatedDate, field.TypeTime, value)
	}
	if ecuo.mutation.CreatedDateCleared() {
		_spec.ClearField(employeecategory.FieldCreatedDate, field.TypeTime)
	}
	if value, ok := ecuo.mutation.VerifiedById(); ok {
		_spec.SetField(employeecategory.FieldVerifiedById, field.TypeInt64, value)
	}
	if value, ok := ecuo.mutation.AddedVerifiedById(); ok {
		_spec.AddField(employeecategory.FieldVerifiedById, field.TypeInt64, value)
	}
	if ecuo.mutation.VerifiedByIdCleared() {
		_spec.ClearField(employeecategory.FieldVerifiedById, field.TypeInt64)
	}
	if value, ok := ecuo.mutation.VerifiedByUserName(); ok {
		_spec.SetField(employeecategory.FieldVerifiedByUserName, field.TypeString, value)
	}
	if ecuo.mutation.VerifiedByUserNameCleared() {
		_spec.ClearField(employeecategory.FieldVerifiedByUserName, field.TypeString)
	}
	if value, ok := ecuo.mutation.VerifiedByEmployeeId(); ok {
		_spec.SetField(employeecategory.FieldVerifiedByEmployeeId, field.TypeString, value)
	}
	if ecuo.mutation.VerifiedByEmployeeIdCleared() {
		_spec.ClearField(employeecategory.FieldVerifiedByEmployeeId, field.TypeString)
	}
	if value, ok := ecuo.mutation.VerifiedByDesignation(); ok {
		_spec.SetField(employeecategory.FieldVerifiedByDesignation, field.TypeString, value)
	}
	if ecuo.mutation.VerifiedByDesignationCleared() {
		_spec.ClearField(employeecategory.FieldVerifiedByDesignation, field.TypeString)
	}
	if value, ok := ecuo.mutation.VerifiedDate(); ok {
		_spec.SetField(employeecategory.FieldVerifiedDate, field.TypeTime, value)
	}
	if ecuo.mutation.VerifiedDateCleared() {
		_spec.ClearField(employeecategory.FieldVerifiedDate, field.TypeTime)
	}
	if value, ok := ecuo.mutation.Status(); ok {
		_spec.SetField(employeecategory.FieldStatus, field.TypeString, value)
	}
	if ecuo.mutation.StatusCleared() {
		_spec.ClearField(employeecategory.FieldStatus, field.TypeString)
	}
	if value, ok := ecuo.mutation.DeletedById(); ok {
		_spec.SetField(employeecategory.FieldDeletedById, field.TypeInt64, value)
	}
	if value, ok := ecuo.mutation.AddedDeletedById(); ok {
		_spec.AddField(employeecategory.FieldDeletedById, field.TypeInt64, value)
	}
	if ecuo.mutation.DeletedByIdCleared() {
		_spec.ClearField(employeecategory.FieldDeletedById, field.TypeInt64)
	}
	if value, ok := ecuo.mutation.DeletedByUserName(); ok {
		_spec.SetField(employeecategory.FieldDeletedByUserName, field.TypeString, value)
	}
	if ecuo.mutation.DeletedByUserNameCleared() {
		_spec.ClearField(employeecategory.FieldDeletedByUserName, field.TypeString)
	}
	if value, ok := ecuo.mutation.DeletedByEmployeeId(); ok {
		_spec.SetField(employeecategory.FieldDeletedByEmployeeId, field.TypeString, value)
	}
	if ecuo.mutation.DeletedByEmployeeIdCleared() {
		_spec.ClearField(employeecategory.FieldDeletedByEmployeeId, field.TypeString)
	}
	if value, ok := ecuo.mutation.DeletedByDesignation(); ok {
		_spec.SetField(employeecategory.FieldDeletedByDesignation, field.TypeString, value)
	}
	if ecuo.mutation.DeletedByDesignationCleared() {
		_spec.ClearField(employeecategory.FieldDeletedByDesignation, field.TypeString)
	}
	if value, ok := ecuo.mutation.DeletedDate(); ok {
		_spec.SetField(employeecategory.FieldDeletedDate, field.TypeTime, value)
	}
	if ecuo.mutation.DeletedDateCleared() {
		_spec.ClearField(employeecategory.FieldDeletedDate, field.TypeTime)
	}
	if value, ok := ecuo.mutation.ExamconfigurationExamcode(); ok {
		_spec.SetField(employeecategory.FieldExamconfigurationExamcode, field.TypeInt32, value)
	}
	if value, ok := ecuo.mutation.AddedExamconfigurationExamcode(); ok {
		_spec.AddField(employeecategory.FieldExamconfigurationExamcode, field.TypeInt32, value)
	}
	if ecuo.mutation.ExamconfigurationExamcodeCleared() {
		_spec.ClearField(employeecategory.FieldExamconfigurationExamcode, field.TypeInt32)
	}
	if value, ok := ecuo.mutation.ExamShortDescription(); ok {
		_spec.SetField(employeecategory.FieldExamShortDescription, field.TypeString, value)
	}
	if ecuo.mutation.ExamShortDescriptionCleared() {
		_spec.ClearField(employeecategory.FieldExamShortDescription, field.TypeString)
	}
	if value, ok := ecuo.mutation.ExamLongDescription(); ok {
		_spec.SetField(employeecategory.FieldExamLongDescription, field.TypeString, value)
	}
	if ecuo.mutation.ExamLongDescriptionCleared() {
		_spec.ClearField(employeecategory.FieldExamLongDescription, field.TypeString)
	}
	if value, ok := ecuo.mutation.ExamPaperCodePaperCode(); ok {
		_spec.SetField(employeecategory.FieldExamPaperCodePaperCode, field.TypeInt32, value)
	}
	if value, ok := ecuo.mutation.AddedExamPaperCodePaperCode(); ok {
		_spec.AddField(employeecategory.FieldExamPaperCodePaperCode, field.TypeInt32, value)
	}
	if ecuo.mutation.ExamPaperCodePaperCodeCleared() {
		_spec.ClearField(employeecategory.FieldExamPaperCodePaperCode, field.TypeInt32)
	}
	if value, ok := ecuo.mutation.EmployeeCategoryCategoryID(); ok {
		_spec.SetField(employeecategory.FieldEmployeeCategoryCategoryID, field.TypeInt32, value)
	}
	if value, ok := ecuo.mutation.AddedEmployeeCategoryCategoryID(); ok {
		_spec.AddField(employeecategory.FieldEmployeeCategoryCategoryID, field.TypeInt32, value)
	}
	if ecuo.mutation.EmployeeCategoryCategoryIDCleared() {
		_spec.ClearField(employeecategory.FieldEmployeeCategoryCategoryID, field.TypeInt32)
	}
	_node = &EmployeeCategory{config: ecuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ecuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{employeecategory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ecuo.mutation.done = true
	return _node, nil
}
