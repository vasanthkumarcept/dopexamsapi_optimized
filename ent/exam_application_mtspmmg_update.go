// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"recruit/ent/cadre_choice_mtspmmg"
	"recruit/ent/center"
	"recruit/ent/circlesummaryforno"
	"recruit/ent/division_choice_mtspmmg"
	"recruit/ent/exam"
	"recruit/ent/exam_application_mtspmmg"
	"recruit/ent/examcitycenter"
	"recruit/ent/logs"
	"recruit/ent/predicate"
	"recruit/ent/recommendationsmtspmmgapplications"
	"recruit/ent/rolemaster"
	"recruit/ent/usermaster"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
)

// ExamApplicationMTSPMMGUpdate is the builder for updating Exam_Application_MTSPMMG entities.
type ExamApplicationMTSPMMGUpdate struct {
	config
	hooks    []Hook
	mutation *ExamApplicationMTSPMMGMutation
}

// Where appends a list predicates to the ExamApplicationMTSPMMGUpdate builder.
func (eamu *ExamApplicationMTSPMMGUpdate) Where(ps ...predicate.Exam_Application_MTSPMMG) *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.Where(ps...)
	return eamu
}

// SetApplicationNumber sets the "ApplicationNumber" field.
func (eamu *ExamApplicationMTSPMMGUpdate) SetApplicationNumber(s string) *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.SetApplicationNumber(s)
	return eamu
}

// SetNillableApplicationNumber sets the "ApplicationNumber" field if the given value is not nil.
func (eamu *ExamApplicationMTSPMMGUpdate) SetNillableApplicationNumber(s *string) *ExamApplicationMTSPMMGUpdate {
	if s != nil {
		eamu.SetApplicationNumber(*s)
	}
	return eamu
}

// ClearApplicationNumber clears the value of the "ApplicationNumber" field.
func (eamu *ExamApplicationMTSPMMGUpdate) ClearApplicationNumber() *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.ClearApplicationNumber()
	return eamu
}

// SetApplnSubmittedDate sets the "ApplnSubmittedDate" field.
func (eamu *ExamApplicationMTSPMMGUpdate) SetApplnSubmittedDate(t time.Time) *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.SetApplnSubmittedDate(t)
	return eamu
}

// SetNillableApplnSubmittedDate sets the "ApplnSubmittedDate" field if the given value is not nil.
func (eamu *ExamApplicationMTSPMMGUpdate) SetNillableApplnSubmittedDate(t *time.Time) *ExamApplicationMTSPMMGUpdate {
	if t != nil {
		eamu.SetApplnSubmittedDate(*t)
	}
	return eamu
}

// ClearApplnSubmittedDate clears the value of the "ApplnSubmittedDate" field.
func (eamu *ExamApplicationMTSPMMGUpdate) ClearApplnSubmittedDate() *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.ClearApplnSubmittedDate()
	return eamu
}

// SetExamCode sets the "ExamCode" field.
func (eamu *ExamApplicationMTSPMMGUpdate) SetExamCode(i int32) *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.SetExamCode(i)
	return eamu
}

// SetNillableExamCode sets the "ExamCode" field if the given value is not nil.
func (eamu *ExamApplicationMTSPMMGUpdate) SetNillableExamCode(i *int32) *ExamApplicationMTSPMMGUpdate {
	if i != nil {
		eamu.SetExamCode(*i)
	}
	return eamu
}

// ClearExamCode clears the value of the "ExamCode" field.
func (eamu *ExamApplicationMTSPMMGUpdate) ClearExamCode() *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.ClearExamCode()
	return eamu
}

// SetExamShortName sets the "ExamShortName" field.
func (eamu *ExamApplicationMTSPMMGUpdate) SetExamShortName(s string) *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.SetExamShortName(s)
	return eamu
}

// SetNillableExamShortName sets the "ExamShortName" field if the given value is not nil.
func (eamu *ExamApplicationMTSPMMGUpdate) SetNillableExamShortName(s *string) *ExamApplicationMTSPMMGUpdate {
	if s != nil {
		eamu.SetExamShortName(*s)
	}
	return eamu
}

// ClearExamShortName clears the value of the "ExamShortName" field.
func (eamu *ExamApplicationMTSPMMGUpdate) ClearExamShortName() *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.ClearExamShortName()
	return eamu
}

// SetExamName sets the "ExamName" field.
func (eamu *ExamApplicationMTSPMMGUpdate) SetExamName(s string) *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.SetExamName(s)
	return eamu
}

// SetNillableExamName sets the "ExamName" field if the given value is not nil.
func (eamu *ExamApplicationMTSPMMGUpdate) SetNillableExamName(s *string) *ExamApplicationMTSPMMGUpdate {
	if s != nil {
		eamu.SetExamName(*s)
	}
	return eamu
}

// ClearExamName clears the value of the "ExamName" field.
func (eamu *ExamApplicationMTSPMMGUpdate) ClearExamName() *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.ClearExamName()
	return eamu
}

// SetSmsExamShortName sets the "SmsExamShortName" field.
func (eamu *ExamApplicationMTSPMMGUpdate) SetSmsExamShortName(s string) *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.SetSmsExamShortName(s)
	return eamu
}

// SetNillableSmsExamShortName sets the "SmsExamShortName" field if the given value is not nil.
func (eamu *ExamApplicationMTSPMMGUpdate) SetNillableSmsExamShortName(s *string) *ExamApplicationMTSPMMGUpdate {
	if s != nil {
		eamu.SetSmsExamShortName(*s)
	}
	return eamu
}

// ClearSmsExamShortName clears the value of the "SmsExamShortName" field.
func (eamu *ExamApplicationMTSPMMGUpdate) ClearSmsExamShortName() *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.ClearSmsExamShortName()
	return eamu
}

// SetExamYear sets the "ExamYear" field.
func (eamu *ExamApplicationMTSPMMGUpdate) SetExamYear(s string) *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.SetExamYear(s)
	return eamu
}

// SetNillableExamYear sets the "ExamYear" field if the given value is not nil.
func (eamu *ExamApplicationMTSPMMGUpdate) SetNillableExamYear(s *string) *ExamApplicationMTSPMMGUpdate {
	if s != nil {
		eamu.SetExamYear(*s)
	}
	return eamu
}

// ClearExamYear clears the value of the "ExamYear" field.
func (eamu *ExamApplicationMTSPMMGUpdate) ClearExamYear() *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.ClearExamYear()
	return eamu
}

// SetUserID sets the "UserID" field.
func (eamu *ExamApplicationMTSPMMGUpdate) SetUserID(i int32) *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.ResetUserID()
	eamu.mutation.SetUserID(i)
	return eamu
}

// SetNillableUserID sets the "UserID" field if the given value is not nil.
func (eamu *ExamApplicationMTSPMMGUpdate) SetNillableUserID(i *int32) *ExamApplicationMTSPMMGUpdate {
	if i != nil {
		eamu.SetUserID(*i)
	}
	return eamu
}

// AddUserID adds i to the "UserID" field.
func (eamu *ExamApplicationMTSPMMGUpdate) AddUserID(i int32) *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.AddUserID(i)
	return eamu
}

// ClearUserID clears the value of the "UserID" field.
func (eamu *ExamApplicationMTSPMMGUpdate) ClearUserID() *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.ClearUserID()
	return eamu
}

// SetEmployeeID sets the "EmployeeID" field.
func (eamu *ExamApplicationMTSPMMGUpdate) SetEmployeeID(i int64) *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.ResetEmployeeID()
	eamu.mutation.SetEmployeeID(i)
	return eamu
}

// SetNillableEmployeeID sets the "EmployeeID" field if the given value is not nil.
func (eamu *ExamApplicationMTSPMMGUpdate) SetNillableEmployeeID(i *int64) *ExamApplicationMTSPMMGUpdate {
	if i != nil {
		eamu.SetEmployeeID(*i)
	}
	return eamu
}

// AddEmployeeID adds i to the "EmployeeID" field.
func (eamu *ExamApplicationMTSPMMGUpdate) AddEmployeeID(i int64) *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.AddEmployeeID(i)
	return eamu
}

// ClearEmployeeID clears the value of the "EmployeeID" field.
func (eamu *ExamApplicationMTSPMMGUpdate) ClearEmployeeID() *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.ClearEmployeeID()
	return eamu
}

// SetEmployeeName sets the "EmployeeName" field.
func (eamu *ExamApplicationMTSPMMGUpdate) SetEmployeeName(s string) *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.SetEmployeeName(s)
	return eamu
}

// SetNillableEmployeeName sets the "EmployeeName" field if the given value is not nil.
func (eamu *ExamApplicationMTSPMMGUpdate) SetNillableEmployeeName(s *string) *ExamApplicationMTSPMMGUpdate {
	if s != nil {
		eamu.SetEmployeeName(*s)
	}
	return eamu
}

// ClearEmployeeName clears the value of the "EmployeeName" field.
func (eamu *ExamApplicationMTSPMMGUpdate) ClearEmployeeName() *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.ClearEmployeeName()
	return eamu
}

// SetDOB sets the "DOB" field.
func (eamu *ExamApplicationMTSPMMGUpdate) SetDOB(s string) *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.SetDOB(s)
	return eamu
}

// SetNillableDOB sets the "DOB" field if the given value is not nil.
func (eamu *ExamApplicationMTSPMMGUpdate) SetNillableDOB(s *string) *ExamApplicationMTSPMMGUpdate {
	if s != nil {
		eamu.SetDOB(*s)
	}
	return eamu
}

// ClearDOB clears the value of the "DOB" field.
func (eamu *ExamApplicationMTSPMMGUpdate) ClearDOB() *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.ClearDOB()
	return eamu
}

// SetGender sets the "Gender" field.
func (eamu *ExamApplicationMTSPMMGUpdate) SetGender(s string) *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.SetGender(s)
	return eamu
}

// SetNillableGender sets the "Gender" field if the given value is not nil.
func (eamu *ExamApplicationMTSPMMGUpdate) SetNillableGender(s *string) *ExamApplicationMTSPMMGUpdate {
	if s != nil {
		eamu.SetGender(*s)
	}
	return eamu
}

// ClearGender clears the value of the "Gender" field.
func (eamu *ExamApplicationMTSPMMGUpdate) ClearGender() *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.ClearGender()
	return eamu
}

// SetMobileNumber sets the "MobileNumber" field.
func (eamu *ExamApplicationMTSPMMGUpdate) SetMobileNumber(s string) *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.SetMobileNumber(s)
	return eamu
}

// SetNillableMobileNumber sets the "MobileNumber" field if the given value is not nil.
func (eamu *ExamApplicationMTSPMMGUpdate) SetNillableMobileNumber(s *string) *ExamApplicationMTSPMMGUpdate {
	if s != nil {
		eamu.SetMobileNumber(*s)
	}
	return eamu
}

// ClearMobileNumber clears the value of the "MobileNumber" field.
func (eamu *ExamApplicationMTSPMMGUpdate) ClearMobileNumber() *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.ClearMobileNumber()
	return eamu
}

// SetEmailID sets the "EmailID" field.
func (eamu *ExamApplicationMTSPMMGUpdate) SetEmailID(s string) *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.SetEmailID(s)
	return eamu
}

// SetNillableEmailID sets the "EmailID" field if the given value is not nil.
func (eamu *ExamApplicationMTSPMMGUpdate) SetNillableEmailID(s *string) *ExamApplicationMTSPMMGUpdate {
	if s != nil {
		eamu.SetEmailID(*s)
	}
	return eamu
}

// ClearEmailID clears the value of the "EmailID" field.
func (eamu *ExamApplicationMTSPMMGUpdate) ClearEmailID() *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.ClearEmailID()
	return eamu
}

// SetCategoryCode sets the "CategoryCode" field.
func (eamu *ExamApplicationMTSPMMGUpdate) SetCategoryCode(s string) *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.SetCategoryCode(s)
	return eamu
}

// SetNillableCategoryCode sets the "CategoryCode" field if the given value is not nil.
func (eamu *ExamApplicationMTSPMMGUpdate) SetNillableCategoryCode(s *string) *ExamApplicationMTSPMMGUpdate {
	if s != nil {
		eamu.SetCategoryCode(*s)
	}
	return eamu
}

// ClearCategoryCode clears the value of the "CategoryCode" field.
func (eamu *ExamApplicationMTSPMMGUpdate) ClearCategoryCode() *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.ClearCategoryCode()
	return eamu
}

// SetCategoryDescription sets the "CategoryDescription" field.
func (eamu *ExamApplicationMTSPMMGUpdate) SetCategoryDescription(s string) *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.SetCategoryDescription(s)
	return eamu
}

// SetNillableCategoryDescription sets the "CategoryDescription" field if the given value is not nil.
func (eamu *ExamApplicationMTSPMMGUpdate) SetNillableCategoryDescription(s *string) *ExamApplicationMTSPMMGUpdate {
	if s != nil {
		eamu.SetCategoryDescription(*s)
	}
	return eamu
}

// ClearCategoryDescription clears the value of the "CategoryDescription" field.
func (eamu *ExamApplicationMTSPMMGUpdate) ClearCategoryDescription() *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.ClearCategoryDescription()
	return eamu
}

// SetDisabilityTypeID sets the "DisabilityTypeID" field.
func (eamu *ExamApplicationMTSPMMGUpdate) SetDisabilityTypeID(s string) *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.SetDisabilityTypeID(s)
	return eamu
}

// SetNillableDisabilityTypeID sets the "DisabilityTypeID" field if the given value is not nil.
func (eamu *ExamApplicationMTSPMMGUpdate) SetNillableDisabilityTypeID(s *string) *ExamApplicationMTSPMMGUpdate {
	if s != nil {
		eamu.SetDisabilityTypeID(*s)
	}
	return eamu
}

// ClearDisabilityTypeID clears the value of the "DisabilityTypeID" field.
func (eamu *ExamApplicationMTSPMMGUpdate) ClearDisabilityTypeID() *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.ClearDisabilityTypeID()
	return eamu
}

// SetDisabilityTypeCode sets the "DisabilityTypeCode" field.
func (eamu *ExamApplicationMTSPMMGUpdate) SetDisabilityTypeCode(s string) *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.SetDisabilityTypeCode(s)
	return eamu
}

// SetNillableDisabilityTypeCode sets the "DisabilityTypeCode" field if the given value is not nil.
func (eamu *ExamApplicationMTSPMMGUpdate) SetNillableDisabilityTypeCode(s *string) *ExamApplicationMTSPMMGUpdate {
	if s != nil {
		eamu.SetDisabilityTypeCode(*s)
	}
	return eamu
}

// ClearDisabilityTypeCode clears the value of the "DisabilityTypeCode" field.
func (eamu *ExamApplicationMTSPMMGUpdate) ClearDisabilityTypeCode() *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.ClearDisabilityTypeCode()
	return eamu
}

// SetDisabilityTypeDescription sets the "DisabilityTypeDescription" field.
func (eamu *ExamApplicationMTSPMMGUpdate) SetDisabilityTypeDescription(s string) *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.SetDisabilityTypeDescription(s)
	return eamu
}

// SetNillableDisabilityTypeDescription sets the "DisabilityTypeDescription" field if the given value is not nil.
func (eamu *ExamApplicationMTSPMMGUpdate) SetNillableDisabilityTypeDescription(s *string) *ExamApplicationMTSPMMGUpdate {
	if s != nil {
		eamu.SetDisabilityTypeDescription(*s)
	}
	return eamu
}

// ClearDisabilityTypeDescription clears the value of the "DisabilityTypeDescription" field.
func (eamu *ExamApplicationMTSPMMGUpdate) ClearDisabilityTypeDescription() *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.ClearDisabilityTypeDescription()
	return eamu
}

// SetDisabilityPercentage sets the "DisabilityPercentage" field.
func (eamu *ExamApplicationMTSPMMGUpdate) SetDisabilityPercentage(i int32) *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.ResetDisabilityPercentage()
	eamu.mutation.SetDisabilityPercentage(i)
	return eamu
}

// SetNillableDisabilityPercentage sets the "DisabilityPercentage" field if the given value is not nil.
func (eamu *ExamApplicationMTSPMMGUpdate) SetNillableDisabilityPercentage(i *int32) *ExamApplicationMTSPMMGUpdate {
	if i != nil {
		eamu.SetDisabilityPercentage(*i)
	}
	return eamu
}

// AddDisabilityPercentage adds i to the "DisabilityPercentage" field.
func (eamu *ExamApplicationMTSPMMGUpdate) AddDisabilityPercentage(i int32) *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.AddDisabilityPercentage(i)
	return eamu
}

// ClearDisabilityPercentage clears the value of the "DisabilityPercentage" field.
func (eamu *ExamApplicationMTSPMMGUpdate) ClearDisabilityPercentage() *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.ClearDisabilityPercentage()
	return eamu
}

// SetDCCS sets the "DCCS" field.
func (eamu *ExamApplicationMTSPMMGUpdate) SetDCCS(s string) *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.SetDCCS(s)
	return eamu
}

// SetNillableDCCS sets the "DCCS" field if the given value is not nil.
func (eamu *ExamApplicationMTSPMMGUpdate) SetNillableDCCS(s *string) *ExamApplicationMTSPMMGUpdate {
	if s != nil {
		eamu.SetDCCS(*s)
	}
	return eamu
}

// ClearDCCS clears the value of the "DCCS" field.
func (eamu *ExamApplicationMTSPMMGUpdate) ClearDCCS() *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.ClearDCCS()
	return eamu
}

// SetEntryPostCode sets the "EntryPostCode" field.
func (eamu *ExamApplicationMTSPMMGUpdate) SetEntryPostCode(s string) *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.SetEntryPostCode(s)
	return eamu
}

// SetNillableEntryPostCode sets the "EntryPostCode" field if the given value is not nil.
func (eamu *ExamApplicationMTSPMMGUpdate) SetNillableEntryPostCode(s *string) *ExamApplicationMTSPMMGUpdate {
	if s != nil {
		eamu.SetEntryPostCode(*s)
	}
	return eamu
}

// ClearEntryPostCode clears the value of the "EntryPostCode" field.
func (eamu *ExamApplicationMTSPMMGUpdate) ClearEntryPostCode() *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.ClearEntryPostCode()
	return eamu
}

// SetEntryPostDescription sets the "EntryPostDescription" field.
func (eamu *ExamApplicationMTSPMMGUpdate) SetEntryPostDescription(s string) *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.SetEntryPostDescription(s)
	return eamu
}

// SetNillableEntryPostDescription sets the "EntryPostDescription" field if the given value is not nil.
func (eamu *ExamApplicationMTSPMMGUpdate) SetNillableEntryPostDescription(s *string) *ExamApplicationMTSPMMGUpdate {
	if s != nil {
		eamu.SetEntryPostDescription(*s)
	}
	return eamu
}

// ClearEntryPostDescription clears the value of the "EntryPostDescription" field.
func (eamu *ExamApplicationMTSPMMGUpdate) ClearEntryPostDescription() *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.ClearEntryPostDescription()
	return eamu
}

// SetPresentPostCode sets the "PresentPostCode" field.
func (eamu *ExamApplicationMTSPMMGUpdate) SetPresentPostCode(s string) *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.SetPresentPostCode(s)
	return eamu
}

// SetNillablePresentPostCode sets the "PresentPostCode" field if the given value is not nil.
func (eamu *ExamApplicationMTSPMMGUpdate) SetNillablePresentPostCode(s *string) *ExamApplicationMTSPMMGUpdate {
	if s != nil {
		eamu.SetPresentPostCode(*s)
	}
	return eamu
}

// ClearPresentPostCode clears the value of the "PresentPostCode" field.
func (eamu *ExamApplicationMTSPMMGUpdate) ClearPresentPostCode() *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.ClearPresentPostCode()
	return eamu
}

// SetPresentPostDescription sets the "PresentPostDescription" field.
func (eamu *ExamApplicationMTSPMMGUpdate) SetPresentPostDescription(s string) *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.SetPresentPostDescription(s)
	return eamu
}

// SetNillablePresentPostDescription sets the "PresentPostDescription" field if the given value is not nil.
func (eamu *ExamApplicationMTSPMMGUpdate) SetNillablePresentPostDescription(s *string) *ExamApplicationMTSPMMGUpdate {
	if s != nil {
		eamu.SetPresentPostDescription(*s)
	}
	return eamu
}

// ClearPresentPostDescription clears the value of the "PresentPostDescription" field.
func (eamu *ExamApplicationMTSPMMGUpdate) ClearPresentPostDescription() *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.ClearPresentPostDescription()
	return eamu
}

// SetFeederPostCode sets the "FeederPostCode" field.
func (eamu *ExamApplicationMTSPMMGUpdate) SetFeederPostCode(s string) *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.SetFeederPostCode(s)
	return eamu
}

// SetNillableFeederPostCode sets the "FeederPostCode" field if the given value is not nil.
func (eamu *ExamApplicationMTSPMMGUpdate) SetNillableFeederPostCode(s *string) *ExamApplicationMTSPMMGUpdate {
	if s != nil {
		eamu.SetFeederPostCode(*s)
	}
	return eamu
}

// ClearFeederPostCode clears the value of the "FeederPostCode" field.
func (eamu *ExamApplicationMTSPMMGUpdate) ClearFeederPostCode() *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.ClearFeederPostCode()
	return eamu
}

// SetFeederPostDescription sets the "FeederPostDescription" field.
func (eamu *ExamApplicationMTSPMMGUpdate) SetFeederPostDescription(s string) *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.SetFeederPostDescription(s)
	return eamu
}

// SetNillableFeederPostDescription sets the "FeederPostDescription" field if the given value is not nil.
func (eamu *ExamApplicationMTSPMMGUpdate) SetNillableFeederPostDescription(s *string) *ExamApplicationMTSPMMGUpdate {
	if s != nil {
		eamu.SetFeederPostDescription(*s)
	}
	return eamu
}

// ClearFeederPostDescription clears the value of the "FeederPostDescription" field.
func (eamu *ExamApplicationMTSPMMGUpdate) ClearFeederPostDescription() *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.ClearFeederPostDescription()
	return eamu
}

// SetFeederPostJoiningDate sets the "FeederPostJoiningDate" field.
func (eamu *ExamApplicationMTSPMMGUpdate) SetFeederPostJoiningDate(s string) *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.SetFeederPostJoiningDate(s)
	return eamu
}

// SetNillableFeederPostJoiningDate sets the "FeederPostJoiningDate" field if the given value is not nil.
func (eamu *ExamApplicationMTSPMMGUpdate) SetNillableFeederPostJoiningDate(s *string) *ExamApplicationMTSPMMGUpdate {
	if s != nil {
		eamu.SetFeederPostJoiningDate(*s)
	}
	return eamu
}

// ClearFeederPostJoiningDate clears the value of the "FeederPostJoiningDate" field.
func (eamu *ExamApplicationMTSPMMGUpdate) ClearFeederPostJoiningDate() *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.ClearFeederPostJoiningDate()
	return eamu
}

// SetDesignationID sets the "DesignationID" field.
func (eamu *ExamApplicationMTSPMMGUpdate) SetDesignationID(s string) *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.SetDesignationID(s)
	return eamu
}

// SetNillableDesignationID sets the "DesignationID" field if the given value is not nil.
func (eamu *ExamApplicationMTSPMMGUpdate) SetNillableDesignationID(s *string) *ExamApplicationMTSPMMGUpdate {
	if s != nil {
		eamu.SetDesignationID(*s)
	}
	return eamu
}

// ClearDesignationID clears the value of the "DesignationID" field.
func (eamu *ExamApplicationMTSPMMGUpdate) ClearDesignationID() *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.ClearDesignationID()
	return eamu
}

// SetPresentDesignation sets the "PresentDesignation" field.
func (eamu *ExamApplicationMTSPMMGUpdate) SetPresentDesignation(s string) *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.SetPresentDesignation(s)
	return eamu
}

// SetNillablePresentDesignation sets the "PresentDesignation" field if the given value is not nil.
func (eamu *ExamApplicationMTSPMMGUpdate) SetNillablePresentDesignation(s *string) *ExamApplicationMTSPMMGUpdate {
	if s != nil {
		eamu.SetPresentDesignation(*s)
	}
	return eamu
}

// ClearPresentDesignation clears the value of the "PresentDesignation" field.
func (eamu *ExamApplicationMTSPMMGUpdate) ClearPresentDesignation() *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.ClearPresentDesignation()
	return eamu
}

// SetEducationCode sets the "EducationCode" field.
func (eamu *ExamApplicationMTSPMMGUpdate) SetEducationCode(s string) *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.SetEducationCode(s)
	return eamu
}

// SetNillableEducationCode sets the "EducationCode" field if the given value is not nil.
func (eamu *ExamApplicationMTSPMMGUpdate) SetNillableEducationCode(s *string) *ExamApplicationMTSPMMGUpdate {
	if s != nil {
		eamu.SetEducationCode(*s)
	}
	return eamu
}

// ClearEducationCode clears the value of the "EducationCode" field.
func (eamu *ExamApplicationMTSPMMGUpdate) ClearEducationCode() *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.ClearEducationCode()
	return eamu
}

// SetEducationDescription sets the "EducationDescription" field.
func (eamu *ExamApplicationMTSPMMGUpdate) SetEducationDescription(s string) *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.SetEducationDescription(s)
	return eamu
}

// SetNillableEducationDescription sets the "EducationDescription" field if the given value is not nil.
func (eamu *ExamApplicationMTSPMMGUpdate) SetNillableEducationDescription(s *string) *ExamApplicationMTSPMMGUpdate {
	if s != nil {
		eamu.SetEducationDescription(*s)
	}
	return eamu
}

// ClearEducationDescription clears the value of the "EducationDescription" field.
func (eamu *ExamApplicationMTSPMMGUpdate) ClearEducationDescription() *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.ClearEducationDescription()
	return eamu
}

// SetFacilityUniqueID sets the "FacilityUniqueID" field.
func (eamu *ExamApplicationMTSPMMGUpdate) SetFacilityUniqueID(s string) *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.SetFacilityUniqueID(s)
	return eamu
}

// SetNillableFacilityUniqueID sets the "FacilityUniqueID" field if the given value is not nil.
func (eamu *ExamApplicationMTSPMMGUpdate) SetNillableFacilityUniqueID(s *string) *ExamApplicationMTSPMMGUpdate {
	if s != nil {
		eamu.SetFacilityUniqueID(*s)
	}
	return eamu
}

// ClearFacilityUniqueID clears the value of the "FacilityUniqueID" field.
func (eamu *ExamApplicationMTSPMMGUpdate) ClearFacilityUniqueID() *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.ClearFacilityUniqueID()
	return eamu
}

// SetWorkingOfficePincode sets the "WorkingOfficePincode" field.
func (eamu *ExamApplicationMTSPMMGUpdate) SetWorkingOfficePincode(i int32) *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.ResetWorkingOfficePincode()
	eamu.mutation.SetWorkingOfficePincode(i)
	return eamu
}

// SetNillableWorkingOfficePincode sets the "WorkingOfficePincode" field if the given value is not nil.
func (eamu *ExamApplicationMTSPMMGUpdate) SetNillableWorkingOfficePincode(i *int32) *ExamApplicationMTSPMMGUpdate {
	if i != nil {
		eamu.SetWorkingOfficePincode(*i)
	}
	return eamu
}

// AddWorkingOfficePincode adds i to the "WorkingOfficePincode" field.
func (eamu *ExamApplicationMTSPMMGUpdate) AddWorkingOfficePincode(i int32) *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.AddWorkingOfficePincode(i)
	return eamu
}

// ClearWorkingOfficePincode clears the value of the "WorkingOfficePincode" field.
func (eamu *ExamApplicationMTSPMMGUpdate) ClearWorkingOfficePincode() *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.ClearWorkingOfficePincode()
	return eamu
}

// SetWorkingOfficeFacilityID sets the "WorkingOfficeFacilityID" field.
func (eamu *ExamApplicationMTSPMMGUpdate) SetWorkingOfficeFacilityID(s string) *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.SetWorkingOfficeFacilityID(s)
	return eamu
}

// SetNillableWorkingOfficeFacilityID sets the "WorkingOfficeFacilityID" field if the given value is not nil.
func (eamu *ExamApplicationMTSPMMGUpdate) SetNillableWorkingOfficeFacilityID(s *string) *ExamApplicationMTSPMMGUpdate {
	if s != nil {
		eamu.SetWorkingOfficeFacilityID(*s)
	}
	return eamu
}

// ClearWorkingOfficeFacilityID clears the value of the "WorkingOfficeFacilityID" field.
func (eamu *ExamApplicationMTSPMMGUpdate) ClearWorkingOfficeFacilityID() *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.ClearWorkingOfficeFacilityID()
	return eamu
}

// SetWorkingOfficeName sets the "WorkingOfficeName" field.
func (eamu *ExamApplicationMTSPMMGUpdate) SetWorkingOfficeName(s string) *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.SetWorkingOfficeName(s)
	return eamu
}

// SetNillableWorkingOfficeName sets the "WorkingOfficeName" field if the given value is not nil.
func (eamu *ExamApplicationMTSPMMGUpdate) SetNillableWorkingOfficeName(s *string) *ExamApplicationMTSPMMGUpdate {
	if s != nil {
		eamu.SetWorkingOfficeName(*s)
	}
	return eamu
}

// ClearWorkingOfficeName clears the value of the "WorkingOfficeName" field.
func (eamu *ExamApplicationMTSPMMGUpdate) ClearWorkingOfficeName() *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.ClearWorkingOfficeName()
	return eamu
}

// SetWorkingOfficeCircleFacilityID sets the "WorkingOfficeCircleFacilityID" field.
func (eamu *ExamApplicationMTSPMMGUpdate) SetWorkingOfficeCircleFacilityID(s string) *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.SetWorkingOfficeCircleFacilityID(s)
	return eamu
}

// SetNillableWorkingOfficeCircleFacilityID sets the "WorkingOfficeCircleFacilityID" field if the given value is not nil.
func (eamu *ExamApplicationMTSPMMGUpdate) SetNillableWorkingOfficeCircleFacilityID(s *string) *ExamApplicationMTSPMMGUpdate {
	if s != nil {
		eamu.SetWorkingOfficeCircleFacilityID(*s)
	}
	return eamu
}

// ClearWorkingOfficeCircleFacilityID clears the value of the "WorkingOfficeCircleFacilityID" field.
func (eamu *ExamApplicationMTSPMMGUpdate) ClearWorkingOfficeCircleFacilityID() *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.ClearWorkingOfficeCircleFacilityID()
	return eamu
}

// SetWorkingOfficeCircleName sets the "WorkingOfficeCircleName" field.
func (eamu *ExamApplicationMTSPMMGUpdate) SetWorkingOfficeCircleName(s string) *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.SetWorkingOfficeCircleName(s)
	return eamu
}

// SetNillableWorkingOfficeCircleName sets the "WorkingOfficeCircleName" field if the given value is not nil.
func (eamu *ExamApplicationMTSPMMGUpdate) SetNillableWorkingOfficeCircleName(s *string) *ExamApplicationMTSPMMGUpdate {
	if s != nil {
		eamu.SetWorkingOfficeCircleName(*s)
	}
	return eamu
}

// ClearWorkingOfficeCircleName clears the value of the "WorkingOfficeCircleName" field.
func (eamu *ExamApplicationMTSPMMGUpdate) ClearWorkingOfficeCircleName() *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.ClearWorkingOfficeCircleName()
	return eamu
}

// SetWorkingOfficeRegionFacilityID sets the "WorkingOfficeRegionFacilityID" field.
func (eamu *ExamApplicationMTSPMMGUpdate) SetWorkingOfficeRegionFacilityID(s string) *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.SetWorkingOfficeRegionFacilityID(s)
	return eamu
}

// SetNillableWorkingOfficeRegionFacilityID sets the "WorkingOfficeRegionFacilityID" field if the given value is not nil.
func (eamu *ExamApplicationMTSPMMGUpdate) SetNillableWorkingOfficeRegionFacilityID(s *string) *ExamApplicationMTSPMMGUpdate {
	if s != nil {
		eamu.SetWorkingOfficeRegionFacilityID(*s)
	}
	return eamu
}

// ClearWorkingOfficeRegionFacilityID clears the value of the "WorkingOfficeRegionFacilityID" field.
func (eamu *ExamApplicationMTSPMMGUpdate) ClearWorkingOfficeRegionFacilityID() *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.ClearWorkingOfficeRegionFacilityID()
	return eamu
}

// SetWorkingOfficeRegionName sets the "WorkingOfficeRegionName" field.
func (eamu *ExamApplicationMTSPMMGUpdate) SetWorkingOfficeRegionName(s string) *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.SetWorkingOfficeRegionName(s)
	return eamu
}

// SetNillableWorkingOfficeRegionName sets the "WorkingOfficeRegionName" field if the given value is not nil.
func (eamu *ExamApplicationMTSPMMGUpdate) SetNillableWorkingOfficeRegionName(s *string) *ExamApplicationMTSPMMGUpdate {
	if s != nil {
		eamu.SetWorkingOfficeRegionName(*s)
	}
	return eamu
}

// ClearWorkingOfficeRegionName clears the value of the "WorkingOfficeRegionName" field.
func (eamu *ExamApplicationMTSPMMGUpdate) ClearWorkingOfficeRegionName() *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.ClearWorkingOfficeRegionName()
	return eamu
}

// SetWorkingOfficeDivisionFacilityID sets the "WorkingOfficeDivisionFacilityID" field.
func (eamu *ExamApplicationMTSPMMGUpdate) SetWorkingOfficeDivisionFacilityID(s string) *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.SetWorkingOfficeDivisionFacilityID(s)
	return eamu
}

// SetNillableWorkingOfficeDivisionFacilityID sets the "WorkingOfficeDivisionFacilityID" field if the given value is not nil.
func (eamu *ExamApplicationMTSPMMGUpdate) SetNillableWorkingOfficeDivisionFacilityID(s *string) *ExamApplicationMTSPMMGUpdate {
	if s != nil {
		eamu.SetWorkingOfficeDivisionFacilityID(*s)
	}
	return eamu
}

// ClearWorkingOfficeDivisionFacilityID clears the value of the "WorkingOfficeDivisionFacilityID" field.
func (eamu *ExamApplicationMTSPMMGUpdate) ClearWorkingOfficeDivisionFacilityID() *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.ClearWorkingOfficeDivisionFacilityID()
	return eamu
}

// SetWorkingOfficeDivisionName sets the "WorkingOfficeDivisionName" field.
func (eamu *ExamApplicationMTSPMMGUpdate) SetWorkingOfficeDivisionName(s string) *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.SetWorkingOfficeDivisionName(s)
	return eamu
}

// SetNillableWorkingOfficeDivisionName sets the "WorkingOfficeDivisionName" field if the given value is not nil.
func (eamu *ExamApplicationMTSPMMGUpdate) SetNillableWorkingOfficeDivisionName(s *string) *ExamApplicationMTSPMMGUpdate {
	if s != nil {
		eamu.SetWorkingOfficeDivisionName(*s)
	}
	return eamu
}

// ClearWorkingOfficeDivisionName clears the value of the "WorkingOfficeDivisionName" field.
func (eamu *ExamApplicationMTSPMMGUpdate) ClearWorkingOfficeDivisionName() *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.ClearWorkingOfficeDivisionName()
	return eamu
}

// SetReportingOfficeFacilityID sets the "ReportingOfficeFacilityID" field.
func (eamu *ExamApplicationMTSPMMGUpdate) SetReportingOfficeFacilityID(s string) *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.SetReportingOfficeFacilityID(s)
	return eamu
}

// SetNillableReportingOfficeFacilityID sets the "ReportingOfficeFacilityID" field if the given value is not nil.
func (eamu *ExamApplicationMTSPMMGUpdate) SetNillableReportingOfficeFacilityID(s *string) *ExamApplicationMTSPMMGUpdate {
	if s != nil {
		eamu.SetReportingOfficeFacilityID(*s)
	}
	return eamu
}

// ClearReportingOfficeFacilityID clears the value of the "ReportingOfficeFacilityID" field.
func (eamu *ExamApplicationMTSPMMGUpdate) ClearReportingOfficeFacilityID() *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.ClearReportingOfficeFacilityID()
	return eamu
}

// SetReportingOfficeName sets the "ReportingOfficeName" field.
func (eamu *ExamApplicationMTSPMMGUpdate) SetReportingOfficeName(s string) *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.SetReportingOfficeName(s)
	return eamu
}

// SetNillableReportingOfficeName sets the "ReportingOfficeName" field if the given value is not nil.
func (eamu *ExamApplicationMTSPMMGUpdate) SetNillableReportingOfficeName(s *string) *ExamApplicationMTSPMMGUpdate {
	if s != nil {
		eamu.SetReportingOfficeName(*s)
	}
	return eamu
}

// ClearReportingOfficeName clears the value of the "ReportingOfficeName" field.
func (eamu *ExamApplicationMTSPMMGUpdate) ClearReportingOfficeName() *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.ClearReportingOfficeName()
	return eamu
}

// SetLienControllingOfficeID sets the "LienControllingOfficeID" field.
func (eamu *ExamApplicationMTSPMMGUpdate) SetLienControllingOfficeID(s string) *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.SetLienControllingOfficeID(s)
	return eamu
}

// SetNillableLienControllingOfficeID sets the "LienControllingOfficeID" field if the given value is not nil.
func (eamu *ExamApplicationMTSPMMGUpdate) SetNillableLienControllingOfficeID(s *string) *ExamApplicationMTSPMMGUpdate {
	if s != nil {
		eamu.SetLienControllingOfficeID(*s)
	}
	return eamu
}

// ClearLienControllingOfficeID clears the value of the "LienControllingOfficeID" field.
func (eamu *ExamApplicationMTSPMMGUpdate) ClearLienControllingOfficeID() *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.ClearLienControllingOfficeID()
	return eamu
}

// SetLienControllingOfficeName sets the "LienControllingOfficeName" field.
func (eamu *ExamApplicationMTSPMMGUpdate) SetLienControllingOfficeName(s string) *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.SetLienControllingOfficeName(s)
	return eamu
}

// SetNillableLienControllingOfficeName sets the "LienControllingOfficeName" field if the given value is not nil.
func (eamu *ExamApplicationMTSPMMGUpdate) SetNillableLienControllingOfficeName(s *string) *ExamApplicationMTSPMMGUpdate {
	if s != nil {
		eamu.SetLienControllingOfficeName(*s)
	}
	return eamu
}

// ClearLienControllingOfficeName clears the value of the "LienControllingOfficeName" field.
func (eamu *ExamApplicationMTSPMMGUpdate) ClearLienControllingOfficeName() *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.ClearLienControllingOfficeName()
	return eamu
}

// SetInDeputation sets the "InDeputation" field.
func (eamu *ExamApplicationMTSPMMGUpdate) SetInDeputation(s string) *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.SetInDeputation(s)
	return eamu
}

// SetNillableInDeputation sets the "InDeputation" field if the given value is not nil.
func (eamu *ExamApplicationMTSPMMGUpdate) SetNillableInDeputation(s *string) *ExamApplicationMTSPMMGUpdate {
	if s != nil {
		eamu.SetInDeputation(*s)
	}
	return eamu
}

// ClearInDeputation clears the value of the "InDeputation" field.
func (eamu *ExamApplicationMTSPMMGUpdate) ClearInDeputation() *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.ClearInDeputation()
	return eamu
}

// SetDeputationType sets the "DeputationType" field.
func (eamu *ExamApplicationMTSPMMGUpdate) SetDeputationType(s string) *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.SetDeputationType(s)
	return eamu
}

// SetNillableDeputationType sets the "DeputationType" field if the given value is not nil.
func (eamu *ExamApplicationMTSPMMGUpdate) SetNillableDeputationType(s *string) *ExamApplicationMTSPMMGUpdate {
	if s != nil {
		eamu.SetDeputationType(*s)
	}
	return eamu
}

// ClearDeputationType clears the value of the "DeputationType" field.
func (eamu *ExamApplicationMTSPMMGUpdate) ClearDeputationType() *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.ClearDeputationType()
	return eamu
}

// SetDeputationOfficeUniqueId sets the "DeputationOfficeUniqueId" field.
func (eamu *ExamApplicationMTSPMMGUpdate) SetDeputationOfficeUniqueId(s string) *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.SetDeputationOfficeUniqueId(s)
	return eamu
}

// SetNillableDeputationOfficeUniqueId sets the "DeputationOfficeUniqueId" field if the given value is not nil.
func (eamu *ExamApplicationMTSPMMGUpdate) SetNillableDeputationOfficeUniqueId(s *string) *ExamApplicationMTSPMMGUpdate {
	if s != nil {
		eamu.SetDeputationOfficeUniqueId(*s)
	}
	return eamu
}

// ClearDeputationOfficeUniqueId clears the value of the "DeputationOfficeUniqueId" field.
func (eamu *ExamApplicationMTSPMMGUpdate) ClearDeputationOfficeUniqueId() *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.ClearDeputationOfficeUniqueId()
	return eamu
}

// SetDeputationOfficeFacilityID sets the "DeputationOfficeFacilityID" field.
func (eamu *ExamApplicationMTSPMMGUpdate) SetDeputationOfficeFacilityID(s string) *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.SetDeputationOfficeFacilityID(s)
	return eamu
}

// SetNillableDeputationOfficeFacilityID sets the "DeputationOfficeFacilityID" field if the given value is not nil.
func (eamu *ExamApplicationMTSPMMGUpdate) SetNillableDeputationOfficeFacilityID(s *string) *ExamApplicationMTSPMMGUpdate {
	if s != nil {
		eamu.SetDeputationOfficeFacilityID(*s)
	}
	return eamu
}

// ClearDeputationOfficeFacilityID clears the value of the "DeputationOfficeFacilityID" field.
func (eamu *ExamApplicationMTSPMMGUpdate) ClearDeputationOfficeFacilityID() *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.ClearDeputationOfficeFacilityID()
	return eamu
}

// SetDeputationOfficeName sets the "DeputationOfficeName" field.
func (eamu *ExamApplicationMTSPMMGUpdate) SetDeputationOfficeName(s string) *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.SetDeputationOfficeName(s)
	return eamu
}

// SetNillableDeputationOfficeName sets the "DeputationOfficeName" field if the given value is not nil.
func (eamu *ExamApplicationMTSPMMGUpdate) SetNillableDeputationOfficeName(s *string) *ExamApplicationMTSPMMGUpdate {
	if s != nil {
		eamu.SetDeputationOfficeName(*s)
	}
	return eamu
}

// ClearDeputationOfficeName clears the value of the "DeputationOfficeName" field.
func (eamu *ExamApplicationMTSPMMGUpdate) ClearDeputationOfficeName() *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.ClearDeputationOfficeName()
	return eamu
}

// SetDeputationControllingOfficeID sets the "DeputationControllingOfficeID" field.
func (eamu *ExamApplicationMTSPMMGUpdate) SetDeputationControllingOfficeID(s string) *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.SetDeputationControllingOfficeID(s)
	return eamu
}

// SetNillableDeputationControllingOfficeID sets the "DeputationControllingOfficeID" field if the given value is not nil.
func (eamu *ExamApplicationMTSPMMGUpdate) SetNillableDeputationControllingOfficeID(s *string) *ExamApplicationMTSPMMGUpdate {
	if s != nil {
		eamu.SetDeputationControllingOfficeID(*s)
	}
	return eamu
}

// ClearDeputationControllingOfficeID clears the value of the "DeputationControllingOfficeID" field.
func (eamu *ExamApplicationMTSPMMGUpdate) ClearDeputationControllingOfficeID() *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.ClearDeputationControllingOfficeID()
	return eamu
}

// SetDeputationControllingOfficeName sets the "DeputationControllingOfficeName" field.
func (eamu *ExamApplicationMTSPMMGUpdate) SetDeputationControllingOfficeName(s string) *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.SetDeputationControllingOfficeName(s)
	return eamu
}

// SetNillableDeputationControllingOfficeName sets the "DeputationControllingOfficeName" field if the given value is not nil.
func (eamu *ExamApplicationMTSPMMGUpdate) SetNillableDeputationControllingOfficeName(s *string) *ExamApplicationMTSPMMGUpdate {
	if s != nil {
		eamu.SetDeputationControllingOfficeName(*s)
	}
	return eamu
}

// ClearDeputationControllingOfficeName clears the value of the "DeputationControllingOfficeName" field.
func (eamu *ExamApplicationMTSPMMGUpdate) ClearDeputationControllingOfficeName() *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.ClearDeputationControllingOfficeName()
	return eamu
}

// SetControllingOfficeFacilityID sets the "ControllingOfficeFacilityID" field.
func (eamu *ExamApplicationMTSPMMGUpdate) SetControllingOfficeFacilityID(s string) *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.SetControllingOfficeFacilityID(s)
	return eamu
}

// SetNillableControllingOfficeFacilityID sets the "ControllingOfficeFacilityID" field if the given value is not nil.
func (eamu *ExamApplicationMTSPMMGUpdate) SetNillableControllingOfficeFacilityID(s *string) *ExamApplicationMTSPMMGUpdate {
	if s != nil {
		eamu.SetControllingOfficeFacilityID(*s)
	}
	return eamu
}

// ClearControllingOfficeFacilityID clears the value of the "ControllingOfficeFacilityID" field.
func (eamu *ExamApplicationMTSPMMGUpdate) ClearControllingOfficeFacilityID() *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.ClearControllingOfficeFacilityID()
	return eamu
}

// SetControllingOfficeName sets the "ControllingOfficeName" field.
func (eamu *ExamApplicationMTSPMMGUpdate) SetControllingOfficeName(s string) *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.SetControllingOfficeName(s)
	return eamu
}

// SetNillableControllingOfficeName sets the "ControllingOfficeName" field if the given value is not nil.
func (eamu *ExamApplicationMTSPMMGUpdate) SetNillableControllingOfficeName(s *string) *ExamApplicationMTSPMMGUpdate {
	if s != nil {
		eamu.SetControllingOfficeName(*s)
	}
	return eamu
}

// ClearControllingOfficeName clears the value of the "ControllingOfficeName" field.
func (eamu *ExamApplicationMTSPMMGUpdate) ClearControllingOfficeName() *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.ClearControllingOfficeName()
	return eamu
}

// SetNodalOfficeFacilityID sets the "NodalOfficeFacilityID" field.
func (eamu *ExamApplicationMTSPMMGUpdate) SetNodalOfficeFacilityID(s string) *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.SetNodalOfficeFacilityID(s)
	return eamu
}

// SetNillableNodalOfficeFacilityID sets the "NodalOfficeFacilityID" field if the given value is not nil.
func (eamu *ExamApplicationMTSPMMGUpdate) SetNillableNodalOfficeFacilityID(s *string) *ExamApplicationMTSPMMGUpdate {
	if s != nil {
		eamu.SetNodalOfficeFacilityID(*s)
	}
	return eamu
}

// ClearNodalOfficeFacilityID clears the value of the "NodalOfficeFacilityID" field.
func (eamu *ExamApplicationMTSPMMGUpdate) ClearNodalOfficeFacilityID() *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.ClearNodalOfficeFacilityID()
	return eamu
}

// SetNodalOfficeName sets the "NodalOfficeName" field.
func (eamu *ExamApplicationMTSPMMGUpdate) SetNodalOfficeName(s string) *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.SetNodalOfficeName(s)
	return eamu
}

// SetNillableNodalOfficeName sets the "NodalOfficeName" field if the given value is not nil.
func (eamu *ExamApplicationMTSPMMGUpdate) SetNillableNodalOfficeName(s *string) *ExamApplicationMTSPMMGUpdate {
	if s != nil {
		eamu.SetNodalOfficeName(*s)
	}
	return eamu
}

// ClearNodalOfficeName clears the value of the "NodalOfficeName" field.
func (eamu *ExamApplicationMTSPMMGUpdate) ClearNodalOfficeName() *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.ClearNodalOfficeName()
	return eamu
}

// SetExamCityCenterCode sets the "ExamCityCenterCode" field.
func (eamu *ExamApplicationMTSPMMGUpdate) SetExamCityCenterCode(i int32) *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.SetExamCityCenterCode(i)
	return eamu
}

// SetNillableExamCityCenterCode sets the "ExamCityCenterCode" field if the given value is not nil.
func (eamu *ExamApplicationMTSPMMGUpdate) SetNillableExamCityCenterCode(i *int32) *ExamApplicationMTSPMMGUpdate {
	if i != nil {
		eamu.SetExamCityCenterCode(*i)
	}
	return eamu
}

// ClearExamCityCenterCode clears the value of the "ExamCityCenterCode" field.
func (eamu *ExamApplicationMTSPMMGUpdate) ClearExamCityCenterCode() *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.ClearExamCityCenterCode()
	return eamu
}

// SetCenterFacilityId sets the "CenterFacilityId" field.
func (eamu *ExamApplicationMTSPMMGUpdate) SetCenterFacilityId(s string) *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.SetCenterFacilityId(s)
	return eamu
}

// SetNillableCenterFacilityId sets the "CenterFacilityId" field if the given value is not nil.
func (eamu *ExamApplicationMTSPMMGUpdate) SetNillableCenterFacilityId(s *string) *ExamApplicationMTSPMMGUpdate {
	if s != nil {
		eamu.SetCenterFacilityId(*s)
	}
	return eamu
}

// ClearCenterFacilityId clears the value of the "CenterFacilityId" field.
func (eamu *ExamApplicationMTSPMMGUpdate) ClearCenterFacilityId() *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.ClearCenterFacilityId()
	return eamu
}

// SetCentrePreference sets the "CentrePreference" field.
func (eamu *ExamApplicationMTSPMMGUpdate) SetCentrePreference(s string) *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.SetCentrePreference(s)
	return eamu
}

// SetNillableCentrePreference sets the "CentrePreference" field if the given value is not nil.
func (eamu *ExamApplicationMTSPMMGUpdate) SetNillableCentrePreference(s *string) *ExamApplicationMTSPMMGUpdate {
	if s != nil {
		eamu.SetCentrePreference(*s)
	}
	return eamu
}

// ClearCentrePreference clears the value of the "CentrePreference" field.
func (eamu *ExamApplicationMTSPMMGUpdate) ClearCentrePreference() *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.ClearCentrePreference()
	return eamu
}

// SetSignature sets the "Signature" field.
func (eamu *ExamApplicationMTSPMMGUpdate) SetSignature(s string) *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.SetSignature(s)
	return eamu
}

// SetNillableSignature sets the "Signature" field if the given value is not nil.
func (eamu *ExamApplicationMTSPMMGUpdate) SetNillableSignature(s *string) *ExamApplicationMTSPMMGUpdate {
	if s != nil {
		eamu.SetSignature(*s)
	}
	return eamu
}

// ClearSignature clears the value of the "Signature" field.
func (eamu *ExamApplicationMTSPMMGUpdate) ClearSignature() *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.ClearSignature()
	return eamu
}

// SetPhoto sets the "Photo" field.
func (eamu *ExamApplicationMTSPMMGUpdate) SetPhoto(s string) *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.SetPhoto(s)
	return eamu
}

// SetNillablePhoto sets the "Photo" field if the given value is not nil.
func (eamu *ExamApplicationMTSPMMGUpdate) SetNillablePhoto(s *string) *ExamApplicationMTSPMMGUpdate {
	if s != nil {
		eamu.SetPhoto(*s)
	}
	return eamu
}

// ClearPhoto clears the value of the "Photo" field.
func (eamu *ExamApplicationMTSPMMGUpdate) ClearPhoto() *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.ClearPhoto()
	return eamu
}

// SetSignaturePath sets the "SignaturePath" field.
func (eamu *ExamApplicationMTSPMMGUpdate) SetSignaturePath(s string) *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.SetSignaturePath(s)
	return eamu
}

// SetNillableSignaturePath sets the "SignaturePath" field if the given value is not nil.
func (eamu *ExamApplicationMTSPMMGUpdate) SetNillableSignaturePath(s *string) *ExamApplicationMTSPMMGUpdate {
	if s != nil {
		eamu.SetSignaturePath(*s)
	}
	return eamu
}

// ClearSignaturePath clears the value of the "SignaturePath" field.
func (eamu *ExamApplicationMTSPMMGUpdate) ClearSignaturePath() *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.ClearSignaturePath()
	return eamu
}

// SetPhotoPath sets the "PhotoPath" field.
func (eamu *ExamApplicationMTSPMMGUpdate) SetPhotoPath(s string) *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.SetPhotoPath(s)
	return eamu
}

// SetNillablePhotoPath sets the "PhotoPath" field if the given value is not nil.
func (eamu *ExamApplicationMTSPMMGUpdate) SetNillablePhotoPath(s *string) *ExamApplicationMTSPMMGUpdate {
	if s != nil {
		eamu.SetPhotoPath(*s)
	}
	return eamu
}

// ClearPhotoPath clears the value of the "PhotoPath" field.
func (eamu *ExamApplicationMTSPMMGUpdate) ClearPhotoPath() *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.ClearPhotoPath()
	return eamu
}

// SetCandidatePhoto sets the "CandidatePhoto" field.
func (eamu *ExamApplicationMTSPMMGUpdate) SetCandidatePhoto(b []byte) *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.SetCandidatePhoto(b)
	return eamu
}

// ClearCandidatePhoto clears the value of the "CandidatePhoto" field.
func (eamu *ExamApplicationMTSPMMGUpdate) ClearCandidatePhoto() *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.ClearCandidatePhoto()
	return eamu
}

// SetCandidateSignature sets the "CandidateSignature" field.
func (eamu *ExamApplicationMTSPMMGUpdate) SetCandidateSignature(b []byte) *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.SetCandidateSignature(b)
	return eamu
}

// ClearCandidateSignature clears the value of the "CandidateSignature" field.
func (eamu *ExamApplicationMTSPMMGUpdate) ClearCandidateSignature() *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.ClearCandidateSignature()
	return eamu
}

// SetTempHallTicket sets the "TempHallTicket" field.
func (eamu *ExamApplicationMTSPMMGUpdate) SetTempHallTicket(s string) *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.SetTempHallTicket(s)
	return eamu
}

// SetNillableTempHallTicket sets the "TempHallTicket" field if the given value is not nil.
func (eamu *ExamApplicationMTSPMMGUpdate) SetNillableTempHallTicket(s *string) *ExamApplicationMTSPMMGUpdate {
	if s != nil {
		eamu.SetTempHallTicket(*s)
	}
	return eamu
}

// ClearTempHallTicket clears the value of the "TempHallTicket" field.
func (eamu *ExamApplicationMTSPMMGUpdate) ClearTempHallTicket() *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.ClearTempHallTicket()
	return eamu
}

// SetCandidateRemarks sets the "CandidateRemarks" field.
func (eamu *ExamApplicationMTSPMMGUpdate) SetCandidateRemarks(s string) *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.SetCandidateRemarks(s)
	return eamu
}

// SetNillableCandidateRemarks sets the "CandidateRemarks" field if the given value is not nil.
func (eamu *ExamApplicationMTSPMMGUpdate) SetNillableCandidateRemarks(s *string) *ExamApplicationMTSPMMGUpdate {
	if s != nil {
		eamu.SetCandidateRemarks(*s)
	}
	return eamu
}

// ClearCandidateRemarks clears the value of the "CandidateRemarks" field.
func (eamu *ExamApplicationMTSPMMGUpdate) ClearCandidateRemarks() *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.ClearCandidateRemarks()
	return eamu
}

// SetVAGeneralRemarks sets the "VAGeneralRemarks" field.
func (eamu *ExamApplicationMTSPMMGUpdate) SetVAGeneralRemarks(s string) *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.SetVAGeneralRemarks(s)
	return eamu
}

// SetNillableVAGeneralRemarks sets the "VAGeneralRemarks" field if the given value is not nil.
func (eamu *ExamApplicationMTSPMMGUpdate) SetNillableVAGeneralRemarks(s *string) *ExamApplicationMTSPMMGUpdate {
	if s != nil {
		eamu.SetVAGeneralRemarks(*s)
	}
	return eamu
}

// ClearVAGeneralRemarks clears the value of the "VAGeneralRemarks" field.
func (eamu *ExamApplicationMTSPMMGUpdate) ClearVAGeneralRemarks() *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.ClearVAGeneralRemarks()
	return eamu
}

// SetCAGeneralRemarks sets the "CAGeneralRemarks" field.
func (eamu *ExamApplicationMTSPMMGUpdate) SetCAGeneralRemarks(s string) *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.SetCAGeneralRemarks(s)
	return eamu
}

// SetNillableCAGeneralRemarks sets the "CAGeneralRemarks" field if the given value is not nil.
func (eamu *ExamApplicationMTSPMMGUpdate) SetNillableCAGeneralRemarks(s *string) *ExamApplicationMTSPMMGUpdate {
	if s != nil {
		eamu.SetCAGeneralRemarks(*s)
	}
	return eamu
}

// ClearCAGeneralRemarks clears the value of the "CAGeneralRemarks" field.
func (eamu *ExamApplicationMTSPMMGUpdate) ClearCAGeneralRemarks() *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.ClearCAGeneralRemarks()
	return eamu
}

// SetNAGeneralRemarks sets the "NAGeneralRemarks" field.
func (eamu *ExamApplicationMTSPMMGUpdate) SetNAGeneralRemarks(s string) *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.SetNAGeneralRemarks(s)
	return eamu
}

// SetNillableNAGeneralRemarks sets the "NAGeneralRemarks" field if the given value is not nil.
func (eamu *ExamApplicationMTSPMMGUpdate) SetNillableNAGeneralRemarks(s *string) *ExamApplicationMTSPMMGUpdate {
	if s != nil {
		eamu.SetNAGeneralRemarks(*s)
	}
	return eamu
}

// ClearNAGeneralRemarks clears the value of the "NAGeneralRemarks" field.
func (eamu *ExamApplicationMTSPMMGUpdate) ClearNAGeneralRemarks() *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.ClearNAGeneralRemarks()
	return eamu
}

// SetApplicationStatus sets the "ApplicationStatus" field.
func (eamu *ExamApplicationMTSPMMGUpdate) SetApplicationStatus(s string) *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.SetApplicationStatus(s)
	return eamu
}

// SetNillableApplicationStatus sets the "ApplicationStatus" field if the given value is not nil.
func (eamu *ExamApplicationMTSPMMGUpdate) SetNillableApplicationStatus(s *string) *ExamApplicationMTSPMMGUpdate {
	if s != nil {
		eamu.SetApplicationStatus(*s)
	}
	return eamu
}

// ClearApplicationStatus clears the value of the "ApplicationStatus" field.
func (eamu *ExamApplicationMTSPMMGUpdate) ClearApplicationStatus() *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.ClearApplicationStatus()
	return eamu
}

// SetStatus sets the "Status" field.
func (eamu *ExamApplicationMTSPMMGUpdate) SetStatus(s string) *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.SetStatus(s)
	return eamu
}

// SetNillableStatus sets the "Status" field if the given value is not nil.
func (eamu *ExamApplicationMTSPMMGUpdate) SetNillableStatus(s *string) *ExamApplicationMTSPMMGUpdate {
	if s != nil {
		eamu.SetStatus(*s)
	}
	return eamu
}

// ClearStatus clears the value of the "Status" field.
func (eamu *ExamApplicationMTSPMMGUpdate) ClearStatus() *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.ClearStatus()
	return eamu
}

// SetVAUserId sets the "VA_UserId" field.
func (eamu *ExamApplicationMTSPMMGUpdate) SetVAUserId(i int32) *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.ResetVAUserId()
	eamu.mutation.SetVAUserId(i)
	return eamu
}

// SetNillableVAUserId sets the "VA_UserId" field if the given value is not nil.
func (eamu *ExamApplicationMTSPMMGUpdate) SetNillableVAUserId(i *int32) *ExamApplicationMTSPMMGUpdate {
	if i != nil {
		eamu.SetVAUserId(*i)
	}
	return eamu
}

// AddVAUserId adds i to the "VA_UserId" field.
func (eamu *ExamApplicationMTSPMMGUpdate) AddVAUserId(i int32) *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.AddVAUserId(i)
	return eamu
}

// ClearVAUserId clears the value of the "VA_UserId" field.
func (eamu *ExamApplicationMTSPMMGUpdate) ClearVAUserId() *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.ClearVAUserId()
	return eamu
}

// SetVAUserName sets the "VA_UserName" field.
func (eamu *ExamApplicationMTSPMMGUpdate) SetVAUserName(s string) *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.SetVAUserName(s)
	return eamu
}

// SetNillableVAUserName sets the "VA_UserName" field if the given value is not nil.
func (eamu *ExamApplicationMTSPMMGUpdate) SetNillableVAUserName(s *string) *ExamApplicationMTSPMMGUpdate {
	if s != nil {
		eamu.SetVAUserName(*s)
	}
	return eamu
}

// ClearVAUserName clears the value of the "VA_UserName" field.
func (eamu *ExamApplicationMTSPMMGUpdate) ClearVAUserName() *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.ClearVAUserName()
	return eamu
}

// SetVAEmployeeID sets the "VA_EmployeeID" field.
func (eamu *ExamApplicationMTSPMMGUpdate) SetVAEmployeeID(s string) *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.SetVAEmployeeID(s)
	return eamu
}

// SetNillableVAEmployeeID sets the "VA_EmployeeID" field if the given value is not nil.
func (eamu *ExamApplicationMTSPMMGUpdate) SetNillableVAEmployeeID(s *string) *ExamApplicationMTSPMMGUpdate {
	if s != nil {
		eamu.SetVAEmployeeID(*s)
	}
	return eamu
}

// ClearVAEmployeeID clears the value of the "VA_EmployeeID" field.
func (eamu *ExamApplicationMTSPMMGUpdate) ClearVAEmployeeID() *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.ClearVAEmployeeID()
	return eamu
}

// SetVAEmployeeDesignation sets the "VA_EmployeeDesignation" field.
func (eamu *ExamApplicationMTSPMMGUpdate) SetVAEmployeeDesignation(s string) *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.SetVAEmployeeDesignation(s)
	return eamu
}

// SetNillableVAEmployeeDesignation sets the "VA_EmployeeDesignation" field if the given value is not nil.
func (eamu *ExamApplicationMTSPMMGUpdate) SetNillableVAEmployeeDesignation(s *string) *ExamApplicationMTSPMMGUpdate {
	if s != nil {
		eamu.SetVAEmployeeDesignation(*s)
	}
	return eamu
}

// ClearVAEmployeeDesignation clears the value of the "VA_EmployeeDesignation" field.
func (eamu *ExamApplicationMTSPMMGUpdate) ClearVAEmployeeDesignation() *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.ClearVAEmployeeDesignation()
	return eamu
}

// SetVARemarks sets the "VA_Remarks" field.
func (eamu *ExamApplicationMTSPMMGUpdate) SetVARemarks(s string) *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.SetVARemarks(s)
	return eamu
}

// SetNillableVARemarks sets the "VA_Remarks" field if the given value is not nil.
func (eamu *ExamApplicationMTSPMMGUpdate) SetNillableVARemarks(s *string) *ExamApplicationMTSPMMGUpdate {
	if s != nil {
		eamu.SetVARemarks(*s)
	}
	return eamu
}

// ClearVARemarks clears the value of the "VA_Remarks" field.
func (eamu *ExamApplicationMTSPMMGUpdate) ClearVARemarks() *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.ClearVARemarks()
	return eamu
}

// SetVADate sets the "VA_Date" field.
func (eamu *ExamApplicationMTSPMMGUpdate) SetVADate(t time.Time) *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.SetVADate(t)
	return eamu
}

// SetNillableVADate sets the "VA_Date" field if the given value is not nil.
func (eamu *ExamApplicationMTSPMMGUpdate) SetNillableVADate(t *time.Time) *ExamApplicationMTSPMMGUpdate {
	if t != nil {
		eamu.SetVADate(*t)
	}
	return eamu
}

// ClearVADate clears the value of the "VA_Date" field.
func (eamu *ExamApplicationMTSPMMGUpdate) ClearVADate() *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.ClearVADate()
	return eamu
}

// SetCAUserId sets the "CA_UserId" field.
func (eamu *ExamApplicationMTSPMMGUpdate) SetCAUserId(i int32) *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.ResetCAUserId()
	eamu.mutation.SetCAUserId(i)
	return eamu
}

// SetNillableCAUserId sets the "CA_UserId" field if the given value is not nil.
func (eamu *ExamApplicationMTSPMMGUpdate) SetNillableCAUserId(i *int32) *ExamApplicationMTSPMMGUpdate {
	if i != nil {
		eamu.SetCAUserId(*i)
	}
	return eamu
}

// AddCAUserId adds i to the "CA_UserId" field.
func (eamu *ExamApplicationMTSPMMGUpdate) AddCAUserId(i int32) *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.AddCAUserId(i)
	return eamu
}

// ClearCAUserId clears the value of the "CA_UserId" field.
func (eamu *ExamApplicationMTSPMMGUpdate) ClearCAUserId() *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.ClearCAUserId()
	return eamu
}

// SetCAUserName sets the "CA_UserName" field.
func (eamu *ExamApplicationMTSPMMGUpdate) SetCAUserName(s string) *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.SetCAUserName(s)
	return eamu
}

// SetNillableCAUserName sets the "CA_UserName" field if the given value is not nil.
func (eamu *ExamApplicationMTSPMMGUpdate) SetNillableCAUserName(s *string) *ExamApplicationMTSPMMGUpdate {
	if s != nil {
		eamu.SetCAUserName(*s)
	}
	return eamu
}

// ClearCAUserName clears the value of the "CA_UserName" field.
func (eamu *ExamApplicationMTSPMMGUpdate) ClearCAUserName() *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.ClearCAUserName()
	return eamu
}

// SetCAEmployeeID sets the "CA_EmployeeID" field.
func (eamu *ExamApplicationMTSPMMGUpdate) SetCAEmployeeID(s string) *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.SetCAEmployeeID(s)
	return eamu
}

// SetNillableCAEmployeeID sets the "CA_EmployeeID" field if the given value is not nil.
func (eamu *ExamApplicationMTSPMMGUpdate) SetNillableCAEmployeeID(s *string) *ExamApplicationMTSPMMGUpdate {
	if s != nil {
		eamu.SetCAEmployeeID(*s)
	}
	return eamu
}

// ClearCAEmployeeID clears the value of the "CA_EmployeeID" field.
func (eamu *ExamApplicationMTSPMMGUpdate) ClearCAEmployeeID() *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.ClearCAEmployeeID()
	return eamu
}

// SetCAEmployeeDesignation sets the "CA_EmployeeDesignation" field.
func (eamu *ExamApplicationMTSPMMGUpdate) SetCAEmployeeDesignation(s string) *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.SetCAEmployeeDesignation(s)
	return eamu
}

// SetNillableCAEmployeeDesignation sets the "CA_EmployeeDesignation" field if the given value is not nil.
func (eamu *ExamApplicationMTSPMMGUpdate) SetNillableCAEmployeeDesignation(s *string) *ExamApplicationMTSPMMGUpdate {
	if s != nil {
		eamu.SetCAEmployeeDesignation(*s)
	}
	return eamu
}

// ClearCAEmployeeDesignation clears the value of the "CA_EmployeeDesignation" field.
func (eamu *ExamApplicationMTSPMMGUpdate) ClearCAEmployeeDesignation() *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.ClearCAEmployeeDesignation()
	return eamu
}

// SetCARemarks sets the "CA_Remarks" field.
func (eamu *ExamApplicationMTSPMMGUpdate) SetCARemarks(s string) *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.SetCARemarks(s)
	return eamu
}

// SetNillableCARemarks sets the "CA_Remarks" field if the given value is not nil.
func (eamu *ExamApplicationMTSPMMGUpdate) SetNillableCARemarks(s *string) *ExamApplicationMTSPMMGUpdate {
	if s != nil {
		eamu.SetCARemarks(*s)
	}
	return eamu
}

// ClearCARemarks clears the value of the "CA_Remarks" field.
func (eamu *ExamApplicationMTSPMMGUpdate) ClearCARemarks() *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.ClearCARemarks()
	return eamu
}

// SetCADate sets the "CA_Date" field.
func (eamu *ExamApplicationMTSPMMGUpdate) SetCADate(t time.Time) *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.SetCADate(t)
	return eamu
}

// SetNillableCADate sets the "CA_Date" field if the given value is not nil.
func (eamu *ExamApplicationMTSPMMGUpdate) SetNillableCADate(t *time.Time) *ExamApplicationMTSPMMGUpdate {
	if t != nil {
		eamu.SetCADate(*t)
	}
	return eamu
}

// ClearCADate clears the value of the "CA_Date" field.
func (eamu *ExamApplicationMTSPMMGUpdate) ClearCADate() *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.ClearCADate()
	return eamu
}

// SetNAUserId sets the "NA_UserId" field.
func (eamu *ExamApplicationMTSPMMGUpdate) SetNAUserId(i int32) *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.ResetNAUserId()
	eamu.mutation.SetNAUserId(i)
	return eamu
}

// SetNillableNAUserId sets the "NA_UserId" field if the given value is not nil.
func (eamu *ExamApplicationMTSPMMGUpdate) SetNillableNAUserId(i *int32) *ExamApplicationMTSPMMGUpdate {
	if i != nil {
		eamu.SetNAUserId(*i)
	}
	return eamu
}

// AddNAUserId adds i to the "NA_UserId" field.
func (eamu *ExamApplicationMTSPMMGUpdate) AddNAUserId(i int32) *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.AddNAUserId(i)
	return eamu
}

// ClearNAUserId clears the value of the "NA_UserId" field.
func (eamu *ExamApplicationMTSPMMGUpdate) ClearNAUserId() *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.ClearNAUserId()
	return eamu
}

// SetNAUserName sets the "NA_UserName" field.
func (eamu *ExamApplicationMTSPMMGUpdate) SetNAUserName(s string) *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.SetNAUserName(s)
	return eamu
}

// SetNillableNAUserName sets the "NA_UserName" field if the given value is not nil.
func (eamu *ExamApplicationMTSPMMGUpdate) SetNillableNAUserName(s *string) *ExamApplicationMTSPMMGUpdate {
	if s != nil {
		eamu.SetNAUserName(*s)
	}
	return eamu
}

// ClearNAUserName clears the value of the "NA_UserName" field.
func (eamu *ExamApplicationMTSPMMGUpdate) ClearNAUserName() *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.ClearNAUserName()
	return eamu
}

// SetNAEmployeeID sets the "NA_EmployeeID" field.
func (eamu *ExamApplicationMTSPMMGUpdate) SetNAEmployeeID(s string) *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.SetNAEmployeeID(s)
	return eamu
}

// SetNillableNAEmployeeID sets the "NA_EmployeeID" field if the given value is not nil.
func (eamu *ExamApplicationMTSPMMGUpdate) SetNillableNAEmployeeID(s *string) *ExamApplicationMTSPMMGUpdate {
	if s != nil {
		eamu.SetNAEmployeeID(*s)
	}
	return eamu
}

// ClearNAEmployeeID clears the value of the "NA_EmployeeID" field.
func (eamu *ExamApplicationMTSPMMGUpdate) ClearNAEmployeeID() *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.ClearNAEmployeeID()
	return eamu
}

// SetNAEmployeeDesignation sets the "NA_EmployeeDesignation" field.
func (eamu *ExamApplicationMTSPMMGUpdate) SetNAEmployeeDesignation(s string) *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.SetNAEmployeeDesignation(s)
	return eamu
}

// SetNillableNAEmployeeDesignation sets the "NA_EmployeeDesignation" field if the given value is not nil.
func (eamu *ExamApplicationMTSPMMGUpdate) SetNillableNAEmployeeDesignation(s *string) *ExamApplicationMTSPMMGUpdate {
	if s != nil {
		eamu.SetNAEmployeeDesignation(*s)
	}
	return eamu
}

// ClearNAEmployeeDesignation clears the value of the "NA_EmployeeDesignation" field.
func (eamu *ExamApplicationMTSPMMGUpdate) ClearNAEmployeeDesignation() *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.ClearNAEmployeeDesignation()
	return eamu
}

// SetNARemarks sets the "NA_Remarks" field.
func (eamu *ExamApplicationMTSPMMGUpdate) SetNARemarks(s string) *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.SetNARemarks(s)
	return eamu
}

// SetNillableNARemarks sets the "NA_Remarks" field if the given value is not nil.
func (eamu *ExamApplicationMTSPMMGUpdate) SetNillableNARemarks(s *string) *ExamApplicationMTSPMMGUpdate {
	if s != nil {
		eamu.SetNARemarks(*s)
	}
	return eamu
}

// ClearNARemarks clears the value of the "NA_Remarks" field.
func (eamu *ExamApplicationMTSPMMGUpdate) ClearNARemarks() *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.ClearNARemarks()
	return eamu
}

// SetNADate sets the "NA_Date" field.
func (eamu *ExamApplicationMTSPMMGUpdate) SetNADate(t time.Time) *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.SetNADate(t)
	return eamu
}

// SetNillableNADate sets the "NA_Date" field if the given value is not nil.
func (eamu *ExamApplicationMTSPMMGUpdate) SetNillableNADate(t *time.Time) *ExamApplicationMTSPMMGUpdate {
	if t != nil {
		eamu.SetNADate(*t)
	}
	return eamu
}

// ClearNADate clears the value of the "NA_Date" field.
func (eamu *ExamApplicationMTSPMMGUpdate) ClearNADate() *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.ClearNADate()
	return eamu
}

// SetAppliactionRemarks sets the "AppliactionRemarks" field.
func (eamu *ExamApplicationMTSPMMGUpdate) SetAppliactionRemarks(s string) *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.SetAppliactionRemarks(s)
	return eamu
}

// SetNillableAppliactionRemarks sets the "AppliactionRemarks" field if the given value is not nil.
func (eamu *ExamApplicationMTSPMMGUpdate) SetNillableAppliactionRemarks(s *string) *ExamApplicationMTSPMMGUpdate {
	if s != nil {
		eamu.SetAppliactionRemarks(*s)
	}
	return eamu
}

// ClearAppliactionRemarks clears the value of the "AppliactionRemarks" field.
func (eamu *ExamApplicationMTSPMMGUpdate) ClearAppliactionRemarks() *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.ClearAppliactionRemarks()
	return eamu
}

// SetCadrePreferences sets the "CadrePreferences" field.
func (eamu *ExamApplicationMTSPMMGUpdate) SetCadrePreferences(i []interface{}) *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.SetCadrePreferences(i)
	return eamu
}

// AppendCadrePreferences appends i to the "CadrePreferences" field.
func (eamu *ExamApplicationMTSPMMGUpdate) AppendCadrePreferences(i []interface{}) *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.AppendCadrePreferences(i)
	return eamu
}

// ClearCadrePreferences clears the value of the "CadrePreferences" field.
func (eamu *ExamApplicationMTSPMMGUpdate) ClearCadrePreferences() *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.ClearCadrePreferences()
	return eamu
}

// SetCAPreviousRemarks sets the "CAPreviousRemarks" field.
func (eamu *ExamApplicationMTSPMMGUpdate) SetCAPreviousRemarks(s string) *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.SetCAPreviousRemarks(s)
	return eamu
}

// SetNillableCAPreviousRemarks sets the "CAPreviousRemarks" field if the given value is not nil.
func (eamu *ExamApplicationMTSPMMGUpdate) SetNillableCAPreviousRemarks(s *string) *ExamApplicationMTSPMMGUpdate {
	if s != nil {
		eamu.SetCAPreviousRemarks(*s)
	}
	return eamu
}

// ClearCAPreviousRemarks clears the value of the "CAPreviousRemarks" field.
func (eamu *ExamApplicationMTSPMMGUpdate) ClearCAPreviousRemarks() *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.ClearCAPreviousRemarks()
	return eamu
}

// SetPunishmentStatus sets the "PunishmentStatus" field.
func (eamu *ExamApplicationMTSPMMGUpdate) SetPunishmentStatus(b bool) *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.SetPunishmentStatus(b)
	return eamu
}

// SetNillablePunishmentStatus sets the "PunishmentStatus" field if the given value is not nil.
func (eamu *ExamApplicationMTSPMMGUpdate) SetNillablePunishmentStatus(b *bool) *ExamApplicationMTSPMMGUpdate {
	if b != nil {
		eamu.SetPunishmentStatus(*b)
	}
	return eamu
}

// ClearPunishmentStatus clears the value of the "PunishmentStatus" field.
func (eamu *ExamApplicationMTSPMMGUpdate) ClearPunishmentStatus() *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.ClearPunishmentStatus()
	return eamu
}

// SetDisciplinaryCaseStatus sets the "DisciplinaryCaseStatus" field.
func (eamu *ExamApplicationMTSPMMGUpdate) SetDisciplinaryCaseStatus(b bool) *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.SetDisciplinaryCaseStatus(b)
	return eamu
}

// SetNillableDisciplinaryCaseStatus sets the "DisciplinaryCaseStatus" field if the given value is not nil.
func (eamu *ExamApplicationMTSPMMGUpdate) SetNillableDisciplinaryCaseStatus(b *bool) *ExamApplicationMTSPMMGUpdate {
	if b != nil {
		eamu.SetDisciplinaryCaseStatus(*b)
	}
	return eamu
}

// ClearDisciplinaryCaseStatus clears the value of the "DisciplinaryCaseStatus" field.
func (eamu *ExamApplicationMTSPMMGUpdate) ClearDisciplinaryCaseStatus() *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.ClearDisciplinaryCaseStatus()
	return eamu
}

// SetGenerateHallTicketFlag sets the "GenerateHallTicketFlag" field.
func (eamu *ExamApplicationMTSPMMGUpdate) SetGenerateHallTicketFlag(b bool) *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.SetGenerateHallTicketFlag(b)
	return eamu
}

// SetNillableGenerateHallTicketFlag sets the "GenerateHallTicketFlag" field if the given value is not nil.
func (eamu *ExamApplicationMTSPMMGUpdate) SetNillableGenerateHallTicketFlag(b *bool) *ExamApplicationMTSPMMGUpdate {
	if b != nil {
		eamu.SetGenerateHallTicketFlag(*b)
	}
	return eamu
}

// ClearGenerateHallTicketFlag clears the value of the "GenerateHallTicketFlag" field.
func (eamu *ExamApplicationMTSPMMGUpdate) ClearGenerateHallTicketFlag() *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.ClearGenerateHallTicketFlag()
	return eamu
}

// SetHallTicketNumber sets the "HallTicketNumber" field.
func (eamu *ExamApplicationMTSPMMGUpdate) SetHallTicketNumber(s string) *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.SetHallTicketNumber(s)
	return eamu
}

// SetNillableHallTicketNumber sets the "HallTicketNumber" field if the given value is not nil.
func (eamu *ExamApplicationMTSPMMGUpdate) SetNillableHallTicketNumber(s *string) *ExamApplicationMTSPMMGUpdate {
	if s != nil {
		eamu.SetHallTicketNumber(*s)
	}
	return eamu
}

// ClearHallTicketNumber clears the value of the "HallTicketNumber" field.
func (eamu *ExamApplicationMTSPMMGUpdate) ClearHallTicketNumber() *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.ClearHallTicketNumber()
	return eamu
}

// SetHallTicketGeneratedFlag sets the "HallTicketGeneratedFlag" field.
func (eamu *ExamApplicationMTSPMMGUpdate) SetHallTicketGeneratedFlag(b bool) *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.SetHallTicketGeneratedFlag(b)
	return eamu
}

// SetNillableHallTicketGeneratedFlag sets the "HallTicketGeneratedFlag" field if the given value is not nil.
func (eamu *ExamApplicationMTSPMMGUpdate) SetNillableHallTicketGeneratedFlag(b *bool) *ExamApplicationMTSPMMGUpdate {
	if b != nil {
		eamu.SetHallTicketGeneratedFlag(*b)
	}
	return eamu
}

// ClearHallTicketGeneratedFlag clears the value of the "HallTicketGeneratedFlag" field.
func (eamu *ExamApplicationMTSPMMGUpdate) ClearHallTicketGeneratedFlag() *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.ClearHallTicketGeneratedFlag()
	return eamu
}

// SetGenerateHallTicketFlagByNO sets the "GenerateHallTicketFlagByNO" field.
func (eamu *ExamApplicationMTSPMMGUpdate) SetGenerateHallTicketFlagByNO(b bool) *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.SetGenerateHallTicketFlagByNO(b)
	return eamu
}

// SetNillableGenerateHallTicketFlagByNO sets the "GenerateHallTicketFlagByNO" field if the given value is not nil.
func (eamu *ExamApplicationMTSPMMGUpdate) SetNillableGenerateHallTicketFlagByNO(b *bool) *ExamApplicationMTSPMMGUpdate {
	if b != nil {
		eamu.SetGenerateHallTicketFlagByNO(*b)
	}
	return eamu
}

// ClearGenerateHallTicketFlagByNO clears the value of the "GenerateHallTicketFlagByNO" field.
func (eamu *ExamApplicationMTSPMMGUpdate) ClearGenerateHallTicketFlagByNO() *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.ClearGenerateHallTicketFlagByNO()
	return eamu
}

// SetHallTicketGeneratedDate sets the "HallTicketGeneratedDate" field.
func (eamu *ExamApplicationMTSPMMGUpdate) SetHallTicketGeneratedDate(t time.Time) *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.SetHallTicketGeneratedDate(t)
	return eamu
}

// SetNillableHallTicketGeneratedDate sets the "HallTicketGeneratedDate" field if the given value is not nil.
func (eamu *ExamApplicationMTSPMMGUpdate) SetNillableHallTicketGeneratedDate(t *time.Time) *ExamApplicationMTSPMMGUpdate {
	if t != nil {
		eamu.SetHallTicketGeneratedDate(*t)
	}
	return eamu
}

// ClearHallTicketGeneratedDate clears the value of the "HallTicketGeneratedDate" field.
func (eamu *ExamApplicationMTSPMMGUpdate) ClearHallTicketGeneratedDate() *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.ClearHallTicketGeneratedDate()
	return eamu
}

// SetTemporaryHallTicket sets the "TemporaryHallTicket" field.
func (eamu *ExamApplicationMTSPMMGUpdate) SetTemporaryHallTicket(s string) *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.SetTemporaryHallTicket(s)
	return eamu
}

// SetNillableTemporaryHallTicket sets the "TemporaryHallTicket" field if the given value is not nil.
func (eamu *ExamApplicationMTSPMMGUpdate) SetNillableTemporaryHallTicket(s *string) *ExamApplicationMTSPMMGUpdate {
	if s != nil {
		eamu.SetTemporaryHallTicket(*s)
	}
	return eamu
}

// ClearTemporaryHallTicket clears the value of the "TemporaryHallTicket" field.
func (eamu *ExamApplicationMTSPMMGUpdate) ClearTemporaryHallTicket() *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.ClearTemporaryHallTicket()
	return eamu
}

// SetOptionUsed sets the "OptionUsed" field.
func (eamu *ExamApplicationMTSPMMGUpdate) SetOptionUsed(s string) *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.SetOptionUsed(s)
	return eamu
}

// SetNillableOptionUsed sets the "OptionUsed" field if the given value is not nil.
func (eamu *ExamApplicationMTSPMMGUpdate) SetNillableOptionUsed(s *string) *ExamApplicationMTSPMMGUpdate {
	if s != nil {
		eamu.SetOptionUsed(*s)
	}
	return eamu
}

// ClearOptionUsed clears the value of the "OptionUsed" field.
func (eamu *ExamApplicationMTSPMMGUpdate) ClearOptionUsed() *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.ClearOptionUsed()
	return eamu
}

// SetRemarks sets the "Remarks" field.
func (eamu *ExamApplicationMTSPMMGUpdate) SetRemarks(s string) *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.SetRemarks(s)
	return eamu
}

// SetNillableRemarks sets the "Remarks" field if the given value is not nil.
func (eamu *ExamApplicationMTSPMMGUpdate) SetNillableRemarks(s *string) *ExamApplicationMTSPMMGUpdate {
	if s != nil {
		eamu.SetRemarks(*s)
	}
	return eamu
}

// ClearRemarks clears the value of the "Remarks" field.
func (eamu *ExamApplicationMTSPMMGUpdate) ClearRemarks() *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.ClearRemarks()
	return eamu
}

// SetCadre sets the "Cadre" field.
func (eamu *ExamApplicationMTSPMMGUpdate) SetCadre(s string) *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.SetCadre(s)
	return eamu
}

// SetNillableCadre sets the "Cadre" field if the given value is not nil.
func (eamu *ExamApplicationMTSPMMGUpdate) SetNillableCadre(s *string) *ExamApplicationMTSPMMGUpdate {
	if s != nil {
		eamu.SetCadre(*s)
	}
	return eamu
}

// ClearCadre clears the value of the "Cadre" field.
func (eamu *ExamApplicationMTSPMMGUpdate) ClearCadre() *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.ClearCadre()
	return eamu
}

// SetEmployeePost sets the "EmployeePost" field.
func (eamu *ExamApplicationMTSPMMGUpdate) SetEmployeePost(s string) *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.SetEmployeePost(s)
	return eamu
}

// SetNillableEmployeePost sets the "EmployeePost" field if the given value is not nil.
func (eamu *ExamApplicationMTSPMMGUpdate) SetNillableEmployeePost(s *string) *ExamApplicationMTSPMMGUpdate {
	if s != nil {
		eamu.SetEmployeePost(*s)
	}
	return eamu
}

// ClearEmployeePost clears the value of the "EmployeePost" field.
func (eamu *ExamApplicationMTSPMMGUpdate) ClearEmployeePost() *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.ClearEmployeePost()
	return eamu
}

// SetDOJInEligiblePost sets the "DOJInEligiblePost" field.
func (eamu *ExamApplicationMTSPMMGUpdate) SetDOJInEligiblePost(s string) *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.SetDOJInEligiblePost(s)
	return eamu
}

// SetNillableDOJInEligiblePost sets the "DOJInEligiblePost" field if the given value is not nil.
func (eamu *ExamApplicationMTSPMMGUpdate) SetNillableDOJInEligiblePost(s *string) *ExamApplicationMTSPMMGUpdate {
	if s != nil {
		eamu.SetDOJInEligiblePost(*s)
	}
	return eamu
}

// ClearDOJInEligiblePost clears the value of the "DOJInEligiblePost" field.
func (eamu *ExamApplicationMTSPMMGUpdate) ClearDOJInEligiblePost() *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.ClearDOJInEligiblePost()
	return eamu
}

// SetDivisionPreferences sets the "DivisionPreferences" field.
func (eamu *ExamApplicationMTSPMMGUpdate) SetDivisionPreferences(i []interface{}) *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.SetDivisionPreferences(i)
	return eamu
}

// AppendDivisionPreferences appends i to the "DivisionPreferences" field.
func (eamu *ExamApplicationMTSPMMGUpdate) AppendDivisionPreferences(i []interface{}) *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.AppendDivisionPreferences(i)
	return eamu
}

// ClearDivisionPreferences clears the value of the "DivisionPreferences" field.
func (eamu *ExamApplicationMTSPMMGUpdate) ClearDivisionPreferences() *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.ClearDivisionPreferences()
	return eamu
}

// SetGDSEngagement sets the "GDSEngagement" field.
func (eamu *ExamApplicationMTSPMMGUpdate) SetGDSEngagement(i []interface{}) *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.SetGDSEngagement(i)
	return eamu
}

// AppendGDSEngagement appends i to the "GDSEngagement" field.
func (eamu *ExamApplicationMTSPMMGUpdate) AppendGDSEngagement(i []interface{}) *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.AppendGDSEngagement(i)
	return eamu
}

// ClearGDSEngagement clears the value of the "GDSEngagement" field.
func (eamu *ExamApplicationMTSPMMGUpdate) ClearGDSEngagement() *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.ClearGDSEngagement()
	return eamu
}

// SetRoleUserCode sets the "RoleUserCode" field.
func (eamu *ExamApplicationMTSPMMGUpdate) SetRoleUserCode(i int32) *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.SetRoleUserCode(i)
	return eamu
}

// SetNillableRoleUserCode sets the "RoleUserCode" field if the given value is not nil.
func (eamu *ExamApplicationMTSPMMGUpdate) SetNillableRoleUserCode(i *int32) *ExamApplicationMTSPMMGUpdate {
	if i != nil {
		eamu.SetRoleUserCode(*i)
	}
	return eamu
}

// ClearRoleUserCode clears the value of the "RoleUserCode" field.
func (eamu *ExamApplicationMTSPMMGUpdate) ClearRoleUserCode() *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.ClearRoleUserCode()
	return eamu
}

// SetCircleSID sets the "CircleSID" field.
func (eamu *ExamApplicationMTSPMMGUpdate) SetCircleSID(i int32) *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.SetCircleSID(i)
	return eamu
}

// SetNillableCircleSID sets the "CircleSID" field if the given value is not nil.
func (eamu *ExamApplicationMTSPMMGUpdate) SetNillableCircleSID(i *int32) *ExamApplicationMTSPMMGUpdate {
	if i != nil {
		eamu.SetCircleSID(*i)
	}
	return eamu
}

// ClearCircleSID clears the value of the "CircleSID" field.
func (eamu *ExamApplicationMTSPMMGUpdate) ClearCircleSID() *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.ClearCircleSID()
	return eamu
}

// SetFacilityName sets the "FacilityName" field.
func (eamu *ExamApplicationMTSPMMGUpdate) SetFacilityName(s string) *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.SetFacilityName(s)
	return eamu
}

// SetNillableFacilityName sets the "FacilityName" field if the given value is not nil.
func (eamu *ExamApplicationMTSPMMGUpdate) SetNillableFacilityName(s *string) *ExamApplicationMTSPMMGUpdate {
	if s != nil {
		eamu.SetFacilityName(*s)
	}
	return eamu
}

// ClearFacilityName clears the value of the "FacilityName" field.
func (eamu *ExamApplicationMTSPMMGUpdate) ClearFacilityName() *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.ClearFacilityName()
	return eamu
}

// SetServiceLength sets the "ServiceLength" field.
func (eamu *ExamApplicationMTSPMMGUpdate) SetServiceLength(i []interface{}) *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.SetServiceLength(i)
	return eamu
}

// AppendServiceLength appends i to the "ServiceLength" field.
func (eamu *ExamApplicationMTSPMMGUpdate) AppendServiceLength(i []interface{}) *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.AppendServiceLength(i)
	return eamu
}

// ClearServiceLength clears the value of the "ServiceLength" field.
func (eamu *ExamApplicationMTSPMMGUpdate) ClearServiceLength() *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.ClearServiceLength()
	return eamu
}

// SetNonQualifyingService sets the "NonQualifyingService" field.
func (eamu *ExamApplicationMTSPMMGUpdate) SetNonQualifyingService(i []interface{}) *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.SetNonQualifyingService(i)
	return eamu
}

// AppendNonQualifyingService appends i to the "NonQualifyingService" field.
func (eamu *ExamApplicationMTSPMMGUpdate) AppendNonQualifyingService(i []interface{}) *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.AppendNonQualifyingService(i)
	return eamu
}

// ClearNonQualifyingService clears the value of the "NonQualifyingService" field.
func (eamu *ExamApplicationMTSPMMGUpdate) ClearNonQualifyingService() *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.ClearNonQualifyingService()
	return eamu
}

// SetDCInPresentCadre sets the "DCInPresentCadre" field.
func (eamu *ExamApplicationMTSPMMGUpdate) SetDCInPresentCadre(s string) *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.SetDCInPresentCadre(s)
	return eamu
}

// SetNillableDCInPresentCadre sets the "DCInPresentCadre" field if the given value is not nil.
func (eamu *ExamApplicationMTSPMMGUpdate) SetNillableDCInPresentCadre(s *string) *ExamApplicationMTSPMMGUpdate {
	if s != nil {
		eamu.SetDCInPresentCadre(*s)
	}
	return eamu
}

// ClearDCInPresentCadre clears the value of the "DCInPresentCadre" field.
func (eamu *ExamApplicationMTSPMMGUpdate) ClearDCInPresentCadre() *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.ClearDCInPresentCadre()
	return eamu
}

// SetReportingOfficeID sets the "ReportingOfficeID" field.
func (eamu *ExamApplicationMTSPMMGUpdate) SetReportingOfficeID(s string) *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.SetReportingOfficeID(s)
	return eamu
}

// SetNillableReportingOfficeID sets the "ReportingOfficeID" field if the given value is not nil.
func (eamu *ExamApplicationMTSPMMGUpdate) SetNillableReportingOfficeID(s *string) *ExamApplicationMTSPMMGUpdate {
	if s != nil {
		eamu.SetReportingOfficeID(*s)
	}
	return eamu
}

// ClearReportingOfficeID clears the value of the "ReportingOfficeID" field.
func (eamu *ExamApplicationMTSPMMGUpdate) ClearReportingOfficeID() *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.ClearReportingOfficeID()
	return eamu
}

// SetPostPreferences sets the "PostPreferences" field.
func (eamu *ExamApplicationMTSPMMGUpdate) SetPostPreferences(i []interface{}) *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.SetPostPreferences(i)
	return eamu
}

// AppendPostPreferences appends i to the "PostPreferences" field.
func (eamu *ExamApplicationMTSPMMGUpdate) AppendPostPreferences(i []interface{}) *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.AppendPostPreferences(i)
	return eamu
}

// ClearPostPreferences clears the value of the "PostPreferences" field.
func (eamu *ExamApplicationMTSPMMGUpdate) ClearPostPreferences() *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.ClearPostPreferences()
	return eamu
}

// SetUnitPreferences sets the "UnitPreferences" field.
func (eamu *ExamApplicationMTSPMMGUpdate) SetUnitPreferences(i []interface{}) *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.SetUnitPreferences(i)
	return eamu
}

// AppendUnitPreferences appends i to the "UnitPreferences" field.
func (eamu *ExamApplicationMTSPMMGUpdate) AppendUnitPreferences(i []interface{}) *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.AppendUnitPreferences(i)
	return eamu
}

// ClearUnitPreferences clears the value of the "UnitPreferences" field.
func (eamu *ExamApplicationMTSPMMGUpdate) ClearUnitPreferences() *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.ClearUnitPreferences()
	return eamu
}

// SetCenterId sets the "CenterId" field.
func (eamu *ExamApplicationMTSPMMGUpdate) SetCenterId(i int32) *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.ResetCenterId()
	eamu.mutation.SetCenterId(i)
	return eamu
}

// SetNillableCenterId sets the "CenterId" field if the given value is not nil.
func (eamu *ExamApplicationMTSPMMGUpdate) SetNillableCenterId(i *int32) *ExamApplicationMTSPMMGUpdate {
	if i != nil {
		eamu.SetCenterId(*i)
	}
	return eamu
}

// AddCenterId adds i to the "CenterId" field.
func (eamu *ExamApplicationMTSPMMGUpdate) AddCenterId(i int32) *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.AddCenterId(i)
	return eamu
}

// ClearCenterId clears the value of the "CenterId" field.
func (eamu *ExamApplicationMTSPMMGUpdate) ClearCenterId() *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.ClearCenterId()
	return eamu
}

// SetCenterCode sets the "CenterCode" field.
func (eamu *ExamApplicationMTSPMMGUpdate) SetCenterCode(i int32) *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.SetCenterCode(i)
	return eamu
}

// SetNillableCenterCode sets the "CenterCode" field if the given value is not nil.
func (eamu *ExamApplicationMTSPMMGUpdate) SetNillableCenterCode(i *int32) *ExamApplicationMTSPMMGUpdate {
	if i != nil {
		eamu.SetCenterCode(*i)
	}
	return eamu
}

// ClearCenterCode clears the value of the "CenterCode" field.
func (eamu *ExamApplicationMTSPMMGUpdate) ClearCenterCode() *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.ClearCenterCode()
	return eamu
}

// SetClaimingQualifyingService sets the "ClaimingQualifyingService" field.
func (eamu *ExamApplicationMTSPMMGUpdate) SetClaimingQualifyingService(s string) *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.SetClaimingQualifyingService(s)
	return eamu
}

// SetNillableClaimingQualifyingService sets the "ClaimingQualifyingService" field if the given value is not nil.
func (eamu *ExamApplicationMTSPMMGUpdate) SetNillableClaimingQualifyingService(s *string) *ExamApplicationMTSPMMGUpdate {
	if s != nil {
		eamu.SetClaimingQualifyingService(*s)
	}
	return eamu
}

// ClearClaimingQualifyingService clears the value of the "ClaimingQualifyingService" field.
func (eamu *ExamApplicationMTSPMMGUpdate) ClearClaimingQualifyingService() *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.ClearClaimingQualifyingService()
	return eamu
}

// SetDeputationOfficePincode sets the "DeputationOfficePincode" field.
func (eamu *ExamApplicationMTSPMMGUpdate) SetDeputationOfficePincode(s string) *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.SetDeputationOfficePincode(s)
	return eamu
}

// SetNillableDeputationOfficePincode sets the "DeputationOfficePincode" field if the given value is not nil.
func (eamu *ExamApplicationMTSPMMGUpdate) SetNillableDeputationOfficePincode(s *string) *ExamApplicationMTSPMMGUpdate {
	if s != nil {
		eamu.SetDeputationOfficePincode(*s)
	}
	return eamu
}

// ClearDeputationOfficePincode clears the value of the "DeputationOfficePincode" field.
func (eamu *ExamApplicationMTSPMMGUpdate) ClearDeputationOfficePincode() *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.ClearDeputationOfficePincode()
	return eamu
}

// SetRecommendedStatus sets the "RecommendedStatus" field.
func (eamu *ExamApplicationMTSPMMGUpdate) SetRecommendedStatus(s string) *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.SetRecommendedStatus(s)
	return eamu
}

// SetNillableRecommendedStatus sets the "RecommendedStatus" field if the given value is not nil.
func (eamu *ExamApplicationMTSPMMGUpdate) SetNillableRecommendedStatus(s *string) *ExamApplicationMTSPMMGUpdate {
	if s != nil {
		eamu.SetRecommendedStatus(*s)
	}
	return eamu
}

// ClearRecommendedStatus clears the value of the "RecommendedStatus" field.
func (eamu *ExamApplicationMTSPMMGUpdate) ClearRecommendedStatus() *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.ClearRecommendedStatus()
	return eamu
}

// SetUpdatedAt sets the "UpdatedAt" field.
func (eamu *ExamApplicationMTSPMMGUpdate) SetUpdatedAt(t time.Time) *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.SetUpdatedAt(t)
	return eamu
}

// SetNillableUpdatedAt sets the "UpdatedAt" field if the given value is not nil.
func (eamu *ExamApplicationMTSPMMGUpdate) SetNillableUpdatedAt(t *time.Time) *ExamApplicationMTSPMMGUpdate {
	if t != nil {
		eamu.SetUpdatedAt(*t)
	}
	return eamu
}

// ClearUpdatedAt clears the value of the "UpdatedAt" field.
func (eamu *ExamApplicationMTSPMMGUpdate) ClearUpdatedAt() *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.ClearUpdatedAt()
	return eamu
}

// SetUpdatedBy sets the "UpdatedBy" field.
func (eamu *ExamApplicationMTSPMMGUpdate) SetUpdatedBy(s string) *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.SetUpdatedBy(s)
	return eamu
}

// SetNillableUpdatedBy sets the "UpdatedBy" field if the given value is not nil.
func (eamu *ExamApplicationMTSPMMGUpdate) SetNillableUpdatedBy(s *string) *ExamApplicationMTSPMMGUpdate {
	if s != nil {
		eamu.SetUpdatedBy(*s)
	}
	return eamu
}

// ClearUpdatedBy clears the value of the "UpdatedBy" field.
func (eamu *ExamApplicationMTSPMMGUpdate) ClearUpdatedBy() *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.ClearUpdatedBy()
	return eamu
}

// SetApplicationWdlDate sets the "ApplicationWdlDate" field.
func (eamu *ExamApplicationMTSPMMGUpdate) SetApplicationWdlDate(t time.Time) *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.SetApplicationWdlDate(t)
	return eamu
}

// SetNillableApplicationWdlDate sets the "ApplicationWdlDate" field if the given value is not nil.
func (eamu *ExamApplicationMTSPMMGUpdate) SetNillableApplicationWdlDate(t *time.Time) *ExamApplicationMTSPMMGUpdate {
	if t != nil {
		eamu.SetApplicationWdlDate(*t)
	}
	return eamu
}

// ClearApplicationWdlDate clears the value of the "ApplicationWdlDate" field.
func (eamu *ExamApplicationMTSPMMGUpdate) ClearApplicationWdlDate() *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.ClearApplicationWdlDate()
	return eamu
}

// SetExamCenterHall sets the "ExamCenterHall" field.
func (eamu *ExamApplicationMTSPMMGUpdate) SetExamCenterHall(i int32) *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.ResetExamCenterHall()
	eamu.mutation.SetExamCenterHall(i)
	return eamu
}

// SetNillableExamCenterHall sets the "ExamCenterHall" field if the given value is not nil.
func (eamu *ExamApplicationMTSPMMGUpdate) SetNillableExamCenterHall(i *int32) *ExamApplicationMTSPMMGUpdate {
	if i != nil {
		eamu.SetExamCenterHall(*i)
	}
	return eamu
}

// AddExamCenterHall adds i to the "ExamCenterHall" field.
func (eamu *ExamApplicationMTSPMMGUpdate) AddExamCenterHall(i int32) *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.AddExamCenterHall(i)
	return eamu
}

// ClearExamCenterHall clears the value of the "ExamCenterHall" field.
func (eamu *ExamApplicationMTSPMMGUpdate) ClearExamCenterHall() *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.ClearExamCenterHall()
	return eamu
}

// SetHallName sets the "HallName" field.
func (eamu *ExamApplicationMTSPMMGUpdate) SetHallName(s string) *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.SetHallName(s)
	return eamu
}

// SetNillableHallName sets the "HallName" field if the given value is not nil.
func (eamu *ExamApplicationMTSPMMGUpdate) SetNillableHallName(s *string) *ExamApplicationMTSPMMGUpdate {
	if s != nil {
		eamu.SetHallName(*s)
	}
	return eamu
}

// ClearHallName clears the value of the "HallName" field.
func (eamu *ExamApplicationMTSPMMGUpdate) ClearHallName() *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.ClearHallName()
	return eamu
}

// AddUsersMTSPMMGRefIDs adds the "UsersMTSPMMGRef" edge to the UserMaster entity by IDs.
func (eamu *ExamApplicationMTSPMMGUpdate) AddUsersMTSPMMGRefIDs(ids ...int64) *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.AddUsersMTSPMMGRefIDs(ids...)
	return eamu
}

// AddUsersMTSPMMGRef adds the "UsersMTSPMMGRef" edges to the UserMaster entity.
func (eamu *ExamApplicationMTSPMMGUpdate) AddUsersMTSPMMGRef(u ...*UserMaster) *ExamApplicationMTSPMMGUpdate {
	ids := make([]int64, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return eamu.AddUsersMTSPMMGRefIDs(ids...)
}

// SetRoleusersID sets the "roleusers" edge to the RoleMaster entity by ID.
func (eamu *ExamApplicationMTSPMMGUpdate) SetRoleusersID(id int32) *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.SetRoleusersID(id)
	return eamu
}

// SetNillableRoleusersID sets the "roleusers" edge to the RoleMaster entity by ID if the given value is not nil.
func (eamu *ExamApplicationMTSPMMGUpdate) SetNillableRoleusersID(id *int32) *ExamApplicationMTSPMMGUpdate {
	if id != nil {
		eamu = eamu.SetRoleusersID(*id)
	}
	return eamu
}

// SetRoleusers sets the "roleusers" edge to the RoleMaster entity.
func (eamu *ExamApplicationMTSPMMGUpdate) SetRoleusers(r *RoleMaster) *ExamApplicationMTSPMMGUpdate {
	return eamu.SetRoleusersID(r.ID)
}

// AddCadrePrefRefIDs adds the "CadrePref_Ref" edge to the Cadre_Choice_MTSPMMG entity by IDs.
func (eamu *ExamApplicationMTSPMMGUpdate) AddCadrePrefRefIDs(ids ...int32) *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.AddCadrePrefRefIDs(ids...)
	return eamu
}

// AddCadrePrefRef adds the "CadrePref_Ref" edges to the Cadre_Choice_MTSPMMG entity.
func (eamu *ExamApplicationMTSPMMGUpdate) AddCadrePrefRef(c ...*Cadre_Choice_MTSPMMG) *ExamApplicationMTSPMMGUpdate {
	ids := make([]int32, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return eamu.AddCadrePrefRefIDs(ids...)
}

// AddCirclePrefRefMTSPMMGIDs adds the "CirclePrefRefMTSPMMG" edge to the Division_Choice_MTSPMMG entity by IDs.
func (eamu *ExamApplicationMTSPMMGUpdate) AddCirclePrefRefMTSPMMGIDs(ids ...int32) *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.AddCirclePrefRefMTSPMMGIDs(ids...)
	return eamu
}

// AddCirclePrefRefMTSPMMG adds the "CirclePrefRefMTSPMMG" edges to the Division_Choice_MTSPMMG entity.
func (eamu *ExamApplicationMTSPMMGUpdate) AddCirclePrefRefMTSPMMG(d ...*Division_Choice_MTSPMMG) *ExamApplicationMTSPMMGUpdate {
	ids := make([]int32, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return eamu.AddCirclePrefRefMTSPMMGIDs(ids...)
}

// AddMTSPMMGApplicationsRefIDs adds the "MTSPMMGApplicationsRef" edge to the RecommendationsMTSPMMGApplications entity by IDs.
func (eamu *ExamApplicationMTSPMMGUpdate) AddMTSPMMGApplicationsRefIDs(ids ...int64) *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.AddMTSPMMGApplicationsRefIDs(ids...)
	return eamu
}

// AddMTSPMMGApplicationsRef adds the "MTSPMMGApplicationsRef" edges to the RecommendationsMTSPMMGApplications entity.
func (eamu *ExamApplicationMTSPMMGUpdate) AddMTSPMMGApplicationsRef(r ...*RecommendationsMTSPMMGApplications) *ExamApplicationMTSPMMGUpdate {
	ids := make([]int64, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return eamu.AddMTSPMMGApplicationsRefIDs(ids...)
}

// SetMTSPMMGExamCentresID sets the "MTSPMMGExamCentres" edge to the Center entity by ID.
func (eamu *ExamApplicationMTSPMMGUpdate) SetMTSPMMGExamCentresID(id int32) *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.SetMTSPMMGExamCentresID(id)
	return eamu
}

// SetNillableMTSPMMGExamCentresID sets the "MTSPMMGExamCentres" edge to the Center entity by ID if the given value is not nil.
func (eamu *ExamApplicationMTSPMMGUpdate) SetNillableMTSPMMGExamCentresID(id *int32) *ExamApplicationMTSPMMGUpdate {
	if id != nil {
		eamu = eamu.SetMTSPMMGExamCentresID(*id)
	}
	return eamu
}

// SetMTSPMMGExamCentres sets the "MTSPMMGExamCentres" edge to the Center entity.
func (eamu *ExamApplicationMTSPMMGUpdate) SetMTSPMMGExamCentres(c *Center) *ExamApplicationMTSPMMGUpdate {
	return eamu.SetMTSPMMGExamCentresID(c.ID)
}

// SetExamcitycenterID sets the "examcitycenter" edge to the ExamCityCenter entity by ID.
func (eamu *ExamApplicationMTSPMMGUpdate) SetExamcitycenterID(id int32) *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.SetExamcitycenterID(id)
	return eamu
}

// SetNillableExamcitycenterID sets the "examcitycenter" edge to the ExamCityCenter entity by ID if the given value is not nil.
func (eamu *ExamApplicationMTSPMMGUpdate) SetNillableExamcitycenterID(id *int32) *ExamApplicationMTSPMMGUpdate {
	if id != nil {
		eamu = eamu.SetExamcitycenterID(*id)
	}
	return eamu
}

// SetExamcitycenter sets the "examcitycenter" edge to the ExamCityCenter entity.
func (eamu *ExamApplicationMTSPMMGUpdate) SetExamcitycenter(e *ExamCityCenter) *ExamApplicationMTSPMMGUpdate {
	return eamu.SetExamcitycenterID(e.ID)
}

// SetExamsID sets the "Exams" edge to the Exam entity by ID.
func (eamu *ExamApplicationMTSPMMGUpdate) SetExamsID(id int32) *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.SetExamsID(id)
	return eamu
}

// SetNillableExamsID sets the "Exams" edge to the Exam entity by ID if the given value is not nil.
func (eamu *ExamApplicationMTSPMMGUpdate) SetNillableExamsID(id *int32) *ExamApplicationMTSPMMGUpdate {
	if id != nil {
		eamu = eamu.SetExamsID(*id)
	}
	return eamu
}

// SetExams sets the "Exams" edge to the Exam entity.
func (eamu *ExamApplicationMTSPMMGUpdate) SetExams(e *Exam) *ExamApplicationMTSPMMGUpdate {
	return eamu.SetExamsID(e.ID)
}

// SetCircleRefsMTSPMMGID sets the "CircleRefsMTSPMMG" edge to the CircleSummaryForNO entity by ID.
func (eamu *ExamApplicationMTSPMMGUpdate) SetCircleRefsMTSPMMGID(id int32) *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.SetCircleRefsMTSPMMGID(id)
	return eamu
}

// SetNillableCircleRefsMTSPMMGID sets the "CircleRefsMTSPMMG" edge to the CircleSummaryForNO entity by ID if the given value is not nil.
func (eamu *ExamApplicationMTSPMMGUpdate) SetNillableCircleRefsMTSPMMGID(id *int32) *ExamApplicationMTSPMMGUpdate {
	if id != nil {
		eamu = eamu.SetCircleRefsMTSPMMGID(*id)
	}
	return eamu
}

// SetCircleRefsMTSPMMG sets the "CircleRefsMTSPMMG" edge to the CircleSummaryForNO entity.
func (eamu *ExamApplicationMTSPMMGUpdate) SetCircleRefsMTSPMMG(c *CircleSummaryForNO) *ExamApplicationMTSPMMGUpdate {
	return eamu.SetCircleRefsMTSPMMGID(c.ID)
}

// AddLogDatumIDs adds the "LogData" edge to the Logs entity by IDs.
func (eamu *ExamApplicationMTSPMMGUpdate) AddLogDatumIDs(ids ...int64) *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.AddLogDatumIDs(ids...)
	return eamu
}

// AddLogData adds the "LogData" edges to the Logs entity.
func (eamu *ExamApplicationMTSPMMGUpdate) AddLogData(l ...*Logs) *ExamApplicationMTSPMMGUpdate {
	ids := make([]int64, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return eamu.AddLogDatumIDs(ids...)
}

// Mutation returns the ExamApplicationMTSPMMGMutation object of the builder.
func (eamu *ExamApplicationMTSPMMGUpdate) Mutation() *ExamApplicationMTSPMMGMutation {
	return eamu.mutation
}

// ClearUsersMTSPMMGRef clears all "UsersMTSPMMGRef" edges to the UserMaster entity.
func (eamu *ExamApplicationMTSPMMGUpdate) ClearUsersMTSPMMGRef() *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.ClearUsersMTSPMMGRef()
	return eamu
}

// RemoveUsersMTSPMMGRefIDs removes the "UsersMTSPMMGRef" edge to UserMaster entities by IDs.
func (eamu *ExamApplicationMTSPMMGUpdate) RemoveUsersMTSPMMGRefIDs(ids ...int64) *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.RemoveUsersMTSPMMGRefIDs(ids...)
	return eamu
}

// RemoveUsersMTSPMMGRef removes "UsersMTSPMMGRef" edges to UserMaster entities.
func (eamu *ExamApplicationMTSPMMGUpdate) RemoveUsersMTSPMMGRef(u ...*UserMaster) *ExamApplicationMTSPMMGUpdate {
	ids := make([]int64, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return eamu.RemoveUsersMTSPMMGRefIDs(ids...)
}

// ClearRoleusers clears the "roleusers" edge to the RoleMaster entity.
func (eamu *ExamApplicationMTSPMMGUpdate) ClearRoleusers() *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.ClearRoleusers()
	return eamu
}

// ClearCadrePrefRef clears all "CadrePref_Ref" edges to the Cadre_Choice_MTSPMMG entity.
func (eamu *ExamApplicationMTSPMMGUpdate) ClearCadrePrefRef() *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.ClearCadrePrefRef()
	return eamu
}

// RemoveCadrePrefRefIDs removes the "CadrePref_Ref" edge to Cadre_Choice_MTSPMMG entities by IDs.
func (eamu *ExamApplicationMTSPMMGUpdate) RemoveCadrePrefRefIDs(ids ...int32) *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.RemoveCadrePrefRefIDs(ids...)
	return eamu
}

// RemoveCadrePrefRef removes "CadrePref_Ref" edges to Cadre_Choice_MTSPMMG entities.
func (eamu *ExamApplicationMTSPMMGUpdate) RemoveCadrePrefRef(c ...*Cadre_Choice_MTSPMMG) *ExamApplicationMTSPMMGUpdate {
	ids := make([]int32, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return eamu.RemoveCadrePrefRefIDs(ids...)
}

// ClearCirclePrefRefMTSPMMG clears all "CirclePrefRefMTSPMMG" edges to the Division_Choice_MTSPMMG entity.
func (eamu *ExamApplicationMTSPMMGUpdate) ClearCirclePrefRefMTSPMMG() *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.ClearCirclePrefRefMTSPMMG()
	return eamu
}

// RemoveCirclePrefRefMTSPMMGIDs removes the "CirclePrefRefMTSPMMG" edge to Division_Choice_MTSPMMG entities by IDs.
func (eamu *ExamApplicationMTSPMMGUpdate) RemoveCirclePrefRefMTSPMMGIDs(ids ...int32) *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.RemoveCirclePrefRefMTSPMMGIDs(ids...)
	return eamu
}

// RemoveCirclePrefRefMTSPMMG removes "CirclePrefRefMTSPMMG" edges to Division_Choice_MTSPMMG entities.
func (eamu *ExamApplicationMTSPMMGUpdate) RemoveCirclePrefRefMTSPMMG(d ...*Division_Choice_MTSPMMG) *ExamApplicationMTSPMMGUpdate {
	ids := make([]int32, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return eamu.RemoveCirclePrefRefMTSPMMGIDs(ids...)
}

// ClearMTSPMMGApplicationsRef clears all "MTSPMMGApplicationsRef" edges to the RecommendationsMTSPMMGApplications entity.
func (eamu *ExamApplicationMTSPMMGUpdate) ClearMTSPMMGApplicationsRef() *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.ClearMTSPMMGApplicationsRef()
	return eamu
}

// RemoveMTSPMMGApplicationsRefIDs removes the "MTSPMMGApplicationsRef" edge to RecommendationsMTSPMMGApplications entities by IDs.
func (eamu *ExamApplicationMTSPMMGUpdate) RemoveMTSPMMGApplicationsRefIDs(ids ...int64) *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.RemoveMTSPMMGApplicationsRefIDs(ids...)
	return eamu
}

// RemoveMTSPMMGApplicationsRef removes "MTSPMMGApplicationsRef" edges to RecommendationsMTSPMMGApplications entities.
func (eamu *ExamApplicationMTSPMMGUpdate) RemoveMTSPMMGApplicationsRef(r ...*RecommendationsMTSPMMGApplications) *ExamApplicationMTSPMMGUpdate {
	ids := make([]int64, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return eamu.RemoveMTSPMMGApplicationsRefIDs(ids...)
}

// ClearMTSPMMGExamCentres clears the "MTSPMMGExamCentres" edge to the Center entity.
func (eamu *ExamApplicationMTSPMMGUpdate) ClearMTSPMMGExamCentres() *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.ClearMTSPMMGExamCentres()
	return eamu
}

// ClearExamcitycenter clears the "examcitycenter" edge to the ExamCityCenter entity.
func (eamu *ExamApplicationMTSPMMGUpdate) ClearExamcitycenter() *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.ClearExamcitycenter()
	return eamu
}

// ClearExams clears the "Exams" edge to the Exam entity.
func (eamu *ExamApplicationMTSPMMGUpdate) ClearExams() *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.ClearExams()
	return eamu
}

// ClearCircleRefsMTSPMMG clears the "CircleRefsMTSPMMG" edge to the CircleSummaryForNO entity.
func (eamu *ExamApplicationMTSPMMGUpdate) ClearCircleRefsMTSPMMG() *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.ClearCircleRefsMTSPMMG()
	return eamu
}

// ClearLogData clears all "LogData" edges to the Logs entity.
func (eamu *ExamApplicationMTSPMMGUpdate) ClearLogData() *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.ClearLogData()
	return eamu
}

// RemoveLogDatumIDs removes the "LogData" edge to Logs entities by IDs.
func (eamu *ExamApplicationMTSPMMGUpdate) RemoveLogDatumIDs(ids ...int64) *ExamApplicationMTSPMMGUpdate {
	eamu.mutation.RemoveLogDatumIDs(ids...)
	return eamu
}

// RemoveLogData removes "LogData" edges to Logs entities.
func (eamu *ExamApplicationMTSPMMGUpdate) RemoveLogData(l ...*Logs) *ExamApplicationMTSPMMGUpdate {
	ids := make([]int64, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return eamu.RemoveLogDatumIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (eamu *ExamApplicationMTSPMMGUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, eamu.sqlSave, eamu.mutation, eamu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (eamu *ExamApplicationMTSPMMGUpdate) SaveX(ctx context.Context) int {
	affected, err := eamu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (eamu *ExamApplicationMTSPMMGUpdate) Exec(ctx context.Context) error {
	_, err := eamu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eamu *ExamApplicationMTSPMMGUpdate) ExecX(ctx context.Context) {
	if err := eamu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (eamu *ExamApplicationMTSPMMGUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(exam_application_mtspmmg.Table, exam_application_mtspmmg.Columns, sqlgraph.NewFieldSpec(exam_application_mtspmmg.FieldID, field.TypeInt64))
	if ps := eamu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eamu.mutation.ApplicationNumber(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldApplicationNumber, field.TypeString, value)
	}
	if eamu.mutation.ApplicationNumberCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldApplicationNumber, field.TypeString)
	}
	if value, ok := eamu.mutation.ApplnSubmittedDate(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldApplnSubmittedDate, field.TypeTime, value)
	}
	if eamu.mutation.ApplnSubmittedDateCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldApplnSubmittedDate, field.TypeTime)
	}
	if value, ok := eamu.mutation.ExamShortName(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldExamShortName, field.TypeString, value)
	}
	if eamu.mutation.ExamShortNameCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldExamShortName, field.TypeString)
	}
	if value, ok := eamu.mutation.ExamName(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldExamName, field.TypeString, value)
	}
	if eamu.mutation.ExamNameCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldExamName, field.TypeString)
	}
	if value, ok := eamu.mutation.SmsExamShortName(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldSmsExamShortName, field.TypeString, value)
	}
	if eamu.mutation.SmsExamShortNameCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldSmsExamShortName, field.TypeString)
	}
	if value, ok := eamu.mutation.ExamYear(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldExamYear, field.TypeString, value)
	}
	if eamu.mutation.ExamYearCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldExamYear, field.TypeString)
	}
	if value, ok := eamu.mutation.UserID(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldUserID, field.TypeInt32, value)
	}
	if value, ok := eamu.mutation.AddedUserID(); ok {
		_spec.AddField(exam_application_mtspmmg.FieldUserID, field.TypeInt32, value)
	}
	if eamu.mutation.UserIDCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldUserID, field.TypeInt32)
	}
	if value, ok := eamu.mutation.EmployeeID(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldEmployeeID, field.TypeInt64, value)
	}
	if value, ok := eamu.mutation.AddedEmployeeID(); ok {
		_spec.AddField(exam_application_mtspmmg.FieldEmployeeID, field.TypeInt64, value)
	}
	if eamu.mutation.EmployeeIDCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldEmployeeID, field.TypeInt64)
	}
	if value, ok := eamu.mutation.EmployeeName(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldEmployeeName, field.TypeString, value)
	}
	if eamu.mutation.EmployeeNameCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldEmployeeName, field.TypeString)
	}
	if value, ok := eamu.mutation.DOB(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldDOB, field.TypeString, value)
	}
	if eamu.mutation.DOBCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldDOB, field.TypeString)
	}
	if value, ok := eamu.mutation.Gender(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldGender, field.TypeString, value)
	}
	if eamu.mutation.GenderCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldGender, field.TypeString)
	}
	if value, ok := eamu.mutation.MobileNumber(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldMobileNumber, field.TypeString, value)
	}
	if eamu.mutation.MobileNumberCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldMobileNumber, field.TypeString)
	}
	if value, ok := eamu.mutation.EmailID(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldEmailID, field.TypeString, value)
	}
	if eamu.mutation.EmailIDCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldEmailID, field.TypeString)
	}
	if value, ok := eamu.mutation.CategoryCode(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldCategoryCode, field.TypeString, value)
	}
	if eamu.mutation.CategoryCodeCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldCategoryCode, field.TypeString)
	}
	if value, ok := eamu.mutation.CategoryDescription(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldCategoryDescription, field.TypeString, value)
	}
	if eamu.mutation.CategoryDescriptionCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldCategoryDescription, field.TypeString)
	}
	if value, ok := eamu.mutation.DisabilityTypeID(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldDisabilityTypeID, field.TypeString, value)
	}
	if eamu.mutation.DisabilityTypeIDCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldDisabilityTypeID, field.TypeString)
	}
	if value, ok := eamu.mutation.DisabilityTypeCode(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldDisabilityTypeCode, field.TypeString, value)
	}
	if eamu.mutation.DisabilityTypeCodeCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldDisabilityTypeCode, field.TypeString)
	}
	if value, ok := eamu.mutation.DisabilityTypeDescription(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldDisabilityTypeDescription, field.TypeString, value)
	}
	if eamu.mutation.DisabilityTypeDescriptionCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldDisabilityTypeDescription, field.TypeString)
	}
	if value, ok := eamu.mutation.DisabilityPercentage(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldDisabilityPercentage, field.TypeInt32, value)
	}
	if value, ok := eamu.mutation.AddedDisabilityPercentage(); ok {
		_spec.AddField(exam_application_mtspmmg.FieldDisabilityPercentage, field.TypeInt32, value)
	}
	if eamu.mutation.DisabilityPercentageCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldDisabilityPercentage, field.TypeInt32)
	}
	if value, ok := eamu.mutation.DCCS(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldDCCS, field.TypeString, value)
	}
	if eamu.mutation.DCCSCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldDCCS, field.TypeString)
	}
	if value, ok := eamu.mutation.EntryPostCode(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldEntryPostCode, field.TypeString, value)
	}
	if eamu.mutation.EntryPostCodeCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldEntryPostCode, field.TypeString)
	}
	if value, ok := eamu.mutation.EntryPostDescription(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldEntryPostDescription, field.TypeString, value)
	}
	if eamu.mutation.EntryPostDescriptionCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldEntryPostDescription, field.TypeString)
	}
	if value, ok := eamu.mutation.PresentPostCode(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldPresentPostCode, field.TypeString, value)
	}
	if eamu.mutation.PresentPostCodeCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldPresentPostCode, field.TypeString)
	}
	if value, ok := eamu.mutation.PresentPostDescription(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldPresentPostDescription, field.TypeString, value)
	}
	if eamu.mutation.PresentPostDescriptionCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldPresentPostDescription, field.TypeString)
	}
	if value, ok := eamu.mutation.FeederPostCode(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldFeederPostCode, field.TypeString, value)
	}
	if eamu.mutation.FeederPostCodeCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldFeederPostCode, field.TypeString)
	}
	if value, ok := eamu.mutation.FeederPostDescription(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldFeederPostDescription, field.TypeString, value)
	}
	if eamu.mutation.FeederPostDescriptionCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldFeederPostDescription, field.TypeString)
	}
	if value, ok := eamu.mutation.FeederPostJoiningDate(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldFeederPostJoiningDate, field.TypeString, value)
	}
	if eamu.mutation.FeederPostJoiningDateCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldFeederPostJoiningDate, field.TypeString)
	}
	if value, ok := eamu.mutation.DesignationID(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldDesignationID, field.TypeString, value)
	}
	if eamu.mutation.DesignationIDCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldDesignationID, field.TypeString)
	}
	if value, ok := eamu.mutation.PresentDesignation(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldPresentDesignation, field.TypeString, value)
	}
	if eamu.mutation.PresentDesignationCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldPresentDesignation, field.TypeString)
	}
	if value, ok := eamu.mutation.EducationCode(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldEducationCode, field.TypeString, value)
	}
	if eamu.mutation.EducationCodeCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldEducationCode, field.TypeString)
	}
	if value, ok := eamu.mutation.EducationDescription(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldEducationDescription, field.TypeString, value)
	}
	if eamu.mutation.EducationDescriptionCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldEducationDescription, field.TypeString)
	}
	if value, ok := eamu.mutation.FacilityUniqueID(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldFacilityUniqueID, field.TypeString, value)
	}
	if eamu.mutation.FacilityUniqueIDCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldFacilityUniqueID, field.TypeString)
	}
	if value, ok := eamu.mutation.WorkingOfficePincode(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldWorkingOfficePincode, field.TypeInt32, value)
	}
	if value, ok := eamu.mutation.AddedWorkingOfficePincode(); ok {
		_spec.AddField(exam_application_mtspmmg.FieldWorkingOfficePincode, field.TypeInt32, value)
	}
	if eamu.mutation.WorkingOfficePincodeCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldWorkingOfficePincode, field.TypeInt32)
	}
	if value, ok := eamu.mutation.WorkingOfficeFacilityID(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldWorkingOfficeFacilityID, field.TypeString, value)
	}
	if eamu.mutation.WorkingOfficeFacilityIDCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldWorkingOfficeFacilityID, field.TypeString)
	}
	if value, ok := eamu.mutation.WorkingOfficeName(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldWorkingOfficeName, field.TypeString, value)
	}
	if eamu.mutation.WorkingOfficeNameCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldWorkingOfficeName, field.TypeString)
	}
	if value, ok := eamu.mutation.WorkingOfficeCircleFacilityID(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldWorkingOfficeCircleFacilityID, field.TypeString, value)
	}
	if eamu.mutation.WorkingOfficeCircleFacilityIDCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldWorkingOfficeCircleFacilityID, field.TypeString)
	}
	if value, ok := eamu.mutation.WorkingOfficeCircleName(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldWorkingOfficeCircleName, field.TypeString, value)
	}
	if eamu.mutation.WorkingOfficeCircleNameCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldWorkingOfficeCircleName, field.TypeString)
	}
	if value, ok := eamu.mutation.WorkingOfficeRegionFacilityID(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldWorkingOfficeRegionFacilityID, field.TypeString, value)
	}
	if eamu.mutation.WorkingOfficeRegionFacilityIDCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldWorkingOfficeRegionFacilityID, field.TypeString)
	}
	if value, ok := eamu.mutation.WorkingOfficeRegionName(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldWorkingOfficeRegionName, field.TypeString, value)
	}
	if eamu.mutation.WorkingOfficeRegionNameCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldWorkingOfficeRegionName, field.TypeString)
	}
	if value, ok := eamu.mutation.WorkingOfficeDivisionFacilityID(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldWorkingOfficeDivisionFacilityID, field.TypeString, value)
	}
	if eamu.mutation.WorkingOfficeDivisionFacilityIDCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldWorkingOfficeDivisionFacilityID, field.TypeString)
	}
	if value, ok := eamu.mutation.WorkingOfficeDivisionName(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldWorkingOfficeDivisionName, field.TypeString, value)
	}
	if eamu.mutation.WorkingOfficeDivisionNameCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldWorkingOfficeDivisionName, field.TypeString)
	}
	if value, ok := eamu.mutation.ReportingOfficeFacilityID(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldReportingOfficeFacilityID, field.TypeString, value)
	}
	if eamu.mutation.ReportingOfficeFacilityIDCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldReportingOfficeFacilityID, field.TypeString)
	}
	if value, ok := eamu.mutation.ReportingOfficeName(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldReportingOfficeName, field.TypeString, value)
	}
	if eamu.mutation.ReportingOfficeNameCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldReportingOfficeName, field.TypeString)
	}
	if value, ok := eamu.mutation.LienControllingOfficeID(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldLienControllingOfficeID, field.TypeString, value)
	}
	if eamu.mutation.LienControllingOfficeIDCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldLienControllingOfficeID, field.TypeString)
	}
	if value, ok := eamu.mutation.LienControllingOfficeName(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldLienControllingOfficeName, field.TypeString, value)
	}
	if eamu.mutation.LienControllingOfficeNameCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldLienControllingOfficeName, field.TypeString)
	}
	if value, ok := eamu.mutation.InDeputation(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldInDeputation, field.TypeString, value)
	}
	if eamu.mutation.InDeputationCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldInDeputation, field.TypeString)
	}
	if value, ok := eamu.mutation.DeputationType(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldDeputationType, field.TypeString, value)
	}
	if eamu.mutation.DeputationTypeCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldDeputationType, field.TypeString)
	}
	if value, ok := eamu.mutation.DeputationOfficeUniqueId(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldDeputationOfficeUniqueId, field.TypeString, value)
	}
	if eamu.mutation.DeputationOfficeUniqueIdCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldDeputationOfficeUniqueId, field.TypeString)
	}
	if value, ok := eamu.mutation.DeputationOfficeFacilityID(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldDeputationOfficeFacilityID, field.TypeString, value)
	}
	if eamu.mutation.DeputationOfficeFacilityIDCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldDeputationOfficeFacilityID, field.TypeString)
	}
	if value, ok := eamu.mutation.DeputationOfficeName(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldDeputationOfficeName, field.TypeString, value)
	}
	if eamu.mutation.DeputationOfficeNameCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldDeputationOfficeName, field.TypeString)
	}
	if value, ok := eamu.mutation.DeputationControllingOfficeID(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldDeputationControllingOfficeID, field.TypeString, value)
	}
	if eamu.mutation.DeputationControllingOfficeIDCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldDeputationControllingOfficeID, field.TypeString)
	}
	if value, ok := eamu.mutation.DeputationControllingOfficeName(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldDeputationControllingOfficeName, field.TypeString, value)
	}
	if eamu.mutation.DeputationControllingOfficeNameCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldDeputationControllingOfficeName, field.TypeString)
	}
	if value, ok := eamu.mutation.ControllingOfficeFacilityID(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldControllingOfficeFacilityID, field.TypeString, value)
	}
	if eamu.mutation.ControllingOfficeFacilityIDCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldControllingOfficeFacilityID, field.TypeString)
	}
	if value, ok := eamu.mutation.ControllingOfficeName(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldControllingOfficeName, field.TypeString, value)
	}
	if eamu.mutation.ControllingOfficeNameCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldControllingOfficeName, field.TypeString)
	}
	if value, ok := eamu.mutation.NodalOfficeFacilityID(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldNodalOfficeFacilityID, field.TypeString, value)
	}
	if eamu.mutation.NodalOfficeFacilityIDCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldNodalOfficeFacilityID, field.TypeString)
	}
	if value, ok := eamu.mutation.NodalOfficeName(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldNodalOfficeName, field.TypeString, value)
	}
	if eamu.mutation.NodalOfficeNameCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldNodalOfficeName, field.TypeString)
	}
	if value, ok := eamu.mutation.CenterFacilityId(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldCenterFacilityId, field.TypeString, value)
	}
	if eamu.mutation.CenterFacilityIdCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldCenterFacilityId, field.TypeString)
	}
	if value, ok := eamu.mutation.CentrePreference(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldCentrePreference, field.TypeString, value)
	}
	if eamu.mutation.CentrePreferenceCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldCentrePreference, field.TypeString)
	}
	if value, ok := eamu.mutation.Signature(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldSignature, field.TypeString, value)
	}
	if eamu.mutation.SignatureCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldSignature, field.TypeString)
	}
	if value, ok := eamu.mutation.Photo(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldPhoto, field.TypeString, value)
	}
	if eamu.mutation.PhotoCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldPhoto, field.TypeString)
	}
	if value, ok := eamu.mutation.SignaturePath(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldSignaturePath, field.TypeString, value)
	}
	if eamu.mutation.SignaturePathCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldSignaturePath, field.TypeString)
	}
	if value, ok := eamu.mutation.PhotoPath(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldPhotoPath, field.TypeString, value)
	}
	if eamu.mutation.PhotoPathCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldPhotoPath, field.TypeString)
	}
	if value, ok := eamu.mutation.CandidatePhoto(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldCandidatePhoto, field.TypeBytes, value)
	}
	if eamu.mutation.CandidatePhotoCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldCandidatePhoto, field.TypeBytes)
	}
	if value, ok := eamu.mutation.CandidateSignature(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldCandidateSignature, field.TypeBytes, value)
	}
	if eamu.mutation.CandidateSignatureCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldCandidateSignature, field.TypeBytes)
	}
	if value, ok := eamu.mutation.TempHallTicket(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldTempHallTicket, field.TypeString, value)
	}
	if eamu.mutation.TempHallTicketCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldTempHallTicket, field.TypeString)
	}
	if value, ok := eamu.mutation.CandidateRemarks(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldCandidateRemarks, field.TypeString, value)
	}
	if eamu.mutation.CandidateRemarksCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldCandidateRemarks, field.TypeString)
	}
	if value, ok := eamu.mutation.VAGeneralRemarks(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldVAGeneralRemarks, field.TypeString, value)
	}
	if eamu.mutation.VAGeneralRemarksCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldVAGeneralRemarks, field.TypeString)
	}
	if value, ok := eamu.mutation.CAGeneralRemarks(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldCAGeneralRemarks, field.TypeString, value)
	}
	if eamu.mutation.CAGeneralRemarksCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldCAGeneralRemarks, field.TypeString)
	}
	if value, ok := eamu.mutation.NAGeneralRemarks(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldNAGeneralRemarks, field.TypeString, value)
	}
	if eamu.mutation.NAGeneralRemarksCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldNAGeneralRemarks, field.TypeString)
	}
	if value, ok := eamu.mutation.ApplicationStatus(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldApplicationStatus, field.TypeString, value)
	}
	if eamu.mutation.ApplicationStatusCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldApplicationStatus, field.TypeString)
	}
	if value, ok := eamu.mutation.Status(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldStatus, field.TypeString, value)
	}
	if eamu.mutation.StatusCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldStatus, field.TypeString)
	}
	if value, ok := eamu.mutation.VAUserId(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldVAUserId, field.TypeInt32, value)
	}
	if value, ok := eamu.mutation.AddedVAUserId(); ok {
		_spec.AddField(exam_application_mtspmmg.FieldVAUserId, field.TypeInt32, value)
	}
	if eamu.mutation.VAUserIdCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldVAUserId, field.TypeInt32)
	}
	if value, ok := eamu.mutation.VAUserName(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldVAUserName, field.TypeString, value)
	}
	if eamu.mutation.VAUserNameCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldVAUserName, field.TypeString)
	}
	if value, ok := eamu.mutation.VAEmployeeID(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldVAEmployeeID, field.TypeString, value)
	}
	if eamu.mutation.VAEmployeeIDCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldVAEmployeeID, field.TypeString)
	}
	if value, ok := eamu.mutation.VAEmployeeDesignation(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldVAEmployeeDesignation, field.TypeString, value)
	}
	if eamu.mutation.VAEmployeeDesignationCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldVAEmployeeDesignation, field.TypeString)
	}
	if value, ok := eamu.mutation.VARemarks(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldVARemarks, field.TypeString, value)
	}
	if eamu.mutation.VARemarksCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldVARemarks, field.TypeString)
	}
	if value, ok := eamu.mutation.VADate(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldVADate, field.TypeTime, value)
	}
	if eamu.mutation.VADateCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldVADate, field.TypeTime)
	}
	if value, ok := eamu.mutation.CAUserId(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldCAUserId, field.TypeInt32, value)
	}
	if value, ok := eamu.mutation.AddedCAUserId(); ok {
		_spec.AddField(exam_application_mtspmmg.FieldCAUserId, field.TypeInt32, value)
	}
	if eamu.mutation.CAUserIdCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldCAUserId, field.TypeInt32)
	}
	if value, ok := eamu.mutation.CAUserName(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldCAUserName, field.TypeString, value)
	}
	if eamu.mutation.CAUserNameCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldCAUserName, field.TypeString)
	}
	if value, ok := eamu.mutation.CAEmployeeID(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldCAEmployeeID, field.TypeString, value)
	}
	if eamu.mutation.CAEmployeeIDCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldCAEmployeeID, field.TypeString)
	}
	if value, ok := eamu.mutation.CAEmployeeDesignation(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldCAEmployeeDesignation, field.TypeString, value)
	}
	if eamu.mutation.CAEmployeeDesignationCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldCAEmployeeDesignation, field.TypeString)
	}
	if value, ok := eamu.mutation.CARemarks(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldCARemarks, field.TypeString, value)
	}
	if eamu.mutation.CARemarksCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldCARemarks, field.TypeString)
	}
	if value, ok := eamu.mutation.CADate(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldCADate, field.TypeTime, value)
	}
	if eamu.mutation.CADateCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldCADate, field.TypeTime)
	}
	if value, ok := eamu.mutation.NAUserId(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldNAUserId, field.TypeInt32, value)
	}
	if value, ok := eamu.mutation.AddedNAUserId(); ok {
		_spec.AddField(exam_application_mtspmmg.FieldNAUserId, field.TypeInt32, value)
	}
	if eamu.mutation.NAUserIdCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldNAUserId, field.TypeInt32)
	}
	if value, ok := eamu.mutation.NAUserName(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldNAUserName, field.TypeString, value)
	}
	if eamu.mutation.NAUserNameCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldNAUserName, field.TypeString)
	}
	if value, ok := eamu.mutation.NAEmployeeID(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldNAEmployeeID, field.TypeString, value)
	}
	if eamu.mutation.NAEmployeeIDCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldNAEmployeeID, field.TypeString)
	}
	if value, ok := eamu.mutation.NAEmployeeDesignation(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldNAEmployeeDesignation, field.TypeString, value)
	}
	if eamu.mutation.NAEmployeeDesignationCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldNAEmployeeDesignation, field.TypeString)
	}
	if value, ok := eamu.mutation.NARemarks(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldNARemarks, field.TypeString, value)
	}
	if eamu.mutation.NARemarksCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldNARemarks, field.TypeString)
	}
	if value, ok := eamu.mutation.NADate(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldNADate, field.TypeTime, value)
	}
	if eamu.mutation.NADateCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldNADate, field.TypeTime)
	}
	if value, ok := eamu.mutation.AppliactionRemarks(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldAppliactionRemarks, field.TypeString, value)
	}
	if eamu.mutation.AppliactionRemarksCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldAppliactionRemarks, field.TypeString)
	}
	if value, ok := eamu.mutation.CadrePreferences(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldCadrePreferences, field.TypeJSON, value)
	}
	if value, ok := eamu.mutation.AppendedCadrePreferences(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, exam_application_mtspmmg.FieldCadrePreferences, value)
		})
	}
	if eamu.mutation.CadrePreferencesCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldCadrePreferences, field.TypeJSON)
	}
	if value, ok := eamu.mutation.CAPreviousRemarks(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldCAPreviousRemarks, field.TypeString, value)
	}
	if eamu.mutation.CAPreviousRemarksCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldCAPreviousRemarks, field.TypeString)
	}
	if value, ok := eamu.mutation.PunishmentStatus(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldPunishmentStatus, field.TypeBool, value)
	}
	if eamu.mutation.PunishmentStatusCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldPunishmentStatus, field.TypeBool)
	}
	if value, ok := eamu.mutation.DisciplinaryCaseStatus(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldDisciplinaryCaseStatus, field.TypeBool, value)
	}
	if eamu.mutation.DisciplinaryCaseStatusCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldDisciplinaryCaseStatus, field.TypeBool)
	}
	if value, ok := eamu.mutation.GenerateHallTicketFlag(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldGenerateHallTicketFlag, field.TypeBool, value)
	}
	if eamu.mutation.GenerateHallTicketFlagCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldGenerateHallTicketFlag, field.TypeBool)
	}
	if value, ok := eamu.mutation.HallTicketNumber(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldHallTicketNumber, field.TypeString, value)
	}
	if eamu.mutation.HallTicketNumberCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldHallTicketNumber, field.TypeString)
	}
	if value, ok := eamu.mutation.HallTicketGeneratedFlag(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldHallTicketGeneratedFlag, field.TypeBool, value)
	}
	if eamu.mutation.HallTicketGeneratedFlagCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldHallTicketGeneratedFlag, field.TypeBool)
	}
	if value, ok := eamu.mutation.GenerateHallTicketFlagByNO(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldGenerateHallTicketFlagByNO, field.TypeBool, value)
	}
	if eamu.mutation.GenerateHallTicketFlagByNOCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldGenerateHallTicketFlagByNO, field.TypeBool)
	}
	if value, ok := eamu.mutation.HallTicketGeneratedDate(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldHallTicketGeneratedDate, field.TypeTime, value)
	}
	if eamu.mutation.HallTicketGeneratedDateCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldHallTicketGeneratedDate, field.TypeTime)
	}
	if value, ok := eamu.mutation.TemporaryHallTicket(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldTemporaryHallTicket, field.TypeString, value)
	}
	if eamu.mutation.TemporaryHallTicketCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldTemporaryHallTicket, field.TypeString)
	}
	if value, ok := eamu.mutation.OptionUsed(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldOptionUsed, field.TypeString, value)
	}
	if eamu.mutation.OptionUsedCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldOptionUsed, field.TypeString)
	}
	if value, ok := eamu.mutation.Remarks(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldRemarks, field.TypeString, value)
	}
	if eamu.mutation.RemarksCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldRemarks, field.TypeString)
	}
	if value, ok := eamu.mutation.Cadre(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldCadre, field.TypeString, value)
	}
	if eamu.mutation.CadreCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldCadre, field.TypeString)
	}
	if value, ok := eamu.mutation.EmployeePost(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldEmployeePost, field.TypeString, value)
	}
	if eamu.mutation.EmployeePostCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldEmployeePost, field.TypeString)
	}
	if value, ok := eamu.mutation.DOJInEligiblePost(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldDOJInEligiblePost, field.TypeString, value)
	}
	if eamu.mutation.DOJInEligiblePostCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldDOJInEligiblePost, field.TypeString)
	}
	if value, ok := eamu.mutation.DivisionPreferences(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldDivisionPreferences, field.TypeJSON, value)
	}
	if value, ok := eamu.mutation.AppendedDivisionPreferences(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, exam_application_mtspmmg.FieldDivisionPreferences, value)
		})
	}
	if eamu.mutation.DivisionPreferencesCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldDivisionPreferences, field.TypeJSON)
	}
	if value, ok := eamu.mutation.GDSEngagement(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldGDSEngagement, field.TypeJSON, value)
	}
	if value, ok := eamu.mutation.AppendedGDSEngagement(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, exam_application_mtspmmg.FieldGDSEngagement, value)
		})
	}
	if eamu.mutation.GDSEngagementCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldGDSEngagement, field.TypeJSON)
	}
	if value, ok := eamu.mutation.FacilityName(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldFacilityName, field.TypeString, value)
	}
	if eamu.mutation.FacilityNameCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldFacilityName, field.TypeString)
	}
	if value, ok := eamu.mutation.ServiceLength(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldServiceLength, field.TypeJSON, value)
	}
	if value, ok := eamu.mutation.AppendedServiceLength(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, exam_application_mtspmmg.FieldServiceLength, value)
		})
	}
	if eamu.mutation.ServiceLengthCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldServiceLength, field.TypeJSON)
	}
	if value, ok := eamu.mutation.NonQualifyingService(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldNonQualifyingService, field.TypeJSON, value)
	}
	if value, ok := eamu.mutation.AppendedNonQualifyingService(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, exam_application_mtspmmg.FieldNonQualifyingService, value)
		})
	}
	if eamu.mutation.NonQualifyingServiceCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldNonQualifyingService, field.TypeJSON)
	}
	if value, ok := eamu.mutation.DCInPresentCadre(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldDCInPresentCadre, field.TypeString, value)
	}
	if eamu.mutation.DCInPresentCadreCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldDCInPresentCadre, field.TypeString)
	}
	if value, ok := eamu.mutation.ReportingOfficeID(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldReportingOfficeID, field.TypeString, value)
	}
	if eamu.mutation.ReportingOfficeIDCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldReportingOfficeID, field.TypeString)
	}
	if value, ok := eamu.mutation.PostPreferences(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldPostPreferences, field.TypeJSON, value)
	}
	if value, ok := eamu.mutation.AppendedPostPreferences(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, exam_application_mtspmmg.FieldPostPreferences, value)
		})
	}
	if eamu.mutation.PostPreferencesCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldPostPreferences, field.TypeJSON)
	}
	if value, ok := eamu.mutation.UnitPreferences(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldUnitPreferences, field.TypeJSON, value)
	}
	if value, ok := eamu.mutation.AppendedUnitPreferences(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, exam_application_mtspmmg.FieldUnitPreferences, value)
		})
	}
	if eamu.mutation.UnitPreferencesCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldUnitPreferences, field.TypeJSON)
	}
	if value, ok := eamu.mutation.CenterId(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldCenterId, field.TypeInt32, value)
	}
	if value, ok := eamu.mutation.AddedCenterId(); ok {
		_spec.AddField(exam_application_mtspmmg.FieldCenterId, field.TypeInt32, value)
	}
	if eamu.mutation.CenterIdCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldCenterId, field.TypeInt32)
	}
	if value, ok := eamu.mutation.ClaimingQualifyingService(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldClaimingQualifyingService, field.TypeString, value)
	}
	if eamu.mutation.ClaimingQualifyingServiceCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldClaimingQualifyingService, field.TypeString)
	}
	if value, ok := eamu.mutation.DeputationOfficePincode(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldDeputationOfficePincode, field.TypeString, value)
	}
	if eamu.mutation.DeputationOfficePincodeCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldDeputationOfficePincode, field.TypeString)
	}
	if value, ok := eamu.mutation.RecommendedStatus(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldRecommendedStatus, field.TypeString, value)
	}
	if eamu.mutation.RecommendedStatusCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldRecommendedStatus, field.TypeString)
	}
	if value, ok := eamu.mutation.UpdatedAt(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldUpdatedAt, field.TypeTime, value)
	}
	if eamu.mutation.UpdatedAtCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := eamu.mutation.UpdatedBy(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldUpdatedBy, field.TypeString, value)
	}
	if eamu.mutation.UpdatedByCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := eamu.mutation.ApplicationWdlDate(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldApplicationWdlDate, field.TypeTime, value)
	}
	if eamu.mutation.ApplicationWdlDateCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldApplicationWdlDate, field.TypeTime)
	}
	if value, ok := eamu.mutation.ExamCenterHall(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldExamCenterHall, field.TypeInt32, value)
	}
	if value, ok := eamu.mutation.AddedExamCenterHall(); ok {
		_spec.AddField(exam_application_mtspmmg.FieldExamCenterHall, field.TypeInt32, value)
	}
	if eamu.mutation.ExamCenterHallCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldExamCenterHall, field.TypeInt32)
	}
	if value, ok := eamu.mutation.HallName(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldHallName, field.TypeString, value)
	}
	if eamu.mutation.HallNameCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldHallName, field.TypeString)
	}
	if eamu.mutation.UsersMTSPMMGRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_application_mtspmmg.UsersMTSPMMGRefTable,
			Columns: []string{exam_application_mtspmmg.UsersMTSPMMGRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usermaster.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eamu.mutation.RemovedUsersMTSPMMGRefIDs(); len(nodes) > 0 && !eamu.mutation.UsersMTSPMMGRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_application_mtspmmg.UsersMTSPMMGRefTable,
			Columns: []string{exam_application_mtspmmg.UsersMTSPMMGRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usermaster.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eamu.mutation.UsersMTSPMMGRefIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_application_mtspmmg.UsersMTSPMMGRefTable,
			Columns: []string{exam_application_mtspmmg.UsersMTSPMMGRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usermaster.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eamu.mutation.RoleusersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   exam_application_mtspmmg.RoleusersTable,
			Columns: []string{exam_application_mtspmmg.RoleusersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rolemaster.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eamu.mutation.RoleusersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   exam_application_mtspmmg.RoleusersTable,
			Columns: []string{exam_application_mtspmmg.RoleusersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rolemaster.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eamu.mutation.CadrePrefRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_application_mtspmmg.CadrePrefRefTable,
			Columns: []string{exam_application_mtspmmg.CadrePrefRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cadre_choice_mtspmmg.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eamu.mutation.RemovedCadrePrefRefIDs(); len(nodes) > 0 && !eamu.mutation.CadrePrefRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_application_mtspmmg.CadrePrefRefTable,
			Columns: []string{exam_application_mtspmmg.CadrePrefRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cadre_choice_mtspmmg.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eamu.mutation.CadrePrefRefIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_application_mtspmmg.CadrePrefRefTable,
			Columns: []string{exam_application_mtspmmg.CadrePrefRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cadre_choice_mtspmmg.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eamu.mutation.CirclePrefRefMTSPMMGCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_application_mtspmmg.CirclePrefRefMTSPMMGTable,
			Columns: []string{exam_application_mtspmmg.CirclePrefRefMTSPMMGColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(division_choice_mtspmmg.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eamu.mutation.RemovedCirclePrefRefMTSPMMGIDs(); len(nodes) > 0 && !eamu.mutation.CirclePrefRefMTSPMMGCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_application_mtspmmg.CirclePrefRefMTSPMMGTable,
			Columns: []string{exam_application_mtspmmg.CirclePrefRefMTSPMMGColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(division_choice_mtspmmg.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eamu.mutation.CirclePrefRefMTSPMMGIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_application_mtspmmg.CirclePrefRefMTSPMMGTable,
			Columns: []string{exam_application_mtspmmg.CirclePrefRefMTSPMMGColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(division_choice_mtspmmg.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eamu.mutation.MTSPMMGApplicationsRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_application_mtspmmg.MTSPMMGApplicationsRefTable,
			Columns: []string{exam_application_mtspmmg.MTSPMMGApplicationsRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(recommendationsmtspmmgapplications.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eamu.mutation.RemovedMTSPMMGApplicationsRefIDs(); len(nodes) > 0 && !eamu.mutation.MTSPMMGApplicationsRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_application_mtspmmg.MTSPMMGApplicationsRefTable,
			Columns: []string{exam_application_mtspmmg.MTSPMMGApplicationsRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(recommendationsmtspmmgapplications.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eamu.mutation.MTSPMMGApplicationsRefIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_application_mtspmmg.MTSPMMGApplicationsRefTable,
			Columns: []string{exam_application_mtspmmg.MTSPMMGApplicationsRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(recommendationsmtspmmgapplications.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eamu.mutation.MTSPMMGExamCentresCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   exam_application_mtspmmg.MTSPMMGExamCentresTable,
			Columns: []string{exam_application_mtspmmg.MTSPMMGExamCentresColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(center.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eamu.mutation.MTSPMMGExamCentresIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   exam_application_mtspmmg.MTSPMMGExamCentresTable,
			Columns: []string{exam_application_mtspmmg.MTSPMMGExamCentresColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(center.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eamu.mutation.ExamcitycenterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   exam_application_mtspmmg.ExamcitycenterTable,
			Columns: []string{exam_application_mtspmmg.ExamcitycenterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(examcitycenter.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eamu.mutation.ExamcitycenterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   exam_application_mtspmmg.ExamcitycenterTable,
			Columns: []string{exam_application_mtspmmg.ExamcitycenterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(examcitycenter.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eamu.mutation.ExamsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   exam_application_mtspmmg.ExamsTable,
			Columns: []string{exam_application_mtspmmg.ExamsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eamu.mutation.ExamsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   exam_application_mtspmmg.ExamsTable,
			Columns: []string{exam_application_mtspmmg.ExamsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eamu.mutation.CircleRefsMTSPMMGCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   exam_application_mtspmmg.CircleRefsMTSPMMGTable,
			Columns: []string{exam_application_mtspmmg.CircleRefsMTSPMMGColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(circlesummaryforno.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eamu.mutation.CircleRefsMTSPMMGIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   exam_application_mtspmmg.CircleRefsMTSPMMGTable,
			Columns: []string{exam_application_mtspmmg.CircleRefsMTSPMMGColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(circlesummaryforno.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eamu.mutation.LogDataCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_application_mtspmmg.LogDataTable,
			Columns: []string{exam_application_mtspmmg.LogDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(logs.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eamu.mutation.RemovedLogDataIDs(); len(nodes) > 0 && !eamu.mutation.LogDataCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_application_mtspmmg.LogDataTable,
			Columns: []string{exam_application_mtspmmg.LogDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(logs.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eamu.mutation.LogDataIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_application_mtspmmg.LogDataTable,
			Columns: []string{exam_application_mtspmmg.LogDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(logs.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, eamu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{exam_application_mtspmmg.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	eamu.mutation.done = true
	return n, nil
}

// ExamApplicationMTSPMMGUpdateOne is the builder for updating a single Exam_Application_MTSPMMG entity.
type ExamApplicationMTSPMMGUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ExamApplicationMTSPMMGMutation
}

// SetApplicationNumber sets the "ApplicationNumber" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetApplicationNumber(s string) *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.SetApplicationNumber(s)
	return eamuo
}

// SetNillableApplicationNumber sets the "ApplicationNumber" field if the given value is not nil.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetNillableApplicationNumber(s *string) *ExamApplicationMTSPMMGUpdateOne {
	if s != nil {
		eamuo.SetApplicationNumber(*s)
	}
	return eamuo
}

// ClearApplicationNumber clears the value of the "ApplicationNumber" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) ClearApplicationNumber() *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.ClearApplicationNumber()
	return eamuo
}

// SetApplnSubmittedDate sets the "ApplnSubmittedDate" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetApplnSubmittedDate(t time.Time) *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.SetApplnSubmittedDate(t)
	return eamuo
}

// SetNillableApplnSubmittedDate sets the "ApplnSubmittedDate" field if the given value is not nil.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetNillableApplnSubmittedDate(t *time.Time) *ExamApplicationMTSPMMGUpdateOne {
	if t != nil {
		eamuo.SetApplnSubmittedDate(*t)
	}
	return eamuo
}

// ClearApplnSubmittedDate clears the value of the "ApplnSubmittedDate" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) ClearApplnSubmittedDate() *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.ClearApplnSubmittedDate()
	return eamuo
}

// SetExamCode sets the "ExamCode" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetExamCode(i int32) *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.SetExamCode(i)
	return eamuo
}

// SetNillableExamCode sets the "ExamCode" field if the given value is not nil.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetNillableExamCode(i *int32) *ExamApplicationMTSPMMGUpdateOne {
	if i != nil {
		eamuo.SetExamCode(*i)
	}
	return eamuo
}

// ClearExamCode clears the value of the "ExamCode" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) ClearExamCode() *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.ClearExamCode()
	return eamuo
}

// SetExamShortName sets the "ExamShortName" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetExamShortName(s string) *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.SetExamShortName(s)
	return eamuo
}

// SetNillableExamShortName sets the "ExamShortName" field if the given value is not nil.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetNillableExamShortName(s *string) *ExamApplicationMTSPMMGUpdateOne {
	if s != nil {
		eamuo.SetExamShortName(*s)
	}
	return eamuo
}

// ClearExamShortName clears the value of the "ExamShortName" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) ClearExamShortName() *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.ClearExamShortName()
	return eamuo
}

// SetExamName sets the "ExamName" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetExamName(s string) *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.SetExamName(s)
	return eamuo
}

// SetNillableExamName sets the "ExamName" field if the given value is not nil.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetNillableExamName(s *string) *ExamApplicationMTSPMMGUpdateOne {
	if s != nil {
		eamuo.SetExamName(*s)
	}
	return eamuo
}

// ClearExamName clears the value of the "ExamName" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) ClearExamName() *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.ClearExamName()
	return eamuo
}

// SetSmsExamShortName sets the "SmsExamShortName" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetSmsExamShortName(s string) *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.SetSmsExamShortName(s)
	return eamuo
}

// SetNillableSmsExamShortName sets the "SmsExamShortName" field if the given value is not nil.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetNillableSmsExamShortName(s *string) *ExamApplicationMTSPMMGUpdateOne {
	if s != nil {
		eamuo.SetSmsExamShortName(*s)
	}
	return eamuo
}

// ClearSmsExamShortName clears the value of the "SmsExamShortName" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) ClearSmsExamShortName() *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.ClearSmsExamShortName()
	return eamuo
}

// SetExamYear sets the "ExamYear" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetExamYear(s string) *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.SetExamYear(s)
	return eamuo
}

// SetNillableExamYear sets the "ExamYear" field if the given value is not nil.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetNillableExamYear(s *string) *ExamApplicationMTSPMMGUpdateOne {
	if s != nil {
		eamuo.SetExamYear(*s)
	}
	return eamuo
}

// ClearExamYear clears the value of the "ExamYear" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) ClearExamYear() *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.ClearExamYear()
	return eamuo
}

// SetUserID sets the "UserID" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetUserID(i int32) *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.ResetUserID()
	eamuo.mutation.SetUserID(i)
	return eamuo
}

// SetNillableUserID sets the "UserID" field if the given value is not nil.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetNillableUserID(i *int32) *ExamApplicationMTSPMMGUpdateOne {
	if i != nil {
		eamuo.SetUserID(*i)
	}
	return eamuo
}

// AddUserID adds i to the "UserID" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) AddUserID(i int32) *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.AddUserID(i)
	return eamuo
}

// ClearUserID clears the value of the "UserID" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) ClearUserID() *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.ClearUserID()
	return eamuo
}

// SetEmployeeID sets the "EmployeeID" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetEmployeeID(i int64) *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.ResetEmployeeID()
	eamuo.mutation.SetEmployeeID(i)
	return eamuo
}

// SetNillableEmployeeID sets the "EmployeeID" field if the given value is not nil.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetNillableEmployeeID(i *int64) *ExamApplicationMTSPMMGUpdateOne {
	if i != nil {
		eamuo.SetEmployeeID(*i)
	}
	return eamuo
}

// AddEmployeeID adds i to the "EmployeeID" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) AddEmployeeID(i int64) *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.AddEmployeeID(i)
	return eamuo
}

// ClearEmployeeID clears the value of the "EmployeeID" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) ClearEmployeeID() *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.ClearEmployeeID()
	return eamuo
}

// SetEmployeeName sets the "EmployeeName" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetEmployeeName(s string) *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.SetEmployeeName(s)
	return eamuo
}

// SetNillableEmployeeName sets the "EmployeeName" field if the given value is not nil.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetNillableEmployeeName(s *string) *ExamApplicationMTSPMMGUpdateOne {
	if s != nil {
		eamuo.SetEmployeeName(*s)
	}
	return eamuo
}

// ClearEmployeeName clears the value of the "EmployeeName" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) ClearEmployeeName() *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.ClearEmployeeName()
	return eamuo
}

// SetDOB sets the "DOB" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetDOB(s string) *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.SetDOB(s)
	return eamuo
}

// SetNillableDOB sets the "DOB" field if the given value is not nil.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetNillableDOB(s *string) *ExamApplicationMTSPMMGUpdateOne {
	if s != nil {
		eamuo.SetDOB(*s)
	}
	return eamuo
}

// ClearDOB clears the value of the "DOB" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) ClearDOB() *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.ClearDOB()
	return eamuo
}

// SetGender sets the "Gender" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetGender(s string) *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.SetGender(s)
	return eamuo
}

// SetNillableGender sets the "Gender" field if the given value is not nil.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetNillableGender(s *string) *ExamApplicationMTSPMMGUpdateOne {
	if s != nil {
		eamuo.SetGender(*s)
	}
	return eamuo
}

// ClearGender clears the value of the "Gender" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) ClearGender() *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.ClearGender()
	return eamuo
}

// SetMobileNumber sets the "MobileNumber" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetMobileNumber(s string) *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.SetMobileNumber(s)
	return eamuo
}

// SetNillableMobileNumber sets the "MobileNumber" field if the given value is not nil.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetNillableMobileNumber(s *string) *ExamApplicationMTSPMMGUpdateOne {
	if s != nil {
		eamuo.SetMobileNumber(*s)
	}
	return eamuo
}

// ClearMobileNumber clears the value of the "MobileNumber" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) ClearMobileNumber() *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.ClearMobileNumber()
	return eamuo
}

// SetEmailID sets the "EmailID" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetEmailID(s string) *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.SetEmailID(s)
	return eamuo
}

// SetNillableEmailID sets the "EmailID" field if the given value is not nil.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetNillableEmailID(s *string) *ExamApplicationMTSPMMGUpdateOne {
	if s != nil {
		eamuo.SetEmailID(*s)
	}
	return eamuo
}

// ClearEmailID clears the value of the "EmailID" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) ClearEmailID() *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.ClearEmailID()
	return eamuo
}

// SetCategoryCode sets the "CategoryCode" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetCategoryCode(s string) *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.SetCategoryCode(s)
	return eamuo
}

// SetNillableCategoryCode sets the "CategoryCode" field if the given value is not nil.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetNillableCategoryCode(s *string) *ExamApplicationMTSPMMGUpdateOne {
	if s != nil {
		eamuo.SetCategoryCode(*s)
	}
	return eamuo
}

// ClearCategoryCode clears the value of the "CategoryCode" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) ClearCategoryCode() *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.ClearCategoryCode()
	return eamuo
}

// SetCategoryDescription sets the "CategoryDescription" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetCategoryDescription(s string) *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.SetCategoryDescription(s)
	return eamuo
}

// SetNillableCategoryDescription sets the "CategoryDescription" field if the given value is not nil.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetNillableCategoryDescription(s *string) *ExamApplicationMTSPMMGUpdateOne {
	if s != nil {
		eamuo.SetCategoryDescription(*s)
	}
	return eamuo
}

// ClearCategoryDescription clears the value of the "CategoryDescription" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) ClearCategoryDescription() *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.ClearCategoryDescription()
	return eamuo
}

// SetDisabilityTypeID sets the "DisabilityTypeID" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetDisabilityTypeID(s string) *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.SetDisabilityTypeID(s)
	return eamuo
}

// SetNillableDisabilityTypeID sets the "DisabilityTypeID" field if the given value is not nil.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetNillableDisabilityTypeID(s *string) *ExamApplicationMTSPMMGUpdateOne {
	if s != nil {
		eamuo.SetDisabilityTypeID(*s)
	}
	return eamuo
}

// ClearDisabilityTypeID clears the value of the "DisabilityTypeID" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) ClearDisabilityTypeID() *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.ClearDisabilityTypeID()
	return eamuo
}

// SetDisabilityTypeCode sets the "DisabilityTypeCode" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetDisabilityTypeCode(s string) *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.SetDisabilityTypeCode(s)
	return eamuo
}

// SetNillableDisabilityTypeCode sets the "DisabilityTypeCode" field if the given value is not nil.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetNillableDisabilityTypeCode(s *string) *ExamApplicationMTSPMMGUpdateOne {
	if s != nil {
		eamuo.SetDisabilityTypeCode(*s)
	}
	return eamuo
}

// ClearDisabilityTypeCode clears the value of the "DisabilityTypeCode" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) ClearDisabilityTypeCode() *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.ClearDisabilityTypeCode()
	return eamuo
}

// SetDisabilityTypeDescription sets the "DisabilityTypeDescription" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetDisabilityTypeDescription(s string) *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.SetDisabilityTypeDescription(s)
	return eamuo
}

// SetNillableDisabilityTypeDescription sets the "DisabilityTypeDescription" field if the given value is not nil.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetNillableDisabilityTypeDescription(s *string) *ExamApplicationMTSPMMGUpdateOne {
	if s != nil {
		eamuo.SetDisabilityTypeDescription(*s)
	}
	return eamuo
}

// ClearDisabilityTypeDescription clears the value of the "DisabilityTypeDescription" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) ClearDisabilityTypeDescription() *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.ClearDisabilityTypeDescription()
	return eamuo
}

// SetDisabilityPercentage sets the "DisabilityPercentage" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetDisabilityPercentage(i int32) *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.ResetDisabilityPercentage()
	eamuo.mutation.SetDisabilityPercentage(i)
	return eamuo
}

// SetNillableDisabilityPercentage sets the "DisabilityPercentage" field if the given value is not nil.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetNillableDisabilityPercentage(i *int32) *ExamApplicationMTSPMMGUpdateOne {
	if i != nil {
		eamuo.SetDisabilityPercentage(*i)
	}
	return eamuo
}

// AddDisabilityPercentage adds i to the "DisabilityPercentage" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) AddDisabilityPercentage(i int32) *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.AddDisabilityPercentage(i)
	return eamuo
}

// ClearDisabilityPercentage clears the value of the "DisabilityPercentage" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) ClearDisabilityPercentage() *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.ClearDisabilityPercentage()
	return eamuo
}

// SetDCCS sets the "DCCS" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetDCCS(s string) *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.SetDCCS(s)
	return eamuo
}

// SetNillableDCCS sets the "DCCS" field if the given value is not nil.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetNillableDCCS(s *string) *ExamApplicationMTSPMMGUpdateOne {
	if s != nil {
		eamuo.SetDCCS(*s)
	}
	return eamuo
}

// ClearDCCS clears the value of the "DCCS" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) ClearDCCS() *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.ClearDCCS()
	return eamuo
}

// SetEntryPostCode sets the "EntryPostCode" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetEntryPostCode(s string) *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.SetEntryPostCode(s)
	return eamuo
}

// SetNillableEntryPostCode sets the "EntryPostCode" field if the given value is not nil.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetNillableEntryPostCode(s *string) *ExamApplicationMTSPMMGUpdateOne {
	if s != nil {
		eamuo.SetEntryPostCode(*s)
	}
	return eamuo
}

// ClearEntryPostCode clears the value of the "EntryPostCode" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) ClearEntryPostCode() *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.ClearEntryPostCode()
	return eamuo
}

// SetEntryPostDescription sets the "EntryPostDescription" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetEntryPostDescription(s string) *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.SetEntryPostDescription(s)
	return eamuo
}

// SetNillableEntryPostDescription sets the "EntryPostDescription" field if the given value is not nil.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetNillableEntryPostDescription(s *string) *ExamApplicationMTSPMMGUpdateOne {
	if s != nil {
		eamuo.SetEntryPostDescription(*s)
	}
	return eamuo
}

// ClearEntryPostDescription clears the value of the "EntryPostDescription" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) ClearEntryPostDescription() *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.ClearEntryPostDescription()
	return eamuo
}

// SetPresentPostCode sets the "PresentPostCode" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetPresentPostCode(s string) *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.SetPresentPostCode(s)
	return eamuo
}

// SetNillablePresentPostCode sets the "PresentPostCode" field if the given value is not nil.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetNillablePresentPostCode(s *string) *ExamApplicationMTSPMMGUpdateOne {
	if s != nil {
		eamuo.SetPresentPostCode(*s)
	}
	return eamuo
}

// ClearPresentPostCode clears the value of the "PresentPostCode" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) ClearPresentPostCode() *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.ClearPresentPostCode()
	return eamuo
}

// SetPresentPostDescription sets the "PresentPostDescription" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetPresentPostDescription(s string) *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.SetPresentPostDescription(s)
	return eamuo
}

// SetNillablePresentPostDescription sets the "PresentPostDescription" field if the given value is not nil.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetNillablePresentPostDescription(s *string) *ExamApplicationMTSPMMGUpdateOne {
	if s != nil {
		eamuo.SetPresentPostDescription(*s)
	}
	return eamuo
}

// ClearPresentPostDescription clears the value of the "PresentPostDescription" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) ClearPresentPostDescription() *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.ClearPresentPostDescription()
	return eamuo
}

// SetFeederPostCode sets the "FeederPostCode" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetFeederPostCode(s string) *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.SetFeederPostCode(s)
	return eamuo
}

// SetNillableFeederPostCode sets the "FeederPostCode" field if the given value is not nil.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetNillableFeederPostCode(s *string) *ExamApplicationMTSPMMGUpdateOne {
	if s != nil {
		eamuo.SetFeederPostCode(*s)
	}
	return eamuo
}

// ClearFeederPostCode clears the value of the "FeederPostCode" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) ClearFeederPostCode() *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.ClearFeederPostCode()
	return eamuo
}

// SetFeederPostDescription sets the "FeederPostDescription" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetFeederPostDescription(s string) *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.SetFeederPostDescription(s)
	return eamuo
}

// SetNillableFeederPostDescription sets the "FeederPostDescription" field if the given value is not nil.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetNillableFeederPostDescription(s *string) *ExamApplicationMTSPMMGUpdateOne {
	if s != nil {
		eamuo.SetFeederPostDescription(*s)
	}
	return eamuo
}

// ClearFeederPostDescription clears the value of the "FeederPostDescription" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) ClearFeederPostDescription() *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.ClearFeederPostDescription()
	return eamuo
}

// SetFeederPostJoiningDate sets the "FeederPostJoiningDate" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetFeederPostJoiningDate(s string) *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.SetFeederPostJoiningDate(s)
	return eamuo
}

// SetNillableFeederPostJoiningDate sets the "FeederPostJoiningDate" field if the given value is not nil.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetNillableFeederPostJoiningDate(s *string) *ExamApplicationMTSPMMGUpdateOne {
	if s != nil {
		eamuo.SetFeederPostJoiningDate(*s)
	}
	return eamuo
}

// ClearFeederPostJoiningDate clears the value of the "FeederPostJoiningDate" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) ClearFeederPostJoiningDate() *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.ClearFeederPostJoiningDate()
	return eamuo
}

// SetDesignationID sets the "DesignationID" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetDesignationID(s string) *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.SetDesignationID(s)
	return eamuo
}

// SetNillableDesignationID sets the "DesignationID" field if the given value is not nil.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetNillableDesignationID(s *string) *ExamApplicationMTSPMMGUpdateOne {
	if s != nil {
		eamuo.SetDesignationID(*s)
	}
	return eamuo
}

// ClearDesignationID clears the value of the "DesignationID" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) ClearDesignationID() *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.ClearDesignationID()
	return eamuo
}

// SetPresentDesignation sets the "PresentDesignation" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetPresentDesignation(s string) *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.SetPresentDesignation(s)
	return eamuo
}

// SetNillablePresentDesignation sets the "PresentDesignation" field if the given value is not nil.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetNillablePresentDesignation(s *string) *ExamApplicationMTSPMMGUpdateOne {
	if s != nil {
		eamuo.SetPresentDesignation(*s)
	}
	return eamuo
}

// ClearPresentDesignation clears the value of the "PresentDesignation" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) ClearPresentDesignation() *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.ClearPresentDesignation()
	return eamuo
}

// SetEducationCode sets the "EducationCode" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetEducationCode(s string) *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.SetEducationCode(s)
	return eamuo
}

// SetNillableEducationCode sets the "EducationCode" field if the given value is not nil.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetNillableEducationCode(s *string) *ExamApplicationMTSPMMGUpdateOne {
	if s != nil {
		eamuo.SetEducationCode(*s)
	}
	return eamuo
}

// ClearEducationCode clears the value of the "EducationCode" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) ClearEducationCode() *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.ClearEducationCode()
	return eamuo
}

// SetEducationDescription sets the "EducationDescription" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetEducationDescription(s string) *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.SetEducationDescription(s)
	return eamuo
}

// SetNillableEducationDescription sets the "EducationDescription" field if the given value is not nil.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetNillableEducationDescription(s *string) *ExamApplicationMTSPMMGUpdateOne {
	if s != nil {
		eamuo.SetEducationDescription(*s)
	}
	return eamuo
}

// ClearEducationDescription clears the value of the "EducationDescription" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) ClearEducationDescription() *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.ClearEducationDescription()
	return eamuo
}

// SetFacilityUniqueID sets the "FacilityUniqueID" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetFacilityUniqueID(s string) *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.SetFacilityUniqueID(s)
	return eamuo
}

// SetNillableFacilityUniqueID sets the "FacilityUniqueID" field if the given value is not nil.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetNillableFacilityUniqueID(s *string) *ExamApplicationMTSPMMGUpdateOne {
	if s != nil {
		eamuo.SetFacilityUniqueID(*s)
	}
	return eamuo
}

// ClearFacilityUniqueID clears the value of the "FacilityUniqueID" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) ClearFacilityUniqueID() *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.ClearFacilityUniqueID()
	return eamuo
}

// SetWorkingOfficePincode sets the "WorkingOfficePincode" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetWorkingOfficePincode(i int32) *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.ResetWorkingOfficePincode()
	eamuo.mutation.SetWorkingOfficePincode(i)
	return eamuo
}

// SetNillableWorkingOfficePincode sets the "WorkingOfficePincode" field if the given value is not nil.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetNillableWorkingOfficePincode(i *int32) *ExamApplicationMTSPMMGUpdateOne {
	if i != nil {
		eamuo.SetWorkingOfficePincode(*i)
	}
	return eamuo
}

// AddWorkingOfficePincode adds i to the "WorkingOfficePincode" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) AddWorkingOfficePincode(i int32) *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.AddWorkingOfficePincode(i)
	return eamuo
}

// ClearWorkingOfficePincode clears the value of the "WorkingOfficePincode" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) ClearWorkingOfficePincode() *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.ClearWorkingOfficePincode()
	return eamuo
}

// SetWorkingOfficeFacilityID sets the "WorkingOfficeFacilityID" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetWorkingOfficeFacilityID(s string) *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.SetWorkingOfficeFacilityID(s)
	return eamuo
}

// SetNillableWorkingOfficeFacilityID sets the "WorkingOfficeFacilityID" field if the given value is not nil.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetNillableWorkingOfficeFacilityID(s *string) *ExamApplicationMTSPMMGUpdateOne {
	if s != nil {
		eamuo.SetWorkingOfficeFacilityID(*s)
	}
	return eamuo
}

// ClearWorkingOfficeFacilityID clears the value of the "WorkingOfficeFacilityID" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) ClearWorkingOfficeFacilityID() *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.ClearWorkingOfficeFacilityID()
	return eamuo
}

// SetWorkingOfficeName sets the "WorkingOfficeName" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetWorkingOfficeName(s string) *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.SetWorkingOfficeName(s)
	return eamuo
}

// SetNillableWorkingOfficeName sets the "WorkingOfficeName" field if the given value is not nil.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetNillableWorkingOfficeName(s *string) *ExamApplicationMTSPMMGUpdateOne {
	if s != nil {
		eamuo.SetWorkingOfficeName(*s)
	}
	return eamuo
}

// ClearWorkingOfficeName clears the value of the "WorkingOfficeName" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) ClearWorkingOfficeName() *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.ClearWorkingOfficeName()
	return eamuo
}

// SetWorkingOfficeCircleFacilityID sets the "WorkingOfficeCircleFacilityID" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetWorkingOfficeCircleFacilityID(s string) *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.SetWorkingOfficeCircleFacilityID(s)
	return eamuo
}

// SetNillableWorkingOfficeCircleFacilityID sets the "WorkingOfficeCircleFacilityID" field if the given value is not nil.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetNillableWorkingOfficeCircleFacilityID(s *string) *ExamApplicationMTSPMMGUpdateOne {
	if s != nil {
		eamuo.SetWorkingOfficeCircleFacilityID(*s)
	}
	return eamuo
}

// ClearWorkingOfficeCircleFacilityID clears the value of the "WorkingOfficeCircleFacilityID" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) ClearWorkingOfficeCircleFacilityID() *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.ClearWorkingOfficeCircleFacilityID()
	return eamuo
}

// SetWorkingOfficeCircleName sets the "WorkingOfficeCircleName" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetWorkingOfficeCircleName(s string) *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.SetWorkingOfficeCircleName(s)
	return eamuo
}

// SetNillableWorkingOfficeCircleName sets the "WorkingOfficeCircleName" field if the given value is not nil.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetNillableWorkingOfficeCircleName(s *string) *ExamApplicationMTSPMMGUpdateOne {
	if s != nil {
		eamuo.SetWorkingOfficeCircleName(*s)
	}
	return eamuo
}

// ClearWorkingOfficeCircleName clears the value of the "WorkingOfficeCircleName" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) ClearWorkingOfficeCircleName() *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.ClearWorkingOfficeCircleName()
	return eamuo
}

// SetWorkingOfficeRegionFacilityID sets the "WorkingOfficeRegionFacilityID" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetWorkingOfficeRegionFacilityID(s string) *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.SetWorkingOfficeRegionFacilityID(s)
	return eamuo
}

// SetNillableWorkingOfficeRegionFacilityID sets the "WorkingOfficeRegionFacilityID" field if the given value is not nil.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetNillableWorkingOfficeRegionFacilityID(s *string) *ExamApplicationMTSPMMGUpdateOne {
	if s != nil {
		eamuo.SetWorkingOfficeRegionFacilityID(*s)
	}
	return eamuo
}

// ClearWorkingOfficeRegionFacilityID clears the value of the "WorkingOfficeRegionFacilityID" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) ClearWorkingOfficeRegionFacilityID() *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.ClearWorkingOfficeRegionFacilityID()
	return eamuo
}

// SetWorkingOfficeRegionName sets the "WorkingOfficeRegionName" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetWorkingOfficeRegionName(s string) *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.SetWorkingOfficeRegionName(s)
	return eamuo
}

// SetNillableWorkingOfficeRegionName sets the "WorkingOfficeRegionName" field if the given value is not nil.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetNillableWorkingOfficeRegionName(s *string) *ExamApplicationMTSPMMGUpdateOne {
	if s != nil {
		eamuo.SetWorkingOfficeRegionName(*s)
	}
	return eamuo
}

// ClearWorkingOfficeRegionName clears the value of the "WorkingOfficeRegionName" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) ClearWorkingOfficeRegionName() *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.ClearWorkingOfficeRegionName()
	return eamuo
}

// SetWorkingOfficeDivisionFacilityID sets the "WorkingOfficeDivisionFacilityID" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetWorkingOfficeDivisionFacilityID(s string) *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.SetWorkingOfficeDivisionFacilityID(s)
	return eamuo
}

// SetNillableWorkingOfficeDivisionFacilityID sets the "WorkingOfficeDivisionFacilityID" field if the given value is not nil.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetNillableWorkingOfficeDivisionFacilityID(s *string) *ExamApplicationMTSPMMGUpdateOne {
	if s != nil {
		eamuo.SetWorkingOfficeDivisionFacilityID(*s)
	}
	return eamuo
}

// ClearWorkingOfficeDivisionFacilityID clears the value of the "WorkingOfficeDivisionFacilityID" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) ClearWorkingOfficeDivisionFacilityID() *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.ClearWorkingOfficeDivisionFacilityID()
	return eamuo
}

// SetWorkingOfficeDivisionName sets the "WorkingOfficeDivisionName" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetWorkingOfficeDivisionName(s string) *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.SetWorkingOfficeDivisionName(s)
	return eamuo
}

// SetNillableWorkingOfficeDivisionName sets the "WorkingOfficeDivisionName" field if the given value is not nil.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetNillableWorkingOfficeDivisionName(s *string) *ExamApplicationMTSPMMGUpdateOne {
	if s != nil {
		eamuo.SetWorkingOfficeDivisionName(*s)
	}
	return eamuo
}

// ClearWorkingOfficeDivisionName clears the value of the "WorkingOfficeDivisionName" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) ClearWorkingOfficeDivisionName() *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.ClearWorkingOfficeDivisionName()
	return eamuo
}

// SetReportingOfficeFacilityID sets the "ReportingOfficeFacilityID" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetReportingOfficeFacilityID(s string) *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.SetReportingOfficeFacilityID(s)
	return eamuo
}

// SetNillableReportingOfficeFacilityID sets the "ReportingOfficeFacilityID" field if the given value is not nil.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetNillableReportingOfficeFacilityID(s *string) *ExamApplicationMTSPMMGUpdateOne {
	if s != nil {
		eamuo.SetReportingOfficeFacilityID(*s)
	}
	return eamuo
}

// ClearReportingOfficeFacilityID clears the value of the "ReportingOfficeFacilityID" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) ClearReportingOfficeFacilityID() *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.ClearReportingOfficeFacilityID()
	return eamuo
}

// SetReportingOfficeName sets the "ReportingOfficeName" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetReportingOfficeName(s string) *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.SetReportingOfficeName(s)
	return eamuo
}

// SetNillableReportingOfficeName sets the "ReportingOfficeName" field if the given value is not nil.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetNillableReportingOfficeName(s *string) *ExamApplicationMTSPMMGUpdateOne {
	if s != nil {
		eamuo.SetReportingOfficeName(*s)
	}
	return eamuo
}

// ClearReportingOfficeName clears the value of the "ReportingOfficeName" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) ClearReportingOfficeName() *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.ClearReportingOfficeName()
	return eamuo
}

// SetLienControllingOfficeID sets the "LienControllingOfficeID" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetLienControllingOfficeID(s string) *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.SetLienControllingOfficeID(s)
	return eamuo
}

// SetNillableLienControllingOfficeID sets the "LienControllingOfficeID" field if the given value is not nil.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetNillableLienControllingOfficeID(s *string) *ExamApplicationMTSPMMGUpdateOne {
	if s != nil {
		eamuo.SetLienControllingOfficeID(*s)
	}
	return eamuo
}

// ClearLienControllingOfficeID clears the value of the "LienControllingOfficeID" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) ClearLienControllingOfficeID() *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.ClearLienControllingOfficeID()
	return eamuo
}

// SetLienControllingOfficeName sets the "LienControllingOfficeName" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetLienControllingOfficeName(s string) *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.SetLienControllingOfficeName(s)
	return eamuo
}

// SetNillableLienControllingOfficeName sets the "LienControllingOfficeName" field if the given value is not nil.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetNillableLienControllingOfficeName(s *string) *ExamApplicationMTSPMMGUpdateOne {
	if s != nil {
		eamuo.SetLienControllingOfficeName(*s)
	}
	return eamuo
}

// ClearLienControllingOfficeName clears the value of the "LienControllingOfficeName" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) ClearLienControllingOfficeName() *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.ClearLienControllingOfficeName()
	return eamuo
}

// SetInDeputation sets the "InDeputation" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetInDeputation(s string) *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.SetInDeputation(s)
	return eamuo
}

// SetNillableInDeputation sets the "InDeputation" field if the given value is not nil.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetNillableInDeputation(s *string) *ExamApplicationMTSPMMGUpdateOne {
	if s != nil {
		eamuo.SetInDeputation(*s)
	}
	return eamuo
}

// ClearInDeputation clears the value of the "InDeputation" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) ClearInDeputation() *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.ClearInDeputation()
	return eamuo
}

// SetDeputationType sets the "DeputationType" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetDeputationType(s string) *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.SetDeputationType(s)
	return eamuo
}

// SetNillableDeputationType sets the "DeputationType" field if the given value is not nil.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetNillableDeputationType(s *string) *ExamApplicationMTSPMMGUpdateOne {
	if s != nil {
		eamuo.SetDeputationType(*s)
	}
	return eamuo
}

// ClearDeputationType clears the value of the "DeputationType" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) ClearDeputationType() *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.ClearDeputationType()
	return eamuo
}

// SetDeputationOfficeUniqueId sets the "DeputationOfficeUniqueId" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetDeputationOfficeUniqueId(s string) *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.SetDeputationOfficeUniqueId(s)
	return eamuo
}

// SetNillableDeputationOfficeUniqueId sets the "DeputationOfficeUniqueId" field if the given value is not nil.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetNillableDeputationOfficeUniqueId(s *string) *ExamApplicationMTSPMMGUpdateOne {
	if s != nil {
		eamuo.SetDeputationOfficeUniqueId(*s)
	}
	return eamuo
}

// ClearDeputationOfficeUniqueId clears the value of the "DeputationOfficeUniqueId" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) ClearDeputationOfficeUniqueId() *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.ClearDeputationOfficeUniqueId()
	return eamuo
}

// SetDeputationOfficeFacilityID sets the "DeputationOfficeFacilityID" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetDeputationOfficeFacilityID(s string) *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.SetDeputationOfficeFacilityID(s)
	return eamuo
}

// SetNillableDeputationOfficeFacilityID sets the "DeputationOfficeFacilityID" field if the given value is not nil.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetNillableDeputationOfficeFacilityID(s *string) *ExamApplicationMTSPMMGUpdateOne {
	if s != nil {
		eamuo.SetDeputationOfficeFacilityID(*s)
	}
	return eamuo
}

// ClearDeputationOfficeFacilityID clears the value of the "DeputationOfficeFacilityID" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) ClearDeputationOfficeFacilityID() *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.ClearDeputationOfficeFacilityID()
	return eamuo
}

// SetDeputationOfficeName sets the "DeputationOfficeName" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetDeputationOfficeName(s string) *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.SetDeputationOfficeName(s)
	return eamuo
}

// SetNillableDeputationOfficeName sets the "DeputationOfficeName" field if the given value is not nil.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetNillableDeputationOfficeName(s *string) *ExamApplicationMTSPMMGUpdateOne {
	if s != nil {
		eamuo.SetDeputationOfficeName(*s)
	}
	return eamuo
}

// ClearDeputationOfficeName clears the value of the "DeputationOfficeName" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) ClearDeputationOfficeName() *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.ClearDeputationOfficeName()
	return eamuo
}

// SetDeputationControllingOfficeID sets the "DeputationControllingOfficeID" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetDeputationControllingOfficeID(s string) *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.SetDeputationControllingOfficeID(s)
	return eamuo
}

// SetNillableDeputationControllingOfficeID sets the "DeputationControllingOfficeID" field if the given value is not nil.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetNillableDeputationControllingOfficeID(s *string) *ExamApplicationMTSPMMGUpdateOne {
	if s != nil {
		eamuo.SetDeputationControllingOfficeID(*s)
	}
	return eamuo
}

// ClearDeputationControllingOfficeID clears the value of the "DeputationControllingOfficeID" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) ClearDeputationControllingOfficeID() *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.ClearDeputationControllingOfficeID()
	return eamuo
}

// SetDeputationControllingOfficeName sets the "DeputationControllingOfficeName" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetDeputationControllingOfficeName(s string) *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.SetDeputationControllingOfficeName(s)
	return eamuo
}

// SetNillableDeputationControllingOfficeName sets the "DeputationControllingOfficeName" field if the given value is not nil.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetNillableDeputationControllingOfficeName(s *string) *ExamApplicationMTSPMMGUpdateOne {
	if s != nil {
		eamuo.SetDeputationControllingOfficeName(*s)
	}
	return eamuo
}

// ClearDeputationControllingOfficeName clears the value of the "DeputationControllingOfficeName" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) ClearDeputationControllingOfficeName() *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.ClearDeputationControllingOfficeName()
	return eamuo
}

// SetControllingOfficeFacilityID sets the "ControllingOfficeFacilityID" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetControllingOfficeFacilityID(s string) *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.SetControllingOfficeFacilityID(s)
	return eamuo
}

// SetNillableControllingOfficeFacilityID sets the "ControllingOfficeFacilityID" field if the given value is not nil.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetNillableControllingOfficeFacilityID(s *string) *ExamApplicationMTSPMMGUpdateOne {
	if s != nil {
		eamuo.SetControllingOfficeFacilityID(*s)
	}
	return eamuo
}

// ClearControllingOfficeFacilityID clears the value of the "ControllingOfficeFacilityID" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) ClearControllingOfficeFacilityID() *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.ClearControllingOfficeFacilityID()
	return eamuo
}

// SetControllingOfficeName sets the "ControllingOfficeName" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetControllingOfficeName(s string) *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.SetControllingOfficeName(s)
	return eamuo
}

// SetNillableControllingOfficeName sets the "ControllingOfficeName" field if the given value is not nil.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetNillableControllingOfficeName(s *string) *ExamApplicationMTSPMMGUpdateOne {
	if s != nil {
		eamuo.SetControllingOfficeName(*s)
	}
	return eamuo
}

// ClearControllingOfficeName clears the value of the "ControllingOfficeName" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) ClearControllingOfficeName() *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.ClearControllingOfficeName()
	return eamuo
}

// SetNodalOfficeFacilityID sets the "NodalOfficeFacilityID" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetNodalOfficeFacilityID(s string) *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.SetNodalOfficeFacilityID(s)
	return eamuo
}

// SetNillableNodalOfficeFacilityID sets the "NodalOfficeFacilityID" field if the given value is not nil.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetNillableNodalOfficeFacilityID(s *string) *ExamApplicationMTSPMMGUpdateOne {
	if s != nil {
		eamuo.SetNodalOfficeFacilityID(*s)
	}
	return eamuo
}

// ClearNodalOfficeFacilityID clears the value of the "NodalOfficeFacilityID" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) ClearNodalOfficeFacilityID() *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.ClearNodalOfficeFacilityID()
	return eamuo
}

// SetNodalOfficeName sets the "NodalOfficeName" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetNodalOfficeName(s string) *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.SetNodalOfficeName(s)
	return eamuo
}

// SetNillableNodalOfficeName sets the "NodalOfficeName" field if the given value is not nil.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetNillableNodalOfficeName(s *string) *ExamApplicationMTSPMMGUpdateOne {
	if s != nil {
		eamuo.SetNodalOfficeName(*s)
	}
	return eamuo
}

// ClearNodalOfficeName clears the value of the "NodalOfficeName" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) ClearNodalOfficeName() *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.ClearNodalOfficeName()
	return eamuo
}

// SetExamCityCenterCode sets the "ExamCityCenterCode" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetExamCityCenterCode(i int32) *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.SetExamCityCenterCode(i)
	return eamuo
}

// SetNillableExamCityCenterCode sets the "ExamCityCenterCode" field if the given value is not nil.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetNillableExamCityCenterCode(i *int32) *ExamApplicationMTSPMMGUpdateOne {
	if i != nil {
		eamuo.SetExamCityCenterCode(*i)
	}
	return eamuo
}

// ClearExamCityCenterCode clears the value of the "ExamCityCenterCode" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) ClearExamCityCenterCode() *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.ClearExamCityCenterCode()
	return eamuo
}

// SetCenterFacilityId sets the "CenterFacilityId" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetCenterFacilityId(s string) *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.SetCenterFacilityId(s)
	return eamuo
}

// SetNillableCenterFacilityId sets the "CenterFacilityId" field if the given value is not nil.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetNillableCenterFacilityId(s *string) *ExamApplicationMTSPMMGUpdateOne {
	if s != nil {
		eamuo.SetCenterFacilityId(*s)
	}
	return eamuo
}

// ClearCenterFacilityId clears the value of the "CenterFacilityId" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) ClearCenterFacilityId() *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.ClearCenterFacilityId()
	return eamuo
}

// SetCentrePreference sets the "CentrePreference" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetCentrePreference(s string) *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.SetCentrePreference(s)
	return eamuo
}

// SetNillableCentrePreference sets the "CentrePreference" field if the given value is not nil.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetNillableCentrePreference(s *string) *ExamApplicationMTSPMMGUpdateOne {
	if s != nil {
		eamuo.SetCentrePreference(*s)
	}
	return eamuo
}

// ClearCentrePreference clears the value of the "CentrePreference" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) ClearCentrePreference() *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.ClearCentrePreference()
	return eamuo
}

// SetSignature sets the "Signature" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetSignature(s string) *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.SetSignature(s)
	return eamuo
}

// SetNillableSignature sets the "Signature" field if the given value is not nil.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetNillableSignature(s *string) *ExamApplicationMTSPMMGUpdateOne {
	if s != nil {
		eamuo.SetSignature(*s)
	}
	return eamuo
}

// ClearSignature clears the value of the "Signature" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) ClearSignature() *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.ClearSignature()
	return eamuo
}

// SetPhoto sets the "Photo" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetPhoto(s string) *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.SetPhoto(s)
	return eamuo
}

// SetNillablePhoto sets the "Photo" field if the given value is not nil.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetNillablePhoto(s *string) *ExamApplicationMTSPMMGUpdateOne {
	if s != nil {
		eamuo.SetPhoto(*s)
	}
	return eamuo
}

// ClearPhoto clears the value of the "Photo" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) ClearPhoto() *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.ClearPhoto()
	return eamuo
}

// SetSignaturePath sets the "SignaturePath" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetSignaturePath(s string) *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.SetSignaturePath(s)
	return eamuo
}

// SetNillableSignaturePath sets the "SignaturePath" field if the given value is not nil.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetNillableSignaturePath(s *string) *ExamApplicationMTSPMMGUpdateOne {
	if s != nil {
		eamuo.SetSignaturePath(*s)
	}
	return eamuo
}

// ClearSignaturePath clears the value of the "SignaturePath" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) ClearSignaturePath() *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.ClearSignaturePath()
	return eamuo
}

// SetPhotoPath sets the "PhotoPath" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetPhotoPath(s string) *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.SetPhotoPath(s)
	return eamuo
}

// SetNillablePhotoPath sets the "PhotoPath" field if the given value is not nil.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetNillablePhotoPath(s *string) *ExamApplicationMTSPMMGUpdateOne {
	if s != nil {
		eamuo.SetPhotoPath(*s)
	}
	return eamuo
}

// ClearPhotoPath clears the value of the "PhotoPath" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) ClearPhotoPath() *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.ClearPhotoPath()
	return eamuo
}

// SetCandidatePhoto sets the "CandidatePhoto" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetCandidatePhoto(b []byte) *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.SetCandidatePhoto(b)
	return eamuo
}

// ClearCandidatePhoto clears the value of the "CandidatePhoto" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) ClearCandidatePhoto() *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.ClearCandidatePhoto()
	return eamuo
}

// SetCandidateSignature sets the "CandidateSignature" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetCandidateSignature(b []byte) *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.SetCandidateSignature(b)
	return eamuo
}

// ClearCandidateSignature clears the value of the "CandidateSignature" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) ClearCandidateSignature() *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.ClearCandidateSignature()
	return eamuo
}

// SetTempHallTicket sets the "TempHallTicket" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetTempHallTicket(s string) *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.SetTempHallTicket(s)
	return eamuo
}

// SetNillableTempHallTicket sets the "TempHallTicket" field if the given value is not nil.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetNillableTempHallTicket(s *string) *ExamApplicationMTSPMMGUpdateOne {
	if s != nil {
		eamuo.SetTempHallTicket(*s)
	}
	return eamuo
}

// ClearTempHallTicket clears the value of the "TempHallTicket" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) ClearTempHallTicket() *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.ClearTempHallTicket()
	return eamuo
}

// SetCandidateRemarks sets the "CandidateRemarks" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetCandidateRemarks(s string) *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.SetCandidateRemarks(s)
	return eamuo
}

// SetNillableCandidateRemarks sets the "CandidateRemarks" field if the given value is not nil.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetNillableCandidateRemarks(s *string) *ExamApplicationMTSPMMGUpdateOne {
	if s != nil {
		eamuo.SetCandidateRemarks(*s)
	}
	return eamuo
}

// ClearCandidateRemarks clears the value of the "CandidateRemarks" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) ClearCandidateRemarks() *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.ClearCandidateRemarks()
	return eamuo
}

// SetVAGeneralRemarks sets the "VAGeneralRemarks" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetVAGeneralRemarks(s string) *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.SetVAGeneralRemarks(s)
	return eamuo
}

// SetNillableVAGeneralRemarks sets the "VAGeneralRemarks" field if the given value is not nil.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetNillableVAGeneralRemarks(s *string) *ExamApplicationMTSPMMGUpdateOne {
	if s != nil {
		eamuo.SetVAGeneralRemarks(*s)
	}
	return eamuo
}

// ClearVAGeneralRemarks clears the value of the "VAGeneralRemarks" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) ClearVAGeneralRemarks() *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.ClearVAGeneralRemarks()
	return eamuo
}

// SetCAGeneralRemarks sets the "CAGeneralRemarks" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetCAGeneralRemarks(s string) *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.SetCAGeneralRemarks(s)
	return eamuo
}

// SetNillableCAGeneralRemarks sets the "CAGeneralRemarks" field if the given value is not nil.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetNillableCAGeneralRemarks(s *string) *ExamApplicationMTSPMMGUpdateOne {
	if s != nil {
		eamuo.SetCAGeneralRemarks(*s)
	}
	return eamuo
}

// ClearCAGeneralRemarks clears the value of the "CAGeneralRemarks" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) ClearCAGeneralRemarks() *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.ClearCAGeneralRemarks()
	return eamuo
}

// SetNAGeneralRemarks sets the "NAGeneralRemarks" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetNAGeneralRemarks(s string) *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.SetNAGeneralRemarks(s)
	return eamuo
}

// SetNillableNAGeneralRemarks sets the "NAGeneralRemarks" field if the given value is not nil.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetNillableNAGeneralRemarks(s *string) *ExamApplicationMTSPMMGUpdateOne {
	if s != nil {
		eamuo.SetNAGeneralRemarks(*s)
	}
	return eamuo
}

// ClearNAGeneralRemarks clears the value of the "NAGeneralRemarks" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) ClearNAGeneralRemarks() *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.ClearNAGeneralRemarks()
	return eamuo
}

// SetApplicationStatus sets the "ApplicationStatus" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetApplicationStatus(s string) *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.SetApplicationStatus(s)
	return eamuo
}

// SetNillableApplicationStatus sets the "ApplicationStatus" field if the given value is not nil.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetNillableApplicationStatus(s *string) *ExamApplicationMTSPMMGUpdateOne {
	if s != nil {
		eamuo.SetApplicationStatus(*s)
	}
	return eamuo
}

// ClearApplicationStatus clears the value of the "ApplicationStatus" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) ClearApplicationStatus() *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.ClearApplicationStatus()
	return eamuo
}

// SetStatus sets the "Status" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetStatus(s string) *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.SetStatus(s)
	return eamuo
}

// SetNillableStatus sets the "Status" field if the given value is not nil.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetNillableStatus(s *string) *ExamApplicationMTSPMMGUpdateOne {
	if s != nil {
		eamuo.SetStatus(*s)
	}
	return eamuo
}

// ClearStatus clears the value of the "Status" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) ClearStatus() *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.ClearStatus()
	return eamuo
}

// SetVAUserId sets the "VA_UserId" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetVAUserId(i int32) *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.ResetVAUserId()
	eamuo.mutation.SetVAUserId(i)
	return eamuo
}

// SetNillableVAUserId sets the "VA_UserId" field if the given value is not nil.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetNillableVAUserId(i *int32) *ExamApplicationMTSPMMGUpdateOne {
	if i != nil {
		eamuo.SetVAUserId(*i)
	}
	return eamuo
}

// AddVAUserId adds i to the "VA_UserId" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) AddVAUserId(i int32) *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.AddVAUserId(i)
	return eamuo
}

// ClearVAUserId clears the value of the "VA_UserId" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) ClearVAUserId() *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.ClearVAUserId()
	return eamuo
}

// SetVAUserName sets the "VA_UserName" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetVAUserName(s string) *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.SetVAUserName(s)
	return eamuo
}

// SetNillableVAUserName sets the "VA_UserName" field if the given value is not nil.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetNillableVAUserName(s *string) *ExamApplicationMTSPMMGUpdateOne {
	if s != nil {
		eamuo.SetVAUserName(*s)
	}
	return eamuo
}

// ClearVAUserName clears the value of the "VA_UserName" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) ClearVAUserName() *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.ClearVAUserName()
	return eamuo
}

// SetVAEmployeeID sets the "VA_EmployeeID" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetVAEmployeeID(s string) *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.SetVAEmployeeID(s)
	return eamuo
}

// SetNillableVAEmployeeID sets the "VA_EmployeeID" field if the given value is not nil.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetNillableVAEmployeeID(s *string) *ExamApplicationMTSPMMGUpdateOne {
	if s != nil {
		eamuo.SetVAEmployeeID(*s)
	}
	return eamuo
}

// ClearVAEmployeeID clears the value of the "VA_EmployeeID" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) ClearVAEmployeeID() *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.ClearVAEmployeeID()
	return eamuo
}

// SetVAEmployeeDesignation sets the "VA_EmployeeDesignation" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetVAEmployeeDesignation(s string) *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.SetVAEmployeeDesignation(s)
	return eamuo
}

// SetNillableVAEmployeeDesignation sets the "VA_EmployeeDesignation" field if the given value is not nil.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetNillableVAEmployeeDesignation(s *string) *ExamApplicationMTSPMMGUpdateOne {
	if s != nil {
		eamuo.SetVAEmployeeDesignation(*s)
	}
	return eamuo
}

// ClearVAEmployeeDesignation clears the value of the "VA_EmployeeDesignation" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) ClearVAEmployeeDesignation() *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.ClearVAEmployeeDesignation()
	return eamuo
}

// SetVARemarks sets the "VA_Remarks" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetVARemarks(s string) *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.SetVARemarks(s)
	return eamuo
}

// SetNillableVARemarks sets the "VA_Remarks" field if the given value is not nil.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetNillableVARemarks(s *string) *ExamApplicationMTSPMMGUpdateOne {
	if s != nil {
		eamuo.SetVARemarks(*s)
	}
	return eamuo
}

// ClearVARemarks clears the value of the "VA_Remarks" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) ClearVARemarks() *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.ClearVARemarks()
	return eamuo
}

// SetVADate sets the "VA_Date" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetVADate(t time.Time) *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.SetVADate(t)
	return eamuo
}

// SetNillableVADate sets the "VA_Date" field if the given value is not nil.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetNillableVADate(t *time.Time) *ExamApplicationMTSPMMGUpdateOne {
	if t != nil {
		eamuo.SetVADate(*t)
	}
	return eamuo
}

// ClearVADate clears the value of the "VA_Date" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) ClearVADate() *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.ClearVADate()
	return eamuo
}

// SetCAUserId sets the "CA_UserId" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetCAUserId(i int32) *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.ResetCAUserId()
	eamuo.mutation.SetCAUserId(i)
	return eamuo
}

// SetNillableCAUserId sets the "CA_UserId" field if the given value is not nil.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetNillableCAUserId(i *int32) *ExamApplicationMTSPMMGUpdateOne {
	if i != nil {
		eamuo.SetCAUserId(*i)
	}
	return eamuo
}

// AddCAUserId adds i to the "CA_UserId" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) AddCAUserId(i int32) *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.AddCAUserId(i)
	return eamuo
}

// ClearCAUserId clears the value of the "CA_UserId" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) ClearCAUserId() *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.ClearCAUserId()
	return eamuo
}

// SetCAUserName sets the "CA_UserName" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetCAUserName(s string) *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.SetCAUserName(s)
	return eamuo
}

// SetNillableCAUserName sets the "CA_UserName" field if the given value is not nil.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetNillableCAUserName(s *string) *ExamApplicationMTSPMMGUpdateOne {
	if s != nil {
		eamuo.SetCAUserName(*s)
	}
	return eamuo
}

// ClearCAUserName clears the value of the "CA_UserName" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) ClearCAUserName() *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.ClearCAUserName()
	return eamuo
}

// SetCAEmployeeID sets the "CA_EmployeeID" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetCAEmployeeID(s string) *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.SetCAEmployeeID(s)
	return eamuo
}

// SetNillableCAEmployeeID sets the "CA_EmployeeID" field if the given value is not nil.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetNillableCAEmployeeID(s *string) *ExamApplicationMTSPMMGUpdateOne {
	if s != nil {
		eamuo.SetCAEmployeeID(*s)
	}
	return eamuo
}

// ClearCAEmployeeID clears the value of the "CA_EmployeeID" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) ClearCAEmployeeID() *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.ClearCAEmployeeID()
	return eamuo
}

// SetCAEmployeeDesignation sets the "CA_EmployeeDesignation" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetCAEmployeeDesignation(s string) *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.SetCAEmployeeDesignation(s)
	return eamuo
}

// SetNillableCAEmployeeDesignation sets the "CA_EmployeeDesignation" field if the given value is not nil.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetNillableCAEmployeeDesignation(s *string) *ExamApplicationMTSPMMGUpdateOne {
	if s != nil {
		eamuo.SetCAEmployeeDesignation(*s)
	}
	return eamuo
}

// ClearCAEmployeeDesignation clears the value of the "CA_EmployeeDesignation" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) ClearCAEmployeeDesignation() *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.ClearCAEmployeeDesignation()
	return eamuo
}

// SetCARemarks sets the "CA_Remarks" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetCARemarks(s string) *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.SetCARemarks(s)
	return eamuo
}

// SetNillableCARemarks sets the "CA_Remarks" field if the given value is not nil.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetNillableCARemarks(s *string) *ExamApplicationMTSPMMGUpdateOne {
	if s != nil {
		eamuo.SetCARemarks(*s)
	}
	return eamuo
}

// ClearCARemarks clears the value of the "CA_Remarks" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) ClearCARemarks() *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.ClearCARemarks()
	return eamuo
}

// SetCADate sets the "CA_Date" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetCADate(t time.Time) *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.SetCADate(t)
	return eamuo
}

// SetNillableCADate sets the "CA_Date" field if the given value is not nil.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetNillableCADate(t *time.Time) *ExamApplicationMTSPMMGUpdateOne {
	if t != nil {
		eamuo.SetCADate(*t)
	}
	return eamuo
}

// ClearCADate clears the value of the "CA_Date" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) ClearCADate() *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.ClearCADate()
	return eamuo
}

// SetNAUserId sets the "NA_UserId" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetNAUserId(i int32) *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.ResetNAUserId()
	eamuo.mutation.SetNAUserId(i)
	return eamuo
}

// SetNillableNAUserId sets the "NA_UserId" field if the given value is not nil.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetNillableNAUserId(i *int32) *ExamApplicationMTSPMMGUpdateOne {
	if i != nil {
		eamuo.SetNAUserId(*i)
	}
	return eamuo
}

// AddNAUserId adds i to the "NA_UserId" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) AddNAUserId(i int32) *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.AddNAUserId(i)
	return eamuo
}

// ClearNAUserId clears the value of the "NA_UserId" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) ClearNAUserId() *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.ClearNAUserId()
	return eamuo
}

// SetNAUserName sets the "NA_UserName" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetNAUserName(s string) *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.SetNAUserName(s)
	return eamuo
}

// SetNillableNAUserName sets the "NA_UserName" field if the given value is not nil.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetNillableNAUserName(s *string) *ExamApplicationMTSPMMGUpdateOne {
	if s != nil {
		eamuo.SetNAUserName(*s)
	}
	return eamuo
}

// ClearNAUserName clears the value of the "NA_UserName" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) ClearNAUserName() *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.ClearNAUserName()
	return eamuo
}

// SetNAEmployeeID sets the "NA_EmployeeID" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetNAEmployeeID(s string) *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.SetNAEmployeeID(s)
	return eamuo
}

// SetNillableNAEmployeeID sets the "NA_EmployeeID" field if the given value is not nil.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetNillableNAEmployeeID(s *string) *ExamApplicationMTSPMMGUpdateOne {
	if s != nil {
		eamuo.SetNAEmployeeID(*s)
	}
	return eamuo
}

// ClearNAEmployeeID clears the value of the "NA_EmployeeID" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) ClearNAEmployeeID() *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.ClearNAEmployeeID()
	return eamuo
}

// SetNAEmployeeDesignation sets the "NA_EmployeeDesignation" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetNAEmployeeDesignation(s string) *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.SetNAEmployeeDesignation(s)
	return eamuo
}

// SetNillableNAEmployeeDesignation sets the "NA_EmployeeDesignation" field if the given value is not nil.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetNillableNAEmployeeDesignation(s *string) *ExamApplicationMTSPMMGUpdateOne {
	if s != nil {
		eamuo.SetNAEmployeeDesignation(*s)
	}
	return eamuo
}

// ClearNAEmployeeDesignation clears the value of the "NA_EmployeeDesignation" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) ClearNAEmployeeDesignation() *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.ClearNAEmployeeDesignation()
	return eamuo
}

// SetNARemarks sets the "NA_Remarks" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetNARemarks(s string) *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.SetNARemarks(s)
	return eamuo
}

// SetNillableNARemarks sets the "NA_Remarks" field if the given value is not nil.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetNillableNARemarks(s *string) *ExamApplicationMTSPMMGUpdateOne {
	if s != nil {
		eamuo.SetNARemarks(*s)
	}
	return eamuo
}

// ClearNARemarks clears the value of the "NA_Remarks" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) ClearNARemarks() *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.ClearNARemarks()
	return eamuo
}

// SetNADate sets the "NA_Date" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetNADate(t time.Time) *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.SetNADate(t)
	return eamuo
}

// SetNillableNADate sets the "NA_Date" field if the given value is not nil.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetNillableNADate(t *time.Time) *ExamApplicationMTSPMMGUpdateOne {
	if t != nil {
		eamuo.SetNADate(*t)
	}
	return eamuo
}

// ClearNADate clears the value of the "NA_Date" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) ClearNADate() *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.ClearNADate()
	return eamuo
}

// SetAppliactionRemarks sets the "AppliactionRemarks" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetAppliactionRemarks(s string) *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.SetAppliactionRemarks(s)
	return eamuo
}

// SetNillableAppliactionRemarks sets the "AppliactionRemarks" field if the given value is not nil.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetNillableAppliactionRemarks(s *string) *ExamApplicationMTSPMMGUpdateOne {
	if s != nil {
		eamuo.SetAppliactionRemarks(*s)
	}
	return eamuo
}

// ClearAppliactionRemarks clears the value of the "AppliactionRemarks" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) ClearAppliactionRemarks() *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.ClearAppliactionRemarks()
	return eamuo
}

// SetCadrePreferences sets the "CadrePreferences" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetCadrePreferences(i []interface{}) *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.SetCadrePreferences(i)
	return eamuo
}

// AppendCadrePreferences appends i to the "CadrePreferences" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) AppendCadrePreferences(i []interface{}) *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.AppendCadrePreferences(i)
	return eamuo
}

// ClearCadrePreferences clears the value of the "CadrePreferences" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) ClearCadrePreferences() *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.ClearCadrePreferences()
	return eamuo
}

// SetCAPreviousRemarks sets the "CAPreviousRemarks" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetCAPreviousRemarks(s string) *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.SetCAPreviousRemarks(s)
	return eamuo
}

// SetNillableCAPreviousRemarks sets the "CAPreviousRemarks" field if the given value is not nil.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetNillableCAPreviousRemarks(s *string) *ExamApplicationMTSPMMGUpdateOne {
	if s != nil {
		eamuo.SetCAPreviousRemarks(*s)
	}
	return eamuo
}

// ClearCAPreviousRemarks clears the value of the "CAPreviousRemarks" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) ClearCAPreviousRemarks() *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.ClearCAPreviousRemarks()
	return eamuo
}

// SetPunishmentStatus sets the "PunishmentStatus" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetPunishmentStatus(b bool) *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.SetPunishmentStatus(b)
	return eamuo
}

// SetNillablePunishmentStatus sets the "PunishmentStatus" field if the given value is not nil.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetNillablePunishmentStatus(b *bool) *ExamApplicationMTSPMMGUpdateOne {
	if b != nil {
		eamuo.SetPunishmentStatus(*b)
	}
	return eamuo
}

// ClearPunishmentStatus clears the value of the "PunishmentStatus" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) ClearPunishmentStatus() *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.ClearPunishmentStatus()
	return eamuo
}

// SetDisciplinaryCaseStatus sets the "DisciplinaryCaseStatus" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetDisciplinaryCaseStatus(b bool) *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.SetDisciplinaryCaseStatus(b)
	return eamuo
}

// SetNillableDisciplinaryCaseStatus sets the "DisciplinaryCaseStatus" field if the given value is not nil.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetNillableDisciplinaryCaseStatus(b *bool) *ExamApplicationMTSPMMGUpdateOne {
	if b != nil {
		eamuo.SetDisciplinaryCaseStatus(*b)
	}
	return eamuo
}

// ClearDisciplinaryCaseStatus clears the value of the "DisciplinaryCaseStatus" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) ClearDisciplinaryCaseStatus() *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.ClearDisciplinaryCaseStatus()
	return eamuo
}

// SetGenerateHallTicketFlag sets the "GenerateHallTicketFlag" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetGenerateHallTicketFlag(b bool) *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.SetGenerateHallTicketFlag(b)
	return eamuo
}

// SetNillableGenerateHallTicketFlag sets the "GenerateHallTicketFlag" field if the given value is not nil.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetNillableGenerateHallTicketFlag(b *bool) *ExamApplicationMTSPMMGUpdateOne {
	if b != nil {
		eamuo.SetGenerateHallTicketFlag(*b)
	}
	return eamuo
}

// ClearGenerateHallTicketFlag clears the value of the "GenerateHallTicketFlag" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) ClearGenerateHallTicketFlag() *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.ClearGenerateHallTicketFlag()
	return eamuo
}

// SetHallTicketNumber sets the "HallTicketNumber" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetHallTicketNumber(s string) *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.SetHallTicketNumber(s)
	return eamuo
}

// SetNillableHallTicketNumber sets the "HallTicketNumber" field if the given value is not nil.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetNillableHallTicketNumber(s *string) *ExamApplicationMTSPMMGUpdateOne {
	if s != nil {
		eamuo.SetHallTicketNumber(*s)
	}
	return eamuo
}

// ClearHallTicketNumber clears the value of the "HallTicketNumber" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) ClearHallTicketNumber() *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.ClearHallTicketNumber()
	return eamuo
}

// SetHallTicketGeneratedFlag sets the "HallTicketGeneratedFlag" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetHallTicketGeneratedFlag(b bool) *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.SetHallTicketGeneratedFlag(b)
	return eamuo
}

// SetNillableHallTicketGeneratedFlag sets the "HallTicketGeneratedFlag" field if the given value is not nil.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetNillableHallTicketGeneratedFlag(b *bool) *ExamApplicationMTSPMMGUpdateOne {
	if b != nil {
		eamuo.SetHallTicketGeneratedFlag(*b)
	}
	return eamuo
}

// ClearHallTicketGeneratedFlag clears the value of the "HallTicketGeneratedFlag" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) ClearHallTicketGeneratedFlag() *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.ClearHallTicketGeneratedFlag()
	return eamuo
}

// SetGenerateHallTicketFlagByNO sets the "GenerateHallTicketFlagByNO" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetGenerateHallTicketFlagByNO(b bool) *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.SetGenerateHallTicketFlagByNO(b)
	return eamuo
}

// SetNillableGenerateHallTicketFlagByNO sets the "GenerateHallTicketFlagByNO" field if the given value is not nil.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetNillableGenerateHallTicketFlagByNO(b *bool) *ExamApplicationMTSPMMGUpdateOne {
	if b != nil {
		eamuo.SetGenerateHallTicketFlagByNO(*b)
	}
	return eamuo
}

// ClearGenerateHallTicketFlagByNO clears the value of the "GenerateHallTicketFlagByNO" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) ClearGenerateHallTicketFlagByNO() *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.ClearGenerateHallTicketFlagByNO()
	return eamuo
}

// SetHallTicketGeneratedDate sets the "HallTicketGeneratedDate" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetHallTicketGeneratedDate(t time.Time) *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.SetHallTicketGeneratedDate(t)
	return eamuo
}

// SetNillableHallTicketGeneratedDate sets the "HallTicketGeneratedDate" field if the given value is not nil.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetNillableHallTicketGeneratedDate(t *time.Time) *ExamApplicationMTSPMMGUpdateOne {
	if t != nil {
		eamuo.SetHallTicketGeneratedDate(*t)
	}
	return eamuo
}

// ClearHallTicketGeneratedDate clears the value of the "HallTicketGeneratedDate" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) ClearHallTicketGeneratedDate() *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.ClearHallTicketGeneratedDate()
	return eamuo
}

// SetTemporaryHallTicket sets the "TemporaryHallTicket" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetTemporaryHallTicket(s string) *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.SetTemporaryHallTicket(s)
	return eamuo
}

// SetNillableTemporaryHallTicket sets the "TemporaryHallTicket" field if the given value is not nil.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetNillableTemporaryHallTicket(s *string) *ExamApplicationMTSPMMGUpdateOne {
	if s != nil {
		eamuo.SetTemporaryHallTicket(*s)
	}
	return eamuo
}

// ClearTemporaryHallTicket clears the value of the "TemporaryHallTicket" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) ClearTemporaryHallTicket() *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.ClearTemporaryHallTicket()
	return eamuo
}

// SetOptionUsed sets the "OptionUsed" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetOptionUsed(s string) *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.SetOptionUsed(s)
	return eamuo
}

// SetNillableOptionUsed sets the "OptionUsed" field if the given value is not nil.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetNillableOptionUsed(s *string) *ExamApplicationMTSPMMGUpdateOne {
	if s != nil {
		eamuo.SetOptionUsed(*s)
	}
	return eamuo
}

// ClearOptionUsed clears the value of the "OptionUsed" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) ClearOptionUsed() *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.ClearOptionUsed()
	return eamuo
}

// SetRemarks sets the "Remarks" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetRemarks(s string) *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.SetRemarks(s)
	return eamuo
}

// SetNillableRemarks sets the "Remarks" field if the given value is not nil.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetNillableRemarks(s *string) *ExamApplicationMTSPMMGUpdateOne {
	if s != nil {
		eamuo.SetRemarks(*s)
	}
	return eamuo
}

// ClearRemarks clears the value of the "Remarks" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) ClearRemarks() *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.ClearRemarks()
	return eamuo
}

// SetCadre sets the "Cadre" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetCadre(s string) *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.SetCadre(s)
	return eamuo
}

// SetNillableCadre sets the "Cadre" field if the given value is not nil.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetNillableCadre(s *string) *ExamApplicationMTSPMMGUpdateOne {
	if s != nil {
		eamuo.SetCadre(*s)
	}
	return eamuo
}

// ClearCadre clears the value of the "Cadre" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) ClearCadre() *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.ClearCadre()
	return eamuo
}

// SetEmployeePost sets the "EmployeePost" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetEmployeePost(s string) *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.SetEmployeePost(s)
	return eamuo
}

// SetNillableEmployeePost sets the "EmployeePost" field if the given value is not nil.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetNillableEmployeePost(s *string) *ExamApplicationMTSPMMGUpdateOne {
	if s != nil {
		eamuo.SetEmployeePost(*s)
	}
	return eamuo
}

// ClearEmployeePost clears the value of the "EmployeePost" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) ClearEmployeePost() *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.ClearEmployeePost()
	return eamuo
}

// SetDOJInEligiblePost sets the "DOJInEligiblePost" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetDOJInEligiblePost(s string) *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.SetDOJInEligiblePost(s)
	return eamuo
}

// SetNillableDOJInEligiblePost sets the "DOJInEligiblePost" field if the given value is not nil.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetNillableDOJInEligiblePost(s *string) *ExamApplicationMTSPMMGUpdateOne {
	if s != nil {
		eamuo.SetDOJInEligiblePost(*s)
	}
	return eamuo
}

// ClearDOJInEligiblePost clears the value of the "DOJInEligiblePost" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) ClearDOJInEligiblePost() *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.ClearDOJInEligiblePost()
	return eamuo
}

// SetDivisionPreferences sets the "DivisionPreferences" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetDivisionPreferences(i []interface{}) *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.SetDivisionPreferences(i)
	return eamuo
}

// AppendDivisionPreferences appends i to the "DivisionPreferences" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) AppendDivisionPreferences(i []interface{}) *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.AppendDivisionPreferences(i)
	return eamuo
}

// ClearDivisionPreferences clears the value of the "DivisionPreferences" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) ClearDivisionPreferences() *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.ClearDivisionPreferences()
	return eamuo
}

// SetGDSEngagement sets the "GDSEngagement" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetGDSEngagement(i []interface{}) *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.SetGDSEngagement(i)
	return eamuo
}

// AppendGDSEngagement appends i to the "GDSEngagement" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) AppendGDSEngagement(i []interface{}) *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.AppendGDSEngagement(i)
	return eamuo
}

// ClearGDSEngagement clears the value of the "GDSEngagement" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) ClearGDSEngagement() *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.ClearGDSEngagement()
	return eamuo
}

// SetRoleUserCode sets the "RoleUserCode" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetRoleUserCode(i int32) *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.SetRoleUserCode(i)
	return eamuo
}

// SetNillableRoleUserCode sets the "RoleUserCode" field if the given value is not nil.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetNillableRoleUserCode(i *int32) *ExamApplicationMTSPMMGUpdateOne {
	if i != nil {
		eamuo.SetRoleUserCode(*i)
	}
	return eamuo
}

// ClearRoleUserCode clears the value of the "RoleUserCode" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) ClearRoleUserCode() *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.ClearRoleUserCode()
	return eamuo
}

// SetCircleSID sets the "CircleSID" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetCircleSID(i int32) *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.SetCircleSID(i)
	return eamuo
}

// SetNillableCircleSID sets the "CircleSID" field if the given value is not nil.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetNillableCircleSID(i *int32) *ExamApplicationMTSPMMGUpdateOne {
	if i != nil {
		eamuo.SetCircleSID(*i)
	}
	return eamuo
}

// ClearCircleSID clears the value of the "CircleSID" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) ClearCircleSID() *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.ClearCircleSID()
	return eamuo
}

// SetFacilityName sets the "FacilityName" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetFacilityName(s string) *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.SetFacilityName(s)
	return eamuo
}

// SetNillableFacilityName sets the "FacilityName" field if the given value is not nil.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetNillableFacilityName(s *string) *ExamApplicationMTSPMMGUpdateOne {
	if s != nil {
		eamuo.SetFacilityName(*s)
	}
	return eamuo
}

// ClearFacilityName clears the value of the "FacilityName" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) ClearFacilityName() *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.ClearFacilityName()
	return eamuo
}

// SetServiceLength sets the "ServiceLength" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetServiceLength(i []interface{}) *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.SetServiceLength(i)
	return eamuo
}

// AppendServiceLength appends i to the "ServiceLength" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) AppendServiceLength(i []interface{}) *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.AppendServiceLength(i)
	return eamuo
}

// ClearServiceLength clears the value of the "ServiceLength" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) ClearServiceLength() *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.ClearServiceLength()
	return eamuo
}

// SetNonQualifyingService sets the "NonQualifyingService" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetNonQualifyingService(i []interface{}) *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.SetNonQualifyingService(i)
	return eamuo
}

// AppendNonQualifyingService appends i to the "NonQualifyingService" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) AppendNonQualifyingService(i []interface{}) *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.AppendNonQualifyingService(i)
	return eamuo
}

// ClearNonQualifyingService clears the value of the "NonQualifyingService" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) ClearNonQualifyingService() *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.ClearNonQualifyingService()
	return eamuo
}

// SetDCInPresentCadre sets the "DCInPresentCadre" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetDCInPresentCadre(s string) *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.SetDCInPresentCadre(s)
	return eamuo
}

// SetNillableDCInPresentCadre sets the "DCInPresentCadre" field if the given value is not nil.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetNillableDCInPresentCadre(s *string) *ExamApplicationMTSPMMGUpdateOne {
	if s != nil {
		eamuo.SetDCInPresentCadre(*s)
	}
	return eamuo
}

// ClearDCInPresentCadre clears the value of the "DCInPresentCadre" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) ClearDCInPresentCadre() *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.ClearDCInPresentCadre()
	return eamuo
}

// SetReportingOfficeID sets the "ReportingOfficeID" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetReportingOfficeID(s string) *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.SetReportingOfficeID(s)
	return eamuo
}

// SetNillableReportingOfficeID sets the "ReportingOfficeID" field if the given value is not nil.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetNillableReportingOfficeID(s *string) *ExamApplicationMTSPMMGUpdateOne {
	if s != nil {
		eamuo.SetReportingOfficeID(*s)
	}
	return eamuo
}

// ClearReportingOfficeID clears the value of the "ReportingOfficeID" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) ClearReportingOfficeID() *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.ClearReportingOfficeID()
	return eamuo
}

// SetPostPreferences sets the "PostPreferences" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetPostPreferences(i []interface{}) *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.SetPostPreferences(i)
	return eamuo
}

// AppendPostPreferences appends i to the "PostPreferences" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) AppendPostPreferences(i []interface{}) *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.AppendPostPreferences(i)
	return eamuo
}

// ClearPostPreferences clears the value of the "PostPreferences" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) ClearPostPreferences() *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.ClearPostPreferences()
	return eamuo
}

// SetUnitPreferences sets the "UnitPreferences" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetUnitPreferences(i []interface{}) *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.SetUnitPreferences(i)
	return eamuo
}

// AppendUnitPreferences appends i to the "UnitPreferences" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) AppendUnitPreferences(i []interface{}) *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.AppendUnitPreferences(i)
	return eamuo
}

// ClearUnitPreferences clears the value of the "UnitPreferences" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) ClearUnitPreferences() *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.ClearUnitPreferences()
	return eamuo
}

// SetCenterId sets the "CenterId" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetCenterId(i int32) *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.ResetCenterId()
	eamuo.mutation.SetCenterId(i)
	return eamuo
}

// SetNillableCenterId sets the "CenterId" field if the given value is not nil.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetNillableCenterId(i *int32) *ExamApplicationMTSPMMGUpdateOne {
	if i != nil {
		eamuo.SetCenterId(*i)
	}
	return eamuo
}

// AddCenterId adds i to the "CenterId" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) AddCenterId(i int32) *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.AddCenterId(i)
	return eamuo
}

// ClearCenterId clears the value of the "CenterId" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) ClearCenterId() *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.ClearCenterId()
	return eamuo
}

// SetCenterCode sets the "CenterCode" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetCenterCode(i int32) *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.SetCenterCode(i)
	return eamuo
}

// SetNillableCenterCode sets the "CenterCode" field if the given value is not nil.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetNillableCenterCode(i *int32) *ExamApplicationMTSPMMGUpdateOne {
	if i != nil {
		eamuo.SetCenterCode(*i)
	}
	return eamuo
}

// ClearCenterCode clears the value of the "CenterCode" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) ClearCenterCode() *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.ClearCenterCode()
	return eamuo
}

// SetClaimingQualifyingService sets the "ClaimingQualifyingService" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetClaimingQualifyingService(s string) *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.SetClaimingQualifyingService(s)
	return eamuo
}

// SetNillableClaimingQualifyingService sets the "ClaimingQualifyingService" field if the given value is not nil.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetNillableClaimingQualifyingService(s *string) *ExamApplicationMTSPMMGUpdateOne {
	if s != nil {
		eamuo.SetClaimingQualifyingService(*s)
	}
	return eamuo
}

// ClearClaimingQualifyingService clears the value of the "ClaimingQualifyingService" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) ClearClaimingQualifyingService() *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.ClearClaimingQualifyingService()
	return eamuo
}

// SetDeputationOfficePincode sets the "DeputationOfficePincode" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetDeputationOfficePincode(s string) *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.SetDeputationOfficePincode(s)
	return eamuo
}

// SetNillableDeputationOfficePincode sets the "DeputationOfficePincode" field if the given value is not nil.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetNillableDeputationOfficePincode(s *string) *ExamApplicationMTSPMMGUpdateOne {
	if s != nil {
		eamuo.SetDeputationOfficePincode(*s)
	}
	return eamuo
}

// ClearDeputationOfficePincode clears the value of the "DeputationOfficePincode" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) ClearDeputationOfficePincode() *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.ClearDeputationOfficePincode()
	return eamuo
}

// SetRecommendedStatus sets the "RecommendedStatus" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetRecommendedStatus(s string) *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.SetRecommendedStatus(s)
	return eamuo
}

// SetNillableRecommendedStatus sets the "RecommendedStatus" field if the given value is not nil.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetNillableRecommendedStatus(s *string) *ExamApplicationMTSPMMGUpdateOne {
	if s != nil {
		eamuo.SetRecommendedStatus(*s)
	}
	return eamuo
}

// ClearRecommendedStatus clears the value of the "RecommendedStatus" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) ClearRecommendedStatus() *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.ClearRecommendedStatus()
	return eamuo
}

// SetUpdatedAt sets the "UpdatedAt" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetUpdatedAt(t time.Time) *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.SetUpdatedAt(t)
	return eamuo
}

// SetNillableUpdatedAt sets the "UpdatedAt" field if the given value is not nil.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetNillableUpdatedAt(t *time.Time) *ExamApplicationMTSPMMGUpdateOne {
	if t != nil {
		eamuo.SetUpdatedAt(*t)
	}
	return eamuo
}

// ClearUpdatedAt clears the value of the "UpdatedAt" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) ClearUpdatedAt() *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.ClearUpdatedAt()
	return eamuo
}

// SetUpdatedBy sets the "UpdatedBy" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetUpdatedBy(s string) *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.SetUpdatedBy(s)
	return eamuo
}

// SetNillableUpdatedBy sets the "UpdatedBy" field if the given value is not nil.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetNillableUpdatedBy(s *string) *ExamApplicationMTSPMMGUpdateOne {
	if s != nil {
		eamuo.SetUpdatedBy(*s)
	}
	return eamuo
}

// ClearUpdatedBy clears the value of the "UpdatedBy" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) ClearUpdatedBy() *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.ClearUpdatedBy()
	return eamuo
}

// SetApplicationWdlDate sets the "ApplicationWdlDate" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetApplicationWdlDate(t time.Time) *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.SetApplicationWdlDate(t)
	return eamuo
}

// SetNillableApplicationWdlDate sets the "ApplicationWdlDate" field if the given value is not nil.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetNillableApplicationWdlDate(t *time.Time) *ExamApplicationMTSPMMGUpdateOne {
	if t != nil {
		eamuo.SetApplicationWdlDate(*t)
	}
	return eamuo
}

// ClearApplicationWdlDate clears the value of the "ApplicationWdlDate" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) ClearApplicationWdlDate() *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.ClearApplicationWdlDate()
	return eamuo
}

// SetExamCenterHall sets the "ExamCenterHall" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetExamCenterHall(i int32) *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.ResetExamCenterHall()
	eamuo.mutation.SetExamCenterHall(i)
	return eamuo
}

// SetNillableExamCenterHall sets the "ExamCenterHall" field if the given value is not nil.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetNillableExamCenterHall(i *int32) *ExamApplicationMTSPMMGUpdateOne {
	if i != nil {
		eamuo.SetExamCenterHall(*i)
	}
	return eamuo
}

// AddExamCenterHall adds i to the "ExamCenterHall" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) AddExamCenterHall(i int32) *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.AddExamCenterHall(i)
	return eamuo
}

// ClearExamCenterHall clears the value of the "ExamCenterHall" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) ClearExamCenterHall() *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.ClearExamCenterHall()
	return eamuo
}

// SetHallName sets the "HallName" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetHallName(s string) *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.SetHallName(s)
	return eamuo
}

// SetNillableHallName sets the "HallName" field if the given value is not nil.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetNillableHallName(s *string) *ExamApplicationMTSPMMGUpdateOne {
	if s != nil {
		eamuo.SetHallName(*s)
	}
	return eamuo
}

// ClearHallName clears the value of the "HallName" field.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) ClearHallName() *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.ClearHallName()
	return eamuo
}

// AddUsersMTSPMMGRefIDs adds the "UsersMTSPMMGRef" edge to the UserMaster entity by IDs.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) AddUsersMTSPMMGRefIDs(ids ...int64) *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.AddUsersMTSPMMGRefIDs(ids...)
	return eamuo
}

// AddUsersMTSPMMGRef adds the "UsersMTSPMMGRef" edges to the UserMaster entity.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) AddUsersMTSPMMGRef(u ...*UserMaster) *ExamApplicationMTSPMMGUpdateOne {
	ids := make([]int64, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return eamuo.AddUsersMTSPMMGRefIDs(ids...)
}

// SetRoleusersID sets the "roleusers" edge to the RoleMaster entity by ID.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetRoleusersID(id int32) *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.SetRoleusersID(id)
	return eamuo
}

// SetNillableRoleusersID sets the "roleusers" edge to the RoleMaster entity by ID if the given value is not nil.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetNillableRoleusersID(id *int32) *ExamApplicationMTSPMMGUpdateOne {
	if id != nil {
		eamuo = eamuo.SetRoleusersID(*id)
	}
	return eamuo
}

// SetRoleusers sets the "roleusers" edge to the RoleMaster entity.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetRoleusers(r *RoleMaster) *ExamApplicationMTSPMMGUpdateOne {
	return eamuo.SetRoleusersID(r.ID)
}

// AddCadrePrefRefIDs adds the "CadrePref_Ref" edge to the Cadre_Choice_MTSPMMG entity by IDs.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) AddCadrePrefRefIDs(ids ...int32) *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.AddCadrePrefRefIDs(ids...)
	return eamuo
}

// AddCadrePrefRef adds the "CadrePref_Ref" edges to the Cadre_Choice_MTSPMMG entity.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) AddCadrePrefRef(c ...*Cadre_Choice_MTSPMMG) *ExamApplicationMTSPMMGUpdateOne {
	ids := make([]int32, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return eamuo.AddCadrePrefRefIDs(ids...)
}

// AddCirclePrefRefMTSPMMGIDs adds the "CirclePrefRefMTSPMMG" edge to the Division_Choice_MTSPMMG entity by IDs.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) AddCirclePrefRefMTSPMMGIDs(ids ...int32) *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.AddCirclePrefRefMTSPMMGIDs(ids...)
	return eamuo
}

// AddCirclePrefRefMTSPMMG adds the "CirclePrefRefMTSPMMG" edges to the Division_Choice_MTSPMMG entity.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) AddCirclePrefRefMTSPMMG(d ...*Division_Choice_MTSPMMG) *ExamApplicationMTSPMMGUpdateOne {
	ids := make([]int32, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return eamuo.AddCirclePrefRefMTSPMMGIDs(ids...)
}

// AddMTSPMMGApplicationsRefIDs adds the "MTSPMMGApplicationsRef" edge to the RecommendationsMTSPMMGApplications entity by IDs.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) AddMTSPMMGApplicationsRefIDs(ids ...int64) *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.AddMTSPMMGApplicationsRefIDs(ids...)
	return eamuo
}

// AddMTSPMMGApplicationsRef adds the "MTSPMMGApplicationsRef" edges to the RecommendationsMTSPMMGApplications entity.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) AddMTSPMMGApplicationsRef(r ...*RecommendationsMTSPMMGApplications) *ExamApplicationMTSPMMGUpdateOne {
	ids := make([]int64, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return eamuo.AddMTSPMMGApplicationsRefIDs(ids...)
}

// SetMTSPMMGExamCentresID sets the "MTSPMMGExamCentres" edge to the Center entity by ID.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetMTSPMMGExamCentresID(id int32) *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.SetMTSPMMGExamCentresID(id)
	return eamuo
}

// SetNillableMTSPMMGExamCentresID sets the "MTSPMMGExamCentres" edge to the Center entity by ID if the given value is not nil.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetNillableMTSPMMGExamCentresID(id *int32) *ExamApplicationMTSPMMGUpdateOne {
	if id != nil {
		eamuo = eamuo.SetMTSPMMGExamCentresID(*id)
	}
	return eamuo
}

// SetMTSPMMGExamCentres sets the "MTSPMMGExamCentres" edge to the Center entity.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetMTSPMMGExamCentres(c *Center) *ExamApplicationMTSPMMGUpdateOne {
	return eamuo.SetMTSPMMGExamCentresID(c.ID)
}

// SetExamcitycenterID sets the "examcitycenter" edge to the ExamCityCenter entity by ID.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetExamcitycenterID(id int32) *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.SetExamcitycenterID(id)
	return eamuo
}

// SetNillableExamcitycenterID sets the "examcitycenter" edge to the ExamCityCenter entity by ID if the given value is not nil.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetNillableExamcitycenterID(id *int32) *ExamApplicationMTSPMMGUpdateOne {
	if id != nil {
		eamuo = eamuo.SetExamcitycenterID(*id)
	}
	return eamuo
}

// SetExamcitycenter sets the "examcitycenter" edge to the ExamCityCenter entity.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetExamcitycenter(e *ExamCityCenter) *ExamApplicationMTSPMMGUpdateOne {
	return eamuo.SetExamcitycenterID(e.ID)
}

// SetExamsID sets the "Exams" edge to the Exam entity by ID.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetExamsID(id int32) *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.SetExamsID(id)
	return eamuo
}

// SetNillableExamsID sets the "Exams" edge to the Exam entity by ID if the given value is not nil.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetNillableExamsID(id *int32) *ExamApplicationMTSPMMGUpdateOne {
	if id != nil {
		eamuo = eamuo.SetExamsID(*id)
	}
	return eamuo
}

// SetExams sets the "Exams" edge to the Exam entity.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetExams(e *Exam) *ExamApplicationMTSPMMGUpdateOne {
	return eamuo.SetExamsID(e.ID)
}

// SetCircleRefsMTSPMMGID sets the "CircleRefsMTSPMMG" edge to the CircleSummaryForNO entity by ID.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetCircleRefsMTSPMMGID(id int32) *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.SetCircleRefsMTSPMMGID(id)
	return eamuo
}

// SetNillableCircleRefsMTSPMMGID sets the "CircleRefsMTSPMMG" edge to the CircleSummaryForNO entity by ID if the given value is not nil.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetNillableCircleRefsMTSPMMGID(id *int32) *ExamApplicationMTSPMMGUpdateOne {
	if id != nil {
		eamuo = eamuo.SetCircleRefsMTSPMMGID(*id)
	}
	return eamuo
}

// SetCircleRefsMTSPMMG sets the "CircleRefsMTSPMMG" edge to the CircleSummaryForNO entity.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SetCircleRefsMTSPMMG(c *CircleSummaryForNO) *ExamApplicationMTSPMMGUpdateOne {
	return eamuo.SetCircleRefsMTSPMMGID(c.ID)
}

// AddLogDatumIDs adds the "LogData" edge to the Logs entity by IDs.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) AddLogDatumIDs(ids ...int64) *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.AddLogDatumIDs(ids...)
	return eamuo
}

// AddLogData adds the "LogData" edges to the Logs entity.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) AddLogData(l ...*Logs) *ExamApplicationMTSPMMGUpdateOne {
	ids := make([]int64, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return eamuo.AddLogDatumIDs(ids...)
}

// Mutation returns the ExamApplicationMTSPMMGMutation object of the builder.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) Mutation() *ExamApplicationMTSPMMGMutation {
	return eamuo.mutation
}

// ClearUsersMTSPMMGRef clears all "UsersMTSPMMGRef" edges to the UserMaster entity.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) ClearUsersMTSPMMGRef() *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.ClearUsersMTSPMMGRef()
	return eamuo
}

// RemoveUsersMTSPMMGRefIDs removes the "UsersMTSPMMGRef" edge to UserMaster entities by IDs.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) RemoveUsersMTSPMMGRefIDs(ids ...int64) *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.RemoveUsersMTSPMMGRefIDs(ids...)
	return eamuo
}

// RemoveUsersMTSPMMGRef removes "UsersMTSPMMGRef" edges to UserMaster entities.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) RemoveUsersMTSPMMGRef(u ...*UserMaster) *ExamApplicationMTSPMMGUpdateOne {
	ids := make([]int64, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return eamuo.RemoveUsersMTSPMMGRefIDs(ids...)
}

// ClearRoleusers clears the "roleusers" edge to the RoleMaster entity.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) ClearRoleusers() *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.ClearRoleusers()
	return eamuo
}

// ClearCadrePrefRef clears all "CadrePref_Ref" edges to the Cadre_Choice_MTSPMMG entity.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) ClearCadrePrefRef() *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.ClearCadrePrefRef()
	return eamuo
}

// RemoveCadrePrefRefIDs removes the "CadrePref_Ref" edge to Cadre_Choice_MTSPMMG entities by IDs.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) RemoveCadrePrefRefIDs(ids ...int32) *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.RemoveCadrePrefRefIDs(ids...)
	return eamuo
}

// RemoveCadrePrefRef removes "CadrePref_Ref" edges to Cadre_Choice_MTSPMMG entities.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) RemoveCadrePrefRef(c ...*Cadre_Choice_MTSPMMG) *ExamApplicationMTSPMMGUpdateOne {
	ids := make([]int32, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return eamuo.RemoveCadrePrefRefIDs(ids...)
}

// ClearCirclePrefRefMTSPMMG clears all "CirclePrefRefMTSPMMG" edges to the Division_Choice_MTSPMMG entity.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) ClearCirclePrefRefMTSPMMG() *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.ClearCirclePrefRefMTSPMMG()
	return eamuo
}

// RemoveCirclePrefRefMTSPMMGIDs removes the "CirclePrefRefMTSPMMG" edge to Division_Choice_MTSPMMG entities by IDs.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) RemoveCirclePrefRefMTSPMMGIDs(ids ...int32) *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.RemoveCirclePrefRefMTSPMMGIDs(ids...)
	return eamuo
}

// RemoveCirclePrefRefMTSPMMG removes "CirclePrefRefMTSPMMG" edges to Division_Choice_MTSPMMG entities.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) RemoveCirclePrefRefMTSPMMG(d ...*Division_Choice_MTSPMMG) *ExamApplicationMTSPMMGUpdateOne {
	ids := make([]int32, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return eamuo.RemoveCirclePrefRefMTSPMMGIDs(ids...)
}

// ClearMTSPMMGApplicationsRef clears all "MTSPMMGApplicationsRef" edges to the RecommendationsMTSPMMGApplications entity.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) ClearMTSPMMGApplicationsRef() *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.ClearMTSPMMGApplicationsRef()
	return eamuo
}

// RemoveMTSPMMGApplicationsRefIDs removes the "MTSPMMGApplicationsRef" edge to RecommendationsMTSPMMGApplications entities by IDs.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) RemoveMTSPMMGApplicationsRefIDs(ids ...int64) *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.RemoveMTSPMMGApplicationsRefIDs(ids...)
	return eamuo
}

// RemoveMTSPMMGApplicationsRef removes "MTSPMMGApplicationsRef" edges to RecommendationsMTSPMMGApplications entities.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) RemoveMTSPMMGApplicationsRef(r ...*RecommendationsMTSPMMGApplications) *ExamApplicationMTSPMMGUpdateOne {
	ids := make([]int64, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return eamuo.RemoveMTSPMMGApplicationsRefIDs(ids...)
}

// ClearMTSPMMGExamCentres clears the "MTSPMMGExamCentres" edge to the Center entity.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) ClearMTSPMMGExamCentres() *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.ClearMTSPMMGExamCentres()
	return eamuo
}

// ClearExamcitycenter clears the "examcitycenter" edge to the ExamCityCenter entity.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) ClearExamcitycenter() *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.ClearExamcitycenter()
	return eamuo
}

// ClearExams clears the "Exams" edge to the Exam entity.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) ClearExams() *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.ClearExams()
	return eamuo
}

// ClearCircleRefsMTSPMMG clears the "CircleRefsMTSPMMG" edge to the CircleSummaryForNO entity.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) ClearCircleRefsMTSPMMG() *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.ClearCircleRefsMTSPMMG()
	return eamuo
}

// ClearLogData clears all "LogData" edges to the Logs entity.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) ClearLogData() *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.ClearLogData()
	return eamuo
}

// RemoveLogDatumIDs removes the "LogData" edge to Logs entities by IDs.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) RemoveLogDatumIDs(ids ...int64) *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.RemoveLogDatumIDs(ids...)
	return eamuo
}

// RemoveLogData removes "LogData" edges to Logs entities.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) RemoveLogData(l ...*Logs) *ExamApplicationMTSPMMGUpdateOne {
	ids := make([]int64, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return eamuo.RemoveLogDatumIDs(ids...)
}

// Where appends a list predicates to the ExamApplicationMTSPMMGUpdate builder.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) Where(ps ...predicate.Exam_Application_MTSPMMG) *ExamApplicationMTSPMMGUpdateOne {
	eamuo.mutation.Where(ps...)
	return eamuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) Select(field string, fields ...string) *ExamApplicationMTSPMMGUpdateOne {
	eamuo.fields = append([]string{field}, fields...)
	return eamuo
}

// Save executes the query and returns the updated Exam_Application_MTSPMMG entity.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) Save(ctx context.Context) (*Exam_Application_MTSPMMG, error) {
	return withHooks(ctx, eamuo.sqlSave, eamuo.mutation, eamuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) SaveX(ctx context.Context) *Exam_Application_MTSPMMG {
	node, err := eamuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) Exec(ctx context.Context) error {
	_, err := eamuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eamuo *ExamApplicationMTSPMMGUpdateOne) ExecX(ctx context.Context) {
	if err := eamuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (eamuo *ExamApplicationMTSPMMGUpdateOne) sqlSave(ctx context.Context) (_node *Exam_Application_MTSPMMG, err error) {
	_spec := sqlgraph.NewUpdateSpec(exam_application_mtspmmg.Table, exam_application_mtspmmg.Columns, sqlgraph.NewFieldSpec(exam_application_mtspmmg.FieldID, field.TypeInt64))
	id, ok := eamuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Exam_Application_MTSPMMG.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := eamuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, exam_application_mtspmmg.FieldID)
		for _, f := range fields {
			if !exam_application_mtspmmg.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != exam_application_mtspmmg.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := eamuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eamuo.mutation.ApplicationNumber(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldApplicationNumber, field.TypeString, value)
	}
	if eamuo.mutation.ApplicationNumberCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldApplicationNumber, field.TypeString)
	}
	if value, ok := eamuo.mutation.ApplnSubmittedDate(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldApplnSubmittedDate, field.TypeTime, value)
	}
	if eamuo.mutation.ApplnSubmittedDateCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldApplnSubmittedDate, field.TypeTime)
	}
	if value, ok := eamuo.mutation.ExamShortName(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldExamShortName, field.TypeString, value)
	}
	if eamuo.mutation.ExamShortNameCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldExamShortName, field.TypeString)
	}
	if value, ok := eamuo.mutation.ExamName(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldExamName, field.TypeString, value)
	}
	if eamuo.mutation.ExamNameCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldExamName, field.TypeString)
	}
	if value, ok := eamuo.mutation.SmsExamShortName(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldSmsExamShortName, field.TypeString, value)
	}
	if eamuo.mutation.SmsExamShortNameCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldSmsExamShortName, field.TypeString)
	}
	if value, ok := eamuo.mutation.ExamYear(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldExamYear, field.TypeString, value)
	}
	if eamuo.mutation.ExamYearCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldExamYear, field.TypeString)
	}
	if value, ok := eamuo.mutation.UserID(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldUserID, field.TypeInt32, value)
	}
	if value, ok := eamuo.mutation.AddedUserID(); ok {
		_spec.AddField(exam_application_mtspmmg.FieldUserID, field.TypeInt32, value)
	}
	if eamuo.mutation.UserIDCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldUserID, field.TypeInt32)
	}
	if value, ok := eamuo.mutation.EmployeeID(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldEmployeeID, field.TypeInt64, value)
	}
	if value, ok := eamuo.mutation.AddedEmployeeID(); ok {
		_spec.AddField(exam_application_mtspmmg.FieldEmployeeID, field.TypeInt64, value)
	}
	if eamuo.mutation.EmployeeIDCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldEmployeeID, field.TypeInt64)
	}
	if value, ok := eamuo.mutation.EmployeeName(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldEmployeeName, field.TypeString, value)
	}
	if eamuo.mutation.EmployeeNameCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldEmployeeName, field.TypeString)
	}
	if value, ok := eamuo.mutation.DOB(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldDOB, field.TypeString, value)
	}
	if eamuo.mutation.DOBCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldDOB, field.TypeString)
	}
	if value, ok := eamuo.mutation.Gender(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldGender, field.TypeString, value)
	}
	if eamuo.mutation.GenderCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldGender, field.TypeString)
	}
	if value, ok := eamuo.mutation.MobileNumber(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldMobileNumber, field.TypeString, value)
	}
	if eamuo.mutation.MobileNumberCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldMobileNumber, field.TypeString)
	}
	if value, ok := eamuo.mutation.EmailID(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldEmailID, field.TypeString, value)
	}
	if eamuo.mutation.EmailIDCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldEmailID, field.TypeString)
	}
	if value, ok := eamuo.mutation.CategoryCode(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldCategoryCode, field.TypeString, value)
	}
	if eamuo.mutation.CategoryCodeCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldCategoryCode, field.TypeString)
	}
	if value, ok := eamuo.mutation.CategoryDescription(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldCategoryDescription, field.TypeString, value)
	}
	if eamuo.mutation.CategoryDescriptionCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldCategoryDescription, field.TypeString)
	}
	if value, ok := eamuo.mutation.DisabilityTypeID(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldDisabilityTypeID, field.TypeString, value)
	}
	if eamuo.mutation.DisabilityTypeIDCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldDisabilityTypeID, field.TypeString)
	}
	if value, ok := eamuo.mutation.DisabilityTypeCode(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldDisabilityTypeCode, field.TypeString, value)
	}
	if eamuo.mutation.DisabilityTypeCodeCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldDisabilityTypeCode, field.TypeString)
	}
	if value, ok := eamuo.mutation.DisabilityTypeDescription(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldDisabilityTypeDescription, field.TypeString, value)
	}
	if eamuo.mutation.DisabilityTypeDescriptionCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldDisabilityTypeDescription, field.TypeString)
	}
	if value, ok := eamuo.mutation.DisabilityPercentage(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldDisabilityPercentage, field.TypeInt32, value)
	}
	if value, ok := eamuo.mutation.AddedDisabilityPercentage(); ok {
		_spec.AddField(exam_application_mtspmmg.FieldDisabilityPercentage, field.TypeInt32, value)
	}
	if eamuo.mutation.DisabilityPercentageCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldDisabilityPercentage, field.TypeInt32)
	}
	if value, ok := eamuo.mutation.DCCS(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldDCCS, field.TypeString, value)
	}
	if eamuo.mutation.DCCSCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldDCCS, field.TypeString)
	}
	if value, ok := eamuo.mutation.EntryPostCode(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldEntryPostCode, field.TypeString, value)
	}
	if eamuo.mutation.EntryPostCodeCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldEntryPostCode, field.TypeString)
	}
	if value, ok := eamuo.mutation.EntryPostDescription(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldEntryPostDescription, field.TypeString, value)
	}
	if eamuo.mutation.EntryPostDescriptionCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldEntryPostDescription, field.TypeString)
	}
	if value, ok := eamuo.mutation.PresentPostCode(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldPresentPostCode, field.TypeString, value)
	}
	if eamuo.mutation.PresentPostCodeCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldPresentPostCode, field.TypeString)
	}
	if value, ok := eamuo.mutation.PresentPostDescription(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldPresentPostDescription, field.TypeString, value)
	}
	if eamuo.mutation.PresentPostDescriptionCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldPresentPostDescription, field.TypeString)
	}
	if value, ok := eamuo.mutation.FeederPostCode(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldFeederPostCode, field.TypeString, value)
	}
	if eamuo.mutation.FeederPostCodeCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldFeederPostCode, field.TypeString)
	}
	if value, ok := eamuo.mutation.FeederPostDescription(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldFeederPostDescription, field.TypeString, value)
	}
	if eamuo.mutation.FeederPostDescriptionCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldFeederPostDescription, field.TypeString)
	}
	if value, ok := eamuo.mutation.FeederPostJoiningDate(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldFeederPostJoiningDate, field.TypeString, value)
	}
	if eamuo.mutation.FeederPostJoiningDateCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldFeederPostJoiningDate, field.TypeString)
	}
	if value, ok := eamuo.mutation.DesignationID(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldDesignationID, field.TypeString, value)
	}
	if eamuo.mutation.DesignationIDCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldDesignationID, field.TypeString)
	}
	if value, ok := eamuo.mutation.PresentDesignation(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldPresentDesignation, field.TypeString, value)
	}
	if eamuo.mutation.PresentDesignationCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldPresentDesignation, field.TypeString)
	}
	if value, ok := eamuo.mutation.EducationCode(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldEducationCode, field.TypeString, value)
	}
	if eamuo.mutation.EducationCodeCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldEducationCode, field.TypeString)
	}
	if value, ok := eamuo.mutation.EducationDescription(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldEducationDescription, field.TypeString, value)
	}
	if eamuo.mutation.EducationDescriptionCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldEducationDescription, field.TypeString)
	}
	if value, ok := eamuo.mutation.FacilityUniqueID(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldFacilityUniqueID, field.TypeString, value)
	}
	if eamuo.mutation.FacilityUniqueIDCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldFacilityUniqueID, field.TypeString)
	}
	if value, ok := eamuo.mutation.WorkingOfficePincode(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldWorkingOfficePincode, field.TypeInt32, value)
	}
	if value, ok := eamuo.mutation.AddedWorkingOfficePincode(); ok {
		_spec.AddField(exam_application_mtspmmg.FieldWorkingOfficePincode, field.TypeInt32, value)
	}
	if eamuo.mutation.WorkingOfficePincodeCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldWorkingOfficePincode, field.TypeInt32)
	}
	if value, ok := eamuo.mutation.WorkingOfficeFacilityID(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldWorkingOfficeFacilityID, field.TypeString, value)
	}
	if eamuo.mutation.WorkingOfficeFacilityIDCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldWorkingOfficeFacilityID, field.TypeString)
	}
	if value, ok := eamuo.mutation.WorkingOfficeName(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldWorkingOfficeName, field.TypeString, value)
	}
	if eamuo.mutation.WorkingOfficeNameCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldWorkingOfficeName, field.TypeString)
	}
	if value, ok := eamuo.mutation.WorkingOfficeCircleFacilityID(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldWorkingOfficeCircleFacilityID, field.TypeString, value)
	}
	if eamuo.mutation.WorkingOfficeCircleFacilityIDCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldWorkingOfficeCircleFacilityID, field.TypeString)
	}
	if value, ok := eamuo.mutation.WorkingOfficeCircleName(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldWorkingOfficeCircleName, field.TypeString, value)
	}
	if eamuo.mutation.WorkingOfficeCircleNameCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldWorkingOfficeCircleName, field.TypeString)
	}
	if value, ok := eamuo.mutation.WorkingOfficeRegionFacilityID(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldWorkingOfficeRegionFacilityID, field.TypeString, value)
	}
	if eamuo.mutation.WorkingOfficeRegionFacilityIDCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldWorkingOfficeRegionFacilityID, field.TypeString)
	}
	if value, ok := eamuo.mutation.WorkingOfficeRegionName(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldWorkingOfficeRegionName, field.TypeString, value)
	}
	if eamuo.mutation.WorkingOfficeRegionNameCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldWorkingOfficeRegionName, field.TypeString)
	}
	if value, ok := eamuo.mutation.WorkingOfficeDivisionFacilityID(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldWorkingOfficeDivisionFacilityID, field.TypeString, value)
	}
	if eamuo.mutation.WorkingOfficeDivisionFacilityIDCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldWorkingOfficeDivisionFacilityID, field.TypeString)
	}
	if value, ok := eamuo.mutation.WorkingOfficeDivisionName(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldWorkingOfficeDivisionName, field.TypeString, value)
	}
	if eamuo.mutation.WorkingOfficeDivisionNameCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldWorkingOfficeDivisionName, field.TypeString)
	}
	if value, ok := eamuo.mutation.ReportingOfficeFacilityID(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldReportingOfficeFacilityID, field.TypeString, value)
	}
	if eamuo.mutation.ReportingOfficeFacilityIDCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldReportingOfficeFacilityID, field.TypeString)
	}
	if value, ok := eamuo.mutation.ReportingOfficeName(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldReportingOfficeName, field.TypeString, value)
	}
	if eamuo.mutation.ReportingOfficeNameCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldReportingOfficeName, field.TypeString)
	}
	if value, ok := eamuo.mutation.LienControllingOfficeID(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldLienControllingOfficeID, field.TypeString, value)
	}
	if eamuo.mutation.LienControllingOfficeIDCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldLienControllingOfficeID, field.TypeString)
	}
	if value, ok := eamuo.mutation.LienControllingOfficeName(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldLienControllingOfficeName, field.TypeString, value)
	}
	if eamuo.mutation.LienControllingOfficeNameCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldLienControllingOfficeName, field.TypeString)
	}
	if value, ok := eamuo.mutation.InDeputation(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldInDeputation, field.TypeString, value)
	}
	if eamuo.mutation.InDeputationCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldInDeputation, field.TypeString)
	}
	if value, ok := eamuo.mutation.DeputationType(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldDeputationType, field.TypeString, value)
	}
	if eamuo.mutation.DeputationTypeCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldDeputationType, field.TypeString)
	}
	if value, ok := eamuo.mutation.DeputationOfficeUniqueId(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldDeputationOfficeUniqueId, field.TypeString, value)
	}
	if eamuo.mutation.DeputationOfficeUniqueIdCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldDeputationOfficeUniqueId, field.TypeString)
	}
	if value, ok := eamuo.mutation.DeputationOfficeFacilityID(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldDeputationOfficeFacilityID, field.TypeString, value)
	}
	if eamuo.mutation.DeputationOfficeFacilityIDCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldDeputationOfficeFacilityID, field.TypeString)
	}
	if value, ok := eamuo.mutation.DeputationOfficeName(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldDeputationOfficeName, field.TypeString, value)
	}
	if eamuo.mutation.DeputationOfficeNameCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldDeputationOfficeName, field.TypeString)
	}
	if value, ok := eamuo.mutation.DeputationControllingOfficeID(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldDeputationControllingOfficeID, field.TypeString, value)
	}
	if eamuo.mutation.DeputationControllingOfficeIDCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldDeputationControllingOfficeID, field.TypeString)
	}
	if value, ok := eamuo.mutation.DeputationControllingOfficeName(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldDeputationControllingOfficeName, field.TypeString, value)
	}
	if eamuo.mutation.DeputationControllingOfficeNameCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldDeputationControllingOfficeName, field.TypeString)
	}
	if value, ok := eamuo.mutation.ControllingOfficeFacilityID(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldControllingOfficeFacilityID, field.TypeString, value)
	}
	if eamuo.mutation.ControllingOfficeFacilityIDCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldControllingOfficeFacilityID, field.TypeString)
	}
	if value, ok := eamuo.mutation.ControllingOfficeName(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldControllingOfficeName, field.TypeString, value)
	}
	if eamuo.mutation.ControllingOfficeNameCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldControllingOfficeName, field.TypeString)
	}
	if value, ok := eamuo.mutation.NodalOfficeFacilityID(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldNodalOfficeFacilityID, field.TypeString, value)
	}
	if eamuo.mutation.NodalOfficeFacilityIDCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldNodalOfficeFacilityID, field.TypeString)
	}
	if value, ok := eamuo.mutation.NodalOfficeName(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldNodalOfficeName, field.TypeString, value)
	}
	if eamuo.mutation.NodalOfficeNameCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldNodalOfficeName, field.TypeString)
	}
	if value, ok := eamuo.mutation.CenterFacilityId(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldCenterFacilityId, field.TypeString, value)
	}
	if eamuo.mutation.CenterFacilityIdCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldCenterFacilityId, field.TypeString)
	}
	if value, ok := eamuo.mutation.CentrePreference(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldCentrePreference, field.TypeString, value)
	}
	if eamuo.mutation.CentrePreferenceCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldCentrePreference, field.TypeString)
	}
	if value, ok := eamuo.mutation.Signature(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldSignature, field.TypeString, value)
	}
	if eamuo.mutation.SignatureCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldSignature, field.TypeString)
	}
	if value, ok := eamuo.mutation.Photo(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldPhoto, field.TypeString, value)
	}
	if eamuo.mutation.PhotoCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldPhoto, field.TypeString)
	}
	if value, ok := eamuo.mutation.SignaturePath(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldSignaturePath, field.TypeString, value)
	}
	if eamuo.mutation.SignaturePathCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldSignaturePath, field.TypeString)
	}
	if value, ok := eamuo.mutation.PhotoPath(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldPhotoPath, field.TypeString, value)
	}
	if eamuo.mutation.PhotoPathCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldPhotoPath, field.TypeString)
	}
	if value, ok := eamuo.mutation.CandidatePhoto(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldCandidatePhoto, field.TypeBytes, value)
	}
	if eamuo.mutation.CandidatePhotoCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldCandidatePhoto, field.TypeBytes)
	}
	if value, ok := eamuo.mutation.CandidateSignature(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldCandidateSignature, field.TypeBytes, value)
	}
	if eamuo.mutation.CandidateSignatureCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldCandidateSignature, field.TypeBytes)
	}
	if value, ok := eamuo.mutation.TempHallTicket(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldTempHallTicket, field.TypeString, value)
	}
	if eamuo.mutation.TempHallTicketCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldTempHallTicket, field.TypeString)
	}
	if value, ok := eamuo.mutation.CandidateRemarks(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldCandidateRemarks, field.TypeString, value)
	}
	if eamuo.mutation.CandidateRemarksCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldCandidateRemarks, field.TypeString)
	}
	if value, ok := eamuo.mutation.VAGeneralRemarks(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldVAGeneralRemarks, field.TypeString, value)
	}
	if eamuo.mutation.VAGeneralRemarksCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldVAGeneralRemarks, field.TypeString)
	}
	if value, ok := eamuo.mutation.CAGeneralRemarks(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldCAGeneralRemarks, field.TypeString, value)
	}
	if eamuo.mutation.CAGeneralRemarksCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldCAGeneralRemarks, field.TypeString)
	}
	if value, ok := eamuo.mutation.NAGeneralRemarks(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldNAGeneralRemarks, field.TypeString, value)
	}
	if eamuo.mutation.NAGeneralRemarksCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldNAGeneralRemarks, field.TypeString)
	}
	if value, ok := eamuo.mutation.ApplicationStatus(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldApplicationStatus, field.TypeString, value)
	}
	if eamuo.mutation.ApplicationStatusCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldApplicationStatus, field.TypeString)
	}
	if value, ok := eamuo.mutation.Status(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldStatus, field.TypeString, value)
	}
	if eamuo.mutation.StatusCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldStatus, field.TypeString)
	}
	if value, ok := eamuo.mutation.VAUserId(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldVAUserId, field.TypeInt32, value)
	}
	if value, ok := eamuo.mutation.AddedVAUserId(); ok {
		_spec.AddField(exam_application_mtspmmg.FieldVAUserId, field.TypeInt32, value)
	}
	if eamuo.mutation.VAUserIdCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldVAUserId, field.TypeInt32)
	}
	if value, ok := eamuo.mutation.VAUserName(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldVAUserName, field.TypeString, value)
	}
	if eamuo.mutation.VAUserNameCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldVAUserName, field.TypeString)
	}
	if value, ok := eamuo.mutation.VAEmployeeID(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldVAEmployeeID, field.TypeString, value)
	}
	if eamuo.mutation.VAEmployeeIDCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldVAEmployeeID, field.TypeString)
	}
	if value, ok := eamuo.mutation.VAEmployeeDesignation(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldVAEmployeeDesignation, field.TypeString, value)
	}
	if eamuo.mutation.VAEmployeeDesignationCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldVAEmployeeDesignation, field.TypeString)
	}
	if value, ok := eamuo.mutation.VARemarks(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldVARemarks, field.TypeString, value)
	}
	if eamuo.mutation.VARemarksCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldVARemarks, field.TypeString)
	}
	if value, ok := eamuo.mutation.VADate(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldVADate, field.TypeTime, value)
	}
	if eamuo.mutation.VADateCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldVADate, field.TypeTime)
	}
	if value, ok := eamuo.mutation.CAUserId(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldCAUserId, field.TypeInt32, value)
	}
	if value, ok := eamuo.mutation.AddedCAUserId(); ok {
		_spec.AddField(exam_application_mtspmmg.FieldCAUserId, field.TypeInt32, value)
	}
	if eamuo.mutation.CAUserIdCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldCAUserId, field.TypeInt32)
	}
	if value, ok := eamuo.mutation.CAUserName(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldCAUserName, field.TypeString, value)
	}
	if eamuo.mutation.CAUserNameCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldCAUserName, field.TypeString)
	}
	if value, ok := eamuo.mutation.CAEmployeeID(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldCAEmployeeID, field.TypeString, value)
	}
	if eamuo.mutation.CAEmployeeIDCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldCAEmployeeID, field.TypeString)
	}
	if value, ok := eamuo.mutation.CAEmployeeDesignation(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldCAEmployeeDesignation, field.TypeString, value)
	}
	if eamuo.mutation.CAEmployeeDesignationCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldCAEmployeeDesignation, field.TypeString)
	}
	if value, ok := eamuo.mutation.CARemarks(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldCARemarks, field.TypeString, value)
	}
	if eamuo.mutation.CARemarksCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldCARemarks, field.TypeString)
	}
	if value, ok := eamuo.mutation.CADate(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldCADate, field.TypeTime, value)
	}
	if eamuo.mutation.CADateCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldCADate, field.TypeTime)
	}
	if value, ok := eamuo.mutation.NAUserId(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldNAUserId, field.TypeInt32, value)
	}
	if value, ok := eamuo.mutation.AddedNAUserId(); ok {
		_spec.AddField(exam_application_mtspmmg.FieldNAUserId, field.TypeInt32, value)
	}
	if eamuo.mutation.NAUserIdCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldNAUserId, field.TypeInt32)
	}
	if value, ok := eamuo.mutation.NAUserName(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldNAUserName, field.TypeString, value)
	}
	if eamuo.mutation.NAUserNameCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldNAUserName, field.TypeString)
	}
	if value, ok := eamuo.mutation.NAEmployeeID(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldNAEmployeeID, field.TypeString, value)
	}
	if eamuo.mutation.NAEmployeeIDCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldNAEmployeeID, field.TypeString)
	}
	if value, ok := eamuo.mutation.NAEmployeeDesignation(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldNAEmployeeDesignation, field.TypeString, value)
	}
	if eamuo.mutation.NAEmployeeDesignationCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldNAEmployeeDesignation, field.TypeString)
	}
	if value, ok := eamuo.mutation.NARemarks(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldNARemarks, field.TypeString, value)
	}
	if eamuo.mutation.NARemarksCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldNARemarks, field.TypeString)
	}
	if value, ok := eamuo.mutation.NADate(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldNADate, field.TypeTime, value)
	}
	if eamuo.mutation.NADateCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldNADate, field.TypeTime)
	}
	if value, ok := eamuo.mutation.AppliactionRemarks(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldAppliactionRemarks, field.TypeString, value)
	}
	if eamuo.mutation.AppliactionRemarksCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldAppliactionRemarks, field.TypeString)
	}
	if value, ok := eamuo.mutation.CadrePreferences(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldCadrePreferences, field.TypeJSON, value)
	}
	if value, ok := eamuo.mutation.AppendedCadrePreferences(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, exam_application_mtspmmg.FieldCadrePreferences, value)
		})
	}
	if eamuo.mutation.CadrePreferencesCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldCadrePreferences, field.TypeJSON)
	}
	if value, ok := eamuo.mutation.CAPreviousRemarks(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldCAPreviousRemarks, field.TypeString, value)
	}
	if eamuo.mutation.CAPreviousRemarksCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldCAPreviousRemarks, field.TypeString)
	}
	if value, ok := eamuo.mutation.PunishmentStatus(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldPunishmentStatus, field.TypeBool, value)
	}
	if eamuo.mutation.PunishmentStatusCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldPunishmentStatus, field.TypeBool)
	}
	if value, ok := eamuo.mutation.DisciplinaryCaseStatus(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldDisciplinaryCaseStatus, field.TypeBool, value)
	}
	if eamuo.mutation.DisciplinaryCaseStatusCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldDisciplinaryCaseStatus, field.TypeBool)
	}
	if value, ok := eamuo.mutation.GenerateHallTicketFlag(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldGenerateHallTicketFlag, field.TypeBool, value)
	}
	if eamuo.mutation.GenerateHallTicketFlagCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldGenerateHallTicketFlag, field.TypeBool)
	}
	if value, ok := eamuo.mutation.HallTicketNumber(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldHallTicketNumber, field.TypeString, value)
	}
	if eamuo.mutation.HallTicketNumberCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldHallTicketNumber, field.TypeString)
	}
	if value, ok := eamuo.mutation.HallTicketGeneratedFlag(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldHallTicketGeneratedFlag, field.TypeBool, value)
	}
	if eamuo.mutation.HallTicketGeneratedFlagCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldHallTicketGeneratedFlag, field.TypeBool)
	}
	if value, ok := eamuo.mutation.GenerateHallTicketFlagByNO(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldGenerateHallTicketFlagByNO, field.TypeBool, value)
	}
	if eamuo.mutation.GenerateHallTicketFlagByNOCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldGenerateHallTicketFlagByNO, field.TypeBool)
	}
	if value, ok := eamuo.mutation.HallTicketGeneratedDate(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldHallTicketGeneratedDate, field.TypeTime, value)
	}
	if eamuo.mutation.HallTicketGeneratedDateCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldHallTicketGeneratedDate, field.TypeTime)
	}
	if value, ok := eamuo.mutation.TemporaryHallTicket(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldTemporaryHallTicket, field.TypeString, value)
	}
	if eamuo.mutation.TemporaryHallTicketCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldTemporaryHallTicket, field.TypeString)
	}
	if value, ok := eamuo.mutation.OptionUsed(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldOptionUsed, field.TypeString, value)
	}
	if eamuo.mutation.OptionUsedCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldOptionUsed, field.TypeString)
	}
	if value, ok := eamuo.mutation.Remarks(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldRemarks, field.TypeString, value)
	}
	if eamuo.mutation.RemarksCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldRemarks, field.TypeString)
	}
	if value, ok := eamuo.mutation.Cadre(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldCadre, field.TypeString, value)
	}
	if eamuo.mutation.CadreCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldCadre, field.TypeString)
	}
	if value, ok := eamuo.mutation.EmployeePost(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldEmployeePost, field.TypeString, value)
	}
	if eamuo.mutation.EmployeePostCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldEmployeePost, field.TypeString)
	}
	if value, ok := eamuo.mutation.DOJInEligiblePost(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldDOJInEligiblePost, field.TypeString, value)
	}
	if eamuo.mutation.DOJInEligiblePostCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldDOJInEligiblePost, field.TypeString)
	}
	if value, ok := eamuo.mutation.DivisionPreferences(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldDivisionPreferences, field.TypeJSON, value)
	}
	if value, ok := eamuo.mutation.AppendedDivisionPreferences(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, exam_application_mtspmmg.FieldDivisionPreferences, value)
		})
	}
	if eamuo.mutation.DivisionPreferencesCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldDivisionPreferences, field.TypeJSON)
	}
	if value, ok := eamuo.mutation.GDSEngagement(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldGDSEngagement, field.TypeJSON, value)
	}
	if value, ok := eamuo.mutation.AppendedGDSEngagement(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, exam_application_mtspmmg.FieldGDSEngagement, value)
		})
	}
	if eamuo.mutation.GDSEngagementCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldGDSEngagement, field.TypeJSON)
	}
	if value, ok := eamuo.mutation.FacilityName(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldFacilityName, field.TypeString, value)
	}
	if eamuo.mutation.FacilityNameCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldFacilityName, field.TypeString)
	}
	if value, ok := eamuo.mutation.ServiceLength(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldServiceLength, field.TypeJSON, value)
	}
	if value, ok := eamuo.mutation.AppendedServiceLength(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, exam_application_mtspmmg.FieldServiceLength, value)
		})
	}
	if eamuo.mutation.ServiceLengthCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldServiceLength, field.TypeJSON)
	}
	if value, ok := eamuo.mutation.NonQualifyingService(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldNonQualifyingService, field.TypeJSON, value)
	}
	if value, ok := eamuo.mutation.AppendedNonQualifyingService(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, exam_application_mtspmmg.FieldNonQualifyingService, value)
		})
	}
	if eamuo.mutation.NonQualifyingServiceCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldNonQualifyingService, field.TypeJSON)
	}
	if value, ok := eamuo.mutation.DCInPresentCadre(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldDCInPresentCadre, field.TypeString, value)
	}
	if eamuo.mutation.DCInPresentCadreCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldDCInPresentCadre, field.TypeString)
	}
	if value, ok := eamuo.mutation.ReportingOfficeID(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldReportingOfficeID, field.TypeString, value)
	}
	if eamuo.mutation.ReportingOfficeIDCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldReportingOfficeID, field.TypeString)
	}
	if value, ok := eamuo.mutation.PostPreferences(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldPostPreferences, field.TypeJSON, value)
	}
	if value, ok := eamuo.mutation.AppendedPostPreferences(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, exam_application_mtspmmg.FieldPostPreferences, value)
		})
	}
	if eamuo.mutation.PostPreferencesCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldPostPreferences, field.TypeJSON)
	}
	if value, ok := eamuo.mutation.UnitPreferences(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldUnitPreferences, field.TypeJSON, value)
	}
	if value, ok := eamuo.mutation.AppendedUnitPreferences(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, exam_application_mtspmmg.FieldUnitPreferences, value)
		})
	}
	if eamuo.mutation.UnitPreferencesCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldUnitPreferences, field.TypeJSON)
	}
	if value, ok := eamuo.mutation.CenterId(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldCenterId, field.TypeInt32, value)
	}
	if value, ok := eamuo.mutation.AddedCenterId(); ok {
		_spec.AddField(exam_application_mtspmmg.FieldCenterId, field.TypeInt32, value)
	}
	if eamuo.mutation.CenterIdCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldCenterId, field.TypeInt32)
	}
	if value, ok := eamuo.mutation.ClaimingQualifyingService(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldClaimingQualifyingService, field.TypeString, value)
	}
	if eamuo.mutation.ClaimingQualifyingServiceCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldClaimingQualifyingService, field.TypeString)
	}
	if value, ok := eamuo.mutation.DeputationOfficePincode(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldDeputationOfficePincode, field.TypeString, value)
	}
	if eamuo.mutation.DeputationOfficePincodeCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldDeputationOfficePincode, field.TypeString)
	}
	if value, ok := eamuo.mutation.RecommendedStatus(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldRecommendedStatus, field.TypeString, value)
	}
	if eamuo.mutation.RecommendedStatusCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldRecommendedStatus, field.TypeString)
	}
	if value, ok := eamuo.mutation.UpdatedAt(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldUpdatedAt, field.TypeTime, value)
	}
	if eamuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := eamuo.mutation.UpdatedBy(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldUpdatedBy, field.TypeString, value)
	}
	if eamuo.mutation.UpdatedByCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := eamuo.mutation.ApplicationWdlDate(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldApplicationWdlDate, field.TypeTime, value)
	}
	if eamuo.mutation.ApplicationWdlDateCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldApplicationWdlDate, field.TypeTime)
	}
	if value, ok := eamuo.mutation.ExamCenterHall(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldExamCenterHall, field.TypeInt32, value)
	}
	if value, ok := eamuo.mutation.AddedExamCenterHall(); ok {
		_spec.AddField(exam_application_mtspmmg.FieldExamCenterHall, field.TypeInt32, value)
	}
	if eamuo.mutation.ExamCenterHallCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldExamCenterHall, field.TypeInt32)
	}
	if value, ok := eamuo.mutation.HallName(); ok {
		_spec.SetField(exam_application_mtspmmg.FieldHallName, field.TypeString, value)
	}
	if eamuo.mutation.HallNameCleared() {
		_spec.ClearField(exam_application_mtspmmg.FieldHallName, field.TypeString)
	}
	if eamuo.mutation.UsersMTSPMMGRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_application_mtspmmg.UsersMTSPMMGRefTable,
			Columns: []string{exam_application_mtspmmg.UsersMTSPMMGRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usermaster.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eamuo.mutation.RemovedUsersMTSPMMGRefIDs(); len(nodes) > 0 && !eamuo.mutation.UsersMTSPMMGRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_application_mtspmmg.UsersMTSPMMGRefTable,
			Columns: []string{exam_application_mtspmmg.UsersMTSPMMGRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usermaster.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eamuo.mutation.UsersMTSPMMGRefIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_application_mtspmmg.UsersMTSPMMGRefTable,
			Columns: []string{exam_application_mtspmmg.UsersMTSPMMGRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usermaster.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eamuo.mutation.RoleusersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   exam_application_mtspmmg.RoleusersTable,
			Columns: []string{exam_application_mtspmmg.RoleusersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rolemaster.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eamuo.mutation.RoleusersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   exam_application_mtspmmg.RoleusersTable,
			Columns: []string{exam_application_mtspmmg.RoleusersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rolemaster.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eamuo.mutation.CadrePrefRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_application_mtspmmg.CadrePrefRefTable,
			Columns: []string{exam_application_mtspmmg.CadrePrefRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cadre_choice_mtspmmg.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eamuo.mutation.RemovedCadrePrefRefIDs(); len(nodes) > 0 && !eamuo.mutation.CadrePrefRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_application_mtspmmg.CadrePrefRefTable,
			Columns: []string{exam_application_mtspmmg.CadrePrefRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cadre_choice_mtspmmg.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eamuo.mutation.CadrePrefRefIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_application_mtspmmg.CadrePrefRefTable,
			Columns: []string{exam_application_mtspmmg.CadrePrefRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cadre_choice_mtspmmg.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eamuo.mutation.CirclePrefRefMTSPMMGCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_application_mtspmmg.CirclePrefRefMTSPMMGTable,
			Columns: []string{exam_application_mtspmmg.CirclePrefRefMTSPMMGColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(division_choice_mtspmmg.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eamuo.mutation.RemovedCirclePrefRefMTSPMMGIDs(); len(nodes) > 0 && !eamuo.mutation.CirclePrefRefMTSPMMGCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_application_mtspmmg.CirclePrefRefMTSPMMGTable,
			Columns: []string{exam_application_mtspmmg.CirclePrefRefMTSPMMGColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(division_choice_mtspmmg.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eamuo.mutation.CirclePrefRefMTSPMMGIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_application_mtspmmg.CirclePrefRefMTSPMMGTable,
			Columns: []string{exam_application_mtspmmg.CirclePrefRefMTSPMMGColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(division_choice_mtspmmg.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eamuo.mutation.MTSPMMGApplicationsRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_application_mtspmmg.MTSPMMGApplicationsRefTable,
			Columns: []string{exam_application_mtspmmg.MTSPMMGApplicationsRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(recommendationsmtspmmgapplications.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eamuo.mutation.RemovedMTSPMMGApplicationsRefIDs(); len(nodes) > 0 && !eamuo.mutation.MTSPMMGApplicationsRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_application_mtspmmg.MTSPMMGApplicationsRefTable,
			Columns: []string{exam_application_mtspmmg.MTSPMMGApplicationsRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(recommendationsmtspmmgapplications.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eamuo.mutation.MTSPMMGApplicationsRefIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_application_mtspmmg.MTSPMMGApplicationsRefTable,
			Columns: []string{exam_application_mtspmmg.MTSPMMGApplicationsRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(recommendationsmtspmmgapplications.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eamuo.mutation.MTSPMMGExamCentresCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   exam_application_mtspmmg.MTSPMMGExamCentresTable,
			Columns: []string{exam_application_mtspmmg.MTSPMMGExamCentresColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(center.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eamuo.mutation.MTSPMMGExamCentresIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   exam_application_mtspmmg.MTSPMMGExamCentresTable,
			Columns: []string{exam_application_mtspmmg.MTSPMMGExamCentresColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(center.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eamuo.mutation.ExamcitycenterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   exam_application_mtspmmg.ExamcitycenterTable,
			Columns: []string{exam_application_mtspmmg.ExamcitycenterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(examcitycenter.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eamuo.mutation.ExamcitycenterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   exam_application_mtspmmg.ExamcitycenterTable,
			Columns: []string{exam_application_mtspmmg.ExamcitycenterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(examcitycenter.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eamuo.mutation.ExamsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   exam_application_mtspmmg.ExamsTable,
			Columns: []string{exam_application_mtspmmg.ExamsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eamuo.mutation.ExamsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   exam_application_mtspmmg.ExamsTable,
			Columns: []string{exam_application_mtspmmg.ExamsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eamuo.mutation.CircleRefsMTSPMMGCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   exam_application_mtspmmg.CircleRefsMTSPMMGTable,
			Columns: []string{exam_application_mtspmmg.CircleRefsMTSPMMGColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(circlesummaryforno.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eamuo.mutation.CircleRefsMTSPMMGIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   exam_application_mtspmmg.CircleRefsMTSPMMGTable,
			Columns: []string{exam_application_mtspmmg.CircleRefsMTSPMMGColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(circlesummaryforno.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eamuo.mutation.LogDataCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_application_mtspmmg.LogDataTable,
			Columns: []string{exam_application_mtspmmg.LogDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(logs.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eamuo.mutation.RemovedLogDataIDs(); len(nodes) > 0 && !eamuo.mutation.LogDataCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_application_mtspmmg.LogDataTable,
			Columns: []string{exam_application_mtspmmg.LogDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(logs.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eamuo.mutation.LogDataIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam_application_mtspmmg.LogDataTable,
			Columns: []string{exam_application_mtspmmg.LogDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(logs.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Exam_Application_MTSPMMG{config: eamuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, eamuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{exam_application_mtspmmg.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	eamuo.mutation.done = true
	return _node, nil
}
