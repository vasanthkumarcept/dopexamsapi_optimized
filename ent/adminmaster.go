// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"recruit/ent/adminmaster"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// AdminMaster is the model entity for the AdminMaster schema.
type AdminMaster struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// EmployeeId holds the value of the "EmployeeId" field.
	EmployeeId int64 `json:"EmployeeId,omitempty"`
	// EmployeeName holds the value of the "EmployeeName" field.
	EmployeeName string `json:"EmployeeName,omitempty"`
	// Designation holds the value of the "Designation" field.
	Designation string `json:"Designation,omitempty"`
	// RoleUserCode holds the value of the "RoleUserCode" field.
	RoleUserCode int32 `json:"RoleUserCode,omitempty"`
	// RoleUserDescription holds the value of the "RoleUserDescription" field.
	RoleUserDescription string `json:"RoleUserDescription,omitempty"`
	// Mobile holds the value of the "Mobile" field.
	Mobile string `json:"Mobile,omitempty"`
	// EmailID holds the value of the "EmailID" field.
	EmailID string `json:"EmailID,omitempty"`
	// UserName holds the value of the "UserName" field.
	UserName string `json:"UserName,omitempty"`
	// Password holds the value of the "Password" field.
	Password string `json:"Password,omitempty"`
	// FacilityIDUniqueid holds the value of the "FacilityIDUniqueid" field.
	FacilityIDUniqueid int64 `json:"FacilityIDUniqueid,omitempty"`
	// FacilityID holds the value of the "FacilityID" field.
	FacilityID string `json:"FacilityID,omitempty"`
	// AuthorityFacilityName holds the value of the "AuthorityFacilityName" field.
	AuthorityFacilityName string `json:"AuthorityFacilityName,omitempty"`
	// FacilityType holds the value of the "FacilityType" field.
	FacilityType string `json:"FacilityType,omitempty"`
	// ReportingOfficeFacilityId holds the value of the "ReportingOfficeFacilityId" field.
	ReportingOfficeFacilityId string `json:"ReportingOfficeFacilityId,omitempty"`
	// ReportingOfficeFacilityName holds the value of the "ReportingOfficeFacilityName" field.
	ReportingOfficeFacilityName string `json:"ReportingOfficeFacilityName,omitempty"`
	// CircleOfficeFacilityId holds the value of the "CircleOfficeFacilityId" field.
	CircleOfficeFacilityId string `json:"CircleOfficeFacilityId,omitempty"`
	// CircleOfficeName holds the value of the "CircleOfficeName" field.
	CircleOfficeName string `json:"CircleOfficeName,omitempty"`
	// UidToken holds the value of the "UidToken" field.
	UidToken string `json:"UidToken,omitempty"`
	// Statuss holds the value of the "Statuss" field.
	Statuss string `json:"Statuss,omitempty"`
	// OTP holds the value of the "OTP" field.
	OTP int32 `json:"OTP,omitempty"`
	// OTPSavedTime holds the value of the "OTPSavedTime" field.
	OTPSavedTime time.Time `json:"OTPSavedTime,omitempty"`
	// OTPTriggeredTime holds the value of the "OTPTriggeredTime" field.
	OTPTriggeredTime time.Time `json:"OTPTriggeredTime,omitempty"`
	// OTPExpiryTime holds the value of the "OTPExpiryTime" field.
	OTPExpiryTime time.Time `json:"OTPExpiryTime,omitempty"`
	// OTPRemarks holds the value of the "OTPRemarks" field.
	OTPRemarks string `json:"OTPRemarks,omitempty"`
	// CreatedById holds the value of the "CreatedById" field.
	CreatedById int64 `json:"CreatedById,omitempty"`
	// CreatedByUserName holds the value of the "CreatedByUserName" field.
	CreatedByUserName string `json:"CreatedByUserName,omitempty"`
	// CreatedByEmpId holds the value of the "CreatedByEmpId" field.
	CreatedByEmpId int64 `json:"CreatedByEmpId,omitempty"`
	// CreatedByDesignation holds the value of the "CreatedByDesignation" field.
	CreatedByDesignation string `json:"CreatedByDesignation,omitempty"`
	// CreatedDate holds the value of the "CreatedDate" field.
	CreatedDate time.Time `json:"CreatedDate,omitempty"`
	// DeletedById holds the value of the "DeletedById" field.
	DeletedById int64 `json:"DeletedById,omitempty"`
	// DeletedByUserName holds the value of the "DeletedByUserName" field.
	DeletedByUserName string `json:"DeletedByUserName,omitempty"`
	// DeletedByEmpId holds the value of the "DeletedByEmpId" field.
	DeletedByEmpId int64 `json:"DeletedByEmpId,omitempty"`
	// DeletedByDesignation holds the value of the "DeletedByDesignation" field.
	DeletedByDesignation string `json:"DeletedByDesignation,omitempty"`
	// DeletedDate holds the value of the "DeletedDate" field.
	DeletedDate time.Time `json:"DeletedDate,omitempty"`
	// ModifiedById holds the value of the "ModifiedById" field.
	ModifiedById int `json:"ModifiedById,omitempty"`
	// ModifiedByUserName holds the value of the "ModifiedByUserName" field.
	ModifiedByUserName string `json:"ModifiedByUserName,omitempty"`
	// ModifiedByEmpId holds the value of the "ModifiedByEmpId" field.
	ModifiedByEmpId int64 `json:"ModifiedByEmpId,omitempty"`
	// ModifiedByDesignantion holds the value of the "ModifiedByDesignantion" field.
	ModifiedByDesignantion string `json:"ModifiedByDesignantion,omitempty"`
	// ModifiedDate holds the value of the "ModifiedDate" field.
	ModifiedDate time.Time `json:"ModifiedDate,omitempty"`
	// DeletedBy holds the value of the "DeletedBy" field.
	DeletedBy string `json:"DeletedBy,omitempty"`
	// Deletedbyid holds the value of the "Deletedbyid" field.
	Deletedbyid string `json:"Deletedbyid,omitempty"`
	// NewPasswordRequest holds the value of the "NewPasswordRequest" field.
	NewPasswordRequest bool `json:"NewPasswordRequest,omitempty"`
	// EventTime holds the value of the "EventTime" field.
	EventTime time.Time `json:"EventTime,omitempty"`
	// UUID holds the value of the "UUID" field.
	UUID int64 `json:"UUID,omitempty"`
	// Updatedby holds the value of the "Updatedby" field.
	Updatedby string `json:"Updatedby,omitempty"`
	// UpdatedDate holds the value of the "updatedDate" field.
	UpdatedDate time.Time `json:"updatedDate,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AdminMasterQuery when eager-loading is set.
	Edges        AdminMasterEdges `json:"edges"`
	selectValues sql.SelectValues
}

// AdminMasterEdges holds the relations/edges for other nodes in the graph.
type AdminMasterEdges struct {
	// LogData holds the value of the LogData edge.
	LogData []*Logs `json:"LogData,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// LogDataOrErr returns the LogData value or an error if the edge
// was not loaded in eager-loading.
func (e AdminMasterEdges) LogDataOrErr() ([]*Logs, error) {
	if e.loadedTypes[0] {
		return e.LogData, nil
	}
	return nil, &NotLoadedError{edge: "LogData"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AdminMaster) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case adminmaster.FieldNewPasswordRequest:
			values[i] = new(sql.NullBool)
		case adminmaster.FieldID, adminmaster.FieldEmployeeId, adminmaster.FieldRoleUserCode, adminmaster.FieldFacilityIDUniqueid, adminmaster.FieldOTP, adminmaster.FieldCreatedById, adminmaster.FieldCreatedByEmpId, adminmaster.FieldDeletedById, adminmaster.FieldDeletedByEmpId, adminmaster.FieldModifiedById, adminmaster.FieldModifiedByEmpId, adminmaster.FieldUUID:
			values[i] = new(sql.NullInt64)
		case adminmaster.FieldEmployeeName, adminmaster.FieldDesignation, adminmaster.FieldRoleUserDescription, adminmaster.FieldMobile, adminmaster.FieldEmailID, adminmaster.FieldUserName, adminmaster.FieldPassword, adminmaster.FieldFacilityID, adminmaster.FieldAuthorityFacilityName, adminmaster.FieldFacilityType, adminmaster.FieldReportingOfficeFacilityId, adminmaster.FieldReportingOfficeFacilityName, adminmaster.FieldCircleOfficeFacilityId, adminmaster.FieldCircleOfficeName, adminmaster.FieldUidToken, adminmaster.FieldStatuss, adminmaster.FieldOTPRemarks, adminmaster.FieldCreatedByUserName, adminmaster.FieldCreatedByDesignation, adminmaster.FieldDeletedByUserName, adminmaster.FieldDeletedByDesignation, adminmaster.FieldModifiedByUserName, adminmaster.FieldModifiedByDesignantion, adminmaster.FieldDeletedBy, adminmaster.FieldDeletedbyid, adminmaster.FieldUpdatedby:
			values[i] = new(sql.NullString)
		case adminmaster.FieldOTPSavedTime, adminmaster.FieldOTPTriggeredTime, adminmaster.FieldOTPExpiryTime, adminmaster.FieldCreatedDate, adminmaster.FieldDeletedDate, adminmaster.FieldModifiedDate, adminmaster.FieldEventTime, adminmaster.FieldUpdatedDate:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AdminMaster fields.
func (am *AdminMaster) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case adminmaster.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			am.ID = int64(value.Int64)
		case adminmaster.FieldEmployeeId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field EmployeeId", values[i])
			} else if value.Valid {
				am.EmployeeId = value.Int64
			}
		case adminmaster.FieldEmployeeName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field EmployeeName", values[i])
			} else if value.Valid {
				am.EmployeeName = value.String
			}
		case adminmaster.FieldDesignation:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Designation", values[i])
			} else if value.Valid {
				am.Designation = value.String
			}
		case adminmaster.FieldRoleUserCode:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field RoleUserCode", values[i])
			} else if value.Valid {
				am.RoleUserCode = int32(value.Int64)
			}
		case adminmaster.FieldRoleUserDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field RoleUserDescription", values[i])
			} else if value.Valid {
				am.RoleUserDescription = value.String
			}
		case adminmaster.FieldMobile:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Mobile", values[i])
			} else if value.Valid {
				am.Mobile = value.String
			}
		case adminmaster.FieldEmailID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field EmailID", values[i])
			} else if value.Valid {
				am.EmailID = value.String
			}
		case adminmaster.FieldUserName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field UserName", values[i])
			} else if value.Valid {
				am.UserName = value.String
			}
		case adminmaster.FieldPassword:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Password", values[i])
			} else if value.Valid {
				am.Password = value.String
			}
		case adminmaster.FieldFacilityIDUniqueid:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field FacilityIDUniqueid", values[i])
			} else if value.Valid {
				am.FacilityIDUniqueid = value.Int64
			}
		case adminmaster.FieldFacilityID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field FacilityID", values[i])
			} else if value.Valid {
				am.FacilityID = value.String
			}
		case adminmaster.FieldAuthorityFacilityName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field AuthorityFacilityName", values[i])
			} else if value.Valid {
				am.AuthorityFacilityName = value.String
			}
		case adminmaster.FieldFacilityType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field FacilityType", values[i])
			} else if value.Valid {
				am.FacilityType = value.String
			}
		case adminmaster.FieldReportingOfficeFacilityId:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ReportingOfficeFacilityId", values[i])
			} else if value.Valid {
				am.ReportingOfficeFacilityId = value.String
			}
		case adminmaster.FieldReportingOfficeFacilityName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ReportingOfficeFacilityName", values[i])
			} else if value.Valid {
				am.ReportingOfficeFacilityName = value.String
			}
		case adminmaster.FieldCircleOfficeFacilityId:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field CircleOfficeFacilityId", values[i])
			} else if value.Valid {
				am.CircleOfficeFacilityId = value.String
			}
		case adminmaster.FieldCircleOfficeName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field CircleOfficeName", values[i])
			} else if value.Valid {
				am.CircleOfficeName = value.String
			}
		case adminmaster.FieldUidToken:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field UidToken", values[i])
			} else if value.Valid {
				am.UidToken = value.String
			}
		case adminmaster.FieldStatuss:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Statuss", values[i])
			} else if value.Valid {
				am.Statuss = value.String
			}
		case adminmaster.FieldOTP:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field OTP", values[i])
			} else if value.Valid {
				am.OTP = int32(value.Int64)
			}
		case adminmaster.FieldOTPSavedTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field OTPSavedTime", values[i])
			} else if value.Valid {
				am.OTPSavedTime = value.Time
			}
		case adminmaster.FieldOTPTriggeredTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field OTPTriggeredTime", values[i])
			} else if value.Valid {
				am.OTPTriggeredTime = value.Time
			}
		case adminmaster.FieldOTPExpiryTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field OTPExpiryTime", values[i])
			} else if value.Valid {
				am.OTPExpiryTime = value.Time
			}
		case adminmaster.FieldOTPRemarks:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field OTPRemarks", values[i])
			} else if value.Valid {
				am.OTPRemarks = value.String
			}
		case adminmaster.FieldCreatedById:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field CreatedById", values[i])
			} else if value.Valid {
				am.CreatedById = value.Int64
			}
		case adminmaster.FieldCreatedByUserName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field CreatedByUserName", values[i])
			} else if value.Valid {
				am.CreatedByUserName = value.String
			}
		case adminmaster.FieldCreatedByEmpId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field CreatedByEmpId", values[i])
			} else if value.Valid {
				am.CreatedByEmpId = value.Int64
			}
		case adminmaster.FieldCreatedByDesignation:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field CreatedByDesignation", values[i])
			} else if value.Valid {
				am.CreatedByDesignation = value.String
			}
		case adminmaster.FieldCreatedDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field CreatedDate", values[i])
			} else if value.Valid {
				am.CreatedDate = value.Time
			}
		case adminmaster.FieldDeletedById:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field DeletedById", values[i])
			} else if value.Valid {
				am.DeletedById = value.Int64
			}
		case adminmaster.FieldDeletedByUserName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field DeletedByUserName", values[i])
			} else if value.Valid {
				am.DeletedByUserName = value.String
			}
		case adminmaster.FieldDeletedByEmpId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field DeletedByEmpId", values[i])
			} else if value.Valid {
				am.DeletedByEmpId = value.Int64
			}
		case adminmaster.FieldDeletedByDesignation:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field DeletedByDesignation", values[i])
			} else if value.Valid {
				am.DeletedByDesignation = value.String
			}
		case adminmaster.FieldDeletedDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field DeletedDate", values[i])
			} else if value.Valid {
				am.DeletedDate = value.Time
			}
		case adminmaster.FieldModifiedById:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field ModifiedById", values[i])
			} else if value.Valid {
				am.ModifiedById = int(value.Int64)
			}
		case adminmaster.FieldModifiedByUserName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ModifiedByUserName", values[i])
			} else if value.Valid {
				am.ModifiedByUserName = value.String
			}
		case adminmaster.FieldModifiedByEmpId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field ModifiedByEmpId", values[i])
			} else if value.Valid {
				am.ModifiedByEmpId = value.Int64
			}
		case adminmaster.FieldModifiedByDesignantion:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ModifiedByDesignantion", values[i])
			} else if value.Valid {
				am.ModifiedByDesignantion = value.String
			}
		case adminmaster.FieldModifiedDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field ModifiedDate", values[i])
			} else if value.Valid {
				am.ModifiedDate = value.Time
			}
		case adminmaster.FieldDeletedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field DeletedBy", values[i])
			} else if value.Valid {
				am.DeletedBy = value.String
			}
		case adminmaster.FieldDeletedbyid:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Deletedbyid", values[i])
			} else if value.Valid {
				am.Deletedbyid = value.String
			}
		case adminmaster.FieldNewPasswordRequest:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field NewPasswordRequest", values[i])
			} else if value.Valid {
				am.NewPasswordRequest = value.Bool
			}
		case adminmaster.FieldEventTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field EventTime", values[i])
			} else if value.Valid {
				am.EventTime = value.Time
			}
		case adminmaster.FieldUUID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field UUID", values[i])
			} else if value.Valid {
				am.UUID = value.Int64
			}
		case adminmaster.FieldUpdatedby:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Updatedby", values[i])
			} else if value.Valid {
				am.Updatedby = value.String
			}
		case adminmaster.FieldUpdatedDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updatedDate", values[i])
			} else if value.Valid {
				am.UpdatedDate = value.Time
			}
		default:
			am.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the AdminMaster.
// This includes values selected through modifiers, order, etc.
func (am *AdminMaster) Value(name string) (ent.Value, error) {
	return am.selectValues.Get(name)
}

// QueryLogData queries the "LogData" edge of the AdminMaster entity.
func (am *AdminMaster) QueryLogData() *LogsQuery {
	return NewAdminMasterClient(am.config).QueryLogData(am)
}

// Update returns a builder for updating this AdminMaster.
// Note that you need to call AdminMaster.Unwrap() before calling this method if this AdminMaster
// was returned from a transaction, and the transaction was committed or rolled back.
func (am *AdminMaster) Update() *AdminMasterUpdateOne {
	return NewAdminMasterClient(am.config).UpdateOne(am)
}

// Unwrap unwraps the AdminMaster entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (am *AdminMaster) Unwrap() *AdminMaster {
	_tx, ok := am.config.driver.(*txDriver)
	if !ok {
		panic("ent: AdminMaster is not a transactional entity")
	}
	am.config.driver = _tx.drv
	return am
}

// String implements the fmt.Stringer.
func (am *AdminMaster) String() string {
	var builder strings.Builder
	builder.WriteString("AdminMaster(")
	builder.WriteString(fmt.Sprintf("id=%v, ", am.ID))
	builder.WriteString("EmployeeId=")
	builder.WriteString(fmt.Sprintf("%v", am.EmployeeId))
	builder.WriteString(", ")
	builder.WriteString("EmployeeName=")
	builder.WriteString(am.EmployeeName)
	builder.WriteString(", ")
	builder.WriteString("Designation=")
	builder.WriteString(am.Designation)
	builder.WriteString(", ")
	builder.WriteString("RoleUserCode=")
	builder.WriteString(fmt.Sprintf("%v", am.RoleUserCode))
	builder.WriteString(", ")
	builder.WriteString("RoleUserDescription=")
	builder.WriteString(am.RoleUserDescription)
	builder.WriteString(", ")
	builder.WriteString("Mobile=")
	builder.WriteString(am.Mobile)
	builder.WriteString(", ")
	builder.WriteString("EmailID=")
	builder.WriteString(am.EmailID)
	builder.WriteString(", ")
	builder.WriteString("UserName=")
	builder.WriteString(am.UserName)
	builder.WriteString(", ")
	builder.WriteString("Password=")
	builder.WriteString(am.Password)
	builder.WriteString(", ")
	builder.WriteString("FacilityIDUniqueid=")
	builder.WriteString(fmt.Sprintf("%v", am.FacilityIDUniqueid))
	builder.WriteString(", ")
	builder.WriteString("FacilityID=")
	builder.WriteString(am.FacilityID)
	builder.WriteString(", ")
	builder.WriteString("AuthorityFacilityName=")
	builder.WriteString(am.AuthorityFacilityName)
	builder.WriteString(", ")
	builder.WriteString("FacilityType=")
	builder.WriteString(am.FacilityType)
	builder.WriteString(", ")
	builder.WriteString("ReportingOfficeFacilityId=")
	builder.WriteString(am.ReportingOfficeFacilityId)
	builder.WriteString(", ")
	builder.WriteString("ReportingOfficeFacilityName=")
	builder.WriteString(am.ReportingOfficeFacilityName)
	builder.WriteString(", ")
	builder.WriteString("CircleOfficeFacilityId=")
	builder.WriteString(am.CircleOfficeFacilityId)
	builder.WriteString(", ")
	builder.WriteString("CircleOfficeName=")
	builder.WriteString(am.CircleOfficeName)
	builder.WriteString(", ")
	builder.WriteString("UidToken=")
	builder.WriteString(am.UidToken)
	builder.WriteString(", ")
	builder.WriteString("Statuss=")
	builder.WriteString(am.Statuss)
	builder.WriteString(", ")
	builder.WriteString("OTP=")
	builder.WriteString(fmt.Sprintf("%v", am.OTP))
	builder.WriteString(", ")
	builder.WriteString("OTPSavedTime=")
	builder.WriteString(am.OTPSavedTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("OTPTriggeredTime=")
	builder.WriteString(am.OTPTriggeredTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("OTPExpiryTime=")
	builder.WriteString(am.OTPExpiryTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("OTPRemarks=")
	builder.WriteString(am.OTPRemarks)
	builder.WriteString(", ")
	builder.WriteString("CreatedById=")
	builder.WriteString(fmt.Sprintf("%v", am.CreatedById))
	builder.WriteString(", ")
	builder.WriteString("CreatedByUserName=")
	builder.WriteString(am.CreatedByUserName)
	builder.WriteString(", ")
	builder.WriteString("CreatedByEmpId=")
	builder.WriteString(fmt.Sprintf("%v", am.CreatedByEmpId))
	builder.WriteString(", ")
	builder.WriteString("CreatedByDesignation=")
	builder.WriteString(am.CreatedByDesignation)
	builder.WriteString(", ")
	builder.WriteString("CreatedDate=")
	builder.WriteString(am.CreatedDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("DeletedById=")
	builder.WriteString(fmt.Sprintf("%v", am.DeletedById))
	builder.WriteString(", ")
	builder.WriteString("DeletedByUserName=")
	builder.WriteString(am.DeletedByUserName)
	builder.WriteString(", ")
	builder.WriteString("DeletedByEmpId=")
	builder.WriteString(fmt.Sprintf("%v", am.DeletedByEmpId))
	builder.WriteString(", ")
	builder.WriteString("DeletedByDesignation=")
	builder.WriteString(am.DeletedByDesignation)
	builder.WriteString(", ")
	builder.WriteString("DeletedDate=")
	builder.WriteString(am.DeletedDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("ModifiedById=")
	builder.WriteString(fmt.Sprintf("%v", am.ModifiedById))
	builder.WriteString(", ")
	builder.WriteString("ModifiedByUserName=")
	builder.WriteString(am.ModifiedByUserName)
	builder.WriteString(", ")
	builder.WriteString("ModifiedByEmpId=")
	builder.WriteString(fmt.Sprintf("%v", am.ModifiedByEmpId))
	builder.WriteString(", ")
	builder.WriteString("ModifiedByDesignantion=")
	builder.WriteString(am.ModifiedByDesignantion)
	builder.WriteString(", ")
	builder.WriteString("ModifiedDate=")
	builder.WriteString(am.ModifiedDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("DeletedBy=")
	builder.WriteString(am.DeletedBy)
	builder.WriteString(", ")
	builder.WriteString("Deletedbyid=")
	builder.WriteString(am.Deletedbyid)
	builder.WriteString(", ")
	builder.WriteString("NewPasswordRequest=")
	builder.WriteString(fmt.Sprintf("%v", am.NewPasswordRequest))
	builder.WriteString(", ")
	builder.WriteString("EventTime=")
	builder.WriteString(am.EventTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("UUID=")
	builder.WriteString(fmt.Sprintf("%v", am.UUID))
	builder.WriteString(", ")
	builder.WriteString("Updatedby=")
	builder.WriteString(am.Updatedby)
	builder.WriteString(", ")
	builder.WriteString("updatedDate=")
	builder.WriteString(am.UpdatedDate.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// AdminMasters is a parsable slice of AdminMaster.
type AdminMasters []*AdminMaster
