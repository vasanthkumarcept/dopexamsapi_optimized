// Code generated by ent, DO NOT EDIT.

package examtype

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the examtype type in the database.
	Label = "exam_type"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "ExamTypeCode"
	// FieldExamType holds the string denoting the examtype field in the database.
	FieldExamType = "exam_type"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldExamCode holds the string denoting the examcode field in the database.
	FieldExamCode = "exam_code"
	// EdgeExam holds the string denoting the exam edge name in mutations.
	EdgeExam = "exam"
	// ExamFieldID holds the string denoting the ID field of the Exam.
	ExamFieldID = "UniqueID"
	// Table holds the table name of the examtype in the database.
	Table = "ExamType"
	// ExamTable is the table that holds the exam relation/edge.
	ExamTable = "ExamType"
	// ExamInverseTable is the table name for the Exam entity.
	// It exists in this package in order to avoid circular dependency with the "exam" package.
	ExamInverseTable = "Exam"
	// ExamColumn is the table column denoting the exam relation/edge.
	ExamColumn = "exam_code"
)

// Columns holds all SQL columns for examtype fields.
var Columns = []string{
	FieldID,
	FieldExamType,
	FieldStatus,
	FieldExamCode,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the ExamType queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByExamType orders the results by the ExamType field.
func ByExamType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExamType, opts...).ToFunc()
}

// ByStatus orders the results by the Status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByExamCode orders the results by the ExamCode field.
func ByExamCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExamCode, opts...).ToFunc()
}

// ByExamField orders the results by exam field.
func ByExamField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newExamStep(), sql.OrderByField(field, opts...))
	}
}
func newExamStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ExamInverseTable, ExamFieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ExamTable, ExamColumn),
	)
}
