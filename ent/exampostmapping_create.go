// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"recruit/ent/exampostmapping"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ExamPostMappingCreate is the builder for creating a ExamPostMapping entity.
type ExamPostMappingCreate struct {
	config
	mutation *ExamPostMappingMutation
	hooks    []Hook
}

// SetExamCode sets the "ExamCode" field.
func (epmc *ExamPostMappingCreate) SetExamCode(i int64) *ExamPostMappingCreate {
	epmc.mutation.SetExamCode(i)
	return epmc
}

// SetNillableExamCode sets the "ExamCode" field if the given value is not nil.
func (epmc *ExamPostMappingCreate) SetNillableExamCode(i *int64) *ExamPostMappingCreate {
	if i != nil {
		epmc.SetExamCode(*i)
	}
	return epmc
}

// SetExamShortDescription sets the "ExamShortDescription" field.
func (epmc *ExamPostMappingCreate) SetExamShortDescription(s string) *ExamPostMappingCreate {
	epmc.mutation.SetExamShortDescription(s)
	return epmc
}

// SetNillableExamShortDescription sets the "ExamShortDescription" field if the given value is not nil.
func (epmc *ExamPostMappingCreate) SetNillableExamShortDescription(s *string) *ExamPostMappingCreate {
	if s != nil {
		epmc.SetExamShortDescription(*s)
	}
	return epmc
}

// SetPostType sets the "PostType" field.
func (epmc *ExamPostMappingCreate) SetPostType(i int) *ExamPostMappingCreate {
	epmc.mutation.SetPostType(i)
	return epmc
}

// SetNillablePostType sets the "PostType" field if the given value is not nil.
func (epmc *ExamPostMappingCreate) SetNillablePostType(i *int) *ExamPostMappingCreate {
	if i != nil {
		epmc.SetPostType(*i)
	}
	return epmc
}

// SetPostTypeDescription sets the "PostTypeDescription" field.
func (epmc *ExamPostMappingCreate) SetPostTypeDescription(s string) *ExamPostMappingCreate {
	epmc.mutation.SetPostTypeDescription(s)
	return epmc
}

// SetNillablePostTypeDescription sets the "PostTypeDescription" field if the given value is not nil.
func (epmc *ExamPostMappingCreate) SetNillablePostTypeDescription(s *string) *ExamPostMappingCreate {
	if s != nil {
		epmc.SetPostTypeDescription(*s)
	}
	return epmc
}

// SetFromPostCode sets the "FromPostCode" field.
func (epmc *ExamPostMappingCreate) SetFromPostCode(s string) *ExamPostMappingCreate {
	epmc.mutation.SetFromPostCode(s)
	return epmc
}

// SetNillableFromPostCode sets the "FromPostCode" field if the given value is not nil.
func (epmc *ExamPostMappingCreate) SetNillableFromPostCode(s *string) *ExamPostMappingCreate {
	if s != nil {
		epmc.SetFromPostCode(*s)
	}
	return epmc
}

// SetFromPostDescription sets the "FromPostDescription" field.
func (epmc *ExamPostMappingCreate) SetFromPostDescription(s string) *ExamPostMappingCreate {
	epmc.mutation.SetFromPostDescription(s)
	return epmc
}

// SetNillableFromPostDescription sets the "FromPostDescription" field if the given value is not nil.
func (epmc *ExamPostMappingCreate) SetNillableFromPostDescription(s *string) *ExamPostMappingCreate {
	if s != nil {
		epmc.SetFromPostDescription(*s)
	}
	return epmc
}

// SetToPostCode sets the "ToPostCode" field.
func (epmc *ExamPostMappingCreate) SetToPostCode(s string) *ExamPostMappingCreate {
	epmc.mutation.SetToPostCode(s)
	return epmc
}

// SetNillableToPostCode sets the "ToPostCode" field if the given value is not nil.
func (epmc *ExamPostMappingCreate) SetNillableToPostCode(s *string) *ExamPostMappingCreate {
	if s != nil {
		epmc.SetToPostCode(*s)
	}
	return epmc
}

// SetToPostDescription sets the "ToPostDescription" field.
func (epmc *ExamPostMappingCreate) SetToPostDescription(s string) *ExamPostMappingCreate {
	epmc.mutation.SetToPostDescription(s)
	return epmc
}

// SetNillableToPostDescription sets the "ToPostDescription" field if the given value is not nil.
func (epmc *ExamPostMappingCreate) SetNillableToPostDescription(s *string) *ExamPostMappingCreate {
	if s != nil {
		epmc.SetToPostDescription(*s)
	}
	return epmc
}

// SetAgeCriteria sets the "AgeCriteria" field.
func (epmc *ExamPostMappingCreate) SetAgeCriteria(i int) *ExamPostMappingCreate {
	epmc.mutation.SetAgeCriteria(i)
	return epmc
}

// SetNillableAgeCriteria sets the "AgeCriteria" field if the given value is not nil.
func (epmc *ExamPostMappingCreate) SetNillableAgeCriteria(i *int) *ExamPostMappingCreate {
	if i != nil {
		epmc.SetAgeCriteria(*i)
	}
	return epmc
}

// SetServiceCriteria sets the "ServiceCriteria" field.
func (epmc *ExamPostMappingCreate) SetServiceCriteria(i int) *ExamPostMappingCreate {
	epmc.mutation.SetServiceCriteria(i)
	return epmc
}

// SetNillableServiceCriteria sets the "ServiceCriteria" field if the given value is not nil.
func (epmc *ExamPostMappingCreate) SetNillableServiceCriteria(i *int) *ExamPostMappingCreate {
	if i != nil {
		epmc.SetServiceCriteria(*i)
	}
	return epmc
}

// SetEducationCode sets the "EducationCode" field.
func (epmc *ExamPostMappingCreate) SetEducationCode(i int32) *ExamPostMappingCreate {
	epmc.mutation.SetEducationCode(i)
	return epmc
}

// SetNillableEducationCode sets the "EducationCode" field if the given value is not nil.
func (epmc *ExamPostMappingCreate) SetNillableEducationCode(i *int32) *ExamPostMappingCreate {
	if i != nil {
		epmc.SetEducationCode(*i)
	}
	return epmc
}

// SetEducationDescription sets the "EducationDescription" field.
func (epmc *ExamPostMappingCreate) SetEducationDescription(s string) *ExamPostMappingCreate {
	epmc.mutation.SetEducationDescription(s)
	return epmc
}

// SetNillableEducationDescription sets the "EducationDescription" field if the given value is not nil.
func (epmc *ExamPostMappingCreate) SetNillableEducationDescription(s *string) *ExamPostMappingCreate {
	if s != nil {
		epmc.SetEducationDescription(*s)
	}
	return epmc
}

// SetOrderNumber sets the "OrderNumber" field.
func (epmc *ExamPostMappingCreate) SetOrderNumber(s string) *ExamPostMappingCreate {
	epmc.mutation.SetOrderNumber(s)
	return epmc
}

// SetNillableOrderNumber sets the "OrderNumber" field if the given value is not nil.
func (epmc *ExamPostMappingCreate) SetNillableOrderNumber(s *string) *ExamPostMappingCreate {
	if s != nil {
		epmc.SetOrderNumber(*s)
	}
	return epmc
}

// SetCreatedById sets the "CreatedById" field.
func (epmc *ExamPostMappingCreate) SetCreatedById(i int64) *ExamPostMappingCreate {
	epmc.mutation.SetCreatedById(i)
	return epmc
}

// SetNillableCreatedById sets the "CreatedById" field if the given value is not nil.
func (epmc *ExamPostMappingCreate) SetNillableCreatedById(i *int64) *ExamPostMappingCreate {
	if i != nil {
		epmc.SetCreatedById(*i)
	}
	return epmc
}

// SetCreatedByUserName sets the "CreatedByUserName" field.
func (epmc *ExamPostMappingCreate) SetCreatedByUserName(s string) *ExamPostMappingCreate {
	epmc.mutation.SetCreatedByUserName(s)
	return epmc
}

// SetNillableCreatedByUserName sets the "CreatedByUserName" field if the given value is not nil.
func (epmc *ExamPostMappingCreate) SetNillableCreatedByUserName(s *string) *ExamPostMappingCreate {
	if s != nil {
		epmc.SetCreatedByUserName(*s)
	}
	return epmc
}

// SetCreatedByEmployeeId sets the "CreatedByEmployeeId" field.
func (epmc *ExamPostMappingCreate) SetCreatedByEmployeeId(s string) *ExamPostMappingCreate {
	epmc.mutation.SetCreatedByEmployeeId(s)
	return epmc
}

// SetNillableCreatedByEmployeeId sets the "CreatedByEmployeeId" field if the given value is not nil.
func (epmc *ExamPostMappingCreate) SetNillableCreatedByEmployeeId(s *string) *ExamPostMappingCreate {
	if s != nil {
		epmc.SetCreatedByEmployeeId(*s)
	}
	return epmc
}

// SetCreatedByDesignation sets the "CreatedByDesignation" field.
func (epmc *ExamPostMappingCreate) SetCreatedByDesignation(s string) *ExamPostMappingCreate {
	epmc.mutation.SetCreatedByDesignation(s)
	return epmc
}

// SetNillableCreatedByDesignation sets the "CreatedByDesignation" field if the given value is not nil.
func (epmc *ExamPostMappingCreate) SetNillableCreatedByDesignation(s *string) *ExamPostMappingCreate {
	if s != nil {
		epmc.SetCreatedByDesignation(*s)
	}
	return epmc
}

// SetCreatedDate sets the "CreatedDate" field.
func (epmc *ExamPostMappingCreate) SetCreatedDate(s string) *ExamPostMappingCreate {
	epmc.mutation.SetCreatedDate(s)
	return epmc
}

// SetNillableCreatedDate sets the "CreatedDate" field if the given value is not nil.
func (epmc *ExamPostMappingCreate) SetNillableCreatedDate(s *string) *ExamPostMappingCreate {
	if s != nil {
		epmc.SetCreatedDate(*s)
	}
	return epmc
}

// SetVerifiedById sets the "VerifiedById" field.
func (epmc *ExamPostMappingCreate) SetVerifiedById(i int64) *ExamPostMappingCreate {
	epmc.mutation.SetVerifiedById(i)
	return epmc
}

// SetNillableVerifiedById sets the "VerifiedById" field if the given value is not nil.
func (epmc *ExamPostMappingCreate) SetNillableVerifiedById(i *int64) *ExamPostMappingCreate {
	if i != nil {
		epmc.SetVerifiedById(*i)
	}
	return epmc
}

// SetVerifiedByUserName sets the "VerifiedByUserName" field.
func (epmc *ExamPostMappingCreate) SetVerifiedByUserName(s string) *ExamPostMappingCreate {
	epmc.mutation.SetVerifiedByUserName(s)
	return epmc
}

// SetNillableVerifiedByUserName sets the "VerifiedByUserName" field if the given value is not nil.
func (epmc *ExamPostMappingCreate) SetNillableVerifiedByUserName(s *string) *ExamPostMappingCreate {
	if s != nil {
		epmc.SetVerifiedByUserName(*s)
	}
	return epmc
}

// SetVerifiedByEmployeeId sets the "VerifiedByEmployeeId" field.
func (epmc *ExamPostMappingCreate) SetVerifiedByEmployeeId(s string) *ExamPostMappingCreate {
	epmc.mutation.SetVerifiedByEmployeeId(s)
	return epmc
}

// SetNillableVerifiedByEmployeeId sets the "VerifiedByEmployeeId" field if the given value is not nil.
func (epmc *ExamPostMappingCreate) SetNillableVerifiedByEmployeeId(s *string) *ExamPostMappingCreate {
	if s != nil {
		epmc.SetVerifiedByEmployeeId(*s)
	}
	return epmc
}

// SetVerifiedByDesignation sets the "VerifiedByDesignation" field.
func (epmc *ExamPostMappingCreate) SetVerifiedByDesignation(s string) *ExamPostMappingCreate {
	epmc.mutation.SetVerifiedByDesignation(s)
	return epmc
}

// SetNillableVerifiedByDesignation sets the "VerifiedByDesignation" field if the given value is not nil.
func (epmc *ExamPostMappingCreate) SetNillableVerifiedByDesignation(s *string) *ExamPostMappingCreate {
	if s != nil {
		epmc.SetVerifiedByDesignation(*s)
	}
	return epmc
}

// SetVerifiedDate sets the "VerifiedDate" field.
func (epmc *ExamPostMappingCreate) SetVerifiedDate(s string) *ExamPostMappingCreate {
	epmc.mutation.SetVerifiedDate(s)
	return epmc
}

// SetNillableVerifiedDate sets the "VerifiedDate" field if the given value is not nil.
func (epmc *ExamPostMappingCreate) SetNillableVerifiedDate(s *string) *ExamPostMappingCreate {
	if s != nil {
		epmc.SetVerifiedDate(*s)
	}
	return epmc
}

// SetStatus sets the "Status" field.
func (epmc *ExamPostMappingCreate) SetStatus(s string) *ExamPostMappingCreate {
	epmc.mutation.SetStatus(s)
	return epmc
}

// SetNillableStatus sets the "Status" field if the given value is not nil.
func (epmc *ExamPostMappingCreate) SetNillableStatus(s *string) *ExamPostMappingCreate {
	if s != nil {
		epmc.SetStatus(*s)
	}
	return epmc
}

// SetDeletedById sets the "DeletedById" field.
func (epmc *ExamPostMappingCreate) SetDeletedById(i int64) *ExamPostMappingCreate {
	epmc.mutation.SetDeletedById(i)
	return epmc
}

// SetNillableDeletedById sets the "DeletedById" field if the given value is not nil.
func (epmc *ExamPostMappingCreate) SetNillableDeletedById(i *int64) *ExamPostMappingCreate {
	if i != nil {
		epmc.SetDeletedById(*i)
	}
	return epmc
}

// SetDeletedByUserName sets the "DeletedByUserName" field.
func (epmc *ExamPostMappingCreate) SetDeletedByUserName(s string) *ExamPostMappingCreate {
	epmc.mutation.SetDeletedByUserName(s)
	return epmc
}

// SetNillableDeletedByUserName sets the "DeletedByUserName" field if the given value is not nil.
func (epmc *ExamPostMappingCreate) SetNillableDeletedByUserName(s *string) *ExamPostMappingCreate {
	if s != nil {
		epmc.SetDeletedByUserName(*s)
	}
	return epmc
}

// SetDeletedByEmployeeId sets the "DeletedByEmployeeId" field.
func (epmc *ExamPostMappingCreate) SetDeletedByEmployeeId(s string) *ExamPostMappingCreate {
	epmc.mutation.SetDeletedByEmployeeId(s)
	return epmc
}

// SetNillableDeletedByEmployeeId sets the "DeletedByEmployeeId" field if the given value is not nil.
func (epmc *ExamPostMappingCreate) SetNillableDeletedByEmployeeId(s *string) *ExamPostMappingCreate {
	if s != nil {
		epmc.SetDeletedByEmployeeId(*s)
	}
	return epmc
}

// SetDeletedByDesignation sets the "DeletedByDesignation" field.
func (epmc *ExamPostMappingCreate) SetDeletedByDesignation(s string) *ExamPostMappingCreate {
	epmc.mutation.SetDeletedByDesignation(s)
	return epmc
}

// SetNillableDeletedByDesignation sets the "DeletedByDesignation" field if the given value is not nil.
func (epmc *ExamPostMappingCreate) SetNillableDeletedByDesignation(s *string) *ExamPostMappingCreate {
	if s != nil {
		epmc.SetDeletedByDesignation(*s)
	}
	return epmc
}

// SetDeletedDate sets the "DeletedDate" field.
func (epmc *ExamPostMappingCreate) SetDeletedDate(s string) *ExamPostMappingCreate {
	epmc.mutation.SetDeletedDate(s)
	return epmc
}

// SetNillableDeletedDate sets the "DeletedDate" field if the given value is not nil.
func (epmc *ExamPostMappingCreate) SetNillableDeletedDate(s *string) *ExamPostMappingCreate {
	if s != nil {
		epmc.SetDeletedDate(*s)
	}
	return epmc
}

// SetID sets the "id" field.
func (epmc *ExamPostMappingCreate) SetID(i int) *ExamPostMappingCreate {
	epmc.mutation.SetID(i)
	return epmc
}

// Mutation returns the ExamPostMappingMutation object of the builder.
func (epmc *ExamPostMappingCreate) Mutation() *ExamPostMappingMutation {
	return epmc.mutation
}

// Save creates the ExamPostMapping in the database.
func (epmc *ExamPostMappingCreate) Save(ctx context.Context) (*ExamPostMapping, error) {
	return withHooks(ctx, epmc.sqlSave, epmc.mutation, epmc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (epmc *ExamPostMappingCreate) SaveX(ctx context.Context) *ExamPostMapping {
	v, err := epmc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (epmc *ExamPostMappingCreate) Exec(ctx context.Context) error {
	_, err := epmc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (epmc *ExamPostMappingCreate) ExecX(ctx context.Context) {
	if err := epmc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (epmc *ExamPostMappingCreate) check() error {
	return nil
}

func (epmc *ExamPostMappingCreate) sqlSave(ctx context.Context) (*ExamPostMapping, error) {
	if err := epmc.check(); err != nil {
		return nil, err
	}
	_node, _spec := epmc.createSpec()
	if err := sqlgraph.CreateNode(ctx, epmc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	epmc.mutation.id = &_node.ID
	epmc.mutation.done = true
	return _node, nil
}

func (epmc *ExamPostMappingCreate) createSpec() (*ExamPostMapping, *sqlgraph.CreateSpec) {
	var (
		_node = &ExamPostMapping{config: epmc.config}
		_spec = sqlgraph.NewCreateSpec(exampostmapping.Table, sqlgraph.NewFieldSpec(exampostmapping.FieldID, field.TypeInt))
	)
	if id, ok := epmc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := epmc.mutation.ExamCode(); ok {
		_spec.SetField(exampostmapping.FieldExamCode, field.TypeInt64, value)
		_node.ExamCode = value
	}
	if value, ok := epmc.mutation.ExamShortDescription(); ok {
		_spec.SetField(exampostmapping.FieldExamShortDescription, field.TypeString, value)
		_node.ExamShortDescription = value
	}
	if value, ok := epmc.mutation.PostType(); ok {
		_spec.SetField(exampostmapping.FieldPostType, field.TypeInt, value)
		_node.PostType = value
	}
	if value, ok := epmc.mutation.PostTypeDescription(); ok {
		_spec.SetField(exampostmapping.FieldPostTypeDescription, field.TypeString, value)
		_node.PostTypeDescription = value
	}
	if value, ok := epmc.mutation.FromPostCode(); ok {
		_spec.SetField(exampostmapping.FieldFromPostCode, field.TypeString, value)
		_node.FromPostCode = value
	}
	if value, ok := epmc.mutation.FromPostDescription(); ok {
		_spec.SetField(exampostmapping.FieldFromPostDescription, field.TypeString, value)
		_node.FromPostDescription = value
	}
	if value, ok := epmc.mutation.ToPostCode(); ok {
		_spec.SetField(exampostmapping.FieldToPostCode, field.TypeString, value)
		_node.ToPostCode = value
	}
	if value, ok := epmc.mutation.ToPostDescription(); ok {
		_spec.SetField(exampostmapping.FieldToPostDescription, field.TypeString, value)
		_node.ToPostDescription = value
	}
	if value, ok := epmc.mutation.AgeCriteria(); ok {
		_spec.SetField(exampostmapping.FieldAgeCriteria, field.TypeInt, value)
		_node.AgeCriteria = value
	}
	if value, ok := epmc.mutation.ServiceCriteria(); ok {
		_spec.SetField(exampostmapping.FieldServiceCriteria, field.TypeInt, value)
		_node.ServiceCriteria = value
	}
	if value, ok := epmc.mutation.EducationCode(); ok {
		_spec.SetField(exampostmapping.FieldEducationCode, field.TypeInt32, value)
		_node.EducationCode = value
	}
	if value, ok := epmc.mutation.EducationDescription(); ok {
		_spec.SetField(exampostmapping.FieldEducationDescription, field.TypeString, value)
		_node.EducationDescription = value
	}
	if value, ok := epmc.mutation.OrderNumber(); ok {
		_spec.SetField(exampostmapping.FieldOrderNumber, field.TypeString, value)
		_node.OrderNumber = value
	}
	if value, ok := epmc.mutation.CreatedById(); ok {
		_spec.SetField(exampostmapping.FieldCreatedById, field.TypeInt64, value)
		_node.CreatedById = value
	}
	if value, ok := epmc.mutation.CreatedByUserName(); ok {
		_spec.SetField(exampostmapping.FieldCreatedByUserName, field.TypeString, value)
		_node.CreatedByUserName = value
	}
	if value, ok := epmc.mutation.CreatedByEmployeeId(); ok {
		_spec.SetField(exampostmapping.FieldCreatedByEmployeeId, field.TypeString, value)
		_node.CreatedByEmployeeId = value
	}
	if value, ok := epmc.mutation.CreatedByDesignation(); ok {
		_spec.SetField(exampostmapping.FieldCreatedByDesignation, field.TypeString, value)
		_node.CreatedByDesignation = value
	}
	if value, ok := epmc.mutation.CreatedDate(); ok {
		_spec.SetField(exampostmapping.FieldCreatedDate, field.TypeString, value)
		_node.CreatedDate = value
	}
	if value, ok := epmc.mutation.VerifiedById(); ok {
		_spec.SetField(exampostmapping.FieldVerifiedById, field.TypeInt64, value)
		_node.VerifiedById = value
	}
	if value, ok := epmc.mutation.VerifiedByUserName(); ok {
		_spec.SetField(exampostmapping.FieldVerifiedByUserName, field.TypeString, value)
		_node.VerifiedByUserName = value
	}
	if value, ok := epmc.mutation.VerifiedByEmployeeId(); ok {
		_spec.SetField(exampostmapping.FieldVerifiedByEmployeeId, field.TypeString, value)
		_node.VerifiedByEmployeeId = value
	}
	if value, ok := epmc.mutation.VerifiedByDesignation(); ok {
		_spec.SetField(exampostmapping.FieldVerifiedByDesignation, field.TypeString, value)
		_node.VerifiedByDesignation = value
	}
	if value, ok := epmc.mutation.VerifiedDate(); ok {
		_spec.SetField(exampostmapping.FieldVerifiedDate, field.TypeString, value)
		_node.VerifiedDate = value
	}
	if value, ok := epmc.mutation.Status(); ok {
		_spec.SetField(exampostmapping.FieldStatus, field.TypeString, value)
		_node.Status = value
	}
	if value, ok := epmc.mutation.DeletedById(); ok {
		_spec.SetField(exampostmapping.FieldDeletedById, field.TypeInt64, value)
		_node.DeletedById = value
	}
	if value, ok := epmc.mutation.DeletedByUserName(); ok {
		_spec.SetField(exampostmapping.FieldDeletedByUserName, field.TypeString, value)
		_node.DeletedByUserName = value
	}
	if value, ok := epmc.mutation.DeletedByEmployeeId(); ok {
		_spec.SetField(exampostmapping.FieldDeletedByEmployeeId, field.TypeString, value)
		_node.DeletedByEmployeeId = value
	}
	if value, ok := epmc.mutation.DeletedByDesignation(); ok {
		_spec.SetField(exampostmapping.FieldDeletedByDesignation, field.TypeString, value)
		_node.DeletedByDesignation = value
	}
	if value, ok := epmc.mutation.DeletedDate(); ok {
		_spec.SetField(exampostmapping.FieldDeletedDate, field.TypeString, value)
		_node.DeletedDate = value
	}
	return _node, _spec
}

// ExamPostMappingCreateBulk is the builder for creating many ExamPostMapping entities in bulk.
type ExamPostMappingCreateBulk struct {
	config
	builders []*ExamPostMappingCreate
}

// Save creates the ExamPostMapping entities in the database.
func (epmcb *ExamPostMappingCreateBulk) Save(ctx context.Context) ([]*ExamPostMapping, error) {
	specs := make([]*sqlgraph.CreateSpec, len(epmcb.builders))
	nodes := make([]*ExamPostMapping, len(epmcb.builders))
	mutators := make([]Mutator, len(epmcb.builders))
	for i := range epmcb.builders {
		func(i int, root context.Context) {
			builder := epmcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ExamPostMappingMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, epmcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, epmcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, epmcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (epmcb *ExamPostMappingCreateBulk) SaveX(ctx context.Context) []*ExamPostMapping {
	v, err := epmcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (epmcb *ExamPostMappingCreateBulk) Exec(ctx context.Context) error {
	_, err := epmcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (epmcb *ExamPostMappingCreateBulk) ExecX(ctx context.Context) {
	if err := epmcb.Exec(ctx); err != nil {
		panic(err)
	}
}
