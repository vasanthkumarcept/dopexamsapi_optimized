// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"recruit/ent/division_choice_pm"
	"recruit/ent/exam_applications_gdspm"
	"recruit/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// DivisionChoicePMUpdate is the builder for updating Division_Choice_PM entities.
type DivisionChoicePMUpdate struct {
	config
	hooks    []Hook
	mutation *DivisionChoicePMMutation
}

// Where appends a list predicates to the DivisionChoicePMUpdate builder.
func (dcpu *DivisionChoicePMUpdate) Where(ps ...predicate.Division_Choice_PM) *DivisionChoicePMUpdate {
	dcpu.mutation.Where(ps...)
	return dcpu
}

// SetApplicationID sets the "ApplicationID" field.
func (dcpu *DivisionChoicePMUpdate) SetApplicationID(i int64) *DivisionChoicePMUpdate {
	dcpu.mutation.SetApplicationID(i)
	return dcpu
}

// SetNillableApplicationID sets the "ApplicationID" field if the given value is not nil.
func (dcpu *DivisionChoicePMUpdate) SetNillableApplicationID(i *int64) *DivisionChoicePMUpdate {
	if i != nil {
		dcpu.SetApplicationID(*i)
	}
	return dcpu
}

// ClearApplicationID clears the value of the "ApplicationID" field.
func (dcpu *DivisionChoicePMUpdate) ClearApplicationID() *DivisionChoicePMUpdate {
	dcpu.mutation.ClearApplicationID()
	return dcpu
}

// SetGroup sets the "Group" field.
func (dcpu *DivisionChoicePMUpdate) SetGroup(s string) *DivisionChoicePMUpdate {
	dcpu.mutation.SetGroup(s)
	return dcpu
}

// SetCadrePrefNo sets the "CadrePrefNo" field.
func (dcpu *DivisionChoicePMUpdate) SetCadrePrefNo(i int64) *DivisionChoicePMUpdate {
	dcpu.mutation.ResetCadrePrefNo()
	dcpu.mutation.SetCadrePrefNo(i)
	return dcpu
}

// AddCadrePrefNo adds i to the "CadrePrefNo" field.
func (dcpu *DivisionChoicePMUpdate) AddCadrePrefNo(i int64) *DivisionChoicePMUpdate {
	dcpu.mutation.AddCadrePrefNo(i)
	return dcpu
}

// SetCadre sets the "Cadre" field.
func (dcpu *DivisionChoicePMUpdate) SetCadre(s string) *DivisionChoicePMUpdate {
	dcpu.mutation.SetCadre(s)
	return dcpu
}

// SetPostPrefNo sets the "PostPrefNo" field.
func (dcpu *DivisionChoicePMUpdate) SetPostPrefNo(i int64) *DivisionChoicePMUpdate {
	dcpu.mutation.ResetPostPrefNo()
	dcpu.mutation.SetPostPrefNo(i)
	return dcpu
}

// AddPostPrefNo adds i to the "PostPrefNo" field.
func (dcpu *DivisionChoicePMUpdate) AddPostPrefNo(i int64) *DivisionChoicePMUpdate {
	dcpu.mutation.AddPostPrefNo(i)
	return dcpu
}

// SetPostingPrefValue sets the "PostingPrefValue" field.
func (dcpu *DivisionChoicePMUpdate) SetPostingPrefValue(s string) *DivisionChoicePMUpdate {
	dcpu.mutation.SetPostingPrefValue(s)
	return dcpu
}

// SetEmployeeID sets the "EmployeeID" field.
func (dcpu *DivisionChoicePMUpdate) SetEmployeeID(i int64) *DivisionChoicePMUpdate {
	dcpu.mutation.ResetEmployeeID()
	dcpu.mutation.SetEmployeeID(i)
	return dcpu
}

// SetNillableEmployeeID sets the "EmployeeID" field if the given value is not nil.
func (dcpu *DivisionChoicePMUpdate) SetNillableEmployeeID(i *int64) *DivisionChoicePMUpdate {
	if i != nil {
		dcpu.SetEmployeeID(*i)
	}
	return dcpu
}

// AddEmployeeID adds i to the "EmployeeID" field.
func (dcpu *DivisionChoicePMUpdate) AddEmployeeID(i int64) *DivisionChoicePMUpdate {
	dcpu.mutation.AddEmployeeID(i)
	return dcpu
}

// ClearEmployeeID clears the value of the "EmployeeID" field.
func (dcpu *DivisionChoicePMUpdate) ClearEmployeeID() *DivisionChoicePMUpdate {
	dcpu.mutation.ClearEmployeeID()
	return dcpu
}

// SetUpdatedAt sets the "UpdatedAt" field.
func (dcpu *DivisionChoicePMUpdate) SetUpdatedAt(t time.Time) *DivisionChoicePMUpdate {
	dcpu.mutation.SetUpdatedAt(t)
	return dcpu
}

// SetNillableUpdatedAt sets the "UpdatedAt" field if the given value is not nil.
func (dcpu *DivisionChoicePMUpdate) SetNillableUpdatedAt(t *time.Time) *DivisionChoicePMUpdate {
	if t != nil {
		dcpu.SetUpdatedAt(*t)
	}
	return dcpu
}

// ClearUpdatedAt clears the value of the "UpdatedAt" field.
func (dcpu *DivisionChoicePMUpdate) ClearUpdatedAt() *DivisionChoicePMUpdate {
	dcpu.mutation.ClearUpdatedAt()
	return dcpu
}

// SetUpdatedBy sets the "UpdatedBy" field.
func (dcpu *DivisionChoicePMUpdate) SetUpdatedBy(s string) *DivisionChoicePMUpdate {
	dcpu.mutation.SetUpdatedBy(s)
	return dcpu
}

// SetNillableUpdatedBy sets the "UpdatedBy" field if the given value is not nil.
func (dcpu *DivisionChoicePMUpdate) SetNillableUpdatedBy(s *string) *DivisionChoicePMUpdate {
	if s != nil {
		dcpu.SetUpdatedBy(*s)
	}
	return dcpu
}

// ClearUpdatedBy clears the value of the "UpdatedBy" field.
func (dcpu *DivisionChoicePMUpdate) ClearUpdatedBy() *DivisionChoicePMUpdate {
	dcpu.mutation.ClearUpdatedBy()
	return dcpu
}

// SetApplnGDSPMRefID sets the "ApplnGDSPM_Ref" edge to the Exam_Applications_GDSPM entity by ID.
func (dcpu *DivisionChoicePMUpdate) SetApplnGDSPMRefID(id int64) *DivisionChoicePMUpdate {
	dcpu.mutation.SetApplnGDSPMRefID(id)
	return dcpu
}

// SetNillableApplnGDSPMRefID sets the "ApplnGDSPM_Ref" edge to the Exam_Applications_GDSPM entity by ID if the given value is not nil.
func (dcpu *DivisionChoicePMUpdate) SetNillableApplnGDSPMRefID(id *int64) *DivisionChoicePMUpdate {
	if id != nil {
		dcpu = dcpu.SetApplnGDSPMRefID(*id)
	}
	return dcpu
}

// SetApplnGDSPMRef sets the "ApplnGDSPM_Ref" edge to the Exam_Applications_GDSPM entity.
func (dcpu *DivisionChoicePMUpdate) SetApplnGDSPMRef(e *Exam_Applications_GDSPM) *DivisionChoicePMUpdate {
	return dcpu.SetApplnGDSPMRefID(e.ID)
}

// Mutation returns the DivisionChoicePMMutation object of the builder.
func (dcpu *DivisionChoicePMUpdate) Mutation() *DivisionChoicePMMutation {
	return dcpu.mutation
}

// ClearApplnGDSPMRef clears the "ApplnGDSPM_Ref" edge to the Exam_Applications_GDSPM entity.
func (dcpu *DivisionChoicePMUpdate) ClearApplnGDSPMRef() *DivisionChoicePMUpdate {
	dcpu.mutation.ClearApplnGDSPMRef()
	return dcpu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (dcpu *DivisionChoicePMUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, dcpu.sqlSave, dcpu.mutation, dcpu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (dcpu *DivisionChoicePMUpdate) SaveX(ctx context.Context) int {
	affected, err := dcpu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (dcpu *DivisionChoicePMUpdate) Exec(ctx context.Context) error {
	_, err := dcpu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dcpu *DivisionChoicePMUpdate) ExecX(ctx context.Context) {
	if err := dcpu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (dcpu *DivisionChoicePMUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(division_choice_pm.Table, division_choice_pm.Columns, sqlgraph.NewFieldSpec(division_choice_pm.FieldID, field.TypeInt32))
	if ps := dcpu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := dcpu.mutation.Group(); ok {
		_spec.SetField(division_choice_pm.FieldGroup, field.TypeString, value)
	}
	if value, ok := dcpu.mutation.CadrePrefNo(); ok {
		_spec.SetField(division_choice_pm.FieldCadrePrefNo, field.TypeInt64, value)
	}
	if value, ok := dcpu.mutation.AddedCadrePrefNo(); ok {
		_spec.AddField(division_choice_pm.FieldCadrePrefNo, field.TypeInt64, value)
	}
	if value, ok := dcpu.mutation.Cadre(); ok {
		_spec.SetField(division_choice_pm.FieldCadre, field.TypeString, value)
	}
	if value, ok := dcpu.mutation.PostPrefNo(); ok {
		_spec.SetField(division_choice_pm.FieldPostPrefNo, field.TypeInt64, value)
	}
	if value, ok := dcpu.mutation.AddedPostPrefNo(); ok {
		_spec.AddField(division_choice_pm.FieldPostPrefNo, field.TypeInt64, value)
	}
	if value, ok := dcpu.mutation.PostingPrefValue(); ok {
		_spec.SetField(division_choice_pm.FieldPostingPrefValue, field.TypeString, value)
	}
	if value, ok := dcpu.mutation.EmployeeID(); ok {
		_spec.SetField(division_choice_pm.FieldEmployeeID, field.TypeInt64, value)
	}
	if value, ok := dcpu.mutation.AddedEmployeeID(); ok {
		_spec.AddField(division_choice_pm.FieldEmployeeID, field.TypeInt64, value)
	}
	if dcpu.mutation.EmployeeIDCleared() {
		_spec.ClearField(division_choice_pm.FieldEmployeeID, field.TypeInt64)
	}
	if value, ok := dcpu.mutation.UpdatedAt(); ok {
		_spec.SetField(division_choice_pm.FieldUpdatedAt, field.TypeTime, value)
	}
	if dcpu.mutation.UpdatedAtCleared() {
		_spec.ClearField(division_choice_pm.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := dcpu.mutation.UpdatedBy(); ok {
		_spec.SetField(division_choice_pm.FieldUpdatedBy, field.TypeString, value)
	}
	if dcpu.mutation.UpdatedByCleared() {
		_spec.ClearField(division_choice_pm.FieldUpdatedBy, field.TypeString)
	}
	if dcpu.mutation.ApplnGDSPMRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   division_choice_pm.ApplnGDSPMRefTable,
			Columns: []string{division_choice_pm.ApplnGDSPMRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_gdspm.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dcpu.mutation.ApplnGDSPMRefIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   division_choice_pm.ApplnGDSPMRefTable,
			Columns: []string{division_choice_pm.ApplnGDSPMRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_gdspm.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, dcpu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{division_choice_pm.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	dcpu.mutation.done = true
	return n, nil
}

// DivisionChoicePMUpdateOne is the builder for updating a single Division_Choice_PM entity.
type DivisionChoicePMUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DivisionChoicePMMutation
}

// SetApplicationID sets the "ApplicationID" field.
func (dcpuo *DivisionChoicePMUpdateOne) SetApplicationID(i int64) *DivisionChoicePMUpdateOne {
	dcpuo.mutation.SetApplicationID(i)
	return dcpuo
}

// SetNillableApplicationID sets the "ApplicationID" field if the given value is not nil.
func (dcpuo *DivisionChoicePMUpdateOne) SetNillableApplicationID(i *int64) *DivisionChoicePMUpdateOne {
	if i != nil {
		dcpuo.SetApplicationID(*i)
	}
	return dcpuo
}

// ClearApplicationID clears the value of the "ApplicationID" field.
func (dcpuo *DivisionChoicePMUpdateOne) ClearApplicationID() *DivisionChoicePMUpdateOne {
	dcpuo.mutation.ClearApplicationID()
	return dcpuo
}

// SetGroup sets the "Group" field.
func (dcpuo *DivisionChoicePMUpdateOne) SetGroup(s string) *DivisionChoicePMUpdateOne {
	dcpuo.mutation.SetGroup(s)
	return dcpuo
}

// SetCadrePrefNo sets the "CadrePrefNo" field.
func (dcpuo *DivisionChoicePMUpdateOne) SetCadrePrefNo(i int64) *DivisionChoicePMUpdateOne {
	dcpuo.mutation.ResetCadrePrefNo()
	dcpuo.mutation.SetCadrePrefNo(i)
	return dcpuo
}

// AddCadrePrefNo adds i to the "CadrePrefNo" field.
func (dcpuo *DivisionChoicePMUpdateOne) AddCadrePrefNo(i int64) *DivisionChoicePMUpdateOne {
	dcpuo.mutation.AddCadrePrefNo(i)
	return dcpuo
}

// SetCadre sets the "Cadre" field.
func (dcpuo *DivisionChoicePMUpdateOne) SetCadre(s string) *DivisionChoicePMUpdateOne {
	dcpuo.mutation.SetCadre(s)
	return dcpuo
}

// SetPostPrefNo sets the "PostPrefNo" field.
func (dcpuo *DivisionChoicePMUpdateOne) SetPostPrefNo(i int64) *DivisionChoicePMUpdateOne {
	dcpuo.mutation.ResetPostPrefNo()
	dcpuo.mutation.SetPostPrefNo(i)
	return dcpuo
}

// AddPostPrefNo adds i to the "PostPrefNo" field.
func (dcpuo *DivisionChoicePMUpdateOne) AddPostPrefNo(i int64) *DivisionChoicePMUpdateOne {
	dcpuo.mutation.AddPostPrefNo(i)
	return dcpuo
}

// SetPostingPrefValue sets the "PostingPrefValue" field.
func (dcpuo *DivisionChoicePMUpdateOne) SetPostingPrefValue(s string) *DivisionChoicePMUpdateOne {
	dcpuo.mutation.SetPostingPrefValue(s)
	return dcpuo
}

// SetEmployeeID sets the "EmployeeID" field.
func (dcpuo *DivisionChoicePMUpdateOne) SetEmployeeID(i int64) *DivisionChoicePMUpdateOne {
	dcpuo.mutation.ResetEmployeeID()
	dcpuo.mutation.SetEmployeeID(i)
	return dcpuo
}

// SetNillableEmployeeID sets the "EmployeeID" field if the given value is not nil.
func (dcpuo *DivisionChoicePMUpdateOne) SetNillableEmployeeID(i *int64) *DivisionChoicePMUpdateOne {
	if i != nil {
		dcpuo.SetEmployeeID(*i)
	}
	return dcpuo
}

// AddEmployeeID adds i to the "EmployeeID" field.
func (dcpuo *DivisionChoicePMUpdateOne) AddEmployeeID(i int64) *DivisionChoicePMUpdateOne {
	dcpuo.mutation.AddEmployeeID(i)
	return dcpuo
}

// ClearEmployeeID clears the value of the "EmployeeID" field.
func (dcpuo *DivisionChoicePMUpdateOne) ClearEmployeeID() *DivisionChoicePMUpdateOne {
	dcpuo.mutation.ClearEmployeeID()
	return dcpuo
}

// SetUpdatedAt sets the "UpdatedAt" field.
func (dcpuo *DivisionChoicePMUpdateOne) SetUpdatedAt(t time.Time) *DivisionChoicePMUpdateOne {
	dcpuo.mutation.SetUpdatedAt(t)
	return dcpuo
}

// SetNillableUpdatedAt sets the "UpdatedAt" field if the given value is not nil.
func (dcpuo *DivisionChoicePMUpdateOne) SetNillableUpdatedAt(t *time.Time) *DivisionChoicePMUpdateOne {
	if t != nil {
		dcpuo.SetUpdatedAt(*t)
	}
	return dcpuo
}

// ClearUpdatedAt clears the value of the "UpdatedAt" field.
func (dcpuo *DivisionChoicePMUpdateOne) ClearUpdatedAt() *DivisionChoicePMUpdateOne {
	dcpuo.mutation.ClearUpdatedAt()
	return dcpuo
}

// SetUpdatedBy sets the "UpdatedBy" field.
func (dcpuo *DivisionChoicePMUpdateOne) SetUpdatedBy(s string) *DivisionChoicePMUpdateOne {
	dcpuo.mutation.SetUpdatedBy(s)
	return dcpuo
}

// SetNillableUpdatedBy sets the "UpdatedBy" field if the given value is not nil.
func (dcpuo *DivisionChoicePMUpdateOne) SetNillableUpdatedBy(s *string) *DivisionChoicePMUpdateOne {
	if s != nil {
		dcpuo.SetUpdatedBy(*s)
	}
	return dcpuo
}

// ClearUpdatedBy clears the value of the "UpdatedBy" field.
func (dcpuo *DivisionChoicePMUpdateOne) ClearUpdatedBy() *DivisionChoicePMUpdateOne {
	dcpuo.mutation.ClearUpdatedBy()
	return dcpuo
}

// SetApplnGDSPMRefID sets the "ApplnGDSPM_Ref" edge to the Exam_Applications_GDSPM entity by ID.
func (dcpuo *DivisionChoicePMUpdateOne) SetApplnGDSPMRefID(id int64) *DivisionChoicePMUpdateOne {
	dcpuo.mutation.SetApplnGDSPMRefID(id)
	return dcpuo
}

// SetNillableApplnGDSPMRefID sets the "ApplnGDSPM_Ref" edge to the Exam_Applications_GDSPM entity by ID if the given value is not nil.
func (dcpuo *DivisionChoicePMUpdateOne) SetNillableApplnGDSPMRefID(id *int64) *DivisionChoicePMUpdateOne {
	if id != nil {
		dcpuo = dcpuo.SetApplnGDSPMRefID(*id)
	}
	return dcpuo
}

// SetApplnGDSPMRef sets the "ApplnGDSPM_Ref" edge to the Exam_Applications_GDSPM entity.
func (dcpuo *DivisionChoicePMUpdateOne) SetApplnGDSPMRef(e *Exam_Applications_GDSPM) *DivisionChoicePMUpdateOne {
	return dcpuo.SetApplnGDSPMRefID(e.ID)
}

// Mutation returns the DivisionChoicePMMutation object of the builder.
func (dcpuo *DivisionChoicePMUpdateOne) Mutation() *DivisionChoicePMMutation {
	return dcpuo.mutation
}

// ClearApplnGDSPMRef clears the "ApplnGDSPM_Ref" edge to the Exam_Applications_GDSPM entity.
func (dcpuo *DivisionChoicePMUpdateOne) ClearApplnGDSPMRef() *DivisionChoicePMUpdateOne {
	dcpuo.mutation.ClearApplnGDSPMRef()
	return dcpuo
}

// Where appends a list predicates to the DivisionChoicePMUpdate builder.
func (dcpuo *DivisionChoicePMUpdateOne) Where(ps ...predicate.Division_Choice_PM) *DivisionChoicePMUpdateOne {
	dcpuo.mutation.Where(ps...)
	return dcpuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (dcpuo *DivisionChoicePMUpdateOne) Select(field string, fields ...string) *DivisionChoicePMUpdateOne {
	dcpuo.fields = append([]string{field}, fields...)
	return dcpuo
}

// Save executes the query and returns the updated Division_Choice_PM entity.
func (dcpuo *DivisionChoicePMUpdateOne) Save(ctx context.Context) (*Division_Choice_PM, error) {
	return withHooks(ctx, dcpuo.sqlSave, dcpuo.mutation, dcpuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (dcpuo *DivisionChoicePMUpdateOne) SaveX(ctx context.Context) *Division_Choice_PM {
	node, err := dcpuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (dcpuo *DivisionChoicePMUpdateOne) Exec(ctx context.Context) error {
	_, err := dcpuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dcpuo *DivisionChoicePMUpdateOne) ExecX(ctx context.Context) {
	if err := dcpuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (dcpuo *DivisionChoicePMUpdateOne) sqlSave(ctx context.Context) (_node *Division_Choice_PM, err error) {
	_spec := sqlgraph.NewUpdateSpec(division_choice_pm.Table, division_choice_pm.Columns, sqlgraph.NewFieldSpec(division_choice_pm.FieldID, field.TypeInt32))
	id, ok := dcpuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Division_Choice_PM.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := dcpuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, division_choice_pm.FieldID)
		for _, f := range fields {
			if !division_choice_pm.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != division_choice_pm.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := dcpuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := dcpuo.mutation.Group(); ok {
		_spec.SetField(division_choice_pm.FieldGroup, field.TypeString, value)
	}
	if value, ok := dcpuo.mutation.CadrePrefNo(); ok {
		_spec.SetField(division_choice_pm.FieldCadrePrefNo, field.TypeInt64, value)
	}
	if value, ok := dcpuo.mutation.AddedCadrePrefNo(); ok {
		_spec.AddField(division_choice_pm.FieldCadrePrefNo, field.TypeInt64, value)
	}
	if value, ok := dcpuo.mutation.Cadre(); ok {
		_spec.SetField(division_choice_pm.FieldCadre, field.TypeString, value)
	}
	if value, ok := dcpuo.mutation.PostPrefNo(); ok {
		_spec.SetField(division_choice_pm.FieldPostPrefNo, field.TypeInt64, value)
	}
	if value, ok := dcpuo.mutation.AddedPostPrefNo(); ok {
		_spec.AddField(division_choice_pm.FieldPostPrefNo, field.TypeInt64, value)
	}
	if value, ok := dcpuo.mutation.PostingPrefValue(); ok {
		_spec.SetField(division_choice_pm.FieldPostingPrefValue, field.TypeString, value)
	}
	if value, ok := dcpuo.mutation.EmployeeID(); ok {
		_spec.SetField(division_choice_pm.FieldEmployeeID, field.TypeInt64, value)
	}
	if value, ok := dcpuo.mutation.AddedEmployeeID(); ok {
		_spec.AddField(division_choice_pm.FieldEmployeeID, field.TypeInt64, value)
	}
	if dcpuo.mutation.EmployeeIDCleared() {
		_spec.ClearField(division_choice_pm.FieldEmployeeID, field.TypeInt64)
	}
	if value, ok := dcpuo.mutation.UpdatedAt(); ok {
		_spec.SetField(division_choice_pm.FieldUpdatedAt, field.TypeTime, value)
	}
	if dcpuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(division_choice_pm.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := dcpuo.mutation.UpdatedBy(); ok {
		_spec.SetField(division_choice_pm.FieldUpdatedBy, field.TypeString, value)
	}
	if dcpuo.mutation.UpdatedByCleared() {
		_spec.ClearField(division_choice_pm.FieldUpdatedBy, field.TypeString)
	}
	if dcpuo.mutation.ApplnGDSPMRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   division_choice_pm.ApplnGDSPMRefTable,
			Columns: []string{division_choice_pm.ApplnGDSPMRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_gdspm.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dcpuo.mutation.ApplnGDSPMRefIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   division_choice_pm.ApplnGDSPMRefTable,
			Columns: []string{division_choice_pm.ApplnGDSPMRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam_applications_gdspm.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Division_Choice_PM{config: dcpuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, dcpuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{division_choice_pm.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	dcpuo.mutation.done = true
	return _node, nil
}
