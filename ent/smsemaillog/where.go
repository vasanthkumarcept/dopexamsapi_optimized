// Code generated by ent, DO NOT EDIT.

package smsemaillog

import (
	"recruit/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.SmsEmailLog {
	return predicate.SmsEmailLog(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.SmsEmailLog {
	return predicate.SmsEmailLog(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.SmsEmailLog {
	return predicate.SmsEmailLog(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.SmsEmailLog {
	return predicate.SmsEmailLog(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.SmsEmailLog {
	return predicate.SmsEmailLog(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.SmsEmailLog {
	return predicate.SmsEmailLog(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.SmsEmailLog {
	return predicate.SmsEmailLog(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.SmsEmailLog {
	return predicate.SmsEmailLog(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.SmsEmailLog {
	return predicate.SmsEmailLog(sql.FieldLTE(FieldID, id))
}

// Type applies equality check predicate on the "Type" field. It's identical to TypeEQ.
func Type(v string) predicate.SmsEmailLog {
	return predicate.SmsEmailLog(sql.FieldEQ(FieldType, v))
}

// MobileEmail applies equality check predicate on the "MobileEmail" field. It's identical to MobileEmailEQ.
func MobileEmail(v string) predicate.SmsEmailLog {
	return predicate.SmsEmailLog(sql.FieldEQ(FieldMobileEmail, v))
}

// UserName applies equality check predicate on the "UserName" field. It's identical to UserNameEQ.
func UserName(v string) predicate.SmsEmailLog {
	return predicate.SmsEmailLog(sql.FieldEQ(FieldUserName, v))
}

// EventCode applies equality check predicate on the "EventCode" field. It's identical to EventCodeEQ.
func EventCode(v string) predicate.SmsEmailLog {
	return predicate.SmsEmailLog(sql.FieldEQ(FieldEventCode, v))
}

// EventDescription applies equality check predicate on the "EventDescription" field. It's identical to EventDescriptionEQ.
func EventDescription(v string) predicate.SmsEmailLog {
	return predicate.SmsEmailLog(sql.FieldEQ(FieldEventDescription, v))
}

// ApiResponse applies equality check predicate on the "ApiResponse" field. It's identical to ApiResponseEQ.
func ApiResponse(v string) predicate.SmsEmailLog {
	return predicate.SmsEmailLog(sql.FieldEQ(FieldApiResponse, v))
}

// ApiResponseDescription applies equality check predicate on the "ApiResponseDescription" field. It's identical to ApiResponseDescriptionEQ.
func ApiResponseDescription(v string) predicate.SmsEmailLog {
	return predicate.SmsEmailLog(sql.FieldEQ(FieldApiResponseDescription, v))
}

// Eventtime applies equality check predicate on the "eventtime" field. It's identical to EventtimeEQ.
func Eventtime(v time.Time) predicate.SmsEmailLog {
	return predicate.SmsEmailLog(sql.FieldEQ(FieldEventtime, v))
}

// TypeEQ applies the EQ predicate on the "Type" field.
func TypeEQ(v string) predicate.SmsEmailLog {
	return predicate.SmsEmailLog(sql.FieldEQ(FieldType, v))
}

// TypeNEQ applies the NEQ predicate on the "Type" field.
func TypeNEQ(v string) predicate.SmsEmailLog {
	return predicate.SmsEmailLog(sql.FieldNEQ(FieldType, v))
}

// TypeIn applies the In predicate on the "Type" field.
func TypeIn(vs ...string) predicate.SmsEmailLog {
	return predicate.SmsEmailLog(sql.FieldIn(FieldType, vs...))
}

// TypeNotIn applies the NotIn predicate on the "Type" field.
func TypeNotIn(vs ...string) predicate.SmsEmailLog {
	return predicate.SmsEmailLog(sql.FieldNotIn(FieldType, vs...))
}

// TypeGT applies the GT predicate on the "Type" field.
func TypeGT(v string) predicate.SmsEmailLog {
	return predicate.SmsEmailLog(sql.FieldGT(FieldType, v))
}

// TypeGTE applies the GTE predicate on the "Type" field.
func TypeGTE(v string) predicate.SmsEmailLog {
	return predicate.SmsEmailLog(sql.FieldGTE(FieldType, v))
}

// TypeLT applies the LT predicate on the "Type" field.
func TypeLT(v string) predicate.SmsEmailLog {
	return predicate.SmsEmailLog(sql.FieldLT(FieldType, v))
}

// TypeLTE applies the LTE predicate on the "Type" field.
func TypeLTE(v string) predicate.SmsEmailLog {
	return predicate.SmsEmailLog(sql.FieldLTE(FieldType, v))
}

// TypeContains applies the Contains predicate on the "Type" field.
func TypeContains(v string) predicate.SmsEmailLog {
	return predicate.SmsEmailLog(sql.FieldContains(FieldType, v))
}

// TypeHasPrefix applies the HasPrefix predicate on the "Type" field.
func TypeHasPrefix(v string) predicate.SmsEmailLog {
	return predicate.SmsEmailLog(sql.FieldHasPrefix(FieldType, v))
}

// TypeHasSuffix applies the HasSuffix predicate on the "Type" field.
func TypeHasSuffix(v string) predicate.SmsEmailLog {
	return predicate.SmsEmailLog(sql.FieldHasSuffix(FieldType, v))
}

// TypeIsNil applies the IsNil predicate on the "Type" field.
func TypeIsNil() predicate.SmsEmailLog {
	return predicate.SmsEmailLog(sql.FieldIsNull(FieldType))
}

// TypeNotNil applies the NotNil predicate on the "Type" field.
func TypeNotNil() predicate.SmsEmailLog {
	return predicate.SmsEmailLog(sql.FieldNotNull(FieldType))
}

// TypeEqualFold applies the EqualFold predicate on the "Type" field.
func TypeEqualFold(v string) predicate.SmsEmailLog {
	return predicate.SmsEmailLog(sql.FieldEqualFold(FieldType, v))
}

// TypeContainsFold applies the ContainsFold predicate on the "Type" field.
func TypeContainsFold(v string) predicate.SmsEmailLog {
	return predicate.SmsEmailLog(sql.FieldContainsFold(FieldType, v))
}

// MobileEmailEQ applies the EQ predicate on the "MobileEmail" field.
func MobileEmailEQ(v string) predicate.SmsEmailLog {
	return predicate.SmsEmailLog(sql.FieldEQ(FieldMobileEmail, v))
}

// MobileEmailNEQ applies the NEQ predicate on the "MobileEmail" field.
func MobileEmailNEQ(v string) predicate.SmsEmailLog {
	return predicate.SmsEmailLog(sql.FieldNEQ(FieldMobileEmail, v))
}

// MobileEmailIn applies the In predicate on the "MobileEmail" field.
func MobileEmailIn(vs ...string) predicate.SmsEmailLog {
	return predicate.SmsEmailLog(sql.FieldIn(FieldMobileEmail, vs...))
}

// MobileEmailNotIn applies the NotIn predicate on the "MobileEmail" field.
func MobileEmailNotIn(vs ...string) predicate.SmsEmailLog {
	return predicate.SmsEmailLog(sql.FieldNotIn(FieldMobileEmail, vs...))
}

// MobileEmailGT applies the GT predicate on the "MobileEmail" field.
func MobileEmailGT(v string) predicate.SmsEmailLog {
	return predicate.SmsEmailLog(sql.FieldGT(FieldMobileEmail, v))
}

// MobileEmailGTE applies the GTE predicate on the "MobileEmail" field.
func MobileEmailGTE(v string) predicate.SmsEmailLog {
	return predicate.SmsEmailLog(sql.FieldGTE(FieldMobileEmail, v))
}

// MobileEmailLT applies the LT predicate on the "MobileEmail" field.
func MobileEmailLT(v string) predicate.SmsEmailLog {
	return predicate.SmsEmailLog(sql.FieldLT(FieldMobileEmail, v))
}

// MobileEmailLTE applies the LTE predicate on the "MobileEmail" field.
func MobileEmailLTE(v string) predicate.SmsEmailLog {
	return predicate.SmsEmailLog(sql.FieldLTE(FieldMobileEmail, v))
}

// MobileEmailContains applies the Contains predicate on the "MobileEmail" field.
func MobileEmailContains(v string) predicate.SmsEmailLog {
	return predicate.SmsEmailLog(sql.FieldContains(FieldMobileEmail, v))
}

// MobileEmailHasPrefix applies the HasPrefix predicate on the "MobileEmail" field.
func MobileEmailHasPrefix(v string) predicate.SmsEmailLog {
	return predicate.SmsEmailLog(sql.FieldHasPrefix(FieldMobileEmail, v))
}

// MobileEmailHasSuffix applies the HasSuffix predicate on the "MobileEmail" field.
func MobileEmailHasSuffix(v string) predicate.SmsEmailLog {
	return predicate.SmsEmailLog(sql.FieldHasSuffix(FieldMobileEmail, v))
}

// MobileEmailIsNil applies the IsNil predicate on the "MobileEmail" field.
func MobileEmailIsNil() predicate.SmsEmailLog {
	return predicate.SmsEmailLog(sql.FieldIsNull(FieldMobileEmail))
}

// MobileEmailNotNil applies the NotNil predicate on the "MobileEmail" field.
func MobileEmailNotNil() predicate.SmsEmailLog {
	return predicate.SmsEmailLog(sql.FieldNotNull(FieldMobileEmail))
}

// MobileEmailEqualFold applies the EqualFold predicate on the "MobileEmail" field.
func MobileEmailEqualFold(v string) predicate.SmsEmailLog {
	return predicate.SmsEmailLog(sql.FieldEqualFold(FieldMobileEmail, v))
}

// MobileEmailContainsFold applies the ContainsFold predicate on the "MobileEmail" field.
func MobileEmailContainsFold(v string) predicate.SmsEmailLog {
	return predicate.SmsEmailLog(sql.FieldContainsFold(FieldMobileEmail, v))
}

// UserNameEQ applies the EQ predicate on the "UserName" field.
func UserNameEQ(v string) predicate.SmsEmailLog {
	return predicate.SmsEmailLog(sql.FieldEQ(FieldUserName, v))
}

// UserNameNEQ applies the NEQ predicate on the "UserName" field.
func UserNameNEQ(v string) predicate.SmsEmailLog {
	return predicate.SmsEmailLog(sql.FieldNEQ(FieldUserName, v))
}

// UserNameIn applies the In predicate on the "UserName" field.
func UserNameIn(vs ...string) predicate.SmsEmailLog {
	return predicate.SmsEmailLog(sql.FieldIn(FieldUserName, vs...))
}

// UserNameNotIn applies the NotIn predicate on the "UserName" field.
func UserNameNotIn(vs ...string) predicate.SmsEmailLog {
	return predicate.SmsEmailLog(sql.FieldNotIn(FieldUserName, vs...))
}

// UserNameGT applies the GT predicate on the "UserName" field.
func UserNameGT(v string) predicate.SmsEmailLog {
	return predicate.SmsEmailLog(sql.FieldGT(FieldUserName, v))
}

// UserNameGTE applies the GTE predicate on the "UserName" field.
func UserNameGTE(v string) predicate.SmsEmailLog {
	return predicate.SmsEmailLog(sql.FieldGTE(FieldUserName, v))
}

// UserNameLT applies the LT predicate on the "UserName" field.
func UserNameLT(v string) predicate.SmsEmailLog {
	return predicate.SmsEmailLog(sql.FieldLT(FieldUserName, v))
}

// UserNameLTE applies the LTE predicate on the "UserName" field.
func UserNameLTE(v string) predicate.SmsEmailLog {
	return predicate.SmsEmailLog(sql.FieldLTE(FieldUserName, v))
}

// UserNameContains applies the Contains predicate on the "UserName" field.
func UserNameContains(v string) predicate.SmsEmailLog {
	return predicate.SmsEmailLog(sql.FieldContains(FieldUserName, v))
}

// UserNameHasPrefix applies the HasPrefix predicate on the "UserName" field.
func UserNameHasPrefix(v string) predicate.SmsEmailLog {
	return predicate.SmsEmailLog(sql.FieldHasPrefix(FieldUserName, v))
}

// UserNameHasSuffix applies the HasSuffix predicate on the "UserName" field.
func UserNameHasSuffix(v string) predicate.SmsEmailLog {
	return predicate.SmsEmailLog(sql.FieldHasSuffix(FieldUserName, v))
}

// UserNameIsNil applies the IsNil predicate on the "UserName" field.
func UserNameIsNil() predicate.SmsEmailLog {
	return predicate.SmsEmailLog(sql.FieldIsNull(FieldUserName))
}

// UserNameNotNil applies the NotNil predicate on the "UserName" field.
func UserNameNotNil() predicate.SmsEmailLog {
	return predicate.SmsEmailLog(sql.FieldNotNull(FieldUserName))
}

// UserNameEqualFold applies the EqualFold predicate on the "UserName" field.
func UserNameEqualFold(v string) predicate.SmsEmailLog {
	return predicate.SmsEmailLog(sql.FieldEqualFold(FieldUserName, v))
}

// UserNameContainsFold applies the ContainsFold predicate on the "UserName" field.
func UserNameContainsFold(v string) predicate.SmsEmailLog {
	return predicate.SmsEmailLog(sql.FieldContainsFold(FieldUserName, v))
}

// EventCodeEQ applies the EQ predicate on the "EventCode" field.
func EventCodeEQ(v string) predicate.SmsEmailLog {
	return predicate.SmsEmailLog(sql.FieldEQ(FieldEventCode, v))
}

// EventCodeNEQ applies the NEQ predicate on the "EventCode" field.
func EventCodeNEQ(v string) predicate.SmsEmailLog {
	return predicate.SmsEmailLog(sql.FieldNEQ(FieldEventCode, v))
}

// EventCodeIn applies the In predicate on the "EventCode" field.
func EventCodeIn(vs ...string) predicate.SmsEmailLog {
	return predicate.SmsEmailLog(sql.FieldIn(FieldEventCode, vs...))
}

// EventCodeNotIn applies the NotIn predicate on the "EventCode" field.
func EventCodeNotIn(vs ...string) predicate.SmsEmailLog {
	return predicate.SmsEmailLog(sql.FieldNotIn(FieldEventCode, vs...))
}

// EventCodeGT applies the GT predicate on the "EventCode" field.
func EventCodeGT(v string) predicate.SmsEmailLog {
	return predicate.SmsEmailLog(sql.FieldGT(FieldEventCode, v))
}

// EventCodeGTE applies the GTE predicate on the "EventCode" field.
func EventCodeGTE(v string) predicate.SmsEmailLog {
	return predicate.SmsEmailLog(sql.FieldGTE(FieldEventCode, v))
}

// EventCodeLT applies the LT predicate on the "EventCode" field.
func EventCodeLT(v string) predicate.SmsEmailLog {
	return predicate.SmsEmailLog(sql.FieldLT(FieldEventCode, v))
}

// EventCodeLTE applies the LTE predicate on the "EventCode" field.
func EventCodeLTE(v string) predicate.SmsEmailLog {
	return predicate.SmsEmailLog(sql.FieldLTE(FieldEventCode, v))
}

// EventCodeContains applies the Contains predicate on the "EventCode" field.
func EventCodeContains(v string) predicate.SmsEmailLog {
	return predicate.SmsEmailLog(sql.FieldContains(FieldEventCode, v))
}

// EventCodeHasPrefix applies the HasPrefix predicate on the "EventCode" field.
func EventCodeHasPrefix(v string) predicate.SmsEmailLog {
	return predicate.SmsEmailLog(sql.FieldHasPrefix(FieldEventCode, v))
}

// EventCodeHasSuffix applies the HasSuffix predicate on the "EventCode" field.
func EventCodeHasSuffix(v string) predicate.SmsEmailLog {
	return predicate.SmsEmailLog(sql.FieldHasSuffix(FieldEventCode, v))
}

// EventCodeIsNil applies the IsNil predicate on the "EventCode" field.
func EventCodeIsNil() predicate.SmsEmailLog {
	return predicate.SmsEmailLog(sql.FieldIsNull(FieldEventCode))
}

// EventCodeNotNil applies the NotNil predicate on the "EventCode" field.
func EventCodeNotNil() predicate.SmsEmailLog {
	return predicate.SmsEmailLog(sql.FieldNotNull(FieldEventCode))
}

// EventCodeEqualFold applies the EqualFold predicate on the "EventCode" field.
func EventCodeEqualFold(v string) predicate.SmsEmailLog {
	return predicate.SmsEmailLog(sql.FieldEqualFold(FieldEventCode, v))
}

// EventCodeContainsFold applies the ContainsFold predicate on the "EventCode" field.
func EventCodeContainsFold(v string) predicate.SmsEmailLog {
	return predicate.SmsEmailLog(sql.FieldContainsFold(FieldEventCode, v))
}

// EventDescriptionEQ applies the EQ predicate on the "EventDescription" field.
func EventDescriptionEQ(v string) predicate.SmsEmailLog {
	return predicate.SmsEmailLog(sql.FieldEQ(FieldEventDescription, v))
}

// EventDescriptionNEQ applies the NEQ predicate on the "EventDescription" field.
func EventDescriptionNEQ(v string) predicate.SmsEmailLog {
	return predicate.SmsEmailLog(sql.FieldNEQ(FieldEventDescription, v))
}

// EventDescriptionIn applies the In predicate on the "EventDescription" field.
func EventDescriptionIn(vs ...string) predicate.SmsEmailLog {
	return predicate.SmsEmailLog(sql.FieldIn(FieldEventDescription, vs...))
}

// EventDescriptionNotIn applies the NotIn predicate on the "EventDescription" field.
func EventDescriptionNotIn(vs ...string) predicate.SmsEmailLog {
	return predicate.SmsEmailLog(sql.FieldNotIn(FieldEventDescription, vs...))
}

// EventDescriptionGT applies the GT predicate on the "EventDescription" field.
func EventDescriptionGT(v string) predicate.SmsEmailLog {
	return predicate.SmsEmailLog(sql.FieldGT(FieldEventDescription, v))
}

// EventDescriptionGTE applies the GTE predicate on the "EventDescription" field.
func EventDescriptionGTE(v string) predicate.SmsEmailLog {
	return predicate.SmsEmailLog(sql.FieldGTE(FieldEventDescription, v))
}

// EventDescriptionLT applies the LT predicate on the "EventDescription" field.
func EventDescriptionLT(v string) predicate.SmsEmailLog {
	return predicate.SmsEmailLog(sql.FieldLT(FieldEventDescription, v))
}

// EventDescriptionLTE applies the LTE predicate on the "EventDescription" field.
func EventDescriptionLTE(v string) predicate.SmsEmailLog {
	return predicate.SmsEmailLog(sql.FieldLTE(FieldEventDescription, v))
}

// EventDescriptionContains applies the Contains predicate on the "EventDescription" field.
func EventDescriptionContains(v string) predicate.SmsEmailLog {
	return predicate.SmsEmailLog(sql.FieldContains(FieldEventDescription, v))
}

// EventDescriptionHasPrefix applies the HasPrefix predicate on the "EventDescription" field.
func EventDescriptionHasPrefix(v string) predicate.SmsEmailLog {
	return predicate.SmsEmailLog(sql.FieldHasPrefix(FieldEventDescription, v))
}

// EventDescriptionHasSuffix applies the HasSuffix predicate on the "EventDescription" field.
func EventDescriptionHasSuffix(v string) predicate.SmsEmailLog {
	return predicate.SmsEmailLog(sql.FieldHasSuffix(FieldEventDescription, v))
}

// EventDescriptionIsNil applies the IsNil predicate on the "EventDescription" field.
func EventDescriptionIsNil() predicate.SmsEmailLog {
	return predicate.SmsEmailLog(sql.FieldIsNull(FieldEventDescription))
}

// EventDescriptionNotNil applies the NotNil predicate on the "EventDescription" field.
func EventDescriptionNotNil() predicate.SmsEmailLog {
	return predicate.SmsEmailLog(sql.FieldNotNull(FieldEventDescription))
}

// EventDescriptionEqualFold applies the EqualFold predicate on the "EventDescription" field.
func EventDescriptionEqualFold(v string) predicate.SmsEmailLog {
	return predicate.SmsEmailLog(sql.FieldEqualFold(FieldEventDescription, v))
}

// EventDescriptionContainsFold applies the ContainsFold predicate on the "EventDescription" field.
func EventDescriptionContainsFold(v string) predicate.SmsEmailLog {
	return predicate.SmsEmailLog(sql.FieldContainsFold(FieldEventDescription, v))
}

// ApiResponseEQ applies the EQ predicate on the "ApiResponse" field.
func ApiResponseEQ(v string) predicate.SmsEmailLog {
	return predicate.SmsEmailLog(sql.FieldEQ(FieldApiResponse, v))
}

// ApiResponseNEQ applies the NEQ predicate on the "ApiResponse" field.
func ApiResponseNEQ(v string) predicate.SmsEmailLog {
	return predicate.SmsEmailLog(sql.FieldNEQ(FieldApiResponse, v))
}

// ApiResponseIn applies the In predicate on the "ApiResponse" field.
func ApiResponseIn(vs ...string) predicate.SmsEmailLog {
	return predicate.SmsEmailLog(sql.FieldIn(FieldApiResponse, vs...))
}

// ApiResponseNotIn applies the NotIn predicate on the "ApiResponse" field.
func ApiResponseNotIn(vs ...string) predicate.SmsEmailLog {
	return predicate.SmsEmailLog(sql.FieldNotIn(FieldApiResponse, vs...))
}

// ApiResponseGT applies the GT predicate on the "ApiResponse" field.
func ApiResponseGT(v string) predicate.SmsEmailLog {
	return predicate.SmsEmailLog(sql.FieldGT(FieldApiResponse, v))
}

// ApiResponseGTE applies the GTE predicate on the "ApiResponse" field.
func ApiResponseGTE(v string) predicate.SmsEmailLog {
	return predicate.SmsEmailLog(sql.FieldGTE(FieldApiResponse, v))
}

// ApiResponseLT applies the LT predicate on the "ApiResponse" field.
func ApiResponseLT(v string) predicate.SmsEmailLog {
	return predicate.SmsEmailLog(sql.FieldLT(FieldApiResponse, v))
}

// ApiResponseLTE applies the LTE predicate on the "ApiResponse" field.
func ApiResponseLTE(v string) predicate.SmsEmailLog {
	return predicate.SmsEmailLog(sql.FieldLTE(FieldApiResponse, v))
}

// ApiResponseContains applies the Contains predicate on the "ApiResponse" field.
func ApiResponseContains(v string) predicate.SmsEmailLog {
	return predicate.SmsEmailLog(sql.FieldContains(FieldApiResponse, v))
}

// ApiResponseHasPrefix applies the HasPrefix predicate on the "ApiResponse" field.
func ApiResponseHasPrefix(v string) predicate.SmsEmailLog {
	return predicate.SmsEmailLog(sql.FieldHasPrefix(FieldApiResponse, v))
}

// ApiResponseHasSuffix applies the HasSuffix predicate on the "ApiResponse" field.
func ApiResponseHasSuffix(v string) predicate.SmsEmailLog {
	return predicate.SmsEmailLog(sql.FieldHasSuffix(FieldApiResponse, v))
}

// ApiResponseIsNil applies the IsNil predicate on the "ApiResponse" field.
func ApiResponseIsNil() predicate.SmsEmailLog {
	return predicate.SmsEmailLog(sql.FieldIsNull(FieldApiResponse))
}

// ApiResponseNotNil applies the NotNil predicate on the "ApiResponse" field.
func ApiResponseNotNil() predicate.SmsEmailLog {
	return predicate.SmsEmailLog(sql.FieldNotNull(FieldApiResponse))
}

// ApiResponseEqualFold applies the EqualFold predicate on the "ApiResponse" field.
func ApiResponseEqualFold(v string) predicate.SmsEmailLog {
	return predicate.SmsEmailLog(sql.FieldEqualFold(FieldApiResponse, v))
}

// ApiResponseContainsFold applies the ContainsFold predicate on the "ApiResponse" field.
func ApiResponseContainsFold(v string) predicate.SmsEmailLog {
	return predicate.SmsEmailLog(sql.FieldContainsFold(FieldApiResponse, v))
}

// ApiResponseDescriptionEQ applies the EQ predicate on the "ApiResponseDescription" field.
func ApiResponseDescriptionEQ(v string) predicate.SmsEmailLog {
	return predicate.SmsEmailLog(sql.FieldEQ(FieldApiResponseDescription, v))
}

// ApiResponseDescriptionNEQ applies the NEQ predicate on the "ApiResponseDescription" field.
func ApiResponseDescriptionNEQ(v string) predicate.SmsEmailLog {
	return predicate.SmsEmailLog(sql.FieldNEQ(FieldApiResponseDescription, v))
}

// ApiResponseDescriptionIn applies the In predicate on the "ApiResponseDescription" field.
func ApiResponseDescriptionIn(vs ...string) predicate.SmsEmailLog {
	return predicate.SmsEmailLog(sql.FieldIn(FieldApiResponseDescription, vs...))
}

// ApiResponseDescriptionNotIn applies the NotIn predicate on the "ApiResponseDescription" field.
func ApiResponseDescriptionNotIn(vs ...string) predicate.SmsEmailLog {
	return predicate.SmsEmailLog(sql.FieldNotIn(FieldApiResponseDescription, vs...))
}

// ApiResponseDescriptionGT applies the GT predicate on the "ApiResponseDescription" field.
func ApiResponseDescriptionGT(v string) predicate.SmsEmailLog {
	return predicate.SmsEmailLog(sql.FieldGT(FieldApiResponseDescription, v))
}

// ApiResponseDescriptionGTE applies the GTE predicate on the "ApiResponseDescription" field.
func ApiResponseDescriptionGTE(v string) predicate.SmsEmailLog {
	return predicate.SmsEmailLog(sql.FieldGTE(FieldApiResponseDescription, v))
}

// ApiResponseDescriptionLT applies the LT predicate on the "ApiResponseDescription" field.
func ApiResponseDescriptionLT(v string) predicate.SmsEmailLog {
	return predicate.SmsEmailLog(sql.FieldLT(FieldApiResponseDescription, v))
}

// ApiResponseDescriptionLTE applies the LTE predicate on the "ApiResponseDescription" field.
func ApiResponseDescriptionLTE(v string) predicate.SmsEmailLog {
	return predicate.SmsEmailLog(sql.FieldLTE(FieldApiResponseDescription, v))
}

// ApiResponseDescriptionContains applies the Contains predicate on the "ApiResponseDescription" field.
func ApiResponseDescriptionContains(v string) predicate.SmsEmailLog {
	return predicate.SmsEmailLog(sql.FieldContains(FieldApiResponseDescription, v))
}

// ApiResponseDescriptionHasPrefix applies the HasPrefix predicate on the "ApiResponseDescription" field.
func ApiResponseDescriptionHasPrefix(v string) predicate.SmsEmailLog {
	return predicate.SmsEmailLog(sql.FieldHasPrefix(FieldApiResponseDescription, v))
}

// ApiResponseDescriptionHasSuffix applies the HasSuffix predicate on the "ApiResponseDescription" field.
func ApiResponseDescriptionHasSuffix(v string) predicate.SmsEmailLog {
	return predicate.SmsEmailLog(sql.FieldHasSuffix(FieldApiResponseDescription, v))
}

// ApiResponseDescriptionIsNil applies the IsNil predicate on the "ApiResponseDescription" field.
func ApiResponseDescriptionIsNil() predicate.SmsEmailLog {
	return predicate.SmsEmailLog(sql.FieldIsNull(FieldApiResponseDescription))
}

// ApiResponseDescriptionNotNil applies the NotNil predicate on the "ApiResponseDescription" field.
func ApiResponseDescriptionNotNil() predicate.SmsEmailLog {
	return predicate.SmsEmailLog(sql.FieldNotNull(FieldApiResponseDescription))
}

// ApiResponseDescriptionEqualFold applies the EqualFold predicate on the "ApiResponseDescription" field.
func ApiResponseDescriptionEqualFold(v string) predicate.SmsEmailLog {
	return predicate.SmsEmailLog(sql.FieldEqualFold(FieldApiResponseDescription, v))
}

// ApiResponseDescriptionContainsFold applies the ContainsFold predicate on the "ApiResponseDescription" field.
func ApiResponseDescriptionContainsFold(v string) predicate.SmsEmailLog {
	return predicate.SmsEmailLog(sql.FieldContainsFold(FieldApiResponseDescription, v))
}

// EventtimeEQ applies the EQ predicate on the "eventtime" field.
func EventtimeEQ(v time.Time) predicate.SmsEmailLog {
	return predicate.SmsEmailLog(sql.FieldEQ(FieldEventtime, v))
}

// EventtimeNEQ applies the NEQ predicate on the "eventtime" field.
func EventtimeNEQ(v time.Time) predicate.SmsEmailLog {
	return predicate.SmsEmailLog(sql.FieldNEQ(FieldEventtime, v))
}

// EventtimeIn applies the In predicate on the "eventtime" field.
func EventtimeIn(vs ...time.Time) predicate.SmsEmailLog {
	return predicate.SmsEmailLog(sql.FieldIn(FieldEventtime, vs...))
}

// EventtimeNotIn applies the NotIn predicate on the "eventtime" field.
func EventtimeNotIn(vs ...time.Time) predicate.SmsEmailLog {
	return predicate.SmsEmailLog(sql.FieldNotIn(FieldEventtime, vs...))
}

// EventtimeGT applies the GT predicate on the "eventtime" field.
func EventtimeGT(v time.Time) predicate.SmsEmailLog {
	return predicate.SmsEmailLog(sql.FieldGT(FieldEventtime, v))
}

// EventtimeGTE applies the GTE predicate on the "eventtime" field.
func EventtimeGTE(v time.Time) predicate.SmsEmailLog {
	return predicate.SmsEmailLog(sql.FieldGTE(FieldEventtime, v))
}

// EventtimeLT applies the LT predicate on the "eventtime" field.
func EventtimeLT(v time.Time) predicate.SmsEmailLog {
	return predicate.SmsEmailLog(sql.FieldLT(FieldEventtime, v))
}

// EventtimeLTE applies the LTE predicate on the "eventtime" field.
func EventtimeLTE(v time.Time) predicate.SmsEmailLog {
	return predicate.SmsEmailLog(sql.FieldLTE(FieldEventtime, v))
}

// EventtimeIsNil applies the IsNil predicate on the "eventtime" field.
func EventtimeIsNil() predicate.SmsEmailLog {
	return predicate.SmsEmailLog(sql.FieldIsNull(FieldEventtime))
}

// EventtimeNotNil applies the NotNil predicate on the "eventtime" field.
func EventtimeNotNil() predicate.SmsEmailLog {
	return predicate.SmsEmailLog(sql.FieldNotNull(FieldEventtime))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.SmsEmailLog) predicate.SmsEmailLog {
	return predicate.SmsEmailLog(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.SmsEmailLog) predicate.SmsEmailLog {
	return predicate.SmsEmailLog(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.SmsEmailLog) predicate.SmsEmailLog {
	return predicate.SmsEmailLog(func(s *sql.Selector) {
		p(s.Not())
	})
}
