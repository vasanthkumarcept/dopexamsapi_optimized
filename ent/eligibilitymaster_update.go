// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"recruit/ent/eligibilitymaster"
	"recruit/ent/employeecategory"
	"recruit/ent/employeeposts"
	"recruit/ent/exam"
	"recruit/ent/exampapers"
	"recruit/ent/notification"
	"recruit/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// EligibilityMasterUpdate is the builder for updating EligibilityMaster entities.
type EligibilityMasterUpdate struct {
	config
	hooks    []Hook
	mutation *EligibilityMasterMutation
}

// Where appends a list predicates to the EligibilityMasterUpdate builder.
func (emu *EligibilityMasterUpdate) Where(ps ...predicate.EligibilityMaster) *EligibilityMasterUpdate {
	emu.mutation.Where(ps...)
	return emu
}

// SetExamCode sets the "ExamCode" field.
func (emu *EligibilityMasterUpdate) SetExamCode(i int32) *EligibilityMasterUpdate {
	emu.mutation.SetExamCode(i)
	return emu
}

// SetNillableExamCode sets the "ExamCode" field if the given value is not nil.
func (emu *EligibilityMasterUpdate) SetNillableExamCode(i *int32) *EligibilityMasterUpdate {
	if i != nil {
		emu.SetExamCode(*i)
	}
	return emu
}

// ClearExamCode clears the value of the "ExamCode" field.
func (emu *EligibilityMasterUpdate) ClearExamCode() *EligibilityMasterUpdate {
	emu.mutation.ClearExamCode()
	return emu
}

// SetExamName sets the "ExamName" field.
func (emu *EligibilityMasterUpdate) SetExamName(s string) *EligibilityMasterUpdate {
	emu.mutation.SetExamName(s)
	return emu
}

// SetPostCode sets the "PostCode" field.
func (emu *EligibilityMasterUpdate) SetPostCode(s string) *EligibilityMasterUpdate {
	emu.mutation.SetPostCode(s)
	return emu
}

// SetNillablePostCode sets the "PostCode" field if the given value is not nil.
func (emu *EligibilityMasterUpdate) SetNillablePostCode(s *string) *EligibilityMasterUpdate {
	if s != nil {
		emu.SetPostCode(*s)
	}
	return emu
}

// ClearPostCode clears the value of the "PostCode" field.
func (emu *EligibilityMasterUpdate) ClearPostCode() *EligibilityMasterUpdate {
	emu.mutation.ClearPostCode()
	return emu
}

// SetGdsService sets the "gdsService" field.
func (emu *EligibilityMasterUpdate) SetGdsService(b bool) *EligibilityMasterUpdate {
	emu.mutation.SetGdsService(b)
	return emu
}

// SetNillableGdsService sets the "gdsService" field if the given value is not nil.
func (emu *EligibilityMasterUpdate) SetNillableGdsService(b *bool) *EligibilityMasterUpdate {
	if b != nil {
		emu.SetGdsService(*b)
	}
	return emu
}

// SetAgeCriteria sets the "AgeCriteria" field.
func (emu *EligibilityMasterUpdate) SetAgeCriteria(i int32) *EligibilityMasterUpdate {
	emu.mutation.ResetAgeCriteria()
	emu.mutation.SetAgeCriteria(i)
	return emu
}

// SetNillableAgeCriteria sets the "AgeCriteria" field if the given value is not nil.
func (emu *EligibilityMasterUpdate) SetNillableAgeCriteria(i *int32) *EligibilityMasterUpdate {
	if i != nil {
		emu.SetAgeCriteria(*i)
	}
	return emu
}

// AddAgeCriteria adds i to the "AgeCriteria" field.
func (emu *EligibilityMasterUpdate) AddAgeCriteria(i int32) *EligibilityMasterUpdate {
	emu.mutation.AddAgeCriteria(i)
	return emu
}

// ClearAgeCriteria clears the value of the "AgeCriteria" field.
func (emu *EligibilityMasterUpdate) ClearAgeCriteria() *EligibilityMasterUpdate {
	emu.mutation.ClearAgeCriteria()
	return emu
}

// SetServiceCriteria sets the "ServiceCriteria" field.
func (emu *EligibilityMasterUpdate) SetServiceCriteria(i int32) *EligibilityMasterUpdate {
	emu.mutation.ResetServiceCriteria()
	emu.mutation.SetServiceCriteria(i)
	return emu
}

// SetNillableServiceCriteria sets the "ServiceCriteria" field if the given value is not nil.
func (emu *EligibilityMasterUpdate) SetNillableServiceCriteria(i *int32) *EligibilityMasterUpdate {
	if i != nil {
		emu.SetServiceCriteria(*i)
	}
	return emu
}

// AddServiceCriteria adds i to the "ServiceCriteria" field.
func (emu *EligibilityMasterUpdate) AddServiceCriteria(i int32) *EligibilityMasterUpdate {
	emu.mutation.AddServiceCriteria(i)
	return emu
}

// ClearServiceCriteria clears the value of the "ServiceCriteria" field.
func (emu *EligibilityMasterUpdate) ClearServiceCriteria() *EligibilityMasterUpdate {
	emu.mutation.ClearServiceCriteria()
	return emu
}

// SetDrivingLicenseCriteria sets the "DrivingLicenseCriteria" field.
func (emu *EligibilityMasterUpdate) SetDrivingLicenseCriteria(b bool) *EligibilityMasterUpdate {
	emu.mutation.SetDrivingLicenseCriteria(b)
	return emu
}

// SetNillableDrivingLicenseCriteria sets the "DrivingLicenseCriteria" field if the given value is not nil.
func (emu *EligibilityMasterUpdate) SetNillableDrivingLicenseCriteria(b *bool) *EligibilityMasterUpdate {
	if b != nil {
		emu.SetDrivingLicenseCriteria(*b)
	}
	return emu
}

// SetComputerKnowledge sets the "ComputerKnowledge" field.
func (emu *EligibilityMasterUpdate) SetComputerKnowledge(b bool) *EligibilityMasterUpdate {
	emu.mutation.SetComputerKnowledge(b)
	return emu
}

// SetNillableComputerKnowledge sets the "ComputerKnowledge" field if the given value is not nil.
func (emu *EligibilityMasterUpdate) SetNillableComputerKnowledge(b *bool) *EligibilityMasterUpdate {
	if b != nil {
		emu.SetComputerKnowledge(*b)
	}
	return emu
}

// SetLevelOfPayMatrixEligibility sets the "LevelOfPayMatrixEligibility" field.
func (emu *EligibilityMasterUpdate) SetLevelOfPayMatrixEligibility(b bool) *EligibilityMasterUpdate {
	emu.mutation.SetLevelOfPayMatrixEligibility(b)
	return emu
}

// SetNillableLevelOfPayMatrixEligibility sets the "LevelOfPayMatrixEligibility" field if the given value is not nil.
func (emu *EligibilityMasterUpdate) SetNillableLevelOfPayMatrixEligibility(b *bool) *EligibilityMasterUpdate {
	if b != nil {
		emu.SetLevelOfPayMatrixEligibility(*b)
	}
	return emu
}

// SetEducation sets the "Education" field.
func (emu *EligibilityMasterUpdate) SetEducation(s string) *EligibilityMasterUpdate {
	emu.mutation.SetEducation(s)
	return emu
}

// SetNotifyCode sets the "NotifyCode" field.
func (emu *EligibilityMasterUpdate) SetNotifyCode(i int32) *EligibilityMasterUpdate {
	emu.mutation.ResetNotifyCode()
	emu.mutation.SetNotifyCode(i)
	return emu
}

// SetNillableNotifyCode sets the "NotifyCode" field if the given value is not nil.
func (emu *EligibilityMasterUpdate) SetNillableNotifyCode(i *int32) *EligibilityMasterUpdate {
	if i != nil {
		emu.SetNotifyCode(*i)
	}
	return emu
}

// AddNotifyCode adds i to the "NotifyCode" field.
func (emu *EligibilityMasterUpdate) AddNotifyCode(i int32) *EligibilityMasterUpdate {
	emu.mutation.AddNotifyCode(i)
	return emu
}

// ClearNotifyCode clears the value of the "NotifyCode" field.
func (emu *EligibilityMasterUpdate) ClearNotifyCode() *EligibilityMasterUpdate {
	emu.mutation.ClearNotifyCode()
	return emu
}

// SetCategoryCode sets the "CategoryCode" field.
func (emu *EligibilityMasterUpdate) SetCategoryCode(s string) *EligibilityMasterUpdate {
	emu.mutation.SetCategoryCode(s)
	return emu
}

// SetNillableCategoryCode sets the "CategoryCode" field if the given value is not nil.
func (emu *EligibilityMasterUpdate) SetNillableCategoryCode(s *string) *EligibilityMasterUpdate {
	if s != nil {
		emu.SetCategoryCode(*s)
	}
	return emu
}

// ClearCategoryCode clears the value of the "CategoryCode" field.
func (emu *EligibilityMasterUpdate) ClearCategoryCode() *EligibilityMasterUpdate {
	emu.mutation.ClearCategoryCode()
	return emu
}

// SetPaperCode sets the "PaperCode" field.
func (emu *EligibilityMasterUpdate) SetPaperCode(i int32) *EligibilityMasterUpdate {
	emu.mutation.SetPaperCode(i)
	return emu
}

// SetNillablePaperCode sets the "PaperCode" field if the given value is not nil.
func (emu *EligibilityMasterUpdate) SetNillablePaperCode(i *int32) *EligibilityMasterUpdate {
	if i != nil {
		emu.SetPaperCode(*i)
	}
	return emu
}

// ClearPaperCode clears the value of the "PaperCode" field.
func (emu *EligibilityMasterUpdate) ClearPaperCode() *EligibilityMasterUpdate {
	emu.mutation.ClearPaperCode()
	return emu
}

// SetPaperDescription sets the "PaperDescription" field.
func (emu *EligibilityMasterUpdate) SetPaperDescription(s string) *EligibilityMasterUpdate {
	emu.mutation.SetPaperDescription(s)
	return emu
}

// SetMinimumMarks sets the "MinimumMarks" field.
func (emu *EligibilityMasterUpdate) SetMinimumMarks(i int32) *EligibilityMasterUpdate {
	emu.mutation.ResetMinimumMarks()
	emu.mutation.SetMinimumMarks(i)
	return emu
}

// AddMinimumMarks adds i to the "MinimumMarks" field.
func (emu *EligibilityMasterUpdate) AddMinimumMarks(i int32) *EligibilityMasterUpdate {
	emu.mutation.AddMinimumMarks(i)
	return emu
}

// SetOrderNumber sets the "OrderNumber" field.
func (emu *EligibilityMasterUpdate) SetOrderNumber(s string) *EligibilityMasterUpdate {
	emu.mutation.SetOrderNumber(s)
	return emu
}

// SetNillableOrderNumber sets the "OrderNumber" field if the given value is not nil.
func (emu *EligibilityMasterUpdate) SetNillableOrderNumber(s *string) *EligibilityMasterUpdate {
	if s != nil {
		emu.SetOrderNumber(*s)
	}
	return emu
}

// ClearOrderNumber clears the value of the "OrderNumber" field.
func (emu *EligibilityMasterUpdate) ClearOrderNumber() *EligibilityMasterUpdate {
	emu.mutation.ClearOrderNumber()
	return emu
}

// SetStatus sets the "Status" field.
func (emu *EligibilityMasterUpdate) SetStatus(s string) *EligibilityMasterUpdate {
	emu.mutation.SetStatus(s)
	return emu
}

// SetNillableStatus sets the "Status" field if the given value is not nil.
func (emu *EligibilityMasterUpdate) SetNillableStatus(s *string) *EligibilityMasterUpdate {
	if s != nil {
		emu.SetStatus(*s)
	}
	return emu
}

// ClearStatus clears the value of the "Status" field.
func (emu *EligibilityMasterUpdate) ClearStatus() *EligibilityMasterUpdate {
	emu.mutation.ClearStatus()
	return emu
}

// SetCreatedById sets the "CreatedById" field.
func (emu *EligibilityMasterUpdate) SetCreatedById(i int32) *EligibilityMasterUpdate {
	emu.mutation.ResetCreatedById()
	emu.mutation.SetCreatedById(i)
	return emu
}

// SetNillableCreatedById sets the "CreatedById" field if the given value is not nil.
func (emu *EligibilityMasterUpdate) SetNillableCreatedById(i *int32) *EligibilityMasterUpdate {
	if i != nil {
		emu.SetCreatedById(*i)
	}
	return emu
}

// AddCreatedById adds i to the "CreatedById" field.
func (emu *EligibilityMasterUpdate) AddCreatedById(i int32) *EligibilityMasterUpdate {
	emu.mutation.AddCreatedById(i)
	return emu
}

// ClearCreatedById clears the value of the "CreatedById" field.
func (emu *EligibilityMasterUpdate) ClearCreatedById() *EligibilityMasterUpdate {
	emu.mutation.ClearCreatedById()
	return emu
}

// SetCreatedByUserName sets the "CreatedByUserName" field.
func (emu *EligibilityMasterUpdate) SetCreatedByUserName(s string) *EligibilityMasterUpdate {
	emu.mutation.SetCreatedByUserName(s)
	return emu
}

// SetNillableCreatedByUserName sets the "CreatedByUserName" field if the given value is not nil.
func (emu *EligibilityMasterUpdate) SetNillableCreatedByUserName(s *string) *EligibilityMasterUpdate {
	if s != nil {
		emu.SetCreatedByUserName(*s)
	}
	return emu
}

// ClearCreatedByUserName clears the value of the "CreatedByUserName" field.
func (emu *EligibilityMasterUpdate) ClearCreatedByUserName() *EligibilityMasterUpdate {
	emu.mutation.ClearCreatedByUserName()
	return emu
}

// SetCreatedByEmployeeId sets the "CreatedByEmployeeId" field.
func (emu *EligibilityMasterUpdate) SetCreatedByEmployeeId(s string) *EligibilityMasterUpdate {
	emu.mutation.SetCreatedByEmployeeId(s)
	return emu
}

// SetNillableCreatedByEmployeeId sets the "CreatedByEmployeeId" field if the given value is not nil.
func (emu *EligibilityMasterUpdate) SetNillableCreatedByEmployeeId(s *string) *EligibilityMasterUpdate {
	if s != nil {
		emu.SetCreatedByEmployeeId(*s)
	}
	return emu
}

// ClearCreatedByEmployeeId clears the value of the "CreatedByEmployeeId" field.
func (emu *EligibilityMasterUpdate) ClearCreatedByEmployeeId() *EligibilityMasterUpdate {
	emu.mutation.ClearCreatedByEmployeeId()
	return emu
}

// SetCreatedByDesignation sets the "CreatedByDesignation" field.
func (emu *EligibilityMasterUpdate) SetCreatedByDesignation(s string) *EligibilityMasterUpdate {
	emu.mutation.SetCreatedByDesignation(s)
	return emu
}

// SetNillableCreatedByDesignation sets the "CreatedByDesignation" field if the given value is not nil.
func (emu *EligibilityMasterUpdate) SetNillableCreatedByDesignation(s *string) *EligibilityMasterUpdate {
	if s != nil {
		emu.SetCreatedByDesignation(*s)
	}
	return emu
}

// ClearCreatedByDesignation clears the value of the "CreatedByDesignation" field.
func (emu *EligibilityMasterUpdate) ClearCreatedByDesignation() *EligibilityMasterUpdate {
	emu.mutation.ClearCreatedByDesignation()
	return emu
}

// SetCreatedDate sets the "CreatedDate" field.
func (emu *EligibilityMasterUpdate) SetCreatedDate(t time.Time) *EligibilityMasterUpdate {
	emu.mutation.SetCreatedDate(t)
	return emu
}

// SetNillableCreatedDate sets the "CreatedDate" field if the given value is not nil.
func (emu *EligibilityMasterUpdate) SetNillableCreatedDate(t *time.Time) *EligibilityMasterUpdate {
	if t != nil {
		emu.SetCreatedDate(*t)
	}
	return emu
}

// ClearCreatedDate clears the value of the "CreatedDate" field.
func (emu *EligibilityMasterUpdate) ClearCreatedDate() *EligibilityMasterUpdate {
	emu.mutation.ClearCreatedDate()
	return emu
}

// SetVerifiedById sets the "VerifiedById" field.
func (emu *EligibilityMasterUpdate) SetVerifiedById(i int64) *EligibilityMasterUpdate {
	emu.mutation.ResetVerifiedById()
	emu.mutation.SetVerifiedById(i)
	return emu
}

// SetNillableVerifiedById sets the "VerifiedById" field if the given value is not nil.
func (emu *EligibilityMasterUpdate) SetNillableVerifiedById(i *int64) *EligibilityMasterUpdate {
	if i != nil {
		emu.SetVerifiedById(*i)
	}
	return emu
}

// AddVerifiedById adds i to the "VerifiedById" field.
func (emu *EligibilityMasterUpdate) AddVerifiedById(i int64) *EligibilityMasterUpdate {
	emu.mutation.AddVerifiedById(i)
	return emu
}

// ClearVerifiedById clears the value of the "VerifiedById" field.
func (emu *EligibilityMasterUpdate) ClearVerifiedById() *EligibilityMasterUpdate {
	emu.mutation.ClearVerifiedById()
	return emu
}

// SetVerifiedByUserName sets the "VerifiedByUserName" field.
func (emu *EligibilityMasterUpdate) SetVerifiedByUserName(s string) *EligibilityMasterUpdate {
	emu.mutation.SetVerifiedByUserName(s)
	return emu
}

// SetNillableVerifiedByUserName sets the "VerifiedByUserName" field if the given value is not nil.
func (emu *EligibilityMasterUpdate) SetNillableVerifiedByUserName(s *string) *EligibilityMasterUpdate {
	if s != nil {
		emu.SetVerifiedByUserName(*s)
	}
	return emu
}

// ClearVerifiedByUserName clears the value of the "VerifiedByUserName" field.
func (emu *EligibilityMasterUpdate) ClearVerifiedByUserName() *EligibilityMasterUpdate {
	emu.mutation.ClearVerifiedByUserName()
	return emu
}

// SetVerifiedByEmployeeId sets the "VerifiedByEmployeeId" field.
func (emu *EligibilityMasterUpdate) SetVerifiedByEmployeeId(s string) *EligibilityMasterUpdate {
	emu.mutation.SetVerifiedByEmployeeId(s)
	return emu
}

// SetNillableVerifiedByEmployeeId sets the "VerifiedByEmployeeId" field if the given value is not nil.
func (emu *EligibilityMasterUpdate) SetNillableVerifiedByEmployeeId(s *string) *EligibilityMasterUpdate {
	if s != nil {
		emu.SetVerifiedByEmployeeId(*s)
	}
	return emu
}

// ClearVerifiedByEmployeeId clears the value of the "VerifiedByEmployeeId" field.
func (emu *EligibilityMasterUpdate) ClearVerifiedByEmployeeId() *EligibilityMasterUpdate {
	emu.mutation.ClearVerifiedByEmployeeId()
	return emu
}

// SetVerifiedByDesignation sets the "VerifiedByDesignation" field.
func (emu *EligibilityMasterUpdate) SetVerifiedByDesignation(s string) *EligibilityMasterUpdate {
	emu.mutation.SetVerifiedByDesignation(s)
	return emu
}

// SetNillableVerifiedByDesignation sets the "VerifiedByDesignation" field if the given value is not nil.
func (emu *EligibilityMasterUpdate) SetNillableVerifiedByDesignation(s *string) *EligibilityMasterUpdate {
	if s != nil {
		emu.SetVerifiedByDesignation(*s)
	}
	return emu
}

// ClearVerifiedByDesignation clears the value of the "VerifiedByDesignation" field.
func (emu *EligibilityMasterUpdate) ClearVerifiedByDesignation() *EligibilityMasterUpdate {
	emu.mutation.ClearVerifiedByDesignation()
	return emu
}

// SetVerifiedDate sets the "VerifiedDate" field.
func (emu *EligibilityMasterUpdate) SetVerifiedDate(t time.Time) *EligibilityMasterUpdate {
	emu.mutation.SetVerifiedDate(t)
	return emu
}

// SetNillableVerifiedDate sets the "VerifiedDate" field if the given value is not nil.
func (emu *EligibilityMasterUpdate) SetNillableVerifiedDate(t *time.Time) *EligibilityMasterUpdate {
	if t != nil {
		emu.SetVerifiedDate(*t)
	}
	return emu
}

// ClearVerifiedDate clears the value of the "VerifiedDate" field.
func (emu *EligibilityMasterUpdate) ClearVerifiedDate() *EligibilityMasterUpdate {
	emu.mutation.ClearVerifiedDate()
	return emu
}

// SetDeletedById sets the "DeletedById" field.
func (emu *EligibilityMasterUpdate) SetDeletedById(i int64) *EligibilityMasterUpdate {
	emu.mutation.ResetDeletedById()
	emu.mutation.SetDeletedById(i)
	return emu
}

// SetNillableDeletedById sets the "DeletedById" field if the given value is not nil.
func (emu *EligibilityMasterUpdate) SetNillableDeletedById(i *int64) *EligibilityMasterUpdate {
	if i != nil {
		emu.SetDeletedById(*i)
	}
	return emu
}

// AddDeletedById adds i to the "DeletedById" field.
func (emu *EligibilityMasterUpdate) AddDeletedById(i int64) *EligibilityMasterUpdate {
	emu.mutation.AddDeletedById(i)
	return emu
}

// ClearDeletedById clears the value of the "DeletedById" field.
func (emu *EligibilityMasterUpdate) ClearDeletedById() *EligibilityMasterUpdate {
	emu.mutation.ClearDeletedById()
	return emu
}

// SetDeletedByUserName sets the "DeletedByUserName" field.
func (emu *EligibilityMasterUpdate) SetDeletedByUserName(s string) *EligibilityMasterUpdate {
	emu.mutation.SetDeletedByUserName(s)
	return emu
}

// SetNillableDeletedByUserName sets the "DeletedByUserName" field if the given value is not nil.
func (emu *EligibilityMasterUpdate) SetNillableDeletedByUserName(s *string) *EligibilityMasterUpdate {
	if s != nil {
		emu.SetDeletedByUserName(*s)
	}
	return emu
}

// ClearDeletedByUserName clears the value of the "DeletedByUserName" field.
func (emu *EligibilityMasterUpdate) ClearDeletedByUserName() *EligibilityMasterUpdate {
	emu.mutation.ClearDeletedByUserName()
	return emu
}

// SetDeletedByEmployeeId sets the "DeletedByEmployeeId" field.
func (emu *EligibilityMasterUpdate) SetDeletedByEmployeeId(s string) *EligibilityMasterUpdate {
	emu.mutation.SetDeletedByEmployeeId(s)
	return emu
}

// SetNillableDeletedByEmployeeId sets the "DeletedByEmployeeId" field if the given value is not nil.
func (emu *EligibilityMasterUpdate) SetNillableDeletedByEmployeeId(s *string) *EligibilityMasterUpdate {
	if s != nil {
		emu.SetDeletedByEmployeeId(*s)
	}
	return emu
}

// ClearDeletedByEmployeeId clears the value of the "DeletedByEmployeeId" field.
func (emu *EligibilityMasterUpdate) ClearDeletedByEmployeeId() *EligibilityMasterUpdate {
	emu.mutation.ClearDeletedByEmployeeId()
	return emu
}

// SetDeletedByDesignation sets the "DeletedByDesignation" field.
func (emu *EligibilityMasterUpdate) SetDeletedByDesignation(s string) *EligibilityMasterUpdate {
	emu.mutation.SetDeletedByDesignation(s)
	return emu
}

// SetNillableDeletedByDesignation sets the "DeletedByDesignation" field if the given value is not nil.
func (emu *EligibilityMasterUpdate) SetNillableDeletedByDesignation(s *string) *EligibilityMasterUpdate {
	if s != nil {
		emu.SetDeletedByDesignation(*s)
	}
	return emu
}

// ClearDeletedByDesignation clears the value of the "DeletedByDesignation" field.
func (emu *EligibilityMasterUpdate) ClearDeletedByDesignation() *EligibilityMasterUpdate {
	emu.mutation.ClearDeletedByDesignation()
	return emu
}

// SetDeletedDate sets the "DeletedDate" field.
func (emu *EligibilityMasterUpdate) SetDeletedDate(t time.Time) *EligibilityMasterUpdate {
	emu.mutation.SetDeletedDate(t)
	return emu
}

// SetNillableDeletedDate sets the "DeletedDate" field if the given value is not nil.
func (emu *EligibilityMasterUpdate) SetNillableDeletedDate(t *time.Time) *EligibilityMasterUpdate {
	if t != nil {
		emu.SetDeletedDate(*t)
	}
	return emu
}

// ClearDeletedDate clears the value of the "DeletedDate" field.
func (emu *EligibilityMasterUpdate) ClearDeletedDate() *EligibilityMasterUpdate {
	emu.mutation.ClearDeletedDate()
	return emu
}

// AddNotificationIDs adds the "Notifications" edge to the Notification entity by IDs.
func (emu *EligibilityMasterUpdate) AddNotificationIDs(ids ...int32) *EligibilityMasterUpdate {
	emu.mutation.AddNotificationIDs(ids...)
	return emu
}

// AddNotifications adds the "Notifications" edges to the Notification entity.
func (emu *EligibilityMasterUpdate) AddNotifications(n ...*Notification) *EligibilityMasterUpdate {
	ids := make([]int32, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return emu.AddNotificationIDs(ids...)
}

// AddCategoryEligibilityIDs adds the "CategoryEligibility" edge to the EmployeeCategory entity by IDs.
func (emu *EligibilityMasterUpdate) AddCategoryEligibilityIDs(ids ...int32) *EligibilityMasterUpdate {
	emu.mutation.AddCategoryEligibilityIDs(ids...)
	return emu
}

// AddCategoryEligibility adds the "CategoryEligibility" edges to the EmployeeCategory entity.
func (emu *EligibilityMasterUpdate) AddCategoryEligibility(e ...*EmployeeCategory) *EligibilityMasterUpdate {
	ids := make([]int32, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return emu.AddCategoryEligibilityIDs(ids...)
}

// AddPostEligibilityIDs adds the "PostEligibility" edge to the EmployeePosts entity by IDs.
func (emu *EligibilityMasterUpdate) AddPostEligibilityIDs(ids ...int32) *EligibilityMasterUpdate {
	emu.mutation.AddPostEligibilityIDs(ids...)
	return emu
}

// AddPostEligibility adds the "PostEligibility" edges to the EmployeePosts entity.
func (emu *EligibilityMasterUpdate) AddPostEligibility(e ...*EmployeePosts) *EligibilityMasterUpdate {
	ids := make([]int32, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return emu.AddPostEligibilityIDs(ids...)
}

// SetExamPaperEligibilityID sets the "ExamPaper_Eligibility" edge to the ExamPapers entity by ID.
func (emu *EligibilityMasterUpdate) SetExamPaperEligibilityID(id int32) *EligibilityMasterUpdate {
	emu.mutation.SetExamPaperEligibilityID(id)
	return emu
}

// SetNillableExamPaperEligibilityID sets the "ExamPaper_Eligibility" edge to the ExamPapers entity by ID if the given value is not nil.
func (emu *EligibilityMasterUpdate) SetNillableExamPaperEligibilityID(id *int32) *EligibilityMasterUpdate {
	if id != nil {
		emu = emu.SetExamPaperEligibilityID(*id)
	}
	return emu
}

// SetExamPaperEligibility sets the "ExamPaper_Eligibility" edge to the ExamPapers entity.
func (emu *EligibilityMasterUpdate) SetExamPaperEligibility(e *ExamPapers) *EligibilityMasterUpdate {
	return emu.SetExamPaperEligibilityID(e.ID)
}

// SetExamEligibilityID sets the "Exam_Eligibility" edge to the Exam entity by ID.
func (emu *EligibilityMasterUpdate) SetExamEligibilityID(id int32) *EligibilityMasterUpdate {
	emu.mutation.SetExamEligibilityID(id)
	return emu
}

// SetNillableExamEligibilityID sets the "Exam_Eligibility" edge to the Exam entity by ID if the given value is not nil.
func (emu *EligibilityMasterUpdate) SetNillableExamEligibilityID(id *int32) *EligibilityMasterUpdate {
	if id != nil {
		emu = emu.SetExamEligibilityID(*id)
	}
	return emu
}

// SetExamEligibility sets the "Exam_Eligibility" edge to the Exam entity.
func (emu *EligibilityMasterUpdate) SetExamEligibility(e *Exam) *EligibilityMasterUpdate {
	return emu.SetExamEligibilityID(e.ID)
}

// Mutation returns the EligibilityMasterMutation object of the builder.
func (emu *EligibilityMasterUpdate) Mutation() *EligibilityMasterMutation {
	return emu.mutation
}

// ClearNotifications clears all "Notifications" edges to the Notification entity.
func (emu *EligibilityMasterUpdate) ClearNotifications() *EligibilityMasterUpdate {
	emu.mutation.ClearNotifications()
	return emu
}

// RemoveNotificationIDs removes the "Notifications" edge to Notification entities by IDs.
func (emu *EligibilityMasterUpdate) RemoveNotificationIDs(ids ...int32) *EligibilityMasterUpdate {
	emu.mutation.RemoveNotificationIDs(ids...)
	return emu
}

// RemoveNotifications removes "Notifications" edges to Notification entities.
func (emu *EligibilityMasterUpdate) RemoveNotifications(n ...*Notification) *EligibilityMasterUpdate {
	ids := make([]int32, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return emu.RemoveNotificationIDs(ids...)
}

// ClearCategoryEligibility clears all "CategoryEligibility" edges to the EmployeeCategory entity.
func (emu *EligibilityMasterUpdate) ClearCategoryEligibility() *EligibilityMasterUpdate {
	emu.mutation.ClearCategoryEligibility()
	return emu
}

// RemoveCategoryEligibilityIDs removes the "CategoryEligibility" edge to EmployeeCategory entities by IDs.
func (emu *EligibilityMasterUpdate) RemoveCategoryEligibilityIDs(ids ...int32) *EligibilityMasterUpdate {
	emu.mutation.RemoveCategoryEligibilityIDs(ids...)
	return emu
}

// RemoveCategoryEligibility removes "CategoryEligibility" edges to EmployeeCategory entities.
func (emu *EligibilityMasterUpdate) RemoveCategoryEligibility(e ...*EmployeeCategory) *EligibilityMasterUpdate {
	ids := make([]int32, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return emu.RemoveCategoryEligibilityIDs(ids...)
}

// ClearPostEligibility clears all "PostEligibility" edges to the EmployeePosts entity.
func (emu *EligibilityMasterUpdate) ClearPostEligibility() *EligibilityMasterUpdate {
	emu.mutation.ClearPostEligibility()
	return emu
}

// RemovePostEligibilityIDs removes the "PostEligibility" edge to EmployeePosts entities by IDs.
func (emu *EligibilityMasterUpdate) RemovePostEligibilityIDs(ids ...int32) *EligibilityMasterUpdate {
	emu.mutation.RemovePostEligibilityIDs(ids...)
	return emu
}

// RemovePostEligibility removes "PostEligibility" edges to EmployeePosts entities.
func (emu *EligibilityMasterUpdate) RemovePostEligibility(e ...*EmployeePosts) *EligibilityMasterUpdate {
	ids := make([]int32, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return emu.RemovePostEligibilityIDs(ids...)
}

// ClearExamPaperEligibility clears the "ExamPaper_Eligibility" edge to the ExamPapers entity.
func (emu *EligibilityMasterUpdate) ClearExamPaperEligibility() *EligibilityMasterUpdate {
	emu.mutation.ClearExamPaperEligibility()
	return emu
}

// ClearExamEligibility clears the "Exam_Eligibility" edge to the Exam entity.
func (emu *EligibilityMasterUpdate) ClearExamEligibility() *EligibilityMasterUpdate {
	emu.mutation.ClearExamEligibility()
	return emu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (emu *EligibilityMasterUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, emu.sqlSave, emu.mutation, emu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (emu *EligibilityMasterUpdate) SaveX(ctx context.Context) int {
	affected, err := emu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (emu *EligibilityMasterUpdate) Exec(ctx context.Context) error {
	_, err := emu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (emu *EligibilityMasterUpdate) ExecX(ctx context.Context) {
	if err := emu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (emu *EligibilityMasterUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(eligibilitymaster.Table, eligibilitymaster.Columns, sqlgraph.NewFieldSpec(eligibilitymaster.FieldID, field.TypeInt32))
	if ps := emu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := emu.mutation.ExamName(); ok {
		_spec.SetField(eligibilitymaster.FieldExamName, field.TypeString, value)
	}
	if value, ok := emu.mutation.PostCode(); ok {
		_spec.SetField(eligibilitymaster.FieldPostCode, field.TypeString, value)
	}
	if emu.mutation.PostCodeCleared() {
		_spec.ClearField(eligibilitymaster.FieldPostCode, field.TypeString)
	}
	if value, ok := emu.mutation.GdsService(); ok {
		_spec.SetField(eligibilitymaster.FieldGdsService, field.TypeBool, value)
	}
	if value, ok := emu.mutation.AgeCriteria(); ok {
		_spec.SetField(eligibilitymaster.FieldAgeCriteria, field.TypeInt32, value)
	}
	if value, ok := emu.mutation.AddedAgeCriteria(); ok {
		_spec.AddField(eligibilitymaster.FieldAgeCriteria, field.TypeInt32, value)
	}
	if emu.mutation.AgeCriteriaCleared() {
		_spec.ClearField(eligibilitymaster.FieldAgeCriteria, field.TypeInt32)
	}
	if value, ok := emu.mutation.ServiceCriteria(); ok {
		_spec.SetField(eligibilitymaster.FieldServiceCriteria, field.TypeInt32, value)
	}
	if value, ok := emu.mutation.AddedServiceCriteria(); ok {
		_spec.AddField(eligibilitymaster.FieldServiceCriteria, field.TypeInt32, value)
	}
	if emu.mutation.ServiceCriteriaCleared() {
		_spec.ClearField(eligibilitymaster.FieldServiceCriteria, field.TypeInt32)
	}
	if value, ok := emu.mutation.DrivingLicenseCriteria(); ok {
		_spec.SetField(eligibilitymaster.FieldDrivingLicenseCriteria, field.TypeBool, value)
	}
	if value, ok := emu.mutation.ComputerKnowledge(); ok {
		_spec.SetField(eligibilitymaster.FieldComputerKnowledge, field.TypeBool, value)
	}
	if value, ok := emu.mutation.LevelOfPayMatrixEligibility(); ok {
		_spec.SetField(eligibilitymaster.FieldLevelOfPayMatrixEligibility, field.TypeBool, value)
	}
	if value, ok := emu.mutation.Education(); ok {
		_spec.SetField(eligibilitymaster.FieldEducation, field.TypeString, value)
	}
	if value, ok := emu.mutation.NotifyCode(); ok {
		_spec.SetField(eligibilitymaster.FieldNotifyCode, field.TypeInt32, value)
	}
	if value, ok := emu.mutation.AddedNotifyCode(); ok {
		_spec.AddField(eligibilitymaster.FieldNotifyCode, field.TypeInt32, value)
	}
	if emu.mutation.NotifyCodeCleared() {
		_spec.ClearField(eligibilitymaster.FieldNotifyCode, field.TypeInt32)
	}
	if value, ok := emu.mutation.CategoryCode(); ok {
		_spec.SetField(eligibilitymaster.FieldCategoryCode, field.TypeString, value)
	}
	if emu.mutation.CategoryCodeCleared() {
		_spec.ClearField(eligibilitymaster.FieldCategoryCode, field.TypeString)
	}
	if value, ok := emu.mutation.PaperDescription(); ok {
		_spec.SetField(eligibilitymaster.FieldPaperDescription, field.TypeString, value)
	}
	if value, ok := emu.mutation.MinimumMarks(); ok {
		_spec.SetField(eligibilitymaster.FieldMinimumMarks, field.TypeInt32, value)
	}
	if value, ok := emu.mutation.AddedMinimumMarks(); ok {
		_spec.AddField(eligibilitymaster.FieldMinimumMarks, field.TypeInt32, value)
	}
	if value, ok := emu.mutation.OrderNumber(); ok {
		_spec.SetField(eligibilitymaster.FieldOrderNumber, field.TypeString, value)
	}
	if emu.mutation.OrderNumberCleared() {
		_spec.ClearField(eligibilitymaster.FieldOrderNumber, field.TypeString)
	}
	if value, ok := emu.mutation.Status(); ok {
		_spec.SetField(eligibilitymaster.FieldStatus, field.TypeString, value)
	}
	if emu.mutation.StatusCleared() {
		_spec.ClearField(eligibilitymaster.FieldStatus, field.TypeString)
	}
	if value, ok := emu.mutation.CreatedById(); ok {
		_spec.SetField(eligibilitymaster.FieldCreatedById, field.TypeInt32, value)
	}
	if value, ok := emu.mutation.AddedCreatedById(); ok {
		_spec.AddField(eligibilitymaster.FieldCreatedById, field.TypeInt32, value)
	}
	if emu.mutation.CreatedByIdCleared() {
		_spec.ClearField(eligibilitymaster.FieldCreatedById, field.TypeInt32)
	}
	if value, ok := emu.mutation.CreatedByUserName(); ok {
		_spec.SetField(eligibilitymaster.FieldCreatedByUserName, field.TypeString, value)
	}
	if emu.mutation.CreatedByUserNameCleared() {
		_spec.ClearField(eligibilitymaster.FieldCreatedByUserName, field.TypeString)
	}
	if value, ok := emu.mutation.CreatedByEmployeeId(); ok {
		_spec.SetField(eligibilitymaster.FieldCreatedByEmployeeId, field.TypeString, value)
	}
	if emu.mutation.CreatedByEmployeeIdCleared() {
		_spec.ClearField(eligibilitymaster.FieldCreatedByEmployeeId, field.TypeString)
	}
	if value, ok := emu.mutation.CreatedByDesignation(); ok {
		_spec.SetField(eligibilitymaster.FieldCreatedByDesignation, field.TypeString, value)
	}
	if emu.mutation.CreatedByDesignationCleared() {
		_spec.ClearField(eligibilitymaster.FieldCreatedByDesignation, field.TypeString)
	}
	if value, ok := emu.mutation.CreatedDate(); ok {
		_spec.SetField(eligibilitymaster.FieldCreatedDate, field.TypeTime, value)
	}
	if emu.mutation.CreatedDateCleared() {
		_spec.ClearField(eligibilitymaster.FieldCreatedDate, field.TypeTime)
	}
	if value, ok := emu.mutation.VerifiedById(); ok {
		_spec.SetField(eligibilitymaster.FieldVerifiedById, field.TypeInt64, value)
	}
	if value, ok := emu.mutation.AddedVerifiedById(); ok {
		_spec.AddField(eligibilitymaster.FieldVerifiedById, field.TypeInt64, value)
	}
	if emu.mutation.VerifiedByIdCleared() {
		_spec.ClearField(eligibilitymaster.FieldVerifiedById, field.TypeInt64)
	}
	if value, ok := emu.mutation.VerifiedByUserName(); ok {
		_spec.SetField(eligibilitymaster.FieldVerifiedByUserName, field.TypeString, value)
	}
	if emu.mutation.VerifiedByUserNameCleared() {
		_spec.ClearField(eligibilitymaster.FieldVerifiedByUserName, field.TypeString)
	}
	if value, ok := emu.mutation.VerifiedByEmployeeId(); ok {
		_spec.SetField(eligibilitymaster.FieldVerifiedByEmployeeId, field.TypeString, value)
	}
	if emu.mutation.VerifiedByEmployeeIdCleared() {
		_spec.ClearField(eligibilitymaster.FieldVerifiedByEmployeeId, field.TypeString)
	}
	if value, ok := emu.mutation.VerifiedByDesignation(); ok {
		_spec.SetField(eligibilitymaster.FieldVerifiedByDesignation, field.TypeString, value)
	}
	if emu.mutation.VerifiedByDesignationCleared() {
		_spec.ClearField(eligibilitymaster.FieldVerifiedByDesignation, field.TypeString)
	}
	if value, ok := emu.mutation.VerifiedDate(); ok {
		_spec.SetField(eligibilitymaster.FieldVerifiedDate, field.TypeTime, value)
	}
	if emu.mutation.VerifiedDateCleared() {
		_spec.ClearField(eligibilitymaster.FieldVerifiedDate, field.TypeTime)
	}
	if value, ok := emu.mutation.DeletedById(); ok {
		_spec.SetField(eligibilitymaster.FieldDeletedById, field.TypeInt64, value)
	}
	if value, ok := emu.mutation.AddedDeletedById(); ok {
		_spec.AddField(eligibilitymaster.FieldDeletedById, field.TypeInt64, value)
	}
	if emu.mutation.DeletedByIdCleared() {
		_spec.ClearField(eligibilitymaster.FieldDeletedById, field.TypeInt64)
	}
	if value, ok := emu.mutation.DeletedByUserName(); ok {
		_spec.SetField(eligibilitymaster.FieldDeletedByUserName, field.TypeString, value)
	}
	if emu.mutation.DeletedByUserNameCleared() {
		_spec.ClearField(eligibilitymaster.FieldDeletedByUserName, field.TypeString)
	}
	if value, ok := emu.mutation.DeletedByEmployeeId(); ok {
		_spec.SetField(eligibilitymaster.FieldDeletedByEmployeeId, field.TypeString, value)
	}
	if emu.mutation.DeletedByEmployeeIdCleared() {
		_spec.ClearField(eligibilitymaster.FieldDeletedByEmployeeId, field.TypeString)
	}
	if value, ok := emu.mutation.DeletedByDesignation(); ok {
		_spec.SetField(eligibilitymaster.FieldDeletedByDesignation, field.TypeString, value)
	}
	if emu.mutation.DeletedByDesignationCleared() {
		_spec.ClearField(eligibilitymaster.FieldDeletedByDesignation, field.TypeString)
	}
	if value, ok := emu.mutation.DeletedDate(); ok {
		_spec.SetField(eligibilitymaster.FieldDeletedDate, field.TypeTime, value)
	}
	if emu.mutation.DeletedDateCleared() {
		_spec.ClearField(eligibilitymaster.FieldDeletedDate, field.TypeTime)
	}
	if emu.mutation.NotificationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   eligibilitymaster.NotificationsTable,
			Columns: []string{eligibilitymaster.NotificationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notification.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := emu.mutation.RemovedNotificationsIDs(); len(nodes) > 0 && !emu.mutation.NotificationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   eligibilitymaster.NotificationsTable,
			Columns: []string{eligibilitymaster.NotificationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notification.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := emu.mutation.NotificationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   eligibilitymaster.NotificationsTable,
			Columns: []string{eligibilitymaster.NotificationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notification.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if emu.mutation.CategoryEligibilityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   eligibilitymaster.CategoryEligibilityTable,
			Columns: []string{eligibilitymaster.CategoryEligibilityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employeecategory.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := emu.mutation.RemovedCategoryEligibilityIDs(); len(nodes) > 0 && !emu.mutation.CategoryEligibilityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   eligibilitymaster.CategoryEligibilityTable,
			Columns: []string{eligibilitymaster.CategoryEligibilityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employeecategory.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := emu.mutation.CategoryEligibilityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   eligibilitymaster.CategoryEligibilityTable,
			Columns: []string{eligibilitymaster.CategoryEligibilityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employeecategory.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if emu.mutation.PostEligibilityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   eligibilitymaster.PostEligibilityTable,
			Columns: []string{eligibilitymaster.PostEligibilityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employeeposts.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := emu.mutation.RemovedPostEligibilityIDs(); len(nodes) > 0 && !emu.mutation.PostEligibilityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   eligibilitymaster.PostEligibilityTable,
			Columns: []string{eligibilitymaster.PostEligibilityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employeeposts.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := emu.mutation.PostEligibilityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   eligibilitymaster.PostEligibilityTable,
			Columns: []string{eligibilitymaster.PostEligibilityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employeeposts.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if emu.mutation.ExamPaperEligibilityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   eligibilitymaster.ExamPaperEligibilityTable,
			Columns: []string{eligibilitymaster.ExamPaperEligibilityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exampapers.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := emu.mutation.ExamPaperEligibilityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   eligibilitymaster.ExamPaperEligibilityTable,
			Columns: []string{eligibilitymaster.ExamPaperEligibilityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exampapers.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if emu.mutation.ExamEligibilityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   eligibilitymaster.ExamEligibilityTable,
			Columns: []string{eligibilitymaster.ExamEligibilityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := emu.mutation.ExamEligibilityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   eligibilitymaster.ExamEligibilityTable,
			Columns: []string{eligibilitymaster.ExamEligibilityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, emu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{eligibilitymaster.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	emu.mutation.done = true
	return n, nil
}

// EligibilityMasterUpdateOne is the builder for updating a single EligibilityMaster entity.
type EligibilityMasterUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *EligibilityMasterMutation
}

// SetExamCode sets the "ExamCode" field.
func (emuo *EligibilityMasterUpdateOne) SetExamCode(i int32) *EligibilityMasterUpdateOne {
	emuo.mutation.SetExamCode(i)
	return emuo
}

// SetNillableExamCode sets the "ExamCode" field if the given value is not nil.
func (emuo *EligibilityMasterUpdateOne) SetNillableExamCode(i *int32) *EligibilityMasterUpdateOne {
	if i != nil {
		emuo.SetExamCode(*i)
	}
	return emuo
}

// ClearExamCode clears the value of the "ExamCode" field.
func (emuo *EligibilityMasterUpdateOne) ClearExamCode() *EligibilityMasterUpdateOne {
	emuo.mutation.ClearExamCode()
	return emuo
}

// SetExamName sets the "ExamName" field.
func (emuo *EligibilityMasterUpdateOne) SetExamName(s string) *EligibilityMasterUpdateOne {
	emuo.mutation.SetExamName(s)
	return emuo
}

// SetPostCode sets the "PostCode" field.
func (emuo *EligibilityMasterUpdateOne) SetPostCode(s string) *EligibilityMasterUpdateOne {
	emuo.mutation.SetPostCode(s)
	return emuo
}

// SetNillablePostCode sets the "PostCode" field if the given value is not nil.
func (emuo *EligibilityMasterUpdateOne) SetNillablePostCode(s *string) *EligibilityMasterUpdateOne {
	if s != nil {
		emuo.SetPostCode(*s)
	}
	return emuo
}

// ClearPostCode clears the value of the "PostCode" field.
func (emuo *EligibilityMasterUpdateOne) ClearPostCode() *EligibilityMasterUpdateOne {
	emuo.mutation.ClearPostCode()
	return emuo
}

// SetGdsService sets the "gdsService" field.
func (emuo *EligibilityMasterUpdateOne) SetGdsService(b bool) *EligibilityMasterUpdateOne {
	emuo.mutation.SetGdsService(b)
	return emuo
}

// SetNillableGdsService sets the "gdsService" field if the given value is not nil.
func (emuo *EligibilityMasterUpdateOne) SetNillableGdsService(b *bool) *EligibilityMasterUpdateOne {
	if b != nil {
		emuo.SetGdsService(*b)
	}
	return emuo
}

// SetAgeCriteria sets the "AgeCriteria" field.
func (emuo *EligibilityMasterUpdateOne) SetAgeCriteria(i int32) *EligibilityMasterUpdateOne {
	emuo.mutation.ResetAgeCriteria()
	emuo.mutation.SetAgeCriteria(i)
	return emuo
}

// SetNillableAgeCriteria sets the "AgeCriteria" field if the given value is not nil.
func (emuo *EligibilityMasterUpdateOne) SetNillableAgeCriteria(i *int32) *EligibilityMasterUpdateOne {
	if i != nil {
		emuo.SetAgeCriteria(*i)
	}
	return emuo
}

// AddAgeCriteria adds i to the "AgeCriteria" field.
func (emuo *EligibilityMasterUpdateOne) AddAgeCriteria(i int32) *EligibilityMasterUpdateOne {
	emuo.mutation.AddAgeCriteria(i)
	return emuo
}

// ClearAgeCriteria clears the value of the "AgeCriteria" field.
func (emuo *EligibilityMasterUpdateOne) ClearAgeCriteria() *EligibilityMasterUpdateOne {
	emuo.mutation.ClearAgeCriteria()
	return emuo
}

// SetServiceCriteria sets the "ServiceCriteria" field.
func (emuo *EligibilityMasterUpdateOne) SetServiceCriteria(i int32) *EligibilityMasterUpdateOne {
	emuo.mutation.ResetServiceCriteria()
	emuo.mutation.SetServiceCriteria(i)
	return emuo
}

// SetNillableServiceCriteria sets the "ServiceCriteria" field if the given value is not nil.
func (emuo *EligibilityMasterUpdateOne) SetNillableServiceCriteria(i *int32) *EligibilityMasterUpdateOne {
	if i != nil {
		emuo.SetServiceCriteria(*i)
	}
	return emuo
}

// AddServiceCriteria adds i to the "ServiceCriteria" field.
func (emuo *EligibilityMasterUpdateOne) AddServiceCriteria(i int32) *EligibilityMasterUpdateOne {
	emuo.mutation.AddServiceCriteria(i)
	return emuo
}

// ClearServiceCriteria clears the value of the "ServiceCriteria" field.
func (emuo *EligibilityMasterUpdateOne) ClearServiceCriteria() *EligibilityMasterUpdateOne {
	emuo.mutation.ClearServiceCriteria()
	return emuo
}

// SetDrivingLicenseCriteria sets the "DrivingLicenseCriteria" field.
func (emuo *EligibilityMasterUpdateOne) SetDrivingLicenseCriteria(b bool) *EligibilityMasterUpdateOne {
	emuo.mutation.SetDrivingLicenseCriteria(b)
	return emuo
}

// SetNillableDrivingLicenseCriteria sets the "DrivingLicenseCriteria" field if the given value is not nil.
func (emuo *EligibilityMasterUpdateOne) SetNillableDrivingLicenseCriteria(b *bool) *EligibilityMasterUpdateOne {
	if b != nil {
		emuo.SetDrivingLicenseCriteria(*b)
	}
	return emuo
}

// SetComputerKnowledge sets the "ComputerKnowledge" field.
func (emuo *EligibilityMasterUpdateOne) SetComputerKnowledge(b bool) *EligibilityMasterUpdateOne {
	emuo.mutation.SetComputerKnowledge(b)
	return emuo
}

// SetNillableComputerKnowledge sets the "ComputerKnowledge" field if the given value is not nil.
func (emuo *EligibilityMasterUpdateOne) SetNillableComputerKnowledge(b *bool) *EligibilityMasterUpdateOne {
	if b != nil {
		emuo.SetComputerKnowledge(*b)
	}
	return emuo
}

// SetLevelOfPayMatrixEligibility sets the "LevelOfPayMatrixEligibility" field.
func (emuo *EligibilityMasterUpdateOne) SetLevelOfPayMatrixEligibility(b bool) *EligibilityMasterUpdateOne {
	emuo.mutation.SetLevelOfPayMatrixEligibility(b)
	return emuo
}

// SetNillableLevelOfPayMatrixEligibility sets the "LevelOfPayMatrixEligibility" field if the given value is not nil.
func (emuo *EligibilityMasterUpdateOne) SetNillableLevelOfPayMatrixEligibility(b *bool) *EligibilityMasterUpdateOne {
	if b != nil {
		emuo.SetLevelOfPayMatrixEligibility(*b)
	}
	return emuo
}

// SetEducation sets the "Education" field.
func (emuo *EligibilityMasterUpdateOne) SetEducation(s string) *EligibilityMasterUpdateOne {
	emuo.mutation.SetEducation(s)
	return emuo
}

// SetNotifyCode sets the "NotifyCode" field.
func (emuo *EligibilityMasterUpdateOne) SetNotifyCode(i int32) *EligibilityMasterUpdateOne {
	emuo.mutation.ResetNotifyCode()
	emuo.mutation.SetNotifyCode(i)
	return emuo
}

// SetNillableNotifyCode sets the "NotifyCode" field if the given value is not nil.
func (emuo *EligibilityMasterUpdateOne) SetNillableNotifyCode(i *int32) *EligibilityMasterUpdateOne {
	if i != nil {
		emuo.SetNotifyCode(*i)
	}
	return emuo
}

// AddNotifyCode adds i to the "NotifyCode" field.
func (emuo *EligibilityMasterUpdateOne) AddNotifyCode(i int32) *EligibilityMasterUpdateOne {
	emuo.mutation.AddNotifyCode(i)
	return emuo
}

// ClearNotifyCode clears the value of the "NotifyCode" field.
func (emuo *EligibilityMasterUpdateOne) ClearNotifyCode() *EligibilityMasterUpdateOne {
	emuo.mutation.ClearNotifyCode()
	return emuo
}

// SetCategoryCode sets the "CategoryCode" field.
func (emuo *EligibilityMasterUpdateOne) SetCategoryCode(s string) *EligibilityMasterUpdateOne {
	emuo.mutation.SetCategoryCode(s)
	return emuo
}

// SetNillableCategoryCode sets the "CategoryCode" field if the given value is not nil.
func (emuo *EligibilityMasterUpdateOne) SetNillableCategoryCode(s *string) *EligibilityMasterUpdateOne {
	if s != nil {
		emuo.SetCategoryCode(*s)
	}
	return emuo
}

// ClearCategoryCode clears the value of the "CategoryCode" field.
func (emuo *EligibilityMasterUpdateOne) ClearCategoryCode() *EligibilityMasterUpdateOne {
	emuo.mutation.ClearCategoryCode()
	return emuo
}

// SetPaperCode sets the "PaperCode" field.
func (emuo *EligibilityMasterUpdateOne) SetPaperCode(i int32) *EligibilityMasterUpdateOne {
	emuo.mutation.SetPaperCode(i)
	return emuo
}

// SetNillablePaperCode sets the "PaperCode" field if the given value is not nil.
func (emuo *EligibilityMasterUpdateOne) SetNillablePaperCode(i *int32) *EligibilityMasterUpdateOne {
	if i != nil {
		emuo.SetPaperCode(*i)
	}
	return emuo
}

// ClearPaperCode clears the value of the "PaperCode" field.
func (emuo *EligibilityMasterUpdateOne) ClearPaperCode() *EligibilityMasterUpdateOne {
	emuo.mutation.ClearPaperCode()
	return emuo
}

// SetPaperDescription sets the "PaperDescription" field.
func (emuo *EligibilityMasterUpdateOne) SetPaperDescription(s string) *EligibilityMasterUpdateOne {
	emuo.mutation.SetPaperDescription(s)
	return emuo
}

// SetMinimumMarks sets the "MinimumMarks" field.
func (emuo *EligibilityMasterUpdateOne) SetMinimumMarks(i int32) *EligibilityMasterUpdateOne {
	emuo.mutation.ResetMinimumMarks()
	emuo.mutation.SetMinimumMarks(i)
	return emuo
}

// AddMinimumMarks adds i to the "MinimumMarks" field.
func (emuo *EligibilityMasterUpdateOne) AddMinimumMarks(i int32) *EligibilityMasterUpdateOne {
	emuo.mutation.AddMinimumMarks(i)
	return emuo
}

// SetOrderNumber sets the "OrderNumber" field.
func (emuo *EligibilityMasterUpdateOne) SetOrderNumber(s string) *EligibilityMasterUpdateOne {
	emuo.mutation.SetOrderNumber(s)
	return emuo
}

// SetNillableOrderNumber sets the "OrderNumber" field if the given value is not nil.
func (emuo *EligibilityMasterUpdateOne) SetNillableOrderNumber(s *string) *EligibilityMasterUpdateOne {
	if s != nil {
		emuo.SetOrderNumber(*s)
	}
	return emuo
}

// ClearOrderNumber clears the value of the "OrderNumber" field.
func (emuo *EligibilityMasterUpdateOne) ClearOrderNumber() *EligibilityMasterUpdateOne {
	emuo.mutation.ClearOrderNumber()
	return emuo
}

// SetStatus sets the "Status" field.
func (emuo *EligibilityMasterUpdateOne) SetStatus(s string) *EligibilityMasterUpdateOne {
	emuo.mutation.SetStatus(s)
	return emuo
}

// SetNillableStatus sets the "Status" field if the given value is not nil.
func (emuo *EligibilityMasterUpdateOne) SetNillableStatus(s *string) *EligibilityMasterUpdateOne {
	if s != nil {
		emuo.SetStatus(*s)
	}
	return emuo
}

// ClearStatus clears the value of the "Status" field.
func (emuo *EligibilityMasterUpdateOne) ClearStatus() *EligibilityMasterUpdateOne {
	emuo.mutation.ClearStatus()
	return emuo
}

// SetCreatedById sets the "CreatedById" field.
func (emuo *EligibilityMasterUpdateOne) SetCreatedById(i int32) *EligibilityMasterUpdateOne {
	emuo.mutation.ResetCreatedById()
	emuo.mutation.SetCreatedById(i)
	return emuo
}

// SetNillableCreatedById sets the "CreatedById" field if the given value is not nil.
func (emuo *EligibilityMasterUpdateOne) SetNillableCreatedById(i *int32) *EligibilityMasterUpdateOne {
	if i != nil {
		emuo.SetCreatedById(*i)
	}
	return emuo
}

// AddCreatedById adds i to the "CreatedById" field.
func (emuo *EligibilityMasterUpdateOne) AddCreatedById(i int32) *EligibilityMasterUpdateOne {
	emuo.mutation.AddCreatedById(i)
	return emuo
}

// ClearCreatedById clears the value of the "CreatedById" field.
func (emuo *EligibilityMasterUpdateOne) ClearCreatedById() *EligibilityMasterUpdateOne {
	emuo.mutation.ClearCreatedById()
	return emuo
}

// SetCreatedByUserName sets the "CreatedByUserName" field.
func (emuo *EligibilityMasterUpdateOne) SetCreatedByUserName(s string) *EligibilityMasterUpdateOne {
	emuo.mutation.SetCreatedByUserName(s)
	return emuo
}

// SetNillableCreatedByUserName sets the "CreatedByUserName" field if the given value is not nil.
func (emuo *EligibilityMasterUpdateOne) SetNillableCreatedByUserName(s *string) *EligibilityMasterUpdateOne {
	if s != nil {
		emuo.SetCreatedByUserName(*s)
	}
	return emuo
}

// ClearCreatedByUserName clears the value of the "CreatedByUserName" field.
func (emuo *EligibilityMasterUpdateOne) ClearCreatedByUserName() *EligibilityMasterUpdateOne {
	emuo.mutation.ClearCreatedByUserName()
	return emuo
}

// SetCreatedByEmployeeId sets the "CreatedByEmployeeId" field.
func (emuo *EligibilityMasterUpdateOne) SetCreatedByEmployeeId(s string) *EligibilityMasterUpdateOne {
	emuo.mutation.SetCreatedByEmployeeId(s)
	return emuo
}

// SetNillableCreatedByEmployeeId sets the "CreatedByEmployeeId" field if the given value is not nil.
func (emuo *EligibilityMasterUpdateOne) SetNillableCreatedByEmployeeId(s *string) *EligibilityMasterUpdateOne {
	if s != nil {
		emuo.SetCreatedByEmployeeId(*s)
	}
	return emuo
}

// ClearCreatedByEmployeeId clears the value of the "CreatedByEmployeeId" field.
func (emuo *EligibilityMasterUpdateOne) ClearCreatedByEmployeeId() *EligibilityMasterUpdateOne {
	emuo.mutation.ClearCreatedByEmployeeId()
	return emuo
}

// SetCreatedByDesignation sets the "CreatedByDesignation" field.
func (emuo *EligibilityMasterUpdateOne) SetCreatedByDesignation(s string) *EligibilityMasterUpdateOne {
	emuo.mutation.SetCreatedByDesignation(s)
	return emuo
}

// SetNillableCreatedByDesignation sets the "CreatedByDesignation" field if the given value is not nil.
func (emuo *EligibilityMasterUpdateOne) SetNillableCreatedByDesignation(s *string) *EligibilityMasterUpdateOne {
	if s != nil {
		emuo.SetCreatedByDesignation(*s)
	}
	return emuo
}

// ClearCreatedByDesignation clears the value of the "CreatedByDesignation" field.
func (emuo *EligibilityMasterUpdateOne) ClearCreatedByDesignation() *EligibilityMasterUpdateOne {
	emuo.mutation.ClearCreatedByDesignation()
	return emuo
}

// SetCreatedDate sets the "CreatedDate" field.
func (emuo *EligibilityMasterUpdateOne) SetCreatedDate(t time.Time) *EligibilityMasterUpdateOne {
	emuo.mutation.SetCreatedDate(t)
	return emuo
}

// SetNillableCreatedDate sets the "CreatedDate" field if the given value is not nil.
func (emuo *EligibilityMasterUpdateOne) SetNillableCreatedDate(t *time.Time) *EligibilityMasterUpdateOne {
	if t != nil {
		emuo.SetCreatedDate(*t)
	}
	return emuo
}

// ClearCreatedDate clears the value of the "CreatedDate" field.
func (emuo *EligibilityMasterUpdateOne) ClearCreatedDate() *EligibilityMasterUpdateOne {
	emuo.mutation.ClearCreatedDate()
	return emuo
}

// SetVerifiedById sets the "VerifiedById" field.
func (emuo *EligibilityMasterUpdateOne) SetVerifiedById(i int64) *EligibilityMasterUpdateOne {
	emuo.mutation.ResetVerifiedById()
	emuo.mutation.SetVerifiedById(i)
	return emuo
}

// SetNillableVerifiedById sets the "VerifiedById" field if the given value is not nil.
func (emuo *EligibilityMasterUpdateOne) SetNillableVerifiedById(i *int64) *EligibilityMasterUpdateOne {
	if i != nil {
		emuo.SetVerifiedById(*i)
	}
	return emuo
}

// AddVerifiedById adds i to the "VerifiedById" field.
func (emuo *EligibilityMasterUpdateOne) AddVerifiedById(i int64) *EligibilityMasterUpdateOne {
	emuo.mutation.AddVerifiedById(i)
	return emuo
}

// ClearVerifiedById clears the value of the "VerifiedById" field.
func (emuo *EligibilityMasterUpdateOne) ClearVerifiedById() *EligibilityMasterUpdateOne {
	emuo.mutation.ClearVerifiedById()
	return emuo
}

// SetVerifiedByUserName sets the "VerifiedByUserName" field.
func (emuo *EligibilityMasterUpdateOne) SetVerifiedByUserName(s string) *EligibilityMasterUpdateOne {
	emuo.mutation.SetVerifiedByUserName(s)
	return emuo
}

// SetNillableVerifiedByUserName sets the "VerifiedByUserName" field if the given value is not nil.
func (emuo *EligibilityMasterUpdateOne) SetNillableVerifiedByUserName(s *string) *EligibilityMasterUpdateOne {
	if s != nil {
		emuo.SetVerifiedByUserName(*s)
	}
	return emuo
}

// ClearVerifiedByUserName clears the value of the "VerifiedByUserName" field.
func (emuo *EligibilityMasterUpdateOne) ClearVerifiedByUserName() *EligibilityMasterUpdateOne {
	emuo.mutation.ClearVerifiedByUserName()
	return emuo
}

// SetVerifiedByEmployeeId sets the "VerifiedByEmployeeId" field.
func (emuo *EligibilityMasterUpdateOne) SetVerifiedByEmployeeId(s string) *EligibilityMasterUpdateOne {
	emuo.mutation.SetVerifiedByEmployeeId(s)
	return emuo
}

// SetNillableVerifiedByEmployeeId sets the "VerifiedByEmployeeId" field if the given value is not nil.
func (emuo *EligibilityMasterUpdateOne) SetNillableVerifiedByEmployeeId(s *string) *EligibilityMasterUpdateOne {
	if s != nil {
		emuo.SetVerifiedByEmployeeId(*s)
	}
	return emuo
}

// ClearVerifiedByEmployeeId clears the value of the "VerifiedByEmployeeId" field.
func (emuo *EligibilityMasterUpdateOne) ClearVerifiedByEmployeeId() *EligibilityMasterUpdateOne {
	emuo.mutation.ClearVerifiedByEmployeeId()
	return emuo
}

// SetVerifiedByDesignation sets the "VerifiedByDesignation" field.
func (emuo *EligibilityMasterUpdateOne) SetVerifiedByDesignation(s string) *EligibilityMasterUpdateOne {
	emuo.mutation.SetVerifiedByDesignation(s)
	return emuo
}

// SetNillableVerifiedByDesignation sets the "VerifiedByDesignation" field if the given value is not nil.
func (emuo *EligibilityMasterUpdateOne) SetNillableVerifiedByDesignation(s *string) *EligibilityMasterUpdateOne {
	if s != nil {
		emuo.SetVerifiedByDesignation(*s)
	}
	return emuo
}

// ClearVerifiedByDesignation clears the value of the "VerifiedByDesignation" field.
func (emuo *EligibilityMasterUpdateOne) ClearVerifiedByDesignation() *EligibilityMasterUpdateOne {
	emuo.mutation.ClearVerifiedByDesignation()
	return emuo
}

// SetVerifiedDate sets the "VerifiedDate" field.
func (emuo *EligibilityMasterUpdateOne) SetVerifiedDate(t time.Time) *EligibilityMasterUpdateOne {
	emuo.mutation.SetVerifiedDate(t)
	return emuo
}

// SetNillableVerifiedDate sets the "VerifiedDate" field if the given value is not nil.
func (emuo *EligibilityMasterUpdateOne) SetNillableVerifiedDate(t *time.Time) *EligibilityMasterUpdateOne {
	if t != nil {
		emuo.SetVerifiedDate(*t)
	}
	return emuo
}

// ClearVerifiedDate clears the value of the "VerifiedDate" field.
func (emuo *EligibilityMasterUpdateOne) ClearVerifiedDate() *EligibilityMasterUpdateOne {
	emuo.mutation.ClearVerifiedDate()
	return emuo
}

// SetDeletedById sets the "DeletedById" field.
func (emuo *EligibilityMasterUpdateOne) SetDeletedById(i int64) *EligibilityMasterUpdateOne {
	emuo.mutation.ResetDeletedById()
	emuo.mutation.SetDeletedById(i)
	return emuo
}

// SetNillableDeletedById sets the "DeletedById" field if the given value is not nil.
func (emuo *EligibilityMasterUpdateOne) SetNillableDeletedById(i *int64) *EligibilityMasterUpdateOne {
	if i != nil {
		emuo.SetDeletedById(*i)
	}
	return emuo
}

// AddDeletedById adds i to the "DeletedById" field.
func (emuo *EligibilityMasterUpdateOne) AddDeletedById(i int64) *EligibilityMasterUpdateOne {
	emuo.mutation.AddDeletedById(i)
	return emuo
}

// ClearDeletedById clears the value of the "DeletedById" field.
func (emuo *EligibilityMasterUpdateOne) ClearDeletedById() *EligibilityMasterUpdateOne {
	emuo.mutation.ClearDeletedById()
	return emuo
}

// SetDeletedByUserName sets the "DeletedByUserName" field.
func (emuo *EligibilityMasterUpdateOne) SetDeletedByUserName(s string) *EligibilityMasterUpdateOne {
	emuo.mutation.SetDeletedByUserName(s)
	return emuo
}

// SetNillableDeletedByUserName sets the "DeletedByUserName" field if the given value is not nil.
func (emuo *EligibilityMasterUpdateOne) SetNillableDeletedByUserName(s *string) *EligibilityMasterUpdateOne {
	if s != nil {
		emuo.SetDeletedByUserName(*s)
	}
	return emuo
}

// ClearDeletedByUserName clears the value of the "DeletedByUserName" field.
func (emuo *EligibilityMasterUpdateOne) ClearDeletedByUserName() *EligibilityMasterUpdateOne {
	emuo.mutation.ClearDeletedByUserName()
	return emuo
}

// SetDeletedByEmployeeId sets the "DeletedByEmployeeId" field.
func (emuo *EligibilityMasterUpdateOne) SetDeletedByEmployeeId(s string) *EligibilityMasterUpdateOne {
	emuo.mutation.SetDeletedByEmployeeId(s)
	return emuo
}

// SetNillableDeletedByEmployeeId sets the "DeletedByEmployeeId" field if the given value is not nil.
func (emuo *EligibilityMasterUpdateOne) SetNillableDeletedByEmployeeId(s *string) *EligibilityMasterUpdateOne {
	if s != nil {
		emuo.SetDeletedByEmployeeId(*s)
	}
	return emuo
}

// ClearDeletedByEmployeeId clears the value of the "DeletedByEmployeeId" field.
func (emuo *EligibilityMasterUpdateOne) ClearDeletedByEmployeeId() *EligibilityMasterUpdateOne {
	emuo.mutation.ClearDeletedByEmployeeId()
	return emuo
}

// SetDeletedByDesignation sets the "DeletedByDesignation" field.
func (emuo *EligibilityMasterUpdateOne) SetDeletedByDesignation(s string) *EligibilityMasterUpdateOne {
	emuo.mutation.SetDeletedByDesignation(s)
	return emuo
}

// SetNillableDeletedByDesignation sets the "DeletedByDesignation" field if the given value is not nil.
func (emuo *EligibilityMasterUpdateOne) SetNillableDeletedByDesignation(s *string) *EligibilityMasterUpdateOne {
	if s != nil {
		emuo.SetDeletedByDesignation(*s)
	}
	return emuo
}

// ClearDeletedByDesignation clears the value of the "DeletedByDesignation" field.
func (emuo *EligibilityMasterUpdateOne) ClearDeletedByDesignation() *EligibilityMasterUpdateOne {
	emuo.mutation.ClearDeletedByDesignation()
	return emuo
}

// SetDeletedDate sets the "DeletedDate" field.
func (emuo *EligibilityMasterUpdateOne) SetDeletedDate(t time.Time) *EligibilityMasterUpdateOne {
	emuo.mutation.SetDeletedDate(t)
	return emuo
}

// SetNillableDeletedDate sets the "DeletedDate" field if the given value is not nil.
func (emuo *EligibilityMasterUpdateOne) SetNillableDeletedDate(t *time.Time) *EligibilityMasterUpdateOne {
	if t != nil {
		emuo.SetDeletedDate(*t)
	}
	return emuo
}

// ClearDeletedDate clears the value of the "DeletedDate" field.
func (emuo *EligibilityMasterUpdateOne) ClearDeletedDate() *EligibilityMasterUpdateOne {
	emuo.mutation.ClearDeletedDate()
	return emuo
}

// AddNotificationIDs adds the "Notifications" edge to the Notification entity by IDs.
func (emuo *EligibilityMasterUpdateOne) AddNotificationIDs(ids ...int32) *EligibilityMasterUpdateOne {
	emuo.mutation.AddNotificationIDs(ids...)
	return emuo
}

// AddNotifications adds the "Notifications" edges to the Notification entity.
func (emuo *EligibilityMasterUpdateOne) AddNotifications(n ...*Notification) *EligibilityMasterUpdateOne {
	ids := make([]int32, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return emuo.AddNotificationIDs(ids...)
}

// AddCategoryEligibilityIDs adds the "CategoryEligibility" edge to the EmployeeCategory entity by IDs.
func (emuo *EligibilityMasterUpdateOne) AddCategoryEligibilityIDs(ids ...int32) *EligibilityMasterUpdateOne {
	emuo.mutation.AddCategoryEligibilityIDs(ids...)
	return emuo
}

// AddCategoryEligibility adds the "CategoryEligibility" edges to the EmployeeCategory entity.
func (emuo *EligibilityMasterUpdateOne) AddCategoryEligibility(e ...*EmployeeCategory) *EligibilityMasterUpdateOne {
	ids := make([]int32, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return emuo.AddCategoryEligibilityIDs(ids...)
}

// AddPostEligibilityIDs adds the "PostEligibility" edge to the EmployeePosts entity by IDs.
func (emuo *EligibilityMasterUpdateOne) AddPostEligibilityIDs(ids ...int32) *EligibilityMasterUpdateOne {
	emuo.mutation.AddPostEligibilityIDs(ids...)
	return emuo
}

// AddPostEligibility adds the "PostEligibility" edges to the EmployeePosts entity.
func (emuo *EligibilityMasterUpdateOne) AddPostEligibility(e ...*EmployeePosts) *EligibilityMasterUpdateOne {
	ids := make([]int32, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return emuo.AddPostEligibilityIDs(ids...)
}

// SetExamPaperEligibilityID sets the "ExamPaper_Eligibility" edge to the ExamPapers entity by ID.
func (emuo *EligibilityMasterUpdateOne) SetExamPaperEligibilityID(id int32) *EligibilityMasterUpdateOne {
	emuo.mutation.SetExamPaperEligibilityID(id)
	return emuo
}

// SetNillableExamPaperEligibilityID sets the "ExamPaper_Eligibility" edge to the ExamPapers entity by ID if the given value is not nil.
func (emuo *EligibilityMasterUpdateOne) SetNillableExamPaperEligibilityID(id *int32) *EligibilityMasterUpdateOne {
	if id != nil {
		emuo = emuo.SetExamPaperEligibilityID(*id)
	}
	return emuo
}

// SetExamPaperEligibility sets the "ExamPaper_Eligibility" edge to the ExamPapers entity.
func (emuo *EligibilityMasterUpdateOne) SetExamPaperEligibility(e *ExamPapers) *EligibilityMasterUpdateOne {
	return emuo.SetExamPaperEligibilityID(e.ID)
}

// SetExamEligibilityID sets the "Exam_Eligibility" edge to the Exam entity by ID.
func (emuo *EligibilityMasterUpdateOne) SetExamEligibilityID(id int32) *EligibilityMasterUpdateOne {
	emuo.mutation.SetExamEligibilityID(id)
	return emuo
}

// SetNillableExamEligibilityID sets the "Exam_Eligibility" edge to the Exam entity by ID if the given value is not nil.
func (emuo *EligibilityMasterUpdateOne) SetNillableExamEligibilityID(id *int32) *EligibilityMasterUpdateOne {
	if id != nil {
		emuo = emuo.SetExamEligibilityID(*id)
	}
	return emuo
}

// SetExamEligibility sets the "Exam_Eligibility" edge to the Exam entity.
func (emuo *EligibilityMasterUpdateOne) SetExamEligibility(e *Exam) *EligibilityMasterUpdateOne {
	return emuo.SetExamEligibilityID(e.ID)
}

// Mutation returns the EligibilityMasterMutation object of the builder.
func (emuo *EligibilityMasterUpdateOne) Mutation() *EligibilityMasterMutation {
	return emuo.mutation
}

// ClearNotifications clears all "Notifications" edges to the Notification entity.
func (emuo *EligibilityMasterUpdateOne) ClearNotifications() *EligibilityMasterUpdateOne {
	emuo.mutation.ClearNotifications()
	return emuo
}

// RemoveNotificationIDs removes the "Notifications" edge to Notification entities by IDs.
func (emuo *EligibilityMasterUpdateOne) RemoveNotificationIDs(ids ...int32) *EligibilityMasterUpdateOne {
	emuo.mutation.RemoveNotificationIDs(ids...)
	return emuo
}

// RemoveNotifications removes "Notifications" edges to Notification entities.
func (emuo *EligibilityMasterUpdateOne) RemoveNotifications(n ...*Notification) *EligibilityMasterUpdateOne {
	ids := make([]int32, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return emuo.RemoveNotificationIDs(ids...)
}

// ClearCategoryEligibility clears all "CategoryEligibility" edges to the EmployeeCategory entity.
func (emuo *EligibilityMasterUpdateOne) ClearCategoryEligibility() *EligibilityMasterUpdateOne {
	emuo.mutation.ClearCategoryEligibility()
	return emuo
}

// RemoveCategoryEligibilityIDs removes the "CategoryEligibility" edge to EmployeeCategory entities by IDs.
func (emuo *EligibilityMasterUpdateOne) RemoveCategoryEligibilityIDs(ids ...int32) *EligibilityMasterUpdateOne {
	emuo.mutation.RemoveCategoryEligibilityIDs(ids...)
	return emuo
}

// RemoveCategoryEligibility removes "CategoryEligibility" edges to EmployeeCategory entities.
func (emuo *EligibilityMasterUpdateOne) RemoveCategoryEligibility(e ...*EmployeeCategory) *EligibilityMasterUpdateOne {
	ids := make([]int32, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return emuo.RemoveCategoryEligibilityIDs(ids...)
}

// ClearPostEligibility clears all "PostEligibility" edges to the EmployeePosts entity.
func (emuo *EligibilityMasterUpdateOne) ClearPostEligibility() *EligibilityMasterUpdateOne {
	emuo.mutation.ClearPostEligibility()
	return emuo
}

// RemovePostEligibilityIDs removes the "PostEligibility" edge to EmployeePosts entities by IDs.
func (emuo *EligibilityMasterUpdateOne) RemovePostEligibilityIDs(ids ...int32) *EligibilityMasterUpdateOne {
	emuo.mutation.RemovePostEligibilityIDs(ids...)
	return emuo
}

// RemovePostEligibility removes "PostEligibility" edges to EmployeePosts entities.
func (emuo *EligibilityMasterUpdateOne) RemovePostEligibility(e ...*EmployeePosts) *EligibilityMasterUpdateOne {
	ids := make([]int32, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return emuo.RemovePostEligibilityIDs(ids...)
}

// ClearExamPaperEligibility clears the "ExamPaper_Eligibility" edge to the ExamPapers entity.
func (emuo *EligibilityMasterUpdateOne) ClearExamPaperEligibility() *EligibilityMasterUpdateOne {
	emuo.mutation.ClearExamPaperEligibility()
	return emuo
}

// ClearExamEligibility clears the "Exam_Eligibility" edge to the Exam entity.
func (emuo *EligibilityMasterUpdateOne) ClearExamEligibility() *EligibilityMasterUpdateOne {
	emuo.mutation.ClearExamEligibility()
	return emuo
}

// Where appends a list predicates to the EligibilityMasterUpdate builder.
func (emuo *EligibilityMasterUpdateOne) Where(ps ...predicate.EligibilityMaster) *EligibilityMasterUpdateOne {
	emuo.mutation.Where(ps...)
	return emuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (emuo *EligibilityMasterUpdateOne) Select(field string, fields ...string) *EligibilityMasterUpdateOne {
	emuo.fields = append([]string{field}, fields...)
	return emuo
}

// Save executes the query and returns the updated EligibilityMaster entity.
func (emuo *EligibilityMasterUpdateOne) Save(ctx context.Context) (*EligibilityMaster, error) {
	return withHooks(ctx, emuo.sqlSave, emuo.mutation, emuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (emuo *EligibilityMasterUpdateOne) SaveX(ctx context.Context) *EligibilityMaster {
	node, err := emuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (emuo *EligibilityMasterUpdateOne) Exec(ctx context.Context) error {
	_, err := emuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (emuo *EligibilityMasterUpdateOne) ExecX(ctx context.Context) {
	if err := emuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (emuo *EligibilityMasterUpdateOne) sqlSave(ctx context.Context) (_node *EligibilityMaster, err error) {
	_spec := sqlgraph.NewUpdateSpec(eligibilitymaster.Table, eligibilitymaster.Columns, sqlgraph.NewFieldSpec(eligibilitymaster.FieldID, field.TypeInt32))
	id, ok := emuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "EligibilityMaster.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := emuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, eligibilitymaster.FieldID)
		for _, f := range fields {
			if !eligibilitymaster.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != eligibilitymaster.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := emuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := emuo.mutation.ExamName(); ok {
		_spec.SetField(eligibilitymaster.FieldExamName, field.TypeString, value)
	}
	if value, ok := emuo.mutation.PostCode(); ok {
		_spec.SetField(eligibilitymaster.FieldPostCode, field.TypeString, value)
	}
	if emuo.mutation.PostCodeCleared() {
		_spec.ClearField(eligibilitymaster.FieldPostCode, field.TypeString)
	}
	if value, ok := emuo.mutation.GdsService(); ok {
		_spec.SetField(eligibilitymaster.FieldGdsService, field.TypeBool, value)
	}
	if value, ok := emuo.mutation.AgeCriteria(); ok {
		_spec.SetField(eligibilitymaster.FieldAgeCriteria, field.TypeInt32, value)
	}
	if value, ok := emuo.mutation.AddedAgeCriteria(); ok {
		_spec.AddField(eligibilitymaster.FieldAgeCriteria, field.TypeInt32, value)
	}
	if emuo.mutation.AgeCriteriaCleared() {
		_spec.ClearField(eligibilitymaster.FieldAgeCriteria, field.TypeInt32)
	}
	if value, ok := emuo.mutation.ServiceCriteria(); ok {
		_spec.SetField(eligibilitymaster.FieldServiceCriteria, field.TypeInt32, value)
	}
	if value, ok := emuo.mutation.AddedServiceCriteria(); ok {
		_spec.AddField(eligibilitymaster.FieldServiceCriteria, field.TypeInt32, value)
	}
	if emuo.mutation.ServiceCriteriaCleared() {
		_spec.ClearField(eligibilitymaster.FieldServiceCriteria, field.TypeInt32)
	}
	if value, ok := emuo.mutation.DrivingLicenseCriteria(); ok {
		_spec.SetField(eligibilitymaster.FieldDrivingLicenseCriteria, field.TypeBool, value)
	}
	if value, ok := emuo.mutation.ComputerKnowledge(); ok {
		_spec.SetField(eligibilitymaster.FieldComputerKnowledge, field.TypeBool, value)
	}
	if value, ok := emuo.mutation.LevelOfPayMatrixEligibility(); ok {
		_spec.SetField(eligibilitymaster.FieldLevelOfPayMatrixEligibility, field.TypeBool, value)
	}
	if value, ok := emuo.mutation.Education(); ok {
		_spec.SetField(eligibilitymaster.FieldEducation, field.TypeString, value)
	}
	if value, ok := emuo.mutation.NotifyCode(); ok {
		_spec.SetField(eligibilitymaster.FieldNotifyCode, field.TypeInt32, value)
	}
	if value, ok := emuo.mutation.AddedNotifyCode(); ok {
		_spec.AddField(eligibilitymaster.FieldNotifyCode, field.TypeInt32, value)
	}
	if emuo.mutation.NotifyCodeCleared() {
		_spec.ClearField(eligibilitymaster.FieldNotifyCode, field.TypeInt32)
	}
	if value, ok := emuo.mutation.CategoryCode(); ok {
		_spec.SetField(eligibilitymaster.FieldCategoryCode, field.TypeString, value)
	}
	if emuo.mutation.CategoryCodeCleared() {
		_spec.ClearField(eligibilitymaster.FieldCategoryCode, field.TypeString)
	}
	if value, ok := emuo.mutation.PaperDescription(); ok {
		_spec.SetField(eligibilitymaster.FieldPaperDescription, field.TypeString, value)
	}
	if value, ok := emuo.mutation.MinimumMarks(); ok {
		_spec.SetField(eligibilitymaster.FieldMinimumMarks, field.TypeInt32, value)
	}
	if value, ok := emuo.mutation.AddedMinimumMarks(); ok {
		_spec.AddField(eligibilitymaster.FieldMinimumMarks, field.TypeInt32, value)
	}
	if value, ok := emuo.mutation.OrderNumber(); ok {
		_spec.SetField(eligibilitymaster.FieldOrderNumber, field.TypeString, value)
	}
	if emuo.mutation.OrderNumberCleared() {
		_spec.ClearField(eligibilitymaster.FieldOrderNumber, field.TypeString)
	}
	if value, ok := emuo.mutation.Status(); ok {
		_spec.SetField(eligibilitymaster.FieldStatus, field.TypeString, value)
	}
	if emuo.mutation.StatusCleared() {
		_spec.ClearField(eligibilitymaster.FieldStatus, field.TypeString)
	}
	if value, ok := emuo.mutation.CreatedById(); ok {
		_spec.SetField(eligibilitymaster.FieldCreatedById, field.TypeInt32, value)
	}
	if value, ok := emuo.mutation.AddedCreatedById(); ok {
		_spec.AddField(eligibilitymaster.FieldCreatedById, field.TypeInt32, value)
	}
	if emuo.mutation.CreatedByIdCleared() {
		_spec.ClearField(eligibilitymaster.FieldCreatedById, field.TypeInt32)
	}
	if value, ok := emuo.mutation.CreatedByUserName(); ok {
		_spec.SetField(eligibilitymaster.FieldCreatedByUserName, field.TypeString, value)
	}
	if emuo.mutation.CreatedByUserNameCleared() {
		_spec.ClearField(eligibilitymaster.FieldCreatedByUserName, field.TypeString)
	}
	if value, ok := emuo.mutation.CreatedByEmployeeId(); ok {
		_spec.SetField(eligibilitymaster.FieldCreatedByEmployeeId, field.TypeString, value)
	}
	if emuo.mutation.CreatedByEmployeeIdCleared() {
		_spec.ClearField(eligibilitymaster.FieldCreatedByEmployeeId, field.TypeString)
	}
	if value, ok := emuo.mutation.CreatedByDesignation(); ok {
		_spec.SetField(eligibilitymaster.FieldCreatedByDesignation, field.TypeString, value)
	}
	if emuo.mutation.CreatedByDesignationCleared() {
		_spec.ClearField(eligibilitymaster.FieldCreatedByDesignation, field.TypeString)
	}
	if value, ok := emuo.mutation.CreatedDate(); ok {
		_spec.SetField(eligibilitymaster.FieldCreatedDate, field.TypeTime, value)
	}
	if emuo.mutation.CreatedDateCleared() {
		_spec.ClearField(eligibilitymaster.FieldCreatedDate, field.TypeTime)
	}
	if value, ok := emuo.mutation.VerifiedById(); ok {
		_spec.SetField(eligibilitymaster.FieldVerifiedById, field.TypeInt64, value)
	}
	if value, ok := emuo.mutation.AddedVerifiedById(); ok {
		_spec.AddField(eligibilitymaster.FieldVerifiedById, field.TypeInt64, value)
	}
	if emuo.mutation.VerifiedByIdCleared() {
		_spec.ClearField(eligibilitymaster.FieldVerifiedById, field.TypeInt64)
	}
	if value, ok := emuo.mutation.VerifiedByUserName(); ok {
		_spec.SetField(eligibilitymaster.FieldVerifiedByUserName, field.TypeString, value)
	}
	if emuo.mutation.VerifiedByUserNameCleared() {
		_spec.ClearField(eligibilitymaster.FieldVerifiedByUserName, field.TypeString)
	}
	if value, ok := emuo.mutation.VerifiedByEmployeeId(); ok {
		_spec.SetField(eligibilitymaster.FieldVerifiedByEmployeeId, field.TypeString, value)
	}
	if emuo.mutation.VerifiedByEmployeeIdCleared() {
		_spec.ClearField(eligibilitymaster.FieldVerifiedByEmployeeId, field.TypeString)
	}
	if value, ok := emuo.mutation.VerifiedByDesignation(); ok {
		_spec.SetField(eligibilitymaster.FieldVerifiedByDesignation, field.TypeString, value)
	}
	if emuo.mutation.VerifiedByDesignationCleared() {
		_spec.ClearField(eligibilitymaster.FieldVerifiedByDesignation, field.TypeString)
	}
	if value, ok := emuo.mutation.VerifiedDate(); ok {
		_spec.SetField(eligibilitymaster.FieldVerifiedDate, field.TypeTime, value)
	}
	if emuo.mutation.VerifiedDateCleared() {
		_spec.ClearField(eligibilitymaster.FieldVerifiedDate, field.TypeTime)
	}
	if value, ok := emuo.mutation.DeletedById(); ok {
		_spec.SetField(eligibilitymaster.FieldDeletedById, field.TypeInt64, value)
	}
	if value, ok := emuo.mutation.AddedDeletedById(); ok {
		_spec.AddField(eligibilitymaster.FieldDeletedById, field.TypeInt64, value)
	}
	if emuo.mutation.DeletedByIdCleared() {
		_spec.ClearField(eligibilitymaster.FieldDeletedById, field.TypeInt64)
	}
	if value, ok := emuo.mutation.DeletedByUserName(); ok {
		_spec.SetField(eligibilitymaster.FieldDeletedByUserName, field.TypeString, value)
	}
	if emuo.mutation.DeletedByUserNameCleared() {
		_spec.ClearField(eligibilitymaster.FieldDeletedByUserName, field.TypeString)
	}
	if value, ok := emuo.mutation.DeletedByEmployeeId(); ok {
		_spec.SetField(eligibilitymaster.FieldDeletedByEmployeeId, field.TypeString, value)
	}
	if emuo.mutation.DeletedByEmployeeIdCleared() {
		_spec.ClearField(eligibilitymaster.FieldDeletedByEmployeeId, field.TypeString)
	}
	if value, ok := emuo.mutation.DeletedByDesignation(); ok {
		_spec.SetField(eligibilitymaster.FieldDeletedByDesignation, field.TypeString, value)
	}
	if emuo.mutation.DeletedByDesignationCleared() {
		_spec.ClearField(eligibilitymaster.FieldDeletedByDesignation, field.TypeString)
	}
	if value, ok := emuo.mutation.DeletedDate(); ok {
		_spec.SetField(eligibilitymaster.FieldDeletedDate, field.TypeTime, value)
	}
	if emuo.mutation.DeletedDateCleared() {
		_spec.ClearField(eligibilitymaster.FieldDeletedDate, field.TypeTime)
	}
	if emuo.mutation.NotificationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   eligibilitymaster.NotificationsTable,
			Columns: []string{eligibilitymaster.NotificationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notification.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := emuo.mutation.RemovedNotificationsIDs(); len(nodes) > 0 && !emuo.mutation.NotificationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   eligibilitymaster.NotificationsTable,
			Columns: []string{eligibilitymaster.NotificationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notification.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := emuo.mutation.NotificationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   eligibilitymaster.NotificationsTable,
			Columns: []string{eligibilitymaster.NotificationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notification.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if emuo.mutation.CategoryEligibilityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   eligibilitymaster.CategoryEligibilityTable,
			Columns: []string{eligibilitymaster.CategoryEligibilityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employeecategory.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := emuo.mutation.RemovedCategoryEligibilityIDs(); len(nodes) > 0 && !emuo.mutation.CategoryEligibilityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   eligibilitymaster.CategoryEligibilityTable,
			Columns: []string{eligibilitymaster.CategoryEligibilityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employeecategory.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := emuo.mutation.CategoryEligibilityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   eligibilitymaster.CategoryEligibilityTable,
			Columns: []string{eligibilitymaster.CategoryEligibilityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employeecategory.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if emuo.mutation.PostEligibilityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   eligibilitymaster.PostEligibilityTable,
			Columns: []string{eligibilitymaster.PostEligibilityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employeeposts.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := emuo.mutation.RemovedPostEligibilityIDs(); len(nodes) > 0 && !emuo.mutation.PostEligibilityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   eligibilitymaster.PostEligibilityTable,
			Columns: []string{eligibilitymaster.PostEligibilityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employeeposts.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := emuo.mutation.PostEligibilityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   eligibilitymaster.PostEligibilityTable,
			Columns: []string{eligibilitymaster.PostEligibilityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employeeposts.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if emuo.mutation.ExamPaperEligibilityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   eligibilitymaster.ExamPaperEligibilityTable,
			Columns: []string{eligibilitymaster.ExamPaperEligibilityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exampapers.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := emuo.mutation.ExamPaperEligibilityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   eligibilitymaster.ExamPaperEligibilityTable,
			Columns: []string{eligibilitymaster.ExamPaperEligibilityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exampapers.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if emuo.mutation.ExamEligibilityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   eligibilitymaster.ExamEligibilityTable,
			Columns: []string{eligibilitymaster.ExamEligibilityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam.FieldID, field.TypeInt32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := emuo.mutation.ExamEligibilityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   eligibilitymaster.ExamEligibilityTable,
			Columns: []string{eligibilitymaster.ExamEligibilityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &EligibilityMaster{config: emuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, emuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{eligibilitymaster.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	emuo.mutation.done = true
	return _node, nil
}
