// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"recruit/ent/examnotifications"
	"recruit/ent/logs"
	"recruit/ent/usermaster"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ExamNotificationsCreate is the builder for creating a ExamNotifications entity.
type ExamNotificationsCreate struct {
	config
	mutation *ExamNotificationsMutation
	hooks    []Hook
}

// SetUserName sets the "UserName" field.
func (enc *ExamNotificationsCreate) SetUserName(s string) *ExamNotificationsCreate {
	enc.mutation.SetUserName(s)
	return enc
}

// SetNillableUserName sets the "UserName" field if the given value is not nil.
func (enc *ExamNotificationsCreate) SetNillableUserName(s *string) *ExamNotificationsCreate {
	if s != nil {
		enc.SetUserName(*s)
	}
	return enc
}

// SetExamYear sets the "ExamYear" field.
func (enc *ExamNotificationsCreate) SetExamYear(i int32) *ExamNotificationsCreate {
	enc.mutation.SetExamYear(i)
	return enc
}

// SetNillableExamYear sets the "ExamYear" field if the given value is not nil.
func (enc *ExamNotificationsCreate) SetNillableExamYear(i *int32) *ExamNotificationsCreate {
	if i != nil {
		enc.SetExamYear(*i)
	}
	return enc
}

// SetEmployeeMasterRequestLastDate sets the "EmployeeMasterRequestLastDate" field.
func (enc *ExamNotificationsCreate) SetEmployeeMasterRequestLastDate(t time.Time) *ExamNotificationsCreate {
	enc.mutation.SetEmployeeMasterRequestLastDate(t)
	return enc
}

// SetNillableEmployeeMasterRequestLastDate sets the "EmployeeMasterRequestLastDate" field if the given value is not nil.
func (enc *ExamNotificationsCreate) SetNillableEmployeeMasterRequestLastDate(t *time.Time) *ExamNotificationsCreate {
	if t != nil {
		enc.SetEmployeeMasterRequestLastDate(*t)
	}
	return enc
}

// SetEmployeeMasterRequestApprovalLastDate sets the "EmployeeMasterRequestApprovalLastDate" field.
func (enc *ExamNotificationsCreate) SetEmployeeMasterRequestApprovalLastDate(t time.Time) *ExamNotificationsCreate {
	enc.mutation.SetEmployeeMasterRequestApprovalLastDate(t)
	return enc
}

// SetNillableEmployeeMasterRequestApprovalLastDate sets the "EmployeeMasterRequestApprovalLastDate" field if the given value is not nil.
func (enc *ExamNotificationsCreate) SetNillableEmployeeMasterRequestApprovalLastDate(t *time.Time) *ExamNotificationsCreate {
	if t != nil {
		enc.SetEmployeeMasterRequestApprovalLastDate(*t)
	}
	return enc
}

// SetExamRegisterLastDate sets the "ExamRegisterLastDate" field.
func (enc *ExamNotificationsCreate) SetExamRegisterLastDate(t time.Time) *ExamNotificationsCreate {
	enc.mutation.SetExamRegisterLastDate(t)
	return enc
}

// SetNillableExamRegisterLastDate sets the "ExamRegisterLastDate" field if the given value is not nil.
func (enc *ExamNotificationsCreate) SetNillableExamRegisterLastDate(t *time.Time) *ExamNotificationsCreate {
	if t != nil {
		enc.SetExamRegisterLastDate(*t)
	}
	return enc
}

// SetApplicationStartDate sets the "ApplicationStartDate" field.
func (enc *ExamNotificationsCreate) SetApplicationStartDate(t time.Time) *ExamNotificationsCreate {
	enc.mutation.SetApplicationStartDate(t)
	return enc
}

// SetNillableApplicationStartDate sets the "ApplicationStartDate" field if the given value is not nil.
func (enc *ExamNotificationsCreate) SetNillableApplicationStartDate(t *time.Time) *ExamNotificationsCreate {
	if t != nil {
		enc.SetApplicationStartDate(*t)
	}
	return enc
}

// SetApplicationEndDate sets the "ApplicationEndDate" field.
func (enc *ExamNotificationsCreate) SetApplicationEndDate(t time.Time) *ExamNotificationsCreate {
	enc.mutation.SetApplicationEndDate(t)
	return enc
}

// SetNillableApplicationEndDate sets the "ApplicationEndDate" field if the given value is not nil.
func (enc *ExamNotificationsCreate) SetNillableApplicationEndDate(t *time.Time) *ExamNotificationsCreate {
	if t != nil {
		enc.SetApplicationEndDate(*t)
	}
	return enc
}

// SetApplicationCorrectionStartDate sets the "ApplicationCorrectionStartDate" field.
func (enc *ExamNotificationsCreate) SetApplicationCorrectionStartDate(t time.Time) *ExamNotificationsCreate {
	enc.mutation.SetApplicationCorrectionStartDate(t)
	return enc
}

// SetNillableApplicationCorrectionStartDate sets the "ApplicationCorrectionStartDate" field if the given value is not nil.
func (enc *ExamNotificationsCreate) SetNillableApplicationCorrectionStartDate(t *time.Time) *ExamNotificationsCreate {
	if t != nil {
		enc.SetApplicationCorrectionStartDate(*t)
	}
	return enc
}

// SetApplicationCorrectionLastDate sets the "ApplicationCorrectionLastDate" field.
func (enc *ExamNotificationsCreate) SetApplicationCorrectionLastDate(t time.Time) *ExamNotificationsCreate {
	enc.mutation.SetApplicationCorrectionLastDate(t)
	return enc
}

// SetNillableApplicationCorrectionLastDate sets the "ApplicationCorrectionLastDate" field if the given value is not nil.
func (enc *ExamNotificationsCreate) SetNillableApplicationCorrectionLastDate(t *time.Time) *ExamNotificationsCreate {
	if t != nil {
		enc.SetApplicationCorrectionLastDate(*t)
	}
	return enc
}

// SetApplicationVerificationLastDate sets the "ApplicationVerificationLastDate" field.
func (enc *ExamNotificationsCreate) SetApplicationVerificationLastDate(t time.Time) *ExamNotificationsCreate {
	enc.mutation.SetApplicationVerificationLastDate(t)
	return enc
}

// SetNillableApplicationVerificationLastDate sets the "ApplicationVerificationLastDate" field if the given value is not nil.
func (enc *ExamNotificationsCreate) SetNillableApplicationVerificationLastDate(t *time.Time) *ExamNotificationsCreate {
	if t != nil {
		enc.SetApplicationVerificationLastDate(*t)
	}
	return enc
}

// SetCenterAllotmentEndDate sets the "CenterAllotmentEndDate" field.
func (enc *ExamNotificationsCreate) SetCenterAllotmentEndDate(t time.Time) *ExamNotificationsCreate {
	enc.mutation.SetCenterAllotmentEndDate(t)
	return enc
}

// SetNillableCenterAllotmentEndDate sets the "CenterAllotmentEndDate" field if the given value is not nil.
func (enc *ExamNotificationsCreate) SetNillableCenterAllotmentEndDate(t *time.Time) *ExamNotificationsCreate {
	if t != nil {
		enc.SetCenterAllotmentEndDate(*t)
	}
	return enc
}

// SetNodalOfficerApprovalDate sets the "NodalOfficerApprovalDate" field.
func (enc *ExamNotificationsCreate) SetNodalOfficerApprovalDate(t time.Time) *ExamNotificationsCreate {
	enc.mutation.SetNodalOfficerApprovalDate(t)
	return enc
}

// SetNillableNodalOfficerApprovalDate sets the "NodalOfficerApprovalDate" field if the given value is not nil.
func (enc *ExamNotificationsCreate) SetNillableNodalOfficerApprovalDate(t *time.Time) *ExamNotificationsCreate {
	if t != nil {
		enc.SetNodalOfficerApprovalDate(*t)
	}
	return enc
}

// SetAdmitCardDate sets the "AdmitCardDate" field.
func (enc *ExamNotificationsCreate) SetAdmitCardDate(t time.Time) *ExamNotificationsCreate {
	enc.mutation.SetAdmitCardDate(t)
	return enc
}

// SetNillableAdmitCardDate sets the "AdmitCardDate" field if the given value is not nil.
func (enc *ExamNotificationsCreate) SetNillableAdmitCardDate(t *time.Time) *ExamNotificationsCreate {
	if t != nil {
		enc.SetAdmitCardDate(*t)
	}
	return enc
}

// SetUpdatedAt sets the "UpdatedAt" field.
func (enc *ExamNotificationsCreate) SetUpdatedAt(t time.Time) *ExamNotificationsCreate {
	enc.mutation.SetUpdatedAt(t)
	return enc
}

// SetNillableUpdatedAt sets the "UpdatedAt" field if the given value is not nil.
func (enc *ExamNotificationsCreate) SetNillableUpdatedAt(t *time.Time) *ExamNotificationsCreate {
	if t != nil {
		enc.SetUpdatedAt(*t)
	}
	return enc
}

// SetUpdatedBy sets the "UpdatedBy" field.
func (enc *ExamNotificationsCreate) SetUpdatedBy(s string) *ExamNotificationsCreate {
	enc.mutation.SetUpdatedBy(s)
	return enc
}

// SetNillableUpdatedBy sets the "UpdatedBy" field if the given value is not nil.
func (enc *ExamNotificationsCreate) SetNillableUpdatedBy(s *string) *ExamNotificationsCreate {
	if s != nil {
		enc.SetUpdatedBy(*s)
	}
	return enc
}

// SetCrucialDate sets the "CrucialDate" field.
func (enc *ExamNotificationsCreate) SetCrucialDate(i []interface{}) *ExamNotificationsCreate {
	enc.mutation.SetCrucialDate(i)
	return enc
}

// SetDesignation sets the "Designation" field.
func (enc *ExamNotificationsCreate) SetDesignation(s string) *ExamNotificationsCreate {
	enc.mutation.SetDesignation(s)
	return enc
}

// SetNillableDesignation sets the "Designation" field if the given value is not nil.
func (enc *ExamNotificationsCreate) SetNillableDesignation(s *string) *ExamNotificationsCreate {
	if s != nil {
		enc.SetDesignation(*s)
	}
	return enc
}

// SetOfficerName sets the "OfficerName" field.
func (enc *ExamNotificationsCreate) SetOfficerName(s string) *ExamNotificationsCreate {
	enc.mutation.SetOfficerName(s)
	return enc
}

// SetNillableOfficerName sets the "OfficerName" field if the given value is not nil.
func (enc *ExamNotificationsCreate) SetNillableOfficerName(s *string) *ExamNotificationsCreate {
	if s != nil {
		enc.SetOfficerName(*s)
	}
	return enc
}

// SetNotificationOrderNumber sets the "NotificationOrderNumber" field.
func (enc *ExamNotificationsCreate) SetNotificationOrderNumber(s string) *ExamNotificationsCreate {
	enc.mutation.SetNotificationOrderNumber(s)
	return enc
}

// SetNillableNotificationOrderNumber sets the "NotificationOrderNumber" field if the given value is not nil.
func (enc *ExamNotificationsCreate) SetNillableNotificationOrderNumber(s *string) *ExamNotificationsCreate {
	if s != nil {
		enc.SetNotificationOrderNumber(*s)
	}
	return enc
}

// SetNotesheetScannedCopy sets the "NotesheetScannedCopy" field.
func (enc *ExamNotificationsCreate) SetNotesheetScannedCopy(s string) *ExamNotificationsCreate {
	enc.mutation.SetNotesheetScannedCopy(s)
	return enc
}

// SetNillableNotesheetScannedCopy sets the "NotesheetScannedCopy" field if the given value is not nil.
func (enc *ExamNotificationsCreate) SetNillableNotesheetScannedCopy(s *string) *ExamNotificationsCreate {
	if s != nil {
		enc.SetNotesheetScannedCopy(*s)
	}
	return enc
}

// SetNotificationNumber sets the "NotificationNumber" field.
func (enc *ExamNotificationsCreate) SetNotificationNumber(s string) *ExamNotificationsCreate {
	enc.mutation.SetNotificationNumber(s)
	return enc
}

// SetNillableNotificationNumber sets the "NotificationNumber" field if the given value is not nil.
func (enc *ExamNotificationsCreate) SetNillableNotificationNumber(s *string) *ExamNotificationsCreate {
	if s != nil {
		enc.SetNotificationNumber(*s)
	}
	return enc
}

// SetFlag sets the "Flag" field.
func (enc *ExamNotificationsCreate) SetFlag(b bool) *ExamNotificationsCreate {
	enc.mutation.SetFlag(b)
	return enc
}

// SetNillableFlag sets the "Flag" field if the given value is not nil.
func (enc *ExamNotificationsCreate) SetNillableFlag(b *bool) *ExamNotificationsCreate {
	if b != nil {
		enc.SetFlag(*b)
	}
	return enc
}

// SetExamShortName sets the "ExamShortName" field.
func (enc *ExamNotificationsCreate) SetExamShortName(s string) *ExamNotificationsCreate {
	enc.mutation.SetExamShortName(s)
	return enc
}

// SetNillableExamShortName sets the "ExamShortName" field if the given value is not nil.
func (enc *ExamNotificationsCreate) SetNillableExamShortName(s *string) *ExamNotificationsCreate {
	if s != nil {
		enc.SetExamShortName(*s)
	}
	return enc
}

// SetCircleOfficeFacilityId sets the "CircleOfficeFacilityId" field.
func (enc *ExamNotificationsCreate) SetCircleOfficeFacilityId(s string) *ExamNotificationsCreate {
	enc.mutation.SetCircleOfficeFacilityId(s)
	return enc
}

// SetNillableCircleOfficeFacilityId sets the "CircleOfficeFacilityId" field if the given value is not nil.
func (enc *ExamNotificationsCreate) SetNillableCircleOfficeFacilityId(s *string) *ExamNotificationsCreate {
	if s != nil {
		enc.SetCircleOfficeFacilityId(*s)
	}
	return enc
}

// SetCircleOfficeName sets the "CircleOfficeName" field.
func (enc *ExamNotificationsCreate) SetCircleOfficeName(s string) *ExamNotificationsCreate {
	enc.mutation.SetCircleOfficeName(s)
	return enc
}

// SetNillableCircleOfficeName sets the "CircleOfficeName" field if the given value is not nil.
func (enc *ExamNotificationsCreate) SetNillableCircleOfficeName(s *string) *ExamNotificationsCreate {
	if s != nil {
		enc.SetCircleOfficeName(*s)
	}
	return enc
}

// SetIssuedBy sets the "IssuedBy" field.
func (enc *ExamNotificationsCreate) SetIssuedBy(s string) *ExamNotificationsCreate {
	enc.mutation.SetIssuedBy(s)
	return enc
}

// SetNillableIssuedBy sets the "IssuedBy" field if the given value is not nil.
func (enc *ExamNotificationsCreate) SetNillableIssuedBy(s *string) *ExamNotificationsCreate {
	if s != nil {
		enc.SetIssuedBy(*s)
	}
	return enc
}

// SetOrderDate sets the "OrderDate" field.
func (enc *ExamNotificationsCreate) SetOrderDate(t time.Time) *ExamNotificationsCreate {
	enc.mutation.SetOrderDate(t)
	return enc
}

// SetNillableOrderDate sets the "OrderDate" field if the given value is not nil.
func (enc *ExamNotificationsCreate) SetNillableOrderDate(t *time.Time) *ExamNotificationsCreate {
	if t != nil {
		enc.SetOrderDate(*t)
	}
	return enc
}

// SetCreatedBy sets the "CreatedBy" field.
func (enc *ExamNotificationsCreate) SetCreatedBy(s string) *ExamNotificationsCreate {
	enc.mutation.SetCreatedBy(s)
	return enc
}

// SetNillableCreatedBy sets the "CreatedBy" field if the given value is not nil.
func (enc *ExamNotificationsCreate) SetNillableCreatedBy(s *string) *ExamNotificationsCreate {
	if s != nil {
		enc.SetCreatedBy(*s)
	}
	return enc
}

// SetCreatedById sets the "CreatedById" field.
func (enc *ExamNotificationsCreate) SetCreatedById(i int64) *ExamNotificationsCreate {
	enc.mutation.SetCreatedById(i)
	return enc
}

// SetNillableCreatedById sets the "CreatedById" field if the given value is not nil.
func (enc *ExamNotificationsCreate) SetNillableCreatedById(i *int64) *ExamNotificationsCreate {
	if i != nil {
		enc.SetCreatedById(*i)
	}
	return enc
}

// SetCreatedByName sets the "CreatedByName" field.
func (enc *ExamNotificationsCreate) SetCreatedByName(s string) *ExamNotificationsCreate {
	enc.mutation.SetCreatedByName(s)
	return enc
}

// SetNillableCreatedByName sets the "CreatedByName" field if the given value is not nil.
func (enc *ExamNotificationsCreate) SetNillableCreatedByName(s *string) *ExamNotificationsCreate {
	if s != nil {
		enc.SetCreatedByName(*s)
	}
	return enc
}

// SetCreatedByDesignation sets the "CreatedByDesignation" field.
func (enc *ExamNotificationsCreate) SetCreatedByDesignation(s string) *ExamNotificationsCreate {
	enc.mutation.SetCreatedByDesignation(s)
	return enc
}

// SetNillableCreatedByDesignation sets the "CreatedByDesignation" field if the given value is not nil.
func (enc *ExamNotificationsCreate) SetNillableCreatedByDesignation(s *string) *ExamNotificationsCreate {
	if s != nil {
		enc.SetCreatedByDesignation(*s)
	}
	return enc
}

// SetApprovedBy sets the "ApprovedBy" field.
func (enc *ExamNotificationsCreate) SetApprovedBy(s string) *ExamNotificationsCreate {
	enc.mutation.SetApprovedBy(s)
	return enc
}

// SetNillableApprovedBy sets the "ApprovedBy" field if the given value is not nil.
func (enc *ExamNotificationsCreate) SetNillableApprovedBy(s *string) *ExamNotificationsCreate {
	if s != nil {
		enc.SetApprovedBy(*s)
	}
	return enc
}

// SetApprovedById sets the "ApprovedById" field.
func (enc *ExamNotificationsCreate) SetApprovedById(i int64) *ExamNotificationsCreate {
	enc.mutation.SetApprovedById(i)
	return enc
}

// SetNillableApprovedById sets the "ApprovedById" field if the given value is not nil.
func (enc *ExamNotificationsCreate) SetNillableApprovedById(i *int64) *ExamNotificationsCreate {
	if i != nil {
		enc.SetApprovedById(*i)
	}
	return enc
}

// SetApprovedByName sets the "ApprovedByName" field.
func (enc *ExamNotificationsCreate) SetApprovedByName(s string) *ExamNotificationsCreate {
	enc.mutation.SetApprovedByName(s)
	return enc
}

// SetNillableApprovedByName sets the "ApprovedByName" field if the given value is not nil.
func (enc *ExamNotificationsCreate) SetNillableApprovedByName(s *string) *ExamNotificationsCreate {
	if s != nil {
		enc.SetApprovedByName(*s)
	}
	return enc
}

// SetApprovedByDesignation sets the "ApprovedByDesignation" field.
func (enc *ExamNotificationsCreate) SetApprovedByDesignation(s string) *ExamNotificationsCreate {
	enc.mutation.SetApprovedByDesignation(s)
	return enc
}

// SetNillableApprovedByDesignation sets the "ApprovedByDesignation" field if the given value is not nil.
func (enc *ExamNotificationsCreate) SetNillableApprovedByDesignation(s *string) *ExamNotificationsCreate {
	if s != nil {
		enc.SetApprovedByDesignation(*s)
	}
	return enc
}

// SetResubmittedApplicationVerificationDate sets the "ResubmittedApplicationVerificationDate" field.
func (enc *ExamNotificationsCreate) SetResubmittedApplicationVerificationDate(t time.Time) *ExamNotificationsCreate {
	enc.mutation.SetResubmittedApplicationVerificationDate(t)
	return enc
}

// SetNillableResubmittedApplicationVerificationDate sets the "ResubmittedApplicationVerificationDate" field if the given value is not nil.
func (enc *ExamNotificationsCreate) SetNillableResubmittedApplicationVerificationDate(t *time.Time) *ExamNotificationsCreate {
	if t != nil {
		enc.SetResubmittedApplicationVerificationDate(*t)
	}
	return enc
}

// SetPapers sets the "Papers" field.
func (enc *ExamNotificationsCreate) SetPapers(i []interface{}) *ExamNotificationsCreate {
	enc.mutation.SetPapers(i)
	return enc
}

// SetNotificationStatus sets the "NotificationStatus" field.
func (enc *ExamNotificationsCreate) SetNotificationStatus(s string) *ExamNotificationsCreate {
	enc.mutation.SetNotificationStatus(s)
	return enc
}

// SetNillableNotificationStatus sets the "NotificationStatus" field if the given value is not nil.
func (enc *ExamNotificationsCreate) SetNillableNotificationStatus(s *string) *ExamNotificationsCreate {
	if s != nil {
		enc.SetNotificationStatus(*s)
	}
	return enc
}

// SetStatus sets the "Status" field.
func (enc *ExamNotificationsCreate) SetStatus(s string) *ExamNotificationsCreate {
	enc.mutation.SetStatus(s)
	return enc
}

// SetNillableStatus sets the "Status" field if the given value is not nil.
func (enc *ExamNotificationsCreate) SetNillableStatus(s *string) *ExamNotificationsCreate {
	if s != nil {
		enc.SetStatus(*s)
	}
	return enc
}

// SetNotificationReIssueStatus sets the "NotificationReIssueStatus" field.
func (enc *ExamNotificationsCreate) SetNotificationReIssueStatus(b bool) *ExamNotificationsCreate {
	enc.mutation.SetNotificationReIssueStatus(b)
	return enc
}

// SetNillableNotificationReIssueStatus sets the "NotificationReIssueStatus" field if the given value is not nil.
func (enc *ExamNotificationsCreate) SetNillableNotificationReIssueStatus(b *bool) *ExamNotificationsCreate {
	if b != nil {
		enc.SetNotificationReIssueStatus(*b)
	}
	return enc
}

// SetEditFlagStatus sets the "EditFlagStatus" field.
func (enc *ExamNotificationsCreate) SetEditFlagStatus(b bool) *ExamNotificationsCreate {
	enc.mutation.SetEditFlagStatus(b)
	return enc
}

// SetNillableEditFlagStatus sets the "EditFlagStatus" field if the given value is not nil.
func (enc *ExamNotificationsCreate) SetNillableEditFlagStatus(b *bool) *ExamNotificationsCreate {
	if b != nil {
		enc.SetEditFlagStatus(*b)
	}
	return enc
}

// SetExamCode sets the "ExamCode" field.
func (enc *ExamNotificationsCreate) SetExamCode(i int32) *ExamNotificationsCreate {
	enc.mutation.SetExamCode(i)
	return enc
}

// SetNillableExamCode sets the "ExamCode" field if the given value is not nil.
func (enc *ExamNotificationsCreate) SetNillableExamCode(i *int32) *ExamNotificationsCreate {
	if i != nil {
		enc.SetExamCode(*i)
	}
	return enc
}

// SetExamName sets the "ExamName" field.
func (enc *ExamNotificationsCreate) SetExamName(s string) *ExamNotificationsCreate {
	enc.mutation.SetExamName(s)
	return enc
}

// SetNillableExamName sets the "ExamName" field if the given value is not nil.
func (enc *ExamNotificationsCreate) SetNillableExamName(s *string) *ExamNotificationsCreate {
	if s != nil {
		enc.SetExamName(*s)
	}
	return enc
}

// SetUserID sets the "UserID" field.
func (enc *ExamNotificationsCreate) SetUserID(i int64) *ExamNotificationsCreate {
	enc.mutation.SetUserID(i)
	return enc
}

// SetNillableUserID sets the "UserID" field if the given value is not nil.
func (enc *ExamNotificationsCreate) SetNillableUserID(i *int64) *ExamNotificationsCreate {
	if i != nil {
		enc.SetUserID(*i)
	}
	return enc
}

// SetNotificationRemarks sets the "NotificationRemarks" field.
func (enc *ExamNotificationsCreate) SetNotificationRemarks(s string) *ExamNotificationsCreate {
	enc.mutation.SetNotificationRemarks(s)
	return enc
}

// SetNillableNotificationRemarks sets the "NotificationRemarks" field if the given value is not nil.
func (enc *ExamNotificationsCreate) SetNillableNotificationRemarks(s *string) *ExamNotificationsCreate {
	if s != nil {
		enc.SetNotificationRemarks(*s)
	}
	return enc
}

// SetSmsExamShortName sets the "SmsExamShortName" field.
func (enc *ExamNotificationsCreate) SetSmsExamShortName(s string) *ExamNotificationsCreate {
	enc.mutation.SetSmsExamShortName(s)
	return enc
}

// SetNillableSmsExamShortName sets the "SmsExamShortName" field if the given value is not nil.
func (enc *ExamNotificationsCreate) SetNillableSmsExamShortName(s *string) *ExamNotificationsCreate {
	if s != nil {
		enc.SetSmsExamShortName(*s)
	}
	return enc
}

// SetID sets the "id" field.
func (enc *ExamNotificationsCreate) SetID(i int32) *ExamNotificationsCreate {
	enc.mutation.SetID(i)
	return enc
}

// SetUserIDrefID sets the "UserIDref" edge to the UserMaster entity by ID.
func (enc *ExamNotificationsCreate) SetUserIDrefID(id int64) *ExamNotificationsCreate {
	enc.mutation.SetUserIDrefID(id)
	return enc
}

// SetNillableUserIDrefID sets the "UserIDref" edge to the UserMaster entity by ID if the given value is not nil.
func (enc *ExamNotificationsCreate) SetNillableUserIDrefID(id *int64) *ExamNotificationsCreate {
	if id != nil {
		enc = enc.SetUserIDrefID(*id)
	}
	return enc
}

// SetUserIDref sets the "UserIDref" edge to the UserMaster entity.
func (enc *ExamNotificationsCreate) SetUserIDref(u *UserMaster) *ExamNotificationsCreate {
	return enc.SetUserIDrefID(u.ID)
}

// AddLogDatumIDs adds the "LogData" edge to the Logs entity by IDs.
func (enc *ExamNotificationsCreate) AddLogDatumIDs(ids ...int64) *ExamNotificationsCreate {
	enc.mutation.AddLogDatumIDs(ids...)
	return enc
}

// AddLogData adds the "LogData" edges to the Logs entity.
func (enc *ExamNotificationsCreate) AddLogData(l ...*Logs) *ExamNotificationsCreate {
	ids := make([]int64, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return enc.AddLogDatumIDs(ids...)
}

// Mutation returns the ExamNotificationsMutation object of the builder.
func (enc *ExamNotificationsCreate) Mutation() *ExamNotificationsMutation {
	return enc.mutation
}

// Save creates the ExamNotifications in the database.
func (enc *ExamNotificationsCreate) Save(ctx context.Context) (*ExamNotifications, error) {
	enc.defaults()
	return withHooks(ctx, enc.sqlSave, enc.mutation, enc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (enc *ExamNotificationsCreate) SaveX(ctx context.Context) *ExamNotifications {
	v, err := enc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (enc *ExamNotificationsCreate) Exec(ctx context.Context) error {
	_, err := enc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (enc *ExamNotificationsCreate) ExecX(ctx context.Context) {
	if err := enc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (enc *ExamNotificationsCreate) defaults() {
	if _, ok := enc.mutation.Flag(); !ok {
		v := examnotifications.DefaultFlag
		enc.mutation.SetFlag(v)
	}
	if _, ok := enc.mutation.NotificationReIssueStatus(); !ok {
		v := examnotifications.DefaultNotificationReIssueStatus
		enc.mutation.SetNotificationReIssueStatus(v)
	}
	if _, ok := enc.mutation.EditFlagStatus(); !ok {
		v := examnotifications.DefaultEditFlagStatus
		enc.mutation.SetEditFlagStatus(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (enc *ExamNotificationsCreate) check() error {
	return nil
}

func (enc *ExamNotificationsCreate) sqlSave(ctx context.Context) (*ExamNotifications, error) {
	if err := enc.check(); err != nil {
		return nil, err
	}
	_node, _spec := enc.createSpec()
	if err := sqlgraph.CreateNode(ctx, enc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int32(id)
	}
	enc.mutation.id = &_node.ID
	enc.mutation.done = true
	return _node, nil
}

func (enc *ExamNotificationsCreate) createSpec() (*ExamNotifications, *sqlgraph.CreateSpec) {
	var (
		_node = &ExamNotifications{config: enc.config}
		_spec = sqlgraph.NewCreateSpec(examnotifications.Table, sqlgraph.NewFieldSpec(examnotifications.FieldID, field.TypeInt32))
	)
	if id, ok := enc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := enc.mutation.UserName(); ok {
		_spec.SetField(examnotifications.FieldUserName, field.TypeString, value)
		_node.UserName = value
	}
	if value, ok := enc.mutation.ExamYear(); ok {
		_spec.SetField(examnotifications.FieldExamYear, field.TypeInt32, value)
		_node.ExamYear = value
	}
	if value, ok := enc.mutation.EmployeeMasterRequestLastDate(); ok {
		_spec.SetField(examnotifications.FieldEmployeeMasterRequestLastDate, field.TypeTime, value)
		_node.EmployeeMasterRequestLastDate = value
	}
	if value, ok := enc.mutation.EmployeeMasterRequestApprovalLastDate(); ok {
		_spec.SetField(examnotifications.FieldEmployeeMasterRequestApprovalLastDate, field.TypeTime, value)
		_node.EmployeeMasterRequestApprovalLastDate = value
	}
	if value, ok := enc.mutation.ExamRegisterLastDate(); ok {
		_spec.SetField(examnotifications.FieldExamRegisterLastDate, field.TypeTime, value)
		_node.ExamRegisterLastDate = value
	}
	if value, ok := enc.mutation.ApplicationStartDate(); ok {
		_spec.SetField(examnotifications.FieldApplicationStartDate, field.TypeTime, value)
		_node.ApplicationStartDate = value
	}
	if value, ok := enc.mutation.ApplicationEndDate(); ok {
		_spec.SetField(examnotifications.FieldApplicationEndDate, field.TypeTime, value)
		_node.ApplicationEndDate = value
	}
	if value, ok := enc.mutation.ApplicationCorrectionStartDate(); ok {
		_spec.SetField(examnotifications.FieldApplicationCorrectionStartDate, field.TypeTime, value)
		_node.ApplicationCorrectionStartDate = value
	}
	if value, ok := enc.mutation.ApplicationCorrectionLastDate(); ok {
		_spec.SetField(examnotifications.FieldApplicationCorrectionLastDate, field.TypeTime, value)
		_node.ApplicationCorrectionLastDate = value
	}
	if value, ok := enc.mutation.ApplicationVerificationLastDate(); ok {
		_spec.SetField(examnotifications.FieldApplicationVerificationLastDate, field.TypeTime, value)
		_node.ApplicationVerificationLastDate = value
	}
	if value, ok := enc.mutation.CenterAllotmentEndDate(); ok {
		_spec.SetField(examnotifications.FieldCenterAllotmentEndDate, field.TypeTime, value)
		_node.CenterAllotmentEndDate = value
	}
	if value, ok := enc.mutation.NodalOfficerApprovalDate(); ok {
		_spec.SetField(examnotifications.FieldNodalOfficerApprovalDate, field.TypeTime, value)
		_node.NodalOfficerApprovalDate = value
	}
	if value, ok := enc.mutation.AdmitCardDate(); ok {
		_spec.SetField(examnotifications.FieldAdmitCardDate, field.TypeTime, value)
		_node.AdmitCardDate = value
	}
	if value, ok := enc.mutation.UpdatedAt(); ok {
		_spec.SetField(examnotifications.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := enc.mutation.UpdatedBy(); ok {
		_spec.SetField(examnotifications.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if value, ok := enc.mutation.CrucialDate(); ok {
		_spec.SetField(examnotifications.FieldCrucialDate, field.TypeJSON, value)
		_node.CrucialDate = value
	}
	if value, ok := enc.mutation.Designation(); ok {
		_spec.SetField(examnotifications.FieldDesignation, field.TypeString, value)
		_node.Designation = value
	}
	if value, ok := enc.mutation.OfficerName(); ok {
		_spec.SetField(examnotifications.FieldOfficerName, field.TypeString, value)
		_node.OfficerName = value
	}
	if value, ok := enc.mutation.NotificationOrderNumber(); ok {
		_spec.SetField(examnotifications.FieldNotificationOrderNumber, field.TypeString, value)
		_node.NotificationOrderNumber = value
	}
	if value, ok := enc.mutation.NotesheetScannedCopy(); ok {
		_spec.SetField(examnotifications.FieldNotesheetScannedCopy, field.TypeString, value)
		_node.NotesheetScannedCopy = value
	}
	if value, ok := enc.mutation.NotificationNumber(); ok {
		_spec.SetField(examnotifications.FieldNotificationNumber, field.TypeString, value)
		_node.NotificationNumber = value
	}
	if value, ok := enc.mutation.Flag(); ok {
		_spec.SetField(examnotifications.FieldFlag, field.TypeBool, value)
		_node.Flag = value
	}
	if value, ok := enc.mutation.ExamShortName(); ok {
		_spec.SetField(examnotifications.FieldExamShortName, field.TypeString, value)
		_node.ExamShortName = value
	}
	if value, ok := enc.mutation.CircleOfficeFacilityId(); ok {
		_spec.SetField(examnotifications.FieldCircleOfficeFacilityId, field.TypeString, value)
		_node.CircleOfficeFacilityId = value
	}
	if value, ok := enc.mutation.CircleOfficeName(); ok {
		_spec.SetField(examnotifications.FieldCircleOfficeName, field.TypeString, value)
		_node.CircleOfficeName = value
	}
	if value, ok := enc.mutation.IssuedBy(); ok {
		_spec.SetField(examnotifications.FieldIssuedBy, field.TypeString, value)
		_node.IssuedBy = value
	}
	if value, ok := enc.mutation.OrderDate(); ok {
		_spec.SetField(examnotifications.FieldOrderDate, field.TypeTime, value)
		_node.OrderDate = value
	}
	if value, ok := enc.mutation.CreatedBy(); ok {
		_spec.SetField(examnotifications.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := enc.mutation.CreatedById(); ok {
		_spec.SetField(examnotifications.FieldCreatedById, field.TypeInt64, value)
		_node.CreatedById = value
	}
	if value, ok := enc.mutation.CreatedByName(); ok {
		_spec.SetField(examnotifications.FieldCreatedByName, field.TypeString, value)
		_node.CreatedByName = value
	}
	if value, ok := enc.mutation.CreatedByDesignation(); ok {
		_spec.SetField(examnotifications.FieldCreatedByDesignation, field.TypeString, value)
		_node.CreatedByDesignation = value
	}
	if value, ok := enc.mutation.ApprovedBy(); ok {
		_spec.SetField(examnotifications.FieldApprovedBy, field.TypeString, value)
		_node.ApprovedBy = value
	}
	if value, ok := enc.mutation.ApprovedById(); ok {
		_spec.SetField(examnotifications.FieldApprovedById, field.TypeInt64, value)
		_node.ApprovedById = value
	}
	if value, ok := enc.mutation.ApprovedByName(); ok {
		_spec.SetField(examnotifications.FieldApprovedByName, field.TypeString, value)
		_node.ApprovedByName = value
	}
	if value, ok := enc.mutation.ApprovedByDesignation(); ok {
		_spec.SetField(examnotifications.FieldApprovedByDesignation, field.TypeString, value)
		_node.ApprovedByDesignation = value
	}
	if value, ok := enc.mutation.ResubmittedApplicationVerificationDate(); ok {
		_spec.SetField(examnotifications.FieldResubmittedApplicationVerificationDate, field.TypeTime, value)
		_node.ResubmittedApplicationVerificationDate = value
	}
	if value, ok := enc.mutation.Papers(); ok {
		_spec.SetField(examnotifications.FieldPapers, field.TypeJSON, value)
		_node.Papers = value
	}
	if value, ok := enc.mutation.NotificationStatus(); ok {
		_spec.SetField(examnotifications.FieldNotificationStatus, field.TypeString, value)
		_node.NotificationStatus = value
	}
	if value, ok := enc.mutation.Status(); ok {
		_spec.SetField(examnotifications.FieldStatus, field.TypeString, value)
		_node.Status = value
	}
	if value, ok := enc.mutation.NotificationReIssueStatus(); ok {
		_spec.SetField(examnotifications.FieldNotificationReIssueStatus, field.TypeBool, value)
		_node.NotificationReIssueStatus = value
	}
	if value, ok := enc.mutation.EditFlagStatus(); ok {
		_spec.SetField(examnotifications.FieldEditFlagStatus, field.TypeBool, value)
		_node.EditFlagStatus = value
	}
	if value, ok := enc.mutation.ExamCode(); ok {
		_spec.SetField(examnotifications.FieldExamCode, field.TypeInt32, value)
		_node.ExamCode = value
	}
	if value, ok := enc.mutation.ExamName(); ok {
		_spec.SetField(examnotifications.FieldExamName, field.TypeString, value)
		_node.ExamName = value
	}
	if value, ok := enc.mutation.NotificationRemarks(); ok {
		_spec.SetField(examnotifications.FieldNotificationRemarks, field.TypeString, value)
		_node.NotificationRemarks = value
	}
	if value, ok := enc.mutation.SmsExamShortName(); ok {
		_spec.SetField(examnotifications.FieldSmsExamShortName, field.TypeString, value)
		_node.SmsExamShortName = value
	}
	if nodes := enc.mutation.UserIDrefIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   examnotifications.UserIDrefTable,
			Columns: []string{examnotifications.UserIDrefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usermaster.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := enc.mutation.LogDataIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   examnotifications.LogDataTable,
			Columns: []string{examnotifications.LogDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(logs.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ExamNotificationsCreateBulk is the builder for creating many ExamNotifications entities in bulk.
type ExamNotificationsCreateBulk struct {
	config
	builders []*ExamNotificationsCreate
}

// Save creates the ExamNotifications entities in the database.
func (encb *ExamNotificationsCreateBulk) Save(ctx context.Context) ([]*ExamNotifications, error) {
	specs := make([]*sqlgraph.CreateSpec, len(encb.builders))
	nodes := make([]*ExamNotifications, len(encb.builders))
	mutators := make([]Mutator, len(encb.builders))
	for i := range encb.builders {
		func(i int, root context.Context) {
			builder := encb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ExamNotificationsMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, encb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, encb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, encb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (encb *ExamNotificationsCreateBulk) SaveX(ctx context.Context) []*ExamNotifications {
	v, err := encb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (encb *ExamNotificationsCreateBulk) Exec(ctx context.Context) error {
	_, err := encb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (encb *ExamNotificationsCreateBulk) ExecX(ctx context.Context) {
	if err := encb.Exec(ctx); err != nil {
		panic(err)
	}
}
