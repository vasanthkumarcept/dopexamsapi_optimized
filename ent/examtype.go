// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"recruit/ent/exam"
	"recruit/ent/examtype"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// ExamType is the model entity for the ExamType schema.
type ExamType struct {
	config `json:"-"`
	// ID of the ent.
	ID int32 `json:"id,omitempty"`
	// ExamType holds the value of the "ExamType" field.
	ExamType string `json:"ExamType,omitempty"`
	// Status holds the value of the "Status" field.
	Status string `json:"Status,omitempty"`
	// ExamCode holds the value of the "ExamCode" field.
	ExamCode int32 `json:"ExamCode,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ExamTypeQuery when eager-loading is set.
	Edges        ExamTypeEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ExamTypeEdges holds the relations/edges for other nodes in the graph.
type ExamTypeEdges struct {
	// Exam holds the value of the exam edge.
	Exam *Exam `json:"exam,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ExamOrErr returns the Exam value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ExamTypeEdges) ExamOrErr() (*Exam, error) {
	if e.loadedTypes[0] {
		if e.Exam == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: exam.Label}
		}
		return e.Exam, nil
	}
	return nil, &NotLoadedError{edge: "exam"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ExamType) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case examtype.FieldID, examtype.FieldExamCode:
			values[i] = new(sql.NullInt64)
		case examtype.FieldExamType, examtype.FieldStatus:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ExamType fields.
func (et *ExamType) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case examtype.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			et.ID = int32(value.Int64)
		case examtype.FieldExamType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ExamType", values[i])
			} else if value.Valid {
				et.ExamType = value.String
			}
		case examtype.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Status", values[i])
			} else if value.Valid {
				et.Status = value.String
			}
		case examtype.FieldExamCode:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field ExamCode", values[i])
			} else if value.Valid {
				et.ExamCode = int32(value.Int64)
			}
		default:
			et.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ExamType.
// This includes values selected through modifiers, order, etc.
func (et *ExamType) Value(name string) (ent.Value, error) {
	return et.selectValues.Get(name)
}

// QueryExam queries the "exam" edge of the ExamType entity.
func (et *ExamType) QueryExam() *ExamQuery {
	return NewExamTypeClient(et.config).QueryExam(et)
}

// Update returns a builder for updating this ExamType.
// Note that you need to call ExamType.Unwrap() before calling this method if this ExamType
// was returned from a transaction, and the transaction was committed or rolled back.
func (et *ExamType) Update() *ExamTypeUpdateOne {
	return NewExamTypeClient(et.config).UpdateOne(et)
}

// Unwrap unwraps the ExamType entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (et *ExamType) Unwrap() *ExamType {
	_tx, ok := et.config.driver.(*txDriver)
	if !ok {
		panic("ent: ExamType is not a transactional entity")
	}
	et.config.driver = _tx.drv
	return et
}

// String implements the fmt.Stringer.
func (et *ExamType) String() string {
	var builder strings.Builder
	builder.WriteString("ExamType(")
	builder.WriteString(fmt.Sprintf("id=%v, ", et.ID))
	builder.WriteString("ExamType=")
	builder.WriteString(et.ExamType)
	builder.WriteString(", ")
	builder.WriteString("Status=")
	builder.WriteString(et.Status)
	builder.WriteString(", ")
	builder.WriteString("ExamCode=")
	builder.WriteString(fmt.Sprintf("%v", et.ExamCode))
	builder.WriteByte(')')
	return builder.String()
}

// ExamTypes is a parsable slice of ExamType.
type ExamTypes []*ExamType
