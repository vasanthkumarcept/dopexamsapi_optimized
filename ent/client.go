// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"

	"recruit/ent/migrate"

	"recruit/ent/adminlogin"
	"recruit/ent/adminmaster"
	"recruit/ent/ageeligibility"
	"recruit/ent/application"
	"recruit/ent/cadre_choice_ip"
	"recruit/ent/cadre_choice_mtspmmg"
	"recruit/ent/cadre_choice_pa"
	"recruit/ent/cadre_choice_pm"
	"recruit/ent/cadre_choice_pmpa"
	"recruit/ent/cadre_choice_ps"
	"recruit/ent/cadreeligibleconfiguration"
	"recruit/ent/categorymininummarkmapping"
	"recruit/ent/center"
	"recruit/ent/circlesummaryforno"
	"recruit/ent/directorateusers"
	"recruit/ent/disability"
	"recruit/ent/division_choice_mtspmmg"
	"recruit/ent/division_choice_pa"
	"recruit/ent/division_choice_pm"
	"recruit/ent/division_choice_pmpa"
	"recruit/ent/educationdetails"
	"recruit/ent/eligibilitycadrepaymatrix"
	"recruit/ent/eligibilitymaster"
	"recruit/ent/employeecadre"
	"recruit/ent/employeecategory"
	"recruit/ent/employeedesignation"
	"recruit/ent/employeegroup"
	"recruit/ent/employeemaster"
	"recruit/ent/employeeposts"
	"recruit/ent/employees"
	"recruit/ent/errorlogs"
	"recruit/ent/exam"
	"recruit/ent/exam_application_mtspmmg"
	"recruit/ent/exam_applications_gdspa"
	"recruit/ent/exam_applications_gdspm"
	"recruit/ent/exam_applications_ip"
	"recruit/ent/exam_applications_pmpa"
	"recruit/ent/exam_applications_ps"
	"recruit/ent/examcalendar"
	"recruit/ent/examcategorydisabilitymapping"
	"recruit/ent/examcenterhall"
	"recruit/ent/examcitycenter"
	"recruit/ent/examnotifications"
	"recruit/ent/exampapers"
	"recruit/ent/exampostmapping"
	"recruit/ent/examtype"
	"recruit/ent/facilitymasters"
	"recruit/ent/login"
	"recruit/ent/logs"
	"recruit/ent/message"
	"recruit/ent/notification"
	"recruit/ent/papertypes"
	"recruit/ent/pdf"
	"recruit/ent/placeofpreferenceip"
	"recruit/ent/placeofpreferenceps"
	"recruit/ent/postexampaper"
	"recruit/ent/recommendationsgdspaapplications"
	"recruit/ent/recommendationsgdspmapplications"
	"recruit/ent/recommendationsipapplications"
	"recruit/ent/recommendationsmtspmmgapplications"
	"recruit/ent/recommendationspmpaapplications"
	"recruit/ent/recommendationspsapplications"
	"recruit/ent/reversal_application_ip"
	"recruit/ent/rolemaster"
	"recruit/ent/servicerequest"
	"recruit/ent/smsemaillog"
	"recruit/ent/user"
	"recruit/ent/usermaster"
	"recruit/ent/vacancyyear"
	"recruit/ent/version"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// AdminLogin is the client for interacting with the AdminLogin builders.
	AdminLogin *AdminLoginClient
	// AdminMaster is the client for interacting with the AdminMaster builders.
	AdminMaster *AdminMasterClient
	// AgeEligibility is the client for interacting with the AgeEligibility builders.
	AgeEligibility *AgeEligibilityClient
	// Application is the client for interacting with the Application builders.
	Application *ApplicationClient
	// CadreEligibleConfiguration is the client for interacting with the CadreEligibleConfiguration builders.
	CadreEligibleConfiguration *CadreEligibleConfigurationClient
	// Cadre_Choice_IP is the client for interacting with the Cadre_Choice_IP builders.
	Cadre_Choice_IP *CadreChoiceIPClient
	// Cadre_Choice_MTSPMMG is the client for interacting with the Cadre_Choice_MTSPMMG builders.
	Cadre_Choice_MTSPMMG *CadreChoiceMTSPMMGClient
	// Cadre_Choice_PA is the client for interacting with the Cadre_Choice_PA builders.
	Cadre_Choice_PA *CadreChoicePAClient
	// Cadre_Choice_PM is the client for interacting with the Cadre_Choice_PM builders.
	Cadre_Choice_PM *CadreChoicePMClient
	// Cadre_Choice_PMPA is the client for interacting with the Cadre_Choice_PMPA builders.
	Cadre_Choice_PMPA *CadreChoicePMPAClient
	// Cadre_Choice_PS is the client for interacting with the Cadre_Choice_PS builders.
	Cadre_Choice_PS *CadreChoicePSClient
	// CategoryMininumMarkMapping is the client for interacting with the CategoryMininumMarkMapping builders.
	CategoryMininumMarkMapping *CategoryMininumMarkMappingClient
	// Center is the client for interacting with the Center builders.
	Center *CenterClient
	// CircleSummaryForNO is the client for interacting with the CircleSummaryForNO builders.
	CircleSummaryForNO *CircleSummaryForNOClient
	// DirectorateUsers is the client for interacting with the DirectorateUsers builders.
	DirectorateUsers *DirectorateUsersClient
	// Disability is the client for interacting with the Disability builders.
	Disability *DisabilityClient
	// Division_Choice_MTSPMMG is the client for interacting with the Division_Choice_MTSPMMG builders.
	Division_Choice_MTSPMMG *DivisionChoiceMTSPMMGClient
	// Division_Choice_PA is the client for interacting with the Division_Choice_PA builders.
	Division_Choice_PA *DivisionChoicePAClient
	// Division_Choice_PM is the client for interacting with the Division_Choice_PM builders.
	Division_Choice_PM *DivisionChoicePMClient
	// Division_Choice_PMPA is the client for interacting with the Division_Choice_PMPA builders.
	Division_Choice_PMPA *DivisionChoicePMPAClient
	// EducationDetails is the client for interacting with the EducationDetails builders.
	EducationDetails *EducationDetailsClient
	// EligibilityCadrePayMatrix is the client for interacting with the EligibilityCadrePayMatrix builders.
	EligibilityCadrePayMatrix *EligibilityCadrePayMatrixClient
	// EligibilityMaster is the client for interacting with the EligibilityMaster builders.
	EligibilityMaster *EligibilityMasterClient
	// EmployeeCadre is the client for interacting with the EmployeeCadre builders.
	EmployeeCadre *EmployeeCadreClient
	// EmployeeCategory is the client for interacting with the EmployeeCategory builders.
	EmployeeCategory *EmployeeCategoryClient
	// EmployeeDesignation is the client for interacting with the EmployeeDesignation builders.
	EmployeeDesignation *EmployeeDesignationClient
	// EmployeeGroup is the client for interacting with the EmployeeGroup builders.
	EmployeeGroup *EmployeeGroupClient
	// EmployeeMaster is the client for interacting with the EmployeeMaster builders.
	EmployeeMaster *EmployeeMasterClient
	// EmployeePosts is the client for interacting with the EmployeePosts builders.
	EmployeePosts *EmployeePostsClient
	// Employees is the client for interacting with the Employees builders.
	Employees *EmployeesClient
	// ErrorLogs is the client for interacting with the ErrorLogs builders.
	ErrorLogs *ErrorLogsClient
	// Exam is the client for interacting with the Exam builders.
	Exam *ExamClient
	// ExamCalendar is the client for interacting with the ExamCalendar builders.
	ExamCalendar *ExamCalendarClient
	// ExamCategoryDisabilityMapping is the client for interacting with the ExamCategoryDisabilityMapping builders.
	ExamCategoryDisabilityMapping *ExamCategoryDisabilityMappingClient
	// ExamCenterHall is the client for interacting with the ExamCenterHall builders.
	ExamCenterHall *ExamCenterHallClient
	// ExamCityCenter is the client for interacting with the ExamCityCenter builders.
	ExamCityCenter *ExamCityCenterClient
	// ExamNotifications is the client for interacting with the ExamNotifications builders.
	ExamNotifications *ExamNotificationsClient
	// ExamPapers is the client for interacting with the ExamPapers builders.
	ExamPapers *ExamPapersClient
	// ExamPostMapping is the client for interacting with the ExamPostMapping builders.
	ExamPostMapping *ExamPostMappingClient
	// ExamType is the client for interacting with the ExamType builders.
	ExamType *ExamTypeClient
	// Exam_Application_MTSPMMG is the client for interacting with the Exam_Application_MTSPMMG builders.
	Exam_Application_MTSPMMG *ExamApplicationMTSPMMGClient
	// Exam_Applications_GDSPA is the client for interacting with the Exam_Applications_GDSPA builders.
	Exam_Applications_GDSPA *ExamApplicationsGDSPAClient
	// Exam_Applications_GDSPM is the client for interacting with the Exam_Applications_GDSPM builders.
	Exam_Applications_GDSPM *ExamApplicationsGDSPMClient
	// Exam_Applications_IP is the client for interacting with the Exam_Applications_IP builders.
	Exam_Applications_IP *ExamApplicationsIPClient
	// Exam_Applications_PMPA is the client for interacting with the Exam_Applications_PMPA builders.
	Exam_Applications_PMPA *ExamApplicationsPMPAClient
	// Exam_Applications_PS is the client for interacting with the Exam_Applications_PS builders.
	Exam_Applications_PS *ExamApplicationsPSClient
	// FacilityMasters is the client for interacting with the FacilityMasters builders.
	FacilityMasters *FacilityMastersClient
	// Login is the client for interacting with the Login builders.
	Login *LoginClient
	// Logs is the client for interacting with the Logs builders.
	Logs *LogsClient
	// Message is the client for interacting with the Message builders.
	Message *MessageClient
	// Notification is the client for interacting with the Notification builders.
	Notification *NotificationClient
	// PDF is the client for interacting with the PDF builders.
	PDF *PDFClient
	// PaperTypes is the client for interacting with the PaperTypes builders.
	PaperTypes *PaperTypesClient
	// PlaceOfPreferenceIP is the client for interacting with the PlaceOfPreferenceIP builders.
	PlaceOfPreferenceIP *PlaceOfPreferenceIPClient
	// PlaceOfPreferencePS is the client for interacting with the PlaceOfPreferencePS builders.
	PlaceOfPreferencePS *PlaceOfPreferencePSClient
	// PostExamPaper is the client for interacting with the PostExamPaper builders.
	PostExamPaper *PostExamPaperClient
	// RecommendationsGDSPAApplications is the client for interacting with the RecommendationsGDSPAApplications builders.
	RecommendationsGDSPAApplications *RecommendationsGDSPAApplicationsClient
	// RecommendationsGDSPMApplications is the client for interacting with the RecommendationsGDSPMApplications builders.
	RecommendationsGDSPMApplications *RecommendationsGDSPMApplicationsClient
	// RecommendationsIPApplications is the client for interacting with the RecommendationsIPApplications builders.
	RecommendationsIPApplications *RecommendationsIPApplicationsClient
	// RecommendationsMTSPMMGApplications is the client for interacting with the RecommendationsMTSPMMGApplications builders.
	RecommendationsMTSPMMGApplications *RecommendationsMTSPMMGApplicationsClient
	// RecommendationsPMPAApplications is the client for interacting with the RecommendationsPMPAApplications builders.
	RecommendationsPMPAApplications *RecommendationsPMPAApplicationsClient
	// RecommendationsPSApplications is the client for interacting with the RecommendationsPSApplications builders.
	RecommendationsPSApplications *RecommendationsPSApplicationsClient
	// Reversal_Application_IP is the client for interacting with the Reversal_Application_IP builders.
	Reversal_Application_IP *ReversalApplicationIPClient
	// RoleMaster is the client for interacting with the RoleMaster builders.
	RoleMaster *RoleMasterClient
	// ServiceRequest is the client for interacting with the ServiceRequest builders.
	ServiceRequest *ServiceRequestClient
	// SmsEmailLog is the client for interacting with the SmsEmailLog builders.
	SmsEmailLog *SmsEmailLogClient
	// User is the client for interacting with the User builders.
	User *UserClient
	// UserMaster is the client for interacting with the UserMaster builders.
	UserMaster *UserMasterClient
	// VacancyYear is the client for interacting with the VacancyYear builders.
	VacancyYear *VacancyYearClient
	// Version is the client for interacting with the Version builders.
	Version *VersionClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.AdminLogin = NewAdminLoginClient(c.config)
	c.AdminMaster = NewAdminMasterClient(c.config)
	c.AgeEligibility = NewAgeEligibilityClient(c.config)
	c.Application = NewApplicationClient(c.config)
	c.CadreEligibleConfiguration = NewCadreEligibleConfigurationClient(c.config)
	c.Cadre_Choice_IP = NewCadreChoiceIPClient(c.config)
	c.Cadre_Choice_MTSPMMG = NewCadreChoiceMTSPMMGClient(c.config)
	c.Cadre_Choice_PA = NewCadreChoicePAClient(c.config)
	c.Cadre_Choice_PM = NewCadreChoicePMClient(c.config)
	c.Cadre_Choice_PMPA = NewCadreChoicePMPAClient(c.config)
	c.Cadre_Choice_PS = NewCadreChoicePSClient(c.config)
	c.CategoryMininumMarkMapping = NewCategoryMininumMarkMappingClient(c.config)
	c.Center = NewCenterClient(c.config)
	c.CircleSummaryForNO = NewCircleSummaryForNOClient(c.config)
	c.DirectorateUsers = NewDirectorateUsersClient(c.config)
	c.Disability = NewDisabilityClient(c.config)
	c.Division_Choice_MTSPMMG = NewDivisionChoiceMTSPMMGClient(c.config)
	c.Division_Choice_PA = NewDivisionChoicePAClient(c.config)
	c.Division_Choice_PM = NewDivisionChoicePMClient(c.config)
	c.Division_Choice_PMPA = NewDivisionChoicePMPAClient(c.config)
	c.EducationDetails = NewEducationDetailsClient(c.config)
	c.EligibilityCadrePayMatrix = NewEligibilityCadrePayMatrixClient(c.config)
	c.EligibilityMaster = NewEligibilityMasterClient(c.config)
	c.EmployeeCadre = NewEmployeeCadreClient(c.config)
	c.EmployeeCategory = NewEmployeeCategoryClient(c.config)
	c.EmployeeDesignation = NewEmployeeDesignationClient(c.config)
	c.EmployeeGroup = NewEmployeeGroupClient(c.config)
	c.EmployeeMaster = NewEmployeeMasterClient(c.config)
	c.EmployeePosts = NewEmployeePostsClient(c.config)
	c.Employees = NewEmployeesClient(c.config)
	c.ErrorLogs = NewErrorLogsClient(c.config)
	c.Exam = NewExamClient(c.config)
	c.ExamCalendar = NewExamCalendarClient(c.config)
	c.ExamCategoryDisabilityMapping = NewExamCategoryDisabilityMappingClient(c.config)
	c.ExamCenterHall = NewExamCenterHallClient(c.config)
	c.ExamCityCenter = NewExamCityCenterClient(c.config)
	c.ExamNotifications = NewExamNotificationsClient(c.config)
	c.ExamPapers = NewExamPapersClient(c.config)
	c.ExamPostMapping = NewExamPostMappingClient(c.config)
	c.ExamType = NewExamTypeClient(c.config)
	c.Exam_Application_MTSPMMG = NewExamApplicationMTSPMMGClient(c.config)
	c.Exam_Applications_GDSPA = NewExamApplicationsGDSPAClient(c.config)
	c.Exam_Applications_GDSPM = NewExamApplicationsGDSPMClient(c.config)
	c.Exam_Applications_IP = NewExamApplicationsIPClient(c.config)
	c.Exam_Applications_PMPA = NewExamApplicationsPMPAClient(c.config)
	c.Exam_Applications_PS = NewExamApplicationsPSClient(c.config)
	c.FacilityMasters = NewFacilityMastersClient(c.config)
	c.Login = NewLoginClient(c.config)
	c.Logs = NewLogsClient(c.config)
	c.Message = NewMessageClient(c.config)
	c.Notification = NewNotificationClient(c.config)
	c.PDF = NewPDFClient(c.config)
	c.PaperTypes = NewPaperTypesClient(c.config)
	c.PlaceOfPreferenceIP = NewPlaceOfPreferenceIPClient(c.config)
	c.PlaceOfPreferencePS = NewPlaceOfPreferencePSClient(c.config)
	c.PostExamPaper = NewPostExamPaperClient(c.config)
	c.RecommendationsGDSPAApplications = NewRecommendationsGDSPAApplicationsClient(c.config)
	c.RecommendationsGDSPMApplications = NewRecommendationsGDSPMApplicationsClient(c.config)
	c.RecommendationsIPApplications = NewRecommendationsIPApplicationsClient(c.config)
	c.RecommendationsMTSPMMGApplications = NewRecommendationsMTSPMMGApplicationsClient(c.config)
	c.RecommendationsPMPAApplications = NewRecommendationsPMPAApplicationsClient(c.config)
	c.RecommendationsPSApplications = NewRecommendationsPSApplicationsClient(c.config)
	c.Reversal_Application_IP = NewReversalApplicationIPClient(c.config)
	c.RoleMaster = NewRoleMasterClient(c.config)
	c.ServiceRequest = NewServiceRequestClient(c.config)
	c.SmsEmailLog = NewSmsEmailLogClient(c.config)
	c.User = NewUserClient(c.config)
	c.UserMaster = NewUserMasterClient(c.config)
	c.VacancyYear = NewVacancyYearClient(c.config)
	c.Version = NewVersionClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:                                ctx,
		config:                             cfg,
		AdminLogin:                         NewAdminLoginClient(cfg),
		AdminMaster:                        NewAdminMasterClient(cfg),
		AgeEligibility:                     NewAgeEligibilityClient(cfg),
		Application:                        NewApplicationClient(cfg),
		CadreEligibleConfiguration:         NewCadreEligibleConfigurationClient(cfg),
		Cadre_Choice_IP:                    NewCadreChoiceIPClient(cfg),
		Cadre_Choice_MTSPMMG:               NewCadreChoiceMTSPMMGClient(cfg),
		Cadre_Choice_PA:                    NewCadreChoicePAClient(cfg),
		Cadre_Choice_PM:                    NewCadreChoicePMClient(cfg),
		Cadre_Choice_PMPA:                  NewCadreChoicePMPAClient(cfg),
		Cadre_Choice_PS:                    NewCadreChoicePSClient(cfg),
		CategoryMininumMarkMapping:         NewCategoryMininumMarkMappingClient(cfg),
		Center:                             NewCenterClient(cfg),
		CircleSummaryForNO:                 NewCircleSummaryForNOClient(cfg),
		DirectorateUsers:                   NewDirectorateUsersClient(cfg),
		Disability:                         NewDisabilityClient(cfg),
		Division_Choice_MTSPMMG:            NewDivisionChoiceMTSPMMGClient(cfg),
		Division_Choice_PA:                 NewDivisionChoicePAClient(cfg),
		Division_Choice_PM:                 NewDivisionChoicePMClient(cfg),
		Division_Choice_PMPA:               NewDivisionChoicePMPAClient(cfg),
		EducationDetails:                   NewEducationDetailsClient(cfg),
		EligibilityCadrePayMatrix:          NewEligibilityCadrePayMatrixClient(cfg),
		EligibilityMaster:                  NewEligibilityMasterClient(cfg),
		EmployeeCadre:                      NewEmployeeCadreClient(cfg),
		EmployeeCategory:                   NewEmployeeCategoryClient(cfg),
		EmployeeDesignation:                NewEmployeeDesignationClient(cfg),
		EmployeeGroup:                      NewEmployeeGroupClient(cfg),
		EmployeeMaster:                     NewEmployeeMasterClient(cfg),
		EmployeePosts:                      NewEmployeePostsClient(cfg),
		Employees:                          NewEmployeesClient(cfg),
		ErrorLogs:                          NewErrorLogsClient(cfg),
		Exam:                               NewExamClient(cfg),
		ExamCalendar:                       NewExamCalendarClient(cfg),
		ExamCategoryDisabilityMapping:      NewExamCategoryDisabilityMappingClient(cfg),
		ExamCenterHall:                     NewExamCenterHallClient(cfg),
		ExamCityCenter:                     NewExamCityCenterClient(cfg),
		ExamNotifications:                  NewExamNotificationsClient(cfg),
		ExamPapers:                         NewExamPapersClient(cfg),
		ExamPostMapping:                    NewExamPostMappingClient(cfg),
		ExamType:                           NewExamTypeClient(cfg),
		Exam_Application_MTSPMMG:           NewExamApplicationMTSPMMGClient(cfg),
		Exam_Applications_GDSPA:            NewExamApplicationsGDSPAClient(cfg),
		Exam_Applications_GDSPM:            NewExamApplicationsGDSPMClient(cfg),
		Exam_Applications_IP:               NewExamApplicationsIPClient(cfg),
		Exam_Applications_PMPA:             NewExamApplicationsPMPAClient(cfg),
		Exam_Applications_PS:               NewExamApplicationsPSClient(cfg),
		FacilityMasters:                    NewFacilityMastersClient(cfg),
		Login:                              NewLoginClient(cfg),
		Logs:                               NewLogsClient(cfg),
		Message:                            NewMessageClient(cfg),
		Notification:                       NewNotificationClient(cfg),
		PDF:                                NewPDFClient(cfg),
		PaperTypes:                         NewPaperTypesClient(cfg),
		PlaceOfPreferenceIP:                NewPlaceOfPreferenceIPClient(cfg),
		PlaceOfPreferencePS:                NewPlaceOfPreferencePSClient(cfg),
		PostExamPaper:                      NewPostExamPaperClient(cfg),
		RecommendationsGDSPAApplications:   NewRecommendationsGDSPAApplicationsClient(cfg),
		RecommendationsGDSPMApplications:   NewRecommendationsGDSPMApplicationsClient(cfg),
		RecommendationsIPApplications:      NewRecommendationsIPApplicationsClient(cfg),
		RecommendationsMTSPMMGApplications: NewRecommendationsMTSPMMGApplicationsClient(cfg),
		RecommendationsPMPAApplications:    NewRecommendationsPMPAApplicationsClient(cfg),
		RecommendationsPSApplications:      NewRecommendationsPSApplicationsClient(cfg),
		Reversal_Application_IP:            NewReversalApplicationIPClient(cfg),
		RoleMaster:                         NewRoleMasterClient(cfg),
		ServiceRequest:                     NewServiceRequestClient(cfg),
		SmsEmailLog:                        NewSmsEmailLogClient(cfg),
		User:                               NewUserClient(cfg),
		UserMaster:                         NewUserMasterClient(cfg),
		VacancyYear:                        NewVacancyYearClient(cfg),
		Version:                            NewVersionClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:                                ctx,
		config:                             cfg,
		AdminLogin:                         NewAdminLoginClient(cfg),
		AdminMaster:                        NewAdminMasterClient(cfg),
		AgeEligibility:                     NewAgeEligibilityClient(cfg),
		Application:                        NewApplicationClient(cfg),
		CadreEligibleConfiguration:         NewCadreEligibleConfigurationClient(cfg),
		Cadre_Choice_IP:                    NewCadreChoiceIPClient(cfg),
		Cadre_Choice_MTSPMMG:               NewCadreChoiceMTSPMMGClient(cfg),
		Cadre_Choice_PA:                    NewCadreChoicePAClient(cfg),
		Cadre_Choice_PM:                    NewCadreChoicePMClient(cfg),
		Cadre_Choice_PMPA:                  NewCadreChoicePMPAClient(cfg),
		Cadre_Choice_PS:                    NewCadreChoicePSClient(cfg),
		CategoryMininumMarkMapping:         NewCategoryMininumMarkMappingClient(cfg),
		Center:                             NewCenterClient(cfg),
		CircleSummaryForNO:                 NewCircleSummaryForNOClient(cfg),
		DirectorateUsers:                   NewDirectorateUsersClient(cfg),
		Disability:                         NewDisabilityClient(cfg),
		Division_Choice_MTSPMMG:            NewDivisionChoiceMTSPMMGClient(cfg),
		Division_Choice_PA:                 NewDivisionChoicePAClient(cfg),
		Division_Choice_PM:                 NewDivisionChoicePMClient(cfg),
		Division_Choice_PMPA:               NewDivisionChoicePMPAClient(cfg),
		EducationDetails:                   NewEducationDetailsClient(cfg),
		EligibilityCadrePayMatrix:          NewEligibilityCadrePayMatrixClient(cfg),
		EligibilityMaster:                  NewEligibilityMasterClient(cfg),
		EmployeeCadre:                      NewEmployeeCadreClient(cfg),
		EmployeeCategory:                   NewEmployeeCategoryClient(cfg),
		EmployeeDesignation:                NewEmployeeDesignationClient(cfg),
		EmployeeGroup:                      NewEmployeeGroupClient(cfg),
		EmployeeMaster:                     NewEmployeeMasterClient(cfg),
		EmployeePosts:                      NewEmployeePostsClient(cfg),
		Employees:                          NewEmployeesClient(cfg),
		ErrorLogs:                          NewErrorLogsClient(cfg),
		Exam:                               NewExamClient(cfg),
		ExamCalendar:                       NewExamCalendarClient(cfg),
		ExamCategoryDisabilityMapping:      NewExamCategoryDisabilityMappingClient(cfg),
		ExamCenterHall:                     NewExamCenterHallClient(cfg),
		ExamCityCenter:                     NewExamCityCenterClient(cfg),
		ExamNotifications:                  NewExamNotificationsClient(cfg),
		ExamPapers:                         NewExamPapersClient(cfg),
		ExamPostMapping:                    NewExamPostMappingClient(cfg),
		ExamType:                           NewExamTypeClient(cfg),
		Exam_Application_MTSPMMG:           NewExamApplicationMTSPMMGClient(cfg),
		Exam_Applications_GDSPA:            NewExamApplicationsGDSPAClient(cfg),
		Exam_Applications_GDSPM:            NewExamApplicationsGDSPMClient(cfg),
		Exam_Applications_IP:               NewExamApplicationsIPClient(cfg),
		Exam_Applications_PMPA:             NewExamApplicationsPMPAClient(cfg),
		Exam_Applications_PS:               NewExamApplicationsPSClient(cfg),
		FacilityMasters:                    NewFacilityMastersClient(cfg),
		Login:                              NewLoginClient(cfg),
		Logs:                               NewLogsClient(cfg),
		Message:                            NewMessageClient(cfg),
		Notification:                       NewNotificationClient(cfg),
		PDF:                                NewPDFClient(cfg),
		PaperTypes:                         NewPaperTypesClient(cfg),
		PlaceOfPreferenceIP:                NewPlaceOfPreferenceIPClient(cfg),
		PlaceOfPreferencePS:                NewPlaceOfPreferencePSClient(cfg),
		PostExamPaper:                      NewPostExamPaperClient(cfg),
		RecommendationsGDSPAApplications:   NewRecommendationsGDSPAApplicationsClient(cfg),
		RecommendationsGDSPMApplications:   NewRecommendationsGDSPMApplicationsClient(cfg),
		RecommendationsIPApplications:      NewRecommendationsIPApplicationsClient(cfg),
		RecommendationsMTSPMMGApplications: NewRecommendationsMTSPMMGApplicationsClient(cfg),
		RecommendationsPMPAApplications:    NewRecommendationsPMPAApplicationsClient(cfg),
		RecommendationsPSApplications:      NewRecommendationsPSApplicationsClient(cfg),
		Reversal_Application_IP:            NewReversalApplicationIPClient(cfg),
		RoleMaster:                         NewRoleMasterClient(cfg),
		ServiceRequest:                     NewServiceRequestClient(cfg),
		SmsEmailLog:                        NewSmsEmailLogClient(cfg),
		User:                               NewUserClient(cfg),
		UserMaster:                         NewUserMasterClient(cfg),
		VacancyYear:                        NewVacancyYearClient(cfg),
		Version:                            NewVersionClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		AdminLogin.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	for _, n := range []interface{ Use(...Hook) }{
		c.AdminLogin, c.AdminMaster, c.AgeEligibility, c.Application,
		c.CadreEligibleConfiguration, c.Cadre_Choice_IP, c.Cadre_Choice_MTSPMMG,
		c.Cadre_Choice_PA, c.Cadre_Choice_PM, c.Cadre_Choice_PMPA, c.Cadre_Choice_PS,
		c.CategoryMininumMarkMapping, c.Center, c.CircleSummaryForNO,
		c.DirectorateUsers, c.Disability, c.Division_Choice_MTSPMMG,
		c.Division_Choice_PA, c.Division_Choice_PM, c.Division_Choice_PMPA,
		c.EducationDetails, c.EligibilityCadrePayMatrix, c.EligibilityMaster,
		c.EmployeeCadre, c.EmployeeCategory, c.EmployeeDesignation, c.EmployeeGroup,
		c.EmployeeMaster, c.EmployeePosts, c.Employees, c.ErrorLogs, c.Exam,
		c.ExamCalendar, c.ExamCategoryDisabilityMapping, c.ExamCenterHall,
		c.ExamCityCenter, c.ExamNotifications, c.ExamPapers, c.ExamPostMapping,
		c.ExamType, c.Exam_Application_MTSPMMG, c.Exam_Applications_GDSPA,
		c.Exam_Applications_GDSPM, c.Exam_Applications_IP, c.Exam_Applications_PMPA,
		c.Exam_Applications_PS, c.FacilityMasters, c.Login, c.Logs, c.Message,
		c.Notification, c.PDF, c.PaperTypes, c.PlaceOfPreferenceIP,
		c.PlaceOfPreferencePS, c.PostExamPaper, c.RecommendationsGDSPAApplications,
		c.RecommendationsGDSPMApplications, c.RecommendationsIPApplications,
		c.RecommendationsMTSPMMGApplications, c.RecommendationsPMPAApplications,
		c.RecommendationsPSApplications, c.Reversal_Application_IP, c.RoleMaster,
		c.ServiceRequest, c.SmsEmailLog, c.User, c.UserMaster, c.VacancyYear,
		c.Version,
	} {
		n.Use(hooks...)
	}
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	for _, n := range []interface{ Intercept(...Interceptor) }{
		c.AdminLogin, c.AdminMaster, c.AgeEligibility, c.Application,
		c.CadreEligibleConfiguration, c.Cadre_Choice_IP, c.Cadre_Choice_MTSPMMG,
		c.Cadre_Choice_PA, c.Cadre_Choice_PM, c.Cadre_Choice_PMPA, c.Cadre_Choice_PS,
		c.CategoryMininumMarkMapping, c.Center, c.CircleSummaryForNO,
		c.DirectorateUsers, c.Disability, c.Division_Choice_MTSPMMG,
		c.Division_Choice_PA, c.Division_Choice_PM, c.Division_Choice_PMPA,
		c.EducationDetails, c.EligibilityCadrePayMatrix, c.EligibilityMaster,
		c.EmployeeCadre, c.EmployeeCategory, c.EmployeeDesignation, c.EmployeeGroup,
		c.EmployeeMaster, c.EmployeePosts, c.Employees, c.ErrorLogs, c.Exam,
		c.ExamCalendar, c.ExamCategoryDisabilityMapping, c.ExamCenterHall,
		c.ExamCityCenter, c.ExamNotifications, c.ExamPapers, c.ExamPostMapping,
		c.ExamType, c.Exam_Application_MTSPMMG, c.Exam_Applications_GDSPA,
		c.Exam_Applications_GDSPM, c.Exam_Applications_IP, c.Exam_Applications_PMPA,
		c.Exam_Applications_PS, c.FacilityMasters, c.Login, c.Logs, c.Message,
		c.Notification, c.PDF, c.PaperTypes, c.PlaceOfPreferenceIP,
		c.PlaceOfPreferencePS, c.PostExamPaper, c.RecommendationsGDSPAApplications,
		c.RecommendationsGDSPMApplications, c.RecommendationsIPApplications,
		c.RecommendationsMTSPMMGApplications, c.RecommendationsPMPAApplications,
		c.RecommendationsPSApplications, c.Reversal_Application_IP, c.RoleMaster,
		c.ServiceRequest, c.SmsEmailLog, c.User, c.UserMaster, c.VacancyYear,
		c.Version,
	} {
		n.Intercept(interceptors...)
	}
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *AdminLoginMutation:
		return c.AdminLogin.mutate(ctx, m)
	case *AdminMasterMutation:
		return c.AdminMaster.mutate(ctx, m)
	case *AgeEligibilityMutation:
		return c.AgeEligibility.mutate(ctx, m)
	case *ApplicationMutation:
		return c.Application.mutate(ctx, m)
	case *CadreEligibleConfigurationMutation:
		return c.CadreEligibleConfiguration.mutate(ctx, m)
	case *CadreChoiceIPMutation:
		return c.Cadre_Choice_IP.mutate(ctx, m)
	case *CadreChoiceMTSPMMGMutation:
		return c.Cadre_Choice_MTSPMMG.mutate(ctx, m)
	case *CadreChoicePAMutation:
		return c.Cadre_Choice_PA.mutate(ctx, m)
	case *CadreChoicePMMutation:
		return c.Cadre_Choice_PM.mutate(ctx, m)
	case *CadreChoicePMPAMutation:
		return c.Cadre_Choice_PMPA.mutate(ctx, m)
	case *CadreChoicePSMutation:
		return c.Cadre_Choice_PS.mutate(ctx, m)
	case *CategoryMininumMarkMappingMutation:
		return c.CategoryMininumMarkMapping.mutate(ctx, m)
	case *CenterMutation:
		return c.Center.mutate(ctx, m)
	case *CircleSummaryForNOMutation:
		return c.CircleSummaryForNO.mutate(ctx, m)
	case *DirectorateUsersMutation:
		return c.DirectorateUsers.mutate(ctx, m)
	case *DisabilityMutation:
		return c.Disability.mutate(ctx, m)
	case *DivisionChoiceMTSPMMGMutation:
		return c.Division_Choice_MTSPMMG.mutate(ctx, m)
	case *DivisionChoicePAMutation:
		return c.Division_Choice_PA.mutate(ctx, m)
	case *DivisionChoicePMMutation:
		return c.Division_Choice_PM.mutate(ctx, m)
	case *DivisionChoicePMPAMutation:
		return c.Division_Choice_PMPA.mutate(ctx, m)
	case *EducationDetailsMutation:
		return c.EducationDetails.mutate(ctx, m)
	case *EligibilityCadrePayMatrixMutation:
		return c.EligibilityCadrePayMatrix.mutate(ctx, m)
	case *EligibilityMasterMutation:
		return c.EligibilityMaster.mutate(ctx, m)
	case *EmployeeCadreMutation:
		return c.EmployeeCadre.mutate(ctx, m)
	case *EmployeeCategoryMutation:
		return c.EmployeeCategory.mutate(ctx, m)
	case *EmployeeDesignationMutation:
		return c.EmployeeDesignation.mutate(ctx, m)
	case *EmployeeGroupMutation:
		return c.EmployeeGroup.mutate(ctx, m)
	case *EmployeeMasterMutation:
		return c.EmployeeMaster.mutate(ctx, m)
	case *EmployeePostsMutation:
		return c.EmployeePosts.mutate(ctx, m)
	case *EmployeesMutation:
		return c.Employees.mutate(ctx, m)
	case *ErrorLogsMutation:
		return c.ErrorLogs.mutate(ctx, m)
	case *ExamMutation:
		return c.Exam.mutate(ctx, m)
	case *ExamCalendarMutation:
		return c.ExamCalendar.mutate(ctx, m)
	case *ExamCategoryDisabilityMappingMutation:
		return c.ExamCategoryDisabilityMapping.mutate(ctx, m)
	case *ExamCenterHallMutation:
		return c.ExamCenterHall.mutate(ctx, m)
	case *ExamCityCenterMutation:
		return c.ExamCityCenter.mutate(ctx, m)
	case *ExamNotificationsMutation:
		return c.ExamNotifications.mutate(ctx, m)
	case *ExamPapersMutation:
		return c.ExamPapers.mutate(ctx, m)
	case *ExamPostMappingMutation:
		return c.ExamPostMapping.mutate(ctx, m)
	case *ExamTypeMutation:
		return c.ExamType.mutate(ctx, m)
	case *ExamApplicationMTSPMMGMutation:
		return c.Exam_Application_MTSPMMG.mutate(ctx, m)
	case *ExamApplicationsGDSPAMutation:
		return c.Exam_Applications_GDSPA.mutate(ctx, m)
	case *ExamApplicationsGDSPMMutation:
		return c.Exam_Applications_GDSPM.mutate(ctx, m)
	case *ExamApplicationsIPMutation:
		return c.Exam_Applications_IP.mutate(ctx, m)
	case *ExamApplicationsPMPAMutation:
		return c.Exam_Applications_PMPA.mutate(ctx, m)
	case *ExamApplicationsPSMutation:
		return c.Exam_Applications_PS.mutate(ctx, m)
	case *FacilityMastersMutation:
		return c.FacilityMasters.mutate(ctx, m)
	case *LoginMutation:
		return c.Login.mutate(ctx, m)
	case *LogsMutation:
		return c.Logs.mutate(ctx, m)
	case *MessageMutation:
		return c.Message.mutate(ctx, m)
	case *NotificationMutation:
		return c.Notification.mutate(ctx, m)
	case *PDFMutation:
		return c.PDF.mutate(ctx, m)
	case *PaperTypesMutation:
		return c.PaperTypes.mutate(ctx, m)
	case *PlaceOfPreferenceIPMutation:
		return c.PlaceOfPreferenceIP.mutate(ctx, m)
	case *PlaceOfPreferencePSMutation:
		return c.PlaceOfPreferencePS.mutate(ctx, m)
	case *PostExamPaperMutation:
		return c.PostExamPaper.mutate(ctx, m)
	case *RecommendationsGDSPAApplicationsMutation:
		return c.RecommendationsGDSPAApplications.mutate(ctx, m)
	case *RecommendationsGDSPMApplicationsMutation:
		return c.RecommendationsGDSPMApplications.mutate(ctx, m)
	case *RecommendationsIPApplicationsMutation:
		return c.RecommendationsIPApplications.mutate(ctx, m)
	case *RecommendationsMTSPMMGApplicationsMutation:
		return c.RecommendationsMTSPMMGApplications.mutate(ctx, m)
	case *RecommendationsPMPAApplicationsMutation:
		return c.RecommendationsPMPAApplications.mutate(ctx, m)
	case *RecommendationsPSApplicationsMutation:
		return c.RecommendationsPSApplications.mutate(ctx, m)
	case *ReversalApplicationIPMutation:
		return c.Reversal_Application_IP.mutate(ctx, m)
	case *RoleMasterMutation:
		return c.RoleMaster.mutate(ctx, m)
	case *ServiceRequestMutation:
		return c.ServiceRequest.mutate(ctx, m)
	case *SmsEmailLogMutation:
		return c.SmsEmailLog.mutate(ctx, m)
	case *UserMutation:
		return c.User.mutate(ctx, m)
	case *UserMasterMutation:
		return c.UserMaster.mutate(ctx, m)
	case *VacancyYearMutation:
		return c.VacancyYear.mutate(ctx, m)
	case *VersionMutation:
		return c.Version.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// AdminLoginClient is a client for the AdminLogin schema.
type AdminLoginClient struct {
	config
}

// NewAdminLoginClient returns a client for the AdminLogin from the given config.
func NewAdminLoginClient(c config) *AdminLoginClient {
	return &AdminLoginClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `adminlogin.Hooks(f(g(h())))`.
func (c *AdminLoginClient) Use(hooks ...Hook) {
	c.hooks.AdminLogin = append(c.hooks.AdminLogin, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `adminlogin.Intercept(f(g(h())))`.
func (c *AdminLoginClient) Intercept(interceptors ...Interceptor) {
	c.inters.AdminLogin = append(c.inters.AdminLogin, interceptors...)
}

// Create returns a builder for creating a AdminLogin entity.
func (c *AdminLoginClient) Create() *AdminLoginCreate {
	mutation := newAdminLoginMutation(c.config, OpCreate)
	return &AdminLoginCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AdminLogin entities.
func (c *AdminLoginClient) CreateBulk(builders ...*AdminLoginCreate) *AdminLoginCreateBulk {
	return &AdminLoginCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AdminLogin.
func (c *AdminLoginClient) Update() *AdminLoginUpdate {
	mutation := newAdminLoginMutation(c.config, OpUpdate)
	return &AdminLoginUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AdminLoginClient) UpdateOne(al *AdminLogin) *AdminLoginUpdateOne {
	mutation := newAdminLoginMutation(c.config, OpUpdateOne, withAdminLogin(al))
	return &AdminLoginUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AdminLoginClient) UpdateOneID(id int32) *AdminLoginUpdateOne {
	mutation := newAdminLoginMutation(c.config, OpUpdateOne, withAdminLoginID(id))
	return &AdminLoginUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for AdminLogin.
func (c *AdminLoginClient) Delete() *AdminLoginDelete {
	mutation := newAdminLoginMutation(c.config, OpDelete)
	return &AdminLoginDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AdminLoginClient) DeleteOne(al *AdminLogin) *AdminLoginDeleteOne {
	return c.DeleteOneID(al.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *AdminLoginClient) DeleteOneID(id int32) *AdminLoginDeleteOne {
	builder := c.Delete().Where(adminlogin.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AdminLoginDeleteOne{builder}
}

// Query returns a query builder for AdminLogin.
func (c *AdminLoginClient) Query() *AdminLoginQuery {
	return &AdminLoginQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeAdminLogin},
		inters: c.Interceptors(),
	}
}

// Get returns a AdminLogin entity by its id.
func (c *AdminLoginClient) Get(ctx context.Context, id int32) (*AdminLogin, error) {
	return c.Query().Where(adminlogin.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AdminLoginClient) GetX(ctx context.Context, id int32) *AdminLogin {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryRoleMaster queries the role_master edge of a AdminLogin.
func (c *AdminLoginClient) QueryRoleMaster(al *AdminLogin) *RoleMasterQuery {
	query := (&RoleMasterClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := al.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(adminlogin.Table, adminlogin.FieldID, id),
			sqlgraph.To(rolemaster.Table, rolemaster.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, adminlogin.RoleMasterTable, adminlogin.RoleMasterColumn),
		)
		fromV = sqlgraph.Neighbors(al.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryLogData queries the LogData edge of a AdminLogin.
func (c *AdminLoginClient) QueryLogData(al *AdminLogin) *LogsQuery {
	query := (&LogsClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := al.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(adminlogin.Table, adminlogin.FieldID, id),
			sqlgraph.To(logs.Table, logs.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, adminlogin.LogDataTable, adminlogin.LogDataColumn),
		)
		fromV = sqlgraph.Neighbors(al.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *AdminLoginClient) Hooks() []Hook {
	return c.hooks.AdminLogin
}

// Interceptors returns the client interceptors.
func (c *AdminLoginClient) Interceptors() []Interceptor {
	return c.inters.AdminLogin
}

func (c *AdminLoginClient) mutate(ctx context.Context, m *AdminLoginMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&AdminLoginCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&AdminLoginUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&AdminLoginUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&AdminLoginDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown AdminLogin mutation op: %q", m.Op())
	}
}

// AdminMasterClient is a client for the AdminMaster schema.
type AdminMasterClient struct {
	config
}

// NewAdminMasterClient returns a client for the AdminMaster from the given config.
func NewAdminMasterClient(c config) *AdminMasterClient {
	return &AdminMasterClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `adminmaster.Hooks(f(g(h())))`.
func (c *AdminMasterClient) Use(hooks ...Hook) {
	c.hooks.AdminMaster = append(c.hooks.AdminMaster, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `adminmaster.Intercept(f(g(h())))`.
func (c *AdminMasterClient) Intercept(interceptors ...Interceptor) {
	c.inters.AdminMaster = append(c.inters.AdminMaster, interceptors...)
}

// Create returns a builder for creating a AdminMaster entity.
func (c *AdminMasterClient) Create() *AdminMasterCreate {
	mutation := newAdminMasterMutation(c.config, OpCreate)
	return &AdminMasterCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AdminMaster entities.
func (c *AdminMasterClient) CreateBulk(builders ...*AdminMasterCreate) *AdminMasterCreateBulk {
	return &AdminMasterCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AdminMaster.
func (c *AdminMasterClient) Update() *AdminMasterUpdate {
	mutation := newAdminMasterMutation(c.config, OpUpdate)
	return &AdminMasterUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AdminMasterClient) UpdateOne(am *AdminMaster) *AdminMasterUpdateOne {
	mutation := newAdminMasterMutation(c.config, OpUpdateOne, withAdminMaster(am))
	return &AdminMasterUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AdminMasterClient) UpdateOneID(id int64) *AdminMasterUpdateOne {
	mutation := newAdminMasterMutation(c.config, OpUpdateOne, withAdminMasterID(id))
	return &AdminMasterUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for AdminMaster.
func (c *AdminMasterClient) Delete() *AdminMasterDelete {
	mutation := newAdminMasterMutation(c.config, OpDelete)
	return &AdminMasterDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AdminMasterClient) DeleteOne(am *AdminMaster) *AdminMasterDeleteOne {
	return c.DeleteOneID(am.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *AdminMasterClient) DeleteOneID(id int64) *AdminMasterDeleteOne {
	builder := c.Delete().Where(adminmaster.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AdminMasterDeleteOne{builder}
}

// Query returns a query builder for AdminMaster.
func (c *AdminMasterClient) Query() *AdminMasterQuery {
	return &AdminMasterQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeAdminMaster},
		inters: c.Interceptors(),
	}
}

// Get returns a AdminMaster entity by its id.
func (c *AdminMasterClient) Get(ctx context.Context, id int64) (*AdminMaster, error) {
	return c.Query().Where(adminmaster.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AdminMasterClient) GetX(ctx context.Context, id int64) *AdminMaster {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryLogData queries the LogData edge of a AdminMaster.
func (c *AdminMasterClient) QueryLogData(am *AdminMaster) *LogsQuery {
	query := (&LogsClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := am.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(adminmaster.Table, adminmaster.FieldID, id),
			sqlgraph.To(logs.Table, logs.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, adminmaster.LogDataTable, adminmaster.LogDataColumn),
		)
		fromV = sqlgraph.Neighbors(am.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *AdminMasterClient) Hooks() []Hook {
	return c.hooks.AdminMaster
}

// Interceptors returns the client interceptors.
func (c *AdminMasterClient) Interceptors() []Interceptor {
	return c.inters.AdminMaster
}

func (c *AdminMasterClient) mutate(ctx context.Context, m *AdminMasterMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&AdminMasterCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&AdminMasterUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&AdminMasterUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&AdminMasterDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown AdminMaster mutation op: %q", m.Op())
	}
}

// AgeEligibilityClient is a client for the AgeEligibility schema.
type AgeEligibilityClient struct {
	config
}

// NewAgeEligibilityClient returns a client for the AgeEligibility from the given config.
func NewAgeEligibilityClient(c config) *AgeEligibilityClient {
	return &AgeEligibilityClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `ageeligibility.Hooks(f(g(h())))`.
func (c *AgeEligibilityClient) Use(hooks ...Hook) {
	c.hooks.AgeEligibility = append(c.hooks.AgeEligibility, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `ageeligibility.Intercept(f(g(h())))`.
func (c *AgeEligibilityClient) Intercept(interceptors ...Interceptor) {
	c.inters.AgeEligibility = append(c.inters.AgeEligibility, interceptors...)
}

// Create returns a builder for creating a AgeEligibility entity.
func (c *AgeEligibilityClient) Create() *AgeEligibilityCreate {
	mutation := newAgeEligibilityMutation(c.config, OpCreate)
	return &AgeEligibilityCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AgeEligibility entities.
func (c *AgeEligibilityClient) CreateBulk(builders ...*AgeEligibilityCreate) *AgeEligibilityCreateBulk {
	return &AgeEligibilityCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AgeEligibility.
func (c *AgeEligibilityClient) Update() *AgeEligibilityUpdate {
	mutation := newAgeEligibilityMutation(c.config, OpUpdate)
	return &AgeEligibilityUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AgeEligibilityClient) UpdateOne(ae *AgeEligibility) *AgeEligibilityUpdateOne {
	mutation := newAgeEligibilityMutation(c.config, OpUpdateOne, withAgeEligibility(ae))
	return &AgeEligibilityUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AgeEligibilityClient) UpdateOneID(id int32) *AgeEligibilityUpdateOne {
	mutation := newAgeEligibilityMutation(c.config, OpUpdateOne, withAgeEligibilityID(id))
	return &AgeEligibilityUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for AgeEligibility.
func (c *AgeEligibilityClient) Delete() *AgeEligibilityDelete {
	mutation := newAgeEligibilityMutation(c.config, OpDelete)
	return &AgeEligibilityDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AgeEligibilityClient) DeleteOne(ae *AgeEligibility) *AgeEligibilityDeleteOne {
	return c.DeleteOneID(ae.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *AgeEligibilityClient) DeleteOneID(id int32) *AgeEligibilityDeleteOne {
	builder := c.Delete().Where(ageeligibility.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AgeEligibilityDeleteOne{builder}
}

// Query returns a query builder for AgeEligibility.
func (c *AgeEligibilityClient) Query() *AgeEligibilityQuery {
	return &AgeEligibilityQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeAgeEligibility},
		inters: c.Interceptors(),
	}
}

// Get returns a AgeEligibility entity by its id.
func (c *AgeEligibilityClient) Get(ctx context.Context, id int32) (*AgeEligibility, error) {
	return c.Query().Where(ageeligibility.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AgeEligibilityClient) GetX(ctx context.Context, id int32) *AgeEligibility {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *AgeEligibilityClient) Hooks() []Hook {
	return c.hooks.AgeEligibility
}

// Interceptors returns the client interceptors.
func (c *AgeEligibilityClient) Interceptors() []Interceptor {
	return c.inters.AgeEligibility
}

func (c *AgeEligibilityClient) mutate(ctx context.Context, m *AgeEligibilityMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&AgeEligibilityCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&AgeEligibilityUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&AgeEligibilityUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&AgeEligibilityDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown AgeEligibility mutation op: %q", m.Op())
	}
}

// ApplicationClient is a client for the Application schema.
type ApplicationClient struct {
	config
}

// NewApplicationClient returns a client for the Application from the given config.
func NewApplicationClient(c config) *ApplicationClient {
	return &ApplicationClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `application.Hooks(f(g(h())))`.
func (c *ApplicationClient) Use(hooks ...Hook) {
	c.hooks.Application = append(c.hooks.Application, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `application.Intercept(f(g(h())))`.
func (c *ApplicationClient) Intercept(interceptors ...Interceptor) {
	c.inters.Application = append(c.inters.Application, interceptors...)
}

// Create returns a builder for creating a Application entity.
func (c *ApplicationClient) Create() *ApplicationCreate {
	mutation := newApplicationMutation(c.config, OpCreate)
	return &ApplicationCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Application entities.
func (c *ApplicationClient) CreateBulk(builders ...*ApplicationCreate) *ApplicationCreateBulk {
	return &ApplicationCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Application.
func (c *ApplicationClient) Update() *ApplicationUpdate {
	mutation := newApplicationMutation(c.config, OpUpdate)
	return &ApplicationUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ApplicationClient) UpdateOne(a *Application) *ApplicationUpdateOne {
	mutation := newApplicationMutation(c.config, OpUpdateOne, withApplication(a))
	return &ApplicationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ApplicationClient) UpdateOneID(id int32) *ApplicationUpdateOne {
	mutation := newApplicationMutation(c.config, OpUpdateOne, withApplicationID(id))
	return &ApplicationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Application.
func (c *ApplicationClient) Delete() *ApplicationDelete {
	mutation := newApplicationMutation(c.config, OpDelete)
	return &ApplicationDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ApplicationClient) DeleteOne(a *Application) *ApplicationDeleteOne {
	return c.DeleteOneID(a.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ApplicationClient) DeleteOneID(id int32) *ApplicationDeleteOne {
	builder := c.Delete().Where(application.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ApplicationDeleteOne{builder}
}

// Query returns a query builder for Application.
func (c *ApplicationClient) Query() *ApplicationQuery {
	return &ApplicationQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeApplication},
		inters: c.Interceptors(),
	}
}

// Get returns a Application entity by its id.
func (c *ApplicationClient) Get(ctx context.Context, id int32) (*Application, error) {
	return c.Query().Where(application.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ApplicationClient) GetX(ctx context.Context, id int32) *Application {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCenter queries the center edge of a Application.
func (c *ApplicationClient) QueryCenter(a *Application) *CenterQuery {
	query := (&CenterClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(application.Table, application.FieldID, id),
			sqlgraph.To(center.Table, center.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, application.CenterTable, application.CenterColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryNotification queries the notification edge of a Application.
func (c *ApplicationClient) QueryNotification(a *Application) *NotificationQuery {
	query := (&NotificationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(application.Table, application.FieldID, id),
			sqlgraph.To(notification.Table, notification.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, application.NotificationTable, application.NotificationColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ApplicationClient) Hooks() []Hook {
	return c.hooks.Application
}

// Interceptors returns the client interceptors.
func (c *ApplicationClient) Interceptors() []Interceptor {
	return c.inters.Application
}

func (c *ApplicationClient) mutate(ctx context.Context, m *ApplicationMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ApplicationCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ApplicationUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ApplicationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ApplicationDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Application mutation op: %q", m.Op())
	}
}

// CadreEligibleConfigurationClient is a client for the CadreEligibleConfiguration schema.
type CadreEligibleConfigurationClient struct {
	config
}

// NewCadreEligibleConfigurationClient returns a client for the CadreEligibleConfiguration from the given config.
func NewCadreEligibleConfigurationClient(c config) *CadreEligibleConfigurationClient {
	return &CadreEligibleConfigurationClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `cadreeligibleconfiguration.Hooks(f(g(h())))`.
func (c *CadreEligibleConfigurationClient) Use(hooks ...Hook) {
	c.hooks.CadreEligibleConfiguration = append(c.hooks.CadreEligibleConfiguration, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `cadreeligibleconfiguration.Intercept(f(g(h())))`.
func (c *CadreEligibleConfigurationClient) Intercept(interceptors ...Interceptor) {
	c.inters.CadreEligibleConfiguration = append(c.inters.CadreEligibleConfiguration, interceptors...)
}

// Create returns a builder for creating a CadreEligibleConfiguration entity.
func (c *CadreEligibleConfigurationClient) Create() *CadreEligibleConfigurationCreate {
	mutation := newCadreEligibleConfigurationMutation(c.config, OpCreate)
	return &CadreEligibleConfigurationCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of CadreEligibleConfiguration entities.
func (c *CadreEligibleConfigurationClient) CreateBulk(builders ...*CadreEligibleConfigurationCreate) *CadreEligibleConfigurationCreateBulk {
	return &CadreEligibleConfigurationCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for CadreEligibleConfiguration.
func (c *CadreEligibleConfigurationClient) Update() *CadreEligibleConfigurationUpdate {
	mutation := newCadreEligibleConfigurationMutation(c.config, OpUpdate)
	return &CadreEligibleConfigurationUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CadreEligibleConfigurationClient) UpdateOne(cec *CadreEligibleConfiguration) *CadreEligibleConfigurationUpdateOne {
	mutation := newCadreEligibleConfigurationMutation(c.config, OpUpdateOne, withCadreEligibleConfiguration(cec))
	return &CadreEligibleConfigurationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CadreEligibleConfigurationClient) UpdateOneID(id int64) *CadreEligibleConfigurationUpdateOne {
	mutation := newCadreEligibleConfigurationMutation(c.config, OpUpdateOne, withCadreEligibleConfigurationID(id))
	return &CadreEligibleConfigurationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CadreEligibleConfiguration.
func (c *CadreEligibleConfigurationClient) Delete() *CadreEligibleConfigurationDelete {
	mutation := newCadreEligibleConfigurationMutation(c.config, OpDelete)
	return &CadreEligibleConfigurationDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CadreEligibleConfigurationClient) DeleteOne(cec *CadreEligibleConfiguration) *CadreEligibleConfigurationDeleteOne {
	return c.DeleteOneID(cec.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CadreEligibleConfigurationClient) DeleteOneID(id int64) *CadreEligibleConfigurationDeleteOne {
	builder := c.Delete().Where(cadreeligibleconfiguration.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CadreEligibleConfigurationDeleteOne{builder}
}

// Query returns a query builder for CadreEligibleConfiguration.
func (c *CadreEligibleConfigurationClient) Query() *CadreEligibleConfigurationQuery {
	return &CadreEligibleConfigurationQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeCadreEligibleConfiguration},
		inters: c.Interceptors(),
	}
}

// Get returns a CadreEligibleConfiguration entity by its id.
func (c *CadreEligibleConfigurationClient) Get(ctx context.Context, id int64) (*CadreEligibleConfiguration, error) {
	return c.Query().Where(cadreeligibleconfiguration.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CadreEligibleConfigurationClient) GetX(ctx context.Context, id int64) *CadreEligibleConfiguration {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryLogData queries the LogData edge of a CadreEligibleConfiguration.
func (c *CadreEligibleConfigurationClient) QueryLogData(cec *CadreEligibleConfiguration) *LogsQuery {
	query := (&LogsClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := cec.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(cadreeligibleconfiguration.Table, cadreeligibleconfiguration.FieldID, id),
			sqlgraph.To(logs.Table, logs.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, cadreeligibleconfiguration.LogDataTable, cadreeligibleconfiguration.LogDataColumn),
		)
		fromV = sqlgraph.Neighbors(cec.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CadreEligibleConfigurationClient) Hooks() []Hook {
	return c.hooks.CadreEligibleConfiguration
}

// Interceptors returns the client interceptors.
func (c *CadreEligibleConfigurationClient) Interceptors() []Interceptor {
	return c.inters.CadreEligibleConfiguration
}

func (c *CadreEligibleConfigurationClient) mutate(ctx context.Context, m *CadreEligibleConfigurationMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&CadreEligibleConfigurationCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&CadreEligibleConfigurationUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&CadreEligibleConfigurationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&CadreEligibleConfigurationDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown CadreEligibleConfiguration mutation op: %q", m.Op())
	}
}

// CadreChoiceIPClient is a client for the Cadre_Choice_IP schema.
type CadreChoiceIPClient struct {
	config
}

// NewCadreChoiceIPClient returns a client for the Cadre_Choice_IP from the given config.
func NewCadreChoiceIPClient(c config) *CadreChoiceIPClient {
	return &CadreChoiceIPClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `cadre_choice_ip.Hooks(f(g(h())))`.
func (c *CadreChoiceIPClient) Use(hooks ...Hook) {
	c.hooks.Cadre_Choice_IP = append(c.hooks.Cadre_Choice_IP, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `cadre_choice_ip.Intercept(f(g(h())))`.
func (c *CadreChoiceIPClient) Intercept(interceptors ...Interceptor) {
	c.inters.Cadre_Choice_IP = append(c.inters.Cadre_Choice_IP, interceptors...)
}

// Create returns a builder for creating a Cadre_Choice_IP entity.
func (c *CadreChoiceIPClient) Create() *CadreChoiceIPCreate {
	mutation := newCadreChoiceIPMutation(c.config, OpCreate)
	return &CadreChoiceIPCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Cadre_Choice_IP entities.
func (c *CadreChoiceIPClient) CreateBulk(builders ...*CadreChoiceIPCreate) *CadreChoiceIPCreateBulk {
	return &CadreChoiceIPCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Cadre_Choice_IP.
func (c *CadreChoiceIPClient) Update() *CadreChoiceIPUpdate {
	mutation := newCadreChoiceIPMutation(c.config, OpUpdate)
	return &CadreChoiceIPUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CadreChoiceIPClient) UpdateOne(cci *Cadre_Choice_IP) *CadreChoiceIPUpdateOne {
	mutation := newCadreChoiceIPMutation(c.config, OpUpdateOne, withCadre_Choice_IP(cci))
	return &CadreChoiceIPUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CadreChoiceIPClient) UpdateOneID(id int32) *CadreChoiceIPUpdateOne {
	mutation := newCadreChoiceIPMutation(c.config, OpUpdateOne, withCadre_Choice_IPID(id))
	return &CadreChoiceIPUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Cadre_Choice_IP.
func (c *CadreChoiceIPClient) Delete() *CadreChoiceIPDelete {
	mutation := newCadreChoiceIPMutation(c.config, OpDelete)
	return &CadreChoiceIPDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CadreChoiceIPClient) DeleteOne(cci *Cadre_Choice_IP) *CadreChoiceIPDeleteOne {
	return c.DeleteOneID(cci.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CadreChoiceIPClient) DeleteOneID(id int32) *CadreChoiceIPDeleteOne {
	builder := c.Delete().Where(cadre_choice_ip.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CadreChoiceIPDeleteOne{builder}
}

// Query returns a query builder for Cadre_Choice_IP.
func (c *CadreChoiceIPClient) Query() *CadreChoiceIPQuery {
	return &CadreChoiceIPQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeCadreChoiceIP},
		inters: c.Interceptors(),
	}
}

// Get returns a Cadre_Choice_IP entity by its id.
func (c *CadreChoiceIPClient) Get(ctx context.Context, id int32) (*Cadre_Choice_IP, error) {
	return c.Query().Where(cadre_choice_ip.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CadreChoiceIPClient) GetX(ctx context.Context, id int32) *Cadre_Choice_IP {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryApplnIPRef queries the ApplnIP_Ref edge of a Cadre_Choice_IP.
func (c *CadreChoiceIPClient) QueryApplnIPRef(cci *Cadre_Choice_IP) *ExamApplicationsIPQuery {
	query := (&ExamApplicationsIPClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := cci.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(cadre_choice_ip.Table, cadre_choice_ip.FieldID, id),
			sqlgraph.To(exam_applications_ip.Table, exam_applications_ip.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, cadre_choice_ip.ApplnIPRefTable, cadre_choice_ip.ApplnIPRefColumn),
		)
		fromV = sqlgraph.Neighbors(cci.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CadreChoiceIPClient) Hooks() []Hook {
	return c.hooks.Cadre_Choice_IP
}

// Interceptors returns the client interceptors.
func (c *CadreChoiceIPClient) Interceptors() []Interceptor {
	return c.inters.Cadre_Choice_IP
}

func (c *CadreChoiceIPClient) mutate(ctx context.Context, m *CadreChoiceIPMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&CadreChoiceIPCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&CadreChoiceIPUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&CadreChoiceIPUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&CadreChoiceIPDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Cadre_Choice_IP mutation op: %q", m.Op())
	}
}

// CadreChoiceMTSPMMGClient is a client for the Cadre_Choice_MTSPMMG schema.
type CadreChoiceMTSPMMGClient struct {
	config
}

// NewCadreChoiceMTSPMMGClient returns a client for the Cadre_Choice_MTSPMMG from the given config.
func NewCadreChoiceMTSPMMGClient(c config) *CadreChoiceMTSPMMGClient {
	return &CadreChoiceMTSPMMGClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `cadre_choice_mtspmmg.Hooks(f(g(h())))`.
func (c *CadreChoiceMTSPMMGClient) Use(hooks ...Hook) {
	c.hooks.Cadre_Choice_MTSPMMG = append(c.hooks.Cadre_Choice_MTSPMMG, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `cadre_choice_mtspmmg.Intercept(f(g(h())))`.
func (c *CadreChoiceMTSPMMGClient) Intercept(interceptors ...Interceptor) {
	c.inters.Cadre_Choice_MTSPMMG = append(c.inters.Cadre_Choice_MTSPMMG, interceptors...)
}

// Create returns a builder for creating a Cadre_Choice_MTSPMMG entity.
func (c *CadreChoiceMTSPMMGClient) Create() *CadreChoiceMTSPMMGCreate {
	mutation := newCadreChoiceMTSPMMGMutation(c.config, OpCreate)
	return &CadreChoiceMTSPMMGCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Cadre_Choice_MTSPMMG entities.
func (c *CadreChoiceMTSPMMGClient) CreateBulk(builders ...*CadreChoiceMTSPMMGCreate) *CadreChoiceMTSPMMGCreateBulk {
	return &CadreChoiceMTSPMMGCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Cadre_Choice_MTSPMMG.
func (c *CadreChoiceMTSPMMGClient) Update() *CadreChoiceMTSPMMGUpdate {
	mutation := newCadreChoiceMTSPMMGMutation(c.config, OpUpdate)
	return &CadreChoiceMTSPMMGUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CadreChoiceMTSPMMGClient) UpdateOne(ccm *Cadre_Choice_MTSPMMG) *CadreChoiceMTSPMMGUpdateOne {
	mutation := newCadreChoiceMTSPMMGMutation(c.config, OpUpdateOne, withCadre_Choice_MTSPMMG(ccm))
	return &CadreChoiceMTSPMMGUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CadreChoiceMTSPMMGClient) UpdateOneID(id int32) *CadreChoiceMTSPMMGUpdateOne {
	mutation := newCadreChoiceMTSPMMGMutation(c.config, OpUpdateOne, withCadre_Choice_MTSPMMGID(id))
	return &CadreChoiceMTSPMMGUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Cadre_Choice_MTSPMMG.
func (c *CadreChoiceMTSPMMGClient) Delete() *CadreChoiceMTSPMMGDelete {
	mutation := newCadreChoiceMTSPMMGMutation(c.config, OpDelete)
	return &CadreChoiceMTSPMMGDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CadreChoiceMTSPMMGClient) DeleteOne(ccm *Cadre_Choice_MTSPMMG) *CadreChoiceMTSPMMGDeleteOne {
	return c.DeleteOneID(ccm.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CadreChoiceMTSPMMGClient) DeleteOneID(id int32) *CadreChoiceMTSPMMGDeleteOne {
	builder := c.Delete().Where(cadre_choice_mtspmmg.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CadreChoiceMTSPMMGDeleteOne{builder}
}

// Query returns a query builder for Cadre_Choice_MTSPMMG.
func (c *CadreChoiceMTSPMMGClient) Query() *CadreChoiceMTSPMMGQuery {
	return &CadreChoiceMTSPMMGQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeCadreChoiceMTSPMMG},
		inters: c.Interceptors(),
	}
}

// Get returns a Cadre_Choice_MTSPMMG entity by its id.
func (c *CadreChoiceMTSPMMGClient) Get(ctx context.Context, id int32) (*Cadre_Choice_MTSPMMG, error) {
	return c.Query().Where(cadre_choice_mtspmmg.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CadreChoiceMTSPMMGClient) GetX(ctx context.Context, id int32) *Cadre_Choice_MTSPMMG {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryApplnMTSPMMGRef queries the ApplnMTSPMMG_Ref edge of a Cadre_Choice_MTSPMMG.
func (c *CadreChoiceMTSPMMGClient) QueryApplnMTSPMMGRef(ccm *Cadre_Choice_MTSPMMG) *ExamApplicationMTSPMMGQuery {
	query := (&ExamApplicationMTSPMMGClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ccm.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(cadre_choice_mtspmmg.Table, cadre_choice_mtspmmg.FieldID, id),
			sqlgraph.To(exam_application_mtspmmg.Table, exam_application_mtspmmg.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, cadre_choice_mtspmmg.ApplnMTSPMMGRefTable, cadre_choice_mtspmmg.ApplnMTSPMMGRefColumn),
		)
		fromV = sqlgraph.Neighbors(ccm.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CadreChoiceMTSPMMGClient) Hooks() []Hook {
	return c.hooks.Cadre_Choice_MTSPMMG
}

// Interceptors returns the client interceptors.
func (c *CadreChoiceMTSPMMGClient) Interceptors() []Interceptor {
	return c.inters.Cadre_Choice_MTSPMMG
}

func (c *CadreChoiceMTSPMMGClient) mutate(ctx context.Context, m *CadreChoiceMTSPMMGMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&CadreChoiceMTSPMMGCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&CadreChoiceMTSPMMGUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&CadreChoiceMTSPMMGUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&CadreChoiceMTSPMMGDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Cadre_Choice_MTSPMMG mutation op: %q", m.Op())
	}
}

// CadreChoicePAClient is a client for the Cadre_Choice_PA schema.
type CadreChoicePAClient struct {
	config
}

// NewCadreChoicePAClient returns a client for the Cadre_Choice_PA from the given config.
func NewCadreChoicePAClient(c config) *CadreChoicePAClient {
	return &CadreChoicePAClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `cadre_choice_pa.Hooks(f(g(h())))`.
func (c *CadreChoicePAClient) Use(hooks ...Hook) {
	c.hooks.Cadre_Choice_PA = append(c.hooks.Cadre_Choice_PA, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `cadre_choice_pa.Intercept(f(g(h())))`.
func (c *CadreChoicePAClient) Intercept(interceptors ...Interceptor) {
	c.inters.Cadre_Choice_PA = append(c.inters.Cadre_Choice_PA, interceptors...)
}

// Create returns a builder for creating a Cadre_Choice_PA entity.
func (c *CadreChoicePAClient) Create() *CadreChoicePACreate {
	mutation := newCadreChoicePAMutation(c.config, OpCreate)
	return &CadreChoicePACreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Cadre_Choice_PA entities.
func (c *CadreChoicePAClient) CreateBulk(builders ...*CadreChoicePACreate) *CadreChoicePACreateBulk {
	return &CadreChoicePACreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Cadre_Choice_PA.
func (c *CadreChoicePAClient) Update() *CadreChoicePAUpdate {
	mutation := newCadreChoicePAMutation(c.config, OpUpdate)
	return &CadreChoicePAUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CadreChoicePAClient) UpdateOne(ccp *Cadre_Choice_PA) *CadreChoicePAUpdateOne {
	mutation := newCadreChoicePAMutation(c.config, OpUpdateOne, withCadre_Choice_PA(ccp))
	return &CadreChoicePAUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CadreChoicePAClient) UpdateOneID(id int32) *CadreChoicePAUpdateOne {
	mutation := newCadreChoicePAMutation(c.config, OpUpdateOne, withCadre_Choice_PAID(id))
	return &CadreChoicePAUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Cadre_Choice_PA.
func (c *CadreChoicePAClient) Delete() *CadreChoicePADelete {
	mutation := newCadreChoicePAMutation(c.config, OpDelete)
	return &CadreChoicePADelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CadreChoicePAClient) DeleteOne(ccp *Cadre_Choice_PA) *CadreChoicePADeleteOne {
	return c.DeleteOneID(ccp.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CadreChoicePAClient) DeleteOneID(id int32) *CadreChoicePADeleteOne {
	builder := c.Delete().Where(cadre_choice_pa.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CadreChoicePADeleteOne{builder}
}

// Query returns a query builder for Cadre_Choice_PA.
func (c *CadreChoicePAClient) Query() *CadreChoicePAQuery {
	return &CadreChoicePAQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeCadreChoicePA},
		inters: c.Interceptors(),
	}
}

// Get returns a Cadre_Choice_PA entity by its id.
func (c *CadreChoicePAClient) Get(ctx context.Context, id int32) (*Cadre_Choice_PA, error) {
	return c.Query().Where(cadre_choice_pa.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CadreChoicePAClient) GetX(ctx context.Context, id int32) *Cadre_Choice_PA {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryApplnGDSPARef queries the ApplnGDSPA_Ref edge of a Cadre_Choice_PA.
func (c *CadreChoicePAClient) QueryApplnGDSPARef(ccp *Cadre_Choice_PA) *ExamApplicationsGDSPAQuery {
	query := (&ExamApplicationsGDSPAClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ccp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(cadre_choice_pa.Table, cadre_choice_pa.FieldID, id),
			sqlgraph.To(exam_applications_gdspa.Table, exam_applications_gdspa.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, cadre_choice_pa.ApplnGDSPARefTable, cadre_choice_pa.ApplnGDSPARefColumn),
		)
		fromV = sqlgraph.Neighbors(ccp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CadreChoicePAClient) Hooks() []Hook {
	return c.hooks.Cadre_Choice_PA
}

// Interceptors returns the client interceptors.
func (c *CadreChoicePAClient) Interceptors() []Interceptor {
	return c.inters.Cadre_Choice_PA
}

func (c *CadreChoicePAClient) mutate(ctx context.Context, m *CadreChoicePAMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&CadreChoicePACreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&CadreChoicePAUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&CadreChoicePAUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&CadreChoicePADelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Cadre_Choice_PA mutation op: %q", m.Op())
	}
}

// CadreChoicePMClient is a client for the Cadre_Choice_PM schema.
type CadreChoicePMClient struct {
	config
}

// NewCadreChoicePMClient returns a client for the Cadre_Choice_PM from the given config.
func NewCadreChoicePMClient(c config) *CadreChoicePMClient {
	return &CadreChoicePMClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `cadre_choice_pm.Hooks(f(g(h())))`.
func (c *CadreChoicePMClient) Use(hooks ...Hook) {
	c.hooks.Cadre_Choice_PM = append(c.hooks.Cadre_Choice_PM, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `cadre_choice_pm.Intercept(f(g(h())))`.
func (c *CadreChoicePMClient) Intercept(interceptors ...Interceptor) {
	c.inters.Cadre_Choice_PM = append(c.inters.Cadre_Choice_PM, interceptors...)
}

// Create returns a builder for creating a Cadre_Choice_PM entity.
func (c *CadreChoicePMClient) Create() *CadreChoicePMCreate {
	mutation := newCadreChoicePMMutation(c.config, OpCreate)
	return &CadreChoicePMCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Cadre_Choice_PM entities.
func (c *CadreChoicePMClient) CreateBulk(builders ...*CadreChoicePMCreate) *CadreChoicePMCreateBulk {
	return &CadreChoicePMCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Cadre_Choice_PM.
func (c *CadreChoicePMClient) Update() *CadreChoicePMUpdate {
	mutation := newCadreChoicePMMutation(c.config, OpUpdate)
	return &CadreChoicePMUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CadreChoicePMClient) UpdateOne(ccp *Cadre_Choice_PM) *CadreChoicePMUpdateOne {
	mutation := newCadreChoicePMMutation(c.config, OpUpdateOne, withCadre_Choice_PM(ccp))
	return &CadreChoicePMUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CadreChoicePMClient) UpdateOneID(id int32) *CadreChoicePMUpdateOne {
	mutation := newCadreChoicePMMutation(c.config, OpUpdateOne, withCadre_Choice_PMID(id))
	return &CadreChoicePMUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Cadre_Choice_PM.
func (c *CadreChoicePMClient) Delete() *CadreChoicePMDelete {
	mutation := newCadreChoicePMMutation(c.config, OpDelete)
	return &CadreChoicePMDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CadreChoicePMClient) DeleteOne(ccp *Cadre_Choice_PM) *CadreChoicePMDeleteOne {
	return c.DeleteOneID(ccp.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CadreChoicePMClient) DeleteOneID(id int32) *CadreChoicePMDeleteOne {
	builder := c.Delete().Where(cadre_choice_pm.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CadreChoicePMDeleteOne{builder}
}

// Query returns a query builder for Cadre_Choice_PM.
func (c *CadreChoicePMClient) Query() *CadreChoicePMQuery {
	return &CadreChoicePMQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeCadreChoicePM},
		inters: c.Interceptors(),
	}
}

// Get returns a Cadre_Choice_PM entity by its id.
func (c *CadreChoicePMClient) Get(ctx context.Context, id int32) (*Cadre_Choice_PM, error) {
	return c.Query().Where(cadre_choice_pm.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CadreChoicePMClient) GetX(ctx context.Context, id int32) *Cadre_Choice_PM {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryApplnGDSPMRef queries the ApplnGDSPM_Ref edge of a Cadre_Choice_PM.
func (c *CadreChoicePMClient) QueryApplnGDSPMRef(ccp *Cadre_Choice_PM) *ExamApplicationsGDSPMQuery {
	query := (&ExamApplicationsGDSPMClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ccp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(cadre_choice_pm.Table, cadre_choice_pm.FieldID, id),
			sqlgraph.To(exam_applications_gdspm.Table, exam_applications_gdspm.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, cadre_choice_pm.ApplnGDSPMRefTable, cadre_choice_pm.ApplnGDSPMRefColumn),
		)
		fromV = sqlgraph.Neighbors(ccp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CadreChoicePMClient) Hooks() []Hook {
	return c.hooks.Cadre_Choice_PM
}

// Interceptors returns the client interceptors.
func (c *CadreChoicePMClient) Interceptors() []Interceptor {
	return c.inters.Cadre_Choice_PM
}

func (c *CadreChoicePMClient) mutate(ctx context.Context, m *CadreChoicePMMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&CadreChoicePMCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&CadreChoicePMUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&CadreChoicePMUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&CadreChoicePMDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Cadre_Choice_PM mutation op: %q", m.Op())
	}
}

// CadreChoicePMPAClient is a client for the Cadre_Choice_PMPA schema.
type CadreChoicePMPAClient struct {
	config
}

// NewCadreChoicePMPAClient returns a client for the Cadre_Choice_PMPA from the given config.
func NewCadreChoicePMPAClient(c config) *CadreChoicePMPAClient {
	return &CadreChoicePMPAClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `cadre_choice_pmpa.Hooks(f(g(h())))`.
func (c *CadreChoicePMPAClient) Use(hooks ...Hook) {
	c.hooks.Cadre_Choice_PMPA = append(c.hooks.Cadre_Choice_PMPA, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `cadre_choice_pmpa.Intercept(f(g(h())))`.
func (c *CadreChoicePMPAClient) Intercept(interceptors ...Interceptor) {
	c.inters.Cadre_Choice_PMPA = append(c.inters.Cadre_Choice_PMPA, interceptors...)
}

// Create returns a builder for creating a Cadre_Choice_PMPA entity.
func (c *CadreChoicePMPAClient) Create() *CadreChoicePMPACreate {
	mutation := newCadreChoicePMPAMutation(c.config, OpCreate)
	return &CadreChoicePMPACreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Cadre_Choice_PMPA entities.
func (c *CadreChoicePMPAClient) CreateBulk(builders ...*CadreChoicePMPACreate) *CadreChoicePMPACreateBulk {
	return &CadreChoicePMPACreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Cadre_Choice_PMPA.
func (c *CadreChoicePMPAClient) Update() *CadreChoicePMPAUpdate {
	mutation := newCadreChoicePMPAMutation(c.config, OpUpdate)
	return &CadreChoicePMPAUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CadreChoicePMPAClient) UpdateOne(ccp *Cadre_Choice_PMPA) *CadreChoicePMPAUpdateOne {
	mutation := newCadreChoicePMPAMutation(c.config, OpUpdateOne, withCadre_Choice_PMPA(ccp))
	return &CadreChoicePMPAUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CadreChoicePMPAClient) UpdateOneID(id int32) *CadreChoicePMPAUpdateOne {
	mutation := newCadreChoicePMPAMutation(c.config, OpUpdateOne, withCadre_Choice_PMPAID(id))
	return &CadreChoicePMPAUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Cadre_Choice_PMPA.
func (c *CadreChoicePMPAClient) Delete() *CadreChoicePMPADelete {
	mutation := newCadreChoicePMPAMutation(c.config, OpDelete)
	return &CadreChoicePMPADelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CadreChoicePMPAClient) DeleteOne(ccp *Cadre_Choice_PMPA) *CadreChoicePMPADeleteOne {
	return c.DeleteOneID(ccp.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CadreChoicePMPAClient) DeleteOneID(id int32) *CadreChoicePMPADeleteOne {
	builder := c.Delete().Where(cadre_choice_pmpa.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CadreChoicePMPADeleteOne{builder}
}

// Query returns a query builder for Cadre_Choice_PMPA.
func (c *CadreChoicePMPAClient) Query() *CadreChoicePMPAQuery {
	return &CadreChoicePMPAQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeCadreChoicePMPA},
		inters: c.Interceptors(),
	}
}

// Get returns a Cadre_Choice_PMPA entity by its id.
func (c *CadreChoicePMPAClient) Get(ctx context.Context, id int32) (*Cadre_Choice_PMPA, error) {
	return c.Query().Where(cadre_choice_pmpa.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CadreChoicePMPAClient) GetX(ctx context.Context, id int32) *Cadre_Choice_PMPA {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryApplnPMPARef queries the ApplnPMPA_Ref edge of a Cadre_Choice_PMPA.
func (c *CadreChoicePMPAClient) QueryApplnPMPARef(ccp *Cadre_Choice_PMPA) *ExamApplicationsPMPAQuery {
	query := (&ExamApplicationsPMPAClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ccp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(cadre_choice_pmpa.Table, cadre_choice_pmpa.FieldID, id),
			sqlgraph.To(exam_applications_pmpa.Table, exam_applications_pmpa.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, cadre_choice_pmpa.ApplnPMPARefTable, cadre_choice_pmpa.ApplnPMPARefColumn),
		)
		fromV = sqlgraph.Neighbors(ccp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CadreChoicePMPAClient) Hooks() []Hook {
	return c.hooks.Cadre_Choice_PMPA
}

// Interceptors returns the client interceptors.
func (c *CadreChoicePMPAClient) Interceptors() []Interceptor {
	return c.inters.Cadre_Choice_PMPA
}

func (c *CadreChoicePMPAClient) mutate(ctx context.Context, m *CadreChoicePMPAMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&CadreChoicePMPACreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&CadreChoicePMPAUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&CadreChoicePMPAUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&CadreChoicePMPADelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Cadre_Choice_PMPA mutation op: %q", m.Op())
	}
}

// CadreChoicePSClient is a client for the Cadre_Choice_PS schema.
type CadreChoicePSClient struct {
	config
}

// NewCadreChoicePSClient returns a client for the Cadre_Choice_PS from the given config.
func NewCadreChoicePSClient(c config) *CadreChoicePSClient {
	return &CadreChoicePSClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `cadre_choice_ps.Hooks(f(g(h())))`.
func (c *CadreChoicePSClient) Use(hooks ...Hook) {
	c.hooks.Cadre_Choice_PS = append(c.hooks.Cadre_Choice_PS, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `cadre_choice_ps.Intercept(f(g(h())))`.
func (c *CadreChoicePSClient) Intercept(interceptors ...Interceptor) {
	c.inters.Cadre_Choice_PS = append(c.inters.Cadre_Choice_PS, interceptors...)
}

// Create returns a builder for creating a Cadre_Choice_PS entity.
func (c *CadreChoicePSClient) Create() *CadreChoicePSCreate {
	mutation := newCadreChoicePSMutation(c.config, OpCreate)
	return &CadreChoicePSCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Cadre_Choice_PS entities.
func (c *CadreChoicePSClient) CreateBulk(builders ...*CadreChoicePSCreate) *CadreChoicePSCreateBulk {
	return &CadreChoicePSCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Cadre_Choice_PS.
func (c *CadreChoicePSClient) Update() *CadreChoicePSUpdate {
	mutation := newCadreChoicePSMutation(c.config, OpUpdate)
	return &CadreChoicePSUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CadreChoicePSClient) UpdateOne(ccp *Cadre_Choice_PS) *CadreChoicePSUpdateOne {
	mutation := newCadreChoicePSMutation(c.config, OpUpdateOne, withCadre_Choice_PS(ccp))
	return &CadreChoicePSUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CadreChoicePSClient) UpdateOneID(id int32) *CadreChoicePSUpdateOne {
	mutation := newCadreChoicePSMutation(c.config, OpUpdateOne, withCadre_Choice_PSID(id))
	return &CadreChoicePSUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Cadre_Choice_PS.
func (c *CadreChoicePSClient) Delete() *CadreChoicePSDelete {
	mutation := newCadreChoicePSMutation(c.config, OpDelete)
	return &CadreChoicePSDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CadreChoicePSClient) DeleteOne(ccp *Cadre_Choice_PS) *CadreChoicePSDeleteOne {
	return c.DeleteOneID(ccp.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CadreChoicePSClient) DeleteOneID(id int32) *CadreChoicePSDeleteOne {
	builder := c.Delete().Where(cadre_choice_ps.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CadreChoicePSDeleteOne{builder}
}

// Query returns a query builder for Cadre_Choice_PS.
func (c *CadreChoicePSClient) Query() *CadreChoicePSQuery {
	return &CadreChoicePSQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeCadreChoicePS},
		inters: c.Interceptors(),
	}
}

// Get returns a Cadre_Choice_PS entity by its id.
func (c *CadreChoicePSClient) Get(ctx context.Context, id int32) (*Cadre_Choice_PS, error) {
	return c.Query().Where(cadre_choice_ps.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CadreChoicePSClient) GetX(ctx context.Context, id int32) *Cadre_Choice_PS {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryApplnPSRef queries the ApplnPS_Ref edge of a Cadre_Choice_PS.
func (c *CadreChoicePSClient) QueryApplnPSRef(ccp *Cadre_Choice_PS) *ExamApplicationsPSQuery {
	query := (&ExamApplicationsPSClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ccp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(cadre_choice_ps.Table, cadre_choice_ps.FieldID, id),
			sqlgraph.To(exam_applications_ps.Table, exam_applications_ps.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, cadre_choice_ps.ApplnPSRefTable, cadre_choice_ps.ApplnPSRefColumn),
		)
		fromV = sqlgraph.Neighbors(ccp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CadreChoicePSClient) Hooks() []Hook {
	return c.hooks.Cadre_Choice_PS
}

// Interceptors returns the client interceptors.
func (c *CadreChoicePSClient) Interceptors() []Interceptor {
	return c.inters.Cadre_Choice_PS
}

func (c *CadreChoicePSClient) mutate(ctx context.Context, m *CadreChoicePSMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&CadreChoicePSCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&CadreChoicePSUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&CadreChoicePSUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&CadreChoicePSDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Cadre_Choice_PS mutation op: %q", m.Op())
	}
}

// CategoryMininumMarkMappingClient is a client for the CategoryMininumMarkMapping schema.
type CategoryMininumMarkMappingClient struct {
	config
}

// NewCategoryMininumMarkMappingClient returns a client for the CategoryMininumMarkMapping from the given config.
func NewCategoryMininumMarkMappingClient(c config) *CategoryMininumMarkMappingClient {
	return &CategoryMininumMarkMappingClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `categorymininummarkmapping.Hooks(f(g(h())))`.
func (c *CategoryMininumMarkMappingClient) Use(hooks ...Hook) {
	c.hooks.CategoryMininumMarkMapping = append(c.hooks.CategoryMininumMarkMapping, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `categorymininummarkmapping.Intercept(f(g(h())))`.
func (c *CategoryMininumMarkMappingClient) Intercept(interceptors ...Interceptor) {
	c.inters.CategoryMininumMarkMapping = append(c.inters.CategoryMininumMarkMapping, interceptors...)
}

// Create returns a builder for creating a CategoryMininumMarkMapping entity.
func (c *CategoryMininumMarkMappingClient) Create() *CategoryMininumMarkMappingCreate {
	mutation := newCategoryMininumMarkMappingMutation(c.config, OpCreate)
	return &CategoryMininumMarkMappingCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of CategoryMininumMarkMapping entities.
func (c *CategoryMininumMarkMappingClient) CreateBulk(builders ...*CategoryMininumMarkMappingCreate) *CategoryMininumMarkMappingCreateBulk {
	return &CategoryMininumMarkMappingCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for CategoryMininumMarkMapping.
func (c *CategoryMininumMarkMappingClient) Update() *CategoryMininumMarkMappingUpdate {
	mutation := newCategoryMininumMarkMappingMutation(c.config, OpUpdate)
	return &CategoryMininumMarkMappingUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CategoryMininumMarkMappingClient) UpdateOne(cmmm *CategoryMininumMarkMapping) *CategoryMininumMarkMappingUpdateOne {
	mutation := newCategoryMininumMarkMappingMutation(c.config, OpUpdateOne, withCategoryMininumMarkMapping(cmmm))
	return &CategoryMininumMarkMappingUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CategoryMininumMarkMappingClient) UpdateOneID(id int64) *CategoryMininumMarkMappingUpdateOne {
	mutation := newCategoryMininumMarkMappingMutation(c.config, OpUpdateOne, withCategoryMininumMarkMappingID(id))
	return &CategoryMininumMarkMappingUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CategoryMininumMarkMapping.
func (c *CategoryMininumMarkMappingClient) Delete() *CategoryMininumMarkMappingDelete {
	mutation := newCategoryMininumMarkMappingMutation(c.config, OpDelete)
	return &CategoryMininumMarkMappingDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CategoryMininumMarkMappingClient) DeleteOne(cmmm *CategoryMininumMarkMapping) *CategoryMininumMarkMappingDeleteOne {
	return c.DeleteOneID(cmmm.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CategoryMininumMarkMappingClient) DeleteOneID(id int64) *CategoryMininumMarkMappingDeleteOne {
	builder := c.Delete().Where(categorymininummarkmapping.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CategoryMininumMarkMappingDeleteOne{builder}
}

// Query returns a query builder for CategoryMininumMarkMapping.
func (c *CategoryMininumMarkMappingClient) Query() *CategoryMininumMarkMappingQuery {
	return &CategoryMininumMarkMappingQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeCategoryMininumMarkMapping},
		inters: c.Interceptors(),
	}
}

// Get returns a CategoryMininumMarkMapping entity by its id.
func (c *CategoryMininumMarkMappingClient) Get(ctx context.Context, id int64) (*CategoryMininumMarkMapping, error) {
	return c.Query().Where(categorymininummarkmapping.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CategoryMininumMarkMappingClient) GetX(ctx context.Context, id int64) *CategoryMininumMarkMapping {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryLogData queries the LogData edge of a CategoryMininumMarkMapping.
func (c *CategoryMininumMarkMappingClient) QueryLogData(cmmm *CategoryMininumMarkMapping) *LogsQuery {
	query := (&LogsClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := cmmm.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(categorymininummarkmapping.Table, categorymininummarkmapping.FieldID, id),
			sqlgraph.To(logs.Table, logs.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, categorymininummarkmapping.LogDataTable, categorymininummarkmapping.LogDataColumn),
		)
		fromV = sqlgraph.Neighbors(cmmm.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CategoryMininumMarkMappingClient) Hooks() []Hook {
	return c.hooks.CategoryMininumMarkMapping
}

// Interceptors returns the client interceptors.
func (c *CategoryMininumMarkMappingClient) Interceptors() []Interceptor {
	return c.inters.CategoryMininumMarkMapping
}

func (c *CategoryMininumMarkMappingClient) mutate(ctx context.Context, m *CategoryMininumMarkMappingMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&CategoryMininumMarkMappingCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&CategoryMininumMarkMappingUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&CategoryMininumMarkMappingUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&CategoryMininumMarkMappingDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown CategoryMininumMarkMapping mutation op: %q", m.Op())
	}
}

// CenterClient is a client for the Center schema.
type CenterClient struct {
	config
}

// NewCenterClient returns a client for the Center from the given config.
func NewCenterClient(c config) *CenterClient {
	return &CenterClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `center.Hooks(f(g(h())))`.
func (c *CenterClient) Use(hooks ...Hook) {
	c.hooks.Center = append(c.hooks.Center, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `center.Intercept(f(g(h())))`.
func (c *CenterClient) Intercept(interceptors ...Interceptor) {
	c.inters.Center = append(c.inters.Center, interceptors...)
}

// Create returns a builder for creating a Center entity.
func (c *CenterClient) Create() *CenterCreate {
	mutation := newCenterMutation(c.config, OpCreate)
	return &CenterCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Center entities.
func (c *CenterClient) CreateBulk(builders ...*CenterCreate) *CenterCreateBulk {
	return &CenterCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Center.
func (c *CenterClient) Update() *CenterUpdate {
	mutation := newCenterMutation(c.config, OpUpdate)
	return &CenterUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CenterClient) UpdateOne(ce *Center) *CenterUpdateOne {
	mutation := newCenterMutation(c.config, OpUpdateOne, withCenter(ce))
	return &CenterUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CenterClient) UpdateOneID(id int32) *CenterUpdateOne {
	mutation := newCenterMutation(c.config, OpUpdateOne, withCenterID(id))
	return &CenterUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Center.
func (c *CenterClient) Delete() *CenterDelete {
	mutation := newCenterMutation(c.config, OpDelete)
	return &CenterDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CenterClient) DeleteOne(ce *Center) *CenterDeleteOne {
	return c.DeleteOneID(ce.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CenterClient) DeleteOneID(id int32) *CenterDeleteOne {
	builder := c.Delete().Where(center.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CenterDeleteOne{builder}
}

// Query returns a query builder for Center.
func (c *CenterClient) Query() *CenterQuery {
	return &CenterQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeCenter},
		inters: c.Interceptors(),
	}
}

// Get returns a Center entity by its id.
func (c *CenterClient) Get(ctx context.Context, id int32) (*Center, error) {
	return c.Query().Where(center.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CenterClient) GetX(ctx context.Context, id int32) *Center {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryApplications queries the applications edge of a Center.
func (c *CenterClient) QueryApplications(ce *Center) *ApplicationQuery {
	query := (&ApplicationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ce.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(center.Table, center.FieldID, id),
			sqlgraph.To(application.Table, application.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, center.ApplicationsTable, center.ApplicationsColumn),
		)
		fromV = sqlgraph.Neighbors(ce.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryExamCentresRef queries the ExamCentresRef edge of a Center.
func (c *CenterClient) QueryExamCentresRef(ce *Center) *ExamApplicationsIPQuery {
	query := (&ExamApplicationsIPClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ce.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(center.Table, center.FieldID, id),
			sqlgraph.To(exam_applications_ip.Table, exam_applications_ip.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, center.ExamCentresRefTable, center.ExamCentresRefColumn),
		)
		fromV = sqlgraph.Neighbors(ce.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryExamCentresRefPS queries the ExamCentresRefPS edge of a Center.
func (c *CenterClient) QueryExamCentresRefPS(ce *Center) *ExamApplicationsPSQuery {
	query := (&ExamApplicationsPSClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ce.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(center.Table, center.FieldID, id),
			sqlgraph.To(exam_applications_ps.Table, exam_applications_ps.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, center.ExamCentresRefPSTable, center.ExamCentresRefPSColumn),
		)
		fromV = sqlgraph.Neighbors(ce.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryExamCentresRefGDSPA queries the ExamCentresRefGDSPA edge of a Center.
func (c *CenterClient) QueryExamCentresRefGDSPA(ce *Center) *ExamApplicationsGDSPAQuery {
	query := (&ExamApplicationsGDSPAClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ce.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(center.Table, center.FieldID, id),
			sqlgraph.To(exam_applications_gdspa.Table, exam_applications_gdspa.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, center.ExamCentresRefGDSPATable, center.ExamCentresRefGDSPAColumn),
		)
		fromV = sqlgraph.Neighbors(ce.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryExamCentresRefPMPA queries the ExamCentresRefPMPA edge of a Center.
func (c *CenterClient) QueryExamCentresRefPMPA(ce *Center) *ExamApplicationsPMPAQuery {
	query := (&ExamApplicationsPMPAClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ce.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(center.Table, center.FieldID, id),
			sqlgraph.To(exam_applications_pmpa.Table, exam_applications_pmpa.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, center.ExamCentresRefPMPATable, center.ExamCentresRefPMPAColumn),
		)
		fromV = sqlgraph.Neighbors(ce.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryExamCentresRefGDSPM queries the ExamCentresRefGDSPM edge of a Center.
func (c *CenterClient) QueryExamCentresRefGDSPM(ce *Center) *ExamApplicationsGDSPMQuery {
	query := (&ExamApplicationsGDSPMClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ce.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(center.Table, center.FieldID, id),
			sqlgraph.To(exam_applications_gdspm.Table, exam_applications_gdspm.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, center.ExamCentresRefGDSPMTable, center.ExamCentresRefGDSPMColumn),
		)
		fromV = sqlgraph.Neighbors(ce.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryExamscentres queries the Examscentres edge of a Center.
func (c *CenterClient) QueryExamscentres(ce *Center) *ExamCityCenterQuery {
	query := (&ExamCityCenterClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ce.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(center.Table, center.FieldID, id),
			sqlgraph.To(examcitycenter.Table, examcitycenter.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, center.ExamscentresTable, center.ExamscentresColumn),
		)
		fromV = sqlgraph.Neighbors(ce.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryExamCentresRefMTSPMMG queries the ExamCentresRefMTSPMMG edge of a Center.
func (c *CenterClient) QueryExamCentresRefMTSPMMG(ce *Center) *ExamApplicationMTSPMMGQuery {
	query := (&ExamApplicationMTSPMMGClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ce.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(center.Table, center.FieldID, id),
			sqlgraph.To(exam_application_mtspmmg.Table, exam_application_mtspmmg.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, center.ExamCentresRefMTSPMMGTable, center.ExamCentresRefMTSPMMGColumn),
		)
		fromV = sqlgraph.Neighbors(ce.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryExaCenterHallRef queries the ExaCenterHallRef edge of a Center.
func (c *CenterClient) QueryExaCenterHallRef(ce *Center) *ExamCenterHallQuery {
	query := (&ExamCenterHallClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ce.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(center.Table, center.FieldID, id),
			sqlgraph.To(examcenterhall.Table, examcenterhall.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, center.ExaCenterHallRefTable, center.ExaCenterHallRefColumn),
		)
		fromV = sqlgraph.Neighbors(ce.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCentresip queries the centresip edge of a Center.
func (c *CenterClient) QueryCentresip(ce *Center) *ExamQuery {
	query := (&ExamClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ce.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(center.Table, center.FieldID, id),
			sqlgraph.To(exam.Table, exam.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, center.CentresipTable, center.CentresipColumn),
		)
		fromV = sqlgraph.Neighbors(ce.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryLogData queries the LogData edge of a Center.
func (c *CenterClient) QueryLogData(ce *Center) *LogsQuery {
	query := (&LogsClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ce.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(center.Table, center.FieldID, id),
			sqlgraph.To(logs.Table, logs.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, center.LogDataTable, center.LogDataColumn),
		)
		fromV = sqlgraph.Neighbors(ce.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CenterClient) Hooks() []Hook {
	return c.hooks.Center
}

// Interceptors returns the client interceptors.
func (c *CenterClient) Interceptors() []Interceptor {
	return c.inters.Center
}

func (c *CenterClient) mutate(ctx context.Context, m *CenterMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&CenterCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&CenterUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&CenterUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&CenterDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Center mutation op: %q", m.Op())
	}
}

// CircleSummaryForNOClient is a client for the CircleSummaryForNO schema.
type CircleSummaryForNOClient struct {
	config
}

// NewCircleSummaryForNOClient returns a client for the CircleSummaryForNO from the given config.
func NewCircleSummaryForNOClient(c config) *CircleSummaryForNOClient {
	return &CircleSummaryForNOClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `circlesummaryforno.Hooks(f(g(h())))`.
func (c *CircleSummaryForNOClient) Use(hooks ...Hook) {
	c.hooks.CircleSummaryForNO = append(c.hooks.CircleSummaryForNO, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `circlesummaryforno.Intercept(f(g(h())))`.
func (c *CircleSummaryForNOClient) Intercept(interceptors ...Interceptor) {
	c.inters.CircleSummaryForNO = append(c.inters.CircleSummaryForNO, interceptors...)
}

// Create returns a builder for creating a CircleSummaryForNO entity.
func (c *CircleSummaryForNOClient) Create() *CircleSummaryForNOCreate {
	mutation := newCircleSummaryForNOMutation(c.config, OpCreate)
	return &CircleSummaryForNOCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of CircleSummaryForNO entities.
func (c *CircleSummaryForNOClient) CreateBulk(builders ...*CircleSummaryForNOCreate) *CircleSummaryForNOCreateBulk {
	return &CircleSummaryForNOCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for CircleSummaryForNO.
func (c *CircleSummaryForNOClient) Update() *CircleSummaryForNOUpdate {
	mutation := newCircleSummaryForNOMutation(c.config, OpUpdate)
	return &CircleSummaryForNOUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CircleSummaryForNOClient) UpdateOne(csfn *CircleSummaryForNO) *CircleSummaryForNOUpdateOne {
	mutation := newCircleSummaryForNOMutation(c.config, OpUpdateOne, withCircleSummaryForNO(csfn))
	return &CircleSummaryForNOUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CircleSummaryForNOClient) UpdateOneID(id int32) *CircleSummaryForNOUpdateOne {
	mutation := newCircleSummaryForNOMutation(c.config, OpUpdateOne, withCircleSummaryForNOID(id))
	return &CircleSummaryForNOUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CircleSummaryForNO.
func (c *CircleSummaryForNOClient) Delete() *CircleSummaryForNODelete {
	mutation := newCircleSummaryForNOMutation(c.config, OpDelete)
	return &CircleSummaryForNODelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CircleSummaryForNOClient) DeleteOne(csfn *CircleSummaryForNO) *CircleSummaryForNODeleteOne {
	return c.DeleteOneID(csfn.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CircleSummaryForNOClient) DeleteOneID(id int32) *CircleSummaryForNODeleteOne {
	builder := c.Delete().Where(circlesummaryforno.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CircleSummaryForNODeleteOne{builder}
}

// Query returns a query builder for CircleSummaryForNO.
func (c *CircleSummaryForNOClient) Query() *CircleSummaryForNOQuery {
	return &CircleSummaryForNOQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeCircleSummaryForNO},
		inters: c.Interceptors(),
	}
}

// Get returns a CircleSummaryForNO entity by its id.
func (c *CircleSummaryForNOClient) Get(ctx context.Context, id int32) (*CircleSummaryForNO, error) {
	return c.Query().Where(circlesummaryforno.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CircleSummaryForNOClient) GetX(ctx context.Context, id int32) *CircleSummaryForNO {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCircleusers queries the circleusers edge of a CircleSummaryForNO.
func (c *CircleSummaryForNOClient) QueryCircleusers(csfn *CircleSummaryForNO) *UserMasterQuery {
	query := (&UserMasterClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := csfn.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(circlesummaryforno.Table, circlesummaryforno.FieldID, id),
			sqlgraph.To(usermaster.Table, usermaster.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, circlesummaryforno.CircleusersTable, circlesummaryforno.CircleusersColumn),
		)
		fromV = sqlgraph.Neighbors(csfn.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCircleRefsForHallTicketIP queries the CircleRefsForHallTicketIP edge of a CircleSummaryForNO.
func (c *CircleSummaryForNOClient) QueryCircleRefsForHallTicketIP(csfn *CircleSummaryForNO) *ExamApplicationsIPQuery {
	query := (&ExamApplicationsIPClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := csfn.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(circlesummaryforno.Table, circlesummaryforno.FieldID, id),
			sqlgraph.To(exam_applications_ip.Table, exam_applications_ip.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, circlesummaryforno.CircleRefsForHallTicketIPTable, circlesummaryforno.CircleRefsForHallTicketIPColumn),
		)
		fromV = sqlgraph.Neighbors(csfn.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCircleRefsForHallTicketPS queries the CircleRefsForHallTicketPS edge of a CircleSummaryForNO.
func (c *CircleSummaryForNOClient) QueryCircleRefsForHallTicketPS(csfn *CircleSummaryForNO) *ExamApplicationsPSQuery {
	query := (&ExamApplicationsPSClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := csfn.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(circlesummaryforno.Table, circlesummaryforno.FieldID, id),
			sqlgraph.To(exam_applications_ps.Table, exam_applications_ps.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, circlesummaryforno.CircleRefsForHallTicketPSTable, circlesummaryforno.CircleRefsForHallTicketPSColumn),
		)
		fromV = sqlgraph.Neighbors(csfn.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCircleRefsForHallTicketGDSPA queries the CircleRefsForHallTicketGDSPA edge of a CircleSummaryForNO.
func (c *CircleSummaryForNOClient) QueryCircleRefsForHallTicketGDSPA(csfn *CircleSummaryForNO) *ExamApplicationsGDSPAQuery {
	query := (&ExamApplicationsGDSPAClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := csfn.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(circlesummaryforno.Table, circlesummaryforno.FieldID, id),
			sqlgraph.To(exam_applications_gdspa.Table, exam_applications_gdspa.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, circlesummaryforno.CircleRefsForHallTicketGDSPATable, circlesummaryforno.CircleRefsForHallTicketGDSPAColumn),
		)
		fromV = sqlgraph.Neighbors(csfn.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCircleRefsForHallTicketGDSPM queries the CircleRefsForHallTicketGDSPM edge of a CircleSummaryForNO.
func (c *CircleSummaryForNOClient) QueryCircleRefsForHallTicketGDSPM(csfn *CircleSummaryForNO) *ExamApplicationsGDSPMQuery {
	query := (&ExamApplicationsGDSPMClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := csfn.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(circlesummaryforno.Table, circlesummaryforno.FieldID, id),
			sqlgraph.To(exam_applications_gdspm.Table, exam_applications_gdspm.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, circlesummaryforno.CircleRefsForHallTicketGDSPMTable, circlesummaryforno.CircleRefsForHallTicketGDSPMColumn),
		)
		fromV = sqlgraph.Neighbors(csfn.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCircleRefsForHallTicketPMPA queries the CircleRefsForHallTicketPMPA edge of a CircleSummaryForNO.
func (c *CircleSummaryForNOClient) QueryCircleRefsForHallTicketPMPA(csfn *CircleSummaryForNO) *ExamApplicationsPMPAQuery {
	query := (&ExamApplicationsPMPAClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := csfn.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(circlesummaryforno.Table, circlesummaryforno.FieldID, id),
			sqlgraph.To(exam_applications_pmpa.Table, exam_applications_pmpa.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, circlesummaryforno.CircleRefsForHallTicketPMPATable, circlesummaryforno.CircleRefsForHallTicketPMPAColumn),
		)
		fromV = sqlgraph.Neighbors(csfn.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCircleRefsForHallTicketMTSPMMG queries the CircleRefsForHallTicketMTSPMMG edge of a CircleSummaryForNO.
func (c *CircleSummaryForNOClient) QueryCircleRefsForHallTicketMTSPMMG(csfn *CircleSummaryForNO) *ExamApplicationMTSPMMGQuery {
	query := (&ExamApplicationMTSPMMGClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := csfn.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(circlesummaryforno.Table, circlesummaryforno.FieldID, id),
			sqlgraph.To(exam_application_mtspmmg.Table, exam_application_mtspmmg.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, circlesummaryforno.CircleRefsForHallTicketMTSPMMGTable, circlesummaryforno.CircleRefsForHallTicketMTSPMMGColumn),
		)
		fromV = sqlgraph.Neighbors(csfn.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CircleSummaryForNOClient) Hooks() []Hook {
	return c.hooks.CircleSummaryForNO
}

// Interceptors returns the client interceptors.
func (c *CircleSummaryForNOClient) Interceptors() []Interceptor {
	return c.inters.CircleSummaryForNO
}

func (c *CircleSummaryForNOClient) mutate(ctx context.Context, m *CircleSummaryForNOMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&CircleSummaryForNOCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&CircleSummaryForNOUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&CircleSummaryForNOUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&CircleSummaryForNODelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown CircleSummaryForNO mutation op: %q", m.Op())
	}
}

// DirectorateUsersClient is a client for the DirectorateUsers schema.
type DirectorateUsersClient struct {
	config
}

// NewDirectorateUsersClient returns a client for the DirectorateUsers from the given config.
func NewDirectorateUsersClient(c config) *DirectorateUsersClient {
	return &DirectorateUsersClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `directorateusers.Hooks(f(g(h())))`.
func (c *DirectorateUsersClient) Use(hooks ...Hook) {
	c.hooks.DirectorateUsers = append(c.hooks.DirectorateUsers, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `directorateusers.Intercept(f(g(h())))`.
func (c *DirectorateUsersClient) Intercept(interceptors ...Interceptor) {
	c.inters.DirectorateUsers = append(c.inters.DirectorateUsers, interceptors...)
}

// Create returns a builder for creating a DirectorateUsers entity.
func (c *DirectorateUsersClient) Create() *DirectorateUsersCreate {
	mutation := newDirectorateUsersMutation(c.config, OpCreate)
	return &DirectorateUsersCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of DirectorateUsers entities.
func (c *DirectorateUsersClient) CreateBulk(builders ...*DirectorateUsersCreate) *DirectorateUsersCreateBulk {
	return &DirectorateUsersCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for DirectorateUsers.
func (c *DirectorateUsersClient) Update() *DirectorateUsersUpdate {
	mutation := newDirectorateUsersMutation(c.config, OpUpdate)
	return &DirectorateUsersUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *DirectorateUsersClient) UpdateOne(du *DirectorateUsers) *DirectorateUsersUpdateOne {
	mutation := newDirectorateUsersMutation(c.config, OpUpdateOne, withDirectorateUsers(du))
	return &DirectorateUsersUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *DirectorateUsersClient) UpdateOneID(id int32) *DirectorateUsersUpdateOne {
	mutation := newDirectorateUsersMutation(c.config, OpUpdateOne, withDirectorateUsersID(id))
	return &DirectorateUsersUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for DirectorateUsers.
func (c *DirectorateUsersClient) Delete() *DirectorateUsersDelete {
	mutation := newDirectorateUsersMutation(c.config, OpDelete)
	return &DirectorateUsersDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *DirectorateUsersClient) DeleteOne(du *DirectorateUsers) *DirectorateUsersDeleteOne {
	return c.DeleteOneID(du.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *DirectorateUsersClient) DeleteOneID(id int32) *DirectorateUsersDeleteOne {
	builder := c.Delete().Where(directorateusers.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &DirectorateUsersDeleteOne{builder}
}

// Query returns a query builder for DirectorateUsers.
func (c *DirectorateUsersClient) Query() *DirectorateUsersQuery {
	return &DirectorateUsersQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeDirectorateUsers},
		inters: c.Interceptors(),
	}
}

// Get returns a DirectorateUsers entity by its id.
func (c *DirectorateUsersClient) Get(ctx context.Context, id int32) (*DirectorateUsers, error) {
	return c.Query().Where(directorateusers.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *DirectorateUsersClient) GetX(ctx context.Context, id int32) *DirectorateUsers {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryEmployeeUser queries the employee_user edge of a DirectorateUsers.
func (c *DirectorateUsersClient) QueryEmployeeUser(du *DirectorateUsers) *EmployeesQuery {
	query := (&EmployeesClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := du.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(directorateusers.Table, directorateusers.FieldID, id),
			sqlgraph.To(employees.Table, employees.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, directorateusers.EmployeeUserTable, directorateusers.EmployeeUserColumn),
		)
		fromV = sqlgraph.Neighbors(du.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *DirectorateUsersClient) Hooks() []Hook {
	return c.hooks.DirectorateUsers
}

// Interceptors returns the client interceptors.
func (c *DirectorateUsersClient) Interceptors() []Interceptor {
	return c.inters.DirectorateUsers
}

func (c *DirectorateUsersClient) mutate(ctx context.Context, m *DirectorateUsersMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&DirectorateUsersCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&DirectorateUsersUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&DirectorateUsersUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&DirectorateUsersDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown DirectorateUsers mutation op: %q", m.Op())
	}
}

// DisabilityClient is a client for the Disability schema.
type DisabilityClient struct {
	config
}

// NewDisabilityClient returns a client for the Disability from the given config.
func NewDisabilityClient(c config) *DisabilityClient {
	return &DisabilityClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `disability.Hooks(f(g(h())))`.
func (c *DisabilityClient) Use(hooks ...Hook) {
	c.hooks.Disability = append(c.hooks.Disability, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `disability.Intercept(f(g(h())))`.
func (c *DisabilityClient) Intercept(interceptors ...Interceptor) {
	c.inters.Disability = append(c.inters.Disability, interceptors...)
}

// Create returns a builder for creating a Disability entity.
func (c *DisabilityClient) Create() *DisabilityCreate {
	mutation := newDisabilityMutation(c.config, OpCreate)
	return &DisabilityCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Disability entities.
func (c *DisabilityClient) CreateBulk(builders ...*DisabilityCreate) *DisabilityCreateBulk {
	return &DisabilityCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Disability.
func (c *DisabilityClient) Update() *DisabilityUpdate {
	mutation := newDisabilityMutation(c.config, OpUpdate)
	return &DisabilityUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *DisabilityClient) UpdateOne(d *Disability) *DisabilityUpdateOne {
	mutation := newDisabilityMutation(c.config, OpUpdateOne, withDisability(d))
	return &DisabilityUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *DisabilityClient) UpdateOneID(id int32) *DisabilityUpdateOne {
	mutation := newDisabilityMutation(c.config, OpUpdateOne, withDisabilityID(id))
	return &DisabilityUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Disability.
func (c *DisabilityClient) Delete() *DisabilityDelete {
	mutation := newDisabilityMutation(c.config, OpDelete)
	return &DisabilityDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *DisabilityClient) DeleteOne(d *Disability) *DisabilityDeleteOne {
	return c.DeleteOneID(d.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *DisabilityClient) DeleteOneID(id int32) *DisabilityDeleteOne {
	builder := c.Delete().Where(disability.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &DisabilityDeleteOne{builder}
}

// Query returns a query builder for Disability.
func (c *DisabilityClient) Query() *DisabilityQuery {
	return &DisabilityQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeDisability},
		inters: c.Interceptors(),
	}
}

// Get returns a Disability entity by its id.
func (c *DisabilityClient) Get(ctx context.Context, id int32) (*Disability, error) {
	return c.Query().Where(disability.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *DisabilityClient) GetX(ctx context.Context, id int32) *Disability {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryDisRef queries the dis_ref edge of a Disability.
func (c *DisabilityClient) QueryDisRef(d *Disability) *ExamPapersQuery {
	query := (&ExamPapersClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := d.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(disability.Table, disability.FieldID, id),
			sqlgraph.To(exampapers.Table, exampapers.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, disability.DisRefTable, disability.DisRefColumn),
		)
		fromV = sqlgraph.Neighbors(d.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *DisabilityClient) Hooks() []Hook {
	return c.hooks.Disability
}

// Interceptors returns the client interceptors.
func (c *DisabilityClient) Interceptors() []Interceptor {
	return c.inters.Disability
}

func (c *DisabilityClient) mutate(ctx context.Context, m *DisabilityMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&DisabilityCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&DisabilityUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&DisabilityUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&DisabilityDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Disability mutation op: %q", m.Op())
	}
}

// DivisionChoiceMTSPMMGClient is a client for the Division_Choice_MTSPMMG schema.
type DivisionChoiceMTSPMMGClient struct {
	config
}

// NewDivisionChoiceMTSPMMGClient returns a client for the Division_Choice_MTSPMMG from the given config.
func NewDivisionChoiceMTSPMMGClient(c config) *DivisionChoiceMTSPMMGClient {
	return &DivisionChoiceMTSPMMGClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `division_choice_mtspmmg.Hooks(f(g(h())))`.
func (c *DivisionChoiceMTSPMMGClient) Use(hooks ...Hook) {
	c.hooks.Division_Choice_MTSPMMG = append(c.hooks.Division_Choice_MTSPMMG, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `division_choice_mtspmmg.Intercept(f(g(h())))`.
func (c *DivisionChoiceMTSPMMGClient) Intercept(interceptors ...Interceptor) {
	c.inters.Division_Choice_MTSPMMG = append(c.inters.Division_Choice_MTSPMMG, interceptors...)
}

// Create returns a builder for creating a Division_Choice_MTSPMMG entity.
func (c *DivisionChoiceMTSPMMGClient) Create() *DivisionChoiceMTSPMMGCreate {
	mutation := newDivisionChoiceMTSPMMGMutation(c.config, OpCreate)
	return &DivisionChoiceMTSPMMGCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Division_Choice_MTSPMMG entities.
func (c *DivisionChoiceMTSPMMGClient) CreateBulk(builders ...*DivisionChoiceMTSPMMGCreate) *DivisionChoiceMTSPMMGCreateBulk {
	return &DivisionChoiceMTSPMMGCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Division_Choice_MTSPMMG.
func (c *DivisionChoiceMTSPMMGClient) Update() *DivisionChoiceMTSPMMGUpdate {
	mutation := newDivisionChoiceMTSPMMGMutation(c.config, OpUpdate)
	return &DivisionChoiceMTSPMMGUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *DivisionChoiceMTSPMMGClient) UpdateOne(dcm *Division_Choice_MTSPMMG) *DivisionChoiceMTSPMMGUpdateOne {
	mutation := newDivisionChoiceMTSPMMGMutation(c.config, OpUpdateOne, withDivision_Choice_MTSPMMG(dcm))
	return &DivisionChoiceMTSPMMGUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *DivisionChoiceMTSPMMGClient) UpdateOneID(id int32) *DivisionChoiceMTSPMMGUpdateOne {
	mutation := newDivisionChoiceMTSPMMGMutation(c.config, OpUpdateOne, withDivision_Choice_MTSPMMGID(id))
	return &DivisionChoiceMTSPMMGUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Division_Choice_MTSPMMG.
func (c *DivisionChoiceMTSPMMGClient) Delete() *DivisionChoiceMTSPMMGDelete {
	mutation := newDivisionChoiceMTSPMMGMutation(c.config, OpDelete)
	return &DivisionChoiceMTSPMMGDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *DivisionChoiceMTSPMMGClient) DeleteOne(dcm *Division_Choice_MTSPMMG) *DivisionChoiceMTSPMMGDeleteOne {
	return c.DeleteOneID(dcm.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *DivisionChoiceMTSPMMGClient) DeleteOneID(id int32) *DivisionChoiceMTSPMMGDeleteOne {
	builder := c.Delete().Where(division_choice_mtspmmg.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &DivisionChoiceMTSPMMGDeleteOne{builder}
}

// Query returns a query builder for Division_Choice_MTSPMMG.
func (c *DivisionChoiceMTSPMMGClient) Query() *DivisionChoiceMTSPMMGQuery {
	return &DivisionChoiceMTSPMMGQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeDivisionChoiceMTSPMMG},
		inters: c.Interceptors(),
	}
}

// Get returns a Division_Choice_MTSPMMG entity by its id.
func (c *DivisionChoiceMTSPMMGClient) Get(ctx context.Context, id int32) (*Division_Choice_MTSPMMG, error) {
	return c.Query().Where(division_choice_mtspmmg.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *DivisionChoiceMTSPMMGClient) GetX(ctx context.Context, id int32) *Division_Choice_MTSPMMG {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryApplnMTSPMMGRef queries the ApplnMTSPMMG_Ref edge of a Division_Choice_MTSPMMG.
func (c *DivisionChoiceMTSPMMGClient) QueryApplnMTSPMMGRef(dcm *Division_Choice_MTSPMMG) *ExamApplicationMTSPMMGQuery {
	query := (&ExamApplicationMTSPMMGClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := dcm.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(division_choice_mtspmmg.Table, division_choice_mtspmmg.FieldID, id),
			sqlgraph.To(exam_application_mtspmmg.Table, exam_application_mtspmmg.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, division_choice_mtspmmg.ApplnMTSPMMGRefTable, division_choice_mtspmmg.ApplnMTSPMMGRefColumn),
		)
		fromV = sqlgraph.Neighbors(dcm.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *DivisionChoiceMTSPMMGClient) Hooks() []Hook {
	return c.hooks.Division_Choice_MTSPMMG
}

// Interceptors returns the client interceptors.
func (c *DivisionChoiceMTSPMMGClient) Interceptors() []Interceptor {
	return c.inters.Division_Choice_MTSPMMG
}

func (c *DivisionChoiceMTSPMMGClient) mutate(ctx context.Context, m *DivisionChoiceMTSPMMGMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&DivisionChoiceMTSPMMGCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&DivisionChoiceMTSPMMGUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&DivisionChoiceMTSPMMGUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&DivisionChoiceMTSPMMGDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Division_Choice_MTSPMMG mutation op: %q", m.Op())
	}
}

// DivisionChoicePAClient is a client for the Division_Choice_PA schema.
type DivisionChoicePAClient struct {
	config
}

// NewDivisionChoicePAClient returns a client for the Division_Choice_PA from the given config.
func NewDivisionChoicePAClient(c config) *DivisionChoicePAClient {
	return &DivisionChoicePAClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `division_choice_pa.Hooks(f(g(h())))`.
func (c *DivisionChoicePAClient) Use(hooks ...Hook) {
	c.hooks.Division_Choice_PA = append(c.hooks.Division_Choice_PA, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `division_choice_pa.Intercept(f(g(h())))`.
func (c *DivisionChoicePAClient) Intercept(interceptors ...Interceptor) {
	c.inters.Division_Choice_PA = append(c.inters.Division_Choice_PA, interceptors...)
}

// Create returns a builder for creating a Division_Choice_PA entity.
func (c *DivisionChoicePAClient) Create() *DivisionChoicePACreate {
	mutation := newDivisionChoicePAMutation(c.config, OpCreate)
	return &DivisionChoicePACreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Division_Choice_PA entities.
func (c *DivisionChoicePAClient) CreateBulk(builders ...*DivisionChoicePACreate) *DivisionChoicePACreateBulk {
	return &DivisionChoicePACreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Division_Choice_PA.
func (c *DivisionChoicePAClient) Update() *DivisionChoicePAUpdate {
	mutation := newDivisionChoicePAMutation(c.config, OpUpdate)
	return &DivisionChoicePAUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *DivisionChoicePAClient) UpdateOne(dcp *Division_Choice_PA) *DivisionChoicePAUpdateOne {
	mutation := newDivisionChoicePAMutation(c.config, OpUpdateOne, withDivision_Choice_PA(dcp))
	return &DivisionChoicePAUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *DivisionChoicePAClient) UpdateOneID(id int32) *DivisionChoicePAUpdateOne {
	mutation := newDivisionChoicePAMutation(c.config, OpUpdateOne, withDivision_Choice_PAID(id))
	return &DivisionChoicePAUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Division_Choice_PA.
func (c *DivisionChoicePAClient) Delete() *DivisionChoicePADelete {
	mutation := newDivisionChoicePAMutation(c.config, OpDelete)
	return &DivisionChoicePADelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *DivisionChoicePAClient) DeleteOne(dcp *Division_Choice_PA) *DivisionChoicePADeleteOne {
	return c.DeleteOneID(dcp.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *DivisionChoicePAClient) DeleteOneID(id int32) *DivisionChoicePADeleteOne {
	builder := c.Delete().Where(division_choice_pa.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &DivisionChoicePADeleteOne{builder}
}

// Query returns a query builder for Division_Choice_PA.
func (c *DivisionChoicePAClient) Query() *DivisionChoicePAQuery {
	return &DivisionChoicePAQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeDivisionChoicePA},
		inters: c.Interceptors(),
	}
}

// Get returns a Division_Choice_PA entity by its id.
func (c *DivisionChoicePAClient) Get(ctx context.Context, id int32) (*Division_Choice_PA, error) {
	return c.Query().Where(division_choice_pa.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *DivisionChoicePAClient) GetX(ctx context.Context, id int32) *Division_Choice_PA {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryApplnGDSPARef queries the ApplnGDSPA_Ref edge of a Division_Choice_PA.
func (c *DivisionChoicePAClient) QueryApplnGDSPARef(dcp *Division_Choice_PA) *ExamApplicationsGDSPAQuery {
	query := (&ExamApplicationsGDSPAClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := dcp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(division_choice_pa.Table, division_choice_pa.FieldID, id),
			sqlgraph.To(exam_applications_gdspa.Table, exam_applications_gdspa.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, division_choice_pa.ApplnGDSPARefTable, division_choice_pa.ApplnGDSPARefColumn),
		)
		fromV = sqlgraph.Neighbors(dcp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *DivisionChoicePAClient) Hooks() []Hook {
	return c.hooks.Division_Choice_PA
}

// Interceptors returns the client interceptors.
func (c *DivisionChoicePAClient) Interceptors() []Interceptor {
	return c.inters.Division_Choice_PA
}

func (c *DivisionChoicePAClient) mutate(ctx context.Context, m *DivisionChoicePAMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&DivisionChoicePACreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&DivisionChoicePAUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&DivisionChoicePAUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&DivisionChoicePADelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Division_Choice_PA mutation op: %q", m.Op())
	}
}

// DivisionChoicePMClient is a client for the Division_Choice_PM schema.
type DivisionChoicePMClient struct {
	config
}

// NewDivisionChoicePMClient returns a client for the Division_Choice_PM from the given config.
func NewDivisionChoicePMClient(c config) *DivisionChoicePMClient {
	return &DivisionChoicePMClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `division_choice_pm.Hooks(f(g(h())))`.
func (c *DivisionChoicePMClient) Use(hooks ...Hook) {
	c.hooks.Division_Choice_PM = append(c.hooks.Division_Choice_PM, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `division_choice_pm.Intercept(f(g(h())))`.
func (c *DivisionChoicePMClient) Intercept(interceptors ...Interceptor) {
	c.inters.Division_Choice_PM = append(c.inters.Division_Choice_PM, interceptors...)
}

// Create returns a builder for creating a Division_Choice_PM entity.
func (c *DivisionChoicePMClient) Create() *DivisionChoicePMCreate {
	mutation := newDivisionChoicePMMutation(c.config, OpCreate)
	return &DivisionChoicePMCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Division_Choice_PM entities.
func (c *DivisionChoicePMClient) CreateBulk(builders ...*DivisionChoicePMCreate) *DivisionChoicePMCreateBulk {
	return &DivisionChoicePMCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Division_Choice_PM.
func (c *DivisionChoicePMClient) Update() *DivisionChoicePMUpdate {
	mutation := newDivisionChoicePMMutation(c.config, OpUpdate)
	return &DivisionChoicePMUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *DivisionChoicePMClient) UpdateOne(dcp *Division_Choice_PM) *DivisionChoicePMUpdateOne {
	mutation := newDivisionChoicePMMutation(c.config, OpUpdateOne, withDivision_Choice_PM(dcp))
	return &DivisionChoicePMUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *DivisionChoicePMClient) UpdateOneID(id int32) *DivisionChoicePMUpdateOne {
	mutation := newDivisionChoicePMMutation(c.config, OpUpdateOne, withDivision_Choice_PMID(id))
	return &DivisionChoicePMUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Division_Choice_PM.
func (c *DivisionChoicePMClient) Delete() *DivisionChoicePMDelete {
	mutation := newDivisionChoicePMMutation(c.config, OpDelete)
	return &DivisionChoicePMDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *DivisionChoicePMClient) DeleteOne(dcp *Division_Choice_PM) *DivisionChoicePMDeleteOne {
	return c.DeleteOneID(dcp.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *DivisionChoicePMClient) DeleteOneID(id int32) *DivisionChoicePMDeleteOne {
	builder := c.Delete().Where(division_choice_pm.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &DivisionChoicePMDeleteOne{builder}
}

// Query returns a query builder for Division_Choice_PM.
func (c *DivisionChoicePMClient) Query() *DivisionChoicePMQuery {
	return &DivisionChoicePMQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeDivisionChoicePM},
		inters: c.Interceptors(),
	}
}

// Get returns a Division_Choice_PM entity by its id.
func (c *DivisionChoicePMClient) Get(ctx context.Context, id int32) (*Division_Choice_PM, error) {
	return c.Query().Where(division_choice_pm.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *DivisionChoicePMClient) GetX(ctx context.Context, id int32) *Division_Choice_PM {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryApplnGDSPMRef queries the ApplnGDSPM_Ref edge of a Division_Choice_PM.
func (c *DivisionChoicePMClient) QueryApplnGDSPMRef(dcp *Division_Choice_PM) *ExamApplicationsGDSPMQuery {
	query := (&ExamApplicationsGDSPMClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := dcp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(division_choice_pm.Table, division_choice_pm.FieldID, id),
			sqlgraph.To(exam_applications_gdspm.Table, exam_applications_gdspm.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, division_choice_pm.ApplnGDSPMRefTable, division_choice_pm.ApplnGDSPMRefColumn),
		)
		fromV = sqlgraph.Neighbors(dcp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *DivisionChoicePMClient) Hooks() []Hook {
	return c.hooks.Division_Choice_PM
}

// Interceptors returns the client interceptors.
func (c *DivisionChoicePMClient) Interceptors() []Interceptor {
	return c.inters.Division_Choice_PM
}

func (c *DivisionChoicePMClient) mutate(ctx context.Context, m *DivisionChoicePMMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&DivisionChoicePMCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&DivisionChoicePMUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&DivisionChoicePMUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&DivisionChoicePMDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Division_Choice_PM mutation op: %q", m.Op())
	}
}

// DivisionChoicePMPAClient is a client for the Division_Choice_PMPA schema.
type DivisionChoicePMPAClient struct {
	config
}

// NewDivisionChoicePMPAClient returns a client for the Division_Choice_PMPA from the given config.
func NewDivisionChoicePMPAClient(c config) *DivisionChoicePMPAClient {
	return &DivisionChoicePMPAClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `division_choice_pmpa.Hooks(f(g(h())))`.
func (c *DivisionChoicePMPAClient) Use(hooks ...Hook) {
	c.hooks.Division_Choice_PMPA = append(c.hooks.Division_Choice_PMPA, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `division_choice_pmpa.Intercept(f(g(h())))`.
func (c *DivisionChoicePMPAClient) Intercept(interceptors ...Interceptor) {
	c.inters.Division_Choice_PMPA = append(c.inters.Division_Choice_PMPA, interceptors...)
}

// Create returns a builder for creating a Division_Choice_PMPA entity.
func (c *DivisionChoicePMPAClient) Create() *DivisionChoicePMPACreate {
	mutation := newDivisionChoicePMPAMutation(c.config, OpCreate)
	return &DivisionChoicePMPACreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Division_Choice_PMPA entities.
func (c *DivisionChoicePMPAClient) CreateBulk(builders ...*DivisionChoicePMPACreate) *DivisionChoicePMPACreateBulk {
	return &DivisionChoicePMPACreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Division_Choice_PMPA.
func (c *DivisionChoicePMPAClient) Update() *DivisionChoicePMPAUpdate {
	mutation := newDivisionChoicePMPAMutation(c.config, OpUpdate)
	return &DivisionChoicePMPAUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *DivisionChoicePMPAClient) UpdateOne(dcp *Division_Choice_PMPA) *DivisionChoicePMPAUpdateOne {
	mutation := newDivisionChoicePMPAMutation(c.config, OpUpdateOne, withDivision_Choice_PMPA(dcp))
	return &DivisionChoicePMPAUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *DivisionChoicePMPAClient) UpdateOneID(id int32) *DivisionChoicePMPAUpdateOne {
	mutation := newDivisionChoicePMPAMutation(c.config, OpUpdateOne, withDivision_Choice_PMPAID(id))
	return &DivisionChoicePMPAUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Division_Choice_PMPA.
func (c *DivisionChoicePMPAClient) Delete() *DivisionChoicePMPADelete {
	mutation := newDivisionChoicePMPAMutation(c.config, OpDelete)
	return &DivisionChoicePMPADelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *DivisionChoicePMPAClient) DeleteOne(dcp *Division_Choice_PMPA) *DivisionChoicePMPADeleteOne {
	return c.DeleteOneID(dcp.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *DivisionChoicePMPAClient) DeleteOneID(id int32) *DivisionChoicePMPADeleteOne {
	builder := c.Delete().Where(division_choice_pmpa.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &DivisionChoicePMPADeleteOne{builder}
}

// Query returns a query builder for Division_Choice_PMPA.
func (c *DivisionChoicePMPAClient) Query() *DivisionChoicePMPAQuery {
	return &DivisionChoicePMPAQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeDivisionChoicePMPA},
		inters: c.Interceptors(),
	}
}

// Get returns a Division_Choice_PMPA entity by its id.
func (c *DivisionChoicePMPAClient) Get(ctx context.Context, id int32) (*Division_Choice_PMPA, error) {
	return c.Query().Where(division_choice_pmpa.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *DivisionChoicePMPAClient) GetX(ctx context.Context, id int32) *Division_Choice_PMPA {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryApplnPMPARef queries the ApplnPMPA_Ref edge of a Division_Choice_PMPA.
func (c *DivisionChoicePMPAClient) QueryApplnPMPARef(dcp *Division_Choice_PMPA) *ExamApplicationsPMPAQuery {
	query := (&ExamApplicationsPMPAClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := dcp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(division_choice_pmpa.Table, division_choice_pmpa.FieldID, id),
			sqlgraph.To(exam_applications_pmpa.Table, exam_applications_pmpa.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, division_choice_pmpa.ApplnPMPARefTable, division_choice_pmpa.ApplnPMPARefColumn),
		)
		fromV = sqlgraph.Neighbors(dcp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *DivisionChoicePMPAClient) Hooks() []Hook {
	return c.hooks.Division_Choice_PMPA
}

// Interceptors returns the client interceptors.
func (c *DivisionChoicePMPAClient) Interceptors() []Interceptor {
	return c.inters.Division_Choice_PMPA
}

func (c *DivisionChoicePMPAClient) mutate(ctx context.Context, m *DivisionChoicePMPAMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&DivisionChoicePMPACreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&DivisionChoicePMPAUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&DivisionChoicePMPAUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&DivisionChoicePMPADelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Division_Choice_PMPA mutation op: %q", m.Op())
	}
}

// EducationDetailsClient is a client for the EducationDetails schema.
type EducationDetailsClient struct {
	config
}

// NewEducationDetailsClient returns a client for the EducationDetails from the given config.
func NewEducationDetailsClient(c config) *EducationDetailsClient {
	return &EducationDetailsClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `educationdetails.Hooks(f(g(h())))`.
func (c *EducationDetailsClient) Use(hooks ...Hook) {
	c.hooks.EducationDetails = append(c.hooks.EducationDetails, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `educationdetails.Intercept(f(g(h())))`.
func (c *EducationDetailsClient) Intercept(interceptors ...Interceptor) {
	c.inters.EducationDetails = append(c.inters.EducationDetails, interceptors...)
}

// Create returns a builder for creating a EducationDetails entity.
func (c *EducationDetailsClient) Create() *EducationDetailsCreate {
	mutation := newEducationDetailsMutation(c.config, OpCreate)
	return &EducationDetailsCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of EducationDetails entities.
func (c *EducationDetailsClient) CreateBulk(builders ...*EducationDetailsCreate) *EducationDetailsCreateBulk {
	return &EducationDetailsCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for EducationDetails.
func (c *EducationDetailsClient) Update() *EducationDetailsUpdate {
	mutation := newEducationDetailsMutation(c.config, OpUpdate)
	return &EducationDetailsUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *EducationDetailsClient) UpdateOne(ed *EducationDetails) *EducationDetailsUpdateOne {
	mutation := newEducationDetailsMutation(c.config, OpUpdateOne, withEducationDetails(ed))
	return &EducationDetailsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *EducationDetailsClient) UpdateOneID(id int64) *EducationDetailsUpdateOne {
	mutation := newEducationDetailsMutation(c.config, OpUpdateOne, withEducationDetailsID(id))
	return &EducationDetailsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for EducationDetails.
func (c *EducationDetailsClient) Delete() *EducationDetailsDelete {
	mutation := newEducationDetailsMutation(c.config, OpDelete)
	return &EducationDetailsDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *EducationDetailsClient) DeleteOne(ed *EducationDetails) *EducationDetailsDeleteOne {
	return c.DeleteOneID(ed.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *EducationDetailsClient) DeleteOneID(id int64) *EducationDetailsDeleteOne {
	builder := c.Delete().Where(educationdetails.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &EducationDetailsDeleteOne{builder}
}

// Query returns a query builder for EducationDetails.
func (c *EducationDetailsClient) Query() *EducationDetailsQuery {
	return &EducationDetailsQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeEducationDetails},
		inters: c.Interceptors(),
	}
}

// Get returns a EducationDetails entity by its id.
func (c *EducationDetailsClient) Get(ctx context.Context, id int64) (*EducationDetails, error) {
	return c.Query().Where(educationdetails.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *EducationDetailsClient) GetX(ctx context.Context, id int64) *EducationDetails {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryLogData queries the LogData edge of a EducationDetails.
func (c *EducationDetailsClient) QueryLogData(ed *EducationDetails) *LogsQuery {
	query := (&LogsClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ed.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(educationdetails.Table, educationdetails.FieldID, id),
			sqlgraph.To(logs.Table, logs.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, educationdetails.LogDataTable, educationdetails.LogDataColumn),
		)
		fromV = sqlgraph.Neighbors(ed.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *EducationDetailsClient) Hooks() []Hook {
	return c.hooks.EducationDetails
}

// Interceptors returns the client interceptors.
func (c *EducationDetailsClient) Interceptors() []Interceptor {
	return c.inters.EducationDetails
}

func (c *EducationDetailsClient) mutate(ctx context.Context, m *EducationDetailsMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&EducationDetailsCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&EducationDetailsUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&EducationDetailsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&EducationDetailsDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown EducationDetails mutation op: %q", m.Op())
	}
}

// EligibilityCadrePayMatrixClient is a client for the EligibilityCadrePayMatrix schema.
type EligibilityCadrePayMatrixClient struct {
	config
}

// NewEligibilityCadrePayMatrixClient returns a client for the EligibilityCadrePayMatrix from the given config.
func NewEligibilityCadrePayMatrixClient(c config) *EligibilityCadrePayMatrixClient {
	return &EligibilityCadrePayMatrixClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `eligibilitycadrepaymatrix.Hooks(f(g(h())))`.
func (c *EligibilityCadrePayMatrixClient) Use(hooks ...Hook) {
	c.hooks.EligibilityCadrePayMatrix = append(c.hooks.EligibilityCadrePayMatrix, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `eligibilitycadrepaymatrix.Intercept(f(g(h())))`.
func (c *EligibilityCadrePayMatrixClient) Intercept(interceptors ...Interceptor) {
	c.inters.EligibilityCadrePayMatrix = append(c.inters.EligibilityCadrePayMatrix, interceptors...)
}

// Create returns a builder for creating a EligibilityCadrePayMatrix entity.
func (c *EligibilityCadrePayMatrixClient) Create() *EligibilityCadrePayMatrixCreate {
	mutation := newEligibilityCadrePayMatrixMutation(c.config, OpCreate)
	return &EligibilityCadrePayMatrixCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of EligibilityCadrePayMatrix entities.
func (c *EligibilityCadrePayMatrixClient) CreateBulk(builders ...*EligibilityCadrePayMatrixCreate) *EligibilityCadrePayMatrixCreateBulk {
	return &EligibilityCadrePayMatrixCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for EligibilityCadrePayMatrix.
func (c *EligibilityCadrePayMatrixClient) Update() *EligibilityCadrePayMatrixUpdate {
	mutation := newEligibilityCadrePayMatrixMutation(c.config, OpUpdate)
	return &EligibilityCadrePayMatrixUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *EligibilityCadrePayMatrixClient) UpdateOne(ecpm *EligibilityCadrePayMatrix) *EligibilityCadrePayMatrixUpdateOne {
	mutation := newEligibilityCadrePayMatrixMutation(c.config, OpUpdateOne, withEligibilityCadrePayMatrix(ecpm))
	return &EligibilityCadrePayMatrixUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *EligibilityCadrePayMatrixClient) UpdateOneID(id int64) *EligibilityCadrePayMatrixUpdateOne {
	mutation := newEligibilityCadrePayMatrixMutation(c.config, OpUpdateOne, withEligibilityCadrePayMatrixID(id))
	return &EligibilityCadrePayMatrixUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for EligibilityCadrePayMatrix.
func (c *EligibilityCadrePayMatrixClient) Delete() *EligibilityCadrePayMatrixDelete {
	mutation := newEligibilityCadrePayMatrixMutation(c.config, OpDelete)
	return &EligibilityCadrePayMatrixDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *EligibilityCadrePayMatrixClient) DeleteOne(ecpm *EligibilityCadrePayMatrix) *EligibilityCadrePayMatrixDeleteOne {
	return c.DeleteOneID(ecpm.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *EligibilityCadrePayMatrixClient) DeleteOneID(id int64) *EligibilityCadrePayMatrixDeleteOne {
	builder := c.Delete().Where(eligibilitycadrepaymatrix.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &EligibilityCadrePayMatrixDeleteOne{builder}
}

// Query returns a query builder for EligibilityCadrePayMatrix.
func (c *EligibilityCadrePayMatrixClient) Query() *EligibilityCadrePayMatrixQuery {
	return &EligibilityCadrePayMatrixQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeEligibilityCadrePayMatrix},
		inters: c.Interceptors(),
	}
}

// Get returns a EligibilityCadrePayMatrix entity by its id.
func (c *EligibilityCadrePayMatrixClient) Get(ctx context.Context, id int64) (*EligibilityCadrePayMatrix, error) {
	return c.Query().Where(eligibilitycadrepaymatrix.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *EligibilityCadrePayMatrixClient) GetX(ctx context.Context, id int64) *EligibilityCadrePayMatrix {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryLogData queries the LogData edge of a EligibilityCadrePayMatrix.
func (c *EligibilityCadrePayMatrixClient) QueryLogData(ecpm *EligibilityCadrePayMatrix) *LogsQuery {
	query := (&LogsClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ecpm.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(eligibilitycadrepaymatrix.Table, eligibilitycadrepaymatrix.FieldID, id),
			sqlgraph.To(logs.Table, logs.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, eligibilitycadrepaymatrix.LogDataTable, eligibilitycadrepaymatrix.LogDataColumn),
		)
		fromV = sqlgraph.Neighbors(ecpm.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *EligibilityCadrePayMatrixClient) Hooks() []Hook {
	return c.hooks.EligibilityCadrePayMatrix
}

// Interceptors returns the client interceptors.
func (c *EligibilityCadrePayMatrixClient) Interceptors() []Interceptor {
	return c.inters.EligibilityCadrePayMatrix
}

func (c *EligibilityCadrePayMatrixClient) mutate(ctx context.Context, m *EligibilityCadrePayMatrixMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&EligibilityCadrePayMatrixCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&EligibilityCadrePayMatrixUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&EligibilityCadrePayMatrixUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&EligibilityCadrePayMatrixDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown EligibilityCadrePayMatrix mutation op: %q", m.Op())
	}
}

// EligibilityMasterClient is a client for the EligibilityMaster schema.
type EligibilityMasterClient struct {
	config
}

// NewEligibilityMasterClient returns a client for the EligibilityMaster from the given config.
func NewEligibilityMasterClient(c config) *EligibilityMasterClient {
	return &EligibilityMasterClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `eligibilitymaster.Hooks(f(g(h())))`.
func (c *EligibilityMasterClient) Use(hooks ...Hook) {
	c.hooks.EligibilityMaster = append(c.hooks.EligibilityMaster, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `eligibilitymaster.Intercept(f(g(h())))`.
func (c *EligibilityMasterClient) Intercept(interceptors ...Interceptor) {
	c.inters.EligibilityMaster = append(c.inters.EligibilityMaster, interceptors...)
}

// Create returns a builder for creating a EligibilityMaster entity.
func (c *EligibilityMasterClient) Create() *EligibilityMasterCreate {
	mutation := newEligibilityMasterMutation(c.config, OpCreate)
	return &EligibilityMasterCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of EligibilityMaster entities.
func (c *EligibilityMasterClient) CreateBulk(builders ...*EligibilityMasterCreate) *EligibilityMasterCreateBulk {
	return &EligibilityMasterCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for EligibilityMaster.
func (c *EligibilityMasterClient) Update() *EligibilityMasterUpdate {
	mutation := newEligibilityMasterMutation(c.config, OpUpdate)
	return &EligibilityMasterUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *EligibilityMasterClient) UpdateOne(em *EligibilityMaster) *EligibilityMasterUpdateOne {
	mutation := newEligibilityMasterMutation(c.config, OpUpdateOne, withEligibilityMaster(em))
	return &EligibilityMasterUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *EligibilityMasterClient) UpdateOneID(id int32) *EligibilityMasterUpdateOne {
	mutation := newEligibilityMasterMutation(c.config, OpUpdateOne, withEligibilityMasterID(id))
	return &EligibilityMasterUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for EligibilityMaster.
func (c *EligibilityMasterClient) Delete() *EligibilityMasterDelete {
	mutation := newEligibilityMasterMutation(c.config, OpDelete)
	return &EligibilityMasterDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *EligibilityMasterClient) DeleteOne(em *EligibilityMaster) *EligibilityMasterDeleteOne {
	return c.DeleteOneID(em.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *EligibilityMasterClient) DeleteOneID(id int32) *EligibilityMasterDeleteOne {
	builder := c.Delete().Where(eligibilitymaster.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &EligibilityMasterDeleteOne{builder}
}

// Query returns a query builder for EligibilityMaster.
func (c *EligibilityMasterClient) Query() *EligibilityMasterQuery {
	return &EligibilityMasterQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeEligibilityMaster},
		inters: c.Interceptors(),
	}
}

// Get returns a EligibilityMaster entity by its id.
func (c *EligibilityMasterClient) Get(ctx context.Context, id int32) (*EligibilityMaster, error) {
	return c.Query().Where(eligibilitymaster.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *EligibilityMasterClient) GetX(ctx context.Context, id int32) *EligibilityMaster {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryNotifications queries the Notifications edge of a EligibilityMaster.
func (c *EligibilityMasterClient) QueryNotifications(em *EligibilityMaster) *NotificationQuery {
	query := (&NotificationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := em.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(eligibilitymaster.Table, eligibilitymaster.FieldID, id),
			sqlgraph.To(notification.Table, notification.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, eligibilitymaster.NotificationsTable, eligibilitymaster.NotificationsColumn),
		)
		fromV = sqlgraph.Neighbors(em.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCategoryEligibility queries the CategoryEligibility edge of a EligibilityMaster.
func (c *EligibilityMasterClient) QueryCategoryEligibility(em *EligibilityMaster) *EmployeeCategoryQuery {
	query := (&EmployeeCategoryClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := em.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(eligibilitymaster.Table, eligibilitymaster.FieldID, id),
			sqlgraph.To(employeecategory.Table, employeecategory.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, eligibilitymaster.CategoryEligibilityTable, eligibilitymaster.CategoryEligibilityColumn),
		)
		fromV = sqlgraph.Neighbors(em.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPostEligibility queries the PostEligibility edge of a EligibilityMaster.
func (c *EligibilityMasterClient) QueryPostEligibility(em *EligibilityMaster) *EmployeePostsQuery {
	query := (&EmployeePostsClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := em.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(eligibilitymaster.Table, eligibilitymaster.FieldID, id),
			sqlgraph.To(employeeposts.Table, employeeposts.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, eligibilitymaster.PostEligibilityTable, eligibilitymaster.PostEligibilityColumn),
		)
		fromV = sqlgraph.Neighbors(em.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryExamPaperEligibility queries the ExamPaper_Eligibility edge of a EligibilityMaster.
func (c *EligibilityMasterClient) QueryExamPaperEligibility(em *EligibilityMaster) *ExamPapersQuery {
	query := (&ExamPapersClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := em.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(eligibilitymaster.Table, eligibilitymaster.FieldID, id),
			sqlgraph.To(exampapers.Table, exampapers.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, eligibilitymaster.ExamPaperEligibilityTable, eligibilitymaster.ExamPaperEligibilityColumn),
		)
		fromV = sqlgraph.Neighbors(em.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryExamEligibility queries the Exam_Eligibility edge of a EligibilityMaster.
func (c *EligibilityMasterClient) QueryExamEligibility(em *EligibilityMaster) *ExamQuery {
	query := (&ExamClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := em.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(eligibilitymaster.Table, eligibilitymaster.FieldID, id),
			sqlgraph.To(exam.Table, exam.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, eligibilitymaster.ExamEligibilityTable, eligibilitymaster.ExamEligibilityColumn),
		)
		fromV = sqlgraph.Neighbors(em.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *EligibilityMasterClient) Hooks() []Hook {
	return c.hooks.EligibilityMaster
}

// Interceptors returns the client interceptors.
func (c *EligibilityMasterClient) Interceptors() []Interceptor {
	return c.inters.EligibilityMaster
}

func (c *EligibilityMasterClient) mutate(ctx context.Context, m *EligibilityMasterMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&EligibilityMasterCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&EligibilityMasterUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&EligibilityMasterUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&EligibilityMasterDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown EligibilityMaster mutation op: %q", m.Op())
	}
}

// EmployeeCadreClient is a client for the EmployeeCadre schema.
type EmployeeCadreClient struct {
	config
}

// NewEmployeeCadreClient returns a client for the EmployeeCadre from the given config.
func NewEmployeeCadreClient(c config) *EmployeeCadreClient {
	return &EmployeeCadreClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `employeecadre.Hooks(f(g(h())))`.
func (c *EmployeeCadreClient) Use(hooks ...Hook) {
	c.hooks.EmployeeCadre = append(c.hooks.EmployeeCadre, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `employeecadre.Intercept(f(g(h())))`.
func (c *EmployeeCadreClient) Intercept(interceptors ...Interceptor) {
	c.inters.EmployeeCadre = append(c.inters.EmployeeCadre, interceptors...)
}

// Create returns a builder for creating a EmployeeCadre entity.
func (c *EmployeeCadreClient) Create() *EmployeeCadreCreate {
	mutation := newEmployeeCadreMutation(c.config, OpCreate)
	return &EmployeeCadreCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of EmployeeCadre entities.
func (c *EmployeeCadreClient) CreateBulk(builders ...*EmployeeCadreCreate) *EmployeeCadreCreateBulk {
	return &EmployeeCadreCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for EmployeeCadre.
func (c *EmployeeCadreClient) Update() *EmployeeCadreUpdate {
	mutation := newEmployeeCadreMutation(c.config, OpUpdate)
	return &EmployeeCadreUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *EmployeeCadreClient) UpdateOne(ec *EmployeeCadre) *EmployeeCadreUpdateOne {
	mutation := newEmployeeCadreMutation(c.config, OpUpdateOne, withEmployeeCadre(ec))
	return &EmployeeCadreUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *EmployeeCadreClient) UpdateOneID(id int32) *EmployeeCadreUpdateOne {
	mutation := newEmployeeCadreMutation(c.config, OpUpdateOne, withEmployeeCadreID(id))
	return &EmployeeCadreUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for EmployeeCadre.
func (c *EmployeeCadreClient) Delete() *EmployeeCadreDelete {
	mutation := newEmployeeCadreMutation(c.config, OpDelete)
	return &EmployeeCadreDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *EmployeeCadreClient) DeleteOne(ec *EmployeeCadre) *EmployeeCadreDeleteOne {
	return c.DeleteOneID(ec.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *EmployeeCadreClient) DeleteOneID(id int32) *EmployeeCadreDeleteOne {
	builder := c.Delete().Where(employeecadre.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &EmployeeCadreDeleteOne{builder}
}

// Query returns a query builder for EmployeeCadre.
func (c *EmployeeCadreClient) Query() *EmployeeCadreQuery {
	return &EmployeeCadreQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeEmployeeCadre},
		inters: c.Interceptors(),
	}
}

// Get returns a EmployeeCadre entity by its id.
func (c *EmployeeCadreClient) Get(ctx context.Context, id int32) (*EmployeeCadre, error) {
	return c.Query().Where(employeecadre.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *EmployeeCadreClient) GetX(ctx context.Context, id int32) *EmployeeCadre {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *EmployeeCadreClient) Hooks() []Hook {
	return c.hooks.EmployeeCadre
}

// Interceptors returns the client interceptors.
func (c *EmployeeCadreClient) Interceptors() []Interceptor {
	return c.inters.EmployeeCadre
}

func (c *EmployeeCadreClient) mutate(ctx context.Context, m *EmployeeCadreMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&EmployeeCadreCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&EmployeeCadreUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&EmployeeCadreUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&EmployeeCadreDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown EmployeeCadre mutation op: %q", m.Op())
	}
}

// EmployeeCategoryClient is a client for the EmployeeCategory schema.
type EmployeeCategoryClient struct {
	config
}

// NewEmployeeCategoryClient returns a client for the EmployeeCategory from the given config.
func NewEmployeeCategoryClient(c config) *EmployeeCategoryClient {
	return &EmployeeCategoryClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `employeecategory.Hooks(f(g(h())))`.
func (c *EmployeeCategoryClient) Use(hooks ...Hook) {
	c.hooks.EmployeeCategory = append(c.hooks.EmployeeCategory, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `employeecategory.Intercept(f(g(h())))`.
func (c *EmployeeCategoryClient) Intercept(interceptors ...Interceptor) {
	c.inters.EmployeeCategory = append(c.inters.EmployeeCategory, interceptors...)
}

// Create returns a builder for creating a EmployeeCategory entity.
func (c *EmployeeCategoryClient) Create() *EmployeeCategoryCreate {
	mutation := newEmployeeCategoryMutation(c.config, OpCreate)
	return &EmployeeCategoryCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of EmployeeCategory entities.
func (c *EmployeeCategoryClient) CreateBulk(builders ...*EmployeeCategoryCreate) *EmployeeCategoryCreateBulk {
	return &EmployeeCategoryCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for EmployeeCategory.
func (c *EmployeeCategoryClient) Update() *EmployeeCategoryUpdate {
	mutation := newEmployeeCategoryMutation(c.config, OpUpdate)
	return &EmployeeCategoryUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *EmployeeCategoryClient) UpdateOne(ec *EmployeeCategory) *EmployeeCategoryUpdateOne {
	mutation := newEmployeeCategoryMutation(c.config, OpUpdateOne, withEmployeeCategory(ec))
	return &EmployeeCategoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *EmployeeCategoryClient) UpdateOneID(id int32) *EmployeeCategoryUpdateOne {
	mutation := newEmployeeCategoryMutation(c.config, OpUpdateOne, withEmployeeCategoryID(id))
	return &EmployeeCategoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for EmployeeCategory.
func (c *EmployeeCategoryClient) Delete() *EmployeeCategoryDelete {
	mutation := newEmployeeCategoryMutation(c.config, OpDelete)
	return &EmployeeCategoryDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *EmployeeCategoryClient) DeleteOne(ec *EmployeeCategory) *EmployeeCategoryDeleteOne {
	return c.DeleteOneID(ec.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *EmployeeCategoryClient) DeleteOneID(id int32) *EmployeeCategoryDeleteOne {
	builder := c.Delete().Where(employeecategory.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &EmployeeCategoryDeleteOne{builder}
}

// Query returns a query builder for EmployeeCategory.
func (c *EmployeeCategoryClient) Query() *EmployeeCategoryQuery {
	return &EmployeeCategoryQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeEmployeeCategory},
		inters: c.Interceptors(),
	}
}

// Get returns a EmployeeCategory entity by its id.
func (c *EmployeeCategoryClient) Get(ctx context.Context, id int32) (*EmployeeCategory, error) {
	return c.Query().Where(employeecategory.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *EmployeeCategoryClient) GetX(ctx context.Context, id int32) *EmployeeCategory {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *EmployeeCategoryClient) Hooks() []Hook {
	return c.hooks.EmployeeCategory
}

// Interceptors returns the client interceptors.
func (c *EmployeeCategoryClient) Interceptors() []Interceptor {
	return c.inters.EmployeeCategory
}

func (c *EmployeeCategoryClient) mutate(ctx context.Context, m *EmployeeCategoryMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&EmployeeCategoryCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&EmployeeCategoryUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&EmployeeCategoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&EmployeeCategoryDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown EmployeeCategory mutation op: %q", m.Op())
	}
}

// EmployeeDesignationClient is a client for the EmployeeDesignation schema.
type EmployeeDesignationClient struct {
	config
}

// NewEmployeeDesignationClient returns a client for the EmployeeDesignation from the given config.
func NewEmployeeDesignationClient(c config) *EmployeeDesignationClient {
	return &EmployeeDesignationClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `employeedesignation.Hooks(f(g(h())))`.
func (c *EmployeeDesignationClient) Use(hooks ...Hook) {
	c.hooks.EmployeeDesignation = append(c.hooks.EmployeeDesignation, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `employeedesignation.Intercept(f(g(h())))`.
func (c *EmployeeDesignationClient) Intercept(interceptors ...Interceptor) {
	c.inters.EmployeeDesignation = append(c.inters.EmployeeDesignation, interceptors...)
}

// Create returns a builder for creating a EmployeeDesignation entity.
func (c *EmployeeDesignationClient) Create() *EmployeeDesignationCreate {
	mutation := newEmployeeDesignationMutation(c.config, OpCreate)
	return &EmployeeDesignationCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of EmployeeDesignation entities.
func (c *EmployeeDesignationClient) CreateBulk(builders ...*EmployeeDesignationCreate) *EmployeeDesignationCreateBulk {
	return &EmployeeDesignationCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for EmployeeDesignation.
func (c *EmployeeDesignationClient) Update() *EmployeeDesignationUpdate {
	mutation := newEmployeeDesignationMutation(c.config, OpUpdate)
	return &EmployeeDesignationUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *EmployeeDesignationClient) UpdateOne(ed *EmployeeDesignation) *EmployeeDesignationUpdateOne {
	mutation := newEmployeeDesignationMutation(c.config, OpUpdateOne, withEmployeeDesignation(ed))
	return &EmployeeDesignationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *EmployeeDesignationClient) UpdateOneID(id int32) *EmployeeDesignationUpdateOne {
	mutation := newEmployeeDesignationMutation(c.config, OpUpdateOne, withEmployeeDesignationID(id))
	return &EmployeeDesignationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for EmployeeDesignation.
func (c *EmployeeDesignationClient) Delete() *EmployeeDesignationDelete {
	mutation := newEmployeeDesignationMutation(c.config, OpDelete)
	return &EmployeeDesignationDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *EmployeeDesignationClient) DeleteOne(ed *EmployeeDesignation) *EmployeeDesignationDeleteOne {
	return c.DeleteOneID(ed.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *EmployeeDesignationClient) DeleteOneID(id int32) *EmployeeDesignationDeleteOne {
	builder := c.Delete().Where(employeedesignation.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &EmployeeDesignationDeleteOne{builder}
}

// Query returns a query builder for EmployeeDesignation.
func (c *EmployeeDesignationClient) Query() *EmployeeDesignationQuery {
	return &EmployeeDesignationQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeEmployeeDesignation},
		inters: c.Interceptors(),
	}
}

// Get returns a EmployeeDesignation entity by its id.
func (c *EmployeeDesignationClient) Get(ctx context.Context, id int32) (*EmployeeDesignation, error) {
	return c.Query().Where(employeedesignation.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *EmployeeDesignationClient) GetX(ctx context.Context, id int32) *EmployeeDesignation {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *EmployeeDesignationClient) Hooks() []Hook {
	return c.hooks.EmployeeDesignation
}

// Interceptors returns the client interceptors.
func (c *EmployeeDesignationClient) Interceptors() []Interceptor {
	return c.inters.EmployeeDesignation
}

func (c *EmployeeDesignationClient) mutate(ctx context.Context, m *EmployeeDesignationMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&EmployeeDesignationCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&EmployeeDesignationUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&EmployeeDesignationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&EmployeeDesignationDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown EmployeeDesignation mutation op: %q", m.Op())
	}
}

// EmployeeGroupClient is a client for the EmployeeGroup schema.
type EmployeeGroupClient struct {
	config
}

// NewEmployeeGroupClient returns a client for the EmployeeGroup from the given config.
func NewEmployeeGroupClient(c config) *EmployeeGroupClient {
	return &EmployeeGroupClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `employeegroup.Hooks(f(g(h())))`.
func (c *EmployeeGroupClient) Use(hooks ...Hook) {
	c.hooks.EmployeeGroup = append(c.hooks.EmployeeGroup, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `employeegroup.Intercept(f(g(h())))`.
func (c *EmployeeGroupClient) Intercept(interceptors ...Interceptor) {
	c.inters.EmployeeGroup = append(c.inters.EmployeeGroup, interceptors...)
}

// Create returns a builder for creating a EmployeeGroup entity.
func (c *EmployeeGroupClient) Create() *EmployeeGroupCreate {
	mutation := newEmployeeGroupMutation(c.config, OpCreate)
	return &EmployeeGroupCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of EmployeeGroup entities.
func (c *EmployeeGroupClient) CreateBulk(builders ...*EmployeeGroupCreate) *EmployeeGroupCreateBulk {
	return &EmployeeGroupCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for EmployeeGroup.
func (c *EmployeeGroupClient) Update() *EmployeeGroupUpdate {
	mutation := newEmployeeGroupMutation(c.config, OpUpdate)
	return &EmployeeGroupUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *EmployeeGroupClient) UpdateOne(eg *EmployeeGroup) *EmployeeGroupUpdateOne {
	mutation := newEmployeeGroupMutation(c.config, OpUpdateOne, withEmployeeGroup(eg))
	return &EmployeeGroupUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *EmployeeGroupClient) UpdateOneID(id int32) *EmployeeGroupUpdateOne {
	mutation := newEmployeeGroupMutation(c.config, OpUpdateOne, withEmployeeGroupID(id))
	return &EmployeeGroupUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for EmployeeGroup.
func (c *EmployeeGroupClient) Delete() *EmployeeGroupDelete {
	mutation := newEmployeeGroupMutation(c.config, OpDelete)
	return &EmployeeGroupDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *EmployeeGroupClient) DeleteOne(eg *EmployeeGroup) *EmployeeGroupDeleteOne {
	return c.DeleteOneID(eg.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *EmployeeGroupClient) DeleteOneID(id int32) *EmployeeGroupDeleteOne {
	builder := c.Delete().Where(employeegroup.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &EmployeeGroupDeleteOne{builder}
}

// Query returns a query builder for EmployeeGroup.
func (c *EmployeeGroupClient) Query() *EmployeeGroupQuery {
	return &EmployeeGroupQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeEmployeeGroup},
		inters: c.Interceptors(),
	}
}

// Get returns a EmployeeGroup entity by its id.
func (c *EmployeeGroupClient) Get(ctx context.Context, id int32) (*EmployeeGroup, error) {
	return c.Query().Where(employeegroup.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *EmployeeGroupClient) GetX(ctx context.Context, id int32) *EmployeeGroup {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *EmployeeGroupClient) Hooks() []Hook {
	return c.hooks.EmployeeGroup
}

// Interceptors returns the client interceptors.
func (c *EmployeeGroupClient) Interceptors() []Interceptor {
	return c.inters.EmployeeGroup
}

func (c *EmployeeGroupClient) mutate(ctx context.Context, m *EmployeeGroupMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&EmployeeGroupCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&EmployeeGroupUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&EmployeeGroupUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&EmployeeGroupDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown EmployeeGroup mutation op: %q", m.Op())
	}
}

// EmployeeMasterClient is a client for the EmployeeMaster schema.
type EmployeeMasterClient struct {
	config
}

// NewEmployeeMasterClient returns a client for the EmployeeMaster from the given config.
func NewEmployeeMasterClient(c config) *EmployeeMasterClient {
	return &EmployeeMasterClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `employeemaster.Hooks(f(g(h())))`.
func (c *EmployeeMasterClient) Use(hooks ...Hook) {
	c.hooks.EmployeeMaster = append(c.hooks.EmployeeMaster, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `employeemaster.Intercept(f(g(h())))`.
func (c *EmployeeMasterClient) Intercept(interceptors ...Interceptor) {
	c.inters.EmployeeMaster = append(c.inters.EmployeeMaster, interceptors...)
}

// Create returns a builder for creating a EmployeeMaster entity.
func (c *EmployeeMasterClient) Create() *EmployeeMasterCreate {
	mutation := newEmployeeMasterMutation(c.config, OpCreate)
	return &EmployeeMasterCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of EmployeeMaster entities.
func (c *EmployeeMasterClient) CreateBulk(builders ...*EmployeeMasterCreate) *EmployeeMasterCreateBulk {
	return &EmployeeMasterCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for EmployeeMaster.
func (c *EmployeeMasterClient) Update() *EmployeeMasterUpdate {
	mutation := newEmployeeMasterMutation(c.config, OpUpdate)
	return &EmployeeMasterUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *EmployeeMasterClient) UpdateOne(em *EmployeeMaster) *EmployeeMasterUpdateOne {
	mutation := newEmployeeMasterMutation(c.config, OpUpdateOne, withEmployeeMaster(em))
	return &EmployeeMasterUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *EmployeeMasterClient) UpdateOneID(id int64) *EmployeeMasterUpdateOne {
	mutation := newEmployeeMasterMutation(c.config, OpUpdateOne, withEmployeeMasterID(id))
	return &EmployeeMasterUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for EmployeeMaster.
func (c *EmployeeMasterClient) Delete() *EmployeeMasterDelete {
	mutation := newEmployeeMasterMutation(c.config, OpDelete)
	return &EmployeeMasterDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *EmployeeMasterClient) DeleteOne(em *EmployeeMaster) *EmployeeMasterDeleteOne {
	return c.DeleteOneID(em.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *EmployeeMasterClient) DeleteOneID(id int64) *EmployeeMasterDeleteOne {
	builder := c.Delete().Where(employeemaster.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &EmployeeMasterDeleteOne{builder}
}

// Query returns a query builder for EmployeeMaster.
func (c *EmployeeMasterClient) Query() *EmployeeMasterQuery {
	return &EmployeeMasterQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeEmployeeMaster},
		inters: c.Interceptors(),
	}
}

// Get returns a EmployeeMaster entity by its id.
func (c *EmployeeMasterClient) Get(ctx context.Context, id int64) (*EmployeeMaster, error) {
	return c.Query().Where(employeemaster.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *EmployeeMasterClient) GetX(ctx context.Context, id int64) *EmployeeMaster {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUsermasterRef queries the UsermasterRef edge of a EmployeeMaster.
func (c *EmployeeMasterClient) QueryUsermasterRef(em *EmployeeMaster) *UserMasterQuery {
	query := (&UserMasterClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := em.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(employeemaster.Table, employeemaster.FieldID, id),
			sqlgraph.To(usermaster.Table, usermaster.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, employeemaster.UsermasterRefTable, employeemaster.UsermasterRefColumn),
		)
		fromV = sqlgraph.Neighbors(em.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEmpRef queries the Emp_Ref edge of a EmployeeMaster.
func (c *EmployeeMasterClient) QueryEmpRef(em *EmployeeMaster) *ExamApplicationsPSQuery {
	query := (&ExamApplicationsPSClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := em.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(employeemaster.Table, employeemaster.FieldID, id),
			sqlgraph.To(exam_applications_ps.Table, exam_applications_ps.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, employeemaster.EmpRefTable, employeemaster.EmpRefColumn),
		)
		fromV = sqlgraph.Neighbors(em.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryLogData queries the LogData edge of a EmployeeMaster.
func (c *EmployeeMasterClient) QueryLogData(em *EmployeeMaster) *LogsQuery {
	query := (&LogsClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := em.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(employeemaster.Table, employeemaster.FieldID, id),
			sqlgraph.To(logs.Table, logs.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, employeemaster.LogDataTable, employeemaster.LogDataColumn),
		)
		fromV = sqlgraph.Neighbors(em.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *EmployeeMasterClient) Hooks() []Hook {
	return c.hooks.EmployeeMaster
}

// Interceptors returns the client interceptors.
func (c *EmployeeMasterClient) Interceptors() []Interceptor {
	return c.inters.EmployeeMaster
}

func (c *EmployeeMasterClient) mutate(ctx context.Context, m *EmployeeMasterMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&EmployeeMasterCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&EmployeeMasterUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&EmployeeMasterUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&EmployeeMasterDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown EmployeeMaster mutation op: %q", m.Op())
	}
}

// EmployeePostsClient is a client for the EmployeePosts schema.
type EmployeePostsClient struct {
	config
}

// NewEmployeePostsClient returns a client for the EmployeePosts from the given config.
func NewEmployeePostsClient(c config) *EmployeePostsClient {
	return &EmployeePostsClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `employeeposts.Hooks(f(g(h())))`.
func (c *EmployeePostsClient) Use(hooks ...Hook) {
	c.hooks.EmployeePosts = append(c.hooks.EmployeePosts, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `employeeposts.Intercept(f(g(h())))`.
func (c *EmployeePostsClient) Intercept(interceptors ...Interceptor) {
	c.inters.EmployeePosts = append(c.inters.EmployeePosts, interceptors...)
}

// Create returns a builder for creating a EmployeePosts entity.
func (c *EmployeePostsClient) Create() *EmployeePostsCreate {
	mutation := newEmployeePostsMutation(c.config, OpCreate)
	return &EmployeePostsCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of EmployeePosts entities.
func (c *EmployeePostsClient) CreateBulk(builders ...*EmployeePostsCreate) *EmployeePostsCreateBulk {
	return &EmployeePostsCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for EmployeePosts.
func (c *EmployeePostsClient) Update() *EmployeePostsUpdate {
	mutation := newEmployeePostsMutation(c.config, OpUpdate)
	return &EmployeePostsUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *EmployeePostsClient) UpdateOne(ep *EmployeePosts) *EmployeePostsUpdateOne {
	mutation := newEmployeePostsMutation(c.config, OpUpdateOne, withEmployeePosts(ep))
	return &EmployeePostsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *EmployeePostsClient) UpdateOneID(id int32) *EmployeePostsUpdateOne {
	mutation := newEmployeePostsMutation(c.config, OpUpdateOne, withEmployeePostsID(id))
	return &EmployeePostsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for EmployeePosts.
func (c *EmployeePostsClient) Delete() *EmployeePostsDelete {
	mutation := newEmployeePostsMutation(c.config, OpDelete)
	return &EmployeePostsDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *EmployeePostsClient) DeleteOne(ep *EmployeePosts) *EmployeePostsDeleteOne {
	return c.DeleteOneID(ep.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *EmployeePostsClient) DeleteOneID(id int32) *EmployeePostsDeleteOne {
	builder := c.Delete().Where(employeeposts.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &EmployeePostsDeleteOne{builder}
}

// Query returns a query builder for EmployeePosts.
func (c *EmployeePostsClient) Query() *EmployeePostsQuery {
	return &EmployeePostsQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeEmployeePosts},
		inters: c.Interceptors(),
	}
}

// Get returns a EmployeePosts entity by its id.
func (c *EmployeePostsClient) Get(ctx context.Context, id int32) (*EmployeePosts, error) {
	return c.Query().Where(employeeposts.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *EmployeePostsClient) GetX(ctx context.Context, id int32) *EmployeePosts {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryEmpPosts queries the emp_posts edge of a EmployeePosts.
func (c *EmployeePostsClient) QueryEmpPosts(ep *EmployeePosts) *EmployeesQuery {
	query := (&EmployeesClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ep.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(employeeposts.Table, employeeposts.FieldID, id),
			sqlgraph.To(employees.Table, employees.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, employeeposts.EmpPostsTable, employeeposts.EmpPostsColumn),
		)
		fromV = sqlgraph.Neighbors(ep.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPostEligibility queries the PostEligibility edge of a EmployeePosts.
func (c *EmployeePostsClient) QueryPostEligibility(ep *EmployeePosts) *EligibilityMasterQuery {
	query := (&EligibilityMasterClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ep.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(employeeposts.Table, employeeposts.FieldID, id),
			sqlgraph.To(eligibilitymaster.Table, eligibilitymaster.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, employeeposts.PostEligibilityTable, employeeposts.PostEligibilityColumn),
		)
		fromV = sqlgraph.Neighbors(ep.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *EmployeePostsClient) Hooks() []Hook {
	return c.hooks.EmployeePosts
}

// Interceptors returns the client interceptors.
func (c *EmployeePostsClient) Interceptors() []Interceptor {
	return c.inters.EmployeePosts
}

func (c *EmployeePostsClient) mutate(ctx context.Context, m *EmployeePostsMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&EmployeePostsCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&EmployeePostsUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&EmployeePostsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&EmployeePostsDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown EmployeePosts mutation op: %q", m.Op())
	}
}

// EmployeesClient is a client for the Employees schema.
type EmployeesClient struct {
	config
}

// NewEmployeesClient returns a client for the Employees from the given config.
func NewEmployeesClient(c config) *EmployeesClient {
	return &EmployeesClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `employees.Hooks(f(g(h())))`.
func (c *EmployeesClient) Use(hooks ...Hook) {
	c.hooks.Employees = append(c.hooks.Employees, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `employees.Intercept(f(g(h())))`.
func (c *EmployeesClient) Intercept(interceptors ...Interceptor) {
	c.inters.Employees = append(c.inters.Employees, interceptors...)
}

// Create returns a builder for creating a Employees entity.
func (c *EmployeesClient) Create() *EmployeesCreate {
	mutation := newEmployeesMutation(c.config, OpCreate)
	return &EmployeesCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Employees entities.
func (c *EmployeesClient) CreateBulk(builders ...*EmployeesCreate) *EmployeesCreateBulk {
	return &EmployeesCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Employees.
func (c *EmployeesClient) Update() *EmployeesUpdate {
	mutation := newEmployeesMutation(c.config, OpUpdate)
	return &EmployeesUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *EmployeesClient) UpdateOne(e *Employees) *EmployeesUpdateOne {
	mutation := newEmployeesMutation(c.config, OpUpdateOne, withEmployees(e))
	return &EmployeesUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *EmployeesClient) UpdateOneID(id int32) *EmployeesUpdateOne {
	mutation := newEmployeesMutation(c.config, OpUpdateOne, withEmployeesID(id))
	return &EmployeesUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Employees.
func (c *EmployeesClient) Delete() *EmployeesDelete {
	mutation := newEmployeesMutation(c.config, OpDelete)
	return &EmployeesDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *EmployeesClient) DeleteOne(e *Employees) *EmployeesDeleteOne {
	return c.DeleteOneID(e.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *EmployeesClient) DeleteOneID(id int32) *EmployeesDeleteOne {
	builder := c.Delete().Where(employees.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &EmployeesDeleteOne{builder}
}

// Query returns a query builder for Employees.
func (c *EmployeesClient) Query() *EmployeesQuery {
	return &EmployeesQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeEmployees},
		inters: c.Interceptors(),
	}
}

// Get returns a Employees entity by its id.
func (c *EmployeesClient) Get(ctx context.Context, id int32) (*Employees, error) {
	return c.Query().Where(employees.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *EmployeesClient) GetX(ctx context.Context, id int32) *Employees {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *EmployeesClient) Hooks() []Hook {
	return c.hooks.Employees
}

// Interceptors returns the client interceptors.
func (c *EmployeesClient) Interceptors() []Interceptor {
	return c.inters.Employees
}

func (c *EmployeesClient) mutate(ctx context.Context, m *EmployeesMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&EmployeesCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&EmployeesUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&EmployeesUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&EmployeesDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Employees mutation op: %q", m.Op())
	}
}

// ErrorLogsClient is a client for the ErrorLogs schema.
type ErrorLogsClient struct {
	config
}

// NewErrorLogsClient returns a client for the ErrorLogs from the given config.
func NewErrorLogsClient(c config) *ErrorLogsClient {
	return &ErrorLogsClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `errorlogs.Hooks(f(g(h())))`.
func (c *ErrorLogsClient) Use(hooks ...Hook) {
	c.hooks.ErrorLogs = append(c.hooks.ErrorLogs, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `errorlogs.Intercept(f(g(h())))`.
func (c *ErrorLogsClient) Intercept(interceptors ...Interceptor) {
	c.inters.ErrorLogs = append(c.inters.ErrorLogs, interceptors...)
}

// Create returns a builder for creating a ErrorLogs entity.
func (c *ErrorLogsClient) Create() *ErrorLogsCreate {
	mutation := newErrorLogsMutation(c.config, OpCreate)
	return &ErrorLogsCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ErrorLogs entities.
func (c *ErrorLogsClient) CreateBulk(builders ...*ErrorLogsCreate) *ErrorLogsCreateBulk {
	return &ErrorLogsCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ErrorLogs.
func (c *ErrorLogsClient) Update() *ErrorLogsUpdate {
	mutation := newErrorLogsMutation(c.config, OpUpdate)
	return &ErrorLogsUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ErrorLogsClient) UpdateOne(el *ErrorLogs) *ErrorLogsUpdateOne {
	mutation := newErrorLogsMutation(c.config, OpUpdateOne, withErrorLogs(el))
	return &ErrorLogsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ErrorLogsClient) UpdateOneID(id int64) *ErrorLogsUpdateOne {
	mutation := newErrorLogsMutation(c.config, OpUpdateOne, withErrorLogsID(id))
	return &ErrorLogsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ErrorLogs.
func (c *ErrorLogsClient) Delete() *ErrorLogsDelete {
	mutation := newErrorLogsMutation(c.config, OpDelete)
	return &ErrorLogsDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ErrorLogsClient) DeleteOne(el *ErrorLogs) *ErrorLogsDeleteOne {
	return c.DeleteOneID(el.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ErrorLogsClient) DeleteOneID(id int64) *ErrorLogsDeleteOne {
	builder := c.Delete().Where(errorlogs.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ErrorLogsDeleteOne{builder}
}

// Query returns a query builder for ErrorLogs.
func (c *ErrorLogsClient) Query() *ErrorLogsQuery {
	return &ErrorLogsQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeErrorLogs},
		inters: c.Interceptors(),
	}
}

// Get returns a ErrorLogs entity by its id.
func (c *ErrorLogsClient) Get(ctx context.Context, id int64) (*ErrorLogs, error) {
	return c.Query().Where(errorlogs.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ErrorLogsClient) GetX(ctx context.Context, id int64) *ErrorLogs {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *ErrorLogsClient) Hooks() []Hook {
	return c.hooks.ErrorLogs
}

// Interceptors returns the client interceptors.
func (c *ErrorLogsClient) Interceptors() []Interceptor {
	return c.inters.ErrorLogs
}

func (c *ErrorLogsClient) mutate(ctx context.Context, m *ErrorLogsMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ErrorLogsCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ErrorLogsUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ErrorLogsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ErrorLogsDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ErrorLogs mutation op: %q", m.Op())
	}
}

// ExamClient is a client for the Exam schema.
type ExamClient struct {
	config
}

// NewExamClient returns a client for the Exam from the given config.
func NewExamClient(c config) *ExamClient {
	return &ExamClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `exam.Hooks(f(g(h())))`.
func (c *ExamClient) Use(hooks ...Hook) {
	c.hooks.Exam = append(c.hooks.Exam, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `exam.Intercept(f(g(h())))`.
func (c *ExamClient) Intercept(interceptors ...Interceptor) {
	c.inters.Exam = append(c.inters.Exam, interceptors...)
}

// Create returns a builder for creating a Exam entity.
func (c *ExamClient) Create() *ExamCreate {
	mutation := newExamMutation(c.config, OpCreate)
	return &ExamCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Exam entities.
func (c *ExamClient) CreateBulk(builders ...*ExamCreate) *ExamCreateBulk {
	return &ExamCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Exam.
func (c *ExamClient) Update() *ExamUpdate {
	mutation := newExamMutation(c.config, OpUpdate)
	return &ExamUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ExamClient) UpdateOne(e *Exam) *ExamUpdateOne {
	mutation := newExamMutation(c.config, OpUpdateOne, withExam(e))
	return &ExamUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ExamClient) UpdateOneID(id int32) *ExamUpdateOne {
	mutation := newExamMutation(c.config, OpUpdateOne, withExamID(id))
	return &ExamUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Exam.
func (c *ExamClient) Delete() *ExamDelete {
	mutation := newExamMutation(c.config, OpDelete)
	return &ExamDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ExamClient) DeleteOne(e *Exam) *ExamDeleteOne {
	return c.DeleteOneID(e.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ExamClient) DeleteOneID(id int32) *ExamDeleteOne {
	builder := c.Delete().Where(exam.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ExamDeleteOne{builder}
}

// Query returns a query builder for Exam.
func (c *ExamClient) Query() *ExamQuery {
	return &ExamQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeExam},
		inters: c.Interceptors(),
	}
}

// Get returns a Exam entity by its id.
func (c *ExamClient) Get(ctx context.Context, id int32) (*Exam, error) {
	return c.Query().Where(exam.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ExamClient) GetX(ctx context.Context, id int32) *Exam {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryNotifications queries the notifications edge of a Exam.
func (c *ExamClient) QueryNotifications(e *Exam) *NotificationQuery {
	query := (&NotificationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(exam.Table, exam.FieldID, id),
			sqlgraph.To(notification.Table, notification.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, exam.NotificationsTable, exam.NotificationsColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryExamsRef queries the exams_ref edge of a Exam.
func (c *ExamClient) QueryExamsRef(e *Exam) *ExamCalendarQuery {
	query := (&ExamCalendarClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(exam.Table, exam.FieldID, id),
			sqlgraph.To(examcalendar.Table, examcalendar.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, exam.ExamsRefTable, exam.ExamsRefColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPapers queries the papers edge of a Exam.
func (c *ExamClient) QueryPapers(e *Exam) *ExamPapersQuery {
	query := (&ExamPapersClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(exam.Table, exam.FieldID, id),
			sqlgraph.To(exampapers.Table, exampapers.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, exam.PapersTable, exam.PapersColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryExamEligibility queries the ExamEligibility edge of a Exam.
func (c *ExamClient) QueryExamEligibility(e *Exam) *EligibilityMasterQuery {
	query := (&EligibilityMasterClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(exam.Table, exam.FieldID, id),
			sqlgraph.To(eligibilitymaster.Table, eligibilitymaster.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, exam.ExamEligibilityTable, exam.ExamEligibilityColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryExamsType queries the exams_type edge of a Exam.
func (c *ExamClient) QueryExamsType(e *Exam) *ExamTypeQuery {
	query := (&ExamTypeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(exam.Table, exam.FieldID, id),
			sqlgraph.To(examtype.Table, examtype.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, exam.ExamsTypeTable, exam.ExamsTypeColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryExamcentresip queries the examcentresip edge of a Exam.
func (c *ExamClient) QueryExamcentresip(e *Exam) *CenterQuery {
	query := (&CenterClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(exam.Table, exam.FieldID, id),
			sqlgraph.To(center.Table, center.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, exam.ExamcentresipTable, exam.ExamcentresipColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryExamMasterRef queries the ExamMasterRef edge of a Exam.
func (c *ExamClient) QueryExamMasterRef(e *Exam) *ExamApplicationsIPQuery {
	query := (&ExamApplicationsIPClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(exam.Table, exam.FieldID, id),
			sqlgraph.To(exam_applications_ip.Table, exam_applications_ip.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, exam.ExamMasterRefTable, exam.ExamMasterRefColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryExamMasterRefPS queries the ExamMasterRefPS edge of a Exam.
func (c *ExamClient) QueryExamMasterRefPS(e *Exam) *ExamApplicationsPSQuery {
	query := (&ExamApplicationsPSClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(exam.Table, exam.FieldID, id),
			sqlgraph.To(exam_applications_ps.Table, exam_applications_ps.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, exam.ExamMasterRefPSTable, exam.ExamMasterRefPSColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryExamNotificationsRef queries the Exam_Notifications_Ref edge of a Exam.
func (c *ExamClient) QueryExamNotificationsRef(e *Exam) *ExamNotificationsQuery {
	query := (&ExamNotificationsClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(exam.Table, exam.FieldID, id),
			sqlgraph.To(examnotifications.Table, examnotifications.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, exam.ExamNotificationsRefTable, exam.ExamNotificationsRefColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryExamMasterRefGDSPA queries the ExamMasterRefGDSPA edge of a Exam.
func (c *ExamClient) QueryExamMasterRefGDSPA(e *Exam) *ExamApplicationsGDSPAQuery {
	query := (&ExamApplicationsGDSPAClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(exam.Table, exam.FieldID, id),
			sqlgraph.To(exam_applications_gdspa.Table, exam_applications_gdspa.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, exam.ExamMasterRefGDSPATable, exam.ExamMasterRefGDSPAColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryExamMasterRefGDSPM queries the ExamMasterRefGDSPM edge of a Exam.
func (c *ExamClient) QueryExamMasterRefGDSPM(e *Exam) *ExamApplicationsGDSPMQuery {
	query := (&ExamApplicationsGDSPMClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(exam.Table, exam.FieldID, id),
			sqlgraph.To(exam_applications_gdspm.Table, exam_applications_gdspm.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, exam.ExamMasterRefGDSPMTable, exam.ExamMasterRefGDSPMColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryExamMasterRefPMPA queries the ExamMasterRefPMPA edge of a Exam.
func (c *ExamClient) QueryExamMasterRefPMPA(e *Exam) *ExamApplicationsPMPAQuery {
	query := (&ExamApplicationsPMPAClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(exam.Table, exam.FieldID, id),
			sqlgraph.To(exam_applications_pmpa.Table, exam_applications_pmpa.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, exam.ExamMasterRefPMPATable, exam.ExamMasterRefPMPAColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryExamMasterRefMTSPMMG queries the ExamMasterRefMTSPMMG edge of a Exam.
func (c *ExamClient) QueryExamMasterRefMTSPMMG(e *Exam) *ExamApplicationMTSPMMGQuery {
	query := (&ExamApplicationMTSPMMGClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(exam.Table, exam.FieldID, id),
			sqlgraph.To(exam_application_mtspmmg.Table, exam_application_mtspmmg.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, exam.ExamMasterRefMTSPMMGTable, exam.ExamMasterRefMTSPMMGColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryLogData queries the LogData edge of a Exam.
func (c *ExamClient) QueryLogData(e *Exam) *LogsQuery {
	query := (&LogsClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(exam.Table, exam.FieldID, id),
			sqlgraph.To(logs.Table, logs.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, exam.LogDataTable, exam.LogDataColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ExamClient) Hooks() []Hook {
	return c.hooks.Exam
}

// Interceptors returns the client interceptors.
func (c *ExamClient) Interceptors() []Interceptor {
	return c.inters.Exam
}

func (c *ExamClient) mutate(ctx context.Context, m *ExamMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ExamCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ExamUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ExamUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ExamDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Exam mutation op: %q", m.Op())
	}
}

// ExamCalendarClient is a client for the ExamCalendar schema.
type ExamCalendarClient struct {
	config
}

// NewExamCalendarClient returns a client for the ExamCalendar from the given config.
func NewExamCalendarClient(c config) *ExamCalendarClient {
	return &ExamCalendarClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `examcalendar.Hooks(f(g(h())))`.
func (c *ExamCalendarClient) Use(hooks ...Hook) {
	c.hooks.ExamCalendar = append(c.hooks.ExamCalendar, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `examcalendar.Intercept(f(g(h())))`.
func (c *ExamCalendarClient) Intercept(interceptors ...Interceptor) {
	c.inters.ExamCalendar = append(c.inters.ExamCalendar, interceptors...)
}

// Create returns a builder for creating a ExamCalendar entity.
func (c *ExamCalendarClient) Create() *ExamCalendarCreate {
	mutation := newExamCalendarMutation(c.config, OpCreate)
	return &ExamCalendarCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ExamCalendar entities.
func (c *ExamCalendarClient) CreateBulk(builders ...*ExamCalendarCreate) *ExamCalendarCreateBulk {
	return &ExamCalendarCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ExamCalendar.
func (c *ExamCalendarClient) Update() *ExamCalendarUpdate {
	mutation := newExamCalendarMutation(c.config, OpUpdate)
	return &ExamCalendarUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ExamCalendarClient) UpdateOne(ec *ExamCalendar) *ExamCalendarUpdateOne {
	mutation := newExamCalendarMutation(c.config, OpUpdateOne, withExamCalendar(ec))
	return &ExamCalendarUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ExamCalendarClient) UpdateOneID(id int32) *ExamCalendarUpdateOne {
	mutation := newExamCalendarMutation(c.config, OpUpdateOne, withExamCalendarID(id))
	return &ExamCalendarUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ExamCalendar.
func (c *ExamCalendarClient) Delete() *ExamCalendarDelete {
	mutation := newExamCalendarMutation(c.config, OpDelete)
	return &ExamCalendarDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ExamCalendarClient) DeleteOne(ec *ExamCalendar) *ExamCalendarDeleteOne {
	return c.DeleteOneID(ec.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ExamCalendarClient) DeleteOneID(id int32) *ExamCalendarDeleteOne {
	builder := c.Delete().Where(examcalendar.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ExamCalendarDeleteOne{builder}
}

// Query returns a query builder for ExamCalendar.
func (c *ExamCalendarClient) Query() *ExamCalendarQuery {
	return &ExamCalendarQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeExamCalendar},
		inters: c.Interceptors(),
	}
}

// Get returns a ExamCalendar entity by its id.
func (c *ExamCalendarClient) Get(ctx context.Context, id int32) (*ExamCalendar, error) {
	return c.Query().Where(examcalendar.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ExamCalendarClient) GetX(ctx context.Context, id int32) *ExamCalendar {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryVcyYears queries the vcy_years edge of a ExamCalendar.
func (c *ExamCalendarClient) QueryVcyYears(ec *ExamCalendar) *VacancyYearQuery {
	query := (&VacancyYearClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ec.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(examcalendar.Table, examcalendar.FieldID, id),
			sqlgraph.To(vacancyyear.Table, vacancyyear.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, examcalendar.VcyYearsTable, examcalendar.VcyYearsColumn),
		)
		fromV = sqlgraph.Neighbors(ec.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryExams queries the exams edge of a ExamCalendar.
func (c *ExamCalendarClient) QueryExams(ec *ExamCalendar) *ExamQuery {
	query := (&ExamClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ec.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(examcalendar.Table, examcalendar.FieldID, id),
			sqlgraph.To(exam.Table, exam.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, examcalendar.ExamsTable, examcalendar.ExamsColumn),
		)
		fromV = sqlgraph.Neighbors(ec.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPapers queries the papers edge of a ExamCalendar.
func (c *ExamCalendarClient) QueryPapers(ec *ExamCalendar) *ExamPapersQuery {
	query := (&ExamPapersClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ec.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(examcalendar.Table, examcalendar.FieldID, id),
			sqlgraph.To(exampapers.Table, exampapers.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, examcalendar.PapersTable, examcalendar.PapersColumn),
		)
		fromV = sqlgraph.Neighbors(ec.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryNotifyRef queries the Notify_ref edge of a ExamCalendar.
func (c *ExamCalendarClient) QueryNotifyRef(ec *ExamCalendar) *NotificationQuery {
	query := (&NotificationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ec.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(examcalendar.Table, examcalendar.FieldID, id),
			sqlgraph.To(notification.Table, notification.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, examcalendar.NotifyRefTable, examcalendar.NotifyRefColumn),
		)
		fromV = sqlgraph.Neighbors(ec.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ExamCalendarClient) Hooks() []Hook {
	return c.hooks.ExamCalendar
}

// Interceptors returns the client interceptors.
func (c *ExamCalendarClient) Interceptors() []Interceptor {
	return c.inters.ExamCalendar
}

func (c *ExamCalendarClient) mutate(ctx context.Context, m *ExamCalendarMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ExamCalendarCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ExamCalendarUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ExamCalendarUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ExamCalendarDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ExamCalendar mutation op: %q", m.Op())
	}
}

// ExamCategoryDisabilityMappingClient is a client for the ExamCategoryDisabilityMapping schema.
type ExamCategoryDisabilityMappingClient struct {
	config
}

// NewExamCategoryDisabilityMappingClient returns a client for the ExamCategoryDisabilityMapping from the given config.
func NewExamCategoryDisabilityMappingClient(c config) *ExamCategoryDisabilityMappingClient {
	return &ExamCategoryDisabilityMappingClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `examcategorydisabilitymapping.Hooks(f(g(h())))`.
func (c *ExamCategoryDisabilityMappingClient) Use(hooks ...Hook) {
	c.hooks.ExamCategoryDisabilityMapping = append(c.hooks.ExamCategoryDisabilityMapping, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `examcategorydisabilitymapping.Intercept(f(g(h())))`.
func (c *ExamCategoryDisabilityMappingClient) Intercept(interceptors ...Interceptor) {
	c.inters.ExamCategoryDisabilityMapping = append(c.inters.ExamCategoryDisabilityMapping, interceptors...)
}

// Create returns a builder for creating a ExamCategoryDisabilityMapping entity.
func (c *ExamCategoryDisabilityMappingClient) Create() *ExamCategoryDisabilityMappingCreate {
	mutation := newExamCategoryDisabilityMappingMutation(c.config, OpCreate)
	return &ExamCategoryDisabilityMappingCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ExamCategoryDisabilityMapping entities.
func (c *ExamCategoryDisabilityMappingClient) CreateBulk(builders ...*ExamCategoryDisabilityMappingCreate) *ExamCategoryDisabilityMappingCreateBulk {
	return &ExamCategoryDisabilityMappingCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ExamCategoryDisabilityMapping.
func (c *ExamCategoryDisabilityMappingClient) Update() *ExamCategoryDisabilityMappingUpdate {
	mutation := newExamCategoryDisabilityMappingMutation(c.config, OpUpdate)
	return &ExamCategoryDisabilityMappingUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ExamCategoryDisabilityMappingClient) UpdateOne(ecdm *ExamCategoryDisabilityMapping) *ExamCategoryDisabilityMappingUpdateOne {
	mutation := newExamCategoryDisabilityMappingMutation(c.config, OpUpdateOne, withExamCategoryDisabilityMapping(ecdm))
	return &ExamCategoryDisabilityMappingUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ExamCategoryDisabilityMappingClient) UpdateOneID(id int32) *ExamCategoryDisabilityMappingUpdateOne {
	mutation := newExamCategoryDisabilityMappingMutation(c.config, OpUpdateOne, withExamCategoryDisabilityMappingID(id))
	return &ExamCategoryDisabilityMappingUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ExamCategoryDisabilityMapping.
func (c *ExamCategoryDisabilityMappingClient) Delete() *ExamCategoryDisabilityMappingDelete {
	mutation := newExamCategoryDisabilityMappingMutation(c.config, OpDelete)
	return &ExamCategoryDisabilityMappingDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ExamCategoryDisabilityMappingClient) DeleteOne(ecdm *ExamCategoryDisabilityMapping) *ExamCategoryDisabilityMappingDeleteOne {
	return c.DeleteOneID(ecdm.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ExamCategoryDisabilityMappingClient) DeleteOneID(id int32) *ExamCategoryDisabilityMappingDeleteOne {
	builder := c.Delete().Where(examcategorydisabilitymapping.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ExamCategoryDisabilityMappingDeleteOne{builder}
}

// Query returns a query builder for ExamCategoryDisabilityMapping.
func (c *ExamCategoryDisabilityMappingClient) Query() *ExamCategoryDisabilityMappingQuery {
	return &ExamCategoryDisabilityMappingQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeExamCategoryDisabilityMapping},
		inters: c.Interceptors(),
	}
}

// Get returns a ExamCategoryDisabilityMapping entity by its id.
func (c *ExamCategoryDisabilityMappingClient) Get(ctx context.Context, id int32) (*ExamCategoryDisabilityMapping, error) {
	return c.Query().Where(examcategorydisabilitymapping.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ExamCategoryDisabilityMappingClient) GetX(ctx context.Context, id int32) *ExamCategoryDisabilityMapping {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *ExamCategoryDisabilityMappingClient) Hooks() []Hook {
	return c.hooks.ExamCategoryDisabilityMapping
}

// Interceptors returns the client interceptors.
func (c *ExamCategoryDisabilityMappingClient) Interceptors() []Interceptor {
	return c.inters.ExamCategoryDisabilityMapping
}

func (c *ExamCategoryDisabilityMappingClient) mutate(ctx context.Context, m *ExamCategoryDisabilityMappingMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ExamCategoryDisabilityMappingCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ExamCategoryDisabilityMappingUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ExamCategoryDisabilityMappingUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ExamCategoryDisabilityMappingDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ExamCategoryDisabilityMapping mutation op: %q", m.Op())
	}
}

// ExamCenterHallClient is a client for the ExamCenterHall schema.
type ExamCenterHallClient struct {
	config
}

// NewExamCenterHallClient returns a client for the ExamCenterHall from the given config.
func NewExamCenterHallClient(c config) *ExamCenterHallClient {
	return &ExamCenterHallClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `examcenterhall.Hooks(f(g(h())))`.
func (c *ExamCenterHallClient) Use(hooks ...Hook) {
	c.hooks.ExamCenterHall = append(c.hooks.ExamCenterHall, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `examcenterhall.Intercept(f(g(h())))`.
func (c *ExamCenterHallClient) Intercept(interceptors ...Interceptor) {
	c.inters.ExamCenterHall = append(c.inters.ExamCenterHall, interceptors...)
}

// Create returns a builder for creating a ExamCenterHall entity.
func (c *ExamCenterHallClient) Create() *ExamCenterHallCreate {
	mutation := newExamCenterHallMutation(c.config, OpCreate)
	return &ExamCenterHallCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ExamCenterHall entities.
func (c *ExamCenterHallClient) CreateBulk(builders ...*ExamCenterHallCreate) *ExamCenterHallCreateBulk {
	return &ExamCenterHallCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ExamCenterHall.
func (c *ExamCenterHallClient) Update() *ExamCenterHallUpdate {
	mutation := newExamCenterHallMutation(c.config, OpUpdate)
	return &ExamCenterHallUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ExamCenterHallClient) UpdateOne(ech *ExamCenterHall) *ExamCenterHallUpdateOne {
	mutation := newExamCenterHallMutation(c.config, OpUpdateOne, withExamCenterHall(ech))
	return &ExamCenterHallUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ExamCenterHallClient) UpdateOneID(id int32) *ExamCenterHallUpdateOne {
	mutation := newExamCenterHallMutation(c.config, OpUpdateOne, withExamCenterHallID(id))
	return &ExamCenterHallUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ExamCenterHall.
func (c *ExamCenterHallClient) Delete() *ExamCenterHallDelete {
	mutation := newExamCenterHallMutation(c.config, OpDelete)
	return &ExamCenterHallDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ExamCenterHallClient) DeleteOne(ech *ExamCenterHall) *ExamCenterHallDeleteOne {
	return c.DeleteOneID(ech.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ExamCenterHallClient) DeleteOneID(id int32) *ExamCenterHallDeleteOne {
	builder := c.Delete().Where(examcenterhall.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ExamCenterHallDeleteOne{builder}
}

// Query returns a query builder for ExamCenterHall.
func (c *ExamCenterHallClient) Query() *ExamCenterHallQuery {
	return &ExamCenterHallQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeExamCenterHall},
		inters: c.Interceptors(),
	}
}

// Get returns a ExamCenterHall entity by its id.
func (c *ExamCenterHallClient) Get(ctx context.Context, id int32) (*ExamCenterHall, error) {
	return c.Query().Where(examcenterhall.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ExamCenterHallClient) GetX(ctx context.Context, id int32) *ExamCenterHall {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryExaCenterHall queries the ExaCenterHall edge of a ExamCenterHall.
func (c *ExamCenterHallClient) QueryExaCenterHall(ech *ExamCenterHall) *CenterQuery {
	query := (&CenterClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ech.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(examcenterhall.Table, examcenterhall.FieldID, id),
			sqlgraph.To(center.Table, center.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, examcenterhall.ExaCenterHallTable, examcenterhall.ExaCenterHallColumn),
		)
		fromV = sqlgraph.Neighbors(ech.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ExamCenterHallClient) Hooks() []Hook {
	return c.hooks.ExamCenterHall
}

// Interceptors returns the client interceptors.
func (c *ExamCenterHallClient) Interceptors() []Interceptor {
	return c.inters.ExamCenterHall
}

func (c *ExamCenterHallClient) mutate(ctx context.Context, m *ExamCenterHallMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ExamCenterHallCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ExamCenterHallUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ExamCenterHallUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ExamCenterHallDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ExamCenterHall mutation op: %q", m.Op())
	}
}

// ExamCityCenterClient is a client for the ExamCityCenter schema.
type ExamCityCenterClient struct {
	config
}

// NewExamCityCenterClient returns a client for the ExamCityCenter from the given config.
func NewExamCityCenterClient(c config) *ExamCityCenterClient {
	return &ExamCityCenterClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `examcitycenter.Hooks(f(g(h())))`.
func (c *ExamCityCenterClient) Use(hooks ...Hook) {
	c.hooks.ExamCityCenter = append(c.hooks.ExamCityCenter, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `examcitycenter.Intercept(f(g(h())))`.
func (c *ExamCityCenterClient) Intercept(interceptors ...Interceptor) {
	c.inters.ExamCityCenter = append(c.inters.ExamCityCenter, interceptors...)
}

// Create returns a builder for creating a ExamCityCenter entity.
func (c *ExamCityCenterClient) Create() *ExamCityCenterCreate {
	mutation := newExamCityCenterMutation(c.config, OpCreate)
	return &ExamCityCenterCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ExamCityCenter entities.
func (c *ExamCityCenterClient) CreateBulk(builders ...*ExamCityCenterCreate) *ExamCityCenterCreateBulk {
	return &ExamCityCenterCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ExamCityCenter.
func (c *ExamCityCenterClient) Update() *ExamCityCenterUpdate {
	mutation := newExamCityCenterMutation(c.config, OpUpdate)
	return &ExamCityCenterUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ExamCityCenterClient) UpdateOne(ecc *ExamCityCenter) *ExamCityCenterUpdateOne {
	mutation := newExamCityCenterMutation(c.config, OpUpdateOne, withExamCityCenter(ecc))
	return &ExamCityCenterUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ExamCityCenterClient) UpdateOneID(id int32) *ExamCityCenterUpdateOne {
	mutation := newExamCityCenterMutation(c.config, OpUpdateOne, withExamCityCenterID(id))
	return &ExamCityCenterUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ExamCityCenter.
func (c *ExamCityCenterClient) Delete() *ExamCityCenterDelete {
	mutation := newExamCityCenterMutation(c.config, OpDelete)
	return &ExamCityCenterDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ExamCityCenterClient) DeleteOne(ecc *ExamCityCenter) *ExamCityCenterDeleteOne {
	return c.DeleteOneID(ecc.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ExamCityCenterClient) DeleteOneID(id int32) *ExamCityCenterDeleteOne {
	builder := c.Delete().Where(examcitycenter.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ExamCityCenterDeleteOne{builder}
}

// Query returns a query builder for ExamCityCenter.
func (c *ExamCityCenterClient) Query() *ExamCityCenterQuery {
	return &ExamCityCenterQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeExamCityCenter},
		inters: c.Interceptors(),
	}
}

// Get returns a ExamCityCenter entity by its id.
func (c *ExamCityCenterClient) Get(ctx context.Context, id int32) (*ExamCityCenter, error) {
	return c.Query().Where(examcitycenter.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ExamCityCenterClient) GetX(ctx context.Context, id int32) *ExamCityCenter {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryExamCityCenterRef queries the ExamCityCenterRef edge of a ExamCityCenter.
func (c *ExamCityCenterClient) QueryExamCityCenterRef(ecc *ExamCityCenter) *ExamApplicationsIPQuery {
	query := (&ExamApplicationsIPClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ecc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(examcitycenter.Table, examcitycenter.FieldID, id),
			sqlgraph.To(exam_applications_ip.Table, exam_applications_ip.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, examcitycenter.ExamCityCenterRefTable, examcitycenter.ExamCityCenterRefColumn),
		)
		fromV = sqlgraph.Neighbors(ecc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryExamCityCenterMTSPMMGRef queries the ExamCityCenterMTSPMMGRef edge of a ExamCityCenter.
func (c *ExamCityCenterClient) QueryExamCityCenterMTSPMMGRef(ecc *ExamCityCenter) *ExamApplicationMTSPMMGQuery {
	query := (&ExamApplicationMTSPMMGClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ecc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(examcitycenter.Table, examcitycenter.FieldID, id),
			sqlgraph.To(exam_application_mtspmmg.Table, exam_application_mtspmmg.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, examcitycenter.ExamCityCenterMTSPMMGRefTable, examcitycenter.ExamCityCenterMTSPMMGRefColumn),
		)
		fromV = sqlgraph.Neighbors(ecc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryExamCityCenterGDSPARef queries the ExamCityCenterGDSPARef edge of a ExamCityCenter.
func (c *ExamCityCenterClient) QueryExamCityCenterGDSPARef(ecc *ExamCityCenter) *ExamApplicationsGDSPAQuery {
	query := (&ExamApplicationsGDSPAClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ecc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(examcitycenter.Table, examcitycenter.FieldID, id),
			sqlgraph.To(exam_applications_gdspa.Table, exam_applications_gdspa.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, examcitycenter.ExamCityCenterGDSPARefTable, examcitycenter.ExamCityCenterGDSPARefColumn),
		)
		fromV = sqlgraph.Neighbors(ecc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryExamCityCenterGDSPMRef queries the ExamCityCenterGDSPMRef edge of a ExamCityCenter.
func (c *ExamCityCenterClient) QueryExamCityCenterGDSPMRef(ecc *ExamCityCenter) *ExamApplicationsGDSPMQuery {
	query := (&ExamApplicationsGDSPMClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ecc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(examcitycenter.Table, examcitycenter.FieldID, id),
			sqlgraph.To(exam_applications_gdspm.Table, exam_applications_gdspm.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, examcitycenter.ExamCityCenterGDSPMRefTable, examcitycenter.ExamCityCenterGDSPMRefColumn),
		)
		fromV = sqlgraph.Neighbors(ecc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryExamCityCenterPMPARef queries the ExamCityCenterPMPARef edge of a ExamCityCenter.
func (c *ExamCityCenterClient) QueryExamCityCenterPMPARef(ecc *ExamCityCenter) *ExamApplicationsPMPAQuery {
	query := (&ExamApplicationsPMPAClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ecc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(examcitycenter.Table, examcitycenter.FieldID, id),
			sqlgraph.To(exam_applications_pmpa.Table, exam_applications_pmpa.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, examcitycenter.ExamCityCenterPMPARefTable, examcitycenter.ExamCityCenterPMPARefColumn),
		)
		fromV = sqlgraph.Neighbors(ecc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryExamCityCenterPSRef queries the ExamCityCenterPSRef edge of a ExamCityCenter.
func (c *ExamCityCenterClient) QueryExamCityCenterPSRef(ecc *ExamCityCenter) *ExamApplicationsPSQuery {
	query := (&ExamApplicationsPSClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ecc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(examcitycenter.Table, examcitycenter.FieldID, id),
			sqlgraph.To(exam_applications_ps.Table, exam_applications_ps.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, examcitycenter.ExamCityCenterPSRefTable, examcitycenter.ExamCityCenterPSRefColumn),
		)
		fromV = sqlgraph.Neighbors(ecc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ExamCityCenterClient) Hooks() []Hook {
	return c.hooks.ExamCityCenter
}

// Interceptors returns the client interceptors.
func (c *ExamCityCenterClient) Interceptors() []Interceptor {
	return c.inters.ExamCityCenter
}

func (c *ExamCityCenterClient) mutate(ctx context.Context, m *ExamCityCenterMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ExamCityCenterCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ExamCityCenterUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ExamCityCenterUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ExamCityCenterDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ExamCityCenter mutation op: %q", m.Op())
	}
}

// ExamNotificationsClient is a client for the ExamNotifications schema.
type ExamNotificationsClient struct {
	config
}

// NewExamNotificationsClient returns a client for the ExamNotifications from the given config.
func NewExamNotificationsClient(c config) *ExamNotificationsClient {
	return &ExamNotificationsClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `examnotifications.Hooks(f(g(h())))`.
func (c *ExamNotificationsClient) Use(hooks ...Hook) {
	c.hooks.ExamNotifications = append(c.hooks.ExamNotifications, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `examnotifications.Intercept(f(g(h())))`.
func (c *ExamNotificationsClient) Intercept(interceptors ...Interceptor) {
	c.inters.ExamNotifications = append(c.inters.ExamNotifications, interceptors...)
}

// Create returns a builder for creating a ExamNotifications entity.
func (c *ExamNotificationsClient) Create() *ExamNotificationsCreate {
	mutation := newExamNotificationsMutation(c.config, OpCreate)
	return &ExamNotificationsCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ExamNotifications entities.
func (c *ExamNotificationsClient) CreateBulk(builders ...*ExamNotificationsCreate) *ExamNotificationsCreateBulk {
	return &ExamNotificationsCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ExamNotifications.
func (c *ExamNotificationsClient) Update() *ExamNotificationsUpdate {
	mutation := newExamNotificationsMutation(c.config, OpUpdate)
	return &ExamNotificationsUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ExamNotificationsClient) UpdateOne(en *ExamNotifications) *ExamNotificationsUpdateOne {
	mutation := newExamNotificationsMutation(c.config, OpUpdateOne, withExamNotifications(en))
	return &ExamNotificationsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ExamNotificationsClient) UpdateOneID(id int32) *ExamNotificationsUpdateOne {
	mutation := newExamNotificationsMutation(c.config, OpUpdateOne, withExamNotificationsID(id))
	return &ExamNotificationsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ExamNotifications.
func (c *ExamNotificationsClient) Delete() *ExamNotificationsDelete {
	mutation := newExamNotificationsMutation(c.config, OpDelete)
	return &ExamNotificationsDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ExamNotificationsClient) DeleteOne(en *ExamNotifications) *ExamNotificationsDeleteOne {
	return c.DeleteOneID(en.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ExamNotificationsClient) DeleteOneID(id int32) *ExamNotificationsDeleteOne {
	builder := c.Delete().Where(examnotifications.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ExamNotificationsDeleteOne{builder}
}

// Query returns a query builder for ExamNotifications.
func (c *ExamNotificationsClient) Query() *ExamNotificationsQuery {
	return &ExamNotificationsQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeExamNotifications},
		inters: c.Interceptors(),
	}
}

// Get returns a ExamNotifications entity by its id.
func (c *ExamNotificationsClient) Get(ctx context.Context, id int32) (*ExamNotifications, error) {
	return c.Query().Where(examnotifications.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ExamNotificationsClient) GetX(ctx context.Context, id int32) *ExamNotifications {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUserIDref queries the UserIDref edge of a ExamNotifications.
func (c *ExamNotificationsClient) QueryUserIDref(en *ExamNotifications) *UserMasterQuery {
	query := (&UserMasterClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := en.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(examnotifications.Table, examnotifications.FieldID, id),
			sqlgraph.To(usermaster.Table, usermaster.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, examnotifications.UserIDrefTable, examnotifications.UserIDrefColumn),
		)
		fromV = sqlgraph.Neighbors(en.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryLogData queries the LogData edge of a ExamNotifications.
func (c *ExamNotificationsClient) QueryLogData(en *ExamNotifications) *LogsQuery {
	query := (&LogsClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := en.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(examnotifications.Table, examnotifications.FieldID, id),
			sqlgraph.To(logs.Table, logs.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, examnotifications.LogDataTable, examnotifications.LogDataColumn),
		)
		fromV = sqlgraph.Neighbors(en.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ExamNotificationsClient) Hooks() []Hook {
	return c.hooks.ExamNotifications
}

// Interceptors returns the client interceptors.
func (c *ExamNotificationsClient) Interceptors() []Interceptor {
	return c.inters.ExamNotifications
}

func (c *ExamNotificationsClient) mutate(ctx context.Context, m *ExamNotificationsMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ExamNotificationsCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ExamNotificationsUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ExamNotificationsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ExamNotificationsDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ExamNotifications mutation op: %q", m.Op())
	}
}

// ExamPapersClient is a client for the ExamPapers schema.
type ExamPapersClient struct {
	config
}

// NewExamPapersClient returns a client for the ExamPapers from the given config.
func NewExamPapersClient(c config) *ExamPapersClient {
	return &ExamPapersClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `exampapers.Hooks(f(g(h())))`.
func (c *ExamPapersClient) Use(hooks ...Hook) {
	c.hooks.ExamPapers = append(c.hooks.ExamPapers, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `exampapers.Intercept(f(g(h())))`.
func (c *ExamPapersClient) Intercept(interceptors ...Interceptor) {
	c.inters.ExamPapers = append(c.inters.ExamPapers, interceptors...)
}

// Create returns a builder for creating a ExamPapers entity.
func (c *ExamPapersClient) Create() *ExamPapersCreate {
	mutation := newExamPapersMutation(c.config, OpCreate)
	return &ExamPapersCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ExamPapers entities.
func (c *ExamPapersClient) CreateBulk(builders ...*ExamPapersCreate) *ExamPapersCreateBulk {
	return &ExamPapersCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ExamPapers.
func (c *ExamPapersClient) Update() *ExamPapersUpdate {
	mutation := newExamPapersMutation(c.config, OpUpdate)
	return &ExamPapersUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ExamPapersClient) UpdateOne(ep *ExamPapers) *ExamPapersUpdateOne {
	mutation := newExamPapersMutation(c.config, OpUpdateOne, withExamPapers(ep))
	return &ExamPapersUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ExamPapersClient) UpdateOneID(id int32) *ExamPapersUpdateOne {
	mutation := newExamPapersMutation(c.config, OpUpdateOne, withExamPapersID(id))
	return &ExamPapersUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ExamPapers.
func (c *ExamPapersClient) Delete() *ExamPapersDelete {
	mutation := newExamPapersMutation(c.config, OpDelete)
	return &ExamPapersDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ExamPapersClient) DeleteOne(ep *ExamPapers) *ExamPapersDeleteOne {
	return c.DeleteOneID(ep.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ExamPapersClient) DeleteOneID(id int32) *ExamPapersDeleteOne {
	builder := c.Delete().Where(exampapers.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ExamPapersDeleteOne{builder}
}

// Query returns a query builder for ExamPapers.
func (c *ExamPapersClient) Query() *ExamPapersQuery {
	return &ExamPapersQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeExamPapers},
		inters: c.Interceptors(),
	}
}

// Get returns a ExamPapers entity by its id.
func (c *ExamPapersClient) Get(ctx context.Context, id int32) (*ExamPapers, error) {
	return c.Query().Where(exampapers.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ExamPapersClient) GetX(ctx context.Context, id int32) *ExamPapers {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCenters queries the centers edge of a ExamPapers.
func (c *ExamPapersClient) QueryCenters(ep *ExamPapers) *CenterQuery {
	query := (&CenterClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ep.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(exampapers.Table, exampapers.FieldID, id),
			sqlgraph.To(center.Table, center.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, exampapers.CentersTable, exampapers.CentersColumn),
		)
		fromV = sqlgraph.Neighbors(ep.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryExampapersTypes queries the exampapers_types edge of a ExamPapers.
func (c *ExamPapersClient) QueryExampapersTypes(ep *ExamPapers) *PaperTypesQuery {
	query := (&PaperTypesClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ep.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(exampapers.Table, exampapers.FieldID, id),
			sqlgraph.To(papertypes.Table, papertypes.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, exampapers.ExampapersTypesTable, exampapers.ExampapersTypesColumn),
		)
		fromV = sqlgraph.Neighbors(ep.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPapersRef queries the papers_ref edge of a ExamPapers.
func (c *ExamPapersClient) QueryPapersRef(ep *ExamPapers) *ExamCalendarQuery {
	query := (&ExamCalendarClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ep.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(exampapers.Table, exampapers.FieldID, id),
			sqlgraph.To(examcalendar.Table, examcalendar.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, exampapers.PapersRefTable, exampapers.PapersRefColumn),
		)
		fromV = sqlgraph.Neighbors(ep.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryExamPaperEligibility queries the ExamPaperEligibility edge of a ExamPapers.
func (c *ExamPapersClient) QueryExamPaperEligibility(ep *ExamPapers) *EligibilityMasterQuery {
	query := (&EligibilityMasterClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ep.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(exampapers.Table, exampapers.FieldID, id),
			sqlgraph.To(eligibilitymaster.Table, eligibilitymaster.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, exampapers.ExamPaperEligibilityTable, exampapers.ExamPaperEligibilityColumn),
		)
		fromV = sqlgraph.Neighbors(ep.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDisRef queries the dis_ref edge of a ExamPapers.
func (c *ExamPapersClient) QueryDisRef(ep *ExamPapers) *DisabilityQuery {
	query := (&DisabilityClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ep.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(exampapers.Table, exampapers.FieldID, id),
			sqlgraph.To(disability.Table, disability.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, exampapers.DisRefTable, exampapers.DisRefColumn),
		)
		fromV = sqlgraph.Neighbors(ep.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ExamPapersClient) Hooks() []Hook {
	return c.hooks.ExamPapers
}

// Interceptors returns the client interceptors.
func (c *ExamPapersClient) Interceptors() []Interceptor {
	return c.inters.ExamPapers
}

func (c *ExamPapersClient) mutate(ctx context.Context, m *ExamPapersMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ExamPapersCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ExamPapersUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ExamPapersUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ExamPapersDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ExamPapers mutation op: %q", m.Op())
	}
}

// ExamPostMappingClient is a client for the ExamPostMapping schema.
type ExamPostMappingClient struct {
	config
}

// NewExamPostMappingClient returns a client for the ExamPostMapping from the given config.
func NewExamPostMappingClient(c config) *ExamPostMappingClient {
	return &ExamPostMappingClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `exampostmapping.Hooks(f(g(h())))`.
func (c *ExamPostMappingClient) Use(hooks ...Hook) {
	c.hooks.ExamPostMapping = append(c.hooks.ExamPostMapping, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `exampostmapping.Intercept(f(g(h())))`.
func (c *ExamPostMappingClient) Intercept(interceptors ...Interceptor) {
	c.inters.ExamPostMapping = append(c.inters.ExamPostMapping, interceptors...)
}

// Create returns a builder for creating a ExamPostMapping entity.
func (c *ExamPostMappingClient) Create() *ExamPostMappingCreate {
	mutation := newExamPostMappingMutation(c.config, OpCreate)
	return &ExamPostMappingCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ExamPostMapping entities.
func (c *ExamPostMappingClient) CreateBulk(builders ...*ExamPostMappingCreate) *ExamPostMappingCreateBulk {
	return &ExamPostMappingCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ExamPostMapping.
func (c *ExamPostMappingClient) Update() *ExamPostMappingUpdate {
	mutation := newExamPostMappingMutation(c.config, OpUpdate)
	return &ExamPostMappingUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ExamPostMappingClient) UpdateOne(epm *ExamPostMapping) *ExamPostMappingUpdateOne {
	mutation := newExamPostMappingMutation(c.config, OpUpdateOne, withExamPostMapping(epm))
	return &ExamPostMappingUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ExamPostMappingClient) UpdateOneID(id int) *ExamPostMappingUpdateOne {
	mutation := newExamPostMappingMutation(c.config, OpUpdateOne, withExamPostMappingID(id))
	return &ExamPostMappingUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ExamPostMapping.
func (c *ExamPostMappingClient) Delete() *ExamPostMappingDelete {
	mutation := newExamPostMappingMutation(c.config, OpDelete)
	return &ExamPostMappingDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ExamPostMappingClient) DeleteOne(epm *ExamPostMapping) *ExamPostMappingDeleteOne {
	return c.DeleteOneID(epm.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ExamPostMappingClient) DeleteOneID(id int) *ExamPostMappingDeleteOne {
	builder := c.Delete().Where(exampostmapping.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ExamPostMappingDeleteOne{builder}
}

// Query returns a query builder for ExamPostMapping.
func (c *ExamPostMappingClient) Query() *ExamPostMappingQuery {
	return &ExamPostMappingQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeExamPostMapping},
		inters: c.Interceptors(),
	}
}

// Get returns a ExamPostMapping entity by its id.
func (c *ExamPostMappingClient) Get(ctx context.Context, id int) (*ExamPostMapping, error) {
	return c.Query().Where(exampostmapping.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ExamPostMappingClient) GetX(ctx context.Context, id int) *ExamPostMapping {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *ExamPostMappingClient) Hooks() []Hook {
	return c.hooks.ExamPostMapping
}

// Interceptors returns the client interceptors.
func (c *ExamPostMappingClient) Interceptors() []Interceptor {
	return c.inters.ExamPostMapping
}

func (c *ExamPostMappingClient) mutate(ctx context.Context, m *ExamPostMappingMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ExamPostMappingCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ExamPostMappingUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ExamPostMappingUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ExamPostMappingDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ExamPostMapping mutation op: %q", m.Op())
	}
}

// ExamTypeClient is a client for the ExamType schema.
type ExamTypeClient struct {
	config
}

// NewExamTypeClient returns a client for the ExamType from the given config.
func NewExamTypeClient(c config) *ExamTypeClient {
	return &ExamTypeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `examtype.Hooks(f(g(h())))`.
func (c *ExamTypeClient) Use(hooks ...Hook) {
	c.hooks.ExamType = append(c.hooks.ExamType, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `examtype.Intercept(f(g(h())))`.
func (c *ExamTypeClient) Intercept(interceptors ...Interceptor) {
	c.inters.ExamType = append(c.inters.ExamType, interceptors...)
}

// Create returns a builder for creating a ExamType entity.
func (c *ExamTypeClient) Create() *ExamTypeCreate {
	mutation := newExamTypeMutation(c.config, OpCreate)
	return &ExamTypeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ExamType entities.
func (c *ExamTypeClient) CreateBulk(builders ...*ExamTypeCreate) *ExamTypeCreateBulk {
	return &ExamTypeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ExamType.
func (c *ExamTypeClient) Update() *ExamTypeUpdate {
	mutation := newExamTypeMutation(c.config, OpUpdate)
	return &ExamTypeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ExamTypeClient) UpdateOne(et *ExamType) *ExamTypeUpdateOne {
	mutation := newExamTypeMutation(c.config, OpUpdateOne, withExamType(et))
	return &ExamTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ExamTypeClient) UpdateOneID(id int32) *ExamTypeUpdateOne {
	mutation := newExamTypeMutation(c.config, OpUpdateOne, withExamTypeID(id))
	return &ExamTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ExamType.
func (c *ExamTypeClient) Delete() *ExamTypeDelete {
	mutation := newExamTypeMutation(c.config, OpDelete)
	return &ExamTypeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ExamTypeClient) DeleteOne(et *ExamType) *ExamTypeDeleteOne {
	return c.DeleteOneID(et.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ExamTypeClient) DeleteOneID(id int32) *ExamTypeDeleteOne {
	builder := c.Delete().Where(examtype.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ExamTypeDeleteOne{builder}
}

// Query returns a query builder for ExamType.
func (c *ExamTypeClient) Query() *ExamTypeQuery {
	return &ExamTypeQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeExamType},
		inters: c.Interceptors(),
	}
}

// Get returns a ExamType entity by its id.
func (c *ExamTypeClient) Get(ctx context.Context, id int32) (*ExamType, error) {
	return c.Query().Where(examtype.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ExamTypeClient) GetX(ctx context.Context, id int32) *ExamType {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryExam queries the exam edge of a ExamType.
func (c *ExamTypeClient) QueryExam(et *ExamType) *ExamQuery {
	query := (&ExamClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := et.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(examtype.Table, examtype.FieldID, id),
			sqlgraph.To(exam.Table, exam.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, examtype.ExamTable, examtype.ExamColumn),
		)
		fromV = sqlgraph.Neighbors(et.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ExamTypeClient) Hooks() []Hook {
	return c.hooks.ExamType
}

// Interceptors returns the client interceptors.
func (c *ExamTypeClient) Interceptors() []Interceptor {
	return c.inters.ExamType
}

func (c *ExamTypeClient) mutate(ctx context.Context, m *ExamTypeMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ExamTypeCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ExamTypeUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ExamTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ExamTypeDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ExamType mutation op: %q", m.Op())
	}
}

// ExamApplicationMTSPMMGClient is a client for the Exam_Application_MTSPMMG schema.
type ExamApplicationMTSPMMGClient struct {
	config
}

// NewExamApplicationMTSPMMGClient returns a client for the Exam_Application_MTSPMMG from the given config.
func NewExamApplicationMTSPMMGClient(c config) *ExamApplicationMTSPMMGClient {
	return &ExamApplicationMTSPMMGClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `exam_application_mtspmmg.Hooks(f(g(h())))`.
func (c *ExamApplicationMTSPMMGClient) Use(hooks ...Hook) {
	c.hooks.Exam_Application_MTSPMMG = append(c.hooks.Exam_Application_MTSPMMG, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `exam_application_mtspmmg.Intercept(f(g(h())))`.
func (c *ExamApplicationMTSPMMGClient) Intercept(interceptors ...Interceptor) {
	c.inters.Exam_Application_MTSPMMG = append(c.inters.Exam_Application_MTSPMMG, interceptors...)
}

// Create returns a builder for creating a Exam_Application_MTSPMMG entity.
func (c *ExamApplicationMTSPMMGClient) Create() *ExamApplicationMTSPMMGCreate {
	mutation := newExamApplicationMTSPMMGMutation(c.config, OpCreate)
	return &ExamApplicationMTSPMMGCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Exam_Application_MTSPMMG entities.
func (c *ExamApplicationMTSPMMGClient) CreateBulk(builders ...*ExamApplicationMTSPMMGCreate) *ExamApplicationMTSPMMGCreateBulk {
	return &ExamApplicationMTSPMMGCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Exam_Application_MTSPMMG.
func (c *ExamApplicationMTSPMMGClient) Update() *ExamApplicationMTSPMMGUpdate {
	mutation := newExamApplicationMTSPMMGMutation(c.config, OpUpdate)
	return &ExamApplicationMTSPMMGUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ExamApplicationMTSPMMGClient) UpdateOne(eam *Exam_Application_MTSPMMG) *ExamApplicationMTSPMMGUpdateOne {
	mutation := newExamApplicationMTSPMMGMutation(c.config, OpUpdateOne, withExam_Application_MTSPMMG(eam))
	return &ExamApplicationMTSPMMGUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ExamApplicationMTSPMMGClient) UpdateOneID(id int64) *ExamApplicationMTSPMMGUpdateOne {
	mutation := newExamApplicationMTSPMMGMutation(c.config, OpUpdateOne, withExam_Application_MTSPMMGID(id))
	return &ExamApplicationMTSPMMGUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Exam_Application_MTSPMMG.
func (c *ExamApplicationMTSPMMGClient) Delete() *ExamApplicationMTSPMMGDelete {
	mutation := newExamApplicationMTSPMMGMutation(c.config, OpDelete)
	return &ExamApplicationMTSPMMGDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ExamApplicationMTSPMMGClient) DeleteOne(eam *Exam_Application_MTSPMMG) *ExamApplicationMTSPMMGDeleteOne {
	return c.DeleteOneID(eam.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ExamApplicationMTSPMMGClient) DeleteOneID(id int64) *ExamApplicationMTSPMMGDeleteOne {
	builder := c.Delete().Where(exam_application_mtspmmg.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ExamApplicationMTSPMMGDeleteOne{builder}
}

// Query returns a query builder for Exam_Application_MTSPMMG.
func (c *ExamApplicationMTSPMMGClient) Query() *ExamApplicationMTSPMMGQuery {
	return &ExamApplicationMTSPMMGQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeExamApplicationMTSPMMG},
		inters: c.Interceptors(),
	}
}

// Get returns a Exam_Application_MTSPMMG entity by its id.
func (c *ExamApplicationMTSPMMGClient) Get(ctx context.Context, id int64) (*Exam_Application_MTSPMMG, error) {
	return c.Query().Where(exam_application_mtspmmg.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ExamApplicationMTSPMMGClient) GetX(ctx context.Context, id int64) *Exam_Application_MTSPMMG {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUsersMTSPMMGRef queries the UsersMTSPMMGRef edge of a Exam_Application_MTSPMMG.
func (c *ExamApplicationMTSPMMGClient) QueryUsersMTSPMMGRef(eam *Exam_Application_MTSPMMG) *UserMasterQuery {
	query := (&UserMasterClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := eam.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(exam_application_mtspmmg.Table, exam_application_mtspmmg.FieldID, id),
			sqlgraph.To(usermaster.Table, usermaster.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, exam_application_mtspmmg.UsersMTSPMMGRefTable, exam_application_mtspmmg.UsersMTSPMMGRefColumn),
		)
		fromV = sqlgraph.Neighbors(eam.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRoleusers queries the roleusers edge of a Exam_Application_MTSPMMG.
func (c *ExamApplicationMTSPMMGClient) QueryRoleusers(eam *Exam_Application_MTSPMMG) *RoleMasterQuery {
	query := (&RoleMasterClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := eam.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(exam_application_mtspmmg.Table, exam_application_mtspmmg.FieldID, id),
			sqlgraph.To(rolemaster.Table, rolemaster.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, exam_application_mtspmmg.RoleusersTable, exam_application_mtspmmg.RoleusersColumn),
		)
		fromV = sqlgraph.Neighbors(eam.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCadrePrefRef queries the CadrePref_Ref edge of a Exam_Application_MTSPMMG.
func (c *ExamApplicationMTSPMMGClient) QueryCadrePrefRef(eam *Exam_Application_MTSPMMG) *CadreChoiceMTSPMMGQuery {
	query := (&CadreChoiceMTSPMMGClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := eam.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(exam_application_mtspmmg.Table, exam_application_mtspmmg.FieldID, id),
			sqlgraph.To(cadre_choice_mtspmmg.Table, cadre_choice_mtspmmg.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, exam_application_mtspmmg.CadrePrefRefTable, exam_application_mtspmmg.CadrePrefRefColumn),
		)
		fromV = sqlgraph.Neighbors(eam.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCirclePrefRefMTSPMMG queries the CirclePrefRefMTSPMMG edge of a Exam_Application_MTSPMMG.
func (c *ExamApplicationMTSPMMGClient) QueryCirclePrefRefMTSPMMG(eam *Exam_Application_MTSPMMG) *DivisionChoiceMTSPMMGQuery {
	query := (&DivisionChoiceMTSPMMGClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := eam.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(exam_application_mtspmmg.Table, exam_application_mtspmmg.FieldID, id),
			sqlgraph.To(division_choice_mtspmmg.Table, division_choice_mtspmmg.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, exam_application_mtspmmg.CirclePrefRefMTSPMMGTable, exam_application_mtspmmg.CirclePrefRefMTSPMMGColumn),
		)
		fromV = sqlgraph.Neighbors(eam.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryMTSPMMGApplicationsRef queries the MTSPMMGApplicationsRef edge of a Exam_Application_MTSPMMG.
func (c *ExamApplicationMTSPMMGClient) QueryMTSPMMGApplicationsRef(eam *Exam_Application_MTSPMMG) *RecommendationsMTSPMMGApplicationsQuery {
	query := (&RecommendationsMTSPMMGApplicationsClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := eam.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(exam_application_mtspmmg.Table, exam_application_mtspmmg.FieldID, id),
			sqlgraph.To(recommendationsmtspmmgapplications.Table, recommendationsmtspmmgapplications.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, exam_application_mtspmmg.MTSPMMGApplicationsRefTable, exam_application_mtspmmg.MTSPMMGApplicationsRefColumn),
		)
		fromV = sqlgraph.Neighbors(eam.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryMTSPMMGExamCentres queries the MTSPMMGExamCentres edge of a Exam_Application_MTSPMMG.
func (c *ExamApplicationMTSPMMGClient) QueryMTSPMMGExamCentres(eam *Exam_Application_MTSPMMG) *CenterQuery {
	query := (&CenterClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := eam.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(exam_application_mtspmmg.Table, exam_application_mtspmmg.FieldID, id),
			sqlgraph.To(center.Table, center.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, exam_application_mtspmmg.MTSPMMGExamCentresTable, exam_application_mtspmmg.MTSPMMGExamCentresColumn),
		)
		fromV = sqlgraph.Neighbors(eam.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryExamcitycenter queries the examcitycenter edge of a Exam_Application_MTSPMMG.
func (c *ExamApplicationMTSPMMGClient) QueryExamcitycenter(eam *Exam_Application_MTSPMMG) *ExamCityCenterQuery {
	query := (&ExamCityCenterClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := eam.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(exam_application_mtspmmg.Table, exam_application_mtspmmg.FieldID, id),
			sqlgraph.To(examcitycenter.Table, examcitycenter.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, exam_application_mtspmmg.ExamcitycenterTable, exam_application_mtspmmg.ExamcitycenterColumn),
		)
		fromV = sqlgraph.Neighbors(eam.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryExams queries the Exams edge of a Exam_Application_MTSPMMG.
func (c *ExamApplicationMTSPMMGClient) QueryExams(eam *Exam_Application_MTSPMMG) *ExamQuery {
	query := (&ExamClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := eam.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(exam_application_mtspmmg.Table, exam_application_mtspmmg.FieldID, id),
			sqlgraph.To(exam.Table, exam.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, exam_application_mtspmmg.ExamsTable, exam_application_mtspmmg.ExamsColumn),
		)
		fromV = sqlgraph.Neighbors(eam.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCircleRefsMTSPMMG queries the CircleRefsMTSPMMG edge of a Exam_Application_MTSPMMG.
func (c *ExamApplicationMTSPMMGClient) QueryCircleRefsMTSPMMG(eam *Exam_Application_MTSPMMG) *CircleSummaryForNOQuery {
	query := (&CircleSummaryForNOClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := eam.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(exam_application_mtspmmg.Table, exam_application_mtspmmg.FieldID, id),
			sqlgraph.To(circlesummaryforno.Table, circlesummaryforno.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, exam_application_mtspmmg.CircleRefsMTSPMMGTable, exam_application_mtspmmg.CircleRefsMTSPMMGColumn),
		)
		fromV = sqlgraph.Neighbors(eam.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryLogData queries the LogData edge of a Exam_Application_MTSPMMG.
func (c *ExamApplicationMTSPMMGClient) QueryLogData(eam *Exam_Application_MTSPMMG) *LogsQuery {
	query := (&LogsClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := eam.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(exam_application_mtspmmg.Table, exam_application_mtspmmg.FieldID, id),
			sqlgraph.To(logs.Table, logs.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, exam_application_mtspmmg.LogDataTable, exam_application_mtspmmg.LogDataColumn),
		)
		fromV = sqlgraph.Neighbors(eam.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ExamApplicationMTSPMMGClient) Hooks() []Hook {
	return c.hooks.Exam_Application_MTSPMMG
}

// Interceptors returns the client interceptors.
func (c *ExamApplicationMTSPMMGClient) Interceptors() []Interceptor {
	return c.inters.Exam_Application_MTSPMMG
}

func (c *ExamApplicationMTSPMMGClient) mutate(ctx context.Context, m *ExamApplicationMTSPMMGMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ExamApplicationMTSPMMGCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ExamApplicationMTSPMMGUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ExamApplicationMTSPMMGUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ExamApplicationMTSPMMGDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Exam_Application_MTSPMMG mutation op: %q", m.Op())
	}
}

// ExamApplicationsGDSPAClient is a client for the Exam_Applications_GDSPA schema.
type ExamApplicationsGDSPAClient struct {
	config
}

// NewExamApplicationsGDSPAClient returns a client for the Exam_Applications_GDSPA from the given config.
func NewExamApplicationsGDSPAClient(c config) *ExamApplicationsGDSPAClient {
	return &ExamApplicationsGDSPAClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `exam_applications_gdspa.Hooks(f(g(h())))`.
func (c *ExamApplicationsGDSPAClient) Use(hooks ...Hook) {
	c.hooks.Exam_Applications_GDSPA = append(c.hooks.Exam_Applications_GDSPA, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `exam_applications_gdspa.Intercept(f(g(h())))`.
func (c *ExamApplicationsGDSPAClient) Intercept(interceptors ...Interceptor) {
	c.inters.Exam_Applications_GDSPA = append(c.inters.Exam_Applications_GDSPA, interceptors...)
}

// Create returns a builder for creating a Exam_Applications_GDSPA entity.
func (c *ExamApplicationsGDSPAClient) Create() *ExamApplicationsGDSPACreate {
	mutation := newExamApplicationsGDSPAMutation(c.config, OpCreate)
	return &ExamApplicationsGDSPACreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Exam_Applications_GDSPA entities.
func (c *ExamApplicationsGDSPAClient) CreateBulk(builders ...*ExamApplicationsGDSPACreate) *ExamApplicationsGDSPACreateBulk {
	return &ExamApplicationsGDSPACreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Exam_Applications_GDSPA.
func (c *ExamApplicationsGDSPAClient) Update() *ExamApplicationsGDSPAUpdate {
	mutation := newExamApplicationsGDSPAMutation(c.config, OpUpdate)
	return &ExamApplicationsGDSPAUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ExamApplicationsGDSPAClient) UpdateOne(eag *Exam_Applications_GDSPA) *ExamApplicationsGDSPAUpdateOne {
	mutation := newExamApplicationsGDSPAMutation(c.config, OpUpdateOne, withExam_Applications_GDSPA(eag))
	return &ExamApplicationsGDSPAUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ExamApplicationsGDSPAClient) UpdateOneID(id int64) *ExamApplicationsGDSPAUpdateOne {
	mutation := newExamApplicationsGDSPAMutation(c.config, OpUpdateOne, withExam_Applications_GDSPAID(id))
	return &ExamApplicationsGDSPAUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Exam_Applications_GDSPA.
func (c *ExamApplicationsGDSPAClient) Delete() *ExamApplicationsGDSPADelete {
	mutation := newExamApplicationsGDSPAMutation(c.config, OpDelete)
	return &ExamApplicationsGDSPADelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ExamApplicationsGDSPAClient) DeleteOne(eag *Exam_Applications_GDSPA) *ExamApplicationsGDSPADeleteOne {
	return c.DeleteOneID(eag.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ExamApplicationsGDSPAClient) DeleteOneID(id int64) *ExamApplicationsGDSPADeleteOne {
	builder := c.Delete().Where(exam_applications_gdspa.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ExamApplicationsGDSPADeleteOne{builder}
}

// Query returns a query builder for Exam_Applications_GDSPA.
func (c *ExamApplicationsGDSPAClient) Query() *ExamApplicationsGDSPAQuery {
	return &ExamApplicationsGDSPAQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeExamApplicationsGDSPA},
		inters: c.Interceptors(),
	}
}

// Get returns a Exam_Applications_GDSPA entity by its id.
func (c *ExamApplicationsGDSPAClient) Get(ctx context.Context, id int64) (*Exam_Applications_GDSPA, error) {
	return c.Query().Where(exam_applications_gdspa.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ExamApplicationsGDSPAClient) GetX(ctx context.Context, id int64) *Exam_Applications_GDSPA {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUsersGDSPARef queries the UsersGDSPARef edge of a Exam_Applications_GDSPA.
func (c *ExamApplicationsGDSPAClient) QueryUsersGDSPARef(eag *Exam_Applications_GDSPA) *UserMasterQuery {
	query := (&UserMasterClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := eag.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(exam_applications_gdspa.Table, exam_applications_gdspa.FieldID, id),
			sqlgraph.To(usermaster.Table, usermaster.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, exam_applications_gdspa.UsersGDSPARefTable, exam_applications_gdspa.UsersGDSPARefColumn),
		)
		fromV = sqlgraph.Neighbors(eag.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryExamcitycenter queries the examcitycenter edge of a Exam_Applications_GDSPA.
func (c *ExamApplicationsGDSPAClient) QueryExamcitycenter(eag *Exam_Applications_GDSPA) *ExamCityCenterQuery {
	query := (&ExamCityCenterClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := eag.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(exam_applications_gdspa.Table, exam_applications_gdspa.FieldID, id),
			sqlgraph.To(examcitycenter.Table, examcitycenter.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, exam_applications_gdspa.ExamcitycenterTable, exam_applications_gdspa.ExamcitycenterColumn),
		)
		fromV = sqlgraph.Neighbors(eag.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryGDSPAExamCentres queries the GDSPAExamCentres edge of a Exam_Applications_GDSPA.
func (c *ExamApplicationsGDSPAClient) QueryGDSPAExamCentres(eag *Exam_Applications_GDSPA) *CenterQuery {
	query := (&CenterClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := eag.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(exam_applications_gdspa.Table, exam_applications_gdspa.FieldID, id),
			sqlgraph.To(center.Table, center.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, exam_applications_gdspa.GDSPAExamCentresTable, exam_applications_gdspa.GDSPAExamCentresColumn),
		)
		fromV = sqlgraph.Neighbors(eag.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRoleusers queries the roleusers edge of a Exam_Applications_GDSPA.
func (c *ExamApplicationsGDSPAClient) QueryRoleusers(eag *Exam_Applications_GDSPA) *RoleMasterQuery {
	query := (&RoleMasterClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := eag.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(exam_applications_gdspa.Table, exam_applications_gdspa.FieldID, id),
			sqlgraph.To(rolemaster.Table, rolemaster.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, exam_applications_gdspa.RoleusersTable, exam_applications_gdspa.RoleusersColumn),
		)
		fromV = sqlgraph.Neighbors(eag.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCadrePrefRef queries the CadrePref_Ref edge of a Exam_Applications_GDSPA.
func (c *ExamApplicationsGDSPAClient) QueryCadrePrefRef(eag *Exam_Applications_GDSPA) *CadreChoicePAQuery {
	query := (&CadreChoicePAClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := eag.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(exam_applications_gdspa.Table, exam_applications_gdspa.FieldID, id),
			sqlgraph.To(cadre_choice_pa.Table, cadre_choice_pa.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, exam_applications_gdspa.CadrePrefRefTable, exam_applications_gdspa.CadrePrefRefColumn),
		)
		fromV = sqlgraph.Neighbors(eag.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCirclePrefRefGDSPA queries the CirclePrefRefGDSPA edge of a Exam_Applications_GDSPA.
func (c *ExamApplicationsGDSPAClient) QueryCirclePrefRefGDSPA(eag *Exam_Applications_GDSPA) *DivisionChoicePAQuery {
	query := (&DivisionChoicePAClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := eag.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(exam_applications_gdspa.Table, exam_applications_gdspa.FieldID, id),
			sqlgraph.To(division_choice_pa.Table, division_choice_pa.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, exam_applications_gdspa.CirclePrefRefGDSPATable, exam_applications_gdspa.CirclePrefRefGDSPAColumn),
		)
		fromV = sqlgraph.Neighbors(eag.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryGDSPAApplicationsRef queries the GDSPAApplicationsRef edge of a Exam_Applications_GDSPA.
func (c *ExamApplicationsGDSPAClient) QueryGDSPAApplicationsRef(eag *Exam_Applications_GDSPA) *RecommendationsGDSPAApplicationsQuery {
	query := (&RecommendationsGDSPAApplicationsClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := eag.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(exam_applications_gdspa.Table, exam_applications_gdspa.FieldID, id),
			sqlgraph.To(recommendationsgdspaapplications.Table, recommendationsgdspaapplications.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, exam_applications_gdspa.GDSPAApplicationsRefTable, exam_applications_gdspa.GDSPAApplicationsRefColumn),
		)
		fromV = sqlgraph.Neighbors(eag.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryExams queries the Exams edge of a Exam_Applications_GDSPA.
func (c *ExamApplicationsGDSPAClient) QueryExams(eag *Exam_Applications_GDSPA) *ExamQuery {
	query := (&ExamClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := eag.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(exam_applications_gdspa.Table, exam_applications_gdspa.FieldID, id),
			sqlgraph.To(exam.Table, exam.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, exam_applications_gdspa.ExamsTable, exam_applications_gdspa.ExamsColumn),
		)
		fromV = sqlgraph.Neighbors(eag.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCircleRefsGDSPA queries the CircleRefsGDSPA edge of a Exam_Applications_GDSPA.
func (c *ExamApplicationsGDSPAClient) QueryCircleRefsGDSPA(eag *Exam_Applications_GDSPA) *CircleSummaryForNOQuery {
	query := (&CircleSummaryForNOClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := eag.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(exam_applications_gdspa.Table, exam_applications_gdspa.FieldID, id),
			sqlgraph.To(circlesummaryforno.Table, circlesummaryforno.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, exam_applications_gdspa.CircleRefsGDSPATable, exam_applications_gdspa.CircleRefsGDSPAColumn),
		)
		fromV = sqlgraph.Neighbors(eag.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryLogData queries the LogData edge of a Exam_Applications_GDSPA.
func (c *ExamApplicationsGDSPAClient) QueryLogData(eag *Exam_Applications_GDSPA) *LogsQuery {
	query := (&LogsClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := eag.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(exam_applications_gdspa.Table, exam_applications_gdspa.FieldID, id),
			sqlgraph.To(logs.Table, logs.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, exam_applications_gdspa.LogDataTable, exam_applications_gdspa.LogDataColumn),
		)
		fromV = sqlgraph.Neighbors(eag.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ExamApplicationsGDSPAClient) Hooks() []Hook {
	return c.hooks.Exam_Applications_GDSPA
}

// Interceptors returns the client interceptors.
func (c *ExamApplicationsGDSPAClient) Interceptors() []Interceptor {
	return c.inters.Exam_Applications_GDSPA
}

func (c *ExamApplicationsGDSPAClient) mutate(ctx context.Context, m *ExamApplicationsGDSPAMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ExamApplicationsGDSPACreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ExamApplicationsGDSPAUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ExamApplicationsGDSPAUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ExamApplicationsGDSPADelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Exam_Applications_GDSPA mutation op: %q", m.Op())
	}
}

// ExamApplicationsGDSPMClient is a client for the Exam_Applications_GDSPM schema.
type ExamApplicationsGDSPMClient struct {
	config
}

// NewExamApplicationsGDSPMClient returns a client for the Exam_Applications_GDSPM from the given config.
func NewExamApplicationsGDSPMClient(c config) *ExamApplicationsGDSPMClient {
	return &ExamApplicationsGDSPMClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `exam_applications_gdspm.Hooks(f(g(h())))`.
func (c *ExamApplicationsGDSPMClient) Use(hooks ...Hook) {
	c.hooks.Exam_Applications_GDSPM = append(c.hooks.Exam_Applications_GDSPM, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `exam_applications_gdspm.Intercept(f(g(h())))`.
func (c *ExamApplicationsGDSPMClient) Intercept(interceptors ...Interceptor) {
	c.inters.Exam_Applications_GDSPM = append(c.inters.Exam_Applications_GDSPM, interceptors...)
}

// Create returns a builder for creating a Exam_Applications_GDSPM entity.
func (c *ExamApplicationsGDSPMClient) Create() *ExamApplicationsGDSPMCreate {
	mutation := newExamApplicationsGDSPMMutation(c.config, OpCreate)
	return &ExamApplicationsGDSPMCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Exam_Applications_GDSPM entities.
func (c *ExamApplicationsGDSPMClient) CreateBulk(builders ...*ExamApplicationsGDSPMCreate) *ExamApplicationsGDSPMCreateBulk {
	return &ExamApplicationsGDSPMCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Exam_Applications_GDSPM.
func (c *ExamApplicationsGDSPMClient) Update() *ExamApplicationsGDSPMUpdate {
	mutation := newExamApplicationsGDSPMMutation(c.config, OpUpdate)
	return &ExamApplicationsGDSPMUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ExamApplicationsGDSPMClient) UpdateOne(eag *Exam_Applications_GDSPM) *ExamApplicationsGDSPMUpdateOne {
	mutation := newExamApplicationsGDSPMMutation(c.config, OpUpdateOne, withExam_Applications_GDSPM(eag))
	return &ExamApplicationsGDSPMUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ExamApplicationsGDSPMClient) UpdateOneID(id int64) *ExamApplicationsGDSPMUpdateOne {
	mutation := newExamApplicationsGDSPMMutation(c.config, OpUpdateOne, withExam_Applications_GDSPMID(id))
	return &ExamApplicationsGDSPMUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Exam_Applications_GDSPM.
func (c *ExamApplicationsGDSPMClient) Delete() *ExamApplicationsGDSPMDelete {
	mutation := newExamApplicationsGDSPMMutation(c.config, OpDelete)
	return &ExamApplicationsGDSPMDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ExamApplicationsGDSPMClient) DeleteOne(eag *Exam_Applications_GDSPM) *ExamApplicationsGDSPMDeleteOne {
	return c.DeleteOneID(eag.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ExamApplicationsGDSPMClient) DeleteOneID(id int64) *ExamApplicationsGDSPMDeleteOne {
	builder := c.Delete().Where(exam_applications_gdspm.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ExamApplicationsGDSPMDeleteOne{builder}
}

// Query returns a query builder for Exam_Applications_GDSPM.
func (c *ExamApplicationsGDSPMClient) Query() *ExamApplicationsGDSPMQuery {
	return &ExamApplicationsGDSPMQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeExamApplicationsGDSPM},
		inters: c.Interceptors(),
	}
}

// Get returns a Exam_Applications_GDSPM entity by its id.
func (c *ExamApplicationsGDSPMClient) Get(ctx context.Context, id int64) (*Exam_Applications_GDSPM, error) {
	return c.Query().Where(exam_applications_gdspm.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ExamApplicationsGDSPMClient) GetX(ctx context.Context, id int64) *Exam_Applications_GDSPM {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUsersGDSPMRef queries the UsersGDSPMRef edge of a Exam_Applications_GDSPM.
func (c *ExamApplicationsGDSPMClient) QueryUsersGDSPMRef(eag *Exam_Applications_GDSPM) *UserMasterQuery {
	query := (&UserMasterClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := eag.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(exam_applications_gdspm.Table, exam_applications_gdspm.FieldID, id),
			sqlgraph.To(usermaster.Table, usermaster.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, exam_applications_gdspm.UsersGDSPMRefTable, exam_applications_gdspm.UsersGDSPMRefColumn),
		)
		fromV = sqlgraph.Neighbors(eag.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCadrePrefRefGDSPM queries the CadrePrefRefGDSPM edge of a Exam_Applications_GDSPM.
func (c *ExamApplicationsGDSPMClient) QueryCadrePrefRefGDSPM(eag *Exam_Applications_GDSPM) *CadreChoicePMQuery {
	query := (&CadreChoicePMClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := eag.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(exam_applications_gdspm.Table, exam_applications_gdspm.FieldID, id),
			sqlgraph.To(cadre_choice_pm.Table, cadre_choice_pm.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, exam_applications_gdspm.CadrePrefRefGDSPMTable, exam_applications_gdspm.CadrePrefRefGDSPMColumn),
		)
		fromV = sqlgraph.Neighbors(eag.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCirclePrefRefGDSPM queries the CirclePrefRefGDSPM edge of a Exam_Applications_GDSPM.
func (c *ExamApplicationsGDSPMClient) QueryCirclePrefRefGDSPM(eag *Exam_Applications_GDSPM) *DivisionChoicePMQuery {
	query := (&DivisionChoicePMClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := eag.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(exam_applications_gdspm.Table, exam_applications_gdspm.FieldID, id),
			sqlgraph.To(division_choice_pm.Table, division_choice_pm.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, exam_applications_gdspm.CirclePrefRefGDSPMTable, exam_applications_gdspm.CirclePrefRefGDSPMColumn),
		)
		fromV = sqlgraph.Neighbors(eag.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryGDSPMApplicationsRef queries the GDSPMApplicationsRef edge of a Exam_Applications_GDSPM.
func (c *ExamApplicationsGDSPMClient) QueryGDSPMApplicationsRef(eag *Exam_Applications_GDSPM) *RecommendationsGDSPMApplicationsQuery {
	query := (&RecommendationsGDSPMApplicationsClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := eag.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(exam_applications_gdspm.Table, exam_applications_gdspm.FieldID, id),
			sqlgraph.To(recommendationsgdspmapplications.Table, recommendationsgdspmapplications.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, exam_applications_gdspm.GDSPMApplicationsRefTable, exam_applications_gdspm.GDSPMApplicationsRefColumn),
		)
		fromV = sqlgraph.Neighbors(eag.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryLogData queries the LogData edge of a Exam_Applications_GDSPM.
func (c *ExamApplicationsGDSPMClient) QueryLogData(eag *Exam_Applications_GDSPM) *LogsQuery {
	query := (&LogsClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := eag.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(exam_applications_gdspm.Table, exam_applications_gdspm.FieldID, id),
			sqlgraph.To(logs.Table, logs.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, exam_applications_gdspm.LogDataTable, exam_applications_gdspm.LogDataColumn),
		)
		fromV = sqlgraph.Neighbors(eag.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryExams queries the Exams edge of a Exam_Applications_GDSPM.
func (c *ExamApplicationsGDSPMClient) QueryExams(eag *Exam_Applications_GDSPM) *ExamQuery {
	query := (&ExamClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := eag.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(exam_applications_gdspm.Table, exam_applications_gdspm.FieldID, id),
			sqlgraph.To(exam.Table, exam.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, exam_applications_gdspm.ExamsTable, exam_applications_gdspm.ExamsColumn),
		)
		fromV = sqlgraph.Neighbors(eag.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryGDSPMExamCentres queries the GDSPMExamCentres edge of a Exam_Applications_GDSPM.
func (c *ExamApplicationsGDSPMClient) QueryGDSPMExamCentres(eag *Exam_Applications_GDSPM) *CenterQuery {
	query := (&CenterClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := eag.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(exam_applications_gdspm.Table, exam_applications_gdspm.FieldID, id),
			sqlgraph.To(center.Table, center.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, exam_applications_gdspm.GDSPMExamCentresTable, exam_applications_gdspm.GDSPMExamCentresColumn),
		)
		fromV = sqlgraph.Neighbors(eag.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCircleRefsGDSPM queries the CircleRefsGDSPM edge of a Exam_Applications_GDSPM.
func (c *ExamApplicationsGDSPMClient) QueryCircleRefsGDSPM(eag *Exam_Applications_GDSPM) *CircleSummaryForNOQuery {
	query := (&CircleSummaryForNOClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := eag.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(exam_applications_gdspm.Table, exam_applications_gdspm.FieldID, id),
			sqlgraph.To(circlesummaryforno.Table, circlesummaryforno.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, exam_applications_gdspm.CircleRefsGDSPMTable, exam_applications_gdspm.CircleRefsGDSPMColumn),
		)
		fromV = sqlgraph.Neighbors(eag.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRoleusers queries the roleusers edge of a Exam_Applications_GDSPM.
func (c *ExamApplicationsGDSPMClient) QueryRoleusers(eag *Exam_Applications_GDSPM) *RoleMasterQuery {
	query := (&RoleMasterClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := eag.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(exam_applications_gdspm.Table, exam_applications_gdspm.FieldID, id),
			sqlgraph.To(rolemaster.Table, rolemaster.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, exam_applications_gdspm.RoleusersTable, exam_applications_gdspm.RoleusersColumn),
		)
		fromV = sqlgraph.Neighbors(eag.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryExamcitycenter queries the examcitycenter edge of a Exam_Applications_GDSPM.
func (c *ExamApplicationsGDSPMClient) QueryExamcitycenter(eag *Exam_Applications_GDSPM) *ExamCityCenterQuery {
	query := (&ExamCityCenterClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := eag.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(exam_applications_gdspm.Table, exam_applications_gdspm.FieldID, id),
			sqlgraph.To(examcitycenter.Table, examcitycenter.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, exam_applications_gdspm.ExamcitycenterTable, exam_applications_gdspm.ExamcitycenterColumn),
		)
		fromV = sqlgraph.Neighbors(eag.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ExamApplicationsGDSPMClient) Hooks() []Hook {
	return c.hooks.Exam_Applications_GDSPM
}

// Interceptors returns the client interceptors.
func (c *ExamApplicationsGDSPMClient) Interceptors() []Interceptor {
	return c.inters.Exam_Applications_GDSPM
}

func (c *ExamApplicationsGDSPMClient) mutate(ctx context.Context, m *ExamApplicationsGDSPMMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ExamApplicationsGDSPMCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ExamApplicationsGDSPMUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ExamApplicationsGDSPMUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ExamApplicationsGDSPMDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Exam_Applications_GDSPM mutation op: %q", m.Op())
	}
}

// ExamApplicationsIPClient is a client for the Exam_Applications_IP schema.
type ExamApplicationsIPClient struct {
	config
}

// NewExamApplicationsIPClient returns a client for the Exam_Applications_IP from the given config.
func NewExamApplicationsIPClient(c config) *ExamApplicationsIPClient {
	return &ExamApplicationsIPClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `exam_applications_ip.Hooks(f(g(h())))`.
func (c *ExamApplicationsIPClient) Use(hooks ...Hook) {
	c.hooks.Exam_Applications_IP = append(c.hooks.Exam_Applications_IP, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `exam_applications_ip.Intercept(f(g(h())))`.
func (c *ExamApplicationsIPClient) Intercept(interceptors ...Interceptor) {
	c.inters.Exam_Applications_IP = append(c.inters.Exam_Applications_IP, interceptors...)
}

// Create returns a builder for creating a Exam_Applications_IP entity.
func (c *ExamApplicationsIPClient) Create() *ExamApplicationsIPCreate {
	mutation := newExamApplicationsIPMutation(c.config, OpCreate)
	return &ExamApplicationsIPCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Exam_Applications_IP entities.
func (c *ExamApplicationsIPClient) CreateBulk(builders ...*ExamApplicationsIPCreate) *ExamApplicationsIPCreateBulk {
	return &ExamApplicationsIPCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Exam_Applications_IP.
func (c *ExamApplicationsIPClient) Update() *ExamApplicationsIPUpdate {
	mutation := newExamApplicationsIPMutation(c.config, OpUpdate)
	return &ExamApplicationsIPUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ExamApplicationsIPClient) UpdateOne(eai *Exam_Applications_IP) *ExamApplicationsIPUpdateOne {
	mutation := newExamApplicationsIPMutation(c.config, OpUpdateOne, withExam_Applications_IP(eai))
	return &ExamApplicationsIPUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ExamApplicationsIPClient) UpdateOneID(id int64) *ExamApplicationsIPUpdateOne {
	mutation := newExamApplicationsIPMutation(c.config, OpUpdateOne, withExam_Applications_IPID(id))
	return &ExamApplicationsIPUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Exam_Applications_IP.
func (c *ExamApplicationsIPClient) Delete() *ExamApplicationsIPDelete {
	mutation := newExamApplicationsIPMutation(c.config, OpDelete)
	return &ExamApplicationsIPDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ExamApplicationsIPClient) DeleteOne(eai *Exam_Applications_IP) *ExamApplicationsIPDeleteOne {
	return c.DeleteOneID(eai.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ExamApplicationsIPClient) DeleteOneID(id int64) *ExamApplicationsIPDeleteOne {
	builder := c.Delete().Where(exam_applications_ip.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ExamApplicationsIPDeleteOne{builder}
}

// Query returns a query builder for Exam_Applications_IP.
func (c *ExamApplicationsIPClient) Query() *ExamApplicationsIPQuery {
	return &ExamApplicationsIPQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeExamApplicationsIP},
		inters: c.Interceptors(),
	}
}

// Get returns a Exam_Applications_IP entity by its id.
func (c *ExamApplicationsIPClient) Get(ctx context.Context, id int64) (*Exam_Applications_IP, error) {
	return c.Query().Where(exam_applications_ip.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ExamApplicationsIPClient) GetX(ctx context.Context, id int64) *Exam_Applications_IP {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUsersIPRef queries the UsersIPRef edge of a Exam_Applications_IP.
func (c *ExamApplicationsIPClient) QueryUsersIPRef(eai *Exam_Applications_IP) *UserMasterQuery {
	query := (&UserMasterClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := eai.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(exam_applications_ip.Table, exam_applications_ip.FieldID, id),
			sqlgraph.To(usermaster.Table, usermaster.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, exam_applications_ip.UsersIPRefTable, exam_applications_ip.UsersIPRefColumn),
		)
		fromV = sqlgraph.Neighbors(eai.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCadrePrefRef queries the CadrePref_Ref edge of a Exam_Applications_IP.
func (c *ExamApplicationsIPClient) QueryCadrePrefRef(eai *Exam_Applications_IP) *CadreChoiceIPQuery {
	query := (&CadreChoiceIPClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := eai.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(exam_applications_ip.Table, exam_applications_ip.FieldID, id),
			sqlgraph.To(cadre_choice_ip.Table, cadre_choice_ip.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, exam_applications_ip.CadrePrefRefTable, exam_applications_ip.CadrePrefRefColumn),
		)
		fromV = sqlgraph.Neighbors(eai.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCirclePrefRef queries the CirclePrefRef edge of a Exam_Applications_IP.
func (c *ExamApplicationsIPClient) QueryCirclePrefRef(eai *Exam_Applications_IP) *PlaceOfPreferenceIPQuery {
	query := (&PlaceOfPreferenceIPClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := eai.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(exam_applications_ip.Table, exam_applications_ip.FieldID, id),
			sqlgraph.To(placeofpreferenceip.Table, placeofpreferenceip.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, exam_applications_ip.CirclePrefRefTable, exam_applications_ip.CirclePrefRefColumn),
		)
		fromV = sqlgraph.Neighbors(eai.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryIPApplicationsRef queries the IPApplicationsRef edge of a Exam_Applications_IP.
func (c *ExamApplicationsIPClient) QueryIPApplicationsRef(eai *Exam_Applications_IP) *RecommendationsIPApplicationsQuery {
	query := (&RecommendationsIPApplicationsClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := eai.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(exam_applications_ip.Table, exam_applications_ip.FieldID, id),
			sqlgraph.To(recommendationsipapplications.Table, recommendationsipapplications.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, exam_applications_ip.IPApplicationsRefTable, exam_applications_ip.IPApplicationsRefColumn),
		)
		fromV = sqlgraph.Neighbors(eai.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryLogData queries the LogData edge of a Exam_Applications_IP.
func (c *ExamApplicationsIPClient) QueryLogData(eai *Exam_Applications_IP) *LogsQuery {
	query := (&LogsClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := eai.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(exam_applications_ip.Table, exam_applications_ip.FieldID, id),
			sqlgraph.To(logs.Table, logs.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, exam_applications_ip.LogDataTable, exam_applications_ip.LogDataColumn),
		)
		fromV = sqlgraph.Neighbors(eai.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryExamCentres queries the ExamCentres edge of a Exam_Applications_IP.
func (c *ExamApplicationsIPClient) QueryExamCentres(eai *Exam_Applications_IP) *CenterQuery {
	query := (&CenterClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := eai.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(exam_applications_ip.Table, exam_applications_ip.FieldID, id),
			sqlgraph.To(center.Table, center.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, exam_applications_ip.ExamCentresTable, exam_applications_ip.ExamCentresColumn),
		)
		fromV = sqlgraph.Neighbors(eai.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryExamcitycenter queries the examcitycenter edge of a Exam_Applications_IP.
func (c *ExamApplicationsIPClient) QueryExamcitycenter(eai *Exam_Applications_IP) *ExamCityCenterQuery {
	query := (&ExamCityCenterClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := eai.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(exam_applications_ip.Table, exam_applications_ip.FieldID, id),
			sqlgraph.To(examcitycenter.Table, examcitycenter.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, exam_applications_ip.ExamcitycenterTable, exam_applications_ip.ExamcitycenterColumn),
		)
		fromV = sqlgraph.Neighbors(eai.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRoleusers queries the roleusers edge of a Exam_Applications_IP.
func (c *ExamApplicationsIPClient) QueryRoleusers(eai *Exam_Applications_IP) *RoleMasterQuery {
	query := (&RoleMasterClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := eai.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(exam_applications_ip.Table, exam_applications_ip.FieldID, id),
			sqlgraph.To(rolemaster.Table, rolemaster.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, exam_applications_ip.RoleusersTable, exam_applications_ip.RoleusersColumn),
		)
		fromV = sqlgraph.Neighbors(eai.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCircleRefs queries the CircleRefs edge of a Exam_Applications_IP.
func (c *ExamApplicationsIPClient) QueryCircleRefs(eai *Exam_Applications_IP) *CircleSummaryForNOQuery {
	query := (&CircleSummaryForNOClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := eai.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(exam_applications_ip.Table, exam_applications_ip.FieldID, id),
			sqlgraph.To(circlesummaryforno.Table, circlesummaryforno.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, exam_applications_ip.CircleRefsTable, exam_applications_ip.CircleRefsColumn),
		)
		fromV = sqlgraph.Neighbors(eai.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ExamApplicationsIPClient) Hooks() []Hook {
	return c.hooks.Exam_Applications_IP
}

// Interceptors returns the client interceptors.
func (c *ExamApplicationsIPClient) Interceptors() []Interceptor {
	return c.inters.Exam_Applications_IP
}

func (c *ExamApplicationsIPClient) mutate(ctx context.Context, m *ExamApplicationsIPMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ExamApplicationsIPCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ExamApplicationsIPUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ExamApplicationsIPUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ExamApplicationsIPDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Exam_Applications_IP mutation op: %q", m.Op())
	}
}

// ExamApplicationsPMPAClient is a client for the Exam_Applications_PMPA schema.
type ExamApplicationsPMPAClient struct {
	config
}

// NewExamApplicationsPMPAClient returns a client for the Exam_Applications_PMPA from the given config.
func NewExamApplicationsPMPAClient(c config) *ExamApplicationsPMPAClient {
	return &ExamApplicationsPMPAClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `exam_applications_pmpa.Hooks(f(g(h())))`.
func (c *ExamApplicationsPMPAClient) Use(hooks ...Hook) {
	c.hooks.Exam_Applications_PMPA = append(c.hooks.Exam_Applications_PMPA, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `exam_applications_pmpa.Intercept(f(g(h())))`.
func (c *ExamApplicationsPMPAClient) Intercept(interceptors ...Interceptor) {
	c.inters.Exam_Applications_PMPA = append(c.inters.Exam_Applications_PMPA, interceptors...)
}

// Create returns a builder for creating a Exam_Applications_PMPA entity.
func (c *ExamApplicationsPMPAClient) Create() *ExamApplicationsPMPACreate {
	mutation := newExamApplicationsPMPAMutation(c.config, OpCreate)
	return &ExamApplicationsPMPACreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Exam_Applications_PMPA entities.
func (c *ExamApplicationsPMPAClient) CreateBulk(builders ...*ExamApplicationsPMPACreate) *ExamApplicationsPMPACreateBulk {
	return &ExamApplicationsPMPACreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Exam_Applications_PMPA.
func (c *ExamApplicationsPMPAClient) Update() *ExamApplicationsPMPAUpdate {
	mutation := newExamApplicationsPMPAMutation(c.config, OpUpdate)
	return &ExamApplicationsPMPAUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ExamApplicationsPMPAClient) UpdateOne(eap *Exam_Applications_PMPA) *ExamApplicationsPMPAUpdateOne {
	mutation := newExamApplicationsPMPAMutation(c.config, OpUpdateOne, withExam_Applications_PMPA(eap))
	return &ExamApplicationsPMPAUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ExamApplicationsPMPAClient) UpdateOneID(id int64) *ExamApplicationsPMPAUpdateOne {
	mutation := newExamApplicationsPMPAMutation(c.config, OpUpdateOne, withExam_Applications_PMPAID(id))
	return &ExamApplicationsPMPAUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Exam_Applications_PMPA.
func (c *ExamApplicationsPMPAClient) Delete() *ExamApplicationsPMPADelete {
	mutation := newExamApplicationsPMPAMutation(c.config, OpDelete)
	return &ExamApplicationsPMPADelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ExamApplicationsPMPAClient) DeleteOne(eap *Exam_Applications_PMPA) *ExamApplicationsPMPADeleteOne {
	return c.DeleteOneID(eap.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ExamApplicationsPMPAClient) DeleteOneID(id int64) *ExamApplicationsPMPADeleteOne {
	builder := c.Delete().Where(exam_applications_pmpa.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ExamApplicationsPMPADeleteOne{builder}
}

// Query returns a query builder for Exam_Applications_PMPA.
func (c *ExamApplicationsPMPAClient) Query() *ExamApplicationsPMPAQuery {
	return &ExamApplicationsPMPAQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeExamApplicationsPMPA},
		inters: c.Interceptors(),
	}
}

// Get returns a Exam_Applications_PMPA entity by its id.
func (c *ExamApplicationsPMPAClient) Get(ctx context.Context, id int64) (*Exam_Applications_PMPA, error) {
	return c.Query().Where(exam_applications_pmpa.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ExamApplicationsPMPAClient) GetX(ctx context.Context, id int64) *Exam_Applications_PMPA {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUsersPMPARef queries the UsersPMPARef edge of a Exam_Applications_PMPA.
func (c *ExamApplicationsPMPAClient) QueryUsersPMPARef(eap *Exam_Applications_PMPA) *UserMasterQuery {
	query := (&UserMasterClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := eap.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(exam_applications_pmpa.Table, exam_applications_pmpa.FieldID, id),
			sqlgraph.To(usermaster.Table, usermaster.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, exam_applications_pmpa.UsersPMPARefTable, exam_applications_pmpa.UsersPMPARefColumn),
		)
		fromV = sqlgraph.Neighbors(eap.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRoleusers queries the roleusers edge of a Exam_Applications_PMPA.
func (c *ExamApplicationsPMPAClient) QueryRoleusers(eap *Exam_Applications_PMPA) *RoleMasterQuery {
	query := (&RoleMasterClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := eap.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(exam_applications_pmpa.Table, exam_applications_pmpa.FieldID, id),
			sqlgraph.To(rolemaster.Table, rolemaster.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, exam_applications_pmpa.RoleusersTable, exam_applications_pmpa.RoleusersColumn),
		)
		fromV = sqlgraph.Neighbors(eap.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryExamcitycenter queries the examcitycenter edge of a Exam_Applications_PMPA.
func (c *ExamApplicationsPMPAClient) QueryExamcitycenter(eap *Exam_Applications_PMPA) *ExamCityCenterQuery {
	query := (&ExamCityCenterClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := eap.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(exam_applications_pmpa.Table, exam_applications_pmpa.FieldID, id),
			sqlgraph.To(examcitycenter.Table, examcitycenter.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, exam_applications_pmpa.ExamcitycenterTable, exam_applications_pmpa.ExamcitycenterColumn),
		)
		fromV = sqlgraph.Neighbors(eap.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCadrePrefRef queries the CadrePref_Ref edge of a Exam_Applications_PMPA.
func (c *ExamApplicationsPMPAClient) QueryCadrePrefRef(eap *Exam_Applications_PMPA) *CadreChoicePMPAQuery {
	query := (&CadreChoicePMPAClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := eap.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(exam_applications_pmpa.Table, exam_applications_pmpa.FieldID, id),
			sqlgraph.To(cadre_choice_pmpa.Table, cadre_choice_pmpa.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, exam_applications_pmpa.CadrePrefRefTable, exam_applications_pmpa.CadrePrefRefColumn),
		)
		fromV = sqlgraph.Neighbors(eap.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCirclePrefRefPMPA queries the CirclePrefRefPMPA edge of a Exam_Applications_PMPA.
func (c *ExamApplicationsPMPAClient) QueryCirclePrefRefPMPA(eap *Exam_Applications_PMPA) *DivisionChoicePMPAQuery {
	query := (&DivisionChoicePMPAClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := eap.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(exam_applications_pmpa.Table, exam_applications_pmpa.FieldID, id),
			sqlgraph.To(division_choice_pmpa.Table, division_choice_pmpa.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, exam_applications_pmpa.CirclePrefRefPMPATable, exam_applications_pmpa.CirclePrefRefPMPAColumn),
		)
		fromV = sqlgraph.Neighbors(eap.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPMPAApplicationsRef queries the PMPAApplicationsRef edge of a Exam_Applications_PMPA.
func (c *ExamApplicationsPMPAClient) QueryPMPAApplicationsRef(eap *Exam_Applications_PMPA) *RecommendationsPMPAApplicationsQuery {
	query := (&RecommendationsPMPAApplicationsClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := eap.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(exam_applications_pmpa.Table, exam_applications_pmpa.FieldID, id),
			sqlgraph.To(recommendationspmpaapplications.Table, recommendationspmpaapplications.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, exam_applications_pmpa.PMPAApplicationsRefTable, exam_applications_pmpa.PMPAApplicationsRefColumn),
		)
		fromV = sqlgraph.Neighbors(eap.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryExams queries the Exams edge of a Exam_Applications_PMPA.
func (c *ExamApplicationsPMPAClient) QueryExams(eap *Exam_Applications_PMPA) *ExamQuery {
	query := (&ExamClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := eap.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(exam_applications_pmpa.Table, exam_applications_pmpa.FieldID, id),
			sqlgraph.To(exam.Table, exam.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, exam_applications_pmpa.ExamsTable, exam_applications_pmpa.ExamsColumn),
		)
		fromV = sqlgraph.Neighbors(eap.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPMPAExamCentres queries the PMPAExamCentres edge of a Exam_Applications_PMPA.
func (c *ExamApplicationsPMPAClient) QueryPMPAExamCentres(eap *Exam_Applications_PMPA) *CenterQuery {
	query := (&CenterClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := eap.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(exam_applications_pmpa.Table, exam_applications_pmpa.FieldID, id),
			sqlgraph.To(center.Table, center.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, exam_applications_pmpa.PMPAExamCentresTable, exam_applications_pmpa.PMPAExamCentresColumn),
		)
		fromV = sqlgraph.Neighbors(eap.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCircleRefsPMPA queries the CircleRefsPMPA edge of a Exam_Applications_PMPA.
func (c *ExamApplicationsPMPAClient) QueryCircleRefsPMPA(eap *Exam_Applications_PMPA) *CircleSummaryForNOQuery {
	query := (&CircleSummaryForNOClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := eap.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(exam_applications_pmpa.Table, exam_applications_pmpa.FieldID, id),
			sqlgraph.To(circlesummaryforno.Table, circlesummaryforno.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, exam_applications_pmpa.CircleRefsPMPATable, exam_applications_pmpa.CircleRefsPMPAColumn),
		)
		fromV = sqlgraph.Neighbors(eap.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryLogData queries the LogData edge of a Exam_Applications_PMPA.
func (c *ExamApplicationsPMPAClient) QueryLogData(eap *Exam_Applications_PMPA) *LogsQuery {
	query := (&LogsClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := eap.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(exam_applications_pmpa.Table, exam_applications_pmpa.FieldID, id),
			sqlgraph.To(logs.Table, logs.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, exam_applications_pmpa.LogDataTable, exam_applications_pmpa.LogDataColumn),
		)
		fromV = sqlgraph.Neighbors(eap.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ExamApplicationsPMPAClient) Hooks() []Hook {
	return c.hooks.Exam_Applications_PMPA
}

// Interceptors returns the client interceptors.
func (c *ExamApplicationsPMPAClient) Interceptors() []Interceptor {
	return c.inters.Exam_Applications_PMPA
}

func (c *ExamApplicationsPMPAClient) mutate(ctx context.Context, m *ExamApplicationsPMPAMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ExamApplicationsPMPACreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ExamApplicationsPMPAUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ExamApplicationsPMPAUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ExamApplicationsPMPADelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Exam_Applications_PMPA mutation op: %q", m.Op())
	}
}

// ExamApplicationsPSClient is a client for the Exam_Applications_PS schema.
type ExamApplicationsPSClient struct {
	config
}

// NewExamApplicationsPSClient returns a client for the Exam_Applications_PS from the given config.
func NewExamApplicationsPSClient(c config) *ExamApplicationsPSClient {
	return &ExamApplicationsPSClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `exam_applications_ps.Hooks(f(g(h())))`.
func (c *ExamApplicationsPSClient) Use(hooks ...Hook) {
	c.hooks.Exam_Applications_PS = append(c.hooks.Exam_Applications_PS, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `exam_applications_ps.Intercept(f(g(h())))`.
func (c *ExamApplicationsPSClient) Intercept(interceptors ...Interceptor) {
	c.inters.Exam_Applications_PS = append(c.inters.Exam_Applications_PS, interceptors...)
}

// Create returns a builder for creating a Exam_Applications_PS entity.
func (c *ExamApplicationsPSClient) Create() *ExamApplicationsPSCreate {
	mutation := newExamApplicationsPSMutation(c.config, OpCreate)
	return &ExamApplicationsPSCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Exam_Applications_PS entities.
func (c *ExamApplicationsPSClient) CreateBulk(builders ...*ExamApplicationsPSCreate) *ExamApplicationsPSCreateBulk {
	return &ExamApplicationsPSCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Exam_Applications_PS.
func (c *ExamApplicationsPSClient) Update() *ExamApplicationsPSUpdate {
	mutation := newExamApplicationsPSMutation(c.config, OpUpdate)
	return &ExamApplicationsPSUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ExamApplicationsPSClient) UpdateOne(eap *Exam_Applications_PS) *ExamApplicationsPSUpdateOne {
	mutation := newExamApplicationsPSMutation(c.config, OpUpdateOne, withExam_Applications_PS(eap))
	return &ExamApplicationsPSUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ExamApplicationsPSClient) UpdateOneID(id int64) *ExamApplicationsPSUpdateOne {
	mutation := newExamApplicationsPSMutation(c.config, OpUpdateOne, withExam_Applications_PSID(id))
	return &ExamApplicationsPSUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Exam_Applications_PS.
func (c *ExamApplicationsPSClient) Delete() *ExamApplicationsPSDelete {
	mutation := newExamApplicationsPSMutation(c.config, OpDelete)
	return &ExamApplicationsPSDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ExamApplicationsPSClient) DeleteOne(eap *Exam_Applications_PS) *ExamApplicationsPSDeleteOne {
	return c.DeleteOneID(eap.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ExamApplicationsPSClient) DeleteOneID(id int64) *ExamApplicationsPSDeleteOne {
	builder := c.Delete().Where(exam_applications_ps.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ExamApplicationsPSDeleteOne{builder}
}

// Query returns a query builder for Exam_Applications_PS.
func (c *ExamApplicationsPSClient) Query() *ExamApplicationsPSQuery {
	return &ExamApplicationsPSQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeExamApplicationsPS},
		inters: c.Interceptors(),
	}
}

// Get returns a Exam_Applications_PS entity by its id.
func (c *ExamApplicationsPSClient) Get(ctx context.Context, id int64) (*Exam_Applications_PS, error) {
	return c.Query().Where(exam_applications_ps.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ExamApplicationsPSClient) GetX(ctx context.Context, id int64) *Exam_Applications_PS {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUsersPSRef queries the UsersPSRef edge of a Exam_Applications_PS.
func (c *ExamApplicationsPSClient) QueryUsersPSRef(eap *Exam_Applications_PS) *UserMasterQuery {
	query := (&UserMasterClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := eap.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(exam_applications_ps.Table, exam_applications_ps.FieldID, id),
			sqlgraph.To(usermaster.Table, usermaster.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, exam_applications_ps.UsersPSRefTable, exam_applications_ps.UsersPSRefColumn),
		)
		fromV = sqlgraph.Neighbors(eap.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCadrePrefPSRef queries the CadrePrefPS_Ref edge of a Exam_Applications_PS.
func (c *ExamApplicationsPSClient) QueryCadrePrefPSRef(eap *Exam_Applications_PS) *CadreChoicePSQuery {
	query := (&CadreChoicePSClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := eap.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(exam_applications_ps.Table, exam_applications_ps.FieldID, id),
			sqlgraph.To(cadre_choice_ps.Table, cadre_choice_ps.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, exam_applications_ps.CadrePrefPSRefTable, exam_applications_ps.CadrePrefPSRefColumn),
		)
		fromV = sqlgraph.Neighbors(eap.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCirclePrefRefPS queries the CirclePrefRefPS edge of a Exam_Applications_PS.
func (c *ExamApplicationsPSClient) QueryCirclePrefRefPS(eap *Exam_Applications_PS) *PlaceOfPreferencePSQuery {
	query := (&PlaceOfPreferencePSClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := eap.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(exam_applications_ps.Table, exam_applications_ps.FieldID, id),
			sqlgraph.To(placeofpreferenceps.Table, placeofpreferenceps.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, exam_applications_ps.CirclePrefRefPSTable, exam_applications_ps.CirclePrefRefPSColumn),
		)
		fromV = sqlgraph.Neighbors(eap.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPSApplicationsRef queries the PSApplicationsRef edge of a Exam_Applications_PS.
func (c *ExamApplicationsPSClient) QueryPSApplicationsRef(eap *Exam_Applications_PS) *RecommendationsPSApplicationsQuery {
	query := (&RecommendationsPSApplicationsClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := eap.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(exam_applications_ps.Table, exam_applications_ps.FieldID, id),
			sqlgraph.To(recommendationspsapplications.Table, recommendationspsapplications.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, exam_applications_ps.PSApplicationsRefTable, exam_applications_ps.PSApplicationsRefColumn),
		)
		fromV = sqlgraph.Neighbors(eap.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryExamsPS queries the ExamsPS edge of a Exam_Applications_PS.
func (c *ExamApplicationsPSClient) QueryExamsPS(eap *Exam_Applications_PS) *ExamQuery {
	query := (&ExamClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := eap.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(exam_applications_ps.Table, exam_applications_ps.FieldID, id),
			sqlgraph.To(exam.Table, exam.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, exam_applications_ps.ExamsPSTable, exam_applications_ps.ExamsPSColumn),
		)
		fromV = sqlgraph.Neighbors(eap.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRoleusers queries the roleusers edge of a Exam_Applications_PS.
func (c *ExamApplicationsPSClient) QueryRoleusers(eap *Exam_Applications_PS) *RoleMasterQuery {
	query := (&RoleMasterClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := eap.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(exam_applications_ps.Table, exam_applications_ps.FieldID, id),
			sqlgraph.To(rolemaster.Table, rolemaster.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, exam_applications_ps.RoleusersTable, exam_applications_ps.RoleusersColumn),
		)
		fromV = sqlgraph.Neighbors(eap.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryExamcitycenter queries the examcitycenter edge of a Exam_Applications_PS.
func (c *ExamApplicationsPSClient) QueryExamcitycenter(eap *Exam_Applications_PS) *ExamCityCenterQuery {
	query := (&ExamCityCenterClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := eap.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(exam_applications_ps.Table, exam_applications_ps.FieldID, id),
			sqlgraph.To(examcitycenter.Table, examcitycenter.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, exam_applications_ps.ExamcitycenterTable, exam_applications_ps.ExamcitycenterColumn),
		)
		fromV = sqlgraph.Neighbors(eap.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPSExamCentres queries the PSExamCentres edge of a Exam_Applications_PS.
func (c *ExamApplicationsPSClient) QueryPSExamCentres(eap *Exam_Applications_PS) *CenterQuery {
	query := (&CenterClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := eap.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(exam_applications_ps.Table, exam_applications_ps.FieldID, id),
			sqlgraph.To(center.Table, center.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, exam_applications_ps.PSExamCentresTable, exam_applications_ps.PSExamCentresColumn),
		)
		fromV = sqlgraph.Neighbors(eap.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCircleRefs queries the CircleRefs edge of a Exam_Applications_PS.
func (c *ExamApplicationsPSClient) QueryCircleRefs(eap *Exam_Applications_PS) *CircleSummaryForNOQuery {
	query := (&CircleSummaryForNOClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := eap.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(exam_applications_ps.Table, exam_applications_ps.FieldID, id),
			sqlgraph.To(circlesummaryforno.Table, circlesummaryforno.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, exam_applications_ps.CircleRefsTable, exam_applications_ps.CircleRefsColumn),
		)
		fromV = sqlgraph.Neighbors(eap.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryLogData queries the LogData edge of a Exam_Applications_PS.
func (c *ExamApplicationsPSClient) QueryLogData(eap *Exam_Applications_PS) *LogsQuery {
	query := (&LogsClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := eap.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(exam_applications_ps.Table, exam_applications_ps.FieldID, id),
			sqlgraph.To(logs.Table, logs.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, exam_applications_ps.LogDataTable, exam_applications_ps.LogDataColumn),
		)
		fromV = sqlgraph.Neighbors(eap.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ExamApplicationsPSClient) Hooks() []Hook {
	return c.hooks.Exam_Applications_PS
}

// Interceptors returns the client interceptors.
func (c *ExamApplicationsPSClient) Interceptors() []Interceptor {
	return c.inters.Exam_Applications_PS
}

func (c *ExamApplicationsPSClient) mutate(ctx context.Context, m *ExamApplicationsPSMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ExamApplicationsPSCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ExamApplicationsPSUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ExamApplicationsPSUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ExamApplicationsPSDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Exam_Applications_PS mutation op: %q", m.Op())
	}
}

// FacilityMastersClient is a client for the FacilityMasters schema.
type FacilityMastersClient struct {
	config
}

// NewFacilityMastersClient returns a client for the FacilityMasters from the given config.
func NewFacilityMastersClient(c config) *FacilityMastersClient {
	return &FacilityMastersClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `facilitymasters.Hooks(f(g(h())))`.
func (c *FacilityMastersClient) Use(hooks ...Hook) {
	c.hooks.FacilityMasters = append(c.hooks.FacilityMasters, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `facilitymasters.Intercept(f(g(h())))`.
func (c *FacilityMastersClient) Intercept(interceptors ...Interceptor) {
	c.inters.FacilityMasters = append(c.inters.FacilityMasters, interceptors...)
}

// Create returns a builder for creating a FacilityMasters entity.
func (c *FacilityMastersClient) Create() *FacilityMastersCreate {
	mutation := newFacilityMastersMutation(c.config, OpCreate)
	return &FacilityMastersCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of FacilityMasters entities.
func (c *FacilityMastersClient) CreateBulk(builders ...*FacilityMastersCreate) *FacilityMastersCreateBulk {
	return &FacilityMastersCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for FacilityMasters.
func (c *FacilityMastersClient) Update() *FacilityMastersUpdate {
	mutation := newFacilityMastersMutation(c.config, OpUpdate)
	return &FacilityMastersUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *FacilityMastersClient) UpdateOne(fm *FacilityMasters) *FacilityMastersUpdateOne {
	mutation := newFacilityMastersMutation(c.config, OpUpdateOne, withFacilityMasters(fm))
	return &FacilityMastersUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *FacilityMastersClient) UpdateOneID(id int32) *FacilityMastersUpdateOne {
	mutation := newFacilityMastersMutation(c.config, OpUpdateOne, withFacilityMastersID(id))
	return &FacilityMastersUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for FacilityMasters.
func (c *FacilityMastersClient) Delete() *FacilityMastersDelete {
	mutation := newFacilityMastersMutation(c.config, OpDelete)
	return &FacilityMastersDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *FacilityMastersClient) DeleteOne(fm *FacilityMasters) *FacilityMastersDeleteOne {
	return c.DeleteOneID(fm.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *FacilityMastersClient) DeleteOneID(id int32) *FacilityMastersDeleteOne {
	builder := c.Delete().Where(facilitymasters.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &FacilityMastersDeleteOne{builder}
}

// Query returns a query builder for FacilityMasters.
func (c *FacilityMastersClient) Query() *FacilityMastersQuery {
	return &FacilityMastersQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeFacilityMasters},
		inters: c.Interceptors(),
	}
}

// Get returns a FacilityMasters entity by its id.
func (c *FacilityMastersClient) Get(ctx context.Context, id int32) (*FacilityMasters, error) {
	return c.Query().Where(facilitymasters.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *FacilityMastersClient) GetX(ctx context.Context, id int32) *FacilityMasters {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *FacilityMastersClient) Hooks() []Hook {
	return c.hooks.FacilityMasters
}

// Interceptors returns the client interceptors.
func (c *FacilityMastersClient) Interceptors() []Interceptor {
	return c.inters.FacilityMasters
}

func (c *FacilityMastersClient) mutate(ctx context.Context, m *FacilityMastersMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&FacilityMastersCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&FacilityMastersUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&FacilityMastersUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&FacilityMastersDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown FacilityMasters mutation op: %q", m.Op())
	}
}

// LoginClient is a client for the Login schema.
type LoginClient struct {
	config
}

// NewLoginClient returns a client for the Login from the given config.
func NewLoginClient(c config) *LoginClient {
	return &LoginClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `login.Hooks(f(g(h())))`.
func (c *LoginClient) Use(hooks ...Hook) {
	c.hooks.Login = append(c.hooks.Login, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `login.Intercept(f(g(h())))`.
func (c *LoginClient) Intercept(interceptors ...Interceptor) {
	c.inters.Login = append(c.inters.Login, interceptors...)
}

// Create returns a builder for creating a Login entity.
func (c *LoginClient) Create() *LoginCreate {
	mutation := newLoginMutation(c.config, OpCreate)
	return &LoginCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Login entities.
func (c *LoginClient) CreateBulk(builders ...*LoginCreate) *LoginCreateBulk {
	return &LoginCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Login.
func (c *LoginClient) Update() *LoginUpdate {
	mutation := newLoginMutation(c.config, OpUpdate)
	return &LoginUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *LoginClient) UpdateOne(l *Login) *LoginUpdateOne {
	mutation := newLoginMutation(c.config, OpUpdateOne, withLogin(l))
	return &LoginUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *LoginClient) UpdateOneID(id int) *LoginUpdateOne {
	mutation := newLoginMutation(c.config, OpUpdateOne, withLoginID(id))
	return &LoginUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Login.
func (c *LoginClient) Delete() *LoginDelete {
	mutation := newLoginMutation(c.config, OpDelete)
	return &LoginDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *LoginClient) DeleteOne(l *Login) *LoginDeleteOne {
	return c.DeleteOneID(l.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *LoginClient) DeleteOneID(id int) *LoginDeleteOne {
	builder := c.Delete().Where(login.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &LoginDeleteOne{builder}
}

// Query returns a query builder for Login.
func (c *LoginClient) Query() *LoginQuery {
	return &LoginQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeLogin},
		inters: c.Interceptors(),
	}
}

// Get returns a Login entity by its id.
func (c *LoginClient) Get(ctx context.Context, id int) (*Login, error) {
	return c.Query().Where(login.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *LoginClient) GetX(ctx context.Context, id int) *Login {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryLogData queries the LogData edge of a Login.
func (c *LoginClient) QueryLogData(l *Login) *LogsQuery {
	query := (&LogsClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := l.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(login.Table, login.FieldID, id),
			sqlgraph.To(logs.Table, logs.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, login.LogDataTable, login.LogDataColumn),
		)
		fromV = sqlgraph.Neighbors(l.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *LoginClient) Hooks() []Hook {
	return c.hooks.Login
}

// Interceptors returns the client interceptors.
func (c *LoginClient) Interceptors() []Interceptor {
	return c.inters.Login
}

func (c *LoginClient) mutate(ctx context.Context, m *LoginMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&LoginCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&LoginUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&LoginUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&LoginDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Login mutation op: %q", m.Op())
	}
}

// LogsClient is a client for the Logs schema.
type LogsClient struct {
	config
}

// NewLogsClient returns a client for the Logs from the given config.
func NewLogsClient(c config) *LogsClient {
	return &LogsClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `logs.Hooks(f(g(h())))`.
func (c *LogsClient) Use(hooks ...Hook) {
	c.hooks.Logs = append(c.hooks.Logs, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `logs.Intercept(f(g(h())))`.
func (c *LogsClient) Intercept(interceptors ...Interceptor) {
	c.inters.Logs = append(c.inters.Logs, interceptors...)
}

// Create returns a builder for creating a Logs entity.
func (c *LogsClient) Create() *LogsCreate {
	mutation := newLogsMutation(c.config, OpCreate)
	return &LogsCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Logs entities.
func (c *LogsClient) CreateBulk(builders ...*LogsCreate) *LogsCreateBulk {
	return &LogsCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Logs.
func (c *LogsClient) Update() *LogsUpdate {
	mutation := newLogsMutation(c.config, OpUpdate)
	return &LogsUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *LogsClient) UpdateOne(l *Logs) *LogsUpdateOne {
	mutation := newLogsMutation(c.config, OpUpdateOne, withLogs(l))
	return &LogsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *LogsClient) UpdateOneID(id int64) *LogsUpdateOne {
	mutation := newLogsMutation(c.config, OpUpdateOne, withLogsID(id))
	return &LogsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Logs.
func (c *LogsClient) Delete() *LogsDelete {
	mutation := newLogsMutation(c.config, OpDelete)
	return &LogsDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *LogsClient) DeleteOne(l *Logs) *LogsDeleteOne {
	return c.DeleteOneID(l.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *LogsClient) DeleteOneID(id int64) *LogsDeleteOne {
	builder := c.Delete().Where(logs.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &LogsDeleteOne{builder}
}

// Query returns a query builder for Logs.
func (c *LogsClient) Query() *LogsQuery {
	return &LogsQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeLogs},
		inters: c.Interceptors(),
	}
}

// Get returns a Logs entity by its id.
func (c *LogsClient) Get(ctx context.Context, id int64) (*Logs, error) {
	return c.Query().Where(logs.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *LogsClient) GetX(ctx context.Context, id int64) *Logs {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *LogsClient) Hooks() []Hook {
	return c.hooks.Logs
}

// Interceptors returns the client interceptors.
func (c *LogsClient) Interceptors() []Interceptor {
	return c.inters.Logs
}

func (c *LogsClient) mutate(ctx context.Context, m *LogsMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&LogsCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&LogsUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&LogsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&LogsDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Logs mutation op: %q", m.Op())
	}
}

// MessageClient is a client for the Message schema.
type MessageClient struct {
	config
}

// NewMessageClient returns a client for the Message from the given config.
func NewMessageClient(c config) *MessageClient {
	return &MessageClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `message.Hooks(f(g(h())))`.
func (c *MessageClient) Use(hooks ...Hook) {
	c.hooks.Message = append(c.hooks.Message, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `message.Intercept(f(g(h())))`.
func (c *MessageClient) Intercept(interceptors ...Interceptor) {
	c.inters.Message = append(c.inters.Message, interceptors...)
}

// Create returns a builder for creating a Message entity.
func (c *MessageClient) Create() *MessageCreate {
	mutation := newMessageMutation(c.config, OpCreate)
	return &MessageCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Message entities.
func (c *MessageClient) CreateBulk(builders ...*MessageCreate) *MessageCreateBulk {
	return &MessageCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Message.
func (c *MessageClient) Update() *MessageUpdate {
	mutation := newMessageMutation(c.config, OpUpdate)
	return &MessageUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *MessageClient) UpdateOne(m *Message) *MessageUpdateOne {
	mutation := newMessageMutation(c.config, OpUpdateOne, withMessage(m))
	return &MessageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *MessageClient) UpdateOneID(id int64) *MessageUpdateOne {
	mutation := newMessageMutation(c.config, OpUpdateOne, withMessageID(id))
	return &MessageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Message.
func (c *MessageClient) Delete() *MessageDelete {
	mutation := newMessageMutation(c.config, OpDelete)
	return &MessageDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *MessageClient) DeleteOne(m *Message) *MessageDeleteOne {
	return c.DeleteOneID(m.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *MessageClient) DeleteOneID(id int64) *MessageDeleteOne {
	builder := c.Delete().Where(message.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &MessageDeleteOne{builder}
}

// Query returns a query builder for Message.
func (c *MessageClient) Query() *MessageQuery {
	return &MessageQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeMessage},
		inters: c.Interceptors(),
	}
}

// Get returns a Message entity by its id.
func (c *MessageClient) Get(ctx context.Context, id int64) (*Message, error) {
	return c.Query().Where(message.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *MessageClient) GetX(ctx context.Context, id int64) *Message {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *MessageClient) Hooks() []Hook {
	return c.hooks.Message
}

// Interceptors returns the client interceptors.
func (c *MessageClient) Interceptors() []Interceptor {
	return c.inters.Message
}

func (c *MessageClient) mutate(ctx context.Context, m *MessageMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&MessageCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&MessageUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&MessageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&MessageDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Message mutation op: %q", m.Op())
	}
}

// NotificationClient is a client for the Notification schema.
type NotificationClient struct {
	config
}

// NewNotificationClient returns a client for the Notification from the given config.
func NewNotificationClient(c config) *NotificationClient {
	return &NotificationClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `notification.Hooks(f(g(h())))`.
func (c *NotificationClient) Use(hooks ...Hook) {
	c.hooks.Notification = append(c.hooks.Notification, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `notification.Intercept(f(g(h())))`.
func (c *NotificationClient) Intercept(interceptors ...Interceptor) {
	c.inters.Notification = append(c.inters.Notification, interceptors...)
}

// Create returns a builder for creating a Notification entity.
func (c *NotificationClient) Create() *NotificationCreate {
	mutation := newNotificationMutation(c.config, OpCreate)
	return &NotificationCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Notification entities.
func (c *NotificationClient) CreateBulk(builders ...*NotificationCreate) *NotificationCreateBulk {
	return &NotificationCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Notification.
func (c *NotificationClient) Update() *NotificationUpdate {
	mutation := newNotificationMutation(c.config, OpUpdate)
	return &NotificationUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *NotificationClient) UpdateOne(n *Notification) *NotificationUpdateOne {
	mutation := newNotificationMutation(c.config, OpUpdateOne, withNotification(n))
	return &NotificationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *NotificationClient) UpdateOneID(id int32) *NotificationUpdateOne {
	mutation := newNotificationMutation(c.config, OpUpdateOne, withNotificationID(id))
	return &NotificationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Notification.
func (c *NotificationClient) Delete() *NotificationDelete {
	mutation := newNotificationMutation(c.config, OpDelete)
	return &NotificationDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *NotificationClient) DeleteOne(n *Notification) *NotificationDeleteOne {
	return c.DeleteOneID(n.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *NotificationClient) DeleteOneID(id int32) *NotificationDeleteOne {
	builder := c.Delete().Where(notification.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &NotificationDeleteOne{builder}
}

// Query returns a query builder for Notification.
func (c *NotificationClient) Query() *NotificationQuery {
	return &NotificationQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeNotification},
		inters: c.Interceptors(),
	}
}

// Get returns a Notification entity by its id.
func (c *NotificationClient) Get(ctx context.Context, id int32) (*Notification, error) {
	return c.Query().Where(notification.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *NotificationClient) GetX(ctx context.Context, id int32) *Notification {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryApplications queries the applications edge of a Notification.
func (c *NotificationClient) QueryApplications(n *Notification) *ApplicationQuery {
	query := (&ApplicationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := n.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(notification.Table, notification.FieldID, id),
			sqlgraph.To(application.Table, application.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, notification.ApplicationsTable, notification.ApplicationsColumn),
		)
		fromV = sqlgraph.Neighbors(n.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryExam queries the exam edge of a Notification.
func (c *NotificationClient) QueryExam(n *Notification) *ExamQuery {
	query := (&ExamClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := n.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(notification.Table, notification.FieldID, id),
			sqlgraph.To(exam.Table, exam.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, notification.ExamTable, notification.ExamColumn),
		)
		fromV = sqlgraph.Neighbors(n.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryVacancyYears queries the vacancy_years edge of a Notification.
func (c *NotificationClient) QueryVacancyYears(n *Notification) *VacancyYearQuery {
	query := (&VacancyYearClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := n.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(notification.Table, notification.FieldID, id),
			sqlgraph.To(vacancyyear.Table, vacancyyear.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, notification.VacancyYearsTable, notification.VacancyYearsColumn),
		)
		fromV = sqlgraph.Neighbors(n.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryNotifyRef queries the notify_ref edge of a Notification.
func (c *NotificationClient) QueryNotifyRef(n *Notification) *NotificationQuery {
	query := (&NotificationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := n.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(notification.Table, notification.FieldID, id),
			sqlgraph.To(notification.Table, notification.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, notification.NotifyRefTable, notification.NotifyRefPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(n.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryLogData queries the LogData edge of a Notification.
func (c *NotificationClient) QueryLogData(n *Notification) *LogsQuery {
	query := (&LogsClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := n.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(notification.Table, notification.FieldID, id),
			sqlgraph.To(logs.Table, logs.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, notification.LogDataTable, notification.LogDataColumn),
		)
		fromV = sqlgraph.Neighbors(n.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *NotificationClient) Hooks() []Hook {
	return c.hooks.Notification
}

// Interceptors returns the client interceptors.
func (c *NotificationClient) Interceptors() []Interceptor {
	return c.inters.Notification
}

func (c *NotificationClient) mutate(ctx context.Context, m *NotificationMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&NotificationCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&NotificationUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&NotificationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&NotificationDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Notification mutation op: %q", m.Op())
	}
}

// PDFClient is a client for the PDF schema.
type PDFClient struct {
	config
}

// NewPDFClient returns a client for the PDF from the given config.
func NewPDFClient(c config) *PDFClient {
	return &PDFClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `pdf.Hooks(f(g(h())))`.
func (c *PDFClient) Use(hooks ...Hook) {
	c.hooks.PDF = append(c.hooks.PDF, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `pdf.Intercept(f(g(h())))`.
func (c *PDFClient) Intercept(interceptors ...Interceptor) {
	c.inters.PDF = append(c.inters.PDF, interceptors...)
}

// Create returns a builder for creating a PDF entity.
func (c *PDFClient) Create() *PDFCreate {
	mutation := newPDFMutation(c.config, OpCreate)
	return &PDFCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of PDF entities.
func (c *PDFClient) CreateBulk(builders ...*PDFCreate) *PDFCreateBulk {
	return &PDFCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for PDF.
func (c *PDFClient) Update() *PDFUpdate {
	mutation := newPDFMutation(c.config, OpUpdate)
	return &PDFUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PDFClient) UpdateOne(pd *PDF) *PDFUpdateOne {
	mutation := newPDFMutation(c.config, OpUpdateOne, withPDF(pd))
	return &PDFUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PDFClient) UpdateOneID(id int) *PDFUpdateOne {
	mutation := newPDFMutation(c.config, OpUpdateOne, withPDFID(id))
	return &PDFUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for PDF.
func (c *PDFClient) Delete() *PDFDelete {
	mutation := newPDFMutation(c.config, OpDelete)
	return &PDFDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PDFClient) DeleteOne(pd *PDF) *PDFDeleteOne {
	return c.DeleteOneID(pd.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *PDFClient) DeleteOneID(id int) *PDFDeleteOne {
	builder := c.Delete().Where(pdf.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PDFDeleteOne{builder}
}

// Query returns a query builder for PDF.
func (c *PDFClient) Query() *PDFQuery {
	return &PDFQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypePDF},
		inters: c.Interceptors(),
	}
}

// Get returns a PDF entity by its id.
func (c *PDFClient) Get(ctx context.Context, id int) (*PDF, error) {
	return c.Query().Where(pdf.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PDFClient) GetX(ctx context.Context, id int) *PDF {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *PDFClient) Hooks() []Hook {
	return c.hooks.PDF
}

// Interceptors returns the client interceptors.
func (c *PDFClient) Interceptors() []Interceptor {
	return c.inters.PDF
}

func (c *PDFClient) mutate(ctx context.Context, m *PDFMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&PDFCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&PDFUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&PDFUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&PDFDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown PDF mutation op: %q", m.Op())
	}
}

// PaperTypesClient is a client for the PaperTypes schema.
type PaperTypesClient struct {
	config
}

// NewPaperTypesClient returns a client for the PaperTypes from the given config.
func NewPaperTypesClient(c config) *PaperTypesClient {
	return &PaperTypesClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `papertypes.Hooks(f(g(h())))`.
func (c *PaperTypesClient) Use(hooks ...Hook) {
	c.hooks.PaperTypes = append(c.hooks.PaperTypes, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `papertypes.Intercept(f(g(h())))`.
func (c *PaperTypesClient) Intercept(interceptors ...Interceptor) {
	c.inters.PaperTypes = append(c.inters.PaperTypes, interceptors...)
}

// Create returns a builder for creating a PaperTypes entity.
func (c *PaperTypesClient) Create() *PaperTypesCreate {
	mutation := newPaperTypesMutation(c.config, OpCreate)
	return &PaperTypesCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of PaperTypes entities.
func (c *PaperTypesClient) CreateBulk(builders ...*PaperTypesCreate) *PaperTypesCreateBulk {
	return &PaperTypesCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for PaperTypes.
func (c *PaperTypesClient) Update() *PaperTypesUpdate {
	mutation := newPaperTypesMutation(c.config, OpUpdate)
	return &PaperTypesUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PaperTypesClient) UpdateOne(pt *PaperTypes) *PaperTypesUpdateOne {
	mutation := newPaperTypesMutation(c.config, OpUpdateOne, withPaperTypes(pt))
	return &PaperTypesUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PaperTypesClient) UpdateOneID(id int32) *PaperTypesUpdateOne {
	mutation := newPaperTypesMutation(c.config, OpUpdateOne, withPaperTypesID(id))
	return &PaperTypesUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for PaperTypes.
func (c *PaperTypesClient) Delete() *PaperTypesDelete {
	mutation := newPaperTypesMutation(c.config, OpDelete)
	return &PaperTypesDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PaperTypesClient) DeleteOne(pt *PaperTypes) *PaperTypesDeleteOne {
	return c.DeleteOneID(pt.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *PaperTypesClient) DeleteOneID(id int32) *PaperTypesDeleteOne {
	builder := c.Delete().Where(papertypes.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PaperTypesDeleteOne{builder}
}

// Query returns a query builder for PaperTypes.
func (c *PaperTypesClient) Query() *PaperTypesQuery {
	return &PaperTypesQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypePaperTypes},
		inters: c.Interceptors(),
	}
}

// Get returns a PaperTypes entity by its id.
func (c *PaperTypesClient) Get(ctx context.Context, id int32) (*PaperTypes, error) {
	return c.Query().Where(papertypes.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PaperTypesClient) GetX(ctx context.Context, id int32) *PaperTypes {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryPapercode queries the papercode edge of a PaperTypes.
func (c *PaperTypesClient) QueryPapercode(pt *PaperTypes) *ExamPapersQuery {
	query := (&ExamPapersClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pt.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(papertypes.Table, papertypes.FieldID, id),
			sqlgraph.To(exampapers.Table, exampapers.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, papertypes.PapercodeTable, papertypes.PapercodeColumn),
		)
		fromV = sqlgraph.Neighbors(pt.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PaperTypesClient) Hooks() []Hook {
	return c.hooks.PaperTypes
}

// Interceptors returns the client interceptors.
func (c *PaperTypesClient) Interceptors() []Interceptor {
	return c.inters.PaperTypes
}

func (c *PaperTypesClient) mutate(ctx context.Context, m *PaperTypesMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&PaperTypesCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&PaperTypesUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&PaperTypesUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&PaperTypesDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown PaperTypes mutation op: %q", m.Op())
	}
}

// PlaceOfPreferenceIPClient is a client for the PlaceOfPreferenceIP schema.
type PlaceOfPreferenceIPClient struct {
	config
}

// NewPlaceOfPreferenceIPClient returns a client for the PlaceOfPreferenceIP from the given config.
func NewPlaceOfPreferenceIPClient(c config) *PlaceOfPreferenceIPClient {
	return &PlaceOfPreferenceIPClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `placeofpreferenceip.Hooks(f(g(h())))`.
func (c *PlaceOfPreferenceIPClient) Use(hooks ...Hook) {
	c.hooks.PlaceOfPreferenceIP = append(c.hooks.PlaceOfPreferenceIP, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `placeofpreferenceip.Intercept(f(g(h())))`.
func (c *PlaceOfPreferenceIPClient) Intercept(interceptors ...Interceptor) {
	c.inters.PlaceOfPreferenceIP = append(c.inters.PlaceOfPreferenceIP, interceptors...)
}

// Create returns a builder for creating a PlaceOfPreferenceIP entity.
func (c *PlaceOfPreferenceIPClient) Create() *PlaceOfPreferenceIPCreate {
	mutation := newPlaceOfPreferenceIPMutation(c.config, OpCreate)
	return &PlaceOfPreferenceIPCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of PlaceOfPreferenceIP entities.
func (c *PlaceOfPreferenceIPClient) CreateBulk(builders ...*PlaceOfPreferenceIPCreate) *PlaceOfPreferenceIPCreateBulk {
	return &PlaceOfPreferenceIPCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for PlaceOfPreferenceIP.
func (c *PlaceOfPreferenceIPClient) Update() *PlaceOfPreferenceIPUpdate {
	mutation := newPlaceOfPreferenceIPMutation(c.config, OpUpdate)
	return &PlaceOfPreferenceIPUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PlaceOfPreferenceIPClient) UpdateOne(popi *PlaceOfPreferenceIP) *PlaceOfPreferenceIPUpdateOne {
	mutation := newPlaceOfPreferenceIPMutation(c.config, OpUpdateOne, withPlaceOfPreferenceIP(popi))
	return &PlaceOfPreferenceIPUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PlaceOfPreferenceIPClient) UpdateOneID(id int32) *PlaceOfPreferenceIPUpdateOne {
	mutation := newPlaceOfPreferenceIPMutation(c.config, OpUpdateOne, withPlaceOfPreferenceIPID(id))
	return &PlaceOfPreferenceIPUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for PlaceOfPreferenceIP.
func (c *PlaceOfPreferenceIPClient) Delete() *PlaceOfPreferenceIPDelete {
	mutation := newPlaceOfPreferenceIPMutation(c.config, OpDelete)
	return &PlaceOfPreferenceIPDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PlaceOfPreferenceIPClient) DeleteOne(popi *PlaceOfPreferenceIP) *PlaceOfPreferenceIPDeleteOne {
	return c.DeleteOneID(popi.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *PlaceOfPreferenceIPClient) DeleteOneID(id int32) *PlaceOfPreferenceIPDeleteOne {
	builder := c.Delete().Where(placeofpreferenceip.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PlaceOfPreferenceIPDeleteOne{builder}
}

// Query returns a query builder for PlaceOfPreferenceIP.
func (c *PlaceOfPreferenceIPClient) Query() *PlaceOfPreferenceIPQuery {
	return &PlaceOfPreferenceIPQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypePlaceOfPreferenceIP},
		inters: c.Interceptors(),
	}
}

// Get returns a PlaceOfPreferenceIP entity by its id.
func (c *PlaceOfPreferenceIPClient) Get(ctx context.Context, id int32) (*PlaceOfPreferenceIP, error) {
	return c.Query().Where(placeofpreferenceip.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PlaceOfPreferenceIPClient) GetX(ctx context.Context, id int32) *PlaceOfPreferenceIP {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryApplnIPRef queries the ApplnIP_Ref edge of a PlaceOfPreferenceIP.
func (c *PlaceOfPreferenceIPClient) QueryApplnIPRef(popi *PlaceOfPreferenceIP) *ExamApplicationsIPQuery {
	query := (&ExamApplicationsIPClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := popi.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(placeofpreferenceip.Table, placeofpreferenceip.FieldID, id),
			sqlgraph.To(exam_applications_ip.Table, exam_applications_ip.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, placeofpreferenceip.ApplnIPRefTable, placeofpreferenceip.ApplnIPRefColumn),
		)
		fromV = sqlgraph.Neighbors(popi.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PlaceOfPreferenceIPClient) Hooks() []Hook {
	return c.hooks.PlaceOfPreferenceIP
}

// Interceptors returns the client interceptors.
func (c *PlaceOfPreferenceIPClient) Interceptors() []Interceptor {
	return c.inters.PlaceOfPreferenceIP
}

func (c *PlaceOfPreferenceIPClient) mutate(ctx context.Context, m *PlaceOfPreferenceIPMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&PlaceOfPreferenceIPCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&PlaceOfPreferenceIPUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&PlaceOfPreferenceIPUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&PlaceOfPreferenceIPDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown PlaceOfPreferenceIP mutation op: %q", m.Op())
	}
}

// PlaceOfPreferencePSClient is a client for the PlaceOfPreferencePS schema.
type PlaceOfPreferencePSClient struct {
	config
}

// NewPlaceOfPreferencePSClient returns a client for the PlaceOfPreferencePS from the given config.
func NewPlaceOfPreferencePSClient(c config) *PlaceOfPreferencePSClient {
	return &PlaceOfPreferencePSClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `placeofpreferenceps.Hooks(f(g(h())))`.
func (c *PlaceOfPreferencePSClient) Use(hooks ...Hook) {
	c.hooks.PlaceOfPreferencePS = append(c.hooks.PlaceOfPreferencePS, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `placeofpreferenceps.Intercept(f(g(h())))`.
func (c *PlaceOfPreferencePSClient) Intercept(interceptors ...Interceptor) {
	c.inters.PlaceOfPreferencePS = append(c.inters.PlaceOfPreferencePS, interceptors...)
}

// Create returns a builder for creating a PlaceOfPreferencePS entity.
func (c *PlaceOfPreferencePSClient) Create() *PlaceOfPreferencePSCreate {
	mutation := newPlaceOfPreferencePSMutation(c.config, OpCreate)
	return &PlaceOfPreferencePSCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of PlaceOfPreferencePS entities.
func (c *PlaceOfPreferencePSClient) CreateBulk(builders ...*PlaceOfPreferencePSCreate) *PlaceOfPreferencePSCreateBulk {
	return &PlaceOfPreferencePSCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for PlaceOfPreferencePS.
func (c *PlaceOfPreferencePSClient) Update() *PlaceOfPreferencePSUpdate {
	mutation := newPlaceOfPreferencePSMutation(c.config, OpUpdate)
	return &PlaceOfPreferencePSUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PlaceOfPreferencePSClient) UpdateOne(popp *PlaceOfPreferencePS) *PlaceOfPreferencePSUpdateOne {
	mutation := newPlaceOfPreferencePSMutation(c.config, OpUpdateOne, withPlaceOfPreferencePS(popp))
	return &PlaceOfPreferencePSUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PlaceOfPreferencePSClient) UpdateOneID(id int32) *PlaceOfPreferencePSUpdateOne {
	mutation := newPlaceOfPreferencePSMutation(c.config, OpUpdateOne, withPlaceOfPreferencePSID(id))
	return &PlaceOfPreferencePSUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for PlaceOfPreferencePS.
func (c *PlaceOfPreferencePSClient) Delete() *PlaceOfPreferencePSDelete {
	mutation := newPlaceOfPreferencePSMutation(c.config, OpDelete)
	return &PlaceOfPreferencePSDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PlaceOfPreferencePSClient) DeleteOne(popp *PlaceOfPreferencePS) *PlaceOfPreferencePSDeleteOne {
	return c.DeleteOneID(popp.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *PlaceOfPreferencePSClient) DeleteOneID(id int32) *PlaceOfPreferencePSDeleteOne {
	builder := c.Delete().Where(placeofpreferenceps.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PlaceOfPreferencePSDeleteOne{builder}
}

// Query returns a query builder for PlaceOfPreferencePS.
func (c *PlaceOfPreferencePSClient) Query() *PlaceOfPreferencePSQuery {
	return &PlaceOfPreferencePSQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypePlaceOfPreferencePS},
		inters: c.Interceptors(),
	}
}

// Get returns a PlaceOfPreferencePS entity by its id.
func (c *PlaceOfPreferencePSClient) Get(ctx context.Context, id int32) (*PlaceOfPreferencePS, error) {
	return c.Query().Where(placeofpreferenceps.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PlaceOfPreferencePSClient) GetX(ctx context.Context, id int32) *PlaceOfPreferencePS {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryPlaceApplnPSRef queries the PlaceApplnPS_Ref edge of a PlaceOfPreferencePS.
func (c *PlaceOfPreferencePSClient) QueryPlaceApplnPSRef(popp *PlaceOfPreferencePS) *ExamApplicationsPSQuery {
	query := (&ExamApplicationsPSClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := popp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(placeofpreferenceps.Table, placeofpreferenceps.FieldID, id),
			sqlgraph.To(exam_applications_ps.Table, exam_applications_ps.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, placeofpreferenceps.PlaceApplnPSRefTable, placeofpreferenceps.PlaceApplnPSRefColumn),
		)
		fromV = sqlgraph.Neighbors(popp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PlaceOfPreferencePSClient) Hooks() []Hook {
	return c.hooks.PlaceOfPreferencePS
}

// Interceptors returns the client interceptors.
func (c *PlaceOfPreferencePSClient) Interceptors() []Interceptor {
	return c.inters.PlaceOfPreferencePS
}

func (c *PlaceOfPreferencePSClient) mutate(ctx context.Context, m *PlaceOfPreferencePSMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&PlaceOfPreferencePSCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&PlaceOfPreferencePSUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&PlaceOfPreferencePSUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&PlaceOfPreferencePSDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown PlaceOfPreferencePS mutation op: %q", m.Op())
	}
}

// PostExamPaperClient is a client for the PostExamPaper schema.
type PostExamPaperClient struct {
	config
}

// NewPostExamPaperClient returns a client for the PostExamPaper from the given config.
func NewPostExamPaperClient(c config) *PostExamPaperClient {
	return &PostExamPaperClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `postexampaper.Hooks(f(g(h())))`.
func (c *PostExamPaperClient) Use(hooks ...Hook) {
	c.hooks.PostExamPaper = append(c.hooks.PostExamPaper, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `postexampaper.Intercept(f(g(h())))`.
func (c *PostExamPaperClient) Intercept(interceptors ...Interceptor) {
	c.inters.PostExamPaper = append(c.inters.PostExamPaper, interceptors...)
}

// Create returns a builder for creating a PostExamPaper entity.
func (c *PostExamPaperClient) Create() *PostExamPaperCreate {
	mutation := newPostExamPaperMutation(c.config, OpCreate)
	return &PostExamPaperCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of PostExamPaper entities.
func (c *PostExamPaperClient) CreateBulk(builders ...*PostExamPaperCreate) *PostExamPaperCreateBulk {
	return &PostExamPaperCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for PostExamPaper.
func (c *PostExamPaperClient) Update() *PostExamPaperUpdate {
	mutation := newPostExamPaperMutation(c.config, OpUpdate)
	return &PostExamPaperUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PostExamPaperClient) UpdateOne(pep *PostExamPaper) *PostExamPaperUpdateOne {
	mutation := newPostExamPaperMutation(c.config, OpUpdateOne, withPostExamPaper(pep))
	return &PostExamPaperUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PostExamPaperClient) UpdateOneID(id int32) *PostExamPaperUpdateOne {
	mutation := newPostExamPaperMutation(c.config, OpUpdateOne, withPostExamPaperID(id))
	return &PostExamPaperUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for PostExamPaper.
func (c *PostExamPaperClient) Delete() *PostExamPaperDelete {
	mutation := newPostExamPaperMutation(c.config, OpDelete)
	return &PostExamPaperDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PostExamPaperClient) DeleteOne(pep *PostExamPaper) *PostExamPaperDeleteOne {
	return c.DeleteOneID(pep.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *PostExamPaperClient) DeleteOneID(id int32) *PostExamPaperDeleteOne {
	builder := c.Delete().Where(postexampaper.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PostExamPaperDeleteOne{builder}
}

// Query returns a query builder for PostExamPaper.
func (c *PostExamPaperClient) Query() *PostExamPaperQuery {
	return &PostExamPaperQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypePostExamPaper},
		inters: c.Interceptors(),
	}
}

// Get returns a PostExamPaper entity by its id.
func (c *PostExamPaperClient) Get(ctx context.Context, id int32) (*PostExamPaper, error) {
	return c.Query().Where(postexampaper.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PostExamPaperClient) GetX(ctx context.Context, id int32) *PostExamPaper {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *PostExamPaperClient) Hooks() []Hook {
	return c.hooks.PostExamPaper
}

// Interceptors returns the client interceptors.
func (c *PostExamPaperClient) Interceptors() []Interceptor {
	return c.inters.PostExamPaper
}

func (c *PostExamPaperClient) mutate(ctx context.Context, m *PostExamPaperMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&PostExamPaperCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&PostExamPaperUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&PostExamPaperUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&PostExamPaperDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown PostExamPaper mutation op: %q", m.Op())
	}
}

// RecommendationsGDSPAApplicationsClient is a client for the RecommendationsGDSPAApplications schema.
type RecommendationsGDSPAApplicationsClient struct {
	config
}

// NewRecommendationsGDSPAApplicationsClient returns a client for the RecommendationsGDSPAApplications from the given config.
func NewRecommendationsGDSPAApplicationsClient(c config) *RecommendationsGDSPAApplicationsClient {
	return &RecommendationsGDSPAApplicationsClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `recommendationsgdspaapplications.Hooks(f(g(h())))`.
func (c *RecommendationsGDSPAApplicationsClient) Use(hooks ...Hook) {
	c.hooks.RecommendationsGDSPAApplications = append(c.hooks.RecommendationsGDSPAApplications, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `recommendationsgdspaapplications.Intercept(f(g(h())))`.
func (c *RecommendationsGDSPAApplicationsClient) Intercept(interceptors ...Interceptor) {
	c.inters.RecommendationsGDSPAApplications = append(c.inters.RecommendationsGDSPAApplications, interceptors...)
}

// Create returns a builder for creating a RecommendationsGDSPAApplications entity.
func (c *RecommendationsGDSPAApplicationsClient) Create() *RecommendationsGDSPAApplicationsCreate {
	mutation := newRecommendationsGDSPAApplicationsMutation(c.config, OpCreate)
	return &RecommendationsGDSPAApplicationsCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of RecommendationsGDSPAApplications entities.
func (c *RecommendationsGDSPAApplicationsClient) CreateBulk(builders ...*RecommendationsGDSPAApplicationsCreate) *RecommendationsGDSPAApplicationsCreateBulk {
	return &RecommendationsGDSPAApplicationsCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for RecommendationsGDSPAApplications.
func (c *RecommendationsGDSPAApplicationsClient) Update() *RecommendationsGDSPAApplicationsUpdate {
	mutation := newRecommendationsGDSPAApplicationsMutation(c.config, OpUpdate)
	return &RecommendationsGDSPAApplicationsUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *RecommendationsGDSPAApplicationsClient) UpdateOne(rga *RecommendationsGDSPAApplications) *RecommendationsGDSPAApplicationsUpdateOne {
	mutation := newRecommendationsGDSPAApplicationsMutation(c.config, OpUpdateOne, withRecommendationsGDSPAApplications(rga))
	return &RecommendationsGDSPAApplicationsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *RecommendationsGDSPAApplicationsClient) UpdateOneID(id int64) *RecommendationsGDSPAApplicationsUpdateOne {
	mutation := newRecommendationsGDSPAApplicationsMutation(c.config, OpUpdateOne, withRecommendationsGDSPAApplicationsID(id))
	return &RecommendationsGDSPAApplicationsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for RecommendationsGDSPAApplications.
func (c *RecommendationsGDSPAApplicationsClient) Delete() *RecommendationsGDSPAApplicationsDelete {
	mutation := newRecommendationsGDSPAApplicationsMutation(c.config, OpDelete)
	return &RecommendationsGDSPAApplicationsDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *RecommendationsGDSPAApplicationsClient) DeleteOne(rga *RecommendationsGDSPAApplications) *RecommendationsGDSPAApplicationsDeleteOne {
	return c.DeleteOneID(rga.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *RecommendationsGDSPAApplicationsClient) DeleteOneID(id int64) *RecommendationsGDSPAApplicationsDeleteOne {
	builder := c.Delete().Where(recommendationsgdspaapplications.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &RecommendationsGDSPAApplicationsDeleteOne{builder}
}

// Query returns a query builder for RecommendationsGDSPAApplications.
func (c *RecommendationsGDSPAApplicationsClient) Query() *RecommendationsGDSPAApplicationsQuery {
	return &RecommendationsGDSPAApplicationsQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeRecommendationsGDSPAApplications},
		inters: c.Interceptors(),
	}
}

// Get returns a RecommendationsGDSPAApplications entity by its id.
func (c *RecommendationsGDSPAApplicationsClient) Get(ctx context.Context, id int64) (*RecommendationsGDSPAApplications, error) {
	return c.Query().Where(recommendationsgdspaapplications.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *RecommendationsGDSPAApplicationsClient) GetX(ctx context.Context, id int64) *RecommendationsGDSPAApplications {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryApplnRef queries the ApplnRef edge of a RecommendationsGDSPAApplications.
func (c *RecommendationsGDSPAApplicationsClient) QueryApplnRef(rga *RecommendationsGDSPAApplications) *ExamApplicationsGDSPAQuery {
	query := (&ExamApplicationsGDSPAClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := rga.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(recommendationsgdspaapplications.Table, recommendationsgdspaapplications.FieldID, id),
			sqlgraph.To(exam_applications_gdspa.Table, exam_applications_gdspa.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, recommendationsgdspaapplications.ApplnRefTable, recommendationsgdspaapplications.ApplnRefColumn),
		)
		fromV = sqlgraph.Neighbors(rga.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *RecommendationsGDSPAApplicationsClient) Hooks() []Hook {
	return c.hooks.RecommendationsGDSPAApplications
}

// Interceptors returns the client interceptors.
func (c *RecommendationsGDSPAApplicationsClient) Interceptors() []Interceptor {
	return c.inters.RecommendationsGDSPAApplications
}

func (c *RecommendationsGDSPAApplicationsClient) mutate(ctx context.Context, m *RecommendationsGDSPAApplicationsMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&RecommendationsGDSPAApplicationsCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&RecommendationsGDSPAApplicationsUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&RecommendationsGDSPAApplicationsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&RecommendationsGDSPAApplicationsDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown RecommendationsGDSPAApplications mutation op: %q", m.Op())
	}
}

// RecommendationsGDSPMApplicationsClient is a client for the RecommendationsGDSPMApplications schema.
type RecommendationsGDSPMApplicationsClient struct {
	config
}

// NewRecommendationsGDSPMApplicationsClient returns a client for the RecommendationsGDSPMApplications from the given config.
func NewRecommendationsGDSPMApplicationsClient(c config) *RecommendationsGDSPMApplicationsClient {
	return &RecommendationsGDSPMApplicationsClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `recommendationsgdspmapplications.Hooks(f(g(h())))`.
func (c *RecommendationsGDSPMApplicationsClient) Use(hooks ...Hook) {
	c.hooks.RecommendationsGDSPMApplications = append(c.hooks.RecommendationsGDSPMApplications, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `recommendationsgdspmapplications.Intercept(f(g(h())))`.
func (c *RecommendationsGDSPMApplicationsClient) Intercept(interceptors ...Interceptor) {
	c.inters.RecommendationsGDSPMApplications = append(c.inters.RecommendationsGDSPMApplications, interceptors...)
}

// Create returns a builder for creating a RecommendationsGDSPMApplications entity.
func (c *RecommendationsGDSPMApplicationsClient) Create() *RecommendationsGDSPMApplicationsCreate {
	mutation := newRecommendationsGDSPMApplicationsMutation(c.config, OpCreate)
	return &RecommendationsGDSPMApplicationsCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of RecommendationsGDSPMApplications entities.
func (c *RecommendationsGDSPMApplicationsClient) CreateBulk(builders ...*RecommendationsGDSPMApplicationsCreate) *RecommendationsGDSPMApplicationsCreateBulk {
	return &RecommendationsGDSPMApplicationsCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for RecommendationsGDSPMApplications.
func (c *RecommendationsGDSPMApplicationsClient) Update() *RecommendationsGDSPMApplicationsUpdate {
	mutation := newRecommendationsGDSPMApplicationsMutation(c.config, OpUpdate)
	return &RecommendationsGDSPMApplicationsUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *RecommendationsGDSPMApplicationsClient) UpdateOne(rga *RecommendationsGDSPMApplications) *RecommendationsGDSPMApplicationsUpdateOne {
	mutation := newRecommendationsGDSPMApplicationsMutation(c.config, OpUpdateOne, withRecommendationsGDSPMApplications(rga))
	return &RecommendationsGDSPMApplicationsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *RecommendationsGDSPMApplicationsClient) UpdateOneID(id int64) *RecommendationsGDSPMApplicationsUpdateOne {
	mutation := newRecommendationsGDSPMApplicationsMutation(c.config, OpUpdateOne, withRecommendationsGDSPMApplicationsID(id))
	return &RecommendationsGDSPMApplicationsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for RecommendationsGDSPMApplications.
func (c *RecommendationsGDSPMApplicationsClient) Delete() *RecommendationsGDSPMApplicationsDelete {
	mutation := newRecommendationsGDSPMApplicationsMutation(c.config, OpDelete)
	return &RecommendationsGDSPMApplicationsDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *RecommendationsGDSPMApplicationsClient) DeleteOne(rga *RecommendationsGDSPMApplications) *RecommendationsGDSPMApplicationsDeleteOne {
	return c.DeleteOneID(rga.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *RecommendationsGDSPMApplicationsClient) DeleteOneID(id int64) *RecommendationsGDSPMApplicationsDeleteOne {
	builder := c.Delete().Where(recommendationsgdspmapplications.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &RecommendationsGDSPMApplicationsDeleteOne{builder}
}

// Query returns a query builder for RecommendationsGDSPMApplications.
func (c *RecommendationsGDSPMApplicationsClient) Query() *RecommendationsGDSPMApplicationsQuery {
	return &RecommendationsGDSPMApplicationsQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeRecommendationsGDSPMApplications},
		inters: c.Interceptors(),
	}
}

// Get returns a RecommendationsGDSPMApplications entity by its id.
func (c *RecommendationsGDSPMApplicationsClient) Get(ctx context.Context, id int64) (*RecommendationsGDSPMApplications, error) {
	return c.Query().Where(recommendationsgdspmapplications.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *RecommendationsGDSPMApplicationsClient) GetX(ctx context.Context, id int64) *RecommendationsGDSPMApplications {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryApplnRef queries the ApplnRef edge of a RecommendationsGDSPMApplications.
func (c *RecommendationsGDSPMApplicationsClient) QueryApplnRef(rga *RecommendationsGDSPMApplications) *ExamApplicationsGDSPMQuery {
	query := (&ExamApplicationsGDSPMClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := rga.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(recommendationsgdspmapplications.Table, recommendationsgdspmapplications.FieldID, id),
			sqlgraph.To(exam_applications_gdspm.Table, exam_applications_gdspm.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, recommendationsgdspmapplications.ApplnRefTable, recommendationsgdspmapplications.ApplnRefColumn),
		)
		fromV = sqlgraph.Neighbors(rga.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *RecommendationsGDSPMApplicationsClient) Hooks() []Hook {
	return c.hooks.RecommendationsGDSPMApplications
}

// Interceptors returns the client interceptors.
func (c *RecommendationsGDSPMApplicationsClient) Interceptors() []Interceptor {
	return c.inters.RecommendationsGDSPMApplications
}

func (c *RecommendationsGDSPMApplicationsClient) mutate(ctx context.Context, m *RecommendationsGDSPMApplicationsMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&RecommendationsGDSPMApplicationsCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&RecommendationsGDSPMApplicationsUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&RecommendationsGDSPMApplicationsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&RecommendationsGDSPMApplicationsDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown RecommendationsGDSPMApplications mutation op: %q", m.Op())
	}
}

// RecommendationsIPApplicationsClient is a client for the RecommendationsIPApplications schema.
type RecommendationsIPApplicationsClient struct {
	config
}

// NewRecommendationsIPApplicationsClient returns a client for the RecommendationsIPApplications from the given config.
func NewRecommendationsIPApplicationsClient(c config) *RecommendationsIPApplicationsClient {
	return &RecommendationsIPApplicationsClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `recommendationsipapplications.Hooks(f(g(h())))`.
func (c *RecommendationsIPApplicationsClient) Use(hooks ...Hook) {
	c.hooks.RecommendationsIPApplications = append(c.hooks.RecommendationsIPApplications, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `recommendationsipapplications.Intercept(f(g(h())))`.
func (c *RecommendationsIPApplicationsClient) Intercept(interceptors ...Interceptor) {
	c.inters.RecommendationsIPApplications = append(c.inters.RecommendationsIPApplications, interceptors...)
}

// Create returns a builder for creating a RecommendationsIPApplications entity.
func (c *RecommendationsIPApplicationsClient) Create() *RecommendationsIPApplicationsCreate {
	mutation := newRecommendationsIPApplicationsMutation(c.config, OpCreate)
	return &RecommendationsIPApplicationsCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of RecommendationsIPApplications entities.
func (c *RecommendationsIPApplicationsClient) CreateBulk(builders ...*RecommendationsIPApplicationsCreate) *RecommendationsIPApplicationsCreateBulk {
	return &RecommendationsIPApplicationsCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for RecommendationsIPApplications.
func (c *RecommendationsIPApplicationsClient) Update() *RecommendationsIPApplicationsUpdate {
	mutation := newRecommendationsIPApplicationsMutation(c.config, OpUpdate)
	return &RecommendationsIPApplicationsUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *RecommendationsIPApplicationsClient) UpdateOne(ria *RecommendationsIPApplications) *RecommendationsIPApplicationsUpdateOne {
	mutation := newRecommendationsIPApplicationsMutation(c.config, OpUpdateOne, withRecommendationsIPApplications(ria))
	return &RecommendationsIPApplicationsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *RecommendationsIPApplicationsClient) UpdateOneID(id int64) *RecommendationsIPApplicationsUpdateOne {
	mutation := newRecommendationsIPApplicationsMutation(c.config, OpUpdateOne, withRecommendationsIPApplicationsID(id))
	return &RecommendationsIPApplicationsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for RecommendationsIPApplications.
func (c *RecommendationsIPApplicationsClient) Delete() *RecommendationsIPApplicationsDelete {
	mutation := newRecommendationsIPApplicationsMutation(c.config, OpDelete)
	return &RecommendationsIPApplicationsDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *RecommendationsIPApplicationsClient) DeleteOne(ria *RecommendationsIPApplications) *RecommendationsIPApplicationsDeleteOne {
	return c.DeleteOneID(ria.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *RecommendationsIPApplicationsClient) DeleteOneID(id int64) *RecommendationsIPApplicationsDeleteOne {
	builder := c.Delete().Where(recommendationsipapplications.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &RecommendationsIPApplicationsDeleteOne{builder}
}

// Query returns a query builder for RecommendationsIPApplications.
func (c *RecommendationsIPApplicationsClient) Query() *RecommendationsIPApplicationsQuery {
	return &RecommendationsIPApplicationsQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeRecommendationsIPApplications},
		inters: c.Interceptors(),
	}
}

// Get returns a RecommendationsIPApplications entity by its id.
func (c *RecommendationsIPApplicationsClient) Get(ctx context.Context, id int64) (*RecommendationsIPApplications, error) {
	return c.Query().Where(recommendationsipapplications.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *RecommendationsIPApplicationsClient) GetX(ctx context.Context, id int64) *RecommendationsIPApplications {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryApplnRef queries the ApplnRef edge of a RecommendationsIPApplications.
func (c *RecommendationsIPApplicationsClient) QueryApplnRef(ria *RecommendationsIPApplications) *ExamApplicationsIPQuery {
	query := (&ExamApplicationsIPClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ria.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(recommendationsipapplications.Table, recommendationsipapplications.FieldID, id),
			sqlgraph.To(exam_applications_ip.Table, exam_applications_ip.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, recommendationsipapplications.ApplnRefTable, recommendationsipapplications.ApplnRefColumn),
		)
		fromV = sqlgraph.Neighbors(ria.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *RecommendationsIPApplicationsClient) Hooks() []Hook {
	return c.hooks.RecommendationsIPApplications
}

// Interceptors returns the client interceptors.
func (c *RecommendationsIPApplicationsClient) Interceptors() []Interceptor {
	return c.inters.RecommendationsIPApplications
}

func (c *RecommendationsIPApplicationsClient) mutate(ctx context.Context, m *RecommendationsIPApplicationsMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&RecommendationsIPApplicationsCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&RecommendationsIPApplicationsUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&RecommendationsIPApplicationsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&RecommendationsIPApplicationsDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown RecommendationsIPApplications mutation op: %q", m.Op())
	}
}

// RecommendationsMTSPMMGApplicationsClient is a client for the RecommendationsMTSPMMGApplications schema.
type RecommendationsMTSPMMGApplicationsClient struct {
	config
}

// NewRecommendationsMTSPMMGApplicationsClient returns a client for the RecommendationsMTSPMMGApplications from the given config.
func NewRecommendationsMTSPMMGApplicationsClient(c config) *RecommendationsMTSPMMGApplicationsClient {
	return &RecommendationsMTSPMMGApplicationsClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `recommendationsmtspmmgapplications.Hooks(f(g(h())))`.
func (c *RecommendationsMTSPMMGApplicationsClient) Use(hooks ...Hook) {
	c.hooks.RecommendationsMTSPMMGApplications = append(c.hooks.RecommendationsMTSPMMGApplications, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `recommendationsmtspmmgapplications.Intercept(f(g(h())))`.
func (c *RecommendationsMTSPMMGApplicationsClient) Intercept(interceptors ...Interceptor) {
	c.inters.RecommendationsMTSPMMGApplications = append(c.inters.RecommendationsMTSPMMGApplications, interceptors...)
}

// Create returns a builder for creating a RecommendationsMTSPMMGApplications entity.
func (c *RecommendationsMTSPMMGApplicationsClient) Create() *RecommendationsMTSPMMGApplicationsCreate {
	mutation := newRecommendationsMTSPMMGApplicationsMutation(c.config, OpCreate)
	return &RecommendationsMTSPMMGApplicationsCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of RecommendationsMTSPMMGApplications entities.
func (c *RecommendationsMTSPMMGApplicationsClient) CreateBulk(builders ...*RecommendationsMTSPMMGApplicationsCreate) *RecommendationsMTSPMMGApplicationsCreateBulk {
	return &RecommendationsMTSPMMGApplicationsCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for RecommendationsMTSPMMGApplications.
func (c *RecommendationsMTSPMMGApplicationsClient) Update() *RecommendationsMTSPMMGApplicationsUpdate {
	mutation := newRecommendationsMTSPMMGApplicationsMutation(c.config, OpUpdate)
	return &RecommendationsMTSPMMGApplicationsUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *RecommendationsMTSPMMGApplicationsClient) UpdateOne(rma *RecommendationsMTSPMMGApplications) *RecommendationsMTSPMMGApplicationsUpdateOne {
	mutation := newRecommendationsMTSPMMGApplicationsMutation(c.config, OpUpdateOne, withRecommendationsMTSPMMGApplications(rma))
	return &RecommendationsMTSPMMGApplicationsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *RecommendationsMTSPMMGApplicationsClient) UpdateOneID(id int64) *RecommendationsMTSPMMGApplicationsUpdateOne {
	mutation := newRecommendationsMTSPMMGApplicationsMutation(c.config, OpUpdateOne, withRecommendationsMTSPMMGApplicationsID(id))
	return &RecommendationsMTSPMMGApplicationsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for RecommendationsMTSPMMGApplications.
func (c *RecommendationsMTSPMMGApplicationsClient) Delete() *RecommendationsMTSPMMGApplicationsDelete {
	mutation := newRecommendationsMTSPMMGApplicationsMutation(c.config, OpDelete)
	return &RecommendationsMTSPMMGApplicationsDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *RecommendationsMTSPMMGApplicationsClient) DeleteOne(rma *RecommendationsMTSPMMGApplications) *RecommendationsMTSPMMGApplicationsDeleteOne {
	return c.DeleteOneID(rma.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *RecommendationsMTSPMMGApplicationsClient) DeleteOneID(id int64) *RecommendationsMTSPMMGApplicationsDeleteOne {
	builder := c.Delete().Where(recommendationsmtspmmgapplications.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &RecommendationsMTSPMMGApplicationsDeleteOne{builder}
}

// Query returns a query builder for RecommendationsMTSPMMGApplications.
func (c *RecommendationsMTSPMMGApplicationsClient) Query() *RecommendationsMTSPMMGApplicationsQuery {
	return &RecommendationsMTSPMMGApplicationsQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeRecommendationsMTSPMMGApplications},
		inters: c.Interceptors(),
	}
}

// Get returns a RecommendationsMTSPMMGApplications entity by its id.
func (c *RecommendationsMTSPMMGApplicationsClient) Get(ctx context.Context, id int64) (*RecommendationsMTSPMMGApplications, error) {
	return c.Query().Where(recommendationsmtspmmgapplications.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *RecommendationsMTSPMMGApplicationsClient) GetX(ctx context.Context, id int64) *RecommendationsMTSPMMGApplications {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryApplnRef queries the ApplnRef edge of a RecommendationsMTSPMMGApplications.
func (c *RecommendationsMTSPMMGApplicationsClient) QueryApplnRef(rma *RecommendationsMTSPMMGApplications) *ExamApplicationMTSPMMGQuery {
	query := (&ExamApplicationMTSPMMGClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := rma.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(recommendationsmtspmmgapplications.Table, recommendationsmtspmmgapplications.FieldID, id),
			sqlgraph.To(exam_application_mtspmmg.Table, exam_application_mtspmmg.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, recommendationsmtspmmgapplications.ApplnRefTable, recommendationsmtspmmgapplications.ApplnRefColumn),
		)
		fromV = sqlgraph.Neighbors(rma.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *RecommendationsMTSPMMGApplicationsClient) Hooks() []Hook {
	return c.hooks.RecommendationsMTSPMMGApplications
}

// Interceptors returns the client interceptors.
func (c *RecommendationsMTSPMMGApplicationsClient) Interceptors() []Interceptor {
	return c.inters.RecommendationsMTSPMMGApplications
}

func (c *RecommendationsMTSPMMGApplicationsClient) mutate(ctx context.Context, m *RecommendationsMTSPMMGApplicationsMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&RecommendationsMTSPMMGApplicationsCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&RecommendationsMTSPMMGApplicationsUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&RecommendationsMTSPMMGApplicationsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&RecommendationsMTSPMMGApplicationsDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown RecommendationsMTSPMMGApplications mutation op: %q", m.Op())
	}
}

// RecommendationsPMPAApplicationsClient is a client for the RecommendationsPMPAApplications schema.
type RecommendationsPMPAApplicationsClient struct {
	config
}

// NewRecommendationsPMPAApplicationsClient returns a client for the RecommendationsPMPAApplications from the given config.
func NewRecommendationsPMPAApplicationsClient(c config) *RecommendationsPMPAApplicationsClient {
	return &RecommendationsPMPAApplicationsClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `recommendationspmpaapplications.Hooks(f(g(h())))`.
func (c *RecommendationsPMPAApplicationsClient) Use(hooks ...Hook) {
	c.hooks.RecommendationsPMPAApplications = append(c.hooks.RecommendationsPMPAApplications, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `recommendationspmpaapplications.Intercept(f(g(h())))`.
func (c *RecommendationsPMPAApplicationsClient) Intercept(interceptors ...Interceptor) {
	c.inters.RecommendationsPMPAApplications = append(c.inters.RecommendationsPMPAApplications, interceptors...)
}

// Create returns a builder for creating a RecommendationsPMPAApplications entity.
func (c *RecommendationsPMPAApplicationsClient) Create() *RecommendationsPMPAApplicationsCreate {
	mutation := newRecommendationsPMPAApplicationsMutation(c.config, OpCreate)
	return &RecommendationsPMPAApplicationsCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of RecommendationsPMPAApplications entities.
func (c *RecommendationsPMPAApplicationsClient) CreateBulk(builders ...*RecommendationsPMPAApplicationsCreate) *RecommendationsPMPAApplicationsCreateBulk {
	return &RecommendationsPMPAApplicationsCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for RecommendationsPMPAApplications.
func (c *RecommendationsPMPAApplicationsClient) Update() *RecommendationsPMPAApplicationsUpdate {
	mutation := newRecommendationsPMPAApplicationsMutation(c.config, OpUpdate)
	return &RecommendationsPMPAApplicationsUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *RecommendationsPMPAApplicationsClient) UpdateOne(rpa *RecommendationsPMPAApplications) *RecommendationsPMPAApplicationsUpdateOne {
	mutation := newRecommendationsPMPAApplicationsMutation(c.config, OpUpdateOne, withRecommendationsPMPAApplications(rpa))
	return &RecommendationsPMPAApplicationsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *RecommendationsPMPAApplicationsClient) UpdateOneID(id int64) *RecommendationsPMPAApplicationsUpdateOne {
	mutation := newRecommendationsPMPAApplicationsMutation(c.config, OpUpdateOne, withRecommendationsPMPAApplicationsID(id))
	return &RecommendationsPMPAApplicationsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for RecommendationsPMPAApplications.
func (c *RecommendationsPMPAApplicationsClient) Delete() *RecommendationsPMPAApplicationsDelete {
	mutation := newRecommendationsPMPAApplicationsMutation(c.config, OpDelete)
	return &RecommendationsPMPAApplicationsDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *RecommendationsPMPAApplicationsClient) DeleteOne(rpa *RecommendationsPMPAApplications) *RecommendationsPMPAApplicationsDeleteOne {
	return c.DeleteOneID(rpa.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *RecommendationsPMPAApplicationsClient) DeleteOneID(id int64) *RecommendationsPMPAApplicationsDeleteOne {
	builder := c.Delete().Where(recommendationspmpaapplications.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &RecommendationsPMPAApplicationsDeleteOne{builder}
}

// Query returns a query builder for RecommendationsPMPAApplications.
func (c *RecommendationsPMPAApplicationsClient) Query() *RecommendationsPMPAApplicationsQuery {
	return &RecommendationsPMPAApplicationsQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeRecommendationsPMPAApplications},
		inters: c.Interceptors(),
	}
}

// Get returns a RecommendationsPMPAApplications entity by its id.
func (c *RecommendationsPMPAApplicationsClient) Get(ctx context.Context, id int64) (*RecommendationsPMPAApplications, error) {
	return c.Query().Where(recommendationspmpaapplications.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *RecommendationsPMPAApplicationsClient) GetX(ctx context.Context, id int64) *RecommendationsPMPAApplications {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryApplnRef queries the ApplnRef edge of a RecommendationsPMPAApplications.
func (c *RecommendationsPMPAApplicationsClient) QueryApplnRef(rpa *RecommendationsPMPAApplications) *ExamApplicationsPMPAQuery {
	query := (&ExamApplicationsPMPAClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := rpa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(recommendationspmpaapplications.Table, recommendationspmpaapplications.FieldID, id),
			sqlgraph.To(exam_applications_pmpa.Table, exam_applications_pmpa.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, recommendationspmpaapplications.ApplnRefTable, recommendationspmpaapplications.ApplnRefColumn),
		)
		fromV = sqlgraph.Neighbors(rpa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *RecommendationsPMPAApplicationsClient) Hooks() []Hook {
	return c.hooks.RecommendationsPMPAApplications
}

// Interceptors returns the client interceptors.
func (c *RecommendationsPMPAApplicationsClient) Interceptors() []Interceptor {
	return c.inters.RecommendationsPMPAApplications
}

func (c *RecommendationsPMPAApplicationsClient) mutate(ctx context.Context, m *RecommendationsPMPAApplicationsMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&RecommendationsPMPAApplicationsCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&RecommendationsPMPAApplicationsUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&RecommendationsPMPAApplicationsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&RecommendationsPMPAApplicationsDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown RecommendationsPMPAApplications mutation op: %q", m.Op())
	}
}

// RecommendationsPSApplicationsClient is a client for the RecommendationsPSApplications schema.
type RecommendationsPSApplicationsClient struct {
	config
}

// NewRecommendationsPSApplicationsClient returns a client for the RecommendationsPSApplications from the given config.
func NewRecommendationsPSApplicationsClient(c config) *RecommendationsPSApplicationsClient {
	return &RecommendationsPSApplicationsClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `recommendationspsapplications.Hooks(f(g(h())))`.
func (c *RecommendationsPSApplicationsClient) Use(hooks ...Hook) {
	c.hooks.RecommendationsPSApplications = append(c.hooks.RecommendationsPSApplications, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `recommendationspsapplications.Intercept(f(g(h())))`.
func (c *RecommendationsPSApplicationsClient) Intercept(interceptors ...Interceptor) {
	c.inters.RecommendationsPSApplications = append(c.inters.RecommendationsPSApplications, interceptors...)
}

// Create returns a builder for creating a RecommendationsPSApplications entity.
func (c *RecommendationsPSApplicationsClient) Create() *RecommendationsPSApplicationsCreate {
	mutation := newRecommendationsPSApplicationsMutation(c.config, OpCreate)
	return &RecommendationsPSApplicationsCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of RecommendationsPSApplications entities.
func (c *RecommendationsPSApplicationsClient) CreateBulk(builders ...*RecommendationsPSApplicationsCreate) *RecommendationsPSApplicationsCreateBulk {
	return &RecommendationsPSApplicationsCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for RecommendationsPSApplications.
func (c *RecommendationsPSApplicationsClient) Update() *RecommendationsPSApplicationsUpdate {
	mutation := newRecommendationsPSApplicationsMutation(c.config, OpUpdate)
	return &RecommendationsPSApplicationsUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *RecommendationsPSApplicationsClient) UpdateOne(rpa *RecommendationsPSApplications) *RecommendationsPSApplicationsUpdateOne {
	mutation := newRecommendationsPSApplicationsMutation(c.config, OpUpdateOne, withRecommendationsPSApplications(rpa))
	return &RecommendationsPSApplicationsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *RecommendationsPSApplicationsClient) UpdateOneID(id int64) *RecommendationsPSApplicationsUpdateOne {
	mutation := newRecommendationsPSApplicationsMutation(c.config, OpUpdateOne, withRecommendationsPSApplicationsID(id))
	return &RecommendationsPSApplicationsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for RecommendationsPSApplications.
func (c *RecommendationsPSApplicationsClient) Delete() *RecommendationsPSApplicationsDelete {
	mutation := newRecommendationsPSApplicationsMutation(c.config, OpDelete)
	return &RecommendationsPSApplicationsDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *RecommendationsPSApplicationsClient) DeleteOne(rpa *RecommendationsPSApplications) *RecommendationsPSApplicationsDeleteOne {
	return c.DeleteOneID(rpa.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *RecommendationsPSApplicationsClient) DeleteOneID(id int64) *RecommendationsPSApplicationsDeleteOne {
	builder := c.Delete().Where(recommendationspsapplications.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &RecommendationsPSApplicationsDeleteOne{builder}
}

// Query returns a query builder for RecommendationsPSApplications.
func (c *RecommendationsPSApplicationsClient) Query() *RecommendationsPSApplicationsQuery {
	return &RecommendationsPSApplicationsQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeRecommendationsPSApplications},
		inters: c.Interceptors(),
	}
}

// Get returns a RecommendationsPSApplications entity by its id.
func (c *RecommendationsPSApplicationsClient) Get(ctx context.Context, id int64) (*RecommendationsPSApplications, error) {
	return c.Query().Where(recommendationspsapplications.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *RecommendationsPSApplicationsClient) GetX(ctx context.Context, id int64) *RecommendationsPSApplications {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryApplnRefPS queries the ApplnRefPS edge of a RecommendationsPSApplications.
func (c *RecommendationsPSApplicationsClient) QueryApplnRefPS(rpa *RecommendationsPSApplications) *ExamApplicationsPSQuery {
	query := (&ExamApplicationsPSClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := rpa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(recommendationspsapplications.Table, recommendationspsapplications.FieldID, id),
			sqlgraph.To(exam_applications_ps.Table, exam_applications_ps.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, recommendationspsapplications.ApplnRefPSTable, recommendationspsapplications.ApplnRefPSColumn),
		)
		fromV = sqlgraph.Neighbors(rpa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *RecommendationsPSApplicationsClient) Hooks() []Hook {
	return c.hooks.RecommendationsPSApplications
}

// Interceptors returns the client interceptors.
func (c *RecommendationsPSApplicationsClient) Interceptors() []Interceptor {
	return c.inters.RecommendationsPSApplications
}

func (c *RecommendationsPSApplicationsClient) mutate(ctx context.Context, m *RecommendationsPSApplicationsMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&RecommendationsPSApplicationsCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&RecommendationsPSApplicationsUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&RecommendationsPSApplicationsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&RecommendationsPSApplicationsDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown RecommendationsPSApplications mutation op: %q", m.Op())
	}
}

// ReversalApplicationIPClient is a client for the Reversal_Application_IP schema.
type ReversalApplicationIPClient struct {
	config
}

// NewReversalApplicationIPClient returns a client for the Reversal_Application_IP from the given config.
func NewReversalApplicationIPClient(c config) *ReversalApplicationIPClient {
	return &ReversalApplicationIPClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `reversal_application_ip.Hooks(f(g(h())))`.
func (c *ReversalApplicationIPClient) Use(hooks ...Hook) {
	c.hooks.Reversal_Application_IP = append(c.hooks.Reversal_Application_IP, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `reversal_application_ip.Intercept(f(g(h())))`.
func (c *ReversalApplicationIPClient) Intercept(interceptors ...Interceptor) {
	c.inters.Reversal_Application_IP = append(c.inters.Reversal_Application_IP, interceptors...)
}

// Create returns a builder for creating a Reversal_Application_IP entity.
func (c *ReversalApplicationIPClient) Create() *ReversalApplicationIPCreate {
	mutation := newReversalApplicationIPMutation(c.config, OpCreate)
	return &ReversalApplicationIPCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Reversal_Application_IP entities.
func (c *ReversalApplicationIPClient) CreateBulk(builders ...*ReversalApplicationIPCreate) *ReversalApplicationIPCreateBulk {
	return &ReversalApplicationIPCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Reversal_Application_IP.
func (c *ReversalApplicationIPClient) Update() *ReversalApplicationIPUpdate {
	mutation := newReversalApplicationIPMutation(c.config, OpUpdate)
	return &ReversalApplicationIPUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ReversalApplicationIPClient) UpdateOne(rai *Reversal_Application_IP) *ReversalApplicationIPUpdateOne {
	mutation := newReversalApplicationIPMutation(c.config, OpUpdateOne, withReversal_Application_IP(rai))
	return &ReversalApplicationIPUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ReversalApplicationIPClient) UpdateOneID(id int64) *ReversalApplicationIPUpdateOne {
	mutation := newReversalApplicationIPMutation(c.config, OpUpdateOne, withReversal_Application_IPID(id))
	return &ReversalApplicationIPUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Reversal_Application_IP.
func (c *ReversalApplicationIPClient) Delete() *ReversalApplicationIPDelete {
	mutation := newReversalApplicationIPMutation(c.config, OpDelete)
	return &ReversalApplicationIPDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ReversalApplicationIPClient) DeleteOne(rai *Reversal_Application_IP) *ReversalApplicationIPDeleteOne {
	return c.DeleteOneID(rai.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ReversalApplicationIPClient) DeleteOneID(id int64) *ReversalApplicationIPDeleteOne {
	builder := c.Delete().Where(reversal_application_ip.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ReversalApplicationIPDeleteOne{builder}
}

// Query returns a query builder for Reversal_Application_IP.
func (c *ReversalApplicationIPClient) Query() *ReversalApplicationIPQuery {
	return &ReversalApplicationIPQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeReversalApplicationIP},
		inters: c.Interceptors(),
	}
}

// Get returns a Reversal_Application_IP entity by its id.
func (c *ReversalApplicationIPClient) Get(ctx context.Context, id int64) (*Reversal_Application_IP, error) {
	return c.Query().Where(reversal_application_ip.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ReversalApplicationIPClient) GetX(ctx context.Context, id int64) *Reversal_Application_IP {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *ReversalApplicationIPClient) Hooks() []Hook {
	return c.hooks.Reversal_Application_IP
}

// Interceptors returns the client interceptors.
func (c *ReversalApplicationIPClient) Interceptors() []Interceptor {
	return c.inters.Reversal_Application_IP
}

func (c *ReversalApplicationIPClient) mutate(ctx context.Context, m *ReversalApplicationIPMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ReversalApplicationIPCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ReversalApplicationIPUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ReversalApplicationIPUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ReversalApplicationIPDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Reversal_Application_IP mutation op: %q", m.Op())
	}
}

// RoleMasterClient is a client for the RoleMaster schema.
type RoleMasterClient struct {
	config
}

// NewRoleMasterClient returns a client for the RoleMaster from the given config.
func NewRoleMasterClient(c config) *RoleMasterClient {
	return &RoleMasterClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `rolemaster.Hooks(f(g(h())))`.
func (c *RoleMasterClient) Use(hooks ...Hook) {
	c.hooks.RoleMaster = append(c.hooks.RoleMaster, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `rolemaster.Intercept(f(g(h())))`.
func (c *RoleMasterClient) Intercept(interceptors ...Interceptor) {
	c.inters.RoleMaster = append(c.inters.RoleMaster, interceptors...)
}

// Create returns a builder for creating a RoleMaster entity.
func (c *RoleMasterClient) Create() *RoleMasterCreate {
	mutation := newRoleMasterMutation(c.config, OpCreate)
	return &RoleMasterCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of RoleMaster entities.
func (c *RoleMasterClient) CreateBulk(builders ...*RoleMasterCreate) *RoleMasterCreateBulk {
	return &RoleMasterCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for RoleMaster.
func (c *RoleMasterClient) Update() *RoleMasterUpdate {
	mutation := newRoleMasterMutation(c.config, OpUpdate)
	return &RoleMasterUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *RoleMasterClient) UpdateOne(rm *RoleMaster) *RoleMasterUpdateOne {
	mutation := newRoleMasterMutation(c.config, OpUpdateOne, withRoleMaster(rm))
	return &RoleMasterUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *RoleMasterClient) UpdateOneID(id int32) *RoleMasterUpdateOne {
	mutation := newRoleMasterMutation(c.config, OpUpdateOne, withRoleMasterID(id))
	return &RoleMasterUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for RoleMaster.
func (c *RoleMasterClient) Delete() *RoleMasterDelete {
	mutation := newRoleMasterMutation(c.config, OpDelete)
	return &RoleMasterDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *RoleMasterClient) DeleteOne(rm *RoleMaster) *RoleMasterDeleteOne {
	return c.DeleteOneID(rm.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *RoleMasterClient) DeleteOneID(id int32) *RoleMasterDeleteOne {
	builder := c.Delete().Where(rolemaster.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &RoleMasterDeleteOne{builder}
}

// Query returns a query builder for RoleMaster.
func (c *RoleMasterClient) Query() *RoleMasterQuery {
	return &RoleMasterQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeRoleMaster},
		inters: c.Interceptors(),
	}
}

// Get returns a RoleMaster entity by its id.
func (c *RoleMasterClient) Get(ctx context.Context, id int32) (*RoleMaster, error) {
	return c.Query().Where(rolemaster.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *RoleMasterClient) GetX(ctx context.Context, id int32) *RoleMaster {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryRoles queries the roles edge of a RoleMaster.
func (c *RoleMasterClient) QueryRoles(rm *RoleMaster) *AdminLoginQuery {
	query := (&AdminLoginClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := rm.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(rolemaster.Table, rolemaster.FieldID, id),
			sqlgraph.To(adminlogin.Table, adminlogin.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, rolemaster.RolesTable, rolemaster.RolesColumn),
		)
		fromV = sqlgraph.Neighbors(rm.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRolesRef queries the Roles_Ref edge of a RoleMaster.
func (c *RoleMasterClient) QueryRolesRef(rm *RoleMaster) *UserMasterQuery {
	query := (&UserMasterClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := rm.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(rolemaster.Table, rolemaster.FieldID, id),
			sqlgraph.To(usermaster.Table, usermaster.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, rolemaster.RolesRefTable, rolemaster.RolesRefColumn),
		)
		fromV = sqlgraph.Neighbors(rm.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRolesPSRef queries the Roles_PS_Ref edge of a RoleMaster.
func (c *RoleMasterClient) QueryRolesPSRef(rm *RoleMaster) *ExamApplicationsPSQuery {
	query := (&ExamApplicationsPSClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := rm.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(rolemaster.Table, rolemaster.FieldID, id),
			sqlgraph.To(exam_applications_ps.Table, exam_applications_ps.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, rolemaster.RolesPSRefTable, rolemaster.RolesPSRefColumn),
		)
		fromV = sqlgraph.Neighbors(rm.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRolesIPRef queries the Roles_IP_Ref edge of a RoleMaster.
func (c *RoleMasterClient) QueryRolesIPRef(rm *RoleMaster) *ExamApplicationsIPQuery {
	query := (&ExamApplicationsIPClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := rm.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(rolemaster.Table, rolemaster.FieldID, id),
			sqlgraph.To(exam_applications_ip.Table, exam_applications_ip.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, rolemaster.RolesIPRefTable, rolemaster.RolesIPRefColumn),
		)
		fromV = sqlgraph.Neighbors(rm.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRolesGDSPARef queries the Roles_GDSPA_Ref edge of a RoleMaster.
func (c *RoleMasterClient) QueryRolesGDSPARef(rm *RoleMaster) *ExamApplicationsGDSPAQuery {
	query := (&ExamApplicationsGDSPAClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := rm.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(rolemaster.Table, rolemaster.FieldID, id),
			sqlgraph.To(exam_applications_gdspa.Table, exam_applications_gdspa.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, rolemaster.RolesGDSPARefTable, rolemaster.RolesGDSPARefColumn),
		)
		fromV = sqlgraph.Neighbors(rm.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRolesGDSPMRef queries the Roles_GDSPM_Ref edge of a RoleMaster.
func (c *RoleMasterClient) QueryRolesGDSPMRef(rm *RoleMaster) *ExamApplicationsGDSPMQuery {
	query := (&ExamApplicationsGDSPMClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := rm.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(rolemaster.Table, rolemaster.FieldID, id),
			sqlgraph.To(exam_applications_gdspm.Table, exam_applications_gdspm.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, rolemaster.RolesGDSPMRefTable, rolemaster.RolesGDSPMRefColumn),
		)
		fromV = sqlgraph.Neighbors(rm.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRolesPMPARef queries the Roles_PMPA_Ref edge of a RoleMaster.
func (c *RoleMasterClient) QueryRolesPMPARef(rm *RoleMaster) *ExamApplicationsPMPAQuery {
	query := (&ExamApplicationsPMPAClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := rm.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(rolemaster.Table, rolemaster.FieldID, id),
			sqlgraph.To(exam_applications_pmpa.Table, exam_applications_pmpa.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, rolemaster.RolesPMPARefTable, rolemaster.RolesPMPARefColumn),
		)
		fromV = sqlgraph.Neighbors(rm.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRolesMTSPMMGRef queries the Roles_MTSPMMG_Ref edge of a RoleMaster.
func (c *RoleMasterClient) QueryRolesMTSPMMGRef(rm *RoleMaster) *ExamApplicationMTSPMMGQuery {
	query := (&ExamApplicationMTSPMMGClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := rm.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(rolemaster.Table, rolemaster.FieldID, id),
			sqlgraph.To(exam_application_mtspmmg.Table, exam_application_mtspmmg.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, rolemaster.RolesMTSPMMGRefTable, rolemaster.RolesMTSPMMGRefColumn),
		)
		fromV = sqlgraph.Neighbors(rm.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *RoleMasterClient) Hooks() []Hook {
	return c.hooks.RoleMaster
}

// Interceptors returns the client interceptors.
func (c *RoleMasterClient) Interceptors() []Interceptor {
	return c.inters.RoleMaster
}

func (c *RoleMasterClient) mutate(ctx context.Context, m *RoleMasterMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&RoleMasterCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&RoleMasterUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&RoleMasterUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&RoleMasterDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown RoleMaster mutation op: %q", m.Op())
	}
}

// ServiceRequestClient is a client for the ServiceRequest schema.
type ServiceRequestClient struct {
	config
}

// NewServiceRequestClient returns a client for the ServiceRequest from the given config.
func NewServiceRequestClient(c config) *ServiceRequestClient {
	return &ServiceRequestClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `servicerequest.Hooks(f(g(h())))`.
func (c *ServiceRequestClient) Use(hooks ...Hook) {
	c.hooks.ServiceRequest = append(c.hooks.ServiceRequest, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `servicerequest.Intercept(f(g(h())))`.
func (c *ServiceRequestClient) Intercept(interceptors ...Interceptor) {
	c.inters.ServiceRequest = append(c.inters.ServiceRequest, interceptors...)
}

// Create returns a builder for creating a ServiceRequest entity.
func (c *ServiceRequestClient) Create() *ServiceRequestCreate {
	mutation := newServiceRequestMutation(c.config, OpCreate)
	return &ServiceRequestCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ServiceRequest entities.
func (c *ServiceRequestClient) CreateBulk(builders ...*ServiceRequestCreate) *ServiceRequestCreateBulk {
	return &ServiceRequestCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ServiceRequest.
func (c *ServiceRequestClient) Update() *ServiceRequestUpdate {
	mutation := newServiceRequestMutation(c.config, OpUpdate)
	return &ServiceRequestUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ServiceRequestClient) UpdateOne(sr *ServiceRequest) *ServiceRequestUpdateOne {
	mutation := newServiceRequestMutation(c.config, OpUpdateOne, withServiceRequest(sr))
	return &ServiceRequestUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ServiceRequestClient) UpdateOneID(id int64) *ServiceRequestUpdateOne {
	mutation := newServiceRequestMutation(c.config, OpUpdateOne, withServiceRequestID(id))
	return &ServiceRequestUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ServiceRequest.
func (c *ServiceRequestClient) Delete() *ServiceRequestDelete {
	mutation := newServiceRequestMutation(c.config, OpDelete)
	return &ServiceRequestDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ServiceRequestClient) DeleteOne(sr *ServiceRequest) *ServiceRequestDeleteOne {
	return c.DeleteOneID(sr.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ServiceRequestClient) DeleteOneID(id int64) *ServiceRequestDeleteOne {
	builder := c.Delete().Where(servicerequest.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ServiceRequestDeleteOne{builder}
}

// Query returns a query builder for ServiceRequest.
func (c *ServiceRequestClient) Query() *ServiceRequestQuery {
	return &ServiceRequestQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeServiceRequest},
		inters: c.Interceptors(),
	}
}

// Get returns a ServiceRequest entity by its id.
func (c *ServiceRequestClient) Get(ctx context.Context, id int64) (*ServiceRequest, error) {
	return c.Query().Where(servicerequest.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ServiceRequestClient) GetX(ctx context.Context, id int64) *ServiceRequest {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *ServiceRequestClient) Hooks() []Hook {
	return c.hooks.ServiceRequest
}

// Interceptors returns the client interceptors.
func (c *ServiceRequestClient) Interceptors() []Interceptor {
	return c.inters.ServiceRequest
}

func (c *ServiceRequestClient) mutate(ctx context.Context, m *ServiceRequestMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ServiceRequestCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ServiceRequestUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ServiceRequestUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ServiceRequestDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ServiceRequest mutation op: %q", m.Op())
	}
}

// SmsEmailLogClient is a client for the SmsEmailLog schema.
type SmsEmailLogClient struct {
	config
}

// NewSmsEmailLogClient returns a client for the SmsEmailLog from the given config.
func NewSmsEmailLogClient(c config) *SmsEmailLogClient {
	return &SmsEmailLogClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `smsemaillog.Hooks(f(g(h())))`.
func (c *SmsEmailLogClient) Use(hooks ...Hook) {
	c.hooks.SmsEmailLog = append(c.hooks.SmsEmailLog, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `smsemaillog.Intercept(f(g(h())))`.
func (c *SmsEmailLogClient) Intercept(interceptors ...Interceptor) {
	c.inters.SmsEmailLog = append(c.inters.SmsEmailLog, interceptors...)
}

// Create returns a builder for creating a SmsEmailLog entity.
func (c *SmsEmailLogClient) Create() *SmsEmailLogCreate {
	mutation := newSmsEmailLogMutation(c.config, OpCreate)
	return &SmsEmailLogCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of SmsEmailLog entities.
func (c *SmsEmailLogClient) CreateBulk(builders ...*SmsEmailLogCreate) *SmsEmailLogCreateBulk {
	return &SmsEmailLogCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for SmsEmailLog.
func (c *SmsEmailLogClient) Update() *SmsEmailLogUpdate {
	mutation := newSmsEmailLogMutation(c.config, OpUpdate)
	return &SmsEmailLogUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SmsEmailLogClient) UpdateOne(sel *SmsEmailLog) *SmsEmailLogUpdateOne {
	mutation := newSmsEmailLogMutation(c.config, OpUpdateOne, withSmsEmailLog(sel))
	return &SmsEmailLogUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SmsEmailLogClient) UpdateOneID(id int64) *SmsEmailLogUpdateOne {
	mutation := newSmsEmailLogMutation(c.config, OpUpdateOne, withSmsEmailLogID(id))
	return &SmsEmailLogUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for SmsEmailLog.
func (c *SmsEmailLogClient) Delete() *SmsEmailLogDelete {
	mutation := newSmsEmailLogMutation(c.config, OpDelete)
	return &SmsEmailLogDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *SmsEmailLogClient) DeleteOne(sel *SmsEmailLog) *SmsEmailLogDeleteOne {
	return c.DeleteOneID(sel.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *SmsEmailLogClient) DeleteOneID(id int64) *SmsEmailLogDeleteOne {
	builder := c.Delete().Where(smsemaillog.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SmsEmailLogDeleteOne{builder}
}

// Query returns a query builder for SmsEmailLog.
func (c *SmsEmailLogClient) Query() *SmsEmailLogQuery {
	return &SmsEmailLogQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeSmsEmailLog},
		inters: c.Interceptors(),
	}
}

// Get returns a SmsEmailLog entity by its id.
func (c *SmsEmailLogClient) Get(ctx context.Context, id int64) (*SmsEmailLog, error) {
	return c.Query().Where(smsemaillog.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SmsEmailLogClient) GetX(ctx context.Context, id int64) *SmsEmailLog {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *SmsEmailLogClient) Hooks() []Hook {
	return c.hooks.SmsEmailLog
}

// Interceptors returns the client interceptors.
func (c *SmsEmailLogClient) Interceptors() []Interceptor {
	return c.inters.SmsEmailLog
}

func (c *SmsEmailLogClient) mutate(ctx context.Context, m *SmsEmailLogMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&SmsEmailLogCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&SmsEmailLogUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&SmsEmailLogUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&SmsEmailLogDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown SmsEmailLog mutation op: %q", m.Op())
	}
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `user.Intercept(f(g(h())))`.
func (c *UserClient) Intercept(interceptors ...Interceptor) {
	c.inters.User = append(c.inters.User, interceptors...)
}

// Create returns a builder for creating a User entity.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of User entities.
func (c *UserClient) CreateBulk(builders ...*UserCreate) *UserCreateBulk {
	return &UserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id int) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserClient) DeleteOneID(id int) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Query returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUser},
		inters: c.Interceptors(),
	}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id int) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id int) *User {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	return c.hooks.User
}

// Interceptors returns the client interceptors.
func (c *UserClient) Interceptors() []Interceptor {
	return c.inters.User
}

func (c *UserClient) mutate(ctx context.Context, m *UserMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown User mutation op: %q", m.Op())
	}
}

// UserMasterClient is a client for the UserMaster schema.
type UserMasterClient struct {
	config
}

// NewUserMasterClient returns a client for the UserMaster from the given config.
func NewUserMasterClient(c config) *UserMasterClient {
	return &UserMasterClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `usermaster.Hooks(f(g(h())))`.
func (c *UserMasterClient) Use(hooks ...Hook) {
	c.hooks.UserMaster = append(c.hooks.UserMaster, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `usermaster.Intercept(f(g(h())))`.
func (c *UserMasterClient) Intercept(interceptors ...Interceptor) {
	c.inters.UserMaster = append(c.inters.UserMaster, interceptors...)
}

// Create returns a builder for creating a UserMaster entity.
func (c *UserMasterClient) Create() *UserMasterCreate {
	mutation := newUserMasterMutation(c.config, OpCreate)
	return &UserMasterCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of UserMaster entities.
func (c *UserMasterClient) CreateBulk(builders ...*UserMasterCreate) *UserMasterCreateBulk {
	return &UserMasterCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UserMaster.
func (c *UserMasterClient) Update() *UserMasterUpdate {
	mutation := newUserMasterMutation(c.config, OpUpdate)
	return &UserMasterUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserMasterClient) UpdateOne(um *UserMaster) *UserMasterUpdateOne {
	mutation := newUserMasterMutation(c.config, OpUpdateOne, withUserMaster(um))
	return &UserMasterUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserMasterClient) UpdateOneID(id int64) *UserMasterUpdateOne {
	mutation := newUserMasterMutation(c.config, OpUpdateOne, withUserMasterID(id))
	return &UserMasterUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UserMaster.
func (c *UserMasterClient) Delete() *UserMasterDelete {
	mutation := newUserMasterMutation(c.config, OpDelete)
	return &UserMasterDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserMasterClient) DeleteOne(um *UserMaster) *UserMasterDeleteOne {
	return c.DeleteOneID(um.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserMasterClient) DeleteOneID(id int64) *UserMasterDeleteOne {
	builder := c.Delete().Where(usermaster.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserMasterDeleteOne{builder}
}

// Query returns a query builder for UserMaster.
func (c *UserMasterClient) Query() *UserMasterQuery {
	return &UserMasterQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUserMaster},
		inters: c.Interceptors(),
	}
}

// Get returns a UserMaster entity by its id.
func (c *UserMasterClient) Get(ctx context.Context, id int64) (*UserMaster, error) {
	return c.Query().Where(usermaster.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserMasterClient) GetX(ctx context.Context, id int64) *UserMaster {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryRoles queries the roles edge of a UserMaster.
func (c *UserMasterClient) QueryRoles(um *UserMaster) *RoleMasterQuery {
	query := (&RoleMasterClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := um.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(usermaster.Table, usermaster.FieldID, id),
			sqlgraph.To(rolemaster.Table, rolemaster.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, usermaster.RolesTable, usermaster.RolesColumn),
		)
		fromV = sqlgraph.Neighbors(um.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUsermasterRef queries the UsermasterRef edge of a UserMaster.
func (c *UserMasterClient) QueryUsermasterRef(um *UserMaster) *EmployeeMasterQuery {
	query := (&EmployeeMasterClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := um.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(usermaster.Table, usermaster.FieldID, id),
			sqlgraph.To(employeemaster.Table, employeemaster.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, usermaster.UsermasterRefTable, usermaster.UsermasterRefColumn),
		)
		fromV = sqlgraph.Neighbors(um.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUsersPSRef queries the UsersPSRef edge of a UserMaster.
func (c *UserMasterClient) QueryUsersPSRef(um *UserMaster) *ExamApplicationsPSQuery {
	query := (&ExamApplicationsPSClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := um.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(usermaster.Table, usermaster.FieldID, id),
			sqlgraph.To(exam_applications_ps.Table, exam_applications_ps.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, usermaster.UsersPSRefTable, usermaster.UsersPSRefColumn),
		)
		fromV = sqlgraph.Neighbors(um.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUsersIPRef queries the UsersIPRef edge of a UserMaster.
func (c *UserMasterClient) QueryUsersIPRef(um *UserMaster) *ExamApplicationsIPQuery {
	query := (&ExamApplicationsIPClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := um.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(usermaster.Table, usermaster.FieldID, id),
			sqlgraph.To(exam_applications_ip.Table, exam_applications_ip.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, usermaster.UsersIPRefTable, usermaster.UsersIPRefColumn),
		)
		fromV = sqlgraph.Neighbors(um.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUserIDRef queries the User_ID_Ref edge of a UserMaster.
func (c *UserMasterClient) QueryUserIDRef(um *UserMaster) *ExamNotificationsQuery {
	query := (&ExamNotificationsClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := um.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(usermaster.Table, usermaster.FieldID, id),
			sqlgraph.To(examnotifications.Table, examnotifications.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, usermaster.UserIDRefTable, usermaster.UserIDRefColumn),
		)
		fromV = sqlgraph.Neighbors(um.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUsersGDSPARef queries the UsersGDSPARef edge of a UserMaster.
func (c *UserMasterClient) QueryUsersGDSPARef(um *UserMaster) *ExamApplicationsGDSPAQuery {
	query := (&ExamApplicationsGDSPAClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := um.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(usermaster.Table, usermaster.FieldID, id),
			sqlgraph.To(exam_applications_gdspa.Table, exam_applications_gdspa.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, usermaster.UsersGDSPARefTable, usermaster.UsersGDSPARefColumn),
		)
		fromV = sqlgraph.Neighbors(um.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUsersPMPARef queries the UsersPMPARef edge of a UserMaster.
func (c *UserMasterClient) QueryUsersPMPARef(um *UserMaster) *ExamApplicationsPMPAQuery {
	query := (&ExamApplicationsPMPAClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := um.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(usermaster.Table, usermaster.FieldID, id),
			sqlgraph.To(exam_applications_pmpa.Table, exam_applications_pmpa.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, usermaster.UsersPMPARefTable, usermaster.UsersPMPARefColumn),
		)
		fromV = sqlgraph.Neighbors(um.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUsersGDSPMRef queries the UsersGDSPMRef edge of a UserMaster.
func (c *UserMasterClient) QueryUsersGDSPMRef(um *UserMaster) *ExamApplicationsGDSPMQuery {
	query := (&ExamApplicationsGDSPMClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := um.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(usermaster.Table, usermaster.FieldID, id),
			sqlgraph.To(exam_applications_gdspm.Table, exam_applications_gdspm.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, usermaster.UsersGDSPMRefTable, usermaster.UsersGDSPMRefColumn),
		)
		fromV = sqlgraph.Neighbors(um.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryLogData queries the LogData edge of a UserMaster.
func (c *UserMasterClient) QueryLogData(um *UserMaster) *LogsQuery {
	query := (&LogsClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := um.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(usermaster.Table, usermaster.FieldID, id),
			sqlgraph.To(logs.Table, logs.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, usermaster.LogDataTable, usermaster.LogDataColumn),
		)
		fromV = sqlgraph.Neighbors(um.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserMasterClient) Hooks() []Hook {
	return c.hooks.UserMaster
}

// Interceptors returns the client interceptors.
func (c *UserMasterClient) Interceptors() []Interceptor {
	return c.inters.UserMaster
}

func (c *UserMasterClient) mutate(ctx context.Context, m *UserMasterMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserMasterCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserMasterUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserMasterUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserMasterDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown UserMaster mutation op: %q", m.Op())
	}
}

// VacancyYearClient is a client for the VacancyYear schema.
type VacancyYearClient struct {
	config
}

// NewVacancyYearClient returns a client for the VacancyYear from the given config.
func NewVacancyYearClient(c config) *VacancyYearClient {
	return &VacancyYearClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `vacancyyear.Hooks(f(g(h())))`.
func (c *VacancyYearClient) Use(hooks ...Hook) {
	c.hooks.VacancyYear = append(c.hooks.VacancyYear, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `vacancyyear.Intercept(f(g(h())))`.
func (c *VacancyYearClient) Intercept(interceptors ...Interceptor) {
	c.inters.VacancyYear = append(c.inters.VacancyYear, interceptors...)
}

// Create returns a builder for creating a VacancyYear entity.
func (c *VacancyYearClient) Create() *VacancyYearCreate {
	mutation := newVacancyYearMutation(c.config, OpCreate)
	return &VacancyYearCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of VacancyYear entities.
func (c *VacancyYearClient) CreateBulk(builders ...*VacancyYearCreate) *VacancyYearCreateBulk {
	return &VacancyYearCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for VacancyYear.
func (c *VacancyYearClient) Update() *VacancyYearUpdate {
	mutation := newVacancyYearMutation(c.config, OpUpdate)
	return &VacancyYearUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *VacancyYearClient) UpdateOne(vy *VacancyYear) *VacancyYearUpdateOne {
	mutation := newVacancyYearMutation(c.config, OpUpdateOne, withVacancyYear(vy))
	return &VacancyYearUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *VacancyYearClient) UpdateOneID(id int32) *VacancyYearUpdateOne {
	mutation := newVacancyYearMutation(c.config, OpUpdateOne, withVacancyYearID(id))
	return &VacancyYearUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for VacancyYear.
func (c *VacancyYearClient) Delete() *VacancyYearDelete {
	mutation := newVacancyYearMutation(c.config, OpDelete)
	return &VacancyYearDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *VacancyYearClient) DeleteOne(vy *VacancyYear) *VacancyYearDeleteOne {
	return c.DeleteOneID(vy.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *VacancyYearClient) DeleteOneID(id int32) *VacancyYearDeleteOne {
	builder := c.Delete().Where(vacancyyear.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &VacancyYearDeleteOne{builder}
}

// Query returns a query builder for VacancyYear.
func (c *VacancyYearClient) Query() *VacancyYearQuery {
	return &VacancyYearQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeVacancyYear},
		inters: c.Interceptors(),
	}
}

// Get returns a VacancyYear entity by its id.
func (c *VacancyYearClient) Get(ctx context.Context, id int32) (*VacancyYear, error) {
	return c.Query().Where(vacancyyear.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *VacancyYearClient) GetX(ctx context.Context, id int32) *VacancyYear {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryVacancyRef queries the vacancy_ref edge of a VacancyYear.
func (c *VacancyYearClient) QueryVacancyRef(vy *VacancyYear) *ExamCalendarQuery {
	query := (&ExamCalendarClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := vy.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(vacancyyear.Table, vacancyyear.FieldID, id),
			sqlgraph.To(examcalendar.Table, examcalendar.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, vacancyyear.VacancyRefTable, vacancyyear.VacancyRefColumn),
		)
		fromV = sqlgraph.Neighbors(vy.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryExams queries the exams edge of a VacancyYear.
func (c *VacancyYearClient) QueryExams(vy *VacancyYear) *ExamQuery {
	query := (&ExamClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := vy.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(vacancyyear.Table, vacancyyear.FieldID, id),
			sqlgraph.To(exam.Table, exam.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, vacancyyear.ExamsTable, vacancyyear.ExamsColumn),
		)
		fromV = sqlgraph.Neighbors(vy.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *VacancyYearClient) Hooks() []Hook {
	return c.hooks.VacancyYear
}

// Interceptors returns the client interceptors.
func (c *VacancyYearClient) Interceptors() []Interceptor {
	return c.inters.VacancyYear
}

func (c *VacancyYearClient) mutate(ctx context.Context, m *VacancyYearMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&VacancyYearCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&VacancyYearUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&VacancyYearUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&VacancyYearDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown VacancyYear mutation op: %q", m.Op())
	}
}

// VersionClient is a client for the Version schema.
type VersionClient struct {
	config
}

// NewVersionClient returns a client for the Version from the given config.
func NewVersionClient(c config) *VersionClient {
	return &VersionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `version.Hooks(f(g(h())))`.
func (c *VersionClient) Use(hooks ...Hook) {
	c.hooks.Version = append(c.hooks.Version, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `version.Intercept(f(g(h())))`.
func (c *VersionClient) Intercept(interceptors ...Interceptor) {
	c.inters.Version = append(c.inters.Version, interceptors...)
}

// Create returns a builder for creating a Version entity.
func (c *VersionClient) Create() *VersionCreate {
	mutation := newVersionMutation(c.config, OpCreate)
	return &VersionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Version entities.
func (c *VersionClient) CreateBulk(builders ...*VersionCreate) *VersionCreateBulk {
	return &VersionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Version.
func (c *VersionClient) Update() *VersionUpdate {
	mutation := newVersionMutation(c.config, OpUpdate)
	return &VersionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *VersionClient) UpdateOne(v *Version) *VersionUpdateOne {
	mutation := newVersionMutation(c.config, OpUpdateOne, withVersion(v))
	return &VersionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *VersionClient) UpdateOneID(id int) *VersionUpdateOne {
	mutation := newVersionMutation(c.config, OpUpdateOne, withVersionID(id))
	return &VersionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Version.
func (c *VersionClient) Delete() *VersionDelete {
	mutation := newVersionMutation(c.config, OpDelete)
	return &VersionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *VersionClient) DeleteOne(v *Version) *VersionDeleteOne {
	return c.DeleteOneID(v.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *VersionClient) DeleteOneID(id int) *VersionDeleteOne {
	builder := c.Delete().Where(version.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &VersionDeleteOne{builder}
}

// Query returns a query builder for Version.
func (c *VersionClient) Query() *VersionQuery {
	return &VersionQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeVersion},
		inters: c.Interceptors(),
	}
}

// Get returns a Version entity by its id.
func (c *VersionClient) Get(ctx context.Context, id int) (*Version, error) {
	return c.Query().Where(version.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *VersionClient) GetX(ctx context.Context, id int) *Version {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *VersionClient) Hooks() []Hook {
	return c.hooks.Version
}

// Interceptors returns the client interceptors.
func (c *VersionClient) Interceptors() []Interceptor {
	return c.inters.Version
}

func (c *VersionClient) mutate(ctx context.Context, m *VersionMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&VersionCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&VersionUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&VersionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&VersionDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Version mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		AdminLogin, AdminMaster, AgeEligibility, Application,
		CadreEligibleConfiguration, Cadre_Choice_IP, Cadre_Choice_MTSPMMG,
		Cadre_Choice_PA, Cadre_Choice_PM, Cadre_Choice_PMPA, Cadre_Choice_PS,
		CategoryMininumMarkMapping, Center, CircleSummaryForNO, DirectorateUsers,
		Disability, Division_Choice_MTSPMMG, Division_Choice_PA, Division_Choice_PM,
		Division_Choice_PMPA, EducationDetails, EligibilityCadrePayMatrix,
		EligibilityMaster, EmployeeCadre, EmployeeCategory, EmployeeDesignation,
		EmployeeGroup, EmployeeMaster, EmployeePosts, Employees, ErrorLogs, Exam,
		ExamCalendar, ExamCategoryDisabilityMapping, ExamCenterHall, ExamCityCenter,
		ExamNotifications, ExamPapers, ExamPostMapping, ExamType,
		Exam_Application_MTSPMMG, Exam_Applications_GDSPA, Exam_Applications_GDSPM,
		Exam_Applications_IP, Exam_Applications_PMPA, Exam_Applications_PS,
		FacilityMasters, Login, Logs, Message, Notification, PDF, PaperTypes,
		PlaceOfPreferenceIP, PlaceOfPreferencePS, PostExamPaper,
		RecommendationsGDSPAApplications, RecommendationsGDSPMApplications,
		RecommendationsIPApplications, RecommendationsMTSPMMGApplications,
		RecommendationsPMPAApplications, RecommendationsPSApplications,
		Reversal_Application_IP, RoleMaster, ServiceRequest, SmsEmailLog, User,
		UserMaster, VacancyYear, Version []ent.Hook
	}
	inters struct {
		AdminLogin, AdminMaster, AgeEligibility, Application,
		CadreEligibleConfiguration, Cadre_Choice_IP, Cadre_Choice_MTSPMMG,
		Cadre_Choice_PA, Cadre_Choice_PM, Cadre_Choice_PMPA, Cadre_Choice_PS,
		CategoryMininumMarkMapping, Center, CircleSummaryForNO, DirectorateUsers,
		Disability, Division_Choice_MTSPMMG, Division_Choice_PA, Division_Choice_PM,
		Division_Choice_PMPA, EducationDetails, EligibilityCadrePayMatrix,
		EligibilityMaster, EmployeeCadre, EmployeeCategory, EmployeeDesignation,
		EmployeeGroup, EmployeeMaster, EmployeePosts, Employees, ErrorLogs, Exam,
		ExamCalendar, ExamCategoryDisabilityMapping, ExamCenterHall, ExamCityCenter,
		ExamNotifications, ExamPapers, ExamPostMapping, ExamType,
		Exam_Application_MTSPMMG, Exam_Applications_GDSPA, Exam_Applications_GDSPM,
		Exam_Applications_IP, Exam_Applications_PMPA, Exam_Applications_PS,
		FacilityMasters, Login, Logs, Message, Notification, PDF, PaperTypes,
		PlaceOfPreferenceIP, PlaceOfPreferencePS, PostExamPaper,
		RecommendationsGDSPAApplications, RecommendationsGDSPMApplications,
		RecommendationsIPApplications, RecommendationsMTSPMMGApplications,
		RecommendationsPMPAApplications, RecommendationsPSApplications,
		Reversal_Application_IP, RoleMaster, ServiceRequest, SmsEmailLog, User,
		UserMaster, VacancyYear, Version []ent.Interceptor
	}
)
