// Code generated by ent, DO NOT EDIT.

package ageeligibility

import (
	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the ageeligibility type in the database.
	Label = "age_eligibility"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "AgeElibilityCode"
	// FieldEligibillityCode holds the string denoting the eligibillitycode field in the database.
	FieldEligibillityCode = "eligibillity_code"
	// FieldAge holds the string denoting the age field in the database.
	FieldAge = "age"
	// FieldCategoryID holds the string denoting the categoryid field in the database.
	FieldCategoryID = "category_id"
	// Table holds the table name of the ageeligibility in the database.
	Table = "AgeEligibility"
)

// Columns holds all SQL columns for ageeligibility fields.
var Columns = []string{
	FieldID,
	FieldEligibillityCode,
	FieldAge,
	FieldCategoryID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the AgeEligibility queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByEligibillityCode orders the results by the EligibillityCode field.
func ByEligibillityCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEligibillityCode, opts...).ToFunc()
}

// ByAge orders the results by the Age field.
func ByAge(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAge, opts...).ToFunc()
}

// ByCategoryID orders the results by the CategoryID field.
func ByCategoryID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCategoryID, opts...).ToFunc()
}
