// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"recruit/ent/employeemaster"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// EmployeeMaster is the model entity for the EmployeeMaster schema.
type EmployeeMaster struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// EmployeeID holds the value of the "EmployeeID" field.
	EmployeeID int64 `json:"EmployeeID,omitempty"`
	// EmployeeName holds the value of the "EmployeeName" field.
	EmployeeName string `json:"EmployeeName,omitempty"`
	// DOB holds the value of the "DOB" field.
	DOB string `json:"DOB,omitempty"`
	// Gender holds the value of the "Gender" field.
	Gender string `json:"Gender,omitempty"`
	// MobileNumber holds the value of the "MobileNumber" field.
	MobileNumber string `json:"MobileNumber,omitempty"`
	// EmailID holds the value of the "EmailID" field.
	EmailID string `json:"EmailID,omitempty"`
	// EmployeeCategoryCode holds the value of the "EmployeeCategoryCode" field.
	EmployeeCategoryCode string `json:"EmployeeCategoryCode,omitempty"`
	// EmployeeCategory holds the value of the "EmployeeCategory" field.
	EmployeeCategory string `json:"EmployeeCategory,omitempty"`
	// PostCode holds the value of the "PostCode" field.
	PostCode string `json:"PostCode,omitempty"`
	// EmployeePost holds the value of the "EmployeePost" field.
	EmployeePost string `json:"EmployeePost,omitempty"`
	// FacilityID holds the value of the "FacilityID" field.
	FacilityID string `json:"FacilityID,omitempty"`
	// OfficeName holds the value of the "OfficeName" field.
	OfficeName string `json:"OfficeName,omitempty"`
	// ControllingAuthorityFacilityId holds the value of the "ControllingAuthorityFacilityId" field.
	ControllingAuthorityFacilityId string `json:"ControllingAuthorityFacilityId,omitempty"`
	// ControllingAuthorityName holds the value of the "ControllingAuthorityName" field.
	ControllingAuthorityName string `json:"ControllingAuthorityName,omitempty"`
	// NodalAuthorityFaciliyId holds the value of the "NodalAuthorityFaciliyId" field.
	NodalAuthorityFaciliyId string `json:"NodalAuthorityFaciliyId,omitempty"`
	// NodalAuthorityName holds the value of the "NodalAuthorityName" field.
	NodalAuthorityName string `json:"NodalAuthorityName,omitempty"`
	// Pincode holds the value of the "Pincode" field.
	Pincode string `json:"Pincode,omitempty"`
	// CircleFacilityID holds the value of the "CircleFacilityID" field.
	CircleFacilityID string `json:"CircleFacilityID,omitempty"`
	// Statuss holds the value of the "Statuss" field.
	Statuss string `json:"Statuss,omitempty"`
	// VerifyStatus holds the value of the "VerifyStatus" field.
	VerifyStatus bool `json:"VerifyStatus,omitempty"`
	// UidToken holds the value of the "UidToken" field.
	UidToken string `json:"UidToken,omitempty"`
	// Createdby holds the value of the "Createdby" field.
	Createdby string `json:"Createdby,omitempty"`
	// DCCS holds the value of the "DCCS" field.
	DCCS string `json:"DCCS,omitempty"`
	// CreatedById holds the value of the "CreatedById" field.
	CreatedById int64 `json:"CreatedById,omitempty"`
	// CreatedByUserName holds the value of the "CreatedByUserName" field.
	CreatedByUserName string `json:"CreatedByUserName,omitempty"`
	// CreatedByEmpId holds the value of the "CreatedByEmpId" field.
	CreatedByEmpId int64 `json:"CreatedByEmpId,omitempty"`
	// CreatedByDesignation holds the value of the "CreatedByDesignation" field.
	CreatedByDesignation string `json:"CreatedByDesignation,omitempty"`
	// CreatedDate holds the value of the "CreatedDate" field.
	CreatedDate time.Time `json:"CreatedDate,omitempty"`
	// ModifiedById holds the value of the "ModifiedById" field.
	ModifiedById int64 `json:"ModifiedById,omitempty"`
	// ModifiedByUserName holds the value of the "ModifiedByUserName" field.
	ModifiedByUserName string `json:"ModifiedByUserName,omitempty"`
	// ModifiedByEmpId holds the value of the "ModifiedByEmpId" field.
	ModifiedByEmpId int64 `json:"ModifiedByEmpId,omitempty"`
	// ModifiedByDesignantion holds the value of the "ModifiedByDesignantion" field.
	ModifiedByDesignantion string `json:"ModifiedByDesignantion,omitempty"`
	// ModifiedDate holds the value of the "ModifiedDate" field.
	ModifiedDate time.Time `json:"ModifiedDate,omitempty"`
	// DeletedById holds the value of the "DeletedById" field.
	DeletedById int64 `json:"DeletedById,omitempty"`
	// DeletedByUserName holds the value of the "DeletedByUserName" field.
	DeletedByUserName string `json:"DeletedByUserName,omitempty"`
	// DeletedByEmpId holds the value of the "DeletedByEmpId" field.
	DeletedByEmpId int64 `json:"DeletedByEmpId,omitempty"`
	// DeletedByDesignation holds the value of the "DeletedByDesignation" field.
	DeletedByDesignation string `json:"DeletedByDesignation,omitempty"`
	// DeletedDate holds the value of the "DeletedDate" field.
	DeletedDate time.Time `json:"DeletedDate,omitempty"`
	// UpdatedAt holds the value of the "UpdatedAt" field.
	UpdatedAt time.Time `json:"UpdatedAt,omitempty"`
	// UpdatedBy holds the value of the "UpdatedBy" field.
	UpdatedBy string `json:"UpdatedBy,omitempty"`
	// SmsOtp holds the value of the "SmsOtp" field.
	SmsOtp int64 `json:"SmsOtp,omitempty"`
	// SmsTriggeredTime holds the value of the "SmsTriggeredTime" field.
	SmsTriggeredTime time.Time `json:"SmsTriggeredTime,omitempty"`
	// SmsVerifyStatus holds the value of the "SmsVerifyStatus" field.
	SmsVerifyStatus bool `json:"SmsVerifyStatus,omitempty"`
	// EmailOtp holds the value of the "EmailOtp" field.
	EmailOtp int64 `json:"EmailOtp,omitempty"`
	// EmailTriggeredTime holds the value of the "EmailTriggeredTime" field.
	EmailTriggeredTime time.Time `json:"EmailTriggeredTime,omitempty"`
	// EmailVerifyStatus holds the value of the "EmailVerifyStatus" field.
	EmailVerifyStatus bool `json:"EmailVerifyStatus,omitempty"`
	// FinalSubmitStatus holds the value of the "FinalSubmitStatus" field.
	FinalSubmitStatus bool `json:"FinalSubmitStatus,omitempty"`
	// DCInPresentCadre holds the value of the "DCInPresentCadre" field.
	DCInPresentCadre string `json:"DCInPresentCadre,omitempty"`
	// Cadre holds the value of the "Cadre" field.
	Cadre string `json:"Cadre,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the EmployeeMasterQuery when eager-loading is set.
	Edges                      EmployeeMasterEdges `json:"edges"`
	user_master_usermaster_ref *int64
	selectValues               sql.SelectValues
}

// EmployeeMasterEdges holds the relations/edges for other nodes in the graph.
type EmployeeMasterEdges struct {
	// UsermasterRef holds the value of the UsermasterRef edge.
	UsermasterRef []*UserMaster `json:"UsermasterRef,omitempty"`
	// EmpRef holds the value of the Emp_Ref edge.
	EmpRef []*Exam_Applications_PS `json:"Emp_Ref,omitempty"`
	// LogData holds the value of the LogData edge.
	LogData []*Logs `json:"LogData,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// UsermasterRefOrErr returns the UsermasterRef value or an error if the edge
// was not loaded in eager-loading.
func (e EmployeeMasterEdges) UsermasterRefOrErr() ([]*UserMaster, error) {
	if e.loadedTypes[0] {
		return e.UsermasterRef, nil
	}
	return nil, &NotLoadedError{edge: "UsermasterRef"}
}

// EmpRefOrErr returns the EmpRef value or an error if the edge
// was not loaded in eager-loading.
func (e EmployeeMasterEdges) EmpRefOrErr() ([]*Exam_Applications_PS, error) {
	if e.loadedTypes[1] {
		return e.EmpRef, nil
	}
	return nil, &NotLoadedError{edge: "Emp_Ref"}
}

// LogDataOrErr returns the LogData value or an error if the edge
// was not loaded in eager-loading.
func (e EmployeeMasterEdges) LogDataOrErr() ([]*Logs, error) {
	if e.loadedTypes[2] {
		return e.LogData, nil
	}
	return nil, &NotLoadedError{edge: "LogData"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*EmployeeMaster) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case employeemaster.FieldVerifyStatus, employeemaster.FieldSmsVerifyStatus, employeemaster.FieldEmailVerifyStatus, employeemaster.FieldFinalSubmitStatus:
			values[i] = new(sql.NullBool)
		case employeemaster.FieldID, employeemaster.FieldEmployeeID, employeemaster.FieldCreatedById, employeemaster.FieldCreatedByEmpId, employeemaster.FieldModifiedById, employeemaster.FieldModifiedByEmpId, employeemaster.FieldDeletedById, employeemaster.FieldDeletedByEmpId, employeemaster.FieldSmsOtp, employeemaster.FieldEmailOtp:
			values[i] = new(sql.NullInt64)
		case employeemaster.FieldEmployeeName, employeemaster.FieldDOB, employeemaster.FieldGender, employeemaster.FieldMobileNumber, employeemaster.FieldEmailID, employeemaster.FieldEmployeeCategoryCode, employeemaster.FieldEmployeeCategory, employeemaster.FieldPostCode, employeemaster.FieldEmployeePost, employeemaster.FieldFacilityID, employeemaster.FieldOfficeName, employeemaster.FieldControllingAuthorityFacilityId, employeemaster.FieldControllingAuthorityName, employeemaster.FieldNodalAuthorityFaciliyId, employeemaster.FieldNodalAuthorityName, employeemaster.FieldPincode, employeemaster.FieldCircleFacilityID, employeemaster.FieldStatuss, employeemaster.FieldUidToken, employeemaster.FieldCreatedby, employeemaster.FieldDCCS, employeemaster.FieldCreatedByUserName, employeemaster.FieldCreatedByDesignation, employeemaster.FieldModifiedByUserName, employeemaster.FieldModifiedByDesignantion, employeemaster.FieldDeletedByUserName, employeemaster.FieldDeletedByDesignation, employeemaster.FieldUpdatedBy, employeemaster.FieldDCInPresentCadre, employeemaster.FieldCadre:
			values[i] = new(sql.NullString)
		case employeemaster.FieldCreatedDate, employeemaster.FieldModifiedDate, employeemaster.FieldDeletedDate, employeemaster.FieldUpdatedAt, employeemaster.FieldSmsTriggeredTime, employeemaster.FieldEmailTriggeredTime:
			values[i] = new(sql.NullTime)
		case employeemaster.ForeignKeys[0]: // user_master_usermaster_ref
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the EmployeeMaster fields.
func (em *EmployeeMaster) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case employeemaster.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			em.ID = int64(value.Int64)
		case employeemaster.FieldEmployeeID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field EmployeeID", values[i])
			} else if value.Valid {
				em.EmployeeID = value.Int64
			}
		case employeemaster.FieldEmployeeName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field EmployeeName", values[i])
			} else if value.Valid {
				em.EmployeeName = value.String
			}
		case employeemaster.FieldDOB:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field DOB", values[i])
			} else if value.Valid {
				em.DOB = value.String
			}
		case employeemaster.FieldGender:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Gender", values[i])
			} else if value.Valid {
				em.Gender = value.String
			}
		case employeemaster.FieldMobileNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field MobileNumber", values[i])
			} else if value.Valid {
				em.MobileNumber = value.String
			}
		case employeemaster.FieldEmailID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field EmailID", values[i])
			} else if value.Valid {
				em.EmailID = value.String
			}
		case employeemaster.FieldEmployeeCategoryCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field EmployeeCategoryCode", values[i])
			} else if value.Valid {
				em.EmployeeCategoryCode = value.String
			}
		case employeemaster.FieldEmployeeCategory:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field EmployeeCategory", values[i])
			} else if value.Valid {
				em.EmployeeCategory = value.String
			}
		case employeemaster.FieldPostCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field PostCode", values[i])
			} else if value.Valid {
				em.PostCode = value.String
			}
		case employeemaster.FieldEmployeePost:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field EmployeePost", values[i])
			} else if value.Valid {
				em.EmployeePost = value.String
			}
		case employeemaster.FieldFacilityID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field FacilityID", values[i])
			} else if value.Valid {
				em.FacilityID = value.String
			}
		case employeemaster.FieldOfficeName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field OfficeName", values[i])
			} else if value.Valid {
				em.OfficeName = value.String
			}
		case employeemaster.FieldControllingAuthorityFacilityId:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ControllingAuthorityFacilityId", values[i])
			} else if value.Valid {
				em.ControllingAuthorityFacilityId = value.String
			}
		case employeemaster.FieldControllingAuthorityName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ControllingAuthorityName", values[i])
			} else if value.Valid {
				em.ControllingAuthorityName = value.String
			}
		case employeemaster.FieldNodalAuthorityFaciliyId:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field NodalAuthorityFaciliyId", values[i])
			} else if value.Valid {
				em.NodalAuthorityFaciliyId = value.String
			}
		case employeemaster.FieldNodalAuthorityName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field NodalAuthorityName", values[i])
			} else if value.Valid {
				em.NodalAuthorityName = value.String
			}
		case employeemaster.FieldPincode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Pincode", values[i])
			} else if value.Valid {
				em.Pincode = value.String
			}
		case employeemaster.FieldCircleFacilityID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field CircleFacilityID", values[i])
			} else if value.Valid {
				em.CircleFacilityID = value.String
			}
		case employeemaster.FieldStatuss:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Statuss", values[i])
			} else if value.Valid {
				em.Statuss = value.String
			}
		case employeemaster.FieldVerifyStatus:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field VerifyStatus", values[i])
			} else if value.Valid {
				em.VerifyStatus = value.Bool
			}
		case employeemaster.FieldUidToken:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field UidToken", values[i])
			} else if value.Valid {
				em.UidToken = value.String
			}
		case employeemaster.FieldCreatedby:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Createdby", values[i])
			} else if value.Valid {
				em.Createdby = value.String
			}
		case employeemaster.FieldDCCS:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field DCCS", values[i])
			} else if value.Valid {
				em.DCCS = value.String
			}
		case employeemaster.FieldCreatedById:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field CreatedById", values[i])
			} else if value.Valid {
				em.CreatedById = value.Int64
			}
		case employeemaster.FieldCreatedByUserName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field CreatedByUserName", values[i])
			} else if value.Valid {
				em.CreatedByUserName = value.String
			}
		case employeemaster.FieldCreatedByEmpId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field CreatedByEmpId", values[i])
			} else if value.Valid {
				em.CreatedByEmpId = value.Int64
			}
		case employeemaster.FieldCreatedByDesignation:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field CreatedByDesignation", values[i])
			} else if value.Valid {
				em.CreatedByDesignation = value.String
			}
		case employeemaster.FieldCreatedDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field CreatedDate", values[i])
			} else if value.Valid {
				em.CreatedDate = value.Time
			}
		case employeemaster.FieldModifiedById:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field ModifiedById", values[i])
			} else if value.Valid {
				em.ModifiedById = value.Int64
			}
		case employeemaster.FieldModifiedByUserName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ModifiedByUserName", values[i])
			} else if value.Valid {
				em.ModifiedByUserName = value.String
			}
		case employeemaster.FieldModifiedByEmpId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field ModifiedByEmpId", values[i])
			} else if value.Valid {
				em.ModifiedByEmpId = value.Int64
			}
		case employeemaster.FieldModifiedByDesignantion:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ModifiedByDesignantion", values[i])
			} else if value.Valid {
				em.ModifiedByDesignantion = value.String
			}
		case employeemaster.FieldModifiedDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field ModifiedDate", values[i])
			} else if value.Valid {
				em.ModifiedDate = value.Time
			}
		case employeemaster.FieldDeletedById:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field DeletedById", values[i])
			} else if value.Valid {
				em.DeletedById = value.Int64
			}
		case employeemaster.FieldDeletedByUserName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field DeletedByUserName", values[i])
			} else if value.Valid {
				em.DeletedByUserName = value.String
			}
		case employeemaster.FieldDeletedByEmpId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field DeletedByEmpId", values[i])
			} else if value.Valid {
				em.DeletedByEmpId = value.Int64
			}
		case employeemaster.FieldDeletedByDesignation:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field DeletedByDesignation", values[i])
			} else if value.Valid {
				em.DeletedByDesignation = value.String
			}
		case employeemaster.FieldDeletedDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field DeletedDate", values[i])
			} else if value.Valid {
				em.DeletedDate = value.Time
			}
		case employeemaster.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field UpdatedAt", values[i])
			} else if value.Valid {
				em.UpdatedAt = value.Time
			}
		case employeemaster.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field UpdatedBy", values[i])
			} else if value.Valid {
				em.UpdatedBy = value.String
			}
		case employeemaster.FieldSmsOtp:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field SmsOtp", values[i])
			} else if value.Valid {
				em.SmsOtp = value.Int64
			}
		case employeemaster.FieldSmsTriggeredTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field SmsTriggeredTime", values[i])
			} else if value.Valid {
				em.SmsTriggeredTime = value.Time
			}
		case employeemaster.FieldSmsVerifyStatus:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field SmsVerifyStatus", values[i])
			} else if value.Valid {
				em.SmsVerifyStatus = value.Bool
			}
		case employeemaster.FieldEmailOtp:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field EmailOtp", values[i])
			} else if value.Valid {
				em.EmailOtp = value.Int64
			}
		case employeemaster.FieldEmailTriggeredTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field EmailTriggeredTime", values[i])
			} else if value.Valid {
				em.EmailTriggeredTime = value.Time
			}
		case employeemaster.FieldEmailVerifyStatus:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field EmailVerifyStatus", values[i])
			} else if value.Valid {
				em.EmailVerifyStatus = value.Bool
			}
		case employeemaster.FieldFinalSubmitStatus:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field FinalSubmitStatus", values[i])
			} else if value.Valid {
				em.FinalSubmitStatus = value.Bool
			}
		case employeemaster.FieldDCInPresentCadre:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field DCInPresentCadre", values[i])
			} else if value.Valid {
				em.DCInPresentCadre = value.String
			}
		case employeemaster.FieldCadre:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Cadre", values[i])
			} else if value.Valid {
				em.Cadre = value.String
			}
		case employeemaster.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_master_usermaster_ref", value)
			} else if value.Valid {
				em.user_master_usermaster_ref = new(int64)
				*em.user_master_usermaster_ref = int64(value.Int64)
			}
		default:
			em.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the EmployeeMaster.
// This includes values selected through modifiers, order, etc.
func (em *EmployeeMaster) Value(name string) (ent.Value, error) {
	return em.selectValues.Get(name)
}

// QueryUsermasterRef queries the "UsermasterRef" edge of the EmployeeMaster entity.
func (em *EmployeeMaster) QueryUsermasterRef() *UserMasterQuery {
	return NewEmployeeMasterClient(em.config).QueryUsermasterRef(em)
}

// QueryEmpRef queries the "Emp_Ref" edge of the EmployeeMaster entity.
func (em *EmployeeMaster) QueryEmpRef() *ExamApplicationsPSQuery {
	return NewEmployeeMasterClient(em.config).QueryEmpRef(em)
}

// QueryLogData queries the "LogData" edge of the EmployeeMaster entity.
func (em *EmployeeMaster) QueryLogData() *LogsQuery {
	return NewEmployeeMasterClient(em.config).QueryLogData(em)
}

// Update returns a builder for updating this EmployeeMaster.
// Note that you need to call EmployeeMaster.Unwrap() before calling this method if this EmployeeMaster
// was returned from a transaction, and the transaction was committed or rolled back.
func (em *EmployeeMaster) Update() *EmployeeMasterUpdateOne {
	return NewEmployeeMasterClient(em.config).UpdateOne(em)
}

// Unwrap unwraps the EmployeeMaster entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (em *EmployeeMaster) Unwrap() *EmployeeMaster {
	_tx, ok := em.config.driver.(*txDriver)
	if !ok {
		panic("ent: EmployeeMaster is not a transactional entity")
	}
	em.config.driver = _tx.drv
	return em
}

// String implements the fmt.Stringer.
func (em *EmployeeMaster) String() string {
	var builder strings.Builder
	builder.WriteString("EmployeeMaster(")
	builder.WriteString(fmt.Sprintf("id=%v, ", em.ID))
	builder.WriteString("EmployeeID=")
	builder.WriteString(fmt.Sprintf("%v", em.EmployeeID))
	builder.WriteString(", ")
	builder.WriteString("EmployeeName=")
	builder.WriteString(em.EmployeeName)
	builder.WriteString(", ")
	builder.WriteString("DOB=")
	builder.WriteString(em.DOB)
	builder.WriteString(", ")
	builder.WriteString("Gender=")
	builder.WriteString(em.Gender)
	builder.WriteString(", ")
	builder.WriteString("MobileNumber=")
	builder.WriteString(em.MobileNumber)
	builder.WriteString(", ")
	builder.WriteString("EmailID=")
	builder.WriteString(em.EmailID)
	builder.WriteString(", ")
	builder.WriteString("EmployeeCategoryCode=")
	builder.WriteString(em.EmployeeCategoryCode)
	builder.WriteString(", ")
	builder.WriteString("EmployeeCategory=")
	builder.WriteString(em.EmployeeCategory)
	builder.WriteString(", ")
	builder.WriteString("PostCode=")
	builder.WriteString(em.PostCode)
	builder.WriteString(", ")
	builder.WriteString("EmployeePost=")
	builder.WriteString(em.EmployeePost)
	builder.WriteString(", ")
	builder.WriteString("FacilityID=")
	builder.WriteString(em.FacilityID)
	builder.WriteString(", ")
	builder.WriteString("OfficeName=")
	builder.WriteString(em.OfficeName)
	builder.WriteString(", ")
	builder.WriteString("ControllingAuthorityFacilityId=")
	builder.WriteString(em.ControllingAuthorityFacilityId)
	builder.WriteString(", ")
	builder.WriteString("ControllingAuthorityName=")
	builder.WriteString(em.ControllingAuthorityName)
	builder.WriteString(", ")
	builder.WriteString("NodalAuthorityFaciliyId=")
	builder.WriteString(em.NodalAuthorityFaciliyId)
	builder.WriteString(", ")
	builder.WriteString("NodalAuthorityName=")
	builder.WriteString(em.NodalAuthorityName)
	builder.WriteString(", ")
	builder.WriteString("Pincode=")
	builder.WriteString(em.Pincode)
	builder.WriteString(", ")
	builder.WriteString("CircleFacilityID=")
	builder.WriteString(em.CircleFacilityID)
	builder.WriteString(", ")
	builder.WriteString("Statuss=")
	builder.WriteString(em.Statuss)
	builder.WriteString(", ")
	builder.WriteString("VerifyStatus=")
	builder.WriteString(fmt.Sprintf("%v", em.VerifyStatus))
	builder.WriteString(", ")
	builder.WriteString("UidToken=")
	builder.WriteString(em.UidToken)
	builder.WriteString(", ")
	builder.WriteString("Createdby=")
	builder.WriteString(em.Createdby)
	builder.WriteString(", ")
	builder.WriteString("DCCS=")
	builder.WriteString(em.DCCS)
	builder.WriteString(", ")
	builder.WriteString("CreatedById=")
	builder.WriteString(fmt.Sprintf("%v", em.CreatedById))
	builder.WriteString(", ")
	builder.WriteString("CreatedByUserName=")
	builder.WriteString(em.CreatedByUserName)
	builder.WriteString(", ")
	builder.WriteString("CreatedByEmpId=")
	builder.WriteString(fmt.Sprintf("%v", em.CreatedByEmpId))
	builder.WriteString(", ")
	builder.WriteString("CreatedByDesignation=")
	builder.WriteString(em.CreatedByDesignation)
	builder.WriteString(", ")
	builder.WriteString("CreatedDate=")
	builder.WriteString(em.CreatedDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("ModifiedById=")
	builder.WriteString(fmt.Sprintf("%v", em.ModifiedById))
	builder.WriteString(", ")
	builder.WriteString("ModifiedByUserName=")
	builder.WriteString(em.ModifiedByUserName)
	builder.WriteString(", ")
	builder.WriteString("ModifiedByEmpId=")
	builder.WriteString(fmt.Sprintf("%v", em.ModifiedByEmpId))
	builder.WriteString(", ")
	builder.WriteString("ModifiedByDesignantion=")
	builder.WriteString(em.ModifiedByDesignantion)
	builder.WriteString(", ")
	builder.WriteString("ModifiedDate=")
	builder.WriteString(em.ModifiedDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("DeletedById=")
	builder.WriteString(fmt.Sprintf("%v", em.DeletedById))
	builder.WriteString(", ")
	builder.WriteString("DeletedByUserName=")
	builder.WriteString(em.DeletedByUserName)
	builder.WriteString(", ")
	builder.WriteString("DeletedByEmpId=")
	builder.WriteString(fmt.Sprintf("%v", em.DeletedByEmpId))
	builder.WriteString(", ")
	builder.WriteString("DeletedByDesignation=")
	builder.WriteString(em.DeletedByDesignation)
	builder.WriteString(", ")
	builder.WriteString("DeletedDate=")
	builder.WriteString(em.DeletedDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("UpdatedAt=")
	builder.WriteString(em.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("UpdatedBy=")
	builder.WriteString(em.UpdatedBy)
	builder.WriteString(", ")
	builder.WriteString("SmsOtp=")
	builder.WriteString(fmt.Sprintf("%v", em.SmsOtp))
	builder.WriteString(", ")
	builder.WriteString("SmsTriggeredTime=")
	builder.WriteString(em.SmsTriggeredTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("SmsVerifyStatus=")
	builder.WriteString(fmt.Sprintf("%v", em.SmsVerifyStatus))
	builder.WriteString(", ")
	builder.WriteString("EmailOtp=")
	builder.WriteString(fmt.Sprintf("%v", em.EmailOtp))
	builder.WriteString(", ")
	builder.WriteString("EmailTriggeredTime=")
	builder.WriteString(em.EmailTriggeredTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("EmailVerifyStatus=")
	builder.WriteString(fmt.Sprintf("%v", em.EmailVerifyStatus))
	builder.WriteString(", ")
	builder.WriteString("FinalSubmitStatus=")
	builder.WriteString(fmt.Sprintf("%v", em.FinalSubmitStatus))
	builder.WriteString(", ")
	builder.WriteString("DCInPresentCadre=")
	builder.WriteString(em.DCInPresentCadre)
	builder.WriteString(", ")
	builder.WriteString("Cadre=")
	builder.WriteString(em.Cadre)
	builder.WriteByte(')')
	return builder.String()
}

// EmployeeMasters is a parsable slice of EmployeeMaster.
type EmployeeMasters []*EmployeeMaster
